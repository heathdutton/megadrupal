<?php
/**
 * @file
 * Provides the simplenews filter handler for recipient lists with views.
 */

$plugin = array(
  'title' => t('Views filter'),
  'class' => 'SimplenewsFilterRecipientHandlerViews',
);

/**
 * Handler for getting the list of recipients for a newsletter.
 *
 * @see SimplenewsRecipientHandlerBase
 */
class SimplenewsFilterRecipientHandlerViews extends SimplenewsRecipientHandlerBase {

  /**
   * Overrides SimplenewsRecipentHandlerBase::__construct().
   */
  public function __construct($newsletter, $handler, $settings = array()) {
    parent::__construct($newsletter, $handler, $settings);
  }

  /**
   * Implements ::settingsForm().
   */
  public static function settingsForm($element, $settings) {
    // Check if newsletter has already been sent and if saved settings exist.
    if (!empty($settings)) {
      $read_only = $settings['simplenews_filter']['sent'] ? TRUE : FALSE;
      $default_view = $settings['simplenews_filter']['view_key'];
      $saved_exposed_filters = $settings['simplenews_filter']['exposed'];
    }
    else {
      $read_only = FALSE;
      $default_view = variable_get('simplenews_filter_default_view', NULL);
      $saved_exposed_filters = FALSE;
    }

    // Build form elements.
    $options = simplenews_filter_get_views_as_options();

    $element['simplenews_filter'] = array(
      '#type' => 'fieldset',
      '#title' => t('Filter Newsletter Recipients'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
    $element['simplenews_filter']['view_key'] = array(
      '#type' => 'select',
      '#options' => $options,
      '#title' => t('Which view results should be filtered against?'),
      '#default_value' => $default_view,
      '#description' => t('View must be of type "simplenews_subscriber". If the view display has exposed filters they will be shown below. Pagers are ignored.'),
      '#ajax' => array(
        'callback' => 'simplenews_filter_ajax_view_key_change_callback',
        'wrapper' => 'simplenews-filter-exposed',
        'method' => 'replace',
        'effect' => 'fade',
      ),
      '#disabled' => $read_only,
    );

    // Add exposed filters of selected view to form.
    if (!empty($options)) {
      if (isset($settings['simplenews_filter']['view_key'])) {
        $view_key = $settings['simplenews_filter']['view_key'];
      }
      else {
        $view_key = $default_view ? $default_view : key($options);
      }
      $exposed_form = simplenews_filter_get_views_exposed_form($view_key);
      if ($saved_exposed_filters) {
        foreach ($saved_exposed_filters as $field_name => $value) {
          $exposed_form[$field_name]['#disabled'] = $read_only;
          $exposed_form[$field_name]['#default_value'] = $value;
        }
      }
      $element['simplenews_filter']['exposed'] = $exposed_form;
    }

    return $element;
  }

  /**
   * Implements ::settingsFormValidate().
   */
  public static function settingsFormValidate($form, &$form_state) {
    $values = $form_state['values'];
    // Load node and save settings (will be trigger on AJAX 'Refresh count')
    $nid = $values['nid'];
    $node = node_load($nid);
    $form_settings = $values['simplenews']['recipient_handler_settings'];
    $settings = simplenews_issue_handler_settings($node);
    $settings['simplenews_filter'] = $form_settings['simplenews_filter'];
    simplenews_issue_handler_settings($node, $settings);
    node_save($node);
    // Don't trigger on AJAX buttons or test newsletters.
    if (!isset($form_state['clicked_button']['#ajax']) &&
      $values['simplenews']['send'] == 1
    ) {
      // Make sure that we would be sending to atleast one recipient.
      $count = simplenews_filter_get_recipient_count($nid);
      if ($count < 1) {
        form_set_error('', t('The view query did not match any recipients.'));
      }
    }
  }

  /**
   * Implements ::settingsFormSubmit().
   */
  public static function settingsFormSubmit($element, &$form_state) {
    // Modify $settings, which will saved to the node as a field.
    $values = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
    $settings['simplenews_filter'] = $values['simplenews_filter'];
    // Save sent status so that form can be loaded in read only state.
    if ($form_state['values']['simplenews']['send'] == 1) {
      $settings['simplenews_filter']['sent'] = TRUE;
    }

    return $settings;
  }

  /**
   * Overrides SimplenewsRecipientHandlerBase::buildRecipientQuery().
   *
   * @TODO: 'innerJoin' and 'conditions' should be checked with an "if not
   * already in the SelectQuery then add" condition.
   */
  public function buildRecipientQuery() {
    // Get SelectQuery generated by view using the selected filters.
    $filters = $this->settings['simplenews_filter'];
    $select = simplenews_filter_get_view_query($filters);
    // Join to subscription table.
    $select->innerJoin('simplenews_subscription', NULL, 'simplenews_subscriber.snid = simplenews_subscription.snid');
    // Add fields needed by simplenews mail spool table.
    $select->addField('simplenews_subscriber', 'snid');
    $select->addField('simplenews_subscriber', 'mail');
    $select->addField('simplenews_subscription', 'newsletter_id');
    // Apply required conditions.
    $select->condition('simplenews_subscription.newsletter_id', $this->newsletter->newsletter_id);
    $select->condition('simplenews_subscription.status', SIMPLENEWS_SUBSCRIPTION_STATUS_SUBSCRIBED);
    $select->condition('simplenews_subscriber.activated', SIMPLENEWS_SUBSCRIPTION_ACTIVE);
    // Remove any duplicate results that might have been return from the view.
    $select->distinct();

    return $select;
  }
}
