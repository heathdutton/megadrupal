<?php

/**
 * @file
 * Main module file for Simplenewsfilter.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function simplenews_filter_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'simplenews' && $plugin_type == 'recipient_handlers') {
    return 'plugins/recipient_handlers';
  }
}

/**
 * Implements hook_permission().
 */
function simplenews_filter_permission() {
  return array(
    'administer simplenews filter' => array(
      'title' => t('Administer simplenews filter settings'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function simplenews_filter_menu() {
  $items['admin/config/services/simplenews/filter'] = array(
    'title' => 'Filters',
    'description' => 'Configure your newsletter filter settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplenews_filter_admin_settings_form'),
    'access arguments' => array('administer simplenews filter'),
    'file' => 'includes/simplenews_filter.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function simplenews_filter_form_simplenews_node_tab_send_form_alter(&$form, &$form_state, $form_id) {
  // If newsletter has been sent, load settingsForm in a read only state
  // so that the user has an indication of exactly which filters were applied.
  if (isset($form['simplenews']['none'])) {
    // Build recipient handler object.
    $node = node_load($form['nid']['#value']);
    if ($node->simplenews_handler[LANGUAGE_NONE][0]['value'] == 'simplenews_filter') {
      $newsletter = simplenews_newsletter_load(simplenews_issue_newsletter_id($node));
      $handler = simplenews_issue_handler($node);
      $settings = simplenews_issue_handler_settings($node);
      $recipient_handler = simplenews_get_recipient_handler($newsletter, $handler, $settings);

      // Load settingsForm.
      $form['simplenews']['recipient_handler_settings'] = $recipient_handler::settingsForm(array(), $settings);
    }
  }
  // Manually generate count markup as AJAX button is not triggered on load.
  if (isset($form['simplenews']['recipient_handler_settings'])) {
    $form['simplenews']['recipient_handler_settings']['simplenews_filter']['exposed']['count']['#markup'] = simplenews_filter_get_recipient_count($form['nid']['#value'], TRUE);
  }
}

/**
 * AJAX callback: Load new exposed filters on view select change.
 */
function simplenews_filter_ajax_view_key_change_callback($form, $form_state) {
  // Add exposed filters of selected view to form.
  $view_key = $form_state['values']['simplenews']['recipient_handler_settings']['simplenews_filter']['view_key'];
  $nid = $form_state['values']['nid'];
  $exposed = simplenews_filter_get_views_exposed_form($view_key, $nid);

  return $exposed;
}

/**
 * AJAX callback: Calculate and show recipient numbers.
 */
function simplenews_filter_ajax_count_callback($form, $form_state) {
  // Get node id.
  $nid = $form_state['values']['nid'];
  // Return count element.
  $element = $form['simplenews']['recipient_handler_settings']['simplenews_filter']['exposed']['count'];
  $element['#markup'] = simplenews_filter_get_recipient_count($nid, TRUE);

  return $element;
}

/**
 * Get the number of recipients or generate markup for form count element.
 *
 * @param int $nid
 *   The node id of the newsletter to count recipients for.
 * @param bool $markup
 *   (optional) Whether a number or the entire markup string should be returned.
 *
 * @return string
 *   The number or markup for the number of newsletter recipients.
 */
function simplenews_filter_get_recipient_count($nid, $markup = FALSE) {
  // Get node.
  $node = node_load($nid);
  // Get handler.
  $newsletter_id = simplenews_issue_newsletter_id($node);
  $newsletter = simplenews_newsletter_load($newsletter_id);
  $handler = simplenews_issue_handler($node);
  $settings = simplenews_issue_handler_settings($node);
  $recipient_handler = simplenews_get_recipient_handler($newsletter, $handler, $settings);
  // Return just the count unless markup was asked for.
  if (!$markup) {
    return $recipient_handler->count();
  }
  // Prepare and return markup.
  module_load_include('inc', 'simplenews', 'simplenews.admin');
  $markup = t(
    '@count of @total subcribers will receive this email.',
    array(
      '@count' => $recipient_handler->count(),
      '@total' => simplenews_count_subscriptions($newsletter_id),
    )
  );

  return $markup;
}

/**
 * Form element helper function.
 *
 * Build a form element for a view's exposed filters.
 *
 * @param string $view_key
 *   Name and display of the view to be used, separated by a colon.
 *
 * @return array
 *   The view's exposed filters as a form element.
 */
function simplenews_filter_get_views_exposed_form($view_key, $nid = NULL) {
  // Dissect key.
  $view_key_array = explode(":", $view_key);
  $view_name = $view_key_array[0];
  $view_display = $view_key_array[1];
  // Prepare view.
  $view = views_get_view($view_name);
  $view->set_display($view_display);
  $view->build();

  // Prepare form elements.
  $form_state = array(
    'view' => $view,
    'display' => $view->display_handler->display,
    'method' => 'get',
    'rerender' => TRUE,
    'no_redirect' => TRUE,
  );
  $form = array();
  if (!empty($view->exposed_raw_input)) {
    // If there are exposed filters then load them.
    $form = views_exposed_form($form, $form_state);
  }
  else {
    $form['submit']['#type'] = 'submit';
  }
  $form['submit']['#value'] = t('Refresh count');
  $form['submit'] += array(
    '#ajax' => array(
      'callback' => 'simplenews_filter_ajax_count_callback',
      'wrapper' => 'simplenews-filter-count',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#submit' => array('simplenews_filter_ajax_count_callback'),
  );
  // Add form AJAX wrapper.
  $form['#prefix'] = '<div id="simplenews-filter-exposed">';
  $form['#suffix'] = '</div>';
  // Add count AJAX wrapper.
  $form['count'] = array(
    '#weight' => -1,
    '#prefix' => '<div id="simplenews-filter-count">',
    '#markup' => t('The recipient count needs to be refreshed.'),
    '#suffix' => '</div>',
  );
  if ($nid) {
    $form['count']['#markup'] = simplenews_filter_get_recipient_count($nid, TRUE);
  }

  return $form;
}

/**
 * Build a views option list for simplenews filter.
 *
 * @return array
 *   Form select options.
 */
function simplenews_filter_get_views_as_options() {
  $views = views_get_all_views();
  $options = array();
  foreach ($views as $view_name => $view) {
    // Condition: View must be built from the simplenews subscriber table.
    if ($view->base_table == 'simplenews_subscriber') {
      foreach ($view->display as $display_id => $display) {
        // Condition: User has access to this display.
        if ($view->access($display_id)) {
          // Only print display name if there are multiple displays.
          if (count($view->display) > 1) {
            $options[$view_name . ':' . $display_id] = t(
              '@view - Display: @display',
              array(
                '@view' => $view->human_name,
                '@display' => $display->display_title,
              )
            );
          }
          else {
            $options[$view_name . ':' . $display_id] = $view->human_name;
          }
        }
      }
    }
  }
  ksort($options);

  return $options;
}

/**
 * Build a filtered view with given filters.
 *
 * @param array $filters
 *   An array of containing information on how to build the view.
 *
 * @return SelectQuery
 *   The query that would be used to execute the view.
 */
function simplenews_filter_get_view_query(array $filters) {
  // Dissect view filter.
  $view_key = $filters['view_key'];
  $view_name_and_display = explode(":", $view_key);
  $view_name = $view_name_and_display[0];
  $view_display = $view_name_and_display[1];
  unset($filters['exposed']['submit']);

  // Prepare view.
  $view = views_get_view($view_name);
  $view->set_display($view_display);
  $view->set_exposed_input($filters['exposed']);
  $view->pre_execute();

  // Unset all fields as the ones required by the spool will be added later.
  foreach ($view->field as $field_name => $field) {
    unset($view->field[$field_name]);
  }
  foreach ($view->display_handler->handlers['field'] as $field_name => $field) {
    unset($view->display_handler->handlers['field'][$field_name]);
  }

  // Build view so that we can use and modify the generated SelectQuery.
  $view->build();
  $query = $view->build_info['query'];

  return $query;
}
