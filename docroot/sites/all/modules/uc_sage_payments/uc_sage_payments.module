<?php

/**
 * @file
 * Sage Payment Solutions Gateway for Ubercart.
 */

/**
 * Default gateway URL.
 */
define('UC_SAGE_PAYMENTS_GATEWAY', 'https://gateway.sagepayments.net/cgi-bin/eftBankcard.dll?transaction');

/**
 * Implements hook_uc_payment_gateway().
 */
function uc_sage_payments_uc_payment_gateway() {
  $gateways['sage_payments'] = array(
    'title' => t('Sage Payment Solutions (HTTPS POST)'),
    'description' => t('Process credit card payments using Sage Payment Solutions (HTTPS POST).'),
    'settings' => 'uc_sage_payments_settings_form',
    'credit' => 'uc_sage_payments_charge',
    'credit_txn_types' => array(UC_CREDIT_AUTH_CAPTURE),
  );

  return $gateways;
}

/**
 * Implements hook_uc_store_status().
 */
function uc_sage_payments_uc_store_status() {
  $merchant_id = variable_get('uc_sage_payments_merchant_id');
  $merchant_key = variable_get('uc_sage_payments_merchant_key');
  if ($merchant_id && $merchant_key) {
    $statuses[] = array(
      'status' => 'ok',
      'title' => t('Sage Payment Solutions'),
      'desc' => t('You have properly set a Merchant ID and a key.<br />Merchant ID: %id<br />Key: %key', array('%id' => $merchant_id, '%key' => $merchant_key)),
    );
  }
  else {
    $statuses[] = array(
      'status' => 'warning',
      'title' => t('Sage Payment Solutions'),
      'desc' => t('The Sage Payment Solutions (HTTPS POST) module has not been configured yet. Please configure its !settings and enter a Merchant ID and key.', array('!settings' => l(t('settings'), 'admin/store/settings/payment/edit/gateways'))),
    );
  }

  $card_owner = variable_get('uc_credit_owner_enabled', FALSE);
  if ($card_owner) {
    $statuses[] = array(
      'status' => 'ok',
      'title' => t('Sage Payment Solutions'),
      'desc' => t('Card owner text field is enabled on checkout form.'),
    );
  }
  else {
    $statuses[] = array(
      'status' => 'error',
      'title' => t('Sage Payment Solutions'),
      'desc' => t('<i>Enable card owner text field on checkout form</i> must be set in !settings.', array('!settings' => l(t('credit card field settings'), 'admin/store/settings/payment/method/credit'))),
    );
  }

  return $statuses;
}

/**
 * Callback for payment gateway settings.
 */
function uc_sage_payments_settings_form($form, &$form_state) {
  _uc_sage_payments_requirements();

  $form['uc_sage_payments_merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#default_value' => variable_get('uc_sage_payments_merchant_id'),
    '#description' => t(''),
    '#size' => 15,
    '#maxlength' => 15,
  );

  $form['uc_sage_payments_merchant_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant key'),
    '#default_value' => variable_get('uc_sage_payments_merchant_key'),
    '#description' => t(''),
    '#size' => 15,
    '#maxlength' => 15,
  );

  $form['uc_sage_payments_server'] = array(
    '#type' => 'textfield',
    '#title' => t('Sage Payment Solutions server'),
    '#default_value' => variable_get('uc_sage_payments_server', UC_SAGE_PAYMENTS_GATEWAY),
    '#description' => t(''),
  );

  return $form;
}

/**
 * Module and helper functions.
 */
function uc_sage_payments_charge($order_id, $amount, $data) {
  _uc_sage_payments_requirements();

  global $user;
  $order = uc_order_load($order_id);
  $result = array(
    'success' => FALSE,
    'comment' => '', // For uc_payment_receipts if success == TRUE.
    'message' => '', // For watchdog() if success == FALSE; sent to drupal_set_message() if not default payment gateway.
    'uid' => $user->uid,
  );

  // Set HTTPS URL.
  $url = variable_get('uc_sage_payments_server', UC_SAGE_PAYMENTS_GATEWAY);

  // Build the basic set of data for this transaction.
  if ($order->order_total > 0) {
    $delivery_country = uc_get_country_data(array('country_id' => $order->delivery_country));
    $billing_country = uc_get_country_data(array('country_id' => $order->billing_country));

    $transaction = array(
      'm_id' => variable_get('uc_sage_payments_merchant_id', ''),
      'm_key' => variable_get('uc_sage_payments_merchant_key', ''),
      'C_name' => $order->payment_details['cc_owner'],
      'C_address' => $order->billing_street1 .' '. $order->billing_street2,
      'C_city' => $order->billing_city,
      'C_state' => uc_get_zone_code($order->billing_zone),
      'C_zip' => $order->billing_postal_code,
      'C_country' => $billing_country[0]['country_iso_code_2'],
      'C_cardnumber' => $order->payment_details['cc_number'],
      'C_exp' => sprintf('%02d', $order->payment_details['cc_exp_month']) . substr($order->payment_details['cc_exp_year'], -2),
      'C_cvv' => $order->payment_details['cc_cvv'],
      'C_email' => $order->primary_email,
      'C_telephone' => $order->billing_phone,
      'T_amt' => round($amount, 2),
      'T_code' => '01',
    );

    // Store a comment with some useful data of the transaction being sent.
    $comment = t('Sending transaction. Transaction code: @VendorTxCode', array('@VendorTxCode' => $transaction['T_code']));
    uc_order_comment_save($order_id, $user->uid, $comment);

    // Put transaction data into an HTTPS POST request.
    $post = '';
    foreach ($transaction as $name => $value) {
      $post .= urlencode($name) .'='. urlencode($value) .'&';
    }
    $post = substr($post, 0, -1);

    // Execute transaction.
    list($raw_response, $http_response_code, $curl_error) = uc_sage_payments_curl($url, $post);

    if ($curl_error != '') {
      $result['message'] = t('Message from PHP cURL: @curlError', array('@curlError' => $curl_error));
      $result['success'] = FALSE;
      $comment = t('Payment failed: @curlError', array('@curlError' => $curl_error));
      uc_order_comment_save($order_id, $user->uid, $comment);

      return $result;
    }

    if ($http_response_code != 200) {
      $result['message'] = t('The request met with HTTP response code @code', array('@code' => $http_response_code));
      $result['success'] = FALSE;
      $comment = t('Payment failed, HTTP response code: @code', array('@code' => $http_response_code));
      uc_order_comment_save($order_id, $user->uid, $comment);

      return $result;
    }

    $result = uc_sage_payments_response($raw_response, $response);

    // Store an order comment with the results of the transaction.
    uc_order_comment_save($order_id, $user->uid, $result['comment']);
  }
  else {
    $result['message'] = t('Free order processed.');
    $result['success'] = TRUE;
  }

  return $result;
}

function uc_sage_payments_curl($url, $post) {
  $ch = curl_init($url);

  curl_setopt_array(
    $ch,
    array(
      CURLOPT_HEADER => FALSE,
      // If Sage Payments are sending a redirect this should really be handled manually.
      CURLOPT_FOLLOWLOCATION => FALSE,
      CURLOPT_FRESH_CONNECT => TRUE,
      CURLOPT_POST => TRUE,
      CURLOPT_RETURNTRANSFER => TRUE,
      CURLOPT_SSL_VERIFYPEER => TRUE,
      CURLOPT_SSL_VERIFYHOST => 2,
      CURLOPT_TRANSFERTEXT => TRUE,
      CURLOPT_VERBOSE => FALSE,
      CURLOPT_CONNECTTIMEOUT => 60,
      CURLOPT_POSTFIELDS => $post,
    )
  );

  // If set, use the CA cert stored locally for verification.
  if (variable_get('uc_sage_payments_ca_cert', FALSE)) {
    $filepath = variable_get('uc_credit_encryption_path', '') .'/'. variable_get('uc_sage_payments_ca_cert', '');
    curl_setopt($ch, CURLOPT_CAINFO, $filepath);
  }

  $raw_response = curl_exec($ch);
  $http_response_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $curl_error = curl_error($ch);

  curl_close($ch);

  return array($raw_response, $http_response_code, $curl_error);
}

function uc_sage_payments_response($raw_response, &$response) {
  $response = array(
    'approval_indicator' => $raw_response[1],
    'transaction_code' => substr($raw_response, 2, 6),
    'transaction_message' => substr($raw_response, 8, 32),
    'frontend_indicator' => substr($raw_response, 40, 2),
    'cvv_indicator' => $raw_response[42],
    'avs_indicator' => $raw_response[43],
    'risk_indicator' => substr($raw_response, 44, 2),
    'reference' => substr($raw_response, 46, 10),
    'order_number' => substr($raw_response, strpos($raw_response, chr(28)) + 1, strrpos($raw_response, chr(28) - 1)),
  );

  switch ($response['approval_indicator']) {

    case 'A':
      $result['message'] = '';
      $result['comment'] = t('<strong>Approved</strong><br />Transaction Code: @transaction_code<br />Transaction Message: @transaction_message<br />CVV Indicator: @cvv_indicator<br />AVS Indicator: @avs_indicator<br />Risk Indicator: @risk_indicator<br />Reference: @reference', array('@transaction_code' => $response['transaction_code'], '@transaction_message' => $response['transaction_message'], '@cvv_indicator' => $response['cvv_indicator'], '@avs_indicator' => $response['avs_indicator'], '@risk_indicator' => $response['risk_indicator'], '@reference' => $response['reference']));
      $result['success'] = TRUE;
      break;

    case 'E':
      $result['message'] = t('The transaction was not authorised by the acquiring bank.');
      $result['comment'] = t('<strong>Front-End Error / Non-Approved</strong><br />Transaction Code: @transaction_code<br />Transaction Message: @transaction_message<br />CVV Indicator: @cvv_indicator<br />AVS Indicator: @avs_indicator<br />Risk Indicator: @risk_indicator<br />Reference: @reference', array('@transaction_code' => $response['transaction_code'], '@transaction_message' => $response['transaction_message'], '@cvv_indicator' => $response['cvv_indicator'], '@avs_indicator' => $response['avs_indicator'], '@risk_indicator' => $response['risk_indicator'], '@reference' => $response['reference']));
      $result['success'] = FALSE;
      break;

    case 'X':
      $result['message'] = t('Sorry, we cannot process this transaction at this time. Please contact technical support.');
      $result['comment'] = t('<strong>Gateway Error / Non-Approved</strong><br />Transaction Code: @transaction_code<br />Transaction Message: @transaction_message<br />CVV Indicator: @cvv_indicator<br />AVS Indicator: @avs_indicator<br />Risk Indicator: @risk_indicator<br />Reference: @reference', array('@transaction_code' => $response['transaction_code'], '@transaction_message' => $response['transaction_message'], '@cvv_indicator' => $response['cvv_indicator'], '@avs_indicator' => $response['avs_indicator'], '@risk_indicator' => $response['risk_indicator'], '@reference' => $response['reference']));
      $result['success'] = FALSE;
      break;

    default:
      // This should never happen.
      $result['message'] = t('Sage Payment Solutions responded with an unknown status code: @code @StatusDetail', array('@code' => $response['Status'], '@StatusDetail' => $response['StatusDetail']));
      $result['comment'] = t('<strong>Unknown Error</strong><br />Transaction Code: @transaction_code<br />Transaction Message: @transaction_message<br />CVV Indicator: @cvv_indicator<br />AVS Indicator: @avs_indicator<br />Risk Indicator: @risk_indicator<br />Reference: @reference', array('@transaction_code' => $response['transaction_code'], '@transaction_message' => $response['transaction_message'], '@cvv_indicator' => $response['cvv_indicator'], '@avs_indicator' => $response['avs_indicator'], '@risk_indicator' => $response['risk_indicator'], '@reference' => $response['reference']));
      $result['success'] = FALSE;
      break;
  }

  return $result;
}


/**
 * Implements hook_recurring_info().
 */
function uc_sage_payments_recurring_info() {
  $items = array();
  $items['uc_sage_payments'] = array(
    'name' => t('Sage Payment Solutions'),
    'payment method' => 'credit',
    'module' => 'uc_recurring',
    'fee handler' => 'uc_sage_payments',
    'renew callback' => 'uc_sage_payments_renew',
    'process callback' => 'uc_sage_payments_process',
    'own handler' => FALSE,
    'saved profile' => FALSE,
    'menu' => array(
      'charge' => UC_RECURRING_MENU_DEFAULT,
      'edit'   => UC_RECURRING_MENU_DEFAULT,
      'cancel' => UC_RECURRING_MENU_DEFAULT,
    ), // Use the default user operation defined in uc_recurring.
  );

  return $items;
}

function uc_sage_payments_process($order, &$fee) {
  $data = array(
    'billing' => array(
      'first_name' => isset($order->billing_first_name) ? $order->billing_first_name : NULL,
      'last_name' => isset($order->billing_last_name) ? $order->billing_last_name : NULL,
      'phone' => isset($order->billing_phone) ? $order->billing_phone : NULL,
      'company' => isset($order->billing_company) ? $order->billing_company : NULL,
      'street1' => isset($order->billing_street1) ? $order->billing_street1 : NULL,
      'street2' => isset($order->billing_street2) ? $order->billing_street2 : NULL,
      'city' => isset($order->billing_city) ? $order->billing_city : NULL,
      'zone' => isset($order->billing_zone) ? $order->billing_zone : NULL,
      'postal_code' => isset($order->billing_postal_code) ? $order->billing_postal_code : NULL,
      'country' => isset($order->billing_country) ? $order->billing_country : NULL,
    ),
    'payment_details' => isset($order->payment_details) ? $order->payment_details : NULL,
  );

  if ($key = uc_credit_encryption_key()) {
    $crypt = new UbercartEncryption();
    $data['payment_details']['cc_number'] = $crypt->encrypt($key, $data['payment_details']['cc_number'], 32);
    if (isset($data['payment_details']['cc_cvv'])) {
      $data['payment_details']['cc_cvv'] = $crypt->encrypt($key, $data['payment_details']['cc_cvv'], 32);
    }
    if (isset($data['payment_details']['cc_exp_month'])) {
      $data['payment_details']['cc_exp_month'] = $crypt->encrypt($key, $data['payment_details']['cc_exp_month'], 32);
    }
    if (isset($data['payment_details']['cc_exp_year'])) {
      $data['payment_details']['cc_exp_year'] = $crypt->encrypt($key, $data['payment_details']['cc_exp_year'], 32);
    }
    uc_store_encryption_errors($crypt, 'uc_recurring');

    // Set gateway specific fee information for renewals.
    $fee = new stdClass();
    $fee->data['billing'] = $data['billing'];
    $fee->data['payment_details'] = $data['payment_details'];
  }

  return TRUE;
}

function uc_sage_payments_renew($order, &$fee) {
  if ($key = uc_credit_encryption_key()) {
    $crypt = new uc_encryption_class;
    $data['payment_details']['cc_number'] = $crypt->decrypt($key, $fee->data['payment_details']['cc_number']);
    $data['payment_details']['cc_cvv'] = $crypt->decrypt($key, $fee->data['payment_details']['cc_cvv']);
    $data['payment_details']['cc_exp_month'] = $crypt->decrypt($key, $fee->data['payment_details']['cc_exp_month']);
    $data['payment_details']['cc_exp_year'] = $crypt->decrypt($key, $fee->data['payment_details']['cc_exp_year']);
    uc_store_encryption_errors($crypt, 'uc_recurring');
  }

  // Cache the CC details stored by the handler.
  uc_credit_cache('save', $data['payment_details'], FALSE);

  // Run the charge.
  $result = uc_sage_payments_charge($order->order_id, $fee->fee_amount, NULL);
  watchdog('sage_payments', 'Charge attempt: @details', array('@details' => print_r($result, 1)));

  // Handle the result.
  if ($result['success'] === TRUE) {
    uc_payment_enter($order->order_id, 'credit', $fee->fee_amount, 0, $result['data'], t('Recurring fee payment.') .'<br />'. $result['comment']);
  }

  return $result['success'];
}

/**
 * Implementation of hook_init()
 *
 * Just a placeholder for debugging purposes for now.
 */
function uc_sage_payments_init() {
}

/**
 * Since hook_requirements doesn't seems to be working on enabling/disabling module stage,
 * perform check of requirements manually.
 *
 * @return boolean
 */
function _uc_sage_payments_requirements() {
  // At least cURL and OpenSSL must be enabled to make queries and get responses.
  if (!extension_loaded('curl') or !extension_loaded('openSSL')) {
    drupal_set_message(t('You need the `cURL` PHP extension and OpenSSL library installed to interact with Sage Payment Solutions payment gateway.'), 'error');
    return FALSE;
  }

  return TRUE;
}
