<?php

/**
 * @file
 * Installation and uninstallation functions.
 */

/**
 * Implements hook_schema().
 */
function dvg_appointments_schema() {
  $schema = array();

  $schema['dvg_appointments_appointments'] = array(
    'description' => 'Long description',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'size' => 'normal',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique dvg_appointments_appointments ID. Local appointment identifier.',
      ),
      'nid' => array(
        'description' => 'Webform node id',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'sid' => array(
        'description' => 'Webform submission id',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'appointment_start' => array(
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'pgsql_type' => 'timestamp without time zone',
        'sqlite_type' => 'VARCHAR',
        'sqlsrv_type' => 'smalldatetime',
        'description' => 'Appointment start',
        'not null' => TRUE,
        'sortable' => TRUE,
        'views' => TRUE,
      ),
      'appointment_end' => array(
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'pgsql_type' => 'timestamp without time zone',
        'sqlite_type' => 'VARCHAR',
        'sqlsrv_type' => 'smalldatetime',
        'description' => 'Appointment end',
        'not null' => TRUE,
        'sortable' => TRUE,
        'views' => TRUE,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'submission_idx' => array('nid', 'sid'),
    ),
  );

  $schema['dvg_appointments_remote_ids'] = array(
    'description' => 'Long description',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'size' => 'normal',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique dvg_appointments_remote_ids ID.',
      ),
      'local_id' => array(
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Local appointment the remote(s) belong to. Source {dvg_appointments_appointments}.id',
      ),
      'remote_id' => array(
        'type' => 'varchar',
        'size' => 'normal',
        'length' => 32,
        'default' => '',
        'description' => 'Remote appointment id',
      ),
    ),
    'primary key' => array('id'),
    'foreign keys' => array(
      'local_appointment' => array(
        'table' => 'dvg_appointments_appointments',
        'columns' => array('local_id' => 'id'),
      ),
    ),
    'indexes' => array(
      'local_id_idx' => array('local_id'),
    ),
  );

  $schema['dvg_appointments_products'] = array(
    'description' => 'Products belonging to an appointment',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'size' => 'normal',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique dvg_appointments_products ID.',
      ),
      'local_id' => array(
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Local appointment the remote(s) belong to. Source {dvg_appointments_appointments}.id',
      ),
      'product' => array(
        'type' => 'varchar',
        'size' => 'normal',
        'length' => 32,
        'default' => '',
        'description' => 'Product code',
      ),
      'count' => array(
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Number of products',
      ),
      'duration' => array(
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Appointment duration for 1 item of this product in seconds',
      ),
    ),
    'primary key' => array('id'),
    'foreign keys' => array(
      'local_appointment' => array(
        'table' => 'dvg_appointments_appointments',
        'columns' => array('local_id' => 'id'),
      ),
    ),
    'indexes' => array(
      'local_idx' => array('local_id'),
    ),
  );


  return $schema;
}

/**
 * Implements hook_schema_alter().
 */
function dvg_appointments_schema_alter(&$schema) {
  $schema['webform']['fields'] += _dvg_appointments_schema_fields();
}

/**
 * Implements hook_install().
 */
function dvg_appointments_install() {
  $schema = drupal_get_schema('webform');
  $fields = _dvg_appointments_schema_fields();
  foreach ($fields as $field_name => $field) {
    db_add_field('webform', $field_name, $schema['fields'][$field_name]);
  }

  if (variable_get('dvg_demo_content', FALSE) && module_exists('node_export')) {
    module_load_include('inc', 'node_export', 'formats/drupal');
    $nodes = node_export_drupal_import(file_get_contents(__DIR__ . '/demo-content/nodes.txt'));
    _dvg_import_nodes($nodes);
  }
}

/**
 * Implements hook_uninstall().
 */
function dvg_appointments_uninstall() {
  $fields = _dvg_appointments_schema_fields();
  foreach ($fields as $field_name => $field) {
    db_drop_field('webform', $field_name);
  }
}

/**
 * Helper function that returns the new fields.
 */
function _dvg_appointments_schema_fields() {
  return array(
    'appointment_enabled' => array(
      'type' => 'int',
      'size' => 'tiny',
      'not null' => TRUE,
      'default' => 0,
    ),
    'appointment_mapping' => array(
      'type' => 'text',
      'size' => 'medium',
    ),
  );
}
