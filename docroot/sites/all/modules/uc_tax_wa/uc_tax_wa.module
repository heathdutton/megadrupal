<?php

/**
 * @file
 * Washington state sales taxes for Ubercart.
 *
 * Copyright (C) 2008 by Jennifer Hodgdon, Poplar ProductivityWare LLC
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 */

/**
 * Implements hook_menu().
 */
function uc_tax_wa_menu() {
  $items = array();

  $items['admin/store/settings/uc_tax_wa'] = array(
    'access arguments' => array('configure taxes'),
    'title' => 'Washington state sales tax settings',
    'description' => 'Settings for Washington state sales tax',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_tax_wa_admin_settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uc_tax_wa.admin.inc',
  );

  return $items;
}

/**
 * Implements Ubercart hook hook_uc_calculate_tax().
 *
 * Decides if the shipping address is in WA. If so, queries WA
 * Dept of Revenue site for the proper tax rate, calculates tax
 * for each Product in the order, and returns the total tax amount.
 */
function uc_tax_wa_uc_calculate_tax($order) {
  global $user;

  $ret = array();

  if (is_numeric($order)) {
    $order = uc_order_load($order);
  }
  if (!is_object($order)) {
    return $ret;
  }

  // Check to see if this is a wholesale order, in which case, no tax.
  $my_user = $order->uid ? user_load($order->uid) : $user;
  $wholesale_roles = variable_get('uc_tax_wa_wholesale_roles', array());
  // This variable comes from a checkbox array form element. So it
  // gives us an array like '3' => '3', '4' => 0, meaning role ID 3 is a
  // wholesale role.
  foreach ($wholesale_roles as $rid => $value) {
    if ($value && !empty($my_user->roles[$rid])) {
      return $ret;
    }
  }

  // Get delivery info out, or billing if delivery is blank.
  $state = $order->delivery_zone;
  $country = $order->delivery_country;
  $street1 = $order->delivery_street1;
  $street2 = $order->delivery_street2;
  $city = $order->delivery_city;
  $zip = $order->delivery_postal_code;
  if (!$state && !$country && !$street1 && !$city && !$zip) {
    $state = $order->billing_zone;
    $country = $order->billing_country;
    $street1 = $order->billing_street1;
    $street2 = $order->billing_street2;
    $city = $order->billing_city;
    $zip = $order->billing_postal_code;
  }

  // verify we are in WA, US

  $state = uc_get_zone_code($state);
  if ($state != 'WA') {
    return $ret;
  }

  $country = uc_get_country_data(array('country_id' => $country));
  if (empty($country)  ||
      !count($country) ||
      $country[0]['country_iso_code_2'] != 'US') {
    return $ret;
  }

  // OK, we are in WA
  // set the default rate now, in case something below fails

  $def_rate = floatval(variable_get('uc_tax_wa_default_rate', '0')) / 100;
  $def_loc = intval(variable_get('uc_tax_wa_default_loc', '0'));
  $rate = 0;
  $loccode = 0;
  $locname = "Washington";

  // Query web service to get tax rate

  $url = 'http://dor.wa.gov/AddressRates.aspx?output=xml&addr=' .
    urlencode(trim($street1 . ' ' . $street2)) .
    '&city=' . urlencode(trim($city)) .
    '&zip=' . urlencode(trim($zip));

  $res = drupal_http_request($url);
  // print_r($res);

  // parse the result to find the tax rate

  $matches = array();
  if ($res->code == 200 &&
      preg_match('|<response[^>]* rate="([0-9\.]+)"|',
                 $res->data, $matches)) {
    $rate = floatval($matches[1]);
  }
  if ($res->code == 200 &&
      preg_match('|<response[^>]* loccode="([0-9]+)"|',
                 $res->data, $matches)) {
    $loccode = intval($matches[1]);
  }
  if ($res->code == 200 &&
      preg_match('|<rate[^>]* name="([^"]+)"|',
                 $res->data, $matches)) {
    $locname = $matches[1];
  }

  if (!$rate) {
    $rate = $def_rate;
  }
  if (!$loccode) {
    $loccode = $def_loc;
    $locname = 'Washington';
  }

  if (!$rate) {
    // no tax
    return $ret;
  }

  $amt = 0;

  // calculate the taxable amount for products

  $prod_tax = variable_get('uc_tax_wa_product_types', array());

  foreach ($order->products as $prod) {
    $node = node_load($prod->nid);
    if ($prod_tax[$node->type]) {
      $amt += $prod->qty * $prod->price;
    }
  }

  // calculate the taxable amount for line items

  $item_tax = variable_get('uc_tax_wa_line_items', array());

  if (is_array($order->line_items)) {
    foreach ($order->line_items as $key => $item) {
      if (isset($item_tax[$item['type']]) && $item_tax[$item['type']]) {
        $amt += $item['amount'];
      }
    }
  }

  // see if we have anything to tax

  if (!$amt) {
    return $ret;
  }

  // return the tax info

  $namesuf = '';
  if ($loccode && variable_get('uc_tax_wa_show_loc', '0')) {
    $namesuf = ' (' . $loccode . ')';
  }

  $ret = (object) array(
    'id' => uc_tax_wa_get_safe_id(),
    'name' => t('Washington Sales Tax') . $namesuf,
    'amount' => $amt * $rate,
    'weight' => 0,
    'summed' => 1,
  );
  $ret->data = array(
    'tax_id' => $ret->id,
    'tax_rate' => $rate,
    'taxable_amount' => $amt,
    'tax_jurisdiction' => $locname . ' (' . $loccode . ')',
  );

  $stuff = array();
  $stuff[$ret->id] = $ret;
  return $stuff;
}

/**
 * Returns a safe ID number to use for tax (larger than any in the tax module).
 *
 * Have to have a numeric ID for some of the preview stuff to work. Trust me.
 * Comes from some stuff in uc_taxes.js, interacting with some stuff in
 * uc_payment.js. Specifically, set_line_item() takes a key, which the tax
 * module sets to "tax_" . id value. Then the serializeOrder function sets the
 * line item type to be the part of key up to the _, but only if the part after
 * the _ is numeric. And the line item type does need to be set to 'tax' for
 * the preview part to work, because that's how the line item code knows it
 * is a tax. Sigh.
 */
function uc_tax_wa_get_safe_id() {
  $maxid = 1;
  $rates = uc_taxes_rate_load();
  foreach ($rates as $id => $info) {
    if ($id >= $maxid) {
      $maxid = $id;
    }
  }

  return $maxid + 99;
}
