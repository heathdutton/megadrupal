<?php

/**
 * @file
 * Module for for base Commerce Saferpay module.
 */

/**
 * Common settings form elements.
 *
 * @param $settings
 *   An array of the current settings.
 * @return
 *   A form snippet.
 *
 * @see CALLBACK_commerce_payment_method_settings_form()
 */
function commerce_saferpay_settings_form($settings = NULL) {

  $settings += commerce_saferpay_default_settings();

  $form['account_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Account ID'),
    '#default_value' => $settings['account_id'],
  );

  $form['password'] = array(
    '#type' => 'textfield',
    '#title' => t('spPassword'),
    '#description' => t('Only required for the test account.'),
    '#default_value' => $settings['password'],
  );
  $form['order_identifier'] = array(
    '#type' => 'textfield',
    '#title' => t('Order identifier'),
    '#description' => t('The order identifier sent to Saferpay Gateway - check Replacement patterns'),
    '#default_value' => $settings['order_identifier'],
  );
  $form['order_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Order description'),
    '#description' => t('The order description displayed on the payment page -  check Replacement patterns'),
    '#default_value' => $settings['order_description'],
  );
  $form['view']['token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['view']['token_help']['help'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('commerce-order'),
  );
  $form['autocomplete'] = array(
    '#type' => 'checkbox',
    '#title' => t('Auto Finalize payment by capture of transaction.'),
    '#default_value' => $settings['autocomplete'],
  );

  return $form;
}

/**
 * Returns the default settings for both payment methods.
 *
 * Defaults to the test account id and password.
 */
function commerce_saferpay_default_settings() {
  return array(
    'account_id' => '99867-94913159',
    'password' => 'XAjc3Kna',
    'order_identifier' => '[commerce-order:order-id]-[commerce-order:created]',
    'autocomplete' => TRUE,
    'order_description' => 'Order [commerce-order:order-id] at [site:name]',
  );
}

/**
 * Returns the initial payment transaction URL to redirect or post to.
 *
 * Deals with the arguments common to both payment methods.
 *
 * @param $order
 *   The order object.
 * @param $settings
 *   Array of payment method settings.
 * @param $data
 *   Array of additional arguments.
 *
 * @return
 *   URL to redirect the user to make payment.
 */
function commerce_saferpay_initpay($order, $settings, array $data = array()) {
  global $language;

  // Apply default settings.
  $settings += commerce_saferpay_default_settings();

  $data['ACCOUNTID'] = $settings['account_id'];

  if (!empty($settings['password'])) {
    $data['spPassword'] = $settings['password'];
  }

  // Saferpay only supports en, de, it and fr. For everything else, fall back to
  // en.
  $data['LANGID'] = in_array($language->language, array('en', 'de', 'fr', 'it')) ? $language->language : 'EN';

  $url = url('https://www.saferpay.com/hosting/CreatePayInit.asp', array('external' => TRUE, 'query' => $data));
  $return = commerce_saferpay_process_url($url);
  if (strpos($return, 'ERROR') !== FALSE) {
    drupal_set_message(t('An error occurred during payment: @error.', array('@error' => $return)), 'error');
    return FALSE;
  }
  return $return;
}

/**
 * Proxy for saferpay's requests.
 *
 * @param $url
 *   The webservice prepared url, i.e. initpay, verifypayconfirm, paycomplete
 *
 * @return
 *   Webservice response.
 */
function commerce_saferpay_process_url($sUrl) {
  $ch = curl_init($sUrl);
  curl_setopt($ch, CURLOPT_PORT, 443);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($ch, CURLOPT_HEADER, 0);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  $sReturn = curl_exec($ch);
  curl_close($ch);
  return $sReturn;
}

/**
 * Confirms a response from Saferpay consisting of data and the signature.
 *
 * @param $data
 *   Data string to be verified.
 *
 * @param $signature
 *   The signature given by Saferpay for the data.
 *
 * @return
 *   TRUE if the data is valid, FALSE otherwise. The actual response in case of
 *   valid data can be received through commerce_saferpay_confirm_result().
 */
function commerce_saferpay_confirm_validate($data, $signature) {
  $verify = array(
    'DATA' => $data,
    'SIGNATURE' => $signature,
  );
  $url = url('https://www.saferpay.com/hosting/VerifyPayConfirm.asp', array('external' => TRUE, 'query' => $verify));
  $result = commerce_saferpay_process_url($url);

  if (drupal_substr($result, 0, 3) != 'OK:') {
    return FALSE;
  }
  commerce_saferpay_confirm_result($result);
  return TRUE;
}

/**
 * Returns or sets the confirm response returned by Saferpay.
 *
 * @param $result
 *   Overrides the currently stored result if given.
 */
function commerce_saferpay_confirm_result($result = NULL) {
  $static = &drupal_static(__FUNCTION__);
  if ($result) {
    $static = $result;
  }
  return $static;
}

/**
 * Returns a payment transaction object for a given external payment id or creates a new one.
 *
 * @param $order
 *   The order object.
 * @param $id
 *   The external id of the payment gateway.
 * @param $method_id
 *   The method id of the payment method.
 *
 * @return
 *   A commerce_payment_transaction object.
 *
 */
function commerce_saferpay_get_transaction($order, $id, $method_id)  {
  // Look for an existing transaction.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'commerce_payment_transaction')
    ->propertyCondition('remote_id', $id)
    ->execute();

  if (!empty($result['commerce_payment_transaction'])) {
    $transaction = commerce_payment_transaction_load(key($result['commerce_payment_transaction']));
  }
  else {
    // Create a new payment transaction for the order.
    $transaction = commerce_payment_transaction_new($method_id, $order->order_id);
  }
  return $transaction;
}
