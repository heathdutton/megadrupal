<?php

/**
 * @file
 * All the main code for the Pingdom RUM module
 */

/**
 * Hook_page_build implementation.
 *
 * Adds Pingdom's JS code to HEAD section.
 * The account ID is embedded in this code, rather than being passed to the
 * page using settings, because Pingdom specify that all code must be inline.
 */
function pingdom_rum_page_build() {
  global $user;
  if (variable_get('pingdom_rum_project_id', '') != ''
    && _pingdom_rum_visibility_pages()
    && _pingdom_rum_visibility_roles($user)
  ) {
    $js = "var _prum=[['id', '" .
      variable_get('pingdom_rum_project_id', '') .
      "'], ['mark', 'firstbyte',
      (new Date()).getTime()]]; (function() {
      var s=document.getElementsByTagName('script')[0],
      p=document.createElement('script');
      p.async='async'; p.src='//rum-static.pingdom.net/prum.min.js';" .
      "s.parentNode.insertBefore(p,s);})();";
    drupal_add_js($js, array(
      'type' => 'inline',
      'scope' => 'header',
      'group' => JS_LIBRARY,
      'weight' => -100,
    ));
  }
}

/**
 * Hook_menu implementation.
 *
 * Adds a menu callback for module settings page.
 */
function pingdom_rum_menu() {
  $items['admin/config/services/pingdom'] = array(
    'title' => 'Pingdom RUM Settings',
    'description' => 'Customise your Pingdom RUM account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pingdom_rum_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'pingdom_rum.admin.inc',
  );
  return $items;
}

/**
 * Function to determine whether to include RUM code, based on user role.
 *
 * Based on visibility setting this function returns TRUE if Pingdom RUM code
 * should be added for the current role and otherwise FALSE.
 */
function _pingdom_rum_visibility_roles($account) {

  $visibility = variable_get('pingdom_rum_roles_type', 0);
  $enabled = $visibility;
  $roles = variable_get('pingdom_rum_roles', array());

  if (array_sum($roles) > 0) {
    // One or more roles are selected.
    foreach (array_keys($account->roles) as $rid) {
      // Is the current user a member of one of these roles?
      if (isset($roles[$rid]) && $rid == $roles[$rid]) {
        // Current user is a member of a role that should be excluded.
        $enabled = !$visibility;
        break;
      }
    }
  }
  else {
    // No role is selected for tracking, therefore all roles should be tracked.
    $enabled = TRUE;
  }
  return $enabled;
}

/**
 * Function to determine whether to include RUM code, based on path of page.
 *
 * Based on visibility setting this function returns TRUE if Pingdom RUM code
 * should be added to the current page and otherwise FALSE.
 */
function _pingdom_rum_visibility_pages() {
  $page_match = TRUE;
  $visibility = variable_get('pingdom_rum_visibility_pages', 0);
  $setting_pages = variable_get('pingdom_rum_pages', '');

  // Match path if necessary.
  if (!empty($setting_pages)) {
    // Convert path to lowercase. This allows comparison of the same path.
    // with different case. Ex: /Page, /page, /PAGE.
    $pages = drupal_strtolower($setting_pages);
    if ($visibility < 2) {
      // Convert the Drupal path to lowercase.
      $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
      // Compare the lowercase internal and lowercase path alias (if any).
      $page_match = drupal_match_path($path, $pages);
      if ($path != $_GET['q']) {
        // Compare the Drupal path without any alias to the list of paths.
        $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
      }
      // When $visibility has a value of 0, the RUM code is displayed on
      // all pages except those listed in $pages. When set to 1, it
      // is displayed only on those pages listed in $pages.
      $page_match = !($visibility xor $page_match);
    }
    else {
      $page_match = FALSE;
    }
  }
  return $page_match;
}
