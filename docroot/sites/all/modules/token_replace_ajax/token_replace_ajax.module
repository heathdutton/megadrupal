<?php

/**
 * @file
 * Core functions for Token replace AJAX.
 */

/**
 * Include additional files.
 */
$dirname  = dirname(__FILE__) . '/includes';
$includes = file_scan_directory($dirname, '/.inc$/');
foreach (module_list() as $module) {
  $file = "{$dirname}/{$module}.inc";
  if (isset($includes[$file])) {
    require_once $file;
  }
}

/**
 * Implements hook_menu().
 */
function token_replace_ajax_menu() {
  $items['token_replace/ajax/%'] = array(
    'page callback'    => 'token_replace_ajax_callback',
    'page arguments'   => array(2),
    'access callback'  => 'token_replace_ajax_access_callback',
    'access arguments' => array(2),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function token_replace_ajax_permission() {
  return array(
    'access token_replace_ajax callback' => array(
      'title' => t('Access Token replace AJAX callback'),
    ),
  );
}

/**
 * Implements hook_custom_theme().
 */
function token_replace_ajax_custom_theme() {
  // Ensure that if this is a valid POST request that we use the same theme
  // used by the referring form.
  if (isset($_POST['form_build_id'])) {
    $form_state    = form_state_defaults();
    $form_build_id = $_POST['form_build_id'];
    $form          = form_get_cache($form_build_id, $form_state);
    if (!is_null($form)) {
      global $base_path;

      $path = preg_replace('/' . str_replace('/', '\/', $base_path) . '/', '', $form['#action'], 1);
      if (path_is_admin($path)) {
        return variable_get('admin_theme');
      }
    }
  }

  return FALSE;
}

/**
 * Implements hook_module_implements_alter().
 *
 * @param $implementations
 * @param $hook
 */
function token_replace_ajax_module_implements_alter(&$implementations, $hook) {
  if ('form_alter' == $hook) {
    $implementation = $implementations['token_replace_ajax'];
    unset($implementations['token_replace_ajax']);
    $implementations['token_replace_ajax'] = $implementation;
  }
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 */
function token_replace_ajax_form_alter(&$form, &$form_state) {
  if (isset($form['token_replace_ajax']['#value']) && $form['token_replace_ajax']['#value']) {
    $form_state['cache'] = TRUE;
  }
}

/**
 * Access callback for Token replace AJAX.
 *
 * @param string $token
 *
 * @return bool
 */
function token_replace_ajax_access_callback($token = '') {
  // Ensure that we get the token if it is provided.
  // @TODO - Determine why this is needed, as it should always be provided, but
  // it appears that isn't if it is a POST request.
  if (empty($token) && arg(2) != '') {
    $token = arg(2);
  }

  // Return FALSE if no token is provided.
  if (empty($token)) {
    return FALSE;
  }

  // Check if user has permission.
  if (user_access('access token_replace_ajax callback')) {
    return TRUE;
  }

  // Check if an access key has been provided and it matches the required key
  // for the requested token.
  elseif (isset($_GET['key']) && $_GET['key'] == token_replace_ajax_access_key($token)) {
    return TRUE;
  }

  // Check if this is a POST callback from a valid Drupal form.
  elseif (isset($_POST['form_build_id'])) {
    $form_state    = form_state_defaults();
    $form_build_id = $_POST['form_build_id'];
    $form          = form_get_cache($form_build_id, $form_state);
    if (!is_null($form) && isset($form['token_replace_ajax']['#value'])) {
      return $form['token_replace_ajax']['#value'] == TRUE;
    }
  }

  return FALSE;
}

/**
 * Menu callback for Token replace AJAX.
 *
 * @param string $token
 *
 * @throws Exception
 */
function token_replace_ajax_callback($token = '') {
  $data = array();

  // Get Entity for token context from supplied arguments.
  if (isset($_REQUEST['entity_type']) && isset($_REQUEST['entity_id'])) {
    $entity_type = $_REQUEST['entity_type'];
    $entities    = entity_load($entity_type, array($_REQUEST['entity_id']));
    $entity      = reset($entities);
  }

  // Get Entity for token context from posted form.
  elseif (isset($_POST['form_build_id'])) {
    list($form, $form_state, , ,) = ajax_get_form();
    $form_state['triggering_element'] = array();
    $form_state['programmed']         = TRUE;
    drupal_process_form($form['#form_id'], $form, $form_state);

    // Determine what entity we need for the supplied token (if any).
    $entity_types      = entity_get_info();
    $token_info        = token_scan($token);
    $token_type        = key($token_info);
    $token_entity_type = NULL;
    foreach ($entity_types as $entity_info_type => $entity_info) {
      if (isset($entity_info['token type']) && $entity_info['token type'] == $token_type) {
        $token_entity_type = $entity_info_type;
        break;
      }
    }

    // If form has an entity type and it either matches our token entity type or
    // we don't have a token entity type.
    if (isset($form['#entity_type']) && (!isset($token_entity_type) || $token_entity_type == $form['#entity_type'])) {
      $entity_type = $form['#entity_type'];
      $entity      = (object) array_merge((array) $form["#entity"], isset($form_state['values']) ? $form_state['values'] : array());
    }

    // Else, if we do have a token entity type but the form doesn't have an
    // entity type.
    elseif (isset($token_entity_type) && isset($entity_info)) {
      $result = module_invoke($entity_info['module'], 'token_replace_ajax_form_entity', $token_entity_type, $form, $form_state);
      if ($result) {
        $entity_type = $token_entity_type;
        $entity      = $result;
      }
    }

    if (isset($entity_type) && isset($entity)) {
      $entity_info = $entity_types[$entity_type];

      // Add a dummy entity ID.
      $entity->{$entity_info['entity keys']['id']} = 'token_replace_ajax';

      field_attach_prepare_view($entity_type, array($entity->{$entity_info['entity keys']['id']} => $entity), 'full');
    }
  }

  if (isset($entity_type) && isset($entity)) {
    $data[$entity_type] = $entity;
  }

  $value = token_replace($token, $data);
  drupal_alter('token_replace_ajax_response', $value, $token, $data);
  print json_encode(array(
    'token'    => $token,
    'value'    => $value,
    'messages' => array(
      'data' => drupal_get_messages(NULL, FALSE),
      'html' => theme('status_messages'),
    ),
  ));
  drupal_exit();
}

/**
 * Implements hook_field_display_alter().
 *
 * @param $display
 * @param $context
 *
 * @throws EntityMalformedException
 */
function token_replace_ajax_field_display_alter(&$display, $context) {
  list($id, ,) = entity_extract_ids($context['entity_type'], $context['entity']);

  // If this is a dummy entity provided by Token replace AJAX, ensure no hidden
  // fields.
  if ($id == 'token_replace_ajax' && $display['type'] == 'hidden') {
    $field_type      = field_info_field_types($context['field']['type']);
    $display['type'] = $field_type['default_formatter'];
  }
}

/**
 * Generates a key to protect Token replacement AJAX callbacks.
 *
 * @param $token
 *
 * @return string
 */
function token_replace_ajax_access_key($token) {
  return substr(drupal_hmac_base64($token, drupal_get_private_key() . drupal_get_hash_salt()), 0, 8);
}
