<?php

/**
 * @file
 * Tests for the Token replace AJAX module.
 */

/**
 * Class TokenReplaceAJAXTestCase
 */
class TokenReplaceAJAXTestCase extends DrupalWebTestCase {
  var $auth_user = NULL;
  var $content_user = NULL;
  var $content_type = NULL;

  /**
   * Setup a Drupal site for Token replace AJAX tests.
   */
  function setUp() {
    // Setup required modules.
    parent::setUp(array('token_replace_ajax_test'));

    // Create a content type.
    $content_type       = $this->drupalCreateContentType();
    $this->content_type = $content_type->name;

    // Create authenticated users.
    $this->auth_user = $this->drupalCreateUser(array(
      'access token_replace_ajax callback',
      "create {$this->content_type} content",
    ));

    $this->content_user = $this->drupalCreateUser(array(
      "create {$this->content_type} content",
    ));
  }
}

/**
 * Class TokenReplaceAJAXBasicTestCase
 */
class TokenReplaceAJAXBasicTestCase extends TokenReplaceAJAXTestCase {
  /**
   * @inheritdoc
   */
  public static function getInfo() {
    return array(
      'name'        => 'General functionality',
      'description' => 'Tests general Token replace AJAX functionality.',
      'group'       => 'Token replace AJAX',
    );
  }

  /**
   * Test basic anonymous usage.
   */
  function testAnon() {
    // Ensure an unauthenticated anonymous user can't access Token replace AJAX.
    $this->drupalGet('token_replace/ajax/[site:name]');
    $this->assertText('Access denied', t('Anonymous user can not access Token replace AJAX.'));

    // Modify $databases to include the potentially missing prefix to workaround
    // issue with drupal_get_hash_salt().
    global $databases;
    $databases_original = $databases;
    if (!isset($databases['default']['default']['prefix'])) {
      $databases['default']['default']['prefix']['default'] = $this->databasePrefix;
    }

    // Generate authentication key.
    $auth_key = token_replace_ajax_access_key('[site:name]');

    // Reset $databases back to original state.
    $databases = $databases_original;

    // Ensure that authenticated anonymous user can access Token replace AJAX.
    $query = array('key' => $auth_key);
    $json  = $this->drupalGetAJAX('token_replace/ajax/[site:name]', array('query' => $query));
    $this->assertNoText('Access denied', t('Anonymous user can access Token replace AJAX with authorisation key.'));

    // Ensure that the response from '[site:name]' contained the correctly
    // replaced token value.
    $this->assertEqual($json['value'], variable_get('site_name', 'Drupal'), t('The response contained a correctly replaced token value.'));
  }

  /**
   * Test authenticated usage.
   */
  function testAuth() {
    // Login as authenticated user.
    $this->drupalLogin($this->auth_user);

    // Ensure that the response from '[site:name]' contained the correctly
    // replaced token value.
    $json = $this->drupalGetAJAX('token_replace/ajax/[site:name]');
    $this->assertEqual($json['value'], variable_get('site_name', 'Drupal'), t('The response contained a correctly replaced token value.'));

    // Create a node.
    $node = $this->drupalCreateNode(array('type' => $this->content_type));

    // Ensure that the response from '[node:title]' contained the correctly
    // replaced token value.
    $query = array('entity_type' => 'node', 'entity_id' => $node->nid);
    $json  = $this->drupalGetAJAX('token_replace/ajax/[node:title]', array('query' => $query));
    $this->assertEqual($json['value'], $node->title, t('The response contained a correctly replaced token value.'));
  }

  /**
   * Test form post usage.
   */
  function testFormPost() {
    // Login as content user.
    $this->drupalLogin($this->content_user);

    // Post an unauthorized AJAX request from a node form.
    $query = array('token_replace_ajax_test' => FALSE);
    $this->drupalGet("node/add/{$this->content_type}", array('query' => $query));
    $edit = array('title' => $this->randomName());
    $json = $this->drupalPostAJAX(NULL, $edit, array(), 'token_replace/ajax/[node:title]', array(), array(), NULL, array());
    $this->assertTrue(is_null($json), t('User can not access Token replace AJAX via unauthorized form post.'));

    // Post an authorized AJAX request from a node form.
    $query = array('token_replace_ajax_test' => TRUE);
    $this->drupalGet("node/add/{$this->content_type}", array('query' => $query));
    $json = $this->drupalPostAJAX(NULL, $edit, array(), 'token_replace/ajax/[node:title]', array(), array(), NULL, array());

    // Ensure that the response from '[node:title]' contained the correctly
    // replaced token value.
    $this->assertEqual($json['value'], $edit['title'], t('The response contained a correctly replaced token value.'));
  }
}
