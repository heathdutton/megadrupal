<?php
/**
 * @file 
 * Enables the option in Rules to send message to Nodejs channel. 
 */


/**
 * Implementation of Hook menu
 */ 
function nodejs_rules_chatterbox_menu() {
  $items	=	array();
  $items['admin/config/nodejs/rules'] = array(
    'title' => t('Rules Nodejs Chatterbox Integration'),
	'description' => t('Integration of Rules with Nodejs Chatter Box.'),
	'page callback' => 'system_admin_menu_block_page',
	'access arguments' => array('access administration pages'),
	'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/nodejs/rules/test'] = array(
  	'title' => t('Test Nodejs Status'),
	'description' => t('Test Nodejs Channel'),
	'page callback' => 'drupal_get_form',
	'page arguments' => array('nodejs_rules_chatterbox_test_form'),
	'access arguments' => array('administer site configuration'),
	'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/nodejs/rules/channels'] = array(
  	'title' => t('Nodejs Notification Channel Blocks'),
	'description' => t('View and update notification channel blocks'),
	'page callback' => 'nodejs_rules_chatterbox_channels',
	'access arguments' => array('administer site configuration'),
	'type' => MENU_NORMAL_ITEM,
	'file' => 'nodejs_rules_chatterbox.admin.inc',
    'file path' => drupal_get_path('module', 'nodejs_rules_chatterbox'),
  );
  $items['admin/config/nodejs/rules/channels/list'] = array(
  	'title' => t('Nodejs Notification Channel Blocks'),
	'description' => t('View and update notification channel blocks'),
	'page callback' => 'nodejs_rules_chatterbox_channels',
	'access arguments' => array('administer site configuration'),
	'type' => MENU_DEFAULT_LOCAL_TASK,
	'file' => 'nodejs_rules_chatterbox.admin.inc',
    'file path' => drupal_get_path('module', 'nodejs_rules_chatterbox'),
  );
  $items['admin/config/nodejs/rules/channels/add'] = array(
  	'title' => t('Create Notification Channel Block'),
	'description' => t('Create nee notification channel block'),
	'page callback' => 'drupal_get_form',
	'page arguments' => array('nodejs_rules_chatterbox_channels_form'),
	'access arguments' => array('administer site configuration'),
	'type' => MENU_LOCAL_ACTION,
	'file' => 'nodejs_rules_chatterbox.admin.inc',
    'file path' => drupal_get_path('module', 'nodejs_rules_chatterbox'),
  );
  $items['admin/config/nodejs/rules/channels/%/flush'] = array(
  	'title' => t('Flush Messages'),
	'page callback' => 'drupal_get_form',
	'page arguments' => array('nodejs_rules_chatterbox_channel_flush',5),
	'access arguments' => array('administer site configuration'),
	'file' => 'nodejs_rules_chatterbox.admin.inc',
    'file path' => drupal_get_path('module', 'nodejs_rules_chatterbox'),
	'type' => MENU_CALLBACK,
  );
  $items['admin/config/nodejs/rules/channels/%/delete'] = array(
  	'title' => t('Delete Channel'),
	'page callback' => 'drupal_get_form',
	'page arguments' => array('nodejs_rules_chatterbox_channel_delete',5),
	'access arguments' => array('administer site configuration'),
	'file' => 'nodejs_rules_chatterbox.admin.inc',
    'file path' => drupal_get_path('module', 'nodejs_rules_chatterbox'),
	'type' => MENU_CALLBACK,
  );
  $items['rules-chatterbox/prevoius-messages'] = array(
  	'title' => t('Previous Messages'),
	'page callback' => 'nodejs_rules_chatterbox_previous_messages',
	'access callback' => TRUE,
	'delivery callback' => 'ajax_deliver',
	'type' => MENU_CALLBACK,
  );
  $items['rules-chatterbox/messages'] = array(
  	'title' => t('Messages'),
	'page callback' => 'nodejs_rules_chatterbox_messages',
	'access callback' => TRUE,
	'delivery callback' => 'ajax_deliver',
	'type' => MENU_CALLBACK,
  );
  return $items;
} 

/**
 * Nodejs Integration test form
 */
function  nodejs_rules_chatterbox_test_form() {	
  $form = array();
  $form['test_channel'] = array(
    '#title' => t('Channel'),
	'#type' => 'textfield',
	'#required' => TRUE,
  );
  $form['test_subject'] = array(
    '#title' => t('Subject'),
	'#type' => 'textfield',
	'#required' => TRUE,
  );
  $form['test_message'] = array(
    '#title' => t('Message'),
	'#type' => 'textarea',
	'#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
	'#value' => t('Submit'),
  );
  return $form;
}

/**
 * Nodejs Integration test form submit handler.
 */
function nodejs_rules_chatterbox_test_form_submit($form,&$form_state) {
  global $user;
  if (isset($form_state['values']['test_message']) && isset($form_state['values']['test_subject']) && isset($form_state['values']['test_channel'])) {
    if(nodejs_get_check_channel($form_state['values']['test_channel'])) {
	  nodejs_send_channel_message($form_state['values']['test_channel'],$form_state['values']['test_subject'],$form_state['values']['test_message']);
	  drupal_set_message(t('Your message has been successfully sent.'));
	} 
	else {
	  drupal_set_message(t('Message sending failed. Please check error log for more details.'),'error');
	}
  }
}

/**
 * Implementation of Hook init
 */
function nodejs_rules_chatterbox_init(){
  drupal_add_js(drupal_get_path('module','nodejs_rules_chatterbox').'/nodejs_rules_chatterbox.js');
  drupal_add_css(drupal_get_path('module','nodejs_rules_chatterbox').'/nodejs_rules_chatterbox.css');
  $js = array(
    'previousMessagePath' => url('rules-chatterbox/prevoius-messages', array('absolute' => TRUE)),
	'initializesMessagePath' => url('rules-chatterbox/messages', array('absolute' => TRUE)),
  );
  drupal_add_js(array('nodejs_rules_chatterbox' => $js), 'setting');
}

/**
 * Implementation of Hook theme.
 */
function nodejs_rules_chatterbox_theme() {
  $items = array();
  $items['nodejs_rules_chatterbox_message'] = array(
    'arguments' => array('data'=> NULL,'time_stamp'=> NULL,'channel' => NULL),
  );
  $items['nodejs_rules_chatterbox_message_board'] = array(
    'arguments' => array('channel' => NULL),
  );
  return $items;
}

/**
 * Chatter box message theme.
 */
function theme_nodejs_rules_chatterbox_message($variables) {
  $output = '<div class="nodejs-rules-chatterbox-message" id = "chatterbox-message-'. $variables['data']->id .'">';
  $output .= '<span class="message"><p>' . $variables['data']->message . '</p></span>';
  $output .= '</div>';
  return $output;
}

/**
 * Chatter box message board theme.
 */
function theme_nodejs_rules_chatterbox_message_board($variables) {
  drupal_add_js('jQuery(document).ready(function(){Drupal.nodejsRulesChatterbox.initializeBoard("'.$variables['channel'].'");});','inline');
  $output = '<div class="nodejs-rules-chatterbox-message-board" id="chatterbox-board-'.$variables['channel'].'"></div>';
  return $output;
}
/**
 * Implementation of Hook nodejs user channels.
 */
function nodejs_rules_chatterbox_nodejs_user_channels($auth_user) {
  $channels = nodejs_rules_chatterbox_get_channels();
  return $channels;
}

/**
 * Implementation of Hook block info.
 */
function nodejs_rules_chatterbox_block_info() {
  $blocks = array();
  $channels = nodejs_rules_chatterbox_get_channels();
  foreach($channels as $channel) {
    $blocks[$channel->channel] = array(
	  'info'  => t($channel->title)
	);
  }
  return $blocks;
}

/**
 * Implementation of Hook block view.
 */
function nodejs_rules_chatterbox_block_view($delta) {
  $blocks = array();
  $channel = nodejs_rules_chatterbox_channel_load($delta);
  if(!empty($channel)) {
     $blocks['subject'] = t($channel->title);
	 $blocks['content'] = theme('nodejs_rules_chatterbox_message_board',array('channel'=>$delta));
  }
  return $blocks;
}

/**
 * Implementation of Hook nodejs hendler info.
 */
function nodejs_rules_chatterbox_nodejs_handlers_info() {
  return array(
    drupal_get_path('module', 'nodejs_rules_chatterbox').'/nodejs_rules_chatterbox.js',
  );
}

/**
 * Load all nodejs rules chatterbox channels
 */
function nodejs_rules_chatterbox_get_channels() {
  $query  =  db_select('nodejs_rules_chatterbox_channels','channel')
    ->fields('channel',array('cid','channel','title'));
  $result = $query->execute()
    ->fetchAll();
  return $result;
}

/**
 * Load nodejs rules chatterbox channel.
 * @param $channel- channel machine name or channel id.
 */
function nodejs_rules_chatterbox_channel_load($channel) {
  if (is_numeric($channel)) {
  	$query  =  db_select('nodejs_rules_chatterbox_channels','channel')
      ->fields('channel',array('cid','channel','title','settings'))
	  ->condition('cid', $channel,'=');
    $result = $query->execute()
      ->fetchObject();
  } 
  else {
    $query  =  db_select('nodejs_rules_chatterbox_channels','channel')
      ->fields('channel',array('cid','channel','title','settings'))
	  ->condition('channel', $channel,'=');
    $result = $query->execute()
      ->fetchObject();
  }
  
  return $result;
}

/**
 * Send notification message to rules chatter box channel.
 * @param StdClass $message
 *  ->channel - Channel name.
 *  ->message - Message.
 */
 
function nodejs_rules_chatterbox_notify($message,$uid = '') {
  global $user;
  if (empty($uid)) {
    $uid = $user->uid;
  }
  
  //Aloow users to alter the message
  drupal_alter('chatterbox_notify', $message);
  
  $msid = nodejs_rules_chatterbox_message_save($message,$uid);
  $publish = new stdClass($message);
  $publish->channel = $message->channel;
  $publish->broadcast = TRUE;
  $packet = (object) array(
    'id' => $msid,
  	'message' => $message->message,
  );
  $publish->data['body'] = theme('nodejs_rules_chatterbox_message',array("data" => $packet,"time_stamp"=> time(),"channel" => $message->channel));
  $publish->data['channel'] = $message->channel;
  $publish->data['id'] = $msid;
  $publish->callback = 'nodejsRulesChatterboxMessageHandler';
  nodejs_send_message($publish);
}

/**
 * Save the notification message.
 */
function nodejs_rules_chatterbox_message_save($message,$uid) {
  $channel = nodejs_rules_chatterbox_channel_load($message->channel);
  
  $result = db_insert('nodejs_rules_chatterbox_message')
    ->fields(array(
	  'cid' => $channel->cid,
	  'uid' => $uid,
	  'message' => $message->message,
	  'created' => time()
	))
	->execute();
  return $result;
  return time();
}
/**
 * Returns rendered result for previous message callback.
 */
function nodejs_rules_chatterbox_previous_messages() {
  if(!empty($_POST['channel'])) {
    $channel = $_POST['channel'];
  }
  if(!empty($_POST['msid'])) {
    $msid = $_POST['msid'];
  }
  $output = '';
  $channel = nodejs_rules_chatterbox_channel_load($channel);
  $settings = unserialize($channel->settings);
  $limit  =  $settings['limit'];
  $query  =  db_select('nodejs_rules_chatterbox_message','message')
    ->fields('message',array('msid','uid','message','created'))
	->condition('msid', $msid,'<')
	->condition('cid', $channel->cid,'=')
	->orderBy('msid','DESC')
	->extend('PagerDefault')
	->limit($limit);
  $messages = $query->execute()
    ->fetchAll();	
  foreach ($messages as $message) {
  	$packet = (object) array(
      'id' => $message->msid,
  	  'message' => $message->message,
    );
    $output .= theme('nodejs_rules_chatterbox_message',array("data" => $packet,"time_stamp"=> $message->created,"channel" => $channel));
  }
  return $output;
}
/**
 * Returns rendered result for message callback. 
 */
function nodejs_rules_chatterbox_messages() {
  if(!empty($_POST['channel'])) {
    $channel = $_POST['channel'];
  }
  if(!empty($_POST['start'])) {
    $start = $_POST['start'];
  }
  $output = '';
  $channel = nodejs_rules_chatterbox_channel_load($channel);
  $settings = unserialize($channel->settings);
  $limit  =  $settings['limit'];
  $query  =  db_select('nodejs_rules_chatterbox_message','message')
    ->fields('message',array('msid','uid','message','created'))
	->condition('cid', $channel->cid,'=')
	->orderBy('msid','DESC')
	->range($start,$limit);
  $messages = $query->execute()
    ->fetchAll();	
  foreach ($messages as $message) {
  	$packet = (object) array(
      'id' => $message->msid,
  	  'message' => $message->message,
    );
    $output .= theme('nodejs_rules_chatterbox_message',array("data" => $packet,"time_stamp"=> $message->created,"channel" => $channel));
  }
  if(empty($message)) {
   $output = '<p class="chatterbox-message-unavilable">'.t('No notifications avilable.').'</p>';
  }
  return $output;
}
/**
 * Implementation of Hook rules action info.
 */
function nodejs_rules_chatterbox_rules_action_info() {
  $action = array();
  $action['nodejs_rules_chatterbox_rules_action'] = array(
    'label' => t('Notify to nodejs channel'),
    'group' => t('Nodjs Chatterbox Notification'),
	'parameter' => array(
	  'channels' => array(
	    'type' => 'list<integer>',
		'label' => t('Channels'),
		'options list' => 'nodejs_rules_chatterbox_channel_list',
		'descrtption'  => t('Select a channel to which the notifications to be sent.'),
	  ),
	  'message' => array(
	    'type' => 'text',
		'label' => t('Message'),
		'description' => t('The message to be sent.'),
	  ),
	),
	'callbacks' => array(
      'validate' => 'nodejs_rules_chatterbox_rules_action_validation', 
    ),
  );
  return $action;
}

/**
 * Rules action info validation.
 */
function nodejs_rules_chatterbox_rules_action_validation($settings) {
  if(empty($settings->settings['channels'])) {
	throw new RulesIntegrityException(t('Channel doesnot exists.'), array($settings, 'parameter', 'channels'));
  } 
  else {
    foreach ($settings->settings['channels'] as $channel) {
      $channel_load = nodejs_rules_chatterbox_channel_load($channel);
	  if (empty($channel_load)) {
	    throw new RulesIntegrityException(t('Channel doesnot exists.'), array($settings, 'parameter', 'channels'));
	  }
    }
  }
}

/**
 * Implementation of rules action handler.
 */
function nodejs_rules_chatterbox_rules_action($channels,$message) {
  foreach($channels as $channel) {
  	$channel = nodejs_rules_chatterbox_channel_load($channel);
	if(!empty($channel)) {
      nodejs_rules_chatterbox_notify((object) array("channel"=>$channel->channel,"message"=>$message));
	}
  }
}

/**
 * Channel list callback for rules action.
 */
function nodejs_rules_chatterbox_channel_list() {
  $channels = nodejs_rules_chatterbox_get_channels();
  foreach ($channels as $channel) {
    $result[$channel->cid] = $channel->channel;
  }
  return $result;
}

/**
 * Implementation of Hook cron
 * Delete old notification messages from database.
 * @Todo
 *   Add settings for time frame. Now it deletes messages older than 3 months.
 */
function nodejs_rules_chatterbox_cron() {
  $time = time() - 90 * 24 * 60 * 60;
  db_delete('nodejs_rules_chatterbox_message')
	->condition('created',$time,'<')
	->execute();
}


?>