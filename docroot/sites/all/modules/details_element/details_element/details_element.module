<?php

/**
 * @file
 * Defines a field formatter for the text with summary field type.
 */

/**
 * Implements hook_field_formatter_info().
 */
function details_element_field_formatter_info() {
  return array(
    // The 'summary or trimmed' field formatter for text_with_summary
    // fields displays the summary with the full element as
    // a HTML5 details/summary construct
    'details_element' => array(
      'label' => t('HTML5 Details element'),
      'field types' => array('text_with_summary'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function details_element_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#theme' => 'details_element',
      '#instance' => $instance,
      '#langcode' => $langcode,
      '#item' => $item,
    );
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function details_element_theme() {
  return array(
    'details_element' => array(
      'variables' => array(
        'instance' => NULL,
        'langcode' => NULL,
        'item' => NULL,
      ),
      'template' => 'details_element',
    ),
  );
}

/**
 * Process variables for details_element.tpl.php
 */
function template_preprocess_details_element(&$variables) {
  $path = drupal_get_path('module', 'details_element');
  drupal_add_js($path . '/details_element.js');
  drupal_add_css($path . '/details_element.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
  if (!empty($variables['item']['summary'])) {
    $variables['safe_summary'] = _text_sanitize($variables['instance'], $variables['langcode'], $variables['item'], 'summary');
  }
  $variables['safe_value'] = _text_sanitize($variables['instance'], $variables['langcode'], $variables['item'], 'value');
}

/**
 * Implements hook_field_widget_info().
 */
function details_element_field_widget_info() {
  return array(
    'details_element' => array(
      'label' => t('HTML5 details element'),
      'field types' => array('text_with_summary'),
      'settings' => array('rows' => 20, 'summary_rows' => 5),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function details_element_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $summary_widget = array();
  $main_widget = array();

  switch ($instance['widget']['type']) {

    case 'details_element':
      $display = !empty($items[$delta]['summary']) || !empty($instance['settings']['display_summary']);
      $summary_widget = array(
        '#type' => $display ? 'textarea' : 'value',
        '#default_value' => isset($items[$delta]['summary']) ? $items[$delta]['summary'] : NULL,
        '#title' => t('Summary'),
        '#rows' => $instance['widget']['settings']['summary_rows'],
        '#description' => t('Represents the summary or legend of the details'),
        '#attributes' => array('class' => array('text-summary')),
        '#prefix' => '<div class="text-summary-wrapper">',
        '#suffix' => '</div>',
        '#weight' => -10,
      );
      $main_widget = $element + array(
        '#type' => 'textarea',
        '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
        '#title' => t('Details'),
        '#rows' => $instance['widget']['settings']['rows'],
        '#attributes' => array('class' => array('text-full')),
      );
      break;
  }

  if ($main_widget) {
    // Conditionally alter the form element's type if text processing is enabled.
    if ($instance['settings']['text_processing']) {
      $element = $main_widget;
      $element['#type'] = 'text_format';
      $element['#format'] = isset($items[$delta]['format']) ? $items[$delta]['format'] : NULL;
      $element['#base_type'] = $main_widget['#type'];
    }
    else {
      $element['value'] = $main_widget;
    }
  }
  if ($summary_widget) {
    $element['summary'] = $summary_widget;
  }

  return $element;
}


