<?php

use Guzzle\Common\Collection;
use Guzzle\Service\Client;
use Guzzle\Service\Description\ServiceDescription;

/**
 * Implements hook_menu().
 */
function services_guzzle_client_menu() {
  $items['admin/config/services/guzzle_client'] = array(
    'title'             => 'Guzzle Client',
    'access arguments'  => array('administer site configuration'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('services_guzzle_client_debug_form'),
  );

  $items['admin/config/services/guzzle_client/%'] = array(
    'title'             => 'Guzzle Client',
    'access arguments'  => array('administer site configuration'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('services_guzzle_client_debug_endpoint_form', 4),
  );

  return $items;
}

/**
 * Choose service description and provide operations list.
 */
function services_guzzle_client_debug_form($form, $form_state) {
  $form = array();
  $endpoint_options = array();

  $form['source_selection'] = array(
    '#type' => 'radios',
    '#title' => t('Select the source of endpoint to test'),
    '#options' => array(
      'endpoint' => t('Local endpoint'),
      'upload_guzzle' => t('Upload guzzle description'),
    ),
    '#required' => TRUE,
  );

  $endpoints = services_endpoint_load_all();
  //Guzzle works only with REST servers
  $endpoints = array_filter($endpoints, 'services_guzzle_client_rest_server_filter');

  foreach ($endpoints as $endpoint_name => $endpoint) {
    $endpoint_options[$endpoint_name] = $endpoint->name;
  }

  $form['endpoint'] = array(
    '#type' => 'select',
    '#title' => t('Choose your endpoint'),
    '#description' => t('Only RESTful endpoints are available here.'),
    '#options' => $endpoint_options,
    '#states' => array(
      'visible' => array(
         ':input[name="source_selection"]' => array('value' => 'endpoint'),
      ),
    ),
  );

  $form['guzzle_service_description'] = array(
    '#type' => 'textarea',
    '#title' => t('provide service description in json'),
    '#description' => t('Put your service description json here. You can find in Guzzle tab of your endpoint.'),
    '#rows' => 10,
    '#states' => array(
      'visible' => array(
        ':input[name="source_selection"]' => array('value' => 'upload_guzzle'),
      ),
    ),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Apply changes'),
  );

  $form['test_links'] = array('#markup' => _services_guzzle_client_test_links());

  return $form;
}

/**
 * Submit callback for services_guzzle_client_debug_form form
 */
function services_guzzle_client_debug_form_submit($form, &$form_state) {
  $guzzle_object = FALSE;

  switch ($form_state['values']['source_selection']) {
    case 'endpoint':
      module_load_include('inc', 'services_guzzle', 'services_guzzle');
      $endpoint = services_endpoint_load($form_state['values']['endpoint']);
      $guzzle_object = services_guzzle_build_documentation_from_internals($endpoint);
      break;
    case 'upload_guzzle':
      $guzzle_object = json_decode($form_state['values']['guzzle_service_description']);
      break;
  }

  if (!empty($guzzle_object->name)) {
    variable_set('services_guzzle_client_description', $guzzle_object);
    drupal_set_message(t('New configuration applied'));
    dpm($guzzle_object);
  }
  else {
    drupal_set_message(t('Something went wrong, try to check your json or endpoint settings'), 'error');
  }
}

/**
 * Build a list of all operations discovered to the client.
 */
function _services_guzzle_client_test_links() {
  $service_description = variable_get('services_guzzle_client_description', NULL);
  if (empty($service_description)) {
    return t('No service description uploaded.');
  }

  $links = array();
  foreach (get_object_vars($service_description->operations) as $operation_name => $operation_description) {
    $links[] = l(t('@operation_name (@operation_description)', array('@operation_name' => $operation_name,
        '@operation_description' => $operation_description->summary)),
      'admin/config/services/guzzle_client/' . $operation_name);
  }

  if (empty($links)) {
    $links[] = t('No operations available');
  }

  return theme('item_list', array('items' => $links, 'title' => t('Available operations to test')));
}

function services_guzzle_client_rest_server_filter($item) {
  return (!empty($item->server) && $item->server == 'rest_server');
}

/**
 * Menu callback.
 * Provide form to test particular operation
 */
function services_guzzle_client_debug_endpoint_form($form, $form_state, $operation_name) {
  $service_description = variable_get('services_guzzle_client_description', FALSE);

  if (!$service_description) {
    $form['error'] = array('#markup' => t('Service description is not available'));
    return $form;
  }

  if (!isset($service_description->operations->$operation_name)) {
    $form['error'] = array('#markup' => t('Service operation (@operation) is not valid', array('@operation' => $operation_name)));
    return $form;
  }

  $operation_description = $service_description->operations->$operation_name;

  $form['service_call_information'] = array(
    'name'        => array('#markup' => '<h3>' . check_plain($operation_name) . '</h3>'),
    'description' => array('#markup' => '<p>' . check_plain($operation_description->summary) . '</p>'),
    'method'      => array('#markup' => '<p>' . check_plain($operation_description->httpMethod) . ': ' . check_plain($operation_description->uri) . '</p>'),
  );

  $form['service_guzzle_debug_auth'] = array(
    '#type' => 'fieldset',
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
    '#title' => t('Authorize first (do user login call)'),
  );

  $form['service_guzzle_debug_auth']['username'] = array(
    '#type'  => 'textfield',
    '#title' => t('User name of drupal user with permissions'),
  );

  $form['service_guzzle_debug_auth']['password'] = array(
    '#type' => 'textfield',
    '#title' => t('User password'),
  );

  if (property_exists($operation_description, 'parameters')) {
    $form['services_guzzle_debug']['params'] = array(
      '#type' => 'fieldset',
      '#title' => t('Arguments'),
      '#tree' => TRUE,
    );

    foreach (get_object_vars($operation_description->parameters) as $param_name => $param) {
      $properties = array();

      if ($param->required) {
        $properties[] = t('required');
      }

      $properties[] = check_plain($param->type);

      $form_element_type = 'textarea';
      $help_description = t('Provide arrays or objects via json. Use ONLY double quotes!');

      if ($param->type == 'integer' || $param->type == 'string') {
        $form_element_type = 'textfield';
        $help_description = '';
      }

      $form['services_guzzle_debug']['params'][$param_name] = array(
        '#type' => $form_element_type,
        '#title' => check_plain($param->description) . ' (' . implode(', ', $properties) . ')',
        '#required' => $param->required,
        '#description' => $help_description,
      );
    }
  }

  $form['operation_name'] = array(
    '#type' => 'value',
    '#value' => $operation_name,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Test me!'),
  );

  return $form;
}

/**
 * Submit callback for services_guzzle_client_debug_endpoint_form form
 */
function services_guzzle_client_debug_endpoint_form_submit($form, &$form_state) {
  form_state_values_clean($form_state);
  $fv = $form_state['values'];
  $service_description = variable_get('services_guzzle_client_description', NULL);
  //Create Guzzle Service Client instance from service description
  $client = \DrupalServices\DrupalServicesClient::factory(_services_guzzle_client_object_to_array_recursively($service_description));

  // Very important to add Content-Type header, otherwise Services won't
  // be able to decode request content.
  $client->setDefaultHeaders(array('Content-Type' => 'application/json'));

  if (!empty($fv['username'])) {
    $arguments = array('username' => $fv['username'], 'password' => $fv['password']);
    $login_command = $client->getCommand('UserActionLogin', $arguments);

    try {
      $response = $client->execute($login_command);
      dpm($response, 'UserActionLogin');
    }
    catch (Exception $e) {
      dpm($e->getMessage(), NULL, 'error');
    }
  }

  $operation_name = $fv['operation_name'];
  $arguments = $fv['params'];

  foreach ($arguments as $parameter_name => $parameter_value) {
    $parameter_type = $service_description->operations->{$operation_name}->parameters->{$parameter_name}->type;

    //Decoded JSON taken from debug UI
    if ($parameter_type == 'array' || $parameter_type == 'object') {
      $arguments[$parameter_name] = json_decode($arguments[$parameter_name], TRUE);
    }

    //Set strict type, guzzle will throw exception if you will give string instead of integer
    settype($arguments[$parameter_name], $parameter_type);
  }

  $command = $client->getCommand($operation_name, $arguments);

  try {
    $response = $client->execute($command);
  }
  catch (Exception $e) {
    dpm($e->getMessage(), NULL, 'error');
  }

  if (isset($response)) {
    drupal_set_message(t('Call was successful.'));

    if (!is_object($response)) {
      dpm($response, $operation_name);
    }
    else {
      dpm($response->getBody(TRUE), $operation_name);
    }
  }
}

/**
 * Recursively convert object to array.
 *
 * @param $object
 *
 * @return array
 */
function _services_guzzle_client_object_to_array_recursively($object) {
  if (is_object($object)) {
    $object = (array) $object;
  }

  if (is_array($object)) {
    $new = array();

    foreach ($object as $key => $val) {
      $new[$key] = _services_guzzle_client_object_to_array_recursively($val);
    }
  }
  else {
    $new = $object;
  }

  return $new;
}
