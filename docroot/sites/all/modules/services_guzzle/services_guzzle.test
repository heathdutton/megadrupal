<?php

/**
 * Unit tests.
 */

class ServicesGuzzleTest extends DrupalUnitTestCase {
  public static function getInfo() {
    return array(
      'name' => t('Services Guzzle'),
      'description' => t('Various unit test.'),
      'group' => t('Services Guzzle'),
    );
  }

  public function setUp() {
    parent::setUp();
    module_load_include('inc', 'services_guzzle', 'services_guzzle');
  }

  public function testExtractArgumentsRetrieve() {
    $test_resource = $this->getTestResource();

    $controller = $test_resource['operations']['retrieve'];
    $operation_uri = 'node/{nid}';

    $operation_arguments = _services_guzzle_extract_arguments($operation_uri, $controller);
    $operation_arguments_compare = (object) array(
      'nid' => (object) array(
        'description' => 'The nid of the node to get',
        'required' => TRUE,
        'location' => 'uri',
        'type' => 'integer',
      ),
    );
    $this->assertEqual($operation_arguments, $operation_arguments_compare, 'Retrieve method arguments extracted');
    $this->assertEqual($operation_uri, 'node/{nid}', 'Retrieve method uri modified correctly');
  }

  public function testExtractArgumentsCreate() {
    $test_resource = $this->getTestResource();

    $controller = $test_resource['operations']['create'];
    $operation_uri = '/node';

    $operation_arguments = _services_guzzle_extract_arguments($operation_uri, $controller);
    $operation_arguments_compare = (object) array(
      'node' => (object) array(
        'description' => 'The node data to create',
        'required' => TRUE,
        'location' => 'json',
        'type' => 'array',
      ),
    );
    $this->assertEqual($operation_arguments, $operation_arguments_compare, 'Create method arguments extracted');
    $this->assertEqual($operation_uri, '/node', 'Create method uri is correct');
  }

  public function testExtractArgumentsUpdate() {
    $test_resource = $this->getTestResource();

    $controller = $test_resource['operations']['update'];
    $operation_uri = 'node/{nid}';

    $operation_arguments = _services_guzzle_extract_arguments($operation_uri, $controller);
    $operation_arguments_compare = (object) array(
      'nid' => (object) array(
        'description' => 'The nid of the node to get',
        'required' => TRUE,
        'location' => 'uri',
        'type' => 'integer',
      ),
      'node' => (object) array(
        'description' => 'The node data to update',
        'required' => TRUE,
        'location' => 'json',
        'type' => 'array',
      ),
    );
    $this->assertEqual($operation_arguments, $operation_arguments_compare, 'Update method arguments extracted');
    $this->assertEqual($operation_uri, 'node/{nid}', 'Update method uri is correct');
  }

  public function testExtractArgumentsIndex() {
    $test_resource = $this->getTestResource();

    $controller = $test_resource['operations']['index'];
    $operation_uri = 'node';

    $operation_arguments = _services_guzzle_extract_arguments($operation_uri, $controller);
    $operation_arguments_compare = (object) array(
      'page' => (object) array(
        'description' => 'The zero-based index of the page to get, defaults to 0.',
        'required' => FALSE,
        'location' => 'query',
        'type' => 'integer',
      ),
      'fields' => (object) array(
        'description' => 'The fields to get.',
        'required' => FALSE,
        'location' => 'query',
        'type' => 'string',
      ),
      'parameters' => (object) array(
        'description' => 'Parameters array',
        'required' => FALSE,
        'location' => 'query',
        'type' => 'array',
      ),
      'pagesize' => (object) array(
        'description' => 'Number of records to get per page.',
        'required' => FALSE,
        'location' => 'query',
        'type' => 'integer',
      ),
    );
    $this->assertEqual($operation_arguments, $operation_arguments_compare, 'Index method arguments extracted');
    $this->assertEqual($operation_uri, 'node', 'Index method uri is correct');
  }

  public function testExtractArgumentsTargetedActionAttachFiles() {
    $test_resource = $this->getTestResource();

    $controller = $test_resource['targeted_actions']['attach_file'];
    $operation_uri = 'node/{nid}/attach_file';

    $operation_arguments = _services_guzzle_extract_arguments($operation_uri, $controller);
    $operation_arguments_compare = (object) array(
      'nid' => (object) array(
        'description' => 'The nid of the node to attach a file to',
        'required' => TRUE,
        'location' => 'uri',
        'type' => 'integer',
      ),
      'field_name' => (object) array(
        'description' => 'The file parameters',
        'required' => TRUE,
        'location' => 'json',
        'type' => 'string',
      ),
      'attach' => (object) array(
        'description' => 'Attach the file(s) to the node. If FALSE, this clears ALL files attached, and attaches the files',
        'required' => FALSE,
        'location' => 'json',
        'type' => 'integer',
      ),
      'field_values' => (object) array(
        'description' => 'The extra field values',
        'required' => FALSE,
        'location' => 'json',
        'type' => 'array',
      ),
    );
    $this->assertEqual($operation_arguments, $operation_arguments_compare, 'Targeted action attach file arguments extracted');
    $this->assertEqual($operation_uri, 'node/{nid}/attach_file', 'Targeted action attach file uri is correct');
  }

  public function testExtractArgumentsRelationshipFiles() {
    $test_resource = $this->getTestResource();

    $controller = $test_resource['relationships']['files'];
    $operation_uri = 'node/{nid}/files/{id}/{id}';

    $operation_arguments = _services_guzzle_extract_arguments($operation_uri, $controller);
    $operation_arguments_compare = (object) array(
      'nid' => (object) array(
        'description' => 'The nid of the node whose files we are getting',
        'required' => TRUE,
        'location' => 'uri',
        'type' => 'integer',
      ),
      'file_contents' => (object) array(
        'description' => 'To return file contents or not.',
        'required' => FALSE,
        'location' => 'uri',
        'type' => 'integer',
      ),
      'image_styles' => (object) array(
        'description' => 'To return image styles or not.',
        'required' => FALSE,
        'location' => 'uri',
        'type' => 'integer',
      ),
    );
    $this->assertEqual($operation_arguments, $operation_arguments_compare, 'Relationship files arguments extracted');
    $this->assertEqual($operation_uri, 'node/{nid}/files/{file_contents}/{image_styles}', 'Relationship files uri is correct');
  }

  protected function getTestResource() {
    return array(
      'operations' => array(
        'retrieve' => array(
          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
          'callback' => '_node_resource_retrieve',
          'args' => array(
            array(
              'name' => 'nid',
              'optional' => FALSE,
              'source' => array('path' => 0),
              'type' => 'int',
              'description' => 'The nid of the node to get',
            ),
          ),
          'access callback' => '_node_resource_access',
          'access arguments' => array('view'),
          'access arguments append' => TRUE,
        ),
        'create' => array(
          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
          'callback' => '_node_resource_create',
          'args' => array(
            array(
              'name' => 'node',
              'optional' => FALSE,
              'source' => 'data',
              'description' => 'The node data to create',
              'type' => 'array',
            ),
          ),
          'access callback' => '_node_resource_access',
          'access arguments' => array('create'),
          'access arguments append' => TRUE,
        ),
        'update' => array(
          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
          'callback' => '_node_resource_update',
          'args' => array(
            array(
              'name' => 'nid',
              'optional' => FALSE,
              'source' => array('path' => 0),
              'type' => 'int',
              'description' => 'The nid of the node to get',
            ),
            array(
              'name' => 'node',
              'optional' => FALSE,
              'source' => 'data',
              'description' => 'The node data to update',
              'type' => 'array',
            ),
          ),
          'access callback' => '_node_resource_access',
          'access arguments' => array('update'),
          'access arguments append' => TRUE,
        ),
        'delete' => array(
          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
          'callback' => '_node_resource_delete',
          'args' => array(
            array(
              'name' => 'nid',
              'optional' => FALSE,
              'source' => array('path' => 0),
              'type' => 'int',
            ),
          ),
          'access callback' => '_node_resource_access',
          'access arguments' => array('delete'),
          'access arguments append' => TRUE,
        ),
        'index' => array(
          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
          'callback' => '_node_resource_index',
          'args' => array(
            array(
              'name' => 'page',
              'optional' => TRUE,
              'type' => 'int',
              'description' => 'The zero-based index of the page to get, defaults to 0.',
              'default value' => 0,
              'source' => array('param' => 'page'),
            ),
            array(
              'name' => 'fields',
              'optional' => TRUE,
              'type' => 'string',
              'description' => 'The fields to get.',
              'default value' => '*',
              'source' => array('param' => 'fields'),
            ),
            array(
              'name' => 'parameters',
              'optional' => TRUE,
              'type' => 'array',
              'description' => 'Parameters array',
              'default value' => array(),
              'source' => array('param' => 'parameters'),
            ),
            array(
              'name' => 'pagesize',
              'optional' => TRUE,
              'type' => 'int',
              'description' => 'Number of records to get per page.',
              'default value' => variable_get('services_node_index_page_size', 20),
              'source' => array('param' => 'pagesize'),
            ),
          ),
          'access arguments' => array('access content'),
        ),
      ),
      'targeted_actions' => array(
        'attach_file' => array(
          'help' => 'Upload and attach file(s) to a node. POST multipart/form-data to node/123/attach_file',
          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
          'callback' => '_node_resource_attach_file',
          'access callback' => '_node_resource_access',
          'access arguments' => array('update'),
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'nid',
              'optional' => FALSE,
              'source' => array('path' => 0),
              'type' => 'int',
              'description' => 'The nid of the node to attach a file to',
            ),
            array(
              'name' => 'field_name',
              'optional' => FALSE,
              'source' => array('data' => 'field_name'),
              'description' => 'The file parameters',
              'type' => 'string',
            ),
            array(
              'name' => 'attach',
              'optional' => TRUE,
              'source' => array('data' => 'attach'),
              'description' => 'Attach the file(s) to the node. If FALSE, this clears ALL files attached, and attaches the files',
              'type' => 'int',
              'default value' => TRUE,
            ),
            array(
              'name' => 'field_values',
              'optional' => TRUE,
              'source' => array('data' => 'field_values'),
              'description' => 'The extra field values',
              'type' => 'array',
              'default value' => array(),
            ),
          ),
        ),
      ),
      'relationships' => array(
        'files' => array(
          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/node_resource'),
          'help'   => t('This method returns files associated with a node.'),
          'access callback' => '_node_resource_access',
          'access arguments' => array('view'),
          'access arguments append' => TRUE,
          'callback' => '_node_resource_load_node_files',
          'args'     => array(
            array(
              'name' => 'nid',
              'optional' => FALSE,
              'source' => array('path' => 0),
              'type' => 'int',
              'description' => 'The nid of the node whose files we are getting',
            ),
            array(
              'name' => 'file_contents',
              'type' => 'int',
              'description'  => t('To return file contents or not.'),
              'source' => array('path' => 2),
              'optional' => TRUE,
              'default value' => TRUE,
            ),
            array(
              'name'         => 'image_styles',
              'type'         => 'int',
              'description'  => t('To return image styles or not.'),
              'source'       => array('path' => 3),
              'optional'     => TRUE,
              'default value' => FALSE,
            ),
          ),
        ),
      ),
      'actions' => array(
        'connect' => array(
          'access callback' => 'services_access_menu',
          'help' => t('Returns the details of currently logged in user.'),
          'file' => array('type' => 'inc', 'module' => 'services', 'name' => 'resources/system_resource'),
          'callback' => '_system_resource_connect',
        ),
      ),
    );
  }
}