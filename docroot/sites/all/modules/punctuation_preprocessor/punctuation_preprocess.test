<?php

/**
 * @file
 * Tests for the Punctuation Pre-Processor module.
 */


/**
 * Functional test for Punctuation Pre-Processor.
 */
class PunctuationPreprocessorFunctionalTest extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => t('Functional test'),
      'description' => t('Test that the punctuation pre-processor works correctly end-to-end.'),
      'group' => t('Punctuation Pre-processor'),
    );
  }

  public function setUp() {
    parent::setUp('search', 'punctuation_preprocess');

    // Set up a super-user
    $this->superuser = $this->drupalCreateUser( array( 'bypass node access',
        'administer content types', 'administer nodes',
        'administer search', 'search content',
        'access administration pages', 'access content',
        'administer site configuration'));

    // We want to test all features of the module, so enable the non-default
    // option to detect and bypass URLs. Also enable additional "&" character to
    // be treated as special punctuation.
    variable_set('punctuation_preprocess_url_bypass', TRUE);
    variable_set('punctuation_preprocess_preg_class_special_punctuation', '&._-');

    $this->drupalLogin( $this->superuser );

    // Create some content to search.
    $info = array(
      'body' => array(LANGUAGE_NONE => array(array('value' => 'I am counting one-two-three-four-five.'))),
      'type' => 'page',
      'language' => LANGUAGE_NONE,
      'title' => 'Hyphen Test',
    );
    $node = $this->drupalCreateNode($info);

    $info = array(
      'body' => array(LANGUAGE_NONE => array(array('value' => 'Here is an absolute url: http://drupal.org/some-path?some_query=these+arguments'))),
      'type' => 'page',
      'language' => LANGUAGE_NONE,
      'title' => 'URL Test 1',
    );
    $node = $this->drupalCreateNode($info);

    $info = array(
      'body' => array(LANGUAGE_NONE => array(array('value' => 'Here is part of a URL without a URL context: drupal.org/some-path?some_query=these+arguments'))),
      'type' => 'page',
      'language' => LANGUAGE_NONE,
      'title' => 'URL Test 2',
    );
    $node = $this->drupalCreateNode($info);

    $info = array(
      'body' => array(LANGUAGE_NONE => array(array('value' => 'Here is a filename: an_important&file.jpg'))),
      'type' => 'page',
      'language' => LANGUAGE_NONE,
      'title' => 'Filename Test',
    );
    $node = $this->drupalCreateNode($info);

    // Run cron to ensure this content is indexed.
    $this->drupalGet($GLOBALS['base_url'] . '/cron.php',
      array(
        'external' => TRUE,
        'query' => array('cron_key' => variable_get('cron_key', 'drupal'))
      ));

  }

  /**
   * Tests that appropriate pages can be found in searches.
   */
  function testSearch() {
    $this->drupalLogin( $this->superuser );

    // Search for "counting" and verify that it is found in "Hyphen Test" page.
    // This is just a control test as pre-processing should not effect the
    // result.
    $this->drupalPost('search',
      array('keys' => 'counting' ),
      'Search'
    );
    $this->assertText('Hyphen Test', 'Control test: "I am counting one-two-three-four-five" was matched with a search for "counting"');

    // Search for 'blahblahblah' and verify none of the pages were found.
    // This is another control test.
    $this->drupalPost('search',
      array('keys' => 'blahblahblah' ),
      'Search'
    );
    $this->assertNoText('Hyphen Test', 'First page was not found with bogus search');
    $this->assertNoText('URL Test', 'Second page was not found with bogus search');
    $this->assertNoText('URL Test 2', 'Third page was not found with bogus search');
    $this->assertNoText('Filename Test', 'Fourth page was not found with bogus search');

    // Search for "three" and verify that it is found in "Hyphen Test" page.
    $this->drupalPost('search',
      array('keys' => 'three' ),
      'Search'
    );
    $this->assertText('Hyphen Test', '"one-two-three-four-five" was matched with a search for "three"');

    // Search for "two four" and verify that it is found in "Hyphen Test" page.
    $this->drupalPost('search',
      array('keys' => 'two four' ),
      'Search'
    );
    $this->assertText('Hyphen Test', '"one-two-three-four-five" was matched with a search for "two four"');

    // Search for "twothreefour" and verify that it is found in "Hyphen Test" page.
    $this->drupalPost('search',
      array('keys' => 'twothreefour' ),
      'Search'
    );
    $this->assertText('Hyphen Test', '"one-two-three-four-five" was matched with a search for "twothreefour"');

    // Search for "path" and verify that it is found in only "URL Test 2" page
    // (when URLs are bypassed).
    $this->drupalPost('search',
      array('keys' => 'path' ),
      'Search'
    );
    $this->assertNoText('URL Test 1', '"http://drupal.org/some-path?some_query=these+arguments" was NOT matched with a search for "path" (due to URLs bypass config option).');
    $this->assertText('URL Test 2', '"drupal.org/some-path?some_query=these+arguments" was matched with a search for "path".');

    // Search for "an important file" and verify that it is found in "Filename Test" page
    $this->drupalPost('search',
      array('keys' => 'an important file' ),
      'Search'
    );
    $this->assertText('Filename Test', '"an_important&file.jpg" was matched with a search for "an important file"');

    // Search for "animportantfile" and verify that it is found in "Filename Test" page
    $this->drupalPost('search',
      array('keys' => 'animportantfile' ),
      'Search'
    );
    $this->assertText('Filename Test', '"an_important&file.jpg" was matched with a search for "animportantfile" (when "&" is enabled as special punctuation)');
  }
}

/**
 * Unit test for Punctuation Pre-Processor that test general input/output.
 *
 * This could be run as a DrupalUnitTestCase, but we want to be able to set
 * some variables, which requires DB interaction. As a result we do a full
 * DrupalWebTestCase with setUp() etc.
 */
class PunctuationPreprocessorUnitTest1 extends DrupalWebTestCase {

  function getInfo() {

    return array(
      'name' => t('Unit Tests - General input/output'),
      'description' => t('Various unit tests for the punctuation pre-processor module to test overall input/output.'),
      'group' => t('Punctuation Pre-processor'),
      );
  }

  public function setUp() {
    parent::setUp();

    // We want to test all features of the module, so enable the non-default
    // option to detect and bypass URLs. Also enable additional "&" character to
    // be treated as special punctuation.
    variable_set('punctuation_preprocess_url_bypass', TRUE);
    variable_set('punctuation_preprocess_preg_class_special_punctuation', '&._-');
  }

  function test_punctuation_preprocess() {

    // Test raw pre-processor input/output
    $result = punctuation_preprocess_search_preprocess("some simple text");
    $expected = "some simple text";
    $message = '"some simple text" is processed as "some simple text"';
    $this->assertEqual($result, $expected, $message);

    $result = punctuation_preprocess_search_preprocess("some.simple_text");
    $expected = "some simple somesimple text simpletext somesimpletext";
    $message = '"some simple text" is processed as "some simple somesimple text simpletext somesimpletext"';
    $this->assertEqual($result, $expected, $message);

    $result = punctuation_preprocess_search_preprocess("some&text");
    $expected = "some text sometext";
    $message = '"some&text" is processed as "some text sometext" (when "&" is enabled as special punctuation)';
    $this->assertEqual($result, $expected, $message);

    $result = punctuation_preprocess_search_preprocess("this intro_text www.drupal.org more-text");
    $expected = "this intro text introtext www.drupal.org more text moretext";
    $message = '"this intro_text www.drupal.org more-text" is processed as "this intro text introtext www.drupal.org more text moretext" (with URL bypass config option)';
    $this->assertEqual($result, $expected, $message);

    $result = punctuation_preprocess_search_preprocess("this intro_text drupal.org/some-path");
    $expected = "this intro text introtext drupal org drupalorg/some path somepath";
    $message = '"this intro_text drupal.org/some-path" is processed as "this intro text introtext drupal org drupalorg/some path somepath"';
    $this->assertEqual($result, $expected, $message);

    }
}

/**
 * Unit test for Punctuation Pre-Processor that tests URL detection.
 *
 * This could be run as a DrupalUnitTestCase, but we want to be able to set
 * some variables, which requires DB interaction. As a result we do a full
 * DrupalWebTestCase with setUp() etc.
 */
class PunctuationPreprocessorUnitTest2 extends DrupalWebTestCase {

  function getInfo() {

    return array(
      'name' => t('Unit Tests - Exception (URL) detection'),
      'description' => t('Various unit tests for the punctuation pre-processor module to test exception detection.'),
      'group' => t('Punctuation Pre-processor'),
      );
  }

  public function setUp() {
    parent::setUp();

    // We want to test all features of the module, so enable the non-default
    // option to detect and bypass URLs. Also enable additional "&" character to
    // be treated as special punctuation.
    variable_set('punctuation_preprocess_url_bypass', TRUE);
    variable_set('punctuation_preprocess_preg_class_special_punctuation', '&._-');
  }

  function test_punctuation_preprocess() {

    // Test exception (URL) detection.
    $result = _punctuation_preprocess_handle_exceptions("some_test.text");
    $message = t('"some_test.text" is not identified as a URL');
    $this->assertFalse($result, $message);

    $result = _punctuation_preprocess_handle_exceptions("http://drupal.org");
    $message = t('"http://drupal.org" is identified as a URL');
    $this->assertTrue($result, $message);

    $result = _punctuation_preprocess_handle_exceptions("www.drupal.org");
    $message = t('"www.drupal.org" is identified as a URL');
    $this->assertTrue($result, $message);

    $result = _punctuation_preprocess_handle_exceptions("http://user:pass@drupal.org/some-path/other_path?query=some+query&another=other+query");
    $message = t('"http://user:pass@drupal.org/some-path/other_path?query=some+query&another=other+query" is identified as a URL');
    $this->assertTrue($result, $message);

    $result = _punctuation_preprocess_handle_exceptions("drupal.org");
    $message = t('"drupal.org" is not identified as a URL');
    $this->assertFalse($result, $message);

    $result = _punctuation_preprocess_handle_exceptions("rjacobs.alais@drupal.org");
    $message = t('"rjacobs.alais@drupal.org" is identified as an email address');
    $this->assertTrue($result, $message);
  }
}
