<?php

/**
 * @file
 * This is an implementation of a search pre-processor to handle special
 * punctuation when indexing and searching content.
 *
 * See: http://drupal.org/node/108100
 */

/**
 * Denote default special punctuation for pre-processing.
 */
define('PREG_CLASS_SPECIAL_PUNCTUATION', "'._-");

/**
 * Denote an extended version of PREG_CLASS_PUNCTUATION that includes "$", "+",
 * "=" and "~".
 *
 * The "$", "+", "=" and "~" characters are considered punctuation in some
 * contexts of this module (they are used to help identify URLs and may
 * themselves be considered special punctuation if configured).
 */
define('PREG_CLASS_PUNCTUATION_EXTENDED', PREG_CLASS_PUNCTUATION . '\x{2b}\x{2b}\x{3d}\x{7e}');

/**
 * Denote special characters that are legal in domins other than simply a-z.
 */
define('LINK_ICHARS_DOMAIN', (string) implode("", array(
"&#x00E6;", // æ
"&#x00C6;", // Æ
"&#x00F8;", // ø
"&#x00D8;", // Ø
"&#x00E5;", // å
"&#x00C5;", // Å
"&#x00E4;", // ä
"&#x00C4;", // Ä
"&#x00F6;", // ö
"&#x00D6;", // Ö
"&#x00FC;", // ü
"&#x00DC;", // Ü
"&#x00D1;", // Ñ
"&#x00F1;", // ñ
)));
define('LINK_ICHARS', LINK_ICHARS_DOMAIN . (string) implode("", array(
"&#x00DF;", // ß
)));

/**
 * Denote if "exhaustive" pre-processing should be used.
 *
 * With this option enabled, "word-power" becomes "word power wordpower" as
 * opposed to just "word power". This should almost always be TRUE but may be
 * configured otherwise for testing or special implementations.
 */
define('PUNCTUATION_PREPROCESS_EXHAUSTIVE', TRUE);


/**
 * Implements hook_search_preprocess().
 *
 * Find word strings that contain any punctuation within text being searched
 * or indexed, and pass to callback for pre-processing. This is essentially
 * defining "input" for the pre-processor. We don't target only special
 * punctuation here yet, as the processing of special punctuation may be
 * dependent on its context (e.g., the special punctuation in a URL may be
 * bypassed, but the URL can only be identified by looking at all its parts).
 *
 * @param string $text
 *   Text recieved from search_simplify(). It's important to note that this
 *   string is not always a single word. Entire paragraphs (and thier
 *   whitespace) can be passed during indexing.
 * @return string
 *   Final pre-processed text.
 */
function punctuation_preprocess_search_preprocess($text) {
  $preg_class_special_punctuation = variable_get('punctuation_preprocess_preg_class_special_punctuation', PREG_CLASS_SPECIAL_PUNCTUATION);
  if ($preg_class_special_punctuation != "") {
    $text = preg_replace_callback('/[^' . PREG_CLASS_UNICODE_WORD_BOUNDARY . ']+([' . PREG_CLASS_PUNCTUATION_EXTENDED . ']+[^' . PREG_CLASS_UNICODE_WORD_BOUNDARY . ']+)+/u', '_punctuation_preprocess_tasks', $text);

  }
  return $text;
}


/**
 * Callback to manage pre-processor input.
 *
 * Here we isolate special exception cases from strings that need
 * pre-processing. Exception cases are processed independently and thus bypass
 * normal pre-processing (they are not handled in series).
 *
 * @param string $text
 *   Any matches found in the preg_replace_callback() of
 *   punctuation_preprocess_search_preprocess().
 * @return string
 *   Final pre-processed text.
 */
function _punctuation_preprocess_tasks($matches) {
  $text = $matches[0];
  // Detect and process any exceptions.
  $processed_exception = _punctuation_preprocess_handle_exceptions($text);
  // Stop pre-processing here if an exception is found.
  if ($processed_exception) {
    return $processed_exception;
  }
  // If an exception is not found, continue to normal pre-processing detection.
  // Match all word strings that contain special punctuation and pass to
  // final pre-processing callback.
  $preg_class_special_punctuation = variable_get('punctuation_preprocess_preg_class_special_punctuation', PREG_CLASS_SPECIAL_PUNCTUATION);
  $text = preg_replace_callback('/[^' . PREG_CLASS_UNICODE_WORD_BOUNDARY . ']+([' . $preg_class_special_punctuation . ']+[^' . PREG_CLASS_UNICODE_WORD_BOUNDARY . ']+)+/u', '_punctuation_preprocess_simplify', $text);
  return $text;
}


/**
 * Callback to manage word strings that are ready for normal pre-processing.
 *
 * Only text that has been found to contain special punctuation and has NOT been
 * detected an exception will be recieved by this callback.
 *
 * @param string $text
 *   Any mathes found in the preg_replace_callback() of
 *   punctuation_preprocess_tasks().
 * @return string
 *   Final pre-processed text.
 */
function _punctuation_preprocess_simplify($matches) {
  $text = $matches[0];
  // The line below is copied directly from core search and strips punctuation
  // when found between numbers. This should happen first as the
  // pre-processing that follows may treat such cases incorrectly.
  $text = preg_replace('/([' . PREG_CLASS_NUMBERS . ']+)[' . PREG_CLASS_PUNCTUATION . ']+(?=[' . PREG_CLASS_NUMBERS . '])/u', '\1', $text);
  // Treat special punctuation as word boundary. This essentially breaks each
  // fragment into a separate word token (e.g., "word-power" becomes
  // "word power").
  $preg_class_special_punctuation = variable_get('punctuation_preprocess_preg_class_special_punctuation', PREG_CLASS_SPECIAL_PUNCTUATION);
  $text = preg_replace('/[' . $preg_class_special_punctuation . ']+/', ' ', $text);
  // Ensure that all stripped and non-stripped combinations of our new
  // tokenized strucure are recorded (e.g. "word-power" now becomes
  // "word power wordpower").
  if (PUNCTUATION_PREPROCESS_EXHAUSTIVE) {
    $tokens = explode(' ', $text);
    $text = ''; // Set to blank string that we will reconstruct below.
    foreach ($tokens as $key => $token) {
      if ($key == 0) {
        $text = $tokens[$key];
        continue;
      }
      $text = $text . " " . $tokens[$key];
      $pointer = $key - 1;
      while ($pointer >= 0) {
        $chunk = $tokens[$pointer];
        $i = $pointer + 1;
        while ($i <= $key) {
          $chunk = $chunk . $tokens[$i];
          $i++;
        }
        $pointer--;
        $text = $text . " " . $chunk;
      }
    }
  }
  return $text;
}


/**
 * Detect, and handle, any exceptions to normal pre-processing.
 *
 * Here we check for any string exceptions that should bypass normal
 * pre-processing completely, or should be processed with their own unique
 * rules. Any number of special exceptions (and any unique processing that
 * applies to them) could be defined here, but we currently only detect and
 * process URLs (if configured to do so).
 *
 * @param string $text
 *   Text to be tested for a pre-processing exception.
 * @return mixed
 *   Returns boolean FALSE if no exception is detected. Upon detection,
 *   returns a pre-processed version of the exception text (if processing was
 *   called for), or the unmodified text (of no processing was called for).
 */
function _punctuation_preprocess_handle_exceptions($text) {
  // If configured to test for, and process, URLs.
  if (variable_get('punctuation_preprocess_url_bypass', FALSE)) {
    // Many of the patters below are slightly modified versions of those found
    // in link_validate_url() function of the cck link module.
    // See: http://drupal.org/project/link

    // Define patterns for URL hosts.
    $allowed_protocols = variable_get('filter_allowed_protocols', array('http', 'https', 'ftp', 'news', 'nntp', 'telnet', 'mailto', 'irc', 'ssh', 'sftp', 'webcal'));
    $protocol = '((' . implode("|", $allowed_protocols) . '):\/\/)';
    $authentication = '(([a-z0-9%' . LINK_ICHARS . ']+(:[a-z0-9%' . LINK_ICHARS . '!]*)?)?@)';
    $domain = '([a-z0-9' . LINK_ICHARS_DOMAIN . ']([a-z0-9' . LINK_ICHARS_DOMAIN . '\-_\[\]])*)(\.(([a-z0-9' . LINK_ICHARS_DOMAIN . '\-_\[\]])+\.)*([a-z]{2,}))';
    $ipv4 = '([0-9]{1,3}(\.[0-9]{1,3}){3})';
    $ipv6 = '([0-9a-fA-F]{1,4}(\:[0-9a-fA-F]{1,4}){7})';
    $port = '(:([0-9]{1,5}))';
    $external_pattern = '/^' . $protocol . $authentication . '?(' . $domain . '|' . $ipv4 . '|' . $ipv6 . ' |localhost)' . $port . '?';
    $external_pattern_www = '/^' . $protocol . '?' . $authentication . '?(' . 'www\.' . $domain . '|' . $ipv4 . '|' . $ipv6 . ' |localhost)' . $port . '?';
    // Define patterns for URL endings.
    $directories = "((\/[a-z0-9" . LINK_ICHARS . "_\-\.~+%=&,$'!():;*@\[\]]*)*)";
    $query = "(\/?\?([?a-z0-9" . LINK_ICHARS . "+_|\-\.\/\\\\%=&,$'():;*@\[\]{} ]*))";
    $anchor = "(#[a-z0-9" . LINK_ICHARS . "_\-\.~+%=&,$'():;*@\[\]\/\?]*)";
    $end = $directories . '?' . $query . '?' . $anchor . '?' . '$/i';
    // Define patterns for news links.
    $message_id = '[^@].*@' . $domain;
    $newsgroup_name = '([0-9a-z+-]*\.)*[0-9a-z+-]*';
    $news_pattern = '/^news:(' . $newsgroup_name . '|' . $message_id . ')$/i';
    // Define patterns for email addresses.
    $user = '([a-zA-Z0-9' . LINK_ICHARS . '_\-\.\+\^!#\$%&*+\/\=\?\`\|\{\}~\'\[\]]+)';
    $email_pattern = '/^(mailto:)?' . $user . '@' . '(' . $domain . '|' . $ipv4 . '|' . $ipv6 . '|localhost)' . $query . '?$/';

    // Check for email.
    if (preg_match($email_pattern, $text)) {
      // Any email-specfic processing could be added here.
      return $text;
    }
    // Check for external URL.
    if (preg_match($external_pattern . $end, $text) || preg_match($external_pattern_www . $end, $text)) {
      // Any URL-specfic processing could be added here.
      return $text;
    }
    // Check for news URL.
    if (preg_match($news_pattern, $text)) {
      // Any news URL-specfic processing could be added here.
      return $text;
    }
  }
  // If we get this far, no exception was found.
  return FALSE;
}


/**
 * Implements hook_form_alter().
 *
 * Here we insert some module-specific options into the search admin form
 * (admin/config/search/settings). We use hook_form_alter() instead of
 * hook_search_admin() as the latter can only be used within modules that
 * declare themselves as a "serach modules" via hook_search_info(). Such
 * modules seem to be intended to allow new content to be searched, as opposed
 * to enabling new global search functioanlity. As a result hook_search_admin()
 * does not seem appropriate.
 */
function punctuation_preprocess_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'search_admin_settings') {
    $form['indexing_settings_punctuation'] = array(
      '#type' => 'fieldset',
      '#title' => t('Punctuation pre-processing settings'),
      '#collapsible' => FALSE,
      );
      $form['indexing_settings_punctuation']['info'] = array(
        '#value' => t('<p><em>Punctuation pre-processing options control how special punctuation characters (such as periods, hyphens, underscores and apostrophes) are treated when they are encountered within word strings during searching and indexing. With pre-processing, search will attempt to identify whether or not special punctuation characters should be treated as word boundaries (e.g., should "word-power" be matched when searching for "word-power" <b>and</b> "word" <b>and</b> "power"  ). This can also be helpful when searching and indexing file attachments that use special punctuation in their descriptions (e.g., "drupal_logo.jpg"). Changing the settings below will cause the site index to be rebuilt.</em></p>'),
        );
      $form['indexing_settings_punctuation']['punctuation_preprocess_url_bypass'] = array(
        '#type' => 'checkbox',
        '#title' => t('Bypass URLs'),
        '#default_value' => variable_get('punctuation_preprocess_url_bypass', FALSE),
        '#description' => t('Do not apply punctuation pre-processing for URLs or email addresses (e.g., "http://drupal.org/some-path" should <b>not</b> be matched when searching for just "drupal", "org", "some" or "path").'),
        );
      $form['indexing_settings_punctuation']['advanced'] = array(
        '#type' => 'fieldset',
        '#title' => t('Advanced punctuation pre-processing options'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        );
        $form['indexing_settings_punctuation']['advanced']['punctuation_preprocess_preg_class_special_punctuation'] = array(
          '#type' => 'textfield',
          '#title' => t('Special punctuation'),
          '#default_value' => variable_get('punctuation_preprocess_preg_class_special_punctuation', PREG_CLASS_SPECIAL_PUNCTUATION),
          '#description' => t('Specify the exact punctution characters that should be pre-processed when encountered in word strings.'),
          );
    $form['#validate'][] = 'punctuation_preprocess_admin_settings_validate';
  }
}


/**
 * Validation callback for the search admin form options.
 */
function punctuation_preprocess_admin_settings_validate($form, &$form_state) {
  $special_punctuation = $form_state['values']['punctuation_preprocess_preg_class_special_punctuation'];
  // Ensure that any "-" entered as special punctuation is listed at the end
  // of the special punctuation list (otherwise is may be handled as a regexp
  // group by the pre-processor).
  if (strstr($special_punctuation, "-")) {
    $special_punctuation = str_replace("-", "", $special_punctuation);
    $special_punctuation = $special_punctuation . "-";
    $form_state['values']['punctuation_preprocess_preg_class_special_punctuation'] = $special_punctuation;
  }
  // Confirm that all special punctuation input is actually punctuation. Note
  // that we do allow empty input here.
  if ($special_punctuation != "" && !preg_match('/^[' . PREG_CLASS_PUNCTUATION_EXTENDED . ']+$/u', $special_punctuation)) {
    form_set_error('punctuation_preprocess_preg_class_special_punctuation', t('It looks like one or more of the characters entered as special punctuation is not a punctuation character.'));
  }
  // If these settings change, the index needs to be rebuilt.
  if (variable_get('punctuation_preprocess_preg_class_special_punctuation', PREG_CLASS_SPECIAL_PUNCTUATION) != $form_state['values']['punctuation_preprocess_preg_class_special_punctuation'] ||
    variable_get('punctuation_preprocess_url_bypass', FALSE) != $form_state['values']['punctuation_preprocess_url_bypass']) {
    drupal_set_message(t('The index will be rebuilt.'));
    search_reindex();
  }
  return $form_state;
}
