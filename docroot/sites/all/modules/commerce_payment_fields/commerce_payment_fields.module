<?php

/**
 * Implements hook_entity_info_alter().
 */
function commerce_payment_fields_entity_info_alter(&$entity_info) {
  $entity_info['commerce_payment_transaction']['fieldable'] = TRUE;
  foreach (commerce_payment_fields_fieldable_payment_methods() as $payment_method) {
    // Convert underscores to hyphens for the menu item argument.
    $method_arg = strtr($payment_method['method_id'], '_', '-');
    $entity_info['commerce_payment_transaction']['bundles'][$payment_method['method_id']] = array(
        'label' => $payment_method['title'],
        'admin' => array(
          'path' => 'admin/commerce/config/payments/' . $method_arg,
          'real path' => 'admin/commerce/config/payments/' . $method_arg,
          'access arguments' => array('administer payment methods'),
        ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function commerce_payment_fields_menu() {
  $items['admin/commerce/config/payments'] = array(
    'title' => 'Payment transaction structure',
    'description' => 'Manage fieldable payment transactions for your store.',
    'page callback' => 'commerce_payment_fields_transaction_types_overview',
    'access arguments' => array('administer customer profile types'),
    'weight' => 0,
    'file' => 'commerce_payment_fields.admin.inc',
  );
  foreach (commerce_payment_fields_fieldable_payment_methods() as $payment_method) {
    // Convert underscores to hyphens for the menu item argument.
    $method_arg = strtr($payment_method['method_id'], '_', '-');
    $items['admin/commerce/config/payments/' . $method_arg] = array(
      'title' => $payment_method['title'],
      'description' => 'Configure general payment transaction settings, fields, and displays.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('commerce_payment_fields_transaction_settings_form', $payment_method['method_id']),
      'access arguments' => array('administer payment methods'),
      'file' => 'commerce_payment_fields.admin.inc',
      //'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    );
    $items['admin/commerce/config/payments/' . $method_arg . '/settings'] = array(
      'title' => 'Settings',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    );
  }

  // Add a menu item for updating fields.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/update'] = array(
      'title' => 'Update',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('commerce_payment_fields_update_payment_form', 3, 5),
      'access callback' => 'commerce_payment_fields_payment_access',
      'access arguments' => array(5),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_INLINE,
      'weight' => 2,
  );

  return $items;
}

/**
 * User access callback for updating payments
 */
function commerce_payment_fields_payment_access($transaction) {
  $payment_method = commerce_payment_method_instance_load($transaction->instance_id);
  if (!empty($payment_method['fieldable'])) {
    // Allow access if the user can update payments on this order.
    return commerce_payment_transaction_access('update', $transaction);
  }
  // Return FALSE if the transaction is not fieldable.
  return FALSE;
}

/**
 * Implements hook_menu_alter().
 */
function commerce_payment_fields_menu_alter(&$items) {
  // Transform the field UI tabs into contextual links.
  foreach (commerce_payment_fields_fieldable_payment_methods() as $payment_method) {
    // Convert underscores to hyphens for the menu item argument.
    $method_arg = strtr($payment_method['method_id'], '_', '-');

    $items['admin/commerce/config/payments/' . $method_arg . '/fields']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
    $items['admin/commerce/config/payments/' . $method_arg . '/display']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
  }
}

/**
* Returns a list of all node types that contain a product reference field.
*
* @return
* An array of node types, keyed by type.
*/
function commerce_payment_fields_fieldable_payment_methods() {
  $list = array();
  foreach (commerce_payment_methods() as $payment_id => $payment_method) {
    if (!empty($payment_method['fieldable'])) {
      $list[$payment_id] = $payment_method;
    }
  }
  ksort($list);
  return $list;
}

/**
 * Form to Update the Payment
 */
function commerce_payment_fields_update_payment_form($form, &$form_state, $order, $transaction) {
  $form_state['order'] = $order;
  $form_state['transaction'] = $transaction;

  // Load and store the payment method instance for this transaction.
  $payment_method = commerce_payment_method_instance_load($transaction->instance_id);
  $form_state['payment_method'] = $payment_method;

  $balance = commerce_payment_order_balance($order);

  if ($balance['amount'] > 0 && $balance['amount'] < $transaction->amount) {
    $default_amount = $balance['amount'];
  }
  else {
    $default_amount = $transaction->amount;
  }

  // Convert the price amount to a user friendly decimal value.
  $default_amount = commerce_currency_amount_to_decimal($default_amount, $transaction->currency_code);

  $description = implode('<br />', array(
    t('Order balance: @balance', array('@balance' => commerce_currency_format($balance['amount'], $balance['currency_code']))),
  ));

  $form['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Confirm %payment amount' , array('%payment' => $payment_method['title'])),
    '#description' => $description,
    '#default_value' => $default_amount,
    '#field_suffix' => check_plain($transaction->currency_code),
    '#size' => 16,
  );

  $form = confirm_form($form,
      t('Update this transaction'),
      'admin/commerce/orders/' . $order->order_id . '/payment',
      '',
      t('Save'),
      t('Cancel'),
      'save'
  );

  $instances = field_info_instances('commerce_payment_transaction', $transaction->payment_method);
  if (!empty($instances)) {
    // Add the field widgets for the profile.
    field_attach_form('commerce_payment_transaction', $transaction, $form, $form_state);
  }

  return $form;
}

/**
 * Validate handler: ensure a valid amount is given.
 */
function commerce_payment_fields_update_payment_form_validate($form, &$form_state) {
  $order = $form_state['order'];
  $transaction = $form_state['transaction'];
  $amount = $form_state['values']['amount'];

  // Ensure a positive numeric amount has been entered for capture.
  if (!is_numeric($amount) || $amount <= 0) {
    form_set_error('amount', t('You must specify a positive numeric amount to capture.'));
  }

  // Ensure the amount is less than or equal to the transaction amount.
  $balance = commerce_payment_order_balance($order);
  if ($amount > commerce_currency_amount_to_decimal($balance['amount'], $balance['currency_code'])) {
    form_set_error('amount', t('You cannot have amount greater than the order amount.'));
  }

  // Fieldable payment transactions.
  if (!empty($form_state['field'])) {
    // Notify field widgets to validate their data.
    field_attach_form_validate('commerce_payment_transaction', $transaction, $form, $form_state);
  }
}

/**
 * Submit handler: update the "offline" payment
 */
function commerce_payment_fields_update_payment_form_submit($form, &$form_state) {
  $transaction = $form_state['transaction'];
  $amount = $form_state['values']['amount'];

  // Update the transaction amount to the actual confirmed amount.
  $transaction->amount = commerce_currency_decimal_to_amount($amount, $transaction->currency_code);

  // Append a updated indication to the result message.
  $transaction->message .= '<br />' . t('Updated: @date', array('@date' => format_date(REQUEST_TIME, 'short')));

  // Fieldable payment transactions.
  if (!empty($form_state['field'])) {
    // Notify field widgets.
    field_attach_submit('commerce_payment_transaction', $transaction, $form, $form_state);
  }

  commerce_payment_transaction_save($transaction);
  drupal_set_message(t('Payment updated successfully.'));

  $form_state['redirect'] = 'admin/commerce/orders/' . $form_state['order']->order_id . '/payment';
}

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 *
 * Use new checkout pane callbacks, for adding the fields to payment details.
 */
function commerce_payment_fields_commerce_checkout_pane_info_alter(&$checkout_panes) {
  $checkout_panes['commerce_payment']['base'] = 'commerce_payment_fields_commerce_payment_pane';
  $checkout_panes['commerce_payment']['module'] = 'commerce_payment_fields';
  $checkout_panes['commerce_payment']['file'] = 'includes/commerce_payment_fields.checkout_pane.inc';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter add payment transaction on order payment terminal.
 * Add the transaction fields for the fieldable payments.
 */
function commerce_payment_fields_form_commerce_payment_order_transaction_add_form_alter(&$form, &$form_state) {
  // If a payment method has already been selected...
  if (!empty($form_state['payment_method'])) {
    $payment_method = $form_state['payment_method'];
    $order = $form_state['order'];
    if (!empty($payment_method['fieldable'])) {
      $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
      $form_state['transaction'] = $transaction;
      $instances = field_info_instances('commerce_payment_transaction', $transaction->payment_method);
      if (!empty($instances)) {
        // Add the field widgets for the profile.
        field_attach_form('commerce_payment_transaction', $transaction, $form['payment_terminal'], $form_state);
      }
      // Add submit and validate handlers.
      $form['#validate'][] = 'commerce_payment_fields_commerce_payment_order_transaction_add_validate';
      $form['#submit'] = array_merge(array('commerce_payment_fields_commerce_payment_order_transaction_add_submit'), $form['#submit']);
    }
  }
}

/**
 * Validation callback for commerce_payment_order_transaction_add_form().
 */
function commerce_payment_fields_commerce_payment_order_transaction_add_validate($form, &$form_state) {
  $transaction = $form_state['transaction'];

  // Fieldable payment transactions.
  if (!empty($form_state['field'])) {
    // Notify field widgets to validate their data.
    field_attach_form_validate('commerce_payment_transaction', $transaction, $form, $form_state);
  }
}

/**
 * Submit callback for commerce_payment_order_transaction_add_form().
 *
 * Build the transaction entity with the fields data and pass the transaction
 * object as pane form value.
 */
function commerce_payment_fields_commerce_payment_order_transaction_add_submit($form, &$form_state) {
  $transaction = $form_state['transaction'];
  // Fieldable payment transactions.
  if (!empty($form_state['field'])) {
    // Notify field widgets.
    field_attach_submit('commerce_payment_transaction', $transaction, $form, $form_state);
  }

  $form_state['values']['payment_details']['transaction'] = $transaction;
}
