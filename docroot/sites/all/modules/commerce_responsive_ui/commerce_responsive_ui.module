<?php

/**
 * @file
 * Defines features and functions common to the Commerce Responsive UI Module.
 */

/**
 * Implements hook_views_api().
 */
function commerce_responsive_ui_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_responsive_ui') . '/includes/views',
    'template path' => drupal_get_path('module', 'commerce_responsive_ui') . '/includes/views',
  );
}

/**
 * Implements hook_menu()
 */
function commerce_responsive_ui_menu() {
  $items = array();

  $items['admin/commerce/config/responsive-ui'] = array(
    'title' => 'Commerce Responsive UI',
    'description' => 'Provides replacement interfaces for the parts of Drupal Commerce that are table dependent and non-mobile responsive by default.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_responsive_ui_admin_settings'),
    'access arguments' => array('administer checkout'),
    'file' => 'includes/commerce_responsive_ui.admin.inc',
    'weight' => 55,
    'menu_name' => 'management',
  );

  return $items;
}

/**
 * Implements hook_menu_alter()
 */
function commerce_responsive_ui_menu_alter(&$items) {
  if (isset($items['cart'])) {
    $items['cart'] = array(
      'page callback' => 'commerce_responsive_ui_commerce_cart_view',
      'file' => 'commerce_responsive_ui.pages.inc',
      'file path' => drupal_get_path('module', 'commerce_responsive_ui'),
    ) + $items['cart'];
  }
}

/**
 * Returns an array of eligible cart views suitable for an HTML options list
 * Borrowed from commerce_cart_view_overrides()... :)
 *
 * @return
 *   The array of view names, keyed by the view machine name.
 */
function commerce_responsive_ui_cartoptions_list() {
  $options = array();
  foreach (views_get_all_views() as $view_name => $view) {
    if ($view_name != 'commerce_cart_form' && strpos($view_name, 'commerce_cart_form_') !== 0) {
      continue;
    }

    if ($view->base_table == 'commerce_order' && !empty($view->display['default']) &&
        !empty($view->display['default']->display_options['arguments'])) {

      $first_arg = reset($view->display['default']->display_options['arguments']);
      if (strpos($first_arg['id'], 'order_id') === 0) {
        $options[$view_name] = isset($view->human_name) ? check_plain($view->human_name) : $view_name;
      }
    }
  }

  // Move the default view to the top
  if (isset($options['commerce_cart_form'])) {
    $options = array('commerce_cart_form' => t('!label (default)', array('!label' => $options['commerce_cart_form']))) + $options;
  }

  return $options;
}

/**
 * Implements hook_theme_registry_alter() to override commerce_checkout_theme()
 */
function commerce_responsive_ui_theme_registry_alter(&$theme_registry) {
  // must unset the following three things to override the _theme() function
  $theme_registry['commerce_checkout_review']['theme path'];
  unset($theme_registry['commerce_checkout_review']['file']);
  unset($theme_registry['commerce_checkout_review']['function']);
  unset($theme_registry['commerce_checkout_review']['includes']);
  $theme_registry['commerce_checkout_review']['path'] = drupal_get_path('module', 'commerce_responsive_ui') . '/theme';
  $theme_registry['commerce_checkout_review']['template'] =  'commerce-checkout-review';
}

/**
 * Preprocess function for theme_commerce_checkout_review.
 * @see commerce-checkout-review.tpl.php
 */
function commerce_responsive_ui_preprocess_commerce_checkout_review(&$variables) {
  $variables['classes_array'][] = 'commerce-checkout-review-pane';
  $variables['classes_array'][] = 'clearfix';
  $variables['theme_hook_suggestions'][] = 'commerce-checkout-review';

  $panes = array();
  foreach ($variables['form']['#data'] as $pane_id => $data) {
    $panes[$pane_id] = array(
      'title' => $data['title'],
      'data' => $data['data'],
    );
  }
  $variables['panes'] = $panes;
  $variables['classes'] = implode(', ',$variables['classes_array']);
}

/**
 * Implements hook_form_alter()
 *
 * Attaches the CSS to forms that include responsive views.
 *
 * Best: Attach CSS via Form API
 */
function commerce_responsive_ui_form_alter(&$form, &$form_state, $form_id) {
  // Cart
  // The path /cart == "views_form_commerce_cart_form_responsive_default"
  // But we support any form that starts with the same first part of the id
  if (strpos($form_id, 'views_form_commerce_cart_form_responsive') !== FALSE) {
    $form['#attached']['css'][] = drupal_get_path('module', 'commerce_responsive_ui') . '/theme/commerce_responsive_ui.css';
    $form['output']['#markup'] = '<div class="table">'.$form['output']['#markup']. '</div>';
  }
  // Checkout
  if (strpos($form_id, 'commerce_checkout')!== FALSE) {
    $checkout_view = variable_get('commerce_cart_contents_pane_view', 'commerce_cart_summary|default');
    if (strpos($checkout_view, 'commerce_cart_summary_responsive') !== FALSE) {
      // First Checkout Page
      if (strpos($form_id, 'commerce_checkout_form_checkout') !== FALSE) {
        $form['#attached']['css'][] = drupal_get_path('module', 'commerce_responsive_ui') . '/theme/commerce_responsive_ui.css';
      }
      // Review Page
      if (strpos($form_id, 'commerce_checkout_form_review') !== FALSE) {
        $form['#attached']['css'][] = drupal_get_path('module', 'commerce_responsive_ui') . '/theme/commerce_responsive_ui.css';
      }
    }
  }
}

/**
 * Implements hook_field_attach_view_alter()
 *
 * Attaches CSS to any rendered Order with the line items field.
 *
 * Good: Attach CSS via field rendering array
 */
function commerce_responsive_ui_field_attach_view_alter(&$output, $context) {
  if ($context['entity_type'] == "commerce_order" && array_key_exists('commerce_line_items',$output)) {
    $output['#attached']['css'][] = drupal_get_path('module', 'commerce_responsive_ui') . '/theme/commerce_responsive_ui.css';
  }
}

/**
 * Implements hook_ctools_render_alter().
 */
function commerce_responsive_ui_ctools_render_alter(&$info, &$page, &$context) {
  // If Commerce Page Manager is being used to render order pages, we cannot
  // depend on hook_field_attach_view_alter() to add the necessary CSS on order
  // view pages. We add it through this hook instead.
  if (module_exists('commerce_page_manager')) {
    if ($context['task']['name'] == 'commerce_order_user_view') {
      // Converting $info['content'] to an array here ensures it will propagate
      // with its #attached property through the return value of
      // ctools_context_handler_render_handler().
      $info['content'] = array(
        '#markup' => $info['content'],
        '#attached' => array(
          'css' => array(
            drupal_get_path('module', 'commerce_responsive_ui') . '/theme/commerce_responsive_ui.css',
          ),
        ),
      );
    }
  }
}

/**
 * Implements hook_views_pre_render()
 *
 * Not good, only if you have to: Attach CSS using drupal_add_css()
 */
function commerce_responsive_ui_views_pre_render(&$view) {
  if (strpos($view->name, 'commerce_user_orders_responsive') !== FALSE) {
    drupal_add_css(drupal_get_path('module', 'commerce_responsive_ui') . '/theme/commerce_responsive_ui.css');
  }
}
