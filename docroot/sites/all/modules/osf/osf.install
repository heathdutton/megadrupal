<?php
/**
 * @file
 * Install, update and uninstall functions for the OSF for Drupal module.
 * @file osf.install
 * @brief Procedures to execute when the module get installed/uninstalled
 *
 * @author Frederick Giasson, Structured Dynamics LLC.
 *
 */
define('OSF_MINIMUM_PHP_MEMORY', '64M');

use \StructuredDynamics\osf\php\api\ws\search\SearchQuery;

/**
 * @ingroup OSFForDrupalModule 
 */
//@{

/** 
 * Implements hook_install().
 *
 * @brief Instantiation of hook_install
 * 
 * @author Frederick Giasson, Structured Dynamics LLC.
 */
function osf_install() {
}


/** 
 * @brief Instantiation of hook_uninstall
 * 
 * @author Frederick Giasson, Structured Dynamics LLC.
 * 
 * @todo Improve this method to find all the variables within the varitable table instead of using a fixed count.
 */
function osf_uninstall() {
  // Make sure to clean the instance out of possibly deprecated variables
  variable_del("Linked-Dataset-Registry");
  variable_del("WSF-Registry");
  variable_del("SID-Registry");
  variable_del("Datasets-Registry");  
}

/**
 * Implements hook_requirements().
 *
 * Ensure that the OSF-WS-PHP-API is around
 */
function osf_requirements($phase) {
  $requirements = array();
  $t = get_t();

  $requirements['osf_phpapi'] = array(
    'title' => $t('OSF-WS-PHP-API'),
  );

  if(function_exists('libraries_detect'))
  {
    $lib = libraries_detect('OSF-WS-PHP-API');
    if ($lib['installed']) {
      $requirements['osf_phpapi']['value'] = $t('Installed');
      $requirements['osf_phpapi']['severity'] = REQUIREMENT_OK;
    }
    else {
      $requirements['osf_phpapi']['value'] = $t('Missing');
      $requirements['osf_phpapi']['description'] = $t('You must download it from <a href="https://github.com/structureddynamics/OSF-WS-PHP-API/downloads" target="_blank">Github</a> and install it in sites/all/libraries or sites/[sitename]/libraries');
      $requirements['osf_phpapi']['severity'] = REQUIREMENT_WARNING;
    }
  }

  $memory_limit = ini_get('memory_limit');
  $requirements['osf_memory_limit'] = array(
    'title' => $t('OSF for Drupal PHP memory limit'),
    'value' => $memory_limit == -1 ? t('-1 (Unlimited)') : $memory_limit,
  );
  if ($memory_limit && $memory_limit != -1 && parse_size($memory_limit) < parse_size(OSF_MINIMUM_PHP_MEMORY)) {
    $description = $t('Consider increasing your PHP memory limit to %minimum_php_memory to help prevent errors when running the grammar parser.', array('%minimum_php_memory' => OSF_MINIMUM_PHP_MEMORY));

    if ($php_ini_path = get_cfg_var('cfg_file_path')) {
      $description .= ' ' . $t('Increase the memory limit by editing the memory_limit parameter in the file %configuration-file and then restart your web server (or contact your system administrator or hosting provider for assistance).', array('%configuration-file' => $php_ini_path));
    }
    else {
      $description .= ' ' . $t('Contact your system administrator or hosting provider for assistance with increasing your PHP memory limit.');
    }

    $requirements['osf_memory_limit']['description'] = $description;
    $requirements['osf_memory_limit']['severity'] = REQUIREMENT_WARNING;
  }

  $requirements['osf_configured_wsf'] = array(
    'title' => $t('OSF for Drupal Networks Tool'),
    'value' => ' ',
  );
        
        
  if(function_exists('osf_configure_get_default_endpoint'))
  {
    $endpoints = osf_configure_get_default_endpoint();
    if(empty($endpoints)) {
      $requirements['osf_configured_wsf']['value'] = $t('Register OSF Network');
      $requirements['osf_configured_wsf']['description'] = $t('<a href="/admin/config/osf/networks_and_dataset/endpoints" target="_blank">You must register at least one default OSF network</a> in order to use OSF for Drupal');
      $requirements['osf_configured_wsf']['severity'] = REQUIREMENT_WARNING;          
    }
    else {
      $requirements['osf_configured_wsf']['value'] = $t(count(osf_configure_get_endpoints()).' OSF networks registered');
      $requirements['osf_configured_wsf']['severity'] = REQUIREMENT_OK;      
    }
  }

  return $requirements;
}