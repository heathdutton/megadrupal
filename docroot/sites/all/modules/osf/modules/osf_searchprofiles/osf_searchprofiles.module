<?php

/**
 * @file 
 */

use \StructuredDynamics\osf\php\api\ws\search\SearchQuery;
use \StructuredDynamics\osf\php\api\ws\search\ExtendedFiltersBuilder;
require_once 'osf_searchprofiles.topic.inc';

/**
 * Implements hook_permission().
 */
function osf_searchprofiles_permission() {
  return array(
    'administer search profiles' => array(
      'title' => t('Administer search profiles'),
      'description' => t('Perform administration tasks for Struct Search Profiles'),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function osf_searchprofiles_ctools_plugin_api($module, $api) {
  if ($module == "osf_searchprofiles" && $api == "osf_searchprofiles") {
    return array("version" => "1");
  }
  elseif ($module == 'boxes' && $api == 'plugins') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function osf_searchprofiles_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Implements hook_boxes_plugins().
 */
function osf_searchprofiles_boxes_plugins() {
  $info = array();
  $path = drupal_get_path('module', 'osf_searchprofiles') . '/plugins';
  $info['sprofile'] = array(
    'title' => t('Search Profile'),
    'handler' => array(
      'parent' => 'box',
      'class' => 'osf_searchprofiles_box',
      'file' => 'sprofile_boxes.inc',
      'path' => $path,
    ),
  );
  return $info;
}

/**
 * Implements hook_init().
 */
function osf_searchprofiles_init() {
  // Build the topics list for this page.
  osf_searchprofiles_build_topics_list();
}

/**
 * Return a list of sprofiles for use in select form elements.
 */
function osf_searchprofiles_sprofile_list() {
  ctools_include('export');
  $objects = ctools_export_load_object('osf_searchprofiles', 'all');

  // Extract the list from the objects.
  // TODO cache
  $list = array();
  foreach ($objects as $object) {
    $list[$object->name] = $object->description;
  }

  return $list;
}

/**
 * Load a SP
 */
function osf_searchprofiles_load($id) {
  return ctools_export_load_object('osf_searchprofiles', $id);
}

/**
 * Given a search profile, returns rendered results
 */
function osf_searchprofiles_render($sprofile, $block_settings) {
  $results = osf_searchprofiles_build_query($sprofile, $block_settings);
  return osf_searchprofiles_render_results($sprofile, $results);
}



/**
 * Builds and executes a search query from a search profile object.
 */
function osf_searchprofiles_build_query($sprofile_name, $block_settings) {
  
  // Setup the OSF network  
  $defaultEndpoint = osf_configure_get_endpoint_by_uri(osf_searchapi_get_endpoint_uri_from_server());

  $sprofile = ctools_export_load_object('osf_searchprofiles', $type = 'names', $args = array($sprofile_name));
  
  if (!empty($sprofile)) {
    $sprofile = $sprofile[$sprofile_name];
  }

  if (!empty($block_settings['sp_settings']['output_type']) && $block_settings['sp_settings']['output_type'] == 'results') {
    $queryterms = '';

    // Check if a query string is not provided in the block
    if(!empty($block_settings['sp_settings']['query']))
    {
      $queryterms = $block_settings['sp_settings']['query'];
    }
    else
    {
      // Otherwise if we have to try to get it from the context, then we first check if
      // there are topics defined for that page
      if ($block_settings['context']) 
      {
        $page_topics = array_keys(osf_searchprofiles_get_page_topics());
        
        // a page can have multiple topics. For now, let's just use OR to separate them.
        if ($page_topics) 
        {
          $queryterms = implode(" OR ", $page_topics);
        }
        else
        {
          // we try to get it from its page title
          $node = menu_get_object();
          
          if(isset($node->title))
          {
            $queryterms = $node->title;
          }
        }
      }      
    }
    
    if(!empty($queryterms))
    {
      // If a specific term is defined in the search profile block, we replace that query term
      // in the search profile 
      $sprofile->settings['query'] = array($queryterms);
    }
        
    module_load_include('inc', 'search_api_page', 'search_api_page.pages');
    $page = search_api_page_load('osf_search');

    $limit = $block_settings['sp_settings']['items'];
    $offset = pager_find_page() * $limit;
    $options = array(
      'search id' => 'search_api_page:' . $page->path,
      'parse mode' => $page->options['mode'],
      'search_profile' => $sprofile,
      'search_profile_block' => $block_settings,
    );

    $query = search_api_query($page->index_id, $options)
      ->keys($queryterms)
      ->range($offset, $limit);
      
    // Put the proper limits and offsets in the search profile
    $sprofile->settings['page'] = array($offset);
    $sprofile->settings['items'] = array($limit);
      
    if (!empty($page->options['fields'])) {
      $query->fields($page->options['fields']);
    }
    
    $results = $query->execute();

    $ret['results']['#theme'] = 'search_api_page_results';
    $ret['results']['#index'] = search_api_index_load($page->index_id);
    $ret['results']['#results'] = $results;
    $ret['results']['#view_mode'] = isset($page->options['view_mode']) ? $page->options['view_mode'] : 'search_api_page_result';
    $ret['results']['#keys'] = $queryterms;

    if ($results['result count'] > $page->options['per_page']) {
      pager_default_initialize($results['result count'], $block_settings['sp_settings']['items']);
      $ret['pager']['#theme'] = 'pager';
      $ret['pager']['#quantity'] = 9;
    }

    $ret['full_results'] = TRUE;
    
    return $ret;    
  }


  // Create the SearchQuery object
  $search = new SearchQuery($defaultEndpoint->uri, $defaultEndpoint->app_id, $defaultEndpoint->api_key, osf_configure_get_current_user_uri());
  
  // Configure the interface to use
  $search->sourceInterface(variable_get("osf_searchapi_settings_interface_name", 'default'))
         ->sourceInterfaceVersion(variable_get("osf_searchapi_settings_interface_version", ''));

  // Add the settings from the sprofile to the search query
  foreach ($sprofile->settings as $setting => $value){

    if ($setting == 'extendedFilters') {
      $extendedFiltersBuilder = new ExtendedFiltersBuilder();
      $extendedFilter = $value[0];
      $filterType = key($extendedFilter);
      $filterVals = $extendedFilter[$filterType];
      $extendedFiltersBuilder->$filterType($filterVals[0], $filterVals[1]);
      $search->extendedFilters($extendedFiltersBuilder->getExtendedFilters());
      continue;
    }

    // If it's an empty array
    if (empty($value)) {
      $search->$setting;
    }
    elseif (is_array(reset($value))) {
      // Otherwise, if the first item in $value is an array, it's multiple methods
      foreach ($value as $value_item) {
        call_user_func_array(array($search, $setting), $value_item);
      }
    }
    else {
      // And otherwise, it's one method
      call_user_func_array(array($search, $setting), $value);
    }
  }
  
  // Add in block settings, possibly overriding some settings from above.
  foreach ($block_settings['sp_settings'] as $block_setting => $value) {
    if (method_exists($search, $block_setting)) {
      $search->$block_setting($value);
    }
  }
  
  // However, if we're getting query from page topic, use that
  if ($block_settings['context']) {
    $page_topics = array_keys(osf_searchprofiles_get_page_topics());
    // a page can have multiple topics. For now, let's just use OR to separate them.
    if ($page_topics) {
      $topic = implode(" OR ", $page_topics);
      $search->query($topic);
    }
  }

  // Send the query.
  $search->lang(get_lang('en'))
         ->send(new DrupalQuerierExtension());

  // Return the resultset, or FALSE if it didn't succeed.
  if ($search->isSuccessful()) {
    return $search->getResultset()->getResultset();
  } else {
    return FALSE;
  }
}

/**
 * Theme and render search profile results
 */
function osf_searchprofiles_render_results($sprofile, $results) {
  if($results['full_results']) {
    return @drupal_render($results); 
  }

  // Placeholder render functionality
  $vars = array(
    'title' => '',
    'type' => 'ul',
    'items' => array(),
    'attributes' => array(),
  );
  
  // Get rid of non-dataset results for now
  if (isset($results['unspecified'])) {
    unset($results['unspecified']);
  }
  if ($osf_searchprofiles_url_field = variable_get('osf_searchprofiles_url_field', FALSE)) {
    foreach ($results as $dataset) {
      foreach ($dataset as $uri => $data) {
        if (is_array($data)) {
          $title = isset($data['prefLabel']) ? $data['prefLabel'] : $uri;
          $url = $data[$osf_searchprofiles_url_field][0]['value'];
          $vars['items'][] = l($title, $url);
        }
      }
    }
  }
  else {
    global $base_url; 
    
    if(!empty($results))
    {
      foreach ($results as $dataset) {
        foreach ($dataset as $uri => $data) {
          if (is_array($data)) {
            $title = isset($data['prefLabel']) ? $data['prefLabel'] : $uri;
            $url = $base_url.'/resources/'.urlencode(urlencode($uri));
            $vars['items'][] = l($title, $url);
          }
        }
      }
    }
  }  
  return theme_item_list($vars);
}

function osf_searchprofiles_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (strpos($root_path, 'admin/config/search/profiles') !== FALSE) {
    $data['actions']['output'][0]['#link']['title'] = t('Create New Search Profile');
    $data['actions']['output'][0]['#link']['href'] = 'osf/querybuilder';
  }
}

