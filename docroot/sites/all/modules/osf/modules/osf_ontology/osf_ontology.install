<?php
   
  use \StructuredDynamics\osf\php\api\ws\ontology\read\OntologyReadQuery;
  use \StructuredDynamics\osf\php\api\ws\ontology\read\GetLoadedOntologiesFunction;

  /**
   * Implements hook_requirements().
   */
  function osf_ontology_requirements($phase) {
    
    $requirements = array();
    
    $t = get_t();
    
    $requirements['osf_ontology_configure'] = array(
      'title' => $t('OSF Ontology'),
      'value' => ' ',
    );
    
    $requirements['osf_ontology_load'] = array(
      'title' => $t('OSF Ontology'),
      'value' => ' ',
    );
    
    $requirements['osf_ontology_underlying_structures'] = array(
      'title' => $t('OSF Ontology'),
      'value' => ' ',
    );
    
    $endpoints = osf_configure_get_default_endpoint();
    if(empty($endpoints))
    {
      $requirements['osf_ontology_configure']['value'] = $t('Configure a default OSF network');
      $requirements['osf_ontology_configure']['description'] = $t('<a href="/admin/config/osf/networks_and_dataset/endpoints" target="_blank">You must configure a default OSF network</a> in order to properly use OSF Ontology');
      $requirements['osf_ontology_configure']['severity'] = REQUIREMENT_WARNING;          
    }
    else
    {
      $requirements['osf_ontology_configure']['value'] = $t('Configured');
      $requirements['osf_ontology_configure']['severity'] = REQUIREMENT_OK;      
      
      $loadedOntologies = array();
      
      $defaultEndpoint = current(osf_configure_get_default_endpoint());
      
      $ontologyRead = new OntologyReadQuery($defaultEndpoint->uri, $defaultEndpoint->app_id, $defaultEndpoint->api_key, osf_configure_get_current_user_uri());
      
      $ontologyRead->mime("text/xml");
      
      $getLoadedOntologiesFunction = new GetLoadedOntologiesFunction();      
      
      $getLoadedOntologiesFunction->modeUris();
      
      $ontologyRead->getLoadedOntologies($getLoadedOntologiesFunction);
      
      $ontologyRead->send(new DrupalQuerierExtension());
      
      if(!$ontologyRead->isSuccessful())
      {
        drupal_set_message(t("Can't get the list of loaded ontologies: [@error] @errorMsg - @errorDescription", 
                           array("@error" => $ontologyRead->getStatus(),
                                 "@errorMsg" => $ontologyRead->getStatusMessage(),
                                 "@errorDescription" => $ontologyRead->getStatusMessageDescription())), 
                           "error", 
                           TRUE);        
      }
      else
      {
        $xml = new ProcessorXML();
        $xml->loadXML($ontologyRead->getResultset());

        $records = $xml->getSubjectsByType("owl:Ontology");

        foreach ($records as $record) {
          array_push($loadedOntologies, $xml->getURI($record));
        }
        
        if(count($loadedOntologies) <= 0)
        {
          $requirements['osf_ontology_load']['value'] = $t('Load Ontologies');
          $requirements['osf_ontology_load']['description'] = $t('<a href="/osf/ontology/" target="_blank">You must load ontologies</a> in order to properly use OSF for Drupal');
          $requirements['osf_ontology_load']['severity'] = REQUIREMENT_WARNING;    
        }
        else
        {
          $requirements['osf_ontology_load']['value'] = $t('Ontologies Loaded');
          $requirements['osf_ontology_load']['severity'] = REQUIREMENT_OK;            
        }
      }  
    }

    $cache_path = rtrim(variable_get('osf_OntologySettings_ontologies_cache_folder', '/tmp'), '/') . '/';
    if(!file_exists($cache_path . 'classHierarchySerialized.srz') ||
       !file_exists($cache_path . 'propertyHierarchySerialized.srz'))
    {
      $requirements['osf_ontology_underlying_structures']['value'] = $t('Generate Underlying Structures');
      $requirements['osf_ontology_underlying_structures']['description'] = $t('<a href="/osf/ontology/" target="_blank">You must generate the underlying ontological structures by clicking the "Generate All" button once the ontologies are loaded</a> in order to properly use OSF for Drupal');
      $requirements['osf_ontology_underlying_structures']['severity'] = REQUIREMENT_WARNING;    
    }
    else
    {
      $requirements['osf_ontology_underlying_structures']['value'] = $t('Underlying structures generated');
      $requirements['osf_ontology_underlying_structures']['severity'] = REQUIREMENT_OK;            
    }
    
    return $requirements;
  }  
  
  /**
   * Implements hook_schema().
   */
  function osf_ontology_schema() {
    $schema = array();  
    
    // Create tables used for caching resource_type entities
    $cache_schema = drupal_get_schema_unprocessed('system', 'cache');
    
    $schema["cache_loaded_ontologies"] = $cache_schema;
    $schema["cache_loaded_ontologies"]['description'] = "Cache table used to store loaded ontologies references.";
    

    return $schema;    
  }

?>
