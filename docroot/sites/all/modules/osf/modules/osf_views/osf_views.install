<?php   

/**
* Implements hook_install()
* 
* Perform setup tasks when the module is installed.
*
* If the module implements hook_schema(), the database tables will
* be created before this hook is fired.
*
* Implementations of this hook are by convention declared in the module's
* .install file. The implementation can rely on the .module file being loaded.
* The hook will only be called the first time a module is enabled or after it
* is re-enabled after being uninstalled. The module's schema version will be
* set to the module's greatest numbered update hook. Because of this, any time
* a hook_update_N() is added to the module, this function needs to be updated
* to reflect the current version of the database schema.
*
* See the Schema API documentation at
* @link http://drupal.org/node/146843 http://drupal.org/node/146843 @endlink
* for details on hook_schema and how database tables are defined.
*
* Note that since this function is called from a full bootstrap, all functions
* (including those in modules enabled by the current page request) are
* available when this hook is called. Use cases could be displaying a user
* message, or calling a module function necessary for initial setup, etc.
*
* Please be sure that anything added or modified in this function that can
* be removed during uninstall should be removed with hook_uninstall().
*
* @see hook_schema()
* @see module_enable()
* @see hook_enable()
* @see hook_disable()
* @see hook_uninstall()
* @see hook_modules_installed()
*/ 
function osf_views_install() 
{
}
 
/**
* Implements hook_enable()
* 
* Perform necessary actions after module is enabled.
*
* The hook is called every time the module is enabled. It should be
* implemented in the module's .install file. The implementation can
* rely on the .module file being loaded.
*
* @see module_enable()
* @see hook_install()
* @see hook_modules_enabled()
*/ 
function osf_views_enable() 
{
}
 
/**
* Implements hook_uninstall()
* 
* Remove any information that the module sets.
*
* The information that the module should remove includes:
* - variables that the module has set using variable_set() or system_settings_form()
* - modifications to existing tables
*
* The module should not remove its entry from the {system} table. Database
* tables defined by hook_schema() will be removed automatically.
*
* The uninstall hook must be implemented in the module's .install file. It
* will fire when the module gets uninstalled but before the module's database
* tables are removed, allowing your module to query its own tables during
* this routine.
*
* When hook_uninstall() is called, your module will already be disabled, so
* its .module file will not be automatically included. If you need to call API
* functions from your .module file in this hook, use drupal_load() to make
* them available. (Keep this usage to a minimum, though, especially when
* calling API functions that invoke hooks, or API functions from modules
* listed as dependencies, since these may not be available or work as expected
* when the module is disabled.)
*
* @see hook_install()
* @see hook_schema()
* @see hook_disable()
* @see hook_modules_uninstalled()
*/ 
function osf_views_uninstall() 
{
  // Delete the data properties labels cache
  variable_del("osf_views_datatypeproperty_labels");
  
  // Delete the object properties labels cache
  variable_del("osf_views_objectproperty_labels");
  
  // Delete the annotation properties labels cache
  variable_del("osf_views_annotationproperty_labels");
  
  // Delete the undefined properties labels cache
  variable_del("osf_views_undefinedproperty_labels");
  
  // Delete the classes labels cache
  variable_del("osf_views_class_labels");
}

/**
* Implements hook_disable()
* 
* Perform necessary actions before module is disabled.
*
* The hook is called every time the module is disabled. It should be
* implemented in the module's .install file. The implementation can rely
* on the .module file being loaded.
*
* @see hook_uninstall()
* @see hook_modules_disabled()
*/ 
function osf_views_disable() 
{ 
}


/**
 * Implements hook_requirements().
 *
 * Ensure that the OSF PHP API is around
 */
function osf_views_requirements($phase) {
  
  $requirements = array();
  
  $t = get_t();
  
  $requirements['osf_views_sync_ontologies'] = array(
    'title' => $t('OSF Views Connector'),
    'value' => ' ',
  );
  
  $annotationPropertyLabels = variable_get("osf_views_annotationproperty_labels", NULL);
  $objectPropertyLabels = variable_get("osf_views_objectproperty_labels", NULL);
  $classLabels = variable_get("osf_views_class_labels", NULL);
  $datatypePropertyLabels = variable_get("osf_views_datatypeproperty_labels", NULL);
  $undefinedPropertyLabels = variable_get("osf_views_undefinedproperty_labels", NULL);
  
  if($annotationPropertyLabels === NULL || 
     $objectPropertyLabels === NULL ||
     $datatypePropertyLabels === NULL ||
     $undefinedPropertyLabels === NULL)
  {
    $requirements['osf_views_sync_ontologies']['value'] = $t('Synchronize Ontologies');
    $requirements['osf_views_sync_ontologies']['description'] = $t('<a href="/admin/config/osf/views" target="_blank">You must synchronize the ontologies structures</a> in order to use Views for OSF');
    $requirements['osf_views_sync_ontologies']['severity'] = REQUIREMENT_WARNING;
  }
  else
  {    
    $throwError = FALSE;
    foreach($annotationPropertyLabels as $network => $labels)
    {
      if(count($labels) == 0)
      {
        $throwError = TRUE;
      }      
    }
    
    if($throwError)
    {
      foreach($objectPropertyLabels as $network => $labels)
      {
        if(count($labels) == 0)
        {
          $throwError = TRUE;
        }      
      }
    }    
    
    if($throwError)
    {
      foreach($classLabels as $network => $labels)
      {
        if(count($labels) == 0)
        {
          $throwError = TRUE;
        }      
      }
    }    
    
    if($throwError)
    {
      foreach($datatypePropertyLabels as $network => $labels)
      {
        if(count($labels) == 0)
        {
          $throwError = TRUE;
        }      
      }
    }    
          
    if($throwError)
    {
      foreach($undefinedPropertyLabels as $network => $labels)
      {
        if(count($labels) == 0)
        {
          $throwError = TRUE;
        }      
      }
    }  
    
    if(!$throwError)
    {
      $requirements['osf_views_sync_ontologies']['value'] = $t('Ontologies Synchronized');
      $requirements['osf_views_sync_ontologies']['severity'] = REQUIREMENT_OK;
    }
    else
    {
      $requirements['osf_views_sync_ontologies']['value'] = $t('Synchronize Ontologies');
      $requirements['osf_views_sync_ontologies']['description'] = $t('<a href="/osf/ontologies/" target="_blank">Make sure ontologies are loaded in OSF Ontology</a> and <a href="/admin/config/osf/views" target="_blank">synchronize the ontologies structures</a> in order to use Views for OSF');
      $requirements['osf_views_sync_ontologies']['severity'] = REQUIREMENT_WARNING;      
    }
  }

  return $requirements;
}