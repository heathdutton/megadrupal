<?php

use \StructuredDynamics\osf\framework\Namespaces;
use \StructuredDynamics\osf\framework\Resultset;
use \StructuredDynamics\osf\framework\Subject;
use \StructuredDynamics\osf\php\api\ws\auth\lister\AuthListerQuery;
use \StructuredDynamics\osf\php\api\ws\auth\registrar\access\AuthRegistrarAccessQuery;
use \StructuredDynamics\osf\php\api\framework\CRUDPermission;
use \StructuredDynamics\osf\php\api\ws\dataset\read\DatasetReadQuery;

/**
 * @file
 * Synchronize the Drupal's groups, users and permissions with OSF's internal access permissions mechanism.
 */ 

/**
* implements hook_permission()
*/
function osf_permissions_permission()
{
  $datasetPermissions = array();

  $endpoints = osf_configure_get_endpoints(NULL, FALSE, TRUE);
  
  $colors = array("E6E6FA", "FFC0CB", "90EE90", "DDA0DD", "F08080", "FFFFE0", "F0FFF0",
                  "B0E0E6", "FF7F50", "F5F5DC", "BDB76B", "48D1CC", "BC8F8F", "C0C0C0",
                  "F4A460", "F0E68C", "FFF0F5", "FFE4B5", "7FFFD4", "FFD700", "DA70D6",
                  "CD5C5C", "F5F5F5", "B0C4DE", "F4A460",);
  
  foreach($endpoints as $endpoint)
  {
    $datasetRead = new DatasetReadQuery($endpoint->uri, $endpoint->app_id, $endpoint->api_key, osf_configure_get_first_user_uri());

    $datasetRead->uri('all')
                ->send(new DrupalQuerierExtension());
    
    if(!$datasetRead->isSuccessful()) {
      drupal_set_message(
        t('AuthListerQuery query error [%status] %msg (%msg_desc).',
          array(
            '%status' => $datasetRead->getStatus(),
            '%msg' => $datasetRead->getStatusMessage(),
            '%msg_desc' => $datasetRead->getStatusMessageDescription(),
          )
        ),
        'error'
      );
      return;
    }

    $endpointLabel = db_query('SELECT label FROM {osf_configure_endpoints} WHERE uri = :uri', 
                               array(':uri' => $endpoint->uri))->fetchField();
    
    $endpointSCEID = db_query('SELECT sceid FROM {osf_configure_endpoints} WHERE uri = :uri', 
                               array(':uri' => $endpoint->uri))->fetchField();


    
    // Get back the resultset returned by the endpoint
    $resultset = $datasetRead->getResultset()->getResultset();
    
    $ontologiesIndex = variable_get('osf_permissions_ontologies_index', array());
    
    $nbColors = 0;
    
    if(isset($resultset['unspecified']))
    {
      foreach($resultset['unspecified'] as $datasetURI => $dataset)
      {
        $isOntology = filter_var($resultset['unspecified'][$datasetURI]['http://purl.org/ontology/wsf#holdOntology']['0']['value'], FILTER_VALIDATE_BOOLEAN);
        
        $datasetIDs = db_query('SELECT scdid, sceid FROM {osf_configure_datasets} WHERE uri = :uri', 
                               array(':uri' => $datasetURI))->fetchObject();
                               
        if(!isset($ontologiesIndex[md5($datasetURI)]))
        {
          $ontologiesIndex[md5($datasetURI)] = $datasetURI;
        }
        
        if($isOntology || isset($datasetIDs->scdid))
        {
          $permissionID = 'create '.($isOntology ? 'ontology' : 'dataset').' '.($isOntology ? md5($datasetURI) : $datasetIDs->scdid).' '.$endpointSCEID;
          
          $datasetPermissions[$permissionID] = array('title' => t('<table style="background-color: #'.$colors[$nbColors].'">
                                                                     <tr>
                                                                       <td width="130px">'.($isOntology ? t('Ontology') : t('Dataset')).':</td>
                                                                       <td><b>'.$dataset['prefLabel'].'</b></td>
                                                                     </tr>                                                                   
                                                                     <tr>
                                                                       <td width="130px">'.t('Endpoint:').'</td>
                                                                       <td><b>'.$endpointLabel.'</b></td>
                                                                     </tr>                                                                   
                                                                     <tr>
                                                                       <td width="130px">'.t('Access Permission:').'</td>
                                                                       <td><b>'.t('Create').'</b></td>
                                                                     </tr>                                                                   
                                                                   </table>'));

          $permissionID = 'read '.($isOntology ? 'ontology' : 'dataset').' '.($isOntology ? md5($datasetURI) : $datasetIDs->scdid).' '.$endpointSCEID;
          
          $datasetPermissions[$permissionID] = array('title' => t('<table style="background-color: #'.$colors[$nbColors].'">
                                                                     <tr>
                                                                       <td width="130px"></td>
                                                                       <td><b>'.t('Read').'</b></td>
                                                                     </tr>                                                                   
                                                                   </table>'));
          $permissionID = 'update '.($isOntology ? 'ontology' : 'dataset').' '.($isOntology ? md5($datasetURI) : $datasetIDs->scdid).' '.$endpointSCEID;
          
          $datasetPermissions[$permissionID] = array('title' => t('<table style="background-color: #'.$colors[$nbColors].'">
                                                                     <tr>
                                                                       <td width="130px"></td>
                                                                       <td><b>'.t('Update').'</b></td>
                                                                     </tr>                                                                   
                                                                   </table>'));
          $permissionID = 'delete '.($isOntology ? 'ontology' : 'dataset').' '.($isOntology ? md5($datasetURI) : $datasetIDs->scdid).' '.$endpointSCEID;
          
          $datasetPermissions[$permissionID] = array('title' => t('<table style="background-color: #'.$colors[$nbColors].'">
                                                                     <tr>
                                                                       <td width="130px"></td>
                                                                       <td><b>'.t('Delete').'</b></td>
                                                                     </tr>                                                                   
                                                                   </table>'));      
                                                                   
          $nbColors++;
          
          if($nbColors > 24)
          {
            $nbColors = 0;
          }
        }
      }  
    }
    
    variable_set('osf_permissions_ontologies_index', $ontologiesIndex);             
    
    // Get permissions from Drupal
    $drupalPermissions = array();

    foreach(user_roles() as $rid => $rname)
    {
      $groupURI = osf_get_group_uri($rid, $rname);
      
      $drupalPermissions[$groupURI] = array();
      
      $results = db_query("SELECT rid, permission FROM {role_permission} WHERE rid = :rid AND module = 'osf_permissions'", 
                          array(':rid' => $rid));
      
      foreach($results as $row)
      {
        // $perm[0] == kind of permissions (create, read, update or delete)
        // $perm[1] == kind; one of (1) ontology (2) dataset
        // $perm[2] == dataset ID (scdid) or ontology hash
        // $perm[3] == endpoint ID (sceid)
        $perm = explode(' ', $row->permission);
        
        $endpointURI = db_query('SELECT uri FROM {osf_configure_endpoints} WHERE sceid = :sceid', 
                                array(':sceid' => $perm[3]))->fetchField();
        
        $datasetURI = '';
        
        if($perm[1] == 'ontology')                        
        {
          $ontologiesIndex = variable_get('osf_permissions_ontologies_index', array());
          $datasetURI = $ontologiesIndex[$perm[2]];
        }
        else
        {
          $datasetURI = osf_configure_get_dataset_uri_from_scid($perm[2], $perm[3]);
        }
        
        if(!isset($drupalPermissions[$groupURI][$endpointURI]))
        {
          $drupalPermissions[$groupURI][$endpointURI] = array();
        }
        
        if(!isset($drupalPermissions[$groupURI][$endpointURI][$datasetURI]))
        {
          $drupalPermissions[$groupURI][$endpointURI][$datasetURI] = array(
            'create' => FALSE,
            'read' => FALSE,
            'update' => FALSE,
            'delete' => FALSE
          );
        }
        
        $drupalPermissions[$groupURI][$endpointURI][$datasetURI][$perm[0]] = TRUE;      
      }
    }
    
    // We only re-synchornize if we detect that the permissions, in drupal, changed since the last load of the
    // permissions page.
    // This check is required since every time the permissions page is loaded, this hook is fired.
    $previousPermissions = variable_get('osf_permissions_previous_defined_permissions', '');

    if($previousPermissions != md5(var_export($drupalPermissions, TRUE)))
    {
      variable_set('osf_permissions_previous_defined_permissions', md5(var_export($drupalPermissions, TRUE)));
      
      // Propagate all the "authenticated user"'s group permissions on all non anonymous groups  
      $authenticatedUserURI = osf_get_group_uri(2, 'authenticated_user');
      
      foreach($drupalPermissions[$authenticatedUserURI] as $endpoint => $perms_d)
      {
        foreach($perms_d as $datasetURI => $perms)
        {
          foreach($drupalPermissions as $groupURI => $perms_e)
          {
            if($groupURI == osf_get_group_uri(1, 'anonymous_user') ||
               $groupURI == $authenticatedUserURI)
            {
              continue;
            }
            
            if(!is_array($drupalPermissions[$groupURI]))
            {
              $drupalPermissions[$groupURI] = array();
            }
            
            if(!@isset($drupalPermissions[$groupURI][$endpointURI]))
            {
              $drupalPermissions[$groupURI][$endpointURI] = array();
            }
            
            if(!@isset($drupalPermissions[$groupURI][$endpointURI][$datasetURI]))
            {
              $drupalPermissions[$groupURI][$endpointURI][$datasetURI] = array();
            }
            
            foreach($perms as $crud => $perm)
            {
              if(isset($drupalPermissions[$groupURI][$endpointURI][$datasetURI][$crud]) &&
                 $drupalPermissions[$groupURI][$endpointURI][$datasetURI][$crud] === TRUE)
              {
                continue;
              }
              
              $drupalPermissions[$groupURI][$endpointURI][$datasetURI][$crud] = $perm;
            }
          }
        }
      }
     
      // Delete all previously defined permissions for these groups
      $endpoints = osf_configure_get_endpoints(NULL, FALSE, TRUE);

      foreach($endpoints as $endpoint)
      {  
        foreach(user_roles() as $rid => $rname)
        {         
          // We don't remove any access permissions for the administrator group
          if($rid == 3)
          {
            continue;
          }
          
          $authLister = new AuthListerQuery($endpoint->uri, $endpoint->app_id, $endpoint->api_key, osf_configure_get_first_user_uri());
          
          $authLister->getGroupAccesses(osf_get_group_uri($rid, $rname))
                     ->includeNoWebServiceUris()
                     ->send(new DrupalQuerierExtension());
                     
          if($authLister->isSuccessful())
          {
            $resultset = $authLister->getResultset()->getResultset();
            
            if(isset($resultset['unspecified']))
            {
              foreach($resultset['unspecified'] as $access)
              {
                $datasetURI = $access['http://purl.org/ontology/wsf#datasetAccess']['0']['uri'];
                
                if($rid == 3)
                {
                  $parsedURL = parse_url($datasetURI);
                  
                  if($parsedURL['path'] == '/wsf/' ||
                     $parsedURL['path'] == '/wsf/ontologies/' ||
                     $parsedURL['path'] == '/wsf/datasets/')
                  {
                    continue;
                  }
                }
                
                $authAccessRegistrar = new AuthRegistrarAccessQuery($endpoint->uri, $endpoint->app_id, $endpoint->api_key, osf_configure_get_first_user_uri());  
                
                $authAccessRegistrar->deleteTarget(osf_get_group_uri($rid, $rname), $datasetURI)
                                    ->send(new DrupalQuerierExtension());
                                    
                if(!$authAccessRegistrar->isSuccessful()) {
                  drupal_set_message(
                    t('Could not delete all access permissions for the group (%group) for dataset (%dataset). Error [%status] %msg (%msg_desc).',
                      array(
                        '%group' => osf_get_group_uri($rid, $rname),
                        '%dataset' => $datasetURI,
                        '%status' => $authAccessRegistrar->getStatus(),
                        '%msg' => $authAccessRegistrar->getStatusMessage(),
                        '%msg_desc' => $authAccessRegistrar->getStatusMessageDescription(),
                      )
                    ),
                    'error'
                  );
                }              
              }
            }
          }
        }
      }

      // Recreate all permissions as defined in the drupal permissions
      foreach($drupalPermissions as $groupURI => $perms_e)
      {
        foreach($perms_e as $endpointURI => $perms_d)
        {
          foreach($perms_d as $datasetURI => $perms)
          {
            $endpoint = osf_configure_get_endpoint_by_uri($endpointURI);
            
            $crudPermissions = new CRUDPermission($perms['create'], $perms['read'], $perms['update'], $perms['delete']);
            
            $authAccessRegistrar = new AuthRegistrarAccessQuery($endpoint->uri, $endpoint->app_id, $endpoint->api_key, osf_configure_get_first_user_uri());  
            
            $authAccessRegistrar->create($groupURI, $datasetURI, $crudPermissions, osf_configure_osf_get_registered_webservices($endpoint))
                                ->send(new DrupalQuerierExtension());
            
            if(!$authAccessRegistrar->isSuccessful())                    
            {
              drupal_set_message(
                t('Could not create new permissions for group (%group), on dataset (%dataset) located on endpoint (%endpoint). Error [%status] %msg (%msg_desc).',
                  array(
                    '%group' => $groupURI,
                    '%dataset' => $datasetURI,
                    '%endpoint' => $endpoint->uri,
                    '%status' => $authAccessRegistrar->getStatus(),
                    '%msg' => $authAccessRegistrar->getStatusMessage(),
                    '%msg_desc' => $authAccessRegistrar->getStatusMessageDescription(),
                  )
                ),
                'error'
              );
            }
          }
        }
      }
    }
  }
  
  return($datasetPermissions);    
} 

// Used to disable the administrator checkboxes.
function osf_permissions_form_alter(&$form, &$form_state, $form_id) 
{
  // User permissions form
  if($form_id == 'user_admin_permissions') 
  {
    // Choose the permissions to hide
    $permissions = array(
      'administer userprotect'
    );

    foreach($form['checkboxes'][3]['#options'] as $perm => $foo)
    {
      $module = db_query("SELECT module FROM {role_permission} WHERE permission = :perm", array(':perm' => $perm))->fetchField();
      
      // Make sure that the checkboxes for the "administrator" group
      // are always checked, and disabled.            
      if($module == 'osf_permissions' || empty($module))
      {
        $form['checkboxes'][3][$perm]['#disabled'] = TRUE;
        $form['checkboxes'][3][$perm]['#default_value'] = TRUE;
      }
    }
  }
}

 
/**
* Create a new group permissions on OSF when a role is created
*/
function osf_permissions_user_role_insert($role)
{
  // We do create this new role in each configured endpoints  
  $endpoints = osf_configure_get_endpoints(NULL, FALSE, TRUE);

  foreach($endpoints as $endpoint)
  {
    osf_configure_osf_create_group($endpoint, $role->rid, $role->name);
  }
}

/**
* Delete a group permissions on OSF when a role is delete
*/
function osf_permissions_user_role_delete($role)
{
  // We do create this new role in each configured endpoints  
  $endpoints = osf_configure_get_endpoints(NULL, FALSE, TRUE);

  foreach($endpoints as $endpoint)
  {
    osf_configure_osf_delete_group($endpoint, $role->rid, $role->name);
  } 
}

/**
* Update the URI of a group permissions on OSF when a role is updated
*/
function osf_permissions_user_role_presave($role)
{
  // We do create this new role in each configured endpoints  
  $endpoints = osf_configure_get_endpoints(NULL, FALSE, TRUE);

  // To update the group, we have to delete it first
  $previousName = db_query('SELECT role.name FROM {role} AS role WHERE role.rid = :rid', 
                           array(':rid' => $role->rid))->fetchField();
                           
  foreach($endpoints as $endpoint)
  {
    osf_configure_osf_delete_group($endpoint, $role->rid, $previousName);
  } 
  
  // Then we have to re-create it
  foreach($endpoints as $endpoint)
  {
    osf_configure_osf_create_group($endpoint, $role->rid, $role->name);
  }    
  
  // Then we have to re-join all user in that updated group
  foreach($endpoints as $endpoint)
  {
    $users = osf_configure_get_users();
  
    foreach($users as $user)
    {
      if(key_exists($role->rid, $user->roles))
      {
        osf_configure_osf_user_join_group($endpoint, $role->rid, $role->name, $user->uid);  
      }      
    }
  }                         
}
 
function osf_permissions_user_update(&$edit, $account, $category)
{
  // We do create this new role in each configured endpoints  
  $endpoints = osf_configure_get_endpoints(NULL, FALSE, TRUE);

  $diffRoles = array_diff_key($edit['original']->roles, $account->roles);
  
  foreach($endpoints as $endpoint)
  {  
    foreach($diffRoles as $roleID => $roleName)
    {
      // check if the role is removed
      if(key_exists($roleID, $edit['original']->roles))
      {
        osf_configure_osf_user_leave_group($endpoint, $roleID, $roleName, $account->uid);  
      }
    }
  }
  
  $diffRoles = array_diff_key($account->roles, $edit['original']->roles);
  
  foreach($endpoints as $endpoint)
  {  
    foreach($diffRoles as $roleID => $roleName)
    {
      $roleName = db_query('SELECT role.name FROM {role} AS role WHERE role.rid = :rid', 
                            array(':rid' => $roleID))->fetchField();
      
      // check if the role is added
      if(key_exists($roleID, $account->roles))
      {        
        osf_configure_osf_user_join_group($endpoint, $roleID, $roleName, $account->uid);  
      }
    }
  }
}

function osf_permissions_user_insert(&$edit, $account, $category)
{
  // We do create this new role in each configured endpoints  
  $endpoints = osf_configure_get_endpoints(NULL, FALSE, TRUE);

  foreach($endpoints as $endpoint)
  {
    foreach($account->roles as $roleID => $role)
    {
      $roleName = db_query('SELECT role.name FROM {role} AS role WHERE role.rid = :rid', 
                            array(':rid' => $roleID))->fetchField();
      
      osf_configure_osf_user_join_group($endpoint, $roleID, $roleName, $account->uid);  
    }
  } 
}

function osf_permissions_user_delete($account)
{
  // We do create this new role in each configured endpoints  
  $endpoints = osf_configure_get_endpoints(NULL, FALSE, TRUE);

  foreach($endpoints as $endpoint)
  {
    foreach($account->roles as $roleID => $role)
    {
      $roleName = db_query('SELECT role.name FROM {role} AS role WHERE role.rid = :rid', 
                            array(':rid' => $roleID))->fetchField();
      
      osf_configure_osf_user_leave_group($endpoint, $roleID, $roleName, $account->uid);  
    }
  } 
} 