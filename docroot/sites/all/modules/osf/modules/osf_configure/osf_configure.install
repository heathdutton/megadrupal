<?php

/**
  * Implement osf_configure_enable()
  */
function osf_configure_enable() {
  //Check if table exists, if not install the schema.
  if(db_table_exists('osf_configure_endpoints') == FALSE) {
    drupal_install_schema('osf_configure');
  }
}

function osf_configure_schema() {
  /************* Endpoints ***********
    * osf_configure_endpoints
    ** sceid
    ** label
    ** machine_name
    ** sid
    ** uri
    ** color
    ** is_default
  *******************************/
  $schema['osf_configure_endpoints'] = array(
    'description' => 'The base table for OSF Endpoints.',
    'export' => array(
      'key' => 'machine_name',
      'key name' => 'Machine Name',
      'primary key' => 'sceid',
      'admin_title' => 'label',
      'identifier' => 'osf_endpoint', // Exports will be as $myobj
      'default hook' => 'default_osf_configure_endpoint',  // Function hook name.
      'api' => array(
        'owner' => 'osf_configure',
        'api' => 'default_osf_configure_endpoint',  // Base name for api include files.
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'sceid' => array(
        'description' => 'The primary identifier for a endpoint.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The Administrative title of this endpoint, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'machine_name' => array(
        'description' => 'The machine_name of this endpoint, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'uri' => array(
        'description' => 'The URI of this endpoint, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'default' => '',
      ),
      'sid' => array(
        'description' => 'The server ID of the network. This is used to know if the same server is accessed from two different URL',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),      
      'color'  => array(
        'description' => 'The HTML hex color of this endpoint, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 6,
        'not null' => TRUE,
        'default' => 'FFFFFF'
      ),      
      'app_id'  => array(
        'description' => 'Application ID to be used by Drupal to communicate with the OSF instance.',
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'default' => ''
      ),
      'api_key'  => array(
        'description' => 'API key associated with the Application ID.',
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'default' => ''
      ),
      'is_default'   => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0
      ),
    ),
    'indexes' => array(
      'endpoint_machine_name' => array('machine_name'),
      'endpoint_is_default'   => array('is_default'),
    ),
    'primary key' => array('sceid'),
  );
   
  /************* Datasets ***********
    * osf_configure_datasets
    ** scdid
    ** label
    ** machine_name
    ** sceid (endpoint)
    ** remote_label
    ** remote_description
  *******************************/
  $schema['osf_configure_datasets'] = array(
    'description' => 'The base table for OSF Datasets.',
    'export' => array(
      'key' => 'machine_name',
      'key name' => 'Machine Name',
      'primary key' => 'scdid',
      'admin_title' => 'label',
      'identifier' => 'osf_dataset', // Exports will be as $myobj
      'default hook' => 'default_osf_configure_dataset',  // Function hook name.
      'subrecords callback' => 'osf_configure_dataset_subrecords',
      'api' => array(
        'owner' => 'osf_configure',
        'api' => 'default_osf_configure_dataset',  // Base name for api include files.
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'scdid' => array(
        'description' => 'The primary identifier for a dataset.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The Administrative title of this dataset, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'machine_name' => array(
        'description' => 'The machine_name of this dataset, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'sceid' => array(
        'description' => 'The Endpoint identifier for this dataset.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uri' => array(
        'description' => 'The URI of this dataset.',
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'default' => '',
      ),
      'active'   => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'origin' => array(
        'description' => 'The origin of this dataset, currently local or shared.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'dataset_machine_name' => array('machine_name'),
    ),
    'primary key' => array('scdid'),
  );

  return $schema;
}