<?php

use \StructuredDynamics\osf\php\api\ws\auth\lister\AuthListerQuery;
use \StructuredDynamics\osf\php\api\ws\dataset\read\DatasetReadQuery;
use \StructuredDynamics\osf\php\api\ws\dataset\delete\DatasetDeleteQuery;
use \StructuredDynamics\osf\php\api\ws\auth\registrar\group\AuthRegistrarGroupQuery;
use \StructuredDynamics\osf\php\api\ws\auth\registrar\user\AuthRegistrarUserQuery;

define("OSF_CONFIGURE_ENDPOINT_DEFAULT_MACHINE_NAME", 'osf_configure_endpoint_default');
define("OSF_CONFIGURE_ENDPOINT_DEFAULT_SCEID", 7777777);

global $OSF_CONFIGURE_DATASET_TYPES;
$OSF_CONFIGURE_DATASET_TYPES = array(
  '0' => 'Normal',
  '1' => 'Searchable',
  '2' => 'Disabled'
);

// Load the admin forms
module_load_include('inc', 'osf_configure', 'osf_configure.admin');

function osf_configure_dataset_subrecords(&$records){
  foreach($records as $record) {
    // Add endpoint
    $record->endpoint = current(osf_configure_get_endpoints($record->sceid));

    // Fetch additional info from endpoint
    $record->info = osf_configure_api_fetch_dataset_info($record->uri);
  }
}



function osf_configure_menu() {

  $items = array();
  $items['admin/config/osf/networks_and_dataset'] = array(
    'title' => t('Datasets & Networks'),
    'access arguments' => array('administer osf'),
    'page callback' => 'osf_configure_callback_goto_datasets',
    'type' => MENU_LOCAL_TASK,
    'weight' => -50
  );
  
  $items['admin/config/osf/networks_and_dataset/datasets/delete/osf'] = array(
    'title' => t('Delete Dataset on OSF'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('osf_configure_delete_dataset_on_osf_confirm'),
    'access arguments' => array('administer osf'),
  );    
  
  // Create the top admin menu for quickly accessing datasets
  $items['admin/datasets'] = array(
    'title' => t('Datasets'),
    'weight' => -7,
    'description' => t('Administer datasets and networks'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('osf_configure_dataset_top_menu'),    
    'access arguments' => array('administer osf'),
  );     
  
  return $items;
}

function osf_configure_dataset_top_menu($form, $form_state) {
  drupal_goto('admin/config/osf/networks_and_dataset/datasets');
}

function osf_configure_delete_dataset_on_osf_confirm($form, $form_state) {
  return confirm_form($form, t('Are you sure you want to delete the "%dataset" dataset from OSF?', array('%dataset' => $_GET['uri'])), 'admin/config/osf/networks_and_dataset/datasets/delete/osf', t('This action cannot be undone.'), t('Delete'), t('Cancel'));
}

function osf_configure_delete_dataset_on_osf_confirm_submit($form, &$form_state) {
  
  $defaultEndpoint = current(osf_configure_get_default_endpoint());
  
  $datasetDelete = new DatasetDeleteQuery($defaultEndpoint->uri, $defaultEndpoint->app_id, $defaultEndpoint->api_key, osf_configure_get_current_user_uri());
  
  $datasetDelete->uri($_GET['uri'])
                ->send(new DrupalQuerierExtension());
    
  if($datasetDelete->isSuccessful())
  {
    drupal_set_message(t('Dataset %dataset deleted from OSF.', array('%dataset' => $_GET['uri'])));
  }
  else
  {
    drupal_set_message(t("Can't delete the dataset (%dataset) on OSF: [@error] @errorMsg - @errorDescription",
                       array("%dataset" => $_GET['uri'],
                             "@error" => $datasetDelete->getStatus(),
                             "@errorMsg" => $datasetDelete->getStatusMessage(),
                             "@errorDescription" => $datasetDelete->getStatusMessageDescription())),
                       "error",
                       TRUE);        
  }
  
  $form_state['redirect'] .= 'admin/config/osf/networks_and_dataset/datasets';    
  
  // Clear cache
  drupal_flush_all_caches();
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function osf_configure_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'node/add' on 'admin/content' page.
  if (strpos($root_path, 'admin/config/osf/networks_and_dataset') !== FALSE) {
    if (arg(4) == 'datasets') {
      if(module_exists('osf_import'))
      {
        $data['actions']['output'][0]['#link']['title'] = t('Create New Dataset');

        $item = menu_get_item('admin/config/osf/networks_and_dataset');
        $data['actions']['output'][2] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );
        $data['actions']['output'][2]['#link']['title'] = t('Import Dataset');
        $data['actions']['output'][2]['#link']['href'] = 'osf/import';
      }
      else
      {
        unset($data['actions']['output'][0]);
      }
    } 
    $data['actions']['output'][1]['#link']['title'] = t('Import Feature');
  }
}

function osf_configure_callback_goto_datasets() {
  drupal_goto('admin/config/osf/networks_and_dataset/datasets');
}

function osf_configure_menu_alter(&$items) {
  // Ctools generates the menu callbacks so we just alter them here
  $items['admin/config/osf/networks_and_dataset/datasets']['type'] = MENU_DEFAULT_LOCAL_TASK;
  $items['admin/config/osf/networks_and_dataset/datasets']['weight'] = -6;
  $items['admin/config/osf/networks_and_dataset/endpoints']['type'] = MENU_LOCAL_TASK;
  $items['admin/config/osf/networks_and_dataset/endpoints']['weight'] = -2;
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function osf_configure_ctools_plugin_directory($module, $plugin) {
  // Load the export_ui plugin.
  if ($module == 'ctools' && $plugin =='export_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_permission().
 */
function osf_configure_permission() {
  return array(
    'administer osf config' => array(
      'title' => t('Administer OSF for Drupal configurations'),
      'description' => t('Create and modify configuration sets for OSF for Drupal.'),
    ),
  );
}

function osf_configure_get_default_endpoint_uri() {
  if($default_endpoint = current(osf_configure_get_endpoints(OSF_CONFIGURE_ENDPOINT_DEFAULT_MACHINE_NAME))) {
    return($default_endpoint->uri);
  }
  else {
    static $display_message;
    if(is_null($display_message)) {
      drupal_set_message(t('OSF for Drupal configuration: You must set a default OSF for Drupal API endpoint.'), 'warning');
    }
    $display_message = FALSE;
  }
}

function osf_configure_get_endpoint_from_dataset_uri($uri)
{
  $sceid = db_query('SELECT sceid FROM {osf_configure_datasets} WHERE uri = :uri', array(':uri' => $uri))->fetchField();

  return(osf_configure_get_endpoints($sceid));
}

function osf_configure_get_endpoints($machine_names_or_id = NULL, $addDefaultEndpoint = TRUE, $ignoreIdenticalServers = FALSE) {

  $return = array();
  
  include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'ctools') . '/includes/export.inc';

  if(is_null($machine_names_or_id)){
    $objects = array();
    $objects += ctools_export_load_object('osf_configure_endpoints');
    
    if($addDefaultEndpoint === TRUE)
    {
      $objects += osf_configure_get_default_endpoint();
    }
  }
  elseif (is_numeric($machine_names_or_id)) {
    if($machine_names_or_id == OSF_CONFIGURE_ENDPOINT_DEFAULT_SCEID) {
      return(osf_configure_get_default_endpoint());
    }
    else {
      $objects = ctools_export_load_object('osf_configure_endpoints', 'conditions', array('sceid' => $machine_names_or_id));
    }
  }
  elseif (is_string($machine_names_or_id)) {
    if($machine_names_or_id == OSF_CONFIGURE_ENDPOINT_DEFAULT_MACHINE_NAME) {
      return(osf_configure_get_default_endpoint());
    }
    else {
      $objects = ctools_export_load_object('osf_configure_endpoints', 'names', $machine_names_or_id);
    }
  }
  
  if($ignoreIdenticalServers === TRUE)
  {
    $defaultEndpoint = current(osf_configure_get_default_endpoint());
    $objectsFiltered = $objects;
    
    foreach($objects as $machine_name => $endpoint)
    {
      if($machine_name != OSF_CONFIGURE_ENDPOINT_DEFAULT_MACHINE_NAME)
      {
        foreach($objects as $machine_name_comp => $endpoint_comp)
        {
          if($machine_name_comp != OSF_CONFIGURE_ENDPOINT_DEFAULT_MACHINE_NAME &&
             $endpoint->sid == $endpoint_comp->sid &&
             $endpoint->machine_name != $endpoint_comp->machine_name &&
             isset($objectsFiltered[$machine_name]))             
          {
            // Make sure that if one of the duplicates is the default endpoint, that we keep that
            // one in the list
            if($machine_name_comp != $defaultEndpoint->machine_name)
            {
              unset($objectsFiltered[$machine_name_comp]); 
            }
          }          
        }
      }
    }

    $objects = $objectsFiltered;
    
    // Reorder to make sure that the first of the list is the default one.
    // This may have an impact for some usecases where networks are iterated until some results are found
    uasort($objects, '_sort_endpoints_based_on_default');
  }

  return($objects);
}

function osf_configure_get_endpoint_by_uri($uri) {
  include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'ctools') . '/includes/export.inc';

  $objects = ctools_export_load_object('osf_configure_endpoints', 'conditions', array('uri' => $uri));

  return(current($objects));
}

function _sort_endpoints_based_on_default($a, $b)
{
  if($a->is_default == 0 && $b->is_default == 0)
  {
    return(0);
  }
  
  if($a->is_default == 1)
  {
    return(-1);
  }
  else
  {
    return(1);
  }
}

// Returns only the default if it exists
function osf_configure_get_default_endpoint() {
  $return = array();
  
  include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'ctools') . '/includes/export.inc';
  
  if($machine_name = variable_get('osf_configure_default_endpoint_machine_name', FALSE)) {
    $objects = ctools_export_load_object('osf_configure_endpoints');    
    if(isset($objects[$machine_name])) {
      $tmp_object = $objects[$machine_name];
      $return[OSF_CONFIGURE_ENDPOINT_DEFAULT_MACHINE_NAME] = clone $tmp_object;
      $return[OSF_CONFIGURE_ENDPOINT_DEFAULT_MACHINE_NAME]->label = t('Locked Default') .': '. $tmp_object->label;
      $return[OSF_CONFIGURE_ENDPOINT_DEFAULT_MACHINE_NAME]->sceid = $tmp_object->sceid;
    }
  }
  else {
    $objects = ctools_export_load_object('osf_configure_endpoints');
    if($objects) {
      foreach($objects as $object) {
        if($object->is_default === "1") {
          $tmp_object = $object;
          $return[OSF_CONFIGURE_ENDPOINT_DEFAULT_MACHINE_NAME] = clone $tmp_object;
          $return[OSF_CONFIGURE_ENDPOINT_DEFAULT_MACHINE_NAME]->label = t('Active Default') .': '. $tmp_object->label;
          $return[OSF_CONFIGURE_ENDPOINT_DEFAULT_MACHINE_NAME]->sceid = $tmp_object->sceid;
        }
      }
    }
  }
  return($return);
}

function osf_configure_get_endpoints_form_options($sceid = NULL) {
  $objects = osf_configure_get_endpoints();
  foreach ($objects as $object) {
    $options[$object->sceid] = $object->label;
  }

  if(is_null($sceid)){
    return($options);
  }
  else {
    return isset($options[$sceid]) ? array($sceid => $options[$sceid]) : FALSE;
  }
}

/**
* Save a single myobj.
*/
function osf_configure_endpoint_save(&$myobj) {
  $update = (isset($myobj->sceid) && is_numeric($myobj->sceid)) ? array('sceid') : array();
  return drupal_write_record('osf_configure_endpoints', $myobj, $update);
}

/**
* Get available datasets in OSF for Drupal
* 
* @param string $type One of: 'all': these are configured and available datasets
*                             'configured': datasets that have been configured and exposed to OSF for Drupal
*                             'configured-default': datasets that have been configured and that are
*                                                   exposed by the default network
*                             'available': available datasets on the default network that are not yet configured
* @param boolean $exclude_ontologies Exclude ontologies datasets from the returned results
* @param array $access_filter Filter the returned datasets depending on their access permissions.
*                             The expected array filter is: "array('create' => TRUE/FALSE, 'read' =>
*                             TRUE/FALSE, 'update' => TRUE/FALSE, 'delete' => TRUE/FALSE)". What
*                             we specify here are the permissions we want the dataset to match.
*                             For example, if the parameter is "array('create' => TRUE, 'read' => TRUE) then
*                             the dataset needs to have the 'create' and 'read' permissions 
*                             for this user.
* @return array Return a list of 
*/
function osf_configure_dataset_load_util($type = 'all', $exclude_ontologies = TRUE, $access_filter = array()) {
  
  $datasets = array();
  
  switch ($type) {
    case 'available':
      $datasets = osf_configure_api_fetch_datasets($exclude_ontologies);
      break;
    case 'configured':
      $datasets = osf_configure_dataset_load_multiple();
      break;
    case 'configured-default':
      $datasets = osf_configure_dataset_load_multiple();
      
      $defaultEndpoint = current(osf_configure_get_default_endpoint());
      
      foreach($datasets as $key => $dataset)
      {
        if($dataset->endpoint->sceid != $defaultEndpoint->sceid)
        {
          unset($datasets[$key]);
        }
      }
      
      break;
    case 'all':
    default:
      $configured_datasets = osf_configure_dataset_load_multiple();
      $datasets = osf_configure_api_fetch_datasets($exclude_ontologies);

      foreach($configured_datasets as $machine_name => $dataset) {
        // Add all configured datasets not just those that are available
        $datasets[$machine_name] = $dataset;
      }
      break;
  }
  
  // Filter out the ones that doesn't comply with the accesses filters
  foreach($datasets as $key => $dataset)
  {
    foreach($access_filter as $access_type => $access)
    {      
      if(isset($dataset->info['permissions'][$access_type]) && $dataset->info['permissions'][$access_type] !== $access)
      {
        unset($datasets[$key]);
      }
    }
  }
  
  return($datasets);
}

function osf_configure_dataset_generate_config($datasets) {
  foreach ($datasets as $dataset) {
    $return_value[$dataset->uri] = $dataset->uri;
  }
  return $return_value;
}

/**
* Get searchable datasets URIs
* 
* @param string $type One of: 'all': these are the configured and available datasets searchable datasets
*                             'configured': datasets that have been configured and exposed to OSF for Drupal and that
*                                           are searchable
*                             'configured-default': datasets that have been configured and that are
*                                                   exposed by the default network and that are searchable
* 
* @return a list of searchable URIs
*/
function osf_configure_dataset_generate_config_searchable($type = 'all') {
  $datasets = osf_configure_dataset_load_util($type);
  
  $return_value = array();
  
  foreach ($datasets as $dataset) {
    if($dataset->active === "1") {
      $return_value[$dataset->label] = $dataset->uri;
    }
  }
  return $return_value;
}

function osf_configure_api_fetch_default_authlister_results($network = '') {
  
  $auth = &drupal_static('osf_configure_authlister_'.md5($network.osf_configure_get_current_user_uri()));
  
  if(!isset($auth)) 
  {
    if($cache = cache_get('osf_configure_authlister_'.md5($network.osf_configure_get_current_user_uri()))) 
    {
      $auth = $cache->data;
    }
    else
    {
      $auth = _osf_configure_api_fetch_default_authlister_results($network);
      
      cache_set('osf_configure_authlister_'.md5($network.osf_configure_get_current_user_uri()), $auth, 'cache', CACHE_TEMPORARY);  
    }
  }    
  
  return($auth);
}

function _osf_configure_api_fetch_default_authlister_results($network = '') {
  $datasets = array();
  $resultset = FALSE;
  
  if(empty($network)) {
    $network = osf_configure_get_default_endpoint_uri();
  }

  if ($network) {
    $defaultEndpoint = osf_configure_get_endpoint_by_uri($network);
    
    $authlister = new AuthListerQuery($defaultEndpoint->uri, $defaultEndpoint->app_id, $defaultEndpoint->api_key, osf_configure_get_current_user_uri());

    // Specifies that we want to get all the dataset URIs available to the server that send this query.
    $authlister->getDatasetsUri()
               ->includeNoWebServiceUris();

    // Send the auth lister query to the endpoint
    $authlister->send(new DrupalQuerierExtension());

    if(!$authlister->isSuccessful()) {
      drupal_set_message(
        t('AuthListerQuery query error [%status] %msg (%msg_desc).',
          array(
            '%status' => $authlister->getStatus(),
            '%msg' => $authlister->getStatusMessage(),
            '%msg_desc' => $authlister->getStatusMessageDescription(),
          )
        ),
        'error'
      );
      return;
    }

    // Get back the resultset returned by the endpoint
    $resultset = $authlister->getResultset()->getResultset();
  }
  
  return $resultset;
}


function osf_configure_api_fetch_datasets($exclude_ontologies = TRUE) {
  $datasets = array();
  if($resultset = osf_configure_api_fetch_default_authlister_results()) {
    // Use 'unspecified' because this list is always generated on the fly
    foreach($resultset['unspecified'] as $results) {
      foreach ($results as $result_key => $result) {
        if ($result_key == 'type') {
          continue;
        }
        else {
          foreach ($result as $result_item) {
            if($exclude_ontologies && osf_ontology_is_ontology_dataset($result_item['uri'])) {
              // Skip ontologies
            }
            else {
              $uri = $result_item['uri'];

              // This is a cached call specific to the user
              $info = osf_configure_api_fetch_dataset_info($uri);
              if($info) {
                $datasets[$uri] = osf_configure_available_dataset_object($uri, $info);
              }
            }
          }
        }
      }
    }
  }

  $configured_datasets = osf_configure_dataset_load_multiple();
  foreach($configured_datasets as $machine_name => $dataset) {
    if(array_key_exists($dataset->uri, $datasets) && 
       $datasets[$dataset->uri]->endpoint->sceid == $dataset->sceid) {
      unset($datasets[$dataset->uri]);
      // Replace any available datasets that are configured with the configured version
      // for the default endpoint
      $datasets[$machine_name] = $dataset;
    }
  }
  
  // Remove core datasets from that list
  foreach($datasets as $datasetURI => $dataset)
  {
    $parsedURL = parse_url($datasetURI);
  
    if($parsedURL['path'] == '/wsf/' ||
       $parsedURL['path'] == '/wsf/ontologies/' ||
       $parsedURL['path'] == '/wsf/datasets/')
    {
      unset($datasets[$datasetURI]);
    }
  }
  
  return $datasets;
}



function osf_configure_api_fetch_dataset_info($uri) {
  return(_osf_configure_api_fetch_dataset_info($uri));
}

function _osf_configure_api_fetch_dataset_info($uri) {
  $info = _osf_configure_api_fetch_dataset_info_util($uri);
  
  if($info['prefLabel'] !== FALSE) 
  {
    return $info;
  }
  
  return FALSE;
}

function _osf_configure_api_fetch_dataset_info_util($uri) {
    
  $info = &drupal_static('osf_configure_dataset_info_'.md5($uri));
  if(!isset($info)) 
  {
    if($cache = cache_get('osf_configure_dataset_info_'.md5($uri))) 
    {
      $info = $cache->data;
      return($info);
    }
    else
    {
      // @TODO Add access for current user based on osf_get_accessible_datasets
      // Include access array that flows all the way to top-level objects
      $info = array(
        'prefLabel' => FALSE,
        'description' => FALSE,
        'ontology' => FALSE,
        'permissions' => FALSE,
      );
    }
  }
  else
  {
    return($info);
  }
  
  $defaultEndpoint = current(osf_configure_get_default_endpoint());
  
  $datasetRead = new DatasetReadQuery($defaultEndpoint->uri, $defaultEndpoint->app_id, $defaultEndpoint->api_key, osf_configure_get_current_user_uri());
  $datasetRead->uri($uri);
  $datasetRead->send(new DrupalQuerierExtension());
  
  if ($datasetRead->isSuccessful()) {
    $results = $datasetRead->getResultset()->getResultset();

    $info['prefLabel'] = '';
    $info['description'] = '';

    if (!empty($results['unspecified'][$uri]['prefLabel'])) {
      $info['prefLabel'] = $results['unspecified'][$uri]['prefLabel'];
    }

    if (!empty($results['unspecified'][$uri]['description'])) {
      $info['description'] = $results['unspecified'][$uri]['description'];
    }
  }
  
  if(osf_ontology_is_ontology_dataset($uri)) {
    $info['ontology']= TRUE;
  }

  $perms = osf_configure_api_fetch_user_permissions();
  
  if(isset($perms[$uri])) {
    $info['permissions'] = $perms[$uri];
    foreach ($info['permissions'] as $key => $value) {
      $info['permissions'][$key] = filter_var(strtolower($value), FILTER_VALIDATE_BOOLEAN);
    }
  }
  
  cache_set('osf_configure_dataset_info_'.md5($uri), $info, 'cache', CACHE_TEMPORARY);
  
  return($info);
}

// This function cached by osf_configure_api_fetch_dataset_info
function osf_configure_api_fetch_user_permissions() {
  global $user;

  $permissions = &drupal_static('osf_datasets_permissions_for_user_'.$user->uid);
  if(!isset($permissions)) 
  {
    if($cache = cache_get('osf_datasets_permissions_for_user_'.$user->uid)) 
    {
      $permissions = $cache->data;
      return($permissions);
    }
    else
    {
      $permissions = array();
    }
  }
  else
  {
    return($permissions);
  }  

  $defaultEndpoint = current(osf_configure_get_default_endpoint());
  
  $authLister = new AuthListerQuery($defaultEndpoint->uri, $defaultEndpoint->app_id, $defaultEndpoint->api_key, osf_configure_get_current_user_uri());
  
  $authLister->getUserAccesses()
             ->includeNoWebServiceUris()
             ->send(new DrupalQuerierExtension());

  if($authLister->isSuccessful()) {
    $accesses = $authLister->getResultset()->getResultset();
    
    if(isset($accesses['unspecified']))
    {
      foreach($accesses['unspecified'] as $result) {
        $uri = $result['http://purl.org/ontology/wsf#datasetAccess'][0]['uri'];

        if(isset($permissions[$uri]))      
        {
          // With this procedure, we make sure that the dataset has the maximum accesses depending on the
          // groups that are returned by the endpoint.
          if(strtolower($permissions[$uri]['create']) == 'false')
          {
            $permissions[$uri]['create'] = $result['http://purl.org/ontology/wsf#create'][0]['value'];
          }
          
          if(strtolower($permissions[$uri]['read']) == 'false')
          {
            $permissions[$uri]['read'] = $result['http://purl.org/ontology/wsf#read'][0]['value'];
          }
          
          if(strtolower($permissions[$uri]['update']) == 'false')
          {
            $permissions[$uri]['update'] = $result['http://purl.org/ontology/wsf#update'][0]['value'];
          }
          
          if(strtolower($permissions[$uri]['delete']) == 'false')
          {
            $permissions[$uri]['delete'] = $result['http://purl.org/ontology/wsf#delete'][0]['value'];
          }
        }
        else
        {
          $permissions[$uri] = array();
          $permissions[$uri]['create'] = $result['http://purl.org/ontology/wsf#create'][0]['value'];
          $permissions[$uri]['read'] = $result['http://purl.org/ontology/wsf#read'][0]['value'];
          $permissions[$uri]['update'] = $result['http://purl.org/ontology/wsf#update'][0]['value'];
          $permissions[$uri]['delete'] = $result['http://purl.org/ontology/wsf#delete'][0]['value'];
        }
      }
    }
  }
  
  cache_set('osf_datasets_permissions_for_user_'.$user->uid, $permissions, 'cache', CACHE_TEMPORARY);
  
  return $permissions;
}

function osf_configure_available_dataset_object($uri, $info) {
  $label = $info['prefLabel'];

  $dataset = new stdClass;
  $dataset->scdid = NULL;
  $dataset->label = $label;
  $dataset->machine_name = "";
  $dataset->sceid = OSF_CONFIGURE_ENDPOINT_DEFAULT_SCEID;
  $dataset->active = 2;
  $dataset->origin = "shared";
  $dataset->table = "osf_configure_datasets";
  $dataset->available = TRUE;
  $dataset->type = t("Available from Default Endpoint");
  $dataset->endpoint = current(osf_configure_get_default_endpoint());
  $dataset->uri = $uri;
  $dataset->info = $info;
  return $dataset;
}

/**
 * Implements 'load callback' for myobj exportables.
 */
function osf_configure_dataset_load($name) {
  ctools_include('export');
  $result = ctools_export_load_object('osf_configure_datasets', 'names', array($name));
  if (isset($result[$name])) {
    return $result[$name];
  }
}

/**
 * Implements 'load multiple callback' for myobj exportables.
 */
function osf_configure_dataset_load_multiple($names = NULL) {
  ctools_include('export');
  if(is_array($names)) {
    $results = ctools_export_load_object('osf_configure_datasets', 'names', $names);
  }
  else {
    $results = ctools_export_load_object('osf_configure_datasets');
  }
  return array_filter($results);
}

/**
* Save a single myobj.
*/
function osf_configure_dataset_save(&$myobj) {
  $update = (isset($myobj->sceid) && is_numeric($myobj->sceid)) ? array('sceid') : array();
  return drupal_write_record('osf_configure_datasets', $myobj, $update);
}

function osf_configure_uri_is_invalid($uri) {
  // See:
  // http://mathiasbynens.be/demo/url-regex
  // https://gist.github.com/dperini/729294
  $result = preg_match('_^(?:(?:https?|ftp)://)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\x{00a1}-\x{ffff}0-9]+-?)*[a-z\x{00a1}-\x{ffff}0-9]+)(?:\.(?:[a-z\x{00a1}-\x{ffff}0-9]+-?)*[a-z\x{00a1}-\x{ffff}0-9]+)*(?:\.(?:[a-z\x{00a1}-\x{ffff}]{2,})))(?::\d{2,5})?(?:/[^\s]*)?$_iuS', $uri);
  return $result === 1 ? FALSE : TRUE;
}

// Caching wrapper by tstec@phase2technology.com
function osf_configure_cache_wrapper($callback, $param_arr, $additional_identifier = NULL, $flush_cache = FALSE, $debug = FALSE) {

  // Unique identifier for static return value and caching
  $cid = __FUNCTION__ .'_'. $callback;
  if($additional_identifier) {
    $cid .= '_'. $additional_identifier;
  }

  // Check drupal static
  $return_value = &drupal_static($cid);
  if (isset($return_value)) {
    if($debug) {
      dpm(t("Fetched from static: @cid", array('@cid' => $cid)));
    }
    return($return_value);
  }

  // Check cache
  if($flush_cache == FALSE){
    if($cached_return_value = cache_get($cid)){
      $expire = (int) trim($cached_return_value->expire);
      // As long as expire is greater than the request time, fetch from cache
      if($expire > REQUEST_TIME){
        $return_value = $cached_return_value->data;
        if($debug) {
          dpm(t("Fetched from cache (Request: @request_time Expire: @expire): @cid", array('@request_time' => REQUEST_TIME, '@expire' => $expire, '@cid' => $cid)));
        }
        return($return_value);
      }
      else{
        if($debug) {
          dpm(t("Expired (Request: @request_time Expire: @expire): @cid", array('@request_time' => REQUEST_TIME, '@expire' => $expire, '@cid' => $cid)));
        }
      }
    }
  }
  else {
    if($debug) {
      dpm(t("Flush forced: @cid", array('@cid' => $cid)));
    }
  }

  if($debug) {
    dpm(t("MISS: Performing full build and caching the: @cid", array('@cid' => $cid)));
  }

  if(function_exists($callback)) {
    $return_value = call_user_func_array($callback, $param_arr);
  }

  // Set cache
  cache_set($cid, $return_value, 'cache', REQUEST_TIME + variable_get('osf_configure_cache_expire', 777));

  return($return_value);
}

function osf_configure_get_current_user_uri()
{    
  global $user;
  global $base_url;
  
  if(user_is_anonymous())
  {
    return($base_url.'/user/guest'); 
  }
  else
  {  
    return($base_url.'/user/'.$user->uid);
  }
}

function osf_configure_get_user_uri($uid)
{  
  global $base_url;
  
  return($base_url.'/user/'.$uid);
}

function osf_configure_get_first_user_uri()
{  
  return(osf_configure_get_user_uri(1));
}

function osf_configure_get_administrator_group_uri()
{
  global $base_url;
  
  return($base_url.'/role/3/administrator');
}

function osf_configure_sync_groups($endpoint)
{
  foreach(user_roles() as $role_id => $role_name)
  {
    osf_configure_osf_create_group($endpoint, $role_id, $role_name);
  }
  
  osf_configure_sync_users($endpoint);
}

function osf_configure_osf_create_group($endpoint, $role_id, $role_name)
{
  $authRegistrarGroup = new AuthRegistrarGroupQuery($endpoint->uri, $endpoint->app_id, $endpoint->api_key, osf_configure_get_first_user_uri());
  
  $authRegistrarGroup->application($endpoint->app_id)
                     ->createGroup()
                     ->group(osf_get_group_uri($role_id, $role_name))
                     ->send(new DrupalQuerierExtension());
                     
  if(!$authRegistrarGroup->isSuccessful())
  {
    if($authRegistrarGroup->error->id != 'WS-AUTH-REGISTRAR-GROUP-203')
    {
      drupal_set_message(
        t('Couldn\'t create the new group in OSF. Error [%status] %msg (%msg_desc).',
          array(
            '%status' => $authRegistrarGroup->getStatus(),
            '%msg' => $authRegistrarGroup->getStatusMessage(),
            '%msg_desc' => $authRegistrarGroup->getStatusMessageDescription(),
          )
        ),
        'error'
      );      
    }
  }  
}

function osf_configure_unsync_groups($endpoint)
{
  foreach(user_roles() as $role_id => $role_name)
  {
    // Do not remove the admin role ID. Otherwise, the OSF system
    // administrator will have to re-create the permissions if they
    // want to re-register to this endpoint
    if($role_id != 3)
    {
      osf_configure_osf_delete_group($endpoint, $role_id, $role_name); 
    }    
  }
}

function osf_configure_osf_delete_group($endpoint, $role_id, $role_name)
{
  $authRegistrarGroup = new AuthRegistrarGroupQuery($endpoint->uri, $endpoint->app_id, $endpoint->api_key, osf_configure_get_first_user_uri());
  
  $authRegistrarGroup->application($endpoint->app_id)
                     ->deleteGroup()
                     ->group(osf_get_group_uri($role_id, $role_name))
                     ->send(new DrupalQuerierExtension());
                     
  if(!$authRegistrarGroup->isSuccessful())
  {
    drupal_set_message(
      t('Couldn\'t delete the new group in OSF. Error [%status] %msg (%msg_desc).',
        array(
          '%status' => $authRegistrarGroup->getStatus(),
          '%msg' => $authRegistrarGroup->getStatusMessage(),
          '%msg_desc' => $authRegistrarGroup->getStatusMessageDescription(),
        )
      ),
      'error'
    );      
  }  
}

function osf_configure_sync_users($endpoint)
{
  $users = osf_configure_get_users();
  
  foreach($users as $user)
  {
    foreach($user->roles as $role_id => $role_name)
    {
      osf_configure_osf_user_join_group($endpoint, $role_id, $role_name, $user->uid);        
    }
  }
}

function osf_configure_get_users()
{
  $uids = array();

  $result = db_query('SELECT DISTINCT(ur.uid) FROM {users_roles} AS ur');

  foreach ($result as $row) 
  {
    $uids[] = $row->uid;
  }

  $users = user_load_multiple($uids);
  
  // Create an anonymous user
  $anonymous_user = new stdClass;
  $anonymous_user->roles = array();
  $anonymous_user->uid = 'guest';
  
  $users[] = $anonymous_user;  
  
  foreach($users as $user)
  {
    // Make sure that all users does have access to the anonymous user group
    $user->roles[1] = 'anonymous user';
  }  

  return($users);  
}

function osf_configure_osf_user_join_group($endpoint, $role_id, $role_name, $user_uid)
{
  $authRegistrarUser = new AuthRegistrarUserQuery($endpoint->uri, $endpoint->app_id, $endpoint->api_key, osf_configure_get_first_user_uri());
  
  $authRegistrarUser->group(osf_get_group_uri($role_id, $role_name))
                    ->joinGroup()
                    ->user(osf_configure_get_user_uri($user_uid))
                    ->send(new DrupalQuerierExtension());
                    
  if(!$authRegistrarUser->isSuccessful())
  {
    if($authRegistrarUser->error->id != 'WS-AUTH-REGISTRAR-USER-203')
    {
      drupal_set_message(
        t('Couldn\'t register user (%user) to group (%group). Error [%status] %msg (%msg_desc).',
          array(
            '%user' => osf_configure_get_user_uri($user_uid),
            '%group' => osf_get_group_uri($role_id, $role_name),
            '%status' => $authRegistrarUser->getStatus(),
            '%msg' => $authRegistrarUser->getStatusMessage(),
            '%msg_desc' => $authRegistrarUser->getStatusMessageDescription(),
          )
        ),
        'error'
      );      
    }
  }            
}

function osf_configure_osf_user_leave_group($endpoint, $role_id, $role_name, $user_uid)
{
  $authRegistrarUser = new AuthRegistrarUserQuery($endpoint->uri, $endpoint->app_id, $endpoint->api_key, osf_configure_get_first_user_uri());
  
  $authRegistrarUser->group(osf_get_group_uri($role_id, $role_name))
                    ->leaveGroup()
                    ->user(osf_configure_get_user_uri($user_uid))
                    ->send(new DrupalQuerierExtension());
                    
  if(!$authRegistrarUser->isSuccessful())
  {
    drupal_set_message(
      t('Couldn\'t unregister user (%user) from group (%group). Error [%status] %msg (%msg_desc).',
        array(
          '%user' => osf_configure_get_user_uri($user_uid),
          '%group' => osf_get_group_uri($role_id, $role_name),
          '%status' => $authRegistrarUser->getStatus(),
          '%msg' => $authRegistrarUser->getStatusMessage(),
          '%msg_desc' => $authRegistrarUser->getStatusMessageDescription(),
        )
      ),
      'error'
    );      
  }            
}

function osf_configure_get_dataset_uri_from_scid($scdid, $sceid)
{
  $uri = db_query("SELECT datasets.uri FROM {osf_configure_datasets} AS datasets 
                   WHERE datasets.scdid = :scdid AND datasets.sceid = :sceid", 
                  array(':scdid' => $scdid, ':sceid' => $sceid))->fetchField();
                  
  return($uri);
}

function osf_configure_get_dataset_name_from_scid($scdid, $sceid)
{
  $name = db_query("SELECT datasets.machine_name FROM {osf_configure_datasets} AS datasets 
                    WHERE datasets.scdid = :scdid AND datasets.sceid = :sceid", 
                   array(':scdid' => $scdid, ':sceid' => $sceid))->fetchField();
                  
  return($name);
}

function osf_configure_osf_get_registered_webservices($endpoint)
{
  $webservices = array();
  
  $authLister = new AuthListerQuery($endpoint->uri, $endpoint->app_id, $endpoint->api_key, osf_configure_get_first_user_uri());
      
  $authLister->getRegisteredWebServiceEndpointsUri()
             ->mime('resultset')
             ->send(new DrupalQuerierExtension());
  
  if(!$authLister->isSuccessful())      
  {
    drupal_set_message(t("An error occured when we tried to get the list of all registered web service endpoint from the OSF instance."), 'warning', TRUE);
  }
  else
  {   
    $resultset = $authLister->getResultset()->getResultset();
    
    foreach($resultset['unspecified'] as $list)
    {
      foreach($list['http://www.w3.org/1999/02/22-rdf-syntax-ns#li'] as $ws)
      {
        $webservices[] = $ws['uri'];
      }
    }
  }
    
  return($webservices);
}