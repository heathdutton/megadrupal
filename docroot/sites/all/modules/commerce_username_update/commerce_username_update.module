<?php

/**
 * @file
 * Updates usernames created during anonymous checkout as e-mail addresses as in
 * the Commerce 1.10 update process.
 */


/**
 * Implements hook_menu().
 */
function commerce_username_update_menu() {
  $items = array();

  $items['admin/commerce/config/username-update'] = array(
    'title' => 'Username update',
    'description' => 'Update usernames that were created as e-mail addresses.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_username_update_admin_form'),
    'access arguments' => array('process commerce username update'),
    'file' => 'includes/commerce_username_update.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_username_update_permission() {
  return array(
    'process commerce username update' => array(
      'title' => t('Process Commerce username update'),
      'description' => t('Allows users to process the username update from Commerce 1.10.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Returns the number of usernames that look like e-mail addresses.
 */
function commerce_username_update_email_username_count() {
  return db_query("SELECT COUNT(*) FROM {users} WHERE name LIKE '%@%'")->fetchField();
}

/**
 * Updates the username of an account.
 *
 * @param $uid
 *   The uid of the account to update.
 * @param $name
 *   The current username of the account.
 */
function commerce_username_update_account_username($uid, $name) {
  // Use a pseudo-order object to reset usernames using the updated
  // [commerce-order:mail_username] token in Commerce 1.10.
  $order = new stdClass();
  $order->mail = $name;

  $new_name = commerce_order_get_properties($order, array(), 'mail_username');

  db_update('users')
    ->fields(array(
      'name' => $new_name,
    ))
    ->condition('uid', $uid)
    ->execute();
}

/**
 * Sets a batch operation to update usernames as in the Commerce 1.10 update.
 *
 * This function does not call batch_process(), so if you are not calling this
 * function from a form submit handler, you must process yourself.
 */
function commerce_username_update_batch_set() {
  // Create the batch array.
  $batch = array(
    'title' => t('Updating usernames'),
    'operations' => array(
      array('_commerce_username_update_batch_process', array()),
    ),
    'finished' => '_commerce_username_update_batch_finished',
  );

  batch_set($batch);
}

/**
 * Processes the batch update of usernames.
 */
function _commerce_username_update_batch_process(&$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = commerce_username_update_email_username_count();
  }

  // Update 100 usernames at a time.
  $names = db_query("SELECT uid, name FROM {users} WHERE name LIKE '%@%' LIMIT 100")->fetchAllKeyed();

  foreach ($names as $uid => $name) {
    commerce_username_update_account_username($uid, $name);
    $context['sandbox']['progress']++;
  }

  // Set the results counter to the number updated.
  $context['results']['count'] = $context['sandbox']['progress'];

  // Update the finished counter to show the percentage completed.
  $context['finished'] = empty($names) ? 1 : ($context['sandbox']['progress'] / $context['sandbox']['max']);
}

/**
 * Displays a message upon completion of a batched sell price pre-calculation.
 */
function _commerce_username_update_batch_finished($success, $results, $operations) {
  $message = format_plural($results['count'], '1 username was successfully updated.', '@count usernames were successfully updated.');
  drupal_set_message($message);

  if (empty($success)) {
    drupal_set_message(t('The username update finished with an error. Please refer to the recent log messages to determine what went wrong.'));
  }
}
