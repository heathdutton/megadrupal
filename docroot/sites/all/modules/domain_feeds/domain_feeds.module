<?php

/**
 * @file
 * On behalf implementation of Feeds mapping API for domain_feeds.module.
 */

/**
 * Implements hook_feeds_processor_targets_alter().
 *
 * @see FeedsNodeProcessor::getMappingTargets().
 */
function domain_feeds_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  // We support only user and node entities to import.
  $available_entity_types = array(
    'user' => array(
      'field' => 'domain_user',
      'title' => 'Assign to',
      'exclude' => array('all', 'domain_source'),
    ),
    'node' => array(
      'field' => 'domains',
      'title' => 'Publish to',
      'exclude' => array(),
    ),
  );

  if (!isset($available_entity_types[$entity_type])) {
    // We don't interact with such entities.
    return;
  }

  // Pick configuration based on the type of entity.
  $entity_type_config = $available_entity_types[$entity_type];

  $options = array();
  // Get the display format of the form element.
  $format = domain_select_format();
  foreach (domain_domains() as $data) {
    // Cannot pass zero in checkboxes.
    $key = ($data['domain_id'] == 0) ? -1 : $data['domain_id'];
    // The domain must be valid.
    if ($data['valid'] || user_access('access inactive domains')) {
      // Checkboxes must be filtered, select lists should not.
      $targets[$entity_type_config['field'] . ':'. $key] = array(
        'name' => $entity_type_config['title'] . ': '. (empty($format) ? check_plain($data['sitename']) : $data['sitename']),
        'callback' => 'domain_feeds_set_target',
        'description' => t('Domain access options.'),
      );
    }
  }

  // Multiple domains in a cell.
  $targets[$entity_type_config['field'] . ':multiple'] = array(
    'name' => $entity_type_config['title'] . ' (multiple)',
    'callback' => 'domain_feeds_set_target_multiple',
    'description' => t('Domain access options.'),
  );

  // Set domain source data.
  if (module_exists('domain_source') && !in_array('domain_source', $entity_type_config['exclude'])) {
    $targets[$entity_type_config['field'] . ':domain_source'] = array(
      'name' => 'Domain Source',
      'callback' => 'domain_feeds_set_domain_source',
      'description' => t('Domain access options.'),
    );
  }

  // Publish to All.
  if (!in_array('all', $entity_type_config['exclude'])) {
    $targets[$entity_type_config['field'] . ':all'] = array(
      'name' => $entity_type_config['title'] . ': All',
      'callback' => 'domain_feeds_set_target_all',
      'description' => t('Domain access options.'),
    );
  }
}

/**
 * Callback for mapping. Here is where the actual mapping happens.
 *
 * When the callback is invoked, $target contains the name of the field the
 * user has decided to map to and $value contains the value of the feed item
 * element the user has picked as a source.
 */
function domain_feeds_set_target($source, $entity, $target, array $values, $mapping) {
  list($target, $sub_field) = explode(':', $target);
  $field = !empty($entity->$target) ? $entity->$target : array();

  $value = reset($values);

  if ($sub_field === -1 && $value) {
    $field[$sub_field] = -1;
  }
  else if ($value) {
    $field[$sub_field] = $sub_field;
  }

  if (count($field)) {
    $entity->$target = $field;
    $entity->domain_site = 0;
  }

  return $entity;
}

/**
 * Callback for mapping. Here is where the actual mapping happens.
 *
 * When the callback is invoked, $target contains the name of the field the
 * user has decided to map to and $value contains comma-separated list of values
 * of the feed item element the user has picked as a source.
 */
function domain_feeds_set_target_multiple($source, $entity, $target, array $values, $mapping) {
  $value = reset($values);
  $values = explode(',', $value);
  list($target, $sub_field) = explode(':', $target);
  foreach (domain_id_list() as $domain_id) {
    $value = in_array($domain_id, $values) ? '1' : '0';
    $key = ($domain_id == 0) ? -1 : $domain_id;
    domain_feeds_set_target($source, $entity, $target . ':' . $key, array($value), $mapping);
  }
}

/**
 * Callback for mapping. Here is where the actual mapping happens.
 * 
 * When the callback is invoked, $target contains the name of the field the
 * user has decided to map to and $value contains the value of the feed item
 * element the user has picked as a source.
 */
function domain_feeds_set_target_all($source, $entity, $target, array $values, $mapping) {
  if (reset($values)) {
    $entity->domain_site = 1;
    $entity->domain_source = 0;
  }
  
  return $entity;
}

/**
 * Callback for mapping. Here is where the actual mapping happens.
 *
 * When the callback is invoked, $value contains source domain ID we use to map
 *  node to a domain_source data structure.
 */
function domain_feeds_set_domain_source($source, $entity, $target, array $values, $mapping) {
  $value = reset($values);
  $entity->domain_site = 0;
  $entity->domain_source = $value;

  return $entity;
}
