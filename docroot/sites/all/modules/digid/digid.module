<?php
/**
 * @file
 * DigiD module.
 *
 * Allows users to log into your site using DigiD.
 */

/**
 * Define errormessage as constant, because it's a default message required for implementation acceptance.
 */
define('DIGID_ERRORMESSAGE', 'There has been an error in the communication with DigiD. Please try again later.');

// Error messages
define('DIGID_SUCCESS',                   '0000');
define('DIGID_UNAVAILABLE',               '0001');
define('DIGID_TEMPORARY_UNAVAILABLE_1',   '0003');
define('DIGID_VERIFICATION_FAILED_1',     '0004');
define('DIGID_VERIFICATION_FAILED_2',     '0007');
define('DIGID_ILLEGAL_REQUEST',           '0030');
define('DIGID_ERROR_APP_ID',              '0032');
define('DIGID_ERROR_ASELECT',             '0033');
define('DIGID_CANCELLED',                 '0040');
define('DIGID_BUSY',                      '0050');
define('DIGID_INVALID_SESSION',           '0070');
define('DIGID_WEBSERVICE_NOT_ACTIVE',     '0080');
define('DIGID_WEBSERVICE_NOT_AUTHORISED', '0099');
define('DIGID_TEMPORARY_UNAVAILABLE_2',   '010c');

/**
 * Implementation of hook_help().
 */
function digid_help($path, $arg) {
  switch ($path) {
    case 'admin/help#digid':
      $output = '<p>'. t('Allows users to log into your site using DigiD.') .'</p>';
      $output .= '<p>'. t('More information about DigiD is available at @url', array('@url' => l('DigiD.nl', 'http://www.digid.nl'))) .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_permission().
 */
function digid_permission() {
  return array(
    'access DigiD administration page' => array(
      'title' => t('Administer DigiD settings'),
      'description' => t('Perform administration tasks on DigiD settings.'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function digid_menu() {
  $items = array();

  $items['digid/authenticate'] = array(
    'title' => 'DigiD login',
    'page callback' => 'digid_authentication_page',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );

  $items['digid/login'] = array(
    'title' => 'DigiD login',
    'page callback' => 'digid_login_page',
    'access callback' => 'user_is_anonymous',
  );

  $items['admin/config/digid'] = array(
    'title' => 'DigiD settings',
    'description' => 'DigiD configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('digid_settings'),
    'access arguments' => array('access DigiD administration page'),
  );

  $items['digid/simulate'] = array(
    'title' => 'DigiD simulate login',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('digid_simulate_login_form'),
    'access callback' => 'user_is_anonymous',
  );

  return $items;
}

/**
 * Callback for: admin/settings/digid.
 *
 * System settings form for DigiD.
 */
function digid_settings() {
  $form['digid'] = array(
    '#type' => 'fieldset',
    '#title' => t('DigiD settings'),
  );
  $form['digid']['digid_simulate'] = array(
    '#type' => 'checkbox',
    '#title' => t('Simulate DigiD'),
    '#default_value' => variable_get('digid_simulate', FALSE),
    '#description' => t('DigiD will be simulated, no connection to DigiD server will be made.'),
  );
  $form['digid']['digid_a-select_server'] = array(
    '#type' => 'textfield',
    '#title' => t('A-Select Server URL'),
    '#default_value' => variable_get('digid_a-select_server', ''),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['digid']['digid_proxy'] = array(
    '#type' => 'textfield',
    '#title' => t('Proxy URL'),
    '#default_value' => variable_get('digid_proxy', ''),
    '#description' => t('Enter the proxy url here in case all communication to digid should be done via a proxy. Example: proxy.com:8080'),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => FALSE,
  );
  $form['digid']['digid_a-select_server_id'] = array(
    '#type' => 'textfield',
    '#title' => t('A-Select Server ID'),
    '#default_value' => variable_get('digid_a-select_server_id', ''),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['digid']['digid_app_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Application ID'),
    '#default_value' => variable_get('digid_app_id', ''),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['digid']['digid_shared_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Shared secret'),
    '#default_value' => variable_get('digid_shared_secret', ''),
    '#size' => 40,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['digid']['digid_rid'] = array(
    '#type' => 'select',
    '#title' => t('Automatically assigned role'),
    '#default_value' => variable_get('digid_rid', ''),
    '#required' => TRUE,
    '#options' => user_roles(),
  );
  $form['digid']['digid_verify_certificate'] = array(
    '#type' => 'checkbox',
    '#title' => t('Verify the certificate of the connection'),
    '#default_value' => variable_get('digid_verify_certificate', TRUE),
  );

  $form['digid']['digid_login_redirect'] = array(
    '#type' => 'textfield',
    '#title' => t('Redirect path after succesful login'),
    '#default_value' => variable_get('digid_login_redirect', FALSE),
    '#size' => 40,
  );
  $form['digid']['digid_max_sessions'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of sessions'),
    '#default_value' => variable_get('digid_max_sessions', 10),
    '#size' => 40,
  );
  $form['digid']['digid_last_action'] = array(
    '#type' => 'textfield',
    '#title' => t('Time since last action'),
    '#default_value' => variable_get('digid_last_action', 3600),
    '#size' => 40,
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function digid_form_user_profile_form_alter(&$form, $form_state, $form_id) {
  $account = $form['#user'];

  // DigiD users have no password.
  if (isset($account->roles[variable_get('digid_rid', 0)])) {
    $form['account']['pass'] = array();
    $form['account']['current_pass'] = array();
    foreach ($form['#validate'] as $key => $value) {
      if ($value == 'user_validate_current_pass') {
        unset($form['#validate'][$key]);
        break;
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function digid_theme() {
  return array(
    'digid_max_exceeded' => array(),
  );
}

function theme_digid_max_exceeded() {
  return t('Login has been cancelled because the maximum amount of logged in users has been exceeded. You are not logged in with DigiD. !retry_link', array('!retry_link' => l(t('Retry'), current_path())));
}

/**
 * Form callback for: digid/simulate.
 */
function digid_simulate_login_form() {
  $form['bsn'] = array(
    '#type' => 'textfield',
    '#title' => t('BSN'),
    '#required' => TRUE,
  );

  $form['actions'] = array(
    '#type' => 'actions',
  );

  $form['actions']['login'] = array(
    '#type' => 'submit',
    '#value' => t('Login'),
  );

  return $form;
}

/**
 * Form validate callback for: digid/simulate.
 */
function digid_simulate_login_form_validate($form, &$form_state) {
  if (!preg_match('/^[0-9]+$/', $form_state['values']['bsn'])) {
    form_set_error('bsn', t('Please enter a numeric value.'));
  }
}

/**
 * Form submit callback for: digid/simulate.
 */
function digid_simulate_login_form_submit($form, &$form_state) {
  digid_authentication(array(
    'uid' => $form_state['values']['bsn'],
    'betrouwbaarheidsniveau' => 1,
  ));
  $form_state['redirect'] = '<front>';
}

/**
 * Callback for: digid/login.
 *
 * Initiates DigiD Session and redirect user to DigiD Login page.
 */
function digid_login_page() {
  global $base_url;

  if (variable_get('digid_simulate', FALSE)) {
    drupal_goto('digid/simulate');
  }

  drupal_page_is_cacheable(FALSE);

  $db_query = db_select('sessions', 's')
    ->condition('timestamp', REQUEST_TIME - variable_get('digid_last_action', 3600), '>');
  $db_query->addExpression('count(*)', 'sessions');

  if ($role = variable_get('digid_rid', FALSE)) {
    $db_query->join('users_roles', 'ur', 'ur.uid = s.uid');
    $db_query->condition('ur.rid', $role);
  }

  $count = $db_query->execute()->fetchColumn();
  if ($count >= variable_get('digid_max_sessions', 10)) {
    watchdog('digid', 'Maximum number of sessions exceeded.');
    return theme('digid_max_exceeded');
  }

  // Make sure the redirect is to a https address.
  if (isset($_GET['dest'])) {
    $options['query']['destination'] = $_GET['dest'];
  }
  if (isset($_GET['cancel_dest'])) {
    $options['query']['cancel_destination'] = $_GET['cancel_dest'];
  }

  $options['base_url'] = str_replace('http://', 'https://', $base_url);
  $options['absolute'] = TRUE;

  // Build and call the URL.
  $query = array(
    'request' => 'authenticate',
    'a-select-server' => variable_get('digid_a-select_server_id', ''),
    'app_id' => variable_get('digid_app_id', ''),
    'shared_secret' => variable_get('digid_shared_secret', ''),
    'app_url' => url('digid/authenticate', $options),
  );
  $uri = url(variable_get('digid_a-select_server', ''), array('query' => $query));

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $uri);

  if ($proxy = variable_get('digid_proxy', FALSE)) {
    curl_setopt($ch, CURLOPT_PROXY, $proxy);
  }

  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, variable_get('digid_verify_certificate', TRUE));

  $request = curl_exec($ch);
  curl_close($ch);

  // Parse the response.
  if (isset($request)) {
    parse_str($request, $result);

    // Validate result
    $check = TRUE;
    // Should be alphanumeric.
    $check = $check && isset($result['rid']) && ctype_alnum($result['rid']);
    // URL.
    $check = $check && isset($result['as_url']) && valid_url($result['as_url']);
    // Should be alphanumeric.
    $check = $check && isset($result['a-select-server']) && ctype_alnum($result['a-select-server']);
    // Should be alphanumeric.
    $check = $check && isset($result['result_code']) && ctype_digit($result['result_code']);
    // Should be numeric and 4 characters.
    if (isset($result['result_code']) && $result['result_code'] == DIGID_SUCCESS && $check) {
      // Build redirect URL.
      $query = array('rid' => $result['rid'], 'a-select-server' => $result['a-select-server']);
      $redirecturl = url($result['as_url'], array('query' => $query));
      // Redirect user.
      drupal_goto($redirecturl);
    }
    elseif (isset($result['result_code']) && $result['result_code'] == DIGID_CANCELLED) {
      // Login was cancelled.
      watchdog('DigiD', 'DigiD login has failed: !error', array('!error' => _digid_error($result['result_code'])), WATCHDOG_ERROR);
      drupal_set_message(t('Login has been cancelled. You are not logged in with DigiD.'), 'error');
      drupal_goto('<front>');
    }
    else {
      // Error handling.
      watchdog('DigiD', 'DigiD login has failed: !error', array('!error' => _digid_error($result['result_code'])), WATCHDOG_ERROR);
      drupal_set_message(t(DIGID_ERRORMESSAGE), 'error');
      drupal_goto('<front>');
    }
  }
  else {
    watchdog('DigiD', 'DigiD login has failed: !error', array('!error' => _digid_error(DIGID_UNAVAILABLE)), WATCHDOG_ERROR);
    drupal_set_message(t(DIGID_ERRORMESSAGE), 'error');
    drupal_goto('<front>');
  }
}

/**
 * Callback for: test/authenticate.
 *   DigiD Authentication page.
 */
function digid_authentication_page() {
  $result = digid_validate();
  switch ($result['status']) {
    case 'success':
      digid_authentication($result);
      break;
    case 'failed':
      drupal_set_message(t(DIGID_ERRORMESSAGE), 'error');
      break;
    case 'cancelled':
      if (isset($_GET['cancel_destination'])) {
        $_GET['destination'] = $_GET['cancel_destination'];
      }
      drupal_set_message(t('Login has been cancelled. You are not logged in with DigiD.'), 'warning');
      break;
  }

  drupal_goto('<front>');
}

/**
 * Helper function to verify credentials against DigiD API.
 *
 * @return array
 *  Resultset from digid.
 *
 * @todo better querystring handling
 */
function digid_validate() {
  // Validate returned variables.
  $check = TRUE;
  // Should be alphanumeric.
  $check = $check && isset($_GET['aselect_credentials']) && ctype_alnum($_GET['aselect_credentials']);
  // Should be alphanumeric.
  $check = $check && isset($_GET['rid']) && ctype_alnum($_GET['rid']);
  // Should be alphanumeric.
  $check = $check && isset($_GET['a-select-server']) && ctype_alnum($_GET['a-select-server']);

  if (!$check) {
    $result['status'] = 'failed';
  }
  else {
    // Build and call URL.
    $query = array(
      'request' => 'verify_credentials',
      'rid' => $_GET['rid'],
      'aselect_credentials' => $_GET['aselect_credentials'],
      'shared_secret' => variable_get('digid_shared_secret', ''),
      'a-select-server' => $_GET['a-select-server'],
    );
    $uri = url(variable_get('digid_a-select_server', ''), array('query' => $query));

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $uri);

    if ($proxy = variable_get('digid_proxy', FALSE)) {
      curl_setopt($ch, CURLOPT_PROXY, $proxy);
    }

    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, variable_get('digid_verify_certificate', TRUE));

    $request = curl_exec($ch);
    curl_close($ch);

    // Parse the response.
    if (isset($request)) {
      parse_str($request, $result);

      // Validate result.
      $check = TRUE;
      // Should be numeric.
      $check = $check && isset($result['uid']) && ctype_digit($result['uid']);
      // Should be alphanumeric.
      $check = $check && isset($result['app_id']) && ctype_alnum($result['app_id']);
      // Should be alphanumeric.
      $check = $check && isset($result['organization']) && ctype_alnum($result['organization']);
      // Should be numeric and 2 characters.
      $check = $check && isset($result['betrouwbaarheidsniveau']) && ctype_digit($result['betrouwbaarheidsniveau']);
      // Should be alphanumeric.
      $check = $check && isset($result['rid']) && ctype_alnum($result['rid']);
      // Should be alphanumeric.
      $check = $check && isset($result['a-select-server']) && ctype_alnum($result['a-select-server']);
      // Should be numeric and 4 characters.
      $check = $check && isset($result['result_code']) && ctype_digit($result['result_code']);

      if ($result['result_code'] == DIGID_SUCCESS && $check) {
        $result['status'] = 'success';
      }
      elseif ($result['result_code'] == DIGID_CANCELLED) {
        $result['status'] = 'cancelled';
      }
      else {
        $result['status'] = 'failed';
        watchdog('DigiD', 'DigiD login has failed: !error', array('!error' => _digid_error($result['result_code'])), WATCHDOG_ERROR);
      }
    }
    else {
      watchdog('DigiD', 'DigiD login has failed: !error', array('!error' => _digid_error(DIGID_UNAVAILABLE)), WATCHDOG_ERROR);
      drupal_set_message(t(DIGID_ERRORMESSAGE), 'error');
      drupal_goto('<front>');
    }
  }
  return $result;
}

/**
 * Helper function to Authenticate user or create new one.
 *
 *  @param $result array
 *   Result from DigiD.
 */
function digid_authentication($result) {
  global $user;

  // Encode BSN to hash for authname field.
  $authname = drupal_hash_base64($result['uid'] . drupal_get_hash_salt());
  user_external_login_register($authname, 'digid');

  // Add the DigiD role?
  if (!isset($user->roles[variable_get('digid_rid', 0)])) {
    $role = user_role_load(variable_get('digid_rid', 0));
    $user->roles[$role->rid] = $role->name;
    user_save($user);
  }

  $digid_result = array(
    'bsn' => $result['uid'],
    'betrouwbaarheidsniveau' => $result['betrouwbaarheidsniveau'],
  );

  // Log the user in.
  user_login_finalize($digid_result);

  // Store the DigiD info in the session.
  $_SESSION['digid'] = $digid_result;

  // Redirect to final destination.
  if ($redirect = variable_get('digid_login_redirect', FALSE)) {
    drupal_goto($redirect);
  }
}

/**
 * Implementation of hook_user_delete().
 */
function digid_user_delete($account) {
  $query = db_query("DELETE FROM {authmap} WHERE uid = :uid AND module = 'digid'", array(
    ':uid' => $account->uid,
  ));
  if ($query->rowCount()) {
    drupal_set_message(t('DigiD account has been deleted.'));
  }
}

/**
 * Helper Function to translate returned error code to readable message.
 *
 *  @param $result_code int
 *    Errorcode from DigiD.
 *
 *  @return string
 *    Errorstring according to DigiD documentation..
 */
function _digid_error($result_code) {
  $messages = array(
    DIGID_SUCCESS                   => t('No error.'),
    DIGID_UNAVAILABLE               => t('DigiD is temporarily unavailable.'),
    DIGID_TEMPORARY_UNAVAILABLE_1   => t('DigiD could not proces the request. DigiD is temporarily unavailable.'),
    DIGID_VERIFICATION_FAILED_1     => t('Verification of authentication failed.'),
    DIGID_VERIFICATION_FAILED_2     => t('Verification of authentication failed.'),
    DIGID_ILLEGAL_REQUEST           => t('Illegal request.'),
    DIGID_ERROR_APP_ID              => t('App_url parameter is not valid.'),
    DIGID_ERROR_ASELECT             => t('A-select-server parameter is not valid.'),
    DIGID_CANCELLED                 => t('The authentication proces is canceled'),
    DIGID_BUSY                      => t('DigiD is busy. Try the request again.'),
    DIGID_INVALID_SESSION           => t('Invalid session. The session does not exists at DigiD.'),
    DIGID_WEBSERVICE_NOT_ACTIVE     => t('The webservice is not active.'),
    DIGID_WEBSERVICE_NOT_AUTHORISED => t('Webservice is not authorised.'),
    DIGID_TEMPORARY_UNAVAILABLE_2   => t('DigiD is temporarily unavailable.'),
  );

  return isset($messages[$result_code]) ? $messages[$result_code] : t('Unknown error.');
}
