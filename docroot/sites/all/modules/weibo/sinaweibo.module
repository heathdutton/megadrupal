<?php


/**
 * @file
 *
 * This module enable the users connect with Sina Weibo.
 *
 */

/**
 * Implements hook_menu().
 */
function sinaweibo_menu() {
  $items = array();
  $items['weibo/redirect'] = array(
    'type' => MENU_CALLBACK,
    'description' => 'Connect the user with their Weibo account',
    'page callback' => 'weibo_signin_redirect',
    'access callback' => TRUE,
  );
  $items['weibo/disconnect'] = array(
    'type' => MENU_CALLBACK,
    'description' => 'Disconnect the user with their Weibo account',
    'page callback' => 'weibo_disconnect',
    'access callback' => TRUE,
  );
  $items['weibo/callback'] = array(
    'type' => MENU_CALLBACK,
    'description' => 'Connect the user with their Weibo account callback',
    'page callback' => 'weibo_auth_callback',
    'access callback' => TRUE,
  );
  $items['admin/config/people/sinaweibo'] = array(
    'title' => 'Sina Weibo Connect',
    'description' => 'Configure required settings for Sina Weibo integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sinaweibo_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'sinaweibo.pages.inc',
  );
  $items['weibo/email'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_enter_email_page',
    'access callback' => 'user_is_logged_in',
  );
  return $items;
}

/**
 * Implements hook_user_categories().
 */
function sinaweibo_user_categories() {
  return array(
    array(
      'name' => 'weibo',
      'title' => t('Sina Weibo'),
      'weight' => 2,
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function sinaweibo_menu_alter(&$callbacks) {
  $callbacks['user/%user_category/edit/weibo']['page callback'] = 'sinaweibo_user_settings';
  $callbacks['user/%user_category/edit/weibo']['module'] = 'sinaweibo';
  $callbacks['user/%user_category/edit/weibo']['page arguments'] = array(1);
  $callbacks['user/%user_category/edit/weibo']['file'] = 'sinaweibo.pages.inc';
}

/**
 * The callback function for auth.
 */
function weibo_auth_callback() {
  global $user;
  module_load_include('php', 'sinaweibo', 'saetv2.ex.class');
  $key = variable_get('weibo_consumer_key', '');
  $secret = variable_get('weibo_consumer_secret', '');
  if ($_REQUEST['code']) {
    global $base_url;
    $o = new SaeTOAuthV2($key, $secret);
    $keys = array();
	  $keys['code'] = $_REQUEST['code'];
	  $keys['redirect_uri'] = $base_url . '/weibo/callback';
	  try {
		  $token = $o->getAccessToken( 'code', $keys ) ;
	  } catch (OAuthException $e) {
	  }
    if ($token) {
      $_SESSION['weibooauth_token'] = $token;
      $weibo_uid = $_SESSION['weibooauth_token']['uid'];
    }
    if ($user->uid == 0) {
      if ($uid = db_select('weibo_account')
			->fields('weibo_account', array('uid'))
			->condition('weibo_uid', $weibo_uid)
			->execute()
			->fetchField()) {
        // Sign in with Sina Weibo account.
        $user = user_load($uid);
      }
      else {
        // Sign up with Sina Weibo account.
        if(variable_get('weibo_enable_signup')) {
          sinaweibo_user_signup(TRUE);
          $post_message = variable_get('weibo_post_message');
          if($post_message) {
            post_to_weibo($post_message);
          }
        } else {
          drupal_set_message(t('You have to sign up with your email address firstly.'), 'error');
        }
      }
    }
    elseif ($user->uid > 0 && $weibo_uid > 0) {
      // Connect the account to Sina Weibo.
      $uid = db_select('weibo_account')
			->fields('weibo_account', array('uid'))
			->condition('weibo_uid', $weibo_uid)
			->execute()
			->fetchField();
      if (!$uid) {
        sinaweibo_user_signup(FALSE);
        drupal_set_message(t('You have connected with Sina Weibo account.'));
      }
      else {
        $username = user_load($uid)->name;
        drupal_set_message(t('The Sina Weibo account already connected with @name. You should disconnect that account firstly.', array('@name' => $username)), 'error');
      }
    }
    drupal_goto($_SESSION['ref']);
  }
}

/**
 * Begin the auth process.
 */
function weibo_signin_redirect() {
  if (!isset($_GET['token']) || !drupal_valid_token($_GET['token'], 'weibo/connect', TRUE)) {
      return drupal_access_denied();
  }
  $_SESSION['ref'] = $_SERVER['HTTP_REFERER'];
  global $base_url;
  module_load_include('php', 'sinaweibo', 'saetv2.ex.class');
  $key = variable_get('weibo_consumer_key', '');
  $secret = variable_get('weibo_consumer_secret', '');
  $o = new SaeTOAuthV2($key, $secret);
  $aurl = $o->getAuthorizeURL($base_url . '/weibo/callback');
  drupal_goto($aurl);
}

function weibo_signin_button() {
  $img = variable_get('weibo_button_url', 'http://www.sinaimg.cn/blog/developer/wiki/240.png');
  return l(theme('image', array('path' => $img, 'alt' => t('Sign in with Weibo'))), 'weibo/redirect', array('html' => TRUE, 'query' => array('token' => 'login')));
}

/**
 * Implements hook_form_alter().
 */
function sinaweibo_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_login' || $form_id == 'user_login_block') {
    $items = array();
    $items[] = weibo_signin_button();
    $form['weibo_signin'] = array(
      '#markup' => theme('item_list', array('items' => $items)),
    );
  }

  if ($form_id == 'user_register_form' && variable_get('weibo_enable_signup')) {
    $items = array();
    $items[] = weibo_signin_button();
    $form['weibo_signin'] = array(
      '#markup' => theme('item_list', array('items' => $items)),
    );
  }
}

/**
 * Connect the account with Sina Weibo.
 */
function sinaweibo_user_signup($signup = FALSE) {
  if (isset($_SESSION['weibooauth_token'])) {
    global $user;
    module_load_include('php', 'sinaweibo', 'saetv2.ex.class');
    $key = variable_get('weibo_consumer_key', '');
    $secret = variable_get('weibo_consumer_secret', '');
    $c = new SaeTClientV2($key, $secret, $_SESSION['weibooauth_token']['access_token']);
    $uid_get = $c->get_uid();
    $weibo_uid = $uid_get['uid'];
    if(!$weibo_uid) {
      drupal_set_message(t('Sina oauth is not ready.'), 'error');
      return;
    }
    $user_message = $c->show_user_by_id($weibo_uid);
    if ($signup) {
      $count = db_select('users')
			->fields('users')
			->condition('name', $user_message['name'] . '%', 'like')
			->countQuery()
			->execute()
			->fetchField();
      $suf = ($count > 0) ? $count : '';
      $edit = array(
        'name' => $user_message['name'] . $suf,
        'pass' => user_password(),
        'init' => '',
        'status' => 1,
        'access' => REQUEST_TIME,
        'roles' => array(2 => 'authenticated user'),
      );
      $user = user_save(NULL, $edit);
    }
    db_merge('weibo_account')
    	->key(array('weibo_uid' => $weibo_uid))
    	->fields(array(
      'uid' => $user->uid,
      'oauth_token' => $_SESSION['weibooauth_token']['access_token'],
      'screen_name' => $user_message['screen_name'],
      'name' => $user_message['name'],
    ))
    	->execute();
  }
}

/**
 * Disconnect the account with Sina Weibo.
 */
function weibo_disconnect() {
  global $user;
  if (!isset($_GET['token']) || !drupal_valid_token($_GET['token'], 'weibo/disconnect/'. $user->uid)) {
      return drupal_access_denied();
  }
  if ($user->uid > 0) {
    db_delete('weibo_account')
			->condition('uid', $user->uid)
			->execute();
    drupal_set_message(t('Sina Weibo connection has been reset.'));
  }
  drupal_goto($_SESSION['ref']);
}


function post_to_weibo($content) {
  $key = variable_get('weibo_consumer_key', '');
  $secret = variable_get('weibo_consumer_secret', '');
  $token = $_SESSION['weibooauth_token']['access_token'];
  $c = new SaeTClientV2($key , $secret , $token);
  $uid_get = $c->get_uid();
  if($uid_get) {
    $ret = $c->update($content);  
  }
}

function _enter_email_page() {
  global $user;
  $user = user_load($user->uid);
  if($user->mail) {
    drupal_set_message(t('Your have an email address yet.'), 'error');
    drupal_goto('');
  }
  $output = drupal_get_form('_enter_email');
  return $output;
}

function _enter_email($form, &$form_state) {
  $form['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('Email:'),
    '#size' => '20',
    '#required' => TRUE,
    '#description' => t('Please enter your email address.'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

function _enter_email_form_validate($form, &$form_state) {
  $valid_email = $form_state['values']['mail'];
  if (!valid_email_address($valid_email)) {
    form_set_error('email', t('%email is not a valid e-mail address.', array('%email' => $valid_email)));
  }

  $email_exists = db_select('users')
      ->fields('users', array('mail'))
      ->condition('mail', $valid_email)
      ->execute()
      ->rowCount();
  if($email_exists) {
    form_set_error('email', t('The e-mail address %email is already taken.', array('%email' => $valid_email)));
  }

}

function _enter_email_submit($form, &$form_state) {
  $mail = $form_state['values']['mail'];
  if($mail) {
    global $user;
    $user = user_load($user->uid);
    $edit = array(
      'mail' => $mail
    );
    user_save($user, $edit);
    drupal_set_message(t('Your email address has been updated.'));
    drupal_goto('');
  }
}
