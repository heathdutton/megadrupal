<?php

/**
 * Implements hook_menu()
 */
function simple_regex_filter_menu() {
  $items = array();

  $items['admin/config/content/simple_regex_filter'] = array(
    'title' => 'Simple Regex Filter',
    'description' => 'Configure the Simple Regex Filter module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_regex_filter_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Administration form.
 */
function simple_regex_filter_form($form, &$form_state) {
  $form['simple_regex_filter_filters'] = array(
    '#type' => 'textarea',
    '#title' => t('Filters'),
    '#default_value' => variable_get('simple_regex_filter_filters'),
    '#description' => "Enter the regular expressions to run on nodes and comments, one per line (for example, to filter comments containing the word 'foo', enter '/foo/' without the quotes).  Any node or comment with a title or body that matches any of these regular expressions will not be published.",
    '#required' => FALSE,
  );
  
  return system_settings_form($form);
}

/**
 * Implements hook_permission()
 */
function simple_regex_filter_permission() {
  return array(
    'skip regex filter' => array(
      'title' => t('Skip regex filter'), 
      'description' => t("User's nodes and comments skip the Simple Regex Filter."),
    ),
  );
}

/**
 * Implements hook_node_presave()
 * 
 * If the title or body of the node matches any of the configured filters, set
 * node status to NODE_NOT_PUBLISHED.
 */
function simple_regex_filter_node_presave($node) {
  $filters = _simple_regex_get_filters();

  if(!user_access('skip regex filter')) {
    $body = $node->body['und'][0]['value'];
    $title = $node->title;
    
    $match = _simple_regex_filter_do(array($body, $title), $filters);
    
    if($match) {
      $node->status = NODE_NOT_PUBLISHED;
    }
  }
}

/**
 * Implements hook_comment_presave()
 * 
 * If the subject or body of the comment matches any of the configured filters, 
 * set comment status to COMMENT_NOT_PUBLISHED.
 */
function simple_regex_filter_comment_presave($comment) {
  $filters = _simple_regex_get_filters();

  if(!user_access('skip regex filter')) {
    $body = $comment->comment_body['und'][0]['value'];
    $title = $comment->subject;
    
    $match = _simple_regex_filter_do(array($body, $title), $filters);
    
    if($match) {
      $comment->status = COMMENT_NOT_PUBLISHED;
    }
  }
}

/**
 * Runs the regex filters on the specified strings.
 * 
 * @param $strings
 *   An array of strings to run regexp filters on.
 * 
 * @param $filters
 *   An array of regexp filters to run on the specified strings.  Filters must
 *   be enclosed in slashes, per PHP's preg_match function.
 * 
 * @return
 *   TRUE if any filter matches any string, FALSE otherwise.
 */
function _simple_regex_filter_do($strings, $filters) {
  if(!is_array($strings)) {
    $strings = array($strings);
  }

  foreach($filters as $regex) {
    if(!preg_match('/^\s*$/', $regex)) {      
      foreach($strings as $string) {
        if(preg_match($regex, $string)) {
          return TRUE;
        }
      }
    }
  }
  
  return FALSE;
}

/**
 * Returns an array of regexp filters as defined on the administration page.
 */
function _simple_regex_get_filters() {
  $filters = variable_get('simple_regex_filter_filters');
  $filters = explode("\n", $filters);
  $result = array();
  foreach($filters as $f) {
    $f = trim($f);
    if($f != '') {
      array_push($result, $f);
    }
  }
  return $result;
}
