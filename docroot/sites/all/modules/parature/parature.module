<?php
/**
 * @file
 *   Implements Libraries hooks for the Parature API
 * @author
 *   Andrew MacRobert (drupal.org/user/1374164, "Larksmann")
 */

/**
 * Implements hook_libraries_info().
 */
function parature_libraries_info() {
  $libraries['parature_api'] = array(
    'name' => 'Parature API',
    'download url' => 'http://www.andrewmacrobert.com/parature-api-module',
    'version arguments' => array(
      'file' => 'ParatureAPI.class.php',
      'pattern' => "/define\('PARATURE_API_VERSION', '(.*)'\);/",
    ),
    'files' => array(
      'php' => array(
        'ParatureAPI.class.php',
        'ParatureObject.class.php',
      ),
    ),
    'callbacks' => array(
      'post-load' => array(
        'parature_credentials',
      ),
    ),
  );

  return $libraries;
}

/**
 * Passes credentials from Drupal to Parature API after library has been loaded.
 */
function parature_credentials($library, $version, $variant) {
  $credentials = array(
    'hostname' => variable_get('parature_api_hostname'),
    'token' => variable_get('parature_api_token'),
    'account_id' => variable_get('parature_api_account_id'),
    'department_id' => variable_get('parature_api_department_id'),
  );
  ParatureCredentials::load($credentials);
}

/**
 * Implements hook_menu().
 */
function parature_menu() {
  return array(
    'admin/config/parature' => array(
      'title' => 'Parature',
      'description' => 'Parature configuration',
      'position' => 'right',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('administer parature'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
    ),
    'admin/config/parature/parature_api' => array(
      'title' => 'Parature API Settings',
      'description' => 'Set default Parature connection credentials.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('parature_settings'),
      'access arguments' => array('administer parature'),
      'type' => MENU_NORMAL_ITEM,
    ),
  );
}

/**
 * Implements hook_permission().
 */
function parature_permission() {
  return array(
    'administer parature' => array(
      'title' => t('Administer Parature API settings'),
      'description' => t('Set the Parature API token and other settings.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Administration form for setting Parature API credentials.
 */
function parature_settings() {
  $items = array();

  $items['parature_api_hostname'] = array(
    '#title' => t('Hostname'),
    '#type' => 'textfield',
    '#description' => t('Parature API hostname, ex. s5-sandbox.parature.com'),
    '#default_value' => variable_get('parature_api_hostname'),
  );

  $items['parature_api_token'] = array(
    '#title' => t('Token'),
    '#type' => 'textfield',
    '#description' => t('Parature API token, found in Setup > CSRs > (a CSR with API access)'),
    '#default_value' => variable_get('parature_api_token'),
  );

  $items['parature_api_version'] = array(
    '#title' => t('Version'),
    '#type' => 'textfield',
    '#description' => t('Parature API version'),
    '#default_value' => variable_get('parature_api_version', 'v1'),
    '#disabled' => TRUE,
  );

  $items['parature_api_account_id'] = array(
    '#title' => t('Account ID'),
    '#type' => 'textfield',
    '#description' => t('Parature client Account ID (the pre-hyphen part of a ticket number)'),
    '#default_value' => variable_get('parature_api_account_id'),
  );

  $items['parature_api_department_id'] = array(
    '#title' => t('Department ID'),
    '#type' => 'textfield',
    '#description' => t('Parature department ID'),
    '#default_value' => variable_get('parature_api_department_id'),
  );

  return system_settings_form($items);
}

