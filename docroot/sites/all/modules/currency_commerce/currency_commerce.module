<?php

/**
 * @file
 * Hook implementations and shared functions.
 */

/**
 * Implements hook_commerce_currency_info_alter().
 */
function currency_commerce_commerce_currency_info_alter(&$commerce_currencies, $langcode) {
  ctools_include('export');
  $currencies = ctools_export_crud_load_all('currency');

  // Expose Currency's currencies to Drupal Commerce.
  foreach ($currencies as $currency) {
    if (!isset($commerce_currencies[$currency->ISO4217Code])) {
      $decimals = 0;
      if ($currency->subunits > 0) {
        $decimals = 1;
        while ($currency->subunits > pow(10, $decimals)) {
          $decimals++;
        }
      }
      $commerce_currencies[$currency->ISO4217Code] = array(
        'code' => $currency->ISO4217Code,
        'decimals' => $decimals,
        'numeric_code' => $currency->ISO4217Number,
        'symbol' => $currency->sign,
        'name' => $currency->title,
      );
    }
  }

  // Take over currency formatting and conversion.
  foreach ($commerce_currencies as &$commerce_currency) {
    // Currency can only format amounts in its own currencies.
    if (isset($currencies[$commerce_currency['code']])) {
      $commerce_currency['format_callback'] = 'currency_commerce_format_callback';
    }
    $commerce_currency['conversion_callback'] = 'currency_commerce_conversion_callback';
  }
}

/**
 * Implements hook_commerce_currency_info()'s format_callback callback.
 */
function currency_commerce_format_callback($amount, array $commerce_currency, $object) {
  $amount = commerce_currency_round($amount, $commerce_currency);
  ctools_include('export');
  $currency = ctools_export_crud_load('currency', $commerce_currency['code']);

  return $currency->format((float) $amount);
}

/**
 * Implements hook_commerce_currency_info()'s conversion_callback callback.
 */
function currency_commerce_conversion_callback($amount, $currency_code_source, $currency_code_destination) {
  $commerce_currency_source = commerce_currency_load($currency_code_source);
  $commerce_currency_destination = commerce_currency_load($currency_code_destination);

  // Get the conversion rate. Default to Drupal Commerce's conversion rate.
  $rate = CurrencyExchanger::load($currency_code_source, $currency_code_destination);
  if ($rate === FALSE) {
    $rate = $commerce_currency_source['conversion_rate'] / $commerce_currency_destination['conversion_rate'];
  }

  // Get the precision difference.
  $exponent = $commerce_currency_destination['decimals'] - $commerce_currency_source['decimals'];

  return $amount * pow(10, $exponent) * $rate;
}
