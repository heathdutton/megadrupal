<?php

/**
 * @file
 * Provides the Gestpay/Easynolo (BancaSella.it) payment method for Drupal Commerce.
 *
 * Author: Leonardo Finetti
 * URL: http://www.realizzazione-siti-vicenza.com
 */


/**
 * Implements hook_menu().
 */
function commerce_gestpay_menu() {
  $items = array();

  // Define an always accessible path to receive response from Gestpay. (server to server)
  // "URL Server to Server": http://www.example.com/commerce_gestpay_capture
  $items['commerce_gestpay_capture'] = array(
    'page callback' => 'commerce_gestpay_capture',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // When Gestpay payment is finished, gestpay redirect user to this page
  // "URL per risposta positiva": http://www.example.com/commerce_gestpay_continue
  $items['commerce_gestpay_continue'] = array(
    'page callback' => 'commerce_gestpay_continue',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Error callback called by Gestpay
  // "URL per risposta negativa": http://www.example.com/commerce_gestpay_error
  $items['commerce_gestpay_error'] = array(
    'page callback' => 'commerce_gestpay_error',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Commerce Gestpay global settings
  $items['admin/commerce/config/payment-methods/commerce_gestpay'] = array(
    'title' => 'Gestpay global settings',
    'description' => 'Configure Gestpay/Easynolo server settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_gestpay_admin'),
    'access arguments' => array('administer commerce_gestpay settings'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}


/**
 * Implements hook_permission().
 */
function commerce_gestpay_permission() {
  return array(
  'administer commerce_gestpay settings' => array(
      'title' => t('Administer Commerce Gestpay'),
      'description' => t('Allow users to administer Commerce Gestpay settings.'),
    ),
  );
}


/**
 * Implements hook_admin().
 */
function commerce_gestpay_admin() {
  $form = array();

  $form['commerce_gestpay_server'] = array(
    '#type' => 'radios',
    '#title' => t('Gestpay server'),
    '#options' => array(
      'sandbox' => t('Sandbox - use for testing, requires a Free Gestpay/Easynolo demo account'),
      'live' => t('Live - use for processing real transactions'),
    ),
    '#default_value' => variable_get('commerce_gestpay_server', 'sandbox'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_gestpay_commerce_payment_method_info() {
  $payment_methods = array();
  $payment_methods['commerce_gestpay'] = array(
    'active' => TRUE,
    'base' => 'commerce_gestpay',
    'title' => t('Gestpay'),
    'short_title' => t('Gestpay'),
    'display_title' => t('Credit card'),
    'description' => t('Provides Gestpay/Easynolo (BancaSella.it) payment method for Drupal Commerce.'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );
  return $payment_methods;
}


/**
 * Payment method callback: settings form.
 */
function commerce_gestpay_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
    'shopLogin' => '',
    'uicCode' => '242',
    'server' => 'sandbox',
  );

  $form['shopLogin'] = array(
    '#type' => 'textfield',
    '#title' => t('Shop Login'),
    '#description' => t('The shop login code.'),
    '#default_value' => $settings['shopLogin'],
    '#required' => TRUE,
  );

  $form['uicCode'] = array(
    '#type' => 'select',
    '#title' => t('Currency code'),
    '#description' => t('Transactions can only be processed in one of the listed currencies.'),
    '#options' => commerce_gestpay_currencies(),
    '#default_value' => $settings['uicCode'],
  );

  return $form;
}


/**
 * Payment method callback: submit form.
 */
function commerce_gestpay_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  // Shown on checkout pane
  $form['gestpay_information'] = array(
    '#markup' => '<span class="commerce-gestpay-info">' . t('(Continue with checkout to complete payment via Gestpay.)') . '</span>',
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'commerce_gestpay') . '/theme/commerce_gestpay.css'),
    ),
  );
  return $form;
}


/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a WPS form.
 */
function commerce_gestpay_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['shopLogin'])) {
    drupal_set_message(t('Gestpay is not configured for use. No Gestpay Shop Login has been specified.'), 'error');
    return array();
  }

  // Get server type from global settings ('sandbox' or 'live')
  $server = variable_get('commerce_gestpay_server', 'sandbox');

  // Get Shop Login from settings
  $shopLogin = $payment_method['settings']['shopLogin'];

  // Get uicCode from settings (242: Euro)
  $uicCode = $payment_method['settings']['uicCode'];

  // Extact order amount from order object
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $wrapper->commerce_order_total->currency_code->value(); // WARNING: don't mix this currency code with Gestpay uicCode
  $amount = round(commerce_currency_amount_to_decimal($wrapper->commerce_order_total->amount->value(), $currency_code), 2);

  // Call Gestpay WSCryptDecrypt WebService using SOAP
  $client = new SoapClient(commerce_gestpay_wscryptdecrypt_url($server));

  // Set Gestpay parameters
  $params->shopLogin = $shopLogin;
  $params->uicCode = $uicCode;
  $params->amount = $amount;
  $params->shopTransactionId = $order->order_number;
  $params->cardNumber = '';
  $params->expiryMonth = '';
  $params->expiryYear = '';
  $params->buyerName = '';
  $params->buyerEmail = '';
  $params->languageId = '';
  $params->cvv = '';
  $params->customInfo = '';

  // Encrypt data
  $objectresult = $client->Encrypt($params);

  // Get encrypted data
  $simpleresult = $objectresult->EncryptResult;

  // Load XML result
  $xml = simplexml_load_string($simpleresult->any);

  if ($xml->TransactionResult == "OK" ) { // If OK

    // Generate Gestpay parameters
    $a = $shopLogin;
    $b = $xml->CryptDecryptString;

    // Create settings array
    $settings = array(
      'a' => $shopLogin,
      'b' => $xml->CryptDecryptString,
      'server' => $server,
    );

    $link= commerce_gestpay_server_url($server) . "?a=" . $a . "&b=" . $b;
    // Send data to Banca Sella
    header('Location: '.$link);

    // WARNING: Cannot use Drupal form because Gestpay only accepts A and B
    // parameters, while Drupal sends other extra parameters.

    // Return form with updated settings
    return commerce_gestpay_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);

  } else { // If not OK (KO: transaction error; XX: suspended transaction (only with bank transfer))

    // Return error
    drupal_set_message($xml->ErrorDescription, 'error');
    return array();

  }

}


/**
 * Payment method callback: redirect form return validation.
 */
function commerce_gestpay_redirect_form_validate($order, $payment_method) {
  // If for some reason the user does end up returning at the success URL with a
  // Failed payment, go back.
  if (!empty($_POST['payment_status']) && $_POST['payment_status'] == 'Failed') {
    return FALSE;
  }
}


/**
 * Builds a Gestpay form from an order object.
 *
 * @param $order
 *   The fully loaded order being paid for.
 *
 * @return
 *   A renderable form array.
 */
function commerce_gestpay_order_form($form, &$form_state, $order, $settings) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['shopLogin'])) {
    drupal_set_message(t('Gestpay is not configured for use. No Gestpay Shop Login has been specified.'), 'error');
    return array();
  }

  // Get Gestpay parameters from settings
  $a = $settings['a'];
  $b = $settings['a'];

  // Get server type from global settings ('sandbox' or 'live')
  $server = variable_get('commerce_gestpay_server', 'sandbox');

  // Set Gestpay URL to use as form action
  $form['#action'] = commerce_gestpay_server_url($server);

  // Set 'get' method: Gestpay needs parameters from URL
  $form['#method'] = 'get';

  // Set form values
  $form['a'] = array('#type' => 'hidden', '#value' => $a);
  $form['b'] = array('#type' => 'hidden', '#value' => $b);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to Gestpay'),
  );

  return $form;
}


function commerce_gestpay_continue() {
  // Get server type from global settings ('sandbox' or 'live')
  $server = variable_get('commerce_gestpay_server', 'sandbox');

  // Soap call
  $client = new SoapClient(commerce_gestpay_wscryptdecrypt_url($server));

  // Get parameters
  $params->shopLogin = $_GET["a"];
  $params->CryptedString = $_GET["b"];

  // Decrypt parameters
  $objectresult = $client->Decrypt($params);
  $simpleresult = $objectresult->DecryptResult;

  // Load XML result
  $xml = simplexml_load_string($simpleresult->any);

  // Load data from XML
  $xml_result = (string)$xml->TransactionResult;
  $xml_order_id = (string)$xml->ShopTransactionID;
  $xml_amount = ltrim(str_replace('.', '', (string)$xml->Amount), '0');
  $xml_currency = (string)$xml->Currency;

  // Create commerce payment transaction
  $transaction = commerce_payment_transaction_new('commerce_gestpay', $xml_order_id);
  $transaction->instance_id = 'commerce_gestpay|commerce_payment_commerce_gestpay'; // $payment_method['instance_id'];
  $transaction->amount = $xml_amount;
  $transaction->currency_code = _commerce_gestpay_get_currency($xml_currency);
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->message = 'Transaction @order_id completed.';
  $transaction->message_variables = array('@order_id' => $xml_order_id);

  // Save the transaction
  commerce_payment_transaction_save($transaction);

  // Load commerce order
  $order = commerce_order_load($xml_order_id);

  // Proceed to the next pane page
  commerce_payment_redirect_pane_next_page($order);

  // Load the final page
  drupal_goto(commerce_checkout_order_uri($order));
}


function commerce_gestpay_error() {
  // Get server type from global settings ('sandbox' or 'live')
  $server = variable_get('commerce_gestpay_server', 'sandbox');

  // Soap call
  $client = new SoapClient(commerce_gestpay_wscryptdecrypt_url($server));

  $params->shopLogin = $_GET["a"];
  $params->CryptedString = $_GET["b"];

  $objectresult = $client->Decrypt($params);
  $simpleresult = $objectresult->DecryptResult;

  $xml = simplexml_load_string($simpleresult->any);

  // Load commerce order
  $order = commerce_order_load((int)$xml->ShopTransactionID);

  // Proceed to the next pane page
  commerce_payment_redirect_pane_previous_page($order);

  // Set error message
  drupal_set_message(t('Warning: an error has occured during the payment process.'), 'warning');

  // Load the final page
  drupal_goto(commerce_checkout_order_uri($order));
}


function commerce_gestpay_capture() {
  // Get server type from global settings ('sandbox' or 'live')
  $server = variable_get('commerce_gestpay_server', 'sandbox');

  // Soap call
  $client = new SoapClient(commerce_gestpay_wscryptdecrypt_url($server));

  $params->shopLogin = $_GET["a"];
  $params->CryptedString = $_GET["b"];

  $objectresult = $client->Decrypt($params);
  $simpleresult = $objectresult->DecryptResult;

  $xml = simplexml_load_string($simpleresult->any);

  return '<html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /></head><body>OK</body></html>';
}


/**
 * Returns the URL with the WSCryptDecrypt WebService
 */
function commerce_gestpay_wscryptdecrypt_url($server) {
  switch ($server) {
    case 'sandbox':
      return 'https://testecomm.sella.it/gestpay/gestpayws/WSCryptDecrypt.asmx?WSDL';
    case 'live':
      return 'https://ecomms2s.sella.it/gestpay/gestpayws/WSCryptDecrypt.asmx?WSDL';
  }
}


/**
 * Returns the URL to the specified Gestpay server.
 *
 * @param $server
 *   Either sandbox or live indicating which server to get the URL for.
 *
 * @return
 *   The URL to use to submit requests to the Gestpay server.
 */
function commerce_gestpay_server_url($server) {
  switch ($server) {
    case 'sandbox':
      return 'https://testecomm.sella.it/pagam/pagam.aspx';
    case 'live':
      return 'https://ecomm.sella.it/pagam/pagam.aspx';
  }
}


/**
 * Returns an array of all possible currency codes.
 */
function commerce_gestpay_currencies() {
  return array(
    '242' => t('Euro'),
    '1' => t('US dollar'),
    '2' => t('GB pound'),
    '3' => t('Swiss franc'),
    '7' => t('Danish krone'),
    '8' => t('Norwegian krone'),
    '9' => t('Swedish krona'),
    '12' => t('Canadian dollar'),
//     '18' => t('Italian lira'), // not supported by Drupal Commerce
    '71' => t('Japanese yen'),
    '103' => t('Hong Kong dollar'),
    '234' => t('Brazilian real'),
  );
}

function _commerce_gestpay_get_currency($gp_currency) {
  $dc_gp_currencies = array(
    '242' => 'EUR',
    '1' => 'USD',
    '2' => 'GBP',
    '3' => 'CHF',
    '7' => 'DKK',
    '8' => 'NOK',
    '9' => 'SEK',
    '12' => 'CAD',
    '71' => 'JPY',
    '103' => 'HKD',
    '234' => 'BRL',
  );
  if (array_key_exists($gp_currency, $dc_gp_currencies)){
    return $dc_gp_currencies[$gp_currency];
  } else {
    return FALSE;
  }
}
