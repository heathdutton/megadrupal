<?php

/**
 * @file
 * All hooks and block info are found in this file.
 */

/**
 * Implements hook_help().
 */
function jsonp_sparql_help($path, $arg) {
  switch ($path) {
    case 'admin/help#jsonp_sparql':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The goal of this module is to provide an interface for creating blocks with related information retrieved from a SPARQL endpoint. It uses JSONP to make the query burden client-side.') . '</p>';
      $output .= '<h3>' . t('Configuration') . '</h3>';
      $output .= '<dl>';
      $output .= '<dd>' . t('The configuration options for the module is located under <a href="@settings">"Configuration->Search and metadata->Settings for JSONP SPARQL".</a>', array('@settings' => url('admin/config/search/jsonp_sparql'))) . '</dd>';
      $output .= '<dd>' . t('To configure the blocks, go to the block administration under <a href="@blocks">"Structure->Blocks"</a>', array('@blocks' => url('admin/structure/block'))) . '</dd>';
      $output .= '<dd>' . t('In the top of the configuration page you can select how many blocks you want control over. Changing this will make the number of blocks you specified available at the block administration under <a href="@blocks">"Structure->Blocks"</a>, named something like "JSONP SPARQL Block 1".', array('@blocks' => url('admin/structure/block'))) . '</dd>';
      $output .= '<dd>' . t('To make a SPARQL query block do something awesome, simply edit the block you want by clicking "configure" on the block you want to edit. You will be presented with the following settings:') . '</dd>';
      $output .= '<dt>' . t('General settings') . '</dt>';
      $output .= '<dd>' . t('The general settings are very simple to set up, and very self explanatory.') . '</dd>';
      $output .= '<dd>' . t('The first field is "Field to use for input". If you want to make a SPARQL query based on a field in a Drupal content type, this is the place to go. For example if you have a content type "car", you probably have a field called something like "field_brand". And you want to enrich the page with a block displaying something from a SPARQL query. Then this is the place to put the field name. Remember to use the full machine readable name of the field.') . '</dd>';
      $output .= '<dd>' . t('The second option is to provide an input value based on token replacement. If you want to be provided with a helpful tree to insert a token, you should also install !token.', array('!token' => l(t('the Token module'), 'http://drupal.org/project/token')));
      $output .= '<dd>' . t('The third option to use for input is PHP code. This option is only available if you have enabled the PHP module (in core) and have the permission to "use PHP for settings". It is useful to use the PHP for input value if you do not have a plain field value to use, or if your block is not to be displayed on node pages. This could theoretically be the timestamp of a node, the name of a user, or a object value from something else than a node. Remember (obviously) to always return something, or nothing will happen, and no query will be executed. If you were to use the node title, you could for example use this as the input:') . '</dd>';
      $output .= '<dd><code>&lt;?php<br />$node = menu_get_object();<br />return $node->title;<br /> ?&gt;</code></dd>';
      $output .= '<dd>' . t('And if the description was not enough: DO NOT USE THIS IF YOU DON NOT KNOW WHAT YOU ARE DOING! Writing something stupid here, or enabling on the wrong pages, could break your site.') . '</dd>';
      $output .= '<dt>' . t('SPARQL settings') . '</dt>';
      $output .= '<dd>' . t('So, this is where the magic happens. If you have no idea how to create your SPARQL query, you will have trouble tuning this to your preference. But try the (very) simple section about SPARQL queries in this documentation, or just do some googling.') . '</dd>';
      $output .= '<dd>' . t('The SPARQL query is obviously an important part of the configuration of this module (although it does not matter how good you tune this if you have no endpoint to query). This is obviously where you put your SPARQL query. Usually you would want a dynamic value to be a part of this query, which is the value that you provided in the general settings. To use it in the query, enter [1] in the query, where you want the dynamic replacing to take place. It is also possible to have a static query - just do not enter a placeholder in the query. Usually you have tested this query  beforehand (for example directly in the endpoint). If you are using DBPedia as an endpoint, you can use the <a href="@endpoint">Virtuoso SPARQL Query Editor</a> to make sure your query is working.', array('@endpoint' => url('http://dbpedia.org/sparql/'))) . '</dd>';
      $output .= '<dd>' . t('The field "Endpoint to use for JSONP SPARQL query" is exactly what it sounds like. This is the address to the endpoint.') . '</dd>';
      $output .= '<dd>' . t('After you have entered a query and an endpoint, it is a good idea to click the magic button "Test SPARQL query". You will be prompted for a value for the placeholder, and the query is sent via AJAX. If you are lucky, there will be some good news after a few seconds. This button is also useful for determining errors, as JSONP requests does not provide much debug information. But since this button consumes the response in Drupal, it also gives you back error codes (if any). Another magic function of this button, and the reason you should use it even if you are confident that your query is working, is that it fills out the presentation tab textarea with all the columns you need to provide an action for.') . '</dd>';
      $output .= '<dd>' . t('The last option is if "The enpoint does not return json with a callback". Although most endpoints supports json with a callback, some do not. Very few, but some. To work around this, check this box and your Drupal site will work as a proxy for the endpoint. As it is stated in the description of the field, this could result in a big performance loss, and the functionality does not use caching. Avoid this if possible. Also note that the endpoint still has to be able to return JSON.') . '</dd>';
      $output .= '<dt>' . t('Presentation settings') . '</dt>';
      $output .= '<dd>' . t('In the following lines the words column and row will be used several times. The column names are always the names you use in the query, for example if you do <code> select ?label ?uri ?value</code>, column names would be label, uri and value. The rows exactly what they sound like, just like in any query language.') . '</dd>';
      $output .= '<dd>' . t('The first option in this tab is "What to do with the results". This is an option to pay extra close attention to. This will ensure the proper formatting of each column, for example if you want a label or suffix on the data value. Use cases for this could be if you query for a population in a country, you will only be given back an integer. Instead of just printing out a number, you want the block to read "Population: 123 456 789 souls lives here". The correct format for achieving this is <code>prefix|column|suffix</code>. So if your column is called population, the example above would be <code>Population: |population| souls lives here.</code> Note here that you must provide the spaces between the column value and prefix/suffix. To exclude columns from a row rendering, you can use the the option "discard". If you wanted to exclude the URI column in a query, and the column was called uri, you would use <code>discard|uri</code> The use case for this is for example if your query gets all musicians born in 1970, you do not want "1970" to be displayed on each row of the result. Instead you just use it in the intro text. Which brings us to the next point:') . '</dd>';
      $output .= '<dd>' . t('The intro text. This is where you put an introductory text about what the following rows will describe. If your query was to list all musicians born in a given year, you could write in the intro what year you are using. If the column containing the year is called "year", you could use something along these lines: <code>This is a list of musicians born in [year]</code>.') . '</dd>';
      $output .= '<dd>' . t('The "empty text" is exactly what it sounds like. If your query gets no rows back, what polite excuse would you want to give to the visitor. This field can not use replacements from the query, but you can use the dynamic input field (earlier referenced to as [1]).') . '</dd>';
      $output .= '<dd>' . t('The "error text" is also what it sounds like. Since querying is handled client-side, it can both time out and query an endpoint that is down for the moment. Enter some excuse (or blame the endpoint) here for presenting to the user when there is an error. Placeholder <strong>[1]</strong> can be used.') . '</dd>';
      $output .= '</dl>';
      $output .= '<h3>' . t('Short guide to SPARQL') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('SPARQL syntax in this module') . '</dt>';
      $output .= '<dd>' . t('All examples that follows are taken from a query against <a href="@dbp">DBPedia</a>. An extremely simple example of SPARQL could be the following:', array('@dbp' => url('http://dbpedia.org/sparql/'))) . '</dd>';
      $output .= '<dd><code>SELECT * {<br />?a ?b ?c<br />}</code></dd>';
      $output .= '<dd>' . t('This would give us back a long list with triples. Not very useful.') . '</dd>';
      $output .= '<dd>' . t('A more useful query would be the following:') . '</dd>';
      $output .= '<dd><code>PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;<br /><br />select ?label {<br />&lt;http://dbpedia.org/resource/SPARQL&gt; rdfs:label ?label<br />}</code></dd>';
      $output .= '<dd>' . t('<a href="@result">This would give us</a> the label of the resource SPARQL (which is the wikipedia article about SPARQL). The problem is that it would give us the label in all available languages. To avoid this we modify it like this:', array('@result' => url('http://dbpedia.org/sparql/?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=PREFIX+rdfs%3A+%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F01%2Frdf-schema%23%3E%0D%0A%0D%0Aselect+%3Flabel+%7B%0D%0A%3Chttp%3A%2F%2Fdbpedia.org%2Fresource%2FSPARQL%3E+rdfs%3Alabel+%3Flabel+%0D%0A%7D&format=text%2Fhtml&timeout=0&debug=on'))) . '</dd>';
      $output .= '<dd><code>PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;<br /><br />select ?label {<br />&lt;http://dbpedia.org/resource/SPARQL&gt; rdfs:label ?label .<br />filter langMatches(lang(?label), "en")<br />}</code></dd>';
      $output .= '<dd>' . t('<a href="@result">This would give us</a> a result with one row, no duplicates. Just the label of the resource SPARQL', array('@result' => url('http://dbpedia.org/sparql/?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=PREFIX+rdfs%3A+%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F01%2Frdf-schema%23%3E%0D%0A%0D%0Aselect+%3Flabel+%7B%0D%0A%3Chttp%3A%2F%2Fdbpedia.org%2Fresource%2FSPARQL%3E+rdfs%3Alabel+%3Flabel+.%0D%0Afilter+langMatches%28+lang%28%3Flabel%29%2C+%27en%27+%29%0D%0A%7D&format=text%2Fhtml&timeout=0&debug=on'))) . '</dd>';
      $output .= '<dd>' . t('But it is when you use the module with a dymanic value it becomes really useful. If you have a content type where one of the field contains a DBPedia URI, you would use the following query in the configuration of this module to achieve the same as above, but dynamically based on a field:') . '</dd>';
      $output .= '<dd><code>PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;<br /><br />select ?label {<br />&lt;[1]&gt; rdfs:label ?label .<br />filter langMatches(lang(?label), "en")<br />}</code></dd>';
      $output .= '<dd>' . t('You can also use plain field values. Say your content type has a field describing a year, and you want all musicians born in that year. Sounds kind of advanced? Not with this module. Here is a query that will do exactly that.') . '</dd>';
      $output .= '<dd><code>PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt<br />PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;<br />PREFIX dbo: &lt;http://dbpedia.org/ontology/&gt;<br />PREFIX xsd: &lthttp://www.w3.org/2001/XMLSchema#&gt;<br /><br />select ?label {<br />?a rdf:type dbo:MusicalArtist .<br />?a dbo:birthDate ?date .<br />?a rdfs:label ?label .<br />filter (?date > "[1]-01-01"^^xsd:date) .<br />filter (?date < "[1]-12-31"^^xsd:date) .<br />filter langMatches( lang(?label), "en") <br />}</code></dd>';
      $output .= '<dd>' . t('<a href="@result">Click here to see the example with the year 1970 as value.', array('@result' => url('http://dbpedia.org/sparql/?default-graph-uri=http%3A%2F%2Fdbpedia.org&query=PREFIX+rdf%3A+%3Chttp%3A%2F%2Fwww.w3.org%2F1999%2F02%2F22-rdf-syntax-ns%23%3E%0D%0APREFIX+rdfs%3A+%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F01%2Frdf-schema%23%3E%0D%0APREFIX+dbo%3A+%3Chttp%3A%2F%2Fdbpedia.org%2Fontology%2F%3E%0D%0APREFIX+xsd%3A+%3Chttp%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23%3E%0D%0A%0D%0Aselect+%3Flabel+%7B%0D%0A%3Fa+rdf%3Atype+dbo%3AMusicalArtist+.%0D%0A%3Fa+dbo%3AbirthDate+%3Fdate+.%0D%0A%3Fa+rdfs%3Alabel+%3Flabel+.%0D%0Afilter+%28%3Fdate+%3E+%221970-01-01%22%5E%5Exsd%3Adate%29+.%0D%0Afilter+%28%3Fdate+%3C+%221970-12-31%22%5E%5Exsd%3Adate%29+.%0D%0Afilter+langMatches%28+lang%28%3Flabel%29%2C+%27en%27%29+%0D%0A%7D&format=text%2Fhtml&timeout=0&debug=on'))) . '</dd>';
      return $output;
      break;
  }
}

/**
 * Implements hook_menu().
 */
function jsonp_sparql_menu() {
  $items['admin/config/search/jsonp_sparql'] = array(
    'title' => 'Settings for JSONP SPARQL',
    'description' =>  'Configure blocks to display information retrieved via JSONP SPARQL.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer jsonp sparql settings'),
    'page arguments' => array('jsonp_sparql_admin_settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'jsonp_sparql.admin.inc',
  );
  $items['jsonp_sparql/ajax/test_sparql'] = array(
    'access arguments' => array('administer jsonp sparql settings'),
    'page callback' => 'jsonp_sparql_ajax_test',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function jsonp_sparql_block_info() {
  $i = 0;
  $num = variable_get('jsonp_sparql_blocks_number', 1);
  while ($i < $num) {
    $human_number = $i + 1;
    $blocks[$i] = array(
      'info' => t('JSONP SPARQL Block !number', array('!number' => $human_number)),
      'cache' => DRUPAL_NO_CACHE,
    );
    $i++;
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function jsonp_sparql_block_view($delta = '') {
  // Create an empty block.
  $block = array(
    'subject' => '',
    'content' => '',
  );
  $i = 0;
  $node = menu_get_object();
  $num = variable_get('jsonp_sparql_blocks_number', 1);
  for ($i = 0; $i < $num; $i++) {
    switch ($delta) {
      case $i:
        $human_number = $i + 1;
        $block['subject'] = t('JSONP SPARQL block !number', array('!number' => $human_number));
        $query = variable_get('jsonp_sparql_sparql_' . $i);
        $server = variable_get('jsonp_sparql_server_' . $i);
        if (empty($query) || empty($server)) {
          // Let's bail out. Nothing to do here.
          break;
        }
        $field_val = '';

        // First, check if we have to do some replacing with dynamic values.
        if (strpos($query, '[1]') > -1) {
          // First try PHP evaluation, if this is entered.
          $phpcode = variable_get('jsonp_sparql_php_' . $i);
          if (!empty($phpcode) && module_exists('php')) {
            $field_val = php_eval($phpcode);
            if (empty($field_val)) {
              // No use in doing a query with no value.
              break;
            }
          }
          else {
            // Then try token value.
            $node = menu_get_object();
            $tokenvalue = variable_get('jsonp_sparql_token_' . $i);
            if (!empty($tokenvalue)) {
              // Only load user if we really have to.
              $field_val = token_replace($tokenvalue, array('node' => $node));
              if ($field_val === $tokenvalue) {
                // Nothing got replaced. Let's bail out.
                break;
              }
              if (empty($field_val)) {
                // No use in doing a query with no value.
                break;
              }
            }
            else {
              // Using field value, since no other options were used.
              if (empty($node)) {
                break;
              }
              $field = variable_get('jsonp_sparql_field_' . $i);
              $field_val = field_get_items('node', $node, $field);
              $field_val = $field_val[0]['value'];
              if (empty($field_val)) {
                // No use in doing a query with no value.
                break;
              }
            }
          }
          // Rewrite SPARQL query with the user submitted placeholder.
          $query = str_replace('[1]', $field_val, $query);
        }
        $modulepath = drupal_get_path('module', 'jsonp_sparql');

        // Add variables to JS settings, so the javascript can find it.
        jsonp_sparql_add_js_variables($i, $field_val);
        drupal_add_js($modulepath . '/jsonp_sparql.js');
        $block['content'] .= '<div id="sparqlresult' . $i . '">';
        $block['content'] .= '<div class="intro"></div>';

        // If the user wants to get the response via proxy, this handles it.
        // Also kicks in if the jquery jsonp library is not installed.
        $jq_jsonp_path = jsonp_sparql_js_path();
        $proxy = variable_get('jsonp_sparql_proxy_' . $i);
        if ($proxy == TRUE || empty($jq_jsonp_path)) {
          $data = drupal_http_request($server . 'query=' . rawurlencode($query) . '&format=json&output=json');
          if ($data->code == 200) {
            // ALRIGHT! We have a response!
            $data = $data->data;
            // Skip the ajax call and go directly to parsing.
            $settings['jsonpSparqlData'][$delta] = $data;
            drupal_add_js($settings, 'setting');
            drupal_add_js('Drupal.jsonpSparqlParse(' . $delta . ', jQuery.parseJSON(Drupal.settings["jsonpSparqlData"][' . $delta . ']))',
              array('type' => 'inline', 'scope' => 'footer', 'weight' => 5)
            );
          }
          else {
            $block['content'] .= t('The SPARQL endpoint at @server did not answer our request. The error returned was: @error', array('@server' => $server, '@error' => $data->error));
          }
        }
        else {
          // Perfect! Gotta love callbacks. The query burden is now client
          // side. Set up an AJAX query with the server and SPARQL query.
          drupal_add_js($jq_jsonp_path);
          drupal_add_js('Drupal.jsonpSparqlInit("' . $server . 'query=' . rawurlencode($query) . '&format=json&output=json","' . $i . '");',
            array('type' => 'inline', 'scope' => 'footer', 'weight' => 5)
          );
          drupal_add_css($modulepath . '/jsonp_sparql.css');
          $block['content'] .= '<div class="jsonpsparqlloading" id="sparqlloading' . $delta . '">';
          $block['content'] .= theme('image', array(
            'path' => $modulepath . '/img/loading.gif',
            'alt' => t('Loading...'),
          ));
          $block['content'] .= '</div>';
        }
        $block['content'] .= '</div>';
        break;
    }
  }
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function jsonp_sparql_block_configure($delta = 0) {
  $access = user_access('administer jsonp sparql settings');
  if (empty($access)) {
    return;
  }
  $modulepath = drupal_get_path('module', 'jsonp_sparql');
  drupal_add_js($modulepath . '/jsonp_sparql_form.js');
  // Notify the javascript of the module path, so it can make a fancy animated
  // GIF while loading AJAX.
  $settings = array(
    'jsonpSparql' => array(
      'modpath' => $modulepath,
    ),
  );
  drupal_add_js($settings, 'setting');
  $form = array();
  $form['jsonp_sparql_block_set' . $delta]['first'] = array(
    '#type' => 'fieldset',
    '#title' => t('General settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['jsonp_sparql_block_set' . $delta]['first']['jsonp_sparql_field_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('Field to use for input'),
    '#default_value' => variable_get('jsonp_sparql_field_' . $delta),
    '#description' => t('Full machine readable name of a field to use. Remember to enable this block only on node types that has this field.'),
  );
  $form['jsonp_sparql_block_set' . $delta]['first']['jsonp_sparql_token_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('Token to use for input'),
    '#default_value' => variable_get('jsonp_sparql_token_' . $delta),
    '#description' => t('Enter a token to use for the input value. If you have !token-url installed, you will get a replacement pattern tree below. This will be used over field value, if you have written something here.', array('!token-url' => l(t('the Token module'), 'http://drupal.org/project/token'))),
  );
  if (module_exists('token')) {
    $form['jsonp_sparql_block_set' . $delta]['first']['token_help'] = array(
      '#title' => t('Replacement patterns'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['jsonp_sparql_block_set' . $delta]['first']['token_help']['help'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('node'),
    );
  }
  $access_php = user_access('use PHP for settings');
  if (!empty($access_php) && module_exists('php')) {
    $form['jsonp_sparql_block_set' . $delta]['first']['jsonp_sparql_php_' . $delta] = array(
      '#type' => 'textarea',
      '#title' => t('Custom PHP code to use for input'),
      '#default_value' => variable_get('jsonp_sparql_php_' . $delta),
      '#description' => t('PHP code that returns a value to use in the SPARQL query. The code must be surrounded by &lt;?php ?&gt;. <strong>DO NOT USE THIS IF YOU DO NOT KNOW WHAT YOU ARE DOING!</strong> This will be used over field value and token value if you have written something here. Useful if your block does not have access to plain field values, or if it is used on pages that are not nodes.'),
    );
  }
  $form['jsonp_sparql_block_set' . $delta]['second'] = array(
    '#type' => 'fieldset',
    '#title' => t('SPARQL settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $length = variable_get('jsonp_sparql_sparql_' . $delta);
  $length = explode("\n", $length);
  $length = count($length);
  $form['jsonp_sparql_block_set' . $delta]['second']['jsonp_sparql_sparql_' . $delta] = array(
    '#type' => 'textarea',
    '#title' => t('SPARQL query to use'),
    '#default_value' => variable_get('jsonp_sparql_sparql_' . $delta),
    '#rows' => $length,
    '#description' => t('SPARQL query to send to the server. Use placeholder [1] to replace with value from a dynamic field (or PHP code).'),
    '#required' => TRUE,
  );
  $form['jsonp_sparql_block_set' . $delta]['second']['jsonp_sparql_server_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('Endpoint to use for JSONP SPARQL query'),
    '#default_value' => variable_get('jsonp_sparql_server_' . $delta),
    '#description' => t('Enter a valid endpoint that will return JSONP data. This should be a full URL with everything before the word query (including the question mark). Example: <em>http://dbpedia.org/sparql/?</em>'),
    '#required' => TRUE,
  );
  $form['jsonp_sparql_block_set' . $delta]['second']['jsonp_sparql_test_query_' . $delta] = array(
    '#type' => 'button',
    '#executes_submit_callback' => FALSE,
    '#value' => t('Test Sparql query'),
    '#attributes' => array(
      'class' => array('sparqltestquery'),
    ),
    '#suffix' => '<p>' . t('This magic button will also fill out the column presentation in the presentation tab') . '</p>',
  );
  $proxy_defalt = variable_get('jsonp_sparql_proxy_' . $delta, FALSE);
  $proxy_disabled = FALSE;
  $proxy_description = t('If the endpoint does not return JSONP, check this box to use a proxy. At the moment, it still has to return JSON, but this will work around a missing callback. <strong>NOTE: This is potentially a performance-penalty.</strong>');
  $jq_jsonp_path = jsonp_sparql_js_path();
  if (empty($jq_jsonp_path)) {
    $proxy_defalt = TRUE;
    $proxy_disabled = TRUE;
    $proxy_description = t('The JQuery JSONP plugin must be installed in order to do any client side queries. Please go to !page for instructions.', array('!page' => l(t('Status Report'), 'admin/reports/status')));
  }
  $form['jsonp_sparql_block_set' . $delta]['second']['jsonp_sparql_proxy_' . $delta] = array(
    '#type' => 'checkbox',
    '#title' => t('Use Drupal site as proxy for queries'),
    '#default_value' => $proxy_defalt,
    '#options' => array(TRUE => t('Yes'), FALSE => t('No')),
    '#disabled' => $proxy_disabled,
    '#description' => $proxy_description,
  );
  $form['jsonp_sparql_block_set' . $delta]['third'] = array(
    '#type' => 'fieldset',
    '#title' => t('Presentation'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $length = variable_get('jsonp_sparql_cols_' . $delta);
  $length = explode("\n", $length);
  $length = count($length);
  $form['jsonp_sparql_block_set' . $delta]['third']['jsonp_sparql_cols_' . $delta] = array(
    '#type' => 'textarea',
    '#title' => t('What to do with the results'),
    '#default_value' => variable_get('jsonp_sparql_cols_' . $delta, ''),
    '#rows' => $length,
    '#description' => t('Give a description of what to do with each row in the result. The format is <strong>Prefix</strong>|<strong>column name</strong>|<strong>suffix</strong>.<br />One can also exclude rows from the presentation by using the syntax <strong>discard|column name</strong>. Placeholders are available - use <strong>[1]</strong> for the input value, or <strong>[column name]</strong> for values from other columns. Detailed description of this is availale in the help section.'),
    '#required' => TRUE,
    '#element_validate' => array('_jsonp_sparql_validate_presentation'),
  );
  $form['jsonp_sparql_block_set' . $delta]['third']['jsonp_sparql_intro_' . $delta] = array(
    '#type' => 'textarea',
    '#title' => t('Intro text'),
    '#default_value' => variable_get('jsonp_sparql_intro_' . $delta, ''),
    '#description' => t('This area is used to write an introduction to the data. You can use the placeholder [1] for the dynamic value, as well as column names in the same format (i.e [label]).'),
  );
  $form['jsonp_sparql_block_set' . $delta]['third']['jsonp_sparql_empty_' . $delta] = array(
    '#type' => 'textarea',
    '#title' => t('Empty text'),
    '#default_value' => variable_get('jsonp_sparql_empty_' . $delta, ''),
    '#description' => t('If you are unlucky and there is no rows to display on some pages, this will be used as an empty text. Placeholder <strong>[1]</strong> can be used.'),
  );
  $form['jsonp_sparql_block_set' . $delta]['third']['jsonp_sparql_error_' . $delta] = array(
    '#type' => 'textarea',
    '#title' => t('Error text'),
    '#default_value' => variable_get('jsonp_sparql_error_' . $delta, ''),
    '#description' => t('Since querying is handled client-side, it can both time out and query an endpoint that is down for the moment. Enter some excuse (or blame the endpoint) here for presenting to the user when there is an error. Placeholder <strong>[1]</strong> can be used.'),
  );
  $form['jsonp_sparql_block_set' . $delta]['fourth'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['jsonp_sparql_block_set' . $delta]['fourth']['jsonp_sparql_format_alter_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('Customize format parameter'),
    '#default_value' => variable_get('jsonp_sparql_format_alter_' . $delta, ''),
    '#description' => t('Some SPARQL endpoints have strange behaviours when it comes to the format parameter in the URL. For example can some endpoints require you to use <strong>output=json</strong>, while other actually requires JSON to be uppercase. If your endpoint uses something else than either <strong>format=json</strong> or <strong>output=json</strong> (very case sensitive), enter it here in this format: <strong>parameter=value</strong>.'),
  );
  $form['jsonp_sparql_block_set' . $delta]['fourth']['jsonp_sparql_exclude_' . $delta] = array(
    '#type' => 'textfield',
    '#title' => t('Exclude rows'),
    '#default_value' => variable_get('jsonp_sparql_exclude_' . $delta, ''),
    '#description' => t('To exclude rows from the rendered list (for example if you use a specific row information in the intro text, and does not want this in the list), enter a result column name to check against a value on each row. This should ideally be an URI. The format is <strong>Column name to find</strong>|<strong>Column name to check</strong>. (Example: mainobjecturi|otherobjecturi). More information available in the help section.'),
  );
  return $form;
}

/**
 * Validates the presentation settings input.
 */
function _jsonp_sparql_validate_presentation($element, &$form_state) {
  $value = $element['#value'];
  // Validate all rows of the element.
  $rows = explode("\n", $value);
  foreach ($rows as $row) {
    // Check if all rows use the correct format.
    $cols = explode('|', $row);
    if (count($cols) < 2) {
      form_error($element, t('The %name option must contain rows in the correct format. The format is <strong>Prefix</strong>|<strong>column name</strong>|<strong>suffix</strong>.<br />One can also exclude rows from the presentation by using the syntax <strong>discard|column name</strong>. Please update your settings to use the correct format.', array('%name' => $element['#title'])));
    }
    $discard = FALSE;
    if ($cols[0] == 'discard') {
      $discard = TRUE;
    }
    if (count($cols) !== 3 && $discard === FALSE) {
      form_error($element, t('The %name option must contain rows in the correct format. The format is <strong>Prefix</strong>|<strong>column name</strong>|<strong>suffix</strong>.<br />One can also exclude rows from the presentation by using the syntax <strong>discard|column name</strong>. Please update your settings to use the correct format.', array('%name' => $element['#title'])));
    }
  }
}

/**
 * Implements hook_block_save().
 */
function jsonp_sparql_block_save($delta = 0, $edit = array()) {
  $access = user_access('administer jsonp sparql settings');
  if (empty($access)) {
    return;
  }
  variable_set('jsonp_sparql_field_' . $delta, $edit['jsonp_sparql_field_' . $delta]);
  variable_set('jsonp_sparql_token_' . $delta, $edit['jsonp_sparql_token_' . $delta]);
  $access = user_access('use PHP for settings');
  if (!empty($access) && module_exists('php')) {
    variable_set('jsonp_sparql_php_' . $delta, $edit['jsonp_sparql_php_' . $delta]);
  }
  variable_set('jsonp_sparql_sparql_' . $delta, $edit['jsonp_sparql_sparql_' . $delta]);
  variable_set('jsonp_sparql_server_' . $delta, $edit['jsonp_sparql_server_' . $delta]);
  variable_set('jsonp_sparql_proxy_' . $delta, $edit['jsonp_sparql_proxy_' . $delta]);
  variable_set('jsonp_sparql_cols_' . $delta, $edit['jsonp_sparql_cols_' . $delta]);
  variable_set('jsonp_sparql_intro_' . $delta, $edit['jsonp_sparql_intro_' . $delta]);
  variable_set('jsonp_sparql_empty_' . $delta, $edit['jsonp_sparql_empty_' . $delta]);
  variable_set('jsonp_sparql_error_' . $delta, $edit['jsonp_sparql_error_' . $delta]);
  variable_set('jsonp_sparql_exclude_' . $delta, $edit['jsonp_sparql_exclude_' . $delta]);
  variable_set('jsonp_sparql_format_alter_' . $delta, $edit['jsonp_sparql_format_alter_' . $delta]);
  return;
}

/**
 * Implements hook_permission().
 */
function jsonp_sparql_permission() {
  return array(
    'administer jsonp sparql settings' => array(
      'title' => t('Administer jsonp sparql settings'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Function to add javascript variables to Drupal.settings.
 *
 * @param int $delta
 *   The delta of the JSONP SPARQL block.
 *
 * @param string $field_val
 *   The replacement value in the query.
 */
function jsonp_sparql_add_js_variables($delta, $field_val) {
  // Get the settings for presenting the data, and pass it to Drupal.settings,
  // so the javascript can access it.
  $presentation = variable_get('jsonp_sparql_cols_' . $delta);
  $presentation = explode("\n", $presentation);
  $pres = array();
  $a = 0;
  foreach ($presentation as $cols) {
    $cols = str_replace('[1]', $field_val, $cols);
    $cols = explode('|', $cols);
    $cols[1] = trim($cols[1]);
    if ($cols[0] == 'discard') {
      $pres[$cols[1]]['discard'] = 'YES';
    }
    else {
      $pres[$cols[1]]['discard'] = 'nope';
      $pres[$cols[1]]['pre'] = $cols[0];
      $pres[$cols[1]]['post'] = $cols[2];
    }
    $a++;
  }
  $intro = variable_get('jsonp_sparql_intro_' . $delta, '');
  $intro = str_replace('[1]', $field_val, $intro);
  $empty = variable_get('jsonp_sparql_empty_' . $delta, '');
  $empty = str_replace('[1]', $field_val, $empty);
  $error = variable_get('jsonp_sparql_error_' . $delta, '');
  $error = str_replace('[1]', $field_val, $error);
  $exclude = variable_get('jsonp_sparql_exclude_' . $delta, '');
  if (!empty($exclude)) {
    $exclude = explode('|', $exclude);
    $exclude = array('if' => $exclude[0], 'in' => $exclude[1]);
  }
  $settings = array(
    'jsonpSparql' => array(),
  );
  $settings['jsonpSparql']['delta_' . $delta] = array(
    'pres' => $pres,
    'intro' => $intro,
    'empty' => $empty,
    'exclude' => $exclude,
    'error' => $error,
  );
  drupal_add_js($settings, 'setting');
}


/**
 * Ajax callback for testing endpoints.
 *
 * This function is called from the administration form, to test the endpoint
 * for a valid response.
 */
function jsonp_sparql_ajax_test() {
  // Since you have to have strict permission to be here in the code, these
  // $_POST variables should be safe. Since these are URLs and queries, they
  // will make a bad request if they are check_plain'ed (or similar).
  $url = '';
  $query = '';
  $url = $_POST['url'];
  $query = $_POST['query'];
  $testresponse = drupal_http_request($url . 'query=' . rawurlencode($query) . '&format=json&output=json');
  $testresponse->data = drupal_json_decode($testresponse->data);
  print drupal_json_output($testresponse);
}

/**
 * Returns the path to the jQuery Jsonp JavaScript file.
 *
 * @return mixed
 *   The path to the JavaScript file or FALSE if no file could be found.
 */
function jsonp_sparql_js_path() {
  $path = libraries_get_path('jquery.jsonp');

  // Use the minified file if it exists to preserve bandwidth.
  if (file_exists($path . '/jquery-jsonp.min.js')) {
    return $path . '/jquery-jsonp.min.js';
  }
  elseif (file_exists($path . '/jquery-jsonp.js')) {
    return $path . '/jquery-jsonp.js';
  }

  return FALSE;
}
