<?php
/**
 * @file
 * A module to display blocks selected by terms in a taxonomy vocabulary,
 * as long as they are newer than a set limit.
 *
 * The module defines one block for each term in the vocabulary.
 *
 * Settings allows the administrator to choose
 *   - the vocabulary to be used to select nodes
 *   - the number of days nodes are considered for display
 *
 * Blocks without matching nodes do not appear.
 *
 * @copyright (c) 2010 Ouest Systèmes Informatiques (OSInet)
 * @author Frédéric G. MARAND <fgm@osinet.fr>
 * @license Licensed under the CeCILL 2.0 and General Public License version 2 and later
 * @link http://www.cecill.info/licences/Licence_CeCILL_V2-en.html @endlink
 * @link http://drupal.org/project/taxonews @endlink
 * @link       http://drupal.org/project/taxonews
 * @since      Version 1.1
 */

$_taxonewsErrorReporting = error_reporting(E_ALL | E_STRICT);

class Taxonews {
  const VERSION = '$Id$';
  const PATH_SETTINGS = 'admin/structure/taxonews';

  /**
   * Names of persistent variables
   */
  const VAR_LIFETIME       = 'taxonews_lifetime';
  const VAR_MAX_ROWS       = 'taxonews_max_rows';
  const VAR_SHOW_NAME      = 'taxonews_show_name';
  const VAR_SHOW_ARCHIVE   = 'taxonews_show_archive';
  const VAR_SHOW_EMPTY     = 'taxonews_show_empty';
  const VAR_EMPTY_MESSAGES = 'taxonews_empty_messages';
  const VAR_FEED           = 'taxonews_feed';
  const VAR_HEAD_FEEDS     = 'taxonews_head_feeds';
  const VAR_PONDERATED     = 'taxonews_ponderated';
  const VAR_VOCABULARY     = 'taxonews_vid';

  /**
   * Default values for persistent variables
   *
   */
  const DEF_FEED           = TRUE;
  const DEF_HEAD_FEEDS     = NULL;
  const DEF_LIFETIME       = 30;
  const DEF_MAX_ROWS       =  5;
  const DEF_PONDERATED     =  0;
  const DEF_SHOW_ARCHIVE   = TRUE;
  const DEF_SHOW_EMPTY     = TRUE;
  const DEF_SHOW_NAME      = TRUE;
  const DEF_VOCABULARY     = NULL;

  /**
   * Implement the 4.x hook_settings().
   *
   * @return array settings form
   */
  static function adminSettings() {
    $sq = 'SELECT v.vid, v.name, v.description '
        . 'FROM {taxonomy_vocabulary} v '
        . 'ORDER BY 2, 1 ' ;
    $result = db_query($sq);
    $vocabularies = array();
    foreach ($result as $item) {
      $vocabularies["$item->vid"] = "$item->name - $item->description" ;
    }

    $form[self::VAR_VOCABULARY] = array(
      '#type'             => 'select',
      '#title'            => t('Vocabularies'),
      '#default_value'    => variable_get(self::VAR_VOCABULARY, self::DEF_VOCABULARY),
      '#options'          => $vocabularies,
      '#description'      => t('Vocabularies to be used for the generation of blocks. A block will be defined for each term in each vocabulary selected here.'),
      '#required'         => TRUE,
      '#size'             => count($vocabularies),
      '#multiple'         => TRUE,
    );

    $form[self::VAR_PONDERATED] = array(
      '#type'             => 'select',
      '#title'            => t('Ponderate sorting by'),
      '#options'          => array(
        0 => t('Creation date'),
      ),
    );
    if (module_exists('statistics')) {
      $form[self::VAR_PONDERATED]['#options'] += array(
        1 => t('Total views'),
        2 => t('Daily views'),
      );
      $form[self::VAR_PONDERATED] += array(
        '#default_value'  => variable_get(self::VAR_PONDERATED, self::DEF_PONDERATED),
        '#description'    => t('Sort displayed news by descending creation date, possibly ponderated by total number of views and daily views. This ponderation only affects sorting, not news selection, which are always selected by creation date.'),
      );
    }
    else {
      $form[self::VAR_PONDERATED] += array(
        '#default_value'  => self::DEF_PONDERATED,
        '#description'    => t('Sort displayed news by descending creation date. Additional sortings will be available if you !enable. It is currently disabled.',
          array('!enable' => l(t('enable statistics.module'), 'admin/modules'))),
      );
    }

    $form[self::VAR_LIFETIME] = array(
      '#type'             => 'textfield',
      '#title'            => t('Lifetime of news before expiration'),
      '#default_value'    => variable_get(self::VAR_LIFETIME, self::DEF_LIFETIME),
      '#size'             => 3,
      '#max_length'       => 3,
      '#description'      => t('The number of days a news item remains displayed in blocks. If set to 0, news never expire.'),
      '#required'         => TRUE,
    );
    $form[self::VAR_MAX_ROWS] = array(
      '#type'             => 'textfield',
      '#title'            => t('Maximum number of rows per block'),
      '#default_value'    => variable_get(self::VAR_MAX_ROWS, self::DEF_MAX_ROWS),
      '#size'             => 3,
      '#max_length'       => 3,
      '#description'      => t('The maximum number of rows that the builtin theme will display in a block.'),
      '#required'         => TRUE
    );
    $form[self::VAR_FEED] = array(
      '#type'            => 'checkbox',
      '#title'           => t('Display RSS feed icon on taxonews blocks'),
      '#default_value'   => variable_get(self::VAR_FEED, self::DEF_FEED),
      '#description'     => t('This setting allows taxonews to display a RSS feed icon on each non empty block. Default value is enabled.'),
    );
    $form[self::VAR_SHOW_NAME] = array(
      '#type'            => 'checkbox',
      '#title'           => t('Prepend taxonews module name in block list'),
      '#default_value'   => variable_get(self::VAR_SHOW_NAME, self::DEF_SHOW_NAME),
      '#description'     => t('This allows the modules to appear grouped on the block list at Administer/Blocks, to avoid cluttering.'),
    );
    $form[self::VAR_SHOW_ARCHIVE] = array(
      '#type'            => 'checkbox',
      '#title'           => t('Include "Archive" link to older articles in block'),
      '#default_value'   => variable_get(self::VAR_SHOW_ARCHIVE, self::DEF_SHOW_ARCHIVE),
      '#description'     => t('If articles matching the term exist, but cannot be placed in the block, for instance if they are too old, add an "Archive" link at the end of the block. The link will not be shown if no matching article exists.'),
    );
    $form[self::VAR_SHOW_EMPTY] = array(
      '#type'            => 'checkbox',
      '#title'           => t('Include blocks with currently no matching nodes in the blocks list'),
      '#default_value'   => variable_get(self::VAR_SHOW_EMPTY, self::DEF_SHOW_EMPTY),
    );
    $form['advanced'] = array(
      '#type'            => 'fieldset',
      '#collapsible'     => TRUE,
      '#collapsed'       => TRUE,
      '#title'           => t('Advanced settings'),
    );
    $form['advanced'][self::VERSION] = array(
      '#markup'          => t('<p>This site is running taxonews.module version: @version.</p>',
        array('@version' => self::VERSION))
    );

    return system_settings_form($form);
  }

  /**
   * Is there any published data matching that term beyond the block ?
   *
   * @param int $tid
   * @param array $nids Array of displayed nodes, to ignore
   * @return boolean
   *
   * The function expects the nids of the already displayed nodes
   * to be the keys of the $items array, so it can ignore them.
   *
   * Implementation note: the normal way to count field instances is through
   * field_attach_query(), but taxonomy.module has a special denormalized
   * table taxonomy_index which we can use for more speed.
   */
  static function archiveExists($tid, $items = array()) {
    $query = db_select('taxonomy_index', 'ti');
    $query->addExpression('COUNT(ti.nid)');
    $count = $query
      ->addTag('node_access')
      ->condition('ti.tid', $tid)
      ->execute()->fetchCol();
    $ret = $count[0] > count($items);
    return $ret;
  }

  /**
   * Configure the taxonews block identified by $delta
   *
   * @param mixed $delta
   * @return array
   */
  static function blockConfigure($delta) {
    $description = t('By default, blocks without matching content are not displayed. This setting allows you to force a static content.');
    $form = array();

    // No form for invalid deltas
    $term = taxonomy_term_load($delta);
    $ar_vocabularies = variable_get(self::VAR_VOCABULARY, self::DEF_VOCABULARY);
    if (!is_object($term) || !isset($term->vid) || !is_array($ar_vocabularies) || !in_array($term->vid, $ar_vocabularies)) {
      return $form;
    }

    $form[self::VAR_EMPTY_MESSAGES] = array(
      '#title'         => t('Text to be displayed if block has no matching content'),
      '#type'          => 'textfield',
      '#default_value' => self::getEmptyMessages($delta),
      '#size'          => 60,
      '#max_length'    => 60,
      '#description'   => $description,
    );

    $head_feeds = variable_get(self::VAR_HEAD_FEEDS, self::DEF_HEAD_FEEDS);
    $show_feed = variable_get(self::VAR_FEED, self::DEF_FEED) ? t('Enabled') : t('Disabled');

    $in = isset($in_head_feeds[$delta]);
    $form[self::VAR_HEAD_FEEDS . '-' . $delta] = array(
      '#title'        => t('Included in head feeds'),
      '#type'         => 'checkbox',
      '#description'  => t('Include the feed for this block in the page-level feeds if Taxonews feeds are enabled (currently: @feed)', array(
        '@feed' => $show_feed)),
      '#default_value'=> $in,
    );
    return $form;
  }

  /**
   * Generate block list for H. _block_info().
   *
   * @return array
   * @see taxonews_block()
   */
  static function blockInfo() {
    $arBlocks = array() ;
    $ar_terms = self::getTerms();
    if (empty($ar_terms)) {
      $modulePath = drupal_get_path('module', 'taxonews');
      drupal_set_message(
        t('WARNING: You will not be able to configure taxonews blocks until you !configure and !define in the taxonews vocabularies. You might want to refer to !install.',
          array(
            '!configure' => l(t('configure taxonews'), self::PATH_SETTINGS),
            '!define'    => l(t('define terms'), 'admin/structure/taxonomy'),
            '!install'   => l('INSTALL.txt', "$modulePath/INSTALL.txt")
            )
          ),
        'error');
      unset($modulePath);
      return $arBlocks; // No need to run the following code: there is no block
    }

    $prefix = variable_get(self::VAR_SHOW_NAME, self::DEF_SHOW_NAME) ? 'Taxonews/' : '' ;
    $showEmpty = variable_get(self::VAR_SHOW_EMPTY, self::DEF_SHOW_EMPTY);
    $sq = 'SELECT ti.tid, COUNT(ti.nid) AS cnt '
        . 'FROM {taxonomy_index} ti '
        . 'INNER JOIN {node} n ON ti.nid = n.nid '
        . 'WHERE n.status = 1 AND ti.tid IN (:terms) '
        . 'GROUP BY 1 ';
    $arCounts = array();
    $result = db_query($sq, array(':terms' => array_keys($ar_terms)));
    foreach ($result as $item) {
      $arCounts[$item->tid] = $item->cnt;
    }

    foreach ($ar_terms as $tid => $term) {
      if ((!isset($arCounts[$tid]) || ($arCounts[$tid] == 0)) && !$showEmpty) {
        continue; // Do not display the block, do not increment the counter
      }
      $arBlocks[$tid] = array() ;
      $arBlocks[$tid]['info'] = "$prefix$term->vocabulary_name/$term->name" ;
      $arBlocks[$tid]['cache'] = DRUPAL_CACHE_GLOBAL;
      $arBlocks[$tid]['pages'] = "admin\nadmin/*";
    }

    return $arBlocks ;
  }

  /**
   * Save the configuration (i.e. the text) of the selected block.
   *
   * @param mixed $delta Usually an int
   * @param $edit The edit form fields
   * @return void
   * @see hook_block()
   */
  static function blockSave($delta, $edit) {
    $ar_terms = self::getTerms() ;
    if (array_key_exists($delta, $ar_terms)) {
      $arEmptyMessages = self::getEmptyMessages();
      $arEmptyMessages[$delta] = $edit[self::VAR_EMPTY_MESSAGES];
      variable_set(self::VAR_EMPTY_MESSAGES, $arEmptyMessages);
    }
    $head_feeds = variable_get(self::VAR_HEAD_FEEDS, self::DEF_HEAD_FEEDS);
    if (!isset($head_feeds)) {
      $head_feeds = array();
    }
    if (isset($edit['delta'])) {
      $head_feeds[$delta] = $edit[self::VAR_HEAD_FEEDS . '-' . $edit['delta']];
    }
    variable_set(self::VAR_HEAD_FEEDS, $head_feeds);
  }

  /**
   * Generate block contents for the passed-in delta.
   *
   * Note: 86400 = 24*60*60 = seconds in one day
   *
   * @param mixed $delta Drupal block delta
   * @return string HTML
   */
  static function blockView($delta) {
    $ar_terms = self::getTerms();
    if (!array_key_exists($delta, $ar_terms)) {
      return array('subject' => NULL, 'content' => NULL);
    }

    /**
     * ponderation must only be taken into account if statistics module exists
     * because the module may have been online, allowing ponderation to be set,
     * then removed, causing stats to no longer be updated
     */
    $ponderation = module_exists('statistics')
      ? variable_get(self::VAR_PONDERATED, self::DEF_PONDERATED)
      : self::DEF_PONDERATED;

    /**
     * There's a small trick for case 0|default: n.created is not a views count, but can
     * be used exactly like one: more recent nodes will have a higher value in
     * this field, so we can sort on it for display just like we sort on actual
     * view counts otherwise. That way we only have one sort rule for all three
     * different cases.
     */
    switch ($ponderation) {
      case 1: // by total views
        $sq = 'SELECT n.nid, '
            . '  nc.totalcount AS criterium '
            . 'FROM {node} n '
            . '  INNER JOIN {taxonomy_index} ti ON n.nid = ti.nid '
            . '  LEFT JOIN {node_counter} nc on n.nid = nc.nid ' // Some nodes may never have been counted yet
            . '  /* ignore current time: :requesttime */ ';
        break;

      case 2:  // by daily views since creation.
        $sq = 'SELECT n.nid, '
            . '  nc.totalcount*86400/(:requesttime - n.created) AS criterium '
            . 'FROM {node} n '
            . '  INNER JOIN {taxonomy_index} ti ON n.nid = ti.nid '
            . '  LEFT JOIN {node_counter} nc on n.nid = nc.nid ';  // Some nodes may never have been counted yet
        break;

      case 0: // not ponderated
      default: // ignore invalid values
        $sq = 'SELECT n.nid, '
            . '  n.created AS criterium '
            . 'FROM {node} n '
            . '  INNER JOIN {taxonomy_index} ti ON n.nid = ti.nid '
            . '  /* ignore current time: :requesttime */ ';
        break;
    }

    $sq .=    'WHERE ti.tid = :tid '
            . '  AND (n.created > :creation) '
            . '  AND (n.status = 1) '
            . '  ORDER BY n.created DESC, n.changed DESC ';

    $lifetime = variable_get(self::VAR_LIFETIME, self::DEF_LIFETIME);
    $creation = $lifetime
      ? REQUEST_TIME - 86400 * $lifetime
      : 0;

    $ret   = array();
    $items = array();
    if ($result = db_query_range($sq,
      0, variable_get(self::VAR_MAX_ROWS, self::DEF_MAX_ROWS), // range
      array(
        ':requesttime' => REQUEST_TIME,
        ':tid'         => $ar_terms[$delta]->tid,
        ':creation'    => $creation,         // current time, tid, lifetime
      ))) {
      $stats = array();
      foreach ($result as $item) {
        $stats[$item->nid] = $item;
      }
      $nodes = node_load_multiple(array_keys($stats));
      $items = array();
      foreach ($nodes as $nid => $node) {
        $items[$nid] = array(
          'criterium' => $stats[$nid]->criterium,
          'node' => $node,
          'link' => l(filter_xss($node->title), 'node/' . $nid),
        );
      }
      uasort($items, array('Taxonews', 'sortView')); // sort descending
    }
    $term = taxonomy_term_load($ar_terms[$delta]->tid);
    $ret['subject'] = check_plain($term->name);
    if (count($items) == 0) {
      $items = NULL;
    }
    $ret['content'] = theme('taxonews_block_view', array(
      'delta'    => $delta,
      'ar_items' => $items,
      'tid'      => $ar_terms[$delta]->tid,
    ));
    return $ret;
  }

  /**
   * Return the list of messages to be issued when an empty taxonews blocks is to be built.
   *
   * @param mixed $delta
   * @return array
   */
  static function getEmptyMessages($delta = NULL) {
    static $arEmptyMessages;

    if (empty($arEmptyMessages)) {
      $arEmptyMessages = variable_get(self::VAR_EMPTY_MESSAGES, array());
    }

    $ret = isset($delta)
      ? (array_key_exists($delta, $arEmptyMessages) ? $arEmptyMessages[$delta] : NULL)
      : $arEmptyMessages;

    return $ret;
  }

  /**
   * Query for terms in the vocabularies selected in settings.
   *
   * @return array [tid, name]
   */
  static function getTerms($reset = FALSE) {
    static $ar_terms = array();

    if ($reset) {
      $ar_terms = array();
    }

    if (empty($ar_terms)) {
      $arVids = variable_get(self::VAR_VOCABULARY, array(self::DEF_VOCABULARY));
      $sq = 'SELECT td.tid, td.name, '
          . '  v.name AS vocabulary_name '
          . 'FROM {taxonomy_term_data} td '
          . '  INNER JOIN {taxonomy_vocabulary} v ON td.vid = v.vid '
          . 'WHERE td.vid IN (:vids) '
          . 'ORDER BY 2, 1 ';
      $result = db_query($sq, array(':vids' => $arVids));
      foreach ($result as $item) {
        $ar_terms[$item->tid] = $item;
      }
    }

    return $ar_terms;
  }

/**
   * Comparison callback for blockView()/uasort().
   *
   * This is needed to sort on criterium DESCENDING, hence the inverted sign
   * assignment on the result.
   *
   * @param array $x
   * @param array $y
   * @return int
   */
  static private function sortView(array $x, array $y) {
    $diff = $x['criterium'] - $y['criterium'];
    if ($diff > 0) {
      $ret = -1;
    }
    elseif ($diff == 0) {
      $ret = 0;
    }
    else {
      $ret = 1;
    }

    return $ret;
    }
} // end of class Taxonews

/**
 * Until a more generic way to use class methods as callbacks is available
 * or included in core
 *
 * @param array $formState New Drupal 6 data. Unused
 * @param string $method
 * @return mixed
 */
function _taxonews_form_rerouter($form, $formState, $method) {
  return Taxonews::$method();
}

/**
 * -----------------------------------------------------------------------------
 * Drupal hooks below
 * -----------------------------------------------------------------------------
 */

/**
 * Implements hook_help().
 *
 * @param string $path
 * @param string $arg
 * @return string
 */
function taxonews_help($path, $arg) {
  $ret = NULL;
  $help = t('<p>Publish node teasers into blocks based on a taxonomy vocabulary.</p>') ;
  switch ($path) {
    case 'admin/help#taxonews':
      $ret = $help
      . t('<p>This module creates blocks containing a selection of node titles, linking to the node themselves. Blocks are created for each taxonomy term in the vocabularies enabled for block generation.</p>')
      . t('<p>Settings allow the administrator to choose the age limit for nodes included in the blocks, as well as various settings to handle special cases like empty blocks.</p>')
      . t('<p>By default, nodes are displayed in reverse chronological order. If statistics.module is enabled and node counts are active, nodes can also be displayed by descending order of total views or daily views since their creation. The node selection process by creation date is not affected by these sorting rules.</p>');
      break;
    case 'admin/modules#description':
      $ret = $help;
      break;
  }
  return $ret;
}

/**
 * Implement hook_block_list().
 *
 * @return mixed array
 */
function taxonews_block_info() {
  $ret = Taxonews::blockInfo();
  return $ret;
}

/**
 * Implement hook_block_view().
 *
 * @param string $delta
 * @return string
 */
function taxonews_block_view($delta = '') {
  $ret = Taxonews::blockView($delta);
  return $ret;
}

/**
 * Implement hook_block_configure().
 *
 * @param string $delta
 * @return array
 */
function taxonews_block_configure($delta = '') {
  $ret = Taxonews::blockConfigure($delta);
  return $ret;
}

/**
 * Implement hook_block_save().
 *
 * @param string $delta
 * @return void
 */
function taxonews_block_save($delta = '', $edit = array()) {
  $ret = Taxonews::blockSave($delta, $edit);
  return $ret;
}

/**
 * Implement hook_menu().
 *
 * @return array
 */
function taxonews_menu() {
  $items[Taxonews::PATH_SETTINGS] = array(
    'title'            => 'Taxonews',
    'description'      => 'Define the various parameters used by the taxonews module',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('_taxonews_form_rerouter', 'adminSettings'),
    'access arguments' => array('administer site configuration'),
    'type'             => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implement hook_theme().
 *
 * @return array
 */
function taxonews_theme($existing = array(), $type = 'module', $theme = 'taxonews') {
  $ret = array(
    'taxonews_block_view' => array(
      'variables' => array(
        'delta'     => NULL,
        'ar_items'  => array(),
        'tid'       => 0,
      ),
      'template' => 'taxonews-block-view',
    ),
    'taxonews_more_link' => array(
      'variables' => array(
        'url'       => '<front>',
        'title'     => NULL,
        'options'   => array(),
      ),
    ),
  );
  return $ret;
}

/**
 * Preprocess function for taxonews_block_view.
 *
 * @see taxonomy_menu()
 *
 * @return void
 */
function template_preprocess_taxonews_block_view(&$variables) {
  $term = taxonomy_term_load($variables['tid']); // safe: valid or NULL
  $variables['empty_message'] = Taxonews::getEmptyMessages($variables['delta']);
  $variables['archive_exists'] = Taxonews::archiveExists($variables['tid'], $variables['ar_items']);
  $variables['show_archive'] = variable_get(Taxonews::VAR_SHOW_ARCHIVE, Taxonews::VAR_SHOW_ARCHIVE);
  $variables['show_feed'] = variable_get(Taxonews::VAR_FEED, Taxonews::DEF_FEED);

  $uri = entity_uri('taxonomy_term', $term);
  $variables['term_path'] = $uri['path'];
  $variables['feed_url']  = $uri['path'] . '/feed';
  $variables['feed_name'] = $term->name;

  $head_feeds = variable_get(Taxonews::VAR_HEAD_FEEDS, Taxonews::DEF_HEAD_FEEDS);
  $variables['head_feed'] = isset($head_feeds[$variables['delta']]) ? $head_feeds[$variables['delta']] : FALSE;
}

/**
 * TN-specific "more" link formatting.
 * theme('more-link') is by default rendered as a DIV, which is not suitable for
 * taxonews_block_view().
 *
 * @param array $variables
 *
 * @return string
 */
function theme_taxonews_more_link($variables) {
  $ret = '<span class="more-link">'
       . l($variables['title'], $variables['url'], $variables['options'])
       . '</span>' . PHP_EOL;
  return $ret;
}

error_reporting($_taxonewsErrorReporting);
unset($_taxonewsErrorReporting);
