<?php
/**
 * @file
 * Tests for Taxonews module.
 *
 * @copyright (c) 2009-2010 Ouest Systèmes Informatiques (OSInet)
 * @author Frédéric G. MARAND <fgm@osinet.fr>
 * @license Licensed under the CeCILL 2.0 and General Public License version 2 and later
 * @link http://www.cecill.info/licences/Licence_CeCILL_V2-en.html @endlink
 * @link http://drupal.org/project/taxonews @endlink
 * @since Version DRUPAL-6--1.0
 *
 * @link http://drupal.org/node/325974 @endlink
 *
 * Note: _taxonews_form_rerouter() has nothing to test.
 *
 * @todo Invent functional tests able to go wrong when unit tests succeed.
 */

/**
 * Unit tests for the Taxonews class and global functions in taxonews.module
 */
class TaxonewsClassUnitTest extends DrupalWebTestCase {

  public static $group;

  // Only way to initialize static properties to non constant content
  public function __construct($test_id = NULL) {
    parent::__construct($test_id);
    self::$group = t('Class');
  }

  /**
   *  Declare test group to simpletest
   *
   * @return array
   */
  public static function getInfo() {
    $ret = array(
      'name'        => t('Unit/Class'),
      'description' => t('Developer-type tests for Taxonews class'),
      'group'       => t('Taxonews'),
    );
    return $ret;
  }

  public function setUp() {
    parent::setUp('taxonews');
  }

  /**
   * Helper function: create a vocabulary
   *
   * @param string $name
   * @return array
   */
  static public function createVocabulary($name = NULL) {
    if (empty($name)) {
      $name = $this->randomName();
    }

    $vocabulary = new stdClass();
    $vocabulary->name = $name;
    $vocabulary->machine_name = $name;
    $status = taxonomy_vocabulary_save($vocabulary);

    $ret = array(
      'status' => $status,
      'vid'    => $vocabulary->vid,
      'name'   => $name,
    );
  return $ret;
  }

  /**
   * Make sure that Taxonews::adminSettings returns a system settings form
   *
   * @return void
   */
  public function testAdminSettings() {
    $form = Taxonews::adminSettings();
    $this->assertTrue(is_array($form)
      && array_key_exists('#submit', $form)
      && in_array('system_settings_form_submit', $form['#submit'])
      && array_key_exists('#theme', $form)
      && ($form['#theme'] == 'system_settings_form'),
      t('adminSettings() looks like a system settings form.'), self::$group);
  }

  /**
   * Test whether an archive exists when we know it should
   */
  public function testArchiveExistsTrue() {
    // 1. Create a term in the predefined Tags vocabulary, vid 1, field field_tags
    $term = new stdClass();
    $term->name        = 'test term name';
    $term->description = 'test term description';
    $term->vid         = 1;
    $status = taxonomy_term_save($term);
    $tid = $term->tid;
    $this->assertEqual($status, SAVED_NEW, t('Term @tid created in default vocabulary.', array('@tid' => $tid)), self::$group);

    // 2. Create a node bearing it. "article" is the only bundle bearing a taxonomy instance by default
    $settings = array(
      'type'          => 'article', //
      'field_tags' => array(LANGUAGE_NONE => array(array('tid' => $tid))),
    );
    $node = $this->drupalCreateNode($settings);
    $this->assertNotNull($node->nid, t('Node created with taxonomy field.'), self::$group);

    // 4. Does archiveExists() see it ?
    $status = Taxonews::archiveExists($tid);
    $this->assertTrue($status, t('Archive exists when it should.'), self::$group);
  }

  /**
   * Test whether an archive exists when we know it should not
   */
  public function testArchiveExistsFalse() {
    // 1. Create a term in the predefined Tags vocabulary, vid 1, field field_tags
        $term = new stdClass();
    $term->name        = 'test term name';
    $term->description ='test term description';
    $term->vid         = 1;
    $status = taxonomy_term_save($term);
    $tid = $term->tid;
    $this->assertEqual($status, SAVED_NEW, t('Term @tid created in default vocabulary.', array('@tid' => $tid)), self::$group);

    // 3. no existing node bears the term, create a node not bearing it either
    $settings = array(); // No taxonomy
    $this->drupalCreateNode($settings);

    // 4. Does archiveExists() see it ?
    $status = Taxonews::archiveExists($tid);
    $this->assertFalse($status, t('Archive does not exist when it should not.'), self::$group);
  }

  /**
   * Test whether blockConfigure returns a configure form.
   *
   * @return void
   */
  public function testBlockConfigure() {
    $form = Taxonews::blockConfigure(0);
    $this->assertTrue(is_array($form),
      t('blockConfigure() is an array.'), self::$group);
    $this->assertTrue(empty($form),
      t('No setting offered on config form for invalid delta.'), self::$group);
  }

  /**
   * Test whether we obtain a list of blocks matching the chosen terms
   *
   * @return void
   */
  public function testBlockInfo() {
    // 1. set the Taxonews vocabulary to the default Tags vocabulary
    variable_set(Taxonews::VAR_VOCABULARY, 1);

    // 2. create a random number of terms within it
    $max_tids = 50;
    $count = mt_rand(1, $max_tids);
    for ($i = 0 ; $i < $count ; $i++) {
      $term = new stdClass();
      $term->name        = $this->randomName();
      $term->description = $this->randomName();
      $term->vid         = 1;
      taxonomy_term_save($term);
      $tid = $term->tid;
      $ar_terms[$tid] = $term;
    }
    $this->assertEqual(count($ar_terms), $count, t('@count terms created', array('@count' => $count)), self::$group);

    // 3. make sure all the blocks are listed
    variable_set(Taxonews::VAR_SHOW_EMPTY, TRUE); // all these blocks are empty
    $ar_blocks = Taxonews::blockInfo();
    $this->assertTrue(is_array($ar_blocks) && count($ar_blocks) == $count,
      t('blockInfo returns one block per term.'), self::$group);

    // 4. make sure all blocks have proper content and caching mode
    $success = TRUE;
    foreach ($ar_blocks as $block) {
      if (($block['cache'] != DRUPAL_CACHE_GLOBAL) || empty($block['info'])) {
        $success = FALSE;
        break;
      }
    }
    $this->assertTrue($success, t('Blocks have proper info and caching values.'), self::$group);
  }

/**
   * Test whether the empty message is actually stored for an invalid delta.
   *
   * @todo FIXME
   * @return void
   */
  public function testBlockSave() {
    $delta = $this->randomName(); // deltas are numeric, so this won't ever be a valid delta

    $configured_empty = $this->randomName();
    $edit = array(Taxonews::VAR_EMPTY_MESSAGES => $configured_empty);
    Taxonews::blockSave($delta, $edit);
    $messages = variable_get(Taxonews::VAR_EMPTY_MESSAGES, NULL);
    $this->assertNull($messages, t('Empty value is not saved for invalid deltas.'), self::$group);
  }

  /**
   * Test block content for an invalid delta.
   *
   * @return void
   */
  public function testBlockViewInvalidDelta() {
    $block = Taxonews::blockView(0);
    $this->assertTrue(is_array($block), t('Invalid block is an array.'), self::$group);

    $this->assertTrue(array_key_exists('subject', $block) && empty($block['subject']),
      t('Subject of invalid block is empty.'), self::$group);

    // Since invalid block cannot be configured, its content must be the default
    // empty content, i.e. NULL
    $this->assertTrue($block['content'] === NULL,
      t('Content of invalid block is null.'), self::$group);
  }

  /**
   * Test block content for a known valid delta
   *
   * @return void
   */
  public function testBlockViewValidDelta() {
    // 1. set the Taxonews vocabulary to the default vocabulary
    variable_set(Taxonews::VAR_VOCABULARY, 1);

    // 2. create a term within it
    $term = new stdClass();
    $term->name        = 'testBlockViewValidDelta name';
    $term->description = 'testBlockViewValidDelta description';
    $term->vid         = 1;

    $status = taxonomy_term_save($term);
    // debug($status);
    $tid = $term->tid;
    $this->assertEqual($status, SAVED_NEW, t('Term created: @tid = "@name"',
      array('@tid' => $tid, '@name' => $term->name)), self::$group);

    // 3. create an 'article' node bearing the term. Only bundle carrying tags by default
    $settings = array(
      'type'          => 'article',
      'field_tags' => array(LANGUAGE_NONE => array(array('tid' => $tid))),
      'title'         => $this->randomName(8),
    );
    $original_node = $this->drupalCreateNode($settings);
    // debug($original_node);
    // $this->pass(var_export($original_node, true), self::$group);

    // 5. Check
    $ar_nids = taxonomy_select_nodes($tid);
    // debug($ar_nids, 'dump nodes');
    $this->assertTrue(in_array($original_node->nid, $ar_nids),
      t('Just created node matches delta.'), self::$group);

    $block = Taxonews::blockView($tid);
    $this->assertTrue(is_array($block) && array_key_exists('subject', $block) && array_key_exists('content', $block),
      t('Block is well-formed.'), self::$group);
    $this->assertEqual($block['subject'], $term->name,
      t('Block subjet matches term name: @name', array('@name' => $term->name)),
      self::$group);

    /**
     * The content test is theme-dependent, a better one should be probably be
     * designed if possible.
     * 2009-07-13 But anyway, Simpletest, at this date, just does not
     * appear to support theme(). Content testing for block views has
     * therefore be moved to TaxonewsThemeUnitTest::testBlockView, and could
     * be completed by functional testing.
     */
    /*
    $this->pass(var_export($block, true));
    $this->pass(var_export($settings, true));
    $this->assertTrue(strpos($block['content'], $settings['title']) !== FALSE,
      t('Newly created node is found in block.'), self::$group);
     */
  }

  /**
   * Test whether empty messages are correctly returned.
   *
   * - return with no deltas should be an array
   * - invalid deltas should not have a message
   * - valid deltas should have one
   *
   * Since Taxonews uses tids for its deltas, any non-numeric delta is invalid.
   *
   * @todo D7 port
   * @return void
   */
  public function testGetEmptyMessages() {
    // 1. set the Taxonews vocabulary to the default vocabulary
    variable_set(Taxonews::VAR_VOCABULARY, 1);

    // 2. create a term within it
    $term = new stdClass();
    $term->name        = 'testGetEmptyMessages name';
    $term->description = 'testGetEmptyMessages description';
    $term->vid         = 1;

    $status = taxonomy_term_save($term);
    $tid = $term->tid;
    $this->assertEqual($status, SAVED_NEW, t('Term created: @tid = "@name"',
      array('@tid' => $tid, '@name' => $term->name)), self::$group);

    // 3. configure an empty text for its block
    $delta = $tid;
    $configured_empty = $this->randomName();
    $edit = array(Taxonews::VAR_EMPTY_MESSAGES => $configured_empty);
    Taxonews::blockSave($delta, $edit);

    // 4. check whether the list, which starts empty, now includes that text
    $messages = Taxonews::getEmptyMessages();
    $this->assertTrue(is_array($messages) && array_key_exists($delta, $messages),
      t('Valid key in empty messages for random delta.'), self::$group);
    $this->assertEqual($configured_empty, $messages[$delta],
      t('Valid value in empty messages for key matching random delta.'), self::$group);

    // 5. check whether the value is also returned by delta
    $this->assertEqual($configured_empty, Taxonews::getEmptyMessages($delta),
      t('Valid value returned by emptyMessages($delta).'), self::$group);
  }

  /**
   * Test our lightweight get-terms function.
   *
   * @todo D7 port
   * @return void
   */
  public function testGetTerms() {
    // 1. set the Taxonews vocabulary to the default tags vocabulary
    variable_set(Taxonews::VAR_VOCABULARY, 1);

    // 3. create a random number of terms within it
    $max_tids = 50;
    $count = mt_rand(1, $max_tids);
    for ($i = 0; $i < $count ; $i++) {
      $term = new stdClass();
      $term->name        = $this->randomName();
      $term->description = $this->randomName();
      $term->vid         = 1;
      $status = taxonomy_term_save($term);
      // debug($status);
      $tid = $term->tid;
      $ar_terms[$tid] = $term;
    }
    $this->assertEqual(count($ar_terms), $count, t('@count terms created', array('@count' => $count)), self::$group);

    // 4. check whether the terms just set are the same one returned by getTerms
    $got_terms = Taxonews::getTerms(TRUE); // Reset to avoid retrieving data from another test
    $success = is_array($got_terms) && count($got_terms) == $count;
    $this->assertTrue($success, t('Well-formed terms array.'), self::$group);
    // $this->pass(print_r($got_terms, true));
    foreach ($ar_terms as $tid => $term) {
      if (!array_key_exists($tid, $got_terms)) {
        $success = FALSE;
        break;
      }
      if ($term->name != $got_terms[$tid]->name) {
        $this->pass(t('Term name mismatch for tid @tid: passed @original, retrieved @got',
          array('@tid' => $tid, '@original' => $term->name, '@got' => $got_terms[$tid]->name)));
        $success = FALSE;
        break;
      }
    }
    $this->assertTrue($success, t('Accurate terms returned.'), self::$group);
  }
}

/**
 * Test hook implementations.
 *
 * These are mostly well-formedness tests: actual content is tested in the
 * Class group.
 *
 * @todo FIXME
 */
class TaxonewsHooksUnitTest extends DrupalWebTestCase {

    const MODULE = 'taxonews';

    public static $group;

    // Only way to initialize static properties to non constant content
    public function __construct($test_id = NULL) {
      parent::__construct($test_id);
      self::$group = t('Hooks');
    }

    public static function getInfo() {
    $ret = array(
      'name'        => t('Unit/Hooks'),
      'description' => t('Developer-type tests for Taxonews hook implementations'),
      'group'       => t('Taxonews'),
    );
    return $ret;
  }

  public function setUp() {
    parent::setUp('taxonews');
  }

  /**
   * Well-formedness tests for hook_block.
   *
   * WARNING: until 7.1.0-beta4, coder_review incorrectly triggers critical
   * errors about module_list() on each line containing module_invoke().
   * See issue #704032.
   *
   * The actual contents is tested in the Taxonews class group.
   * @return void
   */
  public function testHookBlock() {
    // 1. assign the default vocabulary to taxonews
    variable_set(Taxonews::VAR_VOCABULARY, array(1 => 1));

    // 2. create a term within it
    $term = new stdClass();
    $term->name        = 'test term name';
    $term->description = 'test term description';
    $term->vid         = 1;
    $status = taxonomy_term_save($term);

    // 3. Test hook_block_list()
    self::$group = t('hook_block_list');
    $blocks_list = module_invoke(self::MODULE, 'block_info');
    $this->assertTrue(is_array($blocks_list), t('Blocks list is an array.'), self::$group);
    $this->assertTrue(count($blocks_list) == 1, t('Blocks list contains the proper number of entries'), self::$group);
    $this->assertTrue(array_keys($blocks_list) == array($term->tid), t('Blocks list is well-formed'), self::$group);

    // 4. Test hook_block_view()
    self::$group = t('hook_block_view');
    $block = module_invoke(self::MODULE, 'block_view', 0); // can never exist
    $this->assertNull($block['subject'], t('No block subject for invalid delta.'), self::$group);
    $this->assertNull($block['content'], t('No block content for invalid delta.'), self::$group);

    $block = module_invoke(self::MODULE, 'block_view', $term->tid); // should exist
    $this->assertNotNull($block['subject'], t('A block subject exists for a valid delta.'), self::$group);
    $this->assertNotNull($block['content'], t('A block content exists for a valid delta.'), self::$group);

    // 5. Test hook_block_configure()
    self::$group = t('hook_block_configure');
    $form = module_invoke(self::MODULE, 'block_configure', 0);
    $this->assertEqual($form, array(), t('Empty config form for invalid delta.'), self::$group);

    $form = module_invoke(self::MODULE, 'block_configure', $term->tid);
    $this->assertTrue(is_array($form) && array_key_exists('taxonews_empty_messages', $form)
      && is_array($form['taxonews_empty_messages']), t('Well-formed config form for valid delta'), self::$group);

    // 6. Test hook_block_save()
    self::$group = t('hook_block_save');
    $ret = module_invoke(self::MODULE, 'block_save', 0, array());
    $this->assertNull($ret, t('No returns from blockSave.'), self::$group);
  }

  /**
   * Well-formedness tests for hook_menu.
   *
   * @return void
   */
  public function testHookMenu() {
    $menu = module_invoke('taxonews', 'menu');
    $this->assertTrue(is_array($menu), t('Menu is an array.'), self::$group);
  }

  /**
   * Tests the H _menu() implementation.
   *
   * @return void
   */
  public function testHookHelp() {
    $module = 'taxonews';
    $section = 'admin/help#' . $module;
    $help = module_invoke($module, 'help', $section, arg());
    $this->assertTrue(is_string($help), t('Module description present.'), self::$group);

    $section = $this->randomName();
    $help = module_invoke($module, 'help', $section, arg());
    $this->assertNull($help,
      t('No help for invalid section "@section".', array('@section' => $section)), self::$group);
  }

  /**
   * Tests the H _theme() implementation for well-formedness.
   *
   * @return void
   */
  public function testHookTheme() {
    $theme = module_invoke(self::MODULE, 'theme');
    $this->assertTrue(is_array($theme), t('Theme info is an array.'), self::$group);
    foreach ($theme as $template => $items) {
      $this->assertTrue(is_array($items)
        && (array_key_exists('variables', $items) && is_array($items['variables']))
        || (array_key_exists('render element', $items) && !array_key_exists('variables', $items)),
        t('Theme info for @template has required parameters', array('@template' => $template)),
        self::$group);
    }
  }
}

/**
 * Test theme functions
 *
 * @todo FIXME
 */
class TaxonewsThemeUnitTest extends DrupalWebTestCase {

  public static $group;

  public static function getInfo() {
    $ret = array(
      'name'        => t('Unit/Theme'),
      'description' => t('Developer-type tests for Taxonews default theme'),
      'group'       => t('Taxonews'),
    );
    return $ret;
  }

  // Only way to initialize static properties to non constant content
  public function __construct($test_id = NULL) {
    parent::__construct($test_id);
    self::$group = t('Theme');
  }

  public function setUp($deps = NULL) {
    parent::setUp('taxonews');
  }

  /**
   * Just how do you test a theme ? Here we just check it returns a string,
   * but this means we need to have a valid block.
   *
   * @return void
   */
  public function testBlockView() {
    // 1. set the Taxonews vocabulary to the default vocabulary
    variable_set(Taxonews::VAR_VOCABULARY, 1);

    // 2. create a term within it
    $term = new stdClass();
    $term->name        = 'test term name';
    $term->description = 'test term description';
    $term->vid         = 1;

    $status = taxonomy_term_save($term);
    $tid = $term->tid;
    $this->assertEqual($status, SAVED_NEW, t('Term created.'), self::$group);

    // 3. create an 'article' node bearing the term. Only bundle carrying tags by default
    $settings = array(
      'type'          => 'article',
      'field_tags' => array(LANGUAGE_NONE => array(array('tid' => $tid))),
      'title'         => $this->randomName(8),
    );
    $original_node = $this->drupalCreateNode($settings);
    // $this->pass(var_export($original_node, true), self::$group);

    // 5. Check the theme function, not depending on actual block content
    $delta = $tid;
    $item = $this->randomName();
    $items = array(
      1 => array('link' => $item),
      2 => array('link' => 'foo'),
      3 => array('link' => 'bar'));

    // We do not use theme('...') because it doesn't currently work in Simpletest anyway.
    // Should be fixed in D7 at some point.
    $path = drupal_get_path('module', 'taxonews');
    $variables = array(
      'delta'    => $delta,
      'ar_items' => $items,
      'tid'      => $delta,
      );
    template_preprocess_taxonews_block_view($variables);
    $block = theme_render_template($path . '/taxonews-block-view.tpl.php', $variables);
//    $this->pass(var_export($items, true));
//    $this->pass(var_export($variables, true));
//    $this->pass(var_export($block, true));
    $this->assertTrue(is_string($block),
      t('Theme returns a string.'), self::$group);
    $this->assertTrue(strpos($block, $item) !== FALSE, t('Content pattern found in string.'), self::$group);
  }
}

class TaxonewsRegressionTest extends DrupalWebTestCase {

  const THEME = 'bartik';

  public static $group;

  /**
   * @see https://www.drupal.org/node/343898#comment-2153092
   *
   * @param string $new_theme
   *   The name of the theme to activate.
   */
  protected function setTheme($new_theme) {
    db_update('system')->fields(array('status' => 1))
                       ->condition('type', 'theme')
                       ->condition('name', $new_theme)
                       ->execute();
    variable_set('theme_default', $new_theme);
    unset($GLOBALS['theme']);
    drupal_theme_initialize();
  }

  protected function enableTaxonewsBlock($term) {
    // We know this exists in Bartik, which has been set in setUp().
    $region = 'sidebar_first';

    // Update the list of Taxonews blocks.
    _block_rehash(static::THEME);

    // Other block fields are set as needed by the module: no need to set them.
    $sts = db_update('block')
      ->fields(array(
        'status' => 1,
        'region' => $region,
        'pages' => '',
        )
      )
      ->condition('module', 'taxonews')
      ->condition('delta', $term->tid)
      ->execute();
    $this->assertTrue($sts > 0, t('At least one block was enabled'), self::$group);
  }

  // Only way to initialize static properties to non constant content
  public function __construct($test_id = NULL) {
    parent::__construct($test_id);
    self::$group = t('Regressions');
  }

  public static function getInfo() {
    $ret = array(
      'name' => t('Regression'),
      'description' => t('Tests to catch regressions on fixed bugs.'),
      'group' => t('Taxonews'),
    );

    return $ret;
  }

  public function setUp($deps = NULL) {
    parent::setUp('taxonews');
    $this->setTheme(static::THEME);
  }

  public function testSecurity149008() {
    // 1. set the Taxonews vocabulary to the default vocabulary
    $vocabularies = taxonomy_get_vocabularies();
    $vocabulary = reset($vocabularies);
    variable_set(Taxonews::VAR_VOCABULARY, array($vocabulary->vid));

    // 2. create a term within it
    $name = '<script>alert("XSS")</script>';
    $term = new stdClass();
    $term->name        = $name;
    $term->description = 'test term description';
    $term->vid         = $vocabulary->vid;

    $status = taxonomy_term_save($term);
    $tid = $term->tid;
    $this->assertEqual($status, SAVED_NEW, t('Term created.'), self::$group);

    // 3. create an 'article' node bearing the term: empty block would not appear.
    $settings = array(
      'type'          => 'article',
      'field_tags' => array(LANGUAGE_NONE => array(array('tid' => $tid))),
      'title'         => $this->randomName(8),
    );
    $original_node = $this->drupalCreateNode($settings);

    // 4. Enable the block for this term.
    $this->enableTaxonewsBlock($term, 'sidebar_first');

    // 5. Check results.
    $this->drupalGet("node/{$original_node->nid}");
    $this->assertResponse(200, t('Home is displayed.'));
    $this->assertNoRaw($name);
    $this->assertRaw(check_plain($name));
  }
}
