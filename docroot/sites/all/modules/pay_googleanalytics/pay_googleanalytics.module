<?php

/**
 * @file
 * Adds the required Javascript to the checkout completion page to allow
 * e-commerce statistics tracking through Google Analytics.
 *
 * Refer to http://code.google.com/apis/analytics/docs/gaTrackingEcommerce.html
 * for documentation on the functions used to submit e-commerce statistics to
 * Google Analytics.
 *
 * Based on code from uc_googleanalytics module.
 */

/**
 * Implements hook_enable().
 */
function pay_googleanalytics_enable() {
  // Get the weight of the Google Analytics module.
  $weight = db_query("SELECT weight FROM {system} WHERE name = :module", array(':module' => 'googleanalytics'))->fetchField();

  // Update the weight of the Payment API Google Analytics module so its hooks get called
  // after the actual Google Analytics module.
  db_update('system')
    ->fields(array('weight' => max(1000, $weight + 1)))
    ->condition('name', 'pay_googleanalytics')
    ->execute();
}

/**
 * Implements hook_pay_transaction_complete().
 */
function pay_googleanalytics_pay_transaction_complete(&$transaction) {
  $_SESSION['pay_googleanalytics_pxid'] = $transaction->pxid;
}

/**
 * Implements hook_page_alter().
 */
function pay_googleanalytics_page_alter(&$page) {
  if (!empty($_SESSION['pay_googleanalytics_pxid'])) {
    if ($transaction = pay_load_object('pay_transaction', $_SESSION['pay_googleanalytics_pxid'])) {
      // Build the GA tracking code.
      $script = pay_googleanalytics_ecommerce_js($transaction);

      // Add the code to the footer.
      drupal_add_js($script, array('type' => 'inline', 'scope' => 'footer', 'preprocess' => FALSE));
    }

    // Clean out the session variable.
    unset($_SESSION['pay_googleanalytics_pxid']);
  }
  return '';
}

/**
 * Build the e-commerce JS passed to Google Analytics for order tracking.
 *
 * @param $transaction
 *   The fully loaded transaction object to convert into GA JS.
 * @return
 *   The JS that should be added to the page footer.
 */
function pay_googleanalytics_ecommerce_js($transaction) {
  $script = '';

  // Build the transaction arguments.
  $trans = array(
    'pxid' => $transaction->pxid,
    'store' => variable_get('site_name', ''),
    'total' => $transaction->total,
    'tax' => 0,
    'shipping' => 0,
    'city' => '',
    'state' => '',
    'country' => '',
  );

  $pay_activity = array_shift($transaction->activity());
  unset($transaction->activity); // Have to unset it because it causes php errors later.

  // Allow modules to alter the transaction arguments.
  drupal_alter('pay_googleanalytics_transaction', $trans, $transaction, $pay_activity);

  // Put the arguments into an array that is safe to implode directly.
  $args = array(
    '"'. $trans['pxid'] .'"',
    drupal_json_encode($trans['store']),
    '"'. $trans['total'] .'"',
    '"'. $trans['tax'] .'"',
    '"'. $trans['shipping'] .'"',
    drupal_json_encode($trans['city']),
    drupal_json_encode($trans['state']),
    drupal_json_encode($trans['country']),
  );

  // Add the transaction line to the JS.
  $script .= 'pageTracker._addTrans('. implode(', ', $args) .');';

  // Allow modules to add products. Should return an array of product objects
  // with elements: product_id, title, category, price, quantity.
  $products = array();
  drupal_alter('pay_googleanalytics_products', $products, $transaction, $pay_activity);
  // TODO: use the pay_item data? but where does that data come from??

  // Loop through the products on the order.
  foreach ($products as $product) {
    // Build the item arguments.
    $item = array(
      'pxid' => $transaction->pxid,
      'product_id' => $product->product_id,
      'name' => $product->title,
      'category' => (empty($product->category) ? t('No category') : $product->category),
      'price' => $product->price,
      'quantity' => $product->quantity,
    );

    // Put the arguments into an array that is safe to implode directly.
    $args = array(
      '"'. $item['pxid'] .'"',
      drupal_json_encode($item['product_id']),
      drupal_json_encode($item['name']),
      drupal_json_encode((string) $item['category']),
      '"'. $item['price'] .'"',
      '"'. $item['quantity'] .'"',
    );

    // Add the item line to the JS.
    $script .= 'pageTracker._addItem('. implode(', ', $args) .');';
  }

  // Add the function to submit the transaction to GA.
  $script .= 'pageTracker._trackTrans();';

  return $script;
}

