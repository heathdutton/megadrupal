<?php // $Id: nodequeue_randomizer.module,v 1.1 2010/01/21 00:29:22 gekigangaa Exp $
/**
 * @file nodequeue_randomizer.module
 *
 * @author Greg Field
 * @since Nov 26th, 2009
 **/


/*-------------- Hook Functions --------------------*/

/**
 * Implementation of hook_help()
 */
function nodequeue_randomizer_help($path, $args) {
  switch ($path) {
    case 'admin/help#nodequeue_randomizer':
      return t("Adds the functionality to have scheduled randomization of nodequeues as well as weight the items to increase their probability of being selected early in the randomizer.");
  }
}


/**
 * Implementation of hook_menu()
**/
function nodequeue_randomizer_menu() {
  $items = array();

  // Set randomizing settings on nodequeues
  $items['admin/structure/nodequeue/randomizer'] = array(
    'title'            => 'Schedule randomization',
    'access arguments' => array('administer nodequeue'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('nodequeue_randomizer_form_admin_settings'),
    'file'             => 'nodequeue_randomizer.admin.inc',
    'type'             => MENU_LOCAL_TASK
  );

  // Administrate weighting of nodes in individual queue.
  $items['admin/structure/nodequeue/%nodequeue/weight'] = array(
    'title'            => 'Randomizer weighting',
    'access arguments' => array(3),
    'access callback'  => 'nodequeue_queue_access',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('nodequeue_randomizer_form_admin_weight', 3),
    'file'             => 'nodequeue_randomizer.admin.inc',
    'type'             => MENU_LOCAL_TASK
  );
  $items['admin/structure/nodequeue/%nodequeue/weight/%subqueue'] = array(
    'title'            => 'Randomizer weighting',
    'access arguments' => array(3, 5),
    'access callback'  => 'nodequeue_queue_access',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('nodequeue_randomizer_form_admin_weight', 3, 5),
    'file'             => 'nodequeue_randomizer.admin.inc',
    'type'             => MENU_LOCAL_TASK
  );

  return $items;
}


/**
 * Implementation of hook_theme().
**/
function nodequeue_randomizer_theme($existing, $type, $theme, $path) {
  $themes = array();

  // Form themes
  $themes['nodequeue_randomizer_form_admin_weight'] = array(
    'render element' => 'form',
    'file'      => 'nodequeue_randomizer.theme.inc'
  );

  return $themes;
}


/**
 * Implementation of hook_cron_queue_info().
 */
function nodequeue_randomizer_cron_queue_info() {
  $queues = array();

  $queues['nodequeue_randomizer'] = array(
    'worker callback' => 'nodequeue_randomizer_randomize_queue'
  );

  return $queues;
}

/**
 * Implementation of hook_cron().
 */
function nodequeue_randomizer_cron() {
  module_load_include('inc', 'nodequeue_randomizer', 'nodequeue_randomizer.cron');

  $nodequeue_randomizer_queues = nodequeue_randomizer_get_queues();
  $queue = DrupalQueue::get('nodequeue_randomizer');

  foreach ($nodequeue_randomizer_queues as $subqueue_list) {
    foreach ($subqueue_list as $sqid => $subqueue_info) {
      if (!$subqueue_info['is_queued']) {
        $queue->createItem(array(
            'sqid' => $sqid,
            'last_run' => $subqueue_info['last_run'],
            'period' => $subqueue_info['period']
          )
        );

        db_update('nodequeue_randomizer')
          ->fields(array(
              'is_queued' => 1
            )
          )
          ->condition('sqid', $sqid)
          ->execute();
      }
    }
  }
}


/*------------- Helper Functions -------------------*/

/**
 * Retrieves a list of randomized nodequeues along with their settings.
 *
 * @param $all
 *   a boolean value for whether the function should return settings for all randomized
 *   nodequeues or just the nodequeues currently scheduled to be randomized.
 *
 * @return
 *   An array of indexed by qid and subindexed by sqid containing the randomized
 *   settings on relevant nodequeues.
 */
function nodequeue_randomizer_get_queues($all = FALSE) {
  $results = NULL;
  if ($all) {
    $results = db_query(
      "SELECT qid, sqid, is_queued, period, last_run
      FROM {nodequeue_randomizer}"
    );
  }
  else {
    $results = db_query(
      "SELECT qid, sqid, is_queued, period, last_run
      FROM {nodequeue_randomizer}
      WHERE (last_run + period) < :request_time",
      array(':request_time' => REQUEST_TIME)
    );
  }

  $nodequeue_randomizer_queues = array();
  foreach ($results as $queue_settings) {
    $nodequeue_randomizer_queues[$queue_settings->qid][$queue_settings->sqid] = array(
      'period'    => $queue_settings->period,
      'last_run'  => $queue_settings->last_run,
      'is_queued' => $queue_settings->is_queued
    );
  }

  return $nodequeue_randomizer_queues;
}
