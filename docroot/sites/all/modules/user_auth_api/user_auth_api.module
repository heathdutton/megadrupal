<?php

/**
 * @file
 * User authenticate API module.
 *
 * Provides an interface for additional user validation during the login process.
 */

define('USER_AUTH_API_DISABLE', variable_get('user_auth_api_disable', FALSE));

/**
 * Implements hook_permission().
 */
function user_auth_api_permission() {
  return array(
    'administer user auth api' => array(
      'title' => t('Administer User authentication API settings.'),
    ),
  );
}

/**
 * Implementeds hook_menu().
 */
function user_auth_api_menu() {
  $items = array();

  $items['admin/config/people/user_auth_api'] = array(
    'title' => 'User authentication API',
    'description' => 'User authentication API settings',
    'access arguments' => array('administer user auth api'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_auth_api_settings_page'),
    'file' => 'user_auth_api.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function user_auth_api_form_alter(&$form, &$form_state, $form_id) {
  // If API isn't disabled and it's a user login form.
  if (!USER_AUTH_API_DISABLE && (strpos($form_id, 'user_login') !== FALSE)) {
    // Add validation handler in the right place.
    $final_validate = array_pop($form['#validate']);
    array_push($form['#validate'], 'user_auth_api_login_validate', $final_validate);
  }
}

/**
 * Validation callback used by user auth api to deal with additional validation.
 */
function user_auth_api_login_validate($form, &$form_state) {
  if (array_key_exists('uid', $form_state) && ($form_state['uid'] == 1)) {
    return;
  }

  // Call our user auth validation.
  $auth = new UserAuthAPI($form_state['values']);

  $validation = $auth->invokePlugins();
  $plugin = $validation->getPlugin();

  // If the validation has returned TRUE.
  if (($validation->getValidationResult() === TRUE)) {
    // Only use this if isExternal is set to true. Otherwise no need to use
    // external validate.
    if ($plugin->isExternal() == TRUE) {
      $username = $form_state['values']['name'];
      $password = $form_state['values']['pass'];

      // See if we have matched a uid above 0 for this username.
      $uid = _user_auth_api_get_uid_from_username($username);

      // Only call user_external_login_register if there isn't already a user.
      if (!$uid) {
        user_external_login_register($username, 'user_auth_api');
        $account = user_external_load($username);
        // Save the password the user entered.
        user_save($account, array('pass' => $password));
      }
      else {
        $account = user_load($uid);
      }
      // Always add uid into form state regardless of whether
      // user_external_login_register is being used.
      // As we are using our own validate handler. user module needs $form_state['uid'].
      $form_state['uid'] = $account->uid;
    }
    $plugin->validateSuccess($account, $form_state['values']);
  }
  elseif ($validation->getValidationResult() === FALSE) {
    $plugin->validateError($form, $form_state['values']);
    return FALSE;
  }

}

/**
 * Helper function to return a users uid based on their username.
 */
function _user_auth_api_get_uid_from_username($username) {
  return db_query('SELECT uid from {users} WHERE name = :name', array(':name' => $username))->fetchField();
}
