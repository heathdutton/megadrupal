<?php
/**
 * @file
 * Tests for user authentication api.
 */

class UserAuthAPIUnitTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'User authenticate API tests',
      'description' => 'Tests for User authenticate API classes.',
      'group' => 'User authenticate API',
    );
  }

  function setUp() {
    parent::setUp(array('user_auth_api', 'user_auth_api_test'));
  }

  /**
   * Tests UserAuthAPI methods.
   */
  function testPlugins() {
    $auth = new UserAuthAPI();

    $plugin_info = $auth->getPluginInfo();
    $this->assertTrue(is_array($plugin_info), t('An array of plugin info instances was returned.'));
    $this->assertEqual(count($plugin_info), 3, 'Correct number of items returned.');

    $plugin_instances = $auth->instantiatePlugins();
    $this->assertTrue(is_array($plugin_instances), t('An array of plugin instances were returned.'));
    $this->assertEqual(count($plugin_instances), 3, 'Correct number of items returned.');

    foreach ($plugin_instances as $plugin_name => $plugin_instance) {
      $this->assertTrue($plugin_instance['plugin'] instanceof UserAuthAPIPlugin, t('@plugin plugin instance found.', array('@plugin' => $plugin_name)));
    }

    $auth->sortPluginsByWeight($plugin_instances);
    $this->assertTrue(is_array($plugin_instances), t('An array of sorted (by weight) plugin instances were returned.'));
    $this->assertEqual(count($plugin_instances), 3, 'Correct number of items returned.');
    // Test the order.
    $expected = array('null', 'success', 'fail');
    $this->assertIdentical(array_keys($plugin_instances), $expected, 'Plugin info correctly sorted.');

    $plugin_invoked = $auth->invokePlugins();
    $this->assertTrue($plugin_invoked instanceof UserAuthAPIValidateResponse, t('An Instance of UserAuthAPIValidateResponse was returned.'));
  }

  /**
   * Tests the plugin responses.
   */
  function testPluginResponses() {
    $auth = new UserAuthAPI();
    $validation = $auth->invokePlugins(array('fail'));

    $this->assertTrue($validation instanceof UserAuthAPIValidateResponse, t('An instance of UserAuthAPIValidateResponse returned'));
    $this->assertTrue($validation->getValidationResult(), t('The plugin validation response was TRUE.'));

    $auth = new UserAuthAPI();
    $validation = $auth->invokePlugins(array('success'));

    $this->assertTrue($validation instanceof UserAuthAPIValidateResponse, t('An instance of UserAuthAPIValidateResponse returned'));
    $this->assertFalse($validation->getValidationResult(), t('The plugin validation response was FALSE.'));

    $auth = new UserAuthAPI();
    $validation = $auth->invokePlugins(array('success', 'fail'));

    $this->assertTrue($validation instanceof UserAuthAPIValidateResponse, t('An instance of UserAuthAPIValidateResponse returned'));
    $this->assertNull($validation->getValidationResult(), t('The plugin validation response was NULL.'));
  }

  /**
   * Tests the user login form.
   */
  function testLoginForm() {
    $edit = array('name' => $this->randomName(), 'pass' => $this->randomString());
    $this->drupalPost('user/login', $edit, t('Log in'));

    // Assert the response, message, and path.
    $this->assertResponse(200);
    $this->assertText('Success with Test case!');
    $this->assertUrl('user/2');

    $this->drupalLogout();

    // Set a variable so the alter hook will remove the test success plugin.
    // @see user_auth_api_test_user_auth_api_info_alter().
    variable_set('user_auth_api_test', TRUE);
    // Clear caches, so our plugin cache is also cleared.
    drupal_flush_all_caches();

    $edit = array('name' => $this->randomName(), 'pass' => $this->randomString());
    $this->drupalPost('user/login', $edit, t('Log in'));

    // Assert the response, message, and path. This test also verifies that the
    // alter hook was invoked and the plugin info was altered.
    $this->assertResponse(200);
    $this->assertText('Error has occurred for the Test case!');
    $this->assertUrl('user/login');
  }

  /**
   * Test the UI admin form.
   */
  function testUI() {
    $user = $this->drupalCreateUser(array('administer user auth api'));
    $this->drupalLogin($user);

    $this->drupalGet('admin/config/people/user_auth_api');
    $this->assertResponse(200);

    // @todo Expand these to test the actual output too.
  }

} // UserAuthAPIUnitTestCase.
