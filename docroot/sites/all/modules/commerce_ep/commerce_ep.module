<?php
/**
 * @file
 * Commerce Estonian Payments.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_ep_commerce_payment_method_info() {
  module_load_include('inc', 'commerce_ep', 'inc/admin');
  $payment_methods = array();
  $banks = array(
    'seb' => 'SEB Estonia',
    'swedbank' => 'Swedbank Estonia',
    'sampo' => 'Sampo Estonia',
    'nordea' => 'Nordea Estonia',
  );
  foreach ($banks as $bank => $bank_name) {
    $payment_methods[$bank] = array(
      'title' => t("@bank_name", array("@bank_name" => $bank_name)),
      'display_title' => commerce_ep_get_icon($bank),
      'short_title' => $bank,
      'description' => t("Payment method for @bank_name bank", array('@bank_name' => $bank_name)),
      'terminal' => FALSE,
      'offsite' => TRUE,
      'offsite_autoredirect' => TRUE,
    );
  }
  return $payment_methods;
}

/**
 * Ask for SEB redirect form.
 */
function seb_redirect_form($form, &$form_state, $order, $payment_method) {
  $settings = commerce_ep_settings_additions($order, $payment_method);
  return commerce_ep_build_redirect_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Ask for Swedbank redirect form.
 */
function swedbank_redirect_form($form, &$form_state, $order, $payment_method) {
  $settings = commerce_ep_settings_additions($order, $payment_method);
  return commerce_ep_build_redirect_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Ask for Sampo redirect form.
 */
function sampo_redirect_form($form, &$form_state, $order, $payment_method) {
  $settings = commerce_ep_settings_additions($order, $payment_method);
  return commerce_ep_build_redirect_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Ask for Nordea redirect form.
 */
function nordea_redirect_form($form, &$form_state, $order, $payment_method) {
  $settings = commerce_ep_settings_additions($order, $payment_method);
  return commerce_ep_build_redirect_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Implements hook_redirect_form_validate().
 * Validate SEB.
 */
function seb_redirect_form_validate($order, $payment_method) {
  if (isset($_POST['VK_STAMP'])) {
    // Process the transaction based on the parameters received.
    commerce_ep_transaction($order, $payment_method);
  }
}

/**
 * Implements hook_redirect_form_validate().
 * Validate Swedbank.
 */
function swedbank_redirect_form_validate($order, $payment_method) {
  if( isset($_GET['VK_AUTO'])){
    $_POST = $_GET;
  }
  if (isset($_POST['VK_STAMP'])) {
    commerce_ep_transaction($order, $payment_method);
  }
}

/**
 * Implements hook_redirect_form_validate().
 * Validate Sampo.
 */
function sampo_redirect_form_validate($order, $payment_method) {
  if (isset($_POST['VK_STAMP'])) {
    commerce_ep_transaction($order, $payment_method);
  }
}

/**
 * Implements hook_redirect_form_validate().
 * Validate Nordea.
 */
function nordea_redirect_form_validate($order, $payment_method) {
  if (isset($_GET['SOLOPMT_RETURN_STAMP'])) {
    commerce_ep_transaction($order, $payment_method);
  }
}

/**
 * Creates an example payment transaction for the specified charge amount.
 */
function commerce_ep_transaction($order, $payment_method) {
  // Ask results from verify function.
  commerce_ep_get_banklink($payment_method['method_id']);
  if (isset($_POST['VK_SERVICE'])) {
    // Set merchant public key for most settings variable.
    if ($_POST['VK_SERVICE'] == 1101) {
      $settings = array('bank_public_key' => $payment_method['settings']['merchant_public_key']);
      $key_test = banklink_verify_signature($_POST, $settings);
    }
  }
  if (isset($_GET['SOLOPMT_RETURN_STAMP'])) {
    if ($_GET['SOLOPMT_RETURN_VERSION'] == 0003) {
      // Set merchant public key & hash for nordea bank settings variable.
      $settings = array(
        'hash' => $payment_method['settings']['hash'],
        'merchant_mac' => $payment_method['settings']['merchant_mac'],
      );
      $nordea_test = banklink_verify_nordea_signature($_GET, $settings);
    }
  }
  // Test bank signature if results are not empty then create order.
  if (isset($key_test)) {
    $transaction = commerce_payment_transaction_new($payment_method['method_id'], $_POST['VK_STAMP']);
  }
  if (isset($nordea_test)) {
    $transaction = commerce_payment_transaction_new($payment_method['method_id'], $_GET['SOLOPMT_RETURN_STAMP']);
  }
  if (!isset($key_test) && !isset($nordea_test)) {
    $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $currency = $wrapper->commerce_order_total->currency_code->value();
    $transaction->instance_id = $payment_method['instance_id'];
    $transaction->amount = 0;
    $transaction->currency_code = $currency;
    $transaction->remote_status = t('Failure');
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $transaction->message = t("Keys doesn't validate or payment cancelled.");
    commerce_payment_transaction_save($transaction);

    drupal_set_message(t("Keys doesn't validate or payment cancelled."), 'error');

    $order->status = 'checkout_review';
    commerce_order_save($order);
    drupal_goto(commerce_checkout_order_uri($order));
    return FALSE;
  }
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $amount;
  $transaction->currency_code = $currency;
  $transaction->remote_status = t('Success');
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->message = t('Payment received at @date');
  $transaction->message_variables = array('@date' => date("d-m-Y H:i:s", REQUEST_TIME));
  commerce_payment_transaction_save($transaction);
}

/**
 * Build payment redirect form.
 */
function commerce_ep_build_redirect_form($form, &$form_state, $order, $settings) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  // Get financial info.
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();
  $payment = array(
    'order_id' => $order->order_id,
    'amount' => $amount / 100,
    'currency' => $currency_code,
    'message' => t('Order nr. @num', array('@num' => $order->order_id)),
    // Return to the payment redirect page for processing successful payments.
  );
  commerce_ep_get_banklink($settings['payment_method_id']);
  if ($settings['payment_method_id'] == 'nordea') {
    banklink_expand_nordea_payment_form($form, $settings, $payment);
  }
  else {
    banklink_expand_payment_form($form, $settings, $payment);
  }
  return $form;
}

/**
 * Settings addons for redirect form.
 */
function commerce_ep_settings_additions($order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['banklink_url'])) {
    drupal_set_message(t("Payment methods aren't correctly configured"), 'error');
    return array();
  }
  // Return to the previous page when payment is canceled.
  // Return to the payment redirect page for processing successful payments.
  // Specify the current payment method instance ID in the notify_url.
  $settings = array(
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    'reject_return' => url('checkout/' . $order->order_id . '/payment/reject/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    'payment_method' => $payment_method['instance_id'],

    'payment_method_id' => $payment_method['method_id'],
  );
  return $settings;
}

/**
 * Payment gets interrupted then just show some warning.
 */
function commerce_ep_cancel($bank) {
  drupal_set_message(t('Payment has been cancelled.'), 'warning');
  drupal_goto();
}

/**
 * Include specific functions if required.
 */
function commerce_ep_get_banklink($bank) {
  if ($bank == 'nordea') {
    module_load_include('inc', 'commerce_ep', 'inc/nordea_banklink');
  }
  else {
    module_load_include('inc', 'commerce_ep', 'inc/banklink');
  }
}

/**
 * Load icons for cart pages.
 */
function commerce_ep_get_icon($bank_name) {
  $src = base_path() . drupal_get_path('module', 'commerce_ep') . "/images/$bank_name.gif";
  $name = ucfirst($bank_name);
  return <<<html
  <img style="vertical-align: middle" src="$src" alt="$name" />
html;
}
