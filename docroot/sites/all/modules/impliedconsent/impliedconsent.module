<?php
/**
 * @file
 * Implementation of the Implied Consent JavaScript library.
 */

// Default visibility settings for the cookie notice script.
define('IMPLIEDCONSENT_PAGES', "admin\nadmin/*\nbatch\nnode/add*\nnode/*/*\nuser/*/*");
define('IMPLIEDCONSENT_VARIANT', 'minified');
define('IMPLIEDCONSENT_MESSAGE', 'We use cookies as set out in our privacy policy. By using this website, you agree we may place these cookies on your device.');
define('IMPLIEDCONSENT_BUTTON_LABEL', 'Close');
define('IMPLIEDCONSENT_ASYNC', FALSE);
define('IMPLIEDCONSENT_METHOD', 'snippet');
define('IMPLIEDCONSENT_VALIDATE_BY_CLICK', TRUE);

/**
 * Implements hook_menu().
 */
function impliedconsent_menu() {
  $items['admin/config/system/impliedconsent'] = array(
    'title' => 'Implied Consent',
    'description' => 'Configure the Implied Consent cookie notice library behavior.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('impliedconsent_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'impliedconsent.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_libraries_info().
 */
function impliedconsent_libraries_info() {
  return array(
    'implied-consent' => array(
      'title' => 'Implied Consent library',
      'vendor url' => 'https://github.com/dennisinteractive/implied-consent',
      'download url' => 'https://github.com/dennisinteractive/implied-consent',
      'version arguments' => array(
        'file' => 'dist/implied-consent.min.js',
        'pattern' => "/Implied Consent version ([0-9\.]*)/",
      ),
      'files' => array(
        'js' => array(
          'dist/implied-consent.js',
        ),
      ),
      'variants' => array(
        'minified' => array(
          'files' => array(
            'js' => array(
              'dist/implied-consent.min.js',
            ),
          ),
        ),
        'source' => array(
          'files' => array(
            'js' => array(
              'dist/implied-consent.js',
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_page_alter().
 */
function impliedconsent_page_alter(&$page) {
  global $user;

  if (_impliedconsent_visibility_pages() && _impliedconsent_visibility_roles($user)) {

    $message = variable_get('impliedconsent_message', array('value' => IMPLIEDCONSENT_MESSAGE, 'format' => NULL));
    $message_formatted = check_markup($message['value'], $message['format']);
    $settings = array(
      'noticeText' => $message_formatted,
      'confirmText' => variable_get('impliedconsent_button_label', IMPLIEDCONSENT_BUTTON_LABEL),
      'validateByClick' => (bool) variable_get('impliedconsent_validate_by_click', IMPLIEDCONSENT_VALIDATE_BY_CLICK),
    );
    $init = array(
      'var impliedConsent = impliedConsent || {}; impliedConsent.q = impliedConsent.q || [];',
      'impliedConsent.q.push(["init", ' . drupal_json_encode($settings) . ']);',
    );

    // Add the initiator script.
    drupal_add_js(implode("\n", $init), array('type' => 'inline', 'scope' => 'footer'));
    // Load the library.
    $variant = variable_get('impliedconsent_variant', IMPLIEDCONSENT_VARIANT);
    $method = variable_get('impliedconsent_method', IMPLIEDCONSENT_METHOD);
    switch ($method) {
      case 'drupal':
        libraries_load('implied-consent', $variant);
        break;
      default:
        // $library_path = libraries_get_path('implied-consent') . '/dist/implied-consent' . $variant == 'minified' ? '.min' : '' . '.js';
        $variant_short = ($variant == 'minified') ? '.min' : '';
        $library_path = libraries_get_path('implied-consent') . '/dist/implied-consent' . $variant_short . '.js';
        $snippet = array(
          '(function(w, d) {',
          '  var s = d.createElement("script"), el = d.getElementsByTagName("script")[0]; s.async = true;',
          '  s.src = "' . file_create_url($library_path) . '"; el.parentNode.insertBefore(s, el);',
          '})(this, this.document);',
        );
        drupal_add_js(implode($snippet, PHP_EOL), array('type' => 'inline'));
        break;
    }
  }
}

/**
 * Determine role visibility based on configured criteria.
 *
 * Based on visibility setting this function returns TRUE if the plugin should
 * be added for the current role and otherwise FALSE.
 */
function _impliedconsent_visibility_roles($account) {

  $visibility = variable_get('impliedconsent_visibility_roles', 0);
  $enabled = $visibility;
  $roles = variable_get('impliedconsent_roles', array());

  if (array_sum($roles) > 0) {
    // One or more roles are selected.
    foreach (array_keys($account->roles) as $rid) {
      // Is the current user a member of one of these roles?
      if (isset($roles[$rid]) && $rid == $roles[$rid]) {
        // Current user is a member of a role that
        // should or should not be notified.
        $enabled = !$visibility;
        break;
      }
    }
  }
  else {
    // No role is selected being notified, therefore
    // all roles should get the notice.
    $enabled = TRUE;
  }

  return $enabled;
}

/**
 * Determine page visibility based on configured criteria.
 *
 * Based on visibility setting this function returns TRUE if the plugin should
 * be added to the current page and otherwise FALSE.
 */
function _impliedconsent_visibility_pages() {
  static $page_match;

  // Cache visibility result if function is called more than once.
  if (!isset($page_match)) {

    $visibility = variable_get('impliedconsent_visibility_pages', 0);
    $setting_pages = variable_get('impliedconsent_pages', IMPLIEDCONSENT_PAGES);

    // Match path if necessary.
    if (!empty($setting_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = drupal_strtolower($setting_pages);
      if ($visibility < 2) {
        // Convert the Drupal path to lowercase.
        $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
        // Compare the lowercase internal and lowercase path alias (if any).
        $page_match = drupal_match_path($path, $pages);
        if ($path != $_GET['q']) {
          $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
        }
        // When $visibility has a value of 0, the plugin is loaded on all
        // pages except those listed in $pages. When set to 1, it is displayed
        // only on those pages listed in $pages.
        $page_match = !($visibility xor $page_match);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }

  }
  return $page_match;
}
