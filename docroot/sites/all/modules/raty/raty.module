<?php

/**
 * @file
 *
 * Raty - basic API functions and hook implementations.
 */

define('RATY_STAR_COUNT', 5);

/**
 * Implements hook_libraries_info().
 * @note : Libraries 2.x
 */
function raty_libraries_info() {
  $libraries['raty'] = array(
    'name' => 'jQuery Raty (A Star Rating Plugin)',
    'vendor url' => 'http://wbotelhos.com/raty/',
    'download url' => 'http://github.com/wbotelhos/raty/archive/2.5.2.zip',
    'version arguments' => array(
      'file' => 'README.md',
      'pattern' => '@version\s+([0-9a-zA-Z\.-]+)@',
      'lines' => 8
    ),
    'path' => 'lib',
    'files' => array(
      'js' => array(
        'jquery.raty.js'
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'jquery.raty.min.js',
          ),
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Load the Raty jQuery library.
 *
 * @return string
 *   Path to Raty library.
 */
function raty_load_js($type = 'output') {
  $module_path = drupal_get_path('module', 'raty');
  $data = &drupal_static(__FUNCTION__, array());

  switch ($type) {
    case 'output':
      if (!isset($data['raty_path_loaded'])) {
        $data['loaded'] = FALSE;
        // Load our own JS.
        $raty_js = $module_path . '/js/raty.js';
        drupal_add_js($raty_js);
        // Try libraries module first if they want their own library.
        if (module_exists('libraries')) {
          if ($library = libraries_load('raty') && !empty($library['loaded'])) {
            $raty_path = $library['library path'] . '/' . $library['path'];
            $data['raty_path_loaded'] = $raty_path;
            return $data;
          }
        }
        // Try bundled with module.
        if (file_exists($module_path . '/raty/lib/jquery.raty.min.js')) {
          drupal_add_js($module_path . '/raty/lib/jquery.raty.min.js');
          $raty_path = $module_path . '/raty/lib';
          $data['raty_path_loaded'] = $raty_path;
          return $data;
        }
      }
      else {
        $data['loaded'] = TRUE;
        return $data;
      }

      break;

    case 'input':
      if (!isset($data['raty_input_loaded'])) {
        // Load our own JS.
        $raty_js = $module_path . '/js/raty_input.js';
        drupal_add_js($raty_js);
        // Try libraries module first if they want their own library.
        if (module_exists('libraries')) {
          if ($library = libraries_load('raty') && !empty($library['loaded'])) {
            $raty_path = $library['library path'] . '/' . $library['path'];
            $data['raty_input_loaded'] = $raty_path;
            return $raty_path;
          }
        }
        // Try bundled with module.
        if (file_exists($module_path . '/raty/lib/jquery.raty.min.js')) {
          drupal_add_js($module_path . '/raty/lib/jquery.raty.min.js');
          $raty_path = $module_path . '/raty/lib';
          $data['raty_input_loaded'] = $raty_path;
          return $raty_path;
        }
      }
      else {
        return FALSE;
      }

      break;
  }

  // Hmm.
  drupal_set_message(t('Problem loading the jQuery Raty library.
    Download and extract to modules/raty/raty or sites/all/libraries/raty'),
    'error', FALSE);

}

/**
 * Implements hook_field_formatter_info().
 */
function raty_field_formatter_info() {
  return array(
    'raty_rating_formatter' => array(
      'label' => t('Raty Star rating'),
      'field types' => array('number_integer', 'number_decimal', 'number_float', 'list_number', 'list_integer', 'list_float'),
      'settings' => array(
        'star_count' => RATY_STAR_COUNT,
        'remove_empty' => 0,
        'image_width' => 'auto',
        'custom_images' => 0,
        'custom_image_on' => 0,
        'custom_image_off' => 0,
        'custom_image_half' => 0,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function raty_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();
  $element['star_count'] = array(
    '#type' => 'select',
    '#title' => t('Number of stars'),
    '#default_value' => $settings['star_count'],
    '#options' => array(1 => 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20),
  );

  $element['remove_empty'] = array(
    '#type' => 'checkbox',
    '#title' => t('Remove empty stars'),
    '#description' => t('Note this can overrule the "Number of stars" setting.'),
    '#default_value' => $settings['remove_empty'],
  );

  $element['image_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Image width'),
    '#description' => t('Set the width of images.  Enter full-CSS style declaration (e.g. 50px, 2em, 25%).  Useful when using custom images.'),
    '#size' => 10,
    '#default_value' => $settings['image_width'],
  );

  $element['custom_images'] = array(
    '#type' => 'checkbox',
    '#title' => t('Provide custom on/off/half images'),
    '#description' => t('Provide your own images for the "stars".'),
    '#default_value' => $settings['custom_images'],
  );

  $element['custom_image_on'] = array(
    '#type' => 'managed_file',
    '#field_name' => $field['field_name'],
    '#title' => t('"On" image'),
    '#description' => t('The active state.'),
    '#default_value' => (!empty($settings['custom_image_on']) ? $settings['custom_image_on']['fid'] : NULL),
    '#attributes' => array('field_id' => $field['id']),
    '#upload_location' => 'public://raty_custom_images/',
    '#states' => array(
      'visible' => array(
        ':input[name="fields['.$field['field_name'].'][settings_edit_form][settings][custom_images]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $element['custom_image_off'] = array(
    '#type' => 'managed_file',
    '#field_name' => $field['field_name'],
    '#title' => t('"Off" image'),
    '#description' => t('The inactive state.'),
    '#default_value' => (!empty($settings['custom_image_off']) ? $settings['custom_image_off']['fid'] : NULL),
    '#attributes' => array('field_id' => $field['id']),
    '#upload_location' => 'public://raty_custom_images/',
    '#states' => array(
      'visible' => array(
        ':input[name="fields['.$field['field_name'].'][settings_edit_form][settings][custom_images]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $element['custom_image_half'] = array(
    '#type' => 'managed_file',
    '#field_name' => $field['field_name'],
    '#title' => t('"Half" image'),
    '#description' => t('This is shown for half-stars.'),
    '#default_value' => (!empty($settings['custom_image_half']) ? $settings['custom_image_half']['fid'] : NULL),
    '#attributes' => array('field_id' => $field['id']),
    '#upload_location' => 'public://raty_custom_images/',
    '#states' => array(
      'visible' => array(
        ':input[name="fields['.$field['field_name'].'][settings_edit_form][settings][custom_images]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $element['custom_image_on']['#element_validate'][] = 'raty_custom_image_validate';
  $element['custom_image_off']['#element_validate'][] = 'raty_custom_image_validate';
  $element['custom_image_half']['#element_validate'][] = 'raty_custom_image_validate';

  return $element;
}

/**
 * Callback for #element_validate on custom image uploads for raty fields.
 */
function raty_custom_image_validate($element, &$form_state, $form) {
  if (empty($element['#value']['fid'])) {
    return;
  }
  // Change status to permanent & save.
  $file = file_load($element['#value']['fid']);
  $file->status = FILE_STATUS_PERMANENT;
  file_save($file);
  // Record that raty is using the file.
  file_usage_add($file, 'raty', 'field', $element['#attributes']['field_id']);
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function raty_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  // Create unique identifier per instance.
  $field_id = $instance['field_name'] . $instance['id'];
  $max = (isset($settings['star_count']) ? $settings['star_count'] : RATY_STAR_COUNT);
  $value = $max - 1;

  if ($settings['remove_empty']) {
    $max = $value;
  }
  // Include the Raty library.
  $raty_data = raty_load_js('output');
  if (!$raty_data['loaded']) {
    $raty_path = $raty_data['raty_path_loaded'];
    $image_path = base_path() . $raty_path . '/img/';
    $raty_core_settings['image_path'] = $image_path;
    drupal_add_js(array('raty' => $raty_core_settings), 'setting');
  }
  $raty_settings[$field_id] = array(
    'image_width' => $settings['image_width'],
    'custom_images' => $settings['custom_images'],
  );
  // Check for user-supplied custom images.
  $image_options = array(
    'custom_image_on',
    'custom_image_off',
    'custom_image_half',
  );
  foreach ($image_options as $image_option) {
    if (!empty($settings[$image_option]['fid'])) {
      $image = file_create_url(file_load($settings[$image_option]['fid'])->uri);
      $raty_settings[$field_id][$image_option] = $image;
    }
  }
  drupal_add_js(array('raty' => $raty_settings), 'setting');

  $summary = raty_field_formatter_output($field_id, $value, $max,
    $settings);

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function raty_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $element = array();
  // Create unique identifier per instance.
  $field_id = $instance['field_name'] . $instance['id'];
  $max = (isset($settings['star_count']) ? $settings['star_count'] : RATY_STAR_COUNT);

  foreach ($items as $delta => $item) {
    $value = empty($item['value']) ? 0 : $item['value'];
    if ($settings['remove_empty']) {
      $max = $value;
    }
    $output = raty_field_formatter_output($field_id, $value, $max, $settings);
    $element[$delta] = array('#markup' => $output);
  }

  // Include the Raty library.
  $raty_data = raty_load_js('output');
  if (!$raty_data['loaded']) {
    $raty_path = $raty_data['raty_path_loaded'];
    $image_path = base_path() . $raty_path . '/img/';
    $raty_core_settings['image_path'] = $image_path;
    drupal_add_js(array('raty' => $raty_core_settings), 'setting');
  }
  $raty_settings[$field_id] = array(
    'image_width' => $settings['image_width'],
    'custom_images' => $settings['custom_images'],
  );
  // Check for user-supplied custom images.
  $image_options = array(
    'custom_image_on',
    'custom_image_off',
    'custom_image_half',
  );
  foreach ($image_options as $image_option) {
    if (!empty($settings[$image_option]['fid'])) {
      $image = file_create_url(file_load($settings[$image_option]['fid'])->uri);
      $raty_settings[$field_id][$image_option] = $image;
    }
  }

  drupal_add_js(array('raty' => $raty_settings), 'setting');

  return $element;
}

/**
 * Generate Raty star widget HTML.
 *
 * @param integer $value
 *   Star rating value.
 * @param integer $max
 *   Maximum number of stars to show.
 * @param array $settings
 *   Settings gathered during widget config.
 *
 * @return string
 *   HTML output for Raty widget.
 */
function raty_field_formatter_output($field_id, $value = 0, $max = RATY_STAR_COUNT, $settings = array()) {
  // Will use other variables later for more features.
  $output = '<div class="raty-star ' . $field_id . '" data-score="' . $value . '" ';
  $output .= 'data-number="' . $max . '">';
  $output .= '<span class="element-invisible">' . $value . '</span>';
  $output .= '</div>';

  return $output;
}
