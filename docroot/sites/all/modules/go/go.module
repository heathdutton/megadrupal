<?php

/**
 * @file ./go.module
 *
 * @author Andy Truong
 * @author Quyen Bui
 * @author Thai Nguyen
 * @author Nguyen Tran
 *
 * Authors:
 *
 *   - Auto loader: Andy Truong
 *   - go_cache(): Andy Truong
 *   - Better formats: Nguyen Tran, Andy Truong
 *   - Google Analytics: Quyen, Andy Truong
 *   - 403/404 handler: Thai Nguyen
 *
 */

require_once dirname(__FILE__) . '/includes/go.inc';

/**
 * Store hooks in seprate file to make it's easier to see what hooks implemented
 * in this module.
 */
require_once dirname(__FILE__) . '/includes/go.hooks.inc';

/**
 * Autloading feature.
 *
 * This feature may slow down your Drupal a bit, to disable this function, define
 * GO_DISABLE_AUTOLOAD in your settings.php
 *
 * To make sure your classes are loaded by go autoloader, please implements
 * hook_go_api().
 *
 * @see Issue #24
 */
if (!defined('GO_DISABLE_AUTOLOAD')) {
  require_once dirname(__FILE__) . '/includes/go.autoload.inc';
}

/**
 * Get modules that implements Go API.
 *
 * @return array
 */
function go_get_module_apis($reset = FALSE) {
  if ($reset) {
    $cache = &drupal_static('ctools_plugin_api_info');
    if (isset($cache['go'][$api])) {
      unset($cache['go'][$api]);
    }
  }

  ctools_include('plugins');
  $return = ctools_plugin_api_info('go', $api, '1.0', '1.0');

  return $return;
}

/**
 * Build google analytics code
 *
 * @return string Google Analytics embed code
 */
function go_get_google_analytics_code($id) {
  // get domain name
  $domain = $GLOBALS['base_url'];
  $domain = preg_replace('/^(http|https)+:\/\/+/si', '', $domain);

  return "(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  ga('create', '$id', '$domain');
  ga('send', 'pageview');";
}

/**
 * Insert google analytics code into every page footer
 *
 * @see go_init()
 */
function go_google_analytics_code_insert() {
  if (defined('GO_GOOGLE_ANALYTICS')) {
    drupal_add_js(go_get_google_analytics_code(GO_GOOGLE_ANALYTICS), array(
      'type' => 'inline', 'scope' => 'footer',
    ));
  }
}

/**
 * Simple 403/404 handler
 *
 * @see    go_preprocess_page()
 * @author Thai Nguyen
 */
function go_preprocess_page__handle_40x() {
  $header = drupal_get_http_header();

  if (defined('GO_403') && ($header['status'] == '403 Forbidden')) {
    if (user_is_anonymous()) {
      drupal_goto('user/login', array('query' => array('destination'=>$_GET['q'])));
    }
  }

  if (defined('GO_404') && ($header['status'] == '404 Not Found')) {
    $keyword = str_replace(array('/', '-', '_', '.html'), ' ', $_GET['q']);
    $keyword = filter_xss_admin(trim($keyword));

    $path = is_numeric(GO_404) ? 'search/node/' : GO_404;
    $path = "{$path}/{$keyword}";
    drupal_goto($path);
  }
}

/**
 * Redirect /node to front page if no GO_SKIP_NODE_TO_FRONT defined.
 */
function go_node_to_frontpage() {
  if (!defined(GO_SKIP_NODE_TO_FRONT)) {
    if (preg_match('`^node/*$`si', $_GET['q'])) {
      if ('node' !== variable_get('site_frontpage', 'node')) {
        drupal_goto('<front>');
      }
    }
  }
}

/**
 * This callback runs after filter_process_format() and performs additional
 * modifications to the form element.
 *
 * @see  go_element_info_alter()
 */
function go_filter_process_format($element) {
  global $user;

  if (!empty($element['#entity_type']) && !empty($element['#bundle']) && !empty($element['#field_name'])) {
    $intersect = go_get_user_text_formats_for_field($user, $element['#entity_type'], $element['#bundle'], $element['#field_name']);
  }

  if (empty($intersect)) {
    $intersect = go_get_user_text_formats($user);
  }

  if (!empty($intersect)) {
    $element['#format'] = array_shift($intersect);
    $element['format']['format']['#default_value'] = $element['#format'];
  }

  return $element;
}

/**
 * Get prefered text-format for user on specific field.
 *
 * @param  Object $account
 * @param  string $entity_type
 * @param  string $bundle
 * @param  string $field
 * @return array
 * @see    go_filter_process_format
 */
function go_get_user_text_formats_for_field($account, $entity_type = '', $bundle = '', $field = '') {
  if ($tf_config = variable_get('go_text_formats')) {
    if (!empty($tf_config[$entity_type][$bundle][$field])) {
      return go_get_user_text_formats($account, $tf_config[$entity_type][$bundle][$field]);
    }
  }
  return array();
}

/**
 * Get prefered text-format for user.
 *
 * @param  object $account
 * @return array
 * @see    go_filter_process_format
 * @see    go_get_user_text_formats_for_field
 */
function go_get_user_text_formats($account, $text_format_configure = array()) {
  if (!$text_format_configure) {
    if (!$tf_config = variable_get('go_text_formats')) {
      return array();
    }

    if (!empty($tf_config['roles'])) {
      return array();
    }

    $text_format_configure = $tf_config['roles'];
  }

  // List allowed text formats from Drupal config
  $available_formats = array_keys(filter_formats($user));

  // Get list of text formats in settings
  $array_formats = array();
  $user_roles = array_keys($account->roles);

  foreach ($text_format_configure as $role_id => $text_format) {
    if (in_array($role_id, $user_roles)) {
      $array_formats[] = $text_format;
    }
  }

  if ($intersect = array_intersect($array_formats, $available_formats)) {
    return $intersect;
  }

  return array();
}
