<?php

/**
 * Implements hook_menu().
 */
function commerce_order_ftp_export_menu() {

  $items['admin/commerce/config/order/export/ftp'] = array(
    'title' => 'FTP Export',
    'description' => 'Order FTP Export Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_order_ftp_export_config'),
    'access arguments' => array('administer commerce_order entities'),
  );
  
  return $items;
}

/**
 * Order FTP Export configuration form.
 */
function commerce_order_ftp_export_config() {
  $form['order_ftp_export_ftp_host'] = array(
    '#type' => 'textfield',
    '#title' => t('Host'),
    '#description' => t('Enter the host of the FTP server.'),
    '#default_value' => variable_get('order_ftp_export_ftp_host'),
    '#required' => TRUE,
  );
  
  $form['order_ftp_export_ftp_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#description' => t('Enter the username used to connect to the FTP server.'),
    '#default_value' => variable_get('order_ftp_export_ftp_username'),
    '#required' => TRUE,
  );

  $form['order_ftp_export_ftp_password'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#description' => t('Enter the password used to connect to the FTP server.'),
    '#default_value' => variable_get('order_ftp_export_ftp_password'),
    '#required' => TRUE,
  );

  $form['order_ftp_export_ftp_port'] = array(
    '#type' => 'textfield',
    '#title' => t('Port'),
    '#description' => t('Enter the port used to connect to the FTP server.'),
    '#default_value' => variable_get('order_ftp_export_ftp_port'),
    '#required' => TRUE,
  );

  $form['order_ftp_export_ftp_directory'] = array(
    '#type' => 'textfield',
    '#title' => t('Directory'),
    '#description' => t('Enter the directory (path) where exported order xml files should be placed on the FTP server. Year/month directories will be created inside this directory.'),
    '#default_value' => variable_get('order_ftp_export_ftp_directory'),
    '#required' => TRUE,
  );
  
  return system_settings_form($form);
}

/**
 * Implements hook_field_validate().
 *
 * Validate FTP Server settings
 */
function commerce_order_ftp_export_config_validate($form, &$form_state) {
  //get the values from the form  
  $ftp_server = check_plain($form_state['values']['order_ftp_export_ftp_host']);
  $ftp_uname = check_plain($form_state['values']['order_ftp_export_ftp_username']);
  $ftp_pass = check_plain($form_state['values']['order_ftp_export_ftp_password']); 
  $ftp_port = check_plain($form_state['values']['order_ftp_export_ftp_port']); 
  $ftp_directory = check_plain($form_state['values']['order_ftp_export_ftp_directory']);
  
  //get the parts of the directory path
  $ftp_directory_array = explode('/', $ftp_directory);
  
  //try to connect to the ftp server
  if (!$fp = ftp_connect($ftp_server, $ftp_port, 30)) {
    form_set_error('order_ftp_export_ftp_host', t('Connection failed. Check to make sure the FTP host is correct.'));
    return;
  }
  //try to login to the ftp server
  if (!ftp_login($fp, $ftp_uname, $ftp_pass)) {
    form_set_error('order_ftp_export_ftp_username][order_ftp_export_ftp_password', t('Login failed. Check your username and password and try again.'));
    return;
  }
  //try to set mode to passive
  if (!ftp_pasv($fp, TRUE)) {
    form_set_error('', t('Unable to set mode to passive.'));
  }

  //try to navigate to specified directory (or create it)
  foreach ($ftp_directory_array as $fd) {
    if (!empty($fd)) {
      if (!@ftp_chdir($fp, $fd)) {
        if (!@ftp_mkdir($fp, $fd)) {
          form_set_error('order_ftp_export_ftp_directory', t('Unable to make directory: ' . $fd . ' Try changing the directory path to something else.'));
        }
        if (!@ftp_chdir($fp, $fd)) {
          form_set_error('order_ftp_export_ftp_directory', t('Unable to change directory to: ' . $fd . 'Are you sure this directory exisists on the server?'));
        }
      }
    }  
  }
}


/**
 * Implements hook_commerce_order_update().
 *
 */
/**
function commerce_order_ftp_export_commerce_order_update() {
  // was going to try to check for status = Pending to do the export
  // instead, a rule is created below
}
 */

/**
 * Implements hook_rules_action_info().
 * 
 * adds a rule action to export and upload an order and set status to 'processing'
 */
function commerce_order_ftp_export_rules_action_info() {
  $actions = array();

  $actions['commerce_order_ftp_export_upload'] = array(
    'label' => t('Export/Upload order'),
    'parameter' => array(
      'commerce_order' => array(
        'type' => 'commerce_order',
        'label' => t('Order to export/upload'),
      ),
    ),
    'group' => t('Commerce Order FTP Export'),
    'callbacks' => array(
      'execute' => 'commerce_order_ftp_export_upload',
    ),
  );

  return $actions;
}

/**
 * exports/uploads an order and updates status to Processing
 * Rules action
 */
function commerce_order_ftp_export_upload($order) {
  //export order to xml (string)
  $orderxml = commerce_order_ftp_export_export_order($order);

  //save xml to temporary file    
  $orderfile = file_unmanaged_save_data($orderxml, "temporary://order-" . $order->order_id . ".xml");;
  
  //if the file saved correctly
  if ($orderfile) {
    watchdog('commerce_ordr_ftp_export', 'exported order xml (%savedfile)', array('%savedfile' => $orderfile), WATCHDOG_NOTICE); 
  }
  else {
    watchdog('commerce_ordr_ftp_export', 'error exporting order xml (order id = %orderid)', array('%orderid' => $order->order_id), WATCHDOG_ERROR);
    return;
  }
  try {
    //upload file to ftp
    $ftp_server = variable_get('order_ftp_export_ftp_host');
    $ftp_uname = variable_get('order_ftp_export_ftp_username');
    $ftp_pass = variable_get('order_ftp_export_ftp_password'); 
    $ftp_port = variable_get('order_ftp_export_ftp_port');
    $ftp_directory = variable_get('order_ftp_export_ftp_directory');
    
    //get the parts of the directory path (adding folders for year and month)
    $ftp_directory_array = explode('/', $ftp_directory . "/" . date("Y/m"));
    
    //connect to ftp server
    if (!$fp = ftp_connect($ftp_server, $ftp_port, 30)) {
      throw new Exception("error connectiong to FTP server");
    }

    try {
      //login to ftp server
      if (!ftp_login($fp, $ftp_uname, $ftp_pass)) {
        throw new Exception("error authenticating to FTP server");
      }
      //change to passive mode
      if (!ftp_pasv($fp, TRUE)) {
        watchdog('commerce_ordr_ftp_export', 'Unable to set mode to passive', array(), WATCHDOG_NOTICE);
      }
      //navigate to (and/or create) destination directory
      foreach ($ftp_directory_array as $fd) {
        if (!empty($fd)) {
          if (!@ftp_chdir($fp, $fd)) {
            if (!@ftp_mkdir($fp, $fd)) {
              throw new Exception("Unable to create direcotry (" . $fd . ")");
            }
            if (!@ftp_chdir($fp, $fd)) {
              throw new Exception("Unable to change to direcotry (" . $fd . ")");
            }
          }
        }  
      }
      
      //upload file
      if (ftp_put($fp, $order->order_id . ".xml", $orderfile, FTP_BINARY)) {
        watchdog('commerce_ordr_ftp_export', 'Uploaded order xml (%orderid)', array('%orderid' => $order->order_id), WATCHDOG_NOTICE);
      }
      else {
        throw new Exception("Unable to upload file (" . $orderfile . ")");
      }
  
      //update order status
      commerce_order_status_update($order, 'processing', FALSE, TRUE, t('Order exported to FTP.'));
      
    }
    catch (Exception $e) {
      watchdog('commerce_ordr_ftp_export', 'error uploading order xml (order id = %orderid). %error', array('%orderid' => $order->order_id, '%error' => $e->getMessage()), WATCHDOG_ERROR);
    }
    ftp_close($fp);
  }
  catch (Exception $e) {
    watchdog('commerce_ordr_ftp_export', 'error uploading order xml (order id = %orderid). %error', array('%orderid' => $order->order_id, '%error' => $e->getMessage()), WATCHDOG_ERROR);
  }
  
  //delete tmp file
  if (file_unmanaged_delete($orderfile)) {
    watchdog('commerce_ordr_ftp_export', 'deleted temp order xml (%file)', array('%file' => $orderfile), WATCHDOG_DEBUG);
  }
  else {
    watchdog('commerce_ordr_ftp_export', 'error deleting temp order xml (%file)', array('%file' => $orderfile), WATCHDOG_ERROR);
  }
}

/**
 * exports an order xml
 * returns: xml as string
 */
function commerce_order_ftp_export_export_order($order) { 
  // get full order details (line items, products, customer profiles, etc.)
  $vars = commerce_order_ftp_export_get_full_order_data($order);
  
  //render the xml
  return theme('commerce_order_ftp_export', $vars);
}

/**
 * Implements hook_theme().
 * 
 * used for easily overriding the xml schema used to export orders
 */
function commerce_order_ftp_export_theme($existing, $type, $theme, $path) {
  if ($type == 'module') {
    return array(
      'commerce_order_ftp_export' => array(
        'variables' => array('order' => NULL, 'line_items' => NULL, 'products' => NULL, 'profiles' => NULL, 'user' => NULL),
          'template' => 'commerce-order-ftp-export'
      )
    );
  }
  return array();
}


/**
 * get full order details (line items, products, customer profiles, etc.)
 * returns:
 *   Array (
 *     [order] => stdClass Object
 *     [line_items] => Array indexed by line_item_id
 *     [products] => Array indexed by product_id
 *     [profiles] => Array indexed by profile_id
 *     [user] => stdClass Object
 *   )
 */
function commerce_order_ftp_export_get_full_order_data($order) {
  $vars = array();
  
  //add order to output
  $vars['order'] = $order;
  
  //look up the line items
  $li_ids = array();  
  foreach ($order->commerce_line_items['und'] as $li) {
    $li_ids[] = $li['line_item_id'];
  }
  $lis = commerce_line_item_load_multiple($li_ids);
  //add line items to output
  $vars['line_items'] = $lis;
  
  //look up the products
  $product_ids = array();
  foreach ($lis as $li) {
    foreach ($li->commerce_product['und'] as $prod_ref) {
      $product_ids[] = $prod_ref['product_id'];
    }
  }
  $products = commerce_product_load_multiple($product_ids);
  //add products to output
  $vars['products'] = $products;

  //look up customer profiles
  $profile_ids = array();
  foreach ($order->commerce_customer_billing['und'] as $profile_ref) {
    $profile_ids[] = $profile_ref['profile_id'];
  }
  $profiles = commerce_customer_profile_load_multiple($profile_ids);
  //add customer profiles to output
  $vars['profiles'] = $profiles; 

  //add user to output
  $vars['user'] = user_load($order->uid['und']);

  return $vars;
}
