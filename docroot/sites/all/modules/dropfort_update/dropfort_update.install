<?php

/**
 * @file
 * Install tasks for Dropfort Update
 */

/**
 * Implements hook_install().
 */
function dropfort_update_install() {
  variable_set('dropfort_update_site_token', _dropfort_update_install_random_key(64));
}

/**
 * Implements hook_enable().
 */
function dropfort_update_enable() {
  variable_set('dropfort_update_allow_unencrypted', FALSE);
  // Set the last update check to last Wednesday to ensure
  // the site always at least checks for updates on Wednesdays
  // after the security updates have been announced.
  $time = date('U', strtotime('last Wednesday  16:00 EST'));
  variable_set('update_last_check', $time);
}

/**
 * Implements hook_schema().
 */
function dropfort_update_schema() {
  $schema['dropfort_update_site_key'] = array(
    // example (partial) specification for table "node"
    'description' => 'Track the site keys for this site.',
    'fields' => array(
      'site_key' => array(
        'description' => 'The site key generated by Drupal.',
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 255,
      ),
      'active' => array(
        'description' => 'The current {node_revision}.vid version identifier.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'last_used' => array(
        'description' => 'Unix timestamp time this key was used.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'unsigned' => TRUE,
      ),
    ),
    'indexes' => array(
      'last_used' => array('last_used'),
      'active' => array('active'),
    ),
    'primary key' => array('site_key'),
  );
  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function dropfort_update_uninstall() {
  variable_del('dropfort_update_policy_id');
  variable_del('dropfort_update_allow_unencrypted');
  variable_del('dropfort_update_timestamp_window');
  variable_del('dropfort_update_site_token');
  variable_del('dropfort_update_generate_new_site_token');
  variable_del('dropfort_update_show_moderation_notice');
  variable_del('dropfort_update_base_url');
  variable_del('dropfort_update_last_status');
  variable_del('dropfort_update_cache_lifetime');
  variable_del('dropfort_update_connected');
  variable_del('dropfort_update_clear_all_site_keys');
}

/**
 * Implements hook_requirements().
 */
function dropfort_update_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time
  $t = get_t();

  // Report cron status
  if ($phase == 'runtime') {
    if (FALSE == variable_get('dropfort_update_allow_unencrypted', FALSE)) {
      $requirements['dropfort_update_allow_unencrypted']['value'] = $t('Encrypted update requests enabled.');
    }
    else {
      $requirements['dropfort_update_allow_unencrypted'] = array(
        'value' => $t('Encrypted update requests disabled.'),
        'description' => $t('Unencrypted connections to update data are allowed. See <a href="@link">Dropfort Update settings</a> to enable encryption.', array('@link' => url('admin/config/system/dropfort/update'))),
        'severity' => REQUIREMENT_WARNING,
      );
    }

    $requirements['dropfort_update_allow_unencrypted']['title'] = $t('Dropfort Update Encryption');

    if (FALSE == variable_get('dropfort_update_connected', FALSE)) {
      $requirements['dropfort_update_connection'] = array(
        'value' => $t('Failed to connect to Dropfort. Please check your connection settings.'),
        'description' => $t('One ore more of your site keys or site token has failed to connect to Dropfort. See <a href="@link">Dropfort Update settings</a> in the advanced section to review your registration settings.', array('@link' => url('admin/config/system/dropfort/update'))),
        'severity' => REQUIREMENT_WARNING,
      );
    }
    else {
      $requirements['dropfort_update_connection']['value'] = $t('Connected to Dropfort successfully.');
    }

    $requirements['dropfort_update_connection']['title'] = $t('Dropfort Update Connection');
  }

  return $requirements;
}

/**
 * Implements hook_update_N().
 *
 * Remove old variables
 */
function dropfort_update_update_7001(&$sandbox) {
  variable_del('dropfort_update_ip_list');
}

/**
 * Implements hook_update_N().
 *
 * Generate site key
 */
function dropfort_update_update_7002(&$sandbox) {
  module_load_include('inc', 'dropfort_update');
  variable_set('dropfort_update_site_key', _dropfort_update_random_key(64));
}

/**
 * Implements hook_update_N().
 *
 * Remove serial
 */
function dropfort_update_update_7003(&$sandbox) {
  variable_del('dropfort_update_secure_serial');
}

/**
 * Implements hook_update_N().
 *
 * Rename site key variable to site token
 */
function dropfort_update_update_7004(&$sandbox) {
  variable_set('dropfort_update_site_token', variable_get('dropfort_update_site_key', ''));
  variable_del('dropfort_update_site_key');
}

/**
 * Implements hook_update_N().
 *
 * Remove update url modifications
 */
function dropfort_update_update_7005(&$sandbox) {
  // Restore the default URL as it was set prior to the module being enabled
  variable_set('update_fetch_url', variable_get('dropfort_update_default_url', UPDATE_DEFAULT_URL));
  variable_del('dropfort_update_default_url');
}

/**
 * Implements hook_update_N().
 *
 * Rename site_id variable to site_key to better match drupal nomenclature
 */
function dropfort_update_update_7006(&$sandbox) {
  $site_key =  variable_get('dropfort_update_site_key');
  variable_set('dropfort_update_site_key', $site_key);
  variable_del('dropfort_update_site_key');
}

/**
 * Implements hook_update_N().
 *
 * Migrate to the new multi site key storage
 */
function dropfort_update_update_7007(&$sandbox) {
  $schema['dropfort_update_site_key'] = array(
    // example (partial) specification for table "node"
    'description' => 'Track the site keys for this site.',
    'fields' => array(
      'site_key' => array(
        'description' => 'The site key generated by Drupal.',
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 255,
      ),
      'active' => array(
        'description' => 'The current {node_revision}.vid version identifier.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'last_used' => array(
        'description' => 'Unix timestamp time this key was used.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'unsigned' => TRUE,
      ),
    ),
    'indexes' => array(
      'last_used' => array('last_used'),
      'active' => array('active'),
    ),
    'primary key' => array('site_key'),
  );

  db_create_table('dropfort_update_site_key', $schema['dropfort_update_site_key']);

  // Finally, remove the old key variable
  variable_del('dropfort_update_site_key');
}

/**
 * Implements hook_update_N().
 *
 * Set release check schedule to be on Wednesdays
 */
function dropfort_update_update_7008(&$sandbox) {
  // Set the last update check to last Wednesday to ensure
  // the site always at least checks for updates on Wednesdays
  // after the security updates have been announced.
  $time = date('U', strtotime('last Wednesday  16:00 EST'));
  variable_set('update_last_check', $time);
}

/**
 * Wrapper function for generating a random key at install time
 */
function _dropfort_update_install_random_key($byte_count = 32) {
  if (VERSION < 7.24) {
    return drupal_hash_base64(drupal_random_bytes($byte_count));
  }
  else {
    return drupal_random_key($byte_count);
  }
}