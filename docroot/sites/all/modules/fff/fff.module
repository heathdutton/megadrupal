<?php
/**
 * @file
 * Main file for module Forbidden File Format.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function fff_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
	if (isset($form['#field']['type']) && $form['#field']['type'] == 'file') {
		$instance = $form['#instance'];
		// Get default value from instance.
		$file_extensions_disallowed = isset($instance['settings']['file_extensions_disallowed']) ? $instance['settings']['file_extensions_disallowed'] : FALSE;
		$form['instance']['settings']['file_extensions_disallowed'] = array(
			'#type' => 'checkbox',
			'#title' => t('Allow all file extensions except specified below'),
			'#description' => t('Enable this checkbox if you want to load all files with extensions except described below'),
			'#weight' => 2,
			'#default_value' => $file_extensions_disallowed,
		);

		$form['instance']['settings']['file_extensions']['#weight'] = $form['instance']['settings']['file_extensions_disallowed']['#weight'] + 1;
	}
}


/**
 * Check that file has not disallowed extensions.
 */
function fff_file_validate_disallowed_extensions(stdClass $file, $extensions) {
	$errors = array();

	$regex = '/\.(' . preg_replace('/ +/', '|', preg_quote($extensions)) . ')$/i';
	if (preg_match($regex, $file->filename)) {
		$errors[] = t('Files with the following extensions are not allowed: %files-not-allowed.', array('%files-not-allowed' => $extensions));
	}
	return $errors;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function fff_field_widget_form_alter(&$element, &$form_state, $context) {
	$instance = $context['instance'];
	if ($context['field']['type'] == 'file' && !empty($instance['settings']['file_extensions_disallowed']) && !empty($instance['settings']['file_extensions'])) {
		foreach ($element as &$item) {
			if (!empty($item['#upload_validators'])) {
				// Add validator for disallowed extensions.
				$item['#upload_validators']['fff_file_validate_disallowed_extensions'] = array($instance['settings']['file_extensions']);

				// Unset the file extensions to generate description of the field correctly and avoid notices.
				unset($item['#upload_validators']['file_validate_extensions']);

				// Update description of the field.
				if ($context['field']['cardinality'] == 1) {
					$description = !empty($instance['description']) ? $instance['description'] : '';
					$description .= t('Disallowed file types: !extensions.', array('!extensions' => '<b>' . check_plain($instance['settings']['file_extensions']) . '</b>'));
					$item['#description'] = theme('file_upload_help', array(
						'description' => $description,
						'upload_validators' => $item['#upload_validators']
					));
				}
				else {
					$description = !empty($instance['description']) ? $instance['description'] : '';
					$description .= t('Disallowed file types: !extensions.', array('!extensions' => '<b>' . check_plain($instance['settings']['file_extensions']) . '</b>'));
					$element['#file_upload_description'] = theme('file_upload_help', array(
						'description' => $description,
						'upload_validators' => $item['#upload_validators']
					));
				}

				// Allow to load absolutely all files for standard validator.
				$item['#upload_validators']['file_validate_extensions'] = array();
				$item['#process'][] = 'fff_process_file_field';
			}
		}
	}
}

/**
 * Process function to add some settings.
 */
function fff_process_file_field($element, &$form_state, $form) {
	// Attach js file with js validation and settings.
	$element['upload']['#attached']['js'][] = drupal_get_path('module', 'fff') . '/fff.js';

	$extension_list = implode(',', array_filter(explode(' ', $element['#upload_validators']['fff_file_validate_disallowed_extensions'][0])));
	$element['upload']['#attached']['js'][] = array(
		'type' => 'setting',
		'data' => array(
			'fff' => array(
				'elements' => array(
					'#' . $element['#id'] . '-upload' => $extension_list
				)
			)
		)
	);

	return $element;
}
