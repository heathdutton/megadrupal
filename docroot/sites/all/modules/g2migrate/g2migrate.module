<?php

/**
 * @file
 * Import photo albums from Gallery2 to Drupal using the Migrate API.
 */

/**
 * Implements hook_views_api().
 */
function g2migrate_views_api() {
  return array('api' => '3.0');
}

/**
 * Implements hook_help().
 */
function g2migrate_help($section) {
  switch ($section) {
    case 'admin/help#g2migrate':
      return '<p>'. t('Import photos from the Gallery package. First, configure at !config_path. Then, manage the migration from the command line using drush or from the !migrate_ui page.',
        array(
          '!config_path' => l('Administration > Configuration > Gallery2 Migrate', 'admin/config/development/gallery2'),
          '!migrate_ui' => l('Migrate UI', 'admin/content/migrate'),
        )
      ) .'</p>';
  }
}

/**
 * Implements hook_menu.
 */
function g2migrate_menu() {
  $items = array();

  $items['admin/config/development/gallery2'] = array(
    'title' => 'Gallery2 Migrate',
    'description' => 'Import Gallery2 photo album using the Migrate API.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('g2migrate_path_settings_form'),
    'access arguments' => array('administer nodes'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'g2migrate.pages.inc',
  );

  $items['admin/config/development/gallery2/paths'] = array(
    'title' => 'Paths',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/development/gallery2/fields'] = array(
    'title' => 'Fields',
    'description' => 'Set fields for importing data.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('g2migrate_field_form'),
    'access arguments' => array('administer nodes'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'g2migrate.pages.inc',
    'weight' => 3,
  );

  $items['admin/config/development/gallery2/import'] = array(
    'title' => 'Import',
    'description' => 'Import Gallery2 photo album using the Migrate API.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('g2migrate_import_form'),
    'access arguments' => array('administer nodes'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'g2migrate.pages.inc',
    'weight' => 5,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function g2migrate_theme($existing, $type, $theme, $path) {
  $themes = array(
    'g2migrate_pager' => array(
      'variables' => array(
        'tags' => array(),
        'element' => 0,
        'parameters' => array(),
        'fragments' => array(),
      ),
      'file' => 'g2migrate.theme.inc',
    ),
    'g2migrate_pager_link' => array(
      'variables' => array(
        'text' => 'click me',
        'page_new' => 0,
        'element' => 0,
        'parameters' => array(),
        'attributes' => array(),
        'fragment' => '',
        'href' => NULL,
      ),
      'file' => 'g2migrate.theme.inc',
    ),
    /*
    'g2migrate_pager_previous' => array(
      'variables' => array(
        'text' => 'previous',
        'page_new' => 0,
        'element' => 0,
        'parameters' => array(),
        'fragments' => array(),
      ),
      'file' => 'g2migrate.theme.inc',
    ),
    'g2migrate_pager_current' => array(
      'variables' => array(
        'text' => 'current',
        'page_new' => 0,
        'element' => 0,
        'parameters' => array(),
        'fragments' => array(),
      ),
      'file' => 'g2migrate.theme.inc',
    ),
    'g2migrate_pager_next' => array(
      'variables' => array(
        'text' => 'next',
        'page_new' => 0,
        'element' => 0,
        'parameters' => array(),
        'fragments' => array(),
      ),
      'file' => 'g2migrate.theme.inc',
    ),
     */
  );

  return $themes;
}

/**
 * Implements hook_action_info().
 */
function g2migrate_action_info() {
  $actions['g2migrate_add_parents_action'] = array(
    'type' => 'node',
    'label' => t('Add parent terms'),
    'configurable' => TRUE,
    'triggers' => array('any'),
  );

  return $actions;
}

/**
 * Action callback.
 *
 * Find taxonomy terms attached to a node and attach parent term(s) to the
 * specified depth. There are two reasons for limiting this to nodes rather
 * than allowing any fieldable entity. First, hook_action_info() requires an
 * entity type. Second, there is no generic equivalent of node_save().
 *
 * @param Object $entity
 *   the node with an attached taxonomy reference field
 * @param Array $context
 * - 'field':  the machine name of the taxonomy reference field
 *
 * @ingroup actions
 */
function g2migrate_add_parents_action(&$entity, $context = array()) {
  // Find attached terms. We need a reference; cf. field_get_items().
  $entity_type = 'node';
  $field_name = $context['field'];
  $langcode = field_language($entity_type, $entity, $field_name);
  if (!isset($entity->{$field_name}[$langcode])) {
    return;
  }
  $terms = &$entity->{$field_name}[$langcode];

  // Find ancestors of terms; depth = 0 means all ancestors.
  $depth = $context['depth'] > 0 ? (int) $context['depth'] : -1;
  $ancestors = array();
  foreach ($terms as $term) {
    $parents = taxonomy_get_parents_all($term['tid']);
    // Discard the first element, which is the term we already have.
    array_shift($parents);
    $i = $depth;
    while ($i-- && $parent = array_shift($parents)) {
      $ancestors[] = $parent->tid;
    }
  }

  // Attach ancestor terms to the entity.
  $tids = array();
  foreach ($terms as $term) {
    $tids[] = $term['tid'];
  }
  foreach (array_diff(array_unique($ancestors), $tids) as $tid) {
    $terms[] = array('tid' => $tid);
  }
  $info = field_info_field($field_name);
  $max = $info['cardinality'];
  if ($max == FIELD_CARDINALITY_UNLIMITED || count($terms) < $max) {
    node_save($entity);
  }
  else {
    $message = t(
      'No update to %title: this would attach %count terms, but %type is configured to allow at most %max values.',
      array(
        '%title' => $entity->title,
        '%count' => count($terms),
        '%type' => $entity->type,
        '%max' => $max,
      )
    );
    drupal_set_message($message, 'warning');
  }
}

/**
 * Action configuration form.
 */
function g2migrate_add_parents_action_form($context) {
  $form = array();

  $options = array('' => t('Select'));
  foreach (field_info_field_map() as $field_name => $info) {
    if ($info['type'] == 'taxonomy_term_reference' && isset($info['bundles']['node'])) {
      $bundles = implode(', ', $info['bundles']['node']);
      $options[$field_name] = check_plain(t(
        '!field_name (appears in !bundles)',
        array('!field_name' => $field_name, '!bundles' => $bundles)
      ));
    }
  }
  $form['field'] = array(
    '#type' => 'select',
    '#title' => t('Vocabulary'),
    '#description' => t('Select the term reference field.'),
    '#options' => $options,
    '#default_value' => isset($context['field']) ? $context['field'] : '',
    '#required' => TRUE,
  );

  $form['depth'] = array(
    '#type' => 'textfield',
    '#title' => t('Depth'),
    '#description' => t('Set to 0 to attach all ancestor terms, 1 for just the
    first parent, etc.'),
    '#default_value' => isset($context['depth']) ? $context['depth'] : '1',
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Action configuration form submit function.
 */
function g2migrate_add_parents_action_submit($form, &$form_state) {
  return array_intersect_key($form_state['values'], array_flip(array('field','depth')));
}

/**
 * @section Helper functions.
 */

/**
 * Generate an array of table names.
 *
 * These are the tables that will be imported from Gallery2.
 *
 * @param String $prefix
 *   Something to add at the beginning of each table name, defaults to
 *   variable_get('g2migrate_prefix', '').
 */
function _g2migrate_tables($prefix = NULL) {
  if (is_null($prefix)) {
    $prefix = variable_get('g2migrate_prefix', '');
  }
  $tables = array('Entity', 'ChildEntity', 'FileSystemEntity', 'Item', 'ItemAttributesMap');
  $out = array();
  foreach ($tables as $table) {
    $out[] = $prefix . $table;
  }
  return $out;
}

/**
 * Generate an array of source information.
 *
 * This will be used by the form that displays on the Fields tab of the
 * configuration page and in the Migration class.
 *
 * @see g2migrate_field_form().
 */
function _g2migrate_sources($entity_type = 'node') {

  switch ($entity_type) {
  case 'taxonomy_term':
    $sources = array(
      'g_title' => array(
        'default' => 'name',
        'label' => t('Name'),
        'field_type' => 'text',
        'description' => t('Album title is stored in the g2_Item table.'),
        'defaultValue' => t('Album'),
      ),
      'g_summary' => array(
        'default' => 'description',
        'label' => t('Description'),
        'field_type' => 'text',
      ),
      'g_description' => array(
        'default' => 'g2migrate_narrative',
        'label' => t('Narrative'),
        'field_type' => 'text',
      ),
    );
    break;

  case 'node':
    $sources = array(
      'g_title' => array(
        'default' => 'title',
        'label' => t('Title'),
        'field_type' => 'text',
        'description' => t('Photo title is stored in the g2_Item table.'),
        'defaultValue' => t('Photo'),
      ),
      'g_originationTimestamp' => array(
        'default' => 'created',
        'label' => t('Creation timestamp'),
        'field_type' => 'timestamp',
      ),
      'g_summary' => array(
        'default' => 'body:summary',
        'label' => t('Summary'),
        'field_type' => 'text',
      ),
      'g_description' => array(
        'default' => 'body',
        'label' => t('Description'),
        'field_type' => 'text',
      ),
      // Copy an image file, write DB record to files table, and save in Field
      // storage. We map the filename (relative to the source_dir below) to the
      // field itself.
      'path' => array(
        'default' => 'field_g2migrate_image',
        'label' => t('Photo'),
        'field_type' => 'Media, Image, or File',
        'source_dir' => 'albums',
        'unmigrated' => array('destination_dir', 'language',
          'file_replace', 'preserve_files', 'file_class', 'destination_file'),
      ),
      'g_parentid' => array(
        'default' => 'g2migrate_album',
        'label' => t('Album vocabulary'),
        'field_type' => 'taxonomy',
        'sourceMigration' => 'Gallery2Album',
        'unmigrated' => array('create_term', 'ignore_case'),
        'subfields' => array('source_type' => 'tid'),
      ),
      'g_keywords' => array(
        'default' => 'g2migrate_keywords',
        'label' => t('Keyword vocabulary'),
        'field_type' => 'taxonomy',
        'separator' => ',',
        'unmigrated' => array('source_type', 'ignore_case'),
        'subfields' => array('create_term' => TRUE),
      ),
      'g_orderWeight' => array(
        'default' => 'g2migrate_weight',
        'label' => t('Item weight in its album'),
        'field_type' => 'number',
      ),
    );
    break;
  }

  return $sources;
}
