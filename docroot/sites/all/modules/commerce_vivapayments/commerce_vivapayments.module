<?php

/**
 * @file
 * Provides a Viva Payments Form payment method for Drupal Commerce.
 */

define('COMMERCE_VIVAPAYMENTS_MODE_LIVE', 0);
define('COMMERCE_VIVAPAYMENTS_MODE_TEST', 1);
define('COMMERCE_VIVAPAYMENTS_RECCURING_TRUE', 0);
define('COMMERCE_VIVAPAYMENTS_RECCURING_FALSE', 1);

/**
 * Configuration options for commerce_vivapayments module.
 */
function commerce_vivapayments_configuration() {
  // Basic configuration.
  $conf = array(
    'live_server' => 'https://www.vivapayments.com/web/newtransaction.aspx?ref=',
    'test_server' => 'http://demo.vivapayments.com/web/newtransaction.aspx?ref=',
  );

  // Allow other modules to alter configuration.
  drupal_alter('commerce_vivapayments_configuration', $conf);

  return $conf;
}

/**
 * Implements hook_menu().
 */
function commerce_vivapayments_menu() {
  return array(
    'creditcardsuccess' => array(
      'page callback' => 'commerce_vivapayments_order_success',
      'page arguments' => array(),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
    'creditcardfail' => array(
      'title' => 'Payment not Accepted',
      'page callback' => 'commerce_vivapayments_order_failure',
      'page arguments' => array(),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_vivapayments_commerce_payment_method_info() {
  return array(
    'commerce_vivapayments' => array(
      'title' => t('Viva Payments'),
      'display_title' => t('Credit Card'),
      'description' => t("Integrates with Viva Payments's proxypay paymemt system."),
      'active' => FALSE,
      'offsite' => TRUE,
      'offsite_autoredirect' => TRUE,
    ),
  );
}

/**
 * Settings form for Viva Payments payment method.
 */
function commerce_vivapayments_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_vivapayments_configuration();

  $form['merchantID'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchand ID'),
    '#description' => t('Visible in security menu on Viva Payments site.'),
    '#required' => TRUE,
    '#default_value' => $settings['merchantID'],
  );
  $form['password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t('Configurable in security menu on Viva Payments site.'),
    '#required' => TRUE,
    '#default_value' => $settings['password'],
  );
  $form['mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Adjust to live transactions when you are ready to start
      processing actual payments.'),
    '#options' => array(
      COMMERCE_VIVAPAYMENTS_MODE_LIVE => t('Live Account'),
      COMMERCE_VIVAPAYMENTS_MODE_TEST => t('Test Account'),
    ),
    '#default_value' => $settings['mode'],
  );
  $form['reccuring'] = array(
    '#type' => 'radios',
    '#title' => t('Reccuring mode'),
    '#description' => t('Set the preference for reccuring transactions.'),
    '#options' => array(
      COMMERCE_VIVAPAYMENTS_RECCURING_TRUE => t('Allow reccuring payments.'),
      COMMERCE_VIVAPAYMENTS_RECCURING_FALSE => t('Prevent reccuring payments.'),
    ),
    '#default_value' => $settings['reccuring'],
  );
  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_vivapayments_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();
  $form['commerce_vivapayments_information'] = array(
    '#markup' => '<p>' . t("You will be redirected to the Viva Payment's safe environment on the next step.") . '</p>',
  );

  return $form;
}

/**
 * Payment method callback: redirect form.
 */
function commerce_vivapayments_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['merchantID'])) {
    drupal_set_message(t('Viva Payments payment method is not configured properly. Merchand ID has not been specified.'), 'error');
    return array();
  }

  // Merge default settings into the stored settings array.
  $settings = (array) $payment_method['settings'] + commerce_vivapayments_configuration();

  // Get current order's currency.
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $total = $wrapper->commerce_order_total->value();

  return commerce_vivapayments_order_form($form, $form_state, $order, $total, $settings);
}

/**
 * Creates the Payment Form that redirects to Viva Payments payment page.
 */
function commerce_vivapayments_order_form($form, &$form_state, $order, $total, $settings) {
  // Determine the correct redirect url based on the transaction mode.
  switch ($settings['mode']) {
    case 0:
      $viva_payment_form_redirect = $settings['live_server'];
      $request = 'https://www.vivapayments.com/api/orders';
      break;

    case 1:
      $viva_payment_form_redirect = $settings['test_server'];
      $request = 'http://demo.vivapayments.com/api/orders';
      break;
  }

  // Determine the correct redirect url based on the transaction mode.
  switch ($settings['reccuring']) {
    case 0:
      $allow_recurring = 'true';
      break;

    case 1:
      $allow_recurring = 'false';
      break;
  }

  $data = array(
    'Amount' => urlencode($total['amount']),
    'AllowRecurring' => $allow_recurring,
  );

  $options = array(
    'method' => 'POST',
    'data' => drupal_http_build_query($data),
    'verify_ssl' => FALSE,
    'headers' => array(
      'Content-Type' => 'application/x-www-form-urlencoded',
      'Authorization' => 'Basic ' . base64_encode($settings['merchantID'] . ':' . $settings['password']),
    ),
  );

  $response = drupal_http_request($request, $options);

  // Parse the JSON response.
  try {
    $result_obj = json_decode($response->data);
  }
  catch (Exception $e) {
    throw new Exception("Result is not a json object (" . $e->getMessage() . ")");
  }

  // Success when ErrorCode = 0
  if ($result_obj->ErrorCode == 0) {
    $order_id = $result_obj->OrderCode;
    // Save the order ID for later use when the client returns from Viva.
    $_SESSION['order']['orderid'] = $order->order_id;
    $_SESSION['order']['amount'] = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
    $_SESSION['order']['currency_code'] = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
    // Redirect to payment form with the order code.
    header("Location: " . $viva_payment_form_redirect . $order_id);
  }
  else {
    throw new Exception("Unable to create order code (" . $result_obj->ErrorText . ")");
  }
}

/**
 * Success page.
 */
function commerce_vivapayments_order_success() {
  // Get the data from Viva Payments.
  $data = $_REQUEST;

  // Check if we have a result.
  if (empty($data['s'])) {
    drupal_set_message(t('Unexcpected Error! Please contact the store owner.'), 'error');
    drupal_goto('<front>');
  }

  // Wait 3 seconds so as the order manage to change status.
  sleep(3);

  // Get order info.
  $order_id = $_SESSION['order']['orderid'];
  $order = commerce_order_load($order_id);

  // Save the transaction with all available info.
  $transaction = commerce_payment_transaction_new('commerce_vivapayments', $order_id);
  $transaction->instance_id = $data['t'];
  $transaction->amount = $_SESSION['order']['amount'];
  $transaction->currency_code = $_SESSION['order']['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->remote_id = $data['s'];
  $transaction->message = '<ul><li>Status: @status</li><li>Amount: @amount</li>
    <li>TransactionID: @trans_id</li><li>Time: @timestamp</li>
    <li>Full Date: @fulldate</li></ul></strong></p>';
  $transaction->message_variables = array(
    '@status' => COMMERCE_PAYMENT_STATUS_SUCCESS,
    '@amount' => $transaction->amount,
    '@trans_id' => $transaction->instance_id,
    '@timestamp' => time(),
    '@fulldate' => date('d/m/Y H:i:s'),
  );
  if (!commerce_payment_transaction_save($transaction)) {
    watchdog("commerce_vivapayments", '<strong>CONFIRM: Transaction could not be
      stored</strong><br/><pre>@transaction</pre>',
      array('@transaction' => print_r($transaction, TRUE)));
    drupal_exit();
  }
  commerce_checkout_complete($order);
  if ($transaction->status == COMMERCE_PAYMENT_STATUS_SUCCESS) {
    commerce_order_status_update($order, 'completed');
  }

  // Redirect to completion page.
  drupal_goto('checkout/' . $order_id . '/complete');
}

/**
 * Failure page.
 */
function commerce_vivapayments_order_failure() {
  // Get the post data from Viva Payments.
  $data = $_REQUEST;

  if (empty($data['s'])) {
    drupal_set_message(t('Unexcpected Error! Please contact the store owner.'), 'error');
    drupal_goto('<front>');
  }

  // Get payment method instance.
  $payment_method = commerce_payment_method_instance_load('commerce_vivapayments|commerce_payment_commerce_vivapayments');

  // Get order info.
  $order_id = $_SESSION['order']['orderid'];
  $order = commerce_order_load($order_id);

  // Get order totals.
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $total = $wrapper->commerce_order_total->value();

  // Save the failed transaction with all available info.
  $transaction = commerce_payment_transaction_new('commerce_vivapayments', $order->order_id);
  $transaction->amount = $_SESSION['order']['amount'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  $transaction->message = '<ul><li>Status: @status</li><li>Time: @timestamp</li>
    <li>Full Date: @fulldate</li></ul></strong><p><strong>Debugging Information:</strong><br/>@debugging</p>';
  $transaction->message_variables = array(
    '@status' => COMMERCE_PAYMENT_STATUS_FAILURE,
    '@timestamp' => time(),
    '@fulldate' => date('d/m/Y H:i:s'),
    '@debugging' => '<pre>' . print_r($data, TRUE) . '</pre>',
  );

  commerce_payment_transaction_save($transaction);

  drupal_set_title(t('Payment not Accepted'));

  return array(
    '#markup' => t('There was an error with your payment. You may either try again to complete payment <a href="@link">following this link</a>, or contact your bank and ask for payment authorization. Alternately use a different credit card.', array('@link' => url('checkout/' . $order_id))),
  );
}
