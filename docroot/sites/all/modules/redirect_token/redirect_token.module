<?php
/**
 * @file
 * Token replacement in Redirects.
 */

/**
 * Implements hook_redirect_alter().
 *
 * Replaces tokens "To" path just before redirecting.
 *
 * @param object $redirect
 *   Redirect module initialized a "From" path.
 */
function redirect_token_redirect_alter(&$redirect) {

  // Token replace in redirect path: /user/[current-user:uid]/edit .
  $redirect->redirect = _redirect_token_token_replace($redirect->redirect);

  // Token replace in query parts: ?facet_one:domain_machine_name:[current-domain:machine-name] .
  if (isset($redirect->redirect_options['query'])) {
    foreach ($redirect->redirect_options['query'] as &$query_part) {
      $query_part = _redirect_token_token_replace($query_part);

      if ($query_part == FALSE) {
        $redirect->redirect = FALSE;
      }
    }
  }
}

/**
 * Wrapper around token_replace.
 *
 * @param string $text
 *   Text that should go through token_replace
 *
 * @return mixed
 *   - string token_replace if access.
 *   - defaults to FALSE;
 */
function _redirect_token_token_replace($text) {

  // Do token_replace if access.
  if (_redirect_token_token_access($text)) {
    return token_replace($text);
  }
  return FALSE;
}

/**
 * Access function for token replacement.
 *
 * Returns FALSE for anonymous users if token is forbidden (like current-user).
 * Defaults to TRUE.
 */
function _redirect_token_token_access($text) {

  // Anonymous user access checks.
  if (user_is_anonymous()) {
    // Get the token_types extracted from argument.
    $token_types = array_keys(token_scan($text));
    // Look them up in the forbidden list. If one is found, return FALSE.
    if (array_intersect($token_types, _redirect_token_anonymous_forbidden_tokens())) {
      return FALSE;
    }
  }

  // Defaults to TRUE.
  return TRUE;
}

/**
 * Return a list of token-types that are forbidden for anonymous users.
 */
function _redirect_token_anonymous_forbidden_tokens() {
  return array(
    'current-user',
  );
}
