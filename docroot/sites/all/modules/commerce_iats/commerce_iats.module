<?php

/**
 * @file
 * Implements iATS Payments API for use in Drupal Commerce.
 */

// iATS response code definitions.
define('COMMERCE_IATS_TXN_OK', 'OK');
define('COMMERCE_IATS_TOKEN_CREATED', 'TokenCreated');
define('COMMERCE_IATS_TOKEN_FAILED', 'TokenFailed');

// iATS server ID definitions.
define('COMMERCE_IATS_NA_SERVER_ID', 'NA');
define('COMMERCE_IATS_UK_SERVER_ID', 'UK');

// Custom transaction ID for transactions that just create a customer code
// for recurring payments.
define('COMMERCE_IATS_RECURRING_PAYMENT_TRANSACTION_ID', 'REC');

// Number of days before an initial direct debit charge can be made.
// 12 day lead time plus 6 days to set up the payment.
define('COMMERCE_IATS_DIRECT_DEBIT_LEAD_DAYS', 18);

// Number of days a recurring payment should be active. Defaults to 50 years.
define('COMMERCE_IATS_RECURRING_PAYMENT_DURATION', 18250);

define('COMMERCE_IATS_TRANSACTIONS_CRON', 'commerce_iats_transactions_cron');

// The URL used to submit payments via the Direct Post Method.
define('COMMERCE_IATS_DIRECT_POST_URL', 'https://www.iatspayments.com/netgate/IATSDPMProcess.aspx');

// Prefix for the comment property in requests to iATS. Identifies the source.
define('COMMERCE_IATS_COMMENT_PREFIX', 'DrupalModule|');

/**
 * Implements hook_libraries_info().
 */
function commerce_iats_libraries_info() {
  $libraries['iatspayments'] = array(
    'name' => 'iATS Payments API',
    'vendor url' => 'https://github.com/iATSPayments/PHP',
    'download url' => 'https://github.com/iATSPayments/PHP/archive/v1.0.tar.gz',
    'path' => 'lib',
    'version callback' => 'commerce_iats_get_library_version',
    'version arguments' => array(
      'file' => 'composer.json',
    ),
    'files' => array(
      'php' => array(
        'Core.php',
        'CustomerLink.php',
        'ProcessLink.php',
        'ReportLink.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Callback used by hook_libraries_info.
 *
 * Parses a JSON file and returns the value of the "version" property.
 *
 * @param array $library
 *   Associative array containing all information about the library.
 * @param array $options
 *   Associative array containing library version options.
 *
 * @return string
 *   The library version.
 */
function commerce_iats_get_library_version(array $library, array $options) {
  $version = '';
  $config_file = DRUPAL_ROOT . '/' . $library['library path'] . '/' . $options['file'];

  if (file_exists($config_file)) {
    $file_content = file_get_contents($config_file);
    $config = drupal_json_decode($file_content);

    if (isset($config['version'])) {
      $version = $config['version'];
    }
  }
  return $version;
}

/**
 * Implements hook_menu().
 */
function commerce_iats_menu() {
  $items = array();

  // Add a menu item for refunding credit card transactions.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/iats-credit-card-refund'] = array(
    'title' => 'Refund',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_iats_credit_card_refund_form', 3, 5),
    'access callback' => 'commerce_iats_credit_card_refund_access',
    'access arguments' => array(5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_iats.credit_card.admin.inc',
  );

  // Add a menu item for refunding ACH/EFT transactions.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/iats-ach-eft-refund'] = array(
    'title' => 'Refund',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_iats_ach_eft_refund_form', 3, 5),
    'access callback' => 'commerce_iats_ach_eft_refund_access',
    'access arguments' => array(5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_iats.ach_eft.admin.inc',
  );

  // Add a callback URL for iATS Direct Post payments.
  $items['commerce_iats/direct_post_relay'] = array(
    'title' => 'Commerce iATS Direct Post Relay URL',
    'page callback' => 'commerce_iats_direct_post_relay',
    'access callback' => 'commerce_iats_direct_post_relay_access',
    'type' => MENU_CALLBACK,
    'file' => 'includes/commerce_iats.direct_post.inc',
  );

  return $items;
}

/**
 * Determines access to the refund form for iATS credit card transactions.
 *
 * @param object $transaction
 *   The payment transaction object to be refunded.
 *
 * @return bool
 *   TRUE or FALSE indicating refund access.
 */
function commerce_iats_credit_card_refund_access($transaction) {
  if (($transaction->payment_method != 'iats_credit_card')
    || ($transaction->status != 'success')
    || ($transaction->amount <= 0)) {
    return FALSE;
  }

  // Return FALSE if it is more than 120 days past the original capture.
  if (time() - $transaction->created > 86400 * 120) {
    return FALSE;
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determines access to the refund form for iATS ACH/EFT transactions.
 *
 * @param object $transaction
 *   The payment transaction object to be refunded.
 *
 * @return bool
 *   TRUE or FALSE indicating refund access.
 */
function commerce_iats_ach_eft_refund_access($transaction) {
  if (($transaction->payment_method != 'iats_ach_eft')
    || ($transaction->status != 'success')
    || ($transaction->amount <= 0)) {
    return FALSE;
  }

  // Return FALSE if it is more than 120 days past the original capture.
  if (time() - $transaction->created > 86400 * 120) {
    return FALSE;
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determines access to the Direct Post relay URL using values from
 * the POST request sent by the iATS API.
 *
 * @return bool
 *   TRUE or FALSE indicating relay URL access.
 */
function commerce_iats_direct_post_relay_access() {
  if (isset($_POST['IATS_Comment'])) {
    $comment = $_POST['IATS_Comment'];
  }
  elseif (isset($_POST['IATS_comment'])) {
    $comment = $_POST['IATS_comment'];
  }

  if (isset($comment)) {
    $comment_parts = explode('|', $comment);

    // Parse the payment method instance ID and process key from the comment
    // property. Indexes 0 and 1 are the comment prefix and order ID, which
    // are not used here.
    $payment_method_instance_id = $comment_parts[2] . '|' . $comment_parts[3];
    $process_key = $comment_parts[4];

    $payment_method = commerce_payment_method_instance_load($payment_method_instance_id);
    if ($payment_method) {
      // Received process key must match payment method's process key
      $payment_method = commerce_payment_method_instance_load($payment_method_instance_id);
      if (substr($payment_method['settings']['direct_post']['process_key'], 0, 8) == $process_key) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_iats_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['iats_credit_card'] = array(
    'base' => 'commerce_iats_credit_card',
    'title' => t('iATS Payments: Credit card payment'),
    'short_title' => t('iATS Credit card payment'),
    'display_title' => t('Credit card'),
    'description' => t('Integrates the iATS ProcessLink webservice for credit card payments.'),
    'file' => 'includes/commerce_iats.credit_card.inc',
  );

  $payment_methods['iats_credit_card_customer_code'] = array(
    'base' => 'commerce_iats_credit_card_customer_code',
    'title' => t('iATS Payments: Credit card customer code creation'),
    'short_title' => t('iATS Credit card customer code creation'),
    'display_title' => t('Credit card customer code'),
    'description' => t('Integrates the iATS CustomerLink webservice for the creation of credit card customer codes.'),
    'file' => 'includes/commerce_iats.credit_card_customer_code.inc',
  );

  $payment_methods['iats_ach_eft'] = array(
    'base' => 'commerce_iats_ach_eft',
    'title' => t('iATS Payments: ACH/EFT payment'),
    'short_title' => t('iATS ACH/EFT payment'),
    'display_title' => t('ACH/EFT'),
    'description' => t('Integrates the iATS ProcessLink webservice for ACH/EFT payments.'),
    'file' => 'includes/commerce_iats.ach_eft.inc',
  );

  $payment_methods['iats_ach_eft_customer_code'] = array(
    'base' => 'commerce_iats_ach_eft_customer_code',
    'title' => t('iATS Payments: ACH/EFT customer code creation'),
    'short_title' => t('iATS ACH/EFT customer code creation'),
    'display_title' => t('ACH/EFT customer code'),
    'description' => t('Integrates the iATS CustomerLink webservice for the creation of ACH/EFT customer codes.'),
    'file' => 'includes/commerce_iats.ach_eft_customer_code.inc',
  );

  $payment_methods['direct_debit_validation'] = array(
    'base' => 'commerce_iats_direct_debit_validation',
    'title' => t('iATS Payments: Direct Debit payment validation'),
    'short_title' => t('iATS Direct Debit payment validation'),
    'display_title' => t('Direct Debit payment validation'),
    'description' => t('Integrates the iATS CustomerLink webservice for the validation of Direct Debit payments.'),
    'file' => 'includes/commerce_iats.direct_debit_validation.inc',
    'terminal' => 0,
  );

  $payment_methods['direct_debit_customer_code'] = array(
    'base' => 'commerce_iats_direct_debit_customer_code',
    'title' => t('iATS Payments: Direct Debit customer code creation'),
    'short_title' => t('iATS Direct Debit customer code'),
    'display_title' => t('Direct Debit customer code'),
    'description' => t('Integrates the iATS CustomerLink webservice for the creation of Direct Debit customer codes.'),
    'file' => 'includes/commerce_iats.direct_debit_customer_code.inc',
    'terminal' => 0,
  );

  return $payment_methods;
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_iats_commerce_checkout_pane_info() {
  $checkout_panes = array();

  $checkout_panes['checkout_recurring'] = array(
    'title' => t('Recurring Payment'),
    'name' => t('Recurring Payment'),
    'file' => 'includes/commerce_iats.recurring.checkout_pane.inc',
    'base' => 'commerce_iats_recurring_pane',
    'page' => 'recurring',
    'weight' => 0,
    'fieldset' => FALSE,
  );

  $checkout_panes['checkout_direct_debit_declaration'] = array(
    'title' => t('Declaration'),
    'name' => t('Direct Debit Declaration'),
    'file' => 'includes/commerce_iats.direct_debit.checkout_pane.inc',
    'base' => 'commerce_iats_direct_debit_declaration_pane',
    'page' => 'direct_debit_declaration',
    'weight' => 0,
    'fieldset' => FALSE,
  );

  $checkout_panes['checkout_direct_debit_account_payer'] = array(
    'title' => t('Account / Payer Details'),
    'name' => t('Direct Debit Account / Payer Details'),
    'file' => 'includes/commerce_iats.direct_debit.checkout_pane.inc',
    'base' => 'commerce_iats_direct_debit_account_payer_pane',
    'page' => 'direct_debit_account_payer',
    'weight' => 1,
    'fieldset' => FALSE,
  );

  $checkout_panes['checkout_direct_debit_validation'] = array(
    'title' => t('Validation'),
    'name' => t('Direct Debit Validation'),
    'file' => 'includes/commerce_iats.direct_debit.checkout_pane.inc',
    'base' => 'commerce_iats_direct_debit_validation_pane',
    'page' => 'direct_debit_validation',
    'weight' => 2,
    'fieldset' => FALSE,
  );

  $checkout_panes['checkout_direct_debit_summary'] = array(
    'title' => t('Summary'),
    'name' => t('Direct Debit Summary'),
    'file' => 'includes/commerce_iats.direct_debit.checkout_pane.inc',
    'base' => 'commerce_iats_direct_debit_summary_pane',
    'page' => 'direct_debit_summary',
    'weight' => 3,
    'fieldset' => FALSE,
  );

  $checkout_panes['checkout_direct_debit_complete'] = array(
    'title' => t('Completed'),
    'name' => t('Direct Debit Set Up Complete'),
    'file' => 'includes/commerce_iats.direct_debit.checkout_pane.inc',
    'base' => 'commerce_iats_direct_debit_complete_pane',
    'page' => 'direct_debit_complete',
    'weight' => 4,
    'fieldset' => FALSE,
  );

  return $checkout_panes;
}

/**
 * Implements hook_page_alter().
 *
 * Display a message for payment methods that are not configured.
 */
function commerce_iats_page_alter(&$page) {
  if (isset($page['content']['system_main']['#page_callback']) && $page['content']['system_main']['#page_callback'] == 'commerce_payment_ui_admin_page') {
    $enabled_rules = $page['content']['system_main']['enabled']['rules']['#rows'];

    foreach ($enabled_rules as $key => $rule_data) {
      $payment_method_settings = NULL;

      $orig_machine_name = $rule_data[0]['data']['description']['settings']['machine_name']['#markup'];
      $machine_name = str_replace('Machine name: ', '', $orig_machine_name);

      $rule = rules_config_load($machine_name);

      foreach ($rule->actions() as $action) {
        if (isset($action->settings['payment_method']['method_id'])) {
          if ((strpos($action->settings['payment_method']['method_id'], 'iats') !== FALSE)
            || (strpos($action->settings['payment_method']['method_id'], 'direct_debit') !== FALSE)) {
            $payment_method_settings = $action->settings['payment_method']['settings'];
          }
        }
      }

      if (empty($payment_method_settings)) {
        $page['content']['system_main']['enabled']['rules']['#rows'][$key][0]['data']['status'] = array(
          '#type' => 'item',
          '#markup' => t('This payment method must be configured before use.'),
          '#prefix' => '<div class="rules-content-group-integrity-error">',
          '#suffix' => '</div>',
        );
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Alters checkout form to hide Direct Debit payment methods from
 * available payment method options.
 * Alters checkout form buttons to comply with Direct Debit requirements.
 *
 * See README.txt for documentation on using Direct Debit payment methods.
 */
function commerce_iats_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form_state['order']) && isset($form_state['order']->data['payment_method'])) {
    if (substr($form_state['order']->data['payment_method'], 0, 12) == 'direct_debit') {

      $form['#attached']['css'] = array(
        drupal_get_path('module', 'commerce_iats') . '/css/commerce_iats.direct_debit.css',
      );

      if ($form_id == 'commerce_checkout_form_declaration') {
        $form['buttons']['continue']['#value'] = 'Proceed';
        $form['buttons']['back']['#access'] = FALSE;
      }
      elseif ($form_id == 'commerce_checkout_form_account_details') {
        $form['buttons']['continue']['#value'] = 'Continue';
        $form['buttons']['back']['#access'] = FALSE;
      }
      elseif (($form_id == 'commerce_checkout_form_confirmation') || ($form_id == 'commerce_checkout_form_review')) {
        $form['#attached']['js'] = array(
          drupal_get_path('module', 'commerce_iats') . '/js/commerce_iats.direct_debit.js',
        );

        $form['buttons']['continue']['#value'] = 'Confirm';
        $form['buttons']['back']['#value'] = 'Amend';
        $form['buttons']['back']['#submit'] = array('commerce_iats_checkout_form_amend_submit');

        $form['buttons']['print'] = array(
          '#type' => 'button',
          '#value' => 'Print',
        );
      }

      unset($form['buttons']['back']['#attributes']['class']);
      unset($form['buttons']['back']['#prefix']);

      if ($form_id != 'commerce_checkout_form_complete') {
        $form['buttons']['cancel'] = array(
          '#type' => 'submit',
          '#value' => 'Cancel',
          '#submit' => array('commerce_iats_checkout_form_cancel_submit'),
          '#limit_validation_errors' => array(),
        );
      }

      if ($form_id != 'commerce_checkout_form_confirmation') {
        $footer_fields = commerce_iats_direct_debit_checkout_pane_footer_fields();
        $form += $footer_fields;
      }
    }
  }

  if (isset($form['commerce_payment']['payment_methods'])
    && is_array($form['commerce_payment']['payment_methods']['#value'])
  ) {
    $payment_method_names = array_keys($form['commerce_payment']['payment_methods']['#value']);

    foreach ($payment_method_names as $method_name) {
      if (substr($method_name, 0, 12) == 'direct_debit') {
        unset($form['commerce_payment']['payment_methods']['#value'][$method_name]);
      }
    }
  }

  if (isset($form['commerce_payment']['payment_method'])) {
    $payment_method_option_names = array_keys($form['commerce_payment']['payment_method']['#options']);

    foreach ($payment_method_option_names as $method_name) {
      if (substr($method_name, 0, 12) == 'direct_debit') {
        unset($form['commerce_payment']['payment_method']['#options'][$method_name]);
      }
    }

    $default_value = $form['commerce_payment']['payment_method']['#default_value'];
    if (substr($default_value, 0, 12) == 'direct_debit') {
      $form['commerce_payment']['payment_method']['#default_value'] = '';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Overrides the action URL of the checkout form when Direct Post is enabled.
 */
function commerce_iats_form_commerce_checkout_form_review_alter(&$form, &$form_state, $form_id) {
  $form['#id'] = 'commerce-checkout-form-review';

  if (isset($form['commerce_payment'])) {
    $payment_method_name = $form['commerce_payment']['payment_method']['#default_value'];
    $payment_method = $form_state['order']->payment_methods[$payment_method_name];

    if (isset($payment_method['settings']['direct_post']['enable_direct_post']) && $payment_method['settings']['direct_post']['enable_direct_post'] == 1) {
      $form['#action'] = url(COMMERCE_IATS_DIRECT_POST_URL, array('external' => TRUE));
    }
    else {
      $form['#action'] = '/checkout/' . $form_state['order']->order_id . '/review';
    }

    // Override payment method AJAX to allow for entire form to be refreshed.
    // Allows for form action changes required by Direct Post payment methods.
    $form['commerce_payment']['payment_method']['#ajax']['callback'] = 'commerce_iats_pane_checkout_form_details_refresh';
    $form['commerce_payment']['payment_method']['#ajax']['wrapper'] = 'commerce-checkout-form-review';
  }

  // Display any error message received during the last Direct Post.
  if (isset($form_state['order']->data['iats_error'])) {
    drupal_set_message($form_state['order']->data['iats_error'], 'error');
    unset($form_state['order']->data['iats_error']);
    commerce_order_save($form_state['order']);
  }
}

/**
 * Callback to refresh form on payment method change.
 * Full form refresh required to account for form action change
 * by Direct Post payment methods.
 */
function commerce_iats_pane_checkout_form_details_refresh($form, $form_state) {
  return $form;
}

/**
 * Implements hook_cron_queue_info().
 */
function commerce_iats_cron_queue_info() {
  $cron_name = variable_get('commerce_iats_transactions_cron_name',
    COMMERCE_IATS_TRANSACTIONS_CRON);

  $queues[$cron_name] = array(
    'worker callback' => 'commerce_iats_update_ach_eft_order',
    'time' => 60,
  );
  return $queues;
}

/**
 * Implements hook_cron().
 *
 * Retrieves daily ACH/EFT transaction reports from iATS.
 * Updates status of ACH/EFT transactions.
 */
function commerce_iats_cron() {
  commerce_iats_populate_ach_eft_transaction_queue();
}

/**
 * Populates a queue of ACH/EFT payment transactions from transaction reports.
 *
 * Used to update the status of Commerce iATS ACH/EFT orders as they are
 * processed by iATS and the users' banks.
 */
function commerce_iats_populate_ach_eft_transaction_queue() {
  $cron_name = variable_get('commerce_iats_transactions_cron_name',
    COMMERCE_IATS_TRANSACTIONS_CRON);

  $queue = DrupalQueue::get($cron_name);
  $queue->createQueue();

  // TODO: Account for custom payment method rule name.
  $payment_method = commerce_payment_method_instance_load('iats_ach_eft|commerce_payment_iats_ach_eft');

  if (($payment_method === FALSE) || empty($payment_method['settings'])) {
    // Payment method has not been set up. Cannot retrieve transaction reports.
    return;
  }

  // Get the API service.
  $iats = commerce_iats_get_service('ReportLink', $payment_method);

  $request = array(
    'date' => commerce_iats_get_formatted_date(mktime(0, 0, 0, date('n'), date('j'), date('Y'))),
  );

  // Get successful ACH/EFT transactions.
  $ach_eft_success_response = $iats->getACHEFTJournal($request);

  if (is_array($ach_eft_success_response)) {
    foreach ($ach_eft_success_response as $transaction) {
      $queue->createItem($transaction);
    }
  }

  // Get rejected ACH/EFT transactions.
  $ach_eft_reject_response = $iats->getACHEFTReject($request);

  if (is_array($ach_eft_reject_response)) {
    foreach ($ach_eft_reject_response as $transaction) {
      $queue->createItem($transaction);
    }
  }
}

/**
 * Updates the status of a Commerce iATS ACH/EFT order as it is
 * processed by iATS and the user's bank.
 * Creates a new Commerce transaction for each status update.
 *
 * @param array $data
 *   Array of transaction data.
 *
 * @return bool
 *   TRUE if the transaction data is used to update an order.
 */
function commerce_iats_update_ach_eft_order($data) {
  // Set up payment method.
  $payment_method_id = 'iats_ach_eft';
  $payment_method_instance_id = 'commerce_payment_iats_ach_eft';

  $payment_method = commerce_payment_method_instance_load($payment_method_id . '|' . $payment_method_instance_id);

  // Parse transaction data.
  $transaction_id = $data['TNID'];
  if (isset($data['CST']['CSTC']) && !empty($data['CST']['CSTC'])) {
    $customer_code = $data['CST']['CSTC'];
  }
  $result_code = $data['RST'];

  if ($result_code == 'OK:Reject') {
    $transaction_status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  else {
    $transaction_status = (substr($result_code, 0, 2) == COMMERCE_IATS_TXN_OK) ?
      COMMERCE_PAYMENT_STATUS_SUCCESS : COMMERCE_PAYMENT_STATUS_FAILURE;
  }

  $remote_id = (isset($customer_code)) ? $transaction_id . '|' . $customer_code : $transaction_id;

  // Look up initial order transaction from the remote ID.
  $query = new EntityFieldQuery();
  $initial_transaction_result = $query
    ->entityCondition('entity_type', 'commerce_payment_transaction')
    ->propertyCondition('remote_id', $remote_id)
    ->execute();
  if (isset($initial_transaction_result['commerce_payment_transaction'])) {
    $initial_transaction_entity_ids = array_keys($initial_transaction_result['commerce_payment_transaction']);
    $initial_transaction_entities = entity_load('commerce_payment_transaction', $initial_transaction_entity_ids);
    $initial_transaction = current($initial_transaction_entities);
  }

  if (isset($initial_transaction)) {
    $uid = $initial_transaction->uid;
    $order_id = $initial_transaction->order_id;
  }
  else {
    // Log an error if no initial transacton can be found for the remote ID.
    // This should only happen if the original order was deleted.
    watchdog('commerce_iats', 'Unable to update ACH/EFT transaction with result code: @result_code - No initial transaction found for remote ID: @remote_id',
      array(
        '@result_code' => $result_code,
        '@remote_id' => $remote_id,
      ),
      WATCHDOG_ERROR);
  }

  // Found a matching order. Add a new transaction.
  if (isset($uid) && isset($order_id)) {
    $transaction = new stdClass();
    $transaction->uid = $order_id;
    $transaction->order_id = $order_id;
    $transaction->payment_method = $payment_method_id;
    $transaction->instance_id = $payment_method_id . '|' . $payment_method_instance_id;
    $transaction->remote_id = $remote_id;
    $transaction->message = $result_code;
    $transaction->message_variables = array();
    // No payment amount required to update ACH/EFT status.
    $transaction->amount = 0;
    $transaction->currency_code = '';
    $transaction->status = $transaction_status;
    $transaction->remote_status = '';
    $transaction->payload = array();

    $result = commerce_payment_transaction_save($transaction);

    return ($result == SAVED_NEW);
  }
  return FALSE;
}

/**
 * Special submit handler for the amend button.
 */
function commerce_iats_checkout_form_amend_submit($form, &$form_state) {
  $order = commerce_order_load($form_state['order']->order_id);
  $form_state['redirect'] = 'checkout/' . $order->order_id . '/account_details';
}

/**
 * Special submit handler for the cancel button to avoid processing orders.
 */
function commerce_iats_checkout_form_cancel_submit($form, &$form_state) {
  $order = commerce_order_load($form_state['order']->order_id);
  $form_state['redirect'] = 'checkout/' . $order->order_id;
}

/**
 * Gets base fields settings form fields for all payment methods.
 *
 * @param array $settings
 *   Form field default values array.
 *
 * @return array
 *   Base fields for settings form.
 */
function commerce_iats_settings_form_base(array $settings = NULL) {
  $form = array();

  $form['agent_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Agent Code'),
    '#description' => t('This is the agent code used to authenticate with the iATS website.'),
    '#default_value' => (isset($settings['agent_code'])) ?
    $settings['agent_code'] : '',
    '#required' => TRUE,
    '#weight' => 0,
  );
  $password = (isset($settings['agent_password'])) ?
    $settings['agent_password'] : '';
  $form['agent_password'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#description' => t('Enter the corresponding password for this agent code.'),
    '#attributes' => array('value' => $password),
    '#required' => TRUE,
    '#weight' => 1,
  );
  $form['direct_post'] = array(
    '#type' => 'fieldset',
    '#title' => 'Direct Post',
    '#collapsible' => FALSE,
    '#weight' => 5,
  );
  $form['direct_post']['enable_direct_post'] = array(
    '#type' => 'checkbox',
    '#title' => 'Enable Direct Post Method',
    '#description' => 'Enable to submit the user\'s payment information directly to iATS Payments\' servers.',
    '#default_value' => isset($settings['direct_post']['enable_direct_post']) ? $settings['direct_post']['enable_direct_post'] : FALSE,
  );
  $form['direct_post']['process_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Direct Post Process Key'),
    '#description' => t('Process Key is required to process payments using the Direct Post Method.'),
    '#default_value' => (isset($settings['direct_post']['process_key'])) ?
        $settings['direct_post']['process_key'] : '',
    '#states' => array(
      'visible' => array(
        ':input[name="parameter[payment_method][settings][payment_method][settings][direct_post][enable_direct_post]"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['server'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction Server'),
    '#description' =>
    t('Select the transaction server to use for processing payments.'),
    '#options' => array(
      COMMERCE_IATS_NA_SERVER_ID => t('NA (For USD and CAD currencies)'),
      COMMERCE_IATS_UK_SERVER_ID => t('UK (For all other currencies)'),
    ),
    '#default_value' => (isset($settings['server'])) ?
    $settings['server'] : COMMERCE_IATS_NA_SERVER_ID,
    '#weight' => 5,
  );
  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => (isset($settings['log'])) ? $settings['log'] : array(),
    '#weight' => 6,
  );
  $form['detailed_failure_message'] = array(
    '#type' => 'checkbox',
    '#title' => 'Enable detailed failure messages',
    '#description' => 'Enable to attach a detailed message to a payment when the transaction fails.',
    '#default_value' => isset($settings['detailed_failure_message']) ? $settings['detailed_failure_message'] : FALSE,
    '#weight' => 7,
  );
  $form['invoice_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Invoice Prefix'),
    '#description' => t('Invoice numbers consist of this value followed by the order number. ie. I-101, I-102. Invoice numbers are limited to 10 characters, prefix included.'),
    '#default_value' => (isset($settings['invoice_prefix'])) ?
    $settings['invoice_prefix'] : 'I-',
    '#required' => TRUE,
    '#weight' => 8,
  );

  return $form;
}

/**
 * Gets base fields settings form fields for credit card based payment methods.
 *
 * @param array $settings
 *   Form field default values array.
 *
 * @return array
 *   Base fields for settings form.
 */
function commerce_iats_credit_card_settings_form_base(array $settings = NULL) {
  $form = commerce_iats_settings_form_base($settings);

  $form['credit_card'] = array(
    '#type' => 'fieldset',
    '#title' => t('Credit card service settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => 10,
  );
  $form['credit_card']['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types'),
    '#description' => t('If none are checked, any credit card type will be accepted.'),
    '#options' => commerce_iats_credit_card_types(),
    '#default_value' => isset($settings['credit_card']['card_types']) ? $settings['credit_card']['card_types'] : array(),
  );

  return $form;
}

/**
 * Ensures payment method settings have been populated.
 *
 * @param array $payment_method
 *   Array of payment method data.
 *
 * @return bool
 *   TRUE if payment method is valid for use.
 */
function commerce_iats_validate_payment_method(array $payment_method) {
  if (empty($payment_method['settings'])) {
    watchdog('commerce_iats', 'Payment method @method must be configured before use.',
      array(
        '@method' => $payment_method['short_title'],
      ),
      WATCHDOG_WARNING);

    return FALSE;
  }

  return TRUE;
}

/**
 * Validates recurring payment data.
 *
 * @param array $recurring_data
 *   Array of recurring payment data.
 *
 * @see commerce_iats_recurring_pane_checkout_form
 *
 * @return bool
 *   TRUE if recurring payment data is valid.
 */
function commerce_iats_validate_recurring_payment(array $recurring_data) {
  if (empty($recurring_data['amount'])) {
    return FALSE;
  }
  if ($recurring_data['amount'] <= 0) {
    return FALSE;
  }
  if (empty($recurring_data['schedule_type'])) {
    return FALSE;
  }
  if (empty($recurring_data['schedule_date'])) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Processes a payment and creates a transaction record.
 *
 * Based on the response from the iATS API.
 *
 * @param array $payment_method
 *   Associative array of payment method details.
 * @param array $payment_data
 *   Associative array of payment data.
 * @param object $order
 *   Commerce order object.
 * @param array $charge
 *   Associative array of charge data.
 * @param string $payment_callback
 *   Name of the payment callback.
 *
 * @return Mixed
 *   API response array or bool FALSE on failure.
 */
function commerce_iats_process_payment($payment_method, $payment_data, $order, $charge, $payment_callback) {
  // Process the payment using the defined callback method.
  if (!empty($payment_method['file'])) {
    $parts = explode('.', $payment_method['file']);
    module_load_include(array_pop($parts), $payment_method['module'], implode('.', $parts));
  }

  $response = $payment_callback($payment_method, $payment_data, $order, $charge);

  // Handle the payment response.
  if ($response != NULL) {
    // Log the payment response.
    if ($payment_method['settings']['log']['response'] === 'response') {
      commerce_iats_log_response($payment_method, $response);
    }

    $auth_result = NULL;
    $transaction_id = NULL;
    $customer_code = NULL;

    if (is_array($response)) {
      if (isset($response['AUTHRESULT'])) {
        // Account for direct debit validation transaction.
        $auth_result = trim($response['AUTHRESULT']['AUTHSTATUS']);
      }
      elseif (isset($response['AUTHORIZATIONRESULT'])) {
        // Account for regular transaction.
        $auth_result = trim($response['AUTHORIZATIONRESULT']);
      }

      $transaction_id = (isset($response['TRANSACTIONID'])) ?
        trim($response['TRANSACTIONID']) : NULL;
      $customer_code = (isset($response['CUSTOMERCODE']) &&
        !empty($response['CUSTOMERCODE'])) ?
        trim($response['CUSTOMERCODE']) : NULL;
    }

    // If AUTHORIZATIONRESULT or AUTHRESULT are not set, then the API returned
    // an error. Assign it here for logging purposes.
    if ($auth_result == NULL) {
      $auth_result = $response;
    }

    // Creating a recurring payment does not result in a transaction ID.
    // Add custom transaction ID here for reference.
    if (($transaction_id == NULL)
      && (isset($payment_method['settings']['allow_recurring'])
        && $payment_method['settings']['allow_recurring'] == 1)) {
      $transaction_id = COMMERCE_IATS_RECURRING_PAYMENT_TRANSACTION_ID;
    }

    // Build the remote ID from the transaction ID and customer code.
    $remote_id = $transaction_id;
    if ($customer_code != NULL) {
      $remote_id .= '|' . $customer_code;
    }

    // Prepare a transaction object to log the API response.
    $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
    $transaction->remote_id = $remote_id;
    $transaction->amount = $charge['amount'];
    $transaction->currency_code = $charge['currency_code'];

    if (is_a($payment_data, 'CommerceCardOnFile')) {
      $type = $payment_data->card_type;
    }
    else {
      $type = $payment_data['credit_card']['type'];
    }

    $transaction->payload = array(
      'type' => $type,
    );

    if (is_array($auth_result)) {
      if (isset($auth_result['code'])) {
        // Create a failed transaction with the error message.
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;

        if (isset($payment_method['settings']['detailed_failure_message'])
          && $payment_method['settings']['detailed_failure_message'] == 1) {
          $message = array($auth_result['message']);
        }
        else {
          $message = array('Transaction failed.');
        }
      }
      else {
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $message = array('Transaction successful.');
        if (!is_null($customer_code)) {
          $message[] = 'Customer code created: ' . $customer_code;
        }
        if ($payment_method['method_id'] == 'iats_ach_eft') {
          $message[] = 'ACH/EFT payment pending.';
        }
      }
    }
    else {
      if (strpos($auth_result, COMMERCE_IATS_TXN_OK) === 0) {
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $message = array('Transaction successful.');
        if (!is_null($customer_code)) {
          $message[] = 'Customer code created: ' . $customer_code;
        }
        if ($payment_method['method_id'] == 'iats_ach_eft') {
          $message[] = 'ACH/EFT payment pending.';
        }
      }
      else {
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        $message = array('Transaction failed.') . $auth_result;
      }
    }

    $transaction->message = implode('<br />', $message);

    // Save the transaction information.
    commerce_payment_transaction_save($transaction);

    // If the payment failed, display an error and rebuild the form.
    if ($transaction->status != COMMERCE_PAYMENT_STATUS_SUCCESS) {
      if (is_array($auth_result)) {
        $error_reason = $auth_result['message'];
        if (isset($response['AUTHRESULT']['BANKERROR'])) {
          $error_reason .= ': ' . $response['AUTHRESULT']['BANKERROR'];
        }
      }
      else {
       $error_reason = $auth_result;
      }

      drupal_set_message(
        t('We received the following error while attempting to process your payment: @reason',
          array('@reason' => $error_reason)),
        'error'
      );
      return FALSE;
    }
  }
  else {
    drupal_set_message(
      t('We encountered an error contacting our payment processor. Please try submitting your payment again.'),
      'error'
    );
    return FALSE;
  }
  return $response;
}

/**
 * Logs an API request.
 *
 * @param array $payment_method
 *   The payment method used during this transaction.
 * @param string $payment_callback
 *   The name of the payment callback method used for this request.
 * @param array $request
 *   The API request to log.
 */
function commerce_iats_log_request(array $payment_method, $payment_callback, array $request) {
  if (isset($request['ccNum'])) {
    $request['ccNum'] = commerce_iats_mask_credit_card_number($request['ccNum']);
  }
  elseif (isset($request['creditCardNum'])) {
    $request['creditCardNum'] = commerce_iats_mask_credit_card_number($request['creditCardNum']);
  }
  elseif (isset($request['accountNum'])) {
    $request['accountNum'] = commerce_iats_mask_credit_card_number($request['accountNum']);
  }

  if (isset($request['cvv2']) && !empty($request['cvv2'])) {
    $request['cvv2'] = str_repeat('X', strlen($request['cvv2']));
  }

  watchdog('commerce_iats', 'iATS API request to @method: @callback: @request',
    array(
      '@method' => $payment_method['short_title'],
      '@callback' => $payment_callback,
      '@request' => '<pre>' . check_plain(print_r($request, TRUE)) . '</pre>',
    ),
    WATCHDOG_DEBUG);
}

/**
 * Logs an API response.
 *
 * @param array $payment_method
 *   The payment method used during this transaction.
 * @param mixed $response
 *   Response array or error string.
 */
function commerce_iats_log_response(array $payment_method, $response) {
  watchdog('commerce_iats',
    'iATS API response from @method: @request',
    array(
      '@method' => $payment_method['short_title'],
      '@request' => '<pre>' . check_plain(print_r($response, TRUE)) . '</pre>',
    ),
    WATCHDOG_DEBUG);
}

/**
 * Define credit card types accepted by iATS.
 *
 * Array keys must match keys in Commerce module file
 *  commerce_payment.credit_card.inc:commerce_payment_credit_card_types
 *
 * The method commerce_payment_credit_card_form uses array_intersect_key
 * to validate keys in this array, making any custom keys invalid.
 *
 * @return array
 *   Array of credit card types.
 */
function commerce_iats_credit_card_types() {
  return array(
    'visa' => t('Visa'),
    'mastercard' => t('MasterCard'),
    'amex' => t('American Express'),
    'discover' => t('Discover Card'),
  );
}

/**
 * Converts a Commerce credit card type to an iATS-compatible credit card type.
 *
 * This conversion method is used to allow for custom credit card types.
 * See comment block of commerce_iats_credit_card_types for explanation.
 *
 * @param string $type
 *   The Commerce credit card type.
 *
 * @return string
 *   The iATS credit card type.
 */
function commerce_iats_credit_card_mop($type) {
  $mop = array(
    'visa' => 'VISA',
    'mastercard' => 'MC',
    'amex' => 'AMX',
    'discover' => 'DSC',
  );
  return $mop[$type];
}

/**
 * Gets an array of enabled card types for a payment method.
 *
 * @param array $payment_method
 *   The payment method used during this transaction.
 *
 * @return array
 *   Array of enabled card type IDs ie. visa, mc
 */
function commerce_iats_enabled_credit_card_types(array $payment_method) {
  $card_types = NULL;

  if (isset($payment_method['settings']['credit_card'])) {
    $card_types = array_diff(
      array_values($payment_method['settings']['credit_card']['card_types']), array(0));
  }

  if (($card_types == NULL) || (count($card_types) == 0)) {
    $card_types = array_keys(commerce_iats_credit_card_types());
  }

  return $card_types;
}

/**
 * Masks all but the last four digits of a credit card number.
 *
 * @param string $credit_card_number
 *   Unmasked credit card number.
 *
 * @return string
 *   Masked credit card number.
 */
function commerce_iats_mask_credit_card_number($credit_card_number) {
  if (!empty($credit_card_number)) {
   return str_repeat('X', strlen($credit_card_number) - 4) . substr($credit_card_number, -4);
  }
  return '';
}

/**
 * Formats an array of credit card data in a way appropriate for iATS.
 *
 * @param array $card_data
 *   Unformatted credit card data from form
 *
 * @return array
 *   Formatted credit card data.
 */
function commerce_iats_format_credit_card_data(array $card_data) {
  // Determine card type.
  $orig_card_type = NULL;
  $card_type = NULL;
  if (!empty($card_data['number'])) {
    module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
    $orig_card_type = commerce_payment_validate_credit_card_type($card_data['number'], array_keys(commerce_iats_credit_card_types()));
  }

  if ($orig_card_type != NULL) {
    $card_type = commerce_iats_credit_card_mop($orig_card_type);
  }

  // Format credit card data.
  $card_number = str_replace(' ', '', $card_data['number']);
  $expiry = sprintf('%02d/%02d', $card_data['exp_month'], ($card_data['exp_year'] % 100));

  $formatted_card_data = array(
    'orig_type' => $orig_card_type,
    'type' => $card_type,
    'number' => $card_number,
    'expiry' => $expiry,
  );

  return $formatted_card_data;
}

/**
 * Removes all non-numeric characters from a sort code.
 * Sort codes may be provided as three blocks of numbers,
 * separated by a space or dash character.
 *
 * @param string $sort_code
 *   The unformatted sort code.
 *
 * @return string
 *   The formatted sort code.
 */
function commerce_iats_format_sort_code($sort_code) {
  return preg_replace('/[^0-9]+/', '', $sort_code);
}

/**
 * Populate a request with address information for use in a iATS API request.
 *
 * @param array $request
 *   Request array
 * @param object $order
 *   The order object containing the address information via a referenced
 *   customer profile.
 * @param string $field_name
 *   The name of the customer profile reference field that links the order to
 *   the proper customer profile where the address data will be retrieved from.
 *
 * @return mixed
 *   Updates pass by reference.
 */
function commerce_iats_address(array &$request, $order, $field_name) {
  // Return if the specified profile field doesn't exist.
  if (empty($order->{$field_name})) {
    watchdog('commerce_iats', 'Missing address data for @field_name: @order',
      array(
        '@field_name' => $field_name,
        '@order' => '<pre>' . print_r($order, TRUE) . '</pre>',
      ),
      WATCHDOG_DEBUG
    );

    return FALSE;
  }

  // Prepare the address data for use in the request address.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $address_data = $order_wrapper->{$field_name}->commerce_customer_address->value();

  commerce_iats_add_extra_address_fields($address_data);

  // Add the basic address information to the request.
  $request['firstName'] = $address_data['first_name'];
  $request['lastName'] = $address_data['last_name'];
  $request['address'] = $address_data['thoroughfare'];
  $request['city'] = $address_data['locality'];
  $request['state'] = $address_data['administrative_area'];
  $request['zipCode'] = $address_data['postal_code'];
  $request['country'] = $address_data['country'];
  if ($address_data['premise']) {
    $request['address'] .= ', ' . $address_data['premise'];
  }

  return TRUE;
}

/**
 * Adds extra address fields if missing from Commerce customer profile.
 *
 * @param array $address_data
 *   Array of Commerce customer profile address data.
 */
function commerce_iats_add_extra_address_fields(&$address_data) {
  // If the address is missing a first name, split the full name into two parts.
  if (empty($address_data['first_name'])) {
    $name_parts = explode(' ', $address_data['name_line']);
    $address_data['first_name'] = array_shift($name_parts);
    $address_data['last_name'] = implode(' ', $name_parts);
  }
}

/**
 * Converts a UNIX timestamp to a date string formatted for the iATS API.
 *
 * @param int $timestamp
 *   The timestamp to convert.
 *
 * @return string
 *   The formatted date string.
 */
function commerce_iats_get_formatted_date($timestamp) {
  return date('c', $timestamp);
}

/**
 * Gets an instance of an iATS Payments API service.
 *
 * @param string $service_name
 *   The iATS service to get. 'ProcessLink', 'CustomerLink', 'ReportLink'
 * @param array $payment_method
 *   The payment method, used to populate iATS API settings.
 *
 * @return Mixed
 *   The instantiated iATS Payments API service.
 */
function commerce_iats_get_service($service_name, array $payment_method) {
  if (libraries_load('iatspayments')) {
    $service_name = 'iATS\\' . $service_name . variable_get('commerce_iats_service_name_suffix', '');
    $service = new $service_name(
      $payment_method['settings']['agent_code'],
      $payment_method['settings']['agent_password'],
      $payment_method['settings']['server']
    );
    return $service;
  }
  return NULL;
}

/**
 * Loads all payment method instances for a given payment method ID.
 *
 * @param string $method_id
 *   The payment method ID to load payment method instances for.
 *
 * @return array
 *   Array of matching payment method instances.
 */
function commerce_iats_get_all_payment_methods($method_id) {
  $payment_methods = array();

  $rules = rules_config_load_multiple(FALSE);

  foreach ($rules as $rule_name => $rule) {
    if ($rule->active) {
      foreach ($rule->actions() as $action) {
        $action_settings = $action->settings;
        continue;
      }
      if (isset($action_settings['payment_method'])) {
        $method_id = $action_settings['payment_method']['method_id'];

        $payment_method = commerce_payment_method_instance_load($method_id . '|' . $rule_name);

        if ($payment_method) {
          $payment_methods[] = $payment_method;
        }
      }
    }
  }

  return $payment_methods;
}
