<?php
/**
 * @file
 * Test cases for Commerce iATS Card on File.
 */

require_once 'includes/report_link_card_on_file_test.inc';

/**
 * Test case for Commerce iATS Card on File tests.
 */
class CommerceiATSCardOnFileTestCase extends DrupalWebTestCase {
  const TEST_AGENT_CODE = 'TEST88';
  const TEST_AGENT_PASSWORD = 'TEST88';

  const COMMERCE_IATS_CARDONFILE_TRANSACTIONS_TEST_CRON = 'commerce_iats_cardonfile_transactions_test_cron';

  protected $adminUser;

  /**
   * Returns info displayed in the test interface.
   *
   * @return array
   *   Formatted as specified by simpletest.
   */
  public static function getInfo() {
    // Note: getInfo() strings are not translated with t().
    return array(
      'name' => 'Commerce iATS Card on File',
      'description' => 'Tests Card on File logic in Commerce iATS.',
      'group' => 'Commerce iATS',
    );
  }

  /**
   * Pre-test setup function.
   *
   * Enables dependencies.
   * Configures payment method for testing.
   */
  public function setUp() {
    // Use a profile that contains required modules:
    $prof = drupal_get_profile();
    $this->profile = $prof;
    // Enable modules required for the test.
    $enabled_modules = array(
      'libraries',
      'entity',
      'entity_token',
      'rules',
      'commerce',
      'commerce_product',
      'commerce_price',
      'commerce_customer',
      'commerce_line_item',
      'commerce_order',
      'commerce_product_reference',
      'commerce_payment',
      'commerce_tax',
      'commerce_product_pricing',
      'commerce_iats',
      'commerce_iats_cardonfile',
    );
    parent::setUp($enabled_modules);

    // Create admin user.
    $perms = array(
      'access administration pages',
      'administer checkout',
      'access checkout',
      'configure store',
      'administer commerce_customer_profile entities',
      'administer customer profile types',
      'administer line items',
      'administer line item types',
      'administer commerce_order entities',
      'configure order settings',
      'view any commerce_order entity',
      'create commerce_order entities',
      'edit any commerce_order entity',
      'administer commerce_product entities',
      'administer product types',
      'administer product pricing',
      'administer payment methods',
      'administer payments',
      'administer rules',
    );

    // 'commerce_iats_service_name_suffix' allows custom versions of the
    // iATS API library classes to be loaded. For example, the ReportLink class
    // will be replaced by the  ReportLinkTestService class.
    variable_set('commerce_iats_service_name_suffix', 'CardOnFileTestService');

    // Set a custom transactions cron name so real transaction processing isn't
    // affected.
    variable_set('commerce_iats_cardonfile_transactions_cron_name',
      self::COMMERCE_IATS_CARDONFILE_TRANSACTIONS_TEST_CRON);

    $this->adminUser = $this->drupalCreateUser($perms);

    $this->drupalLogin($this->adminUser);

    $payment_method_edit_url
      = 'admin/commerce/config/payment-methods/manage/commerce_payment_iats_credit_card_customer_code/edit/3';

    $edit = array();
    $edit['parameter[payment_method][settings][payment_method][settings][agent_code]']
      = self::TEST_AGENT_CODE;
    $edit['parameter[payment_method][settings][payment_method][settings][agent_password]']
      = self::TEST_AGENT_PASSWORD;

    $this->drupalPost($payment_method_edit_url, $edit, t('Save'));
    $this->assertText(t('Your changes have been saved.'));

    // Create a Commerce customer.
    $customer = new stdClass();
    $customer->type = 'billing';
    $customer->uid = $this->adminUser->uid;
    commerce_customer_profile_save($customer);
  }

  /**
   * Post-test function.
   */
  public function tearDown() {
    parent::tearDown();
    variable_del('commerce_iats_service_suffix', '');
    variable_del('commerce_iats_cardonfile_transactions_cron_name');
  }

  /**
   * Tests creating orders then processing a queue of transactions.
   *
   * This tests functionality used when retrieving payment
   * transaction reports from the iATS Payments API. These reports
   * are used to create Commerce transactions for payments that
   * occur outside of the iATS Commerce module, such as iATS-processed
   * recurring payments.
   */
  public function testProcessTransactionQueue() {
    // Create initial order.
    $initial_order_number = 1;

    $order = new stdClass();
    $order->order_number = $initial_order_number;
    $order->type = 'commerce_order';
    $order->uid = $this->adminUser->uid;
    $order->mail = 'admin@example.org';
    $order->status = 'pending';

    $order_save_result = commerce_order_save($order);

    $this->assertIdentical($order_save_result, SAVED_NEW,
      'commerce_order_save() successfully saved a new order.');

    $order = commerce_order_load_by_number($initial_order_number);

    // Create credit card recurring payment transaction.
    $transaction = new stdClass();
    $transaction->uid = $this->adminUser->uid;
    $transaction->order_id = $order->order_id;
    $transaction->payment_method = 'iats_credit_card_customer_code';
    $transaction->instance_id = 'iats_credit_card_customer_code|commerce_payment_iats_credit_card_customer_code';
    $transaction->remote_id = COMMERCE_IATS_RECURRING_PAYMENT_TRANSACTION_ID . '|CCC000001';
    $transaction->message = 'OK:678594:';
    $transaction->message_variables = array();
    $transaction->amount = 0;
    $transaction->currency_code = '';
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $transaction->remote_status = '';
    $transaction->payload = array();

    $transaction_save_result = commerce_payment_transaction_save($transaction);

    $this->assertIdentical($transaction_save_result, SAVED_NEW,
      'commerce_payment_transaction_save() successfully saved credit card transaction.');

    // Create ACH/EFT recurring payment transaction.
    $transaction = new stdClass();
    $transaction->uid = $this->adminUser->uid;
    $transaction->order_id = $order->order_id;
    $transaction->payment_method = 'iats_ach_eft_customer_code';
    $transaction->instance_id = 'iats_ach_eft_customer_code|commerce_payment_iats_ach_eft_customer_code';
    $transaction->remote_id = COMMERCE_IATS_RECURRING_PAYMENT_TRANSACTION_ID . '|ACHC00001';
    $transaction->message = 'OK:678594:';
    $transaction->message_variables = array();
    $transaction->amount = 0;
    $transaction->currency_code = '';
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $transaction->remote_status = '';
    $transaction->payload = array();

    $transaction_save_result = commerce_payment_transaction_save($transaction);

    $this->assertIdentical($transaction_save_result, SAVED_NEW,
      'commerce_payment_transaction_save() successfully saved ACH/EFT transaction.');

    // Run cron to queue and process recurring transactions.
    $cron_run = drupal_cron_run();

    $this->assertTrue($cron_run, 'Tested cron ran successfully.');

    $query = new EntityFieldQuery();
    $existing_transaction_result = $query
      ->entityCondition('entity_type', 'commerce_payment_transaction')
      ->execute();
    if (isset($existing_transaction_result['commerce_payment_transaction'])) {
      $existing_transaction_entity_ids = array_keys($existing_transaction_result['commerce_payment_transaction']);
      $existing_transactions = entity_load('commerce_payment_transaction', $existing_transaction_entity_ids);
    }

    $this->assertTrue(isset($existing_transactions), 'Tested existing transactions.');

    if (isset($existing_transactions)) {
      $saved_transactions = array();
      foreach ($existing_transactions as $existing_transaction) {
        $saved_transactions[$existing_transaction->remote_id] = $existing_transaction;
      }

      $report_link = new \iATS\ReportLinkCardOnFileTestService();

      // Verify successful credit card transactions.
      $credit_card_success_transactions = $report_link->getTestCreditCardSuccessTransactionData();

      foreach ($credit_card_success_transactions as $transaction) {
        $remote_id = $transaction['TNID'] . '|' . $transaction['CST']['CSTC'];

        $this->assertTrue(isset($saved_transactions[$remote_id]), 'Tested saved credit card transaction: ' . $remote_id);
      }

      // Verify rejected credit card transactions.
      $credit_card_reject_transactions = $report_link->getTestCreditCardSuccessTransactionData();

      foreach ($credit_card_reject_transactions as $transaction) {
        $remote_id = $transaction['TNID'] . '|' . $transaction['CST']['CSTC'];

        $this->assertTrue(isset($saved_transactions[$remote_id]), 'Tested saved credit card transaction: ' . $remote_id);
      }

      // Verify successful ACH/EFT transactions.
      $ach_eft_success_transactions = $report_link->getTestACHEFTSuccessTransactionData();

      foreach ($ach_eft_success_transactions as $transaction) {
        $remote_id = $transaction['TNID'] . '|' . $transaction['CST']['CSTC'];

        $this->assertTrue(isset($saved_transactions[$remote_id]), 'Tested saved ACH/EFT transaction: ' . $remote_id);
      }

      // Verify rejected ACH/EFT transactions.
      $ach_eft_reject_transactions = $report_link->getTestACHEFTSuccessTransactionData();

      foreach ($ach_eft_reject_transactions as $transaction) {
        $remote_id = $transaction['TNID'] . '|' . $transaction['CST']['CSTC'];

        $this->assertTrue(isset($saved_transactions[$remote_id]), 'Tested saved ACH/EFT transaction: ' . $remote_id);
      }
    }
  }
}
