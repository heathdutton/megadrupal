<?php

/**
 * @file
 * Implements iATS Payments API for use in Drupal Commerce Card on File.
 */

define('COMMERCE_IATS_CARDONFILE_TRANSACTIONS_CRON', 'commerce_iats_cardonfile_transactions_cron');

/**
 * Implements hook_entity_info().
 */
function commerce_iats_cardonfile_entity_info() {
  $data = array();

  $data['commerce_iats_cardonfile_recurring'] = array(
    'label' => t('Commerce iATS Card on File Recurring'),
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIController',
    'base table' => 'commerce_iats_cardonfile_recurring',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'card_id',
    ),
  );

  return $data;
}

/**
 * Implements hook_permission().
 */
function commerce_iats_cardonfile_permission() {
  return array(
    'modify iats recurring payment' => array(
      'title' => t('Modify a recurring payment'),
      'description' => (t('Modify a recurring payment amount and schedule.')),
    ),
  );
}

/**
 * Implements hook_entity_property_info_alter().
 */
function commerce_iats_cardonfile_entity_property_info_alter(&$info) {
  $info['commerce_cardonfile']['properties']['recurring'] = array(
    'label' => t('Recurring'),
    'description' => t('Boolean indicating an iATS recurring payment card.'),
    'type' => 'boolean',
    'setter callback' => 'entity_property_verbatim_set',
    'schema field' => 'recurring',
  );
}

/**
 * Implements hook_commerce_payment_method_info_alter().
 *
 * Overrides payment methods for use with Card on File.
 */
function commerce_iats_cardonfile_commerce_payment_method_info_alter(&$payment_methods) {
  $credit_card_callbacks = commerce_iats_cardonfile_payment_method_callbacks('credit_card');

  $payment_methods['iats_credit_card']['base'] = 'commerce_iats_cardonfile_credit_card';
  $payment_methods['iats_credit_card']['file'] = 'modules/commerce_iats_cardonfile/includes/commerce_iats_cardonfile.credit_card.inc';
  $payment_methods['iats_credit_card']['cardonfile'] = $credit_card_callbacks;

  $payment_methods['iats_credit_card_customer_code']['base'] = 'commerce_iats_cardonfile_credit_card_customer_code';
  $payment_methods['iats_credit_card_customer_code']['file'] = 'modules/commerce_iats_cardonfile/includes/commerce_iats_cardonfile.credit_card_customer_code.inc';
  $payment_methods['iats_credit_card_customer_code']['cardonfile'] = $credit_card_callbacks;

  $ach_eft_callbacks = commerce_iats_cardonfile_payment_method_callbacks('ach_eft');

  $payment_methods['iats_ach_eft']['base'] = 'commerce_iats_cardonfile_ach_eft';
  $payment_methods['iats_ach_eft']['file'] = 'modules/commerce_iats_cardonfile/includes/commerce_iats_cardonfile.ach_eft.inc';
  $payment_methods['iats_ach_eft']['cardonfile'] = $ach_eft_callbacks;

  $payment_methods['iats_ach_eft_customer_code']['base'] = 'commerce_iats_cardonfile_ach_eft_customer_code';
  $payment_methods['iats_ach_eft_customer_code']['file'] = 'modules/commerce_iats_cardonfile/includes/commerce_iats_cardonfile.ach_eft_customer_code.inc';
  $payment_methods['iats_ach_eft_customer_code']['cardonfile'] = $ach_eft_callbacks;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_iats_cardonfile_form_commerce_payment_order_transaction_add_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form_state['values']['payment_method'])) {
    $parts = explode('|', $form_state['values']['payment_method']);

    if ($parts[0] == 'iats_credit_card_customer_code') {
      // Hide "Amount" and "Currency Code" fields when creating a customer code.
      $form['payment_terminal']['amount']['#access'] = FALSE;
      $form['payment_terminal']['currency_code']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters checkout form to allow for recurring payments, when enabled.
 *
 * Alters card on file options on form to account for bank account
 * details being used in place of credit card details.
 */
function commerce_iats_cardonfile_form_commerce_checkout_form_review_alter(&$form, &$form_state, $form_id) {
  // Disable non-recurring payment methods if recurring checkout pane exists.
  if (isset($form_state['order']->data['recurring'])) {
    $recurring_payment_methods = array(
      'iats_credit_card_customer_code',
      'iats_ach_eft_customer_code'
    );

    if (isset($form['commerce_payment']['payment_methods'])
      && is_array($form['commerce_payment']['payment_methods']['#value'])) {
      foreach ($form['commerce_payment']['payment_methods']['#value'] as $payment_method_name => $payment_method_data) {
        $valid_payment_method = FALSE;
        foreach ($recurring_payment_methods as $recurring_payment_method_name) {
          if (strstr($payment_method_name, $recurring_payment_method_name . '|')) {
            $valid_payment_method = TRUE;
            continue;
          }
        }
        if (!$valid_payment_method) {
          unset($form['commerce_payment']['payment_methods']['#value'][$payment_method_name]);
          unset($form['commerce_payment']['payment_method']['#options'][$payment_method_name]);
        }
      }

      // Overwrite payment details to remove any stored cards.
      if (empty($form_state['values'])) {
        $form['commerce_payment']['payment_details'] = array(
          '#type' => 'markup',
          '#markup' => '<div id="payment-details"></div>',
        );
      }
    }
  }

  if (isset($form_state['values']['commerce_payment']['payment_method'])) {
    $payment_method_id = $form_state['values']['commerce_payment']['payment_method'];
  }
  elseif (isset($form['commerce_payment']['payment_method'])) {
    $payment_method_id = $form['commerce_payment']['payment_method']['#default_value'];
  }

  if (!isset($payment_method_id)) {
    // Unable to alter the form without a valid payment method ID.
    return;
  }

  $payment_method = $form_state['order']->payment_methods[$payment_method_id];

  $allow_recurring = (isset($payment_method['settings']['allow_recurring']) && ($payment_method['settings']['allow_recurring'] == 1));
  $direct_post = (isset($payment_method['settings']['direct_post']['enable_direct_post']) && ($payment_method['settings']['direct_post']['enable_direct_post'] == 1));

  if ($allow_recurring || $direct_post) {
    // Hide stored cards.
    // Cannot used stored cards to create a new recurring payment / Direct Post.
    $form['commerce_payment']['payment_details']['cardonfile'] = array(
      '#type' => 'value',
      '#value' => 'new',
    );

    $form['commerce_payment']['payment_details']['credit_card']['#access'] = TRUE;

    // Disable Card on File options. Card is automatically stored when:
    // Recurring is enabled.
    // Using Direct Post to create a customer code.
    $form['commerce_payment']['payment_details']['credit_card']['cardonfile_store']['#access'] = FALSE;
    $form['commerce_payment']['payment_details']['cardonfile_instance_default']['#access'] = FALSE;
  }

  // In case of ACH/EFT payment, display bank account form fields.
  if (substr($payment_method_id, 0, 12) == 'iats_ach_eft') {
    $form['commerce_payment']['payment_details']['bank_account']['cardonfile_store']
      = $form['commerce_payment']['payment_details']['credit_card']['cardonfile_store'];

    unset($form['commerce_payment']['payment_details']['credit_card']['cardonfile_store']);

    $form['commerce_payment']['payment_details']['cardonfile']['#title'] = t('Select a stored bank account.');
    $form['commerce_payment']['payment_details']['cardonfile']['#options']['new'] = t('Use a different bank account.');
    $form['commerce_payment']['payment_details']['cardonfile_instance_default']['#title']
      = t('Set as your default bank account.');
    $form['commerce_payment']['payment_details']['bank_account']['cardonfile_store']['#title']
      = t('Store this bank account on file for future use.');

    if (isset($form['commerce_payment']['payment_details']['credit_card']['#access'])) {
      $form['commerce_payment']['payment_details']['bank_account']['#access']
        = $form['commerce_payment']['payment_details']['credit_card']['#access'];
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_iats_cardonfile_form_commerce_cardonfile_card_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($form_state['card']->recurring) {
    $form['credit_card']['#tree'] = TRUE;

    $form['credit_card']['cardonfile_instance_default']['#access'] = FALSE;

    if ($form_state['op'] == 'update') {
      $recurring = commerce_iats_cardonfile_recurring_load($form_state['card']->card_id);
      $form_state['recurring'] = $recurring;

      $form['credit_card']['recurring'] = array();

      if (user_access('modify iats recurring payment', $user)) {
        module_load_include('inc', 'commerce_iats', 'includes/commerce_iats.recurring.checkout_pane');

        $schedule_type = (isset($form_state['values']['credit_card']['recurring']['schedule_type'])) ?
          $form_state['values']['credit_card']['recurring']['schedule_type'] : $recurring->schedule_type;

        $schedule_date = (isset($form_state['values']['credit_card']['recurring']['schedule_date'])) ?
          $form_state['values']['credit_card']['recurring']['schedule_date'] : $recurring->schedule_date;

        $form['credit_card']['recurring']['amount'] = array(
          '#type' => 'textfield',
          '#title' => t('Recurring payment amount'),
          '#size' => 8,
          '#default_value' => $recurring->amount,
        );

        $form['credit_card']['recurring']['schedule_type'] = array(
          '#type' => 'select',
          '#title' => t('Recurring payment schedule type'),
          '#options' => commerce_iats_recurring_pane_schedule_types(),
          '#default_value' => $schedule_type,
          '#ajax' => array(
            'callback' => 'commerce_iats_cardonfile_recurring_schedule_type_callback',
            'method' => 'replace',
            'wrapper' => 'payment-date-wrapper',
          ),
        );

        if (!empty($schedule_type)) {
          $form['credit_card']['recurring']['schedule_date'] = array(
            '#type' => 'select',
            '#title' => t('Recurring payment date'),
            '#options' => commerce_iats_recurring_pane_schedule_dates($schedule_type),
          );

          if ($schedule_date != NULL) {
            $form['credit_card']['recurring']['schedule_date']['#default_value'] = $schedule_date;
          }
        }
        else {
          $form['credit_card']['recurring']['schedule_date'] = array();
        }

        $form['credit_card']['recurring']['schedule_date']['#prefix'] = '<div id="payment-date-wrapper">';
        $form['credit_card']['recurring']['schedule_date']['#suffix'] = '</div>';
      }
      else {
        $form['credit_card']['recurring']['amount'] = array(
          '#type' => 'item',
          '#title' => t('Recurring payment amount'),
          '#markup' => $recurring->amount,
        );

        $form['credit_card']['recurring']['schedule_type'] = array(
          '#type' => 'item',
          '#title' => t('Recurring payment schedule type'),
          '#markup' => $recurring->schedule_type,
        );

        $form['credit_card']['recurring']['schedule_date'] = array(
          '#type' => 'item',
          '#title' => t('Recurring payment date'),
          '#markup' => $recurring->schedule_date,
        );
      }
    }
  }

  // Overwrite form validation.
  $form['#validate'] = array('commerce_iats_cardonfile_form_commerce_cardonfile_card_form_validate');
}

/**
 * Form callback when selecting a schedule type.
 */
function commerce_iats_cardonfile_recurring_schedule_type_callback($form, $form_state) {
  return $form['credit_card']['recurring']['schedule_date'];
}

/**
 * Validation callback for cardonfile form.
 */
function commerce_iats_cardonfile_form_commerce_cardonfile_card_form_validate($form, &$form_state) {
  module_load_include('inc', 'commerce_cardonfile', 'includes/commerce_cardonfile.pages');
  module_load_include('inc', 'commerce_iats', 'includes/commerce_iats.recurring.checkout_pane');

  $valid = TRUE;

  if (empty($form_state['values']['credit_card']['owner'])) {
    form_error($form['credit_card']['owner'], t('Please enter a card owner name.'));
    $valid = FALSE;
  }

  if ($valid && isset($form_state['values']['credit_card']['recurring'])) {
    if (empty($form_state['values']['credit_card']['recurring']['amount'])) {
      form_error($form['credit_card']['recurring']['amount'], t('Please enter a valid amount.'));
      $valid = FALSE;
    }

    $schedule_type = $form_state['values']['credit_card']['recurring']['schedule_type'];

    if (isset($form_state['values']['credit_card']['recurring']['schedule_date'])) {
      $schedule_date = $form_state['values']['credit_card']['recurring']['schedule_date'];
    }

    $valid_schedule_types = commerce_iats_recurring_pane_schedule_types();
    if (!isset($valid_schedule_types[$schedule_type])) {
      form_error($form['credit_card']['recurring']['schedule_type'], t('Please select a valid schedule type.'));
      $valid = FALSE;
    }

    if (isset($schedule_date)) {
      $valid_schedule_dates = commerce_iats_recurring_pane_schedule_dates($schedule_type);
      if (!isset($valid_schedule_dates[$schedule_date])) {
        form_error($form['credit_card']['recurring']['schedule_date'], t('Please select a valid schedule date.'));
        $valid = FALSE;
      }
    }
  }

  return $valid;
}

/**
 * Implements hook_form_alter().
 *
 * Includes payment method update / delete callback methods.
 */
function commerce_iats_cardonfile_form_alter(&$form, &$form_state, $form_id) {
  if ((substr($form_id, -20) == 'cardonfile_card_form')
    || (substr($form_id, -22) == 'cardonfile_delete_form')) {
    $default_payment_method = TRUE;
    if (isset($form_state['card'])) {
      if (substr($form_state['card']->payment_method, 0, 12) == 'iats_ach_eft') {
        module_load_include('inc', 'commerce_iats_cardonfile', 'includes/commerce_iats_cardonfile.ach_eft');
        $default_payment_method = FALSE;
      }
    }

    if ($default_payment_method) {
      module_load_include('inc', 'commerce_iats_cardonfile', 'includes/commerce_iats_cardonfile.credit_card');
    }
  }
}

/**
 * Implements hook_menu_alter().
 *
 * Overrides the user's Card on File admin pages. Enables the display of
 * stored credit cards and stored bank accounts, rather than just credit
 * cards, which is the default behavior of Commerce Card on File.
 *
 * @see includes/commerce_iats_cardonfile.pages.inc
 */
function commerce_iats_cardonfile_menu_alter(&$items) {
  $items['user/%user/cards/%commerce_cardonfile']['page callback'] = 'commerce_iats_cardonfile_card_form_page';
  $items['user/%user/cards/%commerce_cardonfile']['file'] = 'includes/commerce_iats_cardonfile.pages.inc';
  $items['user/%user/cards/%commerce_cardonfile']['module'] = 'commerce_iats_cardonfile';

  $items['user/%user/cards/%commerce_cardonfile/delete']['page arguments'][0] = 'commerce_iats_cardonfile_delete_form';
  $items['user/%user/cards/%commerce_cardonfile/delete']['file'] = 'includes/commerce_iats_cardonfile.pages.inc';
  $items['user/%user/cards/%commerce_cardonfile/delete']['module'] = 'commerce_iats_cardonfile';
}

/**
 * Implements hook_views_default_views_alter().
 */
function commerce_iats_cardonfile_views_default_views_alter(&$views) {
  if (array_key_exists('commerce_card_on_file_user_cards', $views)) {
    $handler =& $views['commerce_card_on_file_user_cards']->display['default']->handler;

    /* Field: Commerce Card on File: Recurring */
    $handler->display->display_options['fields']['instance_default']['id'] = 'recurring';
    $handler->display->display_options['fields']['instance_default']['table'] = 'commerce_cardonfile';
    $handler->display->display_options['fields']['instance_default']['field'] = 'recurring';
    $handler->display->display_options['fields']['instance_default']['label'] = 'Recurring';
    $handler->display->display_options['fields']['instance_default']['not'] = 0;
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function commerce_iats_cardonfile_cron_queue_info() {
  $cron_name = variable_get('commerce_iats_cardonfile_transactions_cron_name',
    COMMERCE_IATS_CARDONFILE_TRANSACTIONS_CRON);

  $queues[$cron_name] = array(
    'worker callback' => 'commerce_iats_cardonfile_process_queued_transaction',
    'time' => 60,
  );
  return $queues;
}

/**
 * Implements hook_cron().
 *
 * Retrieves daily transaction reports from iATS.
 * Updates recurring payment transactions.
 */
function commerce_iats_cardonfile_cron() {
  commerce_iats_cardonfile_populate_transaction_queue();
}

/**
 * Populates a queue of payment transactions from transaction reports.
 *
 * Used to update Commerce iATS with transactions processed outside of
 * the module, e.g. recurring payments.
 */
function commerce_iats_cardonfile_populate_transaction_queue() {
  $cron_name = variable_get('commerce_iats_cardonfile_transactions_cron_name',
    COMMERCE_IATS_CARDONFILE_TRANSACTIONS_CRON);

  $queue = DrupalQueue::get($cron_name);
  $queue->createQueue();

  // TODO: Account for custom payment method rule name.
  $payment_method = commerce_payment_method_instance_load('iats_credit_card_customer_code|commerce_payment_iats_credit_card_customer_code');

  if (($payment_method === FALSE) || empty($payment_method['settings'])) {
    // Payment method has not been set up. Cannot retrieve transaction reports.
    return;
  }

  // Get the API service.
  $iats = commerce_iats_get_service('ReportLink', $payment_method);

  $request = array(
    'date' => commerce_iats_get_formatted_date(mktime(0, 0, 0, date('n'), date('j'), date('Y'))),
  );

  // Get successful credit card transactions.
  $credit_card_success_response = $iats->getCreditCardJournal($request);

  if (is_array($credit_card_success_response)) {
    foreach ($credit_card_success_response as $transaction) {
      $queue->createItem($transaction);
    }
  }

  // Get successful ACH/EFT transactions.
  $ach_eft_success_response = $iats->getACHEFTJournal($request);

  if (is_array($ach_eft_success_response)) {
    foreach ($ach_eft_success_response as $transaction) {
      $queue->createItem($transaction);
    }
  }

  // Get rejected credit card transactions.
  $credit_card_reject_response = $iats->getCreditCardReject($request);

  if (is_array($credit_card_reject_response)) {
    foreach ($credit_card_reject_response as $transaction) {
      $queue->createItem($transaction);
    }
  }

  // Get rejected ACH/EFT transactions.
  $ach_eft_reject_response = $iats->getACHEFTReject($request);

  if (is_array($ach_eft_reject_response)) {
    foreach ($ach_eft_reject_response as $transaction) {
      $queue->createItem($transaction);
    }
  }
}

/**
 * Processes a transaction retrieved from the iATS Payments Reports API.
 *
 * Used to create Commerce records of recurring payment transactions
 * processed by iATS Payments.
 * Looks up the initial recurring payment transaction and adds a new
 * transaction to the original order.
 *
 * @param array $data
 *   The transaction data from the iATS Payments Reports API.
 *
 * @return bool
 *   TRUE if a new transaction was created.
 */
function commerce_iats_cardonfile_process_queued_transaction($data) {
  $transaction_type = $data['TNTYP'];
  $customer_code = $data['CST']['CSTC'];
  $transaction_id = $data['TNID'];
  $amount = $data['AMT'];
  $result_code = $data['RST'];

  $transaction_status = (substr($result_code, 0, 2) == 'OK') ?
    COMMERCE_PAYMENT_STATUS_SUCCESS : COMMERCE_PAYMENT_STATUS_FAILURE;

  if ($transaction_type == 'CreditCard') {
    $payment_method = 'iats_credit_card';
    $instance_id = 'iats_credit_card|commerce_payment_iats_credit_card';
  }
  elseif ($transaction_type == 'ACHEFT') {
    $payment_method = 'iats_ach_eft';
    $instance_id = 'iats_ach_eft|commerce_payment_iats_ach_eft';
  }
  else {
    // Unknown transaction type.
    watchdog('commerce_iats', 'Attempting to process unknown queued transaction type: @type',
      array(
        '@type' => $transaction_type,
      ),
      WATCHDOG_ERROR);
    return FALSE;
  }

  $remote_id = $transaction_id . '|' . $customer_code;

  $query = new EntityFieldQuery();
  $existing_transaction_result = $query
    ->entityCondition('entity_type', 'commerce_payment_transaction')
    ->propertyCondition('remote_id', $remote_id)
    ->execute();

  if (isset($existing_transaction_result['commerce_payment_transaction'])) {
    watchdog('commerce_iats', 'Already processed transaction @remote_id',
      array(
        '@remote_id' => $remote_id,
      ),
      WATCHDOG_NOTICE);
    return FALSE;
  }

  $initial_remote_id = COMMERCE_IATS_RECURRING_PAYMENT_TRANSACTION_ID . '|' . $customer_code;
  $query = new EntityFieldQuery();
  $initial_transaction_result = $query
    ->entityCondition('entity_type', 'commerce_payment_transaction')
    ->propertyCondition('remote_id', $initial_remote_id)
    ->execute();
  if (isset($initial_transaction_result['commerce_payment_transaction'])) {
    $initial_transaction_entity_ids = array_keys($initial_transaction_result['commerce_payment_transaction']);
    $initial_transaction_entities = entity_load('commerce_payment_transaction', $initial_transaction_entity_ids);
    $initial_transaction = current($initial_transaction_entities);
  }

  if (isset($initial_transaction)) {
    $transaction = new stdClass();
    $transaction->uid = $initial_transaction->uid;
    $transaction->order_id = $initial_transaction->order_id;
    $transaction->payment_method = $payment_method;
    $transaction->instance_id = $instance_id;
    $transaction->remote_id = $remote_id;
    $transaction->message = $result_code;
    $transaction->message_variables = array();
    $transaction->amount = $amount;
    $transaction->currency_code = '';
    $transaction->status = $transaction_status;
    $transaction->remote_status = '';
    $transaction->payload = array();

    $result = commerce_payment_transaction_save($transaction);

    return ($result == SAVED_NEW);
  }
  return FALSE;
}

/**
 * Gets base settings form fields for customer code based payment methods.
 *
 * @param array $settings
 *   Form field default values array.
 *
 * @return array
 *   Base fields for settings form.
 */
function commerce_iats_cardonfile_customer_code_settings_form_base(array $settings = NULL) {
  $form = commerce_iats_credit_card_settings_form_base($settings);

  $payment_methods = commerce_payment_methods();

  $rules = rules_config_load_multiple(FALSE);

  $rules_map = array();

  foreach ($rules as $rule_name => $rule) {
    if ($rule->active) {
      foreach ($rule->actions() as $action) {
        $action_settings = $action->settings;
        continue;
      }
      if (isset($action_settings['payment_method']['method_id'])) {
        $method_id = $action_settings['payment_method']['method_id'];
        $rules_map[$method_id] = $method_id . '|' . $rule_name;
      }
    }
  }

  $payment_method_options = array(
    '' => 'N/A',
  );

  foreach ($payment_methods as $method_id => $method) {
    if (isset($rules_map[$method_id])) {
      $payment_method_options[$rules_map[$method_id]] = $method['title'];
    }
  }

  $form['cardonfile_payment_method'] = array(
    '#type' => 'select',
    '#title' => t('Card on File payment method instance ID'),
    '#description' => 'Specify an alternative payment method to use to process Card on File transactions for cards created by this payment method.',
    '#options' => $payment_method_options,
    '#default_value' => (isset($settings['cardonfile_payment_method'])) ?
        $settings['cardonfile_payment_method'] : '',
  );

  $form['allow_recurring'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow recurring payments through iATS Payments'),
    '#default_value' => (isset($settings['allow_recurring'])) ?
    $settings['allow_recurring'] : '',
  );

  return $form;
}

/**
 * Determines if a card on file record can be created.
 *
 * Valid customer codes are greater than three characters in length.
 *
 * @param string $customer_code
 *   The iATS Customer Code to create a card on file record for.
 *
 * @return bool
 *   TRUE if the card on file record can be created.
 */
function commerce_iats_cardonfile_can_create_cardonfile($customer_code) {
  if (!is_string($customer_code)) {
    return FALSE;
  }
  if (strlen($customer_code) < 3) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Creates a new card on file record for the user making this transaction.
 *
 * @param object $order
 *   The order processed during this transaction.
 * @param array $payment_method
 *   The payment method used during this transaction.
 * @param array $card_data
 *   Array of credit card data.
 * @param string $customer_code
 *   The iATS customer code returned by the iATS API following a transaction
 *   that created a new customer code.
 * @param string $card_type
 *   The credit card type used during this transaction.
 *   ie. visa, mc
 *
 * @return bool
 *   TRUE or FALSE indicating success of saving card on file.
 */
function commerce_iats_cardonfile_create_cardonfile($order, array $payment_method, array $card_data, $customer_code, $card_type) {
  if (!empty($payment_method['settings']['cardonfile_payment_method'])) {
    $payment_method_parts = explode('|', $payment_method['settings']['cardonfile_payment_method']);
    $payment_method_id = $payment_method_parts[0];
    $payment_method_instance_id = $payment_method['settings']['cardonfile_payment_method'];
  }
  else {
    $payment_method_id = $payment_method['method_id'];
    $payment_method_instance_id = $payment_method['instance_id'];
  }

  $card_on_file = commerce_cardonfile_new();
  $card_on_file->uid = $order->uid;
  $card_on_file->payment_method = $payment_method_id;
  $card_on_file->instance_id = $payment_method_instance_id;
  $card_on_file->remote_id = $customer_code;
  $card_on_file->card_type = !empty($card_type) ? strtolower($card_type) : 'card';
  $card_on_file->card_name = !empty($billing_address['name_line']) ? $billing_address['name_line'] : '';
  $card_on_file->card_number = substr($card_data['number'], -4);
  $card_on_file->card_exp_month = $card_data['exp_month'];
  $card_on_file->card_exp_year = $card_data['exp_year'];
  $card_on_file->status = 1;
  $card_on_file->instance_default = $card_data['default'];

  if ($payment_method['settings']['allow_recurring'] &&
    isset($order->data['recurring']) && !empty($order->data['recurring']['amount'])) {
    $card_on_file->recurring = TRUE;
    // A recurring payment card cannot be used as the user's default card.
    $card_on_file->instance_default = FALSE;
  }

  // Save and log the creation of the new card on file.
  if (commerce_cardonfile_save($card_on_file) !== FALSE) {
    watchdog('commerce_iats',
      'iATS Customer Code @customer_code created and saved to user @uid.',
      array(
        '@customer_code' => (string) $customer_code,
        '@uid' => $order->uid,
      )
    );

    if ($card_on_file->recurring) {
      $card_on_file_recurring = commerce_iats_cardonfile_recurring_new();
      $card_on_file_recurring->card_id = $card_on_file->card_id;
      $card_on_file_recurring->amount = $order->data['recurring']['amount'];
      $card_on_file_recurring->schedule_type = $order->data['recurring']['schedule_type'];
      $card_on_file_recurring->schedule_date = $order->data['recurring']['schedule_date'];
      commerce_iats_cardonfile_recurring_save($card_on_file_recurring);
    }

    return TRUE;
  }
  else {
    watchdog('commerce_iats',
      'iATS Customer Code @customer_code could not be saved to user @uid.',
      array(
        '@customer_code' => (string) $customer_code,
        '@uid' => $order->uid,
      ),
      WATCHDOG_ERROR);

    return FALSE;
  }
}

/**
 * Returns an array of payment method callbacks, based in a payment method type.
 *
 * @param string $payment_method_type
 *   The payment method type to use in callback method names.
 *   Currently 'credit_card' or 'ach_eft'
 *
 * @return array
 *   Array of payment method callbacks.
 */
function commerce_iats_cardonfile_payment_method_callbacks($payment_method_type) {
  $card_on_file_callbacks = array(
    // Called when card is charged. Note: Only the Commerce Recurring module
    // calls this method automatically. When using just the Commerce module,
    // we call this method manually via a form submit handler.
    'charge callback' => 'commerce_iats_cardonfile_' . $payment_method_type . '_charge_callback',
    // Called when card on file is updated.
    'update callback' => 'commerce_iats_cardonfile_' . $payment_method_type . '_update',
    // Called when card on file is deleted.
    'delete callback' => 'commerce_iats_cardonfile_' . $payment_method_type . '_delete',
  );

  return $card_on_file_callbacks;
}

/**
 * Loads a Commerce iATS Card on File Recurring entity by ID.
 *
 * @param int $card_id
 *   The ID of the Card on File entity.
 *
 * @return Mixed
 *   Array containing the specified entity data or FALSE if not found.
 */
function commerce_iats_cardonfile_recurring_load($card_id) {
  return entity_load_single('commerce_iats_cardonfile_recurring', $card_id);
}

/**
 * Returns an initialized Commerce iATS Card on File Recurring entity.
 *
 * @param array $values
 *   Custom entity values to use, in addition to standard values.
 *
 * @return Mixed
 *   Instance of the entity or FALSE on failure.
 */
function commerce_iats_cardonfile_recurring_new(array $values = array()) {
  $values += array(
    'card_id' => NULL,
    'amount' => 0,
    'schedule_type' => '',
    'schedule_date' => '',
  );

  return entity_create('commerce_iats_cardonfile_recurring', $values);
}

/**
 * Saves a Commerce iATS Card on File Recurring entity.
 *
 * @param object $recurring_data
 *   A Commerce iATS Card on File Recurring entity instance.
 *
 * @return mixed
 *   Constants SAVED_NEW, SAVED_UPDATED or boolean FALSE on failure.
 */
function commerce_iats_cardonfile_recurring_save($recurring_data) {
  return entity_save('commerce_iats_cardonfile_recurring', $recurring_data);
}

/**
 * Card on File card charge callback function.
 *
 * @param array $payment_method
 *   The payment method used during this transaction.
 * @param array $card_data
 *   Array of credit card data.
 * @param object $order
 *   The order processed during this transaction.
 * @param array $charge
 *   The transaction charge.
 *
 * @return boolean
 *   TRUE on successful transaction.
 */
function commerce_iats_cardonfile_credit_card_charge_callback($payment_method, $card_data, $order, $charge = NULL) {
  $result = commerce_iats_process_payment($payment_method, $card_data, $order, $charge, 'commerce_iats_cardonfile_credit_card_charge');

  // Result will be an array on success and FALSE on failure. Convert to bool.
  return ($result !== FALSE);
}
