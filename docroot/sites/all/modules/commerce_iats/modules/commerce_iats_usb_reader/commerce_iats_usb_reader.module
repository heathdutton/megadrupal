<?php

/**
 * @file
 * Adds support for an encrypted USB card reader to Commerce iATS.
 */

define('COMMERCE_IATS_USB_READER_DELIMITER', '|@|');

/**
 * Implements hook_menu().
 */
function commerce_iats_usb_reader_menu() {
  $items = array();

  $items['admin/commerce/iats/users'] = array(
    'page callback' => 'commerce_iats_usb_reader_users_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Removes amount field from customer code payment method.
 */
function commerce_iats_usb_reader_form_commerce_payment_order_transaction_add_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form_state['payment_method']) && ($form_state['payment_method']['method_id'] == 'iats_credit_card_customer_code')) {
    $form['payment_terminal']['amount']['#access'] = FALSE;
    $form['payment_terminal']['currency_code']['#access'] = FALSE;
  }
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_iats_usb_reader_commerce_payment_method_info() {
  $payment_methods = array();

  // Add an admin-only payment method to process a credit card and create a
  // customer code without using Card on File.
  $payment_methods['iats_credit_card_customer_code_process'] = array(
    'base' => 'commerce_iats_usb_reader_credit_card_customer_code_process',
    'title' => t('iATS Payments: Admin process credit card and create customer code'),
    'short_title' => t('iATS Admin process credit card and create customer code'),
    'display_title' => t('Admin process credit card and create customer code'),
    'description' => t('Integrates the iATS CustomerLink webservice for the creation of credit card customer codes.'),
    'file' => 'includes/commerce_iats_usb_reader.credit_card_customer_code_process.inc',
    'checkout' => 0,
  );

  return $payment_methods;
}

/**
 * Implements hook_commerce_payment_method_info_alter().
 *
 * Overrides payment methods for use with Card on File.
 */
function commerce_iats_usb_reader_commerce_payment_method_info_alter(&$payment_methods) {
  // Update credit card payment method.
  $payment_methods['iats_credit_card']['base'] = 'commerce_iats_usb_reader_credit_card';
  $payment_methods['iats_credit_card']['file'] = 'modules/commerce_iats_usb_reader/includes/commerce_iats_usb_reader.credit_card.inc';

  // Update credit card customer code creation payment method.
  $payment_methods['iats_credit_card_customer_code']['base'] = 'commerce_iats_usb_reader_credit_card_customer_code';
  $payment_methods['iats_credit_card_customer_code']['file'] = 'modules/commerce_iats_usb_reader/includes/commerce_iats_usb_reader.credit_card_customer_code.inc';
}

/**
 * Returns an array of USB card reader types.
 *
 * @return array
 *   Array of USB card reader IDs mapped to names.
 */
function commerce_iats_usb_reader_types() {
  $types = array(
    '00' => 'IDTech SecureMag USB swiper',
    '02' => 'MagTek Dynamag USB swiper',
  );

  return $types;
}

/**
 * Extract the card type and partial number from an encrypted string.
 *
 * @param string $encrypted_string
 *   The encrypted string from a USB card reader.
 * @param array $valid_types
 *   An array of valid credit card types.
 *
 * @return array
 *   The extracted credit card data.
 */
function commerce_iats_usb_reader_parse_card_data_from_encrypted_string($encrypted_string, $valid_types) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  $matches = NULL;

  // Match pattern:
  // ;4222********2220=
  preg_match("/;\d{4}\*+\d{4}\=/", $encrypted_string, $matches);

  if (empty($matches)) {
    // Match pattern:
    // ;4222222222222220=
    preg_match("/;\d{16}\=/", $encrypted_string, $matches);
  }

  $card_number = substr(substr($matches[0], 1), 0, -1);

  $card_data = array(
    'type' => commerce_payment_validate_credit_card_type($card_number, $valid_types),
    'number' => $card_number,
  );

  return $card_data;
}

function commerce_iats_usb_reader_create_new_user_cardonfile($order, $payment_method, $card_data, $customer_code, $user_data) {
  $user_data['pass'] = user_password(8);
  $user_data['status'] = 1;
  $user_data['init'] = $user_data['mail'];
  $user_data['roles'] = array(
    DRUPAL_AUTHENTICATED_RID => 'authenticated user',
  );

  $user = user_save('', $user_data);

  if ($user !== FALSE) {
    commerce_iats_usb_reader_create_existing_user_cardonfile($order, $payment_method, $card_data, $customer_code, $user->uid);
  }
}

function commerce_iats_usb_reader_create_existing_user_cardonfile($order, $payment_method, $card_data, $customer_code, $user_id) {
  $order->uid = $user_id;

  // Expiration date cannot be extracted from the encrypted data, so the next
  // best option is to set it to the end of the current year.
  $card_data['exp_month'] = 12;
  $card_data['exp_year'] = date('Y');

  // Don't set as default card. This option should be left to the user.
  $card_data['default'] = 0;

  commerce_iats_cardonfile_create_cardonfile($order, $payment_method, $card_data, $customer_code, $card_data['type']);
}

/**
 * Callback used to look up users by email address.
 *
 * @param string $string
 *   The email address to look up. May be a partial email address.
 *
 * @return array
 *   Email addresses and user IDs matching the given string.
 *   Provided in the format: "test@example.org [1]"
 */
function commerce_iats_usb_reader_users_autocomplete($string) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'user')
    ->propertyCondition('mail', $string, 'CONTAINS')
    ->range(0, 10);

  $users = array();

  $result = $query->execute();
  if (isset($result['user'])) {
    $entity_ids = array_keys($result['user']);
    $entities_data = entity_load('user', $entity_ids);

    if (!empty($entities_data)) {
      foreach ($entities_data as $id => $entity) {
        $users[$entity->mail . ' [' . $id . ']'] = $entity->mail;
      }
    }
  }

  drupal_json_output($users);
}

/**
 * Parses the entity ID from an autocomplete result retrieved from this module.
 *
 * @param string $result
 *   The autocomplete result in the format: "string [entity ID]"
 *
 * @return mixed
 *   The entity ID or NULL if not found.
 */
function commerce_iats_usb_reader_parse_entity_id_from_autocomplete_result($result) {
  $matches = NULL;

  preg_match("/\[(\d+)\]$/", $result, $matches);

  return (isset($matches[1])) ? $matches[1] : NULL;
}
