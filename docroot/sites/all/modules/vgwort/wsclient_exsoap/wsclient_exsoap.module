<?php

/**
 * @file
 * Web service client SOAP support.
 */

/**
 * Implements hook_wsclient_endpoint_types().
 */
function wsclient_exsoap_wsclient_endpoint_types() {
  return array(
    'exsoap' => array(
      'label' => t('NUSOAP'),
      'class' => 'WSClientEXSOAPEndpoint',
    ),
  );
}

class EXSoapClient extends SOAPClient {
	 public function __doRequest ( $request, $location, $action, $version, $one_way = NULL ) {
	 	  $response = parent::__doRequest ( $request , $location, $action, $version, $one_way);
	 		return $response;
	 }
}

/**
 * A remote endpoint type for invoking SOAP services.
 */
class WSClientEXSOAPEndpoint extends WSClientSOAPEndpoint {

  public function client() {
    if (!isset($this->client)) {
      $options['exceptions'] = TRUE;
      // Handle Basic HTTP authentication.
      if (!empty($this->service->settings['authentication']['basic'])) {
        $this->service->settings['options']['login'] = $this->service->settings['authentication']['basic']['username'];
        $this->service->settings['options']['password'] = $this->service->settings['authentication']['basic']['password'];
      }
      if (!empty($this->service->settings['options'])) {
        $options += $this->service->settings['options'];
      }
      try {
        $this->client = new ExSoapClient($this->url, $options);
      }
      catch (SoapFault $e) {
        throw new WSClientException('Error initializing SOAP client for service %name', array('%name' => $this->service->name));
      }
    }
    return $this->client;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wsclient_exsoap_form_wsclient_service_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'wsclient_exsoap_wsclient_service_form_submit';
  $form['#validate'][] = 'wsclient_exsoap_wsclient_service_form_validate';
}

/**
 * Validation callback to check if the SOAP service URL points to a valid WSDL
 * file.
 */
function wsclient_exsoap_wsclient_service_form_validate($form, $form_state) {
  $service = $form_state['wsclient_service'];
  if ($form_state['values']['type'] == 'exsoap') {
    // The url has to point to a valid WSDL file.
    try {
      // If initializing the SOAPClient succeeds we're good, otherwise we catch
      // the exception below and suppress any further warnings.
      // WARNING: if you have the xdebug PHP module enabled this can cause a
      // fatal error on invalid WSDL files (instead of a catchable SoapFault
      // exception).
      // xdebug_disable();
      @$endpoint = new EXSOAPClient($form_state['values']['url']);
    }
    catch (SoapFault $e) {
      form_set_error('url', t('Error parsing the WSDL file: %message', array('%message' => $e->getMessage())));
    }
  }
}

/**
 * Submit callback for the web service form to populate operations and data
 * types of the new SOAP service.
 */
function wsclient_exsoap_wsclient_service_form_submit($form, &$form_state) {
  if ($form_state['values']['type'] == 'exsoap' && $form_state['op'] == 'add') {
    $service = $form_state['wsclient_service'];
    $endpoint = $service->endpoint();
    $endpoint->initializeMetadata();
    $service->save();
    rules_clear_cache();
    $service->clearCache();
    drupal_set_message(t('Operations and data types of the SOAP service have been imported automatically. If the service expects data types with properties as lists (multiple values for the property), please check the multiple flag on those properties. This cannot be auto-detected at the moment.'));
  }
}
