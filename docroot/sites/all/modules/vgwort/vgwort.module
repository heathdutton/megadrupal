<?php
define('VGWORT_STATUS_NEW', 0);
define('VGWORT_STATUS_ASSIGNED', 1);
define('VGWORT_STATUS_PUBLISHED', 2);
define('VGWORT_STATUS_ERROR', 3);
define('VGWORT_STATUS_REMOVED', 5);
define('VGWORT_THRESHOLD', 10);
define('VGWORT_IMPORT', 100);
// Three months
define('VGWORT_TIME_TO_REPORT', (3600 * 24 * 90));

include_once 'vgwort.defaults.inc';
function vgwort_menu() {
  $items = array();
  $items['node/%node/vgwort'] = array(
    'page callback' => 'vgwort_node_qa_check',
    'page arguments' => array(1),
    'title' => t('VGWort QA'),
    'access arguments' => array('administer vgwort'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'vgwort.pages.inc',
  );
  $items['admin/reports/vgwort'] = array(
    'page callback' => 'vgwort_report',
    'title' => t('VGWort Report'),
    'access arguments' => array('view vgwort report'),
    'file' => 'vgwort.pages.inc',
  );
  $items['admin/reports/vgwort/summary'] = array(
    'page callback' => 'vgwort_report_entities',
    'title' => t('VGWort Report'),
    'access arguments' => array('view vgwort report'),
    'file' => 'vgwort.pages.inc',
  );
  $items['admin/config/services/vgwort'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vgwort_admin_settings'),
    'title' => t('VGWort Settings'),
    'access arguments' => array('administer vgwort'),
    'file' => 'vgwort.admin.inc',
  );
  $items['admin/config/services/vgwort/import'] = array(
    'page callback' => 'vgwort_cron',
    'access arguments' => array('administer vgwort'),
    'file' => 'vgwort.functions.inc',
  );
  return $items;
}

function vgwort_permission() {
  return array(
    'administer vgwort' => array(
      'title' => t('Administer VGWort'),
      'description' => t('Perform administration tasks for vgwort.'),
    ),
    'view vgwort report' => array(
      'title' => t('View VGWort reports'),
      'description' => t('Perform administration tasks for vgwort.'),
    ),
  );
}

function vgwort_entity_info_alter(&$entity_info) {
  foreach ($entity_info as $entity_type => $info) {
    foreach ($info['bundles'] as $bundle_name => $binfo) {
      if (vgwort_is_type_enabled($entity_type, $bundle_name)) {
        $entity_info[$entity_type]['view modes']['vgwort'] = array(
          'label' => t('VGWort Display'),
          'custom settings' => TRUE,
        );
      }
    }
  }
  //   $entity_info['node']['view modes']['another_teaser'] = array(
  //     'label' => t('Another teaser'),
  //     'custom settings' => TRUE,
  //   );
}

function vgwort_entity_view_alter(&$build, $type) {
  if ($build['#view_mode'] == 'vgwort') {
    unset($build['#contextual_links']);
    $build['links']['#access'] = FALSE;
    $build['#post_render'][] = 'vgwort_sanitize_content';
  }
}

function vgwort_sanitize_content($content, $element) {
  $content = filter_xss($content, array('h1', 'h2', 'h3', 'blockquote', 'div', 'strong', 'i', 'p'));
  return drupal_html_to_text($content);
}

/**
 * Implements hook_field_attach_form().
 */
function vgwort_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  $bundle = vgwort_extract_bundle($entity_type, $entity);
  if (!vgwort_is_type_enabled($entity_type, $bundle)) {
    return FALSE;
  }
  $result = db_select('vgwort', 'v')->fields('v')->condition('test', variable_get('vgwort_test', 0))->condition('status', 0)->execute()->fetchAll();
  if ($entity_type !== 'node') {
    return;
  }
  $data = vgwort_get_data($entity, $entity_type);
  $form['vgwort'] = array(
    '#type' => 'fieldset',
    '#title' => t('VGWort Mark'),
    '#group' => 'additional_settings',
    'vgwort' => array(
      '#type' => 'checkbox',
      '#title' => t('Enable vgwort mark'),
      '#description' => t('You need 1800 chars in the article and this article must be published'),
      '#return_value' => 1,
    ),
    'vgwort_help' => array(
      '#markup' => t('There are @count marks in the database', array('@count' => count($result))),
    ),
  );
  if ($data !== FALSE) {
    switch ($data['status']) {
      case VGWORT_STATUS_ERROR:
        $data['status'] = array(
          'data' => $data['status'],
          'style' => 'background-color : red; color : white',
        );
        break;

      case VGWORT_STATUS_PUBLISHED:
        $data['status'] = array(
          'data' => $data['status'],
          'style' => 'background-color : green; color : white',
        );
        break;

      case VGWORT_STATUS_ASSIGNED:
        $data['status'] = array(
          'data' => $data['status'],
          'style' => 'background-color : yellow',
        );
        break;
    }
    $form['vgwort']['vgwort'] = array(
      '#markup' => theme('table', array('header' => array_keys($data), 'rows' => array($data))),
    );
  }
}

function vgwort_get_data($entity, $entity_type) {

  $entity_id = @array_shift(entity_extract_ids($entity_type, $entity));
  $result = db_query('SELECT * FROM {vgwort} WHERE entity_id = :etid AND entity_type = :type',
    array(':etid' => $entity_id, ':type' => $entity_type)
  );
  $result = $result->fetchAll();

  if (isset($result[0]) && ISSET($result[0]->mid) && $result[0]->status == VGWORT_STATUS_ERROR) {
    return FALSE;
  }
  if (count($result) == 0) {
    return FALSE;
  }
  else return (array) array_shift($result);
}

function vgwort_wsclient_service_load($services) {
  foreach ($services as $service_id => & $service) {
    if (strrpos($service_id, 'vgwort_service_') !== 0) {
      continue;
    }
    $service->settings['authentication']['basic']['username'] = variable_get('vgwort_user', '');
    $service->settings['authentication']['basic']['password'] = variable_get('vgwort_password', '');
    unset($service);
  }
}

function vgwort_entity_insert($entity, $type) {
  vgwort_entity_update($entity, $type);
}

function vgwort_entity_update($entity, $type) {
  if ('node' !== $type) {
    return;
  }
  $vgwort_data = vgwort_get_data($entity, $type);
  if ($vgwort_data !== FALSE) {
    return;
  }
  if (isset($entity->vgwort) && $entity->vgwort != 1) {
    return;
  }
  $status = module_invoke_all('vgwort_check', $type, $entity);
  $vgwort_stat = TRUE;
  if (count($status) > 0) {
    $vgwort_stat = FALSE;
    foreach ($status as $k => $s) {
      drupal_set_message(t('Could not ad vgwort mark. Reason: @reason', array('@reason' => $s['message'])), 'warning');
    }
  }
  else {
    module_load_include('inc', 'vgwort', 'vgwort.functions');
    $entity_id = @array_shift(entity_extract_ids($type, $entity));
    $pixel = vgwort_get_next_pixel($type, $entity_id);
    if (!$pixel || !is_array($pixel) || !isset($pixel['private'])) {
      drupal_set_message("Could not get pixel code for post");
      return;
    }
  }
}

function vgwort_vgwort_check($entity_type, $entity) {
  $messages = array();
  $content = entity_view($entity_type, array($entity), 'vgwort');
  $content = array_shift($content[$entity_type]);
  $content = render($content);
  $length = vgwort_count_chars($content);
  if (1799 > $length) {
    $messages[] = array('message' => t('Article length must exceed 1800 chars. Now this article length is @count chars', array('@count' => $length)));
  }
  return $messages;
}

function vgwort_publish_entity($entity_type, $entity) {

  $data = vgwort_get_data($entity, $entity_type);
  if (!$data || !is_array($data) || $data['status'] != VGWORT_STATUS_ASSIGNED) {
    return;
  }

  module_load_include('inc', 'vgwort', 'vgwort.functions');
  module_load_include('inc', 'vgwort', 'vgwort_message.class');

  $message = new VGWort_Message($data['private']);

  $link = entity_uri($entity_type, $entity);

  $options = $link['options'];
  $options += array(
    'absolute' => TRUE,
    'alias' => TRUE,
  );
  $link = url($link['path'], $options);

  $message->addWebrange($link);

  $context = array('entity_type' => $entity_type, 'entity' => $entity);
  drupal_alter('vgwort_message', $message, $context);


  if (vgwort_publish_message($message, $entity_type, $entity)) {
    drupal_set_message(t('Publish article to VGWort'));
    vgwort_set_status($data['private'], VGWORT_STATUS_ASSIGNED);
  }
  else {
    drupal_set_message(t('Problem publish article to VGWort'), 'warning');
  }
}

function vgwort_vgwort_message_alter($message, $context) {
  extract($context);
  if ($entity_type == 'node') {
    $render_array = node_view($entity, 'vgwort');
    $message->setPlainText(render($render_array));
    $message->setShortText(render($entity->title));

    $author = user_load($entity->uid);
    $name = $author->name;
    $name = explode(" ", $name);
    $message->addAuthor($name[0], $name[1]);
  }
}

function vgwort_entity_load($entities, $type) {
  // Gather our extra data for each of these nodes.
  if ($type != 'node') {
    return;
  }
  $result = db_query('SELECT * FROM {vgwort} WHERE entity_id IN(:nids) AND entity_type = :type',
    array(':nids' => array_keys($entities), ':type' => 'node')
  );
  // Add our extra data to the node objects.
  foreach ($result as $record) {
    $entities[$record->entity_id]->vgwort = (array) $record;
  }
}

function vgwort_count_chars($content) {
  return mb_strlen(preg_replace("/\\015\\012|\\015|\\012| {2,}|\[[a-zA-Z0-9\_=\"\' \/]*\]/", "", strip_tags(html_entity_decode($content))));
}

function vgwort_entity_view($entity, $type, $view_mode) {
  $bundle = vgwort_extract_bundle($type, $entity);
  if (!vgwort_is_type_enabled($type, $bundle)) {
    return FALSE;
  }
  if (isset($entity->vgwort)) {
    $entity->content['vgwort_display'] = array(
      '#public' => $entity->vgwort['public'],
      '#domain' => $entity->vgwort['domain'],
      '#weight' => 10000,
      '#theme' => 'vgwort_pixel',
    );
  }
}

function vgwort_entity_delete($entity, $type) {
  db_update('vgwort')->fields(array('status' => VGWORT_STATUS_REMOVED))->condition('entity_type', $type)->condition('entity_id', $etid)->execute();
}

function vgwort_is_type_enabled($entity_type, $bundle = FALSE) {
  if ($bundle === FALSE) {
    $entity_type = $bundle;
  }
  $bundles = variable_get('vgwort_bundles', array());
  $bundles = array_filter($bundles);
  return in_array($entity_type . '|' . $bundle, $bundles);
}

function vgwort_get_type_enabled() {
  $bundles = variable_get('vgwort_bundles', array());
  $bundles = array_filter($bundles);
  return $bundles;
}

function vgwort_extract_bundle($entity_type, $entity) {
  $info = entity_get_info($entity_type);
  if (is_array($info) && isset($info['bundle keys'])) {
    $key = $info['bundle keys']['bundle'];
    return $entity->{$key};
  }
  return $entity_type;
}

function vgwort_cron() {
  module_load_include('inc', 'vgwort', 'vgwort.functions');
  $count = vgwort_count_unused_pixels();
  if (vgwort_count_unused_pixels() < VGWORT_THRESHOLD) {
    try {
      vgwort_import_codes();
      if ( !drush_is_cli()) {
        drupal_goto(drupal_get_destination());
      }
    }
    catch (Exception $ex) {
      drupal_set_message(t('An error has occured'));
    }
  }
}

function vgwort_theme($existing, $type, $theme, $path) {
  return array(
    'vgwort_pixel' => array(
      'variables' => array(
        'public' => NULL,
        'domain' => NULL,
      ),
    ),
  );
}

function theme_vgwort_pixel($vars) {
  return theme('image', array('width' => 1, 'height' => 1, 'path' => 'http://' . $vars['domain'] . '/na/' . $vars['public']));
}

function vgwort_field_extra_fields() {
  $extra['node']['article'] = array(
    'display' => array(
      'vgwort_display' => array(
        'label' => t('VGWort mark'),
        'description' => t('Display VGWort mark'),
        'weight' => 0,
      ),
    ),
  );
  return $extra;
}

/**
 * Implementation of hook_views_api().
 */
function vgwort_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'vgwort') . '/views',
  );
}

