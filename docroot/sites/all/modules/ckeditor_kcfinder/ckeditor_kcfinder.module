<?php

/**
 * Implements hook_menu().
 */
function ckeditor_kcfinder_menu() {

  // Will hold out menu items that will be returned at the end of this function.
  $items = array();

  // Define the menu item used for configuring this module and KCFinder.
  $items['admin/config/content/ckeditor_kcfinder'] = array(
    'title' => t('KCFinder'),
    'description' => t('Configure KCFinder.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ckeditor_kcfinder_form'),
    'access arguments' => array('administer kcfinder'),
  );

  // Return our custom menu items to Drupal.
  return $items;
}

/**
 * Implements hook_permission().
 */
function ckeditor_kcfinder_permission() {
  return array(
    // This permission is actually hard coded in KCFinder's drupal integration file.
    // See: KCFinder/integration/drupal.php
    'access kcfinder' => array(
      'title' => t('Access KCFinder'),
      'description' => t('Allows a user to browse and upload files via KCFinder.'),
      // Let the permission administrator know this potential security concerns.
      'restrict access' => TRUE,
    ),
    // Define the permission to use for configuring KCFinder.
    'administer kcfinder' => array(
      'title' => t('Manage KCFinder Configuration'),
      'description' => t('Allow a user to manage the KCFinder settings such as path and URL settings.'),
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function ckeditor_kcfinder_libraries_info() {
  // Tell the Libraries module about our custom library for KCFinder.
  return array(
    // Defined the expected library name. (folder in the libraries directory)
    'kcfinder' => array(
      'name' => t('KCFinder'),
      // Easiest just to provide the GitHub repo for this info.
      'vendor url' => 'https://github.com/sunhater/kcfinder',
      // Give the user a place to fetch the latest releases.
      'download url' => 'https://github.com/sunhater/kcfinder/releases',
      'version arguments' => array(
        // It'll be easiest to get the version from the packaged compose.json file.
        'file' => 'composer.json',
        // Pattern to parse the version from the composer.json file.
        'pattern' => '/"version"[^"]+"([^"]+)"/',
      ),
      'files' => array(
        'php' => array(
          // Most of the work is done by the JS we'll be adding to th CKEditor.
          // Just stub out the main file of the KCFinder library to have at least one entry.
          'browser.php'
        ),
      ),
    ),
  );
}

/**
 * The "ckeditor_kcfinder_form" callback that builds the actual form.
 * Used to administer the KCFinder configs.
 *
 * @param array $form The drupal Form that we'll be building.
 * @param $form_state
 * @return array The admin form.
 */
function ckeditor_kcfinder_form($form, &$form_state) {
  global $base_url;
  $form = array();
  $file_public_path = variable_get('file_public_path', conf_path() . '/files');
  $default_upload_url = $base_url . '/' . $file_public_path;

  $param_options = array(
    '%u (' . t('User ID') . ')',
    '%n (' . t('Username') . ')'
  );
  $items_markup = theme_item_list(array(
    'items' => $param_options,
    'title' => '',
    'type' => 'ul',
    'attributes' => array()
  ));
  $place_holder_description = t('To provide different folders for different users, add the following placeholders to the path: !items', array('!items' => $items_markup));;
  $upload_url_description = t('Absolute URL path to uploaded files\' base directory. Make sure this directory exists and is writable by the internet user.') . '<br />';
  $upload_url_description .= $place_holder_description;
  $upload_url_description .= '<strong>Example: ' . $default_upload_url . '/%u</strong><br />';

  $form['kcfinder_upload_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Upload path URL'),
    '#default_value' => variable_get('kcfinder_upload_url', $default_upload_url),
    '#size' => 90,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#description' => $upload_url_description,
  );

  $form['kcfinder_theme'] = array(
    '#type' => 'textfield',
    '#title' => t('Theme'),
    '#default_value' => variable_get('kcfinder_theme', 'default'),
    '#size' => 90,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#description' => t('The theme located in the "themes" directory inside the KCFinder library.')
  );

  // Have Drupal handle most of the submission process by using the system_settings_form function.
  $form = system_settings_form($form);

  // Add custom validation for the paths to make sure they are valid and writable.
  $form['#validate'][] = 'ckeditor_kcfinder_form_validate';

  $form['#submit'][] = 'ckeditor_kcfinder_form_submit';

  // Return the built form to Drupal's page request.
  return $form;
}

/**
 * The ckeditor_kcfinder_form's submit handler.
 *
 * @param array $form The Drupal form array.
 * @param array $form_state The form state array containing the submitted values.
 */
function ckeditor_kcfinder_form_submit(&$form, &$form_state) {
  // All the values are set by the system_settings_form submit handler.
  // We just need to manually set the kcfinder_upload_dir variable that we'll parse from the kcfinder_upload_url value.

  // Get the URL from the submitted values.
  $url = $form_state['values']['kcfinder_upload_url'];

  // Get the absolute path for the uploads from the URL.
  $path = ckeditor_kcfinder_parse_path_from_url($url);

  // Set the kcfinder_upload_dir variable that the KCFinder's Drupal integration class uses.
  variable_set('kcfinder_upload_dir', $path);
}

/**
 * The ckeditor_kcfinder_form's validation callback.
 *
 * @param array $form The Drupal form array.
 * @param array $form_state The form state array containing the submitted values.
 */
function ckeditor_kcfinder_form_validate(&$form, &$form_state) {
  // Get the URL from the submitted values.
  $url = $form_state['values']['kcfinder_upload_url'];

  // Get the absolute path for the uploads from the URL.
  $path = ckeditor_kcfinder_parse_path_from_url($url);

  // Test the "kcfinder_upload_url" exists and is writable.
  $error_msg = ckeditor_kcfinder_test_bad_upload_path($path);
  // If there is an error message, we need to fail the validation and set the error message.
  if ($error_msg) {
    $url_element = & $form['kcfinder_upload_url'];
    form_error($url_element, $error_msg);
  }

  // Get the Theme related form element.
  $theme_element = & $form['kcfinder_theme'];
  // Get the submitted theme value.
  $theme = $form_state['values']['kcfinder_theme'];

  // Get the KCFinder's library path via the Libraries module.
  $libPathBase = libraries_get_path('kcfinder', TRUE);
  // If the libPathBase does not exist, we need to throw an error.
  if (empty($libPathBase)) {
    // Throw a form error indicating that the KCFinder was not found.
    form_error($theme_element, t('The theme can not be validated because the KCFinder library was not found.'));
  }
  else {
    // Concatenate the DRUPAL_ROOT and $libPathBase to have an absolute path to the KCFinder library.
    $libPathBase = DRUPAL_ROOT . $libPathBase;

    // Verify the theme exists.
    if (!file_exists($libPathBase . '/themes/' . $theme)) {
      // Theme not found, throw error.
      form_error($theme_element, t('The %theme theme was not found in the CKFinder\'s theme folder.', array('%theme' => $theme)));
    }
  }
}

/**
 * Convert a URL to the absolute path by replacing the base URL with the DRUPAL_ROOT.
 *
 * @param string $url The URL to parse.
 * @return string
 */
function ckeditor_kcfinder_parse_path_from_url($url) {
  // Use the DRUPAL_ROOT for the base of the path.
  $drupal_root = DRUPAL_ROOT;
  // Figure out the kcfinder_upload_dir based on the kcfinder_upload_url by replacing the URL with the installation path.
  $path = preg_replace('/(https?:\/\/+[^\/]+)/', $drupal_root, $url);
  // Return the parsed path.
  return $path;
}

/**
 * Determines if the target path exists and is writable.
 *
 * @param string $path The path to test.
 * @return null|string Returns an error string if failed, returns null if success.
 */
function ckeditor_kcfinder_test_bad_upload_path($path) {
  $error_msg_not_exist = t('The destination folder does not exists.');
  $error_mst_not_writable = t('The destination folder exists but is not writable.');

  $test_path = $path;
  // If the $path contains placeholders, we want to test the parent most directory
  // for writable because the child directories are dynamically created.
  if (strpos($path, '%') !== FALSE) {
    // The $path contains placeholders, get the path leading up until the 1st placeholder.
    $matches = array();
    preg_match('^[^%]+', $path, $matches);
    $test_path = $matches[0];
  }

  // Test if directory exists.
  if (!file_exists($test_path)) {
    // The directory doesn't exist, return error message.
    return $error_msg_not_exist;
  }
  else {
    // Directory exists, now test if it is writable.
    if (!is_writeable($test_path)) {
      // The directory is not writable, return the error.
      return $error_mst_not_writable;
    }
  }
  // At this point, all is well, return "null" to indicate no errors.
  return NULL;
}

/**
 * Implements hook_ckeditor_settings_alter().
 */
function ckeditor_kcfinder_ckeditor_settings_alter(&$settings, $conf) {
  // Get the KCFinder's library path via the Libraries module.
  $libPathBase = libraries_get_path('kcfinder', TRUE);
  // If the library was found, set the needed integration values.
  if (!empty($libPathBase)) {
    $settings['filebrowserBrowseUrl'] = $libPathBase . '/browse.php?opener=ckeditor&type=files&cms=drupal';
    // Browse Images KCFinder Path
    $settings['filebrowserImageBrowseUrl'] = $libPathBase . '/browse.php?opener=ckeditor&type=images&cms=drupal';
    // Browse Flash KCFinder Path
    $settings['filebrowserFlashBrowseUrl'] = $libPathBase . '/browse.php?opener=ckeditor&type=flash&cms=drupal';
    // Upload KCFinder Path
    $settings['filebrowserUploadUrl'] = $libPathBase . '/upload.php?opener=ckeditor&type=files&cms=drupal';
    // Upload Images KCFinder Path
    $settings['filebrowserImageUploadUrl'] = $libPathBase . '/upload.php?opener=ckeditor&type=images&cms=drupal';
    // Upload Flash KCFinder Path
    $settings['filebrowserFlashUploadUrl'] = $libPathBase . '/upload.php?opener=ckeditor&type=flash&cms=drupal';
  }
}
