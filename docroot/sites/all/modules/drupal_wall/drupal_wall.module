<?php

/**
 * @file
 * Generate a Drupal wall for user status post and wall updates.
 * @auther : Abhijeet Kalsi.
 */

module_load_include ('inc', 'drupal_wall', 'drupal_wall.page');
/**
 * Implements hook_permission().
 */
function drupal_wall_permission() {
  return array (
      'access global drupal wall content' => array (
          'title' => t ('Access content for drupal wall') 
      ), 
      'create post on drupal wall' => array (
          'title' => t ('Access to create a post on drupal wall')
      )
  );
}
/**
 * Implements hook_help().
 */
function drupal_wall_help($path) {
  if ($path == 'admin/help#drupal_wall') {
    $help = '<p>' . t ("This module allows you to post the status on a user’s profile in the form of text, image or video status. Logged user can post comments on any user’s status. Visitors can only view the status and comments of any user (by default). While the permission of View/ Delete/ Edit can also be set by the administrator. The user can delete only that post or comment which he/ she has submitted to other profile. Posts on user’s own profile can also be easily deleted or edited instantly via AJAX.") . '<br /><br />' . t ("Also, it allows the user to like his own status or comments as well as other user’s status with help of a well known FLAG module. The theming of wall status will give you the experience just like the facebook wall.") . '</p>';
    return $help;
  }
}

/**
 * Implements hook_help().
 */
function drupal_wall_menu() {
  $menu['admin/config/user-interface/drupal_wall'] = array (
      'title' => 'Drupal Wall Box Settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array (
          '_drupal_wall_configure_form' 
      ),
      'access callback' => 'user_access',
      'access arguments' => array (
          'administer site configuration' 
      ),
      'file' => 'drupal_wall.admin.inc',
      'weight' => - 1 
  );
  // For global drupal wall page
  $menu['drupal-wall'] = array (
      'title' => 'Drupal Wall',
      'page callback' => '_drupal_wall_global',
      'access callback' => 'user_access',
      'access arguments' => array (
          'access global drupal wall content' 
      ),
      'file' => 'drupal_wall.global.inc',
      'weight' => 1,
      'type' => MENU_NORMAL_ITEM 
  );
  return $menu;
}

/**
 * Implements hook_block_info().
 */
function drupal_wall_block_info() {
  $block['drupal_wall'] = array (
      'info' => t ('Drupal Wall - Status inputs') 
  );
  $block['drupal_wall_view'] = array (
      'info' => t ('Drupal Wall - Wall post') 
  );
  return $block;
}

/**
 * Implements hook_block_view().
 */
function drupal_wall_block_view($data = '') {
  $block = array ();
  global $user;
  $anonymous_user = array_key_exists ('1', $user->roles);
  $module_path['path'] = drupal_get_path ('module', 'drupal_wall');
  drupal_add_js (drupal_get_path ('module', 'drupal_wall') . '/drupal_wall.js');
  drupal_add_js ($module_path, 'setting');
  if (! $anonymous_user && arg (0) != 'user' && arg (0) != 'drupal-wall' && $data == 'drupal_wall') {
    $block['subject'] = NULL;
    $block['content'] = drupal_get_form ('_drupal_wall_content_post_form');
  }
  if (! $anonymous_user && arg (0) != 'user' && arg (0) != 'drupal-wall' && $data == 'drupal_wall_view') {
    variable_set ('drupal_wall_user_id', arg (1));
    variable_set ('drupal_wall_wall_post_offset', 0);
    $block['subject'] = NULL;
    $wall_post = _drupal_wall_get_wall_post ('block_view');
    $wall_wall_post = drupal_get_form ('_drupal_wall_wall_post_display');
    if ($wall_post != NULL) {
      $block['content'] = '<div class="drupal_wall_outer">' . $wall_post . drupal_render ($wall_wall_post) . '</div>';
    }
    else {
      $block['content'] = '<div class="drupal_wall_outer"><span class="status_msg">No wall status avaliable !</span></div>';
    }
  }
  return $block;
}

/**
 * Implements hook_FORM_ID_alter().
 */
function drupal_wall_form_drupal_wall_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  // Make fields hide & readonly as required from drupal_wall content type form
  if (! empty ($node->nid)) {
    if (empty ($node->field_drupal_wall_photos[LANGUAGE_NONE][0]['fid'])) {
      $form['field_drupal_wall_photos']['#attributes']['class'] = array (
          'element-invisible' 
      );
    }
    else {
      $form['field_drupal_wall_photos'][LANGUAGE_NONE][0]['value']['#attributes']['readonly'] = 'readonly';
    }
    $form['field_drupal_wall_image_style']['#attributes']['class'] = array (
        'element-invisible' 
    );
    if (empty ($node->field_drupal_wall_videos[LANGUAGE_NONE][0]['value'])) {
      $form['field_drupal_wall_videos']['#attributes']['class'] = array (
          'element-invisible' 
      );
    }
    else {
      $form['field_drupal_wall_videos'][LANGUAGE_NONE][0]['value']['#attributes']['readonly'] = 'readonly';
    }
  }
}

/**
 * Get "show Older post" button.
 */
function _drupal_wall_wall_post_display() {
  $form = array ();
  if (variable_get ('drupal_wall_older_post_button') == 1) {
    $form['drupal_wall_older_post'] = array (
        '#value' => t ('Show older posts'),
        '#type' => 'submit',
        '#prefix' => '<div style="margin:20px; clear:both;">',
        '#suffix' => '</div>',
        '#ajax' => array (
            'callback' => '_drupal_wall_wall_post_display_ajax',
            'wrapper' => 'drupal_wall_append_older_wall_post',
            'method' => 'append' 
        ) 
    );
  }
  return $form;
}

/**
 * Get older wall post via ajax call to function.
 */
function _drupal_wall_wall_post_display_ajax() {
  $html = NULL;
  if (variable_get ('drupal_wall_wall_post_offset') != - 1) {
    $html = _drupal_wall_get_wall_post ('full_view');
  }
  if ($html != NULL) {
    return $html;
  }
  elseif (variable_get ('drupal_wall_wall_post_offset') != - 1) {
    variable_set ('drupal_wall_wall_post_offset', - 1);
    return '<p style="color:red; margin:25px;">No more older wall post exists !</p>';
  }
}

/**
 * Get node post content from Drupal wall content type.
 *
 * @return array Merge array of wall post with its related comment and FALSE if it isn't.
 */
function _drupal_wall_get_wall_post($view_mode = NULL) {
  // Get user id for blockview and full view
  if ($view_mode == 'full_view') {
    $uid = variable_get ('drupal_wall_user_id');
  }
  else {
    global $user;
    $uid = $user->uid;
  }
  $query = db_select ('node', 'n');
  $query->leftjoin ('field_data_body', 'b', 'n.nid=b.entity_id');
  $query = $query->fields ('n', array (
      'nid',
      'uid',
      'created',
      'comment',
      'title',
      'type' 
  ))->fields ('b', array (
      'body_value' 
  ))->condition ('n.uid', $uid)->condition ('n.status', 1);
  
  if (variable_get ('drupal_wall_content_type') == 0) {
    $query = $query->condition ('n.type', 'drupal_wall');
  }
  
  $query = $query->orderby ('n.created', 'desc')->range ((0 + variable_get ('drupal_wall_wall_post_offset')), variable_get ('drupal_wall_wall_post_limit'));
  
  if (variable_get ('drupal_wall_post_type_photo') == 1) {
    $query->leftjoin ('field_data_field_drupal_wall_photos', 'p', 'n.nid=p.entity_id');
    $query = $query->fields ('p', array (
        'field_drupal_wall_photos_fid' 
    ));
    $query->leftjoin ('field_data_field_drupal_wall_image_style', 'ps', 'n.nid=ps.entity_id');
    $query = $query->fields ('ps', array (
        'field_drupal_wall_image_style_value' 
    ));
  }
  
  if (variable_get ('drupal_wall_post_type_video') == 1) {
    $query->leftjoin ('field_data_field_drupal_wall_videos', 'v', 'n.nid = v.entity_id');
    $query = $query->fields ('v', array (
        'field_drupal_wall_videos_value' 
    ));
  }
  $query = $query->execute ()->fetchAll ();
  
  if (variable_get ('drupal_wall_show_comments') == 1) {
    $query2 = db_select ('comment', 'c');
    $query2->leftjoin ('field_data_comment_body', 'cb', 'c.cid = cb.entity_id');
    $query2 = $query2->fields ('c', array (
        'nid',
        'cid',
        'name',
        'uid',
        'subject',
        'created' 
    ))->fields ('cb', array (
        'comment_body_value' 
    ))->condition ('c.status', 1)->execute ()->fetchAll ();
    
    // Merging comments to it node in comment array.
    foreach ($query as $key => $value) {
      foreach ($query2 as $key2 => $value2) {
        if ($value->nid == $value2->nid) {
          $value->comments[] = $value2;
        }
      }
    }
  }
  $size = variable_get ('drupal_wall_wall_post_limit') + variable_get ('drupal_wall_wall_post_offset');
  variable_set ('drupal_wall_wall_post_offset', $size);
  if (array_key_exists ('0', $query)) {
    $html = theme ('drupal_wall_posts', array (
        'wall_post' => $query,
        'user_info' => '' 
    ));
    return $html;
  }
  else {
    return NULL;
  }
}

/**
 * Implements hook_theme().
 */
function drupal_wall_theme() {
  
  return array (
      'drupal_wall_posts' => array (
          'template' => 'drupal_wall',
          'variable' => array (
              'node' => NULL 
          ) 
      ) 
  );
}

/**
 * Get user profile picture with given user id (uid).
 *
 * @param string $uid
 *          Drupal user ID (uid).
 *          
 * @return string desire image path of drupal user and FALSE if it isn't.
 */
function _drupal_wall_user_profile_picture($uid) {
  $user = user_load ($uid);
  if (isset ($user->picture->uri)) {
    return file_create_url ($user->picture->uri);
  }
  else {
    global $base_url;
    return $base_url . '/' . drupal_get_path ('module', 'drupal_wall') . '/images/picture-default.png';
  }
}

/**
 * Get user status picture with given image id.
 *
 * @param string $image_id
 *          Drupal image ID.
 *          
 * @return string Desire image path of uploaded user photo and FALSE if it isn't.
 */
function _drupal_wall_status_picture($image_id) {
  $file = file_load ($image_id);
  if (is_object ($file)) {
    return file_create_url ($file->uri);
  }
  else {
    return NULL;
  }
}

/**
 * Implements hook_user_view().
 */
function drupal_wall_user_view($account, $view_mode) {
  if ($view_mode == 'full') {
    global $user;
    $module_path['path'] = drupal_get_path ('module', 'drupal_wall');
    drupal_add_js (drupal_get_path ('module', 'drupal_wall') . '/drupal_wall.js');
    drupal_add_js ($module_path, 'setting');
    // Drupal wall post status inputs.
    if ($account->uid == $user->uid) {
      $wall_content_post = drupal_get_form ('_drupal_wall_content_post_form');
      $post = drupal_render ($wall_content_post);
      $account->content['drupal_wall']['post_status'] = array (
          '#type' => 'user_profile_item',
          '#title' => variable_get ('drupal_wall_what_is_on_mind_string_user_page_title','What\'s on your mind ?'),
          '#markup' => $post 
      );
    }
    variable_set ('drupal_wall_user_id', arg (1));
    variable_set ('drupal_wall_wall_post_offset', 0);
    $wall_post = _drupal_wall_get_wall_post ('full_view');
    $wall_post_display = drupal_get_form ('_drupal_wall_wall_post_display');
    if ($wall_post != NULL) {
      $user_wall = '<div class="drupal_wall_outer">' . $wall_post . drupal_render ($wall_post_display) . '</div>';
    }
    else {
      $user_wall = '<div class="drupal_wall_outer"><span class="status_msg">No wall status avaliable !</span></div>';
    }
    if (empty ($user_wall) && empty ($post)) {
      return;
    }
    if (! isset ($account->content['drupal_wall'])) {
      $account->content['drupal_wall'] = array ();
    }
    // Drupal wall - User wall posts.
    $account->content['drupal_wall']['wall_post'] = array (
        '#type' => 'user_profile_item',
        '#title' => t ('Wall Post'),
        '#markup' => $user_wall 
    );
  }
}