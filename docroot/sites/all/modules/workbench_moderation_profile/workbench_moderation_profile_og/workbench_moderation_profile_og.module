<?php

/**
 * @file
 * Content moderation profiles for Workbench - based on group.
 *
 * Based on workbench_moderation.module
 */

// Functions to implement content type-based choosing of profile.
/**
 * Implements hook_menu().
 */
function workbench_moderation_profile_og_menu() {
  $items = array();
  $items['group/%/%/admin/workbench_moderation_profile_og'] = array(
    'title callback' => 'og_ui_menu_title_callback',
    'title arguments' => array(
      'Set workbench moderation profile for group @group',
      1,
      2,
    ),
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'workbench_moderation_profile_og_profile_form',
      1,
      2,
    ),
    'weight' => 5,
    'access callback' => 'og_ui_user_access_group',
    'access arguments' => array('set group workbench moderation profile', 1, 2),
    'file' => 'workbench_moderation_profile_og.admin.inc',
  );

  // Callback for ajax load of a group's profile data.
  $items['workbench_moderation_profile_og/%/%/profile'] = array(
    'page callback' => 'workbench_moderation_profile_og_get_profile_async',
    'page arguments' => array(1, 2),
    'access arguments' => array('view workbench_moderation_profile entities'),
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function workbench_moderation_profile_og_help($path, $arg) {
  $output = NULL;
  switch ($path) {
    case 'group/%/%/admin/workbench_moderation_profile_og':
      $output = "<p>" . t('Please note that group profile selection currently only works when a single group is assignable per node. See <a href="https://drupal.org/node/2175221">https://drupal.org/node/2175221</a> for details on this feature. You will need to change your group selection field(s) to single-select.');
      break;

    case 'admin/help#workbench_moderation_profile_og':
      $output = '<p>' . t("Enhances content moderation services by allowing for the assignment of 'profiles' to Organic Groups.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_og_ui_get_group_admin().
 *
 * Adds link to [node]/%/group tab.
 */
function workbench_moderation_profile_og_og_ui_get_group_admin($group_type, $gid) {
  $items = array();

  // See workbench_moderation_profile_og_og_permission() below.
  if (og_user_access($group_type, $gid, 'set group workbench moderation profile')) {
    $items['workbench_moderation_profile'] = array(
      'title' => t('Workbench Moderation Profile'),
      'description' => t('Manage the workbench moderation profile.'),
      'href' => "admin/workbench_moderation_profile_og",
    );
  }

  return $items;
}

/**
 * Implements hook_og_permission().
 *
 * Provide og-style user permission.
 */
function workbench_moderation_profile_og_og_permission() {
  $items = array();

  $items['set group workbench moderation profile'] = array(
    'title' => t('Set workbench moderation profile for group'),
    'description' => t('Users may set the workbench moderation profile for the group.'),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
    'restrict access' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_workbench_moderation_profile_get_profile().
 */
function workbench_moderation_profile_og_workbench_moderation_profile_get_profile($content) {
  // Ok to use nid here for now; will need more smarts for wb_media integration.
  if (isset($content->nid) && isset($content->type)) {
    $profile = workbench_moderation_profile_og_get_profile_from_entity($content->nid, 'node', $content->type);
    return $profile;
  }
}

/**
 * Utility function to get the profile from the content entity.
 *
 * @param obj $entity_id
 *   Entity id.
 * @param string $entity_type
 *   Entity type.
 *
 * @return int
 *   Return profile variable for the group. 
 */
function workbench_moderation_profile_og_get_profile_from_entity($entity_id, $entity_type = 'node', $entity_bundle = NULL) {
  $profile = NULL;

  // Check drupal_static cache first.
  $cache = &drupal_static(__FUNCTION__);
  if (!isset($cache[$entity_id][$entity_type])) {
    // Entity still needs to be moderated.
    if (!workbench_moderation_node_type_moderated($entity_bundle)) {
      return;
    }

    $group_info = workbench_moderation_profile_og_get_group($entity_id, $entity_type);

    if (isset($group_info) && $group_info) {
      $profile = workbench_moderation_profile_og_get_profile($group_info['gid'], $group_info['group_type']);

      // If there's no profile associated w/ the group, dig into parent groups.
      if (empty($profile)) {
        $profile = workbench_moderation_profile_og_get_profile_from_entity($group_info['gid'], $group_info['group_type'], $entity_bundle);
      }
    }

    $cache[$entity_id][$entity_type] = $profile;
  }
  return $cache[$entity_id][$entity_type];
}

/**
 * Utility function to get the profile from the group type and gid.
 *
 * @param int $gid
 *   Group id being examined.
 * @param string $group_type
 *   Group type being examined.
 *
 * @return int
 *   Return profile id for the group. 
 */
function workbench_moderation_profile_og_get_profile($gid, $group_type = 'node') {
  // Check drupal_static cache first.
  $cache = &drupal_static(__FUNCTION__);
  if (!isset($cache[$gid][$group_type])) {
    $query = "SELECT wmpid FROM {workbench_moderation_profile_og} WHERE gid = :gid AND type = :group_type";
    $cache[$gid][$group_type] = db_query($query, array(':gid' => $gid, ':group_type' => $group_type))->fetchField();
  }
  return $cache[$gid][$group_type];
}

/**
 * Utility function to get the group from the entity id and type.
 *
 * @param int $entity_id
 *   Entity id being examined.
 * @param string $entity_type
 *   Entity type being examined.
 *
 * @return array
 *   Return group information for the entity. 
 */
function workbench_moderation_profile_og_get_group($entity_id, $entity_type) {
  // Check drupal_static cache first.
  $cache = &drupal_static(__FUNCTION__);
  if (!isset($cache[$entity_id][$entity_type])) {
    $group_info = db_select('og_membership', 'ogm')
      ->fields('ogm')
      ->condition('entity_type', $entity_type, '=')
      ->condition('etid', $entity_id, '=')
      ->execute()
      ->fetchAssoc();
    $cache[$entity_id][$entity_type] = $group_info;
  }
  return $cache[$entity_id][$entity_type];
}

/**
 * Utility function to get the default state from the group type and gid.
 *
 * @param int $gid
 *   Group id being examined.
 * @param string $group_type
 *   Group type being examined.
 *
 * @return int
 *   Return default state for the group. 
 */
function workbench_moderation_profile_og_get_default_state($gid, $group_type = 'node') {
  $query = "SELECT default_state FROM {workbench_moderation_profile_og} WHERE gid = :gid AND type = :group_type";
  return db_query($query, array(':gid' => $gid, ':group_type' => $group_type))->fetchField();
}

/**
 * Implements hook_form_node_form_alter().
 *
 * Add JS to change states dynamically on group change.
 */
function workbench_moderation_profile_og_form_node_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_js(drupal_get_path('module', 'workbench_moderation_profile_og') . "/js/workbench_moderation_profile_og.js", array('type' => 'file'));
}

/**
 * Implements hook_form_alter().
 */
function workbench_moderation_profile_og_form_alter(&$form, &$form_state, $form_id) {
  // Add a checkbox for profile limitiations for groups.
  if ($form_id == 'workbench_moderation_profile_weights_form') {
    $form['workbench_moderation_profile_og_limit_profiles'] = array(
      '#type' => 'checkbox',
      '#title' => t('Limit profile checks on group nodes?'),
      '#description' => t('On group content nodes, should Workbench only look for workbench profiles in the group (and parent groups) of the content (CHECKED VALUE) or should it also look in other modules for its profile (UNCHECKED VALUE)'),
      '#default_value' => variable_get('workbench_moderation_profile_og_limit_profiles', 1),
    );
    $form['#submit'][] = 'workbench_moderation_profile_og_form_profile_weights_submit';
  }
}

/**
 * Form submission handler for hook_form_alter().
 */
function workbench_moderation_profile_og_form_profile_weights_submit(&$form, &$form_state) {
  $limitation = $form_state['values']['workbench_moderation_profile_og_limit_profiles'];
  variable_set('workbench_moderation_profile_og_limit_profiles', $limitation);
}

/**
 * Menu callback for ajax profile request.
 *
 * @param int $gid
 *   Group id being examined.
 * @param string $current_state
 *   Current state of entity.
 */
function workbench_moderation_profile_og_get_profile_async($gid, $current_state) {
  $profile = workbench_moderation_profile_load(workbench_moderation_profile_og_get_profile($gid));

  $states = workbench_moderation_profile_get_states($profile->wmpid);
  // If current state is not available in this profile, use profile's default.
  if (!isset($states[$current_state])) {
    $current_state = workbench_moderation_profile_og_get_default_state($gid);
  }

  $output = array(
    'profile' => $profile,
    'states' => $states,
    'current_state' => $current_state,
  );
  drupal_json_output($output);
}

/**
 * Implements hook_workbench_moderation_access_alter().
 */
function workbench_moderation_profile_og_workbench_moderation_access_alter(&$access, &$op, &$node) {
  switch ($op) {
    case 'view history':
      workbench_moderation_profile_og_proceed($access, $node);
      break;
  }
}

/**
 * Implements hook_TYPE_alter().
 *
 * Controls whether a group node allows other modules to determine profile.
 */
function workbench_moderation_profile_og_workbench_moderation_node_moderated_alter(&$access, &$node) {
  workbench_moderation_profile_og_proceed($access, $node);
}

/**
 * Handler for access and moderation alter functions.
 */
function workbench_moderation_profile_og_proceed(&$access, $node) {
  $limit = variable_get('workbench_moderation_profile_og_limit_profiles', 1);
  if ($limit) {
    if (!empty($node->workbench_moderation_profile)) {
      $access = TRUE;
    }
    else {
      $access = FALSE;
    }
  }
}

/**
 * Implements hook_node_prepare().
 *
 * For new nodes; finds group from session variables and then sets profile var.
 */
function workbench_moderation_profile_og_node_prepare($node) {
  if (workbench_moderation_node_type_moderated($node->type)) {
    $context = og_context('node');
    if (!empty($context['gid'])) {
      $gid = $context['gid'];
    }
    else {
      $gid = og_session_context_get_context();
    }

    $profile = workbench_moderation_profile_og_get_profile($gid);
    $node->workbench_moderation_profile = $profile;
  }
}
