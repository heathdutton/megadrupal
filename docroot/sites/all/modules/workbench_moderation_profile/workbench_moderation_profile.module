<?php

/**
 * @file
 * Content moderation profiles for Workbench.
 *
 * Based on workbench_moderation.module
 */

// Entity API function.
/**
 * Implements hook_entity_info().
 */
function workbench_moderation_profile_entity_info() {
  $entity_info['workbench_moderation_profile'] = array(
    'label' => t('Workbench Moderation Profile'),
    'label callback' => 'workbench_moderation_profile_label_callback',
    'entity class' => 'WorkbenchModerationProfile',
    'controller class' => 'WorkbenchModerationProfileController',
    'base table' => 'workbench_moderation_profile',
    'uri callback' => 'entity_class_uri',
    'fieldable' => TRUE,
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'wmpid',
      'name' => 'profile',
      'label' => 'label',
    ),
    'load hook' => 'workbench_moderation_profile_load',
    'access callback' => 'workbench_moderation_profile_access',
    'module' => 'workbench_moderation_profile',
    'admin ui' => array(
      'path' => 'admin/config/workbench/moderation/profile',
      'controller class' => 'WorkbenchModerationProfileUIController',
      'file' => 'workbench_moderation_profile.admin.inc',
    ),
    'bundles' => array(
      'workbench_moderation_profile' => array(
        'label' => t('Workbench Moderation Profile'),
        'admin' => array(
          'path' => 'admin/structure/workbench/moderation_profile',
          'access arguments' => array('administer workbench_moderation_profiles'),
        ),
      ),
    ),
    'views controller class' => 'EntityDefaultViewsController',
  );

  return $entity_info;
}

/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the workbench_moderation_profile via a hook to 
 * avoid a recursion issue as loading the workbench_moderation_profile requires
 * the entity info as well.
 *
 * @todo This needs to be improved
 */
function workbench_moderation_profile_entity_info_alter(&$entity_info) {
  foreach (workbench_moderation_profile_get_profiles() as $profile => $info) {
    $entity_info['workbench_moderation_profile']['bundles'][$profile] = array(
      'label' => $info->label,
    );
  }
}

/**
 * Gets an array of all workbench_moderation_profiles, keyed by the profile.
 *
 * @param string $profile_name
 *   If set, the profile with the given name is returned.
 *
 * @return WorkbenchModerationProfile[]
 *   Depending whether $profile isset, an array of workbench_moderation_profiles
 *   or a single one.
 */
function workbench_moderation_profile_get_profiles($profile_name = NULL) {
  /* entity_load will get the Entity controller for our
  workbench_moderation_profile entity and call the load
  function of that object - we are loading entities by name here. */
  $profiles = entity_load_multiple_by_name('workbench_moderation_profile', isset($profile_name) ? array($profile_name) : FALSE);
  return isset($profile_name) ? reset($profiles) : $profiles;
}

// Drupal hook functions.
/**
 * Implements hook_help().
 */
function workbench_moderation_profile_help($path, $arg) {
  switch ($path) {
    case 'admin/help#workbench_moderation_profile':
      return '<p>' . t("Enhances content moderation services by allowing for the development of 'profiles'") . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function workbench_moderation_profile_permission() {
  return array(
    'administer workbench_moderation_profile settings' => array(
      'title' => t('Administer Workbench Moderation Profile settings'),
      'description' => t('Control settings and fields for Workbench Moderation Profiles.'),
    ),
    'administer workbench_moderation_profiles' => array(
      'title' => t('Administer Workbench Moderation Profiles'),
      'description' => t('Full access to create and edit Workbench Moderation Profiles.'),
    ),
    'view workbench_moderation_profile entities' => array(
      'title' => t('View Workbench Moderation Profiles Entity'),
      'description' => t('Allows a user to view the workbench_moderation_profile entities.'),
    ),
    'create workbench_moderation_profile entities' => array(
      'title' => t('Create Workbench Moderation Profiles Entities'),
      'description' => t('Allows a user to create workbench_moderation_profile entities.'),
    ),
    'edit workbench_moderation_profile entities' => array(
      'title' => t('Edit Workbench Moderation Profiles Entities'),
      'description' => t('Allows a user to edit workbench_moderation_profile entities.'),
    ),
    'delete workbench_moderation_profile entities' => array(
      'title' => t('Delete Workbench Moderation Profiles Entities'),
      'description' => t('Allows a user to delete workbench_moderation_profile entities.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function workbench_moderation_profile_menu() {
  $items = array();
  // Page view.
  $items['workbench_moderation_profile/%workbench_moderation_profile'] = array(
    'title' => 'Workbench Moderation Profile',
    'page callback' => 'workbench_moderation_profile_page_view',
    'page arguments' => array(1),
    'access callback' => 'workbench_moderation_profile_access',
    'access arguments' => array('view', 1),
  );

  // Profile weighting.
  $items['admin/config/workbench/moderation/weights'] = array(
    'title' => 'Weights',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('workbench_moderation_profile_weights_form'),
    'access arguments' => array('administer workbench_moderation_profile settings'),
    'file' => 'workbench_moderation_profile.admin.inc',
    'weight' => 9,
    'type' => MENU_LOCAL_TASK,
  );

  // Callback for ajax load of a profile's available states.
  $items['workbench_moderation_profile/%workbench_moderation_profile/states'] = array(
    'page callback' => 'workbench_moderation_profile_states',
    'page arguments' => array(1),
    'access arguments' => array('view workbench_moderation_profile entities'),
  );

  // Field and settings control.
  $items['admin/structure/workbench/moderation_profile'] = array(
    'title' => 'Workbench Moderation Profiles',
    'description' => 'Configure the settings for Workbench Moderation Profile.',
    'page callback' => 'workbench_moderation_profile_settings',
    'access arguments' => array('administer workbench_moderation_profile settings'),
    'weight' => -10,
  );
  $items['admin/structure/workbench/moderation_profile/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function workbench_moderation_profile_theme() {
  return array(
    'workbench_moderation_profile_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'workbench_moderation_profile.admin.inc',
    ),
    'workbench_moderation_profile_weights_form' => array(
      'render element' => 'form',
      'file' => 'workbench_moderation_profile.admin.inc',
    ),
  );
}

/**
 * Implements hook_workbench_moderation_states_next_alter().
 *
 * This is the core of this module's functionality. Workbench Moderation's use
 * of an drupal_alter in workbench_moderation_states_next() means we can tweak
 * the list of states available based on our profiles. This function basically
 * looks at the node, then determines what profile currently applies, then
 * what states are possible from there based on the profile's transitions.
 */
function workbench_moderation_profile_workbench_moderation_states_next_alter(&$states, &$current_state, $context) {
  $profile = NULL;
  if (!empty($context['node']->workbench_moderation_profile)) {
    $profile = $context['node']->workbench_moderation_profile;
  }

  if ($profile) {
    $profile = workbench_moderation_profile_load($profile);
    $profile_states = workbench_moderation_profile_get_states($profile, $current_state);

    $message = array();
    $message['workbench_moderation_profile'] = array(
      'label' => t('Workbench moderation profile'),
      'message' => t("<span id='workbench_moderation_profile_label'>@profile</span>", array("@profile" => $profile->label)),
    );
    workbench_moderation_set_message($message);

    // This removes states from the mix that are not valid because the profile
    // doesn't contain them (or a transition leading to them).
    if (is_array($states) && is_array($profile_states)) {
      $states = array_intersect($states, $profile_states);
    }
  }
}

// Convenience wrapper functions and callbacks for the profiles.
/**
 * Fetch a workbench_moderation_profile id based on node.
 *
 * @param obj $node
 *   The node object to determine profile.
 *
 * @return int
 *   Profile id.
 *
 * @see workbench_moderation_profile_get_profile()
 */
function workbench_moderation_profile_get_profile_from_node($node) {
  // Get weighted modules.
  $modules = _workbench_moderation_profile_weighted_modules();

  // Set default.
  $profile = 1;
  if (count($modules)) {
    foreach ($modules as $mod => $info) {
      $profile = module_invoke($mod, 'workbench_moderation_profile_get_profile', $node);
      if ($profile) {
        break;
      }
    }
  }
  return $profile;
}

/**
 * Saves a workbench moderation profile object.
 *
 * Wrapper for the entity->save().
 */
function workbench_moderation_profile_save($workbench_moderation_profile) {
  if (is_object($workbench_moderation_profile)) {
    $workbench_moderation_profile->save();
  }
}

/**
 * Fetch a workbench_moderation_profile object.
 *
 * @param int $wmpid
 *   Integer specifying the workbench_moderation_profile id.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return obj
 *   A fully-loaded $workbench_moderation_profile object,
 *   or FALSE if it cannot be loaded.
 *
 * @see workbench_moderation_profile_load_multiple()
 */
function workbench_moderation_profile_load($wmpid, $reset = FALSE) {
  $workbench_moderation_profile = workbench_moderation_profile_load_multiple(array($wmpid), array(), $reset);
  return reset($workbench_moderation_profile);
}

/**
 * Load multiple workbench_moderation_profile based on certain conditions.
 *
 * @param array $wmpids
 *   An array of workbench_moderation_profile IDs.
 * @param array $conditions
 *   Conditions to match against the {workbench_moderation_profile} table.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return array
 *   An array of workbench_moderation_profile objects, indexed by wmpid.
 *
 * @see entity_load()
 * @see workbench_moderation_profile_load()
 */
function workbench_moderation_profile_load_multiple($wmpids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('workbench_moderation_profile', $wmpids, $conditions, $reset);
}

/**
 * Deletes a workbench_moderation_profile.
 *
 * @param obj $workbench_moderation_profile
 *   A workbench moderation profile object.
 */
function workbench_moderation_profile_delete(WorkbenchModerationProfile $workbench_moderation_profile) {
  $workbench_moderation_profile->delete();
}

/**
 * Delete multiple workbench_moderation_profile.
 *
 * @param array $wmpids
 *   An array of workbench_moderation_profile IDs.
 */
function workbench_moderation_profile_delete_multiple(array $wmpids) {
  entity_get_controller('workbench_moderation_profile')->delete($wmpids);
}

/**
 * Label callback for workbench_moderation_profiles, for menu router, etc.
 *
 * @param obj $workbench_moderation_profile
 *   A workbench moderation profile object.
 * @param string $type
 *   Bundle type.
 *
 * @return string
 *   Label of the profile.
 */
function workbench_moderation_profile_label_callback($workbench_moderation_profile, $type) {
  return empty($workbench_moderation_profile->label) ? 'Untitled Workbench Moderation Profile' : $workbench_moderation_profile->label;
}

/**
 * Sets up content to show an individual workbench_moderation_profile.
 *
 * @param obj $workbench_moderation_profile
 *   A workbench moderation profile object.
 */
function workbench_moderation_profile_page_view($workbench_moderation_profile, $view_mode = 'full') {
  $controller = entity_get_controller('workbench_moderation_profile');
  $content = $controller->view(array($workbench_moderation_profile->wmpid => $workbench_moderation_profile));
  return $content;
}

/**
 * Determines whether the given user has access to a workbench profile.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param obj $profile
 *   (optional) A profile to check access for. If nothing is given, access for
 *   all profiles is determined.
 * @param obj $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return bool
 *   Whether access is allowed or not.
 *
 * @see hook_workbench_moderation_profile_access()
 * @see workbench_moderation_profile_workbench_moderation_profile_access()
 */
function workbench_moderation_profile_access($op, $profile = NULL, $account = NULL) {
  if ($op == 'update') {
    $op = 'edit';
  }
  // Allow modules to grant / deny access.
  $access = module_invoke_all('workbench_moderation_profile_access', $op, $profile, $account);

  // Only grant access if at least one module granted access and no one denied
  // access.
  if (in_array(FALSE, $access, TRUE)) {
    return FALSE;
  }
  elseif (in_array(TRUE, $access, TRUE)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_workbench_moderation_profile_access().
 */
function workbench_moderation_profile_workbench_moderation_profile_access($op, $profile = NULL, $account = NULL) {
  if (user_access("administer workbench_moderation_profiles", $account)) {
    return TRUE;
  }
  return user_access($op . " workbench_moderation_profile entities");
}

/**
 * List all profile names.
 */
function workbench_moderation_profile_make_options_array($none = FALSE) {
  $query = 'SELECT wmpid, label FROM {workbench_moderation_profile} ORDER BY weight, label';
  $profiles = db_query($query);
  $return = array();
  if ($none) {
    $return[] = "-None-";
  }
  foreach ($profiles as $profile) {
    $return[$profile->wmpid] = $profile->label;
  }
  return $return;
}

/**
 * List all states associated with a given profile.
 *
 * @param mixed $profile
 *   Either a profile entity object, or a profile wmpid.
 *
 * @return array
 *   An array with all associated states.
 */
function workbench_moderation_profile_get_states($profile = NULL, $current_state = NULL) {
  // Load profile if necessary.
  if (!is_object($profile)) {
    $profile = workbench_moderation_profile_load($profile);
  }
  $wmpid = $profile->wmpid;

  // Cache statically.
  $wmp_states =& drupal_static(__FUNCTION__, array());
  if (!isset($wmp_states[$wmpid])) {
    // Load profile's transitions.
    if ($profile) {
      $transitions = field_get_items('workbench_moderation_profile', $profile, 'field_transitions', $profile);
    }

    // Load labels for form item.
    $labels = workbench_moderation_state_labels();

    /* Compare current_state vs. profile's from states. Unset if not one of the
    profile's "from" states. This handles edge cases where default state is a
    dead-end; i.e. is not a valid "from" state. This still allows it to be
    chosen as a content state without mucking up the array_intersect. */
    $current_state_valid = FALSE;
    foreach ($transitions as $key => $transition) {
      $transitions[$key] = workbench_moderation_transition_load($transition['target_id']);
      if ($current_state == $transitions[$key]->from_name) {
        $current_state_valid = TRUE;
      }
    }
    if (!$current_state_valid) {
      unset($current_state);
    }

    // Fill in state option array. Include both from and to states.
    foreach ($transitions as $transition) {
      /*  If current state is set, only include transitions that have matching
      "From" state. This prevents invalid transitions. */
      if (!isset($current_state) || (isset($current_state) && $transition->from_name == $current_state)) {
        $wmp_states[$wmpid][$transition->from_name] = $labels[$transition->from_name];
        $wmp_states[$wmpid][$transition->to_name] = $labels[$transition->to_name];
      }
    }
  }

  return $wmp_states[$wmpid];
}

/**
 * List all states associated with a given profile; ajax callback.
 *
 * @param mixed $profile
 *   Either a profile entity object, or a profile wmpid.
 */
function workbench_moderation_profile_states($profile = NULL) {
  $states = workbench_moderation_profile_get_states($profile);
  drupal_json_output($states);
}

/**
 * Machine Name field name check.
 */
function workbench_moderation_profile_check_machinename($profile = '') {
  $query = 'SELECT wmpid FROM {workbench_moderation_profile} WHERE profile = :profile';
  return db_query($query, array(":profile" => $profile))->fetchField();
}

/**
 * Menu callback for admin.
 *
 * Required so FieldAPI has a place to attach local tasks for fields & display.
 */
function workbench_moderation_profile_settings() {
  return "There are no user-controllable settings for this entity type. You can, however, " . l(t('add or edit fields'), 'admin/structure/workbench/moderation_profile/fields') . ' attached to these entities.';
}

/**
 * Utility function to get a full list of modules by administrated weight.
 *
 * If no admin weighting (variable workbench_moderation_profile_weights) exists,
 * then default to module (system table) weighting.
 */
function _workbench_moderation_profile_weighted_modules() {
  // Get existing weighted modules.
  $weighted = variable_get('workbench_moderation_profile_weights', array());

  // Get all modules implementing workbench_moderation_profile_get_profile().
  $mods = array_flip(module_implements('workbench_moderation_profile_get_profile'));

  // Merge arrays for full list with weighting where applicable.
  $mods = array_merge($mods, $weighted);

  // Sort for presentation in a logical fashion.
  uasort($mods, 'drupal_sort_weight');
  return $mods;
}

/**
 * Implements hook_workbench_moderation_transition_delete().
 *
 * Remove transitions from profiles when they are deleted.
 */
function workbench_moderation_profile_workbench_moderation_transition_delete($transition) {
  // Find keys of profiles with the transition attached.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'workbench_moderation_profile')
    ->fieldCondition('field_transitions', 'target_id', $transition->id, '=');
  $profiles = $query->execute();
  if (!empty($profiles['workbench_moderation_profile'])) {
    $profile_keys = array_keys($profiles['workbench_moderation_profile']);

    // Iterate through them and load to find transition data.
    foreach ($profile_keys as $key) {
      $profile_to_fix = workbench_moderation_profile_load($key);
      $wrapper = entity_metadata_wrapper('workbench_moderation_profile', $profile_to_fix);

      // Iterate through values of transition fields; unset transition and save.
      foreach ($wrapper->field_transitions->getIterator() as $delta => $trans_wrapper) {
        // $trans_wrapper may now be accessed as a field wrapper.
        if ($trans_wrapper->id->value() == $transition->id) {
          $wrapper->field_transitions[$delta]->set(NULL);
          $wrapper->save();
        }
      }
    }
  }
}

/**
 * Implements hook_node_load().
 *
 * Adds profile to the node object. Super useful.
 */
function workbench_moderation_profile_node_load($nodes, $types) {
  foreach ($nodes as $id => $node) {
    $nodes[$id]->workbench_moderation_profile = workbench_moderation_profile_get_profile_from_node($node);
  }
}

/**
 * Implements hook_form_alter().
 */
function workbench_moderation_profile_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "workbench_moderation_profile_form") {
    $states = workbench_moderation_state_labels();
    $transistions = workbench_moderation_transitions();

    foreach ($transistions as $transition) {
      $form['field_transitions'][LANGUAGE_NONE]['#options'][$transition->id] = $transition->name . " (" . $states[$transition->from_name] . " --> " . $states[$transition->to_name] . ")";
    }
  }
}
