<?php

/**
 * @file
 * This is the relevant content install file.
 */

/**
 * Implementation of hook_install().
 */
function relevant_content_install() {
  $t = get_t();
  drupal_set_message($t("Relevant Content settings are available under !link", array(
    '!link' => l($t('Administer > Configuration > Search and Metadata > Relevant Content'), 'admin/config/search/relevant_content')
  )));
}


/**
 * Implementation of hook_uninstall().
 */
function relevant_content_uninstall() {
  drupal_uninstall_schema('relevant_content');
  variable_del('relevant_content');
}


/**
 * Implementation of hook_schema().
 */
function relevant_content_schema() {
  $schema['relevant_content_blocks'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The id is used to uniquely identify this block',
      ),
      'max_items' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The limit for how many items should be listed in this block',
      ),
      'header_text' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
        'description' => 'The optional header text for the block',
      ),
      'header_format' => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
        'description' => 'The input format to use for the header_text',
      ),
      'token_settings' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'The optional token template for the output of the related node item',
      ),
      'absolute_links' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'foreign keys' => array(
      'relevant_content_blocks_types' => array(
        'table' => 'relevant_content_blocks_types',
        'columns' => array('id' => 'id'),
      ),
      'relevant_content_blocks_vocabs' => array(
        'table' => 'relevant_content_blocks_vocabs',
        'columns' => array('id' => 'id'),
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['relevant_content_blocks_types'] = array(
    'fields' => array(
      'id'   => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The id to link the list of types through to the main block configuration',
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The content type name',
      ),
    ),
    'foreign keys' => array(
      'node' => array(
        'table' => 'node',
        'columns' => array('type' => 'type'),
      ),
    ),
    'primary key' => array('id', 'type'),
  );

  $schema['relevant_content_blocks_vocabs'] = array(
    'fields' => array(
      'id'  => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The id to link the list of vocabularies types through to the main block configuration',
      ),
      'vid' => array(
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The numeric vocabulary id',
      ),
    ),
    'foreign keys' => array(
      'taxonomy_vocabulary' => array(
        'table' => 'taxonomy_vocabulary',
        'columns' => array('vid' => 'vid'),
      ),
    ),    'primary key' => array('id', 'vid'),
  );

  return $schema;
}


/**
 * Implementation of hook_update_n().
 */
function relevant_content_update_7100() {
  $ret = array();

  if (db_table_exists('relevant_content_blocks')) {
    // TODO - THIS SHOULD UPDATE THE SCHEMA!!!
    $ret['#abort'] = array('success' => FALSE, 'query' => 'The Relevant Content Blocks table already exists - it was probably created during update 6100 in the D6 release. Please uninstall and reinstall if you have any Schema related issues.');
    return $ret;
  }

  // Install the schema
  drupal_install_schema('relevant_content');

  // Get the translation function
  $t = get_t();

  // Get the settings
  $settings = variable_get('relevant_content', array());

  // For each block, we need to insert it into our tables
  foreach ($settings as $delta => $block) {
    db_insert('relevant_content_blocks')
      ->fields(array(
        'id' => $delta,
        'max_items' => isset($block['limit']) ? $block['limit'] : 0,
        'header_text' => isset($block['header_text']) ? $block['header_text'] : '',
        'header_format' => FILTER_FORMAT_DEFAULT, // TODO????
        'token_settings' => isset($block['token_settings']) ? $block['token_settings'] : '',
        'absolute_links' => 0, // NEW SETTING - DEFAULT TO RELATIVE LINKS
        'status' => 1, // NEW SETTING - DEFAULT TO ENABLED
      ))
      ->execute();

    // Add one row for each assigned type
    if (isset($block['types']) && is_array($block['types'])) {
      foreach ($block['types'] as $type) {
        db_insert('relevant_content_blocks_types')->fields(array('id' => $delta, 'type' => $type))->execute();
      }
    }

    // Add one row for each assigned vocab
    if (isset($block['vocabs']) && is_array($block['vocabs'])) {
      foreach ($block['vocabs'] as $vid) {
        db_insert('relevant_content_blocks_vocabs')->fields(array('id' => $delta, 'vid' => $vid))->execute();
      }
    }
    $ret[] = array('success' => TRUE, 'query' => $t('Converted block %name', array('%name' => $delta)));
  }

  // Variable cleanup
  variable_del('relevant_content');

  // Return the $ret
  return $ret;
}
