<?php
/**
 * @file
 * Markdownizer test.
 */

/**
 * Class MarkdownizerTestCase.
 *
 * Note: Does not matter how you indent HTML tags in HEREDOC tags.
 */
class MarkdownizerTestCase extends \DrupalWebTestCase {

  const MODULE = 'markdownizer';

  /**
   * Test object description.
   *
   * @return array
   *   Test suite information.
   */
  public static function getInfo() {
    return array(
      'name' => ucfirst(self::MODULE),
      'group' => 'Markdown',
      'description' => 'Testing parsing of Markdown.',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    try {
      module_load_include('install', self::MODULE);
      // Implementation of this function contains usage of "variable_get()",
      // that will get context from SimpleTest sandbox. By execution this
      // here we read and store its value into static variable inside, before
      // context will be changed in parent method. So, now we able to perform
      // "setUp" method that will change a context.
      _markdownizer_drush();

      // Allow to test the functionality when module located in
      // installation profile.
      $this->profile = drupal_get_profile();

      // Enable the Markdownizer module and its dependencies.
      parent::setUp(self::MODULE);
    }
    catch (\Exception $e) {
      $this->error($e->getMessage());
    }
  }

  /**
   * Test Markdown markup.
   *
   * @param string $input
   *   Markdown content.
   * @param string $expected
   *   Expected HTML.
   */
  private function compare($input, $expected) {
    $data = func_get_args();
    $data[0] = markdownizer()->text($input);

    foreach ($data as $i => $item) {
      $data[$i] = preg_replace("/\n+|\r+|\s+/", '', $item);
      $this->verbose($data[$i]);
    }

    $this->assert($data[0] === $data[1], 'Input string has been successfully converted into expected HTML.');
  }

  /**
   * Test heading tags.
   */
  public function testHeadlines() {
    $content = 'Headline';
    for ($i = 1; $i <= 6; $i++) {
      $this->compare(sprintf("%s $content %s", implode(array_fill(0, $i, '#')), $i), "<h$i>$content $i</h$i>");
    }
  }

  /**
   * Test <strong>.
   */
  public function testStrong() {
    $content = 'Bold';
    $this->compare("**$content**", "<p><strong>$content</strong></p>");
  }

  /**
   * Test <em>.
   */
  public function testItalic() {
    $content = 'Italic';
    $this->compare("*$content*", "<p><em>$content</em></p>");
  }

  /**
   * Test <ol> & <ul> lists.
   */
  public function testLists() {
    $content = 'List item';
    foreach (array('ol' => '1.', 'ul' => '-') as $type => $item) {
      $this->compare("$item $content", "<$type><li>$content</li></$type>");
    }
  }

  /**
   * Test source code (<pre>).
   */
  public function testBlockSourceCode() {
    $content = "array_map('test_function', [1, 2, 3]);";
    $markdown = <<<MARKDOWN
```php
$content
```
MARKDOWN;

    $html = <<<HTML
<pre>
  <code class="language-php">$content</code>
</pre>
HTML;

    $this->compare($markdown, $html);
  }

  /**
   * Test source code (<code>).
   */
  public function testInlineSourceCode() {
    $content = 'function($argument) {}';
    $this->compare("`$content`", "<p><code>$content</code></p>");
  }

  /**
   * Test <table>.
   */
  public function testTable() {
    $markdown = <<<MARKDOWN
| header | header | header |
| ------ | :----- | -----: |
| col    | col    | col    |
MARKDOWN;

    $html = <<<HTML
<table>
  <thead>
    <tr class="even">
      <th>header</th>
      <th style="text-align: left;">header</th>
      <th style="text-align: right;">header</th>
    </tr>
  </thead>
  <tbody>
    <tr class="odd">
      <td>col</td>
      <td style="text-align: left;">col</td>
      <td style="text-align: right;">col</td>
    </tr>
  </tbody>
</table>
HTML;

    $this->compare($markdown, $html);
  }

  /**
   * Test incorrect markdown.
   */
  public function testIncorrectMarkdown() {
    $this->compare('**bold', '<p>**bold</p>');
  }

}
