<?php

/**
 * Implementation of hook_menu().
 *
 * Defines the menu for the create user in master request.
 */
function bakery_nougat_menu() {
  $items = array();
  if (variable_get('bakery_is_master', 0)) {
    $items['bakery-nougat/register'] = array(
      'title' => 'Slave user register',
      'access callback' => 'bakery_nougat_taste_nougat_cookie',
      'page callback' => 'bakery_nougat_eat_nougat_cookie',
      'type' => MENU_CALLBACK,
    );
  }
  return $items;
}


/**
 * Callback for validate slave create user request.
 */
function bakery_nougat_taste_nougat_cookie() {

  $encoded_payload = isset($_POST['nougat']) ? $_POST['nougat'] : FALSE;
  $valid = FALSE;

  if ($encoded_payload) {
    $payload = unserialize(bakery_decrypt($encoded_payload));

    if (bakery_nougat_check_payload($payload)) {
      $valid = TRUE;
      $_SESSION['bakery_nougat'] = $payload['data'];
    }
  }
  return $valid;
}


/**
 * Menu callback, invoked on the slave
 */
function bakery_nougat_eat_nougat_cookie() {

  $cookie = $_SESSION['bakery_nougat'];

  $data = array();
  $name = trim($cookie['data']['name']);
  $mail = trim($cookie['data']['mail']);

  // Check if user exists with same email.
  $account = user_load_by_mail($mail);
  if ($account) {
    $data['errors']['mail'] = 1;
  }
  else {
    // Check username.
    $account = user_load_by_name($name);
    if ($account) {
      if ($cookie['data']['guess_username']) {
        $name = bakery_nougat_find_available_username($name);
      }
      else {
        $data['errors']['name'] = 1;
      }
    }
  }

  if (empty($data['errors'])) {
    // Create user.
    $userinfo = $cookie['data'];

    if (!$cookie['data']['pass']) {
      $pass = user_password();
    }
    else {
      $pass = $cookie['data']['pass'];
    }
    // Set additional properties.
    $userinfo['name'] = $name;
    $userinfo['mail'] = $mail;
    $userinfo['pass'] = $pass;
    $userinfo['init'] = $mail;
    $userinfo['status'] = 1;
    $userinfo['authname_bakery'] = $name;
    $account = user_save('', $userinfo);
    // Set some info to return to the slave.
    $data['name'] = $name;
    $data['uid'] = $account->uid;
    $data['mail'] = $mail;
    watchdog('bakery nougat', 'New external user: %name using module bakery nougat from slave !slave.', array('%name' => $account->name, '!slave' => $cookie['slave']), WATCHDOG_NOTICE, l(t('edit'), 'user/'. $account->uid .'/edit'));
  }

  $encoded_payload = bakery_nougat_encode_payload($data);

  $json = drupal_json_encode($encoded_payload);

  print $json;
  module_invoke_all('exit');
  exit();
}


/**
 * Register a local user in master site.
 *
 * @param $account
 *   Account information for user that's being registered in master site.
 *   it must have at least name and mail values.
 *   Remote user data will be reflected in this param.
 *
 * @param $pass
 *   Password for new user.
 *
 * @param $guess_username
 *   If username is not available in master find a valid username
 *   and register user with that username. Changed username will be returned.
 *
 *
 * @return
 *   FALSE if succedded (no errors), TRUE if connection error and an array of errors
 *   if master detected an error.
 **/
function bakery_nougat_register_user_master(&$account, $pass = NULL, $guess_username = FALSE) {

  // Pesismitic, initally we think we'll not succeed.
  $rc = TRUE;

  // This site must be a slave site to use this functionality.
  if (!variable_get('bakery_is_master', 0)) {

    // Flag for $account type to cast to array at exit if needed.
    $is_array = FALSE;

    if (is_array($account)) {
      $account = (Object) $account;
      $is_array = TRUE;
    }

    if (!variable_get('bakery_is_master', 0)) {
      // Construct

      // Collect user supported fields.
      foreach (variable_get('bakery_supported_fields', array('mail' => 'mail', 'name' => 'name')) as $type => $value) {
        if ($value && property_exists($account, $type)) {
          $payload['data'][$type] = $account->{$type};
        }
      }

      // Include password, if required.
      if (!is_null($pass)) {
        $payload['data']['pass'] = $pass;
      }

      // Include guess username flag, if required.
      if (!is_null($guess_username)) {
        $payload['data']['guess_username'] = $guess_username;
      }


      $encoded_payload = bakery_nougat_encode_payload($payload);


      $master_url = variable_get('bakery_master', 'http://drupal.org/') . 'bakery-nougat/register';

      $options = array(
        'headers' => array('Content-Type' => 'application/x-www-form-urlencoded; charset=utf-8'),
        'method' => 'POST',
        'data' => drupal_http_build_query(array('nougat' => $encoded_payload)),
      );
      $result = drupal_http_request($master_url, $options);
      if ($result->code != 200) {
        // Error!
        watchdog('bakery nougat', 'Error registering user in master site: %error', array('%error' => $result->code . ' ' . $result->error), WATCHDOG_ERROR);
      }
      else {
        $result_payload = unserialize(bakery_decrypt(drupal_json_decode($result->data)));
        if (bakery_nougat_check_payload($result_payload)) {
          // Check for errors.
          if (empty($result_payload['data']['errors'])) {
            watchdog('bakery nougat', 'Local user !uid registerd in master site with uid !uid_master.', array('!uid' => $account->uid, '!uid_master' => $result_payload['data']['uid']), WATCHDOG_INFO);

            $account = $result_payload['data'];

            $rc = FALSE;
          }
          else {
            // Returning errors-
          $rc =  $result_payload['errors'];
          }
        }
        else {
          watchdog('bakery nougat', 'Error registering user in master site. Payload did not pass crypt validation.', array(), WATCHDOG_ERROR);
        }
      }
    }

    if ($is_array) {
      // Convert $account to array.
      $account = (array) $account;
    }
  }
  return $rc;
}


/**
 * Encode a Bakery Nougat Payload.
 */
function bakery_nougat_encode_payload($payload) {

  $key = variable_get('bakery_key', '');

  $encoded_payload['data'] = $payload;
  $encoded_payload['timestamp'] = $_SERVER['REQUEST_TIME'];
  $encoded_payload['signature'] = hash_hmac('sha256', $encoded_payload['data'] . '/' . $encoded_payload['timestamp'], $key);

  $encoded_payload = bakery_encrypt(serialize($encoded_payload));

  return $encoded_payload;
}


/**
 * Validates a Bakery Nougat Payload.
 */
function bakery_nougat_check_payload($payload) {

  $rc = FALSE;

  $key = variable_get('bakery_key', '');
  $signature = hash_hmac('sha256', $payload['data'] . '/' . $payload['timestamp'], $key);


  if ($signature == $payload['signature'] && $payload['timestamp'] + variable_get('bakery_freshness', '3600') >= $_SERVER['REQUEST_TIME']) {
    $rc = TRUE;
  }
  return $rc;
}


/**
 * Find an available username.
 *
 * @param username
 *   Original username.
 *
 * @return
 *   Available username.
 */
function bakery_nougat_find_available_username($username) {
  // Remove host part if username is a mail address.
  $username = preg_replace('/@.*$/', '', $username);
  // Remove unwanted characters
  $username = preg_replace('/[^a-zA-Z0-9.-]/', '', $username);
  // if username generated from email record already exists, append underscore and number eg:(chris_123)
  $count = db_query("SELECT count(*) total FROM {users} WHERE LOWER(name) = LOWER(':username')", array(':username' => $username))->fetchObject();
  if ( $count->total > 0) {
    $sql = "SELECT SUBSTRING_INDEX(name,'_',-1) name FROM {users} WHERE name REGEXP ':regexp' ORDER BY CAST(SUBSTRING_INDEX(name,'_',-1) AS UNSIGNED) DESC LIMIT 1";
    $name_idx = db_query($sql, array(':regexp' => '^' . $username . '_[0-9]+$'))->fetchObject();
    $username .= '_' . ($name_idx->name + 1);
  }
  return $username;
}


/**
 * Implementation of hook_rules_action_info().
 */
function bakery_nougat_rules_action_info() {
  $actions = array(
    'bakery_nougat_create_account_local_and_remotely' => array(
      'group' => t('User'),
      'label' => t('Create user on master and locally'),
      'parameter' => array(
        'username' => array(
          'type' => 'text',
          'label' => t('Username'),
        ),
        'mail' => array(
          'type' => 'text',
          'label' => t('Mail'),
        ),
        'status' => array(
          'type' => 'boolean',
          'label' => t('Active user'),
        ),
        'pass' => array(
          'type' => 'text',
          'label' => t('Password'),
          'optional' => TRUE,
        ),
        'guess' => array(
          'type' => 'boolean',
          'label' => t('Guess username in master if given username is not available'),
        ),
      ),
      'provides' => array(
        'user_created' => array(
          'type' => 'user',
          'label' => t('Created local user'),
          'save' => TRUE,
        ),
      ),
    ),
  );
  return $actions;
}


/**
 * Callback for rules action that creates a new account in master and locally.
 *
 * Creates a new account in the master site and the in the current (slave) site.
 * It should only be called form a slave site.
 *
 * Must only be used form a slave site.
 * @param string $username
 *   New account desired username.
 * @param string $mail
 *   New account mail.
 * @param type $status
 *   New account status value.
 * @param type $pass
 *   New account pass.
 * @param type $guess
 *   Try to find a valid username if given is not available. See
 *   bakery_nougat_register_user_master().
 *
 * @return type
 *   Array with the new local account in the 'user_created' key if success.
 *   NULL if error was produced.
 *
 * @see bakery_nougat_register_user_master().
 */
 function bakery_nougat_create_account_local_and_remotely($username, $mail, $status = FALSE, $pass = NULL, $guess = FALSE) {

  $rc = NULL;

  // We first create remote user, then local.

  $remote_account = array(
    'name' => $username,
    'mail' => $mail,
  );

  if (!bakery_nougat_register_user_master($remote_account, $pass, $guess)) {
    // Ok, no errors were produced, create local user.
    $local_userdata = array(
      'name' => $remote_account['name'],
      'mail' => $remote_account['mail'],
      'status' => $status,
      'pass' => $pass,
      'init' => _bakery_init_field($remote_account['uid']),
    );

    $local_account = user_save(NULL, $local_userdata);

    if ($local_account) {
      // Set return value.
      $rc = array('user_created' => $local_account);
    }
    else {
      watchdog('bakery nougat', 'Error executing bakery_nougat_create_account_local_and_remotely: local user couldn\'t be created. User data: name => %name, mail => %mail', array('%name' => $local_userdata['name'], '%mail' => $local_userdata['mail']), WATCHDOG_ERROR);
    }
  }
  else {
    watchdog('bakery nougat', 'Error executing bakery_nougat_create_account_local_and_remotely: remote user on master couldn\'t be created. User data: name => %name, mail => %mail', array('%name' => $remote_account['name'], '%mail' => $remote_account['mail']), WATCHDOG_ERROR);
  }
  return $rc;
}
