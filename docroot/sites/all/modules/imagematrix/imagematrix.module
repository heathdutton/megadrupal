<?php

/**
 * @file
 * Views style plugin and content field formatter for displaying any
 * number of images in magazine-like layout, arranging them at different
 * sizes so that all images fit within a defined "square box".
 */

/**
 * Module build version.
 */
define('IMAGEMATRIX_BUILD', '7.x-1.x-dev-20120309b');

/**
 * Module installation path.
 */
define('IMAGEMATRIX_PATH', drupal_get_path('module', 'imagematrix'));

// Load all Field module hooks for Magazine Layout.
require_once IMAGEMATRIX_PATH . '/imagematrix.field.inc';

// Also load preprocess and theme functions - this needs to be forced here
// as otherwise imagematrix_preprocess_views_view_field() is not being
// picked up (as its theme implementation lives within  Views module).
require_once IMAGEMATRIX_PATH . '/theme/theme.inc';

/**
 * Implements hook_menu().
 */
function imagematrix_menu() {
  $items = array();
  $items['imagematrix_image/%'] = array(
    'title' => 'Image resizer',
    'page callback' => 'imagematrix_resize_image',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_views_api().
 */
function imagematrix_views_api() {
  return array(
    'api' => 3,
    'path' => IMAGEMATRIX_PATH . '/views',
  );
}

/**
 * Implements hook_theme().
 */
function imagematrix_theme() {
  return array(
    'views_view_imagematrix' => array(
      'template' => 'views-view-imagematrix',
      'file' => 'theme.inc',
      'path' => IMAGEMATRIX_PATH . '/theme',
      'variables' => array(
        'title' => NULL,
        'blocks' => array(),
        'block_classes' => array(),
        'block_styles' => array(),
        'field_group_classes' => array(),
        'field_group_styles' => array(),
      ),
    ),
    'views_view_imagematrix_block' => array(
      'file' => 'theme.inc',
      'path' => IMAGEMATRIX_PATH . '/theme',
      'variables' => array(
        'images' => NULL,
        'attributes' => NULL,
      ),
    ),
    'field_imagematrix_block' => array(
      'template' => 'field-imagematrix-block',
      'file' => 'theme.inc',
      'path' => IMAGEMATRIX_PATH . '/theme',
      'variables' => array(
        'images' => array(),
        'settings' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_image_default_styles().
 */
function imagematrix_image_default_styles() {
  $styles = array();

  $styles['imagematrix'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 1,
          'height' => 1,
        ),
        'weight' => 0,
      ),
    ),
  );

  return $styles;
}

/**
 * Callback to do on-the-fly image resizing.
 */
function imagematrix_resize_image($fid, $new_width = NULL, $new_height = NULL) {

  // Load original image details.
  $file = file_load($fid);

  // If one of new image dimensions was not provided, we need to calculate it
  // based on the other provided dimension. To do this though we need to know
  // current image ratio, therefore first we need to load current image info.
  // Also, if no new dimensions were provided, we'll just return original image.
  if (empty($new_width) || empty($new_height)) {

    // Load original image dimensions.
    $image = image_load($file->uri);
    if ($image === FALSE) {
      drupal_exit();
    }
    $ratio = $image->info['width'] / $image->info['height'];

    // If both new width and height are empty, or equal to those
    // of the original image, return original image.
    if (
      empty($new_width) && empty($new_height)
      || $new_width == $image->info['width'] && $new_height == $image->info['height']
    ) {
      file_transfer($image->source, array(
        'Content-Type' => $image->info['mime_type'],
        'Content-Length' => $image->info['file_size'],
      ));
    }
    // Only height was provided, width needs to be calculated.
    elseif (empty($new_width) && !empty($new_height)) {
      $new_width = floor($new_height * $ratio);
    }
    // Only width was provided, height needs to be calculated.
    elseif (!empty($new_width) && empty($new_height)) {
      $new_height = floor($new_width / $ratio);
    }
  }

  // Prepare parameters for creating/displaying a derivative image.
  $scheme = file_uri_scheme($file->uri);
  $target = file_uri_target($file->uri);

  // Add image dimensions to its filename. (Essentially, the same image
  // could be displayed multiple times in the same view, but in different
  // sizes, so we cannot assume that one image will always have the same size.
  $source = $target;
  $target_elements = explode('.', $target);
  $target_elements[count($target_elements) - 2] .= '_' . $new_width . 'x' . $new_height;
  $target = implode('.', $target_elements);

  // Load image style and force our required dimensions.
  $style = image_style_load('imagematrix');
  foreach ($style['effects'] as $ieid => $effect) {
    if (strpos($effect['name'], '_scale_and_crop') !== FALSE) {
      $style['effects'][$ieid]['data']['width'] = $new_width;
      $style['effects'][$ieid]['data']['height'] = $new_height;
    }
  }

  // Generate (if doesn't yet exist) and display derivative image.
  imagematrix_style_deliver($style, $scheme, $source, $target);
}

/**
 * Menu callback; Given a style and image path, generate a derivative.
 * This is almost exact copy of image_style_deliver(), with the only
 * difference being that source and target file names could be different.
 */
function imagematrix_style_deliver($style, $scheme, $source, $target) {
  // Check that the style is defined and the scheme is valid.
  if (!$style || !file_stream_wrapper_valid_scheme($scheme)) {
    drupal_exit();
  }

  $source_image_uri = $scheme . '://' . $source;
  $target_image_uri = $scheme . '://' . $target;
  $derivative_uri = image_style_path($style['name'], $target_image_uri);

  // If using the private scheme, let other modules provide headers and
  // control access to the file.
  if ($scheme == 'private') {
    if (file_exists($derivative_uri)) {
      file_download($scheme, file_uri_target($derivative_uri));
    }
    else {
      $headers = module_invoke_all('file_download', $source_image_uri);
      if (in_array(-1, $headers) || empty($headers)) {
        return drupal_access_denied();
      }
      if (count($headers)) {
        foreach ($headers as $name => $value) {
          drupal_add_http_header($name, $value);
        }
      }
    }
  }

  // Don't start generating the image if the derivative already exists or if
  // generation is in progress in another thread.
  $lock_name = 'image_style_deliver:' . $style['name'] . ':' . drupal_hash_base64($target_image_uri);
  if (!file_exists($derivative_uri)) {
    $lock_acquired = lock_acquire($lock_name);
    if (!$lock_acquired) {
      // Tell client to retry again in 3 seconds. Currently no browsers are known
      // to support Retry-After.
      drupal_add_http_header('Status', '503 Service Unavailable');
      drupal_add_http_header('Retry-After', 3);
      print t('Image generation in progress. Try again shortly.');
      drupal_exit();
    }
  }

  // Try to generate the image, unless another thread just did it while we were
  // acquiring the lock.
  $success = file_exists($derivative_uri) || image_style_create_derivative($style, $source_image_uri, $derivative_uri);

  if (!empty($lock_acquired)) {
    lock_release($lock_name);
  }

  if ($success) {
    $image = image_load($derivative_uri);
    file_transfer($image->source, array('Content-Type' => $image->info['mime_type'], 'Content-Length' => $image->info['file_size']));
  }
  else {
    watchdog('image', 'Unable to generate the derived image located at %path.', array('%path' => $derivative_uri));
    drupal_add_http_header('Status', '500 Internal Server Error');
    print t('Error generating image.');
    drupal_exit();
  }
}

/**
 * Implements hook_file_download().
 *
 * Control the access to files underneath the Image Matrix styles directory.
 * This is almost exact copy of image_file_download(), with the only
 * difference being some black magic to get an original name of the image file.
 */
function imagematrix_file_download($uri) {
  $path = file_uri_target($uri);

  // Private file access for image style derivatives.
  if (strpos($path, 'styles/imagematrix/') === 0) {
    $args = explode('/', $path);
    // Discard first three parts of the path (styles/imagematrix/<scheme>).
    array_shift($args);
    array_shift($args);
    array_shift($args);
    // Some black magic to get an original name of the image file.
    $filename = array_pop($args);
    $filename_core = substr($filename, 0, strrpos($filename, '.'));
    $original_filename_core = substr($filename, 0, strrpos($filename, '_'));
    $new_filename = $original_filename_core . substr($filename, strrpos($filename, '.'));
    array_push($args, $new_filename);

    // Then the remaining parts are the path to the image.
    $original_uri = file_uri_scheme($uri) . '://' . implode('/', $args);

    // Check that the file exists and is an image.
    if ($info = image_get_info($uri)) {
      // Check the permissions of the original to grant access to this image.
      $headers = module_invoke_all('file_download', $original_uri);
      if (!in_array(-1, $headers)) {
        return array(
          // Send headers describing the image's size, and MIME-type...
          'Content-Type' => $info['mime_type'],
          'Content-Length' => $info['file_size'],
          // ...and allow the file to be cached for two weeks (matching the
          // value we/ use for the mod_expires settings in .htaccess) and
          // ensure that caching proxies do not share the image with other
          // users.
          'Expires' => gmdate(DATE_RFC1123, REQUEST_TIME + 1209600),
          'Cache-Control' => 'max-age=1209600, private, must-revalidate',
        );
      }
    }
    return -1;
  }
}

/**
 * Flushes Image Matrix style images.
 */
function imagematrix_flush_style() {
  $style = image_style_load('imagematrix');
  image_style_flush($style);
  drupal_set_message(t('Style %style has been flushed.', array('%style' => 'imagematrix')));
}

