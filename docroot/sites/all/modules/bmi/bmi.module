<?php
/*
 *Implementing hook_menu
 */
function bmi_menu() {
  $items['bmi/calculate'] = array(
    'title' => 'BMI',
    'page callback' => 'bmi_calculate',
    'access arguments' => array('access bmi'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/bmi'] = array(
    'title' => 'BMI Settings',
    'description' => 'Administer BMI Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bmi_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/*
* Implememnting hook_permission
*/

function bmi_permission() {
  return array(
    'administer BMI' => array(
      'title' => t('Administer BMI'),
    ),  
    'access BMI' => array(
       'title' => t('Access BMI'),
    ),
 );
}

/*
* Implememnting hook_block_info
*/
function bmi_block_info() {
  $blocks['bmi-block'] = array(
    'info' => t('Body Mass Index'),
  );
 return $blocks;
}
/*
* Implememnting hook_block_view
*/
function bmi_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'bmi-block':
      $block['subject'] = t('Body Mass Index');
      $block['content'] = drupal_get_form('bmi_form');
      break;
  }
  return $block; 
}

/*
* Implementation of hook_form
*/
function bmi_form($form_type) {
  $form['body_weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Weight'),
    '#size' => 10,
    '#required' => TRUE,
    '#prefix' => '<div style="float:left;">',
    '#suffix' => '</div>',
    );
  $weight_units = array("kgs" => "kgs", "lbs" => "lbs");
  $height_units = array("cms" => "cms", "mts" => "mts");
  $form['weight_units'] = array(
    '#type' => 'select',
    '#title' => 'Units',
    '#required' => TRUE,
    '#options' => $weight_units,
    '#prefix' => '<div style="float:left;">',
    '#suffix' => '</div><div style="clear:both;"></div>',
    );
  $form['body_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#size' => 10,
    '#required' => TRUE,
    '#prefix' => '<div style="float:left;">',
    '#suffix' => '</div>',
    );
  $form['height_units'] = array(
    '#type' => 'select',
    '#title' => t('Units'),
    '#required' => TRUE,
    '#options' => $height_units,
    '#prefix' => '<div style="float:left;">',
    '#suffix' => '</div><div style="clear:both;"></div>',
    );
  $form['bmi_result'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="bmi_calculate_wrapper">',
    '#suffix' => '</div>',
    '#markup' => '',
  );
  $form['my_submit'] = array(
    '#type' => 'submit',
    '#ajax' => array(
      'callback' => 'bmi_calculate',
      'wrapper' => 'bmi_calculate_wrapper',
      'name' => 'submit1',
    ),
    '#value' => t('Calculate'),
  );
  return $form;
}

function bmi_calculate($form, $form_state) {
  $body_weight = $form_state['values']['body_weight'];
  $body_height = $form_state['values']['body_height'];
  $weight_unit = $form_state['values']['weight_units'];
  $height_unit = $form_state['values']['height_units'];

if ((is_numeric($body_weight)) && (is_numeric($body_height))) {
    $body_weight = convert_weight_kgs($body_weight, $weight_unit);
    $body_height = convert_height_mts($body_height, $height_unit);
    $bmi = 1.3*$body_weight/pow($body_height,2.5);
    $bmi = round($bmi, 2);
    $bmi_std = $body_weight/($body_height*$body_height);
    $bmi_std = round($bmi_std, 2);
    $bmi_text = get_bmi_text($bmi);
    $output = t("Your BMI value according to the Quetelet formula is");
    $output .= " <b>". $bmi_std ."</b><br>";
    $output .= t("Your adjusted BMI value according to Nick Trefethen of 
	  <a href='http://www.ox.ac.uk/media/science_blog/130116.html' target='_blank'>Oxford University's Mathematical Institute</a> is");
    $output .= " <b>". $bmi ."</b><br>". $bmi_text;
  }
  else {
    $output = "Please enter numeric values for weight and height fields";
  }
  $element = $form['bmi_result'];
  $element['#markup'] = $output;
  return $element;
}

function convert_weight_kgs($body_weight = NULL, $weight_unit = NULL) {
  if ($weight_unit == 'lbs') {
  // 1pound = 0.4359237
    return $body_weight * 0.4536;
  }
  // return the weight as is bcoz it is in kg only
    return $body_weight;
}

function convert_height_mts($body_height = NULL, $height_unit = NULL) {
  switch ($height_unit) {
    case 'mts':
      return $body_height;
      break;
    case 'cms':
    // 1 cms = 0.01 m.		
      return $body_height * 0.01;
  }
}

function get_bmi_text($bmi = NULL) {
  if ($bmi <= 18.5)
    $column = 'underweight_text';
  elseif ($bmi > 18.5 && $bmi <= 24.9)
    $column = 'normalweight_text';
  elseif ($bmi >24.9 && $bmi <= 29.9)
    $column = 'overweight_text';
  elseif ($bmi > 29.9)
    $column = 'obesity_text';
  $sql = 'SELECT '. $column .' FROM {bmi_settings}';
  $result = db_query($sql);
  foreach ($result as $weight_text) {
    return $weight_text->$column;
  }
    return NULL;
}
function bmi_admin_settings() {
  $sql = 'SELECT underweight_text, normalweight_text, overweight_text, obesity_text FROM {bmi_settings}';
  $result = db_query($sql);
  $data = array();
  foreach ($result as $weight_text) {
    $data['underweight_text'] = isset($weight_text->underweight_text) ? $weight_text->underweight_text : 'Underweight';
    $data['normalweight_text'] = isset($weight_text->normalweight_text) ? $weight_text->normalweight_text : 'Normal/Healthy';
    $data['overweight_text'] = isset($weight_text->overweight_text) ? $weight_text->overweight_text : 'Overweight';
    $data['obesity_text'] = isset($weight_text->obesity_text) ? $weight_text->obesity_text : 'Obesity';
  }
  
  $form['underweight_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Less than 18.5'),
    '#default_value' => $data['underweight_text'],
    '#rows' => 10,
    '#required' => TRUE,
  );
  $form['normalweight_text'] = array(
    '#type' => 'textarea',
    '#title' => t('18.5 - 24.9'),
    '#default_value' => $data['normalweight_text'],
    '#rows' => 10,
    '#required' => TRUE,
  );
  $form['overweight_text'] = array(
    '#type' => 'textarea',
    '#title' => t('25.0 - 29.9'),
    '#default_value' => $data['overweight_text'],
    '#rows' => 10,
    '#required' => TRUE,
  );
  $form['obesity_text'] = array(
    '#type' => 'textarea',
    '#title' => t('BMI of 30 or greater'),
    '#default_value' => $data['obesity_text'],
    '#rows' => 10,
    '#required' => TRUE,
  );
  $form['#submit'][] = 'bmi_settings_form_submit';
  return system_settings_form($form);
}

function bmi_settings_form_submit($form, &$form_state) {
  $count = db_query('SELECT COUNT(id) FROM {bmi_settings}')->fetchField();
  if ($count > 0) {
   //update
   db_update('bmi_settings')
   ->fields(array(
            'underweight_text' => $form_state['values']['underweight_text'],
            'normalweight_text' => $form_state['values']['normalweight_text'],
            'overweight_text' => $form_state['values']['overweight_text'],
            'obesity_text' => $form_state['values']['obesity_text'],
   ))
   ->execute();
  } else {
    db_insert('bmi_settings')
    ->fields(array(
         'underweight_text' => $form_state['values']['underweight_text'],
         'normalweight_text' => $form_state['values']['normalweight_text'],
         'overweight_text' => $form_state['values']['overweight_text'],
         'obesity_text' => $form_state['values']['obesity_text'],
   ))
   ->execute();
  }
}