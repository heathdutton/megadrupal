<?php

/**
 * @file
 * Test cases for the Supertext translator module.
 */

/**
 * Basic tests for the supertext translator.
 */
class TMGMTSupertextTestCase extends TMGMTBaseTestCase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('Supertext Translator tests'),
      'description' => t('Tests the Supertext translator plugin integration.'),
      'group' => t('Translation Management'),
    );
  }

  /**
   * Overrides SimplenewsTestCase::setUp()
   */
  function setUp() {
    parent::setUp(array('tmgmt_ui', 'tmgmt_supertext', 'tmgmt_supertext_test'));
    $this->loginAsAdmin();
    $this->setEnvironment('de');
    $this->setEnvironment('es');
    $this->setEnvironment('it');
    $this->setEnvironment('ru');
    // We are testing with UTC Timezone and not the one from the Server.
    variable_set('configurable_timezones', 0);
    variable_set('date_default_timezone', 'UTC');
    date_default_timezone_set('UTC');
  }

  /**
   * Tests basic API methods of the plugin.
   */
  function testSupertext() {
    // Loading the Translator.
    $translator = tmgmt_translator_load('supertext');
    $translator->settings = array(
      'url' => url('tmgmt_supertext_mock/api/v1/', array('absolute' => TRUE)),
    );
    $translator->save();

    // The Translator is all the time available
    // (quoting even without credentials).
    $this->assertTrue($translator->isAvailable());

    // Creating the Job.
    $job = $this->createJob();
    $job->translator = $translator->name;
    $job->source_language = "en";
    $job->target_language = "ru";

    $item = $job->addItem('test_source', 'test', '1');
    $item->data = array(
      'wrapper' => array(
        '#text' => 'Hello world',
      ),
    );
    $item->save();


    // No language mapping needed for RU (directly supported by Supertext),
    // so this has to be TRUE.
    $this->assertTrue($job->isTranslatable());

    $job->target_language = "de";
    $job->save();

    // We don't have yet a language mapping for DE, so this has to be FALSE.
    $this->assertFalse($job->isTranslatable());

    // Checking the translator Manage page, it should show language mapping
    // selects for all langauges which are not directly supported by Supertext.
    $this->drupalGet('admin/config/regional/tmgmt_translator/manage/' . $translator->name);
    $languages = language_list();
    $this->assertText(t('We need a more exact definition of @language_name, there are different versions of it.', array('@language_name' => $languages['en']->name)));
    $this->assertText(t('We need a more exact definition of @language_name, there are different versions of it.', array('@language_name' => $languages['de']->name)));
    $this->assertText(t('We need a more exact definition of @language_name, there are different versions of it.', array('@language_name' => $languages['es']->name)));
    $this->assertText(t('We need a more exact definition of @language_name, there are different versions of it.', array('@language_name' => $languages['it']->name)));

    // RU is directly supported, so no need for showing this to the user.
    $this->assertNoText(t('We need a more exact definition of @language_name,  there are different versions of it.', array('@language_name' => $languages['ru']->name)));

    // Submitting Language Mappings and wrong credentials it should show a
    // message that the credentials are wrong.
    $edit = array(
      'settings[api_username]' => 'testing_wrong@test.com',
      'settings[api_token]' => 'da422948-b6c7-4a64-8e14-d7f12889babc',
      'settings[language_mapping_de]' => 'de-CH',
      'settings[language_mapping_es]' => 'es-LAm',
      'settings[language_mapping_it]' => 'it-IT',
      'settings[language_mapping_en]' => 'en-GB',
      'settings[currency]' => 'CHF',
    );
    $this->drupalPost('admin/config/regional/tmgmt_translator/manage/' . $translator->name, $edit, t('Save translator'));
    $this->assertText(t('Your password or username is wrong.'));

    // Url setting is overridden by the save of the translator in the UI.
    entity_get_controller('tmgmt_translator')->resetCache();
    $translator = tmgmt_translator_load($translator->tid);
    $translator->settings['url'] = url('tmgmt_supertext_mock/api/v1/', array('absolute' => TRUE));
    $translator->save();

    // Correct credentials, now no message that credentials are wrong.
    $edit = array(
      'settings[api_username]' => 'testing@test.com',
      'settings[api_token]' => 'da422948-b6c7-4a64-8e14-d7f12889babc',
    );
    $this->drupalPost('admin/config/regional/tmgmt_translator/manage/' . $translator->name, $edit, t('Save translator'));
    $this->assertNoText(t('Your password or username is wrong.'));

    // Url setting is overridden by the save of the translator in the UI.
    entity_get_controller('tmgmt_translator')->resetCache();
    $translator = tmgmt_translator_load($translator->tid);
    $translator->settings['url'] = url('tmgmt_supertext_mock/api/v1/', array('absolute' => TRUE));
    $translator->save();

    // RU should be added to the setting even it was not showed to the user,
    // because it is directly supported.
    $this->assertTrue($translator->getSetting('language_mapping_ru'));

    // Now there is a language mapping for DE, so this has to be TRUE.
    $this->assertTrue($job->isTranslatable());

    // Checking the SupertextOrderObject.
    $plugin = tmgmt_translator_plugin_controller('supertext');
    $object = $plugin->generateSupertextOrderObject($job);
    $this->assertEqual('CHF', $object->Currency);
    $this->assertEqual('en-GB', $object->SourceLang);
    $this->assertEqual('de-CH', $object->TargetLang);
    $this->assertEqual('Hello world', $object->Groups['0']->Items['0']->Content);
    $this->assertEqual('wrapper', $object->Groups['0']->Items['0']->Id);

    // Job Submitting Form, the Mock API returns that the credentials are wrong.
    $this->drupalGet('admin/tmgmt/jobs/' . $job->tjid . '/manage');
    $this->assertText(t('The entered API email and token are not valid. You still can see the quote, but will not be able to submit a job.'));
    $this->assertText(t('Thu, 05/03/2012 - 12:09, Price 86 EUR'));

    // Required for submitting a job.
    $job->settings['supertext-job'] = "6:1";
    $job->save();

    // Submitting job, checking if Job now active and messages are
    // shown to the user.
    $job->requestTranslation();
    $this->assertTrue($job->isActive());
    $messages = $job->getMessages();
    $last_message = end($messages);
    $this->assertEqual('Thank you very much for your order. Order Id: @orderid. Deadline: @deadline.', $last_message->message);
    $this->assertEqual('16516', $last_message->variables['@orderid']);
    $this->assertEqual('Thu, 05/03/2012 - 12:09', $last_message->variables['@deadline']);

    // Preparing of post from supertext, with a wrong ReferenceData Hash.
    $post = new stdClass();
    $post->ReferenceData = $job->tjid . ':i_am_wrong';
    $post_json = json_encode($post);

    // Calling the callback url from the module.
    $response = $this->curlExec(array(CURLOPT_URL => $object->CallbackUrl, CURLOPT_POST => TRUE, CURLOPT_POSTFIELDS => $post_json));

    // Should be NoAccess.
    $this->assertResponse(403);

    // Preparing of post from supertext, now with correct ReferenceData Hash.
    $post = new stdClass();
    $post->ReferenceData = $job->tjid . ':' . tmgmt_supertext_hash($job->tjid);
    $post->Groups = $object->Groups;
    $post->Groups['0']->Items['0']->Content = "de-CH_" . $post->Groups['0']->Items['0']->Content;
    $post_json = json_encode($post);

    // Calling the callback url from the module.
    $response = $this->curlExec(array(CURLOPT_URL => $object->CallbackUrl, CURLOPT_POST => TRUE, CURLOPT_POSTFIELDS => $post_json));

    // Checking if Response is correct.
    $this->assertResponse(200);
    $this->assertEqual('Job submitted', $response);


    // Clear job item caches.
    entity_get_controller('tmgmt_job_item')->resetCache();

    // JobItems should be in Review.
    foreach ($job->getItems() as $item) {
      $this->assertTrue($item->isNeedsReview());
    }

    // Checking if translation is correctly saved.
    $items = $job->getItems();
    $item = end($items);
    $data = $item->getData();
    $this->assertEqual('de-CH_Hello world', $data['wrapper']['#translation']['#text']);
  }

}
