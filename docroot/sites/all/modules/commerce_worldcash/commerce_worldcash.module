<?php
/**
 * @file commerce_worldcash.module
 *
 * @author Andy Truong <andy@go1.com.au>
 * @version 1.0
 * @package commerce
 */

/**
 * Impements hook_menu().
 */
function commerce_worldcash_menu() {
  $items['commerce-worldcash/error'] = array(
    'title' => 'Error callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'page callback' => 'commerce_worldcash_error_callback',
  );

  $items['commerce-worldcash/cancel'] = array(
    'title' => 'Cancel callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'page callback' => 'commerce_worldcash_cancel_callback',
  );

  return $items;
}

/**
 * Implements hook_payment_method_info().
 */
function commerce_worldcash_commerce_payment_method_info() {
  $payment_methods['commerce_worldcash'] = array(
    'base' => 'commerce_worldcash',
    'title' => t('Worldcash'),
    'short_title' => t('Worldcash'),
    'description' => t('Worldcash payment method'),
    'active' => FALSE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );
  return $payment_methods;
}

/**
 * Callback form wc â€º settings form.
 */
function commerce_worldcash_settings_form($settings = array()) {
  $settings += commerce_worldcash_default_settings();

  $payment_method = commerce_payment_method_load('commerce_worldcash');

  // App ID
  $form['ApplicationId'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Application ID'),
    '#default_value' => $settings['ApplicationId'],
  );

  // App Version
  $form['ApplicationVersionId'] = array(
    '#type' => 'textfield',
    '#title' => t('Application Version Id'),
    '#required' => TRUE,
    '#default_value' => $settings['ApplicationVersionId'],
  );

  // Merchant API Key
  $form['MerchantAPIKey'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Merchant API Key'),
    '#default_value' => $settings['MerchantAPIKey'],
  );

  // Currency
  $form['Currency'] = array(
    '#type' => 'select',
    '#required' => TRUE,
    '#title' => t('Currency'),
    '#options' => array('AUD' => 'AUD'),
    '#default_value' => $settings['Currency'],
  );

  return $form;
}

/**
 * Default settings for worldcash payment method.
 */
function commerce_worldcash_default_settings() {
  return array(
    'ApplicationId' => 1,
    'ApplicationVersionId' => 1,
    'MerchantAPIKey' => '',
    'Currency' => 'AUD',
  );
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a WPS form.
 */
function commerce_worldcash_redirect_form($form, &$form_state, $order, $payment_method) {
  $ok = !empty($payment_method['settings']['ApplicationId']);
  $ok = $ok && !empty($payment_method['settings']['ApplicationVersionId']);
  $ok = $ok && !empty($payment_method['settings']['MerchantAPIKey']);
  if (!$ok) {
    drupal_set_message(t('WorldCash is not configured for use.'), 'error');
    return array();
  }

  // @TODO: Need a better
  if ($return_txnid = arg(4)) {
    commerce_worldcash_payment_return_callback($return_txnid);
  }

  $form['#action'] = 'http://worldcash-verifier.cloudapp.net/worldcash_start.aspx';
  $form['WorldCash_TransactionID'] = array(
    '#type' => 'hidden',
    '#value' => commerce_worldcash_register_hosted_checkout($order, $payment_method),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to WorldCash'),
  );

  return $form;
}

function commerce_worldcash_error_callback() {
  debug(func_get_args(), TRUE);
  drupal_goto('<front>');
}

function commerce_worldcash_cancel_callback() {
  debug(func_get_args(), TRUE);
  drupal_goto('<front>');
}

/**
 * Clone of Drupal\Component\Uuid\Php()
 */
function commerce_worldcash_uuid() {
  $hex = substr(hash('sha256', drupal_random_bytes(16)), 0, 32);

  // The field names refer to RFC 4122 section 4.1.2.
  $time_low = substr($hex, 0, 8);
  $time_mid = substr($hex, 8, 4);

  $time_hi_and_version = base_convert(substr($hex, 12, 4), 16, 10);
  $time_hi_and_version &= 0x0FFF;
  $time_hi_and_version |= (4 << 12);

  $clock_seq_hi_and_reserved = base_convert(substr($hex, 16, 4), 16, 10);
  $clock_seq_hi_and_reserved &= 0x3F;
  $clock_seq_hi_and_reserved |= 0x80;

  $clock_seq_low = substr($hex, 20, 2);
  $nodes = substr($hex, 20);

  $uuid = sprintf('%s-%s-%04x-%02x%02x-%s', $time_low, $time_mid, $time_hi_and_version, $clock_seq_hi_and_reserved, $clock_seq_low, $nodes);

  return $uuid;
}

/**
 * Register our order with WorldCash hosted-checkout service.
 *
 * @param type $order
 * @return string Transaction ID
 */
function commerce_worldcash_register_hosted_checkout($order, $payment_method) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $xml_cart_item = file_get_contents(drupal_get_path('module', 'commerce_worldcash') . '/misc/cart_item.xml');
  $order_currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  $currency_code = $payment_method['settings']['Currency'];

  # Error if configured currency (AUD) is not enabled
  #if ($order_currency_code !== $payment_method['settings']['Currency']) {
  #}

  // Build cart items
  $post_cart_items = '';
  foreach ($order_wrapper->commerce_line_items as $line_item) {
    $price = $line_item->commerce_unit_price->value();
    $price = commerce_currency_convert($price['amount'], $order_currency_code, $currency_code);
    $price = commerce_currency_amount_to_decimal($price, $currency_code);
    $post_cart_items .= str_replace(array('%name', '%price', '%qty'), array(
        commerce_line_item_title($line_item->value()),
        $price,
        (int)$line_item->quantity->value()
      ), $xml_cart_item
    );
  }

  $total = $order_wrapper->commerce_order_total->value();
  $total = commerce_currency_convert($total['amount'], $order_currency_code, $currency_code);
  $total = commerce_currency_amount_to_decimal($total, $currency_code);

  $uuids = commerce_worldcash_generate_uuids($order);
  $txnid = $uuids['transaction_id'];
  $return_txnid = $uuids['return_transaction_id'];

  $post_hosted_checkout = file_get_contents(drupal_get_path('module', 'commerce_worldcash') . '/misc/hosted_checkout.xml');
  $post_hosted_checkout = str_replace('%cart_items', $post_cart_items, $post_hosted_checkout);
  $post_hosted_checkout = str_replace('%ApplicationId', $payment_method['settings']['ApplicationId'], $post_hosted_checkout);
  $post_hosted_checkout = str_replace('%ApplicationVersionId', $payment_method['settings']['ApplicationVersionId'], $post_hosted_checkout);
  $post_hosted_checkout = str_replace('%MerchantAPIKey', $payment_method['settings']['MerchantAPIKey'], $post_hosted_checkout);
  $post_hosted_checkout = str_replace('%Currency', $payment_method['settings']['Currency'], $post_hosted_checkout);
  $post_hosted_checkout = str_replace('%ReturnTransactionId', $return_txnid, $post_hosted_checkout);
  $post_hosted_checkout = str_replace('%ReturnURL', url("checkout/{$order->order_id}/payment/return/" . $order->data['payment_redirect_key'], array('absolute' => TRUE)), $post_hosted_checkout);
  $post_hosted_checkout = str_replace('%ErrorURL', url('commerce-worldcash/error', array('absolute' => TRUE)), $post_hosted_checkout);
  $post_hosted_checkout = str_replace('%CancelURL', url('commerce-worldcash/cancel', array('absolute' => TRUE)), $post_hosted_checkout);
  $post_hosted_checkout = str_replace('%OrderId', $order->order_id, $post_hosted_checkout);
  $post_hosted_checkout = str_replace('%DateTime', date('Y-m-d\TH:i:s.\0000P'), $post_hosted_checkout);
  $post_hosted_checkout = str_replace('%TotalAmount', $total, $post_hosted_checkout);
  $post_hosted_checkout = str_replace('%TransactionId', $txnid, $post_hosted_checkout);

  $ch = curl_init('http://worldcash-verifier.cloudapp.net/api/cart');
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: text/xml'));
  curl_setopt($ch, CURLOPT_POSTFIELDS, $post_hosted_checkout);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  $response = curl_exec($ch);

  # kpr($post_hosted_checkout); kpr($response); exit;

  $error = !($response = json_decode($response));
  $error = $error || ($response->Id != 400);
  if ($error) {
    $exception = new Exception('Unexpected response from WorldCash.');
    watchdog_exception(WATCHDOG_CRITICAL, $exception);
    throw new Exception;
  }

  return $txnid;
}

/**
 * Generate UUID for WC services, save them to database.
 *
 * @param stdClass $order
 */
function commerce_worldcash_generate_uuids($order) {
  // Fetch existing row if it's existing
  $record = db_select('commerce_worldcash_order' , 'wco');
  $record->condition('wco.order_id', $order->order_id);
  $record->fields('wco', array('order_id', 'transaction_id', 'return_transaction_id'));
  if ($record = $record->execute()->fetchAssoc()) {
    if (!empty($record['transaction_id']) && !empty($record['return_transaction_id'])) {
      return (array) $record;
    }
  }

  // It's not existing, create the record
  $record = array(
    'order_id' => $order->order_id,
    'transaction_id' => commerce_worldcash_uuid(),
    'return_transaction_id' => commerce_worldcash_uuid(),
  );

  $query = db_insert('commerce_worldcash_order')
    ->fields($record)
    ->execute();

  if (FALSE !== $query) {
    return $record;
  }

  throw new Exception('Unable to generate UUIDs.');
}

/**
 *
 * @param type $return_txnid
 */
function commerce_worldcash_find_order_id_from_return_txnid($return_txnid) {
  $order_id = "SELECT order_id FROM {commerce_worldcash_order} WHERE return_transaction_id = :return_transaction_id";
  $order_id = db_query($order_id, array(':return_transaction_id' => $return_txnid));
  $order_id = $order_id->fetchColumn();
  if (!$order_id) {
    return FALSE;
  }
  return $order_id;
}

function commerce_worldcash_transaction($payment_method, $order, $charge, $name) {
//  $transaction = commerce_payment_transaction_new('commerce_payment_example', $order->order_id);
//  $transaction->instance_id = $payment_method['instance_id'];
//  $transaction->amount = $charge['amount'];
//  $transaction->currency_code = $charge['currency_code'];
//  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
//  $transaction->message = 'Name: @name';
//  $transaction->message_variables = array('@name' => $name);
//
//  commerce_payment_transaction_save($transaction);
}

/**
 * Payment method callback: redirect form return validation.
 *
 * @param type $order
 * @param type $payment_method
 * @see commerce_payment_redirect_pane_checkout_form()
 */
function commerce_worldcash_redirect_form_validate($order, $payment_method) {
  // ReturnTransactionID=531ee9f0-1542-4079-8f00-edbc32503dea&BankTransactionID=32

  $order_id = commerce_worldcash_find_order_id_from_return_txnid($_GET['ReturnTransactionID']);
  if (!$order_id || ($order_id != $order->order_id)) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Callback for redirect form submit.
 *
 * @param Entity $order
 * @param stdClass $payment_method
 */
function commerce_worldcash_redirect_form_submit($order, $payment_method) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Calculate amount
  $amount = $order_wrapper->commerce_order_total->value();
  $amount = commerce_currency_convert($amount['amount'], $order_currency_code, $currency_code);
  $amount = commerce_currency_amount_to_decimal($amount, $currency_code);
  $amount = commerce_currency_decimal_to_amount($amount, $currency_code, $round = FALSE);

  $transaction = commerce_payment_transaction_new('commerce_worldcash', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $amount;
  $transaction->currency_code = $payment_method['settings']['Currency'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;

  commerce_payment_transaction_save($transaction);
}
