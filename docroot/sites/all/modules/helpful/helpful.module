<?php
/**
 * @file
 */

/**
 * Implements hook_permission()
 */
function helpful_permission(){
  return array(
    'access helpful' => array(
      'title' => t('Access helpful information.'), 
      'description' => t('Access helpful information and links.'),
    ),
    'administer helpful' => array(
      'title' => t('Administer helpful module.'), 
      'description' => t('Administer helpful topics and settings.'),
    ),
  );
}

/**
 * Implements hook_menu_alter()
 */
function helpful_menu_alter(&$items){
  
  //Replace advanced help menu callbacks with our own.
  //s$items[];
  $items['help/%/%']['access callback'] = 'helpful_page_access';
  $items['help/%/%']['access arguments'] = array(1, 2);
}

/**
 *
 */
function helpful_page_access($module, $topic){
  $topic_data = advanced_help_get_topic($module, $topic);

  //First, check if this is a "message" topic type or if page = FALSE
  //If topic help type = 'message', page should not be present.
  if ((isset($topic_data['ini']['page']) && $topic_data['ini']['page'] == FALSE)
    || (isset($topic_data['ini']['help type']) && $topic_data['ini']['help type'] != 'message')) {
    return FALSE;
  }
  
  //Next check if user_access('access helpful');
  if (user_access('access helpful')){
    return TRUE;
  }
  
  //Next, fallback to advanced_help default access check
  return user_access('view advanced help topic');
  
}

/**
 * Implements hook_help()
 */
function helpful_help($path, $args) {
  if (user_access('access helpful')){
    $output = '';
    $help = helpful_get_help_paths();

    //If no help here, bail out.
    if (!isset($help[$path])) {
      return;
    }

    foreach ($help[$path] as $help_item){
      
      //Check access with modules
      $access = module_invoke_all('helpful_help_access', $path, $args, $help_item);
      
      //One FALSE and we deny
      if (count($access) == count(array_filter($access))){
        $help_item['args'] = $args;
        $help_item['path'] = $path;
        $output .= theme('helpful_topic', $help_item);
      }
    }
    return $output;
  }
}

/**
 * Implements hook_theme().
 */
function helpful_theme() {
  $hooks['helpful_topic'] = array(
    'variables' => array(
      'module'   => NULL,
      'topic'    => NULL,
      'type'     => 'icon',
      'title'    => '',
      'contents' => '',
      'args' => array(),
      'path' => '',
    ),
  );
  return $hooks;
}

/**
 * Preprocessor for theme_helpful_topic()
 */
function template_preprocess_helpful_topic(&$vars){
  $vars['contents'] = advanced_help_view_topic($vars['module'], $vars['topic']);
}

/**
 * Generates content for a help topic.
 */
function theme_helpful_topic($vars){
  return $vars['contents'];
}

/**
 * Cache getter for help topic paths
 */
function helpful_get_help_paths() {
  $help = cache_get('helpful_help_paths');
  if (empty($help)){
    $help = helpful_paths_rebuild();
  }
  return $help;
}

/**
 * Find all advanced_help topics with a set "help path"
 */
function helpful_paths_rebuild() {
  $all_topics = advanced_help_get_topics();
  $help_paths = array();
  
  foreach ($all_topics as $module => $topics){
    foreach ($topics as $name => $topic){
      if (isset($topic['ini']['help path'])){
        $path = $topic['ini']['help path'];
        $item = array(
          'module' => $module,
          'topic' => $name,
          'ini' => $topic['ini'],
        );
        
        if (!isset($help_paths[$path])){
          $help_paths[$path] = array($item);
        } else {
          $help_paths[$path][] = $item;
        }
      }
    }
  }
  cache_set('helpful_help_paths', $help_paths, CACHE_PERMANENT);
  return $help_paths;
}
