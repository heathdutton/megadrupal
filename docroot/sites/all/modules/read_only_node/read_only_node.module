<?php
/**
 * @file
 * Main file for the Read only node module.
 */

/**
 * Implements hook_help().
 */
function read_only_node_help($path, $arg) {
  switch ($path) {
    case 'admin/help#read_only_node':
      $output = '<p>' . t('The read only node module simply allows you 
        to set a node as read only by adding a 
        new "Publishing option" to it.') . '</p>';
      $output .= '<p>' . t('The module commes with 4 new permission :') . '</p>';
      $output .= '<ul>';
      $output .= '<li>' . t('set node as read only') . '</li>';
      $output .= '<li>' . t('set node stiky') . '</li>';
      $output .= '<li>' . t('set node status') . '</li>';
      $output .= '<li>' . t('set node promote') . '</li>';
      $output .= '</ul>';
      $output .= '<p>' . t(' When a node is set as Read only, only the role with 
        the permission "set node as read only" can edit it.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function read_only_node_permission() {
  return array(
    'set node as read only' => array(
      'title' => t('Set node as read only'),
      'description' => t('Use read only state of a node entity.'),
    ),
    'set node sticky' => array(
      'title' => t('Set node sticky'),
      'description' => t('Use sticky state of a node entity.'),
    ),
    'set node status' => array(
      'title' => t('Set node status'),
      'description' => t('Use published state of a node entity.'),
    ),
    'set node promote' => array(
      'title' => t('Set node promote to front'),
      'description' => t('Use promoted state of a node entity.'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function read_only_node_form_node_type_form_alter(&$form, $form_state) {
  // Add read only to publishing options.
  $form['workflow']['node_options']['#options'] = array(
    'read_only' => t('Read Only'),
  ) + $form['workflow']['node_options']['#options'];
}

/**
 * Implements hook_form_alter().
 */
function read_only_node_form_alter(&$form, &$form_state, $form_id) {

  // If it's a new node, fill the read only default option.
  if (isset($form['#node'])) {
    // Get the node of the form.
    $node = $form['#node'];
    // Get the default node publishing options.
    $node_options = variable_get('node_options_' . $node->type, array('status', 'promote'));
    if (!isset($node->nid) || isset($node->is_new)) {
      if (!isset($node->read_only)) {
        $node->read_only = (int) in_array('read_only', $node_options);
      }
    }
  }

  // Apply to all node entity edit form.
  if (isset($form['#node_edit_form']) && $form['#node_edit_form'] === TRUE) {
    // If user has no "administer content" but set node something.
    $access = TRUE;
    // Unset status.
    if (!user_access('set node status')) {
      unset($form['options']['status']);
    }
    // Unset sticky.
    if (!user_access('set node sticky')) {
      unset($form['options']['sticky']);
    }
    // Unset promote.
    if (!user_access('set node promote')) {
      unset($form['options']['promote']);
    }

    // Add read only checkbox.
    if (user_access('set node read only')) {
      // Get default value for ready field.
      if (isset($form['#node']->read_only)) {
        $default = $form['#node']->read_only;
      }
      else {
        $default = 0;
      }
      // Build field.
      $form['options']['read_only'] = array(
        '#type' => 'checkbox',
        '#title' => t('Read Only'),
        '#default_value' => $default,
        '#weight' => -99,
      );
    }

    // No publishing options at all.
    if (!user_access('set node promote') && !user_access('set node sticky') && !user_access('set node status') && !user_access('set node read only')) {
      $access = FALSE;
    }

    // Add fieldset access.
    $form['options']['#access'] = $access;
  }
}

/**
 * Implements hook_node_access().
 */
function read_only_node_node_access($node, $op, $account) {
  if (is_object($node) && in_array($op, array('update')) && $node->read_only) {
    if (!user_access('set node as read only')) {
      // The node isn't in an OG context, so no need to keep testing.
      return NODE_ACCESS_DENY;
    }
    else {
      return NODE_ACCESS_IGNORE;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Override or insert variables into the node templates.
 */
function read_only_node_preprocess_node(&$variables) {
  $variables['read_only'] = ($variables['read_only']) ? TRUE : FALSE;
}
