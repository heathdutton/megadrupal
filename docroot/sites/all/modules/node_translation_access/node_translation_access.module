<?php

/**
 * @file
 * Node Translation access module.
 */

require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'node_translation_access') . '/includes/node_translation_access.model.inc';
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'node_translation_access') . '/includes/node_translation_access.form.inc';

/**
 * Implements hook_BASE_FORM_ID_alter().
 */
function node_translation_access_form_node_form_alter(&$form, &$form_state) {
  // Deny access form.
  $form = node_translation_access_languages_form($form, $form_state, $form_state['node']);
  // Filter for language list.
  if (!empty($form['language']['#options'])) {
    foreach ($form['language']['#options'] as $langcode => $language) {
      if (!user_access('edit node translation access ' . $langcode)) {
        unset($form['language']['#options'][$langcode]);
      }
    }
  }
}

/**
 * Implements hook_BASE_FORM_ID_alter().
 */
function node_translation_access_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  $form = node_translation_access_content_type_languages_form($form, $form_state);
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function node_translation_access_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form['#entity_type'] == 'node') {
    $entity_form = node_translation_access_languages_form($entity_form, $form_state, $entity_form['#entity']);
  }
}

/**
 * Implements hook_node_submit().
 */
function node_translation_access_node_submit($node, $entity_form, $child_form_state) {
  $node->denied_languages = $child_form_state['values']['translation_access']['languages'];
}

/**
 * Implements hook_node_insert().
 */
function node_translation_access_node_insert($node) {
  node_translation_access_denied_save($node);
}

/**
 * Implements hook_node_update().
 */
function node_translation_access_node_update($node) {
  node_translation_access_denied_save($node);
}

/**
 * Implements hook_node_delete().
 */
function node_translation_access_node_delete($node) {
  node_translation_access_denied_delete($node);
}

/**
 * Implements hook_node_access().
 */
function node_translation_access_node_access($node, $op, $account) {
  if ($op == 'view' && is_object($node) && node_translation_access_denied($node->nid, $node->type)) {
    return NODE_ACCESS_DENY;
  }
  elseif ($op == 'update') {
    global $language;
    $locale = $language->language;

    if (!user_access('edit node translation access ' . $locale)) {
      return NODE_ACCESS_DENY;
    }
    if ((empty($node->translations->data[$locale]) || arg(3) == $node->language) && !user_access('edit node translation access ' . $node->language)) {
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_query_alter().
 */
function node_translation_access_query_alter($query) {
  // @todo: May be do user_access ckecking less global.
  // user_access is needed to let admins save node reference with denied items.
  if ($query->hasTag('node access') || ($query->hasTag('views') && !user_access('bypass node access'))) {
    global $language;
    $tables = $query->getTables();
    foreach ($tables as $table_alias => $table) {
      if ($table['table'] == 'node') {
        $query->leftJoin('node_translation_access', 'ta', "$table_alias.nid = ta.nid AND ta.language = '$language->language'");
        $query->isNull('ta.nid');
      }
    }
  }
}

/**
 * Implements hook_node_view().
 */
function node_translation_access_node_view($node, $view_mode, $langcode) {
  if (user_access('manage content') && node_translation_access_denied($node->nid, $node->type)) {
    drupal_set_message(t('Node with id @nid will be hidden for current language', array('@nid' => $node->nid)), 'warning');
  }
}


/**
 * Implements of hook_permission().
 */
function node_translation_access_permission() {
  $languages = language_list('enabled');
  $perms = array();

  foreach ($languages[1] as $language) {
    $perms['edit node translation access ' . $language->language] = array(
      'title' => t('Access to edit node for @language locale', array('@language' => $language->language)),
    );
  }
  return $perms;
}

/**
 * Implements of hook_language_switch_links_alter().
 */
function node_translation_access_language_switch_links_alter(&$links, $type, $path) {
  if (path_is_admin($path)) {
    $languages = language_list('enabled');
    foreach ($languages[1] as $language) {
      if (!user_access('edit node translation access ' . $language->language)) {
        if (isset($links[$language->language])) {
          unset($links[$language->language]);
        }
      }
    }  
  }
  else {
    // Hide link inside language swithcer block if access is deny.
    $node = menu_get_object();
    foreach ($links as $lang => $link) {
      if ($node && node_translation_access_denied($node->nid, $node->type, $lang)) {
        unset($links[$lang]);
      }
    }
  }
}

/**
 * Get language list to use as form options.
 */
function node_translation_access_get_language_list() {
  $languages = language_list();
  $options = array();
  foreach ($languages as $langcode => $language) {
    $options[$langcode] = $language->name;
  }
  return $options;
}
/**
 * Implements hook_node_type_delete().
 */
function node_translation_access_node_type_delete($info) {
  $denied = variable_get('node_translation_access_content_types', array());
  if (!empty($denied[$info->type])) {
    unset($denied[$info->type]);
  }
  variable_set('node_translation_access_content_types', $denied);
}
