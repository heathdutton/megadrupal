<?php

/**
 * @file commerce_migrate_magento.module file
 */

/**
 * Implements hook_menu().
 */
function commerce_migrate_magento_menu() {
  $items['admin/content/migrate/magento_migration_options'] = array(
    'title' => 'Configure Magento Migration',
    'description' => 'Database configuration for Commerce Migrate Magento',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_migrate_magento_admin_form'),
    'access arguments' => array('migration information'),
    'weight' => 111,
  );
  return $items;
}

/**
 * Implements hook_entity_info_alter() to prevent locking behavior in the
 * commerce order entity.
 *
 * @param $info
 */
function commerce_migrate_magento_entity_info_alter(&$entity_info) {
  unset($entity_info['commerce_order']['locking mode']);
}

/**
 * Administrative form to set migration options.
 */
function commerce_migrate_magento_admin_form($form, &$form_state) {
  $form['commerce_migrate_magento_tabs'] = array(
    '#type' => 'vertical_tabs',
    '#title' => t('Product settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_global'] = array(
    '#type' => 'fieldset',
    '#title' => t('Global settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_global']['commerce_migrate_magento_source_database'] = array(
    '#type' => 'textfield',
    '#title' => t('Source database key in settings.php'),
    '#description' => t('The settings.php file in this site must have two databases configured for most migration situations (this site\'s database, named default, plus a second one using the key name of your choice) unless you are migrating from within the same database. If left as "default" the current database will be used (and it must have all the Magento tables in it).'),
    '#default_value' => variable_get('commerce_migrate_magento_source_database', 'default'),
    '#required' => TRUE,
  );
  $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_global']['commerce_migrate_magento_source_database_api_version'] = array(
    '#type' => 'select',
    '#title' => t('Source Magento version'),
    '#options' => array(
      'mce' => t('Magento Community Edition'),
      'mee' => t('Magento Enterprise Edition'),
      'mpf' => t('Magento Professional Edition'),
      'mg' => t('Magento Go'),
    ),
    '#default_value' => variable_get('commerce_migrate_magento_source_database_api_version', 'mee'),
    '#required' => TRUE,
  );
  $filters = filter_formats();
  foreach ($filters as $machine_name => $info) {
    $options[$machine_name] = $info->name;
  }
  $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_global']['commerce_migrate_magento_default_filter_format'] = array(
    '#type' => 'select',
    '#title' => t('Default filter format to be used if the source input format cannot be correlated to input formats in this Drupal system'),
    '#description' => t('The input filters in one Drupal installation may not map to this Drupal install. First, get all your filters set up to be the same. This filter will be used as the fallback. Note that this choice may have security implications, if you accidentally set the format to something you do not want, like "php".'),
    '#options' => $options,
    '#default_value' => variable_get('commerce_migrate_magento_default_filter_format', 'plain_text'),
  );
  // product types
  $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_product'] = array(
    '#type' => 'fieldset',
    '#title' => t('Product settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  foreach (commerce_product_types() as $type => $product_type) {
    $prod_options[$product_type['type']] = $product_type['name'];
    $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_product']['commerce_migrate_magento_product_settings'][$type] = array(
      '#type' => 'fieldset',
      '#title' => t($product_type['name'] . ' settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#states' => array(
        'visible' => array(
          ':input[name="commerce_migrate_magento_product_type[' . $type . ']"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_product']['commerce_migrate_magento_product_settings'][$type]['commerce_migrate_magento_' . $type . '_categries'] = array(
      '#type' => 'select',
      '#title' => t($product_type['name'] . ' categories'),
      '#options' => commerce_migrate_magento_get_category_tree_all(),
      '#multiple' => TRUE,
      '#states' => array(
        'visible' => array(
          ':input[name="commerce_migrate_magento_product_type[' . $type . ']"]' => array('checked' => TRUE),
        ),
      ),
      '#default_value' => variable_get('commerce_migrate_magento_' . $type . '_categries', array()),
      '#description' => t('Limit incoming %name products to these categories.', array('%name' => $product_type['name'])),
    );
  }
  $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_product']['commerce_migrate_magento_product_type'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Commerce product types'),
    '#description' => t('It is possible to have more than one product types in Drupal Commerce. Select the products you want to use for the incoming data. (Might need custom alternations to the product.inc)'),
    '#options' => $prod_options,
    '#default_value' => variable_get('commerce_migrate_magento_product_type', array()),
    '#required' => TRUE,
  );
  $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_product']['commerce_migrate_magento_product_owner'] = array(
    '#type' => 'textfield',
    '#title' => t('Owner UID'),
    '#description' => t('The Drupal user id for the incoming products.'),
    '#default_value' => variable_get('commerce_migrate_magento_product_owner', 0),
    '#required' => TRUE,
  );
  // product display types
  $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_product_display'] = array(
    '#type' => 'fieldset',
    '#title' => t('Product display settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  foreach (node_type_get_types() as $type => $product_display_type) {
    $prod_dis_options[$product_display_type->type] = $product_display_type->name;
    $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_product_display']['commerce_migrate_magento_product_display_settings'][$type] = array(
      '#type' => 'fieldset',
      '#title' => t($product_display_type->name . ' settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#states' => array(
        'visible' => array(
          ':input[name="commerce_migrate_magento_product_display_type[' . $type . ']"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_product_display']['commerce_migrate_magento_product_display_settings'][$type]['commerce_migrate_magento_product_display_' . $type . '_categries'] = array(
      '#type' => 'select',
      '#title' => t($product_display_type->name . ' categories'),
      '#options' => commerce_migrate_magento_get_category_tree_all(),
      '#multiple' => TRUE,
      '#states' => array(
        'visible' => array(
          ':input[name="commerce_migrate_magento_product_type[' . $type . ']"]' => array('checked' => TRUE),
        ),
      ),
      '#default_value' => variable_get('commerce_migrate_magento_product_display_' . $type . '_categries', array()),
      '#description' => t('Limit incoming %name content to these categories.', array('%name' => $product_display_type->name)),
    );
  }
  $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_product_display']['commerce_migrate_magento_product_display_type'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Commerce product display types'),
    '#description' => t('It is possible to have more than one product display types in Drupal Commerce. Select the product displays you want to use for the incoming data. (Needs custom alternations in the product_display.inc)'),
    '#options' => $prod_dis_options,
    '#default_value' => variable_get('commerce_migrate_magento_product_display_type', array()),
    '#required' => TRUE,
  );
  $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_product_display']['commerce_migrate_magento_product_display_owner'] = array(
    '#type' => 'textfield',
    '#title' => t('Owner UID'),
    '#description' => t('The Drupal user id for the incoming content.'),
    '#default_value' => variable_get('commerce_migrate_magento_product_display_owner', 1),
    '#required' => TRUE,
  );
  // customer profile types
  $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_customer_profiles'] = array(
    '#type' => 'fieldset',
    '#title' => t('Commerce customer profiles'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  foreach (commerce_customer_profile_types() as $type => $profile_type) {
    $cust_options[$profile_type['type']] = $profile_type['name'];
  }
  $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_customer_profiles']['commerce_migrate_magento_customer_profile_type'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Commerce customer profile types'),
    '#description' => t('It is possible to have more than one customer profile type in Drupal Commerce. Select the profiles you want to use for the incoming data.'),
    '#options' => $cust_options,
    '#default_value' => variable_get('commerce_migrate_magento_customer_profile_type', array()),
    '#required' => TRUE,
  );
  $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_tax'] = array(
    '#type' => 'fieldset',
    '#title' => t('Commerce tax mapping'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_tax']['commerce_migrate_magento_tax_mapping'] = array(
    '#type' => 'textarea',
    '#title' => t('Tax Mapping'),
    '#description' => t('Map an magento tax name to a Commerce tax rate (machine name). One per line. separate mappings using the pipe character. e.g. <magento tax name>|<commerce tax rate machine name>. Taxes will still be migrated even if you don\'t do this, but they won\'t have a label when listing out price components. <em>Hint: Commerce tax rates (and machine names) are listed at <a href="/admin/commerce/config/taxes">admin/commerce/config/taxes</a></em>'),
    '#size' => 5,
    '#default_value' => variable_get('commerce_migrate_magento_tax_mapping', ''),
  );
  $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_shipping'] = array(
    '#type' => 'fieldset',
    '#title' => t('Commerce shipping mapping'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_shipping']['commerce_migrate_magento_shipping_mapping'] = array(
    '#type' => 'textarea',
    '#title' => t('Shipping Mapping'),
    '#description' => t('Map an magento shipping line item title to a Commerce shipping service (machine name). One per line. separate mappings using the pipe character. e.g. <magento shipping line item name>|<commerce shipping service machine name>. If you skip this mapping, shipping line items will be imported as a generic "Shipping" service. <em>Hint: Commerce shipping services (and machine names) are listed at <a href="/admin/commerce/config/shipping">admin/commerce/config/shipping</a></em>'),
    '#size' => 5,
    '#default_value' => variable_get('commerce_migrate_magento_shipping_mapping', ''),
  );
  $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_discount'] = array(
    '#type' => 'fieldset',
    '#title' => t('Commerce discount mapping'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['commerce_migrate_magento_tabs']['commerce_migrate_magento_discount']['commerce_migrate_magento_discount_mapping'] = array(
    '#type' => 'textarea',
    '#title' => t('Discount/Coupon Mapping'),
    '#description' => t('Map an magento discount line item title to a Commerce discount (machine name). One per line. separate mappings using the pipe character. e.g. <magento shipping line item name>|<commerce shipping service machine name>. If you skip this mapping, shipping line items will be imported as a generic "Discount" service. <em>Hint: Commerce discount (and machine names) are listed at <a href="/admin/commerce/store/discounts">admin/commerce/store/discounts</a></em>'),
    '#size' => 5,
    '#default_value' => variable_get('commerce_migrate_magento_discount_mapping', ''),
  );
  return system_settings_form($form);
}

/**
 * Make sure that we can actually access the database and directory provided
 */
function commerce_migrate_magento_admin_form_validate($form, &$form_state) {
  // Check to see whether we can access the database
  $migration_source_db = $form_state['values']['commerce_migrate_magento_source_database'];
  if (empty($GLOBALS['databases'][$migration_source_db])) {
    form_set_error('commerce_migrate_magento_source_database', t('The database key $databases["%key"] does not exist', array('%key' => $migration_source_db)));
  }
  else {
    try {
      $connection = Database::getConnection('default', $migration_source_db);
      $query = $connection->select('eav_entity_type', 'eet')->fields('eet', array('entity_type_id'))->countQuery()->execute()->fetchField();
      drupal_set_message(t('Successfully connected to the "%key" database.', array('%key' => $migration_source_db)));
    }
    catch(Exception$e) {
      form_set_error('commerce_migrate_magento_source_database', t('The database key $databases["%key"] is not functional (Exception message %msg', array('%key' => $migration_source_db, '%msg' => $e->getMessage())));
    }
    $x = 1;
  }
  migrate_static_registration();
}

/**
 * Decide whether we have an external database and return the correct connection.
 *
 * If the migration source database exists, we will get a connection to it
 * instead of using the $databases['default'].
 */
function commerce_migrate_magento_get_source_connection() {
  $migration_source_db = variable_get('commerce_migrate_magento_source_database', 'default');
  if (empty($GLOBALS['databases'][$migration_source_db]['default'])) {
    $migration_source_db = NULL;
  }
  $connection = Database::getConnection('default', $migration_source_db);
  return $connection;
}

/**
 * Returns a mapping array
 */
function commerce_migrate_magento_get_mapping_array($variable_name) {
  if ($config = variable_get($variable_name, '')) {
    return list_extract_allowed_values($config, 'list_text', FALSE);
  }
  else {
    return array();
  }
}

/**
 * Get the attribute value for the attribute code
 *
 */
function commerce_migrate_magento_get_entity_attr_value($entity_id, $entity_type, $attr_code) {
  // get the entity type id
  $connection = commerce_migrate_magento_get_source_connection();
  $query = $connection->select('eav_entity_type', 'eet');
  $query->fields('eet', array('entity_type_id'));
  $query->condition('entity_type_code', $entity_type, '=');
  $result = $query->execute()->fetchAssoc();
  $entity_type_id = $result['entity_type_id'];
  // get the attr table value
  $connection = commerce_migrate_magento_get_source_connection();
  $query = $connection->select('eav_attribute', 'ea');
  $query->fields('ea', array('backend_type', 'attribute_id'));
  $query->condition('attribute_code', $attr_code, '=');
  $query->condition('entity_type_id', $entity_type_id, '=');
  $result = $query->execute()->fetchAssoc();
  $backend_table_name = $entity_type . '_entity';
  $backend_attr_table_name = $entity_type . '_entity_' . $result['backend_type'];
  // get the attr value
  $connection = commerce_migrate_magento_get_source_connection();
  $query = $connection->select($backend_table_name, 'btn');
  $query->join($backend_attr_table_name, 'batn', 'batn.entity_id = btn.entity_id');
  // $query->fields('btn', array('entity_id'));
  $query->fields('batn', array('value'));
  $query->condition('attribute_id', $result['attribute_id'], '=');
  $query->condition('btn.entity_id', $entity_id, '=');
  $result = $query->execute()->fetchAssoc();
  return !empty($result) ? reset($result) : FALSE;
}

/**
 * Get the category tree
 */
function commerce_migrate_magento_get_category_tree($store_id, $parent = 0, $depth = -1) {
  static $children, $parents, $terms;
  $connection = commerce_migrate_magento_get_source_connection();
  if (!$connection->schema()->tableExists('catalog_category_flat_store_' . $store_id)) {
    return array();
  }
  $depth++;
  // We cache trees, so it's not CPU-intensive to call get_tree() on a term
  // and its children, too.
  if (!isset($children[$store_id])) {
    $children[$store_id] = array();
    $query = $connection->select('catalog_category_flat_store_' . $store_id, 'ccfs');
    $query->fields('ccfs');
    $results = $query->execute();
    while ($record = $results->fetchAssoc()) {
      $parent_id = $record['parent_id'];
      $entity_id = $record['entity_id'];
      $children[$store_id][$parent_id][] = $entity_id;
      $parents[$store_id][$entity_id][] = $parent_id;
      $terms[$store_id][$entity_id] = $record;
    }
  }
  $max_depth = count($children[$store_id]);
  if ($children[$store_id][$parent]) {
    foreach ($children[$store_id][$parent] as $child) {
      if ($max_depth > $depth) {
        $terms[$store_id][$child]['depth'] = $depth;
        unset($terms[$store_id][$child]['parent']);
        $terms[$store_id][$child]['parents'] = $parents[$store_id][$child];
        $tree[] = $terms[$store_id][$child];
        if (isset($children[$store_id][$child])) {
          $tree = array_merge($tree, commerce_migrate_magento_get_category_tree($store_id, $child, $depth));
        }
      }
    }
  }
  return $tree ? $tree : array();
}

/**
 * Get the product options set
 */
function commerce_migrate_magento_get_category_tree_all() {
  $options_set = array();
  $connection = commerce_migrate_magento_get_source_connection();
  if (!$connection->schema()->tableExists('core_store')) {
    return array();
  }
  $query = $connection->select('core_store', 'cs');
  $query->fields('cs');
  $results = $query->execute();
  while ($row = $results->fetchAssoc()) {
    $store_id   = $row['store_id'];
    $store_name = $row['name'];
    $tree       = array();
    $tree       = commerce_migrate_magento_get_category_tree($store_id);
    $options    = array();
    foreach ($tree as $item) {
      $options[$item['entity_id']] = str_repeat('-', $item['depth']) . '  ' . $item['name'];
    }
    $options_set[$store_name] = $options;
  }
  return $options_set;
}

/**
 * Get the magento settings
 */
function commerce_migrate_magento_variable_get($config = 'customer/account_share/scope') {
  $connection = commerce_migrate_magento_get_source_connection();
  if (!$connection->schema()->tableExists('core_config_data')) {
    return FALSE;
  }
  $query = $connection->select('core_config_data', 'ccd');
  $query->fields('ccd');
  $query->condition('path', $config, '=');
  $results = $query->execute();
  $row = $results->fetchAssoc();
  return $row['value'];
}

