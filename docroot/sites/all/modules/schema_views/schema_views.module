<?php
/**
 * @file
 * The Schema Views module provides information to use in your custom Views
 * integration.
 */

/**
 * Implements hook_menu().
 */
function schema_views_menu() {
  $items = array();

  $items['admin/structure/schema/views'] = array(
    'title' => 'Views',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Show code snippets for integrating tables into Views',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('schema_views_inspect'),
    'access arguments' => array('administer schema'),
  );

  return $items;
}

// Copied functions almost literally from Schema module.
/**
 * Menu callback.
 */
function schema_views_inspect() {
  $form = array();
  $form['description'] = array(
    '#prefix' => '<p>',
    '#markup' => t("This page shows code snippets you may use in a views.inc
      file to create integration with Views for your database tables. Known
      tables (according to schema API) are grouped by the module that defines
      them; unknown tables are all grouped together.</p>

      <p>Take note that the code generated here is only a starting point. You
      may want to change titles and descriptions. You are highly encouraged to
      check whether the basic field handler, as assigned by this code, is
      appropriate for the data in it. You may e.g. want to use a
      views_handler_field_date instead of a views_handler_field_numeric for
      numeric fields containing timestamps. To implement hook_views_data() for a
      module, copy the code into the modules's hook_views_data() and return
      \$data. Do not forget to also implement hook_views_api() in your module.
      "),
    '#suffix' => '</p>',
  );

  // Build the module list.
  $mods = module_list();
  sort($mods);
  $mods = array_flip($mods);

  $schema = drupal_get_schema(NULL, TRUE);
  $inspect = schema_dbobject()->inspect(variable_get('schema_database_connection', 'default'));
  foreach ($inspect as $name => $table) {
    $module = isset($schema[$name]['module']) ? $schema[$name]['module'] : 'Unknown';
    if (!isset($form[$module])) {
      $form[$module] = array(
        '#type' => 'fieldset',
        '#access' => TRUE,
        '#title' => check_plain($module),
        '#collapsible' => TRUE,
        '#collapsed' => ($module != 'Unknown'),
        '#weight' => ($module == 'Unknown' ? 0 : $mods[$module] + 1),
      );
    }
    $form[$module][$name] = array(
      '#type' => 'markup',
      '#markup' => '<textarea style="width:100%" rows="10">' . check_plain(schema_views_phpprint_table($name, $table)) . '</textarea>',
    );
  }

  return $form;
}

/**
 * Generates code for an entire table.
 *
 * @see schema_phpprint_table()
 */
function schema_views_phpprint_table($name, $table) {
  $pretty_name = ucwords(str_replace('_', ' ', $name));

  $cols = array();
  if (isset($table['fields'])) {
    foreach ($table['fields'] as $colname => $col) {
      $cols[] = "'$colname' => " . schema_views_phpprint_column($col, $colname);
    }
  }
  $unique = $index = array();
  if (isset($table['unique keys'])) {
    foreach ($table['unique keys'] as $keyname => $key) {
      $unique[] = "'$keyname' => " . schema_phpprint_key($key);
    }
  }
  if (isset($table['indexes'])) {
    foreach ($table['indexes'] as $keyname => $key) {
      $index[] = "'$keyname' => " . schema_phpprint_key($key);
    }
  }
  if ($table['description']) {
    $description = $table['description'];
  }
  else {
    $description = t('TODO: please describe the items in this table!');
  }
  $out = '';
  $out .= "\$data['" . $name . "'] = array(\n";
  $out .= "  'table' => array(\n";
  $out .= "    'base' => array(\n";
  if (isset($table['primary key']) && is_array($table['primary key']) && count($table['primary key'])) {
    $out .= "      'field' => '" . $table['primary key'][0] . "',\n";
  }
  $out .= "      'title' => '$pretty_name',\n";
  $out .= "      'help' => '$description',\n";
  $out .= "    ),\n";
  $out .= "    'group' => '$pretty_name',\n";
  $out .= "  ),\n";
  $out .= "  " . implode(",\n  ", $cols);
  $out .= ",\n);\n";

  return $out;
}

/**
 * Generate code for a single column.
 *
 * @see schema_phpprint_column()
 */
function schema_views_phpprint_column($col, $colname) {
  $attrs = array();

  $pretty_name = ucwords(str_replace('_', ' ', $colname));
  $attrs[] = "'title' => '$pretty_name'";

  if (isset($col['description']) && $col['description']) {
    $description = $col['description'];
  }
  else {
    $description = t('TODO: please describe this field!');
  }
  unset($col['description']);
  $attrs[] = "'help' => '$description'";

  // Work out the type of the field to take a stab at the handler to use.
  $is_numeric = $is_date = FALSE;

  $numeric_types = array('int', 'serial', 'numeric');
  if (in_array($col['type'], $numeric_types)) {
    $is_numeric = TRUE;
  }

  if ($col['type'] == 'datetime' || $colname == 'created' || $colname == 'timestamp') {
    $is_date = TRUE;
    $is_numeric = FALSE;
  }

  if ($is_numeric) {
    $attr = "'field' => array(\n";
    $attr .= "      'handler' => 'views_handler_field_numeric',\n";
    $attr .= "      'click sortable' => FALSE,\n";
    $attr .= "    )";
    $attrs[] = $attr;
  }
  elseif ($is_date) {
    $attr = "'field' => array(\n";
    $attr .= "      'handler' => 'views_handler_field_date',\n";
    $attr .= "      'click sortable' => TRUE,\n";
    $attr .= "    )";
    $attrs[] = $attr;

    $attr = "'sort' => array(\n";
    $attr .= "      'handler' => 'views_handler_sort_date',\n";
    $attr .= "    )";
    $attrs[] = $attr;

    $attr = "'filter' => array(\n";
    $attr .= "        'handler' => 'views_handler_filter_date',\n";
    $attr .= "      )";
    $attrs[] = $attr;
  }
  else {
    $attr = "'field' => array(\n";
    $attr .= "      'handler' => 'views_handler_field',\n";
    $attr .= "      'click sortable' => FALSE,\n";
    $attr .= "    )";
    $attrs[] = $attr;
  }

  return "array(\n    " . implode(",\n    ", $attrs) . ",\n  )";
}
