<?php
/**
 * @file
 * Main module file for the Commerce WorldNet HPP module.
 */

/**
 * Implements hook_menu().
 */
function commerce_worldnet_hpp_menu() {
  $items = array();

  // The WorldNet 'background validation' URL.
  $items['worldnet/background'] = array(
    'page callback' => 'commerce_worldnet_hpp_process_response',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // The WorldNet 'receipt page' URL.
  $items['worldnet/response/%commerce_order'] = array(
    'page callback' => 'commerce_worldnet_hpp_process_response',
    'access callback' => 'commerce_order_access',
    'access arguments' => array('view', 2),
    'type' => MENU_CALLBACK,
  );

  // The site-wide settings form. Other configuration can be found in the action
  // settings for the payment method rule.
  $items['admin/commerce/config/worldnet-hpp'] = array(
    'title' => 'WorldNet HPP settings',
    'description' => 'Configure site-wide settings for the WorldNet HPP payment gateway integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_worldnet_hpp_config'),
    'access arguments' => array('administer commerce worldnet hpp settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 *
 * Inform Commerce about the WorldNet HPP payment method.
 */
function commerce_worldnet_hpp_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['worldnet_hpp'] = array(
    'base' => 'commerce_worldnet_hpp',
    'title' => t('WorldNet HPP'),
    'short_title' => t('WorldNet'),
    'display_title' => variable_get('commerce_worldnet_hpp_title', t('Credit or debit card via WorldNet')),
    'description' => t('Payment via the WorldNet HPP (Hosted Payment Page) gateway.'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Load the default payment method settings.
 *
 * @see commerce_worldnet_hpp_settings_form()
 */
function _commerce_worldnet_hpp_default_settings() {
  return array(
    'worldnet_hpp_test' => '1',
    'worldnet_hpp_mid' => '',
    'worldnet_hpp_terminal_id' => '',
    'worldnet_hpp_shared_secret' => '',
    'worldnet_hpp_email_receipt' => 0,
  );
}

/**
 * Implements hook_permission().
 */
function commerce_worldnet_hpp_permission() {
  return array(
    'administer commerce worldnet hpp settings' => array(
      'title' => t('Administer site-wide Commerce WorldNet HPP settings'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * The site-wide settings form for the module.
 */
function commerce_worldnet_hpp_config($form, &$form_state) {
  $form = array();

  $form['commerce_worldnet_hpp_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Payment method title'),
    '#description' => t('The method title that appears on the payment selection page.'),
    '#default_value' => variable_get('commerce_worldnet_hpp_title', t('Credit or debit card via WorldNet')),
    '#required' => TRUE,
    '#size' => 30,
  );

  return system_settings_form($form);
}

/**
 * Implements CALLBACK_commerce_payment_method_settings_form().
 *
 * Returns a short Form API snippet, for the WorldNet HPP payment method's
 * administrative settings.
 */
function commerce_worldnet_hpp_settings_form($settings = NULL) {

  // Merge any given settings with this module's default settings.
  $settings = (array) $settings + _commerce_worldnet_hpp_default_settings();

  // Build the settings form additions.
  $form = array();
  $form['worldnet_hpp_test'] = array(
    '#type' => 'select',
    '#title' => t('Test account'),
    '#description' => t('Set whether these are testing or live account details.'),
    '#default_value' => $settings['worldnet_hpp_test'],
    '#required' => TRUE,
    '#options' => array(
      1 => t('Testing'),
      0 => t('Live'),
    ),
  );
  $form['worldnet_hpp_mid'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#default_value' => $settings['worldnet_hpp_mid'],
    '#required' => TRUE,
    '#size' => 10,
  );
  $form['worldnet_hpp_terminal_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Terminal ID'),
    '#default_value' => $settings['worldnet_hpp_terminal_id'],
    '#required' => TRUE,
    '#size' => 30,
  );
  $form['worldnet_hpp_shared_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Shared secret'),
    '#default_value' => $settings['worldnet_hpp_shared_secret'],
    '#size' => 30,
    '#required' => TRUE,
  );
  $form['worldnet_hpp_email_receipt'] = array(
    '#type' => 'checkbox',
    '#title' => t('Email a receipt'),
    '#description' => t('If enabled, WorldNet will send an email receipt for the payment to the order email address.'),
    '#default_value' => $settings['worldnet_hpp_email_receipt'],
  );
  return $form;
}

/**
 * Implements CALLBACK_commerce_payment_method_redirect_form().
 */
function commerce_worldnet_hpp_redirect_form($form, &$form_state, $order, $payment_method) {

  $settings = $payment_method['settings'];

  // Get an Entity API object wrapper for the $order.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Get the URL for the response from WorldNet.
  $response_url = url('worldnet/response/' . $order->order_id, array('absolute' => TRUE));
  $validation_url = url('worldnet/background', array('absolute' => TRUE));

  // Define the date/time that encodes the hash.
  $date_time = date('d-m-Y:H:i:s:000');

  // Get the order amount.
  $order_total = $order_wrapper->commerce_order_total->amount->value();
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  $amount = commerce_currency_amount_to_decimal($order_total, $currency_code);

  $hash_string = $settings['worldnet_hpp_terminal_id']
    . $order->order_number
    . $amount
    . $date_time
    . $response_url
    . $validation_url
    . $settings['worldnet_hpp_shared_secret'];
  $hash = md5($hash_string);

  // Define the data to be sent via hidden form fields to the payment page.
  $hidden_data = array(
    'DESCRIPTION' => t('Order number: @number', array('@number' => $order->order_number)),
    'TERMINALID' => $settings['worldnet_hpp_terminal_id'],
    'TERMINALTYPE' => 2,
    'TRANSACTIONTYPE' => 7,
    'RECEIPTPAGEURL' => $response_url,
    'VALIDATIONURL' => $validation_url,
    'DATETIME' => $date_time,
    'HASH' => $hash,
    'AMOUNT' => $amount,
    'CURRENCY' => $currency_code,
    'ORDERID' => $order->order_number,
    'IPADDRESS' => ip_address(),
  );

  // Allow WorldNet to send a receipt to the order email address, if enabled.
  if (!empty($settings['worldnet_hpp_email_receipt']) && $order->mail && valid_email_address($order->mail)) {
    $hidden_data['EMAIL'] = $order->mail;
  }

  // Get the billing address.
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
  if (!empty($billing_address)) {
    $hidden_data += array(
      'ADDRESS1' => $billing_address['thoroughfare'],
      'ADDRESS2' => $billing_address['premise'],
      'POSTCODE' => $billing_address['postal_code'],
      'CITY' => $billing_address['locality'],
      'REGION' => $billing_address['administrative_area'],
      'COUNTRY' => $billing_address['country'],
    );
  }

  // Add all this data to the form.
  foreach ($hidden_data as $key => $value) {
    $form[$key] = array('#type' => 'hidden', '#value' => $value);
  }

  // Build the redirect URL.
  $worldnet_hpp_url = 'https://' . ($settings['worldnet_hpp_test'] ? 'test' : '') . 'payments.worldnettps.com/merchant/paymentpage';

  $form['#action'] = $worldnet_hpp_url;

  // Form tokens do not mean anything if we are redirecting outside Drupal.
  $form['#token'] = FALSE;

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Continue to payment'),
    '#weight' => 100,
  );

  return $form;

}

/**
 * Implements CALLBACK_commerce_payment_method_redirect_form_validate().
 */
function commerce_worldnet_hpp_redirect_form_validate($order, $payment_method) {
  if (isset($_POST['RESPONSECODE']) && $_POST['RESPONSECODE'] != 'A') {
    return FALSE;
  }
}

/**
 * Menu callback to process the WorldNet response.
 */
function commerce_worldnet_hpp_process_response() {
  // If the request is being made in the 'background', then it will be via POST.
  $background = $_SERVER['REQUEST_METHOD'] == 'POST';

  // Check that all the required parameters exist.
  $required_parameters = array(
    'DATETIME',
    'AMOUNT',
    'RESPONSECODE',
    'RESPONSETEXT',
    'ORDERID',
    'APPROVALCODE',
    'TERMINALID',
    'HASH',
    'form_id',
    'form_token',
  );
  $diff = array_diff($required_parameters, array_keys($_REQUEST));
  if (count($diff) > 0) {
    watchdog('commerce_worldnet_hpp', 'WorldNet response is missing parameters: @params.', array(
      '@params' => implode(', ', $diff),
    ), WATCHDOG_WARNING);
    return MENU_NOT_FOUND;
  }

  // Load the order that the response refers to.
  $order = commerce_order_load_by_number($_REQUEST['ORDERID']);
  if (!$order) {
    watchdog('commerce_worldnet_hpp', 'WorldNet response returned data for nonexistent order number @on.', array(
      '@on' => $_REQUEST['ORDERID'],
    ), WATCHDOG_WARNING);
    return MENU_NOT_FOUND;
  }

  // Check the order's payment method.
  if (!isset($order->data['payment_method']) || strpos($order->data['payment_method'], 'worldnet_hpp') === FALSE) {
    return MENU_NOT_FOUND;
  }

  // Load the payment method instance from the order, so that settings can be
  // extracted.
  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);

  // Check that the "Terminal ID" matches the one set for the payment method.
  if ($payment_method['settings']['worldnet_hpp_terminal_id'] != $_REQUEST['TERMINALID']) {
    watchdog('commerce_worldnet_hpp', 'Terminal ID mismatch in response for order @order_id (#@order_number): expected @expected, received @received.', array(
      '@order_id' => $order->order_id,
      '@order_number' => $order->order_number,
      '@expected' => $payment_method['settings']['worldnet_hpp_terminal_id'],
      '@received' => $_REQUEST['TERMINALID'],
    ), WATCHDOG_ERROR);
    return MENU_NOT_FOUND;
  }

  // Work out what security hash should be expected, and match it against the
  // provided hash.
  $hash_string = $_REQUEST['TERMINALID']
    . $_REQUEST['ORDERID']
    . $_REQUEST['AMOUNT']
    . $_REQUEST['DATETIME']
    . $_REQUEST['RESPONSECODE']
    . $_REQUEST['RESPONSETEXT']
    . $payment_method['settings']['worldnet_hpp_shared_secret'];
  $expected_hash = md5($hash_string);

  if ($_REQUEST['HASH'] != $expected_hash) {
    watchdog('commerce_worldnet_hpp', 'Hash mismatch in response for order @order_id (#@order_number).', array(
      '@order_id' => $order->order_id,
      '@order_number' => $order->order_number,
    ), WATCHDOG_ERROR);
    return MENU_ACCESS_DENIED;
  }

  // Check the form token that was passed through from the redirect form, for
  // non-background requests.
  if (!$background && !drupal_valid_token($_REQUEST['form_token'], $_REQUEST['form_id'])) {
    watchdog('commerce_worldnet_hpp', 'Form token mismatch in response for order @order_id (#@order_number).', array(
      '@order_id' => $order->order_id,
      '@order_number' => $order->order_number,
    ), WATCHDOG_ERROR);
    return MENU_ACCESS_DENIED;
  }

  // Check whether this transaction has already been recorded, if so, load it
  // fully to check that it actually exists.
  $select = db_select('commerce_worldnet_hpp', 'cwh')
    ->fields('cwh', array('transaction_id'))
    ->condition('unique_ref', $_REQUEST['UNIQUEREF'])
    ->condition('order_id', $order->order_id);
  $transaction_id = $select->execute()->fetchField();
  if ($transaction_id) {
    $transaction = commerce_payment_transaction_load($transaction_id);
    if (!$transaction) {
      throw new Exception(t('The transaction @txn for WorldNet payment @ref does not exist.', array(
        '@txn' => $transaction_id,
        '@ref' => $_REQUEST['UNIQUEREF'],
      )));
    }
  }
  // If there is no transaction already, create a new one.
  else {

    // Build the 'payload' to save with the transaction.
    $payload = $_REQUEST;
    // Don't save the response hash, card number, or Drupal form IDs/tokens.
    unset(
      $payload['HASH'],
      $payload['CARDNUMBER'],
      $payload['form_token'],
      $payload['form_id'],
      $payload['form_build_id']
    );

    // Get the currency code.
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $currency_code = $order_wrapper->commerce_order_total->currency_code->value();

    // Create a new payment transaction for the order.
    $transaction = commerce_payment_transaction_new('worldnet_hpp', $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
    $transaction->remote_id = $_REQUEST['ORDERID'];
    $transaction->amount = commerce_currency_decimal_to_amount($_REQUEST['AMOUNT'], $currency_code);
    $transaction->currency_code = $currency_code;
    $transaction->payload[REQUEST_TIME] = $payload;
    $transaction->remote_status = $_REQUEST['RESPONSETEXT'];
    switch ($_REQUEST['RESPONSECODE']) {

      // Approved.
      case 'A':
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $transaction->message = t('Payment complete.');
        break;

      // Referred.
      case 'R':
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        $transaction->message = t('The payment gateway referred authorisation.');
        break;

      // Declined or unknown.
      case 'D':
      default:
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        $transaction->message = t('The payment failed with the response: @response.', array(
          '@response' => $_REQUEST['RESPONSETEXT'],
        ));
        break;
    }
    // Save the transaction information.
    commerce_payment_transaction_save($transaction);
    $fields = array(
      'transaction_id' => $transaction->transaction_id,
      'unique_ref' => $_REQUEST['UNIQUEREF'],
      'order_id' => $order->order_id,
      'response_text' => $_REQUEST['RESPONSETEXT'],
      'response_code' => $_REQUEST['RESPONSECODE'],
      'payment_date' => strtotime($_REQUEST['DATETIME']),
      'created' => time(),
    );
    db_insert('commerce_worldnet_hpp')
      ->fields($fields)
      ->execute();
  }

  // Act on the transaction status.
  switch ($transaction->status) {
    case COMMERCE_PAYMENT_STATUS_SUCCESS:
      commerce_payment_redirect_pane_next_page($order, t('Updated after transaction @txn.', array(
        '@txn' => $transaction->transaction_id,
      )));
      break;

    default:
      commerce_payment_redirect_pane_previous_page($order);
      watchdog('commerce_worldnet_hpp', 'Payment failed for order ID @order_id (response: @response)', array(
        '@order_id' => $order->order_id,
        '@response' => $_REQUEST['RESPONSETEXT'],
      ));
      if (!$background) {
        drupal_set_message(t('Sorry, your payment failed. Please check your address and payment details, and try again.'), 'warning', FALSE);
      }
      break;

  }

  // For background validation, return the string 'OK'.
  if ($background) {
    echo 'OK';
    drupal_exit();
  }

  // Otherwise, redirect the user to the next payment pane.
  drupal_goto('checkout/' . $order->order_id . '/payment');
}
