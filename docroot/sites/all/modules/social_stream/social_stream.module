<?php

/**
 * Implements hook_menu().
 */
function social_stream_menu() {
  $items['admin/config/media/socialfield/social-stream'] = array(
    'title' => 'Social stream widget ',
    'description' => 'Social stream widget settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('social_stream_settings'),
    'access arguments' => array('view services'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['rest/social-stream/twitter'] = array(
    'page callback' => 'social_stream_twitter_rest',
    'access callback' => TRUE,
    'file' => 'includes/social_stream_twitter_rest.inc',
  );
  return $items;
}


/**
 * Table that displays all available services.
 */
function social_stream_settings($form, &$form_state) {
  global $base_url;
  $path = libraries_get_path('jquery-social-stream');

  $form = array();
  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General'),
  );
  $form['general']['social_stream_js_stream'] = array(
    '#type' => 'textfield',
    '#title' => t('jquery.social.stream Javascript file name'),
    '#default_value' => variable_get('social_stream_js_stream', 'jquery.social.stream.1.5.9.min.js'),
  );
  $form['general']['social_stream_js_wall'] = array(
    '#type' => 'textfield',
    '#title' => t('jquery.social.stream.wall Javascript file name'),
    '#default_value' => variable_get('social_stream_js_stream', 'jquery.social.stream.wall.1.6.js'),
    '#description' => t('These files should exist in the jQuery Social Stream library in the js/ directory.'),
  );
  

  $form['twitter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Twitter'),
    '#description' => t('To make Twitter feeds appear, you need to create a Twitter app and enter the oAuth credentials here.  For details in this process, see the !link.', array('!link' => l('jQuery Social Stream documentation', $path . '/index.html', array('fragment' => 'twitter-api')))),
  );
  $form['twitter']['social_stream_twitter_consumer_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Consumer key'),
    '#default_value' => variable_get('social_stream_twitter_consumer_key', ''),
  );
  $form['twitter']['social_stream_twitter_consumer_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Consumer secret'),
    '#default_value' => variable_get('social_stream_twitter_consumer_secret', ''),
  );
  $form['twitter']['social_stream_twitter_oauth_access_token'] = array(
    '#type' => 'textfield',
    '#title' => t('oAuth access token'),
    '#default_value' => variable_get('social_stream_twitter_oauth_access_token', ''),
  );
  $form['twitter']['social_stream_twitter_oauth_access_token_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('oAuth access token secret'),
    '#default_value' => variable_get('social_stream_twitter_oauth_access_token_secret', ''),
  );


  $form['instagram'] = array(
    '#type' => 'fieldset',
    '#title' => t('Instagram'),
    '#description' => t('To make Instagram feeds appear, you need to create an Instagram app and enter the oAuth credentials here.  For details in this process, see the !link under "Plugin Options".', array('!link' => l('jQuery Social Stream documentation', $path . '/index.html', array('fragment' => '')))),
  );
  $form['instagram']['social_stream_instagram_client_id'] = array(
    '#type' => 'textfield',
    //'#description' => t('Create a new widget on the !link and enter the Widget ID parameter (the data-widget-id from the generated embed code). This can also be overwritten per-field.', array('!link' => l('Twitter settings page', 'https://twitter.com/settings/widgets'))),
    '#title' => t('Client ID'),
    '#default_value' => variable_get('social_stream_instagram_client_id', ''),
  );
  $form['instagram']['social_stream_instagram_redirect_url'] = array(
    '#type' => 'textfield',
    '#description' => t('The url to redirect to in order to obtain the client ID (see link above for details).'),
    '#title' => t('Redirect URL'),
    '#default_value' => variable_get('social_stream_instagram_redirect_url', $base_url),
  );

  return system_settings_form($form);
}

/******************************* FIELD FORMATTERS ***************************** */

/**
* Implements hook_field_formatter_info().
*/
function social_stream_field_formatter_info() {
  $info = array(
    'social_stream' => array(
      'label' => t('Social Stream feed'),
      'field types' => array('social_links_field'),
      'settings'  => array(
        'height' => 480,
        'theme' => 'light',
      ),
    ),
    'social_stream_wall' => array(
      'label' => t('Social Stream wall'),
      'field types' => array('social_links_field'),
      'settings'  => array(
        'theme' => 'light',
      ),
    ),
  );
  return $info;
}


/**
 * Implements hook_field_formatter_settings_form().
 */
function social_stream_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $element = array();
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Add fields
  switch ($display['type']) {

    case 'social_stream':
      $element['markup'] = array(
        '#type' => 'markup',
        '#markup' => '<p>'.t('Be sure to set the !link if you are using Twitter or Instagram.', array('!link' => l('Social Stream settings', 'admin/config/media/socialfield/social-stream'))).'</p>',
      );
      $element['theme'] = array(
        '#title' => t('Theme'),
        '#type' => 'select',
        '#default_value' => $settings['theme'],
        '#options' => array('light' => t('Light'), 'dark' => t('Dark')),
      );
      $element['height'] = array(
        '#title' => t('Height'),
        '#type' => 'textfield',
        '#default_value' => $settings['height'],
        '#field_suffix' => ' px',
      );
      break;

    case 'social_stream_wall':
      $element['markup'] = array(
        '#type' => 'markup',
        '#markup' => '<p>'.t('Be sure to set the !link if you are using Twitter or Instagram.', array('!link' => l('Social Stream settings', 'admin/config/media/socialfield/social-stream'))).'</p>',
      );
      $element['theme'] = array(
        '#title' => t('Theme'),
        '#type' => 'select',
        '#default_value' => $settings['theme'],
        '#options' => array('light' => t('Light'), 'dark' => t('Dark')),
      );
      break;
  }
 
  return $element;
}


/**
 * Implements hook_field_formatter_settings_summary().
 * @todo
 */
function social_stream_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  foreach ($settings as $key => $value) {
    if(!is_array($value)) {
      $summary[] = $key . ': ' . $value;
    }
  }

  return implode('<br />', $summary);
}


/**
 * Implements hook_field_formatter_view().
 */
function social_stream_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
  
  $settings['type'] = $display['type'];

  $feeds = array();
  foreach ($items as $item) {
    $feeds[$item['service']] = $item['url'];
  }
  $settings['feeds'] = $feeds;

  $element[0] = theme('social_stream', $settings);

  return $element;
}



/******************************* THEME FUNCTIONS ***************************** */

/**
 * Implements hook_theme().
 */
function social_stream_theme() {
  return array(
    'social_stream' => array(
      'template' => 'templates/social-stream',
      'variables' => array(
        'feeds' => array(),
        'type' => '',
        'height' => '',
        'theme' => 'light',
        'limit' => 15,
        'no_library' => FALSE,
      ),
    ),
  );
}



/**
 * Implements hook_theme_preprocess().
 */
function template_preprocess_social_stream(&$variables) {
  $path = libraries_get_path('jquery-social-stream');
  if (empty($path)) {
    $variables['no_library'] = TRUE;
  }

  // Add library files  
  drupal_add_js($path . '/inc/js/jquery.plugins.js');
  drupal_add_js($path . '/inc/js/jquery.site.js');
  drupal_add_js($path . '/js/' . variable_get('social_stream_js_stream', 'jquery.social.stream.1.5.9.min.js'));
  if ($variables['type'] === 'social_stream_wall') {
    drupal_add_css($path . '/css/dcsns_wall.css');
    drupal_add_js($path . '/js/' . variable_get('social_stream_js_stream', 'jquery.social.stream.wall.1.6.js'));
  }
  else {
    drupal_add_css($path . '/css/dcsns_'. $variables['theme'] .'.css');
  }

  // Clean up feeds
  $feeds = array();
  foreach ($variables['feeds'] as $service => $feed) {
    if (strpos($feed, 'http') !== FALSE) {
      $feed = explode('/', $feed);
      $feed = $feed[count($feed)-1];
    }
    $feeds[$service] = array('id' => $feed);
  }
  if (!empty($feeds['twitter'])) {
    $feeds['twitter']['url'] = url('rest/social-stream/twitter');
  }

  // Add Settings
  $image_path = url($path . '/images/dcsns-'. $variables['theme'] .'/');
  $settings = array(
    'type' => 'wall',
    'limit' => $variables['limit'],
    'feeds' => $feeds,
    'iconPath' => $image_path,
    'imagePath' => $image_path,
    'height' => $variables['height'],
  );
  drupal_add_js(array('social_stream' => $settings), 'setting');

  // Add module js
  drupal_add_js(drupal_get_path('module', 'social_stream') . '/js/social-stream.js');
}


/*

feeds: feeds,
  
        control: false,
        filter: true,
        wall: settings.social_stream.type === 'wall' ? true : false,
        cache: true,
        //days: data.length < 15 ? 30 : 50, //igniored because max=limit
        max: 'limit',
        limit: settings.social_stream.limit,
        //order: 'random',

        */