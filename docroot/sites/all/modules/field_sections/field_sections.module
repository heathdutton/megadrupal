<?php

/**
 * @file
 * Module implementing field sections field type.
 */

/**
 * Define translation context.
 */
define('FIELD_SECTIONS_TRANSLATE_CONTEXT', 'field_sections');

/**
 * Implements hook_help().
 */
function field_sections_help($path, $arg) {
  // Use in translation context.
  $context = array(
    'context' => FIELD_SECTIONS_TRANSLATE_CONTEXT,
  );

  switch ($path) {
    case 'admin/help#field_sections':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The <em>Field Sections</em> module provides a new "Field Type" called "Sections" which is composed of textfield and textarea. Moreover, the textarea field supports text format.', array(), $context) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function field_sections_field_info() {
  // Use in translation context.
  $context = array(
    'context' => FIELD_SECTIONS_TRANSLATE_CONTEXT,
  );

  return array(
    'field_sections' => array(
      'label' => t('Sections', array(), $context),
      'description' => t('Field composed of title and body.', array(), $context),
      'default_widget' => 'field_sections',
      'default_formatter' => 'field_sections_default',
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * This hook provides validation of the content.
 *
 * @see field_sections_field_widget_error()
 */
function field_sections_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // Use in translation context.
  $context = array(
    'context' => FIELD_SECTIONS_TRANSLATE_CONTEXT,
  );

  foreach ($items as $delta => $item) {
    if (empty($item['title']) && !empty($item['body']['value'])) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'field_sections_empty',
        'message' => t('Title cannot be empty.', array(), $context),
      );
    }
  }
}

/**
 * Implements hook_field_presave().
 *
 * Define custom presave behavior for Field Sections field type.
 */
function field_sections_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $item) {
    // Field Sections item should have 3 value (title, body and format).
    // That's why, to save item's value needs to split (array) $item['body'] to
    // (string) $item['body'] and (string) $item['format'].
    if (!empty($item['title']) && is_array($item['body'])) {
      $items[$delta] = array(
        'title' => $item['title'],
        'body' => isset($item['body']['value']) ? $item['body']['value'] : NULL,
        'format' => isset($item['body']['format']) ? $item['body']['format'] : NULL,
      );
    }
    elseif (!empty($item['title']) && isset($item['body']) && is_string($item['format'])) {
      $items[$delta] = array(
        'title' => $item['title'],
        'value' => $item['body'],
        'format' => isset($item['format']) ? $item['format'] : NULL,
      );
    }
    else {
      // Remove item (in the case when 'title' is empty).
      unset($items[$delta]);
    }
  }
}

/**
 * Implements hook_field_is_empty().
 *
 * Return TRUE if it does not contain data, FALSE if it does. This lets the
 * form API flag an error when required fields are empty.
 */
function field_sections_field_is_empty($item, $field) {
  return empty($item['title']);
}

/**
 * Implements hook_field_formatter_info().
 */
function field_sections_field_formatter_info() {
  // Use in translation context.
  $context = array(
    'context' => FIELD_SECTIONS_TRANSLATE_CONTEXT,
  );

  return array(
    'field_sections_default' => array(
      'label' => t('Default', array(), $context),
      'field types' => array('field_sections'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * One formatter is implemented.
 * - field_sections_default just outputs values of the field.
 *
 * @see field_sections_field_formatter_info()
 */
function field_sections_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // The default field formatter to display field's values.
    case 'field_sections_default':
      foreach ($items as $delta => $item) {
        $element[$delta]['title'] = array(
          '#type' => 'html_tag',
          '#tag' => 'h3',
          '#value' => $item['title'],
        );

        // Display 'body' value with text format support.
        $element[$delta]['body'] = array(
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#value' => check_markup($item['body'], $item['format']),
        );
      }

      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * One widget is provided.
 * - Default widget where the user enters 'title' and 'body' with possibility to
 * change text format.
 *
 * @see field_sections_field_widget_form()
 */
function field_sections_field_widget_info() {
  // Use in translation context.
  $context = array(
    'context' => FIELD_SECTIONS_TRANSLATE_CONTEXT,
  );

  return array(
    'field_sections' => array(
      'label' => t('Sections', array(), $context),
      'field types' => array('field_sections'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function field_sections_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // Use in translation context.
  $context = array(
    'context' => FIELD_SECTIONS_TRANSLATE_CONTEXT,
  );

  $value = isset($items[$delta]) ? $items[$delta] : '';
  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {
    // The default widget to display item's form elements.
    case 'field_sections':
      $widget['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title', array(), $context),
        '#default_value' => isset($value['title']) ? $value['title'] : NULL,
        '#maxlength' => 255,
      );

      $widget['body'] = array(
        '#type' => 'text_format',
        '#base_type' => 'textarea',
        '#title' => t('Body', array(), $context),
        '#default_value' => isset($value['body']) ? $value['body'] : NULL,
        '#format' => isset($value['format']) ? $value['format'] : NULL,
        // The incoming input to populate the form element. For more information
        // see function form_type_textarea_value().
        '#input' => TRUE,
      );

      break;
  }

  $element += $widget;
  return $element;
}

/**
 * Implements hook_field_widget_error().
 *
 * @see field_sections_field_validate()
 * @see form_error()
 */
function field_sections_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'field_sections_empty':
      form_error($element, $error['message']);
      break;
  }
}
