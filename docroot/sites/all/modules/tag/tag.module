<?php

/**
 * @file
 * 
 * Simple module that allows a user to select when entities/fields should be
 * used to autotag an entity.  This currently supports:
 * 
 * - node/all fields
 * ...
 * 
 * The module allows a user to specify the search module to use, and where the
 * resulting terms should be saved.  The following entities are supported out of
 * the box:
 * - comment
 * - node
 * - user
 */
/**
 * Implementation of hook_form_FORM_ID_alter().
 * 
 * This function basically allows us to setup each of the Tag modules for a 
 * specific content type.  A site administrator will be required to select the 
 * search service to use with this content type, the fields to search, the field
 * to populate, and the user interface for selecting tags.
 */
function tag_form_node_type_form_alter(&$form, &$form_state, $form_id){
  // Get the list of search services for the form.
  $search_services = module_invoke_all('tag_suggestion_info');
  $search_options = array();
  $search_options_forms = array();
  foreach($search_services as $key => $search_service){
    // Add the search service option for checkboxes later.
    $search_options[$key] = $search_service['label'];
    // Add each search service's options form if available.
    if(isset($search_service['options']['callback']) && function_exists($search_service['options']['callback'])){
      $search_options_forms[$key] = $search_service['options']['callback']($form['#node_type']->type);
    }
  }
  // Get a list of front end services that will enable us to interact with
  // the data.
  $ui_services = module_invoke_all('tag_ui_info');
  $ui_options = array();
  $ui_options_forms = array();
  foreach($ui_services as $key => $ui_service){
    // UI services are options in a drop down.
    $ui_options[$key] = $ui_service['label'];
    // Add the UI service's options form if required
    if(isset($ui_service['options']['callback']) && function_exists($ui_service['options']['callback'])){
      $ui_options_forms[$key] = $ui_service['options']['callback']($form['#node_type']->type);
    }
  }
  // Get a list of fields that this data can be saved to
  $field_options = array();
  $instances = field_info_instances('node', $form['#node_type']->type);
  $search_fields = array();
  foreach($instances as $key => $instance){
    if(in_array($instance['widget']['module'], array(
      'taxonomy',
      'text',
      'options',
      'tree_widget'
    ))){
      $field_options[$key] = $instance['label'];
      if(substr($instance['widget']['type'], 0, 5) == 'text_'){
        $search_fields[$key] = $instance['label'];
      }else{
        $field_info = field_info_field($instance['field_name']);
        if(substr($field_info['type'], 0, 9) == 'taxonomy_'){
          $search_fields[$key] = $instance['label'];
        }
      }
    }
  }
  // Set the default value to the search fields to be ALL text fields.
  $search_fields_default = array(); //variable_get('tag_search_fields_' . $form['#node_type']->type, array());
  if(!count($search_fields_default)){
    $search_fields_default = array_keys($search_fields);
  }
  // Form
  $keys_array = array_keys($ui_options);
  $form['tag'] = array(
    '#type' => 'fieldset',
    '#title' => t('Tag options'),
    '#group' => 'additional_settings',
    'tag_search_fields' => array(
      '#weight' => -10,
      '#default_value' => variable_get('tag_search_fields_' . $form['#node_type']->type, $search_fields_default),
      '#title' => t('Fields to search for tags'),
      '#type' => 'checkboxes',
      '#options' => $search_fields,
      '#description' => t('Select the fields that the Tag search modules should search within when suggesting appropriate tags.  You MUST select at least one field if you have selected a search service below.')
    ),
    'tag_search' => array(
      '#weight' => 0,
      '#default_value' => variable_get('tag_search_' . $form['#node_type']->type, array()),
      '#title' => t('Search services'),
      '#type' => 'checkboxes',
      '#options' => $search_options,
      '#description' => t('Select the search services you would like to use to provide tags to this content type.  Additional options for each search service will be displayed below.')
    ),
    'tag_ui' => array(
      '#weight' => 10,
      '#default_value' => (count($ui_options) === 1) ? array_pop($keys_array) : variable_get('tag_ui_' . $form['#node_type']->type, ''),
      '#title' => t('Interface'),
      '#type' => 'radios',
      '#options' => $ui_options,
      '#description' => t('Select the user interface that you would like to use to select suggested tags.')
    ),
    'tag_field' => array(
      '#weight' => 20,
      '#required' => TRUE,
      '#title' => t('Field to populate'),
      '#default_value' => variable_get('tag_field_' . $form['#node_type']->type, ''),
      '#type' => 'select',
      '#options' => array_merge(array(
        0 => '-- Select --'
      ), $field_options),
      '#description' => t('Please select the field you would like tags saving to.  Note, all content in the field will be replaced by tag data.')
    ),
    'tag_replace' => array(
      '#weight' => 30,
      '#title' => t('Replace or Append'),
      '#default_value' => variable_get('tag_replace_' . $form['#node_type']->type, 1),
      '#type' => 'radios',
      '#options' => array(
        0 => t('Replace'),
        1 => t('Append')
      ),
      '#description' => t('Replace will delete all values already set in the selected field, while append will add to the current values')
    )
  );
  // Additional settings for each module - hopefully hidden if the search
  // isn't selected.
  foreach($search_options_forms as $key => $options_form){
    $form['tag'][$key] = $options_form;
    $form['tag'][$key]['#weight'] = 5;
    $form['tag'][$key]['#type'] = 'fieldset';
    $form['tag'][$key]['#title'] = $search_options[$key];
    $form['tag'][$key]['#states'] = array(
      'visible' => array(
        ':input[name="tag_search[' . $key . ']"]' => array(
          'checked' => TRUE
        )
      )
    );
  }
  // Additional settings for each module - hopefully hidden if the interface
  // isn't selected.
  foreach($ui_options_forms as $key => $options_form){
    $form['tag'][$key] = $options_form;
    $form['tag'][$key]['#weight'] = 15;
    $form['tag'][$key]['#type'] = 'fieldset';
    $form['tag'][$key]['#title'] = $ui_options[$key];
    $form['tag'][$key]['#states'] = array(
      'visible' => array(
        ':input[value="' . $key . '"]' => array(
          'checked' => TRUE
        )
      )
    );
  }
  $form['#validate'][] = 'tag_node_type_form_validate';
}

/**
 * Callback for the above to validate the form
 */
function tag_node_type_form_validate($form, &$form_state){
  // Simply check that a field has been selected ONLY if a search method has
  // been specified.
  foreach($form_state['input']['tag_search'] as $key => $value){
    if($value && !$form_state['input']['tag_field']){
      // We've selected a search, but not a field.
      form_set_error('tag_field', t('Please select a field to save tags to'));
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function tag_form_alter(&$form, &$form_state, $form_id){
  if(isset($form['#node_edit_form']) && $form['#node_edit_form']){
    // We're here, we should call our form_alter functions, and add a submit
    // handler.
    // First get what search services we're using.
    $implementation = variable_get('tag_ui_' . $form['type']['#value'], '');
    $search_services = module_invoke_all('tag_ui_info');
    if(isset($search_services[$implementation]['form_alter_callback']) && function_exists($search_services[$implementation]['form_alter_callback'])){
      $search_services[$implementation]['form_alter_callback']($form, $form_state);
    }
    // Finally, we add a submit function to ensure that we can update the data
    // when we're finished.
    $additional_submit = array(
      'tag_submit_form'
    );
    $form['#submit'] = is_array($form['#submit']) ? array_merge($form['#submit'], $additional_submit) : $additional_submit;
  }
}

/**
 * Callback for the submit
 * 
 * This does a lot of the heavy lifting, ensuring that tags are saved to the
 * correct fields.
 */
function tag_submit_form($form, &$form_state){
  // Do the searches on each of the fields that we want to search.  The
  // searches should return an array of tags which simply get added to the 
  // tag element of the $node (entity???)
  // First we get the list of fields that we're searching.
  $implementations = variable_get('tag_search_' . $form['type']['#value'], array());
  $search_services = module_invoke_all('tag_suggestion_info');
  $tags = array();
  // Loop through each field
  $fields_to_search = variable_get('tag_search_fields_' . $form['type']['#value'], FALSE);
  if(!$fields_to_search){
    // We haven't set the fields to search - we probably don't have
    // implementations anyway, but in case we do, we'll get the fields to search
    if(count($implementations)){
      // Get a list of fields that the search service should look in for tags.
      $instances = field_info_instances('node', $type);
      $fields_to_search = array();
      foreach($instances as $key => $instance){
        $fields_to_search[] = $key;
      }
    }
  }
  foreach($implementations as $implementation){
    if(isset($search_services[$implementation]['request_callback']) && function_exists($search_services[$implementation]['request_callback'])){
      // Get the options if they're required.
      $options = array();
      if(isset($search_services[$implementation]['options']['keys'])){
        foreach($search_services[$implementation]['options']['keys'] as $key){
          $options[$key] = variable_get($key . '_' . $form['type']['#value'], array());
        }
      }
      foreach($fields_to_search as $field){
        $text = tag_get_values($form_state['values'][$field]);
        if($text){
          $tags = array_merge($tags, $search_services[$implementation]['request_callback']($text, $options));
        }
      }
    }
  }
  // We're here, we should have an arary of tags (possibly empty) - we now
  // simply add this to the $form_state array under tag
  $form_state['values']['tag'] = $tags;
  // Finally execute the submit_callback for the UI module we're using
  // The UI module should save data here, rather than saving it on a
  // hook_node_update/insert
  $implementation = variable_get('tag_ui_' . $form['type']['#value'], '');
  $ui_service = module_invoke_all('tag_ui_info');
  if(isset($ui_service[$implementation]['submit_callback']) && function_exists($ui_service[$implementation]['submit_callback'])){
    $ui_service[$implementation]['submit_callback']($form, $form_state);
  }
}

/**
 * Get value from $form_state['values'] array
 */
function tag_get_values($array){
  // We're sent an array, we need to get the first instance of "value" from it.
  // Note, if we're not sent an array, we simply return $array.
  if(isset($array['value'])){
    return $array['value'];
  }else{
    if(is_array($array)){
      foreach($array as $array_part){
        $value = tag_get_values($array_part);
        if($value){return $value;}
      }
    }
  }
  return FALSE;
}

/**
 * Helper function for UI modules.  This adds the tags specified to a node.
 * This function will do checks to ensure that tags can be added to a specific
 * field.
 */
function tag_add_tags(&$form_state){
  // First we need to get the field we're adding the data to.
  $field = variable_get('tag_field_' . $form_state['values']['type'], FALSE);
  if($field){
    // Get the field
    $field_instance = field_read_instance('node', $field, $form_state['values']['type']);
    //kprint_r($field_instance);
    // Get whether or not this field is set to replace or append
    $append = variable_get('tag_replace_' . $field, $form_state['values']['type'], 1);
    switch($field_instance['widget']['module']){
      case 'taxonomy':
      case 'options':
      case 'tree_widget':
        // We have a taxonomy field, here we'll add the values/
        foreach($form_state['values']['tag'] as $tag){
          // Check that the tag hasn't already been saved to the field (yes, the
          // same tag can be saved multiple times to a taxonomy field).
          $already_set = FALSE;
          foreach($form_state['values'][$field][LANGUAGE_NONE] as $value){
            if($value['tid'] == $tag->tid){
              $already_set = TRUE;
            }
          }
          if(!$already_set){
            $form_state['values'][$field][LANGUAGE_NONE][] = (array)$tag;
          }
        }
        break;
      case 'text':
        // Text field, add the values as ";" delimitted text.
        $tag_text = array();
        foreach($form_state['values']['tag'] as $tag){
          if(strpos($tag->name, ';')){
            $tag_text[] = '"' . str_replace('"', '\"', $tag->name) . '"';
          }else{
            $tag_text[] = $tag->name;
          }
        }
        if($append){
          // Note the difference here. Textarea has tags added to end, field
          // has text replaced.  This should perhaps be a configuration
          // option.
          $form_state['values'][$field][LANGUAGE_NONE][0]['value'] .= ' ' . implode("; ", $tag_text);
        }else{
          $form_state['values'][$field][LANGUAGE_NONE][0]['value'] = implode("; ", $tag_text);
        }
        break;
      default:
        // We're here because a module that we're not aware of has defined its
        // own field type.  We should attempt to guess how we should save to
        // this field, and default to saving the tags as if it's a taxonomy
        // field.
        break;
    }
  }
}