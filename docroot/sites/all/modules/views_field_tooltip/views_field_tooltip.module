<?php

/**
 * Implements hook_views_api().
 */
function views_field_tooltip_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_menu().
 */
function views_field_tooltip_menu() {
  $base = array(
    'access callback' => 'user_access',
    'access arguments' => array('administer views'),
  );
  $items['admin/structure/views/settings/tooltips'] = array(
    'title' => 'Tooltips',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_field_tooltip_admin_settings_tooltips'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  ) + $base;
  return $items;
}

/**
 * Form function for `admin/structure/views/settings/tooltips`.
 */
function views_field_tooltip_admin_settings_tooltips($form, &$form_state) {
  module_load_include('inc', 'views_ui', 'includes/admin');
  ctools_include('dependent');

  $form['#attached']['css'] = views_ui_get_admin_css();

  $library = variable_get('views_field_tooltip_library', 'qtip2');
  $info = views_field_tooltip_get_library_info();
  $libraries = array();
  $path_dependency = array();
  foreach ($info as $key => $l) {
    $libraries[$key] = $l['name'];
    if (!empty($l['needs local file'])) {
      $path_dependency[] = $key;
    }
  }
  $form['views_field_tooltip_library'] = array(
    '#type' => 'select',
    '#title' => t('Tooltip library'),
    '#options' => $libraries,
    '#default_value' => $library,
    '#description' => t('Select the library to be used to display tooltips.'),
  );
  $path = variable_get('views_field_tooltip_library_path', '');
  $form['views_field_tooltip_library_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Tooltip library path'),
    '#default_value' => $path,
    '#description' => t('The relative or full path to the JavaScript file containing the tooltip library specified above.'),
    '#process' => array('ctools_dependent_process'),
    '#dependency' => array('edit-views-field-tooltip-library' => $path_dependency),
  );

  return system_settings_form($form);
}

/**
 * Validation function for form `views_field_tooltip_admin_settings_tooltips`.
 */
function views_field_tooltip_admin_settings_tooltips_validate(&$form, &$form_state) {
  $path = $form_state['values']['views_field_tooltip_library_path'];
  $library = $form_state['values']['views_field_tooltip_library'];
  $info = views_field_tooltip_get_library_info();
  if (!empty($info[$library]['needs local file']) && !file_exists($path)) {
    form_set_error('views_field_tooltip_library_path', t('Tooltip library %library not found at %path.', array(
      '%library' => $info[$library]['name'],
      '%path' => empty($path) ? t('[empty path]') : $path,
    )));
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for `views_ui_config_item_form`.
 */
function views_field_tooltip_form_views_ui_config_item_form_alter(&$form, &$form_state) {
  if ($form_state['type'] != 'field') return;

  $tooltips = $form_state['tooltips'] = views_field_tooltip__get_option($form_state['view']);
  $field_id = $form_state['id'];

  // Field tooltip widget.
  $form['options']['field_tooltip_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Tooltip settings'),
    '#weight' => $form['options']['style_settings']['#weight'] - 1,
    '#collapsible' => TRUE,
    '#collapsed' => empty($tooltips[$field_id]['field_tooltip']['text']) && empty($tooltips[$field_id]['field_tooltip']['url']),
  );
  $form['options']['field_tooltip_ajax'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use AJAX tooltip'),
    '#description' => t('
      Check this box to specify a URL that will return the HTML tooltip.
      Otherwise, you can enter the tooltip text directly below.
    '),
    '#fieldset' => 'field_tooltip_settings',
    '#default_value' => @$tooltips[$field_id]['field_tooltip']['ajax'],
  );
  $form['options']['field_tooltip_url'] = array(
    '#type' => 'textfield',
    '#title' => t('AJAX tooltip URL'),
    '#description' => t('Local or external URL of an HTML snippet tooltip. You may enter data from this view as per the "Replacement patterns" below.'),
    '#fieldset' => 'field_tooltip_settings',
    '#dependency' => array(
      'edit-options-field-tooltip-ajax' => array(1),
    ),
    '#attributes' => array(
      'class' => array('dependent-options'),
    ),
    '#default_value' => @$tooltips[$field_id]['field_tooltip']['url'],
  );
  $form['options']['field_tooltip_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Tooltip text'),
    '#description' => t('The text to display for this tooltip. You may include HTML. You may enter data from this view as per the "Replacement patterns" below.'),
    '#fieldset' => 'field_tooltip_settings',
    '#dependency' => array(
      'edit-options-field-tooltip-ajax' => array(0),
    ),
    '#attributes' => array(
      'class' => array('dependent-options'),
    ),
    '#default_value' => @$tooltips[$field_id]['field_tooltip']['text'],
  );
  $form['options']['field_tooltip_icon'] = array(
    '#type' => 'textfield',
    '#title' => t('Tooltip icon URL'),
    '#description' => t('Local or external URL of an image used to trigger the tooltip. You may enter data from this view as per the "Replacement patterns" below.'),
    '#fieldset' => 'field_tooltip_settings',
    '#default_value' => @$tooltips[$field_id]['field_tooltip']['icon'],
  );
  $form['options']['replacement_patterns'] = array(
    '#type' => 'fieldset',
    '#title' => t('Replacement patterns'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#value' => views_field_tooltip__get_replacement_help($form_state['handler']),
    '#fieldset' => 'field_tooltip_settings',
  );
  $info = views_field_tooltip_get_library_info(variable_get('views_field_tooltip_library', 'qtip2'));
  if (!empty($info)) {
    $form['options']['field_tooltip_qtip'] = array(
      '#type' => 'textarea',
      '#title' => t('Tooltip style'),
      '#description' => t('Override global tooltip style settings for this field.') . ' ' . call_user_func($info['help callback']),
      '#fieldset' => 'field_tooltip_settings',
      '#default_value' => jsonpp(@$tooltips[$field_id]['field_tooltip']['qtip']),
    );
  }
  else {
    $form['options']['field_tooltip_qtip'] = array(
      '#type' => 'value',
      '#value' => jsonpp(@$tooltips[$field_id]['field_tooltip']['qtip']),
    );
  }

  // Label tooltip widget.
  $form['options']['label_tooltip_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Tooltip'),
    '#description' => t('The text to display for this tooltip. You may include HTML. You may enter data from this view as per the "Replacement patterns" below.'),
    '#default_value' => empty($tooltips[$field_id]) ? NULL : (
      is_string($tooltips[$field_id]) ? // left-over from previous version
        $tooltips[$field_id] :
        $tooltips[$field_id]['label_tooltip']['text']
    ),
    '#attributes' => array(
      'class' => array('dependent-options'),
    ),
    '#dependency' => $form['options']['element_label_colon']['#dependency'],
    '#weight' => $form['options']['element_label_colon']['#weight'] + 1,
  );

  $form['buttons']['submit']['#validate'][] = 'views_field_tooltip_form_views_ui_config_item_form_validate';
  $form['buttons']['submit']['#submit'][] = 'views_field_tooltip_form_views_ui_config_item_form_submit';
}

/**
 * Validate function for `views_ui_config_item_form`.
 */
function views_field_tooltip_form_views_ui_config_item_form_validate($form, &$form_state) {
  $settings = json_decode($form_state['values']['options']['field_tooltip_qtip']);
  if (json_last_error() != JSON_ERROR_NONE) {
    form_set_error('options][field_tooltip_qtip', t(json_last_error_msg()));
  }
  // Need this to ensure form remains displayed to show error.
  if (form_get_errors()) {
    $form_state['rerender'] = TRUE;
  }
}

/**
 * Submit function for `views_ui_config_item_form`.
 */
function views_field_tooltip_form_views_ui_config_item_form_submit($form, &$form_state) {
  $tooltips = $form_state['tooltips'];
  $field_id = $form_state['id'];
  if (is_string($tooltips[$field_id])) { // left-over from previous version
    unset($tooltips[$field_id]);
  }

  // Select the target display: default or overridden?
  $display_id = $form_state['values']['override']['dropdown'];
  $form_state['view']->set_display($display_id);

  // Save tooltip settings.
  $form_state['values']['options']['field_tooltip_qtip'] = json_decode($form_state['values']['options']['field_tooltip_qtip']);
  foreach (array(
    'field_tooltip_ajax' => array('field_tooltip', 'ajax'),
    'field_tooltip_text' => array('field_tooltip', 'text'),
    'field_tooltip_url'  => array('field_tooltip', 'url'),
    'field_tooltip_qtip' => array('field_tooltip', 'qtip'),
    'field_tooltip_icon' => array('field_tooltip', 'icon'),
    'label_tooltip_text' => array('label_tooltip', 'text'),
  ) as $option => $path) {
    if (!empty($form_state['values']['options'][$option])) {
      $tooltips[$field_id][$path[0]][$path[1]] = $form_state['values']['options'][$option];
    }
    else {
      unset($tooltips[$field_id][$path[0]][$path[1]]);
    }
  }

  // Save the updated tooltip options to our display extender.
  $form_state['view']->display_handler->set_option('tooltips', $tooltips);

  // Write to cache.
  views_ui_cache_set($form_state['view']);
}

/**
 * Implements hook_views_pre_render().
 */
function views_field_tooltip_views_pre_render(&$view) {
  $tooltips = views_field_tooltip__get_option($view);
  if (empty($tooltips)) return;

  // Adjust style plugin row class for our purposes.
  $row_class = &$view->style_plugin->options['row_class'];
  if (!empty($row_class)) {
    $row_class .= ' ';
  }
  $row_class .= 'views-field-tooltip-row';

  // Theme field and label tooltips.
  $fields = array();
  $labels = array();
  foreach ($tooltips as $field_id => $info) {
    if (empty($view->field[$field_id]) || !empty($view->field[$field_id]->options['exclude'])) continue;

    // Left-over from previous version that only had label tooltips.
    if (is_string($info)) {
      $info = array('label_tooltip' => array('text' => $info));
    }

    // CSS-friendly field name.
    $field_css = drupal_clean_css_identifier($field_id);

    // Send themed field tooltip for each row if present.
    // Loop on rendered results to expand tokens that might be present in the tooltip settings.
    // TODO: Optimize this to avoid looping on results when settings don't have tokens.
    if ( (empty($info['field_tooltip']['ajax']) && !empty($info['field_tooltip']['text'])) ||
         (!empty($info['field_tooltip']['ajax']) && !empty($info['field_tooltip']['url'])) ) {
      foreach ($view->style_plugin->render_fields($view->result) as $row_index => $row) {
        $tokens = views_field_tooltip__get_render_tokens($field_id, $view, $row_index);
        if (empty($info['field_tooltip']['ajax'])) {
          $text = t($info['field_tooltip']['text']);
          $text = strtr($text, $tokens);
          $url = NULL;
        }
        else {
          $url = views_field_tooltip__get_tooltip_url($info['field_tooltip']['url'], $tokens);
          $text = NULL;
        }
        $icon = @$info['field_tooltip']['icon'];
        $icon = strtr($icon, $tokens);
        // The style settings are set to the default ones and overridden with the custom ones, if present.
        $qtip = array_merge_recursive((array)$view->display_handler->get_option('qtip'), (array)@$info['field_tooltip']['qtip']);

        $fields[$row_index][$field_css] = array(
          'theme' => theme('views_field_tooltip', array(
            'view' => $view,
            'field' => $field_id,
            'text' => $text,
            'icon' => $icon,
            'class' => array('views-field-tooltip-icon'),
            'url' => $url,
          )),
          'qtip' => $qtip,
        );
      }

      $field_class = &$view->field[$field_id]->options['element_class'];
      if ($field_class) {
        $field_class .= ' ';
      }
      $field_class .= 'views-field-tooltip views-field-tooltip-field-' . $field_css;
      $field_class .= !empty($info['field_tooltip']['ajax']) ? ' views-field-tooltip-ajax' : ' views-field-tooltip-text';
    }

    // Send themed label tooltip if present.
    if (!empty($info['label_tooltip']['text'])) {
      $labels[$field_css] = theme('views_field_tooltip', array(
        'view' => $view,
        'field' => $field_id,
        'text' => t($info['label_tooltip']['text']),
        'class' => array('views-label-tooltip-icon'),
      ));
      $label_class = &$view->field[$field_id]->options['element_label_class'];
      if ($label_class) {
        $label_class .= ' ';
      }
      $label_class .= 'views-label-tooltip views-label-tooltip-field-' . $field_css;
    }
  }

  // Bail early if nothing to do.
  if (empty($labels) && empty($fields)) return;

  // Choose tooltip library.
  $library = variable_get('views_field_tooltip_library', 'qtip2');
  $info = views_field_tooltip_get_library_info($library);
  if (empty($info)) {
    drupal_set_message(t('Unknown tooltip library %library. Please make sure <a href="@url">to select an existing library</a>.', array(
      '%library' => $library,
      '@url' => url('admin/structure/views/settings/tooltips'),
    )), 'error');
    return;
  }
  if (!empty($info['needs local file'])) {
    $library_path = variable_get('views_field_tooltip_library_path', '');
    if (!file_exists($library_path)) {
      drupal_set_message(t('Tooltip library %library not found at %path. Please make sure <a href="@url">the path is valid</a>.', array(
        '%library' => $info['name'],
        '%path' => empty($library_path) ? t('[empty path]') : $library_path,
        '@url' => url('admin/structure/views/settings/tooltips'),
      )), 'error');
      return;
    }
    drupal_add_js($library_path);
  }
  if (!empty($info['attached']['js'])) foreach ($info['attached']['js'] as $data => $options) {
    drupal_add_js($data, $options);
  }
  if (!empty($info['attached']['css'])) foreach ($info['attached']['css'] as $data => $options) {
    drupal_add_css($data, $options);
  }

  // Add our core files and settings.
  drupal_add_js(drupal_get_path('module', 'views_field_tooltip') . '/js/views_field_tooltip.js');
  drupal_add_js(array(
    'viewsFieldTooltip' => array(
      $view->name => array(
        $view->current_display => array(
          'labels' => $labels,
          'fields' => $fields,
          'qtip' => $view->display_handler->get_option('qtip'),
        ),
      ),
    ),
  ), 'setting');
}

/**
 * Generate a tooltip URL.
 */
function views_field_tooltip__get_tooltip_url($url, $tokens) {
  // Remove own base path.
  global $base_url;
  $url = str_replace($base_url . '/', '', $url);
  // Replace tokens.
  $url = strtr($url, $tokens);
  // Parse URL to detect local paths.
  $parse_info = parse_url($url);
  if (!empty($parse_info['path']) && empty($parse_info['scheme']) && empty($parse_info['host'])) {
    // Local path: add the 'ajax' query parameter to render the raw Drupal page.
    parse_str(@$parse_info['query'], $query);
    $query['ajax'] = 1;
    $url = url($parse_info['path'], array('query' => $query));
  }
  return $url;
}

/**
 * Set the right cached value for token replacement.
 */
function views_field_tooltip__get_render_tokens($target_field_id, $view, $row_index) {
  $rendered_fields = $view->style_plugin->render_fields($view->result);
  foreach ($view->field as $field_id => $field) {
    $field->last_render = $rendered_fields[$row_index][$field_id];
  }
  $view->row_index = $row_index;
  return $view->field[$target_field_id]->get_render_tokens(NULL);
}

/**
 * Implements hook_theme().
 */
function views_field_tooltip_theme() {
  return array(
    'views_field_tooltip' => array(
      'variables' => array(
        'view' => NULL,
        'field' => NULL,
        'class' => array(),
        'text' => NULL,
        'url' => NULL,
        'icon' => NULL,
      ),
    ),
  );
}

/**
 * Theme function for `views_field_tooltip`.
 */
function theme_views_field_tooltip(&$variables) {
  $icon = empty($variables['icon']) ? drupal_get_path('module', 'views_field_tooltip') . '/images/help.png' : $variables['icon'];
  $attributes = array(
    'class' => $variables['class'],
  );
  if (!empty($variables['text'])) {
    $attributes['title'] = $variables['text'];
  }
  if (!empty($variables['url'])) {
    $attributes['data-url'] = $variables['url'];
  }
  return theme('image', array(
    'path' => $icon,
    'attributes' => $attributes,
  ));
}

/**
 * Helper function to get tooltips setting.
 */
function views_field_tooltip__get_option($view) {
  if (isset($view->display_handler->display->display_options['fields'])) {
    // Fields are overridden: use this display's tooltips.
    $tooltips = @$view->display_handler->display->display_options['tooltips'];
  }
  else {
    // Fields are default: use default display's tooltips.
    $tooltips = @$view->display['default']->display_options['tooltips'];
  }
  return $tooltips;
}

/**
 * Implements hook_theme_registry_alter().
 */
function views_field_tooltip_theme_registry_alter(&$theme_registry) {
  //Add 'html--ajax.tpl.php' template file
  $theme_registry['html__ajax'] = Array();
  $theme_registry['html__ajax']['template'] = 'html--ajax';
  $theme_registry['html__ajax']['path'] = drupal_get_path('module', 'views_field_tooltip') . '/theme';
  $theme_registry['html__ajax']['render element'] = 'page';
  $theme_registry['html__ajax']['base hook'] = 'html';
  $theme_registry['html__ajax']['type'] = 'theme_engine';
  $theme_registry['html__ajax']['theme path'] = path_to_theme();
  $theme_registry['html__ajax']['preprocess functions'] = Array();
  $theme_registry['html__ajax']['process functions'] = Array();

  //Add 'page--ajax.tpl.php' template file
  $theme_registry['page__ajax'] = Array();
  $theme_registry['page__ajax']['template'] = 'page--ajax';
  $theme_registry['page__ajax']['path'] = drupal_get_path('module', 'views_field_tooltip') . '/theme';
  $theme_registry['page__ajax']['render element'] = 'page';
  $theme_registry['page__ajax']['base hook'] = 'page';
  $theme_registry['page__ajax']['type'] = 'theme_engine';
  $theme_registry['page__ajax']['theme path'] = path_to_theme();
  $theme_registry['page__ajax']['preprocess functions'] = Array();
  $theme_registry['page__ajax']['process functions'] = Array();
}

/**
 * Implements hook_init().
 */
function views_field_tooltip_init() {
  if (!empty($_GET['ajax']) && module_exists('admin_menu')) {
    admin_menu_suppress();
  }
}

/**
 * Template preprocessor for `theme_page`.
 */
function views_field_tooltip_preprocess_page(&$variables) {
  if (!empty($_GET['ajax'])) {
    $variables['theme_hook_suggestions'][] = 'page__ajax';
  }
}

/**
 * Template preprocessor for `theme_html`.
 */
function views_field_tooltip_preprocess_html(&$variables) {
  if (!empty($_GET['ajax'])) {
    $variables['theme_hook_suggestions'][] = 'html__ajax';
  }
}

/**
 * Return token replacement options for a field handler.
 * @see views_handler_field::options_form().
 */
function views_field_tooltip__get_replacement_help($field_handler) {
  // Get a list of the available fields and arguments for token replacement.
  $options = array();
  foreach ($field_handler->view->display_handler->get_handlers('field') as $field => $handler) {
    $options[t('Fields')]["[$field]"] = $handler->ui_name();
    // We only use fields up to (and including) this one.
    if ($field == $field_handler->options['id']) {
      break;
    }
  }
  $count = 0; // This lets us prepare the key as we want it printed.
  foreach ($field_handler->view->display_handler->get_handlers('argument') as $arg => $handler) {
    $options[t('Arguments')]['%' . ++$count] = t('@argument title', array('@argument' => $handler->ui_name()));
    $options[t('Arguments')]['!' . $count] = t('@argument input', array('@argument' => $handler->ui_name()));
  }

  $field_handler->document_self_tokens($options[t('Fields')]);

  // Default text.
  $output = t('<p>You must add some additional fields to this display before using this field. These fields may be marked as <em>Exclude from display</em> if you prefer. Note that due to rendering order, you cannot use fields that come after this field; if you need a field not listed here, rearrange your fields.</p>');
  // We have some options, so make a list.
  if (!empty($options)) {
    $output = t('<p>The following tokens are available for this field. Note that due to rendering order, you cannot use fields that come after this field; if you need a field not listed here, rearrange your fields.
If you would like to have the characters \'[\' and \']\' please use the html entity codes \'%5B\' or  \'%5D\' or they will get replaced with empty space.</p>');
    foreach (array_keys($options) as $type) {
      if (!empty($options[$type])) {
        $items = array();
        foreach ($options[$type] as $key => $value) {
          $items[] = $key . ' == ' . check_plain($value);
        }
        $output .= theme('item_list',
          array(
            'items' => $items,
            'type' => $type
          ));
      }
    }
  }
  return $output;
}

/**
 * Return all tooltip library providers.
 */
function views_field_tooltip_get_library_info($library = NULL) {
  $libraries = &drupal_static(__FUNCTION__);
  if (empty($libraries)) {
    $libraries = module_invoke_all('views_field_tooltip_library_info');
    drupal_alter('views_field_tooltip_library_info', $libraries);
  }
  if (isset($library)) {
    return @$libraries[$library];
  }
  return $libraries;
}

/**
 * Implements hook_views_field_tooltip_library_info().
 */
function views_field_tooltip_views_field_tooltip_library_info() {
  $path = drupal_get_path('module', 'views_field_tooltip');
  return array(
    'qtip' => array(
      'name' => t('qTip'),
      'help callback' => 'views_field_tooltip__qtip_get_help',
      'needs local file' => TRUE,
      'attached' => array(
        'js' => array(
          $path . '/js/views_field_tooltip.qtip.js' => 'file',
        ),
      ),
    ),
    'qtip2' => array(
      'name' => t('qTip2'),
      'help callback' => 'views_field_tooltip__qtip2_get_help',
      'needs local file' => FALSE,
      'attached' => array(
        'js' => array(
          'http://cdn.jsdelivr.net/qtip2/2.2.0/jquery.qtip.min.js' => 'external',
          $path . '/js/views_field_tooltip.qtip2.js' => 'file',
        ),
        'css' => array(
          'http://cdn.jsdelivr.net/qtip2/2.2.0/jquery.qtip.min.css' => 'external',
          // CSS fixes for iframe tooltips.
          '.html .qtip { max-width: none; }
           .html .qtip-content { height: 100%; }
          ' => 'inline',
        ),
      ),
    ),
  );
}

/**
 * Return help string for qTip 1 settings.
 */
function views_field_tooltip__qtip_get_help() {
  $example = <<<EOS
{
  "position": {
    "corner": {
      "tooltip": "topLeft",
      "target": "bottomRight",
    },
  },
  "hide": {
    "fixed": true,
    "delay": 300,
    "when": {
      "event": "mouseout"
    }
  },
  "show": {
    "solo": true
  },
  "style": {
    "width": 400,
    "height": 300,
    "classes": {
      "content": "my-custom-class"
    }
  }
}
EOS;
  return t('
    Add tooltip settings in JSON format as per the <a href="@url" target="_blank">qTip documentation</a>.
    Leave empty to use qTip defaults.
    Note that the <code>content</code> part will be automatically filled in by each field\'s <strong>Tooltip</strong> setting.
    Here are some common qTip settings:
    <pre>!example</pre>
    The <code><a href="@url_position_tooltip" target="_blank">position.corner.tooltip</a></code> and <code><a href="@url_position_target" target="_blank">position.corner.target</a></code> attributes control the tooltip\'s position relative to the question mark.
    The <code><a href="@url_hide_fixed" target="_blank">hide.fixed = true</a></code> attribute keeps the tooltip open when moused over.
    The <code><a href="@url_hide_delay" target="_blank">hide.delay</a></code> attribute controls the time in milliseconds by which to delay hiding the tooltip.
    The <code><a href="@url_hide_event" target="_blank">hide.event = "mouseout"</a></code> attribute hides the tooltip when mouse hovers elsewhere.
    The <code><a href="@url_show_solo" target="_blank">show.solo = true</a></code> attribute hides other open tooltips when a new one is activated.
    The <code><a href="@url_style_classes" target="_blank">style.classes = "my-custom-class"</a></code> attribute adds a new CSS class to the tooltip, allowing for user-defined CSS customizations.
    ',
    array(
      '@url' => 'http://craigsworks.com/projects/qtip/docs/',
      '!example' => $example,
      '@url_position_tooltip' => 'http://craigsworks.com/projects/qtip/docs/reference/#position-corner-tooltip',
      '@url_position_target' => 'http://craigsworks.com/projects/qtip/docs/reference/#position-corner-target',
      '@url_hide_fixed' => 'http://craigsworks.com/projects/qtip/docs/reference/#hide-fixed',
      '@url_hide_delay' => 'http://craigsworks.com/projects/qtip/docs/reference/#hide-delay',
      '@url_hide_event' => 'http://craigsworks.com/projects/qtip/docs/reference/#hide-when-event',
      '@url_show_solo' => 'http://craigsworks.com/projects/qtip/docs/reference/#show-solo',
      '@url_style_classes' => 'http://craigsworks.com/projects/qtip/docs/reference/#style-classes-content',
    )
  );
}

/**
 * Return help string for qTip 2 settings.
 */
function views_field_tooltip__qtip2_get_help() {
  $example = <<<EOS
{
  "position": {
    "my": "top left",
    "at": "bottom right",
    "adjust": {
      "method": "flip"
    }
  },
  "hide": {
    "fixed": true,
    "delay": 300,
    "event": "mouseout"
  },
  "show": {
    "solo": true
  },
  "style": {
    "width": "400px",
    "height": "300px",
    "classes": "qtip qtip-shadow my-custom-class"
  }
}
EOS;
  return t('
    Add tooltip settings in JSON format as per the <a href="@url" target="_blank">qTip2 documentation</a>.
    Leave empty to use qTip2 defaults.
    Note that the <code>content</code> part will be automatically filled in by each field\'s <strong>Tooltip</strong> setting.
    Here are some common qTip2 settings:
    <pre>!example</pre>
    The <code><a href="@url_position_my" target="_blank">position.my</a></code> and <code><a href="@url_position_at" target="_blank">position.at</a></code> attributes control the tooltip\'s position relative to the question mark.
    The <code><a href="@url_position_adjustmethod" target="_blank">position.adjust.method</a></code> attribute controls the positioning behavior at the edges of the viewport.
    The <code><a href="@url_hide_fixed" target="_blank">hide.fixed = true</a></code> attribute keeps the tooltip open when moused over.
    The <code><a href="@url_hide_delay" target="_blank">hide.delay</a></code> attribute controls the time in milliseconds by which to delay hiding the tooltip.
    The <code><a href="@url_hide_event" target="_blank">hide.event = "mouseout"</a></code> attribute hides the tooltip when mouse hovers elsewhere.
    The <code><a href="@url_show_solo" target="_blank">show.solo = true</a></code> attribute hides other open tooltips when a new one is activated.
    The <code><a href="@url_style_classes" target="_blank">style.classes = "qtip"</a></code> attribute shows the default qTip2 tooltip style.
    The <code><a href="@url_style_classes" target="_blank">style.classes = "qtip-shadow"</a></code> attribute adds a drop shadow to the tooltip.
    The <code><a href="@url_style_classes" target="_blank">style.classes = "my-custom-class"</a></code> attribute adds a new CSS class to the tooltip, allowing for user-defined CSS customizations.
    ',
    array(
      '@url' => 'http://qtip2.com/options',
      '!example' => $example,
      '@url_position_my' => 'http://qtip2.com/options#position.my',
      '@url_position_at' => 'http://qtip2.com/options#position.at',
      '@url_position_adjustmethod' => 'http://qtip2.com/plugins#viewport.adjustmethod',
      '@url_hide_fixed' => 'http://qtip2.com/options#hide.fixed',
      '@url_hide_delay' => 'http://qtip2.com/options#hide.delay',
      '@url_hide_event' => 'http://qtip2.com/options#hide.event',
      '@url_show_solo' => 'http://qtip2.com/options#show.solo',
      '@url_style_classes' => 'http://qtip2.com/options#style.classes',
    )
  );
}

// @see http://us3.php.net/manual/en/function.json-last-error-msg.php#113243
if (!function_exists('json_last_error_msg')) {
  function json_last_error_msg() {
    static $errors = array(
      JSON_ERROR_NONE             => null,
      JSON_ERROR_DEPTH            => 'Maximum stack depth exceeded',
      JSON_ERROR_STATE_MISMATCH   => 'Underflow or the modes mismatch',
      JSON_ERROR_CTRL_CHAR        => 'Unexpected control character found',
      JSON_ERROR_SYNTAX           => 'Syntax error, malformed JSON',
      JSON_ERROR_UTF8             => 'Malformed UTF-8 characters, possibly incorrectly encoded'
    );
    $error = json_last_error();
    return array_key_exists($error, $errors) ? $errors[$error] : "Unknown error ({$error})";
  }
}

// @see http://ryanuber.com/07-10-2012/json-pretty-print-pre-5.4.html
if (!function_exists('jsonpp')) {
  /**
   * jsonpp - Pretty print JSON data
   *
   * In versions of PHP < 5.4.x, the json_encode() function does not yet provide a
   * pretty-print option. In lieu of forgoing the feature, an additional call can
   * be made to this function, passing in JSON text, and (optionally) a string to
   * be used for indentation.
   *
   * @param object $json  The JSON data
   * @param string $istr  The indentation string
   *
   * @return string
   */
  function jsonpp($json, $istr='  ')
  {
    if (empty($json)) {
      return '';
    }
    if (version_compare(PHP_VERSION, '5.4.0') >= 0) {
      return json_encode($json, JSON_PRETTY_PRINT);
    }

    $json = json_encode($json);
    $result = '';
    for($p=$q=$i=0; isset($json[$p]); $p++)
    {
      $json[$p] == '"' && ($p>0?$json[$p-1]:'') != '\\' && $q=!$q;
      if(strchr('}]', $json[$p]) && !$q && $i--)
      {
        strchr('{[', $json[$p-1]) || $result .= "\n".str_repeat($istr, $i);
      }
      $result .= $json[$p];
      if(strchr(',{[', $json[$p]) && !$q)
      {
        $i += strchr('{[', $json[$p])===FALSE?0:1;
        strchr('}]', $json[$p+1]) || $result .= "\n".str_repeat($istr, $i);
      }
    }
    return $result;
  }
}
