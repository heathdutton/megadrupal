<?php
/**
 * @file
 * Main code file for Openstat module.
 */

/**
 * Implements hook_menu().
 */
function openstat_menu() {
  $items['admin/config/system/openstat'] = array(
    'title' => 'Openstat',
    'description' => 'Configurate Openstat counter.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openstat_admin_settings_form'),
    'access arguments' => array('administer openstat'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'openstat.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function openstat_permission() {
  return array(
    'administer openstat' => array(
      'title' => t('Administer Openstat'),
      'description' => t('Configure openstat counter.'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function openstat_help($path, $arg) {
  if ($path == 'admin/config/system/openstat') {
    return t('!Openstat is a free (registration required) statistic service.',
      array('!Openstat' => l(t('Openstat'), 'https://www.openstat.ru'))
    );
  }
}

/**
 * Implements hook_page_build().
 */
function openstat_page_alter(&$page) {

  $id = variable_get('openstat_id', NULL);

  // Exit if counter ID is not set.
  if (!$id) {
    return NULL;
  }

  // Exit if counter should not be visible for current page or user.
  if (!_openstat_visibility_pages() || !_openstat_visibility_roles()) {
    return NULL;
  }

  // Make the array with counter settings.
  $settings = array();
  $settings['counter'] = $id;

  $type = variable_get('openstat_type', 0);

  // If counter with image.
  if ($type) {

    $image_type = variable_get('openstat_image_type', 87);
    $gradient = variable_get('openstat_gradient', 0);
    $font_color = variable_get('openstat_font_color', 0);
    $image_id = NULL;

    // Find an image identifier.
    if (($image_type == 87) || ($image_type == 5081) || ($image_type == 5085)) {
      if ($gradient && !$font_color) {
        $image_id = $image_type;
      }
      if (!$gradient && !$font_color) {
        $image_id = $image_type + 1;
      }
      if ($gradient && $font_color) {
        $image_id = $image_type + 2;
      }
      if (!$gradient && $font_color) {
        $image_id = $image_type + 3;
      }
    }
    else {
      if ($gradient) {
        $image_id = $image_type;
      }
      else {
        $image_id = $image_type + 1;
      }
    }

    $settings['image'] = $image_id;

    $color = variable_get('openstat_color', 'ff9822');

    if ($color == 'custom') {
      $color = check_plain(variable_get('openstat_custom_color', NULL));
    }

    $settings['color'] = $color;

  }

  // This setting must be in every counter code.
  $settings['next'] = 'openstat';

  $track_links = variable_get('openstat_track_links', 0);

  if ($track_links) {
    $settings['track_links'] = $track_links;
  }

  $code = 'var openstat = ' . drupal_json_encode($settings) . ';';
  $code .= '(function(d, t, p) {';
  $code .= 'var j = d.createElement(t); j.async = true; j.type = "text/javascript";';
  $code .= 'j.src = ("https:" == p ? "https:" : "http:") + "//openstat.net/cnt.js";';
  $code .= 'var s = d.getElementsByTagName(t)[0]; s.parentNode.insertBefore(j, s);';
  $code .= '})(document, "script", document.location.protocol);';

  drupal_add_js($code, array('type' => 'inline'));

}

/**
 * Openstat counter code visibility for pages.
 *
 * @return bool
 *   TRUE if the counter should be on current page and otherwise FALSE.
 */
function _openstat_visibility_pages() {

  $pages = variable_get('openstat_pages', "admin\nadmin/*\nbatch\nnode/add*\nnode/*/*\nuser/*/*");
  $visibility = variable_get('openstat_visibility_pages', 0);
  $urls_equal = FALSE;

  if (!empty($pages)) {

    $pages_in_lowcase = drupal_strtolower($pages);
    $current_path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
    // Compare internal and path alias.
    $path_match = drupal_match_path($current_path, $pages_in_lowcase);

    if ($path_match) {
      $urls_equal = TRUE;
    }
    else {
      // If path alias doesn't equal with $_GET['q']
      // then compare internal and $_GET['q'].
      $path_match = drupal_match_path($_GET['q'], $pages_in_lowcase);
      if (($current_path != $_GET['q']) && $path_match) {
        $urls_equal = TRUE;
      }
    }
  }

  if (!$visibility && $urls_equal) {
    return FALSE;
  }
  elseif (!$visibility && !$urls_equal) {
    return TRUE;
  }
  elseif ($visibility && $urls_equal) {
    return TRUE;
  }
  elseif ($visibility && !$urls_equal) {
    return FALSE;
  }
}

/**
 * Openstat counter visibility for user roles.
 *
 * @return bool
 *   TRUE if the counter should be add for current user and otherwise FALSE.
 */
function _openstat_visibility_roles() {
  global $user;

  $visibility = variable_get('openstat_visibility_roles', 0);
  $enabled = $visibility;
  $roles = variable_get('openstat_roles', array());

  if (array_sum($roles) > 0) {
    // One or more roles are selected.
    foreach (array_keys($user->roles) as $role_id) {
      // Is the current user a member of one of these roles?
      if (isset($roles[$role_id]) && $role_id == $roles[$role_id]) {
        // Current user is a member of a role that should be tracked/excluded
        // from tracking.
        $enabled = !$visibility;
        break;
      }
    }
  }
  else {
    // No role is selected for tracking, therefore all roles should be tracked.
    $enabled = TRUE;
  }

  return $enabled;
}

/**
 * Implements hook_block_info().
 */
function openstat_block_info() {
  $block['openstat'] = array(
    'info' => t('Openstat counter'),
  );
  return $block;
}

/**
 * Implements hook_block_view().
 */
function openstat_block_view($delta = '') {

  // Exit if it is not Openstat block.
  if ($delta != 'openstat') {
    return NULL;
  };

  $type = variable_get('openstat_type', 0);

  // Do not show block for invisible counter.
  if (!$type) {
    return NULL;
  }

  $id = variable_get('openstat_id', NULL);

  $block['content'] = array(
    '#theme' => 'openstat',
    '#id' => $id,
  );

  return $block;

}

/**
 * Get Openstat identifier.
 *
 * Get Openstat ID from cookies or register new Openstat account with current
 * site or adding it to existing Openstat user account.
 *
 * @return int
 *   Openstat counter identifier.
 */
function openstat_get_countet_id() {

  $counter_id = NULL;

  global $user;
  $email = $user->mail;

  $new_user_data = array(
    'email' => $email,
    'format' => 'json',
    'client_info' => 'WEBO@Drupal 7',
  );

  $new_user_options = array(
    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
    'method' => 'POST',
    'data' => drupal_http_build_query($new_user_data),
  );

  // Check if user register or not.
  $new_user_return = drupal_http_request('https://www.openstat.ru/rest/v0.3/simple_add', $new_user_options);

  // Get ID for new user.
  if ($new_user_return->code == '201') {
    $data = drupal_json_decode($new_user_return->data);
    $counter_id = $data['msg'];
  }
  // Get new ID for existing user.
  elseif ($new_user_return->code == '409') {
    global $base_root;
    $existing_user_data = array(
      'owner' => $email,
      'site_url' => $base_root,
      'client_info' => 'WEBO@Drupal 7',
    );

    $existing_user_options = array(
      'headers' => array('Content-Type' => 'application/json'),
      'method' => 'POST',
      'data' => drupal_json_encode($existing_user_data),
    );

    $existing_user_return = drupal_http_request('https://www.openstat.ru/rest/v0.3/counters?format=json', $existing_user_options);
    $data = drupal_json_decode($existing_user_return->data);
    $counter_id = $data['id'];

  }

  return $counter_id;
}

/**
 * Returns HTML for Openstat counter image.
 *
 * @param array $variables
 *   An associative array containing:
 *   - id: The Openstat counter identifier.
 *
 * @ingroup themeable
 */
function theme_openstat(array $variables) {

  $id = check_plain($variables['id']);
  $output = '<span id="openstat' . $id . '"></span>';
  return $output;

}

/**
 * Implements hook_theme().
 */
function openstat_theme() {
  return array(
    'openstat' => array(
      'variables' => array(
        'id' => NULL,
      ),
    ),
  );
}
