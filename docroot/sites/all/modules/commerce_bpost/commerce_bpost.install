<?php

/**
 * @file
 * Install file for commerce_bpost module.
 */

/**
 * Implements hook_schema().
 */
function commerce_bpost_schema() {
  $schema = array();

  $schema['commerce_bpost_rate'] = array(
    'description' => 'Stores information about bpost shipping services rates.',
    'fields' => array(
      'rate_id' => array(
        'description' => 'Primary identifier for a rate.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The machine-name of the shipping service.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'type' => array(
        'description' => 'The type of this rate.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the bpost flexibility rate was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the bpost flexibility rate was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data.',
      ),
      'rates' => array(
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of rates.',
      ),
    ),
    'primary key' => array('rate_id'),
    'indexes' => array(
      'name' => array('name'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function commerce_bpost_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break during installation.
  $t = get_t();

  if ($phase == 'runtime') {
    $file_private_path = variable_get('file_private_path');

    if (empty($file_private_path)) {
      $requirements['commerce_bpost'] = array(
        'title' => $t('Commerce BPost'),
        'description' => $t('Path for private files has to be defined. Please <a href="@url">configure private file path in file system settings</a> to be able to generate pdf labels.', array(
          '@url' => url('admin/config/media/file-system'))),
        'severity' => REQUIREMENT_ERROR,
        'value' => $t('Private file path empty'),
      );
    }
  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function commerce_bpost_install() {
  $t = get_t();
  $settings = _commerce_bpost_get_default_settings();

  variable_set('commerce_bpost_settings', $settings);

  // Configure Bpost order bundle.
  commerce_order_configure_order_type('bpost');

  // Configure Bpost rates.
  $entity_type = 'commerce_bpost_rate';
  $bundle = 'rate';

  // Bpost rate min weight field.
  if (!field_info_field('bpost_min_weight')) {
    $field = array(
      'field_name' => 'bpost_min_weight',
      'type' => 'physical_weight',
      'cardinality' => 1,
      'entity_types' => array('commerce_bpost_rate'),
      'translatable' => FALSE,
      'locked' => TRUE,
    );
    field_create_field($field);
  }
  // Bpost rate min weight field instance.
  if (!field_info_instance($entity_type, 'bpost_min_weight', $bundle)) {
    $instance = array(
      'field_name' => 'bpost_min_weight',
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => $t('Minimum weight'),
      'required' => FALSE,
      'default_value' => array(array('weight' => 0)),
      'settings' => array(),
      'widget' => array(
        'type' => 'physical_weight_textfield',
        'weight' => 1,
        'settings' => array(
          'default_unit' => 'kg',
          'unit_select_list' => FALSE,
        ),
      ),
      'display' => array(),
    );

    field_create_instance($instance);
  }

  // Bpost rate max weight field.
  if (!field_info_field('bpost_max_weight')) {
    $field = array(
      'field_name' => 'bpost_max_weight',
      'type' => 'physical_weight',
      'cardinality' => 1,
      'entity_types' => array('commerce_bpost_rate'),
      'translatable' => FALSE,
      'locked' => TRUE,
    );
    field_create_field($field);
  }
  // Bpost rate max weight field instance.
  if (!field_info_instance($entity_type, 'bpost_max_weight', $bundle)) {
    $instance = array(
      'field_name' => 'bpost_max_weight',
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => $t('Maximum weight'),
      'required' => TRUE,
      'default_value' => array(array('weight' => 0)),
      'settings' => array(),
      'widget' => array(
        'type' => 'physical_weight_textfield',
        'weight' => 2,
        'settings' => array(
          'default_unit' => 'kg',
          'unit_select_list' => FALSE,
        ),
      ),
      'display' => array(),
    );

    field_create_instance($instance);
  }

  // Bpost order label field.
  if (!field_info_field('field_bpost_label')) {
    $field = array(
      'field_name' => 'field_bpost_label',
      'settings' => array(
        'display_field' => 0,
        'display_default' => 0,
        'uri_scheme' => 'private',
      ),
      'type' => 'file',
      'module' => 'file',
      'cardinality' => '-1',
    );
    field_create_field($field);
  }
  // Bpost order label field instance.
  if (!field_info_instance('commerce_order', 'field_bpost_label', 'bpost')) {
    $instance = array(
      'label' => 'bpost label',
      'widget' => array(
        'weight' => '-2',
        'type' => 'file_generic',
        'module' => 'file',
        'active' => 1,
        'settings' => array(
          'progress_indicator' => 'throbber',
        ),
      ),
      'settings' => array(
        'file_directory' => 'bpost_labels',
        'file_extensions' => 'png pdf',
        'max_filesize' => '',
        'description_field' => 0,
        'user_register_form' => FALSE,
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'commerce_bpost_file',
          'settings' => array(),
          'module' => 'file',
          'weight' => -2,
        ),
      ),
      'required' => FALSE,
      'field_name' => 'field_bpost_label',
      'entity_type' => 'commerce_order',
      'bundle' => 'bpost',
    );
    field_create_instance($instance);
  }

  // Bpost order barcode field.
  if (!field_info_field('field_barcode')) {
    $field = array(
      'field_name' => 'field_barcode',
      'type' => 'text',
      'settings' => array(
        'max_length' => 255,
      ),
      'cardinality' => '-1',
    );
    field_create_field($field);
  }
  // Bpost order barcode field instance.
  if (!field_info_instance('commerce_order', 'field_barcode', 'bpost')) {
    $instance = array(
      'label' => $t('Bpost barcode'),
      'field_name' => 'field_barcode',
      'entity_type' => 'commerce_order',
      'bundle' => 'bpost',
      'required' => FALSE,
      'widget' => array(
        'type' => 'text_textfield',
        'settings' => array('size' => 25),
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'commerce_bpost_barcode',
          'settings' => array(),
          'module' => 'commerce_bpost',
          'weight' => -1,
        ),
      ),
    );
    field_create_instance($instance);
  }

  // Bpost order drop date field.
  if (!field_info_field('field_dropdate')) {
    $field = array(
      'field_name' => 'field_dropdate',
      'type' => 'datestamp',
      'cardinality' => '1',
    );
    field_create_field($field);
  }
  // Bpost order barcode field instance.
  if (!field_info_instance('commerce_order', 'field_dropdate', 'bpost')) {
    $instance = array(
      'label' => $t('Drop date'),
      'field_name' => 'field_dropdate',
      'entity_type' => 'commerce_order',
      'bundle' => 'bpost',
      'required' => FALSE,
      'widget' => array(
        'type' => 'date_select',
      ),
      'settings' => array(
        'granularity' => array(
          'year' => 'year',
          'month' => 'month',
          'day' => 'day',
          'hour' => 0,
          'minute' => 0,
          'second' => 0,
        ),
      ),
    );
    field_create_instance($instance);
  }

  $instance = field_info_instance('commerce_customer_profile', 'commerce_customer_address', 'shipping');
  if ($instance && $instance['widget']['type'] == 'addressfield_standard') {
    $instance['widget']['settings']['format_handlers']['address'] = 'address';
    $instance['widget']['settings']['format_handlers']['phone'] = 'phone';
    $instance['widget']['settings']['format_handlers']['organisation'] = 'organisation';
    $instance['widget']['settings']['format_handlers']['name-oneline'] = 'name-oneline';
    field_update_instance($instance);
  }

  drupal_set_message($t('Thanks for enabling the bpost module. Enter your bpost credentials on !page.', array(
    '!page' => l($t('this page'), 'admin/commerce/config/commerce_bpost'))));
}

/**
 * Implements hook_uninstall().
 */
function commerce_bpost_uninstall() {
  variable_del('commerce_bpost_settings');
  commerce_delete_instances('commerce_bpost_rate', 'rate');
  commerce_delete_field('field_bpost_label');
  commerce_delete_field('bpost_min_weight');
  commerce_delete_field('bpost_max_weight');
  commerce_delete_field('field_barcode');
}

/**
 * Enable the new option 'saturday delivery'.
 */
function commerce_bpost_update_7001() {
  $settings = variable_get('commerce_bpost_settings', array());
  $settings['options']['bpost_home']['saturday_delivery'] = 'saturday_delivery';
  $settings['options']['bpost_postoffice_postpoint']['saturday_delivery'] = 'saturday_delivery';
  $settings['options']['bpost_bpack']['saturday_delivery'] = 'saturday_delivery';
  variable_set('commerce_bpost_settings', $settings);
}

/**
 * Set the default settings of the new option 'delivery date.
 */
function commerce_bpost_update_7002() {
  $settings = variable_get('commerce_bpost_settings', array());
  $default_settings = _commerce_bpost_get_default_settings();

  $settings['options']['delivery_date'] = $default_settings['options']['delivery_date'];
  variable_set('commerce_bpost_settings', $settings);
}

/**
 * Add a drop date field to the bpost orders.
 */
function commerce_bpost_update_7003() {
  $t = get_t();
  if (!field_info_field('field_dropdate')) {
    $field = array(
      'field_name' => 'field_dropdate',
      'type' => 'datestamp',
      'cardinality' => '1',
    );
    field_create_field($field);
  }
  if (!field_info_instance('commerce_order', 'field_dropdate', 'bpost')) {
    $instance = array(
      'label' => $t('Drop date'),
      'field_name' => 'field_dropdate',
      'entity_type' => 'commerce_order',
      'bundle' => 'bpost',
      'required' => FALSE,
      'widget' => array(
        'type' => 'date_select',
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Set the default settings of the new option 'Number of delivery dates shown'.
 */
function commerce_bpost_update_7004() {
  $settings = variable_get('commerce_bpost_settings', array());
  $default_settings = _commerce_bpost_get_default_settings();

  $settings['options']['shown_number'] = $default_settings['options']['shown_number'];
  variable_set('commerce_bpost_settings', $settings);

  $field = field_read_field('field_dropdate');
  if (!empty($field)) {
    $field['cardinality'] = 1;
    field_update_field($field);
  }
}

/**
 * Update the granularity of the field 'field_dropdate': ignore 'hour', 'minute' and 'second'.
 */
function commerce_bpost_update_7005() {
  $field_dropdate = field_read_field('field_dropdate');
  if (!empty($field_dropdate)) {
    $field_dropdate['settings']['granularity'] = array(
      'year' => 'year',
      'month' => 'month',
      'day' => 'day',
      'hour' => 0,
      'minute' => 0,
      'second' => 0,
    );
    field_update_field($field_dropdate);
  }
}

function _commerce_bpost_get_default_settings() {
  $t = get_t();
  return array(
    'options' => array(
      // By default, all the options are enabled
      'bpost_home' => array(
        'second_presentation' => 'second_presentation',
        'insurance' => 'insurance',
        'signature' => 'signature',
        'saturday_delivery' => 'saturday_delivery',
      ),
      'bpost_postoffice_postpoint' => array(
        'signature' => 'signature',
        'saturday_delivery' => 'saturday_delivery',
      ),
      'bpost_bpack' => array(
        'signature' => 'signature',
        'saturday_delivery' => 'saturday_delivery',
      ),
      'bpost_world' => array(
        'insurance_basic' => 'insurance_basic',
      ),
      'delivery_date' => array(
        'display' => 0,
        'choose' => 0,
        'shown_number' => COMMERCE_BPOST_DELIVERY_DATE_SHOWN_NUMBER,
        'time_limit' => COMMERCE_BPOST_DELIVERY_DATE_TIME_LIMIT,
        'delay' => 0,
      ),
      'international_delivery' => 'bpack World Business',
    ),
    'gmap' => array(
      'id' => 'google-map',
      'width' => '70%',
      'height' => '400px',
      'autozoom' => '1',
    ),
    'bpost_fields' => array(
      'receiver' => array(
        'name' => array(
          'description' => $t("The receiver's name"),
          'required' => FALSE,
        ),
        'company' => array(
          'description' => $t("The company's name"),
          'required' => FALSE,
        ),
        'streetName' => array(
          'description' => $t("Max length = 40."),
          'required' => FALSE,
        ),
        'number' => array(
          'description' => $t("Max length = 8."),
          'required' => FALSE,
        ),
        'box' => array(
          'description' => $t("Max length = 8."),
          'required' => FALSE,
        ),
        'postalCode' => array(
          'description' => $t("Max length = 40."),
          'required' => FALSE,
        ),
        'locality' => array(
          'description' => $t("Integer Max length = 40."),
          'required' => FALSE,
        ),
        'countryCode' => array(
          'description' => $t("Uppercase 2 character ISO country code. Default 'BE'"),
          'required' => FALSE,
        ),
        'emailAddress' => array(
          'description' => $t("The receiver's email. Max length = 50"),
          'required' => FALSE,
        ),
        'phoneNumber' => array(
          'description' => $t("The receiver's phone number. Max length = 20"),
          'required' => FALSE,
        ),
      ),
      'sender' => array(
        'name' => array(
          'description' => $t("The sender's name"),
          'required' => TRUE,
          'title' => $t('Name'),
        ),
        'company' => array(
          'description' => $t("The company's name"),
          'required' => TRUE,
          'title' => $t('Company'),
        ),
        'streetName' => array(
          'description' => $t("Max length = 40."),
          'required' => TRUE,
          'title' => $t('Street Name'),
        ),
        'number' => array(
          'description' => $t("Max length = 8."),
          'required' => TRUE,
          'title' => $t('Number'),
        ),
        'box' => array(
          'description' => $t("Max length = 8."),
          'required' => FALSE,
          'title' => $t('Box'),
        ),
        'postalCode' => array(
          'description' => $t("Max length = 40."),
          'required' => TRUE,
          'title' => $t('Postal Code'),
        ),
        'locality' => array(
          'description' => $t("Integer Max length = 40."),
          'required' => TRUE,
          'title' => $t('Locality'),
        ),
        'mail' => array(
          'description' => $t("The sender's email. Max length = 50"),
          'required' => TRUE,
          'title' => $t('Email'),
        ),
        'phoneNumber' => array(
          'description' => $t("The sender's phone number. Max length = 20"),
          'required' => TRUE,
          'title' => $t('Phone Number'),
        ),
      ),
    ),
    'mapping' => array(
      'validation_status' => 'checkout_complete',
      'canceling_status' => 'canceled',
      'treated_status' => array(
        'canceled' => 'canceled',
        'completed' => 'completed',
      ),
      'open_status' => array(
        'pending' => 'pending',
      ),
      'customer_profile' => 'shipping',
      'profile' => array(
        'fields' => array(
          'name' => 'commerce_customer_address|name_line',
          'company' => '',
          'streetName' => 'commerce_customer_address|thoroughfare',
          'number' => 'commerce_customer_address|premise',
          'box' => '',
          'postalCode' => 'commerce_customer_address|postal_code',
          'locality' => 'commerce_customer_address|locality',
          'countryCode' => 'commerce_customer_address|country',
          'emailAddress ' => '',
          'phoneNumber ' => 'commerce_customer_address|phone_number',
        ),
      ),
      'sender' => array(
        'countryCode' => 'BE',
      ),
    ),
    'label' => array(
      'method' => 'drupal',
      'format' => 'A4',
      'return' => 'not_include',
    ),
    'account' => array(
      'bpack_url' => 'http://www.bpack247.be/BpostRegistrationWebserviceREST/servicecontroller.svc/lightcustomer/',
    ),
  );
}
