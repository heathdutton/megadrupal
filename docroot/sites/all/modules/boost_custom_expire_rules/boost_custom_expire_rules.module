<?php
/**
 * @file
 * boost_custom_expire_rules module.
 */

/**
 * Implements hook_init().
 */
function boost_custom_expire_rules_init() {
  // Load available rules
  $files = file_scan_directory(drupal_get_path('module', 'boost_custom_expire_rules') . '/rules', '/^boost_custom_expire_rules_rule_.*.inc$/');
  foreach ($files as $absolute => $file) {
    // Filenames are expected to be of the form boost_custom_expire_rules_rule_rulename.inc
    // where rulename contain only [a-z]. If the filename does not meet this criteria the
    // rule will not be included
    $rulename = preg_replace('/^boost_custom_expire_rules_rule_([a-z]+)$/', '${1}', $file->name);
    if ($rulename != $file->name) {
      boost_custom_expire_rules_list($rulename);
      require $absolute;
    }
  }
}

/**
 * Implements hook_exit().
 */
function boost_custom_expire_rules_exit($destination = NULL) {
  global $base_root;
  global $_boost;

  if (isset($_boost['is_cacheable']) && $_boost['is_cacheable']) {
    $url = $base_root . request_uri();
    $configured_rules = explode("\n", variable_get('boost_custom_expire_rules_rules', ''));
    $i = 0;
    // Loop through all the rules configured for the module
    foreach ($configured_rules as $rule) {
      // Skip blank lines
      if (trim($rule) == '') {
        continue;
      }
      $rule = json_decode($rule);
      // Check if the function for processing the rule indeed does exist or else skip
      $function = 'boost_custom_expire_rules_rule_' . $rule->name . '_get_expire_value';
      if (function_exists($function)) {
        // Check if the rule condition matches the current request
        $expire = $function($rule, $url);
        // If the current URL meets the rule condition then the function will return a non-NULL value
        // Stop processing any further conditions on the first matching rule
        if (isset($expire)) {
          if (variable_get('boost_custom_expire_rules_rules_enable_debug', '0')) {
            watchdog('boost_custom', "Returned @expire from rule @rule", array('@expire' => $expire, '@rule' => $configured_rules[$i]), WATCHDOG_DEBUG);
          }
          break;
        }
      }
      $i++;
    }

    // Set expire if $expire has been set and if it is numeric
    if (isset($expire) && is_numeric($expire)) {
      $default_lifetime = $_boost['matched_header_info']['lifetime_max'];
      $expire_time = time() + $expire - $default_lifetime;
      if (variable_get('boost_custom_expire_rules_rules_enable_debug', '0')) {
        watchdog('boost_custom', "Updated expiry to @expire for url @url", array('@expire' => $expire, '@url' => $url), WATCHDOG_DEBUG);
      }
      touch($_boost['filename'], $expire_time);
    }
  }
}

/**
 * Implements hook_menu().
 */
function boost_custom_expire_rules_menu() {
  $items['admin/config/system/boost-expire-rules'] = array(
    'title'            => 'Boost Cache Expire Rules',
    'description'      => 'Set various rules for expiration of boost cache.',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('boost_custom_expire_rules_admin_settings_form'),
    'type'             => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Admin settings form.
 */
function boost_custom_expire_rules_admin_settings_form() {
  $form = array();
  $form['boost_custom_expire_rules_rules'] = array(
    '#type' => 'textarea',
    '#title' => t('Custom rules to be applied for setting expire values for boost cached pages'),
    '#description' => t('Enter one rule per line. Each rule has to be entered as a json encoded string with the parameters for the rules. You can see below the different rules that are currently supported. The processing of the rules will stop at the first matched rule for a given URL. You can extend this with your own rule types by following the documentation provided with the module. Do note that this is primarily targeted at webmasters or drupal developers so the interface is intentionally simple to keep the module lightweight.'),
    '#default_value' => variable_get('boost_custom_expire_rules_rules', ''),
  );
  $form['boost_custom_expire_rules_rules_examples'] = array(
    '#markup' => boost_custom_expire_rules_info(),
  );
  $form['boost_custom_expire_rules_rules_enable_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable debug mode'),
    '#default_value' => variable_get('boost_custom_expire_rules_rules_enable_debug', '0'),
    '#description' => t('Check this to enable watchdog calls with information about the logic being executed.'),
  );
  return system_settings_form($form);
}

/**
 * Validation function for boost_custom_expire_rules_admin_settings_form.
 */
function boost_custom_expire_rules_admin_settings_form_validate($form, &$form_state) {
  $rules = explode("\n", $form_state['values']['boost_custom_expire_rules_rules']);
  foreach ($rules as $rule) {
    // Skip blank lines
    if (trim($rule) == '') {
      continue;
    }
    $decoded_rule = json_decode($rule);
    // Raise error if JSON is not valid
    if (is_null($decoded_rule)) {
      form_set_error('boost_custom_expire_rules_rules', t('"@rule" is not a valid JSON string.', array('@rule' => $rule)));
    }
    // Else if the rule does not have a name set
    elseif (!isset($decoded_rule->name)) {
      form_set_error('boost_custom_expire_rules_rules', t('"@rule" is not a valid rule configuration. Please see the documentation for the module to see how to add a custom rule.', array('@rule' => $rule)));
    }
    // Else if the name set for the rule is not valid
    else {
      $function = 'boost_custom_expire_rules_rule_' . $decoded_rule->name . '_validate_configuration';
      if (!function_exists($function)) {
        form_set_error('boost_custom_expire_rules_rules', t('"@name" does not look like a valid rule or the rule include file was not built right. Please see the documentation for the module to see how to build / add a custom rule.', array('@rule' => $rule, '@name' => $decoded_rule->name)));
      }
      // Else if the parameters set for the rule does not meet the requirements for the rule processor
      else {
        $message = $function($decoded_rule);
        if ($message) {
          form_set_error('boost_custom_expire_rules_rules', t('"@rule" is not a valid rule configuration. @message', array('@rule' => $rule, '@message' => $message)));
        }
      }
    }
  }
}

/**
 * Utility function to cache rule names so as to not have to parse the list of files to list rules.
 */
function boost_custom_expire_rules_list($rule = NULL) {
  static $rules = array();
  if (isset($rule)) {
    $rules[] = $rule;
  }
  return $rules;
}

/**
 * Generate and show information about available rules to the user in the admin page
 */
function boost_custom_expire_rules_info() {
  $rules = boost_custom_expire_rules_list();
  $output = '';
  foreach ($rules as $rulename) {
    // Invoke the info function for the rule and generate html output
    $function = 'boost_custom_expire_rules_rule_' . $rulename . '_info';
    if (function_exists($function)) {
      $info = $function();
      $output .= '<h3>' . $info['title'] . '</h3><p>' . $info['description'] . '</p>';
      $output .= '<p><strong>Examples</strong></p><ul>';
      foreach ($info['examples'] as $example) {
        $output .= '<li>' . $example['rule'] . ' - ' . $example['description'] . '</li>';
      }
      $output .= '</ul>';
    }
  }
  return $output;
}
