<?php


include_once('doublerecall.module.inc');

/**
 * Implements hook_init().
 */
function doublerecall_init() {
  _doublerecall_add_init_script();

  if (doublerecall_should_hide()) {
    _doublerecall_add_locking_script();
  }
}

/**
 * Implements hook_menu().
 */
function doublerecall_menu() {
  $items['admin/config/services/doublerecall'] = array(
    'title' => 'DoubleRecall',
    'description' => 'DoubleRecall configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('doublerecall_admin'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Adds locking script to page.
 */
function _doublerecall_add_locking_script() {
  $server = variable_get('doublerecall_server', 'us');
  $publisher_token = variable_get('doublerecall_publisher_token', NULL);
  $served_cb = variable_get('doublerecall_callback_served', '');
  $retyped_cb = variable_get('doublerecall_callback_retyped', '');
  $paid_cd = variable_get('doublerecall_callback_paid', '');
  $noad_cb = variable_get('doublerecall_callback_noad', '');

  if (!empty($publisher_token)) {
    $activated = &drupal_static('doublerecall_activated', FALSE);
    $activated = TRUE;

    $script = 'window.DR_article_unhide=function(){window._dr_check&&clearTimeout(window._dr_check);var a=window.document;if(a.getElementsByClassName)var b=a.getElementsByClassName("dr_article");else for(var c=window.document.getElementsByTagName("*"),d=-1,e,b=[];e=c[++d];)-1<(" "+(e["class"]||e.className)+" ").indexOf(" dr_article ")&&b.push(e);for(d=0;d<b.length;d++)b[d].style.display="";if(e=a.getElementById("dr_article"))e.style.display=""},
      (function(a,b,c,d,e,f){var g=window.document.createElement("script");g.type="text/javascript",g.async=!0,g.src="http://"+Math.floor((new Date).getTime()/864e5)+".core."+a+".doublerecall.com/core.js.php?__DRp="+b+"&g="+encodeURIComponent(c)+"&v="+encodeURIComponent(d)+"&p="+encodeURIComponent(e)+"&n="+encodeURIComponent(f)+"&r="+encodeURIComponent(document.referrer),a=window.document.getElementsByTagName("script")[0],a.parentNode.insertBefore(g,a),window._dr_check=setTimeout(function(){window.DR_server_visible||window.DR_article_unhide()},2e3)
    })("' . $server . '","' . $publisher_token . '","' . $served_cb . '","' . $retyped_cb . '","' . $paid_cd . '","' . $noad_cb . '")';
    drupal_add_js($script, array('scope' => 'footer', 'type' => 'inline'));
  }
}


/**
 * Adds init script to page.
 */
function _doublerecall_add_init_script() {
  $server = variable_get('doublerecall_server', 'us');
  $publisher_token = variable_get('doublerecall_publisher_token', NULL);

  if (!empty($publisher_token)) {
    $script = '(function(a,b){
      var c=window.document,d=c.createElement("script");
      d.type="text/javascript",d.async=!0,d.src="http://"+Math.floor((new Date).getTime()/864e5)+".core."+a+".doublerecall.com/bootstrap.js.php?__DRp="+b+"&r="+encodeURIComponent(document.referrer),c=c.getElementsByTagName("script")[0],c.parentNode.insertBefore(d,c)
    })("' . $server . '","' . $publisher_token . '")';
    drupal_add_js($script, 'inline');
  }
}

/**
 * Implements hook_block_info().
 */
function doublerecall_block_info() {
  $blocks['placeholder'] = array(
    'info' => t('DoubleRecall placeholder'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function doublerecall_block_view($delta = '') {
  if ($delta == 'placeholder') {
    $block['subject'] = t('DoubleRecall placeholder');
    $block['content'] = '<div id="dr_container"></div>';

    $activated = &drupal_static('doublerecall_activated', FALSE);
    if (!$activated) {
      _doublerecall_add_locking_script();
    }

    return $block;
  }
}

/**
 * Administration page.
 */
function doublerecall_admin() {
  $form = array();
  $form['doublerecall_publisher_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Publisher token'),
    '#description' => t('Insert your DoubleRecall\'s publisher token.'),
    '#default_value' => variable_get('doublerecall_publisher_token', NULL),
  );
  $form['doublerecall_server'] = array(
    '#type' => 'textfield',
    '#title' => t('DoubleRecall server'),
    '#description' => t('Which DoubleRecall server to use.'),
    '#default_value' => variable_get('doublerecall_server', 'us'),
  );

  $types = node_type_get_types();
  $options = array();
  foreach ($types as $name => $type) {
    $options[$name] = $type->name;
  }

  $form['doublerecall_hide_node'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Node types to hide'),
    '#description' => t('Which node types should be hidden by DoubleRecall.'),
    '#options' => $options,
    '#multiple' => TRUE,
    '#default_value' => variable_get('doublerecall_hide_node', array()),
  );

  $served_cb = variable_get('doublerecall_callback_served', '');
  $retyped_cb = variable_get('doublerecall_callback_retyped', '');
  $paid_cd = variable_get('doublerecall_callback_paid', '');
  $noad_cb = variable_get('doublerecall_callback_noad', '');
  $form['callbacks'] = array(
    '#type' => 'fieldset',
    '#title' => t('Callbacks'),
    '#description' => t("Add calback calls or just pass an empty string if you don't need a specific callback."),
    '#collapsible' => TRUE,
    '#collapsed' => empty($served_cb) && empty($retyped_cb) && empty($paid_cd) && empty($noad_cb),
  );
  $form['callbacks']['doublerecall_callback_served'] = array(
    '#type' => 'textfield',
    '#title' => t('Served'),
    '#description' => t('The ad is served.'),
    '#default_value' => variable_get('doublerecall_callback_served', ''),
  );
  $form['callbacks']['doublerecall_callback_retyped'] = array(
    '#type' => 'textfield',
    '#title' => t('Re-typed'),
    '#description' => t('The user just correctly re-typed, the content will be shown.'),
    '#default_value' => variable_get('doublerecall_callback_retyped', ''),
  );
  $form['callbacks']['doublerecall_callback_paid'] = array(
    '#type' => 'textfield',
    '#title' => t('Paid'),
    '#description' => t('The user already paid for this session, the content will be shown.'),
    '#default_value' => variable_get('doublerecall_callback_paid', ''),
  );
  $form['callbacks']['doublerecall_callback_noad'] = array(
    '#type' => 'textfield',
    '#title' => t('No ad'),
    '#description' => t('There are absolutely no ads available, the content will be shown.'),
    '#default_value' => variable_get('doublerecall_callback_noad', ''),
  );

  return system_settings_form($form);
}

/**
 * Checks weather DoubleRecall was activated during this request.
 */
function doublerecall_activated() {
  return drupal_static(__FUNCTION__);
}

/**
 * Check wether DoubleRecall should hide content on this request.
 */
function doublerecall_should_hide() {
  $should_hide = &drupal_static(__FUNCTION__);

  if (!isset($should_hide)) {
    $response = module_invoke_all('doublerecall_should_hide');
    $response = array_filter($response);
    $should_hide = count($response) > 0;

    drupal_alter('doublerecall_should_hide', $should_hide);
  }

  return $should_hide;
}

/**
 * Implements hook_preprocess_node().
 */
function doublerecall_preprocess_node(&$vars) {
  $types = variable_get('doublerecall_hide_node', array());
  if (doublerecall_should_hide() && !empty($types[$vars['node']->type])) {
    doublerecall_enable($vars);
  }
}

/**
 * Helper function to activate DoubleRecall in theme. Will add 'dr_article' class
 * and 'style="display:_none"' argument.
 *
 * This can be called from e.g. hook_preprocess_node().
 *
 * @param $vars array of theme variables.
 */
function doublerecall_enable(&$vars) {
  $vars['attributes_array']['style'] = 'display: none';
  $vars['classes_array'][] = 'dr_article';
  $vars['doublerecall_active'] = TRUE;
}