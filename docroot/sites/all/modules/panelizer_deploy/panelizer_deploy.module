<?php

use Drupal\panelizer_deploy\ConverterMap;
use Drupal\panelizer_deploy\ConverterException;
use Drupal\panelizer_deploy\DisplayConverter;
use Drupal\panelizer_deploy\EntityContextConverter;
use Drupal\panelizer_deploy\EntityConverter;
use Drupal\panelizer_deploy\PaneConverter;
use Drupal\panelizer_deploy\PaneEntityConverter;

//@TODO maybe use composer_manager
xautoload()->registerModulePsr4(__FILE__, 'src');

/**
 * Implements hook_deploy_entity_alter().
 */
function panelizer_deploy_deploy_entity_alter(&$entity, $entity_type) {
  if (empty($entity) || empty($entity_type)) {
    return;
  }

  if (panelizer_deploy_is_panelizer($entity, $entity_type)) {
    $entity->panelizer = serialize($entity->panelizer);
  }
}

/**
 * Implements hook_deploy_entity_dependencies().
 */
function panelizer_deploy_entity_dependencies($entity, $entity_type) {
  if (panelizer_deploy_is_panelizer($entity, $entity_type)) {
    $info = entity_get_info();
    $entity_keys = array_keys($info);

    ctools_include('content');
    $dependencies = array();
    foreach ($entity->panelizer as $view_mode) {
      foreach ($view_mode->display->content as $pid => $pane) {
        // Handle fieldable panel panes.
        if ($pane->type == 'fieldable_panels_pane') {
          list($idtype, $id) = explode(':', $pane->subtype);
          if ($idtype == 'fpid') {
            entity_dependency_add($dependencies, (object) array('fpid' => $id), 'fieldable_panels_pane', 'fpid');
          }
          else {
            $ids = entity_get_id_by_uuid('fieldable_panels_pane', array($id));
            entity_dependency_add(
              $dependencies,
              (object) array('fpid' => reset($ids)),
              'fieldable_panels_pane',
              'fpid'
            );
          }
        }
        // Handle bean-based blocks.
        if ($pane->type == 'block' && preg_match('#^bean-(.*)$#', $pane->subtype, $matches)) {
          $delta = $matches[1];
          $bean = bean_load_delta($delta);
          if (!empty($bean)) {
            entity_dependency_add($dependencies, array($bean), 'bean', 'bid');
          }
        }
        elseif (isset($entity_keys[$pane->type]) && $pane->type == $pane->subtype) {
          // Does this entity support uuid
          // Does this catch more then node?
          if (isset($info[$pane->type]['entity keys']['uuid'])) {
            entity_dependency_add(
              $dependencies,
              (object) $pane->configuration,
              $pane->type,
              $info[$pane->type]['entity keys']['id']
            );
          }
        }

        if (!empty($pane->contexts)) {
          foreach ($pane->contexts as $id => $context) {
            if ($matches = panelizer_deploy_get_entity_ids_from_context($context)) {
              entity_dependency_add($dependencies, (object) $context, $matches[1], 'entity_id');
            }
          }
        }
      }
    }

    return $dependencies;
  }
}

/**
 * Get the entity id's from a context
 *
 * @param $context string
 * @return array
 */
function panelizer_deploy_get_entity_ids_from_context($context) {
  preg_match('/^entity:(\w+)$/', $context['name'], $matches);
  return $matches;
}

/**
 * Is this entity panelized
 *
 * @param $entity stdClass
 * @param $entity_type string
 * @return boolean|PanelizerEntityInterface
 */
function panelizer_deploy_is_panelizer($entity, $entity_type) {
  $static = & drupal_static(__FUNCTION__, array());

  if (!isset($static[$entity_type])) {
    $static[$entity_type] = array();
  }

  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

  if (!isset($static[$entity_type][$bundle])) {
    if ($handler = panelizer_entity_plugin_get_handler($entity_type)) {
      // Get all of the entity types that have uuid enables

      if ($handler->is_panelized($bundle) && !empty($entity->panelizer)) {
        $static[$entity_type][$bundle] = $handler;
      }
      else {
        $static[$entity_type][$bundle] = FALSE;
      }
    }
    else {
      $static[$entity_type][$bundle] = FALSE;
    }
  }


  return $static[$entity_type][$bundle];
}


/**
 * Implements hook_entity_uuid_load().
 */
function panelizer_deploy_entity_uuid_load(&$entities, $entity_type) {
  $main_entity_converter_key = "entity-$entity_type";

  $converter = new ConverterMap();
  $converter->addConverterType(new PaneConverter(), "panels_pane")
    ->addConverterType(new DisplayConverter(), "panels_display")
    ->addConverterType(new PaneEntityConverter($entity_type), $main_entity_converter_key);

  foreach ($entities as &$entity) {
    if (panelizer_deploy_is_panelizer($entity, $entity_type)) {

      // get the uuid key for this entity
      // The uuid should already be set on the entity
      $info = entity_get_info();
      $entity_keys = array_keys($info);

      foreach ($entity->panelizer as &$view_mode) {
        $converter->addObject($view_mode, $main_entity_converter_key);

        if (isset($view_mode->revision_id) && isset($info[$entity_type]['entity keys']['revision uuid'])) {
          $view_mode->revision_id = $entity->{$info[$entity_type]['entity keys']['revision uuid']};
        }

        // Sometimes entity_id contains a UUID which errors when convertToUUID is called.
        if (isset($view_mode->entity_id) && !is_numeric($view_mode->entity_id)) {
          $view_mode->entity_id = $entity->{$info[$entity_type]['entity keys']['id']};
        }

        // Only update display if they have an id
        if ($view_mode->did && $view_mode->display !== "new") {
          // update display id
          // No need for the converter here since we know it's part of the object
          $converter->addObject($view_mode, 'panels_display');
          $converter->addObject($view_mode->display, 'panels_display');

          foreach ($view_mode->display->content as $pid => &$pane) {
            // uuid pane and display
            $converter->addObject($pane, 'panels_pane');
            $converter->addObject($pane, 'panels_display');

            // From other entities
            // Does this catch more then node?
            if (isset($entity_keys[$pane->type]) && $pane->type == $pane->subtype) {
              // Does this entity support uuid
              if (isset($info[$pane->type]['entity keys']['uuid'])) {
                $type_info = $info[$pane->type];
                if (is_numeric($pane->configuration[$type_info['entity keys']['id']])) {
                  $converter_key = "entity-{$pane->type}";
                  try {
                    $converter->getConverterType($converter_key);
                  } catch (ConverterException $e) {
                    $converter->addConverterType(new EntityConverter($pane->type), $converter_key);
                  }

                  $converter->addObject($pane->configuration, $converter_key);
                }
              }
            }

            // Update contexts
            if (!empty($pane->contexts)) {
              foreach ($pane->contexts as &$context) {
                if ($matches = panelizer_deploy_get_entity_ids_from_context($context)) {
                  $converter_key = "context-entity-{$matches[1]}";
                  try {
                    $converter->getConverterType($converter_key);
                  } catch (ConverterException $e) {
                    $converter->addConverterType(new EntityContextConverter($matches[1]), $converter_key);
                  }

                  $converter->addObject($context, $converter_key);
                }
              }
            }
          }

          // Update the ids
          $allowed_keys = array();
          foreach ($view_mode->display->content as &$pane) {
            $view_mode->display->content[$pane->uuid] = $pane;
            $allowed_keys[] = $pane->uuid;
          }

          // Update the panels
          foreach ($view_mode->display->panels as &$panel) {
            foreach ($panel as &$panel_pid) {
              $panel_pid = $view_mode->display->content[$panel_pid]->uuid;
            }
          }

          // We only want the uuid keys
          $view_mode->display->content = array_intersect_key($view_mode->display->content, array_flip($allowed_keys));
        }
      }
    }
  }

  $converter->convertToUUID();
}

/**
 * Implements hook_entity_uuid_presave().
 */
function panelizer_deploy_entity_uuid_presave(&$entity, $entity_type) {
  if (panelizer_deploy_is_panelizer($entity, $entity_type)) {
    if (is_string($entity->panelizer)) {
      $entity->panelizer = unserialize($entity->panelizer);
    }

    $converter = new ConverterMap();
    $main_entity_converter_key = "entity-$entity_type";
    $converter->addConverterType(new PaneConverter(), "panels_pane")
      ->addConverterType(new DisplayConverter(), "panels_display")
      ->addConverterType(new PaneConverter(), 'panels_pane')
      ->addConverterType(new PaneEntityConverter($entity_type), $main_entity_converter_key);


    $info = entity_get_info();
    $entity_keys = array_keys($info);

    foreach ($entity->panelizer as &$view_mode) {
      $converter->addObject($view_mode, $main_entity_converter_key);

      if (isset($view_mode->revision_id) && isset($info[$entity_type]['entity keys']['revision'])) {
        $view_mode->revision_id = (int) $entity->{$info[$entity_type]['entity keys']['revision']};
      }

      // if we have no did then there is no conversation to do
      if ($view_mode->display->did && $view_mode->display->did !== 'new') {

        // If the did is empty then we need to unset the name so panelizer will save the custom display
        $view_mode->name = NULL;
        // Need the display_is_modified property set in order for panelizer to update the displays
        $view_mode->display_is_modified = TRUE;

        $converter->addObject($view_mode, 'panels_display');
        $converter->addObject($view_mode->display, 'panels_display');

        foreach ($view_mode->display->content as &$pane) {
          // uuid pane and display
          $converter->addObject($pane, 'panels_pane');
          $converter->addObject($pane, 'panels_display');

          // From other entities
          // Does this catch more then node?
          if (isset($entity_keys[$pane->type]) && $pane->type == $pane->subtype) {
            // Does this entity support uuid
            if (isset($info[$pane->type]['entity keys']['uuid'])) {
              $converter_key = "entity-{$pane->type}";
              try {
                $converter->getConverterType($converter_key);
              } catch (ConverterException $e) {
                $converter->addConverterType(new EntityConverter($pane->type), $converter_key);
              }

              $converter->addObject($pane->configuration, $converter_key);
            }
          }

          // Update contexts
          if (!empty($pane->contexts)) {
            foreach ($pane->contexts as $context) {
              if ($matches = panelizer_deploy_get_entity_ids_from_context($context)) {
                $converter_key = "context-entity-{$matches[1]}";
                try {
                  $converter->getConverterType($converter_key);
                } catch (ConverterException $e) {
                  $converter->addConverterType(new EntityContextConverter($matches[1]), $converter_key);
                }

                $converter->addObject($context, $converter_key);
              }
            }
          }
        }
      }
    }

    $converter->convertToID();

    // Go back and update the keys
    foreach ($entity->panelizer as &$view_mode) {
      if ($view_mode->display->did && $view_mode->display->did !== 'new') {
        // Update the ids
        $allowed_keys = array();

        $i = 1;
        foreach ($view_mode->display->content as &$pane) {
          if (empty($pane->pid)) {
            $pane->pid = "new-{$i}";
            $i++;
          }

          $view_mode->display->content[$pane->pid] = $pane;
          $allowed_keys[] = $pane->pid;
        }

        // Update the panels
        foreach ($view_mode->display->panels as &$panel) {
          foreach ($panel as &$uuid) {
            $uuid = $view_mode->display->content[$uuid]->pid;
          }
        }

        // We only want the id keys
        $view_mode->display->content = array_intersect_key($view_mode->display->content, array_flip($allowed_keys));
      }
    }
  }
}
