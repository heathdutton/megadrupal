<?php


/**
 * Implements hook_permission()
 */
function imagene_permission() {

  return array(

    // Prevent spambots, malicious visitors or rogue scripts
    // from filling up the imagene dir with junk.
    'save imagene images' => array(
      'title' => t('Save imagene images'),
    ),

    // Prevent other sites from stealing bandwidth,
    // by using this site's imagene as an image generator
    'see non-existing imagene images' => array(
      'title' => t('See non-existing imagene images'),
    ),
  );
}


/**
 * Implements hook_menu()
 */
function imagene_menu() {

  $items = array();
  foreach (array(

    // public download method
    // file_directory_path(),

    // more generic files dir
    'sites/%imagene_site_dir/files',

    // private download method
    'system/files'

  ) as $files_base) {
    $arg_offset = count(explode('/', $files_base));
    foreach (array('gradient', 'gradient-x', 'gradient-xy') as $key) {
      $items[$files_base .'/imagene/'. $key .'/%imagene_image'] = array(
        'load arguments' => array($key, '%map', '%index'),
        'page callback' => 'imagene_image',
        'page arguments' => array($arg_offset + 2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'imagene.image.inc',
      );
    }
  }
  
  return $items;
}


/**
 * Wildcard loader for %imagene_site_dir.
 */
function imagene_site_dir_load($slug) {
  $fdpath = drupal_realpath('public://');
  $urlpath = realpath('sites/'. $slug .'/files');
  return $fdpath == $urlpath;
}


/**
 * Wildcard loader for %imagene_image
 */
function imagene_image_load($file, $key) {
  _imagene_include();
  module_load_include('load.inc', 'imagene');
  return _imagene_image_load($file, $key);
}


function _imagene_include() {
  static $_first_run = TRUE;
  if ($_first_run) {
    if (!module_exists('xautoload')) {
      spl_autoload_register('_imagene_autoload');
    }
    $_first_run = FALSE;
  }
}


/**
 * Autoload callback.
 */
function _imagene_autoload($name) {
  if (preg_match('#^imagene_([A-Z].*)$#', $name, $m)) {
    $path = strtr($m[1], '_', '/');
    module_load_include('php', 'imagene', "lib/$path");
  }
}


/**
 * Evaluate Bernstein polynomials for Bezier curves
 *
 * @param $t
 *   Float value between 0 and 1
 * @param $n
 *   Integer specifying the level of the Bernstein polynomial.
 */
function imagene_bernstein($t, $n) {
  static $_cache = array();
  if (!isset($_cache[''.$t])) {
    $_cache[''.$t][0][0] = 1;
  }
  $B = $_cache[''.$t];
  if (!isset($B[$n])) {
    $q = 1-$t;
    // calculate Bernstein polynomials for value $t
    for ($k = count($B); $k <= $n; ++$k) {
      // calculate Bernstein polynomials for level $k
      $B[$k][$k] = 0;
      for ($i = $k - 1; $i >= 0; --$i) {
        $B[$k][$i] = $q * $B[$k-1][$i];
        $B[$k][$i+1] += $t * $B[$k-1][$i];
      }
    }
    $_cache[''.$t] = $B;
  }
  return $B[$n];
}


/**
 * Evaluate Bernstein polynomials for Bezier curves
 * with parameter $t/$T
 *
 * This is just an alternative implementation, to find out which one is faster :)
 * Turned out the integer version doesn't really speed anything up, on my test server.
 *
 * @param $t
 *   Integer value between 0 and $T, going to be divided by $T.
 * @param $n
 *   Integer specifying the level of the Bernstein polynomial
 * @param $T
 *   Integer to divide $t.
 *
 * @return
 *   A result that has to be divided by $T^$n
 */
function imagene_bernstein_int($t, $n, $T) {
  static $_cache = array();
  if (!isset($_cache[$T][$t])) {
    $_cache[$T][$t][0][0] = 1;
  }
  $B = &$_cache[$T][$t];
  if (!isset($B[$n])) {
    $q = $T - $t;
    // calculate Bernstein polynomials for value $t
    for ($k = count($B); $k <= $n; ++$k) {
      // calculate Bernstein polynomials for level $k
      $B[$k][$k] = 0;
      for ($i = $k - 1; $i >= 0; --$i) {
        $B[$k][$i] = $q * $B[$k - 1][$i];
        $B[$k][$i + 1] += $t * $B[$k - 1][$i];
      }
    }
  }
  return $B[$n];
}






