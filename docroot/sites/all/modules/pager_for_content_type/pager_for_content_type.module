<?php

/**
 * @file
 * Create previous and next buttons for all nodes in selected content type.
 */

/**
 * Implements hook_help().
 */
function pager_for_content_type_help($path, $arg) {
  switch ($path) {
    case 'admin/help#pager_for_content_type':
      $output = '';
      $output .= '<h3>' . t('About Pager for Content Type') . '</h3>';
      $output .= '<p>' . t('Adds "previous" and "next" navigation buttons to each node of a particular content type.') . '</p>';
      $output .= '<h3>' . t('Usage') . '</h3>';
      $output .= '<dl>';
      $output .= '<dd>' . t('This module provides a custom pager which allows the user to navigate between nodes of a particular content type.') . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function pager_for_content_type_permission() {
  return array(
    'access to pager for content type' => array(
      'title' => t('Access "Pager for content type" navigation'),
      'description' => t('Access the "next" and "previous" navigation buttons on nodes.'),
    ),
  );
}

/**
 * Implements hook_preprocess_page().
 */
function pager_for_content_type_preprocess_node(&$vars) {
  // Nothing to do here if the user is not permitted to access manager links.
  if (!user_access('access to pager for content type')) {
    return;
  }

  $on = variable_get($vars['type'] . '_pager_for_content_type_on', 0);
  if ($on) {
    $pager = pager_for_content_type_get_pager($vars['type'], $vars);
    if ($vars['view_mode'] == 'full') {
      $vars['content']['pager_for_content_type'] = array(
        '#items' => pager_for_content_type_get_pager_items($pager),
        '#attributes' => array('class' => 'pager-for-content-type'),
        '#theme' => 'item_list',
        '#weight' => 10,
      );
    }
  }

  $more_links_count = variable_get($vars['type'] . '_pager_for_content_type_more_links');
  if (!empty($more_links_count)) {
    if ($vars['view_mode'] == 'full') {
      $vars['content']['pager_for_content_type_more_links'] = array(
        '#items' => pager_for_content_type_get_pager_more_links($vars, $more_links_count),
        '#attributes' => array('class' => 'pager-for-content-type-more-links'),
        '#theme' => 'item_list',
        '#weight' => 11,
      );
    }
  }

}

/**
 * Select all node's ids fron database and generate $pager array.
 *
 * @param string $node_type
 *   Node type
 * @param integer $node
 *   Current node
 *
 * @return Array
 *   Array of pager
 */
function pager_for_content_type_get_pager($node_type, $node) {
  $pager = array();
  if (user_access('access content')) {

    $query = db_select('node', 'n');
    $query->condition('n.type', $node_type, '=')
        ->condition('n.status', '1', '=')
        ->fields('n', array('nid'));
    $query->range(0, 1);

    // next.
    $next_query = clone $query;
    $next_query->condition('n.created', $node['created'], '>')->orderBy('n.created', 'ASC');

    // prev.
    $prev_query = clone $query;
    $prev_query->condition('n.created', $node['created'], '<')->orderBy('n.created', 'DESC');

    // hook_pager_for_content_type_query_alter.
    module_invoke_all('pager_for_content_type_query_alter', $node, $prev_query, $next_query);

    $pager['next_nid'] = $next_query->execute()->fetchField();
    $pager['prev_nid'] = $prev_query->execute()->fetchField();

  }
  return $pager;
}


/**
 * Implements hook_pager_for_content_type_query_alter().
 */
function pager_for_content_type_pager_for_content_type_query_alter($node, $prev_query, $next_query) {
  $filter_by_author = variable_get($node['type'] . '_pager_for_content_type_author', 0);
  if (!empty($filter_by_author)) {
    $prev_query->condition('n.uid', $node['uid'], '=');
    $next_query->condition('n.uid', $node['uid'], '=');
  }
}

/**
 * Implements hook_pager_for_content_type_query_alter().
 */
function pager_for_content_type_pager_for_content_type_more_links_query_alter($node, $prev_query, $next_query) {
  $filter_by_author = variable_get($node['type'] . '_pager_for_content_type_author', 0);
  if (!empty($filter_by_author)) {
    $prev_query->condition('n.uid', $node['uid'], '=');
    $next_query->condition('n.uid', $node['uid'], '=');
  }
}

/**
 * Implements of hook_menu().
 */
function pager_for_content_type_menu() {
  $items = array();

  $items['admin/config/user-interface/pager_for_content_type/settings'] = array(
    'title' => 'Pager for content type settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pager_for_content_type_admin_settings'),
    'access arguments' => array('administer pager for content type'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'pager_for_content_type.admin.inc',
  );
  return $items;
}

/**
 * Get pager items function.
 *
 * @param array $pager
 *   Pager array
 *
 * @return array
 *   Pager items
 */
function pager_for_content_type_get_pager_items($pager) {
  $pager_next = (isset($pager['next_nid'])) ? $pager['next_nid'] : NULL;
  $pager_prev = (isset($pager['prev_nid'])) ? $pager['prev_nid'] : NULL;

  $items = array();
  if (!empty($pager_next) || !empty($pager_prev)) {
    $li_previous = ($pager_prev) ? l(variable_get('pager_for_content_type_previous_text'), 'node/' . $pager_prev, array('attributes' => array('class' => 'prev'))) : NULL;
    $li_next = ($pager_next) ? l(variable_get('pager_for_content_type_next_text'), 'node/' . $pager_next, array('attributes' => array('class' => 'next'))) : NULL;

    if ($li_previous) {
      $items[] = array(
        'class' => array('pager-previous'),
        'data' => $li_previous,
      );
    }

    if ($li_next) {
      $items[] = array(
        'class' => array('pager-next'),
        'data' => $li_next,
      );
    }
  }
  return $items;
}


/**
 * Get more links for pager for content type.
 *
 * @param array $node
 *   Node array
 *
 * @param int $more_links_count
 *   Count of links
 *
 * @return array
 *   More links
 */
function pager_for_content_type_get_pager_more_links($node, $more_links_count) {
  $items = array();
  if (user_access('access content')) {
    $query = db_select('node', 'n');
    $query->condition('n.type', $node['type'], '=')
        ->condition('n.status', '1', '=')
        ->fields('n', array('nid', 'title'))
        ->range(0, $more_links_count / 2 );

    // next.
    $next_query = clone $query;
    $next_query->condition('n.created', $node['created'], '>')->orderBy('n.created', 'ASC');

    // prev.
    $prev_query = clone $query;
    $prev_query->condition('n.created', $node['created'], '<')->orderBy('n.created', 'DESC');

    // hook_pager_for_content_type_query_alter.
    module_invoke_all('pager_for_content_type_more_links_query_alter', $node, $prev_query, $next_query);

    $next_count = $next_query->execute()->rowCount();
    $prev_count = $prev_query->execute()->rowCount();

    if ($prev_count < ($more_links_count / 2)) {
      $next_count = $more_links_count - $prev_count;
    }

    if ($next_count < ($more_links_count / 2)) {
      $prev_count = $more_links_count - $next_count;
    }

    $next_query->range(0, $next_count);
    $prev_query->range(0, $prev_count);

    $next = $next_query->execute()->fetchAllKeyed();
    $prev = $prev_query->execute()->fetchAllKeyed();
    $prev = array_reverse($prev, TRUE);
    $links = $prev + $next;
    foreach ($links as $nid => $title) {
      $items[] = array(
        'class' => array('pager-for-content-type-more-links-item'),
        'data' => l($title, 'node/' . $nid),
      );
    }
  }
  return $items;
}
