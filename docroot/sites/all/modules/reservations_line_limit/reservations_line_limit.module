<?php

/**
 * @file
 * reservations_line_limit functions
 */

/**
 * Implements hook_menu().
 */
function reservations_line_limit_menu() {

  $admin = array('administer Reservations');

  // Standard Administration settings.
  $items['admin/config/system/reservations/line-limit'] = array(
    'title' => 'Line Limit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reservations_line_limit_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => $admin,
    'description' => t('Set a limit on how many MERCI Reservations can be created started or ending in any 15 minute period.'),
    'type' => MENU_LOCAL_TASK,
  );


  return $items;
}

/**
 * Builds the admininstration settings form.
 */
function reservations_line_limit_admin_settings($form, &$form_state) {
  
  $form['reservations_line_limit_max_total'] = array(
    '#type' => 'textfield',
    '#title' => t('Max Reservations'),
    '#size' => 11,
    '#maxlength' => 11,
    '#default_value' => variable_get('reservations_line_limit_max_total', '10'),
    '#description' => t('Maximum number Reservation that can start or end during the same 15 minute period.  There are separate variables for starts and ends, but the total cannot exceed this number. For example, you could have 6 reservations starting and 4 ending.  Even though the End Max allows 2 more, if the total cannot exceed 10 the next reservation would be denied. If you are not concerned with ensuring a mix of pickups and returns in every 15 minute bock, set the Start Max and End Max equal to the Max Reservations value.'),
  );
  
  $form['reservations_line_limit_max_total_starts'] = array(
    '#type' => 'textfield',
    '#title' => t('Start Max'),
    '#size' => 11,
    '#maxlength' => 11,
    '#default_value' => variable_get('reservations_line_limit_max_total_starts', '6'),
    '#description' => t('Maximum number Reservation can start during the same 15 minute period.'),
  );
  
  $form['reservations_line_limit_max_total_ends'] = array(
    '#type' => 'textfield',
    '#title' => t('End Max'),
    '#size' => 11,
    '#maxlength' => 11,
    '#default_value' => variable_get('reservations_line_limit_max_total_ends', '6'),
    '#description' => t('Maximum number Reservation can end during the same 15 minute period.'),
  );
  
  return system_settings_form($form);
}


/**
 * Implements hook_node_validate().
 */
function reservations_line_limit_node_validate($node, $form, &$form_state) {
  
  if ($node->type == 'reservations_reservation') {
    
    $max_total = variable_get('reservations_line_limit_max_total', '10');
    $max_starts = variable_get('reservations_line_limit_max_total_starts', '6');
    $max_ends = variable_get('reservations_line_limit_max_total_ends', '6');
    
    //if this is an insert, subtract 1 to the start and end for this Reservation for the slot this would take
    if ($form['nid']['#value']) {
      $max_total--;
      $max_starts--;
      $max_ends--;
    }
      
    $start = $node->field_reservations_date['und'][0]['value'];
    $end = $node->field_reservations_date['und'][0]['value2']; 
    
    //Query for number of reservations starting or ending at the same time this Reservation starts and ends
    
    $total_at_start = db_query("SELECT COUNT(nid) FROM {field_data_field_reservations_date} JOIN {reservations_reservation} ON entity_id = reservations_reservation.nid WHERE field_reservations_date_value = :start OR field_reservations_date_value2 = :start AND reservations_reservation_status < 3", array(':start' => $start))->fetchField();
      
    $total_at_end = db_query("SELECT COUNT(nid) FROM {field_data_field_reservations_date} JOIN {reservations_reservation} ON entity_id = reservations_reservation.nid WHERE field_reservations_date_value = :end OR field_reservations_date_value2 = :end AND reservations_reservation_status < 3", array(':end' => $end))->fetchField();
        
    if ($total_at_start > $max_total) {
      $error = t('There are already %number Reservations starting or ending at this time.  Adjust the start time to prevent long lines at the checkout.', array('%number' => $total_at_start));
      if (user_access('manage reservations')) {
        drupal_set_message($error);
      } else {
        form_set_error('', $error);
      }
    }
    
    if ($total_at_end > $max_total) {
      $error = t('There are already %number Reservations starting or ending at this time.  Adjust the end time to prevent long lines at the checkout.', array('%number' => $total_at_end));
      if (user_access('manage reservations')) {
        drupal_set_message($error);
      } else {
        form_set_error('', $error);
      }
    }
    
    //Query for number of reservations starting at the same time this Reservation starts
    
    $total_starts = db_query("SELECT COUNT(nid) FROM {field_data_field_reservations_date} JOIN {reservations_reservation} ON entity_id = reservations_reservation.nid WHERE field_reservations_date_value = :start AND reservations_reservation_status < 3", array(':start' => $start))->fetchField();
    
    if ($total_starts > $max_starts) {
      $error = t('There are already %number Reservations starting at this time.  Adjust the start time to prevent long lines at the checkout.', array('%number' => $total_starts));
      if (user_access('manage reservations')) {
        drupal_set_message($error);
      } else {
        form_set_error('', $error);
      }
    }
    
    //Query for number of reservations ending at the same time this Reservation ends
    
    $total_ends = db_query("SELECT COUNT(nid) FROM {field_data_field_reservations_date} JOIN {reservations_reservation} ON entity_id = reservations_reservation.nid WHERE  field_reservations_date_value2 = :end AND reservations_reservation_status < 3", array(':end' => $end))->fetchField();
    
    
    if ($total_ends > $max_ends) {
      $error = t('There are already %number Reservations ending at this time.  Adjust the end time to prevent long lines at the checkout.', array('%number' => $total_ends));
      if (user_access('manage Reservations')) {
        drupal_set_message($error);
      } else {
        form_set_error('', $error);
      }
    }
    
  }
}


