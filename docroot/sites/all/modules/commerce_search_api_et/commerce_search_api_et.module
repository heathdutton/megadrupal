<?php
/**
 * @file
 * Provides Entity Translation integration for Commerce Search API.
 */

/**
 * Implements hook_ctools_plugin_api().
 */
function commerce_search_api_et_ctools_plugin_api($module, $api) {
  if ($module == "facetapi" && $api == "facetapi_defaults") {
    return array("version" => 1);
  }
}

/**
 * Implements hook_default_search_api_index().
 *
 * Creates Multilingual product display index.
 */
function commerce_search_api_et_default_search_api_index() {
  $items = array();

  $server = search_api_server_load('frontend');
  if (empty($server)) {
    $servers = search_api_server_load_multiple(FALSE);
    if (empty($servers)) {
      return;
    }
    $server = reset($servers);
  }
  $index = commerce_search_api_generate_product_display_index($server, 'product_display');

  $index->name = t('Multilingual product display');
  $index->machine_name = 'multilingual_product_display';
  $index->item_type = 'search_api_et_node';

  $items['multilingual_product_display'] = $index;

  return $items;
}

/**
 * Implements hook_default_search_api_sort().
 *
 * Copy of commerce_kickstart_search_default_search_api_sort() for multilingual
 * product display index.
 *
 * @see commerce_kickstart_search_default_search_api_sort()
 */
function commerce_search_api_et_default_search_api_sort() {
  $items = array();
  $title = 'title';
  // Check if we should sort on the translated title or not.
  if (module_exists('title') && $title_field = title_field_replacement_info('node', 'title')) {
    $title = $title_field['field']['field_name'];
  }
  $items['multilingual_product_display__created'] = entity_import('search_api_sort', '{
    "index_id" : "multilingual_product_display",
    "field" : "created",
    "name" : "Latest",
    "enabled" : "1",
    "weight" : "20",
    "identifier" : "multilingual_product_display__created",
    "default_sort" : "0",
    "default_sort_no_terms" : "0",
    "default_order" : "asc",
    "options" : { "field_name" : "Date created" }
  }');
  $items['multilingual_product_display__field_product_commerce_price_amount_decimal'] = entity_import('search_api_sort', '{
    "index_id" : "multilingual_product_display",
    "field" : "field_product_commerce_price_amount_decimal_asc",
    "name" : "Price",
    "enabled" : "1",
    "weight" : "0",
    "identifier" : "multilingual_product_display__field_product_commerce_price_amount_decimal",
    "default_sort" : "0",
    "default_sort_no_terms" : "0",
    "default_order" : "asc",
    "options" : { "field_name" : "Product » Price » Amount (decimal)" }
  }');
  $items['multilingual_product_display__' . $title] = entity_import('search_api_sort', '{
    "index_id" : "multilingual_product_display",
    "field" : "' . $title . '",
    "name" : "Title",
    "enabled" : "1",
    "weight" : "30",
    "identifier" : "multilingual_product_display__' . $title . '",
    "default_sort" : "0",
    "default_sort_no_terms" : "0",
    "default_order" : "asc",
    "options" : { "field_name" : "Title" }
  }');
  return $items;
}

/**
 * Implements hook_views_default_views_alter().
 *
 * @see commerce_kickstart_search_views_default_views()
 */
function commerce_search_api_et_views_default_views_alter(&$views) {
  // This is based on display_products view provided by Commerce Kickstart
  // Search module, which is not a dependency for this module (on purpose) -
  // which means that this view might not exist.
  if (!empty($views['display_products'])) {
    // Clone Kickstart's default Display Products view and make it multilingual.
    $view = clone($views['display_products']);
    $view->name = 'display_products_multilingual';
    $view->base_table = 'search_api_index_multilingual_product_display';
    $view->human_name = t('Display Multilingual Products');
    // Update filters using search_api_index_product_display table on all
    // existing displays, and add default CSS class to the new view, so it
    // re-uses standard Kickstart styling.
    if (!empty($view->display)) {
      foreach ($view->display as &$display) {
        $display->display_options['css_class'] = 'view-display-products';
        if (!empty($display->display_options['filters'])) {
          foreach ($display->display_options['filters'] as &$filter) {
            if (!empty($filter['table']) && $filter['table'] == 'search_api_index_product_display') {
              $filter['table'] = 'search_api_index_multilingual_product_display';
            }
          }
        }
      }
    }
    $views['display_multilingual_products'] = $view;

    // Disable Kickstart's default Display Products view.
    $views['display_products']->disabled = TRUE;
  }
}

/**
 * Processes variables for block.tpl.php.
 *
 * @see template_preprocess_block()
 */
function commerce_search_api_et_preprocess_block(&$variables) {
  // Change id of exposed filter block created by Display Multilingual Products
  // view to be the same as id of the previous non-multilingual view block,
  // so that all existing styling could still be applied.
  if ($variables['block_html_id'] == 'block-views-3dc7fa29e5bf935c0dbc271fbe9e7bbc') {
    $variables['block_html_id'] = 'block-views-exp-display-products-page';
  }
}
