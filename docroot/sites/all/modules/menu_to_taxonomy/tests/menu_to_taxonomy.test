<?php

/**
 * @file
 * Web tests for Menu to Taxonomy.
 */

/**
 * Test class for Menu to Taxonomy.
 */
class MenuToTaxonomyTest extends DrupalWebTestCase {

  /**
   * Module info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Menu to Taxonomy',
      'description' => 'Test Menu to Taxonomy',
      'group' => 'Menu to Taxonomy',
    );
  }

  /**
   * Set up.
   */
  protected function setUp() {
    parent::setUp(
      'menu_to_taxonomy',
      'termstatus'
    );
    $permissions = array(
      'access administration pages',
      'administer content types',
      'administer blocks',
      'administer menu',
      'administer taxonomy',
      'create page content',
      'edit any page content',
      'delete any page content',
      'create article content',
    );

    // Create user.
    $this->big_user = $this->drupalCreateUser($permissions);

    // Log in user.
    $this->drupalLogin($this->big_user);
    // Create a new menu.
    $title = $this->randomName(16);
    $menu_name = substr(hash('sha256', $this->randomName(16)), 0, MENU_MAX_MENU_NAME_LENGTH_UI);
    $edit = array(
      'menu_name' => $menu_name,
      'description' => '',
      'title' => $title,
    );
    // Drupal prepends the menu name with "menu-".
    $this->menu_name = 'menu-' . $menu_name;
    $this->drupalPost('admin/structure/menu/add', $edit, t('Save'));
    $this->drupalGet('admin/structure/menu');
    $this->assertText($title, 'Menu created');

    // Enable the custom menu block.
    $edit = array();
    $edit['blocks[menu_' . $this->menu_name . '][region]'] = 'sidebar_first';
    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));
    $this->assertResponse(200);
    $this->assertText(t('The block settings have been updated.'), 'Custom menu block was enabled');

    // Visit the main taxonomy administration page.
    $this->drupalGet('admin/structure/taxonomy');

    // Create a new vocabulary.
    $this->clickLink(t('Add vocabulary'));
    $edit = array();
    $machine_name = drupal_strtolower($this->randomName());
    $edit['name'] = $this->randomName();
    $edit['description'] = $this->randomName();
    $edit['machine_name'] = $machine_name;
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertRaw(t('Created new vocabulary %name.', array('%name' => $edit['name'])), 'Vocabulary created successfully.');
    $this->vocabulary = taxonomy_vocabulary_machine_name_load($machine_name);

    // Edit the vocabulary.
    $this->drupalGet('admin/structure/taxonomy');
    $this->assertText($this->vocabulary->name, 'Vocabulary found in the vocabulary overview listing.');
    $this->drupalGet('admin/structure/taxonomy/' . $machine_name . '/edit');
    $edit = array();
    $edit['menu_to_taxonomy[vocab_parent]'] = $this->menu_name . ':0';
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertText(t('The vocabulary has been synchronized with the menu.'), 'Vocabulary synchronized.');

    // Confirm settings.
    $this->drupalGet('admin/structure/taxonomy');
    $this->assertText($this->vocabulary->name, 'Vocabulary found in the vocabulary overview listing.');
    $vocab_parent = _menu_to_taxonomy_build_variable('vocab_parent', $this->vocabulary->vid);
    $this->assertEqual(variable_get($vocab_parent), '0');
    $vocab_menu = _menu_to_taxonomy_build_variable('vocab_menu', $this->vocabulary->vid);
    $this->assertEqual(variable_get($vocab_menu), $this->menu_name);
  }

  /**
   * Test menu functionality.
   */
  public function testMenuFunctionality() {
    $menu_name = $this->menu_name;
    // Add nodes to use as links for menu links.
    $node1 = $this->drupalCreateNode(array('type' => 'article'));
    $node2 = $this->drupalCreateNode(array('type' => 'article'));
    $node3 = $this->drupalCreateNode(array('type' => 'article'));
    $node4 = $this->drupalCreateNode(array('type' => 'article'));
    $node5 = $this->drupalCreateNode(array('type' => 'article'));

    // Add menu links.
    $this->addMenuLink(0, 'user', $menu_name);
    $item1 = $this->addMenuLink(0, 'node/' . $node1->nid, $menu_name);
    $item2 = $this->addMenuLink($item1['mlid'], 'node/' . $node2->nid, $menu_name, FALSE);
    $item3 = $this->addMenuLink($item2['mlid'], 'node/' . $node3->nid, $menu_name);

    // Verify menu links.
    $this->verifyMenuLink($item1, $node1);
    $this->verifyMenuLink($item2, $node2, $item1, $node1);
    $this->verifyMenuLink($item3, $node3, $item2, $node2);

    // Add more menu links.
    $item4 = $this->addMenuLink(0, 'node/' . $node4->nid, $menu_name);
    $item5 = $this->addMenuLink($item4['mlid'], 'node/' . $node5->nid, $menu_name);
    $this->assertMenuLink($item4['mlid'], array(
      'depth' => 1,
      'has_children' => 1,
      'p1' => $item4['mlid'],
      'p2' => 0,
    ));
    $this->assertMenuLink($item5['mlid'], array(
      'depth' => 2,
      'has_children' => 0,
      'p1' => $item4['mlid'],
      'p2' => $item5['mlid'],
      'p3' => 0,
    ));

    // Modify menu links.
    $this->modifyMenuLink($item1);
    $this->modifyMenuLink($item2);

    // Toggle menu links.
    $this->toggleMenuLink($item1);
    $this->toggleMenuLink($item2);

    // Move link and verify that descendants are updated.
    $this->moveMenuLink($item2, $item5['mlid'], $menu_name);
    $this->assertMenuLink($item1['mlid'], array(
      'depth' => 1,
      'has_children' => 0,
      'p1' => $item1['mlid'],
      'p2' => 0,
    ));
    $this->assertMenuLink($item4['mlid'], array(
      'depth' => 1,
      'has_children' => 1,
      'p1' => $item4['mlid'],
      'p2' => 0,
    ));
    $this->assertMenuLink($item5['mlid'], array(
      'depth' => 2,
      'has_children' => 1,
      'p1' => $item4['mlid'],
      'p2' => $item5['mlid'],
      'p3' => 0,
    ));
    $this->assertMenuLink($item2['mlid'], array(
      'depth' => 3,
      'has_children' => 1,
      'p1' => $item4['mlid'],
      'p2' => $item5['mlid'],
      'p3' => $item2['mlid'],
      'p4' => 0,
    ));
    $this->assertMenuLink($item3['mlid'], array(
      'depth' => 4,
      'has_children' => 0,
      'p1' => $item4['mlid'],
      'p2' => $item5['mlid'],
      'p3' => $item2['mlid'],
      'p4' => $item3['mlid'],
      'p5' => 0,
    ));

    // Enable a link via the overview form.
    $this->disableMenuLink($item1);
    $edit = array();

    // Note in the UI the 'mlid:x[hidden]' form element maps to enabled, or
    // NOT hidden.
    $edit['mlid:' . $item1['mlid'] . '[hidden]'] = TRUE;
    $this->drupalPost('admin/structure/menu/manage/' . $item1['menu_name'], $edit, t('Save configuration'));

    // Verify in the database.
    $this->assertMenuLink($item1['mlid'], array('hidden' => 0));
  }

  /**
   * Add a menu link using the menu module UI.
   *
   * @param int $plid
   *   Parent menu link id.
   * @param string $link
   *   Link path.
   * @param string $menu_name
   *   Menu name.
   *
   * @return array
   *   Menu link created.
   */
  protected function addMenuLink($plid = 0, $link = '<front>', $menu_name = 'navigation', $expanded = TRUE) {
    // View add menu link page.
    $this->drupalGet("admin/structure/menu/manage/$menu_name/add");
    $this->assertResponse(200);

    $title = '!link_' . $this->randomName(16);
    $edit = array(
      'link_path' => $link,
      'link_title' => $title,
      'description' => '',
      // Use this to disable the menu and test.
      'enabled' => TRUE,
      'expanded' => $expanded,
      'parent' => $menu_name . ':' . $plid,
      'weight' => '0',
    );

    // Add menu link.
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertResponse(200);
    // Unlike most other modules, there is no confirmation message displayed.
    $this->assertText($title, 'Menu link was added');

    $item = db_query('SELECT * FROM {menu_links} WHERE link_title = :title', array(':title' => $title))->fetchAssoc();
    $this->assertTrue(t('Menu link was found in database.'));
    $this->assertMenuLink($item['mlid'], array(
      'menu_name' => $menu_name,
      'link_path' => $link,
      'has_children' => 0,
      'plid' => $plid,
    ));

    return $item;
  }

  /**
   * Modify a menu link using the menu module UI.
   *
   * @param array $item
   *   Menu link passed by reference.
   */
  protected function modifyMenuLink(array &$item) {
    $item['link_title'] = $this->randomName(16);

    $mlid = $item['mlid'];
    $title = $item['link_title'];

    // Edit menu link.
    $edit = array();
    $edit['link_title'] = $title;
    $this->drupalPost("admin/structure/menu/item/$mlid/edit", $edit, t('Save'));
    $this->assertResponse(200);

    // Verify menu link.
    $this->drupalGet('admin/structure/menu/manage/' . $item['menu_name']);
    $this->assertText($title, 'Menu link was edited');

    $item_after = menu_link_load($mlid);
    $this->assertEqual($item_after['link_title'], $title);

    // Get matching taxonomy term.
    $term = $this->getTermForLink($mlid);
    // Ensure term name has changed.
    $this->assertEqual($term->name, $title);
  }

  /**
   * Test creating, editing, deleting menu links via node form widget.
   */
  public function testMenuNodeFormWidget() {
    // Enable Navigation menu as available menu.
    $edit = array(
      'menu_options[navigation]' => 1,
    );
    $this->drupalPost('admin/structure/types/manage/page', $edit, t('Save content type'));
    // Change default parent item to Navigation menu, so we can assert more
    // easily.
    $edit = array(
      'menu_parent' => 'navigation:0',
    );
    $this->drupalPost('admin/structure/types/manage/page', $edit, t('Save content type'));

    // Create a node.
    $node_title = $this->randomName();
    $language = LANGUAGE_NONE;
    $edit = array(
      "title" => $node_title,
      "body[$language][0][value]" => $this->randomString(),
    );
    $this->drupalPost('node/add/page', $edit, t('Save'));
    $node = $this->drupalGetNodeByTitle($node_title);
    // Assert that there is no link for the node.
    $this->drupalGet('');
    $this->assertNoLink($node_title);

    // Edit the node, enable the menu link setting, but skip the link title.
    $edit = array(
      'menu[enabled]' => 1,
    );
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
    // Assert that there is no link for the node.
    $this->drupalGet('');
    $this->assertNoLink($node_title);

    // Edit the node and create a menu link.
    $edit = array(
      'menu[enabled]' => 1,
      'menu[link_title]' => $node_title,
      'menu[weight]' => 17,
    );
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
    // Assert that the link exists.
    $this->drupalGet('');
    $this->assertLink($node_title);

    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->assertOptionSelected('edit-menu-weight', 17, 'Menu weight correct in edit form');

    // Edit the node and remove the menu link.
    $edit = array(
      'menu[enabled]' => FALSE,
    );
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));

    // Assert that there is no link for the node.
    $this->drupalGet('');
    $this->assertNoLink($node_title);

    // Add a menu link to the Management menu.
    $item = array(
      'link_path' => 'node/' . $node->nid,
      'link_title' => $this->randomName(16),
      'menu_name' => 'management',
    );
    menu_link_save($item);

    // Assert that disabled menu is not shown on the node/$nid/edit page.
    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->assertText('Provide a menu link', 'Link in not allowed menu not shown in node edit form');
    // Assert that the link is still in the management menu after save.
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
    $link = menu_link_load($item['mlid']);
    $this->assertTrue($link, 'Link in not allowed menu still exists after saving node');

    // Move the menu link to the custom menu.
    $item['menu_name'] = $this->menu_name;
    menu_link_save($item);
    // Create a second node.
    $child_node = $this->drupalCreateNode(array('type' => 'article'));
    // Assign a menu link to the second node, being a child of the first one.
    $child_item = array(
      'link_path' => 'node/' . $child_node->nid,
      'link_title' => $this->randomName(16),
      'plid' => $item['mlid'],
    );
    menu_link_save($child_item);

    // Edit the first node.
    $this->drupalGet('node/' . $node->nid . '/edit');

    // Delete the link.
    $term_before = $this->getTermForLink($item['mlid']);
    $term_child_before = $this->getTermForLink($child_item['mlid']);

    $this->assertTrue($term_before);
    $this->assertTrue($term_child_before);

    menu_link_delete($item['mlid']);
    // Make sure term is gone after deletion of the menu item.
    $term_after = $this->getTermForLink($item['mlid']);
    $this->assertFalse($term_after);
    // Make sure child term is gone as well.
    $term_child_after = $this->getTermForLink($child_item['mlid']);
    $this->assertFalse($term_child_after);
  }

  /**
   * Test bulk rebuild functionality.
   */
  public function testBulkRebuild() {
    $menu_name = $this->menu_name;

    // Undo sync.
    $this->drupalGet('admin/structure/taxonomy');
    $this->assertText($this->vocabulary->name, 'Vocabulary found in the vocabulary overview listing.');
    $this->drupalGet('admin/structure/taxonomy/' . $this->vocabulary->machine_name . '/edit');
    $edit = array();
    $edit['menu_to_taxonomy[vocab_parent]'] = '0';

    $this->drupalPost(NULL, $edit, t('Save'));
    $vocab_parent = _menu_to_taxonomy_build_variable('vocab_parent', $this->vocabulary->vid);
    $this->assertEqual(variable_get($vocab_parent), '0');
    $vocab_menu = _menu_to_taxonomy_build_variable('vocab_menu', $this->vocabulary->vid);
    $this->assertEqual(variable_get($vocab_menu), '0');

    // Add nodes to use as links for menu links.
    $node1 = $this->drupalCreateNode(array('type' => 'article'));
    $node2 = $this->drupalCreateNode(array('type' => 'article'));
    $node3 = $this->drupalCreateNode(array('type' => 'article'));

    // Add menu links.
    $item0 = $this->addMenuLink(0, 'user', $menu_name);
    $item1 = $this->addMenuLink(0, 'node/' . $node1->nid, $menu_name);
    $item2 = $this->addMenuLink($item1['mlid'], 'node/' . $node2->nid, $menu_name, FALSE);
    $item3 = $this->addMenuLink($item2['mlid'], 'node/' . $node3->nid, $menu_name);

    // Bulk import.
    $this->drupalGet('admin/structure/taxonomy');
    $this->assertText($this->vocabulary->name, 'Vocabulary found in the vocabulary overview listing.');
    $this->drupalGet('admin/structure/taxonomy/' . $this->vocabulary->machine_name . '/edit');
    $edit = array();
    $edit['menu_to_taxonomy[vocab_parent]'] = $this->menu_name . ':0';
    $edit['menu_to_taxonomy[rebuild]'] = '1';
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertText(t('The vocabulary has been synchronized with the menu'), 'Batch finished.');
    $this->drupalGet('admin/structure/taxonomy');
    $this->assertText($this->vocabulary->name, 'Vocabulary found in the vocabulary overview listing.');

    // Test that menu links have a match.
    $tid0 = _menu_to_taxonomy_get_tid($item0, $this->vocabulary->vid);
    $this->assertTrue($tid0);
    $tid1 = _menu_to_taxonomy_get_tid($item1, $this->vocabulary->vid);
    $this->assertTrue($tid1);
    $tid2 = _menu_to_taxonomy_get_tid($item2, $this->vocabulary->vid);
    $this->assertTrue($tid2);
    $tid3 = _menu_to_taxonomy_get_tid($item3, $this->vocabulary->vid);
    $this->assertTrue($tid3);

    // Verify menu links.
    $this->verifyMenuLink($item1, $node1);
    $this->verifyMenuLink($item2, $node2, $item1, $node1);
    $this->verifyMenuLink($item3, $node3, $item2, $node2);
  }

  /**
   * Verify a menu link using the menu module UI.
   *
   * @param array $item
   *   Menu link.
   * @param object $item_node
   *   Menu link content node.
   * @param array|NULL $parent
   *   Parent menu link.
   * @param object $parent_node
   *   Parent menu link content node.
   */
  protected function verifyMenuLink(array $item, $item_node, $parent = NULL, $parent_node = NULL) {
    // View home page.
    $this->drupalGet('');
    $this->assertResponse(200);

    // Verify parent menu link.
    if (isset($parent)) {
      // Verify menu link.
      $title = $parent['link_title'];
      $this->assertLink($title, 0, 'Parent menu link was displayed');

      // Verify menu link link.
      $this->clickLink($title);
      $title = $parent_node->title;
      $this->assertTitle(t("@title | Drupal", array('@title' => $title)), 'Parent menu link link target was correct');
    }

    // Verify menu link.
    $title = $item['link_title'];
    $this->assertLink($title, 0, 'Menu link was displayed');

    // Verify menu link link.
    $this->clickLink($title);
    $title = $item_node->title;
    $this->assertTitle(t("@title | Drupal", array('@title' => $title)), 'Menu link link target was correct');

    // Get matching taxonomy term.
    $item_tid = _menu_to_taxonomy_get_tid($item['mlid'], $this->vocabulary->vid);
    $item_term = taxonomy_term_load($item_tid);
    $this->assertTrue($item_term);
    if (isset($parent)) {
      // Get term parent.
      $query = db_select('taxonomy_term_hierarchy', 'tth')
        ->fields('tth', array('parent'))
        ->condition('tth.tid', $item_tid);
      $parent_tids = $query->execute()->fetchCol();
      // Handle single/multiple parents appropriately.
      if (count($parent_tids) == 1) {
        $parent_tid = reset($parent_tids);
      }
      $item_term->parent = $parent_tid;

      // Check that parent is matching.
      $parent_term_from_link = $this->getTermForLink($parent['mlid']);

      $this->assertEqual($item_term->parent, $parent_term_from_link->tid);
    }
  }

  /**
   * Alternately disable and enable a menu link.
   *
   * @param array $item
   *   Menu link.
   */
  protected function toggleMenuLink(array $item) {
    $this->disableMenuLink($item);

    // Verify term status is disabled.
    $term = $this->getTermForLink($item['mlid']);
    $this->assertEqual($term->status, 0);

    // Verify menu link is absent.
    $this->drupalGet('');
    $this->assertNoText($item['link_title'], 'Menu link was not displayed');
    $this->enableMenuLink($item);

    // Verify term status is enabled.
    $term_after = $this->getTermForLink($item['mlid']);
    $this->assertEqual($term_after->status, 1);

    // Verify menu link is displayed.
    $this->drupalGet('');
    $this->assertText($item['link_title'], 'Menu link was displayed');
  }

  /**
   * Disable a menu link.
   *
   * @param array $item
   *   Menu link.
   */
  protected function disableMenuLink(array $item) {
    $mlid = $item['mlid'];
    $edit['enabled'] = FALSE;
    $this->drupalPost("admin/structure/menu/item/$mlid/edit", $edit, t('Save'));

    // Verify in the database.
    $this->assertMenuLink($mlid, array('hidden' => 1));
  }

  /**
   * Enable a menu link.
   *
   * @param array $item
   *   Menu link.
   */
  protected function enableMenuLink(array $item) {
    $mlid = $item['mlid'];
    $edit['enabled'] = TRUE;
    $this->drupalPost("admin/structure/menu/item/$mlid/edit", $edit, t('Save'));

    // Verify in the database.
    $this->assertMenuLink($mlid, array('hidden' => 0));
  }

  /**
   * Fetch the menu item from the database and compare it to the specified
   * array.
   *
   * @param $mlid
   *   Menu item id.
   * @param $item
   *   Array containing properties to verify.
   */
  protected function assertMenuLink($mlid, array $expected_item) {
    // Retrieve menu link.
    $item = db_query('SELECT * FROM {menu_links} WHERE mlid = :mlid', array(':mlid' => $mlid))->fetchAssoc();
    $options = unserialize($item['options']);
    if (!empty($options['query'])) {
      $item['link_path'] .= '?' . drupal_http_build_query($options['query']);
    }
    if (!empty($options['fragment'])) {
      $item['link_path'] .= '#' . $options['fragment'];
    }
    foreach ($expected_item as $key => $value) {
      $this->assertEqual($item[$key], $value, format_string('Parameter %key had expected value.', array('%key' => $key)));
    }
  }


  /**
   * Change the parent of a menu link using the menu module UI.
   */
  protected function moveMenuLink($item, $plid, $menu_name) {
    $mlid = $item['mlid'];

    $edit = array(
      'parent' => $menu_name . ':' . $plid,
    );
    $this->drupalPost("admin/structure/menu/item/$mlid/edit", $edit, t('Save'));
    $this->assertResponse(200);
  }

  /**
   * Gets the taxonomy term for a menu link.
   *
   * @param int $mlid
   *   Menu link ID.
   *
   * @return object|FALSE
   *   Taxonomy term object
   */
  protected function getTermForLink($mlid) {
    $tid = _menu_to_taxonomy_get_tid($mlid, $this->vocabulary->vid);
    entity_get_controller('taxonomy_term')->resetCache(array($tid));
    $term = taxonomy_term_load($tid);
    return $term;
  }

}

/**
 * Test class for Menu to Taxonomy Assign.
 */
class MenuToTaxonomyAssignTest extends DrupalWebTestCase {

  /**
   * Module info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Menu to Taxonomy Assign',
      'description' => 'Test Menu to Taxonomy Assign',
      'group' => 'Menu to Taxonomy',
    );
  }


  /**
   * Set up.
   */
  protected function setUp() {
    parent::setUp(
      'menu_to_taxonomy',
      'termstatus',
      'menu_node',
      'menu_to_taxonomy_assign',
      'field_ui',
      // So we can link multiple vocabularies:
      'combined_termref'
    );

    $permissions = array(
      'access administration pages',
      'administer content types',
      'administer nodes',
      'administer blocks',
      'administer menu',
      'administer taxonomy',
      'create page content',
      'access content',
      'edit any page content',
      'delete any page content',
      'create article content',
      'administer site configuration',
    );

    // Create user.
    $this->big_user = $this->drupalCreateUser($permissions);
    $bigger_permissions = array_merge($permissions, array(
      'override auto-assign',
    ));
    $this->bigger_user = $this->drupalCreateUser($bigger_permissions);

    // Log in user.
    $this->drupalLogin($this->big_user);

    // Create a new menu.
    $title = $this->randomName(16);
    $menu_name = substr(hash('sha256', $this->randomName(16)), 0, MENU_MAX_MENU_NAME_LENGTH_UI);
    $edit = array(
      'menu_name' => $menu_name,
      'description' => '',
      'title' => $title,
    );
    // Drupal prepends the menu name with "menu-".
    $this->menu_name = 'menu-' . $menu_name;
    $this->drupalPost('admin/structure/menu/add', $edit, t('Save'));
    $this->drupalGet('admin/structure/menu');
    $this->assertText($title, 'Menu created');

    // Visit the main taxonomy administration page.
    $this->drupalGet('admin/structure/taxonomy');

    // Create a new vocabulary.
    $this->clickLink(t('Add vocabulary'));
    $edit = array();
    $machine_name = drupal_strtolower($this->randomName());
    $edit['name'] = $this->randomName();
    $edit['description'] = $this->randomName();
    $edit['machine_name'] = $machine_name;
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertRaw(t('Created new vocabulary %name.', array('%name' => $edit['name'])), 'Vocabulary created successfully.');
    $this->vocabulary = taxonomy_vocabulary_machine_name_load($machine_name);

    // Edit the vocabulary so it syncs with the custom menu.
    $this->drupalGet('admin/structure/taxonomy');
    $this->assertText($this->vocabulary->name, 'Vocabulary found in the vocabulary overview listing.');
    $this->drupalGet('admin/structure/taxonomy/' . $machine_name . '/edit');
    $edit = array();
    $edit['menu_to_taxonomy[vocab_parent]'] = $this->menu_name . ':0';
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertText(t('The vocabulary has been synchronized with the menu.'), 'Vocabulary synchronized.');
    $this->drupalGet('admin/structure/taxonomy');
    $this->assertText($this->vocabulary->name, 'Vocabulary found in the vocabulary overview listing.');
    $vocab_parent = _menu_to_taxonomy_build_variable('vocab_parent', $this->vocabulary->vid);
    $this->assertEqual(variable_get($vocab_parent), '0');
    $vocab_menu = _menu_to_taxonomy_build_variable('vocab_menu', $this->vocabulary->vid);
    $this->assertEqual(variable_get($vocab_menu), $this->menu_name);

    // Add a term reference field to the page content type.
    $this->field_label = $this->randomName(8);
    $this->field_name_input = strtolower($this->randomName(8));
    $this->field_name = 'field_' . $this->field_name_input;

    // Set up field.
    $edit = array(
      'fields[_add_new_field][field_name]' => $this->field_name_input,
      'fields[_add_new_field][label]' => $this->field_label,
      'fields[_add_new_field][type]' => 'taxonomy_term_reference',
      'fields[_add_new_field][widget_type]' => 'options_select',
    );
    $url = 'admin/structure/types/manage/page/fields';
    $this->drupalPost($url, $edit, t('Save'));

    // Enable auto-assign on this content type.
    $this->drupalGet('admin/structure/types/manage/page/fields/' . $this->field_name);

    // Populate the field settings with new settings.
    $edit = array(
      'instance[menu_to_taxonomy_assign_auto_assign]' => '1',
      'instance[menu_to_taxonomy_assign_auto_assign_default]' => '1',
      'field[cardinality]' => '1',
    );
    $this->drupalPost(NULL, $edit, t('Save settings'));
    $this->assertText(t('In order to allow automatic term assignment, the "number of values" for this field must be set to "Unlimited".'));
    $edit['field[cardinality]'] = '-1';
    $edit['instance[required]'] = '1';
    $this->drupalPost(NULL, $edit, t('Save settings'));
    $this->assertText(t('In order to allow automatic term assignment, the term reference field must not be required.'));
    $edit_valid = array(
      'instance[menu_to_taxonomy_assign_auto_assign]' => '1',
      'instance[menu_to_taxonomy_assign_auto_assign_default]' => '1',
      'field[cardinality]' => '-1',
      'instance[required]' => FALSE,
      'field[settings][allowed_values][0][vocabulary]' => $this->vocabulary->machine_name,
    );
    $this->drupalPost(NULL, $edit_valid, t('Save settings'));
    $this->assertRaw(t('Saved %label configuration.', array('%label' => $this->field_label)));

    // Reset the fields info.
    field_info_cache_clear();

    // Assert field settings.
    $field = field_info_field($this->field_name);
    $this->assertTrue($field['settings']['allowed_values'][0]['vocabulary'] == $this->vocabulary->machine_name, 'Field settings were found.');

    // Assert instance and widget settings.
    $instance = field_info_instance('node', $this->field_name, 'page');
    $this->assertTrue($instance['menu_to_taxonomy_assign_auto_assign'] == 1);
    $this->assertTrue($instance['menu_to_taxonomy_assign_auto_assign_default'] == 1);

    // Enable the Custom menu as available menu.
    $edit = array(
      'menu_options[' . $this->menu_name . ']' => 1,
    );
    $this->drupalPost('admin/structure/types/manage/page', $edit, t('Save content type'));

    // Change default parent item to the custom menu, so we can assert more
    // easily.
    $edit = array(
      'menu_parent' => $this->menu_name . ':0',
    );
    $this->drupalPost('admin/structure/types/manage/page', $edit, t('Save content type'));

  }

  /**
   * Test menu functionality.
   */
  public function testMenuFunctionality() {
    // Run tests as user without "override auto-assign" permissions.
    $this->runMenuTests();
    $this->drupalGet('node/add/page');
    // Test that the checkbox is not there.
    $this->assertNoText(t('Auto-assign term'));

    // Log in as a user with "override auto-assign" permissions.
    $this->drupalLogout();
    $this->drupalLogin($this->bigger_user);
    // Re-run previous tests as this user.
    $this->runMenuTests();

    // Disable "auto-assign by default".
    $edit = array(
      'instance[menu_to_taxonomy_assign_auto_assign_default]' => FALSE,
    );
    $this->drupalPost('admin/structure/types/manage/page/fields/' . $this->field_name, $edit, t('Save settings'));
    $this->assertRaw(t('Saved %label configuration.', array('%label' => $this->field_label)));

    // Confirm that checkbox is not checked by default.
    $field_name_hyphen = str_replace('_', '-', $this->field_name);
    $this->drupalGet('node/add/page');
    $this->assertText(t('Auto-assign term'));
    $this->assertNoFieldChecked('edit-' . $field_name_hyphen . '-menu-to-taxonomy-assign-auto');

    // Enable "auto-assign by default".
    $edit = array(
      'instance[menu_to_taxonomy_assign_auto_assign_default]' => 1,
    );
    $this->drupalPost('admin/structure/types/manage/page/fields/' . $this->field_name, $edit, t('Save settings'));
    $this->assertRaw(t('Saved %label configuration.', array('%label' => $this->field_label)));

    // Test with auto-assign off (manually).
    $this->drupalGet('node/add/page');
    $this->assertText(t('Auto-assign term'));
    // Check that checkbox is checked.
    $this->assertFieldChecked('edit-' . $field_name_hyphen . '-menu-to-taxonomy-assign-auto');

    $node_title = $this->randomName();
    $language = LANGUAGE_NONE;
    $edit = array(
      "title" => $node_title,
      "body[$language][0][value]" => $this->randomString(),
      'menu[enabled]' => 1,
      'menu[link_title]' => $node_title,
      'menu[weight]' => 17,
      $this->field_name . '[und][]' => '_none',
      $this->field_name . '[menu_to_taxonomy_assign_auto]' => FALSE,
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    // Assert that the term reference does not point to this term by checking
    // for any term reference at all.
    $node = $this->drupalGetNodeByTitle($node_title);
    $links = menu_node_get_links($node->nid);
    $link = (array) reset($links);
    $term = $this->getTermForLink($link['mlid']);
    $this->assertNoRaw('<a href="' . base_path() . 'taxonomy/term/' . $term->tid . '" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">' . $link['link_title']  . '</a>');

    // Test with auto-assign on (manually).
    $this->drupalGet('node/add/page');
    $this->assertText(t('Auto-assign term'));
    $node_title = $this->randomName();
    $language = LANGUAGE_NONE;
    $edit = array(
      "title" => $node_title,
      "body[$language][0][value]" => $this->randomString(),
      'menu[enabled]' => 1,
      'menu[link_title]' => $node_title,
      'menu[weight]' => 17,
      $this->field_name . '[und][]' => '_none',
      $this->field_name . '[menu_to_taxonomy_assign_auto]' => 1,
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    // Assert that the term reference points to this term.
    $node = $this->drupalGetNodeByTitle($node_title);
    $links = menu_node_get_links($node->nid);
    $link = (array) reset($links);
    $term = $this->getTermForLink($link['mlid']);
    $this->assertRaw('<a href="' . base_path() . 'taxonomy/term/' . $term->tid . '" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">' . $link['link_title']  . '</a>');

    // Set default "auto-assign" value to "unchecked".
    $edit = array(
      'instance[menu_to_taxonomy_assign_auto_assign_default]' => FALSE,
    );
    $this->drupalPost('admin/structure/types/manage/page/fields/' . $this->field_name, $edit, t('Save settings'));
    $this->assertRaw(t('Saved %label configuration.', array('%label' => $this->field_label)));

    $this->drupalGet('node/' . $node->nid . '/edit');
    // Check that checkbox is still checked (despite the default).
    $this->assertFieldChecked('edit-' . $field_name_hyphen . '-menu-to-taxonomy-assign-auto');
  }

  /**
   * Runs menu-related tests.
   */
  protected function runMenuTests() {
    $menu_name = $this->menu_name;

    // Enable "auto-assign by default".
    $edit = array(
      'instance[menu_to_taxonomy_assign_auto_assign_default]' => 1,
    );
    $this->drupalPost('admin/structure/types/manage/page/fields/' . $this->field_name, $edit, t('Save settings'));
    $this->assertRaw(t('Saved %label configuration.', array('%label' => $this->field_label)));

    // Add nodes to use as links for menu links.
    $node1 = $this->drupalCreateNode(array('type' => 'page'));
    $node2 = $this->drupalCreateNode(array('type' => 'page'));
    $node3 = $this->drupalCreateNode(array('type' => 'page'));

    // Add menu links.
    $this->addMenuLink(0, 'user', $menu_name);
    $item1 = $this->addMenuLink(0, 'node/' . $node1->nid, $menu_name);
    $item2 = $this->addMenuLink($item1['mlid'], 'node/' . $node2->nid, $menu_name, FALSE);
    $item3 = $this->addMenuLink($item2['mlid'], 'node/' . $node3->nid, $menu_name);

    // Make sure the relevant term reference is assigned.
    $this->drupalGet('node/' . $node1->nid);
    $term1 = $this->getTermForLink($item1['mlid']);
    $this->assertRaw('<a href="' . base_path() . 'taxonomy/term/' . $term1->tid . '" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">' . $item1['link_title'] . '</a>');

    // Change the title of the link.
    $edit = array();
    $item1['link_title'] = $this->randomName();
    $edit['menu[link_title]'] = $item1['link_title'];
    $this->drupalPost('node/' . $node1->nid . '/edit', $edit, t('Save'));

    // Test for newly set title.
    $this->drupalGet('node/' . $node1->nid);
    $this->assertRaw('<a href="' . base_path() . 'taxonomy/term/' . $term1->tid . '" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">' . $item1['link_title']  . '</a>');

    // Try multiple links to same node.
    $item1_other = $this->addMenuLink(0, 'node/' . $node1->nid, $menu_name);
    $term1_other = $this->getTermForLink($item1_other['mlid']);

    // Test for new link.
    $this->drupalGet('node/' . $node1->nid);
    $this->assertRaw('<a href="' . base_path() . 'taxonomy/term/' . $term1_other->tid . '" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">' . $item1_other['link_title']  . '</a>');

    // Try another node.
    $this->drupalGet('node/' . $node2->nid);
    $term2 = $this->getTermForLink($item2['mlid']);
    $this->assertRaw('<a href="' . base_path() . 'taxonomy/term/' . $term2->tid . '" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">' . $item2['link_title'] . '</a>');

    // Point an existing menu link (#1) to another node (node #3).
    // Edit menu link.
    $edit = array();
    $edit['link_path'] = 'node/3';
    $this->drupalPost("admin/structure/menu/item/" . $item1['mlid'] . "/edit", $edit, t('Save'));
    $this->assertResponse(200);

    // Make sure node 1 does not have a term reference anymore.
    $this->drupalGet('node/' . $node1->nid);
    $this->assertNoRaw('<a href="' . base_path() . 'taxonomy/term/' . $term1->tid . '" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">' . $item1['link_title']  . '</a>');

    // Make sure node 3 does.
    $this->drupalGet('node/' . $node3->nid);
    $term3 = $this->getTermForLink($item3['mlid']);
    $this->assertRaw('<a href="' . base_path() . 'taxonomy/term/' . $term3->tid . '" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">' . $item3['link_title']  . '</a>');

    // Delete the first menu link.
    $this->deleteMenuLink($item1);

    // Test for the previous link.
    $this->drupalGet('node/' . $node1->nid);
    $this->assertRaw('<a href="' . base_path() . 'taxonomy/term/' . $term1_other->tid . '" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">' . $item1_other['link_title']  . '</a>');

    // Test for the deleted link.
    $this->drupalGet('node/' . $node3->nid);
    $this->assertNoRaw('<a href="' . base_path() . 'taxonomy/term/' . $term1->tid . '" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">' . $item1['link_title']   . '</a>');

    // Test for assignment on initial node submit.
    $this->drupalGet('node/add/page');

    // Add new node.
    $node_title = $this->randomName();
    $language = LANGUAGE_NONE;
    $edit = array(
      "title" => $node_title,
      "body[$language][0][value]" => $this->randomString(),
      'menu[enabled]' => 1,
      'menu[link_title]' => $node_title,
      'menu[weight]' => 17,
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $node = $this->drupalGetNodeByTitle($node_title);
    $links = menu_node_get_links($node->nid);
    $link = (array) reset($links);
    $term = $this->getTermForLink($link['mlid']);

    // Assert that the term reference exists.
    $this->drupalGet('node/' . $node->nid);
    $this->assertRaw('<a href="' . base_path() . 'taxonomy/term/' . $term->tid . '" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">' . $link['link_title']  . '</a>');

    // Disable "auto-assign by default".
    $edit = array(
      'instance[menu_to_taxonomy_assign_auto_assign_default]' => FALSE,
    );
    $this->drupalPost('admin/structure/types/manage/page/fields/' . $this->field_name, $edit, t('Save settings'));
    $this->assertRaw(t('Saved %label configuration.', array('%label' => $this->field_label)));

    $node_title = $this->randomName();
    $language = LANGUAGE_NONE;
    $edit = array(
      "title" => $node_title,
      "body[$language][0][value]" => $this->randomString(),
      'menu[enabled]' => 1,
      'menu[link_title]' => $node_title,
      'menu[weight]' => 17,
    );

    $this->drupalPost('node/add/page', $edit, t('Save'));
    $node = $this->drupalGetNodeByTitle($node_title);
    $links = menu_node_get_links($node->nid);
    $link = (array) reset($links);
    $term = $this->getTermForLink($link['mlid']);

    // Assert that there is a matching term for this menu link.
    $this->assertTrue(isset($term->tid));

    // Assert that the term reference does not point to this term by checking
    // for any term reference at all.
    $this->assertNoRaw('typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">');
  }

  /**
   * Test bulk reassign functionality.
   */
  public function testBulkReassign() {
    $menu_name = $this->menu_name;
    // Add nodes to use as links for menu links.
    $node1 = $this->drupalCreateNode(array('type' => 'page'));
    $node2 = $this->drupalCreateNode(array('type' => 'page'));
    $node3 = $this->drupalCreateNode(array('type' => 'page'));


    // Disable "auto-assign by default".
    $edit = array(
      'instance[menu_to_taxonomy_assign_auto_assign_default]' => FALSE,
    );
    $this->drupalPost('admin/structure/types/manage/page/fields/' . $this->field_name, $edit, t('Save settings'));
    $this->assertRaw(t('Saved %label configuration.', array('%label' => $this->field_label)));

    // Add menu links.
    $this->addMenuLink(0, 'user', $menu_name);
    $item1 = $this->addMenuLink(0, 'node/' . $node1->nid, $menu_name);
    $item2 = $this->addMenuLink($item1['mlid'], 'node/' . $node2->nid, $menu_name, FALSE);
    $this->addMenuLink($item2['mlid'], 'node/' . $node3->nid, $menu_name);

    // Make sure the relevant term reference is not assigned.
    $this->drupalGet('node/' . $node1->nid);
    $term1 = $this->getTermForLink($item1['mlid']);
    $this->assertNoRaw('<a href="' . base_path() . 'taxonomy/term/' . $term1->tid . '" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">' . $item1['link_title'] . '</a>');

    // Enable "auto-assign by default".
    $edit = array(
      'instance[menu_to_taxonomy_assign_auto_assign_default]' => '1',
    );
    $this->drupalPost('admin/structure/types/manage/page/fields/' . $this->field_name, $edit, t('Save settings'));
    $this->assertRaw(t('Saved %label configuration.', array('%label' => $this->field_label)));

    // Run bulk re-assign.
    $this->drupalGet('admin/structure/types/manage/page/fields/' . $this->field_name);
    $this->clickLink(t('Click here to automatically re-assign this field instance on all existing nodes.'));
    $this->drupalPost(NULL, array(), t('Confirm'));

    // Make sure the relevant term references are assigned.
    $this->drupalGet('node/' . $node1->nid);
    $term1 = $this->getTermForLink($item1['mlid']);
    $this->assertRaw('<a href="' . base_path() . 'taxonomy/term/' . $term1->tid . '" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">' . $item1['link_title'] . '</a>');
    $this->drupalGet('node/' . $node2->nid);
    $term2 = $this->getTermForLink($item2['mlid']);
    $this->assertRaw('<a href="' . base_path() . 'taxonomy/term/' . $term2->tid . '" typeof="skos:Concept" property="rdfs:label skos:prefLabel" datatype="">' . $item2['link_title'] . '</a>');
  }

  /**
   * Delete a menu link using the menu module UI.
   *
   * @param array $item
   *   Menu link.
   */
  protected function deleteMenuLink(array $item) {
    $mlid = $item['mlid'];
    $title = $item['link_title'];

    // Delete menu link.
    $this->drupalPost("admin/structure/menu/item/$mlid/delete", array(), t('Confirm'));
    $this->assertResponse(200);
    $this->assertRaw(t('The menu link %title has been deleted.', array('%title' => $title)), 'Menu link was deleted');

    // Verify deletion.
    $this->drupalGet('');
    $this->assertNoText($title, 'Menu link was deleted');
  }

  /**
   * Add a menu link using the menu module UI.
   *
   * @param int $plid
   *   Parent menu link id.
   * @param string $link
   *   Link path.
   * @param string $menu_name
   *   Menu name.
   *
   * @return array
   *   Menu link created.
   */
  protected function addMenuLink($plid = 0, $link = '<front>', $menu_name = 'navigation', $expanded = TRUE) {
    // View add menu link page.
    $this->drupalGet("admin/structure/menu/manage/$menu_name/add");
    $this->assertResponse(200);

    $title = '!link_' . $this->randomName(16);
    $edit = array(
      'link_path' => $link,
      'link_title' => $title,
      'description' => '',
      // Use this to disable the menu and test.
      'enabled' => TRUE,
      'expanded' => $expanded,
      'parent' => $menu_name . ':' . $plid,
      'weight' => '0',
    );

    // Add menu link.
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertResponse(200);

    // Unlike most other modules, there is no confirmation message displayed.
    $this->assertText($title, 'Menu link was added');

    $item = db_query('SELECT * FROM {menu_links} WHERE link_title = :title', array(':title' => $title))->fetchAssoc();
    $this->assertTrue(t('Menu link was found in database.'));
    return $item;
  }

  /**
   * Gets the taxonomy term for a menu link.
   *
   * @param int $mlid
   *   Menu link ID.
   *
   * @return object|FALSE
   *   Taxonomy term object
   */
  protected function getTermForLink($mlid) {
    $tid = _menu_to_taxonomy_get_tid($mlid, $this->vocabulary->vid);
    entity_get_controller('taxonomy_term')->resetCache(array($tid));
    $term = taxonomy_term_load($tid);
    return $term;
  }
}
