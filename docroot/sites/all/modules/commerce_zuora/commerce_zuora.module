<?php

/**
 * @file
 * Module file for Commerce Zuora.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_zuora_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['z_payment_hpm_v2'] = array(
    'base' => 'commerce_zuora_hpm_v2',
    'title' => t('Credit card'),
    'short_title' => t('Z-Payments Hosted Page'),
    'description' => t('Zuora Z-Payments Hosted Payment Pages, v2.0'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );

  return $payment_methods;
}

function comerce_zuora_hpm_v2_default_settings() {
  return array(
    'hosted_page_id' => '',
  );
}

function commerce_zuora_hpm_v2_settings_form(array $settings = array(), $payment_method = NULL) {
  $form = array();

  // Default to the Payflow Link payment method if none is passed in.
  if (empty($payment_method)) {
    $payment_method = commerce_payment_method_load('z_payment_hpm_v2');
  }

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + comerce_zuora_hpm_v2_default_settings();

  $form['hosted_page_id'] = array(
    '#type' => 'select',
    '#title' => t('Select the default hosted payment page.'),
    '#description' => t('This will be the default hosted payment page form displayed on checkout.'),
    '#options' => array('' => t('Select a page')),
    '#default_value' => $settings['hosted_page_id'],
    '#empty_value' => '',
  );

  foreach (zuora_payments_pages_list(2) as $key => $page_data) {
    $form['hosted_page_id']['#options'][$page_data['pageId']] = $page_data['pageName'];
  }


  return $form;
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_zuora_hpm_v2_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // Return an error if the enabling action's settings haven't been configured.
  try {
    $instance = ZuoraRest::instance();
  }
  catch (ZuoraException $e) {
    drupal_set_message(t('@title is not configured for use. Please contact an administrator to resolve this issue.', array('@title' => $payment_method['title'])), 'error');
    return FALSE;
  }

  return TRUE;
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_zuora_hpm_v2_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Update the order to reference the Payflow Link payment method.
  $order->data['payment_method'] = $payment_method['instance_id'];


  $hosted_page_data = array();
  foreach (zuora_payments_pages_list(2) as $page_data) {
    if ($page_data['pageId'] == $payment_method['settings']['hosted_page_id']) {
      $hosted_page_data = $page_data;
      break;
    }
  }

  if (!empty($hosted_page_data)) {
    $signature_information = zuora_payments_get_rsa_signature($hosted_page_data);
    if ($signature_information['success']) {
      $order->data['z_payment_signature'] = $signature_information;
      return TRUE;
    }
  }

  drupal_set_message(t('Communication with Zuora failed. Please try again or contact an administrator to resolve the issue.'), 'error');
  return FALSE;
}

/**
 * Payment method callback: redirect form.
 */
function commerce_zuora_hpm_v2_redirect_form($form, &$form_state, $order, $payment_method) {
  if (empty($order->data['z_payment_signature'])) {
    // Clear the payment related information from the data array.
    unset($order->data['payment_method']);

    // Show an error message and go back a page.
    drupal_set_message(t('There was a payment error. Please try again or contact an administrator to resolve the issue.'), 'error');
    commerce_payment_redirect_pane_previous_page($order, t('Redirect to @description failed.', array('@description' => $payment_method['description'])));
  }

  // Store the Payflow payment method instance in the form array.
  $form['z_payment_hpm_v2_payment_method'] = array(
    '#type' => 'value',
    '#value' => $payment_method,
  );

  zuora_payments_js_library();
  $z_payment_signature = $order->data['z_payment_signature'];
  // Add the iframe in a markup element.
  $form['iframe'] = array(
    '#markup' => '<div id="zuora_payment" ></div>',
    '#attached' => array(
      'js' => array(
        array(
          'data' => drupal_get_path('module', 'commerce_zuora') . '/commerce_zuora.js',
          'type' => 'file',
        ),
        array(
          'data' => array(
            'zPayments' => array(
              'params' => array(
                'tenantId' => $z_payment_signature['tenantId'],
                'id' => $payment_method['settings']['hosted_page_id'],
                'token' => $z_payment_signature['token'],
                'signature' => $z_payment_signature['signature'],
                'key' => $z_payment_signature['key'],
                'style' => 'inline',
                'submitEnabled' => TRUE,
                'url' => zuora_payments_hppm_page_uri(),
              ),
              'fields' => commerce_zuora_hpm_prepopulated_fields($order),
              'commerce' => array(
                'nextPage' => '/checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'],
                'prevPage' => '/checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'],
              ),
            ),
          ),
          'type' => 'setting',
        ),
      ),
    ),
  );

  $form['iframe']['#suffix'] = '<div class="commerce-zuora-cancel">' . l(t('Cancel payment and go back'), 'checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key']) . '</div>';

  return $form;

}

/**
 * Payment method callback: redirect form back callback.
 */
function commerce_zuora_hpm_v2_redirect_form_back($order, $payment_method) {
  // Display a message indicating the customer canceled payment.
  drupal_set_message(t('You have canceled payment but may resume the checkout process here when you are ready.'));

  // Remove the payment information from the order data array.
  unset($order->data['z_payment_signature']);
  unset($order->data['payment_method']);
}

/**
 * Payment method callback: redirect form return validation.
 */
function commerce_zuora_hpm_v2_redirect_form_validate($order, $payment_method) {
  if (!isset($_GET['refid'])) {
    watchdog('commerce_zuora', 'Customer returned without a ref ID.', array(), WATCHDOG_WARNING);
    return FALSE;
  }


}

/**
 * Payment method callback: redirect form return submission.
 */
function commerce_zuora_hpm_v2_redirect_form_submit($order, $payment_method) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_total = $order_wrapper->commerce_order_total->value();

  $z_payment_method_id = filter_xss($_GET['refid']);

  // Prepare a transaction object to log the API response.
  $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = 0;
  $transaction->currency_code = commerce_default_currency();
  $transaction->payload[REQUEST_TIME] = $_POST;
  $transaction->remote_id = $z_payment_method_id;
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);

  unset($order->data['z_payment_signature']);
  // Store the Z-Payment method ID in the order, too.
  $order->data['z_payment_method_id'] = $z_payment_method_id;
}


/**
 * Returns populated custom fields for Z-Payments iframe
 *
 * @note this is biased towards Credit Card Type Fields.
 *
 * @param $order
 *
 * @return array
 */
function commerce_zuora_hpm_prepopulated_fields($order) {
  /** @var EntityDrupalWrapper $wrapper */
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  /** @var EntityStructureWrapper $billing */
  $billing_address = $wrapper->commerce_customer_billing->commerce_customer_address;

  $email = $order->mail;
  if (!empty($order->uid)) {
    $email = $wrapper->owner->mail->value();
  }

  // Zuora uses 3 character ISO, Drupal uses 2.
  $country_code = $billing_address->country->value();
  $zuora_country_code = zuora_payments_country_code($country_code);

  // Zuora doesn't use state codes, but fulltext.
  module_load_include('inc', 'addressfield', 'addressfield.administrative_areas');
  $administrative_areas = addressfield_get_administrative_areas($country_code);
  if (isset($administrative_areas[$billing_address->administrative_area->value()])) {
    $zuora_state_value = $administrative_areas[$billing_address->administrative_area->value()];
  }
  else {
    $zuora_state_value = '';
  }

  $fields = array(
    'creditCardHolderName' => $billing_address->name_line->value(),
    'creditCardCountry' => $zuora_country_code,
    'creditCardState' => $zuora_state_value,
    'creditCardAddress1' => $billing_address->thoroughfare->value(),
    'creditCardAddress2' => $billing_address->premise->value(),
    'creditCardCity' => $billing_address->locality->value(),
    'creditCardPostalCode' => $billing_address->postal_code->value(),
    'email' => $email,
  );

  drupal_alter('commerce_zuora_hpm_prepopulated_fields', $fields, $order);

  return $fields;
}

/**
 * Implements hook_commerce_checkout_router().
 */
function commerce_zuora_commerce_checkout_router($order, $checkout_page) {
  // Check for URL parameters sent as Zuora error codes before removed by router.
  if (isset($_GET['zuoraEc'])) {
    $_SESSION['zuoraEc'] = $_GET['zuoraEc'];
    $_SESSION['zuoraEm'] = $_GET['zuoraEm'];
  }
}

/**
 * Implements hook_form_alter().
 */
function commerce_zuora_form_alter(&$form, &$form_state, $form_id) {
  // Alter the Payment checkout page form for Zuora HPM
  if ($form_id == 'commerce_checkout_form_payment' && !empty($form['z_payment_hpm_v2_payment_method'])) {
    unset($form['help']);
  }

  if ($form_id == 'commerce_checkout_form_review') {
    // If we were redirected back to Review with Zuora error code, display
    // a message with code and error.
    if (isset($_SESSION['zuoraEc'])) {
      drupal_set_message(t('@errorCode: @errorMessage', array(
        '@errorCode' => filter_xss($_SESSION['zuoraEc']),
        '@errorMessage' => filter_xss($_SESSION['zuoraEm']),
        )));
      unset($_SESSION['zuoraEc']);
      unset($_SESSION['zuoraEm']);
    }
  }
}
