<?php

/**
 * @file
 * Original Author: Matt Vance mvance at pobox dot com
 * Update for D7: wesnick.
 * The jqzoom module is a simple wrapper for the jquery plugin
 * jQZoom http://www.mind-projects.it/blog/jqzoom_v10
 *
 */

/**
 * Implements hook_library().
 */
function jqzoom_library() {

  $libraries['jqzoom'] = array(
    'title' => 'JQ Zoom',
    'website' => 'http://www.mind-projects.it',
    'version' => '2.3',
    'js' => array(
      libraries_get_path('jqzoom') . '/js/jquery.jqzoom-core-pack.js' => array(),
    ),
    'css' => array(
      libraries_get_path('jqzoom') . '/css/jquery.jqzoom.css' => array(),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_image_default_styles().
 */
function jqzoom_image_default_styles() {
  $styles = array();

  $styles['jqzoom_small'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => '450',
          'height' => '400',
          'upscale' => 0,
        ),
        'weight' => '1',
      ),
    ),
  );
  $styles['jqzoom_large'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array(
          'width' => '800',
          'height' => '800',
          'upscale' => 1,
        ),
        'weight' => '1',
      ),
    ),
    $styles['jqzoom_thumb'] = array(
      'effects' => array(
        array(
          'name' => 'image_scale',
          'data' => array(
            'width' => '50',
            'height' => '50',
            'upscale' => 1,
          ),
          'weight' => '1',
        ),
      ),
    ),
  );

  return $styles;
}

/**
 * Implements hook_field_formatter_info().
 */
function jqzoom_field_formatter_info() {
  return array(
    'jqzoom_default' => array(
      'label' => t('jQZoom'),
      'field types' => array('image'),
      'settings' => array(
        'small_style'     =>      'jqzoom_small',
        'large_style'     =>      'jqzoom_large',
        'thumb_style'     =>      'jqzoom_thumb',
        'title'           =>      FALSE,
        'preloadImages'   =>      TRUE,
        'imageOpacity'    =>      0.4,
        'showEffect'      =>      'show',
        'hideEffect'      =>      'hide',
        'fadeinSpeed'     =>      'slow',
        'fadeoutSpeed'    =>      '2000',
        'zoomType'        =>      'standard',
        'lens'            =>      TRUE,
        'alwaysOn'        =>      FALSE,
        'zoomWidth'       =>      300,
        'zoomHeight'      =>      250,
        'xOffset'         =>      90,
        'yOffset'         =>      30,
        'position'        =>      'left',
      ),
      'description' => t('Display multi-value fields as an jQuery Image gallery.'),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function jqzoom_field_formatter_settings_form($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $form = array();
  $options = array(t('None'));
  // Get a list of all style names for our form options.
  foreach (image_styles() as $id => $style) {
    $options[$id] = $id;
  }

  $form['zoomType'] = array(
    '#type' => 'select',
    '#title' => t('Zoom Type'),
    '#options' => array(
      'standard' => t('Standard'),
      'reverse' => t('Reverse'),
      'drag' => t('Drag'),
      'innerzoom' => t('Inner Zoom'),
    ),
    '#description' => t('Select the type of zoom you want to display.'),
    '#default_value' => $settings['zoomType'],
  );
  $form['small_style'] = array(
    '#type' => 'select',
    '#title' => t('Select the full image size style'),
    '#options' => $options,
    '#default_value' => $settings['small_style'],
    '#description' => t('Select the image style you would like to show for the small image.'),
  );
  $form['large_style'] = array(
    '#type' => 'select',
    '#title' => t('Select the zoom style'),
    '#options' => $options,
    '#default_value' => $settings['large_style'],
    '#description' => t('Select the image style you would like to show for the zoomed image.'),
  );
  $form['thumb_style'] = array(
    '#type' => 'select',
    '#title' => t('Select the thumbnail style'),
    '#options' => $options,
    '#default_value' => $settings['thumb_style'],
    '#description' => t('Select the image style you would like to show for the thumbnail image.'),
  );
  $form['title'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Title'),
    '#description' => t('If <em>TRUE</em>, the image title will display over the zoomed box.'),
    '#default_value' => $settings['title'],
  );
  $form['preloadImages'] = array(
    '#type' => 'checkbox',
    '#title' => t('preloadImages'),
    '#description' => t(''),
    '#default_value' => $settings['preloadImages'],
  );
  $form['lens'] = array(
    '#type' => 'checkbox',
    '#title' => t('lens'),
    '#description' => t('If set to false,the small lens,over the image, won\'t show'),
    '#default_value' => $settings['lens'],
  );
  $form['alwaysOn'] = array(
    '#type' => 'checkbox',
    '#title' => t('alwaysOn'),
    '#description' => t('alwaysOn.'),
    '#default_value' => $settings['alwaysOn'],
  );
  $form['showEffect'] = array(
    '#type' => 'radios',
    '#title' => t('showEffect'),
    '#options' => array('show' => t('Show'), 'fadein' => t('Fade In')),
    '#description' => t('showEffect.'),
    '#default_value' => $settings['showEffect'],
  );
  $form['hideEffect'] = array(
    '#type' => 'radios',
    '#title' => t('hideEffect'),
    '#options' => array('hide' => t('Hide'), 'fadeout' => t('Fade Out')),
    '#description' => t('hideEffect.'),
    '#default_value' => $settings['hideEffect'],
  );
  $form['showEffect'] = array(
    '#type' => 'radios',
    '#title' => t('showEffect'),
    '#options' => array('show' => t('Show'), 'fadein' => t('Fade In')),
    '#description' => t('showEffect.'),
    '#default_value' => $settings['showEffect'],
  );
  $form['imageOpacity'] = array(
    '#type' => 'select',
    '#title' => t('imageOpacity'),
    '#options' => drupal_map_assoc(range(0, 1, 0.05)),
    '#default_value' => $settings['imageOpacity'],
    '#description' => t('imageOpacity.'),
  );
  $form['position'] = array(
    '#type' => 'radios',
    '#title' => t('position'),
    '#options' => array('right' => t('Right'), 'left' => t('Left'), 'top' => t('Top'), 'bottom' => t('Bottom')),
    '#description' => t('position.'),
    '#default_value' => $settings['position'],
  );
  $form['fadeinSpeed'] = array(
    '#type' => 'textfield',
    '#title' => t('Fade In Speed'),
    '#description' => t('Possible options are "slow", "fast", or a number of milliseconds.'),
    '#default_value' => $settings['fadeinSpeed'],
  );
  $form['fadeoutSpeed'] = array(
    '#type' => 'textfield',
    '#title' => t('Fade Out Speed'),
    '#description' => t('Possible options are "slow", "fast", or a number of milliseconds.'),
    '#default_value' => $settings['fadeoutSpeed'],
  );
  $form['zoomWidth'] = array(
    '#type' => 'textfield',
    '#title' => t('Zoom Width'),
    '#description' => t('Width of the magnified area.'),
    '#default_value' => $settings['zoomWidth'],
  );
  $form['zoomHeight'] = array(
    '#type' => 'textfield',
    '#title' => t('Zoom Height'),
    '#description' => t('Height of the magnified area.'),
    '#default_value' => $settings['zoomHeight'],
  );
  $form['xOffset'] = array(
    '#type' => 'textfield',
    '#title' => t('xOffset'),
    '#description' => t('Amount to the side the magnified area will appear.'),
    '#default_value' => $settings['xOffset'],
  );
  $form['yOffset'] = array(
    '#type' => 'textfield',
    '#title' => t('Offset'),
    '#description' => t('Vertical offset by which the magnified area will appear.'),
    '#default_value' => $settings['yOffset'],
  );

  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function jqzoom_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary[] = t('Display Title: @value', array('@value' => ($settings['title']) ? "On" : "Off"));
  $summary[] = t('Small Image style: @value', array('@value' => $settings['small_style']));
  $summary[] = t('Large Image Style style: @value', array('@value' => $settings['large_style']));
  $summary[] = t('Zoom Width: @value', array('@value' => $settings['zoomWidth']));
  $summary[] = t('Zoom Height: @value', array('@value' => $settings['zoomHeight']));
  $summary[] = t('xOffset: @value', array('@value' => $settings['xOffset']));
  $summary[] = t('yOffset: @value', array('@value' => $settings['yOffset']));

  return implode('<br />', $summary);
}

/**
 * Implements hook_theme().
 */
function jqzoom_theme() {
  return array(
    'jqzoom' => array(
      'render element' => 'element',
      'template' => 'jqzoom',
    ),
    'jqzoom_single' => array(
      'render element' => 'element',
    ),
    'jqzoom_multiple' => array(
      'render element' => 'element',
    ),
  );
}
/**
 * Basic jQZoom Theme Function.
 *
 */
function template_preprocess_jqzoom(&$variables) {

  $variables['title'] = $variables['element']['#title'];
  $variables['rendered'] = drupal_render($variables['element']['#element']['items']);
}

/**
 * JQZoom Single Image Theme Function
 */
function theme_jqzoom_single($element) {

  $item = $element['element']['items'][0];
  $js_options = $element['element']['settings'];

  $build = array(
    '#type' => 'container',
    '#attributes' => array('id' => 'jqzoom-container', 'class' => array('clearfix')),
    '#attached' => array(
      'library' => array(
        array('jqzoom', 'jqzoom'),
      ),
      'js' => array(
        array('data' => array('jqzoom' => $js_options), 'type' => 'setting'),
        drupal_get_path('module', 'jqzoom') . '/jqzoom.js',
      ),
      'css' => array(
        drupal_get_path('module', 'jqzoom') . '/jqzoom.css',
      ),
    ),
  );

  $main_image = array(
    '#theme' => 'image',
    '#alt' => $item['alt'],
    '#title' => $item['title'],
    '#path' => image_style_url($js_options['small_style'], $item['uri']),
  );

  $build['image'] = array(
    '#theme' => 'link',
    '#text' => drupal_render($main_image),
    '#path' => image_style_url($js_options['large_style'], $item['uri']),
    '#options' => array(
      'html' => TRUE,
      'attributes' => array(
        'id' => 'jqzoom-' . $item['fid'],
        'class' => array('jqzoom-image-link'),
        'title' => $item['title'],
      ),
    ),
  );

  return $build;
}

/**
 * Helper function to build options array for javascript settings.
 */

/**
 * Helper function to build an options settings array for jQZoom
 *
 * @param array $settings
 *   Field instance settings array.
 * @return multitype:string number boolean
 */
function jqzoom_build_options($settings = array()) {
  $defaults = array(
    // Also 'reverse','drag','innerzoom'.
    'zoomType'          =>  'standard',
    // The popup window width showing the zoomed area.
    'zoomWidth'         =>  300,
    // The popup window height showing the zoomed area.
    'zoomHeight'        =>  300,
    // The popup window x offset from the small image.
    // (always positive to move the popup window more on the right if
    // position is "right" or more on the left if position is "left") .
    'xOffset'           =>  10,
    // The popup window y offset from the small image.
    // (always positive to move the popup window more on the top if position
    // is "top" or more on the bottom if position is "bottom").
    'yOffset'           =>  0,
    // The popup window position. 'right' ,'left' ,'top' ,'bottom'.
    'position'          =>  "right",
    // True if set to true,jqzoom will preload large images.
    'preloadImages'     => TRUE,
    // The text to show while preloading images.
    'preloadText'       => "Loading zoom",
    // Show a small title over the zoomed window it can be the anchor title
    // and if not specified,it will get the small image title.lenstrueif set to
    // false, the small lens,over the image, won't show.
    'title'             =>  TRUE,
    // Set the image opacity when the 'zoomType' option is set to 'reverse'.
    'imageOpacity'      => 0.4,
    // The effect by which showing the popup window.
    // Options available: 'show' ,'fadein'.
    'showEffect'        => 'show',
    // The effect by which hiding the popup window.
    // Options available: 'hide' ,'fadeout'.
    'hideEffect'        => 'hide',
    // Changes fade in speed,in case the show
    // effect option is set to 'fadein'. (options: 'fast','slow',number).
    'fadeinSpeed'       => 'slow',
    // Changes fade out speed,in case the hide
    // Effect option is set to 'fadeout'.(options: 'fast','slow',number).
    'fadeoutSpeed'      => 'slow',
  );

  return $settings + $defaults;
}

/**
 * Theme function for multiple images.
 */
function theme_jqzoom_multiple($element) {

  $items = $element['element']['items'];
  $settings = $element['element']['settings'];
  $js_options = jqzoom_build_options($settings);

  $build = array(
    '#type' => 'container',
    '#attributes' => array('id' => 'jqzoom-container', 'class' => array('clearfix')),
    '#attached' => array(
      'library' => array(
        array('jqzoom', 'jqzoom'),
      ),
      'js' => array(
        array('data' => array('jqzoom' => $js_options), 'type' => 'setting'),
        drupal_get_path('module', 'jqzoom') . '/jqzoom.js',
      ),
      'css' => array(
        drupal_get_path('module', 'jqzoom') . '/jqzoom.css',
      ),
    ),
  );

  $first_image = $items[0];
  $large_image = array(
    '#theme' => 'image',
    '#alt' => $first_image['alt'],
    '#title' => $first_image['title'],
    '#path' => image_style_url($js_options['small_style'], $first_image['uri']),
  );

  $build['image'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('jqzoom-image')),
  );

  $build['image']['image'] = array(
    '#theme' => 'link',
    '#text' => drupal_render($large_image),
    '#path' => image_style_url($js_options['large_style'], $first_image['uri']),
    '#options' => array(
      'html' => TRUE,
      'attributes' => array(
        'id' => 'jqzoom-' . $first_image['fid'],
        'class' => array('jqzoom-image-link'),
        'title' => 'Title',
        'rel' => 'gallery'
      ),
    ),
  );

  $build['icons'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('jqzoom-thumbnails')),
  );

  foreach ($items as $item) {

    $_gallery = 'gallery';
    $_small_image = image_style_url($js_options['small_style'], $item['uri']);
    $_large_image = image_style_url($js_options['large_style'], $item['uri']);
    $_thumb_image = image_style_url($js_options['thumb_style'], $item['uri']);

    $thumbnail = array(
      '#theme' => 'image',
      '#alt' => $item['alt'],
      '#title' => $item['title'],
      '#path' => $_thumb_image,
    );

    $rel = "{gallery: '" . $_gallery . "', smallimage: '" . $_small_image . "',largeimage: '" . $_large_image . "'}";

    $build['icons'][$item['fid']] = array(
      '#markup' => '<a href="javascript:void(0);" rel="' . $rel . '" >' . drupal_render($thumbnail) . '</a>',
    );
  }
  return $build;
}


/**
 * Implements hook_field_formatter_view().
 */
function jqzoom_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  // If there are no images, don't do anything else.
  if (empty($items)) {
    return;
  }

  $element = array();

  $settings = $display['settings'];

  if (count($items) == 1) {
    $renderitems = theme('jqzoom_single', array('element' => array('items' => $items, 'settings' => $settings)));
  }
  elseif (count($items) > 1) {
    $renderitems = theme('jqzoom_multiple', array('element' => array('items' => $items, 'settings' => $settings)));
  }

  // Prepare the variables for our theme function.
  $element = array(
    '#theme' => 'jqzoom',
    '#element' => array(
      'items' => $renderitems,
      'settings' => $settings,
    ),
  );
  return $element;
}
