<?php

/**
 * @file
 * Module file for deletemonitor
 */

/**
 * Implements Hook Form Alter
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function deletemonitor_form_alter(&$form, &$form_state, $form_id) {
  // Forms to watch.
  $monitored = variable_get('deletemonitor_types', array());
  if (!empty($monitored)) {
    switch($form_id) {
      case 'node_type_delete_confirm':
        if (in_array('node', $monitored, true)) {
          $form_state['deletemonitor']['type'] = 'node';
          array_unshift($form['#submit'], 'deletemonitor_submit');
        }
        break;
      case 'ctools_export_ui_delete_confirm_form':
        if (in_array('views', $monitored, true)) {
          $form_state['deletemonitor']['type'] = 'views';
          array_unshift($form['#submit'], 'deletemonitor_submit');
        }
        break;
      case 'image_style_delete_form':
        if (in_array('imagestyles', $monitored, true)) {
          $form_state['deletemonitor']['type'] = 'imagestyles';
          array_unshift($form['#submit'], 'deletemonitor_submit');
        }
        break;
    }
  }


}

/**
 * Submit handler to monitor deletion
 * @param $form
 * @param $form_state
 */
function deletemonitor_submit($form, &$form_state) {
  // The user doing the deleting.
  global $user;
  $uid = $user->uid;

  $mapped_fields = deletemonitor_mapping($form_state['deletemonitor']['type'], $form_state);

  // Record deletion information.
  $data = array(
    'uid' => $uid,
    'name' => $mapped_fields['name'],
    'description' => $mapped_fields['description'],
    'type' => $form_state['deletemonitor']['type'],
    'time' => time(),
  );
  drupal_write_record('deletemonitor', $data);
}

/**
 * Map name and description fields
 * @param $type
 * @param $form_state
 * @return array
 */
function deletemonitor_mapping($type, $form_state) {
  // Name and description, which depends on the form.
  switch($type) {
    case 'node':
      $name = $form_state['values']['name'];
      $types = node_type_get_types();
      $type = $form_state['values']['type'];
      $description = $types[$type]->description;
      break;
    case 'views':
      $name = $form_state['item']->name;
      $description = $form_state['item']->description;
      break;
    case 'imagestyles':
      $name = $form_state['image_style']['name'];
      $description = ''; // No description for image presets
      break;
  }

  return array('name' => $name, 'description' => $description);
}

/**
 * Implements hook menu
 * @return array
 */
function deletemonitor_menu() {
  $items = array();

  $items['admin/reports/deletemonitor'] = array(
    'title' => t('Delete monitor'),
    'description' => t('View the Delete Monitor report'),
    'page callback' => 'deletemonitor_page',
    'access arguments' => array('access delete monitor report'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/deletemonitor'] = array(
    'title' => 'Delete monitor settings',
    'description' => t('Set what you want to monitor'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('deletemonitor_settings'),
    'access arguments' => array('administer delete monitor'),
    'file' => 'deletemonitor.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;

}

/**
 * Implements hook permission
 */
function deletemonitor_permission() {
  return array(
    'access delete monitor report' => array(
      'title' => t('Access delete monitor report'),
    ),
    'administer delete monitor' => array(
      'title' => t('Administer delete monitor'),
    ),
  );
}

/**
 * Get Delete Monitor records
 * @return array
 */
function deletemonitor_get_records() {
  $query = db_select('deletemonitor', 'dm')
    ->fields('dm', array('uid', 'name', 'description', 'time', 'type'))
    ->orderBy('time', 'DESC')
    ->extend('PagerDefault')->limit(50);

  $result = $query->execute();

  $data = array();
  foreach($result as $record) {
    $data[] = $record;
  }

  return $data;
}

/**
 * Reporting page
 * @return mixed
 */
function deletemonitor_page() {
  $records = deletemonitor_get_records();

  if (count($records) > 0) {
    $output = theme('deletemonitor_record', $records);
  }
  else {
    $output = t('Not deletions have been recorded yet');
  }
  return $output;
}

/**
 * Theme function for reporting page
 * @param $records
 * @return mixed|string
 */
function theme_deletemonitor_record($records) {
  $header = array(
    t('User'),
    t('Type'),
    t('Name'),
    t('Description'),
    t('Time'),
  );

  $rows = array();
  foreach ($records as $record) {
    $user = user_load($record->uid);
    $rows[] = array(
      l($user->name, 'user/' . $record->uid),
      t($record->type),
      t($record->name),
      t($record->description),
      format_date($record->time, 'small'),
    );
  }

  $output = theme('table', array('header' => $header, 'rows' => $rows));
  $output.= theme('pager');

  return $output;
}

/**
 * Implements hook_theme()
 */
function deletemonitor_theme() {
  return array(
    'deletemonitor_record' => array(
      'arguments' => array('deletemonitor_record' => NULL),
    )
  );
}
