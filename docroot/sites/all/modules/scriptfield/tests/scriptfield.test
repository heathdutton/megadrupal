<?php

/**
 * @file
 * Tests for scriptfield.module.
 */

/**
 * Tests for scriptfield field types.
 */
class ScriptFieldFieldTestCase extends DrupalWebTestCase {
  protected $field;
  protected $instance;
  protected $web_user;

  public static function getInfo() {
    return array(
      'name'  => 'Script field',
      'description'  => 'Test the creation of script fields.',
      'group' => 'Field types'
    );
  }

  function setUp() {
    parent::setUp('field_test', 'scriptfield', 'field_ui');
    $this->web_user = $this->drupalCreateUser(array(
      'access field_test content',
      'administer field_test content',
      'administer content types',
      'bypass node access'));
    $this->drupalLogin($this->web_user);
  }

  /**
   * Test scriptfield field.
   */
  function testScriptFieldField() {
    // Create a field with settings to validate.
    $this->field = array(
      'field_name' => drupal_strtolower($this->randomName()),
      'type' => 'scriptfield',
      'settings' => array(
        'allowed_extensions' => array(
          'js' => 'js',
          'css' => 'css',
        ),
        'base_url' => 'http://example.com/',
      )
    );
    field_create_field($this->field);
    $this->instance = array(
      'field_name' => $this->field['field_name'],
      'entity_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'widget' => array(
        'type' => 'scriptfield_text',
      ),
      'display' => array(
        'default' => array(
          'type' => 'scriptfield_script',
        ),
      ),
    );
    field_create_instance($this->instance);

    // Display creation form.
    $this->drupalGet('test-entity/add/test-bundle');
    $langcode = LANGUAGE_NONE;
    $this->assertFieldByName("{$this->field['field_name']}[$langcode][0][value]", '', 'Widget is displayed');

    // Submit a value.
    $value = 'example.js';
    $edit = array(
      "{$this->field['field_name']}[$langcode][0][value]" => $value,
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    preg_match('|test-entity/manage/(\d+)/edit|', $this->url, $match);
    $id = $match[1];
    $this->assertRaw(t('test_entity @id has been created.', array('@id' => $id)), 'Entity was created');
    $this->assertRaw('example.js', 'Field Script was saved.');

    // Try to create entries with non allowed extensions; assert fail.
    $wrong_entries = array(
      'example.gif',
      'example.png',
      'example.jpg',
      'another.example.jpg',
      'another.js.jpg',
    );

    foreach ($wrong_entries as $wrong_entry) {
      $this->drupalGet('test-entity/add/test-bundle');
      $edit = array(
        "{$this->field['field_name']}[$langcode][0][value]" => $wrong_entry,
      );
      $this->drupalPost(NULL, $edit, t('Save'));
      $this->assertText(
        t('The specified extension is not valid, please use one of: @exts',
          array('@exts' => implode(',', $this->field['settings']['allowed_extensions']))),
        'Correctly failed to save files with non allowed extensions.'
      );
    }

    $wrong_entries = array(
      '../unsafe.js',
      'safe/../unsafe.js',
    );

    foreach ($wrong_entries as $wrong_entry) {
      $this->drupalGet('test-entity/add/test-bundle');
      $edit = array(
        "{$this->field['field_name']}[$langcode][0][value]" => $wrong_entry,
      );
      $this->drupalPost(NULL, $edit, t('Save'));
      $this->assertText(t('You can not include .. in the URL.'));
    }

    $non_allowed_chars = array(
      'good.js"><script href="bad.js',
      '"bad".js',
    );

    foreach ($non_allowed_chars as $wrong_entry) {
      $this->drupalGet('test-entity/add/test-bundle');
      $edit = array(
        "{$this->field['field_name']}[$langcode][0][value]" => $wrong_entry,
      );
      $this->drupalPost(NULL, $edit, t('Save'));
      $this->assertText(t('The specified file name is not valid, please use only alphanumeric characters, "/", "-", "_" or "."'));
    }
  }

  /**
   * Test ScriptField creation form.
   */
  function testScriptFieldCreationForm() {
    // Display the "Add content type" form.
    $this->drupalGet('admin/structure/types/add');

    // Add a content type.
    $name = $this->randomName();
    $type = drupal_strtolower($name);
    $edit = array('name' => $name, 'type' => $type);
    $this->drupalPost(NULL, $edit, t('Save and add fields'));

    // Add an integer field to the newly-created type.
    $label = $this->randomName();
    $field_name = drupal_strtolower($label);
    $edit = array(
      'fields[_add_new_field][label]'=> $label,
      'fields[_add_new_field][field_name]' => $field_name,
      'fields[_add_new_field][type]' => 'scriptfield',
      'fields[_add_new_field][widget_type]' => 'scriptfield_text',
    );
    $this->drupalPost(NULL, $edit, t('Save'));

    $this->drupalGet('admin/structure/types/manage/' . $type . '/fields/field_' . $field_name);
    $edit = array(
      'instance[settings][base_url]' => 'http://example.com/',
    );
    $this->drupalPost(NULL, $edit, t('Save settings'));


    // Set the formatter to "scriptfield" and to "scriptfield_script", and just
    // check that the settings summary does not generate warnings.
    $this->drupalGet("admin/structure/types/manage/$type/display");
    $edit = array(
      "fields[field_$field_name][type]" => 'scriptfield_script',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $edit = array(
      "fields[field_$field_name][type]" => 'scriptfield_script',
    );
    $this->drupalPost(NULL, $edit, t('Save'));

    // Create content.
    $langcode = LANGUAGE_NONE;
    $body = $this->randomName();
    $edit = array(
      "title" => $this->randomName(),
      "body[$langcode][0][value]" => $body,
      'field_' . $field_name . "[$langcode][0][value]" => 'example.js',
    );


    // Test main behaviour
    $this->drupalPost('node/add/' . $name, $edit, t('Save'));
    $this->assertRaw('http://example.com/example.js', 'Script is loaded in the page.');
  }



}
