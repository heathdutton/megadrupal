<?php
/**
 * @file
 * Javascript formatter functionality.
 */

/**
 * Implements hook_field_info().
 * Defines the script field.
 */
function scriptfield_field_info() {
  global $base_url;
  return array(
    'scriptfield' => array(
      'label' => t('Script'),
      'description' => t('Allow users to include scripts from a safe source.'),
      'default_widget' => 'scriptfield_text',
      'default_formatter' => 'scriptfield_script',
      'instance_settings' => array(
        'allowed_extensions' => array(
          'js' => 'js',
          'css' => 'css',
        ),
        'base_url' => $base_url,
        'prefix_url_in_widget' => TRUE,
      ),
    ),
  );
}

/**
 * Implements hook_field_schema().
 */
function scriptfield_field_schema($field) {
  $columns = array(
    'value' => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE),
  );
  return array('columns' => $columns);
}

/**
 * Implements hook_field_widget_info().
 *
 * Adds scriptfield fields to the text_textfield widget valid field types.
 */
function scriptfield_field_widget_info() {
  return array(
    'scriptfield_text' => array(
      'label' => t('Script Field'),
      'field types' => array('scriptfield'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function scriptfield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $default = '';
  if (isset($items[$delta]['value'])) {
    $default = $items[$delta]['value'];
  }
  $element['value'] = array(
    '#title' => $instance['label'],
    '#type' => 'textfield',
    '#default_value' => $default,
  );

  if (!empty($instance['settings']['prefix_url_in_widget'])) {
    $element['value']['#field_prefix'] = check_plain($instance['settings']['base_url']);
  }

  return $element;
}

/**
 * Implements hook_field_validate().
 */
function scriptfield_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  $settings = $instance['settings'];

  if (is_array($settings['allowed_extensions'])) {
    $settings['allowed_extensions'] = implode(',', array_filter($settings['allowed_extensions']));
  }

  foreach($items as $delta => $item) {
    if (!empty($item['value']) && isset($settings['allowed_extensions'])) {
      $regex = '/\.(' . preg_replace('/,/', '|', preg_quote($settings['allowed_extensions'])) . ')$/i';
      if (!preg_match($regex, $item['value'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'scriptfield_invalid_extension',
          'message' => t('The specified extension is not valid, please use one of: @exts', array(
            '@exts' => $settings['allowed_extensions'],
          )),
        );
      }
    }
    if (!empty($item['value'])) {
      $regex = '/^[a-z0-9\-_\.\/]+$/i';
      if (!preg_match($regex, $item['value'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'scriptfield_invalid_extension',
          'message' => t('The specified file name is not valid, please use only alphanumeric characters, "/", "-", "_" or "."'),
        );
      }
      else {
        if (strpos($item['value'], '..') !== FALSE) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'scriptfield_invalid_extension',
            'message' => t('You can not include .. in the URL.'),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function scriptfield_field_is_empty($item, $field) {
  return empty($item['value']);
}


/**
 * Implements hook_field_instance_settings_form().
 */
function scriptfield_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  $element = array();

  $element['allowed_extensions'] = array(
    '#title' => t('Allowed extensions'),
    '#options' => array(
      'js' => t('Javascript files (.js)'),
      'css' => t('Cascading Style Sheets files (.css)'),
    ),
    '#description' => t('What type of files do you want to allow to attach to your content.'),
    '#type' => 'checkboxes',
    '#default_value' => $settings['allowed_extensions'],
    '#element_validate' => array('scriptfield_element_validate_extensions'),
  );
  $element['base_url'] = array(
    '#title' => t('Base URL'),
    '#description' => t('Base URL where all scripts are stored. Include the trailing slash. E.g http://cdn.example.com/scripts/'),
    '#type' => 'textfield',
    '#default_value' => $settings['base_url'],
    '#element_validate' => array('scriptfield_element_validate_base_url'),
    '#required' => TRUE,
  );
  $element['prefix_url_in_widget'] = array(
    '#title' => t('Prefix Base URL in the widget'),
    '#type' => 'checkbox',
    '#description' => t('If checked, the Base URL will be displayed before the textfield where the users will define the files to attach.'),
    '#default_value' => $settings['prefix_url_in_widget'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_info().
 * Defines the Javascript formatter.
 */
function scriptfield_field_formatter_info() {
  return array(
    'scriptfield_script' => array(
      'label' => t('Attached External Script'),
      'description' => t('Allow users to include scripts from a safe source.'),
      'field types' => array('scriptfield'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function scriptfield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $instance['settings'];

  // Allowed extensions are an array now. Convert older format to new format
  if (!is_array($settings['allowed_extensions'])) {
    $settings['allowed_extensions'] = explode(',', str_replace(' ', '', $settings['allowed_extensions']));
  }

  foreach ($items as $item) {
    $url = $settings['base_url'] . $item['value'];
    $type = substr($url, strrpos($url, '.', 1) + 1);
    if (in_array($type, array_filter($settings['allowed_extensions']))) {
      $element['#attached'][$type][$url] = array('type' => 'external');
    }
  }
  return $element;
}

function scriptfield_element_validate_extensions($element, &$form_state, $form) {
  if (count(array_filter($element['#value'])) == 0) {
    form_error($element, t('You need to set which extensions to allow.'));
  }
}

function scriptfield_element_validate_base_url($element, &$form_state, $form) {
  if (empty($element['#value'])) {
    form_error($element, t('You need to set the base url.'));
  }
  if (!valid_url($element['#value'])) {
    form_error($element, t('You need to specify a valid url.'));
  }
  if (!preg_match("@/$@", $element['#value'])) {
    form_error($element, t('Please add a trailing / to the end of the url.'));
  }
}
