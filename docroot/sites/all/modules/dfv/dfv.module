<?php

/**
 * @file
 * Provides basic functionality for a DFV module.
 */

/**
 * Implements hook_views_api().
 */
function dfv_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'dfv') . '/views',
  );
}

/**
 * Implements hook_module_implements_alter().
 */
function dfv_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $group = $implementations['dfv'];
    unset($implementations['dfv']);
    $implementations['dfv'] = $group;
  }
}

/**
 * Implements hook_form_alter().
 */
function dfv_form_alter(&$form, &$form_state, $form_id) {
  // Return FALSE if there are no fields.
  if (!isset($form_state['field'])) {
    return;
  }

  foreach ($form_state['field'] as $field_name => $field) {
    if (!isset($form[$field_name]['#language'])) {
      continue;
    }

    $language = $form[$field_name]['#language'];
    $instance = $field[$language]['instance']['settings'];
    // Check if dfv enabled.
    if (isset($instance['dfv']) && $instance['dfv']['status']) {
      $dfv = $instance['dfv'];
      $parent = $dfv['parent'];
      $parent_language = $form[$parent]['#language'];
      $widget = $form_state['field'][$parent][$parent_language]['instance']['widget']['type'];
      $widget_child = $field[$language]['instance']['widget']['type'];
      $field_type = $field[$language]['field']['type'];
      $views = explode(':', $dfv['view']);
      dfv_set_ajax_property($form, $field_name, $widget, $parent);

      $args = array();
      // Search default value.
      if (isset($form[$parent][$parent_language]['#default_value'])) {
        $default_parent = $form[$parent][$parent_language]['#default_value'];
      }
      if (isset($form[$parent][$parent_language][0]['#default_value'])) {
        $default_parent = $form[$parent][$parent_language][0]['#default_value'];
      }
      if (isset($form[$parent][$parent_language][0]['target_id']['#default_value'])) {
        $default_parent = $form[$parent][$parent_language][0]['target_id']['#default_value'];
        if (!empty($form[$parent][$parent_language][0]['target_id']['#autocomplete_path'])) {
          // Take "label (entity id)', match the id from parenthesis.
          if (preg_match("/.+\((\d+)\)/", $default_parent, $matches)) {
            $default_parent = $matches[1];
          }
        }
      }

      if (!empty($default_parent)) {
        $args = is_array($default_parent) ? array_values($default_parent) : array($default_parent);
      }
      else {
        $columns = array_keys($form_state['field'][$parent][$parent_language]['field']['columns']);
        if (isset($form_state['build_info']['args'][0]->{$parent}[$parent_language][0][$columns[0]])) {
          $default_parent = $form_state['build_info']['args'][0]->{$parent}[$parent_language][0][$columns[0]];
          $args = is_array($default_parent) ? array_values($default_parent) : array($default_parent);
        }
      }
      if (isset($form_state['triggering_element'])) {
        if (!empty($form_state['triggering_element']['#field_name']) ||
          $parent == $form_state['triggering_element']['#parents'][0]) {
          $args = dfv_get_args($form, $form_state, $parent, $widget);
        }
      }

      $options = !empty($args) ? dfv_views_list_options($views[0], $views[1], $args) : array();
      dfv_set_value($form, $field_name, $field_type, $options, $widget_child);
    }
  }
}

/**
 * Ajax callback function.
 */
function dfv_field_callback($form, &$form_state) {
  $commands = array();
  foreach ($form_state['field'] as $field_name => $field) {
    if (!isset($form[$field_name]['#language'])) {
      continue;
    }

    $language = $form[$field_name]['#language'];
    $instance = $field[$language]['instance']['settings'];
    // Check if dfv enabled.
    if (isset($instance['dfv']) && $instance['dfv']['status']) {
      $dfv = $instance['dfv'];
      $parent = $dfv['parent'];
      $parent_language = $form[$parent]['#language'];
      $widget = $form_state['field'][$parent][$parent_language]['instance']['widget']['type'];
      dfv_set_ajax_property($form, $field_name, $widget, $parent);

      if (isset($form_state['triggering_element'])) {
        if (!empty($form_state['triggering_element']['#field_name'])) {
          if ($parent == $form_state['triggering_element']['#field_name'] ||
            $parent == $form_state['triggering_element']['#parents'][0]
          ) {
            $commands[] = ajax_command_replace('#dfv-' . $field_name . '-wrapper', drupal_render($form[$field_name]));
          }
        }
      }
    }
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Helper function to get args for view.
 *
 * @param array $form
 *   Form array.
 * @param array $form_state
 *   Form state array.
 * @param string $parent
 *   The parent field name.
 * @param string $widget
 *   The field widget.
 *
 * @return array
 *   An array of args.
 */
function dfv_get_args($form, $form_state, $parent, $widget) {
  $args = array();
  $parent_language = $form[$parent]['#language'];
  $values = array();
  $options = $form_state['values'][$parent][$parent_language];

  if ($widget == 'options_select') {
    if ($form[$parent][$parent_language]['#multiple'] && $form[$parent][$parent_language]['#type'] == 'select') {
      $args = array_values($options);
      return $args;
    }
  }

  if (isset($form[$parent][$parent_language]['#max_delta'])) {
    $max = $form[$parent][$parent_language]['#max_delta'];
    for ($delta = 0; $delta <= $max; $delta++) {
      $options[$delta] = $form_state['values'][$parent][$parent_language][$delta];
    }
  }

  foreach ($options as $value) {
    if (!is_array($value)) {
      continue;
    }

    if ($widget == 'text_textarea_with_summary') {
      $values[] = $value['value'];
    }
    else {
      $value = array_values($value);
      $values[] = array_shift($value);
    }
  }

  $args[] = implode('+', $values);
  return $args;
}

/**
 * Helper function to set ajax field property.
 *
 * @param array $form
 *   Form array.
 * @param string $field_name
 *   The child field name.
 * @param string $widget
 *   The widget type of element.
 * @param string $parent
 *   The parent field name.
 *
 * @return void
 *   None.
 */
function dfv_set_ajax_property(&$form, $field_name, $widget, $parent) {
  $language = $form[$field_name]['#language'];
  $parent_language = $form[$parent]['#language'];
  // Add form wrapper.
  $form[$field_name][$language]['#prefix'] = '<div id="dfv-' . $field_name . '-wrapper">';
  $form[$field_name][$language]['#suffix'] = '</div>';
  // Ajax settings array.
  $ajax = array(
    'callback' => 'dfv_field_callback',
    'wrapper' => 'dfv-' . $field_name . '-wrapper',
    'event' => 'change blur'
  );

  $max = isset($form[$parent][$parent_language]['#max_delta']) ? $form[$parent][$parent_language]['#max_delta'] : 0;

  switch ($widget) {
    case 'entityreference_autocomplete':
      for ($delta = 0; $delta <= $max; $delta++) {
        $form[$parent][$parent_language][$delta]['target_id']['#ajax'] = $ajax;
      }
      break;

    case 'text_textarea_with_summary':
      for ($delta = 0; $delta <= $max; $delta++) {
        $form[$parent][$parent_language][$delta]['#ajax'] = $ajax;
      }
      break;

    case 'number':
    case 'text_textfield':
      for ($delta = 0; $delta <= $max; $delta++) {
        $form[$parent][$parent_language][$delta]['value']['#ajax'] = $ajax;
      }
      break;

    case 'options_buttons':
    case 'options_select':
      if (isset($form[$parent][$parent_language]['#multiple']) &&
        $form[$parent][$parent_language]['#multiple']) {
        $form[$parent][$parent_language]['#validated'] = TRUE;
      }
    case 'taxonomy_autocomplete':
      $form[$parent][$parent_language]['#ajax'] = $ajax;
      break;
  }
}

/**
 * Helper function to set field value.
 *
 * @param array $form
 *   Form array.
 * @param string $field_name
 *   The field name.
 * @param string $field_type
 *   The field type.
 * @param array $options
 *   an array of options.
 *
 * @return void
 *   None.
 */
function dfv_set_value(&$form, $field_name, $field_type, $options, $widget) {
  $language = $form[$field_name]['#language'];

  if ($widget == 'options_select') {
    $options = is_array($options) ? array('_none' => t('- None -')) + $options : array('_none' => t('- None -'));
  }

  switch ($field_type) {
    case 'text_with_summary':
      $set = _dfv_set_multi_value($form, $field_name, NULL, $options);
      if (!$set) {
        $form[$field_name][$language][0]['#value'] = implode(', ', $options);
      }
      break;

    case 'text':
      $set = _dfv_set_multi_value($form, $field_name, 'value', $options);
      if (!$set) {
        $form[$field_name][$language][0]['value']['#value'] = implode(', ', $options);
      }
      break;

    case 'list_text':
      $form[$field_name][$language]['#options'] = $options;
      break;

    case 'entityreference':
      if ($widget == 'options_select') {
        $form[$field_name][$language]['#options'] = $options;
      }
      else {
        $set = _dfv_set_multi_value($form, $field_name, 'target_id', $options);
        if (!$set) {
          $form[$field_name][$language][0]['target_id']['#value'] = array_pop($options);
        }
      }
      break;

    case 'commerce_customer_profile_reference':
      if ($widget == 'options_select') {
        $form[$field_name][$language]['#options'] = $options;
      }
      break;
  }
}

/**
 * Helper function to set multi value fields.
 *
 * @param array $form
 *   Form array.
 * @param string $field_name
 *   The field name.
 * @param string $value_key
 *   The field value key.
 * @param array $options
 *   an array of options.
 *
 * @return bool
 *   Result of setting the data.
 */
function _dfv_set_multi_value(&$form, $field_name, $value_key, $options) {
  $language = $form[$field_name]['#language'];

  if ((isset($form[$field_name][$language]['#cardinality']) && $form[$field_name][$language]['#cardinality'] == 1) || !$options) {
    return FALSE;
  }

  $delta = 0;
  foreach ($options as $value) {
    if ($delta) {
      $form[$field_name][$language][$delta] = $form[$field_name][$language][$delta - 1];
    }

    if ($value_key == NULL) {
      $form[$field_name][$language][$delta]['#value'] = $value;
    }
    else {
      $form[$field_name][$language][$delta][$value_key]['#value'] = $value;
    }

    $delta++;
  }

  return TRUE;
}

/**
 * Retrieves an array of values, defined by a view.
 *
 * @param string $view_name
 *   The name of the view.
 * @param string $display_name
 *   The name of the view's display. This has to be a 'References' display.
 * @param array $args
 *   The array of arguments ("contextual filters") for the view.
 *
 * @return array
 *   An array of values.
 */
function dfv_views_list_options($view_name, $display_name, $args) {
  // Check that the view is valid and the display still exists.
  $view = views_get_view($view_name);
  if (!$view || !isset($view->display[$display_name])) {
    return FALSE;
  }

  // If we have no access to the View an empty result should be returned to
  // avoid triggering the fallback results.
  if (!$view->access(array($display_name))) {
    return array();
  }

  // Temporary backwards compatibility for fields migrated from CCK D6: accept
  // 'default' display, but dynamically add a 'references' display out of it.
  if ($display_name == 'default') {
    $display_name = $view->add_display('dfv');
  }

  $view->set_display($display_name);

  $options = array(
    'ids' => array(),
    'string' => '',
    'match' => 'contains',
  );
  $view->display_handler->set_option('dfv_options', $options);
  $view->display_handler->set_option('pager', array('type' => 'some', 'options' => array('items_per_page' => 0)));

  // Make sure the query is not cached.
  $view->is_cacheable = FALSE;

  // Get the results.
  $results = $view->execute_display($display_name, $args);

  return $results;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dfv_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  $instance = $form['#instance'];
  $settings = $instance['settings'];

  // Handle fields without existing settings.
  if (isset($form['instance']['settings']['#markup'])) {
    $form['instance']['settings'] = array();
  }
  $form['instance']['settings']['dfv'] = array(
    '#title' => t('DFV settings'),
    '#type' => 'fieldset',
  );
  $form['instance']['settings']['dfv']['status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable dfv settings'),
    '#default_value' => isset($settings['dfv']['status']) ? $settings['dfv']['status'] : '',
  );

  $instances = field_info_instances($instance['entity_type'], $instance['bundle']);
  $options = array('' => t('None'));

  foreach ($instances as $key => $value) {
    $options[$key] = $value['label'];
  }

  $form['instance']['settings']['dfv']['parent'] = array(
    '#type' => 'select',
    '#title' => t('Parent field'),
    '#default_value' => isset($settings['dfv']['parent']) ? $settings['dfv']['parent'] : '',
    '#options' => $options,
    '#description' => t('Select parent field.'),
  );

  $displays = views_get_applicable_views('dfv display');
  $options = array('' => t('None'));
  foreach ($displays as $data) {
    list($view, $display_id) = $data;
    $options[$view->name . ':' . $display_id] = $view->name . ' - ' . $view->display[$display_id]->display_title;
  }

  $form['instance']['settings']['dfv']['view'] = array(
    '#type' => 'select',
    '#title' => t('Views'),
    '#default_value' => isset($settings['dfv']['view']) ? $settings['dfv']['view'] : '',
    '#options' => $options,
    '#description' => t('Select views display.'),
  );
}
