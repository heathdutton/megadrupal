<?php
/**
 * @file
 *   Tivoli Access Manager (TAM) Authentication module functions.
 *
 * @see http://www-01.ibm.com/software/tivoli
 */

module_load_include('inc', 'user', 'user.pages');

/**
 * Implements hook_menu().
 */
function tamauth_menu() {
  $items['user/tam'] = array(
    'title' => 'TAM Authentication',
    'page callback' => 'tamauth_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/tamauth'] = array(
    'title' => 'TAM Authentication',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tamauth_settings_form'),
    'access arguments' => array('administer tamauth'),
    'file' => 'tamauth.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function tamauth_permission() {
  $perms = array();

  $perms['administer tamauth'] = array(
    'title' => t('Administer TAM authentication'),
  );

  return $perms;
}

/**
 * Page Callback
 *
 * Delegte to tam processes and redirect.
 */
function tamauth_page() {
  global $user, $conf;

  // Disable the page cache.
  $conf['cache'] = FALSE;

  $name = tamauth_get_tam_name_header();
  $roles = tamauth_get_tam_groups_header();
  $user = user_load_by_name($name);
  $role_map = variable_get('tamauth_map_roles', array());
  $roles_valid = (bool) count(array_intersect($roles, array_keys($role_map)));

  if (!$name || !$roles_valid) {
    watchdog('tamauth', implode(' ', array(t('Incomplete headers'), serialize($name), serialize($roles))));
    drupal_add_http_header('Status', '400 Bad Request');
    echo t("Nice try...");
    drupal_exit();
  }
  else if (tamauth_user_is_not_tam($name)) {
    watchdog('tamauth', t('Page callback: @name is not an authorised TAM user', array('@name' => $name)));
    drupal_add_http_header('Status', '403 Forbidden');
    drupal_access_denied();
    drupal_exit();
  }

  user_external_login_register($name, 'tamauth');
  tamauth_set_roles($user, tamauth_map_roles($roles));
  tamauth_set_user_mapped_header_fields($user);
  drupal_goto(variable_get('tamauth_redirect', 'admin'));
}

/**
 * Set the roles for the tam user.
 *
 * @param DrupalUser
 *  $account The drupal user account.
 * @param Array
 *  $tam_roles List of roles to apply to the user.
 */
function tamauth_set_roles($account, $tam_roles = array()) {
  $user_roles = user_roles();

  //Revoke
  foreach ($account->roles as $rid => $name) {
    if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
      unset($account->roles[$rid]);
    }
  }
  
  //Grant
  foreach ($user_roles as $rid => $name) {
    if (in_array($name, $tam_roles)) {
      $account->roles[$rid] = $name;
    }
  }
  
  user_save($account);
}

/**
 * Sets the admin configured mapped fields on a user object.
 *
 * @param object $user
 */
function tamauth_set_user_mapped_header_fields($user) {
  $mappings = tamauth_field_mappings();
  if (count($mappings) > 0) {
    foreach ($mappings as $tam_header => $drupal_field_name) {
      if (!empty($_SERVER[$tam_header])) {
        if (strpos($drupal_field_name, 'field_') === 0) {
          $user->{$drupal_field_name}[LANGUAGE_NONE][0]['value'] = urldecode($_SERVER[$tam_header]);
        }
        else {
          $user->{$drupal_field_name} = urldecode($_SERVER[$tam_header]);
        }
      }
    }
    user_save($user);
  }
}

/**
 * Determines if a user can authenticate via TAM.
 *
 * @param string
 *   The username of the user to check.
 *
 * @return bool
 *   Is the this is a TAM user?
 */
function tamauth_is_tam_user($name) {
  return user_get_authmaps($name) && in_array('tamauth', array_keys(user_get_authmaps($name)));
}

/**
 * Determines if a user exists but can't authenticate with TAM.
 *
 * @param string
 *   The username of the user to check.
 * @return bool
 *   Does the user exist and is not a TAM user?
 */
function tamauth_user_is_not_tam($name) {
  $result = db_query('SELECT 1 FROM {users} u WHERE u.name = :name', array(':name' => $name))->fetch();
  return $result ? !tamauth_is_tam_user($name) : FALSE;
}

/**
 * Fetches the username value from the request header.
 *
 * @return
 *  The username in the header of FALSE if empty or not found.
 */
function tamauth_get_tam_name_header() {
  $header = FALSE;
  if (!empty($_SERVER['HTTP_IV_USER'])) {
    $header = $_SERVER['HTTP_IV_USER'];
  }
  return $header;
}

/**
 * Fetches the value of the TAM group header.
 *
 * @return string
 *   The username in the header or FALSE if empty or not found.
 */
function tamauth_get_tam_groups_header() {
  $groups = array();
  if (empty($_SERVER['HTTP_IV_GROUPS'])) {
    return $groups;
  }

  $entries = explode(',', $_SERVER['HTTP_IV_GROUPS']);
  foreach ($entries as $group) {
    $groups[] = trim($group, ' "');
  }

  return $groups;
}

/**
 * Maps TAM roles to drupal roles.
 *
 * @param Array
 *   $tam_roles List of TAM roles to be mapped.
 *
 * @return Array
 *   List of valid drupal groups.
 */
function tamauth_map_roles($tam_roles) {
  $map = variable_get('tamauth_map_roles', array());
  $drupal_roles = array();
  foreach ($tam_roles as $role) {
    if (isset($map[$role])) {
      $drupal_roles[] = $map[$role];
    }
  }
  return $drupal_roles;
}

/**
 * Provides the mappings between TAM headers and User account fields.
 *
 * @return array TAM_HEADER => drupal_field_name.
 */
function tamauth_field_mappings() {
  return variable_get('tam_field_mappings', array());
}
