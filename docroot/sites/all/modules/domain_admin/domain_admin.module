<?php
// $Id: domain_admin.module,v 1.16 2010/08/05 16:23:12 nirbhasa Exp $

/**
 * @file
 * domain_admin module: Administration delegation for Domain Access users.
 */

/**
 * Implements hook_permission().
 *
 * Returns one permission to rule them all, or a whole bunch of granular
 * permissions, depending on the choice made in the domain settings form
 */
function domain_admin_permission() {
  // TODO The array elements in this hook function need to be changed.

  if (variable_get('domain_admin_granularity', 'single') == 'single') {
    $perms = array(
      'administer own domains' => array(
        'title' => t('Administer own domains'),
        'description' => t('Grant users full control over the domains they are assigned to'),
      ),
    );
  }
  else {
    $perms = array(
      'access domain overview page' => array(
        'title' => t('Access domain overview page'),
        'description' => t('View listing of all domains'),
      ),
      'edit own domain record' => array(
        'title' => t('edit own domain record'),
        'description' => t('TODO Add a description for \'edit own domain record\''),
      ),
      'change author and creation date of nodes on domain' => array(
        'title' => t('Change author information on domain'),
        'description' => t('Users can change author and creation date of nodes on their own domains'),
      ),
      'access published checkbox on domain' => array(
        'title' => t('Access published checkbox on domain'),
        'description' => t('Users can choose to publish and unpublish nodes on their own domain'),
      ),
      'access promote checkbox on domain' => array(
        'title' => t('Access promote checkbox on domain'),
        'description' => t('Users can choose to promote/demote nodes on their own domain'),
      ),
      'access sticky checkbox on domain' => array(
        'title' => t('Access sticky checkbox on domain'),
        'description' => t('Users can choose to sticky/unsticky nodes on their own domain'),
      ),
    );

    if (module_exists('domain_conf')) {
      $perms['configure domain settings'] = array(
        'title' => t('Configure domain settings'),
        'description' => t('Users can access the domain settings page on domains they are assigned to'),
      );

    }

    if (module_exists('domain_theme')) {
      $perms['configure domain themes'] = array(
        'title' => t('Configure domain themes'),
        'description' => t('Users can change theme on domains they are assigned to'),
      );
    }

    if (module_exists('domain_taxonomy')) {
      $perms['configure domain taxonomy'] = array(
        'title' => t('Edit domain terms assigned to domain'),
        'description' => t('Users can edit terms on domains they are assigned to (not including terms assigned to all domains)'),
      );

      $perms['configure domain taxonomy plus'] = array(
        'title' => t('Edit terms assigned to this domain, and all domains'),
        'description' => t('Users can edit terms on domains they are assigned to, as well as terms assigned to all domains'),
      );      
    }    

    if (module_exists('book')) {
      $perms['rearrange book pages on domain'] = array(
        'title' => t('Rearrange book pages on domain'),
        'description' => t('Users can change book outlines on domains they are assigned to'),
      );
    }

    if (module_exists('menu')) {
      $perms['administer domain primary links menu'] = array(
        'title' => t('Administer domain primary links menu'),
        'description' => t('Users can change the menu that has been assigned to \'primary\' for their domain'),
      );
      $perms['administer domain secondary links menu'] = array(
        'title' => t('Administer domain secondary links menu'),
        'description' => t('Users can change the menu that has been assigned to \'secondary\' for their domain'),
      );          
    }

    if (module_exists('webform')) {
      $perms['access webform results on domain'] = array(
        'title' => t('Access all webform results on domain'),
        'description' => t('Users can access webform results on domains they are assigned to'),
      ); 

      $perms['access editable webform results on domain'] = array(
        'title' => t('Access all results for webforms on domain that user can edit'),
        'description' => t('Users can access webform results on assigned domains, for webforms they have edit access to'),
      ); 
    }

    // Allow other modules to add permissions via hook_domainadminperms.
    $modules = module_implements('domainadminperms');
    if (!empty($modules)) {
      foreach ($modules as $module) {
        $func = $module . '_domainadminperms';
        $perms = array_merge($perms, $func());
      }
    }
  }
  return $perms;
}

/**
 * Implements hook_menu_alter().
 */
function domain_admin_menu_alter(&$items) {

  // Allow access to Domain View page with either the single-granularity 'administer own domains'
  // or the multiple-granularity 'access domain overview page' permissions
  // TODO: This is broken at the moment
  //$items['admin/structure/domain']['access callback'] = '_domain_admin_settings_access';
  //$items['admin/structure/domain']['access arguments'] = array('access domain overview page');

  $other_perm = 'edit own domain record';
  // Allow access to edit own domain settings, from that domain
  $items['admin/structure/domain/edit/%domain']['access callback'] = '_domain_admin_settings_access';
  $items['admin/structure/domain/edit/%domain']['access arguments'] = array($other_perm, 4);
  $items['admin/structure/domain/edit/%domain']['page arguments'] = array('domain_form', 4, array('ignore_domain_status_check' => TRUE));

  // Allow access to edit/reset own domain configurations
  $other_perm = 'configure domain settings';
  // 2.x
  $items['admin/structure/domain/conf/%domain']['access callback'] = '_domain_admin_settings_access';
  $items['admin/structure/domain/conf/%domain']['access arguments'] = array($other_perm, 4);
  $items['admin/structure/domain/conf-reset/%domain']['access callback'] = '_domain_admin_settings_access';
  $items['admin/structure/domain/conf-reset/%domain']['access arguments'] = array($other_perm, 4);
  // 3.x
  $items['admin/structure/domain/view/%domain/config']['access callback'] = '_domain_admin_settings_access';
  $items['admin/structure/domain/view/%domain/config']['access arguments'] = array($other_perm, 4);
  $items['admin/structure/domain/view/%domain/conf-reset']['access callback'] = '_domain_admin_settings_access';
  $items['admin/structure/domain/view/%domain/conf-reset']['access arguments'] = array($other_perm, 4);


  // Allow access to choose/reset/configure own domain theme
  $other_perm = 'configure domain themes';
  //2.x
  $items['admin/structure/domain/theme/%domain']['access callback'] = '_domain_admin_settings_access';
  $items['admin/structure/domain/theme/%domain']['access arguments'] = array($other_perm, 4);
  $items['admin/structure/domain/theme-reset/%domain']['access callback'] = '_domain_admin_settings_access';
  $items['admin/structure/domain/theme-reset/%domain']['access arguments'] = array($other_perm, 4);
  $items['admin/structure/domain/theme/%/%domain/theme-settings']['access callback'] = '_domain_admin_settings_access';
  $items['admin/structure/domain/theme/%/%domain/theme-settings']['access arguments'] = array($other_perm, 4);

  // 3.x
  $items['admin/structure/domain/view/%domain/theme']['access callback'] = '_domain_admin_settings_access';
  $items['admin/structure/domain/view/%domain/theme']['access arguments'] = array($other_perm, 4);
  $items['admin/structure/domain/view/%domain/theme-reset']['access callback'] = '_domain_admin_settings_access';
  $items['admin/structure/domain/view/%domain/theme-reset']['access arguments'] = array($other_perm, 4);
  $items['admin/structure/domain/view/%domain/theme-settings']['access callback'] = '_domain_admin_settings_access';
  $items['admin/structure/domain/view/%domain/theme-settings']['access arguments'] = array($other_perm, 4);

  if(module_exists('domain_taxonomy')) {
    // Give domain managers access to categories
    $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/add']['access callback'] = '_domain_admin_taxonomy_add_access';
    $items['taxonomy/term/%taxonomy_term/edit']['access callback'] = '_domain_admin_taxonomy_edit_access'; 
  }   

  // Menu links to access,edit and delete unpublished nodes
  $items['node/%node']['access callback'] = '_domain_admin_unpublished_access';
  $items['node/%node']['access arguments'] = array(1, 'view');
  $items['node/%node/edit']['access callback'] = '_domain_admin_unpublished_access';
  $items['node/%node/edit']['access arguments'] = array(1, 'update');
  $items['node/%node/delete']['access callback'] = '_domain_admin_unpublished_access';
  $items['node/%node/delete']['access arguments'] = array(1, 'delete');

  // Menu links to view the results of all webforms on own domain
  $items['node/%webform_menu/webform-results']['access callback'] = '_domain_admin_webform_access';
  $items['node/%webform_menu/webform-results']['access arguments'] = array(1);
  $items['node/%webform_menu/webform-results/submissions']['access callback'] = '_domain_admin_webform_access';
  $items['node/%webform_menu/webform-results/submissions']['access arguments'] = array(1);
  $items['node/%webform_menu/webform-results/table']['access callback'] = '_domain_admin_webform_access';
  $items['node/%webform_menu/webform-results/table']['access arguments'] = array(1);
  $items['node/%webform_menu/webform-results/analysis']['access callback'] = '_domain_admin_webform_access';
  $items['node/%webform_menu/webform-results/analysis']['access arguments'] = array(1);
  $items['node/%webform_menu/webform-results/download']['access callback'] = '_domain_admin_webform_access';
  $items['node/%webform_menu/webform-results/download']['access arguments'] = array(1);
  $items['node/%webform_menu/webform-results/download-file']['access callback'] = '_domain_admin_webform_access';
  $items['node/%webform_menu/webform-results/download-file']['access arguments'] = array(1);
  $items['node/%webform_menu/webform-results/clear']['access callback'] = '_domain_admin_webform_access';
  $items['node/%webform_menu/webform-results/clear']['access arguments'] = array(1);
  $items['node/%webform_menu/submission/%webform_menu_submission']['access callback'] = '_domain_admin_webform_access';
  $items['node/%webform_menu/submission/%webform_menu_submission']['access arguments'] = array(1);
  $items['node/%webform_menu/submission/%webform_menu_submission/view']['access callback'] = '_domain_admin_webform_access';
  $items['node/%webform_menu/submission/%webform_menu_submission/view']['access arguments'] = array(1);
  $items['node/%webform_menu/submission/%webform_menu_submission/edit']['access callback'] = '_domain_admin_webform_access';
  $items['node/%webform_menu/submission/%webform_menu_submission/edit']['access arguments'] = array(1);
  $items['node/%webform_menu/submission/%webform_menu_submission/delete']['access callback'] = '_domain_admin_webform_access';
  $items['node/%webform_menu/submission/%webform_menu_submission/delete']['access arguments'] = array(1);

  // Menu links to rearrange pages of book on own domain
  $items['admin/content/book/%node']['access callback'] = '_domain_admin_outline_access';
  $items['admin/content/book/%node']['access arguments'] = array(3);

  // Menu links to administer menus assigned to own domain
  $items['admin/structure/menu-customize/%menu']['access callback'] = '_domain_admin_menu_access';
  $items['admin/structure/menu-customize/%menu']['access arguments'] = array(3);
  $items['admin/structure/menu-customize/%menu/list']['access callback'] = '_domain_admin_menu_access';
  $items['admin/structure/menu-customize/%menu/list']['access arguments'] = array(3);
  $items['admin/structure/menu-customize/%menu/add']['access callback'] = '_domain_admin_menu_access';
  $items['admin/structure/menu-customize/%menu/add']['access arguments'] = array(3);
  $items['admin/structure/menu/item/%menu_link/edit']['access callback'] = '_domain_admin_menu_access';
  $items['admin/structure/menu/item/%menu_link/edit']['access arguments'] = array(4);
  $items['admin/structure/menu/item/%menu_link/delete']['access callback'] = '_domain_admin_menu_access';
  $items['admin/structure/menu/item/%menu_link/delete']['access arguments'] = array(4);

}


function _domain_admin_taxonomy_add_access() {

  global $_domain; 

  // Let the domain taxonomy site settings determine if term is sitewide
  return _domain_admin_access('configure domain taxonomy', $domain['domain_id']) 
    || _domain_admin_access('configure domain taxonomy plus', $_domain['domain_id'])
    || user_access('administer taxonomy'); 
}

function _domain_admin_taxonomy_edit_access($term) {

  global $_domain; 
  domain_taxonomy_load_term($term);

  if (_domain_admin_access('configure domain taxonomy', $_domain['domain_id']) && in_array($_domain['domain_id'], $term->domains)) {
    return TRUE;
  } 

  if (_domain_admin_access('configure domain taxonomy plus', $_domain['domain_id']) 
      && ($term->domain_site == TRUE || in_array($_domain['domain_id'], $term->domains))) {
    return TRUE;
  } 

  return taxonomy_term_edit_access($term);
  
}

/**
 * Implements hook_domainview().
 * Limit domains to the ones user has access to
 * TODO: This is broken at the moment
 */
/*function domain_admin_domainview($op, $domain = array()) {
  if (!user_access('administer domains')) {
    switch ($op) {
      case 'select':
        return 'de.*';
      case 'join':
        global $user;
        return "LEFT JOIN {domain_editor} de ON d.domain_id = de.domain_id WHERE de.uid = " . $user->uid . " AND d.domain_id > 0";
    }
  }
}*/

/**
 * Wrapper function for user_access:
 *
 * - First it checks if user is assigned to the domain (if no domain
 * (is specified, then it will check that user is assigned to
 * the current domain)
 * - If single permission selected, then access is granted to all
 *   those with 'administer own domains'
 * - If not, then access is granted for the permission specified
 */
function _domain_admin_access($perm = NULL, $domain_id = NULL) {

  global $user;

  $granularity = variable_get('domain_admin_granularity', 'single');

  if (user_access('administer domains')) {
    return TRUE;
  }

  if ((is_string($perm) && (domain_admin_isuserindomain($user, $domain_id)) || $perm == 'access domain overview page')) {
    if ($granularity == 'single' && user_access('administer own domains')) {
      return TRUE;
    }
    elseif ($granularity == 'multiple' && user_access($perm)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Permissions to access domain overview, edit record, settings or themes.
 *
 * If none of the permission conditions are satisfied, then refer to
 * 'administer domains' permission.
 */
function _domain_admin_settings_access($perm, $domain = NULL) { 
  return _domain_admin_access($perm, $domain['domain_id']) || user_access('administer domains');
}

/**
 * Permissions to view/edit/delete unpublished nodes on domain.
 *
 * If none of the permission conditions are satisfied, then use node_access
 * like normal.
 */
function _domain_admin_unpublished_access($node, $op) {

  global $user, $_domain;
  if ($node->status == 0) {
    if (_domain_admin_node_access($node, $op . ' all unpublished nodes on domain', $_domain['domain_id'])) {
      return TRUE;
    }
    elseif (_domain_admin_node_access($node, $op . ' own unpublished nodes on domain', $_domain['domain_id']) && $node->uid == $user->uid ) {
      return TRUE;
    }
  }
  return node_access($op, $node);
}


/**
 * Permissions to view webform results on domain.
 */
function _domain_admin_webform_access($node) {  
    
  global $_domain;  
  return _domain_admin_node_access($node, 'access webform results on domain', $_domain['domain_id']) 
  || (_domain_admin_node_access($node, 'access editable webform results on domain', $_domain['domain_id']) && node_access('update', $node))
  || user_access('access webform results');
}


/**
 * Permissions to rearrange book pages on domain.
 * Checks that book node and user are both assigned to current domain
 */
function _domain_admin_outline_access($node) {

  global $_domain;
  $node_domains = domain_get_node_domains($node->nid, TRUE, TRUE);
  $book_in_domain = in_array($_domain['domain_id'], $node_domains['domain_id']);

  return ($book_in_domain && _domain_admin_node_access($node, 'rearrange book pages on domain', $_domain['domain_id'])) || user_access('administer book outlines');
}

/**
 * Permissions to administer menus assigned to domain.
 */
function _domain_admin_menu_access($menu) {

  global $_domain;
  global $user;

  if ($menu['menu_name'] == domain_conf_variable_get($_domain['domain_id'], 'menu_primary_links_source')
     && _domain_admin_access('administer domain primary links menu', $_domain['domain_id']) ) {
    return TRUE;
  }
  if ($menu['menu_name'] == domain_conf_variable_get($_domain['domain_id'], 'menu_secondary_links_source')
     && _domain_admin_access('administer domain secondary links menu', $_domain['domain_id']) ) {
    return TRUE;
  }
  /*if ($menu['menu_name'] == domain_conf_variable_get($_domain['domain_id'], 'menu_default_node_menu')
     && domain_admin_access('administer domain navigation menu') ) {
    return TRUE;
  }*/
  return user_access('administer menu');
}

/**
 * Allow other modules to grant access to a permission on a
 * domain node via hook_domainadmin_delegate
 * It first checks if node is in domain before allowing access
 *
 * Important note: it doesn't check if user is assigned to domain, this is
 * to allow the possibility of handing delegation functions to non-domain modules.
 * if you need that check, you should put it in your hook implementation.
 */
function domain_admin_delegated_access($nodevar, $perm = 'all') {

  global $_domain;

  // Convert nid to node object
  if (is_int($nodevar)) {
    $node = new stdClass;
    $node->nid = $nodevar;
  }
  else {
    $node = $nodevar;
  }

  // If nid exists, check if node is in domain
  if (isset($node->nid)) {
    $node_domains = domain_get_node_domains($node->nid, TRUE, TRUE);
    $node_in_domain = in_array($_domain['domain_id'], $node_domains['domain_id']);
  }
  else {
    $node_in_domain = TRUE;
  }

  if ($node_in_domain) {
    $modules = module_implements('domainadmin_delegate');
    if (!empty($modules)) {
      foreach ($modules as $module) {
        $func = $module . '_domainadmin_delegate';
        $grant = $func($node, $perm);
        if ($grant == TRUE) {
          return TRUE;
        }
      }
    }
  }
  return FALSE;
}

/**
 * For node-dependent permissions: checks both domain_admin_access for the
 * entire domain and domain_admin_delegated_access for the node
 */
function _domain_admin_node_access($node, $perm, $domain_id) {
  return _domain_admin_access($perm, $domain_id) || domain_admin_delegated_access($node, $perm);
}

/**
 * Determine if user is assigned to a domain.
 * If domain is not specified, checks if assigned to current domain
 */
function domain_admin_isuserindomain($user, $domain_id = NULL) {

  if (is_null($domain_id)) {
    global $_domain;
    $domain_id = $_domain['domain_id'];
  }
  return in_array($domain_id, domain_get_user_domains($user));
}

/**
 * Implements hook_form_alter().
 */
function domain_admin_form_alter(&$form, &$form_state, $form_id) {

  global $_domain, $user;
  $domain_id = $_domain['domain_id'];
  
  // Apply to all node editing forms.
  if (!empty($form['#node_edit_form'])) {
    
    $node = $form['#node'];
    
     //print_r_tree($form);
    if (!user_access('administer nodes')) {
      
      // Add access to the 'Authoring information' fieldset.
      $form['author']['name']['#access'] = _domain_admin_node_access($node, 'change author and creation date of nodes on domain', $domain_id);
      $form['author']['date']['#access'] = _domain_admin_node_access($node, 'change author and creation date of nodes on domain', $domain_id);
      $form['author']['#access'] |= element_get_visible_children($form['author']);

      // Add access to the 'Publishing options' fieldset.
      $form['options']['status']['#access'] = _domain_admin_node_access($node, 'access published checkbox on domain', $domain_id);
      $form['options']['promote']['#access'] = _domain_admin_node_access($node, 'access promote checkbox on domain', $domain_id);
      $form['options']['sticky']['#access'] = _domain_admin_node_access($node, 'access sticky checkbox on domain', $domain_id);
      $form['options']['#access'] |= element_get_visible_children($form['options']);
    }
  }  

  // Configuring locale search form to limit it to domain language
  if ($form_id == 'locale-translate-seek-form' && _domain_admin_access('translate domain language content', $domain_id)) {

    $language = domain_conf_variable_get($_domain['domain_id'], 'language_default');

    $form['search']['language'] = array(
      '#type' => 'hidden',
      '#value' => $language,
    );
  }

  // Configuring translation edit form to limit it to domain language
  if ($form_id == 'locale-translate-edit-form' && _domain_admin_access('translate domain language content', $domain_id) ) {

    $language = domain_conf_variable_get($_domain['domain_id'], 'language_default');
    $form['translations'] = array('#tree' => TRUE);

    $form['translations'][$language] = array(
      '#type' => 'textarea',
      '#title' => locale_language_name($language),
      '#rows' => 4,
      '#default_value' => '',
    );
    $lid = arg(4);

    $result = db_query("SELECT DISTINCT translation FROM {locales_target} WHERE lid = :lid AND language = :language", array(':lid' => $lid, ':language' => $language));
    while ($translation = db_fetch_object($result)) {
      $form['translations'][$language]['#default_value'] = $translation->translation;
    }
  }

  if ($form_id == 'domain_configure_form') {
    domain_admin_domainform($form);
  }
}

/**
 * Implements hook_domainform().
 * Adds domain_admin specific fields to domain configuration form
 * TODO: This needs to be replaced by form alter for 3.x
 */
function domain_admin_domainform(&$form) {

  $form['domain_admin'] = array(
    '#type' => 'fieldset',
    '#title' => t('Domain Administration'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['domain_admin']['domain_admin_granularity'] = array(
    '#type' => 'radios',
    '#title' => t('Granularity of admin permissions'),
    '#options' => array(
      'single' => 'Single \'administer own domains \' permission',
      'multiple' => 'Multiple permissions for each aspect of domain adminstration',
    ),
    '#required' => FALSE,
    '#default_value' => variable_get('domain_admin_granularity', 'single'),
    '#description' => t('Selecting the \'single\' option will give your domain administrators all powers over their domains, and at the same time save your permissions page from being filled with checkboxes. Select multiple if you need to give more granular control, or if you need to give different levels of admin access to different roles.'),
  );
  
  $form['domain_admin']['domain_admin_menu_output'] = array(
    '#type' => 'radios',
    '#title' => t('Display domain admin links as:'),
    '#options' => array(
      'toolbar' => 'Toolbar at top of page',
      'block' => 'Output links into a block',
    ),
    '#required' => FALSE,
    '#default_value' => variable_get('domain_admin_menu_output', 'block'),
    '#description' => t('If toolbar is displayed, the page will be moved down 20px to make way for it.'),
  );

  $form['domain_admin']['domain_admin_toolbar_display'] = array(
    '#type' => 'radios',
    '#title' => t('Toolbar display:'),
    '#options' => array(
      'everywhere' => 'Display on every page if logged in and there are links',
      'domains' => 'Display only on domains that user administers',
    ),
    '#required' => FALSE,
    '#default_value' => variable_get('domain_admin_toolbar_display', 'everywhere'),
    '#description' => t('If toolbar is displayed, the page will be moved down 20px to make way for it.'),
  );

  $form['domain_admin']['domain_admin_showlinks'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Links to in domain admin menu'),
    '#options' => domain_admin_linkdefaults(),
    '#required' => FALSE,
    '#default_value' => variable_get('domain_admin_showlinks', array_keys(domain_admin_linkdefaults())),
    '#description' => t('Note that users will also need to have the appropriate permissions to use these links. Links added from other modules will automatically be displayed.'),
  );

  $form['domain_admin']['domain_admin_help_pages'] = array(
    '#type' => 'textfield',
    '#title' => t('Help pages'),
    '#size' => 40,
    '#maxlength' => 80,
    '#required' => FALSE,
    '#default_value' => variable_get('domain_admin_help_pages', ''),
    '#description' => t('A link to help pages that will be displayed on the domain administration block. May be an internal Drupal path or an external URL. If nothing is entered here, no help link will be displayed.'),
  );

  // The granularity setting doesn't automatically assign permission to the admin role
  // fixing that here
  if (module_exists('adminrole')) {
    $form['domain_admin']['#submit'][] = adminrole_update_permissions();
  }
}

/**
 * List of all menu links that will appear in domain admin block
 */
function domain_admin_linkdefaults() {
  $defaults = array(
    'domadm_overview' => 'Domain overview',
    'domadm_settings' => 'Edit domain record',
    'domadm_conf' => 'Domain settings',
    'domadm_themes' => 'Domain themes',
    'domadm_arrange' => 'Rearrange book pages',
    'domadm_child' => 'Rearrange child pages',
    'domadm_primary_links' => 'Edit main menu',
    'domadm_secondary_links' => 'Edit secondary links menu',
    'domadm_translate' => 'Translate site',
  );

  $node_types = node_type_get_names();
  foreach ($node_types as $key => $value) {
    $defaults['domadm_create_' . $key] = 'Create ' . strtolower($value) . ' content';
  }
  return $defaults;
}

/**
 * Implements hook_block_info().
 */
function domain_admin_block_info() {
  $display = variable_get('domain_admin_menu_output', 'block'); 
  $block = array(); 
  if ($display == 'block') {  
    $block[0]['info'] = t('Admin block for domain');
  } 
  return $block; 
}

/**
 * Implements hook_block_view().
 */
function domain_admin_block_view($delta = 0) {
    
  $display = variable_get('domain_admin_menu_output', 'block');
  $block = array();  
  if ($display == 'block') {   
    global $user, $_domain;
  
    $domain_id = $_domain['domain_id'];

    if (domain_admin_isuserindomain($user, $domain_id) || user_access('administer domains')) {

      $block['subject'] = $_domain['sitename'];
    
      module_load_include('inc', 'domain_admin', 'domain_admin');
      $links = domain_admin_links($domain_id);
    
      $output = theme_links(array(
                'links' => $links, 
                'attributes' => array('class' => 'item-list'),
                'heading' => array(
                  'text' => t('Domain Admin Menu'),
                  'level' => 'h2',
                  'class' => array('element-invisible'),
                ),
              ));

      // Allow other modules to add non-link items to the end of the block via hook_domainadminblock.
      $modules = module_implements('domainadminblock');
      if (!empty($modules)) {
        foreach ($modules as $module) {
          $func = $module . '_domainadminblock';
          $output .= $func();
        }
      }
      $block['content'] = $output;
    }
  }  
  return $block;
}

/**
 * Implements hook_page_alter().
 * Outputs link display for toolbar
 */
function domain_admin_page_alter(&$page) {
    
  global $user, $_domain;  
  $display = variable_get('domain_admin_menu_output', 'block');
  $block = array();  
  $display_everywhere = variable_get('domain_admin_toolbar_display', 'everywhere');
  
  if ($display == 'toolbar' && ($user->uid && ($display_everywhere || domain_admin_isuserindomain($user, $_domain['domain_id'])) || user_access('administer domains'))) {   
    
    $page['page_bottom']['domain_admin'] = array(
      '#markup' => domain_admin_output($_domain['domain_id']),
    );
  }  
}

function domain_admin_output($domain_id) {

  module_load_include('inc', 'domain_admin', 'domain_admin');
  $links = domain_admin_links($domain_id);
  
  $path = drupal_get_path('module', 'domain_admin');
  drupal_add_css($path . '/domain_admin.css');
  $output = '';
  
  if (count($links)) {
    
    $output = theme_links(array(
      'links' => $links, 
      'attributes' => array(
        'class' => array('links', 'inline'),
        'id' => 'domain-admin-menu',
      ),  
      'heading' => array(
        'text' => t('Domain Admin Menu'),
        'level' => 'h2',
        'class' => array('element-invisible'),
      ),
    ));
  }  
  
  return $output;
}   

/**
 * Prints body classes to move page down to make way for toolbar and admin menu if needed
 */
function domain_admin_preprocess_html(&$variables) {
  global $user, $_domain;  
  $display = variable_get('domain_admin_menu_output', 'block');
  $display_everywhere = variable_get('domain_admin_toolbar_display', 'everywhere');
  if ($display == 'toolbar' && ($user->uid && ($display_everywhere || domain_admin_isuserindomain($user, $_domain['domain_id'])) || user_access('administer domains'))) {
    if (module_exists('admin_menu') && user_access('access administration menu')) {
      $variables['classes_array'][] = 'domain-admin-menu-combined';
    }
    else {
      $variables['classes_array'][] = 'domain-admin-menu';   
    }    
  }  
}
   



