<?php

/**
 * @file
 * Defines necessary menu's, Permissions & other imoprtant functions.
 */

/**
 * Implements hook_help().
 */
function unix_time_conversion_help($path, $arg) {
  switch ($path) {
    // Displaying help text on help page.
    case 'admin/help#unix_time_conversion':
      return t("Unix time conversion provides blocks as a user interface for date-to-timestamp & vice-versa conversions.");
  }
}

/**
 * Implements hook_permission().
 */
function unix_time_conversion_permission() {
  return array(
    // Permission for administrators.
    'Configure unix time coversion' => array(
      'title' => t('Configure unix time coversion'),
      'description' => t('User with this permission can control the output of unix time conversion blocks'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function unix_time_conversion_menu() {
  // Define empty menu items.
  $items = array();
  // Unix time conversion settings URL.
  $items['admin/config/regional/unix-time-conversion/settings'] = array(
    'title' => 'Unix Time Conversion',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('unix_time_conversion_output_configuration_form'),
    'access arguments' => array('Configure unix time coversion'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 1,
    'file' => 'unix_time_conversion.admin.inc',
  );
  // Returning items.
  return $items;
}

/**
 * Implements hook_hook_info_alter().
 */
function unix_time_conversion_hook_info_alter(&$hooks) {
  /*
   * Letting system allow to invoke block hooks present in inc files.
   */
  $hooks['block_configure'] = array('group' => 'blocks');
  $hooks['block_info'] = array('group' => 'blocks');
  $hooks['block_info_alter'] = array('group' => 'blocks');
  $hooks['block_list_alter'] = array('group' => 'blocks');
  $hooks['block_save'] = array('group' => 'blocks');
  $hooks['block_view'] = array('group' => 'blocks');
  $hooks['block_view_alter'] = array('group' => 'blocks');
}

/**
 * Implements hook_theme().
 */
function unix_time_conversion_theme() {
  return array(
    'unix_time_conversion_timestamp_to_date' => array(
      'arguments' => array(
        'timestamp_information' => NULL,
      ),
    ),
    'unix_time_conversion_date_to_timestamp' => array(
      'arguments' => array(
        'date_information' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_element_info().
 */
function unix_time_conversion_element_info() {
  /*
   * Creating custom form element for 3 select fields.
   * These fields will act as hours:minutes:seconds selectors.
   */
  $unix_time_conversion_time_field = array(
    '#input' => TRUE,
    '#tree' => TRUE,
    '#process' => array('unix_time_conversion_time_field_process'),
    '#theme_wrappers' => array('form_element'),
  );
  return array(
    'unix_time_conversion_time_field' => $unix_time_conversion_time_field,
  );
}

/**
 * Process callback for time field defined in hook_element_info().
 */
function unix_time_conversion_time_field_process($element, &$form_state, $complete_form) {
  // Include the helper functions file.
  module_load_include('inc', 'unix_time_conversion', 'unix_time_conversion.helper_functions');
  // Container element.
  $element['time_container'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('container-inline unix_time_conversion_time_field_container'),
    ),
  );
  // Hours element.
  $element['time_container']['hours'] = array(
    '#title' => t('Hours'),
    '#title_display' => 'invisible',
    '#type' => 'select',
    '#options' => unix_time_conversion_get_time_in_range(0, 23),
  );
  // Minutes element.
  $element['time_container']['minutes'] = array(
    '#title' => t('Minutes'),
    '#title_display' => 'invisible',
    '#type' => 'select',
    '#options' => unix_time_conversion_get_time_in_range(0, 59),
  );
  // Seconds element.
  $element['time_container']['seconds'] = array(
    '#title' => t('Seconds'),
    '#title_display' => 'invisible',
    '#type' => 'select',
    '#options' => unix_time_conversion_get_time_in_range(0, 59),
  );
  // Return element.
  return $element;
}

/**
 * Form constructor for the timestamp to date conversion.
 *
 * @ingroup forms
 */
function unix_time_conversion_timestamp_to_date_form($form, &$form_state) {
  $form = array();
  // Timestamp textfield.
  $timestamp_title = variable_get('unix_time_conversion_timestamp_field_title', 'Timestamp');
  $timestamp_description = variable_get('unix_time_conversion_timestamp_field_description', 'Ex: ' . time());
  $form['timestamp'] = array(
    '#title' => t('@timestamp_title', array('@timestamp_title' => $timestamp_title)),
    '#type' => 'textfield',
    '#size' => 20,
    '#weight' => 1,
    '#description' => t('@timestamp_desc', array('@timestamp_desc' => $timestamp_description)),
  );
  // Calculate submit button.
  $form['calculate'] = array(
    '#value' => 'Calculate',
    '#type' => 'button',
    '#ajax' => array(
      'method' => 'replace',
      'event' => 'click',
      'callback' => 'unix_time_conversion_display_date',
      'wrapper' => 'unix_time_conversion_calculated_date',
    ),
    '#weight' => 2,
  );
  // Calculated date inside markup.
  $form['calculated_date'] = array(
    '#type' => 'markup',
    '#weight' => 4,
    '#prefix' => '<div id="unix_time_conversion_calculated_date">',
    '#suffix' => '</div>',
  );
  // Check if the form is submitted then compute the date accordingly.
  if (isset($form_state['values'])) {
    // Include the helper functions file.
    module_load_include('inc', 'unix_time_conversion', 'unix_time_conversion.helper_functions');
    // Check if the timestamp is numeric.
    if (is_numeric(trim($form_state['values']['timestamp']))) {
      // Timestamp variable decleration.
      $timestamp = trim($form_state['values']['timestamp']);
      // Theme the markup output.
      $form['calculated_date']['#markup'] = theme("unix_time_conversion_timestamp_to_date", array('timestamp' => $timestamp));
    }
    else {
      // If timestamp is not numeric, throw error.
      form_set_error('timestamp', t('Invalid timestamp.'));
    }
  }
  // Return Form.
  return $form;
}

/**
 * Ajax callback for timestamp to date conversion.
 */
function unix_time_conversion_display_date($form, &$form_state) {
  return render($form['calculated_date']);
}

/**
 * Callback from hook_theme() for timestamp to date output.
 */
function theme_unix_time_conversion_timestamp_to_date($timestamp_information) {
  // Extracting variables.
  $timestamp = $timestamp_information['timestamp'];
  // Including helper functions inc file.
  module_load_include('inc', 'unix_time_conversion', 'unix_time_conversion.helper_functions');
  // Getting output.
  $output = unix_time_conversion_get_date_from_timestamp($timestamp);
  // Returning output.
  return $output;
}

/**
 * Form constructor for the date to timestamp conversion.
 *
 * @ingroup forms
 */
function unix_time_conversion_date_to_timestamp_form($form, &$form_state) {
  // Include the helper functions file.
  module_load_include('inc', 'unix_time_conversion', 'unix_time_conversion.helper_functions');
  // Empty form array.
  $form = array();
  // Date Input.
  $date_title = variable_get('unix_time_conversion_date_field_title', 'Date');
  $form['date'] = array(
    '#title' => t('@date_title', array('@date_title' => $date_title)),
    '#type' => 'date',
    '#weight' => 1,
  );
  // Time Input.
  $time_title = variable_get('unix_time_conversion_time_field_title', 'Time');
  $form['time'] = array(
    '#title' => t('@time_title', array('@time_title' => $time_title)),
    '#type' => 'unix_time_conversion_time_field',
    '#weight' => 2,
  );
  // Calculate button.
  $form['calculate'] = array(
    '#value' => 'Calculate',
    '#type' => 'button',
    '#ajax' => array(
      'method' => 'replace',
      'event' => 'click',
      'callback' => 'unix_time_conversion_display_timestamp',
      'wrapper' => 'unix_time_conversion_calculated_timestamp',
    ),
    '#weight' => 3,
  );
  // Calculated timestamp inside markup.
  $form['calculated_timestamp'] = array(
    '#type' => 'markup',
    '#weight' => 4,
    '#prefix' => '<div id="unix_time_conversion_calculated_timestamp">',
    '#suffix' => '</div>',
  );
  // Check if the form is submitted then compute the timestamp accordingly.
  if (isset($form_state['values'])) {
    // User submited date and time.
    $date = $form_state['values']['date'];
    $time = $form_state['values']['time'];
    // Theme the markup output.
    $form['calculated_timestamp']['#markup'] = theme("unix_time_conversion_date_to_timestamp", array('date' => $date, 'time' => $time));
  }
  // Return form.
  return $form;
}

/**
 * Ajax callback to get timestamp.
 */
function unix_time_conversion_display_timestamp($form, &$form_state) {
  return render($form['calculated_timestamp']);
}

/**
 * Callback from hook_theme() for date to timestamp output.
 */
function theme_unix_time_conversion_date_to_timestamp($date_information) {
  // Extracting variables.
  $date = $date_information['date'];
  $time = $date_information['time'];
  // Including helper functions inc file.
  module_load_include('inc', 'unix_time_conversion', 'unix_time_conversion.helper_functions');
  // Getting output.
  $output = unix_time_conversion_get_timestamp_from_date_and_time($date, $time);
  // Returning output.
  return $output;
}
