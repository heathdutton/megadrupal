<?php

/* @file
 *
 * OpenID ICAM extension for Drupal 7
 *
 * See README.txt for more information
 */

define('OPENID_ICAM_REQUIRE_HTTPS_TRANSPORT_DEFAULT', 1);
// Note: Seperate default preferred policies with a space
define('OPENID_ICAM_PAPE_SEND_MAX_AUTH_AGE_DEFAULT', 1);
define('OPENID_ICAM_PAPE_MAX_AUTH_AGE_DEFAULT', 300);
define('OPENID_ICAM_PAPE_SEND_PREFERRED_AUTH_POLICIES_DEFAULT', 1);
define('OPENID_ICAM_PAPE_REQUIRE_PREFERRED_AUTH_POLICIES_DEFAULT', 1);
define('OPENID_ICAM_VALIDATE_PROVIDER_DEFAULT', 1);
define('OPENID_ICAM_PAPE_PREFERRED_AUTH_POLICIES_DEFAULT', 'http://www.idmanagement.gov/schema/2009/05/icam/openid-trust-level1.pdf http://schemas.xmlsoap.org/ws/2005/05/identity/claims/privatepersonalidentifier');
define('OPENID_ICAM_PAPE_NAMESPACE_VALUE_DEFAULT', 'http://specs.openid.net/extensions/pape/1.0');
define('OPENID_ICAM_SHOW_ERRORS_DEFAULT', 0);
define('OPENID_ICAM_LOG_REQUEST_RESPONSE_DEFAULT', 0);

/**
 * Defines the default set of approved OpenID providers, as given
 * by the Open Identity Exchange (OIX).
 *
 * @see http://openidentityexchange.org/certified-providers
 */
$default_providers = array(
  'www.google.com',          //Google
//  'paypal.com',            //Paypal, paypal is approved by icam but not currently supported by this module
  'pip.verisignlabs.com',    //Verisign
  'id.wave.com',             //Wave
);

define ('OPENID_ICAM_APPROVED_PROVIDERS_LIST_DEFAULT', implode(' ', $default_providers));

/**
 * Implements hook_help().
 *
 */
function openid_icam_help($path, $arg) {
  $output = ''; //declare your output variable
  switch ($path) {
    case "admin/help#openid_icam":
      $output = '<p>' . t('Extends core Drupal OpenID to meet the ICAM OpenID 2.0 Profile extensions') . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_menu().
 *
 * There are URLs in use:
 * - openid/authenticate_icam which is where we set openID forms to return to
 * - admin/settings/openid_icam where settings for this module can be configured.
 */
function openid_icam_menu() {
  $items['openid/authenticate_icam'] = array(
    'title' => 'OpenID Login',
    'page callback' => 'openid_icam_authentication_page',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/people/openid_icam'] = array(
    'title' => 'OpenID ICAM Extension',
    'description' => 'Configure settings for the OpenID ICAM extension',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openid_icam_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_xrds() for the xrds_simple module.
 *
 * This sets our OpenID return_to value to be a published return_to URI in the Yadis document.
 * Doing so implements RP Discovery as required by Google Accounts and probably other OPs.
 */
function openid_icam_xrds($account = NULL) {
  global $base_root;

  $xrds['openid'] = array(
    'services' => array(
      array(
        'priority' => 10,
        'data' => array(
          'Type' => array('http://specs.openid.net/auth/2.0/return_to'),
          'URI' => array(url('openid/authenticate_icam', array('absolute' => TRUE, 'query' => user_login_destination()))),
        ),
      ),
    ),
  );

  return $xrds;
}

/**
 * Implements hook_openid().
 *
 * In Drupal we can add the PAPE extensions to the request using hook_openid.
 */
function openid_icam_openid($op, $request) {
  //debugging:
  //watchdog('openid_icam','hook_openid - op: ['. print_r($op,TRUE) .'], request: ['. print_r($request,TRUE) .']');
  if ($op == 'request') {
    // Add PAPE request parameters.

    // See: http://openid.net/specs/openid-provider-authentication-policy-extension-1_0-01.html#anchor9
    // See: http://www.idmanagement.gov/documents/ICAM_OpenID20Profile.pdf
    $pape = FALSE; // set to TRUE if we add any PAPE parameters, in which case we add the openis.nd.pape decleration as well.

    $send_max_auth_age = variable_get('openid_icam_pape_send_max_auth_age', OPENID_ICAM_PAPE_SEND_MAX_AUTH_AGE_DEFAULT);
    $send_preferred_auth_policies = variable_get('openid_icam_pape_send_preferred_auth_policies', OPENID_ICAM_PAPE_SEND_PREFERRED_AUTH_POLICIES_DEFAULT);
    $ns = 'openid.pape';

    if ($send_max_auth_age) {
      $request[$ns . '.max_auth_age'] =  variable_get('openid_icam_pape_max_auth_age', OPENID_ICAM_PAPE_MAX_AUTH_AGE_DEFAULT);
      $pape = TRUE;
    }

    if ($send_preferred_auth_policies) {
      // use preg_replace to convert any whitespace into a single space, otherwise the parameter will be rejected by the OP.
      $request[$ns . '.preferred_auth_policies'] = preg_replace('/\s+/', ' ', variable_get('openid_icam_pape_preferred_auth_policies', OPENID_ICAM_PAPE_PREFERRED_AUTH_POLICIES_DEFAULT));
      $pape = TRUE;
    }
    // If we added any PAPE parameters, add the namespace too!
    if ($pape) {
      $ns_value = variable_get('openid_icam_pape_namespace', OPENID_ICAM_PAPE_NAMESPACE_VALUE_DEFAULT);
      // the namespace value should be "http://specs.openid.net/extensions/pape/1.0" for PAPE 1.0
      $request['openid.ns.pape'] = $ns_value;
    }
  }

  // the openid_icam.install module sets open_icam to have weight 49.  We log the OpenID request right
  // here, since it's the only opportunity for our module to do so.  Because of its high weight, we can
  // be reasonably certain that we were the last module hook to be called, and thus are logging the
  // complete request.
  $log_request_response = variable_get('openid_icam_log_request_response', OPENID_ICAM_LOG_REQUEST_RESPONSE_DEFAULT);
  if ($log_request_response) {
    watchdog('openid_icam', 'Sending OpenID Request: [@request].', array('@request' => print_r($request, TRUE)), WATCHDOG_INFO);
  }
  return $request;
}

/**
 * Implements hook_form_alter().
 *
 * Adjusts openID return to URL to be our authentication function and replaces
 * the core OpenID module's validator function with our own.
 *
 * Since the core OpenID validator initiates openid login, we don't
 * want it to fire if our validator throws and error.  So we'll take it out of
 * the array and call it manually in our validator.  Kinda evil, but less evil than
 * the other options.
 *
 */
function openid_icam_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_login_block' || $form_id == 'user_login') {
    // Override the value set in the openid module.
    // This module has a heigher weight in the system table, so will run its hook after the main openid module.
    $form['openid.return_to'] = array(
      '#type' => 'hidden',
      '#value' => url('openid/authenticate_icam', array('absolute' => TRUE, 'query' => user_login_destination())),
    );

    //replace core's validator with our own
    if (!empty($form_state['input']['openid_identifier'])) {
      //locate and remove the core openid validator
      $core_validator_position = array_search('openid_login_validate', $form['#validate']);
      if ($core_validator_position !== FALSE) {
        unset($form['#validate'][$core_validator_position]);
      }

      //add our validator on at the top of the stack
      array_unshift($form['#validate'], 'openid_icam_login_validate');
    }
  }
}

/**
 * Provides a menu call back to process an OpenID authentication.
 *
 * This is mostly the stock openid_authentication_page callback,
 * with some extra ICAM validation thrown in after the openid_complete() call.
 */
function openid_icam_authentication_page() {

  $show_errors = variable_get('openid_icam_show_errors', OPENID_ICAM_SHOW_ERRORS_DEFAULT);
  $errors = '';

  // Call the regular OpenID module's complete function
  $result = openid_complete();

  // extra code starts here:
  $log_request_response = variable_get('openid_icam_log_request_response', OPENID_ICAM_LOG_REQUEST_RESPONSE_DEFAULT);
  if ($log_request_response) {
    watchdog('openid_icam', 'Received OpenID Response: [@response]', array('@response' => print_r($result, TRUE)), WATCHDOG_INFO);
  }

  $status = $result['status']; // status is now the output from regular authentication, just like Drupal core OpenID

  if ($status == 'success') { // Perform additional ICAM validation.
    // Validate Secure Transport, if enabled.
    $require_https = variable_get('openid_icam_require_https', OPENID_ICAM_REQUIRE_HTTPS_TRANSPORT_DEFAULT);
    if ($require_https) {

      $errMsg = openid_icam_authentication_page_validate_https($result);
      if (!is_null($errMsg)) {
        $status = 'failed';
        if ($show_errors) {
          $errors .= $errMsg . "  \n";
        }
      }
    }
    // Validate presence of requested PAPE Preferred Authentication Policies, if enabled
    $require_preferred_policies = variable_get('openid_icam_pape_require_preferred_policies', OPENID_ICAM_PAPE_REQUIRE_PREFERRED_AUTH_POLICIES_DEFAULT);
    if ($require_preferred_policies) {
      $errMsg = openid_icam_authentication_page_validate_pape_required_policies($result);
      if (!is_null($errMsg)) {
        $status = 'failed';
        if ($show_errors) {
          $errors .= $errMsg . "  \n";
        }
      }
    }
  } // endif ($status == success)

  // This is more or less the stock code from openid_authenticate, with some extra debugging added.
  switch ($status) {
    case 'success':
      return openid_authentication($result);
    case 'failed':
      if ($show_errors) {
        // if status from the IdP was success and we made it fail, we have error
        // messages, otherwise it could be due to failed verification in the core
        // openid module or the IdP responding with a failure for some reason.
        $errors = $errors ? $errors : t('OpenID login failed due to unknown causes. More information may be available in the system logs.');
        // errors have been previously escaped with t(), so we don't re-escape them
        drupal_set_message(t("OpenID login failed with ICAM authentication error(s):<br />!errors", array('!errors' => nl2br($errors))), 'error');
      }
      else {
        drupal_set_message(t('OpenID login failed.'), 'error');
      }
      break;
    case 'cancel':
      drupal_set_message(t('OpenID login cancelled.'));
      break;
    default:
      drupal_set_message(t('OpenID login failed.'));
      watchdog('openid_icam', 'Unrecognized status of :status returned from OpenID authentication attempt', array(':status' => $status));
  }
  drupal_goto();
}

/**
 * Validates the PAPE response meets the ICAM requirements.
 *
 * @param response The OpenID response.
 *
 * @return null if there are no errors, otherwise an error message.
 *
 * @see http://openid.net/specs/openid-provider-authentication-policy-extension-1_0-01.html
 */
function openid_icam_authentication_page_validate_pape_required_policies($response) {
  // Debugging:
  // watchdog('openid_icam','validate_PAPE: '. print_r($response,TRUE));

  // validate the required PAPE response parameters:  openid.ns.pape and openid.pape.auth_policies.

  // The PAPE spec claims the response MUST be openid.ns.pape (http://openid.net/specs/openid-provider-authentication-policy-extension-1_0.html#anchor9)
  // but most OPs including Google use a PAPE namespace like openid.ns.ext1 or openid.ns.ext2.

  // Regardless of ns, it must equal the value defined in openid_icam_pape_namespace_value
  // (for PAPE 1.0 this is http://specs.openid.net/extensions/pape/1.0)
  $ns_value = variable_get('openid_icam_pape_namespace_value', OPENID_ICAM_PAPE_NAMESPACE_VALUE_DEFAULT);
  $ns = NULL;
  foreach ($response as $param => $value) {
    if (strcmp($value, $ns_value) == 0) {
      // See if this parameter starts with openid.ns. as defined in OpenID 2.0: Extensions
      // (http://openid.net/specs/openid-authentication-2_0.html#extensions)
      if (strpos($param, 'openid.ns.') === 0) {
        $ns = 'openid.' . drupal_substr($param, 10);
        break;
      }
    }
  }
  if (is_null($ns)) {
    $errMsg = "OpenID Response was missing a valid PAPE response parameter equal to: $ns_value";
    watchdog('openid_icam', $errMsg);
    return $errMsg;
  }

  // Now we know the PAPE namespace (e.g. openid.ns.ext2), we can find the rest of the PAPE response parameters and validate them.
  if (isset($response[$ns . '.auth_policies'])) {

    // loop through the requested PAPE policies and check for them.
    // Log any errors to the watchdog, and also return the combined error log built in $errors:
    $policies = preg_replace('/\s+/', ' ', variable_get('openid_icam_pape_preferred_auth_policies', OPENID_ICAM_PAPE_PREFERRED_AUTH_POLICIES_DEFAULT));
    $req_policies = explode(' ', $policies);
    $resp_policies = $response[$ns . '.auth_policies'];
    $valid = TRUE;
    $errors = '';
    foreach ($req_policies as $policy) {
      if (strpos($resp_policies, $policy) === FALSE) {
        $errMsg = t('Required PAPE policy not found in OpenID Response: %policy', array('%policy' => $policy));
        watchdog('openid_icam', $errMsg);
        $errors .= $errMsg . "  \n";
        $valid = FALSE;
      }
    }
  }
  else {
    $errMsg = t('OpenID Response was missing response parameter %auth_policies', array('%auth_policies' => $ns . 'auth_policies'));
    watchdog('openid_icam', $errMsg);
    return $errMsg;
  }
  // return FALSE if no errors, or otherwiswe the combined error message
  return ($valid ? NULL : $errors);
}

/**
 * Validates that the OP endpoint is using the secure HTTPS transport.
 *
 * @param $result
 *   The OpenID response.
 *
 * @return NULL or string
 *   If there are no errors returns NULL, otherwise an error message string.
 *
 * @see http://openid.net/specs/openid-provider-authentication-policy-extension-1_0-01.html
 */
function openid_icam_authentication_page_validate_https($result) {
  // validate the discovered OP endpoint is https, watchdog if not.
  if (isset($_SESSION['openid']['user_login_values']['openid_identifier'])) {
    $op_endpoint = $_SESSION['openid']['user_login_values']['openid_identifier'];
    // watchdog('openid_icam','validate_https: endpoint is:'. $op_endpoint);
    if (preg_match('/^https:\/\//', $op_endpoint)) {
      return NULL;
    }
    else {
      $errMsg = t('validate_https: Warning: OpenID endpoint %endpoint is not secure HTTPS transport!  Denying authentication!', array('%endpoint' => $op_endpoint));
      watchdog('openid_icam', $errMsg);
      return $errMsg;
    }
  }
  else {
    $errMsg = t('validate_https: ERROR: Cannot find OpenID endpoint in OpenID Session variables!  Denying authentication!');
    watchdog('openid_icam', $errMsg);
    return $errMsg;
  }
}

/**
 * Provides a module configuration form.
 *
 * @see system_settings_form()
 */
function openid_icam_admin($form, &$form_state) {

  drupal_add_css(drupal_get_path('module', 'openid_icam') . '/openid_icam.css', 'module');

  $compliance_status = _openid_icam_check_compliance();
  $div_class =  $compliance_status->compliance ? 'openid_icam_ok' : 'openid_icam_error';

  $form = array();

  $form['compliance_status'] = array(
    '#type' => 'fieldset',
    '#title' => t('Compliance Status'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['compliance_status']['report'] = array(
    '#type' => 'markup',
    '#prefix' => '<div class="' . $div_class . '">',
    '#markup' =>  $compliance_status->messages,
    '#suffix' => '</div>',
  );

  $form['transport_security'] = array(
    '#type' => 'fieldset',
    '#title' => t('Transport Security'),
    '#description' => t("Choose whether to require Secure HTTPS Transport"),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['transport_security']['openid_icam_require_https'] = array(
    '#type' => 'checkbox',
    '#title' => t('Require HTTPS for OP Endpoint'),
    '#default_value' => variable_get('openid_icam_require_https', OPENID_ICAM_REQUIRE_HTTPS_TRANSPORT_DEFAULT),
    '#description' => t("Require that the OpenID endpoint use the Secure HTTPS transport."),
    '#required' => FALSE,
  );

  $form['approved_providers_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t("Approved Identity Providers (IdP's)"),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['approved_providers_fieldset']['openid_icam_validate_provider'] = array(
    '#type' => 'checkbox',
    '#title' => t('Validate the OpenID provider is ICAM approved'),
    '#default_value' => variable_get('openid_icam_validate_provider', OPENID_ICAM_VALIDATE_PROVIDER_DEFAULT),
    '#description' => t("Require that the Identity Provider URL is from an ICAM approved provider, by checking its hostname matches one of the entries in the approved providers list."),
    '#required' => FALSE,
  );

  $form['approved_providers_fieldset']['openid_icam_approved_providers_list'] = array(
    '#type' => 'textarea',
    '#title' => t("Approved Identity Providers List"),
    '#description' => t("Enter the host of each approved identity provider (e.g.: www.google.com).  Do not include the protocol or any path elements. Separate IdP's by whitespace."),
    '#default_value' => variable_get('openid_icam_approved_providers_list', OPENID_ICAM_APPROVED_PROVIDERS_LIST_DEFAULT),
    '#required' => TRUE,
  );

  $form['pape'] = array(
    '#type' => 'fieldset',
    '#title' => t('PAPE Extensions'),
    '#description' => t("Configure OpenID PAPE Extensions"),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['pape']['openid_icam_pape_namespace_value'] = array(
    '#type' => 'textfield',
    '#title' => t('PAPE Namespace'),
    '#default_value' => variable_get('openid_icam_pape_namespace_value', OPENID_ICAM_PAPE_NAMESPACE_VALUE_DEFAULT),
    '#description' => t("The openid.ns.pape value to declare for PAPE extensions.  For PAPE 1.0 this MUST be the default: http://specs.openid.net/extensions/pape/1.0"),
    '#required' => TRUE,
  );

  $form['pape']['pape_auth_policies'] = array(
    '#type' => 'fieldset',
    '#title' => t('PAPE prefered_auth_policies'),
    '#description' => t("Choose whether to send and/or require PAPE preferred_auth_policies"),
    '#collapsible' => FALSE,
  );
  $form['pape']['pape_auth_policies']['openid_icam_pape_send_preferred_auth_policies'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send the OpenID PAPE preferred_auth_policy parameter'),
    '#default_value' => variable_get('openid_icam_pape_send_preferred_auth_policies', OPENID_ICAM_PAPE_SEND_PREFERRED_AUTH_POLICIES_DEFAULT),
    '#description' => t("Send the OpenID PAPE 1.0 preferred_auth_policy parameter, with the policies specified below."),
    '#required' => FALSE,
  );
  $form['pape']['pape_auth_policies']['openid_icam_pape_require_preferred_policies'] = array(
    '#type' => 'checkbox',
    '#title' => t('Require a valid PAPE response that meets all the preferred PAPE auth policies in the response'),
    '#default_value' => variable_get('openid_icam_pape_require_preferred_policies', OPENID_ICAM_PAPE_REQUIRE_PREFERRED_AUTH_POLICIES_DEFAULT),
    '#description' => t("Require that the OP respond with a valid PAPE response containing all of the preferred auth policies specified below."),
    '#required' => FALSE,
  );
  $form['pape']['pape_auth_policies']['openid_icam_pape_preferred_auth_policies'] = array(
    '#type' => 'textarea',
    '#title' => t('Preferred auth policies for PAPE'),
    '#default_value' => variable_get('openid_icam_pape_preferred_auth_policies', OPENID_ICAM_PAPE_PREFERRED_AUTH_POLICIES_DEFAULT),
    '#description' => t("Enter the PAPE preferred authorziation policies here, seperated by whitespace."),
    '#required' => TRUE,
  );

  $form['pape']['pape_max_auth_age'] = array(
    '#type' => 'fieldset',
    '#title' => t('PAPE max_auth_age'),
    '#description' => t("Choose whether to send and/or require PAPE max_auth_age"),
    '#collapsible' => FALSE,
  );
  $form['pape']['pape_max_auth_age']['openid_icam_pape_send_max_auth_age'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send the PAPE max_auth_age parameter.'),
    '#default_value' => variable_get('openid_icam_pape_send_max_auth_age', OPENID_ICAM_PAPE_SEND_MAX_AUTH_AGE_DEFAULT),
    '#description' => t('Send the PAPE max_auth_age parameter in the OpenID Request.  This setting defaults to checked.'),
    '#required' => FALSE,
  );
  $form['pape']['pape_max_auth_age']['openid_icam_pape_max_auth_age'] = array(
    '#type' => 'textfield',
    '#title' => t('PAPE Max Auth Age'),
    '#default_value' => variable_get('openid_icam_pape_max_auth_age', OPENID_ICAM_PAPE_MAX_AUTH_AGE_DEFAULT),
    '#description' => t('The maximum age of a previous OpenID login to accept, in seconds.  Defaults to 0, requiring authentication each time.  To set for 1 minute, enter 60.  For 5 minutes - 300, etc.'),
    '#required' => TRUE,
  );

  $form['debugging'] = array(
    '#type' => 'fieldset',
    '#title' => t('Debugging'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['debugging']['openid_icam_show_errors'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show error descriptions to users'),
    '#default_value' => variable_get('openid_icam_show_errors', OPENID_ICAM_SHOW_ERRORS_DEFAULT),
    '#description' => t('Show detailed error descriptions when logins are denied because of this module.  This is a debugging setting that should be disabled on production sites.  The default is unchecked.'),
  );

  $form['debugging']['openid_icam_log_request_response'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log ALL OpenID requests and responses to the watchdog'),
    '#default_value' => variable_get('openid_icam_log_request_response', OPENID_ICAM_LOG_REQUEST_RESPONSE_DEFAULT),
    '#description' => t('Log each request and response to the watchdog log with type \'openid_icam\'.  This can be helpful when setting up a new IDp to see what exactly is contained in the request / response values.  Do not leave this enabled on production sites!'),
  );

  return system_settings_form($form);
}

/**
 * Validates an openid login submission.
 *
 * Compare the openid_identifier value from the form, parsed if necessary,
 * against the values in our list of allowed providers.  If unsuccessful,
 * set a form error and halt.  Otherwise, invoke openid_login_validate()
 * to continue the process.
 *
 * @see openid_login_validate()
 */
function openid_icam_login_validate($form, &$form_state) {

  $validate_provider = variable_get('openid_icam_validate_provider', OPENID_ICAM_VALIDATE_PROVIDER_DEFAULT);

  if ($validate_provider && (!in_array(_openid_icam_strip_host($form_state['values']['openid_identifier']), _openid_icam_get_approved_providers()))) {
    form_set_error('openid_identifier', t('Login Denied: The Identity provider you entered is not ICAM approved.'));
    watchdog('openid_icam', 'Blocked OpenID login attempt from unapproved provider: %url', array('%url' => $form_state['values']['openid_identifier']), WATCHDOG_NOTICE);
  }
  else {
    //our validation passed, so invoke the core openid validator
    openid_login_validate($form, $form_state);
  }
}

/**
 * Returns the list of approved provider URIs.
 *
 * @return array
 *   A list of approved provider URI's against which we can chack the URI
 *   of the URI of the $service array returned by core's openid_discovery function
 */
function _openid_icam_get_approved_providers() {
  $providers = preg_split('/\s+/', trim(variable_get('openid_icam_approved_providers_list', OPENID_ICAM_APPROVED_PROVIDERS_LIST_DEFAULT)));
  return $providers;
}

/**
 * Parses a URL and returns the host element.
 *
 * @param string $url
 *   The url or fragment from which the host should be extracted.
 *
 * @return string
 *   The host as extracted from the supplied url or the url if parse_url
 *   cannot evaluate the input as a url.
 */
function _openid_icam_strip_host($url) {
  $parsed_host = parse_url($url, PHP_URL_HOST);
  return ($parsed_host ? $parsed_host : $url);
}

/**
 * Checks current configuration against that required by the ICAM standard.
 *
 * @return stdClass
 *   An object with properties of compliance and messages. Compliance is a boolean
 *   indicator of if the configuration is in compliance.  Messages is an array of
 *   messages indicating what (if anything) is not in compliance.
 *
 */
function _openid_icam_check_compliance() {
  $compliance_status = TRUE;
  $misconfiguration_messages = array();

  $simple_checks = array(
    'openid_icam_require_https' => array(
      'value' => 1,
      'message' => t('Use of HTTPS transport is required'),
    ),
    'openid_icam_pape_send_preferred_auth_policies' => array(
      'value' => 1,
      'message' => 'Preferred Auth Policies must be sent',
    ),
    'openid_icam_pape_require_preferred_policies' => array(
      'value' => 1,
      'message' => 'IdPs must be required to respond with Preferred Auth Policies',
    ),
    'openid_icam_validate_provider' => array(
      'value' => 1,
      'message' => 'Providers must be validated against the ICAM approved provider list',
    ),
  );

  // check that the required auth policies are being sent
  // note that they can send others, but have to send the required two
  if (!is_null(variable_get('openid_icam_pape_preferred_auth_policies', NULL))) {
    $configured_policies = preg_split('/\s+/', trim(variable_get('openid_icam_pape_preferred_auth_policies', NULL)));
    $default_policies = preg_split('/\s+/', OPENID_ICAM_PAPE_PREFERRED_AUTH_POLICIES_DEFAULT);
    foreach ($default_policies as $policy) {
      if (!in_array($policy, $configured_policies)) {
        $compliance_status = FALSE;
        $misconfiguration_messages[] = t('Preferred auth policies for PAPE must include @policy', array('@policy' => $policy));
      }
    }
  }

  // check that only approved providers are enabled
  // RPs can use less than the full list of approved providers but not more
  // than are on that list
  if (!is_null(variable_get('openid_icam_approved_providers_list', NULL))) {
    $configured_providers = preg_split('/\s+/', trim(variable_get('openid_icam_approved_providers_list', NULL)));
    $default_providers = preg_split('/\s+/', OPENID_ICAM_APPROVED_PROVIDERS_LIST_DEFAULT);
    foreach ($configured_providers as $provider) {
      if (!in_array($provider, $default_providers)) {
        $compliance_status = FALSE;
        $misconfiguration_messages[] = t('@provider is not an ICAM approved provider', array('@provider' => $provider));
      }
    }
  }

  // all the comparisons of flags being set or simple values
  foreach ($simple_checks as $key => $settings) {
    if (!is_null(variable_get($key, NULL)) && $settings['value'] != variable_get($key, NULL)) {
      $compliance_status = FALSE;
      $misconfiguration_messages[] = $settings['message'];
    }
  }

  $out = new stdClass();
  $out->compliance = $compliance_status;
  if (!$misconfiguration_messages) {
    $title = 'Configuration is compliant with the !icam';
  }
  else {
    $title = 'The following items are not compliant with the !icam:';
  }
  $list_vars = array(
    'title' => t($title,  array(
      '!icam' => l('ICAM specification', 'http://www.idmanagement.gov/documents/ICAM_OpenID20Profile.pdf', array('attributes' => array('target' => '_blank'))),
    )),
    'items' => $misconfiguration_messages,
    'type'  => 'ul',
  );
  $out->messages = theme('item_list', $list_vars);

  return $out;
}
