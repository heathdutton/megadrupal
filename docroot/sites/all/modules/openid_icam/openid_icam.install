<?php

/**
 * @file
 * Install hooks for openid_icam module
 */

/**
 * Implements hook_install().
 */
function openid_icam_install() {
  // Set the weight higher than openid.module so we can override its
  // changes to hook_form_alter and set our own authentication function.
  db_update('system')
  ->fields(array(
    'weight' => 49,
  ))
  ->condition('name', 'openid_icam')
  ->execute();
}

/**
 * Implements of hook_uninstall().
 */
function openid_icam_uninstall() {
  // unset module variables
  db_delete('variable')
    ->condition('name', db_like('openid_icam_') . '%', 'LIKE')
    ->execute();
  cache_clear_all('variables', 'cache_bootstrap');
}

/**
 * Implements hook_requirements().
 *
 * This is used for runtime checking to provide a message if configuration is not
 * in compliance with ICAM rather than at install.
 */
function openid_icam_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    $requirements['openid_icam']['title'] = t('OpenID ICAM Configuration Compliance');

    $compliance_status = _openid_icam_check_compliance();

    //if we didn't find problems, set the everything's okay indicators
    if ($compliance_status->compliance) {
      $requirements['openid_icam']['value'] = 'Configuration in compliance';
      $requirements['openid_icam']['severity'] = REQUIREMENT_OK;
    }
    else {
      $requirements['openid_icam']['value'] = 'Non-compliant';
      $requirements['openid_icam']['severity'] = REQUIREMENT_ERROR;
      $requirements['openid_icam']['description'] = $compliance_status->messages;
    }
  }
  return $requirements;
}
