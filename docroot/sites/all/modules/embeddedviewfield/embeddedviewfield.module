<?php
/**
 * @file
 * Defines a field type to embed a view.
 */

/**
 * Implements hook_theme().
 */
function embeddedviewfield_theme() {
  return array(
    'embeddedviewfield_formatter_default' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function embeddedviewfield_field_info() {
  return array(
    'embeddedviewfield' => array(
      'label' => t('Embed View'),
      'description' => t('Embeds a selected view.'),
      'default_widget' => 'embeddedviewfield_select',
      'default_formatter' => 'embeddedviewfield_default',
    ),
  );
}

/**
 * Implements hook_field_instance_settings_form().
 */
function embeddedviewfield_field_instance_settings_form($field, $instance) {
  $form['#field_name'] = $field['field_name'];
  return $form;
}

/**
 * Ajax function to correct display list.
 */
function embeddedviewfield_display_option_ajax($form, $form_state) {
  $field_name = $form['instance']['field_name']['#value'];
  $display_name = & $form['instance']['default_value_widget'][$field_name][LANGUAGE_NONE][0]['display_name'];
  $commands = array();
  $commands[] = ajax_command_replace('#display-wrapper', drupal_render($display_name));
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements hook_field_presave().
 */
function embeddedviewfield_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $item) {
    if (empty($item['view_name'])) {
      unset($items[$delta]);
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function embeddedviewfield_field_is_empty($item, $field) {
  return empty($item['view_name']);
}

/**
 * Implements hook_field_prepare_view().
 *
 * Replace field values with instance defaults.
 */
function embeddedviewfield_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($items as $entity_id => &$instance_items) {
    $instance_items = $instances[$entity_id]['default_value'];
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function embeddedviewfield_field_formatter_info() {
  return array(
    'embeddedviewfield_default' => array(
      'label' => t('Default'),
      'field types' => array('embeddedviewfield'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function embeddedviewfield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  list($entity_id) = entity_extract_ids($entity_type, $entity);
  $elements = array();
  switch ($display['type']) {
    case 'embeddedviewfield_default':
      foreach ($items as $delta => $item) {
        $view_name = $item['view_name'];
        $view_display = $item['display_name'];
        $view = views_get_view($view_name);
        $elements[$delta] = array(
          '#type' => 'embeddedviewfield',
          '#access' => $view && $view->access($view_display),
          '#view' => $view,
          '#view_name' => $view_name,
          '#view_display' => $view_display,
          '#view_arguments' => $item['vargs'],
          '#entity_type' => $entity_type,
          '#entity_id' => $entity_id,
          '#entity' => $entity,
        );
      }
      break;
  }
  return $elements;
}

/**
 * Implements hook_element_info().
 */
function embeddedviewfield_element_info() {
  $types['embeddedviewfield'] = array(
    '#pre_render' => array('embeddedviewfield_pre_render'),
    '#theme' => 'embeddedviewfield_formatter_default',
    '#post_render' => array('embeddedviewfield_post_render'),
  );
  return $types;
}

/**
 * Implements #pre_render callback for a embeddedviewfield field.
 *
 * @see embeddedviewfield_field_formatter_view()
 * @see embeddedviewfield_post_render()
 */
function embeddedviewfield_pre_render($element) {
  $stack = &drupal_static('embeddedviewfield_stack', array());

  // Abort rendering in case the view could not be loaded.
  if (empty($element['#view'])) {
    // @todo Output an error message?
    $element['#printed'] = TRUE;
  }
  // Abort rendering in case of recursion.
  elseif (isset($stack[$element['#entity_type']][$element['#entity_id']])) {
    $element['#printed'] = TRUE;
  }
  // Otherwise, add the rendered entity to the stack to prevent recursion.
  else {
    $stack[$element['#entity_type']][$element['#entity_id']] = TRUE;

    // Override the view's path to the current path. Otherwise, exposed
    // views filters would submit to the front page.
    $element['#view']->override_path = current_path();

    // @todo Store views arguments serialized.
    $element['#view_arguments'] = _embeddedviewfield_get_view_args($element['#view_arguments'], $element['#entity_type'], $element['#entity']);
  }
  return $element;
}

/**
 * Implements #post_render callback for a embeddedviewfield field.
 *
 * @see embeddedviewfield_pre_render()
 * @see embeddedviewfield_field_formatter_view()
 */
function embeddedviewfield_post_render($content, $element) {
  $stack = &drupal_static('embeddedviewfield_stack', array());

  unset($stack[$element['#entity_type']][$element['#entity_id']]);

  return $content;
}

/**
 * Return HTML for a view in a field.
 *
 * @see views_embed_view()
 */
function theme_embeddedviewfield_formatter_default($variables) {
  $element = $variables['element'];

  return $element['#view']->preview($element['#view_display'], $element['#view_arguments']);
}

/**
 * Implements hook_field_widget_info().
 */
function embeddedviewfield_field_widget_info() {
  return array(
    'embeddedviewfield_select' => array(
      'label' => 'Select List',
      'field types' => array('embeddedviewfield'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function embeddedviewfield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // @todo Core: Provide a solid identifier in field_ui_default_value_widget().
  if (isset($form['#type']) && $form['#type'] == 'fieldset') {
    $view_name = isset($items[$delta]['view_name']) ? $items[$delta]['view_name'] : NULL;
    $element['view_name'] = array(
      '#type' => 'select',
      '#title' => 'View',
      '#options' => _embeddedviewfield_get_views($field, $instance),
      '#empty_value' => '',
      '#default_value' => $view_name,
      '#required' => TRUE,
      '#ajax' => array(
        'event' => 'change',
        'callback' => 'embeddedviewfield_display_option_ajax',
        'wrapper' => 'display-wrapper',
      ),
    );

    $element['display_name'] = array(
      '#type' => 'select',
      '#title' => 'Display',
      '#options' => array(),
      '#empty_value' => '',
      '#default_value' => isset($items[$delta]['display_name']) ? $items[$delta]['display_name'] : NULL,
      '#required' => TRUE,
      '#prefix' => '<div id="display-wrapper">',
      '#suffix' => '</div>',
    );

    $element['vargs'] = array(
      '#type' => 'textfield',
      '#title' => t('Arguments'),
      '#default_value' => isset($items[$delta]['vargs']) ? $items[$delta]['vargs'] : NULL,
      '#access' => TRUE,
      '#description' => t('A comma separated list of arguments to pass to the selected view.'),
    );

    // Provide token help.
    if (module_exists('token')) {
      $element['vargs']['#description'] .= t('Any token from the placeholder token list may be used as an argument.');
      // Only show token help for first value or in field settings form.
      if ($element['#delta'] === 0) {
        $element['token_help'] = array(
          '#type' => 'fieldset',
          '#title' => t('Placeholder tokens'),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
        );
        $element['token_help']['tokens'] = array(
          '#theme' => 'token_tree',
          '#token_types' => array($element['#entity_type']),
          '#global_types' => TRUE,
        );
      }
    }
    else {
      $element['vargs']['#description'] .= t('Enable the %token module to see a complete list of tokens that may be used as arguments.', array('%token' => t('Token')));
    }

    $element['vargs']['#description'] .= t('(Wrap arguments containing commas in double quotes and replace double quotes in arguments with a pair of double quotes.)');
  }
  else {
    $element = field_view_field($element['#entity_type'], $element['#entity'], $element['#field_name']);
    $element['#label_display'] = 'hidden';
  }
  return $element;
}

/**
 * Returns a select options list of views displays of enabled views.
 */
function _embeddedviewfield_potential_references($field, $instance) {
  // Retrieve all currently available views.
  $views = views_get_enabled_views();
  $options = array();
  foreach ($views as $view) {
    foreach ($view->display as $display) {
      $options[$view->name . '|' . $display->id] = $view->name . ' - ' . $display->display_title;
    }
  }
  return $options;
}

/**
 * Perform argument replacement.
 */
function _embeddedviewfield_get_view_args($vargs, $entity_type, $entity) {
  $args = array();

  if (!empty($vargs)) {
    $pos = 0;
    while ($pos < strlen($vargs)) {
      $found = FALSE;
      // If string starts with a quote.
      if (strpos($vargs, '"', $pos) === $pos) {
        // Start after quote and get everything before next quote.
        if (($quote = strpos($vargs, '"', ++$pos)) !== FALSE) {
          // Skip pairs of quotes.
          while (!(($ql = strspn($vargs, '"', $quote)) & 1)) {
            $quote = strpos($vargs, '"', $quote + $ql);
          }
          $args[] = str_replace('""', '"', substr($vargs, $pos, $quote + $ql - $pos - 1));
          $pos = $quote + $ql + 1;
          $found = TRUE;
        }
      }
      elseif (($comma = strpos($vargs, ',', $pos)) !== FALSE) {
        // Otherwise, get everything before next comma.
        $args[] = substr($vargs, $pos, $comma - $pos);
        // Skip to after comma and repeat.
        $pos = $comma + 1;
        $found = TRUE;
      }
      if (!$found) {
        $args[] = substr($vargs, $pos);
        $pos = strlen($vargs);
      }
    }

    $token_data = array();
    list($entity_id) = entity_extract_ids($entity_type, $entity);
    if (!empty($entity_id)) {
      $entities = entity_load($entity_type, array($entity_id));
      $token_data = array($entity_type => $entities[$entity_id]);
    }
    foreach ($args as $key => $value) {
      $args[$key] = token_replace($value, $token_data);
    }
  }

  return $args;
}

/**
 * Implements hook_content_migrate_instance_alter().
 */
function embeddedviewfield_content_migrate_instance_alter(&$instance_value, $field_value) {
  switch ($field_value['type']) {
    case 'embeddedviewfield':
      // Change formatter names to be prefixed with 'embeddedviewfield_'.
      foreach ($instance_value['display'] as $context => $settings) {
        if (strpos('embeddedviewfield_', $settings['type']) !== 0) {
          $instance_value['display'][$context]['type'] = 'embeddedviewfield_' . $settings['type'];
        }
      }
      // Migrate legacy tokens in CCK fields to core tokens in D7 fields.
      if (!empty($instance_value['default_value'])) {
        foreach ($instance_value['default_value'] as $key => $default) {
          if (!empty($default['vargs'])) {
            $instance_value['default_value'][$key]['vargs'] = _embeddedviewfield_migrate_legacy_tokens($default['vargs']);
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_content_migrate_data_record_alter().
 */
function embeddedviewfield_content_migrate_data_record_alter(&$record, $field) {
  switch ($field['type']) {
    case 'embeddedviewfield':
      // Migrate legacy tokens in CCK fields to core tokens in D7 fields.
      $vargs_field_name = $field['field_name'] . '_vargs';
      if (!empty($record[$vargs_field_name])) {
        $record[$vargs_field_name] = _embeddedviewfield_migrate_legacy_tokens($record[$vargs_field_name]);
      }
      break;
  }
}

/**
 * Substitute core tokens for legacy tokens (%nid, %author, %viewer) in text.
 */
function _embeddedviewfield_migrate_legacy_tokens($text) {
  return strtr($text, array(
    '%nid' => '[node:nid]',
    '%author' => '[node:author]',
    '%viewer' => '[current-user:uid]',
  ));
}

/**
 * Returns a select options list of views displays of enabled and allowed views.
 */
function _embeddedviewfield_get_views_displays($view_name) {
  if (!$view_name) {
    return array();
  }

  // Retrieve all currently available displays.
  $view = views_get_view($view_name);
  $options = array();
  if (!empty($view->display) && is_array($view->display)) {
    foreach ($view->display as $display) {
      $display_name = empty($display->display_title) ? $display->id : t('@human-name (@machine-name)', array(
        '@machine-name' => $display->id,
        '@human-name' => $display->display_title,
      ));
      $options[$display->id] = $display_name;
    }
  }
  return $options;
}

/**
 * Returns a select options list of views displays of enabled and allowed views.
 */
function _embeddedviewfield_get_views($field, $instance) {
  // Retrieve all currently available views.
  $views = views_get_enabled_views();
  $options = array();
  if (is_array($views) && !empty($views)) {
    foreach ($views as $view) {
      $view_name = empty($view->human_name) ? $view->name : t('@human-name (@machine-name)', array(
        '@machine-name' => $view->name,
        '@human-name' => $view->human_name,
      ));
      $options[$view->name] = $view_name;
    }
  }
  return $options;
}

/**
 * Disable multiple cardinality - allow only one view by field.
 */
function embeddedviewfield_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if ($form['#field']['type'] == 'embeddedviewfield') {
    $form['field']['cardinality']['#options'] = array(1 => 1);
    $form['field']['cardinality']['#default_value'] = 1;
  }
  if (!empty($form['#field']['type']) && $form['#field']['type'] == 'embeddedviewfield') {
    $field_name = $form['instance']['field_name']['#value'];
    $view_name = isset($form_state['values'][$field_name][LANGUAGE_NONE][0]['view_name']) ? $form_state['values'][$field_name][LANGUAGE_NONE][0]['view_name'] : $form['instance']['default_value_widget'][$field_name][LANGUAGE_NONE][0]['view_name']['#default_value'];
    $form['instance']['default_value_widget'][$field_name][LANGUAGE_NONE][0]['display_name']['#options'] = _embeddedviewfield_get_views_displays($view_name);
  }
}
