<?php

/**
 * @file
 * This module provides an addressfield plugin to validate an address using the
 * Fedex address validation service.
 */

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function fedex_address_validation_ctools_plugin_directory($module, $plugin) {
  if ($module == 'addressfield') {
    return 'plugins/' . $plugin;
  }
}

/**
 * FAPI widget validation of an address field using FexEx service.
 */
function fedex_address_validation_element_auto_validate(&$element, &$form_state, $form) {
  // Validate the element.
  $return = _fedex_address_validation_element_validate($element, $form_state, $form, TRUE);

  // Display an error message.
  if (isset($return['message'])) {
    drupal_set_message($return['message'], 'error');
  }
}

/**
 * FAPI widget validation of an address field, user submit selection.
 */
function fedex_address_validation_element_submit_validate(&$element, &$form_state, $form) {
  // Check if the user presses one of our buttons. Check 'clicked_button' to
  // make sure this was a button click and not a form regeneration due to
  // selecting a different country.
  if (isset($form_state['clicked_button']) && $form_state['input']['op'] != $form_state['values']['op']) {
    // Make sure that no other values have changed.
    $form_values = drupal_array_get_nested_value($form_state['values'], $element['#parents']);
    $form_input = drupal_array_get_nested_value($form_state['input'], $element['#parents']);
    foreach ($form_input as $key => $value) {
      if ($form_values[$key] != $value) {
        $changed = TRUE;
        break;
      }
    }
    if (empty($changed)) {
      // If the user wants to use the suggested values, then save those values.
      if ($form_state['input']['op'] == t('Yes, Use Suggested and Submit')) {
        // The JSON double-quote strings may be escaped in the #value,.
        $proposed = drupal_json_decode(str_replace('\"', '"', $form_input['proposed']));
        foreach ($proposed as $key => $value) {
          $form_values[$key] = $value;
        }
        drupal_array_set_nested_value($form_state['values'], $element['#parents'], $form_values);
      }
      else {
        drupal_set_message(t('Saving <em>unconfirmed</em> delivery address'));
      }

      // No further validation is needed.
      return;
    }
  }

  // Validate the element.
  $return = _fedex_address_validation_element_validate($element, $form_state, $form, FALSE);

  // Check for an imperfect match and store this form id so we can modify
  // the form later on.
  if (isset($return['proposed']) || $return['confirmed'] == 'UNCONFIRMED') {
    $form = &$form_state['complete form'];
    $actions = &$form['actions'];
    $submit = &$actions['submit'];
    if (isset($return['message'])) {
      $message = t('FedEx can not confirm your address but suggests %suggested. Is this address correct?', array('%suggested' => implode(', ', $return['proposed'])));
      $proposed = array(
        '#value' => t('Yes, Use Suggested and Submit'),
        '#weight' => $submit['#weight'] - 0.01,
        '#id' => 'edit-proposed',
      );
      $actions['proposed-submit'] = $proposed + $submit;
      $actions['#sorted'] = FALSE;
      $submit['#value'] = t('No, Use Provided Address and Submit');
    }
    else {
      $message = t('FedEx cannot confirm your address. Is this address correct?');
      $submit['#value'] = t('Yes, Submit');
      $error_element['#parents'] = $element['#parents'];
      $error_element['#parents'][] = 'thoroughfare';
      form_error($error_element, $message);
    }
    $actions['#prefix'] = '<div class="fedex-proposed">' . '<div class="fedex-message">' . $message . '</div>';
    $actions['#suffix'] = '</div>';
    $actions['#attached']['css'][] = drupal_get_path('module', 'fedex_address_validation') . '/css/fedex-address-validation.css';

    // Store the proposed value in a hidden form field that was added in
    // fedex_address_validation_format_submit_callback().
    if (isset($return['proposed'])) {
      $element['proposed']['#value'] = drupal_json_encode($return['proposed']);
    }
  }
}

/**
 * FAPI widget validation of an address field using FexEx service.
 */
function _fedex_address_validation_element_validate(&$element, &$form_state, $form, $update) {
  // Get the value.
  $value = drupal_array_get_nested_value($form_state['values'], $element['#parents']);

  // Skip validation if any of the required values are empty.
  // We really should do required field validation first, but ...
  $field_map = array(
    'StreetLines' => array('street_block', 'thoroughfare'),
    'City' => array('locality_block', 'locality'),
    'StateOrProvinceCode' => array('locality_block', 'administrative_area'),
    'PostalCode' => array('locality_block', 'postal_code'),
    'CountryCode' => array('country'),
  );
  foreach ($field_map as $drupal_fields) {
    $drupal_field = end($drupal_fields);
    if (empty($value[$drupal_field])) {
      return;
    }
  }

  // Validate the address with FedEx.
  $items[0] = $value;
  $return = fedex_address_validation_validate($items);
  $return['original'] = $value;
  $return['field_map'] = $field_map;

  // Save the validation return value.
  $parents = $element['#parents'];
  $parents[] = 'fedex';
  drupal_array_set_nested_value($form_state['values'], $parents, $return);

  // Check for errors.
  if (isset($return['HighestSeverity']) && ($return['HighestSeverity'] == 'ERROR' || $return['HighestSeverity'] == 'FAILURE')) {
    form_error($element, $return['Notifications']->Message);
    return;
  }

  // Check for an imperfect match.
  if (empty($return['AddressResults']->ProposedAddressDetails)) {
    $return['confirmed'] = 'UNCONFIRMED';
  }
  else {
    $proposed = $return['AddressResults']->ProposedAddressDetails;
    $return['confirmed'] = $proposed->DeliveryPointValidation;
    if ($proposed->Score != 100) {
      // Highlight and change fields with proposed changes.
      foreach ($field_map as $fedex_field => $drupal_fields) {
        if (!empty($proposed->Address->$fedex_field)) {
          $fedex_value = $proposed->Address->$fedex_field;
          $drupal_field = end($drupal_fields);
          $return['proposed'][$drupal_field] = $fedex_value;
          if (strtoupper($return['original'][$drupal_field]) != strtoupper($fedex_value)) {
            // Highlight the field with the error.
            // Don't use form_set_error() API function because that will display
            // the dsm error multiple times. We want to highlight the fields,
            // but let the invoking function decide if an error should be
            // displayed, and also allow it to display it only once.
            if (!isset($return['message'])) {
              $return['message'] = is_array($proposed->Changes) ? implode(' ', $proposed->Changes) : $proposed->Changes;
              $return['message'] = ucwords(str_replace('_', ' ', strtolower($return['message'])));
              $form_set_error = &drupal_static('form_set_error', array());
              $base_name = implode('][', $element['#parents']);
            }
            $name = $base_name . '][' . $drupal_field;
            $form_set_error[$name] = $return['message'];

            // If requested, update the form value.
            if ($update) {
              drupal_array_set_nested_value($element, array_merge($drupal_fields, array('#value')), $fedex_value);
            }
          }
        }
      }
    }
  }
  return $return;
}

/**
 * Check if a address is valid.
 *
 * Constructs and executes a SOAP AddressValidationService request.
 *
 * This was copied and modified from http://drupal.org/project/uc_fedex.
 *
 * Returns Address Validation information.
 *
 * SOAP call parameters are set in the order they appear in the WSDL file.
 * Associative array of DOM returned.
 *
 * @param $address
 *   Object containing address_field.module address data.
 * @param $options
 *   Array of options.
 *
 * @return
 *   Associative array mirroring contents of SOAP object returned from server;
 *   or FALSE if one of the credentials is missing.
 */
function fedex_address_validation_validate($addresses, $options = array()) {
  // Get the default options.
  $environment = variable_get('fedex_address_validation_environment', 'test');
  $options += array(
    'id' => $GLOBALS['user']->uid,
    'key' => variable_get("fedex_address_validation_${environment}_key"),
    'password' => variable_get("fedex_address_validation_${environment}_password"),
    'account' => variable_get("fedex_address_validation_${environment}_account"),
    'meter' => variable_get("fedex_address_validation_${environment}_meter"),
    'street_accuracy' => variable_get('fedex_address_validation_street_accuracy', 'LOOSE'),
    'directional_accuracy' => variable_get('fedex_address_validation_directional_accuracy', 'LOOSE'),
  );

  // Return if not installed properly.
  if (!class_exists('SoapClient')) {
    trigger_error(t('SoapClient not installed.'), E_USER_ERROR);
    return;
  }
  foreach (array('key', 'password', 'account', 'meter') as $required) {
    if (empty($options[$required])) {
      trigger_error(t('FedEx Address Validation not configured properly.'), E_USER_ERROR);
      return FALSE;
    }
  }

  // Set address validation Request v2.0.0 in the request.
  $request['Version'] = array(
    'ServiceId' => 'aval',
    'Major' => '2',
    'Intermediate' => '0',
    'Minor' => '0',
  );

  // Set the FedEx user key and password in the request.
  $request['WebAuthenticationDetail'] = array(
    'UserCredential' => array(
      'Key' => $options['key'],
      'Password' => $options['password'],
    )
  );

  // Set FedEx account and meter number in the request.
  $request['ClientDetail'] = array(
    'AccountNumber' => $options['account'],
    'MeterNumber' => $options['meter'],
  );

  // Set the timestamp in the request.
  $request['RequestTimestamp'] = date('c', REQUEST_TIME);

  // Set the transaction id.
  $request['TransactionDetail']['CustomerTransactionId'] = $options['id'];

  // Set address accuracy settings in the request.
  $request['Options'] = array(
    'VerifyAddresses' => 1,
    'CheckResidentialStatus' => 1,
    'MaximumNumberOfMatches' => 1,
    'StreetAccuracy' => $options['street_accuracy'],
    'DirectionalAccuracy' => $options['directional_accuracy'],
    'CompanyNameAccuracy' => 'LOOSE',
    'ConvertToUpperCase' => 1,
    'RecognizeAlternateCityNames' => 1,
    'ReturnParsedElements' => 1
  );

  // Set the address in the request.
  foreach ($addresses as $address) {
    $request['AddressesToValidate'][] = array(
      'AddressId' => $address['name_line'],
      'Address' => array(
        'StreetLines' => array($address['thoroughfare'], $address['premise']),
        'City' => $address['locality'],
        'StateOrProvinceCode' => $address['administrative_area'],
        'PostalCode' => $address['postal_code'],
        'CountryCode' => $address['country'],
      ),
    );
  }

  // Set up SOAP call.
  // Allow tracing so details of request can be retrieved for error logging
  $wsdl_dir = variable_get('fedex_address_validation_wsdl_dir');
  if (!$wsdl_dir) {
    $wsdl_dir = drupal_get_path('module', 'fedex_address_validation');
  }
  $wsdl_path = "$wsdl_dir/AddressValidationService_v2-$environment.wsdl";
  $client = new SoapClient($wsdl_path, array('trace' => 1));

  // Prevent the 3rd party service from delaying for too long.
  $sem_max = variable_get('fedex_address_validation_max_concurrent', 10);
  if ($sem_max) {
    // Use a 60 second semaphore timeout because SoapClient() has
    // a default_socket_timeout set only in php.ini, of 60 seconds.
    $sem_key = flood_sem_get('fedex_address_validation', $sem_max, 60);
    if (!$sem_key) {
      return;
    }
  }

  // Send the SOAP request to the FedEx server
  try {
    $response = (array) $client->addressValidation($request);
  }
  catch (SoapFault $exception) {
    $response['error'] = 'Exception: ' . $exception->getMessage();
  }

  // Release the semaphore.
  if ($sem_max) {
    flood_sem_release($sem_key);
  }

  // Return the SOAP response.
  return $response;
}

/**
 * Implements hook_field_attach_presave().
 *
 * Store additional address fields serialized in addressfield data column.
 */
function fedex_address_validation_field_attach_presave($entity_type, $entity) {
  $address_fields = fedex_address_validation_addressfield_field_names();
  foreach ($address_fields as $field_name) {
    if (isset($entity->$field_name)) {
      if (!isset($default_fields)) {
        $default_fields = array_keys(addressfield_default_values());
        $default_fields[] = 'element_key';
      }
      $language = isset($entity->language) ? $entity->language : LANGUAGE_NONE;
      foreach ($entity->{$field_name}[$language] as $delta => $field_values) {
        $data = array();
        foreach ($field_values as $field_key => $field_value) {
          // Compare fields with addressfield default fields and store any additional fields in data.
          if (!in_array($field_key, $default_fields)) {
            $data[$field_key] = $field_value;
          }
        }
        if (!empty($data)) {
          $entity->{$field_name}[$language][$delta]['data'] = serialize($data);
        }
      }
    }
  }
}

/**
 * Implements hook_field_attach_load().
 *
 * Load and set additional addressfield field values from serialized data column.
 */
function fedex_address_validation_field_attach_load($entity_type, $entities, $age, $options) {
  $address_fields = fedex_address_validation_addressfield_field_names();
  foreach ($entities as $key => $entity) {
    foreach ($address_fields as $field_name) {
      if (isset($entity->{$field_name})) {
        $language = isset($entity->language) ? $entity->language : LANGUAGE_NONE;
        if (!isset($entity->{$field_name})) {
          continue;
        }
        foreach (array_keys($entity->{$field_name}[$language]) as $delta) {
          if (!empty($entity->{$field_name}[$language][$delta]['data'])) {
            // Unserialize data, else skip if string.
            if ($data = unserialize($entity->{$field_name}[$language][$delta]['data'])) {
              foreach ($data as $field_key => $field_value) {
                // Store unserialized data values in additional fields.
                $entities[$key]->{$field_name}[$language][$delta][$field_key] = $field_value;
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Returns an array of the field names of any address_fields.
 */
function fedex_address_validation_addressfield_field_names() {
  static $field_names;
  if (!isset($field_names)) {
    $field_names = db_query("SELECT field_name FROM {field_config} WHERE type = 'addressfield'")->fetchCol();
  }
  return $field_names;
}

