<?php
/**
 * @file
 *
 * Contains the main codebase for module
 */

/**
 * Implements hook_ctools_plugin_api
 */
function calameo_ctools_plugin_api($module, $api) {
  if ($module == 'calameo' && $api == 'calameo') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory
 */
function calameo_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin
  if ($type =='export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Implements hook_permission
 */
function calameo_permission() {
  return array(
    'administer calameo accounts' => array(
      'title' => t('Administer Calameo accounts'),
      'description' => t('Add, edit, and delete exportable Calameo accounts from the site'),
    ),
  );
}

/**
 * Generates a watchdog log entry during debugging and tries to call dpm from
 * the devel module; when debugging is disabled, nothing happens.
 *
 * Set the config variable calameo_debug = TRUE to generate log output
 */
function _calameo_dbg($msg, $vars = array(), $link = NULL) {
  if (variable_get('calameo_debug', FALSE)) {
    if (!$vars) {
      $vars = array();
    }
    watchdog('calameo', (is_array($msg) || is_object($msg)) ? '<pre>' . print_r($msg, TRUE) . '</pre>' : $msg, $vars, WATCHDOG_DEBUG, $link);
    if (function_exists('dpm')) {
      dpm((is_array($msg) || is_object($msg)) ? $msg : t($msg, $vars));
    }
  }
}

/**
 * Generates a watchdog log entry during execution of module
 */
function _calameo_log($msg, $vars = NULL, $severity = WATCHDOG_INFO, $link = NULL) {
  // Catch passed-in objects or arrays and dump them accordingly
  if (!is_string($msg)) {
    $msg = print_r($msg, TRUE);
  }
  watchdog('calameo', $msg, $vars, $severity, $link);
}

/**
 * Util function to fetch all Calameo accounts
 */
function _calameo_accounts() {
  ctools_include('export');
  $accounts = ctools_export_crud_load_all('calameo_accounts');
  return $accounts;
}

/**
 * Util function to fetch all Calameo books for an account
 */
function _calameo_account_books($account) {
  ctools_include('export');
  $books = array();

  // Accept either an account object or name
  if (!is_object($account)) {
    $account = ctools_export_crud_load('calameo_accounts', $account);
  }

  if ($account) {
    // Check to see if we have this cached back already
    $cid = implode(':', array(__FUNCTION__, $account->name));
    $cached = cache_get($cid);

    if (FALSE === $cached) {
      $calameo = new Calameo($account);
      $resp = $calameo->fetchAccountBooks('Name');
      if (!empty($resp['content']['items'])) {
        $books = $resp['content']['items'];
      }
      cache_set($cid, $books);
    }
    else {
      $books = $cached->data;
    }
  }

  return $books;
}

/**
 * Util function to fetch Calameo book details for an account
 */
function _calameo_account_book($account, $book_id) {
  ctools_include('export');
  $book = NULL;

  // Accept either an account object or name
  if (!is_object($account)) {
    $account = ctools_export_crud_load('calameo_accounts', $account);
  }
  if ($account) {
    // Check to see if we have this cached back already
    $cid = implode(':', array(__FUNCTION__, $account->name, $book_id));
    $cached = cache_get($cid);
    if (FALSE === $cached) {
      $calameo = new Calameo($account);
      $resp = $calameo->getBookInfos($book_id);
      if (!empty($resp['content'])) {
        $book = $resp['content'];
      }
      cache_set($cid, $book);
    }
    else {
      $book = $cached->data;
    }
  }

  return $book;
}

/**
 * Implements hook_field_info
 */
function calameo_field_info() {
  $items = array();

  $items['calameo_account_book'] = array(
    'label' => t('Calameo publication'),
    'description' => t('This field references a publication hosted by the Calameo service'),
    'settings' => array(
      'account' => NULL,
    ),
    'instance_settings' => array(
    ),
    'default_widget' => 'calameo_account_book',
    'default_formatter' => 'calameo_account_book_text_link',
  );

  return $items;
}

/**
 * Implements hook_field_is_empty
 */
function calameo_field_is_empty($item, $field) {
  if ('calameo_account_book' == $field['type']) {
    return empty($item['book_id']);
  }

  return FALSE;
}

/**
 * Implements hook_field_instance_settings_form
 */
function calameo_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  if ('calameo_account_book' == $field['type']) {
    $form = array();

    $accounts = _calameo_accounts();
    $options = array();
    foreach ($accounts as $name => $account) {
      $options[$name] = $account->human_name;
    }

    $form['account'] = array(
      '#type' => 'select',
      '#title' => t('Calameo account'),
      '#description' => t('Please select a Calameo account to pull publications from. These are managed under !url', array('!url' => l('Structure > Calameo', 'admin/structure/calameo'))),
      '#default_value' => $settings['account'],
      '#options' => $options,
      '#required' => TRUE,
      '#empty_option' => t('-- Select account --'),
    );

    return $form;
  }
}

/**
 * Implements hook_field_widget_info
 */
function calameo_field_widget_info() {
  $items = array();

  $items['calameo_account_book'] = array(
    'label' => t('Publication select'),
    'field types' => array('calameo_account_book'),
    'settings' => array(),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      'default value' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );

  return $items;
}

/**
 * Implements hook_field_widget_form
 */
function calameo_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $settings = $field['settings'];
  $base = $element;

  if ('calameo_account_book' == $instance['widget']['type']) {
    $books = _calameo_account_books($settings['account']);
    $options = array();
    foreach ($books as $book) {
      $options[$book['ID']] = $book['Name'];
    }

    $element['book_id'] = $base + array(
      '#type' => 'select',
      '#title' => t('Publication'),
      '#description' => t('Please select a Calameo publication to embed'),
      '#default_value' => !empty($items[$delta]['book_id']) ? $items[$delta]['book_id'] : NULL,
      '#options' => $options,
      '#empty_option' => t('-- Select publication --'),
      '#empty_value' => NULL,
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_info
 */
function calameo_field_formatter_info() {
  $items = array();

  $base_link_settings = array(
    'target' => '_blank',
  );

  $items['calameo_book_link_text'] = array(
    'label' => t('Display name linked to viewer'),
    'description' => t('Display the publication name linked to the Calameo viewer page'),
    'field types' => array('calameo_account_book'),
    'settings' => $base_link_settings,
  );
  $items['calameo_book_link_thumbnail'] = array(
    'label' => t('Display thumbnail linked to viewer'),
    'description' => t('Display the publication thumbnail image linked to the Calameo viewer page'),
    'field types' => array('calameo_account_book'),
    'settings' => $base_link_settings,
  );
  $items['calameo_book_link_picture'] = array(
    'label' => t('Display cover linked to viewer'),
    'description' => t('Display the publication cover image linked to the Calameo viewer page'),
    'field types' => array('calameo_account_book'),
    'settings' => $base_link_settings,
  );
  $items['calameo_book_embed'] = array(
    'label' => t('Display as embedded viewer'),
    'description' => t('Display the publication in an embedded Calameo viewer'),
    'field types' => array('calameo_account_book'),
    'settings' => array(
      'width' => 550,
      'height' => 356,
    ),
  );

  return $items;
}

/**
 * Implements hook_field_formatter_settings_form
 */
function calameo_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  switch ($display['type']) {
    case 'calameo_book_link_text':
    case 'calameo_book_link_thumbnail':
    case 'calameo_book_link_picture':
      $element['target'] = array(
        '#type' => 'select',
        '#title' => t('Select target for link'),
        '#options' => array(
          '_blank' => t('New window or tab'),
          '_self' => t('Same frame as it was clicked'),
          '_parent' => t('Parent frame'),
          '_top' => t('Full body of the window'),
        ),
        '#default_value' => $settings['target'],
      );
      break;

    case 'calameo_book_embed':
      $element['width'] = array(
        '#type' => 'textfield',
        '#title' => t('Width of embedded viewer'),
        '#default_value' => $settings['width'],
        '#element_validate' => array('element_validate_number'),
        '#required' => TRUE,
      );
      $element['height'] = array(
        '#type' => 'textfield',
        '#title' => t('Height of embedded viewer'),
        '#default_value' => $settings['height'],
        '#element_validate' => array('element_validate_number'),
        '#required' => TRUE,
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary
 */
function calameo_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';

  switch ($display['type']) {
    case 'calameo_book_link_text':
    case 'calameo_book_link_thumbnail':
    case 'calameo_book_link_picture':
      $target = array(
        '_blank' => t('New window or tab'),
        '_self' => t('Same frame as it was clicked'),
        '_parent' => t('Parent frame'),
        '_top' => t('Full body of the window'),
      );
      $summary = t('Link target: @target', array('@target' => $target[$settings['target']]));
      break;

    case 'calameo_book_embed':
      $summary = t('Embed width: @width px, height: @height px', array('@width' => $settings['width'], '@height' => $settings['height']));
      break;
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_prepare_view
 */
function calameo_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  $field_settings = $field['settings'];

  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      if (!empty($item['book_id'])) {
        $items[$id][$delta]['book'] = _calameo_account_book($field_settings['account'], $item['book_id']);
      }
    }
  }
}

/**
 * Implements hook_field_formatter_view
 */
function calameo_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $disp_settings = $display['settings'];
  $field_settings = $field['settings'];

  switch ($display['type']) {
    case 'calameo_book_link_text':
    case 'calameo_book_link_thumbnail':
    case 'calameo_book_link_picture':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => $display['type'],
          '#book' => $item['book'],
          '#target' => $disp_settings['target'],
        );
      }
      break;

    case 'calameo_book_embed':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => $display['type'],
          '#book' => $item['book'],
          '#embed_width' => $disp_settings['width'],
          '#embed_height' => $disp_settings['height'],
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_theme
 */
function calameo_theme($existing, $type, $theme, $path) {
  $items = array();

  $base = array(
    'path' => "{$path}/theme",
    'render element' => 'element',
  );

  $items['calameo_book_link_text'] = array(
    'template' => 'calameo-book-link-text',
  ) + $base;

  $items['calameo_book_link_thumbnail'] = array(
    'template' => 'calameo-book-link-thumbnail',
  ) + $base;

  $items['calameo_book_link_picture'] = array(
    'template' => 'calameo-book-link-picture',
  ) + $base;

  $items['calameo_book_embed'] = array(
    'template' => 'calameo-book-embed',
  ) + $base;

  return $items;
}

/**
 * Preprocess callback for calameo_book_link_text
 */
function calameo_preprocess_calameo_book_link_text(&$vars) {
  _calameo_preprocess_calameo_book($vars);
  _calameo_preprocess_calameo_book_link($vars);
}

/**
 * Preprocess callback for calameo_book_link_thumbnail
 */
function calameo_preprocess_calameo_book_link_thumbnail(&$vars) {
  _calameo_preprocess_calameo_book($vars);
  _calameo_preprocess_calameo_book_link($vars);
}

/**
 * Preprocess callback for calameo_book_link_picture
 */
function calameo_preprocess_calameo_book_link_picture(&$vars) {
  _calameo_preprocess_calameo_book($vars);
  _calameo_preprocess_calameo_book_link($vars);
}

/**
 * Preprocess callback for calameo_book_embed
 */
function calameo_preprocess_calameo_book_embed(&$vars) {
  _calameo_preprocess_calameo_book($vars);

  // Display-specific vars
  $vars['embed_width'] = $vars['element']['#embed_width'];
  $vars['embed_height'] = $vars['element']['#embed_height'];
}

/**
 * Common base preprocess for all book theme callbacks
 */
function _calameo_preprocess_calameo_book(&$vars) {
  // Make book-level values top-level template vars
  $vars += $vars['element']['#book'];

  // Add common image elements
  $vars['ThumbImg'] = theme('image', array(
    'path' => $vars['ThumbUrl'],
    'alt' => $vars['Description'],
    'title' => $vars['Name'],
  ));
  $vars['PictureImg'] = theme('image', array(
    'path' => $vars['PictureUrl'],
    'alt' => $vars['Description'],
    'title' => $vars['Name'],
  ));
}

/**
 * Common base preprocess for all book theme callbacks that generate links
 */
function _calameo_preprocess_calameo_book_link(&$vars) {
  $vars['target'] = $vars['element']['#target'];
  $attrs = array(
    'target' => $vars['target'],
  );

  // Add common viewer link elements
  $vars['NameViewerLink'] = l($vars['Name'], $vars['ViewUrl'], array('attributes' => $attrs));
  $vars['ThumbViewerLink'] = l($vars['ThumbImg'], $vars['ViewUrl'], array('html' => TRUE, 'attributes' => $attrs));
  $vars['PictureViewerLink'] = l($vars['PictureImg'], $vars['ViewUrl'], array('html' => TRUE, 'attributes' => $attrs));

  // Add common publication link elements
  $vars['NamePublicLink'] = l($vars['Name'], $vars['PublicUrl'], array('attributes' => $attrs));
  $vars['ThumbPublicLink'] = l($vars['ThumbImg'], $vars['PublicUrl'], array('html' => TRUE, 'attributes' => $attrs));
  $vars['PicturePublicLink'] = l($vars['PictureImg'], $vars['PublicUrl'], array('html' => TRUE, 'attributes' => $attrs));
}
