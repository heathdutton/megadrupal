<?php

/**
 * @file
 * Support Nag database schema.
 *
 * Copyright (c) 2009.
 *  Jeremy Andrews <jeremy@tag1consulting.com>
 */

/**
 * Support Nag database schema.
 */
function support_nag_schema() {
  $schema['support_nags'] = array(
    'description' => 'The support_nags table stores individual support nag actions.',
    'fields' => array(
      'nagid' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'action' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Nag action to perform.',
      ),
      'clients' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'List of all clients affected by this nag.',
      ),
      'states' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'List of all states affected by this nag.',
      ),
      'priorities' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'List of all priorities affected by this nag.',
      ),
      'assigned' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'List of all assigned users affected by this nag.',
      ),
      'mailto' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Notification recipients.',
      ),
      'subject' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Notification subject.',
      ),
      'message' => array(
        'type' => 'text',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Notification or update message text.',
      ),
      'frequency' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => 'Frequency to send notification or update ticket.',
      ),
      'last' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => 'Last notification or update.',
      ),
      'count' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 0,
        'description' => 'Total notifications sent or updates made.',
      ),
    ),
    'primary key' => array('nagid'),
  );
  return $schema;
}

function support_nag_install() {
  // Check if we're upgrading a previous jobtrack installation.
  if (db_table_exists('jobtrack_nags')) {
    $ret = array();
    db_rename_table($ret, 'jobtrack_nags', 'support_nags');
    cache_clear_all();
    menu_rebuild();
  }
}

/**
 * Replace the old 6.x style tokens with the new style.
 */
function _support_nag_rewrite_message($text) {
  $replacements = array(
    '[tickets]' => '[support-notification:tickets]',
    '[tickets-per-client]' => '[support-notification:tickets-per-client]',
    '[tickets-per-priority]' => '[support-notification:tickets-per-priority]',
    '[tickets-per-state]' => '[support-notification:tickets-per-state]',

    '[current-state]' => '[support-autoclose:current-state]',
    '[closed-state]' => '[support-autoclose:closed-state]',
    '[priority]' => '[support-autoclose:priority]',
    '[client]' => '[support-autoclose:client]',
    '[inactive-time]' => '[support-autoclose:inactive-time]',
    '[inactive-limit]' => '[support-autoclose:inactive-limit]',
    '[owner-name]' => '[support-autoclose:owner-name]',
    '[owner-email]' => '[support-autoclose:owner-email]',

    '[site-mail]' => '[site:mail]',
    '[site-url]' => '[site:url]',
  );
  $tokens = array_keys($replacements);
  $values = array_values($replacements);
  return str_replace($tokens, $values, $text);
}

/**
 * Convert tokens to new format.
 */
function support_nag_update_7000() {
  $result = db_query('SELECT nagid, subject, message from {support_nags}');
  foreach ($result as $nag) {
    $nag->subject = _support_nag_rewrite_message($nag->subject);
    $nag->message = _support_nag_rewrite_message($nag->message);
    db_update('support_nags')->fields(array(
      'subject' => $nag->subject,
      'message' => $nag->message,
    ))
    ->condition('nagid', $nag->nagid)
    ->execute();
  }
  if (variable_get('support_nag_autoclose_text', FALSE)) {
    variable_set('support_nag_autoclose_text', _support_nag_rewrite_message(variable_get('support_nag_autoclose_text', FALSE)));
  }
}