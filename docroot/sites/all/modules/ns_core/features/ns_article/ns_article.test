<?php
/**
 * @file
 * tests for ns_article
 */

/**
 * Base class for article tests.
 */
class NSArticleTestCase extends NSContentProviderTestCase {
  /**
   * Asserts that the article node form is sane.
   * @param array $values
   *   An array of values that should be checked to exist.
   */
  function assertArticleNodeForm(array $values = NULL) {
    $this->assertField('edit-field-ns-article-body-und-0-value', t('The article body field is present.'));
    $this->assertField('edit-field-ns-article-lead-und-0-value', t('The article lead field is present.'));
    $this->assertField('edit-field-ns-article-kicker-und-0-value', t('The article kicker field is present.'));
    if (module_exists('media')) {
      $this->assertField('field_ns_article_media[und][0][fid]', t('The article media field is present.'));
    }
    else {
      $this->assertField('edit-field-ns-article-media-und-0-upload', t('The article media field is present.'));
    }
    if (isset($values)) {
      foreach ($values as $key => $value) {
        $this->assertFieldByName($key, $value);
      }
    }
    // The contributor field should not be present at this point.
    $this->assertNoField('edit-field-ns-article-contributor-und-0-target-id', t('The article contributor field is not present.'));
  }

  /**
   * Get a test article node.
   * @param mixed $related
   *   One related node nid or an array of related node nids that should be inserted into the related articles field.
   * @param int $author
   *   The author of the node. Defaults to anonymous.
   * @return array
   *   An array suitable to save through DrupalWebTestCase::drupalCreateNode().
   */
  protected function getTestNode($related = FALSE, $author = 0) {
    $node = array();
    $node['uid'] = $author;
    $node['type'] = 'ns_article';
    $node['title'] = $this->randomName();
    $node['status'] = 1;
    $node['field_ns_article_body'] = array(
      'und' => array(
        array(
          'value' => $this->loremIpsum(),
        ),
      ),
    );
    $node['field_ns_article_lead'] = array(
      'und' => array(
        array(
          'value' => $this->loremIpsum(),
        ),
      ),
    );
    $node['field_ns_article_kicker'] = array(
      'und' => array(
        array(
          'value' => $this->randomString(),
        ),
      ),
    );
    if ($related) {
      $related_entities = array();
      if (is_array($related)) {
        foreach ($related as $nid) {
          $related_entities[] = array('target_id' => $nid);
        }
      }
      else {
        $related_entities[] = array('target_id' => $related);
      }
      $node['field_ns_article_related'] = array('und' => $related_entities);
    }
    return $node;
  }

  /**
   * Assert that a test node seems has a proper structure.
   * @param stdClass $node
   *   The node object to test.
   * @param mixed. $related
   *   An array of related nodes or just one node that should be related to the node that is tested.
   */
  public function assertTestNode($node, $related = FALSE) {
    $this->assertTrue(isset($node->field_ns_article_body['und'][0]['value']), t('Body exists'));
    $this->assertTrue(isset($node->field_ns_article_lead['und'][0]['value']), t('Lead exists'));
    $this->assertTrue(isset($node->field_ns_article_kicker['und'][0]['value']), t('Kicker exists'));
    if ($related) {
      if (!is_array($related)) {
        $related = array($related);
      }
      $entries = field_get_items('node', $node, 'field_ns_article_related');
      $this->assertEqual(count($entries), count($related));
      foreach ($entries as $key => $entry) {
        $this->assertEqual($entry['target_id'], $related[$key]);
      }
    }
  }
}

/**
 * Test basic functionality of the NS Article module.
 */
class NSArticleBasicTestCase extends NSArticleTestCase {

  /**
   * Definition.
   */
  public static function getInfo() {
    return array(
      'name' => 'Articles',
      'description' => 'Basic article functionality.',
      'group' => 'NodeStream'
    );
  }

  /**
   * @see DrupalWebTestCase::setUp()
   */
  function setUp() {
    parent::setUp('ns_article', 'media');
  }

  /**
   * Test basic things:
   *  - Is the content type available?
   *  - Do we have all expected fields?
   *  - programatic CRUD.
   */
  function testBasic() {
    $this->assertContentType('ns_article');
    // Get all fields and make sure the fields defined are there.
    $fields = array(
      'field_ns_article_body',
      'field_ns_article_lead',
      'field_ns_article_kicker',
    );
    $this->assertFieldsExisting($fields);
    $node = $this->drupalCreateNode($this->getTestNode());
    $saved_node = node_load($node->nid, NULL, TRUE);
    $this->assertTestNode($saved_node);
  }

  /**
   * Test the article form through the UI.
   */
  function testArticleNodeForm() {
    $editor = $this->createContentEditor(array('ns_article'));
    $this->drupalLogin($editor);
    $this->drupalGet('node/add/ns-article');
    // Assert that everything is in place.
    $this->assertArticleNodeForm();
    // Enable the media module and check that everything still works.
    module_enable(array('media'));
    $this->drupalGet('node/add/ns-article');
    $this->assertArticleNodeForm();
    // Post a basic article.
    $edit = array(
      'title' => $this->randomName(),
      'field_ns_article_body[und][0][value]' => $this->loremIpsum(),
      'field_ns_article_lead[und][0][value]' => $this->loremIpsum(),
      'field_ns_article_kicker[und][0][value]' => $this->randomString(),
    );
    // Go to the article form and check the values.
    $this->drupalPost(NULL, $edit, t('Save'));
    // Get the last node, and go to the edit form.
    $nodes = entity_load('node');
    $current_node = array_pop($nodes);
    $this->drupalGet('node/' . $current_node->nid . '/edit');
    $this->assertArticleNodeForm($edit);
    $this->assertDeleteForm($editor, $current_node->nid);
  }
}

/**
 * Test the contributor extension.
 */
class NSArticleContributorTestCase extends NSArticleTestCase {
  /**
   * Definition.
   */
  public static function getInfo() {
    return array(
      'name' => 'Article bylines',
      'description' => 'Attach contributors as bylines.',
      'group' => 'NodeStream'
    );
  }

  /**
   * @see DrupalWebTestCase::setUp()
   */
  function setUp() {
    parent::setUp('ns_article', 'ns_contributor', 'media', 'references_dialog');
  }

  /**
   * Test the contributor extension.
   */
  function testContributorExtension() {
    // Enable the contributor extension.
    ctools_include('export');
    defaultconfig_optional_save('ns_article', 'field_default_fields', 'node-ns_article-field_ns_article_byline', TRUE);
    // Check that the field exists.
    $this->assertFieldsExisting(array('field_ns_article_byline'));
    $node = $this->drupalCreateNode(array('type' => 'ns_contributor'));
    $reference = "{$node->title} ({$node->nid})";
    $editor = $this->drupalCreateUser(array(
        'access content',
        'create ns_article content',
        'edit own ns_article content',
        'create ns_contributor content',
        'edit own ns_contributor content',
        'access content overview',
        'view own unpublished content',
        'delete own ns_article content',
        'delete own ns_contributor content',
      )
    );
    $this->drupalLogin($editor);
    $this->drupalGet('node/add/ns-article');
    $this->assertField('field_ns_article_byline[und][0][target_id]', t('The byline field is present.'));
    $edit = array(
      'title' => $this->randomName(),
      'field_ns_article_body[und][0][value]' => $this->loremIpsum(),
      'field_ns_article_lead[und][0][value]' => $this->loremIpsum(),
      'field_ns_article_kicker[und][0][value]' => $this->randomString(),
      'field_ns_article_byline[und][0][target_id]' => $reference,
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $created_node = array_pop(entity_load('node'));
    $this->drupalGet('node/' . $created_node->nid . '/edit');
    $this->assertFieldByName('field_ns_article_byline[und][0][target_id]', $reference);
  }
}

/**
 * Test the related article extension.
 */
class NSArticleRelatedTestCase extends NSArticleTestCase {
  /**
   * Definition.
   */
  public static function getInfo() {
    return array(
      'name' => 'Related articles',
      'description' => 'Attach related articles to other articles.',
      'group' => 'NodeStream'
    );
  }

  /**
   * @see DrupalWebTestCase::setUp()
   */
  function setUp() {
    parent::setUp('ns_article', 'references_dialog', 'media');
  }

  /**
   * Test related article extension.
   */
  function testRelatedArticleExtension() {
    $components = defaultconfig_get_components();
    $optional = new stdClass();
    $optional->export_type = 0;
    $optional->name = 'field_default_fields:node-ns_article-field_ns_article_related';
    $optional->status = 1;
    ctools_export_crud_save('defaultconfig_optionals', $optional);
    defaultconfig_component_rebuild($components['field_default_fields'], 'ns_article');
    $this->assertFieldsExisting(array('field_ns_article_related'));
    $editor = $this->createContentEditor('ns_article');
    $this->drupalLogin($editor);
    $this->drupalGet('node/add/ns-article');
    $this->assertField('field_ns_article_related[und][0][target_id]');
    $instance = field_info_instance('node', 'field_ns_article_related', 'ns_article');
    $this->assertReferencesDialogView('ns_article_reference_search', 'references_dialog_1', $instance);
    // We should have some references dialog links.
    $this->assertLink('Create Article');
    $this->assertLink('Search');
    $node = $this->drupalCreateNode($this->getTestNode());
    // Check that entity references works as expected.
    $this->drupalGet('node/add/ns-article');
    $reference_value = "{$node->title} ({$node->nid})";
    $edit = array(
      'title' => $this->randomName(),
      'field_ns_article_body[und][0][value]' => $this->loremIpsum(),
      'field_ns_article_lead[und][0][value]' => $this->loremIpsum(),
      'field_ns_article_kicker[und][0][value]' => $this->randomString(),
      'field_ns_article_related[und][0][target_id]' => $reference_value,
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $nodes = entity_load('node');
    $referring_node = array_pop($nodes);
    $this->drupalGet('node/' . $referring_node->nid . '/edit');
    $this->assertFieldByName('field_ns_article_related[und][0][target_id]', $reference_value);
  }
}

/**
 * Test that users with different roles are experiencing the intended behavior.
 */
class NSArticleRoleTestCase extends NodeStreamWebTestCase {
  /**
   * Definition.
   */
  public static function getInfo() {
    return array(
      'name' => 'Article permissions',
      'description' => 'Test that the defined roles have the access they are supposed to have.',
      'group' => 'NodeStream'
    );
  }

  /**
   * @see DrupalWebTestCase::setUp()
   */
  function setUp() {
    parent::setUp('ns_roles');
    module_enable(array('ns_article'));
  }

  /**
   * Test that the various roles have appropriate permissions.
   */
  function testRoles() {
    $content_type = 'ns_article';
    // Writers should be able to create and edit own articles.
    $writer = $this->role('writer');
    $writer->can()
      ->create($content_type)
      ->editOwn($content_type);
    $writer->cant()
      ->editOther($content_type)
      ->deleteOther($content_type)
      ->deleteOwn($content_type);
    // The following roles should be able to do anything:
    foreach (array('editor', 'super user', 'chief editor', 'administrator') as $role) {
      $this->role($role)->can()
      ->create($content_type)
      ->editOwn($content_type)
      ->editOther($content_type)
      ->deleteOwn($content_type)
      ->deleteOther($content_type);
    }
    // Translators and bloggers should not be able do anything.
    foreach (array('blogger', 'translator') as $role) {
      $this->role($role)->cant()
        ->create($content_type)
        ->editOwn($content_type)
        ->editOther($content_type)
        ->deleteOwn($content_type)
        ->deleteOther($content_type);
    }
  }

  function role($role) {
    return new NSContentTypeAccessHelper($this, $role);
  }
}

