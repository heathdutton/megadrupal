<?php
/**
 * @file
 * Tests for advertisments.
 */

/**
 * Basic test for the AD content type.
 */
class NSAdTest extends NSContentProviderTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Ads',
      'description' => 'Test ads functionality.',
      'group' => 'NodeStream'
    );
  }

  /**
   * Test basic CRUD functionality.
   */
  function testBasic() {
    $this->assertContentType('ns_ad');
     // Get all fields and make sure the fields defined are there.
    $fields = array(
      'field_ns_ad_link',
      'field_ns_ad_media',
    );
    $this->assertFieldsExisting($fields);
    // Create a test node.
    $original_node = $this->getTestNode();
    $test_node = $this->drupalCreateNode($original_node);
    // Ensure it's integrity by loading it from the database.
    $test_node = node_load($test_node->nid, NULL, TRUE);
    $this->assertEqual($test_node->field_ns_ad_link['und'][0]['url'], $original_node['field_ns_ad_link']['und'][0]['url']);
    $this->assertEqual($test_node->field_ns_ad_media['und'][0]['fid'], $original_node['field_ns_ad_media']['und'][0]['fid']);
  }

  function testNSAdForm() {
    // Create an article through the form
    $editor = $this->createContentEditor(array('ns_ad'));
    $test_file = $this->createTestFile();
    $this->drupalLogin($editor);
    $this->drupalGet('node/add/ns-ad');
    $this->assertField('field_ns_ad_link[und][0][url]');
    $this->assertField('field_ns_ad_media[und][0][fid]');
    $values = array(
      'title' => $this->randomString(),
      'field_ns_ad_link[und][0][url]' => 'http://nodeone.se/',
      'field_ns_ad_media[und][0][fid]' => $test_file->fid,
    );
    // Go to the ad form and check the values.
    $this->drupalPost(NULL, $values, t('Save'));
    $node = current(entity_load('node'));
    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->assertFieldByName('field_ns_ad_link[und][0][url]', 'http://nodeone.se/');
    $this->assertFieldByName('field_ns_ad_media[und][0][fid]', $test_file->fid);
    // Delete the ad.
    $this->assertDeleteForm($editor, $node);
  }

  function setUp() {
    parent::setUp('ns_ad', 'media');
  }

  /**
   * Get a suitable test node for NS Ad.
   */
  function getTestNode() {
    $node = array();
    $test_file = $this->createTestFile();

    $node['type'] = 'ns_ad';
    $node['title'] = $this->randomName();
    $node['status'] = 1;
    $node['field_ns_ad_link'] = array(
      'und' => array(
        array(
          'url' => 'http://nodeone.se/'
        ),
      ),
    );
    $node['field_ns_ad_media'] = array(
      'und' => array(
        array(
          'fid' => $test_file->fid,
          'display' => TRUE,
        ),
      ),
    );
    return $node;
  }
}

/**
 * Test that users with different roles are experiencing the intended behavior.
 */
class NSAdRoleTestCase extends NodeStreamWebTestCase {
  /**
   * Definition.
   */
  public static function getInfo() {
    return array(
      'name' => 'Ads permissions',
      'description' => 'Test that the defined roles have the access they are supposed to have.',
      'group' => 'NodeStream'
    );
  }

  /**
   * @see DrupalWebTestCase::setUp()
   */
  function setUp() {
    parent::setUp('ns_roles');
    module_enable(array('ns_ad'));
  }

  /**
   * Test that the various roles have appropriate permissions.
   */
  function testRoles() {
    $content_type = 'ns_ad';
    // The following roles should be able to do anything:
    foreach (array('super user', 'chief editor', 'administrator', 'editor') as $role) {
      $this->role($role)->can()
        ->create($content_type)
        ->editOwn($content_type)
        ->editOther($content_type)
        ->deleteOwn($content_type)
        ->deleteOther($content_type);
    }
    // The following roles should not be able to do anything:
    foreach (array('blogger', 'translator', 'writer') as $role) {
      $this->role($role)->cant()
        ->create($content_type)
        ->editOwn($content_type)
        ->editOther($content_type)
        ->deleteOwn($content_type)
        ->deleteOther($content_type);
    }
  }

  function role($role) {
    return new NSContentTypeAccessHelper($this, $role);
  }
}
