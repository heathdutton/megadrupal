<?php

class NSFactTest extends NSContentProviderTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Facts',
      'description' => 'Basic fact functionality.',
      'group' => 'NodeStream'
    );
  }

  function setUp() {
    parent::setUp('ns_fact');
  }

// TODO: add same for NSPage
// Test to erase a fact which is referred and check if it is still in the article/page

  /**
   * Test if the the core content type fact is exists.
   */
  function testNSFactBuild() {
    $this->assertContentType('ns_fact');
  }

  /**
   * Test create node.
   */
  function testNSFactCreate() {
    $editor = $this->createContentEditor('ns_fact');
    $this->drupalLogin($editor);
    $this->assertTrue(TRUE, 'Create a fact box');
    $edit = array();
    $edit['title'] = $this->randomName();
    $edit["field_ns_fact_body[und][0][value]"] = $this->loremIpsum();

    $this->drupalPost('node/add/ns-fact', $edit, t('Save'));
    $this->assertText(t('Fact @title has been created.', array('@title' => $edit['title'])));
    $this->assertText($edit['title']);
    $this->assertText($edit["field_ns_fact_body[und][0][value]"]);

  }

  /**
   * Test edit form of ns_fact
   */
  function testNSFactEditForm() {
    $editor = $this->createContentEditor('ns_fact');
    $this->drupalLogin($editor);
    $this->assertTrue(TRUE, 'Check the edit form');
    $settings = array(
      'type' => 'ns_fact',
      'title' => $this->randomName(),
      'field_ns_fact_body' => array(LANGUAGE_NONE => array(array('value' => $this->loremIpsum()))),
    );
    $node = $this->drupalCreateNode($settings);
    $this->assertTrue(node_load($node->nid), t('Node created.'));
    $this->drupalGet("node/{$node->nid}/edit");
    $this->assertResponse(200, t('User is allowed to edit the content.'));
    $this->assertText($settings['title']);
    $this->assertText($settings['field_ns_fact_body']['und'][0]['value']);
  }


  function testNSFactNodeDeleteForm() {
    $editor = $this->createContentEditor('ns_fact');
    $settings = array(
      'type' => 'ns_fact',
      'uid' => $editor->uid,
      'title' => $this->randomName(),
      'field_ns_fact_body' => array(LANGUAGE_NONE => array(array('value' => $this->loremIpsum()))),
    );
    $node = $this->drupalCreateNode($settings);
    $this->assertDeleteForm($editor, $node->nid);
   }
}



/**
 *  NS_Fact in NS_Article
 */
class NSArticleFactTest extends NSContentProviderTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Article Fact',
      'description' => 'Article fact functionality.',
      'group' => 'NodeStream'
    );
  }

  function setUp() {
    parent::setUp('ns_fact', 'ns_article', 'references_dialog');
  }

  /**
   * Test if the fields exspected exists in the Node form.
   */
  public function assertNSArticleFactNodeForm() {
    $this->assertField('field_ns_fact_ns_article_fact[und][0][target_id]', t('Facts field is present.'));
  }
  /**
   * Test if the fields exspected exists in the fields.
   */
  public function assertNSArticleFactFields() {
    $fields = array(
      'field_ns_fact_ns_article_fact',
    );
    $this->assertFieldsExisting($fields);
  }

  /**
   * Test create an article and attach a fact box to it.
   */
  function testNSFactInArticle() {
    $this->assertNSArticleFactFields();
    $editor = $this->createContentEditor(array('ns_fact', 'ns_article'));
    $article_instance = field_info_instance('node', 'field_ns_fact_ns_article_fact', 'ns_article');
    // Make sure that the reference dialog view exists.
    $this->assertReferencesDialogView('ns_fact_reference_search', 'references_dialog_1', $article_instance);

    $this->drupalLogin($editor);
    // Get the form.
    $this->drupalGet('node/add/ns-article');

    // Check if the reference field are missing or not.
    $this->assertNSArticleFactNodeForm();
    // We should have some references dialog links.
    $this->assertLink('Create Fact');
    $this->assertLink('Search');
    // We should NOT see the link Edit here.
    $this->assertNoLink('Edit');

    // Create a NS Fact node
    $this->assertTrue(TRUE, 'Create a fact box');
    $fact = $this->drupalCreateNode($this->getTestNSFactNode($editor->uid));
    // Create a NS Article node with the fact reference.
    $this->assertTrue(TRUE, 'Create an article');
    $article = $this->drupalCreateNode($this->getTestNSArticleNode($fact, $editor->uid));
    $saved_article_node = node_load($article->nid, NULL, TRUE);
    $this->assertTrue(node_load($saved_article_node->nid), t('Node created.'));

    // Get the form again.
    $this->drupalGet('node/' . $article->nid . '/edit');
    // We should have some references dialog links.
    $this->assertLink('Create Fact');
    $this->assertLink('Search');
    $this->assertLink('Edit');
  }

/**
 * Create an NS Article Node.
 * @param type $fact
 * @param type $author
 * @return string
 */
  function getTestNSArticleNode($fact = FALSE, $author = 0) {
    $node = array();
    $node['uid'] = $author;
    $node['type'] = 'ns_article';
    $node['title'] = $this->randomName();
    $node['status'] = 1;
    if ($fact) {
      $fact_entities = array();
      if (is_array($fact)) {
        foreach ($fact as $nid) {
          $fact_entities[] = array('target_type' => 'node', 'target_id' => $nid);
        }
      }
      else {
        $fact_entities[] = array('target_type' => 'node', 'target_id' => $fact);
      }
      $node['field_ns_ns_article_fact'] = array('und' => $fact_entities);
    }
    return $node;
  }

  /**
   * Create a NS Fact Node
   * @param type $fact
   * @param type $author
   * @return type
   */
  function getTestNSFactNode($author = 0) {
    $node = array();
    $node['uid'] = $author;
    $node['type'] = 'ns_fact';
    $node['title'] = $this->randomName();
    $node['status'] = 1;
    $node["field_ns_fact_body[und][0][value]"] = $this->loremIpsum();
    return $node;
  }
}

/**
 *  NS_Fact in NS_Page
 */
class NSPageFactTest extends NSContentProviderTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Page Fact',
      'description' => 'Page fact functionality.',
      'group' => 'NodeStream'
    );
  }

  function setUp() {
    parent::setUp('ns_fact', 'ns_page', 'references_dialog');
  }

  /**
   * Test if the fields exspected exists in the Node form.
   */
  public function assertNSPageFactNodeForm() {
    $components = defaultconfig_get_components();
    $optional = new stdClass();
    $optional->export_type = 0;
    $optional->name = 'field_default_fields:node-ns_page-field_ns_fact_ns_page_fact';
    $optional->status = 1;
    ctools_export_crud_save('defaultconfig_optionals', $optional);
    defaultconfig_component_rebuild($components['field_default_fields'], 'ns_page');

    $this->assertNSPageFactFields();
    $page_instance = field_info_instance('node', 'field_ns_fact_ns_page_fact', 'ns_page');
    // Make sure that the reference dialog view exists.
    $this->assertReferencesDialogView('ns_fact_reference_search', 'references_dialog_1', $page_instance);
    $this->assertField('field_ns_fact_ns_page_fact[und][0][target_id]', t('Facts field is present.'));
  }
  /**
   * Test if the fields exspected exists in the fields.
   */
  public function assertNSPageFactFields() {
    $fields = array(
      'field_ns_fact_ns_page_fact',
    );
    $this->assertFieldsExisting($fields);
  }

  /**
   * Test create a page and attach a fact box to it.
   */
  function testNSFactInPage() {
    $components = defaultconfig_get_components();
    $optional = new stdClass();
    $optional->export_type = 0;
    $optional->name = 'field_default_fields:node-ns_page-field_ns_fact_ns_page_fact';
    $optional->status = 1;
    ctools_export_crud_save('defaultconfig_optionals', $optional);
    defaultconfig_component_rebuild($components['field_default_fields'], 'ns_fact');

    $editor = $this->createContentEditor(array('ns_fact', 'ns_page'));
    $this->drupalLogin($editor);
    // Get the form.
    $this->drupalGet('node/add/ns-page');

    // Check if the reference field are missing or not.
    $this->assertNSPageFactNodeForm();
    // We should have some references dialog links.
    $this->assertLink('Create Fact');
    $this->assertLink('Search');
    // We should NOT see the link Edit here.
    $this->assertNoLink('Edit');

    // Create a NS Fact node
    $this->assertTrue(TRUE, 'Create a fact box');
    $fact = $this->drupalCreateNode($this->getTestNSFactNode($editor->uid));
    // Create a NS Article node with the fact reference.
    $this->assertTrue(TRUE, 'Create a page');
    $page = $this->drupalCreateNode($this->getTestNSPageNode($fact, $editor->uid));
    $saved_page_node = node_load($page->nid, NULL, TRUE);
    $this->assertTrue(node_load($saved_page_node->nid), t('Node created.'));

    // Get the form again.
    $this->drupalGet('node/' . $page->nid . '/edit');
    // We should have some references dialog links.
    $this->assertLink('Create Fact');
    $this->assertLink('Search');
    $this->assertLink('Edit');
  }

/**
 * Create an NS Page Node.
 * @param type $fact
 * @param type $author
 * @return string
 */
  function getTestNSPageNode($fact = FALSE, $author = 0) {
    $node = array();
    $node['uid'] = $author;
    $node['type'] = 'ns_page';
    $node['title'] = $this->randomName();
    $node['status'] = 1;
    if ($fact) {
      $fact_entities = array();
      if (is_array($fact)) {
        foreach ($fact as $nid) {
          $fact_entities[] = array('target_type' => 'node', 'target_id' => $nid);
        }
      }
      else {
        $fact_entities[] = array('target_type' => 'node', 'target_id' => $fact);
      }
      $node['field_ns_ns_page_fact'] = array('und' => $fact_entities);
    }
    return $node;
  }

  /**
   * Create a NS Fact Node
   * @param type $fact
   * @param type $author
   * @return type
   */
  function getTestNSFactNode($author = 0) {
    $node = array();
    $node['uid'] = $author;
    $node['type'] = 'ns_fact';
    $node['title'] = $this->randomName();
    $node['status'] = 1;
    $node["field_ns_fact_body[und][0][value]"] = $this->loremIpsum();
    return $node;
  }
}

/**
 * Test that users with different roles are experiencing the intended behavior.
 */
class NSFactRoleTestCase extends NodeStreamWebTestCase {
  /**
   * Definition.
   */
  public static function getInfo() {
    return array(
      'name' => 'Fact permissions',
      'description' => 'Test that the defined roles have the access they are supposed to have.',
      'group' => 'NodeStream'
    );
  }

  /**
   * @see DrupalWebTestCase::setUp()
   */
  function setUp() {
    parent::setUp('ns_roles');
    module_enable(array('ns_fact'));
  }

  /**
   * Test that the various roles have appropriate permissions.
   */
  function testRoles() {
    $content_type = 'ns_fact';
    // Writers should be able to create and edit own facts.
    $writer = $this->role('writer');
    $writer->can()
      ->create($content_type)
      ->editOwn($content_type);
    $writer->cant()
      ->editOther($content_type)
      ->deleteOther($content_type)
      ->deleteOwn($content_type);
    // The following roles should be able to do anything:
    foreach (array('editor', 'super user', 'chief editor', 'administrator') as $role) {
      $this->role($role)->can()
      ->create($content_type)
      ->editOwn($content_type)
      ->editOther($content_type)
      ->deleteOwn($content_type)
      ->deleteOther($content_type);
    }
    // Translators and bloggers should not be able do anything.
    foreach (array('blogger', 'translator') as $role) {
      $this->role($role)->cant()
        ->create($content_type)
        ->editOwn($content_type)
        ->editOther($content_type)
        ->deleteOwn($content_type)
        ->deleteOther($content_type);
    }
  }

  function role($role) {
    return new NSContentTypeAccessHelper($this, $role);
  }
}
