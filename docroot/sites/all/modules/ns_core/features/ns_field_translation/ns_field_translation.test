<?php
/**
 * @file
 * Tests for Field translation module.
 */

/**
 * Test that field replacements are working properly.
 */
class NSFieldTranslationTest extends NodeStreamWebTestCase {

  /**
   * @see DrupalWebTestCase::getInfo()
   */
  public static function getInfo() {
    return array(
      'name' => 'Field translation',
      'description' => 'Test field replacements and field replacements.',
      'group' => 'NodeStream'
    );
  }

  /**
   * @see DrupalWebTestCase::setUp()
   */
  public function setUp() {
    parent::setUp();
    // Indicate that we are in test mode.
    variable_set('ns_field_translation_skip_batch', TRUE);
  }

  /**
   * @see DrupalWebTestCase::tearDown()
   */
  public function tearDown() {
    parent::tearDown();
    // Test mode disabled.
    variable_set('ns_field_translation_skip_batch', FALSE);
  }

  /**
   * Test that entity translation is enabled and fields are
   * replaced when a module indicating that it want to be translated is
   * enabled after ns_field_translation is enabled.
   */
  public function testFieldTranslationAfter() {
    // Enable ns_field_translation.
    module_enable(array('ns_field_translation', 'taxonomy'));
    // Enable ns_field_translation_test AFTER ns_field_translation.
    module_enable(array('ns_field_translation_test'));
    $this->_fieldTranslationHelper();
  }

  /**
   * Test that field translation works when
   * the module providing the entity types are enabled before
   * ns_field_translation.
   */
  function testFieldTranslationBefore() {
    // Enable ns_field_translation_test BEFORE ns_field_translation.
    module_enable(array('ns_field_translation_test'));
    module_load_include('features.taxonomy.inc', 'ns_field_translation_test');
    $vocabularies = ns_field_translation_test_taxonomy_default_vocabularies();
    foreach ($vocabularies as $vocabulary) {
      taxonomy_vocabulary_save((object)$vocabulary);
    }
    $vocabularies = taxonomy_vocabulary_get_names();

    $vid = $vocabularies['ns_field_translation_test']->vid;
    $nodes = array();
    $terms = array();
    // Create some nodes and terms
    for ($i = 0; $i < 5; $i++) {
      $nodes[] = $this->drupalCreateNode(array('type' => 'ns_field_translation_test'));
      $term = new stdClass;
      $term->vid = $vid;
      $term->name = $this->randomString();
      $term->description = $this->randomString();
      taxonomy_term_save($term);
      $terms[] = $term;
    }
    // Enable ns_field_translation.
    module_enable(array('ns_field_translation'));

    $this->_fieldTranslationHelper();
    // Load our nodes again, and make sure the title field has the appropriate value.
    foreach ($nodes as $node) {
      $new_node = node_load($node->nid, NULL, TRUE);
      $this->assertEqual($new_node->title_field['und'][0]['value'], $node->title);
    }
    // Load our terms again and make sure the name and description has the appropriate values.
    foreach ($terms as $term) {
      $new_term = current(entity_load('taxonomy_term', array($term->tid), array(), TRUE));
      $this->assertEqual($new_term->name_field['en'][0]['value'], $term->name);
      $this->assertEqual($new_term->description_field['en'][0]['value'], $term->description);
    }
  }

  /**
   * Helper function containing the actual tests.
   */
  function _fieldTranslationHelper() {
    $this->assertTrue(field_read_instance('node', 'title_field', 'ns_field_translation_test'), 'test content type title is a field');
    $this->assertEqual(variable_get('language_content_type_ns_field_translation_test', 0),
      ENTITY_TRANSLATION_ENABLED, 'Test content type has entity translation enabled.');
    $this->assertTrue(field_read_instance('taxonomy_term', 'description_field', 'ns_field_translation_test'), 'topic description is a field');
    $this->assertTrue(field_read_instance('taxonomy_term', 'name_field', 'ns_field_translation_test'), 'Topic name is a field');
  }
}
