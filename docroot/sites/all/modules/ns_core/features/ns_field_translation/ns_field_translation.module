<?php
/**
 * @file
 * Code for the ns_field_translation feature.
 */

/**
 * Get all modules that we should provide entity translations for.
 */
function ns_field_translation_modules() {
  $modules = module_invoke_all('ns_field_translation_modules');
  drupal_alter('ns_field_translation_modules', $modules);
  return $modules;
}

/**
 * Implements hook_modules_enabled().
 */
function ns_field_translation_modules_enabled($modules) {
  $translation_modules = array_intersect($modules, ns_field_translation_modules());
  if (count($translation_modules)) {
    ns_field_translation_add_title_instance($translation_modules);
    // We are going to enforce some settings as long as the feature is on.
    ns_field_translation_use_entity_translation($translation_modules);
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ns_field_translation_ctools_plugin_api($module, $api) {
  if ($module == "page_manager" && $api == "pages_default") {
    return array("version" => "1");
  }
}


/**
 * Use entity translation for content types in these modules.
 */
function ns_field_translation_use_entity_translation($modules) {
  foreach ($modules as $module) {
    if (module_exists($module) && module_hook($module, 'node_info')) {
      foreach (array_keys(module_invoke($module, 'node_info')) as $bundle) {
        variable_set('language_content_type_' . $bundle, 4);
        variable_set('entity_translation_comment_filter_' . $bundle, TRUE);
      }
    }
  }
}

/**
 * Add a title field instance to all content types provided by the array of modules.
 */
function ns_field_translation_add_title_instance(array $modules) {
  $entity_translation_types = variable_get('entity_translation_entity_types', array());
  $node_enabled = in_array('node', $entity_translation_types);
  $taxonomy_enabled = in_array('taxonomy_term', $entity_translation_types);
  $instances = array();
  foreach ($modules as $module) {
    // Require any taxonomy vocabulary files from features.
    module_load_include('features.taxonomy.inc', $module);
    if ($node_enabled && module_exists($module) && module_hook($module, 'node_info')) {
      $types = module_invoke($module, 'node_info');
      foreach ($types as $bundle => $type) {
        if ($type['has_title']) {
          $instances["node:$bundle:title"] = ns_field_translation_create_node_title_field($bundle, $type['title_label']);
        }
      }
    }
    if ($taxonomy_enabled && module_hook($module, 'taxonomy_default_vocabularies')) {
      $vocabularies = module_invoke($module, 'taxonomy_default_vocabularies');
      foreach (array_keys($vocabularies) as $name) {
        $instances = array_merge($instances, ns_field_translation_replace_taxonomy_fields($name));
      }
    }
  }
  if (!empty($instances)) {
    if (!variable_get('ns_field_translation_skip_batch', FALSE)) {
      ns_field_translation_field_replacement_batch_set($instances);
    }
    else {
      ns_field_translation_replace_properties($instances);
    }
  }
}

/**
 * Replace taxonomy fields.
 */
function ns_field_translation_replace_taxonomy_fields($machine_name) {
  $desc_instance = array(
    'bundle' => $machine_name,
    'default_value' => NULL,
    'deleted' => '0',
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'taxonomy_term',
    'field_name' => 'description_field',
    'label' => 'Description',
    'required' => FALSE,
    'settings' => array(
      'display_summary' => 0,
      'text_processing' => 1,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'module' => 'text',
      'settings' => array(
        'rows' => 20,
        'summary_rows' => 5,
      ),
      'type' => 'text_textarea_with_summary',
      'weight' => -5,
    ),
  );
  $name_instance = array(
    'bundle' => $machine_name,
    'default_value' => NULL,
    'deleted' => '0',
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 1,
      ),
    ),
    'entity_type' => 'taxonomy_term',
    'field_name' => 'name_field',
    'label' => 'Name',
    'required' => TRUE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => -5,
    ),
  );
  foreach (array($desc_instance, $name_instance) as $instance) {
    $prior_instance = field_read_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
    if (empty($prior_instance)) {
      field_create_instance($instance);
    }
  }
  return array("taxonomy:$machine_name:desc" => $desc_instance, "taxonomy:$machine_name:name" => $name_instance);
}

/**
 * Create a node title field to replace the title property.
 */
function ns_field_translation_create_node_title_field($node_type, $title_label) {
  $instance = array(
    'bundle' => $node_type,
    'default_value' => NULL,
    'deleted' => '0',
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'module' => 'text',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 18,
      ),
      'teaser' => array(
        'label' => 'hidden',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'title_field',
    'label' => $title_label,
    'required' => TRUE,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => -5,
    ),
  );
  $prior_instance = field_read_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
  if (empty($prior_instance)) {
    $result = field_create_instance($instance);
  }
  return $instance;
}

/**
 * Implements hook_ns_field_translation_modules().
 */
function ns_field_translation_ns_field_translation_modules() {
  return array(
    'ns_article',
    'ns_page',
    'ns_blog',
    'ns_blog_post',
    'ns_article',
    'ns_promo',
    'ns_footer_content',
    'ns_ad',
    'ns_contributor',
    'ns_fact',
    'ns_media',
  );
}

/**
 * Replace all properties in all available content.
 * This will be done in-place instead of using a batch, which is useful when
 * running tests.
 * @param $instances
 */
function ns_field_translation_replace_properties($instances) {
  $operations = array();
  foreach ($instances as $instance) {
    list($legacy_field) = explode('_', $instance['field_name']);
    $operations[] = array($instance['entity_type'], $instance['bundle'], $legacy_field);
  }
  $context = array();
  foreach ($operations as $operation) {
    while (!isset($context['sandbox']['progress']) || $context['sandbox']['progress'] != $context['sandbox']['total']) {
      title_field_replacement_batch($operation[0], $operation[1], $operation[2], $context);
    }
    $context = array();
  }
}

/**
 * Set a batch process to initialize replacing field values.
 *
 * @param $instances
 *   An instance array defining a replacement field.
 */
function ns_field_translation_field_replacement_batch_set($instances) {
  $operations = array();
  foreach ($instances as $instance) {
    list($legacy_field) = explode('_', $instance['field_name']);
    $operations[] = array('title_field_replacement_batch', array($instance['entity_type'], $instance['bundle'], $legacy_field));
  }
  $batch = array(
    'title' => t('Replacing field values'),
    'operations' => $operations,
  );
  batch_set($batch);
}
