<?php
/**
 * @file
 * Contains tests for the translator feature.
 */

/**
 * Test case for the translator UI.
 */
class NSTranslatorTestCase extends NodeStreamWebTestCase {

  /**
   * @see DrupalWebTestCase::getInfo()
   */
  public static function getInfo() {
    return array(
      'name' => 'Translation interface',
      'description' => 'The translation interface with interaction from translators.',
      'group' => 'NodeStream'
    );
  }

  /**
   * @see DrupalWebTestCase::setUp()
   */
  function setUp() {
    parent::setUp('ns_roles', 'toolbar', 'ns_translator', 'ns_article', 'taxonomy');
    variable_set('ns_field_translation_skip_batch', TRUE);
    module_enable(array('ns_field_translation'));
  }

  /**
   * Test the translator UI.
   */
  function testTranslationUI() {
    locale_add_language('sv');
    // Create a few nodes that can be translated.
    for ($i = 0; $i < 5; $i++) {
      $nodes[] = $this->drupalCreateNode($this->getTestNode('en'));
    }
    // Normal users shouldn't have access to the translation UI.
    $this->drupalGet('admin/translations');
    $this->assertResponse('403', 'Users without access to the translator UI can\'t access it.');
    $this->drupalGet('admin/translations/not-translated');
    $this->assertResponse('403', 'Users without access to the translation tab showing not translated content can\'t access it.');
    $this->drupalGet('admin/translations/needs-update');
    $this->assertResponse('403', 'Users without access to the translation tab showing content that needs update can\'t access it.');
    // Create a user.
    $user = $this->drupalCreateUser();
    $roles = user_roles();
    $role_id = array_search('translator', $roles);
    $user->roles[$role_id] = 'translator';
    user_save($user);
    // Log in and go to the translations page.
    $this->drupalLogin($user);
    $this->assertLink('Translations');
    $this->drupalGet('admin/translations');
    // Assert that the exposed form is available.
    $this->assertField('entity_type', 'The entity type views filter exits');
    $this->assertField('language_1', 'The language views filter exits');
    $this->assertField('translation_exists', 'The translation exists filter exists');
    // Assert that the tabs are available.
    $this->assertLink('Not translated', 0,  'The not translated tab exists');
    $this->assertLink('Needs update', 0,  'The needs update tab exists');
    // Change the exposed values.
    $parameters = array(
      'entity_type' => 'node',
      'language_1' => 'en',
      'translation_exists' => 'sv',
    );
    $this->drupalGet('admin/translations', array('query' => $parameters));
    // We should have link and be able to translate.
    $this->assertLink(t('translate'), 0,  'Translate links are available.');
    // We should have all nodes in place.
    foreach ($nodes as $node) {
      $this->assertText($node->title);
    }
    // Go to the translation page of the first node.
    $this->drupalGet('node/' . $nodes[0]->nid . '/translate');
    $this->assertLink(t('add translation'));
    $this->drupalGet('node/' . $nodes[0]->nid . '/translate/add/sv/en');
    $this->assertField('title_field[sv][0][value]', 'The title field exists.');
    $this->assertField('field_ns_article_body[sv][0][value]', 'The body field exists.');
    $this->assertField('field_ns_article_lead[sv][0][value]', 'The lead field exists.');
    $edit = array(
      'title_field[sv][0][value]' => $this->randomName(),
      'field_ns_article_body[sv][0][value]' => $this->randomString(),
      'field_ns_article_lead[sv][0][value]' => $this->randomString(),
    );
    // Post a translation.
    $this->drupalPost(NULL, $edit, t('Save translation'));
    // Go back to the translation form.
    $this->drupalGet('admin/translations', array('query' => $parameters));
    $this->assertNoText($nodes[0]->title, 'Translated nodes don\'t show up in the listing of content that isn\'t translated yet');
    // Mark the translation as outdated.
    $handler = entity_translation_get_handler('node', $nodes[0]);
    $handler->setOutdated(TRUE);
    $handler->loadTranslations();
    $handler->saveTranslations();
    $this->drupalGet('admin/translations/needs-update');
    $this->assertText($nodes[0]->title, 'A node that is marked as needing update shows up under the needs update tab.');
  }

  /**
   * Get a test node.
   */
  protected function getTestNode($lang) {
    $title = $this->randomName();
    return array(
      'type' => 'ns_article',
      'language' => $lang,
      'title' => $title,
      'title_field' => array($lang => array(array('value' => $title))),
      'body' => array($lang => array(array('value' => ''))),
      'field_ns_article_body' => array($lang => array(array('value' => $this->loremIpsum()))),
      'field_ns_article_kicker' => array($lang => array(array('value' => $this->randomString()))),
      'field_ns_article_lead' => array($lang => array(array('value' => $this->loremIpsum()))),
    );
  }
}
