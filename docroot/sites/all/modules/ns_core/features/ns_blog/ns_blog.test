<?php
/**
 * @file
 * Tests for ns_blog.
 */

/**
 * Basic test for the blog content type.
 */
class NSBlogTestCase extends NSContentProviderTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Blogs',
      'description' => 'Test blog functionality.',
      'group' => 'NodeStream'
    );
  }

  function setUp() {
    parent::setUp('ns_blog', 'ns_contributor', 'media');
  }

  /**
   * Test basic CRUD functionality.
   */
  function testBasic() {
    $this->assertContentType('ns_blog');
     // Get all fields and make sure the fields defined are there.
    $fields = array(
      'field_ns_blog_post_blog',
      'field_ns_blog_description_long',
      'field_ns_blog_description_short',
      'field_ns_blog_image',
    );
    $this->assertFieldsExisting($fields);
    // Create a test node.
    $original_node = $this->getTestNode();
    $test_node = $this->drupalCreateNode($original_node);
    // Ensure it's integrity by loading it from the database.
    $test_node = node_load($test_node->nid, NULL, TRUE);
    $this->assertEqual($test_node->field_ns_blog_description_long['und'][0]['value'], $original_node['field_ns_blog_description_long']['und'][0]['value']);
    $this->assertEqual($test_node->field_ns_blog_description_short['und'][0]['value'], $original_node['field_ns_blog_description_short']['und'][0]['value']);
    $this->assertEqual($test_node->field_ns_blog_image['und'][0]['fid'], $original_node['field_ns_blog_image']['und'][0]['fid']);
  }

  function testNSBlogForm() {
    // Create a blog post through the form
    $editor = $this->createContentEditor(array('ns_blog', 'ns_blog_post'));
    $test_file = $this->createTestFile();
    $this->drupalLogin($editor);
    $this->drupalGet('node/add/ns-blog');
    $this->assertField('field_ns_blog_description_long[und][0][value]');
    $this->assertField('field_ns_blog_description_short[und][0][value]');
    $this->assertField('field_ns_blog_image[und][0][fid]');
    $values = array(
      'title' => $this->randomName(),
      'field_ns_blog_description_long[und][0][value]' => $this->loremIpsum(),
      'field_ns_blog_description_short[und][0][value]' => $this->loremIpsum(),
      'field_ns_blog_image[und][0][fid]' => $test_file->fid,
    );
    // Go to the blog form and check the values.
    $this->drupalPost(NULL, $values, t('Save'));
    $node = current(entity_load('node'));
    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->assertFieldByName('field_ns_blog_description_long[und][0][value]', $this->loremIpsum());
    $this->assertFieldByName('field_ns_blog_description_short[und][0][value]', $this->loremIpsum());
    $this->assertFieldByName('field_ns_blog_image[und][0][fid]', $test_file->fid);

    // Create a blog post and refer to the blog.
    $this->drupalGet('node/add/ns-blog-post');
    $this->assertFieldByName('field_ns_blog_post_blog[und][0][target_id]');
    $values = array(
      'title' => $this->randomName(),
      'field_ns_blog_post_blog[und][0][target_id]' => "{$node->title} ({$node->nid})",
    );
    $this->drupalPost(NULL, $values, t('Save'));
    $this->drupalGet('node/2/edit');
    $this->assertFieldByName('field_ns_blog_post_blog[und][0][target_id]', "{$node->title} ({$node->nid})");
    // Check that references dialog works as expected.
    module_enable(array('references_dialog'));
    $this->drupalGet('node/add/ns-blog-post');
    $this->assertLink(t('Search'));
    // Delete the blog.
    $this->assertDeleteForm($editor, $node);
  }

  /**
   * Test the contributor extension.
   */
  function testContributorExtension() {
    // Enable the contributor extension.
    // @todo Make a patch for default config that makes this easy.
    $components = defaultconfig_get_components();
    $optional = new stdClass();
    $optional->export_type = 0;
    $optional->name = 'field_default_fields:node-ns_blog-field_ns_blog_blogger';
    $optional->status = 1;
    ctools_export_crud_save('defaultconfig_optionals', $optional);
    defaultconfig_component_rebuild($components['field_default_fields'], 'ns_blog');
    $this->assertFieldsExisting(array('field_ns_blog_blogger'));
    $editor = $this->createContentEditor(array('ns_blog', 'ns_blog_post', 'ns_contributor'));
    $test_file = $this->createTestFile();
    $node = $this->drupalCreateNode(array('type' => 'ns_contributor'));
    $reference = "{$node->title} ({$node->nid})";
    $this->drupalLogin($editor);
    $this->drupalGet('node/add/ns-blog');
    $this->assertField('field_ns_blog_blogger[und][0][target_id]', t('The blogger field is present.'));
    $edit = array(
      'title' => $this->randomName(),
      'field_ns_blog_blogger[und][0][target_id]' => $reference,
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $created_node = array_pop(entity_load('node'));
    $this->drupalGet('node/' . $created_node->nid . '/edit');
    $this->assertFieldByName('field_ns_blog_blogger[und][0][target_id]', $reference);
  }

  /**
   * Get a suitable blog post test node.
   */
  function getTestNode() {
    $node = array();
    $test_file = $this->createTestFile();

    $node['type'] = 'ns_blog';
    $node['title'] = $this->randomName();
    $node['status'] = 1;
    $node['field_ns_blog_description_short'] = $node['field_ns_blog_description_long'] = array(
      'und' => array(
        array(
          'value' => $this->loremIpsum(),
        ),
      ),
    );
    $node['field_ns_blog_image'] = array(
      'und' => array(
        array(
          'fid' => $test_file->fid,
          'display' => TRUE,
        ),
      ),
    );
    return $node;
  }
}

/**
 * Test that users with different roles are experiencing the intended behavior.
 */
class NSBlogRoleTestCase extends NodeStreamWebTestCase {
  /**
   * Definition.
   */
  public static function getInfo() {
    return array(
      'name' => 'Blog permissions',
      'description' => 'Test that the defined roles have the access they are supposed to have.',
      'group' => 'NodeStream'
    );
  }

  /**
   * @see DrupalWebTestCase::setUp()
   */
  function setUp() {
    parent::setUp('ns_roles');
    module_enable(array('ns_blog'));
  }

  /**
   * Test that the various roles have appropriate permissions.
   */
  function testRoles() {
    $content_type = 'ns_blog';
    $blogger = $this->role('blogger');
    $blogger->can()
      ->create($content_type)
      ->editOwn($content_type);
    $blogger->cant()
      ->editOther($content_type)
      ->deleteOwn($content_type)
      ->deleteOther($content_type);
    // The following roles should be able to do anything:
    foreach (array('super user', 'chief editor', 'administrator', 'editor') as $role) {
      $this->role($role)->can()
        ->create($content_type)
        ->editOwn($content_type)
        ->editOther($content_type)
        ->deleteOwn($content_type)
        ->deleteOther($content_type);
    }
    // The following roles should not be able to do anything:
    foreach (array('translator', 'writer') as $role) {
      $this->role($role)->cant()
        ->create($content_type)
        ->editOwn($content_type)
        ->editOther($content_type)
        ->deleteOwn($content_type)
        ->deleteOther($content_type);
    }
  }

  function role($role) {
    return new NSContentTypeAccessHelper($this, $role);
  }
}
