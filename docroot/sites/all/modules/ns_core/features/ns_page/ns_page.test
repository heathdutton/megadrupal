<?php

class NSPageTestCase extends NSContentProviderTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Pages',
      'description' => 'Page functionality.',
      'group' => 'NodeStream'
    );
  }

  function setUp() {
    parent::setUp('ns_page', 'ns_contributor', 'media');
    $this->test_file = $this->createTestFile();

  }

  /**
   * Test basic things:
   *  - Is the content type available?
   *  - Do we have all expected fields?
   *  - programatic CRUD.
   */
  function testBasic() {
    $this->assertContentType('ns_page');
    // Get all fields and make sure the fields defined are there.
    $fields = array(
      'field_ns_page_body',
      'field_ns_page_media',
    );
    $this->assertFieldsExisting($fields);
    $original_node = $this->getTestNode();
    $node = $this->drupalCreateNode($this->getTestNode());
    $saved_node = node_load($node->nid, NULL, TRUE);
    $this->assertEqual($saved_node->field_ns_page_body['und'][0]['value'], $original_node['field_ns_page_body']['und'][0]['value']);
    $this->assertEqual($saved_node->field_ns_page_media['und'][0]['fid'], $original_node['field_ns_page_media']['und'][0]['fid']);
  }

  /**
   * Test the page form through the UI.
   */
  function testNodeForm() {
    $editor = $this->createContentEditor(array('ns_page'));
    $this->drupalLogin($editor);
    $this->drupalGet('node/add/ns-page');
    $this->assertField('field_ns_page_body[und][0][value]');
    $this->assertField('field_ns_page_media[und][0][fid]');
    // These extensions are optional.
    $this->assertNoField('field_ns_page_byline[und][0][target_id]');
    $this->assertNoField('field_ns_page_link_list[und][0][target_id]');
    // Post a basic page.
    $edit = array(
      'title' => $this->randomString(),
      'field_ns_page_body[und][0][value]' => $this->loremIpsum(),
      'field_ns_page_media[und][0][fid]' => $this->test_file->fid,
    );
    // Go to the page form and check the values.
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->drupalGet('node/1/edit');
    foreach ($edit as $key => $value) {
      $this->assertField($key, $value);
    }
    $this->assertDeleteForm($editor, 1);
  }

  /**
   * Test the contributor extension.
   */
  function testContributorExtension() {
    // Enable the contributor extension.
    // @todo Make a patch for default config that makes this easy.
    $components = defaultconfig_get_components();
    $optional = new stdClass();
    $optional->export_type = 0;
    $optional->name = 'field_default_fields:node-ns_page-field_ns_page_byline';
    $optional->status = 1;
    ctools_export_crud_save('defaultconfig_optionals', $optional);
    defaultconfig_component_rebuild($components['field_default_fields'], 'ns_page');
    $this->assertFieldsExisting(array('field_ns_page_byline'));
    $node = $this->drupalCreateNode(array('type' => 'ns_contributor'));
    $reference = "{$node->title} ({$node->nid})";
    $editor = $this->createContentEditor(array('ns_contributor', 'ns_page'));
    $this->drupalLogin($editor);
    $this->drupalGet('node/add/ns-page');
    $this->assertField('field_ns_page_byline[und][0][target_id]', t('The byline field is present.'));
    $edit = array(
      'title' => $this->randomString(),
      'field_ns_page_body[und][0][value]' => $this->loremIpsum(),
      'field_ns_page_byline[und][0][target_id]' => $reference,
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $created_node = array_pop(entity_load('node'));
    $this->drupalGet('node/' . $created_node->nid . '/edit');
    $this->assertFieldByName('field_ns_page_byline[und][0][target_id]', $reference);
  }

  /**
   * Test the link list extension.
   */
  function testLinkListExtension() {
    // Enable the contributor extension.
    // @todo Make a patch for default config that makes this easy.
    $components = defaultconfig_get_components();
    $optional = new stdClass();
    $optional->export_type = 0;
    $optional->name = 'field_default_fields:node-ns_page-field_ns_page_link_list';
    $optional->status = 1;
    ctools_export_crud_save('defaultconfig_optionals', $optional);
    defaultconfig_component_rebuild($components['field_default_fields'], 'ns_page');
    $this->assertFieldsExisting(array('field_ns_page_link_list'));
    $editor = $this->createContentEditor(array('ns_page'));
    $this->drupalLogin($editor);
    $this->drupalGet('node/add/ns-page');
    $this->assertField('field_ns_page_link_list[und][0][url]', t('The link list field is present.'));
    $edit = array(
      'title' => $this->randomString(),
      'field_ns_page_body[und][0][value]' => $this->loremIpsum(),
      'field_ns_page_link_list[und][0][url]' => 'http://drupal.org/',
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $created_node = array_pop(entity_load('node'));
    $this->drupalGet('node/' . $created_node->nid . '/edit');
    $this->assertFieldByName('field_ns_page_link_list[und][0][url]', 'http://drupal.org/');
  }


  /**
   * Test lead extension.
   */
  function testLeadExtension() {
    $components = defaultconfig_get_components();
    $optional = new stdClass();
    $optional->export_type = 0;
    $optional->name = 'field_default_fields:node-ns_page-field_ns_page_lead';
    $optional->status = 1;
    ctools_export_crud_save('defaultconfig_optionals', $optional);
    defaultconfig_component_rebuild($components['field_default_fields'], 'ns_page');
    $this->assertFieldsExisting(array('field_ns_page_lead'));
    $editor = $this->createContentEditor('ns_page');
    $this->drupalLogin($editor);
    $this->drupalGet('node/add/ns-page');
    $this->assertField('field_ns_page_lead[und][0][value]');
    $this->drupalGet('node/add/ns-page');
    $edit = array(
      'title' => $this->randomName(),
      'field_ns_page_body[und][0][value]' => $this->loremIpsum(),
      'field_ns_page_lead[und][0][value]' => $this->loremIpsum(),
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $nodes = entity_load('node');
    $node = array_pop($nodes);
    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->assertFieldByName('field_ns_page_lead[und][0][value]', $this->loremIpsum());
  }

  /**
   * Get a test page node.
   * @param mixed $related
   *   One related node nid or an array of related node nids that should be inserted into the related articles field.
   * @param int $author
   *   The author of the node. Defaults to anonymous.
   * @return array
   *   An array suitable to save through DrupalWebTestCase::drupalCreateNode().
   */
  private function getTestNode() {
    $node = array();
    $node['uid'] = 0;
    $node['type'] = 'ns_page';
    $node['title'] = $this->randomName();
    $node['status'] = 1;

    $node['field_ns_page_body'] = array(
      'und' => array(
        array(
          'value' => $this->loremIpsum(),
        ),
      ),
    );
    $node['field_ns_page_media'] = array(
      'und' => array(
        array(
          'fid' => $this->test_file->fid,
          'display' => TRUE,
        ),
      ),
    );
    return $node;
  }
}

/**
 * Test that users with different roles are experiencing the intended behavior.
 */
class NSPageRoleTestCase extends NodeStreamWebTestCase {
  /**
   * Definition.
   */
  public static function getInfo() {
    return array(
      'name' => 'Page permissions',
      'description' => 'Test that the defined roles have the access they are supposed to have.',
      'group' => 'NodeStream'
    );
  }

  /**
   * @see DrupalWebTestCase::setUp()
   */
  function setUp() {
    parent::setUp('ns_roles');
    module_enable(array('ns_page'));
  }

  /**
   * Test that the various roles have appropriate permissions.
   */
  function testRoles() {
    $content_type = 'ns_page';
    $writer = $this->role('writer');
    $writer->can()
      ->create($content_type)
      ->editOwn($content_type);
    $writer->cant()
      ->editOther($content_type)
      ->deleteOwn($content_type)
      ->deleteOther($content_type);
    // The following roles should be able to do anything:
    foreach (array('super user', 'chief editor', 'administrator', 'editor') as $role) {
      $this->role($role)->can()
        ->create($content_type)
        ->editOwn($content_type)
        ->editOther($content_type)
        ->deleteOwn($content_type)
        ->deleteOther($content_type);
    }
    // The following roles should not be able to do anything:
    foreach (array('translator', 'blogger') as $role) {
      $this->role($role)->cant()
        ->create($content_type)
        ->editOwn($content_type)
        ->editOther($content_type)
        ->deleteOwn($content_type)
        ->deleteOther($content_type);
    }
  }

  function role($role) {
    return new NSContentTypeAccessHelper($this, $role);
  }
}
