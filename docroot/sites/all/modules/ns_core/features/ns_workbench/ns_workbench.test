<?php
/**
 * @file
 * Tests for ns_workbench.
 */

/**
 * Test for the workbench and workbench moderation.
 */
class NSWorkbenchTestCase extends NodeStreamWebTestCase {

  /**
   * Definition.
   */
  public static function getInfo() {
    return array(
      'name' => 'Workbench',
      'description' => 'Test workbench functionality.',
      'group' => 'NodeStream'
    );
  }

  /**
   * @see DrupalWebTestCase::setUp()
   */
  function setUp() {
    parent::setUp('ns_roles');
    // The NodeStream installer install ns_roles before ns_article,
    // we need to simulate that.
    module_enable(array('ns_article', 'ns_workbench'));
  }

  /**
   * Test that the workbench workflow works
   * for roles that have access to it.
   */
  function testWorkbenchWorkFlow() {
    // Create a user with the writer role.
    $writer = $this->drupalCreateUser();
    $this->grantRoles($writer, array('writer'));
    $this->drupalLogin($writer);
    $this->drupalGet('admin/workbench');
    $this->assertResponse(200);
    $this->assertTitle(t('My Workbench | Drupal'));
    // Go to the article form and create an article.
    $this->drupalGet('node/add/ns-article');
    $edit = array(
      'title' => $this->randomName(),
      'field_ns_article_body[und][0][value]' => $this->loremIpsum(),
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertLink(t('Edit draft'), 0, "The edit tab is called 'edit draft'");
    $node = current(entity_load('node'));
    $this->assertFalse($node->status, 'The created node is unpublished');
    // The article should show up under my drafts.
    $this->assertTrue(user_access('use workbench_moderation my drafts tab'), 'user has access to view drafts');
    $this->drupalGet('admin/workbench/drafts');
    $this->assertText(t('My Drafts'));
    $this->assertText($node->title, 'A node created by a writer shows up under drafts.');
    $this->assertLink('Needs Review', 0, 'A needs review link exists');
    // Go to the moderation page and move the node to needs review.
    $this->drupalGet('node/' . $node->nid . '/moderation');
    $this->drupalPost(NULL, array('state' => 'needs_review'), t('Apply'));
    // Create an editor and log in.
    $editor = $this->drupalCreateUser();
    $this->grantRoles($editor, array('editor'));
    $this->drupalLogin($editor);
    // We should find the node under the needs review tab.
    $this->drupalGet('admin/workbench/needs-review');
    $this->assertText(t('Needs Review'));
    $this->assertText($node->title, 'The node that was moved to needs review were found.');
    $this->assertLink(t('Draft'), 0, 'The option to move the node back to draft exists.');
    $this->assertLink(t('Published'), 0, 'The option to move the node to published exists.');
    $this->drupalGet('node/' . $node->nid . '/moderation');
    $this->drupalPost(NULL, array('state' => 'published'), t('Apply'));
    // The node should be published now.
    $node = node_load($node->nid, NULL, TRUE);
    $this->assertTrue($node->status, 'The node is published');
    // The node should be accessible to anonymous users.
    $this->drupalLogout();
    $this->drupalGet('node/' . $node->nid);
    $this->assertResponse(200, 'The node is accessible to an anonymous user.');
    $this->assertText($node->title, 'The node title is present on the page');
  }

  /**
   * Get a test article node.
   */
  function getTestNode() {
    $node = array();
    $node['type'] = 'ns_article';
    $node['title'] = $this->randomName();
    $node['status'] = 1;
    $node['field_ns_article_body'] = array(
      'und' => array(
        array(
          'value' => $this->loremIpsum(),
        ),
      ),
    );
    $node['field_ns_article_lead'] = array(
      'und' => array(
        array(
          'value' => $this->loremIpsum(),
        ),
      ),
    );
    $node['field_ns_article_kicker'] = array(
      'und' => array(
        array(
          'value' => $this->randomString(),
        ),
      ),
    );
    return $node;
  }
}
