<?php
/**
 * @file
 * Tests for ns_contributor.
 */

/**
 * Basic test for the ns_contributor content type.
 */
class NSContributorTestCase extends NSContentProviderTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Contributors',
      'description' => 'Test contributor functionality.',
      'group' => 'NodeStream'
    );
  }

  function setUp() {
    parent::setUp('ns_contributor', 'media');
  }

  /**
   * Test basic CRUD functionality.
   */
  function testBasic() {
    $this->assertContentType('ns_contributor');
     // Get all fields and make sure the fields defined are there.
    $fields = array(
      'field_ns_contributor_about',
      'field_ns_contributor_email',
      'field_ns_contributor_photo',
      'field_ns_contributor_user',
    );
    $this->assertFieldsExisting($fields);
    // Create a test node.
    $original_node = $this->getTestNode();
    $test_node = $this->drupalCreateNode($original_node);
    // Ensure it's integrity by loading it from the database.
    $test_node = node_load($test_node->nid, NULL, TRUE);
    $this->assertEqual($test_node->field_ns_contributor_about['und'][0]['value'], $original_node['field_ns_contributor_about']['und'][0]['value']);
    $this->assertEqual($test_node->field_ns_contributor_email['und'][0]['email'], $original_node['field_ns_contributor_email']['und'][0]['email']);
    $this->assertEqual($test_node->field_ns_contributor_photo['und'][0]['fid'], $original_node['field_ns_contributor_photo']['und'][0]['fid']);
    $this->assertEqual($test_node->field_ns_contributor_user['und'][0]['target_id'], $original_node['field_ns_contributor_user']['und'][0]['target_id']);
  }

  function testForm() {
    // Create a node through the form
    $editor = $this->createContentEditor(array('ns_contributor'));
    $test_file = $this->createTestFile();
    $this->drupalLogin($editor);
    $this->drupalGet('node/add/ns-contributor');
    $this->assertField('field_ns_contributor_about[und][0][value]');
    $this->assertField('field_ns_contributor_email[und][0][email]');
    $this->assertField('field_ns_contributor_photo[und][0][fid]');
    $this->assertField('field_ns_contributor_user[und][0][target_id]');
    $values = array(
      'title' => $this->randomString(),
      'field_ns_contributor_about[und][0][value]' => $this->loremIpsum(),
      'field_ns_contributor_email[und][0][email]' => 'example@nodeone.se',
      'field_ns_contributor_photo[und][0][fid]' => $test_file->fid,
      'field_ns_contributor_user[und][0][target_id]' => "{$editor->name} ({$editor->uid})",
    );
    // Go to the node form and check the values.
    $this->drupalPost(NULL, $values, t('Save'));
    $this->drupalGet('node/1/edit');
    foreach ($values as $field => $value) {
      $this->assertFieldByName($field, $value);
    }
    // Delete the node.
    $this->assertDeleteForm($editor, 1);
  }

  /**
   * Get a suitable ns_contributor test node.
   */
  function getTestNode() {
    $node = array();
    $test_file = $this->createTestFile();

    $node['type'] = 'ns_contributor';
    $node['title'] = $this->randomName();
    $node['status'] = 1;
    $node['field_ns_contributor_about'] = array(
      'und' => array(
        array(
          'value' => $this->loremIpsum(),
        ),
      ),
    );
    $node['field_ns_contributor_email'] = array(
      'und' => array(
        array(
          'email' => 'example@nodeone.se',
        ),
      ),
    );
    $node['field_ns_contributor_photo'] = array(
      'und' => array(
        array(
          'fid' => $test_file->fid,
          'display' => TRUE,
        ),
      ),
    );
    $node['field_ns_contributor_user'] = array(
      'und' => array(
        array(
          'target_id' => 1,
        ),
      ),
    );
    return $node;
  }
}

/**
 * Test that users with different roles are experiencing the intended behavior.
 */
class NSContributorRoleTestCase extends NodeStreamWebTestCase {
  /**
   * Definition.
   */
  public static function getInfo() {
    return array(
      'name' => 'Contributor permissions',
      'description' => 'Test that the defined roles have the access they are supposed to have.',
      'group' => 'NodeStream'
    );
  }

  /**
   * @see DrupalWebTestCase::setUp()
   */
  function setUp() {
    parent::setUp('ns_roles');
    module_enable(array('ns_contributor'));
  }

  /**
   * Test that the various roles have appropriate permissions.
   */
  function testRoles() {
    $content_type = 'ns_contributor';
    foreach (array('blogger', 'writer') as $role) {
      // Writers and bloggers should be able to create and edit own contribtors.
      $user = $this->role($role);
      $user->can()
        ->create($content_type)
        ->editOwn($content_type);
      $user->cant()
        ->editOther($content_type)
        ->deleteOther($content_type)
        ->deleteOwn($content_type);
    }
    // The following roles should be able to do anything:
    foreach (array('editor', 'super user', 'chief editor', 'administrator') as $role) {
      $this->role($role)->can()
      ->create($content_type)
      ->editOwn($content_type)
      ->editOther($content_type)
      ->deleteOwn($content_type)
      ->deleteOther($content_type);
    }
    // Translators should not be able do anything.
    foreach (array('translator') as $role) {
      $this->role($role)->cant()
        ->create($content_type)
        ->editOwn($content_type)
        ->editOther($content_type)
        ->deleteOwn($content_type)
        ->deleteOther($content_type);
    }
  }

  function role($role) {
    return new NSContentTypeAccessHelper($this, $role);
  }
}
