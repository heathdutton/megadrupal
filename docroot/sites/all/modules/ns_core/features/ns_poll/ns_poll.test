<?php
/**
 * @file
 * Tests related to NS Poll.
 */

/**
 * Main Poll test case.
 */
class NSPollTestCase extends NSContentProviderTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Poll',
      'description' => 'Test poll functionality.',
      'group' => 'NodeStream'
    );
  }

  function setUp() {
    parent::setUp('ns_article', 'ns_page', 'ns_poll', 'poll', 'references_dialog');
  }

  /**
   * Test if the the core content type poll is exists.
   */
  function testNSPoll() {
    $types = node_type_get_types();
    $this->assertTrue(isset($types['poll']), t('The poll content type exists'));
  }

  function testNSPollInArticle() {
    // Get all fields and make sure the fields defined are there.
    $fields = array(
      'field_ns_poll_ns_article_poll',
    );
    $instance = field_info_instance('node', 'field_ns_poll_ns_article_poll', 'ns_article');
    // Make sure that the reference field for poll exists.
    $this->assertFieldsExisting($fields);
    // Make sure that the reference dialog view exists.
    $this->assertReferencesDialogView('ns_poll_reference_search', 'references_dialog_1', $instance);

    $admin_user = $this->drupalCreateUser(array('create poll content', 'administer nodes', 'bypass node access'));
    $web_user = $this->createContentEditor(array('poll', 'ns_article'));

    // Create poll node
    $poll_title = $this->randomName();
    $choices = $this->_generateChoices(7);
    $poll_nid = $this->pollCreate($poll_title, $choices, $admin_user, $web_user);

    // Create an NS Article node with the poll reference
    $this->assertTrue(TRUE, 'Create an article');
    $article = $this->drupalCreateNode($this->getTestArticleNode($poll_nid));
    $saved_article_node = node_load($article->nid, NULL, TRUE);
    $this->assertPollTestNode($saved_article_node, $poll_nid); // This might be not necesary(?)
  }

  function assertFieldsExisting($fields) {
    $existing_fields = field_info_fields();
    foreach ($fields as $field) {
      $this->assertTrue(isset($existing_fields[$field]), t('The field %field exists.', array('%field' => $field)));
    }
  }

  private function getTestArticleNode($poll = FALSE, $author = 0) {
    $node = array();
    $node['uid'] = $author;
    $node['type'] = 'ns_article';
    $node['title'] = $this->randomName();
    $node['status'] = 1;
    if ($poll) {
      $poll_entities = array();
      if (is_array($poll)) {
        foreach ($poll as $nid) {
          $poll_entities[] = array('target_id' => $nid);
        }
      }
      else {
        $poll_entities[] = array('target_id' => $poll);
      }
      $node['field_ns_poll_ns_article_poll'] = array('und' => $poll_entities);
    }
    return $node;
  }

  public function assertPollTestNode($node, $poll = FALSE) {
    if ($poll) {
      if (!is_array($poll)) {
        $poll = array($poll);
      }
      $entries = field_get_items('node', $node, 'field_ns_poll_ns_article_poll');
      $this->assertEqual(count($entries), count($poll));
      foreach ($entries as $key => $entry) {
        $this->assertEqual($entry['target_id'], $poll[$key]);
      }
    }
  }

  /**
   * Creates a poll.
   * @return
   *   The node id of the created poll, or FALSE on error.
   */
  function pollCreate($title, $choices, $admin_user, $web_user) {
    $this->assertTrue(TRUE, 'Create a poll');

    $this->drupalLogin($admin_user);

    // Get the form first to initialize the state of the internal browser.
    $this->drupalGet('node/add/poll');

    // Prepare a form with two choices.
    list($edit, $index) = $this->_pollGenerateEdit($title, $choices);

    // Verify that the vote count element only allows non-negative integers.
    $edit['choice[new:1][chvotes]'] = -1;
    $edit['choice[new:0][chvotes]'] = $this->randomString(7);
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertText(t('Negative values are not allowed.'));
    $this->assertText(t('Vote count for new choice must be an integer.'));

    // Repeat steps for initializing the state of the internal browser.
    $this->drupalLogin($web_user);
    $this->drupalGet('node/add/poll');
    list($edit, $index) = $this->_pollGenerateEdit($title, $choices);

    // Re-submit the form until all choices are filled in.
    if (count($choices) > 2) {
      while ($index < count($choices)) {
        $this->drupalPost(NULL, $edit, t('More choices'));
        $this->assertPollChoiceOrder($choices, $index);
        list($edit, $index) = $this->_pollGenerateEdit($title, $choices, $index);
      }
    }

    $this->drupalPost(NULL, $edit, t('Save'));
    $node = $this->drupalGetNodeByTitle($title);
    $this->assertText(t('@type @title has been created.', array('@type' => node_type_get_name('poll'), '@title' => $title)), 'Poll has been created.');
    $this->assertTrue($node->nid, t('Poll has been found in the database.'));

    return isset($node->nid) ? $node->nid : FALSE;
  }

  /**
   * Generates POST values for the poll node form, specifically poll choices.
   * @return
   *   An indexed array containing:
   *   - The generated POST values, suitable for
   *     DrupalWebTestCase::drupalPost().
   *   - The number of poll choices contained in 'edit', for potential re-usage
   *     in subsequent invocations of this function.
   */
  function _pollGenerateEdit($title, array $choices, $index = 0) {
    $max_new_choices = ($index == 0 ? 2 : 5);
    $already_submitted_choices = array_slice($choices, 0, $index);
    $new_choices = array_values(array_slice($choices, $index, $max_new_choices));

    $edit = array(
      'title' => $title,
    );
    foreach ($already_submitted_choices as $k => $text) {
      $edit['choice[chid:' . $k . '][chtext]'] = $text;
    }
    foreach ($new_choices as $k => $text) {
      $edit['choice[new:' . $k . '][chtext]'] = $text;
    }
    return array($edit, count($already_submitted_choices) + count($new_choices));
  }

  function _generateChoices($count = 7) {
    $choices = array();
    for ($i = 1; $i <= $count; $i++) {
      $choices[] = $this->randomName();
    }
    return $choices;
  }

  /**
   * Assert correct poll choice order in the node form after submission.
   */
  function assertPollChoiceOrder(array $choices, $index = 0) {
    $expected = array();
    $weight = 0;
    foreach ($choices as $id => $label) {
      if ($id < $index) {
        // The expected weight of each choice is higher than the previous one.
        $weight++;
        // Directly assert the weight form element value for this choice.
        $this->assertFieldByName('choice[chid:' . $id . '][weight]', $weight, t('Found choice @id with weight @weight.', array(
          '@id' => $id,
          '@weight' => $weight,
        )));
        // Append to our (to be reversed) stack of labels.
        $expected[$weight] = $label;
      }
    }
    ksort($expected);

    // Verify DOM order of poll choices (i.e., #weight of form elements).
    $elements = $this->xpath('//input[starts-with(@name, :prefix) and contains(@name, :suffix)]', array(
      ':prefix' => 'choice[chid:',
      ':suffix' => '][chtext]',
    ));
    $expected_order = $expected;
    foreach ($elements as $element) {
      $next_label = array_shift($expected_order);
      $this->assertEqual((string) $element['value'], $next_label);
    }
  }
}

/**
 * Test that users with different roles are experiencing the intended behavior.
 */
class NSPollRoleTestCase extends NodeStreamWebTestCase {
  /**
   * Definition.
   */
  public static function getInfo() {
    return array(
      'name' => 'Poll permissions',
      'description' => 'Test that the defined roles have the access they are supposed to have.',
      'group' => 'NodeStream'
    );
  }

  /**
   * @see DrupalWebTestCase::setUp()
   */
  function setUp() {
    parent::setUp('ns_roles');
    module_enable(array('ns_poll'));
  }

  /**
   * Test that the various roles have appropriate permissions.
   */
  function testRoles() {
    $content_type = 'poll';
    // Writers should be able to create and edit own polls.
    $writer = $this->role('writer');
    $writer->can()
      ->create($content_type)
      ->editOwn($content_type);
    $writer->cant()
      ->editOther($content_type)
      ->deleteOther($content_type)
      ->deleteOwn($content_type);
    // The following roles should be able to do anything:
    foreach (array('editor', 'super user', 'chief editor', 'administrator') as $role) {
      $this->role($role)->can()
        ->create($content_type)
        ->editOwn($content_type)
        ->editOther($content_type)
        ->deleteOwn($content_type)
        ->deleteOther($content_type);
    }
    // Translators and bloggers should not be able do anything.
    foreach (array('blogger', 'translator') as $role) {
      $this->role($role)->cant()
        ->create($content_type)
        ->editOwn($content_type)
        ->editOther($content_type)
        ->deleteOwn($content_type)
        ->deleteOther($content_type);
    }
    // Authenticated users should be able to vote.
    $this->role('authenticated')->can()
      ->vote();
    $this->role('anonymous')->cant()
      ->vote();
  }

  function role($role) {
    return new NSPollAccessHelper($this, $role);
  }
}

/**
 * Extends the access helper with methods for checking that users can vote.
 */
class NSPollAccessHelper extends NSContentTypeAccessHelper {
  function __construct($test_case, $role) {
    parent::__construct($test_case, $role);
    $this->contentDefaults = array(
      'active' => TRUE,
      'runtime' => 0,
      'uid' => 0,
      'type' => 'poll',
      'allowvotes' => TRUE,
      'choice' => array(
        1 => array(
          'chtext' => 'test',
          'chvotes' => 0,
          'weight' => 1,
        ),
        2 => array(
          'chtext' => 'test2',
          'chvotes' => 0,
          'weight' => 1,
        ),
      ),
    );
  }

  /**
   * Check that a role can or can't vote.
   */
  function vote($message = NULL) {
    if (empty($message)) {
      $message = "$this->role $this->verb vote on polls";
    }
    $node = $this->drupalCreateNode($this->contentDefaults);
    $this->drupalGet('node/' . $node->nid);
    $this->verb == 'can' ? $this->assertField('op', $message) : $this->assertNoField('op', $message);
    return $this;
  }
}
