<?php
/**
 * @file
 * Tests for advertisments.
 */

/**
 * Basic test for the form content type.
 */
class NSFormTestCase extends NSContentProviderTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Form',
      'description' => 'Test webform functionality.',
      'group' => 'NodeStream'
    );
  }

  function setUp() {
    parent::setUp('ns_form', 'ns_article');
  }

  /**
   * Test basic configuration.
   */
  function testBasic() {
    // Make sure the default content type doesn't exist.
    $this->assertNoContentType('webform');
    $this->assertContentType('ns_form');
    // Get all fields and make sure the fields defined are there.
    $fields = array(
      'field_ns_form_ns_article_form',
    );
    $webform_types = variable_get('webform_node_types');
    $this->assertTrue(in_array('ns_form', $webform_types), t('ns_form is a webform node type.'));
    $this->assertFieldsExisting($fields);
  }

  /**
   * Test attaching a form to an article.
   */
  function testArticleAttachment() {
    // Create an article through the form.
    $editor = $this->createContentEditor(array('ns_form', 'ns_article'));
    $form = $this->drupalCreateNode(array('type' => 'ns_form', 'status' => 1, 'uid' => $editor->uid));
    $this->drupalLogin($editor);
    $this->drupalGet('node/' . $form->nid . '/edit');
    $this->drupalGet('node/add/ns-article');
    $this->assertField('field_ns_form_ns_article_form[und][0][target_id]');
    $reference = "{$form->title} ({$form->nid})";
    $values = array(
      'title' => $this->randomString(),
      'field_ns_article_body[und][0][value]' => $this->loremIpsum(),
      'field_ns_form_ns_article_form[und][0][target_id]' => $reference,
    );
    // Go to the ad form and check the values.
    $this->drupalPost(NULL, $values, t('Save'));
    $this->drupalGet('node/2/edit');
    $this->assertFieldByName('field_ns_form_ns_article_form[und][0][target_id]', $reference);
  }
}

/**
 * Test that users with different roles are experiencing the intended behavior.
 */
class NSFormRoleTestCase extends NodeStreamWebTestCase {
  /**
   * Definition.
   */
  public static function getInfo() {
    return array(
      'name' => 'Form permissions',
      'description' => 'Test that the defined roles have the access they are supposed to have.',
      'group' => 'NodeStream'
    );
  }

  /**
   * @see DrupalWebTestCase::setUp()
   */
  function setUp() {
    parent::setUp('ns_roles');
    module_enable(array('ns_form'));
  }

  /**
   * Test that the various roles have appropriate permissions.
   */
  function testRoles() {
    $content_type = 'ns_form';
    // Writers should be able to create and edit own forms.
    $writer = $this->role('writer');
    $writer->can()
      ->create($content_type)
      ->editOwn($content_type);
    $writer->cant()
      ->editOther($content_type)
      ->deleteOther($content_type)
      ->deleteOwn($content_type);
    // The following roles should be able to do anything:
    foreach (array('editor', 'super user', 'chief editor', 'administrator') as $role) {
      $this->role($role)->can()
      ->create($content_type)
      ->editOwn($content_type)
      ->editOther($content_type)
      ->deleteOwn($content_type)
      ->deleteOther($content_type);
    }
    // Translators and bloggers should not be able do anything.
    foreach (array('blogger', 'translator') as $role) {
      $this->role($role)->cant()
        ->create($content_type)
        ->editOwn($content_type)
        ->editOther($content_type)
        ->deleteOwn($content_type)
        ->deleteOther($content_type);
    }
  }

  function role($role) {
    return new NSContentTypeAccessHelper($this, $role);
  }
}
