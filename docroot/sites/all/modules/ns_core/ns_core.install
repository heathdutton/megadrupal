<?php

/**
 * Change field names and enable ns_prod_news if ns_ch_web was enabled before.
 */
function ns_core_update_7201() {
  $field = field_info_field('field_ns_ch_web_topic');
  if (!empty($field)) {
    $fields = array(
      'field_ns_ch_web_topic' => 'field_ns_prod_news_topic',
      'field_ns_ch_web_region' => 'field_ns_prod_news_region',
      'field_ns_ch_web_promo_article' => 'field_ns_prod_news_promo_article',
      'field_ns_ch_web_promo_kicker' => 'field_ns_prod_news_promo_kicker',
      'field_ns_ch_web_promo_lead' => 'field_ns_prod_news_promo_lead',
      'field_ns_ch_web_promo_media' => 'field_ns_prod_news_promo_media',
      'field_ns_ch_web_promo_style' => 'field_ns_prod_promo_style',
      'field_ns_ch_web_region' => 'field_ns_prod_news_region',
      'field_ns_ch_web_width' => 'field_ns_prod_news_width',
    );
    foreach ($fields as $old => $new) {
      ns_core_change_field_name($old, $new);
    }
    // Create the new node type.
    $type = node_type_load('ns_ch_web_promo');
    $type->old_type = $type->type;
    $type->type = 'ns_prod_news_promo';
    node_type_save($type);
    module_enable(array('ns_prod_news'));
    // Make sure all promos have the right type.
    db_update('node')
      ->fields(array('type' => 'ns_prod_news_promo'))
      ->condition('type', 'ns_ch_web_promo')
      ->execute();
    drupal_flush_all_caches();
  }
}

/**
 * Change field names from ns_ch_rss to ns_prod_rss
 */
function ns_core_update_7202() {
  $field = field_info_field('field_ns_ch_rss_topic');
  if (!empty($field)) {
    $fields = array(
      'field_ns_ch_rss_topic' => 'field_ns_prod_news_topic',
      'field_ns_ch_rss_promo_article' => 'field_ns_prod_rss_promo_article',
      'field_ns_ch_rss_promo_kicker' => 'field_ns_prod_rss_promo_kicker',
      'field_ns_ch_rss_promo_lead' => 'field_ns_prod_rss_promo_lead',
      'field_ns_ch_rss_promo_media' => 'field_ns_prod_rss_promo_media',
      'field_ns_ch_rss_web_topic' => 'field_ns_prod_rss_web_topic',
    );
    foreach ($fields as $old => $new) {
      ns_core_change_field_name($old, $new);
    }
    // Create the new node type.
    $type = node_type_load('ns_ch_rss_promo');
    $type->old_type = $type->type;
    $type->type = 'ns_prod_rss_promo';
    node_type_save($type);
    // Change the name of the taxonomy vocabulary.
    $vocabulary = taxonomy_vocabulary_machine_name_load('ns_ch_rss_topic');
    $vocabulary->machine_name = 'ns_prod_rss_topic';
    taxonomy_vocabulary_save($vocabulary);
    module_enable(array('ns_prod_rss'));
    // Make sure all promos have the right type.
    db_update('node')
      ->fields(array('type' => 'ns_prod_rss_promo'))
      ->condition('type', 'ns_ch_rss_promo')
      ->execute();
    drupal_flush_all_caches();
  }
}

/**
 * Change a file field into a media field. Use this if you want to get
 * out of the media field jail and use the core file field instead.
 * @param $name
 *   The name of the field.
 */
function ns_core_change_media_field($name) {
  // We need to modify the data directly in the field_instance table, since the field api normally don't let us
  // change type.
  $field = field_info_field($name);
  $field['type'] = 'file';
  $field['module'] = 'file';
  db_update('field_config')
    ->fields(array('data' => serialize($field), 'type' => 'file', 'module' => 'file'))
    ->condition('field_name', $name)
    ->execute();
  // Change the field definition table.
  module_load_include('install', 'file');
  $schema = file_field_schema(array());
  foreach (array('field_data_', 'field_revision_') as $prefix) {
    $table = $prefix . $name;
    db_add_field($table, $name . '_display', $schema['columns']['display']);
    db_add_field($table, $name . '_description', $schema['columns']['description']);
    db_drop_field($table, $name . '_title');
    db_drop_field($table, $name . '_data');
  }
}

function ns_core_update_media_instance($entity_type, $bundle, $field) {
  $instance = field_info_instance($entity_type, $field, $bundle);
  $instance['settings']['file_extensions'] = 'png gif jpg jpeg';
  foreach ($instance['display'] as &$display) {
    // Change the module for each display.
    $display['module'] = 'file';
    $display['type'] = 'file_default';
  }
}

/**
 * Migrate node reference field into an entity reference field.
 */
function ns_core_migrate_references_field($name) {
  // Enable the entity reference field if it is not enabled.
  if (!module_exists('entityreference')) {
    module_enable(array('entityreference'));
  }
  // We need to modify the data directly in the field_instance table, since the field api normally don't let us
  // change type.
  $field = field_info_field($name);
  if (empty($field)) {
    return FALSE;
  }
  $bundles = array();
  foreach ($field['settings']['referenceable_types'] as $type => $value) {
    if ($value) {
      $bundles[$type] = $type;
    }
  }
  $type = $field['type'] == 'node_reference' ? 'node' : 'user';
  $entity_id_col = $field['type'] == 'node_reference' ? 'nid' : 'uid';
  $field['type'] = 'entityreference';
  $field['module'] = 'entityreference';
  $field['foreign keys'] = array();
  $field['indexes'] = array(
    'target_entity' => array('target_type', 'target_id'),
  );
  $field['settings'] = array(
    'handler' => 'base',
    'handler_settings' => array(
    'target_bundles' => $bundles,
    ),
    'handler_submit' => 'Change handler',
    'target_type' => $type,
  );
  db_update('field_config')
    ->fields(array('data' => serialize($field), 'type' => 'entityreference', 'module' => 'entityreference'))
    ->condition('field_name', $name)
    ->execute();
  // Change the field definition table.
  module_load_include('install', 'entityreference');
  $schema = entityreference_field_schema($field);

  foreach (array('field_data_', 'field_revision_') as $prefix) {
    $table = $prefix . $name;
    db_drop_index($table, $name . '_' . $entity_id_col);
    db_change_field($table, $name . '_' . $entity_id_col, $name . '_' . 'target_id', $schema['columns']['target_id']);
    $index = array();
    foreach ($schema['indexes']['target_id'] as $col) {
      $index[] = $name . '_' . $col;
    }
    db_add_index($table, $name . '_target_id', $index);
  }
  _field_info_collate_fields(TRUE);
  foreach ($field['bundles'] as $entity_type => $bundles) {
    foreach ($bundles as $bundle) {
      $instance = field_info_instance($entity_type, $name, $bundle);
      ns_core_migrate_references_instance($entity_type, $field, $instance);
    }
  }
  _field_info_collate_fields(TRUE);
}

/**
 * Change the name of a field.
 * @param $field_name
 * @param $new_name
 */
function ns_core_change_field_name($field_name, $new_name) {
  $field = field_info_field($field_name);
  // No field? No candy.
  if (empty($field)) {
    return FALSE;
  }
  $instances = field_read_instances(array('field_name' => $field_name));
  $field['field_name'] = $new_name;
  // This operation is not supported by the API, so we will do this the hard way.
  db_update('field_config')
  ->fields(array('data' => serialize($field), 'field_name' => $new_name))
  ->condition('field_name', $field_name)
  ->execute();
  _field_info_collate_fields(TRUE);
  // Update instances.
  foreach ($instances as $instance) {
    $instance['field_name'] = $new_name;
    db_update('field_config_instance')
      ->fields(array('data' => serialize($instance), 'field_name' => $new_name))
      ->condition('field_name', $field_name)
      ->execute();
  }
  // Update the schema.
  $schema = module_invoke($field['module'], 'field_schema', $field);
  foreach (array('field_data_', 'field_revision_') as $prefix) {
    $old_table = $prefix . $field_name;
    $new_table = $prefix . $new_name;
    foreach ($schema['columns'] as $column => $definition) {
      db_change_field($old_table, $field_name . '_' . $column, $new_name . '_' . $column, $definition);
    }
    db_rename_table($old_table, $new_table);
  }
  _field_info_collate_fields(TRUE);
  drupal_flush_all_caches();
}

/**
 * Migrate image fields into a file field.
 */
function ns_core_migrate_image_field($name, $instance_settings, $widget_settings) {
  // We need to modify the data directly in the field_instance table, since the field api normally don't let us
  // change type.
  $field = field_info_field($name);
  $field['type'] = 'file';
  $field['module'] = 'file';
  db_update('field_config')
    ->fields(array('data' => serialize($field), 'type' => 'file', 'module' => 'file'))
    ->condition('field_name', $name)
    ->execute();
  // Change the field definition table.
  module_load_include('install', 'file');
  $schema = file_field_schema(array());
  foreach (array('field_data_', 'field_revision_') as $prefix) {
    $table = $prefix . $name;
    db_add_field($table, $name . '_display', $schema['columns']['display']);
    db_add_field($table, $name . '_description', $schema['columns']['description']);
    db_drop_field($table, $name . '_title');
    db_drop_field($table, $name . '_alt');
    db_drop_field($table, $name . '_width');
    db_drop_field($table, $name . '_height');
  }
  $instances = field_read_instances(array('field_name' => $name));
  foreach ($instances as $instance) {
    $instance['widget']['module'] = 'media';
    $instance['widget']['type'] = 'media_generic';
    $instance['widget']['settings'] = $widget_settings;
    $instance['settings'] = $instance_settings;
    foreach ($instance['display'] as &$display) {
      $display['type'] = 'file_generic';
      $display['settings'] = array();
    }
    db_update('field_config_instance')
      ->fields(array('data' => serialize($instance), 'field_name' => $name))
      ->condition('field_name', $name)
      ->execute();
  }
  drupal_flush_all_caches();
}

function ns_core_migrate_references_instance($entity_type, $field, $instance) {
  $instance['widget']['module'] = 'entityreference';
  $instance['widget']['type'] = 'entityreference_autocomplete';
  $instance['widget']['settings'] = array(
    'match_operator' => 'CONTAINS',
    'path' => '',
    'references_dialog_add' => 1,
    'references_dialog_edit' => 1,
    'references_dialog_search' => 1,
    'size' => '60',
  );
  foreach ($instance['display'] as &$display) {
    // Change the module for each display.
    $display['module'] = 'entityreference';
    $display['type'] = 'entityreference_label';
    $display['settings'] = array(
      'link' => FALSE,
    );
  }
  field_update_instance($instance);
}
