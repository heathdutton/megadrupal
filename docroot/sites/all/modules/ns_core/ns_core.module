<?php

/**
 * @file
 * This file contains some basic functions that are used as helpers
 * around NodeStream as well has hook implementations.
 */

/**
 * Implements of hook_theme().
 */
function ns_core_theme() {
  return array(
     // For our local tasks in the admin menu.
    'ns_core_local_tasks' => array(
      'variables' => array(),
      'file' => 'theme/theme.inc',
    ),
    // Our special page title, defined in the page title content pane.
    'ns_core_page_title' => array(
      'variables' => array('title' => NULL),
      'file' => 'theme/theme.inc',
    ),
    // Theme function for our custom date content type.
    'ns_core_node_date_custom' => array(
      'variables' => array('date' => NULL, 'title' => NULL, 'conf' => NULL),
      'file' => 'theme/theme.inc',
    ),
    'ns_core_today_date' => array(
      'variables' => array('date' => NULL, 'title' => NULL, 'conf' => NULL),
      'file' => 'theme/theme.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function ns_core_permission() {
  return array(
    'manage topic regions' => array(
      'title' => t('Manage topic regions'),
      'description' => t('Handle topic regions.'),
    ),
  );
}

/**
 * Implements of hook_ctools_plugin_directory().
 */
function ns_core_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' || $module == 'panels') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements of hook_ctools_plugin_api().
 */
function ns_core_ctools_plugin_api($module, $api) {
  if ($module == 'dynamic_formatters' && $api == 'dynamic_formatters_default') {
    return array('version' => 1);
  }
}

/**
 * Wrapper function around filter_xss() with some additions.
 */
function ns_core_filter_xss($string, $allowed_tags = array('a', 'em', 'strong', 'cite', 'code', 'ul', 'ol', 'li', 'dl', 'dt', 'dd', 'br')) {
  return filter_xss($string, $allowed_tags);
}

/**
 * Implements hook_modules_disabled().
 * Remove content type when modules defining that content type is disabled.
 */
function ns_core_modules_disabled($modules) {
  $types = node_type_get_types();
  foreach ($types as $type => $info) {
    if (in_array($info->module, $modules)) {
      node_type_delete($type);
    }
  }
}

/**
 * Implements hook_modules_enabled().
 */
function ns_core_modules_enabled($modules) {
  ns_core_remove_fields($modules);
}

/**
 * Remove any fields that are specified as not wanted by modules.
 * @param array $modules
 *   The modules to remove fields for.
 */
function ns_core_remove_fields(array $modules) {
  $files = system_rebuild_module_data();
  foreach ($modules as $module) {
     if (isset($files[$module]->info['nodestream_fields']['delete']) && is_array($files[$module]->info['nodestream_fields']['delete'])) {
       foreach ($files[$module]->info['nodestream_fields']['delete'] as $delete_field) {
         field_delete_field($delete_field);
       }
     }
  }
}

/**
 * Helper function for enabling panels everywhere.
 */
function ns_core_enable_panels_everywhere() {
  if (module_exists('panels_everywhere') && module_exists('page_manager')) {
    // Enable the site template.
    variable_set('panels_everywhere_site_template_enabled', 1);
    // Make sure the site template sample variant is disabled.
    ctools_include('export');
    $task = page_manager_get_task('site_template');
    $handlers = page_manager_load_task_handlers($task);
    if (isset($handlers['site_template_panel_context_basic'])) {
      $handler = $handlers['site_template_panel_context_basic'];
      ctools_export_set_object_status($handler, TRUE);
    }
  }
}

/**
 * Helper function for enabling panels node view.
 */
function ns_core_enable_panels_node_view() {
  variable_set('page_manager_node_view_disabled', 0);
  variable_set('workbench_panels_node_draft_disabled', 0);
  variable_set('workbench_panels_node_revision_disabled', 0);
}

/**
 * Helper function for enabling panels term view.
 */
function ns_core_enable_panels_term_view() {
  variable_set('page_manager_term_view_disabled', 0);
}

/**
 * Helper function for enabling panels user view.
 */
function ns_core_enable_panels_user_view() {
  variable_set('page_manager_user_view_disabled', 0);
}

/**
 * Set the enabled view modes for a field bundle.
 * @param string $entity_type
 *   The entity type.
 * @param string $bundle
 *   The bundle
 * @param string $enabled_view_modes
 *   The view modes that should be enabled. All other will have it's custom
 *   display settings disabled.
 */
function ns_core_set_bundle_enabled_view_modes($entity_type, $bundle, $enabled_view_modes) {
  // Check that the specified entity type and bundle exists, and bail if they don't
  $settings = field_bundle_settings($entity_type, $bundle);
  $view_mode_settings = field_view_mode_settings($entity_type, $bundle);
  $settings['view_modes'] = array();
  foreach ($enabled_view_modes as $view_mode) {
    $settings['view_modes'][$view_mode]['custom_settings'] = 1;
  }
  field_bundle_settings($entity_type, $bundle, $settings);
}

/**
 * Generic function that modifies some variables in all Precision layouts.
 */
function ns_core_check_layout_variables(&$vars) {
  $vars['css_id'] = strtr($vars['css_id'], '_', '-');
}
/**
 * Implements hook_defaultconfig_components().
 */
function ns_core_defaultconfig_components() {
  // In some instances, we need to be able to create terms upon installation.
  // In order to let things like this happen smooothly and safely, we implement
  // this here.
  return array(
    'taxonomy_default_terms' => array(
      'rebuild callback' => 'ns_core_rebuild_terms',
      'label' => t('Terms'),
      'group' => 'ns_core.default_terms',
      'weight' => 10,
    ),
  );
}

/**
 * Implements hook_entity_info_alter().
 */
function ns_core_entity_info_alter(&$entity_info) {
  // Let's use our own entity translation handler until #1807776
  // is solved.
  if (module_exists('entity_translation')) {
    $entity_info['file']['translation']['entity_translation']['class'] = 'NSCoreMediaEntityTranslationHandler';
  }
}

/**
 * Rebuild terms for a particular module.
 */
function ns_core_rebuild_terms($info, $terms, $module = FALSE) {
  // Do not attempt this without the uuid module.
  if (module_exists('uuid') && !empty($terms)) {
    // Make sure taxonomies are built for this module.
    if (!empty($module)) {
      module_load_include('export.inc', 'features');
      features_include();
      taxonomy_features_rebuild($module);
    }
    drupal_static_reset('taxonomy_vocabulary_get_names');
    $vocabularies = taxonomy_vocabulary_get_names();
    foreach ($terms as $uuid => $term) {
      $term['vid'] = $vocabularies[$term['vocabulary_machine_name']]->vid;
      // Check if we need to save this term in the menu.
      if (isset($term['menu'])) {
        $item = $term['menu'];
        if (!isset($item['link_title'])) {
          $item['link_title'] = $term['name'];
        }
        unset($term['menu']);
      }
      $term = (object)$term;
      if (module_exists('uuid_taxonomy')) {
        $term->tid = uuid_taxonomy_term_find($uuid);
        $new_term = empty($term->tid);
        taxonomy_term_save($term);
      }
      else {
        $new_term = !in_array($uuid, entity_uuid_load('taxonomy_term', array($uuid)));
        entity_uuid_save('taxonomy_term', $term);
      }
      // Save this term to the menu if we have a menu item and a tid.
      if ($new_term && isset($item) && isset($term->tid)) {
        $item['link_path'] = 'taxonomy/term/' . $term->tid;
        // Set frontpage if the term indicates it want that.
        if (!empty($item['frontpage'])) {
          variable_set('site_frontpage', $item['link_path']);
        }
        menu_link_save($item);
        unset($item);
      }
    }
  }
}
