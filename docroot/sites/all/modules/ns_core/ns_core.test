<?php

class NSCoreReferenceMigrationTest extends NodeStreamWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Migrate to entity reference',
      'description' => 'Test migration to entity references',
      'group' => 'NodeStream'
    );
  }

  function setUp() {
    parent::setUp(
      'ns_core',
      'node_reference',
      'user_reference',
      'entityreference',
      'ns_core_test'
    );
    $this->testUser = $this->drupalCreateUser(array('access content'));
    module_load_install('ns_core');
  }

  /**
   * Create a node reference field and migrate it to an entity reference field.
   */
  function testEntityReferenceMigration() {
    module_load_include('ns_core', 'install');
    // Save some stuff.
    $node_ref_field = $this->getTestField('field_node_reference_test', 'node_reference');
    $user_ref_field = $this->getTestField('field_user_reference_test', 'user_reference');
    field_create_field($node_ref_field['field_config']);
    field_create_instance($node_ref_field['field_instance']);
    field_create_field($user_ref_field['field_config']);
    field_create_instance($user_ref_field['field_instance']);

    // Save a test node
    $first_node = $this->getTestNode();
    node_save($first_node);
    $second_node = $this->getTestNode($first_node->nid);
    node_save($second_node);
    ns_core_migrate_references_field('field_node_reference_test');
    ns_core_migrate_references_field('field_user_reference_test');
    $node_ref_field_info = field_info_field('field_node_reference_test');
    $user_ref_field_info = field_info_field('field_user_reference_test');
    $this->_testField($node_ref_field_info);
    $this->_testField($user_ref_field_info);
    // Check our node.
    $updated_node = node_load($second_node->nid, NULL, TRUE);
    $this->assertEqual($updated_node->field_node_reference_test['und'][0]['target_id'], $first_node->nid);
    $this->assertEqual($updated_node->field_user_reference_test['und'][0]['target_id'], $this->testUser->uid);

    // Create a new node and update an existing node and see if something fails.
    $new_node = $this->getNewTestNode($second_node->nid);
    node_save($new_node);
    $updated_node->field_node_reference_test['und'][0]['target_id'] = $new_node->nid;
    node_save($updated_node);
  }

  function _testField($field_info) {
    $this->assertEqual($field_info['type'], 'entityreference');
    $this->assertEqual($field_info['module'], 'entityreference');
    foreach ($field_info['bundles'] as $entity_type => $bundles) {
      foreach ($bundles as $bundle) {
        $instance = field_info_instance($entity_type, $field_info['field_name'], $bundle);
        $this->assertEqual($instance['widget']['module'], 'entityreference');
      }
    }
  }

  private function getTestNode($refer_to = 0) {
    $node = new stdClass();
    $node->uid = 0;
    $node->type = 'ns_core_test';
    $node->title = $this->randomName();
    $node->status = 1;
    $node->field_user_reference_test = array(
      'und' => array(
        array(
          'uid' => $this->testUser->uid,
        ),
      ),
    );
    if ($refer_to) {
      $node->field_node_reference_test = array(
        'und' => array(
          array(
            'nid' => $refer_to,
          ),
        ),
      );
    }
    return $node;
  }

  private function getNewTestNode($refer_to = 0) {
    $node = new stdClass();
    $node->uid = 0;
    $node->type = 'ns_core_test';
    $node->title = $this->randomName();
    $node->status = 1;
    $node->field_user_reference_test = array(
      'und' => array(
        array(
          'target_id' => $this->testUser->uid,
        ),
      ),
    );
    if ($refer_to) {
      $node->field_node_reference_test = array(
        'und' => array(
          array(
            'target_id' => $refer_to,
          ),
        ),
      );
    }
    return $node;
  }

  private function getTestField($name, $type) {
    if ($type == 'node_reference') {
      $col = 'nid';
      $entity_type = 'node';
    }
    else {
      $col = 'uid';
      $entity_type = 'user';
    }
    return array(
      'field_config' => array(
        'active' => '1',
        'cardinality' => '-1',
        'deleted' => '0',
        'entity_types' => array(),
        'field_name' => $name,
        'foreign keys' => array(
          'nid' => array(
            'columns' => array(
              $col => $col,
            ),
            'table' => $entity_type,
          ),
        ),
        'indexes' => array(
          $col => array(
            0 => $col,
          ),
        ),
        'module' => $type,
        'settings' => array(
          'referenceable_types' => array(
            'ns_core_test' => 'ns_core_test',
          ),
          'view' => array(
            'args' => array(),
            'display_name' => '',
            'view_name' => '',
          ),
        ),
        'translatable' => '1',
        'type' => $type,
      ),
      'field_instance' => array(
        'bundle' => 'ns_core_test',
        'default_value' => NULL,
        'deleted' => '0',
        'description' => '',
        'display' => array(
          'default' => array(
            'label' => 'above',
            'module' => $type,
            'settings' => array(),
            'type' => $type . '_default',
            'weight' => '4',
          ),
          'search_index' => array(
            'label' => 'hidden',
            'module' => 'node_reference',
            'settings' => array(),
            'type' => $type . '_default',
            'weight' => '9',
          ),
          'search_result' => array(
            'label' => 'hidden',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => '8',
          ),
          'teaser' => array(
            'label' => 'above',
            'settings' => array(),
            'type' => 'hidden',
            'weight' => 0,
          ),
        ),
        'entity_type' => 'node',
        'field_name' => $name,
        'label' => 'Test',
        'required' => 0,
        'settings' => array(
          'crossclone' => array(
            'couple_setting' => 0,
            'coupling' => 0,
            'delete_setting' => 0,
          ),
          'user_register_form' => FALSE,
        ),
        'widget' => array(
          'active' => 1,
          'module' => $type,
          'settings' => array(
            'autocomplete_match' => 'contains',
            'autocomplete_path' => $type . '/autocomplete',
            'size' => '60',
          ),
          'type' => $type . '_autocomplete',
          'weight' => '4',
        ),
      ),
    );
  }
}

class NSCoreChangeFieldNameTest extends NodeStreamWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Change field name',
      'description' => 'Test changing a field name',
      'group' => 'NodeStream'
    );
  }

  function setUp() {
    parent::setUp(
      'ns_core',
      'text',
      'list'
    );
  }

  function testNameChange() {
    $type = $this->drupalCreateContentType(array('type' => 'test'));
    $field = $this->getTestField('node', 'test', 'field_test_field');
    $result = field_create_field($field['field']);
    foreach ($field['instances'] as $instance) {
      field_create_instance($instance);
    }
    _field_info_collate_fields(TRUE);
    // Create a node.
    $field_value = $this->randomString();
    $node = $this->drupalCreateNode(array(
        'type' => 'test',
        'field_test_field' => array('und' => array(array('value' => $field_value))),
      )
    );
    ns_core_change_field_name('field_test_field', 'field_changed_field');
    $this->assertTrue(field_info_field('field_changed_field'), t('The name of the field has changed'));
    // Reload the node and check if the value is still there.
    $node = node_load($node->nid, NULL, TRUE);
    $this->assertEqual($node->field_changed_field['und'][0]['value'], $field_value, t('The field value is still there.'));
  }

  function getTestField($entity_type, $bundle, $name) {
    return array(
      'field' => array(
        'entity_types' => array(),
        'foreign keys' => array(
          'format' => array(
            'table' => 'filter_format',
            'columns' => array(
              'format' => 'format',
            ),
          ),
        ),
        'indexes' => array(
          'format' => array(
            0 => 'format',
          ),
        ),
        'settings' => array(
          'max_length' => '255',
        ),
        'translatable' => '1',
        'field_name' => $name,
        'type' => 'text',
        'module' => 'text',
        'active' => '1',
        'locked' => '0',
        'cardinality' => '1',
        'deleted' => '0',
        'columns' => array(
          'value' => array(
            'type' => 'varchar',
            'length' => '255',
            'not null' => FALSE,
          ),
          'format' => array(
            'type' => 'varchar',
            'length' => 255,
            'not null' => FALSE,
          ),
        ),
        'bundles' => array(
          $entity_type => array(
            0 => $bundle,
          ),
        ),
      ),
      'instances' => array(
        0 => array(
          'default_value' => NULL,
          'description' => '',
          'display' => array(
            'default' => array(
              'label' => 'above',
              'module' => 'text',
              'settings' => array(),
              'type' => 'text_default',
              'weight' => '1',
            ),
          ),
          'label' => 'Kicker',
          'required' => 0,
          'settings' => array(
            'text_processing' => '0',
            'user_register_form' => FALSE,
          ),
          'widget' => array(
            'active' => 1,
            'module' => 'text',
            'settings' => array(
              'size' => '60',
            ),
            'type' => 'text_textfield',
            'weight' => '3',
          ),
          'field_name' => $name,
          'entity_type' => $entity_type,
          'bundle' => $bundle,
          'deleted' => '0',
        ),
      ),
    );
  }
}

class NSCoreTranslationStatusTestCase extends NodeStreamWebTestCase {
   public static function getInfo() {
    return array(
      'name' => 'Translation status pane',
      'description' => 'Test translation status pane.',
      'group' => 'NodeStream'
    );
  }

  function setUp() {
    parent::setUp(
      'ns_core',
      'entity_translation',
      'page_manager',
      'panels',
      'ns_core_translation_status_test'
    );
    $this->testUser = $this->drupalCreateUser(array('access content'));
  }

  /**
   * Test that the translation status pane works as expected.
   */
  function testTranslationStatusPane() {
    // Check that the plugin exists.
    ctools_include('plugins');
    $plugin = ctools_get_plugins('ctools', 'content_types', 'translation_status');
    $this->assertTrue($plugin, 'The translation status plugin exists');
    // Add a secondary language.
    locale_add_language('sv');
    $type = $this->drupalCreateContentType();
    variable_set('language_content_type_' . $type->name, ENTITY_TRANSLATION_ENABLED);
    $node = $this->drupalCreateNode(array('type' => $type->name, 'language' => 'sv', 'body' => array('sv' => array(array()))));
    $this->drupalLogin($this->testUser);
    $this->drupalGet('node/' . $node->nid);
    $this->assertText(t('No translation exists for this content.'));
  }
}