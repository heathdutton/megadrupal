<?php

use Drupal\quizz_pool\QuestionTypeInstaller;
use Drupal\quizz_question\Entity\QuestionType;

/**
 * Implements hook_quizz_question_info().
 */
function quizz_pool_quizz_question_info() {
  return array(
      'pool' => array(
          'name'              => t('Question pool'),
          'description'       => t('This provides question pool for use by the Quiz module.'),
          'question provider' => 'Drupal\quizz_pool\PoolQuestionHandler',
          'response provider' => 'Drupal\quizz_pool\PoolResponseHandler',
          'module'            => 'quizz_question',
      ),
  );
}

/**
 * Implements hook_ENTITYTYPE_insert()
 * @param QuestionType $question_type
 */
function quizz_pool_quiz_question_type_insert($question_type) {
  $installer = new QuestionTypeInstaller();
  if ('pool' === $question_type->handler) {
    return $installer->setup($question_type);
  }

  if (in_array($question_type->handler, array('multichoice', 'truefalse', 'matching'))) {
    return $installer->addNewTarget($question_type);
  }
}

/**
 * Implements hook_field_update_field()
 */
function quizz_pool_field_update_field($field, $prior_field, $has_data) {
  if ('field_question_reference' !== $field['field_name']) {
    return;
  }

  foreach ($field['settings']['handler_settings']['target_bundles'] as $type) {
    if (!$question_type = quizz_question_type_load($type)) {
      continue;
    }

    if (!in_array($question_type->handler, array('multichoice', 'truefalse', 'matching'))) {
      throw new RuntimeException('Pool question is only currently supporting '
      . 'multichoice, truefalse, matching question handlers. '
      . 'Given: ' . $question_type->handler);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function quizz_pool_form_alter(&$form, $form_state, $form_id) {
  if ($form_id === 'field_ui_field_edit_form') {
    if ('field_question_reference' === $form['#field']['field_name']) {
      $form['#after_build'][] = 'quizz_pool_field_ui_field_edit_form_after_build';
    }
  }
}

/**
 * Only accepts multichoice, truefalse, matching handlers.
 */
function quizz_pool_field_ui_field_edit_form_after_build(&$form) {
  $form['field']['settings']['target_type']['#disabled'] = TRUE;
  $form['field']['settings']['target_type']['#value'] = 'quiz_question_entity';
  foreach (element_children($form['field']['settings']['handler']['handler_settings']['target_bundles']) as $type) {
    if ($question_type = quizz_question_type_load($type)) {
      if (!in_array($question_type->handler, array('multichoice', 'truefalse', 'matching'))) {
        unset($form['field']['settings']['handler']['handler_settings']['target_bundles'][$type]);
      }
    }
  }
  return $form;
}
