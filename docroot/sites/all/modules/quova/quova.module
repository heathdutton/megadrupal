<?php
/**
 * Define the endpoint URL.
 */
define('QUOVA_ENDPOINT', 'http://api.quova.com/');


/**
 * Implements hook_menu().
 */
function quova_menu() {
  $items = array();

  $items['admin/config/services/quova'] = array(
    'title' => 'Quova',
    'description' => 'Settings for the Quova geolocation module.',
    'page arguments' => array('quova_admin_form'),
    'page callback' => 'drupal_get_form',
    'access arguments' => array('configure quova'),
  );

  return $items;
}


/**
 * Implements hook_perm().
 */
function quova_permission() {
  return array(
    'configure quova' => array(
      'title' => t('Configure Quova'),
    ),
    'debug quova' => array(
      'title' => t('Debug Quova'),
    ),
  );
}


/**
 * Call quova ipinfo service and parse the response.
 *
 * http://developer.quova.com/docs#calling_api
 */
function quova_ipinfo($ip) {
  list ($headers, $data) = quova_ipinfo_raw($ip);

  // This is not valid JSON: "longitude": -.35916666
  // We need to add an integer part, so "longitude": -0.35916666
  $data = str_replace('":-.', '":-0.', $data);

  // Check for success
  if ($headers['http_code'] !== 200) {
    watchdog('quova', 'Unable to query Quova successfully (!url). The HTTP response was @code.',
      array('!url' => $headers['url'], '@code' => $headers['http_code']));
    return FALSE;
  }

  return json_decode($data);
}


/**
 * Call quova ipinfo service.
 *
 * http://developer.quova.com/docs#calling_api
 */
function quova_ipinfo_raw($ip) {

  $ver = 'v1';
  $method = 'ipinfo';
  $apikey = variable_get('quova_apikey', '');
  $secret = variable_get('quova_secret', '');

  $sig = _quova_signature($apikey, $secret);
  $url = sprintf('%s%s/%s/%s?apikey=%s&sig=%s&format=json',
    QUOVA_ENDPOINT, $ver, $method, $ip, $apikey, $sig);

  $ch = curl_init($url);
  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Accept: application/json'));
  $data = curl_exec($ch);
  $headers = curl_getinfo($ch);
  curl_close($ch);

  return array($headers, $data);
}


/**
 * Cached call to the ipinfo service.
 */
function quova_ipinfo_cached($ip) {
  $cid = 'quova_ipinfo_' . ip2long($ip);
  $expire_time = time() + variable_get('quova_cachetime', 86400);

  $cacheobj = cache_get($cid, 'cache');
  if ($cacheobj && $cacheobj->created < $expire_time) {
    $res = $cacheobj->data;
  }
  else {
    $res = quova_ipinfo($ip);
    cache_set($cid, $res, 'cache', CACHE_TEMPORARY);
  }

  return $res;
}


/**
 * Get the ipinfo for the current request.
 *
 * This is statically cached so it can be called multiple times per page
 * load with little overhead.
 *
 * Usually you will use this function and avoid calling quova_ipinfo
 * or quova_ipinfo_cached directly.
 */
function quova_ipinfo_request() {
  static $info;

  if (!isset($info)) {
    $ip = ip_address();

    // Check for a debugging IP
    if (isset($_GET['quova_ip']) && function_exists('user_access') && user_access('debug quova')) {
      $ip = $_GET['quova_ip'];
    }

    // Check for a proxy or local development environment
    if ($ip === '127.0.0.1') {
      $ip = quova_get_external_ip();
    }

    // Spit out a warning for developers
    if (!$ip) {
      drupal_set_message(t('Example response used: ip_address() returned localhost and unable to query ifconfig service.'));
      $info = json_decode(_quova_example_response());
    } else {
      $info = quova_ipinfo_cached($ip);
    }
  }

  return $info;
}


/**
 * Shortcut to get the users lat/long as an arrray, for use with e.g. the location module.
 */
function quova_latlong() {
  $geoinfo = quova_quick();
  $res = array(
    'latitude'  => $geoinfo->latitude,
    'longitude' => $geoinfo->longitude,
  );
  return $res;
}


/**
 * Shortcut method to quick access a bare minimum set of information with guarenteed property availability.
 */
function quova_quick() {
  $info = quova_ipinfo_request();

  $res = new stdClass;
  $res->latitude = isset($info->ipinfo->Location->latitude) ? $info->ipinfo->Location->latitude : 0;
  $res->longitude = isset($info->ipinfo->Location->longitude) ? $info->ipinfo->Location->longitude : 0;
  $res->country = isset($info->ipinfo->Location->CountryData->country) ? $info->ipinfo->Location->CountryData->country : NULL;
  $res->state = isset($info->ipinfo->Location->StateData->state) ? $info->ipinfo->Location->StateData->state : NULL;
  $res->city = isset($info->ipinfo->Location->CityData->city) ? $info->ipinfo->Location->CityData->city : NULL;

  return $res;
}


/**
 * Generate signature
 */
function _quova_signature($apikey, $secret) {
  $timestamp = gmdate('U');
  $sig = md5($apikey . $secret . $timestamp);
  return $sig;
}



/**
 * Implements hook_block_info().
 */
function quova_block_info() {
  $blocks = array();

  $blocks['geolocation'] = array(
    'info' => t('Quova geolocation information'),
  );

  $blocks['geolocation_debug'] = array(
    'info' => t('Quova debug block'),
  );

  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function quova_block_view($delta = '') {
  $block = array();

  $res = quova_ipinfo_request();

  // Bail out if we didn't get a response
  if (!$res) {
    return FALSE;
  }

  // Display the block
  switch($delta) {
    case 'geolocation':
      $block['subject'] = t('Geolocation information');
      $block['content'] = array(
        '#theme' => 'geolocation_block',
        '#info' => $res,
      );
      break;

    case 'geolocation_debug':
      $block['subject'] = t('Debug');
      $block['content'] = module_exists('devel') ? dpm($res) : "<pre>" . print_r($res, TRUE) . "</pre>";
      break;
  }

  return $block;
}


/**
 * Implements hook_theme().
 */
function quova_theme() {
  return array(
    'geolocation_block' => array(
      'variables' => array('info' => new stdClass),
      'template' => 'quova_geolocation_block',
    ),
  );
}


/**
 * Quova administration settings
 */
function quova_admin_form() {
  $form = array();

  $form['quova_apikey'] = array(
    '#type' => 'textfield',
    '#title' => t('API Key'),
    '#required' => TRUE,
    '#description' => t('Enter your quova.com API key, if you don\'t have a key you can register for a free key at !link.', array('!link' => l('developer.quova.com', 'http://developer.quova.com/'))),
    '#default_value' => variable_get('quova_apikey', ''),
  );

  $form['quova_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret'),
    '#required' => TRUE,
    '#description' => t('Enter your quova.com secret.'),
    '#default_value' => variable_get('quova_secret', ''),
  );

  $form['quova_cachetime'] = array(
    '#type' => 'textfield',
    '#title' => t('Cache timeout'),
    '#required' => TRUE,
    '#description' => t('Enter the length of time (in seconds) to cache Quova IP information.'),
    '#default_value' => variable_get('quova_cachetime', 86400),
  );

  $form['quova_clearcache'] = array(
    '#type' => 'submit',
    '#value' => t('Clear IP Info cache'),
    '#submit' => array('quova_clear_cache'),
  );

  $form['quova_testaccess'] = array(
    '#type' => 'submit',
    '#value' => t('Test API access'),
    '#submit' => array('quova_test_access'),
  );

  return system_settings_form($form);
}


/**
 * Implements hook_variable_info().
 */
function quova_variable_info($options) {
  $variable['quova_apikey'] = array(
    'title' => t('Quova API Key'),
    'access' => 'configure quova',
  );

  $variable['quova_secret'] = array(
    'title' => t('Quova Secret'),
    'access' => 'configure quova',
  );

  $variable['quova_cachetime'] = array(
    'title' => t('Quova Cachetime'),
    'access' => 'configure quova',
    'type' => 'number',
  );
}


/**
 * Clear the cache.
 */
function quova_clear_cache($form, $form_state) {
  cache_clear_all('quova_ipinfo_', 'cache', TRUE);
  drupal_set_message('The IP Info cache was cleared.');
}


/**
 * Test access to the Quova service.
 */
function quova_test_access($form, $form_state) {
  list($headers, $response) = quova_ipinfo_raw('8.8.8.8');

  if ($headers['http_code'] === 200) {
    drupal_set_message('Successfully connected and queried the Quova service. ');
  } else {
    if (empty($response)) { $response = '<em>empty</em>'; }
    $message = t('Unable to connect to the Quova service with !url. The HTTP response code was @code, and the message returned from the server was !message. Check your credentials and try again.',
      array('!url' => l('your credentials', $headers['url']), '@code' => $headers['http_code'], '!message' => $response));
    drupal_set_message($message, 'warning');
  }
}


/**
 * Get the external IP address if this is a development environment / firewalled / proxied machine.
 */
function quova_get_external_ip() {
  $ch = curl_init('http://ifconfig.me/ip');
  curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  $data = curl_exec($ch);
  $headers = curl_getinfo($ch);
  curl_close($ch);

  return trim($data);
}


/**
 * Return an example response from the Quova service for use with debugging.
 */
function _quova_example_response() {
  return '{"ipinfo": {"ip_address":"8.8.8.8", "ip_type":"Mapped", "Network":{"organization":"google incorporated","carrier":"google inc.","asn":15169,"connection_type":"ocx","line_speed":"high","ip_routing_type":"fixed","Domain":{"tld":"com","sld":"google"}},"Location":{ "continent":"north america", "latitude":37.38802, "longitude":-122.07431, "CountryData":{ "country":"united states", "country_code":"us", "country_cf":86},"region":"southwest","StateData":{ "state":"california", "state_code":"ca", "state_cf":73}, "dma":807, "msa":41940, "CityData":{ "city":"mountain view", "postal_code":"94043", "time_zone":-8, "area_code":"650", "city_cf":61}}}}';
}
