<?php

/**
 * @file
 * Provides an 4b payment method for Drupal Commerce.
 */
define("COMMERCE_4B_TESTING_URL", "https://tpv2.4b.es/simulador/teargral.exe");
define("COMMERCE_4B_PRODUCTION_URL", "https://tpv.4b.es/tpvv/teargral.exe");
define("COMMERCE_4B_TESTING_IP", "194.224.159.57");
define("COMMERCE_4B_PRODUCTION_IP", "194.224.159.47");

/**
 * Implementation of hook_menu().
 *
 * @return An array of menu items.
 */
function commerce_4b_menu() {
  $items = array();

  // Define an always accessible path to receive and send order details
  $items['commerce_4b/checkout_details'] = array(
    'page callback' => 'commerce_4b_checkout_details',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'commerce_4b.pages.inc',
  );
  
  // Define an always accessible path to receive the transaction results
  $items['commerce_4b/payment_response'] = array(
    'page callback' => 'commerce_4b_redirect_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'commerce_4b.pages.inc',
  );
  
  // Define an always accessible path to redirect to the correct page after payment
  $items['commerce_4b/return'] = array(
    'page callback' => 'commerce_4b_return',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'commerce_4b.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_4b_commerce_payment_method_info() {
  $payment_methods = array();

  $icons = commerce_4b_icons();
  $display_title = t('!logo 4B - pay securely without sharing your financial information', array('!logo' => $icons['4b']));
  unset($icons['4b']);
  $display_title .= '<div class="commerce-payment-4b-icons"><span class="label">' . t('Includes:') . '</span>' . implode(' ', $icons) . '</div>';

  $payment_methods['commerce_4b'] = array(
    'title' => t('Pasat 4B'),
    'short_title' => t('4B'),
    'display_title' => $display_title,
    'description' => t('Sistema 4B Payment Gateway (Spain)'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_4b_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    'commerce_4b_store' => '',
    'commerce_4b_testing_url' => COMMERCE_4B_TESTING_URL,
    'commerce_4b_production_url' => COMMERCE_4B_PRODUCTION_URL,
    'commerce_4b_testing_ip' => COMMERCE_4B_TESTING_IP,
    'commerce_4b_production_ip' => COMMERCE_4B_PRODUCTION_IP,
    'commerce_4b_language' => 'en',
    'commerce_4b_currency' => '978',
    'commerce_4b_use_testing' => 1,
    'commerce_4b_use_inline_payment' => 0,
  );

  $form['commerce_4b_store'] = array(
    '#type' => 'textfield',
    '#title' => t('Store Code'),
    '#default_value' => $settings['commerce_4b_store'],
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t('Store the store key from 4b Pasat Internet ("Clave de comercio").'),
    '#required' => TRUE,
  );
  $form['commerce_4b_testing_url'] = array(
    '#type' => 'textfield',
    '#title' => t('4b Pasat Internet Connect URL (Testing)'),
    '#default_value' => $settings['commerce_4b_testing_url'],
    '#size' => 70,
    '#maxlength' => 180,
    '#description' => t('URL to connect to the 4b Pasat Internet Connect service (Testing)'),
    '#required' => TRUE,
  );
  $form['commerce_4b_production_url'] = array(
    '#type' => 'textfield',
    '#title' => t('4b Pasat Internet Connect URL (Production)'),
    '#default_value' => $settings['commerce_4b_production_url'],
    '#size' => 70,
    '#maxlength' => 180,
    '#description' => t('URL to connect to the 4b Pasat Internet Connect service (Production)'),
    '#required' => TRUE,
  );
  $form['commerce_4b_testing_ip'] = array(
    '#type' => 'textfield',
    '#title' => t('4b Pasat Internet IP (Testing)'),
    '#default_value' => $settings['commerce_4b_testing_ip'],
    '#size' => 70,
    '#maxlength' => 180,
    '#description' => t('IP to check whether the response from TPV is correct (Testing)'),
    '#required' => TRUE,
  );
  $form['commerce_4b_production_ip'] = array(
    '#type' => 'textfield',
    '#title' => t('4b Pasat Internet IP (Production)'),
    '#default_value' => $settings['commerce_4b_production_ip'],
    '#size' => 70,
    '#maxlength' => 180,
    '#description' => t('IP to check whether the response from TPV is correct (Production)'),
    '#required' => TRUE,
  );
  $form['commerce_4b_language'] = array(
      '#type' => 'radios',
      '#title' => t('Platform Language code'),
      '#default_value' => $settings['commerce_4b_language'],
      '#options' => array('es' => t('Spanish'), 'ca' => t('Catalan'), 'en' => t('English'), 'fr' => t('French'), 'de' => t('Germany')),
      '#description' => t('Choose the language of the 4b Pasat interface (language is not dynamic)'),
      '#required' => TRUE,
  );
  $form['commerce_4b_currency'] = array(
    '#type' => 'radios',
    '#title' => t('Currency'),
    '#default_value' => $settings['commerce_4b_currency'],
    '#options' => array('978' => t('Euro - &#8364;'), '840' => t('Dollar - $'), '826' => t('Sterling pound - &#163;')),
    '#description' => t('Currency to use for the payment'),
    '#required' => TRUE,
  );
  $form['commerce_4b_use_testing'] = array(
    '#type' => 'radios',
    '#title' => t('Use testing platform'),
    '#default_value' => $settings['commerce_4b_use_testing'],
    '#options' => array(0 => t('No'), 1 => t('Yes')),
    '#description' => t('Deactivate when ready for production'),
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_4b_redirect_form($form, &$form_state, $order, $payment_method) {
  if (empty($payment_method["settings"]['commerce_4b_store'])) {
    drupal_set_message(t('Commerce 4B is not configured for use. Fill all fields in configuration page.'), 'error');
    return array();
  }

  return commerce_4b_order_form($form, $form_state, $order, $payment_method);
}

/**
 * Build order form.
 * 
 * @param type $form
 * @param type $form_state
 * @param type $order
 * @param type $settings 
 */
function commerce_4b_order_form($form, &$form_state, $order, $payment_method) {
  $action = $payment_method['settings']['commerce_4b_use_testing'] ?
            $payment_method['settings']['commerce_4b_testing_url'] :
            $payment_method['settings']['commerce_4b_production_url'];

  $store = $payment_method['settings']['commerce_4b_store'];
  $lang = $payment_method['settings']['commerce_4b_language'];
  
  $form['#action'] = $action;
  $form['order'] = array('#type' => 'hidden', '#value' => $order->order_id);
  $form['store'] = array('#type' => 'hidden', '#value' => $store);
  $form['Idioma'] = array('#type' => 'hidden', '#value' => $lang);
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Redirect to 4B payment'),
  );
  
  return $form;
}

/**
 * Payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 * @param $name
 *   The name entered on the submission form.
 */
function commerce_4b_transaction($order, $response) {
  // Exit when we don't get a payment status we recognize.
  if (!in_array($response['result'], array(0, 2))) {
    return FALSE;
  }
  
  // Create a new payment transaction for the order.
  $transaction = commerce_payment_transaction_new('commerce_4b', $order->order_id);

  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $transaction->payment_method = 'commerce_4b';
  $transaction->currency_code = $wrapper->commerce_order_total->currency_code->value();
  // 4B doesn't give us back the amount that was charged, so assume it was the total order amount.
  $transaction->amount = $wrapper->commerce_order_total->amount->value();
  $transaction->remote_id = $response['pszApprovalCode'];
  $transaction->payload[REQUEST_TIME] = $response;
  $transaction->remote_status = $response['result'];

  switch ($response['result']) {
    case 0:
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t('The payment has completed with approval code @approval_code.', array(
        '@approval_code' => $response['pszApprovalCode'],
      ));
      break;
    
    case 2:
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t('The payment has failed with error code @error_code: @error_description.', array(
        '@error_code' => $response['coderror'], 
        '@error_description' => $response['deserror'],
      ));
      
      watchdog('commerce_4b', 'Payment process failed. !response', array('!response' => '<pre>' . check_plain(print_r($response, TRUE)) . '</pre>'), WATCHDOG_ERROR);
      break;
  }
  
  commerce_payment_transaction_save($transaction);
}

/**
 * Returns an array of 4B payment method icon img elements.
 *
 * @return
 *   The array of themed payment method icons keyed by name: visa, mastercard
 */
function commerce_4b_icons() {
  $icons = array();

  $payment_methods = array(
    '4b' => t('4B'),
    'visa' => t('Visa'),
    'mastercard' => t('Mastercard'),
  );

  foreach ($payment_methods as $name => $title) {
    $variables = array(
      'path' => drupal_get_path('module', 'commerce_4b') . '/images/' . $name . '.gif',
      'title' => $title,
      'alt' => $title,
      'attributes' => array(
        'class' => array('commerce-payment-4b-icon'),
      ),
    );
    $icons[$name] = theme('image', $variables);
  }

  return $icons;
}

/**
 * Get all rules settings of the 4B payment method. You can only have one 4B payment rule activated.
 * 
 * @param type $method_id
 * @param type $rule_name
 * @return type 
 */
function _commerce_4b_get_rule_config() {
  $method_id = 'commerce_4b';
  $rule_name = 'commerce_payment_commerce_4b';
  
  // Allow other modules to load a different 4B rule
  drupal_alter('commerce_4b_rule', $rule_name);
  
  $rule = rules_config_load($rule_name);
  $settings = array();

  foreach ($rule->actions() as $action) {
    if ($action->getElementName() == 'commerce_payment_enable_' . $method_id) {
      if (is_array($action->settings['payment_method']) && !empty($action->settings['payment_method']['settings'])) {
        $settings = $action->settings['payment_method']['settings'];
      }
    }
  }

  return $settings;
}