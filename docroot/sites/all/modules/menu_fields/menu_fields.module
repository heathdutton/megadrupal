<?php
/**
 * @file
 * Main file contain hooks/functions.
 */

/**
 * Implements hook_permission().
 */
function menu_fields_permission() {
  return array(
    'administer menu fields' => array(
      'title' => t('Administer menu fields configuration'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function menu_fields_theme($existing, $type, $theme, $path) {
  return array(
    'entity__menu_fields' => array(
      'render element' => 'elements',
      'template' => 'templates/entity--menu-fields',
    ),
  );
}

/**
 * Implements hook_preprocess_entity().
 */
function menu_fields_preprocess_entity(&$vars) {
  if ($vars['entity_type'] == 'menu_fields') {
    // Pass the menu link to the template.
    if (!empty($vars['menu_fields']->link)) {
      // If this is from rendering the menu link, the entity will have the
      // 'link' property already set via menu_fields_preprocess_menu_link().
      $vars['link'] = $vars['menu_fields']->link;
    }
    else {
      $vars['link'] = menu_link_load($vars['menu_fields']->mlid);
    }

    // Suggest our own template which doesn't print the title/url to the entity.
    $vars['theme_hook_suggestions'][] = 'entity__menu_fields';
    // Allow the theme to provide different templates for each bundle.
    $vars['theme_hook_suggestions'][] = 'entity__menu_fields__' . $vars['elements']['#bundle'];
  }
}

/**
 * Menu fields link function.
 */
function menu_fields_preprocess_menu_link(&$vars) {
  $element = &$vars['element'];
  $menu_name = $element['#original_link']['menu_name'];

  if (!in_array($menu_name, menu_fields_enabled_menus())) {
    // This menu isn't enabled for fields, so don't change the way the link is rendered.
    return;
  }

  $mlid = $element['#original_link']['mlid'];
  $entity = menu_fields_load_by_mlid($mlid);

  if (!$entity && empty($element['#below'])) {
    // No entity is found and this menu link doesn't have any children, so don't change
    // the way the link is rendered.
    return;
  }

  // If there is no existing entity, then we create a fake entity object so that
  // menu links with children use the same render pipeline.
  // @todo Remove this if/when issue #2420525 is fixed!
  if (!$entity) {
    $entity = entity_create('menu_fields', array(
      'menu_name' => menu_fields_create_machine_name($menu_name),
      'mlid' => $mlid,
    ));
  }

  // Stash the link on the entity object so we can pass it to the template.
  $entity->link = $element['#original_link'];

  $view = entity_view('menu_fields', array($entity), 'full');

  // Get our extra field display values.
  $extra_fields = field_info_extra_fields('menu_fields', $entity->bundle(), 'display');

  // We must add our extra field values into the view to be rendered.
  foreach ($view['menu_fields'] as $id => &$entity_view) {
    $entity_view['menu_fields_links_primary'] = array(
      '#markup' => l($element['#title'], $element['#href'], $element['#localized_options']),
      '#weight' => $extra_fields['menu_fields_links_primary']['display']['default']['weight'],
    );

    $entity_view['menu_fields_links_secondary'] = !empty($element['#below']) ? $element['#below'] : array('#markup' => '');
    $entity_view['menu_fields_links_secondary']['#weight'] = $extra_fields['menu_fields_links_secondary']['display']['default']['weight'];
  }

  $element['#below'] = $view;
  $element['#attributes']['class'][] = 'menu-fields-menu-link';
}

/**
 * Implements hook_field_extra_fields().
 */
function menu_fields_field_extra_fields() {
  $info = array();
  foreach (menu_fields_enabled_menus() as $menu) {
    $menu = menu_fields_create_machine_name($menu);
    if (!isset($info['menu_fields'][$menu]['display']['menu_fields_links_primary'])) {
      $info['menu_fields'][$menu]['display']['menu_fields_links_primary'] = array(
        'label' => t('Primary link'),
        'description' => t('The main top level link.'),
        'weight' => 10,
      );
    }
    if (!isset($info['menu_fields'][$menu]['display']['menu_fields_links_secondary'])) {
      $info['menu_fields'][$menu]['display']['menu_fields_links_secondary'] = array(
        'label' => t('Child links'),
        'description' => t('Children links of the primary menu item.'),
        'weight' => 20,
      );
    }
  }
  return $info;
}

/**
 * Implements hook_menu().
 */
function menu_fields_menu() {
  $items['admin/structure/menu_fields'] = array(
    'title' => 'Menu fields',
    'type' => MENU_NORMAL_ITEM,
    'description' => 'Configure menu fields.',
    'access arguments' => array('administer menu fields'),
    'page arguments' => array('menu_fields_field_configuration_form'),
    'page callback' => 'drupal_get_form',
    'file' => 'menu_fields.admin.inc',
    'weight' => 0,
  );
  // Menu items to add field/display tabs on the menu listing page.
  $items['admin/structure/menu/manage/%/fields'] = array(
    'title' => 'Manage Fields',
    'page callback' => 'menu_fields_tab_redirect',
    'page arguments' => array(4, 'fields'),
    'access arguments' => array('administer menu fields'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );
  $items['admin/structure/menu/manage/%/display'] = array(
    'title' => 'Manage Display',
    'page callback' => 'menu_fields_tab_redirect',
    'page arguments' => array(4, 'display'),
    'access arguments' => array('administer menu fields'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  return $items;
}

/**
 * Redirect callback used to simulate tab on menu pages.
 *
 * @param string $menu
 *   Menu name.
 * @param string $destination
 *   End of the destination path.
 */
function menu_fields_tab_redirect($menu, $destination = '') {
  $active_menus = variable_get('menu_fields_menus', array());
  if (!in_array($menu, $active_menus)) {
    drupal_set_message(t('Menu Fields integration is currently not enabled for "%menu".', array(
      '%menu' => $menu,
    )), 'warning');
  }
  $value = menu_fields_create_machine_name($menu);
  drupal_goto('admin/structure/menu_fields/' . $value . '/' . $destination);
}

/**
 * Implements hook_menu_alter().
 */
function menu_fields_menu_alter(&$items) {
  $menus = menu_fields_enabled_menus();
  foreach ($menus as $key => $value) {
    $value = menu_fields_create_machine_name($value);
    // Hide the field display
    $items['admin/structure/menu_fields/' . $value . '/fields']['type'] = MENU_CALLBACK;
    $items['admin/structure/menu_fields/' . $value . '/display']['type'] = MENU_CALLBACK;
  }
}

/**
 * Gets an array of enabled menu names.
 *
 * @param mixed $default
 *   What should be returned if nothing is set.
 *
 * @return array
 *   Returns array of enabled menu names.
 */
function menu_fields_enabled_menus($default = array()) {
  return variable_get('menu_fields_menus', $default);
}

/**
 * Saves enabled Menu Fields menus.
 *
 * @param array $menus
 *   Array of menu names.
 */
function menu_fields_save_enabled_menus(array $menus) {
  variable_set('menu_fields_menus', $menus);

  // Hide the 'Primary link' extra field by default.
  foreach ($menus as $menu) {
    $menu_fields_bundle = menu_fields_create_machine_name($menu);
    $field_bundle_settings = variable_get('field_bundle_settings_menu_fields__' . $menu_fields_bundle, FALSE);
    if ($field_bundle_settings === FALSE) {
      $field_bundle_settings = array(
        'view_modes' => array(),
        'extra_fields' => array(
          'form' => array(),
          'display' => array(
            'menu_fields_links_primary' => array(
              'default' => array(
                'weight' => 10,
                'visible' => FALSE,
              ),
            ),
          ),
        ),
      );
      variable_set('field_bundle_settings_menu_fields__' . $menu_fields_bundle, $field_bundle_settings);
    }
  }

  // Clear the caches that the manage fields link is added
  field_info_cache_clear();
  entity_info_cache_clear();
  menu_rebuild();
}

/**
 * Implements hook_form_ID_alter().
 *
 * We are going to alter the form for editing a menu item and are going to add
 * some additional fields.
 */
function menu_fields_form_menu_edit_item_alter(&$form, &$form_state) {
  $mlid = $form['mlid']['#value'];

  // Is it a new menu link, get the menu name from the arguments
  if ($mlid) {
    $menu_link = menu_link_load($mlid);
    $menu_name = $menu_link['menu_name'];
  }
  else {
    // A new menu link is created
    $menu_name = $form['original_item']['#value']['menu_name'];
    // Set mlid to NULL in case 0 is used for the menu overview entity
    $mlid = NULL;
  }

  // Add menu field entity fields
  menu_fields_add_fields_entity_fields($menu_name, $mlid, $form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the field settings form to display menu links.
 */
function menu_fields_form_field_ui_field_overview_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#entity_type'] == 'menu_fields') {
    menu_fields_add_menu_links_form_alter($form, $form_state, $form_id);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the display settings form to display menu links.
 */
function menu_fields_form_field_ui_display_overview_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#entity_type'] == 'menu_fields') {
    menu_fields_add_menu_links_form_alter($form, $form_state, $form_id);
  }
}

/**
 * Alters a form to include menu links.
 *
 * @see menu_fields_form_field_ui_display_overview_form_alter()
 * @see menu_fields_form_field_ui_field_overview_form_alter()
 */
function menu_fields_add_menu_links_form_alter(&$form, &$form_state, $form_id) {
  // Add some useful contextual links to manage this menu.
  $form['links'] = array(
    '#type' => 'container',
    '#weight' => -999,
    'links' => array(
      '#theme' => 'item_list',
      '#items' => array(
        l(t('List Links'), 'admin/structure/menu/manage/' . str_replace('_', '-', $form['#bundle'])),
        l(t('Edit Menu'), 'admin/structure/menu/manage/' . str_replace('_', '-', $form['#bundle']) . '/edit'),
      ),
    ),
  );
}

/**
 * Implements hook_menu_link_delete().
 */
function menu_fields_menu_link_delete($link) {
  // Cleanup menu_fields fields for deleted menu_links
  $id = menu_fields_entity_id_by_mlid($link['mlid']);
  if ($id) {
    entity_delete('menu_fields', $id);
  }
}

/**
 * Implements hook_menu_delete():
 */
function menu_fields_menu_delete($menu) {
  // Cleanup menu_fields fields for deleted menus
  $id = menu_fields_entity_id_by_menu($menu['menu_name']);
  if ($id) {
    entity_delete('menu_fields', $id);
  }
}

/**
 * Add the menu fields entity to the given form.
 */
function menu_fields_add_fields_entity_fields($menu_name, $mlid, &$form, &$form_state) {
  // Create bundle name for the given menu name
  $bundle_name = menu_fields_create_machine_name($menu_name);

  // Check is this field selected for menu fields
  $selected_menus = menu_fields_enabled_menus();

  // Check is this menu selected for fieldable.
  if (in_array($menu_name, $selected_menus)) {

    $form['#submit'][] = 'menu_fields_form_menu_edit_fields_submit';

    // Load entity id for this menu link.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'menu_fields')
      ->propertyCondition('mlid', $mlid)
      ->propertyCondition('menu_name', $bundle_name);
    $result = $query->execute();

    // Is no entity found, create a new one.
    if (empty($result)) {
      $entity = entity_create('menu_fields', array(
        'menu_name' => $bundle_name,
        'mlid' => $mlid,
      ));
    }
    else {
      $entity_nid = array_keys($result['menu_fields']);
      $entity = entity_load('menu_fields', $entity_nid);
      $entity = reset($entity);
    }

    // Set the correct parents for the attached field values, because they are added to a fieldset.
    $form['menu_fields'] = array(
      '#type' => 'fieldset',
      '#title' => t('Menu Fields'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
    );

    // Enable/disable fields for the menu item.
    $form['menu_fields']['enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable fields for this menu link'),
      '#default_value' => !empty($entity->id) ? TRUE : FALSE,
    );

    // Add menu fields.
    $form['menu_fields']['fields'] = array(
      '#type' => 'container',
      '#states' => array(
        'visible' => array(
          ':input[name="menu_fields[enabled]"]' => array('checked' => TRUE),
        ),
      ),
    );

    // Add entity fields.
    field_attach_form('menu_fields', $entity, $form['menu_fields']['fields'], $form_state);

    // Add entity to form.
    $form['menu_fields']['entity'] = array(
      '#type' => 'value',
      '#value' => $entity,
    );
  }
}

/**
 * Attached menu entity fields submit callback.
 *
 * Callback function when menu or menu link forms submitted.
 */
function menu_fields_form_menu_edit_fields_submit($form, &$form_state) {
  // If no entity added, no field processing necessary.
  if (isset($form_state['values']['menu_fields']['entity'])) {
    // Get and save the entity.
    $entity = $form_state['values']['menu_fields']['entity'];
    if (!empty($form_state['values']['menu_fields']['enabled'])) {
      // Unset the 'menu_name' because this is a value from the core menu field and overwrites in entity_form_submit_build_entity()
      // the menu_fields bundle name also called 'menu_name'.
      unset($form_state['values']['menu_name']);
      entity_form_submit_build_entity('menu_fields', $entity, $form, $form_state);
      $entity->save();
    }
    elseif (!empty($entity->id)) {
      $entity->delete();
    }

    // Clear cache for given path or the default entry.
    if (isset($form_state['values']['link_path'])) {
      cache_clear_all('fields:' . $form_state['values']['link_path'], 'cache_menu_fields');
    }
    elseif ($entity->mlid == 0) {
      cache_clear_all('fields:/', 'cache_menu_fields');
    }

    // Clear cache for the defined menu link
    if (isset($form_state['values']['mlid'])) {
      cache_clear_all('fields:mlid:' . $form_state['values']['mlid'], 'cache_menu_fields');
    }

    // Clear block cache
    cache_clear_all('menu_fields:menu_fields_field_display', 'cache_block', TRUE);
  }
}

/**
 * Implements hook_flush_caches().
 */
function menu_fields_flush_caches() {
  return array('cache_menu_fields');
}

/**
 * Implements hook_entity_info().
 */
function menu_fields_entity_info() {

  // Add a bundle for every activated menu in the fields settings.
  $menus = menu_get_menus();
  $enabled_menus = menu_fields_enabled_menus();
  $bundles = array();
  foreach ($menus as $key => $value) {

    // Always use underscores for menu key hyphens, because hyphens are not allowed for bundle names.
    $machine_name = menu_fields_create_machine_name($key);

    $bundles[$machine_name] = array(
      'label' => $value,
    );

    if (in_array($key, $enabled_menus)) {
      $bundles[$machine_name]['admin'] = array(
        'path' => 'admin/structure/menu_fields/' . $machine_name,
        'access arguments' => array('administer menu fields'),
      );
    }
  }

  $info['menu_fields'] = array(
    'label' => t('Menu Fields'),
    'controller class' => 'EntityAPIController',
    'base table' => 'menu_fields',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'menu_name',
    ),
    'bundle keys' => array(
      'bundle' => 'menu_name',
    ),
    'bundles' => $bundles,
    'entity class' => 'Entity',
    'module' => 'menu_fields',
  );

  return $info;
}

/**
 * Gets the Menu Fields entity for given Menu Link ID.
 *
 * @param int $mlid
 *  The Menu Link ID to search for the fields entity.
 *
 * @return Entity
 *   The entity or NULL is no entity found.
 */
function menu_fields_load_by_mlid($mlid) {
  $cache_key = 'fields:mlid:' . $mlid;
  $entity = &drupal_static($cache_key);

  // Check the cache for this entity.
  if (!$entity) {
    $entity = cache_get($cache_key, 'cache_menu_fields');
    $entity = $entity ? $entity->data : NULL;
  }

  // If the entity is not cached, load it.
  if (!$entity) {

    // Get the menu link from given mlid.
    $id = menu_fields_entity_id_by_mlid($mlid);
    if ($id) {
      $entity = entity_load_single('menu_fields', $id);
      cache_set($cache_key, $entity, 'cache_menu_fields');
    }
  }
  return $entity;
}

/**
 * Returns the menu_fields fields entity id for given menu link id (mlid).
 *
 * @param $mlid
 *  The menu link id
 * @return
 *  The menu_fields field entity id or FALSE is no entity found for this mlid
 */
function menu_fields_entity_id_by_mlid($mlid) {
  $query = db_select('menu_fields', 'm');
  return $query->fields('m', array('id'))
    ->condition('mlid', $mlid)
    ->execute()->fetchField();
}

/**
 * Returns the menu_fields fields entity id for given menu (menu name).
 *
 * @param $menu_name
 *  The menu machine name
 * @return
 *  The menu_fields field entity id or FALSE is no entity found for this menu name
 */
function menu_fields_entity_id_by_menu($menu_name) {
  $bundle_name = menu_fields_create_machine_name($menu_name);
  return db_select('menu_fields', 'm')
    ->fields('m', array('id'))
    ->condition('mlid', 0)
    ->condition('menu_name', $bundle_name)
    ->execute()->fetchField();
}

/**
 * Creates a machine name from given string.
 *
 * Currently, replaces all hyphens with underscores.
 *
 * @param string $value
 *   The string to use as machine name.
 *
 * @return string
 *   The machine name.
 */
function menu_fields_create_machine_name($value) {
  return str_replace('-', '_', $value);
}
