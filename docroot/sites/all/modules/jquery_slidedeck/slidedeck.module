<?php

/**
 * @file
 * This slidedeck module provide jquery slidedeck effect
 * for set of blocks.
 * It provides admin interface to add more
 * slidedeck widgets, for each slidedeck we can choose set of
 * blocks as slide deck content.
 * Slidedeck module provides the flexibility to alter the
 * skins of the slidedeck blocks.
 */

/**
 * Implements hook_permission().
 */
function slidedeck_permission() {
  return array(
    'administer slidedeck configuration' => array(
      'title' => t('Administer slidedeck'),
      'description' => t('Administer slidedeck configurations.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function slidedeck_menu() {
  $items = array();
  $items['admin/structure/slidedeck'] = array(
    'title' => 'Slidedeck',
    'description' => 'Create blocks of slidedeck content.',
    'page callback' => 'slidedeck_list',
    'access arguments' => array('administer slidedeck configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'slidedeck.admin.inc',
    'weight' => -10,
  );

  $items['admin/structure/slidedeck/list'] = array(
    'title' => 'List Slidedecks',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/structure/slidedeck/add'] = array(
    'title' => 'Add Slidedeck',
    'description' => 'Configuring the Slidedeck Settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('slidedeck_config_settings', 'add'),
    'access arguments' => array('administer slidedeck configuration'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 1,
  );

  $items['admin/structure/slidedeck/manage/%slidedeck'] = array(
    'title' => 'Edit Slidedeck',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('slidedeck_config_settings', 'edit', 4),
    'access arguments' => array('administer slidedeck configuration'),
    );

  $items['admin/structure/slidedeck/manage/%slidedeck/edit'] = array(
    'title' => 'Edit Slidedeck',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/structure/slidedeck/manage/%slidedeck/delete'] = array(
    'title' => 'Delete slidedeck',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('slidedeck_block_delete', 4),
    'access arguments' => array('administer slidedeck configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'slidedeck.admin.inc',
  );

  return $items;
}

/**
 * Load the slidedeck data.
 *
 * @param integer $id
 *   Integer id of the slidedeck block.
 *
 * @returns
 *   array of the block content,
 *   skin and title of the slidedeck block.
 */
function slidedeck_load($id) {
  $content = array();

  $query = db_select('slidedeck', 'sd')
    ->fields('sd', array('title', 'skin', 'content'))
    ->condition('sd.id', $id, '=');

  $slidedeck = $query->execute()->fetchAssoc();

  if (!$slidedeck) {
    return FALSE;
  }
  $slidedeck['id'] = $id;
  return $slidedeck;
}

/**
 * Implements hook_block_info().
 */
function slidedeck_block_info() {
  $blocks = array();
  $query = db_select("slidedeck", 'sd')
    ->fields('sd', array('id', 'title'))
    ->execute();

  foreach ($query as $slidedeck_block) {
    $blocks[$slidedeck_block->title . "_" . $slidedeck_block->id] = array('info' => t($slidedeck_block->title));
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function slidedeck_block_view($delta = '') {
  $block = array();
  $block_title_info = explode('_', $delta);
  $id = array_pop($block_title_info);
  $title = implode("_", $block_title_info);
  $scripts = array();
  $style = array();

  $slidedeck_data = slidedeck_load($id);

  // Style used for the slidedeck block.
  $style[] = slidedeck_get_skins($slidedeck_data['skin']);

  // Building the content for the slidedeck block.
  $content = slidedeck_block_content($delta, $id);

  // Slidedeck library path.
  $library_path = libraries_get_path('slidedeck.jquery.lite.js');

  if (file_exists($library_path)) {
    $scripts[] = $library_path;
    $scripts[] = drupal_get_path('module', 'slidedeck') . '/js/slidedeck.js';

    $block['subject'] = t($title);
    $block['content']['#markup'] = theme("slidedeck", $content);
    $block['content']['#attached']['js'] = $scripts;
    $block['content']['#attached']['css'] = $style;
  }
  else {
    drupal_set_message(t('Slidedeck module needs slidedeck.jquery.lite.js to work.Download slidedeck js from  <a href="@url">Slidedeck Jquery Plugin</a>  and place in the @path folder as @file', array('@url' => 'http://slidedeck.com', '@path' => 'sites/all/libraries', '@file' => 'slidedeck.jquery.lite.js')), 'error');
  }
  return $block;
}

/**
 * slidedeck block data
 *
 * @returns
 *   the block content for the slide deck block.
 */
function slidedeck_block_content($delta, $id) {
  $slidedeck_data = slidedeck_load($id);
  if ($delta == $slidedeck_data['title'] . "_" . $slidedeck_data['id']) {
    $skin_path = slidedeck_get_skins($slidedeck_data['skin']);
    drupal_add_css($skin_path);

    $data = unserialize($slidedeck_data['content']);
    $blocks_content = array();

    if (isset($data)) {
      foreach ($data as $key => $block) {
        if (!empty($block)) {
          $blocks_info = explode('_delta_', $block);
          $block_data = block_load($blocks_info[0], $blocks_info[1]);
          $blocks_content[$key] = new stdClass();
          $blocks_content[$key]->title =  $block_data->title;
          $block_content = module_invoke($blocks_info[0], "block_view", $blocks_info[1]);
          $blocks_content[$key]->content =  $block_content['content'];
        }
      }
    }
    $slidedeck_content = array('content' => $blocks_content, 'skin' => $slidedeck_data['skin']);
    return $slidedeck_content;
  }
}

/**
 * Implements hook_theme().
 */
function slidedeck_theme() {
  return array(
    'slidedeck' => array(
      'variables' => array('content' => NULL, 'skin' => NULL),
      'template' => 'slidedeck',
      ),
  );
}

/**
 * Implements menu callback for the
 * admin settings form for slidedeck
 */
function slidedeck_config_settings($form, &$form_state, $formtype, $slidedeck = NULL) {
  $default_values = $slidedeck;
  $form = array();
  $skins = array();

  $all_skins = slidedeck_get_skins();
  foreach ($all_skins as $key => $value) {
    $skins[$key] = $value['value'];
  }

  if ($formtype == 'edit') {
    $form['id'] = array(
      '#type' => 'value',
      '#value' => isset($slidedeck['id']) ? $slidedeck['id'] : 0,
    );
  }

  $form['slidedeck_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $default_values['title'],
    '#description' => t('Title of the slidedeck.'),
    '#required' => TRUE,
    );

  $form['slidedeck_skin'] = array(
    '#type' => 'select',
    '#title' => t('Slidedeck Theme'),
    '#default_value' => (isset($slidedeck['skin']) ? $slidedeck['skin'] : $skins['skin1']),
    '#description' => t('Theme for the slidedeck.'),
    '#options' => $skins,
    '#required' => TRUE,
    );

  $data = unserialize($default_values['content']);
  $form['slidedeck_content'] = array(
    '#type' => 'fieldset',
    '#title' => t('Slidedeck Content'),
    '#prefix' => '<div id="slidedeck_block_wrapper">',
    '#suffix' => '</div>',
  );

  $blocks = slidedeck_get_all_blocks();

  if (empty($form_state['slidedeck_blocks'])) {
    $form_state['slidedeck_blocks'] = count($data);
  }
  for ($block_count = 0; $block_count < $form_state['slidedeck_blocks']; $block_count++) {
    $form['slidedeck_content']['type']["block_" . $block_count] = array(
      '#type' => 'select',
      '#title' => t('Slider content'),
      '#default_value' => $data["block_" . $block_count],
      '#description' => t('Add type of slidedeck content.'),
      '#options' => $blocks,
      );
  }

  $form['slidedeck_content']['add_name'] = array(
    '#type' => 'submit',
    '#value' => t('Add one more'),
    '#submit' => array('slidedeck_add_more_blocks'),
    '#ajax' => array(
      'callback' => 'slidedeck_add_more_blocks_callback',
      'wrapper' => 'slidedeck_block_wrapper',
    ),
  );
  if ($form_state['slidedeck_blocks'] > 1) {
    $form['slidedeck_content']['remove_name'] = array(
      '#type' => 'submit',
      '#value' => t('Remove one'),
      '#submit' => array('slidedeck_add_more_remove_one'),
      '#ajax' => array(
        'callback' => 'slidedeck_add_more_blocks_callback',
        'wrapper' => 'slidedeck_block_wrapper',
      ),
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Slidedeck Submit'),
  );
  $form['#validate'][] = 'slidedeck_validate';

  return $form;
}

/**
 * Form validate handler for the slidedeck_config_settings().
 *
 * @params $form
 *   form varibale of drupal.
 * @params $form_state
 *   form state values.
 */
function slidedeck_validate(&$form, &$form_state) {
  $pattern = '/^[a-zA-Z0-9_ ]+$/';
  if (!preg_match($pattern, $form['slidedeck_title']['#value'])) {
    form_set_error('slidedeck_title', 'Title Should contain only letters,numbers and underscores');
  }
}

/**
 * From submit handler for slidedeck_config_settings().
 */
function slidedeck_config_settings_submit($form, $form_state) {
  $values = $form_state['values'];
  $block_values = array();
  $count = 0;

  foreach ($values as $key => $form_value) {
    if ($key == 'block_' . $count) {
      $block_values['block_' . $count] = $form_value;
      $count++;
    }
  }
  $content = serialize($block_values);
  $title = $values['slidedeck_title'];
  $skin = $values['slidedeck_skin'];

  $id = '';
  if (array_key_exists('id', $values)) {
    $id = $values['id'];
  }

  if (!$id) {
    $insert = db_insert('slidedeck')
      ->fields(array('title', 'skin', 'content'))
      ->values(array(
        'title' => $title,
        'skin' => $skin,
        'content' => $content,
        ))
      ->execute();

    if ($insert) {
      drupal_set_message(t("Added slidedeck block sucessfully"));
      drupal_goto('admin/structure/slidedeck');
    }
  }
  else {
    $update = db_update('slidedeck')
      ->fields(array(
        'title' => $title,
        'skin' => $skin,
        'content' => $content,
        ))
      ->condition('id', $id, '=')
      ->execute();

    if ($update) {
      drupal_set_message(t("Updated slidedeck block sucessfully"));
      drupal_goto('admin/structure/slidedeck');
    }
  }
}

/**
 * Ajax callback for adding more blocks to the slidedeck content.
 */
function slidedeck_add_more_blocks_callback($form, &$form_state) {
  return $form['slidedeck_content'];
}


/**
 * Submit handler for the "Add One More" button of a field form.
 *
 * This handler makes changes to the form state.
 * If the button was clicked with JS disabled, then
 * the page is reloaded with the complete rebuilt form. If the button was
 * clicked with JS enabled, then ajax_form_callback(),
 * slidedeck_add_more_blocks_callback()
 * to return just the changed part of the form.
 */
function slidedeck_add_more_blocks($form, &$form_state) {
  $form_state['slidedeck_blocks']++;
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for the "Remove One" button of a slidedeck settings form.
 * This handler removes the last block added to the settings form.
 */
function slidedeck_add_more_remove_one($form, &$form_state) {
  if ($form_state['slidedeck_blocks'] > 1) {
    $form_state['slidedeck_blocks']--;
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Retriving all system blocks
 *
 * @returns
 *   array of all blocks created data.
 */
function slidedeck_get_all_blocks() {
  module_load_include('inc', 'block', 'block.admin');
  static $blocksarray;
  static $theme;

  if (empty($blocksarray)) {
    global $theme_key;
    drupal_theme_initialize();

    if (!isset($theme)) {
      // If theme is not specifically set, rehash for the current theme.
      $theme = $theme_key;
    }
    // Fetch and sort blocks.
    $blocks = _block_rehash($theme);
    $compare_theme = &drupal_static('_block_compare:theme');
    $compare_theme = $theme;
    usort($blocks, '_block_compare');
    $blocksarray = array();
    foreach ($blocks as $id => $block) {
      if ($block['module'] != 'slidedeck') {
        $key = $block['module'] . '_delta_' . $block['delta'];
        $blocksarray[$key] = $block['info'];
      }
    }
  }

  return $blocksarray;
}

/**
 * Get all skins in to array
 *
 * @param string $skin_key
 *   skin key for the slidedeck block created.
 *
 * @returns
 *   string skin for the slidedeck block if skin key is provided
 *   else provides all the skins
 */
function slidedeck_get_skins($skin_key = FALSE) {
  $skin_path = drupal_get_path('module', 'slidedeck') . '/skins/';
  $skins = array(
    'skin1' => array(
      'path' => $skin_path . 'skin1.css',
      'value' => 'Blue and Black 900px'),
    'skin2' => array(
      'path' => $skin_path . 'skin2.css',
      'value' => 'Grey and Blue 900px'),
    'skin3' => array(
      'path' => $skin_path . 'skin3.css',
      'value' => 'Blue and Black 700px'),
    );
  drupal_alter('slidedeck_skin', $skins);
  return ($skin_key) ? $skins[$skin_key]['path'] : $skins;
}
