<?php
/**
 * @file
 * Defines an ABN (Australian Business Number) field type.
 */

/**
 * Define constants.
 */

// ABR API.
define('ABN_ABR_QUERY_URL', 'https://abr.business.gov.au/abrxmlsearchRPC/AbrXmlSearch.asmx/');
define('ABN_ABR_ABN_SEARCH_METHOD', 'SearchByABNv');
define('ABN_ABR_ABN_SEARCH_VERSION', '201205');

// Intervals in seconds for cache expiry times that map roughly to common
// "calendar" intervals. For our usage fast is better than accurate.
define('ABN_EXPIRES_NEVER', -1);
define('ABN_EXPIRES_HOUR', 60);
define('ABN_EXPIRES_DAY', 60 * 60 * 24);
define('ABN_EXPIRES_WEEK', 60 * 60 * 24 * 7);
define('ABN_EXPIRES_FORTNIGHT', 60 * 60 * 24 * 7 * 2);
// Four weeks.
define('ABN_EXPIRES_MONTH', 60 * 60 * 24 * 7 * 4);
// Quarter of a year.
define('ABN_EXPIRES_QUARTER', 60 * 60 * 24 * 7 * 13);
// Half of a year.
define('ABN_EXPIRES_SEMESTER', 60 * 60 * 24 * 7 * 26);
// One year.
define('ABN_EXPIRES_YEAR', 60 * 60 * 24 * 7 * 52);

// Defaults for field settings.
define('ABN_SYNC_DEFAULT', TRUE);
define('ABN_EXPIRES_DEFAULT', ABN_EXPIRES_MONTH);

/**
 * Include files.
 */

module_load_include('inc', 'abn', 'abn.field');

/**
 * Implements hook_menu().
 */
function abn_menu() {
  // Main administration page.
  $items['admin/config/services/abn'] = array(
    'title' => 'Australian Business Number',
    'description' => 'View and edit the site-wide GUID provided by the Australian Business Register.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('abn_admin_settings'),
    'access arguments' => array('administer abn'),
    'file' => 'abn.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function abn_permission() {
  return array(
    'administer abn' => array(
      'title' => t('Administer ABN'),
      'description' => t('This does not allow users to configure ABN fields, this is allows users to view and edit the global ABR GUID.'),
    ),
  );
}

/**
 * Normalise the format of an ABN to make it easier to work with.
 */
function abn_normalize_abn($abn) {
  // Strip anything that isn't a number.
  return preg_replace('@[^0-9]+@', '', $abn);
}

/**
 * Performs an ABN lookup and returns the parsed results.
 *
 * The ABR sends back an XML file for some types of failed lookups so we need
 * to handle these and extract relevant data from successful lookups. Lookups
 * are statically cached per ABN to avoid hitting the remote server multiple
 * wherever possible.
 *
 * @param string $abn
 *   An ABN to perform a lookup for. Non-numeric characters will be ignored.
 *
 * @return array
 *   An array with the structure of a businessEntity node in the XML returned
 *   by the ABR if successful. FALSE if there was an error during the lookup.
 *   The ABR data returned is not sanitized here, it is returned as-is.
 *   Because of the simple XML to Array conversion we're performing, empty
 *   XML nodes are converted to empty arrays rather than empty strings.
 */
function abn_lookup($abn) {
  // There is never any need to reset this so we're not using drupal_static().
  static $cache = array();
  $abn = abn_normalize_abn($abn);
  $cid = $abn;
  $api_key = variable_get('abn_api_key', '');

  // Do nothing if we have no API key.
  if (empty($api_key)) {
    drupal_set_message(t('A lookup was attempted for ABN %abn but failed because no API key has been provided.', array('%abn' => $abn)));
    // Return straight away if we have no API key. Nothing will work.
    return FALSE;
  }

  if (!isset($cache[$cid])) {
    // Perform a GET request.
    $abr_method_url = ABN_ABR_QUERY_URL . ABN_ABR_ABN_SEARCH_METHOD . ABN_ABR_ABN_SEARCH_VERSION;
    $request = drupal_http_request($abr_method_url . '?searchString=' . $abn . '&includeHistoricalDetails=N&authenticationGuid=' . $api_key);
    // If we didn't get a nice 200 then we don't have any XML to work with.
    if (empty($request->code) || $request->code != '200') {
      watchdog('abn', 'There was an error contacting the Australian Business Register while processing ABN: %abn. Response code was: %code with data: %data.', array('%abn' => $abn, '%code' => $request->code), WATCHDOG_ERROR);
    }
    else {
      // Turn our XML string into a nested, associative array.
      $data = new SimpleXMLElement($request->data);
      $data = drupal_json_decode(drupal_json_encode($data));

      // Check for ABR exceptions indicating incorrect search parameters.
      if (!empty($data['response']['exception'])) {
        watchdog('abn', 'The Australian Business Register returned an exception while processing ABN: %abn. Exception description was: %exception.', array(
          '%abn' => $abn,
          '%exception' => $data['response']['exception']['exceptionDescription']), WATCHDOG_WARNING);
      }
      else {
        // Only cache successful requests.
        $cache[$cid] = $data['response']['businessEntity' . ABN_ABR_ABN_SEARCH_VERSION];
      }
    }
  }

  // Return FALSE if the ABR returned an exception.
  return isset($cache[$cid]) ? $cache[$cid] : FALSE;
}

/**
 * Attaches/updates/sanitizes ABR data for an ABN field item.
 *
 * Only a single item can be synced at a time by this function. This function
 * does not handle saving data to the database.
 *
 * @param array $item
 *   An item array as defined by the Field API. The item is passed by reference.
 *   An item array is the flat array of key/value pairs stored by the Field API
 *   for each item added by the widget form.
 * @param array $field
 *   A $field array as defined by the Field API.
 * @param boolean $respect_expires
 *   If TRUE $items will only be modified if the period specified by the expires
 *   settings on the field has passed. Defaults to TRUE.
 */
function abn_sync_field_item(&$item, $field, $respect_expires = TRUE) {
  // We can hit fatal errors upon db inserts if we don't ensure updated is set.
  if (!isset($item['updated'])) {
    $item['updated'] = 0;
  }

  // Don't sync if it hasn't been enabled.
  if (empty($field['settings']['sync'])) {
    return;
  }

  // If the field data has expired we can update it.
  // Note that currently $respect_expires is FALSE everywhere this function is
  // called. It's intended to work for sync on field load
  // http://drupal.org/node/1878710.
  $item_is_expired = abn_field_item_is_expired($item, $field);
  if ($item_is_expired || !$respect_expires) {
    $lookup = abn_lookup($item['abn']);

    if (!empty($lookup)) {
      // Name can be mainName or legalName (for individuals).
      // All other name-like fields are deprecated as of mid-2013.
      if (!empty($lookup['mainName'])) {
        $item['abn_name'] = check_plain($lookup['mainName']['organisationName']);
      }
      if (!empty($lookup['legalName'])) {
        $name_array = array();
        $name_array[] = $lookup['legalName']['givenName'];
        $name_array[] = $lookup['legalName']['otherGivenName'];
        $name_array[] = $lookup['legalName']['familyName'];
        // Remove empty values.
        $name_array = array_filter($name_array, 'abn_not_empty');
        // Convert to a single string.
        $full_name = implode(' ', $name_array);
        $item['abn_name'] = check_plain($full_name);
      }

      // ABN status.
      if (!empty($lookup['entityStatus']['entityStatusCode'])) {
        $item['abn_status'] = check_plain($lookup['entityStatus']['entityStatusCode']);
      }

      // ABN GST dates.
      if (!empty($lookup['goodsAndServicesTax']['effectiveFrom'])) {
        $item['abn_gst_start'] = check_plain($lookup['goodsAndServicesTax']['effectiveFrom']);
      }

      // ABN Entity type.
      if (!empty($lookup['entityType']['entityDescription'])) {
        $item['abn_type'] = check_plain($lookup['entityType']['entityDescription']);
      }
      if (!empty($lookup['entityType']['entityTypeCode'])) {
        $item['abn_type_code'] = check_plain($lookup['entityType']['entityTypeCode']);
      }

      // ABN Entity physical address.
      if (!empty($lookup['mainBusinessPhysicalAddress']['stateCode'])) {
        $item['abn_address_state'] = check_plain($lookup['mainBusinessPhysicalAddress']['stateCode']);
      }
      if (!empty($lookup['mainBusinessPhysicalAddress']['postcode'])) {
        $item['abn_address_postcode'] = check_plain($lookup['mainBusinessPhysicalAddress']['postcode']);
      }

      // Record the time of this update.
      $item['updated'] = check_plain($_SERVER['REQUEST_TIME']);
    }
    // If there was an error during lookup, flag this as needing update.
    else {
      $item['updated'] = 0;
    }
  }
}

/**
 * Wrapper function around empty() for use in php variable functions.
 */
function abn_not_empty($var) {
  return !empty($var);
}

/**
 * Determine whether the data in a field item has expired.
 *
 * @param array $item
 *   An item array as defined by the Field API.
 * @param array $field
 *   A field array as defined by the Field API.
 *
 * @return boolean
 *   TRUE if the field item data as expired, FALSE if it is still "fresh".
 *
 * @see abn_sync_field_item()
 */
function abn_field_item_is_expired($item, $field) {
  $expires = (int) $field['settings']['expires'];
  $expiry_stamp = $item['updated'] + $expires;
  $is_expired = FALSE;

  // If our data is not set to never expire
  // And our updated time is not empty
  // And our updated time + our expiry delay is in the past
  // Then our item has expired.
  if ($expires !== ABN_EXPIRES_NEVER
  && !empty($item['updated'])
  && $expiry_stamp <= $_SERVER['REQUEST_TIME']) {
    $is_expired = TRUE;
  }

  // If we don't have any updated time then we have to assume the data is
  // expired.
  if (empty($item['updated'])) {
    $is_expired = TRUE;
  }
  return $is_expired;
}

/**
 * Get a list of entities with expired abn fields.
 *
 * @return array
 *   An array of entities as returned by the EntityFieldQuery class.
 */
function abn_get_expired_entities() {
  static $entities = array();
  $fields = field_info_fields();

  foreach ($fields as $field) {
    if ($field['module'] == 'abn') {
      // Explicitly do nothing if this field never expires.
      if (ABN_EXPIRES_NEVER === (int) $field['settings']['expires']) {
        continue;
      }

      // Anything longer than 'expires' time ago has expired.
      $expiry_stamp = $_SERVER['REQUEST_TIME'] - (int) $field['settings']['expires'];

      $query = new EntityFieldQuery();
      $query->fieldCondition($field['field_name'], 'updated', $expiry_stamp, '<=');
      $result = $query->execute();

      // Merge our results into the main entities array.
      foreach ($result as $entity_type => $entity_list) {
        if (empty($entities[$entity_type])) {
          $entities[$entity_type] = $entity_list;
        }
        else {
          $entities[$entity_type] += $entity_list;
        }
      }
    }
  }
  return $entities;
}

/**
 * Implements hook_cron_queue_info().
 */
function abn_cron_queue_info() {
  $queues['abn'] = array(
    'worker callback' => 'abn_queue_process',
  );
  return $queues;
}

/**
 * Implements hook_cron().
 */
function abn_cron() {
  $expired_entities = abn_get_expired_entities();
  $queue = DrupalQueue::get('abn');

  foreach ($expired_entities as $entity_type => $entity_list) {
    foreach ($entity_list as $entity_id => $entity_info) {
      // Each id has it's own flavour, eg. nid for nodes.
      $entity_info->id = $entity_id;
      // Type returned by abn_get_expired_entities() is actually "bundle".
      $entity_info->entity_type = $entity_type;
      $queue->createItem($entity_info);
    }
  }
}

/**
 * Worker callback defined in abn_cron_queue_info().
 */
function abn_queue_process($entity_info) {
  // Sanity check.
  if (empty($entity_info->id) || empty($entity_info->entity_type)) {
    return;
  }

  // Simply load the entity and save the fields. Our hooks will handle the rest.
  $entity = entity_load($entity_info->entity_type, array($entity_info->id));
  $entity = reset($entity);
  field_attach_update($entity_info->entity_type, $entity);
}
