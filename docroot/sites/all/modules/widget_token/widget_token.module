<?php

/**
 * @file
 * Defines the hooks and API functions for the Widget Token module.
 */

/*
 * Constant definitions.
 */

/**
 * Widget block request tag name.
 */
define('WIDGET_TOKEN_REQUEST_TAG', 'widget_token_request');

/*
 * Hook implementations.
 */

/**
 * Implements hook_menu().
 */
function widget_token_menu() {
  return array(
    'admin/config/content/widget-token' => array(
      'title' => 'Widget Token',
      'description' => 'Configure the Widget Token integration.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('widget_token_admin_form'),
      'access arguments' => array('administer widget_token'),
      'file' => 'widget_token.admin.inc',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function widget_token_permissiion() {
  return array(
    'administer widget_token' => array(
      'label' => t('Administer Widget Token'),
    ),
  );
}

/**
 * Implements hook_token_info().
 */
function widget_token_token_info() {
  // Declare the token info for the current module.
  return array(
    'types' => array(
      // Declare the widget token type.
      'widget' => array(
        'name' => t('Widget'),
        'description' => t('Tokens which represent a widget.'),
      ),
    ),
    // Provide a generic widget template.
    'tokens' => array(
      'widget' => array(
        '?' => array(
          'name' => t('Generate embed for code for widget'),
          'description' => t('Replace ? with the widget identifier.'),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function widget_token_tokens($type, $tokens, array $data = array(), array $options = array()) {
  // Initialize the $embed_cache to an empty array. This static cache will be
  // used as a fast lookup for already resolved embed codes.
  static $embed_cache = array();
  // Initialize the $replacements variable to an empty array. This will contain
  // the resolved tokens.
  $replacements = array();
  // Only process tokens if the $type is 'widget'.
  if ($type === 'widget') {
    // Check whether a language was specified.
    if (isset($options['language'])) {
      // Use the language code defined in the options.
      $langcode = $options['language']->language;
    }
    else {
      // Fallback on the current language.
      $langcode = NULL;
    }
    // Iterate through the widget tokens.
    foreach ($tokens as $id => $original) {
      // Check whether the embed code needs to be resolved.
      if (!($embed_code = &$embed_cache[$id])) {
        // Create a widget token request.
        $request = widget_token_create_request($id, $langcode);
        // Get the response object.
        $response = $request->getResponse();
        // Check whether the response was successful and contains widget related
        // header.
        if ($response->getStatusCode() === 200 && $response->getHeaders()->get('X-Widget') == $id) {
          // Use the raw response data as embed code.
          $embed_code = $response->getRawData();
        }
        // Set the replacement for the current widget ID.
        $replacements[$original] = $embed_code;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_webclient_proxy_supported_request().
 */
function widget_token_webclient_proxy_supported_request() {
  return array(
    WIDGET_TOKEN_REQUEST_TAG => array(
      'name' => 'Widget Token',
      'description' => 'Used for all requests made by the Widget Token module.',
    ),
  );
}

/*
 * Module helper function.
 */

/**
 * Create a widget token request.
 *
 * @param int $id
 *   A widget identifier.
 * @param string|NULL $langcode
 *   Optional. The language of the widget token data. Defaults to the current
 *   language.
 *
 * @return WebRequest
 *   An instance of WebRequest.
 */
function widget_token_create_request($id, $langcode = NULL) {
  // Check if the langcode argument is missing.
  if ($langcode === NULL) {
    // Use the current language.
    $langcode = $GLOBALS['language']->language;
  }
  // Build the webclient request options.
  $options = array('tags' => array(WIDGET_TOKEN_REQUEST_TAG));
  // Get the server base URL.
  $server_base_url = variable_get('widget_token_server_base_url', 'http://widgets.vlaanderen.be');
  // Trim any trailing slashes.
  $server_base_url = rtrim($server_base_url, '/');
  // Create the webclient request.
  return webclient_request("{$server_base_url}/widget/embed/{$id}?language={$langcode}", $options);
}
