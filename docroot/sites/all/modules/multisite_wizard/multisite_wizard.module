<?php

/**
 * Implements hook_permission().
 */
function multisite_wizard_permission() {
  return array(
    'administer multisite wizard' => array(
      'title' => t('Administer multisite wizard module'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function multisite_wizard_menu() {
  $items = array();    
  
  $items['admin/config/system/multisite_wizard'] = array(    
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_wizard_work_form'),
    'access arguments' => array('administer multisite wizard'),    
    'type' => MENU_NORMAL_ITEM, 
    'title' => 'Multisite wizard',
    'description' => 'Simplify converting single site to multisite',
  );
  
  return $items;
}

/*
 * Main process form
 */
function multisite_wizard_work_form($form_state) {
  $form = array();
  drupal_set_title('Multisite wizard');
  $sites_tree  = multisite_wizard_sites_get_info_tree();
  $sites       = multisite_wizard_get_sites_list($sites_tree);
  $prefixes    = $sites->prefixes;
    
  $form['sites_tree']['#value']  = $sites_tree;
  $form['sites']['#value']       = $sites;
  $form['prefixes']['#value']    = $prefixes;
  $form = multisite_wizard_folder_info_form($form, $form_state);  
  $first_step_finished = $form['finished']['#value'];      
  if (!$first_step_finished) {
    $form['refresh'] = array(
	  '#type' => 'button',
	  '#value' => t('Refresh page'),
	  '#suffix' => t('Push the button after completing each step...')
	);
  }
  if ($first_step_finished) {
    $form = multisite_wizard_populate_tables_form($form, $form_state);
  }
  
  return $form;
}

/*
 * First step form - provide 5 steps for admin to create/copy/setup folders/files for his multisite. User can use "Refresh page" button to check which step is right row to do
 */
function multisite_wizard_folder_info_form($form, &$form_state) {     
  drupal_add_css(drupal_get_path('module', 'multisite_wizard') . '/multisite_wizard.css');
  
  $sites_tree = $form['sites_tree']['#value'];
  $sites      = $form['sites']['#value'];
  $prefixes   = $form['prefixes']['#value'];
      
  $items = array();    
  $done_class = array('done');
  $active_class = array('active');  
  
  $texts_and_hints = array();
  $texts_and_hints[] = array('text' => "Create sites/sites.php file", 'hint' => 'go to /sites folder, copy and rename default.sites.php to sites.php file', 'class' => array(''));
  $texts_and_hints[] = array('text' => "Fill up sites/sites.php file with domain-folder array", 'hint' => 'see documentation and check examples how it should look. At least two different folder should be present in array (array values)', 'class' => array(''));
  $texts_and_hints[] = array('text' => "Create sites folders inside sites/ folder", 'hint' => 'the folders names should be the same as values of domain-folder array in the site.php file', 'class' => array(''));
  $texts_and_hints[] = array('text' => "Each site folder should have own settings.php file", 'hint' => 'copy settins.php file out of sites/default folder to each site folder. Setup unique table prefix for each settings.php file', 'class' => array(''));
  $texts_and_hints[] = array('text' => "Prefix inside each settings.php file should be unique", 'hint' => 'for example, for dev site it\'s ok if prefix is \'dev_\', for live - live_. DON\'T change prefix for current drupal configuration even if it\'s empty - it will break drupal access to the database and you won\'t be able to open your site!', 'class' => array(''));
  $texts_and_hints[] = array('text' => "Pick From and To sites and click on 'Populate tables' button to copy tables for chosen site", 'hint' => '', 'class' => array(''));
  
  $class = '';    
  $skip_else = FALSE;
  $finished = FALSE;
  for ($i = 0; $i < sizeof($texts_and_hints); $i++) {
    if ($i == 0) {      
      if (file_exists(DRUPAL_ROOT . '/sites/sites.php')) {
        $texts_and_hints[$i]['class'] = $done_class;                
      } else {        
        $texts_and_hints[$i]['class'] = $active_class;
        $skip_else = TRUE;
      }            
    } else if ($i == 1 && !$skip_else) {
      $folders = multisite_wizard_get_sites_data();      
      if (sizeof($folders) > 1) {
        $texts_and_hints[$i]['class'] = $done_class;
      } else {
        $texts_and_hints[$i]['class'] = $active_class;
        $skip_else = TRUE;
      }
    } else if ($i == 2 && !$skip_else) {
      $folders = multisite_wizard_get_sites_data();
      $existed_folders = array();
      $else_folders    = array();
      foreach ($folders as $uri => $folder) {
        $directory = DRUPAL_ROOT . '/sites/' . $folder;
        if (file_prepare_directory($directory)) { 
          $existed_folders[] = $folder;
        } else {
          $else_folders[] = $folder;
        }
      }
      if (!sizeof($else_folders)) {
        $texts_and_hints[$i]['class'] = $done_class;
      } else {
        $texts_and_hints[$i]['hint'] .= '<br/>Folders to be created: ' . implode(',', $else_folders);
        $texts_and_hints[$i]['class'] = $active_class;
        $skip_else = TRUE;
      }
      
    } else if ($i == 3 && !$skip_else) {
      $folders = multisite_wizard_get_sites_data();
      $existed_files = array();
      $else_files    = array();
      foreach ($folders as $uri => $folder) {        
        if (file_exists(DRUPAL_ROOT . '/sites/' . $folder . '/settings.php')) { 
          $existed_files[] = $folder;
        } else {
          $else_files[] = $folder;
        }
      }
      if (!sizeof($else_files)) {
        $texts_and_hints[$i]['class'] = $done_class;
      } else {
        $texts_and_hints[$i]['hint'] .= '<br/>Folders where setting.php to be created: ' . implode(',', $else_files);
        $texts_and_hints[$i]['class'] = $active_class;
        $skip_else = TRUE;
      }
    } else if ($i == 4 && !$skip_else) {      
      $unique_prefixes = array_unique($prefixes);      
      if (sizeof($prefixes) == sizeof($unique_prefixes)) {
        $texts_and_hints[$i]['class'] = $done_class;
      } else {        
        $texts_and_hints[$i]['class'] = $active_class;
        $skip_else = TRUE;
      }      
    } else if ($i == 5 && !$skip_else) {
      $texts_and_hints[$i]['class'] = $done_class;
      $finished = TRUE;
    } 
  }      
  $items = array();
  foreach ($texts_and_hints as $element) {
    $items[] = array('class' => $element['class'], 'data' => $element['text'] . "<div class='hint'>Hint: " . $element['hint'] . "</div>");
  }
      
  $list = theme('item_list', array('items' => $items));
  
  $form['finished'] = array(
    '#value' => $finished,
  );  
  $form['list'] = array(
    '#markup' => $list,        
    '#type' => 'markup',
  );
  
  return $form;
}

/*
 * Second step form - provide 5 steps for admin to create/copy/setup folders/files for his multisite
 */
function multisite_wizard_populate_tables_form($form, &$form_state) {        
  $sites_tree = $form['sites_tree']['#value'];
  $sites      = $form['sites']['#value'];
  $prefixes   = $form['prefixes']['#value'];    
  
  $table = array();    
  $header = array(
    array('data' => t('Site folder'), 'class' => array('site_folder')), 
    array('data' => t('Prefix'), 'class' => array('prefix')), 
    array('data' => t('Tables'), 'class' => array('tables')), 
    array('data' => t('Url(s)'), 'class' => array('urls'))
  );

  $current_row = array();
  $else_rows = array();
  $marker = array();
  foreach ($sites_tree as $folder => $info) {
    if ($info['is_current']) {
      $marker = &$current_row;
    } else {
      $marker = &$else_rows;
    }
    $marker[] = array(
      'data' => array(
        $folder,
        empty($info['prefix']) ? t('(no prefix)') : $info['prefix'],
        multisite_wizard_get_tables_by_prefix($sites_tree[$folder]['database'], $prefixes, $folder, $info['prefix']),
        implode('<br/>', $info['urls']),
      ),      
    );
  }
  
  $form['current_site'] = array(
    '#markup' => theme('table', array('header' => $header, 'rows' => $current_row, 'attributes' => array('id' => 'tsg-admin-faq-table'))),        
    '#type' => 'markup',
    '#prefix' => t('<h3>Current site</h3>'),
  );     
  $form['else_list'] = array(
    '#markup' => theme('table', array('header' => $header, 'rows' => $else_rows, 'attributes' => array('id' => 'tsg-admin-faq-table'))),        
    '#type' => 'markup',
    '#prefix' => t('<h3>Other sites</h3>'),
  );       
  $form['migrate_button'] = array(
    '#markup' => t("Before populating tables you should to make a database backup to restore if something will go wrong. &nbsp;Go to " . l('Backup and migrate', 'admin/config/system/backup_migrate', array('attributes' => array('target' => '_blank'))). ' config page and click on Backup now button!<br/>'),        
    '#type' => 'markup',    
  );  
  $form['from_site'] = array(
    '#type' => 'select',
    '#title' => t('From site (current by default)'),
    '#options' => $sites->all_sites,
    '#default_value' => $sites->current_site,
  );  
  $form['to_site'] = array(
    '#type' => 'select',
    '#title' => t('To site'),
    '#options' => $sites->else_sites,    
  );
  $form['sites_tree'] = array(
    '#type' => 'value',
    '#value' => $sites_tree,
  );    
  $form['prefixes'] = array(
    '#type' => 'value',
    '#value' => $sites->prefixes,
  );      
  $form['populate_tables'] = array(
    '#type' => 'submit',
    '#value' => t('Populate tables'),
    '#validate' => array('multisite_wizard_populate_tables_form_validate'),
    '#submit' => array('multisite_wizard_populate_tables_form_submit'),
    '#suffix' => t('<br/>Warning: tables with same name will be replaced! make sure you have backup your site!'),
  );
   
  return $form;
}

function multisite_wizard_populate_tables_form_validate($form, &$form_state) {
  if ($form_state['clicked_button']['#parents'][0] == 'populate_tables') {
    $from_site = $form_state['values']['from_site'];
    $to_site   = $form_state['values']['to_site'];
    $from_db   = $form_state['values']['sites_tree'][$from_site]['database'];
    $to_db     = $form_state['values']['sites_tree'][$to_site]['database'];
    if ($from_db != $to_db) {
      form_set_error('', t('The sites have different databases. Please check settings.php of these sites and make sure that the databases are same. Now the database of <em>%from_site</em> site is <strong>%from_db</strong> and database of <em>%to_site</em> site is <strong>%to_db</strong>', array('%from_site' => $from_site, '%from_db' => $from_db, '%to_site' => $to_site, '%to_db' => $to_db))); //dsm('diff databases');
    } 
    //dsm($form_state['values']);
    
  }
}

function multisite_wizard_populate_tables_form_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#parents'][0] == 'populate_tables') {
    $from_site = $form_state['values']['from_site'];
    $to_site = $form_state['values']['to_site'];
    $sites_tree = $form_state['values']['sites_tree'];  
    $from_prefix = $sites_tree[$from_site]['prefix'];
    $to_prefix = $sites_tree[$to_site]['prefix'];
    $from_database = $sites_tree[$from_site]['database'];
    $to_database = $sites_tree[$to_site]['database'];
    $prefixes = $form_state['values']['prefixes'];        
    
    $else_prefixes = array_diff($form_state['values']['prefixes'], array($from_site => $from_prefix));
  
    $cond = array();
    $params = array();
    $cond[] = "table_schema = :database";
    $params[":database"] = $from_database;
    $cond[] = "table_name LIKE :prefix_0";
    $params[":prefix_0"] = db_like($from_prefix) . '%';  
    $i = 1;  
    foreach ($else_prefixes as $prefix) {
      if ($prefix == '') { continue; }
      $cond[] = "table_name NOT LIKE :prefix_" . $i;
      $params[":prefix_" . $i] = db_like($prefix) . '%';
      $i++;
    }    
    db_query("SET group_concat_max_len = 10072;");  
    // get tables which we are going to copy...    
    $sql = "SELECT table_name FROM `information_schema`.`tables` WHERE " .implode(" AND ", $cond);
    $result = db_query($sql, $params)->fetchAll();    
    foreach ($result as $item) {      
      $from_table = $item->table_name;
      // cut from-prefix and add to-prefix!
      $to_table = multisite_wizard_cut_prefix($prefixes, $item->table_name);
      $to_table = $to_prefix . $to_table;
      
      db_query("DROP TABLE IF EXISTS `".$to_table."`");
      //drupal_set_message("DROP TABLE IF EXISTS `:to_table` ;; :to_table => " . $to_table);                        
      db_query("CREATE TABLE `" . $to_table . "` LIKE `" . $from_table . "`"); 
      //db_query("CREATE TABLE `:to_table` LIKE `:from_table`", array(':to_table' => $to_table, ':from_table' => $from_table)); 
      //drupal_set_message("CREATE TABLE `:to_table` LIKE `:from_table` ;; :to_table => " . $to_table . ", :from_table => " . $from_table);            
      db_query("INSERT `" . $to_table . "` SELECT * FROM `". $from_table . "`");
      //db_query("INSERT `:to_table` SELECT * FROM `:from_table`", array(':to_table' => $to_table, ':from_table' => $from_table));
      //drupal_set_message("INSERT `:to_database`.`:to_table` SELECT * FROM `:from_database`.`:from_table` ;; :to_database => " . $to_database . ", :to_table => " . $to_table . ", :from_database => " . $from_database . ", :from_table => " . $from_table);      
    }
    drupal_set_message(t('Populating process of tables with %to_prefix prefix has been finished. If something goes wrong - go to '.l(t('Backup and migrate restore page'), 'admin/config/system/backup_migrate/restore', array('attributes' => array('target' => '_blank'))).' and restore your backup!', array('%to_prefix' => $to_prefix)));
  }
}

/*
 * Get list of sites - current site is first in the array!
 * 
 */
function multisite_wizard_get_sites_list(&$data) {
  $current_site = '';
  $else_sites   = array();
  $all_sites    = array();
  $prefixes     = array();
  foreach ($data as $folder => $value) {
    if ($value['is_current']) {
      $current_site = $folder;
    } else {
      $else_sites[$folder] = $folder;
    }
    $prefixes[$folder] = $value['prefix'];
  }
  $all_sites[$current_site] = $current_site;
  $all_sites = $all_sites + $else_sites;
  
  $sites = new stdClass();
  $sites->current_site = $current_site;
  $sites->else_sites   = $else_sites;
  $sites->all_sites    = $all_sites;
  $sites->prefixes     =  $prefixes;
  
  return $sites;
}

/*
 * Return array of full sites - settings.php data of each multisite folder. 
 * array(
 *   'site1 folder name' => array(
 *      'uris' => array('from sites.php'),
 *      'database' => 'name of site's database',
 *      'prefix' => 'table's prefixes',
 *      'is_current' => 'shows current website settings',
 *   ),
 *   'site2 folder name' => array(
 *   ...
 *   ),
 *   ...
 */
function multisite_wizard_sites_get_info_tree() {
  $data = array();
  if (file_exists(DRUPAL_ROOT . '/sites/sites.php')) {      
    // get sites folders-uris from sites.php file
    $folders = multisite_wizard_get_sites_data();    
    foreach ($folders as $uri => $folder) {
      // the name of folders in sites.php file and inside sites/ folder should be same, 
      // each sites/sitename/ folder must have settings.php inside it
      if (file_exists(DRUPAL_ROOT . '/sites/' . $folder . '/settings.php')) {
        // list of uris provided for current folder - in drupal 7 each site folder can 
        // has a bunch of uris (localhost/test, livesite.com etc) 
        // For more information see readme inside sites/default.sites.php or sites/sites.php file
        $data[$folder]['urls'][] = $uri;
      }
    }          
    foreach ($data as $folder => $value) {    
      // Get database data from settings.php for each folder
      $db_data = multisite_wizard_get_dbdata_by_folder($folder);   
      // folder names from sites.php and name of folders insider sites/ should be same!
      if (sizeof($db_data)) {
        $data[$folder]['prefix']   = $db_data['prefix'];
        $data[$folder]['database'] = $db_data['database'];
        // current configuration - if data is from global $database variable
        $data[$folder]['is_current'] = $db_data['is_current'];
      }
    }    
  }
  
  return $data;
}
/*
 * Analyze each site folder from sites.php and return info about 
 * site database (name, prefix and wheither is current database)
 */
function multisite_wizard_get_dbdata_by_folder($folder) {
  $db_data = array();
  if (file_exists(DRUPAL_ROOT . '/sites/' . $folder . '/settings.php')) {
    include_once DRUPAL_ROOT . '/sites/' . $folder . '/settings.php';
    if (isset($databases)) {
      $db_data['prefix']     = $databases['default']['default']['prefix'];
      $db_data['database']   = $databases['default']['default']['database'];      
      $db_data['is_current'] = 0;
    } else {
      global $databases;
      $db_data['prefix']     = $databases['default']['default']['prefix'];
      $db_data['database']   = $databases['default']['default']['database'];      
      $db_data['is_current'] = 1;
    }
  }
  
  return $db_data;
}
/*
 *  Get a number of tables which has prefix and exclude tables has a list of another prefixes
 * $database - the name of database
 * $prefixes - the list of prefixes to be excluded
 * $site - the name of site folder
 * $prefix - the prefix which must have each result table
 * TODO: make less parameters for this function!
 */
function multisite_wizard_get_tables_by_prefix($database, $prefixes, $site, $prefix) {      
  $else_prefixes = array_diff($prefixes, array($site => $prefix));    
  $cond = array();
  $params = array();
  $cond[] = "table_schema = :database";
  $params[":database"] = $database;
  $cond[] = "table_name LIKE :prefix_0";
  $params[":prefix_0"] = db_like($prefix) . '%';  
  $i = 1;  
  foreach ($else_prefixes as $else_prefix) {
    if ($else_prefix  == '') { continue; }
    $cond[] = "table_name NOT LIKE :prefix_" . $i;
    $params[":prefix_" . $i] = db_like($else_prefix) . '%';
    $i++;
  }  
  $sql = "SELECT COUNT(table_name) FROM `information_schema`.`tables` WHERE " .implode(" AND ", $cond);  
  $count = db_query($sql, $params)->fetchField();
  
  return $count;
}

/*
 * Cut a list of prefixes out of the string
 */
function multisite_wizard_cut_prefix($prefixes = array(), $string) {    
  foreach ($prefixes as $prefix) {
    if (substr($string, 0, strlen($prefix)) == $prefix) {
      $string = substr($string, strlen($prefix), strlen($string) );
    } 
  }
  
  return $string;
}

/*
 * Return associative array of sites folders and uri-s which are stored in sites/sites.php file
 */
function multisite_wizard_get_sites_data() {    
  $confdir = 'sites';
  $sites = array();
  if (file_exists(DRUPAL_ROOT . '/' . $confdir . '/sites.php')) {
    // This will overwrite $sites with the desired mappings.
    include(DRUPAL_ROOT . '/' . $confdir . '/sites.php');
  }
  
  return $sites;    
}