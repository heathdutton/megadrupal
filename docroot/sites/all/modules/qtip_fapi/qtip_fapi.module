<?php
/**
 * @file
 * Generate fancy tooltips via the Form API.
 *
 * @author
 * westwesterson
 */

/**
 * Implements hook_element_info_alter().
 *
 * Add a process callback for qtip_fapi.
 */
function qtip_fapi_element_info_alter(&$types) {
  foreach ($types as $type => $values) {
    $types[$type]['#process'][] = 'qtip_fapi_process';
  }
  return;
}

/**
 * Callback: Process form tooltip elements.
 *
 * @see qtip_fapi_element_info_alter()
 */
function qtip_fapi_process($element, &$form_state) {
  // Does the element define a tooltip?
  if (isset($element['#qtip']) && !empty($element['#qtip'])) {
    $tooltip_overrides = array();

    // Make sure the library is installed.
    $lib_path = libraries_get_path('qtip');
    if (empty($lib_path)) {
      drupal_set_message(t('You need to add qTip2 to your libraries directory to use the qTip Form API module'), 'warning', FALSE);
      return $element;
    }

    // Set the title and remove from variables.
    if (isset($element['#qtip']['title'])) {
      $tooltip_overrides['content']['title'] = _qtip_fapi_process_helper($element, $element['#qtip']['title']);
      unset($element['#qtip']['title']);
    }
    // Set the tooltip content and remove from variables.
    if (isset($element['#qtip']['text'])) {
      $tooltip_overrides['content']['text'] = _qtip_fapi_process_helper($element, $element['#qtip']['text']);
      unset($element['#qtip']['text']);
    }
    // Add other unaccounted for variables to tooltip pass through.
    foreach ($element['#qtip'] as $key => $value) {
      $tooltip_overrides[$key] = $value;
    }
    // Add js to the page.
    qtip_fapi_attach_js($lib_path, $element['#id'], $tooltip_overrides);

  }
  return $element;
}

/**
 * Attach for qtip_fapi.
 *
 * @param string $lib_path
 *   Path to qtip library.
 *
 * @param string $id
 *   Id of the form api element; without pound sign (eg. 'id').
 *
 * @param array $tooltip_overrides
 *   Associative array of overrides formatted as per the defaults for qtip.
 *   https://github.com/Craga89/qTip2/blob/master/docs/global.md#fnqtipdefaults
 */
function qtip_fapi_attach_js($lib_path, $id, $tooltip_overrides) {
  // Add the plugin.
  drupal_add_js($lib_path . '/jquery.qtip.min.js');
  drupal_add_css($lib_path . '/jquery.qtip.min.css');

  // Add settings and process them.
  drupal_add_js(array('qtipFAPI' => array($id => $tooltip_overrides)), 'setting');
  drupal_add_js(drupal_get_path('module', 'qtip_fapi') . '/js/qtip_fapi_process.js');

  return;
}

/**
 * Offer flexible way to input content into tooltip.
 *
 * @param array $element
 *   The element from the form api.
 * @param array $arguments
 *   An associative array containing:
 *   - type: Type of tooltip (description or markup)
 *
 * @return string
 *   The markup and or text which will be displayed to the user via tooltip.
 */
function _qtip_fapi_process_helper(&$element, $arguments) {
  switch ($arguments['type']) {
    // Use the description as the content text.
    case 'description':
      $override = $element['#description'];
      unset($element['#description']);
      break;

    case 'markup':
      $override = $arguments['value'];
      break;
  }
  return $override;
}
