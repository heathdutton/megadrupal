<?php

/**
 * @file
 * Main file for Url formatter privatemsg module.
 */


/**
 * Implements hook_menu().
 */
function url_formatter_privatemsg_menu() {
  $items['admin/config/messaging/privatemsg/url-formatter'] = array(
    'title'            => 'Url formatter for private message settings',
    'description'      => 'Configure Url formatter for private message settings.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('url_formatter_privatemsg_admin_settings'),
    'file'             => 'url_formatter_privatemsg.admin.inc',
    'access arguments' => array('administer privatemsg settings'),
    'type'             => MENU_NORMAL_ITEM,
  );
  return $items;
}


/**
 * Load formatter.
 */
function url_formatter_privatemsg() {
  $formatter = url_formatter_field_formatter_info();

  // Ğ¡all hook_url_formatter_privatemsg_alter.
  drupal_alter('url_formatter_privatemsg', $formatter);
  return $formatter;
}


/**
 * Implements hook_url_formatter_privatemsg_alter().
 */
function url_formatter_privatemsg_url_formatter_privatemsg_alter(&$data) {
  if ($settings = variable_get('url_formatter_privatemsg')) {
    $data['url_formatter']['settings'] = $settings;
  }
}


/**
 * Theme the private message.
 *
 * @see template_preprocess_privatemsg_view()
 */
function url_formatter_privatemsg_preprocess_privatemsg_view(&$vars) {
  global $user;
  $message = $vars['message'];
  $formatter_settings = url_formatter_privatemsg();

  $body = strip_tags($message->body);
  foreach ($formatter_settings['url_formatter']['settings'] as $class => $settings) {
    if (class_exists($class)) {
      $formatter = new $class();
      $field['field_name'] = $class;
      $display['settings'] = $instance['display'][$class]['settings'] = $formatter_settings['url_formatter']['settings'];
      $body = $formatter->view('message', $message, $field, $instance, '', array(), $display, 0, $body);
    }
  }

  $message->content = array(
    '#view_mode' => 'message',
    'body' => array(
      '#markup' => $body,
      '#weight' => -4,
    ),
  );

  if ($message->has_tokens) {
    // Replace tokens including option to add a notice if the user is not a
    // recipient.
    $message->content['body']['#markup'] = privatemsg_token_replace($message->content['body']['#markup'], array('privatemsg_message' => $message), array('privatemsg-token-notice' => TRUE, 'sanitize' => TRUE));
  }

  // Build fields content.
  field_attach_prepare_view('privatemsg_message', array($vars['mid'] => $message), 'message');
  $message->content += field_attach_view('privatemsg_message', $message, 'message');
  // Render message body.
  $vars['message_body'] = drupal_render($message->content);
}
