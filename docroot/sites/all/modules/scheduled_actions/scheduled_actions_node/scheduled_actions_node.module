<?php

/**
 * @file Basically creates all functionalities for this module:
 *
 * - central configuration form,
 * - configuration tab on every node_type_form, which is basically a subset
 *   of central configuration form,
 * - vertiacal tab on node_edit_form, where scheduled actions can bi adminitrated for a
 *   given node,
 * - central list of all scheduled actions with cetral form for adding new scheduled
 *   actions.
 */

/**
 * Implements hook_menu().
 */
function scheduled_actions_node_menu() {
  $items = array();

  $items['admin/config/system/actions/scheduled_actions_node'] = array(
    'title' => 'Node scheduled actions',
    'description' => 'Configuration page for node scheduled actions.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scheduled_actions_node_admin_form'),
    'access arguments' => array('administer scheduled actions node'),
  );

  $items['admin/config/system/actions/scheduled_actions_node/config'] = array(
    'title' => 'Configuration',
    'description' => 'Configuration page for node scheduled actions.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => TRUE,
  );

  $items['admin/config/system/actions/scheduled_actions_node/list'] = array(
    'title' => 'List',
    'description' => 'List node scheduled actions.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scheduled_actions_node_list_form'),
    'access arguments' => array('define scheduled actions node'),
  );

  $items['scheduled_actions_node/autocomplete'] = array(
    'title' => 'scheduled_actions_node autocomplete',
    'description' => 'Autocomplete textfield callback.',
    'page callback' => 'scheduled_actions_node_autocomplete',
    'access arguments' => array('define scheduled actions node'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * This is a callback for autocomplete texfield.
 * @param $string string to be searched trhrough DB.
 * @return JSON output with all matching items.
 */
function scheduled_actions_node_autocomplete($string = '') {
  $matches = array();
  if ($string) {
    $result = db_select('node')->fields('node', array('title', 'nid'))->condition('title', db_like($string) . '%', 'LIKE')->range(0, 10)->execute();
    foreach ($result as $node) {
      $title = check_plain($node->title);
      $matches[$title . ' [nid: ' . $node->nid . ']'] = $title;
    }
  }

  drupal_json_output($matches);
}


/**
 * Outputs list of all scheduled actions for nodes. Also adds a form for creation of
 * new scheduled actions at the bottom of page.
 */
function scheduled_actions_node_list_form($form, &$form_state) {
  // Output table.
  $header = array(
  	'title' => t('Content'),
  	'action' => t('Action name'),
  	'time' => t('Trigger time'),
  );
  $data = scheduled_actions_node_list_actions();

  $form['scheduled_actions_list'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $data,
    '#empty' => t('No actions scheduled for this content.'),
    '#js_select' => FALSE,
  );

  $form['remove_action'] = array(
    '#value' => t('Remove selected'),
    '#type' => 'submit',
    '#name' => 'remove_scheduled_action_submit',
    '#submit' => array('scheduled_actions_node_list_remove'),
    '#limit_validation_errors' => array(
    	array('scheduled_actions_list')
    ),
  );

  // Add scheduled action form.
  $form['add_wrapper'] = array(
    '#title' => t('Schedule another action'),
    '#type' => 'fieldset',
    '#id' => 'add-wrapper',
  );
  $form['add_wrapper']['content'] = array(
    '#title' => t('Content'),
    '#type' => 'textfield',
    '#autocomplete_path' => 'scheduled_actions_node/autocomplete',
    '#required' => TRUE,
    '#element_validate' => array('scheduled_actions_node_autocomplete_validate'),
    '#ajax' => array(
      'callback' => 'scheduled_actions_node_list_ajax_callback',
      'wrapper' => 'add-wrapper',
    ),
  );
  $form['add_wrapper']['action'] = array(
    '#title' => t('Action'),
    '#type' => 'select',
    '#options' => array(),
    '#required' => TRUE,
    '#access' => FALSE,
  );
  $form['add_wrapper']['time'] = array(
    '#title' => t('Trigger time'),
    '#type' => 'date_popup',
    '#element_validate' => array('scheduled_actions_node_add_action_validate'),
    '#date_format' => variable_get('date_format_' . variable_get('scheduled_actions_node_date_format', 'short'), 'm/d/Y - H:i'),
    '#required' => TRUE,
    '#access' => FALSE,
  );
  $form['add_wrapper']['add_action'] = array(
    '#value' => t('Add'),
    '#type' => 'submit',
    '#name' => 'add_scheduled_action_submit',
    '#submit' => array('scheduled_actions_node_list_add'),
    '#access' => FALSE,
  );

  // Correct stuff on AJAX autocomplete callback.
  if (isset($form_state['triggering_element']['#name']) && $form_state['triggering_element']['#name'] == 'content') {
    // Get supported actions.
    $nid = $form_state['values']['content'];

    $node_type = db_select('node')->fields('node', array('type'))->condition('nid', $nid)->execute()->fetchField();
    $form['add_wrapper']['action']['#options'] = scheduled_actions_node_get_enabled_actions($node_type);

    if (!empty($form['add_wrapper']['action']['#options'])) {
      // Show elements.
      $form['add_wrapper']['action']['#access'] = TRUE;
      $form['add_wrapper']['time']['#access'] = TRUE;
      $form['add_wrapper']['time']['date']['#access'] = TRUE;
      $form['add_wrapper']['time']['time']['#access'] = TRUE;
      $form['add_wrapper']['add_action']['#access'] = TRUE;
    }
  }

  return $form;
}

/**
 * Ajax callback for autocomplete textfield for content title. This callback will return other needed fields,
 * if content was submitted correctly.
 */
function scheduled_actions_node_list_ajax_callback($form, $form_state) {
  return $form['add_wrapper'];
}


/**
 * "Remove" submit callback for scheduled actions list.
 */
function scheduled_actions_node_list_remove($form, $form_state) {
  foreach ($form_state['values']['scheduled_actions_list'] as $said => $item) {
    if (!empty($item)) {
      scheduled_actions_delete_action($said);
    }
  }
}

/**
 * "Add" submit callback for scheduled actions list.
 */
function scheduled_actions_node_list_add($form, $form_state) {
  // Load data.
  $data['entity_id'] = $form_state['values']['content'];
  $data['time'] = strtotime($form_state['values']['time']);
  $data['aid'] = $form_state['values']['action'];
  $data['type'] = 'node';
  $action = actions_load($data['aid']);
  $data['context']['context'] = unserialize($action->parameters);

  // Check if his content type supports this action and schedule it.
  $node_type = db_select('node')->fields('node', array('type'))->condition('nid', $data['entity_id'])->execute()->fetchField();
  $actions = scheduled_actions_node_get_enabled_actions($node_type);
  if (isset($actions[$data['aid']])) {
    scheduled_actions_save_action($data);
  }
}

/**
 * Autocomplete textfield validation callback. Tries to parse NID and saves it to $form_state.
 * Based on node_reference_autocomplete_validate().
 */
function scheduled_actions_node_autocomplete_validate($element, &$form_state, $form) {
  $value = $element['#value'];
  $nid = NULL;

  if (!empty($value)) {
    // Check whether we have an explicit "[nid:n]" input.
    preg_match('/^(?:\s*|(.*) )?\[\s*nid\s*:\s*(\d+)\s*\]$/', $value, $matches);
    if (!empty($matches)) {
      // Explicit nid. Check that the 'title' part matches the actual title for
      // the nid.
      list(, $title, $nid) = $matches;
      if (!empty($title)) {
        $real_title = db_select('node', 'n')
          ->fields('n', array('title'))
          ->condition('n.nid', $nid)
          ->execute()
          ->fetchField();
        if (trim($title) != trim($real_title)) {
          form_error($element, t('There was an error parsing NID of a given content.'));
        }
      }
    }
    else {
      form_error($element, t('There was an error parsing NID of a given content.'));
    }
  }

  // Set the element's value as the node id that was extracted from the entered
  // input.
  form_set_value($element, $nid, $form_state);
}


/**
 * Implements hook_permission().
 */
function scheduled_actions_node_permission() {
  $perms = array(
    'administer scheduled actions node' => array(
      'title' => t('Administer node scheduled actions'),
      'description' => t('Administer node scheduled actions.')
    ),
    'define scheduled actions node' => array(
      'title' => t('Define node scheduled actions'),
      'description' => t('Add/edit/delete node scheduled actions.')
    ),
  );

  return $perms;
}

/**
 * Configuration form callback.
 */
function scheduled_actions_node_admin_form($form, &$form_state) {
  $form = array();
  $node_types = node_type_get_names();
  $actions = scheduled_actions_node_actions_list();


  // Build admin form
  $form['general'] = array(
      '#title' => 'General configuration',
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
  );
  $formats = system_get_date_types();
  $options = array();
  foreach ($formats as $format => $data) {
    $options[$format] = $data['title'];
  }
  $form['general']['scheduled_actions_node_date_format'] = array(
    '#type' => 'select',
    '#title' => 'Date format',
    '#default_value' => variable_get('scheduled_actions_node_date_format', 'short'),
    '#options' => $options,
    '#description' => t('Date format, that will be used for date popup widget on node scheduled actions configuration form. It must contain date and time in order to work properly!'),
  );

  // Content types configuration.
  $form['content_types'] = array(
      '#title' => 'Content types',
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
  );
  foreach ($node_types as $type => $name) {
    $type = check_plain($type);

    // Enable scheduled actions for a given node type.
    $form['content_types']['scheduled_actions_node_enable_' . $type] = array(
      '#title' => check_plain($name),
      '#type' => 'checkbox',
      '#description' => t('Enable scheduled actions for %type content type.', array('%type' => $name)),
      '#default_value' => variable_get('scheduled_actions_node_enable_' . $type, FALSE),
    );

    // Select actions to be enabled for a given node type.
    $form['content_types'][$type] = array(
      '#title' => 'Enable actions',
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#states' => array(
        'invisible' => array(
          'input[name=scheduled_actions_node_enable_' . $type . ']' => array('checked' => FALSE),
        ),
      ),
    );
    $form['content_types'][$type]['scheduled_actions_node_actions_' . $type] = array(
      '#description' => t('Select actions that will be enabled for scheduling for %type', array('%type' => $name)),
      '#type' => 'checkboxes',
      '#options' => $actions,
      '#default_value' => variable_get('scheduled_actions_node_actions_' . $type, array()),
    );
    $form['content_types']['array_filter'] = array(
      '#type' => 'value',
      '#value' => TRUE,
    );
  }

  return system_settings_form($form);
}

/**
 * Implements hook_form_BASE_ID_alter().
 * Adds scheduled actions configuration vertical tab to node type form.
 */
function scheduled_actions_node_form_node_type_form_alter(&$form, $form_state) {
    $type = check_plain($form['#node_type']->type);
    $actions = scheduled_actions_node_actions_list();

    // Enable scheduled actions for a given node type.
    $form['scheduled_actions_node'] = array(
      '#title' => 'Node scheduled actions',
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#access' => user_access('administer scheduled actions node'),
      '#group' => 'additional_settings',
    );
    $form['scheduled_actions_node']['scheduled_actions_node_enable'] = array(
      '#title' => 'Enable node scheduled actions',
      '#type' => 'checkbox',
      '#description' => t('Enable scheduled actions for this content type.'),
      '#default_value' => variable_get('scheduled_actions_node_enable_' . $type, FALSE),
    );

    // Select actions to be enabled for a given node type.
    $form['scheduled_actions_node'][$type] = array(
      '#title' => 'Enable actions',
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#states' => array(
        'invisible' => array(
          'input[name=scheduled_actions_node_enable]' => array('checked' => FALSE),
        ),
      ),
    );
    $form['scheduled_actions_node'][$type]['scheduled_actions_node_actions'] = array(
      '#description' => t('Select actions that will be enabled for scheduling.'),
      '#type' => 'checkboxes',
      '#options' => $actions,
      '#default_value' => variable_get('scheduled_actions_node_actions_' . $type, array()),
    );

    return $form;
}

/**
 * Get list of possible actions, filtered by type.
 * @param Type of actions to be filtered out.
 * @return Array of actions, prepared to act as options in Drupal form.
 */
function scheduled_actions_node_actions_list($type = NULL) {
  $actions = actions_get_all_actions();
  $actions_type = array();
  foreach ($actions as $key => $action) {
    if ($type == NULL || $action['type'] == $type) {
      $actions_type[$key] = $action['label'];
    }
  }

  return $actions_type;
}

/**
 * Implements hook_field_extra_fields().
 */
function scheduled_actions_node_field_extra_fields() {
  $types = node_type_get_types();
  $extra = array();

  foreach ($types as $type => $info) {
    if (variable_get('scheduled_actions_node_enable_' . $type, FALSE)) {
      $extra['node'][$type]['form'] = array(
        'scheduled_actions_node' => array(
          'label' => t('Scheduled actions'),
          'description' => t('Scheduled actions settings.'),
          'weight' => 100,
        ),
      );
    }
  }

  return $extra;
}

/**
 * Implements hook_form_BASE_ID_alter().
 * Adds scheduled_actions_node vertical tab to node edit form. User can define scheduled
 * actions for a given node in that vertical tab.
 */
function scheduled_actions_node_form_node_form_alter(&$form, $form_state) {
  $type = check_plain($form['type']['#value']);

  if (variable_get('scheduled_actions_node_enable_' . $type, FALSE)) {
    $form['#submit'][] = 'scheduled_actions_node_add_action_submit';
    // Create vertical tab.
    $form['scheduled_actions_node'] = array(
      '#title' => t('Scheduled actions'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 100,
      '#access' => user_access('define scheduled actions node'),
      '#group' => 'additional_settings',
    );

    $form['scheduled_actions_node']['wrapper'] = array(
      '#type' => 'fieldset',
      '#prefix' => '<div id="scheduled-actions-wrapper">',
      '#suffix' => '</div>',
    );

    // Output table.
    $header = array(
    	'action' => t('Action name'),
    	'time' => t('Trigger time'),
    );

    $data = array();
    if (isset($form['nid']['#value'])) {
      $data = scheduled_actions_node_list_actions($form['nid']['#value']);
    }

    // Cached actions for new (not saved yet) node.
    if (!isset($form['nid']['#value']) && isset($form_state['storage']['scheduled_actions_node']['to_save_data'])) {
      $actions = actions_get_all_actions();
      foreach ($form_state['storage']['scheduled_actions_node']['to_save_data'] as $key => $item) {
        $data[$key] = array(
          'action' => $actions[$item['aid']]['label'],
          'time' => format_date($item['time'], variable_get('scheduled_actions_node_date_format', 'short')),
        );
      }
    }

    $form['scheduled_actions_node']['wrapper']['scheduled_actions_list'] = array(
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => $data,
      '#empty' => t('No actions scheduled for this content.'),
      '#js_select' => FALSE,
    );

    // Add scheduled action form.
    $form['scheduled_actions_node']['wrapper']['scheduled_actions_add'] = array(
      '#title' => t('Schedule another action'),
      '#type' => 'fieldset',
    );
    $form['scheduled_actions_node']['wrapper']['scheduled_actions_add']['action'] = array(
      '#title' => t('Action'),
      '#type' => 'select',
      '#options' => scheduled_actions_node_get_enabled_actions($type),
      '#element_validate' => array('scheduled_actions_node_add_action_validate'),
    );
    $form['scheduled_actions_node']['wrapper']['scheduled_actions_add']['time'] = array(
      '#title' => t('Trigger time'),
      '#type' => 'date_popup',
      '#element_validate' => array('scheduled_actions_node_add_action_validate'),
      '#date_format' => variable_get('date_format_' . variable_get('scheduled_actions_node_date_format', 'short'), 'm/d/Y - H:i'),
    );
    $form['scheduled_actions_node']['wrapper']['scheduled_actions_add']['add_action'] = array(
      '#value' => t('Add'),
      '#type' => 'submit',
      '#name' => 'add_scheduled_action_submit',
      '#submit' => array('scheduled_actions_node_add_action_submit'),
      '#limit_validation_errors' => array(
      	array('action'),
        array('time'),
        array('time', 'time'),
        array('time', 'date'),
        array('nid'),
      ),
      '#ajax' => array(
        'callback' => 'scheduled_actions_node_add_action_ajax_callback',
        'wrapper' => 'scheduled-actions-wrapper',
      ),
    );
    $form['scheduled_actions_node']['wrapper']['scheduled_actions_add']['remove_action'] = array(
      '#value' => t('Remove selected'),
      '#type' => 'submit',
      '#name' => 'remove_scheduled_action_submit',
      '#submit' => array('scheduled_actions_node_add_action_submit'),
      '#limit_validation_errors' => array(
        array('scheduled_actions_list'),
      ),
      '#ajax' => array(
        'callback' => 'scheduled_actions_node_add_action_ajax_callback',
        'wrapper' => 'scheduled-actions-wrapper',
      ),
    );

    // Clear time and date fields if submitted by ajax.
    /*if ($form_state['clicked_button']['#name'] == 'add_scheduled_action_submit' || $form_state['clicked_button']['#name'] == 'remove_scheduled_action_submit') {
      // Clear 'add' form.
      $form['scheduled_actions_node']['wrapper']['scheduled_actions_add']['action']['#default_value'] = NULL;
      $form['scheduled_actions_node']['wrapper']['scheduled_actions_add']['time']['#defaut_value'] = array();
      $form['scheduled_actions_node']['wrapper']['scheduled_actions_add']['time']['date']['#default_value'] = NULL;
      $form['scheduled_actions_node']['wrapper']['scheduled_actions_add']['time']['time']['#default_value'] = NULL;
    }*/
  }
}

/**
 * AJAX callback.
 */
function scheduled_actions_node_add_action_ajax_callback(&$form, &$form_state) {
  return $form['scheduled_actions_node']['wrapper'];
}

/**
 * Form submit function for sceduled_actions_node AJAX requests.
 */
function scheduled_actions_node_add_action_submit(&$form, &$form_state) {
  // Add scheduled actions.
  if ($form_state['triggering_element']['#name'] == 'add_scheduled_action_submit') {
    // Save data
    $data['time'] = strtotime($form_state['values']['time']);
    $data['aid'] = $form_state['values']['action'];
    $data['type'] = 'node';
    $action = actions_load($data['aid']);
    $data['context']['context'] = unserialize($action->parameters);

    // Already created node.
    if (isset($form['nid']['#value'])) {
      // Schedule action.
      $data['entity_id'] = $form_state['values']['nid'];
      scheduled_actions_save_action($data);
    }
    // New node, that was not saved yet.
    else {
      // Schedule an action.
      $data['entity_id'] = NULL;
      $form_state['storage']['scheduled_actions_node']['to_save_data'][] = $data;
    }

    // Force form rebuild.
    $form_state['rebuild'] = TRUE;
  }


  // Remove actions.
  elseif ($form_state['triggering_element']['#name'] == 'remove_scheduled_action_submit') {
    // Already created node.
    if (isset($form['nid']['#value'])) {
      // Remove actions
      foreach ($form_state['values']['scheduled_actions_list'] as $said => $item) {
        if (!empty($item)) {
          scheduled_actions_delete_action($said);
        }
      }
    }
    // New node, that was not saved yet.
    else {
      // Remove actions
      foreach ($form_state['values']['scheduled_actions_list'] as $said => $item) {
        if (!empty($item)) {
          unset($form_state['storage']['scheduled_actions_node']['to_save_data'][$said]);
        }
      }
    }

    // Force form rebuild.
    $form_state['rebuild'] = TRUE;
  }


  // Save scheculed actions for new node to cache.
  else {
    if (isset($form_state['storage']['scheduled_actions_node'])) {
      // Put to cache with TTL 24h.
      cache_set('scheduled_actions_node_' . $form['#build_id'], $form_state['storage']['scheduled_actions_node']['to_save_data'], 'cache', 86400);
    }
  }

  return $form;
}

/**
 * Implements hook_node_insert().
 * Saves scheduled actions for a new node (NID was non-existent until now).
 */
function scheduled_actions_node_node_insert($node) {
  if (isset($node->form_build_id)) {
    if ($data = cache_get('scheduled_actions_node_' . $node->form_build_id, 'cache')) {
      foreach ($data->data as $key => $item) {
        $item['entity_id'] = $node->nid;
        scheduled_actions_save_action($item);
      }

      cache_clear_all('scheduled_actions_node_' . $node->form_build_id, 'cache');
    }
  }
}

/**
 * Form validation function for sceduled_actions_node AJAX requests.
 */
function scheduled_actions_node_add_action_validate($element, &$form_state) {
  if ($form_state['triggering_element']['#name'] == 'add_scheduled_action_submit') {
    if ($element['#name'] == 'action') {
      $type = $form_state['values']['type'];
      $enabled = variable_get('scheduled_actions_node_actions_' . $type, array());
      if (empty($form_state['values']['action'])) {
         form_error($element, t('Action must be set.'));
      }
      elseif (!in_array($form_state['values']['action'], $enabled)) {
         form_error($element, t('Unsupported action requested.'));
      }
    }
    if ($element['#name'] == 'time') {
      if (empty($form_state['values']['time']['time']) || empty($form_state['values']['time']['date'])) {
         form_error($element, t('Time must be set.'));
      }
      else {
        $date_format = variable_get('date_format_'.variable_get('scheduled_actions_node_date_format', 'short'), 'm/d/Y - H:i');
		    $date = date_create_from_format($date_format, implode(" - ", $element['#value']));
		    if ($date === FALSE){
		      form_error($element,t('Invalid time format'));
		    }
        elseif ($date->getTimestamp() < REQUEST_TIME) {
          form_error($element, t('Time must be in future'));
        }
      }
    }
  }
}

/**
 * Returns data array of all scheduled actions for given node.
 * Array is prepared to be used in theme_table().
 *
 * @param $nid Node ID of node.
 * @return Array of actions.
 */
function scheduled_actions_node_list_actions($nid=NULL) {
  // Set filters.
  $filter['type'] = 'node';

  // We filter by nid only if submitted.
  if (isset($nid)) {
    $filter['entity_id'] = $nid;
  }

  // Get actions.
  $data = scheduled_actions_get_scheduled_actions($filter);
  $actions = actions_get_all_actions();
  $return = array();

  // Load data into array.
  foreach ($data as $item) {
    // Load action name and time.
    $return[$item->said] = array(
      'action' => $actions[$item->aid]['label'],
      'time' => format_date($item->time, variable_get('scheduled_actions_node_date_format', 'short')),
    );

    // If no NID was submitted, we have to load also content's title.
    if (!isset($nid)) {
      $node = node_load($item->entity_id);
      $return[$item->said]['title'] = l($node->title, drupal_get_path_alias('node/' . $node->nid));
    }
  }

  return $return;
}

/**
 * Returns array of all enabled actions for a given type.
 * @param $type content type
 * @return array of active actions for given content type, prepared as form API options array.
 */
function scheduled_actions_node_get_enabled_actions($type) {
  $enabled = variable_get('scheduled_actions_node_actions_' . $type, array());
  $actions = actions_get_all_actions();

  //filter out actions that don't exist anymore
  $enabled = array_intersect($enabled, array_keys($actions));

  $return = array();
  foreach ($enabled as $key => $value) {
    $return[$value] = $actions[$value]['label'];
  }

  return $return;
}
