<?php

/**
 * @file Creates new advanced action, that allows user to schedule another action at some
 * time in future.
 */

/**
 * Constant that defined relative time input type.
 */
define('SCHEDULED_ACTIONS_RELATIVE_TIME', 1);

/**
 * Constant that defined absolute time input type.
 */
define('SCHEDULED_ACTIONS_ABSOLUTE_TIME', 0);

/**
 * Implements hook_action_info().
 */
function scheduled_actions_action_info() {
  return array(
    'scheduled_actions_schedule_action' => array(
      'type' => 'system',
      'label' => t('Schedule an action'),
      'configurable' => TRUE,
      'triggers' => array(
        'any',
      ),
    ),
  );
}

/**
 * Implements hook_init().
 * It is used to correct action type depending on type of "child" action.
 */
function scheduled_actions_init() {
  if (arg(0) == 'admin' && variable_get('scheduled_actions_needs_corrections', FALSE)) {
    scheduled_actions_correct_types();
  }
}

/**
 * Action implementation. It will take child action and entire context, save it to DB and schedule it
 * to be triggered in future.
 */
function scheduled_actions_schedule_action($object = NULL, $context = array(), $a1 = NULL, $a2 = NULL) {
  $data['aid'] = $context['aid'];
  $data['type'] = $context['group'];

  // Save context
  $context_all['context'] = $context;
  $context_all['a1'] = $a1;
  $context_all['a2'] = $a2;
  $data['context'] = serialize($context_all);

  // Save time.
  $data['time'] = 1;
  if ($context['type'] == SCHEDULED_ACTIONS_ABSOLUTE_TIME) {
    $data['time'] = strtotime($context['absolute']);
  }
  elseif ($context['type'] == SCHEDULED_ACTIONS_RELATIVE_TIME) {
    $data['time'] = strtotime($context['relative']);
  }

  // Get entity id
  switch ($data['type']) {
    case 'node':
      $data['entity_id'] = $object->nid;
      break;
    case 'comment':
      $data['entity_id'] = $object->cid;
      break;
    case 'system':
      $data['entity_id'] = 0;
      break;
    case 'user':
      $data['entity_id'] = $object->uid;
      break;
  }

  // If $object is NULL set
  if (!isset($object)) {
    $data['entity_id'] = 0;
  }

  //Test if valid action
  $valid = isset($data['entity_id']); // Prevent this to stay <uninitialized>.
  $valid &= db_select('scheduled_actions', 'a') // Prevent recursive calling of same action.
              ->condition('a.entity_id', $data['entity_id'])
              ->condition('a.type', $data['type'])
              ->condition('a.triggered_time', 0)
              ->fields('a')
              ->execute()
              ->rowCount() == 0;

  if ($valid) {
    // Insert scheduled action to DB.
    db_insert('scheduled_actions')
      ->fields($data)
      ->execute();
  }
  else {
    // Report if scheduling failed
    $action = actions_load($data['aid']);
    watchdog('scheduled_actions', 'Action %action could not be scheduled for later activation.', array('%action' => $action->label), WATCHDOG_WARNING);
    drupal_set_message(t('Action %action could not be scheduled for later activation.', array('%action' => $action->label)), 'warning');
  }
}

/**
 * Action configuration form.
 */
function scheduled_actions_schedule_action_form($context) {
  // Default values for form.
  $aid = isset($context['aid']) ? $context['aid'] : NULL;
  $type = isset($context['type']) ? $context['type'] : 1;
  $relative = isset($context['relative']) ? $context['relative'] : NULL;
  $absolute = isset($context['absolute']) ? $context['absolute'] : NULL;

  // Load actions
  $actions = actions_get_all_actions();
  foreach ($actions as $key => $action) {
    $options[$key] = $action['label'];
  }

  // Generate form
  $form = array();
  $form['aids'] = array(
    '#type' => 'select',
    '#title' => t("Action to schedule"),
    '#default_value' => $aid,
    '#multiple' => FALSE,
    '#options' => $options,
    '#required' => TRUE,
    '#description' => t('Select action to be scheduled.')
  );
  $form['time_type'] = array(
    '#type' => 'radios',
    '#title' => t("Type of time"),
    '#default_value' => $type,
    '#options' => array(
      SCHEDULED_ACTIONS_ABSOLUTE_TIME => t('Absolute'),
      SCHEDULED_ACTIONS_RELATIVE_TIME => t('Relative'),
    ),
    '#required' => TRUE,
    '#description' => t('Absolute: coose an exact time. Relative: choose a time relative to event time.')
  );
  $form['absolute_time_wrapper'] = array(
    '#type' => 'fieldset',
    '#title' => t("Absolute time"),
    '#collapsed' => FALSE,
    '#collapsible' => FALSE,
    '#states' => array(
      'visible' => array(
       'input[name="time_type"]' => array('value' => '0'),
      ),
    ),
  );
  $form['absolute_time_wrapper']['absolute_time'] = array(
    '#type' => 'date_popup',
    '#default_value' => $absolute,
    '#required' => FALSE,
    '#description' => t('Enter time, when action should be run.'),
  );

  $form['relative_time_wrapper'] = array(
    '#type' => 'fieldset',
    '#title' => t("Relative time"),
    '#collapsed' => FALSE,
    '#collapsible' => FALSE,
    '#states' => array(
      'visible' => array(
       'input[name="time_type"]' => array('value' => '1'),
      ),
    ),
  );
  $form['relative_time_wrapper']['relative_time'] = array(
    '#type' => 'textfield',
    '#default_value' => $relative,
    '#required' => FALSE,
    '#description' => t("Enter time from event, when action should be run (PHP's relative date format - <em>+5 mins</em>)."),
  );

  return $form;
}

/**
 * Submit handler for action configuration form.
 */
function scheduled_actions_schedule_action_submit(&$form, &$form_state) {
  // This action is of type "system" by default. Type should be changed to
  // type of scheduled action. We will save it's type in params array
  // and correct it in scheduled_actions_init().
  $action = actions_load($form_state['values']['aids']);
  variable_set('scheduled_actions_needs_corrections', TRUE);

  return array(
    'aid' => $form_state['values']['aids'],
    'type' => $form_state['values']['time_type'],
    'relative' => $form_state['values']['relative_time'],
    'absolute' => $form_state['values']['absolute_time'],
    'action_type' => $action->type,
  );
}

/**
 * Action configuration form validation callback.
 */
function scheduled_actions_schedule_action_validate(&$form, &$form_state) {
  // If absolute time chosen, check if datetime is entered.
  if ($form_state['values']['time_type'] == 0 && empty($form_state['values']['absolute_time'])) {
    form_set_error('absolute_time', t('Value for chosen time type must be set.'));
  }

  // If relative time chosen, check if relative time is entered.
  if ($form_state['values']['time_type'] == 1 && empty($form_state['values']['relative_time'])) {
    form_set_error('relative_time', t('Value for chosen time type must be set.'));
  }

  // Check relative date format.
  if ($form_state['values']['time_type'] == 1 && !empty($form_state['values']['relative_time']) && !strtotime($form_state['values']['relative_time'])) {
    form_set_error('relative_time', t('Relative time format is not correct.'));
  }
}

/**
 * Corrects types for created
 */
function scheduled_actions_correct_types() {
  // Get all actions.
  $list = actions_get_all_actions();

  // Find actions defined by this module and correct type.
  foreach ($list as $aid => $action) {
    // Find actions by callback.
    if ($action['callback'] == 'scheduled_actions_schedule_action') {
      // Load action and params.
      $action = actions_load($aid);
      $params = unserialize($action->parameters);

      /* If actions needs correction on type, do it:
       * - this must be user defined action
       * - 'action_type' parameter must be set
       * - 'action_type' must be different than actual type of action
       */
      if ($params && !empty($params['action_type']) && $params['action_type'] != $action->type) {
        $action->type = $params['action_type'];
        actions_save($action->callback, $action->type, $params, $action->label, $action->aid);
      }
    }
  }

  // Disable correction process on next request().
  variable_set('scheduled_actions_needs_corrections', FALSE);
}

/**
 * Implements hook_cron().
 */
function scheduled_actions_cron() {
  // Load all actions that need to be run.
  $actions = db_select('scheduled_actions', 'a')
    ->fields('a')
    ->condition('a.time', REQUEST_TIME, '<=')
    ->condition('a.triggered_time', 0)
    ->execute()
    ->fetchAll();

  // Run actions
  foreach ($actions as $action) {
    // Load (unserialize) context.
    $context = unserialize($action->context);

    // Load object
    if ($action->entity_id != 0) {
      switch ($action->type) {
        case 'node':
          $object = node_load($action->entity_id);
          $save_function = 'node_save';
          break;
        case 'comment':
          $object = comment_load($action->entity_id);
          $save_function = 'comment_save';
          break;
        case 'system':
          $object = NULL;
          break;
        case 'user':
          $object = user_load($action->entity_id);
          $save_function = 'user_save';
          break;
      }
    }
    if ($object !== FALSE) {
      // Run action
      $result = actions_do(
        $action->aid,
        $object,
        empty($context['context']) ? NULL : $context['context'],
        empty($context['a1']) ? NULL : $context['a1'],
        empty($context['a2']) ? NULL : $context['a2']
      );
      if (isset($result[$action->aid]) && !$result[$action->aid]) {
        // Report error if actions_do() returned FALSE.
        watchdog('scheduled_actions', 'Error while running scheduled action %action.', array('%action' => $action->aid), WATCHDOG_WARNING);
      }
      else {
        // Check if object needs to be saved.
        if (is_numeric($action->aid)) {
          $actions = actions_get_all_actions();
          $definition_aid = $actions[$action->aid]['callback'];
        }
        else {
          $definition_aid = $action->aid;
        }
        $action_object = actions_list();
        if (isset($action_object[$definition_aid]['behavior']) && in_array('changes_property', $action_object[$definition_aid]['behavior'])) {
          $save_function($object);
        }
      }
    }
    else {
      watchdog('scheduled_actions', 'Error while running scheduled action %action. Could not load object type %type with entity_id = %entity_id',
      array('%action' => $action->aid, '%type' => $action->type, '%entity_id' => $action->entity_id), WATCHDOG_WARNING);
    }

    // Save trigger time
    db_update('scheduled_actions')
      ->fields(array('triggered_time' => REQUEST_TIME))
      ->condition('said', $action->said)
      ->execute();

    // Delete old triggered actions.
    if (variable_get('scheduled_actions_archive_day_limit', 0)) {
      $max = REQUEST_TIME - variable_get('scheduled_actions_archive_day_limit', 0) * 86400; //24*60*60
      db_delete('scheduled_actions')
        ->condition('triggered', 0, '>')
        ->condition('triggered', $max, '<=')
        ->execute();
    }
  }
}

/**
 * Returns list of scheduled actions, optionally filtered by type.
 *
 * @param $filters array of filters to be applied (key == col name, value == value to filter).
 * 				Possible filter keys are 'type', 'time', 'triggered_time', 'aid' and 'entity_id'.
 * @return List of scheduled actions, filtered by $filters.
 */
function scheduled_actions_get_scheduled_actions($filters = NULL) {
  $actions = db_select('scheduled_actions', 'a')
  ->fields('a')
  ->condition('a.triggered_time', 0)
  ->orderBy('a.time');

  if ($filters != NULL) {
    foreach ($filters as $key => $value) {
      $actions->condition($key, $value);
    }
  }

  return $actions->execute()->fetchAll();
}

/**
 * Saves scheduled action to DB. Action can be existing or new. If you want
 * to update existing action, make sure to set 'said'.
 *
 * @param $action Action array with key -> value pairs, with keys:
 * 	- said: scheduled action ID. Use only if you want to update existing entry,
 *  - aid: action ID to be triggered,
 *  - time: time of action trigger (UNIX timestamp),
 *  - triggered_time: time, when action was triggered (UNIX timestamp - optional),
 *  - type: type of action (node, comment, system, ...),
 *  - entity_id: ID of entity to act on,
 *  - context: context array.
 */
function scheduled_actions_save_action($action) {
  // Decide if we insert new or update existing entry.
  if (isset($action['said'])) {
    $query = db_update('scheduled_actions')->condition('said', $action['said']);
  }
  else {
    $query = db_insert('scheduled_actions');
  }

  // Set values.
  $data = array(
    'aid' => $action['aid'],
    'time' => $action['time'],
    'type' => $action['type'],
    'entity_id' => $action['entity_id'],
    'context' => serialize($action['context']),
  );

  if (isset($action['triggered_time'])) {
    $data['triggered_time'] = $action['triggered_time'];
  }

  $query->fields($data);
  $query->execute();
}

/**
 * Deletes scheduled action from DB.
 *
 * @param $said Scheduled action's ID.
 */
function scheduled_actions_delete_action($said) {
  db_delete('scheduled_actions')
    ->condition('said', $said)
    ->execute();
}
/**
 * Implements hook_entity_delete().
 *
 * Delete any schedule actions for this entity
 */
function scheduled_actions_entity_delete($entity, $type) {
  $entity_id = array_shift(entity_extract_ids($type,$entity));
  db_delete('scheduled_actions')
  ->condition('type', $type)
  ->condition('entity_id', $entity_id)
  ->execute();
}

/**
 * Implements hook_menu().
 */
function scheduled_actions_menu() {
  return array(
    'admin/config/system/actions/scheduled_actions' => array(
      'title' => 'Scheduled actions',
      'description' => 'Configure scheduled actions.',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('scheduled_actions_admin_form'),
      'access arguments' => array('administer actions'),
    ),
  );
}

/**
 * Admin form callback.
 */
function scheduled_actions_admin_form($form, &$form_state) {
  $form['scheduled_actions_archive_day_limit'] = array(
    '#type' => 'select',
    '#title' => t('Triggered actions log'),
    '#default_value' => variable_get('scheduled_actions_archive_day_limit', 0),
    '#options' => array(
      0 => t('Do not delete'),
      1 => t('Delete after 1 day'),
      7 => t('Delete after 1 week'),
      30 => t('Delete after 30 days'),
    ),
    '#description' => t('The maximum days to keep triggered actions archived. Requires a <a href="@cron">cron maintenance task</a>.', array('@cron' => url('admin/reports/status')))
  );

  return system_settings_form($form);
}
