<?php

/**
 * @file Implements the Finnish Smartpost system into Drupal Commerce.
 */

/**
 * Implements hook_menu().
 */
function commerce_finnish_smartpost_menu() {
  $items = array();
  $items['admin/commerce/config/advanced-settings/commerce_finnish_smartpost'] = array(
    'title' => 'Commerce Finnish Smartpost settings',
    'description' => 'Settings for the Commerce Finnish Smartpost module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_finnish_smartpost_admin'),
    'access arguments' => array('administer commerce_finnish_smartpost settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Creates the configuration page.
 */
function commerce_finnish_smartpost_admin() {
  $form = array();
  $form['commerce_finnish_smartpost_maxposts'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of Smartposts'),
    '#default_value' => variable_get('commerce_finnish_smartpost_maxposts', 5),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t("Set the maximum number of Smartpost locations to show. Remember to clear caches if changing this option."),
    '#required' => TRUE,
  );

  $form['commerce_finnish_smartpost_shipping_cost'] = array(
    '#type' => 'textfield',
    '#title' => t('Shipping cost to Smartposts'),
    '#default_value' => variable_get('commerce_finnish_smartpost_shipping_cost', 10),
    '#size' => 6,
    '#maxlength' => 6,
    '#description' => t("Set the shipping cost to Smartposts."),
    '#required' => TRUE,
  );

  $form['commerce_finnish_smartpost_shipping_currency'] = array(
    '#type' => 'textfield',
    '#title' => t('Shipping currency to Smartposts'),
    '#default_value' => variable_get('commerce_finnish_smartpost_shipping_currency', "EUR"),
    '#size' => 3,
    '#maxlength' => 3,
    '#description' => t("Set the currency code used while shipping to Smartposts."),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_admin_validate().
 */
function commerce_finnish_smartpost_admin_validate($form, &$form_state) {
  $maxposts = $form_state['values']['commerce_finnish_smartpost_maxposts'];
  $cost = $form_state['values']['commerce_finnish_smartpost_shipping_cost'];
  $cur = $form_state['values']['commerce_finnish_smartpost_shipping_currency'];
  if (!is_numeric($maxposts)) {
    form_set_error('commerce_finnish_smartpost_maxposts', t('You must enter an integer for the maximum number of Smartpost locations.'));
  }
  if (!is_numeric($cost)) {
    form_set_error('commerce_finnish_smartpost_shipping_cost', t('Shipping cost must be numeric.'));
  }
  if (!array_key_exists($cur, commerce_currencies())) {
    $err = $cur . ' is not a valid country code.';
    form_set_error('commerce_finnish_smartpost_shipping_currency', t($err));
  }
}

/**
 * Implements hook_commerce_shipping_method_info().
 */
function commerce_finnish_smartpost_commerce_shipping_method_info() {
  return array(
    'finnish_smartpost' => array(
      'title' => t('Finnish Smartpost'),
      'description' => t('Lets you create Finnish Smartpost services.'),
    ),
  );
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function commerce_finnish_smartpost_commerce_shipping_service_info() {
  $shipping_services = array();
  $number_of_locations = variable_get('commerce_finnish_smartpost_maxposts', 5);
  for ($i = 0; $i < $number_of_locations; $i++) {

    $shipping_services['finnish_smartpost_' . $i] = array(
      'title' => "",
      'description' => "Shipping method for Finnish Smartpost",
      'shipping_method' => 'finnish_smartpost',
      'price_component' => 'shipping',
      'callbacks' => array(
        'rate' => 'commerce_finnish_smartpost_service_rate_order',
        'details_form_submit' => 'commerce_finnish_smartpost_service_submit',
      ),
    );
  }
  return $shipping_services;
}

/**
 * Adds the shipping cost to order.
 */
function commerce_finnish_smartpost_service_rate_order($shipping_service, $order) {
  $amount = variable_get('commerce_finnish_smartpost_shipping_cost', 10);
  $cc = variable_get('commerce_finnish_smartpost_shipping_currency', "EUR");
  return array(
    'amount' => $amount * 100,
    'currency_code' => $cc,
    'data' => array());
}

/**
 * Implements hook_commerce_shipping_service_rate_options_alter().
 */
function commerce_finnish_smartpost_commerce_shipping_service_rate_options_alter(&$options, $order) {
  $order_wrapper = entity_metadata_wrapper("commerce_order", $order);
  $post_code = $order_wrapper->commerce_customer_shipping->commerce_customer_address->value()['postal_code'];
  $data = json_decode(drupal_http_request("https://ohjelmat.posti.fi/pup/v1/pickuppoints?zipcode=$post_code")->data)[0];
  $longitude = $data->MapLongitude;
  $latitude = $data->MapLatitude;

  $number_of_locations = variable_get('commerce_finnish_smartpost_maxposts', 5);
  $data2 = json_decode(drupal_http_request("https://ohjelmat.posti.fi/pup/v1/pickuppoints?type=smartpost&longitude=$longitude&latitude=$latitude&top=$number_of_locations")->data);

  for ($i = 0; $i < $number_of_locations; $i++) {
    $address = $data2[$i]->Address . ", " . $data2[$i]->PostCode . ", " . $data2[$i]->City;
    $text = t("Smartpost at @address", array('@address' => $address)) . $options['finnish_smartpost_' . $i];
    $options['finnish_smartpost_' . $i] = $text;
  }
}

/**
 * Adds the information about Smartpost address to the order on submit.
 */
function commerce_finnish_smartpost_service_submit($details_form, $details_values, $line_item) {
  $s_service = $line_item->data['shipping_service']['name'];
  $id = substr($s_service, -1);

  $order_wrapper = entity_metadata_wrapper("commerce_order", $line_item->order_id);
  $post_code = $order_wrapper->commerce_customer_shipping->commerce_customer_address->value()['postal_code'];
  $data = json_decode(drupal_http_request("https://ohjelmat.posti.fi/pup/v1/pickuppoints?zipcode=$post_code")->data)[0];
  $longitude = $data->MapLongitude;
  $latitude = $data->MapLatitude;
  $number_of_locations = variable_get('commerce_finnish_smartpost_maxposts', 5);
  $data2 = json_decode(drupal_http_request("https://ohjelmat.posti.fi/pup/v1/pickuppoints?type=smartpost&longitude=$longitude&latitude=$latitude&top=$number_of_locations")->data);
  $post_office = $data2[$id];

  $shipping = $order_wrapper->commerce_customer_shipping->commerce_customer_address->value();
  $name = $shipping['name_line'];
  $phone_number = $order_wrapper->commerce_customer_shipping->commerce_smartpost_phonenumber->value();
  $smartpost_address = $name . "\n" . $post_office->LabelName . "\n" . $post_office->Address . "\n" . $phone_number;

  $order_wrapper->commerce_smartpost_address = $smartpost_address;
  $order_wrapper->save();
}
