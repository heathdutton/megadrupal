<?php

/**
 * @file
 * Defines the application logic for the Widget Block module.
 */

/*
 * Constant definitions.
 */

/**
 * Default widget server domain.
 */
define('WIDGET_BLOCK_DEFAULT_DOMAIN', 'widgets.vlaanderen.be');

/**
 * Widget block request tag name.
 */
define('WIDGET_BLOCK_REQUEST_TAG', 'widget_block_request');

/**
 * Widget block which uses embed code.
 */
define('WIDGET_BLOCK_TYPE_EMBED', 1);

/**
 * Widget block which uses server side include.
 */
define('WIDGET_BLOCK_TYPE_SSI', 2);

/**
 * Widget block which uses smart server side include.
 */
define('WIDGET_BLOCK_TYPE_SMART_SSI', 3);

/*
 * Hook implementations.
 */

/**
 * Implements hook_menu().
 */
function widget_block_menu() {
  // Initialize the items variable to an empty array.
  $items = array();
  // Build the add widget block local action.
  $add_widget_block_local_action = array(
    'title' => 'Add Widget block',
    'description' => 'Add a new widget block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('widget_block_add_block_form'),
    'access arguments' => array('administer blocks'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'widget_block.admin.inc',
  );
  // Expose the default add widget block.
  $items['admin/structure/block/add-widget-block'] = $add_widget_block_local_action;
  // Get the default theme.
  $default_theme = variable_get('theme_default', 'bartik');
  // Iterate through the available themes.
  foreach (list_themes() as $delta => $theme) {
    // Check if the current theme is not the default one.
    if ($delta != $default_theme) {
      // Expose the add widget block for the current theme.
      $items["admin/structure/block/list/{$delta}/add-widget-block"] = $add_widget_block_local_action;
    }
  }
  // Expose the widget block removal.
  $items['admin/structure/block/delete-widget-block/%'] = array(
    'title' => 'Delete widget block',
    'description' => 'Delete an existing widget block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('widget_block_delete_block_form', 4),
    'access arguments' => array('administer blocks'),
    'type' => MENU_CALLBACK,
    'file' => 'widget_block.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function widget_block_block_info() {
  // Initialize the blocks variable to an empty array.
  $blocks = array();
  // Iterate through the widget block configurations.
  foreach (widget_block_get_config_multiple(NULL, TRUE) as $delta => $widget_block_config) {
    // Expose the widget as block.
    $blocks[$delta] = array(
      'info' => t('Widget block: @name [!id]', array('@name' => $widget_block_config['name'], '!id' => $delta)),
      // Do not allow Drupal to cache the blocks as their content is hosted
      // on an external server. @fixme: Should we not use DRUPAL_CACHE_CUSTOM?
      'cache' => DRUPAL_NO_CACHE,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function widget_block_block_configure($delta = '') {
  // Try to retrieve the widget block configuration.
  if (!is_string($delta) || !preg_match('/^([0-9a-f]{32}|\d+)$/', $delta) || !($config = widget_block_get_config($delta, TRUE))) {
    // Use default configuration.
    $config = widget_block_default_config();
  }
  // Initialize the widget block configuration form.
  $form = array(
    'widget_block' => array(
      '#tree' => TRUE,
      '#type' => 'fieldset',
      '#title' => t('Widget block configuration'),
      '#description' => t('Configure how a widget should integrate with Drupal.'),
      '#collapsible' => TRUE,
      '#collapsed' => isset($config['id']),
    ),
  );
  // Allow administrators to enter the widget identifier.
  $form['widget_block']['id'] = array(
    '#type' => 'textfield',
    '#title' => t('Identifier'),
    '#description' => t('An identifier of the widget which needs to be integrated.'),
    '#default_value' => $config['id'],
    '#required' => TRUE,
    '#maxlength' => 32, // Maximum length of a widget ID.
    '#element_validate' => array('widget_block_validate_id'),
  );
  // Check if the ID element should be disabled.
  if (isset($config['id'])) {
    // Disable the ID element.
    $form['widget_block']['id']['#disabled'] = TRUE;
  }
  else {
    // Append the unique ID validator.
    $form['widget_block']['id']['#element_validate'][] = 'widget_block_validate_unique_id';
  }
  // Allow administrators to use a human readable name for the widget block.
  $form['widget_block']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Human readable name'),
    '#description' => t('The human readable name of the widget block which will be shown on the admin pages.'),
    '#default_value' => $config['name'],
    '#required' => TRUE,
    '#maxlength' => 128,
  );
  // Allow administrators to change the integration mechanism.
  $form['widget_block']['type'] = array(
    '#type' => 'select',
    '#title' => t('Integration type'),
    '#description' => t('Select the integration mechanism that should be used.'),
    '#default_value' => $config['type'],
    '#options' => array(
      WIDGET_BLOCK_TYPE_EMBED => t('Embed'),
      WIDGET_BLOCK_TYPE_SSI => t('Server side include'),
      WIDGET_BLOCK_TYPE_SMART_SSI => t('Smart server side include'),
    ),
  );
  // Declare per widget configurable settings.
  $form['widget_block']['settings'] = array(
    '#tree' => TRUE,
    '#type' => 'fieldset',
    '#title' => t('Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    'domain' => array(
      '#type' => 'textfield',
      '#title' => t('Widget domain'),
      '#description' => t('The domain name of the Widget server.'),
      '#default_value' => $config['settings']['domain'],
      '#required' => TRUE,
    ),
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function widget_block_block_save($delta = '', $edit = array()) {
  // Apply the widget block configuration.
  widget_block_set_config($edit['widget_block']);
}

/**
 * Implements hook_block_view().
 */
function widget_block_block_view($delta = '') {
  // Initialize the block variable to an empty array.
  $block = array();
  // Try to retrieve the widget block configuration.
  if (($data = widget_block_retrieve($delta))) {
    // Get the Widget Block Javascript path.
    $widget_block_js = drupal_get_path('module', 'widget_block') . '/js/widget_block.js';
    // Add the Widget Block JavaScript file to the assets.
    $data['assets']['js'][$widget_block_js] = array(
      'type' => 'file',
      'group' => JS_DEFAULT,
    );
    // Add the Widget Block JavaScript settings to the assets.
    $data['assets']['js'][] = array(
      'data' => array(
        'WidgetBlock' => array(
          'currentLanguage' => $GLOBALS['language']->language,
        ),
      ),
      'type' => 'setting',
      'group' => JS_DEFAULT,
    );
    // Set the block subject to NULL.
    $block['subject'] = NULL;
    // Build the block content.
    $block['content'] = array(
      '#type' => 'markup',
      '#markup' => $data['content'],
      '#attached' => $data['assets'],
    );
  }
  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function widget_block_form_block_admin_display_form_alter(&$form, $form_state) {
  // Get all existing widget block configurations.
  $widget_block_configs = widget_block_get_config_multiple();
  // Iterate through the widget block configurations.
  foreach ($widget_block_configs as $delta => $widget_block_config) {
    // Build the block delta.
    $block_delta = "widget_block_{$delta}";
    // Check if the block delta is present in the form.
    if (isset($form['blocks'][$block_delta])) {
      // Add a delete link to the operations.
      $form['blocks'][$block_delta]['delete'] = array(
        '#type' => 'link',
        '#title' => t('delete'),
        '#href' => "admin/structure/block/delete-widget-block/{$delta}",
      );
    }
  }
}

/**
 * Implements hook_webclient_proxy_supported_request().
 */
function widget_block_webclient_proxy_supported_request() {
  return array(
    WIDGET_BLOCK_REQUEST_TAG => array(
      'name' => 'Widget block',
      'description' => 'Used for all requests made by the Widget Block module.',
    ),
  );
}

/*
 * Form element validators.
 */

/**
 * Validate whether a widget ID is in a valid format: numeric or UUID.
 */
function widget_block_validate_id($element, &$form_state) {
  // Get the element value.
  $value = $element['#value'];
  // Check whether the value is a non hexadecimal value.
  if ($value !== '' && !preg_match('/^([0-9a-f]{32}|\d+)$/', $value)) {
    // Widget identifier is invalid.
    form_error($element, t('%name contains an invalid value. Only hexadecimal values are allowed.', array('%name' => $element['#title'])));
  }
}

/**
 * Validate whether a widget ID is already in use.
 */
function widget_block_validate_unique_id($element, &$form_state) {
  // Get the element value.
  $value = $element['#value'];
  // Check if the element value is not empty and already exists.
  if ($value !== '' && widget_block_get_config($value, TRUE)) {
    // Widget identifier is already in use.
    form_error($element, t('%name contains an already used widget identifier.', array('%name' => $element['#title'])));
  }
}

/*
 * Module API functions.
 */

/**
 * Refresh the widget block data.
 *
 * @param array $ids
 *   Optional. An array of widget identifier which need to be refreshed.
 *   Defaults to all widget blocks.
 * @param array $languages
 *   Optional. An array of language codes. Defaults to all available languages.
 * @param bool $existing
 *   Optional. Indicates whether only the existing cached data should be
 *   refreshed. Defaults to FALSE which will expand the cached data with the
 *   missing languages.
 *
 * @return array
 *   An associative array of associative arrays with following keys:
 *   <ul>
 *    <li><b>id</b>: The unique identifier of the widget.</li>
 *    <li><b>name</b>: The human readable name of the widget block.</li>
 *    <li><b>success</b>: A list of languages were refreshed successfully.</li>
 *    <li><b>failed</b>: A list of languages that failed refresh.</li>
 *   </ul>
 *   Every entry is keyed by the widget identifier.
 */
function widget_block_refresh(array $ids = NULL, array $languages = NULL, $existing = TRUE) {
  // Initialize the results variable to an empty array.
  $results = array();
  // Get a list of available languages.
  $available_languages = array_keys(language_list());
  // Get a list of supported languages.
  $languages = ($languages === NULL ? $available_languages : array_intersect($available_languages, $languages));
  // Get a list of widget block configurations.
  $configs = widget_block_get_config_multiple($ids);
  // Iterate through the widget block configurations.
  foreach ($configs as $config) {
    // Initialize the update languages with the languages.
    $update_languages = $languages;
    // Check if only the existing language should be updated.
    if ($existing) {
      // Try to retrieve the cache widget block data.
      if (($cache = cache_get("widget_block_{$config['id']}", 'cache_widget_block')) && !empty($cache->data['content'])) {
        // Only allow existing languages to the updated if they are present the
        // available languages.
        $update_languages = array_intersect($languages, array_keys($cache->data['content']));
      }
      else {
        // Set the update languages to an empty array as there is no cached
        // widget block data.
        $update_languages = array();
      }
    }
    // Build the default result data structure.
    $result = array(
      'id' => $config['id'],
      'name' => $config['name'],
      'success' => array(),
      'failed' => array(),
    );
    // Iterate through the available languages.
    foreach ($update_languages as $language) {
      // Refresh the widget block data and determine the result key.
      $key = (widget_block_retrieve($config['id'], $language, TRUE) ? 'success' : 'failed');
      // Add the language to the corresponding list.
      $result[$key][] = $language;
    }
    // Add the result to the list.
    $results[$config['id']] = $result;
  }
  return $results;
}

/**
 * Invoke the widget block purge hook.
 *
 * @param array $ids
 *   An array of widget identifiers.
 * @param array $languages
 *   An array of language codes.
 */
function widget_block_invoke_purge(array $ids, array $languages) {
  // Check if the ids and languages list is not empty.
  if ($ids && $languages) {
    // Invoke the hook_widget_block_purge().
    module_invoke_all('widget_block_purge', $ids, $languages);
  }
}

/**
 * Purge cached widget block data.
 *
 * @param array $ids
 *   Optional. An array of widget identifiers. Defaults to NULL which will
 *   purge all widget blocks.
 */
function widget_block_purge(array $ids = NULL) {
  // Get a list of all available widget blocks.
  if (($configs = widget_block_get_config_multiple($ids))) {
    // Initialize the cid mapping variable to an empty array.
    $cid_mapping = array();
    // Iterate through the available widget block configurations.
    foreach ($configs as $config) {
      // Add the cid to id mapping.
      $cid_mapping["widget_block_{$config['id']}"] = $config['id'];
    }
    // Initialize the ids variable to an empty array.
    $ids = array();
    // Initialize the languages variable to an empty array.
    $languages = array();
    // Get a list of cached widget block data.
    $cache_objects = cache_get_multiple(array_keys($cid_mapping), 'cache_widget_block');
    // Iterate through the loaded cache objects.
    foreach ($cache_objects as $cid => $cache) {
      // Get the cached data content.
      $cache_data_content = $cache->data['content'];
      // Check if the cached object contains content.
      if ($cache_data_content) {
        // Append the mapped id to the list.
        $ids[] = $cid_mapping[$cid];
        // Iterate through the cache data content.
        foreach ($cache_data_content as $language => $data) {
          // Add the language to the list. Note language is used as key to
          // ensure each language appears only once in the list.
          $languages[$language] = NULL;
        }
      }
      // Clear the cached widget block data.
      cache_clear_all($cid, 'cache_widget_block');
    }
    // Purge the resources related to the given ids and languages.
    widget_block_invoke_purge($ids, array_keys($languages));
  }
}

/**
 * Retrieve the widget from the Widget server.
 *
 * @param int $id
 *   A widget identifier.
 * @param string|NULL $langcode
 *   Optional. The language code of the widget block data. Defaults to the
 *   current language.
 * @param bool $fresh
 *   Optional. Indicates whether the local cache should be ignored. Defaults to
 *   FALSE.
 *
 * @return array|NULL
 *   An associative array containing the following keys if present, otheriwe
 *   NULL:
 *   <ul>
 *     <li><b>assets</b>: An associative array containing the required
 *     assets.</li>
 *     <li><b>content</b>: The content of the widget.</li>
 *   </ul>
 */
function widget_block_retrieve($id, $langcode = NULL, $fresh = FALSE) {
  // Check if the langcode argument is missing.
  if ($langcode === NULL) {
    // Use the current language.
    $langcode = $GLOBALS['language']->language;
  }
  // Initialize the data variable to NULL.
  $data = NULL;
  // Try loading the widget block configuration.
  if (($config = widget_block_get_config($id, $fresh))) {
    // Build the cache ID.
    $cache_id = "widget_block_{$config['id']}";
    // Try to use the cached data if allowed and available. Note isset must be
    // used because uncacheable data will be assign NULL as data.
    if (!$fresh && ($cache = cache_get($cache_id, 'cache_widget_block')) && isset($cache->data['content'][$langcode])) {
      // Use the cached data.
      $data = $cache->data['content'][$langcode];
    }
    else {
      // Retrieve the data from the remote server.
      $remote_data = widget_block_get_data($config, $langcode);
      // Check if the remote data contains info.
      if (isset($remote_data['data'])) {
        // Use the newly retrieved data.
        $data = $remote_data['data'];
      }
      // Process the remote data.
      _widget_block_process_remote_data($config, $remote_data, $langcode);
    }
  }
  return $data;
}

/**
 * Create a widget block request.
 *
 * @param array $config
 *   An associative array containing the following keys:
 *   <ul>
 *     <li><b>id</b>: The unique identifier of a widget.</li>
 *     <li><b>type</b>: The integration type.</li>
 *     <li><b>settings</b>: The integration settings.</li>
 *   </ul>
 * @param string|NULL $langcode
 *   Optional. The language of the widget block data. Defaults to the current
 *   language.
 *
 * @return WebRequest
 *   An instance of WebRequest.
 */
function widget_block_create_request(array $config, $langcode = NULL) {
  // Check if the langcode argument is missing.
  if ($langcode === NULL) {
    // Use the current language.
    $langcode = $GLOBALS['language']->language;
  }
  // Evaluate the integration type.
  switch ($config['type']) {
    case WIDGET_BLOCK_TYPE_SMART_SSI:
      $type = 'smart-ssi';
      break;

    case WIDGET_BLOCK_TYPE_SSI:
      $type = 'ssi';
      break;

    default:
      $type = 'embed';
      break;
  }
  // Build the webclient request options.
  $options = array('tags' => array(WIDGET_BLOCK_REQUEST_TAG));
  // Create the webclient request.
  return webclient_request("http://{$config['settings']['domain']}/widget/{$type}/{$config['id']}?language={$langcode}", $options);
}

/**
 * Get the widget block data.
 *
 * @param array $config
 *   An associative array containing the widget block configuration. The
 *   following keys are mandatory:
 *   <ul>
 *     <li><b>id</b>: The unique identifier of a widget.</li>
 *     <li><b>type</b>: The integration type which will be used.</li>
 *     <li><b>settings</b>: An associative array containing the settings.</li>
 *   </ul>
 * @param string|NULL $langcode
 *   Optional. The language which should be used when retrieving the widget
 *   block data. Defaults to the current language.
 *
 * @return array
 *   An associative array containing the following keys:
 *   <ul>
 *     <li><b>modified</b>: Unix timestamp of the last modification.</li>
 *     <li><b>data</b>: An associative array if successful, otherwise NULL</li>
 *   </ul>
 */
function widget_block_get_data(array $config, $langcode = NULL) {
  // Build the defautl data structure for remote data.
  $remote_data = array(
    'cacheable' => FALSE,
    'modified' => NULL,
    'data' => NULL,
  );
  // Create the widget block request.
  $request = widget_block_create_request($config, $langcode);
  // Get the response object.
  $response = $request->getResponse();

  // Check if the response was successful and contains widget related header.
  if ($response->getStatusCode() === 200 && $response->getHeaders()->has('X-Widget-Modified')) {
    // Determine whether the remote data is cacheable.
    $remote_data['cacheable'] = ($response->getHeaders()->get('X-Widget-Cacheable') == 1);
    // Build the default data structure for remote data.
    $remote_data['modified'] = (int) $response->getHeaders()->get('X-Widget-Modified');
    // Process the response for the given integration type.
    $remote_data['data'] = _widget_block_process_response($response, $config['type']);
  }
  elseif ($response->hasError()) {
    // Log failure to retrieve widget block data.
    watchdog('Widget Block', 'Failed to retrieve remote widget data for "!id": @message', array('!id' => $config['id'], '@message' => $response->getErrorMessage()), WATCHDOG_ERROR);
  }
  else {
    // Log failure to process widget block data.
    watchdog('Widget Block', 'Failed to process remote widget data for "!id".', array('!id' => $config['id']), WATCHDOG_ERROR);
  }
  return $remote_data;
}

/**
 * Get the default widget block configuration.
 *
 * @return array
 *   An associative array containing the following keys:
 *   <ul>
 *     <li><b>id</b>: The unique identifier of a widget.</li>
 *     <li><b>name</b>: The human readable name of the block.</li>
 *     <li><b>type</b>: The type of widget integration that should be used.</li>
 *     <li><b>settings</b>: An associative array containing the settings.</li>
 *   </ul>
 */
function widget_block_default_config() {
  return array(
    'id' => NULL,
    'name' => '',
    'type' => WIDGET_BLOCK_TYPE_EMBED,
    'settings' => array(
      'domain' => WIDGET_BLOCK_DEFAULT_DOMAIN,
    ),
  );
}

/**
 * Get multiple widget block configurations.
 *
 * @param array $ids
 *   Optional. An array of widget identifiers. Defaults to NULL which retrieves
 *   all available widget block configurations.
 * @param bool $fresh
 *   Optional. Indicates whether the static cache should not be used. Defaults
 *   to FALSE.
 *
 * @return array
 *   An associative array of widget block configurations, keyed by the
 *   widget ID.
 */
function widget_block_get_config_multiple(array $ids = NULL, $fresh = FALSE) {
  // Static cache retrieved configurations.
  $configs = &drupal_static(__FUNCTION__);
  // Check if the static cache needs to be initialized or cannot be used.
  if (!$configs || $fresh) {
    // Retrieve all the saved widget block configuration.
    $configs = db_select('widget_block', 'wb')
        ->fields('wb', array('id', 'name', 'type', 'settings'))
        ->execute()
        ->fetchAllAssoc('id', PDO::FETCH_ASSOC);
    // Iterate through the loaded configurations.
    foreach ($configs as &$config) {
      // Unserialize the settings.
      $config['settings'] = unserialize($config['settings']);
    }
  }
  // Check if the ids arguments was passed.
  if ($ids !== NULL) {
    // Get the matching widget block configurations.
    return array_intersect_key($configs, array_flip($ids));
  }
  return $configs;
}

/**
 * Get a widget block configuration.
 *
 * @param int $id
 *   A widget identifier.
 * @param bool $fresh
 *   Optional. Indicates whether the static cache should not be used. Defaults
 *   to FALSE.
 *
 * @return array|NULL
 *   An array containing the widget block configuration if present, otherwise
 *   NULL.
 */
function widget_block_get_config($id, $fresh = FALSE) {
  // Get the widget block configuration for given ID.
  $configs = widget_block_get_config_multiple(array($id), $fresh);
  // Get the first element from the loaded configurations.
  return ($configs ? reset($configs) : NULL);
}

/**
 * Set the configuration for a widget block.
 *
 * @param array $config
 *   An associative array containing the widget block configuration.
 */
function widget_block_set_config(array $config) {
  // Determine the primary keys.
  $primary_keys = (widget_block_get_config($config['id'], TRUE) ? array('id') : array());
  // Save the widget block settings.
  drupal_write_record('widget_block', $config, $primary_keys);
  // Build the cache ID.
  $cache_id = "widget_block_{$config['id']}";
  // Initialize the purge languages to an empty array.
  $purge_languages = array();
  // Try to retrieve the cached language.
  if (($cache = cache_get($cache_id, 'cache_widget_block')) && !empty($cache->data['content'])) {
    // Use the cache languages.
    $purge_languages = array_keys($cache->data['content']);
  }
  // Clear the page and block cache.
  cache_clear_all();
  // Clear the cached data for the given widget block.
  cache_clear_all($cache_id, 'cache_widget_block');
  // Reset the static cached configuration.
  drupal_static_reset('widget_block_get_config_multiple');
  // Purge the resources related to the given ID and languages.
  widget_block_invoke_purge(array($config['id']), $purge_languages);
}

/**
 * Delete a widget block configuration.
 *
 * @param int $id
 *   A widget identifier.
 */
function widget_block_del_config($id) {
  // Remove the configuration from the database.
  db_delete('widget_block')
      ->condition('id', $id)
      ->execute();
  // Build the cache ID.
  $cache_id = "widget_block_{$id}";
  // Initialize the purge languages to an empty array.
  $purge_languages = array();
  // Try to retrieve the cached language.
  if (($cache = cache_get($cache_id, 'cache_widget_block')) && !empty($cache->data['content'])) {
    // Use the cache languages.
    $purge_languages = array_keys($cache->data['content']);
  }
  // Clear the page and block cache.
  cache_clear_all();
  // Clear the cached data for the given widget block.
  cache_clear_all($cache_id, 'cache_widget_block');
  // Reset the static cached configuration.
  drupal_static_reset('widget_block_get_config_multiple');
  // Purge the resources related to the given ID and languages.
  widget_block_invoke_purge(array($id), $purge_languages);
}

/*
 * Private helper functions.
 */

/**
 * Process a widget block response.
 *
 * @param WebResponse $response
 *   An instance of WebResponse.
 * @param string $type
 *   The integration type that was requested. The following values are valid:
 *   <ul>
 *     <li>WIDGET_BLOCK_TYPE_EMBED</li>
 *     <li>WIDGET_BLOCK_TYPE_SSI</li>
 *     <li>WIDGET_BLOCK_TYPE_SMART_SSI</li>
 *   </ul>
 */
function _widget_block_process_response(WebResponse $response, $type) {
  // Initialize the widget block data.
  $data = array(
    'assets' => array('css' => array(), 'js' => array()),
    'content' => '',
  );
  // Evaluate the widget block integration type.
  switch ($type) {
    case WIDGET_BLOCK_TYPE_EMBED:
    case WIDGET_BLOCK_TYPE_SSI:
      // Set the cached data content.
      $data['content'] = $response->getRawData();
      break;

    case WIDGET_BLOCK_TYPE_SMART_SSI:
      // Get the formatted JSON data from the response.
      $formatted_data = $response->getFormattedData();
      // Iterate through the CSS and JavaScript assets.
      foreach (array('css', 'js') as $delta) {
        // Check if the current type of assets is available.
        if (isset($formatted_data['assets'][$delta])) {
          // Iterate through the assets.
          foreach ($formatted_data['assets'][$delta] as $asset) {
            // Attach the CSS URL to the cached data.
            $data['assets'][$delta][$asset['data']] = array(
              'type' => $asset['type'],
              'group' => JS_LIBRARY,
              'weight' => $asset['weight'],
              'scope' => ($asset['defer'] ? 'footer' : 'header'),
            );
          }
        }
      }
      // Set the cached data content.
      $data['content'] = $formatted_data['content'];
      break;
  }
  return $data;
}

/**
 * Process the remote widget block data.
 *
 * @param array $config
 *   An associative array containing the widget block configuration.
 * @param array $remote_data
 *   An associative array containing the remote data.
 * @param string $langcode
 *   The language of the remote data.
 */
function _widget_block_process_remote_data(array $config, array $remote_data, $langcode) {
  // Initialize the cached data with the default data structure.
  $cached_data = array(
    // Contains the unix timestamp of the last modification. See
    // X-Widget-Modified response header.
    'modified' => 0,
    // Contains an associative array keyed by the language. Each entry contains
    // an associative array containing the widget block data.
    'content' => array(),
  );
  // Build the cache ID.
  $cache_id = "widget_block_{$config['id']}";
  // Try to use the cached data if available.
  if (($cache = cache_get($cache_id, 'cache_widget_block')) && !empty($cache->data)) {
    // Overwrite the default cached data structure with the cached data.
    $cached_data = $cache->data;
  }
  // Check if the remote data contains a successful response.
  if (isset($remote_data['modified'])) {
    // Get the current modification timestamp.
    $modified = $cached_data['modified'];
    // Overwrite the modified timestamp.
    $cached_data['modified'] = $remote_data['modified'];
    // Check if the remote data contains a newer version. When modified is set
    // to NULL this means not previous cached data is present. Therefor the
    // following logic should not be executed.
    if ($modified !== NULL && $modified < $remote_data['modified']) {
      // Determine the purge languages.
      $purge_languages = array_keys($cached_data['content']);
      // Clear all cached data.
      $cached_data['content'] = array();
      // Save changes to the cache. This needs to be done to ensure no cache
      // will be retrieved during purge.
      cache_set($cache_id, $cached_data, 'cache_widget_block', CACHE_PERMANENT);
      // Purge the resources related to the given ID and languages.
      widget_block_invoke_purge(array($config['id']), $purge_languages);
    }
    // Add the remote data is cacheable. NULL is in order to register the
    // language but indicate uncacheable data.
    $cached_data['content'][$langcode] = ($remote_data['cacheable'] ? $remote_data['data'] : NULL);
    // Save changes to the cache layer.
    cache_set($cache_id, $cached_data, 'cache_widget_block', CACHE_PERMANENT);
  }
  // Missing modified from the remote data. This indicates that the widget
  // is not longer available or invalid request/response.
  else {
    // Determine the purge languages.
    $purge_languages = array_keys($cached_data['content']);
    // Clear the cached data. This needs to be done to ensure no cache will be
    // retrieved during purge.
    cache_clear_all($cache_id, 'cache_widget_block');
    // Purge the resources related to the given ID and languages.
    widget_block_invoke_purge(array($config['id']), $purge_languages);
  }
}
