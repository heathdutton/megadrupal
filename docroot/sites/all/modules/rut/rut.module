<?php

/**
 * @file
 * This module define a new element for RUT.
 */


/**
 * Implements hook_element_info().
 */
function rut_element_info() {
  $types = array();
  $types['rut_field'] = array(
    '#input' => TRUE,
    '#process' => array('rut_element_process', 'ajax_process_form'),
    '#theme' => 'rut_field',
    '#theme_wrappers' => array('form_element'),
    // Set if load the javascript validator.
    '#validate_js' => FALSE,
    '#message_js' => t('Invalid Rut'),
  );

  return $types;
}


/**
 * Element Process callback.
 */
function rut_element_process($element, &$form_state, $form) {
  if ($element['#validate_js']) {
    rut_add_js_form_element();
  }

  if (isset($element['#element_validate'])) {
    array_push($element['#element_validate'], 'rut_element_validate');
  }
  else {
    $element['#element_validate'] = array('rut_element_validate');
  }

  return $element;
}


/**
 * Implements hook_theme().
 */
function rut_theme() {
  return array(
    'rut_field' => array(
      'render element' => 'element',
    ),
  );
}


/**
 * Returns HTML for a rut_field form element.
 */
function theme_rut_field(&$variables) {
  $element = $variables['element'];
  $element['#attributes']['type'] = 'text';
  $element['#size'] = $element['#maxlength'] = 13;
  element_set_attributes($element, array('id', 'name', 'value', 'size', 'maxlength'));
  $class = array('form-text', 'rut-field-input');
  $extra = '';
  if ($element['#validate_js']) {
    $class[] = 'rut-validate-js';
    $message = trim($element['#message_js']) != '' ? $element['#message_js'] : t('Invalid Rut');
    $extra .= '<div class="error-message-js element-invisible">' . $message . '</div>';
  }
  _form_set_class($element, $class);
  $output = '<input' . drupal_attributes($element['#attributes']) . ' />';


  return $output . $extra;
}


/**
 * Form element validation handler for rut elements.
 */
function rut_element_validate($element, &$form_state) {
  $value = $element['#value'];
  $label = isset($element['#title']) ? $element['#title'] : '';
  // Support for Rut Field
  if (isset($element['#field_name'])) {
    $instance = field_widget_instance($element, $form_state);
    $label = $instance['label'];
  }
  
  list($rut, $dv) = rut_separate_rut($value);
  // Validate the rut.
  if ($value && (!is_numeric($rut) || !rut_validate_rut($rut, $dv))) {
    form_error($element, t('The Rut/Run is invalid in %label', array('%label' => $label)));
  }
}


/**
 * Function helps separate the RUT.
 *
 * @param string $value
 *   It is the RUT.
 *
 * @return array
 *   Returns the RUT without dots or dash and the DV separately.
 */
function rut_separate_rut($value) {
  $rut_text = str_replace(array('.', '-'), array('', ''), $value);

  return array(
    substr($rut_text, 0, -1),
    substr($rut_text, -1),
  );
}


/**
 * This validate the RUT.
 *
 * @param int $rut
 *   Corresponds to the rut. Not contain points or script.
 * @param string $dv
 *   Corresponds to a character, it can be a number from 0-9 or "k"
 *
 * @return bool
 *   If the RUT is valid.
 */
function rut_validate_rut($rut, $dv){
  if (!is_numeric($rut)) {
    return FALSE;
  }

  $_dv = rut_calculate_dv($rut);
  if ($_dv == trim(strtolower($dv))) {
    return TRUE;
  }

  return FALSE;
}


/**
 * Calculate de DV from the RUT.
 *
 * @param int $rut
 *   Corresponds the RUT.
 *
 * @return string
 *   The verifying digit.
 */
function rut_calculate_dv($rut) {
  $rut = (string) $rut;
  $sum = 0;
  $factor = 2;
  for ($i = strlen($rut) - 1; $i >= 0; $i--) {
    $factor = $factor > 7 ? 2 : $factor;
    $sum += $rut{$i} * $factor++;
  }
  $rest = $sum % 11;
  $_dv = 11 - $rest;
  if ($_dv == 11) {
    $_dv = 0;
  }
  elseif ($_dv == 10) {
    $_dv = "k";
  }

  return $_dv;
}


/**
 * Adds the javascript files.
 */
function rut_add_js_form_element() {
  static $loaded = FALSE;
  if ($loaded) {
    return;
  }
  drupal_add_library('rut', 'jquery-rut') ;
  drupal_add_js(drupal_get_path('module', 'rut') . '/js/rut.js');

  $loaded = TRUE;
}


/**
 * Implements hook_library().
 */
function rut_library() {
  $libraries['jquery-rut'] = array(
    'title' => "Rut jQuery",
    'website' => 'http://joaquinnunez.cl/jQueryRutPlugin/',
    'version' => '0.5',
    'js' => array(
      drupal_get_path('module', 'rut') . '/includes/jquery.Rut.min.js' => array(),
    ),
  );
  return $libraries;
}


/**
 * Function for formatting RUT.
 *
 * @param string $value
 *   Corresponds the RUT without format.
 *
 * @return string
 *   Corresponds the RUT with format.
 */
function rut_formatter_rut($rut, $dv) {
  $rut = (string) $rut;
  $dv = (string) $dv;
  if ($rut != '' && $dv != '') {
    return number_format($rut, 0, '', '.') . '-' . $dv;
  }

  return '';
}


/**
 * Function to randomly generate a valid RUT.
 *
 * @return string
 *   The new RUT with format.
 */
function rut_generate_rut($min = 1, $max = 20000000) {
  $rut = rand($min, $max);
  $dv = rut_calculate_dv($rut);

  return rut_formatter_rut($rut, $dv);
}
