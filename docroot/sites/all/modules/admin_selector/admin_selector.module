<?php

/**
 * @file
 * Allows an admin user to select which admin toolbar module to use: Admin or
 * Admin Menu.
 */

/**
 * Implements hook_custom_theme()
 */
function admin_selector_custom_theme() {
  // Double-check that the user can view the admin theme and that we're on an admin page.
  if (user_access('view the administration theme') && path_is_admin(current_path())) {
    global $conf, $user;
    $custom_theme = NULL;
    // Fetch the admin_theme name for the user.
    $admin_theme = db_query("SELECT admin_theme FROM {admin_selector} WHERE uid = :uid", array(':uid' => $user->uid))->fetchField();
    if ($admin_theme != 'Default') {
      // Returning $custom_theme should switch the theme, but it seems to not work
      // unless the theme is enabled - consistent with API documentation.
      // Setting $conf['admin_theme'] does the trick, though.
      $custom_theme = $conf['admin_theme'] = $admin_theme;
    }

    return $custom_theme;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function admin_selector_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  // Load the user from the form_state and not global user: another admin user
  // could be editing the user to change their preference for them, so we need
  // the right user information loaded.
  $account = $form_state['user'];

  // Don't do anything unless the user has all the right permissions.
  if ((user_access('view the administration theme', $account)) || (user_access('access administration menu', $account) && user_access('use admin toolbar', $account))) {
    // Load up the existing data if available.
    $edit = db_query("
      SELECT uid, menu, admin_theme
      FROM {admin_selector}
      WHERE uid = :uid",
        array(':uid' => $account->uid)
    )->fetchAssoc();

    // Use this to determine whether its an update or insert in the submit handler.
    $form['admin_selector_uid'] = array(
      '#type' => 'hidden',
      '#value' => $edit['uid'],
    );

    // The user must have both permissions to be able to choose. If not, do nothing.
    if (user_access('access administration menu', $account) && user_access('use admin toolbar', $account)) {

      $form['admin'] = array(
        '#type' => 'fieldset',
        '#title' => t('Admin toolbar & theme'),
        '#collapsible' => TRUE,
      );
      $form['admin']['admin_selector'] = array(
        '#type' => 'radios',
        '#title' => t('Choose admin toolbar to use'),
        '#default_value' => $edit['menu'],
        '#options' => array(
          'admin' => 'Admin (left sidebar) [<a href="http://drupal.org/project/admin">project page</a>]',
          'admin_menu' => 'Admin_menu (top of page) [<a href="http://drupal.org/project/admin_menu">project page</a>]',
        ),
      );
    }

    if (user_access('view the administration theme', $account)) {
      // Get current list of themes.
      $themes = system_rebuild_theme_data();
      foreach ($themes as &$theme) {
        if (!empty($theme->info['hidden'])) {
          continue;
        }
        $admin_theme_options[$theme->name] = $theme->info['name'];
      }

      $form['admin']['admin_selector_theme'] = array(
        '#type' => 'select',
        '#options' => array('Default' => t('Default theme')) + $admin_theme_options,
        '#title' => t('Administration theme'),
        '#description' => t('Choose "Default theme" to always use the same theme as the rest of the site.'),
        '#default_value' => $edit['admin_theme'],
      );
    }

    // Add our own submit handler.
    $form['#submit'][] = 'admin_selector_user_submit';
  }
}

/**
 * Implements hook_init().
 */
function admin_selector_init() {
  // If the user can see both toolbars, we check their preferences and hide the
  // appropriate toolbar.
  if (user_access('access administration menu') && user_access('use admin toolbar')) {
    global $user;
    $result = db_query("SELECT menu, admin_theme FROM {admin_selector} WHERE uid = :uid", array(':uid' => $user->uid))->fetchAssoc();
    if ($result['menu'] == 'admin') {
      // User wants Admin toolbar, so suppress the Admin Menu toolbar.
      admin_menu_suppress();
    }
    if ($result['menu'] == 'admin_menu') {
      // Suppress the Admin toolbar.
      admin_suppress();
    }
  }
}

/**
 * Submit function for the user account admin selections.
 */
function admin_selector_user_submit($form, &$form_state) {
  // Check that we have values selected in our form. Depending on permissions,
  // one or the other may not be present.
  $toolbar_menu = isset($form_state['values']['admin_selector']) ? $form_state['values']['admin_selector'] : '';
  $admin_theme = isset($form_state['values']['admin_selector_theme']) ? $form_state['values']['admin_selector_theme'] : 'Default';

  // If we DON'T have a uid in our hidden field, we need to do an insert.
  if (!$form_state['values']['admin_selector_uid']) {
    $insert = db_insert('admin_selector')
      ->fields(array(
        'uid' => $form_state['values']['uid'],
        'menu' => $toolbar_menu,
        'admin_theme' => $admin_theme,
      ))
      ->execute();
  }
  // Otherwise we update the existing values.
  else {
    $update = db_update('admin_selector')
      ->fields(array(
        'menu' => $toolbar_menu,
        'admin_theme' => $admin_theme,
      ))
      ->condition('uid', $form_state['values']['uid'], '=')
      ->execute();
  }
}
