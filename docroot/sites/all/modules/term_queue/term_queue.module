<?php
/**
 * Implements hook_permission() to define user permissions.
 * 
 */
function term_queue_permission() {
  return array(
    'administer term queue' => array(
      'title' => t('Administer Term Queue'), 
      'description' => t('Perform administration tasks for Term Queue.'),
    ),
  );
}

/**
 * Implements hook_theme() to register theme implementations.
 * 
 */
function term_queue_theme() {
  $themes = array(
    'term_queue' => array(
      'variables' => array(
        'terms' => array(),
      ),
      'pattern' => 'term_queue__',
    ),

    'term_queue_terms_form' => array(
      'render element' => 'form'
    ),    
  );

  return $themes;
}

/**
 * Implements hook_menu() to define menu items and page callbacks.
 * 
 **/
function term_queue_menu() {

  $items['admin/structure/term_queue/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('term_queue_settings_form'),
    'access arguments' => array('administer term queue'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'term_queue.admin.inc',
  );

  $items['admin/structure/term_queue/%term_queue/edit'] = array(
    'title' => 'Edit Term Queue',
    'page callback' => 'term_queue_edit_form',
    'page arguments' => array(3),
    'access arguments' => array('administer term queue'),
    'type' => MENU_CALLBACK,
    'file' => 'term_queue.admin.inc',
  );
  $items['admin/structure/term_queue/%term_queue/delete'] = array(
    'title' => 'Delete Term Queue',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('term_queue_delete_form', 3),
    'access arguments' => array('administer term queue'),
    'type' => MENU_CALLBACK,
    'file' => 'term_queue.admin.inc',
  );
  $items['admin/structure/term_queue/%term_queue'] = array(
    'title' => 'Queue Terms',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('term_queue_terms_form', 3),
    'access arguments' => array('administer term queue'),
    'type' => MENU_CALLBACK,
    'file' => 'term_queue.admin.inc',
  );
  $items['admin/structure/term_queue/%term_queue/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/term_queue/%term_queue/add'] = array(
    'title' => 'Add Term to Queue',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('term_queue_add_term_form', 3),
    'access arguments' => array('administer term queue'),
    'parent' => 'admin/structure/term_queue/%term_queue',
    'type' => MENU_LOCAL_ACTION,
    'file' => 'term_queue.admin.inc',
  );
  $items['admin/structure/term_queue/%term_queue/%/delete'] = array(
    'title' => 'Delete Term Queue',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('term_queue_delete_term_form', 3, 4),
    'access arguments' => array('administer term queue'),
    'type' => MENU_CALLBACK,
    'file' => 'term_queue.admin.inc',
  );
  $items['term_queue/autocomplete'] = array(
    'title' => t('term auto complete'),
    'page callback' => 'term_queue_autocomplete_term',
    'access arguments' => array('administer term queue'),
    'file' => 'term_queue.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;  
}

/**
 * Implements hook_block_info() to define all blocks provided by the module.
 */
function term_queue_block_info() {
  $all_queues = term_queue_list();
  
  $blocks = array();
  foreach($all_queues as $i=>$queue) {
    $name = $i;
    $blocks[$name]['info'] = $queue->title;
  }
  
  return $blocks;
}

/**
 * Implements hook_block_view() to return a themed block.
 *
 * @param $delta
 *  Which block to render. This is a unique identifier for the block
 *  within the module, defined in hook_block_info().
 *
 * @return
 *  An array containing the following elements:
 *  - subject: The default localized title of the block. If the block does not
 *    have a default title, this should be set to NULL.
 *  - content: The content of the block's body. This may be a renderable array
 *    (preferable) or a string containing rendered HTML content.
 */
function term_queue_block_view($delta = '') {
  $all_queues = term_queue_list();
  
  if (empty($all_queues)) {
    return; //There are no term queues
  }
  
  try {
    $qid = $all_queues[$delta]->qid;  
  }
  catch (Exception $e) {
    return; //The queue for this block has been removed.
  }
  
  $terms = term_queue_get_terms($qid);
  
  $qid_text = 'term_queue__' . $qid;
  $data['subject'] = check_plain($all_queues[$delta]->title);
  $data['content'] = theme($qid_text, array('terms' => $terms));

  return $data;
}


/**
 * Gets all queues.
 *
 * @return array
 *  A list of term queue objects.
 */
function term_queue_list() {
  $queues = array();
  $result = db_query('SELECT * FROM {term_queue}');
  
  foreach($result as $q) {
    $queues[] = $q;
  }
  return $queues;
}

/**
 * Gets a queue.
 *
 * @param $machine_name 
 *  The machine name of the term queue we want to load.
 * @return 
 *  The term queue object with that machine name if found.
 */
function term_queue_load($machine_name) {
  static $queues = array();
  if (module_exists('ctools')) {
    module_load_include('inc', 'ctools', 'includes/export');
    $queues = ctools_export_load_object('term_queue');
  }
  return $queues[$machine_name];
}

/**
 * Saves a queue.
 * 
 * @param $queue
 *  A queue as an array with values
 */
function term_queue_save($queue) {
  if (!empty($queue['qid'])) {
    drupal_write_record('term_queue', $queue, 'qid');
  }
  else {
    drupal_write_record('term_queue', $queue);
  }  
}

/**
 * Delete a queue.
 * 
 * @param $queue
 *    A queue with at least the qid set.
 */
function term_queue_delete($queue) {
  $queue = (array)$queue;
  
  db_delete('term_queue')
  ->condition('qid',$queue['qid'])
  ->execute();
  
   db_delete('term_queue_term')
  ->condition('qid',$queue['qid'])
  ->execute();
}

/**
 * Returns the terms for all the queues.
 *
 * @return array
 *  A two-dimensional array of queue terms as objects.
 */
function term_queue_get_all_terms()
{
  $queue_list = array();
  
  $queues = term_queue_list();
  
  foreach($queues as $queue){
    $queue_list[$queue->qid] = term_queue_get_terms($queue->qid);
  }
  
  return $queue_list;
}

/**
 * Returns the terms for the given queue id.
 *
 * @param $qid
 *  The id of the queue to fetch terms from.
 * @return
 *  An array of queue terms as objects.
 */
function term_queue_get_terms($qid) {
  static $queue_terms = array();

  if (!isset($queue_terms[$qid])) {
    $terms = array();
    
    $query = db_select('term_queue_term', 'qt');
    $query->innerjoin('taxonomy_term_data', 'td', 'qt.tid = td.tid');
    $query->fields('qt');
    $query->addField('td', 'name');
      //->fields('td', array('name'))
    $query->condition('qt.qid', $qid)
      ->orderby('qt.weight', 'ASC')
      ->orderby('name', 'ASC');
    $result = $query->execute();
    
    foreach ($result as $term) {
      $term->name = check_plain($term->name);
      $terms[] = $term;
    }
  
    $queue_terms[$qid] = $terms;
  }
  return $queue_terms[$qid];
}

/**
 * Adds a term to a queue
 *
 * @param $qid
 *  The queue id.
 * @param $tid
 *  The taxonomy term id.
 *
 * @return bool
 *  The object containing the term that was added to the queue or
 *  FALSE if the term was already in the queue.
 */
function term_queue_add_term($qid, $tid) {
  
  $terms = term_queue_get_terms($qid);
  $tids = array();
  foreach($terms as $term) {
    $tids[] = $term->tid;
    $names[$term->tid] = $term->name;
  }
  
  if (in_array($tid, $tids)) {
    drupal_set_message($names[$tid].t(' is already in this term queue.'), 'warning');
    return FALSE;
  }
  
  $term = taxonomy_term_load($tid);

  // Every time we add a term, give it a weight one larger than other terms.
  $max_weight = db_select('term_queue_term', 'tqt');
  $max_weight->addExpression('MAX(weight)');
  $max_weight = $max_weight->execute()->fetchField();

  db_insert('term_queue_term')
    ->fields(array(
      'qid' => $qid,
      'tid' => $tid,
      'vid' => $term->vid,
      'weight' => $max_weight + 1,
    ))
    ->execute();
  return $term;
}

/**
 * Updates a term within a queue.
 * 
 * @param $qid 
 *    The queue id.
 * @param $tid 
 *    The taxonomy term id.
 * @param $weight 
 *    The weight (ordering) within the specified queue.
 */
function term_queue_update_term($qid, $tid, $weight = 0) {
  db_update('term_queue_term')
  ->fields(array(
    'weight' => $weight,
  ))
  ->condition('qid',$qid)
  ->condition('tid',$tid)
  ->execute();
}

/**
 * Removes a term from a specific queue
 * 
 * @param $qid 
 *    The queue id.
 * @param $tid 
 *    The taxonomy term id.
 */
function term_queue_delete_term($qid, $tid) {
  db_delete('term_queue_term')
  ->condition('qid',$qid)
  ->condition('tid',$tid)
  ->execute();
}

/**
 * Remove a specific term from all queues
 * 
 * @param $tid 
 *  The taxonomy term id.
 */
function term_queue_remove_by_term($tid) {
  db_delete('term_queue_term')
  ->condition('tid',$tid)
  ->execute();
}

/**
 * Remove all term in a vocabulary from all queues
 * 
 * @param $vid 
 *  The vocabulary id.
 */
function term_queue_remove_by_vocab($vid) {
  db_delete('term_queue_term')
  ->condition('vid',$vid)
  ->execute();
}

/**
 * Implementation of hook_taxonomy_term_delete();
 *
 * When a term is removed, make sure we remove it from our queues.
 *
 * @params $term
 * 	The term id that has just been deleted
 */
function term_queue_taxonomy_term_delete($term) {
    term_queue_remove_by_term($term->tid);
}

/**
 * Implementation of hook_taxonomy_vocabulary_delete();
 *
 * When a vocabulary is removed, make sure we remove all its terms from our
 * queues.
 *
 * @params $vocabulary
 * 	The vocabulary id that has just been deleted.
 */
function term_queue_taxonomy_vocabulary_delete($vocabulary) {
    term_queue_remove_by_vocab($vocabulary->vid);
}

/**
 * Default theme function for a Term Queue
 *
 * @param $variables
 *
 * @return string
 */
function theme_term_queue($variables)
{
  $links = array();
      
  foreach($variables['terms'] as $term){
    $link = array(
      'href' => 'taxonomy/term/' . $term->tid,
      'title' => $term->name,
      'html' => TRUE,
    );
    $links[] = $link;
  }
  
  return theme('links', array(
    'links' => $links,
    'attributes' => array('class' => array('term-queue-links')),
  ));
}

/**
 * Implementation of hook_views_api().
 *
 * Taken from an example here: http://bit.ly/qaPXkT. This is required for the
 * module to have its include file loaded: term_queue.views.inc.
 */
function term_queue_views_api() {
    return array(
      'api' => 3,
      'path' => drupal_get_path('module', 'term_queue'),
    );
}

/**
* Implementation of hook_ctools_plugin_directory().

 * Added as part of the additional CTools export functionality.
*
* @params $module
* 	The name name of the module to load the plugin directory for
* 	The type of plugin to load
*/
function term_queue_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
}


/**
 * Function that gets called to see if the machine name submitted in the term queue edit / add form is unique.
 * @param $machine_name
 *  The machine_name we want to check for the presence of duplicates
 *
 * @return bool
 *  TRUE if the machine_name exists or FALSE if not.
 */
function term_queue_name_exists($machine_name) {
  $result = db_query('SELECT tq.qid FROM {term_queue} AS tq WHERE machine_name=:machine_name', array(':machine_name' => $machine_name));    
  if ($result->rowCount() > 0) {
    return TRUE;
  }
  else {
    return FALSE;
  }    
}


/**
 * Function that creates an array of taxonomy vocabularies.
 *
 * The vocabularies are suitable for rendering in a select widget.
 *
 * @return array
 *  An array of vocabulary names.
 */
function term_queue_vocabulary_options() {
  $vocabs = taxonomy_get_vocabularies();
  $vnames = array();	//A keyed array of the form 'vid' =>'vocabulary name'
  
  foreach ($vocabs as $vocab) {
    $vnames[$vocab->machine_name] = $vocab->name;
  }
  $vnames['any'] = '--Any--';
  return $vnames;
}

/**
 * Function to get a term_queue machine_name given the qid of the term_queue.
 *
 * @param $qid
 *  The id of the queue to fetch the name of.
 *
 * @return string
 *  The name of the queue.
 **/
function term_queue_machine_name($qid) {
  $sql = 'SELECT tq.machine_name FROM {term_queue} tq WHERE tq.qid = :qid';
  $result = db_query($sql, array(':qid' => $qid));
  $result = $result->fetchObject();
  $machine_name = $result->machine_name;
  return $machine_name;
}
