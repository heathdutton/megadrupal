<?php
/**
 * @file
 * Code for the Finance expenses feature.
 */

include_once('cash_flow_expenses.features.inc');

define('LINE_ITEM_TYPE_INCOME', 'income');
define('LINE_ITEM_TYPE_EXPENSE', 'expense');

function computed_field_field_remaining_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $amount_field = field_info_field('field_amount');
  // HACK: The following two lines should not exist, but they're about the best way
  // to aggregate this data at the moment. If someone knows a better way, please let
  // me know!
  $amount_table = _field_sql_storage_tablename($amount_field);
  $amount_column = _field_sql_storage_columnname('field_amount', 'value');

  // Is this income or an expense?
  switch ($entity->type) {
    case LINE_ITEM_TYPE_EXPENSE:
      // HACK: Same deal for the entity reference field
      // Add payments that specify this line item as a target
      $ref_field = field_info_field('field_target_line_item');
      $ref_table = _field_sql_storage_tablename($ref_field);
      $ref_column = _field_sql_storage_columnname('field_target_line_item', 'target_id');
      break;
    case LINE_ITEM_TYPE_INCOME:
      // Add payments that specify this line item as a source
      $ref_field = field_info_field('field_line_item');
      $ref_table = _field_sql_storage_tablename($ref_field);
      $ref_column = _field_sql_storage_columnname('field_line_item', 'target_id');
      break;
  }
  // Get total of said payments
  $payments_total = db_select($amount_table, 'at');
  $payments_total->join($ref_table, 'li', "at.entity_id = li.entity_id");
  $payments_total->addExpression("SUM(at.{$amount_column})", 'payments_total');
  $payments_total_result = $payments_total
    ->condition('at.bundle', 'payment')
    ->condition("li.{$ref_column}", $entity->nid)
    ->execute()
    ->fetchField();
  if (empty($payments_total_result)) $payments_total_result = 0.00;

  if ($entity->type == LINE_ITEM_TYPE_INCOME) {
    foreach (array('tax' => 'field_tax', 'r_d' => 'field_r_d') as $field_thing => $field_name) {
      // Set magically in this block: $tax, $r_d
      $the_field = field_get_items('node', $entity, $field_name);

      if (isset($the_field[0]['value'])) {
        $$field_thing = $the_field[0]['value'];
      }

      else {
        $$field_thing = (float) 0.00;
      }
    }
  }

  // Avoid weird errors when it's an expense.
  else {
    $tax = (float) 0.00;
    $r_d = (float) 0.00;
  }

  // Subtract total from field_amount
  $field_amount = field_get_items('node', $entity, 'field_amount');
  $entity_field[0]['value'] = (float) ($field_amount[0]['value'] - $payments_total_result - $tax - $r_d);
}

function computed_field_field_remaining_display($field, $entity_field_item) {
  return $entity_field_item['value'];
}

function cash_flow_expenses_init() {
  if (arg(0) == 'node' && arg(2) == 'clone') {
    // Tell Javascript that we're cloning an expense
    drupal_add_js(array('financeExpenses' => array('showCloneShortcuts' => TRUE)), 'setting');
    drupal_add_js(drupal_get_path('module', 'cash_flow_expenses') . '/cash_flow_expenses.js');
  }
}

function cash_flow_expenses_form_expense_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'cash_flow_expenses') . '/cash_flow_expenses.js',
    'type' => 'file',
  );
}
