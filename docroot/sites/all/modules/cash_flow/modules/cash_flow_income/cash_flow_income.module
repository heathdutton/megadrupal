<?php
/**
 * @file
 * Code for the Finance income feature.
 */

include_once('cash_flow_income.features.inc');

function computed_field_field_pending_payment_total_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $amount_field = field_info_field('field_amount');
  // HACK: The following two lines should not exist, but they're about the best way
  // to aggregate this data at the moment. If someone knows a better way, please let
  // me know!
  $amount_table = _field_sql_storage_tablename($amount_field);
  $amount_column = _field_sql_storage_columnname('field_amount', 'value');

  // Is this income or an expense?
  switch ($entity->type) {
    case LINE_ITEM_TYPE_EXPENSE:
      // HACK: Same deal for the entity reference field
      // Add payments that specify this line item as a target
      $ref_field = field_info_field('field_target_line_item');
      $ref_table = _field_sql_storage_tablename($ref_field);
      $ref_column = _field_sql_storage_columnname('field_target_line_item', 'target_id');
      break;
    case LINE_ITEM_TYPE_INCOME:
      // Add payments that specify this line item as a source
      $ref_field = field_info_field('field_line_item');
      $ref_table = _field_sql_storage_tablename($ref_field);
      $ref_column = _field_sql_storage_columnname('field_line_item', 'target_id');
      break;
  }

  list($paid_field, $paid_table, $paid_column) = array_values(_cash_flow_payments_get_paid_sql_field());

  // Get total of said payments
  $payments_total = db_select($amount_table, 'at');
  $payments_total->join($ref_table, 'li', "at.entity_id = li.entity_id");
  $payments_total->join($paid_table, 'p', "at.entity_id = p.entity_id");
  $payments_total->addExpression("SUM(at.{$amount_column})", 'payments_total');
  $payments_total_result = $payments_total
    ->condition('at.bundle', 'payment')
    ->condition("li.{$ref_column}", $entity->nid)
    ->condition("p.{$paid_column}", 1, '!=')
    ->execute()
    ->fetchField();
  if (empty($payments_total_result)) {
    $payments_total_result = 0.00;
  }

  // Subtract total from field_amount
  $entity_field[0]['value'] = (float) $payments_total_result;
}

function computed_field_field_pending_payment_total_display($field, $entity_field_item) {
  return $entity_field_item['value'];
}

function computed_field_field_non_business_payment_total_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  // This field only works for Income
  if ($entity->type == LINE_ITEM_TYPE_INCOME) {
    // TODO: Use helper function for this like below once it exists.
    $amount_field = field_info_field('field_amount');
    // HACK: The following two lines should not exist, but they're about the best way
    // to aggregate this data at the moment. If someone knows a better way, please let
    // me know!
    $amount_table = _field_sql_storage_tablename($amount_field);
    $amount_column = _field_sql_storage_columnname('field_amount', 'value');

    list($ref_field, $ref_table, $ref_column) = array_values(_cash_flow_income_get_payment_income_sql_field());

    // Get the expense Entity Reference field metadata
    $expense_ref_field = field_info_field('field_target_line_item');
    $expense_ref_table = _field_sql_storage_tablename($expense_ref_field);
    $expense_ref_column = _field_sql_storage_columnname('field_target_line_item', 'target_id');

    list($business_field, $business_table, $business_column) = array_values(_cash_flow_income_get_business_sql_field());
    list($paid_field, $paid_table, $paid_column) = array_values(_cash_flow_payments_get_paid_sql_field());

    // Get total of non-business payments
    $payments_total = db_select($amount_table, 'at');
    $payments_total->join($expense_ref_table, 'tli', "at.entity_id = tli.entity_id");
    $payments_total->join($ref_table, 'li', "at.entity_id = li.entity_id");
    $payments_total->join($business_table, 'b', "tli.{$expense_ref_column} = b.entity_id");
    $payments_total->addExpression("SUM(at.{$amount_column})", 'payments_total');
    $payments_total
      ->condition('at.bundle', 'payment')
      ->condition('b.bundle', 'expense')
      ->condition("li.{$ref_column}", $entity->nid)
      ->condition("b.{$business_column}", 1, "!=");

    $payments_total_result = $payments_total->execute()->fetchField();
    if (empty($payments_total_result)) {
      $payments_total_result = 0.00;
    }

    // Subtract total from field_amount
    $entity_field[0]['value'] = (float) $payments_total_result;
  }
}

function computed_field_field_non_business_payment_total_display($field, $entity_field_item) {
  return $entity_field_item['value'];
}

/**
 * TODO: Abstract out to Cash Flow Meta or something and make it work for both income and expenses (field_target_line_item and field_line_item)
 */
function _cash_flow_income_get_payment_income_sql_field() {
  // Add payments that specify this line item as a source
  $ref_field = field_info_field('field_line_item');
  $ref_table = _field_sql_storage_tablename($ref_field);
  $ref_column = _field_sql_storage_columnname('field_line_item', 'target_id');
  return array($ref_field, $ref_table, $ref_column);
}

/**
 * TODO: These field-getting helpers are all doing the same thing. Consolidate them.
 */
function _cash_flow_income_get_business_sql_field() {
  $business_field = field_info_field('field_business_related');
  $business_table = _field_sql_storage_tablename($business_field);
  $business_column = _field_sql_storage_columnname('field_business_related', 'value');
  return array($business_field, $business_table, $business_column);
}

