<?php

/**
 * @file
 * Filter to normalize html headings
 *
 * This is the main module file for heading normalize filter.
 * It normalizes html heading markup and can handle different
 * normalization markup in views.
 */

define('HEADING_NORM_PROTECTOR', '_heading_norm_filter_');

define('HEADING_NORM_FILTER_VAR_NODE_START_LEVEL', 'heading_norm_filter_node_start_level');
define('HEADING_NORM_FILTER_VAR_NODE_START_LEVEL_DEFAULT', 1);

define('HEADING_NORM_FILTER_VAR_VIEW_START_LEVEL', 'heading_norm_filter_view_start_level');
define('HEADING_NORM_FILTER_VAR_VIEW_START_LEVEL_DEFAULT', 3);

/*****************************************************************************
 * HOOKS
 *****************************************************************************/

/**
 * Implements hook_filter_info().
 */
function heading_norm_filter_filter_info() {
  return array(
    'heading_norm_filter' => array(
      'title' => t('Normalize headings'),
      'description' => t('Adjusts headings within content to a maximum level and maintains consistency within child levels.'),
      'process callback' => '_heading_norm_filter_process',
      // TODO remove this line when development is complete
      'cache' => FALSE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function heading_norm_filter_menu() {
  $items['admin/config/content/heading_norm_filter'] = array(
    'title' => 'Heading Normalizer',
    'description' => 'Configure the maximum heading levels allowed in nodes and views.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('heading_norm_filter_settings'),
    'access arguments' => array('administer filters'),
    'file' => 'heading_norm_filter.admin.inc',
  );
  return $items;
}

/*****************************************************************************
 * PRIVATE FUNCTIONS
 *****************************************************************************/

/**
 * Indicates whether or not heading_norm_filter is enabled for at least on
 * input format.
 *
 * @return
 *   boolean
 */
function _heading_norm_filter_is_enabled() {
  foreach (filter_formats() as $format) {
    foreach (filter_list_format($format->format) as $filter) {
      if ($filter->module == 'heading_norm_filter') {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Process the filter on text
 *
 * @param
 *   text
 * @param
 *   type
 *
 * @return
 *   string replaced text
 */
function _heading_norm_filter_process($text, $filter, $format, $langcode, $cache, $cacheid) {
  $view = FALSE;
  if (module_exists('views')) {
    $view = views_get_current_view();
  }
  if ($view) {
    $starttag = variable_get(HEADING_NORM_FILTER_VAR_VIEW_START_LEVEL, HEADING_NORM_FILTER_VAR_VIEW_START_LEVEL_DEFAULT);
  }
  else {
    $starttag = variable_get(HEADING_NORM_FILTER_VAR_NODE_START_LEVEL, HEADING_NORM_FILTER_VAR_NODE_START_LEVEL_DEFAULT);
  }

  $h = _heading_norm_filter_tag_find($text);

  $text = _heading_norm_filter_tag_replace($text, $starttag, $h);
  return $text;
}

/**
 * Determine which heading tags exist within the provided content.
 *
 * This is needed to reorder headings.
 */
function _heading_norm_filter_tag_find($text) {
  for ($i = 1; $i <= 6; $i++) {
    if (stripos($text, '<h' . $i) !== FALSE) {
      $h[$i] = TRUE;
    }
    else {
      $h[$i] = FALSE;
    }
  }
  return $h;
}

/**
 * Replace headings with right level.
 *
 * Reorder heading level starting on $start level from $text.
 * Consider $headings list of occurences.
 * @todo Remove .*? regex
 */
function _heading_norm_filter_tag_replace($text, $start, $headings) {
  $j = $start;

  for ($i = 1; $i <= 6; $i++) {
    if ($headings[$i] === TRUE) {
      $callback = function($match) use($j) {
        $level = $match[1];
        $atts = $match[2];

        // Initialize the $attributes array with a class element to prevent
        // PHP notices
        $attributes = array(
          'class' => NULL,
        );

        // If the heading tag already contains attributes, split them apart and
        // put them in the attributes array so that the heading-norm-filter
        // class can be added to them.
        // We can't do a simple split on spaces since some attributes (e.g.
        // class) may have spaces within their respective values
        $pattern = '/\s*(\w+)="(.*?)"\s*/';
        if (drupal_strlen($atts) > 0 && preg_match_all($pattern, $atts, $matches)) {
          for ($i = 0; $i < count($matches[0]); $i++) {
            $attributes[$matches[1][$i]] = $matches[2][$i];
          }
        }

        $attributes['class'] .= empty($attributes['class']) ? 'heading-norm-filter-orig-h' . $level : ' heading-norm-filter-orig-h' . $level;
        $ret = '<h' . HEADING_NORM_PROTECTOR . $j . ' ' . drupal_attributes($attributes) . '>';

        return $ret;
      };

      $text = preg_replace_callback('/<h(' . $i . ')(.*?)>/i', $callback, $text);
      $text = str_ireplace('</h' . $i . '>', '</h' . $j . '>', $text);
      $j++;
    }
  }
  $text = str_replace(HEADING_NORM_PROTECTOR, '', $text);

  return $text;
}

