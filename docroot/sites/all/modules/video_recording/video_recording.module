<?php

function video_recording_init() {
  drupal_add_js('http://jwpsrv.com/library/I7df1IX0EeOcqCIACrqE1A.js', 'external');
}

/**
 * Implements hook_entity_info().
 */
function video_recording_entity_info() {
  $return = array(
    'video_recording' => array(
      'label' => t('Video Recording'),
      'entity class' => 'VideoRecording',
      'controller class' => 'VideoRecordingController',
      'base table' => 'video_recording',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'video_recording_id',
        'title' => 'title',
      ),
       // Attach bundles - i.e. alternative configurations of fields associated with a main entity.
      'bundles' => array(
      'video_recording' => array(
        'label' => 'Video Recording',
        // Information below is used by the Field UI - they "attach" themselves here and lets us
        // do the standard field management that all the core entities enjoy.
        'admin' => array(
          'path' => 'admin/structure/video-recording/manage',
          'access arguments' => array('administer video_recording'),
        ),
      ),
    ),
      'load hook' => 'video_recording_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'video_recording',
      'access callback' => 'video_recording_access',
    ),
  );

  return $return;
}


/**
 * Implements hook_menu().
 */
function video_recording_menu() {
  $items = array();

  $items['video-recording/add'] = array(
    'title' => 'Add video recording',
    'page callback' => 'video_recording_add',
    'access arguments' => array('create video_recording entities'),
  );

  $video_recording_uri = 'video-recording/%video_recording';
  $video_recording_uri_argument_position = 1;

  $items[$video_recording_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('video_recording', $video_recording_uri_argument_position),
    'page callback' => 'video_recording_view',
    'page arguments' => array($video_recording_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'video_recording', $video_recording_uri_argument_position),
    'file' => 'video_recording.pages.inc',
  );

  $items[$video_recording_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$video_recording_uri . '/delete'] = array(
    'title' => 'Delete video recording',
    'title callback' => 'video_recording_label',
    'title arguments' => array($video_recording_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('video_recording_delete_form', $video_recording_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'video_recording', $video_recording_uri_argument_position),
    'file' => 'video_recording.admin.inc',
  );

  $items[$video_recording_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('video_recording_form', $video_recording_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'video_recording', $video_recording_uri_argument_position),
    'file' => 'video_recording.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['admin/content/video-recording'] = array(
    'title' => 'Video Recordings',
    'description' => 'Manage Video Recordings',
    'page callback' => 'video_recording_content',
    'access arguments' => array('administer video_recording'),
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
  );
  
  // This provides a place for Field API to hang its own
  // interface and has to be the same as what was defined
  // in video_recording_entity_info() above.
  $items['admin/structure/video-recording/manage'] = array(
    'title' => 'Video Recordings',
    'description' => 'Manage Video Recording Entity Structure',
    'page callback' => 'video_recording_admin_structure',
    'access arguments' => array('administer video_recording'),
    'weight' => -50,
  );
  
  return $items;
}

/**
 * Implements hook_permission().
 */
function video_recording_permission() {
  $permissions = array(
    'administer video_recording' => array(
      'title' => t('Administer video recordings'),
      'description' => t('Allows users to configure video recording fields.'),
      'restrict access' => TRUE,
    ),
    'create video_recording entities' => array(
      'title' => t('Create video recordings'),
      'description' => t('Allows users to create video recordings.'),
      'restrict access' => TRUE,
    ),
    'view video_recording entities' => array(
      'title' => t('View video recordings'),
      'description' => t('Allows users to view video recordings.'),
      'restrict access' => TRUE,
    ),
    'edit any video_recording entities' => array(
      'title' => t('Edit any video recordings'),
      'description' => t('Allows users to edit any video recordings.'),
      'restrict access' => TRUE,
    ),
    'edit own video_recording entities' => array(
      'title' => t('Edit own video recordings'),
      'description' => t('Allows users to edit own video recordings.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}


/**
 * Implements hook_entity_property_info_alter().
 */
function video_recording_entity_property_info_alter(&$info) {
  $properties = &$info['video_recording']['properties'];
  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the node was posted."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer video_recording',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t("The date the node was most recently updated."),
  );
  $properties['uid'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the video recording."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer video_recording',
    'required' => TRUE,
    'schema field' => 'uid',
  );
}


/*******************************************************************************
 ********************************* Video Recording API's ***********************
 ******************************************************************************/

/**
 * Access callback for video_recording.
 */
function video_recording_access($op, $video_recording, $account = NULL, $entity_type = NULL) {

  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  
  
  switch ($op) {
    case 'create':
      return user_access('administer video_recording', $account)
          || user_access('create video_recording entities', $account);
    case 'view':
      return user_access('administer video_recording', $account)
          || user_access('view video_recording entities', $account);
    case 'edit':
      return user_access('administer video_recording')
          || user_access('edit any video_recording entities')
          || (user_access('edit own video_recording entities') && ($video_recording->uid == $account->uid));
  }
}

/**
 * Load a video_recording.
 */
function video_recording_load($video_recording_id, $reset = FALSE) {
  $video_recordings = video_recording_load_multiple(array($video_recording_id), array(), $reset);
  return reset($video_recordings);
}

/**
 * Load multiple video_recordings based on certain conditions.
 */
function video_recording_load_multiple($video_recording_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('video_recording', $video_recording_ids, $conditions, $reset);
}

/**
 * Save video_recording.
 */
function video_recording_save($video_recording) {
  entity_save('video_recording', $video_recording);
}

/**
 * Delete single video_recording.
 */
function video_recording_delete($video_recording) {
  entity_delete('video_recording', entity_id('video_recording' ,$video_recording));
}

/**
 * Delete multiple video_recordings.
 */
function video_recording_delete_multiple($video_recording_ids) {
  entity_delete_multiple('video_recording', $video_recording_ids);
}


/**
  * Implements hook_views_api().
  */
function video_recording_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'video_recording'),
  );
}

/**
 * Video Recording Form.
 */
function video_recording_form($form, &$form_state, $video_recording) {
    
  $form_state['video_recording'] = $video_recording;

  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $video_recording->uid,
  );
  
  field_attach_form('video_recording', $video_recording, $form, $form_state);
  
  //dsm($form);
  //this should be better
  $next_video_recording_id = db_query("SELECT * FROM {video_recording} ORDER BY video_recording_id DESC")->fetchField();
  
  $filename = variable_get('video_recorder_kiosk_code', 'ispotchair') . '-' . ($next_video_recording_id + 1); 
 
  $form['field_video_recording_title'][LANGUAGE_NONE][0]['value']['#type'] = 'hidden';
  //autotitle
  $form['field_video_recording_title'][LANGUAGE_NONE][0]['value']['#default_value'] = $filename;
  
  
  $submit = array();
  if (!empty($form['#submit'])) {
    $submit += $form['#submit'];
  }

  $form['actions'] = array(
    '#weight' => 100,
  );
  
   $form['video_recorder'] = array(
    '#markup' => video_recorder_recorder($filename),
  );
  
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save video recording'),
    '#submit' => $submit + array('video_recording_form_submit'),
  );

  // Show Delete button if we edit video_recording.
  $video_recording_id = entity_id('video_recording' , $video_recording);
  if (!empty($video_recording_id) && video_recording_access('edit', $video_recording)) {
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array('video_recording_form_submit_delete'),
    );
  }

  $form['#validate'][] = 'video_recording_form_validate';

  return $form;
}

function video_recording_form_validate($form, &$form_state) {

}

/**
 * Video Recording submit handler.
 */
function video_recording_form_submit($form, &$form_state) {
  $video_recording = $form_state['video_recording'];

  entity_form_submit_build_entity('video_recording', $video_recording, $form, $form_state);

  video_recording_save($video_recording);

  $video_recording_uri = entity_uri('video_recording', $video_recording);

  $form_state['redirect'] = $video_recording_uri['path'];

  drupal_set_message(t('Video recording %title saved.', array('%title' => entity_label('video_recording', $video_recording))));
}

function video_recording_form_submit_delete($form, &$form_state) {
  $video_recording = $form_state['video_recording'];
  $video_recording_uri = entity_uri('video_recording', $video_recording);
  $form_state['redirect'] = $video_recording_uri['path'] . '/delete';
}

/**
 * Delete confirmation form.
 */
function video_recording_delete_form($form, &$form_state, $video_recording) {
  $form_state['video_recording'] = $video_recording;
  // Always provide entity id in the same form key as in the entity edit form.
  $form['video_recording_type_id'] = array('#type' => 'value', '#value' => entity_id('video_recording' ,$video_recording));
  $video_recording_uri = entity_uri('video_recording', $video_recording);
  return confirm_form($form,
    t('Are you sure you want to delete video recording %title?', array('%title' => entity_label('video_recording', $video_recording))),
    $video_recording_uri['path'],
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}

/**
 * Delete form submit handler.
 */
function video_recording_delete_form_submit($form, &$form_state) {
  $video_recording = $form_state['video_recording'];
  video_recording_delete($video_recording);

  drupal_set_message(t('Video recording %title deleted.', array('%title' => entity_label('video_recording', $video_recording))));

  $form_state['redirect'] = '<front>';
}

/**
 * Provide view of video_recordings that appears as a content tab like comments
 */
function video_recording_content() {
  
  $query = array('destination' => 'admin/content/video-recording');
  
  $output = '<ul class="action-links"><li>';
  $output .= l('Add Video Recording', 'video-recording/add', array('query' => $query));
  $output .= '</li></ul>';
  
  $view = views_get_view('video_recordings');
  $output .= $view->execute_display('default', NULL);

  return $output;
}


/**
 * Just provide some video_recording info for the entity administration page.
 * This can be expanded to add more information / a list of all created entites, etc.
 */
function video_recording_admin_structure() {
  drupal_goto('admin/structure/video-recording/manage/fields');
}

/**
 * Creates an video_recording entity for us - simply intializing the main variables and
 * sending us to a form to add in the rest.
 */
function video_recording_add() {

  $video_recording = entity_create('video_recording', array('type' => 'video_recording'));

  return drupal_get_form('video_recording_form', $video_recording);
}

/**
 * Implementing the uri callback defined
 */
function video_recording_uri($video_recording) {
  return array(
    'path' => 'video-recording/' . $video_recording->video_recording_id,
  );
}

/**
 *  Implementation of hook_entity_view()
 */
function video_recording_entity_view($video_recording, $type, $view_mode, $langcode) {

  if ('video_recording' != $type) {
    return;
  }

  $filename = variable_get('video_recorder_kiosk_code', 'ispotchair1') . '-' . $video_recording->video_recording_id . '.flv';
    
   $video = "<div id='playercAIyCKqeNupl'></div>
  <script type='text/javascript'>
    jwplayer('playercAIyCKqeNupl').setup({
        file: 'rtmp://54.194.205.169/vod/flv:" . $filename ."',
        image: 'http://dev-interaktiva-vaxjo.gotpantheon.com/sites/default/files/logo.png',
        width: '100%',
        aspectratio: '4:3',
        fallback: 'false',
        primary: 'flash'
    });
  </script>";
  
  $video_recording->content['field_video_recording_title'][0]['#markup'] = $video;
  


}


