<?php

/**
 * Implements hook_scrollshow_theme().
 */
function scrollshow_theme() {
  $items = array();
  $items['html__scrollshow'] = array(
    'template' => 'html--scrollshow',
    'path' => drupal_get_path('module', 'scrollshow') . '/templates',
    'base hook' => 'html',
    'render element' => 'page',
  );
  $items['page__scrollshow'] = array(
    'template' => 'page--scrollshow',
    'path' => drupal_get_path('module', 'scrollshow') . '/templates',
    'base hook' => 'page',
    'render element' => 'page',
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function scrollshow_init() {
  if (!empty($_GET['scrollshow'])) {
    scrollshow_set_page_template();
  }
}

/**
 * Preprocess template variables for page.tpl.php.
 */
function scrollshow_preprocess_html(&$variables) {
  if (!empty($GLOBALS['scrollshow_page_template'])) {
    $variables['theme_hook_suggestion'] = 'html__scrollshow';
  }
}

/**
 * Preprocess template variables for page.tpl.php.
 */
function scrollshow_preprocess_page(&$variables) {
  if (!empty($GLOBALS['scrollshow_page_template'])) {
    $variables['theme_hook_suggestion'] = 'page__scrollshow';
  }
}

/**
 * Enable the scrollshow page template.
 */
function scrollshow_set_page_template($enable = TRUE) {
  $GLOBALS['scrollshow_page_template'] = $enable;

  if ($enable) {
    $data = array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'viewport',
        'content' => 'width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no',
      ),
    );
    drupal_add_html_head($data, 'scrollshow');
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function scrollshow_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'scrollshow') {
    return "plugins/$plugin_type";
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function scrollshow_ctools_plugin_type() {
  return array(
    'scrollshow_effect' => array(
      'classes' => array('handler'),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function scrollshow_ctools_plugin_api() {
  list ($module, $api) = func_get_args();
  if ($module == 'scrollshow' && $api == 'scrollshow_effect') {
    return array('version' => 1);
  }
}

/**
 * Returns a list of effects.
 */
function scrollshow_get_effects() {
  ctools_include('plugins');
  return ctools_get_plugins('scrollshow', 'scrollshow_effect');
}

/**
 * Load a specific effect class.
 */
function scrollshow_get_effect_handler($name) {
  ctools_include('plugins');
  $plugin = ctools_get_plugins('scrollshow', 'scrollshow_effect', $name);
  if (!empty($plugin)) {
    $class_name = ctools_plugin_get_class($plugin, 'handler');
    if (class_exists($class_name)) {
      return new $class_name($plugin);
    }
  }
}

/**
 * Return a list of available easing functions.
 */
function scrollshow_easing_options() {
  $defaults = array(
    'linear', 'swing', 'easeInQuad', 'easeOutQuad', 'easeInOutQuad',
    'easeInCubic', 'easeOutCubic', 'easeInOutCubic', 'easeInQuart',
    'easeOutQuart', 'easeInOutQuart', 'easeInQuart', 'easeOutQuart',
    'easeInQuint', 'easeOutQuint', 'easeInOutQuint', 'easeInExpo',
    'easeOutExpo', 'easeInOutExpo', 'easeInSine', 'easeOutSine',
    'easeInOutSine', 'easeInCirc', 'easeOutCirc', 'easeInOutCirc',
    'easeInElastic', 'easeOutElastic', 'easeInOutElastic', 'easeInBack',
    'easeOutBack', 'easeInOutBack', 'easeInBounce', 'easeOutBounce',
    'easeInOutBounce',
  );
  $options = array();
  foreach ($defaults as $name) {
    $options[$name] = $name;
  }

  drupal_alter('scrollshow_easing_options', $options);

  return $options;
}

/**
 * Get all js/css attachments for current settings.
 */
function scrollshow_get_attached($settings = array(), $items = array()) {
  $js_settings = array();
  $attached = array(
    'js' => array(
      drupal_get_path('module', 'scrollshow') . '/js/scrollshow.js',
    ),
    'css' => array(),
    'library' => array(
      array('system', 'ui.dialog'),
      array('system', 'ui.progressbar'),
    ),
  );

  // add default ... by default!
  $settings['effects']['default'] = TRUE;

  if (!empty($settings['effects'])) {
    foreach ($settings['effects'] as $name => $enabled) {
      if ($enabled) {
        $handler = scrollshow_get_effect_handler($name);
        $effect_settings = isset($settings['effect_settings'][$name]) ?
          $settings['effect_settings'][$name] : array();
        $effect_settings = _scrollshow_get_settings($handler, $effect_settings);

        $attached = array_merge_recursive($attached, array(
          'js' => $handler->getJS($effect_settings),
          'css' => $handler->getCSS($effect_settings),
          'library' => $handler->getLibrary($effect_settings),
        ));

        $js_settings[$name] =
          $handler->prepareSettingsForJavascript($effect_settings, $items);
      }
    }
  }

  $attached['js'][] = array(
    'type' => 'setting',
    'data' => array('scrollshow' => $js_settings),
  );

  return $attached;
}

/**
 * Combine current settings with the default settings.
 */
function _scrollshow_get_settings($handler, $settings) {
  $defaults = $handler->getSettingsDefaults();
  foreach ($defaults as $name => $value) {
    if (!isset($settings[$name])) {
      $settings[$name] = $value;
    }
  }
  return $settings;
}

/**
 * Returns the scrollshow settings form.
 */
function scrollshow_build_settings_form($settings = array()) {
  $options = array();
  $handlers = array();
  foreach (scrollshow_get_effects() as $effect) {
    $name = $effect['name'];
    $handler = $handlers[$name] = scrollshow_get_effect_handler($name);
    $options[$name] = $handler->title;
  }

  $form = array('#tree' => TRUE);

  // pull out the 'default' effect out of the options - it's always enabled
  unset($options['default']);

  $form['effects'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Effects'),
    '#options' => $options,
    '#default_value' => isset($settings['effects']) ? $settings['effects'] : array(),
  );

  $form['effect_settings'] = array();
  foreach ($handlers as $name => $handler) {
    $effect_settings = isset($settings['effect_settings'][$name]) ?
      $settings['effect_settings'][$name] : array();
    $effect_settings = _scrollshow_get_settings($handler, $effect_settings);

    $form['effect_settings'][$name] = array_merge($handler->getSettingsForm($effect_settings), array(
      '#title' => $handler->title,
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#states' => array(
        'invisible' => array(":input[name='scrollshow[effects][$name]']" => array('checked' => FALSE)),
      ),
    ));
  }

  // Special case the 'default' plugin settings
  $form['effect_settings']['default']['#weight'] = -10;
  unset($form['effect_settings']['default']['#states']);

  return $form;
}

/**
 * Checks if we should redirect to the fallback -- if so, it'll just do it.
 */
function scrollshow_redirect_fallback($fallback_url) {
  $redirect = FALSE;
  $browser = NULL;

  if (module_exists('browscap')) {
    $browser = browscap_get_browser();
  }
  elseif (function_exists('get_browser') && ini_get('browscap')) {
    $browser = get_browser(NULL, TRUE);
  }

  if (!is_null($browser)) {
    // normalize boolean values (browscap bug in some version)
    foreach ($browser as $key => $value) {
      if ($value == 'true') {
        $browser[$key] = TRUE;
      }
      elseif ($value == 'false') {
        $browser[$key] = FALSE;
      }
    }

    // These should redirected to the fallback by default.
    $redirect = !$browser['javascript'] || $browser['crawler'];
  }

  drupal_alter('scrollshow_redirect_fallback',
    $redirect, $fallback_url, $browser);

  if ($redirect) {
    drupal_goto($fallback_url);
  }
}

/**
 * Returns a scrollshow page based an array.
 */
function scrollshow_render_page($items, $settings) {
  $fallback_url = NULL;
  $links = array();
  $slides = array();

  $path2fragment = array();

  // Break the $items up into slides and links
  foreach ($items as $idx => $item) {
    $item['attributes'] = !empty($item['attributes']) ?
      $item['attributes'] : array();
    $item['query'] = !empty($item['query']) ?
      $item['query'] : array();

    if (!empty($item['content'])) {
      // Grab the slide content
      $slides[$item['id']] = $item['content'];
      unset($item['content']);

      // Get the fallback URL
      if (is_null($fallback_url)) {
        $fallback_url = $item['href'];
      }

      // replace the link with an internal link
      $fragment = 'scrollshow-slide-' . $item['id'];
      $path2fragment[$item['href']] = $fragment;
      $item['href'] = $_GET['q'];
      $item['fragment'] = $item['attributes']['data-slide-id'] = $fragment;
      $item['absolute'] = TRUE;
    }
    else {
      // Open non-slide links in a new frame or lightbox
      $item['attributes']['target'] = '_blank';

      // Lightbox support in the menu
      if (!url_is_external($item['href'])) {
        $item['attributes']['rel'] = 'lightframe';
        $item['query']['scrollshow'] = TRUE;
      }
    }

    $links['scrollshow-menu-' . $idx] = $item;
  }

  // Checks if we should redirect to the fallback -- if so, it'll just do it!
  scrollshow_redirect_fallback($fallback_url);

  // show our special page template
  scrollshow_set_page_template();

  // add the path2fragment map to the default effect settings
  $settings['effect_settings']['default']['path2fragment'] = $path2fragment;

  $page = array();
  $page['menu_wrapper'] = array(
    '#prefix' => '<div class="scrollshow-menu-wrapper">',
    '#suffix' => '</div>',
  );
  $page['menu_wrapper']['fallback_link'] = array(
    '#type' => 'html_tag',
    '#tag' => 'span',
    '#value' => t(!empty($settings['effect_settings']['default']['fallback_text']) ?
      $settings['effect_settings']['default']['fallback_text'] :
      'Too slow? <a href="!url">Click here</a>.', array('!url' => url($fallback_url))),
    '#attributes' => array(
      'id' => 'scrollshow-fallback-link',
      'class' => array('scrollshow-fallback-link'),
    ),
  );
  $page['menu_wrapper']['menu']['#markup'] = theme('links__scrollshow_menu', array(
    'links' => $links,
    'attributes' => array(
      'class' => array('menu', 'clearfix'),
    ),
    'heading' => array(
      'text' => t('Menu'),
      'level' => 'h2',
      'class' => array('element-invisible'),
    ),
  ));
  $page['slides'] = array(
    '#prefix' => '<div class="scrollshow-slides">',
    '#suffix' => '</div>',
  );
  foreach ($slides as $id => $content) {
    $page['slides'][] = array(
      '#prefix' => '<div id="scrollshow-slide-' . $id . '" class="scrollshow-slide"><div class="scrollshow-slide-inner">',
      '#suffix' => '</div></div>',
      'value' => $content,
    );
  }

  $page['#attached'] = scrollshow_get_attached($settings, $items);

  return $page;
}

