<?php

/**
 * @file
 * Builds the two custom entities for the module.
 */

/**
 * Implements hook_schema().
 */
function commerce_fulfillment_schema() {

  $schema = array();

  $schema['commerce_fulfillment_packages'] = array(
    'description' => 'The base table for the package entity',
    'fields' => array(
      'package_id' => array(
        'description' => 'Primary key of the package entity',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'order_id' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'box_type' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('package_id'),
    'foreign keys' => array(
      'order_id' => array(
        'table' => 'commerce_order',
        'columns' => array('order_id' => 'order_id'),
      ),
      'commerce_fulfillment_line_items' => array(
        'table' => 'commerce_line_item',
        'columns' => array('commerce_fulfillment_line_item' => 'line_item_id'),
      ),
      'commerce_fulfillment_shipping' => array(
        'table' => 'commerce_customer_profile',
        'columns' => array('commerce_fulfillment_shipping' => 'profile_id'),
      ),
    ),
  );

  $schema['commerce_fulfillment_shipments'] = array(
    'description' => 'The base table for the Shipment entity',
    'fields' => array(
      'shipment_id' => array(
        'description' => 'Primary key of the Shipment entity',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'order_id' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'Status of the shipment("Pending" or "Completed")',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'tracking_number' => array(
        'description' => 'Tracking number for the shipments',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('shipment_id'),
    'foreign keys' => array(
      'order_id' => array(
        'table' => 'commerce_order',
        'columns' => array('order_id' => 'order_id'),
      ),
      'commerce_fulfillment_packages' => array(
        'table' => 'commerce_fulfillment_packages',
        'columns' => array('commerce_fulfillment_packages' => 'commerce_fulfillment_packages'),
      ),
      'commerce_fulfillment_shipping' => array(
        'table' => 'commerce_fulfillment_packages',
        'columns' => array('commerce_fulfillment_shipping' => 'commerce_fulfillment_shipping'),
      ),
    ),
  );

  return $schema;

}

/**
 * Implements hook_install().
 */
function commerce_fulfillment_install() {
  _commerce_fulfillment_install_package_type_vocabulary();
}

/**
 * Implements hook_enable().
 */
function commerce_fulfillment_enable() {
  commerce_fulfillment_configure_package_type();
  commerce_fulfillment_configure_shipment_type();
}

/**
 * Implements hook_uninstall().
 */
function commerce_fulfillment_uninstall() {
  variable_del('commerce_fulfillment_company');
  variable_del('commerce_fulfillment_address');
  variable_del('commerce_fulfillment_phone');
  variable_del('commerce_fulfillment_boxtype');
  variable_del('commerce_fulfillment_logo');
}

/**
 * Create a taxonomy vocabulary for package types if it doesn't already exist.
 * Add fields to the terms to set box dimensions.
 * @throws \Exception
 * @throws \FieldException
 */
function _commerce_fulfillment_install_package_type_vocabulary() {

  // Initialize vocabulary.
  $vocabulary = new stdClass();
  $vocabulary->name = t('Package Type');
  $vocabulary->machine_name = 'package_type';
  $vocabulary->description = t('This taxonomy vocabulary is used by the commerce_fulfillment module to define package types.');
  $vocabulary->hierarchy = 0;
  $vocabulary->module = 'commerce_fulfillment';

  // Ensure no vocabulary with same machine name exists before saving.
  $existing_vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary->machine_name);
  if (empty($existing_vocabulary)) {
    taxonomy_vocabulary_save($vocabulary);

    // When developing without installing a shipping module that integrates
    // with commerce_fulfillment it may be helpful to install these example
    // package types.
    $default_terms = array();
    $default_terms['USPS'] = array(
      'usps_small_flat_rate' => 'Small Flat Rate Box',
      'usps_medium_flat_rate' => 'Medium Flat Rate Box',
      'usps_large_flat_Rate' => 'Large Flat Rate Box',
    );
    $default_terms['FedEx'] = array(
      'fedex_box_small' => 'FexEx Box - Small',
      'fedex_box_medium' => 'FexEx Box - Medium',
      'fedex_box_large' => 'FexEx Box - Large',
    );

    // Add terms to vocabulary.
    //_commerce_fulfillment_taxonomy_vocabulary_terms_install($vocabulary->vid, $default_terms);

  }

  // Add dimensions fields to terms.
  $fields = array(
    'field_package_length' => 'Package Length',
    'field_package_width' => 'Package Width',
    'field_package_height' => 'Package Height'
  );
  foreach ($fields as $field_name => $field_label) {
    $field = field_info_field($field_name);
    if (!$field) {
      $field = array(
        'field_name' => $field_name,
        'type' => 'text',
      );

      $field = field_create_field($field);

    }

    $instance = field_info_instance('taxonomy_term', $field_name, 'package_type');
    if (!$instance) {
      $instance = array(
        'field_name' => $field_name,
        'entity_type' => 'taxonomy_term',
        'bundle' => 'package_type',
        'label' => t('@field_label', array('@field_label' => $field_label)),
      );

      $instance = field_create_instance($instance);

    }
  }

  // Add unit field.
  $fields = array(
    'field_package_dimensions_unit' => t('Dimensions Unit'),
  );

  foreach ($fields as $field_name => $field_label) {

    $field = field_info_field($field_name);
    if (!$field) {

      $field = array(
        'field_name' => $field_name,
        'type' => 'list_text',
        'settings' => array(
          'allowed_values' => array(
            'in' => 'in',
            'ft' => 'ft',
            'cm' => 'cm',
            'mm' => 'mm',
            'm' => 'm',
          ),
        ),
      );

      $field = field_create_field($field);
    }

    $instance = field_info_instance('taxonomy_term', $field_name, 'package_type');
    if (!$instance) {

      $instance = array(
        'field_name' => $field_name,
        'entity_type' => 'taxonomy_term',
        'bundle' => 'package_type',
        'label' => $field_label,
        'description' => t('Units for package dimensions.'),
      );

      $instance = field_create_instance($instance);

    }
  }
}
