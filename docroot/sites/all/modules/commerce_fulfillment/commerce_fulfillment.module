<?php

/**
 * @file
 * The main file for the functionality of the module.
 */

/**
 * Implements hook_menu().
 */
function commerce_fulfillment_menu() {
  $items = array();

  $items['admin/commerce/config/advanced-settings/commerce_fulfillment'] = array(
    'title' => 'Commerce Fulfillment',
    'description' => 'Options for Commerce Fulfillment',
    'position' => 'left',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'weight' => 8,
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/commerce/config/advanced-settings/commerce_fulfillment/settings'] = array(
    'title' => 'Admin Options',
    'description' => 'Add company information, package sizes and company logo.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_fulfillment_admin_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'commerce_fulfillment.admin.inc',
    'file path' => drupal_get_path('module', 'commerce_fulfillment') . '/includes',
  );

  $items['admin/commerce/orders/%commerce_order/commerce_fulfillment'] = array(
    'title' => 'Fulfillment',
    'page callback' => 'commerce_fulfillment_package_content',
    'page arguments' => array(3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );

  $items['admin/commerce/orders/%commerce_order/commerce_fulfillment/packages'] = array(
    'title' => 'Packages',
    'page callback' => 'commerce_fulfillment_package_content',
    'page arguments' => array(3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => -7,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['admin/commerce/orders/%commerce_order/commerce_fulfillment/shipments'] = array(
    'title' => 'Shipments',
    'page callback' => 'commerce_fulfillment_shipment_content',
    'page arguments' => array(3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/commerce/orders/commerce_fulfillment/shipping_label/%'] = array(
    'title' => 'Shipping Label',
    'page callback' => 'commerce_fulfillment_shipping_label_check',
    'page arguments' => array(5),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('update'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/commerce/orders/commerce_fulfillment/packing_slip/%'] = array(
    'title' => 'Packing Slip',
    'page callback' => 'commerce_fulfillment_packing_slip_check',
    'page arguments' => array(5),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('update'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_views_api().
 */
function commerce_fulfillment_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'commerce_fulfillment') . '/views',
  );
}

/**
 * Implements hook_views_data_alter().
 */
function commerce_fulfillment_views_data_alter(&$data) {
  // Set handler for box type field.
  $data['commerce_fulfillment_packages']['box_type']['field']['handler'] = 'commerce_fulfillment_handler_field_package_type';
}

/**
 * Implements hook_views_default_views().
 */
function commerce_fulfillment_views_default_views() {
  $views = array();

  $files = file_scan_directory(drupal_get_path('module', 'commerce_fulfillment') . '/views', '/.*\.inc$/');

  foreach ($files as $filepath => $file) {
    require $filepath;
    if (isset($view)) {
      $views[$view->name] = $view;
    }
  }

  return $views;
}

/**
 * Implements hook_entity_info().
 *
 * Tells the Drupal API about our custom entities.
 */
function commerce_fulfillment_entity_info() {
  $info = array();

  $info['commerce_fulfillment_package'] = array(
    'label' => t('Commerce Fulfillment Package'),
    'base table' => 'commerce_fulfillment_packages',
    'entity keys' => array(
      'id' => 'package_id',
    ),
    'entity class' => 'CommerceFulfillmentPackageEntity',
    'controller class' => 'CommerceFulfillmentPackageEntityController',
    'fieldable' => TRUE,
    'module' => 'commerce_fulfillment',
  );

  $info['commerce_fulfillment_shipment'] = array(
    'label' => t('Commerce Fulfillment Shipment'),
    'base table' => 'commerce_fulfillment_shipments',
    'entity keys' => array(
      'id' => 'shipment_id',
    ),
    'entity class' => 'CommerceFulfillmentShipmentEntity',
    'controller class' => 'CommerceFulfillmentShipmentEntityController',
    'fieldable' => TRUE,
    'module' => 'commerce_fulfillment',
  );

  return $info;

}

/**
 * Ensures the line item field is present on the default package bundle.
 *
 * @param string $type
 *   Which entity the field will be attached to.
 */
function commerce_fulfillment_configure_package_type($type = 'commerce_fulfillment_package') {

  // Look for or add a line item reference field to the order type.
  $field_name = 'commerce_fulfillment_line_items';
  commerce_activate_field($field_name);
  field_cache_clear();

  $field = field_info_field($field_name);
  $instance = field_info_instance('commerce_fulfillment_package', $field_name, $type);

  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'commerce_line_item_reference',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'entity_types' => array('commerce_fulfillment_package'),
      'translatable' => FALSE,
      'locked' => TRUE,
    );
    field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'commerce_fulfillment_package',
      'bundle' => $type,
      'label' => t('Line items'),
      'settings' => array(),
      'widget' => array(
        'type' => 'commerce_line_item_manager',
        'weight' => -10,
      ),
      'display' => array(),
    );

    // Set the default display formatters for various view modes.
    foreach (array('default', 'customer', 'administrator') as $view_mode) {
      $instance['display'][$view_mode] = array(
        'label' => 'hidden',
        'type' => 'commerce_line_item_reference_view',
        'weight' => -10,
      );
    }

    field_create_instance($instance);
  }

  $field_name = 'commerce_fulfillment_shipping';

  field_cache_clear();

  $field = field_info_field($field_name);
  $instance = field_info_instance('commerce_fulfillment_package', $field_name, $type);
  // Creates the package shipping info field.
  if (empty($field)) {
    $field = array(
      'field_name' => 'commerce_fulfillment_shipping',
      'type' => 'text',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'entity_types' => array('commerce_fulfillment_package', 'commerce_fulfillment_shipment'),
      'translatable' => TRUE,
    );

    field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'commerce_fulfillment_package',
      'bundle' => $type,
      'label' => t('Shipping Info'),
      'display' => array(),
    );

    field_create_instance($instance);
  }
}

/**
 * Ensures the packages field is present on the default shipment bundle.
 *
 * @param string $type
 *   Which entity the field will be attached to.
 */
function commerce_fulfillment_configure_shipment_type($type = 'commerce_fulfillment_shipment') {

  // Look for or add a line item reference field to the order type.
  $field_name = 'commerce_fulfillment_packages';

  field_cache_clear();

  $field = field_info_field($field_name);
  $instance = field_info_instance('commerce_fulfillment_shipment', $field_name, $type);

  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'entityreference',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'entity_types' => array('commerce_fulfillment_shipment'),
      'settings' => array(
        'target_type' => 'commerce_fulfillment_package',
        'handler_settings' => array('target_bundles' => NULL),
      ),
      'translatable' => FALSE,
      'locked' => TRUE,
    );
    field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'commerce_fulfillment_shipment',
      'bundle' => $type,
      'label' => t('Packages'),
      'settings' => array(
        'target_type' => 'commerce_fulfillment_package',
        'handler_settings' => array('target_bundles' => NULL),
      ),
      'display' => array(),
    );

    // Set the default display formatters for various view modes.
    foreach (array('default', 'customer', 'administrator') as $view_mode) {
      $instance['display'][$view_mode] = array(
        'label' => 'hidden',
        'type' => 'commerce_line_item_reference_view',
        'weight' => -10,
      );
    }

    field_create_instance($instance);
  }

  $field_name = 'commerce_fulfillment_shipping';

  field_cache_clear();

  $field = field_info_field($field_name);
  $instance = field_info_instance('commerce_fulfillment_shipment', $field_name, $type);
  // Creates the package shipping info field.
  if (empty($field)) {
    $field = array(
      'field_name' => 'commerce_fulfillment_shipping',
      'type' => 'text',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'entity_types' => array('commerce_fulfillment_package', 'commerce_fulfillment_shipment'),
      'translatable' => TRUE,
    );

    field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'commerce_fulfillment_shipment',
      'bundle' => $type,
      'label' => t('Shipping Info'),
      'display' => array(),
    );

    field_create_instance($instance);
  }
}

/**
 * Implements hook_theme().
 */
function commerce_fulfillment_theme() {
  return array(
    'packing_slip' => array(
      'arguments' => array('vars' => NULL),
      'template' => 'templates/commerce_fulfillment--packing_slip',
    ),
    'shipping_label' => array(
      'arguments' => array('vars' => NULL),
      'template' => 'templates/commerce_fulfillment--shipping_label',
    ),
  );
}

/**
 * Implements hook_action_info().
 */
function commerce_fulfillment_action_info() {
  return array(
    'commerce_fulfillment_add_product_action' => array(
      'type' => 'entity',
      'label' => t('Add Product to Package'),
      'behaviour' => array('changes_property'),
      'configurable' => TRUE,
      'vbo_configurable' => TRUE,
      'triggers' => array('any'),
      'aggregate' => TRUE,
    ),
    'commerce_fulfillment_remove_product_action' => array(
      'type' => 'entity',
      'label' => t('Remove Product from Package'),
      'behaviour' => array('changes_property'),
      'configurable' => TRUE,
      'vbo_configurable' => TRUE,
      'triggers' => array('any'),
      'aggregate' => TRUE,
    ),
    'commerce_fulfillment_add_package_action' => array(
      'type' => 'entity',
      'label' => t('Add Package to Shipment'),
      'behaviour' => array('changes_property'),
      'configurable' => TRUE,
      'vbo_configurable' => TRUE,
      'triggers' => array('any'),
      'aggregate' => TRUE,
    ),
    'commerce_fulfillment_remove_package_action' => array(
      'type' => 'entity',
      'label' => t('Remove Package from Shipment'),
      'behaviour' => array('changes_property'),
      'configurable' => TRUE,
      'vbo_configurable' => TRUE,
      'triggers' => array('any'),
      'aggregate' => TRUE,
    ),
  );
}

/**
 * Implements hook_action().
 */
function commerce_fulfillment_add_product_action(&$object, $context = array()) {
  $package_index = $context['package'];
  $order_id = $context['order_id'];
  $package = commerce_fulfillment_get_array($order_id, $package_index, 'package_in_order');
  $package_entity = entity_load('commerce_fulfillment_package', FALSE, array('package_id' => $package));
  $package_wrapper = entity_metadata_wrapper('commerce_fulfillment_package', $package_entity[$package]);

  foreach ($object as $line_item) {
    $in_package = FALSE;

    foreach ($package_wrapper->commerce_fulfillment_line_items->value() as $index) {
      if ($index->line_item_id == $line_item->line_item_id) {
        $in_package = TRUE;
        drupal_set_message(t('Product @product_id already in Package @package', array('@product_id' => $line_item->line_item_id, '@package' => $package)), 'error');
        break;
      }
    }

    if ($in_package == FALSE) {
      $package_wrapper->commerce_fulfillment_line_items[] = $line_item->line_item_id;
    }
  }
  $package_wrapper->save();
}

/**
 * Implements hook_form().
 */
function commerce_fulfillment_add_product_action_form($options) {
  $order_id = $options['view']->args[0];

  $form = array();

  $form['commerce_fulfillment_package'] = array(
    '#type' => 'select',
    '#title' => t('Select a Package:'),
    '#options' => commerce_fulfillment_get_array($order_id, 'false', 'package_in_order'),
    '#required' => TRUE,
  );

  $form['commerce_fulfillment_order'] = array(
    '#type' => 'hidden',
    '#value' => $order_id,
  );

  return $form;
}

/**
 * Implements hook_submit().
 */
function commerce_fulfillment_add_product_action_submit($form, &$form_state) {
  $output['package'] = $form_state['values']['commerce_fulfillment_package'];
  $output['order_id'] = $form_state['values']['commerce_fulfillment_order'];

  return $output;
}

/**
 * Implements hook_action().
 */
function commerce_fulfillment_remove_product_action(&$object, $context = array()) {
  $max = 0;
  $index_array = array();

  $package_id = $context['package_id'];
  $package_entity = entity_load('commerce_fulfillment_package', FALSE, array('package_id' => $package_id));

  $package_wrapper = entity_metadata_wrapper('commerce_fulfillment_package', $package_entity[$package_id]);

  foreach ($package_wrapper->commerce_fulfillment_line_items->value() as $index) {

    foreach ($object as $line_item) {

      if ($index->line_item_id == $line_item->line_item_id) {
        $index_array[] = $max;
      }
    }
    $max++;
  }

  foreach ($index_array as $index) {
    unset($package_wrapper->commerce_fulfillment_line_items[$index]);
    $package_wrapper->save();
  }

}

/**
 * Implements hook_form().
 */
function commerce_fulfillment_remove_product_action_form($options) {
  $order_id = $options['view']->args[0];

  $form = array();

  $form['commerce_fulfillment_package_id'] = array(
    '#type' => 'select',
    '#title' => t('Select a Package:'),
    '#options' => commerce_fulfillment_get_array($order_id, 'false', 'package_in_order'),
    '#required' => TRUE,
  );
  $form['commerce_fulfillment_order_id'] = array(
    '#type' => 'hidden',
    '#value' => $order_id,
  );
  return $form;
}

/**
 * Implements hook_submit().
 */
function commerce_fulfillment_remove_product_action_submit($form, &$form_state) {
  $output['package_id'] = commerce_fulfillment_get_array($form_state['values']['commerce_fulfillment_order_id'], $form_state['values']['commerce_fulfillment_package_id'], 'package_in_order');

  return $output;
}

/**
 * Implements hook_action().
 */
function commerce_fulfillment_add_package_action(&$object, $context = array()) {
  $shipment_index = $context['shipment'];
  $order_id = $context['order_id'];
  $shipment = commerce_fulfillment_get_array($order_id, $shipment_index, 'shipment_in_order');
  $shipment_entity = entity_load('commerce_fulfillment_shipment', FALSE, array('shipment_id' => $shipment));
  $shipment_wrapper = entity_metadata_wrapper('commerce_fulfillment_shipment', $shipment_entity[$shipment]);

  foreach ($object as $package) {
    $in_shipment = FALSE;
    $package_wrapper = entity_metadata_wrapper('commerce_fulfillment_package', $package);

    foreach ($shipment_wrapper->commerce_fulfillment_packages->value() as $index) {

      if ($index->package_id == $package_wrapper->package_id->value()) {
        $in_shipment = TRUE;
        drupal_set_message(t('Package @package_id already in Shipment @shipment', array('@package_id' => $package_wrapper->package_id->value(), '@shipment' => $shipment)), 'error');
        break;
      }
    }

    if ($in_shipment == FALSE) {
      $shipment_wrapper->commerce_fulfillment_packages[] = $package_wrapper->package_id->value();
    }
  }

  $shipment_wrapper->save();
}

/**
 * Implements hook_form().
 */
function commerce_fulfillment_add_package_action_form($options) {
  $order_id = $options['view']->args[0];

  $form = array();

  $form['commerce_fulfillment_shipment'] = array(
    '#type' => 'select',
    '#title' => t('Select a Shipment:'),
    '#options' => commerce_fulfillment_get_array($order_id, 'false', 'shipment_in_order'),
    '#required' => TRUE,
  );

  $form['commerce_fulfillment_order'] = array(
    '#type' => 'hidden',
    '#value' => $order_id,
  );

  return $form;
}

/**
 * Implements hook_submit().
 */
function commerce_fulfillment_add_package_action_submit($form, &$form_state) {
  $output['shipment'] = $form_state['values']['commerce_fulfillment_shipment'];
  $output['order_id'] = $form_state['values']['commerce_fulfillment_order'];

  return $output;
}

/**
 * Implements hook_action().
 */
function commerce_fulfillment_remove_package_action(&$object, $context = array()) {
  $max = 0;
  $index_array = array();
  $shipment_id = $context['shipment_id'];
  $shipment_entity = entity_load('commerce_fulfillment_shipment', FALSE, array('shipment_id' => $shipment_id));

  $shipment_wrapper = entity_metadata_wrapper('commerce_fulfillment_shipment', $shipment_entity[$shipment_id]);

  foreach ($shipment_wrapper->commerce_fulfillment_packages->value() as $index) {

    foreach ($object as $package) {

      if ($index->package_id == $package->package_id) {
        $index_array[] = $max;
      }
    }
    $max++;
  }

  foreach ($index_array as $index) {
    unset($shipment_wrapper->commerce_fulfillment_packages[$index]);
    $shipment_wrapper->save();
  }
}

/**
 * Implements hook_form().
 */
function commerce_fulfillment_remove_package_action_form($options) {
  $order_id = $options['view']->args[0];

  $form = array();

  $form['commerce_fulfillment_shipment_id'] = array(
    '#type' => 'select',
    '#title' => t('Select a Shipment:'),
    '#options' => commerce_fulfillment_get_array($order_id, 'false', 'shipment_in_order'),
    '#required' => TRUE,
  );

  $form['commerce_fulfillment_order_id'] = array(
    '#type' => 'hidden',
    '#value' => $order_id,
  );

  return $form;
}

/**
 * Implements hook_submit().
 */
function commerce_fulfillment_remove_package_action_submit($form, &$form_state) {
  $output['shipment_id'] = commerce_fulfillment_get_array($form_state['values']['commerce_fulfillment_order_id'], $form_state['values']['commerce_fulfillment_shipment_id'], 'shipment_in_order');

  return $output;
}

/**
 * Creates an array of the necessary id type.
 *
 * @param string $order_id
 *   ID of the current commerce order. Needed to load the correct entities.
 * @param string $index
 *   Specifies which value of the array we need.
 * @param string $type
 *   Specifies the type of entity wanted.
 *
 * @return array
 *   Returns value at specified index or the entire array if array is false.
 */
function commerce_fulfillment_get_array($order_id, $index = 'false', $type = '') {

  $id_array = array();
  $entity_array = array();

  // Creates an array of package in a commerce order.
  // Returns selected package if one chosen.
  if ($type == 'package_in_order') {
    $entity_array = entity_load('commerce_fulfillment_package', FALSE, array('order_id' => $order_id));

    foreach ($entity_array as $entity) {
      $entity = entity_metadata_wrapper('commerce_fulfillment_package', $entity);
      $id_array[] = $entity->package_id->value();
    }

    if ($index == 'false') {
      return $id_array;
    }

    return $id_array[$index];

  }
  elseif ($type == 'shipment_in_order') {
    // Creates an array of shipments in a commerce order.
    // Returns selected shipment if one chosen.
    $entity_array = entity_load('commerce_fulfillment_shipment', FALSE, array('order_id' => $order_id));

    foreach ($entity_array as $entity) {
      $entity = entity_metadata_wrapper('commerce_fulfillment_shipment', $entity);
      $id_array[] = $entity->shipment_id->value();
    }

    if ($index == 'false') {
      return $id_array;
    }

    return $id_array[$index];
  }

  foreach ($entity_array as $entity) {
    $entity = entity_metadata_wrapper($type, $entity);

    if (isset($entity->commerce_line_items)) {

      foreach ($entity->commerce_line_items->value() as $line_item) {
        $id_array[] = $line_item->line_item_id;
      }
    }
    elseif (isset($entity->commerce_fulfillment_line_items)) {

      foreach ($entity->commerce_fulfillment_line_items->value() as $line_item) {
        $id_array[] = $line_item->line_item_id;
      }
    }
  }

  if ($index == 'false') {
    return $id_array;
  }
  return $id_array[$index];

}


/**
 * Builds the package page.
 *
 * @param string $order
 *   Pulls in Order info and displays the name of the products in chosen Order.
 *
 * @return string
 *   Prints the page.
 */
function commerce_fulfillment_package_content($order) {

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_id = $order_wrapper->order_id->value();

  $get_form = drupal_get_form('commerce_fulfillment_create_package_form', $order_id);
  $output = drupal_render($get_form);

  $output .= '<h2>' . t('Products in Order @order_id:', array('@order_id' => $order_id)) . '</h2>';
  $output .= views_embed_view('commerce_fulfillment_line_items', 'line_item_block', $order_id);

  $output .= '<h2>' . t('Packages:') . '</h2>';
  $output .= views_embed_view('commerce_fulfillment_packages', 'package_package_block', $order_id);

  return $output;
}

/**
 * Implements hook_form().
 */
function commerce_fulfillment_create_package_form($form, &$form_state, $order_id) {

  $package_type = _commerce_fulfillment_package_types_options();

  $form = array();

  $form['commerce_fulfillment_order_id'] = array(
    '#type' => 'hidden',
    '#value' => $order_id,
  );

  $form['commerce_fulfillment_title'] = array(
    '#markup' => '<h2>Create a New Package:</h2>',
  );

  $form['commerce_fulfillment_package_type'] = array(
    '#type' => 'select',
    '#title' => t('Select package type:'),
    '#options' => $package_type,
    '#default_value' => 'default',
  );

  $form['commerce_fulfillment_create'] = array(
    '#type' => 'submit',
    '#value' => t('Create a Package'),
  );

  return $form;
}

/**
 * Implements hook_form_submit().
 */
function commerce_fulfillment_create_package_form_submit($form, &$form_state) {

  // Create an order entity wrapper.
  $order_id = $form_state['values']['commerce_fulfillment_order_id'];
  $order = commerce_order_load($order_id);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Create a profile entity wrapper.
  $profile_id = $order_wrapper->commerce_customer_billing->profile_id->value();
  $profile = commerce_customer_profile_load($profile_id);
  $profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $profile);

  // Create the package entity.
  $entity = entity_create('commerce_fulfillment_package', array(
    'order_id' => $order_wrapper->order_id->value(),
    'box_type' => $form_state['values']['commerce_fulfillment_package_type'],
    'commerce_fulfillment_line_items' => NULL,
  ));

  $entity->save('commerce_fulfillment_package', $entity);

  // commerce_fulfillment_package will not save from the entity_create.
  // So we create an Entity Metadata Wrapper to do the job.
  $package_wrapper = entity_metadata_wrapper('commerce_fulfillment_shipment', $entity);
  $shipping_array = array(
    $profile_wrapper->commerce_customer_address->first_name->value(),
    $profile_wrapper->commerce_customer_address->last_name->value(),
    $profile_wrapper->commerce_customer_address->thoroughfare->value(),
    $profile_wrapper->commerce_customer_address->locality->value(),
    $profile_wrapper->commerce_customer_address->administrative_area->value(),
    $profile_wrapper->commerce_customer_address->postal_code->value(),
    $profile_wrapper->commerce_customer_address->country->value(),
    array(
      date('ymd'),
    ),
  );

  $package_wrapper->commerce_fulfillment_shipping->set($shipping_array);
  $package_wrapper->save();
}

/**
 * Return an array of package type options ready to be added to a form select's
 * '#options'.
 * @return array
 */
function _commerce_fulfillment_package_types_options() {
  $options = array();

  foreach (_commerce_fulfillment_package_types_load() as $term) {
    $options[$term->tid] = $term->name;
  }

  return $options;
}

/**
 * Get the possible package types.
 * @return array|bool
 */
function _commerce_fulfillment_package_types_load() {
  $vocabulary = taxonomy_vocabulary_machine_name_load('package_type');
  if ($vocabulary == FALSE) {
    return FALSE;
  }

  $terms = taxonomy_get_tree($vocabulary->vid);
  return $terms;
}

/**
 * Tests to make sure user only selected one package.
 *
 * @param string $package_id
 *   If user selected more than one package redirects the user back to the
 *   package page.
 */
function commerce_fulfillment_packing_slip_check($package_id) {
  if (strstr($package_id, ',')) {
    drupal_set_message(t('Please select only one Package'), 'error');
    $package_id = strtok($package_id, ',');
    $package = entity_load('commerce_fulfillment_package', FALSE, array('package_id' => $package_id));
    $package = $package[$package_id];
    $order_id = $package->order_id;
    drupal_goto('admin/commerce/orders/' . $order_id . '/commerce_fulfillment/packages');
  }
  else {
    commerce_fulfillment_packing_slip_content($package_id);
  }
}

/**
 * The page to show and print the packing slip.
 *
 * @param string $package_id
 *   Specifies which package we want to print a slip for.
 */
function commerce_fulfillment_packing_slip_content($package_id) {

  $package_selected = entity_load('commerce_fulfillment_package', FALSE, array('package_id' => $package_id));
  $package_wrapper = entity_metadata_wrapper('commerce_fulfillment_package', $package_selected[$package_id]);

  $products = $package_wrapper->commerce_fulfillment_line_items->value();
  $shipping = $package_wrapper->commerce_fulfillment_shipping->value();
  $package_type = $package_wrapper->box_type->value();

  $order_id = $package_wrapper->order_id->value();

  $packages = entity_load('commerce_fulfillment_package', FALSE, array('order_id' => $order_id));
  $count = count($packages);

  $image = variable_get('commerce_fulfillment_logo', NULL);

  // If user goes back and removes the logo, commerce_fulfillment_logo will
  // be set to zero. So we check for both NULL and 0.
  if ($image !== 0 && $image !== NULL) {
    $image_obj = file_load($image);
    if (isset($image_obj->uri)) {
      $image_obj_url = file_create_url($image_obj->uri);
    }
  }
  else {
    drupal_set_message(t('Please upload Company Logo and set Company Information under Store Settings'), 'error');
    drupal_goto('admin/commerce/orders/' . $order_id . '/commerce_fulfillment/packages');
  }

  $company = variable_get('commerce_fulfillment_company', '[Company]');
  $address = variable_get('commerce_fulfillment_address', '[Company Address]');
  $phone = variable_get('commerce_fulfillment_phone', '[Company Phone]');

  $page = commerce_fulfillment_page_prerequisite();

  $output = theme('packing_slip', array(
    'company' => $company,
    'address' => $address,
    'phone' => $phone,
    'image' => $image_obj_url,
    'package_type' => $package_type,
    'shipping' => $shipping,
    'products' => $products,
    'count' => $count,
    'page' => $page,
  ));

  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  drupal_send_headers();

  print $output;

}

/**
 * Builds the shipments page.
 *
 * @param string $order
 *   Specifies which packages and shipments to load.
 *
 * @return string
 *   Prints the page.
 */
function commerce_fulfillment_shipment_content($order) {

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_id = $order_wrapper->order_id->value();

  $get_form = drupal_get_form('commerce_fulfillment_create_shipment_form', $order_id);
  $output = drupal_render($get_form);

  $output .= '<h2>' . t('Packages:') . '</h2>';
  $output .= views_embed_view('commerce_fulfillment_packages', 'package_shipment_block', $order_id);

  $output .= '<h2>' . t('Shipments:') . '</h2>';
  $output .= views_embed_view('commerce_fulfillment_shipments', 'default', $order_id);

  return $output;
}

/**
 * Implements hook_form().
 */
function commerce_fulfillment_create_shipment_form($form, &$form_state, $order_id) {

  $form = array();

  $form['commerce_fulfillment_order_id'] = array(
    '#type' => 'hidden',
    '#value' => $order_id,
  );

  $form['commerce_fulfillment_title'] = array(
    '#markup' => '<h2>' . t('Create a New Shipment:') . '</h2>',
  );

  $form['commerce_fulfillment_tracking_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter tracking number:'),
    '#size' => 20,
    '#length' => 255,
    '#required' => FALSE,
  );

  $form['commerce_fulfillment_create'] = array(
    '#type' => 'submit',
    '#value' => t('Create Shipment'),
  );

  return $form;
}

/**
 * Implements hook_form_submit().
 */
function commerce_fulfillment_create_shipment_form_submit(&$form, &$form_state) {

  $order_id = $form_state['values']['commerce_fulfillment_order_id'];
  $order = commerce_order_load($order_id);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $profile = commerce_customer_profile_load($order_wrapper->commerce_customer_shipping->profile_id->value());

  $profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $profile);

  $entity = entity_create('commerce_fulfillment_shipment', array(
    'order_id' => $order->order_id,
    'status' => 'Pending',
    'tracking_number' => $form_state['values']['commerce_fulfillment_tracking_number'],
  ));

  $entity->save('commerce_fulfillment_shipment', $entity);

  // commerce_fulfillment_shipping will not save from the entity_create.
  // So we create an Entity Metadata Wrapper to do the job.
  $shipment_wrapper = entity_metadata_wrapper('commerce_fulfillment_shipment', $entity);
  $shipping_array = array(
    $profile_wrapper->commerce_customer_address->first_name->value(),
    $profile_wrapper->commerce_customer_address->last_name->value(),
    $profile_wrapper->commerce_customer_address->thoroughfare->value(),
    $profile_wrapper->commerce_customer_address->locality->value(),
    $profile_wrapper->commerce_customer_address->administrative_area->value(),
    $profile_wrapper->commerce_customer_address->postal_code->value(),
    $profile_wrapper->commerce_customer_address->country->value(),
    array(
      date('ymd'),
    ),
  );

  $shipment_wrapper->commerce_fulfillment_shipping->set($shipping_array);
  $shipment_wrapper->save();
}

/**
 * Tests to make sure user only selected one shipment.
 *
 * @param string $shipment_id
 *   If user selects multiple shipments, this goes back to the shipments page.
 */
function commerce_fulfillment_shipping_label_check($shipment_id) {
  if (strstr($shipment_id, ',')) {
    drupal_set_message(t('Please select only one Shipment'), 'error');
    $shipment_id = strtok($shipment_id, ',');
    $shipment = entity_load('commerce_fulfillment_shipment', FALSE, array('shipment_id' => $shipment_id));
    $shipment = $shipment[$shipment_id];
    $order_id = $shipment->order_id;
    drupal_goto('admin/commerce/orders/' . $order_id . '/commerce_fulfillment/shipments');
  }
  else {
    commerce_fulfillment_shipping_label_content($shipment_id);
  }
}

/**
 * Prints the shipping label on its own page.
 *
 * @param string $shipment_id
 *   Takes in the shipment_id, loads shipment, and prints info from admin form.
 */
function commerce_fulfillment_shipping_label_content($shipment_id) {
  $shipment_arr = entity_load('commerce_fulfillment_shipment', FALSE, array('shipment_id' => $shipment_id));
  $shipment = $shipment_arr[$shipment_id];
  $shipment = entity_metadata_wrapper('commerce_fulfillment_shipment', $shipment);

  $shipping = $shipment->commerce_fulfillment_shipping->value();
  $tracking_number = $shipment->tracking_number->value();
  $order_id = $shipment->order_id->value();
  $image = variable_get('commerce_fulfillment_logo', NULL);

  // If user goes back and removes the logo, commerce_fulfillment_logo
  // will be set to zero. So we check for both NULL and 0.
  if ($image !== 0 && $image !== NULL) {
    $image_obj = file_load($image);
    if (isset($image_obj->uri)) {
      $image_obj_url = file_create_url($image_obj->uri);
    }
  }
  else {
    drupal_set_message(t('Please upload Company Logo and set Company Information under Store Settings'), 'error');
    drupal_goto('admin/commerce/orders/' . $order_id . '/commerce_fulfillment/shipments');
  }

  $company = variable_get('commerce_fulfillment_company');
  $address = variable_get('commerce_fulfillment_address');
  $phone = variable_get('commerce_fulfillment_phone');

  $page = commerce_fulfillment_page_prerequisite();

  $output = theme('shipping_label', array(
    'company' => $company,
    'address' => $address,
    'phone' => $phone,
    'image' => $image_obj_url,
    'shipping' => $shipping,
    'tracking_number' => $tracking_number,
    'page' => $page,
  ));

  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  drupal_send_headers();
  print $output;

}

/**
 * Prepare the array for the template with common details.
 */
function commerce_fulfillment_page_prerequisite() {
  global $language;
  $page = array();
  $page['language'] = $language->language;
  $page['head'] = drupal_get_html_head();
  $page['title'] = '';
  $page['scripts'] = drupal_get_js();
  $page['favicon'] = '';
  drupal_add_css(drupal_get_path('module', 'commerce_fulfillment') . '/css/commerce_fulfillment.css');
  $page['css'] = drupal_get_css();
  $page['message'] = drupal_get_messages();
  $page['footer_scripts'] = drupal_get_js('footer');

  return $page;
}
/**
 * Overrides EntityApiController.
 */
class CommerceFulfillmentShipmentEntityController extends EntityAPIController {
}
/**
 * Overrides Entity.
 */
class CommerceFulfillmentShipmentEntity extends Entity {
}
/**
 * Overrides EntityApiController.
 */
class CommerceFulfillmentPackageEntityController extends EntityAPIController {
}
/**
 * Overrides Entity.
 */
class CommerceFulfillmentPackageEntity extends Entity {
}
