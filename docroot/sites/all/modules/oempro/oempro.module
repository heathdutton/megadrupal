<?php

/**
 * @file
 * Oempro module.
 */

/**
 * Implements hook_menu().
 */
function oempro_menu() {
  $items = array();

  $items['admin/config/services/oempro'] = array(
    'title' => 'Oempro',
    'description' => 'Manage Oempro Settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oempro_admin_settings'),
    'access arguments' => array('administer oempro'),
    'file' => 'includes/oempro.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/oempro/global'] = array(
    'title' => 'Global Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 10,
  );
  $items['oempro/webhook'] = array(
    'title' => 'Oempro webhooks endpoint',
    'page callback' => 'oempro_process_webhook',
    'access callback' => 'oempro_process_webhook_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function oempro_permission() {
  return array(
    'administer oempro' => array(
      'title' => t('administer oempro'),
      'description' => t('Change the Oempro configuration.'),
    ),
  );
}

/**
 * Get a Oempro API object for communication with the oempro server.
 */
function oempro_get_api_object() {
  $q = new OEMPROAPI(variable_get('oempro_url', ''), variable_get('oempro_username', ''), variable_get('oempro_password', ''));
//  $q->userLogin(variable_get('oempro_username', ''), variable_get('oempro_password', ''));
//  oempro_debug($q, array('q set in' => 'oempro_get_api_object'));
  if ($q->error_code) {
    watchdog('oempro', 'OemproAPI Error: %errmsg', array('%errmsg' => $q->errorMessage), WATCHDOG_ERROR);
    return NULL;
  }

  return $q;
}

/**
 * Check if the given email is subscribed to the given list. Simple
 *   wrapper around oempro_get_subscriber_info().
 *
 * @param  $list_id
 * @param  $email
 *
 * @return bool
 */
function oempro_is_subscribed($list_id, $email) {
  $subscribed = FALSE;
  $subscriber_info = oempro_get_subscriber_info($list_id, $email);
//  oempro_debug($subscriber_info, array('from' => 'oempro_is_subscribed'));
  if (isset($subscriber_info['SubscriptionStatus']) && ($subscriber_info['SubscriptionStatus'] == 'Subscribed' || $subscriber_info['SubscriptionStatus'] == 'Opt-In Pending')) {
    $subscribed = TRUE;
  }

  return $subscribed;
}

/**
 * Subscribe a user to a given list.
 */
function oempro_subscribe_user($list, $email, $merge_vars, $message = TRUE, $oempapi = NULL) {
  $success = FALSE;
  if ($oempapi || $oempapi = oempro_get_api_object()) {
    $double_optin = $list->settings['doublein'];

    $success = $oempapi->subscriberSubscribe($list->oempro_list_id, $email, $merge_vars, ip_address());

    if ($message && $success && $double_optin) {
      drupal_set_message(t('You have chosen to subscribe to %list. An email will be sent to your address. Click the link in the email to confirm the subscription.',
        array('%list' => $list->label)));
    }
    elseif ($message && $success) {
      drupal_set_message(t('You have subscribed to %list.', array('%list' => $list->label)));
    }

    // clear user cache, just in case there's some cruft leftover
    oempro_cache_clear_user($list->oempro_list_id, $email);

    if ($success) {
      module_invoke_all('oempro_subscribe_user', $list, $email, $merge_vars);
      watchdog('oempro', '@email was subscribed to list @list.',
        array('@email' => $email, '@list' => $list->label), WATCHDOG_NOTICE
      );
    }
    else {
      watchdog('oempro', 'A problem occurred subscribing @email to list @list. Message: @msg', array(
        '@email' => $email,
        '@list' => $list->label,
        '@msg' => $oempapi->errorMessage,
      ), WATCHDOG_WARNING);
    }
  }

  return $success;
}

/**
 * Update a user in a given list.
 */
function oempro_update_user($list, $old_email, $email, $merge_vars, $message = TRUE, $oempapi = NULL) {
  $success = FALSE;
  if ($oempapi || $oempapi = oempro_get_api_object()) {
    $subscriber_info = oempro_get_subscriber_info($list->oempro_list_id, $old_email);
    $success = $oempapi->subscriberUpdate($subscriber_info['SubscriberID'], $list->oempro_list_id, $email, $merge_vars);

    if ($success && $message) {
      drupal_set_message(t('You have updated your settings in %list.', array('%list' => $list->label)));
    }

    // clear user cache
    oempro_cache_clear_user($list->oempro_list_id, $email);

    if ($success) {
      watchdog('oempro', '@email was updated in list @list.',
        array('@email' => $email, '@list' => $list->label), WATCHDOG_NOTICE
      );
    }
    else {
      watchdog('oempro', 'A problem occurred subscribing @email to list @list. Message: @msg', array(
        '@email' => $email,
        '@list' => $list->label,
        '@msg' => $oempapi->errorMessage,
      ), WATCHDOG_WARNING);
    }
  }

  return $success;
}

/**
 * Unsubscribe a user from the given list.
 *
 * @param object $list
 * @param string $email
 * @param bool $message
 * @param object $oempapi
 * @param bool $delete
 *   Indicates whether an email should be deleted or just unsubscribed.
 *
 * @return bool
 */
function oempro_unsubscribe_user($list, $email, $message = TRUE, $oempapi = NULL, $delete = FALSE) {
  $success = FALSE;
  if ($oempapi || $oempapi = oempro_get_api_object()) {
    if (oempro_is_subscribed($list->oempro_list_id, $email)) {
      $subscriber_info = oempro_get_subscriber_info($list->oempro_list_id, $email);
//      oempro_debug(array('oempro.module' => 'oempro_unsubscribe_user line 175'), $subscriber_info);
      $success = $oempapi->subscriberUnsubscribe($list->oempro_list_id, $email, NULL, NULL, $subscriber_info['SubscriberID'], ip_address(), FALSE);
      if ($success) {
        module_invoke_all('oempro_unsubscribe_user', $list, $email);

        if ($message) {
          drupal_set_message(t('You have unsubscribed from %list.', array('%list' => $list->label)));
        }
      }

      // clear user cache
      oempro_cache_clear_user($list->oempro_list_id, $email);
    }
  }

  return $success;
}

/**
 * Return all Oempro lists for a given key. Lists are stored in the
 * cache.
 *
 * @param array $list_ids
 *   An array of list IDs to filter the results by.
 * @param bool $reset
 *   Force a cache reset.
 *
 * @return An array of list arrays.
 */
function oempro_get_lists($list_ids = array(), $reset = FALSE) {
  $cache = $reset ? NULL : cache_get('oempro_lists');
  $lists = array();
  // return cached lists
  if ($cache) {
    $lists = $cache->data;
  }
  // Query lists from the Oempro API and store in cache
  else {
    if ($q = oempro_get_api_object()) {
      $result = $q->listsGet();
      if ($result['TotalListCount'] > 0) {
        foreach ($result['Lists'] as $list) {
//          oempro_debug(array('oempro.module' => 'oempro_get_lists line 218'), $list);
          // append mergefields
          $list['mergevars'] = $q->customFieldsGet($list['ListID']);

          $lists[$list['ListID']] = $list;
        }
      }
    }
    uasort($lists, '_oempro_list_cmp');

    cache_set('oempro_lists', $lists, 'cache', CACHE_TEMPORARY);
  }

  // filter by given ids
  if (!empty($list_ids)) {
    foreach ($lists as $key => $list) {
      if (!in_array($key, $list_ids)) {
        unset($lists[$key]);
      }
    }
  }

  return $lists;
}

/**
 * Wrapper around oempro_get_lists() to return a single list.
 *
 * @param string $list_id
 *
 * @return array list
 */
function oempro_get_list($list_id) {
  $lists = oempro_get_lists(array($list_id));
  return reset($lists);
}

/**
 * Get the Oempro subscriber_info for a given email address and list. Results are cached
 * in the cache_oempro_user bin which is cleared by the MC web hooks system when
 * needed.
 *
 * @param string $list_id
 * @param string $email
 * @param bool $reset
 *
 * @return array subscriber_info
 */
function oempro_get_subscriber_info($list_id, $email, $reset = FALSE) {
  $cache = $reset ? NULL : cache_get($list_id . '-' . $email, 'cache_oempro_user');
  $subscriber_info = array();

  // return cached lists
  if ($cache) {
    $subscriber_info = $cache->data;
  }
  // Query lists from the Oempro API and store in cache
  else {
    if ($q = oempro_get_api_object()) {
      $result = $q->subscriberGet($list_id, $email);
      if ($result['Success']) {
        $subscriber_info = $result['SubscriberInformation'];
      }
    }

    cache_set($list_id . '-' . $email, $subscriber_info, 'cache_oempro_user', CACHE_PERMANENT);
  }

  return $subscriber_info;
}

/**
 * Sets the subscriber info in the cache.
 *
 * @param string $list_id
 * @param string $email
 */
function oempro_set_subscriber_info($list_id, $email) {
  oempro_get_subscriber_info($list_id, $email, TRUE);
}

/**
 * Clear a oempro user subscriber_info cache
 *
 * @param  $list_id
 * @param  $email
 */
function oempro_cache_clear_user($list_id, $email) {
  cache_clear_all($list_id . '-' . $email, 'cache_oempro_user');
}

/**
 * Implements hook_flush_caches().
 */
function oempro_flush_caches() {
  return array('cache_oempro_user');
}

/**
 * Access callback for oempro_process_webhook().
 *
 * @param string $key
 *
 * @return bool
 */
function oempro_process_webhook_access($key) {
  return $key == oempro_webhook_key();
}

/**
 * Process a webhook post from Oempro
 */
function oempro_process_webhook() {
  $data = $_POST['data'];
  switch ($_POST['type']) {
    case 'unsubscribe':
    case 'profile':
    case 'cleaned':
      oempro_cache_clear_user($data['list_id'], $data['email']);
      oempro_set_subscriber_info($data['list_id'], $data['email']);
      break;

    case 'upemail':
      oempro_cache_clear_user($data['list_id'], $data['old_email']);
      oempro_set_subscriber_info($data['list_id'], $data['new_email']);
      break;
  }

  // log event
  watchdog('oempro', 'Webhook type @type has been processed.',
    array('@type' => $_POST['type']), WATCHDOG_INFO
  );
}

/**
 * Generate a key to include in the webhook url based on a hash.
 *
 * @param string $list_id
 *
 * @return string
 */
function oempro_webhook_key($list_id) {
  return drupal_hash_base64($GLOBALS['base_url'] . $list_id . drupal_get_private_key() . drupal_get_hash_salt());
}

/**
 * Generate the webhook endpoint URL.
 *
 * @param string $list_id
 *
 * @return string
 */
function oempro_webhook_url($list_id) {
  return $GLOBALS['base_url'] . '/oempro/webhook/' . oempro_webhook_key($list_id);
}

/**
 * Helper function used by uasort() to sort lists alphabetically by name.
 *
 * @param array $a
 *   An array representing the first list.
 * @param array $b
 *   An array representing the second list.
 *
 * @return One of the values -1, 0, 1
 */
function _oempro_list_cmp($a, $b) {
  if ($a['Name'] == $b['Name']) {
    return 0;
  }
  return ($a['Name'] < $b['Name']) ? -1 : 1;
}

function oempro_debug($response, $serial) {
//  echo '<pre>'; print_r($response); echo '</pre>';
//  echo '<pre>'; print_r($serial); echo '</pre>';
  drupal_set_message(t('$response: <pre>@response</pre>', array('@response' => print_r($response, TRUE))));
  drupal_set_message(t('$serial: <pre>@serial</pre>', array('@serial' => print_r($serial, TRUE))));

}
