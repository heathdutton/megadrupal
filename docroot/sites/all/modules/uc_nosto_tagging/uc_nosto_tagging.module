<?php

/**
 * @file
 * Implements the required blocks for using Nosto marketing automation service.
 */

define('UC_NOSTO_TAGGING_SERVER_ADDRESS', 'connect.nosto.com');

define('UC_NOSTO_TAGGING_CONFIG_KEY_SERVER_ADDRESS', 'nosto_tagging_server_address');
define('UC_NOSTO_TAGGING_CONFIG_KEY_ACCOUNT_NAME', 'nosto_tagging_account_name');
define('UC_NOSTO_TAGGING_CONFIG_KEY_CATEGORY_FIELD_ID', 'nosto_tagging_content_type_category_field_id');
define('UC_NOSTO_TAGGING_CONFIG_KEY_BRAND_FIELD_ID', 'nosto_tagging_content_type_brand_field_id');
define('UC_NOSTO_TAGGING_CONFIG_KEY_CATEGORY_VOCABULARY_ID', 'nosto_tagging_vocabulary_category_vid');
define('UC_NOSTO_TAGGING_CONFIG_KEY_CONTENT_TYPE_IMAGE_FIELD_ID', 'nosto_tagging_content_type_image_field_id');

define('UC_NOSTO_TAGGING_PRODUCT_IN_STOCK', 'InStock');
define('UC_NOSTO_TAGGING_PRODUCT_OUT_OF_STOCK', 'OutOfStock');

define('UC_NOSTO_TAGGING_NOSTO_ELEMENT_ID_PREFIX', 'nosto-');
define('UC_NOSTO_TAGGING_BLOCK_ELEMENT_PREFIX', 'element_');
define('UC_NOSTO_TAGGING_CONFIG_KEY_PREFIX', 'nosto_tagging_');

/**
 * Implements hook_init().
 *
 * Perform setup tasks for non-cached page requests.
 *
 * Adds the Nosto embed script.
 */
function uc_nosto_tagging_init() {
  $server_address = variable_get(UC_NOSTO_TAGGING_CONFIG_KEY_SERVER_ADDRESS, '');
  $account_name = variable_get(UC_NOSTO_TAGGING_CONFIG_KEY_ACCOUNT_NAME, '');

  if (!empty($server_address) && !empty($account_name)) {
    $path = drupal_get_path('module', 'uc_nosto_tagging');
    drupal_add_js($path . '/js/embed.js', array(
      'type' => 'file',
      'scope' => 'header',
      'group' => JS_DEFAULT,
      'every_page' => TRUE,
    ));

    $server_address = check_plain($server_address);
    $account_name = check_plain($account_name);
    $js = 'embedjs(\'' . $server_address . '\', \'/include/' . $account_name . '\');';
    drupal_add_js($js, array(
      'type' => 'inline',
      'scope' => 'header',
      'group' => JS_DEFAULT,
      'every_page' => TRUE,
    ));
  }
}

/**
 * Implements hook_permission().
 *
 * Defines permissions for the module.
 *
 * Adds a permission entry for the module admin section.
 */
function uc_nosto_tagging_permission() {
  return array(
    'administer nosto tagging' => array(
      'title' => t('Administer Nosto Tagging'),
      'description' => t('Perform administration tasks for the module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Adds menu link for the module configuration page.
 */
function uc_nosto_tagging_menu() {
  $items = array();

  $items['admin/config/services/nostotagging'] = array(
    'title' => 'Nosto Tagging',
    'description' => 'Configure Nosto Tagging.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_uc_nosto_tagging_admin'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer nosto tagging'),
    'file' => 'includes/uc_nosto_tagging.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_block_info().
 *
 * Defines all tagging- and element-blocks used by Nosto.
 *
 * The blocks are not given any default region and needs
 * to be manually assigned to the correct pages.
 * Instructions are included in the module README.txt file.
 */
function uc_nosto_tagging_block_info() {
  $blocks = array();

  $blocks['tag_product'] = array(
    'info' => t('Nosto Tagging: tag: product'),
  );

  $blocks['tag_category'] = array(
    'info' => t('Nosto Tagging: tag: category'),
  );

  $blocks['tag_cart'] = array(
    'info' => t('Nosto Tagging: tag: cart'),
  );

  $blocks['tag_order'] = array(
    'info' => t('Nosto Tagging: tag: order'),
  );

  $blocks['tag_customer'] = array(
    'info' => t('Nosto Tagging: tag: customer'),
  );

  $blocks['element_page_product1'] = array(
    'info' => t('Nosto Tagging: element: product page 1'),
  );

  $blocks['element_page_product2'] = array(
    'info' => t('Nosto Tagging: element: product page 2'),
  );

  $blocks['element_page_product3'] = array(
    'info' => t('Nosto Tagging: element: product page 3'),
  );

  $blocks['element_page_category1'] = array(
    'info' => t('Nosto Tagging: element: category page 1'),
  );

  $blocks['element_page_category2'] = array(
    'info' => t('Nosto Tagging: element: category page 2'),
  );

  $blocks['element_page_search1'] = array(
    'info' => t('Nosto Tagging: element: search page 1'),
  );

  $blocks['element_page_search2'] = array(
    'info' => t('Nosto Tagging: element: search page 2'),
  );

  $blocks['element_page_cart1'] = array(
    'info' => t('Nosto Tagging: element: cart page 1'),
  );

  $blocks['element_page_cart2'] = array(
    'info' => t('Nosto Tagging: element: cart page 2'),
  );

  $blocks['element_page_cart3'] = array(
    'info' => t('Nosto Tagging: element: cart page 3'),
  );

  $blocks['element_page_top'] = array(
    'info' => t('Nosto Tagging: element: page top'),
  );

  $blocks['element_page_footer'] = array(
    'info' => t('Nosto Tagging: element: page footer'),
  );

  $blocks['element_column_left'] = array(
    'info' => t('Nosto Tagging: element: left column'),
  );

  $blocks['element_column_right'] = array(
    'info' => t('Nosto Tagging: element: right column'),
  );

  $blocks['element_page_top_sellers'] = array(
    'info' => t('Nosto Tagging: element: top sellers page'),
    'status' => 1,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'top-sellers',
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Render logic for blocks in this module.
 */
function uc_nosto_tagging_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    // Product tagging block.
    case 'tag_product':
      $block['content'] = array(
        '#theme' => 'nosto_product',
      );
      break;

    // Category tagging block.
    case 'tag_category':
      $block['content'] = array(
        '#theme' => 'nosto_category',
      );
      break;

    // Cart tagging block.
    case 'tag_cart':
      $block['content'] = array(
        '#theme' => 'nosto_cart',
      );
      break;

    // Order tagging block.
    case 'tag_order':
      $block['content'] = array(
        '#theme' => 'nosto_order',
      );
      break;

    // Customer tagging block.
    case 'tag_customer':
      global $user;
      // Only logged in users.
      if ((bool) $user->uid) {
        $block['content'] = array(
          '#theme' => 'nosto_customer',
          '#user' => $user,
        );
      }
      break;

    // All "Nosto Element" blocks.
    default:
      $block['content'] = array(
        '#theme' => 'nosto_element',
        '#nosto_id' => _uc_nosto_tagging_get_nosto_element_id($delta),
      );
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 *
 * Register theme implementations for this modules blocks.
 */
function uc_nosto_tagging_theme($existing, $type, $theme, $path) {
  $theme_path = drupal_get_path('module', 'uc_nosto_tagging') . '/theme';

  return array(
    'nosto_product' => array(
      'variables' => array(
        'nosto_product' => NULL,
      ),
      'template' => 'block--uc_nosto_tagging-nosto-product',
      'path' => $theme_path,
    ),
    'nosto_category' => array(
      'variables' => array(
        'category_path' => NULL,
      ),
      'template' => 'block--uc_nosto_tagging-nosto-category',
      'path' => $theme_path,
    ),
    'nosto_cart' => array(
      'variables' => array(
        'nosto_line_items' => NULL,
      ),
      'template' => 'block--uc_nosto_tagging-nosto-cart',
      'path' => $theme_path,
    ),
    'nosto_order' => array(
      'variables' => array(
        'nosto_order' => NULL,
      ),
      'template' => 'block--uc_nosto_tagging-nosto-order',
      'path' => $theme_path,
    ),
    'nosto_customer' => array(
      'variables' => array(
        'user' => NULL,
      ),
      'template' => 'block--uc_nosto_tagging-nosto-customer',
      'path' => $theme_path,
    ),
    'nosto_element' => array(
      'variables' => array(
        'nosto_id' => NULL,
      ),
      'template' => 'block--uc_nosto_tagging-nosto-element',
      'path' => $theme_path,
    ),
  );
}

/**
 * Preprocessor for the nosto_product tagging block template.
 *
 * Gathers all data for the product currently being viewed and
 * includes the data object in the template variables.
 *
 * @param array $variables
 *   The variables passed to the template.
 */
function uc_nosto_tagging_preprocess_nosto_product(&$variables) {
  $node = _uc_nosto_tagging_get_current_node();

  if ($node && isset($node->type) && uc_product_is_product($node)) {
    $price = _uc_nosto_tagging_get_product_price($node);
    $list_price = _uc_nosto_tagging_get_product_price($node, 'list_price');

    $nosto_product = new stdClass();
    $nosto_product->page_url = url('node/' . $node->nid, array('absolute' => TRUE));
    $nosto_product->product_id = $node->nid;
    $nosto_product->name = $node->title;
    $nosto_product->image_url = _uc_nosto_tagging_get_product_image_url($node);
    $nosto_product->price = _uc_nosto_tagging_currency_format($price);
    $nosto_product->price_currency_code = _uc_nosto_tagging_get_currency_code();
    $nosto_product->availability = _uc_nosto_tagging_get_product_availability($node);
    $nosto_product->categories = _uc_nosto_tagging_get_product_categories($node);
    $nosto_product->description = _uc_nosto_tagging_get_product_description($node);
    $nosto_product->list_price = _uc_nosto_tagging_currency_format($list_price);
    $nosto_product->brand = _uc_nosto_tagging_get_product_brand($node);
    $nosto_product->date_published = _uc_nosto_tagging_date_format($node->created);

    $variables['nosto_product'] = $nosto_product;
  }
}

/**
 * Preprocessor for the nosto_category tagging block template.
 *
 * Gathers all data for the category currently being viewed and
 * includes the data in the template variables.
 *
 * @param array $variables
 *   The variables passed to the template.
 */
function uc_nosto_tagging_preprocess_nosto_category(&$variables) {
  $vid = (int) variable_get(UC_NOSTO_TAGGING_CONFIG_KEY_CATEGORY_VOCABULARY_ID, 0);
  $vocabulary = taxonomy_vocabulary_load($vid);

  if ($vocabulary) {
    $taxonomy_term = _uc_nosto_tagging_get_current_taxonomy_term();
    if ($taxonomy_term && (int) $taxonomy_term->vid === (int) $vocabulary->vid) {
      $category_path = _uc_nosto_tagging_build_category_string($taxonomy_term);
      if (!empty($category_path)) {
        $variables['category_path'] = $category_path;
      }
    }
  }
}

/**
 * Preprocessor for the nosto_cart tagging block template.
 *
 * Builds a list on line item objects from the shopping cart
 * and includes the list in the template variables.
 *
 * @param array $variables
 *   The variables passed to the template.
 */
function uc_nosto_tagging_preprocess_nosto_cart(&$variables) {
  $cart_content = uc_cart_get_contents();

  if (!empty($cart_content)) {
    $currency_code = _uc_nosto_tagging_get_currency_code();
    $nosto_line_items = array();

    $cart_items = entity_view('uc_cart_item', $cart_content, 'cart');
    if (!empty($cart_items['uc_cart_item'])) {
      foreach (element_children($cart_items['uc_cart_item']) as $key) {
        $cart_item = $cart_items['uc_cart_item'][$key];
        if (_uc_nosto_tagging_validate_nosto_line_item($cart_item)) {
          $entity = $cart_item['#entity'];
          $unit_price = _uc_nosto_tagging_get_product_price($entity);
          $nosto_line_item = new stdClass();
          $nosto_line_item->product_id = $entity->nid;
          $nosto_line_item->quantity = (int) $cart_item['qty']['#default_value'];
          $nosto_line_item->title = $entity->title;
          $nosto_line_item->unit_price = _uc_nosto_tagging_currency_format($unit_price);
          $nosto_line_item->currency_code = $currency_code;
          $nosto_line_items[] = $nosto_line_item;
        }
      }
    }

    if (!empty($nosto_line_items)) {
      $variables['nosto_line_items'] = $nosto_line_items;
    }
  }
}

/**
 * Preprocessor for the nosto_order tagging block template.
 *
 * Gathers all data for the completed order and includes the data
 * in the template variables.
 *
 * @param array $variables
 *   The variables passed to the template.
 */
function uc_nosto_tagging_preprocess_nosto_order(&$variables) {
  if (isset($_SESSION['uc_nosto_tagging']['uc_order_id'])) {
    $order = uc_order_load((int) $_SESSION['uc_nosto_tagging']['uc_order_id']);
    if ($order) {
      global $user;

      if ($user && (int) $user->uid === (int) $order->uid) {
        $nosto_order = new stdClass();
        $nosto_order->order_number = $order->order_id;
        $nosto_order->user = $user;
        $nosto_order->purchased_items = array();

        $order_products = entity_view('uc_order_product', $order->products, 'cart');
        if (!empty($order_products['uc_order_product'])) {
          foreach (element_children($order_products['uc_order_product']) as $key) {
            $order_product = $order_products['uc_order_product'][$key];
            if (_uc_nosto_tagging_validate_nosto_line_item($order_product)) {
              $entity = $order_product['#entity'];
              $unit_price = _uc_nosto_tagging_get_product_price($entity, 'price', FALSE);
              $nosto_order->purchased_items[] = (object) array(
                'product_id' => $entity->nid,
                'quantity' => (int) $order_product['qty']['#default_value'],
                'name' => $entity->title,
                'unit_price' => _uc_nosto_tagging_currency_format($unit_price),
                'price_currency_code' => $order->currency,
              );
            }
          }
        }

        foreach ($order->line_items as $line_item) {
          if (isset($line_item['type'])) {
            switch ($line_item['type']) {
              case 'shipping':
              case 'tax':
              case 'coupon':
                $nosto_order->purchased_items[] = (object) array(
                  'product_id' => -1,
                  'quantity' => 1,
                  'name' => isset($line_item['title']) ? $line_item['title'] : $line_item['type'],
                  'unit_price' => _uc_nosto_tagging_currency_format($line_item['amount']),
                  'price_currency_code' => $order->currency,
                );
                break;

              default:
                break;
            }
          }
        }

        if (!empty($nosto_order->purchased_items)) {
          $variables['nosto_order'] = $nosto_order;
        }
      }
    }

    unset($_SESSION['uc_nosto_tagging']['uc_order_id']);
  }
}

/**
 * Implements hook_uc_checkout_complete().
 *
 * We need to store the completed order id to the users
 * session, in order to tag the order data in our block
 * that should be shown on the checkout complete page.
 *
 * @see uc_cart_complete_sale()
 */
function uc_nosto_tagging_uc_checkout_complete($order) {
  if (is_object($order)) {
    $_SESSION['uc_nosto_tagging']['uc_order_id'] = (int) $order->order_id;
  }
}

/**
 * Implements hook_block_configure().
 *
 * Adds the "Nosto ID" config field to all "Nosto Element"
 * blocks in this module.
 */
function uc_nosto_tagging_block_configure($delta = '') {
  $form = array();

  if (_uc_nosto_tagging_is_nosto_element_block($delta)) {
    $form['nosto_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Nosto ID'),
      '#description' => t('Override the default ID for the block. It is used as the identifier when configuring the Nosto marketing automation service.'),
      '#default_value' => _uc_nosto_tagging_get_nosto_element_id($delta),
      '#element_validate' => array('_uc_nosto_tagging_block_validate'),
    );
  }

  return $form;
}

/**
 * Implements hook_block_save().
 *
 * Saves the additional "nosto_id" value for the
 * "Nosto Element" blocks.
 */
function uc_nosto_tagging_block_save($delta = '', $edit = array()) {
  if (isset($edit['nosto_id']) && !empty($delta)) {
    variable_set(UC_NOSTO_TAGGING_CONFIG_KEY_PREFIX . $delta . '_id', $edit['nosto_id']);
  }
}

/**
 * Validates the given item.
 *
 * Checks that the item has the required properties for the
 * cart/order tagging.
 *
 * @param array $item
 *   The item to validate.
 *
 * @return bool
 *   Whether the the given item is valid or not.
 */
function _uc_nosto_tagging_validate_nosto_line_item($item) {
  if (!is_array($item)) {
    return FALSE;
  }

  $has_element_children = (count(element_children($item)) > 0);
  $has_qty = !empty($item['qty']['#default_value']);
  $has_entity = isset($item['#entity']) && is_object($item['#entity']);

  if (isset($item['#entity']->type)) {
    $entity_is_product = uc_product_is_product($item['#entity']);
  }
  elseif (isset($item['#entity']->nid) && $item['#entity']->nid > 0) {
    $entity_is_product = uc_product_is_product((int) $item['#entity']->nid);
  }
  else {
    $entity_is_product = FALSE;
  }

  return ($has_element_children && $has_qty && $has_entity && $entity_is_product);
}

/**
 * Getter for "currently viewed" node.
 *
 * Uses the GET params to load it.
 *
 * @return object|bool
 *   The node object or false.
 */
function _uc_nosto_tagging_get_current_node() {
  if (arg(0) && arg(0) === 'node' && arg(1) && ctype_digit((string) arg(1))) {
    return node_load(arg(1));
  }

  return FALSE;
}

/**
 * Getter for the "currently viewed" taxonomy term.
 *
 * This will work for both the default taxonomy pages where
 * the system url is "taxonomy/term/%", and for custom views
 * where the taxonomy id or name is present in the url.
 *
 * @return object|bool
 *   The taxonomy term object or false.
 */
function _uc_nosto_tagging_get_current_taxonomy_term() {
  $taxonomy_term = FALSE;

  $router_path = menu_tab_root_path();
  $q = isset($_GET['q']) ? $_GET['q'] : FALSE;

  if ($router_path && $q) {
    $q_parts = explode('/', $q);
    // Skip node paths.
    if (isset($q_parts[0]) && $q_parts[0] !== 'node') {
      // Check the router path for a wildcard "%" character.
      $router_path_parts = explode('/', $router_path);
      $i = array_search('%', $router_path_parts);

      // No wildcard found.
      if ($i === FALSE) {
        // Assume the last item in the query path is the taxonomy.
        $taxonomy_term_id = array_pop($q_parts);
      }
      // Otherwise match the position of the wildcard to a position
      // among the query params.
      elseif (isset($q_parts[$i])) {
        $taxonomy_term_id = $q_parts[$i];
      }
      // No taxonomy found.
      else {
        $taxonomy_term_id = FALSE;
      }

      if ($taxonomy_term_id !== FALSE) {
        // First check if the item is the taxonomy term id.
        if (ctype_digit((string) $taxonomy_term_id)) {
          $taxonomy_term = taxonomy_term_load($taxonomy_term_id);
        }
        // Otherwise assume it is the taxonomy term name.
        else {
          $taxonomy_terms = taxonomy_get_term_by_name($taxonomy_term_id);
          $taxonomy_term = reset($taxonomy_terms);
        }
      }
    }
  }

  return $taxonomy_term;
}

/**
 * Getter for the product image url.
 *
 * If there are many images present, then the first one is used.
 *
 * @param object $node
 *   The product node.
 *
 * @return string
 *   The url.
 *
 * @see uc_nosto_tagging_preprocess_nosto_product()
 */
function _uc_nosto_tagging_get_product_image_url($node) {
  $image_url = '';

  $field_id = (int) variable_get(UC_NOSTO_TAGGING_CONFIG_KEY_CONTENT_TYPE_IMAGE_FIELD_ID, 0);
  $field_name = _uc_nosto_tagging_get_field_name_by_id($field_id);
  if (!empty($field_name)) {
    $field_items = field_get_items('node', $node, $field_name);
    if (is_array($field_items) && isset($field_items[0]['uri'])) {
      $image_url = file_create_url($field_items[0]['uri']);
    }
  }

  return $image_url;
}

/**
 * Getter for a product price including taxes.
 *
 * Calculating monetary values as floats is not the correct way to do it,
 * due to the lack of precision in floating point. We do it here anyway
 * because Ubercart does it internally, and changing it here will only
 * cause inconsistencies.
 *
 * @param object $node
 *   The product node.
 *
 * @param string $attribute
 *   The node attribute containing the base price to apply tax to.
 *
 * @param bool $include_tax
 *   If taxes should be included in the price.
 *
 * @return float
 *   The price including tax if applicable.
 */
function _uc_nosto_tagging_get_product_price($node, $attribute = 'price', $include_tax = TRUE) {
  $price = 0;
  $tax_amount = 0;

  if (is_object($node)) {
    if (!empty($node->products)) {
      foreach ($node->products as $product) {
        $price += _uc_nosto_tagging_get_product_price($product, $attribute, $include_tax);
      }
    }
    elseif (isset($node->{$attribute})) {
      if (!($node->{$attribute} > 0) && isset($node->sell_price)) {
        $price = $node->sell_price;
      }
      else {
        $price = $node->{$attribute};
      }

      if ($include_tax && $price > 0 && module_exists('uc_taxes')) {
        foreach (uc_taxes_filter_rates(NULL) as $tax) {
          if ($tax->display_include) {
            $taxable = uc_taxes_apply_item_tax($node, $tax);
            if ($taxable !== FALSE && $taxable > 0) {
              $tax_amount += $price * $tax->rate;
            }
          }
        }
      }
    }
  }

  return ($price + $tax_amount);
}

/**
 * Gets a field name based on its id.
 *
 * @param int $field_id
 *   The filed id to get the name for.
 *
 * @return string
 *   The field name or empty string.
 */
function _uc_nosto_tagging_get_field_name_by_id($field_id) {
  $field_name = '';

  if ($field_id > 0) {
    $field_info = field_info_field_by_id($field_id);
    if (isset($field_info['field_name'])) {
      $field_name = $field_info['field_name'];
    }
  }

  return $field_name;
}

/**
 * Getter for the primary currency code used in the store.
 *
 * @return string
 *   The currency ISO code.
 */
function _uc_nosto_tagging_get_currency_code() {
  return variable_get('uc_currency_code', '');
}

/**
 * Currency formatter for prices used in Nosto tagging data.
 *
 * @param int $amount
 *   The amount to format.
 *
 * @return string
 *   The formatted price string.
 */
function _uc_nosto_tagging_currency_format($amount) {
  return number_format($amount, 2, '.', '');
}

/**
 * Date formatter for date strings used in Nosto tagging data.
 *
 * Output format is "Y-m-d".
 *
 * @param string|int $timestamp
 *   The timestamp to format.
 *
 * @return string
 *   The formatted date.
 */
function _uc_nosto_tagging_date_format($timestamp) {
  // If the time stamp is not all digits.
  if (!ctype_digit((string) $timestamp)) {
    // Then we probably want to convert it,
    // as it is most likely not a time stamp at all.
    $timestamp = strtotime($timestamp);
  }
  return date('Y-m-d', $timestamp);
}

/**
 * Getter for a products availability.
 *
 * @param object $node
 *   The product node.
 *
 * @return string
 *   The availability string.
 *
 * @see uc_nosto_tagging_preprocess_nosto_product()
 */
function _uc_nosto_tagging_get_product_availability($node) {
  if (module_exists('uc_stock')) {
    $stock = uc_stock_level($node->model);
    if ($stock === FALSE || (int) $stock > 0) {
      return UC_NOSTO_TAGGING_PRODUCT_IN_STOCK;
    }
    else {
      return UC_NOSTO_TAGGING_PRODUCT_OUT_OF_STOCK;
    }
  }
  else {
    return UC_NOSTO_TAGGING_PRODUCT_IN_STOCK;
  }
}

/**
 * Gets a list of categories the product belongs to.
 *
 * The items in the list are formatted to include the
 * complete path for each taxonomy term.
 *
 * @param object $node
 *   The product node.
 *
 * @return array
 *   List of formatted category strings the product belongs to.
 *
 * @see uc_nosto_tagging_preprocess_nosto_product()
 */
function _uc_nosto_tagging_get_product_categories($node) {
  $categories = array();

  $field_id = (int) variable_get(UC_NOSTO_TAGGING_CONFIG_KEY_CATEGORY_FIELD_ID, 0);
  $field_name = _uc_nosto_tagging_get_field_name_by_id($field_id);

  if (!empty($field_name)) {
    $field_items = field_get_items('node', $node, $field_name);
    if (is_array($field_items) && !empty($field_items)) {
      foreach ($field_items as $item) {
        if (isset($item['taxonomy_term']) && is_object($item['taxonomy_term'])) {
          $categories[] = _uc_nosto_tagging_build_category_string($item['taxonomy_term']);
        }
      }
    }
  }

  return $categories;
}

/**
 * Builds a category string for tagging blocks.
 *
 * The category string is the complete path of taxonomy
 * terms up to the given term.
 *
 * All terms are separated with a directory separator and the
 * string also starts with one.
 *
 * @param object $taxonomy_term
 *   The taxonomy term object to build the category string from.
 *
 * @return string
 *   The formatted category string string.
 */
function _uc_nosto_tagging_build_category_string($taxonomy_term) {
  $data = array();

  if (isset($taxonomy_term->tid)) {
    $parent_taxonomy_terms = taxonomy_get_parents($taxonomy_term->tid);
    foreach ($parent_taxonomy_terms as $parent_taxonomy_term) {
      $data[] = $parent_taxonomy_term->name;
    }
    $data[] = $taxonomy_term->name;
  }

  if (!empty($data)) {
    return DIRECTORY_SEPARATOR . implode(DIRECTORY_SEPARATOR, $data);
  }
  else {
    return '';
  }
}

/**
 * Gets the brand name the product belongs to.
 *
 * The brand is a taxonomy term found in the product's
 * display context.
 *
 * @param object $node
 *   The product node.
 *
 * @return string
 *   The brand name, or empty string.
 *
 * @see uc_nosto_tagging_preprocess_nosto_product()
 */
function _uc_nosto_tagging_get_product_brand($node) {
  $brand = '';

  $field_id = (int) variable_get(UC_NOSTO_TAGGING_CONFIG_KEY_BRAND_FIELD_ID, 0);
  $field_name = _uc_nosto_tagging_get_field_name_by_id($field_id);

  if (!empty($field_name)) {
    $field_items = field_get_items('node', $node, $field_name);
    if (is_array($field_items) && !empty($field_items)) {
      $item = reset($field_items);
      if (isset($item['taxonomy_term']) && is_object($item['taxonomy_term'])) {
        $brand = $item['taxonomy_term']->name;
      }
    }
  }

  return $brand;
}

/**
 * Getter for the product description.
 *
 * @param object $node
 *   The product node.
 *
 * @return string
 *   The description.
 */
function _uc_nosto_tagging_get_product_description($node) {
  $field_items = field_get_items('node', $node, 'body');
  return isset($field_items[0]['value']) ? (string) $field_items[0]['value'] : '';
}

/**
 * Builds an id string for a "Nosto Element".
 *
 * The id is extracted from the block delta if none is
 * already stored in the database.
 *
 * @param string $delta
 *   The block delta string.
 *
 * @return string
 *   The built id string.
 */
function _uc_nosto_tagging_get_nosto_element_id($delta = '') {
  // First build a default id.
  // Prefix the id.
  $default_id = UC_NOSTO_TAGGING_NOSTO_ELEMENT_ID_PREFIX;
  // Append everything after block element prefix.
  $length = strlen(UC_NOSTO_TAGGING_BLOCK_ELEMENT_PREFIX);
  $default_id .= substr($delta, $length);
  // And replace all underscores with hyphens.
  $default_id = str_replace('_', '-', $default_id);
  // Then get any stored value and use the default as fallback.
  return variable_get(UC_NOSTO_TAGGING_CONFIG_KEY_PREFIX . $delta . '_id', $default_id);
}

/**
 * Validates the custom "node_id" parameter from the block configure form.
 *
 * Must begin with a letter (a-z), and may be followed by any number of
 * letters (a-z), digits (0-9), hyphens ('-'), underscores ('_'),
 * colons (':'), and periods ('.').
 *
 * @param array $element
 *   The element to validate.
 */
function _uc_nosto_tagging_block_validate($element) {
  if (isset($element['#value'])) {
    if (!preg_match('@^[A-Za-z][A-Za-z0-9-_:.]+$@', $element['#value'])) {
      form_set_error('nosto_id', t('Invalid Nosto ID. Must begin with a letter (a-z), and may be followed by any number of letters (a-z), digits (0-9), hyphens ("-"), underscores ("_"), colons (":"), and periods (".").'));
    }
  }
}

/**
 * Checks if the block delta is for a "Nosto Element" block.
 *
 * The delta needs to start with "element_" in order to be a
 * valid "Nosto Element".
 *
 * @param string $delta
 *   The block delta string.
 *
 * @return bool
 *   If it is valid.
 */
function _uc_nosto_tagging_is_nosto_element_block($delta = '') {
  $length = strlen(UC_NOSTO_TAGGING_BLOCK_ELEMENT_PREFIX);
  return substr($delta, 0, $length) === UC_NOSTO_TAGGING_BLOCK_ELEMENT_PREFIX;
}
