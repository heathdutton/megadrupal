<?php

define('MENUPOLY_EXPAND_ALL', 1);
define('MENUPOLY_EXPAND_ACTIVE', 2);
define('MENUPOLY_EXPAND_EXPANDED', 4);

define('MENUPOLY_FOLLOW_SIBLINGS', 1);
define('MENUPOLY_FOLLOW_CHILDREN', 2);

/**
 * Implements hook_theme().
 */
function menupoly_theme(&$existing) {
  return menupoly('info')->hook_theme($existing);
}

/**
 * Implements hook_block_info()
 */
function menupoly_block_info() {
  return menupoly('blocks')->hook_block_info();
}

/**
 * Implements hook_block_view()
 */
function menupoly_block_view($delta = '') {
  return menupoly('blocks')->hook_block_view($delta);
}

/**
 * Render a menu tree defined by a config array.
 *
 * @param array $settings
 *
 * @return string
 *   Rendered HTML.
 */
function menupoly_view(array $settings) {
  $render_array = menupoly('main')->settingsToRenderArray($settings);
  return render($render_array);
}

/**
 * Default theme implementation for 'menupoly'.
 */
function theme_menupoly(array $vars) {
  return menupoly('main')->settingsToHtml($vars['menupoly']);
}

/**
 * Implements hook_preprocess_menupoly()
 */
function menupoly_preprocess_menupoly(&$vars) {
  if (!empty($vars['menupoly']['menu_theme'])) {
    $menu_theme = $vars['menupoly']['menu_theme'];
    if (method_exists($menu_theme, 'preprocess')) {
      $menu_theme->preprocess($vars);
    }
  }
}

/**
 * Implements hook_menupoly()
 *
 * This is used to define two of the most frequently used blocks:
 * - a top-level dropdown menu
 * - a level-1 sidebar menu.
 */
function menupoly_menupoly() {
  $menu_name = variable_get('menu_main_links_source', 'main-menu');
  if (empty($menu_name)) {
    // No default menu configured.
    return NULL;
  }
  return array(
    'topnav' => array(
      'menu_name' => $menu_name,
      'expand' => MENUPOLY_EXPAND_ALL,
    ),
  );
}

/**
 * Get a service object from the registry/cache.
 * Services are lazy-created first time you need them.
 *
 * @param string $key
 *   Identifier of the service within the registry.
 *   The menupoly_ServiceFactory should have a method with the same name.
 *
 * @return menupoly_ServiceCache|mixed
 */
function menupoly($key = NULL) {
  static $cache;
  if (!isset($cache)) {
    $factory = new menupoly_ServiceFactory();
    $cache = new menupoly_ServiceCache($factory);
  }
  return isset($key) ? $cache->get($key) : $cache;
}
