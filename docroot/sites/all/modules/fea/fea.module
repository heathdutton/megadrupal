<?php
/**
 * Implements hook_menu().
 */
function fea_menu() {
  $items = array();

  $items['admin/config/user-interface/fea'] = array(
    'title' => 'Form Element Access',
    'description' => 'Administer FEA permissions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fea_access_form'),
    'access arguments' => array('administer fea settings'),
    'file' => 'fea.admin.inc',
  );

  $items['admin/config/user-interface/fea/access'] = array(
    'title' => 'Access',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  ) + $items['admin/config/user-interface/fea'];

  $items['admin/config/user-interface/fea/settings'] = array(
    'title' => 'Settings',
    'description' => 'Administer FEA settings',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fea_settings_form'),
    'access arguments' => array('administer fea settings'),
    'file' => 'fea.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function fea_permission() {
  return array(
    'bypass fea filtering' =>  array(
      'title' => t('Bypass filtering'),
      'description' => t('Users with this permission bypass all rules set by FEA.'),
    ),
    'administer fea settings' =>  array(
      'title' => t('Administer Form Element Access'),
      'description' => t('Perform administration tasks for the FEA module.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function fea_form_alter(&$form, &$form_state, $form_id) {
  $form_ids = _fea_get_form_ids();

  if (in_array(_fea_safe_form_id($form_id), array_keys($form_ids))) {
    $children = element_children($form);
    $new_elements = $parents = array();
    _fea_filter_form($form_id, $form, $children, $parents, $new_elements);
    if (variable_get('fea__index_new_elements', TRUE) && !empty($new_elements)) {
      $config = $form_ids[_fea_safe_form_id($form_id)];
      $config['elements'] = array_merge($config['elements'], $new_elements);
      variable_set(_fea_safe_form_id($form_id), $config);
      if (user_access('administer fea settings')) {
        drupal_set_message(format_plural(
          count($new_elements),
          'Indexed 1 new form element.',
          'Indexed @count new form elements.'
        ));
      }
    }
  }

  // Display administration messages.
  if (user_access('administer fea settings') && variable_get('fea__display_form_id', FALSE)) {
    if (in_array($form_id, fea_get_form_id_blacklist())) {
      drupal_set_message(t('The form id %form_id is blacklisted and can\'t be added to the FEA settings.', array(
        '%form_id' => $form_id,
      )), $type = 'status', $repeat = FALSE);
    }
    elseif (!in_array(_fea_safe_form_id($form_id), array_keys($form_ids))) {
      $destination = drupal_get_destination();
      drupal_set_message(t('Form id %form_id. !link.', array(
        '%form_id' => $form_id,
        '!link' => l(t('Add this form to the FEA settings'), 'admin/config/user-interface/fea/settings', array('query' => array(
          'add' => $form_id,
          'destination' => $destination['destination'],
        ))),
      )), $type = 'status', $repeat = FALSE);
    }
    else {
      drupal_set_message(t('Form id %form_id is already added to the FEA settings. !link.', array(
        '%form_id' => $form_id,
        '!link' => l(t('Administer permissions'), 'admin/config/user-interface/fea', array('query' => array(
          'add' => $form_id,
          'destination' => current_path(),
        ))),
      )), $type = 'status', $repeat = FALSE);
    }
  }
}

/**
 * Recursive form element filter.
 */
function _fea_filter_form($form_id, &$parent, &$children, &$parents, &$new_elements) {
  global $user;
  $child_whitelist = array('form_build_id', 'form_token', 'form_id');
  $type_blacklist = array('value');
  $hide_empty = array('fieldset');
  $config = variable_get(_fea_safe_form_id($form_id));

  foreach ($children as $child) {
    if (in_array($child, $child_whitelist)) {
      continue;
    }

    // Descend one level deeper?
    $grandchildren = element_children($parent[$child]);
    if (!empty($grandchildren)) {
      $parents[] = $child;
      _fea_filter_form($form_id, $parent[$child], $grandchildren, $parents, $new_elements);
    }

    if (!isset($parent[$child]['#access']) && isset($parent[$child]['#type']) && !in_array($parent[$child]['#type'], $type_blacklist)) {
      $tree = $parents;
      $tree[] = $child;
      $key = implode('|', $tree);

      // Check if this child is indexed.
      if (!isset($config['elements'][$key])) {
        $new_elements[$key] = $config['elements'][$key] = array(
          'tree' => $tree,
          'type' => $parent[$child]['#type'],
          'roles' => array()
        );
      }

      // Check and set access.
      if (user_access('bypass fea filtering')) {
        continue;
      }
      $access = array_intersect($user->roles, $config['elements'][$key]['roles']);

      // Check for empty elements.
      if (in_array($parent[$child]['#type'], $hide_empty) && !_fea_element_has_visible_children($parent[$child])) {
        $parent[$child]['#access'] = FALSE;
      }
      else {
        $parent[$child]['#access'] = !empty($access) != $config['invert'];
      }
    }
  }

  // We're moving up a level; pop the parent!
  array_pop($parents);
}

/**
 * Recursive function to check if an element has children with access.
 */
function _fea_element_has_visible_children($element) {
  foreach (element_children($element) as $child) {
    if (_fea_element_has_visible_children($element[$child])) {
      return TRUE;
    }
  }

  return isset($element['#access']) && $element['#access'];
}

/**
 * Create safe variable names that also work on weird stuff like Suhosin. Drupal
 * also has a limit of 128 chars.
 */
function _fea_safe_form_id($form_id) {
  $max_var_length = variable_get('fea_max_var_length', 128);
  $form_id = 'fea__form_id__' . $form_id;

  if (drupal_strlen($form_id) > $max_var_length) {
    $form_id = drupal_substr($form_id, 0, $max_var_length - 5);
    $form_id .= '|' . drupal_substr(md5($form_id), 0, 4);
  }

  return $form_id;
}

/**
 * Strip fea prefix from a form id.
 */
function _fea_strip_safe_form_id($form_id) {
  return drupal_substr($form_id, 14);
}

/**
 * Implements hook_module_implements_alter().
 */
function fea_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $group = $implementations['fea'];
    unset($implementations['fea']);
    $implementations['fea'] = $group;
  }
}

/**
 * Get all configured form ids.
 */
function _fea_get_form_ids() {
  $result = db_query("SELECT name, value FROM {variable} WHERE name LIKE 'fea\_\_form\_id\_\_%'");

  $form_ids = array();
  if ($result) {
    foreach ($result as $row) {
      $form_ids[$row->name] = unserialize($row->value);
    }
  }

  return $form_ids;
}

/**
 * Get all blacklisted form ids.
 */
function fea_get_form_id_blacklist() {
  $form_id_blacklist = array('fea_access_form');
  drupal_alter('fea_form_id_blacklist', $form_id_blacklist);
  return $form_id_blacklist;
}

/**
 * Implements hook_theme().
 */
function fea_theme() {
  return array(
    'fea_admin_form_table' => array(
      'render element' => 'form',
      'file' => 'fea.admin.inc',
    ),
  );
}
