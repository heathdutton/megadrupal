<?php

/**
 * @file
 * Defines a "embridge_field" Form API field a "asset" field for Field module.
 */

// Load all Field module hooks for EnterMedia Asset.
require_once './' . drupal_get_path('module', 'embridge_field') . '/embridge_field.field.inc';
require_once './' . drupal_get_path('module', 'embridge_field') . '/embridge_field_file.inc';


/**
 * Implements hook_help().
 */
function embridge_field_help($path, $arg) {
  switch ($path) {
    case 'admin/help#embridge_field':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The EnterMedia Asset Field module defines a <em>EnterMedia Asset</em> field type for the Field module, which lets you manage and validate uploaded EnterMedia asset attached to content on your site (see the <a href="@field-help">Field module help page</a> for more information about fields). For more information, see the online handbook entry for <a href="@embridge_field">embridge_field module</a>.', array('@field-help' => url('admin/help/field'), '@embridge_field' => 'http://drupal.org/handbook/modules/embridge_field')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Attaching EnterMedia asset fields to content') . '</dt>';
      $output .= '<dd>' . t('The embridge_field module allows users to attach EnterMedia assets to content (e.g., photos, video, etc.), when a <em>EnterMedia asset</em> field is added to a given content type using the <a href="@fieldui-help">Field UI module</a>. You can add validation options to your EnterMedia asset field, such as specifying a maximum embridge_field size and allowed embridge_field extensions.', array('@fieldui-help' => url('admin/help/field_ui'))) . '</dd>';
      $output .= '<dt>' . t('Managing EnterMedia asset locations') . '</dt>';
      $output .= '<dd>' . t("When you create an EnterMedia asset field, you can specify a directory where the EnterMedia assets will be stored in DAM.") . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function embridge_field_menu() {
  $items = array();

  $items['embridge_field/ajax'] = array(
    'page callback' => 'embridge_field_ajax_upload',
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('access content'),
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
  );
  $items['embridge_field/progress'] = array(
    'page callback' => 'embridge_field_ajax_progress',
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('access content'),
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_element_info().
 *
 * The managed embridge_field element may be used independently
 * anywhere in Drupal.
 */
function embridge_field_element_info() {
  $embridge_field_path = drupal_get_path('module', 'embridge_field');
  $types['managed_entermediaasset'] = array(
    '#input' => TRUE,
    '#process' => array('embridge_field_managed_embridge_field_process'),
    '#value_callback' => 'embridge_field_managed_embridge_field_value',
    '#element_validate' => array('embridge_field_managed_embridge_field_validate'),
    '#pre_render' => array('embridge_field_managed_embridge_field_pre_render'),
    '#theme' => 'embridge_field_managed_embridge_field',
    '#theme_wrappers' => array('form_element'),
    '#progress_indicator' => 'throbber',
    '#progress_message' => NULL,
    '#upload_validators' => array(),
    '#upload_location' => NULL,
    '#extended' => FALSE,
    '#attached' => array(
      'css' => array($embridge_field_path . '/embridge_field.css'),
      'js' => array($embridge_field_path . '/embridge_field.js'),
    ),
  );
  return $types;
}

/**
 * Implements hook_theme().
 */
function embridge_field_theme() {
  return array(
  // embridge_field.module.
    'embridge_field_link' => array(
      'variables' => array('entermediaasset' => NULL, 'rendition' => NULL, 'link_to_content' => NULL, 'entity' => NULL),
    ),
    'embridge_field_embed' => array(
      'variables' => array('entermediaasset' => NULL),
    ),
    'embridge_field_icon' => array(
      'variables' => array('entermediaasset' => NULL, 'display' => NULL),
    ),
    'embridge_field_managed_embridge_field' => array(
      'render element' => 'element',
    ),

  // embridge_field.field.inc.
    'embridge_field_widget' => array(
      'render element' => 'element',
    ),
    'embridge_field_widget_multiple' => array(
      'render element' => 'element',
    ),
    'embridge_field_formatter_table' => array(
      'variables' => array('items' => NULL),
    ),
    'embridge_field_upload_help' => array(
      'variables' => array('description' => NULL, 'upload_validators' => NULL),
    ),
  );
}

/**
 * Menu callback.
 *
 * Shared AJAX callback for embridge_field uploads and deletions.
 *
 * This rebuilds the form element for a particular field item. As long as the
 * form processing is properly encapsulated in the widget element the form
 * should rebuild correctly using FAPI without the need for additional callbacks
 * or processing.
 */
function embridge_field_ajax_upload() {
  $form_parents = func_get_args();
  $form_build_id = (string) array_pop($form_parents);

  if (empty($_POST['form_build_id']) || $form_build_id != $_POST['form_build_id']) {
    // Invalid request.
    drupal_set_message(t('An unrecoverable error occurred. The uploaded embridge_field likely exceeded the maximum embridge_field size (@size) that this server supports.', array('@size' => format_size(embridge_field_upload_max_size()))), 'error');
    $commands = array();
    $commands[] = ajax_command_replace(NULL, theme('status_messages'));
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  list($form, $form_state) = ajax_get_form();

  if (!$form) {
    // Invalid form_build_id.
    drupal_set_message(t('An unrecoverable error occurred. Use of this form has expired. Try reloading the page and submitting again.'), 'error');
    $commands = array();
    $commands[] = ajax_command_replace(NULL, theme('status_messages'));
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  // Get the current element and count the number of embridge_fields.
  $current_element = $form;
  foreach ($form_parents as $parent) {
    $current_element = $current_element[$parent];
  }
  $current_embridge_field_count = isset($current_element['#entermediaasset_upload_delta']) ? $current_element['#entermediaasset_upload_delta'] : 0;

  // Process user input. $form and $form_state are modified in the process.
  drupal_process_form($form['#form_id'], $form, $form_state);

  // Retrieve the element to be rendered.
  foreach ($form_parents as $parent) {
    $form = $form[$parent];
  }

  // Add the special AJAX class if a new embridge_field was added.
  if (isset($form['#entermediaasset_upload_delta']) && $current_embridge_field_count < $form['#entermediaasset_upload_delta']) {
    $form[$current_embridge_field_count]['#attributes']['class'][] = 'ajax-new-content';
  }
  else {
    // Otherwise just add the new content class on a placeholder.
    $form['#suffix'] .= '<span class="ajax-new-content"></span>';
  }

  $output = theme('status_messages') . drupal_render($form);
  $js = drupal_add_js();
  $settings = call_user_func_array('array_merge_recursive', $js['settings']['data']);

  $commands = array();
  $commands[] = ajax_command_replace(NULL, $output, $settings);
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Menu callback for upload progress.
 *
 * @param string $key
 *   The unique key for this upload process.
 */
function embridge_field_ajax_progress($key) {
  $progress = array(
    'message' => t('Starting upload...'),
    'percentage' => -1,
  );

  $implementation = embridge_field_progress_implementation();
  if ($implementation == 'uploadprogress') {
    $status = uploadprogress_get_info($key);
    if (isset($status['bytes_uploaded']) && !empty($status['bytes_total'])) {
      $progress['message'] = t('Uploading... (@current of @total)', array('@current' => format_size($status['bytes_uploaded']), '@total' => format_size($status['bytes_total'])));
      $progress['percentage'] = round(100 * $status['bytes_uploaded'] / $status['bytes_total']);
    }
  }
  elseif ($implementation == 'apc') {
    $status = apc_fetch('upload_' . $key);
    if (isset($status['current']) && !empty($status['total'])) {
      $progress['message'] = t('Uploading... (@current of @total)', array('@current' => format_size($status['current']), '@total' => format_size($status['total'])));
      $progress['percentage'] = round(100 * $status['current'] / $status['total']);
    }
  }

  drupal_json_output($progress);
}

/**
 * Determine the preferred upload progress implementation.
 *
 * @return string
 *   A string indicating which upload progress system is available. Either "apc"
 *   or "uploadprogress". If neither are available, returns FALSE.
 */
function embridge_field_progress_implementation() {
  static $implementation;
  if (!isset($implementation)) {
    $implementation = FALSE;

    // We prefer the PECL extension uploadprogress because it supports
    // multiple simultaneous uploads. APC only supports one at a time.
    if (extension_loaded('uploadprogress')) {
      $implementation = 'uploadprogress';
    }
    elseif (extension_loaded('apc') && ini_get('apc.rfc1867')) {
      $implementation = 'apc';
    }
  }
  return $implementation;
}

/**
 * Implements hook_file_delete().
 */
function embridge_field_file_delete($embridge_field) {
  // TODO: Remove references to a embridge_field that is in-use.
}

/**
 * Process function to expand the managed_embridge_field element type.
 *
 * Expands the embridge_field type to include Upload and Remove
 * buttons, as well as support for a default value.
 */
function embridge_field_managed_embridge_field_process($element, &$form_state, $form) {
  $aid = isset($element['#value']['aid']) ? $element['#value']['aid'] : 0;
  $instance = field_widget_instance($element, $form_state);
  $field = field_info_field($element['#field_name']);
  $catalog_id = $instance['settings']['asset_catalog'];
  $asset_type = $instance['settings']['asset_type'];
  $widget_type = empty($instance['settings']['widget_type']) ? 'both' : $instance['settings']['widget_type'];

  // Set some default element properties.
  $element['#progress_indicator'] = empty($element['#progress_indicator']) ? 'none' : $element['#progress_indicator'];
  $element['#entermediaasset'] = $aid ? embridge_field_asset_load($aid, $catalog_id) : FALSE;
  $element['#tree'] = TRUE;

  $ajax_settings = array(
    'path' => 'embridge_field/ajax/' . implode('/', $element['#array_parents']) . '/' . $form['form_build_id']['#value'],
    'wrapper' => $element['#id'] . '-ajax-wrapper',
    'effect' => 'fade',
    'progress' => array(
      'type' => $element['#progress_indicator'],
      'message' => $element['#progress_message'],
    ),
  );

  // Set up the buttons first since we need to check if they were clicked.
  $element['upload_button'] = array(
    '#name' => implode('_', $element['#parents']) . '_upload_button',
    '#type' => 'submit',
    '#value' => t('Upload'),
    '#validate' => array(),
    '#submit' => array('embridge_field_managed_embridge_field_submit'),
    '#limit_validation_errors' => array($element['#parents']),
    '#ajax' => $ajax_settings,
    '#weight' => -5,
  );
  // Only allow to upload when upload is enabled and user has the permission.
  if (!in_array($widget_type, array('both', 'upload')) || !user_access('allow entermedia asset upload')) {
    $element['upload_button']['#attributes'] = array('style' => 'display:none;');
  }

  $ajax_settings['progress']['type'] ? $ajax_settings['progress']['type'] == 'bar' : 'throbber';
  $ajax_settings['progress']['message'] = NULL;
  $ajax_settings['effect'] = 'none';
  $element['remove_button'] = array(
    '#name' => implode('_', $element['#parents']) . '_remove_button',
    '#type' => 'submit',
    '#value' => t('Remove'),
    '#validate' => array(),
    '#submit' => array('embridge_field_managed_embridge_field_submit'),
    '#limit_validation_errors' => array($element['#parents']),
    '#ajax' => $ajax_settings,
    '#weight' => -5,
  );

  // Only allow to search when search is enabled and user has the permission.
  if (in_array($widget_type, array('both', 'search')) && user_access('allow entermedia search')) {

    $form[$element['#field_name']]['#prefix'] = '<div id="search_form_' . $element['#parents'][0] . '"></div>';

    // DIV for asset details fields (hidden fields with asset id,
    // asset path etc.)
    $element['asset_details'] = array(
      '#type' => 'markup',
      '#markup' => '<div id="' . implode('_', $element['#parents']) . '_asset_details"></div>',
      '#weight' => -3,
    );


    $catalog_tokens = explode('/', $catalog_id);
    $catalog_name = array_pop($catalog_tokens);
    $multiselect = $field['cardinality'] == 1 ? 'false' : 'true';

    // Add search button which open search overlay.
    $element['upload_button']['#suffix'] = '<input type="submit" class="form-submit entermedia-search-button" value="Search" name="op" id="edit-submitted-search" onclick="javascript:entermedia_search(\'' . $element['#name'] . '\', \'' . $catalog_name . '\', \'' . $element['#parents'][0] . '\', \'' . $element['#parents'][1] . '\', \'' . $element['#parents'][2] . '\', ' . $multiselect . ');return false;">';
  }

  $element['aid'] = array(
    '#type' => 'hidden',
    '#value' => $aid,
  );
  $element['from_search'] = array(
    '#type' => 'hidden',
    '#value' => 0,
  );

  // Add progress bar support to the upload if possible.
  if ($element['#progress_indicator'] == 'bar' && $implementation = embridge_field_progress_implementation()) {
    $upload_progress_key = mt_rand();

    if ($implementation == 'uploadprogress') {
      $element['UPLOAD_IDENTIFIER'] = array(
        '#type' => 'hidden',
        '#value' => $upload_progress_key,
        '#attributes' => array('class' => array('entermediaasset-progress')),
      );
    }
    elseif ($implementation == 'apc') {
      $element['APC_UPLOAD_PROGRESS'] = array(
        '#type' => 'hidden',
        '#value' => $upload_progress_key,
        '#attributes' => array('class' => array('entermediaasset-progress')),
      );
    }

    // Add the upload progress callback.
    $element['upload_button']['#ajax']['progress']['path'] = 'embridge_field/progress/' . $upload_progress_key;
  }
  // Only allow to upload when upload is enabled and user has the permission.
  if (in_array($widget_type, array('both', 'upload')) && user_access('allow entermedia asset upload')) {
    // The embridge_field upload field itself.
    $element['upload'] = array(
      '#name' => 'files[' . implode('_', $element['#parents']) . ']',
      '#type' => 'file',
      '#title' => t('Choose a entermediaasset'),
      '#title_display' => 'invisible',
      '#size' => 22,
      '#theme_wrappers' => array(),
      '#weight' => -10,
    );
  }

  if ($aid && $element['#entermediaasset']) {
    $catalogs = variable_get('embridge_catalogs', array());
    $catalog_name = $catalogs[$catalog_id];
    $element['#entermediaasset']->filepath = embridge_field_get_filepath_by_sourcepath($element['#entermediaasset']->sourcepath, $catalog_name);
    $element['entermediaassetname'] = array(
      '#type' => 'markup',
      '#markup' => theme('embridge_field_link', array('entermediaasset' => $element['#entermediaasset'])) . ' ',
      '#weight' => -10,
    );
  }

  // Add the extension list to the page as JavaScript settings.
  if (isset($element['#upload_validators']['embridge_field_validate_extensions'][0])) {
    $extension_list = implode(',', array_filter(explode(' ', $element['#upload_validators']['embridge_field_validate_extensions'][0])));
    $element['upload']['#attached']['js'] = array(
      array(
        'type' => 'setting',
        'data' => array('entermediaasset' => array('elements' => array('#' . $element['#id'] . '-upload' => $extension_list))),
      ),
    );
  }

  // Prefix and suffix used for AJAX replacement.
  $element['#prefix'] = '<div id="' . $element['#id'] . '-ajax-wrapper">';
  $element['#suffix'] = '</div>';

  $element['attach'] = array(
    '#name' => 'thumbnails[' . implode('_', $element['#parents']) . ']',
    '#type' => 'file',
    '#description' => t('Attach teaser image to the asset as thumbnail and preview display.'),
    '#size' => 22,
    '#access' => in_array($asset_type, array('audio', 'video')),
    '#weight' => 103,
    '#title' => t('Teaser Image'),
  );

  // Add embed code to entermedia asset.
  $element['embedcode'] = array(
    '#type' => 'textarea',
    '#title' => t('Embed Code'),
    // Embed code is required if it is enabled.
    '#required' => in_array($asset_type, array('interactive', 'video')),
    '#value' => isset($element['#value']['embedcode']) ? $element['#value']['embedcode'] : '',
    '#rows' => 5,
    '#cols' => 20,
    '#weight' => 104,
    '#access' => !in_array($asset_type, array('photo', 'audio')),
  );

  return $element;
}

/**
 * The #value_callback for a managed_entermediaasset type element.
 */
function embridge_field_managed_embridge_field_value(&$element, $input = FALSE, $form_state = NULL) {
  $aid = 0;
  $instance = field_widget_instance($element, $form_state);
  $catalog_id = $instance['settings']['asset_catalog'];

  // Find the current value of this field from the form state.
  $form_state_aid = $form_state['values'];
  foreach ($element['#parents'] as $parent) {
    $form_state_aid = isset($form_state_aid[$parent]) ? $form_state_aid[$parent] : 0;
  }

  if ($element['#extended'] && isset($form_state_aid['aid'])) {
    $aid = $form_state_aid['aid'];
  }
  elseif (is_numeric($form_state_aid)) {
    $aid = $form_state_aid;
  }

  // Process any input and save new uploads.
  if ($input !== FALSE) {
    $return = $input;

    // Uploads take priority over all other values.
    if ($embridge_field = embridge_field_managed_embridge_field_save_upload($element)) {
      $aid = $embridge_field->aid;
    }
    else {
      // Check for #embridge_fieldfield_value_callback values.
      // Because FAPI does not allow multiple #value_callback values like it
      // does for #element_validate and #process, this fills the missing
      // functionality to allow EnterMedia Asset fields to be
      // extended through FAPI.
      if (isset($element['#embridge_field_value_callbacks'])) {
        foreach ($element['#embridge_field_value_callbacks'] as $callback) {
          $callback($element, $input, $form_state);
        }
      }
      // Load embridge_field if the FID has changed to confirm
      // it exists.
      if (isset($input['aid']) && $embridge_field = embridge_field_asset_load($input['aid'], $catalog_id)) {
        $aid = $embridge_field->aid;
      }
    }
  }
  else {
    // If there is no input, set the default value.
    if ($element['#extended']) {
      $default_aid = isset($element['#default_value']['aid']) ? $element['#default_value']['aid'] : 0;
      $return = isset($element['#default_value']) ? $element['#default_value'] : array('aid' => 0);
    }
    else {
      $default_aid = isset($element['#default_value']) ? $element['#default_value'] : 0;
      $return = array('aid' => 0);
    }

    // Confirm that the embridge_field exists when used as a
    // default value.
    if ($default_aid && $embridge_field = embridge_field_asset_load($default_aid, $catalog_id)) {
      $aid = $embridge_field->aid;
    }
  }

  $return['aid'] = $aid;

  return $return;
}

/**
 * An #element_validate callback for the managed_embridge_field element.
 */
function embridge_field_managed_embridge_field_validate(&$element, &$form_state) {
  // If referencing an existing embridge_field, only allow if
  // there are existing references. This prevents unmanaged
  // embridge_fields from being deleted if this
  // item were to be deleted.
  $instance = field_widget_instance($element, $form_state);
  $catalog_id = $instance['settings']['asset_catalog'];
  $clicked_button = end($form_state['clicked_button']['#parents']);
  if ($clicked_button != 'remove_button' && !empty($element['aid']['#value'])) {
    if ($embridge_field = embridge_field_asset_load($element['aid']['#value'], $catalog_id)) {
      if (empty($element['embedcode']['#value']) && $element['embedcode']['#required']) {
        form_error($element, t('The embed code for the %field field is required.', array('%field' => $element['#title'])));
      }
    }
    else {
      form_error($element, t('The embridge_field referenced by the @name field does not exist.', array('@name' => $element['#title'])));
    }
  }

  // Check required property based on the FID.
  if ($element['#required'] && empty($element['aid']['#value']) && !in_array($clicked_button, array('upload_button', 'remove_button'))) {
    form_error($element['upload'], t('@name field is required.', array('@name' => $element['#title'])));
  }

  // Consolidate the array value of this field to a single FID.
  if (!$element['#extended']) {
    form_set_value($element, $element['aid']['#value'], $form_state);
  }
}

/**
 * Submit handler for upload and remove buttons.
 *
 * Submit handler for upload and remove buttons of
 * managed_embridge_field elements.
 */
function embridge_field_managed_embridge_field_submit($form, &$form_state) {
  // Determine whether it was the upload or the remove button that was
  // clicked, and set $element to the managed_embridge_field
  // element that contains that button.
  $parents = $form_state['triggering_element']['#array_parents'];
  $button_key = array_pop($parents);
  $element = drupal_array_get_nested_value($form, $parents);

  // No action is needed here for the upload button, because all
  // embridge_field uploads on the form are processed by
  // embridge_field_managed_embridge_field_value()
  // regardless of which button was clicked.
  // Action is needed here for the remove button, because we only remove a
  // embridge_field in response to its remove button being clicked.
  if ($button_key == 'remove_button') {
    // If it's a temporary embridge_field we can safely remove it
    // immediately, otherwise it's up to the implementing module to clean
    // up embridge_fields that are in use.
    if ($element['#entermediaasset']) {
      embridge_field_delete($element['#entermediaasset']);
    }
    // Update both $form_state['values'] and $form_state['input'] to reflect
    // that the embridge_field has been removed, so that the form is
    // rebuilt correctly.
    // $form_state['values'] must be updated in case additional submit
    // handlers run, and for form building functions that run during the
    // rebuild, such as when the managed_embridge_field element is part
    // of a field widget.
    // $form_state['input'] must be updated so that
    // embridge_field_managed_embridge_field_value() has correct
    // information during the rebuild.
    $values_element = $element['#extended'] ? $element['aid'] : $element;
    form_set_value($values_element, NULL, $form_state);
    drupal_array_set_nested_value($form_state['input'], $values_element['#parents'], NULL);
  }

  // Set the form to rebuild so that $form is correctly updated in response to
  // processing the embridge_field removal. Since this function did not
  // change $form_state if the upload button was clicked, a rebuild isn't
  // necessary in that situation and setting $form_state['redirect'] to
  // FALSE would suffice.
  // However, we choose to always rebuild, to keep the form processing
  // workflow consistent between the two buttons.
  $form_state['rebuild'] = TRUE;
}

/**
 * Given a managed_embridge_field element.
 *
 * Given a managed_embridge_field element, save any
 * embridge_fields that have been uploaded into it.
 *
 * @param array $element
 *   The FAPI element whose values are being saved.
 *
 * @return Object
 *   The embridge_field object representing the embridge_field
 *   that was saved, or FALSE if no embridge_field was saved.
 */
function embridge_field_managed_embridge_field_save_upload($element) {
  $upload_name = implode('_', $element['#parents']);
  if (empty($_FILES['entermediaassets']['name'][$upload_name])) {
    return FALSE;
  }

  $destination = isset($element['#upload_location']) ? $element['#upload_location'] : NULL;
  if (isset($destination) && !file_prepare_directory($destination, FILE_CREATE_DIRECTORY)) {
    watchdog('embridge_field', 'The upload directory %directory for the embridge_field field !name could not be created or is not accessible. A newly uploaded embridge_field could not be saved in this directory as a consequence, and the upload was canceled.', array('%directory' => $destination, '!name' => $element['#field_name']));
    form_set_error($upload_name, t('The embridge_field could not be uploaded.'));
    return FALSE;
  }

  if (!$embridge_field = file_save_upload($upload_name, $element['#upload_validators'], $destination)) {
    watchdog('embridge_field', 'The embridge_field upload failed. %upload', array('%upload' => $upload_name));
    form_set_error($upload_name, t('The embridge_field in the @name field was unable to be uploaded.', array('@name' => $element['#title'])));
    return FALSE;
  }

  return $embridge_field;
}

/**
 * Returns HTML for a managed embridge_field element.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: A render element representing the embridge_field.
 *
 * @ingroup themeable
 */
function theme_embridge_field_managed_embridge_field($variables) {
  $element = $variables['element'];

  // This wrapper is required to apply JS behaviors and CSS styling.
  $output = '';
  $output .= '<div class="form-managed-entermediaasset">';
  $output .= drupal_render_children($element);
  $output .= '</div>';
  return $output;
}

/**
 * Callback to hide display of the upload or remove controls.
 *
 * Callback (#pre_render) to hide display of the upload or remove controls.
 * Upload controls are hidden when a embridge_field is already uploaded.
 * Remove controls are hidden when there is no embridge_field attached.
 * Controls are hidden here instead of in
 * embridge_field_managed_embridge_field_process(), because
 * #access for these buttons depends on the managed_embridge_field
 * element's #value. See the documentation of form_builder() for more detailed
 * information about the relationship between #process, #value, and #access.
 *
 * Because #access is set here, it affects display only and does not prevent
 * JavaScript or other untrusted code from submitting the form as though access
 * were enabled. The form processing functions for these elements should not
 * assume that the buttons can't be "clicked" just because they are not
 * displayed.
 *
 * @see embridge_field_managed_embridge_field_process()
 * @see form_builder()
 */
function embridge_field_managed_embridge_field_pre_render($element) {
  // If we already have a embridge_field, we don't want to show the
  // upload controls.
  if (!empty($element['#value']['aid'])) {
    $element['upload']['#access'] = FALSE;
    $element['upload_button']['#access'] = FALSE;
  }
  else {
    // If we don't already have a embridge_field, there is nothing to
    // remove.
    $element['remove_button']['#access'] = FALSE;
  }
  return $element;
}

/**
 * Returns HTML for a link to a embridge_field.
 *
 * @param array $variables
 *   An associative array containing:
 *   - embridge_field: A embridge_field object to which the link
 *     will be created.
 *   - icon_directory: (optional) A path to a directory of icons to be used for
 *     embridge_fields. Defaults to the value of the
 *     "embridge_field_icon_directory" variable.
 *
 * @ingroup themeable
 */
function theme_embridge_field_link($variables) {
  $embridge_field = $variables['entermediaasset'];
  $rendition = $variables['rendition'];
  $link_to_content = $variables['link_to_content'];
  $entity = $variables['entity'];

  if (!empty($embridge_field->aid)) {
    // $url = embridge_field_create_url($embridge_field->uri);
    $url = $embridge_field->preview;
    $icon = theme('embridge_field_icon', array('entermediaasset' => $embridge_field, 'display' => $rendition));

    // Set options as per anchor format described at
    // http://microformats.org/wiki/embridge-field-format-examples
    $options = array(
      'attributes' => array(
        'type' => $embridge_field->filemime . '; length=' . $embridge_field->filesize,
        'target' => '_blank',
      ),
    );
    if ($link_to_content) {
      if (!empty($entity->nid)) {
        $icon = l($icon, 'node/' . $entity->nid, array('html' => TRUE));
      }
    }
    return '<span class="entermediaasset">' . $icon . '</span>';
  }
  else {
    return '';
  }
}

/**
 * Returns HTML for a link to a embridge_field.
 *
 * @param array $variables
 *   An associative array containing:
 *   - embridge_field: A embridge_field object to which the link
 *     will be created.
 *   - icon_directory: (optional) A path to a directory of icons to be used for
 *     embridge_fields. Defaults to the value of the
 *     "embridge_field_icon_directory" variable.
 *
 * @ingroup themeable
 */
function theme_embridge_field_embed($variables) {
  $embridge_field = $variables['entermediaasset'];

  if (!empty($embridge_field->aid) && !empty($embridge_field->embedcode)) {
    return '<div class="entermedia-embedcode">' . $embridge_field->embedcode . '</div>';
  }
  else {
    return '';
  }
}

/**
 * Returns HTML for an image with an appropriate icon.
 *
 * Returns HTML for an image with an appropriate icon for the given
 * embridge_field.
 *
 * @param array $variables
 *   An associative array containing:
 *   - embridge_field: A embridge_field object for which
 *     to make an icon.
 *   - icon_directory: (optional) A path to a directory of icons to be used for
 *     embridge_fields. Defaults to the value of the
 *     "embridge_field_icon_directory" variable.
 *
 * @ingroup themeable
 */
function theme_embridge_field_icon($variables) {
  $embridge_field = $variables['entermediaasset'];
  $embridge_field = (array) $embridge_field;
  $display = empty($variables['display']) ? 'thumbnail' : $variables['display'];

  $title = isset($embridge_field['title']) ? $embridge_field['title'] : basename($embridge_field['sourcepath']);
  $image_url = $embridge_field[$display];
  $image = theme('image', array('path' => $image_url, 'alt' => $title, 'title' => $title, 'attributes' => array('class' => 'entermediaasset-icon')));
  if ($embridge_field['catalogid'] == 'media/catalogs/video') {
    $play_url = '/embridge/mediaplay/video/' . $embridge_field['aid'];
    $image = l($image, '#', array('attributes' => array('onclick' => 'javascript:window.open ("' . $play_url . '","asset-' . $embridge_field['aid'] . '","status=0,toolbar=0,location=0,menubar=0,height=400,width=600"); return false;'), 'html' => TRUE));
  }
  return $image;
}

/**
 * Given a embridge_field object, create a URL to a matching icon.
 *
 * @param Object $embridge_field
 *   A embridge_field object.
 * @param string $icon_directory
 *   (optional) A path to a directory of icons to be used for
 *   embridge_fields. Defaults to the value of the
 *   "embridge_field_icon_directory" variable.
 *
 * @return string
 *   A URL string to the icon, or FALSE if an appropriate icon cannot be found.
 */
function embridge_field_icon_url($embridge_field, $icon_directory = NULL) {
  if ($icon_path = embridge_field_icon_path($embridge_field, $icon_directory)) {
    return base_path() . $icon_path;
  }
  return FALSE;
}

/**
 * Given a embridge_field object, create a path to a matching icon.
 *
 * @param Object $embridge_field
 *   A embridge_field object.
 * @param string $icon_directory
 *   (optional) A path to a directory of icons to be used for
 *   embridge_fields. Defaults to the value of the
 *   "embridge_field_icon_directory" variable.
 *
 * @return string
 *   A string to the icon as a local path, or FALSE if an appropriate icon could
 *   not be found.
 */
function embridge_field_icon_path($embridge_field, $icon_directory = NULL) {
  // Use the default set of icons if none specified.
  if (!isset($icon_directory)) {
    $icon_directory = variable_get('embridge_field_icon_directory', drupal_get_path('module', 'embridge_field') . '/icons');
  }

  // If there's an icon matching the exact mimetype, go for it.
  $dashed_mime = strtr($embridge_field->filemime, array('/' => '-'));
  $icon_path = $icon_directory . '/' . $dashed_mime . '.png';
  if (file_exists($icon_path)) {
    return $icon_path;
  }

  // For a few mimetypes, we can "manually" map to a generic icon.
  $generic_mime = (string) embridge_field_icon_map($embridge_field);
  $icon_path = $icon_directory . '/' . $generic_mime . '.png';
  if ($generic_mime && file_exists($icon_path)) {
    return $icon_path;
  }

  // Use generic icons for each category that provides such icons.
  foreach (array('audio', 'image', 'text', 'video') as $category) {
    if (strpos($embridge_field->filemime, $category . '/') === 0) {
      $icon_path = $icon_directory . '/' . $category . '-x-generic.png';
      if (file_exists($icon_path)) {
        return $icon_path;
      }
    }
  }

  // Try application-octet-stream as last fallback.
  $icon_path = $icon_directory . '/application-octet-stream.png';
  if (file_exists($icon_path)) {
    return $icon_path;
  }

  // No icon can be found.
  return FALSE;
}

/**
 * Determine the generic icon MIME package.
 *
 * Determine the generic icon MIME package based on a embridge_field's
 * MIME type.
 *
 * @param Object $embridge_field
 *   A embridge_field object.
 *
 * @return string
 *   The generic icon MIME package expected for this embridge_field.
 */
function embridge_field_icon_map($embridge_field) {
  switch ($embridge_field->filemime) {
    // Word document types.
    case 'application/msword':
    case 'application/vnd.ms-word.document.macroEnabled.12':
    case 'application/vnd.oasis.opendocument.text':
    case 'application/vnd.oasis.opendocument.text-template':
    case 'application/vnd.oasis.opendocument.text-master':
    case 'application/vnd.oasis.opendocument.text-web':
    case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
    case 'application/vnd.stardivision.writer':
    case 'application/vnd.sun.xml.writer':
    case 'application/vnd.sun.xml.writer.template':
    case 'application/vnd.sun.xml.writer.global':
    case 'application/vnd.wordperfect':
    case 'application/x-abiword':
    case 'application/x-applix-word':
    case 'application/x-kword':
    case 'application/x-kword-crypt':
      return 'x-office-document';

    // Spreadsheet document types.
    case 'application/vnd.ms-excel':
    case 'application/vnd.ms-excel.sheet.macroEnabled.12':
    case 'application/vnd.oasis.opendocument.spreadsheet':
    case 'application/vnd.oasis.opendocument.spreadsheet-template':
    case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
    case 'application/vnd.stardivision.calc':
    case 'application/vnd.sun.xml.calc':
    case 'application/vnd.sun.xml.calc.template':
    case 'application/vnd.lotus-1-2-3':
    case 'application/x-applix-spreadsheet':
    case 'application/x-gnumeric':
    case 'application/x-kspread':
    case 'application/x-kspread-crypt':
      return 'x-office-spreadsheet';

    // Presentation document types.
    case 'application/vnd.ms-powerpoint':
    case 'application/vnd.ms-powerpoint.presentation.macroEnabled.12':
    case 'application/vnd.oasis.opendocument.presentation':
    case 'application/vnd.oasis.opendocument.presentation-template':
    case 'application/vnd.openxmlformats-officedocument.presentationml.presentation':
    case 'application/vnd.stardivision.impress':
    case 'application/vnd.sun.xml.impress':
    case 'application/vnd.sun.xml.impress.template':
    case 'application/x-kpresenter':
      return 'x-office-presentation';

    // Compressed archive types.
    case 'application/zip':
    case 'application/x-zip':
    case 'application/stuffit':
    case 'application/x-stuffit':
    case 'application/x-7z-compressed':
    case 'application/x-ace':
    case 'application/x-arj':
    case 'application/x-bzip':
    case 'application/x-bzip-compressed-tar':
    case 'application/x-compress':
    case 'application/x-compressed-tar':
    case 'application/x-cpio-compressed':
    case 'application/x-deb':
    case 'application/x-gzip':
    case 'application/x-java-archive':
    case 'application/x-lha':
    case 'application/x-lhz':
    case 'application/x-lzop':
    case 'application/x-rar':
    case 'application/x-rpm':
    case 'application/x-tzo':
    case 'application/x-tar':
    case 'application/x-tarz':
    case 'application/x-tgz':
      return 'package-x-generic';

    // Script embridge_field types.
    case 'application/ecmascript':
    case 'application/javascript':
    case 'application/mathematica':
    case 'application/vnd.mozilla.xul+xml':
    case 'application/x-asp':
    case 'application/x-awk':
    case 'application/x-cgi':
    case 'application/x-csh':
    case 'application/x-m4':
    case 'application/x-perl':
    case 'application/x-php':
    case 'application/x-ruby':
    case 'application/x-shellscript':
    case 'text/vnd.wap.wmlscript':
    case 'text/x-emacs-lisp':
    case 'text/x-haskell':
    case 'text/x-literate-haskell':
    case 'text/x-lua':
    case 'text/x-makeentermediaasset':
    case 'text/x-matlab':
    case 'text/x-python':
    case 'text/x-sql':
    case 'text/x-tcl':
      return 'text-x-script';

    // HTML aliases.
    case 'application/xhtml+xml':
      return 'text-html';

    // Executable types.
    case 'application/x-macbinary':
    case 'application/x-ms-dos-executable':
    case 'application/x-pef-executable':
      return 'application-x-executable';

    default:
      return FALSE;
  }
}

/**
 * @defgroup embridge-field-module-api EnterMedia Asset module public
 * API functions
 * @{
 * These functions may be used to determine if and where a
 * embridge_field is in use.
 */

/**
 * Gets a list of references to a embridge_field.
 *
 * @param Object $embridge_field
 *   A embridge_field object.
 * @param array $field
 *   (optional) A field array to be used for this check. If given, limits the
 *   reference check to the given field.
 * @param string $age
 *   (optional) A constant that specifies which references to count. Use
 *   FIELD_LOAD_REVISION to retrieve all references within all revisions or
 *   FIELD_LOAD_CURRENT to retrieve references only in the current revisions.
 * @param string $field_type
 *   (optional) The name of a field type. If given, limits the reference check
 *   to fields of the given type.
 *
 * @return Int
 *   An integer value.
 */
function embridge_field_get_embridge_field_references($embridge_field, $field = NULL, $age = FIELD_LOAD_REVISION, $field_type = 'entermediaasset') {
  $references = drupal_static(__FUNCTION__, array());
  $fields = isset($field) ? array($field['field_name'] => $field) : field_info_fields();

  foreach ($fields as $field_name => $embridge_field_field) {
    if ((empty($field_type) || $embridge_field_field['type'] == $field_type) && !isset($references[$field_name])) {
      // Get each time this embridge_field is used within a field.
      $query = new EntityFieldQuery();
      $query
      ->fieldCondition($embridge_field_field, 'aid', $embridge_field->aid)
      ->age($age);
      $references[$field_name] = $query->execute();
    }
  }

  return isset($field) ? $references[$field['field_name']] : $references;
}

/**
 * Implements hook_entity_load().
 */
function embridge_field_entity_load($entities, $types) {
  foreach ($entities as $k => $entity) {
    $entity_array = (array) $entity;
    $language = empty($entity->language) ? LANGUAGE_NONE : $entity->language;
    foreach ($entity_array as $field_name => $field_value) {
      if (strstr($field_name, 'field_')) {
        $field = field_info_field($field_name);
        if ($field['type'] == 'entermediaasset' && isset($field_value[$language])) {
          foreach ($field_value[$language] as $key => $value) {
            if (!empty($value['aid']) && !empty($value['catalogid'])) {
              $asset = _embridge_get_asset_array($value['aid']);
              $urls = _embridge_get_rendition_list($asset['asset_id'], $asset['catalogid'], $asset['sourcepath'], $asset['filemime']);
              $field_value[$language][$key] = array_merge($asset, $urls);
            }
          }
          $entity_array[$field_name] = $field_value;
          $entities[$k]->$field_name = $field_value;
        }
      }
    }
  }
  return $entities;
}

/**
 * Helper function. Get full filepath based on sourcepath.
 */
function embridge_field_get_filepath_by_sourcepath($sourcepath, $catalog_name) {
  $filepath = variable_get('embridge_' . drupal_strtolower($catalog_name) . '_server_mediastore', '') . '\\' . str_replace('/', '\\', $sourcepath);
  return $filepath;
}
