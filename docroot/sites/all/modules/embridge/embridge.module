<?php

/**
 * @file
 * Provides the EnterMedia functionality.
 */

/******** Enums ********/
// Path for catalog configuration files.
define('EMBRIDGE_CATALOG_CONFIG_PATH', '/config/catalogs');

// Default file types.
define('EMBRIDGE_ALLOWED_FILE_TYPES_DEFAULT', 'jpg png gif swf flv mp3 wav');

// Default catalog.
define('EMBRIDGE_ALLOWED_ASSET_CATALOG_DEFAULT', current(array_keys(variable_get('embridge_catalogs', array()))));

// Default image type.
define('EMBRIDGE_ALLOWED_ASSET_TYPE_DEFAULT', 'photo');

// Asset Search API.
define('EMBRIDGE_SEARCH_PATH_DEFAULT', '/media/services/rest/assetsearch.xml');

// Asset Search Page API.
define('EMBRIDGE_SEARCH_PAGE_PATH_DEFAULT', '/media/services/rest/getpage.xml');

// Type Search API.
define('EMBRIDGE_TYPE_SEARCH_PATH_DEFAULT', '/media/services/rest/search.xml');

// Default referer for curl.
define('EMBRIDGE_QUERY_REFERER_DEFAULT', 'http://entermedia.databasepublish.com');

// Default path to login to server.
define('EMBRIDGE_LOGIN_PATH_DEFAULT', '/media/services/rest/login.xml');

// Default file name to save cookie after login.
define('EMBRIDGE_COOKIE_FILE_DEFAULT', realpath('.') . '/' . variable_get('file_public_path', conf_path() . '/files') . '/cookie.txt');

// Default path to import assets.
define('EMBRIDGE_IMPORTASSETS_PATH_DEFAULT', '/media/services/rest/importassets.xml');
// Default path to upload assets.
define('EMBRIDGE_UPLOAD_PATH_DEFAULT', '/media/services/rest/upload.xml');

// Default path to get asset detail by asset id.
define('EMBRIDGE_ASSETDETAIL_PATH_DEFAULT', '/media/services/rest/assetdetails.xml');

// Default path to save asset details by asset id.
define('EMBRIDGE_ASSETSAVE_PATH_DEFAULT', '/media/services/rest/saveassetdetails.xml');

// Default path to upload attachment for asset.
define('EMBRIDGE_UPLOADATTACHMENT_PATH_DEFAULT', '/media/services/rest/uploadattachment.xml');

// Default path to upload attachment for asset.
define('EMBRIDGE_SETTHUMBNAIL_PATH_DEFAULT', '/media/services/rest/setthumbnail.xml');

// System Rendition URL.
define('EMBRIDGE_RENDITION_URL_SYSTEM', '[servername]/[catalogid]/downloads/preview/[renditionid]/[sourcepath]/[renditionid].jpg');

// Application Rendition URL.
define('EMBRIDGE_RENDITION_URL_APPLICATION', '[servername]/[applicationid]/views/modules/asset/downloads/preview/cache/[sourcepath]/[rendition_filename].[rendition_extension]');

/******** Hooks ********/
/**
 * Implements hook_init().
 */
function embridge_init() {
  drupal_add_library('system', 'ui.dialog');
  $catalog_list = array_values(variable_get('embridge_catalogs', array()));
  $default_catalog = current($catalog_list);
  $selected_renditions = _embridge_get_selected_rendition_types($default_catalog);
  $selected_wysiwyg_renditions = _embridge_get_selected_wysiwyg_rendition_types($default_catalog);
  $allow_upload = user_access('allow entermedia asset upload');
  $allow_search = user_access('allow entermedia search');
  drupal_add_js(array(
    'embridge' => array(
      'default_catalog' => $default_catalog,
      'selected_renditions' => $selected_renditions,
      'selected_wysiwyg_renditions' => $selected_wysiwyg_renditions,
      'allow_upload' => $allow_upload,
      'allow_search' => $allow_search,
    ),
  ), 'setting');
}

/**
 * Implements hook_theme().
 */
function embridge_theme() {
  return array(
  // Themes for the formatters.
    'embridge_formatter_default' => array(
      'variables' => array('element' => NULL),
    ),
    'embridge_formatter_plain' => array(
      'variables' => array('element' => NULL),
    ),
    'embridge_asset_search_result' => array(
      'variables' => array(
        'search_result' => NULL,
        'num_results' => NULL,
        'multiselect' => NULL,
        'catalog_settings' => NULL,
        'thumb_type' => NULL,
        'display_type' => NULL,
      ),
    ),
    'embridge_search_result_pager' => array(
      'variables' => array(
        'url' => NULL,
        'total_pages' => NULL,
        'params' => NULL,
        'current' => NULL,
      ),
    ),
    'embridge_iframe' => array(
      'variables' => array('content' => NULL, 'scripts' => NULL),
    ),
    'embridge_renditions_table' => array(
      'render element' => 'element',
      'file' => 'embridge.admin.inc',
    ),
    'embridge_fields_table' => array(
      'render element' => 'element',
      'file' => 'embridge.admin.inc',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function embridge_menu() {
  $items = array();
  $items['admin/config/embridge'] = array(
    'title' => 'EMBridge',
    'description' => 'Manage EnterMedia settings.',
    'position' => 'left',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer entermedia'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/embridge/settings'] = array(
    'title' => 'EMBridge Settings',
    'description' => 'Manage EMBridge module settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('embridge_settings'),
    'access arguments' => array('administer entermedia'),
    'file' => 'embridge.admin.inc',
    'weight' => -100,
  );
  $items['embridge/test-connection'] = array(
    'title' => 'Create DNA node for asset.',
    'description' => 'AJAX Callback to test EnterMedia connection.',
    'page callback' => 'embridge_test_connection',
    'access callback' => TRUE,
    'weight' => -100,
    'file' => 'embridge.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['embridge/search/%'] = array(
    'title' => '',
    'description' => 'Display search result from EnterMedia service',
    'page callback' => 'embridge_search_asset',
    'page arguments' => array(2),
    'access arguments' => array('allow entermedia search'),
    'weight' => -100,
    'file' => 'embridge.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['embridge/upload/%'] = array(
    'title' => 'EnterMedia Upload',
    'description' => 'Upload file to EnterMedia',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('embridge_asset_upload_form', 2),
    'access arguments' => array('allow entermedia asset upload'),
    'weight' => -100,
    'file' => 'embridge.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['embridge/mediaplay/%/%'] = array(
    'title' => 'EnterMedia Play Media',
    'description' => 'Media Playing page',
    'page callback' => 'embridge_media_play',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'weight' => -100,
    'file' => 'embridge.pages.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function embridge_admin_paths() {
  $paths = array(
    'embridge/search/*' => TRUE,
    'embridge/upload/*' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_permission().
 */
function embridge_permission() {
  $perms = array(
    'administer entermedia' => array(
      'title' => t('Configure EnterMedia Settings'),
      'description' => t('Allow to configure EnterMedia settings for embridge.'),
    ),
    'allow entermedia metadata update' => array(
      'title' => t('Allow EnterMedia Asset Metadata Update'),
      'description' => t('Allow to update asset metadata to EnterMedia.'),
    ),
    'allow entermedia asset upload' => array(
      'title' => t('Allow EnterMedia Asset Upload'),
      'description' => t('Allow to upload assets to EnterMedia.'),
    ),
    'allow entermedia search' => array(
      'title' => t('Allow EnterMedia Search'),
      'description' => t('Allow to search assets from EnterMedia.'),
    ),
  );
  return $perms;
}

/**
 * Implements hook_token_info().
 * Provide token values for this field.
 */
function embridge_token_info() {
  $dam['dam-year'] = array(
    'name' => t("DAM Year"),
    'description' => t('Formatted folder structure for Year.'),
  );
  $dam['dam-month'] = array(
    'name' => t("DAM Month"),
    'description' => t('Formatted folder structure for Month.'),
  );
  return array(
    'tokens' => array('dam' => $dam),
  );
}


/**
 * Implements hook_tokens().
 */
function embridge_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'dam') {
    $date = time();
    $replacements['[dam:yyyy]']  = empty($date) ? '' : format_date($date, 'custom', 'Y');
    $replacements['[dam:mm]'] = empty($date) ? '' : format_date($date, 'custom', 'm');
  }
  return $replacements;
}

/**
 * Theme function for iframe page.
 *
 * @param array $variables
 *   Values for theming.
 *
 * @return string
 *   Rendering html.
 */
function theme_embridge_iframe($variables) {
  $content = $variables['content'];
  $scripts = $variables['scripts'];
  $output = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">';
  $output .= '<html xmlns="http://www.w3.org/1999/xhtml">';
  $output .= '<head>';
  if ($scripts) {
    $output .= $scripts;
  }
  $output .= '</head>';
  $output .= '<body>';
  if ($content) {
    $output .= $content;
  }
  $output .= '</body>';
  $output .= '</html>';
  return $output;
}

/**
 * Theme function for search result.
 *
 * @param array $variables
 *   An associative array containing theming variables.
 *
 * @return string
 *   Rendering html.
 */
function theme_embridge_asset_search_result($variables) {
  $search_result = $variables['search_result'];
  $num_results = $variables['num_results'];
  $multiselect = $variables['multiselect'];
  $catalog_settings = $variables['catalog_settings'];
  $thumb_type = $variables['thumb_type'];
  $display_type = $variables['display_type'];
  $url = $_GET['q'];
  $params = drupal_get_query_parameters();

  $output = '';
  $output .= '<div class="embridge-toggle-view">';
  $params['display_type'] = 'thumbnail';
  $class = array('thumbnail-link');
  if ($display_type == 'thumbnail') {
    $class[] = 'current-view';
  }
  $output .= l(t('Gallery View'), $url, array('query' => $params, 'attributes' => array('class' => $class)));
  $output .= ' | ';

  $class = array('list-link');
  if ($display_type == 'list') {
    $class[] = 'current-view';
  }

  $params['display_type'] = 'list';
  $output .= l(t('Table View'), $url, array('query' => $params,'attributes' => array('class' => $class)));
  $output .= '</div>';
  $params['display_type'] = $display_type;
  $output .= '<div class="embridge-asset-search-result ' . ($display_type == 'list' ? 'list-view' : 'thumbnail-view') . '">';
  if ($display_type == 'list') {
    $output .= _embridge_get_list_view($search_result, $catalog_settings, $multiselect);
  }
  else {
    $output .= _embridge_get_thumbnail_view($search_result, $catalog_settings, $multiselect);
  }
  $output .= '<div id="preview-dialog" style="display:none;"></div>';

  $search_result = (array) $search_result;
  $total_pages = $search_result['@attributes']['pages'];
  $current = $search_result['@attributes']['page'];
  $hitssessionid = $search_result['@attributes']['sessionid'];

  $url = 'embridge/search/' . drupal_strtolower($catalog_settings['name']);
  $params['hitssessionid'] = $hitssessionid;
  $output .= theme('embridge_search_result_pager', array(
    'url' => $url,
    'total_pages' => $total_pages,
    'params' => $params,
    'current' => $current,
  ));
  $output .= '</div>';
  return $output;
}

function _embridge_get_list_view($search_result, $catalog_settings, $multiselect) {
  $server_url = variable_get('embridge_server_url', 'http://entermedia.databasepublish.com');
  $server_port = variable_get('embridge_server_port', '8080');
  $k = 1;
  $output = '';
  if (!empty($search_result)) {
    if (isset($search_result->hit)) {
      $rows = array();
      foreach ($search_result->hit as $k => $v) {
        $v = (array) $v;
        $row = array();
        $field_type = 'radio';
        if ($multiselect) {
          $field_type = 'checkbox';
        }
        $row[] = array('data' => '<input type="' . $field_type . '" name="asset_id" value="' . $v['@attributes']['id'] . '" />', 'class' => 'checkbox');
        $data = '<div class="asset">';

        $filepath = variable_get('embridge_' . $catalog_settings['name'] . '_server_mediastore', '') . str_replace(variable_get('embridge_' . $catalog_settings['name'] . '_hot_folder', ''),  '', $v['@attributes']['sourcepath']);
        $filepath = str_replace('\\', '/', $filepath);
        $thumb = $server_url . ':' . $server_port . $v['thumb'];
        $preview = $server_url . ':' . $server_port . $v['preview'];

        // Get all renditions for asset.
        _embridge_generate_renditions($v['@attributes']['id'], $catalog_settings['id'], $v['@attributes']['sourcepath'], $v['@attributes']['fileformat']);
        $renditions = _embridge_get_rendition_list($v['@attributes']['id'], $catalog_settings['id'], $v['@attributes']['sourcepath'], $v['@attributes']['fileformat'], TRUE);

        // Invoke hooks to alter renditions.
        if (module_implements('embridge_renditions_alter')) {
        $renditions = module_invoke_all('embridge_renditions_alter', $renditions);
        }
        if (!empty($renditions['thumb'])) {
          $thumb = $renditions['thumb'];
        }
        
        if (!empty($renditions['large'])) {
          $preview = $renditions['large'];
        }

        $file_name = isset($v['@attributes']['name']) ? $v['@attributes']['name'] : '';
        $image = theme('image',
            array(
              'path' => $thumb,
              'alt' => $file_name,
              'title' => isset($v['@attributes']['assettitle']) ? $v['@attributes']['assettitle'] : $file_name,
              'attributes' => array(),
            )
          );

        $aid = _embridge_get_asset_aid($v['@attributes']['id'], $catalog_settings['id'], $v);
        $aid = isset($aid) ? $aid : 0;

        // Display play link for videos.
        if (in_array($catalog_settings['id'], variable_get('embridge_multimedia_catalogs', array('media/catalogs/video')))) {
          $play_url = '/embridge/mediaplay/' . $catalog_settings['name'] . '/' . $aid;
          $image = l($image, '#', array('attributes' => array('onclick' => 'javascript:window.open ("' . $play_url . '","asset-' . $v['@attributes']['id'] . '","status=0,toolbar=0,location=0,menubar=0,height=400,width=600"); return false;'), 'html' => TRUE));
        }

        $data .= $image;
        $data .= '<div class="field-title">' . $file_name . '</div>';
        $data .= '<input type="hidden" name="aid" value="' . $aid . '" />';
        $data .= '<input type="hidden" name="thumbnail" value="' . $thumb . '" disabled="true"/>';
        $data .= '<input type="hidden" name="preview" value="' . $preview . '" disabled="true"/>';
        if (isset($_GET['embed']) && !empty($renditions)) {
          foreach ($renditions as $key => $value) {
            $data .= '<input type="hidden" name="' . $key . '" value="' . $value . '" disabled="true"/>';
          }
        }
        $data .= '<input type="hidden" name="filepath" value="' . $filepath . '" disabled="true"/>';
        $data .= '<input type="hidden" name="catalog" value="' . $catalog_settings['name'] . '" disabled="true" />';
        $data .= '<input type="hidden" name="catalogid" value="' . $catalog_settings['id'] . '" disabled="true" />';
        // Include updatable fields in values.
        if (!empty($catalog_settings['updatable_fields'])) {
          foreach ($catalog_settings['updatable_fields'] as $field) {
            if (isset($v['@attributes'][$field['id'] . 'id'])) {
              $data .= '<input id="' . $field['id'] . '_' . $v['@attributes']['id'] . '" type="hidden" name="' . $field['id'] . '" value="' . $v['@attributes'][$field['id'] . 'id'] . '" disabled="true" />';
            }
            elseif (isset($v['@attributes'][$field['id']])) {
              $data .= '<input id="' . $field['id'] . '_' . $v['@attributes']['id'] . '" type="hidden" name="' . $field['id'] . '" value="' . $v['@attributes'][$field['id']] . '" disabled="true" />';
            }
          }
        }
        $row[] = array('data' => $data, 'class' => 'preview');
        // Include result fields in display.
        foreach ($catalog_settings['result_fields'] as $field) {
          if (isset($v['@attributes'][$field['id']])) {
            $row[] = array('data' => '<div class="result-field">' . $v['@attributes'][$field['id']] . '</div>', 'class' => $field['id']);
          }
          else {
            $row[] = array('data' => '', 'class' => $field['id']);;
          }
        }
        $rows[] = array('data' => $row, 'class' => array('asset-row'));
      }
      $header = array(array('data' => '', 'class' => 'checkbox'), array('data' => 'Preview', 'class' => 'preview'));
      foreach ($catalog_settings['result_fields'] as $field) {
        $header[] = array('data' => $field['name'], 'class' => $field['id']);
      }
      $output .= theme('table', array('header' => $header, 'rows' => $rows));
    }
    else {
      $output .= '<div class="empty-message">' . t('EnterMedia returns zero asset for current search.') . '</div>';
    }
  }
  return $output;
}

function _embridge_get_thumbnail_view($search_result, $catalog_settings, $multiselect) {
  $output = '';
  $server_url = variable_get('embridge_server_url', 'http://entermedia.databasepublish.com');
  $server_port = variable_get('embridge_server_port', '8080');
  $k = 1;
  if (!empty($search_result)) {
    if (isset($search_result->hit)) {
      foreach ($search_result->hit as $k => $v) {
        $field_type = 'radio';
        if ($multiselect) {
          $field_type = 'checkbox';
        }
        $v = (array) $v;
        $output .= '<div class="asset-row">';
        $output .= '<div class="asset">';

        $filepath = variable_get('embridge_' . $catalog_settings['name'] . '_server_mediastore', '') . str_replace(variable_get('embridge_' . $catalog_settings['name'] . '_hot_folder', ''),  '', $v['@attributes']['sourcepath']);
        $filepath = str_replace('\\', '/', $filepath);
        $thumb = $server_url . ':' . $server_port . $v['thumb'];
        $preview = $server_url . ':' . $server_port . $v['preview'];

        // Get all renditions for asset.
        _embridge_generate_renditions($v['@attributes']['id'], $catalog_settings['id'], $v['@attributes']['sourcepath'], $v['@attributes']['fileformat']);
        $renditions = _embridge_get_rendition_list($v['@attributes']['id'], $catalog_settings['id'], $v['@attributes']['sourcepath'], $v['@attributes']['fileformat'], TRUE);
        // Invoke hooks to alter renditions.
        if (module_implements('embridge_renditions_alter')) {
        $renditions = module_invoke_all('embridge_renditions_alter', $renditions);
        }
        if (!empty($renditions['thumb'])) {
          $thumb = $renditions['thumb'];
        }
        
        if (!empty($renditions['large'])) {
          $preview = $renditions['large'];
        }
        $file_name = isset($v['@attributes']['name']) ? $v['@attributes']['name'] : '';

        $image = theme('image',
            array(
              'path' => $thumb,
              'alt' => $file_name,
              'title' => isset($v['@attributes']['assettitle']) ? $v['@attributes']['assettitle'] : $file_name,
              'attributes' => array(),
            )
          );

        $aid = _embridge_get_asset_aid($v['@attributes']['id'], $catalog_settings['id'], $v);
        $aid = isset($aid) ? $aid : 0;

        // Display play link for videos.
        if (in_array($catalog_settings['id'], variable_get('embridge_multimedia_catalogs', array('media/catalogs/video')))) {
          $play_url = '/embridge/mediaplay/' . $catalog_settings['name'] . '/' . $aid;
          $image = l($image, '#', array('attributes' => array('onclick' => 'javascript:window.open ("' . $play_url . '","asset-' . $v['@attributes']['id'] . '","status=0,toolbar=0,location=0,menubar=0,height=400,width=600"); return false;'), 'html' => TRUE));
        }

        $output .= '<div class="checkbox"><input type="' . $field_type . '" name="asset_id" value="' . $v['@attributes']['id'] . '" /></div>';
        $output .= '<div class="thumbnail"><span class="thumbnail-holder">' . $image . '</span></div>';
        $output .= '<div class="field-title">' . $file_name . '</div>';
        $output .= '<input type="hidden" name="aid" value="' . $aid . '" />';
        $output .= '<input type="hidden" name="thumbnail" value="' . $thumb . '" disabled="true"/>';
        $output .= '<input type="hidden" name="preview" value="' . $preview . '" disabled="true"/>';
        if (isset($_GET['embed']) && !empty($renditions)) {
          foreach ($renditions as $key => $value) {
            $output .= '<input type="hidden" name="' . $key . '" value="' . $value . '" disabled="true"/>';
          }
        }
        $output .= '<input type="hidden" name="filepath" value="' . $filepath . '" disabled="true"/>';
        $output .= '<input type="hidden" name="catalog" value="' . $catalog_settings['name'] . '" disabled="true" />';
        $output .= '<input type="hidden" name="catalogid" value="' . $catalog_settings['id'] . '" disabled="true" />';
        // Include updatable fields in values.
        if (!empty($catalog_settings['updatable_fields'])) {
          foreach ($catalog_settings['updatable_fields'] as $field) {
            if (isset($v['@attributes'][$field['id'] . 'id'])) {
              $output .= '<input id="' . $field['id'] . '_' . $v['@attributes']['id'] . '" type="hidden" name="' . $field['id'] . '" value="' . $v['@attributes'][$field['id'] . 'id'] . '" disabled="true" />';
            }
            elseif (isset($v['@attributes'][$field['id']])) {
              $output .= '<input id="' . $field['id'] . '_' . $v['@attributes']['id'] . '" type="hidden" name="' . $field['id'] . '" value="' . $v['@attributes'][$field['id']] . '" disabled="true" />';
            }
          }
        }
        $output .= '</div>';
        $output .= '</div>';
      }
    }
    else {
      $output .= '<div class="empty-message">' . t('EnterMedia returns zero asset for current search.') . '</div>';
    }
  }
  return $output;
}

/**
 * Theme function for search result pager.
 *
 * @param array $variables
 *   An associative array containing theming variables.
 *
 * @return string
 *   Rendering html.
 */
function theme_embridge_search_result_pager($variables) {
  $url = $variables['url'];
  $total_pages = $variables['total_pages'];
  $params = $variables['params'];
  $current = $variables['current'];
  $output = '<div class="pager">';
  if ($total_pages != 0) {
    if ($current != 1) {
      $params['current_page'] = $current - 1;
      $output .= l(t('Previous'), $url, array('query' => $params));
    };
    if ($total_pages != $current) {
      $params['current_page'] = $current + 1;
      $output .= l(t('Next'), $url, array('query' => $params));
    }
  }
  $output .= '</div>';
  return $output;
}

/**
 * Call EnterMedia API using get.
 *
 * @param string $url
 *   The URL of EnterMedia server with query string.
 * @param string $ref_url
 *   The referer URL in the request
 *
 * @return string
 *   XML response from the EnterMedia REST API.
 */
function _embridge_curl_grab_page_get($url, $ref_url) {
  $username = variable_get('embridge_login', 'admin');
  $password = variable_get('embridge_password', 'admin');
  $server_url = variable_get('embridge_server_url', 'http://entermedia.databasepublish.com');
  $server_port = variable_get('embridge_server_port', '8080');
  $login_url = $server_url . ':' . $server_port . EMBRIDGE_LOGIN_PATH_DEFAULT . '?accountname=' . $username . '&password=' . $password;
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_COOKIEJAR, EMBRIDGE_COOKIE_FILE_DEFAULT);
  curl_setopt($ch, CURLOPT_COOKIEFILE, EMBRIDGE_COOKIE_FILE_DEFAULT);
  curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)");
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60);
  curl_setopt($ch, CURLOPT_TIMEOUT, 120);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_REFERER, $ref_url);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);
  curl_setopt($ch, CURLOPT_URL, $url);
  $response = curl_exec($ch);
  $response = str_replace('&', '&amp;', $response);
  $xmlobj = simplexml_load_string($response);
  $xmlarr = (array) $xmlobj;
  // Need to relogin to entermedia if REST API fails.
  if (empty($xmlarr['@attributes']['stat']) || $xmlarr['@attributes']['stat'] == 'fail') {
    watchdog('embridge', 'Relogin to entermedia - %message', array('%message' => $response), WATCHDOG_WARNING);
    curl_setopt($ch, CURLOPT_URL, $login_url);
    curl_exec($ch);
    curl_setopt($ch, CURLOPT_URL, $url);
    $response = curl_exec($ch);
    $response = str_replace('&', '&amp;', $response);
  }

  curl_close($ch);
  unset($ch);
  return $response;
}

/**
 * Get search result from EnterMedia.
 *
 * Get search result from EnterMedia based on current hit session id and
 * page number.
 *
 * @param array $search_params
 *   An associative array containing search parameters.
 * @param array $catalog_settings
 *   An associative array containing current catalog settings.
 *
 * @return object
 *   An simplexml object containing hits for the current search result.
 */
function _embridge_get_search_result($search_params, $catalog_settings) {
  // Get server information.
  $server_url = variable_get('embridge_server_url', 'http://entermedia.databasepublish.com');
  $server_port = variable_get('embridge_server_port', '8080');
  $catalog_path = 'catalogid=' . $catalog_settings['id'];
  $page_size = variable_get('embridge_search_pagesize', 12);

  $search_string = '';
  foreach ($search_params as $k => $v) {
    $operation = '&operation=exact';
    if (isset($v['operation'])) {
      $operation = '&operation=' . $v['operation'];
    }
    $value = '';
    if (isset($v['value'])) {
      $value = '&' . $v['field'] . '.value=' . urlencode($v['value']);
    }
    $after = '';
    if (isset($v['after'])) {
      $after = '&' . $v['field'] . '.after=' . $v['after'];
    }
    $before = '';
    if (isset($v['before'])) {
      $before = '&' . $v['field'] . '.before=' . $v['before'];
    }
    $search_string .= '&field=' . $v['field'] . $operation . $value . $after . $before;
  }

  // Sorted by Date (asset added date).
  $search_string .= '&sortby=assetmodificationdateDown';
  // Set page size.
  $search_string .= '&hitsperpage=' . $page_size;
  $search_string .= '&page=1';

  $search_url = $server_url . ':' . $server_port . EMBRIDGE_SEARCH_PATH_DEFAULT . '?' . $catalog_path . $search_string;
  watchdog('embridge', '%search_url searched. ', array('%search_url' => $search_url), WATCHDOG_NOTICE);

  // Search and get result.
  $xml = _embridge_curl_grab_page_get($search_url, EMBRIDGE_QUERY_REFERER_DEFAULT);
  watchdog('embridge', '%xml searched. ', array('%xml' => $xml), WATCHDOG_NOTICE);
  // Parse xml to array.
  $xmlobj = simplexml_load_string($xml);

  return $xmlobj->hits;
}

/**
 * Get search result from EnterMedia.
 *
 * Get search result from EnterMedia based on current hit session id and
 * page number.
 *
 * @param array $catalog_settings
 *   An associative array containing current catalog settings.
 * @param string $hitssessionid
 *   The hit session id to retrieve current search from EnterMedia.
 * @param int $current_page
 *   Current page number to the search result.
 *
 * @return object
 *   An simplexml object containing hits for the current search result page.
 */
function _embridge_get_search_page_result($catalog_settings, $hitssessionid, $current_page) {
  // Get server information.
  $server_url = variable_get('embridge_server_url', 'http://entermedia.databasepublish.com');
  $server_port = variable_get('embridge_server_port', '8080');
  $catalog_path = 'catalogid=' . $catalog_settings['id'];
  $page_size = variable_get('embridge_search_pagesize', 12);

  $search_string = '';
  $search_string .= '&hitssessionid=' . $hitssessionid;
  $search_string .= '&page=' . $current_page;

  // Create url for search.
  $search_url = $server_url . ':' . $server_port . EMBRIDGE_SEARCH_PAGE_PATH_DEFAULT . '?' . $catalog_path . $search_string;
  watchdog('embridge', '%search_url searched. ', array('%search_url' => $search_url), WATCHDOG_NOTICE);
  // Search and get result.
  $xml = _embridge_curl_grab_page_get($search_url, EMBRIDGE_QUERY_REFERER_DEFAULT);
  watchdog('embridge', '%xml searched. ', array('%xml' => $xml), WATCHDOG_NOTICE);
  // Parse xml to array.
  $xmlobj = simplexml_load_string($xml);

  return $xmlobj->hits;
}

/**
 * Call EnterMedia API using post.
 *
 * @param string $url
 *   The URL of EnterMedia server.
 * @param string $ref_url
 *   The referer URL in the request.
 * @param array $data
 *   The data used to post.
 *
 * @return string
 *   XML response from the EnterMedia REST API.
 */
function _embridge_curl_grab_page($url, $ref_url, $data, $login) {
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_COOKIEJAR, EMBRIDGE_COOKIE_FILE_DEFAULT);
  curl_setopt($ch, CURLOPT_COOKIEFILE, EMBRIDGE_COOKIE_FILE_DEFAULT);
  curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)");
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60);
  curl_setopt($ch, CURLOPT_TIMEOUT, 120);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_REFERER, $ref_url);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
  ob_start();
  // Execute the curl command.
  return curl_exec($ch);
  ob_end_clean();
  curl_close($ch);
  unset($ch);
}

/**
 * Update asset detail on EnterMedia server.
 *
 * @param int $asset_id
 *   The asset id for the EnterMedia asset.
 * @param string $catalog_id
 *   The catalog id for the EnterMedia asset.
 * @param array $fields_values
 *   The field array used to update for the EnterMedia asset.
 *
 * @return string
 *   XML response from the EnterMedia REST API.
 */
function _embridge_update_asset($asset_id, $catalog_id, $fields_values) {
  // Get server URL and port.
  $server_url = variable_get('embridge_server_url', 'http://entermedia.databasepublish.com');
  $server_port = variable_get('embridge_server_port', '8080');

  // Create string to update specific fields.
  $update_string = '';
  foreach ($fields_values as $k => $v) {
    foreach (explode(' | ', $v) as $value) {
      $update_string .= '&field=' . $k . '&' . $k . '.value=' . urlencode($value);
    }
  }

  // Create query to EnterMedia server.
  $asset_path = $server_url . ':' . $server_port . EMBRIDGE_ASSETSAVE_PATH_DEFAULT . '?catalogid=' . $catalog_id . '&id=' . $asset_id . $update_string;

  // Get response.
  $response = _embridge_curl_grab_page_get($asset_path, EMBRIDGE_QUERY_REFERER_DEFAULT);
  return $response;
}

/**
 * Upload file to EnterMedia server.
 *
 * @param string $path
 *   The file path for the upload.
 * @param string $default_asset_directory
 *   The catalog name for the EnterMedia asset.
 * @param string $catalog_id
 *   The catalog id for the EnterMedia asset.
 * @param string $source_path
 *   The source path for the EnterMedia asset.
 *
 * @return string
 *   XML response from the EnterMedia REST API.
 */
function _embridge_upload_file($path, $default_asset_directory, $catalog_id, &$source_path = '') {
  $catalog = explode('/', $catalog_id);
  $catalog_name = end($catalog);
  if (variable_get('embridge_' . $catalog_name . '_upload_method', 'rest') == 'post') {
    return _embridge_upload_file_by_post($path, $default_asset_directory, $catalog_id, $source_path);
  }
  else {
    return _embridge_upload_file_by_copy($path, $default_asset_directory, $catalog_id, $source_path);
  }
}

/**
 * Upload file to EnterMedia server.
 *
 * @param string $path
 *   The file path for the upload.
 * @param string $default_asset_directory
 *   The catalog name for the EnterMedia asset.
 * @param string $catalog_id
 *   The catalog id for the EnterMedia asset.
 * @param string $source_path
 *   The source path for the EnterMedia asset.
 *
 * @return string
 *   XML response from the EnterMedia REST API.
 */
function _embridge_upload_file_by_copy($path, $default_asset_directory, $catalog_id, &$source_path = '') {
  $fname = _embridge_get_file_name($path);
  $username = variable_get('embridge_login', 'admin');
  $password = variable_get('embridge_password', 'admin');
  $server_url = variable_get('embridge_server_url', 'http://entermedia.databasepublish.com');
  $server_port = variable_get('embridge_server_port', '8080');
  $login_url = $server_url . ':' . $server_port . EMBRIDGE_LOGIN_PATH_DEFAULT . '?accountname=' . $username . '&password=' . $password;

  $catalog = explode('/', $catalog_id);
  $catalog_name = end($catalog);
  $filename = $fname . '.' . _embridge_get_file_extension($path);
  $asset_directory = variable_get('embridge_' . drupal_strtolower($catalog_name) . '_server_mediastore', '') . '/' . $default_asset_directory;
  $hot_folder = variable_get('embridge_' . drupal_strtolower($catalog_name) . '_hot_folder', '');

  if (!is_dir($asset_directory)) {
    mkdir($asset_directory, 0775, TRUE);
  }

  $asset_path = $asset_directory . '/' . $filename;
  if (!copy(realpath($path), $asset_path)) {
    watchdog('embridge', 'Failed to copy file to - %file', array('%file' => $asset_path), WATCHDOG_ERROR);
  }
  else {
    @unlink(realpath($path));
  }
  $source_path = $hot_folder . '/' . $default_asset_directory . '/' . $filename;
  $url = $server_url . ':' . $server_port . EMBRIDGE_IMPORTASSETS_PATH_DEFAULT . '?sourcepath=' . $source_path . '&catalogid=' . $catalog_id;

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_COOKIEJAR, EMBRIDGE_COOKIE_FILE_DEFAULT);
  curl_setopt($ch, CURLOPT_COOKIEFILE, EMBRIDGE_COOKIE_FILE_DEFAULT);
  curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)");
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60);
  curl_setopt($ch, CURLOPT_TIMEOUT, 120);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_URL, $url);
  $response = curl_exec($ch);

  // Get errors from cURL for debug.
  if (curl_errno($ch)) {
    $error = 'ERROR -> ' . curl_errno($ch) . ': ' . curl_error($ch);
    watchdog('embridge', 'Failed to process import asset api call for %source - %message', array('%source' => $source_path, '%message' => $error), WATCHDOG_ERROR);
  }
  else {
    $return_code = (int) curl_getinfo($ch, CURLINFO_HTTP_CODE);
    switch ($return_code) {
      case 404:
        $error = 'ERROR -> 404 Page Not Found';
        watchdog('embridge', 'Failed to process import asset api call for %source - %message', array('%source' => $source_path, '%message' => $error), WATCHDOG_ERROR);
        break;

      case 302:
        $error = 'ERROR -> 302 Temporarily Redirected';
        watchdog('embridge', 'Failed to process import asset api call for %source - %message', array('%source' => $source_path, '%message' => $error), WATCHDOG_ERROR);
        break;

      default:
        break;
    }
  }

  $xmlobj = simplexml_load_string($response);
  $xmlarr = (array) $xmlobj;

  // Need to relogin to entermedia if REST API fails.
  if (isset($error) || empty($xmlarr['@attributes']['stat']) || $xmlarr['@attributes']['stat'] == 'fail') {
    watchdog('embridge', 'Relogin to entermedia - %message', array('%message' => $response), WATCHDOG_WARNING);
    curl_setopt($ch, CURLOPT_URL, $login_url);
    curl_exec($ch);
    curl_setopt($ch, CURLOPT_URL, $url);
    $response = curl_exec($ch);
  }

  curl_close($ch);
  return $response;
}

/**
 * Upload file to EnterMedia server.
 *
 * @param string $path
 *   The file path for the upload.
 * @param string $default_asset_directory
 *   The catalog name for the EnterMedia asset.
 * @param string $catalog_id
 *   The catalog id for the EnterMedia asset.
 * @param string $source_path
 *   The source path for the EnterMedia asset.
 *
 * @return string
 *   XML response from the EnterMedia REST API.
 */
function _embridge_upload_file_by_post($path, $default_asset_directory, $catalog_id, &$source_path = '') {
  $fname = _embridge_get_file_name($path);
  $username = variable_get('embridge_login', 'admin');
  $password = variable_get('embridge_password', 'admin');
  $server_url = variable_get('embridge_server_url', 'http://entermedia.databasepublish.com');
  $server_port = variable_get('embridge_server_port', '8080');
  $login_url = $server_url . ':' . $server_port . EMBRIDGE_LOGIN_PATH_DEFAULT . '?accountname=' . $username . '&password=' . $password;

  $url = $server_url . ':' . $server_port . EMBRIDGE_UPLOAD_PATH_DEFAULT;

  $catalog = explode('/', $catalog_id);
  $catalog_name = end($catalog);
  $filename = $fname . '.' . _embridge_get_file_extension($path);
  $hot_folder = variable_get('embridge_' . drupal_strtolower($catalog_name) . '_hot_folder', '');
  $source_path = $hot_folder . '/' . $default_asset_directory . '/';
  $post_fields = array();

  $post_fields['catalogid'] = $catalog_id;
  $post_fields['sourcepath'] = $source_path;
  //files
  $post_fields['file'] = "@$path";

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_COOKIEJAR, EMBRIDGE_COOKIE_FILE_DEFAULT);
  curl_setopt($ch, CURLOPT_COOKIEFILE, EMBRIDGE_COOKIE_FILE_DEFAULT);
  curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)");
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60);
  curl_setopt($ch, CURLOPT_TIMEOUT, 120);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_POST, true);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $post_fields);

  $response = curl_exec($ch);

  // Get errors from cURL for debug.
  if (curl_errno($ch)) {
    $error = 'ERROR -> ' . curl_errno($ch) . ': ' . curl_error($ch);
    watchdog('embridge', 'Failed to process import asset api call for %source - %message', array('%source' => $source_path, '%message' => $error), WATCHDOG_ERROR);
  }
  else {
    $return_code = (int) curl_getinfo($ch, CURLINFO_HTTP_CODE);
    switch ($return_code) {
      case 404:
        $error = 'ERROR -> 404 Page Not Found';
        watchdog('embridge', 'Failed to process import asset api call for %source - %message', array('%source' => $source_path, '%message' => $error), WATCHDOG_ERROR);
        break;

      case 302:
        $error = 'ERROR -> 302 Temporarily Redirected';
        watchdog('embridge', 'Failed to process import asset api call for %source - %message', array('%source' => $source_path, '%message' => $error), WATCHDOG_ERROR);
        break;

      default:
        break;
    }
  }

  $xmlobj = simplexml_load_string($response);
  $xmlarr = (array) $xmlobj;

  // Need to relogin to entermedia if REST API fails.
  if (isset($error) || empty($xmlarr['@attributes']['stat']) || $xmlarr['@attributes']['stat'] == 'fail') {
    watchdog('embridge', 'Relogin to entermedia - %message', array('%message' => $response), WATCHDOG_WARNING);
    curl_setopt($ch, CURLOPT_URL, $login_url);
    curl_exec($ch);
    curl_setopt($ch, CURLOPT_URL, $url);
    $response = curl_exec($ch);
  }

  curl_close($ch);
  $source_path .= $filename;
  @unlink(realpath($path));
  return $response;
}

/**
 * Get file extension from file path.
 */
function _embridge_get_file_name($filepath) {
  $path_info = pathinfo($filepath);
  return $path_info['filename'];
}
/**
 * Get file extension from file path.
 */
function _embridge_get_file_name_w_extension($filepath) {
  $path_info = pathinfo($filepath);
  return $path_info['basename'];
}

function _embridge_get_friendly_name($input, $drop_list = NULL, $delimiter = '-') {
  $newar = array();
  if ($drop_list === NULL) {
    $drop_list = array(
      'a',
      'an',
      'and',
      'in',
      'to',
      'the',
    );
  }

  // Separate words by space(s) and Drop all non-alphanumeric characters.
  $input = preg_split('@\s+@', strtolower($input));
  $input = preg_replace('@[^A-Za-z0-9\-]@', '', $input);

  for ($i = 0, $length = count($input); $i < $length; $i++) {
    if ($input[$i] && !in_array($input[$i], $drop_list)) {
      $newar[] = $input[$i];
    }
  }

  return implode($delimiter, $newar);
}

/**
 * Upload attachment to entermedia asset.
 *
 * @param string $source_path
 *   The source path for the EnterMedia asset.
 * @param int $catalog_id
 *   The catalog id for the EnterMedia asset.
 * @param string $thumbnail_file_path
 *   The source path for the EnterMedia asset.
 *
 * @return string
 *   XML response from the EnterMedia REST API.
 */
function _embridge_upload_attachment($source_path, $catalog_id, $thumbnail_file_path) {

  $username = variable_get('embridge_login', 'admin');
  $password = variable_get('embridge_password', 'admin');
  $server_url = variable_get('embridge_server_url', 'http://entermedia.databasepublish.com');
  $server_port = variable_get('embridge_server_port', '8080');
  $login_url = $server_url . ':' . $server_port . EMBRIDGE_LOGIN_PATH_DEFAULT;

  $login_data = '&accountname=' . $username . '&password=' . $password;

  $data = array('sourcepath' => $source_path, 'file' => '@' . realpath($thumbnail_file_path));

  $errors = array();

  $url = $server_url . ':' . $server_port . EMBRIDGE_UPLOADATTACHMENT_PATH_DEFAULT . '?catalogid=' . $catalog_id;
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_COOKIEJAR, EMBRIDGE_COOKIE_FILE_DEFAULT);
  curl_setopt($ch, CURLOPT_COOKIEFILE, EMBRIDGE_COOKIE_FILE_DEFAULT);
  curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)");
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60);
  curl_setopt($ch, CURLOPT_TIMEOUT, 120);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);

  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);

  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data);

  $response = curl_exec($ch);

  $xmlobj = simplexml_load_string($response);
  $xmlarr = (array) $xmlobj;

  // Need to relogin to entermedia if REST API fails.
  if (empty($xmlarr['@attributes']['stat']) || $xmlarr['@attributes']['stat'] == 'fail') {
    watchdog('embridge', 'Relogin to entermedia - %message', array('%message' => $response), WATCHDOG_WARNING);
    curl_setopt($ch, CURLOPT_URL, $login_url);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $login_data);
    curl_exec($ch);
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
    $response = curl_exec($ch);
  }
  curl_close($ch);

  // Set the new attachment as thumbnail.
  $set_thumbnail_url = $server_url . ':' . $server_port . EMBRIDGE_SETTHUMBNAIL_PATH_DEFAULT . '?catalogid=' . $catalog_id . '&sourcepath=' . $source_path . '&imagefilename=' . basename($thumbnail_file_path);
  $response = _embridge_curl_grab_page_get($set_thumbnail_url, EMBRIDGE_QUERY_REFERER_DEFAULT);

  @unlink($thumbnail_file_path);
  return $response;
}

/**
 * Get asset detail by asset id.
 *
 * @param int $asset_id
 *   The asset id for the EnterMedia asset.
 * @param string $catalog_id
 *   The catalog id for the EnterMedia asset.
 *
 * @return array
 *   An associative array containing asset information from EnterMedia.
 */
function _embridge_get_asset_detail($asset_id, $catalog_id) {
  $server_url = variable_get('embridge_server_url', 'http://entermedia.databasepublish.com');
  $server_port = variable_get('embridge_server_port', '8080');
  $asset_path = $server_url . ':' . $server_port . EMBRIDGE_ASSETDETAIL_PATH_DEFAULT . '?catalogid=' . $catalog_id . '&id=' . $asset_id;
  $xml = _embridge_curl_grab_page_get($asset_path, EMBRIDGE_QUERY_REFERER_DEFAULT);
  $xmlobj = simplexml_load_string($xml);
  $xmlarr = (array) $xmlobj;
  return $xmlarr;
}

/**
 * Get value list for the field in EnterMedia.
 *
 * @param string $field_id
 *   The field id in EnterMedia Server.
 *
 * @return array
 *   An associative array containing possible values for the field.
 */
function _embridge_get_value_list($field_id, $catalog_id) {
  $values = array();
  $values[''] = '';
  $server_url = variable_get('embridge_server_url', 'http://entermedia.databasepublish.com');
  $server_port = variable_get('embridge_server_port', '8080');
  $search_url = $server_url . ':' . $server_port . EMBRIDGE_TYPE_SEARCH_PATH_DEFAULT . '?catalogid=' . $catalog_id . '&searchtype=' . $field_id . '&hitsperpage=10000&field=id&id.value=*&operation=matches&sortby=name';
  $xml = _embridge_curl_grab_page_get($search_url, EMBRIDGE_QUERY_REFERER_DEFAULT);
  $xmlobj = simplexml_load_string($xml);
  $xmlarr = (array) $xmlobj;
  if (!empty($xmlarr['@attributes']['stat']) && $xmlarr['@attributes']['stat'] == 'ok') {
    foreach ($xmlobj->hits->children() as $hit) {
      $hitarr = (array) $hit;
      $values[$hitarr['@attributes']['id']] = $hitarr['@attributes']['name'];
    }
  }
  return $values;
}

/**
 * Get Catalog based on catalog name.
 *
 * @param string $catalog_name
 *   The catalog name for the EnterMedia asset. i.e photo, video
 *
 * @return array
 *   An associative array containing settings for the catalog matched.
 */
function _embridge_get_catalog_settings_by_name($catalog_name) {
  $catalogs = variable_get('embridge_catalogs', array());
  $catalog_settings = array();
  if (!empty($catalogs)) {
    foreach ($catalogs as $id => $catalog) {
      if (strcasecmp($catalog, $catalog_name) == 0) {
        $catalog_settings['id'] = $id;
        $catalog_settings['name'] = $catalog;
        break;
      }
    }
  }
  // All catalog fields.
  $fields = variable_get('embridge_' . drupal_strtolower($catalog_name) . '_fields', array());

  // Add search fields settings.
  $catalog_settings['search_fields'] = array();
  $catalog_settings['result_fields'] = array();
  $catalog_settings['default_filters'] = array();
  if (!empty($fields)) {
    foreach ($fields as $field_id => $field) {
      // Check if field is enabled.
      if ($field['selected']) {
      if ($field['include_in_search']) {
        $catalog_settings['search_fields'][$field_id] = $field;
      }
      if ($field['include_in_result']) {
        $catalog_settings['result_fields'][$field_id] = $field;
      }
      if ($field['updatable']) {
        $catalog_settings['updatable_fields'][$field_id] = $field;
      }
        if (!empty($field['value'])) {
          $catalog_settings['default_filters'][$field_id] = $field;
        }
    }
  }
  }

  // Add rendition settings.
  $catalog_settings['renditions'] = variable_get('embridge_' . drupal_strtolower($catalog_name) . '_renditions', array());
  return $catalog_settings;
}

/**
 * Get rendition urls based on asset id and catalog id.
 *
 * @param int $asset_id
 *   The record id for the EnterMedia asset.
 * @param string $catalog_id
 *   The catalog id for the EnterMedia asset.
 * @param string $source_path
 *   Source path for the EnterMedia asset.
 * @param Bool $include_all
 *   A boolean indicate if to include all rendtions.
 *
 * @return array
 *   An associative array containing rendition urls for the EnterMedia asset.
 */
function _embridge_get_rendition_list($asset_id, $catalog_id, $source_path = NULL, $fileformat = NULL, $include_all = FALSE) {
  $rendtion_urls = array();
  $server_url = variable_get('embridge_server_url', 'http://entermedia.databasepublish.com');
  $server_port = variable_get('embridge_server_port', '8080');
  $server_name = $server_url . ($server_port ? ':' . $server_port : '');
  // Get catalog list.
  $catalogs = variable_get('embridge_catalogs', array());
  // Get catalog name.
  $catalog_name = $catalogs[$catalog_id];
  if (empty($source_path)) {
    // Get asset data from entermedia table.
    $asset = _embridge_get_asset_array_by_asset_id($asset_id, $catalog_id);
    $source_path = $asset['sourcepath'];
    $fileformat = $asset['filemime'];
  }

  $fileformat = empty($fileformat) ? strtolower(_embridge_get_file_extension($source_path)) : strtolower($fileformat);
  $rendition_extension = 'jpg';
  if (in_array($fileformat, array('png', 'gif'))) {
    $rendition_extension = $fileformat;
  }

  if ($catalog_name) {
    $rendition_settings = variable_get('embridge_' . strtolower($catalog_name) . '_renditions', array());
    $application_id = variable_get('embridge_' . strtolower($catalog_name) . '_application_id', array());
    // Get renditions enable for the catalog.
    $selected_renditions = $include_all ? array_keys($rendition_settings) : _embridge_get_selected_rendition_types($catalog_name);
    foreach ($selected_renditions as $rendtion_id) {
      $rendition_filename = _embridge_get_file_name($rendition_settings[$rendtion_id]['filename']);
      if (!empty($rendition_settings[$rendtion_id]['system'])) {
        $url = EMBRIDGE_RENDITION_URL_SYSTEM;
      }
      else {
        $url = EMBRIDGE_RENDITION_URL_APPLICATION;
      }
      $url = str_ireplace('[servername]', $server_name, $url);
      $url = str_ireplace('[catalogid]', $catalog_id, $url);
      $url = str_ireplace('[applicationid]', $application_id, $url);
      $url = str_ireplace('[sourcepath]', str_ireplace(' ', '+', $source_path), $url);
      $url = str_ireplace('[rendition_filename]', $rendition_filename, $url);
      $url = str_ireplace('[rendition_extension]', $rendition_extension, $url);
      $url = str_ireplace('[renditionid]', $rendtion_id, $url);
      $rendtion_urls[$rendtion_id] = $url;
    }
  }
  return $rendtion_urls;
}

/**
 * EnterMedia get selected rendition types.
 *
 * @param string $catalog_name
 *   Name of the catalog to upload asset.
 *
 * @return array
 *   An associative array of renditions.
 */
function _embridge_get_selected_rendition_types($catalog_name) {
  $renditions = variable_get('embridge_' . strtolower($catalog_name) . '_renditions', array());
  $selected_renditions = array();
  foreach ($renditions as $rendition_id => $rendition) {
     // Check if rendition is enabled.
    if ($rendition['selected']) {
      $selected_renditions[$rendition_id] = $rendition_id;
    }
  }
  return $selected_renditions;
}

/**
 * EnterMedia get selected rendition types for wysiwyg
 *
 * @param string $catalog_name
 *   Name of the catalog to upload asset.
 *
 * @return array
 *   An associative array of renditions.
 */
function _embridge_get_selected_wysiwyg_rendition_types($catalog_name) {
   $renditions = variable_get('embridge_' . strtolower($catalog_name) . '_renditions', array());
   $selected_renditions = array();
   foreach ($renditions as $rendition_id => $rendition) {
     // Check if rendition and wysiwyg flags are enabled.
     if ($rendition['selected'] && $rendition['wysiwyg']) {
       $selected_renditions[$rendition_id] = $rendition_id;
     }
   }
   return $selected_renditions;
}

/**
 * To pre-generate rendtions in EnterMedia for an asset.
 *
 * @param int $asset_id
 *   The record id for the EnterMedia asset.
 * @param string $catalog_id
 *   The catalog id for the EnterMedia asset.
 * @param string $source_path
 *   Source path for the EnterMedia asset.
 *
 * @return Bool
 *   Boolean indicate redition generation status.
 */
function _embridge_generate_renditions($asset_id, $catalog_id, $source_path = NULL, $fileformat = NULL) {
  $rendition_urls = array();
  $server_url = variable_get('embridge_server_url', 'http://entermedia.databasepublish.com');
  $server_port = variable_get('embridge_server_port', '8080');
  $server_name = $server_url . ($server_port ? ':' . $server_port : '');
  // Get catalog list.
  $catalogs = variable_get('embridge_catalogs', array());
  // Get catalog name.
  $catalog_name = $catalogs[$catalog_id];
  if (!$source_path) {
    // Get asset d_embridge_update_assetata from embridge table.
    $asset = _embridge_get_asset_array($asset_id, $catalog_id);
    $source_path = $asset['sourcepath'];
    $fileformat = $asset['filemime'];
  }

  $fileformat = empty($fileformat) ? strtolower(_embridge_get_file_extension($source_path)) : strtolower($fileformat);
  $rendition_extension = 'jpg';
  if (in_array($fileformat, array('png', 'gif'))) {
    $rendition_extension = $fileformat;
  }

  if ($catalog_name) {
    $rendition_settings = variable_get('embridge_' . strtolower($catalog_name) . '_renditions', array());
    $application_id = variable_get('embridge_' . strtolower($catalog_name) . '_application_id', array());
    // Get renditions enable for the catalog.
    $selected_renditions = array_keys($rendition_settings);
    foreach ($selected_renditions as $rendtion_id) {
      $rendition_filename = _embridge_get_file_name($rendition_settings[$rendtion_id]['filename']);
      if (!empty($rendition_settings[$rendtion_id]['system'])) {
        $url = EMBRIDGE_RENDITION_URL_SYSTEM;
      }
      else {
        $url = EMBRIDGE_RENDITION_URL_APPLICATION;
      }
      // DAM url.
      $url = str_ireplace('[servername]', $server_name, $url);
      $url = str_ireplace('[catalogid]', $catalog_id, $url);
      $url = str_ireplace('[applicationid]', $application_id, $url);
      $url = str_ireplace('[sourcepath]', str_ireplace(' ', '+', $source_path), $url);
      $url = str_ireplace('[rendition_filename]', $rendition_filename, $url);
      $url = str_ireplace('[rendition_extension]', $rendition_extension, $url);
      $url = str_ireplace('[renditionid]', $rendtion_id, $url);
      $rendition_urls[] = $url;
      // Generate renditions asynchronously.
      _embridge_async_curl_generate_renditions($url, EMBRIDGE_QUERY_REFERER_DEFAULT, 'true');
    }
  }
}

/**
 * Create EnterMedia search form.
 *
 * @param array $form
 *   An associative array containing form.
 * @param array $form_state
 *   An associative array containing form state.
 * @param array $search_result
 *   Markup for current search result.
 * @param string $catalog_settings
 *   An associative array containing current catalog settings.
 *
 * @return array
 *   An associative array containing the structure of the form.
 */
function embridge_search_asset_form($form, $form_state, $search_result, $catalog_settings) {
  $form = array();

  $form['#method'] = 'get';
  // Not to display search fields and buttons when parent_nid is 0
  $access = (isset($_GET['display_only'])) ? FALSE : TRUE;
  foreach ($catalog_settings['search_fields'] as $field) {
    $field['datatype'] = isset($field['datatype']) ? $field['datatype'] : '';
    switch ($field['datatype']) {
      case 'list':
      case 'multi_select_list':
        $values = _embridge_get_value_list($field['id'], $catalog_settings['id']);
        $form['ent_search[' . $field['id'] . ']'] = array(
          '#type' => 'select',
          '#title' => check_plain($field['name']),
          '#options' => $values,
          '#access' => $access,
        );
        break;

      case 'date':
        $date_range_options = array(
          '' => '',
          'before1' => '24 hours',
          'before7' => '1 week',
          'before30' => '1 month',
          'before90' => '3 months',
          'before730' => '2 years',
          '' => 'All',
        );
        $form['ent_search[' . $field['id'] . ']'] = array(
          '#type' => 'select',
          '#title' => check_plain($field['name']),
          '#options' => $date_range_options,
          '#access' => $access,
        );
        break;

      default:
        $form['ent_search[' . $field['id'] . ']'] = array(
          '#type' => 'textfield',
          '#title' => check_plain($field['name']),
          '#size' => 20,
          '#access' => $access,
        );
        break;
    }
    if (isset($_GET['ent_search'][$field['id']])) {
      $form['ent_search[' . $field['id'] . ']']['#default_value'] = $_GET['ent_search'][$field['id']];
    }
  }
  // Add full-text search field.
  $form['ent_search[description]'] = array(
    '#type' => 'textfield',
    '#title' => t('All Fields'),
    '#description' => t('(Full-text search across all fields in EnterMedia.)'),
    '#size' => 30,
  );
  if (isset($_GET['multiselect'])) {
    $form['multiselect'] = array(
      '#type' => 'hidden',
      '#value' => 1,
    );
  }
  if (isset($_GET['parent_nid'])) {
    $form['parent_nid'] = array(
      '#type' => 'hidden',
      '#value' => $_GET['parent_nid'],
    );
  }
  if (isset($_GET['display_only'])) {
    $form['display_only'] = array(
      '#type' => 'hidden',
      '#value' => $_GET['display_only'],
    );
  }
  if (isset($_GET['thumb_type'])) {
    $form['thumb_type'] = array(
      '#type' => 'hidden',
      '#value' => $_GET['thumb_type'],
    );
  }
  if (isset($_GET['clear_frame'])) {
    $form['clear_frame'] = array(
      '#type' => 'hidden',
      '#value' => $_GET['clear_frame'],
    );
  }
  if (isset($_GET['display_type'])) {
    $form['display_type'] = array(
      '#type' => 'hidden',
      '#value' => $_GET['display_type'],
    );
  }
  if (isset($_GET['embed'])) {
    $form['embed'] = array(
      '#type' => 'hidden',
      '#value' => $_GET['embed'],
    );
  }
  $form['search'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#access' => $access,
  );

  if (!empty($search_result)) {
    $multiselect = isset($_GET['multiselect']) ? $_GET['multiselect'] : FALSE;
    $thumb_type = isset($_GET['thumb_type']) ? $_GET['thumb_type'] : 'thumb';
    $display_type = isset($_GET['display_type']) ? $_GET['display_type'] : 'thumbnail';
    $form['search_result'] = array(
      '#markup' => theme('embridge_asset_search_result', array(
        'search_result' => $search_result,
        'num_results' => 10,
        'multiselect' => $multiselect,
        'catalog_settings' => $catalog_settings,
        'thumb_type' => $thumb_type,
        'display_type' => $display_type,
      )),
    );
  }
  $form['search_clear'] = array(
    '#markup' => '<div style="clear:both"></div>',
  );

  // We will hide buttons if the search form is embed or empty.
  if (!isset($_GET['embed']) && !empty($search_result->hit)) {
    $form['cancel'] = array(
      '#type' => 'button',
      '#value' => 'Cancel',
      '#attributes' => array('class' => array('search-action')),
      '#access' => $access,
    );

    $form['asset_search_save'] = array(
      '#type' => 'button',
      '#value' => 'Add',
      '#attributes' => array('class' => array('search-action')),
      '#access' => $access,
    );
  }
  return $form;
}

/**
 * Get file extension from file path.
 *
 * @param string $filepath
 *   File path.
 *
 * @return string
 *   File extension based on the file path.
 */
function _embridge_get_file_extension($filepath) {
  $path_info = pathinfo($filepath);
  return $path_info['extension'];
}

/**
 * Get time in miliseconds.
 */
function _embridge_microtime_float() {
  list($usec, $sec) = explode(" ", microtime());
  return ((float) $usec + (float) $sec);
}

/**
 * Handles the error output.
 *
 * Handles the error output. This error message will be sent to the
 * uploadSuccess event handler.
 * The event handler will have to check for any error messages and
 * react as needed.
 */
function _embridge_handle_error($message) {
  echo $message;
}
function _embridge_server_status($server_url, $server_port, $login, $password) {
  $login_url = $server_url . ':' . $server_port . EMBRIDGE_LOGIN_PATH_DEFAULT . '?catalogid=media&accountname=' . $login . '&password=' . $password;
  $xml = _embridge_curl_grab_page($server_url . ':' . $server_port . EMBRIDGE_LOGIN_PATH_DEFAULT, EMBRIDGE_QUERY_REFERER_DEFAULT, '&catalogid=media&accountname=' . $login . '&password=' . $password, 'true', 'null');
  $xml_obj = simplexml_load_string($xml);
  $xml_arr = (array) $xml_obj;
  if (!empty($xml_arr['@attributes']['stat']) && $xml_arr['@attributes']['stat'] == 'ok') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Insert asset to entermedia table.
 *
 * @param array $asset
 *   An associative array containing EnterMedia asset information.
 * @param string $catalog_id
 *   The catalog id for the EnterMedia asset.
 */
function _embridge_asset_insert($asset, $catalog_id) {
  // Adding entermedia asset data to entermedia table.
  $aid = db_query("SELECT aid FROM {entermedia} WHERE asset_id = :asset_id AND catalogid = :catalogid",
    array(':asset_id' => $asset['asset_id'], ':catalogid' => $catalog_id))->fetchField();

  if (empty($asset_id)) {
    $rendtion_urls = array(
      'thumbnail' => $asset['thumbnail'],
      'medium' => $asset['preview'],
    );
    $aid = db_insert('entermedia')
      ->fields(array(
        'asset_id' => $asset['asset_id'],
        'catalogid' => $catalog_id,
        'sourcepath' => $asset['sourcepath'],
        'title' => isset($asset['title']) ? $asset['title'] : '',
        'thumbnail' => $asset['thumbnail'],
        'preview' => $asset['preview'],
        'width' => $asset['width'],
        'height' => $asset['height'],
        'filemime' => $asset['filemime'],
        'filesize' => $asset['filesize'],
        'embedcode' => isset($asset['embedcode']) ? $asset['embedcode'] : '',
        'timestamp' => REQUEST_TIME,
      ))
    ->execute();
  }
  return $aid;
}

/**
 * Get EnterMedia asset object from entermedia table.
 *
 * @param int $aid
 *   The asset id for the EnterMedia asset.
 *
 * @return Object
 *   An object for the EnterMedia asset matched.
 */
function _embridge_get_asset_object($aid) {
  // Get asset data from entermedia table.
  $result = db_query('SELECT * FROM {entermedia} WHERE aid = :aid', array(':aid' => $aid));
  $asset = $result->fetchObject();
  return $asset;
}
/**
 * Get EnterMedia asset object by Asset Id.
 */
function _embridge_get_asset_object_by_asset_id($asset_id, $catalogid) {
  // Get asset data from entermedia table.
  $result = db_query('SELECT * FROM {entermedia} WHERE asset_id = :asset_id and catalogid = :catalogid', array(':asset_id' => $asset_id, ':catalogid' => $catalogid));
  $asset = $result->fetchObject();
  return $asset;
}
/**
 * Get EnterMedia asset in array from entermedia table.
 *
 * @param int $aid
 *   The asset id for the EnterMedia asset.
 *
 * @return array
 *   An array for the EnterMedia asset matched.
 */
function _embridge_get_asset_array($aid) {
  $asset = _embridge_get_asset_object($aid);
  return (array) $asset;
}

/**
 * Get EnterMedia asset array by Asset Id.
 */
function _embridge_get_asset_array_by_asset_id($asset_id, $catalogid) {
  $asset = _embridge_get_asset_object_by_asset_id($asset_id, $catalogid);
  return (array) $asset;
}

/**
 * Get aid from entermedia table.
 *
 * @param int $asset_id
 *   The asset id for the EnterMedia asset.
 * @param string $catalog_id
 *   The catalog id for the EnterMedia asset.
 *
 * @return string
 *   aid for the EnterMedia asset matched.
 */
function _embridge_get_asset_aid($asset_id, $catalog_id, $v) {
  $server_url = variable_get('embridge_server_url', 'http://entermedia.databasepublish.com');
  $server_port = variable_get('embridge_server_port', '8080');
  $aid = db_query('SELECT aid FROM {entermedia} WHERE asset_id = :asset_id AND catalogid = :catalogid',
    array(
      ':asset_id' => $asset_id,
      ':catalogid' => $catalog_id,
    ))->fetchField();

  if (empty($aid)) {
    $asset = array();
    $asset['aid'] = NULL;
    $asset['asset_id'] = $v['@attributes']['id'];
    $asset['title'] = isset($v['@attributes']['assettitle']) ? $v['@attributes']['assettitle'] : $v['@attributes']['name'];
    $asset['filesize'] = $v['@attributes']['filesize'];
    $asset['filemime'] = $v['@attributes']['fileformat'];
    $asset['thumbnail'] = $server_url . ':' . $server_port . $v['thumb'];
    $asset['preview'] = $server_url . ':' . $server_port . $v['preview'];
    $asset['width'] = isset($v['@attributes']['width']) ? $v['@attributes']['width'] : 0;
    $asset['height'] = isset($v['@attributes']['height']) ? $v['@attributes']['height'] : 0;
    $asset['embedcode'] = isset($v['@attributes']['embedcode']) ? $v['@attributes']['embedcode'] : '';
    $asset['sourcepath'] = $v['@attributes']['sourcepath'];
    // Get all renditions for asset.
    _embridge_generate_renditions($v['@attributes']['id'], $catalog_id, $v['@attributes']['sourcepath'], $v['@attributes']['fileformat']);
    $renditions = _embridge_get_rendition_list($v['@attributes']['id'], $catalog_id, $v['@attributes']['sourcepath'], $v['@attributes']['fileformat'], TRUE);
    if (!empty($renditions['thumb'])) {
      $asset['thumbnail'] = $renditions['thumb'];
    }

    if (!empty($renditions['medium'])) {
      $asset['preview'] = $renditions['medium'];
    }

    // Adding entermedia asset data to entermedia table.
    $aid = _embridge_asset_insert($asset, $catalog_id);

    // Update the custom fields when embridge_metadata module is enabled.
    if (module_exists('embridge_metadata')) {
      $catalog_tokens = explode('/', $catalog_id);
      $catalog_name = array_pop($catalog_tokens);
      $updatable_fields = embridge_metadata_get_updatable_fields($catalog_name);
      $table_fields_values = array();
      foreach ($updatable_fields as $id => $updatable_field) {
        $table_id = str_replace('-', '_', $id);
        $field_id = $id . 'id';
        if (isset($v['@attributes'][$field_id])) {
          $table_fields_values[$table_id] = $v['@attributes'][$field_id];
        }
        elseif (isset($v['@attributes'][$id])) {
          $table_fields_values[$table_id] = $v['@attributes'][$id];
        }
      }
      if (!empty($table_fields_values)) {
        db_update('entermedia')
          ->fields($table_fields_values)
          ->condition('aid', $aid)
          ->execute();
      }
    }
  }
  return $aid;
}

/**
 * Get thumbnail url from entermedia table.
 *
 * @param int $asset_id
 *   The asset id for the EnterMedia asset.
 * @param string $catalog_id
 *   The catalog id for the EnterMedia asset.
 *
 * @return string
 *   Thumbnail url for the EnterMedia asset matched.
 */
function _embridge_get_asset_thumbnail($asset_id, $catalog_id) {
  $thumbnail = db_query('SELECT thumbnail FROM {entermedia} WHERE asset_id = :asset_id AND catalogid = :catalogid',
    array(
      ':asset_id' => $asset_id,
      ':catalogid' => $catalog_id,
    ));
  return $thumbnail;
}

/**
 * Get preview url from entermedia table.
 *
 * @param int $asset_id
 *   The asset id for the EnterMedia asset.
 * @param string $catalog_id
 *   The catalog id for the EnterMedia asset.
 *
 * @return string
 *   Preview url for the EnterMedia asset matched.
 */
function _embridge_get_asset_preview($asset_id, $catalog_id) {
  $thumbnail = db_query('SELECT preview FROM {entermedia} WHERE asset_id = :asset_id AND catalogid = :catalogid',
    array(
      ':asset_id' => $asset_id,
      ':catalogid' => $catalog_id,
    ));
  return $thumbnail;
}

/**
 * Override or insert variables into the page template.
 */
function embridge_preprocess_page(&$vars) {
  // Use a sparate page template for pages embedded in iframe.
  if (arg(0) == 'embridge' && arg(1) == 'upload') {
    $vars['theme_hook_suggestions'][] = 'page__embridge__search';
  }
}

/**
 * Override or insert variables into the page template.
 */
function embridge_preprocess_html(&$vars) {
  // Use a sparate page template for pages embedded in iframe.
  if (isset($_REQUEST['clear_frame'])) {
    $vars['theme_hook_suggestions'][] = 'html__embridge';
    module_invoke('admin_menu', 'suppress');
  }
}
/**
 * EMBridge Theme Registry.
 */
function embridge_theme_registry_alter(&$theme_registry) {
  // Create a variable to store the path to this module.
  $file_path = drupal_get_path('module', 'entermedia');
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'embridge_theme', $file_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  // A list of templates the module will provide templates for.
  $hooks = array('html', 'page');
  foreach ($hooks as $h) {
    // Add the key 'theme paths' if it doesn't exist in this theme's registry.
    if (!isset($theme_registry[$h]['theme paths'])) {
      $theme_registry[$h]['theme paths'] = array();
    }
    // Shift this module's directory to the top of the theme path list.
    if (is_array($theme_registry[$h]['theme paths'])) {
      $first_element = array_shift($theme_registry[$h]['theme paths']);
      if ($first_element) {
        array_unshift($theme_registry[$h]['theme paths'], $first_element, $file_path);
      }
      else {
        array_unshift($theme_registry[$h]['theme paths'], $file_path);
      }
    }
  }
}

/**
 * EMBridge call async curl grab page get.
 */
function _embridge_async_curl_grab_page_get($url, $ref_url, $login) {
  $script = drupal_get_path('module', 'entermedia') . '/scripts/embridge_async_curl.php';
  exec('nohup php ./' . $script . ' \'' . $url . '\' \'' . $ref_url . '\' \'' . $login . '\' > /dev/null 2>&1 &', $array);
}

/**
 * EMBridge call async curl generate renditions.
 */
function _embridge_async_curl_generate_renditions($url, $ref_url, $login) {
  $script = drupal_get_path('module', 'entermedia') . '/scripts/embridge_async_rendition_call.php';
  exec('nohup php ./' . $script . ' \'' . $url . '\' \'' . $ref_url . '\' \'' . $login . '\' > /dev/null 2>&1 &', $array);
}
