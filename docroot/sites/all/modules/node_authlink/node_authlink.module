<?php
// $Id$

/**
 * Alter of node_type_form.
 */
function node_authlink_form_node_type_form_alter(&$form, &$form_state) {
  $form['node_authlink'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node authorize link'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
  );
  
  $form['node_authlink']['node_authlink_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable'),
    '#default_value' => variable_get('node_authlink_enable_' . $form['#node_type']->type, FALSE),
    '#description' => t('Disable of this feature will cost erase of authorization keys of all nodes in this node type.'),
  );
  
  $form['node_authlink']['node_authlink_grants'] = array(
    '#type' => 'checkboxes', 
    '#title' => t('Grants to give'), 
    '#default_value' => variable_get('node_authlink_grants_' . $form['#node_type']->type, array()),
    '#options' => array(
      'view' => t('View'),
      'update' => t('Update'), 
      'delete' => t('Delete'), 
    ),
    '#description' => t('What operations will be temporarily given to authorised user for the node. This not affect users who is authorised yet.'),
  );
  
  // Time periods:                 none, 1 day, 1 week, 4 weeks
  $period = drupal_map_assoc(array(0,    86400, 604800, 2419200), 'format_interval');
  $period[0] = '<' . t('disabled') . '>';
  $form['node_authlink']['node_authlink_expire'] = array(
    '#type' => 'select', 
    '#title' => t('Regenerate authkeys after'), 
    '#default_value' => variable_get('node_authlink_expire_' . $form['#node_type']->type, 0),
    '#options' => $period,
    '#description' => t('Keys older than selected time will be regenerated by cron run.'),
  );
  
  $form['node_authlink']['node_authlink_batch'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#title' => t('Batch operations'),
    '#description' => t('Affects all nodes in this node type.'),
  );
  $form['node_authlink']['node_authlink_batch']['generate'] = array(
    '#type' => 'submit',
    '#value' => t('Generate authkeys'),
    '#submit' => array('node_authlink_batch_generate'),
  );
  $form['node_authlink']['node_authlink_batch']['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete all authkeys'),
    '#submit' => array('node_authlink_batch_delete'),
  );
  
  $form['#submit'][] = 'node_authlink_form_node_type_form_alter_submit';
}

/**
 * Submit for node_type_form.
 */
function node_authlink_form_node_type_form_alter_submit(&$form, &$form_state) {
  // Disabled
  if(!$form_state['values']['node_authlink_enable']) {
    variable_del('node_authlink_enable_' . $form_state['values']['type']);
    variable_del('node_authlink_grants_' . $form_state['values']['type']);
  }
}

/**
 * Generate authkeys for all nodes in node type.
 */
function node_authlink_batch_generate(&$form, &$form_state) {
  // Load NIDs that are not in the authkeys table 
  $query = db_select('node', 'n');
  $query->leftJoin('node_authlink_nodes', 'a', 'n.nid = a.nid');
  $query->fields('n', array('nid'))
    ->condition('type', $form_state['values']['type'])
    ->isNull('authkey');
  $nids = $query->execute()->fetchCol();
  
  // Create keys
  foreach ($nids as $nid)
    node_authlink_node_insert($nid);
  
  drupal_set_message(t('%num authkeys has been generated.', array('%num' => count($nids))));
}

/**
 * Delete authkeys for all nodes in node type.
 */
function node_authlink_batch_delete(&$form, &$form_state) {
  // NIDs of nodes that are in this node type
  $query = db_select('node', 'n');
  $query->leftJoin('node_authlink_nodes', 'a', 'n.nid = a.nid');
  $query->fields('n', array('nid'))
    ->condition('type', $form_state['values']['type'])
    ->isNotNull('authkey');
  $nids = $query->execute()->fetchCol();
  
  // Delete keys
  $count = db_delete('node_authlink_nodes')
    ->condition('nid', $nids, 'IN')
    ->execute();
  
  drupal_set_message(t('%num authkeys has been deleted.', array('%num' => $count)));
}


/**
 * Implementation of hook_node_load().
 *
 * Appends authke to loaded node object.
 */
function node_authlink_node_load($nodes, $types) {
  foreach ($nodes as $nid => $node) {
    // TODO: check node type (performance)
    if($authkey = node_authlink_load_authkey($nid))
      $nodes[$nid]->authkey = $authkey;
  }
}

/**
 * Loads key from NID.
 */
function node_authlink_load_authkey($nid) {
  $result = db_query('SELECT authkey FROM {node_authlink_nodes} WHERE nid = :nid', array(':nid' => $nid));
  return $result->fetchField();
}


/**
 * Get edit URL of specified node.
 * @param $node Node object or NID.
 * @param $op Operation to do with node. view, edit (default) or delete. 
 */
function node_authlink_get_url($node, $op = 'edit') {
  if(is_numeric($node))
    $node = node_load($node);
  
  if(!isset($node->authkey))
    return FALSE;
  
  if($op == 'view')
    $op = '';
  else
    $op = '/' . $op;
  
  return url("node/$node->nid$op", array(
    'absolute' => TRUE,
    'query' => array('authkey' => $node->authkey),
  ));
}

/**
 * Implementation of hook_node_access().
 */
function node_authlink_node_access($node, $op, $account) {
  // Ignore if just creating node
  if($op == 'create')
    return NODE_ACCESS_IGNORE;
  
  // Ignore if node type is not enabled
  if(!variable_get('node_authlink_enable_' . $node->type, FALSE))
    return NODE_ACCESS_IGNORE;
  
  // Check key if:
  if(isset($_GET['authkey']) && // authkey param is set
     isset($node->authkey)) { // authkey in node is set
    
    if($node->authkey == $_GET['authkey']) {
      // Start session
      if(!isset($_SESSION))
        drupal_session_initialize();
      
      // Save allowed grants to session
      $_SESSION['node_authlink_nodes'][$node->nid] = variable_get('node_authlink_grants_' . $node->type, array());
    }
  }
  
  // Permit if checked
  if(isset($_SESSION['node_authlink_nodes'][$node->nid]) &&
     in_array($op, $_SESSION['node_authlink_nodes'][$node->nid]))
    return NODE_ACCESS_ALLOW;
}

/**
 * Implementation of hook_node_presave().
 *
 * Pre-generate auth key for the new node (e.g. for use in Rules).
 */
function node_authlink_node_presave($node) {
  // Ignore if node type is disabled
  if(!variable_get('node_authlink_enable_' . $node->type, FALSE))
    return;
  
  // Generate key
  $node->authkey = hash('sha256', drupal_random_bytes(64));
}

/**
 * Implementation of hook_node_insert().
 *
 * Generate and save auth key for the new node.
 */
function node_authlink_node_insert($node) {
  // Allow key generate without load node object
  if(is_numeric($node))
    $nid = $node;
  else {
    $nid = $node->nid;
    
    // Ignore if node type is disabled
    if(!variable_get('node_authlink_enable_' . $node->type, FALSE))
      return;
  }
  
  // Generate key if not yet
  $authkey = isset($node->authkey) ? $node->authkey : hash('sha256', drupal_random_bytes(64));
  
  // Save to DB
  db_insert('node_authlink_nodes')
    ->fields(array(
      'nid' => $nid, 
      'authkey' => $authkey,
      'created' => time(),
    ))
    ->execute();
}

/**
 * Implementation of hook_cron().
 */
function node_authlink_cron() {
  $node_types = node_type_get_types();
  
  foreach ($node_types as $type) {
    $expire = variable_get('node_authlink_expire_' . $type->type, 0);
    if(!$expire)
      continue;
    
    // NIDs of expired keys
    $query = db_select('node', 'n');
    $query->leftJoin('node_authlink_nodes', 'a', 'n.nid = a.nid');
    $query->fields('n', array('nid'))
      ->condition('n.type', $type->type)
      ->condition('a.created', time() - $expire, '<');
    $nids = $query->execute()->fetchCol();
    
    // Regenerate keys
    foreach ($nids as $nid) {
      db_delete('node_authlink_nodes')
        ->condition('nid', $nid)
        ->execute();
      node_authlink_node_insert($nid);
    }
  }
}

/**
 * Implementation of hook_token_info().
 */
function node_authlink_token_info() {
  $node['authlink:authkey'] = array(
    'name' => t("Authorization key"), 
    'description' => t("Key generated by Node authorize link module."),
  );
  $node['authlink:view-url'] = array(
    'name' => t("View URL"), 
    'description' => t("URL with authorization key."),
  );
  $node['authlink:edit-url'] = array(
    'name' => t("Edit URL"), 
    'description' => t("URL with authorization key."),
  );
  $node['authlink:delete-url'] = array(
    'name' => t("Delete URL"), 
    'description' => t("URL with authorization key."),
  );

  return array(
    'tokens' => array('node' => $node),
  );
}

/**
 * Implementation of hook_tokens().
 */
function node_authlink_tokens($type, $tokens, array $data = array(), array $options = array()) {
  if($type != 'node')
    return;
  
  //dpm(func_get_args());
  
  $replacements = array();
  
  if(isset($tokens['authlink:authkey']))
    $replacements['[node:authlink:authkey]'] = $data['node']->authkey;
    
  if(isset($tokens['authlink:view-url']))
    $replacements['[node:authlink:view-url]'] = node_authlink_get_url($data['node'], 'view');
  
  if(isset($tokens['authlink:edit-url']))
    $replacements['[node:authlink:edit-url]'] = node_authlink_get_url($data['node'], 'edit');
  
  if(isset($tokens['authlink:delete-url']))
    $replacements['[node:authlink:delete-url]'] = node_authlink_get_url($data['node'], 'delete');
  
  return $replacements;
}


