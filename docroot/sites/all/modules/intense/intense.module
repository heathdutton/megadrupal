<?php
/**
 * @file
 * Provides Intense images integration.
 */

/**
 * Implements hook_theme().
 */
function intense_theme() {
  return array(
    'intense' => array(
      'render element' => 'element',
      'file' => 'intense.theme.inc',
    ),
  );
}

/**
 * Implements hook_library().
 */
function intense_library() {
  $path = drupal_get_path('module', 'intense');
  $libraries['intense'] = array(
    'title' => 'Intense',
    'website' => 'https://github.com/tholman/intense-images/',
    'version' => '1.x',
    'js' => array(
      libraries_get_path('intense') . '/intense.min.js'  => array(),
      $path . '/js/intense.load.min.js'  => array(),
    ),
    'css' => array(
      $path . '/css/intense.css' => array(),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_field_formatter_info().
 */
function intense_field_formatter_info() {
  return array(
    'intense' => array(
      'label'       => t('Intense images'),
      'field types' => array('image'),
      'settings'    => array('image_style' => '', 'intense_style' => '', 'caption' => array()),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function intense_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display      = $instance['display'][$view_mode];
  $settings     = $display['settings'];
  $image_styles = image_style_options(FALSE, PASS_THROUGH);

  $element['image_style'] = array(
    '#title'         => t('Image style'),
    '#type'          => 'select',
    '#default_value' => $settings['image_style'],
    '#empty_option'  => t('None (original image)'),
    '#options'       => $image_styles,
    '#description'   => t('The content image style.'),
  );

  // @todo Picture integration.
  $element['intense_style'] = array(
    '#title'         => t('Intense image style'),
    '#type'          => 'select',
    '#default_value' => $settings['intense_style'],
    '#empty_option'  => t('None (original image)'),
    '#options'       => $image_styles,
    '#description'   => t('The fullscreen image style. Be sure the image is large enough for a fullscreen. Leave empty to use original image.'),
  );

  $element['caption'] = array(
    '#title'         => t('Captions'),
    '#type'          => 'checkboxes',
    '#default_value' => $settings['caption'],
    '#options'       => array('title' => t('Title'), 'alt' => t('Alt')),
    '#description'   => t('The caption to display over the fullscreen intense image. Leave empty to not use captions.'),
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function intense_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display  = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary  = array();

  $image_styles = image_style_options(FALSE, PASS_THROUGH);
  unset($image_styles['']);

  $image_setting   = $settings['image_style'];
  $intense_setting = $settings['intense_style'];
  $original        = t('None (original image)');
  $image_style     = isset($image_styles[$image_setting]) ? $image_styles[$image_setting] : $original;
  $intense_style   = isset($image_styles[$intense_setting]) ? $image_styles[$intense_setting] : $original;
  $caption         = array_filter($settings['caption']);

  $summary[] = t('Image style: @style', ['@style' => $image_style]);
  $summary[] = t('Intense image style: @style', ['@style' => $intense_style]);
  $summary[] = t('Caption: @caption', ['@caption' => $caption ? implode(', ', $caption) : t('None')]);

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function intense_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element       = array();
  $settings      = $display['settings'];
  $intense_style = $settings['intense_style'];

  if (count($items) < 1) {
    return $element;
  }

  foreach ($items as $delta => $item) {
    $url = file_create_url($item['uri']);

    if (!empty($intense_style)) {
      $url = image_style_url($intense_style, $item['uri']);
    }

    $item_attributes = isset($item['attributes']) ? $item['attributes'] : array();
    if (!empty($settings['caption'])) {
      foreach (array_filter($settings['caption']) as $caption) {
        if (!empty($item[$caption])) {
          $data = $caption == 'alt' ? 'caption' : 'title';
          // This is sanitized by drupal_attributes().
          $item_attributes['data-' . $data] = $item[$caption];
        }
      }
    }

    $element[$delta] = array(
      '#theme' => 'intense',
      '#item' => $item,
      '#item_attributes' => $item_attributes,
      '#settings' => $settings,
      '#url' => $url,
    );
  }

  $element['#attached']['library'][] = array('intense', 'intense');
  return $element;
}

/**
 * Implements hook_help().
 */
function intense_help($path, $arg) {
  switch ($path) {
    case 'admin/help#intense':
      return check_markup(file_get_contents(dirname(__FILE__) . "/README.txt"));
  }
}
