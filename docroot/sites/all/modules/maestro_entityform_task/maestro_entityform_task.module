<?php


/**
 * @file
 * maestro_entityform_task.module
 */

include_once './' . drupal_get_path('module', 'maestro_entityform_task') . '/maestro_entityform_task.handlers.inc';

/**
 * Implements hook_menu()
 */
function maestro_entityform_task_menu() {
  $items = array();
  // Define handler to view the entity in a ctools modal dialog
  $items['maestro/entityform_viewdialog/%/%ctools_js'] = array(
      'title' => 'View Entity Form',
      'page callback' => 'maestro_entityform_viewdialog',
      'page arguments' => array(2,3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );

  return $items;
}


/* Implements HOOK_theme
 * Theme functions and templates to view and edit a task
 * in the workflow editor
 */
function maestro_entityform_task_theme() {
  return array(
    'maestro_task_entityform' => array(
      'template' => 'theme/maestro-task-entityform',
      'variables' => array('tdid' => NULL)
    ),
    'maestro_task_entityform_edit' => array(
      'template' => 'theme/maestro-task-entityform-edit',
      'variables' => array('tdid' => NULL, 'td_rec' => NULL)
    ),
  );
}



/**
 * Implements hook_form_alter()
 *
 * For entityforms types managed by Maestro, sets custom submit handler
 */
function maestro_entityform_task_form_alter(&$form, $form_state, $form_id) {
  /* Determine if the cached list of entityforms being used by configured maestro workflow templates is setup. */
  $maestro_entityforms = cache_get('maestro_entityforms');
  if ($maestro_entityforms === FALSE) {  // if not set - scan templates for unique entityforms
    $entityforms = array();
    $query = db_select('maestro_template_data', 'template_data');
    $query->addField('template_data', 'id');
    $query->addField('template_data', 'task_data', 'task_data');
    $query->condition('task_class_name', 'MaestroTaskTypeEntityform', '=');
    $res = $query->execute();
    foreach ($res as $rec) {
      $data = unserialize($rec->task_data);
      if (!empty($data['entityform_id']) AND !in_array("{$data['entityform_id']}_entityform_edit_form", $entityforms)) {
        $entityform_id = "{$data['entityform_id']}_entityform_edit_form";
        $entityforms[] = $entityform_id;
      }
    }
    cache_set('maestro_entityforms', $entityforms);
    $maestro_entityforms = $entityforms;
  }
    else {
    $maestro_entityforms = ($maestro_entityforms->data);
  }

  if (in_array($form_id, $maestro_entityforms)) {
    //Determine the submit key name in the $form array
    $submitkey = '';
    foreach ($form['actions'] as $key => $field) {
      if (isset($field['#type']) AND $field['#type'] == 'submit') {
        $submitkey = $key;
      }
    }
    $request = urldecode(request_uri());
    $requestParms = explode('/', $request);
    $maestroIndex=-1;
    foreach ($requestParms as $index => $val) {
      if ($val == 'maestro') {
        $maestroIndex = $index;
        //removed the break, because we are looking for the last occurrance
        //of 'maestro' in the requestParms.
      }
    }
    if ($maestroIndex >= 2) { //really only applies if your site is named maestro, ie localhost/maestro, but a valid index should be around 5
      if (isset($requestParms[$maestroIndex]) AND $requestParms[$maestroIndex] == 'maestro' AND isset($requestParms[$maestroIndex + 1])) {
        if ($requestParms[$maestroIndex + 1] == 'edit' AND intval($requestParms[$maestroIndex + 2] > 0)) {
          $form['maestro_taskid'] = array(
            '#value'  => intval($requestParms[$maestroIndex + 2]),
            '#type'   => 'hidden',
          );
          // The extra option is added to the URL via MaestroTaskTypeEntityform->getTaskConsoleURL()
          // Clicking on a EDIT Form as a direct task - should complete the task on submit.
          if (isset($requestParms[$maestroIndex + 3]) AND strpos($requestParms[$maestroIndex + 3], 'completeonsubmit') !== FALSE) {
            $form['maestro_completeonsubmit'] = array(
              '#value'  => 1,
              '#type'   => 'hidden',
            );
          }
        }
        else {
          $form['maestro_taskid'] = array(
            '#value'  => intval($requestParms[$maestroIndex + 1]),
            '#type'   => 'hidden',
          );
        }
        /** Overwrite the default node submission handler with our own.
         * Had a real issue getting this to work as the available docs indicate
         * $form['#submit'][] = 'maestro_entityform_form_submit';
         * should work but the default node submit handler 'node_form_submit()' would always be used.
         * Posted to rfay's blog: http://randyfay.com/node/66
         * On IRC, DamZ recommended this syntax which works
         */
        if (!empty($submitkey)) {
          $form['actions'][$submitkey]['#submit'][] = 'maestro_entityform_form_submit_handler';
        }
      }
    }
    elseif (array_key_exists('complete form', $form_state) && array_key_exists('maestro_taskid', $form_state['complete form'])) {
      /** If there is a get/post action called, such as when an attachment field's upload button is clicked,
       * we need to re-add the fields to the form. so we check the form_state to see if the previous values
       * there so that we know it is a maestro entity type task form we are dealing with.
       */
      if (!empty($submitkey)) {
        $form['actions'][$submitkey]['#submit'][] = 'maestro_entityform_form_submit_handler';
      }
      $form['maestro_taskid'] = array(
        '#value'  => $form_state['complete form']['maestro_taskid']['#value'],
        '#type'   => 'hidden',
      );
      if (array_key_exists('maestro_completeonsubmit', $form_state['complete form'])) {
        $form['maestro_completeonsubmit'] = array(
          '#value'  => $form_state['complete form']['maestro_completeonsubmit']['#value'],
          '#type'   => 'hidden',
        );
      }
    }

  }
}

/**
 * Custom submit handler for entitys managed by Maestro
 * Provides redirection to the Maestro task console
 *
 * @see maestro_form_alter()
 */
function maestro_entityform_form_submit_handler($form, &$form_state) {
  if (isset($form_state['values']['maestro_taskid'])) {
    // Need to determine if this is a new submission or an update
    $taskid = $form_state['values']['maestro_taskid'];
    $submission_id = $form_state['entityform']->entityform_id;

    $data = array('id' => $submission_id);

    // Determine if we need to insert or update the submission where $webform_submission_id is unique
    $query = db_select('maestro_project_content', 'a');
    $query->addField('a', 'id');
    $query->condition('a.content_type', 'entityform', '=');
    $query->condition('a.nid', $submission_id, '=');
    $res = $query->execute();
    $reccount = $query->countQuery()->execute()->fetchField();
    if ($reccount == 0) {
      $task = new MaestroTaskTypeEntityform;
      $task->processContent($taskid, 'insert', $data);
    } else {
      // Extra form field set by maestro_form_alter if taskconsole task is a contentType task - Edit operation
      // Inline tasks that prompt user to review/edit a node (contentType) may also redirect user to Edit but
      // It's up to the interactiveFunction's code to complete that task.
      // Usually after someone clicks on 'accept' or 'reject' in the custom interactiveFunctions inline action form.
      if (isset($form_state['values']['maestro_completeonsubmit']) AND $form_state['values']['maestro_completeonsubmit'] == 1) {

        // Initiate the maestro workflow engine and complete the task
        $maestro = Maestro::createMaestroObject(1);
        $queue_id = intval($taskid);
        $maestro->engine()->completeTask($queue_id);
      }
    }

  }

  $form_state['redirect'] = 'maestro/taskconsole';
}


/* Handles the rendering of the entityform for the Ctools modal dialog that is used
 * in the task details 'content' area to view the node attached to the workflow
 * Called from the menu handler function.
 */
function maestro_entityform_viewdialog($sid,$ajax) {
  // if user has js enabled...
  ctools_include('modal');
  ctools_include('ajax');
  drupal_add_css(drupal_get_path('module', 'maestro') . '/css/maestro_ctools.css');
  if ($ajax) {
    if ($sid > 0) {
      $entity = entityform_load($sid);
      $entityform_type = entityform_get_types($entity->type);
      $title = $entityform_type->label;
      $content = entityform_page_view($entity);
    }
    else {
      $content = t('Invalid entity');
      $title = t('Error');
    }
    ctools_modal_render($title, $content);

  } else {
      $node = node_load($nid);
      $title = $node->title;
      unset($node->title);
      $content = drupal_render(node_view($node));
  }

}


/**
 * Maestro Hooks
 */

/**
* Implementation of hook_maestro_get_taskobject_info().
*
* Registers task type
*/
function maestro_entityform_task_maestro_get_taskobject_info() {
  $options = array(
    array('display_name' => t('Entityform Task'),
      'class_name' => 'MaestroTaskInterfaceEntityform'
    ),
  );
  return $options;
}



/**
* Implementation of hook_maestro_set_process_variable_methods().
*
* Registers available methods available to set a process variable
* for the code maestro setProcessVariable task type
*/
function maestro_entityform_task_maestro_set_process_variable_methods() {
  return array(
    'maestro_entityform_task' => array (
      'title' => t('Entityform Field value'),
      'description' => t('Instance Name:Field Name:Field# - where Field# is only required for multifield values'),
      'engine_handler' => 'maestro_entityform_task_maestro_set_process_variable_handler'
    ),
  );
}


/* Maestro function that provides an option for the Set Process Variable task to
 * set a workflow process variable to a value from a entityform field
 */
function maestro_entityform_task_maestro_set_process_variable_handler(&$task, $current_value, $arg) {

  $args = explode(':', $arg);
  $instance_name = $args[0];
  $field_name = $args[1];
  $field_instance = 0;
  if (isset($args[2]) AND !empty($args[2])) {
    $field_instance = $args[2];
  }
  $retval = '';

  $tracking_id = db_select('maestro_process')
    ->fields('maestro_process', array('tracking_id'))
    ->condition('id', $task->_properties->process_id, '=')
    ->execute()->fetchField();

  $rec = db_select('maestro_project_content', 'a')
    ->fields('a', array('nid'))
    ->condition('tracking_id', $tracking_id, '=')
    ->condition('instance_name', $instance_name, '=')
    ->execute()->fetchObject();

  if (isset($rec->nid) AND $rec->nid > 0) {
    $entity = entityform_load($rec->nid);
    $wrapper = entity_metadata_wrapper('entityform', $entity);
    $field_value = $wrapper->$field_name->value();
    if(is_object($field_value)) {
      $retval = $field_value->$field_instance;
    } elseif (is_array($field_value)) {
      $retval = $field_value[$field_instance];
    } elseif(!empty($field_value)) {
      $retval = $field_value;
    }
  }

  return $retval;

}

