<?php
/**
 * @file
 * Implementation file for the dgoto module.
 */

/**
 * Defines the URL to use for Drupal.org
 */
define('DGOTO_DRUPAL_HOME', 'https://drupal.org/');

/**
 * Define the API home page URL.
 */
define('DGOTO_DRUPAL_API_HOME', 'https://api.drupal.org/');

/**
 * Define the Groups home page URL.
 */
define('DGOTO_DRUPAL_GROUPS_HOME', 'https://groups.drupal.org/');

/**
 * Implements hook_init().
 */
function dgoto_init() {
  global $base_url;

  if ($base_url === variable_get('dgoto_admin_url', 'http://admin.dgo.to')) { 
    return; 
  }

  $request_uri = request_uri();

  if ($request_uri === '/') {
    return;
  }

  // Do some cleanup to make things easier.
  // API Function: dgo.to/hook_menu? map to /a/*.
  if (substr($request_uri, -1) === '?') {
    $request_uri = '/a' . $part = substr($request_uri, 0, -1);
  }

  // If we have measurement, track it.
  if (module_exists('measurement_protocol')) {
    $track = array(
      'page' => $request_uri,
      'referrer' => $_SERVER['HTTP_REFERER']
    );
    mptph($track);
  }

  $parts = explode('/', substr(html_entity_decode($request_uri), 1));

  // Drupal.org node number: dgo.to/####### (e.g. dgo.to/783692).
  if (is_numeric($parts[0])) {
    $comment_hash = '';
    if (isset($parts[1]) && is_numeric($parts[1])) {
      $comment_hash = '#comment-' . $parts[1];
    }
    drupal_goto(DGOTO_DRUPAL_HOME . 'node/' . $parts[0] . $comment_hash);
  }
  // Fool-proof API linking: dgo.to/a/hook_menu.
  elseif ($parts[0] === 'a') {
    drupal_goto(DGOTO_DRUPAL_API_HOME . $parts[1]);
  }
  // Groups.
  elseif ($parts[0] === 'g') {
    drupal_goto(DGOTO_DRUPAL_GROUPS_HOME . $parts[1]);
  }
  // Project linking: dgo.to/views.
  elseif (count($parts) === 1 && substr($parts[0], 0, 1) !== '@') {
    $project_name = dgoto_match_shortcuts($parts[0]);
    drupal_goto(DGOTO_DRUPAL_HOME . 'project/' . $project_name);
  }
  elseif (count($parts) === 2 && substr($parts[0], 0, 1) !== '@' && in_array($parts[1], array('docs'))) {
    $project_name = dgoto_match_shortcuts($parts[0]);
    $docs_link = _dgoto_search_for_docs_or_readme_link($project_name);
    drupal_goto($docs_link);
  }
  // Username linking: dgo.to/@nvahalik.
  elseif (count($parts) == 1 && substr($parts[0], 0, 1) === '@') {
    $user = urlencode(substr(urldecode($parts[0]), 1));
    $uid = dgoto_find_user($user);

    // Forward to the user if we find them, the search page otherwise.
    drupal_goto(DGOTO_DRUPAL_HOME . ($uid  ? 'user/' . $uid : 'search/user/' . $user));
  }
  // Username linking: dgo.to/s/dc_billing_copy.
  elseif ($parts[0] === 's') {
    $sandbox_name = $parts[1];
    $sandbox = dgoto_find_sandbox($sandbox_name);

    // Forward to the user if we find them, the search page otherwise.
    drupal_goto(DGOTO_DRUPAL_HOME . ($sandbox  ? 'sandbox/' . $sandbox : 'search/site/' . $sandbox_name));
  }
  // Project issue queue: dgo.to/i/views
  elseif ($parts[0] == 'i') {
    $project_name = dgoto_match_shortcuts($parts[1]);
    drupal_goto(DGOTO_DRUPAL_HOME . 'project/issues/' . $project_name);
  }
  // Comments
  elseif ($parts[0] === 'c') {
    // This appears to be the way permalinks now work.
    drupal_goto(DGOTO_DRUPAL_HOME . 'comment/' . $parts[1] . '#comment-' . $parts[1]);
  }
  // IRC handle lookup.
  elseif ($parts[0] === 'irc') {
    $uid = dgoto_find_ircnick($parts[1]);

    // Forward to the user if we find them, the search page otherwise.
    drupal_goto(DGOTO_DRUPAL_HOME . ($uid  ? 'user/' . $uid : 'search/drupalorg/' . $parts[1]));
  }
  else {
    // Log strange request and go to the homepage.
    watchdog('dgoto', 'Got a strange request: %req', array('%req' => $request_uri), WATCHDOG_INFO);
    if (module_exists('measurement_protocol')) {
      mpte('Error', 'Bad Request', $request_uri);
    }
    drupal_goto();
  }
}

/**
 * Returns the uid of the user name passed or FALSE.
 * 
 * @param string $user
 * @return uid or FALSE
 */
function dgoto_find_user($user) {
  $uid = FALSE;
  $users = cache_get('@users');

  $users = ($users == NULL || !is_array($users->data)) ? array() : $users->data;

  if (($uid = array_search($user, $users)) === FALSE) {
    // Load the page.
    $search_page = drupal_http_request(DGOTO_DRUPAL_HOME . 'search/user/' . $user);

    // Look for the UID in the page.
    $uid = _dgoto_search_for_username_in_drupal_search_page($user, $search_page->data);

    if (!$uid) {
      // Try the other search pages.
      preg_match_all('@href="/search/user/' . $user . '\?page=(\d+)@i', $search_page->data, $matches);

      $page_nos = array_unique($matches[1]);
      sort($page_nos);

      // By this point, we've searched the first page (?page=0).  Now we go through the rest
      // of the pages in the results to see if we can find them.
      if (count($page_nos) > 1) {
        foreach ($page_nos as $page_number) {
          $search_page = drupal_http_request(DGOTO_DRUPAL_HOME . 'search/user/' . $user . '?page=' . $page_number);

          if ($uid = _dgoto_search_for_username_in_drupal_search_page($user, $search_page->data)) {
            break;
          }
        }
      }
    }
  }

  // Save what we found to the cache.
  if ($uid) {
    $users[$uid] = $user;
    cache_set('@users', $users);
  }

  return $uid;
}

/**
 * Looks for a drupal.org username in a search results page.
 *
 * @param string $name 
 * @param string $content 
 * @return uid or FALSE
 */
function _dgoto_search_for_username_in_drupal_search_page($user, $content) {
  // Look for a URL going to a user matching that exact name.
  preg_match_all('@<a href="' . DGOTO_DRUPAL_HOME . 'user/(\d+)">' . $user . '</a>@i', $content, $matches);

  if (count($matches[0]) > 0) {
    return $matches[1][0];
  }

  return FALSE;
}

/**
 * Looks for a handle.
 *
 * @param string $handle 
 * @return uid or FALSE
 */
function dgoto_find_ircnick($handle) {
  $users = cache_get('@ircusers');

  $users = ($users == NULL || !is_array($users->data)) ? array() : $users->data;

  if (($uid = array_search($handle, $users)) === FALSE) {
    $search_page = drupal_http_request(DGOTO_DRUPAL_HOME . 'search/drupalorg/' . urlencode($handle));

    $uid = _dgoto_search_for_username_in_drupal_search_page($user, $search_page->data);

    preg_match_all('@<a href="/user/(\d*)">.*</a>@i', $a, $matches);
    if (count($matches[0]) > 0) {
      $uid = $matches[1][0];
      $users[$uid] = $handle;
      cache_set('@ircusers', $users);
    }
  }
}

/**
 * Returns a new project if the project name has a shortcut, false otherwise.
 *
 * @param string $project_name 
 * @return string | FALSE
 */
function dgoto_match_shortcuts($project_name) {
  $shortcuts = array(
    'views_bulk_operations' => 'vbo',
  );

  return (($new_project_name = array_search($project_name, $shortcuts)) !== FALSE) ? $new_project_name : $project_name;
}


/**
 * Returns the path of the sandbox passed or FALSE.
 * 
 * @param string $standbox
 * @return int or FALSE
 */
function dgoto_find_sandbox($sandbox) {
  $sandbox_location = FALSE;
  $sandboxes = cache_get('@sandboxes');

  $sandboxes = ($sandboxes == NULL || !is_array($sandboxes->data)) ? array() : $sandboxes->data;

  if (($sandbox_location = array_search($sandbox, $sandboxes)) === FALSE) {
    // Load the page.  Here, we do a search for sandboxes only.
    $search_page = drupal_http_request(DGOTO_DRUPAL_HOME . 'search/site/' . $sandbox . '?f%5B0%5D=&f%5B1%5D=&f%5B2%5D=&f%5B3%5D=&f%5B4%5D=sm_field_project_type%3Asandbox&f%5B5%5D=ss_meta_type%3Amodule&solrsort=iss_project_release_usage+desc');

    // Look for the Sandbox on the search page.
    $sandbox_location = _dgoto_search_for_sandbox_in_drupal_search_page($sandbox, $search_page->data);
  }

  // Save what we found to the cache.
  if ($sandbox_location) {
    $sandboxes[$sandbox_location] = $sandbox;
    cache_set('@sandboxes', $sandboxes);
  }

  return $sandbox_location;
}

/**
 * Looks for a drupal.org sandbox id in a search results page.
 *
 * @param string $sandbox 
 * @param string $content 
 * @return int or FALSE
 */
function _dgoto_search_for_sandbox_in_drupal_search_page($sandbox, $content) {
  // Look for a URL going to a user matching that exact name.
  preg_match_all('@<a href="' . DGOTO_DRUPAL_HOME . 'sandbox/([a-z_]*/(\d+))">@i', $content, $matches);

  if (count($matches[0]) > 0) {
    foreach ($matches[2] as $match_id => $possible_project_id) {
      // We load the Git page because it actually has the name of the project inside.
      $git_page = drupal_http_request(DGOTO_DRUPAL_HOME . 'project/' . $possible_project_id . '/git-instructions');
      
      if (strpos($git_page->data, '<code>cd ' . $sandbox . '</code>') !== FALSE) {
        return $matches[1][$match_id];
      }
    }
  }

  return FALSE;
}

/**
 * For a given project name, attempts to find documentation.  It first will
 * look for a documentation link on the page itself.  If it can't find that,
 * it will then reach out to the Git repository and look for a README file,
 * looking for a README.md, README.mdown, README.markdown, README.txt, and
 * finally README (no extension).
 *
 * @param project name
 * @return string
 **/
function _dgoto_search_for_docs_or_readme_link($project) {

  // Is it cached?  If so, use that.
  if (($cached = cache_get('docs-' . $project)) && !empty($cached->data)) {
    return $cached->data;
  }
  
  // First, we look on the project page for "Read documentation"
  $project_page_source = drupal_http_request(DGOTO_DRUPAL_HOME . 'project/' . $project);
  if ($project_page_source->code != 200) {
    // We have a problem, then.
    mpte('Error', 'Bad Docs Project', $project);
    cache_set('docs-' . $project, DGOTO_DRUPAL_HOME . 'project/' . $project, 'cache', time() + 86400);
    return DGOTO_DRUPAL_HOME . 'project/' . $project;
  }
  
  // Look inside the page for "Read documentation" with a link to the docs page.
  $matches = array();
  preg_match_all("/<a href=\"(.*)\">Read documentation<\/a>/", $project_page_source->data, $matches);
  
  // If we found one, use it. Cache it.
  if (!empty($matches[1][0])) {
    cache_set('docs-' . $project, $matches[1][0], 'cache', time() + 86400);
    return $matches[1][0];
  }

  // Grab the "Respository viewer" link and let's look at the Git repo.
  // Truth is, this may not even be needed, but we'll do it anyway.
  $git_matches = array();
  preg_match_all("/<a href=\"(.*)\">Read documentation<\/a>/", $project_page_source->data, $git_matches);
  $repo_url = $git_matches[1][0];
    
  $git_tree_page = drupal_http_request($repo_url . '/tree');
  if ($git_tree_page->code == 200) {
    // Not exactly perfect, but this should do the trick.
    preg_match_all('@(blob/HEAD:/README\.?(?:markdown|mdown|md|txt)?)">README@ui', $git_tree_page->data, $readme_matches);
    if (!empty($readme_matches[1][0])) {

      // Cache it for a day.
      cache_set('docs-' . $project, $repo_url . '/' . $readme_matches[1][0], 'cache', time() + 86400);
      return $repo_url . '/' . $readme_matches[1][0];
    }
  }

  // Eh, we got this far and didn't find anything.  Take 'em to the project page.
  return DGOTO_DRUPAL_HOME . 'project/' . $project;
}