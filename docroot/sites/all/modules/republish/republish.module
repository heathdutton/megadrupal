<?php
/**
 * @file
 * Contains block, theme, hooks for Republish module.
 */

/**
 * Implements hook_help().
 */
function republish_help($path, $arg) {
  switch ($path) {
    case 'admin/help#republish':
      $output = file_get_contents(drupal_get_path('module', 'republish') . '/README.txt');
      return $output;
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function republish_ctools_plugin_directory($module, $plugin) {
  if (($module == 'ctools') && ($plugin == 'content_types')) {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_block_info().
 */
function republish_block_info() {
  $blocks['republish_block'] = array(
    'info' => 'Republish Block',
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function republish_block_configure($delta = '') {
  $form = array();
  if ($delta == 'republish_block') {
    _republish_settings_form('block', $form);
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function republish_block_save($delta = '', $edit = array()) {
  if ($delta == 'republish_block') {
    variable_set('republish_link_text', $edit['republish_link_text']);
    variable_set('republish_title', $edit['republish_title']);
    variable_set('republish_guidelines', $edit['republish_guidelines']);
    variable_set('republish_instructions', $edit['republish_instructions']);
    variable_set('republish_body', $edit['republish_body']);
    variable_set('republish_body_readonly', $edit['republish_body_readonly']);
    variable_set('republish_branding', $edit['republish_branding']);
  }
}

/**
 * Implements hook_block_view().
 */
function republish_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'republish_block':
      if (user_access('access content')) {
        $block['subject'] = t('Republish');
        $block['content'] = drupal_get_form('republish_content_form');
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_form().
 */
function republish_content_form($form, &$form_state) {
  // Getting available contexts from menu.
  $context = menu_get_object();
  if (!($context && isset($context->nid))) {
    return NULL;
  }
  _republish_content_form('block', $context, $form, $form_state);
  return $form;
}

/**
 * Builds Settings Form.
 */
function _republish_settings_form($callby, &$form, $form_state = array(), $conf = array()) {
  $form['republish_link_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Republish Link Text'),
    '#description' => t('Enter text to be displayed on republish button.'),
    '#default_value' => _republish_text($callby, 'link_text', $conf, NULL, FALSE),
  );
  $form['republish_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Republish Box Title'),
    '#description' => t('Enter Title for Republish overlay box.'),
    '#default_value' => _republish_text($callby, 'title', $conf, NULL, FALSE),
  );
  $form['republish_guidelines'] = array(
    '#type' => 'textarea',
    '#title' => t('Republish Guidelines'),
    '#description' => t('Enter descriptive guideline to be displayed on the Republish overlay box above the main body. Supports Filtered HTML format.'),
    '#default_value' => _republish_text($callby, 'guidelines', $conf, NULL, FALSE),
  );
  $form['republish_instructions'] = array(
    '#type' => 'textfield',
    '#title' => t('Republish Instructions'),
    '#description' => t('Enter instructions to be displayed on the Republish overlay box below the main body.'),
    '#default_value' => _republish_text($callby, 'instructions', $conf, NULL, FALSE),
  );
  $form['republish_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Republish Main Body'),
    '#description' => t('Enter the content to be displayed in the overlay. You may use available tokens. To access node fields use [node:field_name].'),
    '#default_value' => _republish_text($callby, 'body', $conf, NULL, FALSE),
  );
  $dv_ctools = !empty($conf) ? $conf['body_readonly'] : 1;
  $dv_block = variable_get('republish_body_readonly', 1);
  $form['republish_body_readonly'] = array(
    '#type' => 'checkbox',
    '#title' => t('Republish Main Body Readonly to end user.'),
    '#default_value' => ($callby == 'ctools') ? $dv_ctools : $dv_block,
  );
  $form['republish_branding'] = array(
    '#type' => 'textarea',
    '#title' => t('Branding Text'),
    '#description' => t('Enter the Branding text to be included in editor.'),
    '#default_value' => _republish_text($callby, 'branding', $conf, NULL, FALSE),
  );

  if (module_exists("token")) {
    $form['republish_token_help'] = array(
      '#type' => 'markup',
      '#token_types' => array('node'),
      '#theme' => 'token_tree_link',
    );
  }
}

/**
 * Builds Republish Content form.
 */
function _republish_content_form($callby, $context, &$form, &$form_state, $conf = array()) {
  $form['republish_content_button'] = array(
    '#markup' => '<a href="#" id="republish_content_button" class="button">' . check_plain(_republish_text($callby, 'link_text', $conf)) . '</a>',
  );
  $form['republish_content_overlay'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div id="republish_content_overlay">',
    '#attributes' => array(
      'style' => 'display:none',
    ),
    '#suffix' => '</div>',
  );
  $form['republish_content_overlay']['title'] = array(
    '#markup' => check_plain(_republish_text($callby, 'title', $conf)),
    '#prefix' => '<h2 id="republish_content_title">',
    '#suffix' => '</h2>',
  );
  $form['republish_content_overlay']['body'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div id="republish_content_body">',
    '#suffix' => '</div>',
  );
  $form['republish_content_overlay']['body']['guidelines'] = array(
    '#markup' => check_markup(_republish_text($callby, 'guidelines', $conf), 'filtered_html'),
    '#prefix' => '<p id="republish_content_guidelines">',
    '#suffix' => '</p>',
  );
  // Building content for republish.
  $content = _republish_text($callby, 'body', $conf, NULL, TRUE, $context) . _republish_text($callby, 'branding', $conf, NULL, TRUE, $context);
  $form['republish_content_overlay']['body']['main_body'] = array(
    '#type' => 'textarea',
    '#rows' => 10,
    '#default_value' => $content,
    '#description' => check_plain(_republish_text($callby, 'instructions', $conf)),
    '#attributes' => array(
      'onclick' => 'this.focus();this.select()',
    ),
  );

  $readonly = ($callby == 'ctools') ? (!empty($conf) ? $conf['body_readonly'] : 1) : variable_get('republish_body_readonly', 1);
  if ($readonly) {
    $form['republish_content_overlay']['body']['main_body']['#attributes']['readonly'] = 'readonly';
  }

  // Adding css and js.
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'republish') . '/css/republish.css',
  );

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'republish') . '/js/republish.js',
  );
}

/**
 * Returns a string for a variable name.
 *
 * Used by settings forms to retrieve strings.
 */
function _republish_text($callby, $key, $conf = array(), $language = NULL, $replace = TRUE, $node = array()) {
  $langcode = isset($language) ? $language->language : NULL;

  switch ($callby) {
    case 'ctools':
      $admin_setting = !empty($conf[$key]) ? $conf[$key] : FALSE;
      break;

    case 'block':
      $admin_setting = variable_get('republish_' . $key, FALSE);
      break;
  }

  if ($admin_setting) {
    // An admin setting overrides the default string.
    $text = $admin_setting;
  }
  else {
    // No override, return default string.
    switch ($key) {
      case 'link_text':
        $text = t('Republish', array(), array('langcode' => $langcode));
        break;

      case 'title':
        $text = t('Republish this content', array(), array('langcode' => $langcode));
        break;

      case 'guidelines':
        $text = t('Like this content? Republish it!', array(), array('langcode' => $langcode));
        break;

      case 'instructions':
        $text = t('Please copy the above code and embed it onto your website to republish.', array(), array('langcode' => $langcode));
        break;

      case 'body':
        $text = t('<h2>[node:title]</h2><br />[node:body]<br />', array(), array('langcode' => $langcode));
        break;

      case 'branding':
        $text = t('This post <a href="[node:url]">[node:title]</a> was originally published on <a href="[site:url]">[site:title]</a>.', array(), array('langcode' => $langcode));
        break;
    }
  }

  if ($replace) {
    // Token Replace the text.
    return token_replace($text, array('node' => $node));
  }

  return $text;
}
