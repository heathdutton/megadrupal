<?php

/**
 * Implements hook_menu().
 */
function commerce_auriga_menu() {
  $items['checkout/%/payment/auriga/confirm'] = array(
    'page callback' => 'commerce_auriga_payment_confirm',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['checkout/%/payment/auriga/cancel'] = array(
    'page callback' => 'commerce_auriga_payment_cancel',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_auriga_commerce_payment_method_info() {
  $payment_methods['auriga'] = array(
    'base' => 'commerce_auriga',
    'title' => t('Auriga ePayment - Credit Card'),
    'short_title' => t('Auriga'),
    'display_title' => t('Credit Card'),
    'description' => t('Integrates Auriga ePayment for Credit Cards.'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * The settings form for this payment method.
 *
 * @param $settings
 *   An array of the current settings.
 * @return
 *   A renderable form array.
 */
function commerce_auriga_settings_form($settings = NULL) {
  // Normalize settings.
  $settings['merchant_id'] = isset($settings['merchant_id']) ? $settings['merchant_id'] : '';
  $settings['secret'] = isset($settings['secret']) ? $settings['secret'] : '';
  $settings['test']['testing'] = isset($settings['test']['testing']) ? $settings['test']['testing'] : 0;
  $settings['test']['testing_secret'] = isset($settings['test']['testing_secret']) ? $settings['test']['testing_secret'] : '';
  $settings['test']['testing_amount'] = isset($settings['test']['testing_amount']) ? $settings['test']['testing_amount'] : 60000;

  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#default_value' => $settings['merchant_id'],
    '#required' => TRUE,
  );
  $form['secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret'),
    '#default_value' => $settings['secret'],
    '#required' => TRUE,
  );
  $form['test'] = array(
    '#type' => 'fieldset',
    '#title' => t('Testing'),
    '#collapsible' => TRUE,
    '#collapsed' => !$settings['test']['testing'],
  );
  $form['test']['testing'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate testing'),
    '#default_value' => $settings['test']['testing'],
  );
  $form['test']['testing_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret'),
    '#description' => t('The secret used while testing differs from the real secret.'),
    '#default_value' => $settings['test']['testing_secret'],
  );
  $form['test']['testing_amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#description' => t('The amount you which to send to Auriga when testing.'),
    '#default_value' => $settings['test']['testing_amount'],
  );

  return $form;
}

/**
 * The form used to redirect the user to the offsite payment portal.
 *
 * @param $form
 *  The array that we're about to return.
 * @param $form_state
 *  The current state for the form.
 * @param $form
 *  The Commerce Order that is about to get payed.
 * @param $form
 *  The current payment method that's in use.
 *
 * @return
 *  A renderable form array.
 */
function commerce_auriga_redirect_form($form, &$form_state, $commerce_order, $payment_method) {
  // Load the order metadata.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $commerce_order);

  // Load the order total price data.
  $price = $order_wrapper->commerce_order_total->value();
  // If the tax module is enabled, get the tax component.
  if (function_exists('commerce_tax_components')) {
    $tax = commerce_tax_components($price['data']['components']);
  }
  
  // Now we'll setup some variables that differs from testing and live
  // environments.
  if ($payment_method['settings']['test']['testing']) {
    // Testing is activated. We should send the custom amount, and the secret
    // used for testing, rather than the real values.
    $amount = $payment_method['settings']['test']['testing_amount'];
    // If the tax module is enabled, we'll use the same tax rate as the real
    // component uses.
    $tax_amount = is_array($tax) ? $amount / (1 + $tax[0]['price']['data']['tax_rate']['rate']) * .25 : 0;
    $secret = $payment_method['settings']['test']['testing_secret'];
    // Set the form action to the test gateway.
    $form['#action'] = 'https://test-epayment.auriganet.eu/paypagegw';
  }
  else {
    // Testing is not activated. Use the real order amount and secret.
    $amount = $price['amount'];
    $tax_amount = is_array($tax) ? $tax[0]['price']['amount'] : 0;
    $secret = $secret = $payment_method['settings']['secret'];
    // Set the form action to the real gateway.
    $form['#action'] = 'https://epayment.auriganet.eu/paypagegw';
  }

  // Build the necessary data. We will convert this to form elements later on.
  $auriga_data = array(
    'Merchant_id' => $payment_method['settings']['merchant_id'],
    'Version' => 2,
    'Customer_refno' => $order_wrapper->order_id->value(),
    'Currency' => 'SEK',
    'Amount' => (integer) $amount,
    'VAT' => (integer) $tax_amount,
    'Payment_method' => 'KORTINSE',
    'Response_URL' => url('checkout/' . $order_wrapper->order_id->value() . '/payment/auriga/confirm', array('absolute' => TRUE)),
    'Goods_description' => t('Order !order at !site', array('!order' => $order_wrapper->order_id->value(), '!site' => variable_get('site_name', 'Drupal Commerce'))),
    'Language' => 'SWE',
    'Comment' => '',
    'Country' => 'SE',
    'Cancel_URL' => url('checkout/' . $order_wrapper->order_id->value() . '/payment/auriga/cancel', array('absolute' => TRUE)),
  );

  // Generete the MAC.
  $auriga_data['MAC'] = md5(implode('', $auriga_data) . $secret);

  // Convert the data to form elements.
  foreach ($auriga_data as $key => $value) {
    $form[$key] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
  }
  
  // Add a submit button in case the automatic redirect fails.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit Order'),
  );

  return $form;
}

/**
 * Menu callback for a confirmed payment.
 * 
 * The user will get here after the offsite payment has been completed. This
 * funciton is responsible for validating the returned data, and create the
 * payment transaction.
 */
function commerce_auriga_payment_confirm($order_id) {
  // Load the order object.
  $commerce_order = commerce_order_load($order_id);
  $order_wrapper = entity_metadata_wrapper('commerce_order',  $commerce_order);
  
  // Load the payment method.
  $payment_method = commerce_payment_method_instance_load('auriga|commerce_payment_auriga');
  
  // Include the messages file so that we can translate the error
  // code into a descriptive message.
  module_load_include('inc', 'commerce_auriga', 'auriga.messages');

  // Generate the MAC.
  $secret = $payment_method['settings']['test']['testing'] ? $payment_method['settings']['test']['testing_secret'] : $payment_method['settings']['secret'];
  $mac = md5(
    $_GET['Merchant_id'] . 
    $_GET['Version'] . 
    $_GET['Customer_refno'] . 
    $_GET['Transaction_id'] .
    $_GET['Status'] .
    $_GET['Status_code'] .
    $_GET['AuthCode'] .
    $_GET['3DSec'] .
    $_GET['Batch_id'] .
    $_GET['Payment_method'] .
    $_GET['Card_type'] .
    $_GET['Risk_score'] .
    $secret
  );

  // Load the price data from the order.
  $price = $order_wrapper->commerce_order_total->value();

  // Initiate the transaction object.
  $transaction = commerce_payment_transaction_new('auriga', $commerce_order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $_GET['Transaction_id'];
  $transaction->amount = $price['amount'];
  $transaction->currency_code = $price['currency_code'];
  
  // Verify the MAC.
  if ($mac != $_GET['MAC']) {
    // The generated MAC didn't match the one that was returned.
    $transaction->message = t('The generated MAC did not match the MAC that was returned.');
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    commerce_payment_transaction_save($transaction);
    
    // Notify and redirect the customer back to the previous page.
    drupal_set_message(t(commerce_auriga_get_auriga_message($_GET['Status_code'])), 'error');
    commerce_payment_redirect_pane_previous_page($commerce_order);
    $order_status = commerce_order_status_load($commerce_order->status);
    drupal_goto('checkout/' . $commerce_order->order_id . '/' . $order_status['checkout_page']);  
  }

  // Verify the returned data.
  if ($_GET['Status'] != 'A' || $_GET['Status_code'] != 0) {
    // Something went wrong.
    $message = t(commerce_auriga_get_auriga_message($_GET['Status_code']));
    $transaction->message = $message;
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    commerce_payment_transaction_save($transaction);
    
    // Notify and redirect the customer back to the previous page.
    drupal_set_message($message, 'error');
    commerce_payment_redirect_pane_previous_page($commerce_order);
    $order_status = commerce_order_status_load($commerce_order->status);
    drupal_goto('checkout/' . $commerce_order->order_id . '/' . $order_status['checkout_page']); 
  }
  
  // If we'll get here, it means that everything is fine.
  $message[] = t('The transaction completed successfully.');
  $message[] = t(commerce_auriga_get_auriga_message($_GET['Status_code']));
  $transaction->message = implode('<br />', $message);
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  commerce_payment_transaction_save($transaction);
  
  // Move the order to the next page.
  commerce_payment_redirect_pane_next_page($commerce_order);
  
  // Load the new order status, and redirect the user to the right page.
  $order_status = commerce_order_status_load($commerce_order->status);
  drupal_goto('checkout/' . $commerce_order->order_id . '/' . $order_status['checkout_page']);    
}

/**
 * Menu callback for a cancelled payment.
 * 
 * The user will get here if he or she presses the Cancel button during the
 * offsite payment. This method will reverse the order state to the previous
 * one, and redirect the user to the right page.
 */
function commerce_auriga_payment_cancel($order_id) {
  // Load the order object.
  $commerce_order = commerce_order_load($order_id);
  
  // Move the order to the previous page.
  commerce_payment_redirect_pane_previous_page($commerce_order);
  
  // Load the new order status, and redirect the user to the right page.
  $order_status = commerce_order_status_load($commerce_order->status);
  drupal_goto('checkout/' . $commerce_order->order_id . '/' . $order_status['checkout_page']);    
}
