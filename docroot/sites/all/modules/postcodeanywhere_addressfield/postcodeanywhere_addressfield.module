<?php

/**
 * Implements hook_menu().
 */
function postcodeanywhere_addressfield_menu() {
  $items = array();

  $items['admin/config/regional/postcodeanywhere_addressfield'] = array(
    'title' => 'Postcodeanywhere settings',
    'description' => 'Change settings of Postcodeanywhere.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('postcodeanywhere_addressfield_admin_settings'),
    'access arguments' => array('administer postcodeanywhere addressfield'),
    'file' => 'includes/postcodeanywhere_addressfield.admin.inc',
  );

  $items['postcodeanywhere-autocomplete'] = array(
    'title' => 'Postcodeanywhere autocomplete',
    'page callback' => 'postcodeanywhere_addressfield_autocomplete',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function postcodeanywhere_addressfield_permission() {
  $permissions = array(
    'administer postcodeanywhere addressfield' => array(
      'title' => t('Administer Postcodeanywhere Addressfield settings'),
    ),
    'access postcodeanywhere addressfield debug' => array(
      'title' => t('Access the Postcodeanywhere Addressfield debug log'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function postcodeanywhere_addressfield_ctools_plugin_directory($module, $plugin) {
  if ($module == 'addressfield') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Use the right orm elements identifiers needed for
 * "#limit_validation_errors" : "Postcode" & "House number or name" only,
 * on "Find address" button element.
 * @see https://drupal.org/node/2189327
 */
function postcodeanywhere_addressfield_field_widget_form_alter(&$element, &$form_state, $context) {
  // Only for postcodeanywhere lookup.
  if ($context['field']['type'] == 'addressfield' && !empty($element['postcodeanywhere_find_address'])) {
    // Parents array of an addressfield element in a entity form.
    $array_parents = array($context['field']['field_name'], $context['langcode'], $context['delta']);
    // Parents array of an addressfield element for the entire built form.
    $array_parents = array_merge($context['form']['#parents'], $array_parents);
    $postcodeanywhere_house_number = array_merge($array_parents, array('postcodeanywhere_house_number'));
    $postcodeanywhere_postcode = array_merge($array_parents, array('postcodeanywhere_postcode'));
    $element['#element_validate'][] = 'postcodeanywhere_addressfield_addressfield_validate';
    $element['postcodeanywhere_find_address']['#limit_validation_errors'] = array($postcodeanywhere_postcode, $postcodeanywhere_house_number);
  }
}

/**
 * Validate callback for the postcode input without lookup done.
 */
function postcodeanywhere_addressfield_addressfield_validate($element, &$form_state, &$form) {
  $not_postcode_lookup = empty($form_state['triggering_element']['#element_validate']) || (!empty($form_state['triggering_element']['#element_validate']) && !in_array('postcodeanywhere_addressfield_find_address_validate', $form_state['triggering_element']['#element_validate']));
  if (!empty($element['postcodeanywhere_postcode']['#value']) && $not_postcode_lookup) {
    $address = $element['#address'];
    if (empty($address['locality']) && empty($address['thoroughfare'])) {
      form_set_error(implode('][', $element['#array_parents']) . '][postcodeanywhere_postcode', t('You need to make sure the postcode lookup returns addresses and you select yours.'));
    }
  }
}

function postcodeanywhere_addressfield_autocomplete($string = '') {
  $postcodeanywhere_addresses_autocomplete = &drupal_static(__FUNCTION__, array());
  if (!isset($postcodeanywhere_addresses_autocomplete[$string])) {
    $matches = array();
    if ($string) {
      $addresses = postcodeanywhere_addressfield_get_addresses_by_postcode($string);
      foreach ($addresses as $address_id => $address) {
        if ($address != '') {
          $matches[$address_id . '-' . $string] = check_plain($address);
        }
      }
    }
    if (empty($matches)) {
      $matches[''] = t('The postcode is not an UK valid one.');
    }
    $postcodeanywhere_addresses_autocomplete[$string] = $matches;
  }

  return drupal_json_output($postcodeanywhere_addresses_autocomplete[$string]);
}

/**
 * Implements hook_flush_caches().
 */
function postcodeanywhere_addressfield_flush_caches() {
  return array('cache_postcodeanywhere_address');
}

/**
 * Implements hook_addressfield_standard_widget_refresh_alter().
 */
function postcodeanywhere_addressfield_addressfield_standard_widget_refresh_alter(&$commands, $form, $form_state) {
  // Add the status messages inside the new addressfield's wrapper element,
  // so that on subsequent Ajax requests, it is treated as old addressfield.
  $commands[] = ajax_command_prepend(NULL, theme('status_messages'));
}

/**
 * PostcodeAnywhere Service check, postcode test lookup.
 */
function postcodeanywhere_addressfield_web_services_check() {
  return _postcodeanywhere_addressfield_get_addresses_by_postcode('LL11 5HJ');
}

/**
 * Do call to PostcodeAnywhere to find addresses by postcode.
 */
function postcodeanywhere_addressfield_get_addresses_by_postcode($postcode) {
  if (empty($postcode)) {
    return FALSE;
  }
  $postcodeanywhere_addresses_by_postcode = &drupal_static(__FUNCTION__, array());
  if (!isset($postcodeanywhere_addresses_by_postcode[$postcode])) {
    // Get the addresses for the postcode.
    $postcodeanywhere_addresses_by_postcode[$postcode] = _postcodeanywhere_addressfield_get_addresses_by_postcode($postcode);
  }

  return $postcodeanywhere_addresses_by_postcode[$postcode];
}

/**
 * Do call to PostcodeAnywhere to find addresses by postcode.
 */
function _postcodeanywhere_addressfield_get_addresses_by_postcode($postcode) {
  // Get the Postcodeanywhere service access credentials.
  $account = variable_get('postcodeanywhere_addressfield_login', '');
  $license = variable_get('postcodeanywhere_addressfield_license', '');

  $items = array();
  // Find by postcode.
  module_load_include('inc', 'postcodeanywhere_addressfield', 'includes/postcodeanywhere_addressfield.Find.class');
  $pa = new PostcodeAnywhere_Interactive_Find(urlencode($license), urlencode($postcode), 'English', 'None', urlencode($account));
  $pa->MakeRequest();
  // PostcodeAnywhere request with results.
  if ($pa->HasData()) {
    $results = $pa->HasData();
    // Go through all returned items and prepare addresses result array('id' => 'address data').
    foreach ($results as $item) {
      $data_item = _postcodeanywhere_addressfield_simplexml_to_string($item);
      $items[$data_item['Id']] = $data_item['StreetAddress'] . ', ' . $data_item['Place'];
    }
  }
  // PostcodeAnywhere request error.
  elseif ($pa->HasError()) {
    $items = FALSE;
    $results = $pa->HasError();
  }
  // No results.
  else {
    $results = t('No addresses found.');
  }
  // Debugging PostcodeAnywhere request.
  _postcodeanywhere_addressfield_request_debug($results, $postcode);

  return $items;
}

/**
 * Get address details by address_id.
 */
function postcodeanywhere_addressfield_get_address_details($address_id) {
  if (empty($address_id)) {
    return FALSE;
  }
  $postcodeanywhere_addresses = &drupal_static(__FUNCTION__);
  if (empty($postcodeanywhere_addresses[$address_id])) {
    // Check if the address is cached.
    if ($cached_address = cache_get('address_id:' . $address_id, 'cache_postcodeanywhere_address')) {
      $postcodeanywhere_addresses[$address_id] = $cached_address->data;
      $results = $postcodeanywhere_addresses[$address_id];
    }
    // No cached address
    else {
       // Get the Postcodeanywhere service access credentials.
      $account = variable_get('postcodeanywhere_addressfield_login', '');
      $license = variable_get('postcodeanywhere_addressfield_license', '');

      $items = array();
      // Get the full address details based on the address Id.
      module_load_include('inc', 'postcodeanywhere_addressfield', 'includes/postcodeanywhere_addressfield.RetrieveById.class');
      $pa = new PostcodeAnywhere_Interactive_RetrieveById (urlencode($license), urlencode($address_id), 'English', urlencode($account));
      $pa->MakeRequest();
      if ($pa->HasData()) {
        $results = $pa->HasData();
        $data_item = _postcodeanywhere_addressfield_simplexml_to_string(reset($results));
        $postcodeanywhere_addresses[$address_id] = _postcodeanywhere_addressfield_simplexml_to_string(reset($results));
      }
      elseif ($pa->HasError()) {
        $results = $pa->HasError();
      }
      else {
        $postcodeanywhere_addresses[$address_id] = FALSE;
        $results = t('No address found.');
      }
      // Set cache for the address, address data array or FALSE.
      cache_set('address_id:' . $address_id, $postcodeanywhere_addresses[$address_id], 'cache_postcodeanywhere_address');
    }
  }
  // Debugging PostcodeAnywhere request.
  _postcodeanywhere_addressfield_request_debug($results, $address_id, 'address id');

  return $postcodeanywhere_addresses[$address_id];
}

/**
 * Helper function - multiple calls.
 *
 * Populate addressfield with the selected postcode address data -
 * set the addressfield form elements values.
 */
function _postcodeanywhere_addressfield_populate_address($address_id, $element, &$form_state) {
  if (!empty($address_id)) {
    $array_parents = array_slice($element['#parents'], 0, -1);
    $address = drupal_array_get_nested_value($form_state['values'], $array_parents);

    $fetched_address = postcodeanywhere_addressfield_get_address_details($address_id);
    if (!empty($fetched_address)) {
      // Initialise addressfield, empty previous data.
      _postcodeanywhere_addressfield_empty_address($address);
      // Build addressfield.
      $address['sub_premise'] = '';
      if (!empty($fetched_address['SubBuilding'])) {
        $address['sub_premise'] .= $fetched_address['SubBuilding'] . ' ';
      }
      $address['premise'] = '';
      if (!empty($fetched_address['BuildingNumber'])) {
        $address['premise'] .= $fetched_address['BuildingNumber'] . ' ';
      }
      if (!empty($fetched_address['BuildingName'])) {
        $address['premise'] .= $fetched_address['BuildingName'] . ' ';
      }
      $address['thoroughfare'] = '';
      if (!empty($fetched_address['PrimaryStreet'])) {
        $address['thoroughfare'] .= $fetched_address['PrimaryStreet'];
      }
      if (!empty($fetched_address['SecondaryStreet'])) {
        $address['thoroughfare'] .= ' ' . $fetched_address['SecondaryStreet'];
      }
      $address['dependent_locality'] = '';
      if (!empty($fetched_address['DependentLocality'])) {
        $address['dependent_locality'] .= $fetched_address['DependentLocality'];
      }
      if (!empty($fetched_address['DoubleDependentLocality'])) {
        $address['dependent_locality'] .= ' ' . $fetched_address['DoubleDependentLocality'];
      }
      $address['locality'] = isset($fetched_address['PostTown']) ? $fetched_address['PostTown'] : '';
      $address['postal_code'] = isset($fetched_address['Postcode']) ? $fetched_address['Postcode'] : '';
      $address['administrative_area'] = isset($fetched_address['County']) ? $fetched_address['County'] : '';
      $address['organisation_name'] = isset($fetched_address['Company']) ? $fetched_address['Company'] : '';
      $address['postcodeanywhere_addresses_select'] = $address_id;
      // Search for House number.
      if (!empty($address['postcodeanywhere_house_number'])) {
        $address['postcodeanywhere'] = 'address_selected';
      }
      // Search for postcode only, keep the addresses selection.
      else {
        $address['postcodeanywhere'] = 'addresses_selection';
      }

      // Form state for addressfield format.
      $form_state['addressfield'][$address['element_key']] = array_diff_key($address, array('element_key' => ''));
      foreach ($address as $key => $value) {
        // Form state for addressfield in custom forms,
        // ex. Drupal commerce checkout form.
        drupal_array_set_nested_value($form_state['values'], array_merge($array_parents, array($key)), $value, TRUE);
        drupal_array_set_nested_value($form_state['input'], array_merge($array_parents, array($key)), $value, TRUE);
      }
    }
  }
}

/**
 * Helper function.
 *
 * Initialise addressfield, empty previous data.
 */
function _postcodeanywhere_addressfield_empty_address(&$address) {
  $address['thoroughfare'] = '';
  $address['sub_premise'] = '';
  $address['premise'] = '';
  $address['dependent_locality'] = '';
  $address['administrative_area'] = '';
  $address['organisation_name'] = '';
  $address['locality'] = '';
}

/**
 * Helper function.
 *
 * Debugging PostcodeAnywhere request:  messages and logs.
 */
function _postcodeanywhere_addressfield_request_debug($results, $search_term, $type = 'postcode') {
  // Debugging settings.
  $debug_log = variable_get('postcodeanywhere_addressfield_debug_log', FALSE);
  $debug = variable_get('postcodeanywhere_addressfield_debug', FALSE);
  $debug_activated = ((boolean) $debug || ($debug_log && user_access('access postcodeanywhere addressfield debug')));
  if ($debug_activated) {
    if ($debug == 2) {
      $debug = FALSE;
    }
    if (!empty($results['Error'])) {
      $debug_message = t('Error while processing PostcodeAnywhere request.');
    }
    else {
      $debug_message = t('PostcodeAnywhere request successfully processed.');
    }
    $debug_message .= ' <br /><strong>' . t('!search_term !type lookup results', array('!search_term' => $search_term, '!type' => $type)) . '</strong>:<br />';
    $debug_message .= '<pre>' . print_r($results, TRUE) . '</pre>';
  }
  if (!empty($debug_message)) {
    // Logs a system message.
    if ($debug_log) {
      watchdog('PostcodeAnywhere', $debug_message, array(), WATCHDOG_INFO);
    }
    // Set a debugging message.
    if (($debug && user_access('access postcodeanywhere addressfield debug'))) {
      drupal_set_message($debug_message);
    }
  }
}

/**
 * Helper function.
 *
 * Initialise addressfield, empty previous data.
 */
function _postcodeanywhere_addressfield_simplexml_to_string($xml_array) {
  foreach ($xml_array as $key => $value) {
    $string_array[$key] = (string)$value;
  }
  return $string_array;
}
