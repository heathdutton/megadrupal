<?php

/**
 * @file
 * Creates an action and a trigger to notify users when their email address has
 * been changed.
 */

/**
 * Implements hook_help().
 *
 * Provides a menu entry which explains what the email_change_trigger module
 * does and how to configure it.
 */
function email_change_trigger_help($path, $arg) {
  switch ($path) {
    case 'admin/help#email_change_trigger':
      return '<h3>' . t('About') . '</h3>
        <p>' . t('This module is part of a set of security related modules and will notifiy a user when their accounts email address has changed..') . '</p>
        <h3>' . t('Setup Action') . '</h3>
        <p><ol>
          <li>' . t("Go to the !url.", array('!url' => l(t('Actions Config Page (admin/config/system/actions)'), 'admin/config/system/actions'))) . '</li>
          <li>' . t('Select "Send email address change notification email" from the <em>Create An Advanced Action</em> list.') . '</li>
          <li>' . t('Adjust the Subject and Message to your liking.') . '</li>
          <li>' . t('Click <em>Save</em>.') . '</li>
        </ol></p>
        <h3>' . t('Setup Trigger') . '</h3>
        <p><ol>
          <li>' . t("Go to the !url.", array('!url' => l(t('Trigger Config Page (admin/structure/trigger/node)'), 'admin/structure/trigger/node'))) . '</li>
          <li>' . t('Click on the "User" tab.') . '</li>
          <li>' . t('Under <em>Trigger: After changing user email</em>, select "Send email change notification email" from the list.') . '</li>
          <li>' . t('Click <em>Assign</em>.') . '</li>
        </ol></p>';
    break;
  }
}

/**
 * Implements hook_user_update().
 *
 * Only fires when a user's email is updated, when account->mail differs from
 * account->original->mail
 */
function email_change_trigger_user_update(&$edit, $account, $category) {
  if ($category == 'account') {
    if ($account->mail !== $account->original->mail) {
      email_change_trigger_change($account, user_preferred_language($account));
    }
  }
}

/**
 * Implements hook_trigger_info().
 *
 * The first key in the array provides the name of the tab on the Triggers
 * page to which the trigger will be assigned.
 */
function email_change_trigger_trigger_info() {
  return array(
    'user' => array(
      'email_change_trigger' => array(
        'label' => t('After changing user email'),
      ),
    ),
  );
}

/**
 * Runs actions associated with updating user email address.
 */
function email_change_trigger_email_change_trigger($recipient) {
  // Ask the trigger module for all actions enqueued for the
  // 'email_change_trigger' trigger.
  $aids = trigger_get_assigned_actions('email_change_trigger');
  // Prepare a basic context, indicating the group and "hook", and call all the
  // actions with this context as arguments.
  $context = array(
    'group' => 'email_change_trigger',
    'hook' => 'email_change_trigger',
    'recipient' => $recipient,
  );
  actions_do(array_keys($aids), (object) $recipient, $context);
}

/**
 * Function to generate ping events and invoke hook_trigger_example().
 */
function email_change_trigger_change($recipient, $language) {
  module_invoke_all('email_change_trigger', $recipient, $language);
}

/**
 * Implements hook_action_info().
 */
function email_change_trigger_action_info() {
  return array(
    'email_change_trigger_send_email_action' => array(
      'label' => t('Send email address change notification email'),
      'type' => 'system',
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Return a form definition so the Send Email action can be configured.
 *
 * @param array $context
 *   Default values (if we are editing an existing action instance).
 *
 * @return array
 *   Form definition
 */
function email_change_trigger_send_email_action_form($context) {
  // set some defaults in case they aren't already set.
  $defaults = array(
    'old_email_subject' => 'Your email address has been changed on [site:name]',
    'old_email_message' => 'This email address will no longer be used for your account on [site:name]. If this is not correct please login and correct your email address or contact [site:mail].',

    'new_email_subject' => 'Your email address has been changed on [site:name]',
    'new_email_message' => 'This email address will be use going forward.',
  );

  $context += $defaults;

  $form['old_email'] = array(
    '#type' => 'fieldset',
    '#title' => t('To the old email address.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['old_email']['old_email_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $context['old_email_subject'],
  );

  $form['old_email']['old_email_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#default_value' => $context['old_email_message'],
  );

  $form['new_email'] = array(
    '#type' => 'fieldset',
    '#title' => t('To the new email address.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['new_email']['new_email_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $context['new_email_subject'],
  );

  $form['new_email']['new_email_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#default_value' => $context['new_email_message'],
  );

  if (module_exists('token')) {
    $form['help'] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#title' => t('Placeholder tokens'),
      '#description' => t("The following placeholder tokens can be used in to generate the URL path. Some tokens may not be available, depending on the context in which the action is triggered."),
    );

    $form['help']['tokens'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('all'),
    );
  }

  return $form;
}

/**
 * Assigns the subject and message content to the $params array.
 */
function email_change_trigger_send_email_action_submit($form, &$form_state) {
  $params = array(
    'old_email' => array(
      'subject' => $form_state['values']['old_email_subject'],
      'message' => $form_state['values']['old_email_message'],
    ),
    'new_email' => array(
      'subject' => $form_state['values']['new_email_subject'],
      'message' => $form_state['values']['new_email_message'],
    ),
  );

  return $params;
}

/**
 * Implementation of a configurable Drupal action.
 *
 * Sends an tokenized email.
 */
function email_change_trigger_send_email_action($entity, $context) {
  $types = array('old_email', 'new_email');
  $params['from'] = variable_get('site_mail', ini_get('sendmail_from'));

  // we have two emails going out here.
  foreach ($types as $type) {
    $params['subject'] = str_replace(array("\r", "\n"), '', token_replace($context[$type]['subject']));
    $params['body'] = token_replace($context[$type]['message']);

    if (empty($context['node'])) {
      $context['node'] = $entity;
    }

    $recipient = $context['recipient']->mail;

    $recipient_account = user_load_by_mail($recipient);

    // change the email address if this is going to the old account.
    if ($type == 'old_email') {
      $recipient = $context['recipient']->original->mail;
    }

    $language = ($recipient_account) ? user_preferred_language($recipient_account) : language_default();

    if (drupal_mail('email_change_trigger', 'action_send_email', $recipient, $language, $params)) {
      watchdog('action', 'Sent email to %recipient', array('%recipient' => $recipient));
    }
    else {
      watchdog('error', 'Unable to send email to %recipient', array('%recipient' => $recipient));
    }
  }
}

/**
 * Implements hook_mail().
 */
function email_change_trigger_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}
