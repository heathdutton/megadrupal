<?php
/**
 * @file
 * Define profile categories by role.
 *
 * Copyright 2008 by Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 */

/**
 * Implementation of hook_menu().
 */
function profile_role_menu() {
  $items = array();

  $items['admin/user/profile/manage'] = array(
    'title' => 'Manage',
    'description' => 'Manage profiles.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file path' => drupal_get_path('module', 'profile')
  );
  $items['admin/user/profile/role'] = array(
    'title' => 'Role',
    'description' => 'Define profile categories by role.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('profile_role_restrict_form'),
    'access arguments' => array('administer users'),
    'type' => MENU_LOCAL_TASK
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function profile_role_menu_alter(&$callbacks) {
  $result = db_query('SELECT DISTINCT category
                      FROM {profile_field}')->fetchCol();
  foreach ($result as $category) {
    $key = 'user/%user_category/edit/' . $category;
    $callbacks[$key]['access callback'] = 'profile_role_access_category';
    $callbacks[$key]['access arguments'] = array(1, $category);
  }
}

/**
 * Access callback -- ensure that the user being editted is of a role that
 * uses the field category, if so then ensure that the editting user has
 * permission to edit the fields.
 *
 * @param object $user User being editted.
 * @param string $category Profile field category.
 * @return boolean Access.
 */
function profile_role_access_category($user, $category) {
  $category_roles = profile_role_get_roles();
  if (isset($category_roles[$category])) {
    if (count(array_intersect($category_roles[$category], array_keys($user->roles))) > 0) {
      // User has fields, check if editting user has edit access.
      return user_edit_access($GLOBALS['user']);
    }
  }
  return FALSE;
}

/**
 * Define profile categories by role.
 */
function profile_role_restrict_form(&$form_state) {
  $form = array();
  $roles = profile_role_get_roles();
  $result = db_query('SELECT DISTINCT(category)
                      FROM {profile_field}')->fetchCol();
  $form['_categories'] = array(
    '#type' => 'value',
    '#value' => array()
  );
  $i = 0;
  foreach ($result as $category) {
    $form[$i] = array(
      '#type' => 'fieldset',
      '#title' => $category,
      '#tree' => TRUE
    );
    $form[$i]['roles'] = array(
      '#type' => 'select',
      '#title' => t('Roles'),
      '#description' => t('The roles that use this category.'),
      '#multiple' => TRUE,
      '#options' => user_roles(),
      '#default_value' => (isset($roles[$category]) ? $roles[$category] : array())
    );
    $form['_categories']['#value'][$i] = $category;
    $i++;
  }

  if (!$form['_categories']['#value']) {
    drupal_set_message(t('At least one category must exists. Please assign fields to categories.'), 'notice');
    drupal_goto('admin/config/people/profile');
  }

  $form['op'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration')
  );

  return $form;
}

/**
 * Save category roles.
 */
function profile_role_restrict_form_submit($form, &$form_state) {
  db_delete('profile_role')->execute();

  $insert = db_insert('profile_role');
  $insert->fields(array('rid', 'category'));

  foreach ($form_state['values']['_categories'] as $key => $category) {
    foreach ($form_state['values'][$key]['roles'] as $rid) {
      $insert->values(array($rid, $category));
    }
  }

  $insert->execute();

  drupal_set_message(t('The configuration options have been saved.'));
}

/**
 * Get the roles that use each profile categories.
 *
 * @return array Associative array of roles.
 */
function profile_role_get_roles() {
  $result = db_query('SELECT category, rid
                      FROM {profile_role}');
  $roles = array();
  foreach ($result as $role) {
    $roles[$role->category][] = $role->rid;
  }
  return $roles;
}

/**
 * Implementation of hook_form_alter(): profile_field_form.
 */
function profile_role_form_profile_field_form_alter(&$form, $form_state) {
  $form['#submit'][] = 'profile_role_profile_field_form_submit';
}
