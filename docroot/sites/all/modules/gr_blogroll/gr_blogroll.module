<?php

/**
 * @file
 * A configurable Block containing your blogroll from Google Reader.
 */


/**
 * Implementation of hook_menu().
 */
function gr_blogroll_menu() {
    $items['admin/config/services/blogroll'] = array(
      'title' => t('Blogroll'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('gr_blogroll_admin_settings'),
      'access arguments' => array('administer site configuration'),
      'description' => t('Configure the Blogroll to get data from your Google Reader bundle items.'),
    );
    return $items;
}

function gr_blogroll_admin_settings() {
  $form['gr_blogroll_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Google Reader bundle OPML URL'),
      '#default_value' => variable_get('gr_blogroll_url', false),
      '#description' => t('Enter the blogroll URL from your Google Reader bundle.'),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_block_info().
 *
 * Showing the block for selecting blogroll on block page.
 */
function gr_blogroll_block_info() {
  $block['recent']['info'] = t('Blogroll');
  $block['recent']['properties']['administrative'] = TRUE;
  return $block;
}

/**
 * Implementation of hook_block_view().
 *
 * Rendering the block on region.
 */

function gr_blogroll_block_view($delta = '') {
  global $user;
  $block = null;

  if (user_access('access content')){
    $items = _gr_blogroll_parse_url();
    if (sizeof($items) > 0 ) {
      $block['subject'] = t('My Blogroll');
      $block['content'] = theme('item_list',array('items'=>$items,'type'=>'ul','attributes'=>array("id"=>"blogroll")) );
    }
  }

  return $block;
}

/*
  Implementation of hook_cron()
  This function is used to clear and rebuild the blogroll in cache.
*/
function gr_blogroll_cron() {
  cache_clear_all("gr_blogroll_data","cache");
  _gr_blogroll_parse_url();
}

/*
  Parse the URL and load the right blogroll from Google Reader.
  This function caches the blogroll every time it runs, to save bandwidth and page requests.
*/
function _gr_blogroll_parse_url() {
  $url = variable_get('gr_blogroll_url', false);
  $cache = cache_get("gr_blogroll_data");
  $items = $cache ? $cache->data : null;

  if ($url && !$items){
    $xml_url = urldecode($url);
    if ($xml_url) {
      $file  = drupal_http_request($xml_url);
      libxml_use_internal_errors(true);
      $xml = simplexml_load_string($file->data);
      if ($xml === false) {
        drupal_set_message(t('The URL used as blogroll reference is invalid.'), 'error');
        return null;
      }
    }

    if (isset($xml->body->outline->outline)) {
      foreach($xml->body->outline->outline as $item) {
        $title = (string)$item['title'];
        $htmlUrl = (string)$item['htmlUrl'];
        $items[] = l($title, $htmlUrl, array('title' => $title), null, null, false, true);
      }
    } else {
      drupal_set_message(t('The URL used as blogroll reference is invalid. No blogroll could be retreived.'), 'error');
      return null;
    }
    cache_set("gr_blogroll_data",$items);
  }
  return $items;
}
