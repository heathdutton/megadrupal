<?php

/**
 * @file
 * Module based on this document:
 *   http://www.openidenabled.com/openid/use-your-own-url-as-an-openid/
 */ 

/**
 * Implement of hook_help().
 */
function openidurl_help($path, $arg) {
  switch ($path) {
    case 'admin/help#openidurl':
      global $user;
      $output = '<p>' . t('Allows using your own website as an identifier for third-party OpenID providers.') .'</p>';
      $output.= '<ol><li>' . t('Set the <a href="@openidurlsettings">global OpenID URL</a> to change the OpenID provider that appears on the <a href="@frontpage">front page</a>.', array('@openidurlsettings' => url('admin/config/services/openidurl'), '@frontpage' => url())) .'</li>';
      $output.= '<li>' . t('Configure the <a href="@userpermissions">user permission</a> to allow users to set their own personal OpenID provider that appears in their <a href="@user">user profile</a>. Make sure annonymous users have access to view the user profile in order to make this work.', array('@user' => url('user'), '@userpermissions' => url('admin/config/people/permissions', array('fragment' => 'module-openidurl')))) .'</li></ol>';
      return $output;
    case 'admin/config/services/openidurl':
      return '<p>' . t('The following allows you to modify the global OpenID provider that appears on the <a href="@front">front page</a>. Once set, and your server is accessible externally, you may <a href="@test" target="_blank">test these settings</a>.', array('@front' => url(), '@test' => 'http://testid.org/examples/consumer/')) . '</p>';
  }
}

/**
 * Implement hook_custom_theme().
 */ 
function openidurl_custom_theme() {
  if (drupal_is_front_page()) { // only display global one on front page
    $server = variable_get('openidurl_server');
    $delegate = variable_get('openidurl_delegate');
    $xrds = variable_get('openidurl_xrds');
    _openidurl_add_html_head($server, $delegate, $xrds);
  }
}

/**
 * Implement hook_menu().
 */
function openidurl_menu() {
  $items['admin/config/services/openidurl'] = array(
    'title' => 'OpenID URL',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openidurl_settings'),
    'access arguments' => array('administer openid url'),
    'description' => 'Delegate your URL as an OpenID.',
    'file' => 'openidurl.admin.inc',
  );
  return $items;
}

/**
 * Adds the required HTML to delegate the OpenID authentication
 */
function _openidurl_add_html_head($server = NULL, $delegate = NULL, $xrds = NULL) {
  if (!empty($server) || !empty($delegate)) {
    $versions = variable_get('openidurl_version', array(11, 20));
    if (in_array(11, $versions)) {
      drupal_add_html_head(array(
        '#tag' => 'link',
        '#attributes' => array(
          'rel' => 'openid.server',
          'href' => check_url($server),
        ),
      ), 'openidurl11server');
      drupal_add_html_head(array(
        '#tag' => 'link',
        '#attributes' => array(
          'rel' => 'openid.delegate',
          'href' => check_url($delegate),
        ),
      ), 'openidurl11delegate');
    }
    if (in_array(20, $versions)) {
      drupal_add_html_head(array(
        '#tag' => 'link',
        '#attributes' => array(
          'rel' => 'openid2.provider',
          'href' => check_url($server),
        ),
      ), 'openidurl20provider');
      drupal_add_html_head(array(
        '#tag' => 'link',
        '#attributes' => array(
          'rel' => 'openid2.local_id',
          'href' => check_url($delegate),
        ),
      ), 'openidurl20local_id');
    }
  }
  if (!empty($xrds)) {
    drupal_add_html_head(array(
      '#tag' => 'meta',
      '#attributes' => array(
        'http-equiv' => 'X-XRDS-Location',
        'content' => check_url($xrds),
      ),
    ), 'openidurlmeta');
  }
}

/**
 * Implement hook_permission().
 */
function openidurl_permission() {
  return array(
    'set personal openid url' => array(
      'title' => t('Set personal OpenID URL'),
      'description' => t('Change their own personal OpenID URL in their user profile.'),
    ),
    'administer openid url' => array(
      'title' => t('Administer OpenID URLs'),
      'description' => t('Perform maintenance for all administrative OpenID URL tasks.'),
    ),
  );
}

/**
 * Implement hook_form_FORM_ID_alter().
 */
function openidurl_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#user_category'] == 'account') {
    $user = $form['#user'];

    $access = user_access('administer openid url') || user_access('set personal openid url', $user);
    $form['openidurl'] = array(
      '#type' => 'fieldset',
      '#title' => 'OpenID URL',
      '#description' => t('Delegate your user profile as an <a href="@openid">OpenID</a>. Once set, you may <a href="@test" target="_blank">test these settings</a>.', array('@openid' => 'http://openid.net', '@test' => 'http://testid.org/examples/consumer/')),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#access' => $access,
      '#weight' => 10,
    );
    $form['openidurl']['openidurl_server'] = array(
      '#type' => 'textfield',
      '#title' => 'Server',
      '#description' => t('Your personal OpenID server URL (e.g. http://www.myopenid.com/server).'),
      '#default_value' => isset($user->openidurl_server) ? $user->openidurl_server : '',
    );
    $form['openidurl']['openidurl_delegate'] = array(
      '#type' => 'textfield',
      '#title' => 'Delegate',
      '#description' => t('This is your personal OpenID delegate (e.g. http://yourname.myopenid.com/).'),
      '#default_value' => isset($user->openidurl_delegate) ? $user->openidurl_delegate : '',
    );
    $form['openidurl']['openidurl_xrds'] = array(
      '#type' => 'textfield',
      '#title' => 'XRDS Location',
      '#description' => t('This is your personal OpenID XRDS location (e.g. http://yourname.myopenid.com/xrds).'),
      '#default_value' => isset($user->openidurl_xrds) ? $user->openidurl_xrds : '',
    );
    // Set the callback.
    if ($access) {
      $form['#submit'][] = 'openidurl_form_user_profile_form_alter_submit';
    }
  }
}

/**
 * Submit handler; When the user form is submitted.
 */
function openidurl_form_user_profile_form_alter_submit($form, $form_state) {
  $user = $form['#user'];

  // Remove the values from the database.
  db_delete('openidurl')->condition('uid', $user->uid)->execute();

  // Construct the data to be added to the database.
  $data = array(
    'uid' => $user->uid,
    'server' => $form_state['values']['openidurl_server'],
    'delegate' => $form_state['values']['openidurl_delegate'],
    'xrds' => $form_state['values']['openidurl_xrds'],
  );

  // Only write to the data if something was added.
  if (!empty($data['server']) || !empty($data['delegate']) || !empty($data['xrds'])) {
    drupal_write_record('openidurl', $data);
  }
}

/**
 * Implement hook_user_view().
 */
function openidurl_user_view($account, $view_mode, $langcode) {
  if ($view_mode == 'full') {
    _openidurl_add_html_head(
      isset($account->openidurl_server) ? $account->openidurl_server : '',
      isset($account->openidurl_delegate) ? $account->openidurl_delegate : '',
      isset($account->openidurl_xrds) ? $account->openidurl_xrds : ''
    );
  }
}

/**
 * Implement hook_user_load().
 */
function openidurl_user_load($users) {
  $result = db_query('SELECT * FROM {openidurl} WHERE uid IN (:uids)', array(':uids' => array_keys($users)));
  foreach ($result as $record) {
    $users[$record->uid]->openidurl_server = $record->server;
    $users[$record->uid]->openidurl_delegate = $record->delegate;
    $users[$record->uid]->openidurl_xrds = $record->xrds;
  }
}
