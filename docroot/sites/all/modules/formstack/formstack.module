<?php

/**
 * @file
 * An field module that adds a Formstack field type.
 */

/**
* Implements hook_help.
*
* Displays help and module information.
*
* @param path
*   Which path of the site we're using to display help
* @param arg
*   Array that holds the current path as returned from arg() function
*/
function formstack_help($path, $arg) {
  switch ($path) {
    case "admin/help#formstack":
      return '<p>' . t("Adds a Formstack field type.") . '</p>';
      break;
  }
}

/**
 * Implementation of hook_perm().
 */
function formstack_permission() {
  return array(
    'administer formstack' => array(
      'title' => t('Administer Formstack module'),
      'description' => t('Administer Formstack module')
    ),
    'view formstack forms' => array(
      'title' => t('View Formstack Forms'),
      'description' => t('View Formstack Forms')
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function formstack_menu() {
  $items['admin/config/services/formstack'] = array(
    'title' => 'Formstack',
    'description' => 'Formstack settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formstack_settings_form'),
    'access arguments' => array('administer formstack'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'inc/formstack.admin.inc',
  );
  $items['formstack/%'] = array(
    'title' => 'Formstack form',
    'description' => 'Formstack form page',
    'page arguments' => array(1),
    'page callback' => 'formstack_form_page',
    'access arguments' =>  array('view formstack forms'),
    'type' => MENU_CALLBACK,
    'file' => 'inc/formstack.pages.inc',
  );

  return $items;
}

/**
 * Implementation of hook_field_info().
 */
function formstack_field_info() {
  return array(
    'formstack_id' => array(
      'label' => t('Formstack Form'),
      'description' => t('Display a Formstack form'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'formstack_text',
      'default_formatter' => 'formstack_embed',
    ),
  );
}

/**
 * Implementation of hook_content_is_empty().
 */
function formstack_field_is_empty($item, $field) {
  if (empty($item['formstack_id']) || $item['formstack_id'] == 'noform' ) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 *
 * @see formstack_field_formatter_view()
 */
function formstack_field_formatter_info() {
  return array(
    'formstack_embed' => array(
      'label' => t('Embed form on page'),
      'field types' => array('formstack_id'),
    ),
    'formstack_link' => array(
      'label' => t('Link to form page'),
      'field types' => array('formstack_id'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Two formatters are implemented.
 * - formstack_embed outputs form markup.
 * - formstack_link outputs link to a form page.
 *
 * @see formstack_field_formatter_info()
 */
function formstack_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    // Outputs the form.
    case 'formstack_embed':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => html_entity_decode($item['formstack_js']),
        );
      }
    break;
    // Outputs a link to the form page.
    case 'formstack_link':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => '<a href="/formstack/' . $item['formstack_id'] . '" title="' . $item['formstack_title'] . '">' . $item['formstack_title'] . '</a>',
        );
      }
    break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * @see formstack_field_widget_form()
 */
function formstack_field_widget_info() {
  return array(
    'formstack_text' => array(
      'label' => t('Select Form'),
      'field types' => array('formstack_id'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function formstack_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['formstack_id']) ? $items[$delta]['formstack_id'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  $access_token = variable_get('formstack_access_token', '');
  $forms = Formstack::form($access_token);

  if (!is_numeric($forms)) {
    $forms = $forms->forms;
    switch ($instance['widget']['type']) {
      case 'formstack_text':
      $widget += array(
        '#type' => 'select',
        '#options' => _formstack_form_options($forms),
        '#default_value' => $value,
      );
      break;
    }
    $element['formstack_id'] = $widget;
  }
  else {
    watchdog('Formstack', 'Formstack Error: @errorcode @errormessage', array('@errorcode' => $forms, '@errormessage' => _formstack_error_message($forms)), WATCHDOG_WARNING);
    return array('noform' => t('No form'));
  }
  return $element;
}

/**
 * Implements hook_field_presave().
 */
function formstack_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $item) {
    if (isset($item['formstack_id']) && $item['formstack_id'] != 'noform') {
      $form = formstack_get_form($item);
      if ($form) {
        $items[$delta]['formstack_js'] = $form->javascript;
        $items[$delta]['formstack_title'] = $form->name;
      }
    }
    else {
      unset($items[$delta]);
    }
  }
}

function formstack_get_form($item) {
  $form_id = $item['formstack_id'];
  if ($form_id != 'noform') {
    $access_token = variable_get('formstack_access_token', '');
    $form = Formstack::form($access_token, $item['formstack_id']);
    if (!is_numeric($form)) {
      return $form;
    }
    else {
      watchdog('Formstack', 'Formstack Error: @errorcode @errormessage', array('@errorcode' => $forms, '@errormessage' => _formstack_error_message($forms)), WATCHDOG_WARNING);
    }
  }
  return FALSE;
}

/**
 * Return the available Formstack forms.
 */
function _formstack_form_options($forms) {
  $form_options = array();
  foreach ($forms as $form_option) {
    $form_options[$form_option->id] = $form_option->name;
  }

  $empty_option = array(
    'noform' => t('-No form-'),
  );
  $form_options = $empty_option + $form_options;
  return $form_options;
}

/*
 * Return the correct Formstack error message.
 */
function _formstack_error_message($error_code = NULL) {
  switch ($error_code) {
    case 400:
      $error_message = 'Bad Request - The request URI was invalid.';
      break;
    case 401:
      $error_message = 'Unauthorized - Valid oAuth credentials were not supplied.';
      break;
    case 403:
      $error_message = 'Forbidden - The current does not have access to this method.';
      break;
    case 404:
      $error_message = 'Not Found - The resource requested could not be found.';
      break;
    case 405:
      $error_message = 'Method Not Allowed - The requested method does not exist.';
      break;
    case 415:
      $error_message = 'Unsupported Media Type - A valid media type (JSON, XML, HTTP URL Encoded) was not used.';
      break;
    case 500:
      $error_message = 'Internal Server Error - An error occurred while processing the request.';
      break;
  }

  return $error_message;
}
