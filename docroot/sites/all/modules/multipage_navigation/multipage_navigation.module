<?php

/**
 * @file
 * Multipage Navigation.
 */

/*
 * Implements hook_menu().
 */
function multipage_navigation_menu() {
  $items['admin/config/user-interface/multipage-navigation'] = array(
    'title' => 'Multipage Navigation',
    'description' => 'Configuration for Multipage Navigation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multipage_navigation_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'multipage_navigation.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function multipage_navigation_block_info() {
  $blocks['multipage_navigation_1'] = array(
    'info' => t('Multipage Navigation 1'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['multipage_navigation_2'] = array(
    'info' => t('Multipage Navigation 2'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_wysiwyg_smart_paging_seo_form_alter().
 */
function multipage_navigation_wysiwyg_smart_paging_seo_form_alter(&$form) {
  $form['navigation_title'] = array(
    '#type' => 'textfield',
    '#name' => 'navigation_title',
    '#title' => 'Navigation Block Title',
    '#size' => 100,
    '#weight' => 99,
    '#description' => t('The title that will appear on the Navigation Block for multi-paged content.'),
  );
}

/**
 * Implements hook_block_view().
 */
function multipage_navigation_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'multipage_navigation_1':
    case 'multipage_navigation_2':
      if ($node = menu_get_object('node')) {
        $pagination = multipage_navigation_get_pagination($node);
        if (count($pagination->links) > 1) {
          $block['title'] = '';
          $block['content'] = array(
            '#theme' => 'multipage_navigation',
            '#pagination' => $pagination,
          );
        }
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function multipage_navigation_theme($existing, $type, $theme, $path) {
  return array(
    'multipage_navigation' => array(
      'template' => 'templates/block--multipage-navigation',
      'variables' => array(
        'title' => NULL,
        'links' => NULL,
        'page_of_total' => NULL,
        'pagination' => NULL,
      ),
    ),
    'multipage_navigation_link' => array(
      'variables' => array(
        'path' => NULL,
        'text' => NULL,
        'page_no' => NULL,
        'options' => NULL,
      ),
    ),
  );
}

/**
 * Theme for link.
 */
function theme_multipage_navigation_link($variables) {
  $variables['options']['html'] = TRUE;
  $page = '<span class="mn_page">' . $variables['page_no'] . '.</span> ';
  $title = '<span class="mn_title">' . $variables['text'] . '</span>';
  $output = $page . l($title, $variables['path'], $variables['options']);
  return $output;
}

/**
 * Helper to extract Smart Paging data from multi-page content.
 */
function multipage_navigation_get_pagination($node) {
  static $pagination;
  if (count($pagination) > 0) {
    return $pagination;
  }

  // Get content from the node.
  $body = field_get_items('node', $node, 'body'); // @TODO should work with any field that uses smart_paging.
  $content = $body[0]['value'];

  // Find all pagebreaks.
  $total_pages = 0;
  $page_break_comment = variable_get('smart_paging_pagebreak', '<!--pagebreak-->');
  preg_match_all('~' . $page_break_comment . '~', $content, $matched_tags);
  if (!empty($matched_tags[0])) {
    $total_pages = count($matched_tags[0]);
  }

  // Find all smartpagingurl tags.
  $fragment_urls = array();
  preg_match_all('<!--smartpagingurl "(.*)"-->', $content, $matched_tags); // @TODO improve regex.
  if (!empty($matched_tags[1])) {
    $fragment_urls = array_merge(array(''), $matched_tags[1]);
  }

  // Find all smartpagingmeta tags.
  $metatags = array();
  preg_match_all('<!--smartpagingmeta ({.*?})-->', $content, $matched_tags); // @TODO improve regex.
  if (!empty($matched_tags[1])) {
    $metatags = $matched_tags[1];
  }

  // Use the node title for the first item of the navigation.
  $metatags = array_merge(array(json_encode(array('navigation_title' => $node->title))), $metatags);

  // Create pagination.
  $pagination = new stdClass();
  $pagination->links = array();

  for ($page = 0; $page <= $total_pages; $page++) {

    // Use the node title in case a page has empty value.
    $navigation_title = $node->title;
    if (isset($metatags[$page])) {
      // Extract the Navigation title.
      if ($json_values = json_decode($metatags[$page])) {
        $navigation_title = $json_values->navigation_title;
      }
    }

    $options = array();
    $options['query']['page'] = '0,' . $page; // @TODO use the correct element.

    // Add fragment Url.
    if (!empty($fragment_urls[$page])) {
      $options['fragment'] = $fragment_urls[$page];
    }

    $current_page = _multipage_navigation_get_current_page(1); // @TODO find the correct value of $element.
    $active = ($current_page === $page) ? TRUE : FALSE;

    $pagination->links[] = array(
      'path' => 'node/' . $node->nid,
      'text' => $navigation_title,
      'options' => $options,
      'active' => $active
    );
  }

  // Allow other modules to change the pagination.
  drupal_alter('multipage_navigation', $pagination);

  // Order pages by weight (key)
  ksort($pagination->links);
  $page_number = 1;
  $links = array();

  foreach ($pagination->links as $link) {
    $link['page_no'] = $page_number;
    if (isset($link['active']) && $link['active'] === TRUE) {
      $link['options']['attributes']['class'][] = 'active-page';
      $pagination->current_page_number = $page_number;
      $pagination->default_title = $link['text'];
    }
    $links[] = theme_multipage_navigation_link($link);
    $page_number++;
  }
  $pagination->links = $links;

  return $pagination;
}

/**
 * Helper that returns the current Url.
 */
function _multipage_navigation_get_current_url() {
  $current_url = function_exists("path_alias_xt_get_path_alias") ? path_alias_xt_get_path_alias($_GET['q']) : drupal_get_path_alias($_GET['q']);
  $current_url = preg_replace('#(^/)|(/$)#', '', $current_url);
  $clean_url   = variable_get('clean_url', 0);
  $current_url = $clean_url ? $current_url : "?q=$current_url";
  return $current_url;
}

/**
 * Helper that returns the current page.
 */
function _multipage_navigation_get_current_page($element = 0) {
  global $pager_page_array;
  $page  = !empty($pager_page_array[$element]) ? (int) $pager_page_array[$element] : 0;
  return $page;
}

/**
 * Implements hook_field_extra_fields().
 */
function multipage_navigation_field_extra_fields() {
  $total = 2;
  $extra = array();
  for ($i = 1; $i < $total + 1; $i++) {
    foreach (variable_get('multipage_navigation_content_types', array()) as $type) {
      $extra['node'][$type]['display']['multipage_navigation_' . $i] = array(
        'label' => t('Multipage Navigation ' . $i),
        'description' => t('Displays the Multipage Navigation.'),
        'weight' => 10,
        'visible' => TRUE,
      );
    }
  }
  return $extra;
}


/**
 * Implements hook_node_view().
 */
function multipage_navigation_node_view($node, $view_mode, $langcode) {
  $extra = multipage_navigation_field_extra_fields();

  // Check that we're supporting the node type being viewed.
  if (empty($extra['node'][$node->type]['display'])) {
    return;
  }

  $config = field_bundle_settings('node', $node->type);
  foreach ($extra['node'][$node->type]['display'] as $field_name => $field_info) {
    // Check to make sure this field is visible in this view mode.
    $displays = &$config['extra_fields']['display'][$field_name];
    if (isset($displays['default']) && !isset($displays['full'])) {
      // Fallback for Default display when viewing full view node.
      $displays['full'] = $displays['default'];
    }
    if (empty($displays[$view_mode]['visible'])) {
      continue;
    }
    if ($field_name == 'multipage_navigation_1' || $field_name == 'multipage_navigation_2') {
      $pagination = multipage_navigation_get_pagination($node);
      if (count($pagination->links) > 1) {
        $node->content[$field_name] = array(
          '#theme' => 'multipage_navigation',
          '#pagination' => $pagination,
        );
      }
    }
  }
}

/**
 * Implements hook_page_alter()
 */
function multipage_navigation_page_alter(&$page) {
  drupal_add_css(drupal_get_path('module', 'multipage_navigation') . '/multipage_navigation.css');
  drupal_add_js(drupal_get_path('module', 'multipage_navigation') . '/multipage_navigation.js');
}

/**
 * Implements hook_uninstall().
 */
function multipage_navigation_uninstall() {
  variable_del('multipage_navigation_pagination_text');
  variable_del('multipage_navigation_content_types');
}

/**
 * Implements hook_preprocess_multipage_navigation().
 */
function multipage_navigation_preprocess_multipage_navigation(&$variables) {
  $pagination = $variables['pagination'];
  $variables['links'] = $pagination->links;
  $variables['title'] = $pagination->default_title;
  $variables['page_of_total'] = t(variable_get('multipage_navigation_pagination_text', 'Page @current of @total'),
    array(
      '@current' => $pagination->current_page_number,
      '@total' => count($pagination->links),
    )
  );
}
