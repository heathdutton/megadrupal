<?php
/**
 * @file
 * Tests for the Spcial Counters module.
 */
class SocialCountersTestCase extends DrupalWebTestCase {
  /**
   * Value for expire data.
   */
  const SETTINGS_EXPIRE = 600;

  /**
   * Value for delimiter.
   */
  const DELIMITER = '-';

  /**
   * A user with 'administer site configuration' permission.
   *
   * @var object
   */
  protected $filter_admin_user;

  public static function getInfo() {
    return array(
      'name' => 'Social Counters administration functionality',
      'description' => 'Tests the administrative functionality of the Social Counters.',
      'group' => 'Social Counters',
    );
  }

  public function setUp() {
    parent::setUp(array('social_counters'));

    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser(array(
      'administer site configuration',
    ));
    $this->drupalLogin($this->privileged_user);
  }

  /**
    * Tests the administrative functionality of the Social Counters.
    */
  public function testSocialCountersAdmin() {
    // Get test data and save on configuration page.
    $counters = social_counters_get_counters();
    $edit = $this->socialCountersAdminPostData($counters);
    $this->drupalPost('admin/config/services/social-counters', $edit, t('Save configuration'));
    $this->assertRaw(t('The configuration options have been saved.'));
  }

  /**
   * Test if getting numbers of follower/subscribers/etc. works ok.
   */
  public function testSocialCountersGetData() {
    // Save necessery data first.
    $this->testSocialCountersAdmin();

    // Try to get data from Social networks.
    $counters = social_counters_get_counters();
    foreach ($counters as $social_network => $info) {
      $data = $this->socialCountersTestData($social_network);
      if (empty($data)) {
        continue;
      }
      $number = social_counters_get_number($social_network, $info);
      $this->assertNotIdentical($number, FALSE, t("Data for @sn has been successfully got. Current value is @number.",
        array('@sn' => $social_network, '@number' => $number)));
    }
  }

  /**
   * Get test data for specific cosial network.
   */
  private function socialCountersTestData($social_network) {
    $data['vk'] = array(
      'id' => 'cocacola',
    );

    return (!empty($data[$social_network ])) ? $data[$social_network ] : array();
  }

  /**
   * Get data for POST request on administrative interface.
   */
  private function socialCountersAdminPostData($counters) {
    foreach ($counters as $social_network => $info) {
      $data = $this->socialCountersTestData($social_network);
      if (empty($data)) {
        continue;
      }

      // Set data for POST request.
      $edit['social_counters_status[' . $social_network . ']'] = $social_network;
      foreach ($info['variables'] as $var => $value) {
        $edit['social_counters_' . $social_network . '_' . $var] = $data[$var];
      }
    }

    $edit['social_counters_settings_expire'] = self::SETTINGS_EXPIRE;
    $edit['social_counters_delimiter'] = self::DELIMITER;

    return $edit;
  }

}