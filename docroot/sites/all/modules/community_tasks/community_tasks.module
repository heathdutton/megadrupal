<?php

/*
 * Allows permitted users to create tasks, and other users to commit to them, and be credited when the tasks are completed
 * Uncompleted tasks nodes are owned by user 1, committed tasks are owned by whoever committed to them
 * Completed tasks have the node flag 'promote
 */

/**
 * implements hook_node_info
 */
function community_tasks_node_info() {
  $types['community_task'] = array(
    'name' => t('Community task'),
    'base' => 'community_tasks',
    'description' => t('A way to post tasks the community needs volunteers for, for members to volunteer for those tasks, and to be credited when the tasks are done.') .
      t('Tasks have three states - open, committed, and completed.'),
    'has_title' => TRUE,
    'title_label' => t('A need to be met by a user'),
    'status' => TRUE,
    'promote' => FALSE,
  );
  return $types;
}

/**
 * implements hook_views_api
 */
function community_tasks_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'community_tasks').'/views',
  );
}

/**
 * implements hook_permission
 */
function community_tasks_permission() {
  return array(
    'view tasks' => array(
      'title' => t('view tasks'),
      'description' => t('view tasks in any state'),
    ),
    'edit tasks' => array(
      'title' => t('edit tasks'),
      'description' => t('edit tasks in any state'),
    ),
    'commit to tasks' => array(
      'title' => t('commit to tasks'),
      'description' => t('commit to to task (not user 1)'),
    ),
  );
}

/**
 * implements hook_node_access
 */
function community_tasks_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;
  if ($type != 'community_task') return NODE_ACCESS_IGNORE;

  switch ($op) {
    case 'update':
    case 'create':
    case 'delete':
      if (user_access('edit tasks')) return NODE_ACCESS_ALLOW;
    case 'view':
      if (user_access('view tasks')) return NODE_ACCESS_ALLOW;
  }
  return NODE_ACCESS_DENY;
}


/**
 * implements node hook_form
 */
function community_tasks_form(&$node, $form_state) {
  $form = node_content_form($node, $form_state);
  if (empty($node->nid)) {
    $node->uid = 1;
    $node->name = user_load(1)->name;
  }
  return $form;
}

/**
 * Implements hook_form_alter().
 */
function community_tasks_form_community_task_node_form_alter(&$form, &$form_state) {
  $form['revision_information']['#access'] = FALSE;

  //move the node owner out of the vertical tabs and hide the tab
  $form['name'] = array(//we know this field is processed by the node handler
    '#title' => t('Task owner'),
    '#description' => t('Who has committed to this task?') .' '. t('Uncommitted tasks are owned by @user', array('@user' => user_load(1)->name)),
  ) + $form['author']['name'];
  unset($form['author']);
  unset($form['options']);
  unset($form['buttons']['preview']);
  //this isn't working, perhaps it is overridden?
  $form_state['redirect'] = 'community_tasks';
}

/**
 * Implements node hook_view)().
 */
function community_tasks_view($node) {
  drupal_add_css(drupal_get_path('module', 'community_tasks') . '/theme/community_task.css');
  $node->content['body'] = field_view_field('node', $node, 'body');//hmm shouldn't this happen automatically?
  //don't know why the label display isn't showing.
  $node->content['body']['#label_display'] = 'hidden';
  //add the button for anyone but admin to commit themselves
  //TODO add node links here or in whatever hook
  $node->content['actions'] = _ctask_action_form($node);
  return $node;
}


/**
 * Implements hook_theme
 */
function community_tasks_theme() {
  return array(
    //puts a bit on the user profile form showing the user's score
    'acknowledgements' => array(
      'variables' => array(
          'account' => NULL,
          'quantity' => 0
      ),
    ),
  );
}
/*
 * implements hook_theme_registry_alter
 * adds the default proposition template suggestion to the theme registry
 */
function community_tasks_theme_registry_alter(&$callbacks) {
  $callbacks['node__community_task'] = array(
    'base hook' => 'node',
    'template' => 'node--community_task',
    'path' => drupal_get_path('module', 'community_tasks') .'/theme'
  ) + $callbacks['node'];
}

function community_tasks_preprocess_node(&$vars) {
  if ($vars['node']->type != 'community_task') return;
  $node = &$vars['node'];
  $state = ctask_get_state($node);
  $vars['description'] = ct_state_names($state, $node->uid);
  $vars['classes_array'][] = $state;
}


/**
 * Implements hook_user_view().
 */
function community_tasks_user_view($account, $view_mode) {
  $account->content['acknowledgements'] = array(
    '#type' => 'user_profile_item',
    '#title' => t('Acknowledgements'),
    '#markup' => theme('acknowledgements', array(
      'account' => $account,
      'quantity' => db_query('SELECT count(nid) FROM {node} WHERE uid = :uid AND promote = 1', array(':uid' => $account->uid))->fetchField()
    )),
    '#weight' => 1,
  );
}

/**
 * theme callback display the acknowledgements
 */
function theme_acknowledgements($variables) {
  $string  = t('@count tasks completed', array('@count' => $variables['quantity']));
  if ($variables['quantity'] > 0) {
    $string = l($string, 'user/'. $variables['account']->uid .'/community_tasks');
  }
  return '<div class="acknowledgements">' . $string  . '</div>';
}

function _ctask_action_form($node) {
  $state = ctask_get_state($node);
  $uid = &$GLOBALS['user']->uid;
  $output = array();
  if ($state == 'open' && $uid != 1) {
    $output[] = drupal_get_form('commit_button_form', $node);
  }
  elseif ($state == 'committed') {
    if ($uid == $node->uid && $uid != 1) {
      $output[] = drupal_get_form('uncommit_button_form', $node);
    }
    if (user_access('edit tasks')) {
      $output[] = drupal_get_form('acknowledge_button_form', $node);
    }
  }
  return $output;
}

function ctask_get_state($node) {
  if ($node->uid == 1) {
    return 'open';
  }
  elseif ($node->promote) {
    return 'completed';
  }
  else return 'committed';
}

function ct_state_names($state, $uid = 0) {
  switch ($state) {
    case 'open': return t('Open task');
    case 'committed':
      if ($uid) return t('@name committed to this', array('@name' => format_username(user_load($uid))));
      else return t('Committed');
    case 'completed':
      if ($uid) return t('Completed by @name',  array('@name' => format_username(user_load($uid))));
      else return ('Completed');
  }
}


function commit_button_form($form, $form_state, $node) {
  $form = array();
  $form['nid'] = array(
    '#type' => 'hidden',
    '#default_value' => $node->nid,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Commit to this task'),
  );
  return $form;
}

function commit_button_form_submit($form, &$form_state) {
  _community_tasks_change_node_owner($form_state['values']['nid'], $GLOBALS['user']->uid);

  $form_state['redirect'] = 'node/'.$form_state['values']['nid'];
}

function _community_tasks_change_node_owner($nid, $uid) {
  $node = node_load($nid);
  $node->uid = $uid;
  $node->name = user_load($uid)->name;
  node_save($node);
}

function uncommit_button_form($form, $form_state, $node) {
  $form = array();
  $form['nid'] = array(
    '#type' => 'hidden',
    '#default_value' => $node->nid,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Uncommit from this task'),
  );
  return $form;
}

function uncommit_button_form_submit($form, $form_state) {
  _community_tasks_change_node_owner($form_state['values']['nid'], 1);
  $node = node_load($form_state['values']['nid']);
  watchdog('community tasks', '@user uncommitted from task @nid', array(
    '@user' => format_username(user_load($node->uid)),
    '@nid' => $node->nid
  ));
  $form_state['redirect'] = 'node/'. $node->nid;
}

function acknowledge_button_form($form, $form_state, $node) {
  $form = array();
  $form['nid'] = array(
    '#type' => 'hidden',
    '#default_value' => $node->nid,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Acknowledge completed'),
  );
  return $form;
}

function acknowledge_button_form_submit($form, $form_state) {
  $node = node_load($form_state['values']['nid']);
  $node->promote = TRUE;
  node_save($node);

  foreach (trigger_get_assigned_actions('community_task_completed') as $aid => $info) {
    actions_do($aid, $node, array('group' => 'node', 'hook' => 'community_task_completed'));
  }

  $form_state['redirect'] = 'user/'. $node->uid .'/acknowledgements';
}

function community_tasks_hook_info() {
  return array(
    'community_task_completed' => array()
  );
}

function community_tasks_trigger_info_alter(&$triggers) {
  $triggers['node']['community_task_completed'] = array('label' => t('When a permitted user marks a task completed'));
}
