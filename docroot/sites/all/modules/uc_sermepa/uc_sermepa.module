<?php

require_once 'SermepaConnection.php';

/**
 * Implements of hook_menu().
 */
function uc_sermepa_menu() {
  $items = array();
  $items['uc_sermepa/post'] = array(
    'title' => 'Sermepa Post URL',
    'page callback' => 'uc_sermepa_post',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['uc_sermepa/return_ok'] = array(
    'title' => 'Sermepa Return URL OK',
    'page callback' => 'uc_sermepa_return_ok',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['uc_sermepa/return_ko'] = array(
    'title' => 'Sermepa Return URL KO',
    'page callback' => 'uc_sermepa_return_ko',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  // Admin menus.
  $items['admin/store/settings/uc_sermepa'] = array(
    'title' => 'Sermepa Settings',
    'description' => 'Manages banks available for Sermepa (Servired) payment',
    'page callback' => 'uc_sermepa_admin_settings',
    'access arguments' => array('administer store'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'uc_sermepa.admin.inc',
  );
  $items['admin/store/settings/uc_sermepa/add'] = array(
    'title' => 'Add a Bank',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_sermepa_form_bank', 'add'),
    'access arguments' => array('administer store'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'uc_sermepa.admin.inc',
  );
  $items['admin/store/settings/uc_sermepa/edit'] = array(
    'title' => 'Bank Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_sermepa_form_bank', 'edit'),
    'access arguments' => array('administer store'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_sermepa.admin.inc',
  );
  $items['admin/store/settings/uc_sermepa/restoretodefault'] = array(
    'title' => 'Restore settings to default',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_sermepa_form_restore_delete_bank', 'restoretodefault'),
    'access arguments' => array('administer store'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_sermepa.admin.inc',
  );
  $items['admin/store/settings/uc_sermepa/delete'] = array(
    'title' => 'Bank Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_sermepa_form_restore_delete_bank', 'delete'),
    'access arguments' => array('administer store'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_sermepa.admin.inc',
  );
  $items['admin/store/settings/uc_sermepa/export'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_sermepa_export_settings'),
    'access arguments' => array('administer store'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_sermepa.export.inc',
  );
//  $items['admin/store/settings/uc_sermepa/import'] = array(
//    'title' => 'Import sermepa settings',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('uc_sermepa_import_settings'),
//    'access arguments' => array('administer store'),
//    'weight' => 6,
//    'type' => MENU_LOCAL_ACTION,
//    'file' => 'uc_sermepa.export.inc',
//  );
  return $items;
}


/*******************************************************************************
 * CRUD Functions (Drupal)
 ***************************************************************************** */

/**
 * Get all the banks inserted in the system.
 */
function uc_sermepa_get_all_banks() {
  $banks = array();
  $sql = "SELECT * FROM {uc_sermepa_settings}";
  $result = db_query($sql);
  foreach ($result as $data) {
    $banks[$data->bankcode]['bankcode'] = $data->bankcode;
    $banks[$data->bankcode]['bankmode'] = $data->bankmode;
    $banks[$data->bankcode]['bankname'] = $data->bankname;
    $banks[$data->bankcode]['Ds_Merchant_Titular'] = $data->ds_merchant_titular;
    $banks[$data->bankcode]['Ds_Merchant_MerchantName'] = $data->ds_merchant_name;
    $banks[$data->bankcode]['Ds_MerchantCode'] = $data->ds_merchantcode;
    $banks[$data->bankcode]['Ds_MerchantSignature'] = $data->ds_merchantsignature;
    $banks[$data->bankcode]['Ds_Merchant_ProductDescription'] = $data->ds_merchant_productdescription;
    $banks[$data->bankcode]['Ds_Merchant_Terminal'] = $data->ds_merchant_terminal;
    $banks[$data->bankcode]['Ds_Merchant_PayMethods'] = $data->ds_merchant_paymethods;
    $banks[$data->bankcode]['currency'] = $data->currency;
    $banks[$data->bankcode]['url'] = $data->url;
    $banks[$data->bankcode]['enabled'] = $data->enabled;
//    $banks[$data->bankcode]['bydefault'] = $data->bydefault;
  }
  return $banks;
}

/**
 * Get one bank from the codename.
 */
function uc_sermepa_get_bank($bankcode = NULL) {

  if ($bankcode) {
    $sql = "SELECT * FROM {uc_sermepa_settings} WHERE bankcode = :code";
    $result = db_query( $sql, array(':code' => $bankcode) );
    $bank = $result->fetchObject();

    if ($bank->data) {
      $bank->data = unserialize($bank->data);
    }

    if ( !isset($bank->ds_merchant_productdescription) ) $bank->ds_merchant_productdescription = NULL;

    return $bank;
  }
  return;
}

/**
 * Save all settings from the bank.
 */
function uc_sermepa_save_bank($bank = array()) {
  if ($bank['bankcode']) {
    uc_sermepa_delete_bank($bank['bankcode']);
    if (isset($bank['extra_data'])) $bank['data'] = serialize($bank['extra_data']);
    return drupal_write_record('uc_sermepa_settings', $bank);
  }
}

/**
 * Delete one bank.
 */
function uc_sermepa_delete_bank($bankcode = NULL) {
  db_delete('uc_sermepa_settings')
    ->condition('bankcode', $bankcode)
    ->execute();
}

/**
 * Hook Functions (Ubercart)
 */

 /**
 * Implements hook_uc_payment_method().
 */
function uc_sermepa_uc_payment_method() {
  $methods = array();
  $banks = uc_sermepa_get_all_banks();
  foreach ($banks as $bank) {
    if ($bank['enabled']) {
      $method = array(
        'id' => $bank['bankcode'],
        'name' => $bank['bankname'] . ' (Sermepa)',
        'title' => t('Credit card payment on @bank secure server', array('@bank' => $bank['bankname'])),
        'review' => t('@bank secure server', array('@bank' => $bank['bankname'])),
        'desc' => t('Redirect users to submit payments through @bank.', array('@bank' => $bank['bankname'])),
        'callback' => 'uc_sermepa_payment_method_callback',
        'weight' => 1,
        'checkout' => TRUE,
        'backend' => TRUE,
      );
      $methods[] = $method;
    }
  }
  return $methods;
}

// Handles Sermepa payment method.
function uc_sermepa_payment_method_callback($op, &$arg1) {
  switch ($op) {
    case 'cart-review':
      $bank = uc_sermepa_get_bank($arg1->payment_method);
      $review[] = array('title' => t('Payment Details'), 'data' => t("Payment through @bank secure server",  array('@bank' => $bank->bankname)));
      return $review;
  }
}

/**
 * Functions to add the sermepa info to the order.
 */

/**
 * Implements hook_form_alter().
 */
function uc_sermepa_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uc_cart_checkout_review_form' && ($order_id = intval($_SESSION['cart_order'])) > 0) {
      $method = uc_sermepa_valid_bank($form_state['uc_order']->payment_method);
        if ($method) {
    $order = uc_order_load($order_id);
    $bank = uc_sermepa_get_bank($order->payment_method);
    if ($bank->bankcode) {
      unset($form['actions']['submit']);
      $form['#prefix'] = '<table style="display: inline; padding-top: 1em;"><tr><td>';
      $sermepa_form = drupal_get_form('uc_sermepa_form', $order, $bank);
      $form['#suffix'] = '</td><td>' . drupal_render( $sermepa_form ) . '</td></tr></table>';
    }
  }
}
}

// Returns the form elements for Sermepa form.
function uc_sermepa_form($form, &$form_state, $order, $bank) {

  if ( $bank->encryption == 'hmac_sha256_v1' ) {
    return _uc_sermepa_form_sha256($form_state, $order, $bank);
  }
  else{
    return _uc_sermepa_form_sha1($form_state, $order, $bank);
  }

}

function _uc_sermepa_form_sha1($form_state, $order, $bank) {
  global $user, $base_url;
  $return_base_url = trim( url( '<front>', array( 'absolute' => TRUE ) ) , '/'); // Takes user language into account

  //Ds_Merchant_Amount
  $ds_merchant_amount = round($order->order_total*100);
  //Ds_Merchant_Order
  $ds_merchant_order = date('ymdHis') + 100000000000;
  //Ds_Merchant_MerchantURL
  $ds_merchant_merchanturl = $return_base_url . '/uc_sermepa/post';
  //Ds_Merchant_UrlOK
  $ds_merchant_urlok = $return_base_url . '/uc_sermepa/return_ok';
  //Ds_Merchant_UrlKO
  $ds_merchant_urlko = $return_base_url . '/uc_sermepa/return_ko';
  //Ds_Merchant_ConsumerLanguage
  $ds_merchant_consumerlanguage = uc_sermepa_get_merchant_consumerlanguage();
  //Ds_Merchant_TransactionType
  $ds_merchant_transactiontype = '0'; //normal payment, no recurring.
  //DS_Merchant_PayMethods
  $ds_merchant_paymethods = $bank->ds_merchant_paymethods; //AL METHODS IF NOTHING USED

  if ($bank->encryption == 'sha1-ampliado') {
    $message = $ds_merchant_amount . $ds_merchant_order . $bank->ds_merchantcode . $bank->currency . $ds_merchant_transactiontype . $ds_merchant_merchanturl . $bank->ds_merchantsignature;
    $ds_merchant_merchantsignature = strtoupper(sha1($message));
  }
  elseif ($bank->encryption == 'sha1') {
    module_load_include('inc', 'uc_sermepa', 'sha1');
    $sha = new SHA1;
    $message = $ds_merchant_amount . $ds_merchant_order . $bank->ds_merchantcode . $bank->currency . $bank->ds_merchantsignature;
    $digest1 = $sha->hash_string($message);
    $ds_merchant_merchantsignature = strtoupper($sha->hash_to_string($digest1));
  }

  //Ds_Merchant_MerchantData
  $ds_merchant_merchantdata = serialize(array($order->order_id, $bank->bankcode, $bank->bankmode));

  //Ds_Merchant_ProductDescription
  $ds_merchant_productdescription = token_replace($bank->ds_merchant_productdescription, array('uc_order' => $order));

  //printing the form
  $form['#action'] = $bank->url;
  $form['Ds_Merchant_Amount'] = array('#type' => 'hidden', '#value' => $ds_merchant_amount) ;
  $form['Ds_Merchant_Currency'] = array('#type' => 'hidden', '#value' => $bank->currency) ;
  $form['Ds_Merchant_Order'] = array('#type' => 'hidden', '#value' => $ds_merchant_order) ;
  $form['Ds_Merchant_ProductDescription'] = array('#type' => 'hidden', '#value' => $ds_merchant_productdescription) ;
  $form['Ds_Merchant_Titular'] = array('#type' => 'hidden', '#value' => $bank->ds_merchant_titular) ;
  $form['Ds_Merchant_MerchantName'] = array('#type' => 'hidden', '#value' => $bank->ds_merchant_name) ;
  $form['Ds_Merchant_MerchantCode'] = array('#type' => 'hidden', '#value' => $bank->ds_merchantcode) ;
  $form['Ds_Merchant_MerchantURL'] = array('#type' => 'hidden', '#value' => $ds_merchant_merchanturl) ;
  $form['Ds_Merchant_UrlOK'] = array('#type' => 'hidden', '#value' => $ds_merchant_urlok) ;
  $form['Ds_Merchant_UrlKO'] = array('#type' => 'hidden', '#value' => $ds_merchant_urlko) ;
  $form['Ds_Merchant_ConsumerLanguage'] = array('#type' => 'hidden', '#value' => $ds_merchant_consumerlanguage) ;
  $form['Ds_Merchant_TransactionType'] = array('#type' => 'hidden', '#value' => $ds_merchant_transactiontype) ;
  $form['Ds_Merchant_MerchantSignature'] = array('#type' => 'hidden', '#value' => $ds_merchant_merchantsignature) ;
  $form['Ds_Merchant_Terminal'] = array('#type' => 'hidden', '#value' => $bank->ds_merchant_terminal) ;
  $form['Ds_Merchant_MerchantData'] = array('#type' => 'hidden', '#value' => $ds_merchant_merchantdata) ;
  $form['Ds_Merchant_PayMethods'] = array('#type' => 'hidden', '#value' => $ds_merchant_paymethods) ;

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit Order'),
  );

  return $form;
}

function _uc_sermepa_form_sha256($form_state, $order, $bank) {
  global $user, $base_url;
  $return_base_url = trim( url( '<front>', array( 'absolute' => TRUE ) ) , '/'); // Takes user language into account

  $ds_merchant_amount = round($order->order_total*100);
  $ds_merchant_order = substr(date('ymdHis') . 'A' . $order->order_id, -12, 12);
  $ds_merchant_merchanturl = $base_url . '/uc_sermepa/post';
  $ds_merchant_urlok = $base_url . '/uc_sermepa/return_ok';
  $ds_merchant_urlko = $base_url . '/uc_sermepa/return_ko';
  $ds_merchant_consumerlanguage = uc_sermepa_get_merchant_consumerlanguage();
  $ds_merchant_transactiontype = '0'; //normal payment, no recurring.
  $ds_merchant_paymethods = $bank->ds_merchant_paymethods; //AL METHODS IF NOTHING USED
  $ds_merchant_merchantdata = base64_encode( serialize(array($order->order_id, $bank->bankcode, $bank->bankmode)) );
  $ds_merchant_productdescription = token_replace( $bank->ds_merchant_productdescription, array('uc_order' => $order) );

  $redsysAPI = new SermepaConnection;
  $redsysAPI->setTransactionParam("Ds_Merchant_Amount", $ds_merchant_amount );
  $redsysAPI->setTransactionParam("Ds_Merchant_Currency", $bank->currency );
  $redsysAPI->setTransactionParam("Ds_Merchant_Order", $ds_merchant_order );
  $redsysAPI->setTransactionParam("Ds_Merchant_Titular", $bank->ds_merchant_titular );
  $redsysAPI->setTransactionParam("Ds_Merchant_MerchantName", $bank->ds_merchant_name );
  $redsysAPI->setTransactionParam("Ds_Merchant_MerchantCode", $bank->ds_merchantcode );
  $redsysAPI->setTransactionParam("Ds_Merchant_MerchantUrl", $ds_merchant_merchanturl );
  $redsysAPI->setTransactionParam("Ds_Merchant_UrlOK", $ds_merchant_urlok );
  $redsysAPI->setTransactionParam("Ds_Merchant_UrlKO", $ds_merchant_urlko );
  $redsysAPI->setTransactionParam("Ds_Merchant_ConsumerLanguage", $ds_merchant_consumerlanguage );
  $redsysAPI->setTransactionParam("Ds_Merchant_PayMethods", $ds_merchant_paymethods );
  $redsysAPI->setTransactionParam("Ds_Merchant_TransactionType", $ds_merchant_transactiontype );
  $redsysAPI->setTransactionParam("Ds_Merchant_Terminal", $bank->ds_merchant_terminal );
  $redsysAPI->setTransactionParam("Ds_Merchant_MerchantData", $ds_merchant_merchantdata );
  $redsysAPI->setTransactionParam("Ds_Merchant_ProductDescription", $ds_merchant_productdescription );

  //printing the form
  $form['#action'] = $bank->url;

  $form['Ds_SignatureVersion'] = array(
    '#type' => 'hidden',
    '#value' => 'HMAC_SHA256_V1'
  );

  $form['Ds_MerchantParameters'] = array(
    '#type' => 'hidden',
    '#value' => $redsysAPI->getRequestData()
  );

  $form['Ds_Signature'] = array(
    '#type' => 'hidden',
    '#value' => $redsysAPI->getSignature( $bank->ds_merchantsignature )
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit Order'),
  );

  return $form;
}


// Handles the response sent by Sermepa.
function uc_sermepa_post() {
  if (isset($_REQUEST['Ds_Order'])) {
    // Temporary backward compatibility
    _uc_sermepa_post_sha1( $_REQUEST );
  }
  else{
    _uc_sermepa_post_sha256( $_REQUEST );
  }
  exit();
}

function _uc_sermepa_post_sha1( $values ) {
  $data = unserialize($values['Ds_MerchantData']);
  $bank = uc_sermepa_get_bank($data[1]);
  //This is something quite important to track, so we log the response.
  watchdog(
    'uc_sermepa',
    t('Order !order_id response received: !message <br/> !details',
    array(
      '!order_id' => intval($values['Ds_Order']),
      '!message' => check_plain($values['Ds_Response']),
      '!details' => '<pre>' . print_r($values, TRUE) . '</pre>')) );

  $message = $values['Ds_Amount'] . $values['Ds_Order'] . $values['Ds_MerchantCode'] . $values['Ds_Currency'] . $values['Ds_Response'] . $bank->ds_merchantsignature;
  $signature = strtoupper(sha1($message));
  $order_id = $data[0];

  //If the order has completed Ok, then enter the payment and change the status to payment received and then completed.
  if ($values['Ds_Signature'] == $signature && $values['Ds_Response'] == '0000') {
    watchdog('uc_sermepa', 'Order !order_id accepted', array('!order_id' => intval($order_id)) );
    $order = uc_order_load($order_id);
    // set correspondent to paid status, the amount returned by Sermepa is divided by 100.
    uc_payment_enter($order->order_id, $bank->bankcode, $values['Ds_Amount']/100, 0, NULL, '' );
    uc_order_update_status($order->order_id, 'payment_received');
    // complete the sale and log user
    uc_cart_complete_sale($order);
    // Empty the cart.
    uc_cart_empty(uc_cart_get_id());
  }
  else {
    watchdog('uc_sermepa', 'Order !order_id DENIED (Response = !response)', array('!order_id' => intval($order_id), '!response' => intval($values['Ds_Response'])) );
  }
}

function _uc_sermepa_post_sha256( $request ) {

  if ( empty($request) ) $request = $_POST;
  if ( empty($request) ) exit();

  $version = $request["Ds_SignatureVersion"];
  $receivedData = $request["Ds_MerchantParameters"];
  $receivedSignature = $request["Ds_Signature"];

  $redsysAPI = new SermepaConnection;
  $jsonResponse = $redsysAPI->decodeResponse( $receivedData );
  $data = json_decode($jsonResponse);

  $merchantData = unserialize( base64_decode($data->Ds_MerchantData)  );
  $data->Ds_MerchantData = $merchantData;

  $order_id =$merchantData[0];
  $dsResponse = $data->Ds_Response;

  //This is something quite important to track, so we log the response.
  watchdog('uc_sermepa', 'Order !order_id response received: !message<br>!details' , array(
    '!order_id' => intval( $order_id ),
    '!message' => check_plain($values['Ds_Response']),
    '!details' => '<pre>' . print_r( $data, TRUE) . '</pre>')
  );

  // Signature validation
  $bank = uc_sermepa_get_bank( $merchantData[1] );
  $signature = $redsysAPI->getResponseSignature( $bank->ds_merchantsignature, $receivedData );
  if ( $signature !== $receivedSignature ) {
    watchdog('uc_sermepa', 'Order !order_id. Signature verification failed.',
      array( '!order_id' => intval( $order_id ) ),
      WATCHDOG_ALERT
    );
    exit();
  }

  //If the order has completed Ok, then enter the payment and change the status to payment received and then completed.
  if ( intval( $dsResponse ) < 100 ) {
    watchdog('uc_sermepa', 'Order !order_id accepted', array('!order_id' => intval($order_id)) );
    $order = uc_order_load($order_id);
    // set correspondent to paid status, the amount returned by Sermepa is divided by 100.
    $amount = $data->Ds_Amount;
    $comment = t('Auth Code') . ' ' . $data->Ds_AuthorisationCode;
    uc_payment_enter($order->order_id, $bank->bankcode, $amount/100, 0, NULL, $comment);
    uc_order_update_status($order->order_id, 'payment_received');
    // complete the sale and log user
    uc_cart_complete_sale($order);
    // Empty the cart.
    uc_cart_empty(uc_cart_get_id());
  }
  else {
    $codeDescription = _uc_sermepa_get_code_description( $dsResponse );
    watchdog('uc_sermepa', 'Order !order_id DENIED ( Response = !response )',
      array('!order_id' => intval($order_id), '!response' =>  $dsResponse . ': ' . $codeDescription ),
      WATCHDOG_ALERT
    );
    $log_message = t('@method payment failed. Error code !error', array(
      '@method' => $bank->bankname,
      '!error' => $dsResponse . ': ' . $codeDescription ));
    uc_order_log_changes( $order_id, array($log_message) );
  }
}

function uc_sermepa_return_ko() {
  drupal_goto('cart/checkout/review');
}

function uc_sermepa_return_ok() {

  uc_cart_empty(uc_cart_get_id());

  // This lets us know it's a legitimate access of the complete page.
  $_SESSION['do_complete'] = TRUE; // Compatibility with ubercart versions < 3.0-RC4
  $_SESSION['uc_checkout'][$_SESSION['cart_order']]['do_complete'] = TRUE;
  drupal_goto('cart/checkout/complete');
}

function _uc_sermepa_get_response_values_from( $data ) {
  $values = array();
  foreach ( $data as $i => $value ) {
    if ( substr( $i, 0, 3 ) == 'Ds_' ) {
      $values[ $i ] = "$value";
    }
  }
  return $values;
}

/**
 * Configure the banks supported by default.
 */
function uc_sermepa_default_banks($bankcode = NULL) {
  $banks = array();
  $bank = new stdClass;
  $bank->bankcode = 'lacaixa_test';
  $bank->bankmode = 'test';
  $bank->bankname = 'La Caixa';
  $bank->ds_merchant_titular = 'Test Shop Owner';
  $bank->ds_merchant_name = 'Test Shop';
  $bank->ds_merchantcode = '999008881';
  $bank->ds_merchantsignature = 'qwertyasdf0123456789';
  $bank->ds_merchant_terminal = '001';
  $bank->ds_merchant_productdescription = 'Test shopping';
  $bank->ds_merchant_paymethods = ''; //AL METHODS BY DEFAULT
  $bank->currency = 978;
  $bank->url = 'https://sis-t.sermepa.es:25443/sis/realizarPago';
  $bank->enabled = 0;
  $bank->encryption = 'sha1-ampliado';
  $banks[$bank->bankcode] = $bank;
  if (!empty($bankcode)) {
    return $banks[$bankcode];
  }
  else {
    foreach ($banks as $bank) {
      drupal_write_record('uc_sermepa_settings', $bank);
    }
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function uc_sermepa_ctools_plugin_api($owner, $api) {
  if ($owner == 'uc_sermepa' && $api == 'default_uc_sermepa_settings') {
    return array('version' => 1);
  }
}

/**
 * Gets Sermepa Language ID from current language.
 */
function uc_sermepa_get_merchant_consumerlanguage() {

  // Known sermepa langs
  $codes= array(
    'es' => 1,
    'es-es' => 1,
    'en' => 2,
    'en-us' => 2,
    'ca' => 3,
    'fr' => 4,
    'de' => 5,
    'nl' => 6,
    'it' => 7,
    'sv' => 8,
    'pt' => 9,
    'pt-pt' => 9,
  );

  global $language ;
  $lang = $language->language ;

  if ( isset($codes[$lang]) ) {
    return $codes[$lang];
  }
  else{
    return 1; // Defaults to spanish
  }

}

/**
 * Valid bank.
 */
function uc_sermepa_valid_bank($bankcode) {

    $bank = FALSE;

    $result = db_select('uc_sermepa_settings', 'u')
    ->fields('u')
    ->condition('bankcode', $bankcode, '=')
    ->execute()
    ->fetchAssoc();


    if ($result) {
        $bank = TRUE;
    }

    return $bank;
}


function _uc_sermepa_get_code_description( $code ) {
  $redsysResponseCodes = array(
    101 =>  'Tarjeta caducada',
    102 =>  'Tarjeta en excepción transitoria o bajo sospecha de fraude',
    106 =>  'Intentos de PIN excedidos',
    125 =>  'Tarjeta no efectiva',
    129 =>  'Código de seguridad (CVV2/CVC2) incorrecto',
    180 =>  'Tarjeta ajena al servicio',
    184 =>  'Error en la autenticación del titular',
    190 =>  'Denegación del emisor sin especificar motivo',
    191 =>  'Fecha de caducidad errónea',
    202 =>  'Tarjeta en excepción transitoria o bajo sospecha de fraude con retirada de tarjeta',
    904 =>  'Comercio no registrado en FUC',
    909 =>  'Error de sistema',
    913 =>  'Pedido repetido',
    944 =>  'Sesión Incorrecta',
    950 =>  'Operación de devolución no permitida',
    912 =>  'Emisor no disponible',
    9912 => 'Emisor no disponible',
    9064 =>  'Número de posiciones de la tarjeta incorrecto',
    9078 =>  'Tipo de operación no permitida para esa tarjeta',
    9093 =>  'Tarjeta no existente',
    9094 =>  'Rechazo servidores internacionales',
    9104 =>  'Comercio con "titular seguro" y titular sin clave de compra segura',
    9218 =>  'El comercio no permite op. seguras por entrada /operaciones',
    9253 =>  'Tarjeta no cumple el check-digit',
    9256 =>  'El comercio no puede realizar preautorizaciones',
    9257 =>  'Esta tarjeta no permite operativa de preautorizaciones',
    9261 =>  'Operación detenida por superar el control de restricciones en la entrada al SIS',
    9915 =>  'A petición del usuario se ha cancelado el pago',
    9928 =>  'Anulación de autorización en diferido realizada por el SIS (proceso batch)',
    9929 =>  'Anulación de autorización en diferido realizada por el comercio',
    9997 =>  'Se está procesando otra transacción en SIS con la misma tarjeta',
    9998 =>  'Operación en proceso de solicitud de datos de tarjeta',
    9999 =>  'Operación que ha sido redirigida al emisor a autenticar',
  );

  if ( !empty( $redsysResponseCodes[$code] ) ) {
    return $redsysResponseCodes[$code];
  }
  else{
    return t('Unknown error');
  }
}
