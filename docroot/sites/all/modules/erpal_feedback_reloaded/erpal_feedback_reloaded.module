<?php

/**
 * @file
 * Module file for erpal_feedback_reloaded.
 */

/**
 * Specifies ERPAL login service url.
 */
define('ERPAL_FEEDBACK_RELOADED_LOGIN_URL', '/rest/projects/user/login.json');

/**
 * Specifies ERPAL session token service url.
 */
define('ERPAL_FEEDBACK_RELOADED_SESSION_TOKEN_URL', '/services/session/token');

/**
 * Specifies ERPAL create task service url.
 */
define('ERPAL_FEEDBACK_RELOADED_CREATE_TASK_URL', 'rest/projects/task');

/**
 * Specifies ERPAL get taxonomy terms service url.
 */
define('ERPAL_FEEDBACK_RELOADED_TAXONOMY_TERMS_URL', 'rest/projects/erpal_taxonomy.json');

/**
 * Specifies default task body text with tokens.
 */
define('ERPAL_FEEDBACK_RELOADED_TASK_DEFAULT_TEXT', 'Message: [feedback_reloaded:message], User Agent: [feedback_reloaded:useragent], URL: [feedback_reloaded:url]');

/**
 * Implements hook_init().
 */
function erpal_feedback_reloaded_init() {
  if (user_access('access feedback form') && !feedback_reloaded_match_path(variable_get('feedback_reloaded_excluded_paths', 'admin/reports/feedback'))) {
    $path = drupal_get_path('module', 'erpal_feedback_reloaded');
    drupal_add_js($path . '/js/erpal_feedback.js', array('weight' => 2));
  }
}

/**
 * Implements hook_menu().
 */
function erpal_feedback_reloaded_menu() {

  // Create a tab for feedback reloaded settings page.
  $items['admin/config/workflow/feedback/main'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feedback_reloaded_settings_form'),
    'access arguments' => array('administer feedback'),
    'file path' => drupal_get_path('module', 'feedback_reloaded'),
    'file' => 'feedback_reloaded.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/config/workflow/feedback/erpal_feedback'] = array(
    'title' => 'ERPAL feedback',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('erpal_feedback_reloaded_settings'),
    'access arguments' => array('administer feedback'),
    'file' => 'erpal_feedback_reloaded.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function erpal_feedback_reloaded_form_feedback_wizard_form_alter(&$form) {
  $form['feedbacktype']['#default_value'] = 'erpal_feedback';
}

/**
 * Send service request to ERPAL for task creation.
 */
function erpal_feedback_send_task($feedback) {
  $login = erpal_feedback_reloaded_request_login();

  if ($login) {
    $default_project_nid = variable_get('erpal_feedback_project_nid', '');

    if ($default_project_nid) {
      $body = variable_get('erpal_feedback_task_body', '');
      $parent_task_nid = variable_get('erpal_feedback_task_nid', '');
      $task = new stdClass();
      $task->uid = $login['uid'];
      $task->title = $feedback->title;
      $task->body = token_replace($body, array('feedback_reloaded' => $feedback));
      $task->project = $default_project_nid;
      $task->type = 'erpal_task';
      $task->status = $feedback->field_erpal_feedback_status[LANGUAGE_NONE][0]['value'];
      $task->priority = $feedback->field_erpal_feedback_priority[LANGUAGE_NONE][0]['value'];
      $task->task_type = $feedback->field_erpal_feedback_type[LANGUAGE_NONE][0]['value'];
      $task->ticket = variable_get('erpal_feedback_ticket', 0);

      if ($parent_task_nid) {
        $task->parent = $parent_task_nid;
      }

      $url = explode('/', $feedback->screenshoturl);
      $file = '';
      if (!isset($feedback->screenshot)) {
        $content = file_get_contents($feedback->screenshoturl);
        $file = base64_encode($content);
      }
      else {
        $file = $feedback->screenshot;
      }
      $task->file = array(
        'file' => $file,
        'filename' => end($url),
      );

      $task = drupal_json_encode($task);
      $task_nid = erpal_feedback_reloaded_request(ERPAL_FEEDBACK_RELOADED_CREATE_TASK_URL, 'POST', $task, $login);
      if (!$task_nid) {
        return FALSE;
      }
      $nid = drupal_json_decode($task_nid->data);

      return isset($nid[0]) ? $nid[0] : FALSE;
    }
    else {
      drupal_set_message(t('Service error: project not found.'), 'error');
    }
  }
  return FALSE;
}

/**
 * Hepler function for login request.
 */
function erpal_feedback_reloaded_request_login() {
  $url = variable_get('erpal_feedback_url', '');
  $login_url = $url . ERPAL_FEEDBACK_RELOADED_LOGIN_URL;
  $options = array(
    'method' => 'POST',
    'headers' => array('Content-Type' => 'application/json'),
    'data' => drupal_json_encode(array(
      'username' => variable_get('erpal_feedback_login', ''),
      'password' => variable_get('erpal_feedback_password', ''),
    )),
  );

  // Perform the authentication request.
  $response = drupal_http_request($login_url, $options);
  if (isset($response->error) || !in_array($response->code, array(200, 304))) {
    drupal_set_message(t('Authentication error: @code @error', array(
      '@code' => $response->code, '@error' => $response->error)), 'error');
    return FALSE;
  }

  $response_data = drupal_json_decode($response->data);
  if (!empty($response_data['session_name']) && !empty($response_data['sessid'])) {
    $cookie = $response_data['session_name'] . "=" . $response_data['sessid'] . ";";
    $token_url = $url . ERPAL_FEEDBACK_RELOADED_SESSION_TOKEN_URL;
    $options = array(
      'method' => 'GET',
      'headers' => array('Cookie' => $cookie),
    );
    $token_response = drupal_http_request($token_url, $options);
    if (isset($token_response->error) || !in_array($token_response->code, array(200, 304))) {
      drupal_set_message(t('Authentication error: @code @error', array(
        '@code' => $token_response->code,
        '@error' => t('Failed to retrieve CSRF token.'))), 'error');
      return FALSE;
    }

    $options = array(
      'cookie' => $cookie,
      'token' => trim($token_response->data),
      'uid' => $response_data['user']['uid'],
    );
    return $options;
  }
  return FALSE;
}

/**
 * Hepler function for sending request.
 */
function erpal_feedback_reloaded_request($path, $method, $data, $options) {
  $url = variable_get('erpal_feedback_url', '') . '/' . $path;
  $headers['Content-Type'] = 'application/json';
  $headers['Cookie'] = $options['cookie'];
  $headers['X-CSRF-Token'] = $options['token'];

  $options = array(
    'method' => $method,
    'headers' => $headers,
    'data' => $data,
  );

  $response = drupal_http_request($url, $options);

  if (isset($response->error) || !in_array($response->code, array(200, 304))) {
    drupal_set_message(t('Service error: @code @error', array('@code' => $response->code, '@error' => $response->error)), 'error');
    return FALSE;
  }

  return $response;
}

/**
 * Acts on a Feedback being inserted or updated.
 *
 * This hook is invoked before the Feedback is saved to the database.
 *
 * @param FeedbackR $feedback
 *   The Feedback that is being inserted or updated.
 *
 * @see hook_entity_presave()
 */
function erpal_feedback_reloaded_feedback_reloaded_presave(FeedbackR $feedback) {
  if ($feedback->type == 'erpal_feedback' && !isset($feedback->fid)) {
    $nid = erpal_feedback_send_task($feedback);
    if ($nid) {
      $language = field_language($feedback->type, $feedback, 'field_erpal_feedback_nid');
      $feedback->field_erpal_feedback_nid[$language][0]['value'] = $nid;
      $feedback->status = 1;
    }
  }
}

/**
 * Implements hook_views_api().
 */
function erpal_feedback_reloaded_views_api($module = NULL, $api = NULL) {
  return array(
    "api" => "3.0",
    'path' => drupal_get_path('module', 'erpal_feedback_reloaded') . '/views',
  );
}

/**
 * Implements hook_action_info().
 *
 * Send to ERPAL action. Uses Entity API.
 */
function erpal_feedback_reloaded_action_info() {
  return array(
    'views_bulk_operations_send_feedback_to_erpal' => array(
      'type' => 'entity',
      'label' => t('Send to ERPAL'),
      'configurable' => FALSE,
      'behavior' => array('changes_property'),
      'triggers' => array('any'),
    ),
  );
}

/**
 * Send to ERPAL action callback.
 */
function views_bulk_operations_send_feedback_to_erpal($entity, $context) {
  if ($entity->type != 'erpal_feedback') {
    return FALSE;
  }

  $language = field_language($entity->type, $entity, 'field_erpal_feedback_nid');
  if (!isset($entity->field_erpal_feedback_nid[$language][0]['value'])) {
    $nid = erpal_feedback_send_task($entity);

    if ($nid) {
      $entity->field_erpal_feedback_nid[$language][0]['value'] = $nid;
      $entity->status = 1;
      feedback_reloaded_save($entity);
      drupal_set_message(t('Feedback send to ERPAL.'));
    }
    else {
      drupal_set_message(t('Feedback send error.'), 'error');
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function erpal_feedback_reloaded_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'feedback_reloaded_form') {
    $form['title']['#required'] = TRUE;
    $form['field_erpal_feedback_nid']['#access'] = FALSE;
    $form['actions']['submit']['#ajax']['callback'] = 'erpal_feedback_reloaded_form_callback';
  }
}

/**
 * Change feedback reload form callback function.
 */
function erpal_feedback_reloaded_form_callback(&$form, &$form_state) {
  $ajax = feedback_reloaded_form_callback($form, $form_state);

  if (!empty($ajax['#commands'])) {
    $ajax['#commands'][] = ajax_command_prepend('#wizard_content', theme('status_messages'));
    $ajax['#commands'][] = ajax_command_invoke('html, body', 'animate', array(array('scrollTop' => 0), 750));
  }

  return $ajax;
}
