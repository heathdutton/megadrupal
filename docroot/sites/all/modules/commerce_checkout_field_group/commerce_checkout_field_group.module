<?php

/**
 * @file
 * Written by Henri MEDOT <henri.medot[AT]absyx[DOT]fr>
 * http://www.absyx.fr
 */

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_checkout_field_group_commerce_checkout_pane_info() {
  $checkout_panes = array();

  if ($groups = field_group_info_groups('commerce_order', 'commerce_order', 'form')) {
    foreach ($groups as $group) {
      if (empty($group->parent_name)) {
        $checkout_panes['commerce_checkout_field_group__' . $group->group_name] = array(
          'title' => $group->label,
          'name' => t('Field Group pane: !group_label', array('!group_label' => $group->label)),
          'enabled' => FALSE,
          'base' => 'commerce_checkout_field_group_pane',
        );
      }
    }
  }

  return $checkout_panes;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for commerce_checkout_form().
 *
 * @see commerce_checkout_form()
 */
function commerce_checkout_field_group_form_commerce_checkout_form_alter(&$form, &$form_state, $form_id) {
  $order = $form_state['order'];

  // Add the field related form elements.
  $form_state['commerce_order'] = $order;
  field_attach_form('commerce_order', $order, $form, $form_state);

  // Create a lookup array and remove unused fields.
  $form['#pane_children'] = array();
  $options = array(
    'default' => TRUE,
    'deleted' => FALSE,
    'language' => NULL,
  );
  $instances = _field_invoke_get_instances($form['#entity_type'], $form['#bundle'], $options);
  foreach ($instances as $instance) {
    $field = field_info_field_by_id($instance['field_id']);
    $field_name = $field['field_name'];

    $root_name = _commerce_checkout_field_group_find_root($form['#group_children'], $field_name);
    if ($root_name && isset($form['commerce_checkout_field_group__' . $root_name])) {
      $form['#pane_children'][$field_name] = 'commerce_checkout_field_group__' . $root_name;
    }
    else {
      unset($form[$field_name]);

      // Add support for the Field Readonly module.
      unset($form['_field_readonly__' . $field_name]);
    }
  }

  // Insert our form callbacks.
  $form['#pre_render'][] = 'commerce_checkout_field_group_commerce_checkout_form_pre_render';
  if (isset($form['buttons']['continue'])) {
    // Callbacks below need to run before commerce_checkout_form()'s ones.
    array_unshift($form['buttons']['continue']['#validate'], 'commerce_checkout_field_group_commerce_checkout_form_validate');
    array_unshift($form['buttons']['continue']['#submit'], 'commerce_checkout_field_group_commerce_checkout_form_submit');
  }
}

/**
 * Find the root group of a field.
 */
function _commerce_checkout_field_group_find_root($group_children, $field_name) {
  while (isset($group_children[$field_name])) {
    $field_name = $group_children[$field_name];
    $found = TRUE;
  }
  return isset($found) ? $field_name : NULL;
}

/**
 * Pane callback for type checkout_form.
 *
 * @see commerce_checkout_form()
 */
function commerce_checkout_field_group_pane_checkout_form($form, &$form_state, $checkout_pane, $order) {
  // #tree must not be set to TRUE by commerce_checkout_form().
  return array('#tree' => FALSE);
}

/**
 * #pre_render callback for commerce_checkout_form().
 */
function commerce_checkout_field_group_commerce_checkout_form_pre_render($form) {
  // Move the field group children to their panes then remove the field groups.
  foreach ($form['#fieldgroups'] as $group_name => $group) {
    $pane_id = 'commerce_checkout_field_group__' . $group_name;
    if (isset($form[$pane_id]) && isset($form[$group_name])) {
      foreach (element_children($form[$group_name], TRUE) as $key) {
        $form[$pane_id][$key] = $form[$group_name][$key];
      }
      if (isset($form[$group_name]['#access'])) {
        $form[$pane_id]['#access'] = $form[$group_name]['#access'];
      }
    }
    unset($form[$group_name]);
  }

  return $form;
}

/**
 * #validate callback for commerce_checkout_form().
 *
 * @see commerce_checkout_form_validate()
 */
function commerce_checkout_field_group_commerce_checkout_form_validate($form, &$form_state) {
  // We will perform the validation directly on the order stored in the form to
  // prevent commerce_checkout_form_validate() from attempting to save invalid
  // extracted values.
  $order = $form_state['commerce_order'];

  // Validate the field related form elements.
  field_attach_form_validate('commerce_order', $order, $form, $form_state);

  // Clear the messages.
  // @todo We should not clear all the messages but only those that concern our
  // panes.
  drupal_get_messages();
}

/**
 * Pane callback for type checkout_form_validate.
 */
function commerce_checkout_field_group_pane_checkout_form_validate($form, &$form_state, $checkout_pane, $order) {
  $pane_id = $checkout_pane['pane_id'];

  // Only handle validation if we actually have a pane form and errors.
  // Find the errors that belong to this pane and copy them.
  // Return FALSE if any error was found.
  if (!empty($form[$pane_id]) && ($errors = form_get_errors())) {
    foreach ($errors as $key => $error) {
      $parents = explode('][', $key);
      $field_name = reset($parents);
      if (isset($form['#pane_children'][$field_name]) && $form['#pane_children'][$field_name] == $pane_id) {
        form_set_error($pane_id . '][' . $key, $error);
        $found = TRUE;
      }
    }
  }

  return empty($found);
}

/**
 * #submit callback for commerce_checkout_form().
 *
 * @see commerce_checkout_form_submit()
 */
function commerce_checkout_field_group_commerce_checkout_form_submit($form, &$form_state) {
  // Load a fresh copy of the order stored in the form before
  // commerce_checkout_form_submit() does.
  $order = commerce_order_load($form_state['commerce_order']->order_id);

  // Submit the field related form elements.
  field_attach_submit('commerce_order', $order, $form, $form_state);

  // We don't need to save the order here as commerce_checkout_form_submit()
  // will do it for us.
}

/**
 * Pane callback for type review.
 */
function commerce_checkout_field_group_pane_review($form, $form_state, $checkout_pane, $order) {
  $pane_id = $checkout_pane['pane_id'];

  list(, $pane_group_name) = explode('__', $pane_id);
  $groups = field_group_info_groups('commerce_order', 'commerce_order', 'form');
  $pane_group = $groups[$pane_group_name];

  $build = _commerce_checkout_field_group_pane_review_build($pane_group, $groups, $order);

  return drupal_render($build);
}

/**
 * Build a group's content for the review pane.
 */
function _commerce_checkout_field_group_pane_review_build($group, $groups, $order) {
  $build = array();

  foreach ($group->children as $child_name) {
    if (isset($groups[$child_name])) {
      $build += _commerce_checkout_field_group_pane_review_build($groups[$child_name], $groups, $order);
    }
    elseif ($field_build = field_view_field('commerce_order', $order, $child_name, 'customer')) {
      $instance = field_info_instance('commerce_order', $child_name, 'commerce_order');
      $build[$child_name] = array(
        '#type' => 'item',
        '#title' => $field_build['#title'],
        '#weight' => $instance['widget']['weight'],
      );
      foreach (element_children($field_build) as $key) {
        $build[$child_name][$key] = $field_build[$key];
      }
    }
  }

  return $build;
}
