<?php
/**
 * @file
 * Install functions for the DBInfo module.
 *
 * Additionaly this file contains helper functions prefixed with '_' for
 * hook_requirements() during the runtime phase.
 */


/**
 * Implements hook_requirements().
 *
 *  Show database connection info within runtime status report.
 */
function dbinfo_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if ($phase == 'runtime') {
    $report = _dbinfo_databases_report();
    $requirements['database_configuration_report'] = array(
      'title' => $t('Database Configuration'),
      'value' => $report,
      'severity' => (_dbinfo_all_connections_status()) ? REQUIREMENT_OK : REQUIREMENT_ERROR,
    );
  }
  return $requirements;
}

/**
 * Implements hook_enable().
 *
 * Module overiddes ctools_collapsible() in theme registry so refresh the theme
 * function cache for the current theme.
 */
function dbinfo_enable() {
  global $theme_key;
  cache_clear_all("theme_registry:$theme_key", 'cache');
}

/**
 * Implements hook_disable().
 *
 * Module overiddes ctools_collapsible() in theme registry so refresh the theme
 * function cache for the current theme.
 */
function dbinfo_disable() {
  global $theme_key;
  cache_clear_all("theme_registry:$theme_key", 'cache');
}

/**
 * Implements hook_install().
 */
function dbinfo_install() {
  variable_set('dbinfo_db_test_connections', 1);
}

/**
 * Implements hook_uninstall().
 */
function dbinfo_uninstall() {
  variable_del('dbinfo_db_test_connections');
}


/**
 * Miscellaneous functions needed by requirements checks.
 */


/**
 * Are all the known db connections reachable.
 */
function _dbinfo_all_connections_status($a_conn_status = NULL) {
  static $dbinfo_aggregate_connections_status = TRUE;
  if (isset($a_conn_status) && $a_conn_status == FALSE) {
    $dbinfo_aggregate_connections_status = FALSE;
  }
  return $dbinfo_aggregate_connections_status;
}

/**
 * Build a single report for a DB key in settings.php as a collapsible table.
 *
 * A DB may have multiple targets defined, each target is listed. If configured,
 * each target is tested to be reachable.
 */
function _dbinfo_databases_report() {
  global $databases;
  $t = get_t();

  $report = '';
  foreach ($databases as $key => $config) {
    if ($key == 'default') {
      $dbkey = $t("@drupal (the Drupal database)", array('@drupal' => $key));
    }
    else {
      $dbkey = $key;
    }
    $destination[$key] = array(
      'handle' => $dbkey,
      'collapsed' => TRUE,
      'content' => _dbinfo_config_details($key, $config),
    );
    $report .= theme('ctools_collapsible', $destination[$key]);
  }
  return $report;
}

/**
 * This function returns a target database key configuration details.
 *
 * This is used as a table row in the administration status report.
 */
function _dbinfo_config_details($dbkey, &$config) {
  $t = get_t();
  foreach ($config as $target => $info) {
    $data[] = array($target, _dbinfo_output_target_details($info));

    if ($dbkey != 'default' &&
          variable_get('dbinfo_db_test_connections') == 1) {
      $status = _dbinfo_connection_test($dbkey, $target);
      // Accumulate the global connection status value across all DBs.
      _dbinfo_all_connections_status($status === TRUE);

      if ($status === TRUE) {
        $msg = t('Connection Successful');
      }
      else {
        $msg = $t('Error: @status', array('@status' => $status));
      }
      $status_class = ($status === TRUE) ? 'ok' : 'error';
      $data[] = array(
        array(
          'colspan' => 2,
          'data' => $msg,
          'class' => array('dbinfo-conn-test' . " $status_class"),
        ));
    }
  }
  $defaults = array(
    'attributes' => array('class' => array('dbinfo-table-width')),
    'caption' => '',
    'colgroups' => array(),
    'sticky' => FALSE,
    'empty' => '',
  );
  $settings = array(
    'header' => array($t('Targets'), $t('Configuration')),
    'rows' => $data,
  );
  return theme_table($defaults += $settings);
}

/**
 * This is a helper function to output a config key/value pair.
 *
 * This function does not mangle $settings data in any way -- with the exception
 * of redacting any password field.
 */
function _dbinfo_output_target_details($info) {
  ksort($info);
  foreach ($info as $k => $v) {
    if (strcasecmp('password', $k) == 0) {
      $v = "[omitted]";
    }
    // The values from settings.php are not translatable. They are string
    // literals used by PDO.
    $output[] = ($v !== '' && $k !== '') ? "$k: $v" : NULL;
  }
  return implode('<br/>', array_filter($output));
}

/**
 * Test a DB connection with connect and a trivial ANSI SQL query.
 */
function _dbinfo_connection_test($key, $target) {
  try {
    $conn = Database::getConnection($target, $key);
    $stmt = $conn->prepare("SELECT CURRENT_TIMESTAMP;");
    $stmt->setFetchMode(PDO::FETCH_COLUMN, 0);
    $stmt->execute();
    $ts = $stmt->fetchAll();
  }
  catch (PDOException $e) {
    return $e->getMessage();
  }
  return TRUE;
}
