<?php

/**
 * @file
 * An effect for image styles.
 *
 * Allows ImageMagick command line options to be entered directly
 *
 * @author adrian@perlucida.com
 */

/**
 * Implements hook_theme().
 */
function im_raw_theme() {
  return array(
    'im_raw_summary' => array(
      'variables' => array('data' => NULL),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function im_raw_permission() {
  return array(
    'enter imagemagick command line options' => array(
      'title' => t('Enter raw ImageMagick command line options to create image effects'),
      'description' => t('This permission has security and performance implications.'),
    ),
  );
}

/**
 * Implements hook_image_effect_info().
 */
function im_raw_image_effect_info() {
  $effects = array();

  $effects['im_raw'] = array(
    'label' => t('Raw ImageMagick options'),
    'help' => t('Enter raw imagemagick command line options.'),
    'effect callback' => 'im_raw_effect',
    'dimensions callback' => 'im_raw_transform_dimensions',
    'form callback' => 'im_raw_form',
    'summary theme' => 'im_raw_summary',
  );

  return $effects;
}

/**
 * Form to enter the command line options and deal with dimensions.
 */
function im_raw_form($data) {
  if (user_access('enter imagemagick command line options')) {
    $form['commandline'] = array(
      '#type' => 'textarea',
      '#title' => t('ImageMagick command line options'),
      '#default_value' => isset($data['commandline']) ? $data['commandline'] : '',
      '#description' => t('<ul><li><strong>Enter the command line <em>options</em> only.</strong></li><li>Remember to escape parenthesis (and remember escaping is platform specific, use \ on *nix and ^ on Windows).</li> <li>Do not add an input or output file. Drupal ImageAPI will add "convert" before and a "-quality" option after based on the configuration !settings_link</li><ul>', array('!settings_link' => l(t('settings'), 'admin/config/media/image-toolkit'))),
      '#rows' => '5',
      '#resizable' => 'TRUE',
      '#required' => 'TRUE',
    );
    $form['dimensions'] = array(
      '#type' => 'fieldset',
      '#title' => t('Dimensions'),
      '#description' => t("These dimensions are stored in the Drupal image object and used for output HTML image (img) element <em>width</em> and <em>height</em> attributes. <em>They have no effect on the real size of the image, but may affect the display.</em><br /> Currently it's not possible to detect the dimensions of the Imagemagick command's result image in the scope of this effect.<br />
        We have to decide what dimensions to pass to ImageAPI here."),
      '#collapsed' => FALSE,
      '#collapsible' => TRUE,
    );

    $form['dimensions']['method'] = array(
      '#type' => 'radios',
      '#title' => t('Method'),
      '#default_value' => isset($data['dimensions']['method']) ? $data['dimensions']['method'] : 'strip',
      '#options' => array(
        'strip' => t("<strong>Strip dimensions.</strong> This won't pass on any image dimensions (and thus images will have no HTML <em>width</em> and <em>height</em> attributes if this effect is the last in the image style). Use this if you have another dimension altering effect after this, or want Drupal to output images with no <em>width</em> and <em>height</em> attributes."),
        'keep' => t("<strong>Keep dimensions.</strong> Pass through the original image dimensions. (Use if your Imagemagick options don't change image size.)"),
        'value' => t('<strong>Manual input.</strong> If you know the exact size of image your Imagemagick options will produce, specify them here.'),
      ),
      '#required' => FALSE,
      '#size' => 10,
    );
    $form['dimensions']['width'] = array(
      '#type' => 'textfield',
      '#title' => t('Width'),
      '#default_value' => isset($data['dimensions']['width']) ? $data['dimensions']['width'] : '',
      '#field_suffix' => ' ' . t('pixels'),
      '#required' => FALSE,
      '#size' => 10,
      '#element_validate' => array('im_raw_dimensions_validate'),
      '#allow_negative' => FALSE,
      '#states' => array(
        'enabled' => array(':input[name="data[dimensions][method]"]' => array("value" => "value")),
        'required' => array(':input[name="data[dimensions][method]"]' => array("value" => "value")),
      ),
    );
    $form['dimensions']['height'] = array(
      '#type' => 'textfield',
      '#title' => t('Height'),
      '#default_value' => isset($data['dimensions']['height']) ? $data['dimensions']['height'] : '',
      '#field_suffix' => ' ' . t('pixels'),
      '#required' => FALSE,
      '#size' => 10,
      '#element_validate' => array('im_raw_dimensions_validate'),
      '#allow_negative' => FALSE,
      '#states' => array(
        'enabled' => array(':input[name="data[dimensions][method]"]' => array("value" => "value")),
        'required' => array(':input[name="data[dimensions][method]"]' => array("value" => "value")),
      ),
    );
  }
  else {
    $form['commandline'] = array(
      '#type' => 'item',
      '#title' => t('ImageMagick command line options'),
      '#description' => t('You do not have permission to add these options. Please contact your site Admin or check !permissions_link', array('!permissions_link' => l(t('permissions'), 'admin/people/permissions'))),
    );
  }
  return $form;
}

/**
 * Dimensions form validation function.
 */
function im_raw_dimensions_validate($element, &$form_state) {
  if ($form_state['values']['data']['dimensions']['method'] == 'value' && empty($element['#value'])) {
    if (isset($element['#title'])) {
      form_error($element, t('!name field is required.', array('!name' => $element['#title'])));
    }
    else {
      form_error($element);
    }
  }
  image_effect_integer_validate($element, $form_state);
}

/**
 * Implementation of theme_hook().
 */
function theme_im_raw_summary($variables) {
  $data = $variables['data'];
  return $data['commandline'];
}


/**
 * Function to call the action.
 */
function im_raw_effect(stdClass $image, $data) {
  $image->ops[] = $data['commandline'];
}

/**
 * Function to set the image object dimensions, dependent on form input.
 */
function im_raw_transform_dimensions(array &$dimensions, array $data) {
  switch ($data['dimensions']['method']) {
    case 'strip':
      // Strip dimensions of the result.
      $dimensions['width'] = $dimensions['height'] = NULL;
      break;

    case 'keep':
      // Keep original image dimensions.
      // Just do nothing and dimensions will be preserved.
      break;

    case 'value':
      // Manually specified dimensions.
      $dimensions['width'] = $data['dimensions']['width'];
      $dimensions['height'] = $data['dimensions']['height'];
      break;
  }
}
