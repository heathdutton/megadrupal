<?php

/**
 * Implements hook_menu().
 */
function registration_transitions_menu() {
  $items['admin/structure/registration/registration_transitions'] = array(
    'title' => 'Registration transitions',
    'description' => 'Manage Registration Transitions, to move between States.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_transitions_form'),
    'file' => 'registration_transitions.pages.inc',
  );

  $items['registration/%registration/transition/%registration_transition'] = array(
    'title' => 'Transition registration',
    'title callback' => 'registration_transitions_confirm_title',
    'title arguments' => array(3),
    'access callback' => 'registration_transitions_confirm_access',
    'access arguments' => array(1, 3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_transitions_confirm_form', 'page', 1, 3),
    'type' => MENU_CALLBACK,
    'file' => 'registration_transitions.pages.inc',
  );

  return $items;
}

/**
 * Access callback for registration/%registration/transition/%registration_transition and the inline transition button.
 */
function registration_transitions_confirm_access($registration, $meta) {
  global $user;
  $account = user_load($user->uid);

  if ($meta['from'] == $registration->state) {
    $permission = sprintf('transition %s registrations from %s to %s', $registration->type, $meta['from'], $meta['to']);
    $access = user_access($permission);
    $context = compact('registration', 'meta', 'account');
    drupal_alter('registration_transitions_access', $access, $context);
    if ($access === TRUE) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Title callback for registration/%registration/transition/%registration_transition.
 */
function registration_transitions_confirm_title($meta) {
  return t($meta['label']);
}

/**
 * Implements hook_action_info().
 */
function registration_transitions_action_info() {
  $states_options = registration_get_states_options();

  $actions = array();
  foreach (_registration_transitions() as $id => $meta) {
    if ($meta['vbo']) {
      $actions['registration_transitions_from_' . str_replace('__', '_to_', $id) . '_action'] = array(
        'type' => 'registration',
        'label' => t('%from to %to', array(
          '%from' => $states_options[ $meta['from'] ],
          '%to' => $states_options[ $meta['to'] ],
        )),
        'configurable' => FALSE,
        'behavior' => array('changes_property'),
        'triggers' => array('any'),
        'callback' => 'registration_transition_action_callback',
        'parameters' => array('transition' => $id),
      );
    }
  }

  return $actions;
}

/**
 * Generic action callback for all Registration Transitions actions.
 */
function registration_transition_action_callback($registration, $context) {
  $transitions = _registration_transitions();
  $meta = $transitions[ $context['transition'] ];
  if (registration_transitions_confirm_access($registration, $meta)) {
    $registration->state = $meta['to'];
    return TRUE;
  }
  // else {
  //   // I won't do this. A custom module can override the action callback, call this function and
  //   // check the return value to see if it worked, and then show this warning.
  //   drupal_set_message(t("I didn't %action, because access.", array(
  //     '%action' => $meta['label'],
  //   )), 'warning');
  // }

  // VBO will handle the save, because 'changes_property'.
}

/**
 * Implements hook_permission().
 */
function registration_transitions_permission() {
  $states_options = registration_get_states_options();

  $permissions = array();
  foreach (registration_get_types() as $type) {
    foreach (_registration_transitions() as $id => $meta) {
      list($from, $to) = explode('__', $id);

      if (isset($states_options[$from], $states_options[$to])) {
        $permission = sprintf('transition %s registrations from %s to %s', $type->name, $from, $to);
        $permissions[$permission] = array(
          'title' => t('Transition %type registrations from %from to %to', array(
            '%type' => $type->label,
            '%from' => $states_options[$from],
            '%to' => $states_options[$to],
          )),
        );
      }
    }
  }

  return $permissions;
}

/**
 * Implements hook_field_extra_fields().
 */
function registration_transitions_field_extra_fields() {
  $states_options = registration_get_states_options();

  $fields = array();
  foreach (registration_get_types() as $type) {
    foreach (_registration_transitions() as $id => $meta) {
      list($from, $to) = explode('__', $id);

      if (isset($states_options[$from], $states_options[$to])) {
        $label = t('!from to !to', array(
          '!from' => $states_options[$from],
          '!to' => $states_options[$to],
        ));
        $definition = array(
          'label' => $label,
          'description' => $label,
          'weight' => -1,
        );
        if ($meta['display']) {
          $fields['registration'][$type->name]['display']['transition__' . $id] = $definition;
        }
        if ($meta['form']) {
          $fields['registration'][$type->name]['form']['transition__' . $id] = $definition;
        }
      }
    }
  }

  return $fields;
}

/**
 * Collect and prepare all configured transitions.
 */
function _registration_transitions() {
  $transitions = array();
  foreach (variable_get('registration_transitions', array()) as $id => $meta) {
    list($from, $to) = explode('__', $id);
    $meta += compact('id', 'from', 'to');
    $meta['hash'] = sprintf('%u', crc32($id));
    $transitions[$id] = $meta;
  }
  return $transitions;
}

/**
 * Loader callback for %registration_transition.
 */
function registration_transition_load($hash) {
  $transitions = _registration_transitions();
  foreach ($transitions as $id => $meta) {
    if ($meta['hash'] === $hash) {
      return $meta;
    }
  }
  return FALSE;
}

/**
 * Implements hook_entity_view().
 */
function registration_transitions_entity_view($entity, $entity_type, $view_mode, $langcode) {
  if ($entity_type == 'registration') {
    list(, , $bundle) = entity_extract_ids($entity_type, $entity);

    _registration_transitions_from_registration($entity, 'display', function($meta) use ($entity) {
      // Link to confirmation page.
      if ($meta['confirm']) {
        $entity->content['transition__' . $meta['id']] = _registration_transitions_create_link($entity, $meta);
      }

      // Submit button with handler.
      else {
        module_load_include('inc', 'registration_transitions', 'registration_transitions.pages');
        $form = drupal_get_form('registration_transitions_confirm_form', 'inline', $entity, $meta);
        $entity->content['transition__' . $meta['id']] = $form;
      }
    });
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for registration_form().
 */
function registration_transitions_form_registration_form_alter(&$form, &$form_state) {
  $entity = $form_state['registration'];
  if (empty($entity->registration_id)) return;

  _registration_transitions_from_registration($entity, 'form', function($meta) use (&$form, $entity) {
    // Link to confirmation page.
    if ($meta['confirm']) {
      $form['transition__' . $meta['id']] = _registration_transitions_create_link($entity, $meta);
    }

    // Submit button with handler.
    else {
      // $form_state['registration_transitions'][ $meta['id'] ] = $meta;
      $form['transition__' . $meta['id']] = array(
        '#type' => 'submit',
        '#value' => t($meta['label']),
        '#submit' => array('registration_transitions_confirm_form_submit'),
        '#transition' => $meta['id'],
      );
    }
  });
}

/**
 * Submit handler for registration_form() and registration_transitions_confirm_form().
 */
function registration_transitions_confirm_form_submit($form, &$form_state) {
  $transitions = _registration_transitions();
  $meta = $transitions[ $form_state['triggering_element']['#transition'] ];

  $registration = $form_state['registration'];
  $registration->state = $meta['to'];
  $registration->save();

  if ($meta['message']) {
    $message = t($meta['message']);
    drupal_set_message($message);
  }
}

/**
 * Transition cycle helper, for only allowed transitions, inc access check.
 */
function _registration_transitions_from_registration($registration, $location, $callback) {
  foreach (_registration_transitions() as $id => $meta) {
    if (!empty($meta[$location])) {
      if (registration_transitions_confirm_access($registration, $meta)) {
        $callback($meta);
      }
    }
  }
}

/**
 * Create a renderable link element to the confirmation page.
 */
function _registration_transitions_create_link($registration, $meta) {
  return array(
    '#type' => 'link',
    '#title' => t($meta['label']),
    '#href' => 'registration/' . $registration->registration_id . '/transition/' . $meta['hash'],
    '#options' => array('query' => array('destination' => current_path())),
    '#attributes' => array('class' => array('button')),
  );
}
