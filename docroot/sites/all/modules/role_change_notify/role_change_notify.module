<?php

/**
 * @file
 * Send email or trigger actions when a new role is assigned.
 *
 */

define('RCN_SUBJECT_DEFAULT', t('Role [user:role-changed] added for [user:name] at [site:name]'));
define('RCN_BODY_DEFAULT', t("[user:name],\n\nThe role \"[user:role-changed]\" has been added to your account at  [site:name].\n\nYou may now use the associated privileges."));

/**
 * Implements hook_help().
 */
function role_change_notify_help($path, $arg) {
  $output = '';

  switch ($path) {
    case 'admin/help#role_change_notify':
      $output = '<p>' . t("Role Change Notify lets you configure email messages when roles are added, and provides a configurable trigger when roles are added or removed. It supports tokens provided by token module, and supports tokens from the user profile if profile module is enabled. Configure role change notifications at <a href='!admin_link'>the administrative configuration page</a> or on the <a href='!trigger_link'>User triggers page</a> (if the Trigger and Token Actions modules are enabled).", array('!admin_link' => url('admin/config/people/role_change_notify'), '!trigger_link' => url('admin/structure/trigger/user'))) . '</p>';
      break;
    case 'admin/config/people/role_change_notify':
      $from = variable_get('site_mail', ini_get('sendmail_from'));
      if (!valid_email_address($from)) {
        drupal_set_message(t('None of these notifications will be sent unless you specify a valid site !email_address on the !site_information settings page.', array('!email_address' => '<strong>' . t('E-mail address') . '</strong>', '!site_information' => l(t('Site information'), 'admin/config/system/site-information'))), 'error');
      }
      $output .= '<p>' . t('This page allows you to configure whether automatic emails should be set to users when a new role is assigned to them. You define if an email should be sent for each role type, and if so, you define what the subject and body of the resulting email will be.') . '</p>'
      . '<p>' . t('For any of the settings below, you can use placeholders which will be substituted with the current values for the user, role, and site.') . ' ';
      $output .= '</p>';
      $output .= "<p>" . t("If the Triggers module is enabled, this module also provides Role Change Notification triggers on the
        <a href='!link'>User Triggers Page</a> that can be fired when a role is added or removed.",
        array('!link' => url('admin/structure/trigger/user'))) . "</p>";
      break;
  }
  return $output;
}

/**
 * Implements hook_menu().
 */
function role_change_notify_menu() {
  $items = array();
  $items['admin/config/people/role_change_notify'] = array(
    'title' => 'Role Change Notifications',
    'description' => 'Configure email notifications or other actions when a role is added to or removed from a user account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('role_change_notify_settings_form'),
    'access arguments' => array('administer role change notification'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function role_change_notify_permission() {
  return array(
    'administer role change notification' =>  array(
      'title' => t('Administer role change notification'),
      'description' => t('Send emails when roles change, or take other actions using triggers.'),
    ),
  );
}

/**
 * Implements hook_trigger_info().
 */
function role_change_notify_trigger_info() {
  return array(
    'user' => array(
      'role_added' => array('label' => t('When a role is added to a user account')),
      'role_removed' => array('label' => t('When a role is removed from a user account')),
    ),
  );
}


/**
 * Form to modify default values for emails to users during account status modification.
 *
 * @return
 *   system_settings_form
 */
function role_change_notify_settings_form() {
  $roles = user_roles(TRUE);

  unset($roles[DRUPAL_AUTHENTICATED_RID]);
  if (sizeof($roles) == 0) {
    $form['noroles'] = array(
      '#markup' => '<p><em>' . t("No roles have been set up except Authenticated User. \nPlease set up additional roles if you want to use role notification.") . '</em></p>',
    );
    return $form;
  }
  $form['instructions'] = array(
    '#markup' => '<p><strong>' . t('Select roles for which notification should be sent:') . '</strong></p>',
  );
  foreach ($roles as $roleid => $rolename) {
    $form["role_change_notify_{$roleid}"] = array(
      '#type' => 'checkbox',
      '#title' => $rolename,
      '#default_value' => variable_get("role_change_notify_{$roleid}", FALSE),
    );
  }
  $form['settings_info'] = array(
    '#markup' => '<p>' . t('E-mail content (subject and body text) can be configured on the !account_settings_link page.', array('!account_settings_link' => l(t('Account settings'), 'admin/config/people/accounts', array('fragment' => 'edit-role-change-notify')))) . '</p>',
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function role_change_notify_form_user_admin_settings_alter(&$form, &$form_state, $form_id) {
  $email_token_help = t('Available variables are: [site:name], [site:url], [user:role-changed], [user:name], [user:mail], [site:login-url], [site:url-brief], [user:edit-url].');

  $form['role_change_notify'] = array(
    '#type' => 'fieldset',
    '#title' => t('Role change notifications'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Edit the e-mail message sent to users when a role has been added to their account.') . ' ' . $email_token_help,
    '#group' => 'email',
    '#weight' => 20,
  );
  $form['role_change_notify']['role_change_notify_role_added_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('role_change_notify_role_added_subject', RCN_SUBJECT_DEFAULT),
    '#size' => 72,
    '#maxlength' => 200,
    '#token_types' => array('user'),
  );
  $form['role_change_notify']['role_change_notify_role_added_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => variable_get('role_change_notify_role_added_body', RCN_BODY_DEFAULT),
    '#cols' => 72,
    '#rows' => 10,
    '#description' => '',
    '#token_types' => array('user'),
  );

  if (module_exists('token')) {
    $form['role_change_notify']['role_change_notify_role_added_subject']['#element_validate'] = array('token_element_validate');
    $form['role_change_notify']['role_change_notify_role_added_body']['#element_validate'] = array('token_element_validate');
  }
}

/**
 * Implements hook_user_presave().
 */
function role_change_notify_user_presave(&$edit, $account, $category) {
  // Only bother if an existing user and roles have changed in the update.
  if ($account->uid > 0 && array_key_exists('roles', $edit)) {
    _role_change_notify_update_user($edit, $account, $category);
  }
  return;
}

/**
 * Trigger actions if a role change has occurred.
 * @param $op
 *   'role_added' or 'role_removed'
 * @param $account
 *   the affected user account.
 */
function role_change_notify_trigger_actions($op, $account) {
  if (!module_exists('trigger')) {
    return;
  }
  // Find any the ids of any actions associated with this hook/operation pair.
  $aids = trigger_get_assigned_actions($op);
  $context = array(
    'hook' => 'user',
    'op' => $op,
    'user' => $account,
  );
  foreach ($aids as $aid => $info) {
    $type = $info['type'];
    actions_do($aid, $account, $context);
  }
}

/**
 * Helper function to handle hook_user_presave work.
 * @param $edit
 *   array of changed pieces of the account.
 * @param $account
 *   user account object.
 */
function _role_change_notify_update_user($edit, $account, $category) {
  $roles = user_roles(TRUE);
  $account = user_load($account->uid);
  $oldroles = array_keys($account->roles);
  $newroles = array_keys($edit['roles']);
  $rolesadded = array_diff($newroles, $oldroles);
  $roles_removed = array_diff($oldroles, $newroles);

  $from = variable_get('site_mail', ini_get('sendmail_from'));
  $headers = array();

  foreach ($rolesadded as $roleid) {
    $role = $roles[$roleid];
    $account->role_changed = $role;

    // Invoke actions for role addition.
    role_change_notify_trigger_actions('role_added', $account);

    if (variable_get("role_change_notify_{$roleid}", FALSE)) {
      if (valid_email_address($account->mail) && valid_email_address($from)) {
        if (module_exists('profile')) {
          // @todo: remove this, seems unused
          profile_load_profile($account);
        }
        // @todo: helper function.
        $subject = token_replace(variable_get('role_change_notify_role_added_subject', RCN_SUBJECT_DEFAULT), array('user' => $account));
        $body = token_replace(variable_get('role_change_notify_role_added_body', RCN_BODY_DEFAULT), array('user' => $account));
        $language = user_preferred_language($account);
        $context['from'] = $from;
        $context['subject'] = $subject;
        $context['body'] = $body;
        $context['headers'] = $headers;
        $params = array('context' => $context);
        drupal_mail('role_change_notify', 'role_added', $account->mail, $language, $params);
        drupal_set_message(t("User %user notified of added role %role", array('%user' => $account->name, '%role' => $role)));
      }
    }
  }

  // Invoke actions on role removal.
  foreach ($roles_removed as $roleid) {
    $role = $roles[$roleid];
    $account->role_changed = $role;
    role_change_notify_trigger_actions('role_removed', $account);
  }
}

/**
 * Implements hook_mail().
 */
function role_change_notify_mail($key, &$message, $params) {
  if ($key == 'role_added') {
    $message['subject'] = check_plain($params['context']['subject']);
    $message['body'][] = check_plain($params['context']['body']);
    $message['from'] = $params['context']['from'];
    $message['headers'] = array_merge($message['headers'], $params['context']['headers']);
  }
  // @todo: role removed, configurable
}