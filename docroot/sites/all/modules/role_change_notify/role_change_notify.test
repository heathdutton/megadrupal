<?php

/**
 * @file
 * Test the Role Change Notify module.
 *
 * This file contains the test cases to check if module is performing as
 * expected.
 *
 */
class RoleChangeNotifyTestCase extends TriggerWebTestCase {
  protected $web_user;
  protected $admin_user;

  public static function getInfo() {
    return array(
      'name' => t('Role Change Notify'),
      'description' => t('Test Role Change Notify module'),
      'group' => t('Role Change Notify'),
    );
  }

  /**
   * Enable modules and create user with specific permissions.
   */
  function setUp() {
    parent::setUp('role_change_notify', 'trigger');
    // Create user.
    $this->web_user = $this->drupalCreateUser();
    $this->admin_user = $this->drupalCreateUser(array('administer users', 'administer permissions', 'administer role change notification', 'administer actions'));
  }

  /**
   * Enable notification for a specific role.
   */
  function testBasicNotification() {
    // Login the admin user.
    $this->drupalLogin($this->admin_user);
    // Create a role that we'll use for testing.
    $newrole = $this->drupalCreateRole(array('access content'), 'testrole');

    // Configure notifications for the new role
    $edit = array("role_change_notify_$newrole" => TRUE);
    $this->drupalPost("admin/config/people/role_change_notify", $edit, t('Save configuration'));

    // Test the typical use from the role_change_notify form.
    $this->assignRole($this->web_user, $newrole);

    $this->assertText(t("User @user notified of added role @role", array('@user' => $this->web_user->name, '@role' => 'testrole')));
    $this->assertMail('to', $this->web_user->mail, t("Email is to the correct user"));

    $msg = t('The role "@role" has been added', array('@role' => 'testrole'));
    $this->assertMailPattern('body', $msg, t("Expected 'role has been added' text found in email body"), $msg);
    $this->verboseEmail();

    // Turn off standard non-trigger notifications.
    $edit = array("role_change_notify_$newrole" => FALSE);
    $this->drupalPost("admin/config/people/role_change_notify", $edit, t('Save configuration'));

    // Create an advanced system_message_action to issue a message.
    $message = "Message: Role added=[user:role-changed] User=[user:name]";
    $actions_edit = array(
      'actions_label' => 'RCN Add Role',
      'message' => $message,
    );
    $aid = $this->configureAdvancedAction('system_message_action', $actions_edit);
    $edit = array('aid' => drupal_hash_base64($aid));
    // And assign it to the role_added trigger.
    $this->drupalPost('admin/structure/trigger/user', $edit, t('Assign'), array(), array(), 'trigger-role-added-assign-form');


    // Verify that the action has been assigned to the correct hook.
    $actions = trigger_get_assigned_actions('role_added');
    $this->assertEqual(1, count($actions), t('One Action assigned to the hook'));
    $this->assertEqual($actions[$aid]['label'], $actions_edit['actions_label'], t('Correct action label found.'));

    // Now change the role and see if we get the system message.
    $this->assignRole($this->admin_user, $newrole);

    $this->assertText(t("Message: Role added=@role User=@user", array('@role' => 'testrole', '@user' => $this->admin_user->name)));


    // Create a system email message that will be sent when a role is removed.
    $message = "Message: Role removed=[user:role-changed] User=[user:name]";
    $actions_edit = array(
      'actions_label' => 'RCN Remove Role',
      'recipient' => 'nobody@example.com',
      'subject' => t('Role removal message'),
      'message' => $message,
    );
    $aid = $this->configureAdvancedAction('system_send_email_action', $actions_edit);
    $edit = array('aid' => drupal_hash_base64($aid));
    // And assign it to the role_removed trigger.
    $this->drupalPost('admin/structure/trigger/user', $edit, t('Assign'), array(), array(), 'trigger-role-removed-assign-form');


    // Verify that the action has been assigned to the correct hook.
    $actions = trigger_get_assigned_actions('role_removed');
    $this->assertEqual(1, count($actions), t('One Action assigned to the hook "role_removed"'));
    $this->assertEqual($actions[$aid]['label'], $actions_edit['actions_label'], t('Correct action label found.'));

    // Now change the role and see if we get the system message.
    $this->removeRole($this->admin_user, $newrole);

    $this->verboseEmail();
    $this->assertMailString('body', t("Message: Role removed=@role User=@user", array('@role' => 'testrole', '@user' => $this->admin_user->name)), 1);
    $this->assertMailString('to', $actions_edit['recipient'], 1);
  }

  /**
   * Output the most recent email sent.
   */
  protected function verboseEmail() {
    $mails = $this->drupalGetMails();
    $mail = end($mails);
    $this->verbose(t("Email  was:") . "<pre>" . print_r($mail, TRUE) . "</pre>");
  }

  /**
   * Assign a role to a user.
   *
   * @param $account
   *   The user object
   * @param $role
   *   The role to be assigned, as an integer.
   */
  protected function assignRole($account, $role) {
    $edit = array('operation' => "add_role-$role", "accounts[{$account->uid}]" => TRUE);
    $this->drupalPost("admin/people/people", $edit, t("Update"));
    $this->assertText(t("The update has been performed"));
  }

  /**
   * Remove a role from a user.
   *
   * @param $account
   *   The user object
   * @param $role
   *   The role to be removed, as an integer.
   */
  protected function removeRole($account, $role) {
    $edit = array('operation' => "remove_role-$role", "accounts[{$account->uid}]" => TRUE);
    $this->drupalPost("admin/people/people", $edit, t("Update"));
    $this->assertText(t("The update has been performed"));
  }
}
