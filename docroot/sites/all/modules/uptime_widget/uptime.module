<?php
/**
 * @file
 * UpTime Widget module.
 */

/**
 * Implements hook_help().
 */
function uptime_help($path, $arg) {
  switch ($path) {
    case 'admin/help#uptime':
      // Return a line-break version of the README.txt.
      return _filter_autop(file_get_contents(dirname(__FILE__) . '/README.txt'));
  }
}

/**
 * Implements hook_cron().
 *
 * Called every time the Drupal cron runs. Grabs the all-time uptime ratio from
 * UptimeRobot.com to store in the variable 'uptime_ratio' till next cron run.
 */
function uptime_cron() {
  // Default to an daily interval.
  $interval = variable_get('uptime_interval', 24 * 60 * 60);
  // We usually don't want to act every time cron runs (which could be every
  // minute) so keep a time for the next run in a variable.
  if (time() >= variable_get('uptime_next_execution', 0)) {
    $api_key = variable_get('uptime_api_key', '');
    $monitor_id  = variable_get('uptime_monitor_id', '');
    // Pause or activate update monitoring depending on the 'enabled' checkbox.
    $status = variable_get('uptime_enabled', 1);
    $url_status    = "http://api.uptimerobot.com/editMonitor?apiKey=" . $api_key . "&monitorID=" . $monitor_id . "&monitorStatus=" . $status . "&format=xml";
    // Create a new cURL resource.
    $ch = curl_init();
    // Set URL and other appropriate options.
    curl_setopt($ch, CURLOPT_URL, $url_status);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    // Grab URL and pass it to the browser.
    curl_exec($ch);
    // Close cURL resource, and free up system resources.
    curl_close($ch);

    // Refresh the uptime ratio.
    $api_key = variable_get('uptime_api_key', '');
    if (empty($api_key)) {
      variable_set('uptime_ratio', '[Missing API key] ');
    }
    else {
      $monitor_id  = variable_get('uptime_monitor_id', '');
      $url = "http://api.uptimerobot.com/getMonitors?apiKey=" . $api_key . "&monitors=" . $monitor_id . "&format=xml";
      // Curl request.
      $c = curl_init($url);
      curl_setopt($c, CURLOPT_RETURNTRANSFER, TRUE);
      $response_xml = curl_exec($c);
      curl_close($c);
      // XML parsing.
      $xml = simplexml_load_string($response_xml);
      foreach ($xml->monitor as $monitor) {
        variable_set('uptime_ratio', (string) $monitor['alltimeuptimeratio']);
      }
      // Leave a message in the log.
      watchdog('uptime', 'Uptime ratio updated successfully');
    }
    // Set the next time this hook_cron should be invoked.
    variable_set('uptime_next_execution', time() + $interval);
  }
}

/**
 * Implements hook_menu().
 */
function uptime_menu() {
  $items['admin/config/system/uptime'] = array(
    'title' => 'Uptime',
    'description' => 'UptimeRobot.com API key an monitor ID settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uptime_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'uptime.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_block_info().
 *
 * This hook declares the blocks that contains the uptime ratio.
 */
function uptime_block_info() {
  $blocks['uptime_widget'] = array(
    'info' => t('Uptime widget'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => 1,
    'region' => 'footer',
  );

  $blocks['uptime_text'] = array(
    'info' => t('Uptime text only'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => 0,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function uptime_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'uptime_widget':
      $block['subject'] = NULL;
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = uptime_contents($delta);
      break;

    case 'uptime_text':
      $block['subject'] = NULL;
      $block['content'] = uptime_contents($delta);
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function uptime_theme(&$existing, &$type, &$theme, &$path) {
  return array(
    'uptime' => array(
      'results' => array(),
      'template' => 'uptime',
    ),
  );
}

/**
 * A module-defined block content function.
 */
function uptime_contents($which_block) {
  // Current domain name without the leading protocol.
  $host = variable_get('uptime_url_name', parse_url($GLOBALS['base_url'], PHP_URL_HOST));
  $year = variable_get('uptime_year', '');
  // If the notice is enabled we want it..
  if (variable_get('uptime_notice_enabled', 0)) {
    $notice = ' ' . variable_get('uptime_prepend', 'All rights reserved') . ' Â© ' . (($year != date('Y') && !empty($year)) ? $year . '-' . date('Y') : date('Y'));
  }
  else {
    // ..and leave it empty if disabled.
    $notice = '';
    $host = '';
  }

  switch ($which_block) {
    case 'uptime_widget':
      // For the 'uptime widget' block we use uptime.tpl.php to make
      // it easier to override copying it to the theme's template folder.
      drupal_add_css(drupal_get_path('module', 'uptime') . '/uptime.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
      $results = array(
        'module_path' => drupal_get_path('module', 'uptime'),
      );
      return theme('uptime', array('results' => $results));

    case 'uptime_text':
      // The 'uptime text only' block can render directly instead
      // If uptime is enabled we want it..
      if (variable_get('uptime_enabled', 1)) {
        $uptime = l(t('UpTime') . ': ' . variable_get('uptime_ratio', t('[Get API key or run cron]') . ' ') . '%', 'http://www.uptimerobot.com/about.asp', array(
        'attributes' => array('title' => t('By UptimeRobot.com: Free Website Uptime Monitoring')),
        ));
      }
      else {
        // ..and leave it empty it's disabled.
        $uptime = '';
      }
      return array('#markup' => $uptime . $notice . ' ' . $host);
  }
}

