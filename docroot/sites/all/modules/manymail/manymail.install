<?php
/**
 * @file
 * Install, update, and uninstall functions for the ManyMail module.
 */

/**
 * Implements hook_requirements().
 *
 * Runs three tests and displays detailed information about the results:
 * - Is the library detected
 * - Is the version detected and supported
 * - Are all necessary files present
 *
 * The 'version supported' key is customly set in hook_libraries_info.
 *
 * @see manymail_libraries_info()
 * @see manymail_libraries_info_callback()
 */
function manymail_requirements($phase) {
  $requirements = array();
  $t = get_t();

  // Check PHPMailer presence.
  if ($phase == 'runtime') {
    $library = libraries_detect('phpmailer');
    $installed = ($library && !empty($library['installed']));

    if ($installed) {
      // Check PHPMailer version.
      if (!$library['version supported']) {
        $requirements['manymail_phpmailer'] = array(
          'title' => $t('ManyMail library support'),
          'value' => $t("PHPMailer library version '@version' not supported", array('@version' => $library['version'])),
          'severity' => REQUIREMENT_WARNING,
        );
      }

      // Check PHPMailer file integrity.
      $path = DRUPAL_ROOT . '/' . $library['library path'] . '/';

      $file_integrity = (file_exists($path . 'class.phpmailer.php') && file_exists($path . 'class.smtp.php') && file_exists($path . 'LICENSE') && file_exists($path . 'changelog.txt'));

      if (!$file_integrity) {
        $requirements['manymail_phpmailer_integrity'] = array(
          'title' => $t('ManyMail library file integrity'),
          'value' => $t('The PHPMailer file structure does not meet all requirements. Please refer to INSTALL.txt for more information.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }
    }
    else {
      if ($library['error'] == 'not found') {
        $requirements['manymail_phpmailer'] = array(
          'title' => $t('ManyMail library'),
          'value' => $t('PHPMailer library not found. Please read the INSTALL.txt on how to install it.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }
      elseif ($library['error'] == 'not detected') {
        $requirements['manymail_phpmailer'] = array(
          'title' => $t('ManyMail library version'),
          'value' => $t('PHPMailer library version could not be detected. Please make sure that the changelog.txt is present.'),
          'severity' => REQUIREMENT_WARNING,
        );
      }
      else {
        $requirements['manymail_phpmailer'] = array(
          'title' => $t('ManyMail library'),
          'value' => $t('An unknown error occurred while trying to detect your PHPMailer library.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }
    }
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function manymail_schema() {
  $schema['manymail_log'] = array(
    'description' => 'Stores all the ManyMail mailing metadata.',
    'fields' => array(
      'mlog' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: The manymail log ID of the mailing',
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Foreign Key: {users}.uid.',
      ),
      'send_state' => array(
        'type' => 'text',
        'size' => 'medium',
        'description' => 'Serialized $form_state that was used to send the mail.',
      ),
      'send_time' => array(
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
        'description' => 'When the mailing was started (timestamp).',
      ),
      'completed' => array(
        'type' => 'int',
        'size' => 'tiny',
        'length' => 1,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Whether the mailing was completed.',
      ),
      'last_activity' => array(
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
        'description' => 'When the mailing was last active (timestamp).',
        'initial' => 0,
      ),
    ),
    'foreign keys' => array(
      'uid' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'primary key' => array('mlog'),
  );

  $schema['manymail_log_recipients'] = array(
    'description' => 'Stores all the ManyMail mailing recipients.',
    'fields' => array(
      'mlog' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Foreign Key: {manymail_log}.mlog',
      ),
      'mail' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The e-mail address of the recipient.',
      ),
      'recipient' => array(
        'type' => 'text',
        'description' => 'The full serialized ManyMailRecipient object.',
      ),
      'status' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'When the mailing was last active (timestamp).',
        'initial' => 0,
      ),
    ),
    'foreign keys' => array(
      'mlog' => array(
        'table' => 'manymail_log',
        'columns' => array('mlog' => 'mlog'),
      ),
    ),
    'primary key' => array('mlog', 'mail'),
  );

  return $schema;
}

/**
 * Improve send performance and log mailings.
 */
function manymail_update_7100() {
  // Create table {manymail_log}.
  $schema = array(
    'description' => 'Stores all the ManyMail mailing metadata.',
    'fields' => array(
      'mlog' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: The manymail log ID of the mailing',
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Foreign Key: {users}.uid.',
      ),
      'send_state' => array(
        'type' => 'text',
        'description' => 'Serialized $form_state that was used to send the mail.',
      ),
      'send_time' => array(
        'type' => 'int',
        'size' => 'big',
        'not null' => TRUE,
        'description' => 'When the mailing was started (timestamp).',
      ),
      'completed' => array(
        'type' => 'int',
        'size' => 'tiny',
        'length' => 1,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Whether the mailing was completed.',
      ),
    ),
    'foreign keys' => array(
      'uid' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'primary key' => array('mlog'),
  );
  db_create_table('manymail_log', $schema);

  // Create table {manymail_log_recipients}.
  $schema = array(
    'description' => 'Stores all the ManyMail mailing recipients.',
    'fields' => array(
      'mlog' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Foreign Key: {manymail_log}.mlog',
      ),
      'mail' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The e-mail address of the recipient.',
      ),
      'recipient' => array(
        'type' => 'text',
        'description' => 'The full serialized ManyMailRecipient object.',
      ),
      'sent' => array(
        'type' => 'int',
        'size' => 'tiny',
        'length' => 1,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Whether the recipient was processed.',
      ),
      'bounced' => array(
        'type' => 'int',
        'size' => 'tiny',
        'length' => 1,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Whether the recipient address bounced.',
      ),
    ),
    'foreign keys' => array(
      'mlog' => array(
        'table' => 'manymail_log',
        'columns' => array('mlog' => 'mlog'),
      ),
    ),
    'primary key' => array('mlog', 'mail'),
  );
  db_create_table('manymail_log_recipients', $schema);
}

/**
 * Improve send tracking.
 */
function manymail_update_7101() {
  db_add_field('manymail_log', 'last_activity', array(
    'type' => 'int',
    'size' => 'big',
    'not null' => TRUE,
    'description' => 'When the mailing was last active (timestamp).',
    'initial' => 0,
  ));
}

/**
 * Change recipient tracking to use status constants.
 */
function manymail_update_7102() {
  db_add_field('manymail_log_recipients', 'status', array(
    'type' => 'int',
    'size' => 'tiny',
    'not null' => TRUE,
    'default' => 0,
    'description' => 'When the mailing was last active (timestamp).',
    'initial' => 0,
  ));

  db_update('manymail_log_recipients')
    ->expression('status', 'sent * :multiplier', array(':multiplier' => 3))
    ->execute();

  db_drop_field('manymail_log_recipients', 'bounced');
  db_drop_field('manymail_log_recipients', 'sent');
}

/**
 * Critical hotfix: rerun updates 7100, 7101 and 7102 if necessary.
 */
function manymail_update_7103() {
  if (!db_table_exists('manymail_log')) {
    manymail_update_7100();
    manymail_update_7101();
    manymail_update_7102();
    return;
  }

  if (!db_field_exists('manymail_log', 'last_activity')) {
    manymail_update_7101();
    manymail_update_7102();
    return;
  }

  if (!db_field_exists('manymail_log_recipients', 'status')) {
    manymail_update_7102();
    return;
  }
}

/**
 * Increase the storage limit for send states.
 */
function manymail_update_7104() {
  db_change_field('manymail_log', 'send_state', 'send_state', array(
    'type' => 'text',
    'size' => 'medium',
    'description' => 'Serialized $form_state that was used to send the mail.',
  ));
}

/**
 * Implements hook_uninstall().
 */
function manymail_uninstall() {
  variable_del('manymail_allowed_roles');
  variable_del('manymail_allowed_roles_override');
  variable_del('manymail_default_body');
  variable_del('manymail_default_from');
  variable_del('manymail_default_from_name');
  variable_del('manymail_default_reply_to');
  variable_del('manymail_default_reply_to_name');
  variable_del('manymail_default_signature');
  variable_del('manymail_default_subject');
  variable_del('manymail_options_log_per_mail');
  variable_del('manymail_options_charset');
  variable_del('manymail_options_return_path_address');
  variable_del('manymail_options_sender_address');
  variable_del('manymail_options_throttle_amount');
  variable_del('manymail_options_throttle_pause');
  variable_del('manymail_options_html_to_text');
  variable_del('manymail_smtp_auth');
  variable_del('manymail_smtp_host');
  variable_del('manymail_smtp_password');
  variable_del('manymail_smtp_port');
  variable_del('manymail_smtp_secure');
  variable_del('manymail_smtp_timeout');
  variable_del('manymail_smtp_username');
}
