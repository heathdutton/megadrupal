<?php
/**
 * @file
 * This submodule will allow you to create very customized recipient
 * lists that combine user roles with any amount of non-user recipients.
 *
 * @Todo: add hooks to List creation and recipient retrieval so other
 * submodules can expand custom lists with Views, groups, etc.
 */

/**
 * Implements hook_manymail_recipients().
 */
function manymail_lists_manymail_recipients() {
  $recipients['manymail_lists_send_list_form'] = array(
    'callback' => 'manymail_lists_get_list_addresses',
    'values' => array('lists'),
  );

  return $recipients;
}

/**
 * Implements hook_permission().
 */
function manymail_lists_permission() {
  $perm['manymail send lists'] = array(
    'title' => t('Send e-mail to custom lists'),
  );

  if (variable_get('manymail_lists_allowed_lists_override', 1)) {
    $perm['manymail override lists'] = array(
      'title' => t('Override preset recipient lists'),
    );
  }

  return $perm;
}

/**
 * Implements hook_forms().
 */
function manymail_lists_forms($form_id, $args) {
  $forms['manymail_lists_send_list_form']['callback'] = 'manymail_send_form';
  $forms['manymail_lists_create_form']['callback'] = 'manymail_lists_modify_form';
  $forms['manymail_lists_edit_form']['callback'] = 'manymail_lists_modify_form';

  return $forms;
}

/**
 * Implements hook_menu_alter().
 */
function manymail_lists_menu_alter(&$items) {
  $items['manymail']['access arguments'][0][] = 'manymail send lists';
}

/**
 * Implements hook_menu().
 */
function manymail_lists_menu() {
  $items = array();

  $items['manymail/list'] = array(
    'title' => 'Mail recipient lists',
    'description' => 'Send an e-mail to one or more recipient lists.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('manymail_lists_send_list_form'),
    'access arguments' => array('manymail send lists'),
    'file' => 'includes/manymail.forms.inc',
    'file path' => drupal_get_path('module', 'manymail'),
    'weight' => 4,
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/manymail/targets/lists'] = array(
    'title' => 'Recipient lists',
    'description' => 'Define recipients through a list.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('manymail_lists_targets_lists_form'),
    'access arguments' => array('manymail admin'),
    'file' => 'includes/manymail_lists.admin.inc',
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/manymail/targets/lists/create'] = array(
    'title' => 'Create list',
    'description' => 'Create a new recipient list.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('manymail_lists_create_form'),
    'access arguments' => array('manymail admin'),
    'file' => 'includes/manymail_lists.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/config/manymail/targets/lists/%/edit'] = array(
    'title' => 'Edit list',
    'description' => 'Edit an existing recipient list.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('manymail_lists_edit_form', 5),
    'access arguments' => array('manymail admin'),
    'file' => 'includes/manymail_lists.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/manymail/targets/lists/%/delete'] = array(
    'title' => 'Delete list',
    'description' => 'Delete a recipient list.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('manymail_lists_delete_form', 5),
    'access arguments' => array('manymail admin'),
    'file' => 'includes/manymail_lists.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * E-mail recipients retrieval function.
 *
 * Retrieves all e-mail recipients of (a) certain list(s).
 *
 * @param array|string $list
 *   A list name or array of list names.
 *
 * @return ManyMailRecipientList
 *   A list of all recipients for (a) certain list(s).
 *
 * @todo Finish this function
 */
function manymail_lists_get_list_addresses($list) {
  $mlist = new ManyMailRecipientList();

  if (!is_array($list)) {
    $list = array($list);
  }

  // Select all roles attached to the given lists.
  $query = db_select('manymail_lists_roles', 'r');
  $query->addField('r', 'rid');
  $query->condition('r.list', $list, 'IN');
  $query->distinct();
  $roles = $query->execute()->fetchAll();

  // Add the recipients in the selected roles.
  //
  // Use the shortcut query if "authenticated users" is set, otherwise
  // store the roles in $stored_roles and add them in one go after the loop.
  $stored_roles = array();
  foreach ($roles as $role) {
    if ($role->rid == DRUPAL_AUTHENTICATED_RID) {
      $mlist->addAll();

      // Unset the stored array, just in case the "authenticated users" rid
      // didn't come first in the loop and stored array therefore already
      // contains items.
      unset($stored_roles);
      break;
    }
    else {
      $stored_roles[] = $role->rid;
    }
  }

  if ($stored_roles) {
    $mlist->addRole($stored_roles);
  }

  // @todo: insert a hook here to add more people from the Users table.
  // Finally, select all custom recipients.
  $query = db_select('manymail_lists_mail', 'ma');
  $query->join('manymail_lists_mail_meta', 'mt', 'mt.mail=ma.mail');
  $query->addField('ma', 'mail');
  $query->addField('mt', 'name');
  $query->condition('ma.list', $list, 'IN');

  $mlist->addData($query->execute()->fetchAll(PDO::FETCH_ASSOC));

  return $mlist;
}

/**
 * Deletes recipients that are no longer used.
 */
function manymail_lists_garbage_collect_recipients() {
  $sub_select = db_select('manymail_lists_mail', 'm');
  $sub_select->addField('m', 'mail');
  $sub_select->distinct();

  db_delete('manymail_lists_mail_meta')
    ->condition('mail', $sub_select, 'NOT IN')
    ->execute();
}

/**
 * Detaches custom recipients from a list.
 *
 * If the recipients are in no other lists, they are deleted.
 * Otherwise, they are just decoupled from the given list.
 *
 * @param string $list
 *   The name of the list.
 * @param array $mail
 *   The e-mail addresses to decouple.
 */
function manymail_lists_detach_custom_recipients($list, $mail) {
  // Delete link between list and e-mail addresses.
  db_delete('manymail_lists_mail')
    ->condition('list', $list)
    ->condition('mail', $mail, 'IN')
    ->execute();

  manymail_lists_garbage_collect_recipients();
}

/**
 * Finds all lists that are considered valid.
 *
 * What exactly is considered a valid list is still something to
 * ponder about. For instance: one could add a check for valid views
 * that are part of a list.
 *
 * @return array
 *   Objects that represent a row in the manymail_lists table
 *   with extra dynamic fields:
 *   - amount: recipients in this list
 *
 * @see manymail_lists_schema()
 */
function _manymail_lists_valid_lists() {
  $lists = array();

  // Select all custom recipients, return the list name,
  // as well as the mail address because we need 2 fields
  // for a union in the next query.
  $q_custom = db_select('manymail_lists_mail', 'mm');
  $q_custom->addField('mm', 'list');
  $q_custom->addField('mm', 'mail');

  // Select all users in the roles attached to the lists,
  // return the list they're attached to as well as their e-mail.
  // If the RID matches "Authenticated user", select all users.
  //
  // Then join it with the previous query to get as many
  // occurences of a list name as there are members in that list.
  //
  // This query needs to be distinct because a user can have
  // multiple roles assigned to his account. This is achieved through
  // the use of a regular UNION instead of a UNION ALL.
  $q_roles = db_select('manymail_lists_roles', 'mr');
  $q_roles->join('users_roles', 'ur', 'ur.rid=mr.rid OR mr.rid=:auth_user', array(
    ':auth_user' => DRUPAL_AUTHENTICATED_RID)
  );
  $q_roles->join('users', 'u', 'u.status=1 AND (u.uid=ur.uid OR (mr.rid=:auth_user AND u.uid>0))', array(
    ':auth_user' => DRUPAL_AUTHENTICATED_RID)
  );
  $q_roles->addField('mr', 'list');
  $q_roles->addField('u', 'mail');
  $q_roles->union($q_custom);

  // We get all data for each list, including a count of
  // the occurences retrieved in the previous query.
  $q_lists = db_select('manymail_lists', 'm');
  $q_lists->join($q_roles, 'hits', 'hits.list=m.name');
  $q_lists->groupBy(
    $q_lists->addField('m', 'name')
  );
  $q_lists->addField('m', 'display_name');
  $q_lists->addField('m', 'description');
  $q_lists->addExpression('COUNT(m.name)', 'amount');

  foreach ($q_lists->execute() as $record) {
    $lists[$record->name] = $record;
  }

  return $lists;
}

/**
 * Finds all lists, whether valid or not.
 *
 * @return array
 *   Objects that represent a row in the manymail_lists table.
 *
 * @see manymail_lists_schema()
 */
function _manymail_lists_all_lists() {
  $lists = array();

  $query = db_select('manymail_lists', 'm');
  $query->fields('m');

  foreach ($query->execute() as $record) {
    $lists[$record->name] = $record;
  }

  return $lists;
}

/**
 * Checks if a list's machine_name already exists
 *
 * @param string $name
 *   The name to check for uniqueness.
 *
 * @return bool
 *   Whether or not the name already exists.
 */
function manymail_lists_list_exists($name) {
  return !!db_select('manymail_lists', 'm')
    ->fields('m')
    ->condition('m.name', $name)
    ->execute()
    ->rowCount();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function manymail_lists_form_manymail_lists_send_list_form_alter(&$form, &$form_state, $form_id) {
  $admin = user_access('manymail override lists');
  $all_lists = _manymail_lists_valid_lists();

  // Allow all lists if admins can override config page settings.
  // Otherwise retrieve allowed lists from the config page and intersect
  // with lists that are valid at the moment this function is called.
  $lists = (variable_get('manymail_lists_allowed_lists_override', 1) && $admin)
    ? $all_lists
    : array_intersect_key($all_lists, array_filter(variable_get('manymail_lists_allowed_lists', array())));

  if ($lists) {
    foreach ($lists as $name => $list) {
      $lists[$name] = check_plain($list->display_name);
    }

    $form['recipient'] = array(
      '#type' => 'fieldset',
      '#title' => t('Recipients'),
      '#weight' => 1,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    $form['recipient']['lists'] = array(
      '#type' => 'checkboxes',
      '#title' => 'Recipients',
      '#title_display' => 'invisible',
      '#options' => $lists,
      '#description' => t('The recipient lists to send this e-mail to.<br /><strong>Be careful what you select here: You may inadvertently e-mail a lot of people.</strong>'),
      '#required' => TRUE,
    );
  }
  else {
    $form = array(
      'error_no_views' => array(
        '#prefix' => '<p>',
        '#suffix' => '</p>',
        '#markup' => t('There seem to be no recipient lists configured for you to mail to.'),
      ),
    );
  }
}
