<?php

/**
 * @file
 * Install, update and uninstall functions for the course_credit module.
 *
 */

/**
 * Implements hook_schema().
 */
function course_credit_schema() {
  $schema = array();

  $schema['course_credit'] = array(
    'description' => 'Holds information about course credit.',
    'fields' => array(
      'ccid' => array(
        'type' => 'serial',
      ),
      'nid' => array(
        'type' => 'int',
        'description' => 'Course node ID.',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'Machine-readable type name used for views and tokens.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'increments' => array(
        'description' => 'Increment by which credit can be awarded.',
        'type' => 'numeric',
        'precision' => 6,
        'scale' => 2,
      ),
      'min' => array(
        'description' => 'Minimum credit.',
        'type' => 'numeric',
        'precision' => 6,
        'scale' => 2,
      ),
      'max' => array(
        'description' => 'Maximum credit.',
        'type' => 'numeric',
        'precision' => 6,
        'scale' => 2,
      ),
      'enable_variable_credit' => array(
        'description' => 'Variable credit.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'active' => array(
        'description' => 'Active.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'code' => array(
        'description' => 'Credit code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'expiration_type' => array(
        'description' => "example: 'date', 'credit_awarded', 'course_complete', or 'calendar_year'.",
        'type' => 'varchar',
        'length' => 255,
      ),
      'expiration_date' => array(
        'description' => "Absolute date (in seconds) for date expiration type.",
        'type' => 'int',
      ),
      'expiration_offset' => array(
        'description' => "Optional offset (in seconds) for relative expiration types.",
        'type' => 'int',
      ),
    ),
    'primary key' => array('ccid'),
    'unique keys' => array(
      'nid_type' => array('nid', 'type'),
    ),
  );

  $schema['course_credit_type'] = array(
    'description' => 'Holds information about course credit types.',
    'fields' => array(
      'type' => array(
        'description' => 'Machine-readable type name used for views and tokens.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'Credit type title.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'Credit type description.',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'increments' => array(
        'description' => 'Default increment by which credit can be awarded.',
        'type' => 'numeric',
        'precision' => 6,
        'scale' => 2,
      ),
      'min' => array(
        'description' => 'Default minimum credit.',
        'type' => 'numeric',
        'precision' => 6,
        'scale' => 2,
      ),
      'max' => array(
        'description' => 'Default maximum credit.',
        'type' => 'numeric',
        'precision' => 6,
        'scale' => 2,
      ),
      'enable_variable_credit' => array(
        'description' => 'Default variable credit switch.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'weight' => array(
        'description' => 'The weight of the credit type when being displayed in forms.',
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('type'),
  );

  $schema['course_credit_awarded'] = array(
    'description' => 'Holds information about course credit awarded.',
    'fields' => array(
      'ccaid' => array(
        'description' => 'Course credit awarded ID',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'Course credit awarded revision ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'description' => 'Course node ID.',
        'type' => 'int',
      ),
      'uid' => array(
        'description' => 'Course user ID.',
        'type' => 'int',
      ),
      'author_uid' => array(
        'description' => 'Course credit author user ID.',
        'type' => 'int',
      ),
      'type' => array(
        'description' => 'Machine-readable type name used for views and tokens.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'credits' => array(
        'description' => 'Credits awarded.',
        'type' => 'numeric',
        'precision' => 6,
        'scale' => 2,
      ),
      'date' => array(
        'description' => 'Date of award.',
        'type' => 'int',
      ),
      'expiration' => array(
        'description' => 'Expiration date.',
        'type' => 'int',
      ),
      'status' => array(
        'description' => 'Credit approved.',
        'type' => 'int',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the credit awarded was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the credit awarded was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('ccaid'),
    'unique keys' => array('triplet' => array('type', 'nid', 'uid')),
  );

  $schema['course_credit_awarded_revision'] = array(
    'description' => 'Holds information about course credit awarded.',
    'fields' => array(
      'ccaid' => array(
        'description' => 'Course credit awarded ID',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'Course credit awarded revision ID',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'Course node ID.',
        'type' => 'int',
      ),
      'uid' => array(
        'description' => 'Course user ID.',
        'type' => 'int',
      ),
      'author_uid' => array(
        'description' => 'Course credit author user ID.',
        'type' => 'int',
      ),
      'type' => array(
        'description' => 'Machine-readable type name used for views and tokens.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'credits' => array(
        'description' => 'Credits awarded.',
        'type' => 'numeric',
        'precision' => 6,
        'scale' => 2,
      ),
      'date' => array(
        'description' => 'Date of award.',
        'type' => 'int',
      ),
      'expiration' => array(
        'description' => 'Expiration date.',
        'type' => 'int',
      ),
      'status' => array(
        'description' => 'Credit approved.',
        'type' => 'int',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the credit awarded was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the credit awarded was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('vid'),
  );

  return $schema;
}

/**
 * Change ctid field to a varchar. Migrate type column to ctid.
 */
function course_credit_update_6008() {
  $ret = array();

  $schema = course_credit_schema();

  // Add new type column to tables.
  $tables = array('course_credit_awarded', 'course_credit');
  $field = 'type';

  foreach ($tables as $table) {
    db_add_field($table, $field, $schema[$table]['fields'][$field]);
  }

  // Update numeric credit type to alphanumeric.
  $sql = "select * from {course_credit_type}";
  $result = db_query($sql);
  while ($row = db_fetch_object($result)) {
    // TODO update_sql has been removed. Use the database API for any schema or data changes.
    $ret[] = array() /* update_sql("UPDATE {course_credit_awarded} set type = '$row->type' where ctid = $row->ctid") */;
    // TODO update_sql has been removed. Use the database API for any schema or data changes.
    $ret[] = array() /* update_sql("UPDATE {course_credit} set type = '$row->type' where ctid = $row->ctid") */;
    // TODO update_sql has been removed. Use the database API for any schema or data changes.
    $ret[] = array() /* update_sql("UPDATE {course_credit_type} set type = '$row->type' where ctid = $row->ctid") */;
  }

  // Drop primary keys.
  db_drop_primary_key('course_credit_awarded');
  db_drop_primary_key('course_credit');
  db_drop_unique_key('course_credit_type', 'type');
  // Drop auto increment, so we can drop the key.
  // TODO update_sql has been removed. Use the database API for any schema or data changes.
  $ret[] = array() /* update_sql("ALTER TABLE {course_credit_type} CHANGE ctid ctid int(11)") */;
  db_drop_primary_key('course_credit_type');

  // Drop old ctid columns.
  db_drop_field('course_credit_awarded', 'ctid');
  db_drop_field('course_credit', 'ctid');
  db_drop_field('course_credit_type', 'ctid');

  // Set new primary keys.
  db_add_primary_key('course_credit_awarded', array('type', 'nid', 'uid'));
  db_add_primary_key('course_credit', array('nid', 'type'));
  db_add_primary_key('course_credit_type', array('type'));

  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
  return t('TODO Add a descriptive string here to show in the UI.') /* $ret */;
}

/**
 * Add ccaid field, convert existing primary key to unique, add new primary key
 * (for views, services).
 */
function course_credit_update_6010() {
  $ret = array();

  db_drop_primary_key('course_credit_awarded');
  db_add_field('course_credit_awarded', 'ccaid', array('type' => 'serial'), array('primary key' => array('ccaid')));
  db_add_unique_key('course_credit_awarded', 'triplet', array('type', 'nid', 'uid'));

  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
  return t('TODO Add a descriptive string here to show in the UI.') /* $ret */;
}

/**
 * Add much needed indexes.
 */
function course_credit_update_6011() {
  $ret = array();

  db_add_index('course_credit_awarded', 'type', array('type'));
  db_add_index('course_credit_awarded', 'nid_uid', array('nid', 'uid'));

  db_add_index('course_credit', 'type', array('type'));

  db_add_index('course_credit_type', 'type', array('type'));

  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
  return t('TODO Add a descriptive string here to show in the UI.') /* $ret */;
}

/**
 * Add ccid field to course_credit.
 */
function course_credit_update_7000() {
  db_drop_primary_key('course_credit');
  db_add_field('course_credit', 'ccid', array('type' => 'serial'), array(
    'primary key' => array('ccid'),
    'unique keys' => array(
      'nid_type' => array('nid', 'type'),
    ),
  ));
}

/**
 * Add fields for exportable entities.
 */
function course_credit_update_7001() {
  $fields = array(
    'status' => array(
      'type' => 'int',
      'not null' => TRUE,
      // Set the default to ENTITY_CUSTOM without using the constant as it is
      // not safe to use it at this point.
      'default' => 0x01,
      'size' => 'tiny',
      'description' => 'The exportable status of the entity.',
    ),
    'module' => array(
      'description' => 'The name of the providing module if the entity has been defined in code.',
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
    ),
  );

  db_add_field('course_credit_type', 'status', $fields['status']);
  db_add_field('course_credit_type', 'module', $fields['module']);
  return t('Added fields for exportable course_credit_type entities.');
}

/**
 * Add weight field.
 */
function course_credit_update_7002() {
  db_add_field('course_credit_type', 'weight', array(
    'description' => 'The weight of the credit type when being displayed in forms.',
    'type' => 'int',
    'unsigned' => FALSE,
    'not null' => TRUE,
    'default' => 0,
  ));
  return t('Added weight column to course_credit_type.');
}

/**
 * Make awarded credit revisionable.
 */
function course_credit_update_7003() {
  // Create revision table.
  db_create_table('course_credit_awarded_revision', array(
    'description' => 'Holds information about course credit awarded.',
    'fields' => array(
      'ccaid' => array(
        'description' => 'Course credit awarded ID',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => 'Course credit awarded revision ID',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'Course node ID.',
        'type' => 'int',
      ),
      'uid' => array(
        'description' => 'Course user ID.',
        'type' => 'int',
      ),
      'author_uid' => array(
        'description' => 'Course credit author user ID.',
        'type' => 'int',
      ),
      'type' => array(
        'description' => 'Machine-readable type name used for views and tokens.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'credits' => array(
        'description' => 'Credits awarded.',
        'type' => 'numeric',
        'precision' => 6,
        'scale' => 2,
      ),
      'date' => array(
        'description' => 'Date of award.',
        'type' => 'int',
      ),
      'expiration' => array(
        'description' => 'Expiration date.',
        'type' => 'int',
      ),
      'status' => array(
        'description' => 'Credit approved.',
        'type' => 'int',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the credit awarded was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the credit awarded was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('vid'),
  ));
  drupal_get_schema(NULL, TRUE);

  // Add new fields.
  db_add_field('course_credit_awarded', 'author_uid', array(
    'description' => 'Course credit author user ID.',
    'type' => 'int',
  ));
  db_add_field('course_credit_awarded', 'vid', array(
    'description' => 'Course credit awarded revision ID',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));
  db_add_field('course_credit_awarded', 'created', array(
    'description' => 'The Unix timestamp when the credit awarded was created.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));
  db_add_field('course_credit_awarded', 'changed', array(
    'description' => 'The Unix timestamp when the credit awarded was most recently saved.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  ));
}

/**
 * Migrate revisions.
 */
function course_credit_update_7004() {
  $result = db_query("SELECT * FROM {course_credit_awarded}");
  while ($row = $result->fetch()) {
    drupal_write_record('course_credit_awarded_revision', $row);
    db_query("UPDATE {course_credit_awarded} SET vid = :vid WHERE ccaid = :ccaid", array(':vid' => $row->vid, ':ccaid' => $row->ccaid));
  }
}
