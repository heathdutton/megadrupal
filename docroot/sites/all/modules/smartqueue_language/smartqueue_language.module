<?php

/**
 * Implements hook_nodequeue_info().
 */
function smartqueue_language_nodequeue_info() {
  return array('smartqueue_language' => array(
    'title' => t('Language queue'),
    'description' => t('Each language gets it\'s own subqueue.'),
  ));
}

/**
 * Implements hook_nodequeue_form().
 */
function smartqueue_language_nodequeue_form($queue, &$form) {
  $form['i18n'] = array(
    '#type' => 'value',
    '#value' => 0,
  );

  $form['subqueue_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Subqueue title'),
    '#default_value' => $queue->subqueue_title,
    '#size' => 50,
    '#maxlength' => 64,
    '#description' => t('What to display for the subqueue title; use %subqueue to embed the actual subqueue title. This is used to distinguish multiple nodequeues with subqueues from each other, as internal subqueue title is filled automatically.'),
  );

  $settings = unserialize($queue->reference);
  $form['placeholder']['#tree'] = TRUE;
  $form['placeholder']['languages'] = array(
    '#type' => 'radios',
    '#title' => t('Languages'),
    '#description' => t('Which languages are allowed in the nodequeue'),
    '#options' => array(
      'all' => t('All defined languages'),
      'enabled' => t('Only enabled languages')
    ),
    '#default_value' => ($settings['languages']) ? $settings['languages'] : 'enabled',
  );

  $form['placeholder']['language_neutral'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow language neutral in the subqueue'),
    '#default_value' => ($settings['language_neutral']) ? $settings['language_neutral'] : 0,
  );
}

/**
 * Implements hook_nodequeue_form_validate().
 */
function smartqueue_language_nodequeue_form_validate($queue, &$form_state, &$form) {
  // Convert settings to our reference.
  form_set_value($form['reference'], serialize($form_state['values']['placeholder']), $form_state);
}


/**
 * Implements hook_nodequeue_subqueues().
 */
function smartqueue_language_nodequeue_subqueues(&$queue, $node) {
  $settings = unserialize($queue->reference);

  if ($settings['languages'] == 'all') {
    $languages = language_list();
  }
  elseif ($settings['languages'] == 'enabled') {
    $languages = language_list('enabled');
    $languages = $languages[1];
  }

  //unlikely, but hey
  if (empty($languages)) {
    return;
  }

  //build our references
  $references = array_keys($languages);

  // We're returning an array of references for efficiency, but we also have
  // to check to see if the references we've generated exist. If they don't,
  // we have to create them.
  $exists = array();
  $subqueues = nodequeue_load_subqueues_by_reference(array($queue->qid => $references));
  foreach ($subqueues as $subqueue) {
    $exists[$subqueue->reference] = TRUE;
  }

  foreach ($references as $reference) {
    if (empty($exists[$reference])) {
      nodequeue_add_subqueue($queue, $languages[$reference]->native, $reference);
      $exists[$reference] = TRUE;
    }
  }

  //return our references
  if ($settings['language_neutral'] && $node->language == '') {
    return $references;
  }

  if ($exists[$node->language]) {
    return array($node->language);
  }

  return array();
}

/**
 * Implements hook_nodequeue_autocomplete().
 */
function smartqueue_language_nodequeue_autocomplete($queue, $subqueue, $string, $where, $where_args) {
  $matches = array();
  $settings = unserialize($queue->reference);

  //filter for language
  if ($settings['language_neutral']) {
    $where .=  " (n.language = :language OR n.language = '')";
    $where_args[':language'] = $subqueue->reference;
  }
  else {
    $where .=  " n.language = :language";
    $where_args[':language'] = $subqueue->reference;
  }

  $result = db_query_range("SELECT n.nid, n.title FROM {node} n WHERE " . $where, 0, 10, $where_args);
  while ($node = $result->fetchObject()) {
    $matches[$node->nid] = check_plain($node->title) . " [nid: $node->nid]";
  }

  return $matches;
}

/**
 * Implements hook_form_alter().
 */
function smartqueue_language_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'locale_languages_edit_form') {
    $form['#submit'][] = 'smartqueue_language_language_edit';
  }
  if ($form_id == 'locale_languages_delete_form') {
    $form['#submit'][] = 'smartqueue_language_language_delete';
  }
}

/**
 * Update subqueue titles when language is removed
 */
function smartqueue_language_language_edit(&$form, &$form_state) {
  $result = db_query(
    "SELECT nq.reference AS reference, sq.reference AS sqref, sq.sqid
      FROM {nodequeue_queue} nq
      INNER JOIN {nodequeue_subqueue} sq ON nq.qid = sq.qid
      WHERE nq.owner = 'smartqueue_language'
      AND sq.reference = '%s'",
    $form_state['values']['langcode']
  );

  while ($row = $result->fetchObject()) {
    nodequeue_subqueue_update_title($row->sqid, $form_state['values']['native']);
  }
}

/**
 * Delete subqueues when language is removed
 */
function smartqueue_language_language_delete(&$form, &$form_state) {
  $result = db_query(
    "SELECT sq.sqid FROM {nodequeue_subqueue} sq
      INNER JOIN {nodequeue_queue} nq ON sq.qid = nq.qid
      WHERE nq.owner = 'smartqueue_language'
      AND sq.reference = '%s'",
    $form_state['values']['langcode']
  );

  while ($row = $result->fetchObject()) {
    nodequeue_remove_subqueue($row->sqid);
  }
}