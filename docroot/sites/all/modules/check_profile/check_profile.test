<?php

/**
 * @file
 * Test cases for the Check Profile-module.
 */

class CheckProfileTestCase extends DrupalWebTestCase {
  public function setUp() {
    parent::setUp('check_profile');
    module_load_include('module', 'check_profile');
  }

  public static function getInfo() {
    return array(
      'name' => 'Check Profile Web Tests',
      'description' => 'Verify Check Profile web results',
      'group' => 'Check Profile',
    );
  }

  public function testFunctionality() {
    // See if we can get a role ID for CHECK_PROFILE_NAME
    $this->checkProfileCheckProfileRole();

    // Load as if we are a user without this role
    $this->checkProfileUserNoCheckProfileRole();

    // Load as if we are a user with this role
    $this->checkProfileUserCheckProfileRole();
  }

  /**
   * Run the function used to retrieve/create the role
   *  - user_roles()[role_id] should equal CHECK_PROFILE_NAME)
   */
  private function checkProfileCheckProfileRole() {
    $result = check_profile_role_rid();
    $message = t('user_roles()[role_id] should equal ' . CHECK_PROFILE_NAME);
    $roles = user_roles();
    $this->assertTrue(($roles[$result] == CHECK_PROFILE_NAME), $message);
  }

  /*
   * Create a user without the CHECK_PROFILE_NAME role
   *  - Get the frontpage
   *  -- Should return status 200
   *  - Get a non-existing page (somePage)
   *  -- Should return status 404
   */
  private function checkProfileUserNoCheckProfileRole() {
    $user = $this->drupalCreateUser();
    $this->drupalLogin($user);

    // Get the frontpage
    $this->drupalGet('');
    $this->assertResponse(200);

    // Get a non-existing page (somePage)
    $this->drupalGet('somePage');
    $this->assertResponse(404);
  }

  /**
   * Create a user with the CHECK_PROFILE_NAME role
   *  - Get the frontpage
   *  -- Should return status 200
   *  - Get a non-existing page (somePage)
   *  -- The get should be changed to /user/uid/edit, verify by assertUrl
   */
  private function checkProfileUserCheckProfileRole() {
    $user = $this->drupalCreateUser();

    // Get role using function verified before and assign it to the new user
    $rid = check_profile_role_rid();
    $edit['roles'][$rid] = CHECK_PROFILE_NAME;
    $user = user_save($user, $edit);

    $this->drupalLogin($user);

    // Get the frontpage
    $this->drupalGet('');
    $this->assertResponse(200);

    // Get a non-existing page (somePage)
    $this->drupalGet('somePage');
    $this->assertUrl('user/' . $user->uid . '/edit', array(), t('GET "/somePage" should have changed to GET "/user/' . $user->uid . '/edit"'));
  }
}
