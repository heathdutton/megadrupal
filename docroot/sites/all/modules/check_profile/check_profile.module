<?php
/**
 * The name of the role and permission
 */
define('CHECK_PROFILE_NAME', 'check profile');

/**
 * Implements hook_menu().
 * @return array
 */
function check_profile_menu() {
  $menu_items['admin/config/people/check-profile'] = array(
    'title' => 'Check Profile',
    'description' => 'Configure Check Profile settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('check_profile_admin_settings_form'),
    'access arguments' => array('administer check profile'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'check_profile.admin.inc',
    'file path' => drupal_get_path('module', 'check_profile') . '/includes/',
  );
  return $menu_items;
}

/**
 * Implements hook_permission().
 * @return array
 */
function check_profile_permission() {
  return array(
    'administer check profile' => array(
      'title' => t('Administer Check Profile'),
      'description' => t('Perform maintenance tasks for Check Profile.'),
    ),
  );
}

/**
 * Implements hook_user_presave().
 *
 * When a user account is created assign the CHECK_PROFILE_NAME role.
 * When a user account is updated remove the CHECK_PROFILE_NAME role.
 *
 * @param $edit
 * @param $account
 * @param $category
 * @return void
 */
function check_profile_user_presave(&$edit, $account, $category) {
  global $user;

  // Make sure bypass role is always set
  if (!isset($account->bypass_role)) {
    $account->bypass_role = FALSE;
  }

  // If active user id doesn't match account user id it means a user with user
  // management permissions is editing the account. Abort checks.
  // If bypass_role is TRUE we've been explicitly told not to mess with the
  // CHECK_PROFILE_NAME role. Abort checks
  if ($user->uid != $account->uid || $account->bypass_role == TRUE) {
    return;
  }

  // Get role id for CHECK_PROFILE_NAME
  $rid = check_profile_role_rid();

  // Switch on bool
  switch (TRUE) {
    // Act on new account
    case $account->uid == 0:
      // Assign role to user
      $edit['roles'][$rid] = CHECK_PROFILE_NAME;
      break;

    // Act on existing accounts (profile save means profile got checked)
    case $account->uid > 0:
      // Remove role from user
      unset($edit['roles'][$rid]);
      break;
  }
}

/**
 * If required the role CHECK_PROFILE_NAME will be created and the permission
 *   CHECK_PROFILE_NAME will be assigned to the newly created role.
 *
 * @throws Exception If role could not be found or created
 * @return int
 */
function check_profile_role_rid() {
  // Create basic role info
  $role = new stdClass();
  $role->name = CHECK_PROFILE_NAME;

  // Get all current roles
  $roles = user_roles();

  // Get rid for CHECK_PROFILE_NAME
  $rid = array_search($role->name, $roles);

  // If we have no result attempt to create the role.
  // We can't lock a role so this has to be done here.
  if (!$rid) {
    user_role_save($role);

    // Repeat steps to find rid
    $roles = user_roles();
    $rid = array_search($role->name, $roles);

    // If we fail now we throw an error
    if (!$rid) {
      throw new Exception('Could not create role "' . $role->name . '"');
    }
  }

  return $rid;
}

/**
 * Implements hook_init().
 *
 * On any init of drupal check non-guest and non-admin accounts for the
 *   CHECK_PROFILE_NAME permission and redirect as needed.
 *
 * @return void
 */
function check_profile_init() {
  global $user;
  // Make sure UID 1 isn't locked out
  if ($user->uid == 1) {
    return;
  }

  // Check if user is member of CHECK_PROFILE_NAME role
  if (in_array(CHECK_PROFILE_NAME, $user->roles)) {
    // If visiting any page other than the frontpage or the edit profile page
    //   of the user.
    $is_user_edit_url = (arg(0) == 'user' && (arg(1) == $user->uid && arg(2) == 'edit') || (arg(1) == 'logout'));

    // If we need to check for AJAX
    $is_ajax_request = FALSE;
    if (variable_get('check_profile_ajax_calls_passthrough', FALSE)) {
      $is_ajax_request = (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && drupal_strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest');
    }

    // If is not ajax request and if not user edit page and if not front page
    if (!drupal_is_front_page() && !$is_user_edit_url && !$is_ajax_request) {
      drupal_set_message(t('Please verify and save your profile to continue.'), 'status');
      drupal_goto('user/' . $user->uid . '/edit');
    }
  }
}
