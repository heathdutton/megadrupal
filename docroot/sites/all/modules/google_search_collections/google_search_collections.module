<?php

/**
 * @file
 * Module hooks and functions for the Google Search Collections module.
 */


/**
 * Implements hook_permission().
 */
function google_search_collections_permission() {
  return array(
    'administer google search collections' => array(
      'title' => t('Administer google search collections'),
      'description' => t('Add, update, and export search collection configs.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function google_search_collections_menu() {
  $prefix = 'search';
  $items = array();

  // Global configurations.
  $items['admin/structure/google-search-collections/settings'] = array(
    'title' => 'Global settings',
    'description' => 'Configure global settings related to Google search collections.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('google_search_collections_settings'),
    'file' => 'google_search_collections.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer google search collections'),
  );

  // Adding menu items for defined collections.
  drupal_static_reset('search_get_info');
  $default_info = search_get_default_module_info();
  foreach (google_search_collections_get_definitions() as $path => $definition) {
    // Ignore disabled collections.
    if (isset($definition->disabled) && $definition->disabled) {
      continue;
    }

    // Ignore collections destined only for blocks.
    if (isset($definition->data['disable_page']) && $definition->data['disable_page']) {
      continue;
    }

    $items[$prefix . '/' . $path] = array(
      'title' => $definition->title,
      'title callback' => 'google_search_collections_translate',
      'title arguments' => array($path . ':title', $definition->title),
      'page callback' => 'google_search_collections_search',
      'page arguments' => array($path, ''),
      'type' => MENU_LOCAL_TASK,
      'weight' => isset($definition->data['weight']) ? $definition->data['weight'] : 0,
    );

    $items[$prefix . '/' . $path . '/%menu_tail'] = array(
      'title' => $definition->title,
      'title callback' => 'google_search_collections_translate',
      'title arguments' => array($path . ':title', $definition->title),
      'load arguments' => array('%map', '%index'),
      'page callback' => 'google_search_collections_search',
      'page arguments' => array($path, 2),
      'type' => MENU_LOCAL_TASK,
      'weight' => isset($definition->data['weight']) ? $definition->data['weight'] : 0,
      'tab_root' => $prefix . '/' . $default_info['path'] . '/%',
      'tab_parent' => $prefix . '/' . $default_info['path'],
    );

    // Apply appropriate access grants / arguments.
    if (isset($definition->data['module'])) {
      if ($definition->data['module'] === 'gss') {
        $items[$prefix . '/' . $path]['access callback'] = '_search_menu_access';
        $items[$prefix . '/' . $path]['access arguments'] = array('gss');
        $items[$prefix . '/' . $path . '/%menu_tail']['access callback'] = '_search_menu_access';
        $items[$prefix . '/' . $path . '/%menu_tail']['access arguments'] = array('gss');
      }
      elseif ($definition->data['module'] === 'google_appliance') {
        $items[$prefix . '/' . $path]['access arguments'] = array('access_google_appliance_content');
        $items[$prefix . '/' . $path . '/%menu_tail']['access arguments'] = array('access_google_appliance_content');

        // Google Appliance has a tertiary argument representing sort. It
        // represents a duplicate and should consequently be hidden.
        $items[$prefix . '/' . $path . '/%/%'] = $items[$prefix . '/' . $path . '/%menu_tail'];
        $items[$prefix . '/' . $path . '/%/%']['page arguments'][] = 3;
        $items[$prefix . '/' . $path . '/%/%']['type'] = MENU_NORMAL_ITEM;

        // Replace the %menu_tail menu item with just a single argument.
        $items[$prefix . '/' . $path . '/%'] = $items[$prefix . '/' . $path . '/%menu_tail'];
        unset($items[$prefix . '/' . $path . '/%menu_tail']);
      }
    }
  }

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function google_search_collections_menu_alter(&$menu) {
  // Remove the default GSS search local task in favor of our collections.
  if (variable_get('google_search_collections_unset_module_defaults', TRUE)) {
    unset($menu['search/gss'], $menu['search/gss/%menu_tail']);
    unset($menu[google_search_collections_get_gsa_path()]);
  }
}

/**
 * Implements hook_init().
 *
 * Prevents fatal PHP error when the core search form is submitted via AJAX in
 * an AJAX-enabled search collection block.
 *
 * @see google_search_collections_search_ajax
 */
function google_search_collections_init() {
  $isAjax = strpos(current_path(), 'system/ajax') !== FALSE;
  $isSearchForm = isset($_POST['form_id']) && $_POST['form_id'] === 'search_form';

  if ($isAjax && $isSearchForm) {
    require_once(DRUPAL_ROOT . '/modules/search/search.pages.inc');
  }
}

/**
 * Implements hook_block_info().
 */
function google_search_collections_block_info() {
  $blocks = array();

  foreach (google_search_collections_get_definitions() as $path => $definition) {
    // Ignore disabled collections.
    if (isset($definition->disabled) && $definition->disabled) {
      continue;
    }

    $context = $path . ':title';
    $title = $definition->title;
    $blocks[$path] = array(
      'info' => t('@collection search', array(
        '@collection' => google_search_collections_translate($context, $title),
      )),
      'cache' => DRUPAL_NO_CACHE,
    );
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function google_search_collections_block_view($delta = '') {
  // Return the appropriate search form / result set for this block.
  $definition = google_search_collections_get_definition($delta);
  $module = $definition->data['module'];
  $title = $definition->title;
  $context = $delta . ':title';
  $ajax_enabled = isset($definition->data['ajax_block']) && $definition->data['ajax_block'];

  // Access checks....
  if (!google_search_collections_user_can_search_via($module)) {
    return array();
  }

  // Prevent Google Appliance Suggestions AJAX conflicts.
  if ($ajax_enabled) {
    $noConflict = &drupal_static('_google_appliance_suggest_conflicts');
    $noConflict = TRUE;
  }

  return array(
    'subject' => google_search_collections_translate($context, $title),
    'content' => array(
      'gsc_container' => array(
        '#type' => 'container',
        '#attributes' => array(
          'id' => 'gsc-ajax-wrapper-' . $delta,
          'class' => array('gsc-ajax-wrapper'),
        ),
        'gsc_content' => google_search_collections_search($delta),
      ),
    ),
  );
}

/**
 * Page callback, wraps GSA or GSS search page views for maximum control.
 *
 * @param string $collection
 *   The Google Search collection for which the current search is taking place.
 *
 * @param string $keys
 *   The search query.
 *
 * @return
 *   Themed search results for the given collection and keys.
 */
function google_search_collections_search($collection, $keys = '') {
  $definition = google_search_collections_get_definition($collection);

  if ($definition->data['module'] === 'gss') {
    require_once(drupal_get_path('module', 'search') . '/search.pages.inc');
    $callback = 'search_view';
    $arguments = array('gss', $keys);
  }
  elseif ($definition->data['module'] === 'google_appliance') {
    $callback = 'google_appliance_search_view';
    $arguments = array($keys, func_num_args() > 2 ? func_get_arg(2) : NULL);
  }
  else {
    $callback = FALSE;
  }

  google_search_collections_active_collection($collection);
  $content = $callback ? call_user_func_array($callback, $arguments) : FALSE;
  google_search_collections_active_collection(FALSE);
  return $content;
}

/**
 * Implements hook_form_alter().
 */
function google_search_collections_form_alter(&$form, &$form_state, $form_id) {
  if (!$collection = google_search_collections_active_collection()) {
    if (isset($form_state['active_collection'])) {
      $collection = $form_state['active_collection'];
    }
    else {
      $collection = google_search_collections_get_default_collection();
    }
  }
  $definition = google_search_collections_get_definition($collection);

  $submit = NULL;
  $keys = NULL;
  switch ($form_id) {
    // Perform clean-up here.
    case 'google_appliance_search_form':
    case 'google_appliance_block_form':
      $keys = &$form['basic']['search_keys'];
      if (isset($keys['#default_value'])) {
        $queryterms = isset($definition->data['queryterms']) ? $definition->data['queryterms'] : '';
        $keys['#default_value'] = trim(str_replace($queryterms, '', $keys['#default_value']));
      }

    case 'search_form':
    case 'search_block_form':
    case 'search_theme_form':
      $form['#submit'][] = 'google_search_collections_search_submit';
      $form['#action'] = url('search/' . $collection);
      $form_state['active_collection'] = $collection;
      $ajax_enabled = isset($definition->data['ajax_block']) && $definition->data['ajax_block'];
      $in_block_view = arg(0) !== 'search';
      if ($keys === NULL && isset($form['basic']['keys'])) {
        $keys = &$form['basic']['keys'];
      }
      if ($submit === NULL && isset($form['basic']['submit'])) {
        $submit = &$form['basic']['submit'];
      }

      // Apply AJAX magic, if configured.
      if ($in_block_view && $ajax_enabled) {
        // Ensures AJAX results also do not conflict with suggestions.
        $noConflict = &drupal_static('_google_appliance_suggest_conflicts');
        $noConflict = TRUE;

        // AJAX-ify the submit button.
        $submit['#ajax'] = array(
          'callback' => 'google_search_collections_search_ajax',
          'wrapper' => 'gsc-ajax-wrapper-' . $collection,
          'keypress' => TRUE,
          'method' => 'replaceWith',
          'effect' => 'fade',
        );

        // This is the simplest way to get this to work repeatedly after AJAX...
        $keys['#attributes']['onkeypress'] = <<<JS
(function poorMansOnKeyPress(event, element) {
  var elem = jQuery(element);
  if (event.which === 13) {
    event.preventDefault();
    elem.closest('form').find('input[type="submit"]').trigger('mousedown');
    elem.attr('disabled', 'disabled');
  }
})(event, this)
JS;
      }
      break;
  }
}

/**
 * Callback for AJAX-enabled search collection blocks.
 *
 * @see google_search_collections_form_alter
 */
function google_search_collections_search_ajax($form, $form_state) {
  // Google Search Appliance will simply regurgitate the form unless we clear
  // this value. @see google_appliance_search_view
  unset($_POST['form_id']);

  // Pull the search form and results based on the AJAX form submitted values.
  $content = google_search_collections_search($form_state['active_collection'], $form_state['values']['search_keys']);

  // Account for different responses. GSA returns a string. GSS, a render array.
  if (is_string($content)) {
    $gsc_content = array(
      '#type' => 'markup',
      '#markup' => $content,
    );
  }
  else {
    $gsc_content = $content;
  }

  return array(
    'gsc_container' => array(
      '#type' => 'container',
      '#attributes' => array(
        'id' => 'gsc-ajax-wrapper-' . $form_state['active_collection'],
        'class' => array('gsc-ajax-wrapper'),
      ),
      'gsc_content' => $gsc_content,
    ),
  );
}

/**
 * Implements hook_gss_search_key_alter().
 */
function google_search_collections_gss_search_key_alter(&$key) {
  $collection = google_search_collections_active_collection();
  $definition = google_search_collections_get_definition($collection);

  // Apply query terms.
  if (isset($definition->data['queryterms']) && !empty($definition->data['queryterms'])) {
    $key .= ' ' . check_plain($definition->data['queryterms']);
  }
}

/**
 * Implements hook_google_appliance_query_alter().
 */
function google_search_collections_google_appliance_query_alter(&$query) {
  $collection = google_search_collections_active_collection();
  $definition = google_search_collections_get_definition($collection);

  // Apply query terms.
  if (isset($definition->data['queryterms']) && !empty($definition->data['queryterms'])) {
    $query['gsa_query_params']['q'] .= ' ' . check_plain($definition->data['queryterms']);
  }

  // Apply GSA collection.
  if (isset($definition->data['collection']) && !empty($definition->data['collection'])) {
    $query['gsa_query_params']['site'] = $definition->data['collection'];
  }

  // Apply GSA frontend.
  if (isset($definition->data['frontend']) && !empty($definition->data['frontend'])) {
    $query['gsa_query_params']['client'] = $definition->data['frontend'];
  }

  // Apply required fields.
  if (isset($definition->data['requiredfields']) && !empty($definition->data['requiredfields'])) {
    $query['gsa_query_params']['requiredfields'] = $definition->data['requiredfields'];
  }
}

/**
 * Implements hook_preprocess_google_appliance_sort_headers().
 *
 * This is used to rewrite the URL generated for date/relevance sorting to get
 * rid of query parameter re-writes.
 */
function google_search_collections_preprocess_google_appliance_sort_headers(&$vars) {
  google_search_collections_clean_path($vars['sorters'][0]['display']);
  google_search_collections_clean_path($vars['sorters'][1]['display']);
}

/**
 * Implements hook_preprocess_gss_result().
 *
 * Ensures that "inurl" and other pseudo parameters are not included in user-
 * facing search text.
 */
function google_search_collections_preprocess_gss_result(&$variables) {
  $result = $variables['result'];
  if (empty($result['link']) && empty($result['title'])) {
    $default_no_results = variable_get('gss_no_results', array(
      'value' => t('No results'),
      'format' => NULL,
    ));
    $empty_results = format_string($default_no_results['value'], array(
      '@query' => arg(2),
    ));
    $variables['snippet'] = check_markup($empty_results, $default_no_results['format']);
  }
}

/**
 * Implements hook_preprocess_gss_results().
 *
 * Ensures that AJAX-enabled search blocks are limited in scope and functional.
 */
function google_search_collections_preprocess_gss_results(&$vars) {
  $is_ajax = strpos(current_path(), 'system/ajax') !== FALSE;

  if ($is_ajax) {
    // An insane mechanism by which to determine the active collection in AJAX.
    if (!$collection = google_search_collections_active_collection()) {
      foreach ($_POST['ajax_html_ids'] as $id) {
        if (substr($id, 0, 17) === 'gsc-ajax-wrapper-') {
          $collection = substr($id, 17);
          break;
        }
      }
    }
    $definition = google_search_collections_get_definition($collection);
    $max_results = isset($definition->data['ajax_num_results']) ? $definition->data['ajax_num_results'] : 3;
    $key = $_POST['keys'];

    // Hide things that break in an AJAX context. Link back to the main results
    // page for more results.
    $vars['head'] = '';
    $vars['pager'] = '';

    // If we have results, slice it and re-render the results...
    unset($vars['results']['head'], $vars['results']['pager']);
    $has_no_results = count($vars['results']) === 1 && empty($vars['results'][0]['link']) && empty($vars['results'][0]['title']);
    if (isset($vars['results']) && $vars['results']) {
      $max_results = min($max_results, count($vars['results']));
      $vars['results'] = array_slice($vars['results'], 0, $max_results);
      $vars['search_results'] = '';
      foreach ($vars['results'] as $entry) {
        $vars['search_results'] .= theme('gss_result', array('result' => $entry));
      }

      if (!$has_no_results && (!isset($definition->data['disable_page']) || !$definition->data['disable_page'])) {
        $more_results = 'search/' . $collection . '/' . urlencode($key);
        $vars['pager'] = '<div class="more-results">' . l(t('More results for "@query"', array(
          '@query' => $key,
        )), $more_results) . '</div>';
      }
    }
  }
}

/**
 * Implements hook_preprocess_google_appliance_results().
 *
 * Ensures that AJAX-enabled search blocks are limited in scope and functional.
 */
function google_search_collections_preprocess_google_appliance_results(&$vars) {
  $is_ajax = strpos(current_path(), 'system/ajax') !== FALSE;

  // Clean up the spelling suggestions response.
  if (isset($vars['spelling_suggestion'])) {
    google_search_collections_clean_path($vars['spelling_suggestion']);
  }

  if ($is_ajax) {
    $collection = google_search_collections_active_collection();
    $definition = google_search_collections_get_definition($collection);
    $max_results = isset($definition->data['ajax_num_results']) ? $definition->data['ajax_num_results'] : 3;
    $key = $vars['search_form']['basic']['search_keys']['#default_value'];
    $more_results = 'search/' . $collection . '/' . urlencode($key);

    // If we have results, slice it and re-render the results...
    if (isset($vars['response_data']['entry'])) {
      $vars['response_data']['entry'] = array_slice($vars['response_data']['entry'], 0, $max_results);
      $vars['search_results'] = '';
      $count = 0;
      foreach ($vars['response_data']['entry'] as $result) {
        $result['result_idx'] = ++$count;
        $vars['search_results'] .= theme('google_appliance_result', $result);
      }
    }

    // Hide things that break in an AJAX context. Link back to the main results
    // page for more results.
    $vars['search_stats'] = '';
    $vars['sort_headers'] = '';
    $vars['spelling_suggestion'] = '';
    $vars['pager'] = '';
    if (!isset($definition->data['disable_page']) || !$definition->data['disable_page']) {
      $vars['pager'] = '<div class="more-results">' . l(t('About !num results for "@query"', array(
        '!num' => $vars['response_data']['total_results'],
        '@query' => $key,
      )), $more_results) . '</div>';
    }
  }
}

/**
 * Submit handler for the GSS search form.
 */
function google_search_collections_search_submit($form, &$form_state) {
  if (!$collection = google_search_collections_active_collection()) {
    $collection = google_search_collections_get_default_collection();
  }

  if (is_array($form_state['redirect'])) {
    $redirect_to = &$form_state['redirect'][0];
  }
  else {
    $redirect_to = &$form_state['redirect'];
  }

  $redirect_to = str_replace('/gss', '/' . $collection, $redirect_to);
  if ($gsaPath = google_search_collections_get_gsa_path()) {
    $redirect_to = str_replace('/' . $gsaPath, '/search/' . $collection, $redirect_to);
  }
}

/**
 * Returns the current, active Google Search collection.
 *
 * @param string $setActive
 *   (Optional). A value can be passed in to set the active search collection.
 *
 * @return string|bool
 *   The current active search collection, or false if no collection could be
 *   found.
 */
function google_search_collections_active_collection($setActive = NULL) {
  $active = &drupal_static(__FUNCTION__, FALSE);

  // If a value is passed to us, consider it the currently active collection.
  if ($setActive !== NULL) {
    $active = $setActive;
    return $active;
  }
  else {
    $args = arg();
    // If an active value is already set, then return it.
    if ($active) {
      return $active;
    }
    // Otherwise, attempt to pull the active collection from the URL.
    elseif ($args[0] === 'search' && count($args) >= 2) {
      $active = $args[1];
      return $active;
    }
    // If all else fails, return FALSE.
    else {
      return FALSE;
    }
  }
}

/**
 * Returns the default Google Search collection.
 */
function google_search_collections_get_default_collection() {
  // If none is provided, assume the first provided is the default.
  if (!$default = variable_get('google_search_collections_default_collection', FALSE)) {
    $default = key(google_search_collections_get_definitions());
  }

  return $default;
}

/**
 * Returns a single collection definition.
 *
 * @param string $collection
 *   The desired Google Search collection.
 *
 * @return object|bool
 *   Returns the collection definition if one is found, FALSE otherwise.
 */
function google_search_collections_get_definition($collection) {
  $definitions = google_search_collections_get_definitions();
  return isset($definitions[$collection]) ? $definitions[$collection] : FALSE;
}

/**
 * Helper function that returns all currently known search collection configs.
 *
 * @param bool $reset
 *   (Optional) Whether or not the search collection definitions should be
 *   re-calculated. Defaults to FALSE.
 */
function google_search_collections_get_definitions($reset = FALSE) {
  $definitions = drupal_static(__FUNCTION__, array());

  if ($definitions === array() || $reset) {
    ctools_include('export');
    ctools_export_load_object_reset('google_search_collections');
    $definitions = ctools_export_load_object('google_search_collections', 'all');
  }

  // Sort definitions by defined weight.
  uasort($definitions, 'google_search_collections_sort_definitions');

  return $definitions;
}

/**
 * Passes the given path through a series of filters to ensure links pointing
 * back at the search results page point to the right page with the expected
 * search query.
 *
 * @param string $path
 *   A reference to a string representing a link to a search result page.
 */
function google_search_collections_clean_path(&$path) {
  $activeCollection = google_search_collections_active_collection();
  $conf = google_search_collections_get_definition($activeCollection);
  $hasQueryTerms = isset($conf->data['queryterms']) && !empty($conf->data['queryterms']);
  $expectedPathPart = 'search/' . $conf->path . '/';

  if ($hasQueryTerms) {
    $term = ' ' . $conf->data['queryterms'];
    $path = str_replace($term, '', $path);
    $path = str_replace(trim($term), '', $path);
    $path = str_replace(drupal_encode_path($term), '', $path);
    $path = str_replace(drupal_encode_path(trim($term)), '', $path);
  }

  // Account for Google Appliance search path.
  if ($gsaPath = google_search_collections_get_gsa_path()) {
    $path = str_replace($gsaPath . '/', $expectedPathPart, $path);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function google_search_collections_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type === 'export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Export callback for Google search collection exportables.
 */
function google_search_collections_export($context, $indent = '') {
  $output = ctools_export_object('google_search_collections', $context, $indent);
  $translatables = array();
  foreach (array('title') as $key) {
    if (!empty($context->{$key})) {
      $translatables[] = $context->{$key};
    }
  }
  $translatables = array_filter(array_unique($translatables));
  if (!empty($translatables)) {
    $output .= "\n";
    $output .= "{$indent}// Translatables included for use with string extractors like potx.\n";
    sort($translatables);
    foreach ($translatables as $string) {
      $output .= "{$indent}t(" . ctools_var_export($string) . ");\n";
    }
  }
  return $output;
}

/**
 * Save callback for Google search collection exportables.
 */
function google_search_collections_save($object) {
  if ($object->export_type & EXPORT_IN_DATABASE) {
    // Existing record.
    $update = array('pid');
  }
  else {
    // New record.
    $update = array();
    $object->export_type = EXPORT_IN_DATABASE;
  }
  $return = drupal_write_record('google_search_collections', $object, $update);

  // Always rebuild the menu when saving a search collection.
  variable_set('menu_rebuild_needed', TRUE);

  return $return;
}

/**
 * Status set callback for Google search collection exportables.
 */
function google_search_collections_set_status($object, $status) {
  ctools_export_set_object_status($object, $status);

  // Always rebuild the menu when updating the status of a search collection.
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * Delete callback for Google search collection exportables.
 */
function google_search_collections_delete($object) {
  // If we were sent an object, get the export key from it. Otherwise
  // assume we were sent the export key.
  $value = is_object($object) ? $object->pid : $object;
  db_delete('google_search_collections')
    ->condition('pid', $value)
    ->execute();

  // Always rebuild the menu when deleting a search collection.
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * Returns the base path at which Google Appliance serves search results by
 * default (e.g. gsearch).
 *
 * @return string
 *   The base path at which Google Appliance searches are served by default or
 *   an empty string on error.
 */
function google_search_collections_get_gsa_path() {
  if (!function_exists('_google_appliance_get_settings')) {
    return '';
  }

  $settings = _google_appliance_get_settings();
  return isset($settings['drupal_path']) ? $settings['drupal_path'] : 'gsearch';
}

/**
 * A PHP user-defined sorting function for purposes of sorting Google Search
 * Collections.
 *
 * @param stdClass $a
 * @param stdClass $b
 * @return int
 * @see google_search_collections_get_definitions
 * @see uasort
 */
function google_search_collections_sort_definitions($gsc_a, $gsc_b) {
  $weight1 = isset($gsc_a->data['weight']) ? $gsc_a->data['weight'] : 0;
  $weight2 = isset($gsc_b->data['weight']) ? $gsc_b->data['weight'] : 0;

  // If the weights are equivalent, return 0.
  if ($weight1 === $weight2) {
    return 0;
  }
  // Otherwise, compare.
  else {
    return $weight1 < $weight2 ? -1 : 1;
  }
}

/**
 * Performs access checks necessary to determine whether or not the current user
 * is allowed to perform searches using the given module.
 *
 * @param string $module
 *   The name of the module the user is attempting to search with (one of: gss
 *   or google_appliance.
 *
 * @return bool
 *   TRUE if the user has access. Otherwise FALSE.
 */
function google_search_collections_user_can_search_via($module) {
  if ($module === 'gss') {
     return _search_menu_access('gss');
  }
  elseif ($module === 'google_appliance') {
    return user_access('access_google_appliance_content');
  }
  else {
    return FALSE;
  }
}


/**
 * i18n helper function. Returns a string passed through i18n_string() or just a
 * regular string if string translation is not available.
 *
 * @return string
 *   A translated string through i18n_string or a regular string.
 */
function google_search_collections_translate($name, $string, $langcode = NULL, $textgroup = 'google_search_collections') {
  return function_exists('i18n_string') ? i18n_string($textgroup . ':' . $name, $string, array('langcode' => $langcode)) : $string;
}

/**
 * i18n helper function. Refreshes strings from defined search collections
 * when a refresh is triggered through admin/config/regional/translate/i18n_string.
 *
 * @see google_search_collections_i18n_string_refresh
 */
function google_search_collections_i18n_update_strings() {
  if (!function_exists('i18n_string_update')) {
    return;
  }

  $collections = google_search_collections_get_definitions(TRUE);
  foreach ($collections as $id => $definition) {
    $title = $definition->title;
    i18n_string_update("google_search_collections:$id:title", $title);
  }
}
