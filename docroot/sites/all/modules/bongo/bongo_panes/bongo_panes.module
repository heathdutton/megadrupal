<?php
/**
 * @file
 * Module file for bongo panes module.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function bongo_panes_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_menu().
 */
function bongo_panes_menu() {
  $items = array();
  // A menu callback is required when using ajax outside of the Form API.
  $items['bongo_panes_ajax_link_callback'] = array(
    'page callback' => 'bongo_panes_ajax_link_response',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Callback for "Refresh predictions" ajax link.
 *
 * Takes different logic paths based on whether Javascript was enabled.
 * If $type == 'ajax', it tells this function that ajax.js has rewritten
 * the URL and thus we are doing an AJAX and can return an array of commands.
 *
 * @param int $stopid
 *   The Bongo stopid.
 *
 * @param int $predictions_to_show
 *   The number of predictions to show.
 *
 * @param bool $show_agency
 *   Show the agency or not.
 *
 * @param string $prediction_labels
 *   The type of labels for the prediction times.
 *
 * @return array
 *   If $type == 'ajax', returns an array of AJAX Commands.
 *   Otherwise, just returns the content, which will end up being a page.
 */
function bongo_panes_ajax_link_response($type = 'ajax', $stopid, $predictions_to_show, $show_agency, $prediction_labels, $show_direction) {
  if ($type == 'ajax') {
    $output = bongo_build_predictions_table($stopid, $predictions_to_show, $show_agency, $prediction_labels, $show_direction);
    // Stripping all new lines from rendered and themed content so we don't have
    // an empty nested div appear after each ajax load.
    // See https://api.drupal.org/comment/50318#comment-50318
    $rendered = str_replace(array("\r", "\n"), '', render($output));
    $commands = array();
    $commands[] = ajax_command_replace('#bongo-stopid-' . $stopid, $rendered);
    $page = array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($page);
  }
  else {
    $output = bongo_build_predictions_table($stopid, $predictions_to_show, $show_agency, $prediction_labels, $show_direction);
    return $output;
  }
}

/**
 * Build the ajax-ified link.
 *
 * @param int $stopid
 *   The Bongo stopid.
 *
 * @param int $predictions_to_show
 *   The number of predictions to show.
 *
 * @param int $show_agency
 *   Show the agency or not.
 *
 * @param int $show_refresh
 *   Show the refresh predictions link or hide it.
 *
 * @return array
 *   Render array of the ajax link.
 */
function bongo_panes_ajax_render($stopid,
  $predictions_to_show, $show_agency, $show_refresh, $prediction_labels, $show_direction) {
  $href = 'bongo_panes_ajax_link_callback/nojs/';
  $href .= $stopid . '/';
  $href .= $predictions_to_show . '/';
  $href .= $show_agency . '/';
  $href .= $prediction_labels .'/';
  $href .= $show_direction .'/';
  $build['ajax_link'] = array(
    '#type' => 'link',
    '#title' => t('Refresh predictions'),
    // Note the /nojs portion of the href - if javascript is enabled,
    // this part will be stripped from the path before it is called.
    '#href' => $href,
    '#id' => 'ajax_link_bongo-stopid-' . $stopid,
    '#ajax' => array(
      'method' => 'html',
    ),
  );
  if ($show_refresh == 0) {
    $build['ajax_link']['#attributes'] = array('class' => array('element-invisible', 'element-focusable'));
  }
  return $build;
}
