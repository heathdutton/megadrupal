<?php
/**
 * @file
 * Module file for the Bongo module.
 *
 * This module is a utility module to interact with the Bongo API at
 * http://api.ebongo.org. It does not do anything on it's own, but provides
 * helpful functions other modules can use.
 *
 * The Bongo API can be retrieved in a number of different formats. These are
 * XML, JSON and JSONP. However, at this time, this module retrieves data only
 * in the JSON format.
 */

/*
 * Define constants.
 */
define('BONGO_API_LOCATION', 'http://api.ebongo.org/');

define('BONGO_API_KEY_REQUEST', 'http://lb.cm/mNo');

/**
 * Implements hook_menu().
 */
function bongo_menu() {
  $items['admin/config/services/bongo'] = array(
    'access arguments' => array('administer bongo'),
    'description' => 'Configure Bongo Settings.',
    'file' => 'bongo.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bongo_settings_form'),
    'title' => 'Bongo - Bus on the Go',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function bongo_permission() {
  return array(
    'administer bongo' => array(
      'title' => t('Administer Bongo'),
      'description' => t('Configure global Bongo settings, including API key'),
    ),
  );
}

/**
 * Retrieves an API query from Bongo.
 *
 * It's recommended that you use the API-specific functions below instead of
 * calling this function directly, due to better error handling on a per API
 * basis.
 *
 * @param string $api
 *   The specific api, either 'routelist', 'route', 'stoplist', 'stop', or
 *   'predictions' as specified at http://api.ebongo.org/.
 *
 * @param array $query
 *   The api query, if applicable.
 *
 * @return array
 *   An array from your query.
 */
function _bongo_api_call($api, $query = NULL, $format = 'json') {
  // Grab the API Key.
  $api_key = variable_get('bongo_api_key');

  if ($api_key) {

    // Create query data array.
    $query_data = array();

    // Add API key to query array.
    $query_data['api_key'] = $api_key;

    // Determine format. For now, only json.
    $query_data['format'] = $format;

    // If there's a query array, merge it into the other array.
    if (is_array($query)) {
      $query_data = array_merge($query, $query_data);
    }

    // Build the query.
    $url_query = http_build_query($query_data);

    // Build uri.
    $uri = BONGO_API_LOCATION . $api . '?' . $url_query;
    $data = _bongo_decode($uri);

    return $data;

  }
  else {
    drupal_set_message(t('A Bongo API key is required to use the Bongo Developer API.'), 'error', FALSE);
    return array();
  }

}

/**
 * Retrieves a list of all routes in the Bongo system.
 *
 * @return array
 *   An array of routes.
 */
function bongo_get_route_list() {
  $routelist = _bongo_api_call('routelist');
  return $routelist;
}

/**
 * Retrieves information for a specific route.
 *
 * @param string $agency
 *   The agency, either 'coralville', 'iowa-city', or 'uiowa'.
 *
 * @param string $route
 *   The route name. use bongo_get_route_list() to find proper value.
 *
 * @return array
 *   An array of route information.
 */
function bongo_get_route_information($agency, $route) {
  $query = array('agency' => $agency, 'route' => $route);
  $route_information = _bongo_api_call('route', $query);
  return $route_information;
}

/**
 * Retrieves information for a specific stop.
 *
 * @param int $stopid
 *   The stopid for the stop.
 *
 * @return array
 *   An array of stop information.
 */
function bongo_get_stop_information($stopid) {
  $query = array('stopid' => $stopid);
  $stop_information = _bongo_api_call('stop', $query);
  return $stop_information;
}

/**
 * Retrieves arrival predictions for a specific stop.
 *
 * @param int $stopid
 *   The stopid for the stop.
 *
 * @return array
 *   An array of prediction information for the specified stop.
 */
function bongo_get_predictions($stopid) {
  $query = array('stopid' => $stopid);
  $predictions = _bongo_api_call('prediction', $query);
  return $predictions;
}

/**
 * EXPERIMENTAL - Retrieves all stops in Bongo.
 *
 * Note, this may take some time to load due to the amount of information
 * retrieved.
 *
 * @return array
 *   An array of prediction information for the specified stop.
 */
function bongo_get_stop_list() {
  $stoplist = _bongo_api_call('stoplist');
  return $stoplist;
}

/**
 * Builds a predictions table.
 *
 * @param int $stopid
 *   The Bongo stop id.
 *
 * @param int $rows
 *   The number of rows to display in the table.
 *
 * @param bool $agency
 *   Determines if the agency column is displayed. Defaults to 1 (true).
 *
 * @param string $labels
 *    The type of labels for the prediction times. Defaults to 'long'.
 *
 * @return array
 *   A renderable array of prediction data.
 */
function bongo_build_predictions_table($stopid, $rows, $agency, $labels, $show_direction) {
  $query = array('stopid' => $stopid);
  $predictions_array = _bongo_api_call('prediction', $query);
  $predictions_table = array(
    '#theme' => 'table',
    '#sticky' => FALSE,
    '#rows' => array(),
    '#attributes' => array(
      'class' => array(
        'bongo-predictions',
        'bongo-stopid-' . $stopid,
      ),
      'id' => array(
        'bongo-stopid-' . $stopid,
      ),
    ),
  );
  if ($predictions_array) {
    // Determine if the agency column is needed.
    if ($agency == 0) {
      $predictions_table['#header'] = array(t('Time'), t('Route'));
    }
    else {
      $predictions_table['#header'] = array(t('Time'), t('Route'), t('Agency'));
    }

    // Build the rows in the table.
    foreach ($predictions_array['predictions'] as $prediction) {
      $title = check_plain($prediction['title']);
      if ($show_direction == 1) {
        $direction = check_plain($prediction['direction']);
        $title .= '<span class="direction">' . $direction . '</span>';
      }
      $minutes = intval(check_plain($prediction['minutes']));
      if ($minutes <= 2) {
        if ($labels == 'short') {
          $minutes_formatted = t('Arriving');
        }
        else {
          $minutes_formatted = t('Now Arriving');
        }
      }
      else {
        if ($labels == 'short') {
          $minutes_formatted = t('@number min', array('@number' => $minutes));
        }
        else {
          $minutes_formatted = t('@number minutes', array('@number' => $minutes));
        }
      }
      $agency_id = check_plain($prediction['agency']);
      $agency_name = check_plain($prediction['agencyName']);
      // Determine if the agency column is needed.
      if ($agency == 0) {
        $predictions_table['#rows'][] = array(
          'data' => array($minutes_formatted, $title),
          'class' => array($agency_id),
        );
      }
      else {
        $predictions_table['#rows'][] = array(
          'data' => array($minutes_formatted, $title, $agency_name),
          'class' => array($agency_id),
        );
      }
    }

    // Determine how many predictions are available.
    $count = count($predictions_array['predictions']);
    // If the number of predictions available is less than the maximum rows to
    // show, show only what is available.
    if ($count < $rows) {
      $rows = $count;
    }
    // Slice the array to limit how many rows are shown.
    $predictions_table['#rows'] = array_slice($predictions_table['#rows'], 0, $rows);
    return $predictions_table;
  }
  else {
    $predictions_table['#rows'][] = array(
      'data' => array(t("Predictions could not be determined.")),
      'class' => array('error'),
    );
    return $predictions_table;
  }
}

/**
 * Helper function for decoding JSON.
 *
 * @param string $uri
 *   The JSON feed.
 *
 * @return array
 *   The retrieved data.
 */
function _bongo_decode($uri) {
  $decode_content = drupal_http_request($uri);
  $decode_array = drupal_json_decode($decode_content->data);
  return $decode_array;
}
