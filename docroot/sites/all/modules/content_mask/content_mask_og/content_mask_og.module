<?php
/**
 * @file
 * Extends the content_mask module with organic group support.
 */

/**
 * Implements hook_content_mask_access().
 */
function content_mask_og_content_mask_access($account, array $attributes) {
  // Check if the user can bypass the content mask.
  if (user_access('bypass content_mask access', $account)) {
    // User doesn't need any further access checking.
    return CONTENT_MASK_ACCESS_ALLOW;
  }

  // The og_type and og_group are required.
  if (empty($attributes['og_type']) && empty($attributes['og_group'])) {
    return CONTENT_MASK_ACCESS_ALLOW;
  }

  var_dump($attributes);

  // Only one og_type and og_group are allowed.
  if (count($attributes['og_type']) > 1 || count($attributes['og_group']) > 1) {
    return CONTENT_MASK_ACCESS_DENY;
  }

  $og_type = reset($attributes['og_type']);
  $og_group = reset($attributes['og_group']);

  // Check for the group in the attributes array if the user belongs to it.
  if (!og_is_member($og_type, $og_group, 'user', $account)) {
    return CONTENT_MASK_ACCESS_DENY;
  }

  if (!empty($attributes['og_role'])) {
    $roles = og_get_user_roles($og_type, $og_group, $account->uid);
    $roles_diff = array_diff($attributes['og_role'], $roles);

    // If all the roles in the attribute are missing in the diff, deny access.
    if (count($roles_diff) === count($attributes['og_role'])) {
      return CONTENT_MASK_ACCESS_DENY;
    }
  }

  return CONTENT_MASK_ACCESS_ALLOW;
}

/**
 * Implements hook_content_mask_shortcode_attributes_alter().
 */
function content_mask_og_content_mask_shortcode_attributes_alter(array &$attributes) {
  // Fill the attributes array with default OG values.
  $attributes = drupal_array_merge_deep(array(
    'og_type' => array(),
    'og_group' => array(),
    'og_role' => array(),
  ), $attributes);
}
