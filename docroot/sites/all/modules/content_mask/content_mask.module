<?php
/**
 * @file
 * Contains the core content_mask functionality.
 */

/**
 * Modules should return this value from hook_content_mask_access()
 * to allow access to masked content.
 */
define('CONTENT_MASK_ACCESS_ALLOW', 'allow');

/**
 * Modules should return this value from hook_content_mask_access()
 * to deny access to masked content.
 */
define('CONTENT_MASK_ACCESS_DENY', 'deny');

/**
 * Implements hook_content_mask_access().
 */
function content_mask_content_mask_access($account, array $attributes) {
  // Check if the user can bypass the content mask.
  if (user_access('bypass content_mask access', $account)) {
    // User doesn't need any further access checking.
    return CONTENT_MASK_ACCESS_ALLOW;
  }

  // The role and uid are required.
  if (empty($attributes['role']) && empty($attributes['uid'])) {
    return CONTENT_MASK_ACCESS_ALLOW;
  }

  // Check if the user's roles matches with the roles in the attributes if set.
  if (!empty($attributes['role'])) {
    $role_matches = array_intersect($attributes['role'], $account->roles);

    if (!empty($role_matches)) {
      return CONTENT_MASK_ACCESS_ALLOW;
    }
  }

  // Check if the user's uid matches with the uids in the attributes if set.
  if (!empty($attributes['uid']) && in_array($account->uid, $attributes['uid'])) {
    return CONTENT_MASK_ACCESS_ALLOW;
  }

  return CONTENT_MASK_ACCESS_DENY;
}

/**
 * Implements hook_filter_info().
 */
function content_mask_filter_info() {
  $filters['content_mask'] = array(
    'title' => t('Content Mask'),
    'description' => t('Allows you to use content mask shortcodes to mask parts of your content for certain users.'),
    'process callback' => 'content_mask_filter_content_mask_process',
    'tips callback' => 'content_mask_filter_tips',
    // @todo Check if we can use caching to increase performance.
    'cache' => FALSE,
  );

  return $filters;
}

/**
 * Implements hook_filter_FILTER_process().
 *
 * @see content_mask_filter_info()
 */
function content_mask_filter_content_mask_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  // Only operate on valid UTF-8 strings. This is necessary to prevent cross
  // site scripting issues on Internet Explorer 6.
  if (!drupal_validate_utf8($text)) {
    return $text;
  }

  $pattern = _content_mask_get_shortcode_regex();
  $text = preg_replace_callback("/$pattern/s", '_content_mask_do_shortcode_tag', $text);

  // Reset the static cache.
  drupal_static_reset('_content_mask_do_shortcode_tag');

  // Return the parsed text.
  return $text;
}

/**
 * Tips callback for the content mask shortcodes.
 *
 * @see content_mask_filter_info()
 *
 * @param object $format
 *   An object representing the text format the filter is contained in.
 * @param boolean $long
 *   Whether this callback should return a short tip to display in a form
 *   (FALSE), or whether a more elaborate filter tips should be returned for
 *   theme_filter_tips() (TRUE).
 *
 * @return string
 *   Translated text to display as a tip.
 */
function content_mask_filter_tips($format, $long) {
  $output = '<p><strong>[content_mask (<em>uid=1|2</em>) (<em>role="authenticated user|administrator"</em>)] text [/content_mask]</strong></p>';
  $output .= '<p>' . t('Mask parts of your content for certain users based on their role or UID.') . '</p>';

  return $output;
}

/**
 * Implements hook_permission().
 */
function content_mask_permission() {
  $permission['bypass content_mask access'] = array(
    'title' => t('Bypass content_mask access control'),
    'description' => t('View all masked content regardless of permission restrictions.'),
    'restrict access' => TRUE,
  );

  return $permission;
}

/**
 * Callback for the shortcode regex.
 *
 * @param array $match
 *   Regular expression match array
 *
 * @return string|boolean
 *   The masked string or FALSE if the user doens't have access.
 */
function _content_mask_do_shortcode_tag($match) {
  // Allow [[foo]] syntax for escaping a tag.
  if ($match[1] == '[' && $match[6] == ']') {
    return substr($match[0], 1, -1);
  }

  // Parse the attributes string to an usable array.
  $attributes = _content_mask_shortcode_parse_attributes($match[3]);

  // Get the currently logged in user.
  global $user;

  $access = module_invoke_all('content_mask_access', $user, $attributes);
  if (in_array(CONTENT_MASK_ACCESS_DENY, $access, TRUE)) {
    return FALSE;
  }

  return $match[1] . $match[5] . $match[6];
}

/**
 * Combine user attributes with known attributes and fill in defaults.
 *
 * @param array $defaults
 *   A key-value bases array with all defaults.
 * @param array $attributes
 *   An array with all parsed attributes from the shortcode.
 *
 * @return array
 *   An array with the merged attributes and defaults.
 */
function _content_mask_get_attributes_defaults(array $defaults, array $attributes) {
  $out = drupal_array_merge_deep($defaults, $attributes);
  foreach ($out as $index => $value) {
    if (is_string($value)) {
      $out[$index] = explode('|', $value);
      // Trim all whitespace.
      array_walk($out[$index], 'trim');
    }
  }

  return $out;
}

/**
 * Get the regular expression for parsing the the attributes.
 *
 * @return string
 *   The regular expression.
 */
function _content_mask_get_attributes_regex() {
  return '/(\w+)\s*=\s*"([^"]*)"(?:\s|$)|(\w+)\s*=\s*\'([^\']*)\'(?:\s|$)|(\w+)\s*=\s*([^\s\'"]+)(?:\s|$)|"([^"]*)"(?:\s|$)|(\S+)(?:\s|$)/';
}

/**
 * Get the regular expression for parsing our [content_mask] shortcode.
 *
 * @return string
 *   The regular expression.
 */
function _content_mask_get_shortcode_regex() {
  return '\\[(\\[?)(content_mask)\\b([^\\]\\/]*(?:\\/(?!\\])[^\\]\\/]*)*?)(?:(\\/)\\]|\\](?:([^\\[]*+(?:\\[(?!\\/\\2\\])[^\\[]*+)*+)\\[\\/\\2\\])?)(\\]?)';
}

/**
 * Converts the attributes string to an usable array for our module.
 *
 * @param string $text
 *   The a string containing the attributes.
 *
 * @return array
 *   An array with the parsed attributes.
 */
function _content_mask_shortcode_parse_attributes($text) {
  $attributes = array();
  $pattern = _content_mask_get_attributes_regex();
  $text = preg_replace("/[\x{00a0}\x{200b}]+/u", " ", $text);

  if (preg_match_all($pattern, $text, $match, PREG_SET_ORDER)) {
    foreach ($match as $m) {
      if (!empty($m[1])) {
        $attributes[strtolower($m[1])] = stripcslashes($m[2]);
      }
      elseif (!empty($m[3])) {
        $attributes[strtolower($m[3])] = stripcslashes($m[4]);
      }
      elseif (!empty($m[5])) {
        $attributes[strtolower($m[5])] = stripcslashes($m[6]);
      }
      elseif (isset($m[7]) && strlen($m[7])) {
        $attributes[] = stripcslashes($m[7]);
      }
      elseif (isset($m[8])) {
        $attributes[] = stripcslashes($m[8]);
      }
    }
  }
  else {
    $attributes = ltrim($text);
  }

  if (is_string($attributes)) {
    return array();
  }

  // Fill the attributes array with default values.
  $attributes = _content_mask_get_attributes_defaults(array(
    'role' => array(),
    'uid' => array(),
  ), $attributes);

  // Let other modules modify the attributes too.
  drupal_alter('content_mask_shortcode_attributes', $attributes);

  return $attributes;
}
