<?php
/**
 * @file
 * Module implementation file.
 */

/**
 * The defining basic variables.
 */
// External/Internal URL variables.
define('AC_NEWSLETTER_SITE_URL', 'http://www.activecampaign.com/');
define('AC_NEWSLETTER_CONNECT_URL', 'admin/config/services/ac-newsletter/connect');
define('AC_NEWSLETTER_CONFIGURE_URL', 'admin/config/services/ac-newsletter/configure');
define('AC_NEWSLETTER_BLOCK_CONFIGURE_URL', 'admin/structure/block/manage/ac_newsletter/ac_newsletter_signup/configure');
// Connection/Configuration Error status variables.
define('AC_NEWSLETTER_CONNECTION_ERROR', 'ac-newsletter-conn-error');
define('AC_NEWSLETTER_CONFIGURATION_ERROR', 'ac-newsletter-conf-error');
define('AC_NEWSLETTER_BLOCK_CONFIGURATION_ERROR', 'ac-newsletter-block-error');
// Block title and form submit button variable.
define('AC_NEWSLETTER_FORM_BLOCK_TITLE', 'Get our Newsletter');
define('AC_NEWSLETTER_DEFAULT_SUBMIT_BUTTON_TEXT', 'YEAH! Sign Up');
// Form fields default placeholder variables.
define('AC_NEWSLETTER_DEFAULT_PLACEHOLDER_FIRSTNAME', 'First Name');
define('AC_NEWSLETTER_DEFAULT_PLACEHOLDER_LASTNAME', 'Last Name');
define('AC_NEWSLETTER_DEFAULT_PLACEHOLDER_EMAIL', 'Email');
// Form fields default description variables.
define('AC_NEWSLETTER_DEFAULT_DESCRIPTION_FIRSTNAME', 'Provide your first name');
define('AC_NEWSLETTER_DEFAULT_DESCRIPTION_LASTNAME', 'Provide your last name');
define('AC_NEWSLETTER_DEFAULT_DESCRIPTION_EMAIL', 'Provide your email address');
define('AC_NEWSLETTER_DEFAULT_DESCRIPTION_LIST', 'Choose a list that you wish');
define('AC_NEWSLETTER_DEFAULT_DESCRIPTION_UNSUBS', 'Select an options');
// Form default subscription/unsubscription status messages variables.
define('AC_NEWSLETTER_DEFAULT_SUBSCRIPTION_STATUS_MSG', 'Your Subscription successful.');
define('AC_NEWSLETTER_DEFAULT_UNSUBSCRIPTION_STATUS_MSG', 'Your Unsubscription successful.');
define('AC_NEWSLETTER_ALREADY_SUBSCRIBED_STATUS_MSG', 'You have already subscribed to the list(s).');
define('AC_NEWSLETTER_ALREADY_UNSUBSCRIBED_STATUS_MSG', 'You have already unsubscribed to the list(s).');
define('AC_NEWSLETTER_DEFAULT_DOUBLE_OPT_IN_STATUS_MSG', 'Your Subscription is done. Please confirm it from your mail inbox.');
// Form fields default error message variables.
define('AC_NEWSLETTER_DEFAULT_EMPTY_ERROR_MSG_FIRSTNAME', 'You must enter your firstname');
define('AC_NEWSLETTER_DEFAULT_EMPTY_ERROR_MSG_LASTNAME', 'You must enter your lastname');
define('AC_NEWSLETTER_DEFAULT_EMPTY_ERROR_MSG_EMAIL', 'You must enter a valid email address');
define('AC_NEWSLETTER_DEFAULT_EMPTY_ERROR_MSG_LIST', 'Select a list to complete the step');

/**
 * Implements hook_help().
 */
function ac_newsletter_help($path, $arg) {

  switch ($path) {
    // Configuration help for the ac_newsletter module.
    case 'admin/help#ac_newsletter':
      return '<p>' . t('ActiveCampaign Newsletter sign up allows site administer to configure subscribe, unsubscribe lists and few other features. !link.', array('!link' => l(t('Connect ActiveCampaign'), AC_NEWSLETTER_CONNECT_URL))) . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function ac_newsletter_permission() {

  return array(
    'administer ac_newsletter' => array(
      'title' => t('Administer ActiveCampaign'),
      'description' => t('Allows access to ActiveCampaign config settings.'),
    ),
    'access ac_newsletter' => array(
      'title' => t('Access ActiveCampaign'),
      'description' => t('Allows access to ActiveCampaign sign up form.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ac_newsletter_menu() {

  // Connection settings admin menu.
  // Layout overview.
  $items['admin/config/services/ac-newsletter'] = array(
    'title' => 'ActiveCampaign',
    'description' => 'Connection settings for ActiveCampaign.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ac_newsletter_connect_admin_form'),
    'file' => 'includes/ac_newsletter_connect.admin.inc',
    'access arguments' => array('administer ac_newsletter'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Layout overview, primary tab.
  $items['admin/config/services/ac-newsletter/connect'] = array(
    'title' => 'Connection',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Configuration settings admin menu.
  $items['admin/config/services/ac-newsletter/configure'] = array(
    'title' => 'Configuration',
    'description' => 'Configuration settings for ActiveCampaign.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ac_newsletter_configure_admin_form'),
    'file' => 'includes/ac_newsletter_configure.admin.inc',
    'access callback' => '_ac_newsletter_config_access_callback',
    'access arguments' => array('administer ac_newsletter'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Helper Function, To get the ActiveCampaign API Object.
 *
 * @return ActiveCampaign
 *   Returns a ActiveCampaign class object.
 */
function _ac_newsletter_get_api() {

  // Include the library class.
  require_once libraries_get_path('activecampaign') . '/includes/ActiveCampaign.class.php';

  // Check for the connection object.
  $ac_newsletter_get_api = &drupal_static('ac_newsletter_get_api');
  if (!isset($ac_newsletter_get_api)) {
    $ac_newsletter_get_api = new ActiveCampaign(
      variable_get('ac_newsletter_api_url', ''),
      variable_get('ac_newsletter_api_key', '')
    );
  }

  return $ac_newsletter_get_api;
}

/**
 * Helper Function, To check whether ActiveCampaign account has connected.
 *
 * @param string $perm
 *   The Allowed permission.
 *
 * @return bool
 *   TRUE, if ActiveCampaign account has connected and user has permission.
 */
function _ac_newsletter_config_access_callback($perm) {
  if (_ac_newsletter_test_api_credentials() && user_access($perm)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Helper Function, To test the API credentials.
 *
 * @return bool
 *   TRUE, if ActiveCampaign Account is Valid.
 */
function _ac_newsletter_test_api_credentials() {

  // Reset the centrally stored object to update the new API credentials.
  drupal_static_reset('ac_newsletter_get_api');

  // Get the ActiveCampaign object.
  $_ac_account = _ac_newsletter_get_api();
  if (!(bool) $_ac_account->credentials_test()) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Helper Function, To get the ActiveCampaign lists.
 *
 * @return array
 *   The Array contains the list id/last name pairs.
 */
function _ac_newsletter_get_lists() {

  // Get the ActiveCampaign object.
  $_ac_account = _ac_newsletter_get_api();

  // View lists.
  $response = $_ac_account->api("list/list?ids=all");
  $options = array();
  if ((bool) $_ac_account->credentials_test() && (bool) $response->success) {
    // Successful request.
    foreach ($response as $list) {
      if (is_object($list)) {
        $options[$list->id] = $list->name;
      }
    }
  }

  return $options;
}

/**
 * Helper Function, To view subscriber by mail-id.
 *
 * @param string $email
 *   The email id of the subscriber.
 *
 * @return array
 *   The Array contains subcribed list ids if exists.
 */
function _ac_newsletter_contact_view_by_email($email) {

  // Get the ActiveCampaign object.
  $_ac_account = _ac_newsletter_get_api();

  // Fetch all subscriber list ids by email address.
  $response = $_ac_account->api("contact/view?email={$email}");
  $def = array('list_ids' => array());
  if ((bool) $_ac_account->credentials_test() && (bool) $response->success) {
    // Successful request.
    $def['fname'] = !empty($response->first_name) ? $response->first_name : '';
    $def['lname'] = !empty($response->last_name) ? $response->last_name : '';
    foreach ($response as $lists) {
      if (is_object($lists)) {
        foreach ($lists as $sec_key => $list) {
          $is_list_object = is_numeric($sec_key) && isset($list->status);
          if ($is_list_object && $list->status == 1) {
            $def['list_ids'][] = $sec_key;
          }
        }
      }
    }
  }

  return $def;
}

/**
 * Helper Function, To add a subscriber.
 *
 * @param string $email
 *   The mail id of the subscriber.
 * @param int $list_id
 *   The subscribing list id.
 * @param string $fname
 *   (optional) The First Name of the subscriber.
 * @param string $lname
 *   (optional) The Last Name of the subscriber.
 *
 * @return string
 *   Success if response code is 1.
 */
function _ac_newsletter_contact_add($email, $list_id, $fname = '', $lname = '') {

  // Get the ActiveCampaign object.
  $_ac_account = _ac_newsletter_get_api();

  // Add a subscriber to the lists.
  $contact = array(
    'email' => $email,
    'p[' . $list_id . ']' => $list_id,
    'status[' . $list_id . ']' => 1,
  );
  if (!empty($fname)) {
    $contact['first_name'] = $fname;
  }
  if (!empty($lname)) {
    $contact['last_name'] = $lname;
  }
  $response = $_ac_account->api("contact/add", $contact);

  return $response;
}

/**
 * Helper Function, To synchronize/update a subscriber.
 *
 * @param string $email
 *   The mail id of the subscriber.
 * @param array $list_ids
 *   The subscribing list ids.
 * @param string $fname
 *   (optional) The First Name of the subscriber.
 * @param string $lname
 *   (optional) The Last Name of the subscriber.
 *
 * @return string
 *   Success if response code is 1.
 */
function _ac_newsletter_contact_sync($email, array $list_ids, $fname = '', $lname = '') {

  // Get the ActiveCampaign object.
  $_ac_account = _ac_newsletter_get_api();

  // Sync a subscriber to the lists.
  $contact = array(
    'email' => $email,
  );
  if (!empty($fname)) {
    $contact['first_name'] = $fname;
  }
  if (!empty($lname)) {
    $contact['last_name'] = $lname;
  }
  foreach ($list_ids as $list_id => $status) {
    $contact['p[' . $list_id . ']'] = $list_id;
    $contact['status[' . $list_id . ']'] = $status > 0 ? 1 : 2;
  }
  $response = $_ac_account->api("contact/sync", $contact);

  return $response;
}

/**
 * Implements hook_block_info().
 */
function ac_newsletter_block_info() {

  // Initiate the block info.
  $blocks['ac_newsletter_signup'] = array(
    'info' => t('ActiveCampaign Newsletter Sign up'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ac_newsletter_block_view($delta = '') {

  // Prepare the block content.
  switch ($delta) {
    case 'ac_newsletter_signup':
      if (user_access('access ac_newsletter')) {
        $block['subject'] = t('@title', array('@title' => AC_NEWSLETTER_FORM_BLOCK_TITLE));
        $block['content'] = _ac_newsletter_prepare_block_callback($delta);
        return $block;
      }
      break;

  }
}

/**
 * Callback Function, To get a block content.
 *
 * @param string $which_block
 *   The Machine-name of the block.
 *
 * @return string
 *   The Block content.
 */
function _ac_newsletter_prepare_block_callback($which_block) {

  $html_output = '';
  switch ($which_block) {
    case 'ac_newsletter_signup':
      // Generate the block content based the connection/configuration status.
      if (!_ac_newsletter_test_api_credentials()) {
        $html_output = _ac_newsletter_help_text(AC_NEWSLETTER_CONNECTION_ERROR);
        drupal_set_message($html_output, 'error');
      }
      else {
        $signup_lists = variable_get('ac_newsletter_signup_lists', array());
        if (empty($signup_lists)) {
          $html_output = _ac_newsletter_help_text(AC_NEWSLETTER_BLOCK_CONFIGURATION_ERROR);
          drupal_set_message($html_output, 'error');
        }
        else {
          $html_output = drupal_get_form('ac_newsletter_sign_up_form');
        }
      }
      break;

  }

  return $html_output;
}

/**
 * Helper Function, To prepare the connect/configure help data.
 *
 * @param string $error_code
 *   The Code for each ActiveCampaign errors.
 *
 * @return string
 *   The HTML help data.
 */
function _ac_newsletter_help_text($error_code) {

  $html_output = '';
  switch ($error_code) {
    case AC_NEWSLETTER_CONNECTION_ERROR:
      // Provides an help text on AciveCampaign API connection failure status.
      drupal_set_message(t('ActiveCampaign API Connection Failure'), 'error');
      $url = url(AC_NEWSLETTER_CONNECT_URL, array('absolute' => TRUE, 'query' => drupal_get_destination()));
      $html_output .= t('Connect ActiveCampaign with valid credentials. See at <a href="@link">@link</a>', array(
        '@link' => $url));
      break;

    case AC_NEWSLETTER_CONFIGURATION_ERROR:
      // Provides an help text on AciveCampaign configuration failure status.
      drupal_set_message(t('ActiveCampaign Configuration Failure'), 'error');
      $url = url(AC_NEWSLETTER_CONFIGURE_URL, array('absolute' => TRUE, 'query' => drupal_get_destination()));
      $html_output .= t('Configure ActiveCampaign. See at <a href="@link">@link</a>', array('@link' => $url));
      break;

    case AC_NEWSLETTER_BLOCK_CONFIGURATION_ERROR:
      // Provides an help text on AciveCampaign block config failure status.
      drupal_set_message(t('ActiveCampaign Block Configuration Failure'), 'error');
      $url = url(AC_NEWSLETTER_BLOCK_CONFIGURE_URL, array('absolute' => TRUE, 'query' => drupal_get_destination()));
      $html_output .= t('Please configure the block to use this feature. See at <a href="@link">@link</a>', array(
        '@link' => $url));
      break;

  }

  return $html_output;
}

/**
 * Implements hook_block_configure().
 */
function ac_newsletter_block_configure($delta = '') {

  if ($delta == 'ac_newsletter_signup') {

    // Load icons.
    $icons = _ac_newsletter_icons();
    $logo = $icons['ac-logo-icon'];
    $conf = $icons['configure-ac-icon'];

    // Add CSS file.
    $form['#attached']['css'] = array(drupal_get_path('module', 'ac_newsletter') . '/css/ac_newsletter.css');

    // Block specific ActiveCampaign sign up form configuration.
    // Fieldset for custom config.
    $form['ac_newsletter_signup_form_setup'] = array(
      '#type' => 'fieldset',
      '#title' => t('ActiveCampaign Newsletter <em>signup form</em> config settings'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    // Display ActiveCampaign logo and Settings wheel icon.
    $ac_newsletter_url = check_url(variable_get('ac_newsletter_api_url', AC_NEWSLETTER_SITE_URL));
    $form['ac_newsletter_signup_form_setup']['ac_newsletter_logo'] = array(
      '#markup' => t('<div class="ac-newsletter-logo">!logo_url</div>', array(
        '!logo_url' => l($logo, AC_NEWSLETTER_SITE_URL, array('attributes' => array('target' => '_blank'), 'html' => TRUE)))),
    );
    $form['ac_newsletter_signup_form_setup']['ac_newsletter_conf'] = array(
      '#markup' => t('<div class="ac-newsletter-comm">!conf_url</div>', array(
        '!conf_url' => l($conf, $ac_newsletter_url, array('attributes' => array('target' => '_blank'), 'html' => TRUE)))),
    );

    // Get options(ActiveCampaign Lists) from the enabled lists in the site.
    $options = _ac_newsletter_get_form_lists('ac_newsletter_site_lists');

    // Validate the ActiveCampaign API credentials before configure the block.
    $test_conn = _ac_newsletter_test_api_credentials();
    if (empty($options) && $test_conn) {
      $html_output = _ac_newsletter_help_text(AC_NEWSLETTER_CONFIGURATION_ERROR);
      drupal_set_message($html_output, 'error');
    }
    elseif (!$test_conn) {
      $html_output = _ac_newsletter_help_text(AC_NEWSLETTER_CONNECTION_ERROR);
      drupal_set_message($html_output, 'error');
    }

    // Option to choose the subscription lists.
    $form['ac_newsletter_signup_form_setup']['ac_newsletter_signup_lists'] = array(
      '#type' => 'select',
      '#title' => t('Choose an list'),
      '#options' => $options,
      '#default_value' => variable_get('ac_newsletter_signup_lists', array()),
      '#multiple' => TRUE,
      '#required' => TRUE,
      '#description' => t('Provide allowed lists for subscribers.'),
    );

    // Option to change the submit button label.
    $form['ac_newsletter_signup_form_setup']['ac_newsletter_button_label'] = array(
      '#type' => 'textfield',
      '#title' => t('Button Label'),
      '#size' => 25,
      '#description' => t('Provide <em>sign up form</em> submit button label.'),
      '#default_value' => variable_get('ac_newsletter_button_label', ''),
      '#attributes' => array('placeholder' => t('Ex: @ex', array('@ex' => AC_NEWSLETTER_DEFAULT_SUBMIT_BUTTON_TEXT))),
    );

    // Option to enable/disable form fields description.
    $form['ac_newsletter_signup_form_setup']['ac_newsletter_en_description'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable fields description'),
      '#description' => t('Provide whether the <em>fields description</em> should display on the form.'),
      '#default_value' => variable_get('ac_newsletter_en_description', FALSE),
    );

    // Option to enable/disable form fields placeholder.
    $form['ac_newsletter_signup_form_setup']['ac_newsletter_en_placeholder'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable fields placeholder'),
      '#description' => t('Provide whether the <em>fields placeholder</em> should display on the form.'),
      '#default_value' => variable_get('ac_newsletter_en_placeholder', FALSE),
    );

    // Vertical Tab for fields specific settings.
    $form['ac_newsletter_signup_form_setup']['form_elements'] = array(
      '#type' => 'vertical_tabs',
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'ac_newsletter') . '/js/ac_newsletter-block.js'),
      ),
    );

    // Fieldset for field firstname.
    $form['ac_newsletter_signup_form_setup']['form_elements']['firstname'] = array(
      '#type' => 'fieldset',
      '#title' => t('Firstname field'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'form_elements',
      '#weight' => 1,
    );

    // Option to enable/disable firstname field.
    $form['ac_newsletter_signup_form_setup']['form_elements']['firstname']['ac_newsletter_en_firstname'] = array(
      '#type' => 'checkbox',
      '#title' => t('Field enabled'),
      '#description' => t('Provide whether the <em>firstname</em> field should display on the form.'),
      '#default_value' => variable_get('ac_newsletter_en_firstname', FALSE),
    );

    // Option to set/unset firstname field mandatory.
    $form['ac_newsletter_signup_form_setup']['form_elements']['firstname']['ac_newsletter_req_firstname'] = array(
      '#type' => 'checkbox',
      '#title' => t('Field mandatory'),
      '#description' => t('Provide whether the <em>firstname</em> should be requried field.'),
      '#default_value' => variable_get('ac_newsletter_req_firstname', FALSE),
      '#states' => array(
        'invisible' => array(
          ':input[name="ac_newsletter_en_firstname"]' => array('checked' => FALSE),
        ),
      ),
    );

    // Option to change the placeholder of firstname field.
    $form['ac_newsletter_signup_form_setup']['form_elements']['firstname']['ac_newsletter_fn_placeholder'] = array(
      '#type' => 'textfield',
      '#title' => t('Placeholder'),
      '#size' => 25,
      '#description' => t('Provide <em>firstname</em> field placeholder.'),
      '#default_value' => variable_get('ac_newsletter_fn_placeholder', ''),
      '#attributes' => array('placeholder' => t('Ex: @ex', array('@ex' => AC_NEWSLETTER_DEFAULT_PLACEHOLDER_FIRSTNAME))),
      '#states' => array(
        'invisible' => array(
          ':input[name="ac_newsletter_en_firstname"]' => array('checked' => FALSE),
        ),
      ),
    );

    // Option to change the description of firstname field.
    $form['ac_newsletter_signup_form_setup']['form_elements']['firstname']['ac_newsletter_fn_description'] = array(
      '#type' => 'textfield',
      '#title' => t('Description'),
      '#size' => 25,
      '#description' => t('Provide <em>firstname</em> field description.'),
      '#default_value' => variable_get('ac_newsletter_fn_description', ''),
      '#attributes' => array('placeholder' => t('Ex: @ex', array('@ex' => AC_NEWSLETTER_DEFAULT_DESCRIPTION_FIRSTNAME))),
      '#states' => array(
        'invisible' => array(
          ':input[name="ac_newsletter_en_firstname"]' => array('checked' => FALSE),
        ),
      ),
    );

    // Option to set the error message text for firstname field.
    $form['ac_newsletter_signup_form_setup']['form_elements']['firstname']['ac_newsletter_fn_err_message'] = array(
      '#type' => 'textfield',
      '#title' => t('Empty error message'),
      '#size' => 25,
      '#description' => t('Provide field <em>firstname</em> empty error message.'),
      '#default_value' => variable_get('ac_newsletter_fn_err_message', ''),
      '#attributes' => array('placeholder' => t('Ex: @ex', array('@ex' => AC_NEWSLETTER_DEFAULT_EMPTY_ERROR_MSG_FIRSTNAME))),
      '#states' => array(
        'invisible' => array(
          ':input[name="ac_newsletter_en_firstname"]' => array('checked' => FALSE),
        ),
      ),
    );

    // Fieldset for field lastname.
    $form['ac_newsletter_signup_form_setup']['form_elements']['lastname'] = array(
      '#type' => 'fieldset',
      '#title' => t('Lastname field'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'form_elements',
      '#weight' => 2,
    );

    // Option to enable/disable lastname field.
    $form['ac_newsletter_signup_form_setup']['form_elements']['lastname']['ac_newsletter_en_lastname'] = array(
      '#type' => 'checkbox',
      '#title' => t('Field enabled'),
      '#description' => t('Provide whether the <em>lastname</em> field should display on the form.'),
      '#default_value' => variable_get('ac_newsletter_en_lastname', FALSE),
    );

    // Option to set/unset lastname field mandatory.
    $form['ac_newsletter_signup_form_setup']['form_elements']['lastname']['ac_newsletter_req_lastname'] = array(
      '#type' => 'checkbox',
      '#title' => t('Field mandatory'),
      '#description' => t('Provide whether the <em>lastname</em> should be requried field.'),
      '#default_value' => variable_get('ac_newsletter_req_lastname', FALSE),
      '#states' => array(
        'invisible' => array(
          ':input[name="ac_newsletter_en_lastname"]' => array('checked' => FALSE),
        ),
      ),
    );

    // Option to change the placeholder of lastname field.
    $form['ac_newsletter_signup_form_setup']['form_elements']['lastname']['ac_newsletter_ln_placeholder'] = array(
      '#type' => 'textfield',
      '#title' => t('Placeholder'),
      '#size' => 25,
      '#description' => t('Provide <em>lastname</em> field placeholder.'),
      '#default_value' => variable_get('ac_newsletter_ln_placeholder', ''),
      '#attributes' => array('placeholder' => t('Ex: @ex', array('@ex' => AC_NEWSLETTER_DEFAULT_PLACEHOLDER_LASTNAME))),
      '#states' => array(
        'invisible' => array(
          ':input[name="ac_newsletter_en_lastname"]' => array('checked' => FALSE),
        ),
      ),
    );

    // Option to change the description of lastname field.
    $form['ac_newsletter_signup_form_setup']['form_elements']['lastname']['ac_newsletter_ln_description'] = array(
      '#type' => 'textfield',
      '#title' => t('Description'),
      '#size' => 25,
      '#description' => t('Provide <em>lastname</em> field description.'),
      '#default_value' => variable_get('ac_newsletter_ln_description', ''),
      '#attributes' => array('placeholder' => t('Ex: @ex', array('@ex' => AC_NEWSLETTER_DEFAULT_DESCRIPTION_LASTNAME))),
      '#states' => array(
        'invisible' => array(
          ':input[name="ac_newsletter_en_lastname"]' => array('checked' => FALSE),
        ),
      ),
    );

    // Option to set the error message text for lastname field.
    $form['ac_newsletter_signup_form_setup']['form_elements']['lastname']['ac_newsletter_ln_err_message'] = array(
      '#type' => 'textfield',
      '#title' => t('Empty error message'),
      '#size' => 25,
      '#description' => t('Provide field <em>lastname</em> empty error message.'),
      '#default_value' => variable_get('ac_newsletter_ln_err_message', ''),
      '#attributes' => array('placeholder' => t('Ex: @ex', array('@ex' => AC_NEWSLETTER_DEFAULT_EMPTY_ERROR_MSG_LASTNAME))),
      '#states' => array(
        'invisible' => array(
          ':input[name="ac_newsletter_en_lastname"]' => array('checked' => FALSE),
        ),
      ),
    );

    // Fieldset for field email.
    $form['ac_newsletter_signup_form_setup']['form_elements']['email'] = array(
      '#type' => 'fieldset',
      '#title' => t('Email field'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'form_elements',
      '#weight' => 3,
    );

    // Option to change the placeholder of email field.
    $form['ac_newsletter_signup_form_setup']['form_elements']['email']['ac_newsletter_em_placeholder'] = array(
      '#type' => 'textfield',
      '#title' => t('Placeholder'),
      '#size' => 25,
      '#description' => t('Provide <em>email</em> field placeholder.'),
      '#default_value' => variable_get('ac_newsletter_em_placeholder', ''),
      '#attributes' => array('placeholder' => t('Ex: @ex', array('@ex' => AC_NEWSLETTER_DEFAULT_PLACEHOLDER_EMAIL))),
    );

    // Option to change the description of email field.
    $form['ac_newsletter_signup_form_setup']['form_elements']['email']['ac_newsletter_em_description'] = array(
      '#type' => 'textfield',
      '#title' => t('Description'),
      '#size' => 25,
      '#description' => t('Provide <em>email</em> field description.'),
      '#default_value' => variable_get('ac_newsletter_em_description', ''),
      '#attributes' => array('placeholder' => t('Ex: @ex', array('@ex' => AC_NEWSLETTER_DEFAULT_DESCRIPTION_EMAIL))),
    );

    // Option to set the error message text for email field.
    $form['ac_newsletter_signup_form_setup']['form_elements']['email']['ac_newsletter_em_error_message'] = array(
      '#type' => 'textfield',
      '#title' => t('Empty error message'),
      '#size' => 25,
      '#description' => t('Provide field <em>email</em> empty error message.'),
      '#default_value' => variable_get('ac_newsletter_em_error_message', ''),
      '#attributes' => array('placeholder' => t('Ex: @ex', array('@ex' => AC_NEWSLETTER_DEFAULT_EMPTY_ERROR_MSG_EMAIL))),
    );

    // Fieldset for unsubscribe option.
    $form['ac_newsletter_signup_form_setup']['form_elements']['unsubscribe'] = array(
      '#type' => 'fieldset',
      '#title' => t('Unsubscribe Options'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'form_elements',
      '#weight' => 4,
    );

    // Option to enable/disable unsubscribe option.
    $form['ac_newsletter_signup_form_setup']['form_elements']['unsubscribe']['ac_newsletter_en_unsubscribe'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enabled Unsubscribe'),
      '#description' => t('Provide whether the <em>unsubscribe</em> option should display on the form.'),
      '#default_value' => variable_get('ac_newsletter_en_unsubscribe', FALSE),
    );

    // Option to change the description of unsubscribe option.
    $form['ac_newsletter_signup_form_setup']['form_elements']['unsubscribe']['ac_newsletter_unsubs_description'] = array(
      '#type' => 'textfield',
      '#title' => t('Description'),
      '#size' => 25,
      '#description' => t('Provide <em>unsubscribe</em> field description.'),
      '#default_value' => variable_get('ac_newsletter_unsubs_description', ''),
      '#attributes' => array('placeholder' => t('Ex: @ex', array('@ex' => AC_NEWSLETTER_DEFAULT_DESCRIPTION_UNSUBS))),
      '#states' => array(
        'invisible' => array(
          ':input[name="ac_newsletter_en_unsubscribe"]' => array('checked' => FALSE),
        ),
      ),
    );

    // Fieldset for list option.
    $form['ac_newsletter_signup_form_setup']['form_elements']['list_options'] = array(
      '#type' => 'fieldset',
      '#title' => t('List Options'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'form_elements',
      '#weight' => 5,
    );

    // Option to enable/disable firstname field.
    $form['ac_newsletter_signup_form_setup']['form_elements']['list_options']['ac_newsletter_en_lt_options'] = array(
      '#type' => 'checkbox',
      '#title' => t('Field enabled'),
      '#description' => t('Provides end-user to choose the lists on the form.'),
      '#default_value' => variable_get('ac_newsletter_en_lt_options', FALSE),
    );

    // Option to set the description for the lists.
    $form['ac_newsletter_signup_form_setup']['form_elements']['list_options']['ac_newsletter_lt_description'] = array(
      '#type' => 'textfield',
      '#title' => t('Description'),
      '#description' => t('Provide an description for the <em>lists</em> options.'),
      '#default_value' => variable_get('ac_newsletter_lt_description', ''),
      '#attributes' => array('placeholder' => t('Ex: @ex', array('@ex' => AC_NEWSLETTER_DEFAULT_DESCRIPTION_LIST))),
      '#states' => array(
        'invisible' => array(
          ':input[name="ac_newsletter_en_lt_options"]' => array('checked' => FALSE),
        ),
      ),
    );
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function ac_newsletter_block_save($delta = '', $edit = array()) {

  if ($delta == 'ac_newsletter_signup') {
    // Set values for general settings.
    variable_set('ac_newsletter_signup_lists', $edit['ac_newsletter_signup_lists']);
    variable_set('ac_newsletter_button_label', $edit['ac_newsletter_button_label']);
    variable_set('ac_newsletter_en_description', $edit['ac_newsletter_en_description']);
    variable_set('ac_newsletter_en_placeholder', $edit['ac_newsletter_en_placeholder']);
    // Set values for firstname field settings.
    variable_set('ac_newsletter_en_firstname', $edit['ac_newsletter_en_firstname']);
    variable_set('ac_newsletter_req_firstname', $edit['ac_newsletter_req_firstname']);
    variable_set('ac_newsletter_fn_placeholder', $edit['ac_newsletter_fn_placeholder']);
    variable_set('ac_newsletter_fn_description', $edit['ac_newsletter_fn_description']);
    variable_set('ac_newsletter_fn_err_message', $edit['ac_newsletter_fn_err_message']);
    // Set values for lastname field settings.
    variable_set('ac_newsletter_en_lastname', $edit['ac_newsletter_en_lastname']);
    variable_set('ac_newsletter_req_lastname', $edit['ac_newsletter_req_lastname']);
    variable_set('ac_newsletter_ln_placeholder', $edit['ac_newsletter_ln_placeholder']);
    variable_set('ac_newsletter_ln_description', $edit['ac_newsletter_ln_description']);
    variable_set('ac_newsletter_ln_err_message', $edit['ac_newsletter_ln_err_message']);
    // Set values for email field settings.
    variable_set('ac_newsletter_em_placeholder', $edit['ac_newsletter_em_placeholder']);
    variable_set('ac_newsletter_em_description', $edit['ac_newsletter_em_description']);
    variable_set('ac_newsletter_em_error_message', $edit['ac_newsletter_em_error_message']);
    // Set values for unsubscribe option settings.
    variable_set('ac_newsletter_en_unsubscribe', $edit['ac_newsletter_en_unsubscribe']);
    variable_set('ac_newsletter_unsubs_description', $edit['ac_newsletter_unsubs_description']);
    // Set values for list option settings.
    variable_set('ac_newsletter_en_lt_options', $edit['ac_newsletter_en_lt_options']);
    variable_set('ac_newsletter_lt_description', $edit['ac_newsletter_lt_description']);
  }
}

/**
 * Form constructor for the ac_newsletter sign up form.
 *
 * @see ac_newsletter_sign_up_form_validate()
 * @see ac_newsletter_sign_up_form_submit()
 *
 * @ingroup forms
 */
function ac_newsletter_sign_up_form($form, &$form_state) {

  // Populate the values if logged in user has subscribed list(s).
  global $user;
  $default_values = array('list_ids' => array());
  if (user_is_logged_in()) {
    $default_values = _ac_newsletter_contact_view_by_email($user->mail);
  }

  // Build the subscription form.
  $form = array(
    '#prefix' => '<div id="inbx">',
    '#suffix' => '</div>',
  );
  $form['#attributes']['class'][] = drupal_html_class('ac_newsletter_sign_up_form');

  // Markup to show the drupal messages via ajax.
  $form['sign_up_messages'] = array(
    '#markup' => t('<div id="sign-up-messages"></div>'),
  );

  // Check the field's description and placeholder properties allowed.
  $is_allowed_description = variable_get('ac_newsletter_en_description', FALSE);
  $is_allowed_placeholder = variable_get('ac_newsletter_en_placeholder', FALSE);

  // (Optional) Firstname field.
  if (variable_get('ac_newsletter_en_firstname', FALSE)) {
    $form['fname'] = array(
      '#type' => 'textfield',
      '#title' => '',
      '#size' => 15,
      '#maxlength' => 128,
      '#required' => FALSE,
      '#weight' => 1,
      '#attributes' => array(
        'class' => array('inp'),
      ),
    );

    // Populate firstname if logged in user has subscribed list(s).
    if (user_is_logged_in() && isset($default_values['fname'])) {
      $form['fname']['#default_value'] = $default_values['fname'];
    }

    // Since the field's description and placeholder are dynamic values.
    // So, Values are stored in PHP variables and passed to t() directly.
    // Pareview.sh shows warnings which are skipped for now.
    // It says "Only string literals should be passed to t() where possible".
    // Add firstname field custom description if enabled.
    if ($is_allowed_description) {
      $fn_description = variable_get('ac_newsletter_fn_description');
      if (empty($fn_description)) {
        $fn_description = AC_NEWSLETTER_DEFAULT_DESCRIPTION_FIRSTNAME;
      }
      $form['fname']['#description'] = t(check_plain($fn_description));
    }

    // Add firstname field custom placeholder if enabled.
    if ($is_allowed_placeholder) {
      $fn_placeholder = variable_get('ac_newsletter_fn_placeholder');
      if (empty($fn_placeholder)) {
        $fn_placeholder = AC_NEWSLETTER_DEFAULT_PLACEHOLDER_FIRSTNAME;
      }
      $form['fname']['#attributes']['placeholder'] = t(check_plain($fn_placeholder));
    }
  }

  // (Optional) Lastname field.
  if (variable_get('ac_newsletter_en_lastname', FALSE)) {
    $form['lname'] = array(
      '#type' => 'textfield',
      '#title' => '',
      '#size' => 15,
      '#maxlength' => 128,
      '#required' => FALSE,
      '#weight' => 2,
      '#attributes' => array(
        'class' => array('inp'),
      ),
    );

    // Populate lastname if logged in user has subscribed list(s).
    if (user_is_logged_in() && isset($default_values['lname'])) {
      $form['lname']['#default_value'] = $default_values['lname'];
    }

    // Since the field's description and placeholder are dynamic values.
    // So, Values are stored in PHP variables and passed to t() directly.
    // Pareview.sh shows warnings which are skipped for now.
    // It says "Only string literals should be passed to t() where possible".
    // Add lastname field custom description if enabled.
    if ($is_allowed_description) {
      $ln_description = variable_get('ac_newsletter_ln_description');
      if (empty($ln_description)) {
        $ln_description = AC_NEWSLETTER_DEFAULT_DESCRIPTION_LASTNAME;
      }
      $form['lname']['#description'] = t(check_plain($ln_description));
    }

    // Add lastname field custom placeholder if enabled.
    if ($is_allowed_placeholder) {
      $ln_placeholder = variable_get('ac_newsletter_ln_placeholder');
      if (empty($ln_placeholder)) {
        $ln_placeholder = AC_NEWSLETTER_DEFAULT_PLACEHOLDER_LASTNAME;
      }
      $form['lname']['#attributes']['placeholder'] = t(check_plain($ln_placeholder));
    }
  }

  // Email field.
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => '',
    '#size' => 15,
    '#maxlength' => 128,
    '#required' => FALSE,
    '#weight' => 3,
    '#attributes' => array(
      'class' => array('inp'),
    ),
  );

  // Populate email address if user is logged in.
  if (user_is_logged_in()) {
    $form['email']['#default_value'] = $user->mail;
  }

  // Since the field's description and placeholder are dynamic values.
  // So, Values are stored in PHP variables and passed to t() directly.
  // Pareview.sh shows warnings which are skipped for now.
  // It says "Only string literals should be passed to t() where possible".
  // Add email field custom description if enabled.
  if ($is_allowed_description) {
    $em_description = variable_get('ac_newsletter_em_description');
    if (empty($em_description)) {
      $em_description = AC_NEWSLETTER_DEFAULT_DESCRIPTION_EMAIL;
    }
    $form['email']['#description'] = t(check_plain($em_description));
  }

  // Add email field custom placeholder if enabled.
  if ($is_allowed_placeholder) {
    $em_placeholder = variable_get('ac_newsletter_em_placeholder');
    if (empty($em_placeholder)) {
      $em_placeholder = AC_NEWSLETTER_DEFAULT_PLACEHOLDER_EMAIL;
    }
    $form['email']['#attributes']['placeholder'] = t(check_plain($em_placeholder));
  }

  // Choose list option field.
  $options = _ac_newsletter_get_form_lists('ac_newsletter_signup_lists', TRUE);
  $reset_opt = array();
  foreach ($options as $key => $value) {
    $reset_opt[$key] = $key;
  }

  // (Optional) subscription lists field.
  if (variable_get('ac_newsletter_en_lt_options', FALSE)) {
    $form['list_ids'] = array(
      '#type' => 'checkboxes',
      '#options' => $options,
      '#default_value' => $reset_opt,
      '#weight' => 4,
    );

    // Check all subscribed lists if logged in user has subscribed list(s).
    if (user_is_logged_in()) {
      $form['list_ids']['#default_value'] = $default_values['list_ids'];
    }

    // Since the field's description and placeholder are dynamic values.
    // So, Values are stored in PHP variables and passed to t() directly.
    // Pareview.sh shows warnings which are skipped for now.
    // It says "Only string literals should be passed to t() where possible".
    // Add subscription list field custom description if enabled.
    if ($is_allowed_description) {
      $lt_description = variable_get('ac_newsletter_lt_description');
      if (empty($lt_description)) {
        $lt_description = AC_NEWSLETTER_DEFAULT_DESCRIPTION_LIST;
      }
      $form['list_ids']['#description'] = t(check_plain($lt_description));
    }
  }
  else {
    $form['list_ids'] = array(
      '#type' => 'value',
      '#value' => $reset_opt,
      '#weight' => 4,
    );
  }

  // (Optional) Unsubscribe option field.
  if (variable_get('ac_newsletter_en_unsubscribe', FALSE)) {
    $is_subscribed = array_intersect($reset_opt, $default_values['list_ids']);
    $form['subscribe_unsubscribe'] = array(
      '#type' => 'radios',
      '#title' => '',
      '#options' => array('subscribe' => t('subscribe'), 'unsubscribe' => t('unsubscribe')),
      '#default_value' => !empty($is_subscribed) ? 'unsubscribe' : 'subscribe',
      '#weight' => 5,
    );

    // Since the field's description and placeholder are dynamic values.
    // So, Values are stored in PHP variables and passed to t() directly.
    // Pareview.sh shows warnings which are skipped for now.
    // It says "Only string literals should be passed to t() where possible".
    // Add unsubscribe field custom description if enabled.
    if ($is_allowed_description) {
      $unsubs_description = variable_get('ac_newsletter_unsubs_description');
      if (empty($unsubs_description)) {
        $unsubs_description = AC_NEWSLETTER_DEFAULT_DESCRIPTION_UNSUBS;
      }
      $form['subscribe_unsubscribe']['#description'] = t(check_plain($unsubs_description));
    }
  }
  else {
    $form['subscribe_unsubscribe'] = array(
      '#type' => 'value',
      '#value' => 'subscribe',
      '#weight' => 5,
    );
  }

  // Change submit button label if provided.
  $button_label = variable_get('ac_newsletter_button_label');
  if (empty($button_label)) {
    $button_label = AC_NEWSLETTER_DEFAULT_SUBMIT_BUTTON_TEXT;
  }

  // Ajax submit button.
  $form['sign_up'] = array(
    '#type' => 'submit',
    '#value' => $button_label,
    '#ajax' => array(
      'callback' => 'ac_newsletter_sign_up_form_ajax_callback',
      'wrapper' => 'inbx',
      'progress' => array('type' => 'throbber', 'message' => ''),
    ),
    '#attributes' => array('class' => array('sign')),
    '#weight' => 6,
  );

  return $form;
}

/**
 * Form validation handler for ac_newsletter_sign_up_form().
 */
function ac_newsletter_sign_up_form_validate($form, &$form_state) {

  // Get all values.
  $fs_values = $form_state['values'];

  // Validate the firstname field value.
  if (variable_get('ac_newsletter_en_firstname', FALSE) && variable_get('ac_newsletter_req_firstname', FALSE)) {
    if (empty($fs_values['fname'])) {
      $custom = variable_get('ac_newsletter_fn_err_message', '');
      $error_message = !empty($custom) ? $custom : AC_NEWSLETTER_DEFAULT_EMPTY_ERROR_MSG_FIRSTNAME;
      form_set_error('', t(check_plain($error_message)));
    }
  }

  // Validate the lastname field value.
  if (variable_get('ac_newsletter_en_lastname', FALSE) && variable_get('ac_newsletter_req_lastname', FALSE)) {
    if (empty($fs_values['lname'])) {
      $custom = variable_get('ac_newsletter_ln_err_message', '');
      $error_message = !empty($custom) ? $custom : AC_NEWSLETTER_DEFAULT_EMPTY_ERROR_MSG_LASTNAME;
      form_set_error('', t(check_plain($error_message)));
    }
  }

  // Validate the email field value.
  if (empty($fs_values['email']) || !valid_email_address($fs_values['email'])) {
    $custom = variable_get('ac_newsletter_em_error_message', '');
    $error_message = !empty($custom) ? $custom : AC_NEWSLETTER_DEFAULT_EMPTY_ERROR_MSG_EMAIL;
    form_set_error('', t(check_plain($error_message)));
  }
  elseif (variable_get('ac_newsletter_use_briteverify_api', FALSE)) {

    // Validate the email address using Briteverify.
    $response_data = _ac_newsletter_use_brite_verify(trim(variable_get('ac_newsletter_briteverify_api_key', '')), trim($fs_values['email']));
    if ($response_data['code'] == 200) {
      if ($response_data['status'] == 'invalid') {
        form_set_error('', t(check_plain($response_data['error'])));
      }
    }
  }

  // Validate the empty subscription lists selection.
  if (variable_get('ac_newsletter_en_lt_options', FALSE)) {
    $filtered_list = array_filter($fs_values['list_ids']);
    if (empty($filtered_list)) {
      form_set_error('', t('@err', array('@err' => AC_NEWSLETTER_DEFAULT_EMPTY_ERROR_MSG_LIST)));
    }
  }
}

/**
 * Form submission handler for ac_newsletter_sign_up_form().
 */
function ac_newsletter_sign_up_form_submit($form, &$form_state) {

  // Rebuild the subscription form to clear submitted values.
  $form_state['rebuild'] = TRUE;

  // Get all form_state values.
  $fs_values = $form_state['values'];

  // Set firstname.
  $fname = '';
  if (isset($fs_values['fname']) && !empty($fs_values['fname'])) {
    $fname = $fs_values['fname'];
  }

  // Set lastname.
  $lname = '';
  if (isset($fs_values['lname']) && !empty($fs_values['lname'])) {
    $lname = $fs_values['lname'];
  }

  // Set email address.
  $email = $fs_values['email'];

  // Get default info.
  $default = _ac_newsletter_contact_view_by_email($email);

  // Set subscribed lists.
  $old_list_ids = $default['list_ids'];

  // Set updated lists.
  $list_ids = array_filter($fs_values['list_ids']);

  // Set subscribe/unsubscribe message status.
  $option = $fs_values['subscribe_unsubscribe'];
  $consolidated_list_ids = array();
  if ($option == 'subscribe') {
    $consolidated_list_ids = array_diff($list_ids, $old_list_ids);
    $message = AC_NEWSLETTER_DEFAULT_SUBSCRIPTION_STATUS_MSG;
    $other_message = AC_NEWSLETTER_ALREADY_SUBSCRIBED_STATUS_MSG;
  }
  elseif ($option == 'unsubscribe') {
    $temp_list_ids = array_intersect($old_list_ids, $list_ids);
    foreach ($temp_list_ids as $value) {
      $consolidated_list_ids[$value] = 0;
    }
    $message = AC_NEWSLETTER_DEFAULT_UNSUBSCRIPTION_STATUS_MSG;
    $other_message = AC_NEWSLETTER_ALREADY_UNSUBSCRIBED_STATUS_MSG;
  }

  // Make a request based on the subscriber list(s) selection.
  if (!empty($consolidated_list_ids)) {
    $result = _ac_newsletter_contact_sync($email, $consolidated_list_ids, $fname, $lname);
    if ((bool) $result->success) {
      // Successful request.
      drupal_set_message($message);
    }
    else {
      // Request failed.
      drupal_set_message(check_plain($result->result_message), 'error');
    }
  }
  else {
    // Show a message if already subscribed/unsubscribed.
    drupal_set_message($other_message);
  }
}

/**
 * Callback Function for the ajax button sign_up.
 */
function ac_newsletter_sign_up_form_ajax_callback($form, &$form_state) {

  // Add status message of the form submission.
  $commands[] = ajax_command_remove('div div.messages');
  $commands[] = ajax_command_prepend('#sign-up-messages', theme('status_messages'));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Helper Function, To get an array of ActiveCampaign icon img elements.
 *
 * @return array
 *   The Array of image icons.
 */
function _ac_newsletter_icons() {

  // Get all images using theme().
  $icons = array();
  $icos = array(
    'ac-logo-icon' => t('ActiveCampaign'),
    'connect-ac-icon' => t('Connect ActiveCampaign'),
    'configure-ac-icon' => t('Configure ActiveCampaign'),
  );
  foreach ($icos as $name => $title) {
    $variables = array(
      'path' => drupal_get_path('module', 'ac_newsletter') . '/images/' . $name . '.png',
      'title' => $title,
      'alt' => $title,
      'attributes' => array(
        'class' => array('ac-icon'),
        'id' => array($name),
      ),
    );
    $icons[$name] = theme('image', $variables);
  }

  return $icons;
}

/**
 * Helper Function, To get the enabled site/form ActiveCampaign lists.
 *
 * @param string $which_list
 *   The Name of the list(site/form).
 * @param bool $is_alter
 *   The Alternative texts for each options if TRUE.
 *
 * @return array
 *   The Array containing list id/list name pairs.
 */
function _ac_newsletter_get_form_lists($which_list, $is_alter = FALSE) {

  // Get the subscription lists from selected lists.
  $actual_lists = _ac_newsletter_get_lists();
  $keys = variable_get($which_list, array());
  $updated_lists = array_intersect_key($actual_lists, $keys);
  if ($is_alter) {
    $alter_text = explode("\n", variable_get('ac_newsletter_alternative_text', array()));
    $alt_txt = array();
    foreach ($alter_text as $text) {
      $temp = explode('|', trim($text));
      if (!empty($temp[1])) {
        $alt_txt[$temp[0]] = $temp[1];
      }
    }
    foreach ($updated_lists as $key => $value) {
      if (array_key_exists($value, $alt_txt)) {
        $updated_lists[$key] = $alt_txt[$value];
      }
    }
  }

  return $updated_lists;
}

/**
 * Helper Function, To use BriteVerify API for valid email verification.
 *
 * @param string $apikey
 *   The BriteVerify API key.
 * @param string $address
 *   The email address to verify.
 *
 * @return array
 *   The Array containing the verification response.
 */
function _ac_newsletter_use_brite_verify($apikey, $address = 'james@briteverify.com') {

  // Validate the given email address using Briteverify API.
  $request_data = array('address' => $address, 'apikey' => $apikey);
  $response = drupal_http_request(url('https://bpi.briteverify.com/emails.json', array('query' => $request_data)));
  $response_data = drupal_json_decode($response->data);
  $response_data['code'] = $response->code;
  $response_data['status_message'] = $response->status_message;

  return $response_data;
}
