<?php

/**
 * @file
 * Module file for Freshbook Module.
 */

/**
 * Implements hook_menu().
 */
function freshdesk_menu() {
  $items = array();
  $items['admin/config/services/freshdesk'] = array(
    'title' => 'Freshdesk Admin Page',
    'description' => 'Freshdesk Administrative Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('freshdesk_admin_account'),
    'access arguments' => array('administer freshdesk module'),
    'file' => 'freshdesk.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/freshdesk/default'] = array(
    'title' => 'Freshdesk Admin Page',
    'weight' => 0,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/services/freshdesk/widgetpopup'] = array(
    'title' => 'Freshdesk Popup Widget',
    'description' => 'Popup Widget Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('freshdesk_admin_widget_popup'),
    'access arguments' => array('administer freshdesk module'),
    'file' => 'freshdesk.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );
  $items['admin/config/services/freshdesk/widgetembed'] = array(
    'title' => 'Freshdesk Embed Widget',
    'description' => 'Embed Widget Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('freshdesk_admin_widget_embed'),
    'access arguments' => array('administer freshdesk module'),
    'file' => 'freshdesk.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 6,
  );
  $items['freshdesk/support/portal'] = array(
    'title' => 'Freshdesk Support Portal',
    'description' => 'Single Sign On to Support Portal',
    'page callback' => '_freshdesk_support_portal',
    'page arguments' => array(),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function freshdesk_permission() {
  return array(
    'administer freshdesk module' => array(
      'title' => t('Administer Freshdesk Module'),
    ),
  );
}

/**
 * Page call back for Freshdesk SSO.
 */
function _freshdesk_support_portal() {
  global $user;
  header("Location: " . freshdesk_login_url($user->name, $user->mail));
  return TRUE;
}

/**
 * Freshdesk SSO helper function to create login URL.
 */
function freshdesk_login_url($name, $email) {
  $secret = variable_get('freshdesk_sso_key', '');
  $base = variable_get('freshdesk_url', '');
  return $base . '/login/sso/?name=' . urlencode($name) . '&email=' . urlencode($email) . '&hash=' . hash('md5', $name . $email . $secret);
}

/**
 * Implements hook_page_build().
 *
 * This adds the tracking code into the page between the body tags.
 */
function freshdesk_page_build(&$page) {
  // Process path settings for the widgets.
  $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
  $configpaths = variable_get('freshdesk_widget_popup_paths');
  $freshpaths = list_extract_allowed_values($configpaths, 'list_text', FALSE);
  $path_match = FALSE;
  foreach ($freshpaths as $items) {
    // Compare the lowercase internal and lowercase path alias (if any).
    // Pass TRUE if we find a match.
    if (drupal_match_path($path, $items)) {
      $path_match = TRUE;
    }
  }
  // Assertain who should be given the popup widget
  global $user;
  // Default to no tracking.
  $trackable = 0;
  if (is_array($user->roles)) {
    foreach ($user->roles as $role) {
      $role = str_replace(' ', '_', $role);
      $trackable += variable_get('freshdesk_widget_popup_roles_' . $role, FALSE);
    }
  }
  // Is the Freshdesk JS popup widget enabled?
  $fresh_js = variable_get('freshdesk_widget_popup_enable', 0);
  if (!empty($fresh_js) && empty($path_match) && $trackable > 0) {
    $freshdesk_popup_widget_options = array();
    // Load options and set defaults here in they have not been set in the admin panel.
    $freshdesk_popup_widget_options['freshdesk_url'] = variable_get('freshdesk_url', 'https://example.freshdesk.com');
    $freshdesk_popup_widget_options['freshdesk_widget_popup_form_responsive'] = variable_get('freshdesk_widget_popup_form_responsive', 1);
    $freshdesk_popup_widget_options['freshdesk_widget_popup_type'] = variable_get('freshdesk_widget_popup_type', 'button');
    $freshdesk_popup_widget_options['freshdesk_widget_popup_type_attribute'] = variable_get('freshdesk_widget_popup_type_attribute');
    $freshdesk_popup_widget_options['freshdesk_widget_popup_position'] = variable_get('freshdesk_widget_popup_position', 4);
    $freshdesk_popup_widget_options['freshdesk_widget_popup_offset'] = variable_get('freshdesk_widget_popup_offset', 235);
    $freshdesk_popup_widget_options['freshdesk_widget_popup_form_heading'] = variable_get('freshdesk_widget_popup_form_heading', t('Help and Support'));
    $freshdesk_popup_widget_options['freshdesk_widget_popup_form_submit_message'] = variable_get('freshdesk_widget_popup_form_submit_message', t('Thank you for your feedback'));
    $freshdesk_popup_widget_options['freshdesk_widget_popup_form_height'] = variable_get('freshdesk_widget_popup_form_height', 500);
    $freshdesk_popup_widget_options['freshdesk_widget_popup_form_screenshot'] = variable_get('freshdesk_widget_popup_form_screenshot', 1);
    $freshdesk_popup_widget_options['freshdesk_widget_popup_form_attach'] = variable_get('freshdesk_widget_popup_form_attach', 1);
    $freshdesk_popup_widget_options['freshdesk_widget_popup_form_search'] = variable_get('freshdesk_widget_popup_form_search', 1);
    $markup = theme('freshdesk_popup', $freshdesk_popup_widget_options);
    drupal_add_js('https://s3.amazonaws.com/assets.freshdesk.com/widget/freshwidget.js', array('type' => 'external'));
    drupal_add_js($markup, array('type' => 'inline', 'scope' => 'footer'));
  }
}

/**
 * Implements hook_theme().
 */
function freshdesk_theme() {
  $base = array(
    'path' => drupal_get_path('module', 'freshdesk') . '/templates',
  );
  $items['freshdesk_popup'] = array(
    'variables' => array(
      'freshdesk_url' => NULL,
      'freshdesk_widget_popup_form_responsive' => NULL,
      'freshdesk_widget_popup_type' => NULL,
      'freshdesk_widget_popup_type_attribute' => NULL,
      'freshdesk_widget_popup_position' => NULL,
      'freshdesk_widget_popup_offset' => NULL,
      'freshdesk_widget_popup_form_heading' => NULL,
      'freshdesk_widget_popup_form_submit_message' => NULL,
      'freshdesk_widget_popup_form_height' => NULL,
      'freshdesk_widget_popup_form_screenshot' => NULL,
      'freshdesk_widget_popup_form_attach' => NULL,
      'freshdesk_widget_popup_form_search' => NULL,
    ),
    'template' => 'freshdesk_widget_popup',
      ) + $base;
  $items['freshdesk_embed'] = array(
    'variables' => array(
      'freshdesk_url' => NULL,
      'freshdesk_widget_embed_form_search' => NULL,
      'freshdesk_widget_embed_form_attach' => NULL,
      'freshdesk_widget_embed_form_height' => NULL,
      'freshdesk_widget_embed_form_heading' => NULL,
      'freshdesk_widget_embed_form_submit_message' => NULL,
    ),
    'template' => 'freshdesk_widget_embed',
      ) + $base;

  return $items;
}

/**
 * Implements hook_token_info().
 */
function freshdesk_token_info() {
  $items = array();
  // Add a Freshdesk token type.
  $items['types']['freshdesk'] = array(
    'name' => t('Freshdesk'),
    'description' => t('Tokens related to Freshdesk.'),
  );
  // Add a token within the new token type.
  $items['tokens']['freshdesk']['freshdeskembed'] = array(
    'name' => t('Freshdesk Embedded Form'),
    'description' => t('iFrame embedded form for Freshdesk.'),
  );
  return $items;
}

/**
 * Implements hook_tokens().
 *
 * This will take the tokens and process them to an markup for iFrame.
 */
function freshdesk_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'freshdesk') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'freshdeskembed':
          $freshdesk_embed_widget_options = array();
          // Load options and set defaults.
          $freshdesk_embed_widget_options['freshdesk_url'] = variable_get('freshdesk_url', 'https://example.freshdesk.com');
          $freshdesk_embed_widget_options['freshdesk_widget_embed_form_height'] = variable_get('freshdesk_widget_embed_form_height', 500);
          $freshdesk_embed_widget_options['freshdesk_widget_embed_form_attach'] = variable_get('freshdesk_widget_embed_form_attach', 1);
          $freshdesk_embed_widget_options['freshdesk_widget_embed_form_search'] = variable_get('freshdesk_widget_embed_form_search', 1);
          $freshdesk_embed_widget_options['freshdesk_widget_embed_form_heading'] = variable_get('freshdesk_widget_embed_form_heading', '');
          $freshdesk_embed_widget_options['freshdesk_widget_embed_form_submit_message'] = variable_get('freshdesk_widget_embed_form_submit_message', '');
          $markup = theme('freshdesk_embed', $freshdesk_embed_widget_options);
          // We replace the token with the embed code from the template.
          $replacements[$original] = $markup;
          break;
      }
    }
  }
  return $replacements;
}
