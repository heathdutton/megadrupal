<?php

/**
 * @file
 * User visits - displays a list of users who recently visited any other user's
 * profile, along with the time of the last visit and the image.
 */

/**
 * Implements hook_help().
 */
function user_visits_help($path, $arg) {
  switch ($path) {
    case "admin/help#user-visits":
      return t("<p>Counts the visits to a user's profile.</p>");
      break;
  }
}

/**
 * Implements hook_menu().
 */
function user_visits_menu() {
  $items = array();
  $items['admin/config/people/user_visits'] = array(
    'title' => 'User visits',
    'description' => "Configure where to display a user's visitors.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_visits_settings'),
    'access arguments' => array('administer user visits'),
    'file' => 'user_visits.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function user_visits_block_info() {
  $blocks = array();
  $blocks['latest_visitors'] = array(
    'info' => t('Latest visitors'),
  );
  $blocks['my_latest_visitors'] = array(
    'info' => t('My latest visitors'),
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function user_visits_block_configure($delta = '') {
  $form = array();
  $form['items'] = array(
    '#type' => 'select',
    '#title' => t('Number of items'),
    '#default_value' => variable_get('user_visits_block_items_' . $delta, 5),
    '#options' => drupal_map_assoc(
      array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25)
    ),
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function user_visits_block_save($delta = '', $edit = array()) {
  variable_set('user_visits_block_items_' . $delta, $edit['items']);
}

/**
 * Implements hook_block_view().
 */
function user_visits_block_view($delta = '') {
  $block = array();
  $limit = variable_get('user_visits_block_items_' . $delta, 5);
  switch ($delta) {
    case 'latest_visitors':
      $block['subject'] = t('Latest visitors');
      $block['content'] = user_visits_display_block_1(NULL, $limit);
      break;

    case 'my_latest_visitors':
      global $user;
      $block['subject'] = t('My latest visitors');
      $block['content'] = user_visits_display_block_1($user->uid, $limit);
      break;
  }
  return $block;
}

/**
 * Get latest visitors for block content
 */
function user_visits_display_block_1($uid = NULL, $limit = 5) {
  $output = "";
  if (!$uid && (arg(0) == 'user' && is_numeric(arg(1)))) {
    $uid = arg(1);
  }

  if ($uid) {
    $visitors = user_visits_latest($uid, $limit);
    if (is_array($visitors)) {
      foreach ($visitors as $visitor) {
        $account = user_load($visitor->vuid);
        $output .= theme('user_visits', array('account' => $account, 'timestamp' => $visitor->visit));
      }
    }
    $output .= theme('user_visits_total', array('total' => user_visits_total($uid)));
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function user_visits_permission() {
  return array(
    'administer user visits' => array(
      'title' => t('Administer user visits'),
    ),
  );
}

/**
 * Implements of hook_user_view().
 */
function user_visits_user_view($account, $view_mode, $langcode) {
  $output = "";
  if (variable_get('user_visits_display', 0)) {
    $visitors = user_visits_latest($account->uid);
    if (is_array($visitors)) {
      foreach ($visitors as $visitor) {
        $user_account = user_load($visitor->vuid);
        $output .= theme('user_visits', array(
          'account' => $user_account,
          'timestamp' => $visitor->visit,
          'referer' => $visitor->referer,
        ));
      }
    }

    $account->content['summary']['user_visits'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Latest visitors'),
      '#markup' => $output ? $output : t('No visits by now'),
      '#weight' => 10,
      '#attributes' => array('class' => 'user-visits'),
    );
  }
}

/**
 * Update counter.
 */
function user_visits_count($vuid, $uid) {
  $delete_query = db_delete('user_visits')
    ->condition('uid', $uid)
    ->condition('vuid', $vuid)
    ->execute();
  $query = db_insert('user_visits')
    ->fields(array(
      'uid' => $uid,
      'vuid' => $vuid,
      'visit' => REQUEST_TIME,
      'referer' => check_plain($_SERVER['HTTP_REFERER']),
    ))
    ->execute();
  return $query;
}

/**
 * Get the total of visits.
 */
function user_visits_total($uid) {
  $query = db_select('user_visits', 'uv');
  $query
      ->condition('uv.uid', $uid, '=')
      ->addExpression('COUNT(visit)', 'count');
  return $query->execute()->fetchField();
}

/**
 * Get the latest visits.
 */
function user_visits_latest($uid, $limit = 5) {
  $visitors = array();
  $query = db_select('user_visits', 'uv')
      ->fields('uv')
      ->condition('uv.uid', $uid)
      ->orderBy('uv.visit', 'DESC')
      ->range(0, $limit);
  $results = $query->execute();
  foreach ($results as $record) {
    $visitors[] = $record;
  }
  return $visitors;
}

/**
 * Check if user should be counted.
 */
function user_visits_is_hidden($user) {
  $intersect = array_intersect_key($user->roles, variable_get('user_visits_hidden_roles', array()));
  return count($intersect) ? TRUE : FALSE;
}

/**
 * Implements of hook_exit().
 */
function user_visits_exit() {
  global $user;
  $referer = $_SERVER['HTTP_REFERER'];

  // Don't count if user no has access to profile
  if (!user_access('access user profiles')) {
    return;
  }

  // Don't count anonymous-clicks.
  if (!$user->uid) {
    return;
  }

  // Don't count if role is hidden.
  if (user_visits_is_hidden($user)) {
    return;
  }

  // Try not to count clicks from the user's other profile pages.
  if (strpos($_SERVER['HTTP_REFERER'], arg(0) . '/' . arg(1))) {
    return;
  }
  // Record visits on user profile pages.
  elseif (arg(0) == 'user' && is_numeric(arg(1)) && !arg(2)) {
    // Don't count self-clicks.
    if ($user->uid != arg(1)) {
      // Count view.
      user_visits_count($user->uid, arg(1));
    }
  }
}

/**
 * Implements of hook_theme().
 */
function user_visits_theme($existing, $type, $theme, $path) {
  return array(
    'user_visits' => array(
      'variables' => array(
        'account'   => NULL,
        'timestamp' => NULL,
        'referer'   => NULL,
      ),
    ),
    'user_visits_total' => array(
      'variables' => array(
        'total'   => NULL,
      ),
    ),
  );
}

/**
 * Themeable function.
 */
function theme_user_visits($account, $timestamp = NULL, $referer = NULL) {
  $output  = '<div>' . "\n";
  $output .= theme('user_picture', $account);
  $output .= ' <div class="name">' . theme('username', $account) . '</div>' . "\n";
  if ($account['timestamp']) {
    $output .= $account['timestamp'] ? ' <div class="visit">' . t('!time ago', array('!time' => format_interval(REQUEST_TIME - $account['timestamp']))) . '</div>' . "\n" : '';
    $output .= $account['referer'] ? ' <div class="referer">' . t('Referer !link', array('!link' => l($account['referer'], $account['referer']))) . '</div>' . "\n" : '';
  }
  $output .= '</div>' . "\n";
  return $output;
}

/**
 * Themeable function.
 */
function theme_user_visits_total($total = 0) {
  $output = '<div class="user_visits_total">' . t('Total visits !total', array('!total' => $total['total'])) . '</div>';
  return $output;
}
