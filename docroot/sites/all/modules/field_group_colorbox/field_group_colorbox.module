<?php
/**
 * @file
 * Provide field groups for display of fields inside colorbox popups.
 */

define('FIELD_GROUP_COLORBOX_PAIR_ID', 'fieldgroup-colorbox-pair-id');
define('FIELD_GROUP_COLORBOX_GALLERY_TYPE', 'page');

/**
 * Implements hook_theme().
 */
function field_group_colorbox_theme() {
  return array(
    'field_group_colorbox_trigger' => array(
      'variables' => array(
        'pair_id' => NULL,
        'gallery' => NULL,
      ),
    ),
    'field_group_colorbox_popup' => array(
      'variables' => array(
        'pair_id' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_field_group_formatter_info().
 */
function field_group_colorbox_field_group_formatter_info() {
  return array(
    'display' => array(
      'colorbox_trigger' => array(
        'label' => t('Colorbox Trigger'),
        'description' => t('This fieldgroup renders a trigger for a colorbox popup.'),
        'instance_settings' => array(
          'pair_id' => FIELD_GROUP_COLORBOX_PAIR_ID,
          'gallery' => FIELD_GROUP_COLORBOX_GALLERY_TYPE,
          'gallery_custom' => '',
        ),
      ),
      'colorbox_popup' => array(
        'label' => t('Colorbox Popup'),
        'description' => t('This fieldgroup renders a colorbox popup.'),
        'instance_settings' => array(
          'pair_id' => FIELD_GROUP_COLORBOX_PAIR_ID,
        ),
      ),
    ),
  );
}

/**
 * Implements hook_field_group_format_settings().
 */
function field_group_colorbox_field_group_format_settings($group) {
  // Add a wrapper for extra settings to use by others.
  $form = array(
    'instance_settings' => array(
      '#tree' => TRUE,
      '#weight' => 2,
    ),
  );

  $field_group_types = field_group_formatter_info();
  $mode = $group->mode == 'form' ? 'form' : 'display';
  $formatter = $field_group_types[$mode][$group->format_type];
  $settings = $group->format_settings['instance_settings'];

  $pair_id = '';
  if (isset($formatter['instance_settings']['pair_id'])) {
    $pair_id = $formatter['instance_settings']['pair_id'];
  }
  if (isset($settings['pair_id'])) {
    $pair_id = $settings['pair_id'];
  }

  if ($group->format_type == 'colorbox_trigger' ||
      $group->format_type == 'colorbox_popup') {
    $form['instance_settings']['pair_id'] = array(
      '#title' => t('Trigger -> Popup pair ID.'),
      '#type' => 'machine_name',
      '#maxlength' => 32,
      '#default_value' => $pair_id,
      '#description' => t('Colorbox triggers will trigger popups that share the same "pair ID". It must only contain lowercase letters, numbers, dashes, and underscores.'),
      '#required' => FALSE,
      '#machine_name' => array(
        'exists' => 'field_group_colorbox_fake_exists',
        'error' => t('The pair ID field must only contain lowercase letters, numbers, dashes, and underscores.'),
        'replace_pattern' => '[^a-z0-9_-]+',
      ),
    );
  }

  if ($group->format_type == 'colorbox_trigger') {
    $gallery_options = array(
      'post' => t('Per post gallery'),
      'page' => t('Per page gallery'),
      'field_post' => t('Per field in post gallery'),
      'field_page' => t('Per field in page gallery'),
      'custom' => t('Custom'),
      'none' => t('No gallery'),
    );
    $gallery = $formatter['instance_settings']['gallery'];
    if (isset($settings['gallery'])) {
      $gallery = $settings['gallery'];
    }
    $form['instance_settings']['gallery'] = array(
      '#title' => t('Gallery (popup grouping)'),
      '#type' => 'select',
      '#default_value' => $gallery,
      '#options' => $gallery_options,
      '#description' => t('How Colorbox should group the popup galleries.'),
    );

    $gallery_custom = $formatter['instance_settings']['gallery_custom'];
    if (isset($settings['gallery_custom'])) {
      $gallery_custom = $settings['gallery_custom'];
    }
    $form['instance_settings']['gallery_custom'] = array(
      '#title' => t('Custom gallery'),
      '#type' => 'machine_name',
      '#maxlength' => 32,
      '#default_value' => $gallery_custom,
      '#description' => t('All popups on a page with the same gallery value (rel attribute) will be grouped together. It must only contain lowercase letters, numbers, dashes, and underscores.'),
      '#required' => FALSE,
      '#machine_name' => array(
        'exists' => 'field_group_colorbox_fake_exists',
        'error' => t('The custom gallery field must only contain lowercase letters, numbers, dashes, and underscores.'),
      ),
      '#states' => array(
        'visible' => array(
          ':input[name$="[format_settings][settings][instance_settings][gallery]"]' => array('value' => 'custom'),
        ),
      ),
    );
  }
  return $form;
}

/**
 * Fake function to allow us to use the "machine_name" form element.
 */
function field_group_colorbox_fake_exists() {
  return FALSE;
}

/**
 * Helper function to get an entity's type from a $form variable.
 */
function _field_group_colorbox_get_entity_type($form) {
  if (isset($form['#entity_type'])) {
    return $form['#entity_type'];
  }
  return FALSE;
}

/**
 * Helper function to get an entity's id from a $form variable.
 */
function _field_group_colorbox_get_entity_id($form) {
  $entity_type = _field_group_colorbox_get_entity_type($form);
  if ($entity_type) {
    $entity_type_info = entity_get_info($entity_type);
    if ($entity_type_info) {
      $entity_type_id = $entity_type_info['entity keys']['id'];
      // We now have the entity type and the name of the property
      // that "identifies" the identifier. Now we have to try to
      // dig up an entity.
      $entity = FALSE;
      if (isset($form['#groups'])) {
        foreach (array_keys($form['#groups']) as $group_name) {
          if ($entity) {
            break;
          }
          foreach ($form[$group_name] as $field) {
            if (isset($field['#object'])) {
              $entity = $field['#object'];
              break;
            }
          }
        }
        if (is_object($entity) && isset($entity->{$entity_type_id})) {
          return $entity->$entity_type_id;
        }
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_field_group_pre_render().
 */
function field_group_colorbox_field_group_pre_render(&$element, $group, &$form) {
  if ($group->format_type != 'colorbox_trigger' &&
      $group->format_type != 'colorbox_popup') {
    return;
  }
  $settings = $group->format_settings['instance_settings'];
  $pair_id = FIELD_GROUP_COLORBOX_PAIR_ID;
  if (isset($settings['pair_id'])) {
    $pair_id = $settings['pair_id'];
  }
  // This bit of weirdness is so we can keep track of how many
  // of these fieldgroup pairs have already appeared on the page.
  $static_var_name = 'field_group_colorbox_' . $pair_id;
  $delta = &drupal_static($static_var_name);
  // In some cases, an entity may be rendered individually and cached
  // indefinitely, so we will start off with a random number to reduce
  // the chances of a collision.
  if (!isset($delta)) {
    $delta = rand();
  }
  $current_pair_id = $pair_id . '-' . floor($delta);
  // The static variable won't fully increment until both members
  // of the pair have been rendered.
  $delta += 0.5;
  if ($group->format_type == 'colorbox_trigger') {
    $gallery = '';
    $gallery_type = FIELD_GROUP_COLORBOX_GALLERY_TYPE;
    if (isset($settings['gallery'])) {
      $gallery_type = $settings['gallery'];
    }
    // For the "post" galleries, we need to go to extraordinary lengths
    // to get the entity id.
    if ($gallery_type == 'post' || $gallery_type == 'field_post') {
      $entity_type = _field_group_colorbox_get_entity_type($form);
      $entity_id = _field_group_colorbox_get_entity_id($form);
      if ($entity_type && $entity_id) {
        $gallery = 'colorbox-gallery-' . $entity_type . '-' . $entity_id;
      }
    }
    // For the "page" galleries we just need the current path.
    elseif ($gallery_type == 'page' || $gallery_type == 'field_page') {
      $gallery = 'colorbox-gallery-' . str_replace('/', '-', current_path());
    }
    // For the custom galleries just use them as indicated.
    elseif ($gallery_type == 'custom' && isset($settings['gallery_custom'])) {
      $gallery = $settings['gallery_custom'];
    }
    // For the "field" galleries we add our unique "pair id".
    if ($gallery_type == 'field_post' || $gallery_type == 'field_page') {
      $gallery .= '-' . $pair_id;
    }
    // Finally render the trigger.
    $trigger = theme('field_group_colorbox_trigger', array(
      'pair_id' => $current_pair_id,
      'gallery' => $gallery,
    ));
    $element['#prefix'] = $trigger['prefix'];
    $element['#suffix'] = $trigger['suffix'];
    // Strip links from the trigger, since links within links cause
    // unpredictable browser and rendering behavior.
    $element['#post_render'][] = '_field_group_colorbox_strip_links';
  }
  // Render the popup.
  if ($group->format_type == 'colorbox_popup') {
    $popup = theme('field_group_colorbox_popup', array(
      'pair_id' => $current_pair_id,
    ));
    $element['#prefix'] = $popup['prefix'];
    $element['#suffix'] = $popup['suffix'];
    // Add our CSS
    $path = drupal_get_path('module', 'field_group_colorbox') . '/css/';
    $element['#attached']['css'][] = $path . 'field_group_colorbox.base.css';
    $element['#attached']['css'][] = $path . 'field_group_colorbox.theme.css';
  }
}

/**
 * A post_render function to strip links out of the contents of
 * the colorbox_trigger field group. This is needed because the
 * colorbox_trigger is wrapped in a link, and links within links
 * cause unpredictable results with browsers/rendering.
 */
function _field_group_colorbox_strip_links($markup, $element) {
  return preg_replace("/<\\/?a(\\s+.*?>|>)/", "", $markup);
}

/**
 * Theme function for trigger - should return prefix and suffix.
 */
function theme_field_group_colorbox_trigger($vars) {
  $href = 'href="?inline=true#' . $vars['pair_id'] . '"';
  $rel = ($vars['gallery']) ? ' rel="' . $vars['gallery'] . '"' : '';
  $classes = 'field-group-colorbox-trigger colorbox-inline';
  return array(
    'prefix' => '<a class="' . $classes . '" ' . $href . $rel . '>',
    'suffix' => '</a>',
  );
}

/**
 * Theme function for popup - should return prefix and suffix.
 */
function theme_field_group_colorbox_popup($vars) {
  // Add a wrapper and basic classes/ids for the popup itself. We'll use
  // the HTML5 hidden attribute to hide the wrapper completely. that way,
  // the content will not display here, but will still be visible when
  // Colorbox yanks out of the markup. For old browser we'll also include
  // a CSS file.
  $wrapper = '<div class="field-group-colorbox-wrapper" hidden>';
  $popup = '<div class="field-group-colorbox" id="' . $vars['pair_id'] . '">';
  return array(
    'prefix' => $wrapper . $popup,
    'suffix' => '</div></div>',
  );
}
