<?php
/**
 * @file
 * Google Books Filter Module for Drupal 7.0
 *
 * @author Darrell Ulm.
 *
 * Inspired by the BookPost (Open Library) module for
 * Drupal 6 by Aaron Rubinstein, and on the the OpenLibrary API for Drupal 6.
 *
 * The Google Books module is a filter module
 * that allows a user to insert rich Google Books
 * data into nodes via filters.
 *
 * The fields can be selected to be displayed globally.
 *
 * See the INSTALL.TXT file for specific information.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Holds the address of the books.google.com JSON call
 */
define('GOOGLE_BOOKS_EXTERN_JS', 'https://www.google.com/jsapi');

/*
 * Has the Google Books reader height default.
 */
define('GOOGLE_BOOKS_DEFAULT_READER_HEIGHT', '500');

/*
 * Has the Google Books reader width default.
 */
define('GOOGLE_BOOKS_DEFAULT_READER_WIDTH', '400');

/**
 * Handles filter tips callback for the google_books filter module.
 *
 * Callback for 'tips callback' within google_books_filter_info().
 *
 * @param object $filter
 *   The filter variable StdClass object.
 *
 * @param object $format
 *   Format of the filter StdClass object.
 *
 * @param bool $long
 *   Display this filter tip.
 *
 * @return string
 *   The translated help text for the filter.
 *
 * @see google_books_filter_info()
 */
function google_books_filter_tips($filter, $format, $long = FALSE) {
  if ($long) {
    return t('Put a Google Books search term between square brackets like this:
      [google_books:The Hobbit] or [google_books:9780618154012] or [google_books:Rucker+Software]
      and this will filter the input to replace with Google Books data
      and images from http://books.google.com');
  }
}


/**
 * Implements hook_filter_info().
 */
function google_books_filter_info() {
  $filters['google_books'] = array(
    'title' => t('Google Book'),
    'description' => t('Insert Book Information from Google Books'),
    'process callback' => 'google_books_filter_process',
    'settings callback' => 'google_books_filter_settings',
    'cache' => TRUE,
    'default settings' => array(
      'worldcat' => 0,
      'openlibrary' =>  0,
      'librarything' => 0,
      'image' => 0,
      'reader' => 0,
      'reader_height' => GOOGLE_BOOKS_DEFAULT_READER_HEIGHT,
      'reader_width' => GOOGLE_BOOKS_DEFAULT_READER_WIDTH,
      'image_height' => '',
      'image_width' => '',
      'bib_fields' => google_books_api_bib_field_array(),
    ),
    'tips callback' => 'google_books_filter_tips',
  );
  return $filters;
}


/**
 * Form constructor for google_books filter.
 *
 * Callback for 'settings callback' within google_books_filter_info().
 *
 * @param array $form
 *   The array of form elements.
 *
 * @param array &form_state
 *   State of the form information.
 *
 * @param object $filter
 *   The filter information in a StdClass object.
 *
 * @param object $format
 *   The format of the form in a StdClass object.
 *
 * @param array $defaults
 *   Default values array for form elements.
 *
 * @param array $filters
 *   The filters array containing index of objects, each a filter.
 *
 * @return array
 *   Returns the array of form settings for the filter setting page.
 *
 * @see _google_books_image_or_reader_valid_int_size()
 * @see google_books_filter_info()
 */
function google_books_filter_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  $settings['google_books'] = array(
    '#type' => 'fieldset',
    '#title' => t('Google Books Filter'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $settings['google_books']['api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Google Books API Key'),
    '#size' => 60,
    '#maxlength' => 80,
    '#description' => t('Register your key at:') . ' ' . l(t('Google Code API Console'), 'https://code.google.com/apis/console'),
    '#default_value' => isset($filter->settings['google_books']['api_key']) ? $filter->settings['google_books']['api_key'] : '',
  );
  $settings['google_books']['bib_fields'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#title' => t('Google Books Data Fields'),
    '#required' => FALSE,
    '#size' => 20,
    '#options' => google_books_api_bib_field_array(),
    '#description' => t('Hold control to select multiple fields.
      Also by checking this you are agreeing that you have the rights to display any of the information that you are going to display.'),
    '#default_value' => isset($filter->settings['google_books']['bib_fields']) ? $filter->settings['google_books']['bib_fields'] : google_books_api_bib_field_array(),
  );

  $settings['google_books_link'] = array(
    '#type' => 'fieldset',
    '#title' => t('Google Books External Link Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => t('Turn on/off the links to external pages linking to book.'),
  );
  $settings['google_books_link']['worldcat'] = array(
    '#type' => 'checkbox',
    '#title' => t('Link to WorldCat'),
    '#default_value' => isset($filter->settings['google_books_link']['worldcat']) ? $filter->settings['google_books_link']['worldcat'] : $defaults['worldcat'],
  );
  $settings['google_books_link']['librarything'] = array(
    '#type' => 'checkbox',
    '#title' => t('Link to LibraryThing'),
    '#default_value' => isset($filter->settings['google_books_link']['librarything']) ? $filter->settings['google_books_link']['librarything'] : $defaults['librarything'],
  );
  $settings['google_books_link']['openlibrary'] = array(
    '#type' => 'checkbox',
    '#title' => t('Link to Open Library'),
    '#default_value' => isset($filter->settings['google_books_link']['openlibrary']) ? $filter->settings['google_books_link']['openlibrary'] : $defaults['openlibrary'],
  );

  $settings['google_books_image'] = array(
    '#type' => 'fieldset',
    '#title' => t('Google Books Image Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => t('Turn on/off the Google Books cover image and set the default size.
      Also by checking this you are agreeing that you have the rights to display any of the
      scanned book cover images that you are going to display.'),
  );
  $settings['google_books_image']['image'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include Google Books cover image'),
    '#default_value' => isset($filter->settings['google_books_image']['image']) ? $filter->settings['google_books_image']['image'] : $defaults['image'],
  );
  $settings['google_books_image']['image_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Image height'),
    '#size' => 4,
    '#maxlength' => 4,
    '#element_validate' => array('_google_books_image_or_reader_valid_int_size'),
    '#description' => t('Height of Google cover image'),
    '#default_value' => isset($filter->settings['google_books_image']['image_height']) ? $filter->settings['google_books_image']['image_height'] : $defaults['image_height'],
  );
  $settings['google_books_image']['image_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Image width'),
    '#size' => 4,
    '#maxlength' => 4,
    '#element_validate' => array('_google_books_image_or_reader_valid_int_size'),
    '#description' => t('Width of Google cover image'),
    '#default_value' => isset($filter->settings['google_books_image']['image_width']) ? $filter->settings['google_books_image']['image_width'] : $defaults['image_width'],
  );

  $settings['google_books_reader'] = array(
    '#type' => 'fieldset',
    '#title' => t('Google Books Reader Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => t('Turn on/off the Javascript Google Reader and set the default size.
      Also by checking this you are agreeing that you have the rights to display any of the
      scanned book content that you are going to display.'),
  );
  $settings['google_books_reader']['reader'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include the Google Books reader'),
    '#default_value' => isset($filter->settings['google_books_reader']['reader']) ? $filter->settings['google_books_reader']['reader'] : $defaults['reader'],
  );
  $settings['google_books_reader']['reader_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Reader height'),
    '#size' => 4,
    '#maxlength' => 4,
    '#element_validate' => array('_google_books_image_or_reader_valid_int_size'),
    '#description' => t('Height of Google reader'),
    '#default_value' => isset($filter->settings['google_books_reader']['reader_height']) ? $filter->settings['google_books_reader']['reader_height'] : $defaults['reader_height'],
  );
  $settings['google_books_reader']['reader_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Reader width'),
    '#size' => 6,
    '#maxlength' => 6,
    '#element_validate' => array('_google_books_image_or_reader_valid_int_size'),
    '#description' => t('Width of Google reader'),
    '#default_value' => isset($filter->settings['google_books_reader']['reader_width']) ? $filter->settings['google_books_reader']['reader_width'] : $defaults['reader_width'],
  );
  return $settings;
}

/**
 * Validation function for image sizes to check for positive int.
 *
 * @param array $element
 *   The form element to validate.
 *
 * @param array $form_state
 *   The state of the form.
 *
 * @see google_books_filter_settings
 */
function _google_books_image_or_reader_valid_int_size($element, &$form_state) {
  $image_size_parameter = trim($element['#value']);
  $element_title = $element['#title'];
  if ((!is_numeric($image_size_parameter) || intval($image_size_parameter) < 1) && !empty($image_size_parameter)) {
    form_error($element, t('@title option must contain a valid value. You may either leave the numeric field empty or enter a value greater than 0. For example 75 or 100 or 400.', array('@title' => $element_title)));
  }
}


/**
 * This is the main filter callback process for the google book filter module.
 *
 * Stated @ api.drupal.org hook_filter_FILTER_process is not really a hook.
 *
 * @param string $text
 *   Text to match.
 *
 * @param object $filter
 *   The filter as information stdClass object.
 *
 * @param object $format
 *   The text format type stdClass object.
 *
 * @param string $langcode
 *   The language code.
 *
 * @param bool $cache
 *   TRUE if cachable, FALSE if not.
 *
 * @param string $cache_id
 *   The ID of the cache.
 *
 * @return string
 *   Returns string of the filtered HTML for google_books.
 *
 * @see google_books_filter_info()
 */
function google_books_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  preg_match_all('/\[google_books:(.*)\]/', $text, $match);
  $tag = $match[0];
  $book = array();
  foreach ($match[1] as $i => $val) {
      $book[$i] = google_books_retrieve_bookdata(
      $match[1][$i],
      $filter->settings['google_books_link']['worldcat'],
      $filter->settings['google_books_link']['librarything'],
      $filter->settings['google_books_link']['openlibrary'],
      $filter->settings['google_books_image']['image'],
      $filter->settings['google_books_reader']['reader'],
      $filter->settings['google_books']['bib_fields'],
      $filter->settings['google_books_image']['image_height'],
      $filter->settings['google_books_image']['image_width'],
      $filter->settings['google_books_reader']['reader_height'],
      $filter->settings['google_books_reader']['reader_width'],
      $filter->settings['google_books']['api_key']
    );
  }
  $text = str_replace($tag, $book, $text);
  return $text;
}


/**
 * Gets the book data from Google Books and then displays it.
 *
 * This is the main filter processing function that does the work.
 *
 * @param string $id
 *   The full string pulled from inside the {{$id}} filter.
 *
 * @param string $worldcat_link
 *   True if setting for Worldcat link on.
 *
 * @param string $librarything_link
 *   True if setting for Library Thing link on.
 *
 * @param string $openlibrary_link
 *   True if setting for openlibrary is on.
 *
 * @param string $image_option
 *   Default param, display the book cover.
 *
 * @param string $reader_option
 *   Default param to display book reader Javascript.
 *
 * @param string $bib_field_select
 *   This is the array of True/False for the multi-field.
 *
 * @param string $image_height
 *   Default height of Image.
 *
 * @param string $image_width
 *   Default width of Image.
 *
 * @param string $reader_height
 *   Default Height of Reader.
 *
 * @param string $reader_width
 *   Default Width of Reader.
 *
 * @return string
 *   Returns the HTML data for google_books after filtering.
 *
 * @see google_books_filter_process
 */
function google_books_retrieve_bookdata(
  $id,
  $worldcat_link,
  $librarything_link,
  $openlibrary_link,
  $image_option,
  $reader_option,
  $bib_field_select,
  $image_height,
  $image_width,
  $reader_height,
  $reader_width,
  $api_key
) {
  // Get all the Google Books permissible book data fields.
  $bib_fields = google_books_api_bib_field_array();
  
  // Set the API Key to NULL if blank.
  $api_key = trim($api_key);
  $api_key = $api_key == "" ? NULL : $api_key;

  // Separate parameters by '|' delimiter and clean data.
  $params = explode("|", $id);
  array_map('filter_xss', $params);
  $search_string = $params[0];

  // Get the Google Books data.
  // Ignore if google_books_api_get_google_books_data returns NULL.
  $bib = google_books_api_get_google_books_data($search_string, 0, $api_key);
  if ($bib != NULL) {
    // Clean the data from Google.
    array_map('filter_xss', $bib);
    $bib['infoLink'] = check_url($bib['infoLink']);

    // Start the parameter handling.
    unset($params[0]);
    $params = array_map('trim', $params);

    // Set the fixed parameters explicitly (not the data fields).
    google_books_set_param($params, $worldcat_link, "worldcat", 1);
    google_books_set_param($params, $worldcat_link, "no_worldcat", 0);
    google_books_set_param($params, $openlibrary_link, "openlibrary", 1);
    google_books_set_param($params, $openlibrary_link, "no_openlibrary", 0);
    google_books_set_param($params, $librarything_link, "librarything", 1);
    google_books_set_param($params, $librarything_link, "no_librarything", 0);
    google_books_set_param($params, $page_curl, "pagecurl", 1);
    google_books_set_param($params, $page_curl, "no_pagecurl", 0);
    google_books_set_param($params, $title_link, "titlelink", 1);
    google_books_set_param($params, $title_link, "no_titlelink", 0);
    google_books_set_param($params, $image_on, "image", 1);
    google_books_set_param($params, $image_on, "no_image", 0);
    google_books_set_param($params, $reader_on, "reader", 1);
    google_books_set_param($params, $reader_on, "no_reader", 0);

    // Set the data field parameters explicitly.
    $bib_field_select_explicit = array();
    foreach ($bib_fields as $i => $field_name) {
      $bib_field_select_explicit[$i] = "";
      google_books_set_param($params, $bib_field_select_explicit[$i], $field_name, "$i");
      google_books_set_param($params, $bib_field_select_explicit[$i], "no_" . $field_name, FALSE);
    }

    // Merge the selected parameters with the global bib field options.
    // Use the and operation to default to off.
    foreach ($bib_field_select_explicit as $i => $field_name) {
      if ($bib_field_select_explicit[$i]) {
        $bib_field_select[$i] = $bib_field_select_explicit[$i];
      }
      if ($bib_field_select_explicit[$i] === FALSE) {
        unset($bib_field_select[$i]);
      }
    }

    // Start of the data handling.
    // If the data is sound then continue.
    if ($bib != FALSE) {
      // Get the ISBN.
      $isbn = isset($bib['identifier']) ? google_books_get_isbn($bib['identifier']) : "";
      // Build up the the selected bib fields fields.
      $selected_bibs = array();
      foreach ($bib_field_select as $i => $k) {
        $field = $bib_fields[$i];
        if (isset($bib[$field])) {
          $selected_bibs[$field] = $bib [$field];
        }
      }
    }

    // Build up remaining output to send to template.
    // Pass all information fields for themers future use.
    $vars['selected_bibs'] = $selected_bibs;
    $vars['isbn'] = $isbn;
    $vars['title_link'] = $title_link;
    $vars['title'] = isset($bib['title']) ? $bib['title'] : NULL;
    $vars['thumbnail'] = isset($bib['thumbnail']) ? $bib['thumbnail'] : NULL;
    $vars['embeddable'] = isset($bib['embeddable']) ? $bib['embeddable'] : NULL;
    $vars['info_link'] = isset($bib['infoLink']) ? $bib['infoLink'] : NULL;
    $vars['librarything_link'] = $librarything_link;
    $vars['openlibrary_link'] = $openlibrary_link;
    $vars['worldcat_link'] = $worldcat_link;
    $vars['image_height'] = $image_height;
    $vars['image_width'] = $image_width;
    $vars['reader_height'] = $reader_height;
    $vars['reader_width'] = $reader_width;
    $vars['image_option'] = $image_option;
    $vars['image_on'] = $image_on;
    $vars['page_curl'] = $page_curl;
    $vars['reader_option'] = $reader_option;
    $vars['reader_on'] = $reader_on;

    // Send the variables to the theme.
    $output = theme('google_books_aggregate', $vars);
    return $output;
  }
  else {
    // Nothing found so return empty string.
    return "";
  }
}


/**
 * Take a string of book identifiers, and choose one.
 *
 * @param string $identifiers
 *   Takes a string of IDs delimited by '|' characters.
 *
 * @return string
 *   This is the ISBN selected.
 */
function google_books_get_isbn($identifiers) {
  // Pull an ISBN if we have it, prefer the last
  // which should be an ISBN 13 although may be something else.
  $identifier_list = explode("|", $identifiers);
  $num_of_identifiers = count($identifier_list);
  $isbn = trim($identifier_list[$num_of_identifiers - 1]);
  return is_numeric($isbn) ? $isbn : "";
}


/**
 * Takes book field data and makes it a link if it address present.
 *
 * @param string $address
 *   The biblio field string, which might be an address.
 *
 * @return string
 *   Returns an HTML <a></a> link if there is a valid address in $address.
 */
function google_books_make_html_link($address) {
  if (valid_url($address, $absolute = TRUE)) {
    return l(t('link'), $address, array('attributes' => array('rel' => 'nofollow', 'target' => '_blank')));
  }
  return check_plain($address);
}

/**
 * Implements hook_init().
 */
function google_books_init() {
  $js_options = array(
    'type' => 'external',
    'group' => JS_THEME,
  );
  drupal_add_js(GOOGLE_BOOKS_EXTERN_JS, $js_options);
  $css_options = array(
    'type' => 'file',
    'group' => CSS_THEME,
  );
  drupal_add_css(drupal_get_path('module', 'google_books') . "/google_books.css", $css_options);
}


/**
 * Sets a parameter variable by reference based on presence in array.
 *
 * @param array $params
 *   The parameter array.
 *
 * @param int|string $flag_var
 *   The parameter variable to set.
 *
 * @param string $value
 *   The var to find in the array (needle).
 *
 * @param int|bool $set
 *   What $flag_var will be set to if TRUE.
 */
function google_books_set_param($params, &$flag_var, $value, $set) {
  if (in_array($value, $params) === TRUE) {
    $flag_var = $set;
  }
}


/**
 * Implements hook_theme().
 */
function google_books_theme() {
  // Return the array describing the template name and vars.
  return array(
    // The main theme template google_books.tpl.php
    'google_books_aggregate' => array(
      'template' => 'google_books',
      'arguments' => array('parameter' => NULL),
    ),
    // Theme function to print biblio fields.
    'google_books_biblio' => array(
      'variables' => array(),
    ),
  );
}


/**
 * Implements hook_preprocess_HOOK().
 *
 * @param array $vars
 *   An associative array containing:
 *   - title_anchor: Theme variable with title anchor.
 *   - title_link: Should title be on or off.
 *   - info_link: The cleaned link to the google information page.
 *   - title: The text title.
 *   - isbn: The ISBN if it exists for this Google Book.
 *   - worldcat: Output link to WorldCat data on this book.
 *   - worldcat_link: True or false to display WorldCat link.
 *   - librarything: Output link to LibraryThing data on this book.
 *   - librarything_link: True or false to display LibraryThing link.
 *   - openlibrary: Output link to OpenLibrary data on this book.
 *   - openlibrary_link: True or false to display OpenLibrary link.
 *   - book_image: Theme output <img tag to theme output.
 *   - image_option: Global option for image on or off.
 *   - image_on: Per book option for image on or off.
 *   - thumbnail: The cleaned image thumbnail URL.
 *   - page_curl: Per book option to turn on/off page curl for image.
 *   - reader_height: Option for reader height, per book.
 *   - reader_width: Option for reader width, per book.
 *   - image_height: Option for image height, per book.
 *   - image_width: Option for image width, per book.
 *   - google_books_js_string: Per book Google Books javascript.
 *   - reader_option: Global option for Google Books reader on/off.
 *   - reader_on: Per book option for Google Books reader on/off.
 *   - embeddable: From Google, check if technology and licensing allows embed.
 *   - book_data_array: From theme function, build the list of biblio data.
 *   - selected_bibs: Array of biblio elements selected to include.
 *   - bib_data: Final biblio data to display generated by theme function.
 *
 * @see theme_google_books_biblio()
 * @see google_books_make_html_link()
 */
function google_books_preprocess_google_books_aggregate(&$vars) {
  // Build the main title with a link.
  $vars["title_anchor"] = "";
  if ($vars["title_link"] !== 0 && isset($vars["info_link"]) && isset($vars["title"])) {
    $vars["title_anchor"] = l($vars["title"], $vars["info_link"], array('attributes' => array('rel' => 'nofollow', 'target' => '_blank')));
  }

  // Show the book links if any are found. Not checked for ISBN validity.
  $isbn = $vars["isbn"];
  if (!empty($isbn) || TRUE) {
    $vars["worldcat"] = "";
    if ($vars["worldcat_link"]) {
      $vars["worldcat"] = l(t('WorldCat'), check_url("http://worldcat.org/isbn/" . $isbn), array('attributes' => array('rel' => 'nofollow', 'target' => '_blank')));
    }
    $vars["librarything"] = "";
    if ($vars["librarything_link"]) {
      $vars["librarything"] = l(t('LibraryThing'), check_url("http://librarything.com/isbn/" . $isbn), array('attributes' => array('rel' => 'nofollow', 'target' => '_blank')));
    }
    $vars["openlibrary"] = "";
    if ($vars["openlibrary_link"]) {
      $vars["openlibrary"] = l(t('OpenLibrary'), check_url("http://openlibrary.org/isbn/" . $isbn), array('attributes' => array('rel' => 'nofollow', 'target' => '_blank')));
    }
  }

  // Check if we need to process the image thumbnail, and setup.
  $vars["book_image"] = "";
  $image_option = $vars["image_option"];
  $image_on = $vars["image_on"];
  $thumbnail = $vars["thumbnail"];
  if (isset($thumbnail) && ($image_option == 1 || $image_on == 1) && $image_on !== 0) {
    $img_link = $thumbnail;
    if ($vars["page_curl"] == 1) {
      $img_link = str_replace("&edge=nocurl", "", $img_link);
      $img_link .= "&edge=curl";
    }
    if ($vars["page_curl"] == 0) {
      $img_link = str_replace("&edge=curl", "", $img_link);
    }
    // Setup the image array and call theme('image'.
    $vars["book_image"] = theme('image', array(
      'path' => $img_link,
      'alt' => $vars["title"],
      'title' => $vars["title"],
      'width' => $vars["image_width"],
      'height' => $vars["image_height"],
    ));
  }

  // Setup the book reader.
  if (trim($vars["reader_height"]) == '') {
    $vars["reader_height"] = GOOGLE_BOOKS_DEFAULT_READER_HEIGHT;
  }
  if (trim($vars["reader_width"]) == '') {
    $vars["reader_width"] = GOOGLE_BOOKS_DEFAULT_READER_WIDTH;
  }
  $vars["google_books_js_string"] = "";
  $reader_option = $vars["reader_option"];
  $reader_on = $vars["reader_on"];
  if (isset($vars["embeddable"]) && ($reader_option == 1 || $reader_on == 1) && $reader_on !== 0) {
    // Build the string for the google_books viewer.
    $vars["google_books_js_string"] = '
      google.load("books", "0");
      function initialize' . $isbn . '() {
        var viewer' . $isbn . ' = new google.books.DefaultViewer(document.getElementById("viewerCanvas' . $isbn . '"));
        viewer' . $isbn . '.load("ISBN:' . $isbn . '");
      }
      google.setOnLoadCallback(initialize' . $isbn . ');
      ';
  }

  // Setup the data array of biblio items.
  $vars["book_data_array"] = theme('google_books_biblio', $vars["selected_bibs"]);

  // Setup the list of biblio data.
  $processed_bibs = array();
  foreach ($vars["selected_bibs"] as $bib_index => $bib_value) {
    $bib_field_name = drupal_ucfirst(preg_replace('/[A-Z]/', ' $0', str_replace('_', ' ', $bib_index)));
    $bib_field_data = google_books_make_html_link($bib_value);
    $processed_bibs[$bib_field_name] = $bib_field_data;
  }
  $vars["bib_data"] = theme('google_books_biblio', $processed_bibs);
}


/**
 * Returns HTML for google_books.
 *
 * @param array $selected_bibs
 *   An associative array containing:
 *   - selected_bibs: Array of biblio: $index => $value defined in
 *     google_books_api_bib_field_array()
 *
 * @ingroup themeable
 */
function theme_google_books_biblio($selected_bibs) {
  $html_string = '<ul class="google_books_datafields">';
  foreach ($selected_bibs as $bib_field_name => $bib_field_data) {
    $html_string .= '<li><span class="google_books_field_name">'
      . $bib_field_name
      . '</span>: <span class="google_books_field_data">'
      . $bib_field_data
      . "</span></li>";
  }
  $html_string .= "</ul>";
  return $html_string;
}
