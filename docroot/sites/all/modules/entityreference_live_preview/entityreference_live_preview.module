<?php

/**
 * @file
 * Provides a live preview for the Entity Reference autocomplete widget.
 */

/**
 * Implements hook_field_widget_form_alter().
 */
function entityreference_live_preview_field_widget_form_alter(&$element, &$form_state, $context) {
  $supported_widgets = module_invoke_all('entityreference_live_preview_supported_widgets');

  if ($context['field']['type'] == 'entityreference'
      && in_array($context['instance']['widget']['type'], $supported_widgets)
      && !empty($context['instance']['widget']['settings']['entityreference_live_preview']['enabled'])) {
    $field_name = $context['field']['field_name'];

    $key = preg_replace('/[^-a-z0-9]/i', '-', "entityreference-live-preview--$field_name--{$context['langcode']}");
    if (empty($element['#multiple'])) {
      $key .= '--' . $context['delta'];
    }

    $entity_type = $context['instance']['entity_type'];
    $bundle = $context['instance']['bundle'];
    $output = array(
      '#weight' => 1,
      '#prefix' => '<div id="'. $key .'">',
      '#suffix' => '</div>',
    );

    $items = isset($form_state['values'][$field_name][$context['langcode']]) ? $form_state['values'][$field_name][$context['langcode']] : $context['items'];
    $deltas = empty($element['#multiple']) ? array($context['delta']) : array_keys($items);
    foreach ($deltas as $delta) {
      if (isset($items[$delta])) {
        $output[] = _entityreference_live_preview_render($entity_type, $bundle, $field_name, $items[$delta]['target_id']);
      }
    }
    $element['entityreference_live_preview'] = $output;

    switch ($context['instance']['widget']['type']) {
      case 'entityreference_autocomplete':
      case 'entityreference_autocomplete_deluxe':
        $element['target_id']['#ajax'] = array(
          'callback' => 'entityreference_live_preview_autocomplete_ajax_render',
          'wrapper' => $key,
        );
        break;

      case 'options_select':
        $element['#ajax'] = array(
          'callback' => 'entityreference_live_preview_select_ajax_render',
          'wrapper' => $key,
        );
        $element['#theme_wrappers'][] = 'entityreference_live_preview_select_wrapper';
        break;
    }
  }
}

function entityreference_live_preview_theme() {
  return array(
    'entityreference_live_preview_select_wrapper' => array(
      'render element' => 'element',
    ),
  );
}

function theme_entityreference_live_preview_select_wrapper($variables) {
  $element = $variables['element'];
  return $element['#children'] . render($element['entityreference_live_preview']);
}

function entityreference_live_preview_autocomplete_ajax_render($form, $form_state) {
  $parents = (array)$form_state['triggering_element']['#array_parents'];
  array_pop($parents);
  $parents[] = 'entityreference_live_preview';
  return drupal_array_get_nested_value($form, $parents);
}

function entityreference_live_preview_select_ajax_render($form, $form_state) {
  $parents = (array)$form_state['triggering_element']['#array_parents'];
  $parents[] = 'entityreference_live_preview';
  return drupal_array_get_nested_value($form, $parents);
}

/**
 * Implements hook_entityreference_live_preview_supported_widgets().
 *
 * @todo
 *   Find a better way to name this function.
 */
function entityreference_live_preview_entityreference_live_preview_supported_widgets() {
  return array(
    'entityreference_autocomplete',
    'options_select',

    // See https://www.drupal.org/node/1295034
    'entityreference_autocomplete_deluxe',
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for field_ui_field_edit_form().
 */
function entityreference_live_preview_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  $supported_widgets = module_invoke_all('entityreference_live_preview_supported_widgets');
  if (in_array($form['#instance']['widget']['type'], $supported_widgets)) {
    if (!empty($form_state['values']['instance']['widget']['settings']['entityreference_live_preview'])) {
      $settings = $form_state['values']['instance']['widget']['settings']['entityreference_live_preview'];
    }
    elseif (isset($form['#instance']['widget']['settings']['entityreference_live_preview'])) {
      $settings = $form['#instance']['widget']['settings']['entityreference_live_preview'];
    }
    else {
      $settings = array(
        'enabled' => FALSE,
        'preview_type' => 'target',
        'mode' => 'default',
      );
    }

    // Instances that were configured before preview_type was added won't have
    // this setting.  We default them to 'field' to keep the same behaviour.
    if (empty($settings['preview_type'])) {
      $settings['preview_type'] = 'field';
    }

    // Load the view modes for the appropriate entity type.
    if ($settings['preview_type'] == 'field') {
      // To preview the field, we use a view mode of the host entity.
      $entity_info = entity_get_info($form['#instance']['entity_type']);
    }
    else {
      // To preview the target entity, we use its own view modes.
      $entity_info = entity_get_info($form['#field']['settings']['target_type']);
    }
    $options = array();
    foreach ($entity_info['view modes'] as $key => $values) {
      $options[$key] = $values['label'];
    }

    $states = array(
      'visible' => array(
        ':input[name="instance[widget][settings][entityreference_live_preview][enabled]"]' => array('checked' => TRUE),
      ),
    );
    $form['instance']['widget']['settings']['entityreference_live_preview'] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#title' => t('Live preview settings'),
      'enabled' => array(
        '#type' => 'checkbox',
        '#title' => t('Enable'),
        '#description' => t('Select this to enable the live preview functionality for this field.'),
        '#default_value' => $settings['enabled'],
      ),
      'preview_type' => array(
        '#type' => 'radios',
        '#title' => t('Preview type'),
        '#options' => array(
          'target' => t('Preview the target entity.'),
          'field' => t('Preview the entity reference field.'),
        ),
        '#default_value' => $settings['preview_type'],
        '#states' => $states,
        '#ajax' => array(
          'callback' => 'entityreference_live_preview_type_ajax_callback',
          'wrapper' => 'entityreference-live-preview-mode-wrapper',
        ),
      ),
      'mode' => array(
        '#type' => 'select',
        '#title' => t('View mode'),
        '#description' => t('Select the view mode to be used for generating the live preview.'),
        '#options' => array('default' => t('Default')) + $options,
        '#default_value' => $settings['mode'],
        '#states' => $states,
        '#prefix' => '<div id="entityreference-live-preview-mode-wrapper">',
        '#suffix' => '</div>',
      ),
    );
    if ($settings['preview_type'] == 'field') {
      $form['instance']['widget']['settings']['entityreference_live_preview']['mode']['#description'] .= '<br />' . t('For field previews, please select a view mode of the <strong>referencing</strong> entity.');
    }
  }
}

function entityreference_live_preview_type_ajax_callback($form, $form_state) {
  return $form['instance']['widget']['settings']['entityreference_live_preview']['mode'];
}

/**
 * Renders a single item from an entity reference field.
 *
 * The item is defined by the provided $target_id and the entity type derived
 * from the field's target_type.  The entity to which the field is attached
 * does not need to exist yet; this function can be called while creating it.
 */
function _entityreference_live_preview_render($entity_type, $bundle, $field_name, $target_id) {
  $entity_info = entity_get_info($entity_type);
  $entity = (object) array(
    $entity_info['entity keys']['bundle'] => $bundle,
  );
  $field_info = field_info_field($field_name);
  $target_type = $field_info['settings']['target_type'];
  $instance_info = field_info_instance($entity_type, $field_name, $bundle);
  $display = $instance_info['widget']['settings']['entityreference_live_preview']['mode'];

  switch ($instance_info['widget']['settings']['entityreference_live_preview']['preview_type']) {
    case 'target':
      $entities = entity_load($target_type, array($target_id));
      foreach ($entities as $entity) {
        if (!entity_access('view', $target_type, $entity)) {
          return '';
        }
      }
      return !empty($entities) ? entity_view($target_type, $entities, $display) : '';

    case 'field':
    // Instances created before preview_type was added get the old behaviour.
    default:
      // The entityref_formatter module http://drupal.org/sandbox/katbailey/1361118
      // is a special case: if it receives fewer items to render than its
      // configured minimum, it will fill in the blanks from a view.  We don't want
      // that in this case, so we force it to use a minimum of 1.
      if ($instance_info['display'][$display]['type'] == 'entityref_formatter_list') {
        $display = $instance_info['display'][$display];
        $display['settings']['min_values'] = 1;
      }

      $item = array(
        'target_id' => $target_id,
        'target_type' => $target_type,
      );
      return field_view_value($entity_type, $entity, $field_name, $item, $display);
  }
}
