<?php

/**
 * @file
 * OKVideo Module.
 */

define('OKVIDEO_VISIBILITY_NOTLISTED', 0);
define('OKVIDEO_VISIBILITY_LISTED', 1);

/**
 * Implements hook_permission().
 */
function okvideo_permission() {
  return array(
    'administer okvideo settings' => array(
      'title' => t('Administer OKVideo module'),
      'description' => t('Change settings for the OKVideo module.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function okvideo_menu() {
  $items = array();

  $items['admin/config/media/okvideo'] = array(
    'title' => 'OKVideo',
    'description' => 'Administrative interface for OKVideo',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('okvideo_admin'),
    'access arguments' => array('administer okvideo settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Page callback/form for admin interface.
 */
function okvideo_admin() {
  $form = array();

  $form['okvideo_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Video ID'),
    '#description' => t('YouTube or Vimeo ID or URL'),
    '#default_value' => variable_get('okvideo_id', NULL),
    '#required' => TRUE,
  );
  $form['okvideo_vol'] = array(
    '#type' => 'textfield',
    '#title' => t('Volume'),
    '#description' => t('Must be between 0 and 100.'),
    '#default_value' => variable_get('okvideo_vol', 0),
    '#element_validate' => array('_okvideo_element_validate_integer_range'),
  );
  $form['okvideo_loop'] = array(
    '#type' => 'checkbox',
    '#title' => t('Loop'),
    '#description' => t('Loop the video.'),
    '#default_value' => variable_get('okvideo_loop', 1),
    '#return_value' => 1,
  );
  $form['okvideo_captions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Captions'),
    '#description' => t('Enable or disable captions (YouTube videos only)'),
    '#default_value' => variable_get('okvideo_captions', 0),
    '#return_value' => 1,
  );
  $form['okvideo_annotations'] = array(
    '#type' => 'checkbox',
    '#title' => t('Annotations'),
    '#description' => t('Toggle annotations.'),
    '#default_value' => variable_get('okvideo_annotations', FALSE),
    '#return_value' => TRUE,
  );
  $form['okvideo_autoplay'] = array(
    '#type' => 'checkbox',
    '#title' => t('Autoplay'),
    '#description' => t('Autoplay the video.'),
    '#default_value' => variable_get('okvideo_autoplay', TRUE),
    '#return_value' => TRUE,
  );
  $form['okvideo_hd'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hi-Definition'),
    '#description' => t('Only available for YouTube.'),
    '#default_value' => variable_get('okvideo_hd', 1),
    '#return_value' => 1,
  );
  $form['okvideo_adproof'] = array(
    '#type' => 'checkbox',
    '#title' => t('Ad Proof'),
    '#description' => t('Scale the youtube player larger than the browser to obscure YouTube ads.'),
    '#default_value' => variable_get('okvideo_adproof', FALSE),
    '#return_value' => TRUE,
  );

  // Visibility settings.
  $form['visibility'] = array(
    '#type' => 'fieldset',
    '#title' => t('Visibility settings'),
  );

  $options = array(
    OKVIDEO_VISIBILITY_NOTLISTED => t('All pages except those listed'),
    OKVIDEO_VISIBILITY_LISTED => t('Only the listed pages'),
  );

  $text = array(
    '%blog' => 'blog',
    '%blog-wildcard' => 'blog/*',
    '%front' => '<front>',
  );

  $description = t("Specify pages by using their paths. Enter one path per line. The '*' character is a wildcard. Example paths are %blog for the blog page and %blog-wildcard for every personal blog. %front is the front page.", $text);

  $form['visibility']['okvideo_visibility'] = array(
    '#type' => 'radios',
    '#title' => t('Show OKVideo on specific pages'),
    '#options' => $options,
    '#default_value' => variable_get('okvideo_visibility', OKVIDEO_VISIBILITY_NOTLISTED),
  );

  $form['visibility']['okvideo_pages'] = array(
    '#type' => 'textarea',
    '#title' => '<span class="element-invisible">' . t('Pages') . '</span>',
    '#default_value' => variable_get('okvideo_pages', ''),
    '#description' => $description,
  );

  $form['development'] = array(
    '#type' => 'fieldset',
    '#title' => t('Development settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['development']['okvideo_debug'] = array(
    '#type' => 'select',
    '#title' => t('Debug'),
    '#description' => t('If enabled, the development version of the library will load.'),
    '#default_value' => variable_get('okvideo_debug', 0),
    '#options' => array(
      'minified' => t('Disabled'),
      'source' => t('Enabled'),
    ),
  );

  return system_settings_form($form);
}

/**
 * Extra validation for OK Video.
 */
function _okvideo_element_validate_integer_range($element, &$form_state) {
  $value = $element['#value'];
  if ($value !== '' && (!is_numeric($value) || intval($value) != $value) || (intval($value) < 0 || intval($value) > 100)) {
    form_error($element, t('%name must be an integer between 0 and 100.', array('%name' => $element['#title'])));
  }
}

/**
 * Implements hook_preprocess_page().
 */
function okvideo_preprocess_page(&$variables) {

  // Check page visibility.
  if (!_okvideo_visible()) {
    return;
  }

  // Don't load on admin pages.
  if (!path_is_admin(current_path())) {
    if (($library = libraries_detect('okvideo')) && !empty($library['installed'])) {
      // Get debug setting.
      $debug = variable_get('okvideo_debug', 'minified');

      // Load OKVideo library.
      libraries_load('okvideo', $debug);

      // Get OKVideo settings.
      $settings = array();
      $settings['okvideo_id'] = variable_get('okvideo_id', NULL);
      $settings['okvideo_vol'] = intval(variable_get('okvideo_vol', 0));
      $settings['okvideo_loop'] = variable_get('okvideo_loop', TRUE);
      $settings['okvideo_captions'] = variable_get('okvideo_captions', FALSE);
      $settings['okvideo_annotations'] = variable_get('okvideo_annotations', FALSE);
      $settings['okvideo_autoplay'] = variable_get('okvideo_autoplay', TRUE);
      $settings['okvideo_hd'] = variable_get('okvideo_hd', TRUE);
      $settings['okvideo_adproof'] = variable_get('okvideo_adproof', FALSE);

      // Add settings to JS.
      if (!empty($settings)) {
        drupal_add_js(array('okvideo' => $settings), array('type' => 'setting'));
        drupal_add_js(drupal_get_path('module', 'okvideo') . '/okvideo.js');
      }
    }
  }
}

/**
 * Implements hook_libraries_info().
 */
function okvideo_libraries_info() {
  $libraries = array();
  $libraries['okvideo'] = array(
    'name' => 'OKVideo',
    'vendor url' => 'http://okfoc.us/okvideo/',
    'download url' => 'https://github.com/okfocus/okvideo/archive/master.zip',
    'version arguments' => array(
      'variants' => array(
        'source' => array(
          'file' => 'src/okvideo.js',
          // v2.3.2
          'pattern' => '/v(\d+\.+\d+\.+\d+)/',
        ),
        'minified' => array(
          'file' => 'sec/okvideo.min.js',
          'pattern' => '/v(\d+\.+\d+\.+\d+)/',
        ),
      ),
    ),
    'versions' => array(
      '2.3.2' => array(
        'variants' => array(
          'source' => array(
            'files' => array(
              'js' => array(
                'src/okvideo.js',
              ),
            ),
            // Without a variant callback, the variant is assumed to be
            // installed.
            'variant callback' => '_okvideo_libraries_variant_exists',
            'variant arguments' => array('src/okvideo.js'),
          ),
          'minified' => array(
            'files' => array(
              'js' => array(
                'src/okvideo.min.js',
              ),
            ),
            // Without a variant callback, the variant is assumed to be
            // installed.
            'variant callback' => '_okvideo_libraries_variant_exists',
            'variant arguments' => array('src/okvideo.min.js'),
          ),
        ),
      ),
    ),
    'version callback' => '_okvideo_libraries_get_version',
    'variant order' => array('minified', 'source'),
  );
  return $libraries;
}

/**
 * Libraries API variant callback.
 */
function _okvideo_libraries_variant_exists($library, $variant_name, $required_file) {
  return file_exists($library['library path'] . '/' . $required_file);;
}

/**
 * Determines the version of the okvideo library.
 *
 * This is used in case different variants of the library are shipped separately
 * and, thus, different variants can contain different versions.
 *
 * @param array $library
 *   An associative array containing all information about the library. The
 *   library is assumed to have the following non-standard keys:
 *   - variant order: An array of variant names, ordered from the most preferred
 *     variant to the least preferred.
 * @param array $options
 *   An associative array with the following keys:
 *   - variants: An array of options for libraries_get_version() keyed by
 *     variant name.
 */
function _okvideo_libraries_get_version(array &$library, $options = array()) {
  $versions = array();
  foreach ($library['variant order'] as $variant_name) {
    $variant = $library['version arguments']['variants'][$variant_name];
    // Use the libraries get version function to determine the version string.
    $versions[$variant_name] = libraries_get_version($library, $variant);
  }

  $versions = array_filter($versions, '_okvideo_libraries_filter_null_values');
  $version = array_unique($versions);
  $vcount = count($version);
  if ($vcount == 1) {
    unset($library['error']);
    unset($library['error message']);
    return array_shift($version);
  }
  elseif ($vcount > 1) {
    $output = array();
    foreach ($versions as $name => $v) {
      $output[] = t('@name (@v)', array(
        '@name' => $name,
        '@v' => $v,
      ));
    }

    $library['error'] = t('inconsistent versions');
    $library['error message'] = t('The variants of this library returned inconsistent versions: @variant_info', array(
      '@variant_info' => implode(', ', $output),
    ));
  }
}

/**
 * Determines if an item is empty or not.
 *
 * @param string $item
 *   A version number string.
 *
 * @return bool
 *   Whether the $item's value is empty or not.
 */
function _okvideo_libraries_filter_null_values($item) {
  return !empty($item);
}

/**
 * Function that checks visibility based on current path.
 *
 * Returns TRUE or FALSE whether should be visible or not.
 */
function _okvideo_visible() {
  $page_match = FALSE;

  $pages = drupal_strtolower(variable_get('okvideo_pages', ''));
  $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
  $page_match = drupal_match_path($path, $pages);
  if ($path != $_GET['q']) {
    $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
  }
  $page_match = !(variable_get('okvideo_visibility', OKVIDEO_VISIBILITY_NOTLISTED) xor $page_match);

  return $page_match;
}
