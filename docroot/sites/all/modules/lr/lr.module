<?php
/**
 * @file
 */

/**
 * Implements hook_block_info().
 * @return array
 */
function lr_block_info() {
  $blocks = array();

  $blocks['lr_balance'] = array(
    'info' => t('Liberty Reserve balance'),
    'cache' => DRUPAL_NO_CACHE
  );
  $blocks['lr_history'] = array(
    'info' => t('Liberty Reserve history'),
    'cache' => DRUPAL_NO_CACHE
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 * @param string $delta
 * @return array
 */
function lr_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'lr_balance':
      $block['subject'] = t('Liberty Reserve balance');
      $block['content'] = lr_balance_block();
      break;
    case 'lr_history':
      $block['subject'] = t('Liberty Reserve history');
      $block['content'] = lr_history_block();
      break;
  }

  return $block;
}

/**
 * LR balance block callback.
 * @return string
 */
function lr_balance_block() {
  drupal_add_js(drupal_get_path('module', 'lr') . '/js/lr.js');
  $output = '';

  $output .= '<div id="lr-account">Account: ' . variable_get('lr_account_number') . '</div>';
  $output .= '<div id="lr-balance">Balance: </div>';

  return $output;
}

/**
 * LR history block callback.
 * @return string
 */
function lr_history_block() {
  // connect to lr
  $api_agent = lr_account_connect();

  // lr history transaction
  $from = date('Y-m-d H:i:s', time() - (31 * 24 * 60 * 60));
  $to = date('Y-m-d H:i:s');
  $history = $api_agent->history($from, $to);
  krsort($history);

  $headers = array();
  $checked_date = array();
  $amount_by_date = array();
  $balance_by_date = array();
  $sale_by_date = array();
  $fee_by_date = array();
  $i = 0;
  foreach ($history as $transaction) {
    $date = date('d.m.y', strtotime($transaction->Date));
    if (!in_array($date, $checked_date)) {
      $checked_date[] = $date;
      $amount_by_date[$date] = $transaction->Amount;
      $balance_by_date[$date] = $transaction->Balance;
      $sale_by_date[$date] = 1;
      $fee_by_date[$date] = $transaction->Fee;
      $headers[$date] = $date;
    }
    else {
      $amount_by_date[$date] += $transaction->Amount;
      $balance_by_date[$date] = $transaction->Balance;
      $sale_by_date[$date] += 1;
      $fee_by_date[$date] += $transaction->Fee;
    }
    $i++;
  }
  $rows = array(
    array_values($amount_by_date),
    array_values($balance_by_date),
    array_values($sale_by_date),
    array_values($fee_by_date)
  );
  $headers = array_values($headers);
  $columns = array('Amount', 'Balance', 'Sales', 'Fee');

  $setting = array();
  $setting['chart']['history'] = array(
    'header' => $headers,
    'rows' => $rows,
    'columns' => $columns,
    'chartType' => 'LineChart',
    'containerId' => 'lr_history_chart',
    'options' => array(
      'curveType' => "function",
      'forceIFrame' => FALSE,
      'title' => 'Amount / Balance / Sales / Fee per day',
      'width' => 600,
      'height' => 400
    )
  );

  //Draw it.
  draw_chart($setting);
  $output = '';
  $output .= '<div id="lr_history_chart"></div>';
  $output .= '<div id="lr_history_table"></div>';
  return $output;
}

/**
 * Implement hook_block_configure().
 * @param string $delta
 * @return array
 */
function lr_block_configure($delta = '') {
  $form = array();
  switch ($delta) {
    case 'lr_balance':
      $form['lr_account_number'] = array(
        '#type' => 'textfield',
        '#title' => t('Account number'),
        '#default_value' => variable_get('lr_account_number', ''),
        '#required' => TRUE
      );
      $form['lr_api_name'] = array(
        '#type' => 'textfield',
        '#title' => t('API name'),
        '#default_value' => variable_get('lr_api_name', ''),
        '#required' => TRUE
      );
      $form['lr_security_word'] = array(
        '#type' => 'password',
        '#title' => t('Security word'),
        '#default_value' => variable_get('lr_security_word', ''),
        '#required' => TRUE
      );
      $form['lr_currency'] = array(
        '#type' => 'textfield',
        '#title' => t('Currency'),
        '#default_value' => variable_get('lr_currency', 'Usd'),
        '#required' => TRUE
      );
      break;
  }
  return $form;
}

/**
 * Implement hook_block_save().
 * @param string $delta
 * @param array $edit
 */
function lr_block_save($delta = '', $edit = array()) {
  if ($delta == 'lr_balance') {
    variable_set('lr_account_number', $edit['lr_account_number']);
    variable_set('lr_api_name', $edit['lr_api_name']);
    variable_set('lr_security_word', $edit['lr_security_word']);
    variable_set('lr_currency', $edit['lr_currency']);
  }
}

/**
 * Implement hook_menu().
 */
function lr_menu() {
  $items = array();

  $items['lr/%'] = array(
    'title' => 'Liberty Reverse callback',
    'page arguments' => array(1),
    'page callback' => 'lr_ajax_block_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Ajax callback for balance and history block.
 * @param $op
 * @return mixed
 */
function lr_ajax_block_callback($op) {
  if (!in_array($op, array('balance', 'history'))) {
    return;
  }
  $lr_account = lr_account_info();

  $output = array(
    'account_number' => $lr_account['lr_account_number'],
    'currency' => $lr_account['lr_currency'],
  );

  $api_agent = lr_account_connect();

  switch ($op) {
    case 'balance':
      $output['balance'] = $api_agent->balance($lr_account['lr_currency']);
      break;
    case 'history':
      $from = date('Y-m-d H:i:s', time() - (31 * 24 * 60 * 60));
      $to = date('Y-m-d H:i:s');
      $history = $api_agent->history($from, $to);
      $output['history'] = $history;
      break;
  }

  drupal_add_http_header('Content-Type', 'application/json; charset=utf-8');
  print json_encode($output);
  exit();
}

/**
 * Authenticate to Liberty Reverse serive.
 * @return JsonApiAgent|NvpApiAgent|SoapApiAgent|XmlApiAgent
 */
function lr_account_connect() {
  $lr_account = lr_account_info();
  module_load_include('php', 'lr', 'includes/ApiAgent');
  $auth = new Authentication($lr_account['lr_account_number'], $lr_account['lr_api_name'], $lr_account['lr_security_word']);
  $api_agent = ApiAgentFactory::createApiAgent(ApiAgentFactory::JSON, $auth);
  return $api_agent;
}

/**
 * Get LR account info
 * @return array
 */
function lr_account_info() {
  return array(
    'lr_account_number' => variable_get('lr_account_number', ''),
    'lr_api_name' => variable_get('lr_api_name', ''),
    'lr_security_word' => variable_get('lr_security_word', ''),
    'lr_currency' => variable_get('lr_currency', 'Usd'),
  );
}