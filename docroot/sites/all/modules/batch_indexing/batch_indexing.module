<?php
/**
 * @file
 * Rebuild the search index in a batch.
 */

/**
 * Implements hook_menu().
 */
function batch_indexing_menu() {
  $items['admin/config/search/settings/build'] = array(
    'title' => 'Index remaining items immediately',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('batch_indexing_start_confirm'),
    'access arguments' => array('administer search'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function batch_indexing_form_search_admin_settings_alter(&$form, &$form_state, $form_id) {
  $stats = _batch_indexing_search_status();

  $form['status']['batch_indexing'] = array(
    '#type' => 'submit',
    '#value' => t('Index remaining items immediately'),
    '#submit' => array('batch_indexing_settings_form_submit'),
    '#disabled' => ($stats['remaining'] == 0),
  );
}

/**
 * Implements submit handler, that sends the user to the confirmation page
 */
function batch_indexing_settings_form_submit(&$form, &$form_state) {
  $form_state['redirect'] = 'admin/config/search/settings/build';
}

/**
 * Implements menu callback for the confirmation page.
 */
function batch_indexing_start_confirm() {
  return confirm_form(array(), t('Are you sure you want to build the search index now?'), 'admin/config/search/settings', t('This will take a while and will have a performance impact on your server and should usually be done step by step during cron runs. This should only be used on development servers, during off-hours or in an emergency.'), t('Start building the index'), t('Cancel'));
}

/**
 * Implements submit handler for the confirmation page.
 */
function batch_indexing_start_confirm_submit(&$form, &$form_state) {
  if ($form['confirm']) {
    // Start the batch.
    $batch = array(
      'title' => t('Building search index'),
      'progress_message' => t('Processing.'),
      'finished' => 'batch_indexing_finished',
      'operations' => array(
        array('batch_indexing_do_batch', array()),
      ),
    );
    batch_set($batch);

    // Go back to the settings page when ready.
    $form_state['redirect'] = 'admin/config/search/settings';
  }
}

/**
 * Implements batch operation; do a chunk of indexing work.
 *
 * @see search_cron()
 */
function batch_indexing_do_batch(&$context) {
  if (empty($context['sandbox'])) {
    $stats = _batch_indexing_search_status();
    $context['sandbox']['max'] = $stats['remaining'];
  }

  foreach (variable_get('search_active_modules', array('node', 'user')) as $module) {
    module_invoke($module, 'update_index');
  }

  search_update_totals();

  $stats = _batch_indexing_search_status();
  $context['message'] = format_plural($stats['remaining'], 'There is 1 item left to index.', 'There are @count items left to index.');
  if ($stats['remaining'] == 0) {
    $context['finished'] = 1;
    $context['results'] = array($context['sandbox']['max']);
  }
  else {
    $context['finished'] = 1 - $stats['remaining'] / $context['sandbox']['max'];
  }
}

/**
 * Finish the batch, called when the indexing batch finishes.
 */
function batch_indexing_finished($success, $results, $operations) {
  if ($success) {
    $message = t('Finished batch_indexinging @results items successfully.', array('@results' => $results[0]));
  }
  else {
    $message = t('Finished with an error.');
  }
  drupal_set_message($message);
}

/**
 * Gather status information about the search index.
 *
 * @see search_admin_settings()
 */
function _batch_indexing_search_status() {
  $result = array(
    'remaining' => 0,
    'total' => 0,
  );
  foreach (variable_get('search_active_modules', array('node', 'user')) as $module) {
    if ($status = module_invoke($module, 'search_status')) {
      $result['remaining'] += $status['remaining'];
      $result['total'] += $status['total'];
    }
  }
  return $result;
}
