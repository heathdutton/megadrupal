<?php

/**
 * Implements hook_apachesolr_field_mappings_alter().
 */
function apachesolr_geo_apachesolr_field_mappings_alter(&$mappings, $entity_type) {
  // Stop on broken geofield implementation.
  $mappings['geofield']['indexing_callback'] = 'apachesolr_geo_geofield_indexing_callback';
  $mappings['geofield']['query types'] = array('apachesolr_geo');
  $mappings['geofield']['map callback'] = 'apachesolr_geo_map_callback';
  $mappings['geofield']['index_type'] = 'location';
}

/**
 * Callback that converts a geo field into an array
 * For every multivalued value we also add a single value to be able to
 * use geolocation filters.
 */
function apachesolr_geo_geofield_indexing_callback($entity, $field_name, $index_key, $field_info) {
  $fields = array();
  if (!empty($entity->{$field_name})) {
    $field = $entity->$field_name;
    list($lang, $values) = each($field);

    for ($i = 0; $i < count($values); $i++) {
      if (!empty($values[$i]['lat'])) {
        $fields[] = array(
          'key' => $index_key,
          'value' => apachesolr_geo_geofield_latlon($values[$i]),
        );

        // Only store the first value of the field in a singular index
        if ($i == 0) {
          $singular_field_info = $field_info;
          $singular_field_info['multiple'] = FALSE;
          $single_key = apachesolr_index_key($singular_field_info);
          $fields[] = array(
            'key' => $single_key,
            'value' => apachesolr_geo_geofield_latlon($values[$i]),
          );
          // Set a boolean so we can filter based on presence of a geofield:
          $fields[] = array(
            'key' => apachesolr_geo_field_boolean($field_name),
            'value' => TRUE,
          );
        }
      }
    }
  }
  return $fields;
}

/**
 * Restrict a solr search to results that have populated a specific geofield.
 */
function apachesolr_geo_restrict_query_by_field($query, $field) {
  $query->addParam('fq', apachesolr_geo_field_boolean($field) . ':true');
}

/**
 * Given a field name, build a solr-ready boolean field name consistently.
 */
function apachesolr_geo_field_boolean($field_name) {
  return "bs_" . $field_name . "_isset";
}
/**
 * Helper function to turn a latlon array into a solr location string.
 */
function apachesolr_geo_geofield_latlon($value) {
  return $value['lat'] . ',' . $value['lon'];
}

/**
 * Implements hook_facetapi_query_types().
 */
function apachesolr_geo_facetapi_query_types() {
  return array(
    'apachesolr_geo' => array(
      'handler' => array(
        'class' => 'FacetapiApachesolrGeoQueryType',
        'adapter' => 'apachesolr',
      ),
    ),
  );
}

/**
 * Map of the facet labels.
 *
 * @param array $values
 * @param array $options
 * @return type
 */
function apachesolr_geo_map_callback(array $values, array $options) {
  $map = array();
  foreach ($values as $key) {
    $map[$key] = substr($key, 1) . 'km';
  }
  return $map;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function apachesolr_geo_form_apachesolr_search_page_settings_form_alter(&$form, &$form_state, $form_id) {
  apachesolr_geo_add_geospatial_form_elements($form, $form['search_page']['#value']['settings']);
  array_unshift($form['#submit'], 'apachesolr_geo_attach_settings');
}

/**
 * @param $form
 * @param $settings
 */
function apachesolr_geo_add_geospatial_form_elements(&$form, $settings) {
  $field_options = array();
  $env = apachesolr_environment_load('solr');
  $target_entities = $env['index_bundles'];
  foreach ($target_entities as $entity => $bundles) {
    $fields = apachesolr_geo_fieldmap_options($entity, NULL, TRUE, 'geofield');
    $field_options = array_merge($field_options, $fields);
  }
  $form['geospatial'] = array(
    '#title' => 'Geospatial Search',
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => !empty($settings['apachesolr_geo_proximity_filter']) ? FALSE : TRUE,
    '#tree' => TRUE,
  );
  $form['geospatial']['apachesolr_geo_proximity_filter'] = array(
    '#title' => 'Enable Proximity Filter',
    '#type' => 'checkbox',
    '#default_value' => isset($settings['apachesolr_geo_proximity_filter']) ? $settings['apachesolr_geo_proximity_filter'] : FALSE,
  );
  $form['geospatial']['proximity_filter_settings'] = array(
    '#title' => 'Proximity Filter Options',
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#tree' => TRUE,
    '#states' => array(
      'visible' => array(
        ':input[name="geospatial[apachesolr_geo_proximity_filter]"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['geospatial']['proximity_filter_settings']['apachesolr_geo_geofield'] = array(
    '#type' => 'select',
    '#title' => 'Geolocation Field',
    '#options' => $field_options,
    '#default_value' => isset($settings['apachesolr_geo_geofield']) ? $settings['apachesolr_geo_geofield'] : NULL,
    '#states' => array(
      'required' => array(
        ':input[name="geospatial[apachesolr_geo_proximity_filter]"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['geospatial']['proximity_filter_settings']['apachesolr_geo_center'] = array(
    '#type' => 'textfield',
    '#title' => 'Center Point',
    '#default_value' => isset($settings['apachesolr_geo_center']) ? $settings['apachesolr_geo_center'] : NULL,
    '#states' => array(
      'required' => array(
        ':input[name="geospatial[apachesolr_geo_proximity_filter]"]' => array('checked' => TRUE),
      ),
    ),
  );
  // Allow alteration of the input widget for the center point, so one can use
  // a geocoder if desired.
  drupal_alter('apachesolr_geo_center_form_element', $form['geospatial']['proximity_filter_settings']['apachesolr_geo_center'], $settings);
  $form['geospatial']['proximity_filter_settings']['apachesolr_geo_radius'] = array(
    '#type' => 'textfield',
    '#title' => 'Radius',
    '#default_value' => isset($settings['apachesolr_geo_radius']) ? $settings['apachesolr_geo_radius'] : NULL,
    '#states' => array(
      'required' => array(
        ':input[name="geospatial[apachesolr_geo_proximity_filter]"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['geospatial']['proximity_filter_settings']['apachesolr_geo_radius_units'] = array(
    '#type' => 'select',
    '#title' => 'Radius Units',
    '#default_value' => isset($settings['apachesolr_geo_radius_units']) ? $settings['apachesolr_geo_radius_units'] : 1,
    '#options' => apachesolr_geo_unit_options(),
    '#states' => array(
      'required' => array(
        ':input[name="geospatial[apachesolr_geo_proximity_filter]"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['geospatial']['proximity_filter_settings']['apachesolr_geo_expose'] = array(
    '#title' => 'Expose Filter on Search Page',
    '#type' => 'checkbox',
    '#default_value' => isset($settings['apachesolr_geo_expose']) ? $settings['apachesolr_geo_expose'] : FALSE,
  );
}

/**
 * Submission handler to push usable geo search settings to search pages.
 */
function apachesolr_geo_attach_settings($form, &$form_state) {
  $form_state['values']['advanced']['apachesolr_geo_proximity_filter'] = $form_state['values']['geospatial']['apachesolr_geo_proximity_filter'];
  $form_state['values']['advanced'] = array_merge($form_state['values']['advanced'], $form_state['values']['geospatial']['proximity_filter_settings']);
  $delta = 'apachesolr_geo_center';
  drupal_alter('apachesolr_geo_save_query_settings', $form_state['values']['advanced'], $delta);
}

function apachesolr_geo_prepare_values($settings) {
  $return = array();
  $return['distance'] = $settings['apachesolr_geo_radius'] * $settings['apachesolr_geo_radius_units'];
  $return['center'] = $settings['apachesolr_geo_center'];
  $return['field'] = 'locm_' . $settings['apachesolr_geo_geofield'];
  if ($settings['apachesolr_geo_expose']) {
    $args = apachesolr_geo_get_args();
    if ($args) {
      if (isset($args['center'])) {
        $delta = 'center';
        drupal_alter('apachesolr_geo_save_query_settings', $args, $delta);
        if (!empty($args['center'])) {
          $return['center'] = $args['center'];
        }
      }
    }
  }
  return $return;
}

/**
 * Implements hook_apachesolr_query_alter().
 */
function apachesolr_geo_apachesolr_query_alter($query) {
  $context = $query->getContext();
  if (isset($context['page_id'])) {
    $page = apachesolr_search_page_load($context['page_id']);
    if (!empty($page['settings']['apachesolr_geo_proximity_filter'])) {
      $params = apachesolr_geo_prepare_values($page['settings']);
      $distance = $params['distance'];
      $center = $params['center'];
      $field = $params['field'];
      apachesolr_geo_proximity_filter($query, $center, $distance, $field);
    }
  }
}

/**
 * Add a proximity filter to an apachesolr query.
 * 
 * $query - an Apachesolr Query object
 * $center - String of the form {latitude}.{longitude}
 * $distance - Search radius in Kilometers
 * $field - The name of the geofield on the searched entities
 */
function apachesolr_geo_proximity_filter($query, $center, $distance, $field) {
  // If a blank center is given we do not add a proximity query.
  if (strlen($center)) {
    // Search center point.
    $query->addParam('pt', $center);

    // Set location field name.
    $query->addParam('sfield', $field);
    $query->addParam('fq', '{!geofilt sfield=' . $field . '}');

    // Set search radius.
    $query->addParam('d', $distance);
  }
}

/**
 * Simple helper function to make the unit array reusable.
 */
function apachesolr_geo_unit_options() {
  return array(
    '.001' => 'Meters',
    '1' => 'Kilometers',
    '0.0003048' => 'Feet',
    '1.609344' => 'Miles',
  );
}

/**
 * Add proximity search elements to the form.
 */
function apachesolr_geo_apachesolr_search_page_alter(&$build, $search_page) {
  if (!empty($search_page['settings']['apachesolr_geo_expose'])) {
    $build['geosearch'] = drupal_get_form('apachesolr_geo_exposed_search_form', $build, $search_page);
    // Move the results to the end:
    if (isset($build['search_results'])) {
      $results = $build['search_results'];
      unset($build['search_results']);
      $build['search_results'] = $results;
    }
  }
  
}

/**
 * Form for exposing geo proximity search to the user.
 */
function apachesolr_geo_exposed_search_form($form, &$form_state, $build, $search_page) {
  $form['#search_page'] = $search_page;
  $form['apachesolr_geo_center'] = array(
    '#type' => 'textfield',
    '#title' => 'Location',
    '#size' => 20,
    '#default_value' => isset($search_page['settings']['apachesolr_geo_center']) ? $search_page['settings']['apachesolr_geo_center'] : NULL,
  );
  // Allow alteration of the input widget for the center point, so one can use
  // a geocoder if desired.
  drupal_alter('apachesolr_geo_center_form_element', $form['apachesolr_geo_center'], $search_page['settings']);
  $geo_options = apachesolr_geo_get_args();
  if (isset($geo_options['center'])) {
    $form['apachesolr_geo_center']['#default_value'] = $geo_options['center'];
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );
  return $form;
}

/**
 * Submit handler for apachesolr_geo_exposed_search_form()
 * 
 * Adds a search string to the URL and redirects to trigger search.
 */
function apachesolr_geo_exposed_search_form_submit(&$form, &$form_state) {
  $redirect = $_GET['q'];
  $query_items = $_GET;
  unset ($query_items['q']);
  $query_items['geo'] = array();
  if (isset($form_state['values']['apachesolr_geo_center'])) {
    $query_items['geo']['center'] = $form_state['values']['apachesolr_geo_center'];
  }
  $form_state['redirect'] = array($redirect, array('query' => $query_items));
}


/**
 * Return field & property options for a given entity.
 */
function apachesolr_geo_fieldmap_options($entity_type, $entity_bundle = NULL, $flat = FALSE, $field_type = NULL) {
  $options = array('' => t('-- Select --'));

  $properties = entity_get_all_property_info($entity_type);
  if (isset($entity_bundle)) {
    $info = entity_get_property_info($entity_type);
    $properties = $info['properties'];
    if (isset($info['bundles'][$entity_bundle])) {
      $properties += $info['bundles'][$entity_bundle]['properties'];
    }
  }

  foreach ($properties as $key => $property) {
    $type = isset($property['type']) ? entity_property_extract_innermost_type($property['type']) : 'text';
    $is_entity = ($type == 'entity') || (bool) entity_get_info($type);
    // Leave entities out of this.
    if (!$is_entity) {
      if (!$flat && isset($property['field']) && $property['field'] && !empty($property['property info'])) {
        foreach ($property['property info'] as $sub_key => $sub_prop) {
          if ($field_type) {
            if ($properties[$key]['type'] == $field_type) {
              $options[$key] = $property['label'];
            }
          }
          else {
            $options[$property['label']][$key . ':' . $sub_key] = $sub_prop['label'];
          }
        }
      }
      else {
        if ($field_type) {
          if (isset ($properties[$key]['type']) && $properties[$key]['type'] == $field_type) {
            $options[$key] = $property['label'];
          }
        }
        else {
          $options[$key] = $property['label'];
        }
      }
    }
  }

  return $options;
}

/**
 * Helper function to pull in geo search arguments from URL.
 */
function apachesolr_geo_get_args() {
  $get = drupal_get_query_parameters();
  if (!empty($get['geo'])) {
    foreach($get['geo'] as &$item) {
      $item = rawurldecode($item);
    }
    return $get['geo'];
  }
  return FALSE;
}
