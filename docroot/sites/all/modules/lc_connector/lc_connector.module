<?php
// vim: set ts=2 sw=2 sts=2 et ft=php:

/**
 * @file
 * General module functionality
 */

/**
 * Since the integration code highly depends on the LiteCommerce version being
 * integrated, this Drupal module only forwards Drupal hooks into a
 * LiteCommerce doing the actual work. That way shop owners can upgrade both
 * LiteCommerce and the integration code at once via the LiteCommerce automatic
 * upgrade function within the shop back end.
 *
 * The back side of this is the use of complex wrapper functions for Drupal
 * hooks. To prevent possible issues, get rid of global variables and make the
 * interface easier to understand the wrapper logic is localized in PHP classes
 * with private and protected class methods and static fields.
 */

/**
 * Module initialization.
 *
 * The method 'invokeHookInit' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Module.php
 *
 * This method includes script which implements all callback hooks:
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Include/Callbacks.php
 *
 * @hook init
 */
function lc_connector_init() {
  return LCConnector_Handler::callSafely('Module', 'invokeHookInit');
}

/**
 * Navigation menu access point declaration.
 *
 * The method 'invokeHookMenu' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Module.php
 *
 * This method returns array of menus
 *
 * @hook   menu
 * @return array
 */
function lc_connector_menu() {
  return array(
    'admin/modules/lc_connector' => array(
      'title'            => 'LC Connector',
      'description'      => 'Settings for the LC connector module.',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('lc_connector_get_settings_form'),
      'access arguments' => array('administer users'),
      'file'             => 'lc_connector.admin.inc',
    ),
  ) + ((array) LCConnector_Handler::callSafely('Module', 'invokeHookMenu'));
}

/**
 * Modify admin area form for new widget.
 *
 * The method 'alterWidgetModifyForm' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Admin.php
 *
 * This method extends 'Add block' form to allow create specific blocks based on LiteCommerce widgets.
 *
 * @param array &$form
 *   Form description
 * @param array &$form_state
 *   Form state
 *
 * @hook form_FORM_ID_alter
 */
function lc_connector_form_block_add_block_form_alter(array &$form, array &$form_state) {
  return LCConnector_Handler::callSafely('Admin', 'alterWidgetModifyForm', array(&$form, &$form_state));
}

/**
 * Modify admin area form for existing widget.
 *
 * The method 'alterWidgetModifyForm' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Admin.php
 *
 * This method extends 'Modify block' form to allow modify specific blocks based on LiteCommerce widgets.
 *
 * @param array &$form
 *   Form description
 * @param array &$form_state
 *   Form state
 *
 * @hook form_FORM_ID_alter
 */
function lc_connector_form_block_admin_configure_alter(array &$form, array &$form_state) {
  return LCConnector_Handler::callSafely('Admin', 'alterWidgetModifyForm', array(&$form, &$form_state));
}

/**
 * Modify admin area form for widget delete confirmation.
 *
 * The method 'alterWidgetDeleteForm' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Admin.php
 *
 * This method adds a callback to process deleting custom block.
 *
 * @param array &$form
 *   Form description
 * @param array &$form_state
 *   Form state
 *
 * @hook form_FORM_ID_alter
 */
function lc_connector_form_custom_block_delete_alter(array &$form, array &$form_state) {
  return LCConnector_Handler::callSafely('Admin', 'alterWidgetDeleteForm', array(&$form, &$form_state));
}

/**
 * Change block definition before saving to the database.
 *
 * The method 'alterBlockInfo' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Admin.php
 *
 * This method changes block definition before saving to the database.
 *
 * @param array $blocks
 *   A multidimensional array of blocks keyed by the defining module and delta
 * @param string $theme
 *   The theme these blocks belong to
 * @param array $code_blocks
 *   The blocks as defined in hook_block_info() before being overwritten by the database data
 *
 * @hook block_info_alter
 */
function lc_connector_block_info_alter(array &$blocks, $theme, array $code_blocks) {
  return LCConnector_Handler::callSafely('Admin', 'alterBlockInfo', array(&$blocks, $theme, $code_blocks));
}

/**
 * Modify block content.
 *
 * The method 'setBlockContent' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Block.php
 *
 * This method set block content from LC (if needed).
 *
 * @param array &$data
 *   Data returned from the hook_block_view()
 * @param \stdClass $form_state
 *   Block object loaded from the database
 *
 * @hook block_view_alter
 */
function lc_connector_block_view_alter(&$data, \stdClass $block) {
  $settings = block_custom_block_get($block->delta);

  if (!empty($settings['lc_class']) && !LCConnector_Handler::callSafely('Block', 'setBlockContent', array(&$data, $block))) {
    $data['content'] = NULL;
  }
}

/**
 * Preprocess theme variables for a specific theme block.
 *
 * The method 'addCSSClass' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Block.php
 *
 * This method preprocesses theme variables for a specific theme block.
 *
 * @param array &$variables
 *   The variables array (modify in place)
 *
 * @hook preprocess_block
 */
function lc_connector_preprocess_block(array &$variables) {
  $settings = block_custom_block_get($variables['block']->delta);

  // Inject a CSS class for blocks generated by LiteCommerce
  if (!empty($settings['lc_class'])) {
    LCConnector_Handler::callSafely('Block', 'addCSSClass', array(&$variables, $settings['lc_class']));
  }
}

/**
 * A user account is about to be created or updated.
 *
 * The method 'performAction' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Profile.php
 *
 * This method calls profile-specific actions.
 *
 * @param array $edit
 *   The array of form values submitted by the user
 * @param \stdClass $account
 *   The user object on which the operation is performed
 * @param mixed $category
 *   The active category of user information being edited
 *
 * @hook user_presave
 */
function lc_connector_user_presave(array &$edit, \stdClass $account, $category) {
  return LCConnector_Handler::callSafely('Profile', 'performAction', array('presave', &$edit, $account, $category));
}

/**
 * A user account was created.
 *
 * The method 'performAction' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Profile.php
 *
 * This method calls profile-specific actions.
 *
 * @param array $edit
 *   The array of form values submitted by the user
 * @param \stdClass $account
 *   The user object on which the operation is performed
 * @param mixed $category
 *   The active category of user information being edited
 *
 * @hook user_insert
 */
function lc_connector_user_insert(array &$edit, \stdClass $account, $category) {
  $account->passwd = LCConnector_Handler::getVariable('passwd');

  return LCConnector_Handler::callSafely('Profile', 'performAction', array('insert', &$edit, $account, $category));
}

/**
 * A user account was updated.
 *
 * The method 'performAction' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Profile.php
 *
 * This method calls profile-specific actions.
 *
 * @param array $edit
 *   The array of form values submitted by the user
 * @param \stdClass $account
 *   The user object on which the operation is performed
 * @param mixed $category
 *   The active category of user information being edited
 *
 * @hook user_update
 */
function lc_connector_user_update(array &$edit, \stdClass $account, $category) {
  $account->passwd = LCConnector_Handler::getVariable('passwd');

  return LCConnector_Handler::callSafely('Profile', 'performAction', array('update', &$edit, $account, $category));
}

/**
 * A user account was cancelled.
 *
 * The method 'performAction' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Profile.php
 *
 * This method calls profile-specific actions.
 *
 * @param array $edit
 *   The array of form values submitted by the user
 * @param \stdClass $account
 *   The user object on which the operation is performed
 * @param mixed $category
 *   The active category of user information being edited
 *
 * @hook user_cancel
 */
function lc_connector_user_cancel(array $edit, \stdClass $account, $category) {
  return LCConnector_Handler::callSafely('Profile', 'performAction', array('cancel', &$edit, $account, $category));
}

/**
 * A user account was deleted.
 *
 * The method 'performAction' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Profile.php
 *
 * This method calls profile-specific actions.
 *
 * @param \stdClass $account
 *   The user object on which the operation is performed
 *
 * @hook user_delete
 */
function lc_connector_user_delete($account) {
  $edit = array();

  return LCConnector_Handler::callSafely('Profile', 'performAction', array('delete', &$edit, $account, NULL));
}

/**
 * A role deleted.
 *
 * The method 'performAction' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Profile.php
 *
 * This method calls profile-specific actions.
 *
 * @param \stdClass $role
 *   The role object on which the operation is performed
 *
 * @hook user_role_delete
 */
function lc_connector_user_role_delete($role) {
  $roles = array($role);

  return LCConnector_Handler::callSafely('Profile', 'performAction', array('deleteRole', &$roles, new \stdClass(), NULL));
}

/**
 * The user just logged in.
 *
 * The method 'performAction' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Profile.php
 *
 * This method calls profile-specific actions.
 *
 * @param array $edit
 *   The array of form values submitted by the user
 * @param \stdClass $account
 *   The user object on which the operation is performed
 * @param mixed $category
 *   The active category of user information being edited
 *
 * @hook user_login
 */
function lc_connector_user_login(array &$edit, \stdClass $account, $category) {
  return LCConnector_Handler::callSafely('Profile', 'performAction', array('login', &$edit, $account, $category));
}

/**
 * The user just logged out.
 *
 * The method 'performAction' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Profile.php
 *
 * This method calls profile-specific actions.
 *
 * @param \stdClass $account
 *   The user object on which the operation is performed
 *
 * @hook user_logout
 */
function lc_connector_user_logout(\stdClass $account) {
  $edit = array();

  return LCConnector_Handler::callSafely('Profile', 'performAction', array('logout', &$edit, $account, NULL));
}

/**
 * Modify login form.
 *
 * The method 'alterLoginForm' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Customer.php
 *
 * This method make some changes to the login form.
 *
 * @param array &$form
 *   Form description
 * @param array &$form_state
 *   Form state
 *
 * @hook form_FORM_ID_alter
 */
function lc_connector_form_user_login_block_alter(array &$form, array &$form_state) {
  return LCConnector_Handler::callSafely('Customer', 'alterLoginForm', array(&$form, &$form_state));
}

/**
 * Perform necessary alterations to the JavaScript before it is presented on the page.
 *
 * The method 'optimizeJSFiles' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Module.php
 *
 * This method make some changes to optimize javscript files list.
 *
 * @param array &$javascript
 *   An array of all JavaScript being presented on the page
 *
 * @hook js_alter
 */
function lc_connector_js_alter(array &$javascript) {
  return LCConnector_Handler::callSafely('Module', 'optimizeJSFiles', array(&$javascript));
}

/**
 * Perform necessary alterations to the CSS before it is presented on the page.
 *
 * The method 'optimizeCSSFiles' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Module.php
 *
 * This method make some changes to optimize CSS files list.
 *
 * @param array &$css
 *   An array of all CSS being presented on the page
 *
 * @hook css_alter
 */
function lc_connector_css_alter(array &$css) {
  return LCConnector_Handler::callSafely('Module', 'optimizeCSSFiles', array(&$css));
}

/**
 * Alters outbound URLs.
 *
 * The method 'translateOutboundURL' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Module.php
 *
 * This method translate LiteCommerce URL to Drupal specific URL.
 *
 * @param string &$path
 *   The outbound path to alter
 * @param array &$options
 *   A set of URL options
 * @param string $original_path
 *   The original path, before being altered by any modules
 *
 * @hook url_outbound_alter
 */
function lc_connector_url_outbound_alter(&$path, array &$options, $original_path) {
  LCConnector_Handler::callSafely('Module', 'translateOutboundURL', array(&$path, &$options, $original_path));
}

/**
 * Alters inbound URLs.
 *
 * The method 'translateInboundURL' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Module.php
 *
 * This method translate Drupal URL to LiteCommerce URL.
 *
 * @param string &$path
 *   Path
 * @param string $original_path
 *   Original path
 * @param string $path_language
 *   Path language
 *
 * @hook url_inbound_alter
 */
function lc_connector_url_inbound_alter(&$path, $original_path, $path_language) {
  LCConnector_Handler::callSafely('Module', 'translateInboundURL', array(&$path, $original_path, $path_language));
}

/**
 * Process cron tasks.
 *
 * The method 'runCronTasks' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Module.php
 *
 * This method run LiteCommerce specific tasks.
 *
 * @hook cron
 */
function lc_connector_cron() {
  LCConnector_Handler::callSafely('Module', 'runCronTasks');
}

/**
 * Returns lc_connector specific permissions.
 *
 * @hook   permission
 * @return array
 */
function lc_connector_permission() {
  return array('lc admin' => array('title' => t('LiteCommerce administrator')));
}

/**
 * Add additional processor on submit to the form.
 *
 * The method 'alterUserProfileForm' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Admin.php
 *
 * This method adds callback for processing of user profile form.
 *
 * @param array &$form
 *   Form description
 * @param array &$form_state
 *   Form state
 *
 * @hook form_FORM_ID_alter
 */
function lc_connector_form_user_profile_form_alter(array &$form, array &$form_state) {
  return LCConnector_Handler::callSafely('Admin', 'alterUserProfileForm', array(&$form, &$form_state));
}

/**
 * Add additional processor on submit to the form.
 *
 * The method 'alterUserProfileForm' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Admin.php
 *
 * This method adds callback for processing of user profile register form.
 *
 * @param array &$form
 *   Form description
 * @param array &$form_state
 *   Form state
 *
 * @hook form_FORM_ID_alter
 */
function lc_connector_form_user_register_form_alter(array &$form, array &$form_state) {
  return LCConnector_Handler::callSafely('Admin', 'alterUserRegisterForm', array(&$form, &$form_state));
}

/**
 * Update variables array passed to the template.
 *
 * The method 'updateTemplateVars' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Controller.php
 *
 * This method updates some variables before they pass to the template.
 *
 * @param array &$variables
 *   Array of variables
 *
 * @hook template_process_page
 */
function lc_connector_process_page(array &$variables) {
  return LCConnector_Handler::callSafely('Controller', 'updateTemplateVars', array(&$variables));
}

/**
 * Update meta tags array passed to the template.
 *
 * The method 'updateMetaTags' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Controller.php
 *
 * This method updates meta tags array before this pass to the template.
 *
 * @param array &$elements
 *   Array of meta tags
 *
 * @hook html_head_alter
 */
function lc_connector_html_head_alter(array &$elements) {
  LCConnector_Handler::callSafely('Controller', 'updateMetaTags', array(&$elements));
}

/**
 * Add additional processor on submit to the form.
 *
 * The method 'alterUserPermissionsForm' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Admin.php
 *
 * This method adds callback for processing of user permissions form.
 *
 * @param array &$form
 *   Form description
 * @param array &$form_state
 *   Form state
 *
 * @hook form_FORM_ID_alter
 */
function lc_connector_form_user_admin_permissions_alter(array &$form, array &$form_state) {
  return LCConnector_Handler::callSafely('Admin', 'alterUserPermissionsForm', array(&$form, &$form_state));
}

/**
 * Check access for current LC controller.
 *
 * The method 'checkAccess' is located in LiteCommerce classes and can be found at
 * <lc-dir>/classes/XLite/Module/CDev/DrupalConnector/Drupal/Controller.php
 *
 * This method returns true or false depending on user access level withi LiteCommerce.
 *
 * FIXME: Drupal calls this function before the module is initialized.
 * So, we cannot move it into the "Include/Callbacks.php".
 * See: http://drupal.org/node/928160
 *
 * TODO: check if we can call LC methods here.
 * Or the initialization is not required.
 * Or it's not needed to check anything here at all.
 *
 * @return boolean
 */
function lc_connector_check_controller_access() {
  return is_null($result = LCConnector_Handler::callSafely('Controller', 'checkAccess')) ? TRUE : $result;
}


/**
 * Provide information on the type of links this module provides.
 *
 * @return array
 *
 * @see hook_entity_info()
 * @see hook_entity_info_alter()
 */
function lc_connector_xmlsitemap_link_info() {
  $info = LCConnector_Handler::callSafely('Controller', 'getXMLSitemapLinkInfo');

  return $info ?: array();
}

/**
 * Rebuild callback for XML sitemap module
 *
 * @return array
 */
function lc_connector_xmlsitemap_rebuild_callback() {
  return LCConnector_Handler::callSafely('Controller', 'generateXMLSitemapLinks');
}

/**
 * Add namespaces for RDF mappings.
 *
 * @return
 *   An associative array of namespaces where the key is the namespace prefix
 *   and the value is the namespace URI.
 *
 * @see hook_rdf_namespaces
 */
function lc_connector_rdf_namespaces() {
  return LCConnector_Handler::callSafely('Controller', 'getRDFNamespaces');
}

/**
 * Preprocess function for html.tpl.php
 *
 * @param array $vars
 *   Array of variables.
 */
function lc_connector_preprocess_html(array &$vars)
{
  $prefixes = LCConnector_Handler::callSafely('Controller', 'getHeadPrefixes');

  $prefixesAssembled = array();
  foreach ($prefixes as $name => $url) {
    $prefixesAssembled[] = $name . ': ' . $url;
  }
  $vars['head_prefixes'] = $prefixesAssembled ? implode(' ', $prefixesAssembled) : '';
}
