<?php

/**
 * @file
 * Process payments using QuickBooks Merchant Services (QBMS) for Web Store.
 */

/**
 * Default path to the QuickBooks PHP DevKit directory.
 */
define('UC_QBMS_PHP_DK_PATH', 'sites/all/libraries/quickbooks_php_devkit');

/**
 * Intuit's Live and Test Application Ids.
 *
 * You may also register your own Application Id's with Intuit and use that
 * AppLogin instead of the ones provided here.
 */
define('UC_QBMS_APPLOGIN', 'qbms.ubercart.org');
define('UC_QBMS_TEST_APPLOGIN', 'qbmstest.ubercart.org');

/**
 * Implements hook_uc_payment_gateway().
 */
function uc_qbms_uc_payment_gateway() {
  $gateways['qbms'] = array(
    'title' => t('QuickBooks Merchant Services'),
    'description' => t('Process credit card payments through the QBMS for Web Store.'),
    'settings' => 'uc_qbms_settings_form',
    'credit' => 'uc_qbms_card_process',
    'credit_txn_types' => array(UC_CREDIT_AUTH_CAPTURE),
  );

  return $gateways;
}

/**
 * Callback for payment gateway settings.
 */
function uc_qbms_settings_form($form, &$form_state) {
  // Verify that the QBMS PHP SDK is installed.
  $UC_QBMS_PHP_DK_PATH = variable_get('uc_qbms_php_dk_path', UC_QBMS_PHP_DK_PATH);
  if (!is_dir($UC_QBMS_PHP_DK_PATH)) {
    drupal_set_message(t('You need to download the <a href="@qb_php_dk">QuickBooks PHP DevKit</a> and extract the entire contents of the archive into the @libpath folder of your server. Then rename the top folder of the library to quickbooks_php_devkit so that the main library file is located here: @path',
      array('@libpath' => 'sites/all/libraries', '@qb_php_dk' => 'https://code.intuit.com/sf/frs/do/viewSummary/projects.php_devkit/frs', '@path' => 'sites/all/libraries/quickbooks_php_devkit/QuickBooks.php')), 'error');
  }
  $form['uc_qbms_php_dk_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to QuickBooks PHP DevKit'),
    '#default_value' => $UC_QBMS_PHP_DK_PATH,
    '#description' => t('Enter the path relative to Drupal root where the QuickBooks PHP DevKit directory is located. NO trailing slash!'),
  );

  // Retrieve the un-encrypted connection ticket.
  $login_data = uc_qbms_login_data();
  $form['uc_qbms_connection_ticket'] = array(
    '#type' => 'textfield',
    '#title' => t('Connection Ticket'),
    '#default_value' => $login_data['connection_ticket'],
    '#description' => t('Enter the Connection Ticket provided by Intuit.<br />Get your connection ticket from Intuit by connecting your QBMS account with this module at: <a href="@qb_appr">QuickBooks Merchant Service Center</a>', array('@qb_appr' => 'https://merchantaccount.quickbooks.com/j/sdkconnection?appid=179399124&appdata=mydata')),
  );

  $form['env'] = array(
    '#type' => 'fieldset',
    '#title' => t('QBMS Environment'),
  );
  $form['env']['uc_qbms_txn_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction Mode'),
    '#default_value' => variable_get('uc_qbms_txn_mode', 'test'),
    '#options' => array(
      'live' => t('Live transactions'),
      'test' => t('Test transactions'),
    ),
    '#description' => t('Transactions are set to be used with an Intuit QBMS development account by default. Adjust to live transactions when you are ready to start processing real payments through a QBMS production account.'),
  );

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_payment_method_settings_form().
 */
function uc_qbms_form_uc_payment_method_settings_form_alter(&$form, &$form_state) {
  if ($form_state['build_info']['args'][0] == 'credit') {
    $form['#submit'][] = 'uc_qbms_payment_gateway_settings_submit';
  }
}

/**
 * Submit handler for payment gateway settings form to encrypt fields.
 */
function uc_qbms_payment_gateway_settings_submit($form, &$form_state) {
  // If CC encryption has been configured properly.
  if ($key = uc_credit_encryption_key()) {
    // Setup our encryption object.
    $crypt = new UbercartEncryption();

    // Encrypt the Connection Ticket.
    if (!empty($form_state['values']['uc_qbms_connection_ticket'])) {
      variable_set('uc_qbms_connection_ticket', $crypt->encrypt($key, $form_state['values']['uc_qbms_connection_ticket']));
    }

    // Store any errors.
    uc_store_encryption_errors($crypt, 'uc_qbms');
  }
}

/**
 * Handler for processing credit card transactions.
 *
 * @todo Implement additional methods supported by the QB PHP DevKit.
 */
function uc_qbms_card_process($order_id, $amount, $data) {
  // Load the order.
  $order = uc_order_load($order_id);

  // Perform the appropriate action based on the transaction type.
  switch ($data['txn_type']) {
    case UC_CREDIT_AUTH_CAPTURE:
    default:
      return uc_qbms_charge($order, $amount, $data);
  }
}

/**
 * Handles UC_CREDIT_AUTH_CAPTURE transactions through QBMS for Web Store.
 */
function uc_qbms_charge($order, $amount, $data) {
  // Require the QB PHP DevKit.
  require_once DRUPAL_ROOT . '/' . variable_get('uc_qbms_php_dk_path', UC_QBMS_PHP_DK_PATH) . '/' . 'QuickBooks.php';
  global $user;

  // Retrieve the un-encrypted connection ticket.
  $login_data = uc_qbms_login_data();
  $connection_ticket = $login_data['connection_ticket'];

  // Retrieve the appropriate AppLogin.
  if (variable_get('uc_qbms_txn_mode', 'test') == 'live') {
    $app_login = UC_QBMS_APPLOGIN;
    $test = FALSE;
  }
  else {
    $app_login = UC_QBMS_TEST_APPLOGIN;
    $test = TRUE;
  }

  // Create an instance of the MerchantService object.
  $qbms = new QuickBooks_MerchantService(NULL, NULL, $app_login, $connection_ticket);
  // Set the QBMS test environment variable.
  $qbms->useTestEnvironment($test);

  // Create the CreditCard object.
  $card = new QuickBooks_MerchantService_CreditCard(
    $order->billing_first_name . ' ' . $order->billing_last_name,
    $order->payment_details['cc_number'],
    $order->payment_details['cc_exp_year'],
    $order->payment_details['cc_exp_month'],
    $order->billing_street1,
    $order->billing_postal_code,
    $order->payment_details['cc_cvv']
  );

  // Formating for $amount variable, used later.
  $context = array(
    'revision' => 'formatted-original',
    'type' => 'amount',
  );

  // The transaction object only contains data if the submission was approved.
  if ($transaction = $qbms->charge($card, $amount)) {
    // Convert transaction object into array.
    $transaction = $transaction->toArray();

    // Write the transaction to database.
    $record = new stdClass();
    $record->tid = $transaction['CreditCardTransID'];
    $record->trans = serialize($transaction);
    drupal_write_record('uc_qbms_trans', $record);
    watchdog('uc_qbms', 'Added transaction to database with id %id.', array('%id' => $record->tid));

    // Build a message for display and comments in the payments table.
    $message = t('Type: @type<br />CCTransID: @id', array('@type' => uc_qbms_txn_type($transaction['Type']), '@id' => $transaction['CreditCardTransID']));

    // Build $result array to be returned to uc_credit module
    $result = array(
      'success' => TRUE,
      'comment' => $message,
      'message' => $message,
      'data' => array(
        'module' => 'uc_qbms',
        'txn_type' => $transaction['Type'],
        'txn_id' => $transaction['CreditCardTransID'],
      ),
      'uid' => $user->uid,
    );

    // Build a comment for display in the Order notes.
    $comment = t('<b>@type</b><br /><b>@status:</b> @message<br />Amount: @amount<br />AVS Street response: @avss<br />AVS Zip response: @avsz',
      array(
        '@type' => $transaction['Type'],
        '@status' => $result['success'] ? t('ACCEPTED') : t('REJECTED'),
        '@message' => $transaction['PaymentStatus'],
        '@amount' => uc_currency_format($amount),
        '@avss' => $transaction['AVSStreet'],
        '@avsz' => $transaction['AVSZip'],
      )
    );

    // Add the CVV response if enabled.
    if (variable_get('uc_credit_cvv_enabled', TRUE)) {
      $comment .= '<br />' . t('CVV match: @cvv', array('@cvv' => $transaction['CardSecurityCodeMatch']));
    }

  }
  // The transaction was not approved.
  else {
    // Get error code and message and store in an array.
    $error = array(
      'number' => $qbms->errorNumber(),
      'message' => $qbms->errorMessage(),
    );

    // Write errors to Watchdog
    watchdog('uc_qbms', 'QBMS error during charge: @error_num: @error', array('@error_num' => $error['number'], '@error' => $error['message']), WATCHDOG_ERROR);

    // Build $result array to be returned to uc_credit module
    $result = array(
      'success' => FALSE,
      'message' => t('Credit card payment declined: @message', array('@message' => $error['message'])),
      'uid' => $user->uid,
    );

    // Build a comment for display in the Order notes.
    $comment = t('<b>@status:</b> @message<br />Amount: @amount', array('@status' => $result['success'] ? t('ACCEPTED') : t('REJECTED'), '@message' => $error['message'], '@amount' => uc_currency_format($amount)));
  }

  // Save the comment to the order.
  uc_order_comment_save($order->order_id, $user->uid, $comment, 'admin');

  return $result;
}

/**
 * Returns the title of the transaction type.
 */
function uc_qbms_txn_type($type) {
  switch ($type) {
    case 'Charge':
      return t('Authorization and capture');
  }
}

/**
 * Decrypts the connection ticket for using QBMS APIs.
 */
function uc_qbms_login_data() {
  static $_uc_qbms_data;

  if (!empty($_uc_qbms_data)) {
    return $_uc_qbms_data;
  }

  $connection_ticket = variable_get('uc_qbms_connection_ticket', '');

  // If CC encryption has been configured properly.
  if ($key = uc_credit_encryption_key()) {
    // Setup our encryption object.
    $crypt = new UbercartEncryption();

    // Decrypt the connection_ticket.
    if (!empty($connection_ticket)) {
      $connection_ticket = $crypt->decrypt($key, $connection_ticket);
    }

    // Store any errors.
    uc_store_encryption_errors($crypt, 'uc_qbms');
  }

  $_uc_qbms_data = array(
    'connection_ticket' => $connection_ticket,
  );

  return $_uc_qbms_data;
}
