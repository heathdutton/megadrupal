<?php

/**
 * @file
 * Shopping cart and checkout tests.
 */

/**
 * Defines
 */

if (!defined('UbercartTestHelper')) {//die('No UbercartTestHelper');
class UbercartTestHelper extends DrupalWebTestCase {}
}
/**
* Tests Tripletex payments with the dummy api.
*
* This class is intended to be subclassed for use in testing other credit
* card gateways. Subclasses which test other gateways need to:
* - Define getInfo().
* - Override setUp(), if necessary, to enable the other gateway and any other
*   needed modules.
* - Override configureGateway() to implement gateway-specific configuration.
* - Override testGatewayFails() to test gateway-specific failure modes.
* No other overrides are necessary, although a subclass may want to add
* additional test functions to cover cases not included in this base class.
*/
class TripletexUcPaymentTestCase extends UbercartTestHelper {

  /**
   * Describes this test case.
   */
  public static function getInfo() {
    return array(
      'name' => 'Invoice payment with Ubercart',
      'description' => 'Verifying Tripletex Ubercart payment method.',
      'group' => 'Tripletex',
    );
  }

  /**
   * Implements DrupalWebTestCase::setUp().
   */
  public function setUp(array $modules = array()) {
    $modules += array('uc_payment', 'uc_taxes', 'tripletex_uc', 'tripletex', 'tripletex_dummy_api', 'views');
    $permissions = array('administer permissions', 'view payments', 'administer tripletex', 'access all views');
    parent::setUp($modules, $permissions);

    // Need admin permissions in order to change credit card settings.
    $this->drupalLogin($this->adminUser);

    // Configure and enable Credit card module and Test gateway.
    $this->configureTripletexUc();
  }

  /**
   * Helper function to configure Credit Card payment method settings.
   */
  protected function configureTripletexUc() {
    $this->drupalPost(
      'admin/store/settings/payment',
      array('uc_payment_method_tripletex_checkout' => TRUE),
      t('Save configuration')
    );
    $this->assertFieldByName(
      'uc_payment_method_tripletex_checkout',
      TRUE,
      t('Tripletex invoice payment method is enabled')
    );

  }

  /**
   * Implements DrupalWebTestCase::tearDown().
   */
  public function tearDown() {
    parent::tearDown();
  }

  /**
   * Helper function. Creates a new order.
   */
  protected function createOrder($fields = array()) {
    $order = uc_order_new();
    foreach ($fields as $key => $value) {
      $order->$key = $value;
    }

    if (empty($order->primary_email)) {
      $order->primary_email = $this->randomString() . '@example.org';
    }

    if (!isset($fields['products'])) {
      $item = clone $this->product;
      $item->qty = 1;
      $item->price = $item->sell_price;
      $item->data = array();
      $order->products = array($item);
    }

    $order->order_total = uc_order_get_total($order, TRUE);
    $order->line_items = uc_order_load_line_items($order, TRUE);
    uc_order_save($order);

    return $order;
  }

  /**
   * Create an order manually
   *
   * @param array $fields
   *   'count' => Number of products to add to the order
   */
  protected function createManualOrder($fields = array()) {

    $this->drupalPost('/node/' . $this->product->nid, array(), 'Add to cart');
    if (isset($fields['count'])) {
      $fields['count']--;
      while ($fields['count']) {
        $this->drupalPost('/node/' . $this->product->nid, array(), 'Add to cart');
        $fields['count']--;
      }
    }

  }

  /**
   * Test that order range can be changed in the settings page and that new orders are
   * created using new order range
   *
   */
  function testSetOrderRangeStart() {

    $this->drupalLogin($this->adminUser);

    return;      // This test is only valid for D6 version of Ubercart interface it looks

    // Verify default order number suggestion
    $this->drupalGet('admin/store/settings/payment/edit/methods');
    $this->assertText('No orders are registered. Enter order number range start below:');
    $this->assertFieldByName('tripletex_order_start_number', TRIPLETEX_DEFAULT_UC_ORDER_RANGE_START, 'Default value displayed');

    // Set order number low
    $settings = array(
            'tripletex_order_start_number' => 1,
    );
    $this->drupalPost('admin/store/settings/payment/edit/methods', $settings, t('Save configuration'));
    // Create a set of orders
    $this->createOrder();  // Order 1
    $this->createOrder();  // Order 2
    $this->createOrder();  // Order 3
    $this->createOrder();  // Order 4
    $this->createManualOrder(array('count' => 3)); // Order 5 - 3 products
    $order_5 = $this->checkout();
    $this->assertText('Your order number is 5');

    // Verify order number too low
    $settings = array(
      'tripletex_order_start_number' => 2,
    );
    $this->drupalPost('admin/store/settings/payment/edit/methods', $settings, t('Save configuration'));
    $this->assertText('New order number range start must be greater than registered orders.');

    // Verify
    $settings = array(
      'tripletex_order_start_number' => 10,
    );
    $this->drupalPost('admin/store/settings/payment/edit/methods', $settings, t('Save configuration'));
    $this->createManualOrder(array('count' => 3)); // Order 5 - 3 products
    $order_10 = $this->checkout();
    $this->assertText('Your order number is 10');

  }



  /**
   * Tests that an order can be placed using the test gateway.
   */
  public function testCheckout() {
    // Allow customer to specify username and password, and log in new users after checkout.
    $settings = array(
      'uc_new_customer_login' => TRUE
    );
    $this->drupalLogin($this->adminUser);
    $this->drupalPost('admin/store/settings/checkout/edit', $settings, t('Save configuration'));
    $settings = array(
      'uc_cart_new_account_name' => TRUE,
      'uc_cart_new_account_password' => TRUE,
    );
    $this->drupalPost('admin/store/settings/checkout/edit/panes', $settings, t('Save configuration'));
    $this->drupalLogout();

    $new_user = new stdClass();
    $new_user->name = $this->randomName(20);
    $new_user->pass_raw = $this->randomString(20);

    // Test as anonymous user.
    $this->drupalPost('node/' . $this->product->nid, array(), t('Add to cart'));
    $this->checkout(array(
      'panes[customer][new_account][name]' => $new_user->name,
      'panes[customer][new_account][pass]' => $new_user->pass_raw,
      'panes[customer][new_account][pass_confirm]' => $new_user->pass_raw,
    ));
    $this->assertText('Your order is complete!');
    $this->assertText('you are already logged in');

    // Confirm login.
    $this->drupalGet('<front>');
    $this->assertText('My account', 'User is logged in.');

    // Check that cart is now empty.
    $this->drupalGet('cart');
    $this->assertText('There are no products in your shopping cart.');

    // Check that the password works.
    $this->drupalLogout();
    $this->drupalLogin($new_user);

    // Test again as authenticated user.
    $this->drupalPost('node/' . $this->product->nid, array(), t('Add to cart'));
    $this->checkout(array());
    $this->assertText('Your order is complete!');
    $this->assertText('While logged in');

    // Test again with generated username and password.
    $this->drupalLogout();
    $this->drupalPost('node/' . $this->product->nid, array(), t('Add to cart'));
    $this->checkout(array());

    $this->assertText('Your order is complete!');
    $this->assertText('you are already logged in');
    $this->assertText('Invoice no ');
    $this->assertText('Total of ');
  }

  /**
   * Tests that a payment was received and recorded.
   */
  public function testPaymentReceived() {

    // Create order 1
    $order_data = array('primary_email' => 'simpletest@ubercart.org');
        $order = $this->createOrder($order_data);
    $this->drupalGet('admin/store/orders/' . $order->order_id);
    uc_payment_enter($order->order_id, 'SimpleTest', $order->order_total);
    $output = uc_cart_complete_sale($order);

    // Create order 2
    $this->createManualOrder(array('count' => 2));
    // Checkout and create invoice 20000
    $order_2 = $this->checkout();
    $this->assertText('Invoice no 20000 created for');
    $this->assertText(t('Your order is complete! Your order number is @order.', array('@order' => $order_2)));

        // Create order 3
        $this->createManualOrder(array('count' => 3));
    // Checkout and create invoice 20001
    $order_3 = $this->checkout();
    $this->assertText('Invoice no 20001 created for');
    $this->assertText(t('Your order is complete! Your order number is @order.', array('@order' => $order_3)));

        // Create order 4
    $this->createManualOrder(array('count' => 4));
    // Checkout and create invoice 20002
    $order_4 = $this->checkout();
    $this->assertText('Invoice no 20002 created for');
    $this->assertText(t('Your order is complete! Your order number is @order.', array('@order' => $order_4)));

        // Need admin permissions in order to view all invoices.
    $this->drupalLogin($this->adminUser);

    $this->drupalGet('admin/content/invoice'); // Get invoice list

    // Check that invoice is posted
    $this->assertText(t('@amount', array('@amount' => number_format(2 * $this->product->sell_price, 2, ',', ' '))), t('Invoice 20000 listed.'));
    $this->assertText(t('@amount', array('@amount' => number_format(3 * $this->product->sell_price, 2, ',', ' '))), t('Invoice 20001 listed.'));
        $this->assertText(t('@amount', array('@amount' => number_format(4 * $this->product->sell_price, 2, ',', ' '))), t('Invoice 20002 listed.'));
        $this->pass(t('@amount', array('@amount' => number_format(4 * $this->product->sell_price, 2, ',', ' '))), t('Invoice listed.'));

        // Run what cron normally does and update invoice status. Odd invoice numbers have 1000 remaining - even are paid
    tripletex_check_payment();

    $this->drupalGet('admin/content/invoice'); // Get invoice list

    $this->assertText(t('@amount', array('@amount' => number_format(0, 2, ',', ' '))), t('Invoice listed.'));
    $this->assertText(t('@amount', array('@amount' => number_format(1000, 2, ',', ' '))), t('Invoice listed.'));
    $this->assertNoText(t('@amount', array('@amount' => number_format(2 * $this->product->sell_price, 2, ',', ' '))), t('Remaining amount invoice 20000 is reset'));
    $this->assertNoText(t('@amount', array('@amount' => number_format(3 * $this->product->sell_price, 2, ',', '.'))), t('Remaining amount invoice 20001 is reset'));
    $this->assertNoText(t('@amount', array('@amount' => number_format(4 * $this->product->sell_price, 2, ',', '.'))), t('Remaining amount invoice 20002 is reset'));

  }

  public function testExportImportProduct() {

    $saved_product  = clone $this->product;
    $this->drupalPost('admin/store/products/import', array(), 'Export');
    $this->assertText('Exported or updated 1 products');
    $this->assertText(t('Product @name id: 1, Model: @model exported to Tripletex!', array('@name' => $this->product->title, '@model' => $this->product->model)));

    $this->drupalPost('admin/store/products/import', array(), 'Import');
    $this->assertText(t('Updated product "@name" from Tripletex', array('@name' => $this->product->title)));
    $this->assertText('Created product "Testprodukt" from Tripletex');

    $this->assertEqual($saved_product->title, $this->product->title, 'Title is equal');
    $this->assertEqual($saved_product->sell_price, $this->product->sell_price, 'Sell price is equal');
    $this->assertEqual($saved_product->model, $this->product->model, 'Model is equal');

    // Get products imorted
    $products = tripletex_search_product('', TRUE);
    // Add them all to the cart
    foreach ($products as $pid => $prod) {
      $this->drupalPost('/node/' . $pid, array(), 'Add to cart');
    }
    $order = $this->checkout();

    $this->pass('<pre>' . print_r($order, TRUE) . '</pre>');
    $this->assertText('Invoice no 20000 created for');

  }
}
