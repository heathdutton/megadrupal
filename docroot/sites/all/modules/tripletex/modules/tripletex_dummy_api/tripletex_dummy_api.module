<?php

/**
 * @file
 * Dummy API for mimicing the Tripletex JSON API for testing purpouses
 */

/**
 * Implmentes hook_tripletex_api_request_call()
 * This is the receiving and responding hook that replaces the JSON API.
 * Must return a JSON encoded structure with data where rigth
 *
 * @param unknown_type $headers
 * @param unknown_type $data
 *
 * @return object
 *   Resulting JSON encoded data
 */
function tripletex_dummy_api_tripletex_api_request_call($headers, $data) {

  $result = new stdClass;

  $json = json_decode($data);

//  dpm($json);

  switch ($json->method) {
    case 'Company.searchForCustomersAndVendors':
      // 'customerVendorType' => 1, // Customers only. 0 = All, 2 = Vendors only
      // 'isActive' => 1, // Active only. -1 = All, 0 = Inactive only
      // 'searchString' => $search_string,           // Required
      
      $search_string = $json->params[2];
      if ($search_string != 'Svartebill' && $search_string != '234') return array();
      $customer = new stdClass;
      $customer->id = 234;
      $customer->name = 'Svartebill';
      $customer->customerAccountNumber = 234234;
      // Return array of customer objects
      $json->result = array($customer);
      break;

    case 'Product.searchForProducts':
      // 'isActive' => 1, // Active only. -1 = All, 0 = Inactive only
      // 'searchString' => $search_string,           // Required

      $amount = 567.0;
      $search_string = $json->params[1];

      $product = new stdClass;
      $product->id = 345;
      $product->name = 'Testprodukt';
      $product->number = 345345;
      $product->cost = $amount/2;
      $product->currencyCode = 'NOK';
      $product->vatType = '3';    //  3: High vat. 31: Medium vat. 32: Low vat. 5: No vat (inside). 6: No vat (outside).
      $product->priceCurrency = $amount; // Price excl. vat.
      $product->priceIncVatCurrency = $amount * 1.25; //

      // Return array of product objects
      $json->result = array($product);
      break;

    case 'Invoice.importInvoicesTripletexCSV':
    case 'Project.importOrdersTripletexCSV':
      $json->result = NULL;
      break;

    case 'Invoice.getHistoryAmountCurrencyOutstanding':
      $json->result = 1000;
      break;

    case 'Sync.login':
      if (!$error = _tripletex_dummy_api_verifylogin($json->params)) {
        $result->headers = array('set-cookie' => '45;23DF45AC67BD,45;23DF45AC67BD');
      }
      else {
        $json->error = $error;

      }
      break;

    default:
      $json->result = NULL;
      break;
  }

  unset($json->params);


  $result->data = json_encode($json);

  return $result;

}

/**
 * Verify login credentials matches predefined values
 *
 * @param array $params
 *
 * @return object	Error object with the correct error parameters set
 *   depending on the fault. NULL if no login problems.
 */
function _tripletex_dummy_api_verifylogin($params) {

  if (    $params['0'] == '100'
  		&&  $params['1'] == 'sysPass') {
    if (  $params['2'] == 'test@test.com'
  		&&  $params['3'] == 'userPass') {
      return NULL;
    }
    else {

      $errorObject = new stdClass;
      $errorObject->javaClass = 'no.tripletex.common.exception.JsonRpcException';
      $errorObject->code = 101;
      $errorObject->msg = t('Invalid username or password');

      return $errorObject;
    }
  }
  else {
    $errorObject = new stdClass;
    $errorObject->javaClass = 'no.tripletex.common.exception.JsonRpcException';
    $errorObject->code = 100;
    $errorObject->msg = t('Invalid syncSystemId (@id) or password (@pass).', array('@id' => $params['0'], '@pass' => $params['1']));

    return $errorObject;
  }
}