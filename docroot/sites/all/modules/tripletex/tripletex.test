<?php

/**
 * @file
 * Tripletex simpletest
 */

/**
 * Tests the SimpleTest Example module's content type.
 */
class TripletexTestCase extends DrupalWebTestCase {

  /**
   * Users
   */
  protected $privileged_user, $loggedin_user;

  /**
   * getInfo() returns properties that are displayed in the test selection form.
   */
  public static function getInfo() {
    return array(
      'name' => 'Tripletex',
      'description' => 'Testing the main functionality points.',
      'group' => 'Tripletex',
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('tripletex', 'ctools', 'views', 'views_ui', 'tripletex_dummy_api');

    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser( array(
      'administer tripletex',
      'access tripletex content',
      'administer views',
    )
    );
    $this->loggedin_user = $this->drupalCreateUser( array('access tripletex content'));
    $this->drupalLogin($this->privileged_user);

    // Check login without config data
    $data = array();
    $this->drupalPost('admin/config/services/tripletex/credentials', $data, 'Save configuration');
    $this->assertText(t('Login failed!'), t('Admin user can save but fail login without login data'));

    // Set config data for correct login
    $data['tripletex_user'] = 'test@test.com';
    $data['tripletex_pass'] = 'userPass';
    $data['tripletex_syncsyst'] = '100';
    $data['tripletex_syncsyst_pass'] = 'sysPass';

    $this->drupalPost('admin/config/services/tripletex/credentials', $data, 'Save configuration');
    $this->assertText(t('Login succeeded!'), t('Admin login with correct detials success'));

  }

  /**
   * Verify that current user has no access to page.
   *
   * @param $url
   *   URL to verify.
   */
  function tripletexVerifyNoAccess($url) {
    // Test that page returns 403 Access Denied
    $this->drupalGet($url);
    $this->assertResponse(403);
  }

  /**
   * Generates a random string of ASCII numeric characters (values 48 to 57).
   *
   * @param $length
   *   Length of random string to generate .
   * @return
   *   Randomly generated string.
   */
  public static function randomNumber($length = 8) {
    $str = '';
    for ($i = 0; $i < $length; $i++) {
      $str .= chr(mt_rand(48, 57));
    }
    return $str;
  }


  /**
  * Detect if we're running on Drupal.org's automated testbot.
  *
  * This is used inside the edit test so that the testbot skips intentionally
  * failing tests. Otherwise, it would mark this module as broken.
  *
  * For more information on the testbot, see http://qa.drupal.org/.
  *
  * @return boolean
  *   TRUE if running on testbot.
  */
  public function runningOnTestbot() {
    $testbot_code_directory = "../checkout";
    return file_exists($testbot_code_directory);
  }
}

class TripletexSettingsTestClass extends TripletexTestCase {

  /**
  * getInfo() returns properties that are displayed in the test selection form.
  */
  public static function getInfo() {
    return array(
        'name' => 'Tripletex Settings',
        'description' => 'Testing the settings.',
        'group' => 'Tripletex',
    );
  }

  /**
   * Check that module is enabled and visible in the modules list.
   */
  public function testTripletexSettingsPages() {

    // Check admin access to settings page
    $this->drupalGet("admin/config/services/tripletex/credentials");
    $this->assertResponse(200, t('Admin user is not allowed to view the settings page.'));
    $this->assertText(t('Login credentials'), t('Admin user can not access the Credentials settings page'));

    $this->drupalGet("admin/config/services/tripletex");
    $this->assertResponse(200, t('Admin user is not allowed to view the settings page.'));
    $this->assertText(t('Default settings'), t('Admin user can not access the Default settings page'));

    // Log in our standard user.
    $this->drupalLogin($this->loggedin_user);
    $this->tripletexVerifyNoAccess("admin/config/services/tripletex");
    $this->assertNoText(t('Default settings'), t('Standard user can not access the Default settings page'));

    $this->tripletexVerifyNoAccess("admin/config/services/tripletex/credentials");
    $this->assertNoText(t('Login credentials'), t('User access the Credentials settings page'));

    $this->drupalLogout();

    $this->tripletexVerifyNoAccess("admin/config/services/tripletex");
    $this->assertNoText(t('Default settings'), t('Anonymous user can access the Default settings page'));

    $this->tripletexVerifyNoAccess("admin/config/services/tripletex/credentials");
    $this->assertNoText(t('Login credentials'), t('Anonymous user can access the Credentials settings page'));

    // Verify credentials settings page
    $this->drupalLogin($this->privileged_user);
    $this->drupalGet("admin/config/services/tripletex/credentials");
    $this->assertResponse(200, t('Admin user is not allowed to view the settings page.'));

    $data = array();
    $data['tripletex_user'] = 'test@test.com';
    $data['tripletex_pass'] = 'userPass';
    $data['tripletex_syncsyst'] = '100';
    $data['tripletex_syncsyst_pass'] = 'sysPass';

    $this->drupalPost('admin/config/services/tripletex/credentials', $data, 'Save configuration');
    $this->assertText(t('Login succeeded!'), t('Admin login with correct detials success'));

    // Verify that we can save page and that will not change passwords
    $this->drupalPost('admin/config/services/tripletex/credentials', array(), 'Save configuration');
    $this->assertText(t('Login succeeded!'), t('Setting page saved and login success when no change'));

    // Verify login error on wrong password for user
    $data['tripletex_pass'] = 'xxxPass';
    $this->drupalPost('admin/config/services/tripletex/credentials', $data, 'Save configuration');
    $this->assertText(t('Login failed!'), t('Admin user can save but fail login without login data'));

  }

  /**
   * Test for issue #1459802:Configurable invoice sequence start
   */
  public function testTripletexChangeInvoiceNumberStart() {

    // Standard check for availability
    $this->drupalLogin($this->privileged_user);
    $this->drupalGet("admin/config/services/tripletex");
    $this->assertResponse(200, t('Admin user is not allowed to view the settings page.'));
    $this->assertText(t('Default settings'), t('Admin user can not access the Default settings page'));

    // Check logging
    $this->assertNoFieldChecked('edit-tripletex-handle-own-invoices', 'Handle and create own invoice series checkbox is checked');
    // Check that the 'edit-tripletex-invoice-start-number' field is not there
    $this->assertNoFieldById('edit-tripletex-invoice-start-number', $value = '', 'Field to change invoice series start is visible when it should not');

    // Alter the configuration to enable tracking of invoice status
    $data = array(
      'tripletex_handle_own_invoices' => TRUE, // checkboxes must be set with TRUE/FALSE rather than 1/0
    );
    $this->drupalPost('admin/config/services/tripletex', $data, 'Save configuration');

    // Test that the checkbox is now set
    $this->assertFieldChecked('edit-tripletex-handle-own-invoices', 'Handle and create own invoice series checkbox is not checked when it should be');
    $this->assertFieldById('edit-tripletex-invoice-start-number', '20000', 'Field to change invoice series start is not visible');

    // Change the invoice start range tripletex_invoice_start_number
    $invoice_start_number = $this->randomNumber(5);
    $data = array(
      'tripletex_invoice_start_number' => $invoice_start_number, // checkboxes must be set with TRUE/FALSE rather than 1/0
    );
    $this->drupalPost('admin/config/services/tripletex', $data, 'Save configuration');
    $this->assertFieldById('edit-tripletex-invoice-start-number', $invoice_start_number, 'Field to change invoice series start is not visible or correct.');

    // Extend this test further to add verification of invoice numbers when manual invocies are created

  }

  /**
   * Test for issue #1463936:Dropdown selection of currencies
   */
  public function testTripletexSelectCurrency() {
    // Standard check for availability
    $this->drupalLogin($this->privileged_user);
    $this->drupalGet("admin/config/services/tripletex");
    $this->assertResponse(200, t('Admin user is not allowed to view the settings page.'));
    $this->assertText(t('Default settings'), t('Admin user can not access the Default settings page'));

    // Check that the Dropdown field is available
    $this->assertFieldByName('tripletex_default_currency_code', 'NOK', 'Field to change default currenct is not visible');
    $this->assertRaw('<option value="NOK" selected="selected">NOK</option>', 'Default selection of currency NOK is not found.');

    // Change currency and verify new currency selected
    $data = array(
      'tripletex_default_currency_code' => 'EUR', // Set new default currency to Euro
    );
    $this->drupalPost('admin/config/services/tripletex', $data, 'Save configuration');
    $this->assertRaw('<option value="EUR" selected="selected">EUR</option>', 'Default selection of currency EUR is not found.');

  }

}

class TripletexInvoiceTestClass extends  TripletexTestCase {

  /**
  * getInfo() returns properties that are displayed in the test selection form.
  */
  public static function getInfo() {
    return array(
        'name' => 'Tripletex Invoices',
        'description' => 'Testing the invoices functionality.',
        'group' => 'Tripletex',
      );
  }


  public function testTripletexSendManualInvoice() {
    // Check access rights for non-authorised user
    $this->drupalLogout();
    $this->tripletexVerifyNoAccess("admin/content/invoice/add");

    // Logged in but no access rights
    $this->loggedin_user = $this->drupalCreateUser();
    $this->drupalLogin($this->loggedin_user);
    $this->tripletexVerifyNoAccess("admin/content/invoice/add");

    // Verify access for authorized user
    $this->loggedin_user = $this->drupalCreateUser( array('create tripletex invoice'));
    $this->drupalLogin($this->loggedin_user);
    $this->drupalGet("admin/content/invoice/add");
    $this->assertResponse(200, t('Authorized user is not allowed to access invoice creation page.'));
    $this->assertText(t('Create invoice'), t('Authorized user can not access the create invoice page'));

    // Fill in field data
    $data = array(
      'name' => $this->randomName(8), // Select a random name
      'address' => $this->randomName(8), // Address field
      'postcode' => $this->randomNumber(4),
      'city' => $this->randomName(8),
      'email' => $this->randomName(8) . '@' . $this->randomName(8) . '.com',
      'count' => $this->randomNumber(2)+1,  // Always bigger than zero
      'product' => $this->randomName(8),
      'price' => $this->randomNumber(3),
    );

    // Post form
    $this->drupalPost('admin/content/invoice/add', $data, 'Create invoice');

    // Check that invoice is posted
    $confirm_string = t('Invoice no @num created for @name. Total of @currency @amount',
        array(
          '@num' => 20000,
          '@name' => $data['name'],
          '@currency' => 'NOK', // Default currency
          '@amount' => number_format($data['count'] * $data['price'], 2, ',', '.'),
          )
      ); 
    $this->assertText(
      $confirm_string,
      $confirm_string
    );

  }

}

class TripletexViewsIntegrationTestClass extends TripletexTestCase {

  /**
  * getInfo() returns properties that are displayed in the test selection form.
  */
  public static function getInfo() {
    return array(
          'name' => 'Tripletex Views Integration',
          'description' => 'Testing the views integration.',
          'group' => 'Tripletex',
    );
  }

  public function testTripletexViewsIntegration() {

    // Check if we can find the default tripletex view in listing
    $this->drupalLogin($this->privileged_user);
    $this->drupalGet("admin/structure/views"); // Get the views listing page
    $this->assertResponse(200, t('Admin user is not allowed to view the views listing page.'));
    $this->assertText(t('tripletex_invoice_list'), t('Admin user can not find the default views listing'));

    // Try and edit the view
    $this->drupalGet("admin/structure/views/view/tripletex_invoice_list/edit"); // Get the views edit page
    $this->assertResponse(200, t('Admin user is not allowed to view the views edit page.'));

    // Test should be extended

  }

  public function testTripletexRulesIntegration() {
    // Check if the events are available

    // Check for actions

  }


}

class TripletexRulesIntegrationTestClass extends TripletexTestCase {

  /**
   * getInfo() returns properties that are displayed in the test selection form.
   */
  public static function getInfo() {
    return array(
      'name' => 'Tripletex Rules Integration',
      'description' => 'Testing the rules integration.',
      'group' => 'Tripletex',
    );
  }

  public function testTripletexRulesIntegration() {
    // Check if the events are available

    // Check for actions

  }


}
