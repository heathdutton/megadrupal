<?php
/**
 * @file:   Test cases for XSLTRepeat
 */

class XSLTRepeatTestCase extends DrupalUnitTestCase {
  private $xsl_available;

  public static function getInfo() {
    return array(
      'name' => 'XSLTRepeat test',
      'description' => 'Verify the correct behaviour of XSLTRepeat',
      'group' => 'XSLT Pipeline Parser',
    );
  }

  function setUp() {
    parent::setUp();

    $this->xsl_available = extension_loaded('xsl');

    if (!$this->xsl_available) {
        trigger_error('XSL Extension is not available on this system. Skipping this test.', E_USER_NOTICE);
        return;
    }

    // prevent auto loading cause that seems to involve database queries
    module_load_include('inc', 'feeds_xsltparser', 'include/LibXMLException');
    module_load_include('inc', 'feeds_xsltparser', 'include/XSLTPipe');
    module_load_include('inc', 'feeds_xsltparser', 'include/XSLTRepeat');
    module_load_include('inc', 'feeds_xsltparser', 'include/XSLTChain');
  }


  /**
   * Ensure that repeater repeats any given stylesheet 3 times
   */
  function testRepeat() {
    if (!$this->xsl_available) {
        return;
    }

    $counterxslt =
      '<?xml version="1.0" encoding="UTF-8"?>' .
      '<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">' .
      '<xsl:output method="text" encoding="UTF-8"/>' .
      '<xsl:template match="/">' .
      '3' .
      '</xsl:template>' .
      '</xsl:stylesheet>';
    $counterproc = new XSLTProcessor();
    $doc = new DOMDocument();
    $doc->loadXML($counterxslt);
    $counterproc->importStylesheet($doc);

    $counter = new XSLTChain();
    $counter->addProcessor($counterproc);

    $chain = new XSLTChain();
    $mapper = new XSLTRepeat($counter, $chain);

    $mapper->run('<anything/>');

    $count = 0;
    foreach ($mapper as $index => $repeated) {
      $this->assertEqual($chain, $repeated, 'Repeater must repeat the given repeated n times');
      $count++;
    }

    $this->assertEqual(3, $count);
  }


  /**
   * Ensure that repeater does not repeat a given stylesheet if result of
   * applying the counter stylesheet is zero.
   */
  function testRepeatZero() {
    if (!$this->xsl_available) {
        return;
    }

    // counter stylesheet: just return '0' on any input.
    $counterxslt =
      '<?xml version="1.0" encoding="UTF-8"?>' .
      '<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">' .
      '<xsl:output method="text" encoding="UTF-8"/>' .
      '<xsl:template match="/">' .
      '0' .
      '</xsl:template>' .
      '</xsl:stylesheet>';
    $zeroproc = new XSLTProcessor();
    $doc = new DOMDocument();
    $doc->loadXML($counterxslt);
    $zeroproc->importStylesheet($doc);

    $counter = new XSLTChain();
    $counter->addProcessor($zeroproc);

    $chain = new XSLTChain();
    $mapper = new XSLTRepeat($counter, $chain);

    $mapper->run('<anything/>');

    foreach ($mapper as $index => $repeated) {
      $this->fail('Repeater must not repeat the stylesheet if the result of applying the counter stylesheet was zero');
    }
  }


  /**
   * Ensure that repeater throws an exception if the result of applying the
   * counter stylesheet is not a 0/positive integer.
   */
  function testRepeatMustFailIfStylesheetOutputIsNotAPositiveInteger() {
    if (!$this->xsl_available) {
        return;
    }

    // nonumber stylesheet: just return '3' on any input.
    $nonumberxslt =
      '<?xml version="1.0" encoding="UTF-8"?>' .
      '<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">' .
      '<xsl:output method="text" encoding="UTF-8"/>' .
      '<xsl:template match="/">' .
      'this is not a number!' .
      '</xsl:template>' .
      '</xsl:stylesheet>';
    $nonumberproc = new XSLTProcessor();
    $doc = new DOMDocument();
    $doc->loadXML($nonumberxslt);
    $nonumberproc->importStylesheet($doc);

    $counter = new XSLTChain();
    $counter->addProcessor($nonumberproc);

    $chain = new XSLTChain();
    $mapper = new XSLTRepeat($counter, $chain);

    try {
      $mapper->run('<anything/>');
      $this->fail('XSLTRepeat::run should throw an Exception if the result of applying the counter stylesheet is not a positive integer');
    }
    catch (Exception $e) {
      // expected
    }
  }
}
