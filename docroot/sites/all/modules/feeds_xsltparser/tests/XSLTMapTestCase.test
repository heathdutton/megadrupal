<?php
/**
 * @file:   Test cases for XSLTMap
 */

class XSLTMapTestCase extends DrupalUnitTestCase {
  private $xsl_available;

  public static function getInfo() {
    return array(
      'name' => 'XSLTMap test',
      'description' => 'Unit tests for XSLTMap class',
      'group' => 'XSLT Pipeline Parser',
    );
  }

  function setUp() {
    parent::setUp();

    $this->xsl_available = extension_loaded('xsl');

    if (!$this->xsl_available) {
        trigger_error('XSL Extension is not available on this system. Skipping this test.', E_USER_NOTICE);
        return;
    }

    // prevent auto loading cause that seems to involve database queries
    module_load_include('inc', 'feeds_xsltparser', 'include/LibXMLException');
    module_load_include('inc', 'feeds_xsltparser', 'include/XSLTPipe');
    module_load_include('inc', 'feeds_xsltparser', 'include/XSLTChain');
    module_load_include('inc', 'feeds_xsltparser', 'include/XSLTMap');
  }

  function testMapRun() {
    if (!$this->xsl_available) {
        return;
    }

    $first_xslt =
      '<?xml version="1.0" encoding="UTF-8"?>' .
      '<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">' .
      '<xsl:output method="text" encoding="UTF-8"/>' .
      '<xsl:template match="input">' .
      'simple' .
      '</xsl:template>' .
      '</xsl:stylesheet>';
    $first_proc = new XSLTProcessor();
    $doc = new DOMDocument();
    $doc->loadXML($first_xslt);
    $first_proc->importStylesheet($doc);
    $first_chain = new XSLTChain();
    $first_chain->addProcessor($first_proc);

    $second_xslt =
      '<?xml version="1.0" encoding="UTF-8"?>' .
      '<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">' .
      '<xsl:output method="text" encoding="UTF-8"/>' .
      '<xsl:param name="_item"/>' .
      '<xsl:template match="input">' .
      'Hello <xsl:value-of select="$_item"/>' .
      '</xsl:template>' .
      '</xsl:stylesheet>';
    $second_proc = new XSLTProcessor();
    $doc = new DOMDocument();
    $doc->loadXML($second_xslt);
    $second_proc->importStylesheet($doc);
    $second_chain = new XSLTChain();
    $second_chain->addProcessor($second_proc);

    $mapper = new ArrayIterator(array(
      'field1' => $first_chain,
      'field2' => $second_chain,
    ));

    $map = new XSLTMap($mapper, '_item');
    $result = $map->run('<input/>');

    $this->assertTrue(is_array($result), 'Result of XSLTMap::run() must be an array');
    $this->assertEqual(2, count($result), 'Result must have the same number of elements as the map');
    $this->assertEqual(array('field1', 'field2'), array_keys($result), 'Result array must have the same keys as the map');
    $this->assertEqual('simple', $result['field1']);
    $this->assertEqual('Hello field2', $result['field2']);
  }

  function testMapWithPreproc() {
    if (!$this->xsl_available) {
        return;
    }

    $preproc_xslt =
      '<?xml version="1.0" encoding="UTF-8"?>' .
      '<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">' .
      '<xsl:output method="xml" encoding="UTF-8"/>' .
      '<xsl:template match="/">' .
      '<preprocessed/>' .
      '</xsl:template>' .
      '</xsl:stylesheet>';
    $preproc_proc = new XSLTProcessor();
    $doc = new DOMDocument();
    $doc->loadXML($preproc_xslt);
    $preproc_proc->importStylesheet($doc);
    $preproc_chain = new XSLTChain();
    $preproc_chain->addProcessor($preproc_proc);

    $first_xslt =
      '<?xml version="1.0" encoding="UTF-8"?>' .
      '<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">' .
      '<xsl:output method="text" encoding="UTF-8"/>' .
      '<xsl:template match="preprocessed">' .
      'perfect' .
      '</xsl:template>' .
      '</xsl:stylesheet>';
    $first_proc = new XSLTProcessor();
    $doc = new DOMDocument();
    $doc->loadXML($first_xslt);
    $first_proc->importStylesheet($doc);
    $first_chain = new XSLTChain();
    $first_chain->addProcessor($first_proc);

    $second_xslt =
      '<?xml version="1.0" encoding="UTF-8"?>' .
      '<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">' .
      '<xsl:output method="text" encoding="UTF-8"/>' .
      '<xsl:template match="preprocessed">' .
      'success' .
      '</xsl:template>' .
      '</xsl:stylesheet>';
    $second_proc = new XSLTProcessor();
    $doc = new DOMDocument();
    $doc->loadXML($second_xslt);
    $second_proc->importStylesheet($doc);
    $second_chain = new XSLTChain();
    $second_chain->addProcessor($second_proc);

    $mapper = new ArrayIterator(array(
      'field1' => $first_chain,
      'field2' => $second_chain,
    ));

    $map = new XSLTMap($mapper, '_item', $preproc_chain);
    $result = $map->run('<ignored/>');

    $this->assertEqual(array('field1' => 'perfect', 'field2' => 'success'), $result, 'Preprocessor stylesheet must be applied to all chains.');
  }
}
