<?php

/**
 * @file
 * Functional tests for the commerce_goodrelations module.
 */


/**
 * Tests Good Relations markup for a product display.
 */
class CommerceGoodRelationsTestCase extends CommerceBaseTestCase {
  /**
   * Product that is being added to the cart.
   */
  protected $product;

  /**
   * Product display.
   */
  protected $product_node;

  /**
   * Product display content type machine name.
   */
  protected $product_display_name;

  /**
   * Product field machine name.
   */
  protected $field_product_name;


  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Good Relations RDFa',
      'description' => 'Test Good Relations markup on product display.',
      'group' => 'Drupal Commerce',
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    $modules = parent::setUpHelper('all', array('commerce_goodrelations', 'fivestar'));
    parent::setUp($modules);

    // Use non-default machine names for the product display content type and
    // the product_field to make sure these default values are not assumed.
    $this->product_display_name = 'cgr_product_display_test';
    $this->field_product_name = 'cgr_field_product_test';

    $this->site_admin = $this->createSiteAdmin();
    $this->store_admin = $this->createStoreAdmin();
    $this->store_customer = $this->createStoreCustomer();

    // Create a dummy product display content type.
    $this->createDummyProductDisplayContentType($this->product_display_name, TRUE, $this->field_product_name);

    // Create dummy product display nodes (and their corresponding product
    //  entities).
    $sku = 'PROD-01';
    $product_name = 'Product One';
    $this->product = $this->createDummyProduct($sku, $product_name);
    $this->product_wrapper = entity_metadata_wrapper('commerce_product', $this->product);
    $this->product_node = $this->createDummyProductNode(array($this->product->product_id), $product_name, $this->product_display_name, $this->field_product_name);
    $this->path = 'node/' . $this->product_node->nid;
    $this->uri = url($this->path, array('absolute' => TRUE));
  }

  /**
   * Test if the product form has the correct structure.
   */
  public function testCommerceGoodRelationsMarkup() {
    // Log out to view the product display as anonymous.
    $this->drupalLogout();
    // Go to cart url.
    $this->drupalGet($this->path);

    // Parse RDFa.
    module_enable(array('rdfa'));
    rdfa_include_easyrdf();
    $graph = new \EasyRdf_Graph($this->uri, $this->drupalGet($this->path), 'rdfa');
    //debug($graph->toArray());

    // Verify price markup.
    $this->checkPriceMarkup($graph);

    // Test fivestar integration.
    // Create fivestar field instance.
    $field = array(
      'field_name' => 'fivestar_test',
      'type' => 'fivestar',
      'cardinality' => 1,
      'settings' => array(
        'axis' => 'vote',
      ),
    );
    field_create_field($field);
    $instance = array(
      'entity_type' => 'node',
      'field_name' => 'fivestar_test',
      'label' => 'Fivestar test field',
      'bundle' => $this->product_display_name,
      'widget' => array(
        'type' => 'stars',
        'settings' => array(
          'widget' => array(
            'fivestar_widget' => 'default',
          ),
        ),
      ),
      'settings' => array(
        'axis' => 'vote',
        'stars' => '5',
      ),
      'display' => array(),
    );
    field_create_instance($instance);

    // Set a rating on the product display node.
    $this->drupalLogin($this->site_admin);
    $this->drupalGet($this->path);
    $this->drupalGet($this->path . '/edit');

    $edit = array(
      'fivestar_test[und][0][rating]' => '80' // Equals a rating of 4 stars.
    );
    $this->drupalPost($this->path . '/edit', $edit, t('Save'));

    // Parse RDFa.
    $graph = new \EasyRdf_Graph($this->uri, $this->drupalGet($this->path), 'rdfa');
    //debug($graph->toArray());

    // Verify price and rating markup.
    $this->checkPriceMarkup($graph);
    $this->checkRatingMarkup($graph);
  }


  /**
   * Helper function to check if price markup is present.
   */
  public function checkPriceMarkup($graph) {
    // Offering type.
    $this->assertEqual($graph->type($this->uri . '#gr-offering'), 'gr:Offering', 'Offering type was found (gr:Offering).');
    // Offering name.
    $expected_value = array(
      'type' => 'literal',
      'value' => $this->product_wrapper->title->value(),
      'lang' => 'en',
    );
    $this->assertTrue($graph->hasProperty($this->uri . '#gr-offering', 'gr:name', $expected_value), 'Offering name was found (gr:name).');
    // Offering price resource.
    $expected_value = array(
      'type' => 'uri',
      'value' => $this->uri . '#gr-price',
    );
    $this->assertTrue($graph->hasProperty($this->uri . '#gr-offering', 'gr:hasPriceSpecification', $expected_value), 'Offering price was found (gr:hasPriceSpecification).');

    // Price type.
    $this->assertEqual($graph->type($this->uri . '#gr-price'), 'gr:UnitPriceSpecification', 'Price type was found (gr:UnitPriceSpecification).');
    // Price value.
    $expected_value = array(
      'type' => 'literal',
      'value' => $this->product_wrapper->commerce_price->amount->value() / 100,
      'lang' => 'en',
    );
    $this->assertTrue($graph->hasProperty($this->uri . '#gr-price', 'gr:hasCurrencyValue', $expected_value), 'Price value was found (gr:hasCurrencyValue).');
    // Price currency.
    $expected_value = array(
      'type' => 'literal',
      'value' => $this->product_wrapper->commerce_price->currency_code->value(),
      'lang' => 'en',
    );
    $this->assertTrue($graph->hasProperty($this->uri . '#gr-price', 'gr:hasCurrency', $expected_value), 'Price currency was found (gr:hasCurrency).');
  }

  /**
   * Helper function to check if aggregate review markup is present.
   */
  public function checkRatingMarkup($graph) {
    // Offering aggregate review resource.
    $expected_value = array(
      'type' => 'uri',
      'value' => $this->uri . '#gr-review-agg',
    );
    $this->assertTrue($graph->hasProperty($this->uri . '#gr-offering', 'v:hasReview', $expected_value), 'Offering aggregate review was found (v:hasReview).');
    // Aggregate review type.
    $this->assertEqual($graph->type($this->uri . '#gr-review-agg'), 'v:Review-aggregate', 'Aggregate review type was found (v:Review-aggregate).');
    // Rating.
    $expected_value = array(
      'type' => 'literal',
      'value' => '4',
      'lang' => 'en',
    );
    $this->assertTrue($graph->hasProperty($this->uri . '#gr-review-agg', 'v:rating', $expected_value), 'Rating was found (v:rating).');
    // Count.
    $expected_value = array(
      'type' => 'literal',
      'value' => '1',
      'lang' => 'en',
    );
    $this->assertTrue($graph->hasProperty($this->uri . '#gr-review-agg', 'v:count', $expected_value), 'Count was found (v:count).');

  }

}
