<?php

/**
 * Implements hook_theme().
 */
function commerce_goodrelations_theme() {
  return array(
    'commerce_goodrelations_metadata' => array(
      'variables' => array('commerce_goodrelations_metadata' => array()),
    ),
  );
}

/**
 * Implements MODULE_preprocess_HOOK().
 */
function commerce_goodrelations_preprocess_node(&$variables) {
  // Selects the first commerce_product_reference field name found in this
  // content type.
  $product_field_name = current(commerce_goodrelations_get_product_field_name($variables['type']));

  // Only add GoodRelations markup on full node view with a product field.
  if ($variables['page'] && $product_field_name) {
    $variables['commerce_goodrelations_metadata']['title'] = $variables['title'];
    // Extracts relevant values from the product entity using Entity API wrapper.
    $product_property = entity_metadata_wrapper('node', $variables['nid'])->{$product_field_name};
    // Extract price from product variations or single product.
    if ($product_property instanceof EntityListWrapper) {
      $commerce_price = $product_property[0]->commerce_price->value();
    }
    else {
      $commerce_price = $product_property->commerce_price->value();
    }
    $price = $commerce_price['amount'];
    $currency = $commerce_price['currency_code'];

    // The price is expressed in cents in Commerce, and needs to be
    // converted to regular currency unit (e.g. dollars).
    $variables['commerce_goodrelations_metadata']['price'] = check_plain($commerce_price['amount'] / 100);
    $variables['commerce_goodrelations_metadata']['currency'] = check_plain($commerce_price['currency_code']);

    // Support for ratings via fivestar / voting API.
    if (module_exists('votingapi')) {
      foreach (votingapi_select_results(array('entity_type' => 'node', 'entity_id' => $variables['nid'], 'tag' => 'vote')) as $result) {
        switch ($result['function']) {
          case 'count' :
            $variables['commerce_goodrelations_metadata']['reviews_count'] = $result['value'];
            break;
          case 'average' :
            $variables['commerce_goodrelations_metadata']['reviews_average'] = round(($result['value']/100) * 5, 1);
            break;
        }
      }
    }
  }
}

/**
 * Helper function to discover commerce_product_reference fields given a
 * content type.
 */
function commerce_goodrelations_get_product_field_name($content_type) {
  $product_reference_fields = array();
  $field_info_map = field_info_field_map();
  foreach (field_info_instances('node', $content_type) as $field_name => $field_info) {
    if (!empty($field_info_map[$field_name]['type']) && $field_info_map[$field_name]['type'] == 'commerce_product_reference') {
      $product_reference_fields[] = $field_name;
    }
  }

  return $product_reference_fields;
}

/**
 * Returns HTML RDFa markup containing GoodRelations metadata.
 *
 * @param $variables
 *   An associative array containing:
 *   - commerce_goodrelations_metadata: An array of values about the product to be described
 *     in RDFa using the GoodRelations vocabulary.
 *
 * @see commerce_goodrelations_process()
 * @ingroup themeable
 * @ingroup rdf
 */
function theme_commerce_goodrelations_metadata($variables) {
  $output  = '<div prefix="gr: http://purl.org/goodrelations/v1# v: http://rdf.data-vocabulary.org/#" resource="#gr-offering" typeof="gr:Offering">';
  $output .= '  <span property="gr:name" content="' . $variables['commerce_goodrelations_metadata']['title'] . '"></span>';
  $output .= '  <span property="gr:hasPriceSpecification" resource="#gr-price" typeof="gr:UnitPriceSpecification">';
  $output .= '    <span property="gr:hasCurrencyValue" content="' . $variables['commerce_goodrelations_metadata']['price'] . '"></span>';
  $output .= '    <span property="gr:hasCurrency" content="' . $variables['commerce_goodrelations_metadata']['currency'] . '"></span>';
  $output .= '  </span>';

  // Adds markup for ratings if available.
  if (!empty($variables['commerce_goodrelations_metadata']['reviews_count']) && !empty($variables['commerce_goodrelations_metadata']['reviews_average'])) {
    $output .= '<span property="v:hasReview" resource="#gr-review-agg" typeof="v:Review-aggregate">';
    $output .= '  <span property="v:rating" content="' . $variables['commerce_goodrelations_metadata']['reviews_average'] . '"></span>';
    $output .= '  <span property="v:count" content="' . $variables['commerce_goodrelations_metadata']['reviews_count'] . '"></span>';
    $output .= '  </span>';
  }

  $output .= '</div>';
  return $output;
}

/**
 * Template process function for adding GoodRelations metadata RDFa markup.
 */
function commerce_goodrelations_process(&$variables, $hook) {
  // Places the GoodRelations RDFa metadata snippet at the bottom of the node body.
  if (!empty($variables['commerce_goodrelations_metadata'])) {
    if (!isset($variables['content']['#suffix'])) {
      $variables['content']['#suffix'] = '';
    }
    $variables['content']['#suffix'] = theme('commerce_goodrelations_metadata', array('commerce_goodrelations_metadata' => $variables['commerce_goodrelations_metadata'])) . $variables['content']['#suffix'];
  }
}

