<?php

/**
 * @file
 * Module enabling TUPAS authentication in Drupal.
 */

/**
 * Name of the Tupas authenticated role.
 */
define('TUPAS_ROLE_NAME', 'tupas authenticated user');

/**
 * Implements hook_permission().
 */
function tupas_permission() {
  return array(
    'administer tupas' => array(
      'title' => t('Administer TUPAS'),
      'description' => t('Administer settings for TUPAS authentication module'),
    ),
    'access tupas' => array(
      'title' => t('Access TUPAS'),
      'description' => t('Access TUPAS authentication'),
    ),
    'access areas requiring tupas authentication' => array(
      'title' => t('Access areas requiring TUPAS authentication'),
      'description' => t('Access areas requiring TUPAS authentication'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function tupas_menu() {
  $items = array(
    // Parent menu item
    'admin/config/people/tupas' => array(
      'title' => 'TUPAS authentication',
      'description' => 'General settings of the TUPAS authentication module',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tupas_settings_form'),
      'access arguments' => array('administer tupas'),
    ),
    // General settings page
    'admin/config/people/tupas/general' => array(
      'title' => 'General TUPAS settings',
      'description' => 'General settings of the TUPAS authentication module',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tupas_settings_form'),
      'access arguments' => array('administer tupas'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
    ),
    // Bank settings page
    'admin/config/people/tupas/banks' => array(
      'title' => 'TUPAS bank settings',
      'description' => 'Settings of the banks enabled in the TUPAS authentication module',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tupas_bank_settings_form'),
      'access arguments' => array('administer tupas'),
      'type' => MENU_LOCAL_TASK,
    ),
  );

  return $items;
}

/**
 * Implements hook_forms().
 */
function tupas_forms($form_id, $args) {
  $forms = array();
  $banks = db_query("SELECT * FROM {tupas_bank} WHERE enabled = :enabled", array(':enabled' => 1));
  foreach ($banks as $bank) {
    $forms['tupas_form'.$bank->shortname] = array(
      'callback' => 'tupas_form',
    );
  }
  return $forms;
}

/**
 * Builds the form with hidden fields and their values according to the bank data.
 */
function tupas_form($form, &$form_state, $bank, $transaction_id = '') {
  // Action URL.
  $form['#action'] = $bank->action_url;
  // To help with the theming stuff.
  $form['#attributes'] = array('class' => array('tupas-form'));

  // Message type (defaults to '701' on all banks).
  $form['A01Y_ACTION_ID'] = array(
    '#type' => 'hidden',
    '#value' => '701',
  );

  // Version (depends on the bank).
  $form['A01Y_VERS'] = array(
    '#type' => 'hidden',
    '#value' => $bank->cert_version,
  );

  // Service provider ID.
  $form['A01Y_RCVID'] = array(
    '#type' => 'hidden',
    '#value' => $bank->rcv_id,
  );

  // Language code (by ISO 639 definition: FI = Finnish, SV = Swedish, EN = English).
  $form['A01Y_LANGCODE'] = array(
    '#type' => 'hidden',
    // @todo Make configurable.
    '#value' => 'FI',
  );

  // @todo Validate transaction ID length (should be 6 digits in order not to
  // exceed the total length of A01Y_STAMP, which is exactly 20 digits).
  if ($transaction_id == '') {
    $transaction_id = rand(100000, 999999);
  }
  $stamp = date('YmdHis') . str_pad($transaction_id, 6, 0, STR_PAD_LEFT);

  // Personalization of the request (stamp).
  $form['A01Y_STAMP'] = array(
    '#type' => 'hidden',
    '#value' => $stamp,
  );

  // Type of the personalization data (see the TUPAS documentation appendix 2).
  $idtype = variable_get('idtype', 12);
  $form['A01Y_IDTYPE'] = array(
    '#type' => 'hidden',
    '#value' => $idtype,
  );

  // Return link on success.
  $retlink = url(variable_get('authenticated_goto', 'tupas_test_return') . '/' . $bank->id . '/' . $transaction_id, array('absolute' => TRUE));
  $form['A01Y_RETLINK'] = array(
    '#type' => 'hidden',
    '#value' => $retlink,
  );

  // Return link on cancel.
  $canlink = url(variable_get('canceled_goto', 'tupas_test_return_can'), array('absolute' => TRUE));
  $form['A01Y_CANLINK'] = array(
    '#type' => 'hidden',
    '#value' => $canlink,
  );

  // Return link on failure.
  $rejlink = url(variable_get('rejected_goto', 'tupas_test_return_rej'), array('absolute' => TRUE));
  $form['A01Y_REJLINK'] = array(
    '#type' => 'hidden',
    '#value' => $rejlink,
  );

  // MAC key version.
  $form['A01Y_KEYVERS'] = array(
    '#type' => 'hidden',
    '#value' => $bank->keyvers,
  );

  // Algorithm used to calculate the MAC (01 = MD5, 02 = SHA-1, 03 = SHA256).
  $form['A01Y_ALG'] = array(
    '#type' => 'hidden',
    '#value' => $bank->encryption_alg,
  );

  // Build the string to calculate the MAC with.
  $macstring = "701&{$bank->cert_version}&{$bank->rcv_id}&FI&$stamp&$idtype&$retlink&$canlink&$rejlink&{$bank->keyvers}&{$bank->encryption_alg}&{$bank->rcv_key}&";

  // Calculate the MAC based on the encryption algorithm.
  // 01 = md5, 03 = SHA256, 02 (and other) = SHA1  
  $mac = tupas_calculate_mac($macstring, $bank->encryption_alg);

  // MAC
  $form['A01Y_MAC'] = array(
    '#type' => 'hidden',
    '#value' => $mac,
  );

  // Submit button (if there's an image defined.
  if ($bank->image_button != '') {
    $form['submit'] = array(
      '#type' => 'image_button',
      '#title' => $bank->longname,
      '#value' => $bank->longname,
      '#src' => drupal_get_path('module', 'tupas') . '/images/' . $bank->image_button,
    );
  }
  // No image, use normal submit button.
  else {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t($bank->longname),
    );
  }

  return $form;
}

/**
 * Return data handler
 *
 * Handles the return values received from the bank as an $_GET array and
 * determines if the transaction was successful or not.
 *
 * Called from the return handler function of the module implementing
 * the TUPAS module.
 *
 * @param integer $bank_id
 *   ID of the bank we're handling.
 * @param integer $transaction_id
 *   Transaction ID (optional).
 * @return array|boolean
 *   The $_GET array on success, FALSE on failure.
 */
function tupas_return($bank_id, $transaction_id = '') {
  // Get the bank receiver key.
  $rcv_key = db_query("SELECT rcv_key FROM {tupas_bank} WHERE id = :id", array(':id' => array($bank_id)))->fetchField();;
  $macstring = '';

  // Loop throught the $_GET values and build the MAC string.
  foreach ($_GET as $key => $value) {
    // Drop $_GET['q'] and the bank's MAC from the string.
    if ($key != 'q' && $key != 'B02K_MAC') {
      $macstring .= $value . '&';
    }
  }
  // Append the receiver key from above.
  $macstring .= $rcv_key . '&';

  // Calculate the MAC based on the encryption algorithm.
  // 01 = md5, 03 = SHA256, 02 (and other) = SHA1
  $mac = tupas_calculate_mac($macstring, $_GET['B02K_ALG']);

  // MACs are matching.
  if ($_GET['B02K_MAC'] == $mac) {
    global $user;
    $account = user_load($user->uid);

    // Get the 'Tupas authenticated' role id.
    $rid = _tupas_role_id();

    // If the user doesn't already have the role, add it.
    if ($account->uid > 0 && !isset($account->roles[$rid])) {
      $roles = $account->roles + array($rid => TUPAS_ROLE_NAME);
      // For efficiency manually save the original account before applying
      // any changes.
      $account->original = clone $account;
      user_save($account, array('roles' => $roles));
    }

    // Set the expiration timestamp.
    $expiration_timestamp = NULL;
    if (variable_get('tupas_session_length', 30) != 0) {
      $expiration_timestamp = REQUEST_TIME + variable_get('tupas_session_length', 30) * 60;
    }

    // Check if user has an existing Tupas authentication.
    $existing_id = _tupas_user_existing($account->uid);

    // This user already has the active TUPAS authentication, update the
    // expiration timestamp and the transaction id.
    if (!empty($existing_id)) {
      $updated = db_update('tupas_user')
      ->fields(array(
        'transaction_id' => $transaction_id,
        'tupas_expiration_timestamp' => $expiration_timestamp,
      ))
      ->condition('uid', $account->uid)
      ->execute();
    }
    // Otherwise let's just insert a new row.
    else {
      $id = db_insert('tupas_user')
      ->fields(array(
        'uid' => $user->uid,
        'transaction_id' => $transaction_id,
        'tupas_expiration_timestamp' => $expiration_timestamp,
      ))
      ->execute();
    }

    // Just return the $_GET array for later use.
    return $_GET;
  }
  // MACs didn't match, return FALSE.
  else {
    return FALSE;
  }
}

/**
 * Check whether or not user has an active record on the 'tupas_user' table.
 *
 * @param integer $uid
 *   Uid of the user whose Tupas record we want to check.
 * @return integer/boolean $existing_id
 *   If existing Tupas record was found, return it's id. FALSE otherwise.
 */
function _tupas_user_existing($uid) {
  // Get existing Tupas user, if any
  $existing_id = FALSE;
  $existing_id = db_select('tupas_user', 'tu')
    ->fields('tu', array('id'))
    ->condition('uid', $uid)
    ->execute()->fetchField();
  return $existing_id;
}

/**
 * General settings form for the admin interface.
 *
 * @return array $form
 *   Form elements for the admin form via system_settings_form().
 */
function tupas_settings_form($form, $form_state) {

  $form['tupas_session_length'] = array(
    '#type' => 'textfield',
    '#title' => t('TUPAS authentication session length in minutes'),
    '#description' => t('Set to 0 for no limit (expires only on logout)'),
    '#default_value' => variable_get('tupas_session_length', 30),
    '#required' => TRUE,
  );
  $form['tupas_session_expire_logout'] = array(
    '#type' => 'checkbox',
    '#title' => t("Break user's Tupas authentication on logout"),
    '#description' => t('If selected, users need to re-authenticate after logging out if they want to access Tupas restricted features.'),
    '#default_value' => variable_get('tupas_session_expire_logout', 1),
  );
  $form['idtype'] = array(
    '#type' => 'textfield',
    '#title' => t('Identification type (A01Y_IDTYPE)'),
    '#description' => t('See the TUPAS authentication manual appendix 2 for reference'),
    '#default_value' => variable_get('idtype', 12),
    '#required' => TRUE,
  );
  $form['authenticated_goto'] = array(
    '#type' => 'textfield',
    '#title' => t('Location of the return handler function'),
    '#description' => t('Use a Drupal menu path. Bank ID and (optional) transaction ID will be appended to the URL as parameters.'),
    '#default_value' => variable_get('authenticated_goto', 'tupas_test_return'),
  );
  $form['canceled_goto'] = array(
    '#type' => 'textfield',
    '#title' => t('Landing page after canceled TUPAS authentication'),
    '#description' => t('Use a Drupal menu path. Leave empty to use the front page.'),
    '#default_value' => variable_get('canceled_goto', 'tupas_test_return_can'),
  );
  $form['rejected_goto'] = array(
    '#type' => 'textfield',
    '#title' => t('Landing page after rejected TUPAS authentication'),
    '#description' => t('Use a Drupal menu path. Leave empty to use the front page.'),
    '#default_value' => variable_get('rejected_goto', 'tupas_test_return_rej'),
  );
  $form['expired_goto'] = array(
    '#type' => 'textfield',
    '#title' => t('Landing page after expired TUPAS authentication'),
    '#description' => t('Use a Drupal menu path. Leave empty to use the front page.'),
    '#default_value' => variable_get('expired_goto', 'tupas'),
  );

  return system_settings_form($form);
}

/**
 * Form for the bank settings.
 *
 * @return array $form
 *   Form elements for the admin form via system_settings_form().
 */
function tupas_bank_settings_form($form, $form_state) {

  // @todo Handle required fields.

  // The list of banks will be stored here.
  $form['banks'] = array(
    '#type' => 'fieldset',
    '#title' => t('Banks using the TUPAS authentication'),
    '#tree' => TRUE,
  );

  // Get all banks from the database.
  $result = db_query("SELECT * FROM {tupas_bank}");

  // Loop through banks and build fieldsets and fields for each one of them.
  foreach ($result as $bank) {

    // Container for this bank settings.
    $form['banks'][$bank->shortname] = array(
      '#type' => 'fieldset',
      '#title' => t($bank->longname),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['banks'][$bank->shortname]['id'] = array(
      '#type' => 'hidden',
      '#value' => $bank->id,
    );
    $form['banks'][$bank->shortname]['enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enabled'),
      '#default_value' => $bank->enabled,
    );
    $form['banks'][$bank->shortname]['longname'] = array(
      '#type' => 'textfield',
      '#title' => t('Bank name'),
      '#default_value' => $bank->longname,
    );
    $form['banks'][$bank->shortname]['shortname'] = array(
      '#type' => 'textfield',
      '#title' => t('Machine readable name'),
      '#default_value' => $bank->shortname,
    );
    $form['banks'][$bank->shortname]['action_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Action URL'),
      '#default_value' => $bank->action_url,
    );
    $form['banks'][$bank->shortname]['cert_version'] = array(
      '#type' => 'textfield',
      '#title' => t('Certificate version (A01Y_VERS)'),
      '#default_value' => $bank->cert_version,
    );
    $form['banks'][$bank->shortname]['rcv_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Receiver ID (A01Y_RCVID)'),
      '#default_value' => $bank->rcv_id,
    );
    $form['banks'][$bank->shortname]['rcv_key'] = array(
      '#type' => 'textfield',
      '#title' => t('Receiver key'),
      '#default_value' => $bank->rcv_key,
    );
    $form['banks'][$bank->shortname]['keyvers'] = array(
      '#type' => 'textfield',
      '#title' => t('Key version (A01Y_KEYVERS)'),
      '#default_value' => $bank->keyvers,
    );
    $form['banks'][$bank->shortname]['encryption_alg'] = array(
      '#type' => 'textfield',
      '#title' => t('Encryption algorithm (A01Y_ALG)'),
      '#default_value' => $bank->encryption_alg,
    );
    $form['banks'][$bank->shortname]['image_button'] = array(
      '#type' => 'textfield',
      '#title' => t('Image button filename (put into ' . drupal_get_path('module', 'tupas') . '/images)'),
      '#default_value' => $bank->image_button,
    );
    $form['banks'][$bank->shortname]['delete'] = array(
      '#type' => 'checkbox',
      '#title' => t('Delete'),
    );
  }

  // 'Add a new bank' fieldset
  $form['new_bank'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add a new bank'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['new_bank']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enabled'),
  );
  $form['new_bank']['longname'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank name'),
  );
  $form['new_bank']['shortname'] = array(
    '#type' => 'textfield',
    '#title' => t('Machine readable name'),
  );
  $form['new_bank']['action_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Action URL'),
  );
  $form['new_bank']['cert_version'] = array(
    '#type' => 'textfield',
    '#title' => t('Certificate version'),
  );
  $form['new_bank']['rcv_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Receiver ID'),
  );
  $form['new_bank']['rcv_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Receiver key'),
  );
  $form['new_bank']['keyvers'] = array(
    '#type' => 'textfield',
    '#title' => t('Key version'),
  );
  $form['new_bank']['encryption_alg'] = array(
    '#type' => 'textfield',
    '#title' => t('Encryption algorithm (01 = MD5, 02 = SHA-1)'),
  );
  $form['new_bank']['image_button'] = array(
    '#type' => 'textfield',
    '#title' => t('Image button filename'),
  );

  // Submit button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );

  return $form;
}

/**
 * Submit handler for the bank settings form.
 *
 * Inserts new banks into the database and deletes selected banks.
 */
function tupas_bank_settings_form_submit($form, &$form_state) {
  // Prepare
  $banks = $form_state['values']['banks'];

  // Loop through the banks and delete / update according the changes.
  foreach ($banks as $bank) {
    // This is marked as 'deleted'.
    if ($bank['delete'] == 1) {
      // Delete from db.
      $deleted = db_delete('tupas_bank')
      ->condition('id', $bank['id'])
      ->execute();

      // Set status message for the user.
      if (!$deleted) {
        $msg = t('Failed to delete the bank (%bank).', array('%bank' => $bank['longname']));
        drupal_set_message($msg, 'error');
      }
      else {
        $msg = t('Bank %bank deleted successfully.', array('%bank' => $bank['longname']));
        drupal_set_message($msg);
      }
    }
    // Normal updates.
    else {
      // @todo Maybe do the update only if the data has changed.
      $result = db_update('tupas_bank')
      ->fields(array(
        'enabled' => $bank['enabled'],
        'longname' => $bank['longname'],
        'shortname' => $bank['shortname'],
        'action_url' => $bank['action_url'],
        'cert_version' => $bank['cert_version'],
        'rcv_id' => $bank['rcv_id'],
        'rcv_key' => $bank['rcv_key'],
        'keyvers' => $bank['keyvers'],
        'encryption_alg' => $bank['encryption_alg'],
        'image_button' => $bank['image_button'],
      ))
      ->condition('id', $bank['id'])
      ->execute();
    }
  }
  drupal_set_message(t('Bank settings saved.'));

  // New bank is being added.
  $new_bank = $form_state['values']['new_bank'];

  // @todo Improve this.
  if ($new_bank['shortname'] != '') {
    $result = $id = db_insert('tupas_bank')
    ->fields(array(
      'enabled' => $new_bank['enabled'],
      'longname' => $new_bank['longname'],
      'shortname' => $new_bank['shortname'],
      'action_url' => $new_bank['action_url'],
      'cert_version' => $new_bank['cert_version'],
      'rcv_id' => $new_bank['rcv_id'],
      'rcv_key' => $new_bank['rcv_key'],
      'keyvers' => $new_bank['keyvers'],
      'encryption_alg' => $new_bank['encryption_alg'],
      'image_button' => $new_bank['image_button'],
    ))
    ->execute();

    // Set status message for the user.
    if (!$result) {
      $msg = t('Failed to adding the new bank (%bank).', array('%bank' => $bank['longname']));
      drupal_set_message($msg, 'error');
    }
    else {
      $msg = t('New bank %bank was created successfully.', array('%bank' => $bank['longname']));
      drupal_set_message($msg);
    }
  }
}

/**
 * Implements hook_user().
 *
 * Remove the Tupas authenticated role from the user.
 * Remove the user from the tupas_bank table.
 */
function tupas_user_logout($account) {
  if (variable_get('tupas_session_expire_logout', 1) == 1) {
    // Remove the Tupas authenticated role from the user.
    _tupas_remove_role($account);

    // Remove user's record from the tupas_user db table.
    _tupas_user_delete($account);
  }
}

/**
 * Implements hook_init().
 *
 * @todo Documentation for this.
 */
function tupas_init() {
  global $user;

  // Get expiration timestamp for the user.
  $tupas_expiration_timestamp = db_select('tupas_user', 'u')
    ->fields('u', array('tupas_expiration_timestamp'))
    ->condition('u.uid', $user->uid)
    ->execute()
    ->fetchField();

  // If Tupas authentication timestamp has been set and it has expired.
  if (!empty($tupas_expiration_timestamp) && REQUEST_TIME > $tupas_expiration_timestamp) {

    // Get the Tupas authenticated role id.
    $role_id = _tupas_role_id();

    // Remove the Tupas authenticated role from the user.
    _tupas_remove_role($user);

    // Remove user's record from the tupas_user db table.
    _tupas_user_delete($user);

    // Show a warning message for the user.
    drupal_set_message(t('Your TUPAS authentication has expired.'), 'warning');

    // Redirect user.
    drupal_goto(variable_get('expired_goto', 'tupas'));
  }
}

/**
 * Implements hook_help().
 */
function tupas_help($path, $arg) {
  switch ($path) {
    case 'admin/help#tupas':
      // Return a line-break version of the module README.
      return check_markup(file_get_contents(dirname(__FILE__) . "/README.txt"));
  }
}

/**
 * Get the 'Tupas authenticated user' role id from the database.
 *
 * @return $rid
 *   ID of the Tupas authenticated user role. FALSE if nothing is found.
 */
function _tupas_role_id() {
  // Get the 'Tupas authenticated' role id.
  $rid = db_select('role', 'r')
    ->fields('r', array('rid'))
    ->condition('name', TUPAS_ROLE_NAME)
    ->execute()->fetchField();
  return $rid;
}

/**
 * Remove the 'Tupas authenticated user' role from the user.
 *
 * @param object $account
 *   A valid user object which Tupas role we will be removing.
 */
function _tupas_remove_role($account) {
  // Get the Tupas authenticated role id.
  $rid = _tupas_role_id();

  // User has the role that we need to remove.
  if ($account->uid > 0 && isset($account->roles[$rid])) {
    // For efficiency manually save the original account before applying any changes.
    $account->original = clone $account;

    // Unset the Tupas role and save the user.
    unset($account->roles[$rid]);
    user_save($account, array('roles' => $account->roles));
  }
}

/**
 * Remove user's record from the tupas_user db table.
 *
 * @param object $account
 *   A valid user object whose record will be removed from the database.
 */
function _tupas_user_delete($account) {
  $result = db_delete('tupas_user')
  ->condition('uid', $account->uid)
  ->execute();
}

/**
 * Calculate the MAC with given string and encryption algorithm.
 *
 * @param string $macstring
 *   A string where the MAC will be counted from.
 *   Should contain all values from the form or $_GET.
 * @param integer $algorithm
 *   Number of the algorithm to use to calculate the MAC.
 *   01 = md5, 03 = SHA256, 02 (and other) = SHA1
 * @return string $mac
 *  A string encrypted via selected algorithm.
 */
function tupas_calculate_mac($macstring, $algorithm) {
  $mac = '';
  // MD5
  if ($algorithm == 01) {
    $mac = strtoupper(md5($macstring));
  }
  // SHA256
  elseif ($algorithm == 03) {
    // Get all available algorithms.
    $algorithms = hash_algos();
    $mac = '';
    // SHA256 found.
    if (in_array('sha256', $algorithms)) {
      $mac = strtoupper(hash('sha256', $macstring));
    }
    // SHA256 should (?) be available everywhere but if not, let's make sure
    // the user and admin are notified.
    else {
      drupal_set_message(t('There were an error when trying to calculate the MAC code. Please contact the site administrator.'), 'error', FALSE);
      watchdog('tupas', t('SHA256 algorithm was not found when trying to calculate MAC.'), array(), WATCHDOG_ERROR);
    }
  }
  // SHA1
  else {
    $mac = strtoupper(sha1($macstring));
  }
  return $mac;
}
