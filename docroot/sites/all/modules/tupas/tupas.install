<?php

/**
 * @file
 * Install, update and uninstall functions for the TUPAS module.
 */

/**
 * Implements hook_schema().
 */
function tupas_schema() {
  $schema = array();

  // The Tupas bank table containing information about the banks.
  $schema['tupas_bank'] = array(
    'description' => 'Banks supported by the TUPAS module',
    'fields' => array(
      'id' => array(
        'description' => 'bank id',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'shortname' => array(
        'description' => 'machine readable name of the bank',
        'type' => 'text',
      ),
      'longname' => array(
        'description' => 'original name of the bank',
        'type' => 'text',
      ),
      'enabled' => array(
        'description' => 'enable/disable the bank',
        'type' => 'int',
      ),
      'action_url' => array(
        'description' => 'form action URL',
        'type' => 'text',
      ),
      'cert_version' => array(
        'description' => 'certificate version',
        'type' => 'text',
      ),
      'rcv_id' => array(
        'description' => 'receiver id',
        'type' => 'text',
      ),
      'rcv_key' => array(
        'description' => 'receiver key',
        'type' => 'text',
      ),
      'keyvers' => array(
        'description' => 'key version',
        'type' => 'text',
      ),
      'encryption_alg' => array(
        'description' => 'encryption algorithm',
        'type' => 'text',
      ),
      'image_button' => array(
        'description' => 'image button filename',
        'type' => 'text',
      ),
    ),
    'primary key' => array('id'),
  );

  // The Tupas user table containing information about active Tupas sessions.
  $schema['tupas_user'] = array(
    'description' => 'TUPAS users',
    'fields' => array(
      'id' => array(
        'description' => 'tupas user id',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'drupal user id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'transaction_id' => array(
        'description' => 'transaction id',
        'type' => 'int',
        'size' => 'medium',
      ),
      'tupas_expiration_timestamp' => array(
        'description' => 'tupas authentication expiration timestamp',
        'type' => 'text',
      ),
    ),
    'unique keys' => array(
      'uid' => array('uid'),
      'transaction_id' => array('transaction_id'),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function tupas_install() {

  $banks = array(
    // Handelsbanken
    array(
      'shortname' => 'handelsbanken',
      'longname' => 'Handelsbanken',
      'enabled' => 1,
      'action_url' => 'https://tunnistepalvelu.samlink.fi/TupasTunnistus/SHBtupas.html',
      'cert_version' => '0002',
      'rcv_id' => '1111111111111',
      'rcv_key' => '11111111111111111111',
      'keyvers' => '0001',
      'encryption_alg' => '01',
      'image_button' => 'handelsbanken.gif',
    ),
    // Nordea
    array(
      'shortname' => 'nordea',
      'longname' => 'Nordea',
      'enabled' => 1,
      'action_url' => 'https://solo3.nordea.fi/cgi-bin/SOLO3011',
      'cert_version' => '0002',
      'rcv_id' => '87654321',
      'rcv_key' => 'LEHTI',
      'keyvers' => '0001',
      'encryption_alg' => '01',
      'image_button' => 'nordea.gif',
    ),
    // Osuuspankit
    array(
      'shortname' => 'osuuspankki',
      'longname' => 'Osuuspankit',
      'enabled' => 1,
      'action_url' => 'https://kultaraha.op.fi/cgi-bin/krcgi',
      'cert_version' => '0003',
      'rcv_id' => 'Esittelymyyja',
      'rcv_key' => 'Esittelykauppiaansalainentunnus',
      'keyvers' => '0001',
      'encryption_alg' => '02',
      'image_button' => 'osuuspankki.gif',
    ),
    // Sampo
    array(
      'shortname' => 'sampo',
      'longname' => 'Sampo pankki',
      'enabled' => 0,
      'action_url' => 'https://verkkopankki.sampopankki.fi/SP/tupaha/TupahaApp',
      'cert_version' => '0003',
      'rcv_id' => '000000000000',
      'rcv_key' => 'jumCLB4T2ceZWGJ9ztjuhn5FaeZnTm5HpfDXWU2APRqfDcsrBs8mqkFARzm7uXKd',
      'keyvers' => '0001',
      'encryption_alg' => '02',
      'image_button' => 'sampo.gif',
    ),
    // Säästöpankit ja paikallisosuuspankit
    array(
      'shortname' => 'saastopankit',
      'longname' => 'Säästöpankit ja paikallisosuuspankit',
      'enabled' => 1,
      'action_url' => 'https://tunnistepalvelu.samlink.fi/TupasTunnistus/TupasServlet',
      'cert_version' => '0002',
      'rcv_id' => '1111111111111',
      'rcv_key' => '11111111111111111111',
      'keyvers' => '0001',
      'encryption_alg' => '01',
      'image_button' => 'sp_pop.gif',
    ),
    // Tapiola
    array(
      'shortname' => 'tapiola',
      'longname' => 'Tapiola pankki',
      'enabled' => 1,
      'action_url' => 'https://pankki.tapiola.fi/service/identify',
      'cert_version' => '0002',
      'rcv_id' => 'TAPTUPASID',
      'rcv_key' => 'PAPAKAIJU',
      'keyvers' => '0001',
      'encryption_alg' => '01',
      'image_button' => 'tapiola.gif',
    ),
    // Ålandsbanken
    array(
      'shortname' => 'alandsbanken',
      'longname' => 'Ålandsbanken',
      'enabled' => 0,
      'action_url' => '',
      'cert_version' => '',
      'rcv_id' => '',
      'rcv_key' => '',
      'keyvers' => '0001',
      'encryption_alg' => '',
      'image_button' => 'alandsbanken.gif',
    ),
    // S-pankki
    array(
      'shortname' => 'spankki',
      'longname' => 'S-Pankki',
      'enabled' => 1,
      'action_url' => 'https://online.s-pankki.fi/service/identify',
      'cert_version' => '0002',
      'rcv_id' => 'SPANKKITUPAS',
      'rcv_key' => 'SPANKKI',
      'keyvers' => '0001',
      'encryption_alg' => '01',
      'image_button' => 'spankki.gif',
    ),
  );

  // Insert the default test banks into the database.
  foreach ($banks as $bankname => $bank) {
    $created = db_insert('tupas_bank')
    ->fields($bank)
    ->execute();

    // The bank was created, set a message.    
    if ($created > 0) {
      $options = array('@bank' => $bank['longname']);
      drupal_set_message(st("Configured Tupas test settings for the bank @bank.", $options));
    }
  }

  // Add the Tupas user role.
  $role_id = db_insert('role')
    ->fields(array('name' => TUPAS_ROLE_NAME))
    ->execute();

  // Add permissions.
  $permissions = array(
    'access tupas',
    'access areas requiring tupas authentication',
  );

  if(function_exists('user_role_grant_permissions')) {
    user_role_grant_permissions($role_id, $permissions);
  }
  // Notify the admin.
  $options = array(
    '!link' => l('Administer / Site configuration / TUPAS general settings', 'admin/config/people/tupas/general'),
    '!link2' => l('Administer / Site configuration / TUPAS bank settings', 'admin/config/people/tupas/banks')
  );
  drupal_set_message(st("TUPAS settings are available under !link and !link2", $options));
}

/**
 * Implements hook_uninstall().
 */
function tupas_uninstall() {
  // Include tupas.module so we can get the Tupas role name.
  module_load_include('module', 'tupas', 'tupas');

  // Delete role.
  db_delete('role')
  ->condition('name', TUPAS_ROLE_NAME)
  ->execute();

  // Delete permissions.
  db_delete('role_permission')
  ->condition('module', 'tupas')
  ->execute();

  // Delete configurations.
  // @todo This might be to hazardy?
  db_delete('variable')
  ->condition('name', 'tupas%', 'LIKE')
  ->execute();
}

/**
 * Update the bank image names into new ones. Add new ones if not existing.
 */
function tupas_update_7001() {
   // An array of the to-be-updated image files in format old_image => new_image.
  $images_update = array(
    'nordea_button_60x60px.gif' => 'nordea.gif',
    'op_white_bgr-14.gif' => 'osuuspankki.gif',
    'logo.gif' => 'sampo.gif',
    'sppopmaksu.gif' => 'sp_pop.gif',
    '60x60_Tapiola_maksupainike.gif' => 'tapiola.gif',
  );
  foreach ($images_update as $old => $new) {
    $existing = db_select('tupas_bank', 'tb')
            ->fields('tb', array('image_button'))
            ->condition('image_button', $old)
            ->execute()->fetchField();

    // Old was found, update it.
    if (!empty($existing)) {
      $updated = db_update('tupas_bank')
              ->fields(array('image_button' => $new))
              ->condition('image_button', $old)
              ->execute();
      $options = array('@old' => $old, '@new' => $new);
      $msg = t('Updated bank image path from @old to @new.', $options);
      drupal_set_message($msg);
    }
  }

  // An array of the new images that might not already exists in the system.
  $images_add = array(
    'handelsbanken' => 'handelsbanken.gif',
    'alandsbanken' => 'alandsbanken.gif',
    'spankki' => 'spankki.gif',
  );
  foreach ($images_add as $bankname => $new) {
    $existing = db_select('tupas_bank', 'tb')
            ->fields('tb', array('image_button'))
            ->condition('shortname', $bankname)
            ->execute()->fetchField();

    // Old was found, update it.
    if (empty($existing)) {
      db_update('tupas_bank')
              ->fields(array('image_button' => $new))
              ->condition('shortname', $bankname)
              ->execute();
      $msg = t('Added imagepath @new.', array('@new' => $new));
      drupal_set_message($msg);
    }
  }
}
