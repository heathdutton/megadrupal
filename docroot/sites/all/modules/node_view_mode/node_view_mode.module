<?php

/**
 * Implements hook_field_info().
 * Provides the view mode selector field.
 */
function node_view_mode_field_info() {
  return array(
    'node_view_mode_field_collection' => array(
      'label' => t('Field Collection View Mode'),
      'description' => t('Select list of view modes available for a field collection.'),
      'default_widget' => 'field_collection_select',
      'default_formatter' => 'field_collection_node_view_mode',
      'instance_settings' => array('field_collection' => array(), 'view_modes' => array()),
    ),
  );
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function node_view_mode_field_formatter_info_alter(&$infos) {

  if (isset($infos['cssclass_formatter'])) {
    $infos['cssclass_formatter']['field types'][] = 'node_view_mode_field_collection';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Runs a entity specific preprocess function, if it exists.
 */
function node_view_mode_preprocess_node(&$variables) {
  $elements = $variables['elements'];
  $entity_type = $elements['#entity_type']; // 'node', 'field_collection_item'
  $theme = $elements['#theme']; // 'node', 'entity'
  $entity = $elements['#' . $theme]; // this looks strange, but is probably the right way to do it.
  $bundle_name = $elements['#bundle'];
  $view_mode = $elements['#view_mode'];

  $fields_info = field_info_instances($entity_type, $bundle_name);
  $tids = array();

  foreach ($fields_info as $field_name => $instance) {
    $display = field_get_display($instance, $view_mode, $entity);

    if ($display['type'] == 'cssclass_formatter') {
      $field_info = field_info_field($field_name);
      $values = field_get_items($entity_type, $entity, $field_name);

      if ($values != FALSE) {
        foreach ($values as $delta => $field) {
          if ($field_info['type'] == 'node_view_mode_field_collection') {
            $variables['classes_array'][] = drupal_html_class('node-view-mode-' . $field['field_collection_select']);
          }
        }
      }
    }
  }

}

/**
 * Implements hook_field_widget_info().
 *
 */
function node_view_mode_field_widget_info() {
  return array(
    'field_collection_select' => array(
      'label' => t('Select'),
      'field types' => array('node_view_mode_field_collection'),
    ),
  );
}

/**
 * Implements hook_field_instance_settings_form().
 *
 */
function node_view_mode_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  $field_collections = array();
  $field_collection_item = entity_get_info('field_collection_item');

  foreach ($field_collection_item['bundles'] as $bundle_name => $bundle ) {
    $field_collections[$bundle_name] = $bundle_name;
  }

  $view_modes = array();
  $view_mode_defaults = array();

  foreach ($field_collection_item['view modes'] as $mode => $info) {
    $view_modes[$mode] = $info['label'];
  }

  if (isset($settings['view_modes']) && is_array($settings['view_modes'])) {
    $view_mode_defaults = array_filter($settings['view_modes']);
    $view_mode_defaults = array_values($view_mode_defaults);
  }

  $form['field_collection'] = array(
    '#type'          => 'select',
    '#required'      => TRUE,
    '#title'         => t('Field Collection'),
    '#description'   => t('Field collection that this field will affect.'),
    '#default_value' => isset($settings['field_collection']) ? $settings['field_collection'] : array(),
    '#empty_option'  => t('- Select -'),
    '#options'       => $field_collections,
  );

  $form['view_modes'] = array(
    '#type'          => 'checkboxes',
    '#title'         => t('View Modes'),
    '#description'   => t('Select the view modes available.'),
    '#default_value' => $view_mode_defaults,
    '#options'       => $view_modes,
    '#required'      => TRUE,
  );

  return $form;
}

/**
 * Implements hook_field_is_empty().
 */
function node_view_mode_field_is_empty($item, $field) {
  if ($field['type'] == 'field_collection_select') {
    return (empty($item['field_collection_select']));
  }

}

/**
 * Implements hook_field_widget_form().
 *
 */
function node_view_mode_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#delta' => $delta,
  );

  switch ($instance['widget']['type']) {
    case 'field_collection_select':
      $view_mode_options = array();

      if (isset($instance['settings']['view_modes']) && is_array($instance['settings']['view_modes'])) {
        $view_mode_options = array_filter($instance['settings']['view_modes']);

        // Add view mode labels.
        $field_collection_item = entity_get_info('field_collection_item');

        foreach ($field_collection_item['view modes'] as $mode => $info) {
          if (isset($view_mode_options[$mode])) {
            $view_mode_options[$mode] = $info['label'];
          }
        }

      }

      $element['field_collection_select'] = array(
        '#type'          => 'select',
        '#required'      => $element['#required'],
        '#title'         => $element['#title'],
        '#description'   => $element['#description'],
        '#default_value' => isset($items[$delta]['field_collection_select']) ? $items[$delta]['field_collection_select'] : '',
        '#empty_option'  => t('- Select -'),
        '#options'       => $view_mode_options,
      );

      break;
  }

  return $element;
}
/**
 * Implements hook_field_formatter_info().
 */
function node_view_mode_field_formatter_info() {
  return array(
    'field_collection_node_view_mode' => array(
      'label' => t('Selectable view modes'),
      'field types' => array('field_collection'),
      'settings' =>  array(
        'edit' => t('Edit'),
        'delete' => t('Delete'),
        'add' => t('Add'),
        'description' => TRUE,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function node_view_mode_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $elements = array();

  if ($display['type'] == 'field_collection_node_view_mode') {
    $elements['edit'] = array(
      '#type' => 'textfield',
      '#title' => t('Edit link title'),
      '#default_value' => $settings['edit'],
      '#description' => t('Leave the title empty, to hide the link.'),
    );
    $elements['delete'] = array(
      '#type' => 'textfield',
      '#title' => t('Delete link title'),
      '#default_value' => $settings['delete'],
      '#description' => t('Leave the title empty, to hide the link.'),
    );
    $elements['add'] = array(
      '#type' => 'textfield',
      '#title' => t('Add link title'),
      '#default_value' => $settings['add'],
      '#description' => t('Leave the title empty, to hide the link.'),
    );
    $elements['description'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show the field description beside the add link.'),
      '#default_value' => $settings['description'],
      '#description' => t('If enabled and the add link is shown, the field description is shown in front of the add link.'),
    );
  }

  return $elements;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function node_view_mode_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if ($display['type'] == 'field_collection_node_view_mode') {
    $links = array_filter(array_intersect_key($settings, array_flip(array('add', 'edit', 'delete'))));
    if ($links) {
      $summary[] = t('Links: @links', array('@links' => check_plain(implode(', ', $links))));
    }
    else {
      $summary[] = t('Links: none');
    }
  }

  return implode('<br>', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function node_view_mode_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  // Prevent Field Collection from trying to proccess a Node View Field Collection field.
  if ($field['type'] == 'node_view_mode_field_collection') {
    return $element;
  }

  switch ($display['type']) {

    case 'field_collection_node_view_mode':

      $element['#attached']['css'][] = drupal_get_path('module', 'field_collection') . '/field_collection.theme.css';

      // Work out which view mode to use.

      // Standard view mode of this entity.
      $view_mode = !empty($display['settings']['view_mode']) ? $display['settings']['view_mode'] : 'full';

      // View mode from associated view mode field (if any).
      $fields_info = field_info_instances($entity_type, $entity->type);

      // Loop through fields used on this entity.
      foreach ($fields_info as $field_name => $value) {
        // Get more info about this field.
        $field_info = field_info_field($field_name);

        // Check if it's a view mode selector field.
        if ($field_info['type'] == 'node_view_mode_field_collection') {

          // Get instance of this field used on this bundle, to check what field collection it's associated with.
          $view_mode_field = field_info_instance($entity_type, $field_name, $entity->type);

          // Check view mode field is set to affect the current field.
          if (isset($view_mode_field['settings']['field_collection']) && $view_mode_field['settings']['field_collection'] == $field['field_name']) {
            $display = field_get_items($entity_type, $entity, $field_name);
            $view_mode = $display[0]['field_collection_select'];
          }
        }
      }

      $view_mode = empty($view_mode) ? 'full' : $view_mode;
      $element['#attributes']['class'][] = drupal_clean_css_identifier('view-mode-' . $view_mode);

      foreach ($items as $delta => $item) {
        if ($field_collection = field_collection_field_get_entity($item)) {
          $element[$delta]['entity'] = $field_collection->view($view_mode);
          $element[$delta]['#theme_wrappers'] = array('field_collection_view');
          $element[$delta]['#attributes']['class'][] = 'field-collection-view';
          $element[$delta]['#attributes']['class'][] = 'clearfix';
          $element[$delta]['#attributes']['class'][] = drupal_clean_css_identifier('view-mode-' . $view_mode);

          $links = array(
            '#theme' => 'links__field_collection_view',
          );

          $links['#attributes']['class'][] = 'field-collection-view-links';

          foreach (array('edit', 'delete') as $op) {
            if (isset($settings[$op]) && $settings[$op] && field_collection_item_access($op == 'edit' ? 'update' : $op, $field_collection)) {
              $links['#links'][$op] = array(
                'title' => entity_i18n_string("field:{$field['field_name']}:{$instance['bundle']}:setting_$op", $settings[$op]),
                'href' => $field_collection->path() . '/' . $op,
                'query' => drupal_get_destination(),
              );
            }
          }

          $element[$delta]['links'] = $links;
        }
      }

      if (!empty($display['settings'])) {
        field_collection_field_formatter_links($element, $entity_type, $entity, $field, $instance, $langcode, $items, $display);
      }

      break;
  }

  return $element;
}








