<?php

/**
 * @file
 * Comment Counter
 */

/**
 * Implements hook_cron().
 */
function comment_counter_cron() {
  if (!comment_counter_enabled()) {
    return;
  }

  // Get last timestamp.
  $statistics_timestamp = variable_get('comment_counter_timestamp', '');

  // Set current timestamp.
  variable_set('comment_counter_timestamp', REQUEST_TIME);

  if (empty($statistics_timestamp)) {
    return;
  }

  // Get date.
  $now   = time();
  $day   = date('j', $now) | 0;
  $week  = date('W', $now) | 0;
  $month = date('n', $now) | 0;
  $year  = date('Y', $now) | 0;

  $statistics_day   = date('j', $statistics_timestamp) | 0;
  $statistics_week  = date('W', $statistics_timestamp) | 0;
  $statistics_month = date('n', $statistics_timestamp) | 0;
  $statistics_year  = date('Y', $statistics_timestamp) | 0;

  $fields = array();

  if ($day != $statistics_day || $month != $statistics_month || $year != $statistics_year) {
    // Reset day counts.
    $fields['comment_day_count'] = 0;
  }

  if ($week != $statistics_week || $year != $statistics_year) {
    // Reset week counts.
    $fields['comment_week_count'] = 0;
  }

  if ($month != $statistics_month || $year != $statistics_year) {
    // Reset month counts.
    $fields['comment_month_count'] = 0;
  }

  if ($year != $statistics_year) {
    // Reset year counts.
    $fields['comment_year_count'] = 0;
  }

  if (!empty($fields)) {
    // Reset year counts.
    db_update('node_comment_statistics')
      ->fields($fields)
      ->execute();
  }
}

/**
 * Implements hook_menu().
 */
function comment_counter_menu() {
  $items['admin/config/system/comment'] = array(
    'title'            => 'Comment',
    'description'      => 'Control details about what and how your site logs comment statistics.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('comment_counter_settings_form'),
    'access arguments' => array('administer comment counter'),
    'file'             => 'comment_counter.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function comment_counter_help($path, $arg) {
  switch ($path) {
    case 'admin/config/system/comment':
      return '<p>' . t('Settings for the statistical information that Drupal will keep about the site.') . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function comment_counter_permission() {
  return array(
    'administer comment counter' => array(
      'title' => t('Administer Comment Counter'),
    ),
  );
}

/**
 * Implements hook_comment_insert().
 */
function comment_counter_comment_insert($comment) {
  if (!comment_counter_enabled() || $comment->status != COMMENT_PUBLISHED) {
    return;
  }

  db_update('node_comment_statistics')
    ->expression('comment_day_count', 'comment_day_count + 1')
    ->expression('comment_week_count', 'comment_week_count + 1')
    ->expression('comment_month_count', 'comment_month_count + 1')
    ->expression('comment_year_count', 'comment_year_count + 1')
    ->condition('nid', $comment->nid)
    ->execute();
}

/**
 * Implements hook_comment_update().
 */
function comment_counter_comment_update($comment) {
  if (!comment_counter_enabled()) {
    return;
  }

  _comment_counter_update_statistics($comment->nid);
}

/**
 * Implements hook_comment_delete().
 */
function comment_counter_comment_delete($comment) {
  if (!comment_counter_enabled()) {
    return;
  }

  _comment_counter_update_statistics($comment->nid);
}

/**
 * Implements hook_module_implements_alter().
 */
function comment_counter_module_implements_alter(&$implementations, $hook) {
  $module_name = 'comment_counter';

  switch ($hook) {
    case 'cron':
      if (isset($implementations[$module_name])) {
        unset($implementations[$module_name]);
        $implementations[$module_name] = $hook;
      }

      break;
  }
}

/**
 * Implements hook_views_api().
 */
function comment_counter_views_api() {
  return array(
    'api'  => '3',
    'path' => drupal_get_path('module', 'comment_counter') . '/views',
  );
}

/**
 * Check counter status.
 */
function comment_counter_enabled() {
  // Allow bulk updates and inserts to temporarily disable the
  // maintenance of the {node_comment_statistics} table.
  return variable_get('comment_counter_count_comments', FALSE) && variable_get('comment_maintain_node_statistics', TRUE);
}

/**
 * Update node comment statistics.
 *
 * @param int $nid
 *   Content ID.
 */
function _comment_counter_update_statistics($nid) {
  // Get last timestamp.
  $statistics_timestamp = variable_get('comment_counter_timestamp', REQUEST_TIME);
  $statistics_date      = getdate($statistics_timestamp);

  $statistics = array(
    'comment_day_count'   => 0,
    'comment_week_count'  => 0,
    'comment_month_count' => 0,
    'comment_year_count'  => 0,
  );

  $query = '
    select  count(cid)
    from    {comment}
    where   nid = :nid
            and status = :status
            and created >= :min
            and created <= :max
  ';

  $args = array(
    ':nid'    => $nid,
    ':status' => COMMENT_PUBLISHED,
  );

  // Get all comments in this year.
  $args[':min'] = mktime(0, 0, 0, 1, 1, $statistics_date['year']);
  $args[':max'] = mktime(0, 0, 0, 12, 31, $statistics_date['year']);
  $statistics['comment_year_count'] = db_query($query, $args)->fetchField() | 0;

  if ($statistics['comment_year_count']) {
    // Get all comments in this month.
    $args[':min'] = mktime(0, 0, 0, $statistics_date['mon'], 1, $statistics_date['year']);
    $args[':max'] = mktime(23, 59, 59, $statistics_date['mon'], date('t', $statistics_timestamp), $statistics_date['year']);
    $statistics['comment_month_count'] = db_query($query, $args)->fetchField() | 0;

    if ($statistics['comment_month_count']) {
      // Get all comments in this week.
      $first_day = variable_get('date_first_day', 0, $statistics_timestamp);
      $args[':min'] = strtotime((-$statistics_timestamp['wday'] + $first_day) . ' days 00:00:00', $statistics_timestamp);
      $args[':max'] = strtotime('+' . (6 - $statistics_timestamp['wday'] + $first_day) . ' days 23:59:59', $statistics_timestamp);
      $statistics['comment_week_count'] = db_query($query, $args)->fetchField() | 0;

      if ($statistics['comment_week_count']) {
        // Get all comments today.
        $args[':min'] = mktime(0, 0, 0, $statistics_date['mon'], $statistics_date['mday'], $statistics_date['year']);
        $args[':max'] = mktime(23, 59, 59, $statistics_date['mon'], $statistics_date['mday'], $statistics_date['year']);
        $statistics['comment_day_count'] = db_query($query, $args)->fetchField() | 0;
      }
    }
  }

  db_update('node_comment_statistics')
    ->fields($statistics)
    ->condition('nid', $nid)
    ->execute();
}
