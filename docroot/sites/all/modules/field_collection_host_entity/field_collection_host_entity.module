<?php

/**
 * @file
 * Main module file.
 */

/**
 * Implements hook_entity_property_info_alter().
 */
function field_collection_host_entity_entity_property_info_alter(&$info) {
  // Make sure we have at least one field collection field.
  if (!isset($info['field_collection_item']['bundles'])) {
    return;
  }
  $collections = &$info['field_collection_item']['bundles'];
  // Field collections bundle is the field name.
  foreach ($collections as $field_name => &$collection) {
    // Because a field can be attached to multiple entity types, we need the
    // field info. We will then add a property for every entity type.
    $field_info = field_info_field($field_name);
    if (!isset($field_info['bundles']) || !is_array($field_info['bundles'])) {
      continue;
    }
    // Create a property named {entity}_host_entity for every entity where this
    // field collection is attached to.
    foreach ($field_info['bundles'] as $entity_type => $entity_bundles) {
      // Property name.
      $host_entity_property = "host_entity_{$entity_type}";
      $host_entity_info = entity_get_info($entity_type);
      $collections[$field_name]['properties'][$host_entity_property] = array(
        'label' => t('Host entity (@type)', array('@type' => $host_entity_info['label'])),
        'description' => t('The @type containing the field collection field (empty if this field collection is attached to an item of a different type).', array('@type' => $host_entity_info['label'])),
        'type' => $entity_type,
        'computed' => TRUE,
        'getter callback' => 'field_collection_item_get_host_entity',
      );
    }
  }
}
