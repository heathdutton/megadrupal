<?php
/**
 * @file
 * Path Checker module - paths under control. Path Checker is a module which
 * allows to check both custom internal or external URLs and it is very helpful
 * tool e.g. for site migration or for site structural changes when you need to
 * be	sure that all system paths, url aliases or path redirects were set or
 * redirected properly.
 *
 * @author Vojtěch Kusý <wojtha@gmail.com>
 *
 * @copyright Vojtěch Kusý, Atomic Ant Ltd. http://atomicant.co.uk
 *
 *                      .---------------------------.
 *                 \/  <     Developed by Ants!      >
 *           _  _  @@  /'---------------------------'
 *          (_)(_)(_)
 *          //||||
 */

/**
 * Implementation of hook_help().
 */
function path_checker_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#path_checker':
      $output .= '<p>' . t('Path Checker allows to check both custom internal or external URLs and it is very helpful tool e.g. for site migration or for'
        . ' site structural changes when you need to be	sure that all system paths, url aliases or path redirects were set or redirected properly.') . '</p>';
      $output .= '<p>' . t('Optional integration with <a href="@url">Redirect</a> module. You can add redirect directly from links administration.', array('@url' => 'http://drupal.org/project/redirect')) . '</p>';
      $output .= '<p>' . t('Development of the module sponsored by <a href="@url">Atomic Ant Ltd.</a>.', array('@url' => 'http://atomicant.co.uk')) . '</p>';
      break;
    case 'admin/config/search/path_checker':
    case 'admin/config/search/path_checker/list':
      $output .= '<p>' . t('All links listed together. If the list is empty, you need to <a href="@url">add or import</a> some links first.', array('@url' => '/admin/config/search/path_checker/import')) . '</p>';
      break;
    case 'admin/config/search/path_checker/list/untested':
      $output .= '<p>' . t('The list of links which have not been tested yet. You can test links one by one, bulk test several links (when Elements module is enabled) or you can use <a href="@url">batch check to test all links at once.', array('@url' => '/admin/config/search/path_checker/check')) . '</p>';
      break;
    case 'admin/config/search/path_checker/list/succeed':
      $output .= '<p>' . t('The list of links which succeed during last availability test - their return HTTP status was 2xx (Success).') . '</p>';
      break;
    case 'admin/config/search/path_checker/list/redirected':
      $output .= '<p>' . t('The list of links which were redirected during last availability test - their return HTTP status code was 3xx (Redirected).') . '</p>';
      break;
    case 'admin/config/search/path_checker/list/failed':
      $output .= '<p>' . t('The list of links which failed during last availability test - their return HTTP status code was 4xx (Client error) or 5xx (Server error).') . '</p>';
      break;
    case 'admin/config/search/path_checker/check':
      $output .= '<p>' . t('The overview statistics and batch availability testing of the links.') . '</p>';
      break;
    case 'admin/config/search/path_checker/import':
      $output .= '<p>' . t('Using this simple form you can add one or more links to the Patch Checker table. Only unique (non-existant) links will be added.') . '</p>';
      break;
    case 'admin/config/search/path_checker/export':
      $output .= '<p>' . t('Exported links could be backuped and imported later or it can be imported on some other site which has Path Checker installed.') . '</p>';
      break;
    case 'admin/config/search/path_checker/settings':
      $output .= '<p>' . t('Here you can setup the Patch Checker module.') . ' ';
      $output .= t('Path checker has nicer UI when <a href="@url_elements">Elements</a> module is installed and enabled and when <a href="@url_redirect">Path Redirect</a> module is enabled, you can add redirects directly from the links administration.', array('@url_elements' => 'http://drupal.org/project/elements', '@url_redirect' => 'http://drupal.org/project/path_redirect')) . '</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_permission().
 */
function path_checker_permission() {
  return array(
    'administer path_checker' => array(
      'title' => t('Administer path checker'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function path_checker_menu() {
  $items = array();
  $items['admin/config/search/path_checker'] = array(
    'title' => 'Path Checker',
    'page callback' => 'path_checker_admin_page',
    'page arguments' => array('all'),
    'access arguments' => array('administer path_checker'),
    'file' => 'path_checker.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/search/path_checker/list'] = array(
    'title' => 'List',
    'weight' => -5,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/search/path_checker/list/all'] = array(
    'title' => 'All',
    'page arguments' => array(5),
    'weight' => -5,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  foreach (array('untested', 'failed', 'succeed', 'redirected') as $type) {
    $items['admin/config/search/path_checker/list/' . $type] = array(
      'title' => drupal_ucfirst($type),
      'page callback' => 'path_checker_admin_page',
      'page arguments' => array(5),
      'access arguments' => array('administer path_checker'),
      'file' => 'path_checker.admin.inc',
      'type' => MENU_LOCAL_TASK,
    );
  }
  $items['admin/config/search/path_checker/check'] = array(
    'title' => 'Check',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_checker_batch_check_form'),
    'access arguments' => array('administer path_checker'),
    'file' => 'path_checker.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/search/path_checker/import'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_checker_import_form'),
    'access arguments' => array('administer path_checker'),
    'file' => 'path_checker.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/search/path_checker/export'] = array(
    'title' => 'Export',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_checker_export_form'),
    'access arguments' => array('administer path_checker'),
    'file' => 'path_checker.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/search/path_checker/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_checker_admin_settings_form'),
    'access arguments' => array('administer path_checker'),
    'file' => 'path_checker.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );
  $items['path_checker/delete/%'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_checker_delete_confirm', 2),
    'access arguments' => array('administer path_checker'),
    'file' => 'path_checker.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['path_checker/test/%path_checker_link'] = array(
    'title' => 'Test',
    'page callback' => 'path_checker_test_url_page',
    'page arguments' => array(2),
    'access arguments' => array('administer path_checker'),
    'file' => 'path_checker.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 *
 * @see redirect_edit_form()
 */
function path_checker_form_redirect_edit_form_alter(&$form, &$form_state) {
  if (empty($form_state['values']['source']) && isset($_GET['source'])) {
    $form['source']['#default_value'] = check_plain(urldecode($_GET['source']));
  }
}

//========================
//= CRUD
//========================

/**
 * Menu loader - implementation of MENUPLACEHOLDER_load().
 *
 * @param $lid
 *   The path_checker ID
 *
 * @return
 *   The path_checker link object
 */
function path_checker_link_load($lid) {
  $link = db_query("SELECT * FROM {path_checker_link} WHERE lid = :lid", array(':lid' => $lid))->fetchObject();
  return $link ? $link : FALSE;
}

/**
 * Inserts or updates path checker link to the database.
 *
 * @param unknown_type $link
 */
function path_checker_link_save(&$link) {
  // Update
  if (!empty($link->lid) && is_numeric($link->lid)) {
    $return = drupal_write_record('path_checker_link', $link, 'lid');
  }
  // Insert
  else {
    $return = drupal_write_record('path_checker_link', $link);
  }
  return $return;
}

//========================
//= MODULE FUNCTIONS
//========================

/**
 * CRUD create link or multiple links from the array of URLs.
 *
 * @param $links
 *     The array of the URLs to be added.
 *
 * @return
 *     The array of the added links.
 */
function path_checker_add_custom_links($links) {
  $added = array();

  // Only add unique links to database that do not exist.
  foreach ($links as $orig_url) {
    $url = trim($orig_url, ' /');
    if (empty($url) || db_query("SELECT lid FROM {path_checker_link} WHERE urlhash = :hash", array(':hash' => md5($url)))->fetchField()) {
      continue;
    }
    $parsed_url = parse_url($url);

    $link = new stdClass();
    $link->url = $url;
    $link->urlhash = md5($url);
    $link->status = !path_checker_is_blacklisted($url);
    $link->internal = empty($parsed_url['scheme']);

    if (path_checker_link_save($link)) {
      $added[] = $link;
    }
  }

  return $added;
}

/**
 * Verifies against the url blacklist, if the link status should be checked or not.
 */
function path_checker_is_blacklisted($url) {
  static $blacklist_pattern = NULL;

  if (is_null($blacklist_pattern)) {
    $links = path_checker_variable_get('domain_blacklist');
    $blacklist_pattern = '/' . implode('|', preg_split('/(,|\r\n?|\n)/', preg_quote($links, '/'))) . '/';
  }

  return preg_match($blacklist_pattern, $url);
}

function path_checker_is_error_code($code) {
  static $ignore_response_codes = NULL;

  if (is_null($ignore_response_codes)) {
    $ignore_response_codes = array_map('trim', preg_split('/(,|\r\n?|\n)/', path_checker_variable_get('ignore_response_codes')));
  }

  return !in_array($code, $ignore_response_codes);
}


/**
 * CRUD delete link or multiple links from all path_checker tables.
 *
 * @param $lids
 *   The array of the link identifiers.
 */
function path_checker_delete_link($lids) {
  $lids = (array) $lids;
  $result = 0;
  if (is_array($lids) && !empty($lids)) {
    $result = db_delete('path_checker_link')
      ->condition('lid', $lids, 'IN')
      ->execute();
  }
  return $result;
}

/**
 * Returns path checker's variable.
 *
 * @param $name
 *   The variable name (without the 'path_checker_' prefix)
 *
 * @see variable_get()
 */
function path_checker_variable_get($name) {
  $defaults = array(
    'useragent' => 'Drupal (+http://drupal.org/)',
    'ignore_response_codes' => '200,302,304,401,403',
    'domain_blacklist' => 'example.com,example.net,example.org',
    'internal_request_fallback' => 0,
    'max_redirects' => 0,
    'per_page' => 30,
    'original_site' => '',
  );
  if ($name === '*') {
    return $defaults;
  }
  return variable_get('path_checker_' . $name, isset($defaults[$name]) ? $defaults[$name] : '');
}

/**
 * Test given path_checker link object.
 *
 * @param $link
 *   The link object
 */
function path_checker_test_url($link) {
  $response = NULL;
  if ($link->internal) {
    $response = path_checker_router_request($link);
  }
  else {
    $response = path_checker_http_request($link);
  }
  _path_checker_status_handling($link, $response);
  return $response;
}

function path_checker_http_request($link) {
  $url = $link->url;
  $max_redirects = path_checker_variable_get('max_redirects');
  $headers = array('User-Agent' => 'User-Agent: ' . path_checker_variable_get('useragent'));

  if ($link->internal) {
    $url = url($url, array('absolute' => TRUE));
  }

  $response = drupal_http_request($url, $headers, $link->method, NULL, $max_redirects);

  // FIXME: drupal_http_request() may not provide an UTF8 encoded error message
  // what results in a database UPDATE failure. See http://drupal.org/node/371495
  // for more information. ISO-8859-1 as source encoding may be wrong, but WFM.
  if (!empty($response->error) && !drupal_validate_utf8($response->error)) {
    $response->error = drupal_convert_to_utf8($response->error, 'ISO-8859-1');
  }

  return $response;
}

/**
 * Enter description here ...
 *
 * @param $link
 *
 * @see menu_execute_active_handler()
 */
function path_checker_router_request($link) {
  $response = new stdClass();
  $response->code = 404;
  $response->error = 'Not found';

  $router_item = menu_get_item(drupal_get_normal_path($link->url));

  if ($router_item && $router_item->path == $link->url) {
    if ($router_item['access']) {
      $response->code = 200;
      $response->error = '';
    }
    else {
      $response->code = 403;
      $response->error = 'Access denied';
    }
  }

  return $response;
}

/**
 * Status code handling.
 *
 * @param $link
 *   An object containing the url, lid and fail_count.
 *
 * @param $response
 *   An object containing the HTTP request headers, response code, headers,
 *   data and redirect status.
 */
function _path_checker_status_handling(&$link, &$response) {

  // Fallback for internal links
  if ($response->code !== 200 && path_checker_variable_get('internal_request_fallback')) {
    $response = path_checker_http_request($link);
  }

  // update link properties
  $link->error = $response->error;
  $link->code = $response->code;
  $link->last_checked = REQUEST_TIME;

  switch ($response->code) {
    case 301:
      watchdog('path_checker', 'Link %link has been redirected.', array('%link' => $link->url), WATCHDOG_NOTICE, l(t('Broken links'), 'admin/reports/path_checker'));
      break;

    case 404:
      $link->fail_count++;
      watchdog('path_checker', 'Link %link has not been found.', array('%link' => $link->url), WATCHDOG_NOTICE, l(t('Broken links'), 'admin/reports/path_checker'));
      break;

    case 405:
      // Special error handling if method is not allowed. Switch link checking
      // to GET method and try again.
      $link->method = 'GET';
      $response = path_checker_http_request($link);

      $link->code = $response->code;
      $link->error = $response->error;

      if ($response->code == 200) {
        $link->fail_count = 0;
      }
      watchdog('path_checker', 'Method HEAD is not allowed for link %link. Method has been changed to GET.', array('%link' => $link->url), WATCHDOG_INFO, l(t('Broken links'), 'admin/reports/path_checker'));
      break;

    default:
      // Don't treat ignored response codes as errors.
      if (path_checker_is_error_code($response->code)) {
        $link->fail_count++;
      }
      else {
        $link->fail_count = 0;
      }
  }

  // Finally update the link.
  path_checker_link_save($link);
}
