<?php
// $Id$

/**
 * @file
 *
 */

function link_options_permission() {
  return array(
    'view all links' => array(
      'title' => t('View all links'),
      'description' => t('Allows administrators to see hidden and redirected links'),
    ),
  );
}

function link_options_field_info_alter(&$info) {
  if (isset($info['link_field'])) {
    $info['link_field']['settings']['attributes']['link_options'] = 'Displayed';
    $info['link_field']['settings']['attributes']['use_link_options'] = 0;
    $info['link_field']['instance_settings']['attributes']['link_options'] = 'Displayed';
    $info['link_field']['instance_settings']['attributes']['use_link_options'] = 0;
  }
}

function link_options_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if ($form['#field']['type'] == 'link_field') {
    if (!empty($form['instance']['settings']['attributes'])) {
      $form['instance']['settings']['attributes']['use_link_options'] = array(
        '#type' => 'checkbox',
        '#title' => t('Use link options'),
        '#description' => t('Allows editors to hide a link or execute a 301 redirect to the target url'),
        '#default_value' => isset($form['#instance']['settings']['attributes']['use_link_options']) ? $form['#instance']['settings']['attributes']['use_link_options'] : 0,
      );
      $form['instance']['settings']['attributes']['link_options'] = array(
        '#type' => 'select',
        '#title' => t('Default link option'),
        '#description' => t('This will only affect new nodes, not existing values'),
        '#options' => array(
          'Hidden' => t('Hidden'),
          'Displayed' => t('Displayed'),
          'Redirected' => t('Redirected'),
        ),
        '#default_value' => isset($form['#instance']['settings']['attributes']['link_options']) ? $form['#instance']['settings']['attributes']['link_options'] : 'Displayed',
        '#states' => array(
          'invisible' => array(
            ':input[name="instance[settings][attributes][use_link_options]"]' => array('checked' => FALSE),
          )
        )
      );
    }
  }
}

function link_options_element_info_alter(&$type) {
  if (!empty($type['link_field'])) {
    $type['link_field']['#theme'] = 'link_options_field';
    $type['link_field']['#process'][] = 'link_options_field_process';
  }
}

/**
 * Processes the link type element before displaying the field.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $complete_form['#field_info'][$element['#field_name']].
 */
function link_options_field_process($element, $form_state, $complete_form) {
  $instance = field_widget_instance($element, $form_state);
  $settings = $instance['settings'];
  $attributes = isset($element['#value']['attributes']) ? $element['#value']['attributes'] : $settings['attributes'];
  if (!empty($settings['attributes']['use_link_options'])) {
    $element['attributes']['link_options'] = array(
      '#type' => 'select',
      '#title' => t('Link option'),
      '#options' => array(
        'Hidden' => t('Hidden'),
        'Displayed' => t('Displayed'),
        'Redirected' => t('Redirected'),
      ),
      '#default_value' => isset($attributes['link_options']) ? $attributes['link_options'] : 'Displayed',
    );
  }
  return $element;
}

function link_options_field_formatter_info() {
  return array(
    'link_options_default' => array(
      'label' => t('Link, with options to hide or redirect'),
      'field types' => array('link_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      'settings' => array(
        'link_formatter' => 'link_default',
        'really_redirect' => 0,
        'strip_www' => FALSE,
      )
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function link_options_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = $options = array();
  foreach (link_field_formatter_info() as $name => $definition) {
    $options[$name] = $definition['label'];
  }
  $element['link_formatter'] = array(
    '#title' => t('Format'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $settings['link_formatter'],
  );
  $element['really_redirect'] = array(
    '#title' => t('Really redirect'),
    '#type' => 'checkbox',
    '#default_value' => $settings['really_redirect'],
    '#description' => t('Enable this only for the formatter used on the full page view; otherwise, your views and search results might be redirected!'),
  );
  $element['strip_www'] = array(
    '#title' => t('Strip www. from domain'),
    '#type' => 'checkbox',
    '#default_value' => $settings['strip_www'],
    '#states' => array(
      'visible' => array(
        ':input[name="fields[' . $instance['field_name'] . '][settings_edit_form][settings][link_formatter]"]' => array('value' => 'link_domain')
      )
    )
  );
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function link_options_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $options = link_field_formatter_info();
  $output = $options[$display['settings']['link_formatter']]['label'] . '<br/>';
  $output .= $display['settings']['really_redirect'] ? ('<b>' . t('really redirected') . '</b>') : t('not redirected');
  if ($display['settings']['link_formatter'] == 'link_domain') {
    if ($display['settings']['strip_www']) {
      $output .= '<br/>' . t('strip www. from domain');
    }
    else {
      $output .= '<br/>' . t('leave www. in domain');
    }
  }
  return $output;
}

/**
 * Implements hook_field_formatter_view().
 */
function link_options_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  foreach ($items as $delta => $item) {
    $elements[$delta] = array(
      '#theme' => 'link_options_formatter_link_options_default',
      '#element' => $item,
      '#field' => $instance,
      '#display' => $display,
    );
  }
  return $elements;
}

function link_options_theme() {
  return array(
    'link_options_field' => array(
      'render element' => 'element'
    ),
    'link_options_formatter_link_options_default' => array(
      'variables' => array('element' => NULL, 'field' => NULL, 'display' => NULL),
    ),
  );
}

function theme_link_options_field($vars) {
  drupal_add_css(drupal_get_path('module', 'link') . '/link.css');
  $element = $vars['element'];
  // Prefix single value link fields with the name of the field.
  if (empty($element['#field']['multiple'])) {
    if (isset($element['url']) && !isset($element['title'])) {
      $element['url']['#title_display'] = 'invisible';
    }
  }

  $output = '';
  $output .= '<div class="link-field-subrow clearfix">';
  if (!empty($element['attributes']['link_options'])) {
    $output .= '<div class="link-options" style="float:left;">' . drupal_render($element['attributes']['link_options']) . '</div>';
  }
  $output .= '<div class="link-fields" style="margin-left:9em;">';
    if (isset($element['title'])) {
      $output .= '<div class="link-field-title link-field-column">' . drupal_render($element['title']) . '</div>';
    }
    $output .= '<div class="link-field-url' . (isset($element['title']) ? ' link-field-column' : '') . '">'. drupal_render($element['url']) . '</div>';
    $output .= '</div>';
  $output .= '</div>';
    
  if (!empty($element['attributes']['target'])) {
    $output .= '<div class="link-attributes">' . drupal_render($element['attributes']['target']) . '</div>';
  }
  if (!empty($element['attributes']['title'])) {
    $output .= '<div class="link-attributes">' . drupal_render($element['attributes']['title']) . '</div>';
  }
  return $output;
}

function theme_link_options_formatter_link_options_default($vars) {
  $link_formatter = 'link_formatter_' . $vars['display']['settings']['link_formatter'];
  
  // If link options are not turned on, just use the link formatter
  if (empty($vars['element']['attributes']['use_link_options'])) {
    return theme($link_formatter, $vars);
  }
  
  $use_link_options = $vars['element']['attributes']['use_link_options'];
  $link_options = $vars['element']['attributes']['link_options'];
  $really_redirect = $vars['display']['settings']['really_redirect'];
  unset($vars['element']['attributes']['use_link_options']);
  unset($vars['element']['attributes']['link_options']);
  
  if (user_access('view all links')) {
    // set the link class
    drupal_add_css(drupal_get_path('module', 'link_options') . '/link_options.css');
    return '<span class="link-options ' . $link_options . '">' . t($link_options) . '</span>' . theme($link_formatter, $vars);
  }
  elseif ($link_options == 'Redirected' && $really_redirect && !empty($vars['element']['url'])) {
    // redirect to the given url
    drupal_goto($vars['element']['url'], array('absolute' => TRUE), 301);
  }
  elseif ($link_options != 'Hidden') {
    // return the standard link format
    return theme($link_formatter, $vars);
  }
  return '';
}
