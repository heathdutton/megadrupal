<?php

/**
 * @file
 * Main hooks for per user access control.
 */


/**
 * Implements hook_help().
 */
function flexiaccess_help($path, $arg) {
  switch ($path) {
    case 'admin/help#flexiaccess':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Flexi Access module provides a simple interfrace to the !acl', array('!acl' => l('ACL', 'http://drupal.org/project/acl/')));
      $output .= ' (Access Control List) ' . t('module') . '. ';
      $output .= t('It lets you set up and mange ACLs naming individual users that are allowed access to a particular node.') . '</p>';
      $output .= '<h3>' . t('Usage') . '</h3><dl>';
      $output .= '<dt>' . t('Administrative interface:') . '</dt>';
      $output .= '<dd>' . t('The !aif has the following tabs:', array('!aif' => l(t('administrative interface'), 'admin/config/people/flexiaccess'))) . '<br/>';
      $output .= t('- Content types: Enable/disable the content types you want Flexi Access to manage.') . '<br/>';
      $output .= t('- User Lists: Administer (create/edit/delete) predefined user lists. [forthcoming]') . '</dd>';
      $output .= '<dt>' . t('Node interface:') . '</dt>';
      $output .= '<dd>' . t('Administrators viewing a node of a Flexi Access enabled content type will see a tab called ') . '<em>Flexi Access</em>. ' . t('Inside this tab, there is three subfields ');
      $output .= '(<em>' . t('view, update, delete') . '</em>). ' . t('Each subfield can be used to manage an ACL granting individual users view, update, and delete rights for the node.') . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}


/**
 * Implements hook_permission().
 */
function flexiaccess_permission() {
  return array(
    'administer flexiaccess' => array(
      'title' => t('Administer Flexi Access'),
    ),
    'access flexiaccess' => array(
      'title' => t('Access Flexi Access'),
    ),
  );
}


/**
 * Implements hook_admin_paths().
 */
function flexiaccess_admin_paths() {
  $nodepath = array(
    'node/*/flexiaccess' => TRUE,
  );
  return $nodepath;
}


/**
 * Implements hook_menu().
 */
function flexiaccess_menu() {

  $items = array();

  $items['admin/config/people/flexiaccess'] = array(
    'title' => 'Flexi Access',
    'description' => 'Administrator settings for Flexi Access.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flexiaccess_admin_content'),
    'access arguments' => array('administer flexiaccess'),
    'file' => 'flexiaccess.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
  );
  $items['admin/config/people/flexiaccess/settings'] = array(
    'title' => 'Main settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/people/flexiaccess/anon'] = array(
    'title' => 'Anonymous user',
    'description' => 'Prime anonymous user for use by Flexi Access.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flexiaccess_admin_anon'),
    'access arguments' => array('administer flexiaccess'),
    'file' => 'flexiaccess.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -9,
  );
  $items['admin/config/people/flexiaccess/bulkop'] = array(
    'title' => 'Bulk operations',
    'description' => 'Perform bulk operations on ACLs.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flexiaccess_admin_bulkop'),
    'access arguments' => array('administer flexiaccess'),
    'file' => 'flexiaccess.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -8,
  );
  $items['node/%node/flexiaccess'] = array(
    'title' => 'Flexi Access',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flexiaccess_page', 1),
    'access callback' => '_flexiaccess_menu_access',
    'access arguments' => array(1, 'access flexiaccess'),
    'file' => 'flexiaccess.nodes.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['user/%user/flexiaccess'] = array(
    'title' => 'Flexi Access',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flexiaccess_user', 1),
    'access arguments' => array('access flexiaccess'),
    'file' => 'flexiaccess.users.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $items['flexiaccess/node_autocomplete'] = array(
    'title' => 'Flexiaccess Node autocomplete',
    'page callback' => 'flexiaccess_node_autocomplete',
    'access callback' => 'user_access',
    'access arguments' => array('access flexiaccess'),
    'type' => MENU_CALLBACK,
    'file' => 'flexiaccess.users.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function flexiaccess_theme() {
  return array(
    'flexiaccess_admin_content' => array(
      'render element' => 'form',
      'file' => 'flexiaccess.admin.inc',
    ),
  );
}


/**
 * Callback function to see if a node is acceptable for poll menu items.
 */
function _flexiaccess_menu_access($node, $perm) {
  $types = variable_get('flexiaccess_types', array());
  return user_access($perm) && isset($types[$node->type]) && $types[$node->type];
}


/**
 * Just make sure that the acls exist in the DB
 * This is just for code re-use
 * @param Node id $nid
 */
function _flexiaccess_create_acl_rows($nid) {
  if (module_exists('acl')) {
    foreach (array('view', 'update', 'delete') as $op) {
      $acl_id = acl_get_id_by_name('flexiaccess', $op . '_' . $nid);
      if (!$acl_id) {
        $acl_id = acl_create_acl('flexiaccess', $op . '_' . $nid);
      }
      acl_node_add_acl($nid, $acl_id, (int)($op == 'view'), (int)($op == 'update'), (int)($op == 'delete'), variable_get('flexiaccess_priority', 0));
    }
  }
}


/**
 * Implements hook_enable().
 */
function flexiaccess_enable() {
  drupal_set_message(t('Enabling Flexi Access module.  You need to !url.', array('!url' => l(t('rebuild permissions'), 'admin/reports/status/rebuild'))), 'warning');
}


/**
 * Used by the ACL module.
 */
function flexiaccess_enabled() {
  return !flexiaccess_disabling();
}


/**
 * Implements hook_disable().
 */
function flexiaccess_disable() {
  flexiaccess_disabling(TRUE);
}


/**
 * Remembers if we have disabled access.
 */
function flexiaccess_disabling($set = NULL) {
  static $disabling = FALSE;

  if (isset($set)) {
    $disabling = $set;
  }
  return $disabling;
}

/**
 * Implements hook_node_insert
 * Creates empty acl for the new node if necessary
 */

function flexiaccess_node_insert($node) {
  $types = array_filter(variable_get('flexiaccess_types', array()));
  if (in_array($node->type, $types)) {
    $autoACL = variable_get('flexiaccess_typesettings_'.$node->type.'_autoACL', 0);
    if ($autoACL) {
      _flexiaccess_create_acl_rows($node->nid);
    }
  }
}

/**
 * Set the priority of every ACL created by Flexi Access to a configured value
 */
function flexiaccess_reset_priorities() {
  $priority = variable_get('flexiaccess_priority', 0);
  /*
   * The docs say about db_query:
   *   Do not use this function for INSERT, UPDATE, or DELETE queries
   * But inner join is not possible on db_update, and a direct sql is better than db_update with a subquery.
   */
  $result = db_query("UPDATE acl_node INNER JOIN acl ON acl.acl_id = acl_node.acl_id SET acl_node.priority = :prio WHERE acl.module = 'flexiaccess'", array(':prio' => $priority));
  $num = $result->rowCount();
  if ($num > 0) {
    node_access_needs_rebuild(TRUE);
  }
  drupal_set_message("Updated $num ACLs with priority $priority .");
}


/**
 * Remove all ACLs created by Flexi Access
 */
function flexiaccess_delete_all() {
  $result = db_select('acl', 'a')->fields('a',array('acl_id'))->condition('module','flexiaccess','=')->execute();
  $num = $result->rowCount();
  foreach($result as $record) {
    acl_delete_acl($record->acl_id);
  }
  if ($num > 0) {
    node_access_needs_rebuild(TRUE);
  }
  drupal_set_message("Deleted $num ACLs");
}
