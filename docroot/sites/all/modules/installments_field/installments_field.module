<?php
/**
 * @file
 * Functionality for the Installments Field module.
 */

/**
 * Implements hook_field_info().
 */
function installments_field_field_info() {
  return array(
    'installments' => array(
      'label' => t('Installments'),
      'description' => t('Used to create an installment plan'),
      'default_widget' => 'installments_field_widget_default',
      'default_formatter' => 'installments_field_format_table',
      'property_type' => 'installments',
      'property_callbacks' => array('installments_field_property_info_callback'),
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function installments_field_field_widget_info() {
  return array(
    'installments_field_widget_default' => array(
      'label' => 'Default',
      'field types' => array('installments'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function installments_field_field_formatter_info() {
  return array(
    'installments_field_format_table' => array(
      'label' => t('Installments table'),
      'field types' => array('installments'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function installments_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['commerce_installments_payment']) ? $items[$delta]['commerce_installments_payment'] : '';
  $element['#delta'] = $delta;

  // Add our stylesheet to the element.
  $element['#attached']['css'][] = drupal_get_path('module', 'installments_field') . '/css/installments_field.css';

  switch ($instance['widget']['type']) {
    case 'installments_field_widget_default':
      // Add a wrapper that will make the element easier to find.
      $element['#prefix'] = '<div class="installments-field-widget-default">';
      $element['#suffix'] = '</div>';

      $date = (!empty($items[$delta]['date']) ? date('Y-m-d', $items[$delta]['date']) : NULL);

      // Add the date element. If the date popup module is installed then use
      // that as the element type.
      $element['date'] = array(
        '#type' => 'date_popup',
        '#date_format' => 'm/d/Y',
        '#default_value' => $date,
        '#required' => ($instance['required'] && ($delta == 0 || $field['cardinality'] > 0)),
      );

      // Add the amount and currency code to the element by using full price
      // widget of the commerce price field.
      $currency_instance  = $instance;
      $currency_instance['widget']['type'] = 'commerce_price_full';
      $element = commerce_price_field_widget_form($form, $form_state, $field, $currency_instance, $langcode, $items, $delta, $element);

      $element['amount']['#title'] = t('Payment amount');
      break;
  }

  return $element;
}

/**
 * Implements hook_field_presave().
 */
function installments_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  // Iterate over the items. For any dates that are not already a timestamp
  // format them appropriatly.
  foreach ($items as &$item) {
    if (!is_numeric($item['date'])) {
      $item['date'] = strtotime($item['date']);
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function installments_field_field_is_empty($item, $field) {
  return (
    (empty($item['date']) || (isset($item['date']['date']) && empty($item['date']['date'])))
    && empty($item['amount'])
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function installments_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $rows = array();
  foreach ($items as $item) {
    $rows[] = array(
      date('m/d/Y', $item['date']),
      commerce_currency_format($item['amount'], $item['currency_code']),
    );
  }

  return array(
    0 => array(
      '#type' => 'markup',
      '#markup' => theme_table(array(
        'header' => array(t('Date'), t('Amount')),
        'rows' => $rows,
        'sticky' => TRUE,
        'attributes' => array(
          'class' => array('installments-field-table'),
        ),
        'colgroups' => array(),
        'caption' => NULL,
        'empty' => NULL,
      )),
    ),
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'installments_field') . '/css/installments_field.css',
      ),
    ),
  );
}

/**
 * Callback to alter the property info of installments fields.
 *
 * @see installments_field_field_info().
 */
function installments_field_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $name = $field['field_name'];
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];

  $property['type'] = ($field['cardinality'] == 1 ? 'installments' : 'list<installments>');
  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  $property['auto creation'] = 'installments_field_data_auto_creation';
  $property['property info'] = installments_field_data_property_info();

  unset($property['query callback']);
}

/**
 * Returns the default array structure for an installments field.
 *
 * Used when creating new data arrays through an entity metadata wrapper.
 *
 * @return array
 *   Default structure for a new installments field value.
 */
function installments_field_data_auto_creation() {
  return array(
    'date' => NULL,
    'amount' => 0,
    'currency_code' => commerce_default_currency(),
  );
}

/**
 * Defines info for the properties of the installments field data structure.
 *
 * @return array
 *   Installments field property info.
 */
function installments_field_data_property_info($name = NULL) {
  return array(
    'date' => array(
      'label' => t('Date'),
      'description' => !empty($name) ? t('Date value of field %name', array('%name' => $name)) : '',
      'type' => 'date',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'amount' => array(
      'label' => t('Amount'),
      'description' => !empty($name) ? t('Amount value of field %name', array('%name' => $name)) : '',
      'type' => 'integer',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'amount_decimal' => array(
      'label' => t('Amount (decimal)'),
      'description' => !empty($name) ? t('Amount value of field %name (as a decimal)', array('%name' => $name)) : '',
      'type' => 'decimal',
      'getter callback' => 'commerce_price_amount_decimal_get',
      'computed' => TRUE,
    ),
    'currency_code' => array(
      'label' => t('Currency'),
      'description' => !empty($name) ? t('Currency code of field %name', array('%name' => $name)) : '',
      'type' => 'text',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
      'options list' => 'commerce_currency_code_options_list',
    ),
  );
}
