<?php

/**
 * @file
 * Connecting the Webex functionality to drupal website.
 */

/**
 * Implements hook_permission().
 */
function webex_permission() {
  return array(
    'administer webex' => array(
      'title' => t('Access Webex Api'),
      'description' => t('Access the Webex Api configuration admin pages'),
    ),
  );
}
/**
 * Implements hook_menu().
 */
function webex_menu() {
  $menus['admin/config/user-interface/webexapi'] = array(
    'title' => 'WebEx Api',
    'description' => 'Configuration for the WebEx Api module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webex_api_admin_settings_form'),
    'access arguments' => array('administer webex'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 0,
  );
  return $menus;
}
/**
 * WebEx Xml Api: Configuration settings form.
 */
function webex_api_admin_settings_form() {
  $form['webex_api_url'] = array(
    '#type' => 'textfield',
    '#title' => t('WebEx API Url'),
    '#required' => TRUE,
    '#default_value' => variable_get('webex_api_url', ''),
    '#description' => t("WebEx Api Url"),
  );
  $form['webex_api_id'] = array(
    '#type' => 'textfield',
    '#title' => t('WebEx ID'),
    '#required' => TRUE,
    '#default_value' => variable_get('webex_api_id', ''),
    '#description' => t("WebEx Api ID"),
  );
  $form['webex_api_password'] = array(
    '#type' => 'textfield',
    '#title' => t('WebEx Authentication Password'),
    '#required' => TRUE,
    '#default_value' => variable_get('webex_api_password', ''),
    '#description' => t("WebEx Api Password"),
  );
  $form['webex_api_siteid'] = array(
    '#type' => 'textfield',
    '#title' => t('WebEx Site ID'),
    '#required' => TRUE,
    '#default_value' => variable_get('webex_api_siteid', ''),
    '#description' => t("WebEx Api Site ID"),
  );
  $form['webex_api_partnerid'] = array(
    '#type' => 'textfield',
    '#title' => t('WebEx Partner ID'),
    '#required' => TRUE,
    '#default_value' => variable_get('webex_api_partnerid', ''),
    '#description' => t("WebEx Api Partner ID"),
  );
  $form['webex_api_email'] = array(
    '#type' => 'textfield',
    '#title' => t('WebEx Email'),
    '#required' => TRUE,
    '#default_value' => variable_get('webex_api_email', ''),
    '#description' => t("WebEx Api Email"),
  );
  $form['webex_api_contenttype'] = array(
    '#type' => 'select',
    '#title' => t('Select Content Type'),
    "#options" => node_type_get_names(),
    '#required' => TRUE,
    '#default_value' => variable_get('webex_api_contenttype', ''),
    '#description' => t("WebEx Content Type"),
  );
  $form = system_settings_form($form);
  return $form;
}
/**
 * Implements hook_node_delete().
 */
function webex_node_delete($node) {
  $contenttype = variable_get('webex_api_contenttype', '');
  if ($node->type == $contenttype) {
    $query = db_select('webex_meeting', 'wm');
    $query->fields('wm', array('nid', 'meetingkey', 'status'));
    $query->condition('wm.nid', $node->nid, '=');
    $result = $query->execute()->fetchAll();
    if (!empty($result)) {
      for ($i = 0; $i < count($result); $i++) {
        webex_cancel_event($result[$i]->nid, $result[$i]->meetingkey, $result[$i]->status, $node->title, $node);
        db_delete('webex_meeting')
          ->condition('nid', $result[$i]->nid)
          ->condition('meetingkey', $result[$i]->meetingkey)
          ->execute();
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function webex_form_alter(&$form, &$form_state, $form_id) {
  $contenttype = variable_get('webex_api_contenttype', '');
  if (isset($form['#node']->type)) {
    if ($contenttype == $form['#node']->type && $form_id != 'node_delete_confirm' && arg(2) !== 'edit') {
      $form['meetingdate'] = array(
        '#type' => 'date_popup',
        '#title' => 'Meeting Date',
        '#required' => TRUE,
        'meetingdate' => array(
          '#attributes' => array('class' => array('datepicker')),
        ),
      );
      $form_state['storage']['attendees'] = isset($form_state['storage']['attendees']) ? $form_state['storage']['attendees'] : 0;
      $form['actions']['submit']['#submit'][] = 'webex_api_call';
      $form['attendees'] = array(
        '#title' => t('Attendees'),
        '#type' => 'container',
        '#tree' => TRUE,
        '#prefix' => '<div id="attendees">',
        '#suffix' => '</div>',
      );
      if ($form_state['storage']['attendees']) {
        for ($i = 1; $i <= $form_state['storage']['attendees']; $i++) {
          $form['attendees']['emails'][$i] = array(
            '#title' => t('Attendees') . $i,
            '#type' => 'fieldset',
            '#tree' => TRUE,
          );
          if ($i == 1) {
            $required = TRUE;
          }
          else {
            $required = FALSE;
          }
          $form['attendees']['emails'][$i]['name'] = array(
            '#type' => 'textfield',
            '#required' => $required,
            '#description' => t('email@example.com'),
          );
        }
      }
      $form['add_participant'] = array(
        '#type' => 'button',
        '#value' => t('Add Attendees'),
        '#href' => '',
        '#ajax' => array(
          'callback' => 'webex_custom_ajax_add_attendees',
          'wrapper' => 'attendees',
        ),
        '#limit_validation_errors' => array(),
      );
      $form_state['storage']['attendees']++;
    }
  }
}
/**
 * Webex Form alter for attendees field.
 */
function webex_custom_ajax_add_attendees($form, $form_state) {
  return $form['attendees'];
}
/**
 * Webex Xml Api: Xml Call.
 */
function webex_api_call(&$form, &$form_state) {
  $title = $form['title']['#value'];
  $metetingdate = $form['meetingdate']['#value']['date'];
  $meetingtime = $form['meetingdate']['#value']['time'];
  $meetingdates = strtotime($metetingdate . ' ' . $meetingtime);
  $startdate = gmdate("m/d/Y H:i:s", $meetingdates);
  $nodeid = $form_state['node']->nid;
  $attendees = $form['attendees']['emails'];
  $emails = '';
  foreach ($attendees as $v) {
    if (isset($v['name']['#value'])) {
      $members = $v['name']['#value'];
      if (!empty($members)) {
        $emails .= '<attendee>
                            <emailInvitations>true</emailInvitations>
                            <person>
                                <email>' . $members . '</email>
                            </person>
                      </attendee>';
      }
    }
  }
  $webex_api_id = variable_get('webex_api_id', '');
  $webex_api_password = variable_get('webex_api_password', '');
  $webex_api_siteid = variable_get('webex_api_siteid', '');
  $webex_api_partnerid = variable_get('webex_api_partnerid', '');
  $webex_api_email = variable_get('webex_api_email', '');
  $bodycontent = '<bodyContent
                      xsi:type="java:com.webex.service.binding.meeting.CreateMeeting">';
  $requestxml = '<?xml version="1.0" encoding="UTF-8"?>
          <serv:message xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
              <header>
                  <securityContext>
                      <webExID>' . $webex_api_id . '</webExID>
                      <password>' . $webex_api_password . '</password>
                      <siteID>' . $webex_api_siteid . '</siteID>
                      <partnerID>' . $webex_api_partnerid . '</partnerID>
                      <email>' . $webex_api_email . '</email>
                  </securityContext>
              </header>
              <body>
                  ' . $bodycontent . '
                      <accessControl>
                          <meetingPassword>pass123</meetingPassword>
                      </accessControl>
                      <metaData>
                          <confName>' . $title . '</confName>
                          <agenda>' . $title . '</agenda>
                      </metaData>
                      <participants>
                          <attendees>' . $emails . '</attendees>
                      </participants>
                      <enableOptions>
                          <chat>true</chat>
                          <poll>true</poll>
                          <audioVideo>true</audioVideo>
                      </enableOptions>
                      <schedule>
                          <startDate>' . $startdate . '</startDate>
                          <openTime>0</openTime>
                          <joinTeleconfBeforeHost>false</joinTeleconfBeforeHost>
                          <duration>0</duration>
                          <timeZoneID>7</timeZoneID>
                      </schedule>
                  </bodyContent>
              </body>
          </serv:message>';
  $stdobjparam = new stdClass();
  $stdobjparam->url = variable_get('webex_api_url', '');
  $stdobjparam->method = 'post';
  $stdobjparam->params = $requestxml;
  $stdobjparam->is_ret = TRUE;
  $stdobjparam->returntransfer = TRUE;
  $stdobjparam->header = '';
  $stdobjparam->custom_request = '';
  $result = webex_makewebexcall($stdobjparam);
  $dom = new DOMDocument();
  $dom->loadXml($result);
  $xpath = new DOMXPath($dom);
  $xpath->registerNamespace('serv', 'http://www.webex.com/schemas/2002/06/service');
  $xpath->registerNamespace('com', 'http://www.webex.com/schemas/2002/06/common');
  $xpath->registerNamespace('att', 'http://www.webex.com/schemas/2002/06/service/attendee');
  $status = $xpath->evaluate('string(/serv:message/serv:header/serv:response/serv:result)');
  foreach ($xpath->evaluate('/serv:message/serv:body/serv:bodyContent') as $attendee) {
    $resmeetingkey = $xpath->evaluate('string(meet:meetingkey)', $attendee);
  }
  if ($status == 'SUCCESS') {
    webex_insertmeetingdets($nodeid, $status, $resmeetingkey);
  }
  else {
    drupal_set_message(t('Error on WebEx Meeting Creation!'), 'error');
  }
}
/**
 * Webex Xml Api: Custom Table Insert.
 */
function webex_insertmeetingdets($nodeid, $status, $meetingkey) {
  db_insert('webex_meeting')
      ->fields(array(
        'nid' => $nodeid,
        'meetingkey' => $meetingkey,
        'status' => $status,
      ))->execute();
}
/**
 * Webex Xml Api: Cancel call.
 */
function webex_cancel_event($nid, $meetingkey, $status, $title, $node) {
  $webex_api_id = variable_get('webex_api_id', '');
  $webex_api_password = variable_get('webex_api_password', '');
  $webex_api_siteid = variable_get('webex_api_siteid', '');
  $webex_api_partnerid = variable_get('webex_api_partnerid', '');
  $webex_api_email = variable_get('webex_api_email', '');
  $requestxml = '<?xml version="1.0" encoding="UTF-8"?>
                  <serv:message xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
                      <header>
                          <securityContext>
                              <webExID>' . $webex_api_id . '</webExID>
                              <password>' . $webex_api_password . '</password>
                              <siteID>' . $webex_api_siteid . '</siteID>
                              <partnerID>' . $webex_api_partnerid . '</partnerID>
                              <email>' . $webex_api_email . '</email>
                          </securityContext>
                      </header>
                      <body>
                          <bodyContent
                              xsi:type="java:com.webex.service.binding.ep.DelSession">
                               <sessionKey>' . $meetingkey . '</sessionKey>
                               <sendEmail>TRUE</sendEmail>
                          </bodyContent>
                      </body>
                  </serv:message>';
  $stdobjparam = new stdClass();
  $stdobjparam->url    = variable_get('webex_api_url', '');
  $stdobjparam->method = 'post';
  $stdobjparam->params = $requestxml;
  $stdobjparam->is_ret = TRUE;
  $stdobjparam->returntransfer = TRUE;
  $stdobjparam->header = '';
  $stdobjparam->custom_request = '';
  webex_makewebexcall($stdobjparam);
  db_delete('webex_meeting')
            ->condition('nid', $nid)
            ->condition('meetingkey', $meetingkey)
            ->execute();
}
/**
 * Webex Xml Api: Make Webex Api Call.
 */
function webex_makewebexcall($stdobjparam) {
  $url      = $stdobjparam->url;
  $method   = $stdobjparam->method;
  $params   = $stdobjparam->params;
  $ret      = $stdobjparam->is_ret;
  $header   = $stdobjparam->header;
  switch ($method) {
    case 'post':
      // Define a header for WebEx.
      $header = array("POST /AUTHORIZE HTTP/1.0");
      $header[] = "MIME-Version: 1.0";
      $header[] = "Content-type: application/PTI56";
      $header[] = "Content-length: " . drupal_strlen($params);
      $header[] = "Content-transfer-encoding: text";
      $header[] = "Request-number: 1";
      $header[] = "Document-type: Request";
      $header[] = "Interface-Version: 0.3";
      // Connect to WebEx using drupal_http_request.
      $options = array(
        'headers' => $header,
        'method' => 'POST',
        'returntransfer' => 'TRUE',
        'data' => $params,
      );
      $response = drupal_http_request($url, $options);
      if ($ret == TRUE) {
        return $response->data;
      }
    case 'default':
      return FALSE;
  }
}
