<?php
/**
 * @file
 * Module that provides integration with parsley.js 1.x.
 */

define('PARSLEY_RULE_INVALID', -1);

/**
 * Implements hook_form_alter().
 *
 * This is where the main work happens
 * First check whether there is a cache entry with form_ids, if not it will
 * build up a new list from calling the modules implementing the hook
 *
 * @TODO Filter additional forms to include using system var
 */
function parsley_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['#parsley']) && $form['#parsley'] === TRUE) {
    $form['#attached']['libraries_load'][] = array('parsley');

    // Init attribs.
    if (empty($form['#attributes'])) {
      $form['#attributes'] = array();
    }

    // Attach the parsley binder.
    $form['#attributes']['data-parsley-validate'] = 'data-parsley-validate';

    // Loop through the fields and attach the relevant validator attrib.
    foreach ($form as &$element) {
      if (is_array($element) && !empty($element['#parsley_rules'])) {
        foreach ($element['#parsley_rules'] as $rule) {
          if (is_array($rule)) {

            // Borrowed from FAPI module.
            if (!isset($rule['rule'])) {
              drupal_set_message(
                t('Rule array with wrong structure on %field.',
                  array('%field' => $element['#name'])
                ),
                'error'
              );
              continue;
            }
            $parsed_rule = _parsley_rule_parse($rule['rule']);
          }
          else {
            $parsed_rule = _parsley_rule_parse($rule);
          }

          // Set the element only if we have received an array back.
          if (is_array($parsed_rule)) {
            list($attrib, $val) = $parsed_rule;
            $element['#attributes'][$attrib] = array($val);
          }
          elseif ($parsed_rule === PARSLEY_RULE_INVALID) {
            drupal_set_message(
              t('Invalid rule @rule on field %field',
                array('@rule' => $rule, '%field' => $element['#name'])
              ), 'error'
            );
            continue;
          }
        }
      }
      if (is_array($element)
          && !empty($element['#required'])
          && $element['#required'] == TRUE) {
        list($attrib, $val) = _parsley_rule_parse('required');
        $element['#attributes'][$attrib] = array($val);
      }
    }
  }
}

/**
 * Helper function to choose correct rule parser.
 *
 * @param string $rule
 *   The rule with either params or no params, it folows the parsley syntax.
 *
 * @see http://parsleyjs.github.io/Parsley-1.x/documentation.html#basic-constraints
 */
function _parsley_rule_parse($rule) {
  // Borrowed from FAPI module(https://drupal.org/project/FAPI).
  // Checks wether there are any params included.
  preg_match('/^(.*?)(\[(.*)\])?$/', $rule, $rs);
  if (count($rs) == 2) {
    return _parsley_parse_no_args($rs);
  }
  elseif (count($rs) == 4) {
    return _parsley_parse_args($rs);
  }
  else {
    return PARSLEY_RULE_INVALID;
  }
}

/**
 * Helper function to handle parsley rules with no arguments.
 *
 * @param string $rs
 *   The rule string parsed from #parsley_rules.
 *
 * @code
 * #parsley_rules => array(
 *   'numeric'
 * ),
 * @endcode
 */
function _parsley_parse_no_args($rs) {
  switch ($rs[1]) {
    case 'required':
      return array('data-parsley-required', 'true');

    case 'notblank':
      return array('parsley-notblank', 'true');

    case 'email':
      return array('data-parsley-type', 'email');

    case 'url':
      return array('data-parsley-type', 'url');

    case 'urlstrict':
      return array('data-parsley-type', 'urlstrict');

    case 'digit':
      return array('data-parsley-type', 'digits');

    case 'numeric':
      return array('data-parsley-type', 'number');

    case 'alpha_numeric':
      return array('data-parsley-type', 'alphanum');

    case 'dateIso':
      return array('data-parsley-type', 'dateIso');

    case 'phone':
      return array('data-parsley-type', 'phone');
  }
}

/**
 * Helper function to handle parsley rules with arguments.
 *
 * @param string $rs
 *   The rulestring parsed from #parsley_rules.
 *
 * @code
 * #parsley_rules => array(
 *   'length[3, 16]'
 * ),
 * @endcode
 */
function _parsley_parse_args($rs) {
  switch ($rs[1]) {
    case 'length':
      return _parsley_rule_length($rs[3]);

    case 'range':
      return _parsley_rule_range($rs[3]);
  }
}

/**
 * The rule for length.
 *
 * @param string $args
 *   The arguments for the length rule.
 */
function _parsley_rule_length($args) {
  $ranges = _parsley_numeric_args_parser($args);
  if (is_numeric($ranges[0]) && is_numeric($ranges[1])) {
    return array(
      'data-parsley-length',
      sprintf('[%d, %d]', $ranges[0], $ranges[1]),
    );
  }
  elseif ($ranges[0] == '*' && is_numeric($ranges[1])) {
    return array('data-parsley-maxlength', $ranges[1]);
  }
  elseif (is_numeric($ranges[0]) && $ranges[1] == '*') {
    return array('data-parsley-minlength', $ranges[0]);
  }
  else {
    return PARSLEY_RULE_INVALID;
  }
}


/**
 * The rule for numeric range.
 *
 * @param string $args
 *   The arguments for the range rule.
 */
function _parsley_rule_range($args) {
  $ranges = _parsley_numeric_args_parser($args);
  if (is_numeric($ranges[0]) && is_numeric($ranges[1])) {
    return array(
      'data-parsley-range',
      sprintf('[%d, %d]', $ranges[0], $ranges[1]),
    );
  }
  elseif ($ranges[0] == '*' && is_numeric($ranges[1])) {
    return array('data-parsley-max', $ranges[1]);
  }
  elseif (is_numeric($ranges[0]) && $ranges[1] == '*') {
    return array('data-parsley-min', $ranges[0]);
  }
  else {
    return PARSLEY_RULE_INVALID;
  }
}

/**
 * Helper function to parse out arguments with numeric values.
 */
function _parsley_numeric_args_parser($args) {
  if (strpos($args, ',') > 0) {
    $ranges = explode(',', $args);
    $ranges = array_map('trim', $ranges);
  }
  elseif (is_numeric($args)) {
    $ranges = array($args, $args);
  }
  else {
    drupal_set_message(
      t('@args is not a valid range arguments',
        array('@args' => $args)
      ), 'error'
    );
    return FALSE;
  }
  return $ranges;
}


/**
 * Implements hook_libraries_info().
 */
function parsley_libraries_info() {
  $libraries = array();
  $libraries['parsley'] = array(
    'name' => 'Parsley',
    'vendor url' => 'http://parsleyjs.org/',
    'download url' => 'https://github.com/guillaumepotier/Parsley.js/releases',
    'version arguments' => array(
      'file' => 'dist/parsley.js',
      // The version in the CHANGELOG.md is usually this pattern **x.x.x**.
      'pattern' => '@\*\sVersion ([0-9\.]+)@',
      'lines' => 4,
    ),
    'files' => array(
      'js' => array(
        'dist/parsley.js',

      ),
      'variants' => array(
        'minified' => array(
          'files' => array(
            'js' => array(
              'dist/parsley.min.js',
            ),
          ),
        ),
        'source' => array(
          'files' => array(
            'js' => array(
              'dist/parsley.js',
            ),
          ),
        ),
      ),
    ),
  );
  return $libraries;
}
