<?php

define('AUDIO_FILTER_CLIENT_ID_SOUNDCLOUD', '70aa65cb8adfeecb45c6b9e5ce7eaf1e');

/**
 * @file
 * Audio filter is a highly flexible and easy extendable filter module to embed
 * any type of audio in your site using a simple tag.
 */

module_load_include('inc', 'audio_filter', 'audio_filter.codecs');

/**
 * Implements hook_filter_info().
 */
function audio_filter_filter_info() {
  $filters = array();
  $filters['audio_filter'] = array(
    'title' => t('Audio Filter'),
    'description' => t('Substitutes [audio:URL] with embedded HTML.'),
    'process callback' => '_audio_filter_process',
    'settings callback' => '_audio_filter_settings',
    'default settings' => array(
      'audio_filter_width' => '100%',
      'audio_filter_height' => '166',
      'audio_filter_autoplay' => 0,
      'audio_filter_related' => 0,
      'audio_filter_html5' => 1,
    ),
    'tips callback' => '_audio_filter_tips',
    // See http://drupal.org/node/1061244.
    'weight' => -1,
  );
  return $filters;
}

function _audio_filter_settings($form, &$form_state, $filter, $format, $defaults, $filters) {

  $settings['audio_filter_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Default width setting'),
    '#default_value' => isset($filter->settings['audio_filter_width']) ? $filter->settings['audio_filter_width'] : $defaults['audio_filter_width'],
    '#maxlength' => 4,
  );
  $settings['audio_filter_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Default height setting'),
    '#default_value' => isset($filter->settings['audio_filter_height']) ? $filter->settings['audio_filter_height'] : $defaults['audio_filter_height'],
    '#maxlength' => 4,
  );
  $settings['audio_filter_autoplay'] = array(
    '#type' => 'radios',
    '#title' => t('Default autoplay setting'),
    '#description' => t('Not all audio formats support this setting.'),
    '#default_value' => isset($filter->settings['audio_filter_autoplay']) ? $filter->settings['audio_filter_autoplay'] : $defaults['audio_filter_autoplay'],
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
  );
  $settings['audio_filter_related'] = array(
    '#type' => 'radios',
    '#title' => t('Related audio setting'),
    '#description' => t('Show "related audio"? Not all audio formats support this setting.'),
    '#default_value' => isset($filter->settings['audio_filter_related']) ? $filter->settings['audio_filter_related'] : $defaults['audio_filter_related'],
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
  );

  $settings['audio_filter_html5'] = array(
    '#type' => 'radios',
    '#title' => t('Use HTML5'),
    '#description' => t('Use HTML5 if the codec provides it. Makes your audios more device agnostic.'),
    '#default_value' => isset($filter->settings['audio_filter_html5']) ? $filter->settings['audio_filter_html5'] : $defaults['audio_filter_html5'],
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
  );

  return $settings;
}

function _audio_filter_tips($filter, $format, $long = FALSE) {
  if ($long) {
    $codecs = audio_filter_get_codec_info();
    $supported = array();
    $instructions = array();
    foreach ($codecs as $codec) {
      $supported[] = $codec['name'];
      $instructions[] = isset($codec['instructions']) ? '<li>' . $codec['name'] . ':<br/>' . $codec['instructions'] . '</li>' : '';
    }
    return t('
      <p><strong>Audio Filter</strong></p>
      <p>You may insert audio from popular audio sites by using a simple tag <code>[audio:URL]</code>.</p>
      <p>Examples:</p>
      <ul>
        <li>Single audio clip:<br /><code>[audio:https://soundcloud.com/thebeatles/1-back-in-the-ussr]</code></li>
      </ul>
      <p>Supported sites: @codecs.</p>
      <p>Special instructions:</p>
      <small>Some codecs need special input. You\'ll find those instructions here.</small>
      <ul>!instructions</ul>', array(
        '@codecs' => implode(', ', $supported),
        '!instructions' => implode('', $instructions),
      )
    );
  }
  else {
    return t('You may insert audio clips with [audio:URL]');
  }
}

function _audio_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  if (preg_match_all('/\[audio(\:(.+))?( .+)?\]/isU', $text, $matches_code)) {
    foreach ($matches_code[0] as $ci => $code) {
      $audio = array(
        'source' => $matches_code[2][$ci],
        'autoplay' => $filter->settings['audio_filter_autoplay'],
        'related' => $filter->settings['audio_filter_related'],
      );

      // Pick random out of multiple sources separated by comma (,).
      if (strstr($audio['source'], ',')) {
        $sources          = explode(',', $audio['source']);
        $random           = array_rand($sources, 1);
        $audio['source']  = $sources[$random];
      }

      // Load all codecs.
      $codecs = audio_filter_get_codec_info();

      // Find codec.
      foreach ($codecs as $codec_name => $codec) {
        if (!is_array($codec['regexp'])) {
          $codec['regexp'] = array($codec['regexp']);
        }

        // Try different regular expressions.
        foreach ($codec['regexp'] as $delta => $regexp) {
          if (preg_match($regexp, $audio['source'], $matches)) {
            $audio['codec'] = $codec;
            $audio['codec']['delta'] = $delta;
            $audio['codec']['matches'] = $matches;
            // Used in theme function:
            $audio['codec']['codec_name'] = $codec_name;
            break 2;
          }
        }
      }

      // Codec found.
      if (isset($audio['codec'])) {
        // Override default attributes.
        if ($matches_code[3][$ci] && preg_match_all('/\s+([a-zA-Z_]+)\:(\s+)?([0-9a-zA-Z\/]+)/i', $matches_code[3][$ci], $matches_attributes)) {
          foreach ($matches_attributes[0] as $ai => $attribute) {
            $audio[$matches_attributes[1][$ai]] = $matches_attributes[3][$ai];
          }
        }

        // Use configured ratio if present, otherwise use that from the codec,
        // if set. Fall back to 1.
        $ratio = 1;
        if (isset($audio['ratio']) && preg_match('/(\d+)\/(\d+)/', $audio['ratio'], $tratio)) {
          // Validate given ratio parameter.
          $ratio = $tratio[1] / $tratio[2];
        }
        elseif (isset($audio['codec']['ratio'])) {
          $ratio = $audio['codec']['ratio'];
        }

        // Sets audio width & height after any user input has been parsed.
        // First, check if user has set a width.
        if (isset($audio['width']) && !isset($audio['height'])) {
          $audio['height'] = $filter->settings['audio_filter_height'];
        }
        // Else, if user has set height.
        elseif (isset($audio['height']) && !isset($audio['width'])) {
          $audio['width'] = $audio['height'] * $ratio;
        }
        // Maybe both?
        elseif (isset($audio['height']) && isset($audio['width'])) {
          $audio['width'] = $audio['width'];
          $audio['height'] = $audio['height'];
        }
        // Fall back to defaults.
        elseif (!isset($audio['height']) && !isset($audio['width'])) {
          $audio['width'] = $filter->settings['audio_filter_width'] != '' ? $filter->settings['audio_filter_width'] : '100%';
          $audio['height'] = $filter->settings['audio_filter_height'] != '' ? $filter->settings['audio_filter_height'] : 166;
        }

        // Default value for control bar height.
        $control_bar_height = 0;
        if (isset($audio['control_bar_height'])) {
          // Respect control_bar_height option if present.
          $control_bar_height = $audio['control_bar_height'];
        }
        elseif (isset($audio['codec']['control_bar_height'])) {
          // Respect setting provided by codec otherwise.
          $control_bar_height = $audio['codec']['control_bar_height'];
        }

        // Resize to fit within width and height repecting aspect ratio.
        if ($ratio) {
          $scale_factor = min(array(
            ($audio['height'] - $control_bar_height),
            $audio['width'] / $ratio,
          ));
          $audio['height'] = round($scale_factor + $control_bar_height);
          $audio['width'] = round($scale_factor * $ratio);
        }

        $audio['autoplay'] = (bool) $audio['autoplay'];
        $audio['align'] = (isset($audio['align']) && in_array($audio['align'], array(
          'left',
          'right',
          'center',
        ))) ? $audio['align'] : NULL;

        // Let modules have final say on audio parameters.
        drupal_alter('audio_filter_audio', $audio);

        if (isset($audio['codec']['html5_callback']) && $filter->settings['audio_filter_html5'] == 1 && is_callable($audio['codec']['html5_callback'], FALSE)) {
          $replacement = call_user_func($audio['codec']['html5_callback'], $audio);
        }
        elseif (is_callable($audio['codec']['callback'], FALSE)) {
          $replacement = call_user_func($audio['codec']['callback'], $audio);
        }
        else {
          // Invalid callback.
          $replacement = '<!-- AUDIO FILTER - INVALID CALLBACK IN: ' . $pattern . ' -->';
        }
      }
      // Invalid format.
      else {
        $replacement = '<!-- AUDIO FILTER - INVALID CODEC IN: ' . $code . ' -->';
      }

      $text = str_replace($code, $replacement, $text);
    }
  }

  return $text;
}

/**
 * Wrapper that calls the theme function.
 */
function audio_filter_flash($audio, $params = array()) {
  return theme('audio_filter_flash', array('audio' => $audio, 'params' => $params));
}

/**
 * Wrapper that calls the theme function.
 */
function audio_filter_iframe($audio) {
  return theme('audio_filter_iframe', array('audio' => $audio));
}

function audio_filter_get_codec_info() {
  static $codecs;
  if (!isset($codecs)) {
    $codecs = module_invoke_all('audio_filter_codec_info');
    drupal_alter('audio_filter_codec_info', $codecs);
  }
  return $codecs;
}

/**
 * Function that outputs the <object> element.
 *
 * @ingroup themeable
 */
function theme_audio_filter_flash($variables) {
  $output = '';

  $audio = $variables['audio'];
  $params = isset($variables['params']) ? $variables['params'] : array();

  $classes = audio_filter_get_classes($audio);

  $output .= '<object class="' . implode(' ', $classes) . '" type="application/x-shockwave-flash" ';

  $output .= 'width="' . $audio['width'] . '" height="' . $audio['height'] . '" data="' . $audio['source'] . '">' . "\n";

  $defaults = array(
    'movie' => $audio['source'],
    'wmode' => 'transparent',
    'allowFullScreen' => 'true',
  );

  $params = array_merge($defaults, (is_array($params) && count($params)) ? $params : array());

  foreach ($params as $name => $value) {
    $output .= '  <param name="' . $name . '" value="' . $value . '" />' . "\n";
  }

  $output .= '</object>' . "\n";

  return $output;
}

/**
 * Function that outputs HTML5 compatible iFrame for codecs that support it.
 *
 * @ingroup themeable
 */
function theme_audio_filter_iframe($variables) {
  $audio = $variables['audio'];

  $classes = audio_filter_get_classes($audio);

  $output = '<iframe src="' . $audio['source'] . '" width="' . $audio['width'] . '" height="' . $audio['height'] . '" class="' . implode(' ', $classes) . '" frameborder="0"></iframe>';

  return $output;
}

/**
 * Implements hook_theme().
 */
function audio_filter_theme($existing, $type, $theme, $path) {
  return array(
    'audio_filter_flash' => array(
      'variables' => array('audio' => NULL, 'params' => NULL),
    ),
    'audio_filter_iframe' => array(
      'variables' => array('audio' => NULL, 'params' => NULL),
    ),
    'audio_filter_dashboard' => array(
      'variables' => array('form' => NULL),
      'template' => 'audio_filter_dashboard',
    ),
  );
}

/**
 * Helper function that extracts some classes from $audio.
 */
function audio_filter_get_classes($audio) {
  $classes = array(
    'audio-filter',
    // Add codec name.
    'audio-' . $audio['codec']['codec_name'],
  );

  // Add alignment.
  if (isset($audio['align'])) {
    $classes[] = 'audio-' . $audio['align'];
  }

  // First match is the URL, we don't want that as a class.
  unset($audio['codec']['matches'][0]);
  foreach ($audio['codec']['matches'] as $match) {
    $classes[] = 'vf-' . strtolower(preg_replace('/[^a-zA-Z0-9]/', '', $match));
  }

  return $classes;
}

/**
 * Implements hook_menu().
 */
function audio_filter_menu() {
  $items = array();

  $items['audio_filter/dashboard/%'] = array(
    'title' => 'Audiofilter',
    'description' => 'Dashboard',
    'page callback' => 'audio_filter_dashboard_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'page arguments' => array(2),
    'theme callback' => '_audio_filter_dashboard_theme',
  );

  return $items;
}

/**
 * Return the theme name to be used when showing linkit dashboard
 */
function _audio_filter_dashboard_theme() {
  return variable_get('admin_theme', 'seven');
}

/**
 * Template preprocess function for audio_filter_dashboard().
 */
function template_preprocess_audio_filter_dashboard(&$variables) {
  // Construct page title.
  $variables['head_title']    = t('Audio filter dashboard');
  $variables['head']          = drupal_get_html_head();
  $variables['help']          = theme('help');
  $variables['language']      = $GLOBALS['language'];
  $variables['language']->dir = $GLOBALS['language']->direction ? 'rtl' : 'ltr';
  $variables['messages']      = isset($variables['show_messages']) ? theme('status_messages') : '';
  $variables['css']           = drupal_add_css();
  $variables['styles']        = drupal_get_css();
  $variables['scripts']       = drupal_get_js();
}

/**
 * Creates the dashboard.
 */
function audio_filter_dashboard_page($editor) {
  module_invoke('admin_menu', 'suppress');
  // Add CSS.
  drupal_add_css(drupal_get_path('module', 'audio_filter') . '/css/audio_filter.css');

  switch ($editor) {
    case 'wysiwyg_tinymce':
      // Add JavaScript.
      drupal_add_js(wysiwyg_get_path('tinymce') . '/jscripts/tiny_mce/tiny_mce_popup.js');
      drupal_add_js(drupal_get_path('module', 'audio_filter') . '/editors/tinymce/audio_filter.js');
      break;

    case 'ckeditor':
    case 'wysiwyg_ckeditor':
      // Add JavaScript.
      drupal_add_js(drupal_get_path('module', 'audio_filter') . '/editors/ckeditor/audio_filter_dialog.js');
      break;

    case 'fckeditor':
    case 'wysiwyg_fckeditor':
      // Add JavaScript.
      drupal_add_js(drupal_get_path('module', 'audio_filter') . '/editors/fckeditor/audio_filter/audio_filter_dialog.js');
      break;
  }

  print theme('audio_filter_dashboard', array('form' => render(drupal_get_form('_audio_filter_form'))));
  exit();
}

function _audio_filter_form() {
  $form['audio_filter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Insert Audio'),
    '#weight' => 0,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#attributes' => array('class' => array('clearfix')),
  );

  $form['audio_filter']['file_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Audio URL'),
    '#maxlength' => 255,
    '#size' => 80,
    '#default_value' => '',
    '#weight' => 1,
  );

  $form['audio_filter']['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#maxlength' => 255,
    '#size' => 80,
    '#default_value' => '',
    '#weight' => 2,
  );

  $form['audio_filter']['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#maxlength' => 255,
    '#size' => 80,
    '#default_value' => '',
    '#weight' => 3,
  );

  $form['audio_filter']['align'] = array(
    '#type' => 'select',
    '#title' => t('Align'),
    '#default_value' => 'none',
    '#options' => array(
      'none' => t('None'),
      'left' => t('Left'),
      'right' => t('Right'),
      'center' => t('Center'),
    ),
    '#weight' => 4,
  );

  $form['audio_filter']['autoplay'] = array(
    '#type' => 'checkbox',
    '#title' => t('Autoplay'),
    '#weight' => 5,
  );

  $form['instructions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Instructions'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#attributes' => array('class' => array('clearfix')),
    '#weight' => 97,
  );

  $text = '<p>' . t('Insert a 3rd party audio from one of the following providers.') . '</p>';
  $text .= _audio_filter_instructions();

  $form['instructions']['text'] = array(
    '#type' => 'item',
    '#markup' => $text,
  );

  $form['cancel'] = array(
    '#type' => 'button',
    '#value' => t('Cancel'),
    '#weight' => 98,
  );

  $form['insert'] = array(
    '#type' => 'button',
    '#value' => t('Insert'),
    '#weight' => 99,
  );

  return $form;
}

function audio_filter_wysiwyg_plugin($editor, $version) {
  _audio_filter_add_settings('wysiwyg_' . $editor);

  $plugins = array();

  switch ($editor) {
    case 'ckeditor':
      $plugins['audio_filter'] = array(
        'path' => drupal_get_path('module', 'audio_filter') . '/editors/ckeditor/',
        'buttons' => array('audio_filter' => t('Audio filter')),
        'url' => 'http://drupal.org/project/audio_filter',
        'load' => TRUE,
      );
      break;

    case 'fckeditor':
      $plugins['audio_filter'] = array(
        'path' => drupal_get_path('module', 'audio_filter') . '/editors/fckeditor/',
        'buttons' => array('audio_filter' => t('Audio filter')),
        'url' => 'http://drupal.org/project/audio_filter',
        'load' => TRUE,
      );
      break;

    case 'tinymce':
      $plugins['audio_filter'] = array(
        'path' => drupal_get_path('module', 'audio_filter') . '/editors/tinymce',
        'filename' => 'editor_plugin.js',
        'buttons' => array('audio_filter' => t('Audio filter')),
        'url' => 'http://drupal.org/project/audio_filter',
        'load' => TRUE,
      );
      break;
  }

  return $plugins;
}

/**
 * Implements hook_element_info_alter().
 */
function audio_filter_element_info_alter(&$types) {
  if (isset($types['text_format']['#pre_render']) && is_array($types['text_format']['#pre_render'])) {
    if (in_array('ckeditor_pre_render_text_format', $types['text_format']['#pre_render'])) {
      _audio_filter_add_settings('ckeditor');
    }
  }
}

function _audio_filter_add_settings($editor) {
  static $editor_settings_added = array();
  static $global_settings_added = FALSE;

  if (!isset($editor_settings_added[$editor])) {
    $editor_settings_added[$editor] = TRUE;

    // Add popup url.
    $settings = array(
      'audio_filter' => array('url' => array($editor => url('audio_filter/dashboard/' . $editor))),
    );
    drupal_add_js($settings, 'setting');
  }

  if (!$global_settings_added) {
    $global_settings_added = TRUE;

    // Add global settings for audio_filter.
    $settings = array(
      'audio_filter' => array(
        'modulepath' => drupal_get_path('module', 'audio_filter'),
      ),
    );
    drupal_add_js($settings, 'setting');
  }
}

/**
 * Parses Codec into instructions for WYSIWYG popup.
 */
function _audio_filter_instructions() {
  $codecs = audio_filter_get_codec_info();
  $output = '<ul>';
  foreach ($codecs as $codec) {
    $output .= '<li><strong>' . $codec['name'] . '</strong><br />' . $codec['sample_url'] . '</li>';
  }
  $output .= '</ul>';
  return $output;
}

/**
 * Requests data from an oEmbed provider.
 *
 * Note: This function currently only supports JSON responses.
 *
 * @param string $endpoint
 *   The provider endpoint URL.
 * @param array $arguments
 *   An associative array of URL arguments to send the provider.
 *
 * @return array|FALSE
 *   An array of data if the request is successful, otherwise FALSE.
 *
 * @todo Support other response formats than JSON?
 */
function audio_filter_oembed_request($endpoint, array $arguments) {
  // Make HTTP request.
  $result = drupal_http_request(url($endpoint, array('query' => $arguments)));

  if ($data = json_decode($result->data)) {
    // Success.
    return (array) $data;
  }
  else {
    // Failure. Either the resource doesn't exist or there was an error with the
    // request.
    return FALSE;
  }
}
