<?php

class MultichoiceTestCase extends QuizTestCase {

  protected $questionHandler = 'multichoice';
  protected $extraModules = array('quizz_multichoice');

  public static function getInfo() {
    return array(
        'name'        => t('Multichoice'),
        'description' => t('Test cases for the multichoice question type.'),
        'group'       => 'Quiz question',
    );
  }

  /**
   * Create a default MCQ with default settings.
   */
  private function createQuizQuestion($settings = array()) {
    $settings += array(
        'title'          => 'MCQ 1 Title',
        'type'           => 'multichoice',
        'choice_multi'   => 0,
        'choice_random'  => 0,
        'choice_boolean' => 0,
        'body'           => 'MCQ 1 body text',
    );

    // Set up some alternatives.
    $settings['alternatives'][0]['answer']['value'] = 'A';
    $settings['alternatives'][0]['answer']['format'] = 'filtered_html';
    $settings['alternatives'][0]['feedback_if_chosen']['value'] = 'You chose A';
    $settings['alternatives'][0]['feedback_if_chosen']['format'] = 'filtered_html';
    $settings['alternatives'][0]['feedback_if_not_chosen']['value'] = 'You did not choose A';
    $settings['alternatives'][0]['feedback_if_not_chosen']['format'] = 'filtered_html';
    $settings['alternatives'][0]['score_if_chosen'] = 1;
    $settings['alternatives'][0]['score_if_not_chosen'] = 0;
    $settings['alternatives'][1]['answer']['value'] = 'B';
    $settings['alternatives'][1]['answer']['format'] = 'filtered_html';
    $settings['alternatives'][1]['feedback_if_chosen']['value'] = 'You chose B';
    $settings['alternatives'][1]['feedback_if_chosen']['format'] = 'filtered_html';
    $settings['alternatives'][1]['feedback_if_not_chosen']['value'] = 'You did not choose B';
    $settings['alternatives'][1]['feedback_if_not_chosen']['format'] = 'filtered_html';
    $settings['alternatives'][1]['score_if_chosen'] = 0;
    $settings['alternatives'][1]['score_if_not_chosen'] = 0;
    $settings['alternatives'][2]['answer']['value'] = 'C';
    $settings['alternatives'][2]['answer']['format'] = 'filtered_html';
    $settings['alternatives'][2]['feedback_if_chosen']['value'] = 'You chose C';
    $settings['alternatives'][2]['feedback_if_chosen']['format'] = 'filtered_html';
    $settings['alternatives'][2]['feedback_if_not_chosen']['value'] = 'You did not choose C';
    $settings['alternatives'][2]['feedback_if_not_chosen']['format'] = 'filtered_html';
    $settings['alternatives'][2]['score_if_chosen'] = 0;
    $settings['alternatives'][2]['score_if_not_chosen'] = 0;

    $question = quizz_question_load($this->drupalCreateQuestion($settings)->qid);

    $this->assertNotNull($question->alternatives[0]['id'], 'Alternative A was created as part of question save.');
    $this->assertNotNull($question->alternatives[1]['id'], 'Alternative B was created as part of question save.');
    $this->assertNotNull($question->alternatives[2]['id'], 'Alternative C was created as part of question save.');
    $this->assertEqual($question->alternatives[0]['answer']['value'], 'A', 'Alternative text A was saved and loaded correctly.');
    $this->assertEqual($question->alternatives[1]['answer']['value'], 'B', 'Alternative text B was saved and loaded correctly.');
    $this->assertEqual($question->alternatives[2]['answer']['value'], 'C', 'Alternative text C was saved and loaded correctly.');
    $this->assertEqual($question->alternatives[0]['answer']['format'], 'filtered_html', 'Alternative format A was saved and loaded correctly.');
    $this->assertEqual($question->alternatives[1]['answer']['format'], 'filtered_html', 'Alternative format B was saved and loaded correctly.');
    $this->assertEqual($question->alternatives[1]['answer']['format'], 'filtered_html', 'Alternative format C was saved and loaded correctly.');

    return $question;
  }

  public function testQuestionFeedback() {
    $question = $this->createQuizQuestion();
    $quiz = $this->linkQuestionToQuiz($question);

    // Login as non-admin.
    $this->drupalLogin($this->user);

    // Test incorrect question. Feedback, answer.
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question->qid][answer][user_answer]" => $question->alternatives[1]['id']), t('Finish'));
    $this->assertPattern('/quiz-score-icon selected/', 'Found selected answer.');
    $this->assertPattern('/quiz-score-icon should/', 'Found should answer.');
    $this->assertPattern('/quiz-score-icon incorrect/', 'Found incorrect answer.');
    $this->assertText('You did not choose A');
    $this->assertText('You chose B');
    $this->assertText('You did not choose C');
  }

  /**
   * Test multiple answers.
   */
  function testMultipleAnswers() {
    $question = $this->createQuizQuestion(array('choice_multi' => 1));
    $quiz = $this->linkQuestionToQuiz($question);

    $this->drupalLogin($this->user);
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array(
        "question[$question->qid][answer][user_answer][1]" => 1,
        "question[$question->qid][answer][user_answer][3]" => 3,
      ), t('Finish'));
    // 0 of 1, because user picked a correct answer and an incorrect answer.
    $this->assertText('You got 0 of 1 possible points.');
    $this->assertText('Your score: 0%');

    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question->qid][answer][user_answer][1]" => 1), t('Finish'));
    // 1 of 1, because user picked a correct answer and not an incorrect answer.
    $this->assertText('You got 1 of 1 possible points.');
    $this->assertText('Your score: 100%');
  }

  /**
   * Test random order of choices.
   * @todo I don't know how we would test random questions.
   */
  function testRandomOrder() {
    $question = $this->createQuizQuestion(array('choice_random' => 1));
    $quiz = $this->linkQuestionToQuiz($question);

    $this->drupalLogin($this->user);
    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question->qid][answer][user_answer]" => $question->alternatives[0]['id']), t('Finish'));
  }

  /**
   * Test simple scoring.
   */
  function testSimpleScoring() {
    $settings = array();
    $settings['alternatives'][1]['score_if_chosen'] = 0;
    $settings['alternatives'][1]['score_if_not_chosen'] = 0;
    $settings['choice_multi'] = 1;
    $settings['choice_boolean'] = 1;

    $question = $this->createQuizQuestion($settings);
    $quiz = $this->linkQuestionToQuiz($question);

    $this->drupalLogin($this->user);

    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array(
        "question[$question->qid][answer][user_answer][1]" => 1,
        "question[$question->qid][answer][user_answer][3]" => 3,
      ), t('Finish'));
    $this->assertText('You got 0 of 1 possible points.');
    $this->assertText('Your score: 0%');

    $this->drupalGet("quiz/$quiz->qid/take");
    $this->drupalPost(NULL, array("question[$question->qid][answer][user_answer][1]" => 1), t('Finish'));
    $this->assertText('You got 1 of 1 possible points.');
    $this->assertText('Your score: 100%');
  }

  /**
   * Test the reordering UI.
   */
  function testReorderingUI() {
    $quiz = $this->linkQuestionToQuiz($question = $this->createQuizQuestion());

    $this->drupalLogin($this->admin);
    $this->drupalGet("quiz-question/$question->qid/edit");
    $this->drupalPost(NULL, array(
        'alternatives[0][answer][value]' => 'Correct answer 1',
        'alternatives[0][weight]'        => 1,
        'alternatives[1][answer][value]' => 'Incorrect answer 2',
        'alternatives[1][weight]'        => 2,
        'alternatives[2][answer][value]' => 'Incorrect answer 3',
        'alternatives[2][weight]'        => 3
      ), t('Save question'));
    $this->drupalPost("quiz/{$quiz->qid}/questions", array("revision[{$question->qid}-{$question->vid}]" => 1), t('Submit'));

    $this->drupalGet("quiz/$quiz->qid/take");
    $a = strpos($this->content, 'Correct answer 1');
    $b = strpos($this->content, 'Incorrect answer 2');
    $c = strpos($this->content, 'Incorrect answer 3');

    $this->assertTrue($a < $b, 'A comes before B');
    $this->assertTrue($b < $c, 'B comes before C');

    $this->drupalPost(NULL, array("question[$question->qid][answer][user_answer]" => 4), t('Finish'));
    $this->assertText('You got 1 of 1 possible points.');
    $this->assertText('Your score: 100%');

    // Now screw them up.
    $question = quizz_question_load($question->qid, NULL, TRUE);
    $this->drupalGet("quiz-question/$question->qid/edit");
    $this->drupalPost(NULL, array(
        'alternatives[0][weight]' => 3,
        'alternatives[1][weight]' => 2,
        'alternatives[2][weight]' => 1,
        'revision'                => TRUE,
        'log'                     => 'Save new question revision'), t('Save question'));

    $this->drupalGet("quiz/$quiz->qid/questions");
    $this->drupalPost(NULL, array("revision[{$question->qid}-{$question->vid}]" => TRUE), t('Submit'));

    // Take the quiz again.
    $this->drupalGet("quiz/$quiz->qid/take");
    $a = strpos($this->content, 'Correct answer 1');
    $b = strpos($this->content, 'Incorrect answer 2');
    $c = strpos($this->content, 'Incorrect answer 3');

    $this->assertTrue($a > $b, 'A comes after B');
    $this->assertTrue($b > $c, 'B comes after C');

    // Check that the correct answer did not change even with the weight adjustment.
    $this->drupalPost(NULL, array("question[$question->qid][answer][user_answer]" => 7), t('Finish'));
    $this->assertText('You got 1 of 1 possible points.');
    $this->assertText('Your score: 100%');
  }

}
