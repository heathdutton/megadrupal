<?php
/**
 * @file
 * Module file for Pseudo field module.
 */

/**
 * Implements hook_field_attach_view_alter().
 *
 * Adds a pre_render function so that extra fields can be accessed in fields
 * view context.
 */
function pseudo_field_field_attach_view_alter(&$output, $context) {
  $output['#pre_render'][] = 'pseudo_field_extra_field_pre_render';
}

/**
 * Identify arrays with "#pseudo_field" property and theme them as real fields.
 *
 * @param array $elements
 *   Extra field element array.
 *
 * @return array
 *   Extra field element array.
 *
 * @see pseudo_field_extra_field_process()
 */
function pseudo_field_extra_field_pre_render($elements) {
  // Theme extra field as a real field only in view mode.
  if (isset($elements['#view_mode'])) {
    // Loop through fields.
    foreach (element_children($elements) as $name) {
      // Check if extra field needs to be themed as a real field.
      if (!empty($elements[$name]['#pseudo_field'])) {
        // Set the context for renderer.
        $context = array(
          'entity_type' => $elements['#entity_type'],
          'bundle' => $elements['#bundle'],
          'view_mode' => $elements['#view_mode'],
          'field_machine_name' => $name,
        );
        $elements[$name] = pseudo_field_extra_field_process($elements[$name], $context);
      }
    }
  }

  return $elements;
}

/**
 * Process the extra field to look like a real field.
 *
 * @param array $element
 *   Extra field element array.
 * @param array $context
 *   Context of the extra field.
 *
 * @return array
 *   Extra field element array.
 */
function pseudo_field_extra_field_process($element, $context) {
  // Return original element if context values are missing.
  if (empty($context['entity_type']) || empty($context['bundle']) || empty($context['view_mode']) || empty($context['field_machine_name'])) {
    return $element;
  }

  // If "#title" property is non-existing, set the label of the extra field as
  // a value of "#title" property.
  if (!isset($element['#title'])) {
    $extra_fields = field_info_extra_fields($context['entity_type'], $context['bundle'], 'display');

    if (isset($extra_fields[$context['field_machine_name']]['label'])) {
      $element['#title'] = $extra_fields[$context['field_machine_name']]['label'];
    }
  }

  // Set position of the label.
  if (isset($element['#title']) && $element['#title'] != '') {
    if (isset($element['#label_display'])) {
      $label_display = $element['#label_display'];
    }
    else {
      $label_display = 'above';
    }
  }
  else {
    $label_display = 'hidden';
  }

  // Copy all values from $element.
  $extra_element = $element;

  // Add properties required by the "field" theme. This overrides properties
  // set in $element. "#theme" property is only overridden for the
  // $extra_element, therefore "#theme" property in $element is preserved and
  // used in rendering of $element.
  $overrides = array(
    '#theme' => 'field',
    '#view_mode' => $context['view_mode'],
    '#entity_type' => $context['entity_type'],
    '#bundle' => $context['bundle'],
    '#label_display' => $label_display,
    '#field_name' => (isset($element['#field_name']) ? drupal_html_class($element['#field_name']) : $context['field_machine_name']),
    '#field_type' => (isset($element['#field_type']) ? drupal_html_class($element['#field_type']) : 'extra_field'),
  );
  $extra_element =  $overrides + $extra_element;

  if ($children = element_children($extra_element, TRUE)) {
    // Without #children children will not show up.
    $extra_element['#children'] = '';

    // Loop through element children.
    foreach ($children as $key) {
      // Only keys in "#items" property are required in
      // template_preprocess_field().
      $extra_element['#items'][$key] = array();

      // Add rendered content to child element.
      $extra_element[$key] = array('#markup' => drupal_render($element[$key]));
    }
  }
  else {
    // Only keys in "#items" property are required in
    // template_preprocess_field().
    $extra_element['#items'][0] = array();

    // Add rendered content to child element.
    $extra_element[0]['#markup'] = drupal_render($element);
  }

  return $extra_element;
}
