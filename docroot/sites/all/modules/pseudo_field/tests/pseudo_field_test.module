<?php

/**
 * @file
 * Pseudo field Test module.
 */

/**
 * Implements hook_help().
 */
function pseudo_field_test_help($path, $arg) {
  switch ($path) {
    case 'admin/help#pseudo_field_test':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>';
      $output .= t('Pseudo field Test module provides sample data for Pseudo field module test cases.');
      if (module_exists('simpletest')) {
        $output .= ' ' . t('See the <a href="@testing-url">Testing</a> page for available tests.', array('@testing-url' => url('admin/config/development/testing')));
      }
      $output .= '</p>';
      return $output;
  }
}

/**
 * Returns letters of the Greek alphabet.
 *
 * @return array
 *   A list of test data values.
 */
function pseudo_field_test_greek_alphabet() {
  return array(
    'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta',
    'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho',
    'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega',
  );
}

/**
 * Implements hook_field_extra_fields().
 *
 * Adds two extra fields to view modes of "page" content type.
 */
function pseudo_field_test_field_extra_fields() {
  $data['node']['page_test']['display']['bare_field'] = array(
    'label' => t('Bare field'),
  );
  $data['node']['page_test']['display']['single_value_field'] = array(
    'label' => t('Single value field'),
  );
  $data['node']['page_test']['display']['single_value_field_label_inline'] = array(
    'label' => t('Single value field with inline label'),
  );
  $data['node']['page_test']['display']['single_value_field_label_above'] = array(
    'label' => t('Single value field with label above'),
  );
  $data['node']['page_test']['display']['single_value_field_label_hidden'] = array(
    'label' => t('Single value field with hidden label'),
  );
  $data['node']['page_test']['display']['single_value_field_custom_title'] = array(
    'label' => t('Single value field with custom title'),
  );
  $data['node']['page_test']['display']['single_value_field_label_with_empty_title'] = array(
    'label' => t('Single value field with label and empty title'),
  );
  $data['node']['page_test']['display']['single_value_field_custom_field_name'] = array(
    'label' => t('Single value field with custom field name'),
  );
  $data['node']['page_test']['display']['single_value_field_custom_field_type'] = array(
    'label' => t('Single value field with custom field type'),
  );
  $data['node']['page_test']['display']['multi_values_field'] = array(
    'label' => t('Multi value field'),
  );

  // Set weight for each extra field in consecutive order.
  $weight = 0;
  foreach ($data['node']['page_test']['display'] as &$extra_field) {
    $extra_field['weight'] = $weight;
    $weight++;
  }

  return $data;
}

/**
 * Returns number of items to generate for multi value extra fields.
 */
function pseudo_field_test_multi_value_items_count() {
  return 4;
}

/**
 * Implements hook_node_view().
 *
 * Provides content for "single_value_extra_field" and
 * "multiple_values_extra_field" extra fields.
 */
function pseudo_field_test_node_view($node, $view_mode, $langcode) {
  // Get the Greek alphabet.
  $alphabet = pseudo_field_test_greek_alphabet();

  if ($node->type == 'page_test') {
    // Bare extra field without "#pseudo_field" property.
    $extra_fields['bare_field'] = array(
      '#markup' => t('Bare field'),
    );

    // Single value field with "#pseudo_field" property.
    $extra_fields['single_value_field'] = array(
      '#pseudo_field' => TRUE,
      '#markup' => $alphabet[0],
    );

    // Single value field with "#pseudo_field" property and "#title_display"
    // property set to "inline".
    $extra_fields['single_value_field_label_inline'] = array(
      '#pseudo_field' => TRUE,
      '#label_display' => 'inline',
      '#markup' => $alphabet[0],
    );

    // Single value field with "#pseudo_field" property and "#title_display"
    // property set to "above".
    $extra_fields['single_value_field_label_above'] = array(
      '#pseudo_field' => TRUE,
      '#label_display' => 'above',
      '#markup' => $alphabet[0],
    );

    // Single value field with "#pseudo_field" property and "#title_display"
    // property set to "hidden".
    $extra_fields['single_value_field_label_hidden'] = array(
      '#pseudo_field' => TRUE,
      '#label_display' => 'hidden',
      '#markup' => $alphabet[0],
    );

    // Single value field with "#pseudo_field" property and custom "#title"
    // property.
    $extra_fields['single_value_field_custom_title'] = array(
      '#pseudo_field' => TRUE,
      '#title' => $alphabet[0],
      '#markup' => $alphabet[0],
    );

    // Single value field with "#pseudo_field" property and empty "#title"
    // property.
    $extra_fields['single_value_field_label_with_empty_title'] = array(
      '#pseudo_field' => TRUE,
      '#title' => '',
      '#label_display' => 'inline',
      '#markup' => $alphabet[0],
    );

    // Single value field with "#pseudo_field" property and custom "#field_name"
    // property.
    $extra_fields['single_value_field_custom_field_name'] = array(
      '#pseudo_field' => TRUE,
      '#field_name' => 'custom_field_name',
      '#markup' => $alphabet[0],
    );

    // Single value field with "#pseudo_field" property and custom "#field_type"
    // property.
    $extra_fields['single_value_field_custom_field_type'] = array(
      '#pseudo_field' => TRUE,
      '#field_type' => 'custom_field_type',
      '#markup' => $alphabet[0],
    );

    // Multi value field with "#pseudo_field" and "#title" properties.
    $extra_fields['multi_values_field'] = array(
      '#pseudo_field' => TRUE,
      '#title' => $alphabet[0],
    );

    // Populate multi value field with data.
    foreach (range(0, pseudo_field_test_multi_value_items_count() - 1) as $delta) {
      $extra_fields['multi_values_field'][$delta]['#markup'] = $alphabet[$delta];
    }

    // Add extra fields to node content.
    $node->content += $extra_fields;
  }
}
