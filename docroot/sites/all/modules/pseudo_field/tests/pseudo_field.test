<?php

/**
 * @file
 * Test routines for Pseudo field module.
 */

/**
 * Common parent class containing common helpers.
 */
class PseudoFieldWebTestCase extends DrupalWebTestCase {
  /**
   * Name of the test content type.
   *
   * @var string Test content type name.
   */
  protected $contentType = '';

  /**
   * Test node.
   *
   * @var stdClass Contains node object.
   */
  protected $node = NULL;

  /**
   * Root element xpath template.
   *
   * @var string
   */
  protected $xpathRoot = '//div[@id=:id]/div[contains(@class, "content")]';

  /**
   * Variables for xpath.
   *
   * @var array
   */
  protected $xpathVariables = array();

  /**
   * Set up a Drupal site.
   */
  protected function setUp() {
    parent::setUp(array('pseudo_field_test'));

    // Create a user.
    $web_user = $this->drupalCreateUser(array(
      'create page_test content',
      'edit any page_test content')
    );
    $this->drupalLogin($web_user);

    // Create a node.
    $this->node = $this->createNode($this->getContentType());

    // Open node page in full view.
    $this->drupalGet('node/' . $this->node->nid);

    // Set xpath variables.
    $this->xpathVariables = array(
      ':id' => 'node-' . $this->node->nid,
    );
  }

  /**
   * Returns test content type.
   *
   * @return string
   *   The name of the content type.
   */
  public function getContentType() {
    // Return already generated field values.
    if (!empty($this->contentType)) {
      return $this->contentType;
    }
    else {
      // Include install file for "pseudo_field_test" to have access to created
      // content types.
      module_load_install('pseudo_field_test');

      $content_types = pseudo_field_test_install_get_content_types();
      $this->contentType = key($content_types);

      return $this->contentType;
    }
  }

  /**
   * Create a node with field values.
   *
   * @param string $content_type
   *   Name of the content type.
   *
   * @return object
   *   An object of a created node.
   */
  public function createNode($content_type) {
    // Create a node.
    $edit = array();
    $edit["title"] = $this->randomName(8);

    // Save the node.
    $this->drupalPost('node/add/' . $content_type, $edit, t('Save'));

    // Return node object.
    return $this->drupalGetNodeByTitle($edit["title"]);
  }

  /**
   * Returns number of extra fields with "#pseudo_field" property on a node.
   *
   * @return int
   *   Number of extra fields.
   */
  public function pseudoFieldCount() {
    // Get the information about extra fields for "page_test" bundle displays.
    $extra_fields_info = pseudo_field_test_field_extra_fields();
    $extra_fields_info = $extra_fields_info['node'][$this->getContentType()]['display'];

    // Exclude one bare extra field.
    return count($extra_fields_info) - 1;
  }

  /**
   * Returns test data that is used for extra field values.
   *
   * @return array
   *   A list of test data values.
   */
  public function getTestValues() {
    return pseudo_field_test_greek_alphabet();
  }

  /**
   * Returns "contains" statement for xpath with spaces around the class.
   *
   * Spaces around the classes allows to check for precise class name, as
   * contains(@class, "my-class") will also select elements with classes like
   * "my-class-with-suffix".
   *
   * @param string $class
   *   Class name.
   *
   * @return string
   *   Xpath "contains" statement.
   */
  public function xpathClassContains($class) {
    return 'contains(concat(" ", normalize-space(@class), " "), " ' . $class . ' ")';
  }

}

/**
 * Tests the functionality of the Pseudo field module.
 */
class PseudoFieldTestCase extends PseudoFieldWebTestCase {
  protected $profile = 'testing';

  /**
   * General info of the test case.
   *
   * @return array
   *   Test class information array.
   */
  public static function getInfo() {
    return array(
      'name' => 'Pseudo field tests',
      'description' => 'Ensure that the Pseudo field module returns accurate data.',
      'group' => 'Pseudo field',
    );
  }

  /**
   * Various tests of extra field output.
   */
  public function testPseudoFieldOutput() {
    $test_values = $this->getTestValues();

    // Test number of extra fields with "#pseudo_field" property on the node.
    // Elements are selected by default field type ("extra_field") and custom
    // field type ("custom_field_type").
    $variables = $this->xpathVariables + array(
      ':pseudo_field_class' => 'field-type-extra-field',
      ':custom_pseudo_field_class' => 'field-type-custom-field-type',
    );
    $xpath = $this->xpath($this->xpathRoot . '/div[' . $this->xpathClassContains($variables[':pseudo_field_class']) . ' or ' . $this->xpathClassContains($variables[':custom_pseudo_field_class']) . ']', $variables);
    $this->assertEqual($this->pseudoFieldCount(), count($xpath), 'Number of extra fields is correct.');

    // Test number of extra fields with "#pseudo_field" property having "field"
    // class.
    // Elements are selected by default field type ("extra_field") and custom
    // field type ("custom_field_type").
    $variables = $this->xpathVariables + array(
      ':pseudo_field_class' => 'field-type-extra-field',
      ':custom_pseudo_field_class' => 'field-type-custom-field-type',
      ':field_class' => 'field',
    );
    $xpath = $this->xpath($this->xpathRoot . '/div[(' . $this->xpathClassContains($variables[':pseudo_field_class']) . ' or ' . $this->xpathClassContains($variables[':custom_pseudo_field_class']) . ') and ' . $this->xpathClassContains($variables[':field_class']) . ']', $variables);
    $this->assertEqual($this->pseudoFieldCount(), count($xpath), 'Number of extra fields with "field" class is correct.');

    // Test whether label class is set for extra field with "#pseudo_field"
    // and "#label_display" property set to "inline|above" and whether label
    // element is visible.
    foreach (array('inline', 'above', 'hidden') as $position) {
      $variables = $this->xpathVariables + array(
        ':pseudo_field_class' => 'field-name-single-value-field-label-' . $position,
        ':label_class' => 'field-label-' . $position,
        ':label_element_class' => 'field-label',
      );
      // Test whether correct label class is set.
      $element_found = $this->xpath($this->xpathRoot . '/div[' . $this->xpathClassContains($variables[':pseudo_field_class']) . ' and ' . $this->xpathClassContains($variables[':label_class']) . ']', $variables);
      $this->assertTrue($element_found, 'Extra field with "#title_display" property value set to "' . $position . '" has correct label class set.');

      // Test whether label element is visible.
      $element_found = $this->xpath($this->xpathRoot . '/div[' . $this->xpathClassContains($variables[':pseudo_field_class']) . ']/div[' . $this->xpathClassContains($variables[':label_element_class']) . ']', $variables);
      $this->assertTrue($position != 'hidden' ? $element_found : !$element_found, 'Extra field with "#title_display" property value set to "' . $position . '" has label correctly displayed.');
    }

    // Test custom label is output for extra field with "#pseudo_field"
    // and "#title" properties.
    $variables = $this->xpathVariables + array(
      ':pseudo_field_class' => 'field-name-single-value-field-custom-title',
      ':label_class' => 'field-label',
    );
    $title = (string) current($this->xpath($this->xpathRoot . '/div[' . $this->xpathClassContains($variables[':pseudo_field_class']) . ']/div[' . $this->xpathClassContains($variables[':label_class']) . ']', $variables));
    $this->assertTrue(preg_match('/^' . $test_values[0] . ':/', decode_entities($title)), 'Title of an extra field with "#title" property is correct.');

    // Test label is not output for extra field with "#pseudo_field"
    // property and "#title" property set to an empty string.
    $variables = $this->xpathVariables + array(
      ':pseudo_field_class' => 'field-name-single-value-field-label-with-empty-title',
      ':label_class' => 'field-label',
    );
    $element_found = $this->xpath($this->xpathRoot . '/div[' . $this->xpathClassContains($variables[':pseudo_field_class']) . ']/div[' . $this->xpathClassContains($variables[':label_class']) . ']', $variables);
    $this->assertFalse($element_found, 'Extra field with "#title" property value set to an empty string is hidden.');

    // Test whether correct class is set for extra field with "#pseudo_field"
    // and "#field_name" properties set.
    $variables = $this->xpathVariables + array(
      ':pseudo_field_class' => 'field-name-custom-field-name',
    );
    $element_found = $this->xpath($this->xpathRoot . '/div[' . $this->xpathClassContains($variables[':pseudo_field_class']) . ']', $variables);
    $this->assertTrue($element_found, 'Extra field with "#field_name" property has correct class set and is displayed.');

    // Test whether correct class is set for extra field with "#pseudo_field"
    // and "#field_type" properties set.
    $variables = $this->xpathVariables + array(
      ':pseudo_field_class' => 'field-type-custom-field-type',
    );
    $element_found = $this->xpath($this->xpathRoot . '/div[' . $this->xpathClassContains($variables[':pseudo_field_class']) . ']', $variables);
    $this->assertTrue($element_found, 'Extra field with "#field_type" property has correct class set and is displayed.');

    // Test number of field items that stem from multi-dimensional extra field
    // array.
    $variables = $this->xpathVariables + array(
      ':pseudo_field_class' => 'field-name-multi-values-field',
      ':items_class' => 'field-items',
      ':item_class' => 'field-item',
    );
    $xpath = $this->xpath($this->xpathRoot . '/div[' . $this->xpathClassContains($variables[':pseudo_field_class']) . ']/div[' . $this->xpathClassContains($variables[':items_class']) . ']/div[' . $this->xpathClassContains($variables[':item_class']) . ']', $variables);
    $this->assertEqual(pseudo_field_test_multi_value_items_count(), count($xpath), 'Number of field items on a multi-dimensional extra field is correct.');
  }

}
