<?php
/**
 * Implements hook_requirements().
 */
function flex_galleryformatter_requirements($phase) {
  // Create an array to hold MPDF requirements
  $requirements = array();

  // Check requirements during the runtime phase
  if ($phase == 'runtime') {
    if (file_exists(libraries_get_path('flexslider'))) {
      $requirements['flexslider_library'] = array(
        'title' => t('Flexslider library'),
        'value' => t('Available'),
        'severity' => REQUIREMENT_OK,
      );
    }
    else {
      $requirements['flexslider_library'] = array(
        'title' => t('Flexslider library'),
        'value' => t('Unavailable'),
        'description' => t('Download FlexSlider from
           <a href="https://github.com/woothemes/FlexSlider">
             https://github.com/woothemes/FlexSlider</a> and add it to
             YourSite/sites/all/libraries directory. Make sure your files
               structure is
                site/all/libraries/flexslider/jquery.flexslider-min.js'),
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}
/**
 * Implementation of hook_field_formatter_info().
 */
function flex_galleryformatter_field_formatter_info() {
  return array(
    'flex_galleryformatter_default' => array(
      'label' => t('Flex Gallery with thumbs'),
      'field types' => array('image','media'),
      'settings' => array(
        'slide_style' => 'large',
        'thumb_style' => 'thumbnail',
        'link_image' => 'large',
        'link_thumbnail' => 'none',
        'slide_nav_arrows' => false,
        'thumb_width' => 210,
      ),
      'description' => t('Display multi-value fields as an Flex Image gallery.'),
    ),
   'flex_galleryformatter_slider' => array(
      'label' => t('Flex Gallery slider'),
      'field types' => array('image','media'),
      'settings' => array(
        'slide_style' => 'large',
        'link_image' => 'large',
        'link_thumbnail' => 'none',
        'slide_nav_arrows' => true,
      ),
      'description' => t('Display multi-value fields as an Flex Image gallery.'),
    ),
   'flex_galleryformatter_carousel' => array(
     'label' => t('Flex Gallery carousel'),
     'field types' => array('image','media'),
     'settings' => array(
       'thumb_style' => 'thumbnail',
       'link_image' => 'large',
       'link_thumbnail' => 'none',
       'slide_nav_arrows' => true,
       'thumb_width' => 210,
     ),
     'description' => t('Display multi-value fields as an Flex Image gallery.'),
   ),
  );
}
/**
 * Implements hook_field_formatter_settings_form().
 */
function flex_galleryformatter_field_formatter_settings_form($field, $instance, $view_mode) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $form = array();
  $options = array('none' => t('None'),);
  // get a list of all style names for our form options
  foreach (image_styles() as $id => $style) {
    $options[$id] = $id;
  }
  if ($display['type'] != 'flex_galleryformatter_carousel') {
    $form['slide_style'] = array(
      '#type' => 'select',
      '#title' => t('Select the slide image style'),
      '#options' => $options,
      '#default_value' => $settings['slide_style'],
      '#description' => t('Select the imagecache style you would like to show when clicked on the thumbnail.'),
    );
    $form['slide_nav_arrows'] = array(
      '#type' => 'checkbox',
      '#title' => t('Navigation arrows for slider'),
      '#default_value' => $settings['slide_nav_arrows'],
    );
    $form['link_image'] = array(
      '#type' => 'select',
      '#title' => t('Link slide image to'),
      '#options' => $options,
      '#default_value' => $settings['link_image'],
      '#description' => t('Select the imagecache style you would like to show when clicking the image.'),
    );
  }
  if ($display['type'] != 'flex_galleryformatter_slider') {
    $form['thumb_style'] = array(
      '#type' => 'select',
      '#title' => t('Select the thumbnail image style'),
      '#options' => $options,
      '#default_value' => $settings['thumb_style'],
      '#description' => t('Select the imagecache style you would like to show for the thumbnails list.'),
    );
    $form['thumb_width'] = array(
      '#type' => 'textfield',
      '#title' => t('Thumbnail width in pixels'),
      '#default_value' => $settings['thumb_width'],
      '#required' => TRUE,
      '#element_validate' => array('element_validate_number'),
    );
    $form['link_thumbnail'] = array(
      '#type' => 'select',
      '#title' => t('Link thumbnail image to'),
      '#options' => $options,
      '#default_value' => $settings['link_thumbnail'],
      '#description' => t('Select the imagecache style you would like to show when clicking the thumbnail image.'),
    );
  }
  return $form;
}


/**
 * Implements hook_field_formatter_view().
 */
function flex_galleryformatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if(empty($items)){
    return $element;
  }
  $renderitems['slides'] = array();
  $renderitems['thumbs'] = array();
  $modulepath = drupal_get_path('module', 'flex_galleryformatter');
  $settings = $display['settings'];
  if (isset($settings['slide_nav_arrows'])) {
    $slider_settings['FlexGalleryFormatter']['slideNavArrows'] = $settings['slide_nav_arrows']  ? TRUE : FALSE;
  }
  if (isset($settings['thumb_width'])) {
    $slider_settings['FlexGalleryFormatter']['thumbWidth'] = (int) $settings['thumb_width'];
  }
  drupal_add_js($slider_settings, 'setting');
  if(file_exists(libraries_get_path('flexslider'))) {
    $lib_path = libraries_get_path('flexslider');
    drupal_add_js($lib_path . '/jquery.flexslider-min.js');
    drupal_add_js($modulepath .'/' . $display['type'] . '.js');
    drupal_add_css($lib_path . '/flexslider.css');
    drupal_add_css($modulepath . '/flex_galleryformatter.css');
  }
  foreach ($items as $delta => $item){
    if (isset($settings['slide_style'])) {
      $slide_image = theme('image_style', array(
          'style_name' => $settings['slide_style'],
          'path' => $item['uri'],
        )
      );
      if ($settings['link_image'] !== 'none') {
          $renderitems['slides'][$delta]['image'] = l($slide_image, image_style_url($settings['link_image'], $item['uri']), array('html'=> TRUE));
      }
      else {
        $renderitems['slides'][$delta]['image'] = $slide_image;
      }
    }

    if (isset($settings['thumb_style'])) {
      $thumb_image = theme('image_style', array(
                'style_name' => $settings['thumb_style'],
                'path' => $item['uri'],
        )
      );
      if ($settings['link_thumbnail'] !== 'none') {
        $renderitems['thumbs'][$delta]['image'] = l($thumb_image, image_style_url($settings['link_thumbnail'], $item['uri']), array('html'=> TRUE));
      }
      else {
        $renderitems['thumbs'][$delta]['image'] = $thumb_image;
      }
    }
  }
  $element['#slides'] = $renderitems['slides'];
  $element['#thumbs'] = $renderitems['thumbs'];
  // prepare the variables for our theme function
  $element['#theme'] ='flex_galleryformatter';

  return $element;
}

/**
 * Implementation of hook_theme().
 */
function flex_galleryformatter_theme() {
  return array(
    'flex_galleryformatter' => array(
      'variables' => array('slides' => NULL, 'thumbs' => NULL),
      'template' => 'flex-galleryformatter'
    )
  );
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function flex_galleryformatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if (isset($settings['slide_style'])) {
    $summary[] = t('Slides style: @value', array('@value' => $settings['slide_style']));
    $summary[] = t('Use navigation arrows: @value', array('@value' => $settings['slide_nav_arrows']));
  }
  if (isset($settings['thumb_style'])) {
    $summary[] = t('Thumbnails style: @value', array('@value' => $settings['thumb_style']));
    $summary[] = t('Thumbnail width in pixels: @valuepx', array('@value' => $settings['thumb_width']));
    $summary[] = t('Link image to style: @value', array('@value' => $settings['link_image']));
 }
  return implode ('<br />', $summary);
}
