<?php
/**
 * @file(skos_explorer.module)
 * It contains function to query SKOS datasets availables in SPARQL Endpoints
 * Display results in a tree using jsTree library. See https://github.com/vakata/jstree
 * Also display a full description of a term distributed in tabs using jQueryUI
*/

define('SPARQL_ENDPOINT', 'http://202.45.139.84:10035/catalogs/fao/repositories/agrovoc');
module_load_include('inc', 'skos_explorer', 'skos_explorer.sparql.queries');

/**
 * Implementation of hook_init
 * @return [type] [description]
 */
function skos_explorer_init() {
  // load jstree libraries
  drupal_add_js(drupal_get_path('module', 'skos_explorer') . '/js/jstree.min.js');
  drupal_add_css(drupal_get_path('module', 'skos_explorer') . '/css/style.min.css');
  // load jqueryui tabs widgets
  drupal_add_library('system', 'ui.tabs');
  // load custom css
  drupal_add_css(drupal_get_path('module','skos_explorer') . '/css/skos_explorer.css');
}

/**
 * Implementation of hook_menu
 * @return [type] [description]
 */
function skos_explorer_menu(){

  $items['skos_explorer'] = array(
    'title' => 'SKOS Explorer',
    'description' => 'SKOS explorer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('skos_explorer_page_form'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['skos_explorer/%/%/%'] = array(
    'title' => 'SKOS Explorer',
    'description' => 'SKOS explorer',
    'page callback' => 'skos_explorer_right_panel_tabs',
    'page arguments' => array(1, 2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['skos_explorer/children/%/%'] = array(
    'page callback' => 'skos_explorer_children_json_output',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['skos_explorer/search/%/%/%'] = array(
    'page callback' => 'skos_explorer_children_json_search_output',
    'page arguments' => array(2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['skos_explorer/log'] = array(
    'title' => t('Search log'),
    'page callback' => 'skos_explorer_display_log',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  return $items;

}

/**
 * Load form to select options for sparql query
 * @return [type] [description]
 */
function skos_explorer_page_form() {

  $form['search_endpoint'] = array(
    '#description' => 'Please, enter Endpoint SPARQL',
    '#type' => 'textfield',
    '#default_value' => variable_get('skos_explorer_endpoint', SPARQL_ENDPOINT),
    '#prefix' => '<ul id="skos-explorer-endpoint"><li>',
    '#suffix' => '</li></ul>',
  );

  $form['search_string'] = array(
    '#description' => 'Please, enter a search string',
    '#type' => 'textfield',
    '#prefix' => '<ul id="skos-explorer-page-form-elements"><li>',
    '#suffix' => '</li>',
  );

  $form['search_language'] = array(
    '#type' => 'select',
    '#options' => skos_explorer_languages(),
    '#default_value' => variable_get('skos_explorer_language', 'en'),
    '#prefix' => '<li>',
    '#suffix' => '</li>',
  );

  $form['search_submit'] = array(
    '#value' => 'Submit',
    '#type' => 'submit',
    '#prefix' => '<li><div class="form-item">',
    '#suffix' => '</div></li></ul>',
    '#ajax' => array(
      'callback' => 'skos_explorer_page_form_submit_data',
      'wrapper' => 'skos_explorer_left_panel_container',
      'method' => 'html',
      'effect' => 'fade',
    ),

  );

  $form['search_alphabet'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#prefix' => '<ul id="skos-explorer-alphabet"><li>',
    '#suffix' => '</li></ul>',
  );

  $form['search_alphabet']['alphabet'] = array(
    '#description' => 'Filter with a letter in the alphabet',
    '#type' => 'item',
    '#markup' => theme('skos_explorer_alphabet', array('lang' => 'en')),
    '#prefix' => '<div id="skos_explorer_alphabet">',
    '#suffix' => '</div>',
  );

  $form['search_history'] = array(
    '#type' => 'markup',
    '#markup' => l('Search log', 'skos_explorer/log'),
    '#prefix' => '<div id="skos-explorer-log">',
    '#suffix' => '</div>',
  );

  $form['search_left_panel'] = array(
    '#markup' => '<div id="skos_explorer_left_panel_container">left</div>',
    '#type' => 'markup',
    '#prefix' => '<div id="skos_explorer_panel"><div id="skos_explorer_left_panel">',
    '#suffix' => '</div>',
  );

 $form['search_right_panel'] = array(
    '#markup' => '<span>right</span>',
    '#type' => 'markup',
    '#prefix' => '<div id="skos_explorer_right_panel">',
    '#suffix' => '</div></div>',
  );

  return $form;
}

/**
 * Send query data
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @return [type]             [description]
 */
function skos_explorer_page_form_submit_data($form, $form_state){
  if (easyrdf()) {
   global $user;
   $search_string = $form_state['values']['search_string'];
   $lang = $form_state['values']['search_language'];
   $endpoint = $form_state['values']['search_endpoint'];
   variable_set('skos_explorer_endpoint', $endpoint);
   variable_set('skos_explorer_language', $lang);

   $sparql_client = new EasyRdf_Sparql_Client($endpoint);
   $skos = new SkosVoc($sparql_client);
   $terms = $skos->getSearchTermsbyLabel($search_string, $lang);

   try {
     skos_explorer_store_log($user->uid, $search_string);
   } catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'warning');
   }

   return skos_explorer_item_list($terms, $lang);
  }
}

/**
 * Display right panel tabs when you make click in one of items displayed in left panel
 * @param  [type] $uri  [description]
 * @param  [type] $lang [description]
 * @return [type]       [description]
 */
function skos_explorer_right_panel_tabs($uri, $label, $lang) {
    $uri = urldecode($uri);
    libraries_load('easyrdf');
    $endpoint = variable_get('skos_explorer_endpoint', SPARQL_ENDPOINT);
    $sparql_client = new EasyRdf_Sparql_Client($endpoint);
    $skos = new SkosVoc($sparql_client);

    $terms = $skos->getDefinitionByURI($uri, $lang);
    $definition = skos_explorer_item_list($terms, $lang);
    $terms = $skos->getBroaderTermsByURI($uri, $lang);
    $broader = skos_explorer_item_list($terms, $lang);
    $terms = $skos->getNarrowerTermsByURI($uri, $lang);
    $narrower = skos_explorer_item_list($terms, $lang);
    $terms = $skos->getRelatedTermsByURI($uri, $lang);
    $related = skos_explorer_item_list($terms, $lang);
    $terms = $skos->getRelatedTermsBySubPropertyOfByURI($uri, $lang);
    $related = $related . skos_explorer_item_list($terms, $lang);

    print theme('skos_explorer_tabs', array('uri' => $uri, 'label' => $label, 'lang' => $lang, 'definition' => $definition, 'broader' => $broader, 'narrower' => $narrower, 'related' => $related));
    exit();
}

/**
 * Display languages to select
 * @return [type] [description]
 */
function skos_explorer_languages() {
  return array(
    'ar' => t('Arabic'),
    'zh' => t('Chinese'),
    'en' => t('English'),
    'fr' => t('French'),
    'it' => t('Italian'),
    'ru' => t('Russian'),
    'es' => t('Spanish'),
  );
}

/**
 * Implementation of hook_theme
 * @return [type] [description]
 */
function skos_explorer_theme() {
  return array(
    'skos_explorer_tabs' => array(
      'variables' => array(
        'uri' => NULL,
        'label' => NULL,
        'lang' => NULL,
        'definition' => NULL,
        'broader' => NULL,
        'narrower' => NULL,
        'related' => NULL,
        ),
      'template' => 'skos-explorer-tabs',
      ),
    'skos_explorer_alphabet' => array(
      'variables' => array(
        'lang' => NULL,
        ),
      )
    );
}

function theme_skos_explorer_alphabet($lang) {
  $letters = skos_explorer_alphabet($lang);
  foreach ($letters as $letter) {
    $links[] = l($letter, '', array('fragment' => ' ', 'external' => TRUE));
  }
  return theme('item_list', array('items' => $links));
}

/**
 * Display top level of SKOS Vocabulary
 * @return array [description]
 */
function skos_explorer_root() {
  if (easyrdf()) {
      $endpoint = variable_get('skos_explorer_endpoint', SPARQL_ENDPOINT);
      $sparql_client = new EasyRdf_Sparql_Client($endpoint);
      $skos = new SkosVoc($sparql_client);
      $lang = variable_get('skos_explorer_language', 'en');
      $terms = $skos->getTopAllConceptOf($lang);
      return skos_explorer_tree_item_list($terms, $lang);
  }
}

function skos_explorer_children($uri, $lang = 'en') {
  if (easyrdf()) {
      $endpoint = variable_get('skos_explorer_endpoint', SPARQL_ENDPOINT);
      $sparql_client = new EasyRdf_Sparql_Client($endpoint);
    $skos = new SkosVoc($sparql_client);
    $terms = $skos->getBottomConceptOf(urldecode($uri), $lang);
    return skos_explorer_tree_item_list($terms, $lang);
  }
}

function skos_explorer_children_json_output($uri, $lang = 'en'){
  $terms = skos_explorer_children(urldecode($uri), $lang);
  return drupal_json_output(array_values($terms));
}

/**
 * It gets all parents nodes given a URI
 * @param  [type] $uri   [description]
 * @param  string $lang  [description]
 * @param  [type] $leafs [description]
 * @return array        [description]
 */
function skos_explorer_get_parents_nodes($uri, $lang = 'en', $leafs = array()) {
    if (easyrdf()) {
      $endpoint = variable_get('skos_explorer_endpoint', SPARQL_ENDPOINT);
      $sparql_client = new EasyRdf_Sparql_Client($endpoint);
      $skos = new SkosVoc($sparql_client);
      $terms = $skos->getTopConceptOf($uri, $lang);
      if (!is_null($terms)) {
        foreach ($terms as $term) {
          $leafs[] = array('uri' => $term->uri->getUri(), 'label' => $term->label->getValue());
          $uri = $term->uri->getUri();
          $label = $term->label->getValue();
        }
        return skos_explorer_get_parents_nodes($uri, $lang, $leafs);
      }
      else {
        return $leafs;
      }
  }
}

/**
 * Build a tree array recursively according jstree format
 * @param  array $leafs set of nodes, one for each level, they are obtained from skos_explorer_get_parents_nodes
 * @param  string $lang  language
 * @param  array $tree  tree
 * @return array  entire tree
 */
function skos_explorer_root_search($leafs, $lang = 'en', $search_string = NULL, $tree = NULL) {
  // run just at the beginning
  if (empty($tree)) {
    // these next 2 commented lines are important if you want to sort and reset key values order
    //krsort($leafs);
    //$leafs = array_merge($leafs);
    $tree = skos_explorer_root_search_children($leafs[0]['uri'], $lang);
    $tree[strtolower($search_string)]['state']['selected'] = TRUE;
    $tree = array(strtolower($leafs[0]['label']) => array('text' => $leafs[0]['label'], 'children' => array_values($tree), 'state' => array('opened' => TRUE)));
    // remove first value for next loop
    array_shift($leafs);
    return skos_explorer_root_search($leafs, $lang, $search_string, $tree);
  }
  // run for the rest of values
  if (!empty($leafs)) {
    // get values for next upper level
    $children = skos_explorer_root_search_children($leafs[0]['uri'], $lang);
    // merge next upper level with current tree
    $tree = array_merge($children, $tree);
    // build the new tree
    $tree = array(strtolower($leafs[0]['label']) => array('text' => $leafs[0]['label'], 'children' => array_values($tree), 'state' => array('opened' => TRUE)));
    // remove first value for next loop
    array_shift($leafs);
    return skos_explorer_root_search($leafs, $lang, $search_string, $tree);
  }
  else {
    // at the end we need to merge the upper root level
    $root = skos_explorer_root();
    $tree = array_merge($root, $tree);
    return $tree;
  }

}

/**
 * Display child nodes according jstree
 * Is used along with skos_explorer_root_search function
 * @param  [type] $uri  [description]
 * @param  string $lang [description]
 * @return [type]       [description]
 */
function skos_explorer_root_search_children($uri, $lang = 'en') {
  if (easyrdf()) {
    $rows = NULL;
    $sparql_client = new EasyRdf_Sparql_Client(SPARQL_ENDPOINT);
    $skos = new SkosVoc($sparql_client);
    $terms = $skos->getBottomConceptOf(urldecode($uri), $lang);
    foreach ($terms as $term) {
      $label = strtolower($term->label->getValue());
      $uri = urlencode($term->uri->getUri());
      $href = 'skos_explorer/children/' . $uri . '/' . $lang;
      $rows[$label] = array('text' => $term->label->getValue(), 'children' => TRUE, 'a_attr' => array('href' => $href, 'uri' => $uri, 'lang' => $lang, 'label' => $term->label->getValue()), 'state' => array('opened' => FALSE));
      ksort($rows);
    }
    return $rows;
  }
}
/**
 * Display json output according search string
 * @param  string $uri           [description]
 * @param  string $lang          [description]
 * @param  string $search_string [description]
 * @return json                tree
 */
function skos_explorer_children_json_search_output($uri, $lang = 'en', $search_string){
  // $leafs = skos_explorer_get_parents_nodes('http://aims.fao.org/aos/agrovoc/c_330606', $lang);
  $uri = urldecode($uri);
  $leafs = skos_explorer_get_parents_nodes($uri, $lang);
  $tree = skos_explorer_root_search($leafs, $lang, $search_string);
  return drupal_json_output(array_values($tree));
}

/**
 * Display ul list of terms
 * it is used for display elements in left panel after a search query and
 * in right panel to show list of terms for each tab (broader, narrower, related)
 * @param  [type] $terms        [description]
 * @param  [type] $include_path [description]
 * @return [type]               [description]
 */
function skos_explorer_item_list($terms, $lang) {
  if (easyrdf()) {
    if(is_null($terms)) {return;}
    foreach ($terms as $term) {
      $label = $term->label->getValue();
      $rows[$label] = l($label, urlencode($term->uri->getUri()) . '/' . $lang, array('attributes' => array('label' => $label, 'lang' => $lang, 'uri' => urlencode($term->uri->getUri()))));
      ksort($rows);
    }
    return theme('item_list', array('items' => $rows));
  }
  else {
    drupal_set_message(t('Please, install easyrdf library'), 'warning');
  }
}


/**
 * Display jstree format for a list of terms
 * @param  array $terms [description]
 * @return array        [description]
 */
function skos_explorer_tree_item_list($terms, $lang) {
  //dpm($terms);
  if (easyrdf()) {
    if(is_null($terms)) {return;}
    foreach ($terms as $term) {
      $label = strtolower($term->label->getValue());
      $uri = urlencode($term->uri->getUri());
      $href = 'skos_explorer/children/' . $uri . '/' . $lang;
      $rows[$label] = array('text' => $term->label->getValue(), 'children' => TRUE, 'a_attr' => array('href' => $href, 'uri' => $uri, 'lang' => $lang, 'label' => $term->label->getValue()), 'state' => array('opened' => FALSE));
      ksort($rows);
    }
    return $rows;
  }
  else {
    drupal_set_message(t('Please, install easyrdf library'), 'warning');
  }
}

/**
 * Get alphabet for a given lang
 *
 * helper function to build alphabet for a given lang
 * only english currently supported
 *
 * @param string $lang
 * @return array
*/

function skos_explorer_alphabet($lang='en') {
  switch ($lang) {
    case "ru":
      $result = array(
                  "А",
                  "Б",
                  "В",
                  "Г",
                  "Д",
                  "Е",
                  "Ё",
                  "Ж",
                  "З",
                  "И",
                  "Й",
                  "К",
                  "Л",
                  "М",
                  "Н",
                  "О",
                  "П",
                  "Р",
                  "С",
                  "Т",
                  "У",
                  "Ф",
                  "X",
                  "Ц",
                  "Ч",
                  "Ш",
                  "Щ",
                  "Ъ",
                  "Ы",
                  "Ь",
                  "Э",
                  "Ю",
                  "Я"
                );
      break;
    case "ar":
      $result = array(
                  "ا",
                  "ب",
                  "ت",
                  "ث",
                  "ج",
                  "ح",
                  "خ",
                  "د",
                  "ذ",
                  "ر",
                  "ز",
                  "س",
                  "ش",
                  "ص",
                  "ض",
                  "ط",
                  "ظ",
                  "ع",
                  "غ",
                  "ف",
                  "ق",
                  "ك",
                  "ل",
                  "م",
                  "ن",
                  "ه",
                  "و",
                  "ي"
      );
      break;
    case 'zh': $result = array();
      break;
    default:
      $result = array(
                  "A",
                  "B",
                  "C",
                  "D",
                  "E",
                  "F",
                  "G",
                  "H",
                  "I",
                  "J",
                  "K",
                  "L",
                  "M",
                  "N",
                  "O",
                  "P",
                  "Q",
                  "R",
                  "S",
                  "T",
                  "U",
                  "V",
                  "W",
                  "X",
                  "Y",
                  "Z",
                );
      break;
  }
  return $result;
}

/**
 * Display log user information
 * @param integer $uid
 */
function skos_explorer_display_log() {
  global $user;
  $query = db_select('skos_explorer_log', 's');
  $query->fields('s');
  $query->condition('uid', $user->uid);
  $query->orderBy('id', 'DESC');
  $rows = $query->execute()->fetchAll();
  foreach($rows as $row) {
    $data['rows'][] = array($row->string, format_date($row->created, 'short'));
  }
  $data['header'] = array('String', 'Created');

  return theme('table', $data);
}

/**
 * Store data into log
 * @param  [type] $uid          user uid
 * @param  [type] $search_input search string
 * @return [type]               [description]
 */
function skos_explorer_store_log($uid, $search_input) {
  try {
    $nid = db_insert('skos_explorer_log')
    ->fields(array(
      'uid' => $uid,
      'string' => $search_input,
      'created' => REQUEST_TIME,
    ))
    ->execute();
    if (!$nid) {throw new Exception('I could not store SKOS Explorer log');}
  } catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'warning');
  }
}

