<?php

/**
 * @file
 * Subdomain module
 */

define('SUBDOMAIN_TEST_SUBDOMAIN', 'subdomain-test');
define('SUBDOMAIN_TEST_RESPONSE',  'subdomain ok');

define('SUBDOMAIN_SYSTEM_FILE_PATH_BLACKLIST_DEFAULT',   "*.js\n*/image_captcha/*");
define('SUBDOMAIN_SYSTEM_FILE_PATH_WHITELIST_DEFAULT',   "misc/*.js\nmodules/*.js");
define('SUBDOMAIN_SYSTEM_DRUPAL_PATH_BLACKLIST_DEFAULT', '');
define('SUBDOMAIN_SYSTEM_AUTH_USERS_BLACKLIST_DEFAULT',  '');

/**
 * Implementation of hook_boot().
 * Initialize subdomain "engine" and load defaults
 */
function subdomain_boot() {
  subdomain();
}

/**
 * Initialize appropriate subdomain class and return it
 */
function &subdomain() {
  $subdomain = &drupal_static(__FUNCTION__ . '__subdomain', NULL);

  if (!isset($subdomain)) {
    // Instantiate the class
    $class = 'subdomain_mode_' . variable_get('subdomain_mode', 'user');
    $subdomain = new $class();
  }

  return $subdomain;
}

/**
 * Implementation of hook_init().
 */
function subdomain_init() {
}

/**
 * Implementation of hook_perm().
 */
function subdomain_permission() {
  return array(
    'create subdomains' => array(
      'title' => t('Create subdomains'),
      'description' => t('Create new subdomains'),
    ),
    'edit subdomains' => array(
      'title' => t('Edit subdomains'),
      'description' => t('Edit subdomain for records user user has access to'),
      'restrict access' => TRUE,
    ),
 );
}

/**
 * Implementation of hook_menu().
 */
function subdomain_menu() {
  $items = array();

  $base = array(
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
  );

  $items['subdomain/homepage'] = $base + array(
    'type' => MENU_CALLBACK,
    'page callback' => 'subdomain_view_homepage',
    'access callback' => TRUE,
  );

  $items['admin/config/system/subdomain'] = $base + array(
    'title' => 'Subdomain Settings',
    'description' => 'Configure subdomain settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('subdomain_admin_settings'),
    'file' => 'includes/subdomain.admin.inc',
    'weight' => 100,
  );
  $items['admin/config/system/subdomain/general'] = $base + array(
    'title' => 'General',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  $items['admin/config/system/subdomain/tools'] = $base + array(
    'title' => 'Tools',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('subdomain_tools_form'),
    'file' => 'includes/subdomain.admin.inc',
    'weight' => 0,
  );
  $items['admin/config/system/subdomain/filters'] = $base + array(
    'title' => 'Filters',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('subdomain_filters_form'),
    'file' => 'includes/subdomain.admin.inc',
    'weight' => 0,
  );

  $items['subdomain/validate'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Callback only',
    'page callback' => 'subdomain_js_validate',
    'access callback' => TRUE,
  );
  $items['subdomain/test'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_subdomain_test_request',
    'access callback' => TRUE,
    'file' => 'includes/subdomain.admin.inc'
  );

  $items['subdomain/notfound'] = $base + array(
    'type' => MENU_CALLBACK,
    'page callback' => 'subdomain_notfound',
    'access callback' => TRUE,
  );
  $items['subdomain/forbidden'] = $base + array(
    'type' => MENU_CALLBACK,
    'page callback' => 'subdomain_forbidden',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implementation of hook_hook_info().
 */
function subdomain_hook_info() {
  $hooks = array();

  $hooks['subdomain_insert'] = array(
    'group' => 'subdomain',
  );
  $hooks['subdomain_update'] = array(
    'group' => 'subdomain',
  );
  $hooks['subdomain_delete'] = array(
    'group' => 'subdomain',
  );

  return $hooks;
}

function subdomain_notfound() {
  drupal_not_found();
}

function subdomain_forbidden() {
  drupal_access_denied();
}

/**
 * Implementation of hook_form_alter().
 */
function subdomain_form_alter(&$form, $form_state, $form_id) {
  // Add subdomain field (if necessary) to appropriate entry form
  if (subdomain()->is_entry_form($form_id)) {
    drupal_add_css(drupal_get_path('module', 'subdomain') . '/subdomain.css');
    drupal_add_js(drupal_get_path('module', 'subdomain') . '/subdomain.js', 'file');

    subdomain()->entry_form_alter($form, $form_id);
  }
}

function subdomain_user_insert(&$edit, $account, $category) {
  $edit['uid'] = $account->uid;
  subdomain()->data_handler('insert', 'user', $edit);
}

function subdomain_user_update(&$edit, $account, $category) {
  $edit['uid'] = $account->uid;
  subdomain()->data_handler('update', 'user', $edit);
}

function subdomain_user_delete($account) {
  subdomain()->data_handler('delete', 'user', $account);
}

function subdomain_node_insert($node) {
  subdomain()->data_handler('insert', 'group', $node);
}

function subdomain_node_update($node) {
  subdomain()->data_handler('update', 'group', $node);
}

function subdomain_node_delete($node) {
  subdomain()->data_handler('delete', 'group', $node);
}

function subdomain_taxonomy_term_insert($term) {
  subdomain()->data_handler('insert', 'term', $term);
}

function subdomain_taxonomy_term_update($term) {
  subdomain()->data_handler('update', 'term', $term);
}

function subdomain_taxonomy_term_delete($term) {
  subdomain()->data_handler('delete', 'term', $term);
}

function subdomain_node_type_insert($info) {
  subdomain()->data_handler('insert', 'contenttype', $info);
}

function subdomain_node_type_update($info) {
  subdomain()->data_handler('update', 'contenttype', $info);
}

function subdomain_node_type_delete($info) {
  subdomain()->data_handler('delete', 'contenttype', $info);
}

/**
 * Implementation of hook_user().
 */
function subdomain_user($op, &$edit, &$account, $category = NULL) {
  if (subdomain()->mode == 'user') {
    if ($op == 'validate') {
      // If new user, check if subdomain exists
      if (!isset($edit['_account']) && subdomain()->exists($edit[subdomain()->form_field])) {
        form_set_error($field, t('Subdomain already taken. Please try a different one.'));
      }
    }
  }
}

/**
 * Inbound URL rewrite helper
 * If host includes subdomain, rewrite URI and internal path if necessary
 */
function subdomain_url_inbound_alter(&$path, $original_path, $path_language) {
  $executed = &drupal_static(__FUNCTION__ . '__executed', array());

  // Only investigate URL on 1st execution
  if (!$executed) {
    $executed = TRUE;

    $curr_path = $path;
    $curr_subdomain = subdomain_get_current_subdomain();

    // If 'path' is an external URL, then we can skip it
    if (url_is_external($path)) {
      return;
    }

    // Skip the special subdomain paths
    if (strpos($path, 'subdomain/') === 0) {
      return;
    }

    // Before we do anything else, make sure this path is not a system path
    if (_subdomain_check_system_path($path)) {
      return;
    }

    // Fetch subdomain ID
    $sid = NULL;
    if ($curr_subdomain) {
      // Do nothing if subdomain is "www"
      if ($curr_subdomain == 'www' && !variable_get('subdomain_prepend_www', TRUE)) {
        return;
      }
      // Do nothing if subdomain is reserved
      elseif (in_array($curr_subdomain, subdomain_get_reserved_subdomains())) {
        return;
      }

      // Lookup subdomain ID
      $sid = subdomain_get_sid($curr_subdomain);

      // If subdomain doesn't exist & non-node path, redirect to base domain
      // When deleting a subdomain object, this prevents user from ending up on
      // on page not found.
      if (empty($sid) && !_subdomain_id_from_path('nid', $original_path)) {
        header("Location: " . _subdomain_format_url(_subdomain_get_protocol(), NULL, subdomain_get_domain(), $original_path), TRUE, 301);
        exit;
      }
      // If subdomain doesn't exist, send user to page not found
      // Make exception for test subdomain
      elseif (empty($sid) && $subdomain != SUBDOMAIN_TEST_SUBDOMAIN) {
        $path = subdomain_set_request_path('subdomain/notfound/' . $_SERVER['HTTP_HOST'] . '/' . $original_path);
        return;
      }
    }

    // If valid subdomain and no path, rewrite to subdomain homepage
    if (!empty($sid) && !subdomain_get_request_path()) {
      $path = subdomain_set_request_path(subdomain()->get_homepage_path($sid));
    }
    else {
      $subdomain = '';

      // Determine subdomain if any from original_path, and alter path if necessary
      subdomain()->url_alter_helper($subdomain, $path, $curr_path, FALSE);

      // Is the subdomain changing
      if ($subdomain != $curr_subdomain) {
        switch (variable_get('subdomain_mismatch_response', '404')) {
          case 'none':
            break;

          case '301':
            // TODO: look at using drupal_goto().
            $redirect = _subdomain_format_url(_subdomain_get_protocol(), $subdomain, subdomain_get_domain(), $original_path);
            header("Location: " . $redirect, TRUE, 301);
            exit;
            break;

          case '302':
            // TODO: look at using drupal_goto().
            $redirect = _subdomain_format_url(_subdomain_get_protocol(), $subdomain, subdomain_get_domain(), $original_path);
            header("Location: " . $redirect, TRUE, 301);
            exit;
            break;

          case '403':
            $path = subdomain_set_request_path('subdomain/forbidden/'. $_SERVER['HTTP_HOST'] .'/'. $curr_path);
            break;

          case '404':
          default:
            $path = subdomain_set_request_path('subdomain/notfound/'. $_SERVER['HTTP_HOST'] .'/'. $curr_path);
            break;
        }
      }
      // Else, is the path being rewritten?
      elseif ($path != $curr_path) {
        $path = subdomain_set_request_path($path);
      }
      // Else, just handle the case where the incoming path is the same as the special homepage path
      elseif ($sid && $path == subdomain()->get_homepage_path($sid)) {
        $redirect = _subdomain_format_url(_subdomain_get_protocol(), $curr_subdomain, subdomain_get_domain(), '');
        header("Location: " . $redirect, TRUE, 301);
      }
    }
  }
}

/**
 * Outbound URL rewrite helper
 * Rewrite URLs: attach/remove subdmain as appropriate
 */
function subdomain_url_outbound_alter(&$path, &$options, $original_path) {
  $paths = &drupal_static(__FUNCTION__ . '__paths', array());

  $key = $original_path;
  if (empty($key)) {
    $key = '<front>';
  }

  // Process path if not in cache
  if (!isset($paths[$key])) {
    $paths[$key] = FALSE;

    // If 'path' is an external URL, then we can skip it
    if (url_is_external($path)) {
      return;
    }

    // Before we do anything else, make sure this path is not blacklisted
    if (_subdomain_check_system_path($original_path) || _subdomain_check_system_path($path)) {
      return;
    }

    $subdomain = '';
    $curr_subdomain = subdomain_get_current_subdomain();

    // If front page and we're on a subdomain, strip the subdomain
    if (($original_path == '<front>' || $original_path == '') && $curr_subdomain) {
      $subdomain = '';
    }
    // Otherwise, process path and attach/remove subdomain if necessary
    else {
      // Determine subdomain if any from original_path, and alter path if necessary
      subdomain()->url_alter_helper($subdomain, $path, $original_path);
    }

    if (empty($path))
      $path = $original_path;

    // Cache $path in case it was altered
    $paths[$key]['path'] = $path;
    $paths[$key]['base_url'] = _subdomain_format_url(_subdomain_get_protocol(), $subdomain, subdomain_get_domain());
  }

  if ($paths[$key] !== FALSE) {
    // Set path and options
    $options['absolute'] = TRUE;
    $options['base_url'] = $paths[$key]['base_url'];
    $path = $paths[$key]['path'];
  }
}

/**
 * Clear outbound URL cache
 */
function subdomain_url_outbound_cache_clear() {
  $paths = &drupal_static('subdomain_url_outbound_alter__paths', array());
  $paths = array();
}

function subdomain_view_homepage() {
  $output = '';

  if (!subdomain()->home_default) {
    // Build argument array for view
    $args = arg();

    // Remove "subdomain/homepage" portions of path
    array_shift($args);
    array_shift($args);

    // Load and execute view
    $view = views_get_view(subdomain()->home_view);
    $output = $view->preview('default', $args);
    drupal_set_title($view->get_title());
  }

  return $output;
}

function subdomain_get_reserved_subdomains() {
  $reserved = &drupal_static(__FUNCTION__ . '__reserved', array());

  if (!isset($reserved)) {
    $reserved_raw = variable_get('subdomain_reserved', '');
    $reserved_raw = strtolower(str_replace(chr(13) . chr(10), "\n", $reserved));
    $reserved = explode("\n", $reserved_raw);

    // Add internal test subdomain to reserved list
    array_unshift($reserved, SUBDOMAIN_TEST_SUBDOMAIN);
  }

  return $reserved;
}

function subdomain_get_domain() {
  global $cookie_domain;
  return trim($cookie_domain, '.');
}


/**
 * Returns current subdomain if any
 */
function subdomain_get_current_subdomain() {
  $subdomain = &drupal_static(__FUNCTION__ . '__subdomain', NULL);

  if (!isset($subdomain)) {
    $subdomain_length = strpos($_SERVER['HTTP_HOST'], '.' . subdomain_get_domain());
    $subdomain = substr($_SERVER['HTTP_HOST'], 0, $subdomain_length);

    // Strip 'www' if set to use it.
    if (variable_get('subdomain_prepend_www', TRUE) && $subdomain == 'www') {
      $subdomain = '';
    }
  }

  return $subdomain;
}

function subdomain_get_sid($subdomain, $force = FALSE) {
  return subdomain()->get_sid($subdomain, $force);
}

function subdomain_get_subdomain($sid, $force = FALSE) {
  return subdomain()->get_subdomain($sid, $force);
}

/**
 * JS form validation handler: checks whether subdomain already exists
 */
function subdomain_js_validate() {
  $subdomain = strtolower(trim($_GET['subdomain']));

  $is_malformed = (subdomain()->clean($subdomain) != $subdomain);
  $is_reserved = in_array($subdomain, subdomain_get_reserved_subdomains());
  $sid = subdomain_get_sid($subdomain);

  // Subdomain is valid if it doesn't exist or it's the one being edited
  drupal_json_output(array(
    'available' => !$is_reserved && (empty($sid) || $sid == $_GET['sid']),
    'malformed' => $is_malformed,
  ));
  exit;
}

function subdomain_get_request_path() {
  $path = &drupal_static(__FUNCTION__ . '__path', NULL);

  if (!isset($path)) {
    if (variable_get('clean_url', FALSE)) {
      $path = trim(strtok(request_uri(), '?'), '/');
    }
    else {
      $path = trim(request_uri(), '/');
    }

    if ($path == drupal_get_normal_path(variable_get('site_frontpage', 'node'))) {
      $path = '';
    }
  }

  return $path;
}

function subdomain_set_request_path($path) {
  menu_set_active_item($path);
  return $path;
}

/**
 * Check a path to see if it is blacklisted as a system path
 */
function _subdomain_check_system_path($path) {
  global $user;

  // An empty path, or one set to '<front>' is never considered a system path.
  if (empty($path) || $path == '<front>') {
    return FALSE;
  }

  $file_path_blacklist   = variable_get('subdomain_system_file_path_blacklist', SUBDOMAIN_SYSTEM_FILE_PATH_BLACKLIST_DEFAULT);
  $file_path_whitelist   = variable_get('subdomain_system_file_path_whitelist', SUBDOMAIN_SYSTEM_FILE_PATH_WHITELIST_DEFAULT);
  $drupal_path_blacklist = variable_get('subdomain_system_drupal_path_blacklist', SUBDOMAIN_SYSTEM_DRUPAL_PATH_BLACKLIST_DEFAULT);
  $auth_users_blacklist  = variable_get('subdomain_system_auth_users_blacklist', SUBDOMAIN_SYSTEM_AUTH_USERS_BLACKLIST_DEFAULT);

  // If the current file path matches one of the blacklisted file paths,
  // return TRUE, except when the current file path also matches one of
  // the whitelisted file paths.
  if (drupal_match_path($path, $file_path_blacklist)) {
    if (!drupal_match_path($path, $file_path_whitelist)) {
      return TRUE;
    }
  }

  // If the current Drupal path matches one of the blacklisted Drupal paths,
  // return TRUE.
  if ($_GET['q'] && drupal_match_path($_GET['q'], $drupal_path_blacklist)) {
    return TRUE;
  }

  // If logged in user, apply a secondary blacklist.
  if ($user->uid > 0 && drupal_match_path($path, $auth_users_blacklist)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Checks whether protocol is https or http
 * Based on code from http://php.net/manual/en/reserved.variables.server.php#89306
 */
function _subdomain_get_protocol() {
  $protocol = &drupal_static(__FUNCTION__ . '__protocol', NULL);

  if (!isset($protocol)) {
    if (isset($_SERVER['https']) && $_SERVER['https'] == 1 /* Apache */
    ||  isset($_SERVER['https']) && $_SERVER['https'] == 'on' /* IIS */
    ||  isset($_SERVER['SERVER_PORT']) && $_SERVER['SERVER_PORT'] == 443) /* others */ {
      $protocol = 'https://';
    }
    else {
      $protocol = 'http://';
    }
  }

  return $protocol;
}

function _subdomain_id_from_path_defaults($type) {
  $default_paths = array(
    'nid' => "node/%ID\r\nnode/%ID/edit\r\ncomment/reply/%ID\r\nnode/add/book/parent/%ID\r\nbook/export/html/%ID\r\nnode/%ID/outline",
    'uid' => "user/%ID\r\nuser/%ID/edit",
    'tid' => "taxonomy/term/%ID",
  );

  if (isset($default_paths[$type])) {
    return $default_paths[$type];
  }
  return '';
}

function _subdomain_id_from_path($type, $path) {
  $ids = &drupal_static(__FUNCTION__ . '__ids', NULL);
  $router_items = &drupal_static(__FUNCTION__ . '__router_items', array());

  // Sanity checks
  if (!isset($ids)) {
    $ids = array();
  }
  if (!isset($ids[$type])) {
    $ids[$type] = array();
  }

  // Do we need to process this path?
  if (!isset($ids[$type][$path])) {
    $id = FALSE;

    // Borrowed from Domain Access: Advanced pattern matching, we find the node id based on token %ID in the path string.
    if (!isset($paths[$type])) {
      $pathdata = variable_get('subdomain_' . $type . '_paths', _subdomain_id_from_path_defaults($type));
      $path_match = preg_replace('/(\r\n?|\n)/', '|', $pathdata);
      $paths[$type] = explode("|", $path_match);
    }

    $pattern = explode('/', $path);

    foreach ($paths[$type] as $match) {
      $match_array = explode('/', $match);

      // Support the new placeholder
      $placeholder = array_search('%ID', $match_array);
      if (isset($pattern[$placeholder])) {
        $match_array[$placeholder] = $pattern[$placeholder];
        if (is_numeric($pattern[$placeholder]) && $match_array == $pattern) {
          $id = (int) $pattern[$placeholder];
          break;
        }
      }

      if (!$id) {
        // Support the old placeholder
        $placeholder = array_search('%n', $match_array);
        if (isset($pattern[$placeholder])) {
          $match_array[$placeholder] = $pattern[$placeholder];
          if (is_numeric($pattern[$placeholder]) && $match_array == $pattern) {
            $id = (int) $pattern[$placeholder];
            break;
          }
        }
      }
    }

    // Fallback on searching the menu system. We don't try this first since we want to try and avoid searching the DB.
    if (empty($id)) {
      $map = arg(NULL, $path);
      $parts = array_slice($map, 0, MENU_MAX_PARTS);
      $ancestors = menu_get_ancestors($parts);
      $router_item = FALSE;

      // See if we've seen a matching menu router item already for one of the ancestors
      foreach ($ancestors as $ancestor) {
        if (isset($router_items[$ancestor])) {
          $router_item = $router_items[$ancestor];
          break;
        }
      }

      // Else let's look at the DB for a matching menu router item
      if (!$router_item) {
        $router_item = db_query_range('SELECT * FROM {menu_router} WHERE path IN (:ancestors) ORDER BY fit DESC', 0, 1, array(':ancestors' => $ancestors))->fetchAssoc();
        if ($router_item) {
          // See if there is a dynamic load function involved
          if (!empty($router_item['load_functions'])) {
            if (!is_array($router_item['load_functions'])) {
              $router_item['load_functions'] = unserialize($router_item['load_functions']);
            }
          }
          $router_items[$router_item['path']] = $router_item;
        }
      }

      // Let's try to use it if we've got it
      if ($router_item) {
        // Setup map
        if (!empty($router_item['load_functions'])) {
          $path_map = $map;
          foreach ($router_item['load_functions'] as $index => $function) {
            if ($function) {
              $value = isset($path_map[$index]) ? $path_map[$index] : '';
              if (is_array($function)) {
                // Set up arguments for the load function. These were pulled from
                // 'load arguments' in the hook_menu() entry, but they need
                // some processing. In this case the $function is the key to the
                // load_function array, and the value is the list of arguments.
                list($function, $args) = each($function);
                $router_item['load_functions'][$index] = $function;
              }
              $router_item['map'][$index] = $value;
            }
          }

          // We can now try and pick out entity IDs
          switch ($type) {
            case 'nid':
              $ent_type = 'node';
              $position = 1;
              if (isset($router_item['load_functions'][$position]) && !empty($router_item['map'][$position]) && $router_item['load_functions'][$position] == $ent_type . '_load') {
                $id = $router_item['map'][$position];
              }
              break;

            case 'uid':
              $ent_type = 'user';
              $position = 1;
              if (isset($router_item['load_functions'][$position]) && !empty($router_item['map'][$position]) && $router_item['load_functions'][$position] == $ent_type . '_load') {
                $id = $router_item['map'][$position];
              }
              break;

            case 'tid':
              $ent_type = 'taxonomy_term';
              $position = 2;
              if (isset($router_item['load_functions'][$position]) && !empty($router_item['map'][$position]) && $router_item['load_functions'][$position] == $ent_type . '_load') {
                $id = $router_item['map'][$position];
              }
              break;
          }
        }
      }
    }

    $ids[$type][$path] = $id;
  }

  return $ids[$type][$path];
}

function _subdomain_format_url($protocol, $subdomain, $domain, $path = NULL) {
  $www = variable_get('subdomain_prepend_www', TRUE) ? 'www' : '';
  $url = $protocol;

  if ($subdomain) {
    $url .= $subdomain . '.';
  }
  elseif ($www) {
    $url .= $www . '.';
  }

  $url .= $domain;

  if ($path) {
    if (strpos($path, '/') === 0) {
      $url .= $path;
    }
    else {
      $url .= '/' . $path;
    }
  }

  return $url;
}

function _subdomain_get_custom_form_field($default, $editable = FALSE) {
  if ($editable) {
    // Make subdomain entry required unless user is site admin...
    return array(
      '#type' => 'textfield',
      '#title' => t('Choose a subdomain'),
      '#description' => t('Letters and dashes only. Choose carefully, once set, this cannot be changed.'),
      '#required' => variable_get('subdomain_required', TRUE) ? !user_access('administer site configuration') : FALSE,
      '#weight' => -5,
      '#default_value' => $default,
      '#maxlength'=> 255,
      '#size'=> 30,
    );
  }

  // If user can create subdomains, show this...
  elseif (user_access('create subdomains')) {
    return array(
      '#type' => 'item',
      '#title' => subdomain()->static_form_text(),
      '#weight' => -5,
      '#value' => 'http://' . $default . '.' . subdomain_get_domain(),
    );
  }
}

function _subdomain_add_js_validation($sid = NULL) {
  drupal_add_js(array('subdomain' => array('selector' => "edit-" . str_replace('_', '-', subdomain()->form_field), 'sid' => $sid)), 'setting');
}

function _subdomain_filtered_content_types() {
  $filtered = &drupal_static(__FUNCTION__ . '__filtered', NULL);

  if (!isset($filtered)) {
    // Filter "0" values (i.e. unchecked content types) from array
    $filtered = array_filter(variable_get('subdomain_filter_contenttypes', array()));
    if (!count($filtered)) {
      // TODO: Review this hack. Necessary, because PDO chokes on empty parenthesis parameters (e.g. SELECT * FROM node WHERE type NOT IN ())
      //       Empty string works, NULL doesn't
      $filtered = array('');
    }
  }

  return $filtered;
}

function _subdomain_validate_subdomain($form, &$form_state) {
  if ($subdomain = subdomain()->clean($form_state['values'][subdomain()->form_field])) {
    if (in_array($subdomain, subdomain_get_reserved_subdomains())) {
      form_set_error(subdomain()->form_field, t('The subdomain you entered is reserved and cannot be used.'));
    }
  }
}
