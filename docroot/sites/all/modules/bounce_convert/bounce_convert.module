<?php

/**
 * @file
 * Primarily Drupal hooks and global API functions to manipulate this module.
 *
 * This is the main module file for Bounce Convert. The main entry points into
 * this module are hook_node_info(),hook_field_group_info(),
 * bounce_convert_ctools_plugin_api() and hook_form(), where it handles
 * creating content type and form values.
 */

// All functions within this file need the bellow files.
module_load_include('inc', 'bounce_convert', 'bounce_convert.admin');
module_load_include('inc', 'webform', 'includes/webform.report');

/**
 * Implements hook_menu().
 */
function bounce_convert_menu() {
  $items = array();

  // Campaign report.
  $items['admin/reports/bounce-convert/%/results'] = array(
    'title' => 'Bounce Convert Campaign Report',
    'title callback' => 'bounce_convert_campaign_report_title',
    'title arguments' => array(3),
    'description' => 'Impression/Conversion and submission report',
    'page callback' => 'bounce_convert_get_submissions',
    'access callback' => 'webform_results_access',
    'access arguments' => array(3),
  );

  // Campaign report subpath for conversions/impressions, etc.
  $items['admin/reports/bounce-convert/%/results/%'] = array(
    'title' => 'Bounce Convert Campaign Report',
    'title callback' => 'bounce_convert_campaign_report_title',
    'title arguments' => array(3),
    'description' => 'Impression/Conversion and submission report',
    'page callback' => 'bounce_convert_get_submissions',
    'access callback' => 'webform_results_access',
    'access arguments' => array(3),
  );

  // Campaigns listing.
  $items['admin/reports/bounce-convert'] = array(
    'title' => 'Bounce Convert Campaigns',
    'description' => 'View and edit all the available campaigns on your site',
    'page callback' => 'bounce_convert_campaign_list',
    'type' => MENU_NORMAL_ITEM,
    'access callback' => TRUE,
  );

  // Ajax callback path.
  $items['bounce-convert/ajax/impression'] = array(
    'page callback' => 'bounce_convert_impression_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Title callback for campaign report menu.
 */
function bounce_convert_campaign_report_title($campaign_id) {
  $campaign = node_load($campaign_id);
  return $campaign->title;
}

/**
 * Implements impression_callback().
 */
function bounce_convert_impression_callback() {
  global $user;

  // $bounce_convert_campaign_id:campaign nid value as argument from Ajax call.
  $bounce_convert_campaign_id = isset($_POST['campaign_id']) ? $_POST['campaign_id'] : '';
  // $bounce_convert_nid:return webform id value as argument from Ajax call.
  $bounce_convert_webform_id = isset($_POST['webform_id']) ? $_POST['webform_id'] : '';
  // $bounce_convert_page_path:return page url as argument from Ajax call.
  $bounce_convert_page_path = isset($_POST['page_path']) ? $_POST['page_path'] : '';

  if ($bounce_convert_campaign_id != '') {
    // Insert impression value to table.
    db_insert('bounce_convert_impression')
        ->fields(array(
          'webform_id' => $bounce_convert_webform_id,
          'campaign_id' => $bounce_convert_campaign_id,
          'sid' => 0,
          'uid' => $user->uid,
          'impression' => 1,
          'conversion' => 0,
          'ip_address' => ip_address(),
          'path' => $bounce_convert_page_path,
          'timestamp' => REQUEST_TIME,
        ))
        ->execute();
  }
}

/**
 * Show chart and submissions on campaign report page.
 * @return array
 *   contains admin report chart and form submission data.
 */
function bounce_convert_get_submissions() {
  $output = '';
  $nid = arg(3);
  if (is_numeric($nid)) {
    $node = node_load($nid);
    $report_duration = arg(6);

    $bounce_convert_total_conversion = array_sum(bounce_convert_chart_data($report_duration, 'conversion', $nid));
    $bounce_convert_total_impression = array_sum(bounce_convert_chart_data($report_duration, 'impression', $nid));
    $bounce_convert_percentage = bounce_convert_overall_percentage($bounce_convert_total_conversion, $bounce_convert_total_impression);

    // Chart Properities.
    $chart = array(
      '#type' => 'chart',
      '#chart_type' => 'line',
    );

    // Conversions.
    $chart['conversion'] = array(
      '#type' => 'chart_data',
      '#title' => t('Conversions'),
      '#data' => bounce_convert_chart_data($report_duration, 'conversion', $nid),
    );

    // Show impressions data unless we are specifically requesting conversions
    // only.
    if (arg(5) != 'conversion') {
      // Impressions.
      $chart['impression'] = array(
        '#type' => 'chart_data',
        '#title' => t('Imressions'),
        '#data' => bounce_convert_chart_data($report_duration, 'impression', $nid),
      );
    }

    $chart['xaxis'] = array(
      '#type' => 'chart_xaxis',
      '#title' => t('Time Duration'),
      '#labels' => bounce_convert_chart_labels($report_duration),
    );

    $bounce_convert_filter_url = '/impression';
    if (arg(5) == 'impression' || arg(5) == 'percentage' || arg(5) == 'conversion') {
      $bounce_convert_filter_url = '/' . arg(5);
    }

    // Filter options from bounce_convert.tpl file.
    $output .= theme('bounce_convert', array(
      'bounce_convert_filter_url' => $bounce_convert_filter_url,
      'bounce_convert_percentage' => $bounce_convert_percentage,
      'bounce_convert_impression' => $bounce_convert_total_impression,
      'bounce_convert_conversions' => $bounce_convert_total_conversion,
        )
    );

    // Render chart.
    if (arg(5) != 'percentage') {
      $output .= drupal_render($chart);
    }

    // Render table of webform submissions.
    $webform = node_load($node->field_bcc_webform[LANGUAGE_NONE][0]['value']);
    $output .= webform_results_submissions($webform, FALSE, '50');
  }
  return $output;
}

/**
 * Theme filter option for chart.
 *
 * Implements hook_theme().
 */
function bounce_convert_theme() {
  return array(
    'bounce_convert' => array(
      'template' => 'bounce_convert',
      'variables' => array(
        'bounce_convert_filter_url' => NULL,
        'bounce_convert_percentage' => NULL,
        'bounce_convert_impression' => NULL,
        'bounce_convert_conversions' => NULL),
    ),
    'bounce_convert_campaign_filter' => array(
      'template' => 'bounce_convert_campaign_filter',
      'variables' => array(
        'path' => NULL,
      ),
    ),
  );
}

/**
 * Ctools plugin API.
 *
 * Implements hook_ctools_plugin_api().
 */
function bounce_convert_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "field_group" && $api == "field_group") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_node_info().
 */
function bounce_convert_node_info() {
  $items = array(
    'bounce_convert_campaign' => array(
      'name' => t('Bounce Convert Campaign'),
      'base' => 'bounce_convert',
      'description' => t('Create a new campaign to detect and convert exiting web visitors into revenue.'),
      'has_title' => TRUE,
      'title_label' => t('Campaign title'),
    ),
  );
  return $items;
}

/**
 * Implements hook_field_group_info().
 */
function bounce_convert_field_group_info() {
  $export = array();

  $field_group = new stdClass();
  /* Edit this to true to make a default field_group disabled initially */
  $field_group->disabled = FALSE;
  $field_group->api_version = 1;
  $field_group->identifier = 'group_bcc_modal_options|node|bounce_convert|form';
  $field_group->group_name = 'group_bcc_modal_options';
  $field_group->entity_type = 'node';
  $field_group->bundle = 'bounce_convert_campaign';
  $field_group->mode = 'form';
  $field_group->parent_name = '';
  $field_group->data = array(
    'label' => 'Modal options',
    'weight' => '3',
    'children' => array(
      0 => 'field_bcc_background_color',
      1 => 'field_bcc_background_opacity',
      2 => 'field_bcc_modal_height',
      3 => 'field_bcc_modal_width',
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'formatter' => 'collapsible',
      'instance_settings' => array(
        'description' => 'These fields control the settings for the modal popup which will display your chosen Webform when a visitor is about to leave.',
        'classes' => 'group-bcc-modal-options field-group-fieldset',
        'required_fields' => 1,
      ),
    ),
  );
  $export['group_bcc_modal_options|node|bounce_convert|form'] = $field_group;

  $field_group = new stdClass();
  /* Edit this to true to make a default field_group disabled initially */
  $field_group->disabled = FALSE;
  $field_group->api_version = 1;
  $field_group->identifier = 'group_bcc_pages|node|bounce_convert|form';
  $field_group->group_name = 'group_bcc_pages';
  $field_group->entity_type = 'node';
  $field_group->bundle = 'bounce_convert_campaign';
  $field_group->mode = 'form';
  $field_group->parent_name = 'group_bcc_visibility_settings';
  $field_group->data = array(
    'label' => 'Pages',
    'weight' => '7',
    'children' => array(
      0 => 'field_bcc_pages_list',
      1 => 'field_bcc_pages_option',
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'formatter' => 'closed',
      'instance_settings' => array(
        'description' => '',
        'classes' => 'group-bcc-pages field-group-tab',
        'required_fields' => 1,
      ),
    ),
  );
  $export['group_bcc_pages|node|bounce_convert|form'] = $field_group;

  $field_group = new stdClass();
  /* Edit this to true to make a default field_group disabled initially */
  $field_group->disabled = FALSE;
  $field_group->api_version = 1;
  $field_group->identifier = 'group_bcc_user_roles|node|bounce_convert|form';
  $field_group->group_name = 'group_bcc_user_roles';
  $field_group->entity_type = 'node';
  $field_group->bundle = 'bounce_convert_campaign';
  $field_group->mode = 'form';
  $field_group->parent_name = 'group_bcc_visibility_settings';
  $field_group->data = array(
    'label' => 'Roles',
    'weight' => '8',
    'children' => array(
      0 => 'field_bcc_specific_user_roles',
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'formatter' => 'closed',
      'instance_settings' => array(
        'description' => '',
        'classes' => 'group-bcc-user-roles field-group-tab',
        'required_fields' => 1,
      ),
    ),
  );
  $export['group_bcc_user_roles|node|bounce_convert|form'] = $field_group;

  $field_group = new stdClass();
  /* Edit this to true to make a default field_group disabled initially */
  $field_group->disabled = FALSE;
  $field_group->api_version = 1;
  $field_group->identifier = 'group_bcc_visibility_settings|node|bounce_convert|form';
  $field_group->group_name = 'group_bcc_visibility_settings';
  $field_group->entity_type = 'node';
  $field_group->bundle = 'bounce_convert_campaign';
  $field_group->mode = 'form';
  $field_group->parent_name = '';
  $field_group->data = array(
    'label' => 'Visibility settings',
    'weight' => '7',
    'children' => array(
      0 => 'group_bcc_pages',
      1 => 'group_bcc_user_roles',
    ),
    'format_type' => 'tabs',
    'format_settings' => array(
      'formatter' => '',
      'instance_settings' => array(
        'classes' => 'group-bcc-visibility-settings field-group-tabs',
      ),
    ),
  );
  $export['group_bcc_visibility_settings|node|bounce_convert|form'] = $field_group;

  return $export;
}

/**
 * Implements hook_form().
 */
function bounce_convert_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * To update form field values after CRUD operation on webforms and user roles.
 *
 * Implements hook_form_alter().
 */
function bounce_convert_form_alter(&$form, &$form_state, $form_id) {

  $pos = strpos($form_id, 'webform_client_form_');
  if ($pos !== FALSE) {
    if ($form_id == 'webform_client_form_' . $form['#node']->nid) {
      // Custom function to make entry into cutom table.
      $form['#submit'][] = 'bounce_convert_user_conversion';
    }
  }

  // Remove required option from Pages Path setting.
  if ($form_id == 'bounce_convert_campaign_node_form') {
    $lang = $form['field_bcc_pages_option']['#language'];
    $form['field_bcc_pages_option'][$lang]['#required'] = FALSE;

    // Set title for Verticle Tab.
    $form['visibility_title'] = array(
      '#type' => 'item',
      '#title' => t('Visibility settings'),
      '#weight' => 5,
    );

    // Hide PHP option if PHP module is not enabled.
    if (!module_exists('php')) {
      unset($form['field_bcc_pages_option'][LANGUAGE_NONE]['#options'][2]);
    }
    else {
      // Append description for php.
      $form['field_bcc_pages_list'][LANGUAGE_NONE][0]['value']['#description'] = $form['field_bcc_pages_list'][LANGUAGE_NONE][0]['#description'] . ' If the PHP option is chosen, enter PHP code between &lt;?php ?&gt;. Note that executing incorrect PHP code can break your Drupal site.';
    }
  }

  if ($form_id == "bounce_convert_campaign_node_form") {
    // Get form field languge for exact match.
    $form['field_bcc_webform'][LANGUAGE_NONE]['#options'] = bounce_convert_webforms();

    $form['field_bcc_specific_user_roles'][LANGUAGE_NONE]['#options'] = user_roles();
    // If node edit page then set default value.
    if (arg(0) == 'node' && arg(2) == 'edit') {
      $node = node_load(arg(1));
      $field_bcc_webform = field_get_items('node', $node, 'field_bcc_webform');
      $form['field_bcc_webform'][$lang]['#default_value'] = $field_bcc_webform[0]['value'];

      $field_bcc_specific_user_roles = field_get_items('node', $node, 'field_bcc_specific_user_roles');
      if (!empty($field_bcc_specific_user_roles)) {
        foreach ($field_bcc_specific_user_roles as $value) {
          $rid = $value['value'];
          $field_bcc_roles_default_options[$rid] = $rid;
        }
        // Show campaign for specific roles.
        $form['field_bcc_specific_user_roles'][$lang]['#default_value'] = $field_bcc_roles_default_options;
      }
    }
  }
}

/**
 * Implements hook_page_build().
 */
function bounce_convert_page_build(&$page) {
  global $user;
  global $base_url;

  // Fetch only campaigns that user role has permission for that.
  $data = bounce_convert_check_campaigns($user->roles);

  if (!empty($data)) {
    
    ctools_include('modal');
    ctools_include('ajax');
    ctools_modal_add_js();
    drupal_add_css(drupal_get_path('module', 'bounce_convert') . '/css/bounce_convert.css');
    drupal_add_js(drupal_get_path('module', 'bounce_convert') . '/js/bounce_convert.js');
    drupal_add_js(drupal_get_path('module', 'bounce_convert') . '/js/bounce_convert_popup.js');

    $bounce_convert_campaign_id = $data['campaign_node_id'];
    $bounce_convert_webform_id = $data['webform_id'];
    $bounce_convert_cookie_expiry = $data['campaign_visit_cookie'];

    $bounce_convert_modal_width = $data['modal_width'];
    $bounce_convert_modal_height = $data['modal_height'];
    $bounce_convert_modal_bgcolor = $data['modal_bgcolor'];
    $bounce_convert_modal_opacity = $data['modal_opacity'];

    $bounce_convert_js_param = array(
      'webform_id' => $bounce_convert_webform_id,
      'campaign_id' => $bounce_convert_campaign_id,
      'cookie_expiry' => $bounce_convert_cookie_expiry,
      'page_path' => current_path(),
    );
    $bounce_convert_popup_setting = array();
    $bounce_convert_popup_setting['bounce-convert-style']['modalSize'] = array(
      'type' => 'fixed',
      'width' => $bounce_convert_modal_width,
      'height' => $bounce_convert_modal_height,
    );

    $bounce_convert_popup_setting['bounce-convert-style']['modalOptions'] = array(
      'opacity' => floatval($bounce_convert_modal_opacity),
      'background' => $bounce_convert_modal_bgcolor,
    );

    $bounce_convert_popup_setting['bounce-convert-style']['animation'] = "fadeIn";
    $bounce_convert_popup_setting['bounce-convert-style']['campaign_id'] = $bounce_convert_campaign_id;
    $bounce_convert_popup_setting['bounce-convert-style']['modalTheme'] = "BounceConvertPopup";

    drupal_add_js($bounce_convert_popup_setting, 'setting');
    drupal_add_js(array('bounce_convert' => $bounce_convert_js_param), 'setting');

    // Hidden modal link (depends on modal_forms module).
    $extracontent = '<a class="bounce-convert-modal-link ctools-use-modal ctools-modal-bounce-convert-style ctools-modal-modal-popup-medium" style="display:none;" href="' . $base_url . '/modal_forms/nojs/webform/' . $bounce_convert_webform_id . '" rel="nofollow">Bounce Convert hidden link</a>';

    // Add link to content region.and trigger click event on browser exit.
    $page['content']['bounce_convert_modal'] = array(
      '#markup' => $extracontent,
      '#weight' => 25,
    );
  }
}

/**
 * Create campaign list.
 *
 * @return array
 *   Drupal sortable table with pager.
 */
function bounce_convert_campaign_list() {
  global $base_url;
  $output = "";
  // Link to add new campagin.
  $output .= l(t('Add New Campaign'), 'node/add/bounce-convert-campaign', array('query' => array('destination' => 'admin/reports/bounce-convert')));
  // Search form.
  $output .= theme('bounce_convert_campaign_filter', array(
    'path' => $base_url,
      )
  );
  // Select table.
  $query = db_select("node", "n");
  // Filter records by condition.
  $query->condition('status', 1, '=');
  $query->condition('type', BOUNCE_CONVERT_CONTENT_TYPE, '=');

  $campagin_title = isset($_POST['campaign']) ? filter_xss($_POST['campaign']) : '';
  // Filter record by title if search.
  if (isset($_POST['search']) && $campagin_title != '') {
    $query->condition('title', '%' . db_like($campagin_title) . '%', 'LIKE');
  }
  // Select fields.
  $query->fields("n", array("nid", "vid", "title", "changed"));

  // Prepare table header.
  $header = array(
    array('data' => t('Campaign Name'), 'field' => 'title'),
    array('data' => t('Active')),
    array('data' => t('Total Impressions')),
    array('data' => t('Total Conversions')),
    array('data' => t('Last Update')),
    array('data' => t('Edit')),
    array('data' => t('Delete')),
  );

  // For pagination.
  $query = $query->extend('TableSort')->orderByHeader($header)->extend('PagerDefault')->limit(10);
  // Execute query.
  $result = $query->execute();

  $rows = array();
  // Looping for filling the table rows.
  while ($data = $result->fetchObject()) {
    $nid = $data->nid;
    $vid = $data->vid;

    $total_impressions = db_query("SELECT COUNT(*) FROM {bounce_convert_impression} WHERE campaign_id = :nid", array(':nid' => $nid))->fetchField();
    $total_conversions = db_query("SELECT SUM(conversion) FROM {bounce_convert_impression} WHERE campaign_id = :nid", array(':nid' => $nid))->fetchField();
    $webform_id = db_query("SELECT webform_id FROM {bounce_convert_impression} WHERE campaign_id = :nid", array(':nid' => $nid))->fetchField();
    $campagin_status = db_query("SELECT field_bcc_active_value FROM {field_data_field_bcc_active} WHERE entity_id = :nid AND revision_id = :vid", array(':nid' => $nid, ':vid' => $vid))->fetchField();
    if (!$total_impressions) {
      $total_impressions = 0;
    }
    if (!$total_conversions) {
      $total_conversions = 0;
    }

    $title = l($data->title, 'admin/reports/bounce-convert/' . $nid . '/results');
    if (!$webform_id) {
      $title = $data->title;
    }

    // Fill the table rows.
    $rows[] = array(
      $title,
      $campagin_status,
      $total_impressions,
      $total_conversions,
      format_interval((REQUEST_TIME - $data->changed), 2) . ' ' . t('ago'),
      l(t('Edit'), 'node/' . $data->nid . "/edit", array('query' => array('destination' => 'admin/reports/bounce-convert'))),
      l(t('Delete'), 'node/' . $data->nid . "/delete", array('query' => array('destination' => 'admin/reports/bounce-convert'))),
    );
  }

  // Output of table with the paging.
  $output .= theme("table", array(
        "header" => $header,
        "rows" => $rows,
        "attributes" => array(),
        "sticky" => TRUE,
        "caption" => "",
        "colgroups" => array(),
        "empty" => t("No record found."),
          )
      ) . theme("pager");

  return $output;
}

/**
 * Utility function to fetch bounce campaign id from a given webform id.
 *
 * @param int $webform_id
 *   Attach webform id
 *
 * @return int|bool
 *   The bounce convert campaign nid, or FALSE if the given webform is not
 *   associated with a bounce convert campaign.
 */
function _bounce_convert_get_campaign_id_from_webform_id($webform_id) {
  $campaign_id = db_query("SELECT campaign_id FROM {bounce_convert_impression} WHERE webform_id = :webform_id LIMIT 1", array(':webform_id' => $webform_id), array('target' => 'slave'))->fetchField();
  if ($campaign_id) {
    return $campaign_id;
  }
  else {
    return FALSE;
  }
}
