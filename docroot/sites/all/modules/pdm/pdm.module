<?php

/**
 * Implementation of hook_init()
 * 
 * Load up our js and css
 */
function pdm_init() {
  global $user;

  drupal_add_js(drupal_get_path('module', 'pdm') . '/pdm.js');
  drupal_add_css(drupal_get_path('module', 'pdm') . '/pdm.css');
  
}

/**
 * Implementation of hook_menu()
 */
function pdm_menu() {
  $items['pdm/dismiss'] = array(
    'title' => 'Dismiss PDM Message',
    'page callback' => 'pdm_dismiss_message',
    'delivery callback' => 'ajax_deliver',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Generate the dismissable message.
 * 
 * @param string $message
 * @param array $options 
 *   Array of options for this pdm
 */
function pdm_create_message($message, $options) {
  global $user;
  
  $default_options = array(
    'type'                => 'status', // Type of message
    'pdm_type'            => 'misc', // This is a custom field that can be set for filtering. It is similar to the first param for watchdog in use.
    'repeat'              => TRUE, // Whether or not the message will repeat if there are multiple identical messages generated
    'persist'             => TRUE, // Whether or not the message perists across multiple page loads
    'persist_count'       => 0, // Number of times the message should be displayed. NULL means untill dismissed 
    'persist_time'        => 0, // Time in seconds the message should persist for
    'dismissable'         => TRUE, // Message can be dismissed
    'dismiss_time'        => 0, // How long it should be dismissed for (0 is forever)
    'dismiss_type'        => 1, // 1 indicates that it can re-occur, 0 means it cannot
    'paths'               => FALSE, // A list of paths on which this pdm should appear
  );
  
  $options += $default_options; // Add defaults to passed in options
  
  // If the message is not meant to persist, then go right to the display of it and bail.
  if ($options['persist'] == FALSE) {
    drupal_set_message($message, $options['type'], $options['repeat']);
    return TRUE;
  }
  
  // Generate the hash of this message
  $hash = sha1($message);
  
  // See if we have this message in the db.
  // We want to know if we should supress it later on.
  $ret = pdm_get_message($user->uid, TRUE, $hash);
  $msg = (array) $ret[0];
  
  if (!empty($msg)) {
    
    // Is this pdm auto expired?
    $still_alive = pdm_auto_expire($msg, $user->uid);
    
    // pdm was killed by auto expiration
    if (!$still_alive) {
      return FALSE;
    }
    
    // Update the counts if this is a display_count limited pdm
    if ($msg['persist_count'] != 0) {
      db_update('pdm')
        ->fields(array('displays' => $msg['displays'] + 1))
        ->condition('uid', $user->uid)
        ->condition('hash', $hash)
        ->execute();
    } 
    
  } 
  // This is a shiney new pdm, load it into the db
  else {
    $pid = db_insert('pdm')
      ->fields(array(
        'uid' => $user->uid,
        'message' => $message,
        'hash' => $hash,
        'type' => $options['type'],
        'persist_time' => $options['persist_time'],
        'persist_count' => $options['persist_count'],
        'dismissable' => $options['dismissable'],
        'dismiss_time' => $options['dismiss_time'],
        'dismiss_type' => $options['dismiss_type'],
        'paths' => $options['paths'],
      ))
      ->execute();
  }
  
}

/**
 * Ajax callback to dismiss a pdm
 * 
 * @param int $pid
 * @return NULL 
 */
function pdm_dismiss_message($pid) {
  
  // No pid? Just bail now.
  if (!$pid) {
    return FALSE; 
  }
  
  // Ensure our token is valid
  if (!drupal_valid_token($_GET['token'], $pid)) {
    return FALSE;
  }
  
  // Dismiss the pdm by setting the dismissed time in the db.
  db_update('pdm')
    ->fields(array(
      'dismissed' => time()
    ))
    ->condition('pid', $pid)
    ->execute();
  return TRUE;
}

/**
 * Get messages. Either all for a uid, or a specific message by uid and hash
 * 
 * @param int $uid
 * @param boolean $get_perm_dismissed
 *    If this set to TRUE then 
 * @param string $hash
 *    Hash of the message. This is used when getting a message to see if it
 *    should be supressed.
 * @return array
 *    Array containing 1 or more messages
 */
function pdm_get_message($uid, $get_dismissed = FALSE, $hash = NULL) {

  $query = db_select('pdm', 'p')
             ->fields('p')
             ->condition('uid', $uid);
             
  // By default $get_dismissed is false, so this statement will return true
  // and we will only get dismissed messages.
  // We also will get messages if the dimsiss_time and the time of dismissal
  // are greater than time--this ressurrects the pdm.
  //
  // Hook_init() calls pass false
  // The call in pdm_create_message passes TRUE
  if (!$get_dismissed) {
    $query->where(' (dismissed = 0 OR dismissed + dismiss_time > ' . time() . ') ');
  } 
  
  // If a hash has been passed in, add it to the query
  if ($hash) {
    $query->condition('hash', $hash);
  }

  return $query->execute()->fetchAll();
  
}

/**
 * Determine if a pdm has auto-expired. Output TRUE if it is still valid and
 * FALSE if it has expired.
 * 
 * @param array $ret
 * @param int $uid
 * @return boolean
 */
function pdm_auto_expire($ret, $uid) {
  // Do the persistence settings indicate that this pdm is expired?
  if (
      ($ret['persist_time'] != 0 && $ret['persist_time'] < time()) 
        || 
      ($ret['persist_count'] != 0 && $ret['persist_count'] < $ret['displays'] + 1)
     ) {

    // Conditions have forced this pdm to be dismissed
    if ($ret['dismiss_type'] == 1) {
      // pdm can re-occur. We'll just delete it from the table to keep things clean
      // TODO: Perhaps we could move these into an archive table so they can be viewed.
      db_delete('pdm')
        ->condition('uid', $uid)
        ->condition('hash', $hash)
        ->execute();
    } 
    else {
      // This pdm is toast. Gone forever. Mark it as dismissed and let it linger.
      // TODO: Make an admin UI for cleaning up messages older than x days
      db_update('pdm')
        ->condition('uid', $uid)
        ->condition('hash', $hash)
        ->fields(array('dismissed' => time()))
        ->execute();
    }

    // This PDM was expired
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Implementation of hook_theme_registry_alter().
 * Replace original messages theming function with our own.
 */
function pdm_theme_registry_alter(&$theme_registry) {
  $theme_registry['status_messages']['function'] = 'theme_pdm';
}

/**
 * Function to override default theming of drupal status messages
 * 
 * @param type $vars 
 */
function theme_pdm($variables) {
  global $user;
  
  $display = $variables['display'];
  $msg_display = array();

    // Load messages for this user and render those suckers.
  $msgs = pdm_get_message($user->uid);
  if (is_array($msgs)) {
    foreach ($msgs as $msg) {
      // If a path is set in the db, match that path, and only show this alert on it
      if (!empty($msg->paths)) {
        $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
        if (!drupal_match_path($path, $msg->paths)) {
          continue;
        }
      }
      $vars = array(
        'message' => $msg->message,
        'options' => (array) $msg,
        'pid' => $msg->pid,
      );
      
      $msg_display[] = theme('pdm_messages', array('vars' => $vars));
    }
  }
  
  // Load messages set with drupal_set_message()
  foreach (drupal_get_messages($display) as $type => $messages) {
    foreach($messages as $message) {
      $vars = array(
        'message' => $message,
        'options' => array(
          'type' => $type,
          'repeat' => FALSE,
          'dismissable' => variable_get('pdm_dsm_dismissable', TRUE),
          'persist' => variable_get('pdm_dsm_persist', FALSE),
        ),
        'pid' => 0,
      );
      
      $msg_display[] = theme('pdm_messages', array('vars' => $vars));
    }
  }
  
  // Ensure that this page is not cachable
  if (count($msg_display) > 0) {
    drupal_page_is_cacheable(FALSE);
  }
  
  return implode("\n", $msg_display);
  
}

/**
 * Theme function for PDM and DSM messages
 * 
 * This function handles the theming and output of the messages. 
 * 
 * @param array $vars
 * @return string 
 */
function theme_pdm_messages($vars) {
  
  // Assign our values out of the vars array
  $options = (array)  $vars['vars']['options'];
  $message = (string) $vars['vars']['message'];
  $pid =     (int)    $vars['vars']['pid'];
  
  // Set our default options and merge them into the passed in options
  $defaults = array('type' => 'status', 'repeat' => TRUE, 'dismissable' => 0);
  if (is_array($options)) {
    $options += $defaults;
  }
  
  // Add our dismiss link
  if ($options['dismissable']) {
    $url = is_int($pid) && $pid > 0 ? '/pdm/dismiss/' . $pid : '';
    $text = empty($url) ? 'Hide' : 'Dismiss';
    $token = drupal_get_token($pid);
    
    $message .= '<div class="pdm-dismiss-wrapper">' . 
                l(t($text), $url, array('query' => array('token' => $token), 'fragment' => 'refresh', 'external' => TRUE, 'attributes' => array('class' => 'pdm-dismiss-link'))) . 
                '</div>';
  }
   
  // Return HTML 
  return '<div class="messages ' . $options['type'] . '"><div class="pdm-message-wrapper pdm-' . $options['type'] . '">' . $message . '</div></div>';
  
}

/**
 * Implementation of hook_theme().
 * 
 * This registers our themeing function(s)
 */
function pdm_theme() {
  return array(
    'pdm_messages' => array(
      'variables' => array(
        'vars' => NULL,
      ),
    ),
  );
}

/**
 * Render a message and output it right here. Reall only useful for 
 * non-persistent messages.
 * 
 * @param string $message
 * @param array $options
 * @param int $pid 
 */
function pdm_render_message($message, $options, $pid = 0) {
  return theme('pdm_messages', array('vars' => array('message' => $message, 'options' => $options, 'pid' => $pid)));
}