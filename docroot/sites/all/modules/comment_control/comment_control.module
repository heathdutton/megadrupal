<?php

/**
 * Implements hook_help().
 */
function comment_control_help($path, $arg) {
  if ($path == 'admin/help#comment_control') {
    return t('This is a custom comment control module, upgrade version of Drupal 6 comment control module.');
  }
}

/**
 * Implementation of hook_menu().
 */
function comment_control_menu() {
  $items = array();
  $items['admin/config/content/comment_control'] = array(
    'title' => 'Comment control',
    'description' => 'Configure list of allowed urls and disallowed words.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('comment_control_settings'),
    'access arguments' => array('administer nodes'),
  );
  return $items;
}

/**
 * settings
 *
 */
function comment_control_settings() {
  $form = array();

  $form['url_list'] = array(
    '#type' => 'textarea',
    '#title' => t('List of allowed urls.'),
    '#default_value' => comment_control_get_list(),
    '#description' => t('One url per line. Subdomains included (example: test.com allows www.test.com and sub.test.com).'),
  );

  $form['word_list'] = array(
    '#type' => 'textarea',
    '#title' => t('List of disallowed words.'),
    '#default_value' => comment_control_get_words(),
    '#description' => t('One word or combination of words per line.'),
  );

  $form['bad_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('List of disallowed bad words.'),
    '#collapsible' => true,
    '#collapsed' => true,
  );

  $form['bad_fieldset']['bad_word_list'] = array(
    '#type' => 'textarea',
    '#default_value' => comment_control_get_bad_words(),
    '#description' => t('One word or combination of words per line.'),
  );

  $form['#submit'][] = 'comment_control_form_submit';

  return system_settings_form($form);
}

/**
 * get list of allowed urls
 */
function comment_control_get_list() {
  return variable_get('comment_control_list', '');
}

/**
 * get list of disallowed words
 */
function comment_control_get_words() {
  return variable_get('comment_control_words', '');
}

/**
 * get list of disallowed bad words
 */
function comment_control_get_bad_words() {
  return variable_get('comment_control_bad_words', '');
}

function comment_control_form_validate($form, &$form_state) {
  $replace = array("http://", "https://");
  if (!empty($form_state['values']['url_list'])) {
    $form_state['values']['url_list'] = str_replace($replace, "", $form_state['values']['url_list']);
  }
}

/**
 * save values
 *
 * @param mixed $form
 * @param mixed $form_state
 */
function comment_control_form_submit($form, &$form_state) {
  $list = $form_state['values']['url_list'];
  variable_set('comment_control_list', $list);
  $words = $form_state['values']['word_list'];
  variable_set('comment_control_words', $words);
  $bad_words = $form_state['values']['bad_word_list'];
  variable_set('comment_control_bad_words', $bad_words);

}

/**
 * Implements hook_comment_update().
 */
function comment_control_comment_update($comment) {
  comment_control_comment_save($comment);
}

/**
 * Implements hook_comment_insert().
 */
function comment_control_comment_insert($comment) {
  comment_control_comment_save($comment);
}

/**
 * Filter comment
 * @param $comment
 */
function comment_control_comment_save($comment) {
  $encoding = mb_internal_encoding();
  if (mb_internal_encoding() != "UTF-8") {
    mb_internal_encoding("UTF-8");
  }

  $list = comment_control_get_list();
  if (!empty($list)) {
    $pattern = "|(https?://)?([\p{L}0-9\.-]+\.[\p{L}]{2,6})|Uim";

    preg_match_all($pattern, $comment->comment_body['und'][0]['value'], $matches);

    foreach ($matches[2] as $domain) {
      if (substr_count($domain, ".") > 1) {
        $domain = substr(stristr($domain, "."), 1);

      }
      if (mb_stripos($list, $domain) === false) {
        $comment->status = COMMENT_NOT_PUBLISHED;
        db_update('comment')
          ->fields(array(
            'status' => $comment->status,
          ))
          ->condition('cid', (int) $comment->cid, '=')
          ->execute();
        comment_control_enc_return($encoding);
        drupal_set_message(t('Your comment has been queued for moderation by site administrators and will be published after approval.'));
        return;
      }
    }
  }

  $word_list = explode(PHP_EOL, comment_control_get_words() . PHP_EOL . comment_control_get_bad_words());
  foreach ($word_list as $word) {
    if (mb_stripos($comment->comment_body['und'][0]['value'], comment_control_mb_trim($word)) !== false) {

      $comment->status = COMMENT_NOT_PUBLISHED;
      db_update('comment')
        ->fields(array(
          'status' => $comment->status,
        ))
        ->condition('cid', (int) $comment->cid, '=')
        ->execute();
      comment_control_enc_return($encoding);
      drupal_set_message(t('Your comment has been queued for moderation by site administrators and will be published after approval.'));
      return;
    }
  }
  comment_control_enc_return($encoding);
}

function comment_control_enc_return($encoding = '') {
  if (!empty($encoding)) {
    mb_internal_encoding($encoding);
  }
}

function comment_control_mb_trim($str) {
  return preg_replace("#(^\s+)|(\s+$)#U", "", $str);
}