<?php

define('STORED_IN_DATABASE', 1);
define('STORED_IN_CODE', 2);


/**
 * Implements hook_permission
 *
 * @return array
 */
function nedstat_permission() {
  return array(
    'administer nedstat' => array(
      'title' => t('Administer nedstat'),
      'description' => t('Perform administration tasks for nedstat module.'),
    ),
    'administer nedstat labels' => array(
      'title' => t('Administer nedstat labels'),
      'description' => t('Create and manage nedstat labels.'),
    ),
    'administer nedstat paths' => array(
      'title' => t('Administer nedstat paths'),
      'description' => t('Create and manage nedstat paths.'),
    ),
    'administer nedstat exclude paths' => array(
      'title' => t('Administer nedstat exclude paths'),
      'description' => t('Manage nedstat exclude paths.'),
    ),
  );
}


/**
 * Implements hook_menu()
 *
 * @return array
 */
function nedstat_menu() {
  $items = array();

  //create a block "Webanalytics"
  $items['admin/config/webanalytics'] = array(
    'title' => 'Web Analytics',
    'description' => 'Web Analytics',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer nedstat'),
    'position' => 'right',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  
  // Module settings
  $items["admin/config/webanalytics/nedstat"] =
  $items['admin/config/webanalytics/nedstat/default'] = array(
    'title' => 'Nedstat',
    'description' => 'Manage your nedstat statistics.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nedstat_admin_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer nedstat'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/nedstat.admin.inc',
    'module' => 'nedstat',
  );
  
  $items['admin/config/webanalytics/nedstat/default']['title'] = 'Settings';
  $items['admin/config/webanalytics/nedstat/default']['type'] = MENU_DEFAULT_LOCAL_TASK;
  
  
  //labels
  $items['admin/config/webanalytics/nedstat/label'] =
  $items['admin/config/webanalytics/nedstat/label/list'] = array(
    'title' => 'Labels',
    'description' => 'Manage nedstat labels',
    'page callback' => 'nedstat_labels_overview_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer nedstat labels'),
    'type' => MENU_LOCAL_TASK,
    'module' => 'nedstat',
    'file' => 'includes/nedstat.labels.inc',
    'weight' => 10,
  );
  
  $items['admin/config/webanalytics/nedstat/label/list']['title'] = 'List';
  $items['admin/config/webanalytics/nedstat/label/list']['type'] = MENU_DEFAULT_LOCAL_TASK;
  
  $items['admin/config/webanalytics/nedstat/label/add'] = array(
    'title' => 'Add',
    'description' => 'Add label',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nedstat_label_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer nedstat'),
    'type' => MENU_LOCAL_TASK,
    'module' => 'nedstat',
    'file' => 'includes/nedstat.labels.inc',
    'weight' => 20,
  );
  
  $items['admin/config/webanalytics/nedstat/label/%nedstat_label_id/edit'] = array(
    'title' => 'Edit label',
    'description' => 'Edit label',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nedstat_label_form', 5),
    'access callback' => 'user_access',
    'access arguments' => array('administer nedstat labels'),
    'type' => MENU_IS_LOCAL_TASK,
    'module' => 'nedstat',
    'file' => 'includes/nedstat.labels.inc',
    'weight' => 20,
  );
  
  $items['admin/config/webanalytics/nedstat/label/%nedstat_label_id/delete'] = array(
    'title' => 'Delete label',
    'description' => 'Delete a label',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nedstat_label_delete_form', 5),
    'access callback' => 'user_access',
    'access arguments' => array('administer nedstat labels'),
    'type' => MENU_IS_LOCAL_TASK,
    'module' => 'nedstat',
    'file' => 'includes/nedstat.labels.inc',
    'weight' => 20,
  );

  
  //Path
  $items['admin/config/webanalytics/nedstat/path'] =
  $items['admin/config/webanalytics/nedstat/path/list'] = array(
    'title' => 'Path',
    'description' => 'Manage nedstat counternames based on path',
    'page callback' => 'nedstat_path_overview_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer nedstat paths'),
    'type' => MENU_LOCAL_TASK,
    'module' => 'nedstat',
    'file' => 'includes/nedstat.path.inc',
    'weight' => 10,
  );
  
  $items['admin/config/webanalytics/nedstat/path/list']['title'] = 'List';
  $items['admin/config/webanalytics/nedstat/path/list']['type'] = MENU_DEFAULT_LOCAL_TASK;
  
  $items['admin/config/webanalytics/nedstat/path/add'] = array(
    'title' => 'Add',
    'description' => 'Add countername based on path',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nedstat_path_add_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer nedstat'),
    'type' => MENU_LOCAL_TASK,
    'module' => 'nedstat',
    'file' => 'includes/nedstat.path.inc',
    'weight' => 20,
  );
  
  $items['admin/config/webanalytics/nedstat/path/%nedstat_path_id/edit'] = array(
    'title' => 'Edit path',
    'description' => 'Edit countername based on path',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nedstat_path_form', 5),
    'access callback' => 'user_access',
    'access arguments' => array('administer nedstat'),
    'type' => MENU_IS_LOCAL_TASK,
    'module' => 'nedstat',
    'file' => 'includes/nedstat.path.inc',
    'weight' => 20,
  );
  
  $items['admin/config/webanalytics/nedstat/path/%nedstat_path_id/delete'] = array(
    'title' => 'Delete path',
    'description' => 'Edit countername based on path',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nedstat_path_delete_form', 5),
    'access callback' => 'user_access',
    'access arguments' => array('administer nedstat'),
    'type' => MENU_IS_LOCAL_TASK,
    'module' => 'nedstat',
    'file' => 'includes/nedstat.path.inc',
    'weight' => 20,
  );

  // Module excludes settings
  $items['admin/config/webanalytics/nedstat/excludes'] = array(
    'title' => 'Exclude',
    'description' => 'Manage exclude path settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nedstat_exclude_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer nedstat exclude paths'),
    'type' => MENU_LOCAL_TASK,
    'module' => 'nedstat',
    'file' => 'includes/nedstat.exclude.inc',
    'weight' => 30,
  );
  
  return $items;
}

/**
 * Menu helper, check/load label 
 * 
 * @param $id
 */
function nedstat_label_id_load($id) {
  if (!empty($id) && is_numeric($id)) {
    module_load_include('inc', 'nedstat', 'includes/nedstat.labels');
    return nedstat_label_load($id);
  }
  
  return FALSE;
}

/**
 * Menu helper, check/load path 
 * 
 * @param $id
 */
function nedstat_path_id_load($id) {
  if (!empty($id) && is_numeric($id)) {
    module_load_include('inc', 'nedstat', 'includes/nedstat.path');
    return nedstat_path_load($id);
  }
  
  return FALSE;
}

/**
 * implementation hook_page_build
 * 
 * Why we use hook_page_alter to put no-javascript element in the footer?
 * see http://drupal.org/node/224333#hook_footer
 * Because we want to add some code into the top or bottom in a Drupal7 way. 
 * 
 * Why we use hook_page_build instead of hook_page_alter?
 * see http://drupal.org/node/224333#hook_page
 * Because we want to give other modules the possibility to have access to existing elements.
 * 
 * @param array $page 
 */
function nedstat_page_build(&$page) {
  if (nedstat_check_exclude($page)) {
		//normal measurement
	  if (variable_get('nedstat_measurement_type_normal', FALSE)) {
	    nedstat_normal_measurement($page);
	  }
	    
	  //Technical measurement
	  if (variable_get('nedstat_measurement_type_technical', FALSE)) {   
	    nedstat_technical_measurement($page);
	  }
	    
	  //Loading measurement
	  if (variable_get('nedstat_measurement_type_loading', FALSE)) {
	    nedstat_loadingtime_measurement($page);
	  }
	    
	  //Click-in measurement
	  if (variable_get('nedstat_measurement_type_click_in', FALSE)) {
	    nedstat_click_in_measurement($page);
	  }
	
	  //Click-out measurement
	  if (variable_get('nedstat_measurement_type_click_out', FALSE)) {
	    nedstat_click_out_measurement($page);
	  }
	    
	  //Pdf documents measurement
	  if (variable_get('nedstat_measurement_type_pdf', FALSE)) {
	    nedstat_pdf_document_measurement($page);
	  }
	    
	  //Campaign measurement
	  if (variable_get('nedstat_measurement_type_campaigns', FALSE)) {
	    nedstat_campaigns_measurement($page);
	  }
  }
}

/**
 * Check if nedstat should be executed in this context
 *
 * @param $page
 */
function nedstat_check_exclude(&$page) {
	global $user;
	
	if (empty($page['content'])) {
	  return FALSE;
	}
	
	//load variables
	$excluded_user_roles = variable_get('nedstat_settings_exclude_roles', array());
	$excluded_pages = variable_get('nedstat_settings_exclude_pages', '');
	
	//check for excluded user roles
	foreach ((array)$user->roles as $key => $role) {
		if (in_array($key, array_values($excluded_user_roles))) {
		  return FALSE;
		}
	}
	
	//check for excluded pages
  if (!empty($excluded_pages)) {
    if (drupal_match_path($_GET['q'], $excluded_pages)) {
      return FALSE;
    }
    
    $alias = drupal_get_path_alias($_GET['q']);
    if ($alias != $_GET['q']) {
      if (drupal_match_path($alias, $excluded_pages)) {
        return FALSE;
      }
    }
  }
	
	return TRUE;
}

/**
 * Returns a countername based on content-type or url
 * 
 * @param unknown_type $page
 */
function nedstat_get_countername(&$page, &$options) {
	$countername = '';
  $url = check_url($_GET['q']);
  $http_header = drupal_get_http_header();
  
  $options['current_url'] = $url;
  $options['http_header'] = $http_header;
  $options['is_errorpage'] = FALSE;
  $options['is_frontpage'] = FALSE;

  //check if we're on an 404 errorpage
  if (!empty($http_header['status']) && $http_header['status'] == '404 Not Found') {
    $countername = variable_get('nedstat_error_404_settings', '');
    $options['labels'][] = array('label' => 'ns_http_status', 'value' => '404');
    $options['is_errorpage'] = TRUE;

    if (empty($countername)) {
      $countername = 'error.404';
    }
  }
  
  //check if we're on an 403 errorpage
  if (!empty($http_header['status']) && $http_header['status'] == '403 Forbidden') {
    $countername = variable_get('nedstat_error_403_settings', '');
    $options['labels'][] = array('label' => 'ns_http_status', 'value' => '403');
    $options['is_errorpage'] = TRUE;
    
    if (empty($countername)) {
      $countername = 'error.403';
    }
  }
  
  if ($options['current_url'] == $options['front_page']) {
    $countername = variable_get('nedstat_frontpage_countername', '');
    $options['is_frontpage'] = TRUE;
  }

  $node = nedstat_fetch_node_from_page_build($page);
  if (!empty($node)) {
    $token_preset = variable_get('nedstat_node_type_' . check_plain($node->type) . '_settings', '');
    $token_preset = empty($token_preset) ? variable_get('nedstat_general_node_type_settings', '') : $token_preset;
    
    $token_options = array('sanitize' => TRUE, 'callback' => 'nedstat_cleanup_token_replacement');
    //@todo: expand data array passed to token_replace
    $countername = token_replace($token_preset, array('node' => $node, 'site' => variable_get('site_name', '')), $token_options);
  }
  else{
  	global $language;
    module_load_include('inc', 'nedstat', 'includes/nedstat.path');
    $path = nedstat_path_load_by_url($url);
    
    if (is_null($path)) {
    	$alias = drupal_get_path_alias($path, $language->language);
    	$path = nedstat_path_load_by_url($alias);
    }
    
    if (!empty($path)) {
    	$countername = $path->countername;
    }
  }
  
  $options['countername'] = explode('.', $countername);
  drupal_alter('nedstat_countername', $options);
  
  $options['prefix'] = variable_get('nedstat_prefix', '');
  $options['suffix'] = variable_get('nedstat_suffix', '');

  return $options;
}

/**
 * Get js countername with prefix & suffix
 * 
 * @param unknown_type $options
 */
function nedstat_get_js_countername($options) {
  $countername = $options['countername'];
  
  if (!empty($countername) && !empty($options['prefix'])) {
    array_unshift($countername, $options['prefix']);
  }
  
  if (!empty($countername) && !empty($options['suffix'])) {
    $countername[] = $options['suffix'];
  }
  
  return empty($countername) ? '' : implode('.', $countername);
}

/**
 * Fetch node object from page if exists
 * 
 * @param $page
 */
function nedstat_fetch_node_from_page_build($page) {
  $node = NULL;
  $index = 0;

  if (!empty($page['content']['system_main']['content']) && in_array('nodes', array_keys($page['content']['system_main']['content']), TRUE)) {
    //check we are on a nodepage
    $nodes = element_children($page['content']['system_main']['content']['nodes']);
    $index = current($nodes);
    
    if (!empty($index)) {
      $node = $page['content']['system_main']['content']['nodes'][$index]['#node'];
    }
  }
  
  if (!empty($page['content']['system_main']) && in_array('nodes', array_keys($page['content']['system_main']), TRUE)) {
    //check we are on a nodepage
    $nodes = element_children($page['content']['system_main']['nodes']);
    $index = current($nodes);
    
    if (!empty($index)) {
      $node = $page['content']['system_main']['nodes'][$index]['#node'];
    }
  }
  
  return $node;
}

/**
 * Cleanup the replaced tokens
 * 
 * lower strings
 * replace spaces with dash
 * 
 * @param $tokens
 * @param $arguments
 */
function nedstat_cleanup_token_replacement(&$tokens, &$arguments) {
  foreach ((array)$tokens as $key => $token) {
    $tokens[$key] = check_plain($tokens[$key]);
  	$tokens[$key] = strtolower($tokens[$key]);
  	$tokens[$key] = str_replace(' ', '-', $tokens[$key]);

    if (module_exists('transliteration')) {
      module_load_include('inc', 'transliteration', 'transliteration');
      $tokens[$key] = _transliteration_process($tokens[$key], '');
    }
  }
}

/**
 * Normal measurement
 * 
 * @param $page
 * @param $sitestat_url
 */
function nedstat_normal_measurement(&$page) {
  //get countername
	$options = array();
	$options['labels'] = array();
	$options['front_page'] = variable_get('site_frontpage', '');
	
	nedstat_get_countername($page, $options);
	
	//get additional labels
	module_load_include('inc', 'nedstat', 'includes/nedstat.labels');
	$label_data = nedstat_label_load_all();
  $labels = nedstat_filter_label_data($label_data);
	
	//get sitestat_url
	$options['base_url'] = TRUE;
	$options['labels'] = array_merge($options['labels'], $labels);
	
	//let other modules alter these options
	drupal_alter('nedstat_get_sitestat_url_data', $options);

	//build the url
	$sitestat_url = nedstat_get_sitestat_url($options);

  //js script (writing this as a string to include immediatly after noscript tag
  //couldn't achieve this with the drupal_add_js and weight (markup and script are seperatly handled)
  $normal_measurement_script =
      <<< aScript
      <script type="text/javascript"><!--//--><![CDATA[//><!--
        function sitestat(u){var d=document,l=d.location;ns_pixelUrl=u+"&ns__t="+(new Date().getTime());u=ns_pixelUrl+"&ns_c="+((d.characterSet)?d.characterSet:d.defaultCharset)+"&ns_ti="+escape(d.title)+"&ns_jspageurl="+escape(l&&l.href?l.href:d.URL)+"&ns_referrer="+escape(d.referrer);(d.images)?new Image().src=u:d.write('<'+'p><img src="'+u+'" height="1" width="1" alt="*"><'+'/p>');};
        sitestat("$sitestat_url");
      //--><!]]></script>
aScript;

  //no script tag
  $normal_measurement_noscript = '<noscript><p><img src="'. $sitestat_url .'" height="1" width="1" alt="*"></p></noscript>';

  $page['page_bottom']['nedstat'] =  array(
    'footer' => array(
      '#type' => 'markup',
      '#markup' =>   $normal_measurement_script . $normal_measurement_noscript,
      '#weight' => 1100,
    ),
  );

  //add countername to page as js variable
  $js_countername = nedstat_get_js_countername($options);
  $sitestat_base_url = nedstat_get_sitestat_base_url();
  drupal_add_js(array('nedstat' => array('countername' => $js_countername, 'sitestat_base_url' => $sitestat_base_url)), 'setting');
}

/**
 * Technical measurement
 * 
 * @param $page
 * @param $sitestat_url
 */
function nedstat_technical_measurement(&$page) {
  global $language;
  
  $measure_technical_data = FALSE;
  $technical_allowed_paths = variable_get('nedstat_measurement_type_technical_paths', '');
  $url = check_url($_GET['q']);
  
  $measure_technical_data = drupal_match_path($url, $technical_allowed_paths);
  $alias = drupal_get_path_alias($url, $language->language);
  if (!empty($alias) && $measure_technical_data == FALSE) {
    $measure_technical_data = drupal_match_path($alias, $technical_allowed_paths);  
  }
  
  if ($measure_technical_data) {
    drupal_add_js(drupal_get_path('module', 'nedstat') . '/js/sitestat.js', array('type' => 'file', 'scope' => 'footer', 'weight' => 10005));
    //dpm('measure technical data'); 
  }
}

/**
 * Loading time measurement
 * 
 * @param $page
 * @param $sitestat_url
 */
function nedstat_loadingtime_measurement(&$page) {
  // Loading Measurement (Loading Time 1)
  $loading_measurement_time1 = 'ns_loadingtime1=(new Date()).getTime()';
  drupal_add_js($loading_measurement_time1, array('type' => 'inline', 'scope' => 'header', 'weight' => -10000));
      
  // Loading Measurement (Loading Time 2)
  $loading_measurement_time2 = 'ns_loadingtime2=(new Date()).getTime()';
  drupal_add_js($loading_measurement_time2, array('type' => 'inline', 'scope' => 'footer', 'weight' => 10000));
}

/**
 * Click in measurement
 * 
 * @param $page
 * @param $sitestat_url
 */
function nedstat_click_in_measurement($page) {
	//@todo: implement this measurement
}

/**
 * Click out measurement
 * 
 * @param $page
 * @param $sitestat_url
 */
function nedstat_click_out_measurement($page) {
  //@todo: implement this measurement
}

/**
 * Pdf documents measurement
 * 
 * @param $page
 * @param $sitestat_url
 */
function nedstat_pdf_document_measurement($page) {
  //@todo: implement this measurement
}

/**
 * Campaigns measurement
 * 
 * @param $page
 * @param $sitestat_url
 */
function nedstat_campaigns_measurement($page) {
  //@todo: implement this measurement
}

/**
 * Implements hook_theme()
 * 
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * 
 * @return array
 */
function nedstat_theme($existing, $type, $theme, $path) {
  $theme = array();
  $path = drupal_get_path('module', 'nedstat');
  
  $theme['nedstat_overview_labels'] = array(
    'variables' => array('data' => array()),
    'function' => 'theme_nedstat_label_overview',
    'file' => 'theme/nedstat.theme.inc',
  );
  
  $theme['nedstat_label_options'] = array(
    'render element' => 'form',
    'file' => 'theme/nedstat.theme.inc',
  );
  
  $theme['nedstat_overview_paths'] = array(
    'variables' => array('data' => array()),
    'function' => 'theme_nedstat_path_overview',
    'file' => 'theme/nedstat.theme.inc',
  );
  
  $theme['nedstat_path_add_form'] = array(
    'render element' => 'form',
    'file' => 'theme/nedstat.theme.inc',
  );
  
  return $theme;
}

/**
 * Returns a sitestat base url;
 */
function nedstat_get_sitestat_base_url() {
  //load various settings
  $base_url = variable_get('nedstat_base_url', '');
  $client_name = variable_get('nedstat_client_name', '');
  $site_name = variable_get('nedstat_site_name', '');
      
  //check if sitename has tokens
  if (preg_match('/^\[(.*)\]$/', $site_name)) {
    $site_name_preset = $site_name;
    $token_options = array('sanitize' => TRUE, 'callback' => 'nedstat_cleanup_token_replacement');
    $site_name = token_replace($site_name_preset, array('site' => variable_get('site_name', '')), $token_options);
  }

  return check_plain($base_url) . '/'. check_plain($client_name) . '/' . check_plain($site_name) . '/s?';
}

/**
 * Build the sitestat_url based on the given
 * vars
 *
 * - base_url (TRUE/FALSE)
 * - countername (array)
 * - labels (array)
 *
 * @param $vars
 */
function nedstat_get_sitestat_url($vars) {
  $sitestat_url = '';
  
  //base url
  if (!empty($vars['base_url']) && $vars['base_url'] == TRUE) {
    $sitestat_url .= nedstat_get_sitestat_base_url();
  }
 
  //countername
  if (!empty($vars['countername'])) {
    $countername = '';
    
    if (!empty($vars['prefix'])) {
      $countername .= $vars['prefix'] . '.';  
    }
    
    $countername = implode('.', $vars['countername']);
    if (empty($countername)) {
      return;  
    }
    
    if (!empty($vars['suffix'])) {
      $countername .= '.' . $vars['suffix'];  
    }
    
    
    $sitestat_url .= $countername;
  }
  
  //additional labels
  if (!empty($vars['labels'])) {
    foreach ((array)$vars['labels'] as $item) {
      $sitestat_url .= '&' . $item['label'] . '=' . $item['value'];
    }
  }
  
  //dpm('Sitestat url: ' . $sitestat_url);
  return $sitestat_url;
}