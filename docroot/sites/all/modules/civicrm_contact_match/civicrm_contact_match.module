<?php

/**
 * @file
 * This module allows users to modify the associations between Drupal users
 * and CiviCRM contacts.
 */

/**
 * Implements hook_menu().
 */
function civicrm_contact_match_menu()
{
  $items = array();

  $items['admin/config/civicrm_match'] = array(
    'title' => 'CiviCRM Contact Match Settings',
    'description' => 'Configuration settings for the Modify CiviCRM uf match module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('civicrm_contact_match_admin_form'),
    'file' => 'civicrm_contact_match_admin.inc',
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['user/%/civicrm_match'] = array(
    'title' => 'CiviCRM Contact Match',
    'description' => 'Match Drupal user to CiviCRM contact',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('civicrm_contact_match_edit_form', 1),
    'access arguments' => array('modify uf match'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function civicrm_contact_match_permission()
{
  return array(
    'modify uf match' => array(
      'title' => t('Modify Drupal to CiviCRM user association'),
    ),
  );
}

/**
 * Modify the association between a drupal user and a civicrm contact.
 *
 * @param int $uid
 *   The UID of the user which we're modifying.
 *
 * @return array
 *   Form array to be rendered.
 */
function civicrm_contact_match_edit_form($form, &$form_state, $uid) {
  $user = user_load($uid);
  if (empty($user)) {
    drupal_set_message(t('No user found.'), 'error');
    return array();
  }
  $info = <<<EOF
    <h2>Modifying user <i>$user->name</i> ($user->mail)</h2><br /><br />
EOF;

  // Get contact info.
  civicrm_initialize();
  $api_result = civicrm_api("UFMatch", "get",
    array(
      'version' => '3',
      'sequential' => '1',
      'uf_id' => $user->uid,
    )
  );
  if ($api_result['count'] == 0) {
    $names = 'new association';
  } elseif ($api_result['count'] > 1) {
    drupal_set_message(t('This user has more than one corresponding CRM contact.'), 'error');
    return array();
  } else {
    $contact_id = $api_result['values'][0]['contact_id'];
    $domain_id = $api_result['values'][0]['domain_id'];
    $uf_name = $api_result['values'][0]['uf_name'];

    $api_result = civicrm_api("Contact", "get",
      array('version' => '3', 'sequential' => '1', 'contact_id' => $contact_id));
    $fname = $api_result['values'][0]['first_name'];
    $lname = $api_result['values'][0]['last_name'];

    $href = '<a href="' .
      variable_get('civicrm_contact_match_civi_location', '/civicrm') .
      "/contact/view?reset=1&cid=$contact_id" .
      '">';
    if ((!isset($fname) || ($fname == '')) &&
      (!isset($lname) || ($lname == ''))
    ) {
      $names = $href . 'view record</a>';
    } else {
      $names = $href . $fname . ' ' . $lname . '</a>';
    }
  }
  $form['civicrm_contact_match_info'] = array(
    '#markup' => $info,
  );
  $form['civicrm_contact_match_uid'] = array(
    '#type' => 'value',
    '#value' => $uid,
  );

  $form['civicrm_contact_match_civiid'] = array(
    '#type' => 'textfield',
    '#title' => filter_xss('CiviCRM Contact ID (' . $names . ')'),
    '#default_value' => isset($contact_id) ? $contact_id : '',
    '#required' => TRUE,
  );

  $form['civicrm_contact_match_email'] = array(
    '#title' => "uf_name (typically the user's email address)",
    '#type' => 'textfield',
    '#default_value' => isset($uf_name) ? $uf_name : '',
    '#required' => true,
  );

  $form['civicrm_contact_match_domain_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Domain ID'),
    '#default_value' => isset($domain_id) ? $domain_id : 1,
    '#required' => TRUE,
  );

  $form['confirm_delete'] = array(
    '#type' => 'checkbox',
    '#title' => t('Confirm delete'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
  );

  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('civicrm_contact_match_delete'),
    '#validate' => array('civicrm_contact_match_delete_validate'),
  );

  return $form;
}

/**
 * Validate form.
 */
function civicrm_contact_match_edit_form_validate($form, &$form_state)
{

  civicrm_initialize();
  // Confirm contact exists
  $api_results = civicrm_api('Contact', 'get',
    array(
      'version' => '3',
      'sequential' => '1',
      'contact_id' => $form_state['values']['civicrm_contact_match_civiid'],
    )
  );

  if ($api_results['count'] == 0) {
    form_set_error('civicrm_contact_match_civiid', t('Contact ID does not exist.'));
  }

  // Check if contact is already assigned to a different user
  $params = array(
    'sequential' => 1,
    'contact_id' => $form_state['values']['civicrm_contact_match_civiid'],
  );
  $apiResult = civicrm_api3('UFMatch', 'get', $params);

  if ($apiResult['count'] > 0) {
    $uid = $apiResult['values'][0]['uf_id'];
    $user = user_load($uid);
    form_set_error('civicrm_contact_match_civiid',
      t('The given contact ID is already associated with the user') .
      ' <a href="/user/' . $uid . '">' . $user->name . '</a>');
  }
}

/**
 * Submit.
 */
function civicrm_contact_match_edit_form_submit($form, &$form_state) {
  civicrm_initialize();
  $error = 0;

  // Get current association
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'uf_id' => $form_state['values']['civicrm_contact_match_uid'],
  );
  $result = civicrm_api('UFMatch', 'get', $params);

  if ($result['count'] > 0) {
    $currentID = $result['values'][0]['id'];
  }

  // Create new association
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'uf_id' => $form_state['values']['civicrm_contact_match_uid'],
    'contact_id' => $form_state['values']['civicrm_contact_match_civiid'],
    'domain_id' => $form_state['values']['civicrm_contact_match_domain_id'],
    'uf_name' => $form_state['values']['civicrm_contact_match_email'],
  );
  if (isset($currentID)) {
    $params['id'] = $currentID; // update
  }
  $result = civicrm_api('UFMatch', 'create', $params);

  if ($result['is_error']) {
    drupal_set_message(t('Error associating user to contact record: ' . $result['error_message']), 'error');
  }

  if (!$error) {
    drupal_set_message(t('Record successfully updated'));
  }

  // Add redirection if required.
  $redir = variable_get('civicrm_contact_match_redir', '');
  if ($redir != '') {
    $form_state['redirect'] = $redir;
  }
}

/**
 * @param $form
 * @param $form_state
 */
function civicrm_contact_match_delete_validate($form, &$form_state) {
  if ($form_state['values']['confirm_delete'] == 0) {
    form_set_error('confirm_delete', t('Please confirm that you want to delete this contact match.'));
  }
}

/**
 * Delete contact match.
 *
 * @param $form
 * @param $form_state
 */
function civicrm_contact_match_delete($form, &$form_state) {
  // Get current association
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'uf_id' => $form_state['values']['civicrm_contact_match_uid'],
  );
  $result = civicrm_api('UFMatch', 'get', $params);

  // Delete
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'id' => $result['values'][0]['id'],
  );
  $result = civicrm_api('UFMatch', 'Delete', $params);

  if ($result['is_error'] == 0) {
    drupal_set_message(t('Contact association has been deleted.'));
  } else {
    drupal_set_message(t('Contact association deletion has failed: ' . $result['error_message']), 'error');
  }
}