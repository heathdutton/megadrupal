<?php
/**
 * @file
 * Provides a FlexSlider formatter for Entity Reference fields.
 */

/**
 * Implements hook_theme().
 */
function flexslider_entityreference_theme() {
  return array(
    'flexslider_entityreference' => array(
      'variables' => array('entities' => NULL, 'slides' => array(), 'settings' => array(), 'flexslider' => array()),
      'render element' => 'flexslider',
      'file' => 'flexslider_entityreference.theme.inc',
    ),
    'flexslider_entityreference_list' => array(
      'variables' => array('items' => array(), 'settings' => array()),
      'file' => 'flexslider_entityreference.theme.inc',
    ),
    'flexslider_entityreference_list_item' => array(
      'variables' => array('item' => array(), 'settings' => array(), 'caption' => ''),
      'file' => 'flexslider_entityreference.theme.inc',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function flexslider_entityreference_field_formatter_info() {
  return array(
    'entityreference_entity_flexslider' => array(
      'label' => t('FlexSlider'),
      'description' => t('Displays the rendered entities in a FlexSlider.'),
      'field types' => array('entityreference'),
      'settings' => array(
        'view_mode' => '',
        'view_mode_thumb' => '',
        'thumbnail_path' => '',
        'optionset' => '',
        'display_caption' => 1,
        'caption_source' => 'entity_label',
        'caption_source_token' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function flexslider_entityreference_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $field_name = $field['field_name'];
  $parents_array = array($field_name, 'settings_edit_form', 'settings');
  $parents = 'fields]' . implode('][', $parents_array) . ']';

  $form = array();

  // Show select box for the option set.
  $optionsets = array();
  ctools_include('export');
  foreach (flexslider_optionset_load_all() as $name => $optionset) {
    $optionsets[$name] = check_plain($optionset->title);
  }
  $form['optionset'] = array(
    '#title' => t('Option set'),
    '#type' => 'select',
    '#options' => $optionsets,
    '#default_value' => $settings['optionset'],
  );

  $entity_info = entity_get_info($field['settings']['target_type']);
  $options = array();
  if (!empty($entity_info['view modes'])) {
    foreach ($entity_info['view modes'] as $view_mode => $view_mode_settings) {
      $options[$view_mode] = $view_mode_settings['label'];
    }
  }
  if (count($options) > 1) {
    $form['view_mode'] = array(
      '#type' => 'select',
      '#options' => $options,
      '#title' => t('Slide view mode'),
      '#default_value' => $settings['view_mode'],
    );
    $form['view_mode_thumb'] = array(
      '#type' => 'select',
      '#options' => array(
        '_empty' => '- ' . t('Nothing') . ' -',
        '_image' => '- ' . t('Thumbnail image') . ' -',
      ) + $options,
      '#title' => t('Thumbnail view mode'),
      '#default_value' => $settings['view_mode_thumb'],
    );
    $form['thumbnail_path'] = array(
      '#type' => 'textfield',
      '#title' => t('Thumbnail path'),
      '#default_value' => $settings['thumbnail_path'],
      '#description' => t('The path of the image to use as thumbnail.'),
    );
    $form['display_caption'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use FlexSlider caption'),
      '#default_value' => $settings['display_caption'],
      '#description' => t("Whether to show a caption or not"),
    );
    $rendered_field_name_prepend = "fields[$field_name][settings_edit_form][settings]";
    $rendered_field_names['display_caption'] = $rendered_field_name_prepend . '[display_caption]';
    $rendered_field_names['caption_source'] = $rendered_field_name_prepend . '[caption_source]';
    $caption_source_options = array(
      'entity_label' => "Use the Entity's Label",
    );
    $form['caption_source'] = array(
      '#type' => 'select',
      '#title' => 'Chooose a source for FlexSlider caption',
      '#default_value' => $settings['caption_source'],
      // Only visible if display_caption checkbox is checked.
      '#states' => array(
        'visible' => array(
          ':input[name="' . $rendered_field_names['display_caption'] . '"]' => array('checked' => TRUE),
        ),
      ),
    );
    if (module_exists('token')) {
      $caption_source_options['token'] = "Use Token";
      $form['thumbnail_path']['#description'] .= ' ' . t('This field support tokens. Example: %example', array(
        '%example' => '[node:field-image:file:path]',
      ));
      $form['caption_source_token'] = array(
        '#type' => 'textfield',
        '#title' => t('Caption Text from Token'),
        '#default_value' => $settings['caption_source_token'],
        '#description' => t('Populate Caption Text from these token values. Example: %example', array(
          '%example' => '[current-date:raw]',
        )),
        // Only visible if token is enabled and caption_source value is token.
        '#states' => array(
          'visible' => array(
            ':input[name="' . $rendered_field_names['caption_source'] . '"]' => array('value' => 'token'),
          ),
        ),
      );
      $form['tokens'] = array(
        '#markup' => theme('token_tree_link', array('token_types' => array($entity_info['token type']), '#global_types' => FALSE)),
      );
    }
    $form['caption_source']['#options'] = $caption_source_options;
  }
  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function flexslider_entityreference_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  // Load option set.
  ctools_include('export');
  if (!empty($settings['optionset'])) {
    $optionset = flexslider_optionset_load($settings['optionset']);
  }

  // Build settings summary.
  $optionset = isset($optionset->title) ? $optionset->title : t('Default settings');
  $summary[] = t('Option set: %optionset', array('%optionset' => $optionset));

  $entity_info = entity_get_info($field['settings']['target_type']);
  $summary[] = t('Slides rendered as @mode', array('@mode' => isset($entity_info['view modes'][$settings['view_mode']]['label']) ? $entity_info['view modes'][$settings['view_mode']]['label'] : $settings['view_mode']));
  if ($settings['view_mode_thumb'] == '_empty') {
    $summary[] = t('Thumbnails rendered as @mode', array('@mode' => t('empty strings')));
  }
  else if ($settings['view_mode_thumb'] == '_image') {
    $summary[] = t('Thumbnails rendered as @mode', array('@mode' => t('images')));
  }
  else {
    $summary[] = t('Thumbnails rendered as @mode', array('@mode' => isset($entity_info['view modes'][$settings['view_mode_thumb']]['label']) ? $entity_info['view modes'][$settings['view_mode_thumb']]['label'] : $settings['view_mode_thumb']));
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function flexslider_entityreference_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  entityreference_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items, $displays);
}

/**
 * Implements hook_field_formatter_view().
 */
function flexslider_entityreference_field_formatter_view($parent_entity_type, $parent_entity, $field, $instance, $langcode, $items, $display) {
  $result = array();
  $settings = $display['settings'];

  // Rebuild the items list to contain only those with access.
  foreach ($items as $key => $item) {
    if (empty($item['access'])) {
      unset($items[$key]);
    }
  }

  switch ($display['type']) {
    case 'entityreference_entity_flexslider':
      foreach ($items as $delta => $item) {
        // Protect ourselves from recursive rendering.
        static $depth = 0;
        $depth++;
        if ($depth > 20) {
          throw new EntityReferenceRecursiveRenderingException(t('Recursive rendering detected when rendering entity @entity_type(@entity_id). Aborting rendering.', array('@entity_type' => $entity_type, '@entity_id' => $item['target_id'])));
        }

        // Clone the entity to support rendering the same entity in itself.
        $entity = clone $item['entity'];
        unset($entity->content);

        // Provide some context.
        list($parent_id,,$parent_bundle) = entity_extract_ids($parent_entity_type, $parent_entity);
        $entity->entityreference_flexslider = array(
          'display' => $display,
          'delta' => $delta,
          'entity_type' => $parent_entity_type,
          'entity_id' => $parent_id,
        );
        $entity_id = $item['target_id'];
        $entity_type = $field['settings']['target_type'];
        list(,,$bundle) = entity_extract_ids($entity_type, $entity);

        $build = entity_view($entity_type, array($entity_id => $entity), $settings['view_mode'], $langcode, FALSE);
        $caption_text = '';
        if (!empty($settings['display_caption'])) {
          if ($settings['caption_source'] == 'entity_label') {
            $caption_text = entity_label($entity_type, $entity);
          }
          elseif (($settings['caption_source'] == 'token') &&
            !empty($settings['caption_source_token'])) {
            $caption_text = token_replace($settings['caption_source_token'], array(
              $entity_type => $entity,
            ));
          }
        }
        $result[$delta] = array(
          'slide' => array(
            'entity' => $build[$entity_type][$entity_id],
            'caption' => $caption_text,
            '#entity_info' => array(
              'entity_type' => $entity_type,
              'bundle' => $bundle,
            ),
          ),
          'thumb' => array(),
        );
        if (!in_array($settings['view_mode_thumb'], array('_empty', '_image'))) {
          $build = entity_view($entity_type, array($entity_id => $entity), $settings['view_mode_thumb'], $langcode, FALSE);
          $result[$delta]['thumb'] = $build[$entity_type][$entity_id];
        } else if ($settings['view_mode_thumb'] == '_image') {
          if (module_exists('token')) {
            $result[$delta]['slide']['thumbnail'] = token_replace($settings['thumbnail_path'], array(
              $entity_type => $entity,
            ));
          } else {
            $result[$delta]['slide']['thumbnail'] = $settings['thumbnail_path'];
          }
        }
        $depth = 0;
      }
      break;
  }

  $element = array();
  if (count($result) > 0) {
    $element = array(
      '#theme' => 'flexslider_entityreference',
      '#entities' => $result,
      '#settings' => $display['settings'],
    );
  }
  return $element;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function flexslider_entityreference_process_flexslider(&$vars) {
  $settings =& $vars['settings'];
  $optionset =& $vars['settings']['optionset'];

  // Ensures array casting to avoid unsupported operand errors during cron run.
  if (empty($optionset->options)) {
    $optionset->options = array();
  }

  // Override flexslider settings if we're rendering thumbs.
  if (!empty($settings['view_mode_thumb']) && !in_array($settings['view_mode_thumb'], array('_empty', '_image'))) {
    $settings['thumbs_attributes_array']['class'][] = 'flexslider-entityreference-thumbs';
    $settings['thumbs_attributes_array']['class'][] = drupal_html_class('thumbs-' . $settings['view_mode_thumb']);

    $thumbs_id = $settings['attributes']['id'] . '-thumbs';
    $settings['thumbs_attributes_array']['id'] = $thumbs_id;

    $optionset->options = array(
      'manualControls' => '#' . $thumbs_id . ' > li',
    ) + $optionset->options;

    $js = &drupal_static('drupal_add_js', array());
    foreach ($js['settings']['data'] as $delta => &$data) {
      if (isset($data['flexslider'])) {
        $data['flexslider']['optionsets'][$optionset->name] = $optionset->options;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function flexslider_entityreference_preprocess_flexslider_list(&$vars) {
  if (isset($vars['settings']['view_mode'])) {
    $vars['theme_hook_suggestions'][] = 'flexslider_list';
    $vars['theme_hook_suggestions'][] = 'flexslider_entityreference_entitylist';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @see template_process_flexslider_list_item().
 */
function flexslider_entityreference_preprocess_flexslider_list_item(&$vars) {
  if (is_array($vars['item']) && isset($vars['item']['entity'])) {
    // Hides the optionset from template_process_flexslider_list_item().
    $vars['settings']['#optionset'] = $vars['settings']['optionset'];
    $vars['settings']['optionset'] =  array();

    $entity_type = $vars['item']['#entity_info']['entity_type'];
    $bundle = $vars['item']['#entity_info']['bundle'];

    $vars['theme_hook_suggestions'][] = 'flexslider_list_item';
    $vars['theme_hook_suggestions'][] = 'flexslider_entityreference_list_item_entity';
    $vars['theme_hook_suggestions'][] = 'flexslider_entityreference_list_item_entity__' . $entity_type;
    $vars['theme_hook_suggestions'][] = 'flexslider_entityreference_list_item_entity__' . $entity_type . '__' . $bundle;
  }
}

/**
 * Implements hook_process_HOOK().
 *
 * @see template_process_flexslider_list_item().
 */
function flexslider_entityreference_process_flexslider_list_item(&$vars) {
  if (isset($vars['settings']['#optionset'])) {
    // Unhide, as template_process_flexslider_list_item is now done.
    $vars['settings']['optionset'] = $vars['settings']['#optionset'];
    unset($vars['settings']['#optionset']);

    // Do our own implementation of what template_process_flexslider_list_item() does.
    $settings =& $vars['settings'];
    $attributes =& $settings['attributes'];
    $caption =& $vars['caption'];
    $caption = $vars['item']['caption'];

    if (isset($settings['optionset']->options['controlNav']) && $settings['optionset']->options['controlNav'] === 'thumbnails') {
      if (isset($vars['item']['thumbnail']) && !empty($vars['item']['thumbnail'])) {
        $thumbnail_url = image_style_url($settings['optionset']->imagestyle_thumbnail, $vars['item']['thumbnail']);

        $attributes['data-thumb'] = $thumbnail_url;
      }
    }

    if (isset($settings['optionset']->options['thumbCaptions']) && $settings['optionset']->options['thumbCaptions'] && !empty($caption)) {
      $attributes['data-thumbcaption'] = $caption;

      // Prevent captions from appearing in the slider.
      if (isset($settings['optionset']->options['thumbCaptionsBoth']) && $settings['optionset']->options['thumbCaptionsBoth'] === FALSE) {
        $caption = '';
      }
    }

    if (!empty($caption)) {
      $caption = '<div class="flex-caption">' . $caption . '</div>';
    }

    // Set $vars['item'] as theme_flexslider_list_item() expects it.
    $vars['item'] = $vars['item']['entity'];
  }
}
