<?php
/**
 * @file
 * Provide tests of worker functionality.
 *
 * @author Jim Berry ("solotandem", http://drupal.org/user/240748)
 */

/**
 * Base worker test case.
 *
 * Worker plugins are expected to extend this test case and test the
 * functionality of their worker review.
 */
class WorkerTestCase extends DrupalUnitTestCase {

  /**
   * Returns SSH key for connecting to git repository.
   */
  protected $SSHKey =
'-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAmXUjvPlBhGuG/+SLHpo8XP0mydX9EJQFpPAXjR6SNnl578Bx
ECc4vqlLcxVnaveyrTp/a99dojQ1KaxM67y9JHIMYh5fCwaUYIttjSixP5JxbuHK
Jg5BgWMB/PYxnyoWx7oJi931YA7en735jhvZHk9S4d1KUxhDammIqBMfL11iCcS+
XKNey6Y0FGuIfIXf93RYcQ+BqdMjbUryBsyUeltpPjbZ/j7ydNMwBcJ9PDnY3OC2
Mpdo7Ixed14pDOkSahtbQgp4qgMCPoJB235QvdA1GlbMm6QrdlQh1TerP983Y6yc
o2ktIrT3WlK8OZiurtIY9Dm19Z9GKt1snqUoJQIDAQABAoIBADq1nxugPNmdjcN+
u17U4T0uONXFQZFDIDmvBUOfK48dwHHiLR9h8gq3mD8KNEuvQjOWCsPJa/gvgxtT
aQZTagV0gJpVRkVgmgmprhrwM4e/zhf+2CjhEVyf9VXDFs7u+lIlMZvKKiM67R8u
PjiJHPLEpE/3KoVJ5hjjET5EOo0S1FM29JFRFIVNhkYX1THeb0M1XrtJRH0KWweG
uYPJxGRRyvi5ARdrhWQbHOxba8xuw55vDtoxZoHfH2A6Hc56xrDhNQmzKpa9WRzg
/VO36kHNWQ72lGtm1rJNYkkZlqlKw10vUgcNDO6yfbOxh2k/DLoBfJ4kZ5RkgN1V
ppKrrK0CgYEAxnxPLSqGoNklvYss0UT5j6llm0p2xfdmPYeL+Loqb+i+8+va4suc
Uzn+VEoeBlrMqR36B25V8lu8Bfcfzy9xefE9mzKhIaGBjN76BWLl50FFAu5rVPD6
JCxcNlDga8uNENowhqJGFnW6uhU02AxU9X4gA0D44BYBUnRLO9VWtjcCgYEAxeyl
XP+dxQ9TH7kJq7vLUcTD08zrqaHLabuKIry9A6Pa2Yol37r/CUwKa7EaHWErrWu+
EEqwzuv+naFr8G27LNHHDcf1YUPJZAixiMj1Dz3WOMt3xZyFOt6Oc/YAe/DUbQIf
DG8HS+9B+NblO+J1w4hWc8Kejr2/vCFs9Hi0ZoMCgYEAj0ublc4H2AQtPQRHXOXh
DhiL5GsECLQtueor4Wv1y0lK4qq6IdZBi8xoks3Xk1rmOooLwmWj4w7bVast6dQk
ppbFlVAeCDujXeJ0uoLF3AjBG/aownAfBxKHmCcXfns74pjDQ8/PrdNc9Y7t0bRF
ed6OmgrEInOAjNisoAvLSE0CgYAczuQG1EHfg+qCbIlm0K+4WB50vpfymdUkr6Jc
igIs/HWHQl9e4DXs4X+Gy0FU02brGAqTDnwLsjfeM7elSCN9U49YhylFHfu7LrTA
hxd8P3Dl1V+6iJyvw+MSJ9VMNPKGZ0+jnKmAOPPuR0EYZU7kxfxnXwV7G01EEc1t
DACeBwKBgCtBaYlLrUKBTxVcB5B8pJMCzD0fjhWU4IE2hOCf6AB2LRq+ZdTNdPLt
KGE0VJD3I7ZAmFp/sZwponMrqFswgrvs2rj0l3KQAj1Bg0K0b69s97N93BHdu7bn
B8Xd6WsjTohYGm1BdpeUUQx7MPbdNv1F6cB0DCTEfel4OklcXlnK
-----END RSA PRIVATE KEY-----
';
}

/**
 * Worker property test case.
 */
class WorkerPropertyTestCase extends WorkerTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Worker property handling',
      'description' => 'Ensure that the setting, parsing, and execution of tasks related to properties works properly.',
      'group' => 'Conduit',
    );
  }

  protected function setUp() {
    sdp(__METHOD__); // Call here to set $path for subsequent calls.

    // @todo DrupalUnitTestCase does not load modules -- change this in
    // SimpleTest 2.x maintained outside of core.
    // @see http://drupal.org/node/887134
    // This is illogical as the "reasons" given by Damien and others remark
    // that DUTC does not access the database. Their solution is to load the
    // modules before calling setUp(). This is silly. If the modules can be
    // loaded before setUp(), then this kills the reasoning that the loading
    // can not be done in the setUp() method. The same code as in DWTC can be
    // used, although it needs to be done earlier in the DUTC method.

    drupal_load('module', 'conduit');
    drupal_load('module', 'worker');
    parent::setUp('conduit', 'worker');
  }

  protected function testProperty() {
    worker_include('job');

    // These job properties include all the keys documented in worker_perform().
    // The only plugin supported is "command" execution.
    // The last patch applied includes syntax errors.
    $properties = $this->getProperties();
    $this->checkPlugin($properties);
    $this->checkCommand($properties);
    $this->checkScope($properties);
    $this->checkSetup($properties);
    $this->checkSSH($properties);
    $this->checkVCS($properties);
    $this->checkPatch($properties);
    $this->checkLog($properties);

    // Use the same job properties except include a patch that fails to apply.
    $patch_path = url('', array('absolute' => TRUE)) . drupal_get_path('module', 'worker') . '/tests';
    $patch_url_4 = $patch_path . '/test-fail.patch';
    $properties['patch'][$patch_url_4] = 'test';
    $this->checkCommand2($properties);
    $this->checkPatch2($properties);
    $this->checkLog2($properties);
  }

  protected function getProperties() {
    // Set the sample patch url.
    $patch_path = url('', array('absolute' => TRUE)) . drupal_get_path('module', 'worker') . '/tests';
    $patch_url_1 = $patch_path . '/test-readme.patch';
    $patch_url_2 = $patch_path . '/test-module.patch';
    $patch_url_3 = $patch_path . '/test-syntax.patch';

    // Create the conduit server tracking item.
    $item = new stdClass();
    $item->item_id = 32;
    $item->data = array(
      'nid' => 57,
      'vid' => 74,
      'delta' => 0,
    );

    // Create the job properties array.
    $properties = array(
      'verbose' => FALSE,
      'context' => 3, // Not applicable for the execute plugin.
      'database' => 'mysql', // Not applicable for the execute plugin.
      'version' => 7, // Not applicable for the execute plugin.
      'plugin' => 'execute', // 'scan',
      'command' => 'echo "hello world 2day"',

      'path' => array(
//         'modules',
//         'index.php',
        'test',
      ),
      'mask' => '/\.(php|inc|install|module|test)$/',
      'nomask' => '/(\.\.?|CVS)$/',

      'setup' => array(
//         'bzr launchpad-login boombatower',
      ),
      'variables' => array(
      ),
      'newline' => 'unix',
//       'newline' => 'any',

      'ssh' => array(
        array(
          'key' => $this->SSHKey,
          'host' => 'github.com',
          'user' => 'git',
          'port' => 22,
        ),
      ),
      'vcs' => array(
        'test' => 'git://git@github.com:boombatower/test.git/master',
//         '' => 'cvs://:pserver:anonymous:anonymous@cvs.drupal.org:/cvs/drupal:drupal:HEAD',
//         'sites/default/modules/pifr' => 'cvs://:pserver:anonymous:anonymous@cvs.drupal.org:/cvs/drupal-contrib:contributions/modules/project_issue_file_review:HEAD',
//         'simpletest' => 'cvs://:pserver:anonymous:anonymous@cvs.drupal.org:/cvs/drupal-contrib:contributions/modules/simpletest:DRUPAL-7--2',
//         'pifr' => 'cvs://:pserver:anonymous:anonymous@cvs.drupal.org:/cvs/drupal-contrib:contributions/modules/project_issue_file_review:HEAD',
//         'conduit' => 'git://git@github.com:boombatower/conduit.git/master',
//         'conduit2' => 'git://git://github.com/boombatower/conduit.git/master',
//         'conduit' => 'git[git://github.com/boombatower/conduit.git/master]',
//         'examiner' => 'bzr://lp:~examiner-dev/examiner/trunk',
//         'googlecl' => 'svn://http://googlecl.googlecode.com/svn/trunk',
      ),
      'patch' => array(
        $patch_url_1 => 'test',
        $patch_url_2 => 'test',
        $patch_url_3 => 'test',
//         'http://drupal.org/files/issues/565808-ajax-replace-comments.patch' => '',
//         'http://drupal.org/files/issues/drupal.system-index.243.patch' => '',
//         'http://drupal.org/files/issues/simpleTestRunner_WindowsFix_XmlSupport_1.diff' => '', // Non-unix line endings.
      ),

      'item' => $item,
    );

    return $properties;
  }

  protected function checkPlugin(array $properties) {
    // Ensure that the job plugin can be loaded.
    $plugin = worker_plugins_get('worker', $properties['plugin']);
    $this->assertNotNull($plugin, 'Plugin is not NULL');
    if ($plugin) {
      $this->assertEqual($plugin['title'], 'Execute', 'Plugin title is "Execute."');
    }
  }

  protected function checkCommand(array $properties) {
    $results = worker_perform($properties);
    $this->assertEqual('success', $results['status'], 'Command execution status is "success."');
    $this->assertEqual(substr($properties['command'], 6, -1), $results['result'][0], 'Command result is "' . substr($properties['command'], 6, -1) . '."');
  }

  protected function checkScope(array $properties) {}
  protected function checkSetup(array $properties) {}

  protected function checkSSH(array $properties) {}

  protected function checkVCS(array $properties) {
    foreach ($properties['vcs'] as $path => $repository) {
      $this->assertTrue(is_dir(JOB_ROOT . '/' . $path), "Directory exists for repository to be stored at path '$path.'");
      switch ($path) {
        case 'conduit':
          $module = 'README';
          break;

        default:
          // @todo A module file with the same name as the last path element may not always exist.
          $module = substr($path, strrpos($path, '/')) . '.module';
          break;
      }
      $this->assertTrue(file_exists(JOB_ROOT . '/' . $path . '/' . $module), "Module file '$module' exists in directory.");
    }
  }

  protected function checkPatch(array $properties) {
    // Check readme patch.
    $readme = file_get_contents(JOB_ROOT . '/test/README');
    $this->assertEqual($readme, "sample text that has been modified\n", 'Patch was applied to README in job/test directory.');

    // Check module patches.
    $module = file_get_contents(JOB_ROOT . '/test/test.module');
    $found = strpos($module, 'function test_init()');
    $this->assertTrue($found !== FALSE, 'Patch 1 was applied to test.module in job/test directory.');
    $found = strpos($module, 'The next line fails the syntax check');
    $this->assertTrue($found !== FALSE, 'Patch 2 was applied to test.module in job/test directory.');
  }

  protected function checkLog($properties) {
    $log_file = DRUPAL_ROOT . '/' . file_directory_path() . '/job.log';
    $log = file_get_contents($log_file);
    // Check module patches.
    $found = preg_match('@Apply test-module\.patch to /test\.\s+\[\s+\d+\.\d+\] Modified files:\s+ > test\.module@', $log);
    $this->assertTrue($found == 1, 'Patch 1 was applied to test.module in job/test directory.');
    $found = preg_match('@Apply test-syntax\.patch to /test\.\s+\[\s+\d+\.\d+\] Modified files:\s+ > test\.module@', $log);
    $this->assertTrue($found == 1, 'Patch 2 was applied to test.module in job/test directory.');
    // Confirm second patch produces invalid syntax.
    $errors = worker_syntax($properties);
  }

  protected function checkCommand2(array $properties) {
    $results = worker_perform($properties);
  }

  protected function checkPatch2(array $properties) {
    // Check module patches.
    $module = file_get_contents(JOB_ROOT . '/test/test.module');
    $found = strpos($module, 'This patch fails because the context line numbers are off');
    $this->assertTrue($found === FALSE, 'Patch 3 was not applied to test.module in job/test directory.');
  }

  protected function checkLog2($properties) {
    $log_file = DRUPAL_ROOT . '/' . file_directory_path() . '/job.log';
    $log = file_get_contents($log_file);
    // Confirm third patch failed to apply.
    $found = strpos($log, 'Failed to apply patch test-fail.patch.');
    $this->assertTrue($found !== FALSE, 'Patch 3 failed to apply to test.module in job/test directory.');
  }
}

/**
 * Temporary for testing.
 */
if (!function_exists('sdp')) {
  function sdp() {}
}
