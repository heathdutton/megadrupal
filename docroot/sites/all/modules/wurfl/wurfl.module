<?php

/**
 * @file
 * The WURFL module provides a wrapper for the WURFL library in Drupal.
 *
 * Examples of capabilities are:
 *
 * See http://scientiamobile.com/wurflCapability for more capability parameters
 * and the return value.
 *
 * In order to use this module, you must install the WURFL PHP library
 * (http://scientiamobile.com/downloads)
 * See the README.txt for installation instructions
 *
 */

define("WURFL_DB_DIR", 'resources/wurfl.zip');
define("WURFL_STORAGE_DIR", 'resources/storage');
define("WURFL_CACHE_DIR", 'resources/cache');
define("WURFL_CACHE_TTL", 86400);
define("WURFL_DEFAULT_MATCH_MODE", 'accuracy');
define("WURFL_DEFAULT_ALLOW_RELOAD", true);

/**
 * Implements hook_menu()
 */
function wurfl_menu() {
  $items = array();
  $items['admin/config/system/wurfl'] = array(
    'title' => 'WURFL',
    'file' => 'wurfl.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wurfl_admin'),
    'access arguments' => array('administer wurfl settings'),
    'type' => MENU_NORMAL_ITEM,
    'description' => t('Configure WURFL settings'),
  );
  $items['admin/config/system/wurfl/configuration'] = array(
    'title' => 'WURFL configuration',
    'access arguments' => array('administer wurfl settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/system/wurfl/test'] = array(
    'title' => 'WURFL test',
    'file' => 'wurfl.admin.inc',
    'page callback' => 'wurfl_test_page',
    'access arguments' => array('administer wurfl settings'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  return $items;
}

/**
 * Implements hook_perm()
 */
function wurfl_permission() {
   return array(
   'administer wurfl settings' => array(
      'title' => t('Administer WURFL settings'),
    ),
   );
}

function wurfl_boot() {
  wurfl_bootstrap();
}

/**
 * We make the $wurfl_manager available as global variable.
 */
function wurfl_bootstrap() {
  /* @var $wurfl_manager WURFL_WURFLManager */
  global $wurfl_manager;

  if ($wurfl_manager instanceof WURFL_WURFLManager) {
    return;
  }

  drupal_load('module', 'common');
  drupal_load('module', 'libraries');
  $library_path = DRUPAL_ROOT . '/' . libraries_get_path('wurfl-php');

  $bootstrap =  $library_path . '/WURFL/Application.php';
  $resources_dir = $library_path . '/resources';
  $wurfl_repository_path = $resources_dir . '/wurfl.zip';
  $persistence_dir = $resources_dir . '/storage';
  $cache_dir = $resources_dir . '/cache';
  $cache_ttl = variable_get('wurfl_cache_ttl', WURFL_CACHE_TTL);
  $match_mode = variable_get('wurfl_match_mode', WURFL_DEFAULT_MATCH_MODE);
  $allow_reload = (bool) variable_get('wurfl_allow_reload', WURFL_DEFAULT_ALLOW_RELOAD);

  if (!file_exists($bootstrap) || !file_exists($wurfl_repository_path)) {
    return;
  }

  include_once $bootstrap;

  //Create WURFL Configuration
  $wurfl_config = new WURFL_Configuration_InMemoryConfig();

  //Set location of the WURFL File
  $wurfl_config->wurflFile($wurfl_repository_path);

  //Set the match mode for the API ('performance' or 'accuracy')
  $wurfl_config->matchMode($match_mode);

  //Setup WURFL Persistence
  $wurfl_config->persistence('file', array('dir' => $persistence_dir));

  //Setup Caching
  $wurfl_config->cache('file',  array('dir' => $cache_dir, 'expiration' => $cache_ttl));

  $wurfl_config->allowReload($allow_reload);

  //Create a WURFL Manager Factory from the WURFL Configuration
  $wurfl_manager_factory = new WURFL_WURFLManagerFactory($wurfl_config);

  $wurfl_manager = $wurfl_manager_factory->create();
}

/**
 * Returns the requesting Device used to get to the
 * @return WURFL_CustomDevice
 */
function wurfl_get_requestingDevice() {
  global $wurfl_manager;
  return $wurfl_manager->getDeviceForHttpRequest($_SERVER);
}
