<?php
/**
 * @file
 * Create permissions that do nothing by default.
 *
 * Useful for permission-based acess control in Views.
 */

/**
 * Implements hook_help().
 */
function dummy_permissions_help($path, $arg) {
  switch ($path) {
    case 'admin/help#dummy_permissions':
      return t('Create permissions that do absolutely nothing. Useful for "permission" setting in Views access control, etc.');
  }
}

/**
 * Implements hook_menu().
 */
function dummy_permissions_menu() {
  $items['admin/people/permissions/dummy_permissions'] = array(
    'title' => 'Dummy Permissions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dummy_permissions_list_form'),
    'access arguments' => array('administer dummy permissions'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/people/permissions/dummy_permissions/add'] = array(
    'title' => 'Add New Dummy Permission',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dummy_permissions_add_form'),
    'access arguments' => array('administer dummy permissions'),
    'type' => MENU_LOCAL_ACTION,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function dummy_permissions_permission() {
  $permissions = variable_get('dummy_permissions', array());

  $permissions['administer dummy permissions'] = array(
    'title' => t('Administer Dummy Permissions'),
    'description' => t('Allow the user to create and edit Dummy Permissions.'),
    'restrict access' => TRUE,
  );

  return $permissions;
}

/**
 * Form constructor for the list of all Dummy Permissions.
 *
 * @see dummy_permissions_list_form_sumbit()
 * @see dummy_permissions_menu()
 *
 * @ingroup forms
 */
function dummy_permissions_list_form() {
  $raw_permissions = variable_get("dummy_permissions", array());
  $permissions = array();

  foreach ($raw_permissions as $machine_name => $raw_permission) {
    $permission = array(
      'title' => check_plain($raw_permission['title']),
      'description' => check_plain($raw_permission['description']),
      'machine_name' => $machine_name,
      'restrict_access' => $raw_permission['restrict access'] ? "Yes" : "No",
      'warning' => check_plain($raw_permission['warning']),
    );
    $permissions[$machine_name] = $permission;
  }

  $form['list'] = array(
    '#type' => 'tableselect',
    '#header' => array(
      'title' => t("Name"),
      'description' => t("Description"),
      'machine_name' => t("Machine Name"),
      'restrict_access' => t("Trusted Users Only"),
      'warning' => t("Trusted Users Message"),
    ),
    '#options' => $permissions,
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Delete Selected Permissions'));
  return $form;
}

/**
 * Form submission handler for dummy_permissions_list_form().
 *
 * @see dummy_permissions_list_form()
 */
function dummy_permissions_list_form_submit($form, &$form_state) {
  $items = $form_state['values']['list'];
  $permissions = variable_get('dummy_permissions', array());
  foreach ($items as $item) {
    unset($permissions[$item]);
  }
  variable_set('dummy_permissions', $permissions);
}

/**
 * Form constructor for the dummy permission add form.
 *
 * @see dummy_permissions_add_form_sumbit()
 * @see dummy_permissions_add_form_validate()
 * @see dummy_permissions_menu()
 *
 * @ingroup forms
 */
function dummy_permissions_add_form() {
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#required' => TRUE,
  );
  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
  );
  $form['machine_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Machine Name'),
    '#description' => t('Lowercase letters and spaces.'),
    '#required' => TRUE,
  );
  $form['restrict_access'] = array(
    '#type' => 'checkbox',
    '#title' => t('Trusted Users Only'),
  );
  $form['warning'] = array(
    '#type' => 'textfield',
    '#title' => t('Trusted Users Only Warning'),
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));

  return $form;
}

/**
 * Form validation handler for dummy_permissions_add_form().
 *
 * @see dummy_permissions_add_form()
 * @see dummy_permissions_add_form_submit()
 */
function dummy_permissions_add_form_validate($form, &$form_state) {
  if (preg_match("/[^a-z ]+/", $form_state['values']['machine_name'])) {
    $error = t("The machine name must contain only lowercase letters and spaces");
    form_set_error("machine_name", $error);
  }
}

/**
 * Form submission handler for dummy_permissions_add_form().
 *
 * @see dummy_permissions_add_form()
 * @see dummy_permissions_add_form_validate();
 */
function dummy_permissions_add_form_submit($form, &$form_state) {
  drupal_set_message(t("Saved"));
  $perms = variable_get('dummy_permissions', array());
  extract($form_state['values']);
  $perms[$machine_name] = array(
    'title' => $title,
    'description' => $description,
    'restrict access' => $restrict_access,
    'warning' => $warning,
  );
  variable_set('dummy_permissions', $perms);
  $admin_role = variable_get("user_admin_role");
  if (isset($admin_role)) {
    user_role_grant_permissions($admin_role, array($machine_name));
  }
}
