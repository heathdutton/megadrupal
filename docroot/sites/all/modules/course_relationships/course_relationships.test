<?php

require_once drupal_get_path('module', 'course') . '/tests/CourseTestCase.test';

/**
 * Tests for quiz Course objects.
 */
class CourseRelationshipsTestCase extends CourseTestCase {

  public static function getInfo() {
    // Note that getInfo() strings are not translated with t().
    return array(
      'name' => 'Course relationships',
      'description' => 'Ensure that course relationships function properly.',
      'group' => 'Course relationships',
    );
  }

  function getModules() {
    $modules = parent::getModules();
    $modules[] = 'course';
    $modules[] = 'course_test';
    $modules[] = 'uc_store';
    $modules[] = 'uc_order';
    $modules[] = 'uc_product';
    $modules[] = 'uc_cart';
    $modules[] = 'course_uc';
    $modules[] = 'course_relationships';

    return $modules;
  }

  function setUp() {
    parent::setUp();

    $this->course_admin = $this->drupalCreateUser(array('administer nodes'));
  }

  function testCourseRelationshipsFulfillment() {
    $this->drupalLogin($this->course_admin);
    $account = $this->drupalCreateUser();

    // Create a course with a course inside of it.
    $parent_courseNode = $this->createCourseNode();
    $co1 = course_get_course_object('course_relationships', 'course');
    $co1->setCourse($parent_courseNode->nid);
    $co1->save();
    $this->assertTrue($co1->getInstanceId() > 0, 'Course node created on course object save.');

    $child_courseNode = node_load($co1->getInstanceId());
    $this->assertTrue($child_courseNode->type == 'course', 'Course node is a course.');

    // Add a test object to the child course.
    $c1_co1 = course_get_course_object('course_test', 'course_test_object');
    $c1_co1->setCourse($child_courseNode->nid);
    $c1_co1->save();
    $child_course = course_get_course($child_courseNode, $account);

    // Fail the child course.
    course_enroll($parent_courseNode, $account);
    course_enroll($child_courseNode, $account);
    // Visit course 1 course object 1.
    $c1_co1->take();

    // Reload parent course because something happened in the DB.
    $course = course_get_course($parent_courseNode, $account, TRUE);
    $this->assertFalse($course->getTracker()->getOption('complete'), 'Check that parent course fulfillment is not complete.');

    // Pass the child course.
    // Set course 1 course object 1 to complete.
    $c1_co1 = reset($child_course->getObjects());
    $c1_co1->getFulfillment()->setComplete(1)->save();

    // Reload parent course because something happened in the DB.
    $course = course_get_course($parent_courseNode, $account, TRUE);
    $this->assertTrue($course->getTracker()->getOption('complete'), 'Check that parent course fulfillment is complete.');
  }

  /**
   * Test course relationships enrollment restrictions.
   */
  function testCourseRelationshipsEnrollOptions() {
    $this->drupalLogin($this->course_admin);
    $account = $this->drupalCreateUser();

    // Create a course with 2 courses inside of it with 1 course object each.
    $parent_courseNode = $this->createCourseNode();
    $parent_courseNode->course['outline'] = 'relationships';
    node_save($parent_courseNode);

    // Course 1
    $c_co1 = course_get_course_object('course_relationships', 'course');
    $c_co1->setCourse($parent_courseNode->nid);
    $c_co1->save();
    $course1 = node_load($c_co1->getInstanceId());

    // Parent only
    $parent_courseNode->course['relationships']['enroll_options'] = 'parent';
    node_save($parent_courseNode);
    node_load($parent_courseNode->nid, NULL, TRUE);

    $result = course_enroll_access($parent_courseNode, $account, TRUE);
    $result2 = course_enroll_access($course1, $account, TRUE);
    $this->assertTrue($result['success'], 'Parent: User can enroll in parent');
    $this->assertFalse($result2['success'], 'Parent: User cannot enroll in children');

    // Children only
    $parent_courseNode->course['relationships']['enroll_options'] = 'children';
    node_save($parent_courseNode);
    node_load($parent_courseNode->nid, NULL, TRUE);

    $result = course_enroll_access($parent_courseNode, $account, TRUE);
    $result2 = course_enroll_access($course1, $account, TRUE);
    $this->assertFalse($result['success'], 'Children: User cannot enroll in parent');
    $this->assertTrue($result2['success'], 'Children: User can enroll in children');

    // Parent or children
    $parent_courseNode->course['relationships']['enroll_options'] = 'both';
    node_save($parent_courseNode);
    node_load($parent_courseNode->nid, NULL, TRUE);

    $result = course_enroll_access($parent_courseNode, $account, TRUE);
    $result2 = course_enroll_access($course1, $account, TRUE);
    $this->assertTrue($result['success'], 'Both: User can enroll in parent');
    $this->assertTrue($result2['success'], 'Both: User can enroll in children');
  }

  /**
   * Test auto enrollment capabilities when user is fully enrolled in parent.
   */
  function testCourseRelationshipsAutoEnroll() {
    $this->drupalLogin($this->course_admin);
    $account = $this->drupalCreateUser();

    // Create a course with 2 courses inside of it with 1 course object each.
    $parent_courseNode = $this->createCourseNode();
    // Set to parent-only
    $parent_courseNode->course['outline'] = 'relationships';
    $parent_courseNode->course['relationships']['auto_enroll'] = 1;
    $parent_courseNode->course['relationships']['enroll_options'] = 'parent';
    node_save($parent_courseNode);

    // Course 1
    $c_co1 = course_get_course_object('course_relationships', 'course');
    $c_co1->setCourse($parent_courseNode->nid);
    $c_co1->save();
    $course1 = node_load($c_co1->getInstanceId());

    // Course 2
    $c_co2 = course_get_course_object('course_relationships', 'course');
    $c_co2->setCourse($parent_courseNode->nid);
    $c_co2->save();
    $course2 = node_load($c_co2->getInstanceId());

    // Enroll user in parent (bypassing restrictions).
    course_enroll($parent_courseNode, $account);

    $enrollment = course_enrollment_load($course1, $account);
    $this->assertTrue($enrollment->eid, 'User enrolled into course 1');
    $enrollment = course_enrollment_load($course2, $account);
    $this->assertTrue($enrollment->eid, 'User enrolled into course 2');

    // Course 3
    $c_co3 = course_get_course_object('course_relationships', 'course');
    $c_co3->setCourse($parent_courseNode->nid);
    $c_co3->save();
    $course3 = node_load($c_co3->getInstanceId());

    // Run cron and check if user gets enrolled in new course afterwards.
    course_relationships_cron();
    $enrollment = course_enrollment_load($course3, $account);
    $this->assertTrue($enrollment->eid, 'User enrolled into course 3');

    // Change enrollment status of user in parent
    $enrollment = course_enrollment_load($parent_courseNode, $account);
    $enrollment->status = 0;
    course_enrollment_save($enrollment);

    // Course 4
    $c_co4 = course_get_course_object('course_relationships', 'course');
    $c_co4->setCourse($parent_courseNode->nid);
    $c_co4->save();
    $course4 = node_load($c_co4->getInstanceId());

    // Run cron, make sure user is not in course afterwards.
    course_relationships_cron();
    $enrollment = course_enrollment_load($course4, $account);
    $this->assertFalse($enrollment, 'User not enrolled into course 4');
  }

  /**
   * Test integration with ubercart.
   */
  function testCourseRelationshipsUbercart() {
    module_load_include('inc', 'uc_product', 'uc_product.admin');

    // Mark our course_test content type as a product.
    $form = array();
    $form_state = array();
    $form_state['values']['name'] = 'course';
    $form_state['values']['description'] = 'course';
    $form_state['values']['pcid'] = 'course';
    $form['pcid']['#type'] = 'textfield';
    uc_product_class_form_submit($form, $form_state);

    // Create a course with 2 courses inside of it with 1 course object each.
    $parent_courseNode = $node = $this->drupalCreateNode(array(
      'title' => 'CR Parent',
      'type' => 'course',
      'unique_hash' => uniqid(),
    ));
    // Set to parent-only
    $parent_courseNode->course['relationships']['auto_enroll'] = 1;
    $parent_courseNode->course['relationships']['enroll_options'] = 'parent';
    $parent_courseNode->course['outline'] = 'relationships';
    $parent_courseNode->sell_price = 50;
    node_save($parent_courseNode);

    // Course 1 - paid
    $c_co1 = course_get_course_object('course_relationships', 'course');
    $c_co1->setOption('required', FALSE);
    $c_co1->setCourse($parent_courseNode->nid);
    $c_co1->save();
    $course1 = node_load($c_co1->getInstanceId());
    $course1->sell_price = 25;
    $course1->title = "Course 1 - Pay";
    node_save($course1);

    // Course 2 - free
    $c_co2 = course_get_course_object('course_relationships', 'course');
    $c_co1->setOption('required', FALSE);
    $c_co2->setCourse($parent_courseNode->nid);
    $c_co2->save();
    $course2 = node_load($c_co2->getInstanceId());

    // Check that course P is purchaseable and not enrollable (parent)
    $account1 = $this->drupalCreateUser();
    $this->drupalLogin($account1);
    $this->drupalGet("node/$parent_courseNode->nid");
    $this->assertText(t('You must purchase this course.'));
    $this->drupalPost(NULL, array(), t('Add to cart'));
    $this->assertText('CR Parent added to your shopping cart');

    // Check that course 2 is not enrollable even though it is free.
    $account2 = $this->drupalCreateUser();
    $this->drupalLogin($account2);
    $this->drupalGet("node/$course2->nid");
    $this->assertText('You must enroll in');

    // Set to a la carte
    $parent_courseNode->course['relationships']['enroll_options'] = 'both';
    $parent_courseNode->course['outline'] = 'relationships';
    $parent_courseNode->sell_price = 50;
    node_save($parent_courseNode);
    $this->drupalGet("node/$parent_courseNode->nid");
    $this->drupalPost(NULL, array(
      'activities[2]' => 2,
      'activities[3]' => 3,
      ), 'Enroll');
    $this->assertText('$25.00', 'Course 1 price shows on cart page');
    // Check that parent did not make it in
    $this->assertNoText('CR Parent');
    $this->assertNoText('$50.00');
    // Check that node view is updated
    $this->drupalGet("node/$parent_courseNode->nid");
    $this->assertText('(in cart)', 'Course 1 was added to cart');
    $this->assertText('(Complete)', 'User was enrolled in course 2');

    // Check that adding the parent removes everything else from the cart.
    $this->drupalGet("node/$parent_courseNode->nid");
    $this->drupalPost(NULL, array(
      'parent' => 1,
      ), 'Enroll', array(), array(), 'course-relationships-build-form');
    $this->assertText('Items have been removed from your cart because you are purchasing a set.');
    $this->assertText('CR Parent');
    $this->assertText('$50.00');
    $this->assertNoText('Course 1 - Pay');
    $this->assertNoText('$25.00');
  }

  /**
   * Test user select enrollment capabilities when user is fully enrolled in parent.
   */
  function testCourseRelationshipsNoAutoEnroll() {
    $this->drupalLogin($this->course_admin);
    $account = $this->drupalCreateUser();

    // Create a course with 2 courses inside of it with 1 course object each.
    $parent_courseNode = $this->createCourseNode();
    // Set to parent-only
    $parent_courseNode->course['outline'] = 'relationships';
    $parent_courseNode->course['relationships']['auto_enroll'] = 0;
    $parent_courseNode->course['relationships']['enroll_options'] = 'parent';
    node_save($parent_courseNode);

    // Course 1
    $c_co1 = course_get_course_object('course_relationships', 'course');
    $c_co1->setCourse($parent_courseNode->nid);
    $c_co1->save();
    $course1 = node_load($c_co1->getInstanceId());

    // Course 2
    $c_co2 = course_get_course_object('course_relationships', 'course');
    $c_co2->setCourse($parent_courseNode->nid);
    $c_co2->save();
    $course2 = node_load($c_co2->getInstanceId());

    // Enroll user in parent (bypassing restrictions).
    course_enroll($parent_courseNode, $account);

    $enrollment = course_enrollment_load($course1, $account);
    $this->assertFalse($enrollment, 'User not enrolled into course 1.');
    $enrollment = course_enrollment_load($course2, $account);
    $this->assertFalse($enrollment, 'User not enrolled into course 2.');

    // Course 3
    $c_co3 = course_get_course_object('course_relationships', 'course');
    $c_co3->setCourse($parent_courseNode->nid);
    $c_co3->save();
    $course3 = node_load($c_co3->getInstanceId());

    // Run cron and check if user gets enrolled in new course afterwards.
    course_relationships_cron();
    $enrollment = course_enrollment_load($course3, $account);
    $this->assertFalse($enrollment, 'User not enrolled into course 3');

    $result = course_enroll_access($course1, $account, TRUE);
    $this->assertTrue($result['success'], 'User can enroll into course 1.');
  }

}
