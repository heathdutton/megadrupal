<?php

/**
 * Implements field hook_field_info().
 */
function aggregated_field_field_info() {
  return array(
    'aggregated' => array(
      'label' => t('Aggregated'),
      'description' => t('Aggregates values of other field into one value.'),
      'settings' => array(
        'origin_field' => '',
        'aggregator' => 'first',
      ),
      'default_widget' => 'hidden',
      'default_formatter' => 'aggregated_field_plain',
      'property_callbacks' => array('aggregated_field_entity_property_callback'),
    ),
  );
}

/**
 * Callback to setup Entity API's field properties.
 */
function aggregated_field_entity_property_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $field_name = $field['field_name'];
  $bundle = $instance['bundle'];
  $settings = $field['settings'];

  if (!empty($settings['origin_field'])) {
    $origin_field = field_info_field($settings['origin_field']);
    if ($origin_field) {
      $origin_field_name = $origin_field['field_name'];
      $origin_field_type = field_info_field_types($origin_field['type']);

      if ($origin_field_type) {
        $callbacks = array();
        if (is_array($origin_field_type['property_callbacks'])) {
          $callbacks = $origin_field_type['property_callbacks'];
        }
        array_unshift($callbacks, 'entity_metadata_field_default_property_callback');
        $origin_instance = field_info_instance($entity_type, $origin_field_name, $bundle);

        if ($origin_instance && empty($origin_instance['deleted'])) {
          $origin_info = array();
          $origin_info[$entity_type]['bundles'][$bundle]['properties'][$origin_field_name] = array();
          foreach ($callbacks as $callback) {
            $callback($origin_info, $entity_type, $origin_field, $origin_instance, $origin_field_type);
          }
          $info[$entity_type]['bundles'][$bundle]['properties'][$field_name] = $origin_info[$entity_type]['bundles'][$bundle]['properties'][$origin_field_name];
        }
      }
    }
  }

  // Make the property read only.
  if (isset($info[$entity_type]['bundles'][$bundle]['properties'][$field_name])) {
    unset($info[$entity_type]['bundles'][$bundle]['properties'][$field_name]['setter callback']);
  }
}

/**
 * Implements of hook_field_settings_form().
 */
function aggregated_field_field_settings_form($field, $instance, $has_data) {
  $form = array();
  $settings = $field['settings'];
  $custom_function_name = 'aggregated_field_' . $field['field_name'] . '_compute';

  $field_options = array();
  foreach (field_info_instances($instance['entity_type'], $instance['bundle']) as $other_instance) {
    $other_field = field_info_field($other_instance['field_name']);
    if (empty($other_field)) {
      continue;
    }
    $name = $other_field['field_name'];
    if (($other_field['type'] === 'aggregated') || ($name === $field['field_name']) || (!empty($other_instance['deleted'])) || (!empty($other_field['deleted']))) {
      continue;
    }
    $field_options[$name] = $other_instance['label'];
  }

  $aggregator_options = array(
    'first' => t('First item of the field'),
    'last' => t('Last item of the field'),
    'min' => t('Minimum item of the field'),
    'max' => t('Maximum item of the field'),
    'custom' => t('Computed by the custom function'),
  );

  $form['origin_field'] = array(
    '#type' => 'select',
    '#title' => t('Origin field'),
    '#description' => t('The field which values will be aggregated into one value of the current field.'),
    '#default_value' => !empty($settings['origin_field']) ? $settings['origin_field'] : '',
    '#options' => $field_options,
    '#required' => TRUE,
    '#disabled' => $has_data,
    '#element_validate' => array('aggregated_field_field_settings_form_origin_validate'),
  );

  if ($has_data) {
    $form['origin_field_help'] = array(
      '#type' => 'item',
      '#markup' => t('This field currently has stored data, origin field modification is not allowed.'),
    );
  }

  $form['aggregator'] = array(
    '#type' => 'select',
    '#title' => t('The result of aggregation'),
    '#default_value' => !empty($settings['aggregator']) ? $settings['aggregator'] : '',
    '#options' => $aggregator_options,
    '#required' => TRUE,
  );

  $aggregator_help = t('The custom function must have exactly this name and signature:') . ' ' .
    $custom_function_name . '($entity_type, $entity, $field, $instance, $langcode, $items)<br />' .
    t('Function must return one value of the field, for example:') . '<br />' .
    'function ' . $custom_function_name . '($entity_type, $entity, $field, $instance, $langcode, $items) {return array("value" => 1);}';

  if (function_exists($custom_function_name)) {
    $aggregator_help .= '<br />' . t('Function @function_name() exists and can be used.', array('@function_name' => $custom_function_name));
  }

  $form['aggregator_help'] = array(
    '#type' => 'item',
    '#markup' => $aggregator_help,
    '#states' => array(
      'visible' => array(
        ":input[name='field[settings][aggregator]']" => array('value' => 'custom'),
      ),
    ),
  );

  $form['aggregator_rebuild'] = array(
    '#type' => 'submit',
    '#value' => t('Rebuild field values'),
    '#submit' => array('aggregated_field_field_settings_rebuild_submit'),
    '#limit_validation_errors' => array(),
    '#states' => array(
      'visible' => array(
        ":input[name='field[settings][origin_field]']" => array('value' => !empty($settings['origin_field']) ? check_plain($settings['origin_field']) : ''),
        ":input[name='field[settings][aggregator]']" => array('value' => !empty($settings['aggregator']) ? check_plain($settings['aggregator']) : ''),
      ),
    ),
  );

  return $form;
}

/**
 * Additional validation for the field settings form.
 */
function aggregated_field_field_settings_form_origin_validate($element, &$form_state, $form) {
  if (isset($form_state['values']['field'])) {
    // Avoid core bug of index merging, see https://www.drupal.org/node/2342731.
    $form_state['values']['field']['indexes'] = array();
  }
}

/**
 * Submit handler for 'Rebuild field values' button.
 */
function aggregated_field_field_settings_rebuild_submit($form, &$form_state) {
  if (empty($form_state['complete form']['#field']['field_name'])) {
    drupal_set_message(t('Incorrect form data.'), 'error');
    return;
  }
  aggregated_field_rebuild_values($form_state['complete form']['#field']['field_name']);
}

/**
 * Implements field hook_field_update_forbid().
 */
function aggregated_field_field_update_forbid($field, $prior_field, $has_data) {
  if (($field['type'] === 'aggregated') && ($field['cardinality'] != 1)) {
    throw new FieldUpdateForbiddenException('Cardinality of aggregated field must equal 1');
  }
}

/**
 * Implements field hook_field_insert().
 */
function aggregated_field_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  aggregated_field_compute_value($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements field hook_field_update().
 */
function aggregated_field_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  aggregated_field_compute_value($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements field hook_field_widget_info().
 */
function aggregated_field_field_widget_info() {
  return array(
    'hidden' => array(
      'label' => t('Hidden'),
      'field types' => array('aggregated'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements field hook_field_widget_form().
 */

function aggregated_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  return array();
}

/**
 * Implements hook_field_formatter_info().
 */
function aggregated_field_field_formatter_info() {
  return array(
    'aggregated_field_origin' => array(
      'label' => t('Original'),
      'description' => t('Formatter of the original field'),
      'field types' => array('aggregated'),
    ),
  );
}

/**
 * Returns function name from the original field module.
 */
function aggregated_field_get_origin_field_function($field, $function_name) {
  $settings = $field['settings'];
  if (!empty($settings['origin_field'])) {
    $origin_field = field_info_field($settings['origin_field']);
    if ($origin_field) {
      $function = $origin_field['module'] . '_' . $function_name;
      if (function_exists($function)) {
        return $function;
      }
    }
  }

  return NULL;
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function aggregated_field_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  $function = aggregated_field_get_origin_field_function($field, 'field_formatter_prepare_view');
  if ($function) {
    $function($entity_type, $entities, $field, $instances, $langcode, $items, $displays);
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function aggregated_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $function = aggregated_field_get_origin_field_function($field, 'field_formatter_view');
  return $function ? $function($entity_type, $entity, $field, $instance, $langcode, $items, $display) : array();
}

/**
 * Implements field hook_field_is_empty().
 */
function aggregated_field_field_is_empty($item, $field) {
  $function = aggregated_field_get_origin_field_function($field, 'field_is_empty');
  return $function ? $function($item, $field) : TRUE;
}

/**
 * Private function to compute the fields value.
 */
function aggregated_field_compute_value($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $items = array();

  $settings = $field['settings'];
  if (empty($settings['origin_field'])) {
    return;
  }

  $origin_field = $settings['origin_field'];
  if (isset($entity->{$origin_field}[$langcode])) {
    $items = $entity->{$origin_field}[$langcode];
  }

  if ((!is_array($items)) || (empty($items))) {
    return;
  }

  switch ($settings['aggregator']) {
    case 'first':
      $items = array(array_shift($items));
      break;

    case 'last':
      $items = array(array_pop($items));
      break;

    case 'min':
      aggregated_field_sort_items($items, $origin_field);
      $items = array(array_shift($items));
      break;

    case 'max':
      aggregated_field_sort_items($items, $origin_field);
      $items = array(array_pop($items));
      break;

    case 'custom':
      $custom_function_name = 'aggregated_field_' . $field['field_name'] . '_compute';
      if (function_exists($custom_function_name)) {
        $items = array($custom_function_name($entity_type, $entity, $field, $instance, $langcode, $items));
      }
      else {
        $items = array();
      }
      break;

    default:
      $items = array();
  }
}

/**
 * Batch operation definitions for rebuilding field values.
 */
function aggregated_field_rebuild_values($field_name) {
  $info = field_info_field($field_name);
  if (empty($info)) {
    return;
  }

  $operations = array();

  foreach ($info['bundles'] as $entity_type => $bundles) {
    foreach ($bundles as $bundle) {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', $entity_type);
      $query->entityCondition('bundle', $bundle);
      $entities = $query->execute();
      if (!empty($entities[$entity_type])) {
        $id_parts = array_chunk(array_keys($entities[$entity_type]), 20);
        foreach ($id_parts as $id_part) {
          $operations[] = array('aggregated_field_rebuild_values_operation', array($entity_type, $id_part));
        }
      }
    }
  }

  if (empty($operations)) {
    return;
  }

  $batch = array(
    'operations' => $operations,
    'finished' => 'aggregated_field_rebuild_values_finished',
  );

  batch_set($batch);
}

/**
 * Batch operation handler.
 */
function aggregated_field_rebuild_values_operation($entity_type, $ids, &$context) {
  $entities = entity_load($entity_type, $ids);
  foreach ($entities as $entity) {
    $info = entity_get_info($entity_type);
    if (method_exists($entity, 'save')) {
      $entity->save();
      continue;
    }
    elseif (isset($info['save callback'])) {
      $info['save callback']($entity);
      continue;
    }
    elseif (in_array('EntityAPIControllerInterface', class_implements($info['controller class']))) {
      entity_get_controller($entity_type)->save($entity);
      continue;
    }
  }
}

/**
 * Batch finish handler.
 */
function aggregated_field_rebuild_values_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Field values are rebuilt.'));
  }
  else {
    drupal_set_message(t('Error during rebuilding field values.'), 'error');
  }
}

/**
 * Sorts field items naturally.
 */
function aggregated_field_sort_items(&$items, $field_name) {
  $field = field_info_field($field_name);
  if (empty($field)) {
    return;
  }

  $comparator = '';

  if (isset($field['columns']['value'])) {
    $comparator = 'field_sort_items_compare_value';
  }
  elseif ($field['type'] === ' taxonomy_term_reference') {
    $comparator = 'field_sort_items_compare_term';
  }
  elseif ($field['type'] === 'entityreference') {
    $comparator = 'field_sort_items_compare_entityreference';
    // Configure comparator with field information.
    $comparator(NULL, NULL, $field);
  }

  if (!empty($comparator)) {
    usort($items, $comparator);
  }
}

/**
 * Common field comparator form field having 'value' column.
 */
function field_sort_items_compare_value($a, $b) {
  $a = $a['value'];
  $b = $b['value'];

  return ($a < $b ? -1 : ($a > $b ? 1 : 0));
}

/**
 * Taxonomy term comparator.
 */
function field_sort_items_compare_term($a, $b) {
  $a = taxonomy_term_load($a['tid']);
  $b = taxonomy_term_load($b['tid']);
  if ($a) {
    $a = $a->name;
  }
  if ($b) {
    $b = $b->name;
  }

  return ($a < $b ? -1 : ($a > $b ? 1 : 0));
}

/**
 * Entity reference field comparator.
 */
function field_sort_items_compare_entityreference($a, $b, $field = NULL) {
  static $entity_type = NULL;

  if (!is_null($field)) {
    $entity_type = $field['settings']['target_type'];
    return 0;
  }

  if (empty($entity_type)) {
    return 0;
  }

  $a = $a['target_id'];
  $b = $b['target_id'];
  $entities = entity_load($entity_type, array($a, $b));
  $a = isset($entities[$a]) ? entity_label($entity_type, $entities[$a]) : NULL;
  $b = isset($entities[$b]) ? entity_label($entity_type, $entities[$b]) : NULL;

  return ($a < $b ? -1 : ($a > $b ? 1 : 0));
}
