<?php

/**
 * @file
 * Defines a shipping rate by postcode and weight range.
 */

/**
 * Implements hook_menu().
 */
function commerce_shipping_postal_code_weight_menu() {
  $items = array();
  $items['admin/commerce/config/shipping/methods/postal-code-weight-shipping-method/edit'] = array(
    'title' => 'Edit',
    'description' => 'Adjust Postcode weight shipping settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_shipping_postal_code_weight_settings_form'),
    'access arguments' => array('administer shipping'),
    'file' => 'includes/commerce_shipping_postal_code_weight.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 0,
  );
  $items['admin/commerce/config/shipping/methods/postal-code-weight-shipping-method/edit/%'] = array(
    'title' => 'Edit',
    'description' => 'Adjust Postcode weight shipping settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_shipping_postal_code_weight_settings_matrix_form', 7),
    'access arguments' => array('administer shipping'),
    'file' => 'includes/commerce_shipping_postal_code_weight.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_commerce_shipping_method_info().
 */
function commerce_shipping_postal_code_weight_commerce_shipping_method_info() {
  $shipping_methods = array();

  $shipping_methods['postal_code_weight_shipping_method'] = array(
    'title' => t('Postcode weight shipping method'),
    'description' => t('Defines a shipping rate by postcode and weight range.'),
  );

  return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function commerce_shipping_postal_code_weight_commerce_shipping_service_info() {
  $shipping_services = array();

  $shipping_services['postal_code_weight_shipping_service'] = array(
    'title' => t('Postcode weight shipping service'),
    'description' => t('A shipping rate by postcode and weight range.'),
    'display_title' => t('Shipping'),
    'shipping_method' => 'postal_code_weight_shipping_method',
    'price_component' => 'shipping',
    'callbacks' => array(
      'rate' => 'commerce_shipping_postal_code_weight_service_rate',
    ),
  );

  return $shipping_services;
}

/**
 * Shipping service callback.
 */
function commerce_shipping_postal_code_weight_service_rate($shipping_service, $order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $field_name = commerce_physical_order_shipping_field_name($order);
  // Prepare the shipping address for use in the request.
  if (!empty($order_wrapper->{$field_name}->commerce_customer_address)) {
    $shipping_address = $order_wrapper->{$field_name}->commerce_customer_address->value();
  }
  else {
    $shipping_address = addressfield_default_values();
  }
  $postal = trim($shipping_address['postal_code']);
  $country_code = $shipping_address['country'];
  $weight = commerce_physical_order_weight($order, variable_get($country_code . '_unit', 'lb'));
  $weights = variable_get($country_code . '_weights', array(10, 20, 50));
  $postal_codes = variable_get($country_code . '_postal_codes', array());
  $rates = variable_get($country_code . '_rates', array());
  $i = 0;
  $j = 0;
  foreach ($postal_codes as $p) {
    foreach ($p as $postal_code) {
      if (stripos($postal, $postal_code) === 0) {
        $bool = TRUE;
        break;
      }
    }
    if (isset($bool)) {
      break;
    }
    $i++;
  }
  foreach ($weights as $w) {
    if ($weight['weight'] <= $w) {
      break;
    }
    $j++;
  }
  return array(
    'amount' => isset($rates[$country_code . '-' . $i . '-' . $j]) ? $rates[$country_code . '-' . $i . '-' . $j] : 0,
    'currency_code' => variable_get($country_code . '_currency_code', commerce_default_currency()),
    'data' => array(),
  );
}
