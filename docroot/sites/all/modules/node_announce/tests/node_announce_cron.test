<?php
/**
 * Basic sanity testing for node_announce
 */
require_once "node_announce_test_case.inc";

class NodeAnnounceCronTestCase extends NodeAnnounceTestCase {
  /**
   * User with rights to post SimpleTest Example content.
   */
  protected $privileged_user;

  /**
   * getInfo() returns properties that are displayed in the test selection form.
   */
  public static function getInfo() {
    return array(
      'name' => 'Node Announce Cron Test',
      'description' => 'Ensure that node_announce sends emails correctly',
      'group' => 'NodeAnnounce'
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('date_api', 'date_repeat', 'date', 'token',  'entity', 'entity_token', 'node_announce');

    // Create and log in our privileged user.
    $privs = array(
      'access content',
      'create event content',
      'edit any event content',
      'administer node announcements'
    );

    $this->drupalCreateContentType(array(
        'type' => 'event',
        'name' => 'Event',
      ));

    $this->privileged_user = $this->drupalCreateUser($privs);
    $this->drupalLogin($this->privileged_user);

    $this->drupalGet('user');

    $this->createDateField();

    $this->drupalCreateNode(array("title" => "Page 1"));
    $this->drupalCreateNode(array("title" => "Page 2"));

    $this->drupalCreateNode(array("title" => "Story 1", "type" => "story"));
    $this->drupalCreateNode(array("title" => "Story 2", "type" => "story"));

    $this->CreateEvent(array(
        "title" => "Event 1",
        "date" => date($this->format, time() + 24*60*60 * 5),
        "date_to" => date($this->format, time() + 24*60*60 * 5 + 60*60),
      ));
    $this->CreateEvent(array(
        "title" => "Event 2",
        "date" => date($this->format, time() + 24*60*60 * 7),
        "date_to" => date($this->format, time() + 24*60*60 * 7 + 60*60)
      ));

    $this->drupalGet("node/5");

    $this->CreateAnnounce(array(
        "name" => "Event Announce 1",
        "email_from" => "sean@dague.net",
        "email_to" => "sean@dague.net",
        "subject" => "[ANNOUNCE] [node:title]",
        "message" => "Test message one",
        "days_before" => "5",
        "date_field" => "event:field_date"
      ));

    $this->CreateAnnounce(array(
        "name" => "Event Announce 2",
        "email_from" => "sean@dague.net",
        "email_to" => "sean@dague.net",
        "subject" => "[ANNOUNCE] [node:title]",
        "message" => "Test message two",
        "days_before" => "9",
        "date_field" => "event:field_date"
      ));

  }

  public function _checkCronSend() {
    $this->cronRun();

    $this->assertMail("to", "sean@dague.net", "Testing for email name" . print_r(variable_get('drupal_test_email_collector', array()), TRUE) );
    $this->assertMail("from", "sean@dague.net", "Testing for email from");
    $this->assertMail("body", "Test message one\n", "Testing for email message");
    $this->assertMail("subject", "[ANNOUNCE] Event 1\n", "Testing for email subject");
  }

  public function _checkLog() {
    $this->drupalGet("admin/config/system/node_announce");
    $this->clickLink("Event Announce 1");
    $this->clickLink("Log");
    $this->assertText("Event 1");
  }



  public function testCronSend() {
    $this->_checkCronSend();
    $this->_checkLog();
  }
}