<?php
/**
 * @file
 *
 * This module allows admins to set recurrent announcements for nodes to send
 * to specified email addresses.
 */

/**
 * Implementation of hook_help()
 */
function node_announce_help($path, $arg) {
  $output = '';
  switch($path) {
    case 'admin/help#node_announce':
      $output =
        '<h2>' . t('About') . '</h2>' .
        t('Node Announce is designed to solve a problem I had. Most of my
community drupal sites are basically event listings. Clubs that have
one or two events going on every month. These organizations also have
discussion lists that are on some other site (yahoo, or a straight
mailman list). What I wanted was a way to automatically and regularly
sent out announcements for the events on our site.') .
        '<p>' .
        t('Thus became Node Announce.').
        '<h3>'. t('Usage') . '</h3>'.
        t('Once you have installed Node Announce you will need to create a <a href="admin/config/system/node_announce/add">new
announcement</a>.').
        '<p>'.
        t('You will then be creating an announcement for a Content Type, based on
a specific Date field that it has. The days before field is used to
send out the email announce aproximately that many days before (as set
by the user). This is aproximately as it runs as a drupal cron
task. Because of possible timing issues Node Announce will actually
send out an email sometime within the timeblock that is 24 hours
before and 24 hours prior to the ideal date/time.').
        '<p>'.
        t('Drupal Cron <b>must</b> be run at least daily for Node Announce to be reliable.').
        '<p>'.
        t('The announcement contains the from and to email address, as well as
subject and message fields that are tokenized. You can use any of the
standard tokens in either the subject or body.')
        ;
      break;
  }
  return $output;
}

/**
 * Implementation of hook_menu()
 */
function node_announce_menu() {
  $items = array();
  $items['admin/config/system/node_announce'] = array(
    'title' => 'Node Announcements',
    'description' => 'Configure node announcements',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_announce_form_list'),
    'access arguments' => array('administer node announcements'),
    'file' => 'node_announce.admin.inc',
  );

  $items['admin/config/system/node_announce/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  $items['admin/config/system/node_announce/add'] = array(
    'title' => 'Add Announcement',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_announce_form'),
    'access arguments' => array('administer node announcements'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'node_announce.admin.inc',
  );


  $items['admin/config/system/node_announce/%/edit'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_announce_form', 4),
    'access arguments' => array('administer node announcements'),
    'file' => 'node_announce.admin.inc',
  );

  $items['admin/config/system/node_announce/%/log'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Log',
    'page callback' => 'node_announce_view_log',
    'page arguments' => array(4),
    'access arguments' => array('administer node announcements'),
    'file' => 'node_announce.admin.inc',
  );

  $items['admin/config/system/node_announce/%'] = array(
    'title' => 'Preview Announcement',
    'page callback' => 'node_announce_preview',
    'page arguments' => array(4),
    'access arguments' => array('administer node announcements'),
    'file' => 'node_announce.admin.inc',
  );

  $items['admin/config/system/node_announce/%/preview'] = array(
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'title' => 'Preview',
    'page callback' => 'node_announce_preview',
    'page arguments' => array(4),
    'access arguments' => array('administer node announcements'),
    'file' => 'node_announce.admin.inc',
    'weight' => -1
  );

  $items['admin/config/system/node_announce/%/send'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Send',
    'page callback' => 'node_announce_send',
    'page arguments' => array(4),
    'access arguments' => array('administer node announcements'),
    'file' => 'node_announce.admin.inc',
  );


  return $items;
}


function node_announce_init() {
  drupal_add_css(drupal_get_path('module', 'node_announce') .'/css/node_announce.css');
  _node_announce_load_api();
}

/**
 * Implementation of hook_permission()
 */
function node_announce_permission() {
  return array('administer node announcements' => array(
      'title' => t('Administer Node Announcements'),
      'description' => t('Create / Edit / Remove Node Announcements.')
    )
  );
}


/**
 * Implementation of hook_nodeapi()
 */
function node_announce_node_delete($node) {
  node_announce_delete_records_by_nid($node->nid);
}

/**
 *  Implementation of hook_cron().
 *
 *  Go through all the announcements and set
 */
function node_announce_cron() {
  _node_announce_load_api();
  node_announce_process_announces();
}

function node_announce_theme() {
  $base = array(
    'path' => drupal_get_path('module', 'node_announce') . "/theme"
  );

  // TODO: get forms in here as well, though I was having an issue getting
  // them to take parameters as well as the form parameters
  $themes = array(
    'node_announce_list' => $base + array(
      'template' => 'node-announce-list',
      'variables' => array('announces' => array())
    ),
    'node_announce_preview' => $base + array(
      'template' => 'node-announce-preview',
      'variables' => array('announce' => NULL, 'node' => NULL)
    ),
    'node_announce_view_log' => $base + array(
      'template' => 'node-announce-view-log',
      'variables' => array('announce' => NULL, 'records' => array())
    ),
  );
  return $themes;
}



/***
 *
 */

function node_announce_process_announces() {
  // drupal_set_message("Running node_announce cron job");
  $announces = node_announce_list();

  // drupal_set_message("Got the following announces: " . print_r($announces, TRUE));

  foreach ($announces as $ann) {
    $nodes = node_announce_applicable_nodes($ann);

    // drupal_set_message("Announce " . $ann->id . " got the following nodes: " . print_r($nodes, TRUE));

    foreach ($nodes as $node) {
      if (! node_announce_already_announced($ann, $node)) {
        node_announce_send_announce($ann, $node);
        node_announce_record_send($ann->id, $node->nid);
      }
    }
  }
}

/***
 * node_announce_send_announce : send email announcement out
 *
 * We prefer mimemail if that exists, but will also use the basic drupal mail
 * infrastructure as a fall back.
 */

function node_announce_send_announce($ann, $node) {
  $params = array('announce' => $ann, 'node' => $node);
  $token = ($ann->email_token) ? $ann->email_token : "node_announce";
  $result = drupal_mail('node_announce', $token, $ann->email_to, language_default(), $params);
}

/**
 * node_announce_mail : implementation of hook_mail()
 *
 * This is only called if mimemail isn't installed
 */

function node_announce_mail($key, &$message, $params) {
  $node = $params['node'];
  $ann = $params['announce'];

  $to = token_replace($ann->email_to, array('node' => $node));
  $from = token_replace($ann->email_from, array('node' => $node));
  // TODO: we should validate to and from here

  $message['to'] = $to;
  $message['from'] = $from;
  # yes, this is stupid, but it's the only way to get from set correctly
  $message['headers']['From'] = $from;
  $message['headers']['Sender'] = $from;
  $message['headers']['Return-Path'] = $from;

  $message['subject'] = drupal_html_to_text(
    token_replace($ann->subject, array('node' => $node)));

  # this is not quite enough to make node_announce use html mail
  # you also need to set the mail system
  $message['body'][] = token_replace(
    $ann->message, array('node' => $node));
}

function node_announce_title_edit($id) {
  _node_announce_load_api();
  $ann = node_announce_load($id);
  return 'Edit Node Announce: ' . $ann->name;
}

function _node_announce_load_api() {
  require_once('./' . drupal_get_path('module', 'node_announce') . '/node_announce_api.inc');
}
