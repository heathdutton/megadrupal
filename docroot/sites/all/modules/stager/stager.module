<?php

/**
 * @file
 * Stager main functions.
 */

/**
 * Implements hook_permission().
 */
function stager_permission() {
  return array(
    'configure staging site' => array(
      'title' => t('Create and make changes an a staging site and sync those back to the live site.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function stager_menu() {

  $items['admin/config/system/stager'] = array(
    'title' => 'Stager',
    'description' => 'Manage your site in staged mode.',
    'page callback' => 'stager_state',
    'access arguments' => array('configure staging site'),
    'file' => 'stager.admin.inc',
  );

  $items['admin/config/system/stager/sync'] = array(
    'title' => 'Sync staging site to live site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stager_sync_staging_confirm'),
    'access arguments' => array('configure staging site'),
    'file' => 'stager.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/system/stager/remove'] = array(
    'title' => 'Remove staging site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stager_remove_staging_confirm'),
    'access arguments' => array('configure staging site'),
    'file' => 'stager.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['stager/action'] = array(
    'title' => 'Staging message',
    'description' => 'Sets a message depending on the 5th argument.',
    'page callback' => 'stager_action',
    'access arguments' => array('configure staging site'),
    'file' => 'stager.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['stager/mode'] = array(
    'title' => 'Got into a certain stager state',
    'description' => 'Got into a certain stager mode depending on the 6th and 7th argument',
    'page callback' => 'stager_switch_mode',
    'access arguments' => array('configure staging site'),
    'file' => 'stager.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_init()
 */
function stager_init() {
  // Hardening check to make sure the user has a cookie,
  // a session variable and the permission to work on the staging site.
  if (isset($_COOKIE['stager'])) {
    if (!stager_staging_access()) {
      stager_set_cookie(NULL, NULL, TRUE);
      drupal_goto('stager/action/illegal_access');
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function stager_page_alter(&$page) {
  if (stager_staging_access()) {
    drupal_add_css(drupal_get_path('module', 'stager') . '/stager.css');
    $stager_message = t('You are working on the staging version of your site called %title. All changes are not visible on the live version. <a href="!url">Click here to leave staging mode.</a>', array('%title' => $_COOKIE['stager'], '!url' => url('admin/config/system/stager')));
    $page['page_bottom']['stager'] = array(
      '#markup' => '<div id="stager">' . $stager_message . '</div>',
    );
  }
}

/**
 * Stager action callback.
 */
function stager_action($action = '') {
  $redirect = 'admin/config/system/stager';

  switch ($action) {

    case 'create_staging':
      drupal_flush_all_caches();
      $message = t('The staging site has been created and you can now make changes without affecting the live site.');
      break;

      case 'leave_staging':
      $message = t('You have left the staging version and are back on the live site.');
      break;

    case 'enter_staging':
      $message = t('You have entered the staging version. You can create changes without affecting the live site.');
      break;

    case 'illegal_access':
      $redirect = '<front>';
      stager_log('Illegal access to staging mode.', WATCHDOG_ALERT);
      break;
  }

  // Add the message.
  if (!empty($message)) {
    drupal_set_message($message);
  }

  // Redirect.
  drupal_goto($redirect);
}


/**
 * Perform a pre bootstrap function to find out if
 * we need to alter the prefix in the $databases array.
 */
function stager_pre_bootstrap() {
  if (stager_staging_access(FALSE)) {
    return $_COOKIE['stager'] . '_';
  }
  else {
    return '';
  }
}

/**
 * Load stager prefix from the database.
 *
 * @param $prefix
 *   A string representing a prefix.
 * @return $boolean
 *   TRUE or FALSE.
 */
function stager_prefix_load($prefix) {
  // We do not use curly braces because we need to check from the original table.
  return db_query('SELECT title, prefix FROM stager WHERE prefix = :prefix', array(':prefix' => $prefix))->fetchObject();
}

/**
 * Check if settings.php is altered so stager can work.
 */
function stager_is_installed() {
  $settings_file = file_get_contents(conf_path() . '/settings.php');
  $include = strpos($settings_file, "stager.module");
  $function = strpos($settings_file, "(function_exists('stager_pre_bootstrap')) ? stager_pre_bootstrap() :");
  return ($include !== FALSE && $function !== FALSE) ? TRUE : FALSE;
}

/**
 * Check if user has access to work in staging mode.
 *
 * @param $complete_check
 *   Whether to check with the session variable and permission.
 */
function stager_staging_access($complete_check = TRUE) {

  if ($complete_check) {
    return isset($_COOKIE['stager']) && stager_prefix_load($_COOKIE['stager']) && user_access('configure staging site');
  }

  return isset($_COOKIE['stager']);
}

/**
 * Helper function to log into the live watchdog.
 */
function stager_log($log, $severity = WATCHDOG_NOTICE) {
  $variables = array();
  watchdog('stager', $log, $variables, $severity);
}


/**
 * Set or remove a cookie.
 *
 * @param $value
 *   The value of the cookie
 * @param $cookie_string
 *   The name of the cookie.
 * @param $time
 *   How long the cookie should be valid.
 */
function stager_set_cookie($value = NULL, $cookie_string = 'stager', $time = 0) {

  if (is_null($value)) {
    $time = REQUEST_TIME - 3600;
  }

  setcookie($cookie_string, $value, $time, '/');
}

/**
 * Stager staging create function.
 */
function stager_staging_create($prefix) {

  if (empty($prefix)) {
    watchdog('stager', 'No prefix given to create a new site.');
    return;
  }

  $schema = drupal_get_schema();
  foreach ($schema as $name => $table) {

    // Create stager table.
    db_create_table($prefix . '_' . $name, $table);

    // Copy all data, except for all cache tables and watchdog.
    if (stager_sync_table_data($name)) {
      try  {
        $query = stager_copy_query($name, $prefix . '_' . $name, $table);
        db_query($query);
      }
      catch (Exception $e) {
		    drupal_set_message(t("Stager fail to sync data of table !table_name", array("!table_name" => $name)));
      }
    }
  }

  // Sync files directory.
  stager_sync_files_directory($prefix);
}

/**
 * Stager staging sync and or remove function.
 */
function stager_staging_sync_and_or_remove($prefix, $sync_changes = TRUE, $remove_staging = TRUE) {
  $count = 0;
  $tables = db_find_tables($prefix . '_%');
  $schema = drupal_get_schema();

  foreach ($tables as $table) {

    // Sync data if requested.
    if (stager_sync_table_data($table, TRUE) && $sync_changes) {
      $original = str_replace($prefix . '_', '', $table);
      db_query('TRUNCATE ' . $original);

      $query = stager_copy_query($table, $original, $schema[$original]);
      db_query($query);
    }

    // Drop tables if requested.
    if ($remove_staging && $table != 'stager') {
      db_drop_table($table);
      $count++;
    }
  }

  // Show confirmation messages.
  if ($count > 0 || $sync_changes) {
    if ($sync_changes) {
      drupal_set_message(t('Your staging site has been synced to the live site.'));
    }
    if ($remove_staging) {
      drupal_set_message(format_plural($count, 'Removed 1 stager table.', 'Removed @count stager tables.'));
    }
    drupal_flush_all_caches();
  }

  // Sync files.
  if ($sync_changes) {
    // Sync files directory.
    stager_sync_files_directory($prefix, 'staging_to_live');
  }

  // Empty stager directory if requested.
  if ($remove_staging) {
    file_unmanaged_delete_recursive('public://' . $prefix);
    $stager_directory = file_default_scheme() . '://' . $prefix;
    file_prepare_directory($stager_directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  }
}

/**
 * Sync the files directory.
 */
function stager_sync_files_directory($prefix, $direction = 'live_to_staging') {

  $ignore_folders = variable_get('stager_ignore_folders', array('css', 'js', 'ctools', 'styles'));
  $ignore_folders[] = $prefix; // Make sure we don't copy ourselves too.
  $file_path = variable_get('file_public_path', conf_path() . '/files');

  // Insert the file system path into site.
  db_merge(($direction == 'live_to_staging') ? 'stager_variable' : 'variable')
    ->key(array('name' => 'file_public_path'))
    ->fields(array('value' => serialize($file_path . ($direction == 'live_to_staging' ? '/' . $prefix : ''))))
    ->execute();

  // Copy the files.
  if ($direction == 'live_to_staging') {
    $src = $file_path;
    $dst = $file_path . '/' . $prefix;
  }
  else {
    $src = $file_path . '/' . $prefix;
    $dst = $file_path;
  }
  stager_recurse_copy($src, $dst, $ignore_folders);
}

/**
 * Recursive copy function.
 *
 * @param $src
 *   The source directory to copy from.
 * @param $dst
 *   The destination directory to copy to.
 * @param $ignore_folders
 *   Folder to ignore.
 */
function stager_recurse_copy($src, $dst, $ignore_folders) {
  $dir = opendir($src);
  if (!file_exists($dst)) {
    mkdir($dst);
  }

  while (FALSE !== ($file = readdir($dir))) {
    if ($file != '.' && $file != '..') {
      if (is_dir($src . '/' . $file)) {
        if (!in_array($file, $ignore_folders)) {
          stager_recurse_copy($src . '/' . $file, $dst . '/' . $file, $ignore_folders);
        }
        else {
          if (!file_exists($dst . '/' . $file)) {
            mkdir($dst . '/' . $file);
          }
        }
      }
      else {
        @copy($src . '/' . $file, $dst . '/' . $file);
      }
    }
  }
  closedir($dir);
}

/**
 * Generate query to sync data from two tables.
 *
 * @param $source_name
 *   Name of origin table.
 *
 * @param $destination_name
 *   Name of destination table.
 *
 * @param $table
 *   Table definition in accord with hook_schema() specification.
 *
 * @return string
 *   Query to execute.
 */
function stager_copy_query($source_name, $destination_name, $table) {
  $fields = array();
  foreach ($table['fields'] as $field => $data) {
    $fields[] = $field;
  }
  $fields = implode(', ', $fields);

  return "INSERT INTO $destination_name ($fields) SELECT $fields FROM $source_name";
}

/**
 * Get information about required sync of table data.
 *
 * @param $table_name:
 *    Table name to sync.
 *
 * @return bool:
 *    Return if table must or not sync.
 */
function stager_sync_table_data($table_name, $sync_back = FALSE) {

  // Exclude cache tables.
  if (strpos($table_name, 'cache') === 0) {
    return FALSE;
  }

  // No sync back data from specified tables.
  if ($sync_back && in_array($table_name, variable_get('stager_ignore_tables', array()))) {
    return FALSE;
  }

  // Other specific tables
  switch ($table_name) {
    case 'watchdog':
      return FALSE;
      break;

    default:
      return TRUE;
  }
}
