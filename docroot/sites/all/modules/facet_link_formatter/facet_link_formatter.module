<?php

/**
 * @file
 * Main file for Facet Link Formatter
 *
 * Create a formatter for EntityReference or Taxonomy Term Reference for render
 * entities or terms as links to a preselected facet list.
 */


/**
 * Implements hook_field_formatter_info().
 */
function facet_link_formatter_field_formatter_info() {
  $info = array(
    'facet_link' => array(
      'label' => t('Facet link'),
      'field types' => array('entityreference', 'taxonomy_term_reference'),
      'description' => t('Link to a list of contents with preselected facet.'),
      'settings' => array(
        'path' => 'search',
        'facet_field' => 'field',
      ),
    ),
  );
  return $info;
}

/**
 * Implements hook_field_formatter_view().
 */
function facet_link_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'facet_link':
      if (count($items) > 0) {
        foreach ($items as $delta => $item) {
        $url = $display['settings']['path'];
          $facet_field = $display['settings']['facet_field'];
          $url_options = array('query' => array('f[0]' => $facet_field . ':' . $item['object_id']));
          $result[$delta] = array('#markup' => l($item['name'], $url, $url_options));
      }
        return $result;
      }
      break;
  }
 
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function facet_link_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'facet_link':
      $form['path'] = array(
        '#type' => 'textfield',
        '#title' => t('List path'),
        '#description' => t('URL of contents list.'),
        '#default_value' => $settings['path'],
      );
      $form['facet_field'] = array(
        '#type' => 'textfield',
        '#title' => t('Facet field'),
        '#description' => t('Facet field to filter.'),
        '#default_value' => $settings['facet_field'],
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 * @return $summary
 */
function facet_link_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'facet_link':
      $summary = $settings['path'] . ' - ' . $settings['facet_field'];
      break;
  }
  return $summary;
}

/**
 * Implements hook_field_formatter_prepare_view().
 * Load object id and name
 */
function facet_link_formatter_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {

  $type = reset(array_keys($field['columns']));
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      if ($type == 'tid') {
        $object = taxonomy_term_load($item['tid']);
      } else {
        $object = reset(entity_load($field['settings']['target_type'], array($item['target_id'])));
      }
      $items[$id][$delta]['name'] = $object->name;
      $items[$id][$delta]['object_id'] = $item[$type];
    }
  }
}

