<?php

/**
 * @file
 * Bridge between Paragraph Panes & Location modules.
 */

/**
 * Implements hook_element_info_alter().
 *
 * Adds our validation function to the location element.
 */
function paragraph_panes_location_element_info_alter(&$type) {
  $type['location_element']['#element_validate'][] = 'paragraph_panes_location_validate';
}

/**
 * The validation callback function which was added to the location element.
 *
 * Adds the latitude & longitude to a location.
 * This is normally done by the Location module on save,
 * but since we do not save anything (we store it in the pane configuration),
 * we have to add it ourselves.
 */
function paragraph_panes_location_validate(&$element, &$form_state) {
  $location_element =& drupal_array_get_nested_value($form_state['values'], $element['#parents']);
  _location_geo_logic($location_element, array(), NULL, FALSE, TRUE);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds our submit handler.
 */
function paragraph_panes_location_form_paragraph_panes_edit_form_alter(&$form, &$form_state, $form_id) {
  array_unshift($form['#submit'], 'paragraph_panes_location_submit');

  if (module_exists('gmap')) {
    // Attach the JS needed to show a gmap. The AJAX request to add a paragraph
    // pane with a location element as one of the field will otherwise not work,
    // since it will call the function google(), which wouldn't exist.
    include_once drupal_get_path('module', 'gmap') . '/lib/Drupal/gmap/GmapDefaults.php';
    $form['#attached'] = array_merge($form['##attached'], array(
        '#attached' => array('js' => Drupal\gmap\GmapDefaults::getInstance()->getBaseJs()),
      )
    );
  }
}

/**
 * The submit handler callback for a paragraph pane edit form.
 *
 * Adds in_preview on a ParagraphsItemEntity which contains a location element
 * field. This is needed because the Location CCK module will only complete the
 * renderable array in location_cck_field_formatter_view() if this is set.
 */
function paragraph_panes_location_submit($form, &$form_state) {
  $location_elements = paragraph_panes_location_get_location_elements($form);

  foreach ($location_elements as $element_parents) {
    array_unshift($element_parents, 'values');
    while (count($element_parents) > 1) {
      // Fetch the deepest child indicated by the parents array.
      $parent = drupal_array_get_nested_value($form_state, $element_parents);

      // Check if this element is the parent element which contains a reference
      // to the entity.
      if (in_array('entity', element_children($parent), TRUE)) {
        $parent['entity']->in_preview = TRUE;
        break;
      }
      else {
        // Try a level higher in the parent structure.
        array_pop($element_parents);
      }
    }
  }
}

/**
 * Finds the location elements in a structured form array.
 *
 * @param array $element
 *   The structured element (form) array.
 *
 * @return array
 *   An array containing for each location element the parents array where the
 *   element can be found.
 */
function paragraph_panes_location_get_location_elements(array $element) {
  $location_elements = array();
  foreach (element_children($element) as $key) {
    $element_child = $element[$key];
    if ($element_child['#type'] == 'location_element') {
      $location_elements[] = $element_child['#parents'];
    }
    else {
      $location_elements = array_merge($location_elements, paragraph_panes_location_get_location_elements($element_child));
    }
  }

  return $location_elements;
}
