<?php

/*
 * implements hook_form_FORM_ID_alter
 * adds a section to the user profile form for the user to choose who can control this account.
 * overrides the section created by masquerade_form_user_profile_form_alter
 */
function masquerade_nominate_form_user_profile_form_alter(&$form, $form_state) {
  if ($form['#user']->uid > 1 && $form['#user_category'] == 'account') {
    $masquerade_controllers = array();
    $nominees = user_load_multiple(masquerade_get_nominees($form['#user']->uid));
    foreach ($nominees as $uid => $account) {
      $masquerade_controllers[] = $account->name;
    }
    //this overwrites what the masquerade module provides
    $form['nominees'] = array(
      '#type' => 'fieldset',
      '#title' => t('Account controller(s)'),
      '#description' => t('Nominate users who can control this account.'),
      'masquerade_controllers' => array(
        '#title' => t('Other users'),
        '#type' => 'textfield',
        '#autocomplete_path' => 'masquerade/autocomplete-user',//from the masquerade module
        '#default_value' => drupal_implode_tags($masquerade_controllers),
      )
    );
  }
}


/**
 * Implements hook_user_update().
 * writes the masquerade relationships determined in the above form.
 * Mostly copied from masquerade_user_update with the to's and from's mixed up
 */
function masquerade_nominate_user_update(&$edit, $account, $category) {
  global $_masquerade_old_session_id;
  if ($category == 'account' && isset($edit['masquerade_controllers'])) {
    $query = db_delete('masquerade_users');
    $query->condition('uid_to', $account->uid);
    $query->execute();
    // Save users from settings form.
    $users = drupal_explode_tags($edit['masquerade_controllers']);
    $query = db_insert('masquerade_users')->fields(array('uid_from', 'uid_to'));
    foreach ($users as $username) {
      if ($to_user = _masquerade_user_load($username)) {
        $query->values(array(
          'uid_to' => $account->uid,
          'uid_from' => $to_user->uid,
        ));
      }
    }
    $query->execute();
    $edit['masquerade_controllers'] = NULL;

    // Update user session...
    // @TODO check other way of session API.
    if (!empty($_masquerade_old_session_id)) {
      $query = db_update('masquerade');
      $query->fields(array(
        'sid' => session_id(),
      ));
      $query->condition('sid', $_masquerade_old_session_id);
      $query->execute();
    }
  }
}

/*
 * implements hook_block_info
 */
function masquerade_nominate_block_info() {
  $blocks = array();
  $blocks['masquerade_nominate'] = array(
    'info' => t('Masquerade nominants'),
    'cache' => DRUPAL_NO_CACHE,
    //this block should not be accessible to user 1, who should instead use the block provided by masquerade, or even the devel-switch_users block
  );
  return $blocks;
}

/*
 * implements hook_block_view
 * This block is similar the masquerade block, but with out the search field.
 */
function masquerade_nominate_block_view($delta) {
  $real_uid = @$_SESSION['masquerading'] ?  $_SESSION['masquerading'] : $GLOBALS['user']->uid;
  $switch_to_uids = db_query("SELECT uid_to FROM {masquerade_users} WHERE uid_from = :uid_from", array(':uid_from' => $real_uid))->fetchCol();
  foreach ($switch_to_uids as $uid) {
    if ($uid != $GLOBALS['user']->uid) {
      $account = user_load($uid);
      $switch_link = 'masquerade/switch/' . $account->uid;
      $switch_links[] = l($account->name, $switch_link, array('query' => array('token' => drupal_get_token($switch_link))));
    }
  }
  if (@$_SESSION['masquerading'] && !user_access('masquerade as user', user_load($_SESSION['masquerading']))) {
    $switch_links[] = l(t('Switch back'), 'masquerade/unswitch', array('query' => array('token' => drupal_get_token('masquerade/unswitch'))));
  }
  if (empty($switch_links)) return;
  return array(
    'subject' => t('Masquerade as'),
    'content' => theme('item_list', array('items' => $switch_links))
  );
}

function masquerade_get_nominees($uid) {
  static $nominees = array();
  if (!array_key_exists($uid, $nominees)) {
    $uids = db_query('SELECT uid_from FROM {masquerade_users} WHERE uid_to = :uid', array(':uid' => $uid))->fetchCol();
    $nominees[$uid] = $uids;
  }
  return $nominees[$uid];
}


/*
 * implements hook_field_extra_fields
 */
function masquerade_nominate_field_extra_fields() {
  return array(
    'user' => array(
      'user' => array(
        'form' => array(
          'nominees' => array(
            'label' => t('Account controller(s)'),
            'description' => t('Nominate users who can control this account.'),
            'weight' => 5,
          ),
        ),
        //there's no display for this since I couldn't be bothered to write a theme callback
      )
    )
  );
}
