<?php

/**
 * @file
 * Module file for Brew Tools
 */

/**
 * Implements hook_menu().
 */
function brew_tools_menu() {
  $items = array();

  $items['admin/config/widgits/brew_tools'] = array(
    'title' => 'Brew tools settings',
    'description' => 'Cahnges settingd for brew tools module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('brew_tools_config_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_form().
 */
function brew_tools_config_form($form, &$form_state) {
  $form['hop_util'] = array(
    '#type' => 'fieldset',
    '#title' => t('Hop Utilistation settings'),
    '#weight' => 5,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['hop_util']['brew_tools_utilization_time_curve'] = array(
    '#type' => 'textfield',
    '#title' => t('Hop Utilisation'),
    '#description' => t('Utilization vs. time curve'),
    '#default_value' => variable_get('brew_tools_utilization_time_curve', 0.04),
    '#required' => TRUE,
    '#weight' => 1,
  );
  $form['hop_util']['brew_tools_max_utilization'] = array(
    '#type' => 'textfield',
    '#title' => t('Max setting'),
    '#description' => t('the maximum utilization'),
    '#default_value' => variable_get('brew_tools_max_utilization', 4.15),
    '#required' => TRUE,
    '#weight' => 1,
  );
  return system_settings_form($form);
}

/**
 * Implements hook_help().
 */
function brew_tools_help($path, $arg) {
  switch ($path) {
    case "admin/help#brew_tools":
      return '<p>' . t("A collection of tools for a home brewer.") . '</p>';
  }
}

/**
 * Implements hook_block_info().
 */
function brew_tools_block_info() {
  $blocks['strike_temp'] = array(
    'info' => t('Calculates Strike Temperature'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  $blocks['hop_util'] = array(
    'info' => t('Calculates Hop Utilisation'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  $blocks['calc_abv'] = array(
    'info' => t('Calculates ABV'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  $blocks['calc_temp'] = array(
    'info' => t('Converts Temperature'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  $blocks['calc_plato_grav'] = array(
    'info' => t('Converts between Plato and Gravity'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view(). 
 */
function brew_tools_block_view($delta = '') {
  $blocks = array();
  switch ($delta) {
    case 'strike_temp':
      $blocks['subject'] = 'Calculate strike temp';
      $blocks['content'] = drupal_get_form('brew_tools_strike_temp_form');
      break;

    case 'hop_util':
      $blocks['subject'] = 'Calculate hop utilisation';
      $blocks['content'] = drupal_get_form('brew_tools_boil_time_factor_form');
      break;

    case 'calc_abv':
      $blocks['subject'] = 'Calculate ABV';
      $blocks['content'] = drupal_get_form('brew_tools_calc_abv_form');
      break;

    case 'calc_temp':
      $blocks['subject'] = 'Converts Temperature';
      $blocks['content'] = drupal_get_form('brew_tools_temp_form');
      break;
    
    case 'calc_plato_grav':
      $blocks['subject'] = 'Converts  between Plato and Gravity';
      $blocks['content'] = drupal_get_form('brew_tools_calc_plato_grav_form');
      break;
  }
  return $blocks;
}

/**
 * Implements hook_form().
 *  
 * Initial Infusion Equation:
 * strike temp = desired mash temp x (water l + (0.4 x kg malt))
 *  â€“ (0.4 x kg malt x malt temp)/water l
 */
function brew_tools_strike_temp_form($form, &$form_state) {

  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('Calculate mash strike temperature.'),
  );

  $form['mash_temp'] = array(
    '#type' => 'textfield',
    '#title' => t('Desired mash temp'),
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive'),
  );
  $form['water_volume'] = array(
    '#type' => 'textfield',
    '#title' => t('Water volume in liters'),
    '#required' => TRUE,
  );
  $form['malt_weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Weight of malt in kg'),
    '#required' => TRUE,
    '#element_validate' => array('element_validate_number'),
  );
  $form['malt_temp'] = array(
    '#type' => 'textfield',
    '#title' => t('Temperature of malt'),
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive'),
  );
  $form['strike_temp'] = array(
    '#title' => t('Strike water temperature should be'),
    '#type' => 'textfield',
    '#attributes' => array('readonly' => 'readonly'),
    '#value' => 0,
    '#prefix' => '<div id="strikeres">',
    '#suffix' => '</div>',
  );

  // Adds a simple submit button that refreshes the form and clears its
  // contents. This is the default behavior for forms.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#ajax' => array(
      'callback' => 'brew_tools_strike_temp_callback',
      'wrapper' => 'strikeres',
    ),
  );
  return $form;
}

/**
 * Callback used by form submit. 
 * 
 * @ingroup callbacks
 */
function brew_tools_strike_temp_callback($form, $form_state) {
  $c = new Calculate();
  $element = $form['strike_temp'];
  $element['#value'] = $c->strikeTemp($form_state);
  return $element;
}

/**
 * Handle submit from form.
 * 
 * @param array $form 
 *   The form.
 * @param array $form_state 
 *   The forms state.
 */
function brew_tools_strike_temp_form_submit($form, &$form_state) {
  $form_state['redirect'] = FALSE;
}

/**
 * Implements hook_form().
 */
function brew_tools_boil_time_factor_form($form, &$form_state) {

  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('Calculate Boil Time'),
  );

  $form['wort_gravity'] = array(
    '#type' => 'textfield',
    '#title' => t('Wort Gravity'),
    '#required' => TRUE,
    '#element_validate' => array('element_validate_number'),
  );

  $form['time'] = array(
    '#type' => 'textfield',
    '#title' => t('Time in minutes'),
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer_positive'),
  );
  $form['util_factor'] = array(
    '#title' => t('The utilisation factor is:'),
    '#type' => 'textfield',
    '#attributes' => array('readonly' => 'readonly'),
    '#value' => 0,
    '#prefix' => '<div id="utilfact">',
    '#suffix' => '</div>',
    '#field_suffix' => '% ',
  );

  // Adds a simple submit button that refreshes the form and clears its
  // contents. This is the default behavior for forms.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#ajax' => array(
      'callback' => 'brew_tools_boil_time_factor_callback',
      'wrapper' => 'utilfact',
    ),
  );
  return $form;
}

/**
 * Callback for btf.
 * 
 * @param array $form
 *   The forms value.
 * @param array $form_state
 *   The forms state value.
 * 
 * @return array
 *   The form value.
 * 
 * @ingroup callbacks
 */
function brew_tools_boil_time_factor_callback($form, $form_state) {
  $c = new Calculate();
  $element = $form['util_factor'];
  $element['#value'] = $c->utilFactor($form_state);
  return $element;
}

/**
 * Implements hook_form().
 */
function brew_tools_calc_abv_form($form, &$form_state) {

  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('Calculate ABV'),
  );
  $form['og'] = array(
    '#type' => 'textfield',
    '#title' => t('Original Gravity'),
    '#required' => TRUE,
    '#element_validate' => array('element_validate_number'),
  );
  $form['fg'] = array(
    '#type' => 'textfield',
    '#title' => t('Final Gravity'),
    '#required' => TRUE,
    '#element_validate' => array('element_validate_number'),
  );
  $form['calc_abv'] = array(
    '#title' => t('The alcahol content is:'),
    '#type' => 'textfield',
    '#attributes' => array('readonly' => 'readonly'),
    '#value' => 0,
    '#prefix' => '<div id="calc_abv">',
    '#suffix' => '</div>',
    '#field_suffix' => '% ABV',
  );

  // Adds a simple submit button that refreshes the form and clears its
  // contents. This is the default behavior for forms.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#ajax' => array(
      'callback' => 'brew_tools_calc_abv_callback',
      'wrapper' => 'calc_abv',
    ),
  );
  return $form;
}

/**
 * Callback for ABV.
 * 
 * @param array $form
 *   The forms value.
 * @param array $form_state
 *   The forms state value.
 * 
 * @return array
 *   The form value.
 * 
 * @ingroup callbacks
 */
function brew_tools_calc_abv_callback($form, $form_state) {
  $c = new Calculate();
  $element = $form['calc_abv'];
  $element['#value'] = $c->getABV($form_state);
  return $element;
}

/**
 * Implements hook_form().
 */
function brew_tools_temp_form($form, &$form_state) {
  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('Converts Temperature'),
  );
  $form['units'] = array(
    '#type' => 'radios',
    '#title' => t('Units'),
    '#default_value' => variable_get('brew_tools_units', 'c'),
    '#options' => array('c' => t('Celsius'), 'f' => t('Fahrenheit')),
    '#description' => t('Select the units your converting to.'),
  );

  $form['temp'] = array(
    '#type' => 'textfield',
    '#title' => t('Source Temp'),
    '#required' => TRUE,
    '#element_validate' => array('element_validate_number'),
  );

  $form['calc_temp'] = array(
    '#title' => t('The converted temperature is:'),
    '#type' => 'textfield',
    '#attributes' => array('readonly' => 'readonly'),
    '#value' => 0,
    '#prefix' => '<div id="calc_temp">',
    '#suffix' => '</div>',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#ajax' => array(
      'callback' => 'brew_tools_temp_callback',
      'wrapper' => 'calc_temp',
    ),
  );
  return $form;
}

/**
 * Handle submit from form.
 * 
 * @param array $form
 *   The forms value.
 * @param array $form_state
 *   The forms state value.
 */
function brew_tools_temp_form_submit($form, &$form_state) {
  $form_state['redirect'] = FALSE;
}

/**
 * Callback for ABV.
 * 
 * @param array $form
 *   The forms value.
 * @param array $form_state
 *   The forms state value.
 * 
 * @return array
 *   The form value.
 *
 * @ingroup callbacks
 */
function brew_tools_temp_callback($form, $form_state) {
  $c = new Calculate();
  $element = $form['calc_temp'];
  $element['#value'] = $c->getTemp($form_state);
  return $element;
}

/**
 * Implements hook_form().
 */
function brew_tools_calc_plato_grav_form($form, &$form_state) {
  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('Converts between Gravity and Plato'),
  );
  
  $form['plato_grav_radio'] = array(
    '#type' => 'radios',
    '#title' => t('Units'),
    '#default_value' => variable_get('brew_tools_calc_plato_grav', 'p'),
    '#options' => array('p' => t('Plato'), 'g' => t('Gravity')),
    '#description' => t('Select the unit your converting to.'),
  );

  $form['plato_grav_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Plato/Gravity value'),
    '#required' => TRUE,
    '#element_validate' => array('element_validate_number'),
  );

  $form['plato_grav'] = array(
    '#title' => t('The converted value is:'),
    '#type' => 'textfield',
    '#attributes' => array('readonly' => 'readonly'),
    '#value' => 0,
    '#prefix' => '<div id="plato_grav">',
    '#suffix' => '</div>',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#ajax' => array(
      'callback' => 'brew_tools_calc_plato_grav_callback',
      'wrapper' => 'plato_grav',
    ),
  );
  return $form;
}

/**
 * Handle submit from form.
 * 
 * @param array $form
 *   The forms value.
 * @param array $form_state
 *   The forms state value.
 */
function brew_tools_plato_grav_form_submit($form, &$form_state) {
  $form_state['redirect'] = FALSE;
}

/**
 * Callback for ABV.
 * 
 * @param array $form
 *   The forms value.
 * @param array $form_state
 *   The forms state value.
 * 
 * @return array
 *   The form value.
 *
 * @ingroup callbacks
 */
function brew_tools_calc_plato_grav_callback($form, $form_state) {
  $c = new Calculate();
  $element = $form['plato_grav'];
  $element['#value'] = $c->getPlatoGrav($form_state);
  return $element;
}

