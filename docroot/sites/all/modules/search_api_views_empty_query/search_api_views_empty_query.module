<?php

/**
 * Implements hook_menu().
 */
function search_api_views_empty_query_menu() {
  $items = array();

  $items['admin/config/search/search_api_views_empty_query'] = array(
    'title' => 'Search API Views Empty Query',
    'description' => 'Settings to display a custom message when there is no search text in a Search API View',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('search_api_views_empty_query_settings_form'),
    'access arguments' => array('administer search_api'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_variable_group_info().
 */
function search_api_views_empty_query_variable_group_info() {
  $groups['search_api_views_empty_query'] = array(
    'title' => t('Search API Views Empty Query'),
    'description' => t('Search API Views Empty Query variables'),
    'access' => 'administer search api',
  );

  return $groups;
}

function search_api_views_empty_query_variable_info($options) {
  return array(
    'search_api_views_empty_query_use_custom_message' => array(
      'type' => 'boolean',
      'title' => t('Use custom message'),
      'group' => 'search_api_views_empty_query',
    ),
    'search_api_views_empty_query_message_text' => array(
      'type' => 'text',
      'title' => t('Custom message'),
      'description' => t('Text used when a Search API view returns no result.'),
      'group' => 'search_api_views_empty_query',
    ),
    'search_api_views_empty_query_message_format' => array(
      'title' => t('Custom message format'),
      'group' => 'search_api_views_empty_query',
    )
  );
}


function search_api_views_empty_query_settings_form($form, &$form_state) {
  $form['search_api_views_empty_query_use_custom_message'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display custom message'),
    '#description' => t("Replace the content of the view first <em>No Results Behavior</em> text area by the message below."),
    '#default_value' => variable_get('search_api_views_empty_query_use_custom_message', FALSE),
    '#return_value' => 1,
    '#attributes' => array('id' => 'search_api_views_empty_query_use_custom_message'),
  );

  $form['search_api_views_empty_query_message_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Custom message'),
    '#description' => t('The message to display when the search text is empty.'),
    '#cols' => 60,
    '#default_value' => variable_get('search_api_views_empty_query_message_text', ''),
    '#attributes' => array('id' => 'search_api_views_empty_query_message'),
    '#resizable' => TRUE,
    '#rows' => 5,
  );

  $form['search_api_views_empty_query_message_format'] = array();
  // Get a list of formats that the current user has access to.
  $formats = filter_formats();
  foreach ($formats as $format) {
    $options[$format->format] = $format->name;
    $form['guidelines'][$format->format] = array(
      '#theme' => 'filter_guidelines',
      '#format' => $format,
    );
  }
  $form['search_api_views_empty_query_message_format'] = array(
    '#type' => 'select',
    '#title' => t('Text format'),
    '#options' => $options,
    '#default_value' =>  variable_get('search_api_views_empty_query_message_format', filter_default_format()),
    '#access' => count($formats) > 1,
    '#attributes' => array('class' => array('filter-list')),
  );

  $form['search_api_views_empty_query_allowed_ids'] = array(
    '#type' => 'textarea',
    '#title' => t('Use only on these filters'),
    '#description' => t('Enter the URL identifiers of the filters on which this module should act on, one per line. Leave empty to act on all full-text filters.'),
    '#cols' => 60,
    '#default_value' => variable_get('search_api_views_empty_query_allowed_ids', ''),
    '#attributes' => array('id' => 'search_api_views_empty_query_allowed_ids'),
    '#resizable' => TRUE,
    '#rows' => 5,
  );

  return system_settings_form($form);
}

/**
 * hook_views_pre_execute implementation.
 *
 * This hook is called right before the execute process. The query is now
 * fully built, but it has not yet been run through db_rewrite_sql.
 *
 */
function search_api_views_empty_query_views_pre_execute(&$view) {
  if ((strcmp($view->query->plugin_name, 'search_api_views_query') == 0) &&
    (count($view->exposed_raw_input) == 1) &&
    (isset($view->filter['search_api_views_fulltext']))) { // FIXME: do not hardcode id.

    $allowed_ids = variable_get('search_api_views_empty_query_allowed_ids', '');
    $allowed_ids = array_filter(explode("\n", $allowed_ids));
    drupal_alter('search_api_views_empty_query_allowed_identifiers', $allowed_ids);

    $identifier = $view->filter['search_api_views_fulltext']->options['expose']['identifier'];

    if ((empty($allowed_ids) || in_array($identifier, $allowed_ids)) &&
      isset($view->exposed_raw_input[$identifier]) &&
      (strcmp($view->exposed_raw_input[$identifier], '') == 0)) {

      // Replace view's No Results text by our custom text.
      if (variable_get('search_api_views_empty_query_use_custom_message', FALSE)) {
        $message = variable_get('search_api_views_empty_query_message_text', '');
        $format = variable_get('search_api_views_empty_query_message_format', filter_default_format());
        foreach ($view->empty as $key => $handler) {
          if (isset($view->empty[$key]->options['content'])) {
            $view->empty[$key]->options['content'] = check_markup($message, $format);
            break;
          }
        }
      }

      // Abort view execution.
      $view->query->abort();
    }
  }

  // If you would like * to return all results, you need to patch
  // SearchApiViewsHandlerFilterFulltext::query() so that it returns
  // without doing anything if its value is '*'.
}
