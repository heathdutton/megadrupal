<?php
/**
 * @file
 * Code for the nm_blog feature.
 */

include_once 'nm_galleries.features.inc';

function nm_galleries_node_view_alter(&$build) {
  //krumo($build);
}

function nm_galleries_theme($existing, $type, $theme, $path) {
  return array(
    'node__nm_gallery__embed' => array(
      'render element' => 'elements',
      'template' => 'node--nm_gallery--embed',
      'path' => drupal_get_path('module', 'nm_galleries'),
    ),
  );
}

function nm_galleries_preprocess_node(&$variables) {
  $node = $variables['node'];

  switch ($variables['type']) {
    case 'nm_gallery':

      if ($variables['view_mode'] == 'nm_embed_gallery') {
        // use our custom node tpl for galleries that are embedded.
        $variables['theme_hook_suggestions'][] = 'node__nm_gallery__embed';
      }

      if ($variables['view_mode'] == 'full') {

        if (isset($node->field_nm_headline_image) && isset($node->field_nm_gallery_images)) {
          unset($variables['content']['field_nm_headline_image']);
          // smash the headline image and rotator together if both exist (gallery node only).
          //$headline_image = $node->field_nm_headline_image['und'];
          //$rotator_images = $node->field_nm_gallery_images['und'];
          // reassign as needed
          //$variables['content']['field_nm_gallery_images'][0]['#items'] = array_merge($headline_image, $rotator_images);
          //$variables['content']['field_nm_headline_image'] = array();
        }

        //check public/private settings and alter content
        if ($node->field_nm_gallery_visibility[$node->language][0]['value'] == 0) {
          unset($variables['content']);
          $variables['content']['visibility']['#markup'] = t('I\'m sorry, but you\'ve stumbled upon a Gallery that is marked as hidden.');
        }

      }  //endif Full view_mode

    break;
  }

  return $variables;
}


/**
 * Implements hook_entity_info_alter().
 */
function nm_galleries_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['nm_embed_gallery'] = array(
    'label' => t('Embedded Gallery'),
    'custom settings' => FALSE,
  );
}


/**
 * Implements hook_node_type_insert().
 */
function nm_galleries_node_type_insert($info) {
  if ($info->type != 'nm_gallery' && $info->type != 'nm_testimonial') {
      nm_galleries_add_reference_field($info);
  }
}


function nm_galleries_add_reference_field($type, $label = 'Attach Gallery') {
  // Add or remove the body field, as needed.
  $field = field_info_field('field_nm_attach_gallery');
  $instance = field_info_instance('node', 'field_nm_attach_gallery', $type->type);

  if (empty($field)) {
    $field = array(
      'active' => '1',
      'cardinality' => '1',
      'deleted' => '0',
      'entity_types' => array(),
      'field_name' => 'field_nm_attach_gallery',
      'foreign keys' => array(),
      'indexes' => array(
        'target_id' => array(
          0 => 'target_id',
        ),
      ),
      'locked' => '0',
      'module' => 'entityreference',
      'settings' => array(
        'handler' => 'base',
        'handler_settings' => array(
          'behaviors' => array(
            'views-select-list' => array(
              'status' => 0,
            ),
          ),
          'sort' => array(
            'direction' => 'ASC',
            'field' => 'body:value',
            'property' => 'title',
            'type' => 'property',
          ),
          'target_bundles' => array(
            'nm_gallery' => 'nm_gallery',
          ),
        ),
        'handler_submit' => 'Change handler',
        'target_type' => 'node',
      ),
      'translatable' => '0',
      'type' => 'entityreference',
    );
    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'bundle' => $type->type,
      'default_value' => NULL,
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'module' => 'entityreference',
          'settings' => array(
            'view_mode' => 'nm_embed_gallery',
          ),
          'type' => 'entityreference_entity_view',
          'weight' => -10,
        ),
        /*
        'nm_embed_gallery' => array(
          'label' => 'hidden',
          'module' => 'entityreference',
          'settings' => array(
            'view_mode' => 'nm_embed_gallery',
          ),
          'type' => 'entityreference_entity_view',
          'weight' => -10,
        ),
        */
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => -10,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_nm_attach_gallery',
      'label' => $label,
      'required' => 0,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'settings' => array(),
        'type' => 'options_select',
        'weight' => -10,
      ),
    );
    $instance = field_create_instance($instance);
  }
  return $instance;
}


function nm_galleries_form_alter(&$form, &$form_state, $form_id) {

  switch ($form_id) {
    case 'nm_gallery_node_form':

      //krumo($form_state['node']);
      //krumo($form['field_nm_gallery_embed_size']);
      $presets = image_style_options(FALSE);

      //$node = $form['field_nm_gallery_embed_size']['und']['#entity'];


      $form['field_nm_gallery_embed_size']['und']['#options'] = $presets;

      // find or define the correct value
      if (isset($form_state['node']->field_nm_gallery_embed_size['und'][0])) {
        $default_value = $form_state['node']->field_nm_gallery_embed_size;
      }
      else {
        $default_value = array('nodemaker_large_banner' => 'nodemaker_large_banner');
      }
      $form['field_nm_gallery_embed_size']['und']['#default_value'] = $default_value;

    break;

  }
}


/**
 * Implements hook_node_insert().
 */
function nm_galleries_node_insert($node) {
  nm_galleries_thumbnails_alias($node, 'insert');
}

/**
 * Implements hook_node_update().
 */
function nm_galleries_node_update($node) {
  nm_galleries_thumbnails_alias($node, 'update');
}


/**
 * Saves an alias for thumbnail pages at node/nid/thumbnails.
 */
function nm_galleries_thumbnails_alias($node, $op) {

  //need to save node alias earlier so we can use for the thumbnails page
  module_load_include('inc', 'pathauto');
  $node_path = pathauto_create_alias('node', $op, 'node/' . $node->nid, array('node' => $node), 'nm_gallery');

  //if a new node alias is generated (b/c new or updated), use that
  if (!empty($node_path)) {
    $path = array(
      'source' => 'node/' . $node->nid . '/thumbnails',
      'alias' => $node_path['alias'] . '/thumbnails',
    );
  }
  // use what is in the node object
  elseif (!empty($node->path)) {
    $path = array(
      'source' => 'node/' . $node->nid . '/thumbnails',
      'alias' => $node->path['alias'] . '/thumbnails',
    );
  }

  if (isset($path)) {
    path_save($path);
  }

}



/**
 * Implements hook_boxes_plugins().
 */
function nm_galleries_boxes_plugins() {
  $info = array();
  $path = drupal_get_path('module', 'nm_galleries') . '/plugins';
  $info['gallery'] = array(
    'title' => 'Featured Gallery Box',
    'handler' => array(
      'parent' => 'simple',
      'class' => 'boxes_gallery',
      'file' => 'boxes_gallery.inc',
      'path' => $path,
    ),
  );
  return $info;
}


/**
 * Theme function for empty text of boxes.
 */
function nm_galleries_process_boxes_box(&$variables) {
  if ($variables['block']['delta'] == 'nm_galleries_featured_gallery' && $variables['block']['content'] == NULL) {
    $destination = drupal_get_destination();
    $link = l('configure this box', 'admin/structure/block/manage/boxes/nm_galleries_featured_gallery/configure', array('query' => array('destination' => $destination['destination']), 'attributes' => array('title' => 'Configure your Featured Gallery')));
    $variables['block']['content'] = t('You need to select a gallery.  Please !link.', array('!link' => $link));
  }
}


/**
 * Implements hook_help().
 */
function nm_galleries_help($path, $arg) {
  switch ($path) {
    case 'admin/help#nm_galleries':
      $content = array(
        '#group' => 'info',
        '#theme' => 'item_list',
        '#attributes' => array(
          'class' => array('nodemaker-apps-details'),
        ),
        '#items' => nm_galleries_help_details(),
      );

      return render($content);
      break;
  }
}


/**
  * Content for hook_help().
  */
function nm_galleries_help_details() {
  $items = array();
  $items[] = '<strong>' . t('.') . '</strong>  ' . t('');
  $items[] = '<strong>' . t('.') . '</strong>  ' . t('');
  $items[] = '<strong>' . t('.') . '</strong>  ' . t('');
  $items[] = '<strong>' . t('.') . '</strong>  ' . t('');
  $items[] = '<strong>' . t('Issues?') . '</strong>  ' . t('Have a support question?  Find a bug?  !issue!', array('!issue' => '<a href="http://drupal.org/project/issues/nm_galleries" title="NodeMaker Galleries Issue Queue" target="_blank">Please use the issue queue</a>'));
  return $items;
}

function nm_galleries_library_alter(&$libraries, $module) {
  
  if ($module == 'plupload') {    
    $library_path = _plupload_library_path();
    $full_js = $library_path . '/js/plupload.full.js';
    unset($libraries['plupload']['js'][$full_js]);
    $libraries['plupload']['js'][$library_path . '/js/plupload.js'] = array();
    $libraries['plupload']['js'][$library_path . '/js/plupload.flash.js'] = array();
    $libraries['plupload']['js'][$library_path . '/js/plupload.html4.js'] = array();
    
    // add in our own html5 version to fix the multi-upload issues in iOS 6
    $path = drupal_get_path('module', 'nm_galleries');
    $libraries['plupload']['js'][$path . '/plupload.html5.js'] = array();
  }
}