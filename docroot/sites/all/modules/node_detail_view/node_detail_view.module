<?php

/**
 * @file
 * This file provides implementation of a node detailed view.
 */

/**
 * Implements hook_help().
 */
function node_detail_view_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#node_detail_view':
      return check_markup(file_get_contents(dirname(__FILE__) . "/README.txt"));
      break;
  }
}

/**
 * Implements hook_menu().
 */
function node_detail_view_menu() {
  $items['admin/config/user-interface/node_detail_view'] = array(
    'title' => 'Node Detail View Settings',
    'description' => 'Default settings to view nodes on content page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_detail_view_settings_form'),
    'access arguments' => array('access the content overview page'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function node_detail_view_theme() {
  return array(
    'node_detail_view_display_node' => array(
      'variables' => array(
        'details' => NULL,
        'nid' => NULL,
      ),
    ),
    'node_detail_view_author_info' => array(
      'variables' => array(
        'author' => NULL,
      ),
    ),
  );
}

/**
 * Menu callback to implement settings form.
 */
function node_detail_view_settings_form($form, &$form_state) {
  $form['node_detail_view_default'] = array(
    '#type' => 'select',
    '#default_value' => variable_get('node_detail_view_default', 0),
    '#title' => t('Default Viewing style for admin content page'),
    '#options' => array(
      t('List View'),
      t('Detailed View'),
    ),
  );
  $form['node_detail_view_info_block'] = array(
    '#type' => 'select',
    '#default_value' => variable_get('node_detail_view_info_block', 'node_info_wrapper'),
    '#description' => t('<i>node_info_wrapper</i> will keep this div relative to other divs, <br /><i>node_info_wrapper_fixed</i> will keep this div fixed on screen.'),
    '#title' => t('Default class for positioning Node Info'),
    '#options' => drupal_map_assoc(array(
      'node_info_wrapper',
      'node_info_wrapper_fixed',
    )),
  );
  return system_settings_form($form);
}

/**
 * Implemets hook_menu_contextual_links_alter().
 */
function node_detail_view_menu_contextual_links_alter(&$links, $router_item, $root_path) {
  if ($root_path == 'node/%') {

    // Set destination for contextual links.
    $links['node-edit']['localized_options'] = array(
      'query' => array(
        'destination' => 'admin/content',
      ),
    );
    $links['node-delete']['localized_options'] = array(
      'query' => array(
        'destination' => 'admin/content',
      ),
    );
  }
}

/**
 * Implemets hook_form_FORM_ID_alter().
 */
function node_detail_view_form_node_admin_content_alter(&$form, &$form_state, $form_id) {
  if (isset($form['admin'])) {
    drupal_add_css(drupal_get_path('module', 'node_detail_view') . '/node_detail_view.css');

    $form['view_style'] = array(
      '#type' => 'select',
      '#title' => t('View Style'),
      '#description' => t('Configure !here.', array('!here' => l('here', 'admin/config/user-interface/node_detail_view'))),
      '#prefix' => '<div id="node_detail_view_style">',
      '#suffix' => '</div>',
      '#weight' => '-1',
      '#default_value' => variable_get('node_detail_view_default', 0),
      '#options' => array(
        t('List View'),
        t('Detailed View'),
      ),
    );

    if (isset($form['admin']['nodes']['#options']) && count($form['admin']['nodes']['#options']) > 0) {
      $header = array(
        'title' => $form['admin']['nodes']['#header']['title'],
      );
      $option = $form['admin']['nodes']['#options'];

      foreach ($option as $nid => $details) {
        $tags = strip_tags($option[$nid]['title']['data']['#suffix']);
        if (strlen($tags) > 1) {
          $options[] = '<span class="node_detail_view_radios">' . $option[$nid]['title']['data']['#title'] . $option[$nid]['title']['data']['#suffix'] . '</span>';
          $suffix[$option[$nid]['title']['data']['#title']] = trim($tags);
        }
        else {
          $options[] = '<div class="node_detail_view_radios">' . $option[$nid]['title']['data']['#title'] . '</div>';
        }

        $detail[$nid]['title'] = $option[$nid]['title']['data']['#title'];
        $detail[$nid]['type'] = $option[$nid]['type'];

        // Author additional information.
        $variables = array(
          'author' => $option[$nid]['author'],
        );
        $detail[$nid]['author'] = theme('node_detail_view_author_info', $variables);

        $color = $option[$nid]['status'] == 'published' ? 'green' : 'red';
        $detail[$nid]['status'] = '<div class="node_detail_view_' . $color . '">' . $option[$nid]['status'] . '</div>';

        $detail[$nid]['updated'] = $option[$nid]['changed'];
        $detail[$nid]['operations'] = $option[$nid]['operations'];

        // Set the destination for default links.
        $detail[$nid]['operations']['data']['#links']['edit']['query']['destination'] = 'admin/content';
        $detail[$nid]['operations']['data']['#links']['delete']['query']['destination'] = 'admin/content';
      }

      if (isset($suffix)) {
        $form['suffix'] = array(
          '#type' => 'value',
          '#value' => $suffix,
        );
      }
      $form['details'] = array(
        '#type' => 'value',
        '#value' => $detail,
      );
    }
    $form['admin']['default_nodes'] = array(
      '#type' => 'fieldset',
      '#states' => array(
        'invisible' => array(
          ':input[name="view_style"]' => array(
            'value' => 1,
          ),
        ),
      ),
    );
    $form['admin']['default_nodes']['nodes'] = $form['admin']['nodes'];
    unset($form['admin']['nodes']);

    $form['admin']['options']['#states'] = array(
      'invisible' => array(
        ':input[name="view_style"]' => array(
          'value' => 1,
        ),
      ),
    );

    // Provide a total count of nodes.
    $count = db_select('node', 'n')
    ->countQuery()
    ->execute()
    ->fetchField();

    $form['admin']['node_cover'] = array(
      '#type' => 'fieldset',
      '#title' => isset($count) ? $count > 0 ? t('Title ( !count nodes )', array('!count' => $count)) : t('Title') : t('Title'),
      '#prefix' => '<div id="node_detail_view_cover">',
      '#suffix' => '</div>',
      '#states' => array(
        'invisible' => array(
          ':input[name="view_style"]' => array(
            'value' => 0,
          ),
        ),
      ),
    );

    if (isset($options)) {
      $form['admin']['node_cover']['title_selected'] = array(
        '#type' => 'radios',
        '#options' => drupal_map_assoc($options),
        '#ajax' => array(
          'callback' => 'node_detail_view_node_preview',
          'wrapper' => 'node_details',
          'method' => 'replace',
          'progress' => array(
            'type' => 'throbber',
          ),
        ),
      );
    }
    else {
      $form['admin']['node_cover']['title_selected'] = array(
        '#type' => 'item',
        '#title' => t('No content available.'),
      );
    }

    $form['admin']['node_fieldset'] = array(
      '#type' => 'fieldset',
      '#prefix' => '<div id="node_detail_view_fieldset">',
      '#suffix' => '</div>',
      '#states' => array(
        'invisible' => array(
          ':input[name="view_style"]' => array(
            'value' => 0,
          ),
        ),
      ),
    );
    $form['admin']['node_fieldset']['node_detail'] = array(
      '#type' => 'item',
      '#prefix' => !empty($options) ? '<div id="node_details" class="node_detail_view_left"><i class="node_detail_view_i">' . t('No preview.') . '</i></div>' : '<div id="node_details" class="node_detail_view_left"><i class="node_detail_view_i">' . t('Preview not available.') . '</i></div>',
      '#suffix' => '</div>',
    );
  }
}

/**
 * Implements ajax callback.
 */
function node_detail_view_node_preview($form, &$form_state) {
  $details = $form_state['values']['details'];
  $title = strip_tags($form_state['values']['title_selected']);
  $suffix = $form_state['values']['suffix'];

  // Filter node title.
  foreach ($suffix as $name => $end) {
    if (($name . '  ' . $end) == $title) {
      $update_pos = strrpos($title, 'updated');
      $new_pos = strrpos($title, 'new');

      if ($update_pos || $new_pos) {
        $title = $name;
      }
    }
  }

  // Get nid for this node.
  $result = db_select('node', 'n')
  ->fields('n', array('nid'))
  ->condition('title', $title, '=')
  ->addTag('node_access')
  ->execute()
  ->fetchCol();

  $variables = array(
    'details' => $details,
    'nid' => $result[0],
  );
  return theme('node_detail_view_display_node', $variables);
}

/**
 * Implements theme callback.
 */
function theme_node_detail_view_author_info($variables) {
  $output = '';
  $role = '';
  $author = strip_tags($variables['author']);
  $author = user_load_by_name($author);

  $output .= '<div>';
  if (!isset($author->uid)) {
    $author = new stdClass();
    $author->uid = t('unknown');
  }
  $output .= '<div class="node_detail_view_author_column">' . t('User ID') . '</div><div class="node_detail_view_author_value"><i>' . $author->uid . '</i></div>';

  $output .= '<div class="node_detail_view_author_column">' . t('Name') . '</div><div class="node_detail_view_author_value">' . $variables['author'] . '</div>';

  if (isset($author->status)) {
    $color = (($author->status) ? 'green' : 'red');
    $output .= '<div class="node_detail_view_author_column">' . t('Status') . '</div><div class="node_detail_view_author_value node_detail_view_' . $color . '">' . (($author->status) ? t('Active user') : t('Blocked user')) . '</div>';
  }
  else {
    $output .= '<div class="node_detail_view_author_column">' . t('Status') . '</div><div class="node_detail_view_author_value">-</div>';
  }

  if (isset($author->roles)) {
    foreach ($author->roles as $rid => $roles) {
      $role .= $roles . ', ';
    }
    $role = rtrim($role, ', ');
  }
  else {
    $role = t('No role Assigned');
  }
  $output .= '<div class="node_detail_view_author_column">' . t('Roles') . '</div><div class="node_detail_view_author_value">' . check_plain($role) . '</div>';
  $output .= '</div>';
  return $output;
}

/**
 * Implements theme callback.
 */
function theme_node_detail_view_display_node($variables) {
  $details = $variables['details'];
  $nid = $variables['nid'];

  if (isset($nid)) {
    $node = node_load($nid);

    $details[$nid]['Node ID'] = '<i>' . $node->nid . '</i>';
    $details[$nid]['Revision ID'] = '<i>' . $node->vid . '</i>';
    $details[$nid]['Created'] = date('m/d/o - H:i', $node->created);

    if ($node->comment_count > 0) {
      $details[$nid]['Comments'] = ($node->comment_count == 1) ? l(t('View ') . $node->comment_count . ' comment', 'node/' . $node->nid, array('fragment' => 'comments')) : l(t('View !comment_count comments', array('!comment_count' => $node->comment_count)), 'node/' . $node->nid, array('fragment' => 'comments'));
    }
    if ($node->language != LANGUAGE_NONE) {
      $details[$nid]['Language'] = $node->language;
    }

    $header = array('Node Info');
    foreach ($details[$nid] as $info => $value) {
      if (!is_array($value)) {
        $rows[] = array(
          'info' => '<div class="node_detail_view_info_left"><strong>' . check_plain(ucfirst($info)) . '</strong></div><div class="node_detail_view_info_right">' . $value . '</div>',
        );
      }
      else {
        $rows[] = array(
          'info' => '<div class="node_detail_view_info_left"><strong>' . check_plain(ucfirst($info)) . '</strong></div><div class="node_detail_view_info_right">' . drupal_render($value) . '</div>',
        );
      }
    }

    $table = array(
      '#theme' => 'table',
      '#header' => $header,
      '#rows' => $rows,
    );
    return '<div id="node_details"><div id="node_detail_wrapper">' .  drupal_render(node_view($node)) . '</div><div id="' . variable_get('node_detail_view_info_block', 'node_info_wrapper') . '">' . drupal_render($table) . '</div></div>';
  }
  else {
    return '<div id="node_details" class="node_detail_view_result">' . t('Preview not available.') . '</div>';
  }
}
