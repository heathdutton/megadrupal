<?php

/**
 * @file 
 * certify_book.module php file
 * Drupal module Certify Book.
 */

/**
 * Implements hook_certify_info().
 */
function certify_book_certify_info() {
  return array(
    'certify_book' => 'CertifyBook',
  );
}

/**
 * Implements hook_theme().
 */
function certify_book_theme($existing, $type, $theme, $path) {
  $path .= '/templates';
  return array(
    'certify_book_view' => array(
      'variables' => array(
        'node' => NULL,
        'condition' => NULL,
      ),
      'path' => $path,
      'template' => 'certify-book-view',
    ),
  );
}

/**
 * Implements hook_preprocess_template().
 */
function certify_book_preprocess_certify_book_view(&$variables) {
  $variables['condition']->loadConditionNode();
}

/**
 * Implements hook_node_view().
 */
function certify_book_node_view($node, $view_mode = 'full') {
  global $user;
  
  if ($user->uid && isset($node->book)) {
    // TODO: Move to class
    // TODO: Should this select be done in certify through an API call perhaps? certify_isnodecondition()?
    
    $is_cond = db_query("SELECT COUNT(*) FROM {certify_conditions} WHERE condnode = :condnode AND condtype = :condtype", array(':condnode' => $node->book['bid'], ':condtype' => 'book'))->fetchField();
    $exists = db_query("SELECT nid FROM {certify_book_viewlog} WHERE uid = :uid AND nid = :nid AND bid = :bid", array(':uid' =>  $user->uid, ':nid' => $node->nid, ':bid' => $node->book['bid']))->fetchField();
    
    if ($is_cond && !$exists) {
      $result = db_insert('certify_book_viewlog')->fields(array(
        'bid' => $node->book['bid'], 
        'nid' => $node->nid, 
        'uid' => $user->uid,
      ))->execute();
      // TODO: This be called on the next page request instead.
      certify_nodechanged($node->book['bid']);
      // This can also be doned by calling $cert->scoreChanged on all certificates affected.  
    }
  }
}