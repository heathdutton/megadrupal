<?php

/**
 * @file 
 * certify.module php file
 * Drupal module Certify.
 */

/**
 * Implements hook_node_info().
 */
function certify_node_info() {
  // TODO: Should the node type be called certify_certificate to avoid conflicts?
  return array(
    'certificate' => array(
      'name' => t('Certificate'),
      'base' => 'certify',
      'description' => t('Use for creating certificates that can be issued to users.'),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function certify_permission() {
  return array(
    'edit certificate' => array(
      'title' => t('Edit certificate'),
    ),
    'delete certificate' => array(
      'title' => t('Delete certificate'),
    ),
    'regenerate certificates' => array(
      'title' => t('Regenerate certificates'),
    ),
    'view certificate' => array(
      'title' => t('View certificate'),
    ),
    'view certificate conditions' => array(
      'title' => t('View certificate conditions'),
    ),
    'view own certificates' => array(
      'title' => t('View own certificates'),
      'description' => t('Access to certificates and progress connected to the current user.'),
    ),
    'view all certificates' => array(
      'title' => t('View all certificates'),
      'description' => t('Access to certificates and progress connected to all users.'),
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function certify_node_access($node, $op, $account) {
  $is_author = FALSE;
  if (is_object($node) && $account->uid == $node->uid) {
    $is_author = TRUE;
  }

  switch ($op) {
    case 'create':
      return user_access('create certificate', $account);
    case 'update':
      return user_access('edit certificate', $account);
    case 'delete':
      return user_access('delete certificate', $account);
    case 'view':
      return user_access('view certificate', $account) || $is_author;
  }
}

/**
 * Implements hook_menu().
 */
function certify_menu() {
  $items['admin/config/system/certify'] = array(
    'title' => 'Certify',
    'description' => 'Configure settings for the Certify module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('certify_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'certify.admin.inc',
  );
  $items['admin/config/system/certify/download-certificate-preview'] = array(
    'title' => 'Download certificate preview',
    'page callback' => 'certify_download_certificate_preview',
    'page arguments' => array(),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );

  $items['user/%user/certify'] = array(
    'title' => 'Certificates',
    'page callback' => 'certify_user_certificates',
    'page arguments' => array(1),
    'access callback' => 'certify_user_certificates_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%user/certify/download/%node'] = array(
    'title' => 'Download certificate',
    'page callback' => 'certify_user_download_certificate',
    'page arguments' => array(1, 4),
    'access callback' => 'certify_user_certificates_access',
    'access arguments' => array(1, 4),
    'type' => MENU_CALLBACK,
  );

  $items['node/%node/certify/download-certificate-preview'] = array(
    'title' => 'Download certificate preview',
    'page callback' => 'certify_download_certificate_preview',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('edit certificate'),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/certify-users'] = array(
    'title' => 'Users progress',
    'page callback' => 'certify_users_progress',
    'page arguments' => array(1),
    'access callback' => 'certify_users_progress_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/certify/regenerate-certificate/%user'] = array(
    'title' => 'Regenerate PDF file',
    'page callback' => 'certify_regenerate',
    'page arguments' => array(1, 4),
    'access callback' => 'user_access',
    'access arguments' => array('regenerate certificates'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function certify_theme($existing, $type, $theme, $path) {
  $path .= '/templates';
  return array(
    'certify' => array(
      'variables' => array(
        'certificates' => NULL,
      ),
      'path' => $path,
      'template' => 'certify',
    ),
    'certifysingle' => array(
      'variables' => array(
        'certificate' => NULL,
        'showtitle' => TRUE,
        'condensed' => FALSE,
      ),
      'path' => $path,
      'template' => 'certify-single',
    ),
    'certifyview' => array(
      'variables' => array(
        'node' => NULL,
        'conditionsbytype' => array(),
        'showtitle' => TRUE,
      ),
      'path' => $path,
      'template' => 'certify-view',
    ),
    'certify_xfdf' => array(
      'variables' => array(
        'filename' => '',
        'info' => array(),
        'encoding' => 'UTF-8',
        'stamp' => md5(REQUEST_TIME),
      ),
      'path' => $path,
      'template' => 'certify-xfdf',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function certify_block_info() {
  $blocks['all']['info'] = t('Certify, All certificates');
  $blocks['all_condensed']['info'] = t('Certify, All certificates (condensed)');
  $certs = certify_certificates();
  foreach ($certs as $cnid => $ctitle) {
    $blocks[$cnid]['info'] = 'Certify: ' . check_plain($ctitle);
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function certify_block_view($delta) {
  global $user;
  if (!$user->uid) {
    return;
  }

  $block = array();
  drupal_add_css(drupal_get_path('module', 'certify') . '/styles/certify.css');
  switch ($delta) {
    case 'all':
    case 'all_condensed':
      $certificates = Certify::getCertificates();
      $content = '';

      $group = _certify_og_integrate();
      foreach ($certificates as &$cert) {
        if ($group) {
          // Only display certificates that belongs to this group.
          if (!isset($cert->{OG_AUDIENCE_FIELD}[$cert->language])) {
            continue;
          }
          $part_of_group = FALSE;
          foreach ($cert->{OG_AUDIENCE_FIELD}[$cert->language] as &$audience) {
            if ($audience['gid'] == $group->gid) {
              $part_of_group = TRUE;
            }
          }
          if (!$part_of_group) {
            continue;
          }
        }

        if ($delta == 'all_condensed') {
          // TODO: Condensed should be a configuration option on the "all" block.
          if ($cert->certificate->getStatus()->started) {
            $content .= theme("certifysingle", array('certificate' => $cert, 'showtitle' => TRUE, 'condensed' => TRUE));
          }
        }
        else {
          $content .= theme("certifysingle", array('certificate' => $cert));
        }
      }

      if ($delta == 'all_condensed' && empty($content)) {
        $content = t('You have not started any certificates yet.');
      }

      $block['subject'] = t('Certificate status');
      $block['content'] = $content;
      break;

    default:
      $cert = Certify::getCertificates(array($delta));
      $cert = array_shift($cert);
      $block['subject'] = check_plain($cert->title);
      $block['content'] = theme('certifysingle', array('certificate' => $cert, 'showtitle' => FALSE));
  }
  return $block;
}

/**
 * Implements hook_help().
 */
function certify_help($path, $arg) {
  switch ($path) {
    case "admin/help#certify":
      return check_markup(file_get_contents(drupal_get_path('module', 'certify') . DIRECTORY_SEPARATOR . "/README.txt"));
  }
}

/**
 * Implements hook_form().
 */
function certify_form($node, &$form_state) {
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5,
  );

  // Merge in conditions elements
  $conds = certify_conditiontypes();

  foreach ($conds as $condid => $conditionclass) {
    $condform = call_user_func_array(array($conditionclass, 'certify_form'), array(&$node));
    $form = array_merge($form, $condform);
  }


  if (isset($node->nid)) {
    $form['certificate_template'] = array(
      '#type' => 'item',
      '#title' => t('Certificate template'),
      '#markup' => l(t('Download existing certificate template'), 'node/' . $node->nid . '/certify/download-certificate-preview'),
    );
  }

  $form['#attributes']['enctype'] = 'multipart/form-data';
  $form['certificate_template_upload'] = array(
    '#type' => 'file',
    '#title' => t('Upload new certificate template'),
  );

  return $form;
}

/**
 * Implements hook_insert().
 */
function certify_insert($node) {
  $validators = array('file_validate_extensions' => array('pdf'));
  $file = file_save_upload('certificate_template_upload', $validators, 'certify://');
  if ($file) {
    // Clean up old files
    certifiy_delete_files($node->nid);
    $file->status = FILE_STATUS_PERMANENT;
    $file = file_save($file);
    file_usage_add($file, 'certify', 'node', $node->nid);
  }

  // Process conditions
  $conds = certify_conditiontypes();
  foreach ($conds as $condid => $conditionclass) {
    call_user_func_array(array($conditionclass, 'certify_insert'), array(&$node));
  }
}

/**
 * Implements hook_update().
 */
function certify_update($node) {
  // If $node->revision is true, we're making a brand new revision, and will keep the old conditions. For all other cases, we clear the old conditions
  if (!$node->revision) {
    // TODO: Should the submodules handle this some way?
    // In order to reuse certify_insert (which re-inserts the conditions), we purge them first.

    db_delete('certify_conditions')->condition('vid', $node->vid)->execute();
  }
  
  certify_insert($node);
}

/**
 * Implements hook_load().
 */
function certify_load($nodes) {
  foreach ($nodes as $nid => &$node) {
    $node_properties = new stdClass();
    $node_properties->certificate = new Certify($node);
    foreach ($node_properties as $property => &$value) {
      $node->$property = $value;
    }
  }
}

/**
 * Implements hook_view().
 */
function certify_view($node, $view_mode) {
  if (user_access('view certificate conditions')) {
    $conditionsbytype = $node->certificate->getConditionsByType();
    $node->content['conditions_list'] = array(
      '#value' => theme('certifyview', array('node' => $node, 'conditionsbytype' => $conditionsbytype)),
      '#weight' => 1,
    );
  }

  return $node;
}

/**
 * Implements hook_delete().
 */
function certify_delete($node) {
  $node->certificate->delete($node);
  db_delete('certify_conditions')->condition('cid', $node->nid)->execute();
  
  certifiy_delete_files($node->nid);
}

function certifiy_delete_files($node_id) {
  $certifypath = variable_get('certify_certificate_path', '/var/drupal-content/certify');

  // Delete awarded certificates
  $filemask = $certifypath . DIRECTORY_SEPARATOR . 'cert_*_' . $node_id . '.pdf';
  $certs = glob($filemask);
  foreach ($certs as $cert) {
    if (is_file($cert)) {
      unlink($cert);
    }
  }

  // Delete certificate template
  $templates = db_query("SELECT fm.uri, fm.fid FROM {file_usage} fu JOIN {file_managed} fm ON fu.module = 'certify' AND fu.type = 'node' AND fu.id = :nid AND fu.fid = fm.fid", array(':nid' => $node_id));
  foreach ($templates as $template) {
    $template->path = drupal_realpath($template->uri);
    if (file_exists($template->path)) {
      unlink($template->path);
    }
    db_delete('file_usage')->condition('fid', $template->fid)->execute();
    db_delete('file_managed')->condition('fid', $template->fid)->execute();
  }
}

/**
 * Implements hook_stream_wrappers().
 */
function certify_stream_wrappers() {
  return array(
    'certify' => array(
      'name' => t('Certificate files'),
      'class' => 'CertifyCertificateStreamWrapper',
      'type' => STREAM_WRAPPERS_LOCAL_HIDDEN,
    ),
  );
}

/**
 * Implements hook_mail().
 */
function certify_mail($key, &$message, $params) {
  switch ($key) {
    case 'certificate':
      $message['subject'] = variable_get('certify_email_subject', t('Your certificate'));
      $message['Return-Path'] = $message['from']; // Prevents bug at system.mail.inc:101
      
      $filename = explode(DIRECTORY_SEPARATOR, $params['file_path']);
      $filename = end($filename);

      $file = fopen($params['file_path'], 'rb');
      $data = fread($file, filesize($params['file_path']));
      fclose($file);

      $mime_boundary = '------------' . microtime(TRUE);
      
      $message['headers'] = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'multipart/mixed; boundary="' . $mime_boundary . '"', 
      );
      
      $message['body'] = array(
        "This is a multi-part message in MIME format.\n--" . $mime_boundary . "\n" . 'Content-Type: text/plain; charset="ISO-8859-1"' . "\nContent-Transfer-Encoding: 7bit", 
        variable_get('certify_email_body', t('Congratulations with your newly achieved certification.') . "\n\n" . t('Your certificate should be attached as a PDF file to this email.')),
        "--" . $mime_boundary . "\nContent-Type: application/pdf;\n" . ' name="' . $filename . '"' . "\nContent-Disposition: attachment;\n" . ' filename="' . $filename . '"' . "\nContent-Transfer-Encoding: base64\n\n" . chunk_split(base64_encode($data)) . "\n--" . $mime_boundary . '--'
      );
  }
}

/**
 * Check access to student progress.
 * 
 * @param type $node
 * @return boolean 
 */
function certify_users_progress_access($node) {
  if ($node->type == 'certificate' && user_access('view all certificates')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Display student progress.
 * 
 * @param type $node
 * @return string 
 */
function certify_users_progress($node) {
  $group = _certify_og_integrate();
  $users = $group ? db_query("SELECT u.uid, u.name FROM {og_membership} om JOIN {users} u ON om.gid = :gid AND om.entity_type = 'user' AND om.etid = u.uid", array(':gid' => $group->gid)) : db_query("SELECT u.uid, u.name FROM {users} u ORDER BY u.name ASC");

  $users_running = array();
  $users_idle = array();
  foreach ($users as $user) {
    if ($user->uid) {
      $cert = Certify::getCertificates(array($node->nid), $user->uid);
      if (count($cert)) {
        $cert = array_shift($cert);
        $status = $cert->certificate->getStatus($user->uid);
        $userrow = array();
        $userrow['name'] = check_plain(format_username($user));
        $userrow['progress'] = $status->progress . "%";
        if ($status->progress == 100) {
          $userrow['operations'] = l(t('Regenerate certificate'), 'node/' . $node->nid . '/certify/regenerate-certificate/' . $user->uid);
        }
        else {
          $userrow['operations'] = '';
        }
        if ($status->progress) {
          $users_running[] = $userrow;
        }
        else {
          $users_idle[] = $userrow;
        }
      }
      else {
        // No certificates?
      }
    }
  }

  $content = '';
  if (count($users_running)) {
    $content .= theme('table', array(
      'header' => array(t('User'), t('Progression')),
      'rows' => $users_running,
      'caption' => t('Users'),
      ));
  }

  $idlers = '';
  if (count($users_idle) == 1) {
    $idlers .= $users_idle[0]['name'];
  }
  elseif (count($users_idle) == 2) {
    $idlers .= $users_idle[0]['name'] . ' ' . t('and') . ' ' . $users_idle[1]['name'];
  }
  elseif (count($users_idle) > 2) {
    $idlernames = array_map(create_function('$c', 'return $c["name"];'), $users_idle);
    $lastidler = array_pop($idlernames);
    $idlers .= implode(', ', $idlernames) . ' ' . t('and') . ' ' . $lastidler;
  }
  if (drupal_strlen($idlers) > 0) {
    $content .= t("Not started:") . " {$idlers}.";
  }

  return $content;
}

/**
 * Remove generated PDF file for a given user on a given certificate.
 * 
 * @param type $node
 * @param type $user 
 */
function certify_regenerate($node, $user) {
  $certificate = variable_get('certify_certificate_path', '/var/drupal-content/certify') . DIRECTORY_SEPARATOR . 'cert_' . $user->uid . '_' . $node->nid;
  if (is_file("{$certificate}fdf")) {
    unlink("{$certificate}fdf");
  }
  if (is_file("{$certificate}pdf")) {
    unlink("{$certificate}pdf");
  }

  drupal_set_message(t("Certificate has been regenerated"));
  drupal_goto('node/' . $node->nid . '/certify-users');
}

/**
 * Check access to user certificates page.
 * 
 * @global object $user
 * @param type $account
 * @return boolean 
 */
function certify_user_certificates_access($account) {
  global $user;

  if (user_access('view all certificates') || $user->uid == $account->uid && user_access('view own certificates')) {
    return TRUE;
  }

  return FALSE;
}

/**
 * List the current user's certificates.
 * 
 * @return string HTML.
 */
function certify_user_certificates($account) {
  $certificates = Certify::getCertificates(NULL, $account->uid);
  drupal_add_css(drupal_get_path('module', 'certify') . '/styles/certify.css');
  return theme("certify", array('certificates' => $certificates));
}

/**
 * Let the user download the given certificate.
 * 
 * @param object $account User.
 * @param object $node Node.
 */
function certify_user_download_certificate($account, $node) {
  $status = $node->certificate->getStatus($account->uid);

  if (!$status->completed) {
    drupal_set_message(t("You haven't passed that certificate."), 'error');
    drupal_goto('user/' . $account->uid . '/certify');
  }

  $certificate_path = variable_get('certify_certificate_path', '/var/drupal-content/certify') . DIRECTORY_SEPARATOR . 'cert_' . $account->uid . '_' . $node->nid;
  if (file_exists($certificate_path . '.pdf')) {
    _certify_send_pdf($certificate_path . '.pdf');
  }
  elseif (_certify_generate_certificate($account, $node, $status, $certificate_path)) {
    _certify_send_pdf($certificate_path . '.pdf');
  }
  else {
    drupal_goto('user/' . $account->uid . '/certify');
  }
}

/**
 * Get full system path to a given node's certificate template.
 * 
 * @param int $node_id Node identifier.
 * @return string System path. 
 */
function _certify_get_certificate_template($node_id = NULL) {
  if ($node_id) {
    $file_uri = db_query("SELECT fm.uri FROM {file_usage} fu JOIN {file_managed} fm ON fu.module = 'certify' AND fu.type = 'node' AND fu.id = :nid AND fu.fid = fm.fid", array(':nid' => $node_id))->fetchField();
    if ($file_uri) {
      $file_uri = drupal_realpath($file_uri);
    }
  }
  if (!isset($file_uri) || !$file_uri || !file_exists($file_uri)) {
    $file_uri = drupal_get_path('module', 'certify') . DIRECTORY_SEPARATOR . 'default_certificate.pdf';
  }
  return $file_uri;
}

/**
 * Preview a certificate template.
 * 
 * @param type $node
 * @return string 
 */
function certify_download_certificate_preview($node = NULL) {
  _certify_send_pdf(_certify_get_certificate_template($node ? $node->nid : NULL));
}

/**
 * Get all condition types registered.
 * 
 * @param boolean $reset Force a reset of the condition type cache.
 * @return array Class names, keyed by module name.
 */
function certify_conditiontypes($reset = FALSE) {
  if (!$reset && ($cache = cache_get('certify_conditions')) && isset($cache->data)) {
    return $cache->data;
  }

  // We need to manually call each module so that we can know which module a given item came from.
  $classes = array();
  foreach (module_implements('certify_info') as $module) {
    $classes = array_merge($classes, call_user_func($module . '_certify_info'));
  }

  // Save the lookup table, then return it.
  cache_set('certify_conditions', $classes);
  return $classes;
}

/**
 * @return array Certificate node identifiers.
 */
function certify_certificates() {
  // TODO: organic groups filtering?
  $certs = array();
  $cres = db_query("SELECT nid, title FROM {node} WHERE type = :type", array(':type' => 'certificate'));
  foreach ($cres as $cert) {
    $certs[$cert->nid] = $cert->title;
  }

  return $certs;
}

/**
 * Handles changes for a given condition node
 * 
 * @param int $node_id Node identifier
 */
function certify_nodechanged($node_id) {
  global $user;

  $rs = db_query("SELECT cc.cid, cc.vid, cc.condtype, cc.condnode, n.vid AS condnodev FROM {certify_conditions} cc LEFT JOIN {node} n ON n.nid = cc.condnode WHERE cc.condnode = :node_id", array(':node_id' => $node_id));
  foreach ($rs as $data) {
    $certnode = node_load(NULL, $data->vid);
    $certnode->certificate->scoreChanged();

    if (variable_get('certify_email', FALSE)) {
      $status = $certnode->certificate->getStatus();
      if ($status->completed) {
        // Generate certificate.
        $certificate_path = variable_get('certify_certificate_path', '/var/drupal-content/certify') . DIRECTORY_SEPARATOR . 'cert_' . $user->uid . '_' . $certnode->nid;
        if (_certify_generate_certificate($user, $certnode, $status, $certificate_path)) {
          $message = drupal_mail('certify', 'certificate', format_username($user) . ' <' . $user->mail . '>', $user->language, array('file_path' => $certificate_path . '.pdf'));
          if ($message['result']) {
            drupal_set_message(t('Congratulations! You have just achieved a certification.') . ' ' . t('Your certificate has been sent to your registered email address.'));
          }
          else {
            drupal_set_message(t('Congratulations! You have just achieved a certification.'));
            drupal_set_message(t('Unfortunately there was an error sending your new certificate to your registered email address.'), 'error');
          }
        }
      }
    }
  }
}

/**
 * Sends a pdf file to the browser.
 * 
 * @param string $file 
 */
function _certify_send_pdf($file) {
  drupal_add_http_header('Content-Description', 'File Transfer');
  drupal_add_http_header('Content-Type', 'application/pdf; charset=utf-8');
  $file_name = explode(DIRECTORY_SEPARATOR, $file);
  drupal_add_http_header('Content-Disposition', 'attachment; filename="' . end($file_name) . '"');
  drupal_add_http_header('Content-Transfer-Encoding', 'binary');
  drupal_add_http_header('Expires', '0');
  drupal_add_http_header('Cache-Control', 'must-revalidate, post-check=0, pre-check=0');
  drupal_add_http_header('Pragma', 'public');
  drupal_add_http_header('Content-Length', filesize($file));
  readfile($file);
}

/**
 * Checks to see if we should do OG integration.
 * 
 * @return mixed OG node object or false.
 */
function _certify_og_integrate() {
  if (variable_get('certify_og_filter', TRUE) && module_exists('og_context')) {
    return og_context();
  }
  else {
    return FALSE;
  }
}

/**
 * Generate a given user's certificate.
 * 
 * @param object $account User.
 * @param object $node Node.
 * @param object $status Status.
 * @param string $certificate_path Path to certificate minus extension.
 * @return boolean The result of the generate process. 
 */
function _certify_generate_certificate(&$account, &$node, &$status, &$certificate_path) {
  $datefmt = explode(' ', variable_get('date_format_short', 'm/d/Y'));
  $datefmt = variable_get('certify_dateformat', $datefmt[0]);

  $body = field_view_field('node', $node, 'body', array('label' => 'hidden'));
  $params = array(
    'site_name' => variable_get('site_name', 'Drupal'),
    'full_name' => format_username($account),
    'email' => $account->mail,
    'certificate_name' => $node->title,
    'certificate_desc' => strip_tags(render($body)),
    'issued_date' => format_date(REQUEST_TIME, 'custom', $datefmt),
    'user_id' => $account->uid,
  );

  switch (variable_get('certify_display_score', 'points')) {
    case 'passed':
      $params['score'] = t('Passed');
      break;

    case 'percentage':
      $params['score'] = floor($status->gotpoints / $status->totalpoints * 100);
      break;

    case 'points':
      $params['score'] = t('!gotpoints of !totalpoints', array('!gotpoints' => $status->gotpoints, '!totalpoints' => $status->totalpoints));
  }

  // allow modification of existing and addition of new parameters
  drupal_alter('certify_pdf', $params, $node);

  $file_path = $certificate_path . '.fdf';
  $handle = fopen($file_path, 'wb');

  $file_path_parts = explode(DIRECTORY_SEPARATOR, $file_path);
  fwrite($handle, theme('certify_xfdf', array('filename' => end($file_path_parts), 'info' => $params)));
  fclose($handle);

  // Flatten with PDF
  $drm = '';
  $drmvar = variable_get('certify_drm_passphrase', '');
  if (drupal_strlen($drmvar)) {
    $drm = 'encrypt_128bit owner_pw ' . escapeshellarg($drmvar) . ' allow printing';
  }

  $output = array();
  $exec = variable_get('certify_pdftk_path', '/usr/bin/pdftk') . ' ' . _certify_get_certificate_template($node->nid) . ' fill_form ' . $file_path . ' output ' . $certificate_path . '.pdf flatten ' . $drm . ' 2>&1';

  // Stupid fix for some bad GCJ behaviour - may or may not work, your mileage may vary
  if (strpos(php_uname('s'), 'Windows') !== FALSE || strpos(php_uname('s'), 'Darwin') !== FALSE) {
    putenv('DYLD_LIBRARY_PATH');
  }
  $output = shell_exec($exec);

  // Remove xfdf
  if (is_file($file_path)) {
    unlink($file_path);
  }

  if (file_exists($certificate_path . '.pdf')) {
    watchdog("certify", "Execution of pdftk succeeded.<br />Command line:<br /><code>%exe</code><br />Output:<br /><code>%output</code>", array('%exe' => $exec, '%output' => $output), WATCHDOG_DEBUG);
    return TRUE;
  }
  else {
    watchdog("certify", "Execution of pdftk failed - not installed or wrong path?<br />Command line:<br /><code>%exe</code><br />Output:<br /><code>%output</code>", array('%exe' => $exec, '%output' => $output), WATCHDOG_ERROR);
    drupal_set_message(t("The certificate generation failed. Please contact a system administrator for assistance."), 'error');
    return FALSE;
  }
}
