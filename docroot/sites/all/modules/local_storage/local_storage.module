<?php

/**
 * @file
 * Main file of the module.
 *
 * TODO:
 * 1. Fix TinyMCE infobar issue.          | done
 * 2. Add support for other WYSIWYGs.     | postpone
 * 3. Add icon.                           | done
 * 4. Add more events.                    | done
 * 5. Add support for CKeditor standlone. | done
 * 6. Add Aloha support.                  | postpone
 * 7. Refactor .wysiwyg.js                | done
 * 8. Review WYSIWYG integrations.        | done
 * 9. Review JS once again.               | done
 * 10. Move and rename "Show infobar" setting to plain module.  | done
 * 11. Review wysiwyg and ckeditor as plugins                   | done
 * 12. Rename WYSIWYG plugin from html5ls to ...                | done
 * 13. Storage is flushed sometimes with multiple tabs          |
 * 14. Check if form element still works                        | done
 * 13. Comment the code.                  | done
 * 14. Create README.md                   | done
 * 15. Update project page.               | done
 */

/**
 * Implements hook_modules_installed().
 */
function local_storage_modules_enabled($modules) {
  if (in_array('local_storage', $modules)) {
    $enable = array('local_storage_plain', 'local_storage_message');

    // Add local_storage_wysiwyg module only if module 'wysiwyg' is enabled.
    if (module_exists('wysiwyg')) {
      $enable[] = 'local_storage_wysiwyg';
    }

    // Enable local_storage_ckeditor module only if module 'ckeditor' is enabled.
    if (module_exists('ckeditor')) {
      $enable[] = 'local_storage_ckeditor';
    }

    module_enable($enable);
  }
}

/**
 * Implements hook_element_info_alter().
 */
function local_storage_element_info_alter(&$types) {
  foreach ($types as $name => $type) {
    if (local_storage_element_is_interactive($name)) {
      $types[$name]['#local_storage'] = FALSE;
      local_storage_enable_element($types[$name]);
    }
  }
}

/**
 * Implements hook_field_widget_info_alter().
 */
function local_storage_field_widget_info_alter(&$info) {
  $widget_types = local_storage_get_widget_types();
  foreach ($widget_types as $type => $name) {
    if (isset($info[$type])) {
      if (empty($info[$type]['settings']['local_storage'])) {
        $info[$type]['settings']['local_storage'] = array();
      }
      $info[$type]['settings']['local_storage'] += array('enable' => FALSE) +
        local_storage_default_settings();
    }
  }
}

/**
 * Implements hook_init().
 */
function local_storage_init() {
  $path = drupal_get_path('module', 'local_storage');
  drupal_add_js(
    $path . '/js/local-storage.core.js',
    array('weight' => 5.01)
  );
  drupal_add_js(
    $path . '/js/local-storage.js',
    array('weight' => 6.1)
  );

  // Here will be settings with elements that should be removed from
  // localStorage.
  if (isset($_SESSION['localStorage'])) {
    drupal_add_js(
      array('localStorage' => $_SESSION['localStorage']),
      'setting'
    );
    unset($_SESSION['localStorage']);
  }
}

/**
 * Implements hook_menu().
 */
function local_storage_menu() {
  $items['admin/config/content/local_storage'] = array(
    'title' => 'Local Storage',
    'description' => 'Configure global settings for caching fields.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('local_storage_admin_form'),
    'access arguments' => array('administer local storage'),
    'file' => 'local_storage.admin.php',
  );

  return $items;
}

/**
 * Implements hook_permissions().
 */
function local_storage_permission() {
  return array(
    'administer local storage' => array(
      'title' => t('Administer Local Storage'),
      'description' => t(
        'Perform administration tasks for Local Storage module.'
      ),
    ),
  );
}

/**
 * Implements hook_local_storage_widget_types().
 */
function local_storage_local_storage_widget_types() {
  return array(
    'text_textfield' => t('Textfield'),
    'text_textarea' => t('Textarea'),
    'text_textarea_with_summary' => t('Textarea with summary'),
    'number' => t('Number'),
    'options_select' => t('Select'),
  );
}

/**
 * Implements hook_form_alter().
 *
 * Add module settings to the local storage-capable fields' settings.
 */
function local_storage_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  $settings = $form['#instance']['widget']['settings']['local_storage'];
  $widget_types = array_keys(local_storage_get_widget_types());

  if (in_array($form['#instance']['widget']['type'], $widget_types)) {
    $_fieldset =& $form['instance']['widget']['settings']['local_storage'];
    $_fieldset = (array) $_fieldset;
    $_fieldset += array(
      '#type' => 'fieldset',
      '#title' => t('Local Storage Settings'),
      '#tree' => TRUE,
    );
    $_fieldset['enable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Local Storage'),
      '#default_value' => $settings['enable'],
      '#description' => t('Enable automatic storing of entered data.'),
      '#weight' => 1,
    );
    $_fieldset['default'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show default (original) value by default'),
      '#default_value' => $settings['default'],
      '#weight' => 2,
    );
    $_fieldset['expire'] = array(
      '#type' => 'select',
      '#options' => drupal_map_assoc(range(1, 48)),
      '#title' => t('Expiration time'),
      '#default_value' => $settings['expire'],
      '#description' => t(
        'Set the expiration time for stored data (in hours).'
      ),
      '#weight' => 4,
    );

    $plugins = local_storage_get_plugins();
    $plugins_options = array();
    foreach ($plugins as $plugin_name => $plugin) {
      $plugins_options[$plugin_name] = $plugin['title'];
    }
    $_fieldset['plugins'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Plugins'),
      '#default_value' => $settings['plugins'],
      '#options' => $plugins_options,
      '#description' => t('Plugins to enable for this field.'),
      '#weight' => 5,
    );
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function local_storage_field_widget_form_alter(&$element, &$form_state, &$context) {
  $widget_types = array_keys(local_storage_get_widget_types());

  if (in_array($context['instance']['widget']['type'], $widget_types)) {
    $settings = $context['instance']['widget']['settings'];
    if ($settings['local_storage']['enable']) {
      local_storage_enable_storage(
        $element,
        $settings['local_storage']
      );
    }
  }
}

/**
 * After-build callback for local storage-enabled elements.
 */
function local_storage_element_after_build($element, $form_state) {
  if (!empty($element['#local_storage'])) {
    $local_storage = $element['#local_storage'];
    $path = drupal_get_path('module', 'local_storage');
    $element['#attached']['js'][] = array(
      'type' => 'file',
      'data' => $path . '/js/local-storage.element.js',
      'weight' => 5.02,
    );
    $element['#attached']['css'][] = $path . '/css/local-storage.css';

    // Property can have just TRUE value, so deal with it and create
    // an array for settings.
    if (!is_array($local_storage)) {
      $local_storage = array();
    }

    $local_storage += local_storage_default_settings();

    // Allow other modules to attach files.
    drupal_alter('local_storage_attach', $element, $local_storage);

    $form =& $form_state['complete form'];
    $key = drupal_hash_base64(
      $form['#id'] . drupal_get_token($form['#token']) . current_path()
    );

    $settings = array();
    if (empty($form_state['process_input']) || empty($form_state['submitted'])) {
      $settings['elements'][$key] = array(
        $element['#id'] => $local_storage,
      );
    }
    else {
      $settings['remove'][$key] = array(
        $element['#id'] => $local_storage,
      );

      // Save removal settings to the session.
      if (empty($_SESSION['localStorage'])) {
        $_SESSION['localStorage'] = array();
      }
      $_SESSION['localStorage'] = array_merge_recursive(
        (array) $_SESSION['localStorage'],
        $settings
      );
    }

    $element['#attached']['js'][] = array(
      'type' => 'setting',
      'data' => array(
        'localStorage' => $settings,
      ),
    );
  }
  return $element;
}

/**
 * Enable local storage in given element and its children.
 *
 * @param array $element
 *   Element that needs local storage caching.
 * @param array $settings
 *   Settings for local storage caching.
 */
function local_storage_enable_storage(array &$element, array $settings) {
  $children = element_children($element);
  if ($children) {
    foreach ($children as $name) {
      local_storage_enable_storage($element[$name], $settings);
    }
  }

  if (isset($element['#type'])) {
    if (local_storage_element_is_interactive($element['#type'])) {
      $element['#local_storage'] = $settings;
      local_storage_enable_element($element);
    }
  }
}

/**
 * Set after build callback for element.
 *
 * @param $element
 */
function local_storage_enable_element(&$element) {
  if (!isset($element['#after_build'])) {
    $element['#after_build'] = array();
  }

  if (!in_array('local_storage_element_after_build', (array) $element['#after_build'])) {
    $element['#after_build'][] = 'local_storage_element_after_build';
  }
}

/**
 * Check if given element type is local storage-capable.
 *
 * @param string $element_type
 *   Form element type to check.
 *
 * @return bool
 *   TRUE if element type if local storage-capable, FALSE otherwise.
 */
function local_storage_element_is_interactive($element_type) {
  return in_array($element_type, local_storage_get_element_types());
}

/**
 * Get local storage-capable widgets.
 *
 * @return array
 *   Array of widgets names that are capable
 *   for use with local storage caching.
 */
function local_storage_get_widget_types() {
  return module_invoke_all('local_storage_widget_types');
}

/**
 * Get local storage plugins.
 *
 * @return array
 *    Plugins array.
 */
function local_storage_get_plugins() {
  return module_invoke_all('local_storage_plugins');
}

/**
 * Get local storage-capable elements.
 *
 * @return array
 *    Element types.
 */
function local_storage_get_element_types() {
  return module_invoke_all('local_storage_elements');
}

/**
 * Implements hook_local_storage_elements().
 */
function local_storage_local_storage_elements() {
  return array(
    'textfield',
    'textarea',
    'text_format',
    'select',
//    'checkbox',
//    'radio',
  );
}

/**
 * Get default settings for Local Storage.
 *
 * @return array
 *    Default settings.
 */
function local_storage_default_settings() {
  $defaults =& drupal_static(__FUNCTION__);
  if (!$defaults) {
    $plugins = drupal_map_assoc(array_keys(local_storage_get_plugins()));
    $defaults = array(
      'plugins' => $plugins,
      'default' => variable_get('local_storage_default', 0),
      'expire' => variable_get('local_storage_expire', 48),
    );
  }

  return $defaults;
}
