<?php

/**
 * Implements hook_permission().
 */
function skin_permission() {
  return array(
    'administer skin paths' => array(
      'title' => t('administer skin paths'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function skin_menu() {
  $items['admin/config/content/skin'] = array(
    'title' => 'Skin settings',
    'description' => 'Settings for the Skin module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('skin_settings_form'),
    'access arguments' => array('administer skin paths'),
    'file' => 'skin.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function skin_help($path, $arg) {
  switch ($path) {
    case 'admin/config/skin':
      return '<p>' . t('This module makes it easy to create a "skin" of your theme. Define your paths below, visit your skinned pages, and view the source to copy your skinned HTML.') . '</p>';
  }
}

/**
 * Implements hook_exit().
 */
function skin_exit() {
  // On skin page.
  if (drupal_match_path(drupal_get_path_alias($_GET['q']), variable_get('skin_paths', ''))) {
    // Convert all URLs to absolute, optionally saving a copy of CSS and
    // Javascript files in the skin folder.
    $pattern = '/(href=|src=|action=|longdesc=|@import url\()"([^"]+)"(\);)?/i';
    print preg_replace_callback($pattern, '_skin_replace_callback', ob_get_clean());
  }
}

/**
 * Clears the Skin file cache.
 */
function skin_clear_cache() {
  file_unmanaged_delete_recursive(variable_get('skin_directory', variable_get('file_public_path', conf_path() . '/files') . '/skin'));
}

/**
 * Manipulates the rendered HTML.
 * 
 * $matches[0] - entire match
 * $matches[1] - prefix
 * $matches[2] - URL
 * $matches[3] - suffix
 */
function _skin_replace_callback($matches) {
  // Parse the URL.
  $url = $matches[2];
  $parts = parse_url($url);

  // Skip if URL didn't parse,
  if (empty($parts)
    // or if there's no path,
    or (!isset($parts['path']))
    // or if it's a "mailto" link.
    or (isset($parts['scheme']) and $parts['scheme'] == 'mailto')) {
    return $matches[0];
  }

  global $base_url;
  global $base_path;

  // Strip base URL and base path to get the Drupal path.
  $path = preg_replace('/^(' . preg_quote($base_path, '/') . ')?/', '', $parts['path']);
  $extension = pathinfo($path, PATHINFO_EXTENSION);

  // Relative links need to be prepended with URL base.
  if ($url == $path) {
    $dirname = dirname($_GET['q']) . '/';
    $path = ($dirname != './' ? $dirname : '') . $path;
  }

  // Convert to absolute URL.
  if (empty($parts['host'])) {
    $url = $base_url . $base_path . $path;
  }

  // It's a CSS or Javascript file.
  if (in_array($extension, array('css', 'js'))) {
    $cache = variable_get('skin_cache', 1);
    $optimized = empty($parts['query']);
    $filename = variable_get('skin_directory', variable_get('file_public_path', conf_path() . '/files') . '/skin') . '/' . $path;
    // Cache the file.
    if ($cache == 2 || ($cache == 1 && $optimized)) {
      // Cache file in directory resembling its original location.
      if (file_prepare_directory(dirname($filename), FILE_CREATE_DIRECTORY)) {
        // Optimized CSS files have resolved imports and prefixed paths.
        // Unoptimized Javascript files don't need to be resolved.
        if ($optimized || $extension == 'js') {
          $contents = file_get_contents($path);
        }
        // Unoptimized CSS files need to resolve imports and prefix paths.
        // See drupal_build_css_cache().
        else {
          $contents = drupal_load_stylesheet($path);
          _drupal_build_css_path(NULL, $base_url . $base_path . dirname($path) . '/');
          $contents = preg_replace_callback('/url\(\s*[\'"]?(?![a-z]+:|\/+)([^\'")]+)[\'"]?\s*\)/i', '_drupal_build_css_path', $contents);
        }
        if (file_unmanaged_save_data($contents, $filename, FILE_EXISTS_REPLACE)) {
          $url = file_create_url($filename);
        }
      }
    }
  }

  return $matches[1] . '"' . $url . '"' . (!empty($matches[3]) ? $matches[3] : '');
}
