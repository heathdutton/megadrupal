<?php

/**
 * @file
 * 
 * Visitor Info gathers information about your site visitors.
 *
 * This module creates a block showing the originating city, state, and country
 * of the last XX unique visitors (based on IP) to your site. A Google map is also
 * available at /visitorinfo-map which plots these on a map.
 */

/**
 * Implementation of hook_help().
 * 
 */
function visitorinfo_help($path, $arg) {
  if ($path == 'admin/help#visitorinfo') {
    $helptxt = '<p>' . t('The Visitorinfo module captures the IP address of your visitors, then uses the <a href="@ipdb">IPInfoDB.com</a> API to retrieve the geographic location and provide information to you such as the originating city, state, and country.', array('@ipdb' => 'http://ipinfodb.com')) . '</p>';
    $helptxt .= '<p>' . t('In addition, latitude and longitude coordinates are also captured, and this data is used to pinpoint visitors on a Google map. The map can be found at the <a href="@visitorinfo_url">Visitors Map</a> page', array('@visitorinfo_url' => url('visitorinfo-map'))) . '</p>';
    $helptxt .= '<p>' . t('You will find two new blocks at the <a href="@blocksmanagement">Blocks</a> management page', array('@blocksmanagement' => url('admin/build/block'))) . 'The Visitor Info block will list all the geographical information collected about visitors to your site. And the Visitor Map block will provide you with a Google map.</p>';
    return $helptxt;
  }
}

/**
 * Implementation of hook_perm().
 */
function visitorinfo_perm() {
  return array('access visitorinfo');
}

/**
 * Implementation of hook_menu().
 */
function visitorinfo_menu() {
  $items = array();
  $items['visitorinfo-map'] = array(
    'title' => 'Visitors Map',
    'description' => t('Visitors Map'),
    'page callback' => 'theme',
    'page arguments' => array('visitorinfo_map'),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/visitorinfo'] = array(
    'title' => 'Visitor Info',
    'description' => t('Settings for visitorinfo'),
    'position' => 'left',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('visitorinfo_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,    
  );
  return $items;
}

/**
  * Implementation of hook_theme().
  */
function visitorinfo_theme() {
   return array(
      'visitorinfo_map' => array(
         'arguments' => array(),
      ),
   );
}

/**
 * Return a themed visitor map.
 *
 */
function theme_visitorinfo_map() {
  $default_width = variable_get('visitorinfo_map_width', '100%');
  $default_height = variable_get('visitorinfo_map_height', '300px');
  visitorinfo_initialize();
  // get the map points
  visitorinfo_get_points();
  $output = '<div id="map" class="visitorinfo-map-block" style="width:' . $default_width . '; height:' . $default_height . ';";></div>';
  return $output;
}

function visitorinfo_initialize () {
  // Set some default settings for map start
  $start_zoom = variable_get('visitorinfo_start_zoom', '2'); // 2 will show whole map
  $start_lat = variable_get('visitorinfo_start_lat', '39.467864');
  $start_long = variable_get('visitorinfo_start_long', '-99.843750');
  $disable_scroll_wheel = variable_get('visitorinfo_disable_zoom', '0');
  drupal_add_js(array('startZoom' => $start_zoom), 'setting'); 
  drupal_add_js(array('centerLatitude' => $start_lat), 'setting');
  drupal_add_js(array('centerLongitude' => $start_long), 'setting');
  drupal_add_js(array('disableScrollZoom' => $disable_scroll_wheel), 'setting');
  
  // include js for map functions
  drupal_add_js(drupal_get_path('module','visitorinfo') . '/visitorinfo.js');
  // include the .css file
  drupal_add_css(drupal_get_path('module', 'visitorinfo') . '/visitorinfo.css');
  // print the required google api key
  $maps_url = "<script src=http://maps.google.com/maps?file=api&amp;v=2&amp;key=" . visitorinfo_get_api_key() . " type='text/javascript'></script>";
  drupal_set_html_head($maps_url);
}

function visitorinfo_get_points() {
  // grab the IP's from the db, starting at the bottom
  $sql = "SELECT * FROM {visitorinfo} order by csid desc";
  // put a cap on number of markers to show, default to 200
  // this can be changed on the admin page
  $num_markers = variable_get('visitorinfo_map_markers', '200');
  $result = db_query_range(db_rewrite_sql($sql, '{visitorinfo}', 'csid'), 0, $num_markers);
  // get a count of results
  $count = db_affected_rows($result);  
  $visitors = array();
  while ($data = db_fetch_object($result)) {
    // build an array to hold visitor data, this will be converted
    // to a javascript array with drupal_to_js()
    $visitors[$data->ip]["ip"] = $data->ip; 
    $visitors[$data->ip]["ccode"] = $data->ccode; 
    $visitors[$data->ip]["cname"] = $data->cname;
    $visitors[$data->ip]["state"] = $data->state;      
    $visitors[$data->ip]["city"] = $data->city;
    $visitors[$data->ip]["zip"] = $data->zip;      
    $visitors[$data->ip]["latitude"] = $data->latitude;
    $visitors[$data->ip]["longitude"] = $data->longitude;
  }
  // convert the PHP $visitors array to a javascript array
  drupal_add_js("var visitors = " . drupal_to_js($visitors) . ";", 'inline');
}

/**
 * Implementation of hook_block().
 *
 */
function visitorinfo_block($op='list' , $delta=0, $edit=array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Visitor Info List');
      $blocks[1]['info'] = t('Visitor Map');
      return $blocks;
    case 'view':
      switch ($delta) {
        case 0:
          $blocks['subject'] = t('Visitor List');
          $blocks['content'] = _visitorinfo_get_origin();
	  break;
	case 1:
          $blocks['subject'] = t('Visitor Map');
          $blocks['content'] = theme('visitorinfo_map');
	  break;
      }
	  return $blocks;
  }
}

function _visitorinfo_get_origin() {
 $cols = variable_get('visitorinfo_block_info', array(
    "ip" => "IP",
    "ccode" => "Country Code",
    "cname" => "Country Name",
    "state" => "State",
    "city" => "City",
    "zip" => "Zip",
    "latitude" => "Latitude",
    "longitude" => "Longitude",
    ));
  $block_list_num = variable_get('visitorinfo_block_number', '50');
  $result = db_query("SELECT * FROM {visitorinfo} order by csid desc");
  $visitor_table = "<table>";
  $visitor_table .= "<thead>";
  $visitor_table .= "<tr>";
  if ($cols['ip']) {$visitor_table .= "<td>IP</td>";}
  if ($cols['city']) {$visitor_table .= "<td>City</td>";}
  if ($cols['state']) {$visitor_table .= "<td>State</td>";}
  if ($cols['zip']) {$visitor_table .= "<td>Zip</td>";}
  if ($cols['cname']) {$visitor_table .= "<td>Country</td>";}
  if ($cols['ccode']) {$visitor_table .= "<td>Country Code</td>";}
  if ($cols['latitude']) {$visitor_table .= "<td>Latitude</td>";}
  if ($cols['longitude']) {$visitor_table .= "<td>Longitude</td>";}
  $visitor_table .= "</tr>";
  $visitor_table .= "</thead>";
  $visitor_table .= "<tbody>";
  $num_of_recs = 1;
  while ($data = db_fetch_object($result)) {
    if ($num_of_recs <= $block_list_num) {
      if (($num_of_recs % 2) == 1) {
        $visitor_table .= "<tr class=odd>";
      }
      else {
        $visitor_table .= "<tr class=even>";
      }
      if ($cols['ip']) {$visitor_table .= "<td>" . $data->ip . "</td>";}
      if ($cols['city']) {$visitor_table .= "<td>" . $data->city . "</td>";}
      if ($cols['state']) {$visitor_table .= "<td>" . $data->state . "</td>";}
      if ($cols['zip']) {$visitor_table .= "<td>" . $data->zip . "</td>";}
      if ($cols['cname']) {$visitor_table .= "<td>" . $data->cname . "</td>";}
      if ($cols['ccode']) {$visitor_table .= "<td>" . $data->ccode . "</td>";}
      if ($cols['latitude']) {$visitor_table .= "<td>" . $data->latitude . "</td>";}
      if ($cols['longitude']) {$visitor_table .= "<td>" . $data->longitude . "</td>";}
      $visitor_table .= "</tr>";
      $num_of_recs++;
    }
  } // end while
  $visitor_table .= "</tbody>";
  $visitor_table .= "</table>";
  return $visitor_table;
}

/**
 * Implementation of hook_boot().
 *
 * hook_boot() is used instead of hook_init() because the former
 * is called even if page caching is turned on.
 * This is needed to build a table of visitor IP addresses.
 */
function visitorinfo_boot() {
  // need to get the webservers IP so we can exclude it.
  $servers_ip = $_SERVER['SERVER_ADDR'];
  // get the visitors ip address
  $ip = ip_address();
  if ($servers_ip != $ip) {
    // and see if it is already in the db
    $result = db_query("SELECT ip FROM {visitorinfo} v WHERE v.ip = '%s' ", $ip);
    if (db_affected_rows($result) == 0) { // not in db
      // write ip to db
      db_query("INSERT INTO {visitorinfo} (ip) values ('%s')", $ip);
    }
  }
}

/**
 * Implementation of hook_cron().
 */
function visitorinfo_cron() {
  // create an array to store all empty ips (ip addresses with no geographic
  // information) or rows that need to be updated
  $empty_ips = array();
  $nothing = '';
  
  // check if ip data should be updated
  $interval = variable_get('visitorinfo_update_ip_interval_days', 30);
  if ($interval > 0) {
    // convert days to seconds
    $interval = $interval * 24 * 60 * 60;
    $last_updated_limit = time() - $interval;
    $result = db_query("SELECT csid, ip FROM {visitorinfo} v WHERE v.city = '%s' OR last_updated < %d", $nothing, $last_updated_limit);
  }
  else {
    // otherwise only take empty ips
    $result = db_query("SELECT csid, ip FROM {visitorinfo} v WHERE v.city = '%s' ", $nothing);
  }
  while ($data = db_fetch_object($result)) {
    $empty_ips["$data->csid"] = $data->ip;
  }
  
  // loop through array and call _visitorinfo_get_location($ip, $rec_num) for each
  foreach ($empty_ips as $rec_num => $ip) {
    _visitorinfo_get_location($ip, $rec_num);
    //1000000 = 1 sec
    // ipinfodb.com has a limit of 2 hits per second
    usleep(500000);
  }
}

/**
 * Get information from IPInfoDB.com IP Address Geolocation XML API.
 * 
 * This function requests geolocation information from
 * http://ipinfodb.com/ip_location_api.php. This infomation
 * is then written to the visitorinfo table.
 */
function _visitorinfo_get_location($ip, $rec_num) {
  $url = "http://api.ipinfodb.com/v2/ip_query.php?key=" . visitorinfo_get_ipinfodbapi_key() . "&ip=" . "$ip" . "&timezone=false";
  //request the xml from ipinfodb.com
  $http_result = drupal_http_request($url);
  if ($http_result->code == 200) {
    $xml = simplexml_load_string($http_result->data);
    // save all the returned info
    $city = check_plain($xml->City);
    $ccode = check_plain($xml->CountryCode);
    $cname = check_plain($xml->CountryName);
    $state = check_plain($xml->RegionName);
    $zip = $xml->ZipPostalCode;
    $latitude = $xml->Latitude;
    $longitude = $xml->Longitude;
    if (!empty($city)) {
      $table = 'visitorinfo';
      $record = new stdClass();
      $record->csid = $rec_num;
      $record->ip = $ip;
      $record->ccode = $ccode;
      $record->cname = $cname;
      $record->state = $state;
      $record->city = $city;
      $record->zip = $zip;
      $record->latitude = $latitude;
      $record->longitude = $longitude;
      // save the timestamp of the last update
      $record->last_updated = time();
      // only save to the db if there is sufficient data
      drupal_write_record($table, $record, 'csid');
    }
    // delete record if there is no info for the IP
    else {
      $result = db_query("DELETE FROM {visitorinfo} WHERE ip = '%s' ", $ip);
    }
  }
}

function visitorinfo_settings() {
  // check if gmap.module is installed and if so, grab the maps api key from the variables table
  // thanks goes to the author of the simplemap.module for the following bit.
  $form['visitorinfo_googlekey'] = array(
    '#type' => 'fieldset',
    '#title' => t('Google Maps API Key'),
  );
  if (module_exists('gmap')) {
    $form['visitorinfo_googlekey']['visitorinfo_googleapikey'] = array(
      '#type' => 'markup',
      '#title' => t('Google Maps API Key'),
      '#value' => t('The Google Maps API key provided by the GMap module will be used if available.  You can configure this setting under <a href="@gmapsettings">admin->settings->gmap</a>.  If the GMAP module is removed you will be able to add your api key here.  You can get a key by visiting <a href="@googlemappath">Google maps API sign up page</a>', array('@gmapsettings' => url('admin/settings/gmap'), '@googlemappath' => url('http://code.google.com/apis/maps/signup.html'))),
    );
  }
  else {
    $form['visitorinfo_googlekey']['visitorinfo_googleapikey'] = array(
      '#type' => 'textfield',
      '#title' => t('Google Maps API Key'),
      '#description' => t('Please provide a valid google api key.  You can get a key by visiting <a href="@googlemappath">Google maps API sign up page</a>', array('@googlemappath' => url('http://code.google.com/apis/maps/signup.html'))),
      '#default_value' => variable_get('visitorinfo_googleapikey', ''),
    );
  }
    // create a text field to enter in the now required IPInfodb API Key
    $form['visitorinfo_ipinfodb_key'] = array(
      '#type' => 'fieldset',
      '#title' => t('IPinfoDB API Key'),
    );
    $form['visitorinfo_ipinfodb_key']['visitorinfo_ipinfodb_apikey'] = array(
      '#type' => 'textfield',
      '#title' => t('IPInfo API Key'),
      '#description' => t('Please provide a valid IPInfoDB API key.  You can get a key by visiting <a href="@ipinfoapipath">IPInfoDB API sign up page</a>', array('@ipinfoapipath' => url('http://www.ipinfodb.com/register.php'))),
      '#default_value' => variable_get('visitorinfo_ipinfodb_apikey', ''),
    );
    $form['visitorinfo_markers'] = array(
      '#type' => 'fieldset',
      '#title' => t('Default Map Settings'),
    );
    $form['visitorinfo_markers']['visitorinfo_map_width'] = array(
      '#type' => 'textfield',
      '#title' => t('Default width'),
      '#description' => t('The default width of a Google map, as a CSS length or percentage. Examples: <em>50px</em>, <em>5em</em>, <em>2.5in</em>, <em>95%</em>'),
      '#default_value' => variable_get('visitorinfo_map_width', '100%'),
      '#size' => '10',
    );
    $form['visitorinfo_markers']['visitorinfo_map_height'] = array(
      '#type' => 'textfield',
      '#title' => t('Default height'),
      '#description' => t('The default height of a Google map, as a CSS length or percentage. Examples: <em>50px</em>, <em>5em</em>, <em>2.5in</em>, <em>95%</em>'),
      '#default_value' => variable_get('visitorinfo_map_height', '300px'),
      '#size' => '10',
    ); 
    $form['visitorinfo_markers']['visitorinfo_map_markers'] = array(
      '#type' => 'textfield',
      '#title' => t('Number of visitors to show on map'),
      '#description' => t('Default: 200'),
      '#default_value' => variable_get('visitorinfo_map_markers', '200'),
      '#size' => '10',
    );

    $form['visitorinfo_markers']['visitorinfo_start_zoom'] = array(
      '#type' => 'select',
      '#title' => t('Default Zoom'),
      '#description' => t('The default zoom level of a Google map. Default: 2'),
      '#options' => drupal_map_assoc(range(0, 17)),
      '#default_value' => variable_get('visitorinfo_start_zoom', '2'),
    );

    $form['visitorinfo_markers']['visitorinfo_disable_zoom'] = array(
      '#type' => 'checkbox',
      '#title' => t('Disable Scroll wheel Zoom'),
      '#description' => t('Check the box to disable scroll wheel zoom'),
      '#default_value' => variable_get('visitorinfo_disable_zoom', '0'),
    );
    
    $form['visitorinfo_markers']['visitorinfo_start_lat'] = array(
      '#type' => 'textfield',
      '#title' => t('Starting Latitude'),
      '#description' => t('Default: 39.467864'),
      '#default_value' => variable_get('visitorinfo_start_lat', '39.467864'),
      '#size' => '12',
    );
    $form['visitorinfo_markers']['visitorinfo_start_long'] = array(
      '#type' => 'textfield',
      '#title' => t('Starting Longitude'),
      '#description' => t('Default: -99.843750'),
      '#default_value' => variable_get('visitorinfo_start_long', '-99.843750'),
      '#size' => '10',
    );
    // setup some default block settings
     $form['visitorinfo_block_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Default Visitor List Block Settings'),
    );
 
    $form['visitorinfo_block_settings']['visitorinfo_block_number'] = array(
      '#type' => 'textfield',
      '#title' => t('Number of visitors to show in the Visitor Info list block'),
      '#description' => t('Default: 50'),
      '#default_value' => variable_get('visitorinfo_block_number', '50'),
    );
    $form['visitorinfo_block_settings']['visitorinfo_block_info'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Info Columns'),
    '#options' => array(
      'ip' => t('IP'),
      'state' => t('State'),
      'city' => t('City'),
      'zip' => t('Zip'),
      'ccode' => t('Country Code'),
      'cname' => t('Country Name'),
      'latitude' => t('Latitude'),
      'longitude' => t('Longitude'),
    ),
    '#description' => t('Select the information you want to see.'),
    '#default_value' => variable_get('visitorinfo_block_info', array('ip','city','state','zip','cname','ccode','latitude','longitude')),
  );    

    $form['visitorinfo_update_ip'] = array(
      '#type' => 'fieldset',
      '#title' => t('IP data update settings'),
    );
    
    $form['visitorinfo_update_ip']['visitorinfo_update_ip_interval_days'] = array(
      '#type' => 'textfield',
      '#title' => t('Update interval'),
      '#description' => t('Specifiy an interval in days after which the collected IP data should be updated. Set to 0 to prevent updates. Note that the ipinfodb database is updated monthly.'),
      '#default_value' => variable_get('visitorinfo_update_ip_interval_days', 30),
      '#size' => '10',
    );
    return system_settings_form($form);
}  

function visitorinfo_get_api_key() {
  if (module_exists('gmap')) {
    $key = gmap_get_key();
    if (empty($key)) {
      drupal_set_message('As the GMAP module is installed you must set a api key in the gmap module settings', 'error');
    }
  }
  else {
    $key = variable_get('visitorinfo_googleapikey', '');
    if (empty($key)) {
      drupal_set_message('You must set a Google Maps API key in the Visitor Info settings before the map will work.', 'error');
    }
  }
  return $key;
}

function visitorinfo_get_ipinfodbapi_key() {
  $key = variable_get('visitorinfo_ipinfodb_apikey', '');
  if (empty($key)) {
    drupal_set_message('You must supply an IPInfoDB API Key in order for Visitor Info to be able to do lookups.', 'error');
  }
  return $key;
}

/**
 * Implementation of hook_views_api().
 *
 * This tells drupal that there is Views integration file named 
 * module-name.views.inc 
 */
function visitorinfo_views_api() {
  // Note that you can include 'path' in this array so that your views.inc 
  // file can be stored in a different location.
  return array(
    'api' => 2.0
  );
}