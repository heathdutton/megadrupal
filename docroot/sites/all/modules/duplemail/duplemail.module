<?php

/**
 * @file duplemail.module
 */

/**
 * Implements hook_form_alter
 */
function duplemail_form_alter(&$form, &$form_state, $form_id) {
  // If we're usign the user_profile or user_registration form, then validate the email
  // that we are providing.
  if ($form_id == 'user_profile_form' || $form_id == 'user_register_form') {
    $form['#validate'][] = 'duplemail_form_validate';
  }
  // Add the filtering configuration to the people settings form
  if ($form_id == 'user_admin_settings') {
    $form['email_filtering_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Email Filtering Settings'),
      '#description' => t('When checking for duplicates, check emails in these domains with characters in the usernames. Strips those characters out and compares with our database to look for duplicates'),
      '#weight' => 0,
    );
    $form['email_filtering_settings']['duplemail_email_domains'] = array(
      '#type' => 'textarea',
      '#title' => t('Email Domains'),
      '#description' =>  t('Enter domain names of email addresses to filter. One domain on each line'),
      '#required' => FALSE,
      '#default_value' => variable_get('duplemail_email_domains', 'gmail.com')
    );
    $form['email_filtering_settings']['duplemail_filter_chars'] = array(
      '#type' => 'textfield',
      '#title' => t('Filtering Characters'),
      '#description' => t('Characters to check for and eliminate when doing comparisons of addresses.'),
      '#maxlength' => 10,
      '#default_value' => variable_get('duplemail_filter_chars', '.+'),
    );
  }
}

/** 
 * Our validation form
 *
 * Check for the same username with the filtered elements filtered. The email address must
 * be used by a user other than the current one since we want to allow users to change their
 * email to an unfiltered version if they desire.
 *
  * @return bool
 *   Retuns false if validation fails
 */
function duplemail_form_validate($form, &$form_state) {
  if (!empty($form_state['values']['mail'])) {
    // If the current and new email address are the same then we can skip this check
    if ($form_state['values']['mail'] == $form['#user']->mail) {
      return;
    }
    
    list($username, $domain) = explode('@', $form_state['values']['mail']);

    // Convert our domain list to an array so we can better iterate check it.  
    $domain_list = variable_get('duplemail_email_domains', array());
    $domain_list = explode("\n", $domain_list);

    // Check to see if our domain is in the configured list
    if (in_array($domain, $domain_list)) {
      // We are in the list of emails to check, so remove all characters that we've been
      // configured to remove and compare against all other emails in the system. Depending
      // on the number of users, this could get heavy, so an index on email addresses
      // may become necessary at some point.
      $new_filtered_email = _duplemail_filter_email($form_state['values']['mail']);
      
      // Get all system emails. Do this in memory to improve speed and lessen the hit
      // to the database.
      $result = db_query("SELECT uid,mail FROM {users}");
      while ($udata = $result->fetchObject()) {
        $emails[$udata->uid] = $udata->mail;
      }
      
      // Iterate through our list in memory. I can see this being heavy but we will have
      // to play it by ear to determine if it is not workable or the performance hit is
      // too high.
      foreach ($emails as $uid => $email) {
        if ($new_filtered_email = _duplemail_filter_email($email) && $uid != $form['#user']->uid) {
          // we have this email address already, trigger issue
          form_set_error('mail', t('This email address is already in use by another user. Please select another.'));
          return FALSE;
        }
      }
    }
  }
}

/**
 * Function to filter out unwanted comparison characters
 *
 * @param string email
 *   The unfiltered email address we wish to sanitize
 * @return string email
 *   The sanitized email address
 */
function _duplemail_filter_email($email) {
  $chars = variable_get('duplemail_filter_chars', NULL);
  for ($i = 0; $i < strlen($chars); $i++) {
    $email = str_replace($chars[$i], '', $email);
  }
  return $email;
}
