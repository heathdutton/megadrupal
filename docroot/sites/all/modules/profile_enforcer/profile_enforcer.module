<?php
/**
 * $Id: profile_enforcer.module $
 * The purpose of this module is to check profile2 profile fields are filled or not and
 * then forcely redirect to profile page to edit. 
 **/

/**
  * Implement hook_help()
  */
 function profile_enforcer_help($path, $arg) {
 switch ($path) {
  case 'admin/help#profile_enforcer':
   $output = '';
   $output .= '<h3>' . t('About') . '</h3>';
   $output .= '<p>' . t("Forcing user to edit their profiles based on profile2-profile fields and user account fields are filled or empty.") . '<p>';
   $output .= "<p> You can set page's in block settings (under 'Visibility settings'). For block settings click ".l(t('here'), 'admin/structure/block/manage/profile_enforcer/profile_enforcer_block/configure')." <br /> <b>Note:</b>  <ul><li>This Block must be disable for user/* pages else it throws redirect loop error by browser. (by default it disabled for user/* pages. If you change to 'Only the listed pages' then dont use user/* pages in block visibility settings) </li><li>If block is disabled or has no region then this module will not work.</li>     <li>This block will not have effect on any page output, you can enable this block to any region.</li></ul> </p>";
 return $output;
 
   }
 }

/**
 * Implement hook_permission().
 */
function profile_enforcer_permission() {
  return array(
    'administer profile enforcer' => array(
      'title' => t('Administer profile enforcer'),
      'description' => t('Perform administration tasks for profile enforcer module.'),
    ),
  );
}

/**
 * Implement hook_menu().  
 */
function profile_enforcer_menu() {
  $items['admin/config/people/profile_enforcer'] = array(
    'title' => 'Profile Enforcer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('profile_enforcer_form'),
    'access arguments' => array('administer profile enforcer'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implement hook_form().
 */
function profile_enforcer_form($form, &$form_state) {
  //get the profile types
  $profile_types = db_query("SELECT  `type`  FROM  `profile_type`  WHERE 1 ");
  $options_first = array();
  foreach( $profile_types as $profile_type ){
    $options_first[$profile_type->type] = $profile_type->type;
  }
  //$options_first['user'] = 'User Account';    
  //@link  https://api.drupal.org/api/drupal/modules!field!field.info.inc/function/field_info_instances/7
  //get selected profile from the dropdown_first or persistant variable 'profile-selected'
  $profile_type = !empty($form_state['values']['dropdown_first']) ? $form_state['values']['dropdown_first'] : variable_get('profile-selected');
  if($profile_type  == 'user') {
    $profile2 = field_info_instances('user','user');
  }else{
    $profile2 = field_info_instances('profile2');  
  }
  $form['info-block'] = array(
    '#type' => 'fieldset',
    '#title' => t('Block settings ( Page settings )'),
    '#description' => t("You can set page's in block settings (under 'Visibility settings'). For block settings click ".l(t('here'), 'admin/structure/block/manage/profile_enforcer/profile_enforcer_block/configure')." <br /> <b>Note:</b>  <ul><li>This Block must be disable for user/* pages else it throws redirect loop error by browser. (by default it disabled for user/* pages. If you change to custom pages then dont use user/* pages in block visibility settings) </li><li>If block is disabled or has no region then this module will not work.</li>     <li>This block will not have effect on any page output, you can enable this block to any region.</li></ul>"),
    '#weight' => 0,
  );
  $form['info-redirect'] = array(
    '#type' => 'fieldset',
    '#title' => t('Page Redirect to'),
    '#description' => t(" If any fields(checked fields of profiles above) are empty in the user profile, selected pages( configured in block settings ) of user will redirect to <b>user/uid/edit/< selected profile ></b> <br /> eg., <b>user/10/edit/main</b>  <br /> If Profile form is 'User Account' then it will redirect to <b>user/uid/edit</b> <br /> eg., <b>user/10/edit</b> <br /> <b>Note:</b> Please check user has permissions to edit their profiles"), 
     '#weight' => 3,);
  $form['dropdown_first_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Select profile form'),
    '#weight' => 2,
  );
  $form['dropdown_first_fieldset']['dropdown_first'] = array(
    '#type' => 'select',
    '#options' => array('select' =>'select','user' =>'User account','PROFILE2' =>$options_first),
    '#default_value' => variable_get('profile-selected'), 
    '#ajax' => array(
      'callback' => 'callback_checkbox_fields',
      'wrapper' => 'check-box-replace',
      'effect' => 'fade',
    ),
  );
  $form['dropdown_first_fieldset']['fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Select fields of "'.$profile_type.'" profile'),
    '#description' => t('The module will check whether the following selected fields are filled by user or not  <br /> <br />'),
    '#prefix' => '<div id="check-box-replace">',
    '#suffix' => '</div>',
  );
  if($profile_type  != 'user' && !empty($profile_type)) {   
    foreach(array_keys($profile2[$profile_type]) as $fields_value){
      $form['dropdown_first_fieldset']['fields']["$fields_value"] = array(
        '#type' => 'checkbox',
        '#title' => $fields_value,
        '#default_value' => variable_get($fields_value),
      );
    }
  }elseif($profile_type  == 'user') {
    foreach(array_keys($profile2) as $fields_value){
      $form['dropdown_first_fieldset']['fields']["$fields_value"] = array(
        '#type' => 'checkbox',
        '#title' => $fields_value,
        '#default_value' => variable_get($fields_value),
      );
    }
  }   
  $form['Submit'] = array('#type' => 'submit', '#value' => t('Submit'), '#weight' => 4,);
  return $form;
} 
 
/**
 * Callback element needs only select the portion of the form to be updated.
 * Since #ajax['callback'] return can be HTML or a renderable array (or an
 * array of commands), we can just return a piece of the form.
 * @return renderable array (the checkboxes fieldset)
 */ 
function callback_checkbox_fields($form, $form_state) {
  // The form has already been submitted and updated. We can return the replaced
  // item as it is.
  return $form['dropdown_first_fieldset']['fields']; 
}
/**
 * Implement hook_form_validate().
 */
function profile_enforcer_form_validate($form, &$form_state) {
  $dr_first = $form_state['values']['dropdown_first'];
  if ( $dr_first  == 'select' ) form_set_error('dropdown_first_error', t('Could not be proceed. Profile form should be User Account or Profile2 account'));
}

/**
 * Form submit function.
 */
function profile_enforcer_form_submit($form, &$form_state) {
  switch ($form_state['triggering_element']['#value']) {
    case t('Submit'): // Submit: We're done.  
    global $user;
    $uid = $user->uid;
    $fields =  field_info_fields();
    $profile_selected = $form_state['values']['dropdown_first'];
    //@link  https://api.drupal.org/api/drupal/modules!field!field.info.inc/function/field_info_instances/7
    
    if($profile_selected  == 'user') {
      $profile2_form = field_info_instances('user','user');
      //get form fields of the selected profile
      $main_fields_profile2 = array_keys($profile2_form);
      //save variable 'profile-selected'
      variable_set('profile-selected',$profile_selected);
      //save variable's of selected profile fields if 1 means field is checked 
      foreach($main_fields_profile2 as $profile_fields){
        if($form_state['values']["$profile_fields"] == 1)  {
          variable_set($profile_fields,1);
        }
        else {
          variable_set($profile_fields,0);
        }
      }
    }else{
      $profile2_form = field_info_instances('profile2');
      //get form fields of the selected profile
      $main_fields_profile2 = array_keys($profile2_form[$profile_selected]);
      //save variable 'profile-selected'
      variable_set('profile-selected',$profile_selected);
      //save variable's of selected profile fields if 1 means field is checked 
      foreach($main_fields_profile2 as $profile_fields){
        if($form_state['values']["$profile_fields"] == 1)  {
          variable_set($profile_fields,1);
        }
        else {
          variable_set($profile_fields,0);
        }
      }
    }
    drupal_set_message(t('The form has been submitted'));
  }
  // Since the form builder is called after every AJAX request, we rebuild
  // the form based on $form_state.
  $form_state['rebuild'] = TRUE;
}

/**
 * Implement hook_block_info().
 */
function profile_enforcer_block_info() {  
  $blocks['profile_enforcer_block'] = array('info' => t('profile enforcer'),'visibility' => 'BLOCK_VISIBILITY_NOTLISTED','pages' => 'user/*');
  return $blocks;
}

/**
 * Implement hook_block_view().
 */
function profile_enforcer_block_view($delta = '') {
  global $user;
  $uid = $user->uid;
  $block = array();
  switch ($delta) {
    case 'profile_enforcer_block':
      //check_field_data() will return 0 if any fields is empty else it returns 1
      if(check_field_data() == 0 ) {
        if( variable_get('profile-selected') == 'user' ) { 
          if ($uid > 0)  { drupal_set_message('Please Edit your profile'); drupal_goto('user/'.$uid.'/edit'); }
        }else{
          if ($uid > 0) { drupal_set_message('Please Edit your profile'); drupal_goto('user/'.$uid.'/edit/'.variable_get('profile-selected')); }
        }
      }
    break;
  }
  return $block;
}

/**
 * check_field_data() will return 0 if any fields is empty else it returns 1
 */
function check_field_data() {
  global $user;
  $uid = $user->uid;
  $selected_profile = variable_get('profile-selected');
  $result = array();
  
  if($selected_profile  == 'user') {
    //@link  https://api.drupal.org/api/drupal/modules!field!field.info.inc/function/field_info_instances/7
    $profile2 = field_info_instances('user','user');
    $fields_in_selected_profile = array_keys($profile2);
    $user_data = user_load($user->uid);

    foreach ( $fields_in_selected_profile as $profile_fields_value ) {
      if(variable_get($profile_fields_value) == 1 ) {
        //@link https://api.drupal.org/api/drupal/modules!field!field.module/function/field_get_items/7
        $field = field_get_items('user', $user_data,  $profile_fields_value);
        if($field[0]['value'] == '') {
          $result[$profile_fields_value] = 'empty';
        }
      }
    }
    if( in_array('empty',$result) ){
      return 0;
    }else{
      return 1;
    }
  
  }else{
    //@link  https://api.drupal.org/api/drupal/modules!field!field.info.inc/function/field_info_instances/7
    $profile2 = field_info_instances('profile2');
    $fields_in_selected_profile = array_keys($profile2[$selected_profile]);
    $profile_pid = db_query("SELECT `pid`  FROM  `profile`  WHERE  `uid` = $uid AND  `type` =  '$selected_profile'");
    // if $profile_exists_for_user return 0 means profile has not been attempted by user ( all fields are empty )
    $profile_exists_for_user = $profile_pid->rowCount();
    // $user_profile is entity type
    // Fetch profiles by account. @link  http://drupalcontrib.org/api/drupal/contributions!profile2!profile2.module/function/profile2_load_by_user/7
    $user_profile = profile2_load_by_user($uid,$selected_profile);

    if( $profile_exists_for_user >= 1 ){
      foreach ( $fields_in_selected_profile as $profile_fields_value ) {
        if(variable_get($profile_fields_value) == 1 ) {
          //@link https://api.drupal.org/api/drupal/modules!field!field.module/function/field_get_items/7
          $field = field_get_items('profile2', $user_profile,  $profile_fields_value);
          if(!$field) {
            $result[$profile_fields_value] = 'empty';
          }
        }
      }
      if( in_array('empty',$result) ){
        return 0;
      }
      else{
        return 1;
      }
    }elseif($profile_exists_for_user == 0){
      return 0;
    }
   
  }
 
}
