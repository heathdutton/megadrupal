<?php


/**
 * @file
 * Render a google map based on locations defined in the page by geo microformats.
 *
 * GEOMAP creates a simple google map block that will display a map using geo microformat information
 * embedded in the current page. If no geo information exists, no map will be displayed.
 *
 * This module has now been redesigned to work with the geolocation field widet. This module does not
 * worry about storing the data, it simply renders GEO Microformat to the page.
 *
 * More information on GEO Microformats: http://microformats.org/wiki/geo
 */

/**
 * Implements hook_menu().
 *
 */
function geomap_menu() {
  $items = array();
  
  $items['admin/config/content/geomap'] = array(
    'title' => 'Geomap Settings',
    'description' => 'Change the settings for the GoogleMaps Geomap map.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geomap_admin_form'),
    'access arguments' => array('administer site configuration'),
    'menu_name' => 'management',
    'file' => 'geomap_admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/content/geomap/main'] = array(
    'title' => 'Geomap Settings',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'menu_name' => 'management',
  );

  //Admin form callbacks
  $items['geomap/admin/verify_domain'] = array(
    'title' => 'Verification for the domain name',
    'type' => MENU_CALLBACK,
    'page callback' => 'geomap_admin_verify_domain',
    'access arguments' => array('administer geomap'),
    'file' => 'geomap_admin.inc',
  );

  $items['geomap/admin/add_domain_key'] = array(
    'title' => 'Verification for the key',
    'type' => MENU_CALLBACK,
    'page callback' => 'geomap_admin_verify_key',
    'access arguments' => array('administer geomap'),
    'file' => 'geomap_admin.inc',
  );

  $items['geomap/admin/delete_key'] = array(
    'title' => 'Delete the key for a domain',
    'type' => MENU_CALLBACK,
    'page callback' => 'geomap_admin_delete_key',
    'access arguments' => array('administer geomap'),
    'file' => 'geomap_admin.inc',
  );

  $items['geomap/admin/hook_geomap'] = array(
    'title' => 'Implement hook_geomap',
    'type' => MENU_CALLBACK,
    'page callback' => 'geomap_admin_hook_geomap',
    'access arguments' => array('view geomap'),
    'file' => 'geomap_admin.inc',
  );

  return $items;

}

/**
 * Implements hook_permission().
 */
function geomap_permission() {
  return array(
    "administer geomap" => array(
      'title' => t("administer geomap"),
      'description' => t('Administer Geomap'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function geomap_block_info() {
  $blocks['map'] = array(
    'info' => t('Geo Microformat Googlemap'),
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function geomap_block_configure($delta) { }

/**
 * Implements hook_block_save().
 */
function geomap_block_save($delta, $edit) { }

/**
 * Implements hook_block_view().
 */
function geomap_block_view($delta) {
  $block = array(
    'subject' => t('geo map'),
    'content' => theme('geomap', array('delta' => $delta)),
  );
  return $block;
}

/**
 * Determine whether or not the geomap has been rendered on this page.
 *
 * @return boolean True if map has been rendered.
 */
function geomap_rendered() {
  return $GLOBALS['geomap'];
}

/**
 * JS was not loading in the theme function, so maybe it will load if we place it here!
 */
function geomap_init() {
  /* Defines a different set of behaviour for the draggable */
  $path_to_geomap = drupal_get_path('module', 'geomap');
  
  /* The override process is very expensive. To be removed.*/
  $overrides = _geomap_get_customisations($path_to_geomap . '/custom');
  
  $check_for_overrides = array(
    'jquery.googlemaps.js', 
    'geomap.css',
  );
  
  drupal_add_js('https://maps.googleapis.com/maps/api/js?sensor=false', 'external');

  if (count($overrides)) {
    foreach ($overrides as $k => $v) {
      if ($v) {
        switch ($k) {
          case 'jquery.googlemaps.js':
            drupal_add_js($path_to_geomap . '/custom/' . $k);
            break;
          default:
            drupal_add_css($path_to_geomap . '/custom/' . $k);
        }
        unset($check_for_overrides[$k]);
      }
    }
  }
    
  if (count($check_for_overrides)) {
    foreach ($check_for_overrides as $v) {
      switch ($v) {
        case 'jquery.googlemaps.js':
          drupal_add_js($path_to_geomap . '/' . $v);
          break;
        default:
          drupal_add_css($path_to_geomap . '/' . $v);
          break;
      }
    }
  }
}

/**
 * Implements hook_theme().
 *
 * The theme functions "geomap_windowtext" and below
 * allow a programmer to take a PHP array and return
 * a correctly formatted Geo Microformat (HTML) string that
 * s/he may print in a template page.
 *
 * A user publishing content may still bypass these formatting
 * functions entirely and print raw HTML to the page. The
 * JQuery map script will gather that information and render
 * the google map
 *
 */
function geomap_theme() {
  $path_to_geomap_theme = drupal_get_path('module', 'geomap') . '/theme';

  return array(
    'geomap' => array(
      'variables' => array(
        'delta' => 0,
      ),
      'file' => 'geomap_theme.inc',
      'path' => $path_to_geomap_theme,
      'template' => 'geomap',
    ),
    'geomap_google_key' => array(
      'variables' => array(
        'domain' => NULL,
      ),
      'path' => $path_to_geomap_theme,
      'file' => 'geomap_theme.inc',
    ),
    'geomap_windowtext' => array(
      'variables' => array(
        'text' => "",
        'text_classes' => NULL,
        'text_id' => NULL,
      ),
      'file' => 'geomap_theme.inc',
      'path' => $path_to_geomap_theme,
      'template' => 'geomap-windowtext',
    ),
    'geomap_infowindow' => array(
      'variables' => array(
        'windowtext' => array(),
        'infowindow_classes' => NULL,
        'infowindow_id' => NULL,
      ),
      'file' => 'geomap_theme.inc',
      'path' => $path_to_geomap_theme,
      'template' => 'geomap-infowindow',
    ),
    'geomap_icon' => array(
      'variables' => array(
        'src' => NULL,
        'icon_classes' => NULL,
        'icon_id' => NULL,
        'icon_options' => array(),
      ),
      'file' => 'geomap_theme.inc',
      'path' => $path_to_geomap_theme,
      'template' => 'geomap-icon',
    ),
    'geomap_marker' => array(
      'variables' => array(
        'icon' => NULL,
        'infowindow' => NULL,
      ),
      'file' => 'geomap_theme.inc',
      'path' => $path_to_geomap_theme,
      'template' => 'geomap-marker',
    ),
    'geomap_geolocation' => array(
      'variables' => array(
        'title' => NULL,
        'latitude' => NULL,
        'longitude' => NULL,
        'nid' => NULL,
        'type' => NULL,
        'path' => NULL,
        'tids' => NULL,
        'marker' => NULL,
      ),
      'file' => 'geomap_theme.inc',
      'path' => $path_to_geomap_theme,
      'template' => 'geomap-geolocation',
    ),
    'geomap_geolocations' => array(
      'variables' => array(
        'geolocations' => array(),
        'geolocations_classes' => NULL,
        'geolocations_id' => NULL,
      ),
      'file' => 'geomap_theme.inc',
      'path' => $path_to_geomap_theme,
      'template' => 'geomap-geolocations',
    ),
  );
}

/**
 * helper function to load all overriden files in the custom folder
 */
function _geomap_get_customisations($path = NULL) {
  if ($path === NULL) {
    return array();
  }

  $files = file_scan_directory($path, '/.$/');
  $return = array();

  foreach ($files as $k => $file) {
    if ($file->filename != "README.txt") {
      $return[$file->filename] = TRUE;
    }
  }

  return $return;
}
