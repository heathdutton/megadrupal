<?php
/**
 * @file 
 *   Geomap Fields module
 * 
 * @author Jeremy J. Chinquist (jjchinquist)
 * 
 */

/**
 * Implementation of hook_field_formatter_info
 * @author jjchinquist
 * @return format
 */
function geomap_fields_field_formatter_info() {
  return array(
      'geomap_fields_formatter_basic' => array(
          'label' => 'Geo Microformat Basic',
          'field types' => array('geolocation_latlng'),
          'settings' => array(
              'geomap_fields_microformat_visible' => 1,
              'geomap_fields_microformat_title' => '[node:title]',
              'geomap_fields_microformat_latitude_longitude_display_format' => 'Degrees',
              'geomap_fields_window_text' => '',
              'geomap_fields_marker_link_to_entity' => 1,
              'geomap_fields_marker_icon' => '',
              'geomap_fields_marker_icon_shadow' => '',
              'geomap_fields_marker_icon_transparent' => '',
              'geomap_fields_marker_icon_width' => 0,
              'geomap_fields_marker_icon_height' => 0,
              'geomap_fields_marker_icon_anchor_x' => 0,
              'geomap_fields_marker_icon_anchor_y' => 0,
          ),
      ),
  );
}


/**
 * 
 * Implements hook_field_formatter_settings_summary().
 * 
 * @author jjchinquist
 * @param $field
 * @param $instance
 * @param $view_mode
 * @return summary
 */
function geomap_fields_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';
  
  $summary .= '<strong>' . t('Geo Microformat settings') . ':</strong><br />';
  $summary .= ' - <strong>' . t('Microformat Visible') . ':</strong> ' . ($settings['geomap_fields_microformat_visible'] ? t('Yes') : t('No') ) . '<br />';
  $summary .= ' - <strong>' . t('Microformat title') . ':</strong> ' . check_plain($settings['geomap_fields_microformat_title']) . '<br />';
  $summary .= ' - <strong>' . t('Microformat lat/lng display format') . ':</strong> ' . check_plain(t('@geomap_fields_lat_lng_display', array('@geomap_fields_lat_lng_display' => $settings['geomap_fields_microformat_latitude_longitude_display_format'], ))) . '<br />';
  $summary .= '<strong>' . t('Window settings') . ':</strong><br />';
  $summary .= ' - <strong>' . t('Window text') . ':</strong> ' . ($settings['geomap_fields_window_text'] == '' ? t('- none -') : check_plain($settings['geomap_fields_window_text'])) . '<br />';
  $summary .= '<strong>' . t('Marker Settings') . ':</strong><br />';
  $summary .= ' - <strong>' . t('Link marker to entity') . ':</strong> ' . ($settings['geomap_fields_marker_link_to_entity'] ? t('Yes') : t('No') ) . '<br />';
  $summary .= ' - <strong>' . t('Icon') . ':</strong> ' . ($settings['geomap_fields_marker_icon'] == '' ? t('- default -') : check_plain($settings['geomap_fields_marker_icon'])) . '<br />';
  $summary .= ' - <strong>' . t('Shadow Icon') . ':</strong> ' . ($settings['geomap_fields_marker_icon_shadow'] == '' ? t('- default -') : check_plain($settings['geomap_fields_marker_icon_shadow'])) . '<br />';
  $summary .= ' - <strong>' . t('Transparent Icon') . ':</strong> ' . ($settings['geomap_fields_marker_icon_transparent'] == '' ? t('- default -') : check_plain($settings['geomap_fields_marker_icon_transparent'])) . '<br />';
  $summary .= ' - <strong>' . t('Size (X, Y)') . ':</strong> (' . (int) $settings['geomap_fields_marker_icon_width'] . ', ' . (int) $settings['geomap_fields_marker_icon_height'] . ')<br />';
  $summary .= ' - <strong>' . t('Offset (X, Y)') . ':</strong> (' . (int) $settings['geomap_fields_marker_icon_anchor_x'] . ', ' . (int) $settings['geomap_fields_marker_icon_anchor_y'] . ')<br />';
  return $summary;
}

/**
 * Implementation of hook_field_formatter_settings_form
 * 
 * @author jjchinquist
 * @param $field
 * @param $instance
 * @param $view_mode
 * @param $form
 * @param $form_state
 * @return $element
 */
function geomap_fields_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();
  
  $element['geomap_fields_microformat_visible'] = array(
      '#type' => 'checkbox',
      '#title' => t('Microformat Visible'),
      '#description' => t('Should the GEO Microformat be visible to the reader?'),
      '#default_value' => $settings['geomap_fields_microformat_visible'],
  );

  $element['geomap_fields_microformat_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Microformat title'),
      '#description' => t('Use tokens to load the title of the marker dynamically.'),
      '#default_value' => $settings['geomap_fields_microformat_title'],
  );

  $element['geomap_fields_microformat_latitude_longitude_display_format'] = array(
      '#type' => 'select',
      '#title' => t('Latitdue and longitude display format'),
      '#description' => 'Not yet supported. ' . t('Choose which format to display the latitude and longitude. For this to work, the Microformat must also be visible.'),
      '#default_value' => $settings['geomap_fields_microformat_latitude_longitude_display_format'],
      '#options' => array(
        'Decimal' => t('Decimal'),
        'Degrees' => t('Degrees'),
      ),
  );

  $element['geomap_fields_window_text'] = array(
      '#type' => 'textfield',
      '#title' => t('Window text'),
      '#description' => t('Use tokens to load the window text of the marker dynamically.'),
      '#default_value' => $settings['geomap_fields_window_text'],
  );

  $element['geomap_fields_marker_link_to_entity'] = array(
      '#type' => 'checkbox',
      '#title' => t('Link to entity'),
      '#description' => t('Should the marker link to the entity?'),
      '#default_value' => $settings['geomap_fields_marker_link_to_entity'],
  );

  $element['geomap_fields_marker_icon'] = array(
      '#type' => 'textfield',
      '#title' => t('Marker » Icon'),
      '#description' => t('Set the path to the marker icon you wish to use. Path can be absolute (with http://) or relative to the Drupal instalation - from the base path. If left blank, the default will be used. To make it dynamic or load from a field, use tokens. Leave blank to use the Google Map default marker.'),
      '#default_value' => $settings['geomap_fields_marker_icon'],
  );

  $element['geomap_fields_marker_icon_shadow'] = array(
      '#type' => 'textfield',
      '#title' => t('Marker » Shadow icon'),
      '#description' => t('Set the path to the marker shadow you wish to use. Path can be absolute (with http://) or relative to the Drupal instalation - from the base path. If left blank, the default will be used. To make it dynamic or load from a field, use tokens. Leave blank to use the Google Map default marker. It should be the same format and size as the icon to work properly.'),
      '#default_value' => $settings['geomap_fields_marker_icon_shadow'],
  );

  $element['geomap_fields_marker_icon_transparent'] = array(
      '#type' => 'textfield',
      '#title' => t('Marker » Transparent Icon'),
      '#description' => t('Set the path to the marker transparent image you wish to use. Path can be absolute (with http://) or relative to the Drupal instalation - from the base path. If left blank, the default will be used. To make it dynamic or load from a field, use tokens. Leave blank to use the Google Map default marker. It should be the same format and size as the icon to work properly.'),
      '#default_value' => $settings['geomap_fields_marker_icon_transparent'],
  );
  
  $element['geomap_fields_marker_icon_width'] = array( //@todo: number field, validation
      '#type' => 'textfield',
      '#title' => t('Marker » Icon width'),
      '#description' => t('Set the marker icon size manually.'),
      '#default_value' => $settings['geomap_fields_marker_icon_width'],
  );
  
  $element['geomap_fields_marker_icon_height'] = array( //@todo: number field, validation
      '#type' => 'textfield',
      '#title' => t('Marker » Icon height'),
      '#description' => t('Set the marker icon size manually.'),
      '#default_value' => $settings['geomap_fields_marker_icon_height'],
  );

  $element['geomap_fields_marker_icon_anchor_x'] = array(
      '#type' => 'textfield', //@todo: make integer field
      '#size' => 4,
      '#title' => t('Marker » Anchor X'),
      '#description' => t('The icon point will be placed x pixels to the right of the lower left corner of the image. Leave blank to use the Google Map default settings. It should be the same format and size as the icon to work properly.'),
      '#default_value' => $settings['geomap_fields_marker_icon_anchor_x'],
  );

  $element['geomap_fields_marker_icon_anchor_y'] = array(
      '#type' => 'textfield', //@todo: make integer field
      '#size' => 4,
      '#title' => t('Marker » Anchor Y'),
      '#description' => t('The icon point will be placed Y pixels above the lower left corner of the icon. Leave blank to use the Google Map default settings. It should be the same format and size as the icon to work properly.'),
      '#default_value' => $settings['geomap_fields_marker_icon_anchor_y'],
  );
  
  $element['tokens'] = array(
    '#type' => 'markup',
    '#markup' => theme('token_tree', array('token_types' => 'all', 'click_insert' => TRUE, 'show_restricted' => FALSE)), 
  );

  return $element;
}

/**
 * Implements hook_field_formatter_view().
 * 
 * @author jjchinquist
 * @param $entity_type
 * @param $entity
 * @param $field
 * @param $instance
 * @param $langcode
 * @param $items
 * @param $display
 * @return $element
 */
function geomap_fields_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $element = array();

  switch ($display['type']) {

    case 'geomap_fields_formatter_basic':
      foreach ($items as $delta => $item) {
        //replace tokens in the settings values
        $settings['geomap_fields_microformat_title'] = token_replace($settings['geomap_fields_microformat_title'], array($entity_type => $entity));
        $settings['geomap_fields_window_text'] = token_replace($settings['geomap_fields_window_text'], array($entity_type => $entity));
        $settings['geomap_fields_marker_icon'] = token_replace($settings['geomap_fields_marker_icon'], array($entity_type => $entity));
        $settings['geomap_fields_marker_icon_shadow'] = token_replace($settings['geomap_fields_marker_icon_shadow'], array($entity_type => $entity));
        $settings['geomap_fields_marker_icon_transparent'] = token_replace($settings['geomap_fields_marker_icon_transparent'], array($entity_type => $entity));
        
        //drupal_set_message('Item: <pre>' . print_r($item, 1) . '</pre>Settings<pre>' . print_r($settings, 1) . '</pre>');
        $geolocations['geolocations'][0] = array(
          'title' => $settings['geomap_fields_microformat_title'], //@todo implement field settings properly
          'title_display' => $settings['geomap_fields_microformat_title'], //@todo implement field settings properly
          'latitude' =>  $item['lat'], //@todo implement field settings properly
          'latitude_display' => ($item['lat']), //@todo implement field settings properly
          'longitude' => $item['lng'],
          'longitude_display' => ($item['lng']),
          'nid' => (($entity_type == 'node' && $settings['geomap_fields_marker_link_to_entity'] && $entity->nid) ? $entity->nid : NULL),
          'path' => (($settings['geomap_fields_marker_link_to_entity'] && $entity->nid) ? url($entity_type . '/' . $entity->nid, array('absolute' => TRUE)) : NULL),
          'type' => $entity->type,
          'microformat_visible' => $settings['geomap_fields_microformat_visible'] ? 1 : 0,
          'marker' => array(
            'infowindow' => array(
              'windowtext' => array(
                'text' => ($settings['geomap_fields_window_text'] && strlen($settings['geomap_fields_window_text']) ? $settings['geomap_fields_window_text'] : NULL),
              ),
            ),
            'icon' => array(
              'src' => $settings['geomap_fields_marker_icon'],
              'icon_classes' => NULL, //@todo
              'icon_id' => NULL, //@todo
              'icon_options' => array(
                array(
                  'option_classes' => NULL,
                  'option_name' => "shadow",
                  'option_value' => ($settings['geomap_fields_marker_icon_shadow'] && strlen($settings['geomap_fields_marker_icon_shadow']) ? $settings['geomap_fields_marker_icon_shadow'] : NULL),
                ),
                array(
                  'option_classes' => NULL,
                  'option_name' => "transparent",
                  'option_value' => ($settings['geomap_fields_marker_icon_transparent'] && strlen($settings['geomap_fields_marker_icon_transparent']) ? $settings['geomap_fields_marker_icon_transparent'] : NULL),
                ),
                array(
                  'option_classes' => NULL,
                  'option_name' => "iconwidth",
                  'option_value' => ($settings['geomap_fields_marker_icon_width'] ? $settings['geomap_fields_marker_icon_width'] : NULL),
                ),
                array(
                  'option_classes' => NULL,
                  'option_name' => "iconheight",
                  'option_value' => ($settings['geomap_fields_marker_icon_height'] ? $settings['geomap_fields_marker_icon_height'] : NULL),
                ),
                array(
                  'option_classes' => NULL,
                  'option_name' => "iconanchor_x",
                  'option_value' => ($settings['geomap_fields_marker_icon_anchor_x'] ? $settings['geomap_fields_marker_icon_anchor_x'] : NULL),
                ),
                array(
                  'option_classes' => NULL,
                  'option_name' => "iconanchor_y",
                  'option_value' => ($settings['geomap_fields_marker_icon_anchor_y'] ? $settings['geomap_fields_marker_icon_anchor_y'] : NULL),
                ),
              ),
            ),
          ),
        );

        //drupal_set_message('Themed: ' . htmlspecialchars(theme('geomap_geolocations', $geolocations)));
        $element[$delta]['#markup'] = theme('geomap_geolocations', $geolocations); //@todo collapse all deltas into 1?
      }
      break;
  }
  return $element;
}