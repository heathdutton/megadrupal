<?php

/**
 * @file
 * ios.module
 */

/**
 * Implementation of hook_menu().
 */
function ios_menu() {
  $items = array();
    
  $items['ios'] = array(
    'title' => 'Instant Operating System',
    'access arguments' => array('access content'),
    'page callback' => 'ios_method_call',
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Call method.
 */
function ios_method_call() {

  // Check if method is not set.
  if (!isset($_REQUEST['method'])) {
    $json = drupal_json_encode(array("error" => "Method is not set."));
  } else {
    // Get list of all methods.
    $methods = ios_method_list();

    // Iterate through methods.
    $method_found = FALSE;
    foreach ($methods as $method) {
      if ($method['method'] == $_REQUEST['method']) {
        $method_found = TRUE;
        $method_callback = $method['callback'];
      
        // Check for missing arguments.
        $miss_arg = FALSE;
        $args = array();
        foreach($method['args'] as $arg) {
          if(isset($_REQUEST[$arg['name']])) {
            $args[] = $_REQUEST[$arg['name']];
          } elseif(!($arg['optional'])) {
	    $miss_arg = TRUE;
            $json = drupal_json_encode(array("error" => "Required argument ". $arg['name'] ." missing."));
          } else {
            $args[$arg['name']] = NULL;
          }
        }

	// Break iteration since method has been found.
	break;
      }
    }

    // Method not found.
    if (!($method_found)) {
      $json = drupal_json_encode(array("error" => "Method ". $_REQUEST['method'] ." not found."));
    }

    // Call method if it has been found and there are no missing arguments.
    if (($method_found) && !($miss_arg)) {
      $result = call_user_func_array($method_callback, $args);
      $json = drupal_json_encode($result);
    }

  }

  // Check if callback or debug are set.
  if ($_REQUEST['callback']) {
      header("Content-type: text/javascript");
      print $_REQUEST['$callback'] ."(". $json .");";
  } elseif ($_REQUEST['debug']) {
      header("Content-type: text/plain");
      print $json;
  } else {
      header("Content-type: application/json");
      print $json;
  }

  // Don't output HTML.
  exit();

}

/**
   * List methods.
 */
function ios_method_list() {
  static $methods_cache;

  // Cache methods if they have not been cached yet.
  if (!isset($methods_cache)) {
    $methods = module_invoke_all('ios');
    
    // Iterate through methods.
    foreach ($methods as $key => $method) {
      
      if (!isset($methods[$key]['args'])) {
        $methods[$key]['args'] = array();
      }
      
      // Set defaults for args.
      foreach ($methods[$key]['args'] as $arg_key => $arg) {
        if (is_array($arg)) {
          if (!isset($arg['optional'])) {
            $methods[$key]['args'][$arg_key]['optional'] = false;
          }
        }
        else {
          $arr_arg = array();
          $arr_arg['name'] = t('unnamed');
          $arr_arg['type'] = $arg;
          $arr_arg['description'] = t('No description given.');
          $arr_arg['optional'] = false;
          $methods[$key]['args'][$arg_key] = $arr_arg;
        }
      }
      reset($methods[$key]['args']);
    }

    $methods_cache = $methods;
  }

  return $methods_cache;
}
