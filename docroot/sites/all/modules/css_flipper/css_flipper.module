<?php

/**
 * Implements hook_css_alter().
 */
function css_flipper_css_alter(&$css) {
  global $language;
  foreach ($css as $data => $item) {
    // Only provide overrides for files.
    if ($item['type'] == 'file') {
      $pathinfo = pathinfo($item['data']);
      if (!empty($pathinfo['extension'])) {
        $extens = ".{$pathinfo['extension']}";
        // If the current language is LTR, add the file with the LTR overrides.
        if ($language->direction == LANGUAGE_LTR) {
          $dir_path = str_replace($extens, "-auto-ltr{$extens}", $item['data']);
        }
        // If the current language is RTL, add the file with the RTL overrides.
        elseif ($language->direction == LANGUAGE_RTL) {
          $dir_path = str_replace($extens, "-auto-rtl{$extens}", $item['data']);
        }
        // If the file exists, add the file with the dir (LTR/RTL) overrides.
        if (isset($dir_path) && file_exists($dir_path) && !isset($css[$dir_path])) {
          // Replicate the same item, but with the dir (RTL/LTR) path and a little larger
          // weight so that it appears directly after the original CSS file.
          $pathinfo = pathinfo($dir_path);
          $flipped_path = variable_get('file_directory_path', conf_path() . '/files') . '/css/' . $pathinfo['basename'];
          $cid = 'css_flipper:' . $pathinfo['basename'];
          $cached = cache_get($cid, 'cache_page');
          if (empty($cached->data)) {
            cache_set($cid, time(), 'cache_page', CACHE_TEMPORARY);
            // Compile the flipped css
            css_flipper_create($dir_path, $flipped_path);
          }
          $item['data'] = $flipped_path;
          $item['weight'] += 0.0001;
          $css[$flipped_path] = $item;
        }
      }
    }
  }
}

/**
 * Search for lines that look like :
 * @flip {file: "path/to/filename.scss"};
 * and replace them with a flipped version of filename.scss
 * Then, create the stylesheet in the files directory
 *
 * @param   string   $path   path to the original style sheet
 * @param   string   $dest   where the compiled file should be saved
 */
function css_flipper_create($path, $dest) {

  // Open and read the file.
  $c = file_get_contents($path);

  $data = preg_replace_callback('/@flip\s*\{\s*file\s*:\s*("[^"]+"|\'[^\']+\')[\s;]*\}/', 'css_flipper_flip', $c);

  $directory = variable_get('file_directory_path', conf_path() . '/files') . '/css/';
  file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
  file_unmanaged_save_data($data, $dest, FILE_EXISTS_REPLACE);
}

/**
 * [css_flipper_flip description]
 * @param  array   $match   returned from preg_replace_callback()
 * @return string           flipped css
 */
function css_flipper_flip($match) {
  list(, $fname) = $match;
  $fname = trim($fname, '"\'');
  if (isset($fname) && file_exists($fname)) {
    require_once dirname(__FILE__) . '/flipper.inc';

    // Open and read the file.
    $c = file_get_contents($fname);
    // create RTL object
    $Flipper = new Flipper;
    // do our job! LOL
    $output = '/** Starting Auto-Flip **/';
    $output .= $Flipper->parse_css($c);
    $output .= '/** Ending Auto-Flip **/';

    return $output;
  }
}
