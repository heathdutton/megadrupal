<?php
/**
 * @file
 * Implements payulatam.com payment services for use with Drupal Commerce.
 */

define('COMMERCE_PAYULATAM_URL_PRODUCTION', 'https://gateway.payulatam.com/ppp-web-gateway/');
define('COMMERCE_PAYULATAM_URL_TEST', 'https://stg.gateway.payulatam.com/ppp-web-gateway');
define('COMMERCE_PAYULATAM_URL_CONFIRMATION', 'payulatam/confirmation');
define('COMMERCE_PAYULATAM_URL_RESPONSE', 'payulatam/response');
define('COMMERCE_PAYULATAM_DESCRIPTION', 'Commerce virtual store purchase order number @order_id');
define('COMMERCE_PAYULATAM_MERCHANTID', 500238);
define('COMMERCE_PAYULTAM_APIKEY', '6u39nqhq8ftd0hlvnjfs66eh8c');
define('COMMERCE_PAYULATAM_ALIAS', 'PYLATAM-');

/**
 * Implemenst hook_entity_info().
 */
function commerce_payulatam_entity_info() {
  return array(
    'commerce_payulatam' => array(
      'label' => t('Commerce Payulatam'),
      'controller class' => 'CommercePayuLatamEntityController',
      'views controller class' => 'EntityDefaultViewsController',
      'base table' => 'commerce_payulatam',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'id',
      ),
      'bundles' => array(),
      'view modes' => array(
        'default' => array(
          'label' => t('Full Record'),
          'custom settings' => TRUE,
        ),
      ),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function commerce_payulatam_permission() {
  return array(
    'commerce payulatam view transaction' => array(
      'title' => t('View transaction'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_payulatam_menu() {
  $items = array();

  $items[COMMERCE_PAYULATAM_URL_RESPONSE . '/%commerce_order/%/%'] = array(
    'title' => 'Transaction summary',
    'page callback' => 'commerce_payulatam_response',
    'page arguments' => array(2),
    'access callback' => 'commerce_payulatam_access_page',
    'access arguments' => array(2, 3, 4, 1),
    'type' => MENU_CALLBACK,
    'file' => 'commerce_payulatam.inc',
  );

  $items[COMMERCE_PAYULATAM_URL_CONFIRMATION . '/%commerce_order/%/%'] = array(
    'page callback' => 'commerce_payulatam_confirmation',
    'page arguments' => array(2),
    'access callback' => 'commerce_payulatam_access_page',
    'access arguments' => array(2, 3, 4, 1),
    'type' => MENU_CALLBACK,
    'file' => 'commerce_payulatam.inc',
    'delivery callback' => 'commerce_payulatam_deliver',
  );

  $items['admin/commerce_payulatam/%entity_object/view'] = array(
    'title' => 'View Transaction',
    'page callback' => 'commerce_payulatam_page_view',
    'page arguments' => array(2),
    'load arguments' => array('commerce_payulatam'),
    'access arguments' => array('commerce payulatam view transaction'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


function commerce_payulatam_page_view($entity) {
  return entity_view('commerce_payulatam', array($entity));
}

/**
 * Delivery callback.
 */
function commerce_payulatam_deliver($page_callback_result) {
  drupal_add_http_header('Content-Type', 'application/json; charset=utf-8');
  global $language;
  drupal_add_http_header('Content-Language', $language->language);

  if (is_int($page_callback_result)) {
    switch ($page_callback_result) {
      case MENU_ACCESS_DENIED:
        drupal_add_http_header('Status', '403 Forbidden');
        $page_callback_result = array(
          'status' => 0,
          'message' => t('Access Denied'),
        );
        break;
    }
  }
  print drupal_json_encode($page_callback_result);
  // Perform end-of-request tasks.
  ajax_footer();
}

/**
 * Access callback page confirmation/response.
 */
function commerce_payulatam_access_page($order, $token, $option, $page) {
  $method = ($page == 'confirmation' ? $_POST : $_GET);
  $is_valid = commerce_payulatam_validate_signature($method, $order, $page);
  return $option == commerce_payulatam_get_md5($order->order_id, $token, $page) && $is_valid;
}

/**
 * Load parameters.
 */
function commerce_payulatam_get_param($target) {
  $param = array();
  if (is_array($target)) {
    foreach ($target as $key => $value) {
      $param[$key] = check_plain($target[$key]);
    }
  }
  return $param;
}

/**
 * Validate signature generate from PAYULATAM.
 */
function commerce_payulatam_validate_signature($method, $order, $page) {
  module_load_include('inc', 'commerce_payulatam');

  $instance_id = $order->data['payment_method'];
  $payment_method = commerce_payment_method_instance_load($instance_id);

  $param = commerce_payulatam_get_param($method);

  $params = array(
    $payment_method['settings']['py_api_key'],
    $payment_method['settings']['py_merchant_id'],
  );

  switch ($page) {
    case 'response':
      // signature = md5($ApiKey~$merchant_id~$referenceCode~$New_value~$currency~$transactionState)
      $params = array_merge($params, array(
        $param['referenceCode'],
        number_format($param['TX_VALUE'], 1, '.', ''),
        $param['currency'],
        $param['transactionState'],
      ));
      $key = 'signature';
      $signature = md5(implode('~', $params));
      break;

    case 'confirmation':
      // $sign = md5(ApiKey~merchant_id~reference_sale~new_value~currency~state_pol)
      $params = array_merge($params, array(
        $param['reference_sale'],
        number_format($param['value'], 1, '.', ''),
        $param['currency'],
        $param['state_pol']
      ));

      $signature = md5(implode('~', $params));
      $key = 'sign';
      break;
  }

  return strtoupper($param[$key]) == strtoupper($signature);
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_payulatam_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['payulatam'] = array(
    'base' => 'commerce_payulatam',
    'title' => t('PAYULATAM'),
    'short_title' => t('PAYULATAM'),
    'description' => t('PAYULATAM Payments Standard'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_payulatam_settings_form($settings = NULL) {
  $form = array();

  $form['py_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API KEY'),
    '#required' => TRUE,
    '#default_value' => isset($settings['py_api_key']) ? $settings['py_api_key'] : COMMERCE_PAYULTAM_APIKEY,
  );

  $form['py_merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Id'),
    '#required' => TRUE,
    '#default_value' => isset($settings['py_merchant_id']) ? $settings['py_merchant_id'] : COMMERCE_PAYULATAM_MERCHANTID,
  );

  $form['py_account_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Account Id'),
    '#default_value' => isset($settings['py_account_id']) ? $settings['py_account_id'] : NULL,
  );

  $py_action = COMMERCE_PAYULATAM_URL_PRODUCTION;
  if (isset($settings['py_action_url_production'])) {
    $py_action = $settings['py_action_url_production'];
  }

  $form['py_action_url_production'] = array(
    '#title' => t('Path Form Action'),
    '#type' => 'textfield',
    '#size' => 50,
    '#default_value' => $py_action,
    '#required' => TRUE,
  );

  $py_action_test = COMMERCE_PAYULATAM_URL_TEST;
  if (isset($settings['py_action_url_test'])) {
    $py_action_test = $settings['py_action_url_test'];
  }

  $form['py_action_url_test'] = array(
    '#title' => t('Test Path Form Action'),
    '#type' => 'textfield',
    '#size' => 50,
    '#default_value' => $py_action_test,
    '#required' => TRUE,
  );

  $items = array();
  if (function_exists('commerce_tax_rates')) {
    $items = commerce_tax_rates();
  }

  $options = array();
  foreach ($items as $name => $item) {
    $options[$name] = $item['title'];
  }

  $form['py_tax'] = array(
    '#title' => t('Tax Rate'),
    '#type' => 'select',
    '#size' => 5,
    '#multiple' => TRUE,
    '#options' => $options,
    '#default_value' => isset($settings['py_tax']) ? $settings['py_tax'] : NULL,
  );

  $py_alias = isset($settings['py_alias']) ? $settings['py_alias'] : COMMERCE_PAYULATAM_ALIAS;
  $form['py_alias'] = array(
    '#title' => t('Alias'),
    '#description' => t('Is concatenated with the order number, example: @example', array(
      '@example' => '"' . $py_alias . '1"',
    )),
    '#type' => 'textfield',
    '#size' => 20,
    '#default_value' => $py_alias,
  );

  $description = isset($settings['py_description']) ? $settings['py_description'] : COMMERCE_PAYULATAM_DESCRIPTION;

  $form['py_description'] = array(
    '#title' => t('Description'),
    '#description' => t('PAYULATAM purchase description, use @order_id to obtain the order number'),
    '#type' => 'textfield',
    '#size' => 50,
    '#default_value' => $description,
    '#required' => TRUE,
  );

  $status = commerce_order_status_options_list();

  $form['py_assign_status'] = array(
    '#title' => t('Assign Status'),
    '#type' => 'radios',
    '#options' => array(
      'A' => t('Automatic'),
      'M' => t('Manual'),
    ),
    '#default_value' => isset($settings['py_assign_status']) ? $settings['py_assign_status'] : 'M',
    '#required' => TRUE,
  );

  $form['py_status_' . COMMERCE_PAYMENT_STATUS_SUCCESS] = array(
    '#title' => t('Status Success'),
    '#type' => 'select',
    '#options' => $status,
    '#default_value' => isset($settings['py_status_' . COMMERCE_PAYMENT_STATUS_SUCCESS]) ? $settings['py_status_' . COMMERCE_PAYMENT_STATUS_SUCCESS] : 'pending',
    //'#required' => TRUE,
    '#states' => array(
      'visible' => array('input[name*="py_assign_status"]' => array('value' => 'M')),
    ),
  );

  $form['py_status_' . COMMERCE_PAYMENT_STATUS_FAILURE] = array(
    '#title' => t('Status Failure'),
    '#type' => 'select',
    '#options' => $status,
    '#default_value' => isset($settings['py_status_' . COMMERCE_PAYMENT_STATUS_FAILURE]) ? $settings['py_status_' . COMMERCE_PAYMENT_STATUS_FAILURE] : 'canceled',
    //'#required' => TRUE,
    '#states' => array(
      'visible' => array('input[name*="py_assign_status"]' => array('value' => 'M')),
    ),
  );

  $form['py_description'] = array(
    '#title' => t('Description'),
    '#description' => t('PAYULATAM purchase description, use @order_id to obtain the order number'),
    '#type' => 'textfield',
    '#size' => 50,
    '#default_value' => $description,
    '#required' => TRUE,
  );

  $form['py_testing'] = array(
    '#title' => t('Test Enabled'),
    '#type' => 'select',
    '#options' => array(
      '0' => t('No'),
      '1' => t('Yes'),
    ),
    '#required' => TRUE,
    '#default_value' => isset($settings['py_testing']) ? $settings['py_testing'] : NULL,
  );

  return $form;
}

/**
 * Add parameters method payulatam
 */
function commerce_payulatam_redirect_form($form, &$form_state, $order, $payment_method) {
  $settings = $payment_method['settings'];

  if (!isset($settings['py_api_key']) || empty($settings['py_merchant_id'])) {
    drupal_set_message(t('PAYULATAM is not configured for use. No user Id has been specified.'), 'error');
    return array();
  }

  module_load_include('inc', 'commerce_payulatam');

  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  $currency_code = $wrapper->commerce_order_total->currency_code->value();

  $settings['currency_code'] = $currency_code;

  $amount = $wrapper->commerce_order_total->amount->value();

  $settings['amount'] = number_format(commerce_currency_amount_to_decimal($amount, $currency_code), 1, '.', '');

  // Tax.
  $taxes = array(
    'base_price' => 0,
    'total' => 0,
  );

  $components = $wrapper->commerce_order_total->data->value();
  if ($settings['py_tax'] && @$components['components']) {
    foreach ($components['components'] as $key => $component) {
      if ($component['name'] == 'base_price') {
        $taxes['base_price'] = commerce_currency_amount_to_decimal($component['price']['amount'], $currency_code);
      }
      elseif (in_array($component['price']['data']['tax_rate']['name'], $settings['py_tax'])) {
        $taxes['total'] += commerce_currency_amount_to_decimal($component['price']['amount'], $currency_code);
      }
    }
  }

  $settings['sale_reference'] = commerce_payulatam_get_reference($settings['py_alias'], $order->order_id);

  $signature = commerce_payulatam_get_firm($settings);

  $url_page = commerce_payulatam_get_url($order->order_id);

  $form['#action'] = $settings['py_action_url_production'];

  $description = t($settings['py_description'], array(
    '@order_id' => $order->order_id,
  ));

  // Structure required for PAYULATAM.
  $data = array(
    'merchantId' => $settings['py_merchant_id'],
    'referenceCode' => $settings['sale_reference'],
    'description' => $description,
    'accountId' => $settings['py_account_id'],
    'amount' => $settings['amount'],
    'tax' => $taxes['total'],
    'taxReturnBase' => $taxes['base_price'],
    'signature' => $signature,
    'accountId' => $settings['py_account_id'],
    'currency' => $settings['currency_code'],
    'buyerEmail' => $order->mail,
    'confirmationUrl' => $url_page['confirmation'],
    'responseUrl' => $url_page['response'],
    'extra1' => $payment_method['instance_id'],
  );

  // Mode Test.
  if (@$settings['py_testing']) {
    $data['test'] = 1;
    $form['#action'] = $settings['py_action_url_test'];
  }

  foreach ($data as $name => $value) {
    $form[$name] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to payulatam'),
  );

  return $form;
}

/**
 * Implements hook_views_api().
 */
function commerce_payulatam_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_payulatam') . '/views',
  );
}

/**
 * hook_entity_property_info().
 */
function commerce_payulatam_entity_property_info() {
  $info = array();

  $properties = &$info['commerce_payulatam']['properties'];

  $properties['py_id'] = array(
    'label' => t('Id'),
    'type' => 'integer',
    'description' => t('The unique ID'),
    'schema field' => 'id',
  );

  $properties['py_order_id'] = array(
    'label' => t('Order'),
    'type' => 'commerce_order',
    'description' => t('Commerce order'),
    'schema field' => 'order_id',
  );

  $properties['py_created'] = array(
    'label' => t('Date created'),
    'type' => 'date',
    'schema field' => 'created',
    'description' => t('The date created record'),
  );

  $properties['py_state_transaction'] = array(
    'label' => t('State transaction'),
    'type' => 'integer',
    'description' => t('The state transaction ID'),
    'schema field' => 'state_transaction',
  );

  $properties['py_reference_payulatam'] = array(
    'label' => t('Reference Payulatam'),
    'type' => 'integer',
    'description' => t('The reference payulatam'),
    'schema field' => 'reference_payulatam',
  );

  $properties['py_value'] = array(
    'label' => t('Value'),
    'type' => 'decimal',
    'description' => t('The value transaction'),
    'schema field' => 'value',
  );

  $properties['py_response'] = array(
    'label' => t('Response'),
    'type' => 'text',
    'description' => t('The response'),
    'schema field' => 'response',
  );

  return $info;
}

class CommercePayuLatamEntityController extends EntityAPIController {

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $rows = array();

    $rows[] = array(t('Id'), $entity->id);
    $rows[] = array(t('Order'), l($entity->order_id, 'admin/commerce/orders/' . $entity->order_id . '/view'));

    $rows[] = array(t('Created'), format_date($entity->created, 'custom', 'Y-m-d H:i:s'));

    $rows[] = array(t('State Transaction'), $entity->state_transaction);

    $rows[] = array(t('Reference Payulatam'), $entity->reference_payulatam);

    $rows[] = array(t('Value'), number_format($entity->value, 2, ',', '.'));

    $rows[] = array(t('Response'), '<pre>' . print_r($entity->response, TRUE) . '</pre>');

    $content['table_transaction'] = array(
      '#markup' => theme('table', array(
        'rows' => $rows,
        'header' => array(
          t('Item'),
          t('Value'),
        ),
      ))
    );

    return parent::buildContent($entity, $view_mode, $langcode, $content);
  }
}