<?php

/**
 * @file
 * Provides a Cash on Delivery payment method for Drupal commerce
 */

/**
 * Implements hook_menu().
 */
function commerce_cod_menu() {
  $items = array();

  // Add a menu item for capturing authorizations.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/cod-payment'] = array(
    'title' => 'Cash',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_cod_payment_form', 3, 5),
    'access callback' => 'commerce_cod_payment_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
  );

  return $items;
}

/**
 * User access callback for cashing cheque
 */
function commerce_cod_payment_access($order, $transaction) {
  if ($transaction->payment_method == 'commerce_cod' && $transaction->status == COMMERCE_PAYMENT_STATUS_PENDING) {
    // Allow access if the user can update payments on this order.
    return commerce_payment_transaction_access('update', $transaction);
  }
  // Return FALSE if the transaction isn't with a COD and isn't pending.
  return FALSE;
}

/**
 * Form to Receive the Payment
 */
function commerce_cod_payment_form($form, &$form_state, $order, $transaction) {
  $form_state['order'] = $order;
  $form_state['transaction'] = $transaction;

  // Load and store the payment method instance for this transaction.
  $payment_method = commerce_payment_method_instance_load($transaction->instance_id);
  $form_state['payment_method'] = $payment_method;
/*  
  $form['information'] = array(
    '#markup' => t('Payment received means that the cheque has been verified and cashed').'<br />'
  );
*/  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Payment received'),
  );
  
  return $form;
}

function commerce_cod_payment_form_submit($form, &$form_state) {
  $transaction = $form_state['transaction'];
  $order = $form_state['order'];
  $transaction->message = t('The Payment for this order has been received');
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  commerce_payment_transaction_save($transaction);
  $form_state['redirect'] = 'admin/commerce/orders/'.$order->order_id.'/payment';
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_cod_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_cod'] = array(
    'title' => t('Cash on Delivery'),
    'description' => t('Pay when you receive order products.'),
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_cod_settings_form($settings = NULL) {
  
  $settings = (array) $settings + array(
    'information' => ''
  );
  
  $form = array();
  
  $form['information'] = array(
    '#type' => 'textarea',
    '#title' => t('Information'),
    '#description' => t('Information you would like to be shown to users when they select this payment method, such as delivery payment details.'),
    '#default_value' => $settings['information']
  );
  
  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_cod_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  if (!empty($payment_method['settings']['information'])) {
    $form['commerce_cod_description'] = array(
      '#markup' => $payment_method['settings']['information']
    );
  }
  
  // Need to create a dummy value to solve http://drupal.org/node/1230666
  // Probably an issue in the main commerce module
  $form['dummy'] = array(
    '#type' => 'hidden',
    '#value' => 'dummy'
  );

  
  return $form;
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_cod_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_cod_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['commerce_cod'] = $pane_values;

  commerce_cod_transaction($payment_method, $order, $charge);
}

/**
 * Creates a cheque payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_cod_transaction($payment_method, $order, $charge) {
  $transaction = commerce_payment_transaction_new('commerce_cod', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  $transaction->message = t('This order is waiting for the payment on delivery.');

  commerce_payment_transaction_save($transaction);
}


