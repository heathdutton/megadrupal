<?php

/**
 * Implements hook_menu().
 */

function vtw_menu() {
  $items['admin/structure/views/settings/views_term_weight'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Term weight',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vtw_admin_page'),
    'access arguments' => array('administer views'),
    'weight' => 5,
  );
  return $items;
}

/**
 * vtw_admin_page().
 */

function vtw_admin_page() {
  $options = array();
  $all_views = views_get_all_views();
  foreach ($all_views as $view_info) {
    if ($view_info->base_table == 'taxonomy_term_data') {
      foreach ($view_info->display as $c_display) {
        $options["$view_info->name:$c_display->id"] = "$view_info->human_name: $c_display->display_title ($view_info->name:$c_display->id)";
      }
    }
  }
  $form['vtw_views_wr'] = array(
    '#type' => 'fieldset',
    '#title' => t('Apply term weight to next views'),
  );
  if (count($options)) {
    $form['vtw_views_wr']['vtw_views'] = array(
      '#type' => 'checkboxes',
      '#options' => $options,
      '#default_value' => variable_get('vtw_views', array()),
    );
  } else {
    $form['vtw_views_wr']['vtw_msg'] = array(
      '#markup' => t('No available views.'),
    );
  }
  return system_settings_form($form);
}

/**
 * Implements hook_views_query_alter().
 */

function vtw_views_query_alter(&$view, &$query) {
  if ($query->base_table == 'taxonomy_term_data') {
 /* attach table taxonomy_term_hierarchy */
    $join = new views_join();
    $join->construct('taxonomy_term_hierarchy', 'taxonomy_term_data', 'tid', 'tid');
    $query->add_relationship('taxonomy_term_hierarchy', $join, 'taxonomy_term_data');
 /* reset default orderby and set orderby by sql_weight */
    if ($query->orderby) {
      drupal_set_message(t('Module %name is override sort in this view.', array('%name' => 'Views term weight')), 'warning');
    }
    if (count($view->sort)) {
      drupal_set_message(t('Please, remove %entity from %from in this view.', array('%entity' => t('all fields'), '%from' => t('Sort criteria'))), 'warning');
    }
    if (isset($_GET['order'])) {
      drupal_set_message(t('Please, remove %entity form %from.', array('%entity' => t('Order argument'), '%from' => t('URL'))), 'warning');
    }
    if ($view->plugin_name == 'table' && $view->style_options['default'] != -1) {
      drupal_set_message(t('Please, disable %entity from %from in this view.', array('%entity' => t('Default sort'), '%from' => t('Format: Table Settings'))), 'warning');
    }
    if ($view->plugin_name == 'table') {
      foreach ($view->style_options['info'] as $field_info) {
        if (isset($field_info['sortable']) && $field_info['sortable']) {
          drupal_set_message(t('Please, disable %entity from %from in this view.', array('%entity' => t('Sortable'), '%from' => t('Format: Table Settings'))), 'warning');
          break;
        }
      }
    }
    $query->orderby = array(array(
      'field' => 'sql_weight',
      'direction' => 'ASC',
    ));
 /* attach internal field */
    $query->fields['sql_depth'] = array(
      'field' => 'sql_depth',
      'alias' => 'sql_depth',
      'table' => 'taxonomy_term_hierarchy',
    );
  }
}

/**
 * Implements hook_views_pre_render().
 * Implements hook_views_post_render().
 */

function vtw_views_pre_render(&$view) {
  $vtw_views = variable_get('vtw_views', array());
  $display_name = "$view->name:$view->current_display";
  if (isset($vtw_views[$display_name]) && $vtw_views[$display_name]) {
    if (isset($view->result[0]->taxonomy_term_data_name) &&
        isset($view->result[0]->sql_depth)) {
      $view->sql_max_depth = 0;
      foreach ($view->result as $data) {
        $data->taxonomy_term_data_name = "[vtw_wrapper depth=$data->sql_depth] $data->taxonomy_term_data_name [/vtw_wrapper]";
        $view->sql_max_depth = max($view->sql_max_depth, $data->sql_depth);
      }
    }
  }
}

function vtw_views_post_render(&$view, &$output, &$cache) {
  if (isset($view->sql_max_depth)) {
    $output = str_replace('[/vtw_wrapper]', '</span>', $output);
    for ($i = 0; $i <= $view->sql_max_depth; $i++) {
      $output = str_replace("[vtw_wrapper depth=$i]", "<span class=\"sql-depth sql-depth-$i\">", $output);
    }
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 * Implements hook_taxonomy_term_update().
 * Implements hook_taxonomy_term_delete().
 * Implements hook_form_taxonomy_overview_terms_alter().
 */

function vtw_taxonomy_term_insert($term) {vtw_index_rebuild($term->vid);}
function vtw_taxonomy_term_update($term) {vtw_index_rebuild($term->vid);}
function vtw_taxonomy_term_delete($term) {vtw_index_rebuild($term->vid);}

function vtw_form_taxonomy_overview_terms_alter(&$form, $form_state) {
  $form['#submit'][] = 'vtw_terms_update_submit';
  $form['#vid'] = isset($form['#vocabulary']->vid) ? $form['#vocabulary']->vid : (isset($form['vid']['#value']) ? $form['vid']['#value'] : null);
}

function vtw_terms_update_submit($form, $form_state) {
  if ($form_state['clicked_button']['#value'] == t('Save') ||
      $form_state['clicked_button']['#value'] == t('Reset to alphabetical')) {
    vtw_index_rebuild($form['#vid']);
  }
}

/**
 * vtw_index_rebuild().
 */

function vtw_index_rebuild($vid = null) {
  if ($vid) {
    $voc_info = taxonomy_vocabulary_load($vid);
    $vocs = $voc_info ? array($voc_info) : array();
  } else {
    $vocs = taxonomy_get_vocabularies();
  }
  if (count($vocs)) {
    drupal_static_reset('taxonomy_get_tree');
    drupal_static_reset('taxonomy_get_tree:parents');
    drupal_static_reset('taxonomy_get_tree:terms');
    foreach ($vocs as $voc_info) {
      $transaction = db_transaction();
      try {
        $tree = taxonomy_get_tree($voc_info->vid, 0, null, true);
        foreach ($tree as $i => $term) {
          $query = db_update('taxonomy_term_hierarchy');
          $query->fields(array('sql_weight' => $i, 'sql_depth' => $term->depth));
          $query->condition('tid', $term->tid);
          $query->execute();
        }
        drupal_set_message(t('Terms depth for vocabulary %voc_name was updated!', array('%voc_name' => $voc_info->name)));
      }
      catch (Exception $e) {
        $transaction->rollback();
        break;
      }
    }
  }
}

