<?php

/**
 * @file
 * Mass Translation module.
 */

/**
 * Implements hook_init().
 */
function menu_templates_init() {
  module_load_include('inc', 'menu_templates', 'theme/theme');
}

/**
 * Implements hook_theme_registry_alter().
 */
function menu_templates_theme_registry_alter(&$drupal_registry) {
  $new_registries = array('menu_tree' => array(), 'menu_link' => array());

  foreach ($new_registries as $registry_name => $registry) {
    if (isset($drupal_registry[$registry_name])) {
      // Save the original
      $new_registries[$registry_name] = $drupal_registry[$registry_name];

      // Overwrite
      $drupal_registry[$registry_name]['function'] = "menu_templates_$registry_name";
      $drupal_registry[$registry_name]['type'] = 'module';

      // Overwrite the preprocess as well
      if ('menu_tree' == $registry_name) {
        $drupal_registry[$registry_name]['preprocess functions'] = array(
          'menu_templates_preprocess_menu_tree',
        );
      }
    }
  }

  menu_templates_update_registry_cache($new_registries);
}

/**
 * Updates the theme registry cache of overridden registries
 */
function menu_templates_update_registry_cache($registries) {
  // First clear all the data
  db_truncate('menu_templates_registry_cache')->execute();

  if (!empty($registries)) {
    // Prepare an insert
    $insert = db_insert('menu_templates_registry_cache')
      ->fields(array('name', 'registry'));

    foreach ($registries as $name => $registry) {
      // Insert registry into query
      $insert->values(array(
        'name' => $name,
        'registry' => serialize($registry),
      ));
    }

    // Run the query
    $result = $insert->execute();

    // TODO
    // Check result and log errors
  }
}

/**
 * Implements hook_menu().
 */
function menu_templates_menu() {
  $items['admin/structure/menu-templates'] = array(
    'title' => 'Menu Templates',
    'description' => 'Create templates to be applied in menus',
    'page callback' => 'menu_templates_list_page',
    'access arguments' => array('access administration pages'),
    'file' => 'admin.inc',
  );

  $items['admin/structure/menu-templates/add'] = array(
    'title' => 'Menu Templates',
    'description' => 'Create templates to be applied in menus',
    'page callback' => 'menu_templates_new_page',
    'access arguments' => array('access administration pages'),
    'file' => 'admin.inc',
  );

  $items['admin/structure/menu-templates/%/edit'] = array(
    'title' => 'Menu Templates',
    'description' => 'Create templates to be applied in menus',
    'page callback' => 'menu_templates_edit_page',
    'page arguments' => array(3),
    'access arguments' => array('access administration pages'),
    'file' => 'admin.inc',
  );

  $items['admin/structure/menu-templates/%/delete'] = array(
    'title' => 'Menu Templates',
    'description' => 'Create templates to be applied in menus',
    'page callback' => 'menu_templates_delete_page',
    'page arguments' => array(3),
    'access arguments' => array('access administration pages'),
    'file' => 'admin.inc',
  );

  return $items;
}

/**
 * Returns all menu templates
 */
function menu_templates_get_template_list($mtid = NULL) {
  $query = db_select('menu_templates', 'mt');

  if (NULL !== $mtid) {
    $query->condition('mtid', $mtid);
  }

  $query->fields('mt', array('mtid', 'mid', 'name'));

  $result = $query->execute();

  if (!$result) {
    return FALSE;

    // TODO
    // Check if any query errors and log them
  }

  return $result->fetchAllAssoc('mtid');
}

/**
 * Shows the details of menu templates
 */
function menu_templates_get_template_details(array $options) {
  $query = db_select('menu_templates', 'mt');

  foreach ($options as $field => $value) {
    $query->condition($field, $value);
  }

  $query->fields('mt') // All fields
    ->range(0, 1);

  $result = $query->execute()->fetchAssoc();

  if (!$result) {
    return FALSE;

    // TODO
    // Check for query errors and log them
  }

  return $result;
}

/**
 * Save a template
 */
function menu_templates_save_template($template) {
  if (!isset($template['mtid'])) {
    // New template
    $query = db_insert('menu_templates');
  }
  else {
    // We are updating a template
    $query = db_update('menu_templates')
      ->condition('mtid', $template['mtid']);

    // Unset so that we don't get it on the foreach loop
    unset($template['mtid']);
  }

  // We expect the $template array to be of field => value format
  $query->fields($template);

  $result = $query->execute();

  return $result;
}

/**
 * Deletes a template
 */
function menu_templates_delete_template($mtid) {
  $deleted = db_delete('menu_templates')
    ->condition('mtid', $mtid)
    ->execute();

  return $deleted;
}

/**
 * Gets a registry from the cache
 */
function menu_templates_get_registry_cache($name) {
  $registries = &drupal_static(__FUNCTION__);

  if (!isset($registries[$name])) {
    // Query the database to retrieve this desired registry
    $result = db_select('menu_templates_registry_cache', 'm')
      ->fields('m', array('registry'))
      ->condition('name', $name)
      ->execute()
      ->fetchAssoc();

    if (!$result) {
      return FALSE;
    }

    $registries[$name] = unserialize($result['registry']);
  }

  return $registries[$name];
}

/**
 * Returns the fallback function for an overridden theme registry
 */
function _menu_templates_get_fallback($theme) {
  $registry = menu_templates_get_registry_cache($theme);

  if (isset($registry['function']) && function_exists($registry['function'])) {
    // Okay, return the function name
    return $registry['function'];
  }
  else {
    // In case of a broken system, return hardcoded values. These functions
    // are present in Drupal core, so we should be safe
    $fallbacks = array(
      'menu_tree' => 'theme_menu_tree',
      'menu_link' => 'theme_menu_link',
    );

    // TODO
    // Log a message to the admin and force a theme registry rebuild

    return $fallbacks[$theme];
  }
}

/**
 * Guesses the link level of a given link
 */
function _menu_templates_guess_link_level($link) {
  for ($i = MENU_MAX_DEPTH; $i > 0; $i--) {
    if (isset($link["p$i"]) && 0 != $link["p$i"]) {
      return $i;
    }
  }

  return FALSE;
}

function _menu_templates_get_menus() {
  $names = db_select('menu_custom', 'm')
    ->fields('m', array('menu_name', 'title'))
    ->execute()
    ->fetchAllKeyed();

  return $names;
}
