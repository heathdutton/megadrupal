<?php
/**
 * @file
 * Primary hook implementations.
 */

define('ADVAGG_REPLACE_HELP_MESSAGE', 'Control the output by replacing certain strings within the code.');

/**
 * Implements hook_help().
 */
function advagg_replace_help($path, $arg) {
  if ($path == advagg_admin_config_root_path() . '/advagg/replace') {
    return '<p>' . t('The search & replace functionality provides a way to customize small portions of the CSS and JavaScript, without needing to make the changes directly in the CSS and JavaScript files.') . '</p>'
      . '<p>' . t('The general principle is that the CSS and/or JavaScript files should be built specially to allow for this. Rather than just changing e.g. a CSS color from "#000000" to "#101010", it is beter to define specific strings in the source files with the intention of replacing them in the output, e.g. use "main-text-color" which would be replaced by "#101010".') . '</p>'
      . '<p>' . t('This page controls the strings that will be searched for, along with fields to control the settings form, while the replacements themselves are controlled via the <a href="@settings" title="Replacements settings page">replacements settings page</a>.', array('@settings' => url('admin/config/user-interface/advagg-replacements'))) . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function advagg_replace_menu() {
  $items = array();

  $items[advagg_admin_config_root_path() . '/advagg/replace'] = array(
    'title' => 'Replacements',
    'description' => 'Control the settings for search & replace actions on the compiled CSS and/or JS.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('advagg_replace_settings_form'),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
    'file' => 'advagg_replace.admin.inc',
    'weight' => 11,
  );

  $items['admin/config/user-interface/advagg-replacements'] = array(
    'title' => 'CSS & JS Replacement',
    'description' => "Perform search & replace actions on site's CSS and/or JS.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('advagg_replace_replacements_form'),
    'access arguments' => array('customize advagg replace'),
    'file' => 'advagg_replace.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function advagg_replace_permission() {
  return array(
    'customize advagg replace' => array(
      'title' => t('Customize the AdvAgg CSS & JS code replacements'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function advagg_replace_theme() {
  return array(
    'advagg_replace_settings_form' => array(
      'file' => 'advagg_replace.theme.inc',
      'render element' => 'form',
    ),
    'advagg_replace_replacements_form' => array(
      'file' => 'advagg_replace.theme.inc',
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_advagg_current_hooks_hash_array_alter().
 */
function advagg_replace_advagg_current_hooks_hash_array_alter(&$aggregate_settings) {
  foreach (array('css', 'js') as $type) {
    foreach (array('search', 'replace') as $action) {
      $var = 'advagg_replace_' . $type . '_' . $action;
      $aggregate_settings['variables'][$var] = variable_get($var, array());
    }
  }
}
