<?php

/**
 * @file
 * Allows users to manage customizable lists of userbar.
 */

/**
 * Implements hook_menu().
 */
function userbar_menu() {
  //admin settings form for configuring Userbar refresh rate
  $items['admin/config/user-interface/userbar'] = array(
   'title' => 'Userbar',
   'description' => 'Configure Userbar. ',
   'position' => 'left',
   'weight' => -20,
   'page callback' => 'drupal_get_form',
   'page arguments' => array('userbar_admin_settings'),
   'access arguments' => array('access administration pages'),
   'file' => 'userbar.admin.inc',
   'file path' => drupal_get_path('module', 'userbar'),
  );
  //admin settings for content that enabled by default for status check
  $items['admin/config/user-interface/userbar/default'] = array(
   'title' => 'Userbar',
   'description' => 'Configure Userbar.',
   'position' => 'left',
   'weight' => -20,
   'page callback' => 'drupal_get_form',
   'page arguments' => array('userbar_settings_form', TRUE),
   'access arguments' => array('access administration pages'),
  );
  //user personalization for content preferences for status check
  $items['user/%/userbar'] = array(
   'title' => 'Userbar',
   'description' => 'Personalize Userbar',
   'page callback' => 'drupal_get_form',
   'page arguments' => array('userbar_settings_form'),
   'access callback' => 'userbar_personalize_access',
   'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  //Userbar refresh ajax call
  $items['userbar/refresh'] = array(
   'title' => 'Userbar',
   'description' => 'Personalize Userbar',
   'page callback' => 'userbar_refresh',
   'access arguments' => array('userbar access'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Check the permission for the user to show personalization of Userbar
 * 
 * @param $uid
 *   uid of the user whose user's profile is being viewed.
 */
function userbar_personalize_access($uid) {  
  //return true only if the user is same as the one whose account is being viewed 
  //and has the userbar personalize permissions
  global $user;
  return ($user->uid==$uid && user_access('userbar personalize'));
}

/**
 * Sets the user preferences for Userbar
 * @param $form
 *   An associative array containing the structure of the form.
 * @param $form_state
 *   An associative array containing the current state of the form.
 * @param $site_wide
 *    $site_wide is TRUE if the settings is being saved for all users, FALSE if the user is personalizing
 *     his userbar.
 *  
 * @ingroup userbar_hooks.
 * 
 * @see hook_userbar_info()
 */
function userbar_settings_form($form, &$form_state, $site_wide=FALSE) {
  if ($site_wide) { 
    $uid=0; //site wide or default userbar configuration is saved with uid=0. Anonymous users are not allowed to personalize. 
  }
  else{
    global $user;
    $uid=$user->uid;
  }

  //save the uid for which personalization is being saved
  $form['uid']=array('#type' => 'hidden', '#value' => $uid);
  $records = db_query("SELECT ubid, module,item_key,weight,visible 
            FROM {userbar} where uid=:uid 
            order by visible desc, weight asc", array(':uid' => $uid));
  $is_new=0;
  $userbar=array();
  foreach ($records as $row) {
    $userbar[$row->item_key]=$row;
  }
  
  if (empty($userbar)) {
  //fetch the site's default data and present it to the user
    $records = db_query("SELECT ubid, module, item_key, weight, visible 
            FROM {userbar} where uid=:uid 
            order by visible desc, weight asc", array(':uid' => 0));

      foreach ($records as $row) {
        $userbar[$row->item_key]=$row;
      }
  //set the is_new flag to false
      $is_new= 1;
  }
  
  $form['is_new']=array('#type' => 'hidden', '#value' => $is_new);
  //get all the content that provide status information
  $result = module_invoke_all('userbar_info');    
  $delta=0;
  //add the remaining ones that may not be in the DB
  foreach ($result as $module => $content) {
    foreach ($content as $content_id => $definition) {
      $definition['class']=array();
      $form['userbar'][$delta]["title-$delta"]=array('#markup' => _userbar_render($definition)); 
      $form['userbar'][$delta]["description-$delta"]=array('#markup' => $definition['description']);
      $form['userbar'][$delta]["visible-$delta"]=array('#type' => 'checkbox',
            '#default_value' => isset($userbar[$content_id]) && $userbar[$content_id]->visible? ($is_new?"$module:$content_id" : $userbar[$content_id]->ubid) : 0,
            '#return_value' => (isset($userbar[$content_id]) && !$is_new )? $userbar[$content_id]->ubid : "$module:$content_id");
        $form['userbar'][$delta]["weight-$delta"] = array(
            '#type' => 'weight',
            '#default_value' => isset($userbar[$content_id])? $userbar[$content_id]->weight:0,
            '#title_display' => 'invisible',
            '#title' => t('Weight for @row', array('@row' => $delta)),
            '#attributes' => array('class' => array('userbar-weight')),
          );      
      $delta++;
    }
  }
  $form['userbar_delta']=array('#type' => 'hidden', '#value' => $delta);
  $form['btn_save']=array('#type' => 'submit', '#value' => t('Save'));
  //provide reset option to end users i.e. to adopt sitewide settings
  if (!$site_wide && !$is_new)
    $form['btn_reset']=array('#type' => 'submit', '#value' => t('Reset'), '#submit' => array('userbar_settings_form_reset_submit'));
  return $form;
}

/**
 * Reset to site wide settings
 */
function userbar_settings_form_reset_submit($form, &$form_state) {
  $uid=$form_state['values']['uid'];

  db_delete('userbar')
    ->condition('uid', $uid)
    ->execute();
  cache_clear_all("userbar_$uid", 'cache');  
  drupal_set_message(t('Userbar has been reset'));
}

/**
 * Submit function for userbar_settings_form
 */
function userbar_settings_form_submit($form, &$form_state) {
  $uid=$form_state['values']['uid'];
  $is_new=$form_state['values']['is_new'];
  if (!$is_new) {
  //hide all the selection for this user and then set those that are visible and set their weight to max number
    $values['visible']=0;
    $values['weight']=$form_state['values']['userbar_delta'];
    db_update('userbar') 
        ->fields($values)
      ->condition ('uid', $uid)
      ->execute();
    unset($values);
  }
  //update or insert new values    
  foreach ($form_state['values'] as $key => $value) {
    if (strpos($key, 'visible-')!==FALSE) {
      unset($values);
      $token=explode('-', $key);
      if (!$is_new) {
        //update
        $values['visible']=1;
        $values['weight']=$form_state['values']["weight-$token[1]"];
        db_update('userbar') 
            ->fields($values)
          ->condition ('ubid', $value)
          ->execute();    
      }
      else{
        //insert
        $item=explode(":", $value);
        $values['visible']=1;
        $values['weight']=$form_state['values']["weight-$token[1]"];
        $values['module']=$item[0];
        $values['item_key']=$item[1];
        $values['uid']=$uid;
        db_insert('userbar')->fields($values)->execute();          
      }
    }
  }
  if (empty($uid))
    cache_clear_all('userbar', 'cache');
  else
    cache_clear_all("userbar_$uid", 'cache');
    
  drupal_set_message(t('Userbar preferences saved.'));
}

/**
 * theme implementation for userbar_settings_form
 * Displays the different userbar content in a tabular form for user to change the order of
 * icon appearance in userbar and hide those content that he is not interesed in.
 */
function theme_userbar_settings_form($variables) {
  $rows=array();
  $form=$variables['form'];
  $delta=$form['userbar_delta']['#value'];
  foreach (element_children($form['userbar']) as $key) {
    $cell[] = array('data' => drupal_render($form['userbar'][$key]["title-$key"]));
    $cell[] = array('data' => drupal_render($form['userbar'][$key]["description-$key"]));
    $cell[] = array('data' => drupal_render($form['userbar'][$key]["visible-$key"]));
    $form['userbar'][$key]["weight-$key"]['#delta'] = $delta; //set the delta based on the number of items available
    $cell[] = array('data' => drupal_render($form['userbar'][$key]["weight-$key"]));
    $index = $form['userbar'][$key]["weight-$key"]['#default_value'];
    if (isset($rows[$index])) {//if the index is already occupied, move it to the end.
      $index = count($rows);
    }
    $rows[$index] = array('data' => $cell, 'class' => array('draggable'));
    unset($cell);
  }
  //sort the array based on user order preference
  ksort($rows);
  $header=array(t('Options'), t('Description'), t('Enabled'), '');
  $output = theme('table', array('header' => $header,
        'rows' => $rows, 'attributes' => array('id' => 'userbar-table')));
  drupal_add_tabledrag('userbar-table', 'order', 'sibling', 'userbar-weight');
  
  $output .= drupal_render_children($form);
  
  return $output;
}

/**
 * Implements hook_theme().
 */
function userbar_theme($existing, $type, $theme, $path) {
  $items = array(
    'userbar_settings_form' => array(
      'render element' => 'form',
    ),
    'userbar' => array(
     'variables' => array('userbar' => NULL, 'results_only' => NULL),
    ),
    'userbar_block' => array(
     'variables' => array('userbar' => NULL, 'results_only' => NULL),
    ),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function userbar_permission() {
  return array(
    'userbar personalize' => array(
      'title' => t('User can personalize userbar'),
    ),
    'userbar access' => array(
      'title' => t('Access userbar'),
    ));
}

/**
 * helper function. return the refresh rate for this site
 */
function _userbar_get_refresh_rate($milli=TRUE) {
  if ($milli)
    return  (variable_get('userbar_refresh', 60)*1000);//in milli seconds;
  else
    return  variable_get('userbar_refresh', 60);//in secs
}

/**
 * Return the contents of this user's userbar
 */
function userbar_get_userbar_contents() {
  //get the userbar for the current logged on user
  $userbar = _userbar_get_userbar();
  $now=strtotime('now');
  //check if it's time to refire the hooks or to return from cache
  if (isset($_SESSION['userbar_refresh'])) {
    $refresh_rate= _userbar_get_refresh_rate(FALSE);
    if ( ($now - $_SESSION['userbar_refresh']) < $refresh_rate) {
      //return cached content
      return $userbar;
    }
  }
  //refire the query. the interval has elapsed
  _userbar_load_userbar_contents($userbar);
  return $userbar;
}

/**
 * Load the content of the userbar
 * @param $userbar
 *   Userbar for which the content needs to be loaded.
 */
function _userbar_load_userbar_contents(&$userbar) {
  global $user;
  $now=strtotime('now');
  $_SESSION['userbar_refresh']=$now;
  if (!empty($userbar)) {
    //get the status from the modules that the user has chosen
    foreach ($userbar['selected'] as $module => $indexes) {
      $result = module_invoke($module, 'userbar_view', $indexes);
      if ($result) {
        foreach ($result as $index => $content) {
          foreach ($content as $content_index => $data) {
            if (in_array($content_index, $userbar['selected'][$module])) {
              $data['class']=array();
              $userbar['data'][$content_index]=$data;//update the userbar with correct status
            }
          }
        }
      }
    }
    //update the cache with current content set
    _userbar_set_cache("userbar_$user->uid", $userbar);
  }
}

/**
 * Helper function to set cache and control expiry. If the expiry time needs to be changed
 * then changing once in this function is sufficient
 * 
 * @param $id
 *   id to use in cache_set
 * @param $content
 *   content to be cached
 */
function _userbar_set_cache($id, $content) {
  $refresh_rate=_userbar_get_refresh_rate(FALSE);
  //cache should be maintained at least until twice the refresh rate, then it can be wiped.
  //don't cache permanently
  $cache_expiry=strtotime('now') + ($refresh_rate * 2);
  cache_set($id, $content, $cache_expiry);
}

/**
 * Theme implementation for docked userbar. Note that a div with id userbar_dock
 * is needed for jquery to be able to replace the contents
 * 
 * Returns the userbar for the current logged on user. If none is found, then site's default
 * userbar is displayed
 * @param $variables
 *   Associative array obtained with userbar_get_userbar_contents
 *   $variables['userbar'] - userbar to be themed
 *   $variables['results_only'] - Return results or include jQuery wrapper as well.
 * @return themed userbar
 * 
 * @see userbar_get_userbar_contents()  
 */
function theme_userbar($variables) {
  //get the userbar
  $userbar=$variables['userbar'];
  //check if results_only need to be sent. If the wrappers are sent then jQuery will not function
  //due to duplicate element ids. 
  $results_only=$variables['results_only'];
  $output ='';
  //render the content in the $userbar['data']
  $keys = array_keys($userbar['data']);
  $count=count($keys);
  foreach ($userbar['data'] as $key => $value) {
    if ($count==1) {
      $value['class'][]='userbar-leaf';
    }  
    else{
      switch ($key) {
        case $keys[0]:
          $value['class'][]='userbar-first';
          break;
        case $keys[$count-1]:
          $value['class'][]='userbar-last';
          break;
        default:
          $value['class'][]='userbar-leaf';
          break;
      }
    }
    $output .= _userbar_render($value);
  }
  $js_settings=array('userbar' => array('refreshRate' => array(_userbar_get_refresh_rate())));
  drupal_add_css(drupal_get_path('module', 'userbar') . '/userbar.css');
//  Send results only if flag is set else the content wrapper will keep getting added resulting in javascript failure
  return array('#markup' => $results_only?$output :
            '<div id="dock"><div id="dock-inner" class="clear-block">
            <div class="dockright-block"><div id="userbar_dock" class="slider">' . $output . '</div></div>
          </div></div>',  
                '#attached' => array(
                    'js' => array(
                      drupal_get_path('module', 'userbar') . '/userbar.js',
                      array('data' => $js_settings, 'type' => 'setting'),
                    ),
                    ))  ;
}

/**
 * 
 * Themeing for userbar displayed as block. Theme developers can override
 * this implementation. Note that the outer most div should have the id userbar_block
 * for jquery to be able to refresh the contents.
 * 
 * @param $variables
 *   Associative array obtained with userbar_get_userbar_contents
 *   $variables['userbar'] - userbar to be themed
 *   $variables['results_only'] - Return results or include jQuery wrapper as well.
 * 
 * @return themed userbar
 * @see userbar_get_userbar_contents()
 */
function theme_userbar_block($variables) {
  $userbar=$variables['userbar'];
  $results_only=$variables['results_only'];
  $output ='';
  //render the content in the $userbar['data']
  foreach ($userbar['data'] as $key => $value) {
    $value['class'][]='userbar-block';  
    $output .= _userbar_render($value);
  }
  
  $js_settings=array('userbar' => array('refreshRate' => array(_userbar_get_refresh_rate())));
//  Send results only if flag is set else the content wrapper will keep getting added resulting in javascript failure
  return  array('#markup' => $results_only?$output : "<div id='userbar_block'>" . $output . " </div>",
                '#attached' => array(
                    'js' => array(
                      drupal_get_path('module', 'userbar') . '/userbar.js',
                      array('data' => $js_settings, 'type' => 'setting'),
                    ), )) ;
}

/**
 * renders a given userbar item
 *  
 * @param $item
 *   userbar item 
 * @return
 *   returns a rendered userbar item 
 */
function _userbar_render($item) {
  $output='';
  if (isset($item['type'])) {  
  switch ($item['type']) {
    case 'image':          
      //create an image tag with callback if applicable
      $content = "<img src='" . $item['display'] . "' ";
      if (isset($item['tip']))
        $content .= " alt='" . $item['tip'] . "'title='" . $item['tip'] . "' ";
      $content .= "> </img>";
      if (isset($item['callback']) && !empty($item['callback'])) {
        $content = "<a href='" . url($item['callback']) . "' > $content </a>";
      }
      $output = $content;
      break;
    case 'html':
      //assign native html
      $output = $item['display'];
      break;
  }  
  }  
  return '<div class="' . implode(" ", $item['class']) . '">' . $output . '</div>';
}

/**
 * helper function to get Userbar
 */
function _userbar_get_userbar() {
  global $user;
  $userbar = array();
  //if the data is there in cache. get it.
  if ($cached= cache_get("userbar_$user->uid")) {
    $userbar = $cached->data;
  }
  else {     
     //if the user can personalize his bar and UID is not empty
    if (user_access('userbar personalize') && $user->uid) {
      $records = db_query("SELECT module,item_key FROM {userbar}
              where uid = :uid and visible=1 
              order by weight", array(':uid' => $user->uid));
      foreach ($records as $row) {
        $userbar['data'][$row->item_key]=array();//default every item to empty. this retains the sort order preferred by user
        $userbar['selected'][$row->module][]=$row->item_key;
      }
      _userbar_set_cache("userbar_$user->uid", $userbar);
    }
    
    //user not allowed to personalize or has no personalization. get site's default
    if (empty($userbar)) {
      if ($cached = cache_get('userbar')) {
        $userbar = $cached->data;
      }
      else {
        $records = db_query("SELECT module,item_key FROM {userbar}
              where uid = 0 and visible=1 
              order by weight");  
        foreach ($records as $row) {
          $userbar['data'][$row->item_key] = array();//default every item to empty. this retains the sort order preferred by user
          $userbar['selected'][$row->module][] = $row->item_key;
        }
        _userbar_set_cache("userbar", $userbar);
      }
    }

    //if it reached here, only the selected information is available. data is not there. load data.
    if (!empty($userbar)) {
        //load the data for the user
      _userbar_load_userbar_contents($userbar);      
    }
  }
  return $userbar;
}

/**
 * returns ajax element
 * @return JSON output of content status
 */
function userbar_refresh() {
  $result=userbar_get_userbar_contents();
  if (variable_get('userbar_usedock', 1)) {
    $output=theme('userbar', array('userbar' => $result, 'results_only' => TRUE));    
  }
  else{
    $output=theme('userbar_block', array('userbar' => $result, 'results_only' => TRUE));
  }
  return  drupal_json_output(array('status' => TRUE, 'data' => $output));
}

/**
 * Implements hook_userbar_info().
 */
function userbar_userbar_info() {
  return array('userbar' => array(
    'userbar_user_profile' => array('tip' => t('User account'), 'description' => t('User account'),
      'display' => "/" . drupal_get_path('module', 'userbar') . '/images/user.png', 'type' => 'image'),
    'userbar_logoff' => array('description' => t('Log out'), 'tip' => t('Log out'),
      'display' => "/" . drupal_get_path('module', 'userbar') . '/images/logout.png', 'type' => 'image'))  );
}

/**
 * Implements hook_userbar_view().
 */
function userbar_userbar_view($indexes) {
  global $user;
  $output = array('userbar' => array());
  if (in_array('userbar_user_profile', $indexes))
    $output['userbar']['userbar_user_profile']=array('tip' => t('User account'),
      'display' => "/" . drupal_get_path('module', 'userbar') . '/images/user.png', 'type' => 'image', 'callback' => "user/$user->uid");
  if (in_array('userbar_logoff', $indexes))  
    $output['userbar']['userbar_logoff']=array('description' => t('Log out'), 'tip' => t('Log out'),
      'display' => "/" . drupal_get_path('module', 'userbar') . '/images/logout.png', 'type' => 'image', 'callback' => 'user/logout');
  
  return $output  ;
}

/**
 * Implements block related hooks
 */
/**
 * Implements hook_block_info().
 */
function userbar_block_info() {
  $blocks['userbar_userbar'] = array(
    'info' => t('Userbar'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function userbar_block_view($delta = '') {
  switch ($delta) {
    case 'userbar_userbar':
      if (user_access('userbar access')) {  
      $userbar=userbar_get_userbar_contents();
      $block['subject']=t('Userbar');
      $block['content']= theme('userbar_block', array('userbar' => $userbar, 'results_only' => FALSE)) ;
      return $block;
      }
  }  
}

/**
 * Implements hook_page_alter().
 * @param $page
 */
function userbar_page_alter(&$page) {
  //add the Userbar only if the user has the permssions AND admin has set to usedock AND the current page is not an overlay page
  if (user_access('userbar access') && variable_get('userbar_usedock', 1) && !in_array('overlay', $page['#theme_wrappers'])) {
  $userbar = userbar_get_userbar_contents();
  $page['page_bottom']['userbar'] = theme('userbar', array('userbar' => $userbar, 'results_only' => FALSE)) ;
  }
}

/**
 * @addtogroup userbar
 * @{
 */
/**
 * Function to update cache for the user. This will avoid a complete refresh of items
 * for the user and still provide the opportunity to show the right status in the Userbar.
 *
 * @param $uid 
 *     $uid of the user for whom the cache must be updated
 * @param $module 
 *     Module that defines the index
 * @param $content_id
 *     Index ID of the content for which userbar is being updated
 * @param $content
 *     Content for the given index
 */
function userbar_update_cache($uid, $module, $content_id, $content) {
  if ($cached= cache_get("userbar_$uid")) {
    $userbar = $cached->data;
   //update cache only if the item index is selected by the user
    if (isset($userbar['selected'][$module]) && in_array($content_id, $userbar['selected'][$module])) {
      $content['class']=array();
      $userbar['data'][$content_id]=$content;
     //update the cache
      _userbar_set_cache("userbar_$uid", $userbar);
    }
  }
}

/**
 * Helper API for installing and uninstalling module's status for global settings
 *
 * @param $module
 *   Name of the module for which the keys are installed for global all 
 * @param $keys
 *    Array of keys that are supported by this module
 */
function userbar_install_global_default($module, $keys) {
  //install all the keys as global setting
  $values['visible']=1;
  $values['weight']=0;
  $values['module']=$module;
  $values['uid']=0;
  foreach ($keys as $key) {
    $values['item_key']=$key;
    db_insert('userbar')->fields($values)->execute();          
  }
}

/**
 * Helper API for installing and uninstalling module's status for all users
 *
 * @param $module
 *   Name of the module for which the keys are being uninstalled 
 */
function userbar_uninstall_global_default($module) {
  if (db_table_exists('userbar')) { //Userbar module might have been uninstalled before the dependent module  
  db_delete('userbar') 
    ->condition ('module', $module)
    ->execute();    
  }
}


/**
 * @} End of "addtogroup userbar" .
 */
