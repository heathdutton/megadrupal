<?php
/**
 * @file
 */

/**
 * Implements hook_init().
 */
function fullcalendar_mini_init() {
  // we need jqueru_ui loaded on any page this block could be used
  // there has got to be a better way to do this
  drupal_add_library('system', 'ui');
  drupal_add_css(fullcalendar_default_path() . '/fullcalendar.css');
  
  if (variable_get('fullcalendar_mini_shared_block', 0)) {
  
  }
}

/**
 * Implementation of hook_menu().
 */
function fullcalendar_mini_menu() {
  
  $items['fullcalendar-mini/sharedblock-js'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'fullcallendar_mini_sharedblock_js',
    'page arguments' => array(1),
    'title' => 'JSON for Block Used as Shared Block',
    'type' => MENU_CALLBACK,
  );
  
  $items['admin/config/user-interface/fullcalendar-mini'] = array(
    'title' => 'FullCalendar Mini Configuration',
    'description' => 'Configuration options for FullCalendar Mini.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fullcalendar_mini_admin_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

/**
 * Builds the cm_project admininstration settings form.
 */
function fullcalendar_mini_admin_settings($form, &$form_state) {
  $form = array();
  
  $form['fullcalendar_mini_shared_block'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include js and css for Shared block on every page'),
    '#default_value' => variable_get('fullcalendar_mini_shared_block', 0),
    '#description' => t('This is not the post efficient way to add these files, but it gets the job done.'),
  );
  
  return system_settings_form($form);
}

/**
 * Implements hook_block_info().
 *
 * This hook declares to Drupal what blocks are provided by the module.
 */
function fullcalendar_mini_block_info() {
  $blocks['fullcalendar_mini'] = array(
    'info'       => t('fullcalendar_mini'),
    'status'     => FALSE,
    'region'     => 'sidebar_first',
    'weight'     => -99,
    'visibility' => 1,
    'pages'      => '',
  );

  return $blocks;
}

      
/**
 * Implements hook_block_view().
 *
 */
function fullcalendar_mini_block_view($delta = '') {
  switch ($delta) {
    case 'fullcalendar_mini':
      
      $js = fullcallendar_mini_js();
      
      $block['subject'] = t('fullcalendar_mini');
      $block['content'] =  array();
      $block['content']['#markup'] = '<div id="fullcalendar-mini"></div>';
      $block['content']['#attached'] = array();
      $block['content']['#attached']['css'] = array(drupal_get_path('module', 'fullcalendar_mini') . '/fullcalendar_mini.css');
      $block['content']['#attached']['js'] = array(fullcalendar_default_path() . '/fullcalendar.min.js');
      $block['content']['#attached']['js'][] = array(
        'data' => $js,
        'type' => 'inline',
      );

      break;
  }
  return $block;
}


/**
 * A module-defined function that returns js w/o block content 
 */
function fullcallendar_mini_sharedblock_js() {
  print fullcallendar_mini_js(); 
}

/**
 * A module-defined function that returns js
 */
function fullcallendar_mini_js() {
  //populate inline jquery with events
  return "jQuery(document).ready(function($) {
  
      $('#fullcalendar-mini').fullCalendar({
        theme: true,
        header: {
            left: 'prev',
            center: 'title',
            right: 'next',
        },
        editable: false,
        
        // add event name to title attribute on mouseover
        eventMouseover: function(event, jsEvent, view) {
            if (view.name !== 'agendaDay') {
                $(jsEvent.target).attr('title', event.title);
            }
        },
        
        events: [ " . fullcalendar_mini_getevents() . " ]
      });

      });";
}


/**
 * A module-defined function that returns events.
 */
function fullcalendar_mini_getevents() {

  //@TODO: Add option to replace this with a view
  
    //this requires PHP5.3, but it is SO worth it
    //http://www.php.net/manual/en/datetime.modify.php
    
    $cache = cache_get("fullcalendar_mini", "cache_getevents");
    if ($cache) {
        print "From cache";
        return $cache->data;
    }
    
    $d = new DateTime();
    $d->modify('first day of previous month');
    $firstdayofprevmonth = $d->format('Y-m-d');
    
    //dsm('firstofprev:' . $firstdayofprevmonth);
    
    $d = new DateTime();
    $d->modify('last day of next month');
    $lastdayofnextmonth = $d->format('Y-m-d');
    
    //dsm('lastofnext:' . $lastdayofnextmonth);
    
    if(module_exists('civicrm_multiday_event')) {
    
    
    $class_events = db_query("SELECT n.nid, n.title, field_session_date_value AS start, field_session_date_value2 AS end FROM {field_data_field_session_date} fsd INNER JOIN {field_data_field_civicrm_multiday_session} df ON df.field_civicrm_multiday_session_value = fsd.entity_id INNER JOIN {node} n ON df.entity_id = n.nid WHERE n.status = 1 AND field_session_date_value > :firstdayofprevmonth AND field_session_date_value < :lastdayofnextmonth", array(':firstdayofprevmonth' => $firstdayofprevmonth, ':lastdayofnextmonth' => $lastdayofnextmonth));
    
    $return = NULL;

    foreach ($class_events as $class_event) {

      $sy = date('Y', strtotime($class_event->start)); 
      $sm = date('m', strtotime($class_event->start));
      $sd = date('d', strtotime($class_event->start));
    
      $ey = date('Y', strtotime($class_event->end)); 
      $em = date('m', strtotime($class_event->end));
      $ed = date('d', strtotime($class_event->end));
    
      $start = $sy .', ' . $sm . ', ' . $sd;
      $end = $ey .', ' . $em . ', ' . $ed;
      
      $url = url('node/' . $class_event->nid);
    
      $return .= "{
        title: '" .  str_replace("'", "", $class_event->title) . "',
        start: new Date(" . $start . "),
        end: new Date(" . $end . "),
        url: '" . $url . "'},";
      };
    };
    // get the public events and cache them
    cache_set("fullcalendar_mini", $return, "cache_getevents");
    return $return;
    
}
