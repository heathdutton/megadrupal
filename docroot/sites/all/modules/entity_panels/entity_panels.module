<?php
/**
 * @file
 * Entity Panels module hook implementations.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function entity_panels_ctools_plugin_directory($owner, $plugin_type) {
  if (($owner == 'ctools') || ($owner == 'page_manager')) {
    return 'plugins/' . $plugin_type;
  }

  return NULL;
}

/**
 * Implements hook_menu().
 */
function entity_panels_menu() {
  $items = array();

  $items['admin/config/content/entity_panels'] = array(
    'title' => 'Entity panels settings',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_panels_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'entity_panels.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 1500,
  );

  $items['admin/structure/pages/entity_panels'] = array(
    'title' => 'Panelized entities',
    'page callback' => 'entity_panels_list_page',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
    'access arguments' => array('use page manager'),
    'file' => 'entity_panels.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function entity_panels_theme() {
  $items = array();

  $items['entity_panels_entity'] = array(
    'render element' => 'element',
    'template' => 'entity-panels-entity',
    'path' => drupal_get_path('module', 'entity_panels') . '/templates',
  );

  return $items;
}

/**
 * Implements hook_entity_view_alter().
 */
function entity_panels_entity_view_alter(&$build, $entity_type) {
  static $task = NULL;
  static $subtasks = array();
  static $subtask_handlers = array();
  static $recursion_prevention = array();

  $entity = entity_panels_extract_rendered_entity($build, $entity_type);
  if (empty($entity)) {
    return;
  }

  list($entity_id, $revision_id, $bundle) = entity_extract_ids($entity_type, $entity);
  $view_mode = isset($build['#view_mode']) ? $build['#view_mode'] : 'default';
  $real_view_mode = $view_mode;
  $enabled = variable_get('entity_panels_entity_panels_enabled', array());

  if (empty($enabled[$entity_type][$bundle][$real_view_mode])) {
    $real_view_mode = 'default';
    if (empty($enabled[$entity_type][$bundle][$real_view_mode])) {
      return;
    }
  }

  if (empty($task)) {
    $task = page_manager_get_task('entity_panels');
  }
  if (empty($task)) {
    return;
  }

  if (!empty($recursion_prevention[$entity_type][$entity_id][$real_view_mode])) {
    return;
  }

  $recursion_prevention[$entity_type][$entity_id][$real_view_mode] = TRUE;

  $task_id = $entity_type . '-' . $bundle . '-' . $real_view_mode;
  if (empty($subtasks[$task_id])) {
    $subtasks[$task_id] = page_manager_get_task_subtask($task, $task_id);
  }
  $subtask = $subtasks[$task_id];

  $is_page = (($view_mode === 'full') || ($view_mode === 'default'));

  // Render through CTools.
  ctools_include('context');
  ctools_include('context-task-handler');

  $contexts = ctools_context_handler_get_task_contexts($task, $subtask, array($entity));

  if (empty($subtask_handlers[$task_id])) {
    $subtask_handlers[$task_id] = page_manager_load_sorted_handlers($task, $subtask ? $subtask['name'] : '', TRUE);
  }
  $handlers = $subtask_handlers[$task_id];

  $output = NULL;
  $id = ctools_context_handler_get_render_handler($task, $subtask, $handlers, $contexts, array($entity_id));
  if ($id) {
    $output = ctools_context_handler_render_handler($task, $subtask, $handlers[$id], $contexts, array($entity_id), $is_page);
  }

  $recursion_prevention[$entity_type][$entity_id][$real_view_mode] = FALSE;

  if ($is_page) {
    if (empty($output)) {
      return;
    }
  }
  else {
    if (empty($output['content'])) {
      return;
    }
    $output = $output['content'];
  }

  $build['#theme'] = 'entity_panels_entity';
  $build['#entity_panels_entity'] = $entity;
  $build['#entity_panels_entity_type'] = $entity_type;
  $build['#entity_panels_entity_id'] = $entity_id;
  $build['#entity_panels_bundle'] = $bundle;
  $build['#entity_panels_view_mode'] = $view_mode;

  if (!is_array($output)) {
    $build['content']['#markup'] = $output;
  }
  else {
    $build['content'] = $output;
  }
}

/**
 * Implements hook_field_display_alter().
 */
function entity_panels_field_display_alter(&$display, $context) {
  $view_mode = $context['view_mode'];
  if (($view_mode === 'default') || ($view_mode === 'full')) {
    // It's too dangerous to ruin default view mode.
    return;
  }

  $enabled = variable_get('entity_panels_entity_panels_enabled', array());
  if (!empty($enabled[$context['entity_type']][$context['instance']['bundle']][$view_mode])) {
    // Do not render fields if the entity will be re-rendered with panels.
    // field_view_field() will render nothing also when field formatter is set as hidden,
    // so we don't do this for 'full' and 'default' view modes.
    $display['type'] = 'hidden';
  }
}

/**
 * Rebuilds item list for Page Manager.
 */
function entity_panels_rebuild_enabled() {
  $candidates = array();
  $entity_types = array_intersect_key(entity_get_info(), array_flip(variable_get('entity_panels_entity_types', array('node'))));
  foreach ($entity_types as $entity_type => $entity_info) {
    if (empty($entity_info['bundles']) || empty($entity_info['view modes'])) {
      continue;
    }
    $view_modes = array('default' => array('label' => t('Default'))) + $entity_info['view modes'];
    foreach (array_keys($entity_info['bundles']) as $bundle) {
      foreach ($view_modes as $view_mode => $view_mode_info) {
        $view_mode_settings = field_view_mode_settings($entity_type, $bundle);
        $visibility = ($view_mode == 'default') || !empty($view_mode_settings[$view_mode]['custom_settings']);
        if ($visibility) {
          $candidates[$entity_type][$bundle][$view_mode] = TRUE;
        }
      }
    }
  }

  $enabled = variable_get('entity_panels_entity_panels_enabled', array());
  $new_enabled = $enabled;

  foreach ($enabled as $entity_type => $entity_data) {
    if (empty($candidates[$entity_type])) {
      unset($new_enabled[$entity_type]);
      continue;
    }
    foreach ($entity_data as $bundle => $bundle_data) {
      if (empty($candidates[$entity_type][$bundle])) {
        unset($new_enabled[$entity_type][$bundle]);
        continue;
      }
      foreach ($bundle_data as $view_mode => $view_mode_data) {
        if (empty($candidates[$entity_type][$bundle][$view_mode])) {
          unset($new_enabled[$entity_type][$bundle][$view_mode]);
          continue;
        }
      }
    }
  }

  variable_set('entity_panels_entity_panels_enabled', $new_enabled);
}

/**
 * Extract the entity object from the build entity render array.
 */
function entity_panels_extract_rendered_entity($build, $entity_type) {
  // @todo Use hooks or variables to extract non-standard entities.
  $entity = NULL;
  if (isset($build['#' . $entity_type])) {
    $entity = $build['#' . $entity_type];
  }
  elseif (isset($build['#entity'])) {
    $entity = $build['#entity'];
  }

  if (($entity_type === 'taxonomy_term') && (!empty($build['#term']))) {
    $entity = $build['#term'];
  }

  if (($entity_type === 'user') && (!empty($build['#account']))) {
    $entity = $build['#account'];
  }

  return $entity;
}

/**
 * Processes variables for entity-panels-entity.tpl.php
 */
function template_preprocess_entity_panels_entity(&$variables) {
  $element = $variables['element'];
  $entity = $element['#entity_panels_entity'];
  $entity_type = $element['#entity_panels_entity_type'];
  $entity_id = $element['#entity_panels_entity_id'];
  $bundle = $element['#entity_panels_bundle'];
  $view_mode = $element['#entity_panels_view_mode'];

  $variables['classes_array'][] = drupal_html_class($entity_type);
  $variables['classes_array'][] = drupal_html_class($entity_type . '-' . $view_mode);
  $variables['classes_array'][] = drupal_html_class($entity_type . '-' . $bundle);
  if (!empty($entity->preview)) {
    $variables['classes_array'][] = drupal_html_class($entity_type . '-preview');
  }

  if ($entity_type === 'node') {
    if (!empty($entity->promote)) {
      $vars['classes_array'][] = 'node-promoted';
    }
    if (!empty($entity->sticky)) {
      $vars['classes_array'][] = 'node-sticky';
    }
    if (empty($entity->status)) {
      $vars['classes_array'][] = 'node-unpublished';
    }
  }

  $variables['content'] = render($element['content']);

  $variables['theme_hook_suggestions'][] = $entity_type . '__' . $bundle;
  $variables['theme_hook_suggestions'][] = $entity_type . '__' . $entity_id;
}
