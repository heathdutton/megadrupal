<?php
/**
 * @file
 * Routines for the BOM Lite module.
 */

/**
 * Implements hook_theme().
 */
function bom_weather_lite_theme($existing, $type, $path) {
  return array(
    'bom_weather_lite_forecast' => array(
      'variables' => array(
        'forecast' => array(),
      ),
      'template' => 'bom-weather-lite-forecast',
      'path' => drupal_get_path('module', 'bom_weather_lite') . '/templates',
    ),
  );
}

/**
 * Implements hook_block_info().
 *
 * Once a block is configured, the function makes another one available.
 */
function bom_weather_lite_block_info() {
  $blocks = array();
  $number = db_query("SELECT COUNT(name) FROM {variable} WHERE name LIKE 'bom_weather_lite_url_%'")->fetchField();

  for ($i = 0; $i <= $number; $i++) {
    $blocks[$i] = array(
      'info' => t('BOM Weather Lite #@i', array('@i' => $i)),
      'cache' => DRUPAL_CACHE_CUSTOM,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function bom_weather_lite_block_configure($delta = '') {
  $form = array();
  $form['bom_weather_lite_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Forecast page URL'),
    '#description' => t('Enter the full URL to the detailed forecast page on the BOM website.'),
    '#default_value' => variable_get('bom_weather_lite_url_' . $delta, ''),
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function bom_weather_lite_block_save($delta = '', $edit = array()) {
  if (!valid_url($edit['bom_weather_lite_url'])) {
    drupal_set_message(t('"%url" is not a valid URL', array('%url' => $edit['bom_weather_lite_url'])), 'error');
  }
  else {
    variable_set('bom_weather_lite_url_' . $delta, $edit['bom_weather_lite_url']);
  }
}

/**
 * Implements hook_block_view().
 */
function bom_weather_lite_block_view($delta = '') {
  $block = array();

  $url = variable_get('bom_weather_lite_url_' . $delta, '');
  if (empty($url)) {
    return $block;
  }

  $bomforecast = _bom_weather_lite_forecast($url);
  // Did something bad happen?
  if (!empty($bomforecast->error)) {
    watchdog('bom_weather_lite', 'An error occurred retrieving forecast data from @url: @error', array('@url' => $url, '@error' => $bomforecast->error), WATCHDOG_ERROR);
    return $block;
  }

  // No errors, mess with and theme the output.
  $forecast = $bomforecast->getForecast();

  // Allow other modules to alter the forecast.
  drupal_alter('bom_weather_lite_forecast', $forecast);

  $block['subject'] = $bomforecast->getIdentifier();
  $block['content'] = theme('bom_weather_lite_forecast', $forecast);

  return $block;
}

/**
 * Preprocess a forecast array into a bunch of variables.
 */
function bom_weather_lite_preprocess_forecast(&$variables) {
  foreach ($variables['forecast'] as $key => $value) {
    $variables[$key] = check_plain($value);
  }
}

/**
 * Fetch a forecast from the cache or from BOM.
 *
 * 15 minutes hardcoded cache timeout.
 */
function _bom_weather_lite_forecast($url) {
  $hash = 'bom_weather_lite:' . md5($url);

  $cache = new BOMForecast();
  $cache = cache_get($hash);

  if(!empty($cache->data)) {
    return $cache->data;
  }

  $forecast = new BOMForecast($url);
  if (empty($forecast->error)) {
    cache_set($hash, $forecast, $_SERVER['REQUEST_TIME'] + (60 * 15));
  }

  return $forecast;
}
