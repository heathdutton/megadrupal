<?php

/**
 * @file Provides support for Mollie iDEAL
 * Sjoerd Arendsen | Optixdesigns
 */

//include_once('ideal.class.php'); // Mollie iDEAL API class

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */

function uc_mollie_menu() {
  $items = array();

  $items['cart/checkout/mollie/return'] = array(
    'title' => 'iDEAL Payment',
    'page callback' => 'uc_mollie_return',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['cart/checkout/mollie/report'] = array(
    'title' => 'iDEAL Payment',
    'page callback' => 'uc_mollie_report',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

function uc_mollie_theme() {
  return array(
    'uc_mollie_payment_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

function uc_mollie_init() {
  drupal_add_css(drupal_get_path('module', 'uc_mollie') .'/css/uc_mollie.css');
}

/*******************************************************************************
 * Hook Functions (Ubercart)
 ******************************************************************************/

/**
 * Implementation of hook_uc_payment_method().
 */
function uc_mollie_uc_payment_method() {
  $methods[] = array(
    'id' => 'mollie',
    'name' => t('iDEAL - Mollie'),
    'title' => t('iDEAL'),
    'desc' => t('Pay by Mollie iDEAL.'),
    'callback' => 'uc_payment_method_mollie',
    'weight' => 1,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

/**
 * Handle the payment method "Mollie."
 */
function uc_payment_method_mollie($op, &$order, $form = NULL, &$form_state = NULL) {
  switch ($op) {
    case 'cart-details':
      $details = uc_mollie_payment_form(array(), $form_state, $order);
      return $details;
      
    case 'cart-process':
      $order->payment_details['bank_id'] = check_plain($form_state['values']['panes']['payment']['details']['uc_mollie_bank']); // Why the hell does this not pass to order-submit?
      $_SESSION['uc_mollie']['bank_id'] = $order->payment_details['bank_id']; 
      return TRUE;

    case 'order-details':
      $details = uc_mollie_payment_form(array(), $form_state, $order);
      return $details;
    
    case 'order-submit':
      if ($order->payment_method === 'mollie') {
        uc_mollie_call($order);
        exit;
      }
    
    case 'order-delete':
      db_delete('uc_payment_mollie')
        ->condition('order_id', $order->order_id)
        ->execute();
      break;  
      
    case 'settings':
      global $base_url;
    
      $form['uc_mollie_partner_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Partner ID'),
        '#default_value' => variable_get('uc_mollie_partner_id', ''),
        '#description' => t('Your Mollie partner ID.'),
      );
	  $form['uc_mollie_profile_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Profile key'),
        '#default_value' => variable_get('uc_mollie_profile_key', ''),
        '#description' => t('Your Mollie profile key.'),
      );
      $form['uc_mollie_return_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Return URL'),
        '#default_value' => variable_get('uc_mollie_return_url', $base_url . '/cart/checkout/mollie/return'),
        '#description' => t('The url the customer is redirected to after payment. WARNING: changing this variable can break the module.'),
      );
      $form['uc_mollie_report_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Report URL'),
        '#default_value' => variable_get('uc_mollie_report_url', $base_url . '/cart/checkout/mollie/report'),
        '#description' => t('The payment callback, this is where the transaction object is send to. WARNING: changing this variable can break the module.'),
      );
      $form['uc_mollie_test_mode'] = array(
        '#type' => 'checkbox',
        '#title' => t('Test mode'),
        '#default_value' => variable_get('uc_mollie_test_mode', 0),
        '#description' => t('Enable test mode.'),
      );
      return $form;
  }
}

/*******************************************************************************
 * Theme functions
 ******************************************************************************/

function theme_uc_mollie_payment_form($form) {
  $output = '<table border="0" cellspacing="11" cellpadding="0" align="center" class="payment-pane-mollie-table"> 
              <tr> 
                <td>'. drupal_render($form['uc_mollie_bank']) .'</td> 
                <td><a id="i1" href="https://www.mollie.nl/" target="_new"> </a></td> 
                <td><a id="i2" href="https://www.ideal.nl/" target="_new"> </a></td> 
              </tr> 
            </table>';
  return $output;
}

/*******************************************************************************
 * Forms
 ******************************************************************************/

function uc_mollie_payment_form($form_state, $order) {
  // Init iDEAL class
  $iDEAL = new iDEAL_Payment(variable_get('uc_mollie_partner_id', ''));
  $iDEAL->setTestmode(variable_get('uc_mollie_test_mode', 0));
   
  $form['uc_mollie_bank'] = array(
    '#type' => 'select',
    '#title' => 'Bank',
    '#options' => $iDEAL->getBanks(),
    '#description' => t('Please select your bank.'),
  );

  return $form;
}

/*******************************************************************************
 * Callbacks
 ******************************************************************************/

/**
 * Create transaction and start payment through the Mollie gateway.
 * TODO create a "going of the site" page
 */
function uc_mollie_call($order) {
  global $base_url;
  
  // Init iDEAL class
  $iDEAL = new iDEAL_Payment(variable_get('uc_mollie_partner_id', ''), variable_get('uc_mollie_profile_key', ''));
  $iDEAL->setTestmode(variable_get('uc_mollie_test_mode', 0));
  
  $return_url = variable_get('uc_mollie_return_url', $base_url . '/cart/checkout/mollie/return');
  $report_url = variable_get('uc_mollie_report_url', $base_url . '/cart/checkout/mollie/report');
  
  // Transaction object
  $transaction = new stdClass();
  $transaction->order_id     = $order->order_id;
  $transaction->bank_id      = check_plain($_SESSION['uc_mollie']['bank_id']);
  $transaction->status       = 0;
  $transaction->amount       = $order->order_total;
  $transaction->description  = t("Order @order_id - @site_name", array('@order_id' => $order->order_id, '@site_name' => variable_get('site_name', '')));
  
  // Create transaction and start payment through Mollie
  if ($iDEAL->createPayment($transaction->bank_id, round($transaction->amount * 100), $transaction->description, $return_url, $report_url)) {
    $transaction->transaction_id = $iDEAL->getTransactionId();
    $_SESSION['uc_mollie']['order_id'] = $transaction->order_id;
    $_SESSION['uc_mollie']['transaction_id'] = $transaction->transaction_id;
    
    uc_mollie_transaction_save($transaction); // save object for verification
    
    header("Location: " . $iDEAL->getBankURL()); // Goto Mollie
    exit;  
  }else{
    watchdog('uc_mollie', 'Payment creation failed. Error message: %error', array('%error' => $iDEAL->getErrorMessage()), WATCHDOG_ERROR);
    drupal_set_message(t('Something went wrong during the iDEAL payment. Please try again.'), 'error');
    drupal_goto('cart/checkout');
  }
}

/**
 * Return callback
 * No real validation of payment here. This happens in the report callback.
 */
function uc_mollie_return() {
  $goto = 'cart/checkout';

  // No transaction
  if(!$_SESSION['uc_mollie']['transaction_id'] || !$_GET['transaction_id']) { 
    watchdog('uc_mollie', 'Empty transaction ID.', array(), WATCHDOG_ERROR);
    drupal_set_message(t('Something went wrong during the iDEAL payment. Please try again.'), 'error');
  
  // No match  
  }elseif($_SESSION['uc_mollie']['transaction_id'] !== $_GET['transaction_id']) { 
    watchdog('uc_mollie', 'Transaction ID`s do not match.', array(), WATCHDOG_ERROR);
    drupal_set_message(t('Something went wrong during the iDEAL payment. Please try again.'), 'error');
  
  }elseif($transaction = uc_mollie_transaction_get($_SESSION['uc_mollie']['transaction_id'])) {
    // Complete
    if($transaction->status) {
      $_SESSION['do_complete'] = TRUE;
      $goto = 'cart/checkout/complete';
    
    // Not Paid
    }else{
      watchdog('uc_mollie', 'The payment was cancelled.', array(), WATCHDOG_WARNING);
      drupal_set_message(t('The payment was cancelled.'), 'error');
    }
  
  // General Error  
  }else{
    drupal_set_message(t('Something went wrong during the iDEAL payment. Please try again.'), 'error'); 
  }
  
  unset($_SESSION['uc_mollie']); 
  drupal_goto($goto);
}

/**
 * Report callback
 */
function uc_mollie_report() {  
  if($transaction = uc_mollie_transaction_get($_GET['transaction_id'])) {
    // Init iDEAL class
    $iDEAL = new iDEAL_Payment(variable_get('uc_mollie_partner_id', ''));
    $iDEAL->setTestmode(variable_get('uc_mollie_test_mode', 0));
    $iDEAL->checkPayment($transaction->transaction_id);

    // Complete payment
    if((bool)$iDEAL->getPaidStatus() && !(bool)$transaction->status) {
      $message = t('Succesfull Mollie payment received for order @order_id', array('@order_id' => $transaction->order_id));

      // Enter payment
      uc_payment_enter($transaction->order_id, 'mollie', $transaction->amount, 0, array('transaction_id' => $transaction->transaction_id), $message);

      // Save comment
      uc_order_comment_save($transaction->order_id, 0, $message, 'admin');
      
      // Update status
      uc_mollie_transaction_status_update($transaction->transaction_id, 1);
    }
  }else{
    watchdog('uc_mollie', 'Unkown transaction ID.', array(), WATCHDOG_WARNING);
  }
  
  print "Als tranen een trap konden bouwen en herinneringen een brug, dan klom ik naar de hemel en nam ik je terug.";
  exit;
}

function uc_mollie_transaction_save($transaction) {
  (array)$transaction;
  drupal_write_record('uc_payment_mollie', $transaction);
}

function uc_mollie_transaction_get($transaction_id) {
  return db_query("SELECT * FROM {uc_payment_mollie} WHERE transaction_id = :transaction_id", array(':transaction_id' => $transaction_id))->fetchObject();
}

function uc_mollie_transaction_status_update($transaction_id, $status = 0) {
  db_update('uc_payment_mollie')
    ->fields(array(
      'status' => $status,
    ))
    ->condition('transaction_id', check_plain($transaction_id))
    ->execute();
}