<?php


function htmltag_tag_attributes($attr = NULL, $raw = TRUE) {
  if (is_object($attr)) {
    return $attr;
  }
  else {
    $obj = new htmltag_TagAttributes();
    if (is_array($attr)) {
      $obj->setAttributes($attr, $raw);
      if (isset($attr['class'])) {
        $obj->addClasses($attr['class']);
      }
    }
    return $obj;
  }
}


/**
 * htmltag_TagAttributes factory, starting with a class attribute.
 *
 * @param array | string | htmltag_TagAttributes $classes
 *   The class or classes to start with.
 *
 * @return htmltag_TagAttributes
 *   Newly created object with the class as attributes.
 */
function htmltag_class_attribute($classes) {
  if (!is_object($classes)) {
    $attr = new htmltag_TagAttributes();
    $attr->addClasses($classes);
    return $attr;
  }
  else {
    // assume that it is already a TagAttributes object
    return $classes;
  }
}


function htmltag_link_attributes($path, array $options) {
  $obj = htmltag_extract_attributes($options, 'attributes', FALSE);
  $obj->setAttribute('href', url($path, $options));
  return $obj;
}


function htmltag_extract_attributes(array $info_array, $array_key, $raw = TRUE) {
  $attr = array();
  if (is_array(@$info_array[$array_key])) {
    $attr = $info_array[$array_key];
  }
  return htmltag_tag_attributes($attr, $raw);
}
