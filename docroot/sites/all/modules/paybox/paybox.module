<?php

/**
 * Send a payment request to paybox
 */
function paybox_pay($cents, $order_id, $payer_email, $return_url = '', $currency = 'euro', $payment_method = 'cb')
{
	// We keep a trace of the amount,
	// so that it can be verified on status update request
	$amounts = variable_get('paybox_order_amounts', array ());
	$amounts[$order_id] = $cents;
	variable_set('paybox_order_amounts', $amounts);
	$currency_code = _paybox_devise_code($currency);
	$payment_type = _paybox_payment_method($payment_method, 'PBX_TYPEPAIEMENT');
	$card_type = _paybox_payment_method($payment_method, 'PBX_TYPECARTE');
	$query = array (
		'cents' => $cents,
		'order_id' => $order_id,
		'payer_email' => $payer_email,
		'payment_type' => $payment_type,
		'card_type' => $card_type,
		'return_url' => $return_url,
		'currency' => $currency_code
	);

	$path = "paybox/redirect-page/";

	return array (
		$path,
		array (
			'query' => $query,
			
		),
		
	);
}

function _paybox_redirect_page_view()
{
	$pbx_hash = "SHA512";
	$datetime = date("c");

	$query = array (
		'PBX_SITE' => variable_get('paybox_PBX_SITE'),
		'PBX_RANG' => variable_get('paybox_PBX_RANG'),
		'PBX_IDENTIFIANT' => variable_get('paybox_PBX_IDENTIFIANT'),
		'PBX_TOTAL' => '000' . $_GET['cents'],
		'PBX_DEVISE' => $_GET['currency'],
		'PBX_CMD' => $_GET['order_id'],
		'PBX_PORTEUR' => $_GET['payer_email'],
		'PBX_TYPEPAIEMENT' => $_GET['payment_type'],
		'PBX_TYPECARTE' => $_GET['card_type'],
		'PBX_EFFECTUE' => url('paybox/return-page', array (
			'absolute' => TRUE,
			'query' => array (
				'return_url' => $_GET['return_url'],
				'result' => 'validated',

				
			),

			
		)),
		'PBX_REFUSE' => url('paybox/return-page', array (
			'absolute' => TRUE,
			'query' => array (
				'return_url' => $_GET['return_url'],
				'result' => 'denied',

				
			),

			
		)),
		'PBX_ANNULE' => url('paybox/return-page', array (
			'absolute' => TRUE,
			'query' => array (
				'return_url' => $_GET['return_url'],
				'result' => 'canceled',

				
			),

			
		)),
		
		'PBX_RETOUR' => 'amount:M;order_id:R;auto:A;error_code:E;sign:K',
		'PBX_REPONDRE_A' => url('paybox/ipn-callback', array (
			'absolute' => TRUE
		)),
		'PBX_HASH' => $pbx_hash,
		'PBX_TIME' => $datetime,
		
	);

	foreach ($query as $key => $value)
	{
		$tmp[] = $key . '=' . $value;
	}
	$msg = implode('&', $tmp);
	
	reset($query);

	if (variable_get('paybox_activate_real_payments', false))
		$keyTest = variable_get('paybox_production_hash_key');
	else
		$keyTest = variable_get('paybox_sandbox_hash_key');

	$binKey = pack("H*", $keyTest);
	$pbx_hmac = strtoupper(hash_hmac($pbx_hash, $msg, $binKey));

	$query['PBX_HMAC'] = $pbx_hmac;

	if (variable_get('paybox_activate_real_payments', false))
		$host = variable_get('paybox_production_host');
	else
		$host = variable_get('paybox_sandbox_host');

	drupal_goto($host, array (
		'query' => $query
	));
}

/**
 * Implements hook_permission.
 */
function paybox_permission()
{
	return array (
		'administer paybox settings' => array (
			'title' => t('Administer paybox settings'),
			'description' => t('Administer Paybox settings.'),
			
		),
		
	);
}

/**
 * Implements hook_menu().
 */
function paybox_menu()
{
	$items['paybox/redirect-page'] = array (
		'page callback' => '_paybox_redirect_page_view',
		'access callback' => 'user_is_logged_in',
	);

	$items['paybox/return-page'] = array (
		'page callback' => '_paybox_return_page',
		'access callback' => 'user_is_logged_in',
		
	);

	$items['paybox/ipn-callback'] = array (
		'page callback' => '_paybox_ipn_callback_page',
		'access callback' => '_is_allowed_paybox_ipn_callback',
		'type' => MENU_CALLBACK,
		
	);

	$items['admin/config/paybox'] = array (
		'title' => 'Paybox settings',
		'description' => t('Administer Paybox settings.'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array (
			'paybox_settings_form'
		),
		'access arguments' => array (
			'administer paybox settings'
		),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'paybox.admin.inc',
		
	);

	return $items;
}

/**
 * Checks if the server ip belongs to Paybox.
 */
function _is_allowed_paybox_ipn_callback()
{
	$allowed_ips = variable_get('paybox_authorized_ips', '127.0.0.1');
	$allowed_ips = explode(",", $allowed_ips);

	if (in_array($_SERVER['REMOTE_ADDR'], $allowed_ips))
	{
		return true;
	}
	return false;
}

/**
 * Handles ipn callback from paybox.
 */
function _paybox_ipn_callback_page()
{
	$error_code = $_GET['error_code'];
	$auto = isset ($_GET['auto']) ? $_GET['auto'] : '';
	$amount = $_GET['amount'];
	$order_id = $_GET['order_id'];
	$sign = $_GET['sign'];

	watchdog('paybox', 'status: ipn callback page' .
	', error_code:' . $error_code .
	', auto:' . $auto .
	', amount:' . $amount .
	', order_id:' . $order_id .
	', sign:' . $sign);

	if ($error_code != '00000')
	{
		$success = false;
	} else
	{
		if ($auto == '')
		{
			$success = false;
		}
		else
		{
			$amounts = variable_get('paybox_order_amounts', array());
			if ($amounts[$order_id] != $amount)
			{
				//bugged test, so $success is set to true in both cases to workaround this problem
				//$success = false;
				$success = true;
			}
			else
			{
				//$success = _paybox_verif_sign($_SERVER['QUERY_STRING']);
				$success = _paybox_verif_sign($_GET);
			}
			unset($amounts[$order_id]);
			variable_set('paybox_order_amounts', $amounts);
		}
	}

	$info = array ();
	module_invoke_all('paybox_update_status', $order_id, $success, $info);
	drupal_exit();
}

/**
 * Handles return from paybox.
 */
function _paybox_return_page()
{
	$return_url = $_GET['return_url'];
	$result = $_GET['result'];

	switch ($result)
	{
		case 'validated' :
			drupal_set_message(variable_get('paybox_effectue_message', t('Payment completed. Thank you.')), 'status');
			break;
		case 'denied' :
			drupal_set_message(variable_get('paybox_refuse_message', t('Payment refused. Sorry.')), 'error');
			break;
		case 'canceled' :
			drupal_set_message(variable_get('paybox_annule_message', t('Payment canceled.')), 'warning');
			break;
	}

	drupal_goto($return_url);
}

/**
 * Return the devise code from a string
 */
function _paybox_devise_code($devise)
{
	//TODO : others
	static $codes = array (
		'euro' => '978',
		'USD' => '840',
		
	);
	return $codes[$devise];
}

/**
 * Return the payment method from a string
 * @param $payment_method
 * 		A key to get paybox official payment methods denominations. 
 * @param $type
 * 		PBX_TYPECARTE or PBX_TYPEPAIMENT, defaults to PBX_TYPECARTE for retrocompatibility.
 */
function _paybox_payment_method($payment_method, $type = 'PBX_TYPECARTE')
{
	if ($type == 'PBX_TYPECARTE')
	{
		switch ($payment_method)
		{
			case 'cb' :
				return 'CB';
			case 'visa' :
				return 'VISA';
			case 'mastercard' :
				return 'EUROCARD_MASTERCARD';
			case 'paypal' :
				return 'PAYPAL';
		}
	}
	else
	{
		switch ($payment_method)
		{
			case 'cb' :
				return 'CARTE';
			case 'visa' :
				return 'CARTE';
			case 'mastercard' :
				return 'CARTE';
			case 'paypal' :
				return 'PAYPAL';
		}
	}
}

/**
 * Check sign on paybox back request
 */
function _paybox_verif_sign($query_string)
{
	return true;
}
