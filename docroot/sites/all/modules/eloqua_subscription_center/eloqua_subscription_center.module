<?php

/**
 * @file
 * Hooks and functions for the Eloqua Subscription Center module.
 */

/**
 * Implements hook_menu().
 */
function eloqua_subscription_center_menu() {
  // Page at which subscriptions can be managed.
  $path = variable_get('eloqua_subscription_center_path', 'subscription-center/%/%');
  $path_parts = explode('/', $path);
  $items[$path] = array(
    'title' => filter_xss_admin(variable_get('eloqua_subscription_center_title', 'Subscriptions')),
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'eloqua_subscription_center_page',
    'page arguments' => array_keys($path_parts, '%'),
    'access callback' => TRUE,
    'file' => 'includes/eloqua_subscription_center.pages.inc',
  );

  // Admin configuration form.
  $items['admin/config/system/eloqua-subscription-center'] = array(
    'title' => 'Eloqua Subscription Center',
    'description' => 'Configure Eloqua subscription center settings',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eloqua_subscription_center_admin'),
    'access arguments' => array('manage eloqua subscription center'),
    'file' => 'includes/eloqua_subscription_center.admin.inc',
  );

  // Pointer that redirects to the currently authenticated user's preferences.
  $items['my-subscription-center'] = array(
    'title' => 'Manage my subscriptions',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'eloqua_subscription_center_my_page',
    'access callback' => 'user_is_logged_in',
    'file' => 'includes/eloqua_subscription_center.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function eloqua_subscription_center_permission() {
  return array(
    'manage eloqua subscription center' => array(
      'title' => t('Manage Eloqua subscription center'),
      'description' => t('Configure behavior of the Eloqua subscription center'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Enables the Eloqua subscription center form for integration with Eloqua API.
 */
function eloqua_subscription_center_form_eloqua_api_admin_settings_alter(&$form, &$form_state, $form_id) {
  $form['eloqua_api_forms']['eloqua_api_enabled_forms']['#options']['eloqua_subscription_center_form'] = t('Eloqua subscription center');
}

/**
 * Returns an array of group configurations, keyed by emailGroup ID.
 *
 * @return array
 *   If a $group_id is provided, a single array of contact group configurations
 *   is returned. If no $group_id is provided, an array of all groups will be
 *   returned. If no groups have been specified, an empty array is returned.
 */
function eloqua_subscription_center_get_group_configs() {
  return variable_get('eloqua_subscription_center_groups', array());
}

/**
 * Returns the group configuration for a given group, or if a key is provided,
 * one particular configuration for the given group.
 *
 * @param int $group_id
 *   The emailGroup ID corresponding to the subscription group.
 *
 * @param string $key
 *   (Optional) The key of the desired configuration to be returned.
 *
 * @return mixed
 *   If no $key is provided, an array of configurations for the given group will
 *   be returned (or an empty array if no such group exists). Otherwise, if a
 *   key is provided, the value of that key for the given group is returned (or
 *   an empty string if no such key exists).
 */
function eloqua_subscription_center_get_group_config($group_id, $key = NULL) {
  $groups = eloqua_subscription_center_get_group_configs();
  $group = isset($groups[$group_id]) ? $groups[$group_id] : array();

  if ($key) {
    return isset($group[$key]) ? $group[$key] : '';
  }
  else {
    return $group;
  }
}

/**
 * Saves a full set of subscription group configurations.
 *
 * @param array $group_configs
 *   An array of group configurations, keyed by emailGroup ID.
 *
 * @see eloqua_subscription_center_get_groups()
 */
function eloqua_subscription_center_set_group_configs($group_configs) {
  variable_set('eloqua_subscription_center_groups', $group_configs);
}

/**
 * Saves a single subscription group configuration.
 *
 * @param int $group_id
 *   The emailGroup ID corresponding to the subscription.
 *
 * @param array $config
 *   The configuration corresponding to the given emailGroup ID.
 */
function eloqua_subscription_center_set_group_config($group_id, $config) {
  $groups = eloqua_subscription_center_get_group_configs();
  $groups[$group_id] = $config;
  variable_set('eloqua_subscription_center_groups', $groups);
}


/**
 * Returns an array of internal Eloqua e-mail group IDs for which an admin has
 * marked "allow subscription management for this e-mail group."
 *
 * @return array
 *   An array of integers, representing "enabled" Eloqua e-mail groupx.
 */
function eloqua_subscription_center_get_enabled_groups() {
  $enabled = &drupal_static(__FUNCTION__, FALSE);
  $configs = eloqua_subscription_center_get_group_configs();

  if ($enabled === FALSE) {
    $enabled = array();
    foreach ($configs as $id => $config) {
      if (isset($config['#enabled']) && $config['#enabled']) {
        $enabled[] = $id;
      }
    }
  }

  return $enabled;
}

/**
 * i18n helper function. Returns a string passed through i18n_string()
 * with default textgroup eloqua or just a regular string.
 *
 * @return string
 *   A translated string through i18n_string or a regular string.
 */
function eloqua_subscription_center_translate($name, $string, $langcode = NULL, $textgroup = 'eloqua') {
  return function_exists('i18n_string') ? i18n_string($textgroup . ':' . $name, $string, array('langcode' => $langcode, 'update' => TRUE)) : $string;
}

/**
 * i18n helper function. Refreshes strings from enabled email groups
 * when a refresh is triggered through admin/config/regional/translate/i18n_string.
 *
 * @see eloqua_subscription_center_i18n_string_refresh
 */
function eloqua_subscription_center_i18n_update_strings() {
  if (!function_exists('i18n_string_update')) {
    return;
  }

  $groups = variable_get('eloqua_subscription_center_groups', array());
  $enabled = eloqua_subscription_center_get_enabled_groups();

  foreach ($groups as $eid => $element) {
    if (in_array($eid, $enabled)) {
      $id = $element['#id'];
      $title = $element['#title'];
      $description = $element['#description'];

      i18n_string_update("eloqua:form:subscription:$id:title", $title);
      i18n_string_update("eloqua:form:subscription:$id:description", $description);
    }
  }
}
