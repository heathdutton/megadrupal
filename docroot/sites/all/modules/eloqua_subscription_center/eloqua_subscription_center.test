<?php

/**
 * @file
 * SimpleTest tests for the Eloqua Subscription Center module.
 */


/**
 * Unit tests for Eloqua Subscription Center.
 */
class EloquaSubscriptionCenterUnitTest extends DrupalUnitTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Eloqua Subscription Center unit tests',
      'description' => 'Unit tests for Eloqua Subscription Center API calls.',
      'group' => 'Eloqua',
    );
  }

  public function setUp() {
    parent::setUp();

    // Attempt to load all necessary classes manually. This syntax is necessary
    // because module_load_include() does not work without a DB. Order matters
    // because require_once will call the autoloader, which touches the DB.
    require_once(__DIR__ . '/eloqua_subscription_center.module');
  }

  /**
   * Creates necessary tables for testing functions involving variable_set().
   * Blasphemous, I know.
   */
  protected function createVariableTable() {
    // Create the variable table.
    Database::getConnection($this->target, $this->key)->schema()->createTable('variable', array(
      'fields' => array(
        'name' => array(
          'type' => 'varchar',
          'length' => 128,
          'not null' => TRUE,
          'default' => '',
        ),
        'value' => array(
          'type' => 'blob',
          'not null' => TRUE,
          'size' => 'big',
          'translatable' => TRUE,
        ),
      ),
      'primary key' => array('name'),
    ));
    // Also create the cache_bootstrap table.
    Database::getConnection($this->target, $this->key)->schema()->createTable('cache_bootstrap', array(
      'fields' => array(
        'cid' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => TRUE,
          'default' => '',
        ),
        'data' => array(
          'type' => 'blob',
          'not null' => FALSE,
          'size' => 'big',
        ),
        'expire' => array(
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'created' => array(
          'type' => 'int',
          'not null' => TRUE,
          'default' => 0,
        ),
        'serialized' => array(
          'type' => 'int',
          'size' => 'small',
          'not null' => TRUE,
          'default' => 0,
        ),
      ),
      'indexes' => array(
        'expire' => array('expire'),
      ),
      'primary key' => array('cid'),
    ));
  }

  /**
   * Cleans up tables created for testing variable_set() related functions.
   */
  protected function dropVariableTable() {
    Database::getConnection($this->target, $this->key)->schema()->dropTable('variable');
    Database::getConnection($this->target, $this->key)->schema()->dropTable('cache_bootstrap');
  }

  /**
   * @var string
   * @see EloquaSubscriptionCenterUnitTest::createVariableTable()
   */
  protected $target = 'DatabaseConnectionUnitTest';

  /**
   * @var string
   * @see EloquaSubscriptionCenterUnitTest::createVariableTable()
   */
  protected $key = 'default';

  /**
   * Fake group configuration for unit testing purposes.
   * @var array
   */
  protected $group_configs = array(
    42 => array(
      'key' => 'value',
    ),
    43 => array(
      'key' => 'value',
      '#enabled' => TRUE,
    ),
    44 => array(
      'key' => 'value',
      '#enabled' => FALSE,
    ),
  );

  /**
   * Ensure eloqua_subscription_center_get_group_configs() returns as expected.
   */
  function testShouldGetGroupConfigsFromGlobalVar() {
    $GLOBALS['conf']['eloqua_subscription_center_groups'] = $this->group_configs;

    // Ensure the full config is returned from the global variable state.
    $configs = eloqua_subscription_center_get_group_configs();
    $this->assertEqual($configs, $this->group_configs, 'Group configs getter returned as expected.');
  }

  /**
   * Ensure eloqua_subscription_center_get_group_config() returns full group.
   */
  function testShouldGetFullGroupConfig() {
    $GLOBALS['conf']['eloqua_subscription_center_groups'] = $this->group_configs;

    // Ensure the individual config is returned from the global variable state.
    $config = eloqua_subscription_center_get_group_config(42);
    $this->assertEqual($config, $this->group_configs[42], 'Group config getter returned as expected.');
  }

  /**
   * Ensure eloqua_subscription_center_get_group_config() returns group key.
   */
  function testShouldGetGroupConfigByKey() {
    $GLOBALS['conf']['eloqua_subscription_center_groups'] = $this->group_configs;

    // Ensure the individual config is returned from the global variable state.
    $config = eloqua_subscription_center_get_group_config(42, 'key');
    $this->assertEqual($config, $this->group_configs[42]['key'], 'Group config getter (by key) returned as expected.');
  }

  /**
   * Ensure eloqua_subscription_center_get_group_config() returns empty array.
   */
  function testShouldGetEmptyArrayGroupConfig() {
    $GLOBALS['conf']['eloqua_subscription_center_groups'] = $this->group_configs;

    // Ensure the individual config is returned from the global variable state.
    $config = eloqua_subscription_center_get_group_config(12);
    $this->assertEqual($config, array(), 'Group config getter returned empty array for non-existent group.');
  }

  /**
   * Ensure eloqua_subscription_center_get_enabled_groups() can have enabled
   * groups injected via drupal_static().
   */
  function testShouldAllowDrupalStaticInjectionEnabledGroups() {
    $mock_static = &drupal_static('eloqua_subscription_center_get_enabled_groups', FALSE);
    $mock_static = $this->group_configs;

    // Ensure the enabled groups array can be injected.
    $groups = eloqua_subscription_center_get_enabled_groups();
    $this->assertEqual($groups, $mock_static, 'Enabled groups are injectable via drupal_static().');
  }

  /**
   * Ensure eloqua_subscription_center_get_enabled_groups() returns the expected
   * enabled groups only.
   */
  function testShouldReturnExpecedEnabledGroups() {
    $GLOBALS['conf']['eloqua_subscription_center_groups'] = $this->group_configs;

    // Ensure only groups that are enabled are returned.
    $groups = eloqua_subscription_center_get_enabled_groups();
    $this->assertIdentical(count($groups), 1, 'Returned exactly 1 enabled group.');
    $this->assertTrue(array_search(43, $groups) === 0, 'Returned group is the expected group.');

    // Ensure the function is idempotent.
    $groups = eloqua_subscription_center_get_enabled_groups();
    $this->assertIdentical(count($groups), 1, 'Returned exactly 1 enabled group.');
    $this->assertTrue(array_search(43, $groups) === 0, 'Returned group is the expected group.');
  }

  /**
   * Ensure eloqua_subscription_center_set_group_configs() sets configs as
   * expected.
   */
  function testShouldSetGroupConfigs() {
    $this->createVariableTable();

    // Ensure that group configs are set as expected.
    eloqua_subscription_center_set_group_configs($this->group_configs);
    $this->assertEqual($GLOBALS['conf']['eloqua_subscription_center_groups'], $this->group_configs, 'Set group configs as expected.');

    $this->dropVariableTable();
  }

  /**
   * Ensure eloqua_subscription_center_set_group_configs() sets individual
   * configurations as expected.
   */
  function testShouldSetGroupConfig() {
    $this->createVariableTable();
    $expected = array(
      '#enabled' => TRUE,
      'key' => 'value',
    );

    // Ensure that group configs are set as expected.
    eloqua_subscription_center_set_group_config(50, $expected);
    $this->assertEqual($GLOBALS['conf']['eloqua_subscription_center_groups'][50], $expected, 'Set group config as expected.');

    $this->dropVariableTable();
  }

}


/**
 * Base class for behaviour tests for Eloqua Subscription Center.
 */
class EloquaSubscriptionCenterBehaviourTestBase extends DrupalWebTestCase {

  public function setUp() {
    parent::setUp(array(
      'eloqua_api',
      'eloqua_rest_api',
      'eloqua_subscription_center',
      'eloqua_subscription_center_mock_client',
    ));

    // Get subscriptions from mock Eloqua API.
    require_once('test/eloqua_subscription_center_mock_client/MockClient.php');
    $this->subscriptions = new MockElomentaryClient();
    $this->subscriptions = $this->subscriptions->api('contact')->subscriptions(1)->search('*');
    $this->subscriptions = $this->subscriptions['elements'];

    // Get e-mail groups from mock Eloqua API.
    $this->email_groups = new MockElomentaryClient();
    $this->email_groups = $this->email_groups->api('email')->groups()->search('*');
    $this->email_groups = $this->email_groups['elements'];
  }

  /**
   * An Eloqua Contact ID that does not exist.
   * @var string
   * @see MockElomentaryClient::contacts
   */
  protected $invalid_cid = 'CTBLS999999999999';

  /**
   * An Eloqua Contact ID that does exist.
   * @var string
   * @see MockElomentaryClient::contacts
   */
  protected $valid_cid = 'CTBLS000000000001';

  /**
   * Sample configurations for subscription center e-mail groups.
   * @var array
   */
  protected $configurations = array(
    1 => array(
      '#id' => 'should_not_exist',
      '#enabled' => FALSE,
      '#title' => 'This title should not be shown.',
      '#description' => 'This description should not be shown.',
      '#weight' => 0,
    ),
    2 => array(
      '#id' => 'data_from_eloqua',
      '#enabled' => TRUE,
      '#weight' => 1,
    ),
    3 => array(
      '#id' => 'data_overridden',
      '#enabled' => TRUE,
      '#title' => 'Visible and has been overridden',
      '#description' => 'This description has been overridden.',
      '#weight' => 2,
    ),
  );

  /**
   * E-mail group subscription data, pulled from the mock Elomentary API.
   * @var array
   */
  protected $subscriptions = array();

  /**
   * E-mail group data, pulled from the mock Elomentary API.
   * @var array
   */
  protected $email_groups = array();
}

/**
 * End-user behaviour tests for Eloqua Subscription Center.
 */
class EloquaSubscriptionCenterEndUserTest extends EloquaSubscriptionCenterBehaviourTestBase {

  public static function getInfo() {
    return array(
      'name' => 'Eloqua Subscription Center end-user behaviour tests',
      'description' => 'End-user behaviour tests for the Eloqua Subscription Center.',
      'group' => 'Eloqua',
    );
  }

  /**
   * Test basic, default subscription center behavior.
   */
  function testBasicSubscriptionCenterBehaviours() {
    // Ensure a non-existent contact results in a 404 and meta tags are set.
    $this->drupalGet('subscription-center/example.com/' . $this->invalid_cid);
    $this->assertRaw('<meta name="robots" content="noindex, nofollow, noarchive" />', 'Found robots meta tags on subscription center page.');
    $this->assertEqual($this->drupalGetHeader(':status'), 'HTTP/1.1 404 Not Found', 'Invalid contact returns 404.');
    $this->assertNotEqual($this->drupalGetHeader('x-drupal-cache'), 'HIT', 'Page was not cached.');
    $this->assertEqual($this->drupalGetHeader('cache-control'), 'no-cache, no-store, must-revalidate', 'Page is not HTTP cacheable.');

    // Ensure a valid contact with invalid domain results in a 403 (and tags).
    $this->drupalGet('subscription-center/notexample.com/' . $this->valid_cid);
    $this->assertRaw('<meta name="robots" content="noindex, nofollow, noarchive" />', 'Found robots meta tags on subscription center page.');
    $this->assertEqual($this->drupalGetHeader(':status'), 'HTTP/1.1 403 Forbidden', 'Valid contact with mismatching domain returns 403.');
    $this->assertNotEqual($this->drupalGetHeader('x-drupal-cache'), 'HIT', 'Page was not cached.');
    $this->assertEqual($this->drupalGetHeader('cache-control'), 'no-cache, no-store, must-revalidate', 'Page is not HTTP cacheable.');

    // Ensure a valid contact with matched domain results in a 200 (and tags).
    $this->drupalGet('subscription-center/example.com/' . $this->valid_cid);
    $this->assertRaw('<meta name="robots" content="noindex, nofollow, noarchive" />', 'Found robots meta tags on subscription center page.');
    $this->assertEqual($this->drupalGetHeader(':status'), 'HTTP/1.1 200 OK', 'Valid contact with matching domain returns 200.');
    $this->assertNotEqual($this->drupalGetHeader('x-drupal-cache'), 'HIT', 'Page was not cached.');
    $this->assertEqual($this->drupalGetHeader('cache-control'), 'no-cache, no-store, must-revalidate', 'Page is not HTTP cacheable.');

    // Ensure all default forms fields, values, and elements are present.
    $this->assertFieldByName('op', 'Update subscription', 'Found "update subscription" button.');
    $this->assertFieldByXpath('//input[@name="email" and @type="text"]', 'foobar@example.com', 'Found "e-mail" value by default.');
    $this->assertTitle('Subscriptions | Drupal', 'Default title was displayed.');
    $current_url = $this->getUrl();

    // Try submitting the form.
    $this->drupalPost(NULL, array(), 'Update subscription');
    $this->assertEqual($current_url, $this->getUrl(), 'Form submission did not redirect anywhere by default.');
    $this->assertNoFieldByXpath('//div[@class="messages status"]', NULL, 'Form submission did not trigger message by default.');
    $this->assertNotEqual($this->drupalGetHeader('x-drupal-cache'), 'HIT', 'Page was not cached.');
    $this->assertEqual($this->drupalGetHeader('cache-control'), 'no-cache, no-store, must-revalidate', 'Page is not HTTP cacheable.');
  }

  /**
   * Test configurable aspects of the subscription center page.
   */
  function testConfigurableSubscriptionCenterBehaviour() {
    // Make configurations up front.
    variable_set('eloqua_subscription_center_form_name', 'testform');
    variable_set('eloqua_subscription_center_hide_email', TRUE);
    variable_set('eloqua_subscription_center_title', 'Manage your subscriptions');
    variable_set('eloqua_subscription_center_path', 'manage/subscriptions/%/%');
    variable_set('eloqua_subscription_center_form_responses', array(
      'redirect' => 'redirect',
      'message' => 'message',
    ));
    variable_set('eloqua_subscription_center_confirmation_redirect', '<front>');
    variable_set('eloqua_subscription_center_confirmation_message', 'Subscriptions saved successfully.');
    drupal_flush_all_caches();
    menu_rebuild();

    // Run checks against the above configurations.
    $this->drupalGet('manage/subscriptions/example.com/' . $this->valid_cid);
    $this->assertRaw('<meta name="robots" content="noindex, nofollow, noarchive" />', 'Found robots meta tags on subscription center page.');
    $this->assertEqual($this->drupalGetHeader(':status'), 'HTTP/1.1 200 OK', 'Valid contact with matchin domain returns 200.');
    $this->assertFieldByName('op', 'Update subscription', 'Found "update subscription" button.');
    $this->assertFieldByXpath('//input[@name="email" and @type="hidden"]', 'foobar@example.com', 'Found hidden "e-mail" value by default.');
    $this->assertTitle('Manage your subscriptions | Drupal', 'Configured title was displayed.');
    $this->assertFieldByName('elqFormName', 'testform', 'Configured elqFormName found on form.');

    // Try submitting the form.
    $this->drupalPost(NULL, array(), 'Update subscription');
    $this->assertEqual(url('<front>', array('absolute' => TRUE)), $this->getUrl(), 'Form submission redirected to configured location.');
    $this->assertFieldByXpath('//div[@class="messages status"]', NULL, 'Form submission triggered a message.');
    $this->assertText('Subscriptions saved successfully.', 'Triggered message contained expected text.');
  }

  /**
   * Test subscription groups shown to end-users.
   */
  function testSubscriptionGroupDisplay() {
    // Set configurations.
    eloqua_subscription_center_set_group_configs($this->configurations);

    // Visit the subscription center page.
    $this->drupalGet('subscription-center/example.com/' . $this->valid_cid);

    // Ensure disabled group #1 above is not on the page.
    $this->assertNoText('This title should not be shown.', 'Disabled e-mail group title not shown.');
    $this->assertNoText('This description should not be shown.', 'Disabled e-mail group description not shown.');
    $this->assertNoFieldByName('should_not_exist', NULL, 'Disabled e-mail group checkbox not shown.');

    // Ensure enabled group #2 is shown with default Eloqua title/descriptions.
    $this->assertText($this->subscriptions[2]['emailGroup']['name'], 'Default group title text found.');
    $this->assertText($this->subscriptions[2]['emailGroup']['description'], 'Default group description text found.');
    $this->assertFieldByName($this->configurations[2]['#id'], '1', 'Default group checkbox found and subscribed, per API.');

    // Ensure enabled group #3 is shown with overridden title/descriptions.
    $this->assertText($this->configurations[3]['#title'], 'Overridden group title text found.');
    $this->assertText($this->configurations[3]['#description'], 'Overridden group description text found.');
    $this->assertFieldByName($this->configurations[3]['#id'], '1', 'Overridden group checkbox found and subscribed by default.');

    // Set the default to "unsubscribed" and check that it sticks.
    variable_set('eloqua_subscription_center_default_status', FALSE);
    $this->drupalGet('subscription-center/example.com/' . $this->valid_cid);
    $this->assertFieldByName($this->configurations[2]['#id'], '1', 'Default group checkbox found and subscribed, per API (no change).');
    $this->assertFieldByName($this->configurations[3]['#id'], '0', 'Overridden group checkbox found and unsubscribed per configuration.');
  }

}

/**
 * End-user behaviour tests for the "my subscription center" feature.
 */
class EloquaSubscriptionCenterMySubscriptionsTest extends EloquaSubscriptionCenterBehaviourTestBase {

  public static function getInfo() {
    return array(
      'name' => 'Eloqua Subscription Center "my subscriptions" behaviour tests',
      'description' => 'Tests covering the "manage my subscriptions" feature.',
      'group' => 'Eloqua',
    );
  }

  public function setUp() {
    parent::setUp();

    $this->user = $this->drupalCreateUser();


    // Get subscriptions from mock Eloqua API.
    require_once('test/eloqua_subscription_center_mock_client/MockClient.php');
    $client = new MockElomentaryClient();
    $this->contacts = $client->api('contacts')->search('foobar@example.com');
  }

  /**
   * A standard Drupal user with no special permissions.
   * @var Object
   */
  protected $user;

  /**
   * Contact data as returned by the mock client.
   * @var array
   */
  protected $contacts = array();

  /**
   * Test that the "my-subscription-center" link is only accessible to
   * authenticated user.
   */
  function testMySubscriptionCenterLinkAccess() {
    // Attempt to access the "my-subscription-center" callback anonymously.
    $this->drupalGet('my-subscription-center');
    $status = $this->drupalGetHeader(':status');
    $this->assertTrue(strpos($status, '403') !== FALSE, 'My subscription center callback requires user authentication.');

    // Attempt to do the same, but while authenticated with a non-matching
    // e-mail address.
    $this->drupalLogin($this->user);
    $this->drupalGet('my-subscription-center');
    $this->assertTrue(strpos($status, '403') !== FALSE, 'My subscription center callback requires user authentication.');

    // Attempt to do the same, but with the expected e-mail address match.
    $user = $this->user;
    $user->mail = $this->contacts['elements'][0]['emailAddress'];
    user_save($user);
    $this->drupalGet('my-subscription-center');
    $this->assertTrue(strpos($this->getUrl(), 'subscription-center/example.com/1') !== FALSE, 'My subscription center callback redirected to the expected page.');
    $this->assertFieldByName('email', $this->contacts['elements'][0]['emailAddress'], 'Subscription center form displayed with expected e-mail address.');
  }

}

/**
 * End-user behaviour tests for Eloqua Subscription Center.
 */
class EloquaSubscriptionCenterAdminConfigTest extends EloquaSubscriptionCenterBehaviourTestBase {

  public static function getInfo() {
    return array(
      'name' => 'Eloqua Subscription Center admin / configuration behaviour tests',
      'description' => 'Admin / configuration behaviour tests for the Eloqua Subscription Center.',
      'group' => 'Eloqua',
    );
  }

  public function setUp() {
    parent::setUp();

    $this->admin = $this->drupalCreateUser(array(
      'access administration pages',
      'manage eloqua subscription center',
      'administer eloqua api',
    ));
  }

  /**
   * An administrative user with access to manage Eloqua Subscription Center.
   * @var Object
   */
  protected $admin;

  /**
   * Test that the "Eloqua subscription center" form is Eloqua API enabled by
   * default.
   */
  function testFormIsEloquaApiEnabledOnInstall() {
    // Log the admin user in and check the Eloqua API config page.
    $this->drupalLogin($this->admin);
    $this->drupalGet('admin/config/services/eloqua-api/settings');

    // Assert that "Eloqua subscription center" is Eloqua API enabled.
    $value = 'eloqua_subscription_center_form';
    $name = 'eloqua_api_enabled_forms[' . $value . ']';
    $xpath = '//input[@name="' . $name . '" and @checked="checked"]';
    $this->assertFieldByXPath($xpath, $value, 'Eloqua subscription center form is Eloqua API enabled on install.');
  }

  /**
   * Ensure only those with permissions have access to the configuration page.
   */
  function testShouldFollowPermissions() {
    // Create an admin user without proper credentials.
    $account = $this->drupalCreateUser(array('access administration pages'));
    $this->drupalLogin($account);

    // Attempt to visit the configuration page.
    $this->drupalGet('admin/config/system/eloqua-subscription-center');
    $this->assertNoFieldByName('eloqua_subscription_center_title', NULL, 'Did not find the configuration form.');
    $this->assertEqual($this->drupalGetHeader(':status'), 'HTTP/1.1 403 Forbidden', 'Proper permissions enforced.');

    // Log the user out.
    $this->drupalLogout();

    // Log in the admin user WITH proper credentials.
    $this->drupalLogin($this->admin);

    // Attempt to visit the configuration page.
    $this->drupalGet('admin/config/system/eloqua-subscription-center');
    $this->assertFieldByName('eloqua_subscription_center_title', NULL, 'Found the configuration form.');
  }

  /**
   * Test subscription center path variable setting and validation.
   */
  function testSubscriptionCenterPathValidationsAndSubmission() {
    // Log the admin user in and check the Eloqua API config page.
    $this->drupalLogin($this->admin);
    $this->drupalGet('admin/config/system/eloqua-subscription-center');
    $var = 'eloqua_subscription_center_path';

    // Must include the contact ID token.
    $edit = array($var => 'preferences/[#email_domain]');
    $this->drupalPost(NULL, $edit, 'Save configuration');
    $this->assertText('The path you specified did not include one or both of the required tokens', 'Validation error thrown when contact token omitted.');

    // Must include the e-mail domain token.
    $edit = array($var => 'preferences/[#contact_id]');
    $this->drupalPost(NULL, $edit, 'Save configuration');
    $this->assertText('The path you specified did not include one or both of the required tokens', 'Validation error thrown when e-mail domain token omitted.');

    // Domain token must always precede the contact token.
    $edit = array($var => 'preferences/[#contact_id]/[#email_domain]');
    $this->drupalPost(NULL, $edit, 'Save configuration');
    $this->assertText('must always come before the', 'Validation error thrown when e-mail domain token listed after contact token in path string.');

    // Cannot begin with a token.
    $edit = array($var => '[#email_domain]/preferences/[#contact_id]');
    $this->drupalPost(NULL, $edit, 'Save configuration');
    $this->assertText('The path must not begin with a token.', 'Validation error thrown when path begins with token.');

    // Tokens must be seperated by slashes (beginning of token).
    $edit = array($var => 'preferences/[#email_domain][#contact_id]');
    $this->drupalPost(NULL, $edit, 'Save configuration');
    $this->assertText('Tokens must be distinct parts of the path.', 'Validation error thrown when tokens are not distinct path parts (contact id, beginning)');
    $edit = array($var => 'preferences[#email_domain]/[#contact_id]');
    $this->drupalPost(NULL, $edit, 'Save configuration');
    $this->assertText('Tokens must be distinct parts of the path.', 'Validation error thrown when tokens are not distinct path parts (e-mail domain, beginning)');

    // Token must be at path's end or followed by a slash.
    $edit = array($var => 'preferences/[#email_domain]/[#contact_id]manage');
    $this->drupalPost(NULL, $edit, 'Save configuration');
    $this->assertText('Tokens must be distinct parts of the path.', 'Validation error thrown when tokens are not distinct path parts (contact id, ending)');
    $edit = array($var => 'preferences/[#email_domain]manage/[#contact_id]');
    $this->drupalPost(NULL, $edit, 'Save configuration');
    $this->assertText('Tokens must be distinct parts of the path.', 'Validation error thrown when tokens are not distinct path parts (e-mail domain, ending)');

    // Cannot contain a token more than once.
    $edit = array($var => 'preferences/[#email_domain]/[#contact_id]/[#email_domain]');
    $this->drupalPost(NULL, $edit, 'Save configuration');
    $this->assertText('Tokens must not occur more than once in the specified path.', 'Validation error thrown when e-mail domain token is included more than once');
    $edit = array($var => 'preferences/[#email_domain]/[#contact_id]/[#contact_id]');
    $this->drupalPost(NULL, $edit, 'Save configuration');
    $this->assertText('Tokens must not occur more than once in the specified path.', 'Validation error thrown when contact token is included more than once');

    // Attempt to save a valid subscription center path.
    $edit = array(
      $var => 'preferences/for/[#email_domain]/[#contact_id]/edit',
      'eloqua_subscription_center_form_name' => 'testform',
    );
    $this->drupalPost(NULL, $edit, 'Save configuration');
    $this->assertText('The configuration options have been saved.', 'Confirmation message shown.');
    $this->assertFieldByName($var, $edit[$var], 'Variable loaded correctly in the field.');

    // Ensure the subscription center is available at the new path immediately.
    $this->drupalGet('preferences/for/example.com/' . $this->valid_cid . '/edit');
    $this->assertEqual($this->drupalGetHeader(':status'), 'HTTP/1.1 200 OK', 'Valid contact with matching domain returns 200.');
    $this->assertTitle('Subscriptions | Drupal', 'Found subscription center page by title.');

    // Ensure the variable was saved as expected.
    $this->assertEqual(variable_get($var, ''), 'preferences/for/%/%/edit', 'Variable saved as expected.');
  }

  /**
   * Test the more basic subscription center configurations, one-by-one.
   */
  function testBasicSubscriptionCenterConfigurations() {
    // Log the admin user in and check the Eloqua API config page.
    $this->drupalLogin($this->admin);
    $this->drupalGet('admin/config/system/eloqua-subscription-center');
    $defaults = array('eloqua_subscription_center_form_name' => 'testform');

    // Test subscription center title configuration saves.
    $var = 'eloqua_subscription_center_title';
    $edit = array($var => 'Custom title');
    $this->drupalPost(NULL, $edit + $defaults, 'Save configuration');
    $this->assertText('The configuration options have been saved.', 'Confirmation message shown.');
    $this->assertFieldByName($var, $edit[$var], 'Variable loaded correctly in the field.');
    $this->drupalGet('subscription-center/example.com/' . $this->valid_cid);
    $this->assertEqual($this->drupalGetHeader(':status'), 'HTTP/1.1 200 OK', 'Valid contact with matching domain returns 200.');
    $this->assertTitle($edit[$var] . ' | Drupal', 'Found updated subscription center title on page.');

    // Test Eloqua form name configuration saves.
    $var = 'eloqua_subscription_center_form_name';
    $edit = array($var => 'different form name');
    $this->drupalPost('admin/config/system/eloqua-subscription-center', $edit, 'Save configuration');
    $this->assertText('The configuration options have been saved.', 'Confirmation message shown.');
    $this->assertFieldByName($var, $edit[$var], 'Eloqua form name loaded correctly in the field.');
    $this->assertEqual(variable_get($var, ''), $edit[$var], 'Eloqua form name saved as expected.');

    // Test default subscription status configuration saves.
    $var = 'eloqua_subscription_center_default_status';
    $edit = array($var => 0);
    $this->drupalPost(NULL, $edit, 'Save configuration');
    $this->assertText('The configuration options have been saved.', 'Confirmation message shown.');
    $this->assertFieldByName($var, $edit[$var], 'Default subscription status loaded correctly in the field.');
    $this->assertEqual(variable_get($var, ''), $edit[$var], 'Default subscription status saved as expected.');

    // Test hide e-mail checkbox configuration saves.
    $var = 'eloqua_subscription_center_hide_email';
    $edit = array($var => TRUE);
    $this->drupalPost(NULL, $edit, 'Save configuration');
    $this->assertText('The configuration options have been saved.', 'Confirmation message shown.');
    $this->assertFieldByName($var, $edit[$var], 'Hide e-mail checkbox loaded correctly in the field.');
    $this->assertEqual(variable_get($var, ''), $edit[$var], 'Hide e-mail checkbox saved as expected.');

    // Attempt to set form actions without their requisite values.
    $edit = array(
      'eloqua_subscription_center_form_responses[message]' => 'message',
      'eloqua_subscription_center_form_responses[redirect]' => 'redirect',
    );
    $this->drupalPost(NULL, $edit, 'Save configuration');
    $this->assertText('Confirmation message field is required.', 'Validation error thrown when confirmation message action is checked but no message is provided.');
    $this->assertText('Confirmation redirect field is required.', 'Validation error thrown when redirect action is checked but not redirect is provided.');

    // Again, but with requisite values; ensure they're saved properly.
    $edit['eloqua_subscription_center_confirmation_message'] = 'Custom message.';
    $edit['eloqua_subscription_center_confirmation_redirect'] = '<front>';
    $this->drupalPost(NULL, $edit, 'Save configuration');
    $this->assertText('The configuration options have been saved.', 'Confirmation message shown.');
    $var = 'eloqua_subscription_center_confirmation_message';
    $this->assertFieldByName($var, $edit[$var], 'Confirmation message loaded correctly in the field.');
    $this->assertEqual(variable_get($var, ''), $edit[$var], 'Confirmation message saved as expected.');
    $var = 'eloqua_subscription_center_confirmation_redirect';
    $this->assertFieldByName($var, $edit[$var], 'Redirect loaded correctly in the field.');
    $this->assertEqual(variable_get($var, ''), $edit[$var], 'Redirect saved as expected.');
    $var = 'eloqua_subscription_center_form_responses[message]';
    $this->assertFieldByName($var, $edit[$var], 'Message flag loaded correctly in the field.');
    $var = 'eloqua_subscription_center_form_responses[redirect]';
    $this->assertFieldByName($var, $edit[$var], 'Redirect flag loaded correctly in the field.');
    $var = 'eloqua_subscription_center_form_responses';
    $this->assertEqual(variable_get($var, array()), array('redirect' => 'redirect', 'message' => 'message'), 'Message an redirect flags saved as expected.');
  }

  /**
   * Test pulling fresh e-mail group subscriptions from Eloqua.
   */
  function testRefreshEmailGroupSubscriptionsFromEloqua() {
    // Log the admin user in and check the Eloqua API config page.
    $this->drupalLogin($this->admin);
    $this->drupalGet('admin/config/system/eloqua-subscription-center');
    $defaults = array('eloqua_subscription_center_form_name' => 'testform');

    // Ensure the "no groups exist" message is shown by default.
    $this->assertText('Looks like no e-mail groups from Eloqua have yet been loaded.', '"No e-mail groups loaded" message shown when no groups have been configured.');
    $this->assertFieldById('edit-load-from-elq', 'Pull latest groups from Eloqua', 'Found the "Pull latest groups from Eloqua" button.');

    // Attempt to load groups from the API.
    $this->drupalPost(NULL, $defaults, 'Pull latest groups from Eloqua');
    $count = count($this->email_groups);
    $this->assertText('Successfully retrieved ' . $count . ' new groups from Eloqua.', 'Confirmation message displayed as expected.');

    // Ensure all values from the API were saved and retrieved as expected.
    $fields = array('enabled', 'title', 'id', 'description', 'weight');
    foreach ($this->email_groups as $id => $group) {
      foreach ($fields as $field) {
        $name = 'eloqua_subscription_center_groups[' . $id . '][' . $field .']';
        $value = isset($group['#' . $field]) ? $group['#' . $field] : NULL;
        $this->assertFieldByName($name, $value, format_string('Found %field field with value "%value" for group %group.', array(
          '%field' => $field,
          '%value' => $value,
          '%group' => $id,
        )));
      }
    }

    // Reset configurations to a known list of three.
    eloqua_subscription_center_set_group_configs($this->configurations);
    $defaults['eloqua_subscription_center_groups[2][title]'] = 'Title';
    $this->drupalGet('admin/config/system/eloqua-subscription-center');
    $this->drupalPost(NULL, $defaults, 'Pull latest groups from Eloqua');
    $this->assertText('Successfully retrieved 1 new groups from Eloqua.', 'Confirmation message displayed as expected.');

    // Loop through configurations and ensure fields are populated as expected.
    $fields = array('enabled', 'title', 'id', 'description', 'weight');
    foreach ($this->configurations as $id => $config) {
      foreach ($fields as $field) {
        $name = 'eloqua_subscription_center_groups[' . $id . '][' . $field . ']';
        $value = isset($config['#' . $field]) ? $config['#' . $field] : NULL;
        $this->assertFieldByName($name, $value, format_string('Found %field field with value "%value" for group %group.', array(
          '%field' => $field,
          '%value' => $value,
          '%group' => $id,
        )));
      }
    }

    // Ensure defaults pulled from Eloqua match expected values.
    $this->assertFieldByXPath('//input[@name="eloqua_subscription_center_groups[4][enabled]" and not(@checked)]', NULL, 'Subscription management checkbox from Eloqua defaulted to unchecked.');
    $this->assertFieldByName('eloqua_subscription_center_groups[4][title]', $this->email_groups[4]['name'], 'Pulled e-mail group name from Eloqua.');
    $this->assertFieldByName('eloqua_subscription_center_groups[4][id]', 4, 'Pulled e-mail group id from Eloqua.');
    $this->assertFieldByName('eloqua_subscription_center_groups[4][description]', $this->email_groups[4]['description'], 'Pulled e-mail group name from Eloqua.');
    $this->assertFieldByName('eloqua_subscription_center_groups[4][weight]', 0, 'E-mail group order defaulted to 0.');
  }

  /**
   * Test e-mail group subscription configurations.
   */
  function testEmailGroupSubscriptionConfigurations() {
    // Set configurations and login as admin.
    eloqua_subscription_center_set_group_configs($this->configurations);
    $this->drupalLogin($this->admin);
    $this->drupalGet('admin/config/system/eloqua-subscription-center');
    $defaults = array(
      'eloqua_subscription_center_form_name' => 'testform',
      // Needed to get around validation error unrelated to this test.
      'eloqua_subscription_center_groups[2][title]' => 'Title',
    );

    // Loop through configurations and ensure fields are populated as expected.
    $fields = array('enabled', 'title', 'id', 'description', 'weight');
    foreach ($this->configurations as $id => $config) {
      foreach ($fields as $field) {
        $name = 'eloqua_subscription_center_groups[' . $id . '][' . $field . ']';
        $value = isset($config['#' . $field]) ? $config['#' . $field] : NULL;
        $this->assertFieldByName($name, $value, format_string('Found %field field with value "%value" for group %group.', array(
          '%field' => $field,
          '%value' => $value,
          '%group' => $id,
        )));
      }
    }

    // Update all values subscription group 1.
    $edit = array();
    foreach ($fields as $field) {
      $name = 'eloqua_subscription_center_groups[1][' . $field . ']';
      switch ($field) {
        case 'title':
        case 'id':
        case 'description':
          $edit[$name] = $this->randomName(15);
          break;

        case 'weight':
          $edit[$name] = -1;
          break;

        case 'enabled':
          $edit[$name] = TRUE;
          break;
      }
    }
    $this->drupalPost(NULL, $edit + $defaults, 'Save configuration');

    // Ensure the values were saved as expected and are displayed as expected.
    $this->assertText('The configuration options have been saved.', 'Confirmation message shown.');
    foreach ($fields as $field) {
      $name = 'eloqua_subscription_center_groups[1][' . $field . ']';

      $this->assertEqual(eloqua_subscription_center_get_group_config(1, '#' . $field), $edit[$name], format_string('The %field field was saved properly with value %value.', array(
        '%field' => $field,
        '%value' => $edit[$name],
      )));
    }
    foreach ($edit as $name => $value) {
      $this->assertFieldByName($name, $value, format_string('The %name field was loaded correctly on the page with value %value.', array(
        '%name' => $name,
        '%value' => $value,
      )));
    }
  }

}
