<?php

/**
 * @file
 * Module code for Drulenium Visual Regression.
 */

/**
 * Implements hook_perm().
 */
function drulenium_visual_regression_permission() {
  return array(
    'run_visual_tests' => array(
      'title' => t('Run Tests'),
      'description' => t('Configure, Run & Compare tests.'),
    ),
  );
}

/**
 * Implements hook_libraries_info().
 *
 * For defining external libraries.
 */
function drulenium_visual_regression_libraries_info() {
  // A very simple library. No changing APIs (hence, no versions), no variants.
  // Expected to be extracted into 'sites/all/libraries/simple'.
  $libraries['selenium_webdriver'] = array(
    'name' => 'selenium_webdriver',
    'vendor url' => 'https://github.com/facebook/php-webdriver',
    'download url' => 'https://github.com/facebook/php-webdriver',
    'version' => '1',
   /* 'version arguments' => array(
      'file' => 'simple.js', // Could be any file with version info
      'pattern' => '/Version (\d+)/',
      'lines' => 5,
    ), */
    'files' => array(
      'php' => array('lib/__init__.php'),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_menu().
 */
function drulenium_visual_regression_menu() {
  $items['admin/structure/drulenium/vr'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Visual Regression',
    'description' => 'Configuration for Visual Regression Testing.',
    'page callback' => 'drulenium_visual_regression_releases',
    'access callback' => 'user_access',
    'access arguments' => array('run_visual_tests'),
  );
  $items['admin/structure/drulenium/vr/release/%'] = array(
    'title' => 'Release',
    'page callback' => 'drulenium_visual_regression_release_detail',
    'page arguments' => array(5),
    'access arguments' => array('run_visual_tests'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/drulenium/vr/delete-release/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drulenium_visual_regression_release_delete_form', 5),
    'access arguments' => array('run_visual_tests'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/drulenium/vr/release/status/%'] = array(
    'title' => 'Manual Release Status check',
    'page callback' => 'drulenium_visual_regression_release_status',
    'page arguments' => array(6),
    'access arguments' => array('run_visual_tests'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/drulenium/vr/release/process-local/%'] = array(
    'title' => 'Process Release Locally',
    'page callback' => 'drulenium_visual_regression_release_process_local',
    'page arguments' => array(6),
    'access arguments' => array('run_visual_tests'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/drulenium/vr/compare/%/%'] = array(
    'title' => 'Compare',
    'page callback' => 'drulenium_visual_regression_releases_compare',
    'page arguments' => array(5,6),
    'access arguments' => array('run_visual_tests'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/drulenium/vr/compare/status/%/%'] = array(
    'title' => 'Manual Compare Status check',
    'page callback' => 'drulenium_visual_regression_compare_status',
    'page arguments' => array(6,7),
    'access arguments' => array('run_visual_tests'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/drulenium/vr/compare/process-local/%/%'] = array(
    'title' => 'Process Comparision Locally',
    'page callback' => 'drulenium_visual_regression_compare_process_local',
    'page arguments' => array(6,7),
    'access arguments' => array('run_visual_tests'),
    'type' => MENU_CALLBACK,
  );
  $items['drulenium_vr/vote/js'] = array(
	'page callback' => 'drulenium_visual_regression_vote_ahah',
	'access arguments' => array('run_visual_tests'),
	'type' => MENU_CALLBACK
  );
  $items['vr/twenty-twenty/%/%'] = array(
	'page callback' => 'drulenium_visual_regression_compare_snapshots_twenty_twenty',
	'page arguments' => array(2,3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function drulenium_visual_regression_compare_snapshots_twenty_twenty($base_run_id, $cmp_run_id) {
  drupal_add_js(drupal_get_path('module', 'drulenium_visual_regression') . '/js/jquery.twentytwenty.js');
  drupal_add_js(drupal_get_path('module', 'drulenium_visual_regression') . '/js/vr_twenty.js');
  drupal_add_css(drupal_get_path('module', 'drulenium_visual_regression') . '/css/twentytwenty.css');
  $output = '<div id="container1">
  <img src="http://dev.proxy.drulenium.com/sites/dev.proxy.drulenium.com/files/drulenium/1438957920.png">
  <img src="http://dev.proxy.drulenium.com/sites/dev.proxy.drulenium.com/files/drulenium/1438952614.png">
</div>';
  return $output;
}

/**
 * AHAH callback for the vote buttons.
 */
function drulenium_visual_regression_vote_ahah() {
  $unique_content_id = filter_var(trim(filter_xss($_POST["unique_id"])),FILTER_SANITIZE_STRING, FILTER_FLAG_STRIP_LOW | FILTER_FLAG_STRIP_HIGH);
  //Convert content ID to MD5 hash (optional)
  //$unique_content_id = hash('md5', $unique_content_id);
  $user_vote_type = trim(filter_xss($_POST['vote']));

  switch ($user_vote_type)
  {

    ##### User liked the content #########
    case 'up':

      //check if user has already voted, determined by unique content cookie
      if (isset($_COOKIE["voted_".$unique_content_id]))
      {
        header('HTTP/1.1 500 Already Voted'); //cookie found, user has already voted
        exit(); //exit script
      }

      //get vote_up value from db using unique_content_id
      $criteria = array(
        'content_type' => 'drulenium_vr',
        'value_type' => 'points',
        'content_id' => $unique_content_id,
        'tag' => 'change_up',
      );
      $ret = votingapi_select_results($criteria, 1);
      $get_vote_up = 0;
      if(!empty($ret)){
        $get_vote_up = $ret[0]['value'];
      }

      $vote = array(
        'content_type' => 'drulenium_vr',
        'value_type' => 'points',
        'content_id' => $unique_content_id,
        'value' => $get_vote_up + 1,
        'tag' => 'change_up',
      );
      $votes = array($vote);
      votingapi_set_votes($votes);

      setcookie("voted_".$unique_content_id, 1, time()+7200); // set cookie that expires in 2 hour "time()+7200".
      echo ($get_vote_up+1); //display total liked votes
      break;

      ##### User disliked the content #########
    case 'down':

      //check if user has already voted, determined by unique content cookie
      if (isset($_COOKIE["voted_".$unique_content_id]))
      {
        header('HTTP/1.1 500 Already Voted this Content!'); //cookie found, user has already voted
        exit(); //exit script
      }

      //get vote_up value from db using unique_content_id
      //$result = mysqli_query($sql_con,"SELECT vote_down FROM voting_count WHERE unique_content_id='$unique_content_id' LIMIT 1");
      $criteria = array(
        'content_type' => 'drulenium_vr',
        'value_type' => 'points',
        'content_id' => $unique_content_id,
        'tag' => 'change_down',
      );
      $ret = votingapi_select_results($criteria, 1);
      $get_vote_down = 0;
      if(!empty($ret)){
        $get_vote_down = $ret[0]['value'];
      }

      $vote = array(
        'content_type' => 'drulenium_vr',
        'value_type' => 'points',
        'content_id' => $unique_content_id,
        'value' => $get_vote_down + 1,
        'tag' => 'change_down',
      );
      $votes = array($vote);
      votingapi_set_votes($votes);

      setcookie("voted_".$unique_content_id, 1, time()+7200);  // set cookie that expires in 2 hour "time()+7200".
      echo ($get_vote_down+1);//display total disliked votes
      break;

  }

  module_invoke_all('exit') & exit;
}

/**
 * Implements hook_theme().
 */
function drulenium_visual_regression_theme() {
  return array(
    'drulenium_visual_regression_compare_releases_form' => array(
      'render element' => 'form',
    ),
  );
}

function drulenium_visual_regression_compare_process_local($old_re_id, $new_re_id) {
  if ($new_re_id < $old_re_id) {
    $tmp = $new_re_id;
    $new_re_id = $old_re_id;
    $old_re_id = $tmp;
  }
  //if Image magick is installed
    //_drulenium_visual_regression_webdriver_navigate("http://docs.seleniumhq.org/");
  //return "test";
  $batch = array(
    'operations' => array(),
    'finished' => 'drulenium_visual_regression_compare_batch_finished', // runs after batch is finished
    'title' => t('Processing request'),
    'init_message' => t('Comparision process is starting.'),
    'progress_message' => t('Processed @current out of @total sets.'),
    'error_message' => t('Comparision has encountered an error.'),
  );
  $progress = 0; // where to start
  $limit = 1; // how many to process for each run
  $max = 1000; // how many records to process until stop - can do query here to get max times to run

  // Get unprocessed runs of specified compare
  // where snapshot is empty
  $query = db_select('drulenium_vr_results', 'vr_re');
  $query
    ->fields('vr_re')
    ->condition('vr_re.release_base_id', $old_re_id)
    ->condition('vr_re.release_cmp_id', $new_re_id)
    ->isNull('vr_re.diff_percent');
  $query->addExpression('COUNT(rid)', 'run_count');
  $result = $query->execute();
  $row = $result->fetchAssoc();
  $max = $row['run_count'];

  while($progress <= $max) {
    $batch['operations'][] = array('drulenium_visual_regression_compare_batch_op', array($old_re_id, $new_re_id, $progress, $limit));
    $progress = $progress + $limit;
  }

  batch_set($batch);

  // Pass in page to return to after complete.
  batch_process("admin/structure/drulenium/vr/compare/$old_re_id/$new_re_id");
}

// this is what runs multiple times per batch
// progress and limit and is updated during each run
function drulenium_visual_regression_compare_batch_op($old_re_id, $new_re_id, $progress, $limit, &$context) {
  $query = db_select('drulenium_vr_results', 'vr_re');
  $query->fields('vr_re');
  $query->fields('r_b', array('snapshot'));
  $query->fields('r_c', array('snapshot'));
  $query->join('drulenium_vr_runs', 'r_b', 'vr_re.run_base_id = r_b.rid');
  $query->join('drulenium_vr_runs', 'r_c', 'vr_re.run_cmp_id = r_c.rid');
  $query->condition('vr_re.release_base_id', $old_re_id);
  $query->condition('vr_re.release_cmp_id', $new_re_id);
  $query->isNull('vr_re.diff_percent');
  $query->range(0,$limit);
  $result = $query->execute();
  $image_magick_path = variable_get('drulenium_vr_release_imagemagick_path', "/opt/local/bin");
  exec("$image_magick_path/convert -version", $out, $image_magick_code); //Try to get ImageMagick "convert" program version number.
  //$image_magick_code = 0 if OK, nonzero if error.

  while($res = $result->fetchAssoc()) {
    //have to use proc_open http://cgit.drupalcode.org/imagemagick/tree/imagemagick.module#n478
    $image1 = $res['snapshot'];
    $image2 = $res['r_c_snapshot'];
    $image1 = str_replace(file_create_url(file_default_scheme() . '://'),drupal_realpath(file_default_scheme() . '://')."/",$image1);
    $image2 = str_replace(file_create_url(file_default_scheme() . '://'),drupal_realpath(file_default_scheme() . '://')."/",$image2);
    //dsm( "$image1 $image2");
    //$output = exec("$image_magick_path/compare -metric AE -fuzz '2%' $image1 $image2 -null: 2>&1");
    $diff = _drulenium_vr_image_compare($image1,$image2,5,5,5,1,5);
    if($diff == "Width does not match." || $diff == "Height does not match."){
      //forcing highlighted diff & gif to be generated.
      $diff_percent = 2.99999;
      watchdog("drulenium", $diff." -> $image1 : $image2");
    }
      // print_r($return_var);
    if (!isset($diff['PercentDifference'])) {
      $diff_percent = 0;
    }
    else {
      $diff_percent = $diff['PercentDifference'];
    }
    
    $gif_link = "";
    if ($diff_percent > 0 && $image_magick_code == 0) {
      //generate GIF
      $unique_id = "drulenium/gif_". microtime(TRUE) . ".gif";
      $gif_path = drupal_realpath(file_default_scheme() . '://')."/".$unique_id;
      $gif_link = file_create_url(file_default_scheme() . '://').$unique_id;
      //dsm("$image_magick_path/convert -delay 50 $image1 $image2 -loop 0 $gif_path");
      $command = "$image_magick_path/convert -delay 50 $image1 $image2 -loop 0 $gif_path 2>&1";
      $exec_error = exec($command);
      if(!empty($exec_error)){
        $gif_link = "";
        watchdog("drulenium", $exec_error." -> $command");
      }
    }
    //$diff_percent = sprintf("%.3f",($output/(400*300))*100);
    $highlighted_link = '';
    if ($diff_percent > 0 && $image_magick_code == 0) {
      // generate highlighted image
      $unique_id = "drulenium/highlight_". microtime(TRUE) . ".png";
      $highlighted_path = drupal_realpath(file_default_scheme() . '://')."/".$unique_id;
      $highlighted_link = file_create_url(file_default_scheme() . '://').$unique_id;
      //dsm("$image_magick_path/compare $image1 $image2 -compose src $highlighted_path");
      $command = "$image_magick_path/compare $image1 $image2 $highlighted_path 2>&1";
      $exec_error = exec($command);
      if(!empty($exec_error)){
        $highlighted_link = "";
        watchdog("drulenium", $exec_error." -> $command");
      }
    }

    db_query("Update drulenium_vr_results res
      LEFT JOIN drulenium_vr_runs run on res.run_base_id = run.rid
      LEFT JOIN drulenium_vr_releases rel on run.re_id = rel.rid
      SET  diff_percent = :diff_percent, diff_highlight = :diff_highlight, diff_gif = :diff_gif
      WHERE res.rid = :res_id",
      array(':res_id' => $res['rid'], ':diff_percent' => $diff_percent, ':diff_highlight' => $highlighted_link, ':diff_gif' => $gif_link));
    
    
  }
  // update progress for message
  $progress = $progress + $limit;
  // update message during each run so you know where you are in the process
  $context['message'] = 'Now processing ' . $progress;
}

/**
 * Batch 'finished' callback used by Compare batch.
 */
function drulenium_visual_regression_compare_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message('Comparision process is completed.');
  }
  else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE)
    ));
    drupal_set_message($message, 'error');
  }
}

function drulenium_visual_regression_compare_status($base_release_secure_id, $cmp_release_secure_id) {
  // RPC call
  $result = xmlrpc('http://drulenium.technikh.com/xmlrpc.php', array(
      'drulenium.api_compare_status' => array($base_release_secure_id, $cmp_release_secure_id),
  ));
  //dsm($result);
  foreach ($result as $cmp_res){
    // To support certain encoded characters like french, spanish...
    //TODO: There are some known issues with arabic characters
    $cmp_res['url'] = utf8_encode($cmp_res['url']);

    $diff_percent = $cmp_res['diff_percent'];
    if($diff_percent == "isNULL"){
      $diff_percent = NULL;
    }
    //$relative_url = substr($cmp_res['url'], strpos($cmp_res['url'], "?q=")+3);
    $gif_link = "";
    if(!empty($cmp_res['diff_gif'])){
      $gif_link = "http://drulenium.technikh.com/".$cmp_res['diff_gif'];
    }
    $highlighted_link = "";
    if(!empty($cmp_res['diff_highlight'])){
      $highlighted_link = "http://drulenium.technikh.com/".$cmp_res['diff_highlight'];
    }
    $result = db_query("Update drulenium_vr_results res
    LEFT JOIN drulenium_vr_runs run on res.run_base_id = run.rid
    LEFT JOIN drulenium_vr_releases rel on run.re_id = rel.rid
    SET  diff_percent = :diff_percent, diff_highlight = :diff_highlight, diff_gif = :diff_gif
    where run.url = :url AND (rel.secure_id = :base_rel_secure_id OR rel.secure_id = :cmp_release_secure_id)", 
    array(':url' => $cmp_res['url'], ':base_rel_secure_id' => $base_release_secure_id, ':cmp_release_secure_id' => $cmp_release_secure_id, ':diff_percent' => $diff_percent, ':diff_highlight' => $highlighted_link, ':diff_gif' => $gif_link));
  }
  $query = db_select('drulenium_vr_releases', 'vr_re');
  $base_release_id = $query
    ->fields('vr_re', array('rid'))
    ->condition('vr_re.secure_id', $base_release_secure_id)
    ->execute()->fetchfield();

  $query = db_select('drulenium_vr_releases', 'vr_re');
  $cmp_release_id = $query
    ->fields('vr_re', array('rid'))
    ->condition('vr_re.secure_id', $cmp_release_secure_id)
    ->execute()->fetchfield();
  variable_set("drulenium_vr_last_check_{$base_release_id}_{$cmp_release_id}", time());
  drupal_goto("admin/structure/drulenium/vr/compare/$base_release_id/$cmp_release_id");
}

function drulenium_visual_regression_release_process_local($re_id) {
  //_drulenium_visual_regression_webdriver_navigate("http://docs.seleniumhq.org/");
  //return "test";
  $batch = array(
    'operations' => array(),
    'finished' => 'drulenium_visual_regression_release_batch_finished', // runs after batch is finished
    'title' => t('Processing request'),
    'init_message' => t('Screenshot process is starting.'),
    'progress_message' => t('Processed @current out of @total sets.'),
    'error_message' => t('Import has encountered an error.'),
  );
  $progress = 0; // where to start
  $limit = 3; // how many to process for each run
  $max = 1000; // how many records to process until stop - can do query here to get max times to run

  //get unprocessed runs of specified release
  //where snapshot is empty
  $query = db_select('drulenium_vr_releases', 'vr_re');
  $result = $query
    ->fields('vr_re', array('secure_id','name', 'base_url'))
    ->condition('vr_re.rid', $re_id)
    ->execute();
  $release = $result->fetchAssoc();
  $secure_id = $release['secure_id'];
  $test_base_url = $release['base_url'];

  $query = db_select('drulenium_vr_runs', 'ru')
    ->fields('ru')
    ->condition('re_id', $re_id,'=')
    ->condition('snapshot', '','=');
  $query->addExpression('COUNT(rid)', 'run_count');
  $result = $query->execute();
  $run = $result->fetchAssoc();
  $max = $run['run_count'];

  while($progress <= $max) {
    $batch['operations'][] = array('drulenium_visual_regression_release_batch_op', array($test_base_url, $re_id, $progress, $limit));
    $progress = $progress + $limit;
  }

  batch_set($batch);
  batch_process("admin/structure/drulenium/vr/release/".$re_id); // page to return to after complete
}

/**
 * Batch 'finished' callback used by both batch 1 and batch 2.
 */
function drulenium_visual_regression_release_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message('Snapshot process is completed.');
  }
  else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE)
    ));
    drupal_set_message($message, 'error');
  }
}

// this is what runs multiple times per batch
// progress and limit and is updated during each run
function drulenium_visual_regression_release_batch_op($test_base_url, $re_id, $progress, $limit, &$context) {
  if (($library = libraries_load("selenium_webdriver")) && !empty($library['loaded'])) {
    // Getting username, password & base url from release.
    $release_result = db_select('drulenium_vr_releases', 're')
      ->fields('re')
      ->condition('rid', $re_id,'=')
      ->execute()
      ->fetchAssoc();

    $result = db_select('drulenium_vr_runs', 'ru')
      ->fields('ru')
      ->condition('re_id', $re_id,'=')
      ->condition('snapshot', '','=')
      ->range(0,$limit)
      ->execute();

    // Start Firefox with 5 second timeout.
    $host = variable_get('drulenium_vr_release_selenium_host', "http://localhost:4444/wd/hub"); // this is the default
    $browser = variable_get('drulenium_vr_release_selenium_browser', 'firefox');
    $capabilities = DesiredCapabilities::$browser();
    $driver = RemoteWebDriver::create($host, $capabilities, 5000);
    $driver->manage()->window()->maximize();

    // Logging in as specified user
    $test_user_name = $release_result['user_name'];
    $test_user_pass = $release_result['user_pass'];
    if(!empty($test_user_name) && !empty($test_user_pass)){
      $driver->get($release_result['base_url']."user/login");
      $driver->findElement(WebDriverBy::id("edit-name"))->sendKeys($test_user_name);
      $driver->findElement(WebDriverBy::id("edit-pass"))->sendKeys($test_user_pass);
      $userSubmitElement = $driver->findElement(WebDriverBy::id('edit-submit'));
      $userSubmitElement->click();
    }

    while($run = $result->fetchAssoc()) {
      $url = $test_base_url . $run['url'];
      $driver->get($url);
      $full_screenshot = _drulenium_visual_regression_TakeScreenshot($driver);

      // Update database.
      db_update('drulenium_vr_runs')
      ->fields(array(
        'snapshot' => $full_screenshot,
      ))
      ->condition('re_id', $re_id)
      ->condition('url', $run['url'])
      ->execute();
    }
    // Close the Firefox.
    $driver->quit();
    // update progress for message
    $progress = $progress + $limit;
    // update message during each run so you know where you are in the process
    $context['message'] = 'Now processing ' . $progress . ' - URL: '. $url;
  } elseif ($progress == 0) {
    drupal_set_message('Didn\'t find the required selenium_webdriver library. Follow the installation instructions at <a target="_blank" href="http://drulenium.technikh.com/installation">http://drulenium.technikh.com/installation</a> ');
  }
}

function _drulenium_visual_regression_TakeScreenshot($driver, $element = null) {

  // Change the Path to your own settings.
  $mydir = file_default_scheme() . '://drulenium';
  file_prepare_directory($mydir, FILE_CREATE_DIRECTORY);
  $unique_id = "drulenium/" . microtime(TRUE) . ".png";
  $screenshot = drupal_realpath(file_default_scheme() . '://')."/".$unique_id;
  $relative_file_path = file_create_url(file_default_scheme() . '://').$unique_id;

  // Change the driver instance
  $driver->takeScreenshot($screenshot);
  if(!file_exists($screenshot)){
    throw new Exception('Could not save screenshot');
  }

  if(!(bool)$element){
    return $relative_file_path;
  }


  $screenshot = drupal_realpath(file_default_scheme() . '://').$unique_id; // Change the path here as well

  //dsm($relative_file_path);
  $element_width = $element->getSize()->getWidth();
  $element_height = $element->getSize()->getHeight();

  $element_src_x = $element->getLocation()->getX();
  $element_src_y = $element->getLocation()->getY();

  // Create image instances
  $src = imagecreatefrompng($screenshot);
  $dest = imagecreatetruecolor($element_width, $element_height);

  // Copy
  imagecopy($dest, $src, 0, 0, $element_src_x, $element_src_y, $element_width, $element_height);

  imagepng($dest, $screenshot);

  // unlink($screenshot); // unlink function might be restricted in mac os x.

  if(!file_exists($screenshot)){
    throw new Exception('Could not save element screenshot');
  }

  return $relative_file_path;
}
    
function drulenium_visual_regression_release_status($secureid) {
  // RPC call
  $result = xmlrpc('http://drulenium.technikh.com/xmlrpc.php', array(
      'drulenium.api_release_status' => array($secureid),
  ));
  //dsm($result);
  $re_id = $result[0]['re_id'];
  foreach ($result as $run){
    //$relative_url = substr($run['url'], strpos($run['url'], "?q=")+3);
    db_update('drulenium_vr_runs')
    ->fields(array(
      'snapshot' => 'http://drulenium.technikh.com/'.$run['snapshot'],
    ))
    ->condition('re_id', $re_id)
    ->condition('url', $run['url'])
    ->execute();
  }
  variable_set('drulenium_vr_last_check'.$re_id, time());
  drupal_goto("admin/structure/drulenium/vr/release/".$re_id);
}

function drulenium_visual_regression_release_delete_form($form, &$form_state, $re_id) {
  //dsm($re_id);
  $form['re_id'] = array(
    '#type' => 'value',
    '#value' => $re_id,
  );
  return confirm_form($form, t('Are you sure you want to delete the release with id %title ?', array('%title' => $re_id)), 'admin/structure/drulenium/vr', t('This action cannot be undone.'), t('Delete'), t('Cancel'));
}

function drulenium_visual_regression_release_delete_form_submit($form, &$form_state) {
  //dsm($form);
  $re_id = $form['re_id']['#value'];

  //delete entry in drulenium_vr_releases
  db_delete('drulenium_vr_releases')
    ->condition('rid', $re_id)
    ->execute();

  // Delete entries in drulenium_vr_results.
  db_query("DELETE res FROM drulenium_vr_results res left join drulenium_vr_runs run on res.run_base_id = run.rid WHERE run.re_id = :re_id", array(':re_id' => $re_id));
  db_query("DELETE res FROM drulenium_vr_results res left join drulenium_vr_runs run on res.run_cmp_id = run.rid WHERE run.re_id = :re_id", array(':re_id' => $re_id));

  // Delete entries in drulenium_vr_runs.
  db_delete('drulenium_vr_runs')
    ->condition('re_id', $re_id)
    ->execute();
  //Delete snapshots and other image files related to this release
  drupal_set_message("Deleted the release with id:$re_id");
  drupal_goto('admin/structure/drulenium/vr');
}

function drulenium_visual_regression_release_detail($re_id) {
  // If Local, check if there is anything pending.
  variable_get('drulenium_vr_config_server_opt', 'drulenium');
  
  $query = db_select('drulenium_vr_releases', 'vr_re');
  $result = $query
    ->fields('vr_re', array('secure_id','name', 'base_url'))
    ->condition('vr_re.rid', $re_id)
    ->execute();
  $release = $result->fetchAssoc();
  $secure_id = $release['secure_id'];
  $test_base_url = $release['base_url'];
  drupal_set_title("Release: ".$release['name']);

  $last = variable_get("drulenium_vr_last_check".$re_id);
  $output = l(t('Drulenium dashboard'), 'admin/structure/drulenium/vr');
  $output .= '<div class="update checked">';  
  if(variable_get('drulenium_vr_config_server_opt', 'drulenium') == 'local'){
    $output .= ' <span class="process-locally">(' . l(t('Process locally'), 'admin/structure/drulenium/vr/release/process-local/' . $re_id) . ')</span>';
  }
  else {
    $output .= $last ? t('Last checked: @time ago', array('@time' => format_interval(REQUEST_TIME - $last))) : t('Last checked: never');
    $output .= ' <span class="check-manually">(' . l(t('Check manually'), 'admin/structure/drulenium/vr/release/status/' . $secure_id) . ')</span>';
  }
  $output .= "</div>\n";
  $header = array(t('Id'), t('URL'), t('Snapshot'));
  $rows = array();
  $result = db_select('drulenium_vr_runs', 'ru')
    ->fields('ru')
    ->condition('re_id', $re_id,'=')
    ->execute();

  while($release = $result->fetchAssoc()) {
    $snapshot = "";
    $url_text = $release['url'];
    if(empty($release['url'])){
      $url_text = "Home Page";
    }
    if(!empty($release['snapshot'])){
      $snapshot = l("Snapshot", $release['snapshot']);
    }
    $rows[] = array(
    $release['rid'],
    l($url_text, $test_base_url.$release['url']),
    $snapshot,
    );
  }
  $output .= theme('table', array('header' => $header, 'rows' => $rows));
  return $output;
}

function drulenium_visual_regression_create_initial_comparision_report_in_db($old_re_id, $new_re_id) {
  $result = db_query("Insert into drulenium_vr_results (run_base_id, run_cmp_id, release_base_id, release_cmp_id)
select substring_index(qids, ',', 1) as base_qid, substring_index(qids, ',', -1) as cmp_qid, :release_base_id, :release_cmp_id
from (select GROUP_CONCAT(q.rid) AS qids from drulenium_vr_runs q 
where q.re_id = :base_release_id or q.re_id = :cmp_release_id group by url) q1", 
    array(':base_release_id' => $old_re_id, ':cmp_release_id' => $new_re_id, ':release_base_id' => $old_re_id, ':release_cmp_id' => $new_re_id));
}

function drulenium_visual_regression_releases_compare($old_re_id, $new_re_id) {
  // if new id is less than old id, swap for comparison.
  if($new_re_id < $old_re_id){
    $tmp = $new_re_id;
    $new_re_id = $old_re_id;
    $old_re_id = $tmp;
  }

  $query = db_select('drulenium_vr_releases', 'vr_re');
  $result = $query
    ->fields('vr_re', array('secure_id', 'name', 'base_url'))
    ->condition('vr_re.rid', $old_re_id)
    ->execute();
  $release = $result->fetchAssoc();
  $base_release_secure_id = $release['secure_id'];
  $test_base_url = $release['base_url'];
  $base_release_name = $release['name'];

  $query = db_select('drulenium_vr_releases', 'vr_re');
  $result = $query
    ->fields('vr_re', array('secure_id', 'name'))
    ->condition('vr_re.rid', $new_re_id)
    ->execute();
  $release = $result->fetchAssoc();
  $cmp_release_secure_id = $release['secure_id'];
  $cmp_release_name = $release['name'];

  drupal_set_title("Compare: ".$base_release_name." & ".$cmp_release_name);

  $last = variable_get("drulenium_vr_last_check_{$old_re_id}_{$new_re_id}");
  $output = l(t('Drulenium dashboard'), 'admin/structure/drulenium/vr');
  $output .= '<div class="update checked">';
  if(variable_get('drulenium_vr_config_server_opt', 'drulenium') == 'local'){
    $output .= ' <span class="process-locally">(' . l(t('Process locally'), "admin/structure/drulenium/vr/compare/process-local/$old_re_id/$new_re_id") . ')</span>';
  }
  else {
    $output .= $last ? t('Last checked: @time ago', array('@time' => format_interval(REQUEST_TIME - $last))) : t('Last checked: never');
    $output .= ' <span class="check-manually">(' . l(t('Check manually'), 'admin/structure/drulenium/vr/compare/status/'.$base_release_secure_id.'/'.$cmp_release_secure_id) . ')</span>';
  }
  $output .= "</div>\n";
  $header = array(t('Id'), t('URL'), t('Percentage Difference'), t('Diff Highlighted'), t('Animated GIF'));
  $rows = array();
  $query = db_select('drulenium_vr_results', 're');
  $query->join('drulenium_vr_runs', 'b_ru', 're.run_base_id = b_ru.rid');
  $query->fields('re');
  $query->fields('b_ru');
  $query->addField('re', 'rid', 'result_id');
  $query->condition('re.release_base_id', $old_re_id);
  $query->condition('re.release_cmp_id', $new_re_id);
  $result = $query->execute();

  while($cmp_result = $result->fetchAssoc()) {
    $gif_link = "";
    $url_text = $cmp_result['url'];
    if(empty($cmp_result['url'])){
      $url_text = "Home Page";
    }
    if(!empty($cmp_result['diff_gif'])){
      $gif_link = l("GIF", $cmp_result['diff_gif'], array('attributes' => array('target' => '_blank')));
    }
    $highlighted_link = "";
    if(!empty($cmp_result['diff_highlight'])){
      $highlighted_link = l("Diff", $cmp_result['diff_highlight'], array('attributes' => array('target' => '_blank')));
    }
    $rows[] = array(
    $cmp_result['result_id'],
    l($url_text, $test_base_url . $cmp_result['url']),
    $cmp_result['diff_percent'],
    $highlighted_link,
    $gif_link,
    );
  }

  if (!count($rows)) {
    drulenium_visual_regression_create_initial_comparision_report_in_db($old_re_id, $new_re_id);
    //If local, go to drupal_goto("admin/structure/drulenium/vr/compare/process-local/$old_release/$new_release");
    //If remote, make RPC call to Drulenium.
    if (variable_get('drulenium_vr_config_server_opt', 'drulenium') == 'local') {
      drupal_goto("admin/structure/drulenium/vr/compare/process-local/$old_re_id/$new_re_id");
    }
    else {
      //If local table is empty, make a rpc call to create entries
      $result = xmlrpc('http://drulenium.technikh.com/xmlrpc.php', array(
        'drulenium.api_create_compare_request' => array($base_release_secure_id, $cmp_release_secure_id),
      ));
      drupal_set_message($result);
      //http://devdemo.technikh.com/admin/structure/drulenium/vr/compare/2/1
      drupal_goto("admin/structure/drulenium/vr/compare/$old_re_id/$new_re_id");
    }
  }

  $output .= theme('table', array('header' => $header, 'rows' => $rows));
  return $output;
}

function drulenium_visual_regression_releases() {
  drupal_set_title("Drulenium: Automated frontend testing");
  $build_form = drupal_get_form('drulenium_visual_regression_create_release_form');
  $output = drupal_render($build_form);
  $compare_form = drupal_get_form('drulenium_visual_regression_compare_releases_form');
  $output .= drupal_render($compare_form);
  return $output;
}

function drulenium_visual_regression_create_release_form($form, &$form_state) {
  $form = array();
  $form['drulenium_vr_config'] = array(
    '#type' => 'fieldset',
    '#title' => t('Configure'),
    '#description' => t('Configure the page paths that need to be tested.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['drulenium_vr_config']['drulenium_vr_release_name'] = array(
    '#title' => t('Release name'), 
    '#type' => 'textfield', 
    '#required' => TRUE, 
    '#description' => t('Name of the release. default is current date & time.'), 
    '#default_value' => format_date(REQUEST_TIME),
  );
  global $base_url;
  $form['drulenium_vr_config']['drulenium_vr_release_base_url'] = array(
    '#title' => t('Base URL'), 
    '#type' => 'textfield', 
    '#required' => TRUE, 
    '#description' => t('Base URL of Site you want to test.<br/>For drupal7 sites, Base URL can be something like http://drupal7.example.com/?q= or http://drupal7.example.com/<br/>For drupal8 sites, Base URL can be something like http://drupal8.example.com/index.php/<br/>If your site is protected by HTTP Basic authentication, you can put the username & password in base url like https://user:password@www.stagesite.com'), 
    '#default_value' => variable_get('drulenium_vr_release_base_url', $base_url."/?q="),
  );
  $form['drulenium_vr_config']['pages'] = array(
      '#type' => 'vertical_tabs',
      '#attached' => array(
          'js' => array(drupal_get_path('module', 'block') . '/block.js'),
  ),
  );

  // Per-path pages.
  $form['drulenium_vr_config']['pages']['path'] = array(
      '#type' => 'fieldset',
      '#title' => t('Pages'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'pages',
      '#weight' => 0,
  );
  $form['drulenium_vr_config']['pages']['path']['drulenium_vr_path_custom'] = array(
      '#type' => 'textarea',
      '#title' => t('Test on specific pages'),
      '#description' => "Specify pages by using their paths. Enter one path per line. The '*' character is a wildcard. Example paths are blog for the blog page and blog/* for every personal blog. Use <front> for home page.",
      '#default_value' => variable_get('drulenium_vr_path_custom', '<front>'),
  );

  // Per-node-type testing.
  $form['drulenium_vr_config']['pages']['node'] = array(
      '#type' => 'fieldset',
      '#title' => t('Content Types'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'pages',
      '#weight' => 20,
  );
  $node_types = array();
  $result = db_query('SELECT type, name FROM {node_type}');
  foreach ($result as $row) {
    $node_types[$row->type] = $row->name;
  }
  $form['drulenium_vr_config']['pages']['node']['drulenium_vr_node_custom'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Test for specific content types'),
      '#options' => $node_types,
      '#description' => t('Test on pages that display content of the given type(s).'),
      '#default_value' => variable_get('drulenium_vr_node_custom', array()),
  );

  // Per-term-type testing.
  $form['drulenium_vr_config']['pages']['term'] = array(
      '#type' => 'fieldset',
      '#title' => t('Taxonomy'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'pages',
      '#weight' => 20,
  );
  $vocabs = array();
  $result = db_query('SELECT vid, name FROM {taxonomy_vocabulary}');
  foreach ($result as $row) {
    $vocabs[$row->vid] = $row->name;
  }
  $form['drulenium_vr_config']['pages']['term']['drulenium_vr_term_custom'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Test for specific Taxonomy Vocabularies'),
      '#options' => $vocabs,
      '#description' => t('Test on taxonomy term pages of the given Vocabulary type(s)'),
      '#default_value' => variable_get('drulenium_vr_term_custom', array()),
  );
  $form['drulenium_vr_config']['drulenium_vr_config_user'] = array(
    '#type' => 'fieldset',
    '#title' => t('User Configuration'),
    '#description' => t('Test as specified user. Leave empty if the test has to be Anonymous.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['drulenium_vr_config']['drulenium_vr_config_user']['drulenium_vr_release_user_name'] = array(
    '#title' => t('User name'), 
    '#type' => 'textfield', 
    '#description' => t('User name of the user to test as.'), 
    '#default_value' => variable_get('drulenium_vr_release_user_name', ""),
  );
  $form['drulenium_vr_config']['drulenium_vr_config_user']['drulenium_vr_release_user_pass'] = array(
    '#title' => t('Password'), 
    '#type' => 'password', 
    '#description' => t("Passwords are stored in plain text. Don't use real accounts. Use temporary test accounts. Delete these test accounts after the test."), 
    '#default_value' => variable_get('drulenium_vr_release_user_pass', ""),
  );
  $form['drulenium_vr_config']['drulenium_vr_config_server'] = array(
    '#type' => 'fieldset',
    '#title' => t('Server Configuration'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  # the options to display in our form radio buttons
  $options = array(
    'local' => t('Local server'),
    'drulenium' => t('Remote Drulenium server'), 
  );
  
  $form['drulenium_vr_config']['drulenium_vr_config_server']['drulenium_vr_config_server_opt'] = array(
    '#type' => 'radios',
    '#title' => t('Server:'),
    '#options' => $options,
    '#description' => t('Pick the server you want to use. You will find Installation steps at <a target="_blank" href="http://drulenium.technikh.com/installation">http://drulenium.technikh.com/installation</a>'),
    '#default_value' => variable_get('drulenium_vr_config_server_opt', 'drulenium'),
  );
  $form['drulenium_vr_config']['drulenium_vr_config_server']['drulenium_vr_local_config'] = array(
    '#type' => 'fieldset',
    '#title' => t('Local Server'),
    '#description' => t('Configuration for your local server.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#states' => array(
      'visible' => array(
        ':input[name="drulenium_vr_config_server_opt"]' => array('value' => 'local'),
      ),
    ),
  );
  /*
   * Image styles for comparision
   * browser type, width, height https://github.com/facebook/php-webdriver/wiki/Example-command-reference
   * Selenium host url
   */
  $form['drulenium_vr_config']['drulenium_vr_config_server']['drulenium_vr_local_config']['drulenium_vr_release_selenium_host'] = array(
    '#title' => t('Selenium host url'), 
    '#type' => 'textfield', 
    '#description' => t('Site URL to selenium host. Usually http://localhost:4444/wd/hub'), 
    '#default_value' => variable_get('drulenium_vr_release_selenium_host', "http://localhost:4444/wd/hub"),
  );
  /* ChromeDriver
   * The path to the driver executable must be set by the webdriver.chrome.driver system property; 
   * for more information, see http://code.google.com/p/selenium/wiki/ChromeDriver. 
   * The latest version can be downloaded from http://chromedriver.storage.googleapis.com/index.html
   */
  $form['drulenium_vr_config']['drulenium_vr_config_server']['drulenium_vr_local_config']['drulenium_vr_release_selenium_browser'] = array(
     '#type' => 'select',
     '#title' => t('Browser'),
     '#options' => array(
       'firefox' => t('firefox'),
       'chrome' => t('chrome'),
     ),
     '#default_value' => variable_get('drulenium_vr_release_selenium_browser', 'firefox'),
     '#description' => t('Pick a browser to test with.'),
   );
  $form['drulenium_vr_config']['drulenium_vr_config_server']['drulenium_vr_local_config']['drulenium_vr_release_imagemagick_path'] = array(
    '#title' => t('Path to the Image Magick binary'), 
    '#type' => 'textfield', 
    '#description' => t('The complete path of the ImageMagick <kbd>convert</kbd> binary. For example: <kbd>/usr/bin</kbd> or <kbd>C:\Program Files\ImageMagick-6.3.4-Q16</kbd>. Run "which" command in linux terminal to get the path, like "which convert"'), 
    '#default_value' => variable_get('drulenium_vr_release_imagemagick_path', "/opt/local/bin"),
  );
  $form['drulenium_vr_config']['drulenium_vr_config_server']['drulenium_vr_remote_drulenium_config'] = array(
    '#type' => 'fieldset',
    '#title' => t('Remote Drulenium Server'),
    '#description' => t('Configuration for Remote Drulenium server.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#states' => array(
      'visible' => array(
        ':input[name="drulenium_vr_config_server_opt"]' => array('value' => 'drulenium'),
      ),
    ),
  );
  $site_email = variable_get('site_mail', '');
  $form['drulenium_vr_config']['drulenium_vr_config_server']['drulenium_vr_remote_drulenium_config']['drulenium_vr_release_notify_email'] = array(
    '#title' => t('Email'), 
    '#type' => 'textfield', 
    '#description' => t('Email to Notify on completion.'), 
    '#default_value' => variable_get('drulenium_vr_release_notify_email', $site_email),
  );

  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Take Snapshot'),
  );
  return $form;
}

function drulenium_visual_regression_create_release_form_validate($form, &$form_state) {
  if($form_state['values']['drulenium_vr_config_server_opt'] == "drulenium"){
    //check if base url is reachable
    $result = xmlrpc('http://drulenium.technikh.com/xmlrpc.php', array(
        'drulenium.api_validate_release' => array($form_state['values']['drulenium_vr_release_base_url']),
    ));
    if($result != 1) {
      form_set_error('drulenium_vr_release_base_url', $result);
    }
  }
  // TODO $pages_array shouldn't be empty.

  // If username exists and no password.
  if (!empty($form_state['values']['drulenium_vr_release_user_name']) && empty($form_state['values']['drulenium_vr_release_user_pass'])) {
    form_set_error('drulenium_vr_release_user_pass', t("If the username exists, Password can't be empty. Remove username if you want to test as Anonymous user."));
  }
}

function drulenium_visual_regression_create_release_in_db($secureid, $release_name, $vr_base_url, &$pages_array, $vr_user_name = '', $vr_user_pass = '', $specific_node_types = array(), $specific_term_types = array(), $specific_pages = "" ) {
  if(empty($vr_base_url)) {
    global $base_url;
    $vr_base_url = $base_url."/?q=";
  }
  $selected_node_types_array = array();
  $specific_node_types_pages_array = array();
  foreach ($specific_node_types as $node_type) {
    if(!empty($node_type)){
      $selected_node_types_array[] = $node_type;
    }
  }
  if(!empty($selected_node_types_array)) {
    // Select an example node of each type.
    $result = db_query(
        'SELECT nid, type FROM {node} n WHERE status = 1 AND type IN (:types)',
        array(':types' => $selected_node_types_array)
    );
    foreach ($result as $row) {
      $nid = $row->nid;
      $link_path = "node/$nid";
      $pages_array[] = $link_path;
    }
  }


  $selected_term_types_array = array();
  $specific_term_types_pages_array = array();
  foreach ($specific_term_types as $term_type) {
    if(!empty($term_type)) {
      $selected_term_types_array[] = $term_type;
      //  $debug_log .= $term_type."<br/>";
    }
  }
  if (!empty($selected_term_types_array)) {
    // Select an example term of each vocabulary.
    $result = db_query(
        'SELECT vid, tid FROM {taxonomy_term_data} ttd WHERE vid IN (:types)',
        array(':types' => $selected_term_types_array)
    );
    foreach ($result as $row) {
      $tid = $row->tid;
      // $debug_log .= $tid."<br/>";
      $link_path = "taxonomy/term/$tid";
      $pages_array[] = $link_path;
    }
  }

  $specific_pages = trim($specific_pages);
  if(!empty($specific_pages)) {
    $specific_pages_array = explode("\n", $specific_pages);
    // $debug_log .= print_r($specific_pages_array, TRUE)."<br/>";
    // $pages = $options['pages'];
    // $pages_array = explode("\n",$pages);
    foreach ($specific_pages_array as $key => $page) {
      $page = trim($page);
      //    $debug_log .= $page."<br/>";
      if(_drulenium_vr_endsWith($page, "*")) {
        //   $debug_log .= $page."<br/>";
        //unset($specific_pages_array[$key]);
        $pattern = substr($page, 0, strlen($page) - 1);
        // $debug_log .= substr($page, 0, strlen($page)-1);
        $result = db_query(
          'SELECT link_path FROM {menu_links} m WHERE link_path like :pattern',
          array(':pattern' => db_like($pattern) . '%')
        );
        //    $debug_log .= print_r($result, TRUE)."<br/>";
        foreach ($result as $row) {
          //   $debug_log .= print_r($row, TRUE)."<br/>";
          //break;
          $link_path = $row->link_path;
          if(_drulenium_vr_contains("%", $link_path)){
            continue;
          }
          //$link_path = str_replace("%","1",$link_path);
          $pages_array[] = $link_path;
        }

        $result = db_query(
          'SELECT alias FROM {url_alias} u WHERE alias like :pattern',
           array(':pattern' => db_like($pattern) . '%')
        );
        foreach ($result as $row) {
          $link_path = $row->alias;
          $pages_array[] = $link_path;
        }
      }
      else {
        $pages_array[] = $page;
      }
    }
  }
  if (empty($pages_array)) {
    drupal_set_message("No pages found in your configuration. Please reconfigure & resubmit with atleast one valid page.", 'error');
    return "";
  }
  $fields = array(
      'name' => $release_name,
      'secure_id' => $secureid,
  	  'base_url' => $vr_base_url,
      'user_name' => $vr_user_name,
  	  'user_pass' => $vr_user_pass,
      'created' => REQUEST_TIME,
  );
  $release_id = db_insert('drulenium_vr_releases')->fields($fields)->execute();

  foreach ($pages_array as $key => $page) {
    if(empty($page)) {
      unset($pages_array[$key]);
    }
    else {
      if($page == "<front>"){
        $page = "";
        $pages_array[$key] = $page;
      }
      $fields = array(
	      're_id' => $release_id,
	      'url' => $page,
      );
      $result = db_insert('drulenium_vr_runs')->fields($fields)->execute();
    }
  }
  
  return $release_id;
}

function drulenium_visual_regression_create_release_form_submit($form, &$form_state) {
  //dsm($form_state);
  variable_set('drulenium_vr_path_custom', $form_state['values']['drulenium_vr_path_custom']);
  variable_set('drulenium_vr_node_custom', $form_state['values']['drulenium_vr_node_custom']);
  variable_set('drulenium_vr_term_custom', $form_state['values']['drulenium_vr_term_custom']);
  
  variable_set('drulenium_vr_config_server_opt', $form_state['values']['drulenium_vr_config_server_opt']);
  variable_set('drulenium_vr_release_selenium_host', $form_state['values']['drulenium_vr_release_selenium_host']);
  variable_set('drulenium_vr_release_selenium_browser', $form_state['values']['drulenium_vr_release_selenium_browser']);
  variable_set('drulenium_vr_release_imagemagick_path', $form_state['values']['drulenium_vr_release_imagemagick_path']);
  
  $test_user_pass = $form_state['values']['drulenium_vr_release_user_pass'];
  $test_user_name = $form_state['values']['drulenium_vr_release_user_name'];
  variable_set('drulenium_vr_release_user_name', $test_user_name);
  variable_set('drulenium_vr_release_user_pass', $test_user_pass);
  $vr_base_url = $form_state['values']['drulenium_vr_release_base_url'];
  variable_set('drulenium_vr_release_base_url', $vr_base_url);
  $notify_email = $form_state['values']['drulenium_vr_release_notify_email'];
  variable_set('drulenium_vr_release_notify_email', $notify_email);

  $secureid = drupal_hash_base64(drupal_random_bytes(55));
  $release_name = $form_state['values']['drulenium_vr_release_name'];



  $pages_array = array();

  $specific_pages = $form_state['values']['drulenium_vr_path_custom'];
  $specific_node_types = $form_state['values']['drulenium_vr_node_custom'];
  $specific_term_types = $form_state['values']['drulenium_vr_term_custom'];

  $release_id = drulenium_visual_regression_create_release_in_db($secureid, $release_name, $vr_base_url, $pages_array, $test_user_name, $test_user_pass, $specific_node_types, $specific_term_types, $specific_pages);

  if ($form_state['values']['drulenium_vr_config_server_opt'] == "drulenium") {
    // RPC call to add job in remote queue.
    global $base_url;
    $result = xmlrpc('http://drulenium.technikh.com/xmlrpc.php', array(
        'drulenium.api_create_release' => array($release_id, $secureid, $vr_base_url, $pages_array, $notify_email, $base_url, $test_user_name, $test_user_pass),
    ));
    drupal_set_message($result);
    drupal_goto("admin/structure/drulenium/vr/release/".$release_id);
  }else{
    drupal_set_message("Your request is being processed locally, in a batch.");
    drupal_goto("admin/structure/drulenium/vr/release/process-local/".$release_id);
  }
  
}

function drulenium_visual_regression_compare_releases_form($form, $form_state) {
  $result = db_select('drulenium_vr_releases', 're')
  ->fields('re', array('name', 'rid'))
  ->execute();
  $release_ids = array();
  while($release = $result->fetchAssoc()) {
    $release_ids[$release['rid']] = '';
    $form['info'][$release['rid']] = array(
        '#markup' => l($release['name'],"admin/structure/drulenium/vr/release/".$release['rid']),
    );
    $operations = array(
          '#markup' => l(t('Delete'), "admin/structure/drulenium/vr/delete-release/".$release['rid']),
    );
    $form['operations'][$release['rid']][0] = $operations;

  }
  if(empty($release_ids)){
    return '';
  }
  $new_vid = key($release_ids);
  next($release_ids);
  $old_vid = key($release_ids);
  $form['diff']['old'] = array(
    '#type' => 'radios',
    '#options' => $release_ids,
    '#default_value' => $old_vid,
  );
  $form['diff']['new'] = array(
    '#type' => 'radios',
    '#options' => $release_ids,
    '#default_value' => $new_vid,
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Compare'));


  $form['#attached']['css'] = array('sites/all/modules/diff/css/diff.default.css');
  $form['#attached']['js'] = array('sites/all/modules/diff/js/diff.js');
  // dsm($form);
  return $form;
}

function drulenium_visual_regression_compare_releases_form_submit($form, &$form_state) {
  // dsm($form_state);
  $old_release = $form_state['values']['old'];
  $new_release = $form_state['values']['new'];
  drupal_goto("admin/structure/drulenium/vr/compare/$old_release/$new_release");
}

/**
 * Theme function to display the revisions formular.
 */
function theme_drulenium_visual_regression_compare_releases_form($vars) {
  $form = $vars['form'];
  if(!isset($form['diff'])){
    return '';
  }
  $output = '';

  // Overview table:
  $header = array(
  t('Release'),
  array('data' => drupal_render($form['submit']), 'colspan' => 2),
  array('data' => t('Operations'), 'colspan' => 2),
  );
  if (isset($form['info']) && is_array($form['info'])) {
    foreach (element_children($form['info']) as $key) {
      $row = array();
      if (isset($form['operations'][$key][0])) {
        // Note: even if the commands for revert and delete are not permitted,
        // the array is not empty since we set a dummy in this case.
        $row[] = drupal_render($form['info'][$key]);
        $row[] = drupal_render($form['diff']['old'][$key]);
        $row[] = drupal_render($form['diff']['new'][$key]);
        $row[] = drupal_render($form['operations'][$key][0]);
        $row[] = drupal_render($form['operations'][$key][1]);
        $rows[] = array(
          'data' => $row,
          'class' => array('diff-revision'),
        );
      }
      else {
        // (no commands to delete).
        $row[] = array(
          'data' => "No Operations.",
          'class' => array('revision-current'),
        );
      }
    }
  }
  $output .= theme('table__diff__revisions', array(
    'header' => $header,
    'rows' => $rows,
    'sticky' => FALSE,
    'attributes' => array('class' => 'diff-revisions'),
  ));

  $output .= drupal_render_children($form);
  return $output;
}

function _drulenium_vr_endsWith($haystack, $needle)
{
  $length = strlen($needle);
  if ($length == 0) {
    return true;
  }

  return (substr($haystack, -$length) === $needle);
}

function _drulenium_vr_contains($substring, $string) {
  $pos = strpos($string, $substring);

  if($pos === false) {
    // string needle NOT found in haystack
    return false;
  }
  else {
    // string needle found in haystack
    return true;
  }

}

function _drulenium_vr_image_compare($image1, $image2, $RTolerance=0, $GTolerance=0, $BTolerance=0, $WarningTolerance=1, $ErrorTolerance=5)
{
  if (is_resource($image1))
  $im = $image1;
  else
  if (!$im = imagecreatefrompng($image1))
    trigger_error("Image 1:$image1 could not be opened",E_USER_ERROR);
   
  if (is_resource($image2))
  $im2 = $image2;
  else
  if (!$im2 = imagecreatefrompng($image2))
    trigger_error("Image 2:$image2 could not be opened",E_USER_ERROR);



  $OutOfSpec = 0;
  $width2 = imagesx($im2);
  $height2 = imagesy($im2);
  //print $width2;
  //print ";".$height2;
  if (imagesx($im)!=imagesx($im2))
    return("Width does not match.");
  if (imagesy($im)!=imagesy($im2))
    return("Height does not match.");

  //By columns
  for ($width=0;$width<=imagesx($im)-1;$width++)
  {
    for ($height=0;$height<=imagesy($im)-1;$height++)
    {
      $rgb = imagecolorat($im, $width, $height);
      $r1 = ($rgb >> 16) & 0xFF;
      $g1 = ($rgb >> 8) & 0xFF;
      $b1 = $rgb & 0xFF;

      if($width <= $width2 && $height < $height2){
        $rgb = imagecolorat($im2, $width, $height);
        $r2 = ($rgb >> 16) & 0xFF;
        $g2 = ($rgb >> 8) & 0xFF;
        $b2 = $rgb & 0xFF;
         
        if (!($r1>=$r2-$RTolerance && $r1<=$r2+$RTolerance))
        $OutOfSpec++;

        if (!($g1>=$g2-$GTolerance && $g1<=$g2+$GTolerance))
        $OutOfSpec++;

        if (!($b1>=$b2-$BTolerance && $b1<=$b2+$BTolerance))
        $OutOfSpec++;
      }else{
        $OutOfSpec = $OutOfSpec+3;
      }
    }
  }
  $TotalPixelsWithColors = (imagesx($im)*imagesy($im))*3;

  $RET['PixelsByColors'] = $TotalPixelsWithColors;
  $RET['PixelsOutOfSpec'] = $OutOfSpec;

  if ($OutOfSpec!=0 && $TotalPixelsWithColors!=0)
  {
    $PercentOut = ($OutOfSpec/$TotalPixelsWithColors)*100;
    $RET['PercentDifference']=$PercentOut;
    if ($PercentOut>=$WarningTolerance) //difference triggers WARNINGTOLERANCE%
    $RET['WarningLevel']=TRUE;
    if ($PercentOut>=$ErrorTolerance) //difference triggers ERRORTOLERANCE%
    $RET['ErrorLevel']=TRUE;
  }

  RETURN $RET;
}
