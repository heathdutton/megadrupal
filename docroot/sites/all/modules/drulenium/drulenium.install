<?php
/**
 * @file
 * Install, update and uninstall functions for the drulenium module.
 */

/**
 * Implements hook_install().
 */
function drulenium_install() {
  // use get_t() to get the name of our localization function for translation
  // during install, when t() is not available.
  $t = get_t();

  // Define the node type.
  $drulenium = array(
      'type' => 'drulenium',
      'name' => $t('Drulenium Output'),
      'base' => 'node_content',
      'description' => $t('A Drulenium node that contains output of the Test.'),
      'body_label' => $t('Log')
  );

  // Complete the node type definition by setting any defaults not explicitly
  // declared above.
  // http://api.drupal.org/api/function/node_type_set_defaults/7
  $content_type = node_type_set_defaults($drulenium);
  node_add_body_field($content_type);

  // Save the content type
  node_type_save($content_type);


  // Load the instance definition for our content type's body
  // http://api.drupal.org/api/function/field_info_instance/7
  $body_instance = field_info_instance('node', 'body', 'drulenium');

  // Save our changes to the body field instance.
  // http://api.drupal.org/api/function/field_update_instance/7
  field_update_instance($body_instance);

  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_drulenium_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (_drulenium_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $drulenium['type'];
    field_create_instance($instance);
  }
}

/**
 * Return a structured array defining the fields created by this content type.
 *
 * This is packaged in a function so it can be used in both
 * drulenium_install() and drulenium_uninstall().
 */
function _drulenium_installed_fields() {
  $t = get_t();
  return array(
      'drulenium_version' => array(
          'field_name' => 'drulenium_version',
          'cardinality' => 1,
          'type'        => 'text',
          'settings'    => array(
              'max_length' => 60,
          ),
      ),
      'drulenium_revision' => array(
          'field_name'  => 'drulenium_revision',
          'cardinality' => 1,
          'type'        => 'text',
      ),
      'drulenium_result' => array(
          'field_name'  => 'drulenium_result',
          'cardinality' => 1,
          'type'        => 'text',
      ),
      'drulenium_total_time' => array(
          'field_name'  => 'drulenium_total_time',
          'cardinality' => 1,
          'type'        => 'number_integer',
      ),
      'drulenium_num_test_passes' => array(
          'field_name'  => 'drulenium_num_test_passes',
          'cardinality' => 1,
          'type'        => 'number_integer',
      ),
      'drulenium_num_test_failures' => array(
          'field_name'  => 'drulenium_num_test_failures',
          'cardinality' => 1,
          'type'        => 'number_integer',
      ),
      'drulenium_num_command_passes' => array(
          'field_name'  => 'drulenium_num_command_passes',
          'cardinality' => 1,
          'type'        => 'number_integer',
      ),
      'drulenium_num_command_failures' => array(
          'field_name'  => 'drulenium_num_command_failures',
          'cardinality' => 1,
          'type'        => 'number_integer',
      ),
      'drulenium_num_command_errors' => array(
          'field_name'  => 'drulenium_num_command_errors',
          'cardinality' => 1,
          'type'        => 'number_integer',
      ),
      'drulenium_num_test_total' => array(
          'field_name'  => 'drulenium_num_test_total',
          'cardinality' => 1,
          'type'        => 'number_integer',
      ),
      'drulenium_suite' => array(
          'field_name'  => 'drulenium_suite',
          'cardinality' => 1,
          'type'        => 'text',
      ),
  );
}

/**
 * Return a structured array defining the instances for this content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "drulenium_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three date
 * fields.
 *
 * This is provided as a function so that it can be used in both hook_install()
 * and hook_uninstall().
 */
function _drulenium_installed_instances() {
  $t = get_t();
  return array(
      'drulenium_version' => array(
          'field_name' => 'drulenium_version',
          'label'       => $t('drulenium_version'),
          'widget'      => array(
              'type'    => 'text_textfield',
          ),
      ),
      'drulenium_revision' => array(
          'field_name'  => 'drulenium_revision',
          'label' => $t('drulenium_revision'),
          'type'        => 'text',
          'widget'      => array(
              'type'    => 'text_textfield',
          ),
      ),
      'drulenium_result' => array(
          'field_name'  => 'drulenium_result',
          'label' => $t('result'),
          'type'        => 'text',
          'widget'      => array(
              'type'    => 'text_textfield',
          ),
      ),
      'drulenium_total_time' => array(
          'field_name'  => 'drulenium_total_time',
          'label' => $t('total_time'),
          'type'        => 'text',
          'widget'      => array(
              'type'    => 'number',
          ),
      ),
      'drulenium_num_test_passes' => array(
          'field_name'  => 'drulenium_num_test_passes',
          'label' => $t('num_test_passes'),
          'type'        => 'text',
          'widget'      => array(
              'type'    => 'number',
          ),
      ),
      'drulenium_num_test_failures' => array(
          'field_name'  => 'drulenium_num_test_failures',
          'label' => $t('num_test_failures'),
          'type'        => 'text',
          'widget'      => array(
              'type'    => 'number',
          ),
      ),
      'drulenium_num_command_passes' => array(
          'field_name'  => 'drulenium_num_command_passes',
          'label' => $t('num_command_passes'),
          'type'        => 'text',
          'widget'      => array(
              'type'    => 'number',
          ),
      ),
      'drulenium_num_command_failures' => array(
          'field_name'  => 'drulenium_num_command_failures',
          'label' => $t('num_command_failures'),
          'type'        => 'text',
          'widget'      => array(
              'type'    => 'number',
          ),
      ),

      'drulenium_num_command_errors' => array(
          'field_name'  => 'drulenium_num_command_errors',
          'label' => $t('num_command_errors'),
          'type'        => 'text',
          'widget'      => array(
              'type'    => 'number',
          ),
      ),
      'drulenium_num_test_total' => array(
          'field_name'  => 'drulenium_num_test_total',
          'label' => $t('num_test_total'),
          'type'        => 'text',
          'widget'      => array(
              'type'    => 'number',
          ),
      ),
      'drulenium_suite' => array(
          'field_name'  => 'drulenium_suite',
          'label' => $t('suite'),
          'type'        => 'text',
          'widget'      => array(
              'type'    => 'text_textfield',
          ),
      ),
  );
}

/**
 * Implements hook_uninstall().
 */
function drulenium_uninstall() {

  // delete system variables
  variable_del('drulenium_appid');
  variable_del('drulenium_secret');
  variable_del('drulenium_locale');
  variable_del('drulenium_urls_mode');
  variable_del('drulenium_locale_auto');
  $languages = language_list();
  foreach ($languages as $language) {
    variable_del('drulenium_language_' . $language->language);
  }

  // Gather all the example content that might have been created while this
  // module was enabled.  Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'drulenium'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_drulenium_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the drulenium
  // content type (such as the body field) and delete them individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'drulenium');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete our content type
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('drulenium');

  // Purge all field infromation
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
}


/**
 * Implements hook_schema().
 */
function drulenium_schema() {
  $schema = array();

  $schema['drulenium_preset'] = array(
      'description' => 'Storage for user-defined drulenium plugins templates.',
      'export' => array(
          'key' => 'name',
          'key name' => 'Name',
          'primary key' => 'oid',
          'identifier' => 'drulenium_preset',
          'default hook' => 'default_drulenium_preset', // Function hook name.
          'api' => array(
              'owner' => 'drulenium',
              'api' => 'drulenium', // Base name for api include files.
              'minimum_version' => 1,
              'current_version' => 1,
          ),
          'load callback' => 'drulenium_preset_load',
      ),
      'fields' => array(
          'oid' => array(
              'type' => 'serial',
              'unsigned' => TRUE,
              'not null' => TRUE,
              'description' => 'Primary ID field for the table. Not used for anything except internal lookups.',
              'no export' => TRUE, // Do not export database-only keys.
          ),
          'name' => array(
              'description' => 'The primary identifier for a plugin preset.',
              'type' => 'varchar',
              'length' => 255,
              'not null' => TRUE,
              'default' => '',
          ),
          'description' => array(
              'description' => 'Description for this plugin preset.',
              'type' => 'varchar',
              'length' => 255,
              'not null' => TRUE,
              'default' => '',
          ),
          'category' => array(
              'description' => 'Category for this plugin preset.',
              'type' => 'varchar',
              'length' => 255,
              'not null' => TRUE,
              'default' => '',
          ),
          'plugin_type' => array(
              'description' => 'Type of this preset.',
              'type' => 'varchar',
              'length' => 255,
              'not null' => TRUE,
              'default' => '',
          ),
          'settings' => array(
              'description' => 'Serialized storage of drupal related plugin settings.',
              'type' => 'text',
              'serialize' => TRUE,
          ),
          'drulenium_attrs' => array(
              'description' => 'Serialized storage of drulenium related plugin settings',
              'type' => 'text',
              'serialize' => TRUE,
          ),
      ),
      'primary key' => array('oid'),
      'unique keys' => array(
          'name' => array('name'),
      ),
      'indexes' => array(
          'type' => array('plugin_type'),
      ),
  );

  return $schema;

}
