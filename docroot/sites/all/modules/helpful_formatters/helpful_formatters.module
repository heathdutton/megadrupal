<?php



/******************************* FIELD FORMATTERS ***************************** */

/**
* Implements hook_field_formatter_info().
*/
function helpful_formatters_field_formatter_info() {
  $info = array(
    'image_style_url' => array(
      'label' => t('URL to image style'),
      'field types' => array('file', 'image'),
      'settings'  => array(
        'image_style' => '',
      ),
    ),
    // @todo
    /*'text_link' => array(
      'label' => t('Text linking to another field'),
      'field types' => array('text'),
      'settings'  => array(
        'link_field' => '',
      ),
    ),*/
    'text_linebreaks' => array(
      'label' => t('Text with line-breaks'),
      'field types' => array(),
      'settings'  => array(
        'character' => '',
      ),
    ),
    'link_title_autoclass' => array(
      'label' => t('Title, with unique class'),
      'field types' => array('link_field'),
      'settings'  => array(
        'prefix' => 'link-',
        'additional_class' => '',
      ),
    ),
    'taxonomy_link' => array(
      'label' => t('Taxonomy Term Link'),
      'field types' => array('entityreference', 'taxonomy_term_reference'),
      'settings'  => array(
        'path' => '',
        'query' => '',
        'link_class' => '',
      ),
    ),
  );
  return $info;
}


function helpful_formatters_field_info_alter(&$info) {
  //dpm($info);
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function helpful_formatters_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Add fields
  switch ($display['type']) {
    case 'image_link':
      $element['link_field'] = array(
        '#title' => t('Link field'),
        '#type' => 'select',
        '#default_value' => $settings['link_field'],
        '#options' => _helpful_formatters_fields('link_field'),
      );
      break;

    case 'text_linebreaks':
      $element['character'] = array(
        '#title' => t('Additional character to use as line-break'),
        '#type' => 'textfield',
        '#size' => 2,
        '#default_value' => $settings['character'],
        '#description' => t('Enter a character (such as "|") in this field to allow users to create line breaks in a textfield that doesn\'t allow the return character. This is especially helpful for title fields'),
      );
      break;

    case 'link_title_autoclass':
      $element['prefix'] = array(
        '#title' => t('Class prefix'),
        '#type' => 'textfield',
        '#default_value' => $settings['prefix'],
        '#description' => t('The prefix will be added before the title to create the unique class. For example, if the prefix is left as "link-", a link with the title "Home Page" would get the class, "link-home-page".'),
      );
      $element['additional_class'] = array(
        '#title' => t('Additional class'),
        '#type' => 'textfield',
        '#default_value' => $settings['additional_class'],
        '#description' => t('Enter any additional classes you would like to add to the <a> tag.'),
      );
      break;
      
    case 'taxonomy_link':
      $element['path'] = array(
        '#title' => t('Path'),
        '#type' => 'textfield',
        '#default_value' => $settings['path'],
        '#description' => t('Enter the querystring parameters to use. Use [tid] for the taxonomy term tid. For example, research.'),
      );
      $element['query'] = array(
        '#title' => t('Querystring'),
        '#type' => 'textfield',
        '#default_value' => $settings['query'],
        '#description' => t('Enter the querystring parameters to use. Use [tid] for the taxonomy term tid. For example, category=[tid].'),
      );
      $element['link_class'] = array(
        '#title' => t('Link class'),
        '#type' => 'textfield',
        '#default_value' => $settings['link_class'],
        '#description' => t('Enter a class to add to the <a> element.'),
      );
      break;
  }
  
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 * @todo
 */
function helpful_formatters_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  foreach ($settings as $key => $value) {
    $summary[] = $key . ': ' . $value;
  }
  /*$image_styles = image_style_options(FALSE, PASS_THROUGH);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['image_style']])) {
    $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
  }
  else {
    $summary[] = t('Original image');
  }*/

  return implode('<br />', $summary);
}


/**
 * Implements hook_field_formatter_view().
 */
function helpful_formatters_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
    
  foreach ($items as $delta => $item) {
    
    switch ($display['type']) {
      case 'image_style_url':
        $uri = array(
          'path' => file_create_url(),
          'options' => array(),
        );
        $element[$delta] = array(
          '#markup' =>  $item['uri'] ?  image_style_url($settings['image_style'], $item['uri']) : '',
        );
        break;

      case 'text_link':
        // @todo;
        break;

      case 'text_linebreaks':
        $element[$delta] = array(
         '#markup' => str_replace(array("\n", $settings['character']), '<br/>', $item['value']),
        );
        break;

      case 'link_title_autoclass':
        $item['attributes']['class'] = empty($item['attributes']['class']) ? '' : $item['attributes']['class'] . ' ';
        $item['attributes']['class'] .= !empty($settings['additional_class']) ? $settings['additional_class'] . ' ' : '';
        $item['attributes']['class'] .= drupal_clean_css_identifier(strtolower($settings['prefix'] . $item['title']));
        $element[$delta] = array(
          '#theme' => 'link_formatter_link_default',
          '#element' => $item,
          '#field' => $instance,
          '#display' => $display,
        );
        break;
        
      case 'taxonomy_link':
        $tid = !empty($item['target_id']) ? $item['target_id'] : (!empty($item['tid']) ? $item['tid'] : NULL);
        $term = taxonomy_term_load($tid);
        $label = entity_label('taxonomy_term', $term);
        $options = array();
        if (!empty($settings['query'])) {
          $query = str_replace('[tid]', $tid, $settings['query']);
          parse_str($query, $options['query']);
        }
        if (!empty($settings['link_class'])) {
          $options['attributes']['class'][] = $settings['link_class'];
        }
        $element[$delta] = array(
          '#type' => 'markup',
          '#markup' => l($label, str_replace('[tid]', $tid, $settings['path']), $options),
        );
        break;
      
    }

  } // foreach

  return $element;
}




/******************************* HELPER FUNCTIONS ***************************** */


/**
 * Helper function.
 * Returns all of the fields of a specific type for a select list
 */
function _helpful_formatters_fields($types, $unshift = array()) {
  $fields = $unshift;
  $types = is_array($types) ? $types : array($types);
  foreach (field_info_fields() as $index => $field) {
    if (in_array($field['type'], $types)) {
      $fields[$index] = $index;
    }
  }
  return $fields;
}    

