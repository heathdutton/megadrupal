<?php

/**
 * @file
 * Main aul_roles module file. Handles access to nodes for user roles.
 */

module_load_include('inc', 'aul_roles', 'inc/vbo');

/**
 * Implements of hook_views_api().
 */
function aul_roles_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'aul_roles') . '/views',
  );
}

/**
 * Implements hook_node_grants().
 */
function aul_roles_node_grants($account, $op) {
  
  if(empty($account->roles)) {
    return;
  }
  
  $roles = array_keys($account->roles);
  
  $gids = db_select('aul', 'a')
   ->fields('a', array('gid'))
   ->condition('a.key_name', 'rid')
   ->condition('a.key_id', $roles, 'IN')
   ->condition('a.op', $op)
   ->condition('a.value', 0, '>')
   ->execute()
   ->fetchCol();
   
  if (!empty($gids)) {
    
    $realm = "{$op}_uid_{$account->uid}";
    
    $keys = array(
      $realm => $gids,
    );
    
    return $keys;
  }
}

/**
 * Implements hook_node_access_explain().
 * 
 * @param $row
 *   The record from the {node_access} table, as object. The member fields are:
 *   nid, gid, realm, grant_view, grant_update, grant_delete.
 */
function aul_roles_node_access_explain($row) {
  
  if (empty($row->realm)) {
    return;
  }
  
  $actions = array('view', 'update', 'delete');
  
  $correct_realm = FALSE;
  
  foreach ($actions as $action) {
    if(strstr($row->realm, "{$action}_rid_")) {
      $correct_realm = TRUE;
      $rid = str_replace("{$action}_rid_", '', $row->realm);
      break;
    }
  }
  
  if ($correct_realm) {
    
    static $roles = array();
    if (empty($roles)) {
      $roles = user_roles();
    }

    if (!isset($roles[$rid])) {
      return;
    }
    
    static $operations = array();
    if (empty($operations)) {
      $operations = array(
        'grant_view' => t('View'),
        'grant_update' => t('Update'),
        'grant_delete' => t('Delete'),
      );
    }

    $node_grants = array();
    foreach ($operations as $op => $operation_name) {
      if (!empty($row->$op)) {
        $node_grants[] = $operation_name;
      }
    }
    if($node_grants) {
      $access_text = $roles[$rid] . ': ' . implode(', ', $node_grants);
      
      return $access_text;
    }
  }
}

/**
 * Implememnts hook_user_role_delete().
 */
 function aul_roles_user_role_delete($role) {

  db_delete('aul')
    ->condition('key_name', 'rid')
    ->condition('key_id', $role->rid)
    ->execute();
 }
