<?php

/**
 * @file
 * Provides VBO action to grant access to nodes for users list.
 */

/**
 * Implements hook_action_info().
 */
function aul_vbo_action_info() {
  return array(
    'aul_vbo_add_grants_action' => array(
      'type' => 'node',
      'label' => t('Add grants for special users'),
      'behavior' => array('changes_property'),
      'configurable' => TRUE,
      'vbo_configurable' => TRUE,
      'triggers' => array('any'),
    ),
    'aul_vbo_remove_grants_action' => array(
      'type' => 'node',
      'label' => t('Remove grants for special users'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => TRUE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Actions callback. Add grants to node for special users list.
 */
function aul_vbo_add_grants_action(&$node, $context) {
  
  $aul_source = AUL_DEFAULT_SOURCE;
  if(!empty($context['settings']['aul_source'])) {
    $aul_source = $context['settings']['aul_source'];
  }
  
  // Get users list.
  $user_values = $context['users'];
  
  foreach ($user_values as $user_value) {
    if (!$user = user_load($user_value['entity_id'])) {
      continue;
    }

    // Add grants.
    aul_add_aul($user->uid, $node->nid, $context['grants'], $aul_source);
  }
  
  // Collect users names for message.
  $grant_names = array();
  foreach ($context['grants'] as $grant_name) {
    if($grant_name) {
      $grant_names[] = $grant_name;
    }
  }

  // Rebuild node grants.
  node_access_acquire_grants($node);

  $message = t('%user has got permission to %grants "%title".', array(
    '%user' => $user->name,
    '%title' => $node->title,
    '%grants' => implode(', ', $grant_names),
  ));

  drupal_set_message($message);
}

/**
 * Settings form for AUL VBO action.
 */
function aul_vbo_add_grants_action_views_bulk_operations_form($settings, $entityType, $settings_dom_id) {

  $form['aul_source'] = array(
    '#title' => t('AUL module'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => !empty($settings['aul_source']) ? $settings['aul_source'] : AUL_DEFAULT_SOURCE,
    '#description' => t('Source name of AUL group. Default value is "@name".', array(
      '@name' => AUL_DEFAULT_SOURCE,
    )),
  );
  return $form;
}

/**
 * Settings form for AUL VBO action.
 */
function aul_vbo_remove_grants_action_views_bulk_operations_form($settings, $entityType, $settings_dom_id) {

  $form['aul_source'] = array(
    '#title' => t('AUL module'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => !empty($settings['aul_source']) ? $settings['aul_source'] : AUL_DEFAULT_SOURCE,
    '#description' => t('Source name of AUL group. Default value is "@name"', array(
      '@name' => AUL_DEFAULT_SOURCE,
    )),
  );
  return $form;
}

/**
 * Builds form for adding grants to node for special users list.
 */
function aul_vbo_add_grants_action_form($settings) {

  $form['grants'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Permissions'),
    '#options' => array(
      'view' => t('View'),
      'update' => t('Update'),
      'delete' => t('Delete'),
    ),
    '#required' => TRUE,
    '#default_value' => isset($settings['settings']['grants']) ? $settings['settings']['grants'] : array(),
  );
  
  $form['users'] = array(
  '#title' => t('Users'),
    '#type' => 'entityreference',
    '#era_entity_type' => 'user',
    '#era_cardinality' => 9999,
    '#required' => TRUE,
    '#default_value' => isset($settings['settings']['users']) ? $settings['settings']['users'] : '',
  );

  return $form;
}

/**
 * Form callback for adding grants to node for special users list.
 */
function aul_vbo_add_grants_action_submit($form, $form_state) {
  $return = array();
  $return['grants'] = $form_state['values']['grants'];
  $return['users'] = $form_state['values']['users'];
  return $return;
}

/**
 * Actions callback. Add grants to node for special users list.
 */
function aul_vbo_remove_grants_action(&$node, $context) {
  
  $aul_source = AUL_DEFAULT_SOURCE;
  if(!empty($context['settings']['aul_source'])) {
    $aul_source = $context['settings']['aul_source'];
  }
  
  // Get users list.
  $user_values = $context['users'];
  
  foreach ($user_values as $user_value) {
    if (!$user = user_load($user_value['entity_id'])) {
      continue;
    }

    // Add grants.
    aul_remove_aul($user->uid, $node->nid, $context['grants'], $aul_source);
  }
  
  // Collect users names for message.
  $grant_names = array();
  foreach ($context['grants'] as $grant_name) {
    if($grant_name) {
      $grant_names[] = $grant_name;
    }
  }

  // Rebuild node grants.
  node_access_acquire_grants($node);

  $message = t('Access to %grants "%title" has been successfully removed for %user.', array(
    '%user' => $user->name,
    '%title' => $node->title,
    '%grants' => implode(', ', $grant_names),
  ));

  drupal_set_message($message);
}

/**
 * Builds form for adding grants to node for special users list.
 */
function aul_vbo_remove_grants_action_form($settings) {

  $form['grants'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Permissions'),
    '#options' => array(
      'view' => t('View'),
      'update' => t('Update'),
      'delete' => t('Delete'),
    ),
    '#required' => TRUE,
    '#default_value' => isset($settings['settings']['grants']) ? $settings['settings']['grants'] : array(),
  );

  $form['users'] = array(
    '#title' => t('Users'),
    '#type' => 'entityreference',
    '#era_entity_type' => 'user',
    '#era_cardinality' => 9999,
    '#required' => TRUE,
    '#default_value' => isset($settings['settings']['users']) ? $settings['settings']['users'] : '',
  );

  return $form;
}

/**
 * Form callback for adding grants to node for special users list.
 */
function aul_vbo_remove_grants_action_submit($form, $form_state) {
  $return = array();
  $return['grants'] = $form_state['values']['grants'];
  $return['users'] = $form_state['values']['users'];
  return $return;
}
