<?php

/**
 * Implements hook_permission().
 */
function role_vocabulary_permission() {
  return array(
    'administer role vocabulary' => array(
      'title' => t('Administer Role Vocabulary'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function role_vocabulary_menu() {
  $items['admin/structure/taxonomy/role_vocabulary'] = array(
    'title' => 'Role Vocabulary',
    'description' => 'Syncs roles with taxonomy terms in a specific vocabulary.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('role_vocabulary_admin_settings'),
    'access arguments' => array('administer role vocabulary'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'role_vocabulary.admin.inc',
  );
  $items['admin/structure/taxonomy/role_vocabulary/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/structure/taxonomy/role_vocabulary/sync'] = array(
    'title' => 'Sync Roles and Terms',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('role_vocabulary_admin_sync'),
    'access arguments' => array('administer role vocabulary'),
    'file' => 'role_vocabulary.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function role_vocabulary_help($path, $arg) {
  switch ($path) {
    case 'admin/structure/taxonomy/role_vocabulary/sync':
      return '<p>'. t('This will sync your <a href="!roles">roles</a> to the taxonomy terms in your <a href="!vocab">role vocabulary</a>. This is a one-way sync; no roles will be deleted, but terms not associated with any roles <strong>will be deleted</strong>.', array(
        '!roles' => url('admin/people/permissions/roles'),
        '!vocab' => url('admin/structure/taxonomy/' . taxonomy_vocabulary_load(variable_get('role_vocabulary', 0))->machine_name),
      )) .'</p>';
  }
}

/**
 * Implements hook_user_role_insert().
 */
function role_vocabulary_user_role_insert($role) {
  $term = (object) array(
    'name' => $role->name,
    'vid' => variable_get('role_vocabulary', 0),
  );
  taxonomy_term_save($term);
  db_insert('role_vocabulary')
    ->fields(array(
      'rid' => $role->rid,
      'tid' => $term->tid,
    ))
    ->execute();
}

/**
 * Implements hook_user_role_update().
 */
function role_vocabulary_user_role_update($role) {
  $term = (object) array(
    'name' => $role->name,
    'vid' => variable_get('role_vocabulary', 0),
    'tid' => db_query("SELECT tid FROM {role_vocabulary} WHERE rid = :rid", array(
      ':rid' => $role->rid,
    ))->fetchField(),
  );
  taxonomy_term_save($term);
}

/**
 * Implements hook_user_role_delete().
 */
function role_vocabulary_user_role_delete($role) {
  $tid = db_query("SELECT tid FROM {role_vocabulary} WHERE rid = :rid", array(
    ':rid' => $role->rid,
  ))->fetchField();
  taxonomy_term_delete($tid);
  db_delete('role_vocabulary')
    ->condition('rid', $role->rid)
    ->execute();
}

/**
 * Syncs roles and taxonomy terms in the Role Vocabulary.
 */
function role_vocabulary_sync() {
  $vid = variable_get('role_vocabulary', 0);
  $roles = $terms = array();

  // Load all roles.
  $roles = user_roles();

  // Load all terms in role vocabulary.
  foreach (taxonomy_term_load_multiple(array(), array('vid' => $vid)) as $term) {
    $terms[$term->tid] = $term->name;
  }

  // Load the role-term map.
  $map = db_query("SELECT rid, tid FROM {role_vocabulary}")->fetchAllKeyed();

  // Loop through all roles.
  foreach ($roles as $rid => $role) {
    // Mapping exists, term exists, and the names are equal; nothing to do.
    if (isset($map[$rid]) and isset($terms[$map[$rid]]) and $role == $terms[$map[$rid]]) {
      unset($terms[$map[$rid]], $map[$rid]);
    }

    // Mapping exists, term exists, but the names are NOT equal; update term.
    else if (isset($map[$rid]) and isset($terms[$map[$rid]]) and $role != $terms[$map[$rid]]) {
      $term = (object) array(
        'vid' => $vid,
        'tid' => $terms[$map[$rid]],
        'name' => $role,
      );
      taxonomy_term_save($term);
      unset($terms[$map[$rid]], $map[$rid]);
    }

    // Mapping exists, but term does not. Create the term and update mapping.
    else if (isset($map[$rid]) and !isset($terms[$map[$rid]])) {
      $term = (object) array(
        'vid' => $vid,
        'name' => $role,
      );
      taxonomy_term_save($term);
      db_update('role_vocabulary')
        ->fields(array(
          'tid' => $term->tid,
        ))
        ->condition('rid', $rid)
        ->execute();
      unset($map[$rid]);
    }

    // Mapping doesn't exist, so it's likely that the term was never created.
    // Create the term and mapping.
    else if (!isset($map[$rid])) {
      $term = (object) array(
        'vid' => $vid,
        'name' => $role,
      );
      taxonomy_term_save($term);
      db_insert('role_vocabulary')
        ->fields(array(
          'rid' => $rid,
          'tid' => $term->tid,
        ))
      ->execute();
    }
  }

  // Delete remaining terms.
  if (!empty($terms)) {
    foreach ($terms as $tid => $term) {
      taxonomy_term_delete($tid);
    }
  }

  // Delete remaining mappings.
  if (!empty($map)) {
    foreach ($map as $rid => $tid) {
      db_delete('role_vocabulary')
        ->condition('rid', $rid)
        ->execute();
    }
  }
}
