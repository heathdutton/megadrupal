<?php
/**
 * @file
 * Opigno webex app module file
 *
 * @author James Aparicio
 */

function opigno_webex_app_permission() {
  return array(
    'configure webex' => array(
      'title' => t('Configure WebEx'),
      'description' => t('Allows the user to configure WebEx account'),
    ),
    'register meeting attendance' => array(
      'title' => t('Register meeting attendance'),
      'description' => t('Register user meeting attendance'),
    ),
  );
}

function opigno_webex_app_og_permission() {
  return array(
    'start meetings' => array(
      'title' => t('Start meetings'),
      'description' => t('Allows the user to start WebEx meetings'),
    ),
    'attend meetings' => array(
      'title' => t('Attend meetings'),
      'description' => t('Allows the user to attend meetings'),
    ),
    'register meeting attendance' => array(
      'title' => t('Register meeting attendance'),
      'description' => t('Register user meeting attendance'),
    ),
  );
}

/**
 * Implements hook_opigno_breadcrumbs().
 */
function opigno_webex_app_opigno_breadcrumbs( $gid) {
  $breadcrumbs = array();

  $node = menu_get_object();
  // Must we handle this page request for the breadcrumb ?
  if ((isset($node->type) && $node->type == 'webex_video_conference') ||
    current_path() == 'node/add/webex-video-conference') {

    // Add the Webex list link.
    $breadcrumbs[] = l(t("Meetings"), "node/$gid/WebEx");
  }

  if (!empty($breadcrumbs)) {
    return $breadcrumbs;
  }
}

function opigno_webex_app_opigno_tool($node = NULL) {
  return array(
    'meetings' => array(
      'name' => t("Meetings (Web conferencing)"),
      'path' => isset($node) ? "node/{$node->nid}/WebEx" : '',
      'description' => t("Allows students to attend meetings and teachers to create meetings"),
      'actions' => array(
        'create_meeting' => array(
          'title' => t("Create meeting"),
          'href' => 'node/add/webex-video-conference',
          'access_arguments' => array('node', isset($node) ? $node->nid : 0, 'create meeting content'),
          'access_callback' => 'og_user_access',
          'query' => array(
            'og_group_ref' => isset($node) ? $node->nid : '',
          )
        ),
      ),
    ),
  );
}

function opigno_webex_app_menu() {
  return array(
    'WebEx' => array(
      'title' => "Meettings",
      'description' => "Displays Scheduled meetings",
      'page callback' => 'opigno_get_my_meetings',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
    'node/%/WebEx' => array(
      'title' => 'Meetings',
      'description' => "Displays Scheduled meetings",
      'page callback' => 'opigno_get_course_meetings',
      'access callback' => 'og_user_access',
      'access arguments' => array('node',1, 'attend meetings'),
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
    ),
    'admin/opigno/system/webex' => array(
      'title' => 'WebEx configuration',
      'description' => 'The configuration for the WebEx integration',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'opigno_webex_app_webex_edit_form',
      ),
      'access arguments' => array(
        'configure webex',
      ),
    ),
    'node/%node/webex_attendance' => array(
    'title' => 'Score in house lesson',
    'description' => 'Score in house lesson',
    'page callback' => 'opigno_webex_attendance_page',
    'page arguments' => array(1),
    'access callback' => "opigno_webex_app_access_attendance",
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  )
  );
}

function opigno_webex_app_access_attendance($node, $account = NULL) {
  if (!($node->type=="webex_video_conference"))
  {
    return false;
  }
  if (!isset($account)) {
    global $user;
    $account = clone $user;
  }
  if (module_exists('og_context')) {
    $group = og_context('node');
    if (!empty($group)) {
      return og_user_access('node', $group['gid'], 'register meeting attendance', $account);
    }
    else {
      return user_access('register meeting attendance', $account);
    }
  }
}

////////////// Scoring page ////////////////////////
function opigno_webex_attendance_page($node) {
  return drupal_get_form('opigno_webex_attendance_form', $node);
}

function opigno_webex_attendance_form($form, &$form_state,$node) {
  $form['submit_attendance'] = array(
    '#type' => 'fieldset',
    '#title' => $form_state['build_info']['args'][0]->title,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#prefix' => '<table><thead><tr><th>' . t("Student name") . '</th><th>' . t("Attendance") . '</th><th>' . t("Score") . '</th></tr></thead><tbody>',
    '#suffix' => '</tbody></table>',
  );
  $group = og_context('node');
  if (!empty($group['gid'])) {
    $memberships = opigno_in_house_training_get_users_membership($group['gid']);
    $nextlink="";
    $next=false;
    $lessons=opigno_webex_app_get_all_webex_unrestricted($group['gid']);
    if (isset($lessons[$group['gid']]))
    {
      foreach($lessons[$group['gid']] as $webex_id => $webex)
      {
        if ($next==true)
        {
          $nextlink="node/".$webex_id."/score";
          break;
        }
        if ($webex_id==$node->nid)
        {
          $next=true;
        }
      }
    }
    foreach ($memberships as $m_id => $membership_id) {
      $og_membership = og_membership_load($membership_id);
      $user_roles_in_group = og_get_user_roles($og_membership->group_type, $og_membership->gid, $og_membership->etid);
      $non_student_roles = array('manager', 'teacher', 'coach');
      if (count(array_intersect($user_roles_in_group, $non_student_roles)) == 0) {
      $user = user_load($og_membership->etid);
      $defaults = opigno_webex_attendance_form_get_default_value($form_state['build_info']['args'][0]->nid, $user->uid);
      $form['submit_attendance']['name_' . $user->uid] = array(
        '#type' => 'item',
        '#title' => $user->name,
        '#prefix' => '<tr><td>',
        '#suffix' => '</td>',
      );
      $form['submit_attendance']['status_' . $user->uid] = array(
        '#type' => 'select',
        '#options' => array(
          0 => t('Absent'),
          1 => t('Attended'),
        ),
        '#default_value' => $defaults['status'],
        '#prefix' => '<td>',
        '#suffix' => '</td>',
      );
      $form['submit_attendance']['score_' . $user->uid] = array(
        '#type' => 'textfield',
        '#size' => '10',
        '#required' => FALSE,
        '#default_value' => $defaults['score'],
        '#prefix' => '<td>',
        '#suffix' => '</td></tr>',
      );
      }
    }
  }
  $form['submit_scores']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Score attendance'),
    '#submit' => array('opigno_webex_attendance_form_submit'),
    '#prefix' => '<div class="form-submits">',
  );

  if (($next==true)&&!empty($nextlink))
  {
    $form['store'] = array(
      '#type' => 'value',
      '#value' => $nextlink,
    );

    $form['submit_1'] = array(
      '#type' => 'submit',
      '#value' => t('Score and go to next'),
      '#submit' => array('opigno_webex_attendance_form_submit_1'),
      '#suffix' => '</div>',
    );
  }
  else
  {
    $form['submit']['#suffix'] = '</div>';

  }
  return $form;
}

function opigno_webex_attendance_form_validate($form, &$form_state)
{
  foreach($form_state['values'] as $index => $element)
  {
    if (opigno_webex_startsWith($index,'score_'))
    {
      if ((!is_numeric($element['#value']))||($element['#value']<0)||($element['#value']>100))
      {
        form_set_error($index, t('Score must be integer (0-100)'));
      }
    }
  }
}

function opigno_webex_attendance_form_submit($form, &$form_state) {
  foreach ($form_state['values'] as $index => $element) {
    if (opigno_webex_startsWith($index, 'status_')) {
      $uid = explode("status_", $index);
      $uid = $uid[1];
      opigno_webex_attendance_form_set_value($form_state['build_info']['args'][0]->nid, $uid, $element, $form_state['values']['score_' . $uid]);
      opigno_webex_app_int_finished($form_state['build_info']['args'][0]->nid,$element,$form_state['values']['status_' . $uid],$uid);
    }
  }
}

function opigno_webex_attendance_form_submit_1($form, &$form_state) {
  foreach ($form_state['values'] as $index => $element) {
    if (opigno_webex_startsWith($index, 'status_')) {
      $uid = explode("status_", $index);
      $uid = $uid[1];
      opigno_webex_attendance_form_set_value($form_state['build_info']['args'][0]->nid, $uid, $element, $form_state['values']['score_' . $uid]);
      opigno_webex_app_int_finished($form_state['build_info']['args'][0]->nid,$element,$form_state['values']['status_' . $uid],$uid);
    }
  }
  drupal_goto($form_state['values']['store']);
}

function opigno_webex_app_int_finished($webexid, $score,$status, $taker = NULL)
{
  if (module_exists('rules')) {
    $taker=user_load($taker);
    $webex=node_load($webexid);
    $author = user_load($webex->uid);
    if ((int)$status==1)
    {
      foreach($webex->og_group_ref[LANGUAGE_NONE] as $index => $value)
      {
        if (opigno_quiz_app_user_passed($value['target_id'],$taker->uid))
        {
          rules_invoke_event('opigno_quiz_app_rules_quiz_passed', $taker, $author, $webex);
          drupal_get_messages();
        }
      }
    }
  }
}

function opigno_webex_attendance_form_set_value($webex_id, $uid, $status,$score) {
  db_merge('opigno_webex_attendance')
    ->key(array('webex_id' => $webex_id, 'uid' => $uid))
    ->fields(array(
      'webex_id' => $webex_id,
      'status' => $status,
      'score' =>$score,
      'uid' => $uid,
    ))
    ->execute();
}

function opigno_webex_attendance_form_get_default_value($webex_id, $uid) {
  $result = db_query('SELECT owa.status,owa.score FROM {opigno_webex_attendance} owa WHERE owa.webex_id = :webex_id and owa.uid = :uid', array(
    ':webex_id' => $webex_id,
    ':uid' => $uid
  ));
  $result_['status'] = '';
  foreach ($result as $record) {
    $result_['status'] = $record->status;
    $result_['score'] = $record->score;
  }
  return $result_;
}

function opigno_webex_startsWith($haystack, $needle, $case = TRUE) {
  if ($case) {
    return (strcmp(substr($haystack, 0, strlen($needle)), $needle) === 0);
  }
  return (strcasecmp(substr($haystack, 0, strlen($needle)), $needle) === 0);
}
/////////////////////////////////////////////////


function opigno_get_my_meetings() {
  Global $user;
  $today = date('Y-m-d 00:00:00');
  $my_groups = og_get_groups_by_user($user);
  $meetings = node_load_multiple(array(), array('type' => "webex_video_conference"));
  if (isset($my_groups['node'])) {
    foreach ($my_groups['node'] as $anid) {
      $vars[$anid] = array();
      foreach ($meetings as $meetingnid => $meeting) {
        $lookfor['target_id'] = $anid;
        if ($meeting->opigno_calendar_date[LANGUAGE_NONE][0]['value'] > $today) {
          foreach ($meeting->og_group_ref[LANGUAGE_NONE] as $aref) {
            if ($aref == $lookfor) {
              $vars[$anid][$meetingnid] = $meetingnid;
            }
          }
        }
      }
    }
  }
  return theme_opigno_webex_app_meetings($vars);
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function opigno_webex_app_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'node/%/WebEx') {
    $gid = arg(1);
    if (og_user_access('node',$gid,'create webex_video_conference content')) {
      $item = menu_get_item('node/add/webex-video-conference');
      $item['title'] = t("Create meeting");
      $item['options']['query']['og_group_ref'] = $item['localized_options']['query']['og_group_ref'] = $gid;
      $item['options']['attributes']['class'][] = $item['localized_options']['attributes']['class'][] = 'opigno-webex-meeting-add';
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

function opigno_get_course_meetings($nodeid) {
  $node = node_load($nodeid);
  $today = date('Y-m-d 00:00:00');
  $header = array(t("@nodetitle meetings", array('@nodetitle' => $node->title)), "", "");
  $rows = array();
  $meetings = opigno_webex_app_get_all_webex($nodeid);
  foreach ($meetings[$nodeid] as $meetingnid => $meeting) {
    $meeting_node = node_load($meetingnid);
    if (format_date(strtotime($meeting_node->opigno_calendar_date[LANGUAGE_NONE][0]['value'] . ' ' . $meeting_node->opigno_calendar_date[LANGUAGE_NONE][0]['timezone_db']), 'medium', "Y-m-d H:i:s") > $today) {
      if (opigno_webex_meeting_has_started(opigno_webex_app_get_meeting_link($meetingnid)) == TRUE) {
        $message = l(t("Join Meeting"), opigno_webex_app_get_meeting_link($meetingnid), array('attributes' => array('target' => '_blank')));
      }
      elseif (og_user_access('node', $node->nid, 'start meetings')) {
        foreach ($meeting_node->meeting_id as $lang => $value) {
          $meeting_id = $value[0]['value'];
        }
        $backurl = urlencode(variable_get('opigno_webex_app_webex_full_url') . '/m.php?AT=HM&MK=' . $meeting_id);
        $message = l(t("Start meeting"), variable_get('opigno_webex_app_webex_full_url') . "/p.php?AT=LI&WID=" . variable_get('opigno_webex_app_webex_user') . "&PW=" . variable_get('opigno_webex_app_webex_password') . "&MU=" . $backurl, array('attributes' => array('target' => '_blank')));
      }
      else {
        $check = TRUE;
        $message = t("Meeting has not started (please stand by)");
      }
      if ($check == TRUE) {
        $class = "opigno-webex-app-nolink";
      }
      else {
        $class = "take-button-cell";
      }
      $path_edit = 'node/' . $meeting_node->nid . '/edit';
      $link_edit = menu_get_item($path_edit);
      if (!empty($link_edit) && $link_edit['access']) {
        $message .= l(t("Edit"), $path_edit, array('attributes' => array('class' => 'edit action-element action-edit-element')));
      }
      $score_path = 'node/' . $meeting_node->nid . '/webex_attendance';
      $link_score = menu_get_item($score_path);
      if (!empty($link_score) && $link_score['access']) {
        $message .= l(t("Results"), $score_path, array('attributes' => array('class' => 'results action-element action-results-element')));
      }
      $time = strtotime($meeting_node->opigno_calendar_date['und'][0]['value']);
      $time2 = strtotime($meeting_node->opigno_calendar_date['und'][0]['value2']);
      $diff = abs($time2 - $time);
      $rows[] = array(
        'data' => array(
          $meeting_node->title,
          gmdate('H\h i\m', $diff),
          array('data' => $message, 'class' => $class),
        ),
      );
    }
  }
  return theme('table', array('header' => $header, 'rows' => $rows));
}



function opigno_webex_app_node_view($node, $view_mode, $langcode) {
  if (($node->type == "webex_video_conference") && ($view_mode == 'full')) {
    foreach($node->meeting_id as $lang => $value)
    {
      $meeting_id=$value[0]['value'];
    }
    $backurl = urlencode(variable_get('opigno_webex_app_webex_full_url') . '/m.php?AT=HM&MK=' . $meeting_id);
    if (og_user_access('node', $node->og_group_ref['und'][0]['target_id'], 'start meetings'))
    {
      $node->content['start_meeting'] = array(
        '#markup' => l(t("Start meeting"), variable_get('opigno_webex_app_webex_full_url') . "/p.php?AT=LI&WID=".variable_get('opigno_webex_app_webex_user')."&PW=".variable_get('opigno_webex_app_webex_password')."&MU=" . $backurl, array('attributes' => array('target' => '_blank'))),
        '#weight' => 10,
      );
    }
    elseif(opigno_webex_meeting_has_started(opigno_webex_app_get_meeting_link($node->nid)) == TRUE)
    {
      $node->content['start_meeting']=array(
        '#markup' => l(t("Join Meeting"), opigno_webex_app_get_meeting_link($node->nid), array('attributes' => array('target' => '_blank'))),
        '#weight' => 10,
      );
    }
    else
    {
      $node->content['start_meeting']=array(
        '#markup' => t("Meeting has not started (please stand by)"),
        '#weight' => 10,
      );
    }
  }
}

function opigno_webex_app_get_meeting_link($nid) {
  Global $user;
  $node = node_load($nid);
  foreach($node->meeting_id as $lang => $value)
  {
    $meeting_id=$value[0]['value'];
  }
  foreach($node->meeting_password as $lang => $value)
  {
    $meeting_password=$value[0]['value'];
  }
  return variable_get('opigno_webex_app_webex_full_url') . '/m.php?AT=JM&MK=' . $meeting_id . '&AN=' . $user->name . '&AE=' . $user->mail . '&PW=' . $meeting_password; //.'&BU=http://localhost/opignov3';
}

function theme_opigno_webex_app_meetings($vars) {
  $header = array(
    array(
      'data' => t("My Scheduled meetings"),
    )
  );
  $rows = array();
  foreach ($vars as $nid => $var) {
    $va_[$nid] = $var;
    $rows[] = array('data' => array(theme_opigno_webex_app_meeting($va_)));
    $va_ = NULL;
  }
  return theme('table', array('header' => $header, 'rows' => $rows));
}

function theme_opigno_webex_app_meeting($vars) {
  $node = node_load(key($vars));
  $header = array(
    array(
      'data' => $node->title,
    )
  );
  $rows = array();
  foreach ($vars[$node->nid] as $meetingnid => $meeting_nid) {
    $meeting_node = node_load($meeting_nid);
    if (opigno_webex_meeting_has_started(opigno_webex_app_get_meeting_link($meeting_nid)) == TRUE) {
      $message = l(t("Join Meeting"), opigno_webex_app_get_meeting_link($meeting_nid), array('attributes' => array('target' => '_blank')));
    }
    elseif (og_user_access('node', $node->nid, 'start meetings')) {
      foreach($meeting_node->meeting_id as $lang => $value)
      {
        $meeting_id=$value[0]['value'];
      }
      $backurl = urlencode(variable_get('opigno_webex_app_webex_full_url') . '/m.php?AT=HM&MK=' . $meeting_id);
      $message = l(t("Start meeting"), variable_get('opigno_webex_app_webex_full_url') . "/p.php?AT=LI&WID=".variable_get('opigno_webex_app_webex_user')."&PW=".variable_get('opigno_webex_app_webex_password')."&MU=" . $backurl, array('attributes' => array('target' => '_blank')));
    }
    else {
      $message = t("Meeting has not started (please stand by)");
    }

    $rows[] = array(
      'data' => array(
        $meeting_node->title,
        $meeting_node->opigno_calendar_date[LANGUAGE_NONE][0]['value'],
        $message,
      )
    );
  }
  return theme('table', array('header' => $header, 'rows' => $rows));
}

function opigno_webex_meeting_has_started($url) {
  if (!function_exists('curl_init')) {
    die('Sorry cURL is not installed!');
  }
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_USERAGENT, "MozillaXYZ/1.0");
  curl_setopt($ch, CURLOPT_HEADER, 1);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_TIMEOUT, 10);
  $output = curl_exec($ch);
  curl_close($ch);
  if (strpos($output, 'FAIL') !== FALSE) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

function opigno_webex_app_form_alter(&$form, &$form_state, $form_id) {
  if (($form_id == "webex_video_conference_node_form") && ((strpos($form['#action'], 'add') !== FALSE) || (strpos($form['#action'], 'edit') !== FALSE))) {
    $form['meeting_id']['#type'] = 'hidden';
    $form['#validate'][] = 'opigno_webex_app_meeting_form_validation';
    if (strpos($form['#action'], 'edit') !== FALSE)
    {
      $form['meeting_password']['#type'] = 'hidden';
    }
  }
  if (($form['#form_id'] == 'webex_video_conference_node_form') && (isset($form['#node_edit_form']) && ($form['#node_edit_form'])))
  {
    // Is insert
    if (is_null($form['nid']['#value'])) {
      $form['opigno_calendar_date']['#access'] = FALSE;
      array_unshift($form['#submit'],'opigno_webex_app_recursive_submit');
    }
    // Is edit
    else {
      $form['meeting_dates']['#access'] = FALSE;
    }
  }
}

function opigno_webex_app_recursive_submit($form, &$form_state) {
  $field=field_info_field("meeting_dates");
  $unixdate = strtotime($form_state['values']['meeting_dates'][LANGUAGE_NONE][0]['value'].' '.date_get_timezone_db($field['settings']['tz_handling']));
  $form_state['values']['title']=$form_state['values']['title']." ".format_date($unixdate,'custom','d-m-Y H:i',$form_state['values']['meeting_dates'][LANGUAGE_NONE][0]['timezone']);
  $form_state['values']['opigno_calendar_date'][LANGUAGE_NONE][0]=$form_state['values']['meeting_dates'][LANGUAGE_NONE][0];
}

function opigno_webex_app_node_insert($node) {
  if ($node->type == "webex_video_conference") {
    foreach ($node->meeting_dates['und'] as $index => $date) {
      if ($index != 0) {
        $new_node = $node;
        unset($new_node->nid);
        unset($new_node->vid);
        unset($new_node->meeting_dates);
        $title=explode(" ",$node->title);
        array_pop($title);
        array_pop($title);
        $title=implode(" ",$title);
        $unixdate = strtotime($date['value'].' '.$date['timezone_db']);
        $new_node->title = $title." ".format_date($unixdate,'custom','d-m-Y H:i',$date['timezone']);
        $new_node->opigno_calendar_date[LANGUAGE_NONE][0] = $date;
        $meeting = new WebexAPI();
        $meetingkey = $meeting->getmeetingWebex($new_node, TRUE);
        $new_node->meeting_id[LANGUAGE_NONE][0]['value']=$meetingkey;
        if ($meetingkey != 0) {
          node_save($new_node);
        }
      }
      else
      {
        node_access_acquire_grants($node);
      }
    }
  }
}

function opigno_webex_app_meeting_form_validation($form, &$form_state) {
  if ($form_state['clicked_button']['#value'] != 'Delete') {
    module_load_include('php', 'opigno_webex_app', 'WebexAPI.class');
    if (strpos($form['#action'], 'add') !== FALSE) {
      $isnew = TRUE;
      $node = new stdClass();
      $node->title = $form_state['values']['title'];
      foreach($form_state['values']['meeting_password'] as $lang1 => $value1)
      {
        $node->meeting_password[$lang1][0]['value']=$form_state['values']['meeting_password'][$lang1][0]['value'];
      }
      $node->opigno_calendar_date[LANGUAGE_NONE][0] = $form_state['values']['meeting_dates'][LANGUAGE_NONE][0];
      $form_state['values']['opigno_calendar_date'][LANGUAGE_NONE][0]=$form_state['values']['meeting_dates'][LANGUAGE_NONE][0];
    }
    if (strpos($form['#action'], 'edit') !== FALSE) {
      $isnew = FALSE;
      $node = node_load($form['nid']['#value']);
    }
    $meeting = new WebexAPI();
    $meetingkey = $meeting->getmeetingWebex($node, $isnew);
    if ($meetingkey == 0) {
      form_set_error('NULL', t('Could not create/edit meeting, Webex service down or configuration incorrect'));
    }
    if ($isnew == TRUE) {
      foreach($form_state['values']['meeting_id'] as $lang => $value)
      {
        $form_state['values']['meeting_id'][$lang][0]['value'] = $meetingkey;
      }
    }
  }
}


function opigno_webex_app_webex_edit_form($form, &$form_state) {

  $webex_info = new stdClass();
  $webex_info->webex_user = variable_get('opigno_webex_app_webex_user');
  $webex_info->webex_password = variable_get('opigno_webex_app_webex_password');
  $webex_info->webex_sid = variable_get('opigno_webex_app_webex_sid');
  $webex_info->webex_pid = variable_get('opigno_webex_app_webex_pid');
  $all = variable_get('opigno_webex_app_webex_url');
  $explode1 = explode('://', $all);
  if (isset($explode1[1]))
  {
    $explode2 = explode('.webex', $explode1[1]);
    $webex_info->webex_url = $explode2[0];
  }
  $form['webex_user'] = array(
    '#type' => 'textfield',
    '#title' => t('WebEx Username'),
    '#required' => TRUE,
    '#default_value' => !empty($webex_info->webex_user) ? $webex_info->webex_user : '',
  );
  $form['webex_password'] = array(
    '#type' => 'textfield',
    '#title' => t('WebEx Password'),
    '#required' => TRUE,
    '#default_value' => !empty($webex_info->webex_password) ? $webex_info->webex_password : '',
  );
  $form['webex_sid'] = array(
    '#type' => 'textfield',
    '#title' => t('Site ID (SID)'),
    '#required' => TRUE,
    '#default_value' => !empty($webex_info->webex_sid) ? $webex_info->webex_sid : '',
  );
  $form['webex_pid'] = array(
    '#type' => 'textfield',
    '#title' => t('Partner ID (PID)'),
    '#required' => TRUE,
    '#default_value' => !empty($webex_info->webex_pid) ? $webex_info->webex_pid : '',
  );
  $form['webex_url'] = array(
    '#type' => 'textfield',
    '#description' => t('Please enter the subdomain prefix. Ex: For http://subdomainprefix.webex.com use subdomainprefix'),
    '#title' => t('Subdomain prefix'),
    '#required' => TRUE,
    '#default_value' => !empty($webex_info->webex_url) ? $webex_info->webex_url : '',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  $form['#validate'][] = 'opigno_webex_app_webex_edit_form_validation';
  return $form;
}

function opigno_webex_app_webex_edit_form_validation($form, &$form_state) {
  $errors = form_get_errors();
  if (empty($errors)) {
    if (opigno_webex_app_authenticate($form_state)) {
      drupal_set_message(t('Configuration is valid and was saved'), 'status');
      variable_set('opigno_webex_app_webex_user', $form_state['values']['webex_user']);
      variable_set('opigno_webex_app_webex_password', $form_state['values']['webex_password']);
      variable_set('opigno_webex_app_webex_sid', $form_state['values']['webex_sid']);
      variable_set('opigno_webex_app_webex_pid', $form_state['values']['webex_pid']);
      variable_set('opigno_webex_app_webex_url', 'https://' . $form_state['values']['webex_url'] . '.webex.com');
      variable_set('opigno_webex_app_webex_full_url', 'https://' . $form_state['values']['webex_url'] . '.webex.com/' . $form_state['values']['webex_url']);
    }
    else {
      form_set_error('NULL', t('Configuration incorrect or WebEx not reachable'));
    }
  }
}

function opigno_webex_app_authenticate($form_state) {

  $webex_post = new stdClass();
  $webex_post->UID = $form_state['values']['webex_user'];
  $webex_post->PWD = $form_state['values']['webex_password'];
  $webex_post->SID = $form_state['values']['webex_sid'];
  $webex_post->PID = $form_state['values']['webex_pid'];
  $webex_post->URL = 'https://' . $form_state['values']['webex_url'] . '.webex.com/';
  $webex_post->XML = '<?xml version="1.0" ?>
    <serv:message xmlns:serv="http://www.webex.com/schemas/2002/06/service" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <header>
<securityContext>
<webExID>' . $webex_post->UID . '</webExID>
<password>' . $webex_post->PWD . '</password>
<siteID>' . $webex_post->SID . '</siteID>
<partnerID>' . $webex_post->PID . '</partnerID>
</securityContext>
      </header>
      <body><bodyContent xmlns:meet="http://www.webex.com/schemas/2002/06/service/meeting"
        xsi:type="java:com.webex.service.binding.meeting.LstsummaryMeeting">
        </bodyContent>
      </body>
    </serv:message>';

  $post_data = $webex_post;
  $post_url = $webex_post->URL . '/WBXService/XMLService';
  $post_string = '';
  foreach ($post_data as $data_key => $data_value) {
    $post_string .= '' . $data_key . '=' . urlencode($data_value) . '&';
  }
  $post_string = substr($post_string, 0, -1);
  $ch = curl_init();
  // Set the url, number of POST vars, POST data.
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_URL, $post_url);
  curl_setopt($ch, CURLOPT_POST, count($post_data));
  curl_setopt($ch, CURLOPT_POSTFIELDS, $post_string);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  $response = curl_exec($ch);
  $webex_error_msg = 'ERROR:<br/><b>RESPONSE:</b><span>' . strip_tags($response) . '</span><br/>
        <br/>
        <b>POSTED DATA:</b><span>' . $post_data->XML . '</span>';
  curl_close($ch);
  if (!empty($response)) {
    $xml_obj = new SimpleXMLElement($response);
    $success = $xml_obj->children('serv', TRUE)->header->response->result;
    $reason = $xml_obj->children('serv', TRUE)->header->response->result;
    if ((string) $success === "SUCCESS") {
      return TRUE;
    }
    else
    {
      $exception = $xml_obj->children('serv', TRUE)->header->response->exceptionID;
      if ((string) $exception==="000015")
      {
        return true;
      }
    }
  }
  return FALSE;
}




//////////////////// Group interface /////////////////////

/////////////////////////////////////////// Group interface ////////////////////////////////////////////////////
/**
 * Implements hook_preprocess_page().
 */
function opigno_webex_app_preprocess_page(&$vars) {
  $group = og_context('node');
  if (!empty($group['gid'])) {
    $node = node_load($group['gid']);
    if ($node->type == "course") {
      $vars['group_state']['course'][$node->nid]['webex'] = opigno_webex_app_group_status($group['gid']);
    }
    if ($node->type == "class") {
      if (isset($node->opigno_class_courses[LANGUAGE_NONE])) {
        foreach ($node->opigno_class_courses[LANGUAGE_NONE] as $cindex => $course) {
          $vars['group_state']['course'][$course['target_id']]['webex'] = opigno_webex_app_group_status($course['target_id']);
        }
      }
    }
  }
}

function opigno_webex_app_group_status($node_id) {
  $allwebex = opigno_webex_app_get_all_webex($node_id);
  Global $user;
  return theme_opigno_webex_app_course_lessons($allwebex,$user);
}

function opigno_webex_app_get_all_webex($node_id) {
  $nodes = array();
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'vid'))
    ->condition('n.status', 1, '=')
    ->condition('n.type', 'webex_video_conference', '=');
  $query->join('og_membership', 'og_m', 'og_m.etid = n.nid'); //JOIN node with users
  $query->fields('og_m', array('gid'))
    ->condition('og_m.gid', $node_id, '=')
    ->condition('og_m.field_name', 'og_group_ref', '=')
    ->condition('og_m.state', 1, '=')
    ->condition('og_m.entity_type', 'node', '=');
  $query->join('field_data_opigno_calendar_date', 'fdcd', 'fdcd.entity_id = n.nid'); //JOIN node with users
  $query->fields('fdcd')
    ->condition('fdcd.deleted', 0, '=')
    ->condition('fdcd.bundle', 'webex_video_conference', '=');
  $query->orderBy('fdcd.opigno_calendar_date_value', 'ASC');
  $query->orderBy('n.nid', 'ASC');
  $result = $query->execute();
  $total = 0;
  while ($record = $result->fetchAssoc()) {
    if ($router_item = menu_get_item('node/' . $record['nid'])) {
      if ($router_item['access']) {
        $nodes[$node_id][$record['nid']] = $record['nid'];
      }
    }
  }
  return $nodes;
}

/**
 * Theme callback: display course quizes and results.
 */
function theme_opigno_webex_app_course_lessons($vars,$user) {
  $rows = array();
  if (!empty($vars)) {
    foreach ($vars as $course_id => $ihlessons) {
      foreach ($ihlessons as $ihlesson_id => $ihlesson) {
        $ihlesson=node_load($ihlesson);
        $time = strtotime($ihlesson->opigno_calendar_date['und'][0]['value']);
        $time2 = strtotime($ihlesson->opigno_calendar_date['und'][0]['value2']);
        $diff = abs($time2 - $time);
        $defaults=opigno_webex_attendance_form_get_default_value($ihlesson_id,$user->uid);
        $defaults['status']=='0' ? $status=t('Absent') : ($defaults['status']=='1' ? $status=t('Attended') : $status='-');
        $selected="";
        if (strpos(current_path(),'node/'.$ihlesson->nid) !== false) {
          $selected="selected";
        }
        $rows[] = array(
          'class' => array(),
          'data' => array(
            l($ihlesson->title, 'node/' . $course_id."/WebEx",array('attributes' => array('class' => array($selected)))),
            gmdate('H\h i\m', $diff),
            $status,
          )
        );
      }
    }
  }
  $header = array(
    array(
      'data' => t('Webex meetings'),
      'class' => array('opigno-webex-app-course-name')
    ),
    array(
      'data' => t('Duration'),
      'class' => array('opigno-webex-app-course-duration')
    ),
    array(
      'data' => t('Status'),
      'class' => array('opigno-webex-app-course-status')
    ),
  );
  if (!empty($rows))
  {
  return theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('class' => array())));
  }
}


/**
 * Implements hook_views_query_alter().
 */
function opigno_webex_app_views_query_alter(&$view, &$query) {
  global $user;
  if (($view->name == 'opigno_quizzes') && ($view->current_display == 'entityreference_1')) {
    foreach ($query->where as &$conditions) {
      if (is_array($conditions)) {
        foreach ($conditions['conditions'] as &$condition) {
          if (is_string($condition['field'])&&($condition['field']=='node.type')) {
           $condition['value'][count($condition['value'])] = 'webex_video_conference';
          }
        }
      }
    }
  }
}


function opigno_webex_app_get_all_required_quizzes($node) {
  $quizzes = &drupal_static(__FUNCTION__);

  if (!isset($quizzes[$node->nid])) {
    $quizzes[$node->nid] = array();
    if (isset($node->course_required_quiz_ref[LANGUAGE_NONE])) {
      foreach ($node->course_required_quiz_ref[LANGUAGE_NONE] as $item) {
        $nody=node_load($item['target_id']);
        if ($nody->type=="webex_video_conference")
        {
          $nody=node_load($item['target_id']);
          $quizzes[$node->nid][$item['target_id']] = node_load($item['target_id']);
        }
      }
    }
  }

  return $quizzes[$node->nid];
}


function opigno_webex_app_get_all_webex_unrestricted($node_id) {
  $nodes = array();
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'vid'))
    ->condition('n.status', 1, '=')
    ->condition('n.type', 'webex_video_conference', '=');
  $query->join('og_membership', 'og_m', 'og_m.etid = n.nid'); //JOIN node with users
  $query->fields('og_m', array('gid'))
    ->condition('og_m.gid', $node_id, '=')
    ->condition('og_m.field_name', 'og_group_ref', '=')
    ->condition('og_m.state', 1, '=')
    ->condition('og_m.entity_type', 'node', '=');
  $query->join('field_data_opigno_calendar_date', 'fdcd', 'fdcd.entity_id = n.nid'); //JOIN node with users
  $query->fields('fdcd')
    ->condition('fdcd.deleted', 0, '=')
    ->condition('fdcd.bundle', 'webex_video_conference', '=');
  $query->orderBy('fdcd.opigno_calendar_date_value', 'ASC');
  $query->orderBy('n.nid', 'ASC');
  $result = $query->execute();
  $total = 0;
  while ($record = $result->fetchAssoc()) {
        $nodes[$node_id][$record['nid']] = $record['nid'];
      }
  return $nodes;
}

function opigno_webex_app_get_all_webex_unrestricted_view($node_id)
{
  $html="";
  $nodes=opigno_webex_app_get_all_webex_unrestricted($node_id);
  foreach($nodes[$node_id] as $index => $node)
  {
    $node=node_load($node);
    $html.='<div class="webex-dates">';
    $html.='<div class="webex-title">';
    $html.=$node->title;
    $html.="</div>";
    $html.="</div>";
  }
  return $html;
}


