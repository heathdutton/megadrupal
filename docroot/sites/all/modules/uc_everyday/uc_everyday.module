<?php

/**
 * @file
 * Integrates Everyday Online Payment with Ubercart.
 */

/*******************************************************************************
 * Hook Functions (Drupal)
 *****************************************************************************/

/**
 * Implements hook_menu().
 */
function uc_everyday_menu() {
  $items = array();

  $items['cart/everyday/complete'] = array(
    'title' => 'Order complete',
    'page callback' => 'uc_everyday_complete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'uc_everyday.pages.inc',
  );
  $items['cart/everyday/cancel'] = array(
    'title' => 'everyday payment cancelled',
    'page callback' => 'uc_everyday_cancel',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_everyday.pages.inc',
  );
  $items['cart/everyday/reject'] = array(
    'title' => 'everyday payment rejected',
    'page callback' => 'uc_everyday_reject',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_everyday.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_ucga_display().
 */
function uc_everyday_ucga_display() {
  // Tell UC Google Analytics to display the e-commerce JS on the custom
  // order completion page for this module.
  if (arg(0) == 'cart' && arg(1) == 'everyday' && arg(2) == 'finalize') {
    return TRUE;
  }
}

/**
 * Implements hook_uc_payment_method().
 *
 * @see uc_payment_method_everyday()
 */
function uc_everyday_uc_payment_method() {
  $path = base_path() . drupal_get_path('module', 'uc_everyday');
  $title = variable_get('uc_everyday_method_title', 'Everyday-verkkomaksu');
  $title .= '<div class="uc-everyday-icons"><img src="' . $path . _uc_everyday_banner() . '"></div>';
  drupal_add_css(drupal_get_path('module', 'uc_everyday') . '/uc_everyday.css');

  $methods[] = array(
    'id' => 'everyday',
    'name' => t('Everyday Online Payment'),
    'title' => $title,
    'review' => t('Everyday Online Payment'),
    'desc' => t('Redirect users to submit payments through Everyday Online Payment service'),
    'callback' => 'uc_payment_method_everyday',
    'redirect' => 'uc_everyday_form',
    'weight' => 3,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}


/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

/**
 * Add everyday settings to the payment method settings form.
 *
 * @see uc_everyday_uc_payment_method()
 */
function uc_payment_method_everyday($op, &$order, $form = NULL, &$form_state = NULL) {
  switch ($op) {

    case 'cart-process':
      if (isset($_SESSION['pay_method'])) {
        $_SESSION['pay_method'] = check_plain($_POST['pay_method']);
      }
      return;

    case 'cart-details':
      $build['payment_msg'] = array('#markup' => variable_get('uc_everyday_method_payment_msg', t('Continue with checkout. You are directed to Everyday secure server.')));
      return $build;

    case 'settings':
      form_load_include($form_state, 'inc', 'uc_everyday', 'uc_everyday.admin');
      return uc_everyday_settings_form($form, $form_state);
  }
}

/**
 * Form to build the submission to Everyday-verkkomaksu secure web page.
 */
function uc_everyday_form($form, &$form_state, $order) {

  $context = array(
    'revision' => 'formatted-original',
    'type' => 'order_total',
    'subject' => array(
      'order' => $order,
    ),
  );
  $options = array(
    'sign' => FALSE,
    'dec' => ',',
    'thou' => FALSE,
  );

  // Set merchant id and secret key (online / test usage).
  if (variable_get('uc_everyday_mode', '1') == '1') {
    $everyday_sellerid = variable_get('uc_everyday_test_sid', '5442');
    $everyday_secretkey = variable_get('uc_everyday_test_secret_key', 'NGNhODg0ZjA0NjYxNzllZmQxNWRhZA');
    $everyday_secretkey_version = variable_get('uc_everyday_test_secret_key_version', '1');
    drupal_set_message(t('Everyday Web Payment module is in test mode'));
  }
  else {
    $everyday_sellerid = variable_get('uc_everyday_sid', '');
    $everyday_secretkey = variable_get('uc_everyday_secret_key', '');
    $everyday_secretkey_version = variable_get('uc_everyday_secret_key_version', '');
  }

  // Timezone.
  date_default_timezone_set('Europe/Helsinki');

  // Data.
  $data = array(
    'OPR_VERSION' => '0004',
    'OPR_STAMP' => date("YmdHisu"),
    'OPR_RCV_ID' => $everyday_sellerid,
    'OPR_LANGUAGE' => 'fi_FI',
    'OPR_AMOUNT' => number_format($order->order_total, 2, ',', ''),
    'OPR_CUR' => 'EUR',
    'OPR_REF' => _uc_everyday_reference($order->order_id),
    'OPR_MSG' => '',
    'OPR_RETURN' => url('cart/everyday/complete/' . uc_cart_get_id() . '/' . $order->order_id, array('absolute' => TRUE)),
    'OPR_REJECT' => url('cart/everyday/reject', array('absolute' => TRUE)),
    'OPR_CANCEL' => url('cart/everyday/cancel', array('absolute' => TRUE)),
    'OPR_DATE' => '',
    'OPR_TYPE' => '',
  );

  // Calculate hash code.
  $hash_fields['secret_key'] = $everyday_secretkey;
  $hash_fields['version'] = $data['OPR_VERSION'];
  $hash_fields['stamp'] = $data['OPR_STAMP'];
  $hash_fields['sellerid'] = $data['OPR_RCV_ID'];
  $hash_fields['amount'] = $data['OPR_AMOUNT'];
  $hash_fields['reference'] = $data['OPR_REF'];
  $hash_fields['date'] = $data['OPR_DATE'];
  $hash_fields['currency'] = $data['OPR_CUR'];

  // Hash code.
  $data['OPR_MAC'] = strtoupper(md5(implode('&', $hash_fields) . '&'));
  $data['OPR_KEYVERS'] = $everyday_secretkey_version;

  // Form.
  $form['#action'] = _uc_everyday_post_url();

  foreach ($data as $name => $value) {
    $form[$name] = array('#type' => 'hidden', '#value' => $value);
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => variable_get('uc_everyday_checkout_button', t('Proceed to Everyday')),
  );

  return $form;
}


/*******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/

/**
 * Return url for posting data.
 */
function _uc_everyday_post_url() {
  $url = 'https://everyday.opr-vakuus.fi/maksu.php';

  return $url;
}

/**
 * Return path to banner image based on everyday service level.
 */
function _uc_everyday_banner() {
  $banner = '/images/everyday_logo_maksukortti.gif';

  return $banner;
}

/**
 * Returns reference to given reference number as used by Finnish banks.
 *
 * @param int $reference
 *   Reference number based on order id.
 *
 * @return string
 *   Reference (with check number) as used by Finnish banks.
 */
function _uc_everyday_reference($reference) {
  $tmp_multip = array(7, 3, 1);

  // Calculated sum for given reference.
  $reference_prefix = variable_get('uc_everyday_reference_prefix', '1000');
  $tmp_str = (string) $reference_prefix . $reference;
  $tmp_sum = 0;
  $tmp_index = 0;
  for ($i = strlen($tmp_str) - 1; $i >= 0; $i--) {
    $tmp_sum += intval(substr($tmp_str, $i, 1)) * intval($tmp_multip[$tmp_index % 3]);
    $tmp_index++;
  }

  // Nearest decimal number for calculated sum.
  $next_ten = ceil(intval($tmp_sum) / 10) * 10;

  // Return reference.
  return $tmp_str . (string) (abs($next_ten - $tmp_sum));
}
