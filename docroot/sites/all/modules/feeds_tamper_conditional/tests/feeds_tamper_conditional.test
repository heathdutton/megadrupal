<?php

/**
 * @file Unit tests for Feeds Tamper Conditional module.
 */

class FeedsTamperConditionalUnitTests extends FeedsTamperUnitTestCase {

	protected $plugin_id = 'feeds_tamper_conditional';

	// Initialise the callback arguments.
	protected $result;
	protected $item_key = 0;
	protected $element_key = 'filemakerfield:32';
	protected $field = '';
	protected $settings;

	public static function getInfo() {
		return array(
			'name' => 'Feeds Tamper Conditional',
			'description' => 'Unit tests for "Conditional" plugin',
			'group' => 'Feeds Tamper Conditional',
		);
	}

	public function test() {

		$this->result = new stdClass();
		$this->result->items = array(
		  array(
				'filemakerfield:32' => '',
			  'filemakerfield:27' => '',
			),
		);

		$this->settings = array(
			'conditional_field' => 'filemakerfield:27',
			'operator' => '',
			'value' => '',
		);

		// Test the 'equals' operator.
		// The value should be unchanged if the condition is met.
		$this->executeConditional('FirstName', 'Yes', 'Yes', 'equals');
		$this->assertTrue($this->result->items[0]['filemakerfield:32'] == 'FirstName', "Value retained when condition is met using 'Equals' operator");

		// The value should be blanked if the condition is not met.
		$this->executeConditional('FirstName', 'No', 'Yes', 'equals');
		$this->assertTrue($this->result->items[0]['filemakerfield:32'] == '', "Value blanked when condition is NOT met using 'Equals' operator");

		// Test the 'not equals' operator.
		// The value should be unchanged if the condition is met.
		$this->executeConditional('FirstName', 'No', 'Yes', 'not_equals');
		$this->assertTrue($this->result->items[0]['filemakerfield:32'] == 'FirstName', "Value retained when condition is met using 'Not Equals' operator");

		// The value should be blanked if the condition is not met.
		$this->executeConditional('FirstName', 'Yes', 'Yes', 'not_equals');
		$this->assertTrue($this->result->items[0]['filemakerfield:32'] == '', "Value blanked when condition is NOT met using 'Not Equals' operator");

		// Test the 'greater' operator.
		// The value should be unchanged if the condition is met.
		$this->executeConditional('FirstName', '6', '5', 'greater');
		$this->assertTrue($this->result->items[0]['filemakerfield:32'] == 'FirstName', "Value retained when condition is met using 'Greater than' operator");

		// The value should be blanked if the condition is not met.
		$this->executeConditional('FirstName', '4', '5', 'greater');
		$this->assertTrue($this->result->items[0]['filemakerfield:32'] == '', "Value blanked when condition is NOT met using 'Greater than' operator");

		// Test the 'greater or equal' operator.
		// The value should be unchanged if the condition is met.
		$this->executeConditional('FirstName', '5', '5', 'greater_equal');
		$this->assertTrue($this->result->items[0]['filemakerfield:32'] == 'FirstName', "Value retained when condition is met using 'Greater than or equal to' operator");

		// The value should be blanked if the condition is not met.
		$this->executeConditional('FirstName', '4', '5', 'greater_equal');
		$this->assertTrue($this->result->items[0]['filemakerfield:32'] == '', "Value blanked when condition is NOT met using 'Greater than or equal' operator");

		// Test the 'less than' operator.
		// The value should be unchanged if the condition is met.
		$this->executeConditional('FirstName', '4', '5', 'less');
		$this->assertTrue($this->result->items[0]['filemakerfield:32'] == 'FirstName', "Value retained when condition is met using 'Less than' operator");

		// The value should be blanked if the condition is not met.
		$this->executeConditional('FirstName', '6', '5', 'less');
		$this->assertTrue($this->result->items[0]['filemakerfield:32'] == '', "Value blanked when condition is NOT met using 'Less than or equals' operator");

		// Test the 'less than or equal' operator.
		// The value should be unchanged if the condition is met.
		$this->executeConditional('FirstName', '5', '5', 'less_equal');
		$this->assertTrue($this->result->items[0]['filemakerfield:32'] == 'FirstName', "Value retained when condition is met using 'Less than' operator");

		// The value should be blanked if the condition is not met.
		$this->executeConditional('FirstName', '6', '5', 'less_equal');
		$this->assertTrue($this->result->items[0]['filemakerfield:32'] == '', "Value blanked when condition is NOT met using 'Less than or equals' operator");

		// Test the 'contains' operator.
		// The value should be unchanged if the condition is met.
		$this->executeConditional('FirstName', 'Yes', 'YES', 'contains');
		$this->assertTrue($this->result->items[0]['filemakerfield:32'] == 'FirstName', "Value retained when condition is met using 'Contains' operator");

		// Extra test to see if partial string works
		$this->executeConditional('FirstName', 'Yes', 'es', 'contains');
		$this->assertTrue($this->result->items[0]['filemakerfield:32'] == 'FirstName', "Value retained when condition is met using 'Contains' operator and partial string");

		// The value should be blanked if the condition is not met.
		$this->executeConditional('FirstName', 'Yes', 'no', 'contains');
		$this->assertTrue($this->result->items[0]['filemakerfield:32'] == '', "Value blanked when condition is NOT met using 'Contains' operator");

		// Test the 'not contains' operator.
		// The value should be unchanged if the condition is met.
		$this->executeConditional('FirstName', 'Yes', 'no', 'not_contains');
		$this->assertTrue($this->result->items[0]['filemakerfield:32'] == 'FirstName', "Value retained when condition is met using 'Contains' operator");

		// The value should be blanked if the condition is not met.
		$this->executeConditional('FirstName', 'Yes', 'YES', 'not_contains');
		$this->assertTrue($this->result->items[0]['filemakerfield:32'] == '', "Value blanked when condition is NOT met using 'Contains' operator");

		// Extra test for partial string
		$this->executeConditional('FirstName', 'Yes', 'es', 'not_contains');
		$this->assertTrue($this->result->items[0]['filemakerfield:32'] == '', "Value blanked when condition is NOT met using 'Contains' operator and partial string");
	}

	function executeConditional($main_field_value, $field_value_to_compare, $setting_value_to_compare, $operator) {
		$this->result->items[$this->item_key]['filemakerfield:32'] = $main_field_value;
		$this->result->items[$this->item_key]['filemakerfield:27'] = $field_value_to_compare;
    $this->settings['value'] = $setting_value_to_compare;
    $this->settings['operator'] = $operator;

		$this->callback($this->result, $this->item_key, $this->element_key, $field, $this->settings);
	}
}