<?php

/**
 * @file
 * Module file for LogIO Harvester
 */

define('LOGIO_HARVESTER_DEFAULT_FORMAT', '!base_url|!timestamp|!type|!ip|!request_uri|!referer|!uid|!link|!message');
define('LOGIO_HARVESTER_LOG_TYPE', 'logio');
define('LOGIO_HARVESTER_DEFAULT_PORT', 28777);

/**
 * Implements hook_form_alter().
 */
function logio_harvester_form_system_logging_settings_alter(&$form, &$form_state) {
  $form['logio_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('LogIO Settings'),
    '#description' => t('Configure your logging settings for LogIO.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#access' => user_access('administer site configuration'),
  );

  $form['logio_settings']['logio_harvester_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable'),
    '#default_value' => isset($form_state['values']['logio_harvester_enable']) ? $form_state['values']['logio_harvester_enable'] : variable_get('logio_harvester_enable', FALSE),
  );
  

  $form['logio_settings']['logio_harvester_format'] = array(
    '#type' => 'textfield',
    '#title' => t('Log Pattern'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => isset($form_state['values']['logio_harvester_format']) ? $form_state['values']['logio_harvester_format'] : variable_get('logio_harvester_format', LOGIO_HARVESTER_DEFAULT_FORMAT),
    '#description' => t('Specify the format of the log entry. Available variables are: <dl><dt><code>!base_url</code></dt><dd>Base URL of the site.</dd><dt><code>!timestamp</code></dt><dd>Unix timestamp of the log entry.</dd><dt><code>!type</code></dt><dd>The category to which this message belongs.</dd><dt><code>!ip</code></dt><dd>IP address of the user triggering the message.</dd><dt><code>!request_uri</code></dt><dd>The requested URI.</dd><dt><code>!referer</code></dt><dd>HTTP Referer if available.</dd><dt><code>!uid</code></dt><dd>User ID.</dd><dt><code>!link</code></dt><dd>A link to associate with the message.</dd><dt><code>!message</code></dt><dd>The message to store in the log.</dd></dl>'),
  );

  $form['logio_settings']['logio_harvester_nodename'] = array(
    '#type' => 'textfield',
    '#title' => t('Node Name'),
    '#description' => t('The node name which appears in the logger.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => isset($form_state['values']['logio_harvester_nodename']) ? $form_state['values']['logio_harvester_nodename'] : variable_get('logio_harvester_nodename', variable_get('site_name', 'Drupal')),
  );

  $form['logio_settings']['logio_harvester_server'] = array(
    '#type' => 'textfield',
    '#title' => t('Server'),
    '#description' => t('The server host name or IP address.'),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => isset($form_state['values']['logio_harvester_server']) ? $form_state['values']['logio_harvester_server'] : variable_get('logio_harvester_server', '0.0.0.0'),
  );

  $form['logio_settings']['logio_harvester_port'] = array(
    '#type' => 'textfield',
    '#title' => t('Port'),
    '#description' => t('The server port.'),
    '#size' => 10,
    '#maxlength' => 10,
    '#default_value' => isset($form_state['values']['logio_harvester_port']) ? $form_state['values']['logio_harvester_port'] : variable_get('logio_harvester_port', LOGIO_HARVESTER_DEFAULT_PORT),
  );

  $form['logio_settings']['logio_harvester_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Debug Mode'),
    '#description' => t('Log connection and debug information. <em>Note that these log entries will <strong>not</strong> appear in the LogIO logs.</em>'),
    '#default_value' => isset($form_state['values']['logio_harvester_debug']) ? $form_state['values']['logio_harvester_debug'] : variable_get('logio_harvester_debug', FALSE),
  );
}

/**
 * Implements hook_watchdog().
 */
function logio_harvester_watchdog(array$log_entry) {
  // Avoid sending log messages regarding issues with logio to avoid infinite loops
  // Only log when logging is enabled
  if ($log_entry['type'] != LOGIO_HARVESTER_LOG_TYPE and variable_get('logio_harvester_format', FALSE)) {
    $harvester = logio_harvester_connect();

    if ($harvester) {
      $harvester->sendLog($log_entry);
    }
  }
}

/**
 * Get a connected harvester object.
 */
function logio_harvester_connect() {
  $harvester = &drupal_static(__FUNCTION__);

  if (!isset($harvester)) {
    $config = logio_harvester_config();
    $harvester = new LogHarvester($config);
  }

  return $harvester;
}

/**
 * Generate configuration array
 */
function logio_harvester_config() {
  return array(
    'nodeName' => variable_get('logio_harvester_nodename', 'Drupal'),
    'server' => variable_get('logio_harvester_server', '0.0.0.0'),
    'port' => variable_get('logio_harvester_port', LOGIO_HARVESTER_DEFAULT_PORT),
  );
}

class LogHarvester {
  private $socket;
  private $config;
  private $delim = "\r\n";

  /**
   * Public constructor
   *
   * @param array $config
   *  Configuration options
   */
  public function __construct($config) {
    $this->config = $config;
    $this->connect();
    //$this->announce();
    // Debug logging
    if (variable_get('logio_harvester_debug', FALSE)) {
      watchdog(LOGIO_HARVESTER_LOG_TYPE, 'Create harvester object', array(), WATCHDOG_DEBUG);
    }
  }

  /**
   * Disconnect the socket
   */
  public function __destruct() {
    @fclose($this->socket);

    // Debug logging
    if (variable_get('logio_harvester_debug', FALSE)) {
      watchdog(LOGIO_HARVESTER_LOG_TYPE, 'Destroy object and close socket', array(), WATCHDOG_DEBUG);
    }
  }

  /**
   * Connect to the logio server
   */
  private function connect() {
    $this->socket = @pfsockopen('tcp://' . $this->config['server'], $this->config['port']);

    if (FALSE == $this->socket) {
      watchdog(LOGIO_HARVESTER_LOG_TYPE, 'Unable to open socket connection using @connect', array('@connect' => 'tcp://' . $this->config['server'] . ':' . $this->config['port']), WATCHDOG_ERROR);
    }
    else {
      // Debug logging
      if (variable_get('logio_harvester_debug', FALSE)) {
        watchdog(LOGIO_HARVESTER_LOG_TYPE, 'Connected using @connect', array('@connect' => 'tcp://' . $this->config['server'] . ':' . $this->config['port']), WATCHDOG_DEBUG);
      }
    }

    // Debug logging
    if (variable_get('logio_harvester_debug', FALSE)) {
      watchdog(LOGIO_HARVESTER_LOG_TYPE, 'Attempted to connect socket using @connect', array('@connect' => 'tcp://' . $this->config['server'] . ':' . $this->config['port']), WATCHDOG_DEBUG);
    }
  }

  /**
   * Send a log message
   *
   * @param array $message
   *  Log message components from hook_watchdog().
   */
  public function sendLog($message) {
    // Avoid sending log messages regarding issues with logio to avoid infinite loops
    if ($message['type'] != LOGIO_HARVESTER_LOG_TYPE) {
      // Prepare the log message format
      $logentry   = array();
      $logentry[] = $message['type'];
      $logentry[] = $this->config['nodeName'];
      $logentry[] = $this->logLevel($message['severity']);
      $logentry[] = $this->logMessage($message);
      $this->send("+log", $logentry);
    }

    // Debug logging
    if (variable_get('logio_harvester_debug', FALSE)) {
      watchdog(LOGIO_HARVESTER_LOG_TYPE, 'sendLog called', array(), WATCHDOG_DEBUG);
    }
  }

  /**
   * Announce the log node to the server
   */
  private function announce() {
    $this->send('+node', array($this->config['nodeName']));
    $this->send('+bind', array('node', $this->config['nodeName']));

    // Debug logging
    if (variable_get('logio_harvester_debug', FALSE)) {
      watchdog(LOGIO_HARVESTER_LOG_TYPE, 'announce called', array(), WATCHDOG_DEBUG);
    }
  }

  /**
   * Send the message through the socket
   *
   * @param string $type
   *  The type of message (i.e. +node, +log, -node)
   * @param array $message
   *  The message parts
   */
  private function send($type, $message) {
    $message = implode('|', $message) . $this->delim;

    if ($this->socket) {
      fwrite($this->socket, "$type|$message");
    }
    else {
      watchdog(LOGIO_HARVESTER_LOG_TYPE, 'Unable to send log message: @message', array('@message' => "$type|$message"), WATCHDOG_ERROR);
    }

    // Debug logging
    if (variable_get('logio_harvester_debug', FALSE)) {
      watchdog(LOGIO_HARVESTER_LOG_TYPE, 'send message called: @message', array('@message' => "$type|$message"), WATCHDOG_DEBUG);
    }
  }

  /**
   * Convert watchdog constants to log levels
   *
   * @param int $severity
   *  Int value for one of Drupal's watchdog constants (i.e. WATCHDOG_INFO)
   */
  private function logLevel($severity) {
    switch ($severity) {
      case WATCHDOG_EMERGENCY:
        return 'emergency';

      case WATCHDOG_ALERT:
        return 'alert';

      case WATCHDOG_CRITICAL:
        return 'critical';

      case WATCHDOG_ERROR:
        return 'error';

      case WATCHDOG_WARNING:
        return 'warning';

      case WATCHDOG_INFO:
        return 'info';

      case WATCHDOG_DEBUG:
        return 'debug';

      case WATCHDOG_NOTICE:
      default:
        return 'notice';
    }
  }

  /**
   * Formates the log message
   *
   * @param array $log_entry
   *  Log entry array from hook_watchdog().
   */
  private function logMessage($log_entry) {
    global $base_url;
    $message = strtr(variable_get('logio_harvester_format', LOGIO_HARVESTER_DEFAULT_FORMAT), array(
        '!base_url' => $base_url,
        '!timestamp' => $log_entry['timestamp'],
        '!type' => $log_entry['type'],
        '!ip' => $log_entry['ip'],
        '!request_uri' => $log_entry['request_uri'],
        '!referer' => $log_entry['referer'],
        '!uid' => $log_entry['uid'],
        '!link' => strip_tags($log_entry['link']),
        '!message' => strip_tags(!isset($log_entry['variables']) ? $log_entry['message'] : strtr($log_entry['message'], $log_entry['variables'])),
      ));

    return $message;
  }
}

