<?php
/**
 * @file
 * OG Entityform module
 */

define('OG_ENTITYFORM_AUDIENCE_FIELD', 'og_entityform_group_ref');

/**
 * Implements hook_form_FORM_ID_alter().
 */
function og_entityform_form_entityform_type_form_alter(&$form, &$form_state, $form_id) {
  $entityform_type = $form['#entityform_type']->type;

  $form['og_entityform'] = array(
    '#type' => 'fieldset',
    '#group' => 'additional_settings',
    '#title' => t('Organic groups'),
    '#weight' => 150,
    '#description' => t('Specify how Organic Groups should integrate with this Entityform Type.'),
    '#tree' => TRUE,
  );
  $url = array('!url' => l(t('Manage fields'), 'admin/structure/entityform_types/manage/' . $entityform_type . '/fields'));

  $is_group_content = og_is_group_content_type('entityform', $entityform_type);

  $description = t('Allow submissions to this form to be group content, that can be associated with groups.');
  if ($is_group_content) {
    $description .= '<br/>' . t('To unset the group content definition or change the settings you should delete the "Groups audience" field via !url.', $url);
  }
  $group_content_options = og_get_all_group_entity();
  if (!$group_content_options) {
    $description .= '<br/>' . t('There are no group bundles defined.');
  }

  $form['og_entityform']['group_content_type'] = array(
    '#type' => 'checkbox',
    '#title' => t('Group content'),
    '#default_value' =>  $is_group_content,
    '#description' => $description,
    '#disabled' => !$group_content_options || $is_group_content,
  );

  $default_target_type = key($group_content_options);
  $default_bundles = array();
  $field_exists = FALSE;
  $og_content_field = field_info_field(OG_ENTITYFORM_AUDIENCE_FIELD);

  if (!empty($og_content_field)) {
    if (!empty($og_content_field['settings']['target_type'])) {
      $default_target_type = $og_content_field['settings']['target_type'];
    }
    if (!empty($og_content_field['settings']['handler_settings']['target_bundles'])) {
      $default_bundles = $og_content_field['settings']['handler_settings']['target_bundles'];
    }
    $field_exists = TRUE;
  }

  if ($group_content_options) {
    // Don't show the settings, as there might be multiple OG audience fields
    // in the same bundle.
    $form['og_entityform']['target_type'] = array(
      '#type' => 'select',
      '#title' => t('Target type'),
      '#options' => $group_content_options,
      '#default_value' => $default_target_type,
      '#description' => t('The entity type that can be referenced thru this field.'),
      '#ajax' => array(
        'callback' => 'og_entityform_entityform_type_form_settings',
        'wrapper' => 'og-settings-wrapper',
      ),
      '#states' => array(
        'visible' => array(
          ':input[name="og_entityform[group_content_type]"]' => array('checked' => TRUE),
        ),
      ),
      '#disabled' => $field_exists,
    );

    $target_type = !empty($form_state['values']['target_type']) ? $form_state['values']['target_type'] : key($group_content_options);
    $entity_info = entity_get_info($target_type);
    $bundles = array();
    foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
      if (og_is_group_type($target_type, $bundle_name)) {
        $bundles[$bundle_name] = $bundle_info['label'];
      }
    }

    // Get the bundles that are acting as group.
    $form['og_entityform']['target_bundles'] = array(
      '#prefix' => '<div id="og-settings-wrapper">',
      '#suffix' => '</div>',
      '#type' => 'select',
      '#title' => t('Target bundles'),
      '#options' => $bundles,
      '#default_value' => $default_bundles,
      '#size' => 6,
      '#multiple' => TRUE,
      '#description' => t('The bundles of the entity type that can be referenced. Optional, leave empty for all bundles.'),
      '#states' => array(
        'visible' => array(
          ':input[name="og_entityform[group_content_type]"]' => array('checked' => TRUE),
        ),
      ),
      '#disabled' => $field_exists,
    );

    $form['og_entityform']['menu_tab'] = array(
      '#type' => 'checkbox',
      '#title' => t('Add tab to group entity page with this form'),
      '#default_value' => $field_exists && !empty($form['#entityform_type']->data['og_entityform_menu_tab']) ? TRUE : FALSE,
      '#states' => array(
        'visible' => array(
          ':input[name="og_entityform[group_content_type]"]' => array('checked' => TRUE),
        ),
        'required' => array(
          ':input[name="og_entityform[group_content_type]"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['og_entityform']['menu_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Tab title'),
      '#default_value' => $field_exists && !empty($form['#entityform_type']->data['og_entityform_menu_title']) ? $form['#entityform_type']->data['og_entityform_menu_title'] : NULL,
      '#states' => array(
        'visible' => array(
          ':input[name="og_entityform[menu_tab]"]' => array('checked' => TRUE),
          ':input[name="og_entityform[group_content_type]"]' => array('checked' => TRUE),
        ),
        'required' => array(
          ':input[name="og_entityform[menu_tab]"]' => array('checked' => TRUE),
          ':input[name="og_entityform[group_content_type]"]' => array('checked' => TRUE),
        ),
      ),
    );

  }
}

/**
 * AJAX callback to attach the message type fields to the form.
 *
 * Since the controlling logic for populating the form is in the form builder
 * function, all we do here is select the element and return it to be updated.
 */
function og_entityform_entityform_type_form_settings(array $form, array &$form_state) {
  return $form['og_entityform']['target_bundles'];
}

/**
 * Implements hook_entity_insert().
 */
function og_entityform_entity_insert($entity, $type) {
  if ($type == 'entityform_type') {
    og_entityform_entityform_type_save($entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function og_entityform_entity_update($entity, $type) {
  if ($type == 'entityform_type') {
    og_entityform_entityform_type_save($entity);
  }
}

/**
 * Implements hook_field_delete_instance()
 */
function og_entityform_field_delete_instance($instance) {
  if ($instance['field_name'] == OG_ENTITYFORM_AUDIENCE_FIELD) {
    // Rebuild menu so that any form tabs will be removed
    menu_rebuild();
  }
}

/**
 * Add group and group content fields to new content types.
 *
 * @param $bundle_name
 *   The content type name.
 */
function og_entityform_entityform_type_save($entityform_type) {
  if (!empty($entityform_type->og_entityform)) {
    if (!empty($entityform_type->og_entityform['group_content_type'])) {
      $og_field = og_fields_info(OG_ENTITYFORM_AUDIENCE_FIELD);
      $og_field['field']['target_type'] = $entityform_type->og_entityform['target_type'];
      $og_field['field']['settings']['handler'] = 'og_entityform';
      $og_field['field']['settings']['handler_settings']['target_bundles'] = $entityform_type->og_entityform['target_bundles'];
      $og_field['instance']['settings']['behaviors']['prepopulate'] = array(
        'status' => 1,
        'action' => 'hide',
        'action_on_edit' => 0,
        'fallback' => 'form_error',
        'skip_perm' => 0,
        'providers' => array(
          'og_context' => 1,
          'url' => 1,
        ),
      );
      og_create_field(OG_ENTITYFORM_AUDIENCE_FIELD, 'entityform', $entityform_type->type, $og_field);
      // Turn on og_entityform og_context negotiation
      $og_context_negotiation_group_context = variable_get('og_context_negotiation_group_context', array());
      $og_context_negotiation_group_context['og_entityform'] = array();
      variable_set('og_context_negotiation_group_context', $og_context_negotiation_group_context);
    }
    $entityform_type->data['og_entityform_menu_tab'] = $entityform_type->og_entityform['menu_tab'];
    $entityform_type->data['og_entityform_menu_title'] = $entityform_type->og_entityform['menu_title'];
    // Delete the data, as we will rely on the presence of the field.
    unset($entityform_type->og_entityform);
    entityform_type_save($entityform_type);
    menu_rebuild();
  }
}

/**
 * Implements hook_og_fields_info().
 */
function og_entityform_og_fields_info() {
  $items = array();
  $items[OG_ENTITYFORM_AUDIENCE_FIELD] = array(
    'multiple' => TRUE,
    'type' => array('group content'),
    'description' => t('Determine to which groups this group content is assigned to.'),
    'field' => array(
      'field_name' => OG_AUDIENCE_FIELD,
      'type' => 'entityreference',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
        'handler' => 'og',
        'handler_submit' => 'Change handler',
        'handler_settings' => array(
          'behaviors' => array(
            'og_behavior' => array(
              'status' => TRUE,
            ),
          ),
          'target_bundles' => array(),
          'membership_type' => OG_MEMBERSHIP_TYPE_DEFAULT,
        ),
        'target_type' => 'node',
      ),
    ),
    'instance' => array(
      'label' => t('Groups audience'),
      'widget' => array(
        'type' => 'og_complex',
        'module' => 'og',
        'settings' => array(),
      ),
      'settings' => array(
        'behaviors' => array(
          'og_widget' => array(
            'status' => TRUE,
            'default' => array(
              'widget_type' => 'options_select',
            ),
            'admin' => array(
              'widget_type' => 'entityreference_autocomplete',
            ),
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'type' => 'hidden',
          'custom settings' => FALSE,
        ),
        'email' => array(
          'label' => t('Email'),
          'type' => 'og_list_default',
          'custom settings' => TRUE,
        ),
        'confirmation' => array(
          'label' => t('Confirmation'),
          'type' => 'hidden',
          'custom settings' => FALSE,
        ),
        'download' => array(
          'label' => t('Download'),
          'type' => 'og_list_default',
          'custom settings' => TRUE,
        ),
        'table' => array(
          'label' => t('Submissions Table'),
          'type' => 'og_list_default',
          'custom settings' => TRUE,
        ),
        'review' => array(
          'label' => t('Review'),
          'type' => 'hidden',
          'custom settings' => FALSE,
        ),
      ),
    ),
  );
  return $items;
}

/**
 * Implements hook_og_permission().
 */
function og_entityform_og_permission() {
  return array(
    'view og entityforms list' => array(
      'title' => t('View the Forms tab'),
      'description' => t("Allow user to view the group's list of Forms."),
    ),
    'view og entityforms' => array(
      'title' => t('View group forms'),
      'description' => t("Allow user to view the group's forms."),
    ),
    'view og entityform submissions' => array(
      'title' => t('View all group form submissions'),
      'description' => t("Allow user to view the submissions to the group's forms."),
      'restrict access' => TRUE,
    ),
    'edit og entityform submissions' => array(
      'title' => t('Edit all group form submissions'),
      'description' => t("Allow user to edit the submissions to the group's forms."),
      'restrict access' => TRUE,
    ),
    'delete og entityform submissions' => array(
      'title' => t('Delete all group form submissions'),
      'description' => t("Allow user to delete the submissions to the group's forms."),
      'restrict access' => TRUE,
    ),
    'receive og entityform notifications' => array(
      'title' => t('Receive notifications for group form submissions'),
      'description' => t("Receive notifications when entityforms are submitted to this group. Note: This requires rules configuration."),
      'restrict access' => TRUE,
    )
  );
}

/**
 * Implements hook_menu().
 */
function og_entityform_menu() {
  $items = array();

  foreach (og_get_all_group_entity() as $entity_type => $value) {
    if ($entity_type == 'taxonomy_term') {
      $path = 'taxonomy/term/%/eform';
      $argument = 2;
    }
    else {
      $path = "$entity_type/%/eform";
      $argument = 1;
    }

    $admin_path = "group/$entity_type/%/eform";
    $admin_argument = 2;

    $items[$path] = array(
      'title' => 'Forms',
      'page callback' => 'og_entityform_forms_list',
      'page arguments' => array($entity_type, $argument),
      'access callback' => 'og_user_access',
      'access arguments' => array($entity_type, $argument, 'view og entityforms list'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'og_entityform.pages.inc',
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    );

    $entityform_type_argument = $argument + 3;
    $items[$path . '/%/%entityform_empty'] = array(
      'title callback' => 'entityform_page_title',
      'title arguments' => array($entityform_type_argument, $entityform_type_argument - 1),
      'page callback' => 'entityform_form_wrapper',
      'page arguments' => array($entityform_type_argument, $entityform_type_argument - 1),
      'access callback' => 'og_user_access',
      'access arguments' => array($entity_type, $argument, 'view og entityforms'),
      'file' => 'entityform.admin.inc',
      'file path' => drupal_get_path('module', 'entityform'),
      'type' => MENU_CALLBACK,
    );

    $items[$path . '/confirm/%entityform_type'] = array(
      'title callback' => 'entityform_page_title',
      'title arguments' => array($entityform_type_argument, $entityform_type_argument - 1),
      'page callback' => 'entityform_confirm_page',
      'page arguments' => array($entityform_type_argument),
      'access callback' => 'og_user_access',
      'access arguments' => array($entity_type, $argument, 'view og entityforms'),
      'type' => MENU_CALLBACK,
    );

    $items[$admin_path] = array(
      'title' => 'Forms',
      'description' => t('View the group forms and submissions.'),
      'page callback' => 'og_entityform_admin_forms_list',
      'page arguments' => array($entity_type, $admin_argument),
      'access callback' => 'og_user_access',
      'access arguments' => array($entity_type, $admin_argument, 'view og entityforms submissions'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'og_entityform.admin.inc',
    );

    $items['group/%/%/admin/eform'] = array(
      'title' => 'Forms',
      'description' => t('View the group forms and submissions.'),
      'page callback' => 'og_entityform_admin_forms_list',
      'page arguments' => array(1, 2),
      'access callback' => 'og_user_access',
      'access arguments' => array(1, 2, 'view og entityform submissions'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'og_entityform.admin.inc',

    );

    // Add tabs for forms that are supposed to be on their own tab.
    $entityform_types = entityform_get_types();
    foreach ($entityform_types as $entityform_type) {
      $is_group_content = og_is_group_content_type('entityform', $entityform_type->type);
      if ($is_group_content && !empty($entityform_type->data['og_entityform_menu_tab'])) {
        $items[$path . '-' . $entityform_type->type] = array(
          'title' => $entityform_type->data['og_entityform_menu_title'],
          'page callback' => 'og_entityform_form_wrapper',
          'page arguments' => array($entity_type, $argument, $argument + 1),
          'access callback' => 'og_user_access',
          'access arguments' => array($entity_type, $argument, 'view og entityforms'),
          'file' => 'og_entityform.pages.inc',
          'type' => MENU_LOCAL_TASK,
        );
      }
    }

  }


  return $items;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function og_entityform_entity_property_info_alter(&$info) {
  $info['entityform']['properties']['og_entityform_notification_recipients'] = array(
    'label' => t("OG Entityform Notification Recipients"),
    'type' => 'list<user>',
    'description' => t("A list of all the recipient users for groups that this entityform is posted to."),
    'getter callback' => 'og_entityform_get_notification_recipients',
    'computed' => TRUE,
  );
}

/**
 * Retrieve the groups an entityform is group content for.
 *
 * @param object $entityform
 *
 * @return array
 */
function og_entityform_get_groups_for_entityform($entityform) {
  $groups = array();
  $wrapper = entity_metadata_wrapper('entityform', $entityform);
  if (isset($wrapper->{OG_ENTITYFORM_AUDIENCE_FIELD})) {
    $all_groups = $wrapper->{OG_ENTITYFORM_AUDIENCE_FIELD}->value();
    if (!empty($all_groups)) {
      foreach ($wrapper->{OG_ENTITYFORM_AUDIENCE_FIELD} as $group) {
        $groups[$group->type()][$group->getIdentifier()] = $group->value();
      }
    }
  }
  return $groups;
}

/**
 * Retrieve a list of users who should be notified for a given entityform
 * submission.
 *
 * @param object $entityform
 *
 * @return array
 */
function og_entityform_get_notification_recipients($entityform) {
  $recipients = array();
  $wrapper = entity_metadata_wrapper('entityform', $entityform);
  $groups = $wrapper->{OG_ENTITYFORM_AUDIENCE_FIELD}->value();
  
  if (!empty($groups)) {
    if (is_array($groups)) {
      foreach ($wrapper->{OG_ENTITYFORM_AUDIENCE_FIELD} as $group) {
        $recipients = array_merge($recipients, og_entityform_get_members_with_permission($group->type(), $group->getIdentifier(), 'receive og entityform notifications'));
      }
    }
    else {
      $group = $wrapper->{OG_ENTITYFORM_AUDIENCE_FIELD};
      $recipients = array_merge($recipients, og_entityform_get_members_with_permission($group->type(), $group->getIdentifier(), 'receive og entityform notifications'));
    }
  }
  
  return $recipients;
}

/**
 * Retrieve a list of group members with a specific group-level permission.
 *
 * @param string $group_type
 * @param int $gid
 * @param string $perm
 *
 * @return array
 */
function og_entityform_get_members_with_permission($group_type, $gid, $perm) {
  $privileged_members = array();
  $group = entity_metadata_wrapper($group_type, $gid);
  $roles = og_roles($group->type(), $group->getBundle(), $group->getIdentifier());
  $role_permissions = og_role_permissions($roles);
  $privileged_roles = array();
  foreach ($role_permissions as $rid => $permissions) {
    if (!empty($permissions[$perm])) {
      $privileged_roles[$rid] = $rid;
    }
  }
  if (!empty($privileged_roles)) {
    // Get the group members the group content belongs to.
    $query = db_select('og_users_roles', 'our');
    $query->join('users', 'u', 'our.uid = u.uid');
    $query->join('og_membership', 'ogm', "ogm.group_type = our.group_type AND ogm.gid = ogm.gid AND ogm.entity_type = 'user' AND ogm.etid = u.uid");
    $members = $query->fields('u', array('uid'))
      ->condition('our.gid', $group->getIdentifier())
      ->condition('our.group_type', $group->type())
      ->condition('our.rid', $privileged_roles, 'IN')
      ->condition('u.status', 1)
      ->condition('ogm.state', OG_STATE_ACTIVE)
      ->execute()
      ->fetchCol();
    foreach ($members as $uid) {
      $privileged_members[$uid] = user_load($uid);
    }
  }
  return $privileged_members;
}

/**
 * Implements hook_og_context_negotiation_info().
 */
function og_entityform_og_context_negotiation_info() {
  $providers = array();

  $menu_paths = array();
  foreach (og_get_all_group_entity() as $entity_type => $value) {
    if ($entity_type == 'taxonomy_term') {
      $menu_paths[] = 'taxonomy/term/%/eform/%/%';
    }
    else {
      $menu_paths[] = "$entity_type/%/eform/%/%";
    }

    $entityform_types = entityform_get_types();
    foreach ($entityform_types as $entityform_type) {
      $is_group_content = og_is_group_content_type('entityform', $entityform_type->type);
      if ($is_group_content && !empty($entityform_type->data['og_entityform_menu_tab'])) {
        $menu_paths[] = "$entity_type/%/eform-" . $entityform_type->type;
      }
    }

  }

  $providers['og_entityform'] = array(
    'name' => t('OG Entityform'),
    'description' => t("Determine context by checking group form URL."),
    'callback' => 'og_entityform_og_context_handler',
    // Invoke the context handler only on the following path.
    'menu path' => $menu_paths,
  );

  return $providers;
}

/**
 * Determine group context for an OG Entityform page.
 *
 * @return array
 */
function og_entityform_og_context_handler() {
  $context = array();
  $args = arg();
  foreach ($args as $i => $arg) {
    if ($i > 1 && ($arg == 'eform' || preg_match('/eform-(.*)$/', $arg))){
      $group_type = $args[$i - 2];
      $gid = $args[$i - 1];
      $context[$group_type][] = $gid;
    }
  }
  return $context;
}

/**
 * Implements hook_og_ui_get_group_admin().
 */
function og_entityform_og_ui_get_group_admin() {
  $items = array();
  $items['og_entityform'] = array(
    'title' => t('Forms'),
    'description' => t('View the group forms and submissions.'),
    // The final URL will be "group/$entity_type/$etid/admin/people/add-user".
    'href' => 'admin/eform',
  );

  return $items;
}

/**
 * Alter existing group admin menu items.
 *
 * @param $data
 *   The menu items passed by reference.
 * @param $gid
 *   The group being viewed.
 */
function og_entityform_og_ui_get_group_admin_alter(&$data, $context) {
  if (!og_ui_user_access_group('og_entityform', $context['entity_type'], $context['etid'])) {
    unset($data['og_entityform']);
  }
}


/**
 * Implments hook_entityform_access_alter().
 */
function og_entityform_entityform_access_alter(&$access, $op, $context) {
  $entityform = $context['entityform'];

  if (in_array($op, array('view', 'edit', 'delete')) && empty($entityform->draft)) {
    $all_groups = og_entityform_get_groups_for_entityform($entityform);
    if (!empty($all_groups)) {
      foreach ($all_groups as $group_type => $groups) {
        foreach ($groups as $gid => $group) {
          if (og_user_access($group_type, $gid, "$op og entityform submissions")) {
            $access = TRUE;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_views_api().
 */
function og_entityform_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'og_entityform') . '/views',
  );
}


/**
 * Implements hook_ctools_plugin_directory().
 */
function og_entityform_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference') {
    return "plugins/entityreference/$plugin";
  }
}

function og_entityform_get_group_forms() {
  return db_query("SELECT bundle FROM {field_config_instance} WHERE field_name = :field_name AND entity_type = 'entityform'",
    array(':field_name' => OG_ENTITYFORM_AUDIENCE_FIELD))->fetchCol();
}
