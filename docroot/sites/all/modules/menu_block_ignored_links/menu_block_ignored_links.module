<?php

/**
 * @file
 * Used to hide some links from a menu block.
 */

/**
 * Implements hook_help().
 */
function menu_block_ignored_links_help($path, $arg) {
  if (module_exists('help')) {
    $output = '';
    switch ($path) {
      case 'admin/structure/block/manage/%/%':
        if ($arg[4] != 'menu_block') {
          break;
        }
      case 'admin/structure/block/add-menu-block':
        $output = '<p>' . t('To learn more about configuring ignored link in menu blocks, see <a href="!url">menu block’s ignored links detailed help</a>.', array('!url' => url('admin/help/menu_block_ignored_links'))) . '</p>';

        break;

      case 'admin/help#menu_block_ignored_links':
        $output .= '<h3>' . t('Ignore links in menu blocks') . '</h3>';
        $output .= '<dl>';
        $output .= '<dt><strong>' . t('Create a menu block') . '</strong></dt>';
        $output .= '<dd><p>' . t('To learn more about configuring menu blocks, see <a href="!url">menu block’s detailed help</a>.', array('!url' => url('admin/help/menu_block'))) . '</p></dd>';
        $output .= '<dt><strong>' . t('Add menu block ignored links') . '</strong></dt>';
        $output .= '<dd>';
        $output .= '<ol>';
        $output .= '<li><p>' . t('Create a menu block.') . '</p></li>';
        $output .= '<li><p>' . t('Save it and go back to your block.') . '</p></li>';
        $output .= '<li><p>' . t('You will see in the block configuration a new select field called Ignored.') . '</p></li>';
        $output .= '<li><p>' . t('Choose the links to hide, (of course the links must be part of the chosen menu).') . '</p></li>';
        $output .= '<li><p>' . t('Save, and appreciate the magic!') . '</p></li>';
        $output .= '</ol>';
        $output .= '</dd>';
        $output .= '</dl>';
    }
  }
  return $output;
}

/**
 * Implements hook_form_alter().
 */
function menu_block_ignored_links_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'block_admin_configure':
      if ($form['module']['#value'] == 'menu_block') {
        $options                                             = menu_parent_options(menu_get_menus(), array('mlid' => 0));
        $delta                                               = $form['delta']['#value'];
        $ignored_links['menu_block_ignored_links_' . $delta] = array(
          '#title'         => t('Ignored links'),
          '#type'          => 'select',
          '#default_value' => variable_get("menu_block_ignored_links_{$delta}"),
          '#multiple'      => TRUE,
          '#weight'        => -19,
          '#size'          => 15,
          '#options'       => $options,
        );
        $settings                                            = &$form['settings'];
        $settings                                            = menu_block_ignored_links_array_insert_after('#attached', $settings, $ignored_links);
        $submit                                              = $form['#submit'];
        $form['#submit']                                     = array_merge(array('menu_block_ignored_links_block_admin_configure_save'), $submit);
      }
      break;
  }
}

/**
 * Implements hook_menu_block_tree_alter().
 */
function menu_block_ignored_links_menu_block_tree_alter(&$tree, &$config) {
  $delta         = $config['delta'];
  $ignored_links = variable_get("menu_block_ignored_links_{$delta}", array());
  if (!empty($ignored_links)) {
    array_walk($ignored_links, 'menu_block_ignored_links_get_menu_id');
    menu_block_ignored_links_recursive_walk($tree, $ignored_links);
  }
}

/**
 * Recursive walk on selected menu.
 *
 * @param array $tree
 *   Menu tree.
 * @param array $ignored_links
 *   Ignored links
 */
function menu_block_ignored_links_recursive_walk(&$tree, $ignored_links) {
  foreach ($tree as $key => &$value) {
    if (!empty($value['below'])) {
      if (in_array($value['link']['mlid'], $ignored_links)) {
        unset($tree[$key]);
      }
      else {
        menu_block_ignored_links_recursive_walk($value['below'], $ignored_links);
      }
    }
    else {
      if (in_array($value['link']['mlid'], $ignored_links)) {
        unset($tree[$key]);
      }
    }
  }
}

/**
 * Alter menu_block configure submit.
 *
 * @param array $form
 *   Form array.
 * @param array $form_state
 *   Form state.
 */
function menu_block_ignored_links_block_admin_configure_save($form = array(), $form_state = array()) {
  $delta  = $form['delta']['#value'];
  $values = &$form_state['values'];
  variable_set("menu_block_ignored_links_{$delta}", $values['menu_block_ignored_links_' . $delta]);
}

/**
 * Insert a mixed value in an array defined position.
 *
 * @param string $key
 *   The key where we are going to insert after.
 * @param array $source
 *   The source array.
 * @param array $array
 *   The array to insert.
 *
 * @return array
 *   Merged arrays
 */
function menu_block_ignored_links_array_insert_after($key, &$source = array(), $array = array()) {
  // Get the position of the key in our array.
  $insert_after = (int) array_search($key, array_keys($source));
  if ($insert_after < count($source)) {
    $first_part  = array_slice($source, 0, $insert_after, TRUE);
    $second_part = array_slice($source, $insert_after, NULL, TRUE);
    if (!is_array($array)) {
      $array = array($array);
    }
    return array_merge($first_part, $array, $second_part);
  }
  else {
    return array_merge($source, $array);
  }
}

/**
 * Get menu ID base on a menu slug.
 *
 * @param string $slug
 *   Menu slug.
 */
function menu_block_ignored_links_get_menu_id(&$slug) {
  $exp_menu = explode(':', $slug);
  $slug     = $exp_menu[1];
}
