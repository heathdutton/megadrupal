<?php

/**
 * @file
 * The main functions of Taxamo for Commerce module.
 */

define('COMMERCE_TAXAMO_PRECALCULATED', 'precalculated');
define('COMMERCE_TAXAMO_CONFIRMED', 'confirmed');

/**
 * Implements hook_init().
 */
function commerce_taxamo_init() {
  commerce_taxamo_load_taxamo_php();
}

/**
 * Implements hook_permission().
 */
function commerce_taxamo_permission() {
  return array(
    'administer commerce taxamo settings' =>  array(
      'title' => t('Administer Taxamo settings'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function commerce_taxamo_cron() {
  commerce_taxamo_update_taxamo_product_types();
}

/**
 * Implements hook_menu().
 */
function commerce_taxamo_menu() {
  $items['admin/commerce/config/taxamo'] = array(
    'title' => 'Taxamo',
    'page callback' => 'commerce_taxamo_content_admin_taxamo',
    'access callback' => 'commerce_taxamo_access_admin_taxamo',
    'file' => 'commerce_taxamo.admin.inc',
    'weight' => 99,
  );

  return $items;
}

/**
 * Implementats hook_libraries_info().
 */
function commerce_taxamo_libraries_info() {
  $libraries['taxamo-php'] = array(
    'name' => 'Taxamo PHP',
    'vendor url' => 'https://github.com/taxamo/taxamo-php',
    'download url' => 'https://github.com/taxamo/taxamo-php',
    'version' => 'v1',
    'path' => 'lib',
    'files' => array(
      'php' => array(
        'Taxamo.php',

        // It should be enough to load only the previous file... but some server
        // configurations are having issues loading the library classes. Here is
        // the whole list of files in the library in case you need to uncomment
        // them (remember to flush cache after modifying this):

        // 'Taxamo/models/additional_currencies.php',
        // 'Taxamo/models/additional_currency.php',
        // 'Taxamo/models/by_country.php',
        // 'Taxamo/models/by_status.php',
        // 'Taxamo/models/by_taxation_type.php',
        // 'Taxamo/models/C.php',
        // 'Taxamo/models/calculateSimpleTaxOut.php',
        // 'Taxamo/models/calculateTaxIn.php',
        // 'Taxamo/models/calculateTaxLocationOut.php',
        // 'Taxamo/models/calculateTaxOut.php',
        // 'Taxamo/models/cancelTransactionOut.php',
        // 'Taxamo/models/capturePaymentOut.php',
        // 'Taxamo/models/confirmTransactionIn.php',
        // 'Taxamo/models/confirmTransactionOut.php',
        // 'Taxamo/models/countries.php',
        // 'Taxamo/models/country_schema.php',
        // 'Taxamo/models/country.php',
        // 'Taxamo/models/createPaymentIn.php',
        // 'Taxamo/models/createPaymentOut.php',
        // 'Taxamo/models/createRefundIn.php',
        // 'Taxamo/models/createRefundOut.php',
        // 'Taxamo/models/createSMSTokenIn.php',
        // 'Taxamo/models/createSMSTokenOut.php',
        // 'Taxamo/models/createTransactionIn.php',
        // 'Taxamo/models/createTransactionOut.php',
        // 'Taxamo/models/currency_schema.php',
        // 'Taxamo/models/custom_fields.php',
        // 'Taxamo/models/evidence_schema.php',
        // 'Taxamo/models/evidence.php',
        // 'Taxamo/models/getCountriesDictOut.php',
        // 'Taxamo/models/getCurrenciesDictOut.php',
        // 'Taxamo/models/getDailySettlementStatsOut.php',
        // 'Taxamo/models/getProductTypesDictOut.php',
        // 'Taxamo/models/getRefundsOut.php',
        // 'Taxamo/models/getSettlementOut.php',
        // 'Taxamo/models/getSettlementReportOut.php',
        // 'Taxamo/models/getSettlementStatsByCountryOut.php',
        // 'Taxamo/models/getSettlementStatsByTaxationTypeOut.php',
        // 'Taxamo/models/getSettlementSummaryOut.php',
        // 'Taxamo/models/getTransactionOut.php',
        // 'Taxamo/models/getTransactionsStatsOut.php',
        // 'Taxamo/models/input_transaction_line.php',
        // 'Taxamo/models/input_transaction_update.php',
        // 'Taxamo/models/input_transaction.php',
        // 'Taxamo/models/invoice_address.php',
        // 'Taxamo/models/listPaymentsOut.php',
        // 'Taxamo/models/listTransactionsOut.php',
        // 'Taxamo/models/locateGivenIPOut.php',
        // 'Taxamo/models/locateMyIPOut.php',
        // 'Taxamo/models/N.php',
        // 'Taxamo/models/payments.php',
        // 'Taxamo/models/product_type_schema.php',
        // 'Taxamo/models/report.php',
        // 'Taxamo/models/settlement_daily_stats_schema.php',
        // 'Taxamo/models/settlement_report_entry.php',
        // 'Taxamo/models/summary.php',
        // 'Taxamo/models/transaction_lines.php',
        // 'Taxamo/models/transaction.php',
        // 'Taxamo/models/transactions.php',
        // 'Taxamo/models/updateTransactionIn.php',
        // 'Taxamo/models/updateTransactionOut.php',
        // 'Taxamo/models/validateTaxNumberOut.php',
        // 'Taxamo/models/verifySMSTokenOut.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_form_alter().
 */
function commerce_taxamo_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {

    case 'field_ui_field_settings_form':
      if (arg(6) == 'commerce_taxamo_product_type') {
        commerce_taxamo_update_taxamo_product_types();
        $form['field']['settings']['allowed_values']['#access'] = FALSE;
        drupal_set_message(t("These settings are intentionally disabled. Taxamo for Commerce module will update this information automatically using Drupal's cron."), 'warning');
      }
      break;

  }
}

/**
 * Implements hook_entity_load().
 */
function commerce_taxamo_entity_load($entities, $type) {
  switch ($type) {

    case 'commerce_product':
      foreach ($entities as $key => $entity) {
        if (empty($entity->commerce_taxamo_product_type)) {
          $entities[$key]->commerce_taxamo_product_type = array(
            LANGUAGE_NONE => array(
              0 => array(
                'value' => commerce_taxamo_get_var('commerce_taxamo_product_type_default_value'),
              ),
            ),
          );
        }
      }
      break;

  }
}

/**
 * Implements hook_commerce_product_type_insert().
 */
function commerce_taxamo_commerce_product_type_insert($product_type, $skip_reset) {
  commerce_taxamo_ensure_product_type_fields($product_type['type']);
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function commerce_taxamo_commerce_price_component_type_info() {
  $title = check_plain(commerce_taxamo_get_var('commerce_taxamo_component_display_title'));
  $display_title = t($title);
  return array(
    'commerce_taxamo_tax_order' => array(
      'title' => t('Taxamo order'),
      'display_title' => $display_title,
      'weight' => 0,
    ),
  );
}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function commerce_taxamo_commerce_line_item_type_info() {
  $line_item_types = array();

  $line_item_types['commerce_taxamo_order_line'] = array(
    'type' => 'commerce_taxamo_order_line',
    'name' => t('Taxamo Tax'),
    'description' => t('Used to include the Tax calculated by Taxamo on each order.'),
    'add_form_submit_value' => t('Add Taxamo Tax'),
    'base' => 'commerce_taxamo_order_line',
  );

  return $line_item_types;
}

/**
 * Implements hook_commerce_checkout_page_info().
 */
function commerce_taxamo_commerce_checkout_page_info() {
  $checkout_pages = array();

  $checkout_pages['taxamo'] = array(
    'name' => t('Tax information'),
    'title' => t('Tax information'),
    'weight' => 3,
    'status_cart' => FALSE,
    'buttons' => TRUE,
  );

  return $checkout_pages;
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_taxamo_commerce_checkout_pane_info() {
  $checkout_panes = array();

  $checkout_panes['taxamo_validation'] = array(
    'title' => t('Tax information validation'),
    'file' => 'includes/commerce_taxamo.checkout_pane.inc',
    'base' => 'commerce_taxamo_taxamo_validation_pane',
    'page' => 'taxamo',
    'fieldset' => FALSE,
    'locked' => TRUE,
  );

  return $checkout_panes;
}

/**
 * Implements hook_commerce_order_presave($order).
 */
function commerce_taxamo_commerce_order_presave($order) {
  if (empty($order->order_id) || empty($order->commerce_line_items)) {
    return FALSE;
  }

  if (empty($order->data['taxamo'])) {
    $order->data['taxamo'] = commerce_taxamo_reset_taxamo_data();
  }

  commerce_taxamo_order_presave_confirm_transaction($order);
  commerce_taxamo_order_presave_delete_taxamo_line_items($order);
  commerce_taxamo_order_presave_precalculate_transaction($order);
  commerce_taxamo_order_presave_refund_transaction($order);
}

/**
 * Implements hook_commerce_checkout_router().
 */
function commerce_taxamo_commerce_checkout_router($order, $checkout_page) {
  $taxamo_data = &$order->data['taxamo'];
  if ($checkout_page['page_id'] == 'taxamo') {
    $skip = FALSE;
    $reason = '';

    $vat_number = commerce_taxamo_get_vat_number($order);
    $use_vat = commerce_taxamo_validate_vat($vat_number, $order);
    if ($use_vat) {
      $skip = TRUE;
      $reason = t('VAT number validated');
    }
    elseif (commerce_taxamo_get_dashboard_settings('allow_contradictory_evidence')) {
      $skip = TRUE;
      $reason = t('Contradictory evidence is allowed');
    }
    else {
      $locate_my_ip = commerce_taxamo_locate_my_ip();
      $taxamo_data['ip_country'] = $locate_my_ip['country_code'];
      $taxamo_data['billing_country'] = commerce_taxamo_get_billing_country($order);

      if (!empty($taxamo_data['billing_country']) && strtoupper($taxamo_data['billing_country']) == strtoupper($taxamo_data['ip_country'])) {
        $taxamo_data['billing_country'] = strtoupper($taxamo_data['billing_country']);
        $taxamo_data['ip_country'] = strtoupper($taxamo_data['ip_country']);
        $skip = TRUE;
        $reason = t('Billing country and IP country are the same');
      }
      elseif (!commerce_taxamo_get_dashboard_settings('allow_self_declaration')) {
        drupal_set_message(t("Your country can't be validated. Please check the information provided and try again."), 'error');
        drupal_goto('checkout/' . $order->order_id . '/' . $checkout_page['prev_page']);
      }
    }

    if ($skip) {
      $taxamo_data['allow_vat_calculation'] = TRUE;
      $skip_to = $checkout_page['next_page'];
      if (!empty($_SESSION['commerce_taxamo']['checkout_skip_to'])) {
        $skip_to = $_SESSION['commerce_taxamo']['checkout_skip_to'];
      }
      $order = commerce_order_status_update($order, 'checkout_' . $skip_to, FALSE, TRUE, t('Tax information was skipped: %reason.', array('%reason' => $reason)));
      drupal_goto('checkout/' . $order->order_id . '/' . $skip_to);
    }
  }
  else {
    $taxamo_checkout_page = commerce_checkout_page_load('taxamo');
    if ($checkout_page['page_id'] == $taxamo_checkout_page['next_page']) {
      $_SESSION['commerce_taxamo']['checkout_skip_to'] = $taxamo_checkout_page['prev_page'];
    }
    else {
      $_SESSION['commerce_taxamo']['checkout_skip_to'] = $taxamo_checkout_page['next_page'];
    }
  }
}

/**
 * Implements hook_commerce_taxamo_get_vat_number().
 */
function commerce_taxamo_commerce_taxamo_get_vat_number($order, &$vat_number) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  $vat_number_field = commerce_taxamo_get_var('commerce_taxamo_vat_number_field');

  if (!empty($vat_number_field)) {
    $vat_number_field_info = explode('||', $vat_number_field);

    if (count($vat_number_field_info) == 3) {
      // Check if field is in user entity and user bundle.
      if ($vat_number_field_info[0] == 'user' && $vat_number_field_info[1] == 'user') {
        if (!empty($order->uid)) {
          $account = user_load($order->uid);
          $field_data = field_get_items('user', $account, $vat_number_field_info[2]);
          if (!empty($field_data)) {
            $vat_number = $field_data[0]['value'];
          }
        }
      }

      // Check if field is in commerce_customer_profile entity and billing bundle.
      if ($vat_number_field_info[0] == 'commerce_customer_profile' && $vat_number_field_info[1] == 'billing') {
        $billing_profile_id = $order_wrapper->commerce_customer_billing->profile_id->value();
        if (!empty($billing_profile_id)) {
          $billing_profile = commerce_customer_profile_load($billing_profile_id);
          if (!empty($billing_profile)) {
            $field_data = field_get_items('commerce_customer_profile', $billing_profile, $vat_number_field_info[2]);
            if (!empty($field_data)) {
              $vat_number = $field_data[0]['value'];
            }
          }
        }
      }
    }

    $vat_number = check_plain($vat_number);
  }
}

/**
 * Function to validate a VAT number using Taxamo API.
 * @param string $vat_number The VAT number to validate
 * @param object $order      The order that is being processed
 * @return boolean           Wheter the VAT number is valid or not.
 */
function commerce_taxamo_validate_vat($vat_number, $order) {
  if ($taxamo = commerce_taxamo_get_taxamo_php_class('private')) {

    if (commerce_taxamo_get_dashboard_settings('allow_eu_b2b')) {

      if (!empty($vat_number)) {
        $country_code = commerce_taxamo_get_billing_country($order);
        if (empty($country_code)) {
          $country_code = NULL;
        }
        try {
          $validate_tax_number = $taxamo->validateTaxNumber($country_code, $vat_number);
          if (isset($validate_tax_number->buyer_tax_number_valid)) {
            return $validate_tax_number->buyer_tax_number_valid;
          }
          elseif ($validate_tax_number->tax_deducted) {
            return TRUE;
          }
        } catch (Exception $e) {
          watchdog('commerce_taxamo', 'VAT number validation for !vat_number returned error: @error', array('!vat_number' => $vat_number, '@error' => $e->getMessage()), WATCHDOG_ERROR);
        }
      }
    }
  }

  return FALSE;
}

/**
 * Helper function called to confirm a previously created transaction on an
 * order.
 * @param object $order The order entity.
 */
function commerce_taxamo_order_presave_confirm_transaction($order) {
  $taxamo_data = &$order->data['taxamo'];

  $commerce_taxamo_order_statuses_confirm = commerce_taxamo_get_var('commerce_taxamo_order_statuses_confirm');
  if (is_array($commerce_taxamo_order_statuses_confirm) && in_array($order->status, $commerce_taxamo_order_statuses_confirm) && $taxamo_data['status'] == COMMERCE_TAXAMO_PRECALCULATED) {
    if (!empty($taxamo_data['key']) && commerce_taxamo_load_taxamo_php()) {
      $taxamo = commerce_taxamo_get_taxamo_php_class('private');
      try {
        $response = $taxamo->confirmTransaction($taxamo_data['key'], NULL);
        $taxamo_data['transaction'] = $response->transaction;
        $taxamo_data['update'] = REQUEST_TIME;
        $taxamo_data['status'] = COMMERCE_TAXAMO_CONFIRMED;
        $order->log .= ' ' . t("Taxamo transaction confirmed. Key: @key", array("@key" => $taxamo_data['key']));
        watchdog('commerce_taxamo', 'Transaction confirmation for Order !order_id. Key: @key', array('!order_id' => $order->order_id, '@key' => $taxamo_data['key']));
      } catch (Exception $e) {
        watchdog('commerce_taxamo', 'Transaction confirmation for Order !order_id returned error: @error', array('!order_id' => $order->order_id, '@error' => $e->getMessage()), WATCHDOG_ERROR);
      }
    }
  }
}

/**
 * Checks if Taxamo line item must be removed from an order and removes it.
 * @param  object $order The order entity being modified.
 * @return boolean       Wheter Taxamo line item was removed or not.
 */
function commerce_taxamo_order_presave_delete_taxamo_line_items($order) {
  $taxamo_data = &$order->data['taxamo'];

  $taxamo_order_statuses_delete = commerce_taxamo_get_var('commerce_taxamo_order_statuses_delete');
  if (
    is_array($taxamo_order_statuses_delete) &&
    in_array($order->status, $taxamo_order_statuses_delete) &&
    $taxamo_data['status'] == COMMERCE_TAXAMO_PRECALCULATED
  ) {
    commerce_taxamo_delete_taxamo_line_items($order);
    return TRUE;
  }
  return FALSE;
}

/**
 * Precalculates taxes using Taxamo and update order information.
 * @param  object $order The order entity being modified.
 */
function commerce_taxamo_order_presave_precalculate_transaction($order) {
  $taxamo_data = &$order->data['taxamo'];

  $taxamo_order_statuses_precalculate = commerce_taxamo_get_var('commerce_taxamo_order_statuses_precalculate');
  if (
    is_array($taxamo_order_statuses_precalculate) &&
    in_array($order->status, $taxamo_order_statuses_precalculate) &&
    commerce_taxamo_load_taxamo_php() &&
    $taxamo_data['status'] == COMMERCE_TAXAMO_PRECALCULATED
  ) {
    $taxamo = commerce_taxamo_get_taxamo_php_class('private');

    $transaction_lines = array();
    foreach ($order->commerce_line_items[LANGUAGE_NONE] as $key => $line_item) {
      if ($line_item = commerce_line_item_load($line_item['line_item_id'])) {
        $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
        if (in_array($line_item_wrapper->type->value(), array('product'))) {
          $product = commerce_product_load($line_item_wrapper->commerce_product->product_id->value());
          $transaction_line = new Input_transaction_line();
          $transaction_line->quantity = (integer) $line_item_wrapper->quantity->value();
          $amount = $line_item_wrapper->quantity->value() * $line_item_wrapper->commerce_unit_price->amount->value() / 100;
          $transaction_line->amount = $amount;
          $transaction_line->custom_id = $line_item_wrapper->line_item_id->value();
          $commerce_product_types_to_vat = commerce_taxamo_get_var('commerce_taxamo_product_types_to_vat');
          if (!empty($commerce_product_types_to_vat[$product->type])) {
            $taxamo_product_type = !empty($product->commerce_taxamo_product_type[LANGUAGE_NONE][0]['value']) ? $product->commerce_taxamo_product_type[LANGUAGE_NONE][0]['value'] : commerce_taxamo_get_var('commerce_taxamo_product_type_default_value');
            $transaction_line->product_type = $taxamo_product_type;
            $transaction_line->amount = $amount;
          }
          else {
            $tax_rate = 0;
            $tax_name = '';
            $tax_is_vat = FALSE;
            if (module_exists('commerce_tax')) {
              if (!empty($line_item->commerce_unit_price[LANGUAGE_NONE][0]['data']['components'])) {
                foreach ($line_item->commerce_unit_price[LANGUAGE_NONE][0]['data']['components'] as $component) {
                  if (empty($tax_rate) && !empty($component['price']['data']['tax_rate'])) {
                    $tax_info = $component['price']['data']['tax_rate'];
                    $tax_rate = (float) ($tax_info['rate'] * 100);
                    $tax_name = $tax_info['display_title'];
                    $tax_type = commerce_tax_type_load($tax_info['type']);
                    $tax_is_vat = !empty($tax_type['display_inclusive']);
                  }
                }
              }
            }
            $transaction_line->product_type = 'default';
            $transaction_line->informative = TRUE;
            $transaction_line->tax_rate = $tax_rate;
            if (!empty($tax_name)) {
              $transaction_line->tax_name = $tax_name;
            }
            if ($tax_is_vat) {
              $transaction_line->total_amount = $amount;
            }
            else {
              $transaction_line->amount = $amount;
            }
          }
          $transaction_lines[] = $transaction_line;
        }
      }
    }

    if (!empty($transaction_lines)) {
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
      $currency_code = $order_wrapper->commerce_order_total->currency_code->value();
      $locate_my_ip = commerce_taxamo_locate_my_ip();
      $transaction = new Input_transaction();
      $transaction->currency_code = $currency_code;
      if ($locate_my_ip) {
        $transaction->buyer_ip = $locate_my_ip['ip'];
      }
      else {
        $transaction->buyer_ip = ip_address();
      }

      $billing_country = commerce_taxamo_get_billing_country($order);
      if (!empty($billing_country)) {
        $transaction->billing_country_code = $billing_country;
      }

      if (!empty($order->mail)) {
        $transaction->buyer_email = $order->mail;
      }

      $billing_profile_id = 0;
      if (!empty($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id'])) {
        $billing_profile_id = $order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id'];
        $billing_profile = commerce_customer_profile_load($billing_profile_id);

        if (!empty($billing_profile)) {
          $profile_label = commerce_customer_profile_label($billing_profile);
          if (!empty($profile_label)) {
            $transaction->buyer_name = $profile_label;
          }

          $invoice_address = new Invoice_address();

          $invoice_address->freeform_address = '';

          if (!empty($billing_profile->commerce_customer_address['und'][0]['thoroughfare'])) {
            $invoice_address->street_name  = $billing_profile->commerce_customer_address['und'][0]['thoroughfare'];
            $invoice_address->freeform_address .= $billing_profile->commerce_customer_address['und'][0]['thoroughfare'] . "\n";
          }

          if (!empty($billing_profile->commerce_customer_address['und'][0]['postal_code'])) {
            $invoice_address->postal_code = $billing_profile->commerce_customer_address['und'][0]['postal_code'];
            $invoice_address->freeform_address .= $billing_profile->commerce_customer_address['und'][0]['postal_code'] . "\n";
          }

          if (!empty($billing_profile->commerce_customer_address['und'][0]['locality'])) {
            $invoice_address->city = $billing_profile->commerce_customer_address['und'][0]['locality'];
            $invoice_address->freeform_address .= $billing_profile->commerce_customer_address['und'][0]['locality'] . "\n";
          }

          if (!empty($billing_profile->commerce_customer_address['und'][0]['country'])) {
            $invoice_address->country = $billing_profile->commerce_customer_address['und'][0]['country'];
            $invoice_address->freeform_address .= $billing_profile->commerce_customer_address['und'][0]['country'];
          }

          $transaction->invoice_address = $invoice_address;
        }
      }

      if (commerce_taxamo_get_dashboard_settings('allow_eu_b2b')) {
        $vat_number = commerce_taxamo_get_vat_number($order);

        if (!empty($vat_number)) {
          $transaction->buyer_tax_number = $vat_number;
        }
      }

      if (!empty($taxamo_data['force_country']) && !empty($taxamo_data['force_country_key'])) {
        $force_country_key = $taxamo_data['force_country_key'];
        if (!empty($taxamo_data[$force_country_key])) {
          $transaction->force_country_code = $taxamo_data[$force_country_key];
        }
      }

      $transaction->transaction_lines = $transaction_lines;
      $transaction_validated = TRUE;
      try {
        if (!empty($taxamo_data['key'])) {
          try {
            $taxamo_delete = commerce_taxamo_get_taxamo_php_class('private');
            $taxamo_delete_response = $taxamo->cancelTransaction($taxamo_data['key']);
          } catch (Exception $e) {
            watchdog('commerce_taxamo', 'Failed to delete existing Taxamo transaction !key: @error', array('!key' => $taxamo_data['key'], '@error' => $e->getMessage()), WATCHDOG_ERROR);
          }
        }

        $hook = 'commerce_taxamo_transaction_pre_create';
        module_invoke_all($hook, $order, $transaction);

        $taxamo_response = $taxamo->createTransaction(array('transaction' => $transaction));
      } catch (TaxamoValidationException $e) {
        $transaction_validated = FALSE;
        watchdog('commerce_taxamo', 'Tax calculation for Order !order_id returned Validation error: @error', array('!order_id' => $order->order_id, '@error' => $e->getMessage()), WATCHDOG_ERROR);
      } catch (TaxamoAuthenticationException $e) {
        $transaction_validated = FALSE;
        watchdog('commerce_taxamo', 'Tax calculation for Order !order_id returned Authentication error: @error', array('!order_id' => $order->order_id, '@error' => $e->getMessage()), WATCHDOG_ERROR);
      } catch (Exception $e) {
        $transaction_validated = FALSE;
        watchdog('commerce_taxamo', 'Tax calculation for Order !order_id returned error: @error', array('!order_id' => $order->order_id, '@error' => $e->getMessage()), WATCHDOG_ERROR);
      }

      if ($transaction_validated) {
        if ($taxamo_response->transaction->tax_supported) {
          $taxamo_amount = 0;
          if (!empty($taxamo_response->transaction->transaction_lines)) {
            foreach ($taxamo_response->transaction->transaction_lines as $transaction_line) {
              if (empty($transaction_line->informative)) {
                $taxamo_amount += $transaction_line->tax_amount;
              }
            }
          }
          $taxamo_amount *= 100;
          $taxamo_currency = $taxamo_response->transaction->currency_code;
          $taxamo_key = !empty($taxamo_response->transaction->key) ? $taxamo_response->transaction->key : '';

          $taxamo_data['key'] = $taxamo_key;
          $taxamo_data['updated'] = REQUEST_TIME;
          $taxamo_data['status'] = COMMERCE_TAXAMO_PRECALCULATED;
          $taxamo_data['amount'] = $taxamo_amount;
          $taxamo_data['currency_code'] = $taxamo_currency;
          $taxamo_data['transaction'] = (array) $taxamo_response->transaction;

          watchdog('commerce_taxamo', 'Tax transaction calculated for Order !order_id. Key: @key', array('!order_id' => $order->order_id, '@key' => $taxamo_data['key']));
          $order->log .= " " . t("Taxamo transaction calculated. Key: @key", array("@key" => $taxamo_data['key']));

          commerce_taxamo_update_order_transaction($order, $taxamo_response->transaction);
        }
        else {
          if (!empty($taxamo_data['key'])) {
            try {
              $taxamo_delete = commerce_taxamo_get_taxamo_php_class('private');
              $taxamo_delete_response = $taxamo->cancelTransaction($taxamo_data['key']);
            } catch (Exception $e) {
              watchdog('commerce_taxamo', 'Failed to delete existing Taxamo transaction !key: @error', array('!key' => $taxamo_data['key'], '@error' => $e->getMessage()), WATCHDOG_ERROR);
            }
          }
          $taxamo_data['key'] = '';
          $taxamo_data['updated'] = REQUEST_TIME;
          $taxamo_data['status'] = COMMERCE_TAXAMO_PRECALCULATED;
          $taxamo_data['amount'] = 0;
          $taxamo_data['transaction'] = (array) $taxamo_response->transaction;
        }

        $hook = 'commerce_taxamo_transaction_post_create';
        module_invoke_all($hook, $order, $taxamo_response->transaction);
      }
      else {
        commerce_taxamo_delete_taxamo_line_items($order);
        if (!empty($e->errors)) {
          foreach ($e->errors as $error) {
            drupal_set_message(t("Taxes for digital items can't be calculated. Service said: @error", array('@error' => $error)), 'error');
          }
        }
        else {
          drupal_set_message(t("Taxes for digital items can't be calculated. Please try again in a moment."), 'error');
        }
        if (arg(0) == 'checkout' && is_numeric(arg(1))) {
          $path = 'checkout/' . arg(1);
          drupal_goto($path);
        }
        
      }

    }
    else {
      commerce_taxamo_delete_taxamo_line_items($order);
    }
  }
  return FALSE;
}

/**
 * Checks if an order needs a refund and executes it. Only orders with confirmed
 * Taxamo transactions can be refunded.
 *
 * There are 2 possible ways to call a return:
 * - When the order items total is reduced, changing the quantity or the price
 * of an item.
 * - When the order is changed to one of the statuses that are configured to
 * launch a full order refund.
 * @param  object $order The order entity being modified.
 * @return boolean       Wheter refunds where done or not.
 */
function commerce_taxamo_order_presave_refund_transaction($order) {
  $taxamo_data = &$order->data['taxamo'];

  $message_variables = array(
    '!order_id' => $order->order_id,
  );

  if ($taxamo_data['status'] == COMMERCE_TAXAMO_CONFIRMED && !empty($taxamo_data['key'])) {
    $transaction_key = $taxamo_data['key'];
    $message_variables['@key'] = $transaction_key;

    $commerce_taxamo_order_statuses_full_refund = commerce_taxamo_get_var('commerce_taxamo_order_statuses_full_refund');

    if ($taxamo = commerce_taxamo_get_taxamo_php_class('private')) {
      $got_errors = FALSE;
      try {
        $transaction = $taxamo->getTransaction($transaction_key);
      } catch (Exception $e) {
        $got_errors = TRUE;
        $message_variables['@error'] = $e->getMessage();
        watchdog('commerce_taxamo', 'Error trying to get Taxamo transaction @key for Order !order_id. Error returned: @error', $message_variables, WATCHDOG_ERROR);
      }

      if ($got_errors) {
        return FALSE;
      }

      $refunds = array();
      $do_refund = TRUE;

      $transaction_line_items = array();
      if (!empty($transaction->transaction->transaction_lines)) {
        foreach ($transaction->transaction->transaction_lines as $transaction_line) {
          $line_item_id = $transaction_line->custom_id;
          $transaction_line_items[$line_item_id] = $transaction_line;
        }
      }

      if (is_array($commerce_taxamo_order_statuses_full_refund) && in_array($order->status, $commerce_taxamo_order_statuses_full_refund) && empty($taxamo_data['full_refund_executed'])) {
        // Full refund
        foreach ($transaction_line_items as $custom_id => $transaction_line) {
          $transaction_line_amount = $transaction_line->amount;
          if (isset($taxamo_data['last_refund'][$custom_id])) {
            $transaction_line_amount = $taxamo_data['last_refund'][$custom_id];
          }
          if (!empty($transaction_line_amount)) {
            $refunds[$custom_id] = array(
              'new_amount' => 0,
              'to_refund' => $transaction_line_amount,
            );
          }
        }
        $taxamo_data['full_refund_executed'] = TRUE;
      }
      else {
        // Partial refund... lets check if the order needs it.

        $order_line_items = array();
        if (!empty($order->commerce_line_items['und'])) {
          foreach ($order->commerce_line_items['und'] as $line_item) {
            $line_item_id = $line_item['line_item_id'];
            if ($line_item = commerce_line_item_load($line_item_id)) {
              $order_line_items[$line_item_id] = $line_item;
            }
          }
        }


        $currency_code = $transaction->transaction->currency_code;
        $show_manual_modification_message = FALSE;

        foreach ($order_line_items as $line_item_id => $order_line_item) {
          if ($order_line_item == 'product') {
            if (!isset($transaction_line_items[$line_item_id])) {
              $message_variables['@product_name'] = $order_line_item->line_item_label;
              drupal_set_message(t("Product @product_name in the order was not there when the Taxes where calculated. It will not be used to update taxes information.", $message_variables), 'error');
              $show_manual_modification_message = TRUE;
            }
          }
        }

        foreach ($transaction_line_items as $line_item_id => $transaction_line) {
          $transaction_line_amount = $transaction_line->amount;
          if (isset($taxamo_data['last_refund'][$line_item_id])) {
            $transaction_line_amount = $taxamo_data['last_refund'][$line_item_id];
          }
          if (!empty($order_line_items[$line_item_id])) {
            $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $order_line_items[$line_item_id]);
            $order_line_item_amount = $line_item_wrapper->quantity->value() * $line_item_wrapper->commerce_unit_price->amount->value() / 100;
            $order_line_item_currency_code = $line_item_wrapper->commerce_unit_price->currency_code->value();
            $message_variables['@product_name'] = $order_line_items[$line_item_id]->line_item_label;
            if (strtoupper($order_line_item_currency_code) != strtoupper($currency_code)) {
              $message_variables['!old_currency'] = $currency_code;
              $message_variables['!new_currency'] = $order_line_item_currency_code;
              drupal_set_message(t("Product @product_name taxes were calculated using !old_currency and now its currency is !new_currency. It will not be used to update taxes information.", $message_variables), 'error');
              $show_manual_modification_message = TRUE;
            }
            elseif ($transaction_line_amount < $order_line_item_amount) {
              drupal_set_message(t("Product @product_name is more expensive than the last time Taxes where calculated. It will not be used to update taxes information.", $message_variables), 'error');
              $show_manual_modification_message = TRUE;
            }
            elseif ($transaction_line_amount > $order_line_item_amount) {
              $refunds[$line_item_id] = array(
                'new_amount' => $order_line_item_amount,
                'to_refund' => $transaction_line_amount - $order_line_item_amount,
              );
            }
          }
          else {
            $refunds[$line_item_id] = array(
                'new_amount' => 0,
                'to_refund' => $transaction_line_amount,
              );
          }
        }
      }

      if (!empty($refunds) && $do_refund) {
        $refunds_done = FALSE;
        foreach ($refunds as $custom_id => $refund_info) {
          if ($taxamo = commerce_taxamo_get_taxamo_php_class('private')) {
            $create_refund_in = new createRefundIn();
            $create_refund_in->custom_id = (string) $custom_id;
            $create_refund_in->amount = $refund_info['to_refund'];
            try {
              $create_refund = $taxamo->createRefund($transaction_key, $create_refund_in);
              $taxamo_data['last_refund'][$custom_id] = $refund_info['new_amount'];
              $refunds_done = TRUE;
            } catch (Exception $e) {
              $message_variables['@error'] = $e->getMessage();
              watchdog('commerce_taxamo', 'Error trying to create refund for Taxamo transaction @key for Order !order_id. Error returned: @error', $message_variables, WATCHDOG_ERROR);
            }
          }
          else {
            $message_variables['!line_item_id'] = $custom_id;
            watchdog('commerce_taxamo', 'Error trying to create refund to line item !line_item_id on transaction @key for Order !order_id.', $message_variables, WATCHDOG_ERROR);
          }
        }

        if ($refunds_done) {
          if ($taxamo = commerce_taxamo_get_taxamo_php_class('private')) {
            try {
              $transaction = $taxamo->getTransaction($transaction_key);
              commerce_taxamo_update_order_transaction($order, $transaction->transaction);
            } catch (Exception $e) {
              $got_errors = TRUE;
              $message_variables['@error'] = $e->getMessage();
              watchdog('commerce_taxamo', 'Error trying to get Taxamo transaction @key for Order !order_id. Error returned: @error', $message_variables, WATCHDOG_ERROR);
            }
          }
          return TRUE;
        }
      }
    }
  }
  return FALSE;
}

/**
 * Updates an order based on the information contained in a Taxamo transaction.
 * @param  object $order       The order entity to be updated.
 * @param  object $transaction The Taxamo transaction object that contains the
 * information for the given order.
 */
function commerce_taxamo_update_order_transaction($order, $transaction) {
  $taxamo_data = &$order->data['taxamo'];

  $taxamo_data['transaction'] = $transaction;

  $taxamo_line_item = FALSE;
  if (!empty($order->commerce_line_items[LANGUAGE_NONE])) {
    foreach ($order->commerce_line_items[LANGUAGE_NONE] as $key => $line_item) {
      if ($line_item = commerce_line_item_load($line_item['line_item_id'])) {
        if ($line_item->type == 'commerce_taxamo_order_line') {
          $taxamo_line_item = $line_item;
          break;
        }
      }
    }
  }

  $line_item = commerce_taxamo_order_line_new($order, $transaction);

  if (!empty($taxamo_line_item)) {
    $line_item->is_new = FALSE;
    $line_item->line_item_id = $taxamo_line_item->line_item_id;
    $line_item->created = $taxamo_line_item->created;
    $line_item->changed = $taxamo_line_item->changed;
  }

  commerce_line_item_save($line_item);

  if (empty($taxamo_line_item)) {
    $order->commerce_line_items[LANGUAGE_NONE][] = array('line_item_id' => $line_item->line_item_id);
  }

  commerce_order_calculate_total($order);
}

/**
 * Helper function to extract VAT number from an order.
 * @param  object $order The object order to which the VAT number will be
 * extracted.
 * @return string        The VAT number information. If no VAT number is found,
 * an empty string is returned.
 */
function commerce_taxamo_get_vat_number($order) {
  $vat_number = '';

  $hook = 'commerce_taxamo_get_vat_number';
  foreach (module_implements($hook) as $module) {
    $function = $module . "_" . $hook;
    if (function_exists($function)) {
      $function($order, $vat_number);
    }
  }

  return $vat_number;
}

/**
 * Helper function to create a Commerce Line Item for a given order using the
 * information of a given Taxamo transaction.
 * @param  object $order       The order entity.
 * @param  object $transaction The Taxamo transaction object.
 * @return object              The Commerce Line Item entity.
 */
function commerce_taxamo_order_line_new($order, $transaction) {
  $taxamo_data = &$order->data['taxamo'];

  $type = 'commerce_taxamo_order_line';

  // Create the new line item.
  $line_item = entity_create('commerce_line_item', array(
    'type' => $type,
    'order_id' => $order->order_id,
    'quantity' => 1,
    'line_item_label' => t('Taxamo calculated Tax'),
    'data' => $taxamo_data,
  ));

  if (!empty($taxamo_data['key'])) {
    $line_item->line_item_label .= ". " . t("Transaction key: @key", array("@key" => $taxamo_data['key']));
  }

  $tax_amount = 0;
  $refunded_tax_amount = 0;

  foreach ($transaction->transaction_lines as $transaction_line) {
    if (empty($transaction_line->informative)) {
      if (!empty($transaction_line->tax_amount)) {
        $tax_amount += $transaction_line->tax_amount;
      }

      if (!empty($transaction_line->refunded_tax_amount)) {
        $refunded_tax_amount += $transaction_line->refunded_tax_amount;
      }
    }
  }

  $total_tax_amount = ($tax_amount - $refunded_tax_amount) * 100;

  $line_item->commerce_unit_price = array(LANGUAGE_NONE => array(
    '0' => array('amount' => $total_tax_amount, 'currency_code' => $transaction->currency_code, 'data' => array())
  ));

  $force_universal_pricing = commerce_taxamo_get_dashboard_settings('force_universal_pricing');

  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

  $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
    $line_item_wrapper->commerce_unit_price->value(),
    'commerce_taxamo_tax_order',
    $line_item_wrapper->commerce_unit_price->value(),
    TRUE,
    $force_universal_pricing
  );

  if ($force_universal_pricing) {
    foreach ($line_item->commerce_unit_price[LANGUAGE_NONE][0]['data']['components'] as $key => $component) {
      if ($component['name'] == 'base_price') {
        $line_item->commerce_unit_price[LANGUAGE_NONE][0]['data']['components'][$key]['price']['amount'] = -$total_tax_amount;
      }
    }
  }

  return $line_item;
}

/**
 * Helper function to determine the IP location using Taxamo method locatyMyIP().
 * @return array Array with 3 keys: country_code, ip and updated (timestampo of
 * last time the information was updated).
 */
function commerce_taxamo_locate_my_ip() {
  // TODO: Remove this section... Testing with an IP from SPAIN
  // return array(
  //   'country_code' => 'ES',
  //   'ip' => "84.16.31.155",
  //   'updated' => REQUEST_TIME
  // );

  if (!commerce_taxamo_load_taxamo_php()) {
    return FALSE;
  }

  if (empty($_SESSION['commerce_taxamo']['locate_my_ip']) || $_SESSION['commerce_taxamo']['locate_my_ip']['updated'] < REQUEST_TIME - 60*60) {
    $taxamo = commerce_taxamo_get_taxamo_php_class('private');
    $locate_my_ip = $taxamo->locateGivenIP(ip_address());
    if (!empty($locate_my_ip->country_code)) {
      $_SESSION['commerce_taxamo']['locate_my_ip'] = array(
        'country_code' => $locate_my_ip->country_code,
        'ip' => $locate_my_ip->remote_addr,
        'updated' => REQUEST_TIME
      );
      return $_SESSION['commerce_taxamo']['locate_my_ip'];
    }
  }
  else {
    return $_SESSION['commerce_taxamo']['locate_my_ip'];
  }

  return FALSE;
}

/**
 * Helper function to request Taxamo product types using Taxamo's method
 * getProductTypesDict(). The result of this request is stored in Drupal's cache
 * for 24 hours.
 * @return array Array where key and value are both the same: the Product Type
 * code.
 */
function commerce_taxamo_product_types() {
  $cid = 'commerce_taxamo:product_types_dict';
  $bin = 'cache';

  $cache = cache_get($cid, $bin);

  if (empty($cache) || $cache->expire < REQUEST_TIME) {
    $product_types = array();

    if (commerce_taxamo_load_taxamo_php()) {
      $taxamo = commerce_taxamo_get_taxamo_php_class('public');
      $product_types_dict = $taxamo->getProductTypesDict();

      if (!empty($product_types_dict->dictionary)) {
        foreach ($product_types_dict->dictionary as $product_type) {
          $code = $product_type->code;
          $product_types[$code] = $code;
        }
      }
    }

    if (!empty($product_types)) {
      cache_set($cid, $product_types, $bin, REQUEST_TIME + 60*60*24);
    }

    return $product_types;
  }

  return $cache->data;
}

/**
 * Helper function to retrieve the list of available countries from Taxamo. The
 * information is stored in Drupal cache for 24 hours for future requests.
 * @param  boolean $force_update Whether the country list must be updated from
 * Taxamo (TRUE) or a cached version can be used (FALSE).
 * @return array Keyed array which keys are the 2-letters country code and the
 * value is a country object.
 */
function commerce_taxamo_countries($force_update = FALSE) {
  $countries = array();

  if ($taxamo = commerce_taxamo_get_taxamo_php_class('public')) {
    try {
      $countries_dict = $taxamo->getCountriesDict();
    } catch (Exception $e) {
      watchdog('commerce_taxamo', 'Error trying to get countries from Taxamo: @error', array('@error' => $e->getMessage()), WATCHDOG_ERROR);
      return $countries;
    }

    if (!empty($countries_dict->dictionary)) {
      $countries = $countries_dict->dictionary;
      foreach ($countries as $key => $country) {
        $code = $country->code;
        if ($code != '00') {
          $countries[$code] = $country;
        }
        unset($countries[$key]);
      }
    }

  }

  return $countries;
}

/**
 * Function that defines the access to Taxamo configuration page.
 * @return bool Wheter the user has access or not.
 */
function commerce_taxamo_access_admin_taxamo() {
  if (user_access('administer commerce taxamo settings')) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Helper function to load variables using variable_get. This is done to avoid
 * using different default values in differents parts of the code.
 * @param  string $var_name The variable to load.
 * @return mixed            The variable value.
 */
function commerce_taxamo_get_var($var_name) {
  switch ($var_name) {

    case 'commerce_taxamo_mode':
      $value = variable_get('commerce_taxamo_mode', '');
      break;

    case 'commerce_taxamo_public_token_test':
      $value = variable_get('commerce_taxamo_public_token_test', '');
      break;

    case 'commerce_taxamo_private_token_test':
      $value = variable_get('commerce_taxamo_private_token_test', '');
      break;

    case 'commerce_taxamo_public_token_live':
      $value = variable_get('commerce_taxamo_public_token_live', '');
      break;

    case 'commerce_taxamo_private_token_live':
      $value = variable_get('commerce_taxamo_private_token_live', '');
      break;

    case 'commerce_taxamo_product_type_default_value':
      $value = variable_get('commerce_taxamo_product_type_default_value', 'default');
      break;

    case 'commerce_taxamo_component_display_title':
      $value = variable_get('commerce_taxamo_component_display_title', 'Digital Products Taxes');
      break;

    case 'commerce_taxamo_order_statuses_delete':
      $value = variable_get('commerce_taxamo_order_statuses_delete', array('cart', 'checkout_checkout'));
      break;

    case 'commerce_taxamo_order_statuses_precalculate':
      $value = variable_get('commerce_taxamo_order_statuses_precalculate', array('checkout_review', 'checkout_payment'));
      break;

    case 'commerce_taxamo_order_statuses_confirm':
      $value = variable_get('commerce_taxamo_order_statuses_confirm', array('completed'));
      break;

    case 'commerce_taxamo_order_statuses_full_refund':
      $value = variable_get('commerce_taxamo_order_statuses_full_refund', array('canceled'));
      break;

    case 'commerce_taxamo_tax_included':
      // $value = variable_get('commerce_taxamo_tax_included', 0);
      $value = 0; // Feature removed temporally.
      break;

    // case 'commerce_taxamo_informative_flag_default_value':
    //   $value = variable_get('commerce_taxamo_informative_flag_default_value', 0);
    //   break;

    case 'commerce_taxamo_vat_number_field':
      $value = variable_get('commerce_taxamo_vat_number_field', 0);
      break;

    case 'commerce_taxamo_product_types_to_vat':
      $value = variable_get('commerce_taxamo_product_types_to_vat', array());
      break;

    default:
      $value = variable_get($var_name);

  }

  return $value;
}

/**
 * Helper function to load Taxamo PHP Library.
 * @return bool Whether the library was loaded or not.
 */
function commerce_taxamo_load_taxamo_php() {
  $library = libraries_load('taxamo-php');

  if (empty($library)) {
    return FALSE;
  }

  return $library['loaded'];
}

/**
 * Helper function to ensure the existence of the Taxamo Product Type field for
 * commerce products.
 */
function commerce_taxamo_ensure_fields() {
  commerce_taxamo_enable_fields();

  foreach (commerce_product_types() as $type => $product_type) {
    commerce_taxamo_ensure_product_type_fields($type);
  }
}

/**
 * Helper function to create the instance of the Taxamo Product Type field for a
 * Commerce Product Type.
 * @param  string $type Commerce Product Type machine name.
 */
function commerce_taxamo_ensure_product_type_fields($type) {
  $instances = field_info_field_map();
  if (empty($instances['commerce_taxamo_product_type']) || !in_array($type, $instances['commerce_taxamo_product_type']['bundles']['commerce_product'])) {
    if (commerce_taxamo_update_taxamo_product_types()) {
      $instance = array(
        'field_name' => 'commerce_taxamo_product_type',
        'entity_type' => 'commerce_product',
        'bundle' => $type,
        'label' => t("Taxamo's product type"),
        'description' => t("The product type defined by Taxamo."),
        'required' => TRUE,
        'default_value_function' => 'commerce_taxamo_product_type_default_value',
        'widget' => array(
          'type' => 'options_select',
        ),
        'display' => array(
          'default' => array(
            'type' => 'hidden',
          ),
        ),
      );
      field_create_instance($instance);
    }
  }
  if (!variable_get('commerce_taxamo_field_informative_flag_deleted', 0)) {
    field_delete_field('commerce_taxamo_informative_flag');
    variable_get('commerce_taxamo_field_informative_flag_deleted', REQUEST_TIME);
  }
}

/**
 * Helper function to define the default value for newly created instances of
 * Taxamo Product Type field.
 */
function commerce_taxamo_product_type_default_value($entity_type, $entity, $field, $instance) {
  return array(array('value' => commerce_taxamo_get_var('commerce_taxamo_product_type_default_value')));
}

/**
 * Helper function to enable declared fields, in case they have been
 * deactivated.
 */
function commerce_taxamo_enable_fields() {
  $fields = commerce_taxamo_custom_fields();

  foreach ($fields as $field_info) {
    commerce_activate_field($field_info['field_name']);
    field_cache_clear();

    $field = field_info_field($field_info['field_name']);

    if (empty($field)) {
      $field = field_create_field($field_info);
    }
  }
}

/**
 * Declaraton of fields needed by Taxamo for Commerce module.
 * @param  string $key The name of the field to return. If not provided, all the
 * fields are returned.
 * @return mixed       If $key is not provided, the full array with all the
 * fields information is returned. If $key is provided and the field exists, the
 * array specification of the $key field is returned. If $key is provided and
 * the field doesn't exists, FALSE is returned.
 */
function commerce_taxamo_custom_fields($key = NULL) {
  $fields = array(
    'commerce_taxamo_product_type' => array(
      'field_name' => 'commerce_taxamo_product_type',
      'type' => 'list_text',
      'entity_types' => array(
        'commerce_product',
      ),
      'cardinality' => 1,
      'translatable' => FALSE,
      'locked' => TRUE,
    ),
  );

  if (!is_null($key)) {
    if (isset($fields[$key])) {
      return $fields[$key];
    }
    else {
      return FALSE;
    }
  }

  return $fields;
}

/**
 * Helper function used to update the Taxamo Product Type options in case
 * Taxamo adds/removes Product Types.
 * @return bool Whether the Taxamo Product Type options where updated or not.
 */
function commerce_taxamo_update_taxamo_product_types() {
  commerce_taxamo_enable_fields();
  $commerce_taxamo_product_type = field_info_field('commerce_taxamo_product_type');
  if ($commerce_taxamo_product_type) {
    $taxamo_product_types = commerce_taxamo_product_types();
    if (!empty($taxamo_product_types)) {
      $commerce_taxamo_product_type['settings']['allowed_values'] = $taxamo_product_types;
      field_update_field($commerce_taxamo_product_type);
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Helper function to delete existing Taxamo Line Items in an order.
 * @param  object  $order     The order that will have the line items removed.
 * @param  boolean $skip_save Wheter to skip, or not, order save.
 */
function commerce_taxamo_delete_taxamo_line_items($order, $skip_save = TRUE) {
  $taxamo_line_items = array();
  foreach ($order->commerce_line_items[LANGUAGE_NONE] as $key => $line_item) {
    if ($line_item = commerce_line_item_load($line_item['line_item_id'])) {
      if ($line_item->type == 'commerce_taxamo_order_line') {
        $taxamo_line_items[$key] = $line_item->line_item_id;
        $transaction_id = 'NULL';
        if (!empty($order->data['taxamo']['key'])) {
          $transaction_id = $order->data['taxamo']['key'];
        }
        watchdog('commerce_taxamo', 'Taxamo line item removed from order @order_id with transaction id @transaction_id', array('@order_id' => $order->order_id, '@transaction_id' => $transaction_id));
      }
    }
  }
  if (!empty($taxamo_line_items)) {
    foreach ($taxamo_line_items as $line_item_id) {
      commerce_line_item_delete($line_item_id);
    }
  }
  $taxamo_data = &$order->data['taxamo'];

  // $taxamo_data = commerce_taxamo_reset_taxamo_data();

  commerce_order_calculate_total($order);

  if (!$skip_save) {
    commerce_order_save($order);
  }
}

/**
 * Helper function to retrieve the billing country from an order.
 * @param  object $order The order entity to extract the billing country from.
 * @return string        2-letters country country code or FALSE if no country
 * is found.
 */
function commerce_taxamo_get_billing_country($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $billing_profile_id = $order_wrapper->commerce_customer_billing->profile_id->value();
  if (!empty($billing_profile_id)) {
    $billing_profile = commerce_customer_profile_load($billing_profile_id);
    if (!empty($billing_profile)) {
      $billing_profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $billing_profile);
      $country = $billing_profile_wrapper->commerce_customer_address->country->value();
      if (!empty($country)) {
        return $country;
      }
    }
  }

  return FALSE;
}

/**
 * Helper function to retrieve a Taxamo class generated using a specific type of
 * token.
 * @param  string $token_type The type of token that will be used to create the
 * class. Possible values are 'public' or 'private'.
 * @return class             The Taxamo class.
 */
function commerce_taxamo_get_taxamo_php_class($token_type) {
  if (commerce_taxamo_load_taxamo_php()) {
    $swagger = new APIClient(commerce_taxamo_get_token($token_type), 'https://api.taxamo.com');
    if (!empty($swagger->sourceId)) {
      $module_info = system_get_info('module', 'commerce_taxamo');
      if (!empty($module_info['version'])) {
        $module_version = explode('-', $module_info['version']);
        $small_version_array = explode('.', $module_version[1]);
        $small_version = array_shift($small_version_array);
        $version = $module_version[0] . ".$small_version";
        if (count($module_version) == 3) { // Dev, Alpha, Beta or RC version
          $release = $module_version[2];
        }
        else { // Final version
          $release_array = explode('.', $module_version[1]);
          $release = array_pop($release_array);
        }
      }
      else { // GIT repository without version
        $version = 'git';
        $release = '7.x-1.x'; // Keep this updated with the GIT Branch
      }
      $plugin_info = array(
        'ks', // Vendor
        'drupal commerce', // Plugin name
        str_replace('-', '.', $version), // Version
        str_replace('-', '.', $release), // Release
      );
      $swagger->sourceId = implode('-', $plugin_info);
    }
    return new Taxamo($swagger);
  }

  return FALSE;
}

/**
 * Helper function to retrieve Taxamo Dashboard Settings for the Merchant.
 * @param  string  $key          (Optional) The specific setting which value is
 * needed.
 * @param  boolean $force_update (Optional) If TRUE, the information in cache
 * will not be used and it will be regenerated.
 * @return mixed                 If $key is provided, a boolean representing the
 * setting for that key will be returned. If $key is not provided, a keyed array
 * will be returned, the keys of the array are the settings names and the values
 * are the respective boolean values.
 */
function commerce_taxamo_get_dashboard_settings($key = NULL, $force_update = FALSE) {
  $cid = 'commerce_taxamo:dashboard_settings';
  $bin = 'cache';

  $cache = cache_get($cid, $bin);

  if (empty($cache) || $cache->expire < REQUEST_TIME || $force_update) {
    $settings = commerce_taxamo_get_dashboard_settings_from_taxamo();

    if (commerce_taxamo_get_var('commerce_taxamo_mode') == 'live') {
      // When in Live mode, store Dashboard Settings in cache for 1 hour
      $time_to_cache = 60*60;
    }
    else {
      // When in Test mode, store Dashboard Settings in cache for 10 seconds
      $time_to_cache = 10;
    }

    if (!empty($settings)) {
      cache_set($cid, $settings, $bin, REQUEST_TIME + $time_to_cache);
    }
  }
  else {
    $settings = $cache->data;
  }

  if (!empty($settings)) {
    if (!is_null($key)) {
      if (isset($settings[$key])) {
        return $settings[$key];
      }
      else {
        return FALSE;
      }
    }
    else {
      return $settings;
    }
  }

  return FALSE;
}

/**
 * Helper function to get Taxamo Dashboard Settings directly from Taxamo.
 * @return array keyed array where the keys are the settings names and the
 * values are the respective boolean values. Or FALSE if the information can't
 * be retrieved.
 */
function commerce_taxamo_get_dashboard_settings_from_taxamo() {
  $settings = array();

  try {
    $api_settings_url = url("https://dashboard.taxamo.com/app/v1/merchants/self/settings/public", array(
      'external' => TRUE,
      'query' => array(
        'public_token' => commerce_taxamo_get_token('public'),
      ),
    ));
    $request = drupal_http_request($api_settings_url);
    if (empty($request->error) && !empty($request->data)) {
      $dashboard_settings_array = drupal_json_decode($request->data);
      if (!empty($dashboard_settings_array['settings'])) {
        foreach ($dashboard_settings_array['settings'] as $setting_key => $setting_value) {
          $settings[$setting_key] = $setting_value;
        }
      }
      return $settings;
    }
    elseif (!empty($request->error)) {
      $errors = $request->error . ".";
      $error_array = drupal_json_decode($request->data);
      if (!empty($error_array['errors'])) {
        foreach ($error_array['errors'] as $error) {
          $errors .= " " . $error;
        }
      }
      watchdog('commerce_taxamo', 'Error trying to request Taxamo Dashboard Settings: @error', array('@error' => $errors), WATCHDOG_ERROR);
    }
  } catch (Exception $e) {
    watchdog('commerce_taxamo', 'Error trying to request Taxamo Dashboard Settings: @error', array('@error' => $e->getMessage()), WATCHDOG_ERROR);
    return FALSE;
  }

  return FALSE;
}

function commerce_taxamo_get_token($type) {
  $mode = commerce_taxamo_get_var('commerce_taxamo_mode');
  $token_key = 'commerce_taxamo_' . $type . '_token_' . $mode;
  return commerce_taxamo_get_var($token_key);
}

/**
 * Helper function that returns a new Taxamo data array for an order.
 * @return array Array containing the default Taxamo Data array information.
 */
function commerce_taxamo_reset_taxamo_data() {
  return array(
    'updated' => REQUEST_TIME,
    'status' => COMMERCE_TAXAMO_PRECALCULATED,
    'amount' => 0,
    'currency_code' => 'EUR',
    'transaction' => array(),
    'allow_vat_calculation' => FALSE,
    'force_country' => FALSE,
    'force_country_key' => FALSE,
    'keep_key' => FALSE,
  );
}
