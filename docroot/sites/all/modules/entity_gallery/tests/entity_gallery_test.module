<?php

/**
 * @file
 * A dummy module for testing entity gallery related hooks.
 *
 * This is a dummy module that implements entity gallery related hooks to test
 * API interaction with the Entity Gallery module.
 */

/**
 * Implements hook_modules_enabled().
 */
function entity_gallery_test_modules_enabled($modules) {
  // book.module.
  if (in_array('book', $modules)) {
    // Create an additional entity gallery type.
    $book_entity_gallery_type = array(
      'type' => 'book',
      'name' => t('Book page'),
      'base' => 'entity_gallery_content',
      'description' => t('<em>Books</em> have a built-in hierarchical navigation. Use for handbooks or tutorials.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    );

    $book_entity_gallery_type = entity_gallery_type_set_defaults($book_entity_gallery_type);
    entity_gallery_type_save($book_entity_gallery_type);
    entity_gallery_add_description_field($book_entity_gallery_type);
    // Default to not promoted.
    variable_set('entity_gallery_options_book', array('status'));
    // Use this default type for adding galleries to books.
    variable_set('entity_gallery_allowed_types', array('book'));
    variable_set('entity_gallery_child_type', 'book');
  }
}

/**
 * Implements hook_entity_gallery_info() on behalf of blog.module.
 */
function blog_entity_gallery_info() {
  return array(
    'blog' => array(
      'name' => t('Blog entry'),
      'base' => 'blog',
      'description' => t('Use for multi-user blogs. Every user gets a personal blog.'),
    )
  );
}

/**
 * Implements hook_entity_gallery_info() on behalf of poll.module.
 */
function poll_entity_gallery_info() {
  return array(
    'poll' => array(
      'name' => t('Poll'),
      'base' => 'poll',
      'description' => t('A <em>poll</em> is a question with a set of possible responses. A <em>poll</em>, once created, automatically provides a simple running count of the number of votes received for each response.'),
      'title_label' => t('Question'),
    )
  );
}

/**
 * Implements hook_entity_gallery_info() on behalf of node.module.
 */
function node_entity_gallery_info() {
  return array(
    'article' => array(
      'name' => t('Article'),
      'base' => 'node_content',
      'description' => t('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    'page' => array(
      'name' => t('Basic page'),
      'base' => 'node_content',
      'description' => t("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );
}

/**
 * Implements hook_entity_gallery_load().
 */
function entity_gallery_test_entity_gallery_load($entity_galleries, $types) {
  // Add properties to each loaded entity gallery which record the parameters
  // that were passed in to this function, so the tests can check that (a) this
  // hook was called, and (b) the parameters were what we expected them to be.
  $egids = array_keys($entity_galleries);
  ksort($egids);
  sort($types);
  foreach ($entity_galleries as $entity_gallery) {
    $entity_gallery->entity_gallery_test_loaded_egids = $egids;
    $entity_gallery->entity_gallery_test_loaded_types = $types;
  }
}

/**
 * Implements hook_entity_gallery_presave().
 */
function entity_gallery_test_entity_gallery_presave($entity_gallery) {
  if ($entity_gallery->title == 'testing_entity_gallery_presave') {
    // Sun, 19 Nov 1978 05:00:00 GMT
    $entity_gallery->created = 280299600;
    // Drupal 1.0 release.
    $entity_gallery->changed = 979534800;
  }
  // Determine changes.
  if (!empty($entity_gallery->original) && $entity_gallery->original->title == 'test_changes') {
    if ($entity_gallery->original->title != $entity_gallery->title) {
      $entity_gallery->title .= '_presave';
    }
  }
}

/**
 * Implements hook_entity_gallery_update().
 */
function entity_gallery_test_entity_gallery_update($entity_gallery) {
  // Determine changes on update.
  if (!empty($entity_gallery->original) && $entity_gallery->original->title == 'test_changes') {
    if ($entity_gallery->original->title != $entity_gallery->title) {
      $entity_gallery->title .= '_update';
    }
  }
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function entity_gallery_test_entity_view_mode_alter(&$view_mode, $context) {
  // Only alter the view mode if we are on the test callback.
  if ($change_view_mode = variable_get('entity_gallery_test_change_view_mode', '')) {
    $view_mode = $change_view_mode;
  }
}

/**
 * Implements hook_entity_gallery_insert().
 *
 * This tests saving an entity gallery on entity gallery insert.
 *
 * @see EntityGallerySaveTest::testEntityGallerySaveOnInsert()
 */
function entity_gallery_test_entity_gallery_insert($entity_gallery) {
  // Set the entity gallery title to the entity gallery ID and save.
  if ($entity_gallery->title == 'new') {
    $entity_gallery->title = 'Entity gallery '. $entity_gallery->egid;
    // Remove the is_new flag, so that the entity gallery is updated and not
    // inserted again.
    unset($entity_gallery->is_new);
    entity_gallery_save($entity_gallery);
  }
}
