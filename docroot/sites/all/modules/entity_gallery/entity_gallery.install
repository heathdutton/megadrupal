<?php

/**
 * @file
 * Install, update and uninstall functions for the entity_gallery module.
 */

/**
 * Implements hook_schema().
 */
function entity_gallery_schema() {
  $schema['entity_gallery'] = array(
    'description' => 'The base table for entity galleries.',
    'fields' => array(
      'egid' => array(
        'description' => 'The primary identifier for an entity gallery.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      // Defaults to NULL in order to avoid a brief period of potential
      // deadlocks on the index.
      'vid' => array(
        'description' => 'The current {entity_gallery_revision}.vid version identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'type' => array(
        'description' => 'The {entity_gallery_type}.type of this entity gallery.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'language' => array(
        'description' => 'The {languages}.language of this entity gallery.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The title of this entity gallery, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The {users}.uid that owns this entity gallery; initially, this is the user that created it.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Boolean indicating whether the entity gallery is published (visible to non-administrators).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the entity gallery was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the entity gallery was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'sticky' => array(
        'description' => 'Boolean indicating whether the entity gallery should be displayed at the top of lists in which it appears.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'tegid' => array(
        'description' => 'The translation set id for this entity gallery, which equals the entity gallery id of the source post in each set.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'translate' => array(
        'description' => 'A boolean indicating whether this translation page needs to be updated.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'entity_gallery_changed'     => array('changed'),
      'entity_gallery_created'     => array('created'),
      'entity_gallery_list'        => array('status', 'sticky', 'created'),
      'entity_gallery_status_type' => array('status', 'type', 'egid'),
      'entity_gallery_title_type'  => array('title', array('type', 4)),
      'entity_gallery_type'        => array(array('type', 4)),
      'uid'                        => array('uid'),
      'tegid'                      => array('tegid'),
      'translate'                  => array('translate'),
      'language'                   => array('language'),
    ),
    'unique keys' => array(
      'vid' => array('vid'),
    ),
    'foreign keys' => array(
      'entity_gallery_revision' => array(
        'table' => 'entity_gallery_revision',
        'columns' => array('vid' => 'vid'),
      ),
      'entity_gallery_author' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'primary key' => array('egid'),
  );

  $schema['entity_gallery_revision'] = array(
    'description' => 'Stores information about each saved version of an {entity_gallery}.',
    'fields' => array(
      'egid' => array(
        'description' => 'The {entity_gallery} this version belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'vid' => array(
        'description' => 'The primary identifier for this version.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {users}.uid that created this version.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'title' => array(
        'description' => 'The title of this version.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'log' => array(
        'description' => 'The log entry explaining the changes in this version.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'timestamp' => array(
        'description' => 'A Unix timestamp indicating when this version was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Boolean indicating whether the entity gallery (at the time of this revision) is published (visible to non-administrators).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'sticky' => array(
        'description' => 'Boolean indicating whether the entity gallery (at the time of this revision) should be displayed at the top of lists in which it appears.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'egid' => array('egid'),
      'uid' => array('uid'),
    ),
    'primary key' => array('vid'),
    'foreign keys' => array(
      'versioned_entity_gallery' => array(
        'table' => 'entity_gallery',
        'columns' => array('egid' => 'egid'),
      ),
      'version_author' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  $schema['entity_gallery_type'] = array(
    'description' => 'Stores information about all defined {entity_gallery} types.',
    'fields' => array(
      'type' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The human-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'translatable' => TRUE,
      ),
      'base' => array(
        'description' => 'The base string used to construct callbacks corresponding to this entity gallery type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'module' => array(
        'description' => 'The module defining this entity gallery type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Entity type.',
      ),
      'entity_type_bundles' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
        'description' => 'Entity type bundles.',
      ),
      'description' => array(
        'description' => 'A brief description of this type.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
      'help' => array(
        'description' => 'Help information shown to the user when creating an {entity_gallery} of this type.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
      'has_title' => array(
        'description' => 'Boolean indicating whether this type uses the {entity_gallery}.title field.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'size' => 'tiny',
      ),
      'title_label' => array(
        'description' => 'The label displayed for the title field on the edit form.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'translatable' => TRUE,
      ),
      'custom' => array(
        'description' => 'A boolean indicating whether this type is defined by a module (FALSE) or by a user via Add entity gallery type (TRUE).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'modified' => array(
        'description' => 'A boolean indicating whether this type has been modified by an administrator; currently not used in any way.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'locked' => array(
        'description' => 'A boolean indicating whether the administrator can change the machine name of this type.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'disabled' => array(
        'description' => 'A boolean indicating whether the entity gallery type is disabled.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny'
      ),
      'orig_type' => array(
        'description' => 'The original machine-readable name of this entity gallery type. This may be different from the current type name if the locked field is 0.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('type'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function entity_gallery_install() {
  // Enable default permissions for system roles.
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access entity galleries'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access entity galleries'));

  // Configure default entity gallery pattern if Pathauto is currently
  // installed.
  if (module_exists('pathauto')) {
    variable_set('pathauto_entity_gallery_pattern', 'galleries/[entity_gallery:title]');
  }
}

/**
 * Implements hook_uninstall().
 */
function entity_gallery_uninstall() {
  // Remove the entity reference fields.
  $entity_info = entity_get_info();

  foreach ($entity_info as $entity_type => $entity_type_info) {
    if ($field = field_info_field('entity_gallery_' . $entity_type)) {
      // Remove the entity reference field instances.
      if (!empty($bundles)) {
        foreach ($entity_type_info['bundles'] as $bundle => $bundle_info) {
          if ($instance = field_info_instance('entity_gallery', 'entity_gallery_' . $entity_type, $bundle)) {
            field_delete_instance($instance);
          }
        }
      }

      // Remove the entity reference field.
      field_delete_field('entity_gallery_' . $entity_type);
    }
  }

  // Remove the body fields.
  $entity_info = entity_get_info('entity_gallery');

  if ($field = field_info_field('entity_gallery_description')) {
    // Remove the body field instances.
    if (!empty($bundles)) {
      foreach ($entity_info['bundles'] as $bundle => $bundle_info) {
        if ($instance = field_info_instance('entity_gallery', 'entity_gallery_description', $bundle)) {
          field_delete_instance($instance);
        }
      }
    }

    // Remove the body field.
    field_delete_field('entity_gallery_description');
  }
}
