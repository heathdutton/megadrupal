<?php

/**
 * @file
 * Tests for entity_gallery.module.
 */

/**
 * Defines a base class for testing the Entity Gallery module.
 */
class EntityGalleryWebTestCase extends DrupalWebTestCase {
  function setUp() {
    $modules = func_get_args();
    if (isset($modules[0]) && is_array($modules[0])) {
      $modules = $modules[0];
    }
    $modules[] = 'entity_gallery';
    parent::setUp($modules);

    // Create Node and File gallery types.
    if ($this->profile == 'standard') {
      $this->drupalCreateGalleryType(array('type' => 'node', 'entity_type' => 'node', 'name' => 'Node'));
      $this->drupalCreateGalleryType(array('type' => 'file', 'entity_type' => 'file', 'name' => 'File'));
    }
  }

  /**
   * Get an entity gallery from the database based on its title.
   *
   * @param $title
   *   An entity gallery title, usually generated by $this->randomName().
   * @param $reset
   *   (optional) Whether to reset the internal entity_gallery_load() cache.
   *
   * @return
   *   An entity gallery object matching $title.
   */
  function drupalGetEntityGalleryByTitle($title, $reset = FALSE) {
    $entity_galleries = entity_gallery_load_multiple(array(), array('title' => $title), $reset);
    // Load the first entity gallery returned from the database.
    $returned_entity_gallery = reset($entity_galleries);
    return $returned_entity_gallery;
  }

  /**
   * Creates an entity gallery based on default settings.
   *
   * @param $settings
   *   An associative array of settings to change from the defaults, keys are
   *   entity gallery properties, for example 'title' => 'Hello, world!'.
   * @return
   *   Created entity gallery object.
   */
  protected function drupalCreateEntityGallery($settings = array()) {
    // Populate defaults array.
    $settings += array(
      'entity_gallery_description' => array(LANGUAGE_NONE => array(array())),
      'title'                      => $this->randomName(8),
      'changed'                    => REQUEST_TIME,
      'moderate'                   => 0,
      'revision'                   => 1,
      'log'                        => '',
      'status'                     => 1,
      'sticky'                     => 0,
      'type'                       => 'file',
      'revisions'                  => NULL,
      'language'                   => LANGUAGE_NONE,
    );

    // Use the original entity gallery's created time for existing entity
    // galleries.
    if (isset($settings['created']) && !isset($settings['date'])) {
      $settings['date'] = format_date($settings['created'], 'custom', 'Y-m-d H:i:s O');
    }

    // If the entity gallery's user uid is not specified manually, use the
    // currently logged in user if available, or else the user running the test.
    if (!isset($settings['uid'])) {
      if ($this->loggedInUser) {
        $settings['uid'] = $this->loggedInUser->uid;
      }
      else {
        global $user;
        $settings['uid'] = $user->uid;
      }
    }

    // Merge description field value and format separately.
    $description = array(
      'value' => $this->randomName(32),
      'format' => filter_default_format(),
    );
    $settings['entity_gallery_description'][$settings['language']][0] += $description;

    $entity_gallery = (object) $settings;
    entity_gallery_save($entity_gallery);

    // Small hack to link revisions to our test user.
    db_update('entity_gallery_revision')
      ->fields(array('uid' => $entity_gallery->uid))
      ->condition('vid', $entity_gallery->vid)
      ->execute();
    return $entity_gallery;
  }

  /**
   * Creates a custom gallery type based on default settings.
   *
   * @param $settings
   *   An array of settings to change from the defaults.
   *   Example: 'type' => 'foo'.
   * @return
   *   Created gallery type.
   */
  protected function drupalCreateGalleryType($settings = array()) {
    // Find a non-existent random type name.
    do {
      $name = strtolower($this->randomName(8));
    } while (entity_gallery_type_get_type($name));

    // Populate defaults array.
    $defaults = array(
      'type' => $name,
      'name' => $name,
      'base' => 'entity_gallery_content',
      'entity_type' => 'user',
      'entity_type_bundles' => array(),
      'description' => '',
      'help' => '',
      'title_label' => 'Title',
      'description_label' => 'Description',
      'has_title' => 1,
      'has_description' => 1,
    );
    // Imposed values for a custom type.
    $forced = array(
      'orig_type' => '',
      'old_type' => '',
      'module' => 'entity_gallery',
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    );
    $type = $forced + $settings + $defaults;
    $type = (object) $type;

    $saved_type = entity_gallery_type_save($type);
    entity_gallery_types_rebuild();
    menu_rebuild();
    entity_gallery_add_description_field($type);

    $this->assertEqual($saved_type, SAVED_NEW, t('Created gallery type %type.', array('%type' => $type->type)));

    // Reset permissions so that permissions for this gallery type are available.
    $this->checkPermissions(array(), TRUE);

    return $type;
  }
}

/**
 * Test the entity_gallery_load_multiple() function.
 */
class EntityGalleryLoadMultipleTestCase extends EntityGalleryWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Load multiple entity galleries',
      'description' => 'Test the loading of multiple entity galleries.',
      'group' => 'Entity Gallery',
    );
  }

  function setUp() {
    parent::setUp();
    $web_user = $this->drupalCreateUser(array('create node entity gallery', 'create file entity gallery'));
    $this->drupalLogin($web_user);
  }

  /**
   * Create four entity galleries and ensure they're loaded correctly.
   */
  function testEntityGalleryMultipleLoad() {
    $entity_gallery1 = $this->drupalCreateEntityGallery(array('type' => 'node', 'sticky' => 1));
    $entity_gallery2 = $this->drupalCreateEntityGallery(array('type' => 'node', 'sticky' => 1));
    $entity_gallery3 = $this->drupalCreateEntityGallery(array('type' => 'node', 'sticky' => 0));
    $entity_gallery4 = $this->drupalCreateEntityGallery(array('type' => 'file', 'sticky' => 0));

    // Load entity galleries with only a condition. Nodes 3 and 4 will be
    // loaded.
    $entity_galleries = entity_gallery_load_multiple(NULL, array('sticky' => 0));
    $this->assertEqual($entity_gallery3->title, $entity_galleries[$entity_gallery3->egid]->title, 'Entity gallery was loaded.');
    $this->assertEqual($entity_gallery4->title, $entity_galleries[$entity_gallery4->egid]->title, 'Entity gallery was loaded.');
    $count = count($entity_galleries);
    $this->assertTrue($count == 2, format_string('@count entity galleries loaded.', array('@count' => $count)));

    // Load entity galleries by egid. Entity galleries 1, 2 and 4 will be loaded.
    $entity_galleries = entity_gallery_load_multiple(array(1, 2, 4));
    $count = count($entity_galleries);
    $this->assertTrue(count($entity_galleries) == 3, format_string('@count entity galleries loaded', array('@count' => $count)));
    $this->assertTrue(isset($entity_galleries[$entity_gallery1->egid]), 'Entity gallery is correctly keyed in the array');
    $this->assertTrue(isset($entity_galleries[$entity_gallery2->egid]), 'Entity gallery is correctly keyed in the array');
    $this->assertTrue(isset($entity_galleries[$entity_gallery4->egid]), 'Entity gallery is correctly keyed in the array');
    foreach ($entity_galleries as $entity_gallery) {
      $this->assertTrue(is_object($entity_gallery), 'Entity gallery is an object');
    }

    // Load entity galleries by egid, where type = node. Entity galleries 1, 2
    // and 3 will be loaded.
    $entity_galleries = entity_gallery_load_multiple(array(1, 2, 3, 4), array('type' => 'node'));
    $count = count($entity_galleries);
    $this->assertTrue($count == 3, format_string('@count entity galleries loaded', array('@count' => $count)));
    $this->assertEqual($entity_galleries[$entity_gallery1->egid]->title, $entity_gallery1->title, 'Entity gallery successfully loaded.');
    $this->assertEqual($entity_galleries[$entity_gallery2->egid]->title, $entity_gallery2->title, 'Entity gallery successfully loaded.');
    $this->assertEqual($entity_galleries[$entity_gallery3->egid]->title, $entity_gallery3->title, 'Entity gallery successfully loaded.');
    $this->assertFalse(isset($entity_galleries[$entity_gallery4->egid]));

    // Now that all entity galleries have been loaded into the static cache,
    // ensure that they are loaded correctly again when a condition is passed.
    $entity_galleries = entity_gallery_load_multiple(array(1, 2, 3, 4), array('type' => 'node'));
    $count = count($entity_galleries);
    $this->assertTrue($count == 3, format_string('@count entity galleries loaded.', array('@count' => $count)));
    $this->assertEqual($entity_galleries[$entity_gallery1->egid]->title, $entity_gallery1->title, 'Entity gallery successfully loaded');
    $this->assertEqual($entity_galleries[$entity_gallery2->egid]->title, $entity_gallery2->title, 'Entity gallery successfully loaded');
    $this->assertEqual($entity_galleries[$entity_gallery3->egid]->title, $entity_gallery3->title, 'Entity gallery successfully loaded');
    $this->assertFalse(isset($entity_galleries[$entity_gallery4->egid]), 'Entity gallery was not loaded');

    // Load entity galleries by egid, where type = node and sticky = 0.
    $entity_galleries = entity_gallery_load_multiple(array(1, 2, 3, 4), array('type' => 'node', 'sticky' => 0));
    $count = count($entity_galleries);
    $this->assertTrue($count == 1, format_string('@count entity gallery loaded', array('@count' => $count)));
    $this->assertEqual($entity_galleries[$entity_gallery3->egid]->title, $entity_gallery3->title, 'Entity gallery successfully loaded.');
  }
}

/**
 * Tests for the hooks invoked during entity_gallery_load().
 */
class EntityGalleryLoadHooksTestCase extends EntityGalleryWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Entity gallery load hooks',
      'description' => 'Test the hooks invoked when an entity gallery is being loaded.',
      'group' => 'Entity Gallery',
    );
  }

  function setUp() {
    parent::setUp('entity_gallery_test');
  }

  /**
   * Test that hook_entity_gallery_load() is invoked correctly.
   */
  function testHookEntityGalleryLoad() {
    // Create some sample node and file galleries.
    $entity_gallery1 = $this->drupalCreateEntityGallery(array('type' => 'node', 'status' => ENTITY_GALLERY_PUBLISHED));
    $entity_gallery2 = $this->drupalCreateEntityGallery(array('type' => 'node', 'status' => ENTITY_GALLERY_PUBLISHED));
    $entity_gallery3 = $this->drupalCreateEntityGallery(array('type' => 'node', 'status' => ENTITY_GALLERY_NOT_PUBLISHED));
    $entity_gallery4 = $this->drupalCreateEntityGallery(array('type' => 'file', 'status' => ENTITY_GALLERY_NOT_PUBLISHED));

    // Check that when a set of entity galleries that only contains nodes is
    // loaded, the properties added to the entity gallery by
    // entity_gallery_test_load_entity_gallery() correctly reflect the expected
    // values.
    $entity_galleries = entity_gallery_load_multiple(array(), array('status' => ENTITY_GALLERY_PUBLISHED));
    $loaded_entity_gallery = end($entity_galleries);
    $this->assertEqual($loaded_entity_gallery->entity_gallery_test_loaded_egids, array($entity_gallery1->egid, $entity_gallery2->egid), 'hook_entity_gallery_load() received the correct list of entity gallery IDs the first time it was called.');
    $this->assertEqual($loaded_entity_gallery->entity_gallery_test_loaded_types, array('node'), 'hook_entity_gallery_load() received the correct list of entity gallery types the first time it was called.');

    // Now, as part of the same page request, load a set of entity galleries
    // that contain both nodes and files, and make sure the parameters passed to
    // entity_gallery_test_entity_gallery_load() are correctly updated.
    $entity_galleries = entity_gallery_load_multiple(array(), array('status' => ENTITY_GALLERY_NOT_PUBLISHED));
    $loaded_entity_gallery = end($entity_galleries);
    $this->assertEqual($loaded_entity_gallery->entity_gallery_test_loaded_egids, array($entity_gallery3->egid, $entity_gallery4->egid), 'hook_entity_gallery_load() received the correct list of entity gallery IDs the second time it was called.');
    $this->assertEqual($loaded_entity_gallery->entity_gallery_test_loaded_types, array('file', 'node'), 'hook_entity_gallery_load() received the correct list of entity gallery types the second time it was called.');
  }
}

/**
 * Tests the entity gallery revision functionality.
 */
class EntityGalleryRevisionsTestCase extends EntityGalleryWebTestCase {

  /**
   * Entity galleries used by the test.
   *
   * @var array
   */
  protected $entity_galleries;

  /**
   * The revision messages for entity gallery revisions created in the test.
   *
   * @var array
   */
  protected $logs;

  public static function getInfo() {
    return array(
      'name' => 'Entity gallery revisions',
      'description' => 'Create an entity gallery with revisions and test viewing, saving, reverting, and deleting revisions.',
      'group' => 'Entity Gallery',
    );
  }

  function setUp() {
    parent::setUp();

    // Create and login user.
    $web_user = $this->drupalCreateUser(array('view entity gallery revisions', 'revert entity gallery revisions', 'edit any file entity gallery',
                                               'delete entity gallery revisions', 'delete any file entity gallery'));
    $this->drupalLogin($web_user);

    // Create initial entity gallery.
    $entity_gallery = $this->drupalCreateEntityGallery();
    $settings = get_object_vars($entity_gallery);
    $settings['revision'] = 1;

    $entity_galleries = array();
    $logs = array();

    // Get original entity gallery.
    $entity_galleries[] = $entity_gallery;

    // Create three revisions.
    $revision_count = 3;
    for ($i = 0; $i < $revision_count; $i++) {
      $logs[] = $settings['log'] = $this->randomName(32);

      // Create revision with random title and description and update variables.
      $this->drupalCreateEntityGallery($settings);
      $entity_gallery = entity_gallery_load($entity_gallery->egid); // Make sure we get revision information.
      debug($entity_gallery);
      $settings = get_object_vars($entity_gallery);

      $entity_galleries[] = $entity_gallery;
    }

    $this->entity_galleries = $entity_galleries;
    $this->logs = $logs;
  }

  /**
   * Checks entity gallery revision related operations.
   */
  function testRevisions() {
    $entity_galleries = $this->entity_galleries;
    $logs = $this->logs;

    // Get last entity gallery for simple checks.
    $entity_gallery = $entity_galleries[3];

    // Confirm the correct revision text appears on "view revisions" page.
    $this->drupalGet("gallery/$entity_gallery->egid/revisions/$entity_gallery->vid/view");
    $this->assertText($entity_gallery->entity_gallery_description[LANGUAGE_NONE][0]['value'], 'Correct text displays for version.');

    // Confirm the correct log message appears on "revisions overview" page.
    $this->drupalGet("gallery/$entity_gallery->egid/revisions");
    foreach ($logs as $log) {
      $this->assertText($log, 'Log message found.');
    }

    // Confirm that revisions revert properly.
    $this->drupalPost("gallery/$entity_gallery->egid/revisions/{$entity_galleries[1]->vid}/revert", array(), t('Revert'));
    $this->assertRaw(t('@type %title has been reverted back to the revision from %revision-date.',
                        array('@type' => 'File', '%title' => $entity_galleries[1]->title,
                              '%revision-date' => format_date($entity_galleries[1]->revision_timestamp))), 'Revision reverted.');
    $reverted_entity_gallery = entity_gallery_load($entity_gallery->egid);
    $this->assertTrue(($entity_galleries[1]->entity_gallery_description[LANGUAGE_NONE][0]['value'] == $reverted_entity_gallery->entity_gallery_description[LANGUAGE_NONE][0]['value']), 'Entity gallery reverted correctly.');

    // Confirm revisions delete properly.
    $this->drupalPost("gallery/$entity_gallery->egid/revisions/{$entity_galleries[1]->vid}/delete", array(), t('Delete'));
    $this->assertRaw(t('Revision from %revision-date of @type %title has been deleted.',
                        array('%revision-date' => format_date($entity_galleries[1]->revision_timestamp),
                              '@type' => 'File', '%title' => $entity_galleries[1]->title)), 'Revision deleted.');
    $this->assertTrue(db_query('SELECT COUNT(vid) FROM {entity_gallery_revision} WHERE egid = :egid and vid = :vid', array(':egid' => $entity_gallery->egid, ':vid' => $entity_galleries[1]->vid))->fetchField() == 0, 'Revision not found.');
  }

  /**
   * Checks that revisions are correctly saved without log messages.
   */
  function testEntityGalleryRevisionWithoutLogMessage() {
    // Create an entity gallery with an initial log message.
    $log = $this->randomName(10);
    $entity_gallery = $this->drupalCreateEntityGallery(array('log' => $log));

    // Save over the same revision and explicitly provide an empty log message
    // (for example, to mimic the case of an entity gallery form submitted with
    // no text in the "log message" field), and check that the original log
    // message is preserved.
    $new_title = $this->randomName(10) . 'testEntityGalleryRevisionWithoutLogMessage1';
    $updated_entity_gallery = (object) array(
      'egid' => $entity_gallery->egid,
      'vid' => $entity_gallery->vid,
      'uid' => $entity_gallery->uid,
      'type' => $entity_gallery->type,
      'title' => $new_title,
      'log' => '',
    );
    entity_gallery_save($updated_entity_gallery);
    $this->drupalGet('gallery/' . $entity_gallery->egid);
    $this->assertText($new_title, 'New entity gallery title appears on the page.');
    $entity_gallery_revision = entity_gallery_load($entity_gallery->egid, NULL, TRUE);
    $this->assertEqual($entity_gallery_revision->log, $log, 'After an existing entity gallery revision is re-saved without a log message, the original log message is preserved.');

    // Create another entity gallery with an initial log message.
    $entity_gallery = $this->drupalCreateEntityGallery(array('log' => $log));

    // Save a new entity gallery revision without providing a log message, and
    // check that this revision has an empty log message.
    $new_title = $this->randomName(10) . 'testEntityGalleryRevisionWithoutLogMessage2';
    $updated_entity_gallery = (object) array(
      'egid' => $entity_gallery->egid,
      'vid' => $entity_gallery->vid,
      'uid' => $entity_gallery->uid,
      'type' => $entity_gallery->type,
      'title' => $new_title,
      'revision' => 1,
    );
    entity_gallery_save($updated_entity_gallery);
    $this->drupalGet('gallery/' . $entity_gallery->egid);
    $this->assertText($new_title, 'New entity gallery title appears on the page.');
    $entity_gallery_revision = entity_gallery_load($entity_gallery->egid, NULL, TRUE);
    $this->assertTrue(empty($entity_gallery_revision->log), 'After a new entity gallery revision is saved with an empty log message, the log message for the entity gallery is empty.');
  }
}

/**
 * Tests the entity gallery edit functionality.
 */
class EntityGalleryEditTestCase extends EntityGalleryWebTestCase {

  /**
   * A user with permission to create and edit own file gallery.
   *
   * @var object
   */
  protected $web_user;

  /**
   * A user with permission to bypass entity gallery access and administer entity galleries.
   *
   * @var object
   */
  protected $admin_user;

  public static function getInfo() {
    return array(
      'name' => 'Entity gallery edit',
      'description' => 'Create an entity gallery and test entity gallery edit functionality.',
      'group' => 'Entity Gallery',
    );
  }

  function setUp() {
    parent::setUp();

    $this->web_user = $this->drupalCreateUser(array('edit own file entity gallery', 'create file entity gallery'));
    $this->admin_user = $this->drupalCreateUser(array('bypass entity gallery access', 'administer entity galleries'));
  }

  /**
   * Checks entity gallery edit functionality.
   */
  function testEntityGalleryEdit() {
    $this->drupalLogin($this->web_user);

    $langcode = LANGUAGE_NONE;
    $title_key = "title";
    $description_key = "entity_gallery_description[$langcode][0][value]";
    // Create entity gallery to edit.
    $edit = array();
    $edit[$title_key] = $this->randomName(8);
    $edit[$description_key] = $this->randomName(16);
    $this->drupalPost('gallery/add/file', $edit, t('Save'));

    // Check that the entity gallery exists in the database.
    $entity_gallery = $this->drupalGetEntityGalleryByTitle($edit[$title_key]);
    $this->assertTrue($entity_gallery, 'Entity gallery found in database.');

    // Check that "edit" link points to correct page.
    $this->clickLink(t('Edit'));
    $edit_url = url("gallery/$entity_gallery->egid/edit", array('absolute' => TRUE));
    $actual_url = $this->getURL();
    $this->assertEqual($edit_url, $actual_url, 'On edit page.');

    // Check that the title and description fields are displayed with the correct values.
    $active = '<span class="element-invisible">' . t('(active tab)') . '</span>';
    $link_text = t('!local-task-title!active', array('!local-task-title' => t('Edit'), '!active' => $active));
    $this->assertText(strip_tags($link_text), 0, 'Edit tab found and marked active.');
    $this->assertFieldByName($title_key, $edit[$title_key], 'Title field displayed.');
    $this->assertFieldByName($description_key, $edit[$description_key], 'Description field displayed.');

    // Edit the content of the entity gallery.
    $edit = array();
    $edit[$title_key] = $this->randomName(8);
    $edit[$description_key] = $this->randomName(16);
    // Stay on the current page, without reloading.
    $this->drupalPost(NULL, $edit, t('Save'));

    // Check that the title and description fields are displayed with the updated values.
    $this->assertText($edit[$title_key], 'Title displayed.');
    $this->assertText($edit[$description_key], 'Description displayed.');

    // Login as a second administrator user.
    $second_web_user = $this->drupalCreateUser(array('administer entity galleries', 'edit any file entity gallery'));
    $this->drupalLogin($second_web_user);
    // Edit the same entity gallery, creating a new revision.
    $this->drupalGet("gallery/$entity_gallery->egid/edit");
    $edit = array();
    $edit['title'] = $this->randomName(8);
    $edit[$description_key] = $this->randomName(16);
    $edit['revision'] = TRUE;
    $this->drupalPost(NULL, $edit, t('Save'));

    // Ensure that the entity gallery revision has been created.
    $revised_entity_gallery = $this->drupalGetEntityGalleryByTitle($edit['title']);
    $this->assertNotIdentical($entity_gallery->vid, $revised_entity_gallery->vid, 'A new revision has been created.');
    // Ensure that the entity gallery author is preserved when it was not
    // changed in the edit form.
    $this->assertIdentical($entity_gallery->uid, $revised_entity_gallery->uid, 'The entity gallery author has been preserved.');
    // Ensure that the revision authors are different since the revisions were
    // made by different users.
    $first_entity_gallery_version = entity_gallery_load($entity_gallery->egid, $entity_gallery->vid);
    $second_entity_gallery_version = entity_gallery_load($entity_gallery->egid, $revised_entity_gallery->vid);
    $this->assertNotIdentical($first_entity_gallery_version->revision_uid, $second_entity_gallery_version->revision_uid, 'Each revision has a distinct user.');
  }

  /**
   * Tests changing an entity gallery's "authored by" field.
   */
  function testEntityGalleryAuthoredBy() {
    $this->drupalLogin($this->admin_user);

    // Create entity gallery to edit.
    $langcode = LANGUAGE_NONE;
    $description_key = "entity_gallery_description[$langcode][0][value]";
    $edit = array();
    $edit['title'] = $this->randomName(8);
    $edit[$description_key] = $this->randomName(16);
    $this->drupalPost('gallery/add/file', $edit, t('Save'));

    // Check that the entity gallery was authored by the currently logged in
    // user.
    $entity_gallery = $this->drupalGetEntityGalleryByTitle($edit['title']);
    $this->assertIdentical($entity_gallery->uid, $this->admin_user->uid, 'Entity gallery authored by admin user.');

    // Try to change the 'authored by' field to an invalid user name.
    $edit = array(
      'name' => 'invalid-name',
    );
    $this->drupalPost('gallery/' . $entity_gallery->egid . '/edit', $edit, t('Save'));
    $this->assertText('The username invalid-name does not exist.');

    // Change the authored by field to an empty string, which should assign
    // authorship to the anonymous user (uid 0).
    $edit['name'] = '';
    $this->drupalPost('gallery/' . $entity_gallery->egid . '/edit', $edit, t('Save'));
    $entity_gallery = entity_gallery_load($entity_gallery->egid, NULL, TRUE);
    $this->assertIdentical($entity_gallery->uid, '0', 'Entity gallery authored by anonymous user.');

    // Change the authored by field to another user's name (that is not
    // logged in).
    $edit['name'] = $this->web_user->name;
    $this->drupalPost('gallery/' . $entity_gallery->egid . '/edit', $edit, t('Save'));
    $entity_gallery = entity_gallery_load($entity_gallery->egid, NULL, TRUE);
    $this->assertIdentical($entity_gallery->uid, $this->web_user->uid, 'Entity gallery authored by normal user.');

    // Check that normal users cannot change the authored by information.
    $this->drupalLogin($this->web_user);
    $this->drupalGet('gallery/' . $entity_gallery->egid . '/edit');
    $this->assertNoFieldByName('name');
  }
}

/**
 * Tests the entity gallery entity preview functionality.
 */
class EntityGalleryPreviewTestCase extends EntityGalleryWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Entity gallery preview',
      'description' => 'Test entity gallery preview functionality.',
      'group' => 'Entity Gallery',
    );
  }

  function setUp() {
    parent::setUp();

    $web_user = $this->drupalCreateUser(array('edit own file entity gallery', 'create file entity gallery'));
    $this->drupalLogin($web_user);
  }

  /**
   * Checks the entity gallery preview functionality.
   */
  function testEntityGalleryPreview() {
    $langcode = LANGUAGE_NONE;
    $title_key = "title";
    $description_key = "entity_gallery_description[$langcode][0][value]";

    // Fill in entity gallery creation form and preview entity gallery.
    $edit = array();
    $edit[$title_key] = $this->randomName(8);
    $edit[$description_key] = $this->randomName(16);
    $this->drupalPost('gallery/add/file', $edit, t('Preview'));

    // Check that the preview is displaying the title and description.
    $this->assertTitle(t('Preview | Drupal'), 'Files gallery title is preview.');
    $this->assertText($edit[$title_key], 'Title displayed.');
    $this->assertText($edit[$description_key], 'Description displayed.');

    // Check that the title and description fields are displayed with the correct values.
    $this->assertFieldByName($title_key, $edit[$title_key], 'Title field displayed.');
    $this->assertFieldByName($description_key, $edit[$description_key], 'Description field displayed.');
  }

  /**
   * Checks the entity gallery preview functionality, when using revisions.
   */
  function testEntityGalleryPreviewWithRevisions() {
    $langcode = LANGUAGE_NONE;
    $title_key = "title";
    $description_key = "entity_gallery_description[$langcode][0][value]";
    // Force revision on "Files" gallery.
    variable_set('entity_gallery_options_file', array('status', 'revision'));

    // Fill in entity gallery creation form and preview entity gallery.
    $edit = array();
    $edit[$title_key] = $this->randomName(8);
    $edit[$description_key] = $this->randomName(16);
    $edit['log'] = $this->randomName(32);
    $this->drupalPost('gallery/add/file', $edit, t('Preview'));

    // Check that the preview is displaying the title and description.
    $this->assertTitle(t('Preview | Drupal'), 'Files gallery title is preview.');
    $this->assertText($edit[$title_key], 'Title displayed.');
    $this->assertText($edit[$description_key], 'Description displayed.');

    // Check that the title and description fields are displayed with the correct values.
    $this->assertFieldByName($title_key, $edit[$title_key], 'Title field displayed.');
    $this->assertFieldByName($description_key, $edit[$description_key], 'Description field displayed.');

    // Check that the log field has the correct value.
    $this->assertFieldByName('log', $edit['log'], 'Log field displayed.');
  }
}

/**
 * Tests creating and saving an entity gallery.
 */
class EntityGalleryCreationTestCase extends EntityGalleryWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Entity gallery creation',
      'description' => 'Create an entity gallery and test saving it.',
      'group' => 'Entity Gallery',
    );
  }

  function setUp() {
    // Enable dummy module that implements hook_entity_gallery_insert for exceptions.
    parent::setUp('entity_gallery_test_exception');

    $web_user = $this->drupalCreateUser(array('create file entity gallery', 'edit own file entity gallery'));
    $this->drupalLogin($web_user);
  }

  /**
   * Creates a "Files" entity gallery and verifies its consistency in the database.
   */
  function testEntityGalleryCreation() {
    // Create an entity gallery.
    $edit = array();
    $langcode = LANGUAGE_NONE;
    $edit["title"] = $this->randomName(8);
    $edit["entity_gallery_description[$langcode][0][value]"] = $this->randomName(16);
    $this->drupalPost('gallery/add/file', $edit, t('Save'));

    // Check that the Files gallery has been created.
    $this->assertRaw(t('!post %title has been created.', array('!post' => 'File', '%title' => $edit["title"])), 'File gallery created.');

    // Check that the entity gallery exists in the database.
    $entity_gallery = $this->drupalGetEntityGalleryByTitle($edit["title"]);
    $this->assertTrue($entity_gallery, 'Entity gallery found in database.');
  }

  /**
   * Verifies that a transaction rolls back the failed creation.
   */
  function testFailedEntityGalleryCreation() {
    // Create an entity gallery.
    $edit = array(
      'uid'      => $this->loggedInUser->uid,
      'name'     => $this->loggedInUser->name,
      'type'     => 'file',
      'language' => LANGUAGE_NONE,
      'title'    => 'testing_transaction_exception',
    );

    try {
      // An exception is generated by entity_gallery_test_exception_entity_gallery_insert() if the
      // title is 'testing_transaction_exception'.
      entity_gallery_save((object) $edit);
      $this->fail(t('Expected exception has not been thrown.'));
    }
    catch (Exception $e) {
      $this->pass(t('Expected exception has been thrown.'));
    }

    if (Database::getConnection()->supportsTransactions()) {
      // Check that the entity gallery does not exist in the database.
      $entity_gallery = $this->drupalGetEntityGalleryByTitle($edit['title']);
      $this->assertFalse($entity_gallery, 'Transactions supported, and entity gallery not found in database.');
    }
    else {
      // Check that the entity gallery exists in the database.
      $entity_gallery = $this->drupalGetEntityGalleryByTitle($edit['title']);
      $this->assertTrue($entity_gallery, 'Transactions not supported, and entity gallery found in database.');

      // Check that the failed rollback was logged.
      $records = db_query("SELECT wid FROM {watchdog} WHERE message LIKE 'Explicit rollback failed%'")->fetchAll();
      $this->assertTrue(count($records) > 0, 'Transactions not supported, and rollback error logged to watchdog.');
    }

    // Check that the rollback error was logged.
    $records = db_query("SELECT wid FROM {watchdog} WHERE variables LIKE '%Test exception for rollback.%'")->fetchAll();
    $this->assertTrue(count($records) > 0, 'Rollback explanatory error logged to watchdog.');
  }

  /**
   * Create an unpublished entity gallery and confirm correct redirect behavior.
   */
  function testUnpublishedEntityGalleryCreation() {
    // Set "Files" gallery type to be unpublished by default.
    variable_set('entity_gallery_options_file', array());
    // Set the front page to the default "node" page.
    variable_set('site_frontpage', 'node');

    // Create an entity gallery.
    $edit = array();
    $edit["title"] = $this->randomName(8);
    $edit["entity_gallery_description[" . LANGUAGE_NONE . "][0][value]"] = $this->randomName(16);
    $this->drupalPost('gallery/add/file', $edit, t('Save'));

    // Check that the user was redirected to the home page.
    $this->assertText(t('Welcome to Drupal'), t('The user is redirected to the home page.'));
  }
}

/**
 * Tests the functionality of entity gallery entity edit permissions.
 */
class EntityGalleryViewTestCase extends EntityGalleryWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Entity gallery edit permissions',
      'description' => 'Create an entity gallery and test edit permissions.',
      'group' => 'Entity Gallery',
    );
  }

  /**
   * Tests an anonymous and unpermissioned user attempting to edit the entity gallery.
   */
  function testEntityGalleryView() {
    // Create an entity gallery to view.
    $entity_gallery = $this->drupalCreateEntityGallery();
    $this->assertTrue(entity_gallery_load($entity_gallery->egid), 'Entity gallery created.');

    // Try to edit with anonymous user.
    $html = $this->drupalGet("gallery/$entity_gallery->egid/edit");
    $this->assertResponse(403);

    // Create a user without permission to edit entity gallery.
    $web_user = $this->drupalCreateUser(array('access entity galleries'));
    $this->drupalLogin($web_user);

    // Attempt to access edit page.
    $this->drupalGet("gallery/$entity_gallery->egid/edit");
    $this->assertResponse(403);

    // Create user with permission to edit entity gallery.
    $web_user = $this->drupalCreateUser(array('bypass entity gallery access'));
    $this->drupalLogin($web_user);

    // Attempt to access edit page.
    $this->drupalGet("gallery/$entity_gallery->egid/edit");
    $this->assertResponse(200);
  }
}

/**
 * Tests XSS functionality with an entity gallery entity.
 */
class EntityGalleryTitleXSSTestCase extends EntityGalleryWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Entity gallery title XSS filtering',
      'description' => 'Create an entity gallery with dangerous tags in its title and test that they are escaped.',
      'group' => 'Entity Gallery',
    );
  }

  /**
   * Tests XSS functionality with an entity gallery entity.
   */
  function testEntityGalleryTitleXSS() {
    // Prepare a user to do the stuff.
    $web_user = $this->drupalCreateUser(array('create file entity gallery', 'edit any file entity gallery'));
    $this->drupalLogin($web_user);

    $xss = '<script>alert("xss")</script>';
    $title = $xss . $this->randomName();
    $edit = array("title" => $title);

    $this->drupalPost('gallery/add/file', $edit, t('Preview'));
    $this->assertNoRaw($xss, 'Harmful tags are escaped when previewing an entity gallery.');

    $settings = array('title' => $title);
    $entity_gallery = $this->drupalCreateEntityGallery($settings);

    $this->drupalGet('gallery/' . $entity_gallery->egid);
    // assertTitle() decodes HTML-entities inside the <title> element.
    $this->assertTitle($edit["title"] . ' | Drupal', 'Title is diplayed when viewing an entity gallery.');
    $this->assertNoRaw($xss, 'Harmful tags are escaped when viewing an entity gallery.');

    $this->drupalGet('gallery/' . $entity_gallery->egid . '/edit');
    $this->assertNoRaw($xss, 'Harmful tags are escaped when editing an entity gallery.');
  }
}

/**
 * Checks that the post information displays when enabled for a gallery type.
 */
class EntityGalleryPostSettingsTestCase extends EntityGalleryWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Entity gallery post information display',
      'description' => 'Check that the post information (submitted by Username on date) text displays appropriately.',
      'group' => 'Entity Gallery',
    );
  }

  function setUp() {
    parent::setUp();

    $web_user = $this->drupalCreateUser(array('create file entity gallery', 'administer entity gallery types', 'access user profiles'));
    $this->drupalLogin($web_user);
  }

  /**
   * Confirms "Files" gallery type and post information is on a new entity gallery.
   */
  function testEntityGalleryPostInfo() {

    // Set "Files" gallery type to display post information.
    $edit = array();
    $edit['entity_gallery_submitted'] = TRUE;
    $this->drupalPost('admin/structure/gallery-types/manage/file', $edit, t('Save gallery type'));

    // Create an entity gallery.
    $edit = array();
    $langcode = LANGUAGE_NONE;
    $edit["title"] = $this->randomName(8);
    $edit["entity_gallery_description[$langcode][0][value]"] = $this->randomName(16);
    $this->drupalPost('gallery/add/file', $edit, t('Save'));

    // Check that the post information is displayed.
    $entity_gallery = $this->drupalGetEntityGalleryByTitle($edit["title"]);
    $elements = $this->xpath('//div[contains(@class,:class)]', array(':class' => 'submitted'));
    $this->assertEqual(count($elements), 1, 'Post information is displayed.');
  }

  /**
   * Confirms absence of post information on a new entity gallery.
   */
  function testEntityGalleryNotPostInfo() {

    // Set "Files" gallery type to display post information.
    $edit = array();
    $edit['entity_gallery_submitted'] = FALSE;
    $this->drupalPost('admin/structure/gallery-types/manage/file', $edit, t('Save gallery type'));

    // Create an entity gallery.
    $edit = array();
    $langcode = LANGUAGE_NONE;
    $edit["title"] = $this->randomName(8);
    $edit["entity_gallery_description[$langcode][0][value]"] = $this->randomName(16);
    $this->drupalPost('gallery/add/file', $edit, t('Save'));

    // Check that the post information is displayed.
    $entity_gallery = $this->drupalGetEntityGalleryByTitle($edit["title"]);
    $this->assertNoRaw('<span class="submitted">', 'Post information is not displayed.');
  }
}

/**
 * Tests basic entity_gallery_access functionality.
 *
 * @todo Cover hook_entity_gallery_access in a separate test class.
 */
class EntityGalleryAccessTestCase extends EntityGalleryWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Entity gallery access',
      'description' => 'Test entity_gallery_access function',
      'group' => 'Entity Gallery',
    );
  }

  /**
   * Asserts entity_gallery_access() correctly grants or denies access.
   */
  function assertEntityGalleryAccess($ops, $entity_gallery, $account) {
    foreach ($ops as $op => $result) {
      $msg = format_string("entity_gallery_access returns @result with operation '@op'.", array('@result' => $result ? 'true' : 'false', '@op' => $op));
      $this->assertEqual($result, entity_gallery_access($op, $entity_gallery, $account), $msg);
    }
  }

  function setUp() {
    parent::setUp();
    // Clear permissions for authenticated users.
    db_delete('role_permission')
      ->condition('rid', DRUPAL_AUTHENTICATED_RID)
      ->execute();
  }

  /**
   * Runs basic tests for entity_gallery_access function.
   */
  function testEntityGalleryAccess() {
    // Ensures user without 'access entity galleries' permission can do nothing.
    $web_user1 = $this->drupalCreateUser(array('create file entity gallery', 'edit any file entity gallery', 'delete any file entity gallery'));
    $entity_gallery1 = $this->drupalCreateEntityGallery(array('type' => 'file'));
    $this->assertEntityGalleryAccess(array('create' => FALSE), 'page', $web_user1);
    $this->assertEntityGalleryAccess(array('view' => FALSE, 'update' => FALSE, 'delete' => FALSE), $entity_gallery1, $web_user1);

    // Ensures user with 'bypass entity gallery access' permission can do everything.
    $web_user2 = $this->drupalCreateUser(array('bypass entity gallery access'));
    $entity_gallery2 = $this->drupalCreateEntityGallery(array('type' => 'file'));
    $this->assertEntityGalleryAccess(array('create' => TRUE), 'file', $web_user2);
    $this->assertEntityGalleryAccess(array('view' => TRUE, 'update' => TRUE, 'delete' => TRUE), $entity_gallery2, $web_user2);

    // User cannot 'view own unpublished entity galleries'.
    $web_user3 = $this->drupalCreateUser(array('access entity galleries'));
    $entity_gallery3 = $this->drupalCreateEntityGallery(array('status' => 0, 'uid' => $web_user3->uid));
    $this->assertEntityGalleryAccess(array('view' => FALSE), $entity_gallery3, $web_user3);

    // User cannot create entity galleries without permission.
    $this->assertEntityGalleryAccess(array('create' => FALSE), 'file', $web_user3);

    // User can 'view own unpublished entity galleries', but another user cannot.
    $web_user4 = $this->drupalCreateUser(array('access entity galleries', 'view own unpublished entity galleries'));
    $web_user5 = $this->drupalCreateUser(array('access entity galleries', 'view own unpublished entity galleries'));
    $entity_gallery4 = $this->drupalCreateEntityGallery(array('status' => 0, 'uid' => $web_user4->uid));
    $this->assertEntityGalleryAccess(array('view' => TRUE, 'update' => FALSE), $entity_gallery4, $web_user4);
    $this->assertEntityGalleryAccess(array('view' => FALSE), $entity_gallery4, $web_user5);

    // Tests the default access provided for a published entity gallery.
    $entity_gallery5 = $this->drupalCreateEntityGallery();
    $this->assertEntityGalleryAccess(array('view' => TRUE, 'update' => FALSE, 'delete' => FALSE), $entity_gallery5, $web_user3);
  }
}

/**
 * Tests entity gallery save related functionality, including import-save.
 */
class EntityGallerySaveTestCase extends EntityGalleryWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Entity gallery save',
      'description' => 'Test entity_gallery_save() for saving galleries.',
      'group' => 'Entity Gallery',
    );
  }

  function setUp() {
    parent::setUp('entity_gallery_test');
    // Create a user that is allowed to post; we'll use this to test the
    // submission.
    $web_user = $this->drupalCreateUser(array('create node entity gallery'));
    $this->drupalLogin($web_user);
    $this->web_user = $web_user;
  }

  /**
   * Checks whether custom entity gallery IDs are saved properly during an
   * import operation.
   *
   * Workflow:
   *  - first create a gallery
   *  - save the gallery
   *  - check if entity gallery exists
   */
  function testImport() {
    // Entity gallery ID must be a number that is not in the database.
    $max_egid = db_query('SELECT MAX(egid) FROM {entity_gallery}')->fetchField();
    $test_egid = $max_egid + mt_rand(1000, 1000000);
    $title = $this->randomName(8);
    $entity_gallery = array(
      'title' => $title,
      'entity_gallery_description' => array(LANGUAGE_NONE => array(array('value' => $this->randomName(32)))),
      'uid' => $this->web_user->uid,
      'type' => 'node',
      'egid' => $test_egid,
      'is_new' => TRUE,
    );
    $entity_gallery = entity_gallery_submit((object) $entity_gallery);

    // Verify that entity_gallery_submit did not overwrite the user ID.
    $this->assertEqual($entity_gallery->uid, $this->web_user->uid, 'Function entity_gallery_submit() preserves user ID');

    entity_gallery_save($entity_gallery);
    // Test the import.
    $entity_gallery_by_egid = entity_gallery_load($test_egid);
    $this->assertTrue($entity_gallery_by_egid, 'Entity gallery load by entity gallery ID.');

    $entity_gallery_by_title = $this->drupalGetEntityGalleryByTitle($title);
    $this->assertTrue($entity_gallery_by_title, 'Entity gallery load by entity gallery title.');
  }

  /**
   * Verifies accuracy of the "created" and "changed" timestamp functionality.
   */
  function testTimestamps() {
    // Use the default timestamps.
    $edit = array(
      'uid' => $this->web_user->uid,
      'type' => 'node',
      'title' => $this->randomName(8),
    );

    entity_gallery_save((object) $edit);
    $entity_gallery = $this->drupalGetEntityGalleryByTitle($edit['title']);
    $this->assertEqual($entity_gallery->created, REQUEST_TIME, 'Creating an entity gallery sets default "created" timestamp.');
    $this->assertEqual($entity_gallery->changed, REQUEST_TIME, 'Creating an entity gallery sets default "changed" timestamp.');

    // Store the timestamps.
    $created = $entity_gallery->created;
    $changed = $entity_gallery->changed;

    entity_gallery_save($entity_gallery);
    $entity_gallery = $this->drupalGetEntityGalleryByTitle($edit['title'], TRUE);
    $this->assertEqual($entity_gallery->created, $created, 'Updating an entity gallery preserves "created" timestamp.');

    // Programmatically set the timestamps using hook_entity_gallery_presave.
    $entity_gallery->title = 'testing_entity_gallery_presave';

    entity_gallery_save($entity_gallery);
    $entity_gallery = $this->drupalGetEntityGalleryByTitle('testing_entity_gallery_presave', TRUE);
    $this->assertEqual($entity_gallery->created, 280299600, 'Saving an entity gallery uses "created" timestamp set in presave hook.');
    $this->assertEqual($entity_gallery->changed, 979534800, 'Saving an entity gallery uses "changed" timestamp set in presave hook.');

    // Programmatically set the timestamps on the entity gallery.
    $edit = array(
      'uid' => $this->web_user->uid,
      'type' => 'node',
      'title' => $this->randomName(8),
      'created' => 280299600, // Sun, 19 Nov 1978 05:00:00 GMT
      'changed' => 979534800, // Drupal 1.0 release.
    );

    entity_gallery_save((object) $edit);
    $entity_gallery = $this->drupalGetEntityGalleryByTitle($edit['title']);
    $this->assertEqual($entity_gallery->created, 280299600, 'Creating an entity gallery uses user-set "created" timestamp.');
    $this->assertNotEqual($entity_gallery->changed, 979534800, 'Creating an entity gallery doesn\'t use user-set "changed" timestamp.');

    // Update the timestamps.
    $entity_gallery->created = 979534800;
    $entity_gallery->changed = 280299600;

    entity_gallery_save($entity_gallery);
    $entity_gallery = $this->drupalGetEntityGalleryByTitle($edit['title'], TRUE);
    $this->assertEqual($entity_gallery->created, 979534800, 'Updating an entity gallery uses user-set "created" timestamp.');
    $this->assertNotEqual($entity_gallery->changed, 280299600, 'Updating an entity gallery doesn\'t use user-set "changed" timestamp.');
  }

  /**
   * Tests determing changes in hook_entity_gallery_presave() and verifies the
   * static entity gallery load cache is cleared upon save.
   */
  function testDeterminingChanges() {
    // Initial creation.
    $entity_gallery = (object) array(
      'uid' => $this->web_user->uid,
      'type' => 'node',
      'title' => 'test_changes',
    );
    entity_gallery_save($entity_gallery);

    // Update the entity gallery without applying changes.
    entity_gallery_save($entity_gallery);
    $this->assertEqual($entity_gallery->title, 'test_changes', 'No changes have been determined.');

    // Apply changes.
    $entity_gallery->title = 'updated';
    entity_gallery_save($entity_gallery);

    // The hook implementations entity_gallery_test_entity_gallery_presave() and
    // entity_gallery_test_entity_gallery_update() determine changes and change
    // the title.
    $this->assertEqual($entity_gallery->title, 'updated_presave_update', 'Changes have been determined.');

    // Test the static entity gallery load cache to be cleared.
    $entity_gallery = entity_gallery_load($entity_gallery->egid);
    $this->assertEqual($entity_gallery->title, 'updated_presave', 'Static cache has been cleared.');
  }

  /**
   * Tests saving an entity gallery on entity gallery insert.
   *
   * This test ensures that an entity gallery has been fully saved when
   * hook_entity_gallery_insert() is invoked, so that the entity gallery can be
   * saved again in a hook implementation without errors.
   *
   * @see entity_gallery_test_entity_gallery_insert()
   */
  function testEntityGallerySaveOnInsert() {
    // entity_gallery_test_entity_gallery_insert() triggers a save on insert if
    // the title equals 'new'.
    $entity_gallery = $this->drupalCreateEntityGallery(array('title' => 'new'));
    $this->assertEqual($entity_gallery->title, 'Entity gallery ' . $entity_gallery->egid, 'Entity gallery saved on node insert.');
  }
}

/**
 * Tests related to entity gallery types.
 */
class EntityGalleryTypeTestCase extends EntityGalleryWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Entity gallery types',
      'description' => 'Ensures that entity gallery type functions work correctly.',
      'group' => 'Entity Gallery',
    );
  }

  function setUp() {
    parent::setUp('entity_gallery_test');
  }

  /**
   * Ensures that entity gallery type functions (entity_gallery_type_get_*) work
   * correctly.
   *
   * Load available entity gallery types and validate the returned data.
   */
  function testEntityGalleryTypeGetFunctions() {
    $entity_gallery_types = entity_gallery_type_get_types();
    $entity_gallery_names = entity_gallery_type_get_names();

    $this->assertTrue(isset($entity_gallery_types['node']), 'Entity gallery type node is available.');
    $this->assertTrue(isset($entity_gallery_types['file']), 'Entity gallery type file is available.');

    $this->assertEqual($entity_gallery_types['node']->name, $entity_gallery_names['node'], 'Correct entity gallery type base has been returned.');

    $this->assertEqual($entity_gallery_types['node'], entity_gallery_type_get_type('node'), 'Correct entity gallery type has been returned.');
    $this->assertEqual($entity_gallery_types['node']->name, entity_gallery_type_get_name('node'), 'Correct entity gallery type name has been returned.');
    $this->assertEqual($entity_gallery_types['file']->base, entity_gallery_type_get_base('file'), 'Correct entity gallery type base has been returned.');
  }

  /**
   * Tests creating a gallery type programmatically and via a form.
   */
  function testEntityGalleryTypeCreation() {
    // Create a gallery type programmaticaly.
    $type = $this->drupalCreateGalleryType();

    $type_exists = db_query('SELECT 1 FROM {entity_gallery_type} WHERE type = :type', array(':type' => $type->type))->fetchField();
    $this->assertTrue($type_exists, 'The new gallery type has been created in the database.');

    // Login a test user.
    $web_user = $this->drupalCreateUser(array('create ' . $type->name . ' entity gallery'));
    $this->drupalLogin($web_user);

    $this->drupalGet('gallery/add/' . str_replace('_', '-', $type->name));
    $this->assertResponse(200, 'The new gallery type can be accessed at gallery/add.');

    // Create a gallery type via the user interface.
    $web_user = $this->drupalCreateUser(array('bypass entity gallery access', 'administer entity gallery types'));
    $this->drupalLogin($web_user);
    $edit = array(
      'name' => 'foo',
      'title_label' => 'title for foo',
      'type' => 'foo',
      'entity_type' => 'node',
    );
    $this->drupalPost('admin/structure/gallery-types/add', $edit, t('Save gallery type'));
    $type_exists = db_query('SELECT 1 FROM {entity_gallery_type} WHERE type = :type', array(':type' => 'foo'))->fetchField();
    $this->assertTrue($type_exists, 'The new gallery type has been created in the database.');
  }

  /**
   * Tests editing an entity gallery type using the UI.
   */
  function testEntityGalleryTypeEditing() {
    $web_user = $this->drupalCreateUser(array('bypass entity gallery access', 'administer entity gallery types'));
    $this->drupalLogin($web_user);

    $instance = field_info_instance('entity_gallery', 'entity_gallery_description', 'node');
    $this->assertEqual($instance['label'], 'Description', 'Description field was found.');

    // Verify that title and description fields are displayed.
    $this->drupalGet('gallery/add/file');
    $this->assertRaw('Title', 'Title field was found.');
    $this->assertRaw('Description', 'Description field was found.');

    // Rename the title field.
    $edit = array(
      'title_label' => 'Foo',
    );
    $this->drupalPost('admin/structure/gallery-types/manage/file', $edit, t('Save gallery type'));
    // Refresh the field information for the rest of the test.
    field_info_cache_clear();

    $this->drupalGet('gallery/add/file');
    $this->assertRaw('Foo', 'New title label was displayed.');
    $this->assertNoRaw('Title', 'Old title label was not displayed.');

    // Change the name, machine name and description.
    $edit = array(
      'name' => 'Bar',
      'type' => 'bar',
      'description' => 'Lorem ipsum.',
    );
    $this->drupalPost('admin/structure/gallery-types/manage/file', $edit, t('Save gallery type'));
    field_info_cache_clear();

    $this->drupalGet('gallery/add');
    $this->assertRaw('Bar', 'New name was displayed.');
    $this->assertRaw('Lorem ipsum', 'New description was displayed.');
    $this->clickLink('Bar');
    $this->assertEqual(url('gallery/add/bar', array('absolute' => TRUE)), $this->getUrl(), 'New machine name was used in URL.');
    $this->assertRaw('Foo', 'Title field was found.');
    $this->assertRaw('Description', 'Description field was found.');

    // Remove the description field.
    $this->drupalPost('admin/structure/gallery-types/manage/bar/fields/entity_gallery_description/delete', NULL, t('Delete'));
    // Resave the settings for this type.
    $this->drupalPost('admin/structure/gallery-types/manage/bar', array(), t('Save gallery type'));
    // Check that the description field doesn't exist.
    $this->drupalGet('gallery/add/bar');
    $this->assertNoRaw('Description', 'Description field was not found.');
  }

  /**
   * Tests that entity_gallery_types_rebuild() correctly handles the 'disabled' flag.
   */
  function testEntityGalleryTypeStatus() {
    // Enable all core entity gallery modules, and all types should be active.
    module_enable(array('blog', 'book', 'poll'), FALSE);
    entity_gallery_types_rebuild();
    $types = entity_gallery_type_get_types();
    foreach (array('blog', 'book', 'poll', 'article', 'page') as $type) {
      $this->assertTrue(isset($types[$type]), format_string('%type is found in entity gallery types.', array('%type' => $type)));
      $this->assertTrue(isset($types[$type]->disabled) && empty($types[$type]->disabled), format_string('%type type is enabled.', array('%type' => $type)));
    }

    // Disable poll module and the respective type should be marked as disabled.
    module_disable(array('poll'), FALSE);
    entity_gallery_types_rebuild();
    $types = entity_gallery_type_get_types();
    $this->assertTrue(!empty($types['poll']->disabled), "Poll module's entity gallery type disabled.");
    $this->assertTrue(isset($types['blog']) && empty($types['blog']->disabled), "Blog module's entity gallery type still active.");

    // Disable blog module and the respective type should be marked as disabled.
    module_disable(array('blog'), FALSE);
    entity_gallery_types_rebuild();
    $types = entity_gallery_type_get_types();
    $this->assertTrue(!empty($types['blog']->disabled), "Blog module's entity gallery type disabled.");
    $this->assertTrue(!empty($types['poll']->disabled), "Poll module's entity gallery type still disabled.");

    // Disable book module and the respective type should still be active, since
    // it is not provided by hook_entity_gallery_info().
    module_disable(array('book'), FALSE);
    entity_gallery_types_rebuild();
    $types = entity_gallery_type_get_types();
    $this->assertTrue(isset($types['book']) && empty($types['book']->disabled), "Book module's entity gallery type still active.");
    $this->assertTrue(!empty($types['blog']->disabled), "Blog module's entity gallery type still disabled.");
    $this->assertTrue(!empty($types['poll']->disabled), "Poll module's entity gallery type still disabled.");
    $this->assertTrue(isset($types['article']) && empty($types['article']->disabled), "Article entity gallery type still active.");
    $this->assertTrue(isset($types['page']) && empty($types['page']->disabled), "Basic page entity gallery type still active.");

    // Re-enable the modules and verify that the types are active again.
    module_enable(array('blog', 'book', 'poll'), FALSE);
    entity_gallery_types_rebuild();
    $types = entity_gallery_type_get_types();
    foreach (array('blog', 'book', 'poll', 'article', 'page') as $type) {
      $this->assertTrue(isset($types[$type]), format_string('%type is found in entity gallery types.', array('%type' => $type)));
      $this->assertTrue(isset($types[$type]->disabled) && empty($types[$type]->disabled), format_string('%type type is enabled.', array('%type' => $type)));
    }
  }
}

/**
 * Test entity gallery type customizations persistence.
 */
//class EntityGalleryTypePersistenceTestCase extends EntityGalleryWebTestCase {
//  public static function getInfo() {
//    return array(
//      'name' => 'Entity gallery type persist',
//      'description' => 'Ensures that entity gallery type customization survives module enabling and disabling.',
//      'group' => 'Entity Gallery',
//    );
//  }
//
//  /**
//   * Tests that entity gallery type customizations persist through disable and uninstall.
//   */
//  function testEntityGalleryTypeCustomizationPersistence() {
//    $web_user = $this->drupalCreateUser(array('bypass entity gallery access', 'administer entity gallery types', 'administer modules'));
//    $this->drupalLogin($web_user);
//    $poll_key = 'modules[Core][poll][enable]';
//    $poll_enable = array($poll_key => "1");
//    $poll_disable = array($poll_key => FALSE);
//
//    // Enable poll and verify that the entity gallery type is in the DB and is
//    // not disabled.
//    $this->drupalPost('admin/modules', $poll_enable, t('Save configuration'));
//    $disabled = db_query('SELECT disabled FROM {entity_gallery_type} WHERE type = :type', array(':type' => 'poll'))->fetchField();
//    $this->assertNotIdentical($disabled, FALSE, 'Poll entity gallery type found in the database');
//    $this->assertEqual($disabled, 0, 'Poll entity gallery type is not disabled');
//
//    // Check that poll entity gallery type (uncustomized) shows up.
//    $this->drupalGet('gallery/add');
//    $this->assertText('poll', 'poll type is found on gallery/add');
//
//    // Customize poll description.
//    $description = $this->randomName();
//    $edit = array('description' => $description);
//    $this->drupalPost('admin/structure/gallery-types/manage/poll', $edit, t('Save gallery type'));
//
//    // Check that poll entity gallery type customization shows up.
//    $this->drupalGet('gallery/add');
//    $this->assertText($description, 'Customized description found');
//
//    // Disable poll and check that the entity gallery type gets disabled.
//    $this->drupalPost('admin/modules', $poll_disable, t('Save configuration'));
//    $disabled = db_query('SELECT disabled FROM {entity_gallery_type} WHERE type = :type', array(':type' => 'poll'))->fetchField();
//    $this->assertEqual($disabled, 1, 'Poll entity gallery type is disabled');
//    $this->drupalGet('gallery/add');
//    $this->assertNoText('poll', 'poll type is not found on gallery/add');
//
//    // Reenable poll and check that the customization survived the module
//    // disable.
//    $this->drupalPost('admin/modules', $poll_enable, t('Save configuration'));
//    $disabled = db_query('SELECT disabled FROM {entity_gallery_type} WHERE type = :type', array(':type' => 'poll'))->fetchField();
//    $this->assertNotIdentical($disabled, FALSE, 'Poll entity gallery type found in the database');
//    $this->assertEqual($disabled, 0, 'Poll entity gallery type is not disabled');
//    $this->drupalGet('gallery/add');
//    $this->assertText($description, 'Customized description found');
//
//    // Disable and uninstall poll.
//    $this->drupalPost('admin/modules', $poll_disable, t('Save configuration'));
//    $edit = array('uninstall[poll]' => 'poll');
//    $this->drupalPost('admin/modules/uninstall', $edit, t('Uninstall'));
//    $this->drupalPost(NULL, array(), t('Uninstall'));
//    $disabled = db_query('SELECT disabled FROM {entity_gallery_type} WHERE type = :type', array(':type' => 'poll'))->fetchField();
//    $this->assertTrue($disabled, 'Poll entity gallery type is in the database and is disabled');
//    $this->drupalGet('gallery/add');
//    $this->assertNoText('poll', 'poll type is no longer found on gallery/add');
//
//    // Reenable poll and check that the customization survived the module
//    // uninstall.
//    $this->drupalPost('admin/modules', $poll_enable, t('Save configuration'));
//    $this->drupalGet('gallery/add');
//    $this->assertText($description, 'Customized description is found even after uninstall and reenable.');
//  }
//}

/**
 * Tests entity gallery administration page functionality.
 */
class EntityGalleryAdminTestCase extends EntityGalleryWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Entity gallery administration',
      'description' => 'Test entity gallery administration page functionality.',
      'group' => 'Entity Gallery',
    );
  }

  function setUp() {
    parent::setUp();

    // Remove the "view own unpublished entity galleries" permission which is
    // set by default for authenticated users so we can test this permission
    // correctly.
    user_role_revoke_permissions(DRUPAL_AUTHENTICATED_RID, array('view own unpublished entity galleries'));

    $this->admin_user = $this->drupalCreateUser(array('access administration pages', 'access entity galleries overview', 'administer entity galleries', 'bypass entity gallery access'));
    $this->base_user_1 = $this->drupalCreateUser(array('access entity galleries overview'));
    $this->base_user_2 = $this->drupalCreateUser(array('access entity galleries overview', 'view own unpublished entity galleries'));
    $this->base_user_3 = $this->drupalCreateUser(array('access entity galleries overview', 'bypass entity gallery access'));
  }

  /**
   * Tests that the table sorting works on the galleries admin pages.
   */
  function testGalleriesAdminSort() {
    $this->drupalLogin($this->admin_user);
    foreach (array('dd', 'aa', 'DD', 'bb', 'cc', 'CC', 'AA', 'BB') as $prefix) {
      $this->drupalCreateEntityGallery(array('title' => $prefix . $this->randomName(6)));
    }

    // Test that the default sort by entity_gallery.changed DESC actually fires properly.
    $entity_galleries_query = db_select('entity_gallery', 'eg')
      ->fields('eg', array('egid'))
      ->orderBy('changed', 'DESC')
      ->execute()
      ->fetchCol();

    $entity_galleries_form = array();
    $this->drupalGet('admin/content/gallery');
    foreach ($this->xpath('//table/tbody/tr/td/div/input/@value') as $input) {
      $entity_galleries_form[] = $input;
    }
    $this->assertEqual($entity_galleries_query, $entity_galleries_form, 'Entity galleries are sorted in the form according to the default query.');

    // Compare the rendered HTML entity gallery list to a query for the entity
    // galleries ordered by title to account for possible database-dependent
    // sort order.
    $entity_galleries_query = db_select('entity_gallery', 'eg')
      ->fields('eg', array('egid'))
      ->orderBy('title')
      ->execute()
      ->fetchCol();

    $entity_galleries_form = array();
    $this->drupalGet('admin/content/gallery', array('query' => array('sort' => 'asc', 'order' => 'Title')));
    foreach ($this->xpath('//table/tbody/tr/td/div/input/@value') as $input) {
      $entity_galleries_form[] = $input;
    }
    $this->assertEqual($entity_galleries_query, $entity_galleries_form, 'Entity galleries are sorted in the form the same as they are in the query.');
  }

  /**
   * Tests gallery overview with different user permissions.
   */
  function testGalleryAdminPages() {
    $this->drupalLogin($this->admin_user);

    $entity_galleries['published_file'] = $this->drupalCreateEntityGallery(array('type' => 'file'));
    $entity_galleries['published_node'] = $this->drupalCreateEntityGallery(array('type' => 'node'));
    $entity_galleries['unpublished_file_1'] = $this->drupalCreateEntityGallery(array('type' => 'file', 'uid' => $this->base_user_1->uid, 'status' => 0));
    $entity_galleries['unpublished_file_2'] = $this->drupalCreateEntityGallery(array('type' => 'file', 'uid' => $this->base_user_2->uid, 'status' => 0));

    // Verify view, edit, and delete links for any galleries.
    $this->drupalGet('admin/content/gallery');
    $this->assertResponse(200);
    foreach ($entity_galleries as $entity_gallery) {
      $this->assertLinkByHref('gallery/' . $entity_gallery->egid);
      $this->assertLinkByHref('gallery/' . $entity_gallery->egid . '/edit');
      $this->assertLinkByHref('gallery/' . $entity_gallery->egid . '/delete');
      // Verify tableselect.
      $this->assertFieldByName('entity_galleries[' . $entity_gallery->egid . ']', '', 'Tableselect found.');
    }

    // Verify filtering by publishing status.
    $edit = array(
      'status' => 'status-1',
    );
    $this->drupalPost(NULL, $edit, t('Filter'));

    $this->assertRaw(t('where %property is %value', array('%property' => t('status'), '%value' => 'published')), 'Galleries list is filtered by status.');

    $this->assertLinkByHref('gallery/' . $entity_galleries['published_file']->egid . '/edit');
    $this->assertLinkByHref('gallery/' . $entity_galleries['published_node']->egid . '/edit');
    $this->assertNoLinkByHref('gallery/' . $entity_galleries['unpublished_file_1']->egid . '/edit');

    // Verify filtering by status and gallery type.
    $edit = array(
      'type' => 'file',
    );
    $this->drupalPost(NULL, $edit, t('Refine'));

    $this->assertRaw(t('where %property is %value', array('%property' => t('status'), '%value' => 'published')), 'Galleries list is filtered by status.');
    $this->assertRaw(t('and where %property is %value', array('%property' => t('type'), '%value' => 'File')), 'Galleries list is filtered by gallery type.');

    $this->assertLinkByHref('gallery/' . $entity_galleries['published_file']->egid . '/edit');
    $this->assertNoLinkByHref('gallery/' . $entity_galleries['published_node']->egid . '/edit');

    // Verify no operation links are displayed for regular users.
    $this->drupalLogout();
    $this->drupalLogin($this->base_user_1);
    $this->drupalGet('admin/content/gallery');
    $this->assertResponse(200);
    $this->assertLinkByHref('gallery/' . $entity_galleries['published_file']->egid);
    $this->assertLinkByHref('gallery/' . $entity_galleries['published_node']->egid);
    $this->assertNoLinkByHref('gallery/' . $entity_galleries['published_file']->egid . '/edit');
    $this->assertNoLinkByHref('gallery/' . $entity_galleries['published_file']->egid . '/delete');
    $this->assertNoLinkByHref('gallery/' . $entity_galleries['published_node']->egid . '/edit');
    $this->assertNoLinkByHref('gallery/' . $entity_galleries['published_node']->egid . '/delete');

    // Verify no unpublished galleries are displayed without permission.
    $this->assertNoLinkByHref('gallery/' . $entity_galleries['unpublished_file_1']->egid);
    $this->assertNoLinkByHref('gallery/' . $entity_galleries['unpublished_file_1']->egid . '/edit');
    $this->assertNoLinkByHref('gallery/' . $entity_galleries['unpublished_file_1']->egid . '/delete');

    // Verify no tableselect.
    $this->assertNoFieldByName('entity_galleries[' . $entity_galleries['published_file']->egid . ']', '', 'No tableselect found.');

    // Verify unpublished galleries are displayed with permission.
    $this->drupalLogout();
    $this->drupalLogin($this->base_user_2);
    $this->drupalGet('admin/content/gallery');
    $this->assertResponse(200);
    $this->assertLinkByHref('gallery/' . $entity_galleries['unpublished_file_2']->egid);
    // Verify no operation links are displayed.
    $this->assertNoLinkByHref('gallery/' . $entity_galleries['unpublished_file_2']->egid . '/edit');
    $this->assertNoLinkByHref('gallery/' . $entity_galleries['unpublished_file_2']->egid . '/delete');

    // Verify user cannot see unpublished galleries of other users.
    $this->assertNoLinkByHref('gallery/' . $entity_galleries['unpublished_file_1']->egid);
    $this->assertNoLinkByHref('gallery/' . $entity_galleries['unpublished_file_1']->egid . '/edit');
    $this->assertNoLinkByHref('gallery/' . $entity_galleries['unpublished_file_1']->egid . '/delete');

    // Verify no tableselect.
    $this->assertNoFieldByName('entity_galleries[' . $entity_galleries['unpublished_file_2']->egid . ']', '', 'No tableselect found.');

    // Verify entity gallery access can be bypassed.
    $this->drupalLogout();
    $this->drupalLogin($this->base_user_3);
    $this->drupalGet('admin/content/gallery');
    $this->assertResponse(200);
    foreach ($entity_galleries as $entity_gallery) {
      $this->assertLinkByHref('gallery/' . $entity_gallery->egid);
      $this->assertLinkByHref('gallery/' . $entity_gallery->egid . '/edit');
      $this->assertLinkByHref('gallery/' . $entity_gallery->egid . '/delete');
    }
  }
}

/**
 * Tests entity gallery title functionality.
 */
class EntityGalleryTitleTestCase extends EntityGalleryWebTestCase {

  /**
   * A user with permission to create and edit galleries and to administer entity galleries.
   *
   * @var object
   */
  protected $admin_user;

  public static function getInfo() {
    return array(
      'name' => 'Entity gallery title',
      'description' => 'Test entity gallery title.',
      'group' => 'Entity Gallery'
    );
  }

  function setUp() {
    parent::setUp();
    $this->admin_user = $this->drupalCreateUser(array('administer entity galleries', 'create node entity gallery', 'create file entity gallery'));
    $this->drupalLogin($this->admin_user);
  }

  /**
   *  Creates one entity gallery and tests if the entity gallery title has the correct value.
   */
  function testEntityGalleryTitle() {
    // Create "file" gallery with title.
    // Add the entity gallery to the frontpage so we can test if teaser links are clickable.
    $settings = array(
      'title' => $this->randomName(8),
    );
    $entity_gallery = $this->drupalCreateEntityGallery($settings);

    // Test <title> tag.
    $this->drupalGet("gallery/$entity_gallery->egid");
    $xpath = '//title';
    $this->assertEqual(current($this->xpath($xpath)), $entity_gallery->title .' | Drupal', 'Page title is equal to entity gallery title.', 'Entity Gallery');
  }
}

/**
 * Tests basic options of multi-step node forms.
 */
//class MultiStepNodeFormBasicOptionsTest extends DrupalWebTestCase {
//  public static function getInfo() {
//    return array(
//      'name' => 'Multistep node form basic options',
//      'description' => 'Test the persistence of basic options through multiple steps.',
//      'group' => 'Node',
//    );
//  }
//
//  function setUp() {
//    parent::setUp('poll');
//    $web_user = $this->drupalCreateUser(array('administer nodes', 'create poll content'));
//    $this->drupalLogin($web_user);
//  }
//
//  /**
//   * Tests changing the default values of basic options to ensure they persist.
//   */
//  function testMultiStepNodeFormBasicOptions() {
//    $edit = array(
//      'title' => 'a',
//      'status' => FALSE,
//      'promote' => FALSE,
//      'sticky' => 1,
//      'choice[new:0][chtext]' => 'a',
//      'choice[new:1][chtext]' => 'a',
//    );
//    $this->drupalPost('node/add/poll', $edit, t('More choices'));
//    $this->assertNoFieldChecked('edit-status', 'status stayed unchecked');
//    $this->assertNoFieldChecked('edit-promote', 'promote stayed unchecked');
//    $this->assertFieldChecked('edit-sticky', 'sticky stayed checked');
//  }
//}

/**
 * Test to ensure that an entity gallery's content is always rebuilt.
 */
class EntityGalleryBuildContent extends EntityGalleryWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Rebuild content',
      'description' => 'Test the rebuilding of content for different build modes.',
      'group' => 'Entity Gallery',
    );
  }

 /**
  * Ensures that content array is rebuilt on every call to entity_gallery_build_content().
  */
  function testEntityGalleryRebuildContent() {
    $entity_gallery = $this->drupalCreateEntityGallery();

    // Set a property in the content array so we can test for its existence later on.
    $entity_gallery->content['test_content_property'] = array('#value' => $this->randomString());
    $content = entity_gallery_build_content($entity_gallery);

    // If the property doesn't exist it means the entity_gallery->content was rebuilt.
    $this->assertFalse(isset($content['test_content_property']), 'Entity gallery content was emptied prior to being built.');
  }
}

/**
 * Test entity gallery token replacement in strings.
 */
class EntityGalleryTokenReplaceTestCase extends EntityGalleryWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Entity gallery token replacement',
      'description' => 'Generates text using placeholders for dummy content to check entity gallery token replacement.',
      'group' => 'Entity Gallery',
    );
  }

  /**
   * Creates an entity gallery, then tests the tokens generated from it.
   */
  function testEntityGalleryTokenReplacement() {
    global $language;
    $url_options = array(
      'absolute' => TRUE,
      'language' => $language,
    );

    // Create a user and an entity gallery.
    $account = $this->drupalCreateUser();
    $settings = array(
      'type' => 'node',
      'uid' => $account->uid,
      'title' => '<blink>Blinking Text</blink>',
      'entity_gallery_description' => array(LANGUAGE_NONE => array(array('value' => $this->randomName(32), 'summary' => $this->randomName(16)))),
    );
    $entity_gallery = $this->drupalCreateEntityGallery($settings);

    // Load entity gallery so that the description and summary fields are structured properly.
    $entity_gallery = entity_gallery_load($entity_gallery->egid);
    $instance = field_info_instance('entity_gallery', 'entity_gallery_description', $entity_gallery->type);

    // Generate and test sanitized tokens.
    $tests = array();
    $langcode = entity_language('entity_gallery', $entity_gallery);
    $tests['[entity_gallery:egid]'] = $entity_gallery->egid;
    $tests['[entity_gallery:vid]'] = $entity_gallery->vid;
    $tests['[entity_gallery:tegid]'] = $entity_gallery->tegid;
    $tests['[entity_gallery:type]'] = 'node';
    $tests['[entity_gallery:type-name]'] = 'Node';
    $tests['[entity_gallery:title]'] = check_plain($entity_gallery->title);
    $tests['[entity_gallery:description]'] = _text_sanitize($instance, $langcode, $entity_gallery->entity_gallery_description[$langcode][0], 'value');
    $tests['[entity_gallery:summary]'] = _text_sanitize($instance, $langcode, $entity_gallery->entity_gallery_description[$langcode][0], 'summary');
    $tests['[entity_gallery:language]'] = check_plain($langcode);
    $tests['[entity_gallery:url]'] = url('gallery/' . $entity_gallery->egid, $url_options);
    $tests['[entity_gallery:edit-url]'] = url('gallery/' . $entity_gallery->egid . '/edit', $url_options);
    $tests['[entity_gallery:author]'] = check_plain(format_username($account));
    $tests['[entity_gallery:author:uid]'] = $entity_gallery->uid;
    $tests['[entity_gallery:author:name]'] = check_plain(format_username($account));
    $tests['[entity_gallery:created:since]'] = format_interval(REQUEST_TIME - $entity_gallery->created, 2, $language->language);
    $tests['[entity_gallery:changed:since]'] = format_interval(REQUEST_TIME - $entity_gallery->changed, 2, $language->language);

    // Test to make sure that we generated something for each token.
    $this->assertFalse(in_array(0, array_map('strlen', $tests)), 'No empty tokens generated.');

    foreach ($tests as $input => $expected) {
      $output = token_replace($input, array('entity_gallery' => $entity_gallery), array('language' => $language));
      $this->assertEqual($output, $expected, format_string('Sanitized entity gallery token %token replaced.', array('%token' => $input)));
    }

    // Generate and test unsanitized tokens.
    $tests['[entity_gallery:title]'] = $entity_gallery->title;
    $tests['[entity_gallery:description]'] = $entity_gallery->entity_gallery_description[$langcode][0]['value'];
    $tests['[entity_gallery:summary]'] = $entity_gallery->entity_gallery_description[$langcode][0]['summary'];
    $tests['[entity_gallery:language]'] = $langcode;
    $tests['[entity_gallery:author:name]'] = format_username($account);

    foreach ($tests as $input => $expected) {
      $output = token_replace($input, array('entity_gallery' => $entity_gallery), array('language' => $language, 'sanitize' => FALSE));
      $this->assertEqual($output, $expected, format_string('Unsanitized entity gallery token %token replaced.', array('%token' => $input)));
    }

    // Repeat for an entity gallery without a summary.
    $settings['entity_gallery_description'] = array(LANGUAGE_NONE => array(array('value' => $this->randomName(32), 'summary' => '')));
    $entity_gallery = $this->drupalCreateEntityGallery($settings);

    // Load entity gallery (without summary) so that the description and summary fields
    // are structured properly.
    $entity_gallery = entity_gallery_load($entity_gallery->egid);
    $instance = field_info_instance('entity_gallery', 'entity_gallery_description', $entity_gallery->type);

    // Generate and test sanitized token - use full description as expected value.
    $tests = array();
    $tests['[entity_gallery:summary]'] = _text_sanitize($instance, $langcode, $entity_gallery->entity_gallery_description[$langcode][0], 'value');

    // Test to make sure that we generated something for each token.
    $this->assertFalse(in_array(0, array_map('strlen', $tests)), 'No empty tokens generated for entity gallery without a summary.');

    foreach ($tests as $input => $expected) {
      $output = token_replace($input, array('entity_gallery' => $entity_gallery), array('language' => $language));
      $this->assertEqual($output, $expected, format_string('Sanitized entity gallery token %token replaced for entity gallery without a summary.', array('%token' => $input)));
    }

    // Generate and test unsanitized tokens.
    $tests['[entity_gallery:summary]'] = $entity_gallery->entity_gallery_description[$langcode][0]['value'];

    foreach ($tests as $input => $expected) {
      $output = token_replace($input, array('entity_gallery' => $entity_gallery), array('language' => $language, 'sanitize' => FALSE));
      $this->assertEqual($output, $expected, format_string('Unsanitized entity gallery token %token replaced for entity gallery without a summary.', array('%token' => $input)));
    }
  }
}

/**
 * Tests user permissions for entity gallery revisions.
 */
class EntityGalleryRevisionPermissionsTestCase extends EntityGalleryWebTestCase {

  /**
   * Entity galleries used by the test.
   *
   * @var array
   */
  protected $entity_gallery_revisions = array();

  /**
   * Users with different revision permission used by the test.
   *
   * @var array
   */
  protected $accounts = array();

  /**
   * Map revision permission names to entity gallery revision access ops.
   *
   * @var array
   */
  protected $map = array(
    'view' => 'view entity gallery revisions',
    'update' => 'revert entity gallery revisions',
    'delete' => 'delete entity gallery revisions',
  );

  public static function getInfo() {
    return array(
      'name' => 'Entity gallery revision permissions',
      'description' => 'Tests user permissions for entity gallery revision operations.',
      'group' => 'Entity Gallery',
    );
  }

  function setUp() {
    parent::setUp();

    // Create an entity gallery with several revisions.
    $entity_gallery = $this->drupalCreateEntityGallery();
    $this->entity_gallery_revisions[] = $entity_gallery;

    for ($i = 0; $i < 3; $i++) {
      // Create a revision for the same egid and settings with a random log.
      $revision = clone $entity_gallery;
      $revision->revision = 1;
      $revision->log = $this->randomName(32);
      entity_gallery_save($revision);
      $this->entity_gallery_revisions[] = $revision;
    }

    // Create three users, one with each revision permission.
    foreach ($this->map as $op => $permission) {
      // Create the user.
      $account = $this->drupalCreateUser(
        array(
          'access entity galleries',
          'edit any file entity gallery',
          'delete any file entity gallery',
          $permission,
        )
      );
      $account->op = $op;
      $this->accounts[] = $account;
    }

    // Create an admin account (returns TRUE for all revision permissions).
    $admin_account = $this->drupalCreateUser(array('access entity galleries', 'administer entity galleries'));
    $admin_account->is_admin = TRUE;
    $this->accounts['admin'] = $admin_account;

    // Create a normal account (returns FALSE for all revision permissions).
    $normal_account = $this->drupalCreateUser();
    $normal_account->op = FALSE;
    $this->accounts[] = $normal_account;
  }

  /**
   * Tests the _entity_gallery_revision_access() function.
   */
  function testEntityGalleryRevisionAccess() {
    $revision = $this->entity_gallery_revisions[1];

    $parameters = array(
      'op' => array_keys($this->map),
      'account' => $this->accounts,
    );

    $permutations = $this->generatePermutations($parameters);
    foreach ($permutations as $case) {
      if (!empty($case['account']->is_admin) || $case['op'] == $case['account']->op) {
        $this->assertTrue(_entity_gallery_revision_access($revision, $case['op'], $case['account']), "{$this->map[$case['op']]} granted.");
      }
      else {
        $this->assertFalse(_entity_gallery_revision_access($revision, $case['op'], $case['account']), "{$this->map[$case['op']]} not granted.");
      }
    }

    // Test that access is FALSE for an entity gallery administrator with an invalid $entity_gallery
    // or $op parameters.
    $admin_account = $this->accounts['admin'];
    $this->assertFalse(_entity_gallery_revision_access(FALSE, 'view', $admin_account), '_entity_gallery_revision_access() returns FALSE with an invalid entity gallery.');
    $this->assertFalse(_entity_gallery_revision_access($revision, 'invalid-op', $admin_account), '_entity_gallery_revision_access() returns FALSE with an invalid op.');

    // Test that the $account parameter defaults to the "logged in" user.
    $original_user = $GLOBALS['user'];
    $GLOBALS['user'] = $admin_account;
    $this->assertTrue(_entity_gallery_revision_access($revision, 'view'), '_entity_gallery_revision_access() returns TRUE when used with global user.');
    $GLOBALS['user'] = $original_user;
  }
}

/**
 * Tests changing view modes for entity galleries.
 */
class EntityGalleryEntityViewModeAlterTest extends EntityGalleryWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Entity gallery entity view mode',
      'description' => 'Test changing view mode.',
      'group' => 'Entity Gallery'
    );
  }

  function setUp() {
    parent::setUp(array('entity_gallery_test'));
  }

  /**
   * Create a "file" entity gallery and verify its consistency in the database.
   */
  function testEntityGalleryViewModeChange() {
    $web_user = $this->drupalCreateUser(array('create file entity gallery', 'edit own file entity gallery'));
    $this->drupalLogin($web_user);

    // Create an entity gallery.
    $edit = array();
    $langcode = LANGUAGE_NONE;
    $edit["title"] = $this->randomName(8);
    $edit["entity_gallery_description[$langcode][0][value]"] = 'Data that should appear only in the description for the entity gallery.';
    $edit["entity_gallery_description[$langcode][0][summary]"] = 'Extra data that should appear only in the teaser for the entity gallery.';
    $this->drupalPost('gallery/add/file', $edit, t('Save'));

    $entity_gallery = $this->drupalGetEntityGalleryByTitle($edit["title"]);

    // Set the flag to alter the view mode and view the entity gallery.
    variable_set('entity_gallery_test_change_view_mode', 'teaser');
    $this->drupalGet('gallery/' . $entity_gallery->egid);

    // Check that teaser mode is viewed.
    $this->assertText('Extra data that should appear only in the teaser for the entity gallery.', 'Teaser text present');
    // Make sure description text is not present.
    $this->assertNoText('Data that should appear only in the description for the entity gallery.', 'Description text not present');

    // Test that the correct build mode has been set.
    $build = entity_gallery_view($entity_gallery);
    $this->assertEqual($build['#view_mode'], 'teaser', 'The view mode has correctly been set to teaser.');
  }

  /**
   * Tests fields that were previously hidden when the view mode is changed.
   */
  function testEntityGalleryViewModeChangeHiddenField() {
    // Add a hidden tags field on the default display.
    // Create a vocabulary named "Category", enabled for the 'node' gallery type.
    $description = t('Use categories to group galleries on similar topics together.');
    $vocabulary = (object) array(
      'name' => t('Category'),
      'description' => $description,
      'machine_name' => 'entity_gallery_category',
    );
    taxonomy_vocabulary_save($vocabulary);

    $field = array(
      'field_name' => 'field_' . $vocabulary->machine_name,
      'type' => 'taxonomy_term_reference',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => $vocabulary->machine_name,
            'parent' => 0,
          ),
        ),
      ),
    );
    field_create_field($field);

    $help = st('Select the category that best describes this gallery.');
    $instance = array(
      'field_name' => 'field_' . $vocabulary->machine_name,
      'entity_type' => 'entity_gallery',
      'label' => 'Category',
      'bundle' => 'node',
      'description' => $help,
      'widget' => array(
        'type' => 'options_select',
        'weight' => 0,
      ),
      'display' => array(
        'default' => array(
          'type' => 'hidden',
          'weight' => 10,
        ),
        'teaser' => array(
          'type' => 'taxonomy_term_reference_link',
          'weight' => 10,
        ),
      ),
    );
    field_create_instance($instance);

    $term = new stdClass();
    $term->name = $this->randomName();
    $term->description = $this->randomName();
    // Use the first available text format.
    $term->format = db_query_range('SELECT format FROM {filter_format}', 0, 1)->fetchField();
    $term->vid = $vocabulary->vid;
    taxonomy_term_save($term);

    $web_user = $this->drupalCreateUser(array('create node entity gallery', 'edit own node entity gallery'));
    $this->drupalLogin($web_user);

    // Create an entity gallery.
    $edit = array();
    $langcode = LANGUAGE_NONE;
    $edit["title"] = $this->randomName(8);
    $edit["entity_gallery_description[$langcode][0][value]"] = 'Data that should appear only in the description for the entity gallery.';
    $edit["entity_gallery_description[$langcode][0][summary]"] = 'Extra data that should appear only in the teaser for the entity gallery.';
    $edit["field_entity_gallery_category[$langcode]"] = $term->tid;
    $this->drupalPost('gallery/add/node', $edit, t('Save'));

    $entity_gallery = $this->drupalGetEntityGalleryByTitle($edit["title"]);

    // Set the flag to alter the view mode and view the entity gallery.
    variable_set('entity_gallery_test_change_view_mode', 'teaser');
    $this->drupalGet('gallery/' . $entity_gallery->egid);

    // Check that teaser mode is viewed.
    $this->assertText('Extra data that should appear only in the teaser for the entity gallery.', 'Teaser text present');
    // Make sure description text is not present.
    $this->assertNoText('Data that should appear only in the description for the entity gallery.', 'Description text not present');
    // Make sure tags are present.
    $this->assertText($term->name, 'Taxonomy term present');

    // Test that the correct build mode has been set.
    $build = entity_gallery_view($entity_gallery);
    $this->assertEqual($build['#view_mode'], 'teaser', 'The view mode has correctly been set to teaser.');
  }
}

/**
 * Tests the cache invalidation of entity gallery operations.
 */
class EntityGalleryPageCacheTest extends EntityGalleryWebTestCase {

  /**
   * An admin user with administrative permissions for entity galleries.
   */
  protected $admin_user;

  public static function getInfo() {
    return array(
        'name' => 'Entity gallery page cache test',
        'description' => 'Test cache invalidation of entity gallery operations.',
        'group' => 'Entity Gallery',
    );
  }

  function setUp() {
    parent::setUp();

    variable_set('cache', 1);
    variable_set('page_cache_maximum_age', 300);

    $this->admin_user = $this->drupalCreateUser(array(
        'bypass entity gallery access',
        'access entity galleries overview',
        'administer entity galleries',
    ));
  }

  /**
   * Tests deleting entity galleries clears page cache.
   */
  public function testEntityGalleryDelete() {
    $entity_gallery_path = 'gallery/' . $this->drupalCreateEntityGallery()->egid;

    // Populate page cache.
    $this->drupalGet($entity_gallery_path);

    // Login and delete the entity gallery.
    $this->drupalLogin($this->admin_user);
    $this->drupalPost($entity_gallery_path . '/delete', array(), t('Delete'));

    // Logout and check the entity gallery is not available.
    $this->drupalLogout();
    $this->drupalGet($entity_gallery_path);
    $this->assertResponse(404);

    // Create two new entity galleries.
    $entity_galleries[0] = $this->drupalCreateEntityGallery();
    $entity_galleries[1] = $this->drupalCreateEntityGallery();
    $entity_gallery_path = 'gallery/' . $entity_galleries[0]->egid;

    // Populate page cache.
    $this->drupalGet($entity_gallery_path);

    // Login and delete the entity galleries.
    $this->drupalLogin($this->admin_user);
    $this->drupalGet('admin/content/gallery');
    $edit = array(
        'operation' => 'delete',
        'entity_galleries[' . $entity_galleries[0]->egid . ']' => TRUE,
        'entity_galleries[' . $entity_galleries[1]->egid . ']' => TRUE,
    );
    $this->drupalPost(NULL, $edit, t('Update'));
    $this->drupalPost(NULL, array(), t('Delete'));

    // Logout and check the entity gallery is not available.
    $this->drupalLogout();
    $this->drupalGet($entity_gallery_path);
    $this->assertResponse(404);
  }
}
