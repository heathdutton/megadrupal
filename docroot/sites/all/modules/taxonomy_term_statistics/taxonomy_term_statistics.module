<?php

/**
 * @file
 * Logs and displays access statistics for a site.
 */

/**
 * Implements hook_help().
 */
function taxonomy_term_statistics_help($path, $arg) {
  switch ($path) {
    case 'admin/help#taxonomy_term_statistics':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Taxonomy Term Statistics module shows you how often a given taxonomy term is viewed, who viewed it, the previous page the user visited (referrer URL), and when it was viewed. These statistics are useful in determining how users are visiting and navigating your site. For more information, see the online handbook entry for the <a href="@taxonomy-term-statistics">Taxonomy Term Statistics module</a>.', array('@taxonomy-term-statistics' => url('http://drupal.org/documentation/modules/taxonomy_term_statistics/'))) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Managing logs') . '</dt>';
      $output .= '<dd>' . t('To enable collection of statistics, the <em>Enable access log</em> checkbox on the <a href="@statistics-settings">Statistics settings page</a> must be checked. The <em>Discard access logs older than</em> setting on the settings page specifies the length of time entries are kept in the log before they are deleted. This setting requires a correctly configured <a href="@cron">cron maintenance task</a> to run.', array('@statistics-settings' => url('admin/config/system/statistics'), '@cron' => 'http://drupal.org/cron')) . '</dd>';
      $output .= '<dt>' . t('Term view counter') . '</dt>';
      $output .= '<dd>' . t('The Taxonomy Term Statistics module includes a counter for each taxonomy term that increases whenever the taxonomy term is viewed. To use the counter, enable <em>Count taxonomy term views</em> on the <a href="@statistics-settings">statistics settings page</a>, and set the necessary <a href="@permissions">permissions</a> (<em>View taxonomy term hits</em>) so that the counter is visible to the users.', array('@statistics-settings' => url('admin/config/system/statistics'), '@permissions' => url('admin/people/permissions', array('fragment' => 'module-taxonomy-statistics')))) . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_taxonomy_term_statistics().
 * 
 * Exposes the data that is stored in the taxonomy_term_counter table to views.
 * It allows us to show the data in views displays, and to filter and sort
 * views displays based on the data.
 */
function taxonomy_term_statistics_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'taxonomy_term_statistics') . '/includes/views',
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for statistics_settings_form().
 * 
 * Adds a new option to the statistics_settings_form(). When set a counter is
 * incremented each time a taxonomy term is viewed.
 */
function taxonomy_term_statistics_form_statistics_settings_form_alter(&$form, &$form_state) {
  // Taxonomy terms counter settings.
  $form['taxonomy_term'] = array(
    '#type' => 'fieldset',
    '#title' => t('Taxonomy terms viewing counter settings'),
  );
  $form['taxonomy_term']['taxonomy_term_statistics_count_term_views'] = array(
    '#type' => 'checkbox',
    '#title' => t('Count taxonomy term views'),
    '#default_value' => variable_get('taxonomy_term_statistics_count_term_views', 0),
    '#description' => t('Increment a counter each time a taxonomy term is viewed.'),
  );
  $form['taxonomy_term']['taxonomy_term_statistics_count_term_views_ajax'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use Ajax to increment the counter'),
    '#default_value' => variable_get('taxonomy_term_statistics_count_term_views_ajax', 0),
    '#description' => t('Perform the count asynchronously after page load rather than during page generation.'),
    '#states' => array(
      'disabled' => array(
        ':input[name="taxonomy_term_statistics_count_term_views"]' => array(
          'checked' => FALSE
        ),
      ),
    ),
  );
}

/**
 * Implements hook_exit().
 *
 * Gathers statistics for page accesses.
 */
function taxonomy_term_statistics_exit() {
  global $user;

  // When serving cached pages with the 'page_cache_without_database'
  // configuration, system variables need to be loaded. This is a major
  // performance decrease for non-database page caches, but with Statistics
  // module, it is likely to also have 'statistics_enable_access_log' enabled,
  // in which case we need to bootstrap to the session phase anyway.
  drupal_bootstrap(DRUPAL_BOOTSTRAP_VARIABLES);

  if (variable_get('taxonomy_term_statistics_count_term_views', 0) && !variable_get('taxonomy_term_statistics_count_term_views_ajax', 0)) {
    // We are counting taxonomy term views.
    if (arg(0) == 'taxonomy' && arg(1) == 'term' && is_numeric(arg(2)) && arg(3) == NULL) {
      // A node has been viewed, so update the node's counters.
      db_merge('taxonomy_term_counter')
        ->key(array(
          'tid' => arg(2),
        ))
        ->fields(array(
          'daycount' => 1,
          'totalcount' => 1,
          'timestamp' => REQUEST_TIME,
        ))
        ->expression('daycount', 'daycount + 1')
        ->expression('totalcount', 'totalcount + 1')
        ->execute();
    }
  }
}

/**
 * Implements hook_permission().
 */
function taxonomy_term_statistics_permission() {
  return array(
    'administer taxonomy term statistics' => array(
      'title' => t('Administer taxonomy term statistics'),
    ),
    'access taxonomy term statistics' => array(
      'title' => t('View taxonomy term access statistics'),
    ),
    'view taxonomy term post access counter' => array(
      'title' => t('View taxonomy term hits'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function taxonomy_term_statistics_menu() {
  $items['taxonomy/term/%taxonomy_term/track'] = array(
    'title' => 'Track',
    'page callback' => 'taxonomy_term_statistics_taxonomy_term_tracker',
    'access callback' => 'user_access',
    'access arguments' => array(
      'access taxonomy term statistics',
    ),
    'type' => MENU_LOCAL_TASK,
    'weight' => 11,
    'file' => 'taxonomy_term_statistics.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_taxonomy_term_view().
 * 
 * Adds the taxonomy term counter to the taxonomy term links.
 */
function taxonomy_term_statistics_taxonomy_term_view($term, $view_mode, $langcode) {
  // Attach Ajax taxonomy term count statistics if configured.
  if (variable_get('taxonomy_term_statistics_count_term_views', 0) && variable_get('taxonomy_term_statistics_count_term_views_ajax', 0)) {
    if (!empty($term->tid) && $view_mode == 'full' && taxonomy_term_is_page($term)) {
      $term->content['#attached']['js'] = array(
        drupal_get_path('module', 'taxonomy_term_statistics') . '/taxonomy_term_statistics.js' => array(
          'scope' => 'footer',
        ),
      );
      $settings = array(
        'data' => array(
          'tid' => $term->tid,
        ),
        'url' => url(drupal_get_path('module', 'taxonomy_term_statistics') . '/taxonomy_term_statistics.php')
      );
      $term->content['#attached']['js'][] = array(
        'data' => array(
          'taxonomy_term_statistics' => $settings,
        ),
        'type' => 'setting',
      );
    }
  }

  if ($view_mode != 'rss') {
    if (user_access('view taxonomy term post access counter')) {
      $taxonomy_term_statistics = taxonomy_term_statistics_get($term->tid);
      if ($taxonomy_term_statistics) {
        $links['taxonomy_term_statistics_counter']['title'] = format_plural($taxonomy_term_statistics['totalcount'], '1 read', '@count reads');
        $term->content['links']['taxonomy_term_statistics'] = array(
          '#theme' => 'links__node__statistics',
          '#links' => $links,
          '#attributes' => array(
            'class' => array(
              'links',
              'inline',
            )
          ),
        );
      }
    }
  }
}

/**
 * Implements hook_cron().
 */
function taxonomy_term_statistics_cron() {
  $taxonomy_term_statistics_timestamp = variable_get('taxonomy_term_statistics_day_timestamp', '');

  if ((REQUEST_TIME - $taxonomy_term_statistics_timestamp) >= 86400) {
    // Reset day counts.
    db_update('taxonomy_term_counter')
      ->fields(array('daycount' => 0))
      ->execute();
    variable_set('taxonomy_term_statistics_day_timestamp', REQUEST_TIME);
  }

  // Clean up expired access logs (if applicable).
  if (variable_get('taxonomy_term_statistics_flush_accesslog_timer', 259200) > 0) {
    db_delete('accesslog')
      ->condition('timestamp', REQUEST_TIME - variable_get('taxonomy_term_statistics_flush_accesslog_timer', 259200), '<')
      ->execute();
  }
}

/**
 * Returns the most viewed taxonomy terms of all time, today, or the
 * last-viewed taxonomy terms.
 *
 * @param $dbfield
 *   The database field to use, one of:
 *   - 'totalcount': Integer that shows the top viewed content of all time.
 *   - 'daycount': Integer that shows the top viewed content for today.
 *   - 'timestamp': Integer that shows only the last viewed node.
 * @param $dbrows
 *   The number of rows to be returned.
 *
 * @return SelectQuery|FALSE
 *   A query result containing the taxonomy term ID, name, user ID that owns 
 *   the taxonomy term, and the username for the selected taxonomy term(s), or
 *   FALSE if the query could not be executed correctly.
 */
function taxonomy_term_statistics_name_list($dbfield, $dbrows) {
  $fields = array(
    'totalcount',
    'daycount',
    'timestamp',
  );
  if (in_array($dbfield, $fields)) {
    $query = db_select('taxonomy_term_data', 'ttd');
    $query->join('taxonomy_term_counter', 'ttc', 'ttd.tid = ttc.tid');

    return $query
      ->fields('ttd', array(
        'tid',
        'name',
      ))
      ->condition($dbfield, 0, '<>')
      ->orderBy($dbfield, 'DESC')
      ->range(0, $dbrows)
      ->execute();
  }
  return FALSE;
}

/**
 * Retrieves a node's "view statistics".
 *
 * @param $nid
 *   The node ID.
 *
 * @return
 *   An associative array containing:
 *   - totalcount: Integer for the total number of times the node has been
 *     viewed.
 *   - daycount: Integer for the total number of times the node has been viewed
 *     "today". For the daycount to be reset, cron must be enabled.
 *   - timestamp: Integer for the timestamp of when the node was last viewed.
 */
function taxonomy_term_statistics_get($tid) {

  if ($tid > 0) {
    // Retrieve an array with both totalcount and daycount.
    return db_query('SELECT totalcount, daycount, timestamp FROM {taxonomy_term_counter} WHERE tid = :tid', array(':tid' => $tid), array('target' => 'slave'))->fetchAssoc();
  }
}

/**
 * Implements hook_block_info().
 */
function taxonomy_term_statistics_block_info() {
  $blocks = array();

  if (variable_get('taxonomy_term_statistics_count_term_views', 0)) {
    $blocks['popular-terms']['info'] = t('Popular taxonomy terms');
    // Too dynamic to cache.
    $blocks['popular-terms']['cache'] = DRUPAL_NO_CACHE;
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function taxonomy_term_statistics_block_configure($delta = '') {
  // Popular taxonomy terms block settings
  $map = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30, 40);
  $numbers = array('0' => t('Disabled')) + drupal_map_assoc($map);
  $form['taxonomy_term_statistics_block_top_day_num'] = array(
    '#type' => 'select',
    '#title' => t("Number of day's top taxonomy term views to display"),
    '#default_value' => variable_get('taxonomy_term_statistics_block_top_day_num', 0),
    '#options' => $numbers,
    '#description' => t('How many content items to display in "day top taxonomy terms" list.')
  );
  $form['taxonomy_term_statistics_block_top_all_num'] = array(
    '#type' => 'select',
    '#title' => t('Number of all time taxonomy term views to display'),
    '#default_value' => variable_get('taxonomy_term_statistics_block_top_all_num', 0),
    '#options' => $numbers,
    '#description' => t('How many content items to display in "all time taxonomy terms" list.'));
  $form['taxonomy_term_statistics_block_top_last_num'] = array(
    '#type' => 'select',
    '#title' => t('Number of most recent taxonomy term views to display'),
    '#default_value' => variable_get('taxonomy_term_statistics_block_top_last_num', 0),
    '#options' => $numbers,
    '#description' => t('How many items to display in "recently viewed taxonomy terms" list.'));
  return $form;
}

/**
 * Implements hook_block_save().
 */
function taxonomy_term_statistics_block_save($delta = '', $edit = array()) {
  variable_set('taxonomy_term_statistics_block_top_day_num', $edit['taxonomy_term_statistics_block_top_day_num']);
  variable_set('taxonomy_term_statistics_block_top_all_num', $edit['taxonomy_term_statistics_block_top_all_num']);
  variable_set('taxonomy_term_statistics_block_top_last_num', $edit['taxonomy_term_statistics_block_top_last_num']);
}

/**
 * Implements hook_block_view().
 */
function taxonomy_term_statistics_block_view($delta = '') {
  if (user_access('access content')) {
    $content = array();

    $daytop = variable_get('taxonomy_term_statistics_block_top_day_num', 0);
    if ($daytop && ($result = taxonomy_term_statistics_name_list('daycount', $daytop)) && ($taxonomy_term_name_list = _taxonomy_term_statistics_term_name_list($result, t("Today's:")))) {
      $content['top_day'] = $taxonomy_term_name_list;
      $content['top_day']['#suffix'] = '<br />';
    }

    $alltimetop = variable_get('taxonomy_term_statistics_block_top_all_num', 0);
    if ($alltimetop && ($result = taxonomy_term_statistics_name_list('totalcount', $alltimetop)) && ($taxonomy_term_name_list = _taxonomy_term_statistics_term_name_list($result, t('All time:')))) {
      $content['top_all'] = $taxonomy_term_name_list;
      $content['top_all']['#suffix'] = '<br />';
    }

    $lasttop = variable_get('taxonomy_term_statistics_block_top_last_num', 0);
    if ($lasttop && ($result = taxonomy_term_statistics_name_list('timestamp', $lasttop)) && ($taxonomy_term_name_list = _taxonomy_term_statistics_term_name_list($result, t('Last viewed:')))) {
      $content['top_last'] = $taxonomy_term_name_list;
      $content['top_last']['#suffix'] = '<br />';
    }

    if (count($content)) {
      $block['content'] = $content;
      $block['subject'] = t('Popular taxonomy terms');
      return $block;
    }
  }
}

/**
 * Helper function: Gathers a listing of links to taxonomy terms.
 *
 * @param $result
 *   A database result object from a query to fetch taxonomy term entities.
 * @param $title
 *   A heading for the resulting list.
 *
 * @return
 *   A renderable array containing a list of linked taxonomy term names fetched
 *   from $result, or FALSE if there are no rows in $result.
 */
function _taxonomy_term_statistics_term_name_list($result, $title = NULL) {
  $items = array();
  $num_rows = FALSE;
  foreach ($result as $term) {
    $items[] = l($term->name, 'taxonomy/term/' . $term->tid);
    $num_rows = TRUE;
  }

  $term_name_list = array(
    '#theme' => 'item_list__node',
    '#items' => $items,
    '#title' => $title,
  );
  return $num_rows ? $term_name_list : FALSE;
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function taxonomy_term_statistics_taxonomy_term_delete($term) {
  // clean up statistics table when node is deleted
  db_delete('taxonomy_term_counter')
    ->condition('tid', $term->tid)
    ->execute();
}

/**
 * Implements hook_user_cancel().
 */
function taxonomy_term_statistics_user_cancel($edit, $account, $method) {
  switch ($method) {
    case 'user_cancel_reassign':
      db_update('accesslog')
        ->fields(array(
          'uid' => 0,
        ))
        ->condition('uid', $account->uid)
        ->execute();
      break;
  }
}

/**
 * Implements hook_user_delete().
 */
function taxonomy_term_statistics_user_delete($account) {
  db_delete('accesslog')
    ->condition('uid', $account->uid)
    ->execute();
}
