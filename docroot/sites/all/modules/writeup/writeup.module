<?php

/**
 * @file
 * Processes input using the writeup markup language.
 *
 * @todo better help tips (maybe two versions or custom tips)
 * @todo better documentation on how to install
 */
define('ADMIN_WRITEUP', 'admin/config/content/writeup');
define('ADMIN_FORMATS', 'admin/config/content/formats');

module_load_include('inc', 'writeup');

/**
 * Implements hook_filter_info().
 */
function writeup_filter_info() {
  $filters['filter_writeup'] = array(
    'title' => t('Writeup Filter'),
    'description' => t('Writeup text processing and markup language.'),
    'process callback' => '_filter_writeup_process',
    'settings callback' => '_filter_writeup_settings',
    'default settings' => array(
      'writeup_incname' => 'writeup_inc.txt',
      'writeup_settings' => '',
      'writeup_sanitize' => 1,
      'writeup_help' => '',
    ),
    'tips callback'  => '_filter_writeup_tips'
  );
  return $filters;
}
/**
 * Implements filter processing for hook_filter_info()
 *
 * note difference from Drupal 6 version in that $format is set to the machine name of the format, not its full name (which might include spaces)
 */
function _filter_writeup_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  $tmpfile = file_directory_temp() . '/writeupif.txt';
  file_unmanaged_save_data($text, $tmpfile, FILE_EXISTS_REPLACE);
  $formatname = $format->format;
  $format_incname = $filter->settings['writeup_incname'];
  $format_settings = $filter->settings['writeup_settings'];
  $page = _writeup_process($tmpfile, $formatname, $format_incname, $format_settings);
  if ($filter->settings['writeup_sanitize']) $page = writeup_filter_xss_admin($page);
  return $page;
}

/**
 * Implements hook_permission().
 */
function writeup_permission() {
  return array(
    'administer writeup' => array(
      'title' => t('Administer Writeup input filter'),
      'description' => t('Set up the location of files and site-wide options for the Writeup input filter.'),
      'restrict access' => TRUE,
    ),
    'view status of Writeup pages' => array(
      'title' => t('View status of Writeup input filter pages'),
      'description' => t('Allow content creators to view the status of all pages that use the Writeup input filter.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Format specific administration form.
 */
function _filter_writeup_settings($form, &$form_state, $filter, $format, $defaults) {
  $filter->settings += $defaults;

  $settings['writeup_incname'] = array(
    '#type' => 'textfield',
    '#title' => t('Name of default definitions include file (or empty if none)'),
    '#description' => t('The name of the file that is included in writeup processing for this format, e.g. writeup_inc.txt.'),
    '#default_value' => $filter->settings['writeup_incname'], /* default to 'writeup_inc.txt' */
    '#after_build' => array('writeup_check_file_or_empty'),
    '#size' => 40,
  );
  $settings['writeup_settings'] = array(
    '#type' => 'textfield',
    '#title' => t('Variable settings passed on to Writeup'),
    '#description' => t('Settings in the form: <code>-s var1=value -s var2="another value"</code> for this format.'),
    '#default_value' => escapeshellcmd($filter->settings['writeup_settings']), /* default to "" */
    '#size' => 100,
  );
  $settings['writeup_sanitize'] = array(
    '#type' => 'checkbox',
    '#title' => t('Sanitize page'),
    '#description' => t('Run page through HTML filter, allowing all HTML 5 tags except &lt;script&gt; and those belonging to headers or forms.'),
    '#default_value' => $filter->settings['writeup_sanitize'], /* default to 1 */
  );
  $settings['writeup_help'] = array(
    '#type' => 'textarea',
    '#title' => t('Special help message for this format'),
    '#description' => t('Limited HTML may be used. Leave empty to display default.'),
    '#default_value' => $filter->settings['writeup_help'], /* default to "" */
    '#cols' => 60,
    '#rows' => 5,
  );
  return $settings;
}

/**
 * Implements hook_filter_tips().
 *
 * This hook allows filters to provide help text to users during the content
 * editing process. Short tips are provided on the content editing screen, while
 * long tips are provided on a separate linked page. Short tips are optional,
 * but long tips are highly recommended.
 * Individual formats may have their own help defined which will override this help.
 */
function _filter_writeup_tips($filter, $format, $long = FALSE) {
  return _writeup_tips($filter->settings['writeup_help'], $long);
}

/**
 * Implements hook_block_view().
 */
function writeup_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'writeup_help':
      $block['subject'] = t('Writeup filter tips');
      $block['content'] = _writeup_help_block_content();
      break;
  }
  return $block;
}

/**
 * Implements hook_block_info().
 */
function writeup_block_info() {
  $blocks = array();
  $blocks['writeup_help'] = array(
    'info' => t('Writeup filter tips'),
  );
  return $blocks;
}

/**
 * Provides the content for the Writeup help block.
 */
function _writeup_help_block_content() {
  return '<pre>' . t("
.Header 1
..Header 2
...Header 3
....Header 4
.....Header 5

Link <^http://writeup.org^Link to writeup.org^>

Inline markup like _italics_,
 *bold*, and <`code()`>.

// Comments on a line

-Bullet lists can be any level of nesting
 -Nested
 -And again
 simple list element (not bullet or number)

1. Numbered list
3. With a period, numbers need not be contiguous
#. # means auto numbering
 A. Can be letters (upper or lower)
 i. Roman
 -mixed with unordered lists
  list elements can be continued
#. will be numbered as 5.

<span>html may be used anywhere</span>

<(anything between these marks is
<div>displayed, *literally* and not
interpreted</div>)>") . '</pre>';
}

function writeup_status_page() {
  $sql = "SELECT n.nid, t.name AS format, f.format AS format_id, n.title, b.body_value AS body FROM {node} n
    JOIN {field_data_body} b on b.entity_id = n.nid
    JOIN {filter} f on f.format = b.body_format
    JOIN {filter_format} t on t.format = b.body_format
    WHERE b.entity_type = 'node'
      AND f.status = 1
      AND f.module='writeup'
    ORDER BY t.name, n.title";
 return writeup_status($sql);
}

/**
 * Returns a status page from a user-supplied SQL string.
 * Designed to be used for displaying the status of pages where fields other than the body
 * use the Writeup input filter.
 *
 * @param $sql
 *   SQL string that returns five fields: node id, format (name), format id, title and body
 *
 * @return $page
 *   resulting status page
 */
function writeup_status($sql) {
  // build an array of filter objects so we can get settings info later
  $filter_setting = db_query("SELECT format, settings from {filter} WHERE module = 'writeup'");
  $fsetting = array();
  foreach ($filter_setting as $filter) {
    $fsetting[$filter->format] = unserialize($filter->settings);
  }
  $result = db_query($sql);
  $page = '<table><tr><th>Format</th><th>Status</th><th>Title</th></tr>';
  $tmpfile = file_directory_temp() . '/writeupif.txt';
  foreach ($result as $item) {
    file_unmanaged_save_data($item->body, $tmpfile, FILE_EXISTS_REPLACE);
    $format_incname = $fsetting[$item->format_id]['writeup_incname'];
    $format_settings = $fsetting[$item->format_id]['writeup_settings'];
    $errors = '';
    switch (_writeup_get_errors($tmpfile, $item->format, $format_incname, $format_settings, $errors)) {
      case 0:
        $err = "good";
        break;
      case 1:
        $err = "warning";
        break;
      default:
        $err = "error";
        break;
    }
    if ($err != "good") { // need to replace ' with " so that the title tag is never broken
      $err = "<abbr style='color:red; font-weight:bold;' title='" . str_replace("'", '"', $errors) . "'>" . $err . "</abbr>";
    }
    $page .= '<tr><td>' . $item->format . '</td><td>' . $err . '</td><td>' . l($item->title, 'node/' . $item->nid) . '</td></tr>';
  }
  $page .= '</table>';
  return $page;
}
