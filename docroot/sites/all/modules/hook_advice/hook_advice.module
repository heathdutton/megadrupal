<?php

/**
 * @file
 * This is the file description for Page Info module.
 *
 * This module provides page information such as hook,etc.
 */

/**
 * Implements hook_menu().
 */
function hook_advice_menu() {

  $items['hookadvice'] = array(
    'title' => 'Hook Advice',
    'page callback' => 'hook_advice_page_details',
    'access callback' => TRUE,
    'access callback' => 'hook_advice_access',
    'access arguments' => array('access for hook advice'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function hook_advice_init() {
  if (user_access('access for hook advice')) {
    $hook_advice_enabled = isset($_GET['hook_advice']) ? $_GET['hook_advice'] : FALSE;
    if ($hook_advice_enabled) {
      hook_advice_exploration();
    }
  }
}


/**
 * Implements hook_permission().
 */
function hook_advice_permission() {

  return array(
    'access for hook advice' => array(
      'title' => t('Provide access for hook advice'),
      'description' => t('Provide access for hook advice'),
    ),
  );

}

/**
 * Implements hook_access().
 */
function hook_advice_access($string, $account = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  // User #1 has all privileges:
  if ($account->uid == 1) {
    return TRUE;
  }
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['perm'] = &drupal_static(__FUNCTION__);
  }
  $perm = &$drupal_static_fast['perm'];
  if (!isset($perm[$account->uid])) {
    $role_permissions = user_role_permissions($account->roles);

    $perms = array();
    foreach ($role_permissions as $one_role) {
      $perms += $one_role;
    }
    $perm[$account->uid] = $perms;
  }

  return isset($perm[$account->uid][$string]);
}

/**
 * Processing hook advice.
 */
function hook_advice_exploration() {
  $data = db_select('system', 's')
          ->fields('s')
          ->condition('s.status', 1, '=')
          ->execute()
          ->fetchAll();

  $items = array();
  $menu_details = array();

  if (count($data) > 0) {
    foreach ($data as $d) {
      $module_name = $d->name . "_menu";

      if (function_exists($module_name)) {
        foreach ($module_name() as $key => $value) {

          $items[] = explode('/', $key);
          $menu_details[] = $value;
          $module_details[] = isset($d->name) ? $d->name : '-';
        }

      }
      else {
        continue;
      }

    }
  }

  $total_menu_items = count($items);
  if ($total_menu_items > 0) {

    for ($i = 0; $i < $total_menu_items; $i++) {
      foreach ($items[$i] as $menu_key => $menu) {
        $arbitrary = strpos($menu, "%");
        if ($arbitrary === 0) {
          $items[$i][$menu_key] = "%";
        }
      }
      // $menu_items[] = implode('/', $items[$i]);
    }
  }

  $url = $_GET['q'];
  $url_breakage = explode('/', $url);
  foreach ($url_breakage as $key => $value) {
    if (is_numeric($value)) {
      $url_breakage[$key] = "%";
    }
    $url_process = strpos($value, "%");
    if ($url_process === 0) {
      $url_breakage[$key] = "%";
    }
  }

  $details = array();
  $maximum_occurence = array();
  foreach ($items as $key => $value) {

    /*  error_log("URL = " . print_r($url_breakage, true) . " key = " . $key . "
    value = " . print_r($value, true));
    error_log("diff counter = " . count(array_diff($url_breakage, $value)));
     */
    if (count(array_diff($url_breakage, $value)) === 0 && (count($url_breakage) === count($value))) {
      $details = $menu_details[$key];
      $module_info = $module_details[$key];
      // $matched_key = $key;
    }
    else {
      $maximum_occurence[$key] = count(array_intersect($url_breakage, $value));
    }
  }

  $details_counter = count($details);
  if ($details_counter == 0) {
    if (max($maximum_occurence) != 0) {
      $keys_occurence = array_keys($maximum_occurence, max($maximum_occurence));
      if (count($keys_occurence) == 1) {
        $details = $menu_details[$keys_occurence[0]];
        $module_info = $module_details[$keys_occurence[0]];
        $_SESSION['too_many_occurence'] = FALSE;
      }
      elseif (count($keys_occurence) > 1) {
        $_SESSION['too_many_occurence'] = TRUE;
      }
    }
    else {
      $_SESSION['too_many_occurence'] = FALSE;
    }
  }
  else {
    $_SESSION['too_many_occurence'] = FALSE;
  }

  // Uncomment the below code to print the menu items
  /*  error_log("menu keys array = ".print_r($menu_items, true));
  error_log("url details = ".implode('/', $url_breakage));
  error_log("menu keys array = ".implode('/', $items[$matched_key]));
  error_log("Matched key = ".$matched_key);
  error_log("menu details = ".print_r($details, true));
   */
  if ($details_counter == 0) {
    $clean_url = implode('/', $url_breakage);
    $query = db_select('menu_router', 'm');
    $query->leftjoin('menu_links', 'l', 'm.path=l.router_path');
    $query->fields('m', array('title', 'description', 'access_callback', 'path'));
    $query->fields('l', array('link_title'));
    $query->condition('m.path', $clean_url, '=');
    $data_query = $query->execute();
    $search_data = $data_query->fetchObject();
    if (count($search_data) > 0) {
      $details = $search_data;
      $module_info = '-';
      $_SESSION['too_many_occurence'] = FALSE;
    }
  }

  if (!empty($module_info)) {
    $_SESSION['module_info'] = $module_info;
  }
  else {
    $_SESSION['module_info'] = '-';
  }
  $_SESSION['details'] = $details;
  drupal_goto('hookadvice');

}

/**
 * Preparing hook advice to view.
 */
function hook_advice_page_details() {

  $data = isset($_SESSION['details']) ? $_SESSION['details'] : '';
  $module_info = isset($_SESSION['module_info']) ? $_SESSION['module_info'] : '';
  $too_many_occurence = isset($_SESSION['too_many_occurence']) ? $_SESSION['too_many_occurence'] : '';
  if ($too_many_occurence) {
    return t("Too many records are matched. Unable to display data.");
  }

  if (!empty($data) && !empty($module_info)) {

    $output = '';
    if (count($data) > 0) {
      $output .= "<table>";
      $output .= "<tr><th>" . t('Info') . "</th><th>" . t('Details') . "</th></tr>";
      $output .= "<tr><td>" . t('Module') . "</td><td>" . $module_info . "</td></tr>";
      foreach ($data as $k => $v) {

        if (is_array($v)) {
          $output .= "<tr><td>" . $k . "</td><td>" . hook_advice_array_details($v) . "</td></tr>";
        }
        else {
          $output .= "<tr><td>" . $k . "</td><td>" . $v . "</td></tr>";
        }

      }
      $output .= "</table>";
    }
    else {
      $output .= t("No data is available.");
    }

    return $output;

  }
  else {
    return t("Data seems to unavailable for the moment.");
  }

}

/**
 * Processing arguments.
 */
function hook_advice_array_details($data, $recall = NULL) {

  if (empty($recall)) {
    $output = '';
  }

  if (count($data) > 0) {
    foreach ($data as $key => $value) {
      if (is_array($value)) {
        hook_advice_array_details($value, TRUE);
      }
      elseif (is_object($value)) {
        hook_advice_array_details((array) $value, TRUE);
      }
      else {
        $output .= "<b>" . t('Argument') . "</b><br/>";
        $output .= t('Key =') . $key . ", " . t('Value =') . $value . "<br/>";
      }

    }
  }
  return $output;
}
