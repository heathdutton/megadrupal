<?php

/**
 * @file
 *   Simpletests for basic functioning of delayqueue.
 */

/**
 * Call handling testing.
 *
 * Inherits ModuleTestCase to also check watchdog for calls.
 */
class VoipQueueCallTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Call item handling',
      'description' => 'Check worker callback, call handling, expiration.',
      'group' => 'VoIP Queue',
    );
  }

  function setUp() {
    parent::SetUp('voipqueue_test');
    variable_set('queue_default_class', 'VoipQueue');
    variable_set('voip_default_server', 'test');
  }

  /**
   * Test cron called worker dial.
   *
   * NB. Requires cron enabled advancedqueue.
   */
  public function testDialItem() {
    $queue = DrupalQueue::get($this->randomName());
    $queue->createQueue();

    $call_array = array();
    $script = VoipScript::loadScript('voipqueue_test_dial');
    $call = new VoipCall(array());
    $number = rand(11111, 99999);
    $call->setDestNumber($number);
    $call->setScript($script);

    $item = new VoipQueueDial($call);
    $queue->createItem($item);
    $call_loaded = VoipCall::load($call->getCid());
    $this->cronRun();

    $count = $this->countLogMessage(
      'voip',
      'VoipTestServer dial() - cid:@cid - dest_number:@dest_number - server_config:@server_config',
      array(
        '@cid' => $call_loaded->getCid(),
        '@dest_number' => $call_loaded->getDestNumber(),
        '@server_config' => print_r(NULL, TRUE)
      ),
      WATCHDOG_INFO
    );
    $this->assertEqual($count, 1, t('Dialed number'));

    // Call should not be made again.
    $this->cronRun();
    $count = $this->countLogMessage(
      'voip',
      'VoipTestServer dial() - cid:@cid - dest_number:@dest_number - server_config:@server_config',
      array(
        '@cid' => $call_loaded->getCid(),
        '@dest_number' => $call_loaded->getDestNumber(),
        '@server_config' => print_r(NULL, TRUE),
      ),
      WATCHDOG_INFO
    );
    $this->assertEqual($count, 1, t('Number not redialed.'));

    // Failing server check redial.
    variable_set('voiptest_server_errorserver', TRUE);
    $call = new VoipCall(array());
    $number = rand(11111, 99999);
    $call->setDestNumber($number);
    $call->setScript($script);

    $item = new VoipQueueDial($call);
    $item->setRetry(5, 0); // Two immediate redials.
    $queue->createItem($item);
    $call_loaded = VoipCall::load($call->getCid());
    $params = array('voipcall' => $call_loaded, 'server_config' => NULL);
    $this->cronRun();
    // Assert x number of runs. @todo change the reporting.
    $count = $this->countLogMessage(
      'voip',
      'VoipTestServer dial() - cid:@cid - dest_number:@dest_number - server_config:@server_config',
      array(
        '@cid' => $call_loaded->getCid(),
        '@dest_number' => $call_loaded->getDestNumber(),
        '@server_config' => print_r(NULL, TRUE),
      ),
      WATCHDOG_INFO
    );
    $this->assertEqual($count, 6, t('Number dialed once and then redialed five times.'));

    // Reset voiptest_server.
    variable_set('voiptest_server_errorserver', FALSE);

    // Simulate a claimed call that continues over max length.
    $call = new VoipCall(array());
    $number = rand(11111, 99999);
    $call->setDestNumber($number);
    $call->setScript($script);

    $item = new VoipQueueDial($call);
    $item->setMaxLength(1);
    $queue->createItem($item);
    $call_loaded = VoipCall::load($call->getCid());
    $this->assertTrue($queue->claimItem(), t('Call claimed'));
    sleep(1);
    $this->cronRun();
    $count = $this->countLogMessage(
      'voip',
      'VoipTestServer hangup() - cid:@cid - dest_number:@dest_number - server_config:@server_config',
      array(
        '@cid' => $call_loaded->getCid(),
        '@dest_number' => $call_loaded->getDestNumber(),
        '@server_config' => print_r(NULL, TRUE),
      ),
      WATCHDOG_INFO
    );
    $this->assertEqual($count, 1, t('Attempted to release and hangup timed out call.'));
  }

  /**
   * Test cron called worker text.
   *
   * NB. Requires cron enabled advancedqueue.
   */
  public function testTextItem() {
    $queue = DrupalQueue::get($this->randomName());
    $queue->createQueue();

    $call_array = array();
    $call = new VoipCall(array());
    $number = rand(11111, 99999);
    $call->setDestNumber($number);

    $item = new VoipQueueText($call, 'Test text message');
    $queue->createItem($item);
    $call_loaded = VoipCall::load($call->getCid());
    $this->cronRun();

    $count = $this->countLogMessage(
      'voip',
      'VoipTestServer send_text() - text:@text - cid:@cid - dest_number:@dest_number - reply:@reply - server_config:@server_config',
      array(
        '@text' => 'Test text message',
        '@cid' => $call_loaded->getCid(),
        '@dest_number' => $call_loaded->getDestNumber(),
        '@reply' => print_r(FALSE, TRUE),
        '@server_config' => print_r(NULL, TRUE),
      ),
      WATCHDOG_INFO
    );
    $this->assertEqual($count, 1, t('Text message sent.'));


    // Call should not be made again.
    $this->cronRun();
    $count = $this->countLogMessage(
      'voip',
      'VoipTestServer send_text() - text:@text - cid:@cid - dest_number:@dest_number - reply:@reply - server_config:@server_config',
      array(
        '@text' => 'Test text message',
        '@cid' => $call_loaded->getCid(),
        '@dest_number' => $call_loaded->getDestNumber(),
        '@reply' => print_r(FALSE, TRUE),
        '@server_config' => print_r(NULL, TRUE),
      ),
      WATCHDOG_INFO
    );
    $this->assertEqual($count, 1, t('Text message not resent.'));
  }


  /**
   * Verify a log entry was entered for a module's status change.
   * Called in the same way of the expected original watchdog() execution.
   *
   * Copied from ModuleTestCase in system.test
   *
   * @param $type
   *   The category to which this message belongs.
   * @param $message
   *   The message to store in the log. Keep $message translatable
   *   by not concatenating dynamic values into it! Variables in the
   *   message should be added by using placeholder strings alongside
   *   the variables argument to declare the value of the placeholders.
   *   See t() for documentation on how $message and $variables interact.
   * @param $variables
   *   Array of variables to replace in the message on display or
   *   NULL if message is already translated or not possible to
   *   translate.
   * @param $severity
   *   The severity of the message, as per RFC 3164.
   * @param $link
   *   A link to associate with the message.
   */
  function countLogMessage($type, $message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = '') {
    // debug(db_query('SELECT * FROM {watchdog} WHERE type = :type ORDER BY wid DESC LIMIT 1', array(':type' => $type))->fetchAll());
    $count = db_select('watchdog', 'w')
      ->condition('type', $type)
      ->condition('message', $message)
      ->condition('variables', serialize($variables))
      ->condition('severity', $severity)
      ->condition('link', $link)
      ->countQuery()
      ->execute()
      ->fetchField();
    return $count;
  }
}

/**
 * Function testing.
 *
 * Inherits QueueTestCase to also run standard queue tests to check that
 * normal functionality also works with the queue.
 */
class VoipQueueTestCase extends QueueTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Function of VoIP Queue',
      'description' => 'Check adding, timing, pulling of items from queue',
      'group' => 'VoIP Queue',
    );
  }

  function setUp() {
    parent::SetUp('voipqueue_test');
    variable_set('queue_default_class', 'VoipQueue');
  }

  /**
   * Test additional delay functionality.
   */
  public function testDrupalQueueDelayItem() {
    // Create two queues.
    $queue1 = DrupalQueue::get($this->randomName());
    $queue1->createQueue();
    // Disable cron workers so test can claimItems manually.
    variable_set('advancedqueue_use_cron', FALSE);

    // Create four items.
    $call_array = array();
    $script = VoipScript::loadScript('voipqueue_test_dial');
    for ($i = 0; $i < 4; $i++) {
      $call = new VoipCall(array());
      $call->setDestNumber(rand(11111, 99999));
      $call->setScript($script);
      $call_array[] = $call;
    }

    $items = array();
    $original_data = array();
    $items[] = new VoipQueueDial($call_array[0], FALSE);
    $item = new VoipQueueDial($call_array[1], FALSE);
    $item->setDelay(4);
    $items[] = $item;
    // The delay for these items needs to be long enough not to expire because
    // simpletest is slow.
    $item = new VoipQueueDial($call_array[2], FALSE);
    $item->setDelay(15);
    $items[] = $item;
    $item = new VoipQueueDial($call_array[3], FALSE);
    $item->setDelay(50);
    $items[] = $item;

    $queue1->createItem($items[2]);
    $queue1->createItem($items[3]);

    // Check that items cannot be claimed.
    $this->assertFalse($queue1->claimItem(), t('Delayed item cannot immediately be claimed from queue'));
    $this->assertEqual($queue1->numberOfItems(), 2, t('Two items listed as queued.'));
    $this->assertEqual($queue1->numberOfDelayedItems(), 2, t('Two items in the queue delayed.'));

    // Run cron.
    $this->cronRun();
    // Then that items still cannot be claimed.
    $this->assertFalse($queue1->claimItem(), t('Delayed item cannot immediately be claimed from queue.'));
    $this->assertEqual($queue1->numberOfItems(), 2, t('Two items still listed as queued.'));
    $this->assertEqual($queue1->numberOfDelayedItems(), 2, t('Two items still in the queue delayed.'));

    $queue1->createItem($items[0]);
    $queue1->createItem($items[1]);

    // One should now be immediately available.
    $this->assertEqual($queue1->numberOfItems(), 4, t('Four items in total listed as queued.'));
    $this->assertEqual($queue1->numberOfDelayedItems(), 3, t('One item with 0 delay immediately available.'));

    // Wait until delay over.
    sleep(15);
    $this->cronRun();

    // Now number of items should be ready.
    $this->assertEqual($queue1->numberOfItems(), 4, t('Remains four items listed as queued.'));
    $this->assertEqual($queue1->numberOfDelayedItems(), 1, t('One delayed item in the queue.'));

    $new_items = array();
    $new_calls = array();

    $new_items[] = $item = $queue1->claimItem();
    $new_calls[] = $item->getCall();

    $new_items[] = $item = $queue1->claimItem();
    $new_calls[] = $item->getCall();

    $new_items[] = $item = $queue1->claimItem();
    $new_calls[] = $item->getCall();
    $this->assertEqual($this->queueCallScore($call_array, $new_calls), 3, t('Three items matched'));

    $this->assertEqual($queue1->numberOfItems(), 4, t('Four items listed as remaining in queue.'));
    $this->assertEqual($queue1->numberOfDelayedItems(), 1, t('The one item listed as remaining queued is delayed.'));
    // Reset the time to add delay when releasing.
    $new_items[0]->setEnqueueTime();
    $queue1->releaseItem($new_items[0]);
    $queue1->deleteItem($new_items[1]);
    $this->assertEqual($queue1->numberOfItems(), 3, t('Three items listed as queued after deleting on one job.'));
    $this->assertEqual($queue1->numberOfDelayedItems(), 2, t('Two delayed items after one item released with delay.'));
  }

  /**
   * Test additional concurrent functionality.
   */
  public function testDrupalQueueConcurrentLimits() {
    // Create two queues.
    $queue1_name = $this->randomName();
    $queue2_name = $this->randomName();
    $queue1 = DrupalQueue::get($queue1_name);
    $queue1->createQueue();
    $queue2 = DrupalQueue::get($queue2_name);
    $queue2->createQueue();
    // Set default limit, and second list limit.
    VoipQueue::setDefaultLimit(2);
    $queue2->setLimit(3);

    $this->assertEqual(VoipQueue::getDefaultLimit(), 2, t('Correct default limit returned'));
    $this->assertEqual($queue1->getLimit(), 2, t('Correct queue1 limit returned'));
    $this->assertEqual($queue2->getLimit(), 3, t('Correct queue2 limit returned'));

    // Create ten items.
    $data = array();
    for ($i = 0; $i < 10; $i++) {
      $data[] = array($this->randomName() => $this->randomName());
    }

    // Queue items 1 - 3 in the queue1.
    $queue1->createItem($data[0]);
    $queue1->createItem($data[1]);
    $queue1->createItem($data[2]);

    $this->assertEqual($queue1->numberOfClaimedItems(), 0, t('Queue 1 reports no claimed items in queue.'));

    // Try to retrieve three items from queue1; should get limit 2.
    $items = array();
    $new_items = array();

    $items[] = $item = $queue1->claimItem();
    $new_items[] = $item->data;

    $items[] = $item = $queue1->claimItem();
    $new_items[] = $item->data;

    $item = $queue1->claimItem();
    $this->assertFalse($item, t('Third item not claimed from limited queue'));

    $this->assertEqual($queue1->numberOfItems(), 3, t('Queue 1 reports three items in queue.'));
    $this->assertEqual($queue1->numberOfClaimedItems(), 2, t('Queue 1 reports two claimed items in queue.'));

    $this->assertEqual($this->queueScore($data, $new_items), 2, t('Two items matched'));

    // Queue items in queue2.
    $queue2->createItem($data[3]);
    $queue2->createItem($data[4]);
    $queue2->createItem($data[5]);
    $queue2->createItem($data[6]);
    $queue2->createItem($data[7]);

    while ($item = $queue2->claimItem()) {
      $items[] = $item;
      $new_items[] = $item->data;
    }

    $this->assertEqual($queue2->numberOfItems(), 5, t('Queue 2 reports five items in queue.'));
    $this->assertEqual($queue2->numberOfClaimedItems(), 3, t('Queue 2 reports three claimed items in queue.'));
    $this->assertEqual($this->queueScore($data, $new_items), 5, t('Five items matched'));

    // Release and delete an item from queue2.
    $queue2->releaseItem($items[2]);
    $queue2->deleteItem($items[4]);

    $this->assertEqual($queue2->numberOfItems(), 4, t('Queue 2 reports four items in queue after one deleted.'));
    $this->assertEqual($queue2->numberOfClaimedItems(), 1, t('Queue 2 reports one claimed item in queue.'));
    $this->assertTrue($queue2->claimItem(), t('Can now claim item from queue2.'));

    // Reset default limit to unrestricted.
    VoipQueue::setDefaultLimit(-1);
  }

  /**
   * This function returns the number of equal items in two Call items.
   *
   * A retrieved instance of a call has more keys than a created
   * instance, so we just check some core values for comparison.The values are
   * also not always of the same type.
   */
  function queueCallScore($items, $new_items) {
    $score = 0;
    foreach ($items as $item) {
      foreach ($new_items as $new_item) {
        $new_data = $new_item->getCallData();
        $old_data = $item->getCallData();
        if ($new_data->created == $old_data->created &&
            $new_data->script == $old_data->script &&
            $new_data->uid == $old_data->uid &&
            $new_data->cid == $old_data->cid &&
            $new_data->dest_number == $old_data->dest_number
          ) {
          $score++;
        }
      }
    }
    return $score;
  }
}

/**
 * Procedural function testing.
 */
class VoipQueueProceduralFunctionTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Procedural function test',
      'description' => 'Test example, helper, functions for adding call and text.',
      'group' => 'VoIP Queue',
    );
  }

  public function setUp() {
    parent::SetUp('voipqueue_test');
    // Don't run items from cron if advancedqueue cron installed.
    variable_set('advancedqueue_use_cron', FALSE);
  }

  /**
   * Test voipqueue_add_dial() function.
   */
  public function testAddDial() {
    $script = VoipScript::loadScript('voipqueue_test_dial');
    $call = new VoipCall(array());
    $number = rand(11111, 99999);
    $call->setDestNumber($number);
    $call->setScript($script);

    $options = array(
      'max_length' => 2000,
      'retries' => 10,
      'retry_delay' => 300,
      'delay' => 2,
    );

    voipqueue_add_dial($call, $options);
    // Wait, and run cron to release item.
    sleep(2);
    $this->cronRun();

    $queue = DrupalQueue::get('voipqueue_calls');
    $item = $queue->claimItem();
    $item_call = $item->getCall();
    $this->assertEqual($item_call->getDestNumber(), $number, t('Correct destination number.'));
    $this->assertEqual($item->leaseTime, $options['max_length'], t('Correct maximum length.'));
    $this->assertEqual($item->maxRetry, $options['retries'], t('Correct retries.'));
    $this->assertEqual($item->retryDelay, $options['retry_delay'], t('Correct retry delay.'));
    $this->assertEqual($item->delay, $options['delay'], t('Correct start delay.'));
  }

  /**
   * Test voipqueue_add_text() function.
   */
  public function testAddText() {
    $number = rand(11111, 99999);
    $text = $this->randomString(128);

    voipqueue_add_text($number, $text, 1);
    // Wait and run cron to release item.
    sleep(1);
    $this->cronRun();

    $queue = DrupalQueue::get('voipqueue_calls');
    $item = $queue->claimItem();

    $item_call = $item->getCall();
    $this->assertEqual($item_call->getDestNumber(), $number, t('Correct destination number.'));
    $this->assertEqual($item->text, $text, t('Correct message text.'));
    $this->assertEqual($item->delay, 1, t('Correct delay'));
  }
}

class VoipQueueJobTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'VoIP Queue Item',
      'description' => 'Job Item class tests.',
      'group' => 'VoIP Queue',
    );
  }

  public function setUp() {
    variable_set('voip_default_server', 'log');
    parent::SetUp('voipqueue_test');
  }

  public function testJobCreation() {
    $script = VoipScript::loadScript('voipqueue_test_dial');
    $call = new VoipCall(array());
    $call->setDestNumber('123');
    $call->setScript($script);

    // Test call is saved.
    $job = new VoipQueueDial($call);
    $cid = $job->cid;
    $this->assertTrue($cid, t('Valid CID saved'));
    $call = VoipCall::load($cid);
    $this->assertEqual($job->title, $call->getDestNumber() . ':' . $call->getCid(), t('Created and saved call.'));
    $this->assertTrue($job->type == VOIPQUEUE_DIAL, t('Default channel type correctly set.'));

    // Check valid channels.
    $job = new VoipQueueText($call, 'sms text');
    $this->assertTrue($job->type == VOIPQUEUE_TEXT, t('Channel type correctly set.'));
  }
}
