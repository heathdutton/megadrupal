<?php

/**
 * @file
 * File to implement hooks.
 */

/**
 * Implements hook_permission().
 */
function product_case_tracker_permission() {
  $items = array();
  $items['administer case tracker settings'] = array(
    'title' => t('Administer case tracker settings'),
  );
  $items['administer timeline'] = array(
    'title' => t('Administer timeline'),
  );
  $items['administer credentials'] = array(
    'title' => t('Administer credentials'),
  );
  $items['administer autocomplete'] = array(
    'title' => t('Administer autocomplete entries'),
  );
  $items['view all commissioned orders'] = array(
    'title' => t('View all commissioned orders'),
  );
  return $items;
}

/**
 * Implements hook_menu().
 */
function product_case_tracker_menu() {
  $items['admin/store/settings/case_tracker'] = array(
    'title' => 'Product Case Tracker',
    'description' => 'Configure the case tracker for a commissioned product',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('product_case_tracker_admin_panel'),
    'access arguments' => array('administer case tracker settings'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'product_case_tracker.admin.inc',
  );
  $items['admin/store/settings/%/timeline'] = array(
    'title' => 'Timeline Entries',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('product_case_tracker_timeline_panel'),
    'access arguments' => array('administer timeline'),
    'type' => MENU_CALLBACK,
    'file' => 'product_case_tracker.admin.inc',
  );
  $items['admin/%/product_case_tracker'] = array(
    'title' => 'Case Tracker',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('product_case_tracker_track_report'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'product_case_tracker.admin.inc',
  );
  $items['admin/store/settings/%/credentials'] = array(
    'title' => 'Case Tracker Credentials',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('product_case_tracker_credential'),
    'access arguments' => array('administer credentials'),
    'type' => MENU_CALLBACK,
    'file' => 'product_case_tracker.admin.inc',
  );
  $items['artisan/autocomplete'] = array(
    'title' => 'Autocomplete for artisans',
    'page callback' => 'product_case_tracker_artisan_autocomplete',
    'access arguments' => array('administer autocomplete'),
    'type' => MENU_CALLBACK,
    'file' => 'product_case_tracker.admin.inc',
  );
  $items['customer/autocomplete'] = array(
    'title' => 'Autocomplete for customers',
    'page callback' => 'product_case_tracker_customer_autocomplete',
    'access arguments' => array('administer autocomplete'),
    'type' => MENU_CALLBACK,
    'file' => 'product_case_tracker.admin.inc',
  );
  $items['timeline/%'] = array(
    'page callback' => 'product_case_tracker_product_timeline',
    'access arguments' => array('administer timeline'),
    'type' => MENU_CALLBACK,
    'file' => 'product_case_tracker.admin.inc',
  );
  $items['admin/%/commissioned_orders'] = array(
    'title' => 'Commissioned Orders',
    'page callback' => 'product_case_tracker_commissioned_orders',
    'access arguments' => array('view all commissioned orders'),
    'type' => MENU_CALLBACK,
    'file' => 'product_case_tracker.admin.inc',
  );
  $items['admin/%/remove'] = array(
    'page cunction doc coallback' => 'product_case_tracker_remove_collaborator',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'product_case_tracker.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_node_insert().
 */
function product_case_tracker_node_insert($node) {

  // Check whether a case tracker is allowed for this node.
  $result = db_select('product_case_tracker_fields', 'pctf')
  ->fields('pctf')
  ->execute();

  while ($row = $result->fetchAssoc()) {
    $set_content_types[$row['content_type_name']]['timeline_checked'] = $row['timeline'];
  }

  if (isset($set_content_types)) {

    // Associate a case tracker with this node.
    if (in_array($node->type, array_keys($set_content_types))) {
      if ($node->is_new == 1) {
        db_insert('product_case_tracker')
        ->fields(array('nid', 'date_started', 'content_type_name'))
        ->values(array(
          'nid' => $node->nid,
          'date_started' => strtotime('today'),
          'content_type_name' => $node->type,
        ))
        ->execute();
      }
    }

    // Check if timeline is allowed on this class type.
    if (isset($set_content_types[$node->type])) {
      $_SESSION['pct_credit_nid'] = $node->nid;
      if (in_array($node->type, array_keys($set_content_types))) {
        if ($set_content_types[$node->type]['timeline_checked']) {
          $_SESSION['product_case_tracker_content_type_name'] = $node->type;
          $_SESSION['product_case_tracker_nid'] = $node->nid;

          // Verify that this is a new node then, include timeline entries.
          if ($node->is_new == 1) {
            drupal_goto('admin/store/settings/' . $_SESSION['product_case_tracker_content_type_name'] . '/timeline');
          }
          else {
            drupal_set_message('This node seems to be already created. Create a new node to associate a case tracker with it.', 'warning');
          }
        }
        else {
          // If timeline is not enabled, redirect to credentials page.
          drupal_goto('admin/store/settings/' . $_SESSION['pct_credit_nid'] . '/credentials');
        }
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function product_case_tracker_node_delete($node) {

  // Check if this node type is allowed to have a case tracker.
  $result = db_select('product_case_tracker_fields', 'pctf')
  ->fields('pctf', array('content_type_name'))
  ->execute();

  while ($row = $result->fetchAssoc()) {
    $set_content_types[] = $row['content_type_name'];
  }

  if (isset($set_content_types)) {
    if (in_array($node->type, $set_content_types)) {
      db_delete('product_case_tracker')
      ->condition('nid', $node->nid, '=')
      ->execute();

      db_delete('product_case_tracker_timeline')
      ->condition('nid', $node->nid, '=')
      ->execute();

      db_delete('product_case_tracker_timeline_details')
      ->condition('nid', $node->nid, '=')
      ->execute();

      db_delete('product_case_tracker_artisan')
      ->condition('nid', $node->nid, '=')
      ->execute();

      db_delete('product_case_tracker_customer')
      ->condition('nid', $node->nid, '=')
      ->execute();

      db_delete('product_case_tracker_details')
      ->condition('nid', $node->nid, '=')
      ->execute();

      db_delete('product_case_tracker_collabo_details')
      ->condition('nid', $node->nid, '=')
      ->execute();
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function product_case_tracker_form_node_admin_content_alter(&$form, &$form_state, $form_id) {
  $content_types = node_type_get_types();

  // Find class types.
  foreach ($content_types as $name => $details) {
    if ($details->module == 'uc_product') {
      $product_type[$name] = $details->name;
    }
  }

  // Check for every, already created, product class existence.
  $saved_class = db_select('uc_product_classes', 'upc')
  ->fields('upc', array('pcid'))
  ->execute()
  ->fetchCol();

  foreach ($product_type as $name => $detail) {
    if ($name != 'product') {
      if (!in_array($name, $saved_class)) {
        unset($product_type[$name]);

        // Get all node ids for this node type.
        $node_ids = db_select('product_case_tracker', 'pct')
        ->fields('pct', array('nid'))
        ->condition('content_type_name', $name, '=')
        ->execute()
        ->fetchCol();

        db_delete('product_case_tracker')
        ->condition('content_type_name', $name, '=')
        ->execute();

        db_delete('product_case_tracker_fields')
        ->condition('content_type_name', $name, '=')
        ->execute();

        db_delete('product_case_tracker_timeline')
        ->condition('content_type_name', $name, '=')
        ->execute();

        db_delete('product_case_tracker_timeline_details')
        ->condition('content_type_name', $name, '=')
        ->execute();

        if (!empty($node_ids)) {

          // Shows that the field already in use is deleted and
          // delete all data for this node type.
          foreach ($node_ids as $key => $id) {
            $node = node_load($id);
            if (!empty($node)) {
              db_delete('product_case_tracker_details')
              ->condition('nid', $node->nid, '=')
              ->execute();

              db_delete('product_case_tracker_artisan')
              ->condition('nid', $node->nid, '=')
              ->execute();

              db_delete('product_case_tracker_customer')
              ->condition('nid', $node->nid, '=')
              ->execute();

              db_delete('product_case_tracker_collabo_details')
              ->condition('nid', $node->nid, '=')
              ->execute();
            }
          }
        }
      }
    }
  }

  // Check if a case tracker is associated with a node type.
  $result = db_select('product_case_tracker', 'pct')
  ->fields('pct')
  ->execute();

  while ($row = $result->fetchAssoc()) {
    $nids[] = $row['nid'];
  }
  if (isset($nids)) {
    foreach ($form['admin']['nodes']['#options'] as $nid => $node_detail) {
      $node = node_load($nid);
      if (in_array($node->nid, $nids)) {
        $form['admin']['nodes']['#options'][$node->nid]['operations']['data']['#links']['case_tracker'] = array(
          'title' => 'view case tracker',
          'href' => 'admin/' . $node->nid . '/product_case_tracker',
        );
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function product_case_tracker_theme() {
  return array(
    'product_timeline' => array(
      'template' => 'product_case_tracker_timeline',
      'variables' => array('node' => NULL),
    ),
    'product_case_history' => array(
      'template' => 'product_case_tracker_history',
      'variables' => array('data' => NULL),
    ),
  );
}

/**
 * Implements hook_mail().
 */
function product_case_tracker_mail($key, &$message, $params) {
  global $base_url;

  switch ($key) {
    case 'conversation':
      $message['subject'] = t('!subject', array('!subject' => $params['subject']));
      $message['body'][] = check_plain($params['body']);

      if (isset($params['attachment'])) {
        $link = l(t('Click to open attachment'), file_create_url($params['attachment']->uri));
        $message['body'][] = $link;
      }
      $message['headers']['filemime'] = $params['attachment']->filemime;
      break;
  }
}

/**
 * Implements hook_user_view_alter().
 */
function product_case_tracker_user_view_alter(&$build) {
  global $user;
  if (($user->uid == $build['#account']->uid) || ($user->uid == 1)) {
    $build['summary']['commissioned_orders'] = array(
      '#type' => 'user_profile_item',
      '#title' => 'Commissioned Orders',
      '#markup' => ($user->uid == 1) ? l(t('View All Commissioned Orders and workspace'), 'admin/' . $build['#account']->uid . '/commissioned_orders') : l(t('My Workspace'), 'admin/' . $build['#account']->uid . '/commissioned_orders'),
    );
  }
}

/**
 * Function to return field values in a node.
 */
function product_case_tracker_status_info($node) {
  $type = $node->type;

  // Check and retrieve field associated with this content type.
  $set_field = db_select('product_case_tracker_fields', 'pctf')
  ->fields('pctf', array('field_id'))
  ->condition('content_type_name', $type, '=')
  ->execute()
  ->fetchCol();

  if (isset($set_field)) {
    $field = field_info_field_by_id($set_field[0]);
    $return['status_values'] = array(
      $field['settings']['allowed_values'],
    );

    // Check and retrieve set status dates associated with this node.
    $result = db_select('product_case_tracker_timeline_details', 'pcttd')
    ->fields('pcttd', array('status', 'date'))
    ->condition('content_type_name', $type, '=')
    ->execute();

    while ($row = $result->fetchAssoc()) {
      $return['date_values'][$row['status']] = $row['date'];
    }
    return $return;
  }
}

/**
 * Function to return color of the class to render for a given status.
 */
function product_case_tracker_get_all_dates($node) {

  // Check and retrieve set status dates associated with this node.
  $result = db_select('product_case_tracker_timeline_details', 'pcttd')
  ->fields('pcttd', array('status', 'date'))
  ->condition('content_type_name', $node->type, '=')
  ->execute();

  while ($row = $result->fetchAssoc()) {
    $dates['timeline_dates'][$row['status']] = $row['date'];
  }

  // Check and retrieve set status dates associated with this node.
  $result = db_select('product_case_tracker_details', 'pctd')
  ->fields('pctd', array('current_status_key', 'date_of_entry'))
  ->condition('nid', $node->nid, '=')
  ->execute();

  while ($row = $result->fetchAssoc()) {
    $dates['completed_dates'][$row['current_status_key']] = $row['date_of_entry'];
  }
  $dates['current_date'] = strtotime('today');
  return $dates;
}

/**
 * Function to return color of the class to render for a given status.
 */
function product_case_tracker_class_name($dates, $status) {
  $completed_date = $dates['completed_dates'];
  $timeline_date = $dates['timeline_dates'];
  $current_date = $dates['current_date'];

  foreach ($timeline_date as $tl_status => $tl_date) {
    if ($tl_status == $status) {
      foreach ($completed_date as $cl_status => $cl_date) {
        if ($cl_status == $status) {
          if ($tl_date < $cl_date) {
            return 'yellow';
          }
          else {
            return 'green';
          }
        }
      }
      if ($tl_date < $current_date) {
        return 'red';
      }
      if ($tl_date >= $current_date) {
        return 'black';
      }
    }
  }
  return 'yellow';
}
