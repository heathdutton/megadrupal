<?php
/**
 * @file pieces.module
 */

/**
 * Defining constants.
 */
define('PIECES_DISABLED_REGION', -1);
define('PIECES_FROM_CODE', 0);
define('PIECES_FROM_DB', 1);

/**
 * Implements hook_permission().
 */
function pieces_permission() {
  return array(
    'administer pieces' => array(
      'title' => t('Administer Pieces'),
    ),
    'access pieces debug' => array(
      'title' => t('Access Pieces debug'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function pieces_menu() {
  $items = array();

  $items[MOSAIK_ADMIN_MENU . '/%mosaik/pieces'] = array(
    'title' => 'Pieces',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pieces_settings_form', 3),
    'access arguments' => array('administer pieces'),
    'file' => 'pieces.admin.inc',
    'file path' => drupal_get_path('module', 'pieces') . '/includes',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 3,
  );

  $add_piece = array(
    'title' => 'Add piece',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pieces_form'),
    'access arguments' => array('administer pieces'),
    'file' => 'pieces.admin.inc',
    'file path' => drupal_get_path('module', 'pieces') . '/includes',
    'type' => MENU_LOCAL_ACTION,
  );

  $items[MOSAIK_ADMIN_MENU . '/pieces/add-piece'] = $add_piece;
  $items[MOSAIK_ADMIN_MENU . '/%mosaik/pieces/add-piece'] = $add_piece;

  $items[MOSAIK_ADMIN_MENU . '/piece/%piece/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pieces_form', 4),
    'access arguments' => array('administer pieces'),
    'file' => 'pieces.admin.inc',
    'file path' => drupal_get_path('module', 'pieces') . '/includes',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );

  $items[MOSAIK_ADMIN_MENU . '/piece/%piece/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pieces_delete_confirm', 4),
    'access arguments' => array('administer pieces'),
    'file' => 'pieces.admin.inc',
    'file path' => drupal_get_path('module', 'pieces') . '/includes',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function pieces_theme($existing, $type, $theme, $path) {
  return array(
    'piece' => array(
      'template' => 'piece',
      'variables' => array(
        'name' => NULL,
        'title' => NULL,
        'mosaik_name' => NULL,
        'content' => NULL
      ),
      'path' => $path . '/templates',
    ),
    'pieces_settings_form' => array(
      'render element' => 'form',
      'file' => 'pieces.admin.inc',
      'path' => $path . '/includes',
    ),
  );
}

/**
 * Implements hook_mosaik_delete().
 */
function pieces_mosaik_delete($mosaik) {
  db_delete('mosaik_pieces')
    ->condition('mosaik_name', $mosaik['name'])
    ->execute();
}

/**
 * Implements hook_piece_delete().
 */
function pieces_piece_delete($piece) {
  db_delete('mosaik_pieces')
    ->condition('piece_name', $piece['name'])
    ->execute();
}

/**
 * Get all Mosaik pieces.
 *
 * @param bool $mosaik_name
 * @return array
 */
function pieces_get_all($mosaik_name = FALSE) {
  $pieces = array();

  foreach (module_implements('mosaik_piece') as $module) {
    $function = $module . '_mosaik_piece';

    foreach ($function() as $name => $piece) {
      if (!$mosaik_name || ($piece['mosaik_name'] == $mosaik_name)) {
        $pieces[$name] = array_merge(piece_default(), $piece);
        unset($pieces[$name]['bid']);
      }
    }
  }

  return array_merge($pieces, pieces_get_all_from_db($mosaik_name));
}

/**
 * Get all Mosaik pieces created via UI.
 *
 * @param bool $mosaik_name
 * @return array
 */
function pieces_get_all_from_db($mosaik_name = FALSE) {
  $pieces = array();

  $query = db_select('pieces', 'p');

  if ($mosaik_name) {
    $query->innerJoin('mosaik_pieces', 'mp', 'p.name = mp.piece_name');
    $query->condition('mp.mosaik_name', $mosaik_name);
    $query->condition('mp.region', PIECES_DISABLED_REGION, '!=');
    $query->fields('mp', array('weight', 'region'));
  }

  $query->fields('p');

  $results = $query->execute()->fetchAll();

  foreach ($results as $row) {
    $row->access_arguments = unserialize($row->access_arguments);
    $row->callback_arguments = unserialize($row->callback_arguments);
    $row->source = PIECES_FROM_DB;
    $piece = (array) $row;
    $pieces[$row->name] = array_merge(piece_default(), $piece);
  }

  $blocks = db_select('mosaik_pieces', 'mp')
    ->fields('mp')
    ->condition('mp.mosaik_name', $mosaik_name)
    ->condition('mp.region', PIECES_DISABLED_REGION, '!=')
    ->condition('mp.piece_name', '%:%', 'LIKE')
    ->execute()
    ->fetchAll();

  foreach ($blocks as $block) {
    $name = $block->piece_name;
    list($module, $delta) = explode(':', $name);
    $pieces[$name] = array_merge(_pieces_load_block($module, $delta), (array) $block);
    unset($pieces[$name]['bid']);
    unset($pieces[$name]['theme']);
    unset($pieces[$name]['status']);
  }

  return $pieces;
}

/**
 * Helper function: load a block.
 */
function _pieces_load_block($module, $delta) {
  $blocks = _pieces_get_all_blocks();
  $loaded_block = array();

  foreach ($blocks as $block) {
    if (($block['module'] == $module) && ($block['delta'] == $delta)) {
      $loaded_block = $block;
      break;
    }
  }

  return $loaded_block;
}

/**
 * Helper function: get all defined blocks.
 */
function _pieces_get_all_blocks() {
  $blocks = &drupal_static(__FUNCTION__);

  if (empty($blocks)) {
    $blocks = _block_rehash();
  }

  return $blocks;
}

/**
 * Create a new mosaik piece.
 *
 * @param $piece
 */
function pieces_save(&$piece) {
  // Check whether this mosaik needs to be updated, instead of being saved.
  $stored = piece_load($piece['name']);
  $update = (!empty($stored) && ($stored['source'] == PIECES_FROM_DB));

  $record = array(
    'name' => $piece['name'],
    'title' => $piece['title'],
    'callback' => $piece['callback'],
    'callback_arguments' => $piece['callback_arguments'],
    'access_callback' => $piece['access_callback'],
    'access_arguments' => $piece['access_arguments'],
    'file' => $piece['file'],
    'file_path' => $piece['file_path'],
  );

  $primary_key = $update ? array('name') : array();

  foreach (module_implements('pieces_presave') as $module) {
    $function = $module . '_pieces_presave';
    $function($piece, $record);
  }

  drupal_write_record('pieces', $record, $primary_key);

  $piece = $record;

  $hook = $update ? 'piece_update' : 'piece_insert';
  module_invoke_all($hook, $piece);
}

/**
 * Implements hook_piece_update().
 */
function pieces_piece_update($piece) {
  pieces_update_association($piece);
}

/**
 * Update the association between a piece and its mosaik.
 *
 * @param $piece
 */
function pieces_update_association($piece) {
  $mosaik_names = db_select('mosaik_pieces', 'ms')
    ->fields('ms', array('mosaik_name'))
    ->condition('ms.piece_name', $piece['name'])
    ->execute()
    ->fetchCol();

  foreach ($mosaik_names as $mosaik_name) {
    $mosaik = mosaik_load($mosaik_name);
    pieces_save_associations($mosaik, $mosaik['pieces']);
  }
}

/**
 * Save the association between mosaik and pieces.
 *
 * @param $mosaik
 * @param $pieces
 */
function pieces_save_associations($mosaik, $pieces) {
  foreach ($pieces as $piece_name => $piece) {
    if ($piece['region'] != PIECES_DISABLED_REGION) {
      pieces_save_association($mosaik['name'], $piece_name, $piece['weight'], $piece['region']);
    }
    else {
      pieces_unset_piece($mosaik['name'], $piece_name);
    }
  }

  module_invoke_all('mosaik_pieces_saved', mosaik_load($mosaik['name']));
}

/**
 * Save the association between a piece and its mosaik.
 *
 * @param $mosaik_name
 * @param $piece_name
 * @param int $weight
 * @param int $region
 * @return array
 */
function pieces_save_association($mosaik_name, $piece_name, $weight = 0, $region = PIECES_DISABLED_REGION) {
  $record = array(
    'mosaik_name' => $mosaik_name,
    'piece_name' => $piece_name,
    'weight' => $weight,
    'region' => $region,
  );

  $esists = db_select('mosaik_pieces', 'mp')
    ->fields('mp')
    ->condition('mp.mosaik_name', $mosaik_name)
    ->condition('mp.piece_name', $piece_name)
    ->execute()
    ->fetch();

  $primary_keys = $esists ? array('mosaik_name', 'piece_name') : array();

  drupal_write_record('mosaik_pieces', $record, $primary_keys);

  return $record;
}

/**
 * Remove a piece from the given mosaik.
 *
 * @param $mosaik_name
 * @param $piece_name
 */
function pieces_unset_piece($mosaik_name, $piece_name) {
  db_delete('mosaik_pieces')
    ->condition('mosaik_name', $mosaik_name)
    ->condition('piece_name', $piece_name)
    ->execute();
}

/**
 * Remove all pieces associations from a mosaik.
 *
 * @param string $mosaik_name
 *  The machine name of the mosaik to be cleared.
 */
function pieces_clear_associations($mosaik_name) {
  db_delete('mosaik_pieces')
    ->condition('mosaik_name', $mosaik_name)
    ->execute();
}

/**
 * Delete a Piece.
 *
 * @param $piece
 */
function piece_delete($piece) {
  db_delete('pieces')
    ->condition('name', $piece['name'])
    ->execute();

  foreach (module_implements('piece_delete') as $module) {
    $function = $module . '_piece_delete';
    $function($piece);
  }
}

/**
 * Implements hook_mosaik_piece().
 */
function pieces_mosaik_piece() {
  $pieces = array();

  $pieces['mosaik_page_description'] = array(
    'name' => 'mosaik_page_description',
    'mosaik_name' => 'mosaik_overview',
    'title' => t('Welcome to Mosaik'),
    'callback' => 't',
    'callback_arguments' => array('Here you can manage all your Mosaiks created via UI. Also this page is a Mosaik but created via code.'),
    'access_arguments' => array('permission', 'administer mosaik'),
    'weight' => 0,
    'region' => 'content',
  );

  $pieces['view_mosaik'] = array(
    'name' => 'view_mosaik',
    'mosaik_name' => 'mosaik_overview',
    'title' => t('Mosaiks'),
    'callback' => 'views_embed_view',
    'callback_arguments' => array('mosaik', 'default'),
    'access_arguments' => array('permission', 'administer mosaik'),
    'weight' => 1,
    'region' => 'content',
  );

  return $pieces;
}

/**
 * Returns the default structure of a piece.
 *
 * @return array
 */
function piece_default() {
  return array(
    'name' => '',
    'mosaik_name' => '',
    'title' => '',
    'callback' => '',
    'callback_arguments' => array(),
    'access_callback' => 'mosaik_access',
    'access_arguments' => array('permission', 'access content'),
    'file' => '',
    'file_path' => '',
    'weight' => 0,
    'region' => PIECES_DISABLED_REGION,
    'source' => PIECES_FROM_CODE,
  );
}

/**
 * Render function for mosaik pieces.
 */
function piece_render($piece) {
  $default = piece_default();
  $piece = array_merge($default, $piece);

  if (call_user_func_array($piece['access_callback'], $piece['access_arguments'])) {
    if (!empty($piece['file'])) {
      require_once implode('/', array($piece['file_path'], $piece['file']));
    }

    if (function_exists($piece['callback'])) {
      if (module_exists('token')) {
        foreach ($piece['callback_arguments'] as $i => $argument) {
          $piece['callback_arguments'][$i] = token_replace($argument);
        }
      }

      $content = call_user_func_array($piece['callback'], array_values($piece['callback_arguments']));
      $rendered_content = is_array($content) ? drupal_render($content) : $content;

      $variables = array(
        'name' => $piece['name'],
        'title' => ($piece['title'] != '<none>') ? $piece['title'] : FALSE,
        'mosaik_name' => NULL,
        'content' => $rendered_content,
      );

      return theme('piece', $variables);
    }
    elseif (pieces_is_block($piece)) {
      return pieces_render_block($piece['module'], $piece['delta']);
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Helper function for entity rendering with a single callback.
 *
 * @param $entity_type
 * @param $entity_id
 * @param string $view_mode
 * @param null $langcode
 * @return array
 */
function pieces_render_entity($entity_type, $entity_id, $view_mode = 'full', $langcode = NULL) {
  return entity_view($entity_type, entity_load($entity_type, array($entity_id)), $view_mode, $langcode);
}

/**
 * Helper function for views rendering with a single callback.
 *
 * @param $name
 * @param string $display_id
 * @return string
 */
function pieces_render_view($name, $display_id = 'default') {
  $args = func_get_args();
  array_shift($args); // remove $name
  if (count($args)) {
    array_shift($args); // remove $display_id
  }

  if ($view = views_get_view($name)) {
    if ($view->access($display_id)) {
      $delta = $name . '-' . $display_id;
      $block = block_load('views', $delta);

      if (empty($block->bid)) {
        $delta = md5($delta);
        $block = block_load('views', $delta);
      }

      $output = $view->execute_display($display_id, $args);
      views_add_block_contextual_links($output, $view, $display_id);

      $blocks = _block_render_blocks(array($block));
      if (empty($blocks)) {
        $blocks['views_' . $delta] = $block;
        $blocks['views_' . $delta]->subject = ' ';
      }

      $blocks['views_' . $delta]->content = $output['content'];

      // blank space ' ' is the default tilte. <none> is replaced with ''.
      if ($blocks['views_' . $delta]->subject == ' ') {
        $view->set_display($display_id);
        $view->set_arguments($args);
        $view->build_title();
        $blocks['views_' . $delta]->subject = $view->get_title();
      }
      $view->destroy();

      return drupal_render(_block_get_renderable_array($blocks));
    }
    $view->destroy();
  }

  return '';
}

/**
 * Helper function for block rendering with a single callback.
 *
 * @param $module
 * @param $delta
 * @return string
 */
function pieces_render_block($module, $delta) {
  $block = block_load($module, $delta);
  $render = _block_get_renderable_array(_block_render_blocks(array($block)));
  return drupal_render($render);
}

/**
 * Implements hook_views_api().
 */
function pieces_views_api() {
  return array(
    "api" => "3.0",
  );
}

/**
 * Load piece data
 */
function piece_load($name) {
  $piece = db_select('pieces', 'p')
    ->fields('p')
    ->condition('p.name', $name)
    ->execute()
    ->fetch();

  if ($piece) {
    $piece = (array) $piece;
    $piece['callback_arguments'] = unserialize($piece['callback_arguments']);
    $piece['access_arguments'] = unserialize($piece['access_arguments']);
    $piece['source'] = PIECES_FROM_DB;
  }
  else {
    foreach (module_implements('mosaik_piece') as $module) {
      $function = $module . '_mosaik_piece';

      foreach ($function() as $name => $p) {
        if ($p['name'] == $name) {
          $piece = array_merge(piece_default(), $p);
          $piece['source'] = PIECES_FROM_CODE;
          break;
        }
      }
    }
  }

  return $piece;
}

/**
 * Sort pieces by weight
 */
function pieces_sort($a, $b) {
  if ($a['weight'] == $b['weight']) {
    return 0;
  }

  return ($a['weight'] < $b['weight']) ? -1 : 1;
}

/**
 * Helper function to identify if the given piece is a block.
 */
function pieces_is_block($piece) {
  return (!empty($piece['module']) && !empty($piece['delta']));
}
