<?php

/**
 * @file
 * Defines a field type for referencing one piece from a node.
 */

/**
 * Implements hook_menu().
 */
function pieces_reference_menu() {
  $items['pieces_reference/autocomplete/%/%/%'] = array(
    'page callback' => 'pieces_reference_autocomplete',
    'page arguments' => array(2, 3, 4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_field_info().
 */
function pieces_reference_field_info() {
  return array(
    'pieces_reference' => array(
      'label' => t('Pieces reference'),
      'description' => t('This field stores the name of a related piece as a string value.'),
      'settings' => array(
        'referenceable_types' => array(),
        'view' => array(
          'view_name' => '',
          'display_name' => '',
          'args' => array(),
        ),
      ),
      'default_widget' => 'options_select', //  pieces_reference_autocomplete',
      'default_formatter' => 'pieces_reference_default',
      // Support hook_entity_property_info() from contrib "Entity API".
      'property_type' => 'node',
      // Support default token formatter for field tokens.
      'default_token_formatter' => 'pieces_reference_plain',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function pieces_reference_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form = array();

  return $form;
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'invalid_name': name is not valid for the field (not a valid piece name, or the piece is not referenceable).
 */
function pieces_reference_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // Extract names to check.
  $names = array();

  // First check non-string names to avoid losing time with them.
  foreach ($items as $delta => $item) {
    if (is_array($item) && !empty($item['name'])) {
      if (is_string($item['name'])) {
        $names[] = $item['name'];
      }
      else {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'invalid_name',
          'message' => t("%name: invalid input.", array('%name' => $instance['label'])),
        );
      }
    }
  }
  // Prevent performance hog if there are no names to check.
  if ($names) {
    $options = array(
      'names' => $names,
    );
    $refs = pieces_reference_potential_references($field, $options);
    foreach ($items as $delta => $item) {
      if (is_array($item)) {
        if (!empty($item['name']) && !isset($refs[$item['name']])) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'invalid_name',
            'message' => t("%name: this piece can't be referenced.", array('%name' => $instance['label'])),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function pieces_reference_field_is_empty($item, $field) {
  // name = 0 is empty too, which is exactly what we want.
  return empty($item['name']);
}

/**
 * Implements hook_field_formatter_info().
 */
function pieces_reference_field_formatter_info() {
  $info = array(
    'pieces_reference_default' => array(
      'label' => t('Render Piece'),
      'description' => t('Display the rendered piece.'),
      'field types' => array('pieces_reference')
    ),
    'pieces_reference_name' => array(
      'label' => t('Piece name'),
      'description' => t('Display the referenced piece name'),
      'field types' => array('pieces_reference')
    )
  );

  return $info;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function pieces_reference_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  switch ($display['type']) {
    case 'pieces_reference_default':

      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_prepare_view().
 *
 * Preload all pieces referenced by items using 'full entity' formatters.
 */
function pieces_reference_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  // Load the referenced pieces, except for the 'pieces_reference_name' which does
  // not need full objects.
  // Collect names to load.
  $names = array();
  foreach ($displays as $id => $display) {
    if ($display['type'] != 'pieces_reference_name') {
      foreach ($items[$id] as $delta => $item) {
        $names[$item['name']] = $item['name'];
      }
    }
  }

  // Add the loaded pieces to the items.
  foreach ($displays as $id => $display) {
    if ($display['type'] != 'pieces_reference_name') {
      foreach ($items[$id] as $delta => $item) {
        $items[$id][$delta]['piece'] = piece_load($item['name']);
      }
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function pieces_reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $result = array();

  switch ($display['type']) {
    case 'pieces_reference_default':
      foreach ($items as $delta => $item) {
        $piece = $item['piece'];

        if ($display['type'] == 'pieces_reference_default') {
          $result[$delta] = array(
            '#type' => 'item',
            '#markup' => piece_render($piece)
          );
        }
      }
      break;

    case 'pieces_reference_name':
      foreach ($items as $delta => $item) {
        $result[$delta] = array(
          '#markup' => $item['name'],
        );
      }
      break;
  }

  return $result;
}

/**
 * Implements hook_field_widget_info().
 */
function pieces_reference_field_widget_info() {
  return array(
    'pieces_reference_autocomplete' => array(
      'label' => t('Autocomplete text field'),
      'description' => t('Display the list of referenceable pieces as a textfield with autocomplete behaviour.'),
      'field types' => array('pieces_reference'),
      'settings' => array(
        'autocomplete_match' => 'contains',
        'size' => 60,
        'autocomplete_path' => 'pieces_reference/autocomplete',
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_info_alter().
 */
function pieces_reference_field_widget_info_alter(&$info) {
  $info['options_select']['field types'][] = 'pieces_reference';
  $info['options_buttons']['field types'][] = 'pieces_reference';
}

/**
 * Implements hook_field_widget_settings_form().
 */
function pieces_reference_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $defaults = field_info_widget_settings($widget['type']);
  $settings = array_merge($defaults, $widget['settings']);

  $form = array();
  if ($widget['type'] == 'pieces_reference_autocomplete') {
    $form['autocomplete_match'] = array(
      '#type' => 'select',
      '#title' => t('Autocomplete matching'),
      '#default_value' => $settings['autocomplete_match'],
      '#options' => array(
        'starts_with' => t('Starts with'),
        'contains' => t('Contains'),
      ),
      '#description' => t('Select the method used to collect autocomplete suggestions. Note that <em>Contains</em> can cause performance issues on sites with thousands of pieces.'),
    );
    $form['size'] = array(
      '#type' => 'textfield',
      '#title' => t('Size of textfield'),
      '#default_value' => $settings['size'],
      '#element_validate' => array('_element_validate_integer_positive'),
      '#required' => TRUE,
    );
  }
  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function pieces_reference_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'pieces_reference_autocomplete':
      $element += array(
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]['name']) ? $items[$delta]['name'] : NULL,
        '#autocomplete_path' => $instance['widget']['settings']['autocomplete_path'] . '/' . $instance['entity_type'] . '/' . $instance['bundle'] . '/' . $field['field_name'],
        '#size' => $instance['widget']['settings']['size'],
        '#maxlength' => NULL,
        '#element_validate' => array('pieces_reference_autocomplete_validate'),
        '#value_callback' => 'pieces_reference_autocomplete_value',
      );
      break;
  }

  return array('name' => $element);
}

/**
 * Value callback for a pieces_reference autocomplete element.
 *
 * Replace the piece name with a piece title.
 */
function pieces_reference_autocomplete_value($element, $input = FALSE, $form_state) {
  if ($input === FALSE) {
    // We're building the displayed 'default value': expand the raw name into
    // "piece title [name:p]".
    $name = $element['#default_value'];
    if (!empty($name)) {
      $q = db_select('pieces', 'p');
      $q->addField('p', 'title');
      $q->condition('p.name', $name, '=');
      $result = $q->execute();
      $value = $result->fetchField();
      $value .= ' [name:' . $name . ']';
      return $value;
    }
  }
}

/**
 * Validation callback for a pieces_reference autocomplete element.
 */
function pieces_reference_autocomplete_validate($element, &$form_state, $form) {
  $field = field_widget_field($element, $form_state);
  $instance = field_widget_instance($element, $form_state);

  $value = $element['#value'];
  $name = NULL;

  if (!empty($value)) {
    // Check whether we have an explicit "[name:p]" input.
    preg_match('/^(?:\s*|(.*) )?\[\s*name\s*:\s*(\w+)\s*\]$/', $value, $matches);
    if (!empty($matches)) {
      // Explicit name. Check that the 'title' part matches the actual title for
      // the name.
      list(, $title, $name) = $matches;
      if (!empty($title)) {
        $real_title = db_select('pieces', 'p')
          ->fields('p', array('title'))
          ->condition('p.name', $name)
          ->execute()
          ->fetchField();
        if (trim($title) != trim($real_title)) {
          form_error($element, t('%name: title mismatch. Please check your selection.', array('%name' => $instance['label'])));
        }
      }
    }
    else {
      // No explicit name (the submitted value was not populated by autocomplete
      // selection). Get the name of a referencable piece from the entered title.
      $options = array(
        'string' => $value,
        'match' => 'equals',
        'limit' => 1,
      );
      $references = pieces_reference_potential_references($field, $options);
      if ($references) {
        // @todo The best thing would be to present the user with an
        // additional form, allowing the user to choose between valid
        // candidates with the same title. ATM, we pick the first
        // matching candidate...
        $fbid = key($references);
      }
      else {
        form_error($element, t('%name: found no valid piece with that title.', array('%name' => $instance['label'])));
      }
    }
  }

  // Set the element's value as the piece name that was extracted from the entered
  // input.
  form_set_value($element, $name, $form_state);
}

/**
 * Implements hook_field_widget_error().
 */
function pieces_reference_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['name'], $error['message']);
}

/**
 * Builds a list of referenceable pieces suitable for the '#option' FAPI property.
 *
 * Warning: the function does NOT take care of encoding or escaping the piece
 * titles. Proper massaging needs to be performed by the caller, according to
 * the destination FAPI '#type' (radios / checkboxes / select).
 *
 * @param $field
 *   The field definition.
 * @param $flat
 *   Whether optgroups are allowed.
 *
 * @return
 *   An array of referenceable piece titles, keyed by piece name. If the $flat
 *   parameter is TRUE, the list might be nested by optgroup first.
 */
function _pieces_reference_options($field, $flat = TRUE) {
  $references = pieces_reference_potential_references($field);

  $options = array();
  foreach ($references as $key => $value) {
    // The label, displayed in selects and checkboxes/radios, should have HTML
    // entities unencoded. The widgets (core's options.module) take care of
    // applying the relevant filters (strip_tags() or filter_xss()).
    $label = html_entity_decode($value['rendered'], ENT_QUOTES);
    if (empty($value['group']) || $flat) {
      $options[$key] = $label;
    }
    else {
      // The group name, displayed in selects, cannot contain tags, and should
      // have HTML entities unencoded.
      $group = html_entity_decode(strip_tags($value['group']), ENT_QUOTES);
      $options[$group][$key] = $label;
    }
  }

  return $options;
}

/**
 * Retrieves an array of candidate referenceable pieces.
 *
 * This info is used in various places (allowed values, autocomplete
 * results, input validation...). Some of them only need the names,
 * others names + titles, others yet names + titles + rendered row (for
 * display in widgets).
 *
 * The array we return contains all the potentially needed information,
 * and lets consumers use the parts they actually need.
 *
 * @param $field
 *   The field definition.
 * @param $options
 *   An array of options to limit the scope of the returned list. The following
 *   key/value pairs are accepted:
 *   - string: string to filter titles on (used by autocomplete).
 *   - match: operator to match the above string against, can be any of:
 *     'contains', 'equals', 'starts_with'. Defaults to 'contains'.
 *   - names: array of specific piece names to lookup.
 *   - limit: maximum size of the the result set. Defaults to 0 (no limit).
 *
 * @return
 *   An array of valid pieces in the form:
 *   array(
 *     name => array(
 *       'title' => The piece title,
 *       'rendered' => The piece title to display in widgets (can be HTML)
 *     ),
 *     ...
 *   )
 */
function pieces_reference_potential_references($field, $options = array()) {
  // Fill in default options.
  $options += array(
    'string' => '',
    'match' => 'contains',
    'names' => array(),
    'limit' => 0,
  );

  $results = &drupal_static(__FUNCTION__, array());

  // Create unique id for static cache.
  $cid = $field['field_name'] . ':' . $options['match'] . ':'
    . ($options['string'] !== '' ? $options['string'] : implode('-', $options['names']))
    . ':' . $options['limit'];
  if (!isset($results[$cid])) {
    $references = _pieces_reference_potential_references_standard($field, $options);

    // Store the results.
    $results[$cid] = !empty($references) ? $references : array();
  }

  return $results[$cid];
}

/**
 * Helper function for pieces_reference_potential_references().
 *
 * List of referenceable pieces defined by content types.
 */
function _pieces_reference_potential_references_standard($field, $options) {

  $query = db_select('pieces', 'p');
  $piece_name_alias = $query->addField('p', 'name');
  $piece_title_alias = $query->addField('p', 'title', 'piece_title');

  if ($options['string'] !== '') {
    switch ($options['match']) {
      case 'contains':
        $query->condition('p.title', '%' . $options['string'] . '%', 'LIKE');
        break;

      case 'starts_with':
        $query->condition('p.title', $options['string'] . '%', 'LIKE');
        break;

      case 'equals':
      default: // no match type or incorrect match type: use "="
        $query->condition('p.title', $options['string']);
        break;
    }
  }

  if ($options['names']) {
    $query->condition('p.name', $options['names'], 'IN');
  }

  if ($options['limit']) {
    $query->range(0, $options['limit']);
  }

  $query->orderBy($piece_title_alias);

  $result = $query->execute()->fetchAll();
  $references = array();
  foreach ($result as $piece) {
    $references[$piece->name] = array(
      'title' => $piece->piece_title,
      'rendered' => check_plain($piece->piece_title)
    );
  }
  return $references;
}

/**
 * Menu callback for the autocomplete results.
 */
function pieces_reference_autocomplete($entity_type, $bundle, $field_name, $string = '') {
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);

  $options = array(
    'string' => $string,
    'match' => $instance['widget']['settings']['autocomplete_match'],
    'limit' => 10,
  );
  $references = pieces_reference_potential_references($field, $options);

  $matches = array();
  foreach ($references as $name => $row) {
    // Markup is fine in autocompletion results (might happen when rendered
    // through Views) but we want to remove hyperlinks.
    $suggestion = preg_replace('/<a href="([^<]*)">([^<]*)<\/a>/', '$2', $row['rendered']);
    // Add a class wrapper for a few required CSS overrides.
    $matches[$row['title'] . " [name:$name]"] = '<div class="reference-autocomplete">' . $suggestion . '</div>';
  }

  drupal_json_output($matches);
}

/**
 * Implements hook_options_list().
 */
function pieces_reference_options_list($field) {
  return _pieces_reference_options($field, FALSE);
}

/**
 * Implements hook_field_views_data().
 *
 * In addition to the default field information we add the relationship for
 * views to connect back to the pieces table.
 */
function pieces_reference_field_views_data($field) {
  // No module_load_include(): this hook is invoked from
  // views/modules/field.views.inc, which is where that function is defined.
  $data = field_views_field_default_views_data($field);

  $storage = $field['storage']['details']['sql'];

  foreach ($storage as $age => $table_data) {
    $table = key($table_data);
    $columns = current($table_data);
    $id_column = $columns['name'];
    if (isset($data[$table])) {
      // Filter: swap the handler to the 'in' operator. The callback receives
      // the field name instead of the whole $field structure to keep views
      // data to a reasonable size.
      $data[$table][$id_column]['filter']['handler'] = 'views_handler_filter_in_operator';
      $data[$table][$id_column]['filter']['options callback'] = 'pieces_reference_views_filter_options';
      $data[$table][$id_column]['filter']['options arguments'] = array($field['field_name']);

      // Argument: display piece.title in argument titles (handled in our custom
      // handler) and summary lists (handled by the base views_handler_argument
      // handler).
      // Both mechanisms rely on the 'name table' and 'name field' information
      // below, by joining to a separate copy of the base table from the field
      // data table.
      $data[$table][$id_column]['argument']['handler'] = 'references_handler_argument';
      $data[$table][$id_column]['argument']['name table'] = $table . '_reference';
      $data[$table][$id_column]['argument']['name field'] = 'title';
      $data[$table . '_reference']['table']['join'][$table] = array(
        'left_field' => $id_column,
        'table' => 'pieces',
        'field' => 'name',
      );

      // Relationship.
      $data[$table][$id_column]['relationship'] = array(
        'handler' => 'references_handler_relationship',
        'base' => 'pieces',
        'base field' => 'name',
        'field' => $id_column,
        'label' => $field['field_name'],
        'field_name' => $field['field_name'],
      );
    }
  }

  return $data;
}

/**
 * 'options callback' for the views_handler_filter_in_operator filter.
 *
 * @param $field_name
 *   The field name.
 */
function pieces_reference_views_filter_options($field_name) {
  $options = array();

  if ($field = field_info_field($field_name)) {
    $options = _pieces_reference_options($field, TRUE);

    // The options are displayed in checkboxes within the filter admin form, and
    // in a select within an exposed filter. Checkboxes accept HTML, other
    // entities should be encoded; selects require the exact opposite: no HTML,
    // no encoding. We go for a middle ground: strip tags, leave entities
    // unencoded.
    foreach ($options as $key => $value) {
      $options[$key] = strip_tags($value);
    }
  }

  return $options;
}
