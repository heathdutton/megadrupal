<?php
/**
 * @file mosaik.module
 */

/**
 * Defining constants.
 */
define('MOSAIK_AS_BLOCK', 2);
define('MOSAIK_FROM_CODE', 0);
define('MOSAIK_FROM_DB', 1);
define('MOSAIK_REGION_TOP', 'top');
define('MOSAIK_REGION_CONTENT', 'content');
define('MOSAIK_REGION_RIGHT', 'right');
define('MOSAIK_REGION_LEFT', 'left');
define('MOSAIK_REGION_BOTTOM', 'bottom');
define('MOSAIK_ADMIN_MENU', 'admin/structure/mosaik');
define('MOSAIK_DEFAULT_LAYOUT', 'mosaik_mosaik_default');

/**
 * Implements hook_permission().
 */
function mosaik_permission() {
  return array(
    'administer mosaik' => array(
      'title' => t('Administer mosaik'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function mosaik_menu() {
  $items = array();

  foreach (mosaik_get_all() as $mosaik) {
    if (empty($mosaik['path'])) {
      continue;
    }

    $items[$mosaik['path']] = array(
      'title' => $mosaik['title'],
      'page callback' => 'mosaik_render',
      'page arguments' => array($mosaik),
      'access callback' => 'mosaik_access',
      'access arguments' => array($mosaik['access_type'], $mosaik['access']),
      'type' => $mosaik['menu'] ? MENU_NORMAL_ITEM : MENU_CALLBACK,
    );

    $items[$mosaik['path'] . '/view'] = array(
      'title' => 'View',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -1
    );

    if ($mosaik['source'] != MOSAIK_FROM_CODE) {
      $actions = array(
        'edit' => 'Edit',
        'delete' => 'Delete',
        'pieces' => 'Pieces',
      );

      $weight = 0;
      foreach ($actions as $action => $title) {
        $options = ($action != 'delete') ? array('query' => array('destination' => $mosaik['path'])) : array();

        $items[$mosaik['path'] . '/' . $action] = array(
          'title' => $title,
          'page callback' => 'drupal_goto',
          'page arguments' => array(
            MOSAIK_ADMIN_MENU . '/' . $mosaik['name'] . '/' . $action,
            $options,
          ),
          'access callback' => 'user_access',
          'access arguments' => array('administer mosaik'),
          'type' => MENU_LOCAL_TASK,
          'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
          'weight' => $weight++,
        );
      }
    }
  }

  $items[MOSAIK_ADMIN_MENU . '/%mosaik'] = array(
    'title callback' => 'mosaik_page_title',
    'title arguments' => array(3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mosaik_page', 3),
    'access arguments' => array('administer mosaik'),
    'file' => 'mosaik.pages.inc',
    'file path' => drupal_get_path('module', 'mosaik') . '/includes',
  );

  $items[MOSAIK_ADMIN_MENU . '/%mosaik/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1
  );

  $items[MOSAIK_ADMIN_MENU . '/%mosaik/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mosaik_delete_confirm', 3),
    'access arguments' => array('administer mosaik'),
    'file' => 'mosaik.pages.inc',
    'file path' => drupal_get_path('module', 'mosaik') . '/includes',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2
  );

  $items[MOSAIK_ADMIN_MENU . '/add'] = array(
    'title' => 'Add Mosaik',
    'description' => 'Add a mosaik page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mosaik_page', 4),
    'access arguments' => array('administer mosaik'),
    'file' => 'mosaik.pages.inc',
    'file path' => drupal_get_path('module', 'mosaik') . '/includes',
    'type' => MENU_LOCAL_ACTION,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function mosaik_menu_alter(&$items) {
  $items[MOSAIK_ADMIN_MENU]['description'] = t('Create, edit, or delete mosaiks and pieces.');
}

/**
 * Mosaik Access callback
 */
function mosaik_access($op, $access) {
  // Menu administrators can see items for anonymous when administering.
  if (!empty($GLOBALS['menu_admin'])) {
    return TRUE;
  }

  switch ($op) {
    case 'permission':
      return user_access($access);
      break;

    case 'roles':
      global $user;
      return count(array_intersect_key($user->roles, array_filter($access)));
      break;
  }
}

/**
 * Implements hook_block_info().
 */
function mosaik_block_info() {
  $blocks = array();
  $mosaiks = mosaik_get_all();

  foreach ($mosaiks as $mosaik) {
    if ($mosaik['menu'] == MOSAIK_AS_BLOCK) {
      $blocks[$mosaik['name']] = array(
        'info' => t('Mosaik: !title', array('!title' => $mosaik['title'])),
        'cache' => DRUPAL_NO_CACHE,
      );
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function mosaik_block_view($delta = '') {
  $block = array();
  $mosaiks = mosaik_get_all();

  foreach ($mosaiks as $mosaik) {
    if (($mosaik['menu'] == MOSAIK_AS_BLOCK) && ($mosaik['name'] == $delta)) {
      $block['title'] = $mosaik['title'];
      $block['content'] = mosaik_render($mosaik, FALSE);
    }
  }

  return $block;
}

/**
 * Title callback: Returns the title of the mosaik.
 *
 * @param $mosaik
 *   The mosaik object.
 *
 * @return
 *   An unsanitized string that is the title of the mosaik.
 *
 * @see mosaik_menu()
 */
function mosaik_page_title($mosaik) {
  return $mosaik['title'];
}

/**
 * Implements hook_theme().
 */
function mosaik_theme($existing, $type, $theme, $path) {
  return mosaik_layouts();
}

/**
 * Helper function: get all defined mosaik layouts.
 */
function mosaik_layouts() {
  $themes = array();

  foreach (module_implements('mosaik_layout') as $module) {
    $function = $module . '_mosaik_layout';
    $layouts = $function(drupal_get_path('module', $module));

    foreach ($layouts as $name => $layout) {
      $themes[implode('_', array('mosaik', $module, $name))] = $layout;
    }
  }

  return $themes;
}

/**
 * Load a Mosaik layout.
 */
function mosaik_layout_load($layout_name) {
  $layouts = mosaik_layouts();
  $layout = !empty($layouts[$layout_name]) ? $layouts[$layout_name] : FALSE;

  return $layout;
}

/**
 * Implements hook_mosaik_layout().
 */
function mosaik_mosaik_layout($path) {
  return array(
    'default' => array(
      'template' => 'default',
      'variables' => array(
        MOSAIK_REGION_CONTENT => NULL
      ),
      'path' => $path . '/layouts'
    ),
    'three_regions' => array(
      'template' => 'three_regions',
      'variables' => array(
        MOSAIK_REGION_TOP => NULL,
        MOSAIK_REGION_CONTENT => NULL,
        MOSAIK_REGION_RIGHT => NULL
      ),
      'path' => $path . '/layouts'
    ),
  );
}

/**
 * Implements hook_page_alter()
 */
function mosaik_page_alter(&$page) {
  if (isset($page['#mosaik_hide_sidebars']) && ($page['#mosaik_hide_sidebars'] == TRUE)) {
    unset($page['sidebar_first'], $page['sidebar_second']);
  }
}

/**
 * Returns the default structure of a mosaik.
 *
 * @return array
 */
function mosaik_default() {
  $mosaik = array(
    'name' => '',
    'title' => '',
    'path' => '',
    'menu' => FALSE,
    'sidebars' => FALSE,
    'access_type' => 'permission',
    'access' => 'access content',
    'layout' => 'mosaik_mosaik_default',
    'source' => MOSAIK_FROM_CODE
  );

  drupal_alter('mosaik_default', $mosaik);

  return $mosaik;
}

/**
 * Loader callback for a Mosaik.
 */
function mosaik_load($mosaik_name) {
  if (empty($mosaik_name)) {
    return NULL;
  }

  $mosaik = db_select('mosaik', 'm')
    ->fields('m')
    ->condition('m.name', $mosaik_name)
    ->execute()
    ->fetch();

  if ($mosaik) {
    $mosaik->access = unserialize($mosaik->access);
    $mosaik->source = MOSAIK_FROM_DB;
    $mosaik = (array) $mosaik;
  }
  else {
    // Try to load a mosaik created by code.
    foreach (mosaik_get_all(TRUE) as $name => $mosaik) {
      if ($name == $mosaik_name) {
        $mosaik['source'] = MOSAIK_FROM_CODE;
        break;
      }
    }
  }

  if (!$mosaik) {
    return FALSE;
  }

  // Merge the loaded mosaik with the default structure.
  $mosaik = array_merge(mosaik_default(), $mosaik);

  // Get all pieces affecting this mosaik.
  $pieces = pieces_get_all($mosaik_name);
  $all_pieces = pieces_get_all();
  $mosaik['pieces'] = array();

  foreach ($all_pieces as $name => $values) {
    $stored_piece = db_select('mosaik_pieces', 'mp')
      ->fields('mp')
      ->condition('mp.mosaik_name', $mosaik_name)
      ->condition('mp.piece_name', $name)
      ->condition('mp.region', PIECES_DISABLED_REGION, '!=')
      ->execute()
      ->fetch();

    if ($stored_piece && empty($mosaik['pieces'][$name])) {
      $pieces[$name] = $values;
      $pieces[$name]['region'] = $stored_piece->region;
      $pieces[$name]['weight'] = $stored_piece->weight;
    }
  }

  $mosaik['pieces'] = $pieces;

  return $mosaik;
}

/**
 * Load multiple mosaiks by given criteria.
 */
function mosaik_load_multiple_by_criteria($criteria = array()) {
  $mosaiks = array();
  $query = db_select('mosaik', 'm');
  $query->fields('m', array('name'));

  foreach ($criteria as $field => $value) {
    $query->condition($field, $value);
  }

  $results = $query->execute()->fetchCol();
  foreach ($results as $name) {
    $mosaiks[$name] = mosaik_load($name);
  }

  return array_filter($mosaiks);
}

/**
 * Get all Mosaiks.
 *
 * @return array
 */
function mosaik_get_all($only_from_code = FALSE) {
  $mosaiks = array();

  foreach (module_implements('mosaik') as $module) {
    $function = $module . '_mosaik';
    $mosaiks = array_merge($mosaiks, $function());
  }

  foreach ($mosaiks as $name => $mosaik) {
    $mosaiks[$name] = array_merge(mosaik_default(), $mosaik);
  }

  return $only_from_code ? $mosaiks : array_merge($mosaiks, mosaik_get_all_from_db());
}

/**
 * Get all mosaiks stored on database.
 *
 * @return array
 */
function mosaik_get_all_from_db() {
  $mosaiks = array();

  $query = db_select('mosaik', 'm')
    ->fields('m')
    ->execute();

  while ($mosaik = $query->fetch()) {
    $mosaik->access = unserialize($mosaik->access);
    $mosaik->source = MOSAIK_FROM_DB;
    $mosaiks[$mosaik->name] = array_merge(mosaik_default(), (array) $mosaik);
  }

  return $mosaiks;
}

/**
 * Implements hook_mosaik().
 */
function mosaik_mosaik() {
  return array(
    'mosaik_overview' => array(
      'name' => 'mosaik_overview',
      'title' => t('Mosaik'),
      'path' => MOSAIK_ADMIN_MENU,
      'menu' => TRUE,
      'sidebars' => FALSE,
      'access_type' => 'permission',
      'access' => 'administer mosaik',
      'layout' => 'mosaik_mosaik_default'
    )
  );
}

/**
 * Implements hook_views_api().
 */
function mosaik_views_api() {
  return array(
    "api" => "3.0",
  );
}

/**
 * Save a mosaik.
 *
 * @param $mosaik
 * @return array
 */
function mosaik_save($mosaik) {
  // Check whether this mosaik needs to be updated, instead of being saved.
  $stored = mosaik_load($mosaik['name']);
  $update = (!empty($stored) && ($stored['source'] == MOSAIK_FROM_DB));

  $record = array(
    'name' => $mosaik['name'],
    'title' => $mosaik['title'],
    'path' => $mosaik['path'],
    'menu' => $mosaik['menu'],
    'sidebars' => $mosaik['sidebars'],
    'access_type' => $mosaik['access_type'],
    'access' => $mosaik['access'],
    'layout' => $mosaik['layout']
  );

  $primary_key = $update ? array('name') : array();

  foreach (module_implements('mosaik_presave') as $module) {
    $function = $module . '_mosaik_presave';
    $function($mosaik, $record);
  }

  drupal_write_record('mosaik', $record, $primary_key);

  // A mosaik defines a menu item, so menus must be rebuilt.
  menu_rebuild();

  $hook = $update ? 'mosaik_update' : 'mosaik_insert';
  module_invoke_all($hook, mosaik_load($mosaik['name']));

  return $record;
}

/**
 * Delete a Mosaik.
 *
 * @param $mosaik
 */
function mosaik_delete($mosaik) {
  db_delete('mosaik')
    ->condition('name', $mosaik['name'])
    ->execute();

  module_invoke_all('mosaik_delete', $mosaik);

  // A mosaik defines a menu item, so menus must be rebuilt.
  menu_rebuild();
}

/**
 * Mosaik render function.
 *
 * @param $mosaik
 * @param bool $page
 * @return array|bool|string
 */
function mosaik_render($mosaik, $page = TRUE) {
  $mosaik = mosaik_load($mosaik['name']);
  $layout = mosaik_layout_load($mosaik['layout']);
  $mosaik['layout_decoded'] = $layout;

  $params = array();
  drupal_alter('mosaik_pieces_render', $mosaik['pieces'], $mosaik);

  $pieces = mosaik_pieces_prepare($mosaik['pieces']);

  foreach ($mosaik['layout_decoded']['variables'] as $region => $na) {
    if (empty($params[$region])) {
      $params[$region] = '';
    }

    if (!empty($pieces[$region])) {
      foreach ($pieces[$region] as $piece) {
        $params[$region] .= piece_render($piece);
      }
    }
  }

  mosaik_load_assets($layout);
  $output = theme($mosaik['layout'], $params);

  if ($page) {
    drupal_set_page_content($output);
    $page = element_info('page');
    $page['#mosaik_hide_sidebars'] = $mosaik['sidebars'];

    return $page;
  }

  return $output;
}

/**
 * Helper function: order pieces by region and sort them by weight.
 *
 * @param $pieces
 * @return array
 */
function mosaik_pieces_prepare($pieces) {
  $sorted_pieces = array();

  // Group pieces by region
  foreach ($pieces as $name => $piece) {
    $sorted_pieces[$piece['region']][$name] = $piece;
  }

  // Sort pieces by weight
  foreach ($sorted_pieces as $region => $pieces) {
    uasort($sorted_pieces[$region], 'pieces_sort');
  }

  return $sorted_pieces;
}

/**
 * Helper function for css and js loading.
 *
 * @param $layout
 */
function mosaik_load_assets($layout) {
  $css = $layout['path'] . '/' . $layout['template'] . '.css';
  if (file_exists($css)) {
    drupal_add_css($css);
  }

  $js = $layout['path'] . '/' . $layout['template'] . '.js';
  if (file_exists($js)) {
    drupal_add_js($js);
  }
}

/**
 * Implements hook_features_api().
 */
function mosaik_features_api() {
  return array(
    'mosaik' => array(
      'name' => t('Mosaik'),
      'feature_source' => TRUE,
      'default_hook' => 'mosaik_defaults',
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
      'file' => drupal_get_path('module', 'mosaik') . '/includes/mosaik.features.inc'
    )
  );
}
