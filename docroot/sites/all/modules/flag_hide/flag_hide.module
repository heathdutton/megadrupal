<?php
/**
 * @file
 * flag_hide.module
 *
 * Allows users to flag content so it is no longer displayed to them.
 */
define('FLAG_HIDE_DEFAULT_PAGE_INCLUSIONS', "<front>\nnode/*");
define('FLAG_HIDE_DEFAULT_PAGE_EXCLUSIONS', '');

define('FLAG_HIDE_COMMENT_PLACEHOLDER', '<br/>This comment was hidden at your request. ');
define('FLAG_HIDE_NODE_PLACEHOLDER', '<br/>The content here was hidden at your request. ');
define('FLAG_HIDE_METHOD_DEFAULT', 1);
define('FLAG_HIDE_METHOD_TEMPLATE_SUGGESTION', 2);

/**
 * Implements hook_form_FORMID_alter().
 */
function flag_hide_form_flag_form_alter(&$form, &$form_state) {
  if (empty($form['#flag']->entity_type)) {
    return;
  }
  $type = $form['#flag']->entity_type;
  if ($type != 'node' && $type != 'user') {
    return;
  }

  $flag_hide_name = ($type == 'node') ? variable_get('flag_hide_flag_name') : variable_get('flag_hide_flag_name_user');

  $form['use_flag_to_hide'] = array(
    '#type' => 'checkbox',
    '#default_value' => isset($form['#flag_name']) && ($flag_hide_name == $form['#flag_name']),
    '#weight' => -1,
  );
  if ($type == 'node') {
    $form['use_flag_to_hide']['#title'] = t('Use this flag to hide content');
    $form['use_flag_to_hide']['#description'] = t('If checked, this flag will be employed to allow users to hide individual nodes. <br/>This box may be ticked for one flag at most. Ticking this box here will automatically untick the same box on any other node flag forms.');
    $form['use_flag_to_hide']['#submit'][] = 'flag_hide_form_flag_node_submit';
  }
  else {
    $form['use_flag_to_hide']['#title'] = t('Use this flag to mute users, i.e. to hide all their posts, both content and comments');
    $form['use_flag_to_hide']['#description'] = t("If checked, this flag will be employed to allow visitors to hide all posts by authors they pick to be muted. <br/>This box may be ticked for one flag at most. Ticking this box here will automatically untick the same box on any other user flag forms.");
    $form['use_flag_to_hide']['#submit'][] = 'flag_hide_form_flag_user_submit';
  }
}

/**
 * Form submit handler for the flag-to-hide checkbox.
 *
 * @param array $form
 * @param array $form_state
 */
function flag_hide_form_flag_node_submit($form, &$form_state) {
  $flag_hide_name = variable_get('flag_hide_flag_name');
  if (empty($form_state['values']['use_flag_to_hide'])) {
    if ($flag_hide_name == $form['#flag_name']) {
      drupal_set_message(t('This flag can no longer be used to hide content.'));
      variable_del('flag_hide_flag_name');
    }
  }
  else {
    if ($flag_hide_name != $form_state['values']['name']) {
      drupal_set_message(t('This flag can now be used across this site to hide content.'));
    }
    variable_set('flag_hide_flag_name', $form_state['values']['name']);
  }
}

/**
 * Form submit handler for the flag-to-hide content posted by author checkbox.
 *
 * @param array $form
 * @param array $form_state
 */
function flag_hide_form_flag_user_submit($form, &$form_state) {
  $flag_hide_name = variable_get('flag_hide_flag_name_user');
  if (empty($form_state['values']['use_flag_to_hide'])) {
    if ($flag_hide_name == $form['#flag_name']) {
      drupal_set_message(t('This flag can no longer be used to mute users.'));
      variable_del('flag_hide_flag_name_user');
    }
  }
  else {
    if ($flag_hide_name != $form_state['values']['name']) {
      drupal_set_message(t('This flag can now be used across this site to mute users.'));
    }
    variable_set('flag_hide_flag_name_user', $form_state['values']['name']);
  }
}

/**
 * Implements hook_form_FORMID_alter().
 */
function flag_hide_form_block_admin_configure_alter(&$form, &$form_state) {
  if (!variable_get('flag_hide_enable_block_hiding', FALSE)) {
    return;
  }
  $form['visibility']['no results'] = array(
    '#type' => 'fieldset',
    '#title' => t('No results behaviour'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'visibility',
    '#weight' => 20,
  );
  $block_id = _flag_hide_get_block_id($form);
  $empty_block_texts = variable_get('flag_hide_empty_block_texts', array());
  $form['visibility']['no results']['empty_block_text'] = array(
    '#type' => 'textfield',
    '#size' => 128,
    '#title' => t('If the block renders empty, show a text instead'),
    '#description' => t('Some HTML tags are allowed. Enter %blank to suppress <em>all</em> markup and left-over styling.', array('%blank' => t('<blank>'))),
    '#default_value' => isset($empty_block_texts[$block_id]) ? $empty_block_texts[$block_id] : '',
  );
  $form['#submit'][] = 'flag_hide_form_block_admin_configure_submit';
}

/**
 * Additional submit handler for the block_admin_configure form.
 *
 * @param array $form
 * @param array $form_state
 */
function flag_hide_form_block_admin_configure_submit($form, $form_state) {
  $block_html_id = _flag_hide_get_block_id($form);
  $empty_block_texts = variable_get('flag_hide_empty_block_texts', array());
  if (empty($form_state['values']['empty_block_text'])) {
    unset($empty_block_texts[$block_html_id]);
  }
  else {
    $empty_block_texts[$block_html_id] = trim($form_state['values']['empty_block_text']) == t('<blank>') ? t('<blank>') : filter_xss($form_state['values']['empty_block_text'], flag_hide_allowed_html_tags());
  }
  variable_set('flag_hide_empty_block_texts', $empty_block_texts);
}

/**
 * Returns whether a supplied entity is on the current user's hide-list.
 *
 * This takes into account the page the user is currently on.
 *
 * @param string $entity_type
 *
 * @param int $entity_id
 *
 * @return mixed
 *   Either an object reference to the hiding flag or FALSE.
 */
function flag_hide_is_hidden($entity_type, $entity_id) {
  if (!empty($entity_id)) {
    // This entity may be hidden for two reasons:
    // a) it was a node explicitly flagged -- this is checked first
    // b) it was a node or comment posted by a user who has been muted
    if ($entity_type == 'node' && ($flag = flag_hide_get_node_flag_for_current_page()) && $flag->is_flagged($entity_id)) {
      return $flag;
    }
    $entities = entity_load($entity_type, array($entity_id));
    if (!empty($entities)) {
      $poster = $entities[$entity_id]->uid;
      if (($user_flag = flag_hide_get_user_flag()) && $user_flag->is_flagged($poster)) {
        return $user_flag;
      }
    }
  }
  return FALSE;
}

/**
 * Returns node flag for current page, if applicable.
 *
 * @return object flag or NULL if no flag is applicable to the current page
 */
function flag_hide_get_node_flag_for_current_page() {
  if (!function_exists('flag_get_flag')) {
    return FALSE;
  }
  $path = current_path();
  $path_alias = drupal_get_path_alias($path);
  $include_pages = variable_get('flag_hide_include_pages', FLAG_HIDE_DEFAULT_PAGE_INCLUSIONS);
  if (drupal_match_path($path, $include_pages) || drupal_match_path($path_alias, $include_pages)) {
    $exclude_pages = variable_get('flag_hide_exclude_pages', FLAG_HIDE_DEFAULT_PAGE_EXCLUSIONS);
    if (!drupal_match_path($path, $exclude_pages) && !drupal_match_path($path_alias, $exclude_pages)) {
      return flag_get_flag(variable_get('flag_hide_flag_name'));
    }
  }
  return NULL;
}

/**
 * Returns user flag,if applicable.
 *
 * @return object flag or NULL if no flag was defined
 */
function flag_hide_get_user_flag() {
  if (!function_exists('flag_get_flag')) {
    return FALSE;
  }
  $user_flag = flag_get_flag(variable_get('flag_hide_flag_name_user'));
  return ($user_flag && $user_flag->entity_type == 'user') ? $user_flag : NULL;
}

/**
 * Returns whether a specified method to hide content is currently in use.
 *
 * @param string $method_name
 *
 * @return bool
 */
function flag_hide_uses_method($method_name) {
  return variable_get('flag_hide_method', FLAG_HIDE_METHOD_DEFAULT) & $method_name;
}

/**
 * Implements hook_node_load().
 */
function flag_hide_node_load($nodes, $types) {
  if (($flag_name = variable_get('flag_hide_flag_name')) && function_exists('flag_get_flag')
    && ($flag = flag_get_flag($flag_name))) {
    foreach ($nodes as $nid => $node) {
      if ($flag->is_flagged($nid)) {
        // At this point we cannot remove the node object from $nodes,
        // but we can set a property to be acted on by other hooks.
        $node->dont_display = TRUE;

        if (variable_get('flag_hide_node_title')) {
          // @todo This is hacky.
          $is_node_view_page = (arg(0) == 'node') && (!arg(2) || arg(2) == 'view');

          if ($is_node_view_page) {
            // Do not use unset().
            $node->title = NULL;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_block_list_alter().
 *
 * We cannot use this hook as the block contents have not been rendered when
 * this gets called.
 *
function flag_hide_block_list_alter(&$blocks) {
  foreach ($blocks as $key => $block) {
    // ....
    if (empty($block_content)) {
      unset($blocks[$key]);
    }
  }
}
 */

/**
 * Implements moduleName_preprocess_hook().
 */
function flag_hide_preprocess_node(&$variables) {
  if (!flag_hide_uses_method(FLAG_HIDE_METHOD_TEMPLATE_SUGGESTION)) {
    return;
  }
  if (isset($variables['nid']) && flag_hide_is_hidden('node', $variables['nid'])) {
    // Override the node.tpl.php template with node--hide.tpl.php, if present.
    // These template suggestions only work if the node--hide.tpl.php file is
    // placed in the same directory as the enabled theme.
    $variables['theme_hook_suggestion'] = 'node__hide';
  }
}

/**
 * Returns whether the supplied HTML has any textual content.
 *
 * This is rather crude. Map placeholder <div>'s are considered empty content,
 * but shouldn't.
 *
 * @param string $content
 * @return bool
 */
function flag_hide_content_is_empty($content) {
  $stripped_content = trim(strip_tags($content, '<img>'));
  return empty($stripped_content);
}

/**
 * Implements hook_views_post_render().
 */
function flag_hide_views_post_render(&$view, &$rendered_output) {
  if (variable_get('flag_hide_empty_view_title') && flag_hide_content_is_empty($rendered_output)) {
    $view->set_title(' ');
  }
}

/**
 * Implements hook_help().
 */
function flag_hide_help($path, $arg) {
  switch ($path) {
    case 'admin/help#flag_hide':
      $t = t('Configuration instructions and tips are in this <a target="readme" href="@README">README</a> file.<br/>Known issues and solutions may be found on the <a taget="project" href="@flag_hide">Flag, Hide &amp; Mute</a> project page.', array(
        '@README' => url(drupal_get_path('module', 'flag_hide') . '/README.txt'),
        '@flag_hide' => url('http://drupal.org/project/flag_hide')));
      break;
  }
  return empty($t) ? '' : '<p>' . $t . '</p>';
}

/**
 * Implements hook_menu().
 */
function flag_hide_menu() {
  $items['admin/config/people/flag_hide'] = array(
    'title' => 'Flag, Hide & Mute',
    'description' => 'Select the roles that may be muted. Also select pages on which content may be hidden and the method to do it.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flag_hide_admin_config'),
    'access arguments' => array('administer site configuration'),
    'file' => 'flag_hide.admin.inc',
    'file path' => drupal_get_path('module', 'flag_hide') . '/includes',
  );
  return $items;
}

/**
 * Implements hook_theme_registry_alter().
 *
 * This is where the trickery starts: add theme functions to the already
 * present comment, node and block templates.
 * After drupal_theme_rebuild(), this function gets called twice. Template
 * suggestions will be included on the second call.
 */
function flag_hide_theme_registry_alter(&$theme_registry) {
  if (flag_hide_uses_method(FLAG_HIDE_METHOD_DEFAULT)) {
    $theme_registry['comment']['function'] = '_flag_hide_render_comment';
    $theme_registry['node']['function'] = '_flag_hide_render_node';
    // Cover template suggestions like node--article.
    foreach (array_keys($theme_registry) as $theme_name) {
      if (strpos($theme_name, 'comment__') === 0) {
        $theme_registry[$theme_name]['function'] = '_flag_hide_render_comment';
      }
      elseif (strpos($theme_name, 'node__') === 0) {
        $theme_registry[$theme_name]['function'] = '_flag_hide_render_node';
      }
    }
  }
  if (variable_get('flag_hide_enable_block_hiding')) {
    $theme_registry['block']['function'] = '_flag_hide_render_block';
    // Cover template suggestions like block--sidebar_second.
    foreach (array_keys($theme_registry) as $theme_name) {
      if (strpos($theme_name, 'block__') === 0) {
        $theme_registry[$theme_name]['function'] = '_flag_hide_render_block';
      }
    }
  }
}

/**
 * Implements hook_flag_access().
 *
 * Checks whether the account may hide entities posted by the author of
 * the supplied enitity.
 * This function is called via the flag module to determine whether the Hide
 * flag should be displayed or not.
 */
function flag_hide_flag_access($flag, $entity_id, $action, $account) {
  if ($flag->name != variable_get('flag_hide_flag_name_user')) {
    // Not a flag we're interested with.
    return;
  }
  if ($action == 'unflag') {
    // We are ambivalent about unflagging.
    return;
  }
  if ($account->uid == 1) {
    return;
  }
  $entities = entity_load($flag->entity_type, array($entity_id));
  if (!empty($entities)) {
    $uid = $entities[$entity_id]->uid;
    $posters = entity_load('user', array($uid));
    return !empty($posters) && flag_hide_may_be_muted(array_keys($posters[$uid]->roles));
  }
  return FALSE;
}

/**
 * Return a list of HTML tags that may be used in content placeholder texts.
 *
 * @return array of lowercase names of HTML tags that are allowed
 */
function flag_hide_allowed_html_tags() {
  return array('a', 'br', 'p', 'em', 'strong', 'cite', 'blockquote', 'code', 'ul', 'ol', 'li', 'dl', 'dt', 'dd');
}

/**
 * Returns if content & comments posted by the supplied role ids may be muted.
 *
 * Only if all of the roles supplied may be muted is the associated poster
 * considered "mutable". So if the authenticated role may be muted, but the
 * administrator role is not, then posts by the administrator cannot be muted.
 *
 * @param array of role names indexed by role id
 *
 * @return bool
 */
function flag_hide_may_be_muted($roles) {
  if (empty($roles)) {
    return FALSE;
  }
  $roles_not_muted = variable_get('flag_hide_roles_not_muted', flag_hide_default_roles_not_muted());
  foreach ($roles as $rid) {
    if (!empty($roles_not_muted[$rid])) {
      return FALSE;
    }
  }
  // All of the supplied roles may be muted, so return TRUE.
  return TRUE;
}

/**
 * Returns a list of roles that may NOT be muted by default.
 *
 * @return array of role names, indexed by role id
 */
function flag_hide_default_roles_not_muted() {
  $all_roles = user_roles();
  $muted_roles = array();
  // Anonymous flagging requires the Session API module.
  if (!module_exists('session_api')) {
    $muted_roles[DRUPAL_ANONYMOUS_RID] = $all_roles[DRUPAL_ANONYMOUS_RID];
  }
  // Drupal Admin role id equals 3 (most of the time...)
  if (isset($all_roles[3])) {
    $muted_roles[3] = $all_roles[3];
  }
  return $muted_roles;
}

/**
 * Produce either the original comment.tpl.php output or a short message.
 *
 * @todo Allow tokens to be used in the message, e.g., [user:name].
 *
 * @param array $variables
 *   Template variables. These are passed on as received to comment.tpl.php.
 *
 * @return string
 *   HTML as produced by either the placeholder or comment.tpl.php
 */
function _flag_hide_render_comment(&$variables) {
  if (isset($variables['comment']) && ($flag = flag_hide_is_hidden('user', $variables['comment']->uid))) {
    $placeholder = variable_get('flag_hide_comment_placeholder', FLAG_HIDE_COMMENT_PLACEHOLDER);
    if (empty($placeholder)) {
      $placeholder = t('Comment was hidden, because you muted the poster: !poster.', array(
        '!poster' => isset($variables['author']) ? $variables['author'] : $variables['comment']->name)
      );
    }
    // @todo: should get its own tick box, not reuse the node one.
    if (variable_get('flag_hide_node_display_unhide_link', FALSE)) {
      // return $placeholder . $flag->theme('unflag', $variables['comment']->uid);
    }
    return $placeholder;
  }
  // Default: render the original comment template, comment.tpl.php.
  return _flag_hide_render_theme('comment', $variables);
}

/**
 * Produce either the original node.tpl.php output or a short (empty?) message.
 *
 * @todo Allow tokens to be used in the message, e.g., [user:name].
 *
 * @param array $variables
 *   Template variables. These are passed on as received to node.tpl.php.
 *
 * @return string
 *   HTML as produced by either the placeholder or node.tpl.php
 */
function _flag_hide_render_node(&$variables) {
  // Node may be hidden by node-hiding flag or user-muting flag.
  if (isset($variables['nid']) && ($flag = flag_hide_is_hidden('node', $variables['nid']))) {
    $placeholder = variable_get('flag_hide_node_placeholder', FLAG_HIDE_NODE_PLACEHOLDER);
    // $placeholder has been sanitized upon saving on the configuration page.
    $output = empty($placeholder) ? '' : $placeholder;
    if (variable_get('flag_hide_node_display_unhide_link', FALSE)) {
      $output .= $flag->theme('unflag', $flag->entity_type != 'user' ? $variables['nid'] : $variables['uid']);
    }
    return empty($output) ? ' ' : $output;
  }
  // Default: render the original node template, node.tpl.php.
  return _flag_hide_render_theme('node', $variables);
}

/**
 * Suppress all block markup if the block contents are empty.
 *
 * @param array $variables
 *   Template variables. We're only after the content part.
 *
 * @return string
 */
function _flag_hide_render_block(&$variables) {
  if (isset($variables['block_html_id']) && isset($variables['content'])) {
    $block_id = $variables['block_html_id'];
    $empty_block_texts = variable_get('flag_hide_empty_block_texts', array());
    if (!empty($empty_block_texts[$block_id]) && flag_hide_content_is_empty($variables['content'])) {
      return trim($empty_block_texts[$block_id]) == t('<blank>') ? NULL : $empty_block_texts[$block_id];
    }
  }
  // Default: render via original block template or template suggestion.
  return _flag_hide_render_theme('block', $variables);
}

/**
 * Render a theme (template or function) by the supplied name.
 *
 * Kids: don't try this at home. Use theme($hook, $variables) instead.
 *
 * This local version differs from core's in that it runs the theme's template
 * in preference over the theme function, if both are present.
 *
 * @param string $hook
 *   Name of the theme, e.g., 'node'. If the theme registry contains info for
 *   both a theme function and a theme template, the template is executed.
 *
 * @param array $variables
 *   Theme variables, in particular template suggestions in
 *   $variables['theme_hook_suggestions']
 *
 * @return string
 *   Rendered template output.
 */
function _flag_hide_render_theme($hook, &$variables) {
  $hooks = theme_get_registry(FALSE);
  $info = $hooks[$hook];

  if (!empty($info['template'])) {
    // Not sure this is necessary. See theme() in theme.inc
    if (!isset($variables['directory'])) {
      $default_template_variables = array();
      template_preprocess($default_template_variables, $hook);
      $variables += $default_template_variables;
    }
    // If there is template for a suggestion use that template instead of base.
    if (!empty($variables['theme_hook_suggestions'])) {
      $suggestions = $variables['theme_hook_suggestions'];
    }
    if (!empty($variables['theme_hook_suggestion'])) {
      $suggestions[] = $variables['theme_hook_suggestion'];
    }
    if (!empty($suggestions)) {
      foreach (array_reverse($suggestions) as $suggestion) {
        if (isset($hooks[$suggestion])) {
          $info = $hooks[$suggestion];
          break;
        }
      }
    }
    $file = $info['template'];
    $template_file = empty($info['path']) ? "$file.tpl.php" : $info['path'] . "/$file.tpl.php";
    return theme_render_template($template_file, $variables);
  }
  // We should normally not arrive here.
  if (isset($info['function']) && function_exists($info['function'])) {
    //return $info['function']($variables);
  }
}

/**
 * Extract the HTML block identifier from the supplied block form.
 *
 * @param array $form
 *   A block form.
 *
 * @return string uniquely identifiying the block
 *
 * @see template_preprocess_block()
 */
function _flag_hide_get_block_id($form) {
  $module = $form['module']['#value'];
  $delta = $form['delta']['#value'];
  // E.g. "block-block-12" or "block-views-0cdc5f11127e9f081a132e1a42abba72"
  return drupal_html_id("block-$module-$delta");
}
