<?php
// $Id: textlinkads.module,v 1.6.0 2011/10/10 16:08:21 pluginstla_chris Exp $
/**
 * @file
 * The Text Link Ads Standard Plugin, enables serving ads on Drupal.
 *
 * Allows serving ads on node or view level page ads for MediaWhiz SEO.
 * Display is handled via a block but individual pages can be added to support
 * many ads pages .
 */
define('textlinkads_VERSION', '$Id$');
define('textlinkads_plugin_VERSION', '1.8');

function textlinkads_help($path, $arg) {
  switch ($path) {
  case 'admin/help#textlinkads':
    $output =  t('Click <a href="http://www.text-link-ads.com/r/plugin/info/tla/drupal7">here</a> for addition help and information.');
    return $output;
  case 'admin/config/textlinkads':
    return '<p>' . t('You are using version %version of the textlinkads module.', array('%version' => textlinkads_plugin_VERSION)) . '</p><p>' . t('Do not forget to setup the block level for your ads to have the ads display.') . '</p>';
  }
}

function textlinkads_permission() {
  return array(
    'administer Text Link Ads' => array(
      'title' => t('administer Text Link Ads by node'),
      'description' => t('Set xml key'),
    ),
  );
}

function textlinkads_cron() {
  if (variable_get('textlinkads_last_update', 0) < (time() - 3600)) {
    textlinkads_update_links();
  }
}

function textlinkads_menu() {
  $items = array();
  $items['textlinkads/update_now'] = array(
    'page callback' => 'textlinkads_update_links',
    'type' => MENU_NORMAL_ITEM,
    'page arguments' => array('textlinkads_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/config/textlinkads'] = array(
    'title' => 'Text Link Ads Settings',
    'description' => 'Settings for the Text Link Ads module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('textlinkads_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

function textlinkads_block_info() {
  $blocks = array();
  $blocks['textlinkads'] = array(
    'info' => t('Text Link Ads'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

function textlinkads_block_view($delta = '') {

  $block = array('cache' => DRUPAL_NO_CACHE);
  switch ($delta) {
  case 'textlinkads':
  case '0':
    if (!variable_get('textlinkads_ad_cron_disable', '')) {
      textlinkads_cron();
    }
    $links = array();

    if (variable_get('textlinkads_nodes_enabled', 0) && arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      $links = isset($node->textlinkads_xml_key) ? textlinkads_get_links($node->textlinkads_xml_key) : array();
    } else {
      $links = textlinkads_get_links_by_url();
    }
    if (!$links) {
      $default_xml_key = variable_get('textlinkads_default_xml_key', 0);
      if ($default_xml_key && drupal_is_front_page()) {
        $links = textlinkads_get_links($default_xml_key);
      }
    }
    if ($links) {
      $title = variable_get('textlinkads_ad_block_title', 'Resources');
      if (textlinkads_admin_header_invalid($title)) {
          $title = '';
      }
      $block['subject'] = t($title);
      $block['content'] = theme_textlinkads_ads($links);
      $block['module'] = t(str_replace(' ', '-', $title));

    }
    break;
  }
  return $block;
}

function textlinkads_admin_form_submit($form, &$form_state) {
  $formValues = $form_state['values'];
  if ($formValues['url_keys']) foreach ($formValues['url_keys'] as $number => $values) {
      if ($number == 0) {
        if (!empty($values['xml_key']) && !empty($values['url'])) {
          db_insert('textlinkads_node')->fields(
            array(
                'url' => $values['url'],
                'xml_key' => $values['xml_key']
            )
          )->execute();
        }
      }
      else {
        if (!empty($values['xml_key']) && !empty($values['url'])) {
          db_update('textlinkads_node')->fields(
            array(
                'url' => $values['url'],
                'xml_key' => $values['xml_key']
            ))->condition('id', $number)->execute();
        }
        else {
          db_delete('textlinkads_node')->condition('id', $number)->execute();
        }
      }
      variable_set('textlinkads_default_xml_key', 0);
    }
  drupal_set_message(t('urls update'));
  textlinkads_update_links();

}

function textlinkads_admin_settings() {
  $form = array();
  return textlinkads_admin_form($form);
  }

function textlinkads_admin_header_invalid($title) {
  $blocked =  array(
    'paid links', 'sponsor', 'sponsored Links', 'advertisement', 'tla', 'text link ads', 'text-link-ads', 'text links', 'marketplace', 'money', 'link partners', 'promotional'
  );
  foreach ($blocked as $block) {
    if (stripos($title, $block) !== false) {
      return true;
    }
  }
}

function textlinkads_admin_form($form) {
  $extraInfo = '';
  if (textlinkads_admin_header_invalid(variable_get('textlinkads_ad_block_title'))) {
      $extraInfo = "The ad block title you are using is not valid";
      variable_set('textlinkads_ad_block_title', '');
  }
  $form['textlinkads_ad_block_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Ad block Heading'),
    '#default_value' => variable_get('textlinkads_ad_block_title', 'Resources'),
    '#description' => t('Enter a heading for the Ad block. It is alright to leave it blank.' . $extraInfo),
  );
  $form['textlinkads_ad_cron_disable'] = array(
        '#type' => 'checkbox',
        '#title' => t('disabled Automatic Ad retrival'),
        '#default_value' => variable_get('textlinkads_ad_cron_disable', 0),
        '#description' => t('Click this if you have Drupal cron running and do not need the plugin to refresh the ads.'),
  );

  $form['textlinkads_nodes_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Node API'),
    '#default_value' => variable_get('textlinkads_nodes_enabled', 0),
    '#description' => t('Enables you to enter a site key for each indivual page. For Large sites node level entry is not suggested.'),
  );
  $query = db_select('textlinkads_node');
  $query->condition('xml_key', '', '<>')->fields('textlinkads_node', array('xml_key', 'url', 'nid', 'id'));
  $queryCount = $query->countQuery()->execute()->fetchField();

  if ($queryCount <= 0) {
    $form['textlinkads_default_xml_key'] = array(
      '#type' => 'textfield',
      '#title' => t('Default Xml Key'),
      '#default_value' => variable_get('textlinkads_default_xml_key', 'XXXXXXJOINtextlinkadsFORKEYXXXXXX'),
      '#description' => t('Site key 20 character code from MediaWhiz SEO. If page or node level ads set then this default is disabled.'),
    );
  }
  if ($queryCount > 0) {
    $results = $query->execute();
    $count = 0;
    $form['#attached']['js'] = array(textlinkads_get_js() => array('type' => 'inline'));
    drupal_add_js(drupal_get_path('module', 'textlinkads') . '/colorpicker2.js');
    drupal_add_js(drupal_get_path('module', 'textlinkads') . '/textlinkads.js');
    if (variable_get('textlinkads_nodes_enabled', 0)) {
        $form['textlinkads_node_keys'] = array('#type' => 'fieldset', '#title' => t('Node Level Site Keys'), '#description' => 'Click to view or edit key');
    }
    $form['textlinkads_url_keys'] = array('#type' => 'fieldset', '#title' => t('Page Level Site Keys'), '#description' => 'If you do not use nodes use this option. Blank xml keys and urls will not be inserted make sure you have teh full url in the url field.');
    $form['textlinkads_url_keys']['url_keys'] = array('#tree' => 1);
    foreach ($results as $result) {
      $count++;
      if ($result->nid && variable_get('textlinkads_nodes_enabled', 0)) {
        $form['textlinkads_node_keys']['nodelevel'][$count] = array('#value' => '<div id="sitekey' . $count . '"><a href="' . url('node/' . $result->nid, array('absolute' => TRUE)) . '">' . $result->xml_key . '</a></div>');
      }
      else {
        $form['textlinkads_url_keys']['url_keys'][$result->id]['xml_key'] = array(
          '#type' => 'textfield',
          '#title' => t('Current XML Key'),
          '#size' => 20,
          '#prefix' => '<div style="float:left; margin-right:15px;">',
          '#suffix' => '</div>',
          '#maxlength' => 20,
          '#default_value' =>  $result->xml_key,
          '#description' => t('Site key 20 character code from MediaWhiz SEO.'),
        );
        $form['textlinkads_url_keys']['url_keys'][$result->id]['url']= array(
          '#type' => 'textfield',
          '#title' => t('Url'),
          '#size' => 40,
          '#prefix' => '<div style="float:left;">',
           '#suffix' => '</div><div style="clear:both;"></div>',
          '#maxlength' => 100,
          '#default_value' =>  $result->url,
          '#description' => t('Full Url that ads will display on')
        );
      }
    }
  }
  else {
    $form['textlinkads_url_keys'] = array('#type' => 'fieldset', '#title' => t('Page Level Site Keys'), '#description' => 'If you do not use nodes use this option. Blank xml keys and urls will not be inserted make sure you have teh full url in the url field.');
    $form['textlinkads_url_keys']['url_keys'] = array('#tree' => 1);
  }
  $form['textlinkads_url_keys']['url_keys'][0]['xml_key'] = array(
    '#type' => 'textfield',
    '#title' => t('New XML Key'),
    '#prefix' => '<div style="clear:both; float:left; margin-right:15px;">',
    '#suffix' => '</div>',
    '#size' => 20,
    '#maxlength' => 20,
    '#default_value' =>  '',
    '#description' => t('Site key 20 character code from MediaWhiz SEO.'),
  );
  $form['textlinkads_url_keys']['url_keys'][0]['url'] = array(
    '#type' => 'textfield',
    '#title' => t('New Url'),
    '#size' => 40,
    '#maxlength' => 100,
    '#prefix' => '<div style="float:left;">',
    '#suffix' => '</div><div style="clear:both;"></div>',
    '#default_value' =>  '',
    '#description' => t('Full Url that ads will display on')
  );

  $form['#submit'][] = 'textlinkads_admin_form_submit';

  $total_options = drupal_map_assoc(array(4, 6, 8, 10));
  $row_options = drupal_map_assoc(array(1, 2, 3, 4, 8, 10));
  $font_options = drupal_map_assoc(array(6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18));

  $form['textlinkads_themer'] = array('#type' => 'fieldset', '#title' => t('Text Link Ads Appearance Settings'));
  $form['textlinkads_themer']['textlinkads_no_style'] = array(
    '#type' => 'checkbox',
    '#title' => t('No Styling'),
    '#suffix' => '</div>',
    '#default_value' => variable_get('textlinkads_no_style', 0),
  );
  $form['textlinkads_themer']['textlinkads_total']  = array(
    '#type' => 'select',
    '#options' => $total_options,
     '#prefix' => '<div  style="float:left; margin-right:10px;">',
     '#suffix' => '</div>',
   '#title' => t('Number of Ads'),
    '#default_value' => variable_get('textlinkads_total', 4),
  );

  $form['textlinkads_themer']['textlinkads_rows']  = array(
    '#type' => 'select',
    '#prefix' => '<div  style="float:left; margin-right:10px;">',
     '#suffix' => '</div>',
    '#options' => $row_options,
    '#title' => t('Number of Rows of Ads'),
    '#default_value' => variable_get('textlinkads_rows', 4),
  );
  $form['textlinkads_themer']['textlinkads_font']  = array(
    '#type' => 'select',
    '#prefix' => '<div  style="float:left; margin-right:10px;">',
     '#suffix' => '</div><div style="clear:both;"></div>',
     '#options' => $font_options,
    '#title' => t('Font Size'),
    '#default_value' => variable_get('textlinkads_font', 12),
  );

  $form['textlinkads_themer']['textlinkads_colors'] = array('#type' => 'fieldset', '#title' => t('Colors'));
  $form['textlinkads_themer']['textlinkads_colors']['textlinkads_border_color'] = array(
    '#type' => 'textfield',
    '#title' => t('Border'),
    '#prefix' => '<div  style="float:left; margin:2px; padding:5px; border:1px solid #ccc;">',
    '#size' => 8,
    '#maxlength' => 7,
    '#default_value' => variable_get('textlinkads_border_color', '#000000'),
    '#suffix' => '<a href="#" onclick="cp2.select(document.getElementById(\'edit-textlinkads-border-color\'),\'border_color_picker\');return false;" id="border_color_picker" name="border_color_picker">Pick Color</a>',
  );
  $form['textlinkads_themer']['textlinkads_colors']['textlinkads_no_border'] = array(
    '#type' => 'checkbox',
    '#title' => t('No Border'),
    '#suffix' => '</div>',
    '#default_value' => variable_get('textlinkads_no_border', 0),
    '#attributes' => array('onclick' => 'update_border_color()')
  );
  $form['textlinkads_themer']['textlinkads_colors']['textlinkads_bg_color'] = array(
    '#type' => 'textfield',
    '#prefix' => '<div  style="float:left; margin:2px; padding:5px; border:1px solid #ccc;">',
    '#title' => t('Background'),
    '#size' => 8,
    '#maxlength' => 7,
    '#default_value' =>  variable_get('textlinkads_bg_color', '#ffffff'),
    '#suffix' => '<a href="#" onclick="cp2.select(document.getElementById(\'edit-textlinkads-bg-color\'),\'bg_color_picker\');return false;" id="bg_color_picker" name="bg_color_picker">Pick Color</a>',
  );
  $form['textlinkads_themer']['textlinkads_colors']['textlinkads_no_bg'] = array(
    '#type' => 'checkbox',
    '#title' => t('Transparent'),
    '#suffix' => '</div>',
    '#default_value' => variable_get('textlinkads_no_bg', 0),
    '#attributes' => array('onclick' => 'update_bg_color()')
  );
  $form['textlinkads_themer']['textlinkads_colors']['textlinkads_link_color'] = array(
    '#type' => 'textfield',
    '#prefix' => '<div  style="float:left; margin:2px; padding:5px; border:1px solid #ccc;">',
    '#title' => t('Link Color'),
    '#size' => 8,
    '#suffix' => '</div>',
    '#maxlength' => 7,
    '#default_value' =>  variable_get('textlinkads_link_color', '#0000ff'),
    '#suffix' => '<a href="#" onclick="cp2.select(document.getElementById(\'edit-textlinkads-link-color\'),\'link_color_picker\');return false;" id="link_color_picker" name="link_color_picker">Pick Color</a>',
  );

  $form['textlinkads_themer']['textlinkads_preview'] = array('#type' => 'fieldset', '#title' => t('Example'));
  $form['textlinkads_themer']['textlinkads_preview']['preview_div'] = array('#value' => '<div id="preview"></div><script type="text/javascript">cp2.writeDiv();</script>');

  return system_settings_form($form);
}

function textlinkads_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'load':
      $node->textlinkads_xml_key = db_result(db_query("SELECT xml_key FROM {textlinkads_node} WHERE nid = %d", $node->nid));
      break;
    case 'update':
    case 'insert':
      if (isset($node->textlinkads_xml_key)) {
        db_delete('textlinkads_node')->condition('nid', $node->nid)->execute();
        if ($node->textlinkads_xml_key) {
          db_insert('textlinkads_node')->feilds(array('nid' => $node->nid, 'xml_key' => $node->textlinkads_xml_key))->execute();
          variable_set('textlinkads_default_xml_key', 'XXXXXXJOINtextlinkadsFORKEYXXXXXX');
        }
        textlinkads_update_links();
      }
      break;
  }
}

function textlinkads_theme() {
  return array(

  'textlinkads_ads' => array(
    'arguments' => array('links'),
  ),

  );
}



function theme_textlinkads_ads($links) {
  $output = '';
  $font_size = variable_get('textlinkads_font', 12);
  $rows = variable_get('textlinkads_rows', 4);
  $columns = ceil(count($links) / $rows);
  $link_color = variable_get('textlinkads_link_color', 0);
  $bg_color = variable_get('textlinkads_bg_color', 0);
  $border_color = variable_get('textlinkads_border_color', 0);
  $no_border = variable_get('textlinkads_no_border', 0);
  $no_bg = variable_get('textlinkads_no_bg', 0);
  $disable_styling = variable_get('textlinkads_no_style', 0);
  if (!$links) {
      return;
  }

  if ($disable_styling) {
    $output = "<ul>";
    while (count($links) > 0) {
      for ($j = 0; $j < $columns; $j++) {
        if ($link = array_pop($links)) {
          $output .= "<li>";
          $output .= $link->before_text ? $link->before_text . ' ' : '';
          $output .= '<a href="' . $link->url . '">' . $link->text;
          $output .= $link->after_text ? ' ' . $link->after_text : '';
          $output .= "</li>\n";
        }
      }
    }
    $output .= "</ul>\n";
  } else {
    $output =  '<table style="width: 100%; margin: 5px auto;border: ' . ($no_border ? 'none' : "1px solid $border_color") . '; border-spacing: 0px;background: ' . ($no_bg ? 'transparent' : $bg_color) . ';" cellpadding="5" cellspacing="0"><tbody>';

    while (count($links) > 0) {
      $output .= "<tr>";
      for ($j = 0; $j < $columns; $j++) {
        if ($link = array_pop($links)) {
          $output .= "<td align='center'><span style='font-size:{$font_size}px; color=#000000;'>{$link->before_text} <a href='{$link->url}' style='font-size:{$font_size}px; color:{$link_color}'>{$link->text}</a> {$link->after_text}</span></td>";
        }
        else {
          $output .= "<td></td>";
        }
      }
      $output .= "</tr>";
    }
    $output .= "</tbody></table>";
  }

  return $output;
}

function textlinkads_update_links() {
  $links = array();
  $data = array();
  $query = db_select('textlinkads_node', 't');
  $query->condition('t.xml_key', '', '<>')->fields('t', array('xml_key'));
  $query->groupBy('t.xml_key');
  $counter = $query->countQuery()->execute()->fetchField();
  $results = $query->execute();
  $keys = array();
  $default_xml_key = variable_get('textlinkads_default_xml_key', 0);
  if ($counter > 0) {
    foreach ($results as $result) {
      $keys[] = $result->xml_key;
    }
  }
  elseif ($default_xml_key) {
    $keys[] = $default_xml_key;
  }
  $count = 0;
  foreach ($keys as $xml_key) {
    $links = array();
    $CONNECTION_TIMEOUT = 10;
    $url = 'http://www.text-link-ads.com/xml.php?k=' . check_plain($xml_key) . '&l=drupal7-tla-1.8&v=' . this_VERSION;
    if (function_exists('json_decode') && is_array(json_decode('{"a":1}', true))) {
      $url .= '&f=json';
      $ads = $request = drupal_http_request($url);
      if (isset($ads->data)) {
        $data['LINKS']['LINK'] = json_decode($ads->data, true);
        foreach ($data['LINKS']['LINK'] as $link_id => $link){
          $data['LINKS']['LINK'][$link_id] = array_change_key_case($link, CASE_UPPER);
          $count++;
        }
      }
    }
    else {
      $ads = $request = drupal_http_request($url);
      if (isset($ads->data)) {
        $ads->data = substr($ads->data, strpos($ads->data, '<?'));
        $parser = new textlinkads_xml2array();
        $data = $parser->parseXMLintoarray($ads->data);
      }
    }

    if ($data) {
      db_delete('textlinkads_links')->condition('xml_key', $xml_key)->execute();

      if (isset($data['LINKS']) && is_array($data['LINKS']) && isset($data['LINKS']['LINK']['URL'])) {
        $links = array($data['LINKS']['LINK']);
      }
      else {
        $links = $data['LINKS']['LINK'];
        if (!is_array($links)) {
          $links = array();
        }
      }
      foreach ($links as $key => $values) {
        if (isset($values['POSTID']) && $values['POSTID']) {
          continue;
        }
        db_insert('textlinkads_links')->fields(array(
            'xml_key' => $xml_key,
            'url' => $values['URL'],
            'text' => $values['TEXT'],
            'before_text' => $values['BEFORETEXT'],
            'after_text' => $values['AFTERTEXT'],
        ))->execute();
      }
    }
    $count += count($links);
  }
  watchdog('textlinkads', "update_links: $count ads found" );
  variable_set('textlinkads_last_update', time());
}

/**
 * function textlinkads_add_links()
 * @param string $content The text to be searched for keyword/links
 * @param array $links An array of keyword => link entries to be replaced
 *
 * @return string The text after link replacement
 */
function textlinkads_get_links($xml_key) {
  $links = array();
  if (!$xml_key) return;
  if ($results = db_query("SELECT * from {textlinkads_links} WHERE xml_key=:xmlkey", array(':xmlkey' => $xml_key))) {
    foreach ($results as $ad) {
      $links[] = $ad;
    }
  }
  return $links;
}

/**
 * function textlinkads_add_links()
 * @param string $content The text to be searched for keyword/links
 * @param array $links An array of keyword => link entries to be replaced
 *
 * @return string The text after link replacement
 */
function textlinkads_get_links_by_url() {
  $links = array();
  $urlBase = $GLOBALS['base_url'] . request_uri();
  $altBase = (drupal_substr($urlBase, -1) == '/') ? drupal_substr($urlBase, 0, -1) : $urlBase . '/';
  if ($results = db_query("SELECT tl.* FROM {textlinkads_links} tl LEFT JOIN {textlinkads_node} tn on tl.xml_key = tn.xml_key WHERE tn.url=:url OR tn.url =:alt", array(':url' => $urlBase, ':alt' => $altBase))) {
    foreach ($results as $ad) {
      $links[] = $ad;
    }
  }
  return $links;
}
function textlinkads_form_alter(&$form, $form_state, $form_id) {
  if ($form['#id'] == 'node-form' && variable_get('textlinkads_nodes_enabled', 0)) {
    if (user_access('administer Text Link Ads by node')) {
      $form['textlinkads'] = array(
        '#type' => 'fieldset',
        '#access' => TRUE,
        '#title' => t('Standard Text Link Ads Ads Site Key'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#weight' => 25,
        'textlinkads_xml_key' => array(
          '#type' => 'textfield',
          '#title' => t('Text Link Ads site key for this node. Please visit http://www.text-link-ads.com/ for site key'),
          '#default_value' => db_result(db_query("SELECT xml_key FROM {textlinkads_node} WHERE nid = %d", $form['#node']->nid))
        ),
      );
    }
  }
}

function textlinkads_get_js() {
  $path = drupal_get_path('module', 'textlinkads');
  $default_font_size = variable_get('textlinkads_font', 12);
  $default_rows = variable_get('textlinkads_rows', 4);
  $default_total_number = variable_get('textlinkads_total', 4);
  $default_link_color = variable_get('textlinkads_link_color', 0);
  $default_bg_color = variable_get('textlinkads_bg_color', 0);
  $default_border_color = variable_get('textlinkads_border_color', 0);
  $default_no_border = variable_get('textlinkads_no_border', 0);
  $default_no_bg = variable_get('textlinkads_no_bg', 0);
  $js =<<<__END__
var cp2 = new ColorPicker();
var table_total_ads = $default_total_number;
var table_rows = $default_rows;
var font_size = $default_font_size;
var link_color = '$default_link_color';
var bg_color = '$default_bg_color';
var border_color = '$default_border_color';
var no_border = $default_no_border;
var no_bg = $default_no_bg;
var example_link = 'Example Link';
var link_color_txt = 'link_color';

__END__;
  return $js;
}

class textlinkads_xml2array {
  function parseXMLintoarray($xmldata) { // starts the process and returns the final array
    $xmlparser = xml_parser_create();
    xml_parse_into_struct($xmlparser, $xmldata, $arraydat);
    xml_parser_free($xmlparser);
    $semicomplete = $this->subdivide($arraydat);
    $complete = $this->correctentries($semicomplete);
    return $complete;
  }

  function subdivide($dataarray, $level = 1) {
    foreach ($dataarray as $key => $dat) {
      if ($dat['level'] === $level && $dat['type'] === "open") {
        $toplvltag = $dat['tag'];
      }
      elseif ($dat['level'] === $level && $dat['type'] === "close" && $dat['tag'] === $toplvltag) {
        $newarray[$toplvltag][] = $this->subdivide($temparray, ($level +1));
        unset($temparray, $nextlvl);
      }
      elseif ($dat['level'] === $level && $dat['type'] === "complete") {
        if (isset($newarray[$dat['tag']]) && is_array($newarray[$dat['tag']])) {
          $newarray[$dat['tag']][] = $dat['value'];
        }
        elseif (isset($newarray[$dat['tag']]) && !is_array($newarray[$dat['tag']])) {
          $newarray[$dat['tag']] = array($newarray[$dat['tag']], $dat['value']);
        }
        else {
          $newarray[$dat['tag']]=$dat['value'];
        }
      }
      elseif ($dat['type'] === "complete" || $dat['type'] === "close" || $dat['type'] === "open") {
        $temparray[] = $dat;
      }
    }
    return $newarray;
  }

  function correctentries($dataarray) {
    if (is_array($dataarray)) {
      $keys =  array_keys($dataarray);
      if (count($keys)== 1 && is_int($keys[0])) {
        $tmp = $dataarray[0];
        unset($dataarray[0]);
        $dataarray = $tmp;
      }
      $keys2 = array_keys($dataarray);
      foreach ($keys2 as $key) {
        $tmp2 = $dataarray[$key];
        unset($dataarray[$key]);
        $dataarray[$key] = $this->correctentries($tmp2);
        unset($tmp2);
      }
    }
    return $dataarray;
  }
}
