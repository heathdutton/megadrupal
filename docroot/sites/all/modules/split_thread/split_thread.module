<?php

/**
 * Implements hook_permission().
 */
function split_thread_permission() {
  return array(
      'split threads' => array(
          'title' => t('Split topics'),
          'description' => t('Allow the user to split a topic thread into a new topic.'),
      )
  );
}

/**
 * Implements hook_menu().
 */
function split_thread_menu() {
  return array(
      'topic_split/%comment' => array(
          'title' => 'Split topic thread.',
          'page callback' => 'split_thread',
          'page arguments' => array(1),
          'access arguments' => array('split threads'),
      ),
  );
}


/**
 * Implements hook_comment_view().
 * Add a spit link to the comment links if the user has permmision
 */
function split_thread_comment_view($comment, $view_mode, $langcode) {
  // For the moment restict to forums only.
  if (empty($comment->in_preview)) {
    if (user_access('split threads')) {
      $comment->content['links']['comment']['#links']['split'] = array(
          'title' => t('split'),
          'html' => TRUE,
          'href' => "topic_split/$comment->cid",
      );
    }
  }
}

/**
 * Splits the topic, saves a new node and then redirects to the node edit form for the new topic.
 * @param stdClass $comment
 */
function split_thread($comment) {
  $source_node = node_load($comment->nid);
  $node = new stdClass();
  $node->type = 'forum';
  $node->language = $comment->language;
  $node->uid = $comment->uid;
  $node->comment = $source_node->comment;
  $node->forum_tid = $source_node->forum_tid;
  $node->taxonomy_forums['und'][0]['tid'] = $source_node->forum_tid;
  $node->title = $comment->subject;
  $node->body = $comment->comment_body;
  $node->signature_forum_status  = TRUE;
  $node->is_new = TRUE;
  node_save($node);

  // Get thread mode.
  $mode = variable_get('comment_default_mode_' . $node->type, COMMENT_MODE_THREADED);
  $cids = comment_get_thread($source_node, $mode, 1000);

  if ($mode == COMMENT_MODE_FLAT) {
    $comment_split_at = array_search($comment->cid, $cids);
    //TODO: error check.

    $cids_to_move = array_splice($cids,$comment_split_at+1);
    $thread = 0;
    // Flat comments have to be flattened as some may be marked as replies to comments which
    // are not moved to the new node.
    foreach ($cids_to_move as $reply_cid) {
      $reply_comment = comment_load($reply_cid);
      $thread_string = int2vancode($thread) . "/";

      $reply_comment->nid = $node->nid;
      $reply_comment->pid = 0;
      $reply_comment->thread = $thread_string;
      drupal_write_record('comment', $reply_comment, 'cid');
      $thread++;
    }
  }
  else {
    $index = array_search($comment->cid, $cids) + 1;
    // Loop until end of array or depth is less than that of the node that is split on.
    $parent_depth = count(explode('.', $comment->thread));
    $thread_remove = strlen($comment->thread);
    while ($index < sizeof($cids)) {
      $reply_comment = comment_load($cids[$index]);
      if(count(explode('.',$reply_comment->thread)) <= $parent_depth) break;
      $reply_comment->nid = $node->nid;
      if ($reply_comment->pid == $comment->cid) {
        $reply_comment->pid = 0;
      }
      $reply_comment->thread = substr($reply_comment->thread, $thread_remove);
      krumo($reply_comment);
      drupal_write_record('comment', $reply_comment, 'cid');
      $index++;
    }
  }
  // TODO: provide option to post message that comment was moved.
  comment_delete($comment->cid);
  // Update comment information on the node.
  // We need to skip the updated logic otherwise comments will all be updated by
  // the user who splits so have to use internal functions.
  _forum_update_forum_index($comment->nid);
  _forum_update_forum_index($node->nid);
  _comment_update_node_statistics($comment->nid);
  _comment_update_node_statistics($node->nid);
  // Redirect to the new node.
  drupal_goto("node/$node->nid");
}