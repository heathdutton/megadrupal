<?php

/**
 * @file
 * Module that plugs in Sirportly functionality to your Drupal web site.
 * For Sirportly information see: http://sirportly.com
 */

require_once 'sirportly-lib/sirportly-php.php';
include_once 'libs/autoload.php';

define('SIRPORTLY_API_URL', 'https://api.sirportly.com/');

/**
 * Implements hook_init().
 */
function sirportly_init() {

  if (variable_get('sp_enable_styling', NULL)) {
    drupal_add_css(drupal_get_path('module', 'sirportly') . '/sirportly.default.css');
  }

}

/**
 * Block access to a page via a redirect if credentials aren't set.
 */
function blockAccessIfCredentialsNotSet() {
  $set = variable_get('sp_credentials_set', NULL);
  if (!$set) {
    drupal_set_message("You must complete the settings form before you can use the sirportly interface", "error");
    drupal_goto('admin/config/services/sirportly');
  }
}

/**
 * Implements hook_menu().
 */
function sirportly_menu() {

  $items['admin/config/services/sirportly'] = array(
    'title' => 'Sirportly API Settings',
    'description' => 'Connects to the Sirportly API',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sirportly_admin'),
    'access arguments' => array('administer sirportly'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/support'] = array(
    'title' => 'Support',
    'access arguments' => array('submit sirportly ticket'),
    'page callback' => 'sirportly_first_callback',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/support/tickets'] = array(
    'title' => 'Support tickets',
    'access arguments' => array('submit sirportly ticket'),
    'page callback' => 'sirportly_home',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/support/knowledge-base'] = array(
    'title' => 'Knowledge Base',
    'page callback' => 'sirportly_view_knowledge_base',
    'access arguments' => array('submit sirportly ticket'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/support/submit'] = array(
    'title' => 'Submit a support ticket',
    'description' => 'Submit a support ticket directly to {{ company_name }} from here.',
    'page callback' => 'sirportly_ticket_submit',
    'access arguments' => array('submit sirportly ticket'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/sirportly/view/%'] = array(
    'title' => 'Support Ticket',
    'description' => 'Submit a support ticket directly to {{ company_name }} from here.',
    'page callback' => 'sirportly_ticket_view',
    'page arguments' => array(3),
    'access arguments' => array('submit sirportly ticket'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * View a single ticket.
 *
 * @param int $ticket_id
 *   ID of the ticket to view
 *
 * @return string
 *   The return string to render as output.
 */
function sirportly_ticket_view($ticket_id) {

  $token = variable_get('sirportly_api_token', '');

  $secret = variable_get('sirportly_api_secret', '');

  $s = new Sirportly($token, $secret);

  $ticket = $s->ticket($ticket_id);

  drupal_set_title($ticket['subject']);
  $form = drupal_get_form('post_response_form');
  return theme('view_ticket', array(
    'date' => strtotime($ticket['submitted_at']),
    'subject' => $ticket['subject'],
    'message' => $ticket['updates'][0]['message'],
    'customer' => $ticket['customer'],
    'email' => $ticket['customer_contact_method']['method_type'] == 'email' ? $ticket['customer_contact_method']['data'] : NULL,
    'updates' => $ticket['updates'],
    'status' => $ticket['status'],
    'form' => render($form),
    )
  );

}
/**
 * Called by first page to redirect to tickets page.
 */
function sirportly_first_callback() {
  drupal_goto('admin/support/tickets');
}

/**
 * Sirportly dashboard tab.
 */
function sirportly_home() {

  drupal_set_title("Active support tickets");

  blockAccessIfCredentialsNotSet();

  $token = variable_get('sirportly_api_token', '');

  $secret = variable_get('sirportly_api_secret', '');

  global $user;

  $sirportly_ids = variable_get("Sirportly_ID_list_{$user->uid}", array());

  if (!$sirportly_ids || count($sirportly_ids) === 0) {
    return '<p>You have not submitted any tickets to us yet. ' . l(t('Submit a new support ticket'), 'admin/support/submit') . '.</p>';
  }

  $s = new Sirportly($token, $secret);

  $tickets = array();

  foreach ($sirportly_ids as $sid) {

    $users = $s->query('/api/v1/tickets/customer', array('customer' => $sid));

    foreach ($users['records'] as $t) {
      $tickets[] = $t;
    }

  }

  // Process the tickets.
  $headers = array(
    t('Subject'),
    t('Date Submitted'),
    t('Status'),
    t('View'),
  );

  $rows = array();

  // Sort the tickets.
  usort($tickets, 'sp_sort_ticket_array');

  foreach ($tickets as $ticket) {

    $rows[] = array(
      $ticket['subject'],
      date("jS F Y, H:ia", strtotime($ticket['submitted_at'])),
      $ticket['status']['name'],
      l(t('View'), 'admin/sirportly/view/' . $ticket['reference']),
    );

  }

  if (count($tickets) > 0) {
    $ticket_table = theme_table(array(
      'header' => $headers,
      'rows' => $rows,
      'attributes' => array(),
      'caption' => '',
      'colgroups' => array(),
      'sticky' => FALSE,
      'empty' => TRUE,
      'attributes' => array(
        'id' => 'sirportly-tickets',
      ),
      )
    );
  }
  else {
    $ticket_table = '<p class="no-results-tickets">No Tickets To Show</p>';
  }

  return theme('sp_support_page', array(
    'ticket_table' => $ticket_table)
  );

}
/**
 * USORT callback function.
 */
function sp_sort_ticket_array($a, $b) {

  $timea = strtotime($a['submitted_at']);

  $timeb = strtotime($b['submitted_at']);

  if ($timea < $timeb) {
    return 1;
  }
  elseif ($timea > $timeb) {
    return -1;
  }
  else {
    return 0;
  }

}

/**
 * Defines a form for posting responses to a ticket.
 * @return array
 *   DFAPI form
 */
function post_response_form() {
  return array(
    'response' => array(
      '#type' => 'textarea',
      '#title' => t("Post a response to this ticket:"),
    ),
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Send'),
    ),
  );
}

/**
 * Handle the submission of a new update to this ticket.
 * @return void
 *   Does not return anything.
 */
function post_response_form_submit(&$form, &$form_state) {
  if (!empty($form_state['values']['response'])) {
    $value = $form_state['values']['response'];

    $token = variable_get('sirportly_api_token', '');

    $secret = variable_get('sirportly_api_secret', '');

    $s = new Sirportly($token, $secret);

    $ticket = $s->ticket(arg(3));

    if (!$ticket) {
      return FALSE;
    }

    $update = $s->post_update(
      array(
        'ticket' => $ticket['reference'],
        'message' => $value,
        'customer' => $ticket['customer']['id'],
      )
    );

    if (!empty($update['id'])) {
      drupal_set_message("Thanks, your update was applied to the ticket.");
    }
    else {
      drupal_set_message("Oops, an error occured, please try again.", 'error');
    }
  }
}

/**
 * Implements hook_permission().
 */
function sirportly_permission() {
  return array(
    'administer sirportly' => array(
      'title' => t('Administer Sirtportly'),
    ),
    'submit sirportly ticket' => array(
      'title' => t('Submit support tickets using the Sirportly module'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function sirportly_theme() {
  return array(
    'view_ticket' => array(
      'template' => 'view-ticket',
      'variables' => array(
        'message' => NULL,
        'subject' => NULL,
        'meta' => NULL,
        'date' => NULL,
      ),
    ),
    'sp_support_page' => array(
      'template' => 'sp-support-page',
      'vars' => array(
        'tickets' => NULL,
        'knowledge_bases' => NULL,
      ),
    ),
    'knowledgebase_page' => array(
      'template' => 'sp-kb-page',
      'vars' => array(
        'menu' => NULL,
        'content' => NULL,
      ),
    ),
  );
}

/**
 * Create the form.
 */
function sirportly_admin() {

  $form = array();

  $collapsed = is_string(variable_get('sirportly_api_token', NULL)) && is_string(variable_get('sirportly_api_secret', NULL)) ? TRUE : FALSE;

  $form['sirportly_account'] = array(
    '#type' => 'fieldset',
    '#title' => t('Sirportly API credentials'),
    '#collapsible' => TRUE,
    '#collapsed' => $collapsed,
  );

  $form['sirportly_account']['sirportly_api_token'] = array(
    '#type' => 'textfield',
    '#title' => t('API Token'),
    '#description' => t('Your Sirpotly API Token. See <a href="http://sirportly.com/docs/api-specification">documentation</a> for details.'),
    '#default_value' => variable_get('sirportly_api_token', ''),
    '#required' => TRUE,
  );

  $form['sirportly_account']['sirportly_api_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('API Secret'),
    '#description' => t('Your Sirpotly API Secret. See <a href="http://sirportly.com/docs/api-specification">documentation</a> for details.'),
    '#default_value' => variable_get('sirportly_api_secret', ''),
    '#required' => TRUE,
  );

  if (!variable_get('sirportly_api_secret', NULL) || !variable_get('sirportly_api_token', NULL)) {
    return system_settings_form($form);
  }

  // Check that the needed metadata is there,
  // and if not, download it and store it.
  cache_sirportly_metadata();

  // Ticket routing information.
  $form['ticket_information'] = array(
    '#type' => 'fieldset',
    '#title' => 'Department & Brand information',
    '#description' => t('Determine information applied to newly submitted tickets.'),
  );

  $form['ticket_information']['sp_ticket_priority'] = array(
    '#type' => 'select',
    '#options' => variable_get('sirportly_metadata_priorities'),
    '#title' => 'Submitted ticket priority',
    '#required' => TRUE,
    '#default_value' => variable_get('sp_ticket_priority'),
  );

  $form['ticket_information']['sp_ticket_status'] = array(
    '#type' => 'select',
    '#options' => variable_get('sirportly_metadata_statuses'),
    '#title' => 'Submitted ticket status',
    '#required' => TRUE,
    '#default_value' => variable_get('sp_ticket_status'),
  );

  $form['ticket_information']['sp_ticket_department'] = array(
    '#type' => 'select',
    '#options' => variable_get('sirportly_metadata_departments'),
    '#title' => 'Submitted ticket department',
    '#description' => t('Select the department this ticket will be assigned to.'),
    '#required' => TRUE,
    '#default_value' => variable_get('sp_ticket_department'),
  );

  // Knowledgebase stuff.
  $form['sp_knowledgebase'] = array(
    '#title' => t('knowledgebases'),
    '#description' => t('Make a Sirportly knowledgebase visible in the support section.'),
    '#type' => 'fieldset',
  );

  $form['sp_knowledgebase']['sp_active_knowledgebase'] = array(
    '#type' => 'radios',
    '#options' => variable_get('sirportly_metadata_knowledgebases', array()),
    '#title' => t('Active knowledgebase'),
    '#description' => t('The active knowledgebase will be visible to site users'),
    '#default_value' => variable_get('sp_active_knowledgebase'),
  );

  // Styling.
  $form['sp_styling'] = array(
    '#title' => t('Default Styles'),
    '#type' => 'fieldset',
  );

  $form['sp_styling']['sp_enable_styling'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include default module styles'),
    '#description' => t("Include the module's custom stylesheet."),
    '#default_value' => variable_get('sp_enable_styling'),
  );

  $form['sp_credentials_set'] = array(
    '#type' => 'hidden',
    '#value' => 1,
  );


  return system_settings_form($form);

}

/**
 * Determine if all the neccessary settings have been set.
 *
 * @return bool
 *   True if all settings are ok, false if not.
 */
function __determine_all_sp_set() {

  $token = variable_get('sirportly_api_token', NULL);

  $secret = variable_get('sirportly_api_secret', NULL);

  $status = variable_get('sp_ticket_status', NULL);

  $priority = variable_get('sp_ticket_priority', NULL);

  $department = variable_get('sp_ticket_department', NULL);

  $test = (is_string($token) && is_string($secret)) && $status && $priority && $department ? TRUE : FALSE;

  if (!$test) {
    drupal_set_message(t('Not all of the required credentials have been set in order to use the Sirportly module, please <a href="">configure</a> then now.'), 'error');
  }

}

/**
 * Menu callback to allow you to submit a ticket to sirportly.
 *
 * @return string
 *   Content for the page.
 */
function sirportly_ticket_submit() {

  drupal_set_title("Submit a support ticket");

  blockAccessIfCredentialsNotSet();

  $token = variable_get('sirportly_api_token', '');

  $secret = variable_get('sirportly_api_secret', '');

  $status = variable_get('sp_ticket_status', '');

  $priority = variable_get('sp_ticket_priority');

  $department = variable_get('sp_ticket_department');

  $company_name = variable_get('company_name', 'us');

  $output = '<p>Need help with something? Fill out the form below and a support request will be sent directly to ' . $company_name . '.';
  $form = drupal_get_form('sirportly_ticket_submit_form');
  $output .= render($form);

  return $output;

}

/**
 * DFAPI Form for the submit page.
 *
 * @return array
 *   Form content.
 */
function sirportly_ticket_submit_form() {

  global $user;

  $form['sirportly_name'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => 'Your name',
  );
  $form['sirportly_email'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => 'Your email',
    '#description' => t('Defaults to your site email address, but please feel free to provide any.'),
    '#default_value' => $user->mail,
  );
  $form['sirportly_subject'] = array(
    '#type' => 'textfield',
    '#maxlength' => 120,
    '#title' => t('Subject'),
    '#description' => t("Sum up your issue in a few words."),
    '#required' => TRUE,
  );
  $form['sirportly_message'] = array(
    '#type' => 'textarea',
    '#title' => 'Message',
    '#attributes' => array(
      'style' => 'width:50%;',
    ),
    '#required' => TRUE,
    '#description' => t('Give a more detailed explanation of your problem.'),
  );
  $form['sirportly_submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  $form['#validate'] = array(
    'sirportly_ticket_submit_form_validate',
  );
  $form['#submit'] = array(
    'sirportly_ticket_submit_form_submit',
  );
  return $form;

}

/**
 * Implements hook_form_validate().
 */
function sirportly_ticket_submit_form_validate($form, &$form_state) {
  if (!valid_email_address($form_state['values']['sirportly_email'])) {
    form_set_error('sirportly_email', "Please enter a valid email address.");
  }
}

/**
 * Implements hook_form_submit().
 */
function sirportly_ticket_submit_form_submit($form, &$form_state) {

  $token = variable_get('sirportly_api_token', '');

  $secret = variable_get('sirportly_api_secret', '');

  $status = variable_get('sp_ticket_status', '');

  $priority = variable_get('sp_ticket_priority');

  $department = variable_get('sp_ticket_department');

  $s = new Sirportly($token, $secret);

  $ticket = array(
    'department' => $department,
    'status' => $status,
    'priority' => $priority,
    'subject' => $form_state['values']['sirportly_subject'],
    'name' => $form_state['values']['sirportly_name'],
    'email' => $form_state['values']['sirportly_email'],
  );

  // Create the ticket.
  $create_ticket = $s->create_ticket($ticket);

  // If a reference is received in return, post the message and
  // subject as an update, otherwise, throw an error.
  if (isset($create_ticket['reference'])) {

    $customer_id = $create_ticket['customer']['id'];

    $update = $s->post_update(
      array(
        'ticket' => $create_ticket['reference'],
        'message' => $form_state['values']['sirportly_message'],
        'subject' => $form_state['values']['sirportly_subject'],
        'customer' => $create_ticket['customer']['id'],
      )
    );

    if (isset($update['id'])) {

      drupal_set_message(t("Thanks, your ticket was received successfully."));

      global $user;

      $list_key = "Sirportly_ID_list_{$user->uid}";

      $customer_list = variable_get($list_key, NULL);

      $customer_list[$customer_id] = $customer_id;

      variable_set($list_key, $customer_list);

      drupal_goto('admin/support');
    }
    else {
      form_set_error("", "Your ticket could not be submitted due to an unknown error, please try again in 30 seconds.");
    }

  }
  else {

    // Ticket was not created, throw error.
    form_set_error("", "Your ticket could not be submitted due to an unknown error, please try again in 30 seconds.");
  }

}

/**
 * Get and cache the data from sirportly.
 */
function cache_sirportly_metadata() {

  $token = variable_get('sirportly_api_token', '');

  $secret = variable_get('sirportly_api_secret', '');

  $s = new Sirportly($token, $secret);

  $kbs = variable_get('sirportly_metadata_knowledgebases', NULL);

  if (!$kbs) {

    $kb_list = array();

    $kbs = $s->kb_list();

    foreach ($kbs as $kb) {
      $kb_list[$kb['id'] . ':' . $kb['name']] = $kb['name'];
    }

    variable_set('sirportly_metadata_knowledgebases', $kb_list);

  }

  $statuses = variable_get('sirportly_metadata_statuses', NULL);

  if (!$statuses) {
    $status_data = $s->statuses();
    $status_array = array();
    foreach ($status_data as $status) {
      $status_array[$status['id']] = $status['name'];
    }
    variable_set('sirportly_metadata_statuses', $status_array);
  }

  $priorities = variable_get('sirportly_metadata_priorities', NULL);

  if (!$priorities) {
    $priority_data = $s->priorities();
    $p_array = array();
    foreach ($priority_data as $priority) {
      $p_array[$priority['id']] = $priority['name'];
    }
    variable_set('sirportly_metadata_priorities', $p_array);
  }

  $departments = variable_get('sirportly_metadata_departments', NULL);

  if (!$departments) {
    $brands = $s->brands();
    $department_list = array();
    foreach ($brands as $brand) {
      foreach ($brand['departments'] as $department) {
        $department_list[$department['id']] = $department['name'] . ' (' . $brand['name'] . ')';
      }
    }
    variable_set('sirportly_metadata_departments', $department_list);
  }
}

/**
 * View a single knowledgebase article.
 */
function sirportly_view_knowledge_base() {

  drupal_set_title("Knowledge base");

  blockAccessIfCredentialsNotSet();

  $kb_id = variable_get('sp_active_knowledgebase', NULL);

  if (!$kb_id) {
    return '<p>No knowledgebase content is available.</p>';
  }

  $token = variable_get('sirportly_api_token', '');

  $secret = variable_get('sirportly_api_secret', '');

  $s = new Sirportly($token, $secret);

  $kb = $s->kb($kb_id);

  if (isset($_GET['p']) && is_string($_GET['p'])) {
    $kbp = $s->kb_page($kb_id, $_GET['p']);
  }
  else {
    $kbp = $s->kb_page($kb_id, '');
  }
  drupal_set_title($kbp['page']['title']);

  $menu = sp_recurseMenuItems($kb);

  return theme('knowledgebase_page', array(
    'menu' => $menu,
    'content' => \Michelf\MarkdownExtra::defaultTransform($kbp['page']['content']),
  ));
}

/**
 * Recursively output the menu array into a HTML menu.
 */
function sp_recurseMenuItems($menu, $link_base = NULL) {

  $output = '<ul>';

  foreach ($menu as $m) {

    $output .= '<li>';

    // NOTE: using url() and custom HTML here because the l() function
    // declares class="active" on all of them otherwise.
    if (!isset($link_base) && empty($m['full_permalink'])) {
      $link = 'admin/support/knowledge-base';
    }
    else {
      $plink = (isset($link_base) ? $link_base . '/' : '') . $m['full_permalink'];
      $link = 'admin/support/knowledge-base?p=' . $plink;
    }

    $get_path_match = isset($_GET['p']) && isset($plink) && $_GET['p'] == $plink ? TRUE : FALSE;

    if (current_path() == $link || $get_path_match) {
      $link = base_path() . $link;
      $output .= '<a href="' . $link . '" class="active">' . $m['title'] . '</a>';
    }
    else {
      $link = base_path() . $link;
      $output .= '<a href="' . $link . '">' . $m['title'] . '</a>';
    }

    if (isset($m['children'])) {
      $output .= sp_recurseMenuItems($m['children'], $m['permalink']);
    }
    $output .= '</li>';
  }

  $output .= '</ul>';

  return $output;

}

/**
 * Lovely dump function.
 *
 * @param mixed $var
 *   any type of variable to dump
 */
function dump($var) {
  echo '<pre>' . print_r($var, 1) . '</pre>';
}

/**
 * Implements hook_flush_caches().
 *
 * Does not actually return any table names, but uses the invocation
 * to clear the variables we don't want any more out.
 */
function sirportly_flush_caches() {
  db_query("DELETE FROM {variable} WHERE name LIKE 'sirportly_metadata%'");
  return array();
}
