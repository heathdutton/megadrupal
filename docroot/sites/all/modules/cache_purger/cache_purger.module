<?php
/**
 * @file
 * Cache Purger.
 */

/**
 * Implements hook_permission().
 */
function cache_purger_permission() {
  return array(
    'purge blocks cache' => array(
      'title' => t('Purge Blocks Cache'),
      'description' => t('The purge button will appear next to each block.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function cache_purger_menu() {
  $items = array();

  $items['admin/config/development/cachepurger/block'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'cache_purger_purge',
    'page arguments' => array(5, 6),
    'access callback' => TRUE,
  );

  $items['admin/config/development/cachepurger/get'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'cache_purger_cache_get',
    'page arguments' => array(5),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function cache_purger_help($path, $arg) {
  switch ($path) {
    case 'admin/config/development/cachepurger':
      //@TODO put more content here.
      return t('Purges blocks/views caches when a node gets updated.');
  }
}

/**
 * Implements hook_preprocess_block().
 */
function cache_purger_preprocess_block(&$variables) {
  if (user_access('purge blocks cache')) {
    $block = $variables['elements']['#block'];
    $module = '';
    $delta = '';

    // Drupal core stores blocks as arrays.
    if (is_array($block)) {
      $module = $block['module'];
      $delta = $block['delta'];
    }
    elseif (is_object($block)) {
      // Context module stores blocks as objects.
      $module = $block->module;
      $delta = $block->delta;
    }

    // Add blocks information to be used with the purge button.
    $js = '_cp.push({module:"' . $module . '", delta:"' . $delta . '"});';
    $variables['elements']['#attached']['js'][] = drupal_add_js($js,  array('type' => 'inline', 'scope' => 'footer'));
  }
}

/*
 * Implements hook_page_alter().
 */
function cache_purger_page_alter(&$page) {
  if (user_access('purge blocks cache')) {
    // Create the _cp object in the header.
    $js = 'var _cp = _cp || []; var _cp_d = ' . variable_get('cache_purger_debug_mode', 0) . ';';

    // Add necessary js and css.
    drupal_add_js($js,  array('type' => 'inline', 'scope' => 'header'));
    drupal_add_js(drupal_get_path('module', 'cache_purger') . '/js/cache_purger.js');
    drupal_add_css(drupal_get_path('module', 'cache_purger') . '/cache_purger.css');
  }
}

/**
 * Module settings.
 */
function cache_purger_form_system_performance_settings_alter(&$form, &$form_state, $form_id) {
  $form['cache_purger_purge_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Cache Purge Settings'),
    '#weight' => 1,
  );
  $form['cache_purger_purge_options']['cache_purger_debug_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Debug mode'),
    '#description' => t('A pop up containing the CID of the block will be displayed when the purge button is clicked.'),
    '#default_value' => variable_get('cache_purger_debug_mode', 0),
  );
  $form['cache_purger_purge_options']['cache_purger_purge_blocks'] = array(
    '#type' => 'checkbox',
    '#title' => t('Purge blocks cache automaticaly when an update happens'),
    '#description' => t('Flush blocks cache when changes are made on entities and nodequeues, etc.'),
    '#default_value' => variable_get('cache_purger_purge_blocks', 0),
  );

  // Get list of entity types.
  $entity_info = entity_get_info();
  foreach(array_keys($entity_info) as $entity_name) {
    $entities[$entity_name] = $entity_info[$entity_name]['label'];
  }

  // Display entities to choose to fine-tune setting.
  $form['cache_purger_purge_options']['cache_purger_purge_entities'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Enable automatic cache invalidation to the following:'),
    '#options' => $entities,
    '#default_value' => variable_get('cache_purger_purge_entities', $entities),
    '#states' => array(
      'invisible' => array(
        'input[name="cache_purger_purge_blocks"]' => array('checked' => FALSE),
      ),
    ),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_alter().
 */
function cache_purger_form_alter(&$form, &$form_state, $form_id) {
  if (variable_get('cache_purger_purge_blocks', 0)) {
    $purge_entities = variable_get('cache_purger_purge_entities', array());

    // Add submit function to entities.
    if (isset($form['#entity_type'])) {
      $entity_type = $form['#entity_type'];
      if (in_array($entity_type, $purge_entities) && $purge_entities[$entity_type] != FALSE) {
        // Add purge to default submit button.
        if (isset($form['actions']['submit']['#submit'])) {
          $form['actions']['submit']['#submit'][] = '_cache_purger_purge_form_submit';
        }
        if (isset($form['#submit'])) {
          $form['#submit'][] = '_cache_purger_purge_form_submit';
        }
        // Add purge to varnish purge button.
        if (isset($form['actions']['save_purge']['#submit'])) {
          $form['actions']['save_purge']['#submit'][-100] = '_cache_purger_purge_form_submit';
        }
      }
    }
    // Add submit function to nodequeue.
    if (isset($form['#form_id']) && substr($form['#form_id'], 0, 31) == 'nodequeue_arrange_subqueue_form') {
      $entity_type = 'node';
      if (in_array($entity_type, $purge_entities) && $purge_entities[$entity_type] != FALSE) {
        $form['#entity_type'] = 'node';
        // Add purge to default submit button.
        if (isset($form['actions']['submit']['#submit'])) {
          $form['actions']['submit']['#submit'][] = '_cache_purger_purge_form_submit';
        }
        if (isset($form['#submit'])) {
          $form['#submit'][] = '_cache_purger_purge_form_submit';
        }
      }
    }
  }
}

/**
 * Purges the current node and homepage from Varnish.
 */
function _cache_purger_purge_form_submit(&$form, &$form_state) {
  // Submit handler for node_form submit if 'Save and Purge' was clicked.
  $entity_type = $form['#entity_type'];
  _cache_purger_entity_purge($entity_type);
}

/**
 * Blocks/Views cache invalidation based on entity type.
 */
function _cache_purger_entity_purge($type) {
  if (variable_get('cache_purger_purge_blocks', 0)) {
    $purge_entities = variable_get('cache_purger_purge_entities', array());
    if (!is_null($type) && in_array($type, $purge_entities) && $purge_entities[$type] != FALSE) {
      // Clear cache block.
      if (module_exists('block')) {
        cache_clear_all('*', 'cache_block', TRUE);
      }

      // Clear cache views.
      if (module_exists('views')) {
        cache_clear_all('*', 'cache_views', TRUE);
        cache_clear_all('*', 'cache_views_data', TRUE);
      }
      drupal_set_message(t('Purged block caches.'));
    }
  }
}

/*
 * Helper to get the cache data and print it.
 */
function cache_purger_cache_get($key, $bin = 'cache_block') {
  if (user_access('purge blocks cache')) {
    $cache = cache_get($key, $bin);
    echo $key . ' on ' . $bin . PHP_EOL;
    if (isset($cache->data)) {
      echo '<pre>';
      print_r($cache->data);
    }
    else {
      echo t('Not found');
    }
    echo '<br>';
  }
}

/**
 * Purges caches.
 *
 * @param string $module
 * @param string $delta
 */
function cache_purger_purge($module, $delta) {
  if (user_access('purge blocks cache')) {
    // List of items to clear.
    $cache_tables = array();
    if (module_exists('block')) {
      $cache_tables[] = 'cache_block';
    }
    if (module_exists('views')) {
      $cache_tables[] = 'cache_views_data';
    }
    if (module_exists('menu')) {
      $cache_tables[] = 'cache_menu';
    }

    foreach ($cache_tables as $key => $bin) {
      switch ($bin) {
        case 'cache_block':
          $cid = $module . ':' . $delta;
          break;
        case 'cache_views_data':
          $cid = $module . ':' . str_replace('-', ':', $delta);
          break;
        case 'cache_menu':
          $cid = 'links:' . $delta;
          break;
      }

      // Clear cache.
      cache_clear_all($cid, $bin, TRUE);
    }
    $message = t('Purged: @module-@delta', array('@module' => $module, '@delta' => $delta));
  }
  else {
    $message = t('Access denied.');
  }
  echo json_encode(array('result' => $message));
  drupal_exit();
}

/*
 * Implements hook_install();
 */
function cache_purger_install() {
  db_update('system')
    ->fields(array('weight' => 5))
    ->condition('name', 'cache_purger', '=')
    ->execute();
}

/*
 * Implements hook_update().
 */
function cache_purger_update_7001() {
  db_update('system')
    ->fields(array('weight' => 5))
    ->condition('name', 'cache_purger', '=')
    ->execute();
}
