<?php
/**
 * @file
 *
 * Work around flags access handling to allow a message to be shown for anonymous users.
 *
 * The module overwrites access to the flag when no action is present in the access check,
 * this allows us to show the link in views for example. The output is then reset in a preprocess call.
 *
 * Since flag module performs a more complex access check in its hook_link implementation this module
 * provides an alternative hook_link.
 */

/**
 * Implementation of hook_form_alter().
 * Adding the configuration forms to the flag settings form.
 */
function flag_anon_form_alter(&$form, $form_state, $form_id) {
  if ('flag_form' == $form_id) {
    $form['flag_anon'] = array(
      '#type' => 'fieldset',
      '#title' => t('Flag Anonymous settings'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['flag_anon']['anon_display'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display login link for anonymous users.'),
      '#default_value' => isset($form['#flag']->anon_display) ? $form['#flag']->anon_display : 0,
    );
    $form['flag_anon']['anon_message'] = array(
      '#type' => 'textfield',
      '#title' => t('Anonymous link text'),
      '#default_value' => isset($form['#flag']->anon_message) ? $form['#flag']->anon_message : '',
      '#description' => t('The text displayed when anonymous user views the flag. For example, "Please [login] to bookmark this post". Use [login] for the login link and [register] for the registration link. Alternatively, use [login-url] and [register-url] for the URLs alone. HTML is allowed.'),
    );
    $form['#validate'][] = 'flag_anon_flag_form_validate';
  }
}

function flag_anon_flag_form_validate($form, &$form_state) {
  if ($form_state['values']['anon_display']) {
    if (!empty($form_state['values']['roles']['flag'][DRUPAL_ANONYMOUS_RID])) {
      form_set_error('anon_display', t("You chose to display a login link for anonymous users, but you also allow anonymous users to use this flag. They don't need to log in to use it."));
    }
    elseif (empty($form_state['values']['anon_message'])) {
      form_set_error('anon_message', t('You must type some text for the anonymous link if you want to display it.'));
    }
  }
}

/**
 * Implementation of hook_flag_options_alter().
 * Adding our own options to the main flag object regardless of its type.
 */
function flag_anon_flag_options_alter(&$options, $flag) {
  $options['anon_display'] = '';
  $options['anon_message'] = '';
}

/**
 * Implements hook_flag_access_multiple().
 *
 * Grant access to the flag is the user is anonymous. We do this to allow the flag to show
 * up in Views. We don't really grant access though, flagging action access is determined
 * via the hook_flag_access which we don't grant.
 */
function flag_anon_flag_access_multiple($flag, $entity_ids, $account) {
  if ($flag->anon_display && $account->uid == 0) {
    foreach ($entity_ids as $id => $action) {
      $access[$id] = TRUE;
    }
    return $access;
  }
  else {
    return array();
  }
}

/**
 * Implements hook_link().
 *
 * This hook does not exist in Drupal 7, it is called from flag_anon_node_view() and
 * flag_anon_comment_view() functions.
 */
function flag_anon_link($type, $object = NULL, $teaser = FALSE) {
  if (!isset($object) || !flag_fetch_definition('node')) {
    return;
  }
  global $user;
  // We only take care of anonymous users.
  if ($user->uid) {
    return;
  }
  // Get all possible flags for this content-type.
  $flags = flag_get_flags($type);
  foreach ($flags as $flag) {
    if (!$flag->anon_display) {
      // Flag is configured to show for anonymous.
      continue;
    }
    if (!$flag->shows_in_entity_links($teaser)) {
      // Flag is not configured to show its link here.
      continue;
    }
    if (!$flag->applies_to_entity($object)) {
      // Flag does not apply to this content.
      continue;
    }
    $entity_id = $flag->get_entity_id($object);
    $links['flag-anon-'. $flag->name] = array(
      'title' => $flag->theme('flag', $entity_id),
      'html' => TRUE,
    );
  }
  if (isset($links)) {
    return $links;
  }
}

/**
 * Implements hook_node_view().
 */
function flag_anon_node_view($node, $view_mode, $langcode) {
  $links = flag_anon_link('node', $node, $view_mode);
  $node->content['links']['flag'] = array(
    '#theme' => 'links__node__flag',
    '#links' => $links,
    '#attributes' => array('class' => array('links', 'inline')),
  );
}

/**
 * Implements hook_comment_view().
 */
function flag_anon_comment_view($comment) {
  $links = flag_anon_link('comment', $comment);
  $comment->content['links']['flag'] = array(
    '#theme' => 'links',
    '#links' => $links,
    '#attributes' => array('class' => array('links', 'inline')),
  );
}

/**
 * Implements hook_user_view().
 */
function flag_anon_user_view($account, $view_mode) {
  $flags = flag_get_flags('user');
  $flag_items = array();
  foreach ($flags as $flag) {
    if (!$flag->show_on_profile) {
      // User has no permission to use this flag.
      continue;
    }
    if (!$flag->shows_in_entity_links($view_mode)) {
      // Flag not set to appear on profile.
      continue;
    }
    $flag_items[$flag->name] = array(
      '#type' => 'user_profile_item',
      '#title' => $flag->get_title($account->uid),
      '#markup' => $flag->theme('flag', $account->uid),
      '#attributes' => array('class' => array('flag-profile-' . $flag->name)),
    );
  }
  if (!empty($flag_items)) {
    $account->content['flags'] = $flag_items;
    $account->content['flags'] += array(
      '#type' => 'user_profile_category',
      '#title' => t('Actions'),
      '#attributes' => array('class' => array('flag-profile')),
    );
  }
}

/**
 * A utility function for outputting a flag link.
 *
 * You should call this function from your template when you want to put the
 * link on the page yourself. For example, you could call this function from
 * your 'node.tpl.php':
 *
 *   <?php print flag_anon_create_link('bookmarks', $node->nid); ?>
 *
 * @param $flag_name
 *   The "machine readable" name of the flag; e.g. 'bookmarks'.
 * @param $entity_id
 *   The content ID to check for flagging. This is usually a node ID.
 */
function flag_anon_create_link($flag_name, $entity_id) {
  global $user;
  // In case of authenticated user we fall back to the core create link function.
  if ($user->uid) {
    return flag_create_link($flag_name, $entity_id);
  }
  else {
    $flag = flag_get_flag($flag_name);
    if (!$flag) {
      // Flag does not exist.
      return;
    }
    return $flag->theme('flag', $entity_id);
  }
}

/**
 * Since we overwrote the access handling we must overwrite the output as well, to actually respect the real settings.
 */
function flag_anon_preprocess_flag(&$variables) {
  $flag =& $variables['flag'];
  $action = $variables['action'];
  $entity_id = $variables['entity_id'];
  // We don't need to check for anonymous users having actual access to this flag, since
  // we excluded that option in the flag configuration validation stage.
  if ($GLOBALS['user']->uid == 0) {
    $variables['link_href']= '';
    $link = _flag_anon_link($flag, $entity_id);
    $variables['link_text'] = $link['title'];
  }
}

/**
 * Helper function to return just the message so that themes can use this.
 */
function _flag_anon_link($flag, $entity_id) {
  $link_options = array(
    'query' => drupal_get_destination(),
  );
  $tokens = array(
    '[login]' => l(t('login'), 'user/login', $link_options),
    '[login-url]' => check_url(url('user/login', $link_options)),
    '[register]' => l(t('register'), 'user/register', $link_options),
    '[register-url]' => check_url(url('user/register', $link_options)),
  );
  // Backward compatibility:
  $tokens['!login'] = $tokens['[login]'];
  $tokens['!register'] = $tokens['[register]'];
  return array(
    'title' => strtr($flag->get_label('anon_message', $entity_id), $tokens),
    'html' => TRUE,
  );
}
