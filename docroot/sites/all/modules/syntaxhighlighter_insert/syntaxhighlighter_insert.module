<?php
/**
 * @file
 * wysiwyg plugin hook.
 */

function syntaxhighlighter_insert_permission() {
  return array(
      'administer syntaxhighlighter insert settings' => array(
          'title' => t('administer syntaxhighlighter insert settings'),
          'description' => t('Administer syntaxhighlighter insert settings')),
      'use syntaxhighlighter insert' => array(
          'title' => t('use syntaxhighlighter insert'),
          'description' => t('Allows user to use the syntaxhighlighter insert module')),
      );
}

function syntaxhighlighter_insert_help($path, $arg){
  if($path == 'admin/help#syntaxhighlighter_insert'){
    $output = <<<EOT
    <h3>Description</h3>
    <p>This module allows you to insert syntaxhighlighter tags into a textarea. It supports both plain text and wysiwyg textareas.</p>
    <p>This module contains three modules:</p>
    <ul>
      <li>Syntaxhighlighter Insert: Provides general syntaxhighlighter insert functionality (e.g. permissions).</li>
      <li>Syntaxhighlighter Insert Text: Add a fieldset under the selected textarea (you can choose this when editing the field).</li>
      <li>Syntaxhighlighter Insert WYSIWYG: Adds an extra button to wysiwyg editors and opens a popup to select the syntaxhighlighter tag options to insert.</li>
    </ul>
    <h3>Dependencies</h3>
    <ul>
      <li>Syntaxhighlighter</li>
    </ul>
EOT;
  return $output;
  }

}

/**
 * Implements hook_form_alter().
 */
function syntaxhighlighter_insert_form_alter(&$form) {
  drupal_add_js(drupal_get_path('module', 'syntaxhighlighter_insert') . '/syntaxhighlighter_insert.utils.js', array('group' => JS_LIBRARY, 'weight' => -2));
  drupal_add_js(drupal_get_path('module', 'syntaxhighlighter_insert') . '/syntaxhighlighter_insert.js', array('group' => JS_LIBRARY, 'weight' => -1));
}

function syntaxhighlighter_insert_base_form(&$form, $name = 'wysiwyg') {
  $type = ($name == 'wysiwyg') ? 'wysiwyg' : 'text';
  $form["syntaxhighlighter_insert_{$type}_description_link"] = array(
    '#type' => 'markup',
    '#markup' => l(
      t('Show descriptions'),
      '#',
      array(
        'attributes' => array(
          'class' => array("syntaxhighlighter-insert-{$type}-description-link"),
          'id' => array("syntaxhighlighter-insert-{$type}-description-link-$name"),
        ),
      )
    ),
  );

  $form["syntaxhighlighter_insert_{$type}_title"] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('This will be displayed as the title above the code (optional).'),
    '#attributes' => array(
      'id' => array("syntaxhighlighter-insert-{$type}-title-$name"),
    ),
  );

  $path = _syntaxhighlighter_get_lib_location();
  if (!$path) {
    drupal_set_message(t('The syntaxhighlighter javascript library is not found. Consult <a href="!readme">README.txt</a> for help on how to install it, then <a href="!reload">reload</a> this page.',
                         array('!readme' => '/' . drupal_get_path('module', 'syntaxhighlighter') . '/README.txt',
                               '!reload' => '/admin/settings/syntaxhighlighter')),
                      'error');
    return array();
  }

  $brushes = array_filter(variable_get('syntaxhighlighter_enabled_languages', array('shBrushPhp.js')));
  $lang_options = _syntaxhighlighter_insert_brushes_to_options($brushes);
  $form["syntaxhighlighter_insert_{$type}_brush"] = array(
    '#type' => 'select',
    '#title' => t('Brush'),
    '#attributes' => array(
      'id' => array("syntaxhighlighter-insert-{$type}-brush-$name"),
    ),
    '#options' => $lang_options,
    '#description' => t('Select the code language to highlight'),
  );

  $form["syntaxhighlighter_insert_{$type}_auto_links"] = array(
    '#type' => 'checkbox',
    '#title' => t('Auto links'),
    '#description' => t('Allows you to turn detection of links in the highlighted element on and off. If the option is turned off, URLs won’t be clickable.'),
    '#attributes' => array(
      'id' => array("syntaxhighlighter-insert-{$type}-auto-links-$name"),
      'checked' => array('checked'),
    ),
  );

  $form["syntaxhighlighter_insert_{$type}_collapse"] = array(
    '#type' => 'checkbox',
    '#title' => t('Collapse'),
    '#description' => t('Allows you to force highlighted elements on the page to be collapsed by default.'),
    '#attributes' => array(
      'id' => array("syntaxhighlighter-insert-{$type}-collapse-$name"),
    ),
  );

  $form["syntaxhighlighter_insert_{$type}_html_script"] = array(
    '#type' => 'checkbox',
    '#title' => t('HTML script'),
    '#description' => t('Allows you to highlight a mixture of HTML/XML code and a script which is very common in web development. Setting this value to true requires that you have shBrushXml.js loaded and that the brush you are using supports this feature.'),
    '#attributes' => array(
      'id' => array("syntaxhighlighter-insert-{$type}-html-script-$name"),
    ),
  );

  $form["syntaxhighlighter_insert_{$type}_smart_tabs"] = array(
    '#type' => 'checkbox',
    '#title' => t('Smart tabs'),
    '#description' => t('Allows you to turn smart tabs feature on and off.'),
    '#attributes' => array(
      'id' => array("syntaxhighlighter-insert-{$type}-smart-tabs-$name"),
      'checked' => array('checked'),
    ),
  );

  $form["syntaxhighlighter_insert_{$type}_toolbar"] = array(
    '#type' => 'checkbox',
    '#title' => t('Toolbar'),
    '#description' => t('Toggles toolbar on/off.'),
    '#attributes' => array(
      'id' => array("syntaxhighlighter-insert-{$type}-toolbar-$name"),
      'checked' => array('checked'),
    ),
  );

  $form["syntaxhighlighter_insert_{$type}_class_name"] = array(
    '#type' => 'textfield',
    '#title' => t('Class name(s)'),
    '#description' => t('Allows you to add a custom class (or multiple classes) to every highlighter element that will be created on the page.'),
    '#attributes' => array(
      'id' => array("syntaxhighlighter-insert-{$type}-class-name-$name"),
    ),
  );

  $form["syntaxhighlighter_insert_{$type}_first_line"] = array(
    '#type' => 'textfield',
    '#title' => t('First line'),
    '#description' => t('Allows you to change the first (starting) line number.'),
    '#attributes' => array(
      'id' => array("syntaxhighlighter-insert-{$type}-first-line-$name"),
      'value' => array('1'),
    ),
  );

  $form["syntaxhighlighter_insert_{$type}_highlight"] = array(
    '#type' => 'textfield',
    '#title' => t('Highlight'),
    '#description' => t('Allows you to highlight one or more lines to focus user’s attention. When specifying as a parameter, you have to pass an array looking value, like [1, 2, 3] or just an number for a single line.'),
    '#attributes' => array(
      'id' => array("syntaxhighlighter-insert-{$type}-highlight-$name"),
    ),
  );

  $form["syntaxhighlighter_insert_{$type}_tab_size"] = array(
    '#type' => 'textfield',
    '#title' => t('Tab size'),
    '#description' => t('Allows you to adjust tab size.'),
    '#attributes' => array(
      'id' => array("syntaxhighlighter-insert-{$type}-tab-size-$name"),
      'value' => array('4'),
    ),
  );


  $form["syntaxhighlighter_insert_{$type}_tag"] = array(
    '#type' => 'hidden',
    '#attributes' => array(
      'id' => array("syntaxhighlighter-insert-{$type}-tag-$name"),
      'value' => array(variable_get('syntaxhighlighter_tagname', 'pre')),
    ),
  );
}

function _syntaxhighlighter_insert_brushes_to_options($brushes) {
  $keys = array_map('_syntaxhighlighter_brush_option_key', $brushes);
  return array_map('strtoupper', array_change_key_case(drupal_map_assoc(array_values($keys))));
}

function _syntaxhighlighter_brush_option_key($brush) {
  return strtolower(substr(basename($brush, '.js'), 7));
}
