<?php

module_load_include('inc', 'sauce', 'includes/sauce.navigation');
//module_load_include('inc', 'sauce', 'includes/sauce.validate');
module_load_include('inc', 'sauce', 'includes/sauce.submit');

/**
 * Implements hook_menu().
*/
function sauce_menu() {
  $items = array();
  /*  $items['admin/sauce'] = array(
   'title' => 'Add Sauce',
      'description' => 'Install Addons.',
      'page callback' => 'admin_sauce_form',
      'access arguments' => array('install sauce addons'),
  );*/
  $items['sauce/import/%'] = array(
      'title' => 'Install Status',
      'page callback' => 'sauce_import_callback',
      'page arguments' => array(2),
      'access arguments' => array('install sauce addons'),
      'type' => MENU_CALLBACK,
  );
  $items['admin/sauce'] = array(
      'title' => 'Sauce',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sauce_form'),
      'access arguments' => array('install sauce addons'),
      'file' => 'includes/sauce.form.inc',
      'weight' => -50,
      'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/sauce/search'] = array(
      'title' => 'Search & Install',
      'access arguments' => array('install sauce addons'),
      'weight' => -50,
      'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/sauce/list'] = array(
      'title' => 'List',
      'description' => 'Get a full list of your installed addons.',
      'page callback' => 'sauce_addons_list',
      'access arguments' => array('install sauce addons'),
      'weight' => -45,
      'type' => MENU_LOCAL_TASK,
  );
  $items['admin/sauce/updates'] = array(
      'title' => 'Available updates',
      'description' => 'Get a status report about available updates for your installed addons.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sauce_update_status'),
      'access arguments' => array('install sauce addons'),
      'weight' => -40,
      'type' => MENU_LOCAL_TASK,
  );
  $items['admin/sauce/backups'] = array(
      'title' => 'Backups',
      'description' => 'Backups of updated addons.',
      'page callback' => 'sauce_update_backups',
      'access arguments' => array('install sauce addons'),
      'weight' => 0,
      'type' => MENU_LOCAL_TASK,
  );
  $items['admin/sauce/updates/check'] = array(
      'title' => 'Manual update check',
      'page callback' => 'sauce_update_manual_status',
      'access arguments' => array('install sauce addons'),
      'type' => MENU_CALLBACK,
  );
  $items['admin/sauce/restore/%/%'] = array(
      'title' => 'Manual update check',
      'page callback' => 'sauce_update_restore',
      'page arguments' => array(3,4),
      'access arguments' => array('install sauce addons'),
      'type' => MENU_CALLBACK,
  );
  return $items;
}

function sauce_cron() {
  //cleanup of deleted addons in sauce & sauce_backups tables.
  //also if a view is deleted, remove it from views_stylizer table.
}

function sauce_update_restore($gid, $version){
  $query = db_select('sauce_backups', 'sb')
  ->fields('sb')
  ->condition('gid', $gid)
  ->condition('installed_version', $version);
  $result = $query->execute();
  $record = $result->fetchAssoc();
  //dsm($record);
  $addon_type_id = $record['type'];
  switch ($addon_type_id){
    case 5:
      //dynamic_fieldable_content
      $backup_query = "SELECT * FROM {dynamic_fieldable_content} WHERE name = :name LIMIT 1";
      $backup_addon = db_query($backup_query, array(':name' => $record['new_id']))->fetchAssoc();
      db_update('dynamic_fieldable_content')
      ->fields(array(
      'admin_title' => $backup_addon['admin_title'],
      'admin_description' => $backup_addon['admin_description'],
      'category' => $backup_addon['category'],
      'settings' => $backup_addon['settings'],
      ))
      ->condition('name', $record['old_id'])
      ->execute();

      //delete corresponding backup
      db_delete('dynamic_fieldable_content')
      ->condition('name', $record['new_id'])
      ->execute();
      break;
    case 17:
      //View
      $old_view_vid = db_select("views_view", "vv")
      ->fields("vv", array("vid"))
      ->condition("name", $record['old_id'])
      ->execute()
      ->fetchField();
      $backup_query = "SELECT * FROM {views_view} WHERE name = :name LIMIT 1";
      $backup_addon = db_query($backup_query, array(':name' => $record['new_id']))->fetchAssoc();
      db_update('views_view')
      ->fields(array(
      'description' => $backup_addon['description'],
      'tag' => $backup_addon['tag'],
      'base_table' => $backup_addon['base_table'],
      'human_name' => $backup_addon['human_name'],
      'core' => $backup_addon['core'],
      ))
      ->condition('name', $record['old_id'])
      ->execute();
      
      $query = db_select("views_display", "vd")
      ->fields("vd")
      ->condition("vid", $backup_addon['vid']);
      $result = $query->execute();
      while($new_record = $result->fetchAssoc()) {
        db_update('views_display')
        ->fields(array(
        'display_title' => $new_record['display_title'],
        'display_plugin' => $new_record['display_plugin'],
        'position' => $new_record['position'],
        'display_options' => $new_record['display_options'],
        ))
        ->condition('vid', $old_view_vid)
        ->condition('id', $new_record['id'])
        ->execute();
      }
      
      //delete corresponding backup
      db_delete('views_view')
      ->condition('name', $record['new_id'])
      ->execute();
      db_delete('views_display')
      ->condition('vid', $backup_addon['vid'])
      ->execute();
      break;
    default:
      // dsm("default");
      break;
  }
  //also update sauce table
  db_update('sauce')
  ->fields(array(
  'id' => $record['old_id'],
  'installed_version' => $record['installed_version'],
  ))
  ->condition('gid', $record['gid'])
  ->execute();
  
  //delete corresponding backup
  db_delete('sauce_backups')
  ->condition('new_id', $record['new_id'])
  ->execute();
  
  drupal_set_message("Restored ".$record['old_id']);
  drupal_goto("admin/sauce/backups");
}

function sauce_addons_list() {
  $header = array(t('Title'), t('Type'), t('Version'), t('Configuration'));
  $rows = array();
  $query = db_select('sauce', 's')
  ->fields('s');
  $result = $query->execute();
  while($record = $result->fetchAssoc()) {
    $addon_type = sauce_get_addon_type_name($record['type']);
    $local_config = ""; 
    switch ($record['type']){
      case 5:
        //dynamic_fieldable_content
        $local_config = '<li>'.l(t('Configure'), 'admin/structure/dynamic-content/list/'.$record['id'].'/edit').'</li>';
        break;
      case 17:
        //View
        $local_config = '<li>'.l(t('Edit'), 'admin/structure/views/view/'.$record['id'].'/edit').'</li>';
        break;
      case 61:
        //context
        $local_config = '<li>'.l(t('Configure'), 'admin/structure/context/list/'.$record['id'].'/edit').'</li>';
        break;
      case 62:
        //joyride tour
        $local_config = '<li>'.l(t('Configure'), 'admin/structure/context/list/'.$record['id'].'/edit').'</li>';
        break;
    }
    $rows[] = array(
        $record['id'],
        $addon_type,
        $record['installed_version'],
        '<ul>'.$local_config.$record['config'].'</ul>',
    );
  }
  if(count($rows) < 1){
    return "No addons.";
  }
  $output = theme('table', array('header' => $header, 'rows' => $rows));
  return $output;
}

function sauce_update_backups() {
  $header = array(t('Title'), t('Type'), t('Version'), t('Edit'), t('Restore'));
  $rows = array();
  $query = db_select('sauce_backups', 'sb')
  ->fields('sb');
  $result = $query->execute();
  while($record = $result->fetchAssoc()) {
    $addon_type = sauce_get_addon_type_name($record['type']);
    $local_config = "";
    switch ($record['type']){
      case 5:
        //dynamic_fieldable_content
        $local_config = l(t('Configure'), 'admin/structure/dynamic-content/list/'.$record['old_id'].'/edit');
        break;
      case 17:
        //View
        $local_config = l(t('Edit'), 'admin/structure/views/view/'.$record['old_id'].'/edit');
        break;
    }
    $rows[] = array(
          $record['old_id'],
          $addon_type,
          $record['installed_version'],
          $local_config,
          l("Restore","admin/sauce/restore/".$record['gid']."/".$record['installed_version']),
      );
  }
  if(count($rows) < 1){
    return "No backups.";
  }
  $output = theme('table', array('header' => $header, 'rows' => $rows));
  return $output;
}

function sauce_update_manual_status() {
  $query = db_select('sauce', 's')
  ->fields('s',array('gid'));
  $result = $query->execute();
  $all_addons = array();
  while($record = $result->fetchAssoc()) {
    $all_addons[]=$record['gid'];
  }
  //dsm($all_addons);
  if(!empty($all_addons)){
    $rpc_result = xmlrpc('http://drupalsauce.technikh.com/xmlrpc.php', array(
        'sauce.process_updates_check_request' => array($all_addons),
    ));
    $json_decoded = drupal_json_decode($rpc_result);
   // dsm($json_decoded);
    foreach ($json_decoded as $addon){
      db_update('sauce')
      ->fields(array(
      'available_version' => $addon['field_addon_version_value'],
      ))
      ->condition('gid', $addon['entity_id'])
      ->execute();
    }
  }else{
    drupal_set_message("no Addons to Check");
  }
  variable_set('sauce_update_last_check', time());
  drupal_goto("admin/sauce/updates");
}

function sauce_get_addon_type_name($type_id){
  $addon_type="Addon";
  switch ($type_id){
    case 1:
      $addon_type = "Module";
      break;
    case 2:
      $addon_type = "Theme";
      break;
    case 3:
      $addon_type = "Library";
      break;
    case 4:
      $addon_type = "Drulenium";
      break;
    case 5:
      $addon_type = "Widget";
      break;
    case 17:
      $addon_type = "View";
      break;
    default:
      break;
  }
  return $addon_type;
}

function sauce_update_status($form, $form_state) {
  $query = db_select('sauce', 's')
  ->fields('s')
  ->where ('s.available_version > s.installed_version', array());
  $result = $query->execute();
  $options = array();
  while($record = $result->fetchAssoc()) {
    //  dsm($record);
    $addon_type = sauce_get_addon_type_name($record['type']);
    $options[$record['gid']]=array(
        'title' => $record['id'],
        'type' => $addon_type,
        'installed_version' => $record['installed_version'],
        'available_version' => $record['available_version'],
    );
  }
  $header = array(
      'title' => t('Title'),
      'type' => t('Type'),
      'installed_version' => t('Installed Version'),
      'available_version' => t('Available Version'),
  );
  
  $last = variable_get("sauce_update_last_check");
  $output = '<div class="update checked">';
  $output .= $last ? t('Last checked: @time ago', array('@time' => format_interval(REQUEST_TIME - $last))) : t('Last checked: never');
  $output .= ' <span class="check-manually">(' . l(t('Check manually'), 'admin/sauce/updates/check', array('query' => drupal_get_destination())) . ')</span>';
  $output .= "</div>\n";
  
  $form['last_checked_markup'] = array(
      '#markup' => $output,
  );
  $form['sauce_update_table'] = array(
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => $options,
      '#empty' => t('No updates found for your Addons.'),
  );
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
  );
  return $form;
}

function sauce_update_status_submit($form , $form_state) {
  $enabled = array_filter($form_state['values']['sauce_update_table']);
//  dsm($form_state);
//  dsm($form);
  $selected_addons = "";
  $result = xmlrpc('http://drupalsauce.technikh.com/xmlrpc.php', array(
      'sauce.process_updates_download_request' => array($enabled),
  ));
  $config_markup = sauce_install_from_json($result);
  //dsm($config_markup);
  foreach ($enabled as $gid){
    $selected_addons .= $form['sauce_update_table']['#options'][$gid]['title'].", ";
  }
  $selected_addons = trim($selected_addons," ");
  $selected_addons = trim($selected_addons,",");
  if(!empty($selected_addons)){
    drupal_set_message("Updated ".$selected_addons);
  }
}

/**
 * Implements hook_form_alter().
 */
function sauce_form_block_admin_configure_alter1(&$form, &$form_state, $form_id) {
  dsm($form);
  $module = $form['module']['#value'];
  $delta = $form['delta']['#value'];
  $data = array(
      "module" => $module,
      "delta" => $delta,
  );
  $form['contact_information'] = array(
  
      '#markup' => dynamic_fieldable_content_blocks_stylizer_blocks($data),
      '#weight' => 0,
  
  );
}

function sauce_block_view_alter1(&$data, $block) {

  if ($block->module == 'system' && $block->delta == 'main-menu') {
    dsm($block);
    dsm($data);
    ctools_include('content');
    
    $type = "dynamic_content_pane";
    $subtype = "jquery_menu_flip";
    $conf = array(
        'admin_title' => '',
        'title' => '',
        'body' => '',
        'format' => filter_default_format(),
        'substitute' => TRUE,
    );
    $keywords = array();
    $contexts = array();
    $arguments = array();
    $ctools_data = ctools_content_render($type, $subtype, $conf, $keywords, $arguments, $contexts);
    $data['content']['#suffix'] = $ctools_data->content;
  }
}

function dynamic_fieldable_content_blocks_stylizer_blocks($vars = array()) {
  $vars['links']['dynamic_fieldable_content'] = array(
      'title' => l(t('Dynamic content'), 'admin/structure/dynamic-content/add'),
      'description' => t('Custom content panes are basic HTML you enter that can be reused in all of your panels.'),
  );

  // Load all mini panels and their displays.
  ctools_include('export');
  $items = ctools_export_crud_load_all('dynamic_fieldable_content');
  $count = 0;
  $rows = array();
  $destination_path_arr = drupal_get_destination();
  $destination_path = str_replace('/', "#*", $destination_path_arr['destination']);$destination_path_arr['destination'];

  foreach ($items as $item) {
    $rows[] = array(
        check_plain($item->admin_title),
        array(
            'data' => l(t('Apply'), "views-stylize/".$vars['module']."/".$vars['delta']."/".$item->name."/".$destination_path),
            'class' => 'links',
        ),
    );

    // Only show 10.
    if (++$count >= 10) {
      break;
    }
  }

  if ($rows) {
    $content = theme('table', array('rows' => $rows, 'attributes' => array('class' => 'panels-manage')));
  }
  else {
    $content = '<p>' . t('There are no custom content panes.') . '</p>';
  }

  $vars['blocks']['dynamic_fieldable_content'] = array(
      'title' => t('Manage dynamic content'),
      'link' => l(t('Go to list'), 'admin/structure/dynamic-content'),
      'content' => $content,
      'class' => 'dashboard-content',
      'section' => 'right',
  );
  //dsm($content);
  return $vars['blocks']['dynamic_fieldable_content']['content'];
}

/**
 * Form builder function for sauce admin.
 */
function admin_sauce_form($form= NULL, &$form_state = NULL) {
  if (!isset($form_state['stage'])) $form_state['stage'] = 'sauce_install';
  switch ($form_state['stage']) {
     
    case 'sauce_install':
      return admin_sauce_install_form($form, $form_state);
      break;

    case 'sauce_configure':
      return admin_sauce_configure_form($form, $form_state);
      break;
  }
   
  return $form;

}

function admin_sauce_install_form($form, &$form_state) {
  $sauce_markup = '<script>(function ($) {
      function receiveMessage(event)
      {
      if (event.origin !== "http://drupalsauce.technikh.com")
      return;
      var addon_nid = event.data;
      // alert("addon_nid: "+addon_nid);
      $("#edit-sauce-installed-item-id").val(addon_nid);
      $("#edit-submit").click();
      /*     $.post("/sauce/import/"+addon_nid, function(data) {
      alert("data recieved: "+data);
      $("#edit-sauce-installed-item-id").val(data);
      // $("#edit-submit").click();
});
      */
}
      window.addEventListener("message", receiveMessage, false);
}(jQuery));</script>';
  $sauce_markup .= '<iframe src="http://drupalsauce.technikh.com/" width="100%" height="500px"></iframe>';
  $form['sauce_iframe'] = array(
      '#markup' => $sauce_markup,
  );
  $form['sauce_installed_item_id'] = array(
      '#type' => 'textfield',
      '#title' => t('ID'),
      '#default_value' => '',
  );
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Install'),
  );
  return $form;
}

function admin_sauce_form_submit($form, &$form_state) {
  dsm($form_state);
  $download_id = $form_state['values']['sauce_installed_item_id'];
  dsm($download_id);
  $json_return_object = drupal_http_request("http://drupalsauce.technikh.com/node/".$download_id.".json");
  //$return_object = drupal_http_request("http://drupalsauce.technikh.com/sauce/script/".$id);
  $json = $json_return_object->data;
  $json_decoded = drupal_json_decode($json);

  $addon_type_id = $json_decoded['field_addon_type']['id'];
  $addon_id = $json_decoded['field_addon_id'];
  $import_code = $json_decoded['field_install_script'];

  switch ($addon_type_id){
    case 2:
      //theme
      dsm("theme");
      if(empty($import_code)){
        // drush dl $addon_id
        dsm("drush dl");
        // $output = shell_exec('cd sites/default;'.' drush dl '.$addon_id.';'.' drush en '.$addon_id.' -y');
        dsm($output);
      }

      break;
  }
  dsm($json_decoded);
  drupal_set_message('Installed.');
}

/**
 * Implements hook_permission().
 */
function sauce_permission() {
  return array(
      'install sauce addons' => array(
          'title' => t('Install Sauce Addons'),
          'description' => t('Users with ths perission will be able to install modules.'),
      ),
  );
}

function sauce_import_callback($id) {
  $json_return_object = drupal_http_request("http://drupalsauce.technikh.com/node/".$id.".json");
  //$return_object = drupal_http_request("http://drupalsauce.technikh.com/sauce/script/".$id);
  $json = $json_return_object->data;
  $json_decoded = drupal_json_decode($json);

  $import_code = $json_decoded['field_install_script'];
  // dsm($json_decoded);


  //print_r($return_object);
  //print($import_code);
  module_load_include('inc', 'ctools', 'includes/export');
  $item = ctools_export_crud_import('ctools_custom_content', $import_code);
  ctools_export_crud_save('ctools_custom_content', $item);
  $cid = $item->cid;

  foreach($json_decoded['field_addon_settings_form'] as $uri_value){
    $settings_form_uri = $uri_value['uri'];
    //dsm($settings_form_uri);
    //http://drupalsauce.technikh.com/field_collection_item/1.json
    $field_collection_json_return_object = drupal_http_request($settings_form_uri.".json");
    $field_collection_json_decoded = drupal_json_decode($field_collection_json_return_object->data);
    $field_settings_form_label = $field_collection_json_decoded['field_settings_form_label'];
    $field_settings_form_id = $field_collection_json_decoded['field_settings_form_id'];
    $field_settings_form_type = $field_collection_json_decoded['field_settings_form_type'];

    db_insert('sauce_panels_pane_settings') // Table name no longer needs {}
    ->fields(array(
    'label' => $field_settings_form_label,
    'machineid' => $field_settings_form_id,
    'type' => $field_settings_form_type,
    'cid' => $cid,
    ))
    ->execute();
  }
  print $cid;
  //print_r($item);
  //dsm($item);

}

/**
 * Helper function to download a project. This code is mostly copied and pasted from
 * modules/update/update.manager.inc
 *
 * There were no suitable functions that could be used besides
 * drupal_form_submit('update_manager_install_form', $form_state, $project['type']);
 * and it wouldn't work because this is being run from a Batch function
 *
 * @todo - Ideally, this should be in the update module as a standalone function,
 * to reduce coupling and duplication
 */
function sauce_download_project($url, $islibrary = FALSE) {
  module_load_include('inc', 'update', 'update.manager');
  // Download the file
  $local_cache = update_manager_file_get($url);
  if (!$local_cache) {
    return array(
        'success' => FALSE,
        'message' => t('Unable to retrieve Drupal project from %url.', array('%url' => $url)),
    );
  }

  // Try to extract it
  $directory = _update_manager_extract_directory();
  // dsm("before extract");
  //  watchdog("sauce", $directory);
  try {
    $archive = update_manager_archive_extract($local_cache, $directory);
  }
  catch (Exception $e) {
    return array(
        'success' => FALSE,
        'message' => $e->getMessage(),
    );
  }
  //  dsm("after extract");
  //  watchdog("sauce", $directory);
  $files = $archive->listContents();
  if (!$files) {
    return array(
        'success' => FALSE,
        'message' => t('Provided archive contains no files.'),
    );
  }

  $project = strtok($files[0], '/\\');
  if($islibrary == TRUE){
    $project_location = $directory . '/' . $project;
  }
  if($islibrary == FALSE){
    $archive_errors = update_manager_archive_verify($project, $local_cache, $directory);
    if (!empty($archive_errors)) {
      if (!empty($archive_errors)) {
        foreach ($archive_errors as $error) {
          drupal_set_message(check_plain($error), 'error');
        }
      }
      return array(
          'success' => FALSE,
          'message' => array_shift($archive_errors),
      );
    }


    // Make sure the Updater registry is loaded.
    drupal_get_updaters();

    $project_location = $directory . '/' . $project;
    // watchdog("sauce", $project_location);
    try {
      $updater = Updater::factory($project_location);
    }
    catch (Exception $e) {
      return array(
          'success' => FALSE,
          'message' => $e->getMessage(),
      );
    }
  }
  // watchdog("sauce", $project_location);
  if($islibrary == FALSE){
    try {
      $project_title = Updater::getProjectTitle($project_location);
    }
    catch (Exception $e) {
      return array(
          'success' => FALSE,
          'message' => $e->getMessage(),
      );
    }

    //  dsm($updater);
    // watchdog("sauce", $project_location);
    if ($updater->isInstalled()) {
      return array(
          'success' => FALSE,
          'message' => t('%project is already installed.', array('%project' => $project_title)),
      );
    }
  }
  $project_real_location = drupal_realpath($project_location);
  // watchdog("sauce", $project_real_location);
  $updater_name = get_class($updater);
  if($islibrary == TRUE){
    module_load_include('inc', 'update', 'update.authorize');

    $filetransfer = new FileTransferLocal(DRUPAL_ROOT);
    sauce_prepareInstallDirectory($filetransfer, $directory);
    // Copy the directory in place.
    $filetransfer->copyDirectory($project_real_location, '/home/dev.technikh.com/public_html/sites/all/libraries');
  }else{
    if (fileowner($project_real_location) == fileowner(conf_path())) {
      module_load_include('inc', 'update', 'update.authorize');
      $filetransfer = new FileTransferLocal(DRUPAL_ROOT);
      // Initialize some variables in the Batch API $context array.
      $updater = new $updater_name($project_real_location);
      try {
        if ($updater->isInstalled()) {
          // This is an update.
          $tasks = $updater->update($filetransfer);
        }
        else {
          $tasks = $updater->install($filetransfer);
        }
      }
      catch (UpdaterException $e) {
        return array(
            'success' => FALSE,
            'message' => t('Error installing / updating. Error: @error', array('@error' => $e->getMessage())),
        );
      }
      // dsm($updater);
    }
    else {
      return array(
          'success' => FALSE,
          'message' => t('Permissions are not set up properly.fileowner($project_real_location)'.$project_real_location.fileowner($project_real_location).' ; fileowner(conf_path())'.conf_path().fileowner(conf_path())),
      );
    }
  }
  return array(
      'success' => TRUE,
  );
}

function sauce_updater_info_disabled() {
  //watchdog("sauce_updater_info","  sauce_updater_info");
  return array(
      'library' => array(
          'class' => 'LibraryUpdater',
          'name' => t('Update Library'),
          'weight' => 0,
      ),
  );
}

function sauce_prepareInstallDirectory(&$filetransfer, $directory) {
  // Make the parent dir writable if need be and create the dir.
  if (!is_dir($directory)) {
    $parent_dir = dirname($directory);
    if (!is_writable($parent_dir)) {
      @chmod($parent_dir, 0755);
      // It is expected that this will fail if the directory is owned by the
      // FTP user. If the FTP user == web server, it will succeed.
      try {
        $filetransfer->createDirectory($directory);
        $this->makeWorldReadable($filetransfer, $directory);
      }
      catch (FileTransferException $e) {
        // Probably still not writable. Try to chmod and do it again.
        // @todo: Make a new exception class so we can catch it differently.
        try {
          $old_perms = substr(sprintf('%o', fileperms($parent_dir)), -4);
          $filetransfer->chmod($parent_dir, 0755);
          $filetransfer->createDirectory($directory);
          $this->makeWorldReadable($filetransfer, $directory);
          // Put the permissions back.
          $filetransfer->chmod($parent_dir, intval($old_perms, 8));
        }
        catch (FileTransferException $e) {
          $message = t($e->getMessage(), $e->arguments);
          $throw_message = t('Unable to create %directory due to the following: %reason', array('%directory' => $directory, '%reason' => $message));
          throw new UpdaterException($throw_message);
        }
      }
      // Put the parent directory back.
      @chmod($parent_dir, 0555);
    }
  }
}

function sauce_install_from_json($json_result){
  $json_decoded = drupal_json_decode($json_result);
  // dsm($json_decoded);
  $sauce_config_markup = '';
  $module_list = array();
  $theme_list = array();
  //loop through each addon
  $flag_clear_cache = FALSE;
  foreach($json_decoded as $nid => $node){
    $addon_title = $node['title'];
    $addon_type_id = $node['field_addon_type']['und'][0]['tid'];
    $addon_id = $node['field_addon_id']['und'][0]['value'];
    $addon_version = $node['field_addon_version']['und'][0]['value'];
    //$package_url = $node['field_addon_package_url']['und'][0]['url'];
    $package_url = (isset($node['field_addon_package_url']['und']) && is_array($node['field_addon_package_url']['und'])) ? $node['field_addon_package_url']['und'][0]['url'] : null;

    $addon_resources = (isset($node['field_addon_resources']['und']) && is_array($node['field_addon_resources']['und'])) ? $node['field_addon_resources']['und'] : array();
    $addon_resources_config_markup = "";
    foreach($addon_resources as $resource_link_array){
      $addon_resources_config_markup .= '<li>'.l(t($resource_link_array['title']), $resource_link_array['url'], array('attributes' => array('class' => array('config-link')))).'</li>';
    }

    $import_code = (isset($node['field_install_script']['und']) && is_array($node['field_install_script']['und'])) ? $node['field_install_script']['und'][0]['value'] : null;

    $sauce_query = "SELECT gid,id,installed_version FROM {sauce} WHERE gid = :nid LIMIT 1";
    $sauce_addon = db_query($sauce_query, array(':nid' => $node['nid']))->fetchAssoc();
    if(isset($sauce_addon['gid']) && !empty($sauce_addon['gid'])){
      if($addon_version > $sauce_addon['installed_version']){
    
        //backups
        $backup_addon_id = $sauce_addon['id']."__".$sauce_addon['installed_version'];
        //If backup_addon_id doesn't already exist in sauce_backups
        $existing_sid = db_select("sauce_backups", "sb")
        ->fields("sb", array("sid"))
        ->condition("new_id", $backup_addon_id)
        ->execute()
        ->fetchField();
        if(empty($existing_sid)){
          switch ($addon_type_id){
            case 5:
              //dynamic_fieldable_content
              $backup_query = "SELECT * FROM {dynamic_fieldable_content} WHERE name = :name LIMIT 1";
              $backup_addon = db_query($backup_query, array(':name' => $sauce_addon['id']))->fetchAssoc();
              db_insert('dynamic_fieldable_content')
              ->fields(array(
              'name' => $backup_addon_id,
              'admin_title' => $backup_addon['admin_title'],
              'admin_description' => $backup_addon['admin_description'],
              'category' => $backup_addon['category'],
              'settings' => $backup_addon['settings'],
              ))
              ->execute();
              break;
            case 17:
              //View
              $backup_query = "SELECT * FROM {views_view} WHERE name = :name LIMIT 1";
              $backup_addon = db_query($backup_query, array(':name' => $sauce_addon['id']))->fetchAssoc();
              $new_view_vid = db_insert('views_view')
              ->fields(array(
                  'name' => $backup_addon_id,
                  'description' => $backup_addon['description'],
                  'tag' => $backup_addon['tag'],
                  'base_table' => $backup_addon['base_table'],
                  'human_name' => $backup_addon['human_name'],
                  'core' => $backup_addon['core'],
              ))
              ->execute();
    
              $query = db_select("views_display", "vd")
              ->fields("vd")
              ->condition("vid", $backup_addon['vid']);
              $result = $query->execute();
              while($new_record = $result->fetchAssoc()) {
                db_insert('views_display')
                ->fields(array(
                'vid' => $new_view_vid,
                'id' => $new_record['id'],
                'display_title' => $new_record['display_title'],
                'display_plugin' => $new_record['display_plugin'],
                'position' => $new_record['position'],
                'display_options' => $new_record['display_options'],
                ))
                ->execute();
              }
              drupal_set_message(l(t('Edit & Save View: ').$sauce_addon['id'], 'admin/structure/views/view/'.$sauce_addon['id'].'/edit'));
              break;
            default:
              // dsm("default");
              break;
          }
    
          db_insert('sauce_backups')
          ->fields(array(
          'type' => $addon_type_id,
          'old_id' => $sauce_addon['id'],
          'new_id' => $backup_addon_id,
          'gid' => $node['nid'],
          'installed_version' => $sauce_addon['installed_version'],
          ))
          ->execute();
        }
      }
    }

    /*   $coma_seperated_fcid = '';
     $js_resources = (isset($node['field_addon_javascript_links']['und']) && is_array($node['field_addon_javascript_links']['und'])) ? $node['field_addon_javascript_links']['und'] : array();
    foreach($js_resources as $js_resource_link_array){
    $coma_seperated_fcid.= $js_resource_link_array['value'].',';
    }
    $css_resources = (isset($node['field_addon_css_links']['und']) && is_array($node['field_addon_css_links']['und'])) ? $node['field_addon_css_links']['und'] : array();
    foreach($css_resources as $css_resource_link_array){
    $coma_seperated_fcid.= $css_resource_link_array['value'].',';
    }
    $coma_seperated_fcid = trim($coma_seperated_fcid, ',');
    $result = xmlrpc('http://drupalsauce.technikh.com/xmlrpc.php', array(
        'sauce.process_field_collection_request' => array($coma_seperated_fcid),
    ));
    //dsm($result);
    $json_decoded = drupal_json_decode($result);
    foreach($json_decoded as $fcid => $fc_obj){
    if($fc_obj['field_download_locally']['und'][0]['value'] == 1){
    if($fc_obj['field_name'] == "field_addon_javascript_links"){
    $url = $fc_obj['field_addon_js_link']['und'][0]['url'];
    }elseif($fc_obj['field_name'] == "field_addon_css_links"){
    $url = $fc_obj['field_addon_css_link']['und'][0]['url'];
    }
    $dir_path = variable_get('file_public_path', conf_path() . '/files')."/sauce/{$addon_id}/";
    file_prepare_directory($dir_path, $options = FILE_CREATE_DIRECTORY);
    $new_path = system_retrieve_file($url, $destination = $dir_path, $managed = FALSE, $replace = FILE_EXISTS_REPLACE);
    //replace old path with new path in import_code.
    $import_code = str_replace($url, $new_path, $import_code);
    }
    } */

    switch ($addon_type_id){
      case 1:
        //module
        //   dsm("module");
        $return_msg = sauce_download_project($package_url);
        //  dsm($return_msg);
        if(isset($node['field_addon_drupal_project_ids']['und']) && !empty($node['field_addon_drupal_project_ids']['und'][0]['value'])){
          $prj_ids = $node['field_addon_drupal_project_ids']['und'][0]['value'];
          $prj_ids_array = explode(",",$prj_ids);
          foreach($prj_ids_array as $prj_id){
            $module_list[]=$prj_id;
          }
        }else{
          $module_list[]=$addon_id;
        }
        /*
        if(empty($import_code)){
        $import_code = "drush dl $addon_id\r\n";
        $import_code .= "drush en $addon_id -y";
        }
        $import_code_array = explode("\r\n",$import_code);
        dsm($import_code_array);
        foreach($import_code_array as $script_command){
        // drush dl $addon_id
        dsm("*$script_command*");
        $output = shell_exec($script_command);
        // $script_command1 = 'drush dl danland';
        //  $output = shell_exec($script_command1);
        dsm($output);
        }*/
        if(!empty($addon_resources_config_markup)){
          $sauce_config_markup .= '<fieldset class="form-wrapper"><legend><span class="fieldset-legend">'.$addon_title.'</span></legend><div class="fieldset-wrapper">
            <ul>'.$addon_resources_config_markup.'</ul>
            </div></fieldset>';

        }
        break;
      case 2:
        //theme
        //   dsm("theme");
        $return_msg = sauce_download_project($package_url);
        //  dsm($return_msg);
        $theme_list[]=$addon_id;
        /*
         if(empty($import_code)){
        $import_code = "drush dl $addon_id\r\n";
        $import_code .= "drush en $addon_id -y";
        }
        $import_code_array = explode("\r\n",$import_code);
        dsm($import_code_array);
        foreach($import_code_array as $script_command){
        // drush dl $addon_id
        dsm("*$script_command*");
        $output = shell_exec($script_command);
        // $script_command1 = 'drush dl danland';
        //  $output = shell_exec($script_command1);
        dsm($output);
        }*/
        $sauce_config_markup .= '<fieldset class="form-wrapper"><legend><span class="fieldset-legend">'.$addon_title.'</span></legend><div class="fieldset-wrapper">
            <ul>
            <li>'.l(t('Blocks'), 'admin/structure/block/list/'.$addon_id, array('attributes' => array('class' => array('config-link')))).'</li>
                <li>'.l(t('Theme Settings'), 'admin/appearance/settings/'.$addon_id, array('attributes' => array('class' => array('config-link')))).'</li>
                    <li>'.l(t('Set default'), 'admin/appearance/default', array(
                        'query' => array('token' => drupal_get_token('system-theme-operation-link'),
                            'theme' => $addon_id),
                        'attributes' => array('class' => array('config-link'),
                        ))).'</li>'.$addon_resources_config_markup.'
                            </ul>
                            </div></fieldset>';


        break;
      case 3:
        //Library
        // dsm("Library ".$package_url);
        $return_msg = sauce_download_project($package_url, TRUE);
        //dsm($return_msg);
        /*
        $import_code_array = explode("\r\n",$import_code);
        dsm($import_code_array);
        foreach($import_code_array as $script_command){
        // drush dl $addon_id
        dsm("*$script_command*");
        $output = shell_exec('whoami');
        $output .= shell_exec($script_command);
        // $script_command1 = 'whoami';
        //$output = shell_exec($script_command1);


        }
        dsm($output);
        */
        if(!empty($addon_resources_config_markup)){
          $sauce_config_markup .= '<fieldset class="form-wrapper"><legend><span class="fieldset-legend">'.$addon_title.'</span></legend><div class="fieldset-wrapper">
            <ul>
            <ul>'.$addon_resources_config_markup.'</ul>
              </ul>
              </div></fieldset>';
        }

        break;
      case 4:
        //Drulenium
        if(!module_exists("drulenium")){
          drupal_set_message('<a href="http://drupal.org/project/drulenium">Drulenium</a> module must be installed to install "'.$addon_title.'"');
          break;
        }
        db_delete('drulenium_preset')
        ->condition('name', $addon_id)
        ->execute();
        module_load_include('inc', 'ctools', 'includes/export');
        $item = ctools_export_crud_import('drulenium_preset', $import_code);
        // dsm($item);
        ctools_export_crud_save('drulenium_preset', $item);
        $cid = $item->name;
        //  dsm($cid);
        $sauce_config_markup .= '<fieldset class="form-wrapper"><legend><span class="fieldset-legend">'.$addon_title.'</span></legend><div class="fieldset-wrapper">
          <ul>
            <li>'.l(t('Configure'), 'admin/structure/drulenium/presets', array('attributes' => array('class' => array('config-link')))).'</li>
              <li>'.l(t('Run'), 'drulenium/tests/list', array('attributes' => array('class' => array('config-link')))).'</li>'.$addon_resources_config_markup.'

                </ul>
                  </div></fieldset>';
        break;
      case 5:
        //dynamic_fieldable_content
        db_delete('dynamic_fieldable_content')
        ->condition('name', $addon_id)
        ->execute();
        module_load_include('inc', 'ctools', 'includes/export');
        $item = ctools_export_crud_import('dynamic_fieldable_content', $import_code);
        ctools_export_crud_save('dynamic_fieldable_content', $item);
        $cid = $item->name;
        $sauce_config_markup .= '<fieldset class="form-wrapper"><legend><span class="fieldset-legend">'.$addon_title.'</span></legend><div class="fieldset-wrapper">
            <ul>
            <li>'.l(t('Configure'), 'admin/structure/dynamic-content/list/'.$cid.'/edit', array('attributes' => array('class' => array('config-link')))).'</li>'.$addon_resources_config_markup.'

                  </ul>
                  </div></fieldset>';
        break;
      case 17:
        //View
        if(!module_exists("views_ui")){
          drupal_set_message('<a href="http://drupal.org/project/views">Views UI</a> module must be installed to install "'.$addon_title.'"');
          break;
        }
        module_load_include('inc', 'views', 'includes/admin');
        $views_form_state['values']['view'] = $import_code;
     //   $views_form_state['values']['name'] = $addon_id;
        $views_form_state['values']['name_override'] = 1;
        $views_form_state['values']['bypass_validation'] = 1;
        views_ui_import_validate(array(), $views_form_state);
        views_ui_cache_set($views_form_state['view']);
        $cid = $views_form_state['view']->name;
        /*  module_load_include('inc', 'ctools', 'includes/export');
         $item = ctools_export_crud_import('view', $import_code);
        // dsm($item);
        ctools_export_crud_save('view', $item);
        $cid = $item->name;
        //  dsm($cid);
         
        */
        $addon_id = $cid;
        $sauce_config_markup .= '<fieldset class="form-wrapper"><legend><span class="fieldset-legend">'.$addon_title.'</span></legend><div class="fieldset-wrapper">
                      <ul>
                          <li>'.l(t('Edit & Save View'), 'admin/structure/views/view/'.$cid.'/edit', array('attributes' => array('class' => array('config-link')))).'</li>'.$addon_resources_config_markup.'

                          </ul>
                          </div></fieldset>';
        break;
      case 61:
        //Context
        if(!module_exists("context")){
          drupal_set_message('<a href="http://drupal.org/project/context">Context</a> module must be installed to install "'.$addon_title.'"');
          break;
        }
        db_delete('context')
        ->condition('name', $addon_id)
        ->execute();
        module_load_include('inc', 'ctools', 'includes/export');
        $item = ctools_export_crud_import('context', $import_code);
        ctools_export_crud_save('context', $item);
        $cid = $item->name;
        $sauce_config_markup .= '<fieldset class="form-wrapper"><legend><span class="fieldset-legend">'.$addon_title.'</span></legend><div class="fieldset-wrapper">
            <ul>
            <li>'.l(t('Configure'), 'admin/structure/context/list/'.$cid.'/edit', array('attributes' => array('class' => array('config-link')))).'</li>'.$addon_resources_config_markup.'

                  </ul>
                  </div></fieldset>';
        
        //clear cache
        break;
      case 62:
        //Step by Step Tour
        if(!module_exists("joyride")){
          drupal_set_message('<a href="https://drupal.org/project/joyride">joyride</a> module must be installed to install "'.$addon_title.'"');
          break;
        }
        db_delete('context')
        ->condition('name', $addon_id)
        ->execute();
        module_load_include('inc', 'ctools', 'includes/export');
        $item = ctools_export_crud_import('context', $import_code);
        ctools_export_crud_save('context', $item);
        $cid = $item->name;
        $sauce_config_markup .= '<fieldset class="form-wrapper"><legend><span class="fieldset-legend">'.$addon_title.'</span></legend><div class="fieldset-wrapper">
            <ul>
            <li>'.l(t('Configure'), 'admin/structure/context/list/'.$cid.'/edit', array('attributes' => array('class' => array('config-link')))).'</li>'.$addon_resources_config_markup.'

                  </ul>
                  </div></fieldset>';

        //clear cache
        $flag_clear_cache = TRUE;
        break;

      default:
        // dsm("default");
        break;
    }
    
    $sauce_query = "SELECT gid,id,installed_version FROM {sauce} WHERE gid = :nid LIMIT 1";
    $sauce_addon = db_query($sauce_query, array(':nid' => $node['nid']))->fetchAssoc();
    if(isset($sauce_addon['gid']) && !empty($sauce_addon['gid'])){
      //update
      db_update('sauce')
      ->fields(array(
      'type' => $addon_type_id,
      'id' => $addon_id,
      'installed_version' => $addon_version,
      'available_version' => $addon_version,
      'config' => $addon_resources_config_markup,
      ))
      ->condition('gid', $node['nid'])
      ->execute();
    }else {
      db_insert('sauce')
      ->fields(array(
      'type' => $addon_type_id,
      'id' => $addon_id,
      'gid' => $node['nid'],
      'installed_version' => $addon_version,
      'available_version' => $addon_version,
      'config' => $addon_resources_config_markup,
      ))
      ->execute();
    }
  }
  if(!empty($module_list)){
    module_enable($module_list, TRUE);
    drupal_flush_all_caches();
  }
  if($flag_clear_cache){
    drupal_flush_all_caches();
  }
  if(!empty($theme_list)){
    theme_enable($theme_list, TRUE);
  }
  //get addon short id and if install script is empty, do drush
  //prepare configuration markup

  if(empty($sauce_config_markup)){
    $sauce_config_markup = 'No configuration steps found.';
  }
  return $sauce_config_markup;
}