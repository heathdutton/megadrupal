<?php

/**
 * @file
 * Mini Panel Reference module file.
 */

/**
 * Implements hook_menu().
 */
function mini_panel_reference_menu() {
  $items = array();
  $items['minipanelreference/autocomplete/%/%'] = array(
    'title' => 'minipanel autocomplete',
    'page callback' => 'mini_panel_reference_autocomplete',
    'page arguments' => array(2,3),
    'access callback' => 'mini_panel_reference_autocomplete_access',
    'access arguments' => array(2,3),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu Access callback for the autocomplete widget.
 */
function mini_panel_reference_autocomplete_access($field_name, $entity_type) {
  $field = field_info_field($field_name);

  if ($field['type'] != 'mini_panel_reference' || !field_access('edit', $field, $entity_type)) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_field_info().
 */
function mini_panel_reference_field_info() {
  return array(
    'mini_panel_reference' => array(
      'label'             => t('Mini panel reference'),
      'description'       => t('This field stores the ID of a related mini panel as an integer value.'),
      'default_widget'    => 'options_select',
      'default_formatter' => 'mini_panel_reference_default',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function mini_panel_reference_field_widget_info() {
  return array(
    'mini_panel_reference_autocomplete' => array(
      'label' => t('Autocomplete text field'),
      'description' => t('Provides an autocomplete textfield that lists mini panels.'),
      'field types' => array('mini_panel_reference'),
      'settings' => array(
        'match_operator' => 'CONTAINS',
        'size' => 60,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function mini_panel_reference_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $base) {
  $element = $base;

  switch ($instance['widget']['type']) {
    case 'mini_panel_reference_autocomplete':
      $element['name'] = $base + array(
        '#type' => 'textfield',
        '#maxlength' => 1024,
        '#default_value' => isset($items[$delta]['name']) ? $items[$delta]['name'] : NULL,
        '#autocomplete_path' => 'minipanelreference/autocomplete/' . $field['field_name'] . '/ ' . $instance['entity_type'],
        '#size' => $instance['widget']['settings']['size'],
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function mini_panel_reference_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $default = field_info_widget_settings($widget['type']);
  $settings = drupal_array_merge_deep($widget['settings'], $default);

  $form = array();

  if ($widget['type'] == 'mini_panel_reference_autocomplete') {
    $form['match_operator'] = array(
      '#type' => 'select',
      '#title' => t('Autocomplete matching'),
      '#default_value' => $settings['match_operator'],
      '#options' => array(
        'STARTS_WITH' => t('Starts with'),
        'CONTAINS' => t('Contains'),
      ),
    );
    $form['size'] = array(
      '#type' => 'textfield',
      '#title' => t('Size of textfield'),
      '#default_value' => $settings['size'],
      '#element_validate' => array('_element_validate_integer_positive'),
      '#required' => TRUE,
    );
  }

  return $form;
}

/**
 * Implements hook_field_is_empty().
 */
function mini_panel_reference_field_is_empty($item, $field) {
  return empty($item['name']);
}

/**
 * Implements hook_field_formatter_info().
 */
function mini_panel_reference_field_formatter_info() {
  return array(
    'mini_panel_reference_default' => array(
      'label' => t('Default'),
      'description' => t('Display the rendered referenced mini panel.'),
      'field types' => array('mini_panel_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function mini_panel_reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $result = array();

  switch ($display['type']) {
    case 'mini_panel_reference_default':
      ctools_include('context');
      ctools_include('plugins');
      ctools_get_plugins('ctools', 'contexts', 'entity');

      foreach ($items as $delta => $item) {

        $contexts = array();

        $mini = panels_mini_load($item['name']);

        // Create entity context.
        $contexts[] = ctools_context_create_entity(FALSE, $entity, FALSE, array('keyword' => $entity_type, 'name' => 'entity'));

        $context = ctools_context_match_required_contexts($mini->requiredcontexts, $contexts);
        $mini->context = $mini->display->context = ctools_context_load_contexts($mini, FALSE, $context);

        $result[$delta] = array(
          '#markup' => panels_render_display($mini->display),
        );
      }
      break;
  }

  return $result;
}

/**
 * Implements hook_field_widget_info_alter().
 */
function mini_panel_reference_field_widget_info_alter(&$info) {
  $info['options_select']['field types'][] = 'mini_panel_reference';
  $info['options_buttons']['field types'][] = 'mini_panel_reference';
}

/**
 * Implements hook_field_widget_error().
 */
function mini_panel_reference_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['name'], $error['message']);
}

/**
 * Implements hook_options_list().
 */
function mini_panel_reference_options_list($field) {

  $options = array();

  foreach (panels_mini_load_all() as $name => $mini) {
    $options[$name] = $mini->admin_title;
  }

  return $options;
}

/**
 * Menu callback for the autocomplete results.
 */
function mini_panel_reference_autocomplete($field_name, $entity_type, $string = '') {

  $matches = array();
  if ($string) {
    $result = db_select('panels_mini', 'm')
      ->fields('m', array('name', 'admin_title'))
      ->condition('name', db_like($string) . '%', 'LIKE')
      ->range(0, 10)
      ->execute();

    foreach ($result as $mini) {
      $matches[$mini->name] = $mini->admin_title;
    }
  }

  drupal_json_output($matches);
}
