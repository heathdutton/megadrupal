<?php

class WaitingQueueSignalHandler {

  protected $rebootRequired = FALSE;

  public function __construct(array $rebootSignals = array()) {
    $this->installHandlers($rebootSignals);
  }

  public function rebootRequired() {
    return $this->rebootRequired;
  }

  public function signalHandler($signal) {
    $this->rebootRequired = TRUE;
  }

  public function installHandlers($rebootSignals) {
    if (function_exists('pcntl_signal')) {
      declare(ticks = 1);
      foreach ($rebootSignals as $signal) {
        pcntl_signal($signal, array($this, 'signalHandler'));
      }
    }
    else {
      watchdog('waiting_queue', t("Couldn't install a reboot signal handler, as pcntl_signal is not defined."));
    }
  }
}

/**
 * Runs the named queue with no timeout.
 *
 * @param $queue_name
 *   Arbitrary string. The name of the queue to work with.
 */
function waiting_queue_process_queue($queue_name) {
  set_time_limit(0);
  $default_queue_process_lifetime = variable_get('waiting_queue_process_lifetime', 3600);
  $end_time = variable_get('waiting_queue_process_lifetime_' . $queue_name, $default_queue_process_lifetime) + time();

  $queue = DrupalQueue::get($queue_name);
  $function = waiting_queue_get_callback_function($queue_name);

  $default_reboot_signals = variable_get('waiting_queue_reboot_signals', array(SIGTERM));
  $reboot_signals = variable_get('waiting_queue_reboot_signals_' . $queue_name, $default_reboot_signals);
  $signal_handler = new WaitingQueueSignalHandler($reboot_signals);
  if (variable_get('waiting_queue_print_pid_' . $queue_name, FALSE) || variable_get('waiting_queue_print_pid', FALSE)) {
    drush_print("Waiting queue working starting with pid: " . getmypid());
  }

  while (TRUE) {
    try {
      while ($item = $queue->claimItem()) {
        // The $queue->claimItem() call may block for a long time, so we check
        // two things before processing a job: a) that we haven't exceeded the
        // process lifetime, and b) whether a reboot is required.
        if (time() > $end_time || $signal_handler->rebootRequired()) {
          $queue->releaseItem($item);
          exit();
        }

        $function($item->data);
        $queue->deleteItem($item);
      }
    }
    catch (Exception $e) {
      $error_info = array(
        '%queue_name' => $queue_name,
        '%error_message' => $e->getMessage(),
      );
      watchdog('waiting_queue', t("Error processing queue %queue_name, got error '%error_message'.", $error_info));
      if (!empty($item) && waiting_queue_delete_on_exception($queue_name)) {
        $queue->deleteItem($item);
      }
    }

    // If we caught an error, or $queue->claimItem() didn't return a job, we
    // can end up here, and it could be a long time since we last checked
    // process lifetime or reboot flag, so check again.
    if (time() > $end_time || $signal_handler->rebootRequired()) {
      exit();
    }
  }
}

/**
 * Gets the callback function for the given queue.
 */
function waiting_queue_get_callback_function($queue_name) {
  $cron_queues = module_invoke_all('cron_queue_info');
  drupal_alter('cron_queue_info', $cron_queues);
  if (isset($cron_queues[$queue_name])) {
    return $cron_queues[$queue_name]['worker callback'];
  }

  // Check for modules implementing hook_queue_info().
  $queues = module_invoke_all('queue_info');
  drupal_alter('queue_info', $queues);
  if (isset($queues[$queue_name])) {
    return $queues[$queue_name]['cron']['callback'];
  }
}

/**
 * Get the failure behaviour configured for this queue.
 */
function waiting_queue_delete_on_exception($queue_name) {
  $queues = module_invoke_all('cron_queue_info');
  drupal_alter('cron_queue_info', $queues);
  if (isset($queues[$queue_name], $queues[$queue_name]['delete on exception'])) {
    return $queues[$queue_name]['delete on exception'];
  }
  else {
    return variable_get('waiting_queue_delete_on_exception', TRUE);
  }
}

