<?php

/**
 * @file
 * Module file for the Identicon module.
 */

/**
 * Implements hook_form_form_id_alter().
 */
function identicon_form_user_admin_settings_alter(&$form, $form_state, $form_id) {

  $form['personalization']['identicon_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Generate identicon for users without pictures.'),
    '#default_value' => variable_get('identicon_enabled', 0),
  );

  $form['personalization']['identicon'] = array(
    '#type' => 'container',
    '#states' => array(
      'invisible' => array(
        'input[name="identicon_enabled"]' => array('checked' => FALSE),
      ),
    ),
  );

  $form['personalization']['identicon']['identicon_source'] = array(
    '#type' => 'select',
    '#title' => t('Identicon data source'),
    '#description' => t('Select what data should be the basis of generating the identicon. Changing this setting will change all existing identicons.'),
    '#options' => identicon_source_options(),
    '#default_value' => variable_get('identicon_source', 'mail'),
  );

  $form['personalization']['identicon']['identicon_blocks'] = array(
    '#type' => 'select',
    '#title' => t('Blocks in identicons'),
    '#description' => t('The number of blocks on each side of the identicon.'),
    '#options' => identicon_blocks_options(),
    '#default_value' => variable_get('identicon_blocks', 2),
  );

  $form['personalization']['identicon']['identicon_resolution'] = array(
    '#type' => 'select',
    '#title' => t('Resolution of identicons'),
    '#description' => t('The pixel resolution of the generated identicon images. The displayed image may have a resolution different that this if an image style is applied to it.'),
    '#options' => identicon_resolution_options(),
    '#default_value' => variable_get('identicon_resolution', 2),
  );

}

/**
 * Returns options for the data source field.
 *
 * @return
 *   Array suitable for the #options key of a form element.
 */
function identicon_source_options() {
  return array(
    'mail' => 'Email address',
    'uid' => 'User ID',
  );
}

/**
 * Returns options for the block count field.
 *
 * @return
 *   Array suitable for the #options key of a form element.
 */
function identicon_blocks_options() {
  return array(
    '3',
    '4',
    '5',
    '6',
    '7',
    '8',
    '9',
    '10',
  );
}

/**
 * Returns options for the resolution field.
 *
 * @return
 *   Array suitable for the #options key of a form element.
 */
function identicon_resolution_options() {
  return array(
    '150',
    '300',
    '600',
    '1200',
  );
}

/**
 * Implements hook_user_update().
 */
function identicon_user_update(&$edit, $account, $category) {
  if (!empty($account->picture)) {
    identicon_delete_images($account);
  }
}

/**
 * Implements hook_user_delete().
 */
function identicon_user_delete($account) {
  identicon_delete_images($account);
}

/**
 * Deletes identicon images for a user.
 *
 * @param $account
 *   A user object.
 */
function identicon_delete_images($account) {
  $hash = identicon_user_hash($account);

  $delete_path = file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures') . '/identicon-' . $hash . '-*';

  foreach (glob(drupal_realpath($delete_path)) as $filename) {
    unlink($filename);
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function identicon_preprocess_user_picture(&$variables) {

  if (!empty($variables['user_picture']) || !variable_get('identicon_enabled', 0)) {
    // User already has a picture, or identicons are not enabled.
    return;
  }

  $variables['user_picture'] = identicon_get_themed_identicon($variables['account'], variable_get('user_picture_style', ''));

}

/**
 * Implements hook_preprocess_hook().
 * (Integration with Author Pane module)
 */
function identicon_preprocess_author_pane_user_picture(&$variables) {

  if (!empty($variables['picture']) || !variable_get('identicon_enabled', 0)) {
    // User already has a picture, or identicons are not enabled.
    return;
  }

  $style = (!empty($variables['picture_preset']) ? $variables['picture_preset'] : '');
  if ($style && module_exists('image')) {
    $variables['imagecache_used'] = TRUE;
  }
  else {
    $variables['imagecache_used'] = FALSE;
  }

  $variables['picture'] = identicon_get_themed_identicon($variables['account'], $style, FALSE);
  $variables['picture_link_profile'] = identicon_get_themed_identicon($variables['account'], $style, TRUE);

}

/**
 * Returns the themed user identicon.
 *
 * 
 */
function identicon_get_themed_identicon($account, $style = '', $linked = TRUE) {

  // $account may not be a full user object.
  // (e.g. if it comes from hook_preprocess_user_picture).
  if (empty($account->mail) && !empty($account->uid)) {
    $account = user_load($account->uid);
  }

  $image_path = identicon_identicon_image_path($account);
  if (!$image_path) {
    return '';
  }

  $alt = t("@user's picture", array('@user' => format_username($account)));
  if (module_exists('image') && $style) {
    $user_picture = theme('image_style', array('style_name' => $style, 'path' => $image_path, 'alt' => $alt, 'title' => $alt));
  }
  else {
    $user_picture = theme('image', array('path' => $image_path, 'alt' => $alt, 'title' => $alt));
  }

  if ($linked && !empty($account->uid) && user_access('access user profiles')) {
    $attributes = array('attributes' => array('title' => t('View user profile.')), 'html' => TRUE);
    $user_picture = l($user_picture, "user/$account->uid", $attributes);
  }

  return $user_picture;
}

/**
 * Generates a hash for a user account that can be used as
 * the basis of identicon generation.
 *
 * @param  $account
 *   User object.
 *
 * @return
 *   Hash as string.
 */
function identicon_user_hash($account) {

  switch (variable_get('identicon_source', 'mail')) {
    case 'uid':
      $data = $account->uid;
      break;

    default:
      $data = !empty($account->mail) ? $account->mail : '';
      break;
  }

  $hash = hash('sha256', strtolower(trim($data)));

  return $hash;
}

/**
 * Returns the path to the identicon for a user.
 *
 * @param $account
 *   A user object.
 *
 * @return
 *   File path of the identicon image; or FALSE on error.
 */
function identicon_identicon_image_path($account) {
  $hash = identicon_user_hash($account);

  $blocks_options = identicon_blocks_options();
  $blocks_selected = variable_get('identicon_blocks', 5);
  $blocks = $blocks_options[$blocks_selected];

  $resolution_options = identicon_resolution_options();
  $resolution_selected = variable_get('identicon_resolution', 2);
  $resolution = $resolution_options[$resolution_selected];

  $image_path = file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures') . '/identicon-' . $hash . '-' . $resolution . '-' . $blocks . '.png';

  if (!file_exists($image_path)) {
    $result = identicon_generate($hash, $blocks, $resolution, $image_path);

    if (!$result) {
      watchdog('identicon', 'Cannot save identicon to file %file.', array('%file' => $image_path), WATCHDOG_ERROR);
      return FALSE;
    }
  }

  return $image_path;
}

/**
 * Generates and saves an identicon.
 *
 * @param $hash
 *   The hash that serves as the data source for generating the identicon.
 * @param $blocks
 *   The number of blocks on each side of the identicon.
 * @param $resolution
 *   The resolution of the generated image. The image is square, so only one
 *   dimension is needed.
 * @param $image_path
 *   The target path where the image should be saved.
 *
 * @return
 *   TRUE on success; FALSE on error.
 */
function identicon_generate($hash, $blocks, $resolution, $image_path) {

  // First 6 digits determine the color.
  $color = substr($hash, 0, 6);

  // Next digit determines the mirroring. Possible values:
  // 0: horizontal
  // 1: vertical
  $mirroring = hexdec(substr($hash, 6, 1)) % 2;

  // Remove the digits we have used.
  $hash = substr($hash, 7);

  // Calculate the number of bits we need (only fill half of the blocks,
  // because it will be mirrored).
  $half_size = ceil($blocks / 2);
  $number_of_bits = $half_size * $blocks;

  $bits = array_fill(0, $number_of_bits, 0);
  $counter = 0;

  // Gather the bits from the hash.
  do {

    for ($i = 0; $i < strlen($hash); $i++) {
      $dec = hexdec($hash[$i]);
      $bin = str_pad(decbin($dec), 4, '0', STR_PAD_LEFT);

      for ($j = 0; $j < strlen($bin); $j++) {
        $index = $counter % $number_of_bits;

        // If we have more bits than we need, we iterate over
        // the existing bits and xor the extra ones so that any
        // bit change will cause a change in the image.
        $bits[$index] = ($bits[$index] xor $bin[$j]) ? 1 : 0;
        $counter++;
      }

    }

    // If there are not enough bits in the hash to draw the full
    // image, reuse previous bits.
  } while ($counter < $number_of_bits);

  // Build the image.
  $image = imagecreatetruecolor($resolution, $resolution);

  $color = imagecolorallocate($image, hexdec(substr($color, 0, 2)), hexdec(substr($color, 2, 2)), hexdec(substr($color, 4, 2)));
  $background = imagecolorallocate($image, 255, 255, 255);

  imagefilledrectangle($image, 0, 0, $resolution, $resolution, $background);

  $block_size = floor($resolution / $blocks);
  $counter = 0;

  for ($i = 0; $i < $half_size; $i++) {
    for ($j = 0; $j < $blocks; $j++) {

      if (!$bits[$counter++]) {
        // Bit is not set, keep the background color in this block.
        continue;
      }

      switch ($mirroring) {
        case 0:
          // Mirroring horizontally. $i represents x axis, $j is y axis.

          $x1 = ($i) * $block_size;
          $y1 = ($j) * $block_size;
          $x2 = ($i + 1) * $block_size;
          $y2 = ($j + 1) * $block_size;

          // Last row fills in the extra space in case $resolution % $block != 0.
          if ($j == ($blocks - 1) && $y2 != $resolution) {
            $y2 = $resolution;
          }

          imagefilledrectangle($image, $x1, $y1, $x2, $y2, $color);

          // Fill the mirrored block.
          $x1 = ($blocks - 1 - $i) * $block_size;
          $x2 = ($blocks - 1 - $i + 1) * $block_size;

          if ($i == 0 && $x2 != $resolution) {
            $x2 = $resolution;
          }

          imagefilledrectangle($image, $x1, $y1, $x2, $y2, $color);

          break;

        case 1:
          // Mirroring vertically. $i represents y axis, $j is x axis.

          $x1 = ($j) * $block_size;
          $y1 = ($i) * $block_size;
          $x2 = ($j + 1) * $block_size;
          $y2 = ($i + 1) * $block_size;

          // Last row fills in the extra space in case $resolution % $block != 0.
          if ($j == ($blocks - 1) && $x2 != $resolution) {
            $x2 = $resolution;
          }

          imagefilledrectangle($image, $x1, $y1, $x2, $y2, $color);

          // Fill the mirrored block.
          $y1 = ($blocks - 1 - $i) * $block_size;
          $y2 = ($blocks - 1 - $i + 1) * $block_size;

          if ($i == 0 && $y2 != $resolution) {
            $y2 = $resolution;
          }

          imagefilledrectangle($image, $x1, $y1, $x2, $y2, $color);

          break;
      }

    }
  }

  return imagepng($image, drupal_realpath($image_path));
}

/**
 * Implements hook_views_api().
 */
function identicon_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'identicon') . '/views',
  );
}
