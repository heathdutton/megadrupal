<?php

/**
 * @file
 * Allows block visibility to be defined in code.
 */

/**
 * Implements hook_help().
 */
function extended_block_visibility_help($path, $arg) {
  switch ($path) {
    case 'admin/help#extended_block_visibility':
      $output = '';
      $output .= '<p>' . t("This module extends Drupal's block visibility settings, for ease of configuration and deployment.") . '</p>';
      $output .= '<h2>' . t('Features') . '</h2>';
      $output .= '<ul>';
      $output .= '<li>' . t('Allows PHP block visibility to be defined in code.') . '</li>';
      $output .= '<li>' . t('Allows theme specific block visibility code.') . '</li>';
      $output .= '<li>' . t('Removes reliance on core php module and eval() for defining block visibility.') . '</li>';
      $output .= '</ul>';
      $output .= '<h2>' . t('Usage') . '</h2>';
      $output .= '<ol>';
      $output .= '<li>' . t('Edit a block.') . '</li>';
      $output .= '<li>' . t('Pick one or more of the applicable callback functions from the list provided.') . '</li>';
      $output .= '<li>' . t('Implement the functions. See README.txt for code sample.') . '</li>';
      $output .= '</ol>';
      $output .= '<p>' . t('Note that if multiple callbacks have been implemented for a block, the most specific match will always be used.') . '</p>';
      $output .= '<h2>' . t('Possible extensions') . '</h2>';
      $output .= '<ul>';
      $output .= '<li>' . t('Allow users to specify their own function names for each block.') . '</li>';
      $output .= '<li>' . t('Create a hook which can be implemented by one or more modules to determine block visibility (similar to hook_file_download()).') . '</li>';
      $output .= '<li>' . t('Create an info hook which can be used to specify callback names and override other block visibility settings, including user roles.') . '</li>';
      $output .= '</ul>';
      $output .= '<h2>' . t('Similar projects') . '</h2>';
      $output .= '<ul>';
      $output .= '<li>' . t('!link: Allows exporting of block visibility settings for deployment, but still requires eval() and php code entry through the admin interface.', array('!link' => l(t('Features Extra'), 'http://drupal.org/project/features_extra'))) . '</li>';
      $output .= '<li>' . t("!link: Allows visibility options to be defined through a hook (D5/D6 only). This module provides similar functionality to hook_block_info() in Drupal 7 and doesn't provide php-based visibility.", array('!link' => l(t('Block Page Visibility'), 'http://drupal.org/project/bpv'))) . '</li>';
      $output .= '</ul>';
      $output .= '<h2>' . t('Credits') . '</h2>';
      $output .= '<p>' . t('Current maintainer: !link', array('!link' => l(t('Mark Pavlitski'), 'http://drupal.org/user/2438878'))) . '</p>';
      $output .= '<p>' . t('This project has been sponsored by:') . '</p>';
      $output .= '<ul>';
      $output .= '<li>';
      $output .= l(t('Microserve'), 'http://drupal.org/node/1940564');
      $output .= '<br />';
      $output .= t('Microserve is a Drupal web development agency based in Bristol, UK, specialising in Drupal Development, Drupal Training, Hosting and Peer Reviews.');
      $output .= '</li>';
      $output .= '</ul>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function extended_block_visibility_theme($existing, $type, $theme, $path) {
  return array(
    'extended_block_visibility_callback_list' => array(
      'variables' => array(
        'candidates' => array(),
        'title' => NULL,
        'type' => 'ul',
        'attributes' => array()),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function extended_block_visibility_permission() {
  return array(
    'administer extended block visibility' => array(
      'title' => t('Administer extended block visibility'),
      'description' => t('Configure extended block visibility settings and view callback information.'),
    ),
  );
}

/**
 * Returns HTML for a list of callback functions.
 *
 * @param array $variables
 *   An associative array containing:
 *   - callbacks: An array of callbacks to be displayed in the list.
 *   - title: Passed to theme_item_list().
 *   - type: Passed to theme_item_list().
 *   - attributes: Passed to theme_item_list().
 *
 * @see theme_item_list()
 *
 * @return string
 *   The rendered HTML list.
 */
function theme_extended_block_visibility_callback_list($variables) {
  // Retrieve theme information.
  $theme_list = list_themes();
  $list = array();
  foreach ($variables['candidates'] as $key => $candidate) {
    // The function name.
    $list[$key] = $candidate->callback . '()';
    if (function_exists($candidate->callback)) {
      // Get the file:linenumber to append to the message.
      $callback_details = _extended_block_visibility_callback_file($candidate->callback);

      // Highlight the function name if it exists.
      $variables = array(
        '@callback' => $list[$key],
        '@line' => $callback_details['line'],
        '@file' => $callback_details['file'],
        '@path' => $callback_details['path']
      );
      $list[$key] = format_string('<strong>@callback</strong> (line @line of <span title="@path">@file</span>)', $variables);
    }
    $themes = array();
    foreach ($candidate->theme as $theme) {
      // Get the name of the theme that this block callback applies to.
      $themes[$theme] = isset($theme_list[$theme]) ? $theme_list[$theme]->info['name'] : $theme;
    }
    // Create a list of the applicable themes to display next to the
    // function name.
    $list[$key] .= ' [<em>' . implode(', ', $themes) . '</em>]';
  }
  // Offload the HTML generation to theme_item_list().
  $variables['items'] = $list;
  return theme('item_list', $variables);
}

/**
 * Implements hook_module_implements_alter().
 */
function extended_block_visibility_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'block_list_alter') {
    // We need our module to run hook_block_list_alter() first.
    $module = 'extended_block_visibility';
    // Pull out our own hook implementation details.
    $group = array($module => $implementations[$module]);
    unset($implementations[$module]);
    // And put them at the front of the list.
    $implementations = $group + $implementations;
  }
}

/**
 * Implements hook_block_list_alter().
 *
 * @see _block_load_blocks()
 * @see block_block_list_alter()
 */
function extended_block_visibility_block_list_alter(&$blocks) {
  foreach ($blocks as $key => $block) {
    // Get the list of candidate function names for the current block.
    $candidates = _extended_block_visibility_callback_candidates($block);
    foreach ($candidates as $candidate) {
      // Check if the function exists.
      $function = $candidate->callback;
      if (function_exists($function)) {
        if ($function($block)) {
          // The block should be visible, so we need to prevent the block
          // module from disabling it anyway.
          $blocks[$key]->visibility = BLOCK_VISIBILITY_NOTLISTED;
          $blocks[$key]->pages = '';
        }
        else {
          // The block should be hidden.
          unset($blocks[$key]);
        }
        // Only check the first valid callback.
        break;
      }
    }
  }
}

/**
 * Helper function for getting a list of possible callback names.
 *
 * Keys are returned in order of specificity.
 *
 * @param array|object $blocks
 *   The block object to work with or an array of blocks with differing bid's
 *   and themes.
 *
 * @return array
 *   The list of possible callback names.
 */
function _extended_block_visibility_callback_candidates($blocks) {
  if (empty($blocks)) {
    return array();
  }
  if (!is_array($blocks)) {
    $blocks = array($blocks);
  }
  // These are the possible formats callback functions.
  $callback_formats = array(
    'bid_:bid' => TRUE,
    ':theme_:module_:delta' => TRUE,
    ':module_:delta' => FALSE,
  );

  $candidates = array();
  // The formats are in order of specificity, so we need to generate them in
  // order of format.
  foreach ($callback_formats as $format => $specific) {
    foreach ($blocks as $block) {
      $substitutions = array(
        ':bid' => $block->bid,
        ':theme' => $block->theme,
        ':delta' => $block->delta,
        ':module' => $block->module,
      );
      // Substitute block details into the formatted string to generate the
      // real callback name.
      $key = strtr($format, $substitutions);
      // There can be an overlap because blocks can have multiple definitions
      // if there are multiple themes enabled (which is the default behaviour).
      if (!isset($candidates[$key])) {
        $candidates[$key] = new stdClass();
        $candidates[$key]->format = $format;
        // $specific defines if this entry is theme specific or not.
        $candidates[$key]->specific = $specific;
        // Generate the full callback name.
        $candidates[$key]->callback = _extended_block_visibility_function($key);
        $candidates[$key]->module = $block->module;
        $candidates[$key]->delta = $block->delta;
        $candidates[$key]->bid = array($block->bid => $block->bid);
        $candidates[$key]->theme = array($block->theme => $block->theme);
      }
      else {
        // We've alread defined this entry, so just add the block ID and theme.
        $candidates[$key]->bid[$block->bid] = $block->bid;
        $candidates[$key]->theme[$block->theme] = $block->theme;
      }
    }
  }

  return $candidates;
}

/**
 * Helper function for converting a string into a useable function name.
 *
 * @param string $str
 *   The string to convert into a valid function name.
 *
 * @return string
 *   The converted function name.
 */
function _extended_block_visibility_function($str) {
  // Detect and remove invalid characters from the function name. The regular
  // expression was adapted from here:
  // http://www.php.net/manual/en/functions.user-defined.php
  return '_' . preg_replace('/[^a-zA-Z0-9_\x7f-\xff]/', '_', $str) . '_block_visibility';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function extended_block_visibility_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
  $output = '';
  $module = $form['module']['#value'];
  $delta = $form['delta']['#value'];
  // Load all matching blocks. block_load() ignores the theme and only loads
  // the first match, so we need to use a db_query() instead.
  $blocks = db_query('SELECT * FROM {block} WHERE module = :module AND delta = :delta', array(':module' => $module, ':delta' => $delta))->fetchAllAssoc('bid');
  $block_count = count($blocks);
  // Get a list of possible calback names.
  $candidates = _extended_block_visibility_callback_candidates($blocks);

  $callbacks = array();
  $callback_groups = array();
  foreach ($candidates as $candidate) {
    // Check if the callback function exists.
    if (function_exists($candidate->callback)) {
      // If the callback is theme specific, we need to check that all themes
      // are covered.
      if ($candidate->specific) {
        $callback_groups[$candidate->format][$candidate->callback] = $candidate;
        // We've got the correct number of callback functions to include all
        // available themes.
        if (count($callback_groups[$candidate->format]) == $block_count) {
          $callbacks = $callback_groups[$candidate->format];
          break;
        }
      }
      else {
        // This callback is generic (not theme specific), so we're done.
        $callbacks = array($candidate->callback => $candidate);
        break;
      }
    }
  }

  if ($callbacks) {
    // A callback has already been implemented for this block, so hide the
    // standard block settings.
    $form['visibility']['path']['visibility']['#access'] = FALSE;
    $form['visibility']['path']['pages']['#access'] = FALSE;
    // Count the number of callbacks found.
    $callback_count = count($callbacks);
    if (user_access('administer extended block visibility')) {
      // Get the filename:linenumber to include as a message.
      $callback_name = reset($callbacks)->callback;
      $callback_details = _extended_block_visibility_callback_file($callback_name);
      $variables = array(
        '@callback' => $callback_name,
        '@module' => $callback_details['file'],
        '@line' => $callback_details['line'],
        '@path' => $callback_details['path']
      );
      $output .= '<p>' . format_plural($callback_count, 'This block will be shown on pages where <strong>@callback()</strong> (<em>line @line of <span title="@path">@module</span></em>) returns TRUE.', 'This block will be shown on pages where the following callbacks returns TRUE:', $variables) . '</p>';

      if ($callback_count > 1) {
        // We're using the plural message, so we need to add on the list of
        // callback functions.
        $output .= theme('extended_block_visibility_callback_list', array('candidates' => $callbacks));
      }
    }
    else {
      // Output a generic message for users without permission.
      $output .= '<p>' . t('This block is managed by the extended block visibility module.') . '</p>';
    }
  }
  else {
    if (user_access('administer extended block visibility')) {
      // None of the possible callbacks exist yet, so list the available
      // options instead.
      $output .= '<p>' . t('Alternatively you may declare one or more of the following functions to determine block visibility:') . '</p>';
      $output .= theme('extended_block_visibility_callback_list', array('candidates' => $candidates));
    }
  }

  // Add our markup to the form.
  $form['visibility']['path']['extended_visibility'] = array(
    '#markup' => $output,
  );
}

/**
 * Helper function to get the file and line number where a callback is defined.
 *
 * @param string $callback
 *   The name of the callback function to find.
 *
 * @return array
 *   Array containing details about the callback. The following keys are defined:
 *     - 'path': The path to the file relative to the Drupal root.
 *     - 'file': The name of the file containing the callback.
 *     - 'line': The line number of the callback.
 */
function _extended_block_visibility_callback_file($callback) {
  // This can't change during execution, so don't use drupal_static().
  static $details = array();

  if (!isset($details[$callback])) {
    // Create ReflectionFunction so that we can find out where the callback is
    // defined.
    $rf = new ReflectionFunction($callback);

    $details[$callback] = array();
    // Remove the Drupal root from the path to keep it short.
    $details[$callback]['path'] = str_replace(DRUPAL_ROOT . base_path(), '', $rf->getFileName());
    // Retrieve the filename from the path.
    $details[$callback]['file'] = basename($details[$callback]['path']);
    // Get the line number of the function.
    $details[$callback]['line'] = $rf->getStartLine();
  }

  return $details[$callback];
}
