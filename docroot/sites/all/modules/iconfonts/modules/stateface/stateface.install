<?php

/**
 * @file
 * Install, update, and uninstall functions for the stateface module.
 */

/**
 * Implements hook_requirements().
 */
function stateface_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if (stateface_check_library()) {
    $requirements['stateface'] = array(
      'title' => $t('StateFace'),
      'value' => $t('Enabled'),
    );
  }

  else {

    $requirements['stateface'] = array(
      'title' => $t('StateFace'),
      'description' => $t('Could not locate all required files. Please check readme.txt.'),
      'severity' => REQUIREMENT_ERROR,
    );

  }

return $requirements;

}

/**
 * Implements hook_enable().
 */
function stateface_enable() {

  // Weight must be above iconfonts weight so preprocess comes after
  db_query("UPDATE {system} SET weight = 1 WHERE name = 'stateface'");

  // Creates a base css file that, at a minimum, loads the font files.
  $library = 'stateface';
  $libraries = libraries_get_libraries();
  $base_css = file_get_contents(drupal_get_path('module', 'stateface') . '/stateface.css');
  $css = str_replace('%libraries%', $libraries[$library], $base_css);
  $destination =
    file_stream_wrapper_uri_normalize('public://fontyourface/iconfonts/stateface.css');
  $destination_directory = dirname($destination);
  if (file_prepare_directory($destination_directory, FILE_CREATE_DIRECTORY)) {
    file_unmanaged_save_data($css, $destination, FILE_EXISTS_REPLACE);
  }

}

/**
 * Implements hook_disable().
 */
function stateface_disable() {

  iconfonts_uninstall_font('stateface');

  file_unmanaged_delete('public://fontyourface/iconfonts/stateface.css');

}

/**
 * Checks for the stateface library
 *
 * @return bool
 *   Returns TRUE if all files were found, otherwise returns FALSE.
 */
function stateface_check_library() {
  $library = 'stateface';
  $file = 'webfont/stateface-regular-webfont';
  $extensions = array('.eot', '.svg', '.ttf', '.woff');

  $libraries = libraries_get_libraries();

  // Checks the library exists.
  if (!isset($libraries[$library])) {
    return FALSE;
  }

  // Checks the files exists.
  foreach ($extensions as $ext) {

    $library_path = $libraries[$library] . '/' . $file . $ext;
    if (!file_exists($library_path)) {
      return FALSE;
    }

  }

  return TRUE;

}
