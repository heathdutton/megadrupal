<?php

/**
 * @file
 * Integrates the stateface icon font with the iconfonts module.
 */

/**
 * Implements hook_iconfonts_import().
 */
function stateface_iconfonts_import() {

  return array(
    'name' => 'StateFace',
    'family' => 'StateFaceRegular',
    'url' => 'http://propublica.github.com/stateface/',
  );

}

/**
 * Implements hook_iconfonts_enable().
 */
function stateface_iconfonts_enable($font) {

  return stateface_char_info();

}

/**
 * Provides character information to iconfonts_save_chars().
 *
 * @return array
 *   An array of character information arrays. Each array contains:
 *   - name: The name of the character.
 *   - code: The code of the character.
 *   - css_selector: (optional) The default css selector of the character.
 *   - enabled: (optional) The default enabled value of the character.
 */
function stateface_char_info() {

  $ret = array();
  $char_count = 0;
  $file_path = drupal_get_path('module', 'stateface');
  $file_content = file($file_path . '/stateface_chars.txt');

  foreach ($file_content as $line) {
    $temp = explode(';', $line);
    $ret[$char_count]['name'] = $temp[0];
    $ret[$char_count]['code'] = $temp[1];
    // Adds default css selector. e.g.: .stateface-ca
    $ret[$char_count]['css_selector'] = '.' . $temp[0];
    // Enables all icons by default.
    $ret[$char_count]['enabled'] = 1;
    $char_count++;
  }

  return $ret;

}

/**
 * Implements hook_preprocess_HOOK() for html.tpl.php.
 *
 * Adds the @font-face css file if needed.
 */
function stateface_preprocess_html(&$vars) {

  if (!empty($vars['iconfonts'])) {

    foreach ($vars['iconfonts'] as $font) {
      $metadata = unserialize($font->metadata);

      if ($metadata['module'] == 'stateface') {

        fontyourface_add_css_in_preprocess($vars, 'fontyourface/iconfonts/stateface.css');
        break;

      }

    }

  }

}

/**
 * Implements hook_preprocess_HOOK() for theme_iconfonts_char_list().
 *
 * Inserts the character code for each state on the edit StateFace font page.
 */
function stateface_preprocess_iconfonts_char_list(&$vars) {

  if (isset($vars['module']) && $vars['module'] == 'stateface') {

    $render = array();
    foreach ($vars['render'] as $char) {

      $temp = explode('/', $char['data']['#href']);
      $cid = $temp[2];
      $state_name = strtoupper(substr($vars['characters'][$cid]->name, -2));
      $char['data']['#title'] .= '<div class="state-name-stateface">' . $state_name . '</div>';
      $render[] = $char;

    }

    $vars['render'] = $render;

  }

}

/**
 * Implements hook_query_TAG_NAME_alter().
 *
 * Makes sure states are listed alphabetically.
 */
function stateface_query_iconfonts_characters_alter($query) {

  if ($query->getMetaData('font_type') == 'stateface') {

    $query->orderBy('name');

  }

}
