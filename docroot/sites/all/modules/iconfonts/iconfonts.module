<?php

/**
 * @file
 * Iconfonts is an API module to enable easy integration of icon fonts with the font-your-face module.
 *
 * @todo namespace submodules (so also out fonts can be recognized more easily)
 * @todo autogenerate icon names and make them configurable (yes leave them, see stateface)
 *
 * @todo provide possibility to uninstall font (maybe in fyf)
 * @todo provide a cache clear action for css files
 * @todo fix fyf css generation flaw
 */

/**
 * Implements hook_menu().
 */
function iconfonts_menu() {

  $items = array();

  $items['admin/iconfonts/%iconfonts_char/edit'] = array(
    'title' => 'Edit character',
    'description' => 'Edit charater',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('iconfonts_char_edit_form', 2),
    'access arguments' => array('administer @font-your-face'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'iconfonts.admin.inc',
  );

  return $items;

}

/**
 * Loads a character based on its character id.
 *
 * @param int $cid
 *   The id of the character to be loaded.
 *
 * @return object
 *   The loaded character object.
 */
function iconfonts_char_load($cid) {

  // Needs caching as loader function is called multiple times.
  // see http://drupal.org/node/1471554
  static $char = FALSE;

  if (!$char) {
    $char = iconfonts_get_char($cid);
    return $char;
  }

}

/**
 * Implements hook_fontyourface_info().
 */
function iconfonts_fontyourface_info() {

  $info = array(
    'name' => 'Icon Fonts',
    // to get rid of PHP notices
    'url' => 'https://drupal.org/project/iconfonts',
    'base_path' => 'https://drupal.org/project/iconfonts',
  );

  return $info;

}

/**
 * Implements hook_fontyourface_import().
 */
function iconfonts_fontyourface_import() {

  // Calls hook_iconfonts_import().
  foreach (module_implements('iconfonts_import') as $module) {

    // Don't run import on already imported fonts.
    if (!iconfonts_get_fid_by_module_name($module)) {

      $function = $module . '_iconfonts_import';

      $font_import = $function();

      $font = new StdClass();
      $font->name = $font_import['name'];
      $font->url = $font_import['url'];
      $font->css_family = $font_import['family'];
      // All iconfonts will have the same provider this way all icon fonts will
      // be listed under the same tab at '/appearance/fontyourface/browse'. It
      // means that fontyourface_provider_disable() can't be used on iconfonts.
      $font->provider = 'iconfonts';

      // Stores the name of the module providing the icons in the metadata. This
      // is going to be used in several occasions, like
      // fontyourface_provider_disable() or iconfonts_fontyourface_enable().
      $metadata['module'] = $module;
      $font->metadata = serialize($metadata);

      fontyourface_save_font($font);

      iconfonts_enable_font($font);

    }

  }

  return TRUE;

}

/**
 * Populates the database with font information.
 *
 * @param object $font
 *   A font object.
 *
 * @return bool
 *   A boolean indicating whether the import was successful or not.
 */
function iconfonts_enable_font($font) {

  $success = TRUE;

  // Gets the name of the module providing the icon font then calls
  // hook_iconfonts_enable($font).
  $metadata = unserialize($font->metadata);
  $module = $metadata['module'];
  $function = $module . '_iconfonts_enable';

  if (function_exists($function)) {

    $char_info = $function($font);
    // Populates the iconfonts_chars database table.
    iconfonts_save_chars($char_info, $font->fid);

  }

  else {

    drupal_set_message(t('No character info for @fontname.', array('@fontname' => $font->name)), 'warning');
    $success = FALSE;

  }

  return $success;

}

/**
 * Implements hook_form_FORM_ID_alter() for
 * fontyourface_ui_apply_by_font_form().
 *
 * Removes the 'css selector' select list from the 'By Font' tab of the
 * admin/appearance/fontyourface page and displays a message that css
 * selectors are available on the character level.
 */
function iconfonts_form_fontyourface_ui_apply_by_font_form_alter(&$form, &$form_state, $form_id) {

  $iconfonts = iconfonts_get_enabled_fonts();

  foreach ($iconfonts as $fid => $name) {

      $form['table']['row_' . $fid]['css_selector[' . $fid . ']']['#type']
        = 'markup';
      $form['table']['row_' . $fid]['css_selector[' . $fid . ']']['#markup']
        = t("Click 'Edit' to add css selectors on the character level");

  }

}

/**
 * Implements hook_form_FORM_ID_alter() for fontyourface_ui_apply_by_selector_form().
 *
 * Removes all iconfonts from the 'By CSS Selector' tab of the
 * admin/appearance/fontyourface' page.
 */
function iconfonts_form_fontyourface_ui_apply_by_selector_form_alter(&$form, &$form_state, $form_id) {

  $iconfonts = iconfonts_get_enabled_fonts();

  $selectors = element_children($form['table']);

  foreach ($selectors as $selector) {

    $selector_id = substr($selector, 4);
    $options = $form['table'][$selector]['fid[' . $selector_id . ']']['#options'];
    $form['table'][$selector]['fid[' . $selector_id . ']']['#options'] = array_diff($options, $iconfonts);

  }

}

/**
 * Implements hook_form_FORM_ID_alter() for fontyourface_ui_admin_edit_form().
 *
 * Adds list of icons to the font edit form.
 */
function iconfonts_form_fontyourface_ui_admin_edit_form_alter(&$form, &$form_state, $form_id) {

  // Modifies the form only if the provider is set to 'Icon Fonts'.
  if (strpos($form['details']['provider']['#markup'], 'Icon Fonts')) {

    iconfonts_enable_all_chars(TRUE);

    $form['iconfonts_chars'] = array(
      '#type' => 'fieldset',
      '#title' => t('Characters'),
      '#description' => t('Click on an icon to add/remove css selectors or
                          enable/disable it.'),
      '#weight' => -1,
    );

    $enabled['characters'] = iconfonts_get_chars_by_fid($form['fid']['#value'], 'enabled', TRUE);
    $enabled['enabled'] = TRUE;
    $disabled['characters'] = iconfonts_get_chars_by_fid($form['fid']['#value'], 'disabled', TRUE);
    $disabled['enabled'] = FALSE;

    $form['iconfonts_chars']['enabled'] = array(
      '#type' => 'item',
      '#markup' => theme('iconfonts_char_list', $enabled),
    );

    $form['iconfonts_chars']['disabled'] = array(
      '#type' => 'item',
      '#markup' => theme('iconfonts_char_list', $disabled),
    );

    // Disables the 'Preview' fieldset, not used by the iconfonts module.
    unset($form['preview']);

    // Hides the 'CSS selector' textarea. Cannot unset it, since
    // fontyourface_ui_admin_edit_form_submit() throws a php notice.
    $form['css']['#access'] = FALSE;

    $form['details']['#collapsible'] = FALSE;
    $form['details']['#weight'] = -50;

    $form['#submit'][] = 'iconfonts_font_edit_form_submit';

    $form['#attached']['css'][]
      = drupal_get_path('module', 'iconfonts') . '/iconfonts-admin.css';

  }

}

/**
 * Form submission handler for fontyourface_ui_admin_edit_form().
 *
 * Makes sure the user is always redirected, even if the 'font_css_path'
 * parameter is not set.
 */
function iconfonts_font_edit_form_submit($form, &$form_state) {

  drupal_goto('admin/appearance/fontyourface');

}

/**
 * Implements hook_theme().
 */
function iconfonts_theme($existing, $type, $theme, $path) {

  return array(
    'iconfonts_char_list' => array(
      'variables' => array(
        'characters' => NULL,
        'enabled' => NULL,
      ),
      'file' => 'iconfonts.theme.inc',
    ),
  );

}

/**
 * Implements hook_preprocess_HOOK() for html.tpl.php.
 *
 */
function iconfonts_preprocess_html(&$vars) {

  $fonts = iconfonts_get_fonts();

  foreach ($fonts as $font) {
    $font_css_public_paths = iconfonts_ensure_css_file($font);
    fontyourface_add_css_in_preprocess($vars, $font_css_public_paths['enabled']);
    if (iconfonts_enable_all_chars()) {
      fontyourface_add_css_in_preprocess($vars, $font_css_public_paths['disabled']);
    }
  }

  $vars['iconfonts'] = $fonts;
}

function iconfonts_ensure_css_file($font, $force = FALSE) {

  $font_css_public_paths = iconfonts_get_font_css_public_paths($font);

  foreach ($font_css_public_paths as $condition => $font_css_public_path) {
    $font_css_file_path = "public://$font_css_public_path";

    if ($force or !file_exists($font_css_public_path)) {

      $chars = iconfonts_get_chars_by_fid($font->fid, $condition);

      $css = '';
      foreach ($chars as $char) {
        $css .= iconfonts_get_char_css($char);
      }

      iconfonts_write_css($css, "public://$font_css_public_path");
    }
  }
  return $font_css_public_paths;
}

function iconfonts_get_char_css($char) {

  $css_selector_config = $char->css_selector;
  $css_selector_config = str_replace("\n", ',', $css_selector_config);
  $selectors = explode(',', $css_selector_config);
  $selectors = array_filter(array_map('trim', $selectors));

  $selectors[] = '.' . iconfonts_get_generic_char_class($char);

  $selectors = array_map('_iconfonts_append_before', $selectors);

  $all_selectors = implode(', ', $selectors);

  $font = fontyourface_get_font($char->fid);

  $defaults = <<<EOD
  font-weight: normal;
  font-style: normal;
  text-decoration: inherit;
EOD;

  $css = <<<EOD
$all_selectors {
  content: "$char->code";
  font-family: $font->css_family;
$defaults
}

EOD;

  return $css;
}

/**
 * Get generic character selector.
 *
 * @param $char
 * @param $font
 * @return string
 */
function iconfonts_get_generic_char_class($char) {
  $font = fontyourface_get_font($char->fid);
  $fontselector = iconfonts_get_font_identifier($font);
  return "iconfonts-$fontselector-$char->name";
}

/**
 * @param $font
 * @return mixed
 */
function iconfonts_get_font_identifier($font) {
  return strtolower(drupal_clean_css_identifier($font->name));
}

function _iconfonts_append_before($selector) {
  if (!preg_match('/:(before|after)$/ui', $selector)) {
    $selector = "$selector:before";
  }
  return $selector;
}

/**
 * Re-writes font css file.
 *
 * @param string $css
 *   A group of css rules to insert into iconfonts.css.
 * @param $font_css_path
 *   Path for the font file.
 */
function iconfonts_write_css($css, $font_css_path) {

  $destination_directory = dirname($font_css_path);
  if (file_prepare_directory($destination_directory, FILE_CREATE_DIRECTORY)) {
    file_unmanaged_save_data($css, $font_css_path, FILE_EXISTS_REPLACE);
  }

}

function iconfonts_invalidate_font_css($fid) {

  $font = fontyourface_get_font($fid);
  $font_css_public_paths = iconfonts_get_font_css_public_paths($font);
  foreach ($font_css_public_paths as $font_css_public_path) {
    $font_css_file_path = "public://$font_css_public_path";
    if(file_exists($font_css_file_path)) {
      file_unmanaged_delete($font_css_file_path);
    }
  }
}

/**
 * @param object $font
 *   The font object.
 * @return array(string)
 *   list($enabled_public_path, $disabled_public_path)
 */
function iconfonts_get_font_css_public_paths($font) {
  $font_identifier = iconfonts_get_font_identifier($font);
  $font_css_paths = array(
    'enabled' => "fontyourface/iconfonts-$font_identifier-enabled.css",
    'disabled' => "fontyourface/iconfonts-$font_identifier-disabled.css",
  );
  return $font_css_paths;
}

/**
 * Get iconfonts. Only enabled or all depending on iconfonts_enable_all_chars() setting.
 */
function iconfonts_get_fonts($all = NULL) {
  $order_by = 'name ASC';
  $conditions = array("provider = 'iconfonts'");

  if(!isset($all)) {
    $all = iconfonts_enable_all_chars();
  }

  if ($all) {
    $conditions[] = 'enabled = 1';
  }

  return fontyourface_get_fonts(implode(' and ', $conditions), $order_by);
}

/**
 * Enable all fonts and chars for admin page.
 *
 * @param bool $switch
 * @return bool
 */
function iconfonts_enable_all_chars($switch = NULL) {
  $all_fonts = &drupal_static(__FUNCTION__);
  if (isset($switch)) {
    $all_fonts = $switch;
  }
  return $all_fonts;
}

/**
 * Loads a character based on its character id.
 *
 * @param int $cid
 *    The character id.
 *
 * @return object
 *    The complete character object.
 */
function iconfonts_get_char($cid) {

  return db_query('SELECT * FROM {iconfonts_chars} WHERE cid = :cid', array(':cid' => $cid))->fetchObject();

}

/**
 * Get the module name by providing a font id.
 *
 * Since the provider of all iconfonts are set to 'iconfont',
 * an extra step is needed to find out which module provides the font.
 *
 * @param int $fid
 *    The font id of the icon font.
 *
 * @return string
 *    The name of the module that provides the font.
 */
function iconfonts_get_module_name_by_fid($fid) {

  $result = db_query("SELECT metadata FROM {fontyourface_font}
                     WHERE fid = :fid", array(':fid' => $fid))->fetchObject();

  $metadata = unserialize($result->metadata);

  return $metadata['module'];

}

/**
 * Enables a single character.
 *
 * @param object $char
 *    A character object.
 */
function iconfonts_enable_char($char) {

  db_update('iconfonts_chars')
    ->fields(array('enabled' => 1))
    ->condition('cid', $char->cid)
    ->execute();

  iconfonts_invalidate_font_css($char->fid);

  return TRUE;

}

/**
 * Disables a single character.
 *
 * @param object $char
 *    A character object.
 */
function iconfonts_disable_char($char) {

  db_update('iconfonts_chars')
    ->fields(array('enabled' => 0))
    ->condition('cid', $char->cid)
    ->execute();

  iconfonts_invalidate_font_css($char->fid);

  return TRUE;

}

/**
 * Sets a character's CSS selector.
 *
 * @param object $char
 *    A character object.
 * @param string $css_selector
 *    Comma separated list of css selectors.
 */
function iconfonts_set_css_selector($char, $css_selector) {

  db_update('iconfonts_chars')
    ->fields(array('css_selector' => $css_selector))
    ->condition('cid', $char->cid)
    ->execute();

  iconfonts_invalidate_font_css($char->fid);

}

/**
 * Saves character information into the database.
 *
 * @param array $char_info
 *   An array of character information arrays. Each array contains:
 *   - name: The name of the character.
 *   - code: The code of the character.
 *   - css_selector: (optional) The default css selector of the character.
 *   - enabled: (optional) The default enabled value of the character.
 * @param int $fid
 *    Font id.
 */
function iconfonts_save_chars($char_info, $fid) {

  $query = db_insert('iconfonts_chars')
    ->fields(array('fid', 'name', 'code', 'css_selector', 'enabled'));

  foreach ($char_info as $char) {
    $char['fid'] = $fid;

    if (!isset($char['css_selector'])) {
      // Defaults to no css selector.
      $char['css_selector'] = '';
    }

    if (!isset($char['enabled'])) {
      // Defaults to disabled character.
      $char['enabled'] = 0;
    }


    $query->values($char);

  }

  $query->execute();

  iconfonts_invalidate_font_css($fid);

}

/**
 * Returns the list of characters of the font defined by $fid.
 *
 * @param int $fid
 *   The font id.
 * @param string $status
 *   'enabled' or'disabled' depending on the status of the icons to retrun.
 *   Defaults to return both enabled and disabled icons.
 *
 * @return array
 *   An Array of all requested chars.
 */
function iconfonts_get_chars_by_fid($fid, $status = 'all') {

  $chars = array();
  $chars['enabled'] = array();
  $chars['disabled'] = array();

  $font = fontyourface_get_font($fid);

  $font_type = iconfonts_get_module_name_by_fid($fid);

  $query = db_select('iconfonts_chars', 'i');
  $query
    ->fields('i')
    ->condition('i.fid', $fid);

  if ($status == 'enabled') {
    $query->condition('i.enabled', 1);
  }
  elseif ($status == 'disabled') {
    $query->condition('i.enabled', 0);
  }

  // Lets submodules modify the query.
  $query->addTag('iconfonts_characters')
    ->addMetaData('font_type', $font_type);

  $result = $query->execute();

  $chars = $result->fetchAllAssoc('cid');

  return $chars;

}

/**
 * Gets the font id from a module's name.
 *
 * @param string $module
 *   The name of the module.
 *
 * @return int|bool
 *   The font id. Returns FALSE if the font is not found.
 */
function iconfonts_get_fid_by_module_name($module) {

  $fonts = db_query("SELECT fid, metadata FROM {fontyourface_font}
                    WHERE provider = 'iconfonts'");

  foreach ($fonts as $font) {

    $metadata = unserialize($font->metadata);
    if ($metadata['module'] == $module) {
      return (int) $font->fid;
    }

  }

  return FALSE;

}

/**
 * Removes all font information from the database.
 *
 * @param string $module
 *   The name of the module.
 */
function iconfonts_uninstall_font($module) {

  $fid = iconfonts_get_fid_by_module_name($module);

  db_delete('fontyourface_font')
    ->condition('fid', $fid)
    ->execute();

  // @todo delete tags

  db_delete('iconfonts_chars')
    ->condition('fid', $fid)
    ->execute();

  iconfonts_invalidate_font_css($fid);

}

/**
 * Gets css family of a font.
 *
 * @param int $fid
 *   Font id.
 *
 * @return string
 *   The css family of the font.
 */
function iconfonts_get_css_family($fid) {

  $ret = db_query('SELECT css_family FROM {fontyourface_font} WHERE fid = :fid', array(':fid' => $fid))->fetchObject();
  return $ret->css_family;

}

/**
 * Gets all enabled iconfonts.
 *
 * @return array
 *   An associative array, where the keys are the font ids and
 * the values are the font names.
 */
function iconfonts_get_enabled_fonts() {

  $fonts = db_query("SELECT fid, name FROM {fontyourface_font} WHERE enabled = 1 AND provider = 'iconfonts'")->fetchAllKeyed();

  return $fonts;

}

/**
 * Implements hook_fontyourface_short_preview_text().
 *
 * Displays a few random icons on the browse screen.
 */
function iconfonts_fontyourface_short_preview_text($font) {

  // Makes sure the appropriate css file is loaded, even for disabled fonts.
  iconfonts_enable_all_chars(TRUE);

  drupal_add_css(drupal_get_path('module', 'iconfonts') . '/iconfonts-admin.css');

  $chars = db_select('iconfonts_chars', 'i')
    ->condition('i.fid', $font->fid, '=')
    ->fields('i')
    ->orderRandom()
    ->range(0, 5)
    ->execute()
    ->fetchAllAssoc('name');

  $ret = '';

  foreach ($chars as $name => $char) {

    $ret .= '<span class="' . $name . ' iconfonts-preview"></span>';

  }

  return $ret;

}
