<?php
/**
 * @file
 * Main module brains.
 */


// Avoid infinate loop to share defaults, without Variable dependecy.
define('SETTINGS_PREFIX', 'quick_feedback_');
define('EMAIL_FEEDBACK_LINK_TEXT', 'Send Feedback');
define('EMAIL_FEEDBACK_MAIL_SUBJECT', 'Site Feedback');
define('EMAIL_FEEDBACK_MAIL_BODY', "\r\n\r\n\r\n---------------\r\n" . 'Debug Information' . "\r\n");


/**
 * Implements hook_menu().
 */
function quick_feedback_menu() {
  $items = array();

  $items['admin/config/user-interface/quick-feedback'] = array(
    'title' => 'Quick Feedback Settings',
    'description' => 'Control how and where the email feedback link appears.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quick_feedback_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'quick_feedback.admin.inc',
  );

  return $items;
}


/**
 * Manage settings loading and defaults.
 * NOTE: Some defaults are shared with those registered in variable.inc
 */
function _quick_feedback_get_settings() {
  $settings_defaults = array(
    'link_target' => FALSE,
    'link_mail' => variable_get('site_mail', ini_get('sendmail_from')),
    'link_obfuscate' => TRUE,
    'mail_inc_browser' => TRUE,
    'mail_inc_os' => TRUE,
    'mail_inc_url' => TRUE,
    'link_text' => EMAIL_FEEDBACK_LINK_TEXT,
    'mail_subject' => EMAIL_FEEDBACK_MAIL_SUBJECT,
    'mail_body' => EMAIL_FEEDBACK_MAIL_BODY,
    'forms_list' => array('user_register_form'),
    'forms_additional' => array(),
  );

  // Set all configs variables from defaults, core variable, or via i18n_variable / variable.
  foreach ($settings_defaults as $config => $default) {
    if (module_exists('i18n_variable')) {
      // NOTE: Defaults copied into variable.inc declarations.
      $settings[$config] = variable_get_value(SETTINGS_PREFIX . $config) ?
        variable_get_value(SETTINGS_PREFIX . $config) : $default;
    }
    else {
      $settings[$config] = variable_get(SETTINGS_PREFIX . $config, $default);
    }
  }

  return $settings;
}


/**
 * Implement hook_form_alter().
 */
function quick_feedback_form_alter(&$form, &$form_state, $form_id) {
  $settings = _quick_feedback_get_settings();
  
  if ((array_key_exists($form_id, $settings['forms_list']) && $settings['forms_list'][$form_id])  || array_key_exists($form_id, $settings['forms_additional'])) {
    // Put it on the form after the submit button.

    $form['actions']['submit']['#suffix'] = (isset($form['actions']['submit']['#suffix'])) ?
      $form['actions']['submit']['#suffix'] + _quick_feedback_build_output($form_id) :
      _quick_feedback_build_output($form_id);
    // Add the assets we need.
    $form['#attached']['js'][] = libraries_get_path('ua-parser-js') . '/ua-parser.min.js';    
    $form['#attached']['js'][] = drupal_get_path('module', 'quick_feedback') . '/quick_feedback.js';
  }
}


/**
 * Build HTML email link output.
 */
function _quick_feedback_build_output($form_id = NULL) {
  $settings = _quick_feedback_get_settings();

  // Ensure clean string settings are coming out.
  $xss_items = array(
    'link_mail',
    'link_text',
    'mail_subject',
    'mail_body',
    'link_mail'
  );
  foreach ($xss_items as $item) {
    if (is_string($settings[$item])) {
      $settings[$item] = filter_xss_admin($settings[$item]);
    }
  }
  foreach ($settings['forms_additional'] as $form) {
    $settings['forms_additional'][$form] = filter_xss_admin($settings['forms_additional'][$form]);
  }

  // Allow basic obfuscation.
  $email = ($settings['link_obfuscate']) ? _quick_feedback_obfuscate_email($settings['link_mail']) : $settings['link_mail'];

  // Client-side user details settings.
  drupal_add_js(
    array('quick_feedback' => array(
      $form_id => array(
        'mail_inc_browser' => $settings['mail_inc_browser'],
        'mail_inc_os' => $settings['mail_inc_os'],
      )),
    ),
    'setting'
  );

  // Add server-side debug options.
  $debug = '';
  if ($settings['mail_inc_url']) {
    global $base_url;
    $debug .= "\r\n" . t('Page:') . ' ' . $base_url . '/' . request_path();
  }
  if ($debug) {
    $attributes['query']['body'] = $debug;
  }

  // Build reg help email link...
  // NOTE: Currenly l() does not handle body query params with line breaks.
  $target = ($settings['link_target']) ? 'target="_blank"' : '';
  $body = str_replace("\r\n", '%0D%0A', $settings['mail_body']);
  $uri = 'mailto:' . $email . '?subject=' . $settings['mail_subject'] . '&body=' . $body . $debug;

  $output = "<a href=\"$uri\" $target>{$settings['link_text']}</a>";

  return '<span class="quick-feedback-wrapper">' . $output  . '</span>';
}


/**
 * Utility to output obfuscated email address.
 * SEE: http://stackoverflow.com/questions/12592363
 */
function _quick_feedback_obfuscate_email($email) {
  $alwaysEncode = array('.', ':', '@');
  $result = '';

  // Encode string using oct and hex character codes.
  for ($i = 0; $i < strlen($email); $i++) {
    // Encode 25% of characters including several that always should be encoded.
    if (in_array($email[$i], $alwaysEncode) || mt_rand(1, 100) < 25) {
      if (mt_rand(0, 1)) {
        $result .= '&#' . ord($email[$i]) . ';';
      }
      else {
        $result .= '&#x' . dechex(ord($email[$i])) . ';';
      }
    }
    else {
      $result .= $email[$i];
    }
  }
  return $result;
}
