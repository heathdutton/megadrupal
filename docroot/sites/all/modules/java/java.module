<?php

/**
 * Implements hook_menu().
 */
function java_menu() {
  $items = array();
  $items['node/%node/java-web-start-jnlp.jnlp'] = array(
    'title' => 'Java Web Start',
    'page callback' => 'java_deliver_jnlp',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Page callback for menu.
 */
function java_deliver_jnlp($node) {
  // Ugh, must be some better way to do this :/
  $fields = field_read_fields(array('type' => 'java_web_start'));
  $java_field = NULL;
  foreach ($fields as $field_name => $field) {
    if (isset($node->{$field_name})) {
      $java_field = $field_name;
      break;
    }
  }
  if (empty($java_field)) {
    drupal_add_http_header('Status', '500 Internal Server Error');
    $content = "java_web_start field missing on this node.";
  }
  else {
    $content = $node->{$java_field}[$node->language][0];
    drupal_add_http_header('Content-Type', 'application/x-java-jnlp-file;charset=utf-8');
    $content = theme('java_web_start_jnlp', array(
      'title' => $content['title'],
      'vendor' => $content['vendor'],
      'offline' => $content['offline'],
      'pack200' => $content['pack200'],
      'jars' => $content['jars'],
      'mainclass' => $content['mainclass'],
      'arguments' => $content['arguments'],
    ));
  }
  
  drupal_page_is_cacheable(FALSE);
  drupal_page_header();
  print $content;
  drupal_page_footer();
  drupal_exit();
}

/**
 * Implements hook_field_info().
 */
function java_field_info() {
  return array(
    'java_web_start' => array(
      'label' => t('Java Web Start'),
      'description' => t('Allows attachment of Java Web Start content to entities.'),
      'default_widget' => 'java_web_start',
      'default_formatter' => 'java_web_start',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function java_field_is_empty($item, $field) {
  return empty($item['title']) || empty($item['vendor']) || empty($item['mainclass']) || empty($item['jars']);
}


/**
 * Implements hook_field_widget_info().
 */
function java_field_widget_info() {
  return array(
    'java_web_start' => array(
      'label' => t('Java Web Start'),
      'description' => t('Allows input of Java Web Start data.'),
      'field types' => array('java_web_start'),
      'behaviors' => array(
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function java_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  if (isset($items[$delta])) {
    $item = $items[$delta];
  }

  $element += array(
    '#type' => 'fieldset',
    '#title' => t('Java Web Start'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $element['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('Enter the title of the JNLP application.'),
    '#required' => TRUE,
    '#default_value' => isset($item['title']) ? $item['title'] : '',
  );

  $element['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#description' => t('Enter a short description of the JNLP application.'),
    '#default_value' => isset($item['description']) ? $item['description'] : '',
  );

  $element['vendor'] = array(
    '#type' => 'textfield',
    '#title' => t('Vendor'),
    '#description' => t('Enter the vendor of the JNLP application.'),
    '#required' => TRUE,
    '#default_value' => isset($item['vendor']) ? $item['vendor'] : '',
  );

  $element['offline'] = array(
    '#type' => 'checkbox',
    '#title' => t('Offline'),
    '#description' => t('Allow the application to be used offline?'),
    '#default_value' => isset($item['offline']) ? $item['offline'] : FALSE,
  );

  $element['pack200'] = array(
    '#type' => 'checkbox',
    '#title' => t('Pack200'),
    '#description' => t('Enable <a href="@link">pack200 compression</a> of the archive?', array('@link' => 'http://docs.oracle.com/javase/1.5.0/docs/guide/deployment/deployment-guide/pack200.html')),
    '#default_value' => isset($item['pack200']) ? $item['pack200'] : FALSE,
  );

  $element['mainclass'] = array(
    '#type' => 'textfield',
    '#title' => t('Main class'),
    '#description' => t('Enter the main class to run. Do not enter the .class suffix.'),
    '#required' => TRUE,
    '#default_value' => isset($item['mainclass']) ? $item['mainclass'] : '',
  );

  $element['jars'] = array(
    '#type' => 'textarea',
    '#title' => t('Jar files'),
    '#description' => t('Enter the jar files to use seperated by new lines. The first jar will be considered the main jar.'),
    '#required' => TRUE,
    '#default_value' => isset($item['jars']) ? $item['jars'] : '',
  );

  $element['arguments'] = array(
    '#type' => 'textarea',
    '#title' => t('Arguments'),
    '#description' => t('Enter the arguments to send to the JNLP application. Seperate arguments with a new line. Token replacement will be performed on rendering.'),
    '#default_value' => isset($item['arguments']) ? $item['arguments'] : '',
  );

  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function java_field_formatter_info() {
  return array(
    'java_web_start' => array(
      'label' => t('Java Web Start'),
      'description' => t('Displays Java Web Start applications.'),
      'field types' => array('java_web_start'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function java_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#theme' => 'java_web_start',
      '#nid' => $entity->nid,
    );
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function java_theme() {
  return array(
    'java_web_start' => array(
      'template' => 'java-web-start',
      'variables' => array(
        'nid' => 0,
      ),
    ),
    'java_web_start_jnlp' => array(
      'template' => 'java-web-start-jnlp',
      'variables' => array(
        'title' => '',
        'vendor' => '',
        'offline' => FALSE,
        'pack200' => FALSE,
        'jars' => '',
        'mainclass' => '',
        'arguments' => '',
      ),
    ),
  );
}

