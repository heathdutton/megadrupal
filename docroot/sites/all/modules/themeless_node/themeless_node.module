<?php

/**
 * @file
 * A module to provide node content without theme elements.
 */

/**
 * Implements hook_menu()
 *
 * set up our administrative page paths
 */
function themeless_node_menu() {
	$items = array();
	$items['admin/config/themeless'] = array(
		'title' => 'Themeless Node',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('themeless_node_settings'),
		'access callback' => 'user_access',
		'access arguments' => array('administer themeless node'),
	);
	return $items;
}

/**
 * implementation of hook_permission
 */
function themeless_node_permission() {
  return array(
    'administer themeless node' => array(
      'title' => 'Administer Themeless Node Settings',
    ),
  );
}

function themeless_node_settings($form,&$form_state) {
  $form['themeless_node_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Options'),
    '#weight' => 1,
  );
  $form['themeless_node_types'] = array(
    '#type' => 'fieldset',
    '#title' => t('Nodes Available For Themeless Flagging'),
    '#weight' => 2,
  );

	$form['themeless_node_options']['themeless_contact'] = array(
		'#type' => 'checkbox',
		'#title' => t('Contact Form'),
		'#description' => t('Display the contact form without theme wrappers.'),
		'#weight' => 1,
		'#default_value' => variable_get('themeless_contact',0),
	);
	$form['themeless_node_options']['themeless_profile'] = array(
		'#type' => 'checkbox',
		'#title' => t('User Login/Registration/Profile Pages'),
		'#description' => t('Display the user login, registration and profile pages without theme wrappers. Note that this option requires that the Login Redirect module be installed for logins to be successful.'),
		'#weight' => 2,
		'#default_value' => variable_get('themeless_profile',0),
	);
  /* get a list of the nodes that we have so that we can only assign the themeless node checkbox */
  /* to nodes that we want to make themeless */
	/* load in the available node types and offer them as options */
	$nids = array();
	$result = db_query("SELECT type,name FROM {node_type} ORDER BY name ASC");
	while($ndata = $result->fetchObject()) {
	  $nids[$ndata->type] = $ndata->name;
	}
	$form['themeless_node_types']['themeless_nodes'] = array(
	  '#type' => 'checkboxes',
	  '#title' => t('Node Types Available For Themeless Assignment'),
	  '#description' => t('The themeless node option will only be available on the nodes you select.'),
	  '#options' => $nids,
	  '#default_value' => variable_get('themeless_types',array()),
	);
	$form['submit'] = array(
	  '#type' => 'submit',
	  '#value' => t('Submit'),
		'#weight' => 100,
	);
	return $form;
}

function themeless_node_settings_submit($form, &$form_state) {
  $selected = array();
  foreach($form_state['values']['themeless_nodes'] as $key=>$value) {
    if ($value === $key) {
      $selected[] = $key;
    }
  };
  variable_set('themeless_types',$selected);
  variable_set('themeless_contact',$form_state['values']['themeless_contact']);
  variable_set('themeless_profile',$form_state['values']['themeless_profile']);
  drupal_set_message('Themeless Node Settings Updated');
}

/**
 * Implements hook_page_alter()
 *
 * this is for handling our user pages or contact form pages. this will likely need
 * to be refined over time, but this is a good start. these should only be done if
 * set by the user in the control panel
 */
function themeless_node_page_alter(&$page) {
	switch(arg(0)) {
		case 'user':
		case 'user-register':
		  if (variable_get('themeless_profile',0) == 1) {
  		  print render($page['content']);
	  	  exit();
		  }
		  break;
		case 'contact':
		  if (variable_get('themeless_contact',0) == 1) {
        print render($page['content']);
        exit();
      }
      break;
		default:
			break;
	}
}

/**
 * Implements hook_process()
 *
 * Outputs our node content if we have a node flagged as themeless and it is not promoted to the
 * home page. If it is promoted to the home page it can create all kinds of problems
 */
function themeless_node_process(&$variables, $hook) {

  if ($hook == 'page' && isset($variables['node']) && in_array($variables['node']->type,variable_get('themeless_types',array())) ) {
    if (isset($variables['page']['content']['system_main']['nodes']) && is_array($variables['page']['content']['system_main']['nodes'])) {
      $node = $variables['page']['content']['system_main']['nodes'];

      /* get the keys of the nodes returned in variables */
      $node_keys = array_keys($node);

      /* the first key in node_keys is the node we are working with */
      $nid = $node_keys[0];

      /* assign our themeless variable and our promoted variable for easier use */
      $themeless = $node[$nid]['body']['#object']->themeless;
      $promote = $node[$nid]['body']['#object']->promote;

      if (isset($themeless) && $themeless > 0 && $promote != 1) {
        echo render(node_view(node_load($nid)));
        exit();
      }
    }
  }
}

/**
 * Implements hook_form_alter
 *
 * Alter the node form to include the themeless node checkbox
 */
function themeless_node_form_alter(&$form, &$form_state, $form_id) {
  $parts = explode('_',$form_id);
  $form_type = $parts[count($parts)-1].'_'.$parts[count($parts)-2];
  $themeless = 0;

	if ($form_type == 'form_node' && in_array($form_state['node']->type,variable_get('themeless_types',array()))) {
		if (isset($form_state['node']->nid) && $form_state['node']->nid) {
			$themeless = db_query("SELECT COUNT(*) AS themeless
														 FROM {themeless_node}
														 WHERE nid=:nid",
														 array(':nid' => $form_state['node']->nid))->fetchField();
		}
    $form['options']['themeless_node'] = array(
      '#type' => 'checkbox',
      '#title' => t('Themeless Node'),
			'#weight' => 100,
			'#default_value' => $themeless,
    );
	}
}

/**
 * Implements hook_node_insert()
 *
 * Processes the themeless node checkbox for new nodes
 */
function themeless_node_node_insert($node) {
  if ($node->themeless_node == 1)
  {
    $result = db_query("INSERT INTO {themeless_node} (nid)
                        VALUES( :nid )",array(':nid' => $node->nid));
  }
}

/**
 * Implements hook_node_update()
 *
 * Processes the themeless node checkbox for updating existing nodes.
 */
function themeless_node_node_update($node) {

  if ($node->themeless_node == 1) {
    if (db_query("SELECT COUNT(*) AS themeless
                  FROM {themeless_node}
                  WHERE nid=:nid",
                  array('nid' => $node->nid))->fetchField() == 0) {
      $result = db_query("INSERT INTO {themeless_node} (nid)
                          VALUES( :nid )",array(':nid' => $node->nid));
    }
  } else {
    $result = db_query("DELETE FROM {themeless_node}
                        WHERE nid=:nid",array(':nid' => $node->nid));
  }
}

/**
 * implementation of hook_node_load()
 */
function themeless_node_node_load($nodes,$types) {
  foreach($nodes as $k=>$node) {
    $is_themeless = db_query("SELECT COUNT(*) AS themeless FROM {themeless_node}
                              WHERE nid=:nid",array(':nid' => $node->nid))->fetchField();
    if ($is_themeless > 0) {
      $nodes[$k]->themeless = 1;
    } else {
      $nodes[$k]->themeless = 0;
    }
  }
}

/**
 * implementation of hook_ctools_render_alter
 */
function themeless_node_ctools_render_alter(&$info, &$page, &$context) {
  foreach($context['contexts'] AS $context) {
    if ($context->data->themeless == 1) {
      print $info['content'];
      exit();
    }
  }
}
