<?php
/**
 * @file
 * Multilang module file.
 *
 * Allows to embed multiple translations of the same text in a unique
 * node or user-defined block instance, using a Spip-like fashion.
 */

/* ============================================================== BASIC HOOKS */
/**
 * Implements hook_help().
 */
function multilang_help($path, $arg) {
  switch ($path) {
    case 'admin/help#multilang':
      module_load_include('inc', 'multilang', 'multilang.data');
      return _multilang_help_data();
  }
}
/**
 * Implements hook_menu().
 */
function multilang_menu() {
  module_load_include('inc', 'multilang', 'multilang.data');
  return array(
    'admin/config/regional/multilang' => array(
      'title'            => 'Multilang',
      'title callback'   => FALSE,
      'description'      => _multilang_menu_data('menu_description'),
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('multilang_entry_form'),
      'access arguments' => array('access administration pages'),
      'type'             => MENU_NORMAL_ITEM,
      'file'             => 'multilang.admin.inc',
    ),
    'admin/config/regional/multilang/entry' => array(
      'title'            => _multilang_menu_data('menu_entry_title'),
      'title callback'   => FALSE,
      'description'      => _multilang_menu_data('menu_entry_description'),
      'type'             => MENU_DEFAULT_LOCAL_TASK,
      'weight'           => 10,
      'file'             => 'multilang.admin.inc',
    ),
    'admin/config/regional/multilang/rendering' => array(
      'title'            => _multilang_menu_data('menu_rendering_title'),
      'title callback'   => FALSE,
      'description'      => _multilang_menu_data('menu_rendering_description'),
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('multilang_rendering_form'),
      'access arguments' => array('access administration pages'),
      'type'             => MENU_LOCAL_TASK,
      'weight'           => 20,
      'file'             => 'multilang.admin.inc',
    ),
    'admin/config/regional/multilang/tokens' => array(
      'tab_parent'       => 'admin/config/regional/multilang',
      'title'            => _multilang_menu_data('menu_tokens_title'),
      'title callback'   => FALSE,
      'description'      => _multilang_menu_data('menu_tokens_description'),
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('multilang_tokens_form'),
      'access arguments' => array('access administration pages'),
      'type'             => MENU_LOCAL_TASK,
      'weight'           => 30,
      'file'             => 'multilang.admin.inc',
    ),
    'admin/config/regional/multilang/default' => array(
      'tab_parent'       => 'admin/config/regional/multilang',
      'title'            => _multilang_menu_data('menu_default_title'),
      'title callback'   => FALSE,
      'description'      => _multilang_menu_data('menu_default_description'),
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('multilang_default_form'),
      'access arguments' => array('access administration pages'),
      'type'             => MENU_LOCAL_TASK,
      'weight'           => 40,
      'file'             => 'multilang.admin.inc',
    ),
  );
}
/**
 * Implements hook_init().
 *
 * This hook serves two intents:
 * - if currently responding to an Ajax request, starts buffering output, which
 *   will be resolved in hook_exit()
 * - if currently building a normal complete page, adds data to Drupal.settings
 *   for Multilang widget and Multilang CKEditor plugin
 */
function multilang_init() {
  
  // Postpone if responding to an Ajax request.
  if (strtolower(@$_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {
    // Start buffering output and set a flag to notify hook_exit().
    drupal_static('multilang_ajax_ob', TRUE);
    ob_start();
    return;
  }
  
  // Otherwise this is a complete page.
  module_load_include('inc', 'multilang', 'multilang.data');
  module_load_include('inc', 'multilang', 'multilang.conf');
  module_load_include('inc', 'multilang', 'multilang.core');
  global $_multilang_langs;
  
  // If Drupal core version changed, first update hack.
  if (variable_get(MULTILANG_DRUPAL_VERSION) != VERSION) {
    _multilang_hack_core();
    // (even if returns false, continue delivering current page)
  }
  
  // Add Multilang widget.
  drupal_add_js('sites/all/modules/multilang/multilang.js');
  drupal_add_css('sites/all/modules/multilang/multilang.css');
  drupal_add_css(
    '.multilang-highlight {
    ' . _multilang_conf(MULTILANG_FALLBACK_CSS) .'
    }',
    'inline'
  );
  
  // Add Drupal settings for Multilang widget and Multilang CKEditor plugin.
  drupal_add_js(
    array(
      'multilang' => array(
        'help' => _multilang_js_widget_data(),
        'langs' => $_multilang_langs,
        'defLang' => MULTILANG_DEF_LANG,
        'curLang' => MULTILANG_CUR_LANG,
        'isInput' => preg_match(_multilang_exclude_paths(), request_uri()),
        'path' => MULTILANG_PATH . drupal_get_path('module', 'multilang'),
        'multify' => array(
          'fromlang' => _multilang_conf(MULTILANG_MULTIFY_FROMLANG, FALSE),
          'backlang' => _multilang_conf(MULTILANG_MULTIFY_BACKLANG, FALSE),
        ),
        'fallback' => array(
          'empty' => _multilang_conf(MULTILANG_FALLBACK_EMPTY, FALSE),
          'option' => _multilang_conf(MULTILANG_FALLBACK_OPTION, FALSE),
          'message' => _multilang_process(
            _multilang_conf(MULTILANG_FALLBACK_MESSAGE, FALSE),
            ['can_replace' => FALSE]),
          'tip' => _multilang_process(
            _multilang_conf(MULTILANG_FALLBACK_TIP, FALSE),
            ['can_replace' => FALSE]),
          'css' => _multilang_conf(MULTILANG_FALLBACK_CSS, FALSE),
        ),
        'filters' => array(
          'useLinebreak' => _multilang_conf(MULTILANG_LINEBREAKS_USE, FALSE),
          'noWidget' => _multilang_conf(MULTILANG_NO_WIDGET, FALSE),
        ),
      ),
    ),
    'setting'
  );
}
/**
 * Implements hook_exit().
 *
 * If currently responding to an Ajax request, reports buffered output after
 * translating it if needed.
 */
function multilang_exit() {
  if (drupal_static('multilang_ajax_ob', FALSE)) {
    // Returning from Ajax request.
    // Echo buffered output after translating it if needed.
    if ($content = ob_get_clean()) {
      module_load_include('inc', 'multilang', 'multilang.core');
      if ($json = @json_decode($content)) {
        foreach ($json as $i => $json_part) {
          // Look for "insert" command and process the corresponging content only.
          // So "viewsSetForm" content is not processed, and the user can see raw
          // text in "multi" segments.
          // NOTE: if json_part is not an object, do nothing.
          if (@$json_part->command == 'insert') {
            $json[$i]->data = _multilang_process(
              str_replace(
                array('\u003C', '\u003E', '\\/'),
                array('<', '>', '/'),
                $json[$i]->data
              ),
              ['process_links' => TRUE]
            );
            $processed = TRUE;
          }
        }
        // Back from JSON if changed.
        if (@$processed) {
          $content = json_encode($json);
        }
      }
      echo $content;
    }
  }
}
/* =============================================================== ADMIN-MENU */
/**
 * Implements hook_admin_menu_output_alter().
 *
 * Localizes admin-menu options.
 * This has to be done here because the admin_menu is not part of the primary
 * HTML output, but is added furtherly through an Ajax request.
 */
function multilang_admin_menu_output_alter(&$content) {
  module_load_include('inc', 'multilang', 'multilang.core');
  $content['menu'] =
    json_decode(
      _multilang_process(json_encode($content['menu'], JSON_UNESCAPED_UNICODE)),
      TRUE
    );
}
/* ============================================================== FORMS HOOKS */
/**
 * Implements hook_form_alter().
 */
function multilang_form_alter(&$form, &$form_state, $form_id) {
  #fb($form_state,'FORM:'.$form_id);##
  #fb(field_info_field_types(),'field_types');##
}
/* ================================================= CONTENT-PREPROCESS HOOKS */
/**
 * Implements hook_preprocess_block().
 *
 * Processes title and content of any (user-defined) block.
 */
function multilang_preprocess_block(&$variables) {
  module_load_include('inc', 'multilang', 'multilang.conf');
  if (!preg_match(_multilang_exclude_paths(), request_uri())) {
    // (don't work when currently in edit/add process).
    module_load_include('inc', 'multilang', 'multilang.core');
    $variables['block']->subject = _multilang_process(
      $variables['block']->subject,
      ['can_highlight' => TRUE, 'process_links' => TRUE]
    );
    $variables['content'] = _multilang_process(
      $variables['content'],
      ['can_highlight' => TRUE, 'process_links' => TRUE]
    );
  }
}
/**
 * Implements hook_preprocess_html().
 *
 * Processes possibly remaining multi segments (node titles, breadcrumbs, Views
 * data...) and HTML <title>.
 */
function multilang_preprocess_html(&$variables) {
  module_load_include('inc', 'multilang', 'multilang.conf');
  if (!preg_match(_multilang_exclude_paths(), request_uri())) {
    // (don't work when currently in edit/add process).
    module_load_include('inc', 'multilang', 'multilang.core');
    $variables['page']['#children'] = _multilang_process(
      // For node title and breadcrumbs.
      $variables['page']['#children'],
      ['can_highlight' => TRUE, 'process_links' => TRUE]
    );
    $variables['head_title'] = _multilang_process(
      // For HTML <title>.
      $variables['head_title'],
      ['process_links' => TRUE]
    );
  }
}
/* ========================================================== FORMATTER HOOKS */
/**
 * Implements hook_field_formatter_info_alter().
 *
 * For text fields, graft multilang as prioritary formatter.
 */
function multilang_field_formatter_info_alter(&$info) {
  if ($info) {
    foreach ($info as $name => $formatter) {
      if (
        !@$formatter['settings']['multilang graft']
      and
        array_intersect($formatter['field types'],
          array('text', 'text_long', 'text_with_summary'))
      ) {
        // Substitute multilang to original module.
        $info[$name]['settings']['multilang graft'] = $formatter['module'];
        $info[$name]['module'] = 'multilang';
      }
    }
  }
}
/**
 * Implements hook_field_formatter_prepare_view().
 *
 * Extract current lang part, then renew args to the original formatter.
 */
function multilang_field_formatter_prepare_view(
  $entity_type, $entities, $field, $instances, $langcode, &$items, $displays
) {
  // First reduce items to current lang part.
  if ($items) {
    module_load_include('inc', 'multilang', 'multilang.core');
    foreach ($items as $nid => $node_data) {
      if ($node_data) {
        foreach ($node_data as $delta => $item) {
          if (isset($item['summary'])) {
            $items[$nid][$delta]['summary'] = _multilang_process(
              $item['summary'],
              ['can_highlight' => TRUE, 'process_links' => TRUE]
            );
          }
          if (isset($item['value'])) {
            $items[$nid][$delta]['value'] = _multilang_process(
              $item['value'],
              ['can_highlight' => TRUE, 'process_links' => TRUE]
            );
          }
        }
      }
    }
  }
  // Then give original formatter a chance to execute its own hook.
  foreach ($displays as $display) {
    $hook = $display['settings']['multilang graft'] .
      '_field_formatter_prepare_view';
    if (function_exists($hook)) {
      $hook(
        $entity_type, $entities, $field, $instances, $langcode, $items, $displays
      );
    }
  }
  // Finally "repair" highglighter flags, if any and truncated.
  if ($items) {
    foreach ($items as $nid => $node_data) {
      if ($node_data) {
        foreach ($node_data as $delta => $item) {
          if (isset($item['summary'])) {
            $items[$nid][$delta]['summary'] =
              _multilang_repair($items[$nid][$delta]['summary']);
          }
          if (isset($item['value'])) {
            $items[$nid][$delta]['value'] =
              _multilang_repair($items[$nid][$delta]['value']);
          }
        }
      }
    }
  }
}
/**
 * Implements hook_field_formatter_view().
 *
 * Simply renew args to the original formatter.
 */
function multilang_field_formatter_view(
  $entity_type, $entity, $field, $instance, $langcode, $items, $display
) {
  $hook = $display['settings']['multilang graft'] . '_field_formatter_view';
  if (function_exists($hook)) {
    return $hook(
      $entity_type, $entity, $field, $instance, $langcode, $items, $display
    );
  }
}
/**
 * Implements hook_field_formatter_settings_summary().
 *
 * Simply renew args to the original formatter.
 */
function multilang_field_formatter_settings_summary(
  $field, $instance, $view_mode
) {
  $hook
    = $instance['display'][$view_mode]['settings']['multilang graft'] .
    '_field_formatter_settings_summary';
  if (function_exists($hook)) {
    return $hook($field, $instance, $view_mode);
  }
}
/**
 * Implements hook_field_formatter_settings_form().
 *
 * Simply renew args to the original formatter.
 */
function multilang_field_formatter_settings_form(
  $field, $instance, $view_mode, $form, &$form_state
) {
  $hook
    = $instance['display'][$view_mode]['settings']['multilang graft'] .
    '_field_formatter_settings_form';
  if (function_exists($hook)) {
    return $hook($field, $instance, $view_mode, $form, $form_state);
  }
}
/* ============================================================== TOKEN HOOKS */
/**
 * Implements hook_token_info().
 *
 * Define [???:multilang(-native)-???] tokens.
 */
function multilang_token_info() {

  // Get full list of existing tokens (other than Multilang ones).
  global $_multilang_token_flag;
  if ($_multilang_token_flag) {
    // Don't work when token_info() recursively calls multilang_token_info().
    return array();
  }
  $_multilang_token_flag = TRUE;
  $token_info = token_info();
  
  // Prepare Multilang complements.
  module_load_include('inc', 'multilang', 'multilang.conf');
  module_load_include('inc', 'multilang', 'multilang.core');
  module_load_include('inc', 'multilang', 'multilang.data');
  $token_adds = _multilang_token_adds_data();
  $signature = ' ' . trim(_multilang_process($token_adds['signature']));
  $locale_short =
    trim(_multilang_process($token_adds['locale-short'])) . $signature;
  $locale_long =
    trim(_multilang_process($token_adds['locale-long'])) . $signature;
  $native_short =
    trim(_multilang_process($token_adds['native-short'])) . $signature;
  $native_long =
    trim(_multilang_process($token_adds['native-long'])) . $signature;
  $multilang_tokens = _multilang_conf(MULTILANG_TOKENS, FALSE);
  $multilang_token_types = array_keys($multilang_tokens);
  $multilang_field_types = _multilang_conf(MULTILANG_FIELD_TYPES, FALSE);
    
  // Add Multilang "clone" tokens for every registered template or field-type.
  foreach ($token_info['tokens'] as $type => $tokens) {
    if (@in_array($type, $multilang_token_types)) {
      if ($multilang_tokens_tokens = @$multilang_tokens[$type]) {
        foreach ($tokens as $token => $data) {
          if (substr($token, 0, 6) == 'field_') {
            $field_info = field_info_field($token);
            $select = in_array($field_info['type'],$multilang_field_types);
          } else {
            $select = in_array($token, $multilang_tokens_tokens);
          }
          if ($select) {
            $end_dot = substr($data['description'], -1) == '.' ? '.' : NULL;
            $description = $end_dot ?
              substr($data['description'], 0, -1) : $data['description'];
            $info['tokens'][$type]['multilang-' . $token] = array(
              'name'        => $data['name'] . ' ' . $locale_short,
              'description' => $description . ' ' . $locale_long . $end_dot,
            );
            $info['tokens'][$type]['multilang-native-' . $token] = array(
              'name'        => $data['name'] . ' ' . $native_short,
              'description' => $description . ' ' . $native_long . $end_dot,
            );
          }
        }
      }
    }
  }
  return $info;
}
/**
 * Implements hook_tokens().
 *
 * For any [<type>:multilang(-native)-<token>], apply _multilang_process() to
 * the corresponding [<type>:<token>].
 */
function multilang_tokens(
  $type, $tokens, array $data = array(), array $options = array()
) {
  // @todo Remove ## when https://www.drupal.org/node/2525802 is fixed.
  static $done = array(); ##
  $multilang_tokens = _multilang_conf(MULTILANG_TOKENS, FALSE);
  $multilang_token_types = array_keys($multilang_tokens);
  if (in_array($type, $multilang_token_types)) {
    module_load_include('inc', 'multilang', 'multilang.core');
    foreach ($tokens as $name => $raw_token) {
      if (preg_match('`^multilang-(native-)?(.*)$`i', $name, $matches)) {
        if (in_array($name, $done)) { ##
          // This token has already been furnished. ##
          continue; ##
        } ##
        $done[] = $name; ##
        $replacements[$raw_token] = _multilang_process(
          token_replace('[' . $type . ':' . $matches[2] . ']', $data),
          ['use_curLang' => (bool)$matches[1]]
        );
      }
    }
    return @$replacements;
  }
}
/* =========================================================== CKEDITOR HOOKS */
/**
 * Implements hook_ckeditor_plugin().
 *
 * Add Multilang ckeditor plugin.
 */
function multilang_ckeditor_plugin() {
  module_load_include('inc', 'multilang', 'multilang.data');
  return array(
    'multilang' => array(
      'name' => 'multilang',
      'desc' => _multilang_ckeditor_plugin_data(),
      'path' => drupal_get_path('module', 'multilang') . '/ckeditor/',
      'buttons' => array(
        'multilang' => array(
          'label' => 'Multilang',
          'icon' => 'multilang.png',
        ),
      ),
    ),
  );
}
/* ========================================================================== */
