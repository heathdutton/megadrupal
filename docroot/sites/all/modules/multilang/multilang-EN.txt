<?php
/**
 * @file
 * Multilang module text data.
 *
 * Contains all texts translations, written using "multi" syntax.
 */

/* ================================================================== INSTALL */
/**
 * Informative message after module activation.
 */
function _multilang_install() {
  module_load_include('inc', 'multilang', 'multilang.core');
  ob_start();
?>
[multi]
[en]The <em>Multilang</em> module was successfully installed.<br />
Now you may use the "multi" syntax inside of text fields, in any type of 
content and in blocks.<br />
NOTE: in order to use the
<a href="<?php echo _MULBASE_PATH; ?>/en/admin/help/multilang#ckeditor">
advanced features</a>
available with CKEditor, you must install the <em>Widget</em> plugin.
[/multi]
<?php
  return _multilang_process(ob_get_clean());
}
/* ================================================================= FALLBACK */
/**
 * Tip displayed when a "multi" block doesn't contain the required language.
 */
function _multilang_fallback() {
  module_load_include('inc', 'multilang', 'multilang.core');
  ob_start();
?>
[multi]
[en]This section is not translated yet. We apologize for any inconvenience.
[/multi]
<?php
  // Special case: default=NULL notifies not to fallback when required
  // language is not found (or would enter infinite loop).
  return _multilang_process(ob_get_clean(), /*links*/FALSE, /*default*/NULL);
}
/* =================================================================== TOKENS */
/**
 * Localized tokens characteristics.
 */
function _multilang_token_info() {
  return array(
    'multilang-title' => array(
      'name' => '
[multi]
[en]Title with Multilang
[/multi]
      ',
      'description' => '
[multi]
[en]The node title, localized with Multilang
[/multi]
      ',
    ),
    'multilang-native-title' => array(
      'name' => '
[multi]
[en]Title (native) with Multilang
[/multi]
      ',
      'description' => '
[multi]
[en]The node title, in the default site language with Multilang
[/multi]
      ',
    ),
  );
}
/* ================================================================ JS WIDGET */
/**
 * Informative text used in multilang.js widget.
 */
function _multilang_js_widget() {
  module_load_include('inc', 'multilang', 'multilang.core');
  ob_start();
  // CAUTION: this is JSON data.
?>
{
  "backText":
[multi]
[en]"Back"
[/multi],
  "backTitle":
[multi]
[en]"Restore previous content"
[/multi],
  "noticeEmpty":
[multi]
[en]"empty @langNative text"
[/multi],
  "useText":
[multi]
[en]"Use Multilang template"
[/multi],
  "useTitle":
[multi]
[en]"Reformat this area depending on currently defined languages"
[/multi]
}
<?php
  return _multilang_process(ob_get_clean());
}
/* ================================================================= CKEDITOR */
/**
 * Informative text displayed in CKEditor config plugins list.
 */
function _multilang_ckeditor_plugin() {
  module_load_include('inc', 'multilang', 'multilang.core');
  ob_start();
?>
[multi]
[en]Multilang - Plugin to embed multiple languages translations in the same 
field
[/multi]
<?php
  return _multilang_process(ob_get_clean());
}
/* ===================================================================== HELP */
/**
 * Complete documentation.
 */
function _multilang_help() {
  module_load_include('inc', 'multilang', 'multilang.core');
  ob_start();
?>
<h3>
  <em>Multilang</em>
</h3>
[multi]
[en]
<p>
  This module is intended to allow entering all desired translations of a given
  content inside of a unique node, instead of having to create a separate node
  (with <em>Multilingual Content</em>) or a distinct field version (with
  <em>Entity Translation</em>) for each translation.
</p>
<p>
  The benefits of using this method are mainly:
  <ul>
    <li>when entering new content or updating an existing one, authors keep a
    total visibility upon all the translations at the same time</li>
    <li>a direct consequence is to reduce the risk of omitting to update the
    translations when an original content has been modified</li>
    <li>when a content includes a lot of lang-insensitive data (like images,
    links, or simply verbous HTML with a number of attributes), these parts
    don't have to be duplicated: only the textual parts must be entered as
    "multi" and rewritten in the different languages</li>
    <li>since it emulates the SPIP <code>&lt;&nbsp;multi&nbsp;&gt;</code>
    syntax, this method is nicely suitable to allow the direct migration of
    contents from this CMS, without the need of a painful data restructuration
  </li>
    <li>moreover, in the latter case, authors can maintain their previous work
    habits unchanged</li>
  </ul>
</p>
<section>
<h3 class="multilang-toggler" id="install">
  Installation/Configuration
</h3>
<p>
  <em>Multilang</em> works without the need of other translation module,
  assumed you have set the "Internationalization" option of <em>i18n</em>, and
  configured the desired languages. Nevertheless you can simultaneously use
  alternative translation methods, like <em>Multilingual Content</em>,
  <em>Menu translation</em> etc.
</p>
<p>
  By itself, the module contains no configuration option. By cons, to use the
  "multi" syntax you must:
  <ul>
    <li>
      In "Administer > Configuration > Regional and language > Languages",
      enable the "URL" detection method, and configure it to "Path prefix"</li>
    <li>
      For each enabled language, ensure to provide the corresponding standard
      "Path prefix language code" (don't leave it empty)</li>
    <li>
      Position the <em>Language switcher (User interface text)</em> block in a
      region, anywhere you like</li>
  </ul>
</p>
<p>
  If you're also using other options of the <em>i18n</em> module, there are
  some additional configuration options you must pay attention to:
  <ul>
    <li>
      for each node where the "multi" syntax is used, you MUST select the
      <strong>Neutral language</strong> in the "Language" field (or the lang
      switcher would deactivate any lang other than the specified one)</li>
    <li>
      for each block where the the "multi" syntax is used, you MUST
      <strong>keep unchecked all the proposed languages</strong> in the
      "Languages" part of "Visibility settings"</li>
  </ul>
</p>
</section><section>
<h3 class="multilang-toggler" id="syntax">
  Syntax
</h3>
<p>
  NOTE: this is the raw internal structure which makes the <em>Multilang</em>
  mechanism to work, and was initially designed to easily migrate data from
  the <em>SPIP</em> CMS.<br />
  As of 7.x-2.0 you can get totally rid of directly managing the "multi"
  syntax (look at <strong>User interface</strong> below). However you can
  continue to use whenever you want.
</p>
<p>
  When entering data in a text area, you may insert multilingual pieces of
  text by enclosing them between <code>&#91;&nbsp;multi&nbsp;&#93;</code> and
  <code>&#91;&nbsp;/multi&nbsp;&#93;</code> tags.<br />
  Such a piece of text is a "multi" <em>segment</em>, which may contain a
  number of "multi" <em>blocks</em>, each representing the desired content
  translated in a given language, like
  <code>[language&#x2011;mark]&hellip;content&hellip;</code>, where:
  <ul>
    <li>
      <code>language&#x2011;mark</code> is the involved language code, such as
      <code>en</code>, <code>fr</code>, <code>es</code>&hellip;</li>
    <li>
      <code>&hellip;content&hellip;</code> is the translated content</li>
  </ul>
</p>
<p>
  Example:<br />
  <blockquote class="multilang-code"><code>
    &#91;&nbsp;multi&nbsp;&#93;<br />
    &#91;&nbsp;en&nbsp;&#93; This is an english text<br />
    &#91;&nbsp;fr&nbsp;&#93; Ceci est un texte en fran&ccedil;ais<br />
    &#91;&nbsp;/multi&nbsp;&#93;
  </code></blockquote>
</p>
<p>
  Any spaces, newlines, line-breaks or paragraph-breaks are ignored when they
  are located just after the opening tags, juste before the closing tags, and
  just around the language-marks. In other words, each text block is rendered
  trimmed.
</p>
</section><section>
<h3 class="multilang-toggler" id="user-interface">
  User interface
</h3>
<p>
  While <em>Multilang</em> fundamental work is to interpret the "multi" parts
  of text found to render it in the current language when displaying public
  pages, it also manages how these parts are presented to the user when it is
  creating or updating nodes or blocks contents.<br />
  Obviously at this moment the user must be able to look at all the available
  different translations of the same text: this is primarily achieved by
  merely displaying the raw "multi" syntax, as explained above, but it often
  may be a painful job to navigate through a lot of &#91;&nbsp;multi&nbsp;&#93;
  and &#91;&nbsp;lang&nbsp;&#93; tags.
</p>
<p>
  To allow a more friendly way to manage this, <em>Multilang</em> includes
  different UI facilities, depending on which input type is involved:
  <ul>
    <li>
      <strong>"long-text" fields</strong> (such as body), which represent 
      quantitatively the largest part of text and are input through
      <code>&lt; textarea &gt;</code> elements, may contain a lot of (even
      complex) HTML structures: it's why they're usually processed through a
      wysiwyg editor.<br />
      So for them <em>Multilang</em> includes a <em>CKEditor</em> plugin that
      can be activated for any text format (see
      <strong>Using with <em>CKEditor</em></strong> below).
    </li>
    <li>
      <strong>all other text fields</strong> (including "text", "link" and so
      on) are presented by Drupal through simple
      <code>&lt; input type="text" &gt;</code> elements.<br />
      As of 7.x-2.0, <em>Multilang</em> works as follows:
      <ol>
        <li>
          when the element content is already using "multi" syntax, with
          language blocks for each of the currently defined languages,
          attaches a widget (activated on focus) which displays each language
          part in a dedicated cell.
        </li>
        <li>
          when the element contains only raw text, or is already using "multi"
          syntax but with a limited set of languages, offers a "Use Multilang
          template" link, which on click:
          <ul>
            <li>
              automatically normalizes the element content, i.e. formats it 
              with the complete set of currently defined languages (if only raw
              text was present, it is affected to the default site language)
            </li>
            <li>attaches widget as explained above</li>
            <li>offers a "Back" link to restaure the original content</li>
          </ul>
        </li>
      </ol>
      This way the user remains free to normalize input or not (may be keeping
      only a limited set of defined languages), while he has an easy way to
      update when a new language is added to the site.
    </li>
    <li>
      by extension this behaviour is also available for texts which are not 
      really fields, such as <strong>field labels</strong> and <strong>node or 
      block title</strong>.
    </li>
  </ul>
</p>
</section><section>
<h3 class="multilang-toggler" id="ckeditor">
  Using with <em>CKEditor</em>
</h3>
<p>
  With the <em>CKEditor</em> module, you can benefit from improved input method
  which gets you rid of the above syntax and automatically offers input areas
  dedicated to each of the languages defined for the site.<br />
  For this to work:
  <ul>
    <li>
      your version of <em>CKEditor</em> must include the <em>Widget</em> plugin
      (you may install it from the <a href="http://ckeditor.com/builder">
      CKEditor builder</a>)</li>
    <li>
      in the <em>CKEditor</em> configuration, for each profile where you want
      to allow it, in the "EDITOR'S APPEARANCE" group:
      <ol>
        <li>
          in the "Tools bar" section, add the "Multilang" button to the tools
          bar</li>
        <li>
          in the "Plugins" section, check "Multilang" in the list of plugins
          to be activated</li>
      </ol>
    </li>
    <li>
      then with this profile any text field part where the "multi" syntax is
      used automatically displays a "MULTILANG" group, with a subgroup inside
      for each defined language</li>
    <li>
      at any time you may click the "Multilang" button in the tools bar to
      create a new empty "MULTILANG" group</li>
    <li>
      note that only text fields (or blocks text) can be entered through
      <em>CKEDITOR</em>: in views, and in nodes or blocks titles, you still
      must use the "multi" syntax, or the improved interface offered by the
      integrated widget (as of 7.x-2.0)</li>
</p>
</section><section>
<h3 class="multilang-toggler" id="pathauto">
  Using with <em>Pathauto</em>
</h3>
<p>
  With the <em>Pathauto</em> module, if you have introduced "multi" syntax in
  the node titles, you may use the
  <code>[node:multilang&#x2011;native&#x2011;title]</code> token to generate URL
  aliases, which will be localized using the <strong>site default
  language</strong>.
  <br />
  CAUTION: using the <code>[node:title]</code> token would generate aliases
  from the <strong>raw</strong> title, resulting in something like
  <code>multienmy&#x2011;titlefrmon&#x2011;titremulti</code>!
</p>
</section><section>
<h3 class="multilang-toggler" id="views">
  Using with <em>Views</em>
</h3>
<p>
  With the <em>Views</em> module, you can use the "multi" syntax inside of the
  texts you enter in the definition forms of a view.<br />
  They will be rendered like explained above, in the views summary, in the
  previews, and of course in the pages where they are included.
</p>
</section><section>
<h3 class="multilang-toggler" id="tips">
  Tips
</h3>
<ol>
  <li>
    Which language code is used to render depends on the lang part of the
    current URL (such as "en" in <code>http://example.com/en/&hellip;</code>),
    which is generally defined by how the lang switcher is currently set. If no 
    language is currently defined (so Drupal language is empty), the site lang 
    is used.<br />
    As a fortunate side effect, at any moment you may deactivate the lang
    switcher, and all contents including the "multi" syntax are simply rendered
    in the site lang.<br />
    CAUTION, though: at the time this document is written (Drupal 7.34),
    deactivate the lang switcher seems to drop already registered vocabulary
    terms translations!</li>
  <li>
    If a "multi" segment does not contain translation for the current lang, the
    available text in the site lang will be rendered instead.</li>
  <li>
    You may use the "multi" syntax not only in any text field or block body, but
    also in the node or block title, and in field labels.</li>
  <li>
    In order to allow a simple migration of contents from the Spip CMS, an
    alternative syntax is also accepted, using HTML-fashion tags such as
    <code>&lt;&nbsp;multi&nbsp;&gt;</code> and
    <code>&lt;&nbsp;/multi&nbsp;&gt;</code>, rather than
    <code>&#91;&nbsp;multi&nbsp;&#93;</code> and
    <code>&#91;&nbsp;/multi&nbsp;&#93;</code> (but language marks keep using
    square brackets, like in <code>&#91; en  &#93;</code>).<br />
    You may also use this syntax when manually entering text (using plain text
    editor).</li>
  <li>
    Becareful when directly importing data from an external source: due to the
    internal rules of the <em>HTML purifier</em> plugin, <em>CKEditor</em>
    breaks the <em>Multilang</em>'s automatic recognition of language blocks
    when they include <code>&lt; div &gt;</code> tags. You may consider to
    replace them by <code>&lt; section &gt;</code> tags.<br />
    Another solution could be to deactivate the <em>HTML purifier</em> plugin,
    so the &lt;div&gt; tags can be used, but this is not recommended, for
    general security reasons.</li>
</ol>
</section><section>
<h3 class="multilang-toggler" id="localization">
  Localization
</h3>
<p>
  Because of its mission to integrate multiple languages in the same container,
  the <em>Multilang</em> module does not conform to the standard Drupal
   localization system: in this domain, it is self-sufficient and embeds all
   of its own translations, written with the "multi" syntax.<br />
   All these translations (including the text you are reading now) are
   gathered in the file <code>multilang.data.inc</code>.
</p>
<p>
  To add a language, you just have to extend this file, in which the various
  "multi" segments required are divided into a few number of functions,
  standardized according to the following scheme:
  <blockquote class="multilang-code"><code>
    function _multilang_FUNCTION() {<br />
    &nbsp;&nbsp;module_load_include('inc', 'multilang', 'multilang.core');<br />
    &nbsp;&nbsp;ob_start();<br />
    ?&gt;<br />
    <strong>
    &#91;&nbsp;multi&nbsp;&#93;<br />
    &#91;&nbsp;en&nbsp;&#93; This is an english text<br />
    &#91;&nbsp;fr&nbsp;&#93; Ceci est un texte en fran&ccedil;ais<br />
    &#91;&nbsp;/multi&nbsp;&#93;<br />
    </strong>
    &lt;?php<br />
    &nbsp;&nbsp;return _multilang_process(ob_get_clean());<br />
    }
  </code></blockquote>
</p>
<p>
  In the example above, to add a Spanish translation will require you insert it
  in the "multi" segment, which will become:
  <blockquote class="multilang-code"><code>
    <strong>
    &#91;&nbsp;multi&nbsp;&#93;<br />
    &#91;&nbsp;en&nbsp;&#93; This is an english text<br />
    &#91;&nbsp;fr&nbsp;&#93; Ceci est un texte en fran&ccedil;ais<br />
    &#91;&nbsp;es&nbsp;&#93; Este es un texto en español<br />
    &#91;&nbsp;/multi&nbsp;&#93;<br />
    </strong>
  </code></blockquote>
</p>
<p>
  The <em>_multilang_token_info()</em> function is an exception to the above
  diagram, because the text it contains is distributed in a
  two-dimensional array, where each element is a "multi" segment. It is within 
  these that you will insert the new translations.
</p>
<p>
  <em>NOTE FOR ENGLISH SPEAKERS: the creator of this module is not 
  fluent in English, so it is unsure of the quality of writing. <b>All 
  corrections and improvements are welcome.</b></em>
</p>
</section>
[/multi]
<section id="multilang-alert">
[multi]
[en]<strong>CAUTION</strong>: all tags mentioned in this page show spaces 
between square brackets and the tag content, such as <strong>[ multi ]</strong>, 
<strong>[ /multi ]</strong>, <strong>[ en ]</strong>, etc. Here these spaces
are only to prevent tags to be functional in the current context.<br />
When directly entering text in "multi" mode, <strong>never insert spaces 
inside of the tag body</strong>.
[/multi]
</section>
<?php
  return _multilang_process(ob_get_clean());
}
/* ========================================================================== */
