<?php

/**
 * @file
 * Commerce Authorize.net SIM / DPM Capture module.
 */

/**
 * Implements hook_menu().
 */
function commerce_authnet_simdpm_capture_menu() {
  $items = array();

  // Add a menu item for capturing authorizations.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/authnet-simdpm-capture'] = array(
    'title' => 'Capture',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_authnet_simdpm_capture_form', 3, 5),
    'access callback' => 'commerce_authnet_simdpm_capture_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_authnet_simdpm_capture.admin.inc',
  );

  return $items;
}

/**
 * Determines access to the prior authorization capture form for Authorize.Net
 *   DPM credit card transactions.
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be captured.
 *
 * @return
 *   TRUE or FALSE indicating capture access.
 */
function commerce_authnet_simdpm_capture_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Authorize.Net AIM or isn't
  // awaiting capture.
  if ($transaction->payment_method != 'authnet_simdpm' || strtoupper($transaction->remote_status) != 'AUTH_ONLY') {
    return FALSE;
  }

  // Return FALSE if it is more than 30 days past the original authorization.
  if (time() - $transaction->created > 86400 * 30) {
    return FALSE;
  }

  // Allow access if the user can update payments on this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Submits an AIM API request to Authorize.Net.
 *
 * @param $payment_method
 *   The payment method instance array associated with this API request.
 */
function commerce_authnet_simdpm_capture_request($payment_method, $nvp = array()) {
  // Get the API endpoint URL for the method's transaction mode.
  $transaction_mode = empty($payment_method['settings']['transaction_mode']) ? 'test_test' :
    $payment_method['settings']['transaction_mode'];
  switch ($transaction_mode) {
    case 'test_test':
      $nvp['x_test_request'] = 'TRUE';
      $url = AUTHNET_TEST_SERVER;
      break;
    case 'test_live':
      $nvp['x_test_request'] = 'FALSE';
      $url = AUTHNET_TEST_SERVER;
      break;
    case 'live_test':
      $nvp['x_test_request'] = 'TRUE';
      $url = AUTHNET_LIVE_SERVER;
      break;
    case 'production':
      $nvp['x_test_request'] = 'FALSE';
      $url = AUTHNET_LIVE_SERVER;
      break;
  }

  // Add the default name-value pairs to the array.
  $nvp += array(
    // API credentials
    'x_login' => $payment_method['settings']['login_id'],
    'x_tran_key' => $payment_method['settings']['transaction_key'],
    'x_version' => '3.1',

    // Extra administrative values
    'x_delim_data' => 'TRUE',
    'x_delim_char' => '|',
    'x_encap_char' => '"',
    'x_relay_response' => 'FALSE',
    'x_email_customer' => $payment_method['settings']['customer_notification'],
  );

  // Prepare the name-value pair array to be sent as a string.
  $pairs = array();

  foreach ($nvp as $key => $value) {
    $pairs[] = $key . '=' . urlencode($value);
  }

  // Setup the cURL request.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, implode('&', $pairs));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
  $result = curl_exec($ch);

  // Log any errors to the watchdog.
  if ($error = curl_error($ch)) {
    watchdog('commerce_authnet_simdpm_capture', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
    return FALSE;
  }
  curl_close($ch);

  // Make the response an array and trim off the encapsulating characters.
  $response = explode('|', $result);

  for ($i = 0; $i < count($response); $i++) {
    $response[$i] = substr($response[$i], 1, strlen($response[$i]) - 2);
  }

  return $response;
}
