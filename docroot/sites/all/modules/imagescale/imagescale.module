<?php

/**
 * @file
 * Exposes global functionality for creating image styles.
 */

/**
 * Define constant for ImageScale service.
 */
define('IMAGESCALE_SERVICE_DOMAIN', 'imgscale.co');
define('IMAGESCALE_API_URI', 'mgmt.imagescale.co/api/1/');
define('IMAGESCALE_MANAGEMENT_URI', 'http://mgmt.imagescale.co');

// Load all Field module hooks for Image.
module_load_include('inc', 'imagescale', 'imagescale.field');

/**
 * Implements hook_help().
 */
function imagescale_help($path, $arg) {
  switch ($path) {
    case 'admin/help#imagescale':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('ImageScale module gives you the power to use automatic transformations of images powered by the <a href="@imagescale">ImageScale.co service</a>.', array('@imagescale' => 'http://imagescale.co')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Manipulating images') . '</dt>';
      $output .= '<dd>' . t('With the ImageScale module and service you can scale, crop, resize, rotate and desaturate images without affecting the original image using <a href="@imagescale">automations</a>. TODO: When you change an image style, the module automatically refreshes all created images. Every automation (which can replace Drupal-native image styles) must have a name, which will be used in the URL of the generated images. There are two common approaches to naming image styles (which you use will depend on how the image style is being applied):',array('@imagescale' => IMAGESCALE_MANAGEMENT_URI . '/automations'));
      $output .= '<ul><li>' . t('Based on where it will be used: eg. <em>profile-picture</em>') . '</li>';
      $output .= '<li>' . t('Describing its appearance: eg. <em>square-85x85</em>') . '</li></ul>';
      $output .=  t('After you create an image style, you can add effects: crop, scale, resize, rotate, and desaturate and more effects being added to the ImageScale service all the time. For example, by combining effects as crop, scale, and desaturate, you can create square, grayscale thumbnails.') . '<dd>';
      $output .= '<dt>' . t('Attaching images to content as fields') . '</dt>';
      $output .= '<dd>' . t("Image module also allows you to attach images to content as fields. To add an image field to a <a href='@content-type'>content type</a>, go to the content type's <em>manage fields</em> page, and add a new field of type <em>Image</em>. Attaching images to content this way allows ImageScale automations to be applied and maintained, and also allows you more flexibility when theming.", array('@content-type' => url('admin/structure/types'))) . '</dd>';
      $output .= '</dl>';
      return $output;
    case 'admin/config/media/imagescale':
      $success = FALSE;
      $output = '<p>';
      if (!variable_get('imagescale_namespace', '') || !variable_get('imagescale_apikey', '')) {
        $output .= t('Please set both your namespace and API key from ImageScale in the form belowe.') . ' ';
      }
      elseif (imagescale_verify_api_key() === FALSE) {
        $output .= t('Testing your API connection failed.  Your namespace or API key must not be correct.') . ' ';
      }
      elseif (imagescale_verify_api_key() === TRUE) {
        $success = TRUE;
        $output .= t('Success!  Your API connection works.') . ' ';
      }
      else {
        $output .= t("Unexpected ImageScale response.  Are you connected to the Internet?  See Drupal's watchdog logs for more details.") . ' ';
      }
      if (!$success) {
        $output .= t('Get your API key at <a href="@imagescale">ImageScale.co service</a>', array('@imagescale' => IMAGESCALE_MANAGEMENT_URI));
      }
      $output .= '</p>';
      $output .= t('Set up your <a href="@imagescale_automations">automations</a>.</p>', array('@imagescale' => IMAGESCALE_MANAGEMENT_URI, '@imagescale_automations' => IMAGESCALE_MANAGEMENT_URI . '/automations'));

      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function imagescale_menu() {
  $items = array();

  $items['admin/config/media/imagescale'] = array(
    'title' => t('ImageScale'),
    'description' => t('Use the imagescale service to automate transformations of your images.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('imagescale_settings_form'),
    'access arguments' => array('administer imagescale'),
    'file' => 'imagescale.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function imagescale_theme() {
  return array(
    // Theme functions in image.module.
    'imagescale_style' => array(
      'variables' => array(
        'style_name' => NULL,
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
    ),

    // Theme functions in image.field.inc.
    'imagescale_widget' => array(
      'render element' => 'element',
    ),
    'imagescale_formatter' => array(
      'variables' => array('item' => NULL, 'path' => NULL, 'image_style' => NULL),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function imagescale_permission() {
  return array(
    'administer imagescale' => array(
      'title' => t('Administer image styles'),
      'description' => t('Administer connection to the ImageScale service.'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function imagescale_form_system_file_system_settings_alter(&$form, &$form_state) {
  $form['#submit'][] = 'imagescale_system_file_system_settings_submit';
}

/**
 * Submit handler for the file system settings form.
 *
 * Adds a menu rebuild after the public file path has been changed, so that the
 * menu router item depending on that file path will be regenerated.
 */
function imagescale_system_file_system_settings_submit($form, &$form_state) {
  if ($form['file_public_path']['#default_value'] !== $form_state['values']['file_public_path']) {
    // TODO - shouldn't be any need for ImageScale to do anything here
  }
}

/**
 * Implements hook_file_move().
 */
function imagescale_file_move($file, $source) {
  // Delete any image derivatives at the original image path.
  // TODO what could/should imagescale do now?
  // image_path_flush($source->uri);
}

/**
 * Implements hook_file_delete().
 */
function imagescale_file_delete($file) {
  // Delete any image derivatives of this image.
  // TODO probably nothing for imagescale to do here, either
  // image_path_flush($file->uri);
}

/**
 * Get an array of all styles and their settings.
 *
 * @return
 *   An array of styles keyed by the image style ID (isid).
 * @see imagescale_style_load()
 */
function imagescale_styles() {
  $styles = &drupal_static(__FUNCTION__);

  // Grab from cache or build the array.
  if (!isset($styles)) {
    if ($cache = cache_get('imagescale_styles', 'cache')) {
      $styles = $cache->data;
    }
    else {
      $styles = array();

      cache_set('imagescale_styles', $styles);
    }
  }
  $json = imagescale_api_http_request("automations");
  $raw_styles = drupal_json_decode($json);
  if ($raw_styles && is_array($raw_styles)) {
    foreach($raw_styles as $raw_style) {
      $label = $raw_style['path'];
      foreach ($raw_style['actions'] as $action) {
        if ($action['name'] === 'Load') {
          $load_source = $action['parameters']['source']['value'];
          break;
        }
      }
      $styles[$label] = array(
        'label' => $label,
        'load_source' => $load_source,
        'description' => isset($raw_style['description']) ? $raw_style['description'] : '',
        '_id' => $raw_style['_id'],
      );
    }
  }

  return $styles;
}

/**
 * Make a request to the ImageScale API, using the saved API key.
 *
 * @param string $path
 * @param string $method
 * @return mixed
 */
function imagescale_api_http_request($path, $method = 'GET') {
  $namespace = variable_get('imagescale_namespace', '');
  $key = variable_get('imagescale_apikey', '');
  $url = 'http://' . $namespace . ':' . $key . '@' . IMAGESCALE_API_URI . $path;
  $options = array(
    'headers' => array(
      'User-Agent' => 'Drupal ImageScale Module',
    ),
    'method' => $method,
  );
  $result = drupal_http_request($url, $options);
  if (is_object($result)) {
    if ($result->code == 200) {
      return $result->data;
    }
    elseif ($result->code == 401) {
      watchdog('imagescale', 'Access denied for url: @url', array('@url' => $url));
      return $result->error;
    }
  }
}

/**
 * Verify the API settings.
 */
function imagescale_verify_api_key() {
  $response = imagescale_api_http_request('verify');
  if ($response == "ImageScale is on the internet ready to transform your images.") {
    return TRUE;
  }
  elseif ($response == "Unauthorized") {
    return FALSE;
  }
  else {
    watchdog('imagescale', 'Unexpected ImageScale response: @response', array('@response' => $response));
    return NULL;
  }
}

/**
 * Load a style by style name or ID. May be used as a loader for menu items.
 *
 * @param $name
 *   The name of the style.
 * @param $isid
 *   Optional. The numeric id of a style if the name is not known.
 * @param $include
 *   If set, this loader will restrict to a specific type of image style, may be
 *   one of the defined Image style storage constants.
 * @return
 *   An image style array containing the following keys:
 *   - "isid": The unique image style ID.
 *   - "name": The unique image style name.
 *   - "effects": An array of image effects within this image style.
 *   If the image style name or ID is not valid, an empty array is returned.
 * @see image_effect_load()
 */
function imagescale_style_load($name = NULL, $isid = NULL, $include = NULL) {
  $styles = imagescale_styles();

  // If retrieving by name.
  if (isset($name) && isset($styles[$name])) {
    return $styles[$name];
  }

  // If retrieving by image style id.
  if (!isset($name) && isset($isid)) {
    foreach ($styles as $name => $fetched_style) {
      if (isset($fetched_style['_id']) && $fetched_style['_id'] == $isid) {
        return $fetched_style;
      }
    }
  }

  // Otherwise the style was not found.
  return FALSE;
}

/**
 * Get an array of image styles suitable for using as select list options.
 *
 * @param $include_empty
 *   If TRUE a <none> option will be inserted in the options array.
 * @return
 *   Array of image styles both key and value are set to style name.
 */
function imagescale_style_options($include_empty = TRUE) {
  $styles = imagescale_styles();
  $options = array();
  if ($include_empty && !empty($styles)) {
    $options[''] = t('<none>');
  }
  // Use the array concatenation operator '+' here instead of array_merge(),
  // because the latter loses the datatype of the array keys, turning
  // associative string keys into numeric ones without warning.
  $options = $options + drupal_map_assoc(array_keys($styles));
  if (empty($options)) {
    $options[''] = t('No defined styles');
  }
  return $options;
}

/**
 * @TODO decide if we need to make this possible-- allows people to resize
 * images in a WYSIWYG, for instance.
 *
 * Determines the dimensions of the styled image.
 *
 * Applies all of an image style's effects to $dimensions.
 *
 * @param $style_name
 *   The name of the style to be applied.
 * @param $dimensions
 *   Dimensions to be modified - an array with components width and height, in
 *   pixels.
 */
function imagescale_style_transform_dimensions($style_name, array &$dimensions) {
  module_load_include('inc', 'image', 'image.effects');
  $style = image_style_load($style_name);

  if (!is_array($style)) {
    return;
  }

  foreach ($style['effects'] as $effect) {
    if (isset($effect['dimensions passthrough'])) {
      continue;
    }

    if (isset($effect['dimensions callback'])) {
      $effect['dimensions callback']($dimensions, $effect['data']);
    }
    else {
      $dimensions['width'] = $dimensions['height'] = NULL;
    }
  }
}

/**
 * Flush cached media for a style.
 *
 * @TODO decide how/if we do this for imagescale
 *
 * @param $style
 *   An image style array.
 */
function imagescale_style_flush($style) {
  $style_directory = drupal_realpath(file_default_scheme() . '://styles/' . $style['name']);
  if (is_dir($style_directory)) {
    file_unmanaged_delete_recursive($style_directory);
  }

  // Clear field caches so that formatters may be added for this style.
  field_info_cache_clear();
  drupal_theme_rebuild();

  // Clear page caches when flushing.
  if (module_exists('block')) {
    cache_clear_all('*', 'cache_block', TRUE);
  }
  cache_clear_all('*', 'cache_page', TRUE);
}

/**
 * Return the URL for an image derivative given a style and image path.
 *
 * This is analagous to image_style_url() in image.module.
 *
 * @param $style_name
 *   The name of the style to be used with this image.
 * @param $path
 *   The path to the image.
 * @return
 *   The absolute URL where a style image can be downloaded, suitable for use
 *   in an <img> tag. Requesting the URL will cause the image to be created.
 * @see image_style_deliver()
 */
function imagescale_url($style_name, $uri) {
  $url = $uri;
  $style = imagescale_style_load($style_name);
  if (preg_match("|^https?://|", $style['load_source'])) {
    $uri = preg_replace("|^(https?://)|", "", $url);
  }
  preg_match("|^https?://(www\.)?(?P<domain>.*)/|", $url, $matches);
  $domain = $matches['domain'];
  if (preg_match('|^(https?://)?(www\.)?' . $domain . '/|', $style['load_source'])) {
    $uri = preg_replace('|^(https?://)?(www\.)?' . $domain . '/|', "", $uri);
  }

  $namespace = variable_get('imagescale_namespace', '');
  return 'http://' . IMAGESCALE_SERVICE_DOMAIN . '/' . $namespace . '/' . $style_name . '/' . $uri;
}

/**
 * Return the URI of an image when using a style.
 *
 * The path returned by this function may not exist. The default generation
 * method only creates images when they are requested by a user's browser.
 *
 * @param $style_name
 *   The name of the style to be used with this image.
 * @param $uri
 *   The URI or path to the image.
 * @return
 *   The URI to an image style image.
 * @see imagescale_url()
 */
function imagescale_image_drupal_url($style_name, $uri) {
  $scheme = file_uri_scheme($uri);
  if ($scheme) {
    $path = file_uri_target($uri);
  }
  else {
    $path = $uri;
    $scheme = file_default_scheme();
  }
  $uri = $scheme . '://' . $path;

  // Get the path where Drupal sees this file.
  return imagescale_url($style_name, file_create_url($uri));
}

/**
 * Returns HTML for an image using a specific image style.
 *
 * @param $variables
 *   An associative array containing:
 *   - style_name: The name of the style to be used to alter the original image.
 *   - path: The path of the image file relative to the Drupal files directory.
 *     This function does not work with images outside the files directory nor
 *     with remotely hosted images. This should be in a format such as
 *     'images/image.jpg', or using a stream wrapper such as
 *     'public://images/image.jpg'.
 *   - width: The width of the source image (if known).
 *   - height: The height of the source image (if known).
 *   - alt: The alternative text for text-based browsers.
 *   - title: The title text is displayed when the image is hovered in some
 *     popular browsers.
 *   - attributes: Associative array of attributes to be placed in the img tag.
 *
 * @ingroup themeable
 */
function theme_imagescale_style($variables) {
  // Determine the dimensions of the styled image.
  $dimensions = array(
    'width' => $variables['width'],
    'height' => $variables['height'],
  );

  image_style_transform_dimensions($variables['style_name'], $dimensions);

  $variables['width'] = $dimensions['width'];
  $variables['height'] = $dimensions['height'];

  // Determine the URL for the styled image.
  $variables['path'] = imagescale_image_drupal_url($variables['style_name'], $variables['path']);
  return theme('image', $variables);
}

/**
 * Accept a keyword (center, top, left, etc) and return it as a pixel offset.
 *
 * @param $value
 * @param $current_pixels
 * @param $new_pixels
 */
function imagescale_filter_keyword($value, $current_pixels, $new_pixels) {
  switch ($value) {
    case 'top':
    case 'left':
      return 0;

    case 'bottom':
    case 'right':
      return $current_pixels - $new_pixels;

    case 'center':
      return $current_pixels / 2 - $new_pixels / 2;
  }
  return $value;
}