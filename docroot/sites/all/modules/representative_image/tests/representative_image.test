<?php

/**
 * @file
 * Function and unit tests for Representative Image.
 */

/**
 * A base test case for Representative Image
 */
class RepresentativeImageBaseTest extends DrupalWebTestCase {
  /**
   * Enable modules and create users with specific permissions.
   */
  function setUp() {
    $modules = func_get_args();
    if (isset($modules[0]) && is_array($modules[0])) {
      $modules = $modules[0];
    }

    parent::setUp(array_merge(array('representative_image', 'entity', 'file_entity'), $modules));

    $this->admin = $this->drupalCreateUser(array('administer site configuration', 'administer nodes', 'administer content types', 'bypass node access', 'administer users', 'administer files', 'create files', 'edit any files'));
    $this->drupalLogin($this->admin);
  }

  /**
   * Tear down by making sure all added variables have been removed
   */
  function tearDown() {
    module_disable(array('representative_image'));
    drupal_uninstall_modules(array('representative_image'));

    // get all variables and make sure none begin with 'representative_image'
    global $conf;

    $var_exists = FALSE;
    foreach ($conf as $var => $value) {
      if (drupal_substr($var, 0, drupal_strlen('representative_image')) == 'representative_image') {
        $var_exists = TRUE;
        $this->assert('fail', format_string('The variable @v should not exist after representative_image has been uninstalled (its value is @value).', array('@v' => $var, '@value' => serialize($value))));
      }
    }
    $this->assertFalse($var_exists, 'After uninstalling representative_image, no variables beginning with "representative_image" remain.');

    parent::tearDown();
  }

  /**
   * Asserts that, given an entity, the expected image is considered the
   * representative image.
   *
   * @param object $entity
   *   The entity to test.
   *
   * @param string $entity_type
   *   The type of entity being checked.
   *
   * @param object $image
   *   An image object as returned by drupalGetTestFiles(image).
   *
   * @param string $message (optional)
   *   The message to display with the test results.
   */
  function assertRepresentativeImage($entity, $entity_type, $image, $message = '') {
    // @todo: Is there a less brittle assertion here? In threory if a site named
    // every image "image.jpg" and uploaded it, this test would still pass even
    // if the wrong image is being displayed.
    $message = empty($message) ? 'The correct representative image was returned' : $message;
    $this->assertTrue(strpos(representative_image($entity, $entity_type), $image->name), $message);
  }

  /**
   * Asserts that the correct field is set as the representative image field for
   * the given bundle.
   *
   * @param string $entity_type
   *   The type of entity being checked.
   *
   * @param string $bundle_name
   *   The bundle being checked.
   *
   * @param string $field
   *   The name of the field expected to be identified as the representative
   *   image field.
   *
   * @param string $message (optional)
   *   The message to display with the test results.
   */
  function assertRepresentativeImageField($entity_type, $bundle_name, $field, $message = '') {
    $message = empty($message) ? $entity_type . '\'s representative image is correctly set to ' . $field : $message;
    $this->assertTrue(representative_image_get_field($entity_type, $bundle_name) == $field, $message);
  }

  /**
   * Asserts that an image generated by drupalGetTestFiles(image) was displayed
   * correctly.
   *
   * @param  object $image
   *   An image object as returned by drupalGetTestFiles(image).
   *
   * @param  string $haystack (optional)
   *   A string to search for the image path. If provided pregmatch will be used
   *   otherwise assertPattern will be called.
   *
   * @param string $message (optional)
   *   The message to display with the test results.
   */
  function assertImage($image, $haystack = '', $message = '') {
    $message = empty($message) ? $image->name . ' was correctly displayed' : $message;
    list($filename, $extension) = explode('.', $image->filename);
    $pattern = '/' . $filename . '(_?[0-9]?\.{1})' . $extension . '/';

    if (!empty($haystack)) {
      $this->assert((bool) preg_match($pattern, $haystack), $message);
    }
    else {
      $this->assertPattern($pattern, $message);
    }
  }

  /**
   * Asserts that an image generated by drupalGetTestFiles(image) was correctly
   * not displayed.
   *
   * @param  object $image
   *   An image object as returned by drupalGetTestFiles(image).
   *
   * @param  string $haystack (optional)
   *   A string to search for the image path. If provided pregmatch will be used
   *   otherwise assertNoPattern will be called.
   *
   * @param string $message (optional)
   *   The message to display with the test results.
   */
  function assertNoImage($image, $haystack = '', $message = '') {
    $message = empty($message) ? $image->name . ' was correctly not displayed' : $message;
    list($filename, $extension) = explode('.', $image->filename);
    $pattern = '/' . $filename . '(_?[0-9]?)\.' . $extension . '/';

    if (!empty($haystack)) {
      $this->assert(!preg_match($pattern, $haystack), $message);
    }
    else {
      $this->assertNoPattern($pattern, $message);
    }
  }

  /**
   * Provides a random image object.
   *
   * @param string $type
   *   The type of file to be created for testing purposes.
   *
   * @return
   *   A file object which has the following attributes:
   *     $file->url (for example, public://image-2.jpg)
   *     $file->filename (for example, image-2.jpg)
   *     $file->name (for example, image-2)
   */
  function randomFile($type = 'image') {
    // Get all test images in the form of an array.
    $files = $this->drupalGetTestFiles($type);
    // Get the next one on the list, wrapping around if necessary.
    static $i = 0;
    return $files[($i++)%count($files)];
  }

  /**
   * Create an image field.
   *
   * @param string $url
   *   The URL of the admin form where this field is being created.
   *
   * @return string
   *   The name of the newly created field.
   */
  function createImageField($url) {
    $new_field_label = drupal_strtolower($this->randomName());
    $edit = array(
      'fields[_add_new_field][type]' => 'image',
      'fields[_add_new_field][widget_type]' => 'image_image',
      'fields[_add_new_field][label]' => $new_field_label,
      'fields[_add_new_field][field_name]' => $new_field_label,
    );
    $this->drupalPost($url, $edit, 'Save');
    $this->drupalPost(NULL, array(), 'Save field settings');
    $this->drupalPost(NULL, array(), 'Save settings');

    // For some reason, simpletest needs to clear the field cache for the new
    // field to be available properly when field_info_instances() is called.
    field_info_cache_clear();

    return $new_field_label;
  }

  /**
   * Attach a field to a bundle.
   *
   * @param string $entity_type
   *   The type of entity to which this field is being addded.
   *
   * @param string $bundle_name
   *   The bundle to which this field is being added.
   *
   * @param string $field
   *   The name of the field being attached.
   */
  function setRepresentativeImageField($entity_type, $bundle_name, $field) {
    $edit = array(
      'representative_image[' . $entity_type . '][' . $bundle_name . ']' => $field,
    );

    $this->drupalPost('admin/config/media/representative_image', $edit, t('Save configuration'));
    $this->resetStaticVariables();
  }

  /**
   * Reset the provided static variables.
   *
   * @param  array  $names (optional)
   *   An array of variable names to be reset. If empty a default set will be
   *   used.
   */
  function resetStaticVariables($names = array()) {
    if (empty($names)) {
      $names[] = 'representative_image_get_field';
      $names[] = 'field_language';
    }

    foreach ($names as $name) {
      drupal_static_reset($name);
    }
  }

  /**
   * Sets the method that should be used to find a representative image when
   * none is found.
   *
   * @param string $method (optional)
   *   'logo', 'first', 'all'
   */
  function setDefaultMethod($method = '') {
    $edit = array(
      'representative_image_default' => $method,
    );
    $this->drupalPost('admin/config/media/representative_image', $edit, t('Save configuration'));
  }

  /**
   * Get the id for the given type of entity.
   *
   * @param  $type
   *   Entity type.
   *
   * @return string
   */
  function getIdFromPath($type) {
    $id = '';
    $match = array();

    switch ($type) {
      case 'node':
        $pattern = '/node\/([0-9]+)/';
        break;

      case 'file':
        $pattern = '|file/([0-9]+)|';
        break;

      case 'comment':
        $pattern = '/#comment-([0-9]+)/';
        break;
    }

    $pattern = preg_match($pattern, $this->getURL(), $match);
    $id = isset($match[1]) ? $match[1] : '';
    $this->assertTrue(!empty($id), $type . ' id found.');

    return $id;
  }
}

/**
 * Test that entities can have associated representative image fields.
 */
class RepresentativeImageEntitiesTestCase extends RepresentativeImageBaseTest {
  function setUp() {
    parent::setUp();
  }

  public static function getInfo() {
    return array(
      'name' => 'Representative Image functionality',
      'description' => 'Test that entities can have associated representative image fields.',
      'group' => 'Representative Image',
    );
  }

  /**
   * Confirm that the defaults are sensible out of the box.
   */
  function testDefaults() {
    global $base_url;

    // Add some image fields to the article content type.
    $new_field_label1 = $this->createImageField('admin/structure/types/manage/article/fields');

    // Create a test node with some images.
    $image0 = $this->randomFile('image');
    $image1 = $this->randomFile('image');
    $edit = array(
      'title' => ($this->randomName()),
      'files[field_image_' . LANGUAGE_NONE . '_0]' => drupal_realpath($image0->uri),
      'files[field_' . $new_field_label1 . '_' . LANGUAGE_NONE . '_0]' => drupal_realpath($image1->uri),
    );
    $this->drupalPost('node/add/article', $edit, t('Save'));
    $nid_with_image = $this->getIdFromPath('node');

    // Create a test node without any images.
    $edit = array(
      'title' => ($this->randomName()),
    );
    $this->drupalPost('node/add/article', $edit, t('Save'));
    $nid_without_image = $this->getIdFromPath('node');

    // Set default to "logo" and check that it works.
    $this->setDefaultMethod('logo');
    $this->assertTrue(representative_image(node_load($nid_with_image, TRUE), 'node') == theme_get_setting('logo'), 'The global default image out of the box is the logo.');

    // Set default to "find" and check that it works.
    $this->setDefaultMethod('first');
    $this->assertImage($image0, representative_image(node_load($nid_with_image, TRUE), 'node'), 'The global default image out of the box is the first image from the first image field.');

    // Set default to "first_or_logo" and check that it works. Then edit the
    // node to give it an image and check again.
    $this->setDefaultMethod('first_or_logo');
    $this->assertTrue(representative_image(node_load($nid_without_image, TRUE), 'node') == theme_get_setting('logo'), 'The global default image out of the box is the logo.');
    $edit = array(
      'files[field_' . $new_field_label1 . '_' . LANGUAGE_NONE . '_0]' => drupal_realpath($image1->uri),
    );
    $this->drupalPost('node/' . $nid_without_image . '/edit', $edit, t('Save'));
    $this->assertImage($image1, representative_image(node_load($nid_without_image), 'node'), 'The global default image out of the box is the first image from the first image field.');

  }

  /**
   * Confirm that node entities can have representative images.
   */
  function testNodeTest() {
    // Add the existing image field (field_image) for Page.
    $edit = array(
      'fields[_add_existing_field][field_name]' => 'field_image',
      'fields[_add_existing_field][widget_type]' => 'image_image',
      'fields[_add_existing_field][label]' => $this->randomName(),
    );
    $this->drupalPost('admin/structure/types/manage/page/fields', $edit, 'Save');
    $this->drupalPost(NULL, array(), 'Save settings');

    // Add a new field for Page and set the representative images for the article
    // and page content types.
    $new_field_label = $this->createImageField('admin/structure/types/manage/page/fields');
    $this->setRepresentativeImageField('node', 'page', 'field_' . $new_field_label);
    $this->setRepresentativeImageField('node', 'article', 'field_image');

    // Grab some dummy images.
    $images = array();
    for ($i = 0; $i < 3; $i++) {
      $images[$i] = $this->randomFile('image');
    }
    // Now create a new Article with a given image.
    $edit = array(
      'title' => $this->randomName(),
      'files[field_image_' . LANGUAGE_NONE . '_0]' => drupal_realpath($images[0]->uri),
    );
    $this->drupalPost('node/add/article', $edit, t('Save'));

    // Now create a new Page with two images, one per field (this will allow us
    // to test if the correct image is returned as "representative").
    $edit = array(
      'title' => ($article_image = $this->randomName()),
      'files[field_image_' . LANGUAGE_NONE . '_0]' => drupal_realpath($images[1]->uri),
      'files[field_' . $new_field_label . '_' . LANGUAGE_NONE . '_0]' => drupal_realpath($images[2]->uri),
    );
    $this->drupalPost('node/add/page', $edit, t('Save'));

    $this->assertRepresentativeImageField('node', 'page', 'field_' . $new_field_label, 'Page\'s representative image is a new image field (even though field_image does exist.');
    $this->assertRepresentativeImageField('node', 'article', 'field_image');
    $this->assertRepresentativeImage(node_load(1), 'node', $images[0]);
    $this->assertRepresentativeImage(node_load(2), 'node', $images[2]);
  }

  function testUserTest() {
    // Add an image field to the default user bundle and set it as the
    // representative image. By running this process twice we test that changing
    // the representative image field on users works properly.
    for ($i = 1; $i <= 2; $i++) {
      $this->resetStaticVariables();

      $image = $this->randomFile('image');

      $new_field_label = $this->createImageField('admin/config/people/accounts/fields');
      $this->setRepresentativeImageField('user', 'user', 'field_' . $new_field_label);

      // Add an image to the admin user.
      $edit = array(
        'files[field_' . $new_field_label . '_' . LANGUAGE_NONE . '_0]' => drupal_realpath($image->uri),
      );

      $this->drupalPost('user/' . $this->admin->uid . '/edit', $edit, t('Save'));
      $this->assertRepresentativeImageField('user', 'user', 'field_' . $new_field_label);
      $this->assertRepresentativeImage(user_load($this->admin->uid, TRUE), 'user', $image);
    }
  }

  function testCommentTest() {
    $content_type = 'article';

    // Add an image field to the article comment bundle and set it as the
    // representative image. By running this process twice we test that changing
    // the representative image field on comments works properly.
    for ($i = 1; $i <= 2; $i++) {
      $this->resetStaticVariables();

      $image = $this->randomFile('image');

      $new_field_label = $this->createImageField('admin/structure/types/manage/' . $content_type . '/comment/fields');
      $this->setRepresentativeImageField('comment', 'comment_node_' . $content_type, 'field_' . $new_field_label);

      // Add an image to a comment on a node.
      $node = $this->drupalCreateNode(array('type' => $content_type));
      $edit = array(
        'comment_body[' . LANGUAGE_NONE . '][0][value]' => $this->randomString(),
        'files[field_' . $new_field_label . '_' . LANGUAGE_NONE . '_0]' => drupal_realpath($image->uri),
      );
      $this->drupalPost('node/' . $node->nid, $edit, t('Save'));
      $cid = $this->getIdFromPath('comment');

      if (!empty($cid)) {
        $this->assertRepresentativeImageField('comment', 'comment_node_' . $content_type, 'field_' . $new_field_label);
        $this->assertRepresentativeImage(comment_load($cid, TRUE), 'comment', $image);
      }

    }
  }

  function testFileTest() {
    // =========================================================================
    // Imprtant note: This test assumes file_entity-7.x-2.x-unstable7 or higher.
    // =========================================================================
    $file_type = 'document';

    // Add an image field to the file image bundle and set it as the
    // representative image. The language cache needs to be reset, otherwise the
    // fields are not returned properly.
    drupal_static_reset('field_language');
    $file = $this->randomFile($file_type == 'document' ? 'text' : $file_type);
    $image = $this->randomFile('image');

    $new_field_label = $this->createImageField('admin/structure/file-types/manage/' .$file_type  . '/fields');
    $this->setRepresentativeImageField('file', $file_type, 'field_' . $new_field_label);

    // First create the file entity. Do not confuse this with $file.
    $edit = array(
      'files[upload]' => drupal_realpath($file->uri),
    );
    $this->drupalPost('file/add', $edit, t('Submit'));
    $this->clickLink($file->filename);

    $fid = $this->getIdFromPath('file');

    // Now upload an image to our custom field.
    $edit = array(
      'files[field_' . $new_field_label . '_' . LANGUAGE_NONE . '_0]' => drupal_realpath($image->uri),
    );
    $this->drupalPost('file/' . $fid . '/edit', $edit, t('Save'));

    // Get the full file entity.
    $files = entity_load('file', array($fid), array(), TRUE);
    $file = array_pop($files);

    $this->assertRepresentativeImageField('file', $file_type, 'field_' . $new_field_label);
    $this->assertRepresentativeImage($file, 'file', $image);
  }

}

/**
 * Test that third-party modules can alter the representative images.
 */
class RepresentativeImageAlterTestCase extends RepresentativeImageBaseTest {
  function setUp() {
    parent::setUp(array('representative_image_test'));
  }

  public static function getInfo() {
    return array(
      'name' => 'Representative Image Alter functionality',
      'description' => 'Test that third-party modules can alter representative images.',
      'group' => 'Representative Image',
    );
  }

  /**
   * Confirm that node entities can have representative images.
   */
  function testAlterTest() {
    global $base_url;
    $this->assertTrue(representative_image($this->drupalCreateNode(), 'node') == $base_url . '/page.png', 'It is possible for third party modules to alter the representative image for page.');
    $this->assertTrue(representative_image($this->drupalCreateNode(array('type' => 'article')), 'node') == $base_url . '/article.png', 'It is possible for third party modules to alter the representative image for article.');
  }

}

/**
 * Test the views integration.
 */
class RepresentativeImageViewsTestCase extends RepresentativeImageBaseTest {
  function setUp() {
    parent::setUp(array('representative_image_test', 'views'));

    views_invalidate_cache();
  }

  public static function getInfo() {
    return array(
      'name' => 'Representative Image Views Integration',
      'description' => 'Test the views integration of representative images.',
      'group' => 'Representative Image',
    );
  }

  function testViewsIntegration() {
    // Setup articles to have some image fields and set one to be the
    // representative image.
    $new_field_label_1 = $this->createImageField('admin/structure/types/manage/article/fields');
    $new_field_label_2 = $this->createImageField('admin/structure/types/manage/article/fields');
    $this->setRepresentativeImageField('node', 'article', 'field_' . $new_field_label_1);

    $count = 3;
    // Create image files to use for testing.
    for ($i = 0; $i < $count; $i++) {
      $image_array_1[] = $this->randomFile('image');
      $image_array_2[] = $this->randomFile('image');
    }

    // Create article nodes for testing.
    for ($i = 0; $i < $count; $i++) {
      $edit = array(
        'title' => $this->randomName(),
        'files[field_' . $new_field_label_1 . '_' . LANGUAGE_NONE . '_0]' => drupal_realpath($image_array_1[$i]->uri),
        'files[field_' . $new_field_label_2 . '_' . LANGUAGE_NONE . '_0]' => drupal_realpath($image_array_2[$i]->uri),
      );
      $this->drupalPost('node/add/article', $edit, t('Save'));
    }

    // Test that the correct images are being displayed in the test view.
    views_invalidate_cache();
    $this->drupalGet('representative-image-views-test');
    for ($i = 0; $i < $count; $i++) {
      $this->assertImage($image_array_1[$i]);
    }

    // Switch the representative image and check that view changes
    // appropriately.
    $this->setRepresentativeImageField('node', 'article', 'field_' . $new_field_label_2);
    views_invalidate_cache();
    $this->drupalGet('representative-image-views-test');
    for ($i = 0; $i < $count; $i++) {
      $this->assertImage($image_array_2[$i]);
    }

  }

}

/**
 * Test the views integration.
 */
class RepresentativeImageTokenTestCase extends RepresentativeImageBaseTest {
  function setUp() {
    parent::setUp();
  }

  public static function getInfo() {
    return array(
      'name' => 'Representative Image Token Integration',
      'description' => 'Test the token integration of representative images.',
      'group' => 'Representative Image',
    );
  }

  function testTokenIntegration() {
    // Setup articles to have some image fields.
    $new_field_label_1 = $this->createImageField('admin/structure/types/manage/article/fields');
    $new_field_label_2 = $this->createImageField('admin/structure/types/manage/article/fields');

    $image1 = $this->randomFile('image');
    $image2 = $this->randomFile('image');

    // Create an article nodes for testing.
    $edit = array(
      'title' => $this->randomName(),
      'files[field_' . $new_field_label_1 . '_' . LANGUAGE_NONE . '_0]' => drupal_realpath($image1->uri),
      'files[field_' . $new_field_label_2 . '_' . LANGUAGE_NONE . '_0]' => drupal_realpath($image2->uri),
    );
    $this->drupalPost('node/add/article', $edit, t('Save'));
    $node = node_load($this->getIdFromPath('node'));

    // Confirm that the correct image is being replaced properly.
    $this->setRepresentativeImageField('node', 'article', 'field_' . $new_field_label_1);
    $replacement = token_replace("foo [node:representative_image] bar", array('node' => $node));
    $this->assertImage($image1, $replacement);
    $this->assertNoImage($image2, $replacement);

    // Switch the representative image and confirm the representative image is
    // being replaced properly.
    $this->setRepresentativeImageField('node', 'article', 'field_' . $new_field_label_2);
    $replacement = token_replace("foo [node:representative_image] bar", array('node' => $node));
    $this->assertImage($image2, $replacement);
    $this->assertNoImage($image1, $replacement);
  }

}
