<?php

/**
 * @file
 * Allows users to specify a representative image for a content type by choosing
 * which image field contains the appropriate image.
 */

/**
 * Implments hook_menu().
 */
function representative_image_menu() {
  $items['admin/config/media/representative_image'] = array(
    'title' => 'Representative images',
    'description' => 'Specify an image field for each entity bundle to use when a single image that represents the entity is required.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('representative_image_settings_form'),
    'access arguments' => array('administer content types'),
    'file' => 'representative_image.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function representative_image_form_node_type_form_alter(&$form, &$form_state) {
  if (!isset($form['#node_type']->type)) {
    return;
  }

  $type = 'node';
  $bundle = $form['#node_type']->type;

  // Add a responsive image fieldset.
  form_load_include($form_state, 'inc', 'representative_image', 'representative_image.admin');
  representative_image_entity_settings_form($form, $form_state, 'node', entity_get_info('node'), array($bundle));

  // Add handling for the vertical tabs js.
  $form['#attached']['js'][] = drupal_get_path('module', 'representative_image') . '/js/representative_image.js';

  // Adjust the fieldset.
  $form[$type]['#title'] = t('Representative image');
  $form[$type]['#group'] = 'additional_settings';
}

/**
 * Implements hook_token_info().
 */
function representative_image_token_info() {
  $tokens = array();

  $entities = entity_get_info();
  foreach ($entities as $entity_name => $entity) {
    $info['representative_image'] = array(
      'name' => t('Representative image'),
      'description' => format_string('Replaced with an image from a @name\'s field as defined !here.', array('@name' => $entity_name, '!here' => l(t('here'), '/admin/config/media/representative_image'))),
    );
    $tokens[$entity_name] = $info;
  }

  return array(
    'tokens' => $tokens,
  );
}

/**
 * Implements hook_tokens().
 */
function representative_image_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  $entities = entity_get_info();
  foreach ($entities as $entity_name => $entity) {
    if ($type == $entity_name && !empty($data[$entity_name])) {
      $entity_object = $data[$entity_name];

      foreach ($tokens as $name => $original) {
        switch ($name) {
          case 'representative_image':
            $replacements[$original] = representative_image($entity_object, $type);
            break;
        }
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_features_pipe_alter().
 */
function representative_image_features_pipe_alter(&$pipe, $data, $export) {
  if (module_exists('strongarm') && $export['component'] == 'node') {
    foreach ($data as $content_type) {
      $pipe['variable'][] = 'representative_image_field_node_' . $content_type;
    }
  }
}

/**
 * Implements hook_views_api().
 */
function representative_image_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'representative_image') . '/views',
  );
}

/**
 * Given an entity and entity type, returns a representative image.
 *
 * If anything goes wrong, returns the value of the variable.
 *
 * @param $entity
 *   An entity object, for example a node obtained with node_load() or
 *   a user obtained with user_load().
 *
 * @param $entity_type
 *   An entity type, for example, node or user...
 *
 * @return
 *   A string with a representative image as a fully formed absolute URL or an
 *   empty string if nothing could be found.
 */
function representative_image($entity, $entity_type) {
  $image = '';

  $bundle_name = _representative_image_extract_bundle($entity_type, $entity);
  if ($bundle_name) {
    $field = representative_image_get_field($entity_type, $bundle_name);

    if ($field) {
      $field_items = field_get_items($entity_type, $entity, $field);
      if (is_array($field_items) && count($field_items) && isset($field_items[0]['uri'])) {
        $image = file_create_url($field_items[0]['uri']);
      }
    }
  }

  // Allow other modules to swap in their own representative image. We call a
  // seperate alter hook per entity type to help improve performance. Most
  // modules that use this hook will want to treat different types differently.
  drupal_alter('representative_image_' . $entity_type . '_image', $image, $entity, $bundle_name);

  // If all else fails use a sensible default.
  if (empty($image)) {
    $image = representative_image_default($entity, $entity_type, $bundle_name);
  }

  return $image;
}

/**
 * Get the default representative image.
 *
 * @param $entity_type
 *   An entity type like "node", can also be NULL, in which case the bundle
 *   will be ignored and the site default will be returned.
 *
 * @param $bundle
 *   A bundle like "page".
 */
function representative_image_default($entity, $entity_type, $bundle = NULL) {
  global $base_url;

  $method = variable_get('representative_image_default', NULL);
  switch ($method) {
    case 'first':
    case 'first_or_logo':
      if ($bundle) {
        $available_fields = representative_image_available_fields($entity_type, $bundle);
        foreach ($available_fields as $field => $label) {
          $field_items = field_get_items($entity_type, $entity, $field);
          if (is_array($field_items) && count($field_items) && isset($field_items[0]['uri'])) {
            $default = file_create_url($field_items[0]['uri']);
            break;
          }
        }
      }

      if (!empty($default)) {
        break;
      }

    case 'logo':
    case 'first_or_logo':
      $default = $base_url . '/' . preg_replace('/^' . str_replace('/', '\/', $base_url) . '\//', '', theme_get_setting('logo'));
      if (!empty($default)) {
        break;
      }

    default:
      $default = '';
  }

  return $default;
}

/**
 * Given an entity type machine name, returns available image fields.
 */
function representative_image_available_fields($entity_type, $bundle) {
  $fields = array();

  foreach (field_info_instances($entity_type, $bundle) as $name => $info) {
    $supported_widget_types = array(
      'image_image',
      'media_generic',
    );

    if (isset($info['widget']['type']) && in_array($info['widget']['type'], $supported_widget_types)) {
      $fields[$name] = $info['label'] . ' (' . $name . ')';
    }
  }

  return $fields;
}

/**
 * Given an entity type and bundle, get its representative image or NULL.
 */
function representative_image_get_field($entity_type, $bundle_name, $reset = FALSE) {
  $fields = &drupal_static(__FUNCTION__);
  $fields = $reset || is_null($fields) ? array() : $fields;

  if (!array_key_exists($entity_type . '_' . $bundle_name, $fields)) {
    $field = variable_get('representative_image_field_' . $entity_type . '_' . $bundle_name, '');

    $fields[$entity_type . '_' . $bundle_name] = array_key_exists($field, representative_image_available_fields($entity_type, $bundle_name)) ? $field : NULL;
  }

  return $fields[$entity_type . '_' . $bundle_name];
}

/**
 * Set the default field for a given node.
 */
function representative_image_set_field($entity_type, $bundle, $field) {
  variable_set('representative_image_field_' . $entity_type . '_' . $bundle, $field);
}

/**
 * Helper function to more reliably get the bundle of a given entity.
 *
 * @param string $type
 *   The type of entity to check.
 *
 * @param object $entity
 *   The entity object whose bundle we need extracted.
 *
 * @return string
 *   If the entity defines a bundle_key, then the explicitly defined bundle name
 *   is returned, otherwise the entity type is returned.
 */
function _representative_image_extract_bundle($entity_type, $entity) {
  // First try the field_extract_bundle function.
  $bundle = field_extract_bundle($entity_type, $entity);

  // See if there is an entity key defined for bundles.
  if (empty($bundle)) {
    $info = entity_get_info($entity_type);
    if (isset($info['entity keys']['bundle']) && isset($entity->{$info['entity keys']['bundle']})) {
      $bundle = $entity->{$info['entity keys']['bundle']};
    }
  }

  // If all else fails, return the entity type.
  return empty($bundle) ? $entity_type : $bundle;
}

/**
 * Helper function to help you set this up without pointing and clicking.
 *
 * Install the devel module, go to devel/php and type in
 * dpm(_representative_image_deploy_helper()); then copy paste the result in a
 * hook_update_n() function. Edit it there, and finally update your database
 * with drush updb or by visiting update.php.
 * @todo: there must be a better way to handle this.
 */
function _representative_image_deploy_helper() {
  $node_types = node_type_get_types();
  $lines = array();
  $lines[] = '/**';
  $lines[] = ' * Implements hook_update_n(). Set up representative images';
  $lines[] = ' */';
  $lines[] = 'function mymodule_update_7005() {';
  $lines[] = '  variable_set(\'representative_image_default\', \'sites/default/files/path/to/default.png\');';
  $lines[] = '  variable_set(\'representative_image_fields\', array(\'node\' => array(';
  foreach ($node_types as $type => $object) {
    $available_fields = array_keys(representative_image_available_fields($type));
    $lines[] = '    \'' . $type . '\' => \'' . implode('|', $available_fields) . '\',';
  }
  $lines[] = '  )));';
  $lines[] = '}';
  return implode('
', $lines);
}
