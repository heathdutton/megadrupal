<?php
/**
 * @file
 * Mapplic module file.
 */

module_load_include("inc", "mapplic", "includes/mapplic.content_type");

/**
 * Implements hook_permission().
 */
function mapplic_permission() {
  return array(
    'administer mapplic' => array(
      'title' => t('Administer Mapplic'),
      'description' => t('Perform administration tasks for Mapplic.'),
    ),
  );
}

/**
 * Implements hook_library().
 */
function mapplic_library() {
  $library_path = _mapplic_library_path();
  $module_path = drupal_get_path("module", "mapplic");
  $libraries['mapplic'] = array(
    'title' => 'Mapplic',
    'website' => 'http://codecanyon.net/user/sekler?ref=sekler',
    'version' => '1.0',
    'css' => array(
      $library_path . '/html/mapplic/mapplic.css' => array(
        'scope' => 'footer',
        'group' => JS_THEME,
        'weight' => 1000,
      ),
    ),
    'js' => array(
      $library_path . '/html/js/hammer.min.js' => array(),
      $library_path . '/html/js/jquery.easing.js' => array(),
      $library_path . '/html/js/jquery.mousewheel.js' => array(),
      $library_path . '/html/js/smoothscroll.js' => array(),
      $library_path . '/html/mapplic/mapplic.js' => array(),
      $module_path . '/js/mapplic.js' => array(),
      0 => array(
        'type' => 'setting',
        'data' => array(
          'mapplic' => array(
            'source' => url('mapplic/json'),
            'sidebar' => (boolean) variable_get('mapplic_sidebar', TRUE),
            'mapfill' => (boolean) variable_get('mapplic_mapfill', TRUE),
            'zoombuttons' => (boolean) variable_get('mapplic_zoombuttons', TRUE),
            'clearbutton' => (boolean) variable_get('mapplic_clearbutton', TRUE),
            'minimap' => (boolean) variable_get('mapplic_minimap', TRUE),
            'locations' => (boolean) variable_get('mapplic_locations', TRUE),
            'fullscreen' => (boolean) variable_get('mapplic_fullscreen', TRUE),
            'hovertip' => (boolean) variable_get('mapplic_hovertip', TRUE),
            'search' => (boolean) variable_get('mapplic_search', TRUE),
            'animate' => (boolean) variable_get('mapplic_animate', TRUE),
            'developer' => (boolean) variable_get('mapplic_developer_mode', FALSE),
            'zoom' => (boolean) variable_get('mapplic_zoom', TRUE),
            'maxscale' => (int) variable_get('mapplic_max_scale', 10),
          ),
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Returns the path to the mapplic library.
 */
function _mapplic_library_path() {
  return variable_get('mapplic_library_path', module_exists('libraries') ? libraries_get_path('mapplic') : 'sites/all/libraries/mapplic');
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function mapplic_block_info() {

  $blocks['mapplic_map'] = array(
    'info' => t('Mapplic MAP'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function mapplic_block_view($delta = '') {
  switch ($delta) {
    case 'mapplic_map':
      drupal_add_library('mapplic', 'mapplic');
      $block['subject'] = t("Mapplic");
      $block['content'] = '<div id="mapplic"></div>';
      break;
  }
  return $block;
}

/**
 * Implements hook_menu().
 */
function mapplic_menu() {
  $items['admin/config/services/mapplic'] = array(
    'title' => 'Mapplic',
    'description' => 'Manage Mapplic Settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mapplic_admin_settings'),
    'access arguments' => array('administer mapplic'),
    'file' => 'includes/mapplic.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['mapplic/json'] = array(
    'page callback' => '_mapplic_json',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['mapplic/svg/%/map.svg'] = array(
    'page callback' => '_mapplic_svg',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_form().
 */
function mapplic_landmark_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Menu callback function to build the JSON file with all map data.
 */
function _mapplic_json() {
  $settings = array(
    'mapwidth' => 200,
    'mapheight' => 130,
    'categories' => array(),
    'levels' => array(),
  );

  $floors_vocabulary = taxonomy_vocabulary_machine_name_load("mapplic_landmark_floor");
  $floor_terms = taxonomy_get_tree($floors_vocabulary->vid, 0, NULL, TRUE);

  $categories_vocabulary = taxonomy_vocabulary_machine_name_load("mapplic_landmark_category");
  $terms = taxonomy_get_tree($categories_vocabulary->vid);
  foreach ($terms as $term) {
    $settings['categories'][] = array(
      'id' => $term->tid,
      'title' => $term->name,
      'show' => 'TRUE',
    );
  }

  foreach ($floor_terms as $floor) {
    $settings['levels'][$floor->tid] = array(
      'id' => $floor->tid,
      'title' => $floor->name,
      'show' => 'TRUE',
      'locations' => array(),
    );

    try {
      $floor_wrapper = entity_metadata_wrapper('taxonomy_term', $floor);
      if (!empty($floor_wrapper->mapplic_map_jpg)) {
        $floor_file = $floor_wrapper->mapplic_map_jpg->value();
        $settings['levels'][$floor->tid]['minimap'] = file_create_url($floor_file['uri']);
      }
      if (!empty($floor_wrapper->mapplic_map_svg)) {
        $settings['levels'][$floor->tid]['map'] = url('mapplic/svg/' . $floor->tid . '/map.svg');
      }
    } catch (Exception $e) {
      watchdog('entity_metadata_wrapper', 'entity_metadata_wrapper error in %error_loc', array('%error_loc' => __FUNCTION__ . ' @ ' . __FILE__ . ' : ' . __LINE__), WATCHDOG_CRITICAL);
      return;
    }

    $nodes = array();
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'mapplic_landmark')
      ->propertyCondition('status', 1)
      ->fieldCondition('mapplic_floor', 'tid', $floor->tid);
    $result = $query->execute();

    if (isset($result['node'])) {
      $nids = array_keys($result['node']);
      $nodes = node_load_multiple($nids);
    }

    foreach ($nodes as $node) {
      try {
        $wrapper = entity_metadata_wrapper('node', $node);
        $thumb = $description = NULL;
        if (!empty($wrapper->mapplic_thumb->file->fid)) {
          $thumb = $wrapper->mapplic_thumb->value();
          if (!empty($thumb)) {
            $thumb = image_style_url("mapplic_thumb", $thumb['uri']);
          }
        }
        if (!empty($wrapper->body->value)) {
          $description = $wrapper->body->value();
          $description = $description['safe_value'];
        }
        $settings['levels'][$floor->tid]['locations'][] = array(
          'id' => $wrapper->mapplic_svg_id->value(),
          'title' => $node->title,
          'about' => strip_tags($description),
          'description' => strip_tags($description, '<a><b>'),
          'category' => $wrapper->mapplic_category->value()->tid,
          'thumbnail' => $thumb,
          'x' => $wrapper->mapplic_pos_x->value(),
          'y' => $wrapper->mapplic_pos_y->value(),
        );
      } catch (Exception $e) {
        watchdog('entity_metadata_wrapper', 'entity_metadata_wrapper error in %error_loc', array('%error_loc' => __FUNCTION__ . ' @ ' . __FILE__ . ' : ' . __LINE__), WATCHDOG_CRITICAL);
        return;
      }
    }
  }

  echo json_encode($settings);
}

/**
 * Menu callback function to deliver the map SVG file.
 */
function _mapplic_svg($tid) {
  $floor_term = taxonomy_term_load($tid);
  if ($floor_term->vocabulary_machine_name != 'mapplic_landmark_floor') {
    drupal_access_denied();
  }

  drupal_add_http_header('Content-Type', 'text/csv; utf-8');
  drupal_send_headers();

  try {
    $floor_wrapper = entity_metadata_wrapper('taxonomy_term', $floor_term);
    if (!empty($floor_wrapper->mapplic_map_svg)) {
      $floor_map = $floor_wrapper->mapplic_map_svg->raw();
      if (!empty($floor_map)) {
        file_transfer($floor_map['uri'], array());
        exit;
      }
    }
  } catch (Exception $e) {
    watchdog('entity_metadata_wrapper', 'entity_metadata_wrapper error in %error_loc', array('%error_loc' => __FUNCTION__ . ' @ ' . __FILE__ . ' : ' . __LINE__), WATCHDOG_CRITICAL);
    return;
  }

  echo '<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 width="315.777px" height="65.056px" viewBox="0 0 315.777 65.056" enable-background="new 0 0 315.777 65.056"
	 xml:space="preserve">
<text transform="matrix(1 0 0 1 28.8892 36.6665)" font-family="ArialMT" font-size="12">No SVG file set, please upload via the admin.</text>
</svg>
';
  exit;
}
