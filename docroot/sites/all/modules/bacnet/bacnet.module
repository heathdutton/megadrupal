<?php

/**
 * @file
 * Provides Integration with BACnet Web Services.
 */

/**
 * BWS1: BACnet Web Service, ANSI/ASHRAE Standard 135-2012.
 */
define('BACNET_MODE_BWS1', 'bws1');

/**
 * BWS2: BACnet Web Service, Std 135-2012-am, 1st Public Review APR2014.
 */
define('BACNET_MODE_BWS2', 'bws2');

/**
 * BACnet Community edition.
 */
define('BACNET_COMMUNITY', 'community');

/**
 * BACnet Pro edition.
 */
define('BACNET_PRO', 'pro');

/**
 * Implements hook_help().
 */
function bacnet_help($path, $arg) {
  switch ($path) {
    case 'admin/help#bacnet':
      $ret_val = '<h3>' . t('About') . '</h3>';
      $ret_val .= '<p>' . t('The BACnet Block module makes it easy to get data from a BACnet - Advanced Operator Workstation (B-AWS) into a Drupal block.') . '</p>';
      return $ret_val;
  }
}

/**
 * Implements hook_permission().
 */
function bacnet_permission() {
  return array(
    'administer bacnet' => array(
      'title' => t('Administer BACnet'),
      'description' => t('Perform administrative tasks on BACnet functionality'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function bacnet_block_info() {
  return array(
    'value' =>
    array(
      'info' => t('BACnet Test Value'),
      'weight' => 10,
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function bacnet_block_view($delta = '') {
  $block = array();
  $version = variable_get('bacnet_product_version', BACNET_COMMUNITY);
  $mode = variable_get('bacnet_mode', BACNET_MODE_BWS1);

  // Retrieve values using BWS1 SOAP service.
  if ($version == BACNET_COMMUNITY && $mode == BACNET_MODE_BWS1) {
    $bacnet_server = variable_get('bacnet_bws1_server', '');
    $bacnet_login_name = variable_get('bacnet_bws1_login_name', '');
    $bacnet_password = variable_get('bacnet_bws1_password', '');
    $bacnet_gql_expression = variable_get('bacnet_bws1_gql_expression', '');

    // Execute based on the delta value of the block being rendered.
    switch ($delta) {
      case 'value':
        if ($bacnet_server && $bacnet_login_name && $bacnet_password && $bacnet_gql_expression) {
          $usage = bacnet_soap_get_value($bacnet_server, $bacnet_login_name, $bacnet_password, $bacnet_gql_expression);
        }
        else {
          $usage = array(FALSE, array());
        }
        $block = array(
          'content' => $usage[0] ? t('An OpenEnergy Community. Powered by %usage kW.', array('%usage' => $usage[1])) : t('Energy usage not available'),
        );
    }
    return $block;
  }

  // Retrieve values using BWS2 REST service.
  if ($version == BACNET_COMMUNITY && $mode == BACNET_MODE_BWS2) {
    $bacnet_bws2_vendor_id = variable_get('bacnet_bws2_vendor_id', '');
    // Execute based on the delta value of the block being rendered.
    switch ($delta) {
      case 'value':
        if ($bacnet_bws2_vendor_id) {
          $params = array(
            'bacnet_req_id' => $bacnet_bws2_vendor_id,
          );
          $bacnet_result = bacnet_rest_get_value($params);
          if (!$bacnet_result['body']) {
            $usage = 'REST service is offline';
            drupal_set_message(t('Could not connect to OpenEnergy REST server.'), 'error');
          }
          elseif ($bacnet_result['body']['ResultCode'] != 'Success') {
            $usage['energy'] = 'Nil';
            $usage['vendor_req_id'] = 'Invalid';
            $usage['vendor_res_id'] = 'No ID';
            $block = array(
              'content' => t('OpenEnergy Services<br />
              Vendor Request %req_id<br />
              Vendor Result %res_id<br />
              Consumption %usage kW.', array(
                '%usage' => $usage['energy'],
                '%req_id' => $usage['vendor_req_id'],
                '%res_id' => $usage['vendor_res_id'])
              ),
            );
            drupal_set_message(t('BACnet error: %code - %msg', array(
              '%code' => $bacnet_result['body']['ResultCode'],
              '%msg' => $bacnet_result['body']['Message'],
              )), 'error'
            );
          }
          else {
            // ResultCode is Success.
            $usage['energy'] = $bacnet_result['body']['Energy'];
            $usage['vendor_req_id'] = $bacnet_result['body']['VendorReqId'];
            $usage['vendor_res_id'] = $bacnet_result['body']['VendorResId'];
            $block = array(
              'content' => t('OpenEnergy Services<br />
              Vendor Request %req_id<br />
              Vendor Result %res_id<br />
              Consumption %usage kW.', array(
                '%usage' => $usage['energy'],
                '%req_id' => $usage['vendor_req_id'],
                '%res_id' => $usage['vendor_res_id'])
              ),
            );
          }
        }
        else {
          $usage['energy'] = 'Not Configured';
          $usage['vendor_req_id'] = 'No ID';
          $usage['vendor_res_id'] = 'No ID';
          $block = array(
            'content' => t('OpenEnergy Services<br />
            Vendor Request %req_id<br />
            Vendor Result %res_id<br />
            Consumption %usage kW.', array(
              '%usage' => $usage['energy'],
              '%req_id' => $usage['vendor_req_id'],
              '%res_id' => $usage['vendor_res_id'])
            ),
          );
        }
    }
    return $block;
  }
}

/**
 * Implements B-AWS's SOAP Web Services to query for a point value.
 *
 * @return array
 *   Returns associative array containing 'data' element with now energy value.
 */
function bacnet_soap_get_value($bacnet_server, $bacnet_login_name, $bacnet_password, $bacnet_gql_expression) {
  $result = cache_get('bacnet_value_cache_' . $bacnet_gql_expression);
  if (!$result) {
    try {
      // Modified @new to new so that php warnings are NOT suppressed.
      $soapclient = new SoapClient(
        $bacnet_server . '/_common/webservices/Eval?wsdl',
          array(
            'login' => $bacnet_login_name,
            'password' => $bacnet_password,
          )
        );
    }
    catch (Exception $e) {
      return array(FALSE, t('Offline'));
    }

    try {
      $result = $soapclient->getValue($bacnet_gql_expression);
    }
    catch (Exception $e) {
      return array(FALSE, t('No Data'));
    }
    cache_set('bacnet_value_cache_' . $bacnet_gql_expression, $result, 'cache', REQUEST_TIME + 60);
  }
  return array(TRUE, $result->data);
}

/**
 * Implements B-AWS2's REST Services to query for a point value.
 *
 * @return array
 *   Returns an associative array containing now energy value.
 */
function bacnet_rest_get_value($params) {
  $result = bacnet_post('api/bacnet/bws2/rest/request', $params, 'http://dev-openenergy-rest-service.gotpantheon.com');
  return $result;
}

/**
 * Sends HTTP GET request to endpoint.
 *
 * @return array
 *   Returns an associative array containing 'meta' and 'body' elements.
 */
function bacnet_get($endpoint, $parameters, $base_url = '', $account = '', $license = '') {
  $querystring = '';
  if (is_array($parameters)) {
    $querystring = http_build_query($parameters);
    $querystring = str_replace("amp;", "", $querystring);
  }
  $curl_opts = array(
    // Return result instead of echoing.
    CURLOPT_RETURNTRANSFER => TRUE,
    // Follow redirects, Location: headers.
    CURLOPT_FOLLOWLOCATION => FALSE,
    // But dont redirect more than 10 times.
    CURLOPT_MAXREDIRS => 10,
    // Abort if network connection takes more than 5 seconds.
    CURLOPT_CONNECTTIMEOUT => 10,
    CURLOPT_SSL_VERIFYPEER => TRUE,
  );

  // Skip the 2nd element of the array (i.e. $version) - not being used here.
  list($mode, , $account, $license, $base_url) = bacnet_get_config($account, $license, $base_url);

  $curl_opts[CURLOPT_HTTPHEADER] = array(
    'Content-Type: text/json',
    'Authorization: Basic ' . base64_encode("$account:$license"),
    'Date: ' . date(DATE_RFC1123, REQUEST_TIME),
  );

  $url = rtrim($base_url, '/') . '/' . ltrim($endpoint, '/');
  if ($querystring) {
    $url .= '?' . $querystring;
  }
  $curl = curl_init($url);
  foreach ($curl_opts as $opt => $val) {
    curl_setopt($curl, $opt, $val);
  }

  $body = curl_exec($curl);
  $meta = curl_getinfo($curl);
  curl_close($curl);
  if ($body === FALSE) {
    watchdog('bacnet', 'BACnet request failed. This may be an out of date SSL certificates on your server. message: %msg', array('%msg' => curl_error($curl)), WATCHDOG_ERROR);
    return array(
      'body' => '',
      'meta' => $meta,
    );
  }

  if ($mode == BACNET_MODE_BWS2) {
    watchdog('bacnet', 'Request info: !url !headers !response !meta', array(
      '!url' => "<pre>URL : $url</pre>",
      '!headers' => "<pre>Request Headers:\n" . var_export($curl_opts[CURLOPT_HTTPHEADER], TRUE) . '</pre>',
      '!response' => "<pre>Response:\n" . check_plain(var_export($body, TRUE)) . '</pre>',
      '!meta' => "<pre>Response Meta:\n" . var_export($meta, TRUE) . '</pre>',
            ), WATCHDOG_DEBUG);
  }

  if ($body) {
    $body_parsed = json_decode($body, TRUE);
    return array(
      'body' => $body_parsed,
      'meta' => $meta,
    );
  }
  else {
    return array(
      'body' => '',
      'meta' => $meta,
    );
  }
}

/**
 * Sends HTTP POST request to endpoint.
 *
 * @return array
 *   Returns an associative array containing 'meta' and 'body' elements.
 */
function bacnet_post($endpoint, $data, $base_url = '', $account = '', $license = '') {
  $curl_opts = array(
    CURLOPT_RETURNTRANSFER => TRUE,
    CURLOPT_FOLLOWLOCATION => FALSE,
    CURLOPT_MAXREDIRS => 10,
    CURLOPT_CONNECTTIMEOUT => 10,
    CURLOPT_CUSTOMREQUEST => 'POST',
    CURLOPT_SSL_VERIFYPEER => TRUE,
  );

  // Skip the 2nd element of the array (i.e. $version) - not being used here.
  list($mode, , $account, $license, $base_url) = bacnet_get_config($account, $license, $base_url);

  if (is_array($data)) {
    $data = json_encode($data);
  }
  $curl_opts[CURLOPT_POSTFIELDS] = $data;

  $curl_opts[CURLOPT_HTTPHEADER] = array(
    'Content-Length: ' . strlen($data),
    'Content-Type: text/json',
    'Authorization: Basic ' . base64_encode("$account:$license"),
    'Date: ' . date(DATE_RFC1123, REQUEST_TIME),
  );

  $url = rtrim($base_url, '/') . '/' . ltrim($endpoint, '/');
  $curl = curl_init($url);
  foreach ($curl_opts as $opt => $val) {
    curl_setopt($curl, $opt, $val);
  }

  $body = curl_exec($curl);
  $meta = curl_getinfo($curl);
  curl_close($curl);
  if ($body === FALSE) {
    watchdog('bacnet', 'BACnet request failed. This may be an out of date SSL certificates on your server. message: %msg', array('%msg' => curl_error($curl)), WATCHDOG_ERROR);
    return array(
      'body' => '',
      'meta' => $meta,
    );
  }

  if ($mode == BACNET_MODE_BWS2) {
    watchdog('bacnet', 'Request info: !url !headers !body !response !meta', array(
      '!url' => "<pre>URL : $url</pre>",
      '!headers' => "<pre>Request Headers:\n" . var_export($curl_opts[CURLOPT_HTTPHEADER], TRUE) . '</pre>',
      '!body' => "<pre>Request body:\n" . $data . '</pre>',
      '!response' => "<pre>Response:\n" . check_plain(var_export($body, TRUE)) . '</pre>',
      '!meta' => "<pre>Response Meta:\n" . var_export($meta, TRUE) . '</pre>',
            ), WATCHDOG_DEBUG);
  }

  if ($body) {
    $body_parsed = json_decode($body, TRUE);
    return array(
      'body' => $body_parsed,
      'meta' => $meta,
    );
  }
  else {
    return array(
      'body' => '',
      'meta' => $meta,
    );
  }
}

/**
 * Returns BACnet request configurations.
 */
function bacnet_get_config($account = '', $license = '', $base_url = '') {
  $mode = BACNET_MODE_BWS2;
  $version = BACNET_COMMUNITY;
  if (!$account) {
    $account = 'abcdef';
  }
  if (!$license) {
    $license = 'qrstuv';
  }
  if (!$base_url) {
    $base_url = 'http://dev-openenergy-rest-service.gotpantheon.com';
  }
  return array($mode, $version, $account, $license, $base_url);
}
