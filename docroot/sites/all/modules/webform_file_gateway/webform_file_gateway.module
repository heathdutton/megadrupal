<?php
/**
 * @file
 * Provides users with configuration options for controlling private file access
 * with a webform.
 */

/**
 * Implements hook_menu().
 */
function webform_file_gateway_menu() {
  $items = array();
  $items['gateway/download/%webform_file_gateway_download/%'] = array(
    'title' => 'Download File',
    'page callback' => 'webform_file_gateway_download',
    'page arguments' => array(2, 3),
    'access callback' => 'webform_file_gateway_download_access',
    'access arguments' => array(2, 3),
  );
  return $items;
}

/**
 * File gateway download page callback.
 */
function webform_file_gateway_download($download, $created) {
  webform_file_gateway_download_claim($download['did']);
  if (variable_get('webform_file_gateway_cookies', 1)) {
    setcookie('webform_file_gateway_sid', $download['sid'], time() + (3600 * 24 * variable_get('webform_file_gateway_cookie_duration', 7)), '/');
  }
  $file = file_load($download['fid']);
  $data = file_get_contents($file->uri);
  drupal_add_http_header('Content-Type', $file->filemime);
  die($data);
}

/**
 * File gateway download page access callback.
 */
function webform_file_gateway_download_access($download, $created) {
  if (($download['status'] == 0 || $_COOKIE['webform_file_gateway_sid'] == $download['sid']) && $created = $download['created']) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_mail().
 */
function webform_file_gateway_mail($key, &$message, $params) {
  switch ($key) {
    case 'verification_email':
      $message['subject'] = variable_get('webform_file_gateway_email_subject', t('Your file download link'));
      $message['body'][] = t(variable_get('webform_file_gateway_email_message', '!url'), array('!url' => $params['url']));
      break;
  }
}

/**
 * Implements hook_form_alter().
 */
function webform_file_gateway_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'system_file_system_settings':
      $form['#submit'][] = 'webform_file_gateway_settings_submit';
      $form['webform_file_gateway'] = array(
        '#type' => 'fieldset',
        '#title' => t('Webform Private File Gateway'),
        '#tree' => TRUE,
      );
      $form['webform_file_gateway']['enable'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable webform private file gateway.'),
        '#default_value' => variable_get('webform_file_gateway_enable'),
      );
      $form['webform_file_gateway']['options'] = array(
        '#type' => 'fieldset',
        '#title' => t('Configuration Options'),
        '#states' => array(
          'visible' => array(
            ':input[name="webform_file_gateway[enable]"]' => array('checked' => TRUE),
          ),
        ),
      );
      $form['webform_file_gateway']['options']['roles'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Roles'),
        '#options' => user_roles(),
        '#default_value' => variable_get('webform_file_gateway_roles', array(1)),
      );
      $form['webform_file_gateway']['options']['webform'] = array(
        '#type' => 'select',
        '#title' => t('Webform'),
        '#options' => webform_file_gateway_get_webform_options(),
        '#default_value' => variable_get('webform_file_gateway_webform'),
        '#ajax' => array(
          'callback' => 'webform_file_gateway_settings_webform_select_ajax',
          'event' => 'change',
        ),
      );
      $form['webform_file_gateway']['options']['cookies'] = array(
        '#type' => 'fieldset',
        '#title' => t('Cookies'),
      );
      $form['webform_file_gateway']['options']['cookies']['cookies'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable cookies for remembering users who have already submitted the form.'),
        '#description' => t('If disabled, users will be required to fill out the webform each time they request a download and email download links will expire after the first use.'),
        '#return_value' => 1,
        '#default_value' => variable_get('webform_file_gateway_cookies', 1),
      );
      $form['webform_file_gateway']['options']['cookies']['cookie_duration'] = array(
        '#type' => 'textfield',
        '#title' => t('Cookie Duration'),
        '#field_suffix' => t('days'),
        '#size' => 3,
        '#default_value' => variable_get('webform_file_gateway_cookie_duration', 7),
        '#states' => array(
          'visible' => array(
            ':input[name="webform_file_gateway[options][cookies][cookies]"]' => array('checked' => TRUE),
          ),
        ),
      );
      $form['webform_file_gateway']['options']['email'] = array(
        '#type' => 'fieldset',
        '#title' => 'Email Options',
      );
      $form['webform_file_gateway']['options']['email']['email'] = array(
        '#type' => 'checkbox',
        '#title' => t('Require email validation for private file downloads.'),
        '#return_value' => 1,
        '#default_value' => variable_get('webform_file_gateway_email', 1),
      );
      $form['webform_file_gateway']['options']['email']['subject'] = array(
        '#type' => 'textfield',
        '#title' => t('Subject'),
        '#default_value' => variable_get('webform_file_gateway_email_subject', t('Your file download link')),
        '#states' => array(
          'visible' => array(
            ':input[name="webform_file_gateway[options][email][email]"]' => array('checked' => TRUE),
          ),
        ),
      );
      $form['webform_file_gateway']['options']['email']['message'] = array(
        '#type' => 'textarea',
        '#title' => t('Message'),
        '#default_value' => variable_get('webform_file_gateway_email_message', '!url'),
        '#states' => array(
          'visible' => array(
            ':input[name="webform_file_gateway[options][email][email]"]' => array('checked' => TRUE),
          ),
        ),
      );
      $form['webform_file_gateway']['options']['email']['component'] = array(
        '#type' => 'select',
        '#title' => 'Webform Email Component',
        '#options' => webform_file_gateway_webform_components(variable_get('webform_file_gateway_webform')),
        '#default_value' => variable_get('webform_file_gateway_email_component'),
      );
      break;
  }
}

/**
 * File gateway configuration webform list AJAX callback.
 */
function webform_file_gateway_settings_webform_select_ajax(&$form, &$form_state) {
  $components = webform_file_gateway_webform_components($form_state['values']['webform_file_gateway']['options']['webform']);
  $commands = array(
    ajax_command_invoke('select[name="webform_file_gateway[options][email][component]"] option', 'remove'),
  );
  foreach ($components as $id => $name) {
    $commands[] = ajax_command_invoke('select[name="webform_file_gateway[options][email][component]"]', 'append', array(
      '<option value="' . $id . '">' . $name . '</option>',
    ));
  }
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * Implements hook_webform_components().
 */
function webform_file_gateway_webform_components($nid) {
  $components = array();
  if ($node = node_load($nid)) {
    if (!empty($node->webform['components'])) {
      foreach ($node->webform['components'] as $id => $component) {
        $components[$id] = $component['name'];
      }
    }
  }
  return $components;
}

/**
 * Loads the download pass information.
 *
 * @param int $did
 *   The download pass ID
 *
 * @return array
 *   Returns the download pass information.
 */
function webform_file_gateway_download_load($did) {
  $query = db_select('webform_file_gateway_downloads', 'd')
    ->fields('d')
    ->condition('did', $did)
    ->execute()
    ->fetchAssoc();
  return $query;
}

/**
 * Saves new download pass.
 *
 * @param int $fid
 *   The file ID of the file being requested.
 * @param int $sid
 *   The webform submission ID.
 *
 * @return int
 *   Returns the download pass ID.
 */
function webform_file_gateway_download_save($fid, $sid) {
  return db_insert('webform_file_gateway_downloads')
    ->fields(array(
      'fid' => $fid,
      'sid' => $sid,
      'created' => time(),
      'status' => 0,
    ))
    ->execute();
}

/**
 * Mark a download pass as used.
 *
 * @param int $did
 *   The download pass ID.
 *
 * @return array
 *   Returns the update query object.
 */
function webform_file_gateway_download_claim($did) {
  return db_update('webform_file_gateway_downloads')
    ->fields(array(
      'claimed' => time(),
      'status' => 1,
    ))
    ->condition('did', $did)
    ->execute();
}

/**
 * Webform private file gateway configuration form submit callback.
 */
function webform_file_gateway_settings_submit($form, &$form_state) {
  variable_set('webform_file_gateway_enable', $form_state['values']['webform_file_gateway']['enable']);
  variable_set('webform_file_gateway_roles', $form_state['values']['webform_file_gateway']['options']['roles']);
  variable_set('webform_file_gateway_webform', $form_state['values']['webform_file_gateway']['options']['webform']);
  variable_set('webform_file_gateway_cookies', $form_state['values']['webform_file_gateway']['options']['cookies']['cookies']);
  variable_set('webform_file_gateway_cookie_duration', $form_state['values']['webform_file_gateway']['options']['cookies']['cookie_duration']);
  variable_set('webform_file_gateway_email', $form_state['values']['webform_file_gateway']['options']['email']['email']);
  variable_set('webform_file_gateway_email_subject', $form_state['values']['webform_file_gateway']['options']['email']['subject']);
  variable_set('webform_file_gateway_email_message', $form_state['values']['webform_file_gateway']['options']['email']['message']);
  variable_set('webform_file_gateway_email_component', $form_state['values']['webform_file_gateway']['options']['email']['component']);
}

/**
 * Implements hook_file_download().
 */
function webform_file_gateway_file_download($uri) {
  global $user;
  $file = file_load_multiple(array(), array('uri' => $uri));
  $file = reset($file);
  if (variable_get('webform_file_gateway_enable', FALSE) && ((variable_get('webform_file_gateway_cookies', FALSE) && empty($_COOKIE['webform_file_gateway_sid'])) || !variable_get('webform_file_gateway_cookies', FALSE))) {
    foreach (variable_get('webform_file_gateway_roles', array(1)) as $rid) {
      if (webform_file_gateway_user_has_role($rid)) {
        $_SESSION['webform_file_gateway_file'] = $file;
        drupal_goto(url('node/' . variable_get('webform_file_gateway_webform'), array(
          'absolute' => TRUE,
        )));
      }
    }
  }
  elseif (variable_get('webform_file_gateway_enable', FALSE) && variable_get('webform_file_gateway_cookies', FALSE) && !empty($_COOKIE['webform_file_gateway_sid'])) {
    $did = webform_file_gateway_download_save($file->fid, $_COOKIE['webform_file_gateway_sid']);
    $download = webform_file_gateway_download_load($did);
    drupal_goto(format_string('gateway/download/!did/!created', array('!did' => $did, '!created' => $download['created'])));
  }
  return array('Content-Type' => $info['mime_type']);
}

/**
 * Implements hook_webform_submission_insert().
 */
function webform_file_gateway_webform_submission_insert($node, $submission) {
  if (variable_get('webform_file_gateway_enable', FALSE) && $node->nid == variable_get('webform_file_gateway_webform')) {
    $did = webform_file_gateway_download_save($_SESSION['webform_file_gateway_file']->fid, $submission->sid);
    if (variable_get('webform_file_gateway_email', 1)) {
      // Email validation is enabled, send the user to the thank you page.
      $download = webform_file_gateway_download_load($did);
      drupal_mail('webform_file_gateway', 'verification_email', $submission->data[variable_get('webform_file_gateway_email_component')][0], LANGUAGE_NONE, array(
        'url' => url(format_string('gateway/download/!did/!created', array('!did' => $did, '!created' => $download['created'])), array('absolute' => TRUE)),
      ));
    }
    else {
      // Email validation is disabled, send the user directly to the file.
      $download = webform_file_gateway_download_load($did);
      drupal_goto(format_string('gateway/download/!did/!created', array('!did' => $did, '!created' => $download['created'])));
    }
  }
}

/**
 * Returns appropriate webform nodes available for use as gateway form.
 *
 * @return array
 *   Returns an array of webform nodes.
 */
function webform_file_gateway_get_webform_options() {
  $webform_types = webform_variable_get('webform_node_types');
  $webforms = array();
  if ($webform_types) {
    $webforms = db_select('node', 'n')
      ->fields('n')
      ->condition('n.type', $webform_types, 'IN')
      ->execute()
      ->fetchAllAssoc('nid');
  }
  if (!empty($webforms)) {
    $nodes = array();
    foreach ($webforms as $nid => $node) {
      $nodes[$nid] = $node->title;
    }
    return $nodes;
  }
  return NULL;
}

/**
 * Check to see if a user has a particular role.
 *
 * @param int $rid
 *   The role ID.
 * @param object $user
 *   The user object.
 *
 * @return bool 
 *   Returns TRUE or FALSE whether or not a user has the role.
 */
function webform_file_gateway_user_has_role($rid, $user = NULL) {
  if (empty($user)) {
    global $user;
  }
  return isset($user->roles[$rid]);
}
