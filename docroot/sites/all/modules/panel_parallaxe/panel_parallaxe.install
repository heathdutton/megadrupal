<?php
/**
 * @file
 * Install, update, and uninstall functions for the para module.
 */

/**
 * Implements hook_install().
 */
function panel_parallaxe_install() {
  $t = get_t();
  $parallaxe = array(
    'type' => 'para',
    'name' => $t('Parallaxe'),
    'base' => 'node_content',
    'description' => $t('This is an Parallaxe content-type.'),
    'body_label' => $t('Content to appear an the parallaxe'),
  );
  $content_type = node_type_set_defaults($parallaxe);
  node_add_body_field($content_type);

  foreach (_panel_parallaxe_installed_fields() as $field) {
    field_create_field($field);
  }

  foreach (_panel_parallaxe_installed_instances() as $instance) {
    field_create_instance($instance);
  }

  // Check if we create content type or update.
  $status = node_type_save($content_type);
  // Replacement rule for the messages.
  $t_args = array('%name' => $content_type->name);
  if ($status == SAVED_UPDATED) {
    drupal_set_message($t('The content type %name has been updated.', $t_args));
  }
  elseif ($status == SAVED_NEW) {
    drupal_set_message($t('The content type %name has been added.', $t_args));
    watchdog('node', 'Added content type %name.', $t_args, WATCHDOG_NOTICE, l($t('view'), 'admin/structure/types'));
  }
}

/**
 * Implements helper function to define fields.
 */
function _panel_parallaxe_installed_fields() {
  return array(
    'parallaxe' => array(
      'field_name' => 'parallaxe',
      'cardinality' => 1,
      'type'        => 'image',
    ),
  );
}

/**
 * Implements helper function to define instances of fields.
 */
function _panel_parallaxe_installed_instances() {
  $t = get_t();
  return array(
    'parallaxe' => array(
      'field_name' => 'parallaxe',
      'label'       => $t('The Image.'),
      'bundle' => 'para',
      'entity_type' => 'node',
      'widget'      => array(
        'type'    => 'image',
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'image',
        ),
      ),
      'description' => $t('The Image'),
    ),
  );
}

/**
 * Implements hook_uninstall().
 */
function panel_parallaxe_uninstall() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'para');
  $result = $query->execute();
  node_delete_multiple(array_keys($result['node']));
  node_type_delete('para');
  variable_del('panel_parallaxe_css');
}
