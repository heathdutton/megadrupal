<?php

/**
 * @file
 * The main Module Whitelist module file.
 *
 * Module whitelist allows only whitelisted modules to be enabled/disabled
 * unless the user has permission to bypass the whitelist.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Only show whitelisted modules.
 */
function module_whitelist_form_system_modules_alter(&$form, &$form_state) {
  if (user_access('bypass module whitelist')) {
    return;
  }
  if (isset($form['modules'])) {
    // Remove module whitelist from form.
    if (isset($form['modules']['Administration']['module_whitelist'])) {
      unset($form['modules']['Administration']['module_whitelist']);
    }
    // Move locked modules into different part of the form, this ensures
    // the values are still submitted.
    $form['locked'] = array('#tree' => TRUE, '#access' => FALSE);
    // Remove modules from form that are not whitelisted.
    $whitelist_modules = variable_get('module_whitelist', array());
    $whitelist_modules = array_flip($whitelist_modules);
    foreach (element_children($form['modules']) as $package) {
      foreach (element_children($form['modules'][$package]) as $module) {
        if (!isset($whitelist_modules[$module])) {
          // Copy row into locked area.
          $row = $form['modules'][$package][$module];
          $row['#parents'] = array('modules', $package, $module);
          $form['locked'][$package][$module] = $row;
          // Remove from display.
          unset($form['modules'][$package][$module]);
        }
      }
      $modules = element_children($form['modules'][$package]);
      if (empty($modules)) {
        unset($form['modules'][$package]);
      }
    }
    // Altering the $form breaks module_filter_system_modules_submit_recent.
    // Replace its submit handler.
    $key = array_search('module_filter_system_modules_submit_recent', $form['#submit']);
    if ($key) {
      $form['#submit'][$key] = 'module_whitelist_module_filter_system_modules_submit_recent';
    }
  }
}

/**
 * Override module filters recent modules submit handler.
 */
function module_whitelist_module_filter_system_modules_submit_recent($form, &$form_state) {
  $recent_modules = variable_get('module_filter_recent_modules', array());

  foreach ($form_state['values']['modules'] as $package => $modules) {
    foreach ($modules as $key => $module) {
      if (isset($form['modules'][$package][$key]['enable']['#default_value'])) {
        $default_value = $form['modules'][$package][$key]['enable']['#default_value'];
      }
      else {
        $default_value = $form['locked'][$package][$key]['enable']['#default_value'];
      }
      if ($default_value != $module['enable']) {
        $recent_modules[$key] = REQUEST_TIME;
      }
    }
  }

  variable_set('module_filter_recent_modules', $recent_modules);
}

/**
 * Implements hook_permission().
 */
function module_whitelist_permission() {
  return array(
    'bypass module whitelist' => array(
      'title' => t('Bypass module whitelist'),
      'description' => t('Bypass the whitelist filtering of which modules can be enabled/disabled.'),
    ),
    'administer module whitelist' => array(
      'title' => t('Administer module whitelist'),
      'description' => t('Configure modules that are whitelisted.'),
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function module_whitelist_menu_alter(&$items) {
  $items['admin/config/system/module-whitelist'] = array(
    'title' => 'Module Whitelist',
    'description' => 'Add/remove modules from whitelist.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('module_whitelist_admin_settings'),
    'access arguments' => array('administer modules'),
    'file' => drupal_get_path('module', 'module_whitelist') . '/module_whitelist.admin.inc',
  );
}

/**
 * Implements hook_theme().
 */
function module_whitelist_theme() {
  return array(
    'module_whitelist_fieldset' => array(
      'render element' => 'form',
      'file' => 'module_whitelist.admin.inc',
    ),
  );
}

/**
 * Implements hook_help().
 */
function module_whitelist_help($path, $arg) {
  if ($path === 'admin/config/system/module-whitelist') {
    return '<p>' . t("The following selected modules will be available for users with permission 'Administer modules' to enable/disable.") . '</p>';
  }
}
