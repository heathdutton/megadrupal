<?php

/**
 * Implements hook_node_info().
 */
function admin_notification_node_info()
{
	return array
	(
		'admin_notification' => array
		(
			'name' => t('Administration Notification'),
			'base' => 'admin_notification',
			'description' => t('Notifications from site creator to site administrator'),
			'has_title' => TRUE,
			'title_label' => t('Title'),
			'has_body' => TRUE,
			'body_label' => t('Notification'),
		)
	);
}

/**
 * Implements hook_menu().
 */

function admin_notification_menu()
{
	$menu['admin_notification'] = array
	(
		'title' => 'Administration Notification List',
		'description' => 'A list of notifications from site creator to site administrator',
		'page callback' => 'admin_notification_list',
		'access arguments' => array('view administration notifications'),
		'type' => MENU_NORMAL_ITEM,
	);
	$menu['admin/config/system/admin_notification'] = array
	(
		'title' => 'Admin Notification Settings',
		'description' => 'Settings for administration notifications',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('admin_notification_settings_form'),
		'access arguments' => array('administer admin notifications'),
		'type' => MENU_NORMAL_ITEM,
	);
	return $menu;
}

/**
 * Implementation of hook_form().
 */

function admin_notification_form($node, $form_state)
{
	return node_content_form($node, $form_state);
}

/**
 * Implements hook_perm()
 */
function admin_notification_permission()
{
	return array
	(
		'create administration notifications' => array
		(
			'title' => t('Create Administration Notifications'),
			'description' => t('Allows users to create administration notifications'),
		),
		'edit administration notifications' => array
		(
			'title' => t('Edit Administration Notifications'),
			'description' => t('Allows users to edit administration notifications'),
		),
		'delete administration notifications' => array
		(
			'title' => t('Delete Administration Notifications'),
			'description' => t('Allows users to delete administration notifications'),
		),
		'view administration notifications' => array
		(
			'title' => t('View Administration Notifications'),
			'description' => t('Allows users to view Administration notifications'),
		),
		'administer admin notifications' => array
		(
			'title' => t('Administer Administration Notifications'),
			'description' => t('Allows users to administrate the Administration Notifications module'),
		),
	);
}

/** 
 * Implements hook_access()
 */
function admin_notification_access($op, $node, $account)
{
	switch ($op)
	{
		case 'create':
			if(user_access('create administration notifications', $account))
			{
				return NODE_ACCESS_ALLOW;
			}
		case 'update':
			if(user_access('edit administration notifications', $account))
			{
				return NODE_ACCESS_ALLOW;
			}
		case 'delete':
			if(user_access('delete administration notifications', $account))
			{
				return NODE_ACCESS_ALLOW;
			}
	}
	return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_node_access_records()
 */
function admin_notification_node_access_records($node)
{
	$grants = array();
	if($node->type == 'admin_notification')
	{
		$grants[] = array
		(
			'realm' => 'admin_notification_view',
			'gid' => 1,
			'grant_view' => 1,
			'grant_update' => 0,
			'grant_delete' => 0,
			'priority' => 0,
		);
	}
	return $grants;
}

/**
 * Implements hook_node_grants()
 */
function admin_notification_node_grants($account, $op)
{
	$grants = array();
	$permission = (user_is_logged_in() && $op == 'view' && user_access('view administration notifications', $account)) ? 1 : 0;
	$grants['admin_notification_view'][] = $permission;
	return $grants;
}

/**
 * Implements hook_insert()
 */

function admin_notification_insert($node)
{
	global $user, $language;
	$to = variable_get('admin_notification_email', variable_get('site_mail', NULL));
	drupal_mail
	(
		'admin_notification',
		'admin_notification_mail',
		$to,
		$language,
		$node,
		variable_get('site_mail', NULL),
		TRUE
	);
}

/**
 * Implements hook_mail()
 */

function admin_notification_mail($key, &$message, $params)
{
	if($key == 'admin_notification_mail')
	{
		$message['subject'] = t('!site_name Administration Notification: ', array('!site_name' => variable_get('site_name', NULL))) . $params->title;
		$message['body'][] = $params->body['und'][0]['value'];
	}
}

/** 
 * Implements hook_mail_alter()
 */

function admin_notification_mail_alter(&$message)
{
	if($message['id'] == 'admin_notification_admin_notification_mail')
	{
		$message['headers']['Content-Type'] = str_replace('plain','html',$message['headers']['Content-Type']);
	}
}

/**
* Implements hook_view()
*/
 	
function admin_notification_view($node)
{
	$node->title = theme('admin_notification_node_title', array('title' => $node->title));
	return $node;
}
 	
/**
* Implements hook_theme()
*/
 	
function admin_notification_theme()
{
	return array
	(
		'admin_notification_node_title' => array
		(
			'variables' => array
			(
				'title' => NULL
			),
		),
	);
}

/**
* Theme the node title
*/

function theme_admin_notification_node_title($vars)
{
	return t('Administration Notification: @title', array('@title' => $vars['title']));
}

/**
 * Callback function for the page /admin_notification
 */

function admin_notification_list()
{
	$query = db_select('node', 'n')->extend('PagerDefault');
	$result = $query 
		->fields('n', array('nid', 'title', 'created', 'changed'))
		->condition('type', 'admin_notification')
		->condition('status', 1)
		->orderBy('created', 'DESC')
		->limit(5)
		->addTag('admin_notification_list')
		->addTag('node_access')
		->execute();
	$header = array(t('Title'),t('Notification'), t('Date'), t('Last Changed'));
	$rows = array();
	foreach($result as $item)
	{
		$title = check_plain($item->title);
		$node = node_view(node_load($item->nid),'teaser');
		$text = $node['body'][0]['#markup'];
		$row = array();
		$row[] = l($title, 'node/' . $item->nid);
		$row[] = $text;
		$row[] = format_date($item->created,'medium');
		$row[] = ($item->created == $item->changed) ? '---' : format_date($item->changed,'medium');
		$rows[] = $row;
	}
	if(!count($rows))
	{
		$row = array();
		$row[] = array('data' => t('There are currently no notifications'), 'colspan' => 4, 'style' => 'text-align:center');
		$rows[] = $row;
	}
	$data = '';
	$table = array('header' => $header, 'rows' => $rows);
	$data .= theme('table', $table);
	$pager = array('tags' => array('<<', '<', '', '>', '>>'));
	$data .= theme('pager',$pager);
	return $data;
}

/**
 * Callback function for admin/settings/admin_notification
 */

function admin_notification_settings_form()
{
	$current_email = variable_get('admin_notification_email', variable_get('site_mail', NULL));
	$js_settings = array('adminNotification' => array('email' => $current_email));
	drupal_add_js($js_settings, 'setting');
	
	$path = drupal_get_path('module', 'admin_notification');
	$js_path = $path . '/scripts/admin_notification_settings.js';
	$js_options = array
	(
		'group' => JS_DEFAULT,
		'scope' => 'footer',
	);
	$form['admin_notification_email'] = array
	(
		'#type' => 'textfield',
		'#title' => t('Email'),
		'#description' => t('Set the destination email address for administration notification sent by the site creator. The current email address is !address.', array('!address' => $current_email)),
		'#required' => TRUE,
		'#default_value' => variable_get('admin_notification_email', ''),
		'#attached' => array
		(
			'js' => array
			(
				$js_path => $js_options,
			),
		),
	);
	return system_settings_form($form);	
}

function admin_notification_settings_form_validate($form, &$form_state)
{
	if(!valid_email_address($form_state['values']['admin_notification_email']))
	{
		form_set_error('email', t('!address is not a valid email address', array('!address' => $form_state['values']['admin_notification_email'])));
	}
}

