<?php
/**
 * @file
 * Client-side data space.
 */

/**
 * Implements hook_menu().
 */
function datalayer_menu() {
  $items['admin/config/search/datalayer'] = array(
    'title' => 'Data Layer',
    'description' => 'Output page meta data for client-side use.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('datalayer_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'datalayer.admin.inc',
  );

  return $items;
}


/**
 * Implements hook_libraries_info().
 *
 * Defines external libraries.
 */
function datalayer_libraries_info() {
  $libraries = array();

  $libraries['data-layer-helper'] = array(
    'name' => 'Data Layer Helper',
    'version' => '0.1.0',
    'vendor url' => 'https://github.com/google/data-layer-helper',
    'download url' => 'https://github.com/google/data-layer-helper/archive/master.zip',
    'files' => array(
      'js' => array(
        'data-layer-helper.js' => array(
          'type' => 'file',
          'group' => JS_LIBRARY,
          'every_page' => TRUE,
        ),
      ),
    ),
    'error message' => t('Data layer helper library missing.'),
  );
  return $libraries;
}


/**
 * Implements hook_preprocess_HOOK().
 *
 * Outputs meta data details of the page.
 */
function datalayer_preprocess_html(&$variables) {
  $output_data = array();
  $languages = language_list();

  // Add details about the entity page.
  if (variable_get('datalayer_add_page_meta', TRUE)) {
    $type = FALSE;
    $obj = _datalayer_menu_get_any_object($type);
    if (is_object($obj) && $type) {
      // Populate entity properties and values.
      $output_data = _datalayer_get_entity_data($obj, $type);
    }
  }

  // Merge with datalayer_add(), includes defaults.
  $output_data = array_merge($output_data, datalayer_add());

  // Allow modules to alter data with hook_datalayer_alter().
  drupal_alter('datalayer', $output_data);

  $output = !empty($output_data) ? drupal_json_encode($output_data) : '';
  $render = array(
    '#type' => 'html_tag',
    '#tag' => 'script',
    '#value' => 'dataLayer = [' . $output . '];',
    '#attributes' => array(
      'type' => 'text/javascript',
    ),
  );
  drupal_add_html_head($render, 'datalayer_meta');

  // Include data-layer-helper library.
  if (variable_get('datalayer_lib_helper', FALSE)) {
    // Libraries 2.0
    if (function_exists('libraries_load')) {
      if (($library = libraries_detect('data-layer-helper')) && !empty($library['installed'])) {
        libraries_load('data-layer-helper');
      }
      else {
        // Something went wrong.
        $error = $library['error'];
        $error_message = $library['error message'];
      }
    }
    else {
      // Libraies 1.0
      $path = libraries_get_path('data-layer-helper');
      if (!empty($path) && file_exists($path . '/data-layer-helper.js')) {
        drupal_add_js($path . '/data-layer-helper.js');
      }
    }
  }

  // Output configred language data.
  if (count($languages)) {
    drupal_add_js(array('dataLayer' => array('languages' => $languages)), 'setting');
  }

  // Common datalayer JS.
  drupal_add_js(drupal_get_path('module', 'datalayer') . '/datalayer.js');
}


/**
 * Collects up meta data for output.
 *
 * @return array
 *   Array of all candidate entity properties.
 */
function _datalayer_collect_meta_properties() {
  // Avoid duplicate builds.
  $properties = &drupal_static(__FUNCTION__);
  if (!isset($properties)) {

    $properties = array();
    foreach (module_implements('datalayer_meta') as $module) {
      // Call modules implementing datalayer_meta() and combine results.
      $properties = module_invoke($module, 'datalayer_meta');
    }
    drupal_alter('datalayer_meta', $properties);
  }

  return $properties;
}


/**
 * Implements hook_datalayer_meta().
 *
 * Defines default meta data.
 */
function datalayer_datalayer_meta() {
  return array(
    'language',
    'tnid',
    'vid',
    'name',
    'uid',
    'created',
    'status',
  );
}


/**
 * Collect entity data for output and altering.
 *
 * @param object $obj
 *   Entity object of the page menu callback.
 * @param string $type
 *   String representing entitie's type.
 *
 * @return array
 *   All properties and values for output of page entity.
 */
function _datalayer_get_entity_data($obj, $type) {
  $output_data = &drupal_static(__FUNCTION__);
  if (empty($output_data)) {

    // Explicit additions and generalized properties...
    $entity_info = entity_get_info($type);
    $bundle = FALSE;

    // Entity type.
    $output_data['entityType'] = $type;
    // Entity bundle.
    if (isset($obj->{$entity_info['entity keys']['bundle']})) {
      $bundle = $obj->{$entity_info['entity keys']['bundle']};
      $output_data['entityBundle'] = $bundle;
    }
    // Entity indetifier.
    if (isset($obj->{$entity_info['entity keys']['id']})) {
      $output_data['entityId'] = $obj->{$entity_info['entity keys']['id']};
    }
    // Entity title.
    if (isset($entity_info['entity keys']['label'])) {
      $output_data['entityLabel'] = $obj->{$entity_info['entity keys']['label']};
    }
    elseif ($entity_info['label'] === 'User') {
      // User entities don't report a label.
      $output_data['entityLabel'] = $obj->name;
    }

    // Output various entity properties. Allow additions/alterations.
    // NOTE: Properties mean different things on different entity types.
    $properties = _datalayer_collect_meta_properties();
    $selected_properties = array_filter(variable_get('datalayer_global_entity_meta', array()));

    // Build meta output...
    // Honor selective output configuration.
    if (empty($selected_properties)) {
      // Include all in output, only entity valid.
      foreach ($properties as $p) {
        if (isset($obj->$p)) {
          $output_data['entity' . ucfirst($p)] = $obj->$p;
        }
      }
    }
    else {
      // Include only entity valid and config selected.
      foreach ($properties as $p) {
        if (isset($obj->$p) && isset($selected_properties[$p])) {
          $output_data['entity' . ucfirst($p)] = $obj->$p;
        }
      }
    }

    // Output term data.
    if (variable_get('datalayer_output_terms', TRUE)) {
      $selected_vocabs = array_filter(variable_get('datalayer_vocabs', array()));

      if ($type == 'taxonomy_term') {
        $output_data['entityTaxonomy'] = array(
          $obj->vocabulary_machine_name => array($obj->tid => $obj->name)
        );
      }
      else {

        // Meta data on content.
        if ($taxonomy = _datalayer_get_entity_terms($type, $bundle, $obj)) {
          // Limit configured vocabs.
          if (empty($selected_vocabs)) {
            $output_data['entityTaxonomy'] = $taxonomy;
          }
          else {
            foreach ($taxonomy as $vocab => $terms) {
              if (isset($selected_vocabs[$vocab])) {
                $output_data['entityTaxonomy'][$vocab] = $terms;
              }
            }
          }
        }

      }
    }

  }

  return $output_data;
}


/**
 * Allow adding to the data layer easy on the fly, similar to drupal_add_js().
 *
 * @param array $data
 *   An array of dataLayer data keyed by variable name.
 * @param bool $overwrite
 *   If data should overwrite existing dataLayer vars of same name.
 *
 * @return array
 *   All data layer data added thus far.
 */
function datalayer_add($data = array(), $overwrite = FALSE) {
  $output_data = &drupal_static(__FUNCTION__, _datalayer_defaults());

  // If we've been given data, add it to the output.
  if (!empty($data)) {
    if ($overwrite) {
      $output_data = array_merge($output_data, $data);
    }
    else {
      $output_data += $data;
    }
  }

  return $output_data;
}


/**
 * Defines Drupal-wide data layer defaults.
 */
function _datalayer_defaults() {
  global $language, $user;

  return array(
    'drupalLanguage' => $language->language,
    'userUid' => $user->uid,
  );
}


/**
 * Agnosticly get the current menu object. Passed type will be set for you.
 *
 * @param string $return_type
 *   Pass in a type variable by reference for later use.
 *
 * return object
 *   Entity object of current menu callback page.
 */
function _datalayer_menu_get_any_object(&$return_type) {
  // Figure out how this entity is loaded.
  $type = FALSE;
  $item = menu_get_item();

  // Non-entities may not have load functions.
  if (is_array($item['load_functions'])) {
    $vals = array_values($item['load_functions']);
    $load_function = $vals[0];
    $arg_position = array_search($load_function, $item['load_functions']);

    // Compare to entity types.
    $entity_info = entity_get_info();
    foreach ($entity_info as $i => $e) {
      if ($e['load hook'] == $load_function) {
        $type = $i;
      }
    }
  }

  // Many happy returns.
  if ($type && $obj = menu_get_object($type, $arg_position)) {
    if (is_object($obj)) {
      $return_type = $type;
      return $obj;
    }
    else {
      return FALSE;
    }
  }
  else {
    return FALSE;
  }
}


/**
 * Fetch all taxonomy terms from an entity.
 *
 * All fields of field type "taxonomy_term_reference" will be included.
 * Idea found at https://api.drupal.org/comment/50393#comment-50393
 *
 * @param string $entity_type
 *   What type of entity.
 * @param string $bundle
 *   What bundle within entity type.
 * @param object $entity
 *   Actual entity object to process.
 *
 * @return array
 *   Array with tids of entity.
 */
function _datalayer_get_entity_terms($entity_type, $bundle, $entity) {
  $terms = array();

  // Use very lightweight field info list to find relevant fields.
  foreach (field_info_field_map() as $field_name => $field_info) {
    if ($field_info['type'] <> "taxonomy_term_reference") {
      continue;
    }
    if (array_key_exists($entity_type, $field_info['bundles'])) {
      if (in_array($bundle, $field_info['bundles'][$entity_type])) {
        if (isset($entity->{$field_name})) {

          // Collect terms from fields for return.
          $values = field_get_items($entity_type, $entity, $field_name);
          foreach ((array) $values as $term_array) {
            // Limit to existant tids.
            if (isset($term_array['tid'])) {
              $term = taxonomy_term_load($term_array['tid']);
              if (isset($term->tid) && isset($term->name)) {
                $terms[$term->vocabulary_machine_name][$term->tid] = $term->name;
              }
            }
          }

        }
      }
    }
  }

  return $terms;
}
