<?php
/**
 * Tests the functionality of the DataLayer module.
 */

class DataLayerTests extends DrupalWebTestCase {
  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'DataLayer',
      'description' => 'Tests to ensure data makes it client-side.',
    );
  }

  /**
   * Override the setUp() method. Force SimpleTest to use the existing
   * database rather than setting up a dummy.
   */
  public function setUp() {
    parent::setUp();

    $this->privileged_user = $this->drupalCreateUser(array(
      'administer site configuration',
    ));

    /**
     * Setup content.
     */

    // Need three vocabs.
    $this->verbose("Need three vocabularies with terms");
    //https://api.drupal.org/api/drupal/modules!taxonomy!taxonomy.test/class/TaxonomyWebTestCase/7
    // Add terms in each.
    // Add fields to nodes.

    $this->verbose("Need a node with terms");
    //https://api.drupal.org/api/drupal/modules!node!node.test/function/NodeWebTestCase%3A%3AsetUp/7
    // Tag node with terms.
      // One tag in vocab_1. LATER: Confirm when not configured, doesn't output.
      // Two tags in vocab_2. LATER: Affirm both output when configued.
      // No tags in vocab_3. LATER: Confirm when not present doesn't ouptut.

    $settings = array(
      'type' => 'article',
      'title' => $this->randomName(32),
      'body' => array(LANGUAGE_NONE => array(array($this->randomName(64)))),
      'field_terms_1' => '',
      'field_terms_2' => '',
      'field_terms_3' => '',
    );
    $node = $this->drupalCreateNode($settings);
    // For debugging, we might output the node structure with $this->verbose()

    $this->verbose('Node created: ' . var_export($node, TRUE));

    /**
     * Admin configurations.
     */
    $this->verbose("Admin configurations");

    $admin = array(
      'datalayer_add_page_meta' => 1,
      'datalayer_output_terms' => 1,
      'datalayer_services_google' => 1,
      'datalayer_global_entity_meta[]' => array(
        'entityType',
        'bundle',
        'nid',
        'language',
        'name',
      ),
      'datalayer_vocabs[]' => array(
        'test_vocab_1',
        'test_vocab_2',
      ),
    );
    // Save the form.
    $this->drupalPost('admin/config/search/datalayer', $admin, t('Save'));
    // Form was saved.
    $this->assertText(t('The configuration options have been saved.'));

  }

  /**
   * Overide the tearDown() methond. Ensure we don't destroy our own database.
   */
  public function tearDown() {
    parent::tearDown();
  }


  /**
   * Tests configuration and output of admin settings.
   */
  public function dataLayerConfigOutput() {

  /**
   * Confirm output metadeta.
   */

  // Get page contents.
  $this->drupalGet('node/' . $nid);
  $this->drupalGetContent();

  // Check node.
    // Entity Meta Data.
    $this->verbose("Check entity meta data on node.");
      // yes: entity type.
      // yes: bundle.
      // yes: nid type.
      // yes: language type.
      // yes: name.
      // NO: uid.
    // Vocabularies.
    $this->verbose("Check vocabulary meta data on node.");
      // One tag from vocab_1.
      // Not second tag from vocab_1.
      // Both tags from vocab_2.
      // No tags from vocab_3.

  // Check taxonomy term.
    // Entity Meta Data.
    $this->verbose("Check entity meta data on taxonomy term.");
      // yes: entity type.
      // yes: bundle.
      // yes: nid type.
      // yes: language type.
      // yes: name.
      // NO: uid.
    // Vocabularies.
    $this->verbose("Check that term is listed on taxonomy term.");
      // This term is listed.
  }

}
