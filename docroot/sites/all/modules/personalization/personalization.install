<?php
/**
 * @file
 * This file contains the schema info for the database required tables.
 *
 * It also contains the default configuration.
 */

/**
 * Implements hook_schema().
 */
function personalization_schema() {
  $schema = array();

  // Search keyword mapping.
  $schema['personalization_keyword_mapping'] = array(
    'description' => 'Keyword mappings between search terms and taxonomy terms.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for the mapping.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'tid' => array(
        'description' => 'The term id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'vid' => array(
        'description' => 'The vocabulary id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'keyword' => array(
        'description' => 'The search keyword.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the mapping was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'tid' => array(
        'tid',
      ),
      'keyword' => array(
        'keyword',
      ),
      'created' => array(
        'created',
      ),
    ),
    'primary key' => array(
      'id',
    ),
  );

  // Module settings table.
  $schema['personalization_user_scores'] = array(
    'description' => 'Stores the users scores for vocabularies.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for the mapping.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'user' => array(
        'description' => 'The user ID, int if authenticated varchar for anonymous.',
        'type' => 'varchar',
        'length' => 23,
        'not null' => TRUE,
        'default' => '',
      ),
      'vid' => array(
        'description' => 'The vocabulary id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'tid' => array(
        'description' => 'The term id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'pages' => array(
        'description' => 'The number of times the user has accessed a node with a term from this vocabulary.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'searches' => array(
        'description' => 'The number of times the user has search for a keyword mapped to this term.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'location' => array(
        'description' => 'The location has been scored.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'score' => array(
        'description' => 'The sum of the weight * the quantity.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the score was last updated.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'changed'        => array('changed'),
      'score'        => array('score'),
      'tid'        => array('tid'),
      'user'        => array('user'),
      'usertid'        => array('user', 'tid'),
    ),
    'primary key' => array('id'),
  );

  // User locations table - these are stored separately as we do not want the
  // higher score to be added multiple times.
  $schema['personalization_user_locations'] = array(
    'description' => 'User locations table - these are stored separately as we do not want the higher score to be added multiple times.',
    'fields' => array(
      'user' => array(
        'description' => 'The user ID, int if authenticated varchar for anonymous.',
        'type' => 'varchar',
        'length' => 23,
        'not null' => TRUE,
        'default' => '',
      ),
      'latitude' => array(
        'description' => 'The latitude.',
        'type' => 'numeric',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
        'length' => 13,
        'precision' => 13,
        'scale' => 10,
      ),
      'longitude' => array(
        'description' => 'The longitude.',
        'type' => 'numeric',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 0,
        'length' => 15,
        'precision' => 15,
        'scale' => 10,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the score was last updated.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'changed' => array('changed'),
      'latitude' => array('latitude'),
      'longitude' => array('longitude'),
    ),
    'primary key' => array('user'),
  );

  // Cache table for users results.
  $schema['cache_personalization'] = drupal_get_schema_unprocessed('system', 'cache');

  return $schema;
}

/**
 * Implements hook_install().
 */
function personalization_install() {
  // Set the modules default settings.
  $settings = array(
    'pz_user_score_ttl' => 43829,
    'pz_user_content_ttl' => 10,
    'pz_user_type' => array(
      'Anonymous users' => 0,
      'Authenticated users' => 0,
    ),
    'pz_vocabularies' => array(),
    'pz_vocabulary_weights' => array(),
    'pz_search_weight' => 30,
    'pz_geo' => array(
      'from_api' => 0,
      'ask_user' => 0,
    ),
    'pz_geo_user_weight' => 50,
    'pz_geo_vocab_weight' => 10,
  );

  variable_set('personalization_settings', $settings);
}

/**
 * Implements hook_uninstall().
 */
function personalization_uninstall() {
  variable_del('personalization_settings');
}
