<?php

/**
 * @file
 * Primarily Drupal hooks and global API functions to manage personalization
 * configuration and application.
 *
 * Some additional blocks are defined in personalization.display.php as they
 * register displays.
 */

/**
 * Implements hook_menu().
 */
function personalization_menu() {
  $items = array();

  $items['personalization/ajax/init'] = array(
    'title' => 'User init AJAX endpoint',
    'page callback' => 'personalization_ajax_init',
    'access arguments' => array(
      'access content',
    ),
    'file' => 'personalization.ajax.inc',
    'file path' => drupal_get_path('module', 'personalization'),
    'type' => MENU_CALLBACK,
  );

  $items['personalization/ajax/user/location'] = array(
    'title' => 'User location AJAX endpoint',
    'page callback' => 'personalization_ajax_user_location',
    'access arguments' => array(
      'access content',
    ),
    'file' => 'personalization.ajax.inc',
    'file path' => drupal_get_path('module', 'personalization'),
    'type' => MENU_CALLBACK,
  );

  $items['personalization/ajax/get-block'] = array(
    'title' => 'Suggested content',
    'page callback' => 'personalization_ajax_get_list',
    'page arguments' => array(
      'block',
    ),
    'access arguments' => array(
      'access content',
    ),
    'file' => 'personalization.ajax.inc',
    'file path' => drupal_get_path('module', 'personalization'),
    'type' => MENU_CALLBACK,
  );

  $items['personalization/ajax/get-list/%'] = array(
    'title' => 'Suggested content',
    'page callback' => 'personalization_ajax_get_list',
    'page arguments' => array(
      'page',
      3,
    ),
    'access arguments' => array(
      'access content',
    ),
    'file' => 'personalization.ajax.inc',
    'file path' => drupal_get_path('module', 'personalization'),
    'type' => MENU_CALLBACK,
  );

  $items['personalization/ajax/admin/search/terms'] = array(
    'page callback' => 'personalization_ajax_admin_search_terms',
    'access arguments' => array(
      'administer personalization settings',
    ),
    'file' => 'personalization.ajax.inc',
    'file path' => drupal_get_path('module', 'personalization'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/system/personalization'] = array(
    'title' => 'Site personalization',
    'description' => 'Configure the site wide configurarion settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'personalization_admin',
    ),
    'access arguments' => array(
      'administer personalization settings',
    ),
    'file' => 'personalization.admin.inc',
    'file path' => drupal_get_path('module', 'personalization'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/system/personalization/settings'] = array(
    'title' => 'General settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'personalization.admin.inc',
    'file path' => drupal_get_path('module', 'personalization'),
  );

  $items['admin/config/system/personalization/search'] = array(
    'title' => 'Search keyword mapping',
    'type' => MENU_LOCAL_TASK,
    'page callback' => array(
      'personalization_admin_search',
    ),
    'access arguments' => array(
      'administer personalization settings',
    ),
    'file' => 'personalization.admin.inc',
    'file path' => drupal_get_path('module', 'personalization'),
  );

  $items['admin/config/system/personalization/search/delete/%'] = array(
    'title' => 'Delete mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('personalization_search_delete_confirm', 6),
    'access arguments' => array(
      'administer personalization settings',
    ),
    'file' => 'personalization.admin.inc',
    'file path' => drupal_get_path('module', 'personalization'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function personalization_permission() {
  return array(
    'administer personalization settings' => array(
      'title' => t('Administer site personalization settings'),
    ),
    'use personalization' => array(
      'title' => t('Is tracked and receives personalized content.'),
    ),
  );
}

/**
 * Implements hook_init().
 */
function personalization_init() {
  $setting = array(
    'module_path' => drupal_get_path('module', 'personalization'),
  );
  drupal_add_js(array('personalization' => $setting), 'setting');

  module_load_include('inc', 'personalization', 'personalization.geo');
  module_load_include('inc', 'personalization', 'personalization.tracker');
}

/**
 * Implements hook_exit().
 */
function personalization_exit() {
  // If the user doesn't have JS enabled we make a last ditch effort to track
  // them. This only works however if no advanced caching is enabled.
  if (personalization_trackable() && !isset($_COOKIE['has_js'])) {
    personalization_track_page();
    personalization_get_user_location();
    personalization_track_external_search();
  }
}

/**
 * Implements hook_node_view().
 */
function personalization_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full') {
    $setting = array(
      'currentNid' => $node->nid,
    );
    drupal_add_js(array('personalization' => $setting), 'setting');
  }
}

/**
 * Implements hook_search_preprocess().
 */
function personalization_search_preprocess($text) {
  if (!isset($_COOKIE['has_js'])) {
    return personalization_track_search($text);
  }
  else {
    return $text;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function personalization_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  // Is this the geo vocabulary?
  if (isset($form['#term']) && is_array($form['#term']) && isset($form['#term']['vocabulary_machine_name']) && $form['#term']['vocabulary_machine_name'] == PERSONALIZATION_GEO_VOCABULARY_NAME) {
    // Hide the description and path.
    if (isset($form['description'])) {
      $form['description']['#access'] = FALSE;
    }
    if (isset($form['path'])) {
      $form['path']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_cron().
 */
function personalization_cron() {
  personalization_expire_scores();
}

/**
 * Implements hook_theme().
 */
function personalization_theme() {
  return array(
    'pzs_block_list_item' => array(
      'variables' => array(
        'item' => NULL,
      ),
      'template' => 'theme/pzs-block-list-item',
    ),
    'pzs_page_list_item' => array(
      'variables' => array(
        'item' => NULL,
      ),
      'template' => 'theme/pzs-page-list-item',
    ),
    'pzs_list_page' => array(
      'variables' => array(
        'nodes' => NULL,
      ),
      'template' => 'theme/pzs-page-list',
    ),
    'pzs_list_block' => array(
      'variables' => array(
        'nodes' => NULL,
      ),
      'template' => 'theme/pzs-block-list',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function personalization_block_info() {
  $blocks = array();

  $blocks['personalized_content'] = array(
    'info' => t('Personalized Content'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function personalization_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'personalized_content':
      $block['subject'] = t('Suggested content');
      $items = array();
      foreach (personalization_match_content() as $row) {
        $items[] = array(
          '#theme' => 'pzs_block_list_item',
          '#item' => array('nid' => $row->nid, 'title' => $row->title),
        );
      }

      if ($items) {
        $block['content'] = array(
          '#theme' => 'pzs_list_block',
          '#nodes' => $items,
        );
      }
      else {
        $block['content'] = t('No content available.');
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_flush_caches().
 */
function personalization_flush_caches() {
  return array('cache_personalization');
}

/**
 * Returns a paginated list of personalized content.
 *
 * @return string
 *   HTML for paginated listing.
 */
function personalization_paginated_list($nodes_per_page = 10) {
  $items = personalization_match_content($nodes_per_page, 0, FALSE, TRUE);
  $nodes = node_load_multiple(array_keys($items));
  foreach ($nodes as $nid => $row) {
    $teaser = field_view_field('node', $nodes[$nid], 'body', 'teaser');
    $row->teaser = drupal_render($teaser);
    $items[$nid] = theme('pzs_page_list_item', array(
      'item' => array(
        'nid' => $row->nid,
        'title' => $row->title,
        'teaser' => $row->teaser,
      ),
    ));
  }

  return theme('pzs_list_page', array(
    'nodes' => implode('', $items),
  ));
}
