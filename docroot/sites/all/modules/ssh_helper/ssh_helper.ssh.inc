<?php

class SshHelper {

  /**
   * @var $ssh
   *   The ssh object we are working with
   */
  protected $ssh;

  /**
   * @var $hostname
   *   The hostname that this class should help connecting with
   */
  protected $hostname;

  /**
   * @var $user
   *   The user that will be connecting to the hostname
   */
  protected $user;

  /**
   * @var $key
   *   Key that will be used to connect to hostname
   */
  protected $key;

  /**
   * @var $key_path
   *   Path to where the key is saved.
   */
  protected $keyPath;

  /**
   * @var $keyName
   *   The name where the generated key will be saved to.
   */
  protected $keyName;

  /**
   * The mail address that is added to the end of the generated key
   * @var $mail
   */
  protected $mail;

  /**
   * @var $cryptRsa
   *   The object that we use to load our key with
   */
  protected $cryptRsa;

  /**
   * Start working with sshHelper
   *
   * @param $hostname
   *   The hostname of the server you would want to connect with
   */
  function __construct($hostname = NULL, $ssh = NULL) {

    // Auto load our classes
    if (!class_exists('Net_SSH2', false)) {
      if (module_exists('composer_manager') && function_exists('composer_manager_register_autoloader')) {
        composer_manager_register_autoloader();
      }
      else {
        require_once __DIR__ . '/vendor/autoload.php';
      }
    }

    // set the initializer values if there are some.
    if (!empty($hostname)) {
      $this->hostname = $hostname;
    }

    if (!empty($ssh)) {
      $this->setSsh($ssh);
    }
    else if (!empty($hostname)) {
      $ssh = new Net_SSH2($hostname);
      $this->setSsh($ssh);
    }

    // Set default user
    $this->user = variable_get('ssh_helper_username', NULL);

    // Set default key
    $this->key = $this->loadKey();

    // Set our default keyPath

    $keyPathVariable = variable_get('ssh_helper_file_private_key_path', '');
    if (empty($keyPathVariable)) {
      // To make it less obvious, store the key by default in a directory with a name generated by an hmac function.
      // This is good because in the unlikely case that someone stores this in a public files directory, the attacker
      // should already know the name of the folder and the key to proceed.
      $base = file_default_scheme() . '://ssh_helper/';
      $hash = hash_hmac('sha256', $base, drupal_get_private_key() . drupal_get_hash_salt());
      $keyPath = $base . $hash;
      // Set it once, its a globally known value
      variable_set('ssh_helper_file_private_key_path', $keyPath);
      $this->setKeyPath($keyPath);
    }
    else {
      $this->setKeyPath($keyPathVariable);
    }

    // Set the name of the key
    $this->setKeyName(variable_get('ssh_helper_key_filename', 'id_rsa_ssh_helper'));

    // Set the default mail address.
    $this->mail = variable_get('ssh_helper_key_comment', 'drupal@ssh_helper');

  }

  public function generateKeypair() {
    // Get our values
    $key_path = $this->getKeyPath();
    $ssh_filename = $this->getKeyName();
    $ssh_mail = $this->getMail();

    file_prepare_directory($key_path, FILE_CREATE_DIRECTORY);


    // Should be outside the docroot, but try to protect with .htaccess as a fallback.
    file_create_htaccess($key_path, TRUE);
    $public_path = $key_path . '/' . $ssh_filename . '.pub';
    $private_path = $key_path . '/' . $ssh_filename;


    // Deletes the old key pair, if it exists.
    file_unmanaged_delete($private_path);
    file_unmanaged_delete($public_path);

    // Generates the SSH key pair.
    $cmd = 'ssh-keygen -f' . escapeshellarg(drupal_realpath($key_path) . '/' . $ssh_filename) . ' -b 4096 -N "" -C ' . escapeshellarg($ssh_mail);
    exec($cmd, $output, $retval);
    if ($retval !== 0) {
      drupal_set_message("Command failed with output:<br/>$cmd</br>" . implode("<br/>\n",$output), 'error');
    }

    // This is a small hack, but do not apply the 0600 when we are running simpletest. Environment is too complicated
    // to emulate a real system that only has the webuser. Eg.: drush and the user itself
    if (!isset($GLOBALS['drupal_test_info']['test_run_id'])) {
      // Makes sure permissions are right.
      drupal_chmod($private_path, 0600);
    }
    else {
      // Makes sure permissions are right so we can read and remove again in simpletest.
      $base = file_default_scheme() . '://ssh_helper/';
      drupal_chmod($base, 0770);
      drupal_chmod($private_path, 0770);
    }

    // Loads the public key and saves it as a variable.
    $public_key = file_get_contents($public_path);
    variable_set('ssh_helper_public_key', $public_key);
  }

  /**
   * @param mixed $keyName
   */
  public function setKeyName($keyName) {
    $this->keyName = $keyName;
  }

  /**
   * @return mixed
   */
  public function getKeyName() {
    return $this->keyName;
  }

  /**
   * @param mixed $key
   */
  public function setKey($key) {
    $this->key = $key;
  }

  /**
   * @return mixed
   */
  public function getKey() {
    return $this->key;
  }

  /**
   * @param mixed $hostname
   */
  public function setHostname($hostname) {
    $this->hostname = $hostname;
  }

  /**
   * @return mixed
   */
  public function getHostname() {
    return $this->hostname;
  }

  /**
   * @param mixed $user
   */
  public function setUser($user) {
    $this->user = $user;
  }

  /**
   * @return mixed
   */
  public function getUser() {
    return $this->user;
  }

  /**
   * Set an ssh object to use
   * @param $ssh
   */
  function setSsh($ssh) {
    $this->ssh = $ssh;
  }

  /**
   * Get an ssh object to use
   * @param $ssh
   */
  function getSsh() {
    return $this->ssh;
  }

  /**
   * @param mixed $key_path
   */
  public function setKeyPath($keyPath) {
    $this->keyPath = $keyPath;
  }

  /**
   * @return mixed
   */
  public function getKeyPath() {
    return $this->keyPath;
  }

  /**
   * @param mixed $mail
   */
  public function setMail($mail) {
    $this->mail = $mail;
  }

  /**
   * @return mixed
   */
  public function getMail() {
    return $this->mail;
  }

  /**
   * Returns the key file path
   * @return string
   */
  public function getKeyFilePath() {
    $key_path = $this->getKeyPath();
    $ssh_filename = $this->getKeyName();
    return $key_path . '/' . $ssh_filename;
  }

  /**
   * @return mixed
   */
  public function getCryptRsa() {
    if (empty($this->cryptRsa)) {
      $this->cryptRsa = new Crypt_RSA();
    }
    return $this->cryptRsa;
  }

  /**
   * Load the SSH Key if it was set
   *
   * @return Crypt_RSA
   * @throws SshHelperException
   */
  public function loadKey() {
    // Get our Crypt RSA object
    $cryptRsa = $this->getCryptRsa();

    // Load our password if we have any
    $private_key_pass = variable_get('ssh_helper_private_key_pass', '');
    if ($private_key_pass) {
      $cryptRsa->setPassword($private_key_pass);
    }

    // Load our private key in the object
    $private_key  = file_get_contents($this->getKeyFilePath());
    $loaded = $cryptRsa->loadKey($private_key);
    if (!$loaded) {
      return false;
    }
    $this->key = $cryptRsa;
    return $cryptRsa;
  }
}