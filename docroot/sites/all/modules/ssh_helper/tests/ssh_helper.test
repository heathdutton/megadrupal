<?php

/**
 * @file
 * Tests for ssh_helper.module.
 */

/**
 * Tests the node entity preview functionality.
 */
class SshHelperTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'SSH helper functionality test',
      'description' => 'Test the SSH helper functionality.',
      'group' => 'SSH Helper',
    );
  }

  function setUp() {
    parent::setUp('ssh_helper');
    $this->admin_user = $this->drupalCreateUser(array('administer ssh helper'));
  }

  /**
   * Checks the SSH helper settings form.
   */
  function testSshHelperSettingsForm() {
    $this->drupalLogin($this->admin_user);

    // Checks that the key pair is generated and the public key is saved.
    $this->drupalPost('admin/config/services/ssh-helper', array(), t('Regenerate ssh key pair'));
    // Checks that the public key was saved as a variable and looks like a public key.
    $public_key = variable_get('ssh_helper_public_key');
    $this->assertTrue(strpos($public_key, 'ssh-rsa ') === 0, 'Public key saved as variable.');
    $this->assertText($public_key, 'Public key displayed on settings form.');

    // Checks that the private key is hidden away and not web accessible.
    $htaccess_content = file_get_contents(ssh_helper_key_path() . '/.htaccess');
    $this->assertTrue(strpos($htaccess_content, 'Deny from all'), '.htaccess file present in private key directory.');

    $this->drupalGet(file_create_url(ssh_helper_key_path()));
    $this->assertResponse('403', 'Access to the private key directory is forbidden.');

    $ssh_filename = variable_get('ssh_helper_key_filename', 'id_rsa_ssh_helper');
    $private_path = ssh_helper_key_path() . '/' . $ssh_filename;

    $this->drupalGet(file_create_url($private_path));
    $this->assertResponse('403', 'Access to the private key file is forbidden.');

    $private_key = file_get_contents($private_path);

    $this->assertTrue(strpos($private_key, '-----BEGIN RSA PRIVATE KEY-----') === 0, 'Private key found on filesystem.');
    $key = ssh_helper_load_key();
    $this->assertTrue(get_class($key) == 'Crypt_RSA' , 'Key can be loaded.');
  }
}
