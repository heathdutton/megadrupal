<?php
/**
 * @file
 * Module providing a views handler to close and open comments.
 *
 * Mostly copied the node deleting process of node module and the
 * corresponding views handler in views module.
 */

/**
 * Implements hook_menu().
 */
function views_commentcloser_menu() {
  $items['node/%node/comment/close'] = array(
    'title' => 'Close commenting on node',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_commentcloser_comments_close_confirm', 1),
    'access arguments' => array('administer comments'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['node/%node/comment/open'] = array(
    'title' => 'Open commenting on node',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_commentcloser_comments_open_confirm', 1),
    'access arguments' => array('administer comments'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Menu callback -- ask for confirmation of node comment closing and opening
 */
function views_commentcloser_comments_close_confirm($form, &$form_state, $node) {
  $form['#node'] = $node;
  // Always provide entity id in the same form key as in the entity edit form.
  $form['nid'] = array('#type' => 'value', '#value' => $node->nid);
  return confirm_form($form,
    t('Are you sure you want to close commenting on %title?', array('%title' => $node->title)),
    'node/' . $node->nid,
    t('Comments do not get deleted, only adding further comments is disabled.'),
    t('Close'),
    t('Cancel')
  );
}

/**
 * Execute disabling node commenting.
 */
function views_commentcloser_comments_close_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $node = node_load($form_state['values']['nid']);
    $node->comment = COMMENT_NODE_CLOSED;
    node_save($node);
    drupal_set_message(t('Commenting has been disabled on %title.', array('%title' => $node->title)));
  }
  $form_state['redirect'] = 'node/' . $node->nid;
}

/**
 * Menu callback -- ask for confirmation of node comment closing and opening
 */
function views_commentcloser_comments_open_confirm($form, &$form_state, $node) {
  $form['#node'] = $node;
  // Always provide entity id in the same form key as in the entity edit form.
  $form['nid'] = array('#type' => 'value', '#value' => $node->nid);
  return confirm_form($form,
    t('Are you sure you want to enable commenting on %title?', array('%title' => $node->title)),
    'node/' . $node->nid,
    '',
    t('Enable'),
    t('Cancel')
  );
}

/**
 * Execute enabling node commenting.
 */
function views_commentcloser_comments_open_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $node = node_load($form_state['values']['nid']);
    $node->comment = COMMENT_NODE_OPEN;
    node_save($node);
    drupal_set_message(t('Commenting has been enabled on %title.', array('%title' => $node->title)));
  }
  $form_state['redirect'] = 'node/' . $node->nid;
}


/**
 * Implements hook_views_api().
 */
function views_commentcloser_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'views_commentcloser') . '/views',
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function views_commentcloser_field_extra_fields() {
  $extra = array();
  $entities = field_info_bundles();
  foreach ($entities['node'] as $key => $bundle) {
    $extra['node'][$key] = array(
      'display' => array(
        'views_commentcloser' => array(
          'label' => t('Open/Close commenting'),
          'weight' => 0,
        ),
      ),
    );
  }
  return $extra;
}

/**
 * Implements hook_entity_view_alter().
 */
function views_commentcloser_entity_view_alter(&$build, $type) {
  if ($type == $build['#entity_type']) {
    $bundles = field_info_bundles($type);
    $bundle = $bundles[$build['#bundle']];
    if (isset($bundle['layouts'][$build['#view_mode']]['settings']['fields'])) {
      $fields_to_display = array_keys($bundle['layouts'][$build['#view_mode']]['settings']['fields']);

      // Create commentcloser links.
      if (in_array('views_commentcloser', $fields_to_display)) {
        if (user_access('administer comments')) {
          $node = $build['#node'];
          // Commenting is disabled.
          if ($node->comment == COMMENT_NODE_CLOSED) {
            $url = "node/$node->nid/comment/open";
            $text = t('open commenting');
          }
          // Commenting is open.
          else {
            $url = "node/$node->nid/comment/close";
            $text = t('close commenting');
          }
          $build['views_commentcloser'] = array(
            '#prefix' => '<div class="views-commentcloser-link">',
            '#markup' => l($text, $url),
            '#suffix' => '</div>',
          );
        }
      }
    }
  }
}
