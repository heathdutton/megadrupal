<?php
/**
 * @file
 * Main module file for the Format Currencies project.
 */

/**
 * Defines a constant so 0 means the currency is INACTIVE/ OBSOLETE/ EXPIRED.
 */
define('FORMAT_CURRENCY_EXPIRED', 0);

/**
 * Defines a constant so 1 means the currency is ACTIVE.
 */
define('FORMAT_CURRENCY_ACTIVE', 1);

/**
 * Defines a constant so 0 means LEFT for currency symbol alignment.
 */
define('FORMAT_CURRENCY_LEFT', 0);

/**
 * Defines a constant so 1 means RIGHT for currency symbol alignment.
 */
define('FORMAT_CURRENCY_RIGHT', 1);

/**
 * Implementation of hook_ctools_plugin_api().
 */
function format_currency_ctools_plugin_api($owner, $api) {
  if ($owner == 'format_currency' && $api == 'default_currencies') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_help().
 */
function format_currency_help($path, $arg) {
  switch ($path) {
    case 'admin/config/regional/format_currency/overview':
      return t("Manage the currencies for the Format Currencies module.
        <p>
          If a currency code is followed by a '*' character this means the currency is obsolete
          i.e. inactive, no longer in use.
        </p>");
    case 'admin/config/regional/format_currency/add':
      return t('Adds a new currency to the currencies table.');
    case 'admin/config/regional/format_currency/%/edit':
      return t('Edit the %currency currency settings in the currencies table.', array('%currency' => $arg[4]));
  }
}

/**
 * Implements hook_menu().
 */
function format_currency_menu() {
  $items['admin/config/regional/format_currency'] = array(
    'title' => 'Format Currency',
    'description' => 'Manage Format Currency settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('format_currency_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'format_currency.admin.inc',
  );
  $items['admin/config/regional/format_currency/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/regional/format_currency/overview'] = array(
    'title' => 'Overview',
    'description' => 'Manage currency formatting.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('format_currency_admin'),
    'access arguments' => array('administer site configuration'),
    'file' => 'format_currency.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/regional/format_currency/add'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('format_currency_edit'),
    'access arguments' => array('administer site configuration'),
    'file' => 'format_currency.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/regional/format_currency/%format_currency_currencies/edit'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('format_currency_edit', 4),
    'access arguments' => array('administer site configuration'),
    'file' => 'format_currency.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/regional/format_currency/%format_currency_currencies/delete'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('format_currency_delete', 4),
    'access arguments' => array('administer site configuration'),
    'file' => 'format_currency.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function format_currency_theme() {
  return array(
    'format_currency' => array(
      'variables' => array(
        'price' => NULL,
        'param' => array(),
        'base' => NULL,
      ),
    ),
  );
}

/**
 * Implements 'load callback' for format_currency "currencies" exportables.
 *
 * @param $param
 *   Either a string containing a Currency Code or an array of conditions to
 * match against in the database query.
 *
 * @return
 *   A currency object, or FALSE on failure.
 */
function format_currency_currencies_load($name) {
  ctools_include('export');
  $result = ctools_export_load_object('currencies', 'names', array($name));
  return !empty($result[$name]) ? $result[$name] : FALSE;
}

/**
 * Provides the actual currency formatting.
 */
function format_currency_parse($price, $currency) {
  $output = NULL;

  // Do something different if we're interested in coinage and the amount is less than the currency base amount.
  if (variable_get('format_currency_prefer_coinage') && abs(round((float) $price * $currency->base)) < $currency->base) {
    if ($output = _format_currency_parse_coinage($price, $currency)) {
      return $output;
    }
  }

  $decimal_places = $currency->decimal_places;

  // If we're interesting in rounding down whole numbers, then process here.
  if (variable_get('format_currency_round_whole_numbers')) {
    if (round((float) $price) == round((float) $price, $currency->decimal_places)) {
      // Override decimal places to zero.
      $decimal_places = 0;
    }
  }

  $price = number_format((float) $price,
    $decimal_places,
    $currency->decimal_separator,
    $currency->thousands_separator
  );

  // Set the displayed symbol to be either a symbol or HTML entity depending
  // on the admin settings. If whichever chosen doesn't exist then fall back
  // to the other.
  if (variable_get('format_currency_display_symbol')) {
    $symbol = $currency->html_entity ? $currency->html_entity : $currency->symbol;
  }
  else {
    $symbol = $currency->symbol ? $currency->symbol : $currency->html_entity;
  }

  // If there's still no symbol, then fallback to the Currency Code.
  if (!$symbol) {
    $symbol = $currency->code;
  }

  // Work out where to place the symbol.
  switch ($currency->symbol_position) {
    case FORMAT_CURRENCY_LEFT:
      if (variable_get('format_currency_display_code', FALSE) && $symbol != $currency->code) {
        $output = $currency->code . ' ' . $symbol . $price;
      }
      else {
        $output = $symbol . $price;
      }
      break;
    case FORMAT_CURRENCY_RIGHT:
      if (variable_get('format_currency_display_code', FALSE) && $symbol != $currency->code) {
        $output = $currency->code . ' ' . $price . $symbol;
      }
      else {
        $output = $price . $symbol;
      }
      break;
  }

  return $output;
}

/**
 * Provides the actual currency formatting for coinage.
 */
function _format_currency_parse_coinage($price, $currency) {
  $output = NULL;

  $price = number_format((float) $price * (int) $currency->base);

  // Set the displayed symbol to be either a symbol or HTML entity depending
  // on the admin settings. If whichever chosen doesn't exist then fall back
  // to the other.
  if (variable_get('format_currency_display_symbol')) {
    $symbol = $currency->coinage_html_entity ? $currency->coinage_html_entity : $currency->coinage_symbol;
  }
  else {
    $symbol = $currency->coinage_symbol ? $currency->coinage_symbol : $currency->coinage_html_entity;
  }

  // If there's still no symbol, then fall back to normal formatting.
  if (!$symbol) {
    return NULL;
  }

  // Work out where to place the coinage symbol.
  switch ($currency->coinage_position) {
    case FORMAT_CURRENCY_LEFT:
      if (variable_get('format_currency_display_code') && $symbol != $currency->code) {
        $output = $currency->code . ' ' . $symbol . $price;
      }
      else {
        $output = $symbol . $price;
      }
      break;
    case FORMAT_CURRENCY_RIGHT:
      if (variable_get('format_currency_display_code') && $symbol != $currency->code) {
        $output = $currency->code . ' ' . $price . $symbol;
      }
      else {
        $output = $price . $symbol;
      }
      break;
  }

  return $output;
}

/**
 * Theme function to render the formatted given price by the currency
 * parameters given.
 *
 * @param $price
 *   Given unformatted price parameter.
 * @param $param
 *   Either a string containing a Currency Code or an array of conditions to
 * match against in the database query.
 * @param $base
 *   Optional parameter which uses the currency_api module to convert the
 *   given price to $param FROM the given $base currency.
 */
function theme_format_currency($variables) {
  // Sanity check.
  if (!$currency = format_currency_currencies_load($variables['param'])) {
    return '<span class="format-currency format-currency-invalid">' . t('Invalid currency given.') . '</span>';
  }

  // Integration with currency_api module.
  if (!empty($variables['base']) && module_exists('currency_api')) {
    // Make the currency_api conversion call.
    $query = currency_api_convert($variables['base'], $currency->code, $variables['price']);

    // If there's been an error, report it - there's no point in returning a non-converted price.
    if ($query['status'] == FALSE) {
      return '<span class="format-currency format-currency-error">' . t('An error occurred: @message', array('@message' => $query['message'])) . '</span>';
    }
    else {
      $variables['price'] = $query['value'];
    }
  }

  // Return a formatted price.
  return '<span class="format-currency format-currency-' . $currency->code . '">' . format_currency_parse($variables['price'], $currency) . '</span>';
}

/**
 * Helper function for displaying text from the numeric representation
 * of 'currency position'.
 */
function _format_currency_symbol_position($position) {
  return (bool) $position ? t('Right') : t('Left');
}
