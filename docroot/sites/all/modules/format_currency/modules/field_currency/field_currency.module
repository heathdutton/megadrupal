<?php
/**
 * @file
 * Main module file for Field Currency module.
 */

/**
 * Implements hook_field_info().
 */
function field_currency_field_info() {
  return array(
    'field_currency' => array(
      'label' => t('Price'),
      'description' => t('This field stores prices consisting of an amount and a currency.'),
      'instance_settings' => array('min' => '', 'max' => ''),
      'default_widget' => 'field_currency',
      'default_formatter' => 'field_currency_default',
    ),
  );
}

/**
 * Implements hook_field_instance_settings_form().
 */
function field_currency_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  $form['min'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum'),
    '#default_value' => $settings['min'],
    '#description' => t('The minimum value that should be allowed in this field. Leave blank for no minimum.'),
    '#element_validate' => array('element_validate_number'),
  );
  $form['max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum'),
    '#default_value' => $settings['max'],
    '#description' => t('The maximum value that should be allowed in this field. Leave blank for no maximum.'),
    '#element_validate' => array('element_validate_number'),
  );

  return $form;
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'field_currency_min': The value is less than the allowed minimum value.
 * - 'field_currency_max': The value is greater than the allowed maximum value.
 */
function field_currency_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if ($item['value'] != '') {
      if (is_numeric($instance['settings']['min']) && $item['value'] < $instance['settings']['min']) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'field_currency_min',
          'message' => t('%name: the value may be no less than %min.', array('%name' => $instance['label'], '%min' => $instance['settings']['min'])),
        );
      }
      if (is_numeric($instance['settings']['max']) && $item['value'] > $instance['settings']['max']) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'field_currency_max',
          'message' => t('%name: the value may be no greater than %max.', array('%name' => $instance['label'], '%max' => $instance['settings']['max'])),
        );
      }
    }
  }
}

/**
 * Implements of hook_field_is_empty().
 */
function field_currency_field_is_empty($item, $field) {
  if (empty($item['value']) && (string) $item['value'] !== '0' && empty($item['currency_code'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function field_currency_field_formatter_info() {
  return array(
    'field_currency_default' => array(
      'label' => t('Price'),
      'field types' => array('field_currency'),
    ),
    'field_currency_plain' => array(
      'label' => t('Price (plain)'),
      'field types' => array('field_currency'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function field_currency_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'field_currency_default':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => theme('format_currency', array('param' => $item['currency_code'], 'price' => $item['value'])));
      }
      break;

    case 'field_currency_plain':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => format_currency_parse($item['value'], format_currency_currencies_load($item['currency_code'])));
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function field_currency_field_widget_info() {
  return array(
    'field_currency' => array(
      'label' => t('Price field'),
      'field types' => array('field_currency'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function field_currency_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => $instance['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
    '#element_validate' => array('field_currency_field_widget_validate'),
  );
  return $element;
}

/**
 * FAPI validation of an individual field_currency element.
 */
function field_currency_field_widget_validate($element, &$form_state) {
  $field = field_widget_field($element, $form_state);
  $instance = field_widget_instance($element, $form_state);
  $item = $element['#value'];

  if ($item['value'] != '' && !is_numeric($item['value'])) {
    form_error($element['value'], t('%name: must be a number.', array('%name' => $element['#title'])));
  }
  if ($item['currency_code'] != '' && !format_currency_currencies_load($item['currency_code'])) {
    form_error($element['currency_code'], t('%name: invalid currency given.', array('%name' => $element['#title'])));
  }

  if ($item['value'] != '') {
    if (is_numeric($instance['settings']['min']) && $item['value'] < $instance['settings']['min']) {
      form_error($element['value'], t('%name: the value may be no less than %min.', array('%name' => $element['#title'], '%min' => $instance['settings']['min'])));
    }
    if (is_numeric($instance['settings']['max']) && $item['value'] > $instance['settings']['max']) {
      form_error($element['value'], t('%name: the value may be no greater than %max.', array('%name' => $element['#title'], '%max' => $instance['settings']['max'])));
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function field_currency_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['value'], $error['message']);
}

/**
 * Implements hook_theme().
 */
function field_currency_theme() {
  return array(
    'field_currency_field' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_element_info().
 */
function field_currency_element_info() {
  $elements['field_currency'] = array(
    '#input' => TRUE,
    '#process' => array('field_currency_field_process'),
    '#theme' => 'field_currency_field',
    '#theme_wrappers' => array('form_element'),
  );
  return $elements;
}

/**
 * Processes the field_currency type element before displaying the field.
 */
function field_currency_field_process($element, &$form_state, $complete_form) {
  ctools_include('export');
  $currencies = array_map(function($currency) {
    return check_plain($currency->name);
  }, ctools_export_load_object('currencies', 'conditions', array('status' => FORMAT_CURRENCY_ACTIVE)));
  asort($currencies);

  $element['currency_code'] = array(
    '#type' => 'select',
    '#title' => t('Currency Code'),
    '#default_value' => isset($element['#default_value']['currency_code']) ? $element['#default_value']['currency_code'] : NULL,
    '#options' => $currencies,
  );
  $element['value'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#default_value' => isset($element['#default_value']['value']) ? $element['#default_value']['value'] : '0',
  );

  return $element;
}

/**
 * Formats a link field widget.
 */
function theme_field_currency_field($variables) {
  drupal_add_css(drupal_get_path('module', 'field_currency') . '/field_currency.css');
  $element = $variables['element'];

  $output = '<div class="field-currency-field-currency-code">' . drupal_render($element['currency_code']) . '</div>';
  $output .= '<div class="field-currency-field-value">' . drupal_render($element['value']) . '</div>';

  return $output;
}
