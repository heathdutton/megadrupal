<?php

/**
 * @file
 * SimpleTests for the Format Currency project.
 */

class formatcurrencyTesting extends DrupalWebTestCase {
  protected $admin_user;
  protected $input_format_id;
  protected $body;

  public function setUp() {
    parent::setUp('format_currency');

    // Create an admin user.
    $this->admin_user = $this->drupalCreateUser(array('administer filters'));

    // Add a filter for our Format Currency functionality testing.
    $format = new stdClass();
    $format->format = 'format_currency_filter';
    $format->name = 'Currency Testing Format';
    $format->filters = array(
      'format_currency_filter' => array(
        'status' => 1,
        'roles[2]' => TRUE,
      ),
    );
    filter_format_save($format);

    // Store the format id of the created input format.
    $this->input_format_id = db_select('filter_format', 'f')
      ->fields('f', array('format'))
      ->condition('f.name', 'Currency Testing Format')
      ->execute()
      ->fetchField();
    $this->assertEqual('format_currency_filter', $this->input_format_id, t('Input format id (%id)', array('%id' => $this->input_format_id)));

    // Set a reuseable body field.
    // NOTES:
    // Numbering down the side is IMPORTANT as it allows the assert to be sure
    // we're checking the correct entry.
    //
    //  One: Simple GBP conversion with whitespace
    //  Two: Simple GBP conversion with NO whitespace
    //  Three: Invalid currency test
    //  Four: Longer USD conversion to test thousands separator
    //  Five: Even longer EUR conversion to test millions separator
    //  Six: Tests right hand symbol alignment and lowercase country code
    //  Seven: Tests input filter
    //  Eight: Test rounding DOWN three decimal places into two decimal places
    //  Nine: Test rounding UP three decimal places into two decimal places
    //  Ten: Test rounding UP three decimal places into NO decimal places
    //  Eleven: Test coinage output
    //  Twelve: Test coinage rounding and also 'Round Whole Numbers' mode
    //  Thirteen: Longer test for 'Round Whole Numbers' mode
    $this->body = "One:[ currency : 123.45 , GBP ]
      Two:[currency:123.45,GBP]
      Three:[currency: 123.45, FAIL]
      Four:[currency: 12345.67, USD]
      Five:[currency: 1234567.89, EUR]
      Six:[currency: 123.45, huf]
      Seven:[currency: 123.45, GBP]After
      Eight:[currency: 123.454, GBP]
      Nine:[currency: 123.455, GBP]
      Ten:[currency: 123.555, CLP]
      Eleven:[currency: 0.58, GBP]
      Twelve:[currency: 0.997, GBP]
      Thirteen:[currency: 1234567.00, DKK]";
  }

  function _assertRAW($tests = array()) {
    foreach ($tests as $number => $test) {
      $eval = $test['eval'];
      $after = isset($test['after']) ? $test['after'] : '';
      if ($code = $test['code']) {
        $this->assertRaw("$number:<span class=\"format-currency format-currency-$code\">$eval</span>$after", t("Ensure filter resolves to '%eval'.", array('%eval' => "$number:{$eval}$after")));
      }
      else {
        $this->assertRaw("$number:<span class=\"format-currency format-currency-invalid\">$eval</span>$after", t("Ensure filter resolves to '%eval'.", array('%eval' => "$number:{$eval}$after")));
      }
    }
  }
}

class formatcurrencyTestCases extends formatcurrencyTesting {
  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Output testing',
      'description' => 'Testing output for the Format Currency module.',
      'group' => 'Format Currency',
    );
  }

  /**
   * Test normal usage output.
   */
  function testformatcurrencyNormal() {
    // Create node.
    $node = $this->drupalCreateNode(
      array(
        'body' => array(
          LANGUAGE_NONE => array(
            array(
              'value' => "Testing Normal Output:\n{$this->body}",
              'format' => $this->input_format_id,
            ),
          ),
        ),
      )
    );

    // Grab the processed node.
    $this->drupalGet('node/' . $node->nid);

    // Assert RAW because we need to check that HTML entities are NOT being used.
    $this->_assertRAW(
      array(
        'One' => array('code' => 'GBP', 'eval' => '£123.45'),
        'Two' => array('code' => 'GBP', 'eval' => '£123.45'),
        'Three' => array('code' => NULL, 'eval' => 'Invalid currency given.'),
        'Four' => array('code' => 'USD', 'eval' => '$12,345.67'),
        'Five' => array('code' => 'EUR', 'eval' => '€1.234.567,89'),
        'Six' => array('code' => 'HUF', 'eval' => '123,45Ft'),
        'Seven' => array('code' => 'GBP', 'eval' => '£123.45', 'after' => 'After'),
        'Eight' => array('code' => 'GBP', 'eval' => '£123.45'),
        'Nine' => array('code' => 'GBP', 'eval' => '£123.46'),
        'Ten' => array('code' => 'CLP', 'eval' => '$124'),
        'Eleven' => array('code' => 'GBP', 'eval' => '£0.58'),
        'Twelve' => array('code' => 'GBP', 'eval' => '£1.00'),
        'Thirteen' => array('code' => 'DKK', 'eval' => 'kr1.234.567,00'),
      )
    );
  }

  /**
   * Test HTML entity usage output.
   */
  function testformatcurrencyHTMLEntities() {
    // Set the format_currency_display_symbol variable to TRUE.
    variable_set('format_currency_display_symbol', TRUE);

    // Create node.
    $node = $this->drupalCreateNode(
      array(
        'body' => array(
          LANGUAGE_NONE => array(
            array(
              'value' => "Testing HTML Entities:\n{$this->body}",
              'format' => $this->input_format_id,
            ),
          ),
        ),
      )
    );

    // Grab the processed node.
    $this->drupalGet('node/' . $node->nid);

    // Assert RAW because we need to check that HTML entities are DEFINITELY being used.
    $this->_assertRAW(
      array(
        'One' => array('code' => 'GBP', 'eval' => '&pound;123.45'),
        'Two' => array('code' => 'GBP', 'eval' => '&pound;123.45'),
        'Three' => array('code' => NULL, 'eval' => 'Invalid currency given.'),
        'Four' => array('code' => 'USD', 'eval' => '&#36;12,345.67'),
        'Five' => array('code' => 'EUR', 'eval' => '&euro;1.234.567,89'),
        'Six' => array('code' => 'HUF', 'eval' => '123,45&#70;&#116;'),
        'Seven' => array('code' => 'GBP', 'eval' => '&pound;123.45', 'after' => 'After'),
        'Eight' => array('code' => 'GBP', 'eval' => '&pound;123.45'),
        'Nine' => array('code' => 'GBP', 'eval' => '&pound;123.46'),
        'Ten' => array('code' => 'CLP', 'eval' => '&#36;124'),
        'Eleven' => array('code' => 'GBP', 'eval' => '&pound;0.58'),
        'Twelve' => array('code' => 'GBP', 'eval' => '&pound;1.00'),
        'Thirteen' => array('code' => 'DKK', 'eval' => '&#107;&#114;1.234.567,00'),
      )
    );
  }

  /**
   * Test 'Display Currency Code' mode output.
   */
  function testformatcurrencyDisplayCode() {
    // Set the format_currency_display_code variable to TRUE.
    variable_set('format_currency_display_code', TRUE);

    // Create node.
    $node = $this->drupalCreateNode(
      array(
        'body' => array(
          LANGUAGE_NONE => array(
            array(
              'value' => "Testing 'Display Currency Code' Mode:\n{$this->body}",
              'format' => $this->input_format_id,
            ),
          ),
        ),
      )
    );

    // Grab the processed node.
    $this->drupalGet('node/' . $node->nid);

    // Assert RAW because we need to check that HTML entities are NOT being used.
    $this->_assertRAW(
      array(
        'One' => array('code' => 'GBP', 'eval' => 'GBP £123.45'),
        'Two' => array('code' => 'GBP', 'eval' => 'GBP £123.45'),
        'Three' => array('code' => NULL, 'eval' => 'Invalid currency given.'),
        'Four' => array('code' => 'USD', 'eval' => 'USD $12,345.67'),
        'Five' => array('code' => 'EUR', 'eval' => 'EUR €1.234.567,89'),
        'Six' => array('code' => 'HUF', 'eval' => 'HUF 123,45Ft'),
        'Seven' => array('code' => 'GBP', 'eval' => 'GBP £123.45', 'after' => 'After'),
        'Eight' => array('code' => 'GBP', 'eval' => 'GBP £123.45'),
        'Nine' => array('code' => 'GBP', 'eval' => 'GBP £123.46'),
        'Ten' => array('code' => 'CLP', 'eval' => 'CLP $124'),
        'Eleven' => array('code' => 'GBP', 'eval' => 'GBP £0.58'),
        'Twelve' => array('code' => 'GBP', 'eval' => 'GBP £1.00'),
        'Thirteen' => array('code' => 'DKK', 'eval' => 'DKK kr1.234.567,00'),
      )
    );
  }

  /**
   * Test 'Coinage' mode output.
   */
  function testformatcurrencyCoinage() {
    // Set the format_currency_prefer_coinage variable to TRUE.
    variable_set('format_currency_prefer_coinage', TRUE);

    // Create node.
    $node = $this->drupalCreateNode(
      array(
        'body' => array(
          LANGUAGE_NONE => array(
            array(
              'value' => "Testing 'Coinage' Mode:\n{$this->body}",
              'format' => $this->input_format_id,
            ),
          ),
        ),
      )
    );

    // Grab the processed node.
    $this->drupalGet('node/' . $node->nid);

    // Assert RAW because we need to check that HTML entities are NOT being used.
    $this->_assertRAW(
      array(
        'One' => array('code' => 'GBP', 'eval' => '£123.45'),
        'Two' => array('code' => 'GBP', 'eval' => '£123.45'),
        'Three' => array('code' => NULL, 'eval' => 'Invalid currency given.'),
        'Four' => array('code' => 'USD', 'eval' => '$12,345.67'),
        'Five' => array('code' => 'EUR', 'eval' => '€1.234.567,89'),
        'Six' => array('code' => 'HUF', 'eval' => '123,45Ft'),
        'Seven' => array('code' => 'GBP', 'eval' => '£123.45', 'after' => 'After'),
        'Eight' => array('code' => 'GBP', 'eval' => '£123.45'),
        'Nine' => array('code' => 'GBP', 'eval' => '£123.46'),
        'Ten' => array('code' => 'CLP', 'eval' => '$124'),
        'Eleven' => array('code' => 'GBP', 'eval' => '58p'),
        'Twelve' => array('code' => 'GBP', 'eval' => '£1.00'),
        'Thirteen' => array('code' => 'DKK', 'eval' => 'kr1.234.567,00'),
      )
    );
  }

  /**
   * Test 'Round Whole Numbers' mode output.
   */
  function testformatcurrencyWholeNumbers() {
    // Set the format_currency_round_whole_numbers variable to TRUE.
    variable_set('format_currency_round_whole_numbers', TRUE);

    // Create node.
    $node = $this->drupalCreateNode(
      array(
        'body' => array(
          LANGUAGE_NONE => array(
            array(
              'value' => "Testing 'Round Whole Numbers' Mode:\n{$this->body}",
              'format' => $this->input_format_id,
            ),
          ),
        ),
      )
    );

    // Grab the processed node.
    $this->drupalGet('node/' . $node->nid);

    // Assert RAW because we need to check that HTML entities are NOT being used.
    $this->_assertRAW(
      array(
        'One' => array('code' => 'GBP', 'eval' => '£123.45'),
        'Two' => array('code' => 'GBP', 'eval' => '£123.45'),
        'Three' => array('code' => NULL, 'eval' => 'Invalid currency given.'),
        'Four' => array('code' => 'USD', 'eval' => '$12,345.67'),
        'Five' => array('code' => 'EUR', 'eval' => '€1.234.567,89'),
        'Six' => array('code' => 'HUF', 'eval' => '123,45Ft'),
        'Seven' => array('code' => 'GBP', 'eval' => '£123.45', 'after' => 'After'),
        'Eight' => array('code' => 'GBP', 'eval' => '£123.45'),
        'Nine' => array('code' => 'GBP', 'eval' => '£123.46'),
        'Ten' => array('code' => 'CLP', 'eval' => '$124'),
        'Eleven' => array('code' => 'GBP', 'eval' => '£0.58'),
        'Twelve' => array('code' => 'GBP', 'eval' => '£1'),
        'Thirteen' => array('code' => 'DKK', 'eval' => 'kr1.234.567'),
      )
    );
  }

  /**
   * Test everything all at once...
   */
  function testformatcurrencyKittenCaboodle() {
    // Set the format_currency_display_symbol variable to TRUE.
    variable_set('format_currency_display_symbol', TRUE);
    // Set the format_currency_display_code variable to TRUE.
    variable_set('format_currency_display_code', TRUE);
    // Set the format_currency_prefer_coinage variable to TRUE.
    variable_set('format_currency_prefer_coinage', TRUE);
    // Set the format_currency_round_whole_numbers variable to TRUE.
    variable_set('format_currency_round_whole_numbers', TRUE);

    // Create node.
    $node = $this->drupalCreateNode(
      array(
        'body' => array(
          LANGUAGE_NONE => array(
            array(
              'value' => "Testing 'Everything On At The Same Time' mode:\n{$this->body}",
              'format' => $this->input_format_id,
            ),
          ),
        ),
      )
    );

    // Grab the processed node.
    $this->drupalGet('node/' . $node->nid);

    // Assert RAW because we need to check that HTML entities are DEFINITELY being used.
    $this->_assertRAW(
      array(
        'One' => array('code' => 'GBP', 'eval' => 'GBP &pound;123.45'),
        'Two' => array('code' => 'GBP', 'eval' => 'GBP &pound;123.45'),
        'Three' => array('code' => NULL, 'eval' => 'Invalid currency given.'),
        'Four' => array('code' => 'USD', 'eval' => 'USD &#36;12,345.67'),
        'Five' => array('code' => 'EUR', 'eval' => 'EUR &euro;1.234.567,89'),
        'Six' => array('code' => 'HUF', 'eval' => 'HUF 123,45&#70;&#116;'),
        'Seven' => array('code' => 'GBP', 'eval' => 'GBP &pound;123.45', 'after' => 'After'),
        'Eight' => array('code' => 'GBP', 'eval' => 'GBP &pound;123.45'),
        'Nine' => array('code' => 'GBP', 'eval' => 'GBP &pound;123.46'),
        'Ten' => array('code' => 'CLP', 'eval' => 'CLP &#36;124'),
        'Eleven' => array('code' => 'GBP', 'eval' => 'GBP 58&#112;'),
        'Twelve' => array('code' => 'GBP', 'eval' => 'GBP &pound;1'),
        'Thirteen' => array('code' => 'DKK', 'eval' => 'DKK &#107;&#114;1.234.567'),
      )
    );
  }
}