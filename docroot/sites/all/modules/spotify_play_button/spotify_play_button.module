<?php
define('SPOTIFY_URL', 'https://embed.spotify.com');
define('SPOTIFY_MAX_WIDTH', 640);
define('SPOTIFY_MIN_WIDTH', 250);
define('SPOTIFY_HEIGHT_DIFF', 80); // Height is always 80 pixels bigger than the width

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function spotify_play_button_field_info(){
  return array(
    'spotify_play_button' => array(
      'label' => t('Spotify play button'), 
      'description' => t('Add a spotify play button to your site.'), 
      'default_widget' => 'spotify_play_button_single', 
      'default_formatter' => 'spotify_play_button_large'
    )
  );
}

/**
 * Implements hook_field_validate().
 * Validate its a correct spotify URI
 */
function spotify_play_button_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors){
  foreach($items as $delta => $item){
    if(!empty($item['uri'])){
      $exploded_uri = explode(':', $item['uri']);
      // TODO - Improve URI validation
      if($exploded_uri[0] !== 'spotify'){
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'spotify_play_button_invalid_uri', 
          'message' => t('The URI you have entered is not valid.')
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function spotify_play_button_field_is_empty($item, $field){
  return empty($item['uri']);
}

/**
 * Implements hook_field_formatter_info().
 * Spotify play button comes in two sizes, large and compact
 */
function spotify_play_button_field_formatter_info(){
  return array(
    'spotify_play_button_large' => array(
      'label' => t('Large size'), 
      'field types' => array(
        'spotify_play_button'
      ), 
      'settings' => array(
        'theme' => 'black', 
        'view' => 'list', 
        'width' => 300, 
        'height' => 380
      )
    ), 
    'spotify_play_button_compact' => array(
      'label' => t('Compact'), 
      'field types' => array(
        'spotify_play_button'
      ), 
      'settings' => array(
        'width' => 300, 
        'height' => 80
      )
    )
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function spotify_play_button_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state){
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  // Reset to default settings if format has been changed
  if(($display['type'] == 'spotify_play_button_large' && $settings['height'] == 80) || ($display['type'] == 'spotify_play_button_compact' && $settings['height'] != 80)){
    $settings = field_info_formatter_settings($display['type']);
  }
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'spotify_play_button') . '/js/formatter-settings.js', 
    array(
      'data' => array(
        'spotifyPlayButton' => array(
          'maxWidth' => SPOTIFY_MAX_WIDTH, 
          'minWidth' => SPOTIFY_MIN_WIDTH, 
          'heightDiff' => SPOTIFY_HEIGHT_DIFF
        )
      ), 
      'type' => 'setting'
    )
  );
  $form['width'] = array(
    '#type' => 'textfield', 
    '#title' => t('Width'), 
    '#size' => 5, 
    '#maxlength' => 3, 
    '#required' => TRUE, 
    '#attributes' => array(
      'class' => array(
        'richseam-play-width'
      )
    ), 
    '#default_value' => $settings['width']
  );
  $form['height'] = array(
    '#type' => 'textfield', 
    '#title' => t('Height'), 
    '#size' => 5, 
    '#maxlength' => 3, 
    '#required' => TRUE, 
    '#attributes' => array(
      'class' => array(
        'richseam-play-height'
      )
    )
  );
  switch($display['type']){
    case 'spotify_play_button_large':
      $form['theme'] = array(
        '#title' => t('Theme.'), 
        '#type' => 'radios', 
        '#required' => TRUE, 
        '#default_value' => $settings['theme'], 
        '#options' => array(
          'black' => t('Black'), 
          'white' => t('White')
        )
      );
      $form['view'] = array(
        '#title' => t('View.'), 
        '#type' => 'radios', 
        '#required' => TRUE, 
        '#default_value' => $settings['view'], 
        '#options' => array(
          'list' => t('List'), 
          'coverart' => t('Coverart')
        )
      );
      $form['height']['#default_value'] = $settings['height'];
      break;
    case 'spotify_play_button_compact':
      $form['height']['#value'] = $settings['height'];
      $form['height']['#disabled'] = true;
      break;
  }
  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function spotify_play_button_field_formatter_settings_summary($field, $instance, $view_mode){
  $summary = array();
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  // Reset to default settings if format has been changed
  if(($display['type'] == 'spotify_play_button_large' && $settings['height'] == 80) || ($display['type'] == 'spotify_play_button_compact' && $settings['height'] != 80)){
    $settings = field_info_formatter_settings($display['type']);
  }
  if($display['type'] == 'spotify_play_button_large'){
    $summary[] = t('!theme theme.', array(
      '!theme' => ucfirst($settings['theme'])
    ));
    $summary[] = t('View as !view.', array(
      '!view' => $settings['view']
    ));
  }
  $summary[] = t('!width <em>x</em> !height.', array(
    '!width' => $settings['width'], 
    '!height' => $settings['height']
  ));
  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 * Creates an iframe render array for each element
 */
function spotify_play_button_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display){
  $element = array();
  // Default attributes
  $attributes = array(
    'frameborder' => 0, 
    'allowtransparency' => true, 
    'width' => $display['settings']['width'], 
    'height' => $display['settings']['height']
  );
  $query = array();
  // Change the width / height for the display type
  if($display['type'] == 'spotify_play_button_large'){
    // Add the display settings
    $query['theme'] = $display['settings']['theme'];
    $query['view'] = $display['settings']['view'];
  }
  foreach($items as $delta => $item){
    $query['uri'] = $item['uri'];
    $attributes['src'] = url(SPOTIFY_URL, array(
      'query' => $query
    ));
    $element[$delta] = array(
      // Define an iframe
      '#type' => 'html_tag', 
      '#tag' => 'iframe', 
      '#attributes' => $attributes, 
      '#value' => '' // Need to set a value so all multivalue fields display
    );
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 * Define a widget for a user to input the spotify URI
 * @see spotify_play_button_field_widget_form()
 */
function spotify_play_button_field_widget_info(){
  return array(
    'spotify_play_button_single' => array(
      'label' => t('Single'), 
      'field types' => array(
        'spotify_play_button'
      )
    ), 
    'spotify_play_button_multi' => array(
      'label' => t('Multiple tracks'), 
      'field types' => array(
        'spotify_play_button'
      )
    )
  );
}

/**
 * Implements hook_field_widget_form()
 */
function spotify_play_button_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element){
  $value = isset($items[$delta]['uri']) ? $items[$delta]['uri'] : '';
  $widget = $element;
  $widget['#delta'] = $delta;
  switch($instance['widget']['type']){
    // For single items, use a textfield 
    case 'spotify_play_button_single':
      $widget += array(
        '#type' => 'textfield', 
        '#default_value' => $value
      );
      break;
    // For multi tracks we need a textarea
    case 'spotify_play_button_multi':
      $widget += array(
        '#type' => 'textarea', 
        '#default_value' => $value
      );
      break;
  }
  $element['uri'] = $widget;
  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function spotify_play_button_field_widget_error($element, $error, $form, &$form_state){
  switch($error['error']){
    case 'spotify_play_button_invalid_uri':
      form_error($element, $error['message']);
      break;
  }
}