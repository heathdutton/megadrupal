<?php

/**
 * @file
 * Projekktor HTML5 media player with flash fallback for Drupal
 */

/**
 * Implements hook_menu().
 */
function projekktor_menu() {
  $items = array();

  $items['admin/config/media/projekktor'] = array(
    'title' => 'Projekktor',
    'description' => 'Configure the Projekktor media player.',
    'page callback' => 'projekktor_page_preset_list',
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/projekktor.admin.inc',
  );

  $items['admin/config/media/projekktor/list'] = array(
    'title' => 'Presets',
    'description' => 'List the current Projekktor presets.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/config/media/projekktor/add'] = array(
    'title' => 'Add preset',
    'description' => 'Add a new Projekktor preset.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('projekktor_form_preset_add'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 1,
    'file' => 'includes/projekktor.admin.inc',
  );

  $items['admin/config/media/projekktor/edit/%projekktor_preset'] = array(
    'title' => 'Edit preset',
    'description' => 'Configure an preset.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('projekktor_form_preset_edit', 5),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/projekktor.admin.inc',
  );

  $items['admin/config/media/projekktor/delete/%projekktor_preset'] = array(
    'title' => 'Delete preset',
    'description' => 'Delete an preset.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('projekktor_preset_form_delete', 5),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/projekktor.admin.inc',
  );

  $items['admin/config/media/projekktor/embed'] = array(
    'title' => 'Embedding',
    'description' => 'Configure the Projekktor embed settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('projekktor_embed_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'includes/projekktor.admin.inc',
  );

  $items['admin/config/media/projekktor/library'] = array(
    'title' => 'Libraries',
    'description' => 'Provides a summary of the installed library components.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('projekktor_form_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'file' => 'includes/projekktor.admin.inc',
  );

  $items['admin/config/media/projekktor/library/projekktor'] = array(
    'title' => 'Projekktor',
    'description' => 'Provides a summary of the installed projekktor library components.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -8,
  );

  $items['admin/config/media/projekktor/library/jcarousel'] = array(
    'title' => 'jCarousel',
    'description' => 'Provides a summary of the installed jcarousel library components.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('projekktor_jcarousel_form_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
    'file' => 'includes/projekktor.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function projekktor_help($path, $arg) {
  switch ($path) {
    case 'admin/config/media/projekktor/edit/%':
      return t('An <em>preset</em> defines exactly how a Projekktor media player looks and behaves on your site. It is a combination of Projekktor size, theme, and options.<br />For full documentation of all options, refer to the official <a href="@docs">Projekktor documentation</a>.', array('@docs' => url('http://www.projekktor.com/docs.php')));
      break;

    case 'admin/config/media/projekktor/embed':
      return t('This page allows users to enable the projekktor library site wide for embedding @video tags into content areas. When this is enabled a sample YouTube video should be displayed at the bottom of the form.<br />This example is based on the code inside the @video tags <a href="@docs">here</a>.', array('@video' => '<video>', '@docs' => url('http://www.projekktor.com/demo-youtube.php')));
      break;

    case 'admin/config/media/projekktor/library':
      return t('This page lists some automatically detected files and folders. To improve performance, they are cached until the files get deleted.<br />If the module behaves strangely, try to clear the cached values below.');
      break;

    case 'admin/config/media/projekktor/library/jcarousel':
      return t('This page lists some automatically detected files and folders. To improve performance, they are cached until the files get deleted.<br />If the module behaves strangely, try to clear the cached values below.');
      break;

  }
}

/**
 * Implements hook_theme().
 */
function projekktor_theme() {
  return array(
    'projekktor_container' => array(
      'variables' => array('items' => array(), 'settings' => array()),
      'template' => 'theme/projekktor-container',
      'file' => 'theme/theme.inc',
    ),
    'projekktor_form_table' => array(
      'render element' => 'form',
      'file' => 'includes/projekktor.admin.inc',
    ),
  );
}

/**
 * Implements hook_init().
 *
 * If the user so chooses this loads the projekktor library on all site pages
 * with the selected theme and options and attaches it to generic audio/video
 * tags.
 *
 * @see projekktor_add()
 */
function projekktor_init() {
  // When the player is set to be on all pages add it to the page.
  if (variable_get('projekktor_sitewide_video', FALSE)) {
    $preset_name = variable_get('projekktor_sitewide_video_preset');
    $theme_name = variable_get('projekktor_sitewide_video_theme');
    projekktor_add(NULL, $preset_name, $theme_name);
  }
}

/**
 * Implements hook_views_api().
 *
 * This tells drupal that there is Views integration file named
 * projekktor.views.inc
 */
function projekktor_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Gets all presets from the database and returns them as an associative array.
 */
function projekktor_presets() {
  $presets = db_query("SELECT * FROM {projekktor_preset}")->fetchAllAssoc('name', PDO::FETCH_ASSOC);
  foreach ($presets as &$preset) {
    $preset['options'] = empty($preset['options']) ? array() : unserialize($preset['options']);
  }
  return $presets;
}

/**
 * Fetches the given preset and returns it as an associative array or FALSE.
 */
function projekktor_preset_load($preset_name) {
  $preset = db_query("SELECT * FROM {projekktor_preset} WHERE name = :name", array(':name' => $preset_name))->fetchAssoc();
  if ($preset !== FALSE) {
    $preset['options'] = empty($preset['options']) ? array() : unserialize($preset['options']);
  }
  return $preset;
}

/**
 * Checks whether an preset with the given name already exists.
 */
function projekktor_preset_exists($preset_name) {
  return (projekktor_preset_load($preset_name) !== FALSE);
}

/**
 * Saves the given preset to the database.
 *
 * Set the $new flag if this set has not been written before.
 */
function projekktor_preset_save($preset, $new = FALSE) {
  $preset += array(
    'title' => $preset['name'],
    'options' => array(),
  );

  if ($new) {
    drupal_write_record('projekktor_preset', $preset);
  }
  else {
    drupal_write_record('projekktor_preset', $preset, 'name');
  }
  return $preset;
}

/**
 * Deletes the given preset from the database.
 */
function projekktor_preset_delete($preset) {
  db_delete('projekktor_preset')->condition('name', $preset['name'])->execute();
  return TRUE;
}

/**
 * Returns the JavaScript file of the Projekktor core.
 *
 * Uses cached filename until this file gets deleted or the cache gets cleared.
 */
function projekktor_get_library_file() {
  $cache = cache_get('projekktor_lib_file');
  if (($cache !== FALSE) && file_exists($cache->data)) {
    return $cache->data;
  }
  // Search for library file.
  $libpath = libraries_get_path('projekktor');

  // Seach for minimized files first.
  $js = glob($libpath . '/projekktor*.min.js');
  if (count($js) == 0) {
    $js = glob($libpath . '/projekktor*.js');
  }
  if (count($js) > 0) {
    rsort($js);
    cache_set('projekktor_lib_file', $js[0]);
    return $js[0];
  }
  else {
    // Could not find JavaScript library.
    return FALSE;
  }
}

/**
 * Return the version of Projekktor installed.
 */
function projekktor_get_library_version() {
  $version = NULL;

  // Cache this filename to prevent multiple file_exists() calls.
  if (!isset($cache['lib'])) {
    $lib = projekktor_get_library_file();
    if ($lib === FALSE) {
      drupal_set_message(t('The Projekktor JavaScript file was not found in its path. Please refer to README.txt for installation instructions.'), 'error');
      return;
    }
    $cache['lib'] = $lib;
  }

  $contents = file_get_contents($cache['lib']);

  $matches = array();
  if (preg_match('/(?:v[ ]*|Version )([\d.]+)/i', $contents, $matches)) {
    $version = $matches[1];
  }

  return $version;
}

/**
 * Returns the css file of the jcarousel.
 *
 * @TODO: Pare this down. It's overkill for the jcarousel library since the
 * js file isn't tagged with a version number like projekktor.
 */
function projekktor_jcarousel_get_library_file() {
  $cache = cache_get('projekktor_jcarousel_lib_file');
  if (($cache !== FALSE) && file_exists($cache->data))
    return $cache->data;

  // Search for library file.
  $libpath = libraries_get_path('jquery.jcarousel');

  // Seach for minimized files first.
  $js = glob($libpath . '/lib/jquery.jcarousel.min.js');
  if (count($js) == 0)
    $js = glob($libpath . '/lib/jquery.jcarousel.js');

  if (count($js) > 0) {
    rsort($js);
    cache_set('projekktor_jcarousel_lib_file', $js[0]);
    return $js[0];
  }
  else {
    // Could not find library
    return FALSE;
  }
}

/**
 * Searches for available themes inside the Projekktor themes folder.
 */
function projekktor_get_themes($nocache = FALSE) {
  if (!$nocache && (($themes = cache_get('projekktor_themes')) !== FALSE)) {
    return $themes->data;
  }
  $path = libraries_get_path('projekktor') . '/theme/';

  // Drupal requires css files to be namespaced.
  // Check if the theme directory is writable and copy the css file.
  if ((file_exists($path . 'style.css')) && (!file_exists($path . 'projekktor.style.css'))) {
    if (!is_writable($path)) {
      drupal_set_message(t('The Projekktor library theme folders are not writable. Please check your permissions.'), 'error');
    }
    else {
      copy($path . 'style.css', $path . 'projekktor.style.css');
    }
  }

  $themes = array();

  // Search for theme folders.
  if (is_dir($path) && (($path_handle = opendir($path)) !== FALSE)) {
    while (($theme = readdir($path_handle)) !== FALSE) {
      if (!is_dir($path . $theme) || $theme[0] == '.')
          continue;

        if ($theme != "." && $theme != ".." && glob($path . $theme . '/projekktor.style.css')) {
        $css = glob($path . $theme . '/projekktor.style.css');
        if (count($css) == 0) {
          $css = glob($path . $theme . '/projekktor.style.css');
        }
        $themes[$theme] = $css[0];
      }
    }
    closedir($path_handle);

    // Add the default theme separately since it's in a different directory.
    if (file_exists($path . 'projekktor.style.css')) {
      $themes['default'] = $path . 'projekktor.style.css';
    }

    cache_set('projekktor_themes', $themes);
  }

  return $themes;
}

/**
 * Searches for available themes inside the jcarousel skins folder.
 */
function projekktor_jcarousel_get_themes($nocache = FALSE) {
  if (!$nocache && (($themes = cache_get('projekktor_jcarousel_themes')) !== FALSE))
    return $themes->data;

  $themes = array();

  // Search for theme folders
  $path = libraries_get_path('jquery.jcarousel') . '/skins/';

  if (is_dir($path) && (($path_handle = opendir($path)) !== FALSE)) {
    while (($theme = readdir($path_handle)) !== FALSE) {
      if (!is_dir($path . $theme) || $theme[0] == '.')
          continue;

        if ($theme != "." && $theme != ".." && glob($path . $theme . '/skin.css')) {
        $css = glob($path . $theme . '/skin.css');
        if (count($css) == 0) {
          $css = glob($path . $theme . '/skin.css');
        }
        $themes[$theme] = $css[0];
      }
    }
    closedir($path_handle);

    // Add the default theme separately since it's in the module.
    if (file_exists(drupal_get_path('module', 'projekktor')) . '/jcarousel/skins/default/skin.css') {
      $themes['default'] = drupal_get_path('module', 'projekktor') . '/jcarousel/skins/default/skin.css';
    }

    cache_set('projekktor_jcarousel_themes', $themes);
  }

  return $themes;
}

/**
 * Returns css file of the projekktor theme, or FALSE if it could not be found.
 */
function projekktor_get_theme_file($theme) {
  $themes = projekktor_get_themes();
  return isset($themes[$theme]) ? $themes[$theme] : FALSE;
}

/**
 * Returns css file of the jcarousel theme, or FALSE if it could not be found.
 */
function projekktor_jcarousel_get_theme_file($theme) {
  $themes = projekktor_jcarousel_get_themes();
  return isset($themes[$theme]) ? $themes[$theme] : FALSE;
}

/**
 * Provides a generic settings form for the field formatter and Views plugin.
 */
function projekktor_settings_form($settings) {
  $form = array();

  // Show select box for the preset.
  $presets = array();
  foreach (projekktor_presets() as $name => $preset) {
    $presets[$name] = check_plain($preset['title']);
  }
  $form['projekktor_preset'] = array(
    '#title' => t('Preset'),
    '#type' => 'select',
    '#options' => $presets,
    '#default_value' => $settings['projekktor_preset'],
  );

  // Show the theme select box if there is more than one theme.
  $themes = array_keys(projekktor_get_themes(TRUE));
  if (count($themes) == 1) {
    $form['projekktor_theme'] = array(
      '#type' => 'hidden',
      '#value' => $themes[0],
    );
  }
  elseif (count($themes) > 1) {
    asort($themes);

    $form['projekktor_theme'] = array(
      '#type' => 'select',
      '#title' => t('Theme'),
      '#options' => array_combine($themes, $themes),
      '#default_value' => isset($settings['projekktor_theme']) ? $settings['projekktor_theme'] : 'default',
    );
  }

  return $form;
}

/**
 * Provides a generic jCarousel form for the field formatter.
 *
 * @TODO: Integrate carousel with views.
 */
function projekktor_jcarousel_settings_form($settings) {
  $form = array();

  // Show the theme select box if there is more than one theme.
  $jcarousel_themes = array_keys(projekktor_jcarousel_get_themes(TRUE));
  if (count($jcarousel_themes) == 1) {
    $form['projekktor_jcarousel_theme'] = array(
      '#type' => 'hidden',
      '#value' => $jcarousel_themes[0],
    );
  }
  elseif (count($jcarousel_themes) > 1) {
    asort($jcarousel_themes);

    $form['projekktor_jcarousel_theme'] = array(
      '#type' => 'select',
      '#title' => t('jCarousel skin'),
      '#options' => array_combine($jcarousel_themes, $jcarousel_themes),
      '#default_value' => isset($settings['projekktor_jcarousel_theme']) ? $settings['projekktor_jcarousel_theme'] : 'default',
      '#states' => array(
        'visible' => array(
          ':input[name$="[settings_edit_form][settings][projekktor_jcarousel]"]' => array('checked' => TRUE),
        ),
      ),
    );
  }

  $options = array(
    'top' => 'top',
    'bottom' => 'bottom',
    'left' => 'left',
    'right' => 'right',
  );
  $form['projekktor_jcarousel_position'] = array(
    '#type' => 'select',
    '#title' => t('jCarousel position'),
    '#options' => $options,
    '#default_value' => isset($settings['projekktor_jcarousel_position']) ? $settings['projekktor_jcarousel_position'] : 'bottom',
    '#states' => array(
      'visible' => array(
        ':input[name$="[settings_edit_form][settings][projekktor_jcarousel]"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['projekktor_thumbnail_style'] = array(
    '#title' => t('jCarousel thumbnail style'),
    '#type' => 'select',
    '#default_value' => $settings['projekktor_thumbnail_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => image_style_options(FALSE),
    '#states' => array(
      'visible' => array(
        ':input[name$="[settings_edit_form][settings][projekktor_jcarousel]"]' => array('checked' => TRUE),
      ),
    ),
  );

  return $form;
}

/**
 * Implements hook_field_formatter_info().
 *
 * Adds the Projekktor format option within the manage display form of
 * of a file field.
 */
function projekktor_field_formatter_info() {
  return array(
    'projekktor' => array(
      'label' => t('Projekktor: HTML5 Video Player'),
      'field types' => array(
        'file',
        'field_collection',
        'node_reference',
        'media',
        'link_field',
        'video',
        'youtube',
      ),
      'settings' => array(
        'projekktor_preset' => 'default',
        'projekktor_theme' => 'default',
        'projekktor_reference_file_src' => NULL,
        'projekktor_title_src' => NULL,
        'projekktor_media_src' => NULL,
        'projekktor_image_src' => NULL,
        'projekktor_image_style' => NULL,
        'projekktor_jcarousel' => NULL,
        'projekktor_jcarousel_theme' => NULL,
        'projekktor_thumbnail_style' => NULL,
        'projekktor_jcarousel_position' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 *
 * Provides display settings form within the manage display page of
 * a file field with formatter projekktor.
 */
function projekktor_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Adds the generic settings form.
  $form = projekktor_settings_form($settings);

  // Show select box for file fields if we're formatting a node_reference field.
  if ($field['type'] == 'node_reference') {
    // Find all file fields.
    $file_fields = array();
    $fields = field_info_fields();
    $ref_node_types = array_filter($field['settings']['referenceable_types']);
    foreach ($ref_node_types as $ref_node_type) {
      foreach (field_info_instances('node', $ref_node_type) as $field_name => $field_instance) {
        if ($fields[$field_name]['type'] == 'file') {
          $file_fields[$field_name] = $field_name;
        }
      }
    }
    asort($file_fields);

    if (count($file_fields) == 0) {
      drupal_set_message(t('The referenced node type does not contain any valid file field(s).'), 'error');
      return FALSE;
    }
    elseif (count($file_fields) == 1) {
      $keys = array_keys($file_fields);
      $key = $keys[0];
      $form['projekktor_reference_file_src'] = array(
        '#type' => 'hidden',
        '#value' => $file_fields[$key],
      );
    }
    elseif (count($file_fields) > 1) {
      $form['projekktor_reference_file_src'] = array(
        '#type' => 'select',
        '#title' => t('File source field of the referenced content type'),
        '#options' => $file_fields,
        '#default_value' => isset($settings['projekktor_reference_file_src']) ? $settings['projekktor_reference_file_src'] : '',
      );
    }
  }

  // Show select boxes for fields if we're formatting a field_collection field.
  if ($field['type'] == 'field_collection') {
    $form['projekktor_title_src'] = array(
      '#title' => t('Title field'),
      '#type' => 'select',
      '#default_value' => $settings['projekktor_title_src'],
      '#empty_option' => t('None'),
      '#options' => _projekktor_get_fields(array('text'), $field['type'], $field['field_name']),
    );
    $form['projekktor_media_src'] = array(
      '#title' => t('Media field'),
      '#type' => 'select',
      '#default_value' => $settings['projekktor_media_src'],
      '#empty_option' => t('None'),
      '#options' => _projekktor_get_fields(array('file'), $field['type'], $field['field_name']),
      '#required' => TRUE,
    );
    $form['projekktor_image_src'] = array(
      '#title' => t('Image field'),
      '#type' => 'select',
      '#default_value' => $settings['projekktor_image_src'],
      '#empty_option' => t('None'),
      '#options' => _projekktor_get_fields(array('image', 'imagefield_crop'), $field['type'], $field['field_name']),
    );
    $form['projekktor_image_style'] = array(
      '#title' => t('Image style'),
      '#type' => 'select',
      '#default_value' => $settings['projekktor_image_style'],
      '#empty_option' => t('None (original image)'),
      '#options' => image_style_options(FALSE),
      '#states' => array(
        'invisible' => array(
          ':input[name$="[settings_edit_form][settings][projekktor_image_src]"]' => array('value' => ''),
        ),
      ),
    );
    // Select box for the jCarousel.
    $form['projekktor_jcarousel'] = array(
      '#title' => t('jCarousel thumbnails'),
      '#type' => 'checkbox',
      '#default_value' => $settings['projekktor_jcarousel'],
      '#states' => array(
        'invisible' => array(
          ':input[name$="[settings_edit_form][settings][projekktor_image_src]"]' => array('value' => ''),
        ),
      ),
    );

    // Adds the carousel form.
    $form += projekktor_jcarousel_settings_form($settings);

  }

  // Adds carousel form to media. Youtube only at present.
  if ($instance['widget']['settings']['allowed_schemes']['youtube'] == 'youtube') {
    $form['projekktor_jcarousel'] = array(
      '#title' => t('jCarousel thumbnails'),
      '#type' => 'checkbox',
      '#default_value' => $settings['projekktor_jcarousel'],
    );

    // Adds the carousel form.
    $form += projekktor_jcarousel_settings_form($settings);

  }

  return $form;
}

/**
 * This function retrieves fields for an entity.
 */
function _projekktor_get_fields($field_types, $entity_type, $field_name = '') {
  $links = array();
  $fields = field_info_fields();

  switch ($entity_type) {
    case 'media':
      $bundle = 'file';
      $bundle_instance = 'file';
      $entity_label = t('Media field:');
      break;

    case 'field_collection':
      $bundle = 'field_collection_item';
      $bundle_instance = $field_name;
      $entity_label = t('Field Collection field:');
      break;
  }

  foreach ($fields as $name => $field) {
    if (in_array($bundle, array_keys($field['bundles'])) && in_array($bundle_instance, $field['bundles'][$bundle]) && in_array($field['type'], $field_types)) {
      $infos = field_info_instance($bundle, $name, $bundle_instance);
      $links[$name] = $entity_label . ' ' . $infos['label'];
    }
  }

  return $links;
}

/**
 * Implements hook_field_formatter_settings_summary().
 *
 * Displays the summary of the set options of a Projekktor formatted file field.
 */
function projekktor_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  // Load preset.
  if (!empty($settings['projekktor_preset'])) {
    $o = projekktor_preset_load($settings['projekktor_preset']);
    if ($o !== FALSE) {
      $preset = $o;
    }
  }

  // Build settings summary.
  $preset = isset($preset) ? $preset['title'] : t('Default settings');
  $summary[] = t('Projekktor preset: %preset', array('%preset' => $preset));

  if (isset($settings['projekktor_theme'])) {
    $summary[] = t('Projekktor theme: %theme', array('%theme' => $settings['projekktor_theme']));
  }
  else {
    $summary[] = t('No theme selected, default is "default"');
  }

  if (isset($settings['projekktor_reference_file_src'])) {
    $summary[] = t('File field of the referenced node: %field', array('%field' => $settings['projekktor_reference_file_src']));
  }
  if (!empty($settings['projekktor_title_src'])) {
    $summary[] = t('Title source: %title', array('%title' => $settings['projekktor_title_src']));
  }
  if (!empty($settings['projekktor_media_src'])) {
    $summary[] = t('Media source: %media', array('%media' => $settings['projekktor_media_src']));
  }
  if (!empty($settings['projekktor_image_src'])) {
    $summary[] = t('Image source: %image', array('%image' => $settings['projekktor_image_src']));
  }
  if (!empty($settings['projekktor_image_style'])) {
    $summary[] = t('Image style: %image_style', array('%image_style' => $settings['projekktor_image_style']));
  }
  if (!empty($settings['projekktor_jcarousel'])) {
    if (!empty($settings['projekktor_jcarousel_theme'])) {
      $summary[] = t('jCarousel theme: %theme', array('%theme' => $settings['projekktor_jcarousel_theme']));
    }
    if (!empty($settings['projekktor_jcarousel_position'])) {
      $summary[] = t('jCarousel position: %position', array('%position' => $settings['projekktor_jcarousel_position']));
    }
    if (!empty($settings['projekktor_thumbnail_style'])) {
      $summary[] = t('jCarousel thumbnail style: %image_style', array('%image_style' => $settings['projekktor_thumbnail_style']));
    }
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 *
 * Prepares a renderable array of files.
 */
function projekktor_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];

  switch ($field['type']) {

    case 'file';
      $file_items = array();
      foreach ($items as $item) {
        // Special Media: YouTube case to get thumbnails.
        if ($item['filemime'] == 'video/youtube') {
          $file = (array) $item;
          $wrapper = file_stream_wrapper_get_instance_by_uri($item['uri']);
          $file['image_uri'] = $wrapper->getLocalThumbnailPath();
          $file_items[] = $file;
        }
        else $file_items[] = $item;
      }
      $items = $file_items;
      break;

    case 'node_reference':
      $items = projekktor_get_referenced_files($display['settings']['projekktor_reference_file_src']);
      break;

    case 'media':
      $file_items = array();
      foreach ($items as $item) {
        if ($item['file']->type == 'file') {
          $file = (array) $item['file'];
          $file_items[] = $file;
        }
      }
      $items = $file_items;
      break;

    case 'link_field':
      $links = array();
      foreach ($items as $item) {
        $link = array(
          'uri' => projekktor_get_link_path($item['display_url']),
          'filemime' => projekktor_get_link_mime($item['display_url']),
          'filename' => $item['title'],
        );
        $links[] = $link;
      }
      $items = $links;
      break;

    case 'youtube':
      $youtubes = array();
      foreach ($items as $item) {
        $youtube = array(
          'uri' => 'http://youtube.com/watch?v=' . $item['video_id'],
          'filemime' => 'video/youtube',
        );
        $youtubes[] = $youtube;
      }
      $items = $youtubes;
      break;

    case 'field_collection':
      $collection_items = array();
      foreach ($items as $item) {
        $collections = (array) field_collection_field_get_entity($item);
        $collection_item = $collections[$settings['projekktor_media_src']][$langcode];
        if (!empty($collections[$settings['projekktor_title_src']][$langcode][0]['value'])) {
          $collection_item['title'] = $collections[$settings['projekktor_title_src']][$langcode][0]['value'];
        }
        if (!empty($collections[$settings['projekktor_image_src']][$langcode][0]['uri'])) {
          $collection_item['image_uri'] = $collections[$settings['projekktor_image_src']][$langcode][0]['uri'];
        }
        $collection_items[] = $collection_item;
      }
      $items = $collection_items;
      break;

  }

  $element = array();
  if (count($items) > 0) {
    $element[] = array(
      '#theme' => 'projekktor_container',
      '#items' => $items,
      '#settings' => $display['settings'],
    );
  }
  return $element;
}

/**
 * This function returns all files of a file field.
 *
 * @param string $field
 *   A string used for the name of the field.
 */
function projekktor_get_referenced_files($field) {
  if (empty($field)) {
    drupal_set_message(t('The referenced field does not contain any file field.'), 'error');
    return FALSE;
  }

  $fid_col_name = $field . '_fid';
  $result = db_query('SELECT ' . $fid_col_name . ' FROM {field_data_' . $field . '}');

  $files = array();
  while ($row = $result->fetchAssoc()) {
    $file = (array) file_load($row[$fid_col_name]);
    $files[] = $file;
  }

  return $files;
}

/**
 * A function that converts youtube embed paths to watch paths.
 *
 * @param string $input
 *   A string containing the link url.
 */
function projekktor_get_link_path($input) {
  if (strstr($input, 'youtu.be/')) {
    $anchor = 'be/';
    $position = strpos($input, $anchor);
    $video_id = trim(drupal_substr($input, $position + drupal_strlen($anchor)));
    $url = 'http://youtube.com/watch?v=' . $video_id;
  }
  else {
    $url = $input;
  }

  return $url;
}

/**
 * A function that detects the file mime type of a link.
 *
 * Changes application/octet-stream to video/youtube if appropriate.
 *
 * @param string $input
 *   A string containing the link url.
 */
function projekktor_get_link_mime($input) {
  if ((strstr($input, 'youtu.be/')) || (strstr($input, 'youtube.com/watch?v='))) {
    $mimetype = 'video/youtube';
  }
  else {
    $mimetype = DrupalLocalStreamWrapper::getMimeType($input);
  }

  return $mimetype;
}

/**
 * Attaches the required JavaScripts and settings to the Projekktor element.
 *
 * This forms the basis for the Projekktor API.
 *
 * @param string $player_id
 *   A string to use for the unique player instance id.
 *   Should be a unique css id selector in a video tag like 'projekktor-49'.
 *   Defaults to 'video, audio'.
 * @param string $preset_name
 *   A string to use for the name of a stored preset options array.
 *   Defaults to 'default'.
 * @param string $theme_name
 *   A string to use for the name of a projekktor theme installed on the site.
 *   Defaults to 'default'.
 * @param array $playlist
 *   An indexed array of playlist items containing:
 *   - delta: A mixed array that denotes a playlist item containing:
 *     - key: An associative array for a playlist item file or url containing:
 *       - src: A string to use for the source of a file or url to a video.
 *       - type: A string to use for the file mime type.
 *     - config: (optional) An associative array of per playlist item options
 *       containing.
 *       - title: (optional) The string to use for the video title.
 *       - poster: (optional) The string to use for a path to the video poster.
 *   The playlist is passed in the javascript array.
 *   Each delta may contain an indexed array of multiple file types (ie. mp4,
 *   webm, ogv) for HTML5 cross browser support of each playlist item.
 *   Numerous options for each playlist item can be passed via the config array.
 *
 * @see http://www.projekktor.com/docs/playlists
 */
function projekktor_add($player_id = NULL, $preset_name = NULL, $theme_name = NULL, $playlist = NULL) {
  // Static array to remember which scripts are already attached.
  $cache = &drupal_static(__FUNCTION__, array());

  // Cache this filename to prevent multiple file_exists() calls.
  if (!isset($cache['lib'])) {
    $lib = projekktor_get_library_file();
    if ($lib === FALSE) {
      drupal_set_message(t('The Projekktor JavaScript file was not found in its path. Please refer to README.txt for installation instructions.'), 'error');
      return;
    }
    $cache['lib'] = $lib;
  }
  // Get the path to projekktor library.
  $js_library = file_create_url($cache['lib']);
  drupal_add_js($js_library, array('group' => JS_LIBRARY, 'every_page' => TRUE, 'weight' => -20));

  // Checks to see if a theme is cached and tries to add it.
  // Otherwise retrieves the theme option from the settings array and caches it.
  // Falls back to default as a last resort.
  if (empty($cache['theme'])) {
    $theme = (!empty($theme_name)) ? $theme_name : 'default';
    $theme_file = projekktor_get_theme_file($theme);
    if (($theme_file === FALSE) && ($theme !== 'default')) {
      // Try to fall back to default theme, the other might have been deleted.
      $theme_file = projekktor_get_theme_file('default');
    }
    $cache['theme'] = $theme_file;
    drupal_add_css($cache['theme']);
  }
  elseif (!empty($cache['theme']) && !FALSE) {
    drupal_add_css($cache['theme']);
  }

  // Gets the requested preset or falls back to default.
  if (!empty($preset_name)) {
    $preset = projekktor_preset_load($preset_name);
  }
  if (empty($preset)) {
    $preset = projekktor_preset_load('default');
  }

  // Create the path to our jarisplayer flash fallback file.
  $jarisplayer = file_create_url(libraries_get_path('projekktor') . '/jarisplayer.swf');

  // Forms the settings array for an single instance or sitewide.
  if (!empty($preset)) {
    // Just hard code the flash fallback player into the options array.
    // That way users aren't confused by it in the options form.
    $preset['options']['playerFlashMP3'] = $preset['options']['playerFlashMP4'] = $jarisplayer;
    // This passes the preset options to a unique instance.
    if (!is_null($player_id)) {
      // This adds the optional playlist to the preset array.
      if (isset($playlist)) {
        $preset['options']['playlist'] = $playlist;
      }
      $js_settings = array(
        'instances' => array(
          $player_id => $preset['options'],
        ),
      );
    }
    // Otherwise pass settings to generic audio/video tags.
    elseif (is_null($player_id)) {
      $js_settings = array(
        'presetAll' => $preset['options'],
      );
    }
  }
  drupal_add_css(drupal_get_path('module', 'projekktor') . '/css/projekktor.css');

  drupal_add_js(array('projekktor' => $js_settings), 'setting');

  drupal_add_js(drupal_get_path('module', 'projekktor') . '/js/projekktor.load.js');
}

/**
 * Attaches the required JavaScripts and settings to the jCarousel element.
 *
 * @param integer $id
 *   A unique id for the carousel instance.
 * @param array $settings
 *   The settings passed by the instance form.
 */
function projekktor_jcarousel_add($id, $settings) {
  // Static array to remember which scripts are already attached.
  $cache = &drupal_static(__FUNCTION__, array());

  // Cache this filename to prevent multiple file_exists() calls.
  if (!isset($cache['lib'])) {
    $lib = projekktor_jcarousel_get_library_file();
    if ($lib === FALSE) {
      drupal_set_message(t('The jCarousel JavaScript file was not found in its path. Please refer to README.txt for installation instructions.'), 'error');
      return;
    }
    $cache['lib'] = $lib;
  }
  // Get the path to projekktor library.
  $js_library = file_create_url($cache['lib']);
  drupal_add_js($js_library, array('group' => JS_LIBRARY));

  // Checks to see if a theme is cached and tries to add it.
  // Otherwise retrieves the theme option from the settings array and caches it.
  // Falls back to default as a last resort.
  if (empty($cache['theme'])) {
    $theme_name = $settings['projekktor_jcarousel_theme'];
    $theme = (!empty($theme_name)) ? $theme_name : 'default';
    $theme_file = projekktor_jcarousel_get_theme_file($theme);
    if (($theme_file === FALSE) && ($theme !== 'default')) {
      // Try to fall back to default theme, the other might have been deleted.
      $theme_file = projekktor_jcarousel_get_theme_file('default');
    }
    $cache['theme'] = $theme_file;
    drupal_add_css($cache['theme']);
  }
  elseif (!empty($cache['theme']) && !FALSE) {
    drupal_add_css($cache['theme']);
  }

  if (($settings['projekktor_jcarousel_position']) == 'top' || ($settings['projekktor_jcarousel_position']) == 'bottom') {
    $vertical = FALSE;
  }
  else $vertical = TRUE;

  $js_settings = array(
    'projekktor-jcarousel-' . $id => array(
      'vertical' => $vertical,
      'scroll' => 1,
    ),
  );

  drupal_add_js(array('projekktorJcarousel' => $js_settings), 'setting');
}
