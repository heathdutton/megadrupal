<?php

/**
 * Implements hook_menu().
 */
function pm_cache_menu() {
  $items = array();
  $items['pm-cache/entity-links'] = array(
    'title' => 'Entity links',
    'page callback' => 'pm_cache_entity_links_page',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function pm_cache_init() {
  drupal_add_js(drupal_get_path('module', 'pm_cache') . '/js/entity-links.js');
  drupal_add_js(array('pmCache' => array('isAnonymous' => user_is_anonymous())), 'setting');
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function pm_cache_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' || $owner == 'panels') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Page callback.
 *
 * @todo
 *   Come up with a token system that protects against flooding this page
 *   callback with non-cacheable POST requests.
 */
function pm_cache_entity_links_page() {
  $response = array();

  foreach ($_POST as $entity_type => $info) {
    $entities = entity_load($entity_type, array_keys($info));
    foreach ($entities as $id => $entity) {
      $view_modes = array_unique($info[$id]);
      foreach ($view_modes as $view_mode) {
        $links = pm_cache_get_entity_links($entity_type, $entity, $view_mode);
        if ($links) {
          $output = drupal_render($links);
          if (!isset($response[$entity_type])) {
            $response[$entity_type] = array();
          }
          if (!isset($response[$entity_type][$id])) {
            $response[$entity_type][$id] = array();
          }
          $response[$entity_type][$id][$view_mode] = $output;
        }
      }
    }
  }

  drupal_add_http_header('Content-Type', 'text/javascript; charset=utf-8');
  print drupal_json_encode($response);
  drupal_exit();
}

/**
 * API function to get links for an entity.
 *
 * @param $entity_type
 *   The entity type to build links for.
 * @param $entity
 *   The entity to build links for.
 * @param $view_mode
 *   The view mode to build links for.
 * @param $account
 *   Optional, the user account to build links for.
 * @return array|boolean
 *   A render array representing the links, or FALSE if something went wrong.
 */
function pm_cache_get_entity_links($entity_type, $entity, $view_mode, $account = NULL) {
  // Set the user account we want the link to be generated for.
  if ($account) {
    $original_user = $GLOBALS['user'];
    $GLOBALS['user'] = $account;
  }

  // Catch any errors while building the links, just so that we can restore the
  // user account if anything goes wrong.
  try {
    // Build links according to Drupal's loosely defined standard of building
    // entities.
    if ($entity_type == 'comment') {
      $node = node_load($entity->nid);
      comment_build_content($entity, $node, $view_mode);
    }
    else {
      $function = $entity_type . '_build_content';
      if (function_exists($function)) {
        $function($entity, $view_mode);
      }
      else {
        watchdog('pm_cache', 'Invalid build function for @type', array('@type' => $entity_type), WATCHDOG_WARNING);
      }
    }
  }
  catch (Exception $e) {
    watchdog_exception('pm_cache', $e);
  }

  // Restore the user.
  if ($account) {
    $GLOBALS['user'] = $original_user;
  }

  if (isset($entity->content['links'])) {
    return $entity->content['links'];
  }
  return FALSE;
}
