<?php

/**
 * Implements hook_field_info().
 */
function ad_manager_field_field_info() {
  return array(
    'ad_manager_field_ad' => array(
      'label' => t('Ad unit'),
      'description' => t('Ad unit to display.'),
      'default_widget' => 'ad_manager_field_widget_list',
      'default_formatter' => 'ad_manager_field_formatter_ad',
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function ad_manager_field_field_is_empty($item, $field) {
  return empty($item['ad']);
}

/**
 * Implements hook_field_formatter_info().
 */
function ad_manager_field_field_formatter_info() {
  return array(
    'ad_manager_field_formatter_ad' => array(
      'label' => t('Render ad unit'),
      'field types' => array('ad_manager_field_ad'),
    ),
  );
}

/**
 * Implements hook_field_formtter_view().
 *
 * @see ad_manager_field_field_formatter_info()
 */
function ad_manager_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'ad_manager_field_formatter_ad':
      foreach ($items as $delta => $item) {
        $element[$delta] = theme('ad_manager_ad', array('name' => $item['ad']));
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function ad_manager_field_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  $options = array();
  $providers = ad_manager_providers();
  foreach ($providers as $key => $data) {
    $options[$key] = $data['name'];
  }
  ksort($options);

  $units = array();
  ctools_include('export');
  $ads = ctools_export_load_object('ad_manager_ad');
  foreach ($ads as $key => $obj) {
    $units[$key] = array(
      'disabled' => isset($obj->disabled) ? $obj->disabled : FALSE,
      'provider' => $obj->provider,
    );
  }
  // For some reason using ['#attached']['js'][] doesn't seem to work here, so
  // we use drupal_add_js().
  drupal_add_js(drupal_get_path('module', 'ad_manager_field') . '/js/instance-settings.js');
  drupal_add_js(array('adManagerField' => array('ads' => $units)), 'setting');

  $form['ad_providers'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Allowed ad providers'),
    '#description' => t('Leaving all checkboxes empty will allow ad units from all providers.'),
    '#default_value' => isset($settings['ad_providers']) ? $settings['ad_providers'] : array(),
    '#options' => $options,
  );

  return $form;
}

/**
 * Implements hook_field_widget_info().
 */
function ad_manager_field_field_widget_info() {
  return array(
    'ad_manager_field_widget_list' => array(
      'label' => t('Select list'),
      'field types' => array('ad_manager_field_ad'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function ad_manager_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['ad']) ? $items[$delta]['ad'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {
    case 'ad_manager_field_widget_list':
      // Initialize additional descriptive text array for ad units.
      $descriptions = array();

      $menu_item = menu_get_item();
      // Determine whether we are on a field instance settings form or not.
      // This is necessary as the options configured are used in
      // ad_manager_field_field_instance_settings_form(), where we need all
      // ad units listed.
      $settings_form = isset($menu_item['page_arguments'][0]) &&
          $menu_item['page_arguments'][0] === 'field_ui_field_edit_form';

      $providers = array();
      // If not on the field instance settings form.
      if (!$settings_form) {
        // Determine which providers are configured in the field instance
        // settings, if the setting exists.
        if (isset($instance['settings']['ad_providers'])) {
          foreach ($instance['settings']['ad_providers'] as $provider => $enabled) {
            if ($enabled === $provider) {
              $providers[$provider] = $enabled;
            }
          }
        }
      }

      // Build the selectable options for the field.
      $options = array();
      ctools_include('export');
      $ads = ctools_export_load_object('ad_manager_ad');
      foreach ($ads as $key => $obj) {
        if (empty($providers) || isset($providers[$obj->provider])) {
          $options[$key] = $obj->name;
          // If not on the settings form, attempt to load additional descriptive
          // text about this ad unit.
          if (!$settings_form) {
            // Invoke hook_ad_manager_field_additional_description($name, $unit).
            $description = module_invoke($obj->provider,
                'ad_manager_field_additional_description', $key, $obj);
            if (!empty($description)) {
              $descriptions[$key] = $description;
            }
          }
        }
      }
      ksort($options);

      // Set the widget's settings.
      $widget += array(
        '#type' => 'select',
        '#default_value' => $value,
        '#options' => $options,
        '#empty_value' => '',
      );

      // If this is not a settings form, attach field JS.
      if (!$settings_form) {
        $widget['#attributes']['class'][] = 'ad-manager-field';
        $path = drupal_get_path('module', 'ad_manager_field');
        $form['#attached']['js'][] = $path . '/js/field.js';
        $form['#attached']['js'][] = array(
          'data' => array('adManagerField' => array('descriptions' => (object) $descriptions)),
          'type' => 'setting',
        );
        $form['#attached']['css'][] = $path . '/css/field.css';
      }
      break;
  }

  $element['ad'] = $widget;
  return $element;
}

