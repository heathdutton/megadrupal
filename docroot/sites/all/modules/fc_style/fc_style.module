<?php

/**
 * Implements hook_field_info_alter().
 */
function fc_style_field_info_alter(&$field_info) {
  // Define Field Widgets field settings defaults.
  $field_info['field_collection']['instance']['fc_style_equal_heights'] = 0;
}


/**
 * Implements hook_field_widget_form_alter().
 */
function fc_style_form_field_ui_field_edit_form_alter(&$form, &$form_state) {

  // Display options only on Field Collection manage fields forms.
  if ($form['#field']['type'] != 'field_collection') {
    return;
  }

  $form['instance']['settings']['fc_style_equal_heights'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Equal heights'),
    '#description'   => t('Make each item on a row equal in height.'),
    '#default_value' => $form['#instance']['settings']['fc_style_equal_heights'],
  );

}

function fc_style_preprocess_node(&$variables) {

  static $field_collections = array();

  foreach ($variables['content'] as $field_name => $field_info) {

    // Limit to Field Collection fields.
    if ($field_info['#field_type'] == 'field_collection') {
      $field_definition = field_info_instance($variables['elements']['#entity_type'], $field_name, $variables['elements']['#bundle']);

      // Check if equal heights has been set for this field.
      if (isset($field_definition['settings']['fc_style_equal_heights']) && !empty($field_definition['settings']['fc_style_equal_heights'])) {

        // Set as widget.
        $style = TRUE;

        // Add equal heights changes.
        fc_style_preprocess_items($variables, $field_collections, $field_definition, $field_name);
      }
    }
  }

  if ($style) {
    $variables['classes_array'][] = 'fc-style';
    //$js_file = drupal_get_path('module', 'fc_style') . '/fc_style.js';
    //drupal_add_js(array('fc_style' => array('fc_styleStylise' => $field_collections)), array('type' => 'setting'));
    //drupal_add_js($js_file);
  }

  return;
}

function fc_style_preprocess_page(&$vars) {

  $field_collections = fc_style_field_collections();

  if (!empty($field_collections)) {
    $js_file = drupal_get_path('module', 'fc_style') . '/fc_style.js';
    drupal_add_js($js_file);
    drupal_add_js(array('fc_style' => array('fc_styleStylise' => $field_collections)), array('type' => 'setting'));
  }
}

function fc_style_preprocess_items(&$variables, &$field_collections, $field_definition, $field_name) {

  $variables['element']['#attributes']['class'][] = 'fc-style-equal-heights';

  // Add class to field collection items.
  foreach (element_children($variables['content'][$field_name]) as $element_key) {
    $variables['content'][$field_name][$element_key]['#attributes']['class'][] = 'fc-style-item';
  }

  fc_style_field_collections($field_name);

  return;
}

function fc_style_field_collections($field_name = NULL) {
  static $field_collections = array();

  if (empty($field_name)) {
    return $field_collections;
  }

  $field_class = '.fc-style .field--name-' . drupal_html_class($field_name);

  if (!in_array($field_class, $field_collections)) {
    $field_collections[] = $field_class;
  }

  return $field_collections;
}
