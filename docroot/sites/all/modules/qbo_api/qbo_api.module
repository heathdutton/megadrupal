<?php

define('QBO_API_QUERY_PAGE_SIZE', 500);

/**
 * Implements hook_menu().
 */
function qbo_api_menu() {
  $items = array();
  $items['admin/config/services/qbo'] = array(
    'title' => 'Quickbooks Online API',
    'description' => 'Configure the Quickbooks Online API integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('qbo_api_admin_settings'),
    'access arguments' => array('administer qbo api'),
    'file' => 'qbo_api.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function qbo_api_permission() {
  $perms = array();
  $perms['administer qbo api'] = array(
    'title' => t('Administer Quicbooks Online API'),
  );
  return $perms;
}

/**
 * Implements hook_libraries_info().
 */
function qbo_api_libraries_info() {
  $libraries = array();
  $libraries['qbo'] = array(
    'name' => 'Quickbooks Online API',
    'vendor url' => 'https://developer.intuit.com/',
    'download url' => 'https://developer.intuit.com/docs/0100_accounting/0500_developer_kits/0210_ipp_php_sdk_for_quickbooks_v3',
    'version arguments' => array(
      'file' => 'ReadMe.txt',
      'pattern' => "/Version: (.+)/",
    ),
    'files' => array(
      'php' => array(
        'config.php',
        'DataService/DataService.php',
        'PlatformService/PlatformService.php',
        'Utility/Configuration/ConfigurationManager.php',
        'Data/IPPCustomer.php',
        'Security/OAuthRequestValidator.php',
        'Core/ServiceContext.php',
        'QueryFilter/QueryMessage.php',
      ),
    ),
  );
  return $libraries;
}

/**
 * Create a QBO API client class.
 *
 * @return
 *   A Quickbooks Online API Client class if all connection settings are
 *   present, otherwise NULL.
 */
function qbo_api_client() {
  // Load the library
  libraries_load('qbo');

  // Mark what is required
  $required = array(
    'company_id',
    'consumer_key',
    'consumer_secret',
    'access_token',
    'access_secret',
  );

  // Iterate the required items and fetch the data
  foreach ($required as $key) {
    // If we cannot get a value, then we cannot get a client
    if (!(${$key} = variable_get("qbo_api_{$key}", ''))) {
      return NULL;
    }
  }

  // Authenticate via OAuth and create a Data Service object
  $request_validator = new OAuthRequestValidator($access_token, $access_secret, $consumer_key, $consumer_secret);
  $service_type = IntuitServicesType::QBO;
  $service_context = new ServiceContext($company_id, $service_type, $request_validator);
  $service_context->IppConfiguration->Logger->RequestLog->EnableRequestResponseLogging = FALSE;
  $data_service = new DataService($service_context);

  return $data_service;
}

/**
 * Perform a query against the Quickbooks API.
 *
 * Responses will be cached both statically and in the database.
 *
 * @param $query
 *   The SQL query to perform.
 * @param $reset
 *   TRUE if the cache should be bypassed. Defaults to FALSE.
 * @return
 *   The query response, or NULL if nothing was returned or the call
 *   failed.
 */
function qbo_api_query($query, $reset = FALSE) {
  $responses = &drupal_static(__FUNCTION__, array());

  // Load the library
  libraries_load('qbo');

  // Create a key for this query
  $key = 'qbo:query:' . md5(strtolower($query));

  // Check the static cache
  if (!isset($responses[$key]) || $reset) {
    // Initialize the static cache
    $responses[$key] = array();
    
    // Check the database cache
    if (!$reset && ($cache = cache_get($key))) {
      // Extract the cached data
      $responses[$key] = $cache->data;
    }
    else {
      // Get a client
      if ($client = qbo_api_client()) {
        // Perform the query, using pages if the result sets are larger
        // than the defined page size.
        $page = 0;
        while (TRUE) {
          // Fetch the results
          $response = $client->Query($query, $page, QBO_API_QUERY_PAGE_SIZE);

          // Increment the page for the next potential run
          $page++;

          // See if results were returned
          if (is_array($response)) {
            // Add the response to the overall results, if something was
            // returned.
            $responses[$key] = array_merge($responses[$key], $response);

            // If the size of the response is the size of the page, we
            // need to move on to the next page
            if (count($response) == QBO_API_QUERY_PAGE_SIZE) {
              continue;
            }
          }

          // Stop the looping
          break;
        }

        // Cache the data for next time, if data was returned
        if ($responses[$key]) {
          cache_set($key, $responses[$key], 'cache', CACHE_TEMPORARY);
        }
      }
    }
  }

  return $responses[$key];
}

/**
 * Convert query results to an array suitable to be used as form element
 * options.
 *
 * @param $query
 *   The SQL query to pass to the QBO API. The query must return at least
 *   the Id and Name.
 * @param $empty
 *   An untranslated string to be used as the optional empty value which
 *   resides at the top of the options list. This defaults to "- Select one -".
 *   If set to NULL or FALSE, this will not be used.
 * @param $reset
 *   TRUE if the query cache should be reset.
 * @return
 *   An array of results from the query keyed by ID with the name as the
 *   value.
 */
function qbo_api_query_as_options($query, $empty = '- Select one -', $reset = FALSE) {
  $options = array();

  // Add an empty option to the top, if requested.
  if ($empty) {
    $options[''] = t($empty);
  }

  // Execute the query.
  if ($results = qbo_api_query($query, $reset)) {
    // Iterate the results
    foreach ($results as $result) {
      $options[$result->Id] = $result->Name;
    }
  }

  return $options;
}

/**
 * Helper function to query for an object by Id.
 *
 * @param $type
 *   The object type (ie, SalesReceipt, JournalEntry, Item, Account).
 * @param $id
 *   The object Id, which must be numeric.
 * @param $reset
 *   TRUE if the cache should be bypassed, otherwise FALSE. Defaults to
 *   FALSE.
 * @return
 *   The fetched object, if found, otherwise NULL.
 */
function qbo_api_get_object_by_id($type, $id, $reset = FALSE) {
  // Execute the query
  if ($results = qbo_api_query("SELECT * FROM {$type} WHERE Id = '{$id}'", $reset)) {
    // Only one item should be available
    return isset($results[0]) ? $results[0] : NULL;
  }

  return NULL;
}
