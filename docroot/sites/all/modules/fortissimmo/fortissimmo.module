<?php

/**
 * @file
 * This module exposes the Fortissimmo database tables to Drupal through Views
 */

/**
 * @TODO:
 * - add overview View per account to list properties for that account
 * - integration with Context
 * - improve U Zoekt API
 */

include_once('fortissimmo.data.inc');

/**
 * Implementation of hook_theme()
 */
function fortissimmo_theme() {
  return array(
    'fortissimmo_form_landingpage' => array(
      'variables' => array('property_id' => NULL),
      'template' => 'fortissimmo-form-landingpage',
    ),
  );
}

/**
 * Implementation of hook_preprocess_fortissimmo_form_landingpage().
 */
function fortissimmo_preprocess_fortissimmo_form_landingpage(&$vars) {
  if (isset($vars['property_id']) && !empty($vars['property_id'])) {
    $vars['property_name'] = fortissimmo_property_get_title($vars['property_id']);
  }
}

/**
 * Implements hook_permission().
 */
function fortissimmo_permission() {
 return array(
    'administer Fortissimmo' => array(
      'title' => t('Administer Fortissimmo'),
      'description' => t('Perform administration tasks for the Fortissimmo module.'),
    ),
    'use Fortissimmo forms' => array(
      'title' => t('Use Fortissimmo forms'),
      'description' => t('Use the forms to send back data to Fortissimmo'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function fortissimmo_menu() {
  $items = array();

  $items['admin/config/services/fortissimmo'] = array(
    'title' => 'Fortissimmo',
    'description' => 'Fortissimmo settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fortissimmo_admin_settings'),
    'access arguments' => array('administer Fortissimmo'),
    'file' => 'fortissimmo.admin.inc',
  );

  $items['fortissimmo/property/%'] = array(
    'title callback' => 'fortissimmo_property_get_title',
    'title arguments' => array(2),
    'page callback' => 'fortissimmo_property_detail_page',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'fortissimmo.pages.inc',
  );

  $items['fortissimmo/property/form/%'] = array(
    'title callback' => 'fortissimmo_property_form_get_title',
    'title arguments' => array(3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fortissimmo_property_request_form', 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'fortissimmo.pages.inc',
  );

  $items['fortissimmo/form'] = array(
    'title' => 'Stay informed about new properties',
    'description' => 'Stay informed about new properties',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fortissimmo_request_form'),
    'access arguments' => array('use Fortissimmo forms'),
    'type' => MENU_CALLBACK,
    'file' => 'fortissimmo.pages.inc',
  );

  $items['fortissimmo/form/done'] = array(
    'title' => 'Thank you for contacting us',
    'page callback' => 'fortissimmo_form_landingpage',
    'page arguments' => array(),
    'access arguments' => array('use Fortissimmo forms'),
    'type' => MENU_CALLBACK,
    'file' => 'fortissimmo.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function fortissimmo_block_info() {
  $blocks['request_form'] = array(
    'info' => t('Stay informed about new properties'),
  );

  $blocks['property_request_form'] = array(
    'info' => t('Stay informed about this property'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function fortissimmo_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'request_form':
      $block['subject'] = t('Stay informed about new properties');
      $block['content'] = l(t('Stay informed about new properties!'), 'fortissimmo/form');
      break;
    case 'property_request_form':
      $args = arg();
      if ($args[0] == "fortissimmo" && $args[1] == "property" && is_numeric($args[2])) {
        $block = array(
          'subject' => t('Stay informed about this property'),
          'content' => l(t('Stay informed about this property'), 'fortissimmo/property/form/' . $args[2]),
        );
      }
      break;
  }
  return $block;
}

/**
 * Render title for property info request form
 */
function fortissimmo_property_form_get_title($fortissimmo_id) {
  return t('Stay informed about @property_title', array('@property_title' => fortissimmo_property_get_title($fortissimmo_id)));
}

/**
 * Get the account ID for a given Fortissimmo ID
 */
function fortissimmo_property_get_accountid($fortissimmo_id, $reset = FALSE) {
  $accountids = &drupal_static(__FUNCTION__);

  if (!isset($accountids[$fortissimmo_id]) || $reset) {
    $accounts = fortissimmo_get_accounts();
    if ($accounts) {
      if (count($accounts) == 1) {
        // There is only one account, so take that one
        $accountid = key($accounts);
        $accountids[$fortissimmo_id] = $accountid;
      }
      else {
        // Multiple accounts are available.
        // Search through all of them to the find the Fortissimmo ID
        foreach ($accounts as $accountid => $name) {
          $value = db_query("SELECT fortissimmo FROM {tbl" . $accountid . "_pand} WHERE fortissimmo = :fortissimmo_id", array(':fortissimmo_id' => $fortissimmo_id))->fetchField();
          if (!empty($value)) { // we found the Fortissimmo ID here!
            $accountids[$fortissimmo_id] = $accountid;
          }
        }
      }
    }
  }

  return $accountids[$fortissimmo_id];
}

/**
 * Generate the URL to a Fortissimmo property detail page
 * This is a wrapper around l(), to make sure aliases are created for new properties
 * if Pathauto is enabled
 */
function fortissimmo_generate_link($label, $fortissimmo_id, $options = array()) {
  global $language;
  $url = 'fortissimmo/property/' . $fortissimmo_id;
  if (module_exists('pathauto')) {
    $current_alias = drupal_get_path_alias($url);
    if ($current_alias == $url) {
      fortissimmo_create_path($fortissimmo_id);
    }
  }
  return l($label, $url, $options);
}

/**
 * Create a pathauto alias for a Fortissimmo property
 */
function fortissimmo_create_path($fortissimmo_id, $op = 'insert') {
  if (module_exists('pathauto')) {
    module_load_include('inc', 'pathauto');
    // create a pseudo-object to store values attached to this Fortissimmo id
    $fortissimmo = new stdClass;
    $fortissimmo->title = fortissimmo_property_get_title($fortissimmo_id);
    $fortissimmo->transaction = fortissimmo_property_get_transaction_type($fortissimmo_id);
    return pathauto_create_alias('fortissimmo', $op, 'fortissimmo/property/' . $fortissimmo_id, array('fortissimmo' => $fortissimmo));
  }
}

/**
 * Generate the URL for a Fortissimmo asset
 */
function fortissimmo_create_asset_url($filename, $type = 'images') {
  $scheme = variable_get('fortissimmo_files_scheme', file_default_scheme());
  $assets_dir = variable_get('fortissimmo_file_path', '');
  return $scheme . '://' . $assets_dir . '/' . $type . '/' . $filename;
}

/**
 * Implements hook_views_api().
 */
function fortissimmo_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'fortissimmo') . '/views',
  );
}

/**
 * Implements hook_cron().
 *
 * Updates path aliases for updated properties
 */
function fortissimmo_cron() {
  $last_check = variable_get('fortissimmo_last_cron', 0);
  $to_update = array();
  $last_check_date = date('Y-m-d H:i:s', $last_check);

  $accounts = fortissimmo_get_accounts();
  if ($accounts) {
    foreach ($accounts as $accountid => $accountname) {
      $to_update = db_select('tbl' . $accountid . '_pand', 'pand')
        ->condition('pand.date_changed', $last_check_date, '>')
        ->fields('pand', array('fortissimmo'))
        ->execute()
        ->fetchCol();
    }
  }

  if ($to_update) {
    foreach ($to_update as $fortissimmo_id) {
      fortissimmo_create_path($fortissimmo_id, 'update');
    }
  }
  variable_set('fortissimmo_last_cron', time());
}

/**
 * Callback to generate aliases for fortissimmo pages in bulk.
 */
function fortissimmo_pathauto_bulkupdate() {
  module_load_include('inc', 'pathauto');

  $accounts = fortissimmo_get_accounts();
  if ($accounts) {
    foreach ($accounts as $accountid => $accountname) {
      $to_update = db_select('tbl' . $accountid . '_pand', 'pand')
        ->fields('pand', array('fortissimmo'))
        ->execute()
        ->fetchCol();
    }
  }

  if ($to_update) {
    foreach ($to_update as $fortissimmo_id) {
      fortissimmo_create_path($fortissimmo_id, 'bulkupdate');
    }
    drupal_set_message(format_plural(count($to_update), '1 Fortissimmo alias updated.', '@count Fortissimmo aliases updated'));
  }
}
