<?php

/**
 * @file
 * MIGS Merchant hosted payment method for Drupal Commerce.
 *
 * Based heavily on grobot's uc_migs module for ubercart
 * and mattq1982's merchant hosted version of the above
 * ( see http://drupal.org/node/704140 )
 */

/**
 * Implements hook_help().
 */
function commerce_migs_merchant_help($path, $arg) {
  switch ($path) {
    case 'admin/help#commerce_migs_merchant':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("A payment method for banks using the MIGS payment system") . '<p>';
      return $output;
  }
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_migs_merchant_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['migs_merchant'] = array(
    'base' => 'commerce_migs_merchant',
    'title' => t('MIGS credit card - merchant hosted'),
    'short_title' => t('MIGS Merchant'),
    'display_title' => t('Credit card'),
    'description' => t('Integrates MIGS Merchant Hosted Payment gateway'),
  );

  return $payment_methods;
}

/* * ***********************************************************************
 * Callback Functions, Forms, and Tables
 * *********************************************************************** */

/**
 * Payment method callback: settings form.
 */
function commerce_migs_merchant_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
    'commerce_migs_mid' => '',
    'commerce_migs_access_code' => '',
    'commerce_migs_version' => '1',
    'commerce_migs_locale' => 'en',
    'commerce_migs_method_title' => 'Credit card',
    'commerce_migs_merchant_po_prefix' => 'test',
  );

  $form['commerce_migs_mid'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Id'),
    '#description' => t('Your MIGS merchant id.'),
    '#required' => TRUE,
    '#default_value' => $settings['commerce_migs_mid'],
    '#size' => 16,
  );

  $form['commerce_migs_access_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Access code'),
    '#description' => t('The access code is provided to you when you registered
      your merchant profile.'),
    '#default_value' => $settings['commerce_migs_access_code'],
    '#size' => 16,
  );

  $form['commerce_migs_version'] = array(
    '#type' => 'textfield',
    '#title' => t('Version number'),
    '#description' => t('The version number of the API being used. 
      Currently developed for version 1. Most likely do not change this.'),
    '#default_value' => $settings['commerce_migs_version'],
    '#size' => 5,
  );
  $form['commerce_migs_locale'] = array(
    '#type' => 'select',
    '#title' => t('Language preference'),
    '#description' => t('Adjust language on MIGS pages.'),
    '#options' => array(
      'en' => t('English'),
    ),
    '#default_value' => $settings['commerce_migs_locale'],
  );
  $form['commerce_migs_method_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Payment method title'),
    '#default_value' => $settings['commerce_migs_method_title'],
  );

  $form['commerce_migs_merchant_po_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Purchase Order prefix'),
    '#description' => t('Enter a string to place before the order ID.'),
    '#default_value' => $settings['commerce_migs_merchant_po_prefix'],
  );

  $form['commerce_migs_merchant_payment_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Payment Url'),
    '#description' => t(
        'Enter a the URL where this payment request will be sent.'),
    '#default_value' => variable_get('uc_migs_merchant_payment_url',
        'https://migs.mastercard.com.au/vpcdps'),
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 * 
 * @param array $payment_method 
 *   The payment method.
 * 
 * @param array $pane_values 
 *   Values from the pane.
 * 
 * @param array $checkout_pane
 *   The checkout pane.
 * 
 * @param object $order 
 *   The order.
 * 
 * @return array
 *   Drupal FAPI form array.
 */
function commerce_migs_merchant_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc',
      'commerce_payment', 'includes/commerce_payment.credit_card');
  $form = commerce_payment_credit_card_form(array(
    'code' => '',
    'type' => array('visa', 'mastercard'),
      ));
  return $form;
}

/**
 * Payment method callback: checkout form validation.
 * 
 * @param array $payment_method 
 *   The payment method.
 * 
 * @param array $pane_form 
 *   Pane form information. Includes this and other active payment methods.
 * 
 * @param array $pane_values 
 *   Values from the pane.
 * 
 * @param object $order 
 *   The order.
 * 
 * @param array $form_parents 
 *   Parent form info.
 */
function commerce_migs_merchant_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {

  module_load_include('inc',
      'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'],
      $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 * 
 * @param array $payment_method 
 *   The payment method.
 * 
 * @param array $pane_form 
 *   Pane form information. Includes this and other active payment methods.
 * 
 * @param array $pane_values 
 *   Values from the pane.
 * 
 * @param object $order 
 *   The order.
 * 
 * @param array $charge
 *   The amount charged (commerce currency array).
 * 
 * @return bool
 *   FALSE if the transaction fails.
 */
function commerce_migs_merchant_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {

  // Prepare data to send.
  $amount_no_points = commerce_currency_amount_to_decimal($charge['amount'],
      $charge['currency_code']) * 100;

  // Create the order info.
  $order_info = $payment_method['settings']['commerce_migs_merchant_po_prefix']
  . $order->order_number;
  // Build the payment message.
  static $tx_ref = 1;

  // Required Fields.
  $message_args = array(
    'vpc_Version' => $payment_method['settings']['commerce_migs_version'],
    'vpc_Command' => 'pay',
    'vpc_MerchTxnRef' => $order_info . '/' . $tx_ref,
    'vpc_AccessCode' => $payment_method['settings']['commerce_migs_access_code'],
    'vpc_Merchant' => $payment_method['settings']['commerce_migs_mid'],
    'vpc_OrderInfo' => $order_info,
    'vpc_Amount' => $amount_no_points,
    'vpc_CardNum' => $pane_values['credit_card']['number'],
    'vpc_CardSecurityCode' => $pane_values['credit_card']['code'],
    'vpc_CardExp' => substr((string) $pane_values['credit_card']['exp_year'], 2) .
      $pane_values['credit_card']['exp_month'],
  );

  $message = drupal_http_build_query($message_args);

  // Submit the request to MIGS VPC gateway.
  $response = commerce_migs_merchant_request($payment_method, $message, $order);

  if ($response) {

    // Add entry to dbLog.
    watchdog('commerce_migs_merchant',
        'Response recieved for Order @order_num:<br/>@res',
        array('@order_num' => $order->order_id, '@res' => $response),
        WATCHDOG_NOTICE);

    // Search if $response contains html error code.
    if (strstr($response, "<html>")) {
      // Log the trouble string to the watchdog.
      watchdog(
          'commerce_migs_merchant',
          'Response for Order @order_num contains errors:<br/>@res',
          array('@order_num' => $order->order_id, '@res' => $response),
          WATCHDOG_ERROR);
      drupal_set_message(
          t(
              'ERROR. There has been any error with your order. 
                Please contact the website administrator for more information.'
          ), 'error');
      return;
    }

    // Extract the available receipt fields from the VPC Response.
    // If not present then let the value be equal to 'No Value Returned'.
    $map = array();
    $pair_array = explode("&", $response);
    foreach ($pair_array as $pair) {
      $param = explode("=", $pair);
      $map[urldecode($param[0])] = urldecode($param[1]);
    }

    // Standard Receipt Data.
    // Note this is a subset of all the returned data from MIGS.
    // Check the full response string in the saved transaction or
    // watchdog for more info.
    $command = commerce_migs_merchant_null2unknown($map, 'vpc_Command');
    $order_info = commerce_migs_merchant_null2unknown($map, 'vpc_OrderInfo');
    $transaction_no = commerce_migs_merchant_null2unknown(
        $map, 'vpc_TransactionNo');
    $txn_response_code = commerce_migs_merchant_null2unknown(
        $map, 'vpc_TxnResponseCode');

    // Check for errors in response.
    if ($txn_response_code != '0') {
      // Add one to the Transaction Ref#.
      // In case the order needs to be resubmitted.
      $tx_ref++;
      $comment = t('Credit card payment declined: @text', array(
          '@text' => commerce_migs_merchant_response_description(
              $txn_response_code)));
      $result = array(
        'success' => FALSE,
        'message' => $comment,
      );
    }
    else {
      $comment = t('MIGS Txn ID: @txnid<br/>Approval code: @code', array(
          '@txnid' => $transaction_no, '@code' => $txn_response_code)
        );
      $result = array(
        'success' => TRUE,
        'message' => $comment,
        'data' => array('TxnID' => $transaction_no),
      );
    }
  }
  else {
    // There has been a problem with the transaction.
    // Add one to the Transaction Ref# incase the order needs to be resubmitted.
    $tx_ref++;

    drupal_set_message(t('ERROR. There has been any error with your order. 
      Please contact the website administrator for more information.'), 'error');

    $result = array(
      'success' => FALSE,
      'message' => t('No valid response received'),
    );
  }
  // Prepare a transaction object to log the API response.
  $transaction = commerce_payment_transaction_new('migs_merchant',
      $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $transaction_no;
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  // The full response string is stored in the transaction record.
  $transaction->payload[REQUEST_TIME] = $response;

  // If we didn't get an approval response code...
  if ($result['success'] === FALSE) {
    // Create a failed transaction with the error message.
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  else {
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  }

  // Store the type of transaction in the remote status.
  $transaction->remote_status = $command;

  $transaction->message = $result['message'];

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);

  // If the payment failed, display an error and rebuild the form.
  if ($result['success'] === FALSE) {
    drupal_set_message(t(
            'We received the following error processing your card. Please enter your information again or try a different card.'),
        'error');
    drupal_set_message($result['message'], 'error');
    return FALSE;
  }
}

/**
 * Send the transaction request to MIGS VPC gateway.
 *
 *   @param object $payment_method
 *   The payment method object.
 *   @param string $message
 *   The formatted POST string to send.
 *   @param object $order
 *   The order object.
 *
 *   @return string
 *   HTML response from VPC server.
 */
function commerce_migs_merchant_request($payment_method, $message, $order) {

  if ($message) {
    // Add entry to dblog.
    watchdog('commerce_migs_merchant',
        'Request created for Order @order_num',
        array('@order_num' => $order->order_id), WATCHDOG_NOTICE);
  }

  // Payment url.
  $url = $payment_method['settings']['commerce_migs_merchant_payment_url'];

  $options = array(
    'method' => 'POST',
    'data' => $message,
    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
  );

  $response = drupal_http_request($url, $options);
  if (isset($response->data)) {
    return $response->data;
  }
  else {
    // Log the trouble response object to the watchdog.
    watchdog('commerce_migs_merchant',
        'Response for Order @order_num had communication errors:<br/>@res',
        array('@order_num' => $order->order_id, '@res' => $response),
        WATCHDOG_ERROR);
    return NULL;
  }
}

/**
 * Returns error messages for Transaction Respose Codes.
 *
 *   @param string $response_code
 *   Txn response code returned by the bank.
 *
 *   @return string
 *   The readable error message.
 */
function commerce_migs_merchant_response_description($response_code) {
  $response_string = array(
    '0' => t('Transaction Successful'),
    '1' => t('Transaction could not be processed'),
    '2' => t('Bank Declined Transaction - contact issuing bank'),
    '3' => t('No Reply from Bank'),
    '4' => t('Expired Card'),
    '5' => t('Insufficient funds'),
    '6' => t('Error Communicating with Bank'),
    '7' => t('Payment Server System Error'),
    '8' => t('Transaction Type Not Supported'),
    '9' => t('Bank declined transaction (Do not contact Bank)'),
    'A' => t('Transaction Aborted'),
    'C' => t('Transaction Cancelled'),
    'D' => t('Deferred transaction has been received and is awaiting processing'),
    'F' => t('3D Secure Authentication failed'),
    'I' => t('Card Security Code verification failed'),
    'L' => t('Shopping Transaction Locked (Please try the transaction again later)'),
    'N' => t('Cardholder is not enrolled in Authentication scheme'),
    'P' => t('Transaction has been received by the Payment Adaptor and is being processed'),
    'R' => t('Transaction was not processed - Reached limit of retry attempts allowed'),
    'S' => t('Duplicate SessionID (OrderInfo)'),
    'T' => t('Address Verification Failed'),
    'U' => t('Card Security Code Failed'),
    'V' => t('Address Verification and Card Security Code Failed'),
  );
  if (isset($response_string[$response_code])) {
    $response = $response_string[$response_code];
  }
  else {
    $response = t('Unable to be determined');
  }
  return $response;
}

/**
 * Return a keyed string from an array.
 *
 *   @param array $map
 *   array to search
 *   @param string $key
 *   array key
 *
 *   @return string
 *   return value, or "No Value Returned"
 */
function commerce_migs_merchant_null2unknown($map, $key) {
  if (array_key_exists($key, $map)) {
    if (!is_null($map[$key])) {
      return $map[$key];
    }
  }
  return "No Value Returned";
}

/**
 * Implements hook_form_alter().
 */
function commerce_migs_merchant_form_alter(&$form, &$form_state, $form_id) {
  // Change the payment method title in the checkout form
  // to the user configured title.
  if ($form_id == 'commerce_checkout_form_review') {
    if (isset($form['commerce_payment']['payment_method']['#options'])) {
      $new_options = array();
      foreach ($form['commerce_payment']['payment_method']['#options'] as $key => $option) {
        if ($key == 'migs_merchant|commerce_payment_migs_merchant') {
          // Load the payment method instance to find the user set title.
          $payment_method = commerce_payment_method_instance_load('migs_merchant|commerce_payment_migs_merchant');
          $option = t($payment_method['settings']['commerce_migs_method_title']);
        }
        $new_options[$key] = $option;
      }
      $form['commerce_payment']['payment_method']['#options'] = $new_options;
    }
  }
}
