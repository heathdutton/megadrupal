<?php

/**
 * @file
 * Provides the JUSH filter.
 */

/**
 * Implements hook_init().
 */
function jush_filter_init() {
  // @TODO: Is there a way not to load the JavaScript every page load for a text
  // filter?
  drupal_add_library('jush', 'jush');
}

/**
 * Implement hook_filter_info().
 */
function jush_filter_filter_info() {
  $filters['jush'] = array(
    'title' => t('JUSH filter'),
    'description' => t('Allows users to post code verbatim using &lt;code&gt; and &lt;?php ?&gt; tags.'),
    'prepare callback' => '_jush_filter_prepare',
    'process callback' => '_jush_filter_process',
    'tips callback' => '_jush_filter_tips',
  );
  return $filters;
}

/**
 * Processes chunks of escaped PHP code into HTML.
 */
function jush_filter_process_php($text) {
  // Note, pay attention to odd preg_replace-with-/e behaviour on slashes
  // Undo possible linebreak filter conversion
  $text = preg_replace('@</?(br|p)\s*/?>@', '', str_replace('\"', '"', $text));
  // Undo the escaping in the prepare step
  $text = decode_entities($text);
  // Trim leading and trailing linebreaks
  $text = trim($text, "\r\n");
  // Highlight as PHP
  $text = '<pre class="jush language-php">'. $text .'</pre>';
  // Remove newlines to avoid clashing with the linebreak filter
  //$text = str_replace("\n", '', $text);
  return jush_filter_fix_spaces($text);
}

/**
 * Callback to replace content of the <?php ?> elements.
 */
function _jush_filter_process_php_callback($matches) {
  return jush_filter_process_php($matches[1]);
}

/**
 * Processes chunks of escaped code into HTML.
 */
function jush_filter_process_code($text, $lang = 'htm') {
  // Undo linebreak escaping
  $text = str_replace('&#10;', "\n", $text);
  // Inline or block level piece?
  $multiline = strpos($text, "\n") !== FALSE;
  // Note, pay attention to odd preg_replace-with-/e behaviour on slashes
  $text = preg_replace("/^\n/", '', preg_replace('@</?(br|p)\s*/?>@', '', str_replace('\"', '"', $text)));
  // Trim leading and trailing linebreaks
  $text = trim($text, "\n");
  // Escape newlines
  $text = nl2br($text);

  $text = '<pre class="jush language-' . $lang . '">'. jush_filter_fix_spaces(str_replace(' ', '&nbsp;', $text)) .'</pre>';
  return $text;
}

/**
 * Callback to replace content of the <code> elements.
 */
function _jush_filter_process_code_callback($matches) {
  return jush_filter_process_code($matches[1]);
}

/**
 * Callback to replace content of the <code> elements.
 */
function _jush_filter_process_code_lang_callback($matches) {
  $lang = $matches[1];
  $text = $matches[2];
  return jush_filter_process_code($text, $lang);
}

function jush_filter_fix_spaces($text) {
  return preg_replace('@&nbsp;(?!&nbsp;)@', ' ', $text);
}

/**
 * Escape code blocks during input filter 'prepare'.
 *
 * @param $text
 *   The string to escape.
 * @param $type
 *   The type of code block, either 'code' or 'php'.
 * @return
 *   The escaped string.
 */
function jush_filter_escape($text, $type = 'code', $lang = '') {
  // Note, pay attention to odd preg_replace-with-/e behaviour on slashes
  $text = check_plain(str_replace('\"', '"', $text));

  // Protect newlines from line break converter
  $text = str_replace(array("\r", "\n"), array('', '&#10;'), $text);
  $lang = empty($lang) ? '' : ' lang="' . $lang . '"';
  // Add codefilter escape tags
  $text = "[jush_$type$lang]{$text}[/jush_$type]";

  return $text;
}

/**
 * Callback to escape content of <code> elements.
 */
function _jush_filter_escape_code_tag_callback($matches) {
  return jush_filter_escape($matches[1], 'code');
}

/**
 * Callback to escape content of <code lang="php"> elements.
 */
function _jush_filter_escape_code_tag_lang_callback($matches) {
  return jush_filter_escape($matches[2], 'code', $matches[1]);
}

/**
 * Callback to escape content of <?php ?>, [?php ?], <% %>, and [% %] elements.
 */
function _jush_filter_escape_php_tag_callback($matches) {
  return jush_filter_escape($matches[2], 'php');
}

function _jush_filter_prepare($text, $format) {
  /* Note: we replace <code> </code>, <?php ?>, [?php ?], <% %>, and [% %]
     to prevent other filters from acting on them. */
  $text = preg_replace_callback('@<code>(.+?)</code>@s', '_jush_filter_escape_code_tag_callback', $text);
  $text = preg_replace_callback('@<code lang="(.+?)">(.+?)</code>@s', '_jush_filter_escape_code_tag_lang_callback', $text);
  $text = preg_replace_callback('@[\[<](\?php|%)(.+?)(\?|%)[\]>]@s', '_jush_filter_escape_php_tag_callback', $text);
  return $text;
}

function _jush_filter_process($text, $format) {
  $text = preg_replace_callback('@\[jush_code\](.+?)\[/jush_code\]@s', '_jush_filter_process_code_callback', $text);
  $text = preg_replace_callback('@\[jush_php\](.+?)\[/jush_php\]@s', '_jush_filter_process_php_callback', $text);
  $text = preg_replace_callback('@\[jush_code lang="(.+?)"\](.+?)\[/jush_code\]@s', '_jush_filter_process_code_lang_callback', $text);
  return $text;
}

function _jush_filter_tips($format, $long = FALSE) {
  if ($long) {
    return t('To post pieces of code, surround them with &lt;code&gt;...&lt;/code&gt; tags. For PHP code, you can use &lt;?php ... ?&gt;, which will also colour it based on syntax. &lt;code lang="php"&gt;...&lt;/code&gt;');
  }
  else {
    return t('You may post code using &lt;code&gt;...&lt;/code&gt; (generic) or &lt;?php ... ?&gt; (highlighted PHP) tags. &lt;code lang="php"&gt;...&lt;/code&gt;');
  }
}
