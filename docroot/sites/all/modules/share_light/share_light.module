<?php

/**
 * @file
 *
 * Defines all hook implementations or other functions that
 * must be loaded in every request.
 */

use \Drupal\share_light\Loader;

require_once dirname(__FILE__) . '/includes/block.php';
require_once dirname(__FILE__) . '/includes/fields.php';

/**
 * Implements hook_menu().
 */
function share_light_menu() {
  $items['node/%node/share'] = array(
    'page callback'    => 'share_light_node_email_page',
    'page arguments'   => array(1),
    'access arguments' => array('admin share_light share page'),
    'file'             => 'includes/pages.php',
    'type'             => MENU_CALLBACK,
  );
  $items['node/%node/share-settings'] = array(
    'title'            => 'E-Mail share',
    'description'      => 'Configure settings for sharing this node via e-mail.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('share_light_node_email_settings', 1),
    'access callback'  => array('share_light_access'),
    'access arguments' => array(1),
    'file'             => 'includes/admin_pages.php',
    'type'             => MENU_LOCAL_TASK,
  );
  $items['admin/config/content/share-light'] = array(
    'title'            => t('Share light'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('share_light_settings_form'),
    'description'      => 'Share light settings.',
    'file'             => 'includes/admin_pages.php',
    'access arguments' => array('admin share_light global'),
  );
  $items['admin/config/content/share-light/block'] = array(
    'title' => t('Block settings'),
    'type'  => MENU_DEFAULT_LOCAL_TASK,
  ) + $items['admin/config/content/share-light'];
  $items['admin/config/content/share-light/email'] = array(
    'description'      => 'Email settings.',
    'title'            => 'Share via E-Mail',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('share_light_email_admin_form'),
    'access arguments' => array('admin share_light global'),
    'file'             => 'includes/admin_pages.php',
    'type'             => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function share_light_permission() {
  return array(
    'admin share_light global' => array(
      'title'       => t('Administer global share_light settings'),
      'description' => t('Administer site-wide settings for share_light.'),
    ),
    'admin share_light own page' => array(
      'title'       => t('Administer share_light settings for own content'),
      'description' => t('Administer share_light settings on content that the user created.'),
    ),
   'admin share_light all pages' => array(
      'title'       => t('Administer share_light settings for all pages'),
      'description' => t('Administer share_light settings for all pages.'),
    ),
    'admin share_light share page' => array(
      'title'       => t('Share the page via email'),
      'description' => t('Permission to share the page via email.'),
    ),

  );
}

/**
 * access callback set in hook_menu().
 */
function share_light_access($node) {
  global $user;

  if (user_access('admin share_light all pages')) {
    return TRUE;
  }
  elseif (user_access('admin share_light own page') && $user->uid == $node->uid) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_tokens().
 */
function share_light_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type = 'node' && isset($data['share'])) {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'recipients':
          $replacements[$original] = isset($data['share']['recipients']) ? filter_xss(implode($data['share']['recipients'], ', ')) : t('(Recipient list)');
          break;
        case 'sender':
          $replacements[$original] = isset($data['share']['sender']) ? filter_xss($data['share']['sender']) : t('(Your name)');
          break;
        case 'url':
          if (isset($data['share']['url'])) {
            $replacements[$original] = $data['share']['url'];
          }
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_theme().
 */
function share_light_theme() {
  $info['share_light_message_body'] = array(
    'variables' => array('node' => NULL, 'values' => array()),
    'template' => 'share-message-body',
  );
  return $info;
}

/**
 * Implements hook_admin_paths().
 */
function share_light_admin_paths() {
  $paths['node/*/share-settings'] = TRUE;
  return $paths;
}

/**
 * Implements hook_mail().
 */
function share_light_mail($key, &$message, $params) {
  $message['headers'] = array_merge($message['headers'], $params['headers']);
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['message'];
}

/**
 * Implements hook_variable_group_info().
 */
function share_light_variable_group_info() {
  $groups['share_light_settings'] = array(
    'title' => t('Share light settings'),
    'description' => t('Site wide share_light settings.'),
    'access' => 'admin share_light global',
    'path' => array('admin/config/content/share-light', 'admin/config/content/share-light/block', 'admin/config/content/share-light/email'),
  );
  return $groups;
}

/**
 * Implements hook_variable_info().
 */
function share_light_variable_info() {
  $vars = array();
  $vars['channels_enabled'] = array(
    'title' => t('Enable social media channels for sharing.'),
    'description' => t('The social media channels available for sharing.'),
    'default' => array_keys(Loader::instance()->channelOptions()),
  );
  $vars['email_page_title'] = array(
    'title' => t('Title'),
    'description' => t('Title to display above the share via email form'),
    'default' => t('Forward this page to a friend'),
    'localize' => TRUE,
  );
  $vars['page_noindex'] = array(
    'title' => t('Generate a noindex meta-tag on the share via email page'),
    'default' => TRUE,
  );
  $vars['page_instructions'] = array(
    'title' => t('Share instructions'),
    'description' => t('This message will be displayed above the form. The token [site:name] will be replaced with the site name.'),
    'default' => '',
    'localize' => TRUE,
  );
  $vars['email_page_redirect'] = array(
    'title' => t('Redirect path'),
    'description' => t('Path to the page that to user is redirected to after submitting the share form.'),
    'default' => '',
    'localize' => TRUE,
  );
  $vars['email_message_edit'] = array(
    'title' => t('Users can edit the message.'),
    'description' => t('Choose whether users can edit the share message.'),
    'default' => FALSE,
  );
  $vars['email_message_subject'] = array(
    'title' => t('Subject'),
    'description' => t('Email subject line. Replacement tokens, as found below, may be used'),
    'default' => t('[share:sender] has forwarded a page to you from [site:name]'),
    'localize' => TRUE,
  );
  $vars['email_message_message'] = array(
    'title' => t('Message Body'),
    'description' => t('Email message body. Replacement tokens, as found below, may be used. The sender will be able to add their own message after this.'),
    'default' => t('[share:sender] thought you would like to see this page from the [site:name] web site.'),
    'localize' => TRUE,
  );
  $vars['email_message_footer'] = array(
    'title' => t('Footer'),
    'description' => t("This part of the message is rendered below the user's message and is not editable by the user."),
    'default' => t('Visit our site on [share:url].'),
    'localize' => TRUE,
  );
  $vars['email_flood_control'] = array(
    'title' => t('Flood control limit'),
    'description' => t('How many times a user can use the form in a one hour period. This will help prevent the email form from being used for spamming.'),
    'default' => 100,
  );
  $vars['email_flood_error'] = array(
    'title' => t('Flood control error'),
    'description' => t('This text appears if a user exceeds the flood control limit.  The value of the flood control limit setting will appear in place of !number in the message presented to users'),
    'default' => t("You can't send more than !number messages per hour. Please try again later."),
    'localize' => TRUE,
  );
  $vars['email_flood_clicks'] = array(
    'default' => 3,
  );

  // Add module prefix and group.
  $variables = array();
  foreach ($vars as $key => $value) {
    $variables['share_light_' . $key] = $value + array(
      'group' => 'share_light_settings',
    );
  }
  return $variables;
}

/**
 * Implements hook_share_light_channel_info().
 */
function share_light_share_light_channel_info() {
  $channels['email'] = '\\Drupal\\share_light\\Email';
  $channels['facebook'] = '\\Drupal\\share_light\\Facebook';
  $channels['twitter'] = '\\Drupal\\share_light\\Twitter';
  $channels['pinterest'] = '\\Drupal\\share_light\\Pinterest';
  return $channels;
}
