<?php

use \Drupal\share_light\Loader;
use \Drupal\share_light\Block;

/**
 * Implements hook_schema().
 */
function share_light_schema() {
  $int = array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0);
  $short_text = array('type' => 'varchar', 'not null' => FALSE, 'length' => 255);
  $long_text = array('type' => 'text', 'size' => 'big', 'not null' => FALSE);

  $schema['share_light_email_settings'] = array(
    'fields' => array(
      'nid' => $int,
      'page_title' => $short_text,
      'page_instructions' => $long_text,
      'page_redirect' => $short_text,
      'message_edit' => $int,
      'message_subject' => $short_text,
      'message_message' => $long_text,
      'message_footer' => $long_text,
    ),
    'primary key' => array('nid'),
  );
  return $schema;
}

/**
 * Implements hook_field_schema().
 */
function share_light_field_schema($field) {
  if ($field['type'] == 'share_light') {
    $columns['toggle'] = array(
      'type' => 'int',
      'not null' => FALSE,
      'default' => 0,
    );
    $columns['options'] = array(
      'type' => 'blob',
      'not null' => FALSE,
      'serialize' => TRUE,
    );
  return array(
    'columns' => $columns,
  );
  }
}

function share_light_install() {
  $default = array(
    'toggle' => variable_get('share_light_default_toggle', 1),
    'options' => Block::defaults(),
  );
  $default['options']['subject'] = '';

  // create new field
  _field_info_collate_types(TRUE);
  $field = \Drupal\little_helpers\Field\Field::fromType('share_light', 'share_light');
  $field->settings = array();
  $field->save();

  variable_set('share_light_channels_enabled', _share_light_default_channels());
}

function share_light_uninstall() {
  variable_del('share_light_default_toggle');
  variable_del('share_light_default_counter_toggle');
  variable_del('share_light_channels_enabled');
  variable_del('share_light_tracking_enabled');
}

function share_light_update_last_removed() {
  return 7;
}

/**
 * Default enabled channels.
 *
 * Everything but pinterest is enabled by default.
 */
function _share_light_default_channels() {
  $channels = array();
  foreach (array_keys(Loader::instance()->channelOptions()) as $name) {
    $channels[$name] = $name;
  }
  $channels['pinterest'] = 0;
  return $channels;
}

/**
 * Update channel option data structure.
 */
function share_light_update_8() {
  $fields = field_read_fields(array('type' => 'share_light'));
  foreach ($fields as $field) {
    $instances = field_read_instances(array('field_name' => $field['field_name']), array('include_inactive' => TRUE));
    foreach ($instances as $instance) {
      foreach ($instance['default_value'] as $delta => $item) {
        $instance['default_value'][$delta]['options'] = _share_light_update_8_options_map($item['options']);
      }
      // Avoid calling hook_field_update_instance since i18n will fail badly.
      _field_write_instance($instance, TRUE);

    }
    $rows = db_query("SELECT entity_type, entity_id, delta, share_light_options FROM {field_data_{$field['field_name']}}");
    foreach ($rows as $row) {
      $options = serialize(_share_light_update_8_options_map(unserialize($row->share_light_options)));
      db_update('field_data_' . $field['field_name'])
        ->fields(array('share_light_options' => $options))
        ->condition('entity_type', $row->entity_type)
        ->condition('entity_id', $row->entity_id)
        ->condition('delta', $row->delta)
        ->execute();
    }
    $rows = db_query("SELECT entity_type, entity_id, revision_id, delta, share_light_options FROM {field_revision_{$field['field_name']}}");
    foreach ($rows as $row) {
      $options = serialize(_share_light_update_8_options_map(unserialize($row->share_light_options)));
      db_update('field_revision_' . $field['field_name'])
        ->fields(array('share_light_options' => $options))
        ->condition('entity_type', $row->entity_type)
        ->condition('entity_id', $row->entity_id)
        ->condition('revision_id', $row->revision_id)
        ->condition('delta', $row->delta)
        ->execute();
    }
  }
  // Since we use _field_write_instance() directly
  // we need to clear the caches manually.
  field_cache_clear();
}

function _share_light_update_8_options_map($options) {
  $options['link']['path'] = $options['share_url'];
  unset($options['share_url']);
  foreach(array('email', 'facebook', 'pinterest', 'twitter') as $channel) {
    $options['channels'][$channel]['toggle'] = $options['advanced']["channel_{$channel}_toggle"];
  }
  $options['channels']['pinterest']['text'] = $options['advanced']['channel_pinterest_text'];
  $options['channels']['twitter']['text'] = $options['advanced']['channel_twitter_text'];
  unset($options['advanced']);
  return $options;
}
