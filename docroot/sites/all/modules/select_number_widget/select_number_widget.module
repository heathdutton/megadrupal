<?php
/**
 * @file
 * Code for the Select number widget module.
 */

/**
 * Implements hook_field_widget_info().
 */
function select_number_widget_field_widget_info() {
  $widgets['select_number_widget'] = array(
    'label' => t('Select'),
    'description' => t('Select widget.'),
    'field types' => array('number_integer', 'number_decimal', 'commerce_price'),
    'settings' => array(
      'select_widget' => array(
        'start' => NULL,
        'end' => NULL,
        'step' => NULL,
      ),
    ),
  );

  return $widgets;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function select_number_widget_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form['select_widget'] = array(
    '#type' => 'fieldset',
    '#title' => t('Select widget settings'),
    '#weight' => 10,
  );
  $form['select_widget'] += _select_number_widget_field_widget_settings_form($settings['select_widget']);

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function select_number_widget_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $default_value = NULL;
  if (!empty($items) && !empty($items[$delta])) {
    // Number field.
    if (!empty($items[$delta]['value'])) {
      $default_value = $items[$delta]['value'];
    }
    // Price field.
    elseif (!empty($items[$delta]['amount'])) {
      $default_value = $items[$delta]['amount'];
    }
  }
  else {
    $default_value = $instance['default_value'];
  }

  return _select_number_widget_field_widget_form($field, $instance, $element, $default_value, $items, $delta);
}


/**
 * FAPI validation of an individual element.
 */
function select_number_widget_validate(&$element, &$form_state) {
  // Required validation
  if ($element['#required'] && $element['#value'] == '_none') {
    form_error($element, t('!name field is required.', array('!name' => $element['#title'])));
  }

  // Needed for number field validation.
  if ($element['#value'] == '_none') {
    $element['#value'] = NULL;
  }

  // Transpose selections from field => delta to delta => field, turning
  // multiple selected options into multiple parent elements.
  // Took from options widgets.
  $items = _options_form_to_storage($element);
  form_set_value($element, $items, $form_state);
}

/**
 * Implementation for hook_field_widget_info_alter.
 * Add new settings to the numeric widget types.
 */
function select_number_widget_field_widget_info_alter(&$info) {
  $widgets = array('commerce_price_simple', 'commerce_price_full', 'number');
  foreach ($info as $widget_name => $widget) {
    if (in_array($widget_name, $widgets)) {
      $info[$widget_name]['settings'] += array(
        'select_widget' => array(
          'start' => NULL,
          'end' => NULL,
          'step' => NULL,
        ),
      );
    }
  }
}

/**
 * Implementation for hook_form_FORM_ID_alter.
 * Add the new settings form to instance widget form.
 */
function select_number_widget_form_field_ui_widget_type_form_alter(&$form, &$form_state, $form_id) {
  $field = field_info_field($form['#field_name']);
  $instance = field_info_instance($form['#entity_type'], $form['#field_name'], $form['#bundle']);
  $widget = $instance['widget'];
  // Altering only for locked fields that deal with numbers.
  $field_types = array('number_integer', 'commerce_price');
  if ($field['locked'] && in_array($field['type'], $field_types)) {
    if (($widget['type'] == 'select_number_widget' && !isset($form_state['values'])) || (!empty($form_state['values']) && $form_state['values']['widget_type'] == 'select_number_widget')) {
      $widget_settings = $widget['settings'];
      $form['basic']['select_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Number selection settings'),
      );
      $form['basic']['select_settings'] += _select_number_widget_field_widget_settings_form($widget_settings['select_widget']);
      $form['#validate'][] = 'select_number_widget_form_field_ui_widget_type_form_validate';
      $form['#submit'][] = 'select_number_widget_form_field_ui_widget_type_form_submit';
    }
    $form['basic']['#prefix'] = '<div id="' . $form['#id'] . '-basic-wrapper">';
    $form['basic']['#suffix'] = '</div>';
    $form['basic']['widget_type'] += array(
      '#element_validate' => array('select_number_widget_widget_type_validate'),
      '#ajax' => array(
        'callback' => 'select_number_widget_ajax_form_refresh',
        'wrapper' => $form['#id'] . '-basic-wrapper',
      ),
    );
  }
}

/**
 * Validation for rebuilding the field widget type form.
 */
function select_number_widget_widget_type_validate($element, &$form_state, &$form) {
  if ($element['#id'] == $form_state['triggering_element']['#id']) {
    form_set_value($element, $element['#value'], $form_state);
    $form_state['rebuild'] = TRUE;
  }
}

/**
 * Validation function for the altered field widget form.
 */
function select_number_widget_form_field_ui_widget_type_form_validate($form, &$form_state) {
  $form_values = $form_state['values'];

  $bundle = $form['#bundle'];
  $entity_type = $form['#entity_type'];
  $field_name = $form['#field_name'];
  // Retrieve the stored instance settings to merge with the incoming values.
  $instance = field_read_instance($entity_type, $field_name, $bundle);

  // Step validation, less than start - end difference
  if ($form_values['step'] > (max($form_values['start'], $form_values['end']) - min($form_values['start'], $form_values['end']))) {
    form_error($form['basic']['select_settings']['step'], t('Step exceeds the specified range, start to end.'));
  }

  // Validation against numbers minumum and maximum values of the instance
  if (!empty($instance['settings']['min'])) {
    if ($form_values['start'] < $instance['settings']['min']) {
      form_error($form['basic']['select_settings']['start'], t('The start value should be greater than field instance minimum.'));
    }
    if ($form_values['end'] < $instance['settings']['min']) {
      form_error($form['basic']['select_settings']['start'], t('The end value should be greater than field instance minimum.'));
    }
  }
  if (!empty($instance['settings']['max'])) {
    if ($form_values['start'] > $instance['settings']['max']) {
      form_error($form['basic']['select_settings']['start'], t('The start value should be less than field instance maximum.'));
    }
    if ($form_values['end'] > $instance['settings']['max']) {
      form_error($form['basic']['select_settings']['start'], t('The end value should be less than field instance maximum.'));
    }
  }
}

/**
 * Submit function for the altered field widget form.
 * Add the settings to the instance widget settings.
 */
function select_number_widget_form_field_ui_widget_type_form_submit($form, &$form_state) {
  $form_values = $form_state['values'];
  $bundle = $form['#bundle'];
  $entity_type = $form['#entity_type'];
  $field_name = $form['#field_name'];

  // Retrieve the stored instance settings to merge with the incoming values.
  $instance = field_read_instance($entity_type, $field_name, $bundle);

  $instance['widget']['settings']['select_widget']['start'] = $form_values['start'];
  $instance['widget']['settings']['select_widget']['end'] = $form_values['end'];
  $instance['widget']['settings']['select_widget']['step'] = $form_values['step'];
  try {
    field_update_instance($instance);
  }
  catch (Exception $e) {
    drupal_set_message(t('There was a problem changing the widget for field %label.', array('%label' => $instance['label'])), 'error');
  }
}

/**
 * Implements hook_field_widget_settings_form().
 */
function _select_number_widget_field_widget_settings_form($select_number_widget_settings) {
  $form = array();
  $form['start'] = array(
    '#type' => 'textfield',
    '#title' => t('Start'),
    '#default_value' => isset($select_number_widget_settings['start']) ? $select_number_widget_settings['start'] : NULL,
    '#description' => t('First value of the sequence.'),
    '#element_validate' => array('element_validate_number'),
    '#required' => TRUE,
  );
  $form['end'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum'),
    '#default_value' => isset($select_number_widget_settings['end']) ? $select_number_widget_settings['end'] : NULL,
    '#description' => t('The sequence is ended upon reaching the end value.'),
    '#element_validate' => array('element_validate_number'),
    '#required' => TRUE,
  );
  $form['step'] = array(
    '#type' => 'textfield',
    '#title' => t('Step'),
    '#default_value' => isset($select_number_widget_settings['step']) ? $select_number_widget_settings['step'] : NULL,
    '#description' => t('If a step value is given, it will be used as the increment between elements in the sequence. step should be given as a positive number. If not specified, step will default to 1.'),
  );
  $form['#validate'][] = 'select_number_widget_form_field_ui_widget_type_form_validate';
  $form['#submit'][] = 'select_number_widget_form_field_ui_widget_type_form_submit';

  return $form;
}

/**
 * Helper function for building the widget form.
 */
function _select_number_widget_field_widget_form($field, $instance, $element, $default_value = NULL, $items, $delta) {
  $select_number_widget_settings = $instance['widget']['settings']['select_widget'];
  if (empty($select_number_widget_settings['step'])) {
    $select_number_widget_settings['step'] = 1;
  }
  foreach(range($select_number_widget_settings['start'], $select_number_widget_settings['end'], $select_number_widget_settings['step']) as $number) {
    $options[$number] = $number;
  }
  $options = array('_none' => t('- Select a value -')) + $options;
  if (!($number_type = str_replace('number_', '', $field['type']))) {
    $number_type = 'float';
  }
  $widget_element = $element + array(
    '#type' => 'select',
    '#options' => $options,
    '#properties' => array(
      'empty_option' => 'option_select',
    ),
    '#value_key' => key($field['columns']),
  );
  if (!empty($default_value)) {
    $widget_element['#default_value'] = $default_value;
  }
  // Add prefix and suffix.
  if (!empty($instance['settings']['prefix'])) {
    $prefixes = explode('|', $instance['settings']['prefix']);
    $widget_element['#field_prefix'] = field_filter_xss(array_pop($prefixes));
  }
  if (!empty($instance['settings']['suffix'])) {
    $suffixes = explode('|', $instance['settings']['suffix']);
    $widget_element['#field_suffix'] = field_filter_xss(array_pop($suffixes));
  }

  $widget_element['#element_validate'] = array('select_number_widget_validate');

  if ($field['type'] == 'commerce_price') {
    // Use the default currency if the setting is not present.
    if (empty($instance['widget']['settings']['currency_code']) || $instance['widget']['settings']['currency_code'] == 'default') {
      $default_currency_code = NULL;
    }
    else {
      $default_currency_code = $instance['widget']['settings']['currency_code'];
    }

    // If a price has already been set for this instance prepare default values.
    if (isset($items[$delta]['amount'])) {
      $currency = commerce_currency_load($items[$delta]['currency_code']);

      // Convert the price amount to a user friendly decimal value.
      $default_amount = commerce_currency_amount_to_decimal($items[$delta]['amount'], $currency['code']);

      // Run it through number_format() to ensure it has the proper number of
      // decimal places.
      $default_amount = number_format($default_amount, 0, '.', '');

      $default_currency_code = $items[$delta]['currency_code'];
    }
    else {
      $default_amount = NULL;
    }

    // Load the default currency for this instance.
    $default_currency = commerce_currency_load($default_currency_code);

    $widget_element['#default_value'] = $default_amount;
    $element['#element_validate'][] = 'commerce_price_field_widget_validate';
    $element['amount'] = $widget_element;

    // Build a currency options list from all enabled currencies.
    $options = array();

    foreach (commerce_currencies(TRUE) as $currency_code => $currency) {
      $options[$currency_code] = check_plain($currency['code']);
    }

    // If the current currency value is not available, add it now with a
    // message in the help text explaining it.
    if (empty($options[$default_currency['code']])) {
      $options[$default_currency['code']] = check_plain($default_currency['code']);

      $description = t('The currency set for this price is not currently enabled. If you change it now, you will not be able to set it back.');
    }
    else {
      $description = '';
    }

    // If only one currency option is available, don't use a select list.
    if (count($options) == 1) {
      $currency_code = key($options);

      $element['amount']['#field_suffix'] = $currency_code;

      // Add the help text if specified.
      if (!empty($element['#description'])) {
        $element['amount']['#field_suffix'] .= '<div class="description">' . $element['#description'] . '</div>';
      }

      $element['currency_code'] = array(
        '#type' => 'value',
        '#default_value' => $currency_code,
      );
    }
    else {
      $element['amount']['#prefix'] = '<div class="commerce-price-full">';

      $element['currency_code'] = array(
        '#type' => 'select',
        '#description' => $description,
        '#options' => $options,
        '#default_value' => isset($items[$delta]['currency_code']) ? $items[$delta]['currency_code'] : $default_currency['code'],
        '#suffix' => '</div>',
      );

      // Add the help text if specified.
      if (!empty($element['#description'])) {
        $element['currency_code']['#suffix'] .= '<div class="description">' . $element['#description'] . '</div>';
      }
    }
    $element['data'] = array(
      '#type' => 'value',
      '#default_value' => !empty($items[$delta]['data']) ? $items[$delta]['data'] : array('components' => array()),
    );

    return $element;
  }
  elseif (in_array($field['type'], array('number_integer', 'number_decimal'))) {
    $widget_element['#number_type'] = str_replace('number_', '', $field['type']);
    $widget_element['#element_validate'][] = 'number_field_widget_validate';

    return array('value' => $widget_element);
  }
}

/**
 * Ajax callback for the field widget selection form.
 */
function select_number_widget_ajax_form_refresh($form, &$form_state) {
  return $form['basic'];
}
