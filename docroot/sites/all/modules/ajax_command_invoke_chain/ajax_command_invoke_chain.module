<?php

/**
 * @file
 * Ajax Command Invoke Chain module.
 *
 * Module used to do add a new ajax command, similar to ajax_command_invoke but
 * the chance to chain function calls.
 */

/**
 * Implements hook_library_alter().
 */
function ajax_command_invoke_chain_library_alter(&$libraries, $module) {
  if ($module != 'system') {
    return;
  }

  // Get the path to the new file.
  $path = drupal_get_path('module', 'ajax_command_invoke_chain') . '/js/ajax-command-invoke-chain.js';

  // Extend the drupal.ajax library with invoke chain support for it.
  $libraries['drupal.ajax']['js'][$path] = array(
    'group' => JS_LIBRARY,
    'weight' => 22,
  );
}

/**
 * Creates a Drupal Ajax 'invoke_chain' command.
 *
 * Pretty much the same as 'invoke' command, but with the chance to chain
 * function calls, pretty much what you do in jQuery usually.
 *
 * This command is implemented by Drupal.ajax.prototype.commands.invoke_chain()
 *
 * @param string $selector
 *   A jQuery selector string. If the command is a response to a request from
 *   an #ajax form element, then this value can be NULL.
 * @param array $chain
 *   (optional) Array of methods plus some args (this last optional) to apply in
 *   a chain fashion over the selected element(s). Every element inside will be
 *   an array (where the first item is the method to call and the rest,
 *   arguments for it) or a string (that is the method name, if it doesn't need
 *   arguments).
 *
 * @return array
 *   An array suitable to be used with the ajax_render() function.
 */
function ajax_command_invoke_chain($selector, array $chain = array()) {
  // Check the chain elements, in order to create a consistent structure where
  // every item inside it will be an array. This because string elements can
  // exist.
  foreach ($chain as &$value) {
    if (is_string($value)) {
      $value = array($value);
    }
  }

  // Return the ajax command.
  return array(
    'command' => 'invoke_chain',
    'selector' => $selector,
    'chain' => $chain,
  );
}
