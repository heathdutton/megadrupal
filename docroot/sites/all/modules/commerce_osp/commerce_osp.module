<?php
/**
 * @file
 * Adds Offsite Payment methods to Drupal Commerce.
 */

// Break it down into file blocks for better maintanance.
include_once 'commerce_osp.admin.config.form.inc';

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_osp_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['offsitedetails'] = array(
    'base' => 'commerce_osp',
    'title' => t('Offsite Payment Details'),
    'short_title' => t('Offsite Details'),
    'display_title' => t('Offsite Payment Details'),
    'description' => t('Adds payment details for offsite payment methods'),
  );

  return $payment_methods;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_osp_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  global $language;
  $session_lang = $language->language;

  $form = array();

  $settings = $payment_method['settings'];
  $number_of_options = $settings['method_count'];

  $method_options = array('none' => t('N/A'));
  for ($i = 0; $i < $number_of_options; $i++) {
    $language = $settings['payment_settings_wrapper']["method_$i"]['language'][$session_lang];

    if ($language) {
      $method_options[$i] = $settings['payment_settings_wrapper']["method_$i"]['details']['value']; 
    }
  }

  $defaut_value = 'none';
  if (count($method_options) == 2) {
    // If there is only one option then it will be selected.
    $defaut_value = $settings['payment_settings_wrapper']['method_0']['details']['value'];
  }

  $title = $settings['payment_settings_wrapper']['title'];
  $form['method_options'] = array(
    '#type' => 'radios',
    '#title' => t($title),
    '#options' => $method_options,
    '#default_value' => $defaut_value,
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_osp_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  if ($pane_form['method_options']['#value'] == 'none') {
    form_set_error('method_options', t('Please select a payment option for the Offsite Payment method.'));
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_osp_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $choosen_method = $pane_values['method_options'];
  $method_details = array(
    'value' => $pane_form['method_options'][$choosen_method]['#title'],
    'method_number' => $choosen_method,
  );

  // Prepare a transaction object.
  $transaction = commerce_payment_transaction_new('offsitedetails', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;

  $transaction->message = t('Choosen method: @method', array('@method' => $choosen_method));

  // Save the transaction.
  commerce_payment_transaction_save($transaction);

  $order->data['commerce_osp'] = serialize($method_details);
}

/**
 * Implements hook_entity_view().
 *
 * Add the offsitedetails header on the Order View at the user page.
 */
function commerce_osp_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type == 'commerce_order') {
    if ($entity->status == 'pending' && $entity->data['payment_method'] == 'offsitedetails|commerce_payment_offsitedetails') {
      $entity->content['commerce_osp_header'] = array(
        '#markup' => '<div class="commerce-offsitedetails-header">' . commerce_osp_make_header($entity) . '</div>',
        '#weight' => -11,
      );
    }
  }
}

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 */
function commerce_osp_commerce_checkout_pane_info_alter(&$checkout_panes) {
  $order_id = arg(1);
  $order = commerce_order_load($order_id);
  
  if (!empty($order->data) &&
      $order->data['payment_method'] == 'offsitedetails|commerce_payment_offsitedetails') {

    $checkout_panes['checkout_completion_message']['callbacks']['checkout_form'] = 'commerce_osp_completion_message_pane_checkout_form';
  }
}


/**
 * Checkout pane callback: Wraps the completion message with a custom div.
 */
function commerce_osp_completion_message_pane_checkout_form($form, &$form_state, $checkout_pane, $order) {
  // Build the original message pane.
  $pane_form = commerce_checkout_completion_message_pane_checkout_form($form, $form_state, $checkout_pane, $order);

  if ($order->data['payment_method'] == 'offsitedetails|commerce_payment_offsitedetails') {
    // Add and extra div.
    $pane_form['commerce_osp_header'] = array(
      '#markup' => '<div class="commerce-offsitedetails-header">' . commerce_osp_make_header($order) . '</div>',
      '#weight' => -10,
    );
  }
  return $pane_form;
}

/**
 * Helper function for building the Payment Details Header.
 *
 * @param Object $order
 *   The Order Object.
 *
 * @return String
 *   The html header.
 */
function commerce_osp_make_header($order) {
  $output = unserialize($order->data['commerce_osp']);

  return $output['value'];
}
