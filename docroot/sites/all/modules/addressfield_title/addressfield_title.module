<?php
/**
 * @file
 * Primary module file.
 */

/**
 * Implements hook_menu().
 */
function addressfield_title_menu() {
  $items = array();
  $items['admin/config/addressfield_title'] = array(
    'title' => 'An address field title configuration',
    'description' => 'Configure an address field title.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('addressfield_title_admin_form'),
    'file' => 'addressfield_title.admin.inc',
    'access arguments' => array('administer an address field title'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function addressfield_title_ctools_plugin_directory($module, $plugin) {
  if ($module == 'addressfield') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_field_attach_presave().
 *
 * Store additional address fields serialized in addressfield data column.
 */
function addressfield_title_field_attach_presave($entity_type, $entity) {
  $addressfields = addressfield_title_addressfield_types();
  foreach ($addressfields as $addressfield) {
    if (isset($entity->$addressfield)) {
      $data = array();
      $default_fields = array_keys(addressfield_default_values());
      $default_fields[] = 'element_key';
      // $language = isset($entity->language) ? $entity->language : LANGUAGE_NONE;
      $language = LANGUAGE_NONE;
      foreach ($entity->{$addressfield}[$language] as $delta => $fieldset) {
        $data = array();
        foreach ($fieldset as $field_key => $field_value) {
          // Compare fields with addressfield default fields and store any additional fields in data.
          if (!in_array($field_key, $default_fields)) {
            // Store additional field value.
            $data[$field_key] = $field_value;
          }
        }
        if (!empty($data)) {
          $entity->{$addressfield}[$language][$delta]['data'] = serialize($data);
        }
      }
    }
  }
}

/**
 * Implements hook_field_attach_load().
 *
 * Load and set additional addressfield field values from serialized
 * data column.
 */
function addressfield_title_field_attach_load($entity_type, $entities, $age, $options) {
  $addressfields = addressfield_title_addressfield_types();
  $title_elements = drupal_map_assoc(array(
    'person_title',
  ));

  foreach ($entities as $entity) {
    foreach ($addressfields as $field_name) {
      if (empty($entity->{$field_name})) {
        continue;
      }

      //$language = isset($entity->language) ? $entity->language : LANGUAGE_NONE;
      $language = LANGUAGE_NONE;
      foreach ($entity->{$field_name}[$language] as $delta => $fieldset) {
        if (!empty($entity->{$field_name}[$language][$delta]['data'])) {
          // Unserialize data, else skip if string.
          if ($data = unserialize($entity->{$field_name}[$language][$delta]['data'])) {
            // Store unserialized data values in additional fields.
            $title_data = array_intersect_key($data, $title_elements);
            $entity->{$field_name}[$language][$delta] = array_merge($entity->{$field_name}[$language][$delta], $title_data);
          }
        }
      }
    }
  }
}

/**
 * Returns an array of the field names of any addressfields.
 */
function addressfield_title_addressfield_types() {
  if (!isset($addressfields)) {
    static $addressfields;
    $result = db_query("SELECT field_name FROM {field_config} WHERE type = 'addressfield'");
    $addressfields = array();
    foreach ($result as $row) {
      $addressfields[] = $row->field_name;
    }
  }
  return $addressfields;
}

/**
 * Helper function of render address.
 */
function _addressfield_title_render_address(&$format) {
  $address = $format['#address'];

  $format['person_title'] = array(
    '#title' => t('Title'),
    '#tag' => 'span',
    '#weight' => '-200',
    '#children' => t(check_plain($address['person_title'])),
    '#attributes' => array('class' => array('person-title')),
  );
  return $format;
}

/**
 * Implements hook_permission().
 */
function addressfield_title_permission() {
  return array(
    'administer an address field title' => array(
      'title' => t('Administer an address field title'),
    ),
  );
}
