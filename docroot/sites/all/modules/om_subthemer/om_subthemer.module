<?php
/**
 * @file
 * OM Subthemer module
 *
 * @author: Daniel Honrade http://drupal.org/user/351112
 *
 * By default, OM Base Theme, http://drupal.org/project/om must be installed,
 * This module automatically generates layouts and skins, 
 * which can be downloaded as subthemes of installed base themes
 * such as OM Base Theme, Zen
 *
 * @path /admin/settings/om-subthemer
 *   - set content types which OM Subthemer can use
 *
 * @path /admin/settings/om-subthemer/%page
 *   - variables, html and php values for the base theme,
 *     can be updated to follow the standards of the base theme 
 *
 * @path /admin/settings/om-subthemer/%page/export
 *   - export this settings
 *
 * @path /admin/settings/om-subthemer/%page/import
 *   - import settings
 *
 * @path /node/%
 *   - displays the html preview of the created subtheme, 
 *     you'll see the html preview on this path, 
 *     which includes dummy contents only, 
 *     download and preview links can also be found on this path
 *
 * @path /node/%/om-skin
 *   - shows all available skins
 *
 * @path /node/%/om-layout
 *   - layout configuration
 *
 * @path /node/%/om-layout/export
 *   - layout export only, not including the skin
 *
 * @path /node/%/om-layout/import
 *   - layout import only, not including the skin
 *
 * @path /node/%/om-blocks
 *   - layout configuration
 *
 * @path /node/%/om-blocks/export
 *   - blocks (dummy) export only, not including the skin
 *
 * @path /node/%/om-blocks/import
 *   - blocks (dummy) import only, not including the skin
 * 
 */
 

/**
 * @include
 *
 *  Reusable code library
 *
 */ 
@include_once drupal_get_path('module', 'om_subthemer') . '/inc/om_subthemer.utils.inc';


/**
 * @include
 *
 * A separate help file which links to all OM Subthemer forms.
 *
 */
@include_once OM_SUBTHEMER_PATH . '/inc/om_subthemer.help.inc'; 
 
 
/**
 * Implementation of hook_menu().
 *
 */
function om_subthemer_menu() {
  $items = array();
  
  // This lists all existing content types which can be enabled as 
  // OM Subthemer nodes, each content type can have different default base theme
  // and skin
  $items['admin/om-subthemer'] = array(
    'title' => t('OM Subthemer'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('om_subthemer_admin'),
    'file' => 'inc/om_subthemer.admin.inc',
    'access arguments' => array('administer OM Subthemer'),
    'type' => MENU_NORMAL_ITEM,
    'description' => t('Configure which content type to use for OM Subthemer'),
    );
  
  // assign OM Subthemer functionality to content types  
  $items['admin/om-subthemer/settings'] = array(
    'title' => t('OM Subthemer Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('om_subthemer_admin'),
    'file' => 'inc/om_subthemer.admin.inc',
    'access arguments' => array('administer OM Subthemer'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'description' => t('Configure which content type to use for OM Subthemer'),
    'weight' => -1,
    );

  // add a tab for each node type that can be used as subtheme
  foreach (node_type_get_types() as $type => $info) {
    //dsm($info);
    if (variable_get('om_subthemer_enabled_'. $type, 0)) {
      $items['admin/om-subthemer/' . $type] = array(
        'title callback' => 'check_plain',
        'title arguments' => array($info->name),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('om_settings_edit', $type, $info->name),
        'file' => 'inc/om_subthemer.settings_edit.inc',
        'access arguments' => array('administer OM Subthemer'),
        'type' => MENU_LOCAL_TASK,
      );
      
      // export settings of this node type
      $items['admin/om-subthemer/' . $type . '/export'] = array(
        'title callback' => 'check_plain',
        'title arguments' => array($info->name . ' Export'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('om_settings_export', $type, $info->name),
        'file' => 'inc/om_subthemer.settings_export.inc',
        'access arguments' => array('administer OM Subthemer'),
        'type' => MENU_LOCAL_TASK,
      );
      
      // import settings of this node type
      $items['admin/om-subthemer/' . $type . '/import'] = array(
        'title callback' => 'check_plain',
        'title arguments' => array($info->name . ' Import'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('om_settings_import', $type, $info->name),
        'file' => 'inc/om_subthemer.settings_import.inc',
        'access arguments' => array('administer OM Subthemer'),
        'type' => MENU_LOCAL_TASK,
      );      
    }
  }
  
  // OM Subthemer node tabs:
  // - Preview, Skin, Layout, Blocks
  // configuring skin for this node
  $items['node/%/om-skin'] = array(
    'title' => 'OM Skin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('om_skin_select'),
    'access callback' => 'om_subthemer_access',
    'access arguments' => array(1),
    'file' => 'inc/om_subthemer.skin_select.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );  

  // editing layout for this node
  $items['node/%/om-layout'] = array(
    'title' => 'OM Layout',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('om_layout_edit'),
    'access callback' => 'om_subthemer_access',
    'access arguments' => array(1),
    'file' => 'inc/om_subthemer.layout_edit.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
    
  // exporting layout for this node
  $items['node/%/om-layout/export'] = array(
    'title' => 'Export Layout',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('om_layout_export'),
    'access callback' => 'om_subthemer_access',
    'access arguments' => array(1),
    'file' => 'inc/om_subthemer.layout_export.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
 
  // importing layout for this node
  // high security risk access, eval() is used
  $items['node/%/om-layout/import'] = array(
    'title' => 'Import Layout',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('om_layout_import'),
    'access callback' => 'om_subthemer_access_admin', // high security risk access, eval()
    'access arguments' => array(1),
    'file' => 'inc/om_subthemer.layout_import.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  // editing blocks for this node
  $items['node/%/om-blocks'] = array(
    'title' => 'OM Blocks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('om_blocks_edit'),
    'access callback' => 'om_subthemer_access',
    'access arguments' => array(1),
    'file' => 'inc/om_subthemer.blocks_edit.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );
    
  // exporting blocks for this node
  $items['node/%/om-blocks/export'] = array(
    'title' => 'Export Blocks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('om_blocks_export'),
    'access callback' => 'om_subthemer_access',
    'access arguments' => array(1),
    'file' => 'inc/om_subthemer.blocks_export.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
 
  // importing layout for this node
  // high security risk access, eval() is used
  $items['node/%/om-blocks/import'] = array(
    'title' => 'Import Blocks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('om_blocks_import'),
    'access callback' => 'om_subthemer_access_admin', 
    'access arguments' => array(1),
    'file' => 'inc/om_subthemer.blocks_import.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
        
  return $items;
}

/**
 * Custom access menucallback for OM Subtheme
 *
 */
function om_subthemer_access($arg) {
  global $user;
  $node = node_load($arg);

  $om_subthemer = variable_get('om_subthemer', array());
  $type_settings = isset($om_subthemer[$node->type]) ? $om_subthemer[$node->type]: array();

  $type = isset($type_settings['enabled']) ? $type_settings['enabled']: 0;
  
  return $type && user_access('edit own ' . $type . ' content');
}

/**
 * Custom access menucallback for OM Subtheme for administrator access only
 *
 * - security risk access
 *
 */
function om_subthemer_access_admin($arg) {
  global $user;
  $node = node_load($arg);

  $om_subthemer = variable_get('om_subthemer', array());
  $type_settings = isset($om_subthemer[$node->type]) ? $om_subthemer[$node->type]: array();

  $type = isset($type_settings['enabled']) ? $type_settings['enabled']: 0;

  return $type  && user_access('edit own ' . $type . ' content') && user_access('administer om subthemer');
  //this prevents the non-owner of the node to see Configure OM Subtheme link, even the user 1
  //return variable_get('om_subthemer_enabled_' . $type, 0) && user_access('edit OM Subtheme') && ($current_node->uid == $user->uid);
}


/**
 * Implementation of hook_perm().
 *
 */
function om_subthemer_permission() {
  return array(
    'administer om subthemer' => array(
      'title' => t('Administer OM Subthemer'), 
      'description' => t('Perform administration tasks for OM Subthemer.'),
    ),
  );
}

/**
 * Implementation of hook_form_alter().
 *
 */
function om_subthemer_form_alter(&$form, $form_state, $form_id) {
  
  if ($form_id == 'node_type_form') {
  
    // scan and load all available base themes and skins
    $base_themes = om_available_base_themes();
    $skins = om_available_skins();
  
    $node_type = $form['old_type']['#value'];

    $om_subthemer = variable_get('om_subthemer', array());
    $type_settings = isset($om_subthemer[$node_type]) ? $om_subthemer[$node_type]: array();
    
    $form['om_subthemer'] = array(
      '#type' => 'fieldset',
      '#title' => t('OM Subtheme'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    
    // The node type form automatically appends the node type to the variable name when saving
    $form['om_subthemer']['om_subthemer_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('This content type is allowed to be used as OM Subtheme'),
      '#default_value' => isset($type_settings['enabled']) ? $type_settings['enabled']: 0,
    );
    $form['om_subthemer']['om_subthemer_base_theme'] = array(
      '#type' => 'select',
      '#title' => t('Choose default base theme'),
      '#default_value' => isset($type_settings['base_theme']) ? $type_settings['base_theme']: 'om',
      '#options' => $base_themes,
    );
    $form['om_subthemer']['om_subthemer_skin'] = array(
      '#type' => 'select',
      '#title' => t('Choose default skin'),
      '#default_value' => isset($type_settings['default_skin']) ? $type_settings['default_skin']: 'starter',
      '#options' => $skins,
    );        
  }
}


/**
 * Implementation of hook_node_type().
 *
 */
function om_subthemer_node_type($op, $info) {
  cache_clear_all();
  menu_rebuild();
}


/**
  * Implementation of hook_theme().
  *
  */
function om_subthemer_theme() {

  return array(
    'om_subthemer_admin' => array(
       'render element' => 'form',
       'file' => 'inc/om_subthemer.admin.inc',
    ),
    'om_settings_edit' => array(
       'render element' => 'form',
       'file' => 'inc/om_subthemer.settings_edit.inc',
    ),  
    'om_layout_edit' => array(
       'render element' => 'form',
       'file' => 'inc/om_subthemer.layout_edit.inc',
    ),
    'om_blocks_edit' => array(
       'render element' => 'form',
       'file' => 'inc/om_subthemer.blocks_edit.inc',
    ),      
    'om_skin_select' => array(
       'render element' => 'form',
       'file' => 'inc/om_subthemer.skin_select.inc',
    ),                         
  );
}


/**
 * Implementation of hook_node_view().
 *
 */
function om_subthemer_node_view($node, $view_mode, $langcode) {
  //dsm($node);
  
  // 1) abort if it's not a page
  if ($view_mode != 'full') return '';

  // 2) check if this content type uses OM Subthemer
  $om_subthemer = variable_get('om_subthemer', array());
  $type_settings = isset($om_subthemer[$node->type]) ? $om_subthemer[$node->type]: array();

  $type = isset($type_settings['enabled']) ? $type_settings['enabled']: 0;
    
  // 3) abort if this node is not used by OM Subthemer.
  if (!$type) return '';

  // 4) process OM Subthemer preview
  $preview = om_subthemer_preview($node);
  $node->content['om_preview'] = array(
    '#markup' => $preview,
  );

  return $node;
}


/**
 * Implementation of hook_nodeapi().
 *
 */
function om_subthemer_node_delete($node) {
      
  // files and folders
    
  // 1) find the user subtheme folder 
  om_subthemer_user_folder($node);
      
  // 2) delete user OM Subtheme contents and its main folder
  om_files_delete($node->om_user_files);
    
  // 3) delete user OM Subtheme zip file
  if (file_exists($node->om_user_files . '.zip')) unlink($node->om_user_files . '.zip'); 
    
  // database
    
  // 4) delete layout
  db_delete('om_subthemer_layout')
    ->condition('nid', $node->nid, '=')
    ->execute();  
    
  // 5) delete skin and regions associated with this node
  db_delete('om_subthemer')
    ->condition('nid', $node->nid, '=')
    ->execute();  
  // 6) delete blocks associated with this node
  db_delete('om_subthemer_blocks')
    ->condition('nid', $node->nid, '=')
    ->execute();  
}


