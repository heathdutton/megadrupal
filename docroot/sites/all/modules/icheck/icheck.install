<?php

/**
 * Implements hook_requirements().
 */
function icheck_requirements($phase) {
  $requirements = array();
  // Ensure translations do not break at install time
  $t = get_t();

  if ($phase == 'runtime') {
    // List of libraries to loop
    $indexes = array(
      'icheck' => array(
        'name' => 'iCheck',
        'folder' => 'iCheck',
        'min' => '1.0.2', // @todo - not tested with older version or v2.0 beta.
      ),
    );

    foreach ($indexes as $key => $index) {
      $library = libraries_detect($index['name']);

      if (empty($library['installed'])) {
        // Library is not installed
        $requirements[$key] = array(
          'title' => $t($library['name']),
          'value' => $t('At least @a', array('@a' => $index['min'])),
          'severity' => REQUIREMENT_ERROR,
          'description' => $t('In oder to use checkboxes and radio buttons from '
              . 'icheck, you need to download the !library, extract the archive, '
              . 'rename and place the !folder directory '
              . 'in the %path directory on your server.', array(
            '!library' => l($t($library['name']), $library['download url']),
            '!folder' => $index['folder'],
            '%path' => 'sites/all/libraries'
              )
          ),
        );
      } elseif (version_compare($library['version'], $index['min'], '>=')) {
        // Library is in correct version
        $requirements[$key] = array(
          'title' => $t($library['name']),
          'severity' => REQUIREMENT_OK,
          'value' => $library['version'],
        );
      } else {
        // Library is not in correct version
        $requirements[$key] = array(
          'title' => $t($library['name']),
          'value' => $t('At least @a', array('@a' => $index['min'])),
          'severity' => REQUIREMENT_ERROR,
          'description' => $t('In oder to use checkboxes and radio buttons from '
              . 'icheck, you need to download a later version of the !library, '
              . 'extract the archive, rename and replace the old version '
              . 'located in the %path directory on your server.', array(
            '!library' => l($t($library['name']), $library['download url']),
            '%path' => $library['library path']
              )
          ),
        );
      }
    }

    // Check jquery version.
    $jquery = array(
      'key' => 'jquery_for_icheck',
      'name' => 'Jquery For iCheck',
      // @todo - read this info from icheck.jquery.json
      'min' => '1.7',
    );

    if (module_exists('jquery_update')) {
      $jquery_version = variable_get('jquery_update_jquery_version', '1.5');
    } else {
      // @todo - How to get the real version of jquery.
      $jquery_version = '1.4.4';
    }

    // jquery timepicker require jquery at least 1.7.
    if (version_compare($jquery_version, $jquery['min'], '>=')) {
      // Jquery is in correct version
      $requirements[$jquery['key']] = array(
        'title' => $t($jquery['name']),
        'severity' => REQUIREMENT_OK,
        'value' => $jquery_version,
      );
    } else {
      // Jquery is not in correct version
      $requirements[$jquery['key']] = array(
        'title' => $t($jquery['name']),
        'value' => $t('At least @a', array('@a' => $jquery['min'])),
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('iCheck require jquery at least 1.7. '
            . 'Please install !module and update jquery to 1.7 or more.', array(
          '!module' => l('jquery_update', 'http://drupal.org/project/jquery_update'),
            )
        ),
      );
    }
  }

  return $requirements;
}
