<?php
/**
 * @file
 * Main file of odir_field module
 */

/**
 * Implements hook_odir_accessrules().
 */
function odir_field_odir_accessrules() {
  return array(
    'odir_view_nodes' => array(
      'title' => t('View nodes in directory'),
      'shortname' => t('VN'),
      'default_weight' => 100,
    ),
    'odir_create_nodes' => array(
      'title' => t('Create nodes in directory'),
      'shortname' => t('CN'),
      'default_weight' => 100,
    ),
    'odir_update_nodes' => array(
      'title' => t('Update nodes in directory'),
      'shortname' => t('UN'),
      'default_weight' => 100,
    ),
    'odir_delete_nodes' => array(
      'title' => t('Delete nodes in directory'),
      'shortname' => t('DN'),
      'default_weight' => 100,
    ),
  );
}

/**
 * Returns the first odir_field for the current content type.
 */
function odir_field_get_first_field_of_node() {
  $rows = odir_field_load_fields('odir_field');
  if ($rows) {
      foreach ($rows as $r) {
        return $r->field_name;
      }
  }
}

/**
 * Implements hook_node_access().
 */
function odir_field_node_access($node, $op, $account) {
  if (!is_object($node)) {
    return NODE_ACCESS_IGNORE;
  }
  $odir_path = "";
  $first_field = odir_field_get_first_field_of_node();

  if ($first_field && isset($node->{$first_field}['und'][0]['value'])) {
    $odir_path = $node->{$first_field}['und'][0]['value'];
  }
  if ($op == 'view') {
    if (!odir_control('odir_view_nodes', $odir_path)) {
      return NODE_ACCESS_DENY;
    }
  }
  elseif ($op == 'create') {
    if (!odir_control('odir_create_nodes', $odir_path)) {
      return NODE_ACCESS_DENY;
    }
  }
  elseif ($op == 'update') {
    if (!odir_control('odir_update_nodes', $odir_path)) {
      return NODE_ACCESS_DENY;
    }
  }
  elseif ($op == 'delete') {
    if (!odir_control('odir_delete_nodes', $odir_path)) {
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implemets hook_help().
 */
function odir_field_help($path, $arg) {
  if ($path == 'admin/help#odir') {
    return '<p>' . t("A module for associating directories to nodes.") . '</p>';
  }
}


/**
 * Implements hook_field_info().
 * Defines field types.
 */
function odir_field_field_info() {
  return array(
    'odir_field' => array(
      'label' => t('Directory'),
      'description' => t('This field stores varchar text in the database.'),
      'settings' => array('max_length' => 255),
      'instance_settings' => array('text_processing' => 0),
      'default_widget' => 'odir_field',
      'default_formatter' => 'odir_field_default_formatter',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function odir_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    $error_count = 0;
    if (!empty($item['value'])) {
      if (!empty($field['settings']['max_length']) && drupal_strlen($item['value']) > $field['settings']['max_length']) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'text_max_length',
          'message' => t('%name: the value may not be longer than %max characters.', array('%name' => $instance['label'], '%max' => $field['settings']['max_length'])),
        );
        $error_count++;
      }
      if (isset($entity->nid)) {
        $current_node_values = node_load($entity->nid, $entity->vid);
        $current_path = "";
        if (isset($current_node_values->{$field['field_name']}[$langcode][$delta]['value'])) {
          $current_path = $current_node_values->{$field['field_name']}[$langcode][$delta]['value'];
        }
        $new_path = "";
        if (isset($entity->{$field['field_name']}[$langcode][$delta]['value'])) {
          $new_path = $entity->{$field['field_name']}[$langcode][$delta]['value'];
        }
        if (!odir_control('odir_update_nodes', $current_path)) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'error_odir_update_node_current',
            'message' => t('%name: you are not authorized editing this node!', array('%name' => $instance['label'])),
          );
          $error_count++;
        }
        if ($current_path != $new_path) {
          if (!odir_control('odir_update_nodes', $new_path)) {
            $errors[$field['field_name']][$langcode][$delta][] = array(
              'error' => 'error_odir_update_node_new_path',
              'message' => t('%name: you would not be authorized editing nodes in the new directory!', array('%name' => $instance['label'])),
            );
            $error_count++;
          }
          if (!odir_control('odir_create_node', $new_path)) {
            $errors[$field['field_name']][$langcode][$delta][] = array(
              'error' => 'error_odir_insert_node_new_path',
              'message' => t('%name: you would not be authorized adding nodes to this directory!', array('%name' => $instance['label'])),
            );
            $error_count++;
          }
          if (!odir_control('odir_delete_node', $current_path)) {
            $errors[$field['field_name']][$langcode][$delta][] = array(
              'error' => 'error_odir_remove_node',
              'message' => t('%name: you are not allowed removing nodes from this directory!', array('%name' => $instance['label'])),
            );
            $error_count++;
          }
          if ($error_count == 0 && $new_path != "") {
            if (!odir_prepare_directory(odir_decode($new_path))) {
              $errors[$field['field_name']][$langcode][$delta][] = array(
                'error' => 'error_odir_create_directory',
                'message' => t('%name: directory could not be created!', array('%name' => $instance['label'])),
              );
              $error_count++;
            }
          }
        }
        else {
          if (!odir_control('odir_create_node', $new_path)) {
            $errors[$field['field_name']][$langcode][$delta][] = array(
              'error' => 'error_odir_insert_node_new_path',
              'message' => t('%name: you are not be authorized adding nodes to this directory!', array('%name' => $instance['label'])),
            );
            $error_count++;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_presave().
 */
function odir_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  if ($field['type'] == 'odir_field') {
    foreach ($items as $delta => $item) {
      if (isset($item['value'])) {
        $items[$delta]['value'] = odir_decode($item['value']);
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function odir_field_field_is_empty($item, $field) {
  return (!isset($item['value']));
}

/**
 * Implements hook_field_formatter_info().
 */
function odir_field_field_formatter_info() {
  return array(
    'odir_field_default_formatter' => array(
      'label' => t('Default'),
      'field types' => array('odir_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function odir_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $field_values = &drupal_static(__FUNCTION__);
  if (!isset($_odir_field_values)) {
    $field_values = array();
  }
  $element = array();
  switch ($display['type']) {
    case 'odir_field_default_formatter':
      $field_values[$field["field_name"]] = array();
      foreach ($items as $delta => $item) {
        $field_values[$field["field_name"]][] = $item['value'];
        $div_name = $instance["field_name"] . "_" . $delta;
        odir_current($item['value']);
        $odir_filelist = _odir_render_file_output($item['value']);
        if ($item['value'] != "") {
          if ($display['label'] == "hidden") {
            $div_title = $instance['label'] . ": " . odir_decode($item['value']);
          }
          else {
            $div_title = odir_decode($item['value']);
          }
        }
        else {
            //$div_title = t('Root directory');
            return "";
        }
        $output = theme("odir_field",
                    array(
                      "div_name" => $div_name,
                      "title" => l($div_title, "dir/" . odir_encode($item['value'])),
                      "filelist" => $odir_filelist,
                    ));

        drupal_add_js('jQuery(document).ready(function () { odir_assign_file_dropper_events("odir-field-path'
                      . $div_name . '_container", "' . odir_encode($item['value'])
                      . '")});', 'inline');

        $element[$delta] = array('#markup' => $output);
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function odir_field_field_widget_info() {
  return array(
    'odir_field_basic_widget' => array(
      'label' => t('Directory standard widget'),
      'field types' => array('odir_field'),
      'settings' => array('size' => 60),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function odir_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $main_widget = array();
  if (is_array($items) && array_key_exists($delta, $items)) {
    if ($items[$delta]['value'] == "") {
      $items[$delta]['value'] = odir_current();
    }
  }

  switch ($instance['widget']['type']) {
    case 'odir_field_basic_widget':
      $basic_widget = array(
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : odir_current(),
        '#size' => $instance['widget']['settings']['size'],
        '#maxlength' => "256",
        '#attributes' => array('class' => array('text-full')),
      );
      $main_widget = $element + $basic_widget;
      break;
  }
  if ($main_widget) {
    // Conditionally alter the form element's type
    // if text processing is enabled.
    if ($instance['settings']['text_processing']) {
      $element = $main_widget;
      $element['#type'] = 'text_format';
      $element['#format'] = isset($items[$delta]['format']) ? $items[$delta]['format'] : odir_current();
      $element['#base_type'] = $main_widget['#type'];
    }
    else {
      $element['value'] = $main_widget;
    }
  }
  return $element;
}

/**
 * Returns a node submission form.
 */
function odir_field_node_add($type, $dir) {
  $dir = odir_current($dir);
  return node_add($type);
}

/**
 * Get all active fields of specified type
 */
function odir_field_load_fields($type = 'odir_field') {
  $data = db_query("SELECT id, field_name, type FROM {field_config}
            WHERE type = :type and active and deleted=0",
            array(':type' => $type)
      )->fetchAll();
  return $data;
}

/**
 * Retrieve nodes associated  to $field.
 *
 * @return array
 *   Array  of stdClass
 */
function odir_field_load_associated_nodes($field, $value) {
  if (is_array($field)) {
    $field_name = $field['field_name'];
  }
  else {
    $field_name = $field;
  }
  $data = db_query("SELECT nid, title, " . $field_name . "_value as value
                    FROM {field_data_" . $field_name . "}
                    LEFT JOIN {node} ON revision_id = vid
                    WHERE " . $field_name . "_value=:value;",
                    array(':value' => $value));
  return $data;
}

/**
 * Implements odir_field_get_node_types().
 *
 * Returns an array with objects having the attributes 'node_type' and
 * 'node_type_name'.
 */
function odir_field_odir_field_get_node_types() {
  $selected_field_id = variable_get('odir_field_block_associated_field_node_list');
  $query = "SELECT node_type.type as node_type, node_type.name as node_type_name, " .
           "field_config_instance.field_id as field_id, field_config_instance.field_name as field_name " .
           "FROM node_type " .
           "LEFT JOIN field_config_instance ON node_type.type = field_config_instance.bundle " .
           "LEFT JOIN field_config ON field_config_instance.field_id = field_config.id " .
           "WHERE field_id=:field_id;";
  $data = db_query($query, array(':field_id' => $selected_field_id))->fetchAll();
  return $data;
}

/**
 * Get node types having an odir.
 */
function odir_field_get_node_types() {
  $node_types = module_invoke_all('odir_field_get_node_types');
  return $node_types;
}

/**
 * Implements hook_theme().
 */
function odir_field_theme() {
  return array(
    'odir_field' => array(
      'template' => 'templates/odir-field',
      'variables' => array(
        'div_name' => NULL,
        'value' => NULL,
        'filelist' => "",
      ),
    ),
  );
}
