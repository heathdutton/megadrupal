<?php

/**
 * @file
 * The Synchronize Translation Paths module allows entity-translated node 
 * content with different languages have the same path.
 */

/**
 * Implements hook_help().
 */
function synchronize_translation_paths_help($path, $arg) {
  switch ($path) {
    case 'admin/help#synchronize_translation_paths':
      return t('The Synchronize Translation Paths module allows entity-translated node content with different languages have the same path.');
  }
}

/**
 * Implements hook_menu().
 */
function synchronize_translation_paths_menu() {
  $items['admin/config/regional/synchronize_translation_paths'] = array(
    'title' => 'Synchronize Translation Paths settings',
    'description' => 'Administration settings for the Synchronize Translation Paths module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('synchronize_translation_paths_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'synchronize_translation_paths.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_node_insert().
 */
function synchronize_translation_paths_node_insert($node) {
  synchronize_translation_paths_update_node($node);
}

/**
 * Implements hook_node_update().
 */
function synchronize_translation_paths_node_update($node) {
  synchronize_translation_paths_update_node($node);
}

/**
 * Do the real work of updating the paths for the given node.
 *
 * Currently, this function only works for nodes translated using Entity
 * Translation.
 *
 * @param $node
 *   The node whose paths are being updated.
 * @param $show_message
 *   Boolean determining if a status message should be shown. Defaults to TRUE.
 *
 * @TODO
 *   Update so this works for nodes translated using Content Translation.
 */
function synchronize_translation_paths_update_node($node, $show_message = TRUE) {

  $enabled = synchronize_translation_paths_get_enabled_content_types();
  if (! empty($node) && isset($node->nid) && in_array($node->type, $enabled)) {

    // Only process if there is an alias.
    $alias = $node->path['alias'];
    if (! empty($alias)) {
      $languages = language_list();
      foreach ($languages as $langcode => $language) {

        // Insert or update the alias.
        db_merge('url_alias')
          ->key(array(
            'source' => 'node/' . $node->nid,
            'language' => $langcode
          ))
          ->fields(array('alias' => $alias))
          ->execute();

        if ($show_message) {
          drupal_set_message(t('The !language alias for this content has been updated.', array('!language' => $language->name)));
        }
      }
    }
  }
}

/**
 * Refresh the paths for all enabled content types.
 *
 * @TODO
 *   Implement!
 */
function synchronize_translation_paths_refresh_paths() {
  $enabled = synchronize_translation_paths_get_enabled_content_types();
  if (!empty($enabled)) {
    foreach ($enabled as $content_type) {
      drupal_set_message("FIXME: use the batch api! content type = $content_type");
    }
  }
}

/**
 * Get list of enabled content types.
 *
 * @return
 *   A list of content types with this functionality enabled.
 */
function synchronize_translation_paths_get_enabled_content_types() {
  $enabled = array();
  $content_types = synchronize_translation_paths_get_setting('content_types');
  if (!empty($content_types)) {
    foreach ($content_types as $content_type) {
      if (is_string($content_type)) {
        $enabled[] = $content_type;
      }
    }
  }
  return $enabled;
}

/**
 * Get a particular admin setting.
 *
 * @param $key
 *   The setting ID.
 *
 * @return
 *   The config info the the given setting ID.
 */
function synchronize_translation_paths_get_setting($key) {
  $settings = variable_get('synchronize_translation_paths_settings', array());
  if (! empty($settings) && isset($settings[$key])) {
    return $settings[$key];
  }
}

