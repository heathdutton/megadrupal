<?php

/**
 * @file
 * Installation operations for the rss_page module.
 */

/**
 * Implementation of hook_uninstall()
 */
function rss_page_uninstall() {
  $unset = array(
    'ext_feedviewer',
    'node_settings_rss_page',
    'rss_page_cache_path',
    'rss_page_enable_powerfaids',
    'rss_page_show_add_tag_to_portal',
    'rss_page_show_node_permalink',
    'rss_page_show_node_permalink',
    'rss_page_show_page_permalink',
    'rss_page_subscribe_menu_permalink',
    'rss_page_subscribe_menu_portal',
    'rss_page_subscribe_menu_rss_warn',
    'rss_page_subscribe_menu_rss',
  );
  foreach ($unset as $name)
    variable_del($name);
}

/**
 * Implementation of hook_schema().
 */
function rss_page_schema() {
  $schema['rss_page'] = array(
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        ),
      'items' => array(
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        ),
      'sort' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        ),
      'show_descr' => array(
        'type' => 'varchar',
        'length' => 1,
        'not null' => TRUE,
        ),
      'show_image' => array(
        'type' => 'varchar',
        'length' => 1,
        'not null' => TRUE,
        ),
      'show_feed_img' => array(
        'type' => 'varchar',
        'length' => 1,
        'not null' => TRUE,
        ),
      'group_by_key' => array(
        'type' => 'varchar',
        'length' => 1,
        'not null' => TRUE,
        ),
      'display' => array(
        'type' => 'varchar',
        'length' => 5,
        'not null' => TRUE,
        ),
      'view_condition' => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
        ),
      ),
    'primary key' => array('nid'),
    'foreign keys' => array(
      'node' => array(
        'table' => 'node',
        'columns' => array(
          'nid' => 'nid',
        ),
      ),
    ),
  );

  $schema['rss_page_last_read'] = array(
    'fields' => array(
      'fid' => array(
        'type' => 'int',
        'size' => 'big',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        ),
      'atime' => array(
        'type' => 'int',
        'not null' => TRUE,
        ),
      ),
    'primary key' => array('fid', 'uid'),
    'foreign keys' => array(
      'users' => array(
        'table' => 'users',
        'columns' => array(
          'uid' => 'uid',
        ),
      ),
      'rss_page_feed' => array(
        'table' => 'rss_page_feed',
        'columns' => array(
          'fid' => 'fid',
        ),
      ),
    ),
  );

  $schema['rss_page_feed'] = array(
    'fields' => array(
      'fid' => array(
        'type' => 'serial',
        'size' => 'big',
        'unsigned' => TRUE,
        'not null' => TRUE,
        ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        ),
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        ),
      'type' => array(
        'type' => 'varchar',
        'length' => 5,
        'not null' => TRUE,
        ),
      'data' => array(
        'type' => 'varchar',
        'length' => 512,
        ),
      'name_isset' => array(
        'type' => 'int',
        'length' => 1,
        'not null' => TRUE,
        'size' => 'tiny',
        'default' => 0,
        ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        ),
      'weight' => array(
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        ),
      ),
    'primary key' => array('fid'),
    'foreign keys' => array(
      'node' => array(
        'table' => 'node',
        'columns' => array(
          'nid' => 'nid',
          'vid' => 'vid',
        ),
      ),
    ),
    'indexes' => array(
      'name' => array('name'),
      'weight' => array('weight'),
      'nid' => array('nid'),
      'vid' => array('vid'),
    ),
  );

  $schema['rss_page_settings'] = array(
    'fields' => array(
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        ),
      'settings' => array(
        'type' => 'blob',
        'not null' => TRUE,
        ),
      ),
    'primary key' => array('uid'),
    'foreign keys' => array(
      'users' => array(
        'table' => 'users',
        'columns' => array(
          'uid' => 'uid',
        ),
      ),
    ),
  );

  return $schema;
}
/**
 * Implementation of hook_mm_verify_integrity()
 */
function rss_page_mm_verify_integrity() {
  return array('RSS Page' => array(
    t('rss_page.nid refers to missing node.nid') =>
      "{rss_page} x LEFT JOIN {node} n ON n.nid=x.nid WHERE n.nid IS NULL",

    t('rss_page_feed.nid refers to missing node.nid') =>
      "{rss_page_feed} x LEFT JOIN {node} n ON n.nid=x.nid WHERE n.nid IS NULL",
    t('rss_page_feed.data refers to missing mm_tree.mmtid (type=cat or inter)') =>
      "{rss_page_feed} x LEFT JOIN {mm_tree} t ON t.mmtid=x.data WHERE t.mmtid IS NULL AND (x.type='cat' OR x.type='inter')",
    t('rss_page_feed.data refers to missing taxonomy_term_data.tid (type=taxon)') =>
      "{rss_page_feed} x LEFT JOIN {taxonomy_term_data} t ON t.tid=x.data WHERE t.tid IS NULL AND x.type='taxon'",

    t('rss_page_last_read.fid refers to missing rss_page_feed.fid') =>
      "{rss_page_last_read} x LEFT JOIN {rss_page_feed} f ON f.fid=x.fid WHERE f.fid IS NULL",
    t('rss_page_last_read.uid refers to missing users.uid') =>
      "{rss_page_last_read} x LEFT JOIN {users} u ON u.uid=x.uid WHERE u.uid IS NULL AND x.uid>0",

    t('rss_page_settings.uid refers to missing users.uid') =>
      "{rss_page_settings} x LEFT JOIN {users} u ON u.uid=x.uid WHERE u.uid IS NULL AND x.uid>0",
  ));
}

/**
 * Change {rss_page_feed}.name_isset to a boolean field and set a default value.
 */
function rss_page_update_7001() {
  db_update('rss_page_feed')
    ->fields(array('name_isset' => 0))
    ->condition('name_isset', 1, '<>')
    ->execute();
  db_change_field('rss_page_feed', 'name_isset', 'name_isset', array(
    'type' => 'int',
    'length' => 1,
    'not null' => TRUE,
    'size' => 'tiny',
    'default' => 0,
  ));
}

/**
 * Rename {rss_page_feed}.condition to avoid a reserved word.
 */
function rss_page_update_7002() {
  // We can't use db_change_field() because fieldExists() doesn't properly
  // escape the column name, whereas the actual function that modifies the
  // table does.
  db_query("ALTER TABLE {rss_page} CHANGE `condition` `view_condition` VARCHAR(255) DEFAULT ''");
}
