<?php

/**
 * @file
 * Field functions for Monster Menus
 */

/**
 * Implements hook_field_info().
 */
function mm_fields_field_info() {
  return array(
    'mm_fields_mm_catlist' => array(
      'label' => t('MM Page List'),
      'description' => t('Contains a list of MM pages. The data is stored in an integer field.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'mm_catlist',
      'default_formatter' => 'mm_fields_link_page',
    ),
    'mm_fields_mm_nodelist' => array(
      'label' => t('MM Node List'),
      'description' => t('Contains a list of MM pages. The data is stored in a pair of integer fields.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'mm_nodelist',
      'default_formatter' => 'mm_fields_link_node_title',
    ),
    'mm_fields_mm_grouplist' => array(
      'label' => t('MM Group List'),
      'description' => t('Contains a list of MM groups. The data is stored in an integer field.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'mm_grouplist',
      'default_formatter' => 'mm_fields_link_page',
    ),
    'mm_fields_mm_userlist' => array(
      'label' => t('MM User List'),
      'description' => t('Contains a list of users. The data is stored in an integer field.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'mm_userlist',
      'default_formatter' => 'mm_fields_user',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function mm_fields_field_formatter_info() {
  return array(
    'mm_fields_link_page' => array(
      'label' => t('Link to MM Page/Group'),
      'field types' => array('mm_fields_mm_catlist', 'mm_fields_mm_grouplist'),
    ),
    'mm_fields_link_page_fullpath' => array(
      'label' => t('Link to MM Page/Group with full path'),
      'field types' => array('mm_fields_mm_catlist', 'mm_fields_mm_grouplist'),
    ),
    'mm_fields_page_name' => array(
      'label' => t('Name of MM Page/Group'),
      'field types' => array('mm_fields_mm_catlist', 'mm_fields_mm_grouplist'),
    ),
    'mm_fields_page_fullpath' => array(
      'label' => t('Full path to MM Page/Group'),
      'field types' => array('mm_fields_mm_catlist', 'mm_fields_mm_grouplist'),
    ),
    'mm_fields_node_title' => array(
      'label' => t('Title'),
      'field types' => array('mm_fields_mm_nodelist'),
    ),
    'mm_fields_link_node_title' => array(
      'label' => t('Title with link'),
      'field types' => array('mm_fields_mm_nodelist'),
    ),
    'mm_fields_node' => array(
      'label' => t('Full node'),
      'field types' => array('mm_fields_mm_nodelist'),
    ),
    'mm_fields_node_teaser' => array(
      'label' => t('Teaser'),
      'field types' => array('mm_fields_mm_nodelist'),
    ),
    'mm_fields_user' => array(
      'label' => t('User'),
      'field types' => array('mm_fields_mm_userlist'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function mm_fields_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  foreach ($items as $delta => $item) {
    $output = '';
    switch ($display['type']) {
      case 'mm_fields_link_page':
      case 'mm_fields_page_name':
        if (!empty($item['value'])) {
          $tree = mm_content_get($item['value']);
          if ($tree) {
            $name = mm_content_get_name($tree);
            $output = $display['type'] == 'mm_fields_link_page' ? l($name, 'mm/' . $tree->mmtid) : check_plain($name);
          }
        }
        break;

      case 'mm_fields_link_page_fullpath':
      case 'mm_fields_page_fullpath':
        $mmtids = mm_content_get_parents_with_self($item['value']);
        array_shift($mmtids);  // skip root

        $path = array();
        foreach ($mmtids as $mmtid) {
          if (!($tree = mm_content_get($mmtid))) {
            break;
          }
          $name = mm_content_get_name($tree);
          $markup = $display['type'] == 'mm_fields_link_page_fullpath' ? l($name, 'mm/' . $tree->mmtid) : check_plain($name);
          $path[] = $markup;
        }

        $output = implode('&nbsp;&raquo; ', $path);
        break;

      case 'mm_fields_node_title':
        if ($node = node_load($item['nid'])) {
          $output = check_plain($node->title);
        }
        break;

      case 'mm_fields_link_node_title':
        if ($node = node_load($item['nid'])) {
          $output = l($node->title, 'node/' . $node->nid);
        }
        break;

      case 'mm_fields_node':
      case 'mm_fields_node_teaser':
        if ($node = node_load($item['nid'])) {
          $element[$delta] = node_view($node, $display['type'] == 'mm_fields_node_teaser' ? 'teaser' : 'full', $langcode);
        }
        break;

      case 'mm_fields_user':
        $output = mm_content_uid2name($item['value'], 'fmlu');
        break;
    }

    if (!empty($output)) {
      $element[$delta] = array('#markup' => $output);
    }
  }

  return $element;
}

/**
 * Hide the cardinality form field, since this is handled differently in our
 * widgets.
 */
 function mm_fields_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  if (isset($form['field']['cardinality']) && in_array($form['#instance']['widget']['type'], array_keys(mm_fields_field_widget_info()))) {
    $form['field']['cardinality']['#default_value'] = 1;
    $form['field']['cardinality']['#access'] = FALSE;
    $form['field']['cardinality']['#element_validate'] = array('_mm_fields_cardinality_validate');
  }
}

/**
 * Implements hook_field_widget_settings_form().
 */
function mm_fields_field_widget_settings_form($field, $instance) {
  $widget_type = $instance['widget']['type'];
  $settings = mm_fields_get_widget_settings($instance);
  $form['mm_list_readonly'] = array(
    '#type' => 'checkbox',
    '#title' => t('Read-only'),
    '#default_value' => isset($settings['mm_list_readonly']) ? $settings['mm_list_readonly'] : FALSE,
    '#description' => t('If checked, the user can see the details of the entries in the list, but not change them'),
  );
  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced'),
  );
  if ($widget_type != 'mm_userlist') {
    $form['advanced']['mm_list_show_info'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show an entry\'s details when clicked'),
      '#default_value' => is_numeric($settings['mm_list_show_info']) ? $settings['mm_list_show_info'] : TRUE,
    );
  }
  $form['advanced']['mm_list_min'] = array(
    '#type' => 'textfield',
    '#size' => 4,
    '#maxlength' => 4,
    '#title' => t('Minimum number of entries'),
    '#default_value' => is_numeric($settings['mm_list_min']) ? $settings['mm_list_min'] : 0,
    '#description' => t('Set to 0 for no minimum'),
  );
  $form['advanced']['mm_list_max'] = array(
    '#type' => 'textfield',
    '#size' => 4,
    '#maxlength' => 4,
    '#title' => t('Maximum number of entries'),
    '#default_value' => is_numeric($settings['mm_list_max']) ? $settings['mm_list_max'] : 0,
    '#description' => t('Set to 0 for no limit'),
  );

  if ($widget_type != 'mm_userlist') {
    $form['advanced']['mm_list_popup_start'] = array(
      '#type' => $widget_type == 'mm_nodelist' ? 'mm_catlist' : $widget_type,
      '#title' => t('Initial location to display when choosing:'),
      '#default_value' => is_array($settings['mm_list_popup_start']) ? $settings['mm_list_popup_start'] : array(),
      '#mm_list_max' => 1,
    );
  }

  if ($widget_type == 'mm_catlist' || $widget_type == 'mm_nodelist') {
    $x = mm_ui_strings(FALSE);
    $options = array(
      MM_PERMS_WRITE => t('delete it or change its settings', $x),
      MM_PERMS_SUB   => t('append @subthings to it', $x),
      MM_PERMS_APPLY => t('add content to it', $x),
      MM_PERMS_READ  => t('read it', $x),
    );

    $form['advanced']['mm_list_enabled'] = array(
      '#type' => 'select',
      '#title' => t('In order to <em>expand</em> a @thing and see its @subthings, the user must be able to', $x),
      '#options' => $options,
      '#default_value' => isset($settings['mm_list_enabled']) ? $settings['mm_list_enabled'] : MM_PERMS_READ,
    );
    $form['advanced']['mm_list_selectable'] = array(
      '#type' => 'select',
      '#title' => t('In order to <em>select</em> a @thing, the user must be able to', $x),
      '#options' => $options,
      '#default_value' => isset($settings['mm_list_selectable']) ? $settings['mm_list_selectable'] : MM_PERMS_APPLY,
    );
    if ($widget_type == 'mm_nodelist') {
      $form['advanced']['mm_list_selectable']['#title'] = t('In order to <em>select nodes</em> from this page, the user must be able to', $x);
      $all_node_types = node_type_get_types();
      $node_types = array();
      foreach ($all_node_types as $node_type) {
        $node_types[$node_type->type] = $node_type->name;
      }
      $form['advanced']['mm_list_nodetypes'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Allowed node types'),
        '#description' => t('If no node types are selected above, then any type of node may be selected in the node chooser.'),
        '#options' => $node_types,
        '#default_value' => isset($settings['mm_list_nodetypes']) && is_array($settings['mm_list_nodetypes']) ? $settings['mm_list_nodetypes'] : array(),
      );
    }
  }
  return $form;
}

/**
 * Implements hook_field_schema().
 */
function mm_fields_field_schema($field) {
  $columns = array();
  if ($field['type'] == 'mm_fields_mm_nodelist') {
    $columns['mmtid'] = array(
      'type' => 'int',
      'not null' => FALSE,
      'sortable' => TRUE,
    );
    $columns['nid'] = array(
      'type' => 'int',
      'not null' => FALSE,
      'sortable' => TRUE,
    );
  }
  else {
    $columns['value'] = array(
      'type' => 'int',
      'not null' => FALSE,
      'sortable' => TRUE,
    );
  }
  return array(
    'columns' => $columns,
  );
}

/**
 * Implements hook_field_views_data().
 */
function mm_fields_field_views_data($field) {
  $data = field_views_field_default_views_data($field);
  foreach ($data as $table_name => $table_data) {
    foreach ($table_data as $field_name => $field_data) {
      if (isset($field_data['filter']) && $field_name != 'delta') {
        // Filter: swap the handler to the 'in' operator.
        $data[$table_name][$field_name]['filter']['handler'] = 'views_handler_filter_many_to_one';
      }
    }

    // Relationship: add a relationship for related MM page.
    $data[$table_name][$field['field_name'] . '_value']['relationship'] = array(
      'base' => 'mm_node2tree',
      'base field' => 'mmtid',
//        'field' => isset($field['columns']['value']['column']) ? $db_info['columns']['value']['column'] : '',
      'handler' => 'views_handler_relationship',
      'label' => t('Nodes on pages'),
//       'content_field_name' => $field['field_name'],
    );
  }
  return $data;
}

/**
 * Implements hook_field_is_empty().
 */
function mm_fields_field_is_empty($item, $field) {
  return FALSE;
}

/**
 * Implements hook_field_widget_info().
 */
function mm_fields_field_widget_info() {
  $list = array(
    'mm_list_readonly' => FALSE,
    'mm_list_show_info' => TRUE,
    'mm_list_min' => 0,
    'mm_list_max' => 0,
  );

  return array(
    'mm_catlist' => array(
      'label' => 'MM Page chooser',
      'description' => t('Lets the user choose one or more MM pages.'),
      'field types' => array('mm_fields_mm_catlist'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
      'settings' => $list + array('mm_list_popup_start' => array(), 'mm_list_enabled' => MM_PERMS_READ, 'mm_list_selectable' => MM_PERMS_APPLY),
    ),
    'mm_nodelist' => array(
      'label' => 'MM Node chooser',
      'description' => t('Lets the user choose one or more MM nodes.'),
      'field types' => array('mm_fields_mm_nodelist'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
      'settings' => $list + array('mm_list_popup_start' => array(), 'mm_list_enabled' => MM_PERMS_READ, 'mm_list_selectable' => MM_PERMS_APPLY, 'mm_list_nodetypes' => array()),
    ),
    'mm_grouplist' => array(
      'label' => 'MM Group chooser',
      'description' => t('Lets the user choose one or more MM groups.'),
      'field types' => array('mm_fields_mm_grouplist'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
      'settings' => $list + array('mm_list_popup_start' => array()),
    ),
    'mm_userlist' => array(
      'label' => 'MM User chooser',
      'description' => t('Lets the user choose one or more MM users.'),
      'field types' => array('mm_fields_mm_userlist'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
      'settings' => $list + array('mm_list_show_info' => FALSE),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function mm_fields_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  if ($delta > 0) {
    return;
  }

  $widget_type = $instance['widget']['type'];
  $values = array();
  if (is_array($items) && $items) {
    if ($widget_type == 'mm_nodelist') {
      foreach ($items as $item) {
        if (!empty($item['nid'])) {
          mm_ui_mm_nodelist_setup($values, $item['nid'], $item['mmtid']);
        }
        elseif (!empty($item['mmtid'])) {
          $tree = mm_content_get($item['mmtid']);
          if ($tree) {
            $values[$tree->mmtid] = mm_content_get_name($tree) . ' ' . t('(all)');
          }
        }
      }
    }
    else {
      $ids = array();
      foreach ($items as $item) {
        if (isset($item['value'])) {
          $ids[] = $item['value'];
        }
      }

      if ($widget_type == 'mm_userlist') {
        foreach ($ids as $uid) {
          $values[$uid] = mm_ui_uid2name($uid);
        }
      }
      else {
        $tree = mm_content_get($ids);
        if ($tree) {
          foreach ($tree as $item) {
            $values[$item->mmtid] = mm_content_get_name($item);
          }
        }
      }
    }
  }

  $element = array(
    '#type' => $widget_type,
    '#default_value' => $values,
    '#description' => $instance['description'],
    '#element_validate' => array('_mm_fields_mm_list_validate'),
    '#mm_list_field_name' => $instance['field_name'],
    '#mm_list_bundle_name' => $instance['bundle'],
  );
  $instance_settings = mm_fields_get_widget_settings($instance);
  $settings = module_invoke($field['module'], 'field_widget_info');
  if (is_array($settings)) {
    $setting_names = array_keys($settings[$widget_type]['settings']);
    foreach ($setting_names as $name) {
      if ($name == 'mm_list_popup_start') {
        $element['#mm_list_popup_start'] = isset($instance_settings['mm_list_popup_start']) ? join('/', array_keys($instance_settings['mm_list_popup_start'])) : '';
      }
      elseif ($name != 'mm_list_nodetypes' && ($name != 'mm_list_readonly' || empty($form['#title']) || $form['#title'] != t('Default value'))) {
        if ($name == 'mm_list_show_info') {
          $element['#mm_list_no_info'] = !$instance_settings['mm_list_show_info'];
        }
        else if (isset($instance_settings[$name])) {
          $element["#$name"] = $instance_settings[$name];
        }
      }
    }
  }

  if ($widget_type == 'mm_userlist' && empty($instance_settings['mm_list_readonly'])) {
    $choose_name = $field['field_name'] . '-choose';
    $element['#mm_list_autocomplete_name'] = $field['field_name'] . '[' . $langcode . '][' . $choose_name . ']';

    return array(
      $field['field_name'] => $element,
      $choose_name => array(
        '#type' => 'textfield',
        '#title' => $element['#mm_list_max'] == 1 ? t('Choose the user') : t('Add a user'),
        '#autocomplete_path' => 'mm-auto',
        '#description' => theme('mm_autocomplete_desc'),
        '#size' => 30,
        '#maxlength' => 40,
      )
    );
  }
  // Return a nested array, because each "row" has a weight.
  return array($field['field_name'] => $element);
}

/**
 * Flatten the various parts of a widget's settings into a single array that
 * can be referenced more easily. This function is also called by mm_browser.inc.
 *
 * @param $instance
 *   The field instance being queried.
 * @return
 *   The field's settings array.
 */
function mm_fields_get_widget_settings($instance) {
  $settings = $instance['settings'];
  if (isset($instance['widget']['settings'])) {
    $settings = array_merge($settings, $instance['widget']['settings']);
  }
  if (isset($settings['advanced'])) {
    $settings = array_merge($settings, $settings['advanced']);
  }
  return $settings;
}

function _mm_fields_mm_list_validate(&$element, &$form_state, $form) {
  $new = array();
  foreach (array_keys($element['#value']) as $mmtid) {
    if ($element['#type'] === 'mm_nodelist') {
      $mmtid_node = explode('/', $mmtid);
      $new[] = array(
        'mmtid' => $mmtid_node[0],
        'nid' => $mmtid_node[1],
      );
    }
    else {
      $new[] = array('value' => $mmtid);
    }
  }
  $temp_elem = $element;
  $temp_elem['#parents'] = array_slice($temp_elem['#parents'], 0, -1);
  form_set_value($temp_elem, $new, $form_state);
}

function _mm_fields_cardinality_validate(&$element, &$form_state, $form) {
  $max = $form_state['values']['instance']['widget']['settings']['advanced']['mm_list_max'];
  if ($max == 0) {
    $max = FIELD_CARDINALITY_UNLIMITED;
  }
  form_set_value($element, $max, $form_state);
}
