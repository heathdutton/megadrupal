<?php

/**
 * @file
 * Apply Monster Menus permissions to entity fields.
 */

/**
 * Alter the form for administrator settings per entity type, to include the
 * default permissions for all fields. (admin/structure/types/manage)
 */
function mm_fields_perms_form_node_type_form_alter(&$form, &$form_state) {
  $node_type = $form['old_type']['#value'];
  $form['mm_cck_default'] = array(
    '#type' => 'fieldset',
    '#title' => t('Default field permissions'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('These defaults are used for any field in this content type that does not have individual permissions.'),
  );

  _mm_fields_perms_defaults($node_type, $default_modes, $users, $groups);
  _mm_fields_perms_permissions_form($form['mm_cck_default'], $default_modes, $users, $groups, 'node-type-form');
  $form['mm_cck_default']['#group'] = 'additional_settings';

  $form['#validate'][] = '_mm_fields_perms_form_node_type_form_validate';
}

/**
 * Alter the export form.
 */
function mm_fields_perms_form_content_copy_export_form_alter(&$form, &$form_state) {
  if ($form['#step'] == 3 && isset($form['export'])) {
    // var_export() uses a syntax for objects that is incompatible with import.
    $form['export']['#value'] = str_replace('stdClass::__set_state', '(object)', $form['export']['#value']);
  }
}

/**
 * Alter the Manage Fields form, adding a column to show permissions in a
 * tooltip.
 */
function mm_fields_perms_form_field_ui_field_overview_form_alter(&$form, &$form_state) {
  $instances = field_info_instances($form['#entity_type'], $form['#bundle']);
  $form['fields']['#header'][] = t('Permissions');
  foreach (element_children($form['fields']) as $field_name) {
    $field_row =& $form['fields'][$field_name];
    if (in_array($field_name, $form['#fields'])) {
      $settings = $instances[$field_name]['widget']['settings'];
      if (isset($settings['mm_cck_use_defaults']) && !$settings['mm_cck_use_defaults']) {
        $field_row['mm_cck_perms'] = array(
          '#markup' => _mm_fields_perms_display_tooltip(
            $settings['mm_cck_default_modes'] ? $settings['mm_cck_default_modes'][0] : '',
            $settings['mm_cck_users'],
            $settings['mm_cck_groups'],
            t('custom'),
            t('Custom Permissions'))
        );
      }
      else {
        if (!isset($default_tip)) {
          _mm_fields_perms_defaults($form['#bundle'], $default_modes, $users, $groups);
          $default_tip = array(
            '#markup' => _mm_fields_perms_display_tooltip(
              !empty($default_modes[0]) ? $default_modes[0] : FALSE,
              $users,
              $groups,
              t('default'),
              t('Default Permissions'))
          );
        }
        $field_row['mm_cck_perms'] = $default_tip;
      }
    }
    else {
      $field_row['mm_cck_perms'] = array();
    }
  }
}

/**
 * Implementation of hook_field_widget_settings_form(). Construct and process the
 * additional per-field widget elements responsible for permissions.
 */
function mm_fields_perms_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  $form['instance']['settings']['mm_cck_perms'] = array(
    '#type' => 'fieldset',
    '#title' => t('Permissions'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('These permissions apply to this instance of this field.'),
    '#weight' => 99,
    '#tree' => FALSE,
  );
  $in = $form['#instance']['widget']['settings'];
  $use_defaults = isset($in['mm_cck_use_defaults']) ? $in['mm_cck_use_defaults'] : TRUE;
  $form['instance']['settings']['mm_cck_perms']['mm_cck_use_defaults'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use default permissions'),
    '#default_value' => $use_defaults,
    '#description' => t('If checked, the permissions found !link will be used.', array('!link' => l(t('here'), 'admin/structure/types/manage/' . str_replace('_', '-', $form['#instance']['bundle'])))),
  );
  $form['instance']['settings']['mm_cck_perms']['inner'] = array(
    '#prefix' => '<div class="mm-cck-perms" style="display: none">',
    '#suffix' => '</div>',
  );
  $form['instance']['settings']['mm_cck_perms']['inner']['no_save'] = array(
    '#type' => 'hidden',
    '#value' => $use_defaults,
  );
  if ($use_defaults) {
    _mm_fields_perms_defaults($form['#instance']['bundle'], $default_modes, $users, $groups);
  }
  else {
    $default_modes = $in['mm_cck_default_modes'];
    $users = $in['mm_cck_users'];
    $groups = $in['mm_cck_groups'];
  }
  _mm_fields_perms_permissions_form($form['instance']['settings']['mm_cck_perms']['inner'], $default_modes, $users, $groups, 'content-field-edit-form');
  $form['#validate'][] = '_mm_fields_perms_field_permissions_validate';
  drupal_add_js(<<<EOJ
(function (\$) {
  Drupal.behaviors.MMCCKPerms = {
    attach: function (context, settings) {
      \$('.mm-cck-perms:not(.mm-cck-perms-processed)', context)
        .addClass('mm-cck-perms-processed')
        .each(function () {
          var outerDiv = this;
          if (\$('#edit-mm-cck-use-defaults')
            .click(function() {
              \$(outerDiv).slideToggle('fast');
              \$('#edit-no-save').val(\$(this).is(':checked') ? 1 : 0);
              \$('#content-field-edit-form #message').remove();
            }).is(':not(:checked)')) {
              \$(this).show();  // init
              \$('#edit-no-save').val(0);
            }
        });
      }
  };
})(jQuery);
EOJ
  , 'inline', 'footer');
}

/**
 * Implementation of hook_field_widget_info_alter().
 */
function mm_fields_perms_field_widget_info_alter(&$info) {
  foreach ($info as &$field_type) {
    $field_type['settings'] += array(
      'mm_cck_use_defaults' => TRUE,
      'mm_cck_default_modes' => array(),
      'mm_cck_users' => array(),
      'mm_cck_groups' => array()
    );
  }
}

/**
 * Implementation of hook_field_access(). Prevent users from accessing fields,
 * based on the chosen permissions.
 */
function mm_fields_perms_field_access($op, $field, $entity_type, $entity, $account) {
  static $groups_by_uid;

  if (!empty($entity) && !empty($entity->type) && ($op == 'view' || $op == 'edit')) {
    $instance = field_info_instance($entity_type, $field['field_name'], $entity->type);
    if (empty($instance)) {
      return;
    }

    $settings = $instance['widget']['settings'];
    if (!isset($settings['mm_cck_use_defaults']) || $settings['mm_cck_use_defaults']) {
      _mm_fields_perms_defaults($entity->type, $default_modes, $users, $groups);
    }
    else {
      $default_modes = $settings['mm_cck_default_modes'];
      $users = $settings['mm_cck_users'];
      $groups = $settings['mm_cck_groups'];
    }

    $uid = $account->uid;
    if ($uid == 1 || in_array(MM_PERMS_WRITE, $default_modes) || $op == 'view' && in_array(MM_PERMS_READ, $default_modes)) {
      return TRUE;
    }

    if (!$uid) {
      return FALSE;
    }

    $test = $op == 'view' ? array(MM_PERMS_WRITE, MM_PERMS_READ) : array(MM_PERMS_WRITE);

    // Test users first, since that's faster.
    foreach ($test as $mode) {
      if (isset($users[$mode]) && in_array($uid, $users[$mode])) {
        return TRUE;
      }
    }

    foreach ($test as $mode) {
      if (isset($groups[$mode])) {
        if (!isset($groups_by_uid[$uid])) {
          $groups_by_uid[$uid] = mm_content_get_uids_in_group(NULL, $uid, TRUE, TRUE, FALSE);
        }
        if (array_intersect($groups[$mode], $groups_by_uid[$uid])) {
          return TRUE;
        }
      }
    }

    return FALSE;
  }
}

/**
 * Validate the default field permissions for a content type.
 */
function _mm_fields_perms_form_node_type_form_validate($form, &$form_state) {
  $vals =& $form_state['values'];
  list($default_groups, $default_users, $default_modes) = _mm_ui_form_parse_perms($vals, TRUE);
  // For some reason the default form handler doesn't serialize these correctly
  // when they are arrays, so use objects instead.
  $vals['mm_cck_default_groups'] = (object)$default_groups;
  $vals['mm_cck_default_users'] = (object)$default_users;
  $vals['mm_cck_default_modes'] = (object)$default_modes;
  _mm_fields_perms_sanitize($vals);
}

/**
 * Validate submitted field permissions.
 */
function _mm_fields_perms_field_permissions_validate($form, &$form_state) {
  $vals =& $form_state['values'];
  $settings =& $vals['instance']['widget']['settings'];
  $settings['mm_cck_use_defaults'] = $vals['mm_cck_use_defaults'];
  if (!$vals['mm_cck_use_defaults']) {
    list($settings['mm_cck_groups'], $settings['mm_cck_users'], $settings['mm_cck_default_modes']) = _mm_ui_form_parse_perms($vals, TRUE);
  }
}

/**
 * Generate a form allowing the admin to set permissions on a field.
 */
function _mm_fields_perms_permissions_form(&$form, $default_modes, $users_in, $groups_in, $form_id) {
  $users = $groups = array();

  foreach ($users_in as $mode => $data) {
    foreach ($data as $uid) {
      $users[$uid]['name'] = mm_content_uid2name($uid);
      $users[$uid]['modes'][] = $mode;
    }
  }

  foreach ($groups_in as $mode => $data) {
    foreach ($data as $gid) {
      $members = mm_content_get_users_in_group($gid, '<br />', FALSE, 20, TRUE);
      if ($members == '') $members = t('(none)');
      $groups[$gid]['name'] = mm_content_get_name($gid);
      $groups[$gid]['members'] = $members;
      $groups[$gid]['modes'][] = $mode;
    }
  }

  $types = array(
    MM_PERMS_WRITE => array(
      t('Edit Field'),
      'If checked, !class can edit the field.',
    ),
    MM_PERMS_READ => array(
      t('View Field'),
      "If checked, !class can view the field's contents.",
    ),
  );

  module_load_include('inc', 'monster_menus', 'mm_ui_content_edit');
  mm_ui_content_edit_permissions($form, $types, $default_modes, $groups, $users);
  mm_static('settings_perms', TRUE, $form_id);
}

/**
 * Generate a tooltip for a given field in the field overview table, which shows
 * the permissions for that field at a glance.
 */
function _mm_fields_perms_display_tooltip($default_mode, $users, $groups, $link_text, $tip_title) {
  $table = array();
  $table[] = _mm_fields_perms_display_tooltip_row(t('<strong>Everyone:</strong>'), '', $default_mode);

  if ($users) {
    $rows = array();
    foreach ($users as $mode => $list) {
      foreach ($list as $uid) {
        $name = mm_content_uid2name($uid);
        $rows[$name] = _mm_fields_perms_display_tooltip_row('', $name, $mode);
      }
    }
    ksort($rows);
    $rows[mm_ui_mmlist_key0($rows)][0] = t('<strong>Individuals:</strong>');
    $table = array_merge($table, $rows);
  }

  if ($groups) {
    $rows = array();
    foreach ($groups as $mode => $list) {
      foreach ($list as $gid) {
        $name = mm_content_get_name($gid);
        $rows[$name] = _mm_fields_perms_display_tooltip_row('', $name, $mode);
      }
    }
    ksort($rows);
    $rows[mm_ui_mmlist_key0($rows)][0] = t('<strong>Groups:</strong>');
    $table = array_merge($table, $rows);
  }

  $table_html = theme('table', array(
    'header' => array(),
    'rows' => $table,
  ));
  return theme('tooltip', array(
    'text' => $link_text,
    'title' => $tip_title,
    'tip' => $table_html,
    'html' => TRUE,
  ));
}

/**
 * Translate a permissions mode into a human-readable string, and return an
 * array for the entire table row.
 */
function _mm_fields_perms_display_tooltip_row($col1, $col2, $perm) {
  if ($perm == MM_PERMS_WRITE) {
    $mode = t('edit/view');
  }
  else if ($perm == MM_PERMS_READ) {
    $mode = t('view');
  }
  else {
    $mode = t('(none)');
  }
  return array($col1, $col2, $mode);
}

/**
 * Retrieve the default permissions from Drupal variables.
 *
 * @param $node_type
 *   The content type being queried.
 * @param $default_modes
 *   On return, an array of modes for the anonymous user ("Everyone").
 * @param $users
 *   On return, a nested array where the first index is the mode, and the
 *   inner array contains a list of user IDs.
 * @param $groups
 *   On return, a nested array where the first index is the mode, and the
 *   inner array contains a list of group IDs.
 */
function _mm_fields_perms_defaults($node_type, &$default_modes, &$users, &$groups) {
  $default_modes = (array)variable_get('mm_cck_default_modes_' . $node_type, array(MM_PERMS_WRITE, MM_PERMS_READ));
  $users = (array)variable_get('mm_cck_default_users_' . $node_type, array());
  $groups = (array)variable_get('mm_cck_default_groups_' . $node_type, array());
}

/**
 * Remove unnecessary form values, so they don't pollute the data saved with
 * the field definition.
 *
 * @param $vals
 *   The $form_state['values'] element to sanitize
 */
function _mm_fields_perms_sanitize(&$vals) {
  foreach (array('all_values_group', 'all_values_user', 'default_modes', 'everyone', 'indiv', 'groups', 'no_save') as $val) {
    unset($vals[$val]);
  }
  foreach (array_keys($vals) as $key) {
    if (preg_match('/^(user|group)-(' . MM_PERMS_READ . '|' . MM_PERMS_WRITE . ')-/', $key)) {
      unset($vals[$key]);
    }
  }
}
