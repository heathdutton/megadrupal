<?php

/**
 * @file
 * Installation script for the MM Media module
 */

/**
 * Implements hook_install().
 */
function mm_media_install() {
  // Add the body field to this module's content types
  node_add_body_field((object)array('type' => 'gallery'));
}

/**
 * Implements hook_uninstall().
 */
function mm_media_uninstall() {
  $unset = array(
    'mm_media_gallery_final_deriv',
    'mm_media_gallery_flow_per_page',
    'mm_media_gallery_grid_cols',
    'mm_media_gallery_grid_rows',
    'mm_media_gallery_mode',
    'mm_media_gallery_show_caption',
    'mm_media_gallery_show_comment',
    'mm_media_gallery_show_title',
    'mm_media_gallery_single_start',
    'mm_media_gallery_thumb_deriv',
  );
  foreach ($unset as $name)
    variable_del($name);
}

/**
 * Implements hook_mm_verify_integrity()
 */
function mm_media_mm_verify_integrity() {
  return array('Monster Menus Media' => array(
    t('mm_media_gallery.nid refers to missing node.nid') =>
      "{mm_media_gallery} x LEFT JOIN {node} n ON n.nid=x.nid WHERE n.nid IS NULL",

    t('mm_media_gallery_imgs.nid refers to missing node.nid') =>
      "{mm_media_gallery_imgs} x LEFT JOIN {node} n ON n.nid=x.nid WHERE n.nid IS NULL",
    t('mm_media_gallery_imgs.img_nid refers to missing node.nid') =>
      "{mm_media_gallery_imgs} x LEFT JOIN {node} n ON n.nid=x.img_nid WHERE x.img_nid>0 AND n.nid IS NULL",
    t('mm_media_gallery_imgs.img_fid refers to missing file_managed.fid') =>
      "{mm_media_gallery_imgs} x LEFT JOIN {file_managed} f ON f.fid=x.img_fid WHERE x.img_fid>0 AND f.fid IS NULL",
    t('mm_media_gallery_imgs.img_mmtid refers to missing mm_tree.mmtid') =>
      "{mm_media_gallery_imgs} x LEFT JOIN {mm_tree} t ON t.mmtid=x.img_mmtid WHERE x.img_mmtid>0 AND t.mmtid IS NULL",
  ));
}

/**
 * Implements hook_schema().
 */
function mm_media_schema() {
  $schema['mm_media_gallery'] = array(
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'disp-width' => '11',
      ),
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'disp-width' => '11',
      ),
      'mode' => array(
        'type' => 'varchar',
        'length' => 6,
        'not null' => TRUE,
      ),
      'link_text' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'grid_cols' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'disp-width' => '11',
      ),
      'grid_rows' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'disp-width' => '11',
      ),
      'thumb_deriv' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'final_deriv' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'flow_per_page' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'disp-width' => '11',
      ),
      'single_start' => array(
        'type' => 'varchar',
        'length' => 6,
        'not null' => TRUE,
      ),
      'show_title' => array(
        'type' => 'varchar',
        'length' => '1',
        'not null' => TRUE,
      ),
      'show_comment' => array(
        'type' => 'varchar',
        'length' => '1',
        'not null' => TRUE,
      ),
      'show_caption' => array(
        'type' => 'varchar',
        'length' => '1',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('nid', 'vid'),
    'foreign keys' => array(
      'node' => array(
        'table' => 'node',
        'columns' => array(
          'nid' => 'nid',
          'vid' => 'vid',
        ),
      ),
    ),
    'indexes' => array(
      'vid' => array('vid'),
    ),
  );

  $schema['mm_media_gallery_imgs'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'disp-width' => '11'
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'disp-width' => '11'
      ),
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'disp-width' => '11'
      ),
      'img_mmtid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'disp-width' => '11'
      ),
      'img_nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '11'
      ),
      'img_fid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '11'
      )
    ),
    'primary key' => array('id'),
    'foreign keys' => array(
      'node' => array(
        'table' => 'node',
        'columns' => array(
          'nid' => 'nid',
          'vid' => 'vid',
          'img_nid' => 'nid',
        ),
      ),
      'mm_tree' => array(
        'table' => 'mm_tree',
        'columns' => array(
          'img_mmtid' => 'mmtid',
        ),
      ),
      'file_managed' => array(
        'table' => 'file_managed',
        'columns' => array(
          'img_fid' => 'fid',
        ),
      ),
    ),
    'indexes' => array(
      'img_mmtid' => array('img_mmtid'),
      'img_nid' => array('img_nid'),
      'img_fid' => array('img_fid'),
      'nid' => array('nid'),
      'vid' => array('vid')
    ),
  );

  return $schema;
}

/**
 * Upgrade media module from D6 to D7, rename from media.module to mm_media.module
 */
function mm_media_update_7000() {
  // Rename media module related database tables
  @db_rename_table('media_files', 'mm_media_files');
  @db_rename_table('media_mime_icons', 'mm_media_mime_icons');
  @db_rename_table('media_mime_other_types', 'mm_media_mime_other_types');
  @db_rename_table('media_mime_types', 'mm_media_mime_types');
  @db_rename_table('mm_node_gallery', 'mm_media_gallery');
  @db_rename_table('mm_node_gallery_imgs', 'mm_media_gallery_imgs');

  // Rename variables
  $rename = array(
    'mm_media_assist_audio_height' => 'media_assist_audio_height',
    'mm_media_assist_audio_width' => 'media_assist_audio_width',
    'mm_media_assist_default_label' => 'media_assist_default_label',
    'mm_media_assist_display_count' => 'media_assist_display_count',
    'mm_media_assist_display_rowcount' => 'media_assist_display_rowcount',
    'mm_media_assist_preview_image' => 'media_assist_preview_image',
    'mm_media_default_path' => 'media_default_path',
    'mm_media_gallery_final_deriv' => 'mm_node_gallery_final_deriv',
    'mm_media_gallery_flow_per_page' => 'mm_node_gallery_flow_per_page',
    'mm_media_gallery_grid_cols' => 'mm_node_gallery_grid_cols',
    'mm_media_gallery_grid_rows' => 'mm_node_gallery_grid_rows',
    'mm_media_gallery_mode' => 'mm_node_gallery_mode',
    'mm_media_gallery_show_caption' => 'mm_node_gallery_show_caption',
    'mm_media_gallery_show_comment' => 'mm_node_gallery_show_comment',
    'mm_media_gallery_show_title' => 'mm_node_gallery_show_title',
    'mm_media_gallery_single_start' => 'mm_node_gallery_single_start',
    'mm_media_gallery_thumb_deriv' => 'mm_node_gallery_thumb_deriv',
    'mm_media_mime_extension_fallback' => 'media_mime_extension_fallback',
    'mm_media_mime_type_error' => 'media_mime_type_error',
    'mm_media_mime_use_upload' => 'media_mime_use_upload',
    'mm_media_num_subdirs' => 'media_num_subdirs',
    'mm_media_save_button_instr' => 'media_save_button_instr',
    'mm_media_title_instr' => 'media_title_instr',
    'mm_media_watchdog_email' => 'media_watchdog_email',
  );

  foreach (array_keys(user_roles()) as $rid) {
    $rename["mm_media_filesize_$rid"] = "media_filesize_$rid";
    $rename["mm_media_userquota_$rid"] = "media_userquota_$rid";
  }

  foreach ($rename as $new => $old) {
    if (($val = variable_get($old, '-1234abcd-')) !== '-1234abcd-') {
      variable_set($new, $val);
      variable_del($old);
    }
  }

/*** Don't do this, because it deletes the old captions
  node_types_rebuild();
  if ($instance = field_info_instance('node', 'body', 'media')) {
    field_delete_instance($instance);
  }
  node_add_body_field((object)array('type' => 'media'), st('Caption'));
***/

  return t('Renamed tables and variables to migrate media module to mm_media module.');
}

/**
 * Rename {mm_media}.filepath to destination; alter URIs to include private://
 */
function mm_media_update_7001() {
  db_change_field('mm_media_files', 'filepath', 'uri', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
  ));
  db_update('mm_media_files')
    ->expression('uri', 'CONCAT(:new_path, uri)', array(':new_path' => 'private://'))
    ->execute();
}

/**
 * Remove some uneeded tables and variables
 */
function mm_media_update_7002() {
  $unset = array(
    'media_file_transfer_xsendfile',
    'media_num_subdirs_orig',
    'media_upload_instr',
    'mm_media_assist_audio_height',
    'mm_media_assist_audio_width',
    'mm_media_assist_default_label',
    'mm_media_assist_display_count',
    'mm_media_assist_display_rowcount',
    'mm_media_assist_preview_image',
    'mm_media_default_path',
    'mm_media_mime_extension_fallback',
    'mm_media_mime_type_error',
    'mm_media_mime_use_upload',
    'mm_media_num_subdirs',
    'mm_media_save_button_instr',
    'mm_media_title_instr',
    'mm_media_watchdog_email',
  );
  foreach ($unset as $name) {
    variable_del($name);
  }
  foreach (array_keys(user_roles()) as $rid) {
    variable_del("mm_media_filesize_$rid");
    variable_del("mm_media_userquota_$rid");
  }

  foreach (array('mm_media_mime_types', 'mm_media_mime_other_types', 'mm_media_mime_icons') as $table) {
    @db_drop_table($table);
  }
}

/**
 * Add content type and add a field to mm_media_gallery_imgs.
 */
function mm_media_update_7003() {
  menu_rebuild();

  db_add_field('mm_media_gallery_imgs', 'img_fid', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
    'disp-width' => '11'
  ));
  db_add_index('mm_media_gallery_imgs', 'img_fid', array('img_fid'));

  // Make sure the wysiwyg module allows the special image attribtues defined
  // by this module.
  $allowed = variable_get('media__wysiwyg_allowed_attributes');
  foreach (array('mm_media_link', 'mm_media_margin', 'mm_media_outlined') as $new)
    if (!in_array($new, $allowed))
      $allowed[] = $new;
  variable_set('media__wysiwyg_allowed_attributes', $allowed);
}

/**
 * Move mm_media data into core fields
 */
function mm_media_update_7004() {
  set_time_limit(0);    // This can take a while.
  $used = array();
  $query = db_query("SELECT mf.*, n.uid FROM {mm_media_files} mf INNER JOIN {node} n ON n.nid = mf.nid WHERE filename = 'original'");
  foreach ($query as $file) {
    db_update('node')
      ->expression('type', "'mm_media'")
      ->condition('nid', $file->nid)
      ->execute();
    if (isset($used[$file->uri])) {
      $file->fid = $used[$file->uri];
      db_update('file_usage')
        ->expression('count', 'count + 1')
        ->condition('fid',  $file->fid)
        ->execute();
    }
    else {
      $file->fid = NULL;
      $file->filename = $file->uploadedfilename;
      $file->status = FILE_STATUS_PERMANENT;
      if (!strncmp($file->filemime, 'video/', 6)) $file->type = 'video';
      elseif (!strncmp($file->filemime, 'image/', 6)) $file->type = 'image';
      elseif (!strncmp($file->filemime, 'audio/', 6)) $file->type = 'audio';
      else $file->type = 'default';
      $existing = file_load_multiple(array(), array('uri' => $file->uri));
      if ($existing) {
        $keys = array_keys($existing);
        $file->fid = $keys[0];
      }
      else {
        $file = file_save($file);
      }
      $used[$file->uri] = $file->fid;
      $nid_to_fid[$file->nid] = $file->fid;
      file_usage_add($file, 'mm_media', 'node', $file->nid);
      $keys = array(
        'entity_type' => 'node',
        'entity_id' => $file->nid,
        'deleted' => 0,
        'delta' => 0,
        'language' => LANGUAGE_NONE,
      );
      $data = array(
        'bundle' => 'mm_media',
        'revision_id' => NULL,
        'field_multimedia_fid' => $file->fid,
        'field_multimedia_title' => NULL,
        'field_multimedia_data' => NULL,
      );
      // Can't use drupal_write_record() here.
      db_merge('field_data_field_multimedia')
        ->key($keys)
        ->fields($data)
        ->execute();
      db_update('mm_media_gallery_imgs')
        ->expression('img_fid', $file->fid)
        ->condition('img_nid', $file->nid)
        ->execute();
    }
  }
  // If a row didn't get updated, it has no data in img_fid. We should
  // probably alert the user somehow, but what could they do about it, anyway?
  // Instead, just delete the row.
  db_delete('mm_media_gallery_imgs')
    ->condition('img_nid', 0, '<>')
    ->condition('img_fid', 0)
    ->execute();

  // TODO: drop mm_media_files
}

/**
 * Update MM's allowed node types list to reflect the change in node name from D6.
 */
function mm_media_update_7005() {
  db_update('mm_cascaded_settings')
    ->fields(array('data' => 'mm_media'))
    ->condition('name', 'allowed_node_types')
    ->condition('data', 'media')
    ->execute();
}

/**
 * Warn the user about the upcoming change in 7007, if there will be one. Also
 * fix a case where an improper value set in the file_usage table can lead to
 * orphaned data, because it is not properly cleaned up when nodes containing
 * media are deleted.
 */
function mm_media_update_7006() {
  if (($count = variable_get('mm_media_update_temp', FALSE)) === FALSE) {
    // See how many binaries are going to be removed from disk.
    $count = db_query("SELECT COUNT(*) FROM (SELECT COUNT(*), nid FROM {file_usage} f LEFT JOIN {node} n ON n.nid = f.id WHERE f.type = 'node' GROUP BY f.fid HAVING n.nid IS NULL) x")->fetchField();
    variable_set('mm_media_update_temp', $count);

    // Fix the incorrect data.
    // UPDATE file_usage SET module='mediafield' WHERE module='mm_media';
    db_update('file_usage')
      ->fields(array('module' => 'mediafield'))
      ->condition('module', 'mm_media')
      ->execute();

    if ($count) {
      // "Fail" the update with a warning message.
      throw new DrupalUpdateException(t('IMPORTANT: Update 7007 will permanently remove data associated with @count file upload(s). This data is not currently being used and is not viewable from the web, however it is taking up disk space. Re-run this update to confirm that this is what you want to do.', array('@count' => $count)));
    }
  }
}

/**
 * Clean up any orphan data caused by the bug fixed in 7006.
 */
function mm_media_update_7007() {
  // Find orphan rows for which the file is not being used by another node and
  // delete the file_managed and file_usage entries.

  $first = db_query("SELECT fid, nid FROM {file_usage} f LEFT JOIN {node} n ON n.nid = f.id WHERE f.type = 'node' GROUP BY f.fid HAVING n.nid IS NULL")->fetchCol();
  foreach ($first as $fid) {
    if ($file = file_load($fid)) {
      file_delete($file, TRUE);
    }
  }

  // Find any remaining orphans and remove just their file_usage entries, since
  // they are still being used by another node.
  $second = db_query("DELETE f FROM {file_usage} f LEFT JOIN {node} n ON n.nid = f.id WHERE n.nid IS NULL AND f.type = 'node'")->rowCount();

  // Remove counter from 7006.
  variable_del('mm_media_update_temp');

  return t('Removed @first orphan entries from file_usage/file_managed. Removed @second entries just from file_usage.', array('@first' => count($first), '@second' => $second));
}
