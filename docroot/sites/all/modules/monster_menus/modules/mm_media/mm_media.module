<?php

/**
 * @file
 * UI for uploading media nodes
 */

module_load_include('inc', 'mm_media', 'mm_media_assist');
require_once 'mm_media.features.inc';

/**
 * Implements hook_theme
 */
function mm_media_theme() {
  $themes = array(
    'mm_media_assist_page' => array(
      'file' => 'mm_media_assist.inc',
      'variables' => array('content' => NULL, 'attributes' => NULL),
    ),
    'mm_media_image_style' => array(
      'variables' => array(
        'style_name' => NULL,
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
    ),
  );
  return $themes;
}

/**
 * Implements hook_help
 */
function mm_media_help($path, $arg = NULL) {
  switch ($path) {
    case 'admin/help#file upload':
      return t('This module is used to create and administer media (images, PDF files, Word documents, etc.) for your site. Each media item is stored as a post. For images, thumbnails of the original item are generated automatically.
          There are three default sizes: thumbnail, icon and original.
          The thumbnail size is shown as the preview for image posts and when browsing image galleries.
          "Original" is the default size when first displaying an image.');

    case 'admin/modules#description':
      return t('Allows uploading of media and inserting media into content.');

    case 'node/add#media':
      return t('Upload images, PDFs, audio and other media files (after uploading files, you can insert them into articles).');

    case 'node/add#gallery':
      return t('Allows you to create galleries from the files you have previously uploaded.');
  }
}

/**
 * Implements hook_permission
 */
function mm_media_permission() {
  return array(
    'access media_assist' => array(
      'title' => t('Access Media Assist'),
      'description' => t('Allows the user to use a WYSIWYG-integrated media chooser dialog'),
    ),
  );
}

/**
 * Implements hook_menu
 *  Amherst Specific: URLs that begin with 'media/' are forbidden. They are
 *  redirected at the proxy level. There is a specific exemption in place for
 *  'media/view/', but all others will break.
 */
function mm_media_menu() {
  $items['mm_media_assist/load'] = array(
    'page callback' => 'mm_media_assist_loader',
    'page arguments' => array(FALSE),
    'file' => 'mm_media_assist.inc',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['mm_media_assist/load_gallery'] = array(
    'page callback' => 'mm_media_assist_loader',
    'page arguments' => array(TRUE),
    'file' => 'mm_media_assist.inc',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['mm_media_assist/properties/%file/%node'] = array(
    'page callback' => 'mm_media_assist_properties',
    'page arguments' => array(2, 3),
    'file' => 'mm_media_assist.inc',
    'access callback' => 'mm_media_embed_media_access',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_image_default_styles().
 */
function mm_media_image_default_styles() {
  return array(t('original') => array('effects' => array()));
}

/**
 * Implements hook_form_FORMID_alter().
 */
function mm_media_form_wysiwyg_profile_form_alter(&$form, &$form_state) {
  // Prevent a Javascript conflict between this module and media. They both try
  // to parse the WYSIWYG data and step on each others' toes.
  if (!empty($form['buttons']['drupal']['media']['#title']) && !empty($form['buttons']['drupal']['mm_media']['#title'])) {
    $title_media = $form['buttons']['drupal']['media']['#title'];
    $title_mm_media = $form['buttons']['drupal']['mm_media']['#title'];
    $alert = t('The "@media" and "@mm_media" buttons cannot be used at the same time.', array('@media' => $title_media, '@mm_media' => $title_mm_media));
    $form['#attached']['js'][] = array('data' => <<<EOJ
(function (\$) {
  \$('#edit-buttons-drupal-media').click(function() {
    if (\$('#edit-buttons-drupal-mm-media').is(':checked')) {
      alert('$alert');
      return false;
    }
  });
  \$('#edit-buttons-drupal-mm-media').click(function() {
    if (\$('#edit-buttons-drupal-media').is(':checked')) {
      alert('$alert');
      return false;
    }
  });
})(jQuery);
EOJ
    , 'type' => 'inline', 'scope' => 'footer');
  }
}

/**
 * Make sure a list of term_ids passed on the URL is all numeric
 */
function mm_media_sanitize_termids(&$term_ids) {
  foreach ($term_ids as &$tid) {
    if (($tid = intval($tid)) === 0) {
      drupal_access_denied();
      return FALSE;
    }
  }
  return TRUE;
}

function mm_media_embed_media_access($node) {
  return user_access('access content') && (!function_exists('mm_content_user_can_node') || mm_content_user_can_node($node, MM_PERMS_APPLY));
}

function mm_media_form_media_admin_config_browser_alter(&$form, &$form_state) {
  if (isset($form['media__file_extensions'])) {
    $form['media__file_extensions']['#type'] = 'textarea';
  }
}

function mm_media_form_system_performance_settings_alter(&$form, &$form_state) {
  $form['caching']['mm_media_cache_public_media'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow external caching of world-readable media files'),
    '#default_value' => variable_get('mm_media_cache_public_media', 0),
    '#description' => t('If enabled, media files will be checked to see if they are readable by everyone, even if the current user is logged-in. This has a slight performance penalty for the first hit, but subsequent hits are faster because they are cached.'),
    '#weight' => -0.5,
  );
}

function mm_media_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if (isset($form['instance']['settings']['file_extensions'])) {
    $form['instance']['settings']['file_extensions']['#type'] = 'textarea';
    unset($form['instance']['settings']['file_extensions']['#maxlength']); //set in media module to 255
  }
}

function mm_media_process_image_style(&$variables) {
  array_unshift($variables['theme_hook_suggestions'], 'mm_media_image_style');
}

/**
 * Returns HTML for an image using a specific image style.
 *
 * @param $variables
 *   An associative array containing:
 *   - style_name: The name of the style to be used to alter the original image.
 *   - path: The path of the image file relative to the Drupal files directory.
 *     This function does not work with images outside the files directory nor
 *     with remotely hosted images.
 *   - width: The width of the source image (if known).
 *   - height: The height of the source image (if known).
 *   - alt: The alternative text for text-based browsers.
 *   - title: The title text is displayed when the image is hovered in some
 *     popular browsers.
 *   - attributes: Associative array of attributes to be placed in the img tag.
 * @return string
 *   HTML code
 * @ingroup themeable
 */
function theme_mm_media_image_style($variables) {
  // Determine the dimensions of the styled image.
  $dimensions = array(
    'width' => $variables['width'],
    'height' => $variables['height'],
  );

  image_style_transform_dimensions($variables['style_name'], $dimensions);

  $variables['width'] = $dimensions['width'];
  $variables['height'] = $dimensions['height'];

  // Determine the url for the styled image.
  $orig_path = $variables['path'];
  $variables['path'] = image_style_url($variables['style_name'], $orig_path);
  $orig_attributes = $variables['attributes'];
  foreach (array('mm_media_outlined', 'mm_media_margin', 'mm_media_link') as $remove) {
    unset($variables['attributes'][$remove]);
  }
  if (!isset($variables['attributes']['style'])) {
    $variables['attributes']['style'] = array();
  }
  elseif (is_string($variables['attributes']['style'])) {
    $temp = $variables['attributes']['style'];
    $variables['attributes']['style'] = array();
    $variables['attributes']['style'][] = $temp;
  }
  if (!empty($orig_attributes['mm_media_outlined'])) {
    $variables['attributes']['style'][] = 'margin: 10px;';
  }
  if (!empty($orig_attributes['mm_media_margin'])) {
    $variables['attributes']['style'][] = 'border: 1px solid #000000;';
  }
  $output = theme('image', $variables);

  if (!empty($orig_attributes['mm_media_link']) && $variables['style_name'] != 'large') {
    $output = l($output, image_style_url('large', $orig_path), array('html' => TRUE, 'title' => t('Original size')));
  }
  if ($variables['attributes']['style']) {
    $output = '<div class="mm-mediainline">' . $output . '</div>';
  }

  return $output;
}

function _mm_media_form_add_includes($form, &$form_state) {
  mm_static('back_in_history', TRUE);
  $module_path = drupal_get_path('module', 'mm_media');
  drupal_add_js(array('page_url' => request_uri()), 'setting');
  drupal_add_css($module_path . '/css/mm_media.css');
  return $form;
}

/**
 * Implements hook_wysiwyg_include_directory().
 */
function mm_media_wysiwyg_include_directory($type) {
  switch ($type) {
    case 'plugins':
      return 'wysiwyg';
      break;
  }
}

/**
 * Implements hook_file_download().
 */
function mm_media_file_download($uri) {
  global $user;

  // Get the file record based on the URI. If not in the database just return.
  $files = file_load_multiple(array(), array('uri' => $uri));
  if ($files) {
    $current_is_anon = user_is_anonymous();
    if (!$current_is_anon) {
      $anon_user = user_load(0);
    }
    $current_user_can = NULL;
    $is_public = FALSE;
    $cache_public_media = variable_get('mm_media_cache_public_media', 0);
    foreach ($files as $file) {
      // Since some database servers sometimes use a case-insensitive comparison
      // by default, double check that the filename is an exact match.
      if ($file->uri === $uri) {
        if ($file->uid == $user->uid) {
          $current_user_can = TRUE;
          if ($current_is_anon) {
            $is_public = TRUE;
          }
        }

        if (is_null($current_user_can) || $cache_public_media) {
          // If the current user can read any of the nodes containing the file,
          // let it through. Otherwise, return -1. We also calculate whether or
          // not the anonymous user can view the file, so that the correct
          // cache headers can be sent.
          $usage = file_usage_list($file);
          // mm_media uses the mediafield module to manage files but the
          // file_usage_list will contain usages by media and potentially other
          // modules for the purpose of embedding a link to documents on
          // publicly accessible content. If the file is not an image, and
          // therefore is a link to the file on embed, ignore these other usages
          // and base access permissions only on the original node(s) to which
          // the file is attached in mediafield.
          $usage = array_intersect_key($usage, array('mediafield' => 1, 'mm_media' => 1, 'file' => 1));
          foreach ($usage as $use) {
            if (!empty($use['node'])) {
              if (is_null($current_user_can)) {
                $current_user_can = FALSE;
              }

              foreach (array_keys($use['node']) as $nid) {
                if (($node = node_load($nid))) {
                  // Check readability for the current user.
                  if (!$current_user_can) {
                    $perms = mm_content_user_can_node($node);
                    // Either the node is published and the user can read it, or
                    // the user can write to it.
                    if ($node->status && $perms[MM_PERMS_READ] || $perms[MM_PERMS_WRITE]) {
                      $current_user_can = TRUE;
                      if (!$cache_public_media) {
                        return mm_media_get_content_headers($file, FALSE);
                      }
                      if ($current_is_anon) {
                        return mm_media_get_content_headers($file, TRUE);
                      }
                    }
                  }
                  // Check readability for the anonymous user.
                  if ($cache_public_media && !$current_is_anon && mm_content_user_can_node($node, MM_PERMS_READ, $anon_user)) {
                    return mm_media_get_content_headers($file, TRUE);
                  }
                }
              }
            }
          }
        }

        if ($current_user_can) {
          return mm_media_get_content_headers($file, $is_public);
        }

        if ($current_user_can === FALSE) {
          // Denied.
          return -1;
        }
      }
    }
  }
}

function mm_media_get_content_headers($file, $is_public) {
  $headers = array(
    'Content-Type' => mime_header_encode($file->filemime),
    'Content-Disposition' => 'filename="' . strtr(mime_header_encode($file->filename), array('"' => '\\"')) . '"',
    'Content-Length' => $file->filesize,
    'Cache-Control' => 'private',
  );
  if ($is_public) {
    // Check the setting at admin/config/development/performance.
    $max_age = variable_get('page_cache_maximum_age', 0);
    $expires = new DateTime();
    if ($max_age) {
      $headers['Cache-Control'] = 'public, max-age=' . mime_header_encode($max_age);
      $expires->modify("+$max_age second");
    }
    else {
      $headers['Cache-Control'] = 'public';
      $expires->modify('+10 year');
    }
    $headers['Expires'] = $expires->format('r');

    // See if the client has provided the required HTTP headers.
    $if_modified_since = isset($_SERVER['HTTP_IF_MODIFIED_SINCE']) ? strtotime($_SERVER['HTTP_IF_MODIFIED_SINCE']) : FALSE;
    $if_none_match = isset($_SERVER['HTTP_IF_NONE_MATCH']) ? stripslashes($_SERVER['HTTP_IF_NONE_MATCH']) : FALSE;
    $moddate = filemtime($file->uri);

    if ($if_modified_since && $if_none_match && $if_modified_since === $moddate) {
      header($_SERVER['SERVER_PROTOCOL'] . ' 304 Not Modified');
      drupal_send_headers(array('Cache-Control' => $headers['Cache-Control'], 'Expires' => $headers['Expires']));
      drupal_exit();
    }
    else if ($moddate) {
      $headers['Last-Modified'] = gmdate(DATE_RFC1123, $moddate);
    }
  }
  return $headers;
}

/**
 * Implements hook_node_delete().
 */
function mm_media_node_delete($node) {
  if ($node->type == 'mm_media') {
    $files = reset($node->field_multimedia);
    if (is_array($files)) {
      foreach ($files as $file) {
        $count = db_select('file_usage')
          ->condition('fid', $file['fid'])
          ->countQuery()
          ->execute()
          ->fetchField();
        if ($count <= 1 && ($file_obj = file_load($file['fid']))) {
          file_delete($file_obj, TRUE);
        }
      }
    }
  }
}

/**
 * Verify the image module and toolkit settings.
 */
function _mm_media_check_settings() {
  // File paths
  $directory = 'private://';
  $is_writable = is_dir($directory) && is_writable($directory);
  $disabled = !$is_writable;
  // Ensure private files are enabled.
  if ($disabled) {
    drupal_set_message(t('Monster Menus Media requires private file downloads to be enabled. Please enable !private_downloads.', array('!private_downloads' => l(t('private downloads'), 'admin/config/media/file-system'))), 'warning');
    return FALSE;
  }

  // Sanity check: make sure we've got a working toolkit
  if (!image_get_toolkit()) {
    drupal_set_message(t('Make sure you have a working image toolkit installed and enabled, for more information see: !settings', array('!settings' => l(t('the settings page'), 'admin/config'))), 'error');
    return FALSE;
  }
  return TRUE;
}

/**
 * Helper function to return the defined sizes (or proper defaults).
 */
function _mm_media_image_get_sizes() {
// Alternate method, requires minor code changes during presentation
//   $entity_info = entity_get_info('file');
//   $view_modes = $entity_info['view modes'];
//   $sizes = array();
//   foreach ($view_modes as $view_mode => $view_mode_info) {
//     // Don't present the user with an option to choose a view mode in which the
//     // file is hidden.
//     $extra_fields = field_extra_fields_get_display('file', 'image', $view_mode);
//     if ($extra_fields['file']['visible']) {
//       $sizes[$view_mode] = array('label' => $view_mode_info['label']);
//     }
//   }

  $sizes = array();
  foreach (image_styles() as $name => $style) {
    $sizes[$name] = array('label' => $name);
    foreach ($style['effects'] as $effect) {
      if (!empty($effect['data']['width'])) {
        $sizes[$name]['width'] = $effect['data']['width'];
        $sizes[$name]['height'] = $effect['data']['height'];
      }
    }
  }

  return $sizes;
}

/******************** Gallery functions start here *********************/

/**
 * Implements hook_node_access().
 */
function mm_media_gallery_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;
  if ($type != 'gallery') return NODE_ACCESS_IGNORE;
  if (!module_exists('thickbox')) return NODE_ACCESS_DENY;
}

function mm_media_form_gallery_node_form_alter(&$form) {
  $form['body'][$form['body']['#language']][0]['#rows'] = 5;
}

/**
 * Implements hook_form().
 */
function mm_media_gallery_form(&$node, &$form_state) {
  drupal_set_title(!empty($node->nid) ? t('Edit a gallery') : t('Create a gallery'));
  $defaults = _mm_media_gallery_settings();
  $form = array();

  $type = node_type_get_type($node);
  $form['title'] = array('#type' => 'textfield', '#title' => check_plain($type->title_label), '#required' => TRUE, '#default_value' => $node->title, '#weight' => -5);

  mm_parse_args($mmtids);
  $pop_start = implode('/', $mmtids);
  $mmlist = array();
  $use_node = !empty($node->nid) || isset($form_state['values']);
  if ($use_node) {
    _mm_media_gallery_convert_values($node);
    foreach ($node->img_mmtids as $row) {
      if ($row['nid']) {
        $mmtids = mm_content_get_by_nid($row['nid']);
        if (in_array($row['mmtid'], $mmtids)) {
          $tree = mm_content_get($row['mmtid']);
        }
        else {
          $tree = isset($mmtids[0]) ? mm_content_get($mmtids[0]) : array();
        }

        $filename = file_load($row['fid'])->filename;
        if (!empty($filename)) {
          if ($tree) {
            $mmlist[$tree->mmtid . '/' . $row['nid'] . '/' . $row['fid']] = $filename;
          }
          else {
            $mmlist['0/' . $row['nid'] . '/' . $row['fid']] = $filename;
          }
        }
      }
      else {
        $tree = mm_content_get($row['mmtid']);
        if ($tree) {
          $mmlist[$tree->mmtid] = t('!name (all)', array('!name' => mm_content_get_name($tree)));
        }
      }
    }
  }

  $form['where'] = array(
    '#type' => 'fieldset',
    '#title' => t('What to show in the gallery'),
    '#collapsible' => FALSE
  );
  $form['where']['img_mmtids'] = array(
    '#title' => t('Images:'),
    '#type' => 'mm_catlist',
    '#required' => TRUE,
    '#default_value' => $mmlist,
    '#mm_list_popup_start' => $pop_start,
    '#mm_list_selectable' => MM_PERMS_READ,
    '#mm_list_browser' => 'mm_media_assist/load_gallery',
    '#description' => t('Add one or more images. If you use %sa, every image on that page will appear in the gallery, including any that are added to the page in the future.', array('%sa' => t('Select All')))
  );

  $mode = $use_node ? $node->mm_gallery['mode'] : $defaults->mode;
  $derivatives = _mm_media_gallery_derivatives();
  $derivatives_none = array_merge(array('' => t('(none)')), $derivatives);
  $thumb_deriv = $use_node ? $node->mm_gallery['thumb_deriv'] : $defaults->thumb_deriv;
  $final_deriv = $use_node ? $node->mm_gallery['final_deriv'] : $defaults->final_deriv;
  $per_page = _mm_media_gallery_per_page();

  $form['appearance'] = array(
    '#type' => 'fieldset',
    '#title' => t('Appearance'),
    '#attributes' => array('class' => array('node-gallery-appearance')),
    '#collapsible' => FALSE
  );
  $form['appearance']['mode'] = array(
    '#type' => 'radios',
    '#default_value' => $mode,
    '#attributes' => array('class' => array('node-gallery-mode')),
    '#options' => _mm_media_gallery_mode_types()
  );
  $form['appearance']['grid_opts'] = array(
    '#type' => 'fieldset',
    '#title' => t('Options'),
    '#attributes' => array('style' => 'display: none', 'id' => 'grid_opts'),
    '#collapsible' => FALSE
  );
  $form['appearance']['grid_opts']['grid_cols'] = array(
    '#type' => 'select',
    '#title' => t('Columns of thumbnails per page'),
    '#options' => $per_page->cols,
    '#default_value' => $use_node ? $node->mm_gallery['grid_cols'] : $defaults->grid_cols,
  );
  $form['appearance']['grid_opts']['grid_rows'] = array(
    '#type' => 'select',
    '#title' => t('Rows of thumbnails per page'),
    '#options' => $per_page->rows,
    '#default_value' => $use_node ? $node->mm_gallery['grid_rows'] : $defaults->grid_rows,
  );
  $form['appearance']['grid_opts']['grid_thumb_deriv'] = array(
    '#type' => 'select',
    '#title' => t('Thumbnail size'),
    '#options' => $derivatives,
    '#default_value' => $thumb_deriv,
    '#description' => t('This version of the image is displayed initially.')
  );
  $form['appearance']['grid_opts']['grid_final_deriv'] = array(
    '#type' => 'select',
    '#title' => t('Larger size to show after a click'),
    '#options' => $derivatives_none,
    '#default_value' => $final_deriv,
    '#description' => t('When the user clicks on the thumbnail, this larger version opens. If the image is too large to fit in the browser window, it will be automatically scaled-down to fit.')
  );

  $form['appearance']['flow_opts'] = array(
    '#type' => 'fieldset',
    '#title' => t('Options'),
    '#attributes' => array('style' => 'display: none', 'id' => 'flow_opts'),
    '#collapsible' => FALSE
  );
  $form['appearance']['flow_opts']['flow_per_page'] = array(
    '#type' => 'select',
    '#title' => t('Thumbnails per page'),
    '#options' => $per_page->flow,
    '#default_value' => $use_node ? $node->mm_gallery['flow_per_page'] : $defaults->flow_per_page,
  );
  $form['appearance']['flow_opts']['flow_thumb_deriv'] = $form['appearance']['grid_opts']['grid_thumb_deriv'];
  $form['appearance']['flow_opts']['flow_final_deriv'] = $form['appearance']['grid_opts']['grid_final_deriv'];

  $form['appearance']['link_opts'] = array(
    '#type' => 'fieldset',
    '#title' => t('Options'),
    '#attributes' => array('style' => 'display: none', 'id' => 'link_opts'),
    '#collapsible' => FALSE
  );
  $form['appearance']['link_opts']['link_text'] = array(
    '#type' => 'textfield',
    '#title' => '<span class="form-required" title="' . t('This field is required.') . '">*</span> ' . t('Text of link'),
    '#default_value' => t('View the Image Gallery'),
    '#size' => 40,
    '#maxlength' => 255,
    '#description' => t('The user will click on this text to open the gallery popup.')
  );
  $form['appearance']['link_opts']['link_final_deriv'] = array(
    '#type' => 'select',
    '#title' => t('Size of image to show in the popup'),
    '#options' => $derivatives,
    '#default_value' => $final_deriv,
    '#description' => t('If the image is too large to fit in the browser window, it will be automatically scaled-down to fit.')
  );
  $form['appearance']['single_opts'] = array(
    '#type' => 'fieldset',
    '#title' => t('Options'),
    '#attributes' => array('style' => 'display: none', 'id' => 'single_opts'),
    '#collapsible' => FALSE
  );
  $form['appearance']['single_opts']['single_start'] = array(
    '#type' => 'radios',
    '#title' => t('Initial image to display'),
    '#options' => $per_page->start,
    '#default_value' => $use_node ? $node->mm_gallery['single_start'] : $defaults->single_start,
  );
  $form['appearance']['single_opts']['single_thumb_deriv'] = $form['appearance']['grid_opts']['grid_thumb_deriv'];
  $form['appearance']['single_opts']['single_final_deriv'] = $form['appearance']['grid_opts']['grid_final_deriv'];
  $form['appearance']['1rand_opts'] = array(
    '#type' => 'fieldset',
    '#title' => t('Options'),
    '#attributes' => array('style' => 'display: none', 'id' => '1rand_opts'),
    '#collapsible' => FALSE
  );
  $form['appearance']['1rand_opts']['1rand_thumb_deriv'] = array(
    '#type' => 'select',
    '#title' => t('Image size'),
    '#options' => $derivatives,
    '#default_value' => $thumb_deriv,
    '#description' => t('The version of the image that is displayed.')
  );

  $form['appearance']['show_title'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show image titles'),
    '#default_value' => $use_node ? $node->mm_gallery['show_title'] : $defaults->show_title,
  );
  $form['appearance']['show_caption'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show image captions'),
    '#default_value' => $use_node ? $node->mm_gallery['show_caption'] : $defaults->show_caption,
  );
  $form['appearance']['show_comment'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show a %com link under each image', array('%com' => t('comments'))),
    '#default_value' => $use_node ? $node->mm_gallery['show_comment'] : $defaults->show_comment,
  );
  drupal_add_js(<<<EOJ
(function (\$) {
  Drupal.behaviors.MMNodeGallery = {
    attach: function (context, settings) {
      \$('.node-gallery-appearance', context).once('node-gallery-appearance', function () {
          var outerDiv = this;
          \$('.node-gallery-mode', this).click(function () {
            if (this.checked) {
              \$('#grid_opts,#flow_opts,#link_opts,#single_opts,#1rand_opts,#list_opts', outerDiv).hide();
              \$('#' + this.value + '_opts', outerDiv).show();
            }
          });
          \$('.node-gallery-mode:input:checked', this).click();
        });
    }
  };
})(jQuery);
EOJ
  , array('type' => 'inline', 'scope' => 'footer'));

  return $form;
}

function mm_media_gallery_validate(&$node) {
  if ($node->mode == 'link' && empty($node->link_text)) {
    form_set_error('link_text', t('Missing required field'));
    return;
  }
}

function _mm_media_gallery_derivatives() {
  $derivatives = array();
  foreach (_mm_media_image_get_sizes() as $mode => $size) {
    $derivatives[$mode] = $size['label'];
    if (!empty($size['width'])) {
      $derivatives[$mode] .= ' (' . $size['width'] . ' x ' . $size['height'] . ')';
    }
  }

  return $derivatives;
}

function _mm_media_gallery_per_page() {
  return (object)array(
    'cols' => drupal_map_assoc(range(1, 20)),
    'rows' => drupal_map_assoc(range(1, 50)),
    'flow' => array(0 => t('(no limit)'), 1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5, 6 => 6, 7 => 7, 8 => 8, 9 => 9, 10 => 10, 15 => 15, 20 => 20, 25 => 25, 30 => 30, 40 => 40, 50 => 50, 75 => 75, 100 => 100, 150 => 150, 200 => 200),
    'start' => array('first' => t('First (most recently changed)'),
                     'last' => t('Last (oldest)'),
                     'random' => t('Random')),
  );
}

function _mm_media_gallery_settings() {
  return (object)array(
    'mode' => variable_get('mm_media_gallery_mode', 'flow'),
    'link_text' => '',
    'thumb_deriv' => variable_get('mm_media_gallery_thumb_deriv', 'thumbnail'),
    'final_deriv' => variable_get('mm_media_gallery_final_deriv', 'standard'),
    'grid_cols' => variable_get('mm_media_gallery_grid_cols', 5),
    'grid_rows' => variable_get('mm_media_gallery_grid_rows', 5),
    'flow_per_page' => variable_get('mm_media_gallery_flow_per_page', 20),
    'single_start' => variable_get('mm_media_gallery_single_start', 'first'),
    'show_title' => variable_get('mm_media_gallery_show_title', TRUE),
    'show_caption' => variable_get('mm_media_gallery_show_caption', TRUE),
    'show_comment' => variable_get('mm_media_gallery_show_comment', TRUE),
  );
}

function _mm_media_gallery_mode_types() {
  return array(
    'grid' => t('Show a grid of thumbnails'),
    'link' => t('Show a link that opens a popup window'),
    'single' => t('Show one image that opens a popup window when clicked'),
    '1rand' => t('Show a single, random image that is not clickable'),
    'flow' => t('Show the thumbnails one after another'),
  );
}

/**
 * Implements hook_mm_config_alter().
 *
 * This hook is called by MM when the settings page is being drawn.
 */
function mm_media_gallery_mm_config_alter(&$form) {
  if (user_access('administer content types')) {
    $defaults = _mm_media_gallery_settings();
    $derivatives = _mm_media_gallery_derivatives();
    $per_page = _mm_media_gallery_per_page();
    $form['gallery'] = array(
      '#type' => 'fieldset',
      '#title' => t('Gallery Defaults'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE
    );
    $form['gallery']['mm_media_gallery_mode'] = array(
      '#type' => 'radios',
      '#title' => t('Mode'),
      '#default_value' => $defaults->mode,
      '#options' => _mm_media_gallery_mode_types()
    );
    if ($derivatives) {
      $form['gallery']['mm_media_gallery_thumb_deriv'] = array(
        '#type' => 'select',
        '#title' => t('Thumbnail size'),
        '#options' => $derivatives,
        '#default_value' => $defaults->thumb_deriv,
        '#description' => t('This version of the image is displayed initially in "grid", "one after another", and "one at a time" modes. In "one random" mode, it is the only version displayed.')
      );
      $form['gallery']['mm_media_gallery_final_deriv'] = array(
        '#type' => 'select',
        '#title' => t('Larger size'),
        '#options' => $derivatives,
        '#default_value' => $defaults->final_deriv,
        '#description' => t('When the user clicks on the smaller version, this larger version opens (in "grid" and "one after another" modes.) In "link" mode, this size is always displayed. If the image is too large to fit in the browser window, it will be automatically scaled-down to fit.')
      );
    }
    else {
      $form['gallery']['mm_media_gallery_thumb_deriv'] = array(
        '#type' => 'value',
        '#value' => $defaults->thumb_deriv,
      );
      $form['gallery']['mm_media_gallery_final_deriv'] = array(
        '#type' => 'value',
        '#value' => $defaults->final_deriv,
      );
    }
    $form['gallery']['mm_media_gallery_show_title'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show image titles'),
      '#default_value' => $defaults->show_title,
    );
    $form['gallery']['mm_media_gallery_show_caption'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show image captions'),
      '#default_value' => $defaults->show_caption,
    );
    $form['gallery']['mm_media_gallery_show_comment'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show a comments link under each image'),
      '#default_value' => $defaults->show_comment,
    );
    $form['gallery']['grid_opts'] = array(
      '#type' => 'fieldset',
      '#title' => t('"grid" mode'),
      '#collapsible' => FALSE
    );
    $form['gallery']['grid_opts']['mm_media_gallery_grid_cols'] = array(
      '#type' => 'select',
      '#title' => t('Columns of thumbnails per page'),
      '#options' => $per_page->cols,
      '#default_value' => $defaults->grid_cols,
    );
    $form['gallery']['grid_opts']['mm_media_gallery_grid_rows'] = array(
      '#type' => 'select',
      '#title' => t('Rows of thumbnails per page'),
      '#options' => $per_page->rows,
      '#default_value' => $defaults->grid_rows,
    );
    $form['gallery']['flow_opts'] = array(
      '#type' => 'fieldset',
      '#title' => t('"one after another" mode'),
      '#collapsible' => FALSE
    );
    $form['gallery']['flow_opts']['mm_media_gallery_flow_per_page'] = array(
      '#type' => 'select',
      '#title' => t('Thumbnails per page'),
      '#options' => $per_page->flow,
      '#default_value' => $defaults->flow_per_page,
    );
    $form['gallery']['single_opts'] = array(
      '#type' => 'fieldset',
      '#title' => t('"one at a time" mode'),
      '#collapsible' => FALSE
    );
    $form['gallery']['single_opts']['mm_media_gallery_single_start'] = array(
      '#type' => 'radios',
      '#title' => t('Initial image to display'),
      '#options' => $per_page->start,
      '#default_value' => $defaults->single_start,
    );
  }
}

/**
 * Implements hook_insert().
 */
function mm_media_gallery_insert($node) {
  foreach ($node->img_mmtids as $mmtid) {
    $arr = array(
      'nid' => $node->nid,
      'vid' => $node->vid,
      'img_mmtid' => $mmtid['mmtid'],
      'img_nid' => $mmtid['nid'],
      'img_fid' => $mmtid['fid'],
    );
    drupal_write_record('mm_media_gallery_imgs', $arr);
  }
  $arr = $node->mm_gallery;
  $arr['nid'] = $node->nid;
  $arr['vid'] = $node->vid;
  // Set default field values, to avoid database errors.
  foreach (array_keys((array)_mm_media_gallery_settings()) as $key) {
    if (!isset($arr[$key])) {
      $arr[$key] = '';
    }
  }
  drupal_write_record('mm_media_gallery', $arr);
}

/**
 * Implements hook_update().
 */
function mm_media_gallery_update($node) {
  // if this is not a new node or we're adding a new revision
  if (!$node->revision) {
    db_delete('mm_media_gallery_imgs')
      ->condition('vid', $node->vid)
      ->execute();
    db_delete('mm_media_gallery')
      ->condition('vid', $node->vid)
      ->execute();
  }
  mm_media_gallery_insert($node);
}

/**
 * Implements hook_node_revision_delete().
 */
function mm_media_gallery_node_revision_delete($node) {
  db_delete('mm_media_gallery_imgs')
    ->condition('vid', $node->vid)
    ->execute();
  db_delete('mm_media_gallery')
    ->condition('vid', $node->vid)
    ->execute();
}

/**
 * Implements hook_node_presave().
 */
function mm_media_node_presave($node) {
  // Note: $node is already a reference
  if ($node->type == 'gallery') {
    _mm_media_gallery_convert_values($node);
  }
}

// Convert the img_mmtids field submitted by the form into an array, and add
// two other fields describing which derivatives to use
function _mm_media_gallery_convert_values($node) {
  // Note: $node is already a reference
  $out = array();
  foreach ($node->img_mmtids as $img_mmtid => $name) {
    if ($img_mmtid == 'mmtid') return;   // already in correct format
    $arr = explode('/', $img_mmtid);
    $out[] = array('mmtid' => $arr[0], 'nid' => isset($arr[1]) ? $arr[1] : '', 'fid' => isset($arr[2]) ? $arr[2] : '');
  }
  $node->img_mmtids = $out;

  // Move data into an mm_gallery array, to avoid possible name conflicts with
  // other modules.
  $defaults = _mm_media_gallery_settings();
  foreach (array_keys((array)$defaults) as $key) {
    if (substr($key, -5) != 'deriv') {
      $node->mm_gallery[$key] = isset($node->$key) ? $node->$key : $defaults->$key;
      unset($node->$key);
    }
  }

  $which = $node->mm_gallery['mode'] . '_final_deriv';
  $node->mm_gallery['final_deriv'] = isset($node->$which) ? $node->$which : '';
  if ($node->mm_gallery['mode'] != 'link') {
    $which = $node->mm_gallery['mode'] . '_thumb_deriv';
    $node->mm_gallery['thumb_deriv'] = isset($node->$which) ? $node->$which : '';
  }
}

/**
 * Implements hook_delete().
 */
function mm_media_gallery_delete($node) {
  db_delete('mm_media_gallery_imgs')
    ->condition(db_or()
      ->condition('nid', $node->nid)
      ->condition('img_nid', $node->nid)
    )
    ->execute();
  db_delete('mm_media_gallery')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_file_delete().
 */
function mm_media_file_delete($file) {
  db_delete('mm_media_gallery_imgs')
    ->condition('img_fid', $file->fid)
    ->execute();
}

/**
 * Implements hook_mm_delete().
 */
function mm_media_mm_delete($mmtids) {
  db_delete('mm_media_gallery_imgs')
    ->condition('img_mmtid', $mmtids)
    ->condition('img_nid', 0)
    ->condition('img_fid', 0)
    ->execute();
  db_update('mm_media_gallery_imgs')
    ->fields(array('img_mmtid' => 0))
    ->condition('img_mmtid', $mmtids)
    ->execute();
}

/**
 * Implements hook_load().
 */
function mm_media_gallery_load($nodes) {
  $vids = array();
  foreach ($nodes as $node) {
    $vids[] = $node->vid;
    $node->img_mmtids = array();
  }

  $main = db_query('SELECT * FROM {mm_media_gallery} WHERE vid IN (:vids)', array(':vids' => $vids), array('fetch' => PDO::FETCH_ASSOC));
  foreach ($main as $additions) {
    $nid = $additions['nid'];
    unset($additions['nid']);
    unset($additions['vid']);
    $nodes[$nid]->mm_gallery = $additions;
  }

  $images = db_query('SELECT nid, img_mmtid, img_nid, img_fid FROM {mm_media_gallery_imgs} WHERE vid IN (:vids) ORDER BY id', array(':vids' => $vids));
  foreach ($images as $image) {
    $nodes[$image->nid]->img_mmtids[] = array('mmtid' => $image->img_mmtid, 'nid' => $image->img_nid, 'fid' => $image->img_fid);
  }
}

/**
 * Implements hook_view().
 */
function mm_media_gallery_view($node, $teaser = FALSE, $page = FALSE) {
  // Note: $node is already a reference
  if (module_exists('thickbox') && count($node->img_mmtids)) {
    $mmtids = $nodes = $fids = array();
    _mm_media_gallery_convert_values($node);
    foreach ($node->img_mmtids as $row) {
      if ($row['nid']) {
        if (mm_content_user_can_node($row['nid'], MM_PERMS_READ)) {
          $nodes[] = $row['nid'];
          $fids[] = $row['fid'];
        }
      }
      elseif (mm_content_user_can($row['mmtid'], MM_PERMS_READ)) {
        $mmtids[] = $row['mmtid'];
      }
    }

    if (!count($mmtids) && !count($nodes)) {
      $node->content['gallery'] = array(
        '#markup' => t('Either this gallery is empty, or you do not have permission to read any of its contents.'),
        '#weight' => 1,
      );
      return $node;
    }

    // This is loosely based on mm_content_get_accessible_nodes_by_mmtid_query(),
    // but has to be even more complicated to account for nodes.
    // **** ONLY IMAGES ARE SUPPORTED (FOR NOW) ****
    for ($i = 0; $i < count($mmtids); $i++)
      if ($mmtids[$i] < 0) {
        array_splice($mmtids, $i, 1);
        break;
      }

    if (count($mmtids)) {
      $mmtid_node_select = db_select('mm_node2tree', 't');

      $mmtid_node_select->fields('n', array('nid', 'type'));
      $mmtid_node_select->addField('m', 'fid');
      $mmtid_node_select->addField('n', 'changed', 'created');
      $mmtid_node_select->addExpression('n.sticky AND (n.uid = 1 OR n.uid = tr.uid OR '.
            'COUNT(v.uid = n.uid OR g.vgid = 0 AND g.uid = n.uid))', 'stuck');
      $mmtid_node_select->addField('r', 'weight');

      $mmtid_node_select->join('node', 'n', 'n.nid = t.nid');
      $mmtid_node_select->join('mm_tree', 'tr', 'tr.mmtid = t.mmtid');
      $mmtid_node_select->leftJoin('mm_node_reorder', 'r', 'r.mmtid = t.mmtid AND r.nid = n.nid');
      $mmtid_node_select->leftJoin('mm_tree_access', 'a', "a.mode = '" . MM_PERMS_WRITE . "' AND a.mmtid = t.mmtid");
      $mmtid_node_select->leftJoin('mm_group', 'g', 'a.gid = g.gid');
      $mmtid_node_select->leftJoin('mm_virtual_group', 'v', 'g.vgid = v.vgid AND (v.uid = n.uid OR g.vgid = 0 AND g.uid = n.uid)');
      $mmtid_node_select->join('file_usage', 'u', 'u.id = t.nid');
      $mmtid_node_select->join('file_managed', 'm', 'm.fid = u.fid');

      $mmtid_node_select->condition('u.type', 'node');
      $mmtid_node_select->condition('u.count', 0, '>');
      $mmtid_node_select->where('LEFT(m.filemime, 6) = :image', array(':image' => 'image/'));
      $mmtid_node_select->condition('t.mmtid', $mmtids);
      $mmtid_node_select->condition('n.status', 1);

      $mmtid_node_select->groupBy('n.nid');
    }

    if (count($nodes)) {
      $node_select = db_select('node', 'n');

      $node_select->fields('n', array('nid', 'type'));
      $node_select->addField('m', 'fid');
      $node_select->addField('n', 'changed', 'created');
      $node_select->addField('n', 'sticky', 'stuck');
      $node_select->addExpression('0', 'weight');

      $node_select->join('file_usage', 'u', 'u.id = n.nid');
      $node_select->join('file_managed', 'm', 'm.fid = u.fid');

      $node_select->condition('u.type', 'node');
      $node_select->condition('u.count', 0, '>');
      $node_select->where('LEFT(m.filemime, 6) = :image', array(':image' => 'image/'));
      $node_select->condition('m.fid', $fids);
      $node_select->condition('n.nid', $nodes);
      $node_select->condition('n.status', 1);

      if (count($mmtids)) {
        $node_select->union($mmtid_node_select, 'UNION ALL');
      }
    }
    else {
      $node_select = $mmtid_node_select;
    }

    $inner_select = db_select($node_select, 'n');
    $inner_select->leftJoin('mm_node_schedule', 's', 's.nid = n.nid');
    $inner_select->where('IFNULL((s.publish_on = 0 OR s.publish_on <= :now1) AND (s.unpublish_on = 0 OR :now2 < s.unpublish_on), 1)', array(':now1' => REQUEST_TIME, ':now2' => REQUEST_TIME));
    $inner_select->fields('n', array('nid', 'fid', 'stuck', 'weight', 'created'));

    $select = db_select($inner_select, 't');
    $select->fields('t', array('nid', 'fid'));
    $select
      ->groupBy('t.fid')
      ->orderBy('t.stuck', 'DESC')
      ->orderBy('t.weight', 'ASC')
      ->orderBy('t.created', 'DESC');

    $out = array('#weight' => 1);
    $per_page = 0;
    switch ($node->mm_gallery['mode']) {
      case 'flow':
        $per_page = $node->mm_gallery['flow_per_page'];
        $out['#prefix'] = '<div class="mm-gallery-flow">';
        $out['#suffix'] = '</div><div class="mm-gallery-img-clear"></div>';
        break;

      case 'grid':
        $per_page = $node->mm_gallery['grid_rows'] * $node->mm_gallery['grid_cols'];
        $out['images']['#prefix'] = '<table class="mm-gallery-table"><tbody>';
        $out['images']['#suffix'] = '</tbody></table>';
        break;

      case '1rand':
      case 'single':
        $single_total = $select->countQuery()->execute()->fetchField();
        $single_img = 0;
        if ($node->mm_gallery['mode'] == '1rand') {
          $rand_img = rand(0, $single_total - 1);
          $select = db_select($inner_select, 't')
            ->fields('t')
            ->groupBy('t.nid')
            ->orderBy('NULL')
            ->range($rand_img, 1);
        }
        elseif ($node->mm_gallery['single_start'] == 'random') {
          $single_img = rand(0, $single_total - 1);
        }
        elseif ($node->mm_gallery['single_start'] == 'last') {
          $single_img = $single_total - 1;
        }
        $out['#prefix'] = '<div class="mm-gallery-single">';
        $out['#suffix'] = '</div>';
        break;
    }

    if ($per_page) {
      $pager_elem = PagerDefault::$maxElement++;
      $out['pager'] = array(
        '#theme' => 'pager',
        '#tags' => NULL,
        '#element' => $pager_elem,
        '#weight' => 99,
      );
      $result = $select
        ->extend('PagerDefault')
        ->element($pager_elem)
        ->limit($per_page)
        ->execute();
    }
    else {
      $result = $select->execute();
    }

    $fids = array();
    foreach ($result as $n) {
      $fids[$n->fid] = $n->nid;
    }
    $all_nodes = node_load_multiple(array_values($fids));
    $all_files = file_load_multiple(array_keys($fids));

    $i = 0;
    foreach ($fids as $fid => $nid) {
      $file = $all_files[$fid];
      $file_node = $all_nodes[$nid];
      // **** ONLY IMAGES ARE SUPPORTED (FOR NOW) ****
      $final_deriv = $node->mm_gallery['final_deriv'];  // $file_node->isimage ? $node->mm_gallery['final_deriv'] : 'original';
      $thumb_deriv = $node->mm_gallery['thumb_deriv'];  // $file_node->isimage ? $node->mm_gallery['thumb_deriv'] : 'original';

      switch ($node->mm_gallery['mode']) {
        case '1rand':
        case 'single':
          if ($i == $single_img) {
            $out['images'][] = _mm_media_gallery_image($file, $file_node, $node, $thumb_deriv, $final_deriv, TRUE);
          }
          elseif (!empty($final_deriv)) {
            $out['hidden'][] = _mm_media_gallery_image($file, $file_node, $node, $thumb_deriv, $final_deriv, FALSE, '');
          }
          $i++;
          break;

        case 'link':
          if (!empty($final_deriv)) {
            $section = $i >= 1 ? 'hidden' : 'images';
            $out[$section][] = _mm_media_gallery_image($file, $file_node, $node, $thumb_deriv, $final_deriv, FALSE, $i ? '' : $node->mm_gallery['link_text']);
            $i++;
          }
          break;

        case 'flow':
          if (!empty($thumb_deriv)) {
            $thumb = _mm_media_gallery_image($file, $file_node, $node, $thumb_deriv, $final_deriv);
            $out['images'][] = array('#prefix' => '<div class="mm-gallery-img mm-gallery-img-' . $thumb_deriv . '">', $thumb, '#suffix' => '</div>');
          }
          break;

        case 'grid':
          if (!empty($thumb_deriv)) {
            $img = array('#prefix' => '', '#suffix' => '</td>', _mm_media_gallery_image($file, $file_node, $node, $thumb_deriv, $final_deriv));
            if ($i % $node->mm_gallery['grid_cols'] == 0) $img['#prefix'] = '<tr>';
            $img['#prefix'] .= '<td class="mm-gallery-img mm-gallery-img-' . $thumb_deriv . '">';
            if ($i % $node->mm_gallery['grid_cols'] == $node->mm_gallery['grid_cols'] - 1) $img['#suffix'] .= '</tr>';
            $out['images'][] = $img;
            $i++;
          }
          break;
      }
    }

    if ($node->mm_gallery['mode'] == 'grid' && ($i % $node->mm_gallery['grid_cols'])) {
      $suffix = $i < $node->mm_gallery['grid_cols'] ? '</tr>' : '<td colspan="' . ($node->mm_gallery['grid_cols'] - ($i % $node->mm_gallery['grid_cols'])) . '" class="mm-gallery-empty"></td></tr>';
      $out[] = array('#markup' => $suffix);
    }

    if (!empty($out['hidden'])) {
      $out['hidden']['#prefix'] = '<div style="display: none">';
      $out['hidden']['#suffix'] = '</div>';
    }

    $out['#attached']['css'][] = drupal_get_path('module', 'mm_media') . '/css/mm_media.css';
    $node->content['gallery'] = $out;
  }
  return $node;
}

function _mm_media_gallery_image($file, $file_node, $node, $thumb_deriv, $final_deriv, $hide_thumb_comment = FALSE, $link = NULL) {
  $comments = array();
  if (!$hide_thumb_comment && $file_node->comment > 0 && $node->mm_gallery['show_comment']) {
    $comments = array(
      '#type' => 'link',
      '#prefix' => '<div class="links">',
      '#suffix' => '</div>',
      '#title' => $file_node->comment_count ? format_plural($file_node->comment_count, t('1 comment'), t('@count comments')) : t('No comments yet'),
      '#href' => 'node/' . $file_node->nid,
      '#options' => array('fragment' => 'comments'),
    );
  }
  $file_node_title = check_plain(mm_ui_hide_node_title($file_node->title));

  $small_img = array(
    '#theme' => 'image_style',
    '#style_name' => $thumb_deriv,
    '#path' => $file->uri,
    '#alt' => $file_node_title,
  );

  $title = !empty($file_node_title) && $node->mm_gallery['show_title'] ? "<h2>$file_node_title</h2>" : '';
  $language = empty($file_node->language) ? LANGUAGE_NONE : $file_node->language;
  $caption = !empty($file_node->body[$language][0]) && $node->mm_gallery['show_caption'] ? '<div class="mm-gallery-caption">' . $file_node->body[$language][0]['value'] . '</div>' : '';

  if (!empty($final_deriv)) {
    $img_title = t('!size; last edited on !date', array('!date' => format_date($file_node->changed), '!size' => format_size($file->filesize)));
    $small_img['#title'] = check_plain($img_title);

    $temp_comments = $comments;
    $link_title = $title . $caption . drupal_render($temp_comments);
    $options = array('attributes' => array('class' => array('thickbox'), 'rel' => 'node' . $node->nid, 'title' => $link_title), 'html' => TRUE);

    // The l() function calls strip_tags() on the title, so it can't be used here
    $thumb = array(
      '#prefix' => '<a href="' . (url(image_style_url($final_deriv, $file->uri), $options)) . '"' . drupal_attributes($options['attributes']) . '>',
      isset($link) ? array('#markup' => $link) : $small_img,
      '#suffix' => '</a>',
    );
  }
  else {
    $small_img['#title'] = $file_node_title;
    $thumb = $small_img;
  }

  if (isset($link)) return $thumb;
  return array(array('#markup' => $title), $thumb, array('#markup' => $caption), $comments);
}
