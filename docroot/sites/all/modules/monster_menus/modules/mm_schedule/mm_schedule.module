<?php

/**
 * @file
 * Schedule/Calendar functions for Monster Menus
 */

define('MM_SCHEDULE_USER_CALENDAR_DEFAULT_NAME', '.Calendar');
define('MM_SCHEDULE_USER_CALENDAR_ALIAS', 'mycalendar');

require(dirname(__FILE__) . '/mm_schedule.views_default.inc');

/**
 * Implements hook_ctools_plugin_api().
 */
function mm_schedule_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "field_group" && $api == "field_group") {
    return array("version" => "1");
  }
}

/**
 * Implements hook_views_api().
 */
function mm_schedule_views_api() {
  return array(
    'api' => '3.0',
    'version' => '3.0',
    'path' => drupal_get_path('module', 'mm_schedule') . '/views',
  );
}

/**
 * Implements hook_node_info().
 */
function mm_schedule_node_info() {
  $items = array(
    'mm_calendar' => array(
      'name' => t('Event calendar'),
      'base' => 'mm_schedule_mm_calendar',
      'description' => t('Calendars display events in a date-based grid'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
    ),
    'mm_event' => array(
      'name' => t('Event'),
      'base' => 'node_content',
      'description' => t('A date/time-based event, to appear on a calendar'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
    ),
  );
  drupal_alter('node_info', $items);
  return $items;
}

/**
 * Implements hook_theme().
 */
function mm_schedule_theme($existing, $type, $theme, $path) {
  $themes = array(
    'mm_schedule_add_link' => array(
      'file' => 'theme/mm_schedule_theme.inc',
      'variables' => array('start_date' => NULL, 'increment' => NULL, 'param' => NULL)),
    'mm_schedule_calendar_style_list' => array(
      'file' => 'theme/mm_schedule_theme.inc',
      'variables' => array('view' => NULL, 'options' => NULL)),
    'calendar_weekday' => array(
      'file' => 'theme/mm_schedule_theme.inc',
      'variables' => array('view' => NULL, 'date' => NULL)),
  );
  if (isset($existing['calendar_week_overlap'])) {
    $themes['calendar_week_overlap__mm_calendar__week_grid'] = array(
      'template' => 'calendar-week-overlap--mm-calendar--week-grid',
      'path' => $path . '/theme',
      'file' => 'mm_schedule_theme.inc',
      'preprocess functions' => array_merge($existing['calendar_week_overlap']['preprocess functions'], array('_mm_schedule_preprocess_calendar')),
    );
    $themes['calendar_day_overlap__mm_calendar__day_grid'] = array(
      'template' => 'calendar-week-overlap--mm-calendar--week-grid',   // Intentionally use the week template
      'path' => $path . '/theme',
      'file' => 'mm_schedule_theme.inc',
      'preprocess functions' => array('template_preprocess', '_mm_schedule_preprocess_day', 'template_preprocess_calendar_week_overlap', 'mm_schedule_preprocess_calendar_week_overlap', '_mm_schedule_preprocess_calendar'),   // Intentionally use the week preprocessor instead of day
    );
    $themes['date_views_pager__mm_calendar_export__upcoming'] = array(
      'template' => 'date-views-pager--mm_calendar-export--upcoming',
      'path' => $path . '/theme',
      'file' => 'mm_schedule_theme.inc',
      'preprocess functions' => array('template_preprocess', 'template_preprocess_date_views_pager', 'calendar_preprocess_date_views_pager', '_mm_schedule_preprocess_date_views_pager'),
    );
  }
  return $themes;
}

/**
 * Implements hook_theme_registry_alter().
 */
function mm_schedule_theme_registry_alter(&$theme_registry) {
  $me = drupal_get_path('module', 'mm_schedule');
  if (isset($theme_registry['date_nav_title'])) {
    // There's no better way to override a theme function without using a .tpl
    // file.
    $theme_registry['date_nav_title']['includes'][] = $me . '/theme/mm_schedule_theme.inc';
    $theme_registry['date_nav_title']['function'] = '_mm_schedule_date_nav_title';
  }
  if (isset($theme_registry['jcalendar_view'])) {
    // There's no better way to override a theme function without using a .tpl
    // file.
    $theme_registry['jcalendar_view']['includes'][] = $me . '/theme/mm_schedule_theme.inc';
    $theme_registry['jcalendar_view']['function'] = '_mm_schedule_jcalendar_view';
  }
  if (isset($theme_registry['calendar_datebox'])) {
    // Add a "+" link to year/month calendars
    $theme_registry['calendar_datebox']['path'] = $me . '/theme';
    $theme_registry['calendar_datebox']['preprocess functions'][] = '_mm_schedule_preprocess_calendar_datebox';
    $theme_registry['calendar_datebox']['includes'][] = $me . '/theme/mm_schedule_theme.inc';
  }
  if (isset($theme_registry['date_views_pager'])) {
    // Add custom links to the pager
    $theme_registry['date_views_pager']['preprocess functions'][] = '_mm_schedule_preprocess_date_views_pager';
    $theme_registry['date_views_pager']['includes'][] = $me . '/theme/mm_schedule_theme.inc';
  }
}

/**
 * Implements hook_menu().
 */
function mm_schedule_menu() {
  $items = array();
  $items['mm_schedule/add2mycalendar/mm/%mm_mmtid'] = array(
    'title' => 'Add All to My Calendar',
    'page callback' => '_mm_schedule_add_to_my_calendar',
    'page arguments' => array(2, 3),
    'access callback' => '_mm_schedule_add_all_to_my_calendar_access',
    'access arguments' => array(3),
  );
  $items['mm_schedule/add2mycalendar/node/%node'] = array(
    'title' => 'Add to My Calendar',
    'page callback' => '_mm_schedule_add_to_my_calendar',
    'page arguments' => array(2, 3),
    'access callback' => '_mm_schedule_add_node_to_my_calendar_access',
    'access arguments' => array(3),
  );
  $items['mm_schedule/del_event/%node/%node'] = array(
    'title' => 'Remove event from calendar',
    'page callback' => '_mm_schedule_remove_event_from_calendar',
    'page arguments' => array(2, 3),
    'access callback' => '_mm_schedule_remove_event_from_calendar_access',
    'access arguments' => array(2, 3),
  );
  return $items;
}

/**
 * Implements hook_mm_item_name().
 */
function mm_schedule_mm_item_name() {
  return array(
    MM_SCHEDULE_USER_CALENDAR_DEFAULT_NAME => t('[Calendar default]'),
  );
}

/**
 * Implements hook_mm_hidden_user_names().
 */
function mm_schedule_mm_hidden_user_names() {
  return array(MM_SCHEDULE_USER_CALENDAR_DEFAULT_NAME);
}

/**
* Implements hook_mm_config_alter().
*/
function mm_schedule_mm_config_alter(&$form) {
  $form['mm_schedule'] = array(
    '#type' => 'fieldset',
    '#title' => t('Calendars'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE
  );
  $types = array();
  foreach (node_type_get_types() as $type) {
    $types[$type->type] = $type->name;
  }
  $form['mm_schedule']['mm_schedule_handled_types'] = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#title' => t('Content types that are displayed in calendars'),
    '#options' => $types,
    '#default_value' => variable_get('mm_schedule_handled_types', array('mm_event')),
  );
}

/**
 * Implements hook_mm_node_info().
 */
function mm_schedule_mm_node_info() {
  // Set flags to prevent MM from rendering and allowing users to create or
  // reorder the content types that appear on calendars.
  $info = array();
  $types = variable_get('mm_schedule_handled_types', array('mm_event'));
  foreach ($types as $type) {
    $info[$type] = array(
      MM_NODE_INFO_NO_RENDER => TRUE,
      MM_NODE_INFO_ADD_HIDDEN => TRUE,
      MM_NODE_INFO_NO_REORDER => TRUE,
    );
  }
  return $info;
}

/**
 * Implements hook_mm_url_rewrite_outbound().
 */
function mm_schedule_mm_url_rewrite_outbound($mmtid, &$path, &$options, $original_path) {
  $args = explode('/', $path);
  if ($args[0] == '.mm_calendar') {
    if (empty($mmtid)) {
      // Normally, custom_url_rewrite_outbound() requires that the node
      // actually exist on the current page, but at the time it tests this the
      // URL is not yet correct.
      $mm = mm_parse_args($term_ids, $oarg_list, $new_mmtid);
      if (empty($mm)) return;
    }
    else {
      $new_mmtid = $mmtid;
    }

    $query = array();
    if (!empty($options['query'])) {
      $query = $options['query'];
      unset($query['mm_calendar']);
    }

    array_shift($args);  // Skip .mm_calendar.
    if ($args && preg_match('{^\d+(\+|$)}', $args[0])) {
      // Skip any node number.
      array_shift($args);
    }

    foreach ($args as $key => $value) {
      if (preg_match('{^[-0-9W]+$}', $value)) {
        array_splice($args, $key + 1);
        break;
      }
    }

    // Preserve old mode (grid or list)
    if (!empty($_GET['mm_calendar']) && preg_match('{^([a-z]+)(/|$)}', $_GET['mm_calendar'], $matches)) {
      array_unshift($args, $matches[1]);
    }

    if ($args) {
      $query['mm_calendar'] = join('/', $args);
    }
    $options['query'] = $query;
    $path = "mm/$new_mmtid";
    if (empty($mmtid)) {
      // MM won't do this if $mmtid is empty upon arrival.
      drupal_alter('url_outbound', $path, $options, $original_path);
    }
  }
  elseif (!empty($mmtid) && empty($options['query']) && !empty($_GET['mm_calendar'])) {
    mm_parse_args($mmtids, $oarg_list, $this_mmtid);
    if ($this_mmtid != $mmtid) {
      $options['query'] = array('destination' => "mm/$mmtid?mm_calendar=" . $_GET['mm_calendar']);
    }
  }
}

function mm_schedule_my_calendar_access() {
  global $user;
  return $user->uid > 0 && user_access('has personal calendar');
}

/**
 * Implements hook_permission().
 */
function mm_schedule_permission() {
  return array(
    'has personal calendar' => array(
      'title' => t('Create Personal Monster Menus Calendar'),
      'description' => t('Allows user to create a personal Monster Menus calendar'),
    ),
  );
}

/**
 * Implements hook_form().
 */
function mm_schedule_mm_calendar_form(&$node, &$form_state) {
  drupal_set_title(!empty($node->nid) ? t('Edit a calendar') : t('Create a calendar'));

  // Calendars added before a particular feature was implemented may not have
  // all fields pre-populated, so set some sensible defaults.
  $defaults = array(
    'field_default_display' => 'month',
    'field_default_view' => 'grid',
    'field_wd_increment' => 30,
    'field_wd_inc_maj' => 'hour',
    'field_upcoming_items' => 10,
  );
  $lang = empty($node->language) ? LANGUAGE_NONE : $node->language;
  foreach ($defaults as $name => $value) {
    if (isset($node->$name) && empty($node->{$name}[$lang][0]['value'])) {
      $node->{$name}[$lang][0]['value'] = $value;
    }
  }

  $type = node_type_get_type($node);
  return array('title' => array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => -5,
  ));
}

/**
 * Implements hook_view().
 */
function mm_schedule_mm_calendar_view($node, $view_mode, $langcode) {
  global $user;

  if ($view_mode == 'teaser') {
    $node->readmore = TRUE;
    return $node;
  }

  mm_parse_args($term_ids, $oarg_list, $this_tid);
  if (!isset($this_tid)) {
    if (isset($node->mm_calendar_mmtid)) $this_tid = $node->mm_calendar_mmtid;
    else {
      $with_node = mm_content_get_by_nid($node->nid);
      if (!count($with_node)) {
        return $node;
      }
      $this_tid = $with_node[0];
    }
  }

  // Default display mode (grid, list, ical, feed, upcoming)
  $display_mode = isset($node->field_default_view[LANGUAGE_NONE][0]['value']) ? $node->field_default_view[LANGUAGE_NONE][0]['value'] : 'grid';

  $is_rss = $view_mode == 'rss';
  if ($is_rss) $display_mode = 'feed';

  $args = array();
  $view_name = variable_get('mm_schedule_main_view', 'mm_calendar');
  if (!empty($_GET['mm_calendar'])) {
    $args = explode('/', $_GET['mm_calendar']);
    if (empty($args[0])) {
      $args = array();
    }
    else if (in_array($args[0], array('grid', 'list', 'ical', 'feed', 'upcoming'))) {
      // There is a specific display mode in the URL.
      $new_mode = array_shift($args);
      if (!$is_rss) {
        // If requested mode is iCal and default is Upcoming, only show upcoming
        // in iCal output.
        if ($new_mode == 'ical' && $display_mode == 'upcoming' && empty($args[0])) {
          $view_name = variable_get('mm_schedule_export_view', 'mm_calendar_export');
        }
        $display_mode = $new_mode;
      }
    }
  }

  if ($display_mode == 'feed' || $display_mode == 'upcoming') {
    $view_name = variable_get('mm_schedule_export_view', 'mm_calendar_export');
    if ($display_mode == 'feed') {
      $is_rss = TRUE;
    }
  }

  $view = views_get_view($view_name);
  if (!$view) return $node;

  if ($display_mode == 'upcoming') {
    $view->mm_granularity = 'day';
    $view->mm_first_month = 1;
    $args = array();
  }
  else {
    // Default granularity (month, day, week, etc.)
    $granularity = isset($node->field_default_display) ? $node->field_default_display[LANGUAGE_NONE][0]['value'] : 'month';
    if (!empty($args[0])) {
      $granularity = _mm_schedule_get_granularity($args);
    }
    $view->mm_granularity = $granularity;

    $view->mm_first_month = isset($node->field_first_month[LANGUAGE_NONE][0]['value']) ? $node->field_first_month[LANGUAGE_NONE][0]['value'] : 1;

    if (!$args || empty($args[0])) {
      if ($granularity === 'year') {
        $args[0] = date('Y');
        // If using default args and the current month is before the start of the
        // calendar year, show last year.
        if (date('n') < $view->mm_first_month) {
          $args[0]--;
        }
      }
      else if ($granularity === 'week') {
        $args[0] = date('Y') . '-W' . date_week(date('Y-m-d'));
      }
      else if ($granularity === 'day') {
        $args[0] = date('Y-m-d');
      }
      else {
        $args[0] = date('Y-m');
      }
    }

    $view->mm_major_increment = isset($node->field_wd_inc_maj[LANGUAGE_NONE][0]['value']) ? $node->field_wd_inc_maj[LANGUAGE_NONE][0]['value'] : 'hour';
  }

  $display_id = $display_mode == 'grid' || $display_mode == 'list' ? $granularity . '_' . $display_mode : $display_mode;

  $nids = array($node->nid);
  if (!empty($node->mycalendar)) {
    // Add calendar nodes that are "pushed" to this user
    $select = db_select('mm_group', 'g');
    $select->leftJoin('mm_virtual_group', 'v', 'v.vgid = g.vgid');
    $select->join('field_data_field_mm_groups', 'c', 'c.field_mm_groups_value = g.gid');
    $select->join('node', 'n', 'n.vid = c.revision_id');
    $result = $select->fields('n', array('nid'))
      ->distinct()
      ->condition(db_or()
        ->condition('v.uid', $user->uid)
        ->condition(db_and()
          ->condition('g.vgid', 0)
          ->condition('g.uid', $user->uid)
        )
      )
      ->execute();
    foreach ($result as $row) {
      if ($row->nid != $node->nid) {
        $nids[] = $row->nid;
      }
    }
  }

  $view->mm_came_from = '';
  if ($display_mode != 'ical') {
    $args0 = isset($args[0]) ? $args[0] : '';
    $view->mm_came_from = "$this_tid.$display_mode.$args0.$node->nid";
  }

  array_unshift($args, join('+', $nids));

  $view->mm_node =& $node;
  $view->mmtid = $this_tid;
  $view->mm_display_mode = $display_mode;
  if (isset($node->mm_calendar_mmtid)) {
    $view->mm_calendar_mmtid = $node->mm_calendar_mmtid;
  }

  if ($is_rss) {
    $view->set_display($display_id);
    $view->display_handler->set_option('title', $node->title);
  }

  $output = $view->preview($display_id, $args);
  if ($display_mode == 'ical') {
    drupal_add_http_header('Content-Disposition', 'attachment; filename="calendar.ics"');
  }
  if ($display_mode == 'ical' || $is_rss) {
    print $output;
    exit();
  }

  // We want to render the node in an unconventional order, so we have to
  // get the render array for the body separately.
  $field = field_info_field('body');
  $instance = field_info_instance('node', 'body', $node->type);
  $items = array();
  if (isset($node->body[$langcode])) {
    $items = &$node->body[$langcode];
  }
  else if (isset($node->body[LANGUAGE_NONE])) {
    $items = &$node->body[LANGUAGE_NONE];
  }
  $body = field_default_view('node', $node, $field, $instance, $langcode, $items, $view_mode);
  hide($items);
  $node->content['mm_calendar'] = array(
    '#weight' => 1,
    array(
      '#markup' => _mm_schedule_fix_popups($output, $view),
      '#weight' => 2,
    ),
  );
  if (isset($body['body'])) {
    $node->content['mm_calendar'][] = $body['body'];
  }
  return $node;
}

function _mm_schedule_fix_popups($output, $view) {
  drupal_alter('mm_schedule', $output, $view);

  if (!empty($view->mm_came_from)) {
    // This is a hack to append the destination onto the URL, so that the user
    // is returned to the same view of the calendar they started at, after
    // clicking on the Edit or Delete link.
    return preg_replace('{(class="calendar\.\S*?)(["\s])}', '\1.' . $view->mm_came_from . '\2', $output);
  }

  return $output;
}

function _mm_schedule_get_granularity($args) {
  if (empty($args[0])) return 'month';
  $date_handler = new date_sql_handler();
  return $date_handler->arg_granularity($args[0]);
}

/**
 * Implements hook_views_pre_view().
 */
function mm_schedule_views_pre_view($view, $display_id, $args) {
  if (($view->name == variable_get('mm_schedule_main_view', 'mm_calendar') || $view->name == variable_get('mm_schedule_export_view', 'mm_calendar_export') || $view->name == 'calendar_digital_signs') && !$view->is_attachment) {
    if (isset($view->mm_node) && $view->mm_first_month > 1 && !empty($view->mm_granularity) && $view->mm_granularity == 'year') {
      // Change the argument to a range: year-month-day--nextyear-month-day
      $date = date_create(substr($args[1], 0, 4) . '-01-01', date_default_timezone_object());
      date_modify($date, '+' . ($view->mm_first_month - 1) . ' month');
      $view->mm_first_month_start = date_format($date, 'Y-m');
      $range_start = date_format($date, 'Y-m-d');
      date_modify($date, '+1 year');
      date_modify($date, '-1 day');
      $view->mm_first_month_end = date_format($date, 'Y-m');
      $args[1] = $range_start . '--' . date_format($date, 'Y-m-d');
    }

    // Find all of the attachments attached to the main display and build their
    // queries. Later, in hook_views_pre_execute() these get turned into a
    // UNIONed subquery.
    $attached_displays = array();
    foreach ($view->display as $id => $disp) {
      if ($disp->display_plugin == 'attachment' && !empty($disp->display_options['displays'][$display_id])) {
        $attached_displays[$id] = $disp;
        // Remove the main page from the list, so the attachment won't try to execute it.
        unset($disp->display_options['displays'][$display_id]);
      }
    }

    $attached_queries = array('query' => array(), 'count_query' => array());
    foreach ($attached_displays as $id => $disp) {
      $clone = $view->clone_view();
      $clone->mm_old_display = $display_id;
      $clone->set_arguments($args);
      $clone->set_display($disp->id);
      if (!$clone->build($disp->id)) {
        $clone->destroy();
        break;
      }

      $attached_queries['query'][$id] = $clone->build_info['query'];
      $attached_queries['count_query'][$id] = $clone->build_info['count_query'];
      $clone->query = NULL;
      $clone->destroy();
      unset($clone);
    }
    $view->attached_queries = $attached_queries;

    // Prevent attachments from happening normally.
    $view->is_attachment = TRUE;
  }
}

/**
 * Implements hook_views_query_alter().
 */
function mm_schedule_views_query_alter($view, $plugin) {
  if ($view->name == variable_get('mm_schedule_main_view', 'mm_calendar') || $view->name == variable_get('mm_schedule_export_view', 'mm_calendar_export') || $view->name == 'calendar_digital_signs') {
    // Adjust filters with [end-date >= now] to be
    // [end-date >= now OR start-date == end-date == midnight]
    if (isset($view->filter['field_start_datetime_value2'])) {
      $filter = $view->filter['field_start_datetime_value2'];
      if ($filter->operator == '>=' && $filter->options['default_date'] == 'now') {
        foreach ($view->query->where as &$where) {
          foreach ($where['conditions'] as &$condition) {
            if ($condition['operator'] == 'formula' && strpos($condition['field'], 'ADDTIME(' . $filter->table_alias)) {
              $date = date_create();
              date_timezone_set($date, timezone_open('UTC'));
              $now = $date->format('Y-m-d H:i:s');
              $date2 = date_create($date->format('Y-m-d'));
              date_timezone_set($date2, timezone_open('UTC'));
              $midnight = $date2->format('Y-m-d H:i:s');
              $start_alias = $filter->table_alias . '.field_start_datetime_value';
              $end_alias = $start_alias . '2';
              $condition['field'] = "$end_alias >= '$now' OR ($start_alias = '$midnight' AND $end_alias = '$midnight')";
              $condition['value'] = array();
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_views_pre_execute().
 */
function mm_schedule_views_pre_execute($view) {
  if ($view->style_plugin->definition['name'] == 'mm_schedule_list' && module_exists('jcalendar')) {
    $path = drupal_get_path('module', 'jcalendar');
    drupal_add_js('Drupal.settings.jcalendarPath = ' . drupal_json_encode(base_path() . $path) . ';', 'inline');
    drupal_add_js($path . '/jcalendar.js');
    drupal_add_css($path . '/jcalendar.css');
  }

  // Set the major time increment ("group by" setting).
  if ($view->name == 'mm_calendar' && isset($view->mm_major_increment)) {
    $view->style_plugin->options['groupby_times'] = $view->mm_major_increment;
  }

  // Move the starting and ending dates when the node's creator has said the
  // year starts in a month other than January
  if ($view->name == variable_get('mm_schedule_main_view', 'mm_calendar') || $view->name == variable_get('mm_schedule_export_view', 'mm_calendar_export') || $view->name == 'calendar_digital_signs') {
    if (isset($view->date_info) && is_object($view->date_info) && isset($view->date_info->min_date) && is_object($view->date_info->min_date)) {
      $view->date_info->orig_min_date = clone($view->date_info->min_date);
    }
    if (isset($view->mm_node) && $view->mm_first_month > 1 && !empty($view->mm_granularity) && $view->mm_granularity == 'year') {
      // Adjust the date range shown in the mini-calendars.
      $offset = '+' . ($view->mm_first_month - 1) . ' month';
      foreach ($view->argument as $arg) {
        if (date_views_handler_is_date($arg, 'argument')) {
          date_modify($arg->min_date, $offset);
          date_modify($arg->max_date, $offset);
        }
      }
      if (isset($view->date_info) && is_object($view->date_info) && isset($view->date_info->orig_min_date) && is_object($view->date_info->orig_min_date)) {
        date_modify($view->date_info->orig_min_date, $offset);
      }
    }

    if (isset($view->attached_queries) && $view->attached_queries['query']) {
      foreach (array('query', 'count_query') as $type) {
        $main_query =& $view->build_info[$type];
        $check_fields = $check_exprs = array();
        $main_exprs =& $main_query->getExpressions();
        foreach ($main_exprs as $data) {
          $check_exprs[] = $data['alias'];
        }
        $main_fields =& $main_query->getFields();#if (function_exists('debug_add_dump')) debug_add_dump($main_fields);
        $i = 0;
        foreach ($main_fields as $data) {
          $check_fields[] = $data['field'];
          $main_query->addExpression('subquery.__field_' . $i++, $data['alias']);
        }#if (function_exists('debug_add_dump') && $type=='query') debug_add_dump($check_exprs, $check_fields, (string)$view->build_info[$type]);
        $main_fields = array();
        unset($subquery);
        $errmsg = 'The attachment %id does not have the same fields, in the same order, as the calendar view %main to which it is attached.';
        $errmsg_t = array('%main' => $view->current_display);
        $join_condition_offset = 0;
        do {
          $recheck = FALSE;
          foreach ($view->attached_queries[$type] as $id => $attached_query) {
            $errmsg_t['%id'] = $id;
            $fields =& $attached_query->getFields();
            $i = 0;
            foreach ($fields as $key => $data) {
              if ($i >= count($check_fields)) {
                $check_fields[] = $data['field'];
                $recheck = TRUE;
              }
              else if ($data['field'] != $check_fields[$i]) {
                throw new Exception(t($errmsg, $errmsg_t));
              }
              $fields[$key]['alias'] = "__field_$i";
              $i++;
            }
            if ($i != count($check_fields)) {
              throw new Exception(t($errmsg, $errmsg_t));
            }

            $exprs =& $attached_query->getExpressions();
            $i = 0;
            foreach ($exprs as $data) {
              if ($i >= count($check_exprs) || $data['alias'] != $check_exprs[$i++]) {
                throw new Exception(t($errmsg, $errmsg_t));
              }
            }
            if ($i != count($check_exprs)) {
              throw new Exception(t($errmsg, $errmsg_t));
            }
          }
        } while ($recheck);

        foreach ($view->attached_queries[$type] as $attached_query) {
          if (empty($subquery)) {
            // First attachment query:
            // Save the highest join argument index.
            $join_condition_offset = $attached_query->nextPlaceholder();
            // Begin a new subquery with this query.
            $subquery = $attached_query;
          }
          else {
            $xlate = array();
            $attached_query_max_placeholder = $attached_query->nextPlaceholder();
            for ($i = $attached_query_max_placeholder; --$i >= 0;) {
              $xlate[":views_join_condition_$i"] = ':views_join_condition_' . ($i + $join_condition_offset);
            }

            $tables =& $attached_query->getTables();
            foreach ($tables as $table_name => $join) {
              $args = array();
              foreach ($join['arguments'] as $arg_name => $arg_value) {
                if (isset($xlate[$arg_name])) {
                  $arg_name = $xlate[$arg_name];
                }
                $args[$arg_name] = $arg_value;
              }
              $tables[$table_name]['arguments'] = $args;
              $tables[$table_name]['condition'] = preg_replace_callback('{:views_join_condition_(\d+)}', create_function('$a', 'return ":views_join_condition_" . ($a[1] + ' . $join_condition_offset . ');'), $join['condition']);
            }

            $join_condition_offset += $attached_query_max_placeholder;

            // Additional queries are UNIONed with the subquery.
            $subquery->union($attached_query);
          }
        }

        // Replace all tables being selected with the subquery.
        $main_tables =& $main_query->getTables();
        $main_tables = array();
        $main_query->addJoin(NULL, $subquery, 'subquery');
        // Remove WHERE conditions, and replace with a simple "1".
        $main_conditions =& $main_query->conditions();
        $main_conditions = array('#conjunction' => 'AND');
        $main_query->where(1);
        if ($type == 'query' && !empty($view->mm_display_mode) && $view->mm_display_mode == 'upcoming' && isset($view->mm_node->field_upcoming_items[LANGUAGE_NONE][0]['value'])) {
          $main_query->range(0, $view->mm_node->field_upcoming_items[LANGUAGE_NONE][0]['value']);
        }
        #        if (function_exists('debug_add_dump') && $type=='query') debug_add_dump((string)$main_query);
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function mm_schedule_views_pre_render($view) {
  drupal_alter('mm_schedule_results', $view);
}

/**
 * Implements hook_mm_copy_tree_node_alter().
 */
function mm_schedule_mm_copy_tree_node_alter(&$node, $old_catlist) {
  if ($node->type == 'mm_calendar') {
    // When copying a calendar node, update the list of subscribed pages to
    // point to the new node's location
    $old_catlist = array_keys($old_catlist);
    if (!empty($node->field_mm_pages[LANGUAGE_NONE])) {
      foreach ($node->field_mm_pages[LANGUAGE_NONE] as $pos => $mm_page) {
        if (in_array($mm_page['value'], $old_catlist)) {
          $new_cat = array_keys($node->mm_catlist);
          $node->field_mm_pages[LANGUAGE_NONE][$pos]['value'] = $new_cat[0];
        }
      }
    }
  }
}

/**
 * Implements hook_mm_links_order().
 */
function mm_schedule_mm_links_order(&$order) {
  $order = array_merge(array('{^Details}i'), $order, array(
    '{^Export}i',
    '{^Add event}i',
    '{^Add to My Calendar}i',
    '{^Add All to My Calendar}i',
    '{^Return to Calendar}i',
  ));
}

/**
 * Implements hook_link_alter().
 */
function mm_schedule_link_alter(&$links, $node) {
  if (mm_schedule_is_handled_type($node->type)) {
    foreach ($links as $num => $link) {
      if (empty($link['query'])) {
        mm_parse_args($term_ids, $oarg_list, $this_tid, $link['href']);
        if ($oarg_list[0] == 'node') {
          $query = drupal_http_build_query(drupal_get_query_parameters($_GET, array('q')));
          if (!empty($query)) $query = '?' . $query;
          $links[$num]['query'] = array('destination' => "mm/$this_tid$query");
        }
      }
    }
  }
}

/**
 * Implements hook_node_view().
 */
function mm_schedule_node_view($node, $view_mode) {
  // Remove Calendar link provided by calendar.module
  if (isset($node)) {
    unset($node->content['links']['calendar']);
  }

  // Add links to calendar and event nodes
  $links = array();
  if ($view_mode != 'teaser' && isset($node) && node_access('view', $node)) {
    mm_parse_args($term_ids, $oarg_list, $this_mmtid);
    if (mm_schedule_is_handled_type($node->type)) {
      // Event node
      if (isset($_GET['destination'])) {
        $query = array('destination' => $_GET['destination']);
        $dest = drupal_parse_url(urldecode($_GET['destination']));
        $links[$node->type . '_return'] = array('title' => t('Return to Calendar'), 'href' => $dest['path'], 'query' => $dest['query']);
      }
      else {
        $query = $this_mmtid ? array('destination' => "mm/$this_mmtid") : array();
      }

      if (user_access('has personal calendar') && !mm_content_node_is_recycled($node, $this_mmtid) && $view_mode != 'ical' && $view_mode != 'feed') {
        list($cat_exists, $node_exists) = mm_schedule_my_calendar_exists();
        if (empty($node_exists) || mm_schedule_event_is_on_calendar($node_exists, 'node', $node) === FALSE) {
          $links[$node->type . '_add_to_mine'] = array(
            'title' => t('Add to My Calendar'),
            'href' => 'mm_schedule/add2mycalendar/node/' . $node->nid,
            'query' => $query,
            'attributes' => array(
              'title' => t('Add all occurrences of this event to your personal calendar'),
            ),
          );
        }
      }
    }
    elseif ($node->type == 'mm_calendar') {
      // Calendar node
      if (user_access('has personal calendar') && !isset($node->mm_calendar_mmtid)) {
        $query = $this_mmtid ? array('destination' => "mm/$this_mmtid") : array();

        list($cat_exists, $node_exists) = mm_schedule_my_calendar_exists();
        if (empty($node_exists) || mm_schedule_event_is_on_calendar($node_exists, 'mm', $this_mmtid) === FALSE) {
          $links[$node->type . '_add_all'] = array(
            'title' => t('Add All to My Calendar'),
            'href' => 'mm_schedule/add2mycalendar/mm/' . $this_mmtid,
            'query' => $query,
            'attributes' => array(
              'title' => t('Add all events on this calendar to your personal calendar'),
            ),
          );
        }
      }
    }
  }

  if ($links) {
    $node->content['links']['node']['#links'] = empty($node->content['links']['node']['#links']) ? $links : array_merge($node->content['links']['node']['#links'], $links);
  }
}

/**
 * Implements hook_form_node_form_alter().
 */
function mm_schedule_form_node_form_alter(&$form, $form_state, $form_id) {
  if (mm_schedule_is_handled_type($form['type']['#value'])) {
    $form['publishing']['publish_on']['#access'] = FALSE;
    $form['publishing']['unpublish_on']['#access'] = FALSE;
    $form['publishing']['set_change_date']['#access'] = FALSE;
    $form['mm_appearance']['sticky']['#access'] = FALSE;
    $form['comment_settings']['#access'] = FALSE;
    $form['mm_categories']['#access'] = FALSE;
    if (isset($form['field_start_datetime'][LANGUAGE_NONE][0])) {
      if (!isset($form['#node']->nid)) {    // New node
        $tz = date_default_timezone_object();
        if (isset($_GET['mm_event_start'])) {
          $start = date_create($_GET['mm_event_start'], $tz);
          date_timezone_set($start, timezone_open('UTC'));
        }

        if (empty($start)) {
          $start = date_create($form['field_start_datetime'][LANGUAGE_NONE][0]['#default_value']['value'], $tz);
          date_modify($start, '+1 hour');
          date_modify($start, '-' . date_format($start, 'i') . ' minutes');
        }

        if (isset($_GET['mm_event_end'])) {
          $end = date_create($_GET['mm_event_end'], $tz);
          date_timezone_set($end, timezone_open('UTC'));
        }

        if (empty($end)) {
          $end = clone $start;
          date_modify($end, '+1 hour');
        }

        $form['field_start_datetime'][LANGUAGE_NONE][0]['#default_value']['value']  = date_format($start, 'Y-m-d H:i:00');
        $form['field_start_datetime'][LANGUAGE_NONE][0]['#default_value']['value2'] = date_format($end, 'Y-m-d H:i:00');
      }
    }
  }
  elseif ($form_id == 'mm_calendar_node_form') {
    // Only admins can push to My Calendar
    $form['#groups']['group_push']->access = user_access('administer all menus');
    if (empty($form['#node']->nid)) {
      $mmtid = $form['this_mmtid']['#value'];
      $form['field_mm_pages'][LANGUAGE_NONE]['field_mm_pages']['#default_value'] = array($mmtid => mm_content_get_name($mmtid));
    }
  }
}

/**
 * Implements hook_mm_delete().
 */
function mm_schedule_mm_delete($mmtids, $nids) {
  if ($mmtids) {
    db_delete('field_data_field_mm_pages')
      ->condition('field_mm_pages_value', $mmtids)
      ->execute();
    db_delete('field_revision_field_mm_pages')
      ->condition('field_mm_pages_value', $mmtids)
      ->execute();
  }
}

/**
 * Implements hook_node_presave().
 */
function mm_schedule_node_presave($node) {
  if ($node->type != 'mm_calendar') return;

  // For each page the user has chosen, load any mm_calendar nodes and add
  // the pages and nodes it refers to, recursively
  $nodes = $pages = array();
  if (!empty($node->field_mm_pages) && is_array($node->field_mm_pages[LANGUAGE_NONE]))
    foreach ($node->field_mm_pages[LANGUAGE_NONE] as $page)
      if (!empty($page['value'])) $pages[$page['value']] = TRUE;

  if (isset($node->field_mm_events[LANGUAGE_NONE]) && is_array($node->field_mm_events[LANGUAGE_NONE]))
    foreach ($node->field_mm_events[LANGUAGE_NONE] as $mm_event)
      if (!empty($mm_event['nid'])) $nodes[$mm_event['nid']] = TRUE;

  if ($pages) {
    $test_pages = array_keys($pages);
    $skip_nids = empty($node->nid) ? array() : array($node->nid);
    do {
      $select = db_select('mm_node2tree', 'n2');
      $select->join('node', 'n', 'n.nid = n2.nid');
      $query = $select->fields('n', array('nid'))
        ->condition('n.type', 'mm_calendar')
        ->condition('n2.mmtid', $test_pages);
      if ($skip_nids) {
        $query->condition('n.nid', $skip_nids, 'NOT IN');
      }
      $result = $query->execute();
      $test_pages = array();
      foreach ($result as $other) {
        $skip_nids[] = $other->nid;
        if (mm_content_user_can_node($other, MM_PERMS_READ) && ($other_node = node_load($other->nid))) {
          if (isset($other_node->field_mm_events[LANGUAGE_NONE]) && is_array($other_node->field_mm_events[LANGUAGE_NONE])) {
            foreach ($other_node->field_mm_events[LANGUAGE_NONE] as $mm_event) {
              $nodes[$mm_event['nid']] = TRUE;
            }
          }

          if (!empty($node->field_mm_pages) && is_array($other_node->field_mm_pages[LANGUAGE_NONE])) {
            foreach ($other_node->field_mm_pages[LANGUAGE_NONE] as $page) {
              if (!isset($pages[$page['value']])) {
                $pages[$page['value']] = TRUE;
                $test_pages[] = $page['value'];
              }
            }
          }
        }
      }
    }
    while ($test_pages);
  }

  $node->field_mm_pages[LANGUAGE_NONE] = $node->field_mm_events[LANGUAGE_NONE] = array();
  foreach (array_keys($pages) as $page) {
    $node->field_mm_pages[LANGUAGE_NONE][]['value'] = $page;
  }

  foreach (array_keys($nodes) as $nid) {
    $node->field_mm_events[LANGUAGE_NONE][]['nid'] = $nid;
  }
}

/**
 * Implementation of hook_calendar_links_alter().
 */
function mm_schedule_calendar_links_alter(&$calendar_links) {
  // Prevent calendar_preprocess_date_views_pager() from trying to set links
  // that it later dies trying to alter.
  $calendar_links = array();
}

function mm_schedule_my_calendar() {
  global $user;
  $_mm_mmtid_of_node = &drupal_static('_mm_mmtid_of_node');

  if ($user->uid == 0) return;

  list($mmtid, $node) = mm_schedule_create_my_calendar();

  if (empty($mmtid)) return;

  if (!mm_content_user_can_node($node, MM_PERMS_READ)) return;

  if (mm_content_user_can_node($node, MM_PERMS_WRITE)) $user->mycalendar_nid = $node->nid;

  $node->mycalendar = TRUE;

  $node->mm_calendar_mmtid = $mmtid;
  $_mm_mmtid_of_node[$node->nid] = $mmtid;

  return mm_node_show($node);
}

function mm_schedule_my_calendar_exists($user_obj = NULL) {
  global $user;

  if (!$user_obj) $user_obj = $user;
  if (!isset($user_obj->user_mmtid)) {
    return;
  }
  $cat_exists = mm_content_get(array('alias' => MM_SCHEDULE_USER_CALENDAR_ALIAS,
    'parent' => $user_obj->user_mmtid));
  if (count($cat_exists)) {
    $exists = $cat_exists[0]->mmtid;
    $nid = _mm_schedule_calendar_on_page($exists);
    if (!empty($nid)) {
      return array($exists, node_load($nid));
    }
    return array($exists, NULL);
  }
}

function mm_schedule_create_my_calendar() {
  global $user;

  if (empty($user->user_mmtid) || $user->uid <= 0 || !user_access('create mm_calendars')) return;

  $default_cat = mm_schedule_create_default_calendar();
  if (!is_numeric($default_cat)) return;

  // If page exists, but not node, copy just the node.
  // Otherwise, copy everything.
  $copy_page = TRUE;
  $dest = $user->user_mmtid;
  list($cat_exists, $node) = mm_schedule_my_calendar_exists();
  if (!empty($cat_exists)) {
    $copy_page = FALSE;
    $dest = $cat_exists;
    if (!empty($node)) return array($dest, $node);
  }

  $copy_params = array(
    MM_COPY_ALIAS =>    MM_SCHEDULE_USER_CALENDAR_ALIAS,
    MM_COPY_CONTENTS => TRUE,
    MM_COPY_NAME =>     t('My Calendar'),
    MM_COPY_OWNER =>    $user->uid,
    MM_COPY_RECUR =>    FALSE,
    MM_COPY_TREE =>     $copy_page,
  );
  $new_tid = mm_content_copy($default_cat, $dest, $copy_params);

  if (!is_numeric($new_tid)) {
    watchdog('mm_schedule', 'Error copying default user calendar: %err', array('%err' => $new_tid), WATCHDOG_ERROR);
    return;
  }

  $nid = _mm_schedule_calendar_on_page($new_tid);
  if (!empty($nid) && ($node = node_load($nid))) {
    $node->revision = FALSE;
    $node->field_mm_pages = array(LANGUAGE_NONE => array(array('value' => $new_tid)));
    $node->uid = $user->uid;
    $node->name = $user->name;
    $node->owner = array($user->uid => $user->name);
    node_save($node);
    return array($new_tid, $node);
  }
}

function _mm_schedule_get_node_link($node, $default = NULL) {
  if (isset($node->url)) {
    return $node->url;
  }
  elseif (empty($node->remote) && is_numeric($node->nid)) {
    return "node/$node->nid";
  }
  elseif (!empty($default)) {
    return $default;
  }
}

function mm_schedule_is_handled_type($type) {
  return in_array($type, variable_get('mm_schedule_handled_types', array('mm_event')));
}

function mm_schedule_create_default_calendar() {
  $users_tid = mm_content_users_mmtid();
  $default_cat = mm_content_get(array('name' => MM_SCHEDULE_USER_CALENDAR_DEFAULT_NAME, 'parent' => $users_tid));
  if (count($default_cat)) $default_cat = $default_cat[0]->mmtid;
  else {
    $default_cat = mm_content_insert_or_update(TRUE, $users_tid, array(
      'name' => MM_SCHEDULE_USER_CALENDAR_DEFAULT_NAME,
      'default_mode' => '',
      'uid' => 1,
      'flags' => array('limit_alias' => '', 'limit_move' => '', 'limit_delete' => '', 'limit_hidden' => '', 'limit_location' => '', 'limit_name' => '', 'limit_write' => ''),
      'node_info' => FALSE,
    ));
    if (!$default_cat) {
      watchdog('mm_schedule', 'Error creating default user calendar', array(), WATCHDOG_ERROR);
      return t('Error creating default user calendar');
    }
  }

  $nodes = mm_content_get_nids_by_mmtid($default_cat, 1);
  if (!count($nodes)) {
    $admin = user_load(1);
    $form_state = array();
    $node = array('type' => 'mm_calendar');
    $form_state['values'] = array(
      'uid' => $admin->uid,
      'name' => $admin->name,
      'title' => t('My Calendar'),
      'body' => '',
      'status' => 1,
      'comment' => 0,
      'mm_catlist' => array($default_cat => ''),
      'owner' => array($admin->uid => $admin->name),
      'groups_w' => array(),
      'users_w' => array(),
      'show_node_info' => 0,
      '_via_drupal_form_submit' => TRUE,
      'op' => t('Save'),
      'field_wd_increment' => '',
      'field_wd_maj_inc' => 'hour',
    );
    $form_state['node'] = $node;
    module_load_include('inc', 'node', 'node.pages');
    drupal_form_submit('mm_calendar_node_form', $form_state, (object)$node);
  }

  return $default_cat;
}

function _mm_schedule_calendar_on_page($mmtid) {
  $select = db_select('mm_node2tree', 'n2');
  $select->join('node', 'n', 'n.nid = n2.nid');
  $select->fields('n2', array('nid'))
    ->condition('n.type', 'mm_calendar')
    ->condition('n2.mmtid', $mmtid)
    ->orderBy('n.created')
    ->range(0, 1);
  return $select->execute()->fetchField();
}

function _mm_schedule_add_node_to_my_calendar_access($node) {
  return mm_schedule_my_calendar_access() && node_access('view', $node);
}

function _mm_schedule_add_all_to_my_calendar_access($mmtid) {
  return mm_schedule_my_calendar_access() && mm_content_user_can($mmtid, MM_PERMS_READ);
}

function _mm_schedule_remove_event_from_calendar_access($cal_node, $node) {
  return mm_content_user_can_node($cal_node, MM_PERMS_WRITE) && mm_schedule_event_is_on_calendar($cal_node, 'node', $node->nid) === 'node';
}

function mm_schedule_event_is_on_calendar($cal_node, $type, $node_or_nid_or_mmtid) {
  if ($type == 'mm') {
    if (is_array($cal_node->field_mm_pages[LANGUAGE_NONE])) {
      foreach ($cal_node->field_mm_pages[LANGUAGE_NONE] as $page) {
        if ($page['value'] == $node_or_nid_or_mmtid) {
          return 'mm';
        }
      }
    }
  }
  else {
    $nid = is_object($node_or_nid_or_mmtid) ? $node_or_nid_or_mmtid->nid : $node_or_nid_or_mmtid;
    if (isset($cal_node->field_mm_events[LANGUAGE_NONE]) && is_array($cal_node->field_mm_events[LANGUAGE_NONE])) {
      foreach ($cal_node->field_mm_events[LANGUAGE_NONE] as $event) {
        if ($event['nid'] == $nid) {
          return 'node';
        }
      }
    }

    if (is_array($cal_node->field_mm_pages[LANGUAGE_NONE])) {
      $test_pages = array();
      foreach ($cal_node->field_mm_pages[LANGUAGE_NONE] as $page) {
        $test_pages[] = $page['value'];
      }

      $num_nodes = db_select('mm_node2tree', 'n2t')
        ->condition('n2t.mmtid', $test_pages, 'IN')
        ->condition('n2t.nid', $nid)
        ->countQuery()->execute()->fetchField();
      if ($num_nodes) {
        return 'mm';
      }
    }
  }

  return FALSE;
}

function _mm_schedule_remove_event_from_calendar($cal_node, $node, $js = NULL) {
  if (isset($cal_node->field_mm_events[LANGUAGE_NONE]) && is_array($cal_node->field_mm_events[LANGUAGE_NONE]))
    foreach ($cal_node->field_mm_events[LANGUAGE_NONE] as $index => $event)
      if ($event['nid'] == $node->nid) {
        $cal_node->revision = FALSE;
        unset($cal_node->field_mm_events[LANGUAGE_NONE][$index]);
        node_save($cal_node);
        break;
      }

  $return = t('All occurrences of this event have been removed from the calendar.');
  if (empty($js)) {
    if (isset($_GET['destination'])) {
      drupal_set_message($return);
      drupal_goto();
    }
    return $return;
  }

  $GLOBALS['devel_shutdown'] = FALSE;
  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  print $return;
  exit();
}

function _mm_schedule_add_to_my_calendar($type, $node_or_mmtid, $js = NULL) {
  list($mmtid, $cal_node) = mm_schedule_create_my_calendar();

  if (empty($mmtid)) {
    $return = t('A personal calendar could not be created.');
  }
  elseif (!mm_content_user_can_node($cal_node, MM_PERMS_WRITE)) {
    $return = t('You do not have permission to modify your personal calendar.');
  }
  else {
    if ($type == 'mm') {    // all events using mmtid
      if (!mm_content_user_can($node_or_mmtid, MM_PERMS_READ)) {
        $return = t('You do not have permission to read the source calendar.');
      }
      elseif (mm_schedule_event_is_on_calendar($cal_node, $type, $node_or_mmtid) !== FALSE) {
        $return = t('All events from this calendar are already present on your personal calendar.');
      }
      else {
        $cal_node->revision = FALSE;
        $cal_node->field_mm_pages[LANGUAGE_NONE][] = array('value' => $node_or_mmtid);
        node_save($cal_node);
        $return = t('All events from this calendar have been added to your personal calendar.');
      }
    }
    else {                  // single event using node
      if (!mm_schedule_is_handled_type($node_or_mmtid->type)) {
        $return = t('Incorrect node type');
      }
      elseif (mm_schedule_event_is_on_calendar($cal_node, $type, $node_or_mmtid) !== FALSE) {
        $return = t('This event is already present on your personal calendar.');
      }
      else {
        $cal_node->revision = FALSE;
        $cal_node->field_mm_events[LANGUAGE_NONE][] = array('nid' => $node_or_mmtid->nid);
        node_save($cal_node);
        $return = t('This event has been added to your personal calendar.');
      }
    }
  }

  if (empty($js)) {
    if (isset($_GET['destination'])) {
      drupal_set_message($return);
      drupal_goto();
    }
    return $return;
  }

  $GLOBALS['devel_shutdown'] = FALSE;
  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  print $return;
  exit();
}

function _mm_schedule_cancel_or_insert_signup($signup, $mode) {
  global $user;

  $user_obj = user_load($signup->uid);
  if ($user_obj && $user_obj->uid) {
    list($mmtid, $cal_node) = mm_schedule_my_calendar_exists($user_obj);

    if ($mode == 'insert' && empty($cal_node)) {
      list($mmtid, $cal_node) = mm_schedule_create_my_calendar();
    }

    if (!empty($mmtid) && !empty($cal_node) && mm_content_user_can_node($cal_node, MM_PERMS_WRITE, $user_obj)) {
      $found = FALSE;
      if (isset($cal_node->field_mm_events[LANGUAGE_NONE]) && is_array($cal_node->field_mm_events[LANGUAGE_NONE])) {
        foreach ($cal_node->field_mm_events[LANGUAGE_NONE] as $index => $subscribed) {
          if ($subscribed['nid'] == $signup->nid) {
            $found = $index;
            break;
          }
        }
      }

      $cal_node->revision = FALSE;
      if ($mode == 'cancel' && $found !== FALSE) {
        unset($cal_node->field_mm_events[LANGUAGE_NONE][$found]);
        node_save($cal_node);
        if ($signup->uid == $user->uid) {
          drupal_set_message(t('This event has been removed from your personal calendar.'));
        }
      }
      elseif ($mode == 'insert' && $found === FALSE) {
        $cal_node->field_mm_events[LANGUAGE_NONE][] = array('nid' => $signup->nid);
        node_save($cal_node);
        if ($signup->uid == $user->uid) {
          drupal_set_message(t('This event has been added to your personal calendar.'));
        }
      }
    }
  }
}

function _mm_schedule_can_add_event($calendar_mmtid, $view) {
  if (empty($view->date_info->calendar_date_link)) return FALSE;
  $type = $view->date_info->calendar_date_link;
  return (user_access('administer nodes') || user_access("create $type content")) && $calendar_mmtid && mm_content_user_can($calendar_mmtid, MM_PERMS_APPLY) && (user_access('administer all menus') || in_array($type, mm_content_resolve_cascaded_setting('allowed_node_types', $calendar_mmtid, $types_at, $types_parent)));
}
