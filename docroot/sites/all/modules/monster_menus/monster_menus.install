<?php

/**
 * @file
 * Installation routines for Monster Menus
 */

/**
 * Implements hook_install()
 */
function monster_menus_install() {
  // Make sure MM's hooks run later than all others. This allows various form
  // element overrides to work.
  db_update('system')
    ->fields(array('weight' => '100'))
    ->condition('filename', '%/monster_menus.module', 'LIKE')
    ->execute();

  // Load various dependencies needed for the mm_content functions.
  module_load_include('module', 'monster_menus', 'monster_menus');

  variable_set('cache_class_mm_access_cache', 'MMAccessCache');

  $top       = 1;
  $groups    = 2;
  $vgroup    = 3;
  $users     = 4;
  $default   = 5;
  $files     = 6;
  $home      = 7;
  $disabled  = 8;
  $system    = 9;
  $not_found = 10;
  $denied    = 11;
  $pic       = 12;

  variable_set('site_403', "mm/$denied");
  variable_set('site_404', "mm/$not_found");

  db_insert('mm_tree')
    ->fields(array('mmtid',    'name',                      'alias',         'parent', 'uid', 'default_mode', 'theme',  'hidden'))
    ->values(array($top,       '[top]',                     '',              0,        1,     MM_PERMS_READ,  '',       0))
    ->values(array($groups,    MM_ENTRY_NAME_GROUPS,        'groups',        $top,     1,     MM_PERMS_READ,  '',       0))
    ->values(array($vgroup,    MM_ENTRY_NAME_VIRTUAL_GROUP, '',              $groups,  1,     MM_PERMS_READ,  '',       0))
    ->values(array($users,     MM_ENTRY_NAME_USERS,         'users',         $top,     1,     MM_PERMS_READ,  '',       0))
    ->values(array($default,   MM_ENTRY_NAME_DEFAULT_USER,  '',              $users,   1,     MM_PERMS_READ,  '',       0))
    ->values(array($files,     '.Files',                    '',              $users,   1,     MM_PERMS_READ,  '',       0))
    ->values(array($home,      'Home',                      '',              $top,     1,     MM_PERMS_READ,  '',       0))
    ->values(array($disabled,  MM_ENTRY_NAME_DISABLED_USER, '',              $users,   1,     '',             '',       0))
    ->values(array($system,    MM_ENTRY_NAME_SYSTEM,        '-system',       $home,    1,     MM_PERMS_READ,  '',       1))
    ->values(array($not_found, 'Not Found',                 'not-found',     $system,  1,     MM_PERMS_READ,  '',       1))
    ->values(array($denied,    'Authorization Required',    'denied',        $system,  1,     MM_PERMS_READ,  '',       1))
    ->values(array($pic,       'Picture block',             'default-image', $home,    1,     MM_PERMS_READ,  '',       0))
    ->execute();

  mm_content_update_parents(NULL, NULL, FALSE, TRUE);
  // Update the mm_tree column containing the sort index.
  mm_content_update_sort();
  mm_content_groups_mmtid();
  mm_content_users_mmtid();

  db_insert('mm_tree_flags')
    ->fields(array('mmtid',  'flag',           'data'))
    ->values(array($default, 'limit_alias',    ''))
    ->values(array($default, 'limit_delete',   ''))
    ->values(array($default, 'limit_hidden',   ''))
    ->values(array($default, 'limit_location', ''))
    ->values(array($default, 'limit_move',     ''))
    ->values(array($default, 'limit_name',     ''))
    ->values(array($default, 'limit_write',    ''))
    ->values(array($files,   'limit_alias',    ''))
    ->values(array($files,   'limit_delete',   ''))
    ->values(array($files,   'limit_hidden',   ''))
    ->values(array($files,   'limit_location', ''))
    ->values(array($files,   'limit_move',     ''))
    ->values(array($files,   'limit_name',     ''))
    ->values(array($files,   'limit_write',    ''))
    ->values(array($system,  'limit_alias',    ''))
    ->values(array($system,  'limit_delete',   ''))
    ->values(array($system,  'limit_hidden',   ''))
    ->values(array($system,  'limit_location', ''))
    ->values(array($system,  'limit_move',     ''))
    ->values(array($system,  'limit_name',     ''))
    ->values(array($system,  'limit_write',    ''))
    ->values(array($system,  'no_breadcrumb',  ''))
    ->execute();

  // MM blocks
  $new_sub = 1;
  $pic_block = 2;
  $sidebar = 3;
  db_insert('mm_block')
    ->fields(array('bid',      'name',            'title', 'title_is_cat', 'show_node_contents', 'help'))
    ->values(array($new_sub,   'New sub-section', '',      '',             '',                   'Creates a new left navigation menu section and makes this page the top page of the section.'))
    ->values(array($pic_block, 'Picture block',   '',      '',             '1',                  'Lets you upload an image to appear on the parent page and all sub-pages.'))
    ->values(array($sidebar,   'Sidebar block',   '',      '',             '1',                  'The contents of the current page will appear in the sidebar block of the parent page and all sub-pages.'))
    ->execute();

  // Assign MM blocks to default nodes
  db_insert('mm_tree_block')
    ->fields(array('mmtid',  'bid',      'max_depth', 'max_parents'))
    ->values(array($groups,  $new_sub,   -1,          5))
    ->values(array($users,   $new_sub,   -1,          -1))
    ->values(array($default, $new_sub,   -1,          -1))
    ->values(array($home,    $new_sub,   -1,          -1))
    ->values(array($pic,     $pic_block, -1,          -1))
    ->execute();

  // Enable the "New sub-section" block
  db_update('block')
    ->fields(array('status' => 1, 'region' => 'left'))
    ->condition('module', 'monster_menus')
    ->condition('delta', '1')
    ->execute();

  // Enable some default content types
  $allowed = array_intersect(array('story', 'page'), array_keys(node_type_get_types()));
  if ($allowed) {
    $settings = array('allowed_node_types' => $allowed);
    mm_content_set_cascaded_settings($users, $settings, FALSE);
    mm_content_set_cascaded_settings($home, $settings, FALSE);
  }

  // Default virtual groups
  foreach (array(
      'All logged-in users' => array('uid', 'FROM {users} WHERE uid > 0'),
      ) as $name => $list) {
    mm_content_insert_or_update(TRUE, $vgroup, array(
        'name' => $name,
        'default_mode' => MM_PERMS_APPLY . ',' . MM_PERMS_READ,
        'qfield' => $list[0],
        'qfrom' => $list[1],
      )
    );
  }

  // After creating virtual groups, update the mm_virtual_group results table.
  mm_regenerate_vgroup();

  $body_404 = '<p>The page you tried to access was not found.</p>';
  if (in_array('php_code', array_keys(filter_formats()))) {
    _mm_install_node_add(array(
        'type' => 'page', 'title' => 'Not Found', 'body' => $body_404 . "<?php print mm_get_detailed_404(); ?>",
        'mm_catlist' => array($not_found => 'Not Found')), 'php_code');
  }
  else {
    _mm_install_node_add(array(
        'type' => 'page', 'title' => 'Not Found', 'body' => $body_404,
        'mm_catlist' => array($not_found => 'Not Found')));
  }
  _mm_install_node_add(array(
      'type' => 'page', 'title' => 'Authorization Required', 'body' => 'You do not have permission to read the contents of this page. <p>If you are not already logged into the system, you may be able to access the page once you do so.</p>',
      'mm_catlist' => array($denied => 'Authorization Required')));

  // Add a standard body field to each of the node types defined in MM
  node_types_rebuild();
  foreach (mm_node_types() as $type => $data) {
    if (empty($data['no_body'])) node_add_body_field((object)array('type' => $type), isset($data['body_title']) ? $data['body_title'] : st('Body'));
  }

  // We need to clear caches, but drupal_flush_all_caches() doesn't work here;
  // it leaves the theme cache in a messed-up state.
  menu_rebuild();
  $core = array('cache', 'cache_block', 'cache_filter', 'cache_page');
  $cache_tables = array_merge(module_invoke_all('flush_caches'), $core);
  foreach ($cache_tables as $table) {
    cache_clear_all('*', $table, TRUE);
  }

  drupal_set_message(st('<p>Monster Menus has been enabled.</p><p>To see the menu tree within your pages, go to !url and add the block "New sub-section" to a region in each of your themes.</p>', array('!url' => l('admin/structure/block/manage/monster_menus/1/configure', 'admin/structure/block/manage/monster_menus/1/configure'))));
}

/**
 * Implements hook_uninstall().
 */
function monster_menus_uninstall() {
  $unset = array(
    'cache_class_mm_access_cache',
    'mm_access_cache_memcache_threshold',
    'mm_comments_readable_labels',
    'mm_content_groups_mmtid',
    'mm_content_users_alias',
    'mm_content_users_mmtid',
    'mm_cron_run_count',
    'mm_cron_run_last',
    'mm_cron_run_since',
    'mm_default_homepage',
    'mm_enable_rss',
    'mm_finegrain_comment_readability',
    'mm_finegrain_comment_readability_ever_set',
    'mm_hide_empty_pages',
    'mm_home_mmtid',
    'mm_node_alert_frequency',
    'mm_recycle_auto_empty',
    'mm_reserved_alias',
    'mm_show_count_instead_of_comments',
    'mm_show_permalink',
    'mm_use_user_dir',
    'mm_use_virtual_user_dir',
    'mm_username_admin',
    'mm_username_anon',
    'mm_username_disabled',
    'mm_vgroup_regen_chunk',
  );
  foreach ($unset as $name) {
    variable_del($name);
  }

  if (substr(variable_get('site_403', ''), 0, 3) == 'mm/') {
    variable_del('site_403');
  }
  if (substr(variable_get('site_404', ''), 0, 3) == 'mm/') {
    variable_del('site_404');
  }
  drupal_set_message(t('You may need to correct the values for "Default 403 (access denied)" and "Default 404 (not found) page" on !link.', array('!link' => l('admin/config/system/site-information', 'admin/config/system/site-information'))));
}

/**
 * Implements hook_schema().
 */
function monster_menus_schema() {
  module_load_include('inc', 'monster_menus', 'mm_constants');
  $t = get_t();
  $schema = array();
  $schema['mm_access_cache'] = array(
    'fields' => array(
      'cid' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => ''),
      'data' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''),
      'expire' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0),
      'mmtid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0),
      'serialized' => array(
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0)
      ),
    'primary key' => array('cid'),
    'indexes' => array(
      'expire' => array('expire'),
      'uid' => array('uid'),
      'nid' => array('nid'),
      'mmtid' => array('mmtid'),
    ),
  );
  $schema['mm_archive'] = array(
    'fields' => array(
      'main_mmtid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'archive_mmtid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'frequency' => array(
        'type' => 'varchar',
        'length' => '5',
        'not null' => TRUE,
      ),
      'main_nodes' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('main_mmtid'),
    'foreign keys' => array(
      'mm_tree' => array(
        'table' => 'mm_tree',
        'columns' => array(
          'main_mmtid' => 'mmtid',
          'archive_mmtid' => 'mmtid',
        ),
      ),
    ),
    'indexes' => array(
      'archive_mmtid' => array('archive_mmtid'),
    ),
  );
  $schema['mm_block'] = array(
    'fields' => array(
      'bid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => '256',
        'not null' => FALSE,
      ),
      'title_is_cat' => array(
        'type' => 'varchar',
        'length' => '1',
        'not null' => TRUE,
        'default' => '1',
      ),
      'show_node_contents' => array(
        'type' => 'varchar',
        'length' => '1',
        'not null' => TRUE,
      ),
      'help' => array(
        'type' => 'varchar',
        'length' => '512',
        'not null' => TRUE,
      ),
      'allow_rss' => array(
        'type' => 'varchar',
        'length' => '1',
        'not null' => TRUE,
        'default' => '1',
      ),
      'admin_only' => array(
        'type' => 'varchar',
        'length' => '1',
        'not null' => TRUE,
        'default' => ''
      ),
    ),
    'primary key' => array('bid'),
  );
  $schema['mm_cascaded_settings'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'size' => 'big',
        'not null' => TRUE,
      ),
      'mmtid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'data_type' => array(
        'type' => 'varchar',
        'length' => '10',
        'not null' => TRUE,
      ),
      'multiple' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'array_key' => array(
        'type' => 'varchar',
        'length' => '32',
        'not null' => TRUE,
      ),
      'data' => array(
        'type' => 'varchar',
        'length' => '512',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'foreign keys' => array(
      'mm_tree' => array(
        'table' => 'mm_tree',
        'columns' => array(
          'mmtid' => 'mmtid',
        ),
      ),
    ),
    'indexes' => array(
      'mmtid' => array('mmtid'),
      'name' => array('name'),
      'data' => array('data'),
      'array_key' => array('array_key'),
    ),
  );
  $schema['mm_group'] = array(
    'fields' => array(
      'gid' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vgid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('gid', 'uid'),
    'foreign keys' => array(
      'mm_tree' => array(
        'table' => 'mm_tree',
        'columns' => array(
          'gid' => 'mmtid',
        ),
      ),
      'users' => array(
        'table' => 'users',
        'columns' => array(
          'uid' => 'uid',
        ),
      ),
      'mm_vgroup_query' => array(
        'table' => 'mm_vgroup_query',
        'columns' => array(
          'vgid' => 'vgid',
        ),
      ),
    ),
    'indexes' => array(
      'vgid' => array('vgid'),
      'gid' => array('gid'),
      'uid' => array('uid'),
    ),
  );
  $schema['mm_group_temp'] = array(
    'fields' => array(
      'gid' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'sessionid' => array(
        'type' => 'varchar',
        'length' => '64',
        'default' => ''
      ),
      'token' => array(
        'type' => 'varchar',
        'length' => '128',
        'default' => ''
      ),
    ),
    'primary key' => array('gid', 'uid', 'sessionid', 'token'),
    'foreign keys' => array(
      'mm_tree' => array(
        'table' => 'mm_tree',
        'columns' => array(
          'gid' => 'mmtid',
        ),
      ),
      'users' => array(
        'table' => 'users',
        'columns' => array(
          'uid' => 'uid',
        ),
      ),
      'sessions' => array(
        'table' => 'sessions',
        'columns' => array(
          'sessionid' => 'sid',
        ),
      ),
    ),
    'indexes' => array(
      'sessionid' => array('sessionid'),
      'gid' => array('gid'),
      'uid' => array('uid'),
      'token' => array('token'),
    ),
  );
  $schema['mm_node2tree'] = array(
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'mmtid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('nid', 'mmtid'),
    'foreign keys' => array(
      'node' => array(
        'table' => 'node',
        'columns' => array(
          'nid' => 'nid',
        ),
      ),
      'mm_tree' => array(
        'table' => 'mm_tree',
        'columns' => array(
          'mmtid' => 'mmtid',
        ),
      ),
    ),
    'indexes' => array(
      'nid' => array('nid'),
      'mmtid' => array('mmtid'),
    ),
  );
  $schema['mm_node_info'] = array(
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'show_node_info' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
      ),
      'comments_readable' => array(
        'type' => 'varchar',
        'length' => '128',
        'default' => ''
      ),
    ),
    'primary key' => array('nid'),
    'foreign keys' => array(
      'node' => array(
        'table' => 'node',
        'columns' => array(
          'nid' => 'nid',
        ),
      ),
    ),
  );
  $schema['mm_node_redir'] = array(
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'url' => array(
        'type' => 'blob',
        'not null' => FALSE
      ),
      'mmtid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      )
    ),
    'primary key' => array('nid', 'vid'),
    'foreign keys' => array(
      'node' => array(
        'table' => 'node',
        'columns' => array(
          'nid' => 'nid',
          'vid' => 'vid',
        ),
      ),
      'mm_tree' => array(
        'table' => 'mm_tree',
        'columns' => array(
          'mmtid' => 'mmtid',
        ),
      ),
    ),
    'indexes' => array(
      'mmtid' => array('mmtid')
    ),
  );
  $schema['mm_node_reorder'] = array(
    'fields' => array(
      'mmtid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'region' => array(
        'type' => 'varchar',
        'length' => '64',
        'default' => NULL,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('mmtid', 'nid'),
    'foreign keys' => array(
      'node' => array(
        'table' => 'node',
        'columns' => array(
          'nid' => 'nid',
         ),
      ),
      'mm_tree' => array(
        'table' => 'mm_tree',
        'columns' => array(
          'mmtid' => 'mmtid',
        ),
      ),
    ),
    'indexes' => array(
      'region' => array('region')
    ),
  );
  $schema['mm_node_schedule'] = array(
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'publish_on' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'unpublish_on' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'set_change_date' => array(
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
      )
    ),
    'primary key' => array('nid'),
    'foreign keys' => array(
      'node' => array(
        'table' => 'node',
        'columns' => array(
          'nid' => 'nid',
         ),
      ),
    ),
  );
  $schema['mm_role2group'] = array(
    'fields' => array(
      'rid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'gid' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'negative' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      )
    ),
    'primary key' => array('rid'),
    'foreign keys' => array(
      'users_roles' => array(
        'table' => 'users_roles',
        'columns' => array(
          'rid' => 'rid',
         ),
      ),
      'mm_tree' => array(
        'table' => 'mm_tree',
        'columns' => array(
          'gid' => 'mmtid',
        ),
      ),
    ),
    'indexes' => array(
      'gid' => array('gid')
    ),
  );
  $schema['mm_node_subpglist'] = array(
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'columns' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
      'depth' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
      ),
      'outer_prefix' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ),
      'column_prefix' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ),
      'section_prefix' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'row_prefix' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ),
      'row_suffix' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ),
      'section_suffix' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'column_suffix' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ),
      'outer_suffix' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE
      ),
      'postamble' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE
      )
    ),
    'primary key' => array('nid', 'vid'),
    'foreign keys' => array(
      'node' => array(
        'table' => 'node',
        'columns' => array(
          'nid' => 'nid',
          'vid' => 'vid',
        ),
      ),
    ),
    'indexes' => array(
      'vid' => array('vid'),
    ),
  );
  $schema['mm_node_write'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'size' => 'big',
        'not null' => TRUE,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'gid' => array(
        'type' => 'int',
        'not null' => TRUE,
      )
    ),
    'primary key' => array('id'),
    'foreign keys' => array(
      'node' => array(
        'table' => 'node',
        'columns' => array(
          'nid' => 'nid',
        ),
      ),
      'mm_tree' => array(
        'table' => 'mm_tree',
        'columns' => array(
          'gid' => 'mmtid',
        ),
      ),
    ),
    'indexes' => array(
      'nid' => array('nid'),
      'gid' => array('gid'),
      'gid_nid' => array('gid', 'nid'),
    ),
  );
  $schema['mm_recycle'] = array(
    'fields' => array(
      'type' => array(
        'type' => 'varchar',
        'length' => 4,
        'not null' => TRUE
      ),
      'id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'from_mmtid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'bin_mmtid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'recycle_date' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      )
    ),
    'primary key' => array('type', 'id', 'from_mmtid'),
    'foreign keys' => array(
      'mm_tree' => array(
        'table' => 'mm_tree',
        'columns' => array(
          'from_mmtid' => 'mmtid',
          'bin_mmtid' => 'mmtid',
        ),
      ),
    ),
    'indexes' => array(
      'id' => array('id'),
      'type' => array('type'),
      'bin_mmtid' => array('bin_mmtid'),
    ),
  );
  $schema['mm_tree'] = array(
    'description' => $t('Contains the Monster Menus tree'),
    'fields' => array(
      'mmtid' => array(
        'description' => $t('MM Tree ID'),
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'description' => $t('Revision ID'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'name' => array(
        'description' => $t('Name of tree entry'),
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE
      ),
      'alias' => array(
        'description' => $t('URL alias'),
        'type' => 'varchar',
        'length' => '128',
        'not null' => FALSE
      ),
      'parent' => array(
        'description' => $t('MM Tree ID of parent'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => $t('User ID of owner'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'default_mode' => array(
        'description' => $t('Access mode(s) for anonymous user'),
        'type' => 'varchar',
        'length' => 7,
        'not null' => FALSE
      ),
      'weight' => array(
        'description' => $t('Menu order'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'theme' => array(
        'description' => $t('Theme for this page and its children'),
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE
      ),
      'sort_idx' => array(
        'description' => $t('Sort index'),
        'type' => 'varchar',
        'length' => min(intval(255 / MM_CONTENT_BTOA_CHARS), MM_CONTENT_MYSQL_MAX_JOINS) * MM_CONTENT_BTOA_CHARS,
        'not null' => FALSE
      ),
      'sort_idx_dirty' => array(
        'description' => $t('Sort index is dirty'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0
      ),
      'hover' => array(
        'description' => $t('Displayed when mouse hovers over menu entry'),
        'type' => 'varchar',
        'length' => '128',
        'not null' => FALSE
      ),
      'rss' => array(
        'description' => $t('RSS feed is enabled'),
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'ctime' => array(
        'description' => $t('Creation time'),
        'type' => 'int',
        'not null' => FALSE,
      ),
      'cuid' => array(
        'description' => $t('User ID of creator'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'node_info' => array(
        'description' => $t('Default attribution display mode'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 1,
      ),
      'previews' => array(
        'description' => $t('Show only teasers'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 0,
      ),
      'hidden' => array(
        'description' => $t('Page is hidden in menu'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 0,
      ),
      'comment' => array(
        'description' => $t('Default comment display mode'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 0,
      )
    ),
    'primary key' => array('mmtid'),
    'foreign keys' => array(
      'mm_tree_revisions' => array(
        'table' => 'mm_tree_revisions',
        'columns' => array(
          'vid' => 'vid',
        ),
      ),
      'users' => array(
        'table' => 'users',
        'columns' => array(
          'uid' => 'uid',
          'cuid' => 'uid',
        ),
      ),
    ),
    'indexes' => array(
      'name' => array('name'),
      'sort_idx' => array('sort_idx'),
      'sort_idx_dirty' => array('sort_idx_dirty'),
      'vid' => array('vid'),
      'weight' => array('weight'),
      'alias' => array('alias'),
      'parent_sortidx' => array('parent', 'sort_idx')
    ),
  );
  $schema['mm_tree_access'] = array(
    'fields' => array(
      'mmtid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'gid' => array(
        'type' => 'int',
        'not null' => TRUE,
      ),
      'mode' => array(
        'type' => 'varchar',
        'length' => 1,
        'not null' => TRUE
      ),
    ),
    'primary key' => array('mmtid', 'gid', 'mode'),
    'foreign keys' => array(
      'mm_tree' => array(
        'table' => 'mm_tree',
        'columns' => array(
          'mmtid' => 'mmtid',
          'gid' => 'mmtid',
        ),
      ),
    ),
    'indexes' => array(
      'mmtid' => array('mmtid'),
      'gid' => array('gid'),
      'mode' => array('mode'),
    ),
  );
  $schema['mm_tree_block'] = array(
    'fields' => array(
      'mmtid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'bid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => -1,
      ),
      'max_depth' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => -1,
      ),
      'max_parents' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => -1,
      ),
    ),
    'primary key' => array('mmtid', 'bid'),
    'foreign keys' => array(
      'mm_tree' => array(
        'table' => 'mm_tree',
        'columns' => array(
          'mmtid' => 'mmtid',
        ),
      ),
      'mm_block' => array(
        'table' => 'mm_block',
        'columns' => array(
          'bid' => 'bid',
         ),
      ),
    ),
    'indexes' => array(
      'mmtid' => array('mmtid'),
      'bid' => array('bid'),
    ),
  );
  $schema['mm_tree_bookmarks'] = array(
    'fields' => array(
      'bmid' => array(
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => '20',
        'not null' => TRUE,
      ),
      'weight' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'data' => array(
        'type' => 'text',
        'size' => 'big',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('bmid'),
    'foreign keys' => array(
      'users' => array(
        'table' => 'users',
        'columns' => array(
          'uid' => 'uid',
        ),
      ),
    ),
  );
  $schema['mm_tree_flags'] = array(
    'fields' => array(
      'mmtid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'flag' => array(
        'type' => 'varchar',
        'length' => '64',
        'not null' => TRUE,
      ),
      'data' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('mmtid', 'flag'),
    'foreign keys' => array(
      'mm_tree' => array(
        'table' => 'mm_tree',
        'columns' => array(
          'mmtid' => 'mmtid',
        ),
      ),
    ),
    'indexes' => array(
      'data' => array('data'),
      'flag' => array('flag'),
    ),
  );
  $schema['mm_tree_parents'] = array(
    'fields' => array(
      'mmtid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'parent' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'depth' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('mmtid', 'parent'),
    'foreign keys' => array(
      'mm_tree' => array(
        'table' => 'mm_tree',
        'columns' => array(
          'mmtid' => 'mmtid',
          'parent' => 'mmtid',
        ),
      ),
    ),
    'indexes' => array(
      'depth' => array('depth'),
      'mmtid' => array('mmtid'),
      'parent' => array('parent'),
    ),
  );
  $schema['mm_tree_revisions'] = array(
    'fields' => array(
      'mmtid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'vid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE
      ),
      'alias' => array(
        'type' => 'varchar',
        'length' => '128',
        'not null' => FALSE
      ),
      'parent' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'default_mode' => array(
        'type' => 'varchar',
        'length' => 7,
        'not null' => FALSE
      ),
      'theme' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE
      ),
      'hover' => array(
        'type' => 'varchar',
        'length' => '128',
        'not null' => FALSE
      ),
      'rss' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'mtime' => array(
        'type' => 'int',
        'not null' => FALSE,
      ),
      'muid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'node_info' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 1,
      ),
      'previews' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 0,
      ),
      'hidden' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 0,
      ),
      'comment' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 0,
      ),
    ),
    'primary key' => array('vid'),
    'foreign keys' => array(
      'users' => array(
        'table' => 'users',
        'columns' => array(
          'uid' => 'uid',
          'muid' => 'uid',
        ),
      ),
      'mm_tree' => array(
        'table' => 'mm_tree',
        'columns' => array(
          'mmtid' => 'mmtid',
          'parent' => 'mmtid',
        ),
      ),
    ),
    'indexes' => array(
      'mmtid' => array('mmtid'),
      'alias' => array('alias'),
      'parent' => array('parent'),
    ),
  );
  $schema['mm_vgroup_query'] = array(
    'fields' => array(
      'vgid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'field' => array(
        'type' => 'varchar',
        'length' => '40',
        'not null' => TRUE
      ),
      'qfrom' => array(
        'type' => 'text',
        'not null' => FALSE
      ),
      'dirty' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      )
    ),
    'primary key' => array('vgid'),
    'indexes' => array(
      'dirty' => array('dirty')
    ),
  );
  $schema['mm_virtual_group'] = array(
    'fields' => array(
      'vgid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'preview' => array(
        'type' => 'int',
        'size' => 'small',
        'not null' => FALSE,
      )
    ),
    'primary key' => array('vgid', 'uid'),
    'foreign keys' => array(
      'mm_vgroup_query' => array(
        'table' => 'mm_vgroup_query',
        'columns' => array(
          'vgid' => 'vgid',
        ),
      ),
      'users' => array(
        'table' => 'users',
        'columns' => array(
          'uid' => 'uid',
        ),
      ),
    ),
    'indexes' => array(
      'preview' => array('preview'),
      'vgid' => array('vgid'),
      'uid' => array('uid'),
    ),
  );
  return $schema;
}

function _mm_install_node_add($arr, $format = 'full_html') {
  global $user;
  if (isset($arr['body'])) {
    $arr['body'] = array(LANGUAGE_NONE => array(array('value' => $arr['body'], 'format' => $format)));
  }
  $arr = array_merge($arr, array(
    'nid' => '',
    'vid' => '',
    'uid' => $user->uid,
    'owner' => $user->uid,
    'groups_w' => array(),
    'users_w' => array(),
    'others_w' => 0,
    'comment' => 0,
    'teaser' => '',
    'status' => 1,
    'moderate' => '',
    'promote' => '',
    'sticky' => '',
    'revision' => 1,
    'name' => $user->name,
    'validated' => 1
  ));
  $node = (object)$arr;
  node_save($node);
}

/**
 * Implements hook_mm_verify_integrity()
 */
function monster_menus_mm_verify_integrity() {
  return array('Monster Menus' => array(
    t('mm_archive.main_mmtid refers to missing mm_tree.mmtid') =>
      "{mm_archive} x LEFT JOIN {mm_tree} t ON t.mmtid=x.main_mmtid WHERE t.mmtid IS NULL",

    t('mm_archive.archive_mmtid refers to missing mm_tree.mmtid') =>
      "{mm_archive} x LEFT JOIN {mm_tree} t ON t.mmtid=x.archive_mmtid WHERE t.mmtid IS NULL",

    t('mm_cascaded_settings.mmtid refers to missing mm_tree.mmtid') =>
      "{mm_cascaded_settings} x LEFT JOIN {mm_tree} t ON t.mmtid=x.mmtid WHERE t.mmtid IS NULL",

    t('mm_group.gid refers to missing mm_tree.mmtid') =>
      "{mm_group} x LEFT JOIN {mm_tree} t ON t.mmtid=x.gid WHERE t.mmtid IS NULL AND x.gid>0 AND x.vgid=0",
    t('mm_group.uid refers to missing users.uid') =>
      "{mm_group} x LEFT JOIN {users} u ON u.uid=x.uid WHERE u.uid IS NULL AND x.uid>0",
    t('mm_group.vgid refers to missing mm_vgroup_query.vgid') =>
      "{mm_group} x LEFT JOIN {mm_vgroup_query} v ON v.vgid=x.vgid WHERE v.vgid IS NULL AND x.vgid>0",

    t('mm_node2tree.mmtid refers to missing mm_tree.mmtid') =>
      "{mm_node2tree} x LEFT JOIN {mm_tree} t ON t.mmtid=x.mmtid WHERE t.mmtid IS NULL",
    t('mm_node2tree.nid refers to missing node.nid') =>
      "{mm_node2tree} x LEFT JOIN {node} n ON n.nid=x.nid WHERE n.nid IS NULL",

    t('mm_node_info.nid refers to missing node.nid') =>
      "{mm_node_info} x LEFT JOIN {node} n ON n.nid=x.nid WHERE n.nid IS NULL",

    t('mm_node_redir.nid refers to missing node.nid') =>
      "{mm_node_redir} x LEFT JOIN {node} n ON n.nid=x.nid WHERE n.nid IS NULL",
    t('mm_node_redir.mmtid refers to missing mm_tree.mmtid') =>
      "{mm_node_redir} x LEFT JOIN {mm_tree} t ON t.mmtid=x.mmtid WHERE x.mmtid>0 AND t.mmtid IS NULL",

    t('mm_node_reorder.mmtid refers to missing mm_tree.mmtid') =>
      "{mm_node_reorder} x LEFT JOIN {mm_tree} t ON t.mmtid=x.mmtid WHERE t.mmtid IS NULL",
    t('mm_node_reorder.nid refers to missing node.nid') =>
      "{mm_node_reorder} x LEFT JOIN {node} n ON n.nid=x.nid WHERE n.nid IS NULL",

    t('mm_node_schedule.nid refers to missing node.nid') =>
      "{mm_node_schedule} x LEFT JOIN {node} n ON n.nid=x.nid WHERE n.nid IS NULL",

    t('mm_node_subpglist.nid refers to missing node.nid') =>
      "{mm_node_subpglist} x LEFT JOIN {node} n ON n.nid=x.nid WHERE n.nid IS NULL",

    t('mm_node_write.nid refers to missing node.nid') =>
      "{mm_node_write} x LEFT JOIN {node} n ON n.nid=x.nid WHERE n.nid IS NULL",
    t('mm_node_write.gid refers to missing mm_tree.mmtid') =>
      "{mm_node_write} x LEFT JOIN {mm_tree} t ON t.mmtid=x.gid WHERE x.gid>0 AND t.mmtid IS NULL",
    t('mm_node_write.gid refers to missing mm_group.gid') =>
      "{mm_node_write} x LEFT JOIN {mm_group} g ON g.gid=x.gid WHERE x.gid<0 AND g.gid IS NULL",

    t('mm_recycle.id refers to missing mm_tree.mmtid (when type=cat)') =>
      "{mm_recycle} x LEFT JOIN {mm_tree} t ON t.mmtid=x.id WHERE x.type='cat' AND t.mmtid IS NULL",
    t('mm_recycle.id refers to missing node.nid (when type=node)') =>
      "{mm_recycle} x LEFT JOIN {node} n ON n.nid=x.id WHERE x.type='node' AND n.nid IS NULL",
    t('mm_recycle.from_mmtid refers to missing mm_tree.mmtid') =>
      "{mm_recycle} x LEFT JOIN {mm_tree} t ON t.mmtid=x.from_mmtid WHERE x.from_mmtid>0 AND t.mmtid IS NULL",
    t('mm_recycle.bin_mmtid refers to missing mm_tree.mmtid') =>
      "{mm_recycle} x LEFT JOIN {mm_tree} t ON t.mmtid=x.bin_mmtid WHERE t.mmtid IS NULL",

    t('mm_role2group.rid refers to missing role.rid') =>
      "{mm_role2group} x LEFT JOIN {role} r ON r.rid=x.rid WHERE r.rid IS NULL",
    t('mm_role2group.gid refers to missing mm_tree.mmtid') =>
      "{mm_role2group} x LEFT JOIN {mm_tree} t ON t.mmtid=x.gid WHERE t.mmtid IS NULL",

    t('mm_tree.parent refers to missing mm_tree.mmtid') =>
      "{mm_tree} x LEFT JOIN {mm_tree} t ON t.mmtid=x.parent WHERE x.parent>0 AND t.mmtid IS NULL",
    t('mm_tree.uid refers to missing users.uid') =>
      "{mm_tree} x LEFT JOIN {users} u ON u.uid=x.uid WHERE u.uid IS NULL AND x.uid>0",
    t('mm_tree.vid refers to missing mm_tree_revisions.vid') =>
      "{mm_tree} x LEFT JOIN {mm_tree_revisions} t ON t.vid=x.vid WHERE t.vid IS NULL",

    t('mm_tree_access.mmtid refers to missing mm_tree.mmtid') =>
      "{mm_tree_access} x LEFT JOIN {mm_tree} t ON t.mmtid=x.mmtid WHERE t.mmtid IS NULL",
    t('mm_tree_access.gid refers to missing mm_tree.mmtid') =>
      "{mm_tree_access} x LEFT JOIN {mm_tree} t ON t.mmtid=x.gid WHERE x.gid>0 AND t.mmtid IS NULL",

    t('mm_tree_block.mmtid refers to missing mm_tree.mmtid') =>
      "{mm_tree_block} x LEFT JOIN {mm_tree} t ON t.mmtid=x.mmtid WHERE t.mmtid IS NULL",
    t('mm_tree_block.bid refers to missing mm_block.bid') =>
      "{mm_tree_block} x LEFT JOIN {mm_block} b ON b.bid=x.bid WHERE x.bid>0 AND b.bid IS NULL",

    t('mm_tree_bookmarks.uid refers to missing users.uid') =>
      "{mm_tree_bookmarks} x LEFT JOIN {users} u ON u.uid=x.uid WHERE u.uid IS NULL",

    t('mm_tree_flags.mmtid refers to missing mm_tree.mmtid') =>
      "{mm_tree_flags} x LEFT JOIN {mm_tree} t ON t.mmtid=x.mmtid WHERE t.mmtid IS NULL",

    t('mm_tree_parents.mmtid refers to missing mm_tree.mmtid') =>
      "{mm_tree_parents} x LEFT JOIN {mm_tree} t ON t.mmtid=x.mmtid WHERE t.mmtid IS NULL",
    t('mm_tree_parents.parent refers to missing mm_tree.mmtid') =>
      "{mm_tree_parents} x LEFT JOIN {mm_tree} t ON t.mmtid=x.parent WHERE x.parent>0 AND t.mmtid IS NULL",

    t('mm_virtual_group.vgid refers to missing mm_vgroup_query.vgid') =>
      "{mm_virtual_group} x LEFT JOIN {mm_vgroup_query} v ON v.vgid=x.vgid WHERE v.vgid IS NULL",
    t('mm_virtual_group.uid refers to missing users.uid') =>
      "{mm_virtual_group} x LEFT JOIN {users} u ON u.uid=x.uid WHERE u.uid IS NULL",
  ));
}

/**
 * When upgrading from D6, move MM modules into the monster_menus folder. Some
 * also get renamed.
 */
function monster_menus_update_7000() {
  $moved = array(
    'media' => array('mm_media', 'mm_media/mm_media.module'),
    'mm_cck' => array('mm_fields', 'mm_fields/mm_fields.module'),
    'mm_schedule' => array('mm_schedule', 'mm_schedule/mm_schedule.module'),
    'mm_share_widget' => array('mm_share_widget', 'mm_share_widget/mm_share_widget.module'),
    'mm_views' => array('mm_views', 'mm_views/mm_views.module'),
    'mm_workflow_access' => array('mm_workflow_access', 'mm_workflow_access/mm_workflow_access.module'),
    'rss_page' => array('rss_page', 'rss_page/rss_page.module'),
  );

  foreach ($moved as $old => $list) {
    db_delete('system')
      ->condition('filename', drupal_get_path('module', 'monster_menus') . '/modules/' . $list[1])
      ->execute();
    db_update('system')
      ->fields(
        array(
          'filename' => drupal_get_path('module', 'monster_menus') . '/modules/' . $list[1],
          'name' => $list[0],
        )
      )
      ->condition('name', $old)
      ->condition('type', 'module')
      ->execute();
  }

  return t('Moved mm modules.');
}

/**
 * Fix the default for {mm_tree}.vid.
 * Remove unused columns in {mm_node_subpglist}.
 */
function monster_menus_update_7001() {
  db_change_field('mm_tree', 'vid', 'vid', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0
  ));
  db_drop_field('mm_node_subpglist', 'title_prefix');
  db_drop_field('mm_node_subpglist', 'title_suffix');
}

/**
 * Remove the body field from the redirect content type.
 */
function monster_menus_update_7002() {
  $instance = field_info_instance('node', 'body', 'redirect');
  if (!empty($instance)) {
    field_delete_instance($instance, FALSE);
  }
}

/**
 * Index mm_tree.alias, to speed up monster_menus_url_inbound_alter().
 */
function monster_menus_update_7003() {
  $schema = drupal_get_schema_unprocessed('monster_menus', 'mm_tree');
  if ($schema && empty($schema['indexes']['alias'])) {
    db_add_index('mm_tree', 'alias', array('alias'));
  }
}

/**
 * Update any top-level .system aliases to be -system instead, because Drupal's
 * .htaccess is preventing top-level URLs starting with dot from working.
 */
function monster_menus_update_7004() {
  // This can't be done with OO-based functions
  db_query("UPDATE {mm_tree} t1 INNER JOIN {mm_tree} t2 ON t2.mmtid = t1.parent SET t1.alias = '-system' WHERE t1.alias = '.system' AND t2.parent = 1");

  // Fix any variables
  $result = db_query("SELECT name FROM {variable} WHERE `value` LIKE '%.system%'");
  foreach ($result as $var) {
    $value = variable_get($var->name, '');
    $value = preg_replace('/^\.system\b/', '-system', $value, -1, $count);
    if ($count) {
      variable_set($var->name, $value);
    }
  }
}

/**
 * Add a token field to mm_group_temp.
 */
function monster_menus_update_7005() {
  $schema = drupal_get_schema_unprocessed('monster_menus', 'mm_group_temp');
  if ($schema && empty($schema['fields']['token'])) {
    db_drop_primary_key('mm_group_temp');
    db_add_field('mm_group_temp', 'token', array(
        'type' => 'varchar',
        'length' => '64',
        'default' => ''
      )
    );
    db_add_primary_key('mm_group_temp', array('gid', 'uid', 'sessionid', 'token'));
    db_add_index('mm_group_temp', 'token', array('token'));
  }
}

/**
 * Add the mm_access_cache table.
 */
function monster_menus_update_7006() {
  // Drop any pre-existing table from D6.
  @db_drop_table('mm_access_cache');
  db_create_table('mm_access_cache', array(
    'fields' => array(
      'cid' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => ''),
      'data' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => ''),
      'expire' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0),
      'mmtid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0),
      'serialized' => array(
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0)
      ),
    'primary key' => array('cid'),
    'indexes' => array(
      'expire' => array('expire'),
      'uid' => array('uid'),
      'nid' => array('nid'),
      'mmtid' => array('mmtid'),
    ),
  ));
  variable_set('cache_class_mm_access_cache', 'MMAccessCache');
}

/**
 * Add the "delete permanently" permission, defaulting it to on for all logged-
 * in users, so that legacy installs default to the same state they had all
 * along.
 */
function monster_menus_update_7007() {
  // user_role_change_permissions(DRUPAL_AUTHENTICATED_RID, array('delete permanently' => TRUE));
  // The above doesn't work because monster_menus' hook_permissions isn't
  // available here, so just update the DB manually.
  db_merge('role_permission')
    ->key(array(
      'rid' => DRUPAL_AUTHENTICATED_RID,
      'permission' => 'delete permanently',
    ))
    ->fields(array(
      'module' => 'monster_menus',
    ))
    ->execute();
}

/**
 * Increase token size to prevent truncation when editing group membership
 */
function monster_menus_update_7008() {
  db_change_field('mm_group_temp', 'token', 'token',
    array(
      'type' => 'varchar',
      'length' => '128',
      'default' => ''
    )
  );
}

/**
 * Flush the access cache, because a bug fix may have invalidated some of it.
 */
function monster_menus_update_7009() {
  // When doing a large batch of updates including #7006, the class might not
  // exist yet. But in this case we don't need to empty the table anyway.
  if (class_exists('MMAccessCache')) {
    _cache_get_object('mm_access_cache')->clear('*', TRUE);
  }
}

/**
 * Add an index, to improve mm_tree sort index generation.
 */
function monster_menus_update_7010() {
  db_add_index('mm_tree', 'parent_sortidx', array('parent', 'sort_idx'));
}

/**
 * Add a couple of indices to mm_node_write, to improve performance.
 */
function monster_menus_update_7011() {
  try {
    db_add_index('mm_node_write', 'gid', array('gid'));
  }
  catch (Exception $e) {}
  try {
    db_add_index('mm_node_write', 'gid_nid', array('gid', 'nid'));
  }
  catch (Exception $e) {}
}

/**
 * Just update the menu router.
 */
function monster_menus_update_7012() {
  // No code is necessary here, since the router is always updated.
}

/**
 * Add an index, to improve mm_tree sort index generation.
 */
function monster_menus_update_7013() {
  db_add_index('mm_recycle', 'bin_mmtid', array('bin_mmtid'));
}

/**
 * Add a "region" column to mm_node_reorder.
 */
function monster_menus_update_7014() {
  db_add_field('mm_node_reorder', 'region', array(
    'type' => 'varchar',
    'length' => '64',
    'default' => NULL,
    'not null' => FALSE,
  ));
  db_add_index('mm_node_reorder', 'region', array('region'));
}