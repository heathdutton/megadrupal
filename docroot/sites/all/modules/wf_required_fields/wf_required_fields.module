<?php

/**
 * Implementation of hook_menu().
 * 
 * Adds the callback for the configuration page.
 *
 * @param bool $may_cache Whether cachable menu items are requiested
 * @return array Array of menu items
 */
function wf_required_fields_menu() {
  $items = array();
  $items['admin/config/workflow/wf-required-fields'] = array(
    'title'              => 'Workflow Required Fields',
    'description'        => 'Choose the content types that you want to have state dependant required fields. For each such content type and each state, configure the fields that you want to be required.',
    'page callback'      => 'drupal_get_form',
    'page arguments'     => array('wf_required_fields_settings_form'),
    'access arguments'   => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implementation of hook_form_BASE_FORM_ID_alter().
 * 
 * Sets the '#required' property of configured fields in node edit forms. 
 * 
 * @param string $form_id The form id
 * @param array &$form Forms API array of the form
 * @todo Eliminate (or disable) fields that are required on the cck field
 *  configuration page
 */
function wf_required_fields_form_node_form_alter(&$form, &$form_state, $form_id) {
  module_load_include('inc', 'wf_required_fields', 'wf_required_fields');
  $type = $form['#node']->type;
  $types = wf_required_fields_get_types_configured();
  if (isset($types[$type])) {  
    $form['#after_build'][] = '_wf_required_fields_after_build';
  }
}


/**
* Custom after_build callback handler.
*/
function _wf_required_fields_after_build($form, &$form_state) {
  module_load_include('inc', 'wf_required_fields', 'wf_required_fields');
  $sid = workflow_node_current_state($form['#node']);
  $type = $form['#node']->type;
  $fields_available = field_info_instances('node', $type);
  
  foreach (array_keys($fields_available) as $field) {
    if (wf_required_fields_is_required($type, $field, $sid)) {
      $array =& wf_required_fields_find_required($form, $field);
      if ($array !== null && (!isset($array['#access']) || $array['#access'])) {
        wf_required_fields_set_required($array);
      }
    }
  }
  return $form;
}

/**
 * Form function for the configuration page.
 *
 * @return array Forms API array for the configuration page
 */
function wf_required_fields_settings_form() {
  module_load_include('inc', 'wf_required_fields', 'wf_required_fields');
  $form = array();
  $form['wf_required_fields'] = array(
    '#tree' => true,
  );

  $types_applicable = wf_required_fields_get_types_applicable();
  $types_configured = wf_required_fields_get_types_configured();
  
  // Present a select box to the user for choosing content types from.
  $form['wf_required_fields']['types'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content Types'),
    '#description' => t('Select the content types that you want to use this module with. Then save this page and add required fields to the content types in one of the next sections. If you do not see your type here, it is because it has now workflow associated.'),
    '#collapsible' => true,
    '#collapsed' => !empty($types_applicable) && !empty($types_configured),
  );
  if (empty($types_applicable)) {
    // No content types where found.
    $form['wf_required_fields']['types']['config'] = array(
      '#type' => 'markup',
      '#value' => t('You have not configured any content types to use a workflow. You can use this module only with content types that are configured to use a workflow.'),
    );
    return system_settings_form($form);
  }
  $form['wf_required_fields']['types']['config'] = array(
    '#type' => 'select',
    '#multiple' => true,
    '#options' =>  $types_applicable,
    '#default_value' => $types_configured,
  );

  // For each content type, present a matrix with states and fields; and checkboxes to click.
  foreach ($types_configured as $type) {
    // Workflow doesn't like string arguments here, so make sure it's int.
    $wid = (int)workflow_get_workflow_type_map_by_type($type)->wid;
    $states = workflow_get_workflow_states_by_wid($wid);
    $form['wf_required_fields']['settings'][$type] = array(
      '#type' => 'fieldset',
      '#title' => $types_applicable[$type],
      '#description' => t('For each state, select the fields that you want to make a required field.'),
      '#collapsible' => true,
      '#collapsed' => false,
    );
    $table_header = '<thead><th>'. t('Field') . '\\' . t('State') . '</th>';
    foreach ($states as $state) {
      $table_header .= "<th>{$state->state}</th>";
    }
    $table_header .= '</thead>';
    drupal_add_js('misc/tableheader.js');
    $form['wf_required_fields']['settings'][$type]['table'] = array(
      '#type' => 'item',
      '#prefix' => '<table class="sticky-enabled">'.$table_header.'<tbody>',
      '#suffix' => '</tbody></table>'
    );
    $fields = field_info_instances('node', $type);
    $row = 0;
    foreach ($fields as $field => $field_info) {
      $name = check_plain($field_info['label'].' ('.$field.')');
      $rowclass = ($row = 1 - $row) ? 'even' : 'odd';
      $already = '';
      if ($field_info['required']) {
        $link = l('global settings', "admin/structure/types/manage/$type/fields/$field");
        $already = '<br><em>' . t('Already marked required in its !link', array('!link' => $link)) . '</em>';
      }
      $form['wf_required_fields']['settings'][$type]['table'][$field] = array(
        '#prefix' => '<tr class="' . $rowclass . '"><td>' . $name . $already . '</td>',
        '#suffix' => '</tr>',
      );
      foreach ($states as $state) {
        $form['wf_required_fields']['settings'][$type]['table'][$field][$state->sid]['required'] = array(
          '#prefix' => '<td>',
          '#suffix' => '</td>',
          '#type' => 'checkbox',
          '#title' => '',
          '#default_value' => wf_required_fields_is_required($type, $field, $state->sid),
          '#disabled' => $field_info['required'],
        );
      }      
    }
  }
  return system_settings_form($form);  
}

/**
 * Implementation of hook_workflow().
 *
 * Objects transitions on nodes if required fields in the new state are
 * missing.
 * 
 * @param string $op 'transition pre': transition is about to be executed,
 *  'transition post': transition was just executed
 * @param int $old_sid The sid of the state the node came from
 * @param int $new_sid The sid of the state the transition goes to
 * @param stdClass $node The node the transtions occures on  
 */
function wf_required_fields_workflow($op, $old_sid, $new_sid, $node) {
  module_load_include('inc', 'wf_required_fields', 'wf_required_fields');
  $types = wf_required_fields_get_types_configured();
  if (!isset($types[$node->type])) {
    return;
  }
  switch ($op) {
    case 'transition pre':
      $missing = wf_required_fields_get_missing_fields($node, $old_sid);
      if (!empty($missing)) {
        $state = workflow_get_workflow_states_by_sid($old_sid);
        $list = '<ul>';
        foreach ($missing as $value) {
          $list .= '<li>' . check_plain(t($value)) . '</li>';
        }
        $list .= '</ul>';
        drupal_set_message(
          t(
            'Cannot promote "!title" to state %state. The following fields are empty: !list',
            array(
              '!title' => l($node->title, $node->nid),
              '%state' => $state->state,
              '!list' => $list,
            )
          )
        );
        return false;
      }
      break;
    default:
      return;
  }
}
