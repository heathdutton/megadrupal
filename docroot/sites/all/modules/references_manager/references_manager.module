<?php
/**
 * @file
 * Main hook implementations for references_manager.
 */

// Menu links are prefixed with this string to help separate.
define('REFERENCES_MANAGER_MENU_PREFIX', 'ref-');

/**
 * Implements hook_permission().
 */
function references_manager_permission() {
  return array(
    'use references manager' =>  array(
      'title' => t('Use References Manager'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function references_manager_menu() {
  $references_types = references_manager_references_field_types();
  $info = field_info_instances();
  $items = array();

  foreach ($info as $entity_type => $bundles) {
    foreach ($bundles as $bundle => $instances) {
      foreach ($instances as $field_name => $instance) {
        // Only work on node_reference fields, for now.
        if (!empty($instance['widget']['module']) && in_array($instance['widget']['module'], $references_types)) {
          // Only proceed if the references manager page is requested.
          if (!empty($instance['settings']['references_manager'])) {
            $items[$entity_type . '/%' . $entity_type . '/' . REFERENCES_MANAGER_MENU_PREFIX . $field_name] = array(
              'title' => t('Manage') . ' ' . $instance['label'],
              'page callback' => 'drupal_get_form',
              'page arguments' => array('references_manager_manage', $entity_type, 1, $field_name),
              'access callback' => 'references_manager_check_access',
              'access arguments' => array($entity_type, 1, $field_name),
              'type' => MENU_LOCAL_TASK,
              'file' => 'references_manager.pages.inc',
            );
          }
        }
      }
    }
  }

  return $items;
}

/**
 * Implements hook_admin_paths().
 *
 * Make the References Manager pages load in the Overlay.
 */
function references_manager_admin_paths() {
  $paths = array();
  // Base this off the menu structure.
  foreach (references_manager_menu() as $path => $data) {
    // Make this a wildcard path instead of tokenized.
    $path = str_replace('%node', '*', $path);
    $paths[$path] = TRUE;
  }

  return $paths;
}

/**
 * Form submit callback for
 * references_manager_form_field_ui_field_edit_form_alter().
 *
 * Rebuild the menus so the new tabs show up.
 */
function references_manager_form_field_ui_field_edit_form_submit() {
  menu_cache_clear_all();
  menu_rebuild();
}

/**
 * Provide a list of the supported reference field types.
 */
function references_manager_references_field_types() {
  return array('node_reference');
}

/**
 * Menu access callback.
 *
 * Verify the field exists in this entity, and that the user has permission
 * to edit it.
 */
function references_manager_check_access($entity_type, $entity, $field_name) {
  // Must have a field name.
  if (empty($field_name)) {
    return FALSE;
  }

  // Make sure we know the full details of the entity.
  list($entity_id, $revision_id, $bundle) = entity_extract_ids($entity_type, $entity);

  // Extra some field settings, etc.
  $params = array(
    'field_name' => $field_name,
    'entity_type' => $entity_type,
    'bundle' => $bundle,
  );
  $instances = field_read_instances($params);
  $instance = array_pop($instances);

  // If the field doesn't exist, nothing to gain access to.
  if (empty($instance)) {
    return FALSE;
  }

  // Check permissions for this item.
  // Check if an access function exists for this.
  $function = $entity_type . '_access';
  if (function_exists($function)) {
    // If the function exists, check if the user has access to it and the
    // custom permission for this module.
    if ($function('update', $entity) && user_access('use references manager')) {
      return TRUE;
    }
  }
  // If there is no "{$entity}_access" function to go from, just check this
  // module's permission.
  elseif (user_access('use references manager')) {
    return TRUE;
  }

  // If we get this far, the user doesn't have permission.
  return FALSE;
}

/**
 * Implements hook_field_info_alter().
 */
function references_manager_field_info_alter(&$info) {
  $references_types = references_manager_references_field_types();

  // Add the 'references_manager' instance setting to all field types.
  foreach ($info as $field_type => &$field_type_info) {
    if (in_array($field_type, $references_types)) {
      $field_type_info += array('instance_settings' => array());
      $field_type_info['instance_settings'] += array(
        'references_manager' => FALSE,
      );
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add the References Manager checkbox to node reference fields.
 */
function references_manager_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  $field = $form['#field'];
  $instance = $form['#instance'];
  $references_types = references_manager_references_field_types();
  $entity_type = $instance['entity_type'];

  // Only work on node reference fields.
  if (in_array($field['type'], $references_types)) {
    // Build a list of view modes that are suitable.
    $entity_info = entity_get_info($entity_type);
    $view_modes = array(t('Do not use references Manager'));
    foreach ($entity_info['view modes'] as $mode => $details) {
      $view_modes[$mode] = $details['label'];
    }
    $form['instance']['settings']['references_manager'] = array(
      '#type' => 'select',
      '#title' => t('References Manager view mode'),
      '#description' => t("This adds custom page that provides an alternative mechanism for sorting the attached nodes, each item will be displayed using this view mode. <em>Only applicable for fields with more than one value.</em>"),
      '#default_value' => $instance['settings']['references_manager'],
      '#options' => $view_modes,
      // Display just after the 'required' checkbox.
      '#weight' => $form['instance']['required']['#weight'] + .1,
    );
    $form['#submit'][] = 'references_manager_form_field_ui_field_edit_form_submit';
  }
}
