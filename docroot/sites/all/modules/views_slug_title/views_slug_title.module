<?php
/**
 * @file
 * Views Slug Title function module.
 */

/**
 * Implements hook_permission().
 */
function views_slug_title_permission() {
  return array(
    'use slugs title' => array(
      'title' => t('Assign slugs to the nodes'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function views_slug_title_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'views_slug_title') . '/views',
  );
}

/**
 * Implements hook_token_info_alter().
 */
function views_slug_title_token_info_alter(array &$info) {
  $entities = entity_get_info();
  foreach ($entities as $name => $entity_info) {
    if (isset($info['tokens'][$name])) {
      $info['tokens'][$name]['views_slug_title'] = array(
        'name' => t('Slug'),
        'description' => t('The “slug” is the URL-friendly version of the name.'),
      );
    }
  }
}

/**
 * Implements hook_tokens().
 */
function views_slug_title_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'entity') {
    $entity = $data['entity'];
    foreach ($tokens as $name => $original) {
      if ($name == 'views_slug_title') {
        $replacements[$original] = $entity->slug;
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_entity_load().
 */
function views_slug_title_entity_load($entities, $type) {
  foreach ($entities as $entity) {
    $slug = views_slug_title_load($entity, $type);
    $entity->slug = is_object($slug) ? $slug->slug : '';
    $entity->sluggenerate = is_object($slug) ? $slug->sluggenerate : '';
  }
}

/**
 * Implements hook_entity_update().
 */
function views_slug_title_entity_update($entity, $type) {
  views_slug_title_entity_save($entity, $type);
}

/**
 * Implements hook_entity_insert().
 */
function views_slug_title_entity_insert($entity, $type) {
  views_slug_title_entity_save($entity, $type);
}

/**
 * Implements hook_entity_delete().
 */
function views_slug_title_entity_delete($entity, $type) {
  views_slug_title_delete($entity, $type);
}

/**
 * Helper for the entity_insert and entity_update.
 *
 * @param object $entity
 *   The object of entity (e.g. node object).
 * @param string $type
 *   The type of entity (e.g. node).
 */
function views_slug_title_entity_save($entity, $type) {
  $slug = views_slug_title_load($entity, $type);
  if (isset($entity->slugwrap['slug']) && !$slug) {
    views_slug_title_save($entity, $type);
  }
  elseif (isset($entity->slugwrap['slug'])
    && $slug
    && ($entity->slugwrap['slug'] != $slug->slug ||
      $entity->slugwrap['sluggenerate'] != $slug->sluggenerate ||
      $entity->title != $entity->original->title)
    ) {
    // Updated slug.
    views_slug_title_save($entity, $type, TRUE);
  }
}

/**
 * Implements hook_field_attach_form().
 *
 * Add field slug into the node form.
 */
function views_slug_title_field_attach_form($entity_type, $entity, array &$form, array &$form_state, $langcode = NULL) {
  if ($entity_type === 'node') {
    $form['slugwrap'] = array(
      '#type' => 'fieldset',
      '#title' => t('Slug title settings'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#group' => 'additional_settings',
      '#attributes' => array(
        'class' => array('slug-form'),
      ),
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'views_slug_title') . '/views_slug_title.js'),
      ),
      '#access' => user_access('use slugs'),
      '#weight' => 1,
      '#tree' => TRUE,
    );

    $form['slugwrap']['slug'] = array(
      '#type' => 'textfield',
      '#title' => t('slug-title'),
      '#default_value' => (isset($entity->slug) ? $entity->slug : ''),
      '#maxlength' => 255,
      '#description' => t('The “slug” is the URL-friendly version of the title. It is usually all lowercase and contains only letters, numbers, and hyphens.'),
      '#states' => array(
        '!enabled' => array(
          'input[name="slugwrap[sluggenerate]"]' => array('checked' => TRUE),
        ),
      ),
    );

    $form['slugwrap']['sluggenerate'] = array(
      '#type' => 'checkbox',
      '#title' => t('Generate automatic Slug'),
      '#default_value' => (isset($entity->sluggenerate) ? $entity->sluggenerate : '1'),
      '#description' => t('Uncheck this to create a custom slug below.'),
      '#weight' => -1,
    );
  }
}

/**
 * Load slug in database.
 *
 * @param object $entity
 *   The object of entity (e.g. node object).
 * @param string $type
 *   The type of entity (e.g. node).
 *
 * @return object
 *   Return the object of entity (e.g. node object).
 */
function views_slug_title_load($entity, $type) {
  return db_select('views_slug_title', 's')
          ->fields('s')
          ->condition('entity_type', $type)
          ->condition('entity_id', entity_id($type, $entity))
          ->execute()
          ->fetchObject();
}

/**
 * Save a slug in database.
 *
 * @param object $entity
 *   The object of entity (e.g. node object).
 * @param string $type
 *   The type of entity (e.g. node).
 * @param bool $update
 *   Boolean say create save or update save.
 */
function views_slug_title_save($entity, $type, $update = FALSE) {
  $keys = array();
  if ($update) {
    $keys = array('entity_type', 'entity_id');
  }
  $slug = new stdClass();
  $slug->entity_type = $type;
  $slug->entity_id = entity_id($type, $entity);
  $slug->slug = views_slug_title_generate($entity, $type);
  $slug->sluggenerate = $entity->slugwrap['sluggenerate'];
  $slug->language = entity_language($type, $entity);
  drupal_write_record('views_slug_title', $slug, $keys);
}

/**
 * Delete a slug in datebase.
 *
 * @param object $entity
 *   The object of entity (e.g. node object).
 * @param string $type
 *   The type of entity (e.g. node).
 */
function views_slug_title_delete($entity, $type) {
  db_delete('views_slug_title')
      ->condition('entity_type', $type)
      ->condition('entity_id', entity_id($type, $entity))
      ->execute();
}

/**
 * Get a slug formatted by token.
 *
 * @param object $entity
 *   The object of entity (e.g. node object).
 * @param string $type
 *   The type of entity (e.g. node).
 *
 * @return string
 *   Return slug generate in string.
 */
function views_slug_title_generate($entity, $type) {
  $slug = $entity->slugwrap['slug'];
  if ($entity->slugwrap['sluggenerate'] == 1) {
    // Generate a slug with pathauto settings.
    $slug = token_replace('[node:title]', array($type => $entity), array(
      'sanitize' => FALSE,
      'clear' => TRUE,
      'callback' => 'pathauto_clean_token_values',
      'language' => (object) array('language' => entity_language($type, $entity)),
      'pathauto' => TRUE,
    ));
  }
  return $slug;
}
