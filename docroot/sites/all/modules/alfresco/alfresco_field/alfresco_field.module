<?php

/**
 * @file
 * Defines an Alfresco item field type.
 */

/**
 * Implements hook_theme().
 */
function alfresco_field_theme() {
  return array(
    // Themes for the formatters.
    'alfresco_field_formatter_default' => array(
      'render element' => 'element',
    ),
    'alfresco_field_formatter_plain' => array(
      'render element' => 'element',
    ),
    // Widget
    'alfresco_field_widget' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function alfresco_field_field_info() {
  return array(
    'alfresco_field' => array(
      'label' => t('Alfresco attachment'),
      'description' => t('Attach an Alfresco node via the repository browser.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'alfresco_field',
      'default_formatter' => 'alfresco_field_default',
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
// function alfresco_field_field_settings($op, $field) {
//   switch ($op) {
//     // Create the form element to be used on the field
//     // settings form. Field settings will be the same for
//     // all shared instances of the same field and should
//     // define the way the value will be stored
//     // in the database.
//     case 'form':
//       $vocabularies = taxonomy_get_vocabularies('alfresco_item');
//       $taxonomy = array();
//       foreach ($vocabularies as $vocabulary) {
//         if (!$vocabulary->tags) {
//           $value = isset($field['vid_'. $vocabulary->vid]) ? $field['vid_'. $vocabulary->vid] : 0;
//           $taxonomy['vid_'. $vocabulary->vid] = taxonomy_form($vocabulary->vid, $value);
//         }
//       }
//       $form = array();
//       if (!empty($taxonomy)) {
//         $form['taxonomy'] = array(
//           '#type' => 'fieldset',
//           '#title' => t('Taxonomy default values'),
//           '#description' => t('Select taxonomy terms default value for new alfresco items nodes.'),
//           '#collapsible' => TRUE,
//         );
//         $form['taxonomy'][] = $taxonomy;
//       }
//       return $form;

//     // Return an array of the names of the field settings
//     // defined by this module. These are the items that
//     // CCK will store in the field definition
//     // and they will be available in the $field array.
//     // This should match the items defined in 'form' above.
//     case 'save':
//       $settings = array();
//       $vocabularies = taxonomy_get_vocabularies('alfresco_item');
//       foreach ($vocabularies as $vocabulary) {
//         if (!$vocabulary->tags) {
//           $settings[] = 'vid_'. $vocabulary->vid;
//         }
//       }
//       return $settings;

//     // Define the database storage for this field using
//     // the same construct used by schema API. Most fields
//     // have only one column, but there can be any number
//     // of different columns. After the schema API values,
//     // add two optional values to each column,
//     //  'views', to define a Views field
//     //  'sortable', to add a Views sort field
//     case 'database columns':
//       $columns = array(
//         'nid' => array(
//           'type' => 'int',
//           'unsigned' => TRUE,
//           'not null' => FALSE,
//           'index' => TRUE,
//           //'sortable' => TRUE,
//           //'views' => TRUE,
//         ),
//       );
//       return $columns;

//     // Optional: Make changes to the default $data array
//     // created for Views. Omit this if no changes are
//     // needed, use it to add a custom handler or make
//     // other changes.
//     case 'views data':
//       // Start with the $data created by CCK
//       // and alter it as needed. The following
//       // code illustrates how you would retrieve
//       // the necessary data.
//       $data = content_views_field_views_data($field);
//       $db_info = content_database_info($field);
//       $table_alias = content_views_tablename($field);

//       // @see nodereference_field_settings()
//       // Filter: swap the handler to the 'in' operator.
//       $data[$table_alias][$field['field_name'] .'_nid']['filter']['handler'] = 'content_handler_filter_many_to_one';
//       // Argument: use node.title for summaries.
//       $data["node_$table_alias"]['table']['join']['node'] = array(
//         'table' => 'node',
//         'field' => 'nid',
//         'left_table' => $table_alias,
//         'left_field' => $field['field_name'] .'_nid',
//       );
//       $data[$table_alias][$field['field_name'] .'_nid']['argument']['handler'] = 'content_handler_argument_reference';
//       $data[$table_alias][$field['field_name'] .'_nid']['argument']['name table'] = "node_$table_alias";
//       $data[$table_alias][$field['field_name'] .'_nid']['argument']['name field'] = 'title';
//       // Relationship: add a relationship for related node.
//       $data[$table_alias][$field['field_name'] .'_nid']['relationship'] = array(
//         'base' => 'node',
//         'field' => $db_info['columns']['nid']['column'],
//         'handler' => 'content_handler_relationship',
//         'label' => t($field['widget']['label']),
//         'content_field_name' => $field['field_name'],
//       );
//       return $data;
//   }
// }

/**
 * Implements hook_field_validate().
 */
function alfresco_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['reference'])) {
      $reference = $item['reference'];
      if ($nid = alfresco_exists_node($reference)) {
        if (!node_load($nid)) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'alfresco_field_reference_not_found',
            'message' => t('Error loading alfresco node (nid=@nid, reference=@reference).', array('@nid' => $nid, '@reference' => $reference)),
          );
        }
      }
      else if (!alfresco_create_node($reference)) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'alfresco_field_reference_create_error',
          'message' => t('Error creating alfresco item (reference=@reference).', array('@reference' => $reference)),
        );
      }
    }
  }
}

/**
 * Implements hook_field_insert().
 */
function alfresco_field_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  _alfresco_field_save($items);
}

/**
 * Implements hook_field_update().
 */
function alfresco_field_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  _alfresco_field_save($items);
}

function _alfresco_field_save(&$items) {
  foreach ($items as $delta => $item) {
    if (!empty($item['reference'])) {
      $reference = $item['reference'];
      if ($nid = alfresco_exists_node($reference)) {
        if ($alf_node = node_load($nid)) {
          $items[$delta]['nid'] = $alf_node->nid;
        }
      }
    }
    // Solo eliminamos el valor si se ha indicado una referencia vacia.
    elseif (isset($item['reference'])) {
      $items[$delta]['nid'] = NULL;
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function alfresco_field_field_is_empty($item, $field) {
  if (empty($item['reference']) /*&& empty($item['nid'])*/) {
    return TRUE;
  }
  return FALSE;
}

//==========================================//
// DEFINING A FORMATTER
//==========================================//

/**
 * Implements hook_field_formatter_info().
 */
function alfresco_field_field_formatter_info() {
  return array(
    'alfresco_field_default' => array(
      'label' => t('Default'),
      'field types' => array('alfresco_field'),
    ),
    'alfresco_field_plain' => array(
      'label' => t('Plain text'),
      'field types' => array('alfresco_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function alfresco_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'alfresco_field_default':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'alfresco_field_formatter_default',
          '#data' => $item['nid'],
        );
      }
      break;

    case 'alfresco_field_plain':
        foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'alfresco_field_formatter_plain',
          '#data' => $item['nid'],
        );
      }
      break;
  }

  return $element;
}


/**
 * Theme function for 'default' alfresco field formatter.
 */
function theme_alfresco_field_formatter_default($variables) {
  $element = $variables['element'];
  if ($node = node_load($element['#data'])) {
    $href = alfresco_url_download($node);
    $icon = theme('alfresco_icon', array('node' => $node));
    return '<div class="alfresco-field-file clear-block">'. $icon . l($node->title, $href) . ' (' .format_size($node->cm_content['size']) .')' .'</div>';
  }
}

/**
 * Theme function for 'plain' alfresco field formatter.
 */
function theme_alfresco_field_formatter_plain($variables) {
  $element = $variables['element'];
  if ($alf_node = node_load($element['#data'])) {
    return url(alfresco_url_download($alf_node), array('absolute' => TRUE));
  }
}

//==========================================//
// DEFINING A WIDGET
//==========================================//

/**
 * Implements hook_field_widget_info().
 */
function alfresco_field_field_widget_info() {
  return array(
    'alfresco_field_widget' => array(
      'label' => t('Alfresco browser'),
      'field types' => array('alfresco_field'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

// /**
//  * Implementation of hook_widget_settings().
//  */
// function alfresco_field_widget_settings($op, $widget) {
//   switch ($op) {
//     // Create the form element to be used on the widget
//     // settings form. Widget settings can be different
//     // for each shared instance of the same field and
//     // should define the way the value is displayed to
//     // the user in the edit form for that content type.
//     case 'form':
//       return;
//       $form = array();
//       $size = (isset($widget['size']) && is_numeric($widget['size'])) ? $widget['size'] : 60;
//       $form['size'] = array(
//         '#type' => 'textfield',
//         '#title' => t('Size of textfield'),
//         '#default_value' => $size,
//         '#element_validate' => array('_element_validate_integer_positive'),
//         '#required' => TRUE,
//       );
//       return $form;

//     // Return an array of the names of the widget settings
//     // defined by this module. These are the items that
//     // CCK will store in the widget definition and they
//     // will be available in the $field['widget'] array.
//     // This should match the items defined in 'form' above.
//     case 'save':
//       return;
//       return array('size');
//   }
// }

/**
 * Implements hook_field_widget_form().
 */
function alfresco_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // @todo: Reutilizar 'alfresco_browser' element

  $element['#theme'] = 'alfresco_field_widget';

  $defaults = array(
    'reference' => NULL,
    'name' => NULL,
  );
  if (isset($items[$delta]['nid'])) {
    if ($alf_node = node_load($items[$delta]['nid'])) {
      $path = !empty($alf_node->alfresco_path) ? $alf_node->alfresco_path .'/' : '';
      $defaults['reference'] = $alf_node->reference;
      $defaults['name'] = $path . $alf_node->cm_name;
    }
  }

  $element['nid'] = array(
    '#type' => 'hidden',
    '#value' => isset($items[$delta]['nid']) ? $items[$delta]['nid'] : NULL,
  );

  $element['reference'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($items[$delta]['reference']) ? $items[$delta]['reference'] : $defaults['reference'],
    '#attributes' => array(
      'class' => array('alfresco-browser-reference'),
      'id' => drupal_hash_base64(uniqid(mt_rand(), TRUE) . mt_rand()),  // id attribute is missing on hidden field types
    ),
  );

  $element['name'] = array(
    '#type' => 'textfield',
    '#maxlength' => 255,
    '#default_value' => isset($items[$delta]['name']) ? $items[$delta]['name'] : $defaults['name'],
    '#attributes' => array('class' => array('alfresco-browser-name'), 'readonly' => TRUE),
    '#title' => isset($element['#title']) ? $element['#title'] : ''
  );

  $element['button'] = array(
    '#markup' => '<input type="button" class="alfresco-browser-button form-submit" value="'. t('Browse...') .'">',
  );

  if (!empty($alf_node)) {
    $title = truncate_utf8($alf_node->title, 50, FALSE, TRUE);
    $filesize = format_size($alf_node->cm_content['size']);
    $mimetype = $alf_node->cm_content['mimetype'];
    $element['link'] = array(
      '#markup' => '<div class="alfresco-browser-info">'. l($title, 'node/'. $alf_node->nid) .' ('. $filesize .', '. $mimetype .')</div>',
    );
  }

  // Used so that hook_field('validate') knows where to flag an error.
//   if (empty($form['#parents'])) {
//     $form['#parents'] = array();
//   }

  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function alfresco_field_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

function theme_alfresco_field_widget($variables) {
  if (!module_exists('alfresco_browser')) {
    return;
  }
  $element = $variables['element'];
  alfresco_browser_add_js();
  drupal_add_css(drupal_get_path('module', 'alfresco_field') .'/alfresco_field.css');
  return '<div class="container-inline alfresco-browser-container clear-block">'. drupal_render_children($element) .'</div>';
}
