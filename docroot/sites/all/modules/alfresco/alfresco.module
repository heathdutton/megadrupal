<?php

/**
 * @file
 * Provides integration with Alfresco enterprise content platform.
 */

// ------------------------------------------------------------------
// Constants
// ------------------------------------------------------------------

// Alfresco file downloads methods.
// More info: http://wiki.alfresco.com/wiki/URL_Addressability
define('ALFRESCO_FILE_DOWNLOADS_MODULE', 1);  // Private transfer
define('ALFRESCO_FILE_DOWNLOADS_GUEST',  2);  // Direct Guest URL
define('ALFRESCO_FILE_DOWNLOADS_TICKET', 3);  // Direct Ticket URL

// Alfresco file exists behavior.
define('ALFRESCO_FILE_EXISTS_RENAME',  0);  // Appends number until name is unique.
define('ALFRESCO_FILE_EXISTS_REPLACE', 1);  // Replace the existing file.
define('ALFRESCO_FILE_EXISTS_ERROR',   2);  // Do nothing and return error.

// Alfresco authentication methods.
define('ALFRESCO_AUTH_GLOBAL', 1);
define('ALFRESCO_AUTH_SSO',    2);

// Alfresco Node UUID regex
// @see http://wiki.alfresco.com/wiki/Web_Service_Data_Types_XML_Schema
define('ALFRESCO_REGEX_NODE_UUID', '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}');

/**
 * Implements hook_hook_info().
 */
function alfresco_hook_info() {
  $groups = array(
    'user' => array(
      'user_categories',
      'user_login',
      'user_logout',
      'user_insert',
      'user_presave',
      'form_user_profile_form_alter',
    ),
    'search' => array(
      'search_info',
      'search_access',
      'search_execute',
    ),
  );
  $hooks = array();
  foreach ($groups as $group => $hooks_info) {
    foreach ($hooks_info as $hook) {
      $hooks[$hook]['group'] = $group;
    }
  }
  return $hooks;
}

// ------------------------------------------------------------------
// Help hooks
// ------------------------------------------------------------------

/**
 * Implements hook_help().
 */
function alfresco_help($path, $arg) {

  switch ($path) {
    case 'alfresco':
      return '<p>'. t('Alfresco project is a related set of modules which provides Drupal integration with Alfresco Content Platform.') .'</p>';

    case 'alfresco/add':
      return '<p>'. t('Add content to a space and enter information about the content to be uploaded.') .'</p>';

    case 'alfresco/items':
      return '<p>'. t('Display a list of all Alfresco items nodes.') .'</p>';

    case 'admin/help#alfresco':
      return '<p>'. t('Alfresco and Drupal integration.') .'</p>';
  }
}

// ------------------------------------------------------------------
// Node info and permissions hooks
// ------------------------------------------------------------------

/**
 * Implements hook_node_info().
 */
function alfresco_node_info() {
  // Provides a new 'alfresco_item' node content type.
  return array(
    'alfresco_item' => array(
      'name' => t('Alfresco item'),
      'base' => 'alfresco',
      'description' => t('Use <em>alfresco items</em> for files or documents residing within the Alfresco repository. For example, documents, video, audio, images, XML, and HTML.'),
      'has_title' => TRUE,
      'title_label' => t('Title'),
    )
  );
}

/**
 * Implements hook_permission().
 *
 * Alfresco item node permissions are generate on node_permission().
 */
function alfresco_permission() {
  return array(
    'administer alfresco' => array(
      'title' => t('Administer alfresco repository'),
    ),
    'download alfresco content' => array(
      'title' => t('Download content from Alfresco repository'),
    ),
    // -- Repository permissions --
    //'access alfresco repository',
    'upload alfresco repository' => array(
      'title' => t('Upload content to Alfresco repository'),
    ),
    'search alfresco repository' => array(
      'title' => t('Search content from the Alfresco repository'),
    ),
    // -- Statistics permissions --
    'view alfresco download counter' => array(
      'title' => t('View content download hits'),
    ),
  );
}

// ------------------------------------------------------------------
// Menu hooks
// ------------------------------------------------------------------

/**
 * Implements hook_menu().
 */
function alfresco_menu() {

  // Settings

  $items['admin/config/services/alfresco'] = array(
    'title' => 'Alfresco',
    'description' => 'Configure Alfresco.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alfresco_admin_settings'),
    'access arguments' => array('administer alfresco'),
    'file' => 'alfresco.admin.inc',
  );

  $items['admin/config/services/alfresco/general'] = array(
    'title' => 'General',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  /*
  $items['admin/config/services/alfresco/display'] = array(
    'title' => 'Display',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alfresco_admin_display'),
    'access arguments' => array('administer alfresco'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/config/services/alfresco',
    'file' => 'alfresco.admin.inc',
  );
  */

  /*
  $items['admin/config/services/alfresco/model'] = array(
    'title' => 'Model',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alfresco_admin_model'),
    'access arguments' => array('administer alfresco'),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/config/services/alfresco',
    'file' => 'alfresco.admin.inc',
  );
  */

  $items['admin/config/services/alfresco/advanced'] = array(
    'title' => 'Advanced',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alfresco_admin_advanced'),
    'access arguments' => array('administer alfresco'),
    'weight' => 4,
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/config/services/alfresco',
    'file' => 'alfresco.admin.inc',
  );

  // Node local taks (tabs)

  $items['node/%alfresco_node/details'] = array(
    'title' => 'Alfresco Details',
    'page callback' => 'alfresco_page_details',
    'page arguments' => array(1),
    'access callback' => 'alfresco_details_tab_access',
    'access arguments' => array(1),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'file' => 'alfresco.pages.inc',
  );

  // Node callbacks

  $items['node/%alfresco_node/download/%alfresco_name'] = array(
    'title' => 'Download',
    'page callback' => 'alfresco_page_download',
    'page arguments' => array(1),
    'access callback' => 'alfresco_download_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'alfresco.pages.inc',
  );

  // Admin Pages

  $items['admin/content/alfresco'] = array(
    'title' => 'Alfresco',
    'description' => "Manage your Alfresco repository's content.",
    'page callback' => 'alfresco_overview_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'alfresco.pages.inc',
  );
  $items['admin/content/alfresco/upload'] = array(
    'title' => 'Upload content',
    'description' => 'Add content to a space and enter information about the content to be uploaded.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alfresco_upload_form'),
    'access callback' => 'alfresco_upload_access',
    'file' => 'alfresco.pages.inc',
  );
  if (module_exists('views')) {
    $items['admin/content/alfresco/items'] = array(
      'title' => 'View items',
      'description' => 'Displays a list of alfresco items nodes.',
      'page callback' => 'alfresco_items_page',
      'access arguments' => array('administer site configuration'),
      'file' => 'alfresco.pages.inc',
    );
  }

  // AJAX Callbacks

  $items['alfresco/autocomplete'] = array(
    'title' => 'Alfresco node autocomplete',
    'page callback' => 'alfresco_autocomplete',
    'access callback' => 'alfresco_repository_access',
    'type' => MENU_CALLBACK,
    'file' => 'alfresco.pages.inc',
  );

  // Alfresco direct download from repository

  $items['alfresco/download/%/%/%'] = array(
    'title' => 'Alfresco download',
    'page callback' => 'alfresco_download_content',
    'page arguments' => array(2, 3, 4),
    'access callback' => 'alfresco_repository_access',
    'type' => MENU_CALLBACK,
    'file' => 'alfresco.pages.inc',
  );

  return $items;
}

function alfresco_details_tab_access($node) {
  return ($node->type == 'alfresco_item') && node_access('view', $node) && user_access('administer alfresco');
}

function alfresco_download_access($node) {
  return ($node->type == 'alfresco_item') && node_access('view', $node) && user_access('download alfresco content') && !empty($node->cm_content);
}

function alfresco_upload_access() {
  return alfresco_repository_access() && user_access('upload alfresco repository');
}

function alfresco_account_access($account) {
  global $user;

  if ($user->uid == 1) {
    return TRUE;
  }

  return ($user->uid == $account->uid && alfresco_repository_access());
}

/**
 * Devuelve cierto si el acceso directo al repositorio de Alfresco está
 * permitido para el usuario.
 */
function alfresco_repository_access() {
  global $user;

  if ($user->uid == 1) {
    return TRUE;
  }

  if ($user->uid == 0) {
    return FALSE;
  }

  // Acceso al repositorio desactivado en el perfil del usuario.
  if (isset($user->alfresco['status']) && $user->alfresco['status'] == 0) {
    return FALSE;
  }

  // Comprobamos el permiso de usuario
  /*
  $access = user_access('access alfresco repository', $account);
  if (!$access) {
    return FALSE;
  }
  */

  // Con autenticación global no es necesario comprobar la cuenta del usuario.
  if (alfresco_auth_is_global()) {
    return TRUE;
  }

  // Comprueba si la cuenta de Alfresco del usuario es válida.
  if (isset($_SESSION['alfresco_account']['verified']) && $_SESSION['alfresco_account']['verified']) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Menu callback; loads an alfresco node object.
 *
 * @see http://drupal.org/node/209056
 */
function alfresco_node_load($arg) {

  if (!is_numeric($arg)) {
    return FALSE;
  }
  $node = node_load($arg);

  if (!$node || $node->type != 'alfresco_item') {
    return FALSE;
  }
  return $node;
}

/**
 * Menu callback; loads the name of alfresco node object.
 */
function alfresco_name_load($arg) {
  return $arg;
}

/**
 * Returns the name (filename) of the currently alfresco node.
 *
 * @see http://drupal.org/node/109153#to_arg
 */
function alfresco_name_to_arg($arg) {

  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    if ($node && $node->type == 'alfresco_item') {
      return $node->cm_name;
    }
  }
  return $arg;
}

// ------------------------------------------------------------------
// Form hooks
// ------------------------------------------------------------------

/**
 * Implements hook_form().
 *
 * @see alfresco_form_validate()
 * @see alfresco_form_submit()
 */
function alfresco_form($node, &$form_state) {

  // Informamos al usuario que no tiene acceso al repositorio de Alfresco
  if (!($repository_access = alfresco_repository_access())) {
    drupal_set_message(t('No tiene acceso al repositorio de Alfresco. Por favor contacte con el administrador del sitio para más información.'), 'warning');
  }

  //drupal_add_js(drupal_get_path('module', 'alfresco') .'/alfresco.js');

  $form = array();
  $type = node_type_get_type($node);

  $form['reference'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->name),
    '#description' => t('Specify the fully-qualified Alfresco node reference, i.e. of the form "workspace://SpacesStore/uuid"'),
    '#default_value' => isset($node->reference) ? $node->reference : '',
    '#required' => TRUE,
    '#weight' => -6,
  );

  // @todo: mover al módulo alfresco_browser con form_alter
  if ($repository_access && module_exists('alfresco_browser')) {
    $form['reference']['#type'] = 'alfresco_browser';
    $form['reference']['#description'] = t('Select an item from Alfresco repository.');
  }

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#description' => t('Leave blank to use the title of the Alfresco content item from repository.'),
      '#required' => FALSE,
      '#default_value' => $node->title,
      '#maxlength' => 255,
      '#weight' => -5,
      '#prefix' => '<div id="alfresco-edit-title-wrapper">',
      '#suffix' => '</div>',
    );
  }

  $form['#validate'][] = 'alfresco_form_validate';
  $form['#submit'][] = 'alfresco_form_submit';

  return $form;
}

// ------------------------------------------------------------------
// Validate node hooks
// ------------------------------------------------------------------

/**
 * Valida que la referencia al nodo de alfresco es correcta, comprueba que el nodo existe y obtiene el título.
 *
 * @see alfresco_form_submit
 * @see http://drupal.org/node/144132#passing
 */
function alfresco_form_validate($form, &$form_state) {

  if ($form_state['values']['reference']) {
    $reference = $form_state['values']['reference'];

    if (!alfresco_valid_reference($reference)) {
      form_set_error('reference', t('The alfresco node reference is not valid.'));
    }
    else {
      // Load node from alfresco repository.
      alfresco_include('soap');
      $alf_node = alfresco_soap_node_load($reference);
      if ($alf_node) {
        $form_state['alf_node'] = $alf_node;
      }
      else {
        // Alfresco node not found.
        $nid = $form_state['values']['nid'];
        if ($nid) {
          // Node edit
          $url_edit = url('node/'. $nid .'/edit', array('fragment' => 'edit-reference-wrapper'));
          $url_delete = url('node/'. $nid .'/delete');

          form_set_error('reference',
            t('The node is not found in the repository. <a href="@url_edit">Edit Alfresco node reference</a> or <a href="@url_delete">delete this node</a>.',
              array('@url_edit' => $url_edit, '@url_delete' => $url_delete)));

          watchdog('alfresco', 'The node is not found in the repository.', NULL, WATCHDOG_NOTICE, l('view', 'node/'. $nid));
        }
        else {
          // Node new
          form_set_error('reference', t('The node is not found in the repository.'));
        }
      }
    }
  }
}

/**
 * Implements hook_validate().
 */
function alfresco_validate($node, &$form) {

  //drupal_add_js(drupal_get_path('module', 'alfresco') .'/alfresco.js');

  if (!empty($node->reference)) {
    if ($nid = alfresco_exists_node($node->reference, $node->nid)) {
      form_set_error('reference', t('This <a href="!url">alfresco node</a> already exists in your Drupal site.',
        array('!url' => url('node/'. $nid))));
    }
  }
}

// ------------------------------------------------------------------
// Submit node functions
// ------------------------------------------------------------------

/**
 * Submit handler for node.
 */
function alfresco_form_submit($form, &$form_state) {

  if (isset($form_state['alf_node'])) {
    $alf_node = $form_state['alf_node'];

    $properties = _alfresco_map($alf_node);
    if ($properties) {
      foreach ($properties as $key => $value) {
        $form_state['values'][$key] = $value;
      }

      if (empty($form_state['values']['title'])) {
        $title = !empty($properties['cm_title']) ? $properties['cm_title'] : $properties['cm_name'];
        $form_state['values']['title'] = $title;
      }
    }

    $form_state['values']['alfresco_path'] = $alf_node->getFolderPath();

    unset($form_state['alf_node']);
  }
}

// -----------------------------------------------------------------------
// Database functions
// -----------------------------------------------------------------------

/**
 * Implements hook_insert().
 */
function alfresco_insert($node) {
  _alfresco_save($node);
}

/**
 * Implements hook_update().
 *
 * As an existing node is being updated in the database, we need to do our own
 * database updates.
 */
function alfresco_update($node) {
  _alfresco_save($node);
}

/**
 * Save an alfresco node in database.
 */
function _alfresco_save($node) {

  // if this is a new node or we're adding a new revision
  if ($node->is_new || !empty($node->revision)) {
    drupal_write_record('alfresco_node', $node);
  }
  else {
    drupal_write_record('alfresco_node', $node, 'vid');
  }

  if (isset($node->cm_content)) {
    $content = $node->cm_content;
    $content['vid'] = $node->vid;
    $content['nid'] = $node->nid;

    // @see http://drupal.org/update/modules/6/7#select_count
    if (db_query_range('SELECT 1 FROM {alfresco_content} WHERE vid = :vid', 0, 1, array('vid' => $node->vid))->fetchField()) {
      drupal_write_record('alfresco_content', $content, 'vid');
    }
    else {
      drupal_write_record('alfresco_content', $content);
    }
  }
  else {
    db_delete('alfresco_content')
      ->condition('vid', $node->vid)
      ->execute();
  }
}

/**
 * Return an array of node properties from alfresco repository.
 *
 * @todo: Add documentation.
 * @param $node
 *  Alfresco node.
 *
 * @return
 */
function _alfresco_map($node) {

  $properties = array();
  $properties['cm_name'] = truncate_utf8($node->cm_name, 255);
  $properties['cm_title'] = truncate_utf8($node->cm_title, 255);
  $properties['cm_description'] = $node->cm_description;
  $properties['cm_author'] = truncate_utf8($node->cm_author, 255);
  $properties['cm_creator'] = truncate_utf8($node->cm_creator, 255);
  $properties['cm_modifier'] = truncate_utf8($node->cm_modifier, 255);
  $properties['cm_created'] = strtotime($node->cm_created);
  $properties['cm_modified'] = strtotime($node->cm_modified);

  $content = $node->cm_content;
  if ($content instanceof AlfContentData) {
    $properties['cm_content'] = array();
    $properties['cm_content']['url'] = $content->guestUrl;
    $properties['cm_content']['mimetype'] = $content->mimetype;
    $properties['cm_content']['size'] = $content->size;
    $properties['cm_content']['encoding'] = $content->encoding;
  }
  else {
    $properties['cm_content'] = NULL;
  }

  return $properties;
}


/**
 * Implements hook_node_revision_delete().
 */
function alfresco_node_revision_delete($node) {
  db_delete('alfresco_node')
    ->condition('vid', $node->vid)
    ->execute();

  db_delete('alfresco_content')
    ->condition('vid', $node->vid)
    ->execute();
}

/**
 * Implements hook_delete().
 */
function alfresco_delete($node) {

  // Notice that we're matching all revision, by using the node's nid.
  db_delete('alfresco_node')
    ->condition('nid', $node->nid)
    ->execute();

  db_delete('alfresco_content')
    ->condition('nid', $node->nid)
    ->execute();

  // clean up statistics table when node is deleted
  db_delete('alfresco_counter')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_load().
 */
function alfresco_load($nodes) {

  $fields = drupal_schema_fields_sql('alfresco_node');
  $fields = array_diff($fields, array('vid', 'nid'));
  $fields_str = implode(', ', $fields);

  $fields_content = drupal_schema_fields_sql('alfresco_content');
  $fields_content = array_diff($fields_content, array('vid', 'nid'));
  $fields_content = implode(', ', $fields_content);

  $result = db_query("SELECT nid,$fields_str FROM {alfresco_node} WHERE nid IN (:nids)", array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    foreach ($fields as $field) {
      $nodes[$record->nid]->$field = $record->$field;
    }
    $content_data = db_query("SELECT $fields_content FROM {alfresco_content} WHERE nid = :nid", array('nid' => $record->nid))->fetchAssoc();
    if ($content_data) {
      $nodes[$record->nid]->cm_content = $content_data;
    }
  }
}

// -----------------------------------------------------------------------
// View functions
// -----------------------------------------------------------------------

/**
 * Implements hook_view().
 */
function alfresco_view($node, $view_mode) {
  // Si el usuario no tiene permisos para modificar el elemento,
  // lo redirigimos directamente a la descarga.
  if (variable_get('alfresco_redirect_download', FALSE)) {
    // Evitamos redirgir cuando se ejecuta el cron
    // @xxx Usar node_is_page($node)
    if (($view_mode == 'full' || $view_mode == 'teaser') && !node_access('update', $node)) {
      drupal_goto(alfresco_url_download($node));
    }
  }

  drupal_add_css(drupal_get_path('module', 'alfresco') .'/alfresco.css');

  if ($view_mode == 'teaser') {
    $node->content['alfresco_info'] = array(
      '#theme' => 'alfresco_teaser',
      '#node' => $node,
      '#weight' => 0,
    );
  }
  else {
    $node->content['alfresco_info'] = array(
      '#theme' => 'alfresco_display',
      '#node' => $node,
      '#weight' => -1,
    );
  }
  return $node;
}

/**
 * Implements hook_node_view().
 */
function alfresco_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'alfresco_item' && $node->cm_content) {
    $links = array();
    if (user_access('view alfresco download counter')) {
      $totalcount = db_query('SELECT totalcount FROM {alfresco_counter} WHERE nid = :nid', array('nid' => $node->nid))->fetchField();
      if ($totalcount) {
        $links['alfresco_statistics_counter'] = array(
          'title' => format_plural($totalcount, '1 download', '@count downloads')
        );
      }
    }
    if (user_access('download alfresco content')) {
      $links['alfresco_download'] = array(
        'title' => t('Download content'),
        'href' => alfresco_url_download($node),
        'attributes' => array('title' => t('Download, or open in browser window, the content of this item.')),
      );
    }
    $node->content['links']['alfresco'] = array(
      '#theme' => 'links__node__alfresco_item',
      '#links' => $links,
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }
}

// ------------------------------------------------------------------
// 3rd party module hooks
// ------------------------------------------------------------------

/**
 * Implements hook_views_api().
 */
function alfresco_views_api() {
  return array(
    'api' => '2.0',
    'path' => drupal_get_path('module', 'alfresco') .'/views',
  );
}

/**
 * Implements hook_admin_theme().
 */
function alfresco_admin_theme($op = 'info', $option = NULL) {
  switch ($op) {
    case 'info':
      $options = array();
      $options['alfresco'] = array(
        'title' => t('Alfresco pages'),
        'description' => t('Use the administration theme when viewing pages of the Alfresco module (upload, import...).'),
      );
      return $options;

    case 'check':
      switch ($option) {
        case 'alfresco':
          return arg(0) == 'alfresco';
      }
      break;
  }
}

// ------------------------------------------------------------------
// Cron hooks
// ------------------------------------------------------------------

/**
 * Implements hook_cron().
 */
function alfresco_cron() {
  // @todo: Add sync

  $statistics_timestamp = variable_get('alfresco_statistics_day_timestamp', '');

  if ((REQUEST_TIME - $statistics_timestamp) >= 86400) {
    // Reset day counts.
    db_update('alfresco_counter')
      ->fields(array('daycount' => 0))
      ->execute();
    variable_set('alfresco_statistics_day_timestamp', REQUEST_TIME);
  }

  // @see alfresco_requirements()
  variable_set('alfresco_http_request_fails', FALSE);
}

// ------------------------------------------------------------------
// Theme hooks
// ------------------------------------------------------------------

/**
 * Implements hook_theme().
 */
function alfresco_theme($existing, $type, $theme, $path) {

  return array(
    'alfresco_properties_table' => array(
      'variables' => array('form' => NULL),
      'file' => 'alfresco.theme.inc',
    ),
    'alfresco_teaser' => array(
      'variables' => array('node' => NULL),
      'file' => 'alfresco.theme.inc',
    ),
    'alfresco_display' => array(
      'variables' => array('node' => NULL),
      'file' => 'alfresco.theme.inc',
    ),
    'alfresco_icon' => array(
      'variables' => array('node' => NULL),
      'file' => 'alfresco.theme.inc',
    ),
  );
}

// ------------------------------------------------------------------
// Files helper functions
// ------------------------------------------------------------------

/**
 * Return the URL for download the alfresco file.
 */
function alfresco_url_download($node) {
  if ($node && $node->type == 'alfresco_item' && !empty($node->cm_content)) {
    return 'node/'. $node->nid .'/download/'. $node->cm_name;
  }
}

/**
 * Transfer file using http to client. Pipes a file through Alfresco to the client.
 *
 * @param $reference
 *  A string containing an Alfresco Node Reference.
 *
 * @param $disposition
 *  The Content-Disposition Header. Possible values: 'attachment' or 'inline'.
 *
 * @see file_transfer()
 * @see http://w-shadow.com/blog/2007/08/12/how-to-force-file-download-with-php/
 * @see http://www.phpclasses.org/browse/file/9051.html
 * @see http://www.php-mysql-tutorial.com/php-tutorial/php-read-remote-file.php
 * @see http://htmlblog.net/10-code-snippets-for-php-developers/
 * @see http://www.faqts.com/knowledge_base/view.phtml/aid/1/fid/40 - Which is faster, echo or print?
 */
function alfresco_file_transfer($reference, $disposition = NULL) {
  if (ob_get_level()) {
    ob_end_clean();
  }

  alfresco_include('soap');
  $alf_node = alfresco_soap_node_load($reference);
  if (!$alf_node) {
    drupal_not_found();
    exit();
  }

  $content = $alf_node->cm_content;
  if (!($content instanceof AlfContentData)) {
    drupal_not_found();
    exit();
  }

  $name = $alf_node->cm_name;
  $url  = $content->url;
  $size = $content->size;
  $mime = $content->mimetype;

  if ($mime == 'text/html') {
    $encoding = !empty($content->encoding) ? $content->encoding : 'utf-8';
    drupal_add_http_header('Content-Type', $mime . '; charset=' . strtolower($encoding));
  }
  else {
    drupal_add_http_header('Content-Type', $mime);
  }
  drupal_add_http_header('Content-Length', $size);

  if ($disposition == 'attachment' || $disposition == 'inline') {
    drupal_add_http_header('Content-Disposition', $disposition .'; filename="' . $name . '"');
  }

  // Transfer file in 1024 byte chunks to save memory usage.
  if ($fd = fopen($url, 'rb')) {
    while (!feof($fd)) {
      echo fread($fd, 1024);
    }
    fclose($fd);
  }
  else {
    drupal_not_found();
  }
  exit();
}

/**
 * Uploads a file into content store and returns the content data string which
 * can be used to populate a content property.
 *
 * @see drupal_http_request()
 * @see http://wiki.alfresco.com/wiki/URL_Addressability#UploadContentServlet
 */
function alfresco_file_put($filepath, $url, $headers = array()) {
  $result = new stdClass();
  $result->code = 0;

  if (!file_exists($filepath)) {
    $result->error = 'file not found';
    return $result;
  }

  // Parse the URL and make sure we can handle the schema.
  $uri = parse_url($url);

  if ($uri == FALSE) {
    $result->error = 'unable to parse URL';
    return $result;
  }

  if (!isset($uri['scheme'])) {
    $result->error = 'missing schema';
    return $result;
  }

  switch ($uri['scheme']) {
    case 'http':
      $port = isset($uri['port']) ? $uri['port'] : 80;
      $host = $uri['host'] . ($port != 80 ? ':'. $port : '');
      $fp = @fsockopen($uri['host'], $port, $errno, $errstr, 15);
      break;
    case 'https':
      // Note: Only works for PHP 4.3 compiled with OpenSSL.
      $port = isset($uri['port']) ? $uri['port'] : 443;
      $host = $uri['host'] . ($port != 443 ? ':'. $port : '');
      $fp = @fsockopen('ssl://'. $uri['host'], $port, $errno, $errstr, 20);
      break;
    default:
      $result->error = 'invalid schema '. $uri['scheme'];
      return $result;
  }

  // Make sure the socket opened properly.
  if (!$fp) {
    // When a network error occurs, we use a negative number so it does not
    // clash with the HTTP status codes.
    $result->code = -$errno;
    $result->error = trim($errstr);
    return $result;
  }

  // Construct the path to act on.
  $path = isset($uri['path']) ? $uri['path'] : '/';
  if (isset($uri['query'])) {
    $path .= '?'. $uri['query'];
  }

  // Create HTTP request.
  $defaults = array(
    'Host' => "Host: $host",
    'User-Agent' => 'User-Agent: Drupal (+http://drupal.org/)',
  );

  $content_length = filesize($filepath);
  if ($content_length > 0) {
    $defaults['Content-Length'] = 'Content-Length: '. $content_length;
  }

  // If the server url has a user then attempt to use basic authentication
  if (isset($uri['user'])) {
    $defaults['Authorization'] = 'Authorization: Basic '. base64_encode($uri['user'] . (!empty($uri['pass']) ? ":". $uri['pass'] : ''));
  }

  foreach ($headers as $header => $value) {
    $defaults[$header] = $header .': '. $value;
  }

  $request = 'PUT '. $path ." HTTP/1.0\r\n";
  $request .= implode("\r\n", $defaults);
  $request .= "\r\n\r\n";

  $result->request = $request;

  fwrite($fp, $request);

  // Transfer file in 1024 byte chunks to save memory usage.
  if ($fd = fopen($filepath, 'rb')) {
    while (!feof($fd) && $chunk = fread($fd, 1024)) {
      fwrite($fp, $chunk, strlen($chunk));
    }
    fclose($fd);
  }

  // Fetch response.
  $response = '';
  while (!feof($fp) && $chunk = fread($fp, 1024)) {
    $response .= $chunk;
  }
  fclose($fp);

  // Parse response.
  list($split, $result->data) = explode("\r\n\r\n", $response, 2);
  $split = preg_split("/\r\n|\n|\r/", $split);

  list($protocol, $code, $text) = explode(' ', trim(array_shift($split)), 3);
  $result->headers = array();

  // Parse headers.
  while ($line = trim(array_shift($split))) {
    list($header, $value) = explode(':', $line, 2);
    if (isset($result->headers[$header]) && $header == 'Set-Cookie') {
      // RFC 2109: the Set-Cookie response header comprises the token Set-
      // Cookie:, followed by a comma-separated list of one or more cookies.
      $result->headers[$header] .= ','. trim($value);
    }
    else {
      $result->headers[$header] = trim($value);
    }
  }

  $result->code = $code;
  return $result;
}

// ------------------------------------------------------------------
// Utils helper functions
// ------------------------------------------------------------------

/**
 * @todo Hacer un hook para este método.
 */
function alfresco_auth_credentials() {
  global $user;

  // @todo: tratar el caso especial del administrador de forma independiente ?

  $verified = isset($_SESSION['alfresco_account']['verified']) ? $_SESSION['alfresco_account']['verified'] : FALSE;

  // Las credenciales de conexión dependen del modo de autenticación configurado en el portal
  if (alfresco_auth_is_sso() && $user->uid != 0 && $verified) {
    $username = $_SESSION['alfresco_account']['username'];
    $password = $_SESSION['alfresco_account']['password'];
  }
  else {
    $username = variable_get('alfresco_credentials_username', 'guest');
    $password = variable_get('alfresco_credentials_password', base64_encode('guest'));
  }

  return array('user' => $username, 'pass' => base64_decode($password));
}

function alfresco_auth_is_global() {
  return variable_get('alfresco_authentication_method', ALFRESCO_AUTH_GLOBAL) == ALFRESCO_AUTH_GLOBAL;
}

function alfresco_auth_is_sso() {
  return variable_get('alfresco_authentication_method', ALFRESCO_AUTH_GLOBAL) == ALFRESCO_AUTH_SSO;
}

function alfresco_valid_uuid($uuid) {
  $pattern = '|^'. ALFRESCO_REGEX_NODE_UUID .'$|';
  return preg_match($pattern, $uuid);
}

/**
 * Verify the syntax of the given Alfresco node reference.
 *
 * @param $reference
 *   A string containing an Alfresco Node Reference.
 * @return
 *   TRUE if the reference is in a valid format.
 *
 * Examples of valid references:
 * - "workspace://SpacesStore/804005fd-0a68-11df-a238-b1a1e5d9b300"
 * - "system://system/1aa150d5-bc5e-11dd-8590-695888b0c20c"
 */
function alfresco_valid_reference($reference) {
  $pattern = '|^\w+://\w+/'. ALFRESCO_REGEX_NODE_UUID .'$|';
  return preg_match($pattern, $reference);
}

/**
 * Verify the syntax of the given Alfresco node path.
 *
 * Examples of valid paths:
 * - "/"
 * - "/app:company_home"
 * - "/app:company_home/app:guest_home"
 * - "/app:company_home/app:guest_home/cm:alfresco.pdf"
 * - "/sys:user"
 */
function alfresco_valid_path($path) {
  $pattern = '|^(/\w+:.+)+$|';
  return preg_match($pattern, $path);
}

/**
 * Parse a given Alfresco Node Reference.
 *
 * @param $reference
 *   A string containing an Alfresco Node Reference.
 * @return
 *   FALSE, if the reference is in an invalid format. Otherwise, a
 *   keyed array containing the components:
 *    'reference' - Reference (same)
 *    'scheme'    - Scheme.
 *    'address'   - Address.
 *    'uuid'      - UUID.
 *   If the component parameter is specified a string is returned
 *   instead of an array.
 */
function alfresco_parse_reference($reference, $component = '') {
  $pattern = '|^(\w+)://(\w+)/('. ALFRESCO_REGEX_NODE_UUID .')$|';
  if (preg_match($pattern, $reference, $matches)) {
    $info = array();
    $info['reference'] = $matches[0];
    $info['scheme'] = $matches[1];
    $info['address'] = $matches[2];
    $info['uuid'] = $matches[3];
    if (!empty($component)) {
      return $info[$component];
    }
    return $info;
  }
  return FALSE;
}

/**
 * Checks whether the alfresco_item node specified by reference exists.
 *
 * @param $reference
 *   A string containing an Alfresco Node Reference.
 * @param $exclude
 *   An optional Node ID (nid) to be excluded.
 * @return
 *  Returns Node ID (nid) if the alfresco_item node specified by reference
 *  exists; FALSE otherwise.
 */
function alfresco_exists_node($reference, $exclude = NULL) {

  if (!empty($exclude)) {
    $sql = "SELECT nid FROM {alfresco_node} WHERE reference = :reference AND nid <> :nid";
    if ($nid = db_query($sql, array('reference' => $reference, 'nid' => $exclude))->fetchField()) {
      return $nid;
    }
  }
  else {
    $sql = "SELECT nid FROM {alfresco_node} WHERE reference = :reference";
    if ($nid = db_query($sql, array('reference' => $reference))->fetchField()) {
      return $nid;
    }
  }
  return FALSE;
}

/**
 * Create an alfresco_item node from a reference.
 *
 * @param $reference
 *   String Alfresco Node Reference.
 * @param $title
 *   String to be used as the node's title. If this is ommitted the title of
 *   Alfresco item will be used.
 * @param $body
 *   String to be used as the node's body.
 * @param $options
 *   An associative array of additional options, with the following keys:
 *     - 'name'
 *       Authored by field. Leave blank to use the current user.
 *     - 'date'
 *       Authored on field. Leave blank to use the current time.
 *     - 'status'
 *       Published field.
 *     - 'promote'
 *       Promoted to front page field.
 *     - 'sticky'
 *       Sticky at top of lists field.
 *     - 'language'
 *       Language code if the locale.module is installed.
 *     - 'comment'
 *       Comment settings if the comment.module is installed.
 *     - 'taxonomy'
 *       Taxonomy terms to assign to the node if the taxonomy.module is
 *       installed.
 * @return
 *   A node object if the node is created successfully or FALSE on error.
 *
 * @see DrupalWebTestCase::drupalCreateNode()
 */
function alfresco_create_node($reference, $title = '', $body = '', $options = array()) {
  global $user;

  if (!user_access('create alfresco_item content')) {
    return FALSE;
  }

  // Ensure it's a valid alfresco node referente
  if (!alfresco_valid_reference($reference)) {
    return FALSE;
  }

  if ($nid = alfresco_exists_node($reference)) {
    return node_load($nid);
  }

  alfresco_include('soap');
  $alf_node = alfresco_soap_node_load($reference);
  if (!$alf_node) {
    return FALSE;
  }

  if (empty($title)) {
    $alf_node_title = $alf_node->cm_title;
    $title = !empty($alf_node_title) ? $alf_node_title : $alf_node->cm_name;
  }

  // Build the alfresco_item node
  $node = new stdClass();
  $node->type = 'alfresco_item';
  $node->name = $user->name;
  $node->uid = $user->uid;
  $node->title = truncate_utf8($title, 255);
  $node->created = REQUEST_TIME;
  $node->language = LANGUAGE_NONE;

  if (empty($body)) {
    $node->body = array(LANGUAGE_NONE => array(array()));
  }
  else {
    $node->body = array(LANGUAGE_NONE => array(array(
      'value' => $body,
      'format' => filter_default_format(),
    )));
  }

  // Set up default values
  $node_options = variable_get('node_options_'. $node->type, array('status', 'promote'));
  foreach (array('status', 'promote', 'sticky') as $key) {
    $node->$key = in_array($key, $node_options);
  }
  $node->revision = in_array('revision', $node_options);

  // Node author information and options for administrators
  if (user_access('administer nodes')) {
    foreach (array('name', 'date', 'status', 'promote', 'sticky') as $key) {
      if (isset($options[$key])) {
        $node->$key = $options[$key];
      }
    }
  }

  // Locale settings
  if (module_exists('locale')) {
    if (isset($options['language'])) {
      $node->language = $options['language'];
    }
  }

  // Taxonomy
  if (module_exists('taxonomy') && isset($options['taxonomy'])) {
    $node->taxonomy = $options['taxonomy'];
  }

  // Comment
  if (module_exists('comment') && isset($options['comment'])) {
    $node->comment = $options['comment'];
  }

  // Alfresco node stuff
  $node->reference = $reference;
  $node->alfresco_path = $alf_node->getFolderPath();

  // Execute mappings from $alf_node to $node.
  $properties = _alfresco_map($alf_node);
  if ($properties) {
    foreach ($properties as $key => $value) {
      $node->$key = $value;
    }
  }

  // Save the node
  $node = node_submit($node);
  node_save($node);

  return $node;
}

/**
 * Utility for handling Alfresco SOAP faults.
 */
function alfresco_error_handler($type, $exception = NULL, $skip_message = FALSE) {

  if ($exception instanceof SoapFault) {
    // Obtenemos el mensaje de error de Alfresco
    if (isset($exception->detail) && is_object($exception->detail)) {
      $detail = (array) $exception->detail;
      unset($detail['stackTrace']);
      unset($detail['trace']);
      $detail_msg = print_r($detail, TRUE);
      $error_class = array_shift(array_values($detail));
      $error_msg = array_pop(explode(':', array_shift(explode("\n", $error_class->message))));
    }
    else {
      $error_msg = $detail_msg = $exception->getMessage();
    }
  }
  else {
    $error_msg = $detail_msg = $exception->getMessage();
  }

  watchdog($type, 'An unexpected error occurred while connecting to the Alfresco repository via SOAP. Detail: <pre>!detail</pre>', array('!detail' => $detail_msg), WATCHDOG_ERROR);
  if (!$skip_message) {
    drupal_set_message(t('An unexpected error occurred while connecting to the Alfresco repository. Please contact the server administrator for assistance.'), 'error', FALSE);
  }

  return $error_msg;
}


/**
 * Include alfresco .inc files as necessary.
 */
function alfresco_include($file) {
  static $used = array();
  if (!isset($used[$file])) {
    require_once  DRUPAL_ROOT . '/' . drupal_get_path('module', 'alfresco') . "/includes/alfresco.$file.inc";
  }

  $used[$file] = TRUE;
}

/**
 * Include alfresco library .php files as necessary.
 */
function alfresco_include_lib($file, $path = 'Alfresco/Service') {
  static $used = array();
  if (empty($used)) {
    // Add the Alfresco PHP library directory to include path
    $lib_path = drupal_get_path('module', 'alfresco') .'/lib';
    //$lib_path = 'sites/all/libraries/alfresco-php-library';
    set_include_path(get_include_path() . PATH_SEPARATOR . $lib_path);
  }

  $filepath = $path .'/'. $file;
  if (!isset($used[$filepath])) {
    require_once "$filepath.php";
  }

  $used[$filepath] = TRUE;
}

function alfresco_icon_path($filename, $full_path = TRUE) {
  $extension = substr(strrchr($filename, '.'), 1);
  $icon_dir = drupal_get_path('module', 'alfresco') . '/images/filetypes';
  if (file_exists("./$icon_dir/$extension.gif")) {
    $icon_name = $extension;
  }
  else {
    $icon_name = '_default';
  }
  return $full_path ? "$icon_dir/$icon_name.gif" : $icon_name;
}
