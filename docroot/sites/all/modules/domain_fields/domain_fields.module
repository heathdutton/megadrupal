<?php
/**
 * @file
 * This module adds additional domain based settings to control a number
 * of global field settings.
 *
 * The main functionality is to provide an interface to the Drupal 7
 * hook hook_field_access() so that you can hide unwanted fields based on
 * the active domain for editing and / or display.
 */

/**
 * Implements hook_menu().
 */
function domain_fields_menu() {
  $base_url = 'admin/structure/domain/fields/%domain';
  $items[$base_url] = array(
    'title' => 'Domain fields',
    'title callback' => 'domain_fields_domain_title',
    'title arguments' => array(4),
    'description' => 'Select content types for each domain.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('domain_fields_settings_form', 4, 'node'),
    'access arguments' => array('administer domains'),
    'file' => 'domain_fields.admin.inc',
  );

  $entities = entity_get_info();
  foreach ($entities as $entity_type => $entity) {
    // Only show fieldable entities.
    if ($entity_type == 'node') {
      $items[$base_url . '/node'] = array(
        'title' => $entity_type,
        'title callback' => 'domain_fields_entity_title',
        'title arguments' => array('node', 4),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -10,
      );
    }
    elseif (!empty($entity['fieldable'])) {
      $items[$base_url . '/' . $entity_type] = array(
        'title callback' => 'domain_fields_entity_title',
        'title arguments' => array($entity_type, 4),
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('domain_fields_settings_form', 4, $entity_type),
        'access arguments' => array('administer domains'),
        'file' => 'domain_fields.admin.inc',
      );
    }
    //$bn = t('@bundle (@type)', array('@bundle' => $bundles[$entity_type]['label'], '@type' => $entity_type));
  }
  return $items;
}

/**
 * Menu title callback for the domain.
 */
function domain_fields_domain_title($domain) {
  return t('Domain Fields in @domain', array('@domain' => domain_title($domain)));
}

/**
 * Menu title callback for the entity type name.
 */
function domain_fields_entity_title($entity_type, $domain = NULL) {
  $entity = entity_get_info($entity_type);
  return $entity['label'];
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * This adds a field edit links to the domain overview form.
 */
function domain_fields_form_domain_overview_form_alter(&$form, &$form_state) {
  if (isset($form['domain'])) {
    foreach (element_children($form['domain']) as $domain_id) {
      $form['domain_actions'][$domain_id]['#markup'] .= ' &nbsp;&nbsp; ' . l(t('fields'), 'admin/structure/domain/fields/' . $domain_id);
    }
  }
}


/**
 * Implements hook_theme().
 */
function domain_fields_theme($existing, $type, $theme, $path) {
  return  array(
    'domain_fields_settings_form' => array(
      'render element' => 'form',
      'file' => 'domain_fields.admin.inc',
    ),
  );
}

/**
 * Helper function to get the default settings.
 */
function domain_fields_settings($domain = NULL) {
  if (!$domain) {
    $domain = domain_get_domain();
  }

  return variable_get('domain_fields_' . $domain['domain_id'], array());
}

/**
 * Helper function to determine the field settings on a entity in relation
 * to the current domain.
 */
function _domain_fields_instance_settings($entity_type, $bundle, $field_name, $key, $default_value = 0, $domain = NULL) {
  $settings = domain_fields_settings($domain);
  if (isset($settings[$entity_type][$bundle][$field_name][$key])) {
    return $settings[$entity_type][$bundle][$field_name][$key];
  }
  return $default_value;
}

/**
 * Implements hook_field_access().
 */
function domain_fields_field_access($op, $field, $entity_type, $entity, $account) {
  if (empty($entity_type) || empty($entity)) {
    return TRUE;
  }
  if ($op == 'edit' || $op == 'view') {
    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
    if (_domain_fields_instance_settings($entity_type, $bundle, $field['field_name'], $op)) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * This is being used as hook_field_widget_properties_alter() has minimal
 * effect for setting things that are stored in the $instance and $field
 * settings. But because of this, the results of this function are coupled
 * to the widget behaving normally.
 */
function domain_fields_field_widget_form_alter(&$element, &$form_state, $context) {
  if (!isset($context['form']['#title']) || $context['form']['#title'] != t('Default value')) {
    // Alter standard widget form
    $instance = $context['instance'];
    if (_domain_fields_instance_settings($instance['entity_type'], $instance['bundle'], $instance['field_name'], 'required')) {
      $element['#required'] = TRUE;
    }
    if ($label = _domain_fields_instance_settings($instance['entity_type'], $instance['bundle'], $instance['field_name'], 'label')) {
      $element['#title'] = $label;
    }
    if ($help = _domain_fields_instance_settings($instance['entity_type'], $instance['bundle'], $instance['field_name'], 'help')) {
      $element['#description'] = $help;
    }
  }
}
