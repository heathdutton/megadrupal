<?php

/**
 * @file
 * Integration of the Bootstrap Date & Time picker.
 *
 * @see https://github.com/Eonasdan/bootstrap-datetimepicker
 */

/**
 * Implements hook_permission().
 */
function bdtpicker_permission() {
  return array(
    'administer bdtpicker' => array(
      'title' => t('Administer bdtpicker'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function bdtpicker_menu() {
  $items = array();

  $items['admin/config/user-interface/bdtpicker'] = array(
    'title' => 'Bootstrap Date & Time picker settings',
    'description' => 'Libraries settings.',
    'access callback' => 'user_access',
    'access arguments' => array('administer bdtpicker'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bdtpicker_settings_libraries_form'),
    'file' => 'bdtpicker.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_element_info_alter().
 */
function bdtpicker_element_info_alter(&$info) {
  if (libraries_info('bootstrap-datetimepicker')) {
    if (isset($info['date_text'])) {
      $info['date_text']['#process'][] = 'bdtpicker_element_date_text_process';
    }

    if (isset($info['textfield'])) {
      $info['textfield']['#process'][] = 'bdtpicker_element_textfield_process';
    }
  }
}

/**
 * Implements hook_libraries_info().
 */
function bdtpicker_libraries_info() {
  $libraries = array();

  if (($library_path = libraries_get_path('bootstrap-datetimepicker'))) {
    $libraries['bootstrap-datetimepicker'] = array(
      'library path' => $library_path,
      'name' => 'Bootstrap Date & Time picker',
      'vendor url' => 'https://github.com/Eonasdan/bootstrap-datetimepicker',
      'download url' => 'https://github.com/Eonasdan/bootstrap-datetimepicker/releases',
      'version callback' => 'bdtpicker_get_library_version',
      'version arguments' => array(),
      'files' => array(
        'js' => array(
          'build/js/bootstrap-datetimepicker.min.js',
        ),
        'css' => array(
          'build/css/bootstrap-datetimepicker.min.css',
        ),
      ),
      'variants' => array(
        'none' => array(
          'files' => array(
            'js' => array(
              'src/js/bootstrap-datetimepicker.js',
            ),
            'css' => array(
              'build/css/bootstrap-datetimepicker.css',
            ),
          ),
        ),
      ),
      'integration files' => array(
        'bdtpicker' => array(
          'js' => array(
            'js/bdtpicker.js',
          ),
        ),
      ),
      'dependencies' => array(
        'moment',
      ),
    );
  }

  return $libraries;
}

/**
 * Library info "version callback".
 *
 * @param array $info
 *   Library info.
 *
 * @return string|false
 *   Version number.
 */
function bdtpicker_get_library_version(array $info) {
  return bdtpicker_get_package_version($info['library path']);
}

/**
 * Get the version number from package JSON.
 *
 * @param string $library_path
 *   Directory.
 *
 * @return string|false
 *   Version number.
 */
function bdtpicker_get_package_version($library_path) {
  static $versions = array();

  if (!$library_path) {
    return FALSE;
  }

  if (!isset($version[$library_path])) {
    $versions[$library_path] = FALSE;
    if (is_readable("$library_path/package.json")) {
      $package = drupal_json_decode(file_get_contents("$library_path/package.json"));
      if ($package && !empty($package['version'])) {
        $versions[$library_path] = $package['version'];
      }
    }
  }

  return $versions[$library_path];
}

/**
 * Default options of Bootstrap Date & Time picker.
 *
 * @see http://eonasdan.github.io/bootstrap-datetimepicker/#options
 *
 * @return array
 *   PHP equivalent of the Bootstrap Date & Time picker options.
 */
function bdtpicker_get_default_picker_options() {
  return array(
    'pickDate' => TRUE,
    'pickTime' => TRUE,
    'useMinutes' => TRUE,
    'useSeconds' => TRUE,
    'useCurrent' => TRUE,
    'minuteStepping' => 1,
    'minDate' => '',
    'maxDate' => '',
    'showToday' => TRUE,
    'language' => $GLOBALS['language']->language,
    'defaultDate' => '',
    'disabledDates' => array(),
    'enabledDates' => array(),
    'icons' => array(
      'time' => 'glyphicon glyphicon-time',
      'date' => 'glyphicon glyphicon-calendar',
      'up'   => 'glyphicon glyphicon-chevron-up',
      'down' => 'glyphicon glyphicon-chevron-down',
    ),
    'useStrict' => FALSE,
    'sideBySide' => FALSE,
    'daysOfWeekDisabled' => array(),
  );
}

/**
 * Implements hook_field_widget_info_alter().
 */
function bdtpicker_field_widget_info_alter(&$info) {
  if (isset($info['date_text'])) {
    $info['date_text']['settings'] += array(
      'bdtpicker_enabled' => TRUE,
      'bdtpicker_chain_previous' => FALSE,
      'bdtpicker_chain_next' => TRUE,
      'bdtpicker_activate_value2' => TRUE,
      'bdtpicker_activate_value' => TRUE,
      'bdtpicker_side_by_side' => FALSE,
      'bdtpicker_days_of_week_disabled' => array(),
    );
  }
}

/**
 * Implements hook_date_field_widget_settings_form_alter().
 */
function bdtpicker_date_field_widget_settings_form_alter(&$form, $context) {
  if ($context['instance']['widget']['type'] === 'date_text') {
    $settings =& $context['instance']['widget']['settings'];

    $states = array(
      'visible' => array(
        'input[name="instance[widget][settings][bdtpicker_enabled]"]' => array('checked' => TRUE),
      ),
    );

    $form['bdtpicker'] = array(
      '#type' => 'fieldset',
      '#tree' => FALSE,
      '#title' => t('Bootstrap Date & Time picker'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );

    $form['bdtpicker_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enabled'),
      '#default_value' => !empty($settings['bdtpicker_enabled']),
      '#fieldset' => 'widget_bdtpicker',
      '#weight' => 0,
    );

    $form['increment'] = array(
      '#type' => 'select',
      '#title' => t('Time increments'),
      '#default_value' => $settings['increment'],
      '#options' => array(
        1 => t('1 minute'),
        2 => t('2 minute'),
        3 => t('3 minute'),
        5 => t('5 minute'),
        10 => t('10 minute'),
        15 => t('15 minute'),
        20 => t('20 minute'),
        30 => t('30 minute'),
        60 => t('60 minute'),
      ),
      '#fieldset' => 'widget_bdtpicker',
      '#weight' => 2,
    );

    $form['bdtpicker_chain_previous'] = array(
      '#type' => 'checkbox',
      '#title' => t('Connect the start date to the end date'),
      '#default_value' => !empty($settings['bdtpicker_chain_previous']),
      '#fieldset' => 'widget_bdtpicker',
      '#states' => $states,
      '#weight' => 3,
    );

    $form['bdtpicker_chain_next'] = array(
      '#type' => 'checkbox',
      '#title' => t('Connect the end date to the start date'),
      '#default_value' => !empty($settings['bdtpicker_chain_next']),
      '#fieldset' => 'widget_bdtpicker',
      '#states' => $states,
      '#weight' => 4,
    );

    $form['bdtpicker_activate_value2'] = array(
      '#type' => 'checkbox',
      '#title' => t('Activate the widget on the end date input when the start date is selected'),
      '#default_value' => !empty($settings['bdtpicker_activate_value2']),
      '#fieldset' => 'widget_bdtpicker',
      '#states' => $states,
      '#weight' => 5,
    );

    $form['bdtpicker_activate_value'] = array(
      '#type' => 'checkbox',
      '#title' => t('Activate the widget on the start date input when the end date is selected'),
      '#default_value' => !empty($settings['bdtpicker_activate_value']),
      '#fieldset' => 'widget_bdtpicker',
      '#states' => $states,
      '#weight' => 6,
    );

    $form['bdtpicker_side_by_side'] = array(
      '#type' => 'checkbox',
      '#title' => t('Date & Time picker side by side'),
      '#default_value' => !empty($settings['bdtpicker_side_by_side']),
      '#fieldset' => 'widget_bdtpicker',
      '#states' => $states,
      '#weight' => 7,
    );

    $form['bdtpicker_days_of_week_disabled'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Days of week disabled'),
      '#default_value' => $settings['bdtpicker_days_of_week_disabled'],
      '#options' => moment_weekday_name_options(),
      '#fieldset' => 'widget_bdtpicker',
      '#states' => $states,
      '#weight' => 8,
    );
  }
}

/**
 * Implements hook_date_combo_process_alter().
 */
function bdtpicker_date_combo_process_alter(&$element, &$form_state, $context) {
  if (!empty($context['instance']) && $context['instance']['widget']['type'] === 'date_text') {
    $settings =& $context['instance']['widget']['settings'];
    $bdtpicker_enabled = !empty($settings['bdtpicker_enabled']);

    // Get the list of numeric identifiers of the selected weekdays.
    $days_of_week_disabled = array_values(
      array_intersect_key(
        moment_weekday_options('name', NULL, 'numeric'),
        array_flip(array_keys($settings['bdtpicker_days_of_week_disabled'], TRUE))
      )
    );
    foreach (array('value', 'value2') as $column) {
      if (!isset($element[$column])) {
        continue;
      }

      $element[$column]['#bdtpicker'] = $bdtpicker_enabled;

      if (!empty($settings['bdtpicker_side_by_side'])) {
        $element[$column]['#datepicker_options']['sideBySide'] = TRUE;
      }

      if ($days_of_week_disabled) {
        $element[$column]['#datepicker_options']['daysOfWeekDisabled'] = $days_of_week_disabled;
      }
    }

    if (isset($element['value']) && isset($element['value2'])) {
      $value_name = $element['#name'] . '[value][date]';
      $value2_name = $element['#name'] . '[value2][date]';

      if (!empty($settings['bdtpicker_activate_value2'])) {
        $element['value']['#datepicker_next'] = array(
          'name' => $value2_name,
          'type' => 'end',
        );
      }

      if (!empty($settings['bdtpicker_activate_value'])) {
        $element['value2']['#datepicker_next'] = array(
          'name' => $value_name,
          'type' => 'start',
        );
      }

      if (!empty($settings['bdtpicker_chain_next'])) {
        $element['value']['#datepicker_chain'][$value2_name] = 'next';

        if (!empty($element['value']['#default_value'])) {
          $element['value2']['#datepicker_options']['minDate'] = date_format_date(
            new DateObject($element['value']['#default_value'], NULL, DATE_FORMAT_DATETIME),
            'custom',
            $element['value2']['#date_format']
          );
        }
      }

      if (!empty($settings['bdtpicker_chain_previous'])) {
        $element['value2']['#datepicker_chain'][$value_name] = 'previous';

        if (!empty($element['value2']['#default_value'])) {
          $element['value']['#datepicker_options']['maxDate'] = date_format_date(
            new DateObject($element['value2']['#default_value'], NULL, DATE_FORMAT_DATETIME),
            'custom',
            $element['value']['#date_format']
          );
        }
      }
    }
  }
}

/**
 * Form API #process callback.
 */
function bdtpicker_element_date_text_process($element, &$form_state) {
  if (array_key_exists('#bdtpicker', $element) && !$element['#bdtpicker']) {
    return $element;
  }

  $element['date']['#attributes']['class'][] = 'bdtpicker';
  $element['date']['#date_format'] = $element['#date_format'];

  if (isset($element['#date_increment']) && $element['#date_increment'] > 0) {
    $element['date']['#datepicker_options']['minuteStepping'] = (int) $element['#date_increment'];
    if ($element['#date_increment'] == 60) {
      $element['#datepicker_options']['useMinutes'] = FALSE;
    }
  }

  $prefix = '#datepicker_';
  foreach (array_keys($element) as $key) {
    if (strpos($key, $prefix) === 0) {
      $element['date'][$key] = $element[$key];
    }
  }

  return $element;
}

/**
 * Form API #process callback.
 */
function bdtpicker_element_textfield_process($element, &$form_state) {
  if (empty($element['#date_format'])
    || !isset($element['#attributes']['class'])
    || !in_array('bdtpicker', $element['#attributes']['class'])
  ) {
    return $element;
  }

  $element['#attributes']['data-date-format'] = moment_date_format_to_moment_date_format($element['#date_format']);
  $element['#attached']['libraries_load'][] = array('bootstrap-datetimepicker');

  $granularity = date_format_order($element['#date_format']);

  $state = 'with';
  if (!date_has_date($granularity)) {
    $element['#datepicker_options']['pickDate'] = FALSE;
    $state .= 'out';
  }
  $element['#attributes']['class'][] = "date-$state-date";

  $state = 'with';
  if (!date_has_time($granularity)) {
    $element['#datepicker_options']['pickTime'] = FALSE;
    $state .= 'out';
  }
  $element['#attributes']['class'][] = "date-$state-time";

  if (in_array('second', $granularity)) {
    $element['#datepicker_options']['useSeconds'] = TRUE;
  }

  if (!isset($element['#datepicker_options']['useCurrent'])) {
    $element['#datepicker_options']['useCurrent'] = FALSE;
  }

  $js_settings = array();
  $prefix = '#datepicker_';
  $prefix_length = drupal_strlen($prefix);
  foreach (array_keys($element) as $key) {
    if (strpos($key, $prefix) === 0) {
      $name = drupal_substr($key, $prefix_length);
      $js_settings[$name] = $element[$key];
    }
  }

  if ($js_settings) {
    $element['#attached']['js'][] = array(
      'type' => 'setting',
      'data' => array(
        'bdtpicker' => array(
          'instances' => array(
            $element['#id'] => $js_settings,
          ),
        ),
      ),
    );
  }

  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function bdtpicker_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  $name = 'bdtpicker_attach_to_created__node';
  $type = $form['#node_type']->type;
  $form['submission'][$name] = array(
    '#type' => 'radios',
    '#required' => TRUE,
    '#title' => t('Attach Bootstrap Date & Time picker to %label field', array('%label' => t('Authored on'))),
    '#default_value' => variable_get("{$name}__{$type}", 'global'),
    '#options' => array(
      'global' => t('Use global settings'),
      'enabled' => t('Enabled'),
      'disabled' => t('Disabled'),
    ),
  );
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function bdtpicker_form_node_form_alter(&$form, &$form_state, $form_id) {
  $date_format = 'Y-m-d H:i:s O';
  $type = $form_state['build_info']['args'][0]->type;
  $prefix = 'bdtpicker_attach_to_created__node';
  $globally_enabled = variable_get($prefix, TRUE);
  $type_level = variable_get("{$prefix}__{$type}", 'global');
  $enabled = (($globally_enabled && $type_level === 'global') || $type_level === 'enabled');
  if ($enabled && isset($form['author']['date'])) {
    $form['author']['date']['#date_format'] = $date_format;
    $form['author']['date']['#attributes']['data-date-format'] = moment_date_format_to_moment_date_format($date_format);
    $form['author']['date']['#attributes']['class'][] = 'bdtpicker';
  }
}
