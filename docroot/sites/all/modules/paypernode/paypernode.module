<?php

/**
 * check if node_type_get_types() on lines marked as REBUILD
 */

/**
 * Implements hook_help().
 */
function paypernode_help($section = 'admin/help#paypernode') {

  switch ($section) {
    case 'admin/help#paypernode':
      $output = '<p>' . t('The pay-per-node system allows creation of a limited number of nodes by users.') . '</p>';
      $output .= '<p>' . t('This module overrides node creation permissions so users that are not allowed to create a given node type can still create them.') . '</p>';
      $output .= '<ul>';
      $output .= '<li>' . t('Review the content type settings to enable/disable pay-per-node for each content type') . '</li>';
      $output .= '<li>' . t('Review node creation permissions for the roles and content types you want to use pay-per-node.') . '</li>';
      $output .= '<li>' . t('If a user has permission to create a content type, that nodes won\'t be counted by the pay-per-node system') . '</li>';
      $output .= '<li>' . t('You can handle the allowed number of nodes manually.') . '</li>';
      $output .= '</ul>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function paypernode_menu() {
  $items = array();

  $items['admin/settings/paypernode'] =
    array(
      'title' => 'Pay per node',
      'description' => 'Pay per node administration pages',
      'page callback' => 'paypernode_admin_overview',
      'access callback' => 'user_access',
      'access arguments' => array('administer pay-per-node system'),
      'file' => 'paypernode.admin.inc'
    );

  $items['admin/settings/paypernode/view'] =
    array(
      'title' => 'overview',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'access callback' => 'user_access',
      'access arguments' => array('administer pay-per-node system'),
      'weight' => 0,
      'file' => 'paypernode.admin.inc'
    );

  $items['admin/settings/paypernode/allowed'] =
    array(
      'title' => 'allowed content types',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'paypernode_admin_types',
      'access callback' => 'user_access',
      'access arguments' => array('administer pay-per-node system'),
      'weight' => 3,
      'file' => 'paypernode.admin.inc'
    );

  $items['admin/settings/paypernode/bulk'] =
    array(
      'title' => 'bulk operations',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'paypernode_admin_bulk',
      'access callback' => 'user_access',
      'access arguments' => array('administer pay-per-node system'),
      'weight' => 1,
      'file' => 'paypernode.admin.inc'
    );

  $items['user/%user/paypernode'] =
    array('title' => 'Pay per node',
      'page callback' => 'paypernode_user_page',
      'type' => MENU_LOCAL_TASK,
      'weight' => 2,
      'page arguments' => array(1),
      'access arguments' => array(1),
      'access callback' => 'paypernode_user_menu',
      'file' => 'paypernode.user.inc'
    );

  return $items;
}

/*
 * access callback for user's paypernode balance page
 */
function paypernode_user_menu($current_user) {
  global $user;
  return ($user->uid && $user->uid == $current_user->uid && user_access('access own pay-per-node balance')) || user_access('administer pay-per-node system');
}

/*
 * override node/add
 */
function paypernode_menu_alter(&$items) {
  $items['node/add']['page callback'] = 'paypernode_node_add_page';
  $items['node/add']['access callback'] = 'paypernode_node_add_page_access_check';
  $items['node/add']['file path'] = drupal_get_path('module', 'node');
  // REBUILD
  foreach (node_type_get_types() as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $items['node/add/' . $type_url_str] = array(
      'title' => drupal_ucfirst($type->name),
      'title callback' => 'check_plain',
      'page callback' => 'paypernode_node_add_new',
      'page arguments' => array(2),
      'access callback' => 'paypernode_node_add_new_access_check',
      'access arguments' => array($type->type),
      'description' => $type->description,
      'file' => 'node.pages.inc',
      'file path' => drupal_get_path('module', 'node'),
    );
  }
}

/*
 * access callback for node/add/$type overridden menu voice
 *
 */
function paypernode_node_add_new_access_check($type) {
  // fetching global perms
  $perms=paypernode_global_node_creation();
  // user can create node with or without paypernode
  if (array_key_exists($type, $perms['with_perms']) || array_key_exists($type, $perms['with_ppn'])) {
    return TRUE;
  }
  // user cannot create node type at all
  return FALSE;
}

/*
 * create an array of node types that user can create
 * with assigned permissions and with paypernode
 * used for menÃ¹ system access permissions
 */
function paypernode_global_node_creation() {
  static $_paypernode_global_node_creation;

  // check if already prepared
  if ($_paypernode_global_node_creation==NULL)
      $_paypernode_global_node_creation=array();
  else
      return $_paypernode_global_node_creation;

  // build arrays
  $_paypernode_global_node_creation['with_perms']=array(); // with permissions
  $_paypernode_global_node_creation['with_ppn']=array(); // with ppn

  // all system node types (REBUILD)
  foreach (node_type_get_types() as $type) {
      // user can create node with his assigned permissions
      if (node_access('create', $type->type)) {
        $_paypernode_global_node_creation['with_perms'][$type->type]=-1; // unlimited
      }
  }

  // get ppn allowed types
  $allowed = paypernode_user_can_create();

  // pay-per-node handled
  foreach (paypernode_get_types(TRUE) as $type => $obj) {
    // user can create node with paypernode (and NOT with Drupal permission system)
    if (isset($allowed[$type]) && $allowed[$type]>0 && !isset($_paypernode_global_node_creation['with_perms'][$type])) {
      $_paypernode_global_node_creation['with_ppn'][$type]=$obj;
      $_paypernode_global_node_creation['with_ppn'][$type]->allowed=$allowed[$type]; // allowed with ppn
    }
  }

  return $_paypernode_global_node_creation;
}

/*
 * called when a user point to node/add/%type page
 */
function paypernode_node_add_new() {
  $perms=paypernode_global_node_creation();

  $args=func_get_args();

  // re-convert hyphens to underscores
  $args[0]=str_replace('-', '_', $args[0]);

  // first argument must be always node type i.e. page, story, ad
  $type=array_shift($args);

  // if user can create this content type using his assigned permissions
  if (array_key_exists($type, $perms['with_perms'])) {

    // go through normal node_add
    return node_add($type);

  // if user can create this content sub-type using payperndode
  }
  elseif ( array_key_exists($type, $perms['with_ppn']) ) {
    global $user;

    $output="";

    // Initialize new node settings:
    $node = new stdClass;
    $node->uid = $user->uid;
    $node->name = (isset($user->name) ? $user->name : '');
    $node->type = $type;
    $node->language = '';
    $node->paypernode_type = $type;

    // allow other modules to handle initial setting
    drupal_alter('paypernode_data', $node);

    // call form
    $output = drupal_get_form($type . '_node_form', $node);
    drupal_set_title(t('Submit !name', array('!name' => $perms['with_ppn'][$type]->name)));

    return $output;
  }
  // why we get here?!?
  else {
    drupal_not_found();
  }
}

/*
 * access callback for node/add page
 *
 */
function paypernode_node_add_page_access_check() {
  $perms=paypernode_global_node_creation();
  return ( sizeof($perms['with_perms']) || sizeof($perms['with_ppn']) );
}

/**
 * function paypernode_node_add
 * Menu callback for creating nodes, similar to node_add
 */
function paypernode_node_add_page() {
  global $user;

  $items=array();
  $perms=paypernode_global_node_creation();
  $types=array_merge($perms['with_perms'], $perms['with_ppn']);

  // fallback to default: there's no content that user can create with ppn
  if (!sizeof($perms['with_ppn'])) {
    return node_add_page();
  }

  // get name and description for node types that user can create without ppn
  if ( sizeof($perms['with_perms']) ) {
    $node_types=node_type_get_types();

    foreach ($perms['with_perms'] as $type => $dummy) {
      $url_to_create=str_replace('_', '-', $node_types[$type]->type);
      $items[]=array(
        'title' => t($node_types[$type]->name),
        'href' => "node/add/" . $url_to_create,
        'description' => t($node_types[$type]->description),
        'localized_options' => array(),
      );
    }
  }

  // get name and description for node types that user can create with ppn
  foreach ($perms['with_ppn'] as $type => $ppn_type) {
    $url_to_create=str_replace('_', '-', $type);
    $items[]=array(
      'title' => t($ppn_type->name),
      'href' => "node/add/" . $url_to_create,
      'description' => t($ppn_type->description),
      'localized_options' => array(),
    );
  }

  if (sizeof($items)) {
    return theme('node_add_list', array('content' => $items));
  }
  // there is no content to create at all
  else {
    return t('You are not allowed to create content.');
  }
}

/**
 * Implements hook_form_node_form_alter().
 * (hook_form_BASE_FORM_ID_alter)
 */
function paypernode_form_node_form_alter(&$form, &$form_state, $form_id) {
  $perms = paypernode_global_node_creation();
  $paypernode_type = isset($form['#node']->paypernode_type) ? $form['#node']->paypernode_type : ( isset($form_state['node']->paypernode_type) ?  $form_state['node']->paypernode_type : FALSE ) ;

  if ($paypernode_type && isset($perms['with_ppn'][$paypernode_type]) && ($number = $perms['with_ppn'][$paypernode_type]->allowed) > 0) {
    // add some information
    $form['paypernode'] = array(
        '#type' => 'fieldset',
        '#title' => t('Pay per node system'),
        '#weight' => -10,
        '#tree' => TRUE,
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
    );
    $form['paypernode']['text'] = array(
        '#type' => 'item',
        '#markup' => '<h3>' . t('You can create %number nodes of type %type', array('%number' => $number, '%type' => $perms['with_ppn'][$paypernode_type]->name)) . '</h3>'
    );

    // setting form parameter
    $form['#paypernode_type'] = $paypernode_type;

    // allow module to alter form
    $form_alter = module_invoke($perms['with_ppn'][$paypernode_type]->module, 'paypernode_form_alter', $form, $form_state);
    if ($form_alter) {
      $form = $form_alter;
    }

    // altering submit button form submit callback
    $form['actions']['submit']['#submit'] = array('paypernode_node_form_submit');

    // altering submit button form submit callback
    $form['actions']['preview']['#submit'] = array('paypernode_node_form_preview');

  }
}

/*
 *	This function follow closely node_form_build_preview
 */
function paypernode_node_form_preview($form, &$form_state) {
  $node = node_form_submit_build_node($form, $form_state);
  $form_state['node_preview'] = _paypernode_node_preview($node);
  $form_state['rebuild'] = TRUE;
}

/*
 *	This function follow closely node_preview
 */
function _paypernode_node_preview($node) {
  // check ppn permissions
  $perms=paypernode_global_node_creation();
  $paypernode_type=isset($node->paypernode_type) ? $node->paypernode_type : FALSE;
  if ( ($paypernode_type && isset($perms['with_ppn'][$paypernode_type]) && ($number = $perms['with_ppn'][$paypernode_type]->allowed) > 0) || node_access('update', $node) ) {
    _field_invoke_multiple('load', 'node', array($node->nid => $node));
    // Load the user's name when needed.
    if (isset($node->name)) {
      // The use of isset() is mandatory in the context of user IDs, because
      // user ID 0 denotes the anonymous user.
      if ($user = user_load_by_name($node->name)) {
        $node->uid = $user->uid;
        $node->picture = $user->picture;
      }
      else {
        $node->uid = 0; // anonymous user
      }
    }
    elseif ($node->uid) {
      $user = user_load($node->uid);
      $node->name = $user->name;
      $node->picture = $user->picture;
    }

    $node->changed = REQUEST_TIME;
    $nodes = array($node->nid => $node);
    field_attach_prepare_view('node', $nodes, 'full');

    // Display a preview of the node.
    if (!form_get_errors()) {
      $node->in_preview = TRUE;
      $output = theme('node_preview', array('node' => $node));
      unset($node->in_preview);
    }
    drupal_set_title(t('Preview'), PASS_THROUGH);

    return $output;
  }
}

/**
 * Form API callback for node creation
 * We should get here only with pay-per-node node edited forms
 * This function follows closely node_form_submit
 */
function paypernode_node_form_submit($form, &$form_state) {
  $node = node_form_submit_build_node($form, $form_state);
  if (isset($node->paypernode_type) && $node->paypernode_type != NULL && paypernode_user_can_create($node->paypernode_type)) {
    node_save($node);
    $node_link = l(t('view'), 'node/' . $node->nid);
    $watchdog_args = array(
      '@type' => $node->type,
      '%title' => $node->title,
    );
    $t_args = array(
      '@type' => node_type_get_name($node),
      '%title' => $node->title,
    );

    watchdog('content', '@type: added %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
    drupal_set_message(t('@type %title has been created.', $t_args));

    if ($node->nid) {
      // keep track of this node in tracker table for future use (i.e. recreating node upon deletion)
      db_insert('paypernode_tracker')->
      fields(array(
        'nid' => $node->nid,
        'node_type' => $node->paypernode_type,
      ))->execute();
      $form_state['values']['nid'] = $node->nid;
      $form_state['nid'] = $node->nid;
      $form_state['redirect'] = 'node/' . $node->nid;
    }
    else {
      // In the unlikely case something went wrong on save, the node will be
      // rebuilt and node form redisplayed the same way as in preview.
      drupal_set_message(t('The post could not be saved.'), 'error');
      $form_state['rebuild'] = TRUE;
    }
    // Clear the page and block caches.
    cache_clear_all();
  }
  else {
    drupal_set_message(t('You cannot create a content of this type'));
  }
}

/**
 * Implements hook_nodeapi().
 */
function paypernode_node_insert($node) {
  if (isset($node->paypernode_type))  {
    // Decrease user balance for this node type
    // Get uid from node
    paypernode_update_user_balance($node->uid, $node->paypernode_type, 0, 1);
    $typename = node_type_get_name($node);
    $left = paypernode_user_can_create($node->paypernode_type, TRUE); // Last argument to refresh cache
    // Log event and display additional user message.
    watchdog('paypernode', 'Pay per node %typename node created. %number nodes left.', array('%number' => $left, '%typename' => $typename));
    drupal_set_message(t("The node has been charged into the Pay per node system. You have %number nodes of type %typename left.", array('%number' => $left, '%typename' => $typename)));
  }
}

/**
 * Implements hook_permission().
 */
function paypernode_permission() {
  return array(
    'administer pay-per-node system' => array(
      'title' => t('Administer Pay per node system'),
      'description' => t('Allow user to manage Pay per node system'),
    ),
    'access own pay-per-node balance' => array(
      'title' => t('Access own Pay per node balance'),
      'description' => t('Allow user to see Pay per node tab on own profile page'),
    )
  );
}

/**
 * Implements hook_block_info().
 */
function paypernode_block_info() {
  $blocks['balance'] = array(
    'info' => t('Pay per node balance'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function paypernode_block_view($delta = 'balance') {
  $blocks = array();
  switch ($delta) {
    case 'balance':
      global $user;
      if ($user->uid) {
        $balance = paypernode_user_get_balance($user->uid);
        if (count($balance)) {
          $blocks['subject'] = t('Pay per node account');
          $nodetypes=paypernode_get_types();
          $header = array(t('Type'), t('Allowed'));
          foreach ($balance as $type => $data) {
            if ($data->allowed - $data->created>0 && isset($nodetypes[$type])) {
              $rows[] = array($nodetypes[$type]->name, $data->allowed - $data->created);
            }
          }
          if (!count($rows)) {
            $rows[] = array(t('You are not allowed to create content.'));
          }
          $blocks['content'] =  theme('table', array('header' => $header, 'rows' => $rows));
          $blocks['content'] .= '<div class="more-link">' . l(t('My account'), "user/$user->uid/paypernode", array('title' => t('Full view of my Pay per node account.'))) . '</div>';
        }
      }
    break;
  }
  return $blocks;
}

/**
 * Node system and helper functions
 */

/**
 * Get pay-per-node user balance
 * Balance is cached per user
 * @param $refresh to reload user balance from db
 */
function paypernode_user_get_balance($uid = NULL, $refresh = FALSE) {
  static $balance = array();
  // User check
  global $user;
  $uid = user_access('administer pay-per-node system') ? ($uid ? $uid : $user->uid) : $user->uid;
  if ($refresh) {
    unset($balance[$uid]);
  }

  // Retrieve data
  if (!isset($balance[$uid])) {
    $balance[$uid] = array();
    $result = db_query("SELECT * FROM {paypernode_user} WHERE uid=:uid", array(':uid' => $uid));
    while ($item = $result->fetchObject()) {
      $balance[$uid][$item->node_type] = $item;
    }
  }
  return $balance[$uid];
}

/**
 * Get number of nodes user can create
 */
function paypernode_user_can_create($type = NULL, $refresh = FALSE) {
  $balance = paypernode_user_get_balance(NULL, $refresh);
  $cancreate = array();
  foreach ($balance as $item) {
    $cancreate[$item->node_type] = $item->allowed - $item->created;
  }

  if ($type) {
    return array_key_exists($type, $cancreate) ? $cancreate[$type] : 0;
  }
  else {
    return $cancreate;
  }
}

/**
 * Database layer
 * Add/set a number of nodes for an user;
 */
function paypernode_update_user_balance($uid, $type, $allowed = 0, $created =0, $op = 'add') {
  // Enclose number in parentheses for query. This will support either possitive or negative values
  switch ($op) {
    case 'add':
      $affected_rows = db_update('paypernode_user')
        ->fields(array('changed' => REQUEST_TIME))
        ->expression('allowed', 'allowed + :allowed', array(':allowed' => $allowed))
        ->expression('created', 'created + :created', array(':created' => $created))
        ->condition('uid', $uid)
        ->condition('node_type', $type)
        ->execute();
      break;
    case 'set':
      $affected_rows = db_update('paypernode_user')
        ->fields(array('allowed' => $allowed, 'created' => $created, 'changed' => REQUEST_TIME))
        ->condition('uid', $uid)
        ->condition('node_type', $type)
        ->execute();
      break;
  }
  // If row doesn't exist, create
  if (!$affected_rows) {
    $data = array(
      'uid' => $uid,
      'node_type' => $type,
      'allowed' => $allowed,
      'created' => $created,
      'changed' => REQUEST_TIME
    );
    drupal_write_record('paypernode_user', $data);
  }
}

/**
 * Get node types for the pay-per-node system
 *  supported node types:
 *     created by node module in admin UI (node.module)
 *     ad types (ad.module)
 */
function paypernode_get_types($all = FALSE) {
  static $_paypernode_node_types;

  // REBUILD
  if (!isset($_paypernode_node_types)) {
    $_paypernode_node_types = array();
    foreach (node_type_get_types() as $type) {
      $_paypernode_node_types[$type->type]=new stdClass;
      $_paypernode_node_types[$type->type]->name=drupal_ucfirst(filter_xss_admin($type->name));
      $_paypernode_node_types[$type->type]->description=$type->description;
      $_paypernode_node_types[$type->type]->module=$type->module;
    }
  }

  // ONLY ENABLED
  if (!$all) {
    foreach ($_paypernode_node_types as $type_type => $type) {
      if (variable_get('paypernode_type_' . $type_type, FALSE)) {
        $return[$type_type] = $_paypernode_node_types[$type_type];
      }
    }
  // RETURN ALL
  }
  else {
    $return = $_paypernode_node_types;
  }

  return $return;
}
