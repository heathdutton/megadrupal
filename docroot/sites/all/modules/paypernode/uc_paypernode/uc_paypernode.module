<?php

/**
 * Implements hook_default_rules_configuration().
 */
function paypernode_default_rules_configuration() {
  $rule = rules_reaction_rule();
  $rule->label = t('Update the user pay-per-node balance when order is completed.');
  $rule->active = TRUE;
  $rule->event('uc_order_status_update'); // event --> order updated
  $rule->condition('data_is', // comparison
      array(
        'data:select' => 'updated_order:order-status', // the status of updated order is "completed"
        'value' => 'completed'
      )
    )
    ->action('paypernode_order_completed');
  $configs['paypernode_update_balance'] = $rule;
  return $configs;
}

/**
 * Implements hook_rules_action_info().
 */
function paypernode_rules_action_info() {
  $actions['paypernode_order_completed'] = array(
    'label' => t('Update the user pay-per-node balance'),
    'group' => t('Paypernode'),
    'base' => 'paypernode_action_order_completed',
    'parameter' => array(
      'order' => array(
        'type' => 'uc_order',
        'label' => t('Order'),
      ),
    ),
  );
  return $actions;
}

/**
 * Implements callback function for hook_rules_action_info().
 *
 * @see paypernode_rules_action_info()
 */
function paypernode_action_order_completed($order, $settings) {
  // Loop through all the products on the order.
  foreach ($order->products as $product) {
    // Look for any paypernode features assigned to the product.
    $query = db_query("SELECT * FROM {uc_paypernode_products} WHERE nid = :nid", array(':nid' => $product->nid));
    while ($paypernode = $query->fetchObject()) {
      $creation_qty = $product->qty * $paypernode->qty;
      paypernode_update_user_balance($order->uid, $paypernode->type, $creation_qty);
      $comment = t('Customer now can create %qty of type %type.', array('%qty' => $creation_qty, '%type' => $paypernode->type));
      uc_order_comment_save($order->order_id, $order->uid, $comment);
    }
  }
}

/**
 * Implements hook_uc_product_feature().
 */
function paypernode_uc_product_feature() {
  $features[] = array(
    'id' => 'paypernode',
    'title' => t('Pay-per-node'),
    'callback' => 'paypernode_feature_form',
    'delete' => 'paypernode_feature_delete',
    'settings' => NULL,
  );
  return $features;
}

function paypernode_feature_form_validate($form, &$form_state) {
  if (!is_numeric($form_state['values']['qty']) || $form_state['values']['qty']<=0) {
    form_set_error('qty', t('Quantity must be a positive integer.'));
  }
}

function paypernode_feature_form_submit($form, &$form_state) {
    $fv=$form_state['values'];

    $ppndata=array(
      'pfid' => isset($fv['pfid']) ? $fv['pfid'] : NULL,
      'nid' => $fv['nid'],
      'type' => $fv['type'],
      'qty' => $fv['qty'],
      'pid' => isset($fv['pid']) ? $fv['pid'] : NULL,
    );

    $fdata=array(
        'pfid' => isset($fv['pfid']) ? $fv['pfid'] : NULL,
        'nid'  => $fv['nid'],
        'fid'  => 'paypernode',
        'description' => $fv['qty'] . ' of type ' . $fv['type'],
    );

    $form_state['redirect'] = uc_product_feature_save($fdata);
    $ppndata['pfid'] = $fdata['pfid'];
    $key = array();
    if ($pid = _paypernode_get_pid($ppndata['pfid'])) {
      $key='pid';
      $ppndata['pid'] = $pid;
    }
    drupal_write_record('uc_paypernode_products', $ppndata, $key);

}

/**
 * Gets a pay-per-node product id from a product feature id.
 */
function _paypernode_get_pid($pfid) {
  return db_query("SELECT pid FROM {uc_paypernode_products} WHERE pfid = :pfid", array(':pfid' => $pfid))->fetchField();
}

function paypernode_feature_delete($pfid) {
  db_delete('uc_paypernode_products')->condition('pfid', $pfid)->execute();
}

/**
 * Form builder for hook_product_feature.
 *
 * @see paypernode_feature_form_validate()
 * @see paypernode_feature_form_submit()
 * @ingroup forms
 */
function paypernode_feature_form($form, &$form_state, $node, $feature) {

    // EDIT MODE
    if (!empty($feature)) {
        // fetch existent feature id
        $paypernode = db_query("SELECT * FROM {uc_paypernode_products} WHERE pfid = :pfid", array(':pfid' => $feature['pfid']))->fetchObject();
        $form['pfid'] = array(
          '#type' => 'value',
          '#value' => $paypernode->pfid,
        );
        $form['pid'] = array(
          '#type' => 'value',
          '#value' => $paypernode->pid,
        );
    }
    // product nid
    $form['nid'] = array(
      '#type' => 'value',
      '#value' => $node->nid,
    );
    $form['qty'] = array(
        '#type' => 'textfield',
        '#title' => t('Quantity'),
        '#required' => TRUE,
        '#default_value' => isset($paypernode->qty) ? $paypernode->qty : 1,
        '#description' => t("How many nodes the user will be allowed to create."),
    );

    $ppn_types = paypernode_get_types();

    $options = array();
    if (count($ppn_types)) {
      foreach ($ppn_types as $ppn_system_name => $ppn_object) {
          $options[$ppn_system_name] = $ppn_object->name;
      }
    }

    $form['type'] = array(
      '#type' => 'radios',
      '#title' => t('Node type'),
      '#required' => TRUE,
      '#default_value' => isset($paypernode->type) ? $paypernode->type : NULL,
      '#options' => $options,
      '#description' => t("Node type the user will be allowed to create."),
    );

    return $form;
}
