<?php
/**
 * @file
 * Main file for badbot module.
 */

/*----------------------------------------------------------------------------
      CONFIG
----------------------------------------------------------------------------*/

// wishlist:
  // TODO: spam JS-detection
  // TODO: integration w/ stopforumspam.com
  // TODO: scraper honeypot
  // TODO: email honeypot
  // TODO: teergrubing ??
  // TODO: limit number of hits from same IP per time period?
  // TODO: no user agent string? block 'em

define('BADBOT_FORMS_MESSAGE', t('For assistance, please contact the site administrator.'));
define('BADBOT_FIELD', 'badbot');
define('BADBOT_VALIDATION_FIELD', 'badbot_validate');

/*----------------------------------------------------------------------------
      DRUPAL HOOKS
----------------------------------------------------------------------------*/

/**
 * Implements hook_menu();
 */
function badbot_menu() {
  $items['badbot/token'] = array(
    'title' => 'Token generation',
    'page callback' => 'badbot_js_token',
    'access callback' => TRUE,
  );

  $items['admin/config/system/badbot'] = array(
    'title' => 'Badbot',
    'description' => 'Configuration page for Badbot module',
    'page callback' => 'badbot_settings',
    'access arguments' => array('administer badbot'),
  );
  
  return $items;
}

/**
 * Implements hook_permissions();
 */
function badbot_permission() {
  return array(
    'administer badbot' => array(
      'title' => t('Administer badbot'), 
      'description' => t('Administer settings for Badbot.'),
    ),
  );
}

/**
 * Implements hook_form_alter();
 */
function badbot_form_alter(&$form, &$form_state, $form_id) {
  // protecting our own configuration form can lead to trouble
  if ($form_id == 'badbot_settings_form') {
    return;
  }

  // salt must be set in order for us to protect any form
  if (!variable_get('badbot_forms_salt', FALSE)) {
    return;
  }

  // pull up configured form IDs and determine whether we need to protect the
  // current form or not
  $forms = variable_get('badbot_forms_ids', array());
  $protect = FALSE;

  if (isset($forms['all'])) {
    $protect = TRUE;
  }
  elseif (isset($forms['exact']) && in_array($form_id, $forms['exact'])) {
    $protect = TRUE;
  }
  elseif (isset($forms['pattern']) && is_array($forms['pattern'])) {
    foreach ($forms['pattern'] as $key => $value) {
      if (preg_match('`^' . $value . '$`', $form_id)) {
        $protect = TRUE;
        break;
      }
    }
  }

  if ($protect) {
    // include our core JS
    drupal_add_js(drupal_get_path('module', 'badbot') . '/js/badbot.js');

    $form['badbot_wrapper'] = array(
      '#type' => 'fieldset',
      '#title' => t('Badbot Fields'),
      '#description' => t('If you see these fields, something is wrong.'),
      '#attributes' => array(
        'class' => array('element-hidden'),
      ),
      '#tree' => TRUE,
    );

    // create validation field which will be populated with the token upon form submission;
    // this field is hidden from view, so normal users will never see it.
    $form['badbot_wrapper'][BADBOT_FIELD] = array(
      '#type' => 'textfield',
      '#default_value' => user_password(),
      '#title' => t('Badbot seed'),
      '#description' => t('If you see this field, something is wrong.'),
    );

    $form['badbot_wrapper'][BADBOT_VALIDATION_FIELD] = array(
      '#type' => 'textfield',
      '#title' => t('Badbot hash'),
      '#description' => t('If you see this field, something is wrong.'),
    );

    $form['badbot_wrapper']['last_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Badbot catch'),
      '#description' => t('If you see this field, something is wrong.'),
    );

    // track our form id & relevant fields and save to Drupal.settings for access from our
    // core JS. If two+ forms on the same page use badbot, it's possible for the last form
    // to call this hook to overwrite the JS settings of previous forms, so we track all
    // form IDs in a static variable to ensure that doesn't happen
    $form_ids = &drupal_static(__FUNCTION__);
    if (!isset($form_ids)) {
      $form_ids = array();
    }

    $form_ids[] = array(
      'form_id' => $form['#id'],
      'field' => BADBOT_FIELD,
      'validation_field' => BADBOT_VALIDATION_FIELD,
    );

    drupal_add_js(array(
      'badbot' => array(
        'base_path' => url('', array('absolute' => TRUE)),
        'forms' => $form_ids,
      ),
    ), 'setting');

    // validation handler to check the token.
    $form['#validate'][] = 'badbot_form_validate';
  }
}

/*----------------------------------------------------------------------------
      CALLBACKS
----------------------------------------------------------------------------*/

/**
 * Callback for /admin/config/system/badbot
 */
function badbot_settings() {
  $form = drupal_get_form('badbot_settings_form');
  $output = drupal_render($form);
  return $output;
}

/**
 * Callback for /badbot/token
 * @return [type] [description]
 */
function badbot_js_token($field_data, $return = FALSE) {
  $token = md5(variable_get('badbot_forms_salt', FALSE) . $field_data);

  if ($return) {
    return $token;  
  }
  else {
    echo $token;
    exit();   
  }
}

/*----------------------------------------------------------------------------
      FORMS
----------------------------------------------------------------------------*/

/**
 * Main module settings form.
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @return [type]             [description]
 */
function badbot_settings_form($form, &$form_state) {
  $form['badbot'] = array(
    '#type' => 'vertical_tabs',
  );
  
    $form['badbot']['forms'] = array(
      '#title' => t('Forms'),
      '#type' => 'fieldset',
      '#description' => t('Enable JavaScript detection on select forms.') . '<br/><br />',
    );

      $form['badbot']['forms']['badbot_forms_salt'] = array(
        '#title' => t('Salt'),
        '#type' => 'textfield',
        '#description' => t("This salt is used during the field hashing process. A salt was genererated
                             for you when the module was installed, but you're free to change it. If you 
                             don't know the consenquences of changing this value, it's best to leave it alone.") .
                          ' <strong>' . t('Do not disclose this value to anyone. Treat it as you would a password.') . '</strong>' ,
        '#default_value' => variable_get('badbot_forms_salt'),
      );

      $message = variable_get('badbot_forms_message', array(
        'value' => BADBOT_FORMS_MESSAGE,
        'format' => 'filtered_html',
      ));

      $form['badbot']['forms']['badbot_forms_message'] = array(
        '#title' => t('User Message'),
        '#type' => 'text_format',
        '#description' => t('Message to display to users that are regected by the spam filter. It would be useful to include a link to a contact form.') . '<br /><br />' ,
        '#default_value' => $message['value'],
        '#format' => $message['format'],
      );

      $badbot_forms_ids_str = '';
      $badbot_forms_ids = variable_get('badbot_forms_ids', array());

      // The more work we do here, the more efficient hook_form_alter() will be.
      if (isset($badbot_forms_ids['all'])) {
        $badbot_forms_ids_str .= "*\n";
      }

      if (isset($badbot_forms_ids['exact'])) {
        $badbot_forms_ids_str .= implode("\n", $badbot_forms_ids['exact']) . "\n";
      }

      if (isset($badbot_forms_ids['pattern'])) {
        $badbot_forms_ids_str .= str_replace('.*', '*', implode("\n", $badbot_forms_ids['pattern']));
      }

      $common['items'] = array(
        'user_register_form',
        'contact_site_form',
        'comment_node_*',
      );

      $form['badbot']['forms']['badbot_forms_ids'] = array(
        '#title' => t('Form IDs'),
        '#type' => 'textarea',
        '#description' => t("Type the IDs of the forms that you want Badbot to detect spam on. You 
                              can use * to make Badbot work on all forms or as a wildcard for partial matching (e.g. 
                              node_comment* to catch all comment forms).<br /><br />Some common IDs you might want to 
                              consider: !common_ids", array(
                                '!common_ids' => theme('item_list', $common),
                              )),
        '#default_value' => trim($badbot_forms_ids_str),
        '#element_validate' => array('badbot_forms_ids_validate'),
        '#required' => TRUE,
      );

  return system_settings_form($form);
}

/**
 * Badbot Form IDs form-element validation handler.
 */
function badbot_forms_ids_validate($element, &$form_state, $form) {
  $original = trim($form_state['values']['badbot_forms_ids']);

  if ($original != '*') {
    $ids = explode("\n", str_replace('*', '.*', $original));
    
    foreach ($ids as $id) {
      if ($id == '.*') {
        $value['all'] = TRUE;
      }
      elseif (strpos($id, '*') === FALSE) {
        $value['exact'][] = trim($id);
      }
      else {
        $value['pattern'][] = trim($id);
      }
    }
  }

  $form_state['values']['badbot_forms_ids'] = $value;
}

/**
 * Form validation handler for JavaScript-check enabled forms.
 */
function badbot_form_validate($form, &$form_state) {
  $error = FALSE;

  // ensure the token is what we expect it to be
  if (!isset($form_state['values']['badbot_wrapper'][BADBOT_VALIDATION_FIELD])
    || badbot_js_token($form_state['values']['badbot_wrapper'][BADBOT_FIELD], TRUE) != $form_state['values']['badbot_wrapper'][BADBOT_VALIDATION_FIELD]) {
    $error = TRUE;
    watchdog('badbot', 'Blocked form submission. (Bad token.)');
  }

  // Was it the empty field?
  if ($form_state['values']['badbot_wrapper']['last_name']) {
    $error = TRUE;
    watchdog('badbot', 'Blocked form submission. (Non empty field: @value)', array('@value' => $form_state['values']['badbot_wrapper']['last_name']));
  }

  if ($error) {
    $error_message = t('Sorry, our spam system has flagged your account. Possible reasons for this include:');

    $reasons = array();
    $reasons[] = t('You have Javascript turned off.');
    $reasons[] = t('Your email or IP address has been flagged as spam by third party services.');

    $error_message .= '<div class="badbot-block-reasons">' . theme('item_list', array('items' => $reasons)) .'</div>';
    
    $message = variable_get('badbot_forms_message', array(
      'value' => BADBOT_FORMS_MESSAGE,
      'format' => 'filtered_html',
    ));

    if ($message['value']) {
      $error_message .= check_markup(t($message['value']), $message['format']);
    }

    form_set_error('', $error_message);
    drupal_add_http_header('Status', '403 Forbidden');
  }
}

/*----------------------------------------------------------------------------
      INTERNAL
----------------------------------------------------------------------------*/