<?php

/**
 * @file
 * This module collects various fixes for Drupal core issues.
 *
 * It would be nice to get them committed to core at some point,
 * but in the meantime this can ease the pain.
 */


/**
 * Implements hook_init().
 *
 * Give a reddish tint to unpublished nodes.
 */
function fixcore_init() {
  if (variable_get('fixcore_node_unpublished', FALSE)) {
    // Override modules/node/node.css.
    drupal_add_css(drupal_get_path('module', 'fixcore') . "/fixcore-node_unpublished.css", array('group' => CSS_THEME));
  }
}

/**
 * Implements hook_menu().
 */
function fixcore_menu() {
  $items['admin/config/development/fixcore'] = array(
    'title' => 'Fix core',
    'description' => 'Enable various tweaks for core issues.',
    'file' => 'fixcore.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fixcore_settings_form'),
    'access arguments' => array('administer site configuration'),
  );
  if (variable_get('fixcore_avoid_msoffice_404', FALSE)) {
    $items['MSOffice/cltreq.asp'] =
    $items['_vti_bin/owssvr.dll'] =
    $items['_vti_bin/shtml.exe/_vti_rpc'] =
    $items['_vti_inf.html'] = array(
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
      'page callback' => 'fixcore_404_callback',
    );
  }
  return $items;
}

/**
 * Dummy function for use with fixcore_menu() above.
 *
 * Displays a simplified 404 page without logging anything.
 */
function fixcore_404_callback() {
  // Adapted from  drupal_deliver_html_page().
  drupal_add_http_header('Status', '404 Not Found');
  drupal_set_title(t('Page not found'));
  drupal_set_page_content(t('The requested page could not be found.'));
  $page = element_info('page');
  print drupal_render_page($page);
  return MENU_FOUND;
}

/**
 * Implements hook_user_update().
 *
 * Log password changes.
 */
function fixcore_user_update(&$edit, &$account, $category) {
  if (variable_get('fixcore_log_password_change', FALSE) && !empty($edit['pass'])) {
    $uid = $edit['original']->uid;
    watchdog('user', 'Password changed for %name.', array('%name' => $edit['name']), WATCHDOG_NOTICE, l(t('edit'), "user/$uid/edit"));
  }
}

/**
 * Implements hook_form_alter().
 *
 * Allows pre-selecting a contact page.
 */
function fixcore_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'contact_site_form' && variable_get('fixcore_contact_select', FALSE)) {
    if (isset($form_state['build_info']['args'][0]) && ($cid = $form_state['build_info']['args'][0]) && isset($form['cid']['#options'][$cid])) {
      $form['cid']['#default_value'] = $cid;
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Provides a link from the modules page.
 */
function fixcore_form_system_modules_alter(&$form, $form_state) {
  if (!empty($form['description']['fixcore'])) {
    $tr = 't';
    $form['description']['fixcore']['#value'] .= ' (<a href="' . url('admin/settings/fixcore') . '">' . $tr('Settings') . '</a>)';
  }
  if (variable_get('fixcore_protect_admin_role', FALSE) && !user_access('administer permissions')) {
    // Keep the (restricted) user from disabling this module.
    $form['modules'][t('Other')]['fixcore']['enable']['#disabled'] = TRUE;
    $form['modules'][t('Other')]['fixcore']['description']['#markup'] .= '<br /><span class="warning" title="' . t('You are not allowed to disable this module.') . '">' . t('(protected)') . '</span>';
  }
}

/**
 * Implements hook_form_alter().
 *
 * Removes the 'Administrator role' fieldset from
 * config/people/accounts/settings, unless the user has the
 * 'administer permissions' permission.
 */
function fixcore_form_user_admin_settings_alter(&$form, &$form_state) {
  if (variable_get('fixcore_protect_admin_role', FALSE)) {
    $form['admin_role']['#access'] = user_access('administer permissions');
  }
}

/**
 * Implements hook_form_alter().
 *
 * Adds a reminder to click [Save] after changing the password.
 */
function fixcore_form_user_profile_form_alter(&$form, &$form_state) {
  $tr = 't';
  if ($level = variable_get('fixcore_password_reminder', 0)) {
    $form['account']['pass']['#description'] .= '<br /><span class="fixcore-reminder">' . t('Be sure to <b>click the @Save button below</b> to save your changes.', array('@Save' => '[' . $tr('Save') . ']')) . '</span>';
    if ($level > 1) {
      $form['account']['pass']['#after_build'][] = 'fixcore_user_profile_form_process_password_reminder';
    }
  }
  if (variable_get('fixcore_redirect_user_edit', FALSE) && !user_access('administer users')) {
    $form['#submit'][] = 'fixcore_user_profile_form_submit';
  }
}

function fixcore_user_profile_form_process_password_reminder($element) {
  $element['#attached']['js'][] = drupal_get_path('module', 'fixcore') . '/fixcore_password.js';
  return $element;
}

function fixcore_user_profile_form_submit(&$form, &$form_state) {
  $form_state['redirect'] = 'user/' . $form_state['values']['uid'];
}

/**
 * Implements hook_watchdog().
 *
 * If an 'access denied' error is logged for user 1, then something is
 * seriously wrong: provide a backtrace so the user can see where the
 * error is generated.
 */
function fixcore_watchdog($log_entry) {
  if ($log_entry['type'] == 'access denied' && $log_entry['user']->uid == 1 && variable_get('fixcore_debug_access_denied', FALSE) && module_exists('devel')) {
    $bt = ddebug_backtrace(TRUE);
    for ($i = 0; $i < 5; ++$i) {
      array_shift($bt);
    }
    kpr($bt);
  }
}

/**
 * Implements hook_tokens_alter().
 *
 * Fix the [node:summary] token to return either the summary or the
 * trimmed body.
 */
function fixcore_tokens_alter(array &$replacements, $context) {
  if (variable_get('fixcore_empty_summary_token', FALSE)) {
    if (isset($replacements['[node:summary]']) && empty($replacements['[node:summary]'])) {
      if (isset($context['options']['language'])) {
        $language_code = $context['options']['language']->language;
      }
      else {
        $language_code = NULL;
      }
      $node = $context['data']['node'];
      if ($items = field_get_items('node', $node, 'body', $language_code)) {
        $instance = field_info_instance('node', 'body', $node->type);
        $field_langcode = field_language('node', $node, 'body', $language_code);
        $output = $context['options']['sanitize'] ? _text_sanitize($instance, $field_langcode, $items[0], 'value') : $items[0]['value'];

        // From http://drupal.org/node/1300920#comment-6582536:
        // Identify the requested length of the string.
        $trim_length = NULL;
        if (isset($instance['display']['teaser']['settings']['trim_length']) && is_numeric($instance['display']['teaser']['settings']['trim_length'])) {
          $trim_length = $instance['display']['teaser']['settings']['trim_length'];
        }

        // Generate an optionally trimmed summary of the body field.
        $output = text_summary($output, $instance['settings']['text_processing'] ? $items[0]['format'] : NULL, $trim_length);

        $replacements['[node:summary]'] = $output;
      }
    }
  }
}

