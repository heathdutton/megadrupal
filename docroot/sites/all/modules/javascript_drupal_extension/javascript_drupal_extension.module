<?php

/**
 * @file
 * Exposes Drupal functionality to Javascript not already included in the
 * Drupal Javascript object.
 */

/**
 * Implements hook_help().
 */
function javascript_drupal_extension_help($path, $arg) {
  $output = '';

  switch ($path) {
    case 'admin/help#javascript_drupal_extension':
      $output .= '<h2>' . t('Introduction') . '</h2>';
      $output .= '<p>' . t('Current Maintainer') . ': <a href="http://drupal.org/user/2364270">PDNagilum</a> &lt;<a href="mailto:pdnagilum@gmail.com">pdnagilum@gmail.com</a>&gt;</p>';
      $output .= '<p>' . t('Ever needed to call a Drupal function from JavaScript that isn\'t already available in the Drupal JavaScript object? Javascript Drupal Extension fixes that by extending the Drupal object to expose PHP functions via AJAX-calls.') . '</p>';
      $output .= '<p>' . t('By default this module includes %functions. It all started with me needing to know the path of a module from JavaScript. I wrote a much simpler version that what you have in front of you now, and thus Javascript Drupal Extension was born. The latter function was added after a while, as it too is really nice to have around during development as well as debugging.', array('%functions' => 'drupal_get_path() and watchdog()')) . '</p>';
      $output .= '<h2>' . t('Example') . '</h2>';
      $output .= '<code>var path = Drupal.drupal_get_path(\'module\', \'my-awesome-module\');</code>';
      $output .= '<p>' . t('-or-') . '</p>';
      $output .= '<code>Drupal.drupal_get_path(\'module\', \'my-awesome-module\', \'callback-function-for-path\');</code>';
      $output .= '<p>' . t('Both these queues up the AJAX call, which by default is filtered through a whitelist to ensure safety, and either returns the output of the called function directly, or sends the output to the callback function supplied as the last argument. You can also supply another callback after the first one which will be used in case the AJAX-call fails for some reason. The default action in that case is to throw an error.') . '</p>';
      $output .= '<h2>' . t('Extending') . '</h2>';
      $output .= '<p>' . t('The module is written in such a way that extending other functions is as easy as adding a few lines of codes.') . '</p>';
      $output .= '<p>' . t('Let\'s say you wish to extend the %function function out to JavaScript. Yes I know it is already in the Drupal object, but just for show, let\'s pretend it isn\'t.', array('%function' => 't()')) . '</p>';
      $output .= '<p>' . t('All you have to do is add the following JavaScript code, somewhere:') . '</p>';
      $output .= '<code>Drupal.t = function (text) {<br />&nbsp;&nbsp;return javascript_drupal_extension_ajax_call(\'t\', { text });<br />}</code>';
      $output .= '<p>' . t('If you have the whitelisting feature enabled (which it is by default), you would also have to add the \'t\' function in the admin section.') . '</p>';
      $output .= '<p>' . t('If you want to throw callbacks in the mix, just extend the code as such:') . '</p>';
      $output .= '<code>Drupal.t = function (text, callback_success, callback_failure) {<br />&nbsp;&nbsp;return javascript_drupal_extension_ajax_call(\'t\', { text }, callback_success, callback_failure);<br />}</code>';

      return $output;
  }
}

/**
 * Implements hook_init().
 *
 * Includes the Javascript file in every request by Drupal.
 */
function javascript_drupal_extension_init() {
  drupal_add_js(
    drupal_get_path('module', 'javascript_drupal_extension') . '/javascript_drupal_extension' . (variable_get('javascript_drupal_extension_use_minified_js', TRUE) ? '.min' : '') . '.js'
  );

  drupal_add_js(array(
    'javascript_drupal_extension' => array(
      'ajax_callback_url' => variable_get('javascript_drupal_extension_ajax_callback_url', 'javascript-drupal-extension'),
    ),
    'watchdog'            => array(
      'WATCHDOG_EMERGENCY' => WATCHDOG_EMERGENCY,
      'WATCHDOG_ALERT'     => WATCHDOG_ALERT,
      'WATCHDOG_CRITICAL'  => WATCHDOG_CRITICAL,
      'WATCHDOG_ERROR'     => WATCHDOG_ERROR,
      'WATCHDOG_WARNING'   => WATCHDOG_WARNING,
      'WATCHDOG_NOTICE'    => WATCHDOG_NOTICE,
      'WATCHDOG_INFO'      => WATCHDOG_INFO,
      'WATCHDOG_DEBUG'     => WATCHDOG_DEBUG,
    ),
  ), 'setting');
}

/**
 * Implements hook_menu().
 *
 * The admin settings form allows the user to configure the URL to be used for
 * the AJAX callbacks from Javascript.
 */
function javascript_drupal_extension_menu() {
  $items = array();

  $items['admin/config/development/javascript-drupal-extension'] = array(
    'title'            => 'Javascript Drupal Extension',
    'description'      => 'Configure the Javascript Drupal Extension module.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('javascript_drupal_extension_config'),
    'access arguments' => array('administer javascript_drupal_extension'),
    'file'             => 'javascript_drupal_extension.admin.inc',
  );

  $items[variable_get('javascript_drupal_extension_ajax_callback_url', 'javascript-drupal-extension')] = array(
    'page callback'    => 'javascript_drupal_extension_execute',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function javascript_drupal_extension_permission() {
  return array(
    'administer javascript_drupal_extension' => array(
      'title'       => t('Administer Javascript Drupal Extension'),
      'description' => t('Perform administration tasks for Javascript Drupal Extension'),
    ),
  );
}

/**
 * Callback for the ajax-hook in the Javascript file.
 *
 * The second part of the URL called will be used as a function name. Post
 * vars, except Content-Type and Output-Is-JSON, will be used as parameters
 * for the function, in the passed order. The response from the function will
 * be passed out as the response to the ajax function.
 *
 * The parameters Content-Type and Output-Is-JSON sets the content type of the
 * output, and wether or not the output is to be formatted as a JSON array.
 *
 * Setting them both is of no use as Output-Is-JSON overrides Content-Type.
 *
 * @param string $function_name
 *   The function to call.
 *
 * @return string
 *   The output of the called function.
 */
function javascript_drupal_extension_execute($function_name) {
  $output_is_json = FALSE;
  $content_type = NULL;
  $params = array();
  $output = NULL;
  $whitelist = array();
  $parse_output_as_json = variable_get('javascript_drupal_extension_parse_output_as_json', TRUE);
  $parse_content_type = variable_get('javascript_drupal_extension_parse_content_type', TRUE);
  $function_to_call = str_replace('-', '_', $function_name);
  $arguments = array();

  if (variable_get('javascript_drupal_extension_parse_whitelist', TRUE)) {
    $whitelist = variable_get('javascript_drupal_extension_function_whitelist', "drupal_get_path\r\nwatchdog");

    if (is_string($whitelist)) {
      if (strpos($whitelist, chr(13) . chr(10))) {
        $whitelist = explode(chr(13) . chr(10), $whitelist);
      }
      elseif (strpos($whitelist, chr(13))) {
        $whitelist = explode(chr(13), $whitelist);
      }
      else {
        $whitelist = explode(chr(10), $whitelist);
      }
    }

    if (is_array($whitelist) && count($whitelist) > 0) {
      $whitelist = drupal_map_assoc($whitelist);

      if (!isset($whitelist[$function_to_call])) {
        return;
      }
    }
    else {
      return;
    }
  }

  foreach ($_POST as $key => $value) {
    if (strtolower($key) == 'content-type' &&
      $parse_content_type) {
      $content_type = $value;
    }
    elseif (strtolower($key) == 'output-is-json' &&
      $parse_output_as_json) {
      if (strtolower($value) == 'true' ||
          $value == '1') {
        $output_is_json = TRUE;
      }
    }
    else {
      $params[] = $value;
      $arguments[$key] = $value;
    }
  }

  if (variable_get('javascript_drupal_extension_allow_get_variables', FALSE)) {
    foreach ($_GET as $key => $value) {
      if (strtolower($key) == 'content-type') {
        $content_type = $value;
      }
      elseif (strtolower($key) == 'output-is-json') {
        if (strtolower($value) == 'true' ||
            $value == '1') {
          $output_is_json = TRUE;
        }
      }
      else {
        $params[] = $value;
        $arguments[$key] = $value;
      }
    }
  }

  if (variable_get('javascript_drupal_extension_log_usage_to_watchdog', FALSE)) {
    watchdog(
      'javascript_drupal_extension',
      'Function Name: <pre>!function</pre><br />Arguments: <pre>!arguments</pre>',
      array(
        '!function'  => $function_to_call,
        '!arguments' => print_r($arguments, TRUE),
      )
    );
  }

  $output = call_user_func_array($function_to_call, $params);

  if ($output_is_json) {
    drupal_json_output($output);
  }
  else {
    if (!empty($content_type)) {
      drupal_add_http_header('Content-Type', $content_type);
    }

    echo $output;
  }
}
