<?php

/**
 * @file
 * Contains hook definitions for the current module.
 */

/**
 * Implements hook_menu().
 */
function unlink_defaults_menu() {

  $items['admin/structure/unlink_defaults'] = array(
    'title' => 'Unlink default configurations',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('unlink_defaults_admin_form'),
    'file' => 'includes/admin.inc',
  );

  return $items;
}

/**
 * Implements hook_unlink_defaults_components().
 * Provides list of exportable configurations.
 */
function unlink_defaults_unlink_defaults_components() {
  $data = array();
  if (module_exists('rules')) {

    // Include file with export API from module entity.
    module_load_include('inc', 'entity', 'entity.features');

    // Load all configs from rules.
    $list = entity_features_export_options('rules_config');

    // Just prepare same array of configs as for ctools export configs.
    // @see unlink_defaults_admin_form().
    $rules_configs = array();
    foreach ($list as $item => $title) {
      $rules_config = entity_load_single('rules_config', $item);

      // Add to array all needed data of config which need for UI.
      $rules_configs[$item] = array(
        'title' => $title,
        'module' => $rules_config->module,
        'storage' => $rules_config->status == ENTITY_IN_CODE ? t('In code') : t('In database'),
      );
    }

    $data['rules_config'] = array(
      'list' => $rules_configs,
      'module' => 'rules',
    );
  }
  return $data;
}

/**
 * Implements hook_module_implements_alter().
 */
function unlink_defaults_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'default_rules_configuration_alter' || $hook == 'default_rules_configuration') {
    unlink_defaults_order_implements_alter($implementations);
  }
}

/**
 * Implements hook_views_api_alter().
 */
function unlink_defaults_views_api_alter(&$implementations) {
  unlink_defaults_order_implements_alter($implementations);
}

/**
 * Implements hook_ctools_plugin_api_alter().
 */
function unlink_defaults_ctools_plugin_api_alter(&$implementations) {
  unlink_defaults_order_implements_alter($implementations);
}

/**
 * Implements hook_views_default_views_alter().
 * TODO: Try to generate such functions on the fly.
 */
function unlink_defaults_views_default_views_alter(&$data) {
  unlink_defaults_defaults_alter($data, 'views_view');
}

/**
 * Implements hook_default_panels_renderer_pipeline_alter().
 */
function unlink_defaults_default_panels_renderer_pipeline_alter(&$data) {
  unlink_defaults_defaults_alter($data, 'panels_renderer_pipeline');
}

/**
 * Implements hook_default_panels_layout_alter().
 */
function unlink_defaults_default_panels_layout_alter(&$data) {
  unlink_defaults_defaults_alter($data, 'panels_layout');
}

/**
 * Implements hook_default_panels_mini_alter().
 */
function unlink_defaults_default_panels_mini_alter(&$data) {
  unlink_defaults_defaults_alter($data, 'panels_mini');
}

/**
 * Implements hook_relation_default_relation_types_alter().
 */
function unlink_defaults_relation_default_relation_types_alter(&$data) {
  unlink_defaults_defaults_alter($data, 'relation_type');
}

/**
 * Implements hook_ds_field_settings_info_alter().
 */
function unlink_defaults_ds_field_settings_info_alter(&$data) {
  unlink_defaults_defaults_alter($data, 'ds_field_settings');
}

/**
 * Implements hook_ds_layout_settings_info_alter().
 */
function unlink_defaults_ds_layout_settings_info_alter(&$data) {
  unlink_defaults_defaults_alter($data, 'ds_layout_settings');
}

/**
 * Implements hook_ds_view_modes_info_alter().
 */
function unlink_defaults_ds_view_modes_info_alter(&$data) {
  unlink_defaults_defaults_alter($data, 'ds_view_modes');
}

/**
 * Implements hook_ds_custom_fields_info_alter().
 */
function unlink_defaults_ds_custom_fields_info_alter(&$data) {
  unlink_defaults_defaults_alter($data, 'ds_fields');
}

/**
 * Implements hook_field_group_info_alter().
 */
function unlink_defaults_field_group_info_alter(&$data) {
  unlink_defaults_defaults_alter($data, 'field_group');
}

/**
 * Implements hook_ds_vd_info_alter().
 */
function unlink_defaults_ds_vd_info_alter(&$data) {
  unlink_defaults_defaults_alter($data, 'ds_vd');
}

/**
 * Implements hook_default_page_manager_handlers_alter().
 */
function unlink_defaults_default_page_manager_handlers_alter(&$data) {
  unlink_defaults_defaults_alter($data, 'page_manager_handlers');
}

/**
 * Implements hook_default_page_manager_pages_alter().
 */
function unlink_defaults_default_page_manager_pages_alter(&$data) {
  unlink_defaults_defaults_alter($data, 'page_manager_pages');
}

/**
 * Implements hook_cat_items_settings_info_alter().
 */
function unlink_defaults_cat_items_settings_info_alter(&$data) {
  unlink_defaults_defaults_alter($data, 'cat_items');
}

/**
 * Implements hook_path_breadcrumbs_settings_info_alter().
 */
function unlink_defaults_path_breadcrumbs_settings_info_alter(&$data) {
  unlink_defaults_defaults_alter($data, 'path_breadcrumbs');
}

/**
 * Implements hook_default_rules_configuration_alter().
 */
function unlink_defaults_default_rules_configuration_alter(&$configs) {

  // Make sure that we have configs that should be moved to the database.
  $configs_to_unlink = variable_get('unlink_defaults', array());
  if (empty($configs_to_unlink['rules_config'])) {
    return;
  }

  // Go through each config that should be moved to the database.
  foreach ($configs_to_unlink['rules_config'] as $config_name) {
    if (!empty($configs[$config_name])) {
      // We need to load rules config to get its storage status and
      // name of the module where this config has been defined.
      $rules_config = entity_load_single('rules_config', $config_name);
        if (!empty($rules_config)) {
  
        // Make sure that current config is not stored in feature module.
        $map = features_get_component_map(NULL, TRUE);
        $not_in_features = empty($map['rules_config'][$config_name]);
  
        // Make sure that current config currently stores in files.
        $in_files = $rules_config->status == ENTITY_IN_CODE;
  
        if ($not_in_features && $in_files) {
          $rules_config->module = 'rules';
          $rules_config->status = ENTITY_IN_DB;
          $rules_config->save();
        }
        else if (!$not_in_features && reset($map['rules_config'][$config_name]) != $rules_config->module) {
          $rules_config->module = reset($map['rules_config'][$config_name]);
          $rules_config->save();
        }
        if ($not_in_features) {
          unset($configs[$config_name]);
        }
      }
    }
  }
}

/**
 * Move configurations from code to database.
 *
 * @param $configs
 *   Array with default configurations which are stored in files.
 *
 * @param $table
 *   Name of db table where configurations should be stored.
 */
function unlink_defaults_defaults_alter(&$data, $table) {

  // Use static variable from ctools exportable.
  static $ctools_data;

  // Get a list of configurations that should be moved to database.
  $configs_to_unlink = variable_get('unlink_defaults', array());

  // If list of configurations doesn't contain current configuration table,
  // then it means we don't need to unlink such configurations.
  if (empty($configs_to_unlink[$table])) {
    return;
  }

  // Get schema of exportable table.
  $schema = ctools_export_get_schema($table);

  // Normalize key names of our configs.
  // We need this to have a keys with a machine names of configs instead of
  // any value that may be written in files where this config is stored.
  $configs = array();
  $configs_keys = array();
  foreach($data as $key => $config) {
    $configs[$config->{$schema['export']['key']}] = $config;

    // Save real keys from files where this config is stored.
    $configs_keys[$config->{$schema['export']['key']}] = $key;
  }

  // Go through each configuration.
  foreach ($configs_to_unlink[$table] as $config_name) {

    // If our variable stores configuration that doesn't exist anymore,
    // then we shouldn't continue unlink process.
    if (empty($configs[$config_name])) {
      continue;
    }

    // Check if module name that provides config is available from config.
    if (!empty($configs[$config_name]->export_module)) {
      $module_name = $configs[$config_name]->export_module;

      // Make sure that module which contains configuration is not a feature.
      $files = system_rebuild_module_data();
      if (!empty($files[$module_name]->info['features'])) {
        $ctools_data[$table] = $configs;
        continue;
      }

      // Check if current config already exists in the database.
      $config = db_select($table)
        ->fields($table, array($schema['export']['key']))
        ->condition($schema['export']['key'], $config_name)
        ->execute()
        ->fetchCol();

      // If config doesn't exist in the database, then we should save it there.
      if (empty($config)) {
        ctools_include('export');

        // We need the next line to avoid php warning from ctools.
        // But normally it shouldn't be here.
        $configs[$config_name]->export_type = FALSE;

        // Save configuration to the database.
        ctools_export_crud_save($table, $configs[$config_name]);
      }

      // Remove config from list of configs stored in files.
      unset($data[$configs_keys[$config_name]], $configs[$config_name]);
      $ctools_data[$table] = $configs;
    }
    // If config stored in files and was already excluded from files during
    // ctools export, then we need to exclude this from configurations list.
    // Normally this case is handled by features module.
    elseif (!empty($configs[$config_name]) && (!empty($ctools_data[$table]) && empty($ctools_data[$table][$config_name]))) {
      unset($data[$configs_keys[$config_name]]);
    }
  }
}

/**
 * Change order of implementations, and make feature modules to be at the end.
 */
function unlink_defaults_order_implements_alter(&$implementations) {
  $implementations_origin = $implementations;
  $files = system_rebuild_module_data();
  foreach ($implementations_origin as $module => $data) {
    if (!empty($files[$module]->info['features'])) {
      unset($implementations[$module]);
      $implementations[$module] = $data;
    }
  }
}
