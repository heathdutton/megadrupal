<?php

/**
 * Implements hook_commerce_line_item_type_info().
 */
function bookit_cart_commerce_line_item_type_info() {
  $line_item_types = array();

  // Create a bookit line item.
  $line_item_types['bookit'] = array(
    'name' => t('Booking'),
    'description' => t('References a bookable item and displays it.'),
    'product' => TRUE,
    'add_form_submit_value' => t('Book Now'),
    'base' => 'bookit_line_item',
  );

  return $line_item_types;
}

/**
 * Creates fields for bookit line item.
 */
function bookit_line_item_configuration($line_item_type) {
  // Add commerce product's fields.
  commerce_product_line_item_configuration($line_item_type);

  // Create bookable item field.
  commerce_activate_field('bookit_item');
  field_cache_clear();

  $field = field_info_field('bookit_item');
  $instance = field_info_instance('commerce_line_item', 'bookit_item', $line_item_type['type']);

  if (empty($field)) {
    $field = array(
      'field_name' => 'bookit_item',
      'type' => 'entityreference',
      'cardinality' => 1,
      'entity_types' => array('commerce_line_item'),
      'translatable' => FALSE,
      'locked' => TRUE,
      'settings' => array(
        'target_type' => 'bookit_item',
        'handler' => 'base',
      ),
    );
    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => 'bookit_item',
      'entity_type' => 'commerce_line_item',
      'bundle' => $line_item_type['type'],
      'label' => t('Bookable Item'),
      'required' => TRUE,
      'settings' => array(),
      'display' => array(),
    );
    field_create_instance($instance);
  }

  // Create booking date field.
  commerce_activate_field('bookit_date');
  field_cache_clear();

  $field = field_info_field('bookit_date');
  $instance = field_info_instance('commerce_line_item', 'bookit_date', $line_item_type['type']);

  if (empty($field)) {
    $field = array(
      'field_name' => 'bookit_date',
      'type' => 'datetime',
      'cardinality' => 1,
      'entity_types' => array('commerce_line_item'),
      'translatable' => FALSE,
      'locked' => TRUE,
      'settings' => array(
        'granularity' => array(
          'month' => 'month',
          'day' => 'day',
          'year' => 'year',
          'hour' => 0,
          'minute' => 0,
          'second' => 0,
        ),
        'todate' => 'required',
      ),
    );
    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => 'bookit_date',
      'entity_type' => 'commerce_line_item',
      'bundle' => $line_item_type['type'],
      'label' => t('Booking Date'),
      'required' => TRUE,
      'settings' => array(),
      'display' => array(),
    );
    field_create_instance($instance);
  }
}

/**
 * Returns an appropriate title for this line item.
 */
function bookit_line_item_title($line_item) {
  $bookit_item = bookit_item_load($line_item->bookit_item[LANGUAGE_NONE][0]['target_id']);
  $node = bookit_item_get_referencing_node($bookit_item->item_id);
  $from = format_date(strtotime($line_item->bookit_date[LANGUAGE_NONE][0]['value']), 'custom', 'Y-m-d');
  $to = format_date(strtotime($line_item->bookit_date[LANGUAGE_NONE][0]['value2']), 'custom', 'Y-m-d');
  return t('@node: @item from @from to @to', array('@item' => $bookit_item->title, '@node' => $node->title, '@from' => $from, '@to' => $to));
}

/**
 * Creates a new bookit_item item.
 */
function bookit_line_item_new($item_id, $date, $quantity = 1, $order_id = 0, $data = array()) {
  // Get default bookit product.
  $product = commerce_product_load_by_sku('BOOKING');

  // Create a new line item by the product.
  $line_item = commerce_product_line_item_new($product, $quantity, $order_id, $data, 'bookit');

  // Add the bookable item entity reference.
  $line_item->bookit_item[LANGUAGE_NONE][0]['target_id'] = $item_id;

  // Add the booking date.
  $field = field_info_field('bookit_date');
  $line_item->bookit_date[LANGUAGE_NONE][0] = array(
    'value' => $date['min'] . ' 00:00:00',
    'value2' => $date['max'] . ' 00:00:00',
    'timezone' => date_get_timezone($field['settings']['tz_handling']),
    'timezone_db' => date_get_timezone_db($field['settings']['tz_handling']),
    'date_type' => $field['type'],
  );

  return $line_item;
}

/**
 * Implements hook_commerce_product_type_info().
 */
function bookit_cart_commerce_product_type_info() {
  return array(
    'bookit' => array(
      'type' => 'bookit',
      'name' => t('Booking'),
      'description' => t('Bookable products.'),
      'revision' => '1',
    ),
  );
}

/**
 * Implements hook_enable().
 */
function bookit_cart_enable() {
  // Configure the bookit product type.
  commerce_product_types_reset();
  commerce_product_configure_product_type('bookit');

  // Create a commerce product for adding to cart.
  if(!commerce_product_load_by_sku('BOOKING')) {
    $product = commerce_product_new('bookit');
    $product->sku = 'BOOKING';
    $product->title = t('Booking');
    $product->commerce_price[LANGUAGE_NONE][0]['amount'] = 0;
    $product->commerce_price[LANGUAGE_NONE][0]['currency_code'] = commerce_default_currency();
    commerce_product_save($product);
  }
}

/**
 * Implements hook_form_alter().
 */
function bookit_cart_form_alter(&$form, &$form_state, $form_id) {
  if (strstr($form_id, "views_form_") and isset($form['booking_button'])) {
    hide($form['actions']);
  }
}

/**
 * Implements hook_views_api().
 */
function bookit_cart_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'bookit_cart') . '/includes/views',
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function bookit_cart_field_formatter_info() {
  return array(
    'bookit_item_add_to_cart_form' => array(
      'label' => t('Booking - Add to Cart form'),
      'description' => t('Display the bookable items in an add to cart form using views.'),
      'field types' => array('entityreference'),
      'settings' => array(
        'view' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function bookit_cart_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] == 'bookit_item_add_to_cart_form') {
    // Build an options array of Views available for the order contents pane.
    $options = array();

    // Generate an option list from all user defined and module defined views.
    foreach (views_get_all_views() as $name => $view) {
      // Only include bookable item Views.
      if ($view->base_table == 'bookit_item') {
        foreach ($view->display as $display_name => $display) {
          $options[check_plain($name)][$name . '|' . $display_name] = $display->display_title;
        }
      }
    }

    $element['view'] = array(
      '#type' => 'select',
      '#title' => t('Display view'),
      '#description' => t('Specify the View to use to display the bookable items referenced by this field.'),
      '#options' => $options,
      '#default_value' => !empty($settings['view']) ? $settings['view'] : $instance['bundle'] . '_bookit_item_form|default',
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function bookit_cart_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  if ($display['type'] == 'bookit_item_add_to_cart_form') {
    if (empty($display['settings']['view'])) {
      $display['settings']['view'] = $instance['bundle'] . '_bookit_item_form|default';
    }

    // Load the View and display its information in the summary.
    list($name, $display_name) = explode('|', $display['settings']['view']);
    $view = views_get_view($name);

    $summary = t('View: @name - @display', array('@name' => $view->name, '@display' => $view->display[$display_name]->display_title));
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function bookit_cart_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $result = array();

  // Collect the list of item IDs.
  $item_ids = array();

  foreach ($items as $delta => $item) {
    $item_ids[] = $item['target_id'];
  }

  switch ($display['type']) {
    case 'bookit_item_add_to_cart_form':
      if (empty($display['settings']['view'])) {
        $display['settings']['view'] = $instance['bundle'] . '_bookit_item_form|default';
      }

      // Extract the View and display ID from the setting.
      list($view_id, $display_id) = explode('|', $display['settings']['view']);

      $result[0] = array(
        '#markup' => commerce_embed_view($view_id, $display_id, array(implode('+', $item_ids)), $_GET['q']),
      );

      break;
  }

  return $result;
}

/**
 * Implements hook_commerce_cart_product_comparison_properties_alter().
 */
function bookit_cart_commerce_cart_product_comparison_properties_alter(&$comparison_properties, $line_item) {
  if($line_item->type == 'bookit') {
    $comparison_properties[] = 'bookit_item';
    $comparison_properties[] = 'bookit_date';
  }
}
