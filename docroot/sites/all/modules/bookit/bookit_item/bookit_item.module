<?php

/**
 * Implements hook_hook_info().
 */
function bookit_item_hook_info() {
  return array(
    'bookit_item_type_info' => array(
      'group' => 'bookit',
    ),
    'bookit_item_type_info_alter' => array(
      'group' => 'bookit',
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function bookit_item_entity_info() {
  $return = array(
    'bookit_item' => array(
      'label' => t('Bookable Item'),
      'controller class' => 'BookitItemEntityController',
      'base table' => 'bookit_item',
      'revision table' => 'bookit_item_revision',
      'fieldable' => TRUE,
      'inline entity form' => array('controller' => 'BookitItemInlineEntityFormController'),
      'entity keys' => array(
        'id' => 'item_id',
        'bundle' => 'type',
        'label' => 'title',
        'revision' => 'revision_id',
        'language' => 'language',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'bookit_item_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Admin display'),
          'custom settings' => FALSE,
        ),
      ),
      'uri callback' => 'bookit_item_uri',
      'metadata controller class' => '',
      'token type' => 'bookit-item',
      'access callback' => 'bookit_item_access',
      'access arguments' => array(
        'user key' => 'uid',
      ),
      'permission labels' => array(
        'singular' => t('item'),
        'plural' => t('items'),
      ),

      // Prevent Redirect alteration.
      'redirect' => FALSE,

      // Add translation support.
      'translation' => array(
        'locale' => TRUE,
        'entity_translation' => array(
          'base path' => 'admin/bookit/items/%bookit_item',
          'class' => 'EntityTranslationBookitItemHandler',
          'bundle callback' => 'bookit_item_entity_translation_supported_type',
          'default settings' => array(
            'default_language' => LANGUAGE_NONE,
            'hide_language_selector' => FALSE,
          ),
        ),
      ),

      // Add title replacement support for translations.
      'field replacement' => array(
        'title' => array(
          'field' => array(
            'type' => 'text',
            'cardinality' => 1,
            'translatable' => TRUE,
          ),
          'instance' => array(
            'label' => t('Title'),
            'required' => TRUE,
            'settings' => array(
              'text_processing' => 0,
            ),
            'widget' => array(
              'weight' => -5,
            ),
          ),
        ),
      ),
    ),
  );

  $return['bookit_item']['bundles'] = array();
  foreach (bookit_item_type_get_name() as $type => $name) {
    $return['bookit_item']['bundles'][$type] = array(
      'label' => $name,
      'admin' => array(
        'path' => 'admin/bookit/config/types/' . strtr($type, '_', '-'),
        'access arguments' => array('administer bookit_item types'),
      ),
    );
  }

  return $return;
}

/**
 * Returns whether the given booking type has support for translations.
 */
function bookit_item_entity_translation_supported_type($type) {
  return variable_get('language_bookit_item_type_' . $type, 0) == ENTITY_TRANSLATION_ENABLED;
}

/**
 * Implements hook_menu().
 */
function bookit_item_menu() {
  $items = array();

  $items['admin/bookit/items/add'] = array(
    'title' => 'Add an item',
    'description' => 'Add a new item for booking.',
    'page callback' => 'bookit_item_add_page',
    'access callback' => 'bookit_item_add_any_access',
    'weight' => 10,
    'file' => 'includes/bookit_item.pages.inc',
  );

  foreach (bookit_item_types() as $type => $item_type) {
    $items['admin/bookit/items/add/' . strtr($type, array('_' => '-'))] = array(
      'title' => 'Create !name',
      'title arguments' => array('!name' => $item_type['name']),
      'description' => $item_type['description'],
      'page callback' => 'drupal_get_form',
      'page arguments' => array('bookit_item_item_form', bookit_item_new($type)),
      'access callback' => 'bookit_item_access',
      'access arguments' => array('create', bookit_item_new($type)),
      'file' => 'includes/bookit_item.pages.inc',
    );
  }

  $items['admin/bookit/items/%bookit_item'] = array(
    'title callback' => 'bookit_item_item_title',
    'title arguments' => array(3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bookit_item_item_form', 3),
    'access callback' => 'bookit_item_access',
    'access arguments' => array('update', 3),
    'weight' => 0,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/bookit_item.pages.inc',
  );

  $items['admin/bookit/items/%bookit_item/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['admin/bookit/items/%bookit_item/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bookit_item_item_delete_form', 3),
    'access callback' => 'bookit_item_access',
    'access arguments' => array('delete', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/bookit_item.pages.inc',
  );

  $items['admin/bookit/config/types'] = array(
    'title' => 'Booking Types',
    'description' => 'Manage booking types for your platform.',
    'page callback' => 'bookit_item_types_overview',
    'access arguments' => array('administer bookit_item types'),
    'weight' => -10,
    'file' => 'includes/bookit_item.pages.inc',
  );

  $items['admin/bookit/config/types/add'] = array(
    'title' => 'Add booking type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bookit_item_type_form', bookit_item_type_new()),
    'access arguments' => array('administer bookit_item types'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/bookit_item.pages.inc',
  );

  foreach (bookit_item_types() as $type => $item_type) {
    $type_arg = strtr($type, '_', '-');

    $items['admin/bookit/config/types/' . $type_arg] = array(
      'title' => $item_type['name'],
      'page callback' => 'drupal_get_form',
      'page arguments' => array('bookit_item_type_form', $type),
      'access arguments' => array('administer bookit_item types'),
      'file' => 'includes/bookit_item.pages.inc',
    );

    if ($item_type['module'] == 'bookit_item') {
      $items['admin/bookit/config/types/' . $type_arg . '/edit'] = array(
        'title' => 'Edit',
        'access callback' => 'bookit_item_type_update_access',
        'access arguments' => array($type),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      );
      $items['admin/bookit/config/types/' . $type_arg . '/delete'] = array(
        'title' => 'Delete',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bookit_item_type_delete_form', $type),
        'access callback' => 'bookit_item_type_update_access',
        'access arguments' => array($type),
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_INLINE,
        'weight' => 10,
        'file' => 'includes/bookit_item.pages.inc',
      );
    }
  }

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function bookit_item_menu_alter(&$items) {
  foreach (bookit_item_types() as $type => $item_type) {
    $type = strtr($type, '_', '-');
    $items['admin/bookit/config/types/' . $type . '/fields']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
    $items['admin/bookit/config/types/' . $type . '/display']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function bookit_item_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'admin/bookit/items') {
    $item = menu_get_item('admin/bookit/items/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_admin_menu_map().
 */
function bookit_item_admin_menu_map() {
  $type_args = array();

  foreach (array_keys(bookit_item_types()) as $type) {
    $type_args[] = strtr($type, '_', '-');
  }

  $map['admin/bookit/config/types/%'] = array(
    'parent' => 'admin/bookit/config/types',
    'arguments' => array(
      array('%' => $type_args),
    ),
  );

  return $map;
}

/**
 * Implements hook_permission().
 */
function bookit_item_permission() {
  $permissions = array(
    'administer bookit_item types' => array(
      'title' => t('Administer booking types'),
      'description' => t('Allows users to configure booking types and their fields.'),
      'restrict access' => TRUE,
    ),
  );

  // Use commerce entity access to create default View / Create / Edit permissions.
  $permissions += commerce_entity_access_permissions('bookit_item');

  return $permissions;
}

/**
 * Returns an array of booking types.
 */
function bookit_item_types() {
  $item_types = &drupal_static(__FUNCTION__);

  if (!isset($item_types)) {
    $item_types = array();

    // Find booking types defined by hook_bookit_item_type_info().
    foreach (module_implements('bookit_item_type_info') as $module) {
      foreach (module_invoke($module, 'bookit_item_type_info') as $type => $item_type) {
        $item_type += array(
          'module' => $module,
          'revision' => 1,
        );
        $item_types[$type] = $item_type;
      }
    }

    // Last allow the info to be altered by other modules.
    drupal_alter('bookit_item_type_info', $item_types);
  }

  return $item_types;
}

/**
 * Resets the cached list of booking types.
 */
function bookit_item_types_reset() {
  $item_types = &drupal_static('bookit_item_types');
  $item_types = NULL;
  entity_info_cache_clear();
}

/**
 * Loads a booking type.
 */
function bookit_item_type_load($type) {
  $type = strtr($type, array('-' => '_'));
  $item_types = bookit_item_types();
  return !empty($item_types[$type]) ? $item_types[$type] : FALSE;
}

/**
 * Returns an initialized booking type array.
 */
function bookit_item_type_new() {
  return array(
    'type' => '',
    'name' => '',
    'description' => '',
    'help' => '',
    'revision' => 1,
  );
}

/**
 * Saves a booking type.
 */
function bookit_item_type_save($item_type, $configure = TRUE, $skip_reset = FALSE) {
  $op = drupal_write_record('bookit_item_type', $item_type, empty($item_type['is_new']) ? 'type' : array());

  // If this is a new booking type and the insert did not fail...
  if (!empty($item_type['is_new']) && $op !== FALSE) {
    // Notify the field API that a new bundle has been created.
    field_attach_create_bundle('bookit_item', $item_type['type']);

    // Notify other modules that a new booking type has been created.
    module_invoke_all('bookit_item_type_insert', $item_type, $skip_reset);
  }
  elseif ($op !== FALSE) {
    // Notify other modules that an existing booking type has been updated.
    module_invoke_all('bookit_item_type_update', $item_type, $skip_reset);
  }

  // Rebuild the menu to add this booking type's menu items.
  if (!$skip_reset) {
    bookit_item_types_reset();
    variable_set('menu_rebuild_needed', TRUE);
  }

  return $op;
}

/**
 * Deletes a booking type.
 */
function bookit_item_type_delete($type, $skip_reset = FALSE) {
  $item_type = bookit_item_type_load($type);

  db_delete('bookit_item_type')
    ->condition('type', $type)
    ->execute();

  // Rebuild the menu to get rid of this booking type's menu items.
  if (!$skip_reset) {
    bookit_item_types_reset();
    variable_set('menu_rebuild_needed', TRUE);
  }

  // Notify the field API that this bundle has been destroyed.
  field_attach_delete_bundle('bookit_item', $type);

  // Notify other modules that this booking type has been deleted.
  module_invoke_all('bookit_item_type_delete', $item_type, $skip_reset);
}

/**
 * Returns the human readable name of any or all booking types.
 */
function bookit_item_type_get_name($type = NULL) {
  $item_types = bookit_item_types();

  // Return a booking type's name if specified.
  if (!empty($type)) {
    if (isset($item_types[$type])) {
      return $item_types[$type]['name'];
    }
    else {
      // Return FALSE if it does not exist.
      return FALSE;
    }
  }

  // Otherwise turn the array values into the type name only.
  $item_type_names = array();

  foreach ($item_types as $key => $value) {
    $item_type_names[$key] = $value['name'];
  }

  return $item_type_names;
}

/**
 * Entity uri callback.
 */
function bookit_item_uri($bookit_item) {
  // If user has access to update the bookit_item.
  if (bookit_item_access('update', $bookit_item)) {
    return array(
      'path' => 'admin/bookit/items/' . $bookit_item->item_id,
    );
  }

  return NULL;
}

/**
 * Returns an initialized bookable item entity object.
 */
function bookit_item_new($type = '') {
  return entity_get_controller('bookit_item')->create(array('type' => $type));
}

/**
 * Saves a bookable item entity.
 */
function bookit_item_save($bookit_item) {
  return entity_get_controller('bookit_item')->save($bookit_item);
}

/**
 * Deletes a bookable item entity.
 */
function bookit_item_delete($item_id) {
  return bookit_item_delete_multiple(array($item_id));
}

/**
 * Deletes a bookable item entity.
 */
function bookit_item_delete_multiple($item_ids) {
  return entity_get_controller('bookit_item')->delete($item_ids);
}

/**
 * Loads a bookable item entity by ID.
 */
function bookit_item_load($item_id) {
  if (empty($item_id)) {
    return FALSE;
  }

  $bookit_items = bookit_item_load_multiple(array($item_id), array());
  return $bookit_items ? reset($bookit_items) : FALSE;
}

/**
 * Loads multiple bookable items by ID or based on a set of matching conditions.
 */
function bookit_item_load_multiple($item_ids = array(), $conditions = array(), $reset = FALSE) {
  if (empty($item_ids) && empty($conditions)) {
    return array();
  }

  return entity_load('bookit_item', $item_ids, $conditions, $reset);
}

/**
 * Checks bookable item entity access for various operations.
 */
function bookit_item_access($op, $bookit_item = NULL, $account = NULL) {
  // Use commerce's entity access implementation.
  return commerce_entity_access($op, $bookit_item, $account, 'bookit_item');
}

/**
 * Retrieves referencing node by item_id.
 */
function bookit_item_get_referencing_node($item_id) {
  $referencing_node = &drupal_static(__FUNCTION__);

  // Try to get from static cache.
  if (!isset($referencing_node[$item_id])) {
    $referencing_node[$item_id] = FALSE;

    // Foreach entity reference field.
    foreach (field_info_fields() as $field) {
      // If the entity reference field referencies a bookit_item for a node.
      if ($field['type'] == 'entityreference' and $field['settings']['target_type'] == 'bookit_item' and isset($field['bundles']['node'])) {

        // Try to get the referencing nid.
        $nid = db_select("field_data_{$field['field_name']}", 'f')
          ->fields('f', array('entity_id'))
          ->condition("f.{$field['field_name']}_target_id", $item_id)
          ->execute()
          ->fetchField();

        // If result found then return the node.
        if ($nid) {
          $referencing_node[$item_id] = node_load($nid);
        }
      }
    }
  }

  return $referencing_node[$item_id];
}

/**
 * Implements hook_bookit_item_type_info().
 */
function bookit_item_bookit_item_type_info() {
  return db_query('SELECT * FROM {bookit_item_type}')->fetchAllAssoc('type', PDO::FETCH_ASSOC);
}

/**
 * Access callback.
 */
function bookit_item_add_any_access() {
  // Grant automatic access to users with administer items permission.
  if (user_access('administer bookit_item entities')) {
    return TRUE;
  }

  // Check the user's access on an booking type basis.
  foreach (bookit_item_types() as $type => $item_type) {
    if (bookit_item_access('create', bookit_item_new($type))) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Access callback: determines if the user can edit or delete a booking type.
 */
function bookit_item_type_update_access($type) {
  $item_type = bookit_item_type_load($type);

  if ($item_type['module'] == 'bookit_item') {
    return user_access('administer bookit_item types');
  }

  return FALSE;
}

/**
 * Menu title callback for the bookable item page.
 */
function bookit_item_item_title($bookit_item) {
  return t('Bookable Item: @title', array('@title' => $bookit_item->title));
}

/**
 * Implements hook_theme().
 */
function bookit_item_theme() {
  return array(
    'item_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'includes/bookit_item.pages.inc',
    ),
    'item_type_admin_overview' => array(
      'variables' => array('type' => NULL),
      'file' => 'includes/bookit_item.pages.inc',
    ),
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function bookit_item_field_extra_fields() {
  $extra = &drupal_static(__FUNCTION__);

  if (!isset($extra)) {
    foreach (bookit_item_types() as $type => $item_type) {
      $extra['bookit_item'][$type] = array(
        'form' => array(
          'title' => array(
            'label' => t('Title'),
            'description' => t('Title form element'),
            'weight' => -5,
          ),
          'status' => array(
            'label' => t('Status'),
            'description' => t('Status form element'),
            'weight' => 35,
          ),
        ),
        'display' => array(
          'title' => array(
            'label' => t('Title'),
            'description' => t('Full bookable item\'s title'),
            'weight' => -5,
          ),
          'status' => array(
            'label' => t('Status'),
            'description' => t('Whether the item is active or disabled'),
            'weight' => 5,
          ),
        ),
      );
    }
  }

  return $extra;
}

/**
 * Implements hook_views_api().
 */
function bookit_item_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'bookit_item') . '/includes/views',
  );
}

/**
 * Implementation of hook_entity_property_info().
 */
function bookit_item_entity_property_info() {
  $info = array();

  // Add meta-data about the basic bookable item's properties.
  $properties = &$info['bookit_item']['properties'];

  $properties['item_id'] = array(
    'label' => t('Item ID'),
    'description' => t('The primary identifier for a bookable item.'),
    'type' => 'integer',
    'schema field' => 'item_id',
  );

  $properties['type'] = array(
    'label' => t('Booking Type'),
    'description' => t('The type of this bookable item.'),
    'type' => 'token',
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer bookit_item entities',
    'required' => TRUE,
    'schema field' => 'type',
  );

  $properties['title'] = array(
    'label' => t('Title'),
    'description' => t('The title of the bookable item.'),
    'type' => 'text',
    'setter callback' => 'entity_property_verbatim_set',
    'required' => TRUE,
    'schema field' => 'title',
  );

  $properties['language'] = array(
    'label' => t('Language'),
    'type' => 'token',
    'description' => t('The language the bookable item was created in.'),
    'setter callback' => 'entity_property_verbatim_set',
    'options list' => 'entity_metadata_language_list',
    'schema field' => 'language',
    'setter permission' => 'administer bookit_item entities',
  );

  $properties['status'] = array(
    'label' => t('Status'),
    'description' => t('Boolean indicating whether the bookable item is active or disabled.'),
    'type' => 'boolean',
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer bookit_item entities',
    'schema field' => 'status',
  );

  $properties['created'] = array(
    'label' => t('Date created'),
    'description' => t('The date the bookable item was created.'),
    'type' => 'date',
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer bookit_item entities',
    'schema field' => 'created',
  );

  $properties['changed'] = array(
    'label' => t('Date updated'),
    'description' => t('The date the bookable item was most recently updated.'),
    'type' => 'date',
    'setter callback' => 'entity_property_verbatim_set',
    'query callback' => 'entity_metadata_table_query',
    'setter permission' => 'administer bookit_item entities',
    'schema field' => 'changed',
  );

  $properties['uid'] = array(
    'label' => t('Creator ID'),
    'type' => 'integer',
    'description' => t('The unique ID of the bookable item creator.'),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer bookit_item entities',
    'clear' => array('creator'),
    'schema field' => 'uid',
  );

  $properties['creator'] = array(
    'label' => t('Creator'),
    'type' => 'user',
    'description' => t('The creator of the bookable item.'),
    'setter permission' => 'administer bookit_item entities',
    'required' => TRUE,
    'computed' => TRUE,
    'clear' => array('uid'),
  );

  $info['bookit_item']['bundles'] = array();
  foreach (bookit_item_type_get_name() as $type => $name) {
    $info['bookit_item']['bundles'][$type] = array(
      'label' => $name,
    );
  }

  return $info;
}

/**
 * Determines whether or not the give bookable item can be deleted.
 */
function bookit_item_can_delete($bookit_item) {
  // Return FALSE if the given item does not have an ID.
  if (empty($bookit_item->item_id)) {
    return FALSE;
  }

  return !in_array(FALSE, module_invoke_all('bookit_item_can_delete', $bookit_item));
}

/**
 * Implements hook_field_formatter_info().
 */
function bookit_item_field_formatter_info() {
  return array(
    'bookit_item_reference_view' => array(
      'label' => t('Bookable item view'),
      'description' => t('Display the bookable items via a default View.'),
      'field types' => array('entityreference'),
      'settings' => array(
        'view' => '',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function bookit_item_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] == 'bookit_item_reference_view') {
    // Build an options array of Views available for the order contents pane.
    $options = array();

    // Generate an option list from all user defined and module defined views.
    foreach (views_get_all_views() as $name => $view) {
      // Only include item Views.
      if ($view->base_table == 'bookit_item') {
        foreach ($view->display as $display_name => $display) {
          $options[check_plain($name)][$name . '|' . $display_name] = $display->display_title;
        }
      }
    }

    $element['view'] = array(
      '#type' => 'select',
      '#title' => t('Display view'),
      '#description' => t('Specify the View to use to display the bookable items referenced by this field.'),
      '#options' => $options,
      '#default_value' => !empty($settings['view']) ? $settings['view'] : $instance['bundle'] . '_bookit_item_table|default',
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function bookit_item_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  if ($display['type'] == 'bookit_item_reference_view') {
    if (empty($display['settings']['view'])) {
      $display['settings']['view'] = $instance['bundle'] . '_bookit_item_table|default';
    }

    // Load the View and display its information in the summary.
    list($name, $display_name) = explode('|', $display['settings']['view']);
    $view = views_get_view($name);

    $summary = t('View: @name - @display', array('@name' => $view->name, '@display' => $view->display[$display_name]->display_title));
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function bookit_item_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $result = array();

  // Collect the list of item IDs.
  $item_ids = array();

  foreach ($items as $delta => $item) {
    $item_ids[] = $item['target_id'];
  }

  switch ($display['type']) {
    case 'bookit_item_reference_view':
      if (empty($display['settings']['view'])) {
        $display['settings']['view'] = $instance['bundle'] . '_bookit_item_table|default';
      }

      // Extract the View and display ID from the setting.
      list($view_id, $display_id) = explode('|', $display['settings']['view']);

      $result[0] = array(
        '#markup' => commerce_embed_view($view_id, $display_id, array(implode('+', $item_ids))),
      );

      break;
  }

  return $result;
}
