<?php
/**
 * @file sparqlfqc.module
 */

/**
 * Implements hook_help().
 */
function sparqlfqc_help($path, $arg) {
  switch ($path) {
    case 'admin/help#sparqlfqc':
      return '<p>' . t('Perform a federated query on multiple RDF data sources by caching data locally from designated SPARQL endpoints.') . '</p>';
    break;

    case 'admin/structure/sparqlfqc':
      $endpoint = url('sparql', array('absolute' => TRUE,));
      $registry = l('SPARQL Endpoints Registry', 'admin/structure/sparql_registry');
      return '<p>' . t("This page enables RDF administrators to designate SPARQL endpoints to be cached locally for federated queries. Cached data can be queried with SPARQL queries against the local endpoint: !endpoint. Note: If you are using SPARQL Views your local endpoint must be registered with the !registry, otherwise it won't work.",
      array('!endpoint' => l($endpoint, $endpoint), '!registry' => $registry)
      ) . '</p>';
    break;
  }
}

/**
 * Implements hook_menu().
 */
function sparqlfqc_menu() {
  $items = array();

  $items['admin/structure/sparqlfqc'] = array(
    'title' => 'Federated Query Cache',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sparqlfqc_admin_structure'),
    'description' => 'Cache RDF data from designated SPARQL endpoints locally.',
    'access arguments' => array('administer rdf'),
    'file' => 'sparqlfqc.admin.inc',
    'weight' => 1,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function sparqlfqc_block_info() {
  $blocks['sparqlfqc'] = array(
    'info' => t('Federated Query Cache Refresh')
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function sparqlfqc_block_view($delta) {
  $block = array();

  switch ($delta) {
    case 'sparqlfqc': 
      $block['subject'] = t('Refresh Cached RDF data');
      $block['content'] = drupal_get_form('sparqlfqc_refresh');
    break;
  }

  return $block;
}

/**
 * @return 
 *  $form array with button to refresh cached data.
 */
function sparqlfqc_refresh($form, &$form_state) {
  $form['refresh'] = array(
    '#type' => 'submit',
    '#value' => t('Refresh Data'),
  );
  return $form;  
}
function sparqlfqc_refresh_submit($form, &$form_state) {
  sparqlfqc_get_data();
}

/**
 * Get/Refresh data from user designated URLs.
 */
function sparqlfqc_get_data() {
  // Instantiate the ARC2 local store.
  $store = sparql_endpoint_initialize();

  // Emtpy the local store.
  $store->reset();

  // Load data.
  $endpoints = variable_get('sparqlfqc_endpoints', NULL);
  $domains = explode("\n", $endpoints);
  foreach ($domains as $domain) {
    $domain = trim($domain);
    if (strlen($domain)) {
      $q = 'LOAD <' . $domain . '?query=CONSTRUCT+{%0D%0A++%3Fs+%3Fp+%3Fo%0D%0A}+WHERE+{%3Fs+%3Fp+%3Fo+.}&output=&jsonp=&key=>';
      $store->query($q);
    }
  }


  if ($store->getErrors()) {
    drupal_set_message(t('There was an error during the fetching of the data.'), 'error');
  }
  else {
    drupal_set_message(t('Cached federated query data has been refreshed. Click !url to review data.', array(
      '!url' => l('here', 'sparql', array(
        'query' => array(
          'query' => 'SELECT * WHERE {?s ?p ?o}',
          'output' => 'htmltab',
        ),
      )),
    )));
  }
}

/**
 * Get all cached RDF data and store it in one big array.
 * 
 * This function can be very helpful for prototyping, for people who don't know
 * SPARQL. But be careful, this function will choke if you try and use this for 
 * gigantic data sets.
 *
 * Make these values: 
 *   s, subject, e.g. http://localhost/countryx/node/20
 *   p, predicate, e.g. http://this.doesnt.really.get.checked.com/id
 *   o, object, e.g. 12345
 * Look like this:  
 *   $data['subject']['predicate'] = 'object';
 * 
 * @param $short_preticate
 *   Boolean. TRUE, shorten preticates to just include terms. 
 *   FALSE, show the absolute URL. 
 * 
 * @param, $limit
 *   Number of rows returned by query.
 * 
 * @return $data
 *  Array of sanitized shipment data in the following format:  
 *  $data['subject']['predicate'] = 'object';
 */
function sparqlfqc_data($short_predicate = TRUE, $limit = NULL) {
  // Get RDF data from SPARQL endpoint.
  $endpoint = url('sparql', array('absolute' => TRUE));
  $limit = (empty($limit)) ? NULL : "LIMIT $limit";
  $query = "SELECT * WHERE {
            GRAPH ?g { ?s ?p ?o . }
            $limit
           }";
  $sparql_results = sparql_request($query, $endpoint);

  // Convert SPARQL results to a friendlier array.
  $data = array();
  foreach ($sparql_results['result']['rows'] as $row) {
    // Sanitize data. 
    $subject = check_plain($row['s']);
    $predicate = check_plain($row['p']);
    $object = check_plain($row['o']);
    // Shorten predicate from this: http://purl.org/dc/terms
    // to this: terms.
    if ($short_predicate) {
      $position = strripos($predicate, '/') + 1;
      $predicate = substr($predicate, $position);
    }
    $data[$subject][$predicate] = $object;
  }

  return $data;
}
