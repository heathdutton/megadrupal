<?php
/**
 * @file
 * Add schema.org microdata for commerce specifications.
 */

/* *********************************************************************
 * MENU ROUTER & PERMISSIONS
 * ****************************************************************** */

/**
 * Implements hook_permission().
 */
function commerce_schemaorg_permission() {
  return array(
    'access commerce_schemaorg offers' => array(
      'title' => t('Access commerce schema.org offers'),
      'description' => t('Access to schema.org offers meta tags.'),
    ),
  );
}

/* *********************************************************************
 * ENTITY
 * ****************************************************************** */

/**
 * Implements hook_entity_view().
 */
function commerce_schemaorg_entity_view($entity, $type, $view_mode, $langcode) {
  $bundles = _commerce_schemaorg_get_product_display_bundles();
  if ($type == 'node' && !empty($bundles)) {
    if (isset($bundles[$entity->type])) {

      $wrapper_node = entity_metadata_wrapper('node', $entity);

      $data = array(
        '#type' => 'container',
        '#attributes' => array(
          'itemscope' => 'itemscope',
          'itemtype' => 'http://schema.org/Product',
        ),
        'name' => array(
          '#theme' => 'html_tag',
          '#tag' => 'meta',
          '#attributes' => array(
            'itemprop' => 'name',
            'content' => $entity->title,
          ),
        ),
        'url' => array(
          '#theme' => 'html_tag',
          '#tag' => 'link',
          '#attributes' => array(
            'itemprop' => 'url',
            'href' => url('node/' . $entity->nid, array('abolute' => 'path')),
            'content' => $entity->title,
          ),
        ),
        'description' => array(
          '#theme' => 'html_tag',
          '#tag' => 'meta',
          '#attributes' => array(
            'itemprop' => 'description',
            'content' => check_plain($wrapper_node->body->value()['value']),
          ),
        ),
      );

      // Get product displayed.
      foreach ($entity->content as $field) {
        if (isset($field['#field_type']) && $field['#field_type'] == 'commerce_product_reference') {
          if (isset($field[0])) {
            $products = entity_load('commerce_product', array($field[0]['product_id']['#value']));
            $product = array_pop($products);
            $wrapper_product = entity_metadata_wrapper('commerce_product', $product);

            $data += array(
              'sku' => array(
                'priceCurrency' => array(
                  '#theme' => 'html_tag',
                  '#tag' => 'meta',
                  '#access' => user_access('access commerce_schemaorg offers'),
                  '#attributes' => array(
                    'itemprop' => 'sku',
                    'content' => (isset($wrapper_product->sku)) ? check_plain($wrapper_product->sku->value()) : '',
                  ),
                ),
              ),
              'offers' => array(
                '#type' => 'container',
                '#access' => user_access('access commerce_schemaorg offers'),
                '#attributes' => array(
                  'itemprop' => 'offers',
                  'itemscope' => 'itemscope',
                  'itemtype' => 'http://schema.org/Offer',
                ),
                'priceCurrency' => array(
                  '#theme' => 'html_tag',
                  '#tag' => 'meta',
                  '#access' => isset($wrapper_product->commerce_price),
                  '#attributes' => array(
                    'itemprop' => 'priceCurrency',
                    'content' => (isset($wrapper_product->commerce_price)) ? check_plain($wrapper_product->commerce_price->currency_code->value()) : '',
                  ),
                ),
                'price' => array(
                  '#theme' => 'html_tag',
                  '#tag' => 'meta',
                  '#access' => isset($wrapper_product->commerce_price),
                  '#attributes' => array(
                    'itemprop' => 'price',
                    'content' => (isset($wrapper_product->commerce_price)) ? check_plain($wrapper_product->commerce_price->amount->value()) / 100 : '',
                  ),
                ),
                'availability' => array(
                  '#theme' => 'html_tag',
                  '#tag' => 'link',
                  '#access' => isset($wrapper_product->commerce_stock),
                  '#attributes' => array(
                    'itemprop' => 'availability',
                    'href' => 'http://schema.org/InStock',
                    'content' => (isset($wrapper_product->commerce_stock) && $wrapper_product->commerce_stock->value() > 0) ? t('In stock') : '',
                  ),
                ),
              ),
            );

            if (isset($wrapper_product->field_images) && $wrapper_product->field_images) {
              $data += array(
                'image' => array(
                  '#theme' => 'image_style',
                  '#style_name' => 'full',
                  '#path' => $wrapper_product->field_images[0]->value()['uri'],
                  '#height' => 0,
                  '#width' => 0,
                  '#alt' => (!empty($wrapper_product->field_images[0]->value()['alt'])) ? check_plain($wrapper_product->field_images[0]->value()['alt']) : check_plain($wrapper_product->title->value()),
                  '#attributes' => array(
                    'itemprop' => 'image',
                    'class' => 'element-invisible',
                  ),
                ),
              );
            }

          }
          break;
        }
      }

      // Make data available for others module to add or edit their own
      // microdatas.
      drupal_alter('commerce_schemaorg_product', $data, $entity);
      $entity->content['commerce_schemaorg'] = $data;
    }
  }
}

/* *********************************************************************
 * HELPERS
 * ****************************************************************** */

/**
 * Get all node bundles that seems to be product display bundles.
 *
 * Check this thanks to commerce_product_reference type field attached to.
 *
 * @return array
 *   Array of product display bundles with bundle name as key and value.
 */
function _commerce_schemaorg_get_product_display_bundles() {
  $target_bundles = &drupal_static(__FUNCTION__);

  if (!isset($target_bundles)) {
    $target_bundles = array();

    $fields = field_info_fields();
    foreach ($fields as $field) {
      if ($field['type'] == 'commerce_product_reference' && isset($field['bundles']) && isset($field['bundles']['node'])) {
        $target_bundles = array_merge($target_bundles, drupal_map_assoc($field['bundles']['node']));
      }
    }
  }

  return $target_bundles;

}
