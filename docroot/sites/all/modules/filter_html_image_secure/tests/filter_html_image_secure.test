<?php

/**
 * @file
 * Tests for Local image input filter module.
 */

/**
 * Tests restriction of IMG tags in HTML input.
 */
class FilterHtmlImageSecureWebTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Local image input filter',
      'description' => 'Tests restriction of IMG tags in HTML input.',
      'group' => 'Local image input filter',
    );
  }

  function setUp() {
    parent::setUp(array('filter_html_image_secure'));

    // Setup users.
    $this->admin_user = $this->drupalCreateUser(array(
      'administer filters',
    ));
    $this->web_user = $this->drupalCreateUser(array(
      'access content',
      'access comments',
      'post comments',
      'skip comment approval',
    ));

    // Setup Filtered HTML input format.
    $this->drupalLogin($this->admin_user);
    $edit = array();
    $edit['filters[filter_html][settings][allowed_html]'] = '<img> <a> <em> <strong> <cite> <code> <ul> <ol> <li> <dl> <dt> <dd>';
    $edit['filters[filter_html_image_secure][status]'] = TRUE;
    $this->drupalPost('admin/config/content/formats/filtered_html', $edit, t('Save configuration'));

    // Setup a node to comment and test on.
    $this->node = $this->drupalCreateNode();
    variable_set('comment_preview_page', DRUPAL_OPTIONAL);
    variable_set('comment_form_location_page', COMMENT_FORM_BELOW);

    $this->drupalLogout();
  }

  /**
   * Tests removal of images having a non-local source.
   */
  function testImageSource() {
    global $base_url;
    $this->drupalLogin($this->web_user);

    $public_files_path = variable_get('file_public_path', conf_path() . '/files');

    $http_base_url = preg_replace('/^https?/', 'http', $base_url);
    $https_base_url = preg_replace('/^https?/', 'https', $base_url);
    $files_path = base_path() . $public_files_path;
    $csrf_path = $public_files_path . '/' . implode('/', array_fill(0, substr_count($public_files_path, '/') + 1, '..'));

    $druplicon = 'misc/druplicon.png';
    $red_x_image = base_path() . 'misc/watchdog-error.png';

    // Put a test image in the files directory.
    $test_images = $this->drupalGetTestFiles('image');
    $test_image = $test_images[0]->filename;

    // keys become the value of img src, value is what the filter should convert them to.
    $images = array(
      $http_base_url . '/' . $druplicon => base_path() . $druplicon,
      $https_base_url . '/' . $druplicon => base_path() . $druplicon,
      base_path() . $druplicon => base_path() . $druplicon,
      $files_path . '/' . $test_image => $files_path . '/' . $test_image,
      $http_base_url . '/' . $public_files_path . '/' . $test_image => $files_path . '/' . $test_image,
      $https_base_url . '/' . $public_files_path . '/' . $test_image => $files_path . '/' . $test_image,
      $files_path . '/example.png' => $red_x_image,
      'http://example.com/' . $druplicon => $red_x_image,
      'https://example.com/' . $druplicon => $red_x_image,
      'javascript:druplicon.png' => $red_x_image,
      $csrf_path . '/logout' => $red_x_image,
    );
    $comment = array();
    foreach ($images as $image => $converted) {
      // Hash image for the test attribute because it might contain characters
      // confusing xpath.
      $comment[] = '<img src="' . $image . '" testattribute="' . md5($image) . '" />';
    }
    $edit = array(
      'comment_body[und][0][value]' => implode("\n", $comment),
    );
    $this->drupalPost('node/' . $this->node->nid, $edit, t('Save'));
    foreach ($images as $image => $converted) {
      $found = FALSE;
      foreach ($this->xpath('//img[@testattribute="' . md5($image) . '"]') as $element) {
        $found = TRUE;
        if ($converted == $red_x_image) {
          $this->assertEqual((string) $element['src'], $red_x_image);
          $this->assertEqual((string) $element['alt'], t('Only local images are allowed.'));
          $this->assertEqual((string) $element['title'], t('Only local images are allowed.'));
        }
        else {
          $this->assertEqual((string) $element['src'], $converted);
        }
      }
      $this->assertTrue($found, t('@image was found.', array('@image' => $image)));
    }
  }
}

