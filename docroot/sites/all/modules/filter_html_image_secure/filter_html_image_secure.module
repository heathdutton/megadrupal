<?php

/**
 * @file
 * Restricts IMG tags in filtered user input to this site.
 */

/**
 * Implements hook_filter_info().
 */
function filter_html_image_secure_filter_info() {
  $filters['filter_html_image_secure'] = array(
    'title' => t('Restrict images to this site'),
    'description' => t('Disallows usage of &lt;img&gt; tag sources that are not hosted on this site by replacing them with a placeholder image.'),
    'process callback' => 'filter_html_image_secure_process',
    'tips callback' => 'filter_html_image_secure_filter_tips',
    // Supposed to run after other filters and before HTML corrector by default.
    'weight' => 9,
  );
  return $filters;
}

/**
 * Filter tips callback for local image filter.
 */
function filter_html_image_secure_filter_tips($filter, $format, $long = FALSE) {
  return t('Only images hosted on this site may be used in &lt;img&gt; tags. Others are replaced with an error icon.');
}

/**
 * Process callback for local image filter.
 */
function filter_html_image_secure_process($text, $format) {
  // Find the path (e.g. '/') to Drupal root.
  $base_path = base_path();
  $base_path_length = drupal_strlen($base_path);

  // Find the directory on the server where index.php resides.
  $local_dir = DRUPAL_ROOT . '/';

  $alt_text = t('Only local images are allowed.');

  $html_dom = filter_dom_load($text);
  $images = $html_dom->getElementsByTagName('img');
  foreach ($images as $image) {
    $src = $image->getAttribute('src');
    // Remove absolute URLs pointed to the local domain, in order to prevent
    // mixed content errors.
    $image->setAttribute('src', preg_replace('|^https?://' . $_SERVER['HTTP_HOST'] . '|', '', $src));

    // Verify $src starts with $base_path. This also ensures that external
    // images can't be referenced because $base_path always starts with a
    // slash. Another insurance against that will be prefixing the image
    // source with the Drupal root before running getimagesize() on it.
    $src = $image->getAttribute('src');
    if (drupal_substr($src, 0, $base_path_length) == $base_path) {
      // Remove the base path() to get the path relative to the Drupal root.
      // Also, make sure we're dealing with a real image here.
      if ($info = @getimagesize($local_dir . drupal_substr($src, $base_path_length))) {
        // The image has the right path, nothing to do. Erroneous images
        // are dealt with below.
        continue;
      }
    }
    // Replace invalid images with an error indicator.
    $image->setAttribute('src', $base_path . 'misc/watchdog-error.png');
    $image->setAttribute('title', $alt_text);
    $image->setAttribute('alt', $alt_text);
  }
  $text = filter_dom_serialize($html_dom);

  return $text;
}