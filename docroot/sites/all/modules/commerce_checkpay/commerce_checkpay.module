<?php

/**
 * @file
 * Checkpay payment services for use in Drupal Commerce.
 */


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_checkpay_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_checkpay'] = array(
    'base' => 'commerce_checkpay',
    'title' => t('CheckPay PostNL'),
    'short_title' => t('CheckPay PostNL'),
    'display_title' => t('CheckPay'),
    'description' => t('iDeal payment through CheckPay PostNL'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}


/**
 * Returns the default settings for the CheckPay payment method.
 *
 * @return array
 *   An array containing default settings of the payment method.
 */
function commerce_checkpay_default_settings() {
  return array(
    'certs_public_cert' => '',
    'certs_private_key' => '',
    'key_password' => '',
    'commerce_checkpay_endpoint' => 'https://www.checkpay.nl/WebService/MerchantService.asmx?WSDL',
    'commerce_checkpay_clientnr' => '',
    'commerce_checkpay_country' => 'NL',
    'commerce_checkpay_language' => 'Dutch',
    //'commerce_checkpay_psp_clientnr' => '',
    'commerce_checkpay_order_description' => '',
    'extra_charge_fieldset' => array(
      'extra_charge' => 0,
      'extra_charge_value' => '',
    ),
    'watchdog_logging' => 0,
  );
}


/**
 * Payment method callback: settings form.
 */
function commerce_checkpay_settings_form($settings = array(), $payment_method = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_checkpay_default_settings();

  $form['service_description'] = array(
    '#markup' => '<div>' . t('After registration at PostNL you will receive the necessary parameters to fill in here.') . '</div>',
  );
  $form['certs'] = array(
    '#type' => 'item',
    '#title' => t('Certificates'),
    '#markup' => t("Only when no PSP is involved: After registeration at PostNL, you will receive the necessary certificates. Place them in a secure directory on your server and fill in the paths according."),
  );
  $form['certs_public_cert'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to public certificate file'),
    '#default_value' => $settings['certs_public_cert'],
  );
  $form['certs_private_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to private key file'),
    '#default_value' => $settings['certs_private_key'],
  );
  $form['key_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Key password'),
    '#default_value' => $settings['key_password'],
    '#description' => t("This password is sent to you by PostNL together with the certificates."),
    '#required' => TRUE,
  );
  $form['entrance_code'] = array(
    '#type' => 'item',
    '#title' => t('Entrance Code'),
    '#markup' => t('The Entrance Code sent to the CheckPay webservice is formatted as: [user_id]-[order_id]. This is informative.'),
  );
  $form['commerce_checkpay_endpoint'] = array(
    '#type' => 'textfield',
    '#title' => t('CheckPay Endpoint'),
    '#default_value' => $settings['commerce_checkpay_endpoint'],
    '#description' => t("The endpoint URL for connecting to the webservice."),
    '#required' => TRUE,
    '#size' => 100,
  );
  $form['commerce_checkpay_clientnr'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction Client Nr'),
    '#default_value' => $settings['commerce_checkpay_clientnr'],
    '#description' => t("Your numeric account number of PostNL."),
    '#required' => TRUE,
  );
  $form['commerce_checkpay_country'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction Country'),
    '#default_value' => $settings['commerce_checkpay_country'],
    '#description' => t("The country of the CheckPay transaction."),
    '#required' => TRUE,
  );
  $form['commerce_checkpay_language'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction Language'),
    '#default_value' => $settings['commerce_checkpay_language'],
    '#description' => t("The language of the CheckPay transaction."),
    '#required' => TRUE,
  );
  /*$form['commerce_checkpay_psp'] = array(
    '#type' => 'textfield',
    '#title' => t('PSP'),
    '#default_value' => $settings['commerce_checkpay_psp_clientnr'],
    '#description' => t("Code used to identify the Payment Service Provider used by you (as a Merchant)."),
    '#required' => FALSE,
  );
  $form['commerce_checkpay_psp_clientnr'] = array(
    '#type' => 'textfield',
    '#title' => t('PSP Client Nr'),
    '#default_value' => $settings['commerce_checkpay_psp_clientnr'],
    '#description' => t("Your client number as registered with your PSP. Only when there is a Payment Service Provider involved."),
    '#required' => FALSE,
  );*/
  $form['commerce_checkpay_order_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Order description for the customer'),
    '#default_value' => $settings['commerce_checkpay_order_description'],
    '#description' => t("A clarifying description of the order. E.g. Order at !site_name.", array('!site_name' => variable_get('site_name', t("MyWebsite")))),
    '#required' => TRUE,
    '#size' => 100,
  );
  $form['extra_charge_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Display extra charge'),
  );
  $form['extra_charge_fieldset']['description'] = array(
    '#markup' => '<div>' . t('These settings will only display information about an extra charge. The functional part can be achieved by using the Rules module.') . '<br /></div>',
  );
  $form['extra_charge_fieldset']['extra_charge'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add information about an extra charge to the payment method. This will be shown when selecting the payment method.'),
    '#default_value' => $settings['extra_charge_fieldset']['extra_charge'],
  );
  $form['extra_charge_fieldset']['extra_charge_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Extra charge'),
    '#default_value' => $settings['extra_charge_fieldset']['extra_charge_value'],
    '#description' => t('The amount to be charged when selecting this payment method.'),
    '#required' => FALSE,
    '#size' => 10,
  );
  $form['watchdog_logging'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable watchdog logging during payment process for debugging purposes.'),
    '#default_value' => $settings['watchdog_logging'],
  );

  return $form;
}

/**
 * Payment method callback: submit form.
 */
function commerce_checkpay_submit_form($payment_method, $pane_values, $checkout_pane, $order) {

  $form = array();

  // Merge in values from the order.
  if (!empty($order->data['commerce_checkpay'])) {
    $pane_values += $order->data['commerce_checkpay'];
  }

  // Merge in default values.
  $pane_values += array(
    'phonenumber' => '',
  );

  // Load order.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();

  if ($payment_method['settings']['extra_charge_fieldset']['extra_charge']) {
    $amount = $payment_method['settings']['extra_charge_fieldset']['extra_charge_prefix'] . ' ' . $payment_method['settings']['extra_charge_fieldset']['extra_charge_value'] . ' ' . $payment_method['settings']['extra_charge_fieldset']['extra_charge_suffix'];
    $form['extra_charge'] = array(
      '#type' => 'item',
      '#title' => t('Extra charge for using CheckPay PostNL'),
      '#markup' => t('An extra amount of !amount will be charged and added to your order total.', array(
        '!amount' => commerce_currency_format($amount, $currency_code, NULL, TRUE),
      )),
    );
  }
  $form['phonenumber'] = array(
    '#type' => 'textfield',
    '#title' => t('Mobile phone number'),
    '#description' => t('Via email and SMS you will receive your delivery code.<br />Keep this code stand by when the driver arrives.<br />E.g. 0612345678'),
    '#default_value' => ($pane_values['phonenumber']) ? $pane_values['phonenumber'] : '',
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_checkpay_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // Return an error if the payment method's settings haven't been configured.
  foreach (array(
    'key_password',
    'commerce_checkpay_endpoint',
    'commerce_checkpay_clientnr',
    'commerce_checkpay_country',
    'commerce_checkpay_language',
    'commerce_checkpay_order_description',
  ) as $key) {
    if (empty($payment_method['settings'][$key])) {
      drupal_set_message(t('@title is not configured for use. Please contact an administrator to resolve this issue.', array('@title' => $payment_method['title'])), 'error');
      if (!empty($payment_method['settings']['watchdog_logging']) && $payment_method['settings']['watchdog_logging']) {
        watchdog('commerce_checkpay', 'The required settings are not set for @title', array('@title' => $payment_method['title']), WATCHDOG_NOTICE);
      }
      return FALSE;
    }
  }
  // Return an error if the certificates are not present.
  $private_pem = (isset($payment_method['settings']['certs_private_key'])) ? $payment_method['settings']['certs_private_key'] : FALSE;
  $merchantcert_cer = (isset($payment_method['settings']['certs_public_cert'])) ? $payment_method['settings']['certs_public_cert'] : FALSE;
  if (!file_exists($private_pem) || !file_exists($merchantcert_cer)) {
    drupal_set_message(t('@title is not configured for use. Please contact an administrator to resolve this issue.', array('@title' => $payment_method['title'])), 'error');
    if (!empty($payment_method['settings']['watchdog_logging']) && $payment_method['settings']['watchdog_logging']) {
      watchdog('commerce_checkpay', 'Certificate files are not present for @title', array('@title' => $payment_method['title']), WATCHDOG_NOTICE);
    }
    return FALSE;
  }
  // Remove special chars.
  $pane_values['phonenumber'] = str_replace(array(' ', '.', '/', '\\', '-'), '', $pane_values['phonenumber']);
  // Check if number is numeric.
  if (!is_numeric($pane_values['phonenumber'])) {
    form_set_error(implode('][', array_merge($form_parents, array('phonenumber'))), t('The phone number must be numeric only. Spaces are not allowed.'));
    return FALSE;
  }
  // Check the the starting chars of the phone number
  // (Dutch phone numbers only).
  if (substr($pane_values['phonenumber'], 0, 2) != '06') {
    form_set_error(implode('][', array_merge($form_parents, array('phonenumber'))), t('The phone number must start with "06".'));
    return FALSE;
  }
  // Check the length of the number.
  if (strlen($pane_values['phonenumber']) > 10) {
    form_set_error(implode('][', array_merge($form_parents, array('phonenumber'))), t('The phone number is too long.'));
    return FALSE;
  }
  // Phone number is ok, save the modified number to the order for further use.
  $order->data['phonenumber'] = $pane_values['phonenumber'];
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_checkpay_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Generate a payment redirect key.
  $order->data['payment_redirect_key'] = drupal_hash_base64(drupal_random_bytes(10));

  // Build the Entrance Code: this the userid combined with the order_id.
  $entrance_code = $order->uid . '-' . $order->order_id;

  // Get the fixed values of the parameters for the Transaction Request.
  $clientnr = $payment_method['settings']['commerce_checkpay_clientnr'];
  $country = $payment_method['settings']['commerce_checkpay_country'];
  $language = $payment_method['settings']['commerce_checkpay_language'];
  $psp = '';// $payment_method['settings']['commerce_checkpay_psp'];
  $psp_clientnr = '';// $payment_method['settings']['commerce_checkpay_psp_clientnr'];
  $order_description = $payment_method['settings']['commerce_checkpay_order_description'];

  // Load order data.
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();
  $billing_address = $wrapper->commerce_customer_billing->commerce_customer_address->value();
  $first_name = $billing_address['first_name'];
  $last_name = $billing_address['last_name'];
  $buyername = $first_name . ' ' . $last_name;
  $buyercity = $billing_address['locality'];
  $buyerphone = $order->data['phonenumber'];

  $start_transaction_request = new StartTransactionRequest();
  $start_transaction_request->EntranceCode = $entrance_code;
  $start_transaction_request->ReturnURL = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));

  // Build checkpay transaction and receive redirect URL.
  $transaction = new Transaction();
  $transaction->ClientNr = $clientnr;
  $context = new Context();
  $context->Country = $country;
  $context->Language = $language;
  $context->Currency = $currency_code;
  $transaction->Context = $context;
  $transaction->OrderAmount = $amount;
  $transaction->OrderDescription = $order_description;
  $transaction->OrderNr = $order->order_id;
  $buyer = new Buyer();
  $buyer->EMailAddress = $order->mail;
  $buyer->SMSPhoneNr = $buyerphone;
  $buyer->Name = $buyername;
  $buyer->City = $buyercity;
  $transaction->PSP = $psp;
  $transaction->PSPClientNr = $psp_clientnr;
  $transaction->Buyer = $buyer;
  $start_transaction_request->Transaction = $transaction;
  $client = new SecurityXML($payment_method['settings']['commerce_checkpay_endpoint'], array('cache_wsdl' => WSDL_CACHE_NONE));
  $client->bodyEntity = $start_transaction_request;

  // Start transaction.
  $start_transaction_result = $client->StartTransaction($start_transaction_request);

  // Catch errors.
  if (empty($start_transaction_result->PaymentURL)) {
    if (!empty($payment_method['settings']['watchdog_logging']) && $payment_method['settings']['watchdog_logging']) {
      watchdog('commerce_checkpay', 'No return URL found in CheckPay response.', array(), WATCHDOG_ERROR);
    }
    drupal_set_message(t('The CheckPay server did not return valid data. Please contact an administrator to resolve this issue.'), 'error');
    return FALSE;
  }

  // Save payment URL (user will be sent to this URL to pay the order).
  $order->data['paymentURL'] = $start_transaction_result->PaymentURL;
  // Save the phone number for later use if required.
  $order->data['buyer_sms_phone_nr'] = $buyerphone;
}


/**
 * Implements CALLBACK_redirect_form().
 */
function commerce_checkpay_redirect_form(array $form, array &$form_state, $order, array $payment_method) {
  if ($order->data['paymentURL']) {
    drupal_goto($order->data['paymentURL']);
  }
  drupal_goto('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key']);
}

/**
 * Payment method callback: redirect form back callback.
 */
function commerce_checkpay_redirect_form_back($order, $payment_method) {
  // Display a message indicating the customer canceled payment.
  drupal_set_message(t('You have canceled payment at CheckPay PostNL but may resume the checkout process here when you are ready.'));

  // Remove the payment information from the order data array.
  unset($order->data['payment_method']);
}

/**
 * Payment method callback: redirect form return validation.
 */
function commerce_checkpay_redirect_form_validate($order, $payment_method) {
  if (!empty($payment_method['settings']['watchdog_logging']) && $payment_method['settings']['watchdog_logging']) {
    $sanitized_get = check_plain(print_r($_GET, TRUE));
    watchdog('commerce_checkpay', 'Customer returned from CheckPay PostNL with the following GET data: !data', array('!data' => '<pre>' . $sanitized_get . '</pre>'), WATCHDOG_NOTICE);
  }
  // Get the transaction status at CheckPay.
  $transaction_nr = $_GET['tid'];
  $transaction_info = _commerce_checkpay_get_checkpay_transaction_info($transaction_nr, $payment_method['settings']['commerce_checkpay_endpoint'], $payment_method['settings']['commerce_checkpay_clientnr']);
  // Get the transaction status.
  $transaction_status = $transaction_info->Transaction->OrderPaymentStatus->Code;
  // Compare the transaction info to the current order as a security check.
  if ($transaction_info->Transaction->OrderNr != $order->order_id) {
    // Overwrite status to cancel order when the order ids are
    // not corresponding.
    $transaction_status = 'orderID-error';
  }

  // Save transaction_info to order for later use in form submission.
  $order->data['transaction_info'] = $transaction_info;

  if (!empty($payment_method['settings']['watchdog_logging']) && $payment_method['settings']['watchdog_logging']) {
    $sanitized_transaction_info = check_plain(print_r($transaction_info, TRUE));
    watchdog('commerce_checkpay', 'Transaction information after returning from CheckPay: !data', array('!data' => '<pre>' . $sanitized_transaction_info . '</pre>'), WATCHDOG_NOTICE);
  }

  // Show proper message to user.
  $go_back = FALSE;
  $return_false = FALSE;
  switch ($transaction_status) {
    case 0:
      $info_message = "Registered: Payment registered by merchant, consumer did not started actual payment";
      $return_false = TRUE;
      break;

    case 1:
      $info_message = "Processing: Consumer started payment";
      $return_false = TRUE;
      break;

    case 2:
      // PayIn: Consumer paid successfully.
      break;

    case 3:
      $info_message = "Expired: Transaction expired, customer will be reimbursed";
      $return_false = TRUE;
      break;

    case 4:
      $info_message = "Accepting: Waiting for acceptance";
      $return_false = TRUE;
      break;

    case 5:
      $info_message = "Accepted: Parcel accepted in distribution centre";
      $return_false = TRUE;
      break;

    case 6:
      $info_message = "Locked: Transaction locked (different payment advice)";
      $return_false = TRUE;
      break;

    case 7:
      $info_message = "Cancelled: Payment cancelled";
      // Set a 'back' redirect.
      $go_back = 'checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'];
      break;

    case 8:
      $info_message = "Archived: Transaction archived";
      $return_false = TRUE;
      break;

    case 9:
      $info_message = "Failed: Payment failed";
      $return_false = TRUE;
      break;

    // Custom status: returned order id is not corresponding to current order.
    case 'orderID-error':
      $info_message = "Failed: The order ID returned from CheckPay does not correspond to the active order.";
      $return_false = TRUE;
      break;

  }

  // When errors occurred, save proper 'failed' transaction.
  if ($go_back || $return_false) {
    // Provide a more descriptive error message in the failed transaction and
    // the watchdog.
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $order_total = $order_wrapper->commerce_order_total->amount->value();
    $currency_code = $order_wrapper->commerce_order_total->currency_code->value();

    $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
    $transaction->amount = $order_total;
    $transaction->currency_code = $currency_code;
    $transaction->payload[REQUEST_TIME] = $transaction_info;
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $transaction->message = $info_message;
    commerce_payment_transaction_save($transaction);

    if (!empty($payment_method['settings']['watchdog_logging']) && $payment_method['settings']['watchdog_logging']) {
      watchdog('commerce_checkpay', 'CheckPay transaction failed: !data', array('!data' => $info_message), WATCHDOG_NOTICE);
    }
  }

  // When errors occurred, redirect to proper page.
  if ($go_back) {
    // Not ideal to place a goto in form_validate, but otherwise
    // the right message (via redirect_form_back) could not be displayed.
    drupal_goto($go_back);
    return FALSE;
  }
  if ($return_false) {
    return FALSE;
  }
}

/**
 * Payment method callback: redirect form return submission.
 */
function commerce_checkpay_redirect_form_submit($order, $payment_method) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_total = $order_wrapper->commerce_order_total->amount->value();
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();

  // Prepare a transaction object to log the API response.
  $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $order_total;
  $transaction->currency_code = $currency_code;
  $transaction->payload[REQUEST_TIME] = $order->data;
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->remote_status = $order->data['transaction_info']->Transaction->OrderPaymentStatus->Code;
  $transaction->remote_id = $order->data['transaction_info']->Transaction->TransactionNr;
  $transaction->message = 'PayIn: Consumer paid successfully';

  commerce_payment_transaction_save($transaction);
}

/**
 * Retrieve all information of a transaction from the CheckPay web service.
 *
 * @param string $transaction_nr
 *   The remote transaction number.
 * @param string $endpoint
 *   The WSDL endpoint of the web service.
 * @param string $client_nr
 *   The PostNL client number.
 *
 * @return object
 *   An object containing all information of the transaction.
 */
function _commerce_checkpay_get_checkpay_transaction_info($transaction_nr, $endpoint, $client_nr) {
  // Get transaction information.
  $transaction_info_request = new TransactionInfoRequest();
  $transaction_info_request->TransactionNr = $transaction_nr;
  $transaction_info_request->ClientNr = $client_nr;
  $client = new SecurityXML($endpoint, array('cache_wsdl' => WSDL_CACHE_NONE));
  $client->bodyEntity = $transaction_info_request;
  $response = $client->GetTransactionInfo($transaction_info_request);

  return $response;
}
