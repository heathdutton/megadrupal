<?php

/**
 * @file
 * Module file for Node Auto Field Table of Contents.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function node_auto_fieldtoc_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_field_attach_view_alter().
 */
function node_auto_fieldtoc_field_attach_view_alter(&$output, $context) {
  // In this function we are going to add in page anchors to a node's
  // field's render array prefix.  This in combination with the toc pane
  // creates an automatic field table of contents based on a content type's view
  // mode field visibility.
  // We proceed only on nodes.
  if ($context['entity_type'] != 'node') {
    return;
  }
  elseif (variable_get('node_auto_fieldtoc_enable_' . $context['entity']->type, FALSE) == FALSE) {
    // This content type is not enabled.
    return;
  }

  $node = $context['entity'];

  // Load all instances of the fields for the node.
  $instances = _field_invoke_get_instances('node', $node->type, array('default' => TRUE, 'deleted' => FALSE));

  foreach ($instances as $field_name => $instance) {
    $display = field_get_display($instance, $context['view_mode'], $node);

    // Do not add field that is hidden in current display.
    if ($display['type'] == 'hidden') {
      continue;
    }
    $fragment_type = variable_get('node_auto_fieldtoc_field_fragment_' . $node->type, 'label');

    $name = check_plain(strtolower($instance[$fragment_type]));
    if (isset($output[$field_name])) {
      if (isset($output[$field_name]['#prefix'])) {
        $output[$field_name]['#prefix'] = $output[$field_name]['#prefix'] . '<a id="' . $name . '"></a>';
      }
      else {
        $output[$field_name]['#prefix'] = '<a id="' . $name . '"></a>';
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function node_auto_fieldtoc_form_node_type_form_alter(&$form, $form_state) {
  if (isset($form['type'])) {
    $type = $form['#node_type'];
    $form['node_auto_fieldtoc'] = array(
      '#title' => t('Node Automatic Field TOC Settings'),
      '#type' => 'fieldset',
      '#group' => 'additional_settings',
      '#tree' => FALSE,
    );
    $form['node_auto_fieldtoc']['node_auto_fieldtoc_enable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable this content type for Node Auto Field TOC'),
      '#weight' => 10,
      '#default_value' => variable_get('node_auto_fieldtoc_enable_' . $type->type, FALSE),
    );

    $form['node_auto_fieldtoc']['node_auto_fieldtoc_field_fragment'] = array(
      '#type' => 'select',
      '#title' => t('Field component to use for Fragment'),
      '#description' => t("Choose whether to use a node's field labels or field machine names for the anchor fragment."),
      '#options' => array(
        'label' => t('label'),
        'field_name' => t('field_name'),
      ),
      '#weight' => 13,
      '#default_value' => variable_get('node_auto_fieldtoc_field_fragment_' . $type->type, 'label'),
      '#empty_value' => '',
      '#empty_option' => t('- Please select -'),
    );
  }
}

/**
 * Implements hook_node_type_update().
 */
function node_auto_fieldtoc_node_type_update($info) {
  if (!empty($info->old_type) && $info->old_type != $info->type) {
    $type_variables = array(
      'node_auto_fieldtoc_enable',
      'node_auto_fieldtoc_field_fragment',
    );
    foreach ($type_variables as $prefix) {
      $setting = variable_get($prefix . '_' . $info->old_type);
      if (isset($setting)) {
        variable_del($prefix . '_' . $info->old_type);
        variable_set($prefix . '_' . $info->type, $setting);
      }
    }
  }
}

/**
 * Implements hook_node_type_delete().
 */
function node_auto_fieldtoc_node_type_delete($info) {
  variable_del('node_auto_fieldtoc_enable_' . $info->type);
  variable_del('node_auto_fieldtoc_field_fragment_' . $info->type);
}
