<?php
/**
 * @file
 * Test file for DART module.
 */

class dartBaseTest extends DrupalWebTestCase {
  /**
   * Implementation of setUp().
   */
  function setUp() {
    // Enable a couple modules.
    parent::setUp('ctools', 'dart', 'libraries', 'contextual', 'taxonomy');
    menu_rebuild();

    // Create an admin user with all the permissions needed to run tests.
    $this->admin_user = $this->drupalCreateUser(array('administer DART tags', 'administer taxonomy', 'access administration pages', 'administer blocks', 'bypass node access', 'administer nodes', 'edit terms in 1', 'access contextual links'));
    $this->drupalLogin($this->admin_user);

    // Setup the basic global settings for DART.
    $this->globalSettings = $this->dartGlobalSettings();
  }

  /**
   * Set some default global settings for the DART module.
   */
  function dartGlobalSettings($edit = array()) {
    $key_vals = $this->dartGenerateKeyVals(3);

    $edit += array(
      'dart_global_prefix' => $this->randomName(8),
      'dart_global_site' => $this->randomName(8),
      'dart_global_zone' => $this->randomName(8),
      'dart_global_slug' => $this->randomName(8),
      'dart_load_last' => 0,
      'dart_noscript' => 0,
      'dart_include_taxonomy_terms' => TRUE,
      'dart_term_key' => 'term',
      'dart_term_formatter' => '_dart_term_formatter_full',
      'dart_enable_ad_categories' => 0,
      'dart_special_key_vals[tile]' => 'tile',
      'dart_special_key_vals[ord]' => 'ord',
      'dart_special_tile_init' => 0,
      'dart_js' => 'console.log("' . $this->randomName(8) . '")',
      'dart_test_prefix' => $this->randomName(8),
      'dart_test_site' => $this->randomName(8),
      'dart_test_zone' => $this->randomName(8),
      'dart_enable_bg_ads' => 0,
    );
    $this->drupalPost('admin/structure/dart_tags/settings', $edit, t('Save configuration'));
    for ($i = 0; $i < count($key_vals); $i++) {
      $edit['key_vals[' . $i . '][key]'] = $key_vals[$i]['key'];
      $edit['key_vals[' . $i . '][val]'] = $key_vals[$i]['val'];
      $edit['key_vals[' . $i . '][eval]'] = $key_vals[$i]['eval'];
      $this->drupalPost('admin/structure/dart_tags/settings', $edit, t('Save configuration'));
    }

    return $edit;
  }

  /**
   * Create a simple $edit array to be used on the DART tag form to create a new
   * DART tag object.
   */
  function dartTagEditValues() {
    $machinename = drupal_strtolower($this->randomName(8));
    $key_vals = $this->dartGenerateKeyVals(1);

    $basic_tag = array(
      'machinename' => $machinename,
      'name' => $this->randomName(8),
      'pos' => $this->randomName(8),
      'sz' => implode(',', $this->dartGenerateSize(2)),
      'site' => '',
      'zone' => '',
      'slug' => '',
      'block' => 1,
      'scriptless' => FALSE,
      'method' => 'adj',
      'key_vals[0][key]' => $key_vals[0]['key'],
      'key_vals[0][val]' => $key_vals[0]['val'],
      'key_vals[0][eval]' => $key_vals[0]['eval'],
    );

    return $basic_tag;
  }

  /**
   * Generate random key value pairs.
   */
  function dartGenerateKeyVals($count = 1) {
    $key_vals = array();

    for ($i = 0; $i < $count; $i++) {
      $key_vals[] = array(
        'key' => $this->randomName(8),
        'val' => $this->randomName(8),
        'eval' => 0,
      );
    }

    return $key_vals;
  }

  /**
   * Generate a random size (or array or sizes) to use when testing tags
   * formatted as ###x###.
   */
  function dartGenerateSize($count = 1) {
    $sizes = array('300x250', '300x600', '728x90', '728x10', '160x600', '120x80', '300x100', '50x50', '160x300');
    shuffle($sizes);

    return $count == 1 ? array_pop($sizes) : array_slice($sizes, 0, min($count, count($sizes)));
  }

  /**
   * Creates a basic dart ad tag.
   */
  function createTag($edit = array()) {
    // Create a new tag.
    $edit += $this->dartTagEditValues();
    $this->drupalPost('admin/structure/dart_tags/add', $edit, t('Save'));

    // Load the tag object.
    $tag = dart_tag_load($edit['machinename']);
    $this->assertTrue(is_object($tag) && $tag->machinename = $edit['machinename'], 'The new tag was saved correctly.');

    // Display the new tag.
    $edit = array();
    $delta = 'dart_dart-tag-' . (drupal_strlen($tag->machinename) >= 32 ? md5($tag->machinename) : $tag->machinename);
    $edit['blocks[' . $delta . '][region]'] = 'sidebar_first';
    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));

    // Assert that contextual links were added.
    $this->assertText(t('Configure DART Tag'), 'A contextual link was properly added to the block.');

    return $tag;
  }

  /**
   * Edit a given tag specified by $machinename with the given values.
   */
  function editTag($machinename, &$edit) {
    // Make sure there is no machinename set when we are editing.
    if (isset($edit['machinename'])) {
      unset($edit['machinename']);
    }

    $this->drupalPost('admin/structure/dart_tags/list/' . $machinename . '/edit', $edit, t('Save'));
    $this->drupalGet('admin/structure/dart_tags/list/' . $machinename . '/edit');
    drupal_static_reset('ctools_export_load_object');
    $tag = dart_tag_load($machinename);
    return $tag;
  }

  /**
   * Assert that the given tag is being displayed properly within the raw HTML
   * of the page.
   *
   * @param  object $tag
   */
  function assertTag($tag) {
    $tag = (array)$tag;

    foreach ($tag as $key => $value) {
      if (is_array($value)) {
        $this->assertTag($tag[$key]);
      }
      elseif (is_string($value)) {
        if ($key != 'src' && $key != 'href') { // @todo: this if statement is a hack because of slash issues.
          $this->assertRaw('"' . $key . '":"' . $value . '"', "Tag: " . $key . " was properly included.");
        }
      }
    }
  }
}

class dartTagCRUDTest extends dartBaseTest {
  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('DART Tag CRUD Operations'),
      'description' => t('Tests for displaying DART tags.'),
      'group' => t('DART'),
    );
  }

  function testDisplayTag() {
    // Create a simple tag as a block.
    $tag = $this->createTag();
    $this->assertTag($tag);
  }

  function testUpdateTag() {
    // Create a simple tag.
    $tag = $this->createTag();
    $edit = $this->dartTagEditValues();
    $tag = $this->editTag($tag->machinename, $edit);
    $this->assertTag($tag);
  }

  function testDeleteTag() {
    // Create a simple tag as a block and then delete it.
    $tag = $this->createTag();
    $this->drupalPost('admin/structure/dart_tags/list/' . $tag->machinename . '/delete', array(), t('Delete'));
    $this->assertNoText(t('%machinename is not a valid DART tag.', array('%machinename' => $tag->machinename)), 'The deleted tag is not attempting to display as a block.');
    $this->drupalGet('admin/structure/dart_tags/list');
    $this->assertNoText($tag->name, 'The deleted tag does not appear in the list of tags.');
  }
}

class dartKeyValTest extends dartBaseTest {
  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('DART Tag Key|Values Tests'),
      'description' => t('Tests that key|value pairs are added to DART tags properly.'),
      'group' => t('DART'),
    );
  }

  // Test gloabl key vals.
  function testGlobalKeyValPairs() {
    $tag = $this->createTag();
    $global_key_vals = variable_get('dart_key_vals', array());
    foreach ($global_key_vals as $keyval) {
      $this->assertRaw($keyval['key'], "Global key vals: the key <em>" . $keyval['key'] . "</em> was found");
      $this->assertRaw($keyval['val'], "Global key vals: the val <em>" . $keyval['val'] . "</em> was found");
    }
  }

  // Test "special" key vals.
  function testSpecialKeyValuePairs() {
    $this->assertRaw('var tile = ' . variable_get('dart_special_tile_init', 0) . ';', 'The tile value was correctly initiated.');
    $this->assertRaw('var ord = 1000000000 + Math.floor(Math.random() * 900000000);', 'The ord value was correctly initiated.');

    // Test "special" key vals are not included when they are turned off.
    $edit = array(
      'dart_special_key_vals[tile]' => FALSE,
      'dart_special_key_vals[ord]' => FALSE,
    );
    $this->drupalPost('/admin/structure/dart_tags/settings', $edit, t('Save configuration'));
    $this->assertNoRaw('var tile', 'The tile value was correctly ommitted.');
    $this->assertNoRaw('var ord', 'The ord value was correctly ommitted.');
  }

  // Test tokens in key vals.
  // We must use generic tokens here because the context gets confused when
  // simpletest is running. For example, it isnt sure which user should be used
  // for token replacement.
  function testTokenKeyVals() {
    $tag = $this->createTag();

    $count = 2;
    $tokens = array(
      '[current-date:custom:Ymd]',
      '[site:name]',
    );
    $key_vals = $this->dartGenerateKeyVals($count);

    for ($i = 0; $i < count($key_vals); $i++) {
      $edit['key_vals[' . $i . '][key]'] = $key_vals[$i]['key'];
      $edit['key_vals[' . $i . '][val]'] = $tokens[$i];
      $edit['key_vals[' . $i . '][eval]'] = 0;
    }
    $this->drupalPost('/admin/structure/dart_tags/settings', $edit, t('Save configuration'));

    foreach ($tokens as $token) {
      $value = token_replace($token, _dart_get_token_context($tag), array(
        'clear' => 1,
        'sanitize' => 1,
      ));
      $this->assertRaw('"val":"' . $value . '"', 'The key value pair containing the ' . $token . ' (' . $value . ') token were properly rendered.');
    }
  }

  function testTaxonomyTermKeyVals() {
    // Create a node with terms. Test that those terms show up in the dart tag.
    $tag = $this->createTag();
    $terms = array(
      $this->randomName(12), // tid 1
      $this->randomName(12), // tid 2
      $this->randomName(12), // tid 3
    );
    $edit = array(
      'title' => $this->randomName(12),
      'field_tags[und]' => implode(',', $terms),
    );
    $this->drupalPost('node/add/article', $edit, t('Save'));
    for ($i = 0; $i < count($terms); $i++) {
      $term = $terms[$i];
      $this->assertRaw($terms[$i], 'The term ' . $terms[$i] . ' was properly added to the DART tag');
    }

    // Check each term formatter.
    $formatters = _dart_term_formatters() ;
    foreach ($formatters as $formatter => $formatter_name) {
      $edit = array(
        'dart_term_formatter' => $formatter,
        'dart_include_taxonomy_terms' => TRUE,
        'dart_term_key' => 'term',
      );
      $this->drupalPost('/admin/structure/dart_tags/settings', $edit, t('Save configuration'));
      $this->drupalGet('node/1');

      for ($i = 0; $i < count($terms); $i++) {
        $term_obj = taxonomy_term_load($i + 1);
        $formatted_term = $formatter($term_obj);
        $this->assertRaw('term=' . $formatted_term, 'The `' . $formatter_name . '` formatter was used properly when adding terms to the DART tag');
      }

    }
  }

}

class dartNoScriptTest extends dartBaseTest {
  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('DART Tag noscript Tests'),
      'description' => t('Tests that DART tags display noscript tags properly.'),
      'group' => t('DART'),
    );
  }

  // Test noscript tags display properly
  function testNoScript() {
    $edit = array(
      'dart_load_last' => FALSE,
      'dart_noscript' => TRUE,
    );
    $this->drupalPost('/admin/structure/dart_tags/settings', $edit, t('Save configuration'));
    $tag = $this->createTag();
    $this->assertRaw('<noscript><a href="http://ad.doubleclick.net/jump/', 'noscript tags are displayed properly.');
  }
}

class dartAdCategoriesTest extends dartBaseTest {
  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('DART Ad Categories Tests'),
      'description' => t('Tests that DART Ad Categories work properly.'),
      'group' => t('DART'),
    );
  }

  function enableAdCategories() {
    $edit = array(
      'dart_enable_ad_categories' => TRUE,
      'dart_enable_ad_categories_bundles[tags]' => 'tags',
    );
    $this->drupalPost('/admin/structure/dart_tags/settings', $edit, t('Save configuration'));
    $this->drupalGet('admin/structure/taxonomy/tags/add');
  }

  function disableAdCategories($vocab = '') {
    if (empty($vocab)) {
      $edit = array(
        'dart_enable_ad_categories' => 0,
      );
    }
    else {
      $edit = array(
        'dart_enable_ad_categories_bundles[tags]' => 0,
      );
    }
    $this->drupalPost('/admin/structure/dart_tags/settings', $edit, t('Save configuration'));
    $this->drupalGet('admin/structure/taxonomy/tags/add');
  }

  function testEnableDisableAdCategories() {
    // Check that enabling DART Ad Categories for the "tags" vocabulary works.
    $this->enableAdCategories();
    $this->assertFieldByName('field_dart_ad_categories[und]');

    // Check that disabling DART Ad Categories vocabulary works even when a
    // bundle is selected.
    $this->disableAdCategories();
    $this->assertNoFieldByName('field_dart_ad_categories[und]');

    // Check that disabling DART Ad Categories on a specific vocabulary works.
    // For this test to be valid, we first need to reenable DART Ad Categories.
    $this->enableAdCategories();
    $this->disableAdCategories('tags');
    $this->assertNoFieldByName('field_dart_ad_categories[und]');
  }

  // Test that DART Catetories are displayed properly.
  function testDisplayAdCategories() {
    $this->enableAdCategories();

    // Create a new DART Ad Category term.
    $dart_category = drupal_strtolower($this->randomName(8)); // tid == 1
    $edit = array(
      'name' => $dart_category,
    );
    $this->drupalPost('admin/structure/taxonomy/dart_ad_categories/add', $edit, t('Save'));

    // Create a new "Article" node with two tags.
    $control_tag = $this->randomName(8); // tid == 2
    $test_tag = $this->randomName(8); // tid == 3
    $edit = array(
      'title' => $this->randomName(8),
      'field_tags[und]' => $control_tag . ', ' . $test_tag,
    );
    $this->drupalPost('node/add/article', $edit, t('Save'));

    // Edit one the new tags and tag it with a DART Ad Category.
    $edit = array(
      'field_dart_ad_categories[und]' => 1,
    );
    $this->drupalPost('taxonomy/term/3/edit', $edit, t('Save'));

    // Create a DART ad slot that targets the [dart_tag:ad_categories] token.
    $edit = $this->dartTagEditValues();

    // Create a tag that uses the dart tag token as a key value.
    $edit['key_vals[0][val]'] = '[dart_tag:ad_categories]';
    $tag = $this->createTag($edit);

    // Check that when we are on the node page, that the DART Ad Category is used
    // and that the control tag is also displayed.
    $this->drupalGet('node/1');
    $this->assertRaw($dart_category, 'DART Ad Categories work correctly.');

    // Check that when we are on the term page for one of DART Ad Categories that
    // it is correctly included.
    $this->drupalGet('taxonomy/term/1');
    $this->assertRaw(':"' . $dart_category . '"', 'DART Ad Categories appear on its own term page correctly.');

    // Check that when we are on a term page for a term with a coresponding
    // DART Ad Categories the DART Ad Category is included.
    $this->drupalGet('taxonomy/term/3');
    $this->assertRaw(':"' . $dart_category . '"', 'DART Ad Categories appear on term pages for terms that have a DART Ad Category correctly.');
  }

}

class dartOverridesTest extends dartBaseTest {
  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('DART Overrides Tests'),
      'description' => t('Tests that DART Tags overrides work properly.'),
      'group' => t('DART'),
    );
  }

  // Test that tags with override values use them.
  function testOverrides() {
    $edit = array(
      'site' => $this->randomName(8),
      'zone' => $this->randomName(8),
      'slug' => $this->randomName(8),
    );
    $tag = $this->createTag($edit);
    $this->assertRaw($edit['site'], 'The site override work properly.');
    $this->assertRaw($edit['zone'], 'The zone override work properly.');
    $this->assertText($edit['slug'], 'The slug override works properly.');
  }
}

class dartAdTestsTest extends dartBaseTest {
  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('DART Ad Test Tests'),
      'description' => t('Tests that DART test page works properly.'),
      'group' => t('DART'),
    );
  }

  // Test that the test page works
  function testTestPage() {
    $tag = $this->createTag();
    $this->drupalGet('admin/structure/dart_tags/test_page');
    $this->assertTag($tag);

    $edit = array(
      'adtest' => 'true',
      'site' => $this->randomName(8),
      'zone' => $this->randomName(8),
    );
    $this->drupalGet('admin/structure/dart_tags/test_page', array('query' => $edit));
    $this->assertRaw('"site":"' . $edit['site'] . '","zone":"' . $edit['zone'] . '"');
  }

  // Test that the ?adtest query string works
  function testAdTestQueryString() {
    $tag = $this->createTag();
    $overrides = array(
      'adtest' => 'true',
      'site' => $this->randomName(8),
      'zone' => $this->randomName(8),
    );

    $this->drupalGet('<front>', array('query' => $overrides));
    $this->assertRaw('"site":"' . $overrides['site'] . '","zone":"' . $overrides['zone'] . '"');
  }
}

class dartBgAdTest extends dartBaseTest {
  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('DART Background Ad Tests'),
      'description' => t('Tests that DART-served background ads are handled properly.'),
      'group' => t('DART'),
    );
  }

  function testBgAdProperties() {
    $vars = array(
      'dart_bg_var_bgimg' => $this->randomName(12),
      'dart_bg_var_bgcolor' => $this->randomName(12),
      'dart_bg_var_bgrepeat' => $this->randomName(12),
      'dart_bg_var_clickurl' => $this->randomName(12),
      'dart_bg_var_selector' => 'body',
    );
    $edit = $vars + array(
      'dart_enable_bg_ads' => 1,

    );
    $this->drupalPost('admin/structure/dart_tags/settings', $edit, t('Save configuration'));
    $this->drupalGet('<front>');
  }
}
