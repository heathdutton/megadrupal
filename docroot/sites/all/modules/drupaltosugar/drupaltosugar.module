<?php 

/**
 * @file
 * Module file for admin configuration, webform mapping.
 */

/**
 * Implements hook_init().
 *
 * Managing drupaltosugar from this module.
 */
function drupaltosugar_init() {
  global $base_url;
  drupal_add_js(drupal_get_path('module', 'drupaltosugar') . '/drupaltosugar.js');
  drupal_add_css(drupal_get_path('module', 'drupaltosugar') . '/drupaltosugar.css');
  drupal_add_js(array('url' => $base_url), 'setting');
  require_once drupal_get_path('module', 'webform') . '/includes/webform.submissions.inc';
  // Include inc file to get options list of webform field.
  require_once drupal_get_path('module', 'webform') . '/components/select.inc';
  // End Include.
  require_once drupal_get_path('module', 'drupaltosugar') . '/nusoap/lib/nusoap.php';
}

/**
 * Implements hook_cron().
 */
function drupaltosugar_cron() {
  $webform_data = drupaltosugar_webform_mapped_nid();
  foreach ($webform_data as $nid => $title) {
    $webform_name = 'webform_' . $nid;
    $webform_next_exe = 'webform_next_exe' . $nid;
    $interval = variable_get($webform_name, 60 * 60);
    if (time() >= variable_get($webform_next_exe, 0)) {
      drupaltosugar_set_entry(NULL, $nid);
      watchdog('drupaltosugar', 'Cron Ran for Webform ' . $nid);
      variable_set($webform_next_exe, time() + $interval);
    }
  }
}

/**
 * Implements hook_menu().
 */
function drupaltosugar_menu() {
  $items['admin/drupaltosugar'] = array(
    'title' => 'Drupal SugarCRM Integration',
    'page callback' => 'drupaltosugar_integration',
    'access callback' => TRUE,
    'file' => 'drupaltosugar.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/drupaltosugar/system_configuration'] = array(
    'title' => 'System Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupaltosugar_system_configuration'),
    'access callback' => TRUE,
    'file' => 'drupaltosugar.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/drupaltosugar/module_configuration'] = array(
    'title' => 'Module Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupaltosugar_module_configuration_form'),
    'access callback' => 'user_access',
    'access arguments' => array('access module mapping'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/drupaltosugar/module_configuration/%/%/edit'] = array(
    'title' => 'Module Configuration Edit',
    'page callback' => 'drupaltosugar_module_configuration_form_edit',
    'access callback' => 'user_access',
    'access arguments' => array('access module mapping'),
    'page arguments' => array(3, 4),
    'type' => MENU_CALLBACK,
    'weight' => 2,
  );
  $items['admin/drupaltosugar/cron_configuration'] = array(
    'title' => 'Cron Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupaltosugar_cron_configuration_form'),
    'access callback' => 'user_access',
    'access arguments' => array('access module mapping'),
    'file' => 'drupaltosugar.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  $items['admin/drupaltosugar/queue_manager'] = array(
    'title' => 'Queue Manager',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupaltosugar_queue_manager'),
    'access callback' => 'user_access',
    'access arguments' => array('access queue'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  $items['admin/drupaltosugar/queue_manager/pending_list'] = array(
    'title' => 'Pending List',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupaltosugar_pending_list_form'),
    'access callback' => 'user_access',
    'access arguments' => array('access queue'),
    'type' => MENU_CALLBACK,
    'weight' => 1,
  );
  $items['admin/drupaltosugar/queue_manager/error_list'] = array(
    'title' => 'Error List',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupaltosugar_error_list_form'),
    'access callback' => 'user_access',
    'access arguments' => array('access queue'),
    'type' => MENU_CALLBACK,
    'weight' => 2,
  );
  $items['admin/drupaltosugar/queue_manager/sent_list'] = array(
    'title' => 'Sent List',
    'page callback' => 'drupaltosugar_sent_list',
    'access callback' => 'user_access',
    'access arguments' => array('access queue'),
    'type' => MENU_CALLBACK,
    'weight' => 3,
  );
  $items['admin/drupaltosugar/dupaltosugar_cron'] = array(
    'title' => 'Drupaltosugar Cron',
    'description' => 'Run cron manually',
    'page callback' => 'drupaltosugar_cron',
    'access callback' => TRUE,
  );
  $items['admin/drupaltosugar/module_configuration/%/delete'] = array(
    'title' => 'Delete Webform',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupaltosugar_delete_webform'),
    'access callback' => 'user_access',
    'access arguments' => array('access module mapping'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/add_related_module'] = array(
    'page callback' => 'drupaltosugar_set_related_module_array',
    'access callback' => 'user_access',
    'access arguments' => array('access module mapping'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Landing page of druptaltosugar module.
 */
function drupaltosugar_integration() {
  return theme('drupaltosugar_template');
}

/**
 * Implements hook_theme().
 */
function drupaltosugar_theme($existing, $type, $theme, $path) {
  return array(
    'drupaltosugar_template' => array(
      'template' => 'drupaltosugar-template',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function drupaltosugar_permission() {
  return array(
    'administer configuration' => array(
      'title' => t('Administer System Configuration'),
      'description' => t('Set sugarCRM login credintial'),
    ),
    'access module mapping' => array(
      'title' => t('Access Module Mapping'),
      'description' => t('Map drupal webform fields to sugarCRM fields'),
    ),
    'access queue' => array(
      'title' => t('Access Queue Manager'),
      'description' => t('Access queue manager for webforms status'),
    ),
  );
}

/**
 * Function for drupaltosugar module configuration.
 */
function drupaltosugar_module_configuration_form($form, &$form_state) {
  $form['module_configuration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Module Configuration'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#prefix' => '<div class = "main_module_configuration">',
    '#suffix' => '</div>',
  );

  // Drupal form Start.
  $post_webform_nid = isset($_POST['webform']) ? $_POST['webform'] : '';
  $webform_nid = arg(3) ? arg(3) : $post_webform_nid;
  $webform_name = drupaltosugar_get_webformname_byId($webform_nid);

  $webform_options = drupaltosugar_webform_option_list('webform_options');

  $form['module_configuration']['drupal_form'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#prefix' => '<div class = "main_module_configuration_left">',
    '#suffix' => '</div>',
  );
  $form['module_configuration']['drupal_form']['webform'] = array(
    '#type' => 'select',
    '#title' => t('Webform List'),
    '#options' => $webform_options,
    '#default_value' => isset($webform_nid) ? $webform_nid : ' ',
    '#prefix' => '<div class = "main_module_configuration_left_webform">',
    '#suffix' => '</div>',
  );

  $webfom_all_fields = drupaltosugar_webform_option_list('webfom_fields');
  $webfom_visible_fields = drupaltosugar_drupal_webform_fields_type($webfom_all_fields, $webform_nid, 'visible');
  $webfom_hidden_fields = drupaltosugar_drupal_webform_fields_type($webfom_all_fields, $webform_nid, 'hidden');
  if ($webform_name) {
    $sugar_display_fields_count = 0;
    $sugar_display_fields_count  = count($webfom_all_fields[$webform_nid]);
  }
  $sugar_visible_fields_count = 0;
  $sugar_visible_fields_count  = count($webfom_visible_fields);
  $sugar_hidden_fields_count = 0;
  $sugar_hidden_fields_count  = count($webfom_hidden_fields);

  if ($sugar_visible_fields_count > 0) {
    $form['module_configuration']['drupal_form']['visible'] = array(
      '#type' => 'fieldset',
      '#title' => t('Visible Fields'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#prefix' => '<div class = "main_module_configuration_left_visible">',
      '#suffix' => '</div>',
    );
  }
  if ($sugar_hidden_fields_count > 0) {
    $form['module_configuration']['drupal_form']['hidden'] = array(
      '#type' => 'fieldset',
      '#title' => t('Hidden Fields'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#prefix' => '<div class = "main_module_configuration_left_hidden">',
      '#suffix' => '</div>',
    );
  }
  foreach ($webfom_visible_fields as $webfom_visible_fields_key => $webfom_visible_fields_val) {
    $filed_type_array = explode('-', $webfom_visible_fields_key);
    $form['module_configuration']['drupal_form']['visible'][$webfom_visible_fields_key] = array(
      '#type' => 'hidden',
      '#value' => $webfom_visible_fields_key,
      '#prefix' => '<div class = "webfom_fields">' . t('<span>!webform_visible_field_val</span> (!field_type_array)', array('!webform_visible_field_val' => $webfom_visible_fields_val, '!field_type_array' => $filed_type_array[5])),
      '#suffix' => '</div>',
    );
  }
  foreach ($webfom_hidden_fields as $webfom_hidden_fields_key => $webfom_hidden_fields_val) {
    $temp_hidden = array();
    $temp_hidden = explode('-', $webfom_hidden_fields_key);
    $title = $temp_hidden[2];
    $wnid = $temp_hidden[3];
    $cid = $temp_hidden[4];
    $default_hidden_value = drupaltosugar_get_hidden_default_value($wnid, $cid);

    $form['module_configuration']['drupal_form']['hidden'][$webfom_hidden_fields_key] = array(
      '#type' => 'textfield',
      '#title' => check_plain($webfom_hidden_fields_val),
      '#size' => 20,
      '#value' => check_plain($default_hidden_value),
      '#prefix' => '<div class = "webfom_fields">',
      '#suffix' => '</div>',
    );
  }
  // Drupal form ends.
  // Sugar form Start.
  $post_drupal_form = isset($_POST['webform']) ? $_POST['webform'] : '';
  $drupal_form_nid = arg(3) ? arg(3) : $post_drupal_form;
  $drupal_form_name = drupaltosugar_get_webformname_byId($drupal_form_nid);
  $post_sugarmodule = isset($_POST['sugarmodule']) ? $_POST['sugarmodule'] : '';
  $sugarmodule_name = arg(4) ? arg(4) : $post_sugarmodule;

  $form['module_configuration']['sugar_form'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#prefix' => '<div class = "main_module_configuration_right">',
    '#suffix' => '</div>',
  );
  $form['module_configuration']['sugar_form']['sugarmodule'] = array(
    '#type' => 'select',
    '#title' => t('SugarCRM Module List'),
    '#options' => drupaltosugar_get_module(),
    '#default_value' => isset($sugarmodule_name) ? $sugarmodule_name : ' ',
  );

  if ($drupal_form_name && $sugarmodule_name) {
    $form['module_configuration']['sugar_form']['visible'] = array(
      '#type' => 'fieldset',
      '#title' => t('Visible Fields'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#prefix' => '<div id = "show_reuired">',
      '#suffix' => '</div>',
    );
    $required = 0;
    $required = isset($form_state['values']['required']) ? $form_state['values']['required'] : 0;

    $form['module_configuration']['sugar_form']['required'] = array(
      '#type' => 'checkbox',
      '#default_value' => '0',
      '#title' => t('Show required fields only'),
      '#ajax' => array(
        'callback' => 'drupaltosugar_show_all_required_field_callback',
        'wrapper' => 'show_reuired',
      ),
    );

    for ($i = 0; $i < $sugar_display_fields_count; $i++) {
      $selected = '';
      $options_first = array();
      $selected = isset($form_state['values']['relmodule-' . $i]) ? $form_state['values']['relmodule-' . $i] : arg(4);
      $options_first = drupaltosugar_get_relatedmodule($selected);
      if ($sugar_visible_fields_count == $i) {
        $form['module_configuration']['sugar_form']['visible']['separator'] = array(
          '#markup' => '<div class = "separater">' . t('Hidden Field') . '</div>',
        );
      }
      $form['module_configuration']['sugar_form']['visible']['relmodule-' . $i] = array(
        '#type' => 'select',
        '#title' => t('Module'),
        '#options' => $options_first,
        '#default_value' => $selected,
        '#ajax' => array(
          'callback' => 'drupaltosugar_ajax_dependent_dropdown_callback',
          'wrapper' => "dropdown-second-replace-$i",
        ),
      );
      $form['module_configuration']['sugar_form']['visible']['sugarmodule-' . $i] = array(
        '#type' => 'select',
        '#title' => check_plain($options_first[$selected] . ' ' . t('Fields')),
        '#options' => drupaltosugar_get_module_fields_byname($selected, $required),
        '#prefix' => "<div id='dropdown-second-replace-$i'>",
        '#suffix' => '</div>',
      );
    }
    // Sugar form End.
  }
  // Module mapping for Edit Case Start.
  $actions = isset($form_state['values']['op']) ? $form_state['values']['op'] : arg(5);
  if ($sugarmodule_name && (($actions == 'edit') || ($actions == 'Update'))) {
    $form['module_configuration']['sugar_form']['visible'] = array(
      '#type' => 'fieldset',
      '#title' => t('Visible Fields'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#prefix' => '<div id = "show_reuired">',
      '#suffix' => '</div>',
    );
    $required = 0;
    $required = isset($form_state['values']['required']) ? $form_state['values']['required'] : 0;

    $form['module_configuration']['sugar_form']['required'] = array(
      '#type' => 'checkbox',
      '#default_value' => '0',
      '#title' => t('Show required fields only'),
      '#ajax' => array(
        'callback' => 'drupaltosugar_show_all_required_field_callback',
        'wrapper' => 'show_reuired',
      ),
    );

    $default = array();
    $default = drupaltosugar_default_value();
    for ($i = 0; $i < $sugar_display_fields_count; $i++) {
      $selected = '';
      $options_first = array();
      $selected = isset($form_state['values']['relmodule-' . $i]) ? $form_state['values']['relmodule-' . $i] : arg(4);
      $options_first = drupaltosugar_get_relatedmodule($selected);
      if ($sugar_visible_fields_count == $i) {
        $form['module_configuration']['sugar_form']['visible']['separator'] = array(
          '#markup' => '<div class = "separater">' . t('Hidden Field') . '</div>',
        );
      }

      $sugarmodule_edit_value = isset($default['module_name'][$i]) ? $default['module_name'][$i] : arg(4);
      $form['module_configuration']['sugar_form']['visible']['relmodule-' . $i] = array(
        '#type' => 'select',
        '#title' => t('Module'),
        '#options' => $options_first,
        '#default_value' => isset($default['module_name'][$i]) ? $default['module_name'][$i] : arg(4),
        '#ajax' => array(
          'callback' => 'drupaltosugar_ajax_dependent_dropdown_callback',
          'wrapper' => "dropdown-second-replace-$i",
        ),
      );
      $form['module_configuration']['sugar_form']['visible']['sugarmodule-' . $i] = array(
        '#type' => 'select',
        '#title' => check_plain($options_first[$selected] . ' ' . t('Fields')),
        '#default_value' => isset($default['field_name'][$i]) ? $default['field_name'][$i] : arg(4),
        '#options' => drupaltosugar_get_module_fields_byname($sugarmodule_edit_value, $required),
        '#prefix' => "<div id='dropdown-second-replace-$i'>",
        '#suffix' => '</div>',
      );
    }
  }
  // Module mapping for Edit Case End.
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#prefix' => '<div id="module_configuration_submit">',
    '#suffix' => '</div>',
  );

  // Webform to SugarCRM Module mappling list detail Start.
  $form['modules_mapping'] = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#prefix' => '<div class = "mappling_list">',
    '#suffix' => '</div>',
  );

  $header = array(
    array('data' => t('Webform')),
    array('data' => t('SugarCRM Module')),
    array('data' => t('Operations'), 'colspan' => 2),
  );

  $form['modules_mapping']['detail_lists'] = array(
    '#theme' => 'table',
    '#rows' => drupaltosugar_form_mapping_rows(),
    '#header' => $header,
  );
  return $form;
}

/**
 * Function to get webform name on behalf of webform id.
 *
 * @return string
 *   Returns webform title.
 */
function drupaltosugar_get_webformname_byId($nid) {
  $title = '';
  if ($nid) {
    $query = db_select('node', 'n');
    $query->fields('n', array('title'));
    $query->condition('n.nid', $nid);
    $result = $query->execute();
    $data = $result->fetchObject();
    $title = drupal_strtolower(str_replace(' ', '_', $data->title));
  }
  return $title;
}

/**
 * Function to get hiddend fields value.
 *
 * @param string $wnid
 *   Webform nid.
 * @param string $cid
 *   Webform component id.
 *
 * @return string
 *   Default value of hidden field.
 */
function drupaltosugar_get_hidden_default_value($wnid, $cid) {
  $query = db_select('webform_component', 'wc');
  $query->fields('wc', array('value'));
  $query->condition('wc.nid', $wnid);
  $query->condition('wc.cid', $cid);
  $result = $query->execute();
  $data = $result->fetchObject();
  $value = $data->value;
  return $value;
}

/**
 * Function to get default value of fields already mapped.
 *
 * @return string
 *   Returns the default value of webform field
 */
function drupaltosugar_default_value() {
  if (arg(3)) {
    $wnid = arg(3);
    $record_id = array();
    $querys = db_select('drupaltosugar', 'dd');
    $querys->fields('dd', array(
      'crm_field_name',
      'crm_related_module',
      'crm_default_value',
      'crm_field_type',
    ));
    $querys->condition('dd.wnid', $wnid);
    $results = $querys->execute();
    while ($record_id = $results->fetchObject()) {
      $default['field_name'][] = $record_id->crm_field_name . '-' . $record_id->crm_field_type;
      $default['module_name'][] = $record_id->crm_related_module;
      $default['default_value'][] = $record_id->crm_default_value;
    }
  }
  return $default;
}

/**
 * Function to render module configuration edit form.
 */
function drupaltosugar_module_configuration_form_edit($form_title, $su_module) {
  drupaltosugar_set_related_module_array();
  $form_render = array();
  $form_render = drupal_get_form('drupaltosugar_module_configuration_form');
  $form_render['actions']['submit']['#value'] = t('Update');
  return $form_render;
}

/**
 * Ajax function to change filed options when module/related module selected.
 */
function drupaltosugar_ajax_dependent_dropdown_callback($form, &$form_state) {
  $fieldname = $form_state['input']['_triggering_element_name'];
  $exp = explode('-', $fieldname);
  $i = $exp[1];
  $key = 'sugarmodule-' . $i;
  return $form['module_configuration']['sugar_form']['visible'][$key];
}

/**
 * Ajax function to show all required field in option list.
 */
function drupaltosugar_show_all_required_field_callback($form, &$form_state) {
  return $form['module_configuration']['sugar_form']['visible'];
}

/**
 * Function to validate drupaltosugar module configuration mapping.
 */
function drupaltosugar_module_configuration_form_validate($form, &$form_state) {
  // Get selected webform name.
  $webform_name = '';
  $web_form_id = '';
  $web_form_id = $form_state['values']['webform'];
  $webfrom_name = $form_state['complete form']['module_configuration']['drupal_form']['webform']['#options'][$web_form_id];
  // End.
  // Clean previous error message.
  $data = $form_state['values'];
  $wnid = $data['webform'];
  $data['webform'] = drupaltosugar_get_webformname_byId($wnid);
  if ($form_state['values']['webform'] == '') {
    form_set_error('webform', t('Please select a Webform.'));
    return FALSE;
  }
  if ($form_state['values']['sugarmodule'] == '') {
    form_set_error('sugarmodule', t('Please select a CRM module.'));
    return FALSE;
  }
  $temp = array();
  $drupal_form_fields = array();
  $dupaltosugar_form_fields = array();
  $sugar_form_fields = array();
  $dupaltosugar_form_fields_map = array();
  $sugar_form_field_name = array();
  $sugar_select_field_name = array();
  $sugar_select_field_name_array = array();
  $drupal_form_fields_select_type = array();
  $sugar_form_fields_select_type = array();

  foreach ($data as $key => $value) {
    $temp = explode('-', $key);
    if (count($temp) > 1) {
      if (isset($temp[0]) && $temp[0] == 'webform') {
        $drupal_form_fields[] = $temp[1] . '-' . $temp[2] . '-' . $temp[3] . '-' . $temp[4] . '-' . $temp[5];
      }
      if (isset($temp[5]) && $temp[5] == 'select') {
        $drupal_form_fields_select_type[$temp[4]] = $temp[2] . '-' . $temp[3] . '-' . $temp[4];
      }
      if (isset($temp[0]) && $temp[0] == 'sugarmodule') {
        $sugar_form_fields[] = $value;
        $sugar_form_field_name[] = $key;
        $sugar_select_field_name_array = explode('-', $value);
        if (trim($sugar_select_field_name_array[0]) != '') {
          $sugar_select_field_name[] = $sugar_select_field_name_array[0];
        }
        if (isset($sugar_select_field_name_array[1]) && $sugar_select_field_name_array[1] == 'enum') {
          $sugar_form_fields_select_type[$temp[1]] = $sugar_select_field_name_array[0];
        }
      }
    }
  }
  $webform_fields_count = count($drupal_form_fields);
  $sugar_required_field = drupaltosugar_get_requiredfieldcont($form, $form_state);
  // Count required field.
  $count_sugar_required = 0;
  foreach ($sugar_required_field as $key => $values) {
    foreach ($values as $values_new) {
      $count_sugar_required++;
    }
  }
  if ($webform_fields_count < $count_sugar_required) {
    form_set_error('error', t('Required fields in selected CRM  module (!count_sugar_required) is greater than Web form module "!webfrom_name" fields (!webform_fields_count). <br />Please <a href="admin/content">Click</a> here for create webform fields',
      array(
        '!count_sugar_required' => $count_sugar_required,
        '!webform_fields_count' => $webform_fields_count,
        '!webfrom_name' => $webfrom_name)
      )
    );
    return FALSE;
  }
  $count_error = 0;
  $message = '';
  foreach ($sugar_required_field as $key => $values) {
    foreach ($values as $key_new => $values_new) {
      if (!in_array($key_new, $sugar_select_field_name)) {
        form_set_error(' ', t('Sugar <strong>!key </strong> field <strong>!filed_name </strong> is required !.<br />', array('!key' => $key, '!filed_name' => $values_new)));
        $count_error++;
      }
    }
  }
  if ($count_error > 0) {
    return '';
  }
  foreach ($drupal_form_fields as $key => $values) {
    _drupaltosugar_validate_type($values, $sugar_form_fields[$key], $sugar_form_field_name[$key]);
  }

  // Validate select type field options.
  foreach ($drupal_form_fields as $key => $values) {
    $sugar_type_ar = array();
    $sugar_type_ar = explode('-', $sugar_form_fields[$key]);
    $module_name = $form_state['values']['relmodule-' . $key];
    if (array_key_exists('1', $sugar_type_ar)) {
      if ($sugar_type_ar[1] == 'enum' || $sugar_type_ar[1] == 'multienum') {
        _drupaltosugar_validate_select_option($values, $module_name, $sugar_form_fields[$key], $sugar_form_field_name[$key]);
      }
    }
  }
  // End validate select options.
}

/**
 * Function to count required fields of a given SugarCRM module/modules.
 */
function drupaltosugar_get_requiredfieldcont($form, $form_state) {
  $temp = array();
  $module_chossed = array();
  foreach ($form_state['values'] as $key => $value) {
    $temp = explode('-', $key);
    if (count($temp) > 1) {
      if (isset($temp[0]) && $temp[0] == 'relmodule') {
        $module_chossed[] = $value;
      }
    }
  }
  $module_chossed = array_unique($module_chossed);
  $chossed_module_fields = array();
  $module_option = array();

  foreach ($module_chossed as $key => $name) {
    $main_array = unserialize($_SESSION['drupaltosugarData']);
    if ($main_array['main_module']['module_name'] == $name) {
      $chossed_module_fields[] = $main_array['main_module'];
    }
    else {
      foreach ($main_array['related_modules'] as $related_module_list_key => $related_module_list_val) {
        if ($related_module_list_val['module_name'] == $name) {
          $chossed_module_fields[] = $related_module_list_val;
        }
      }
    }
  }
  $prohibited_fields = array();
  $prohibited_fields = _drupaltosugar_get_probhited_fields();
  $sugar_required_field = array();
  foreach ($chossed_module_fields as $key => $values) {
    foreach ($values['module_fields'] as $key_new => $values_new) {
      if ($key_new == 'email1') {
        $values_new['source'] = '';
      }
      $field_source = isset($values_new['source']) ? $values_new['source'] : '';
      $required = isset($values_new['required']) ? $values_new['required'] : 0;
      $label = isset($values_new['label']) ? $values_new['label'] : '';
      if (($required == 1) && (!in_array(str_replace(":", '', $label), $prohibited_fields) && ($values_new['type'] != 'relate') && ($field_source != 'non-db'))) {
        $sugar_required_field[$values['module_name']][$values_new['name']] = $values_new['label'];
      }
    }
  }
  return $sugar_required_field;
}

/**
 * Function to validate fields type.
 */
function _drupaltosugar_validate_type($drupal_field, $sugar_field, $sugar_field_name) {
  // Define list of field type.
  $list_of_webform_type = array(
    'date',
    'email',
    'number',
    'select',
    'textarea',
    'time',
    'textfield',
    'file',
    'hidden',
  );
  // End assigned.
  $drupal_type_arr = array();
  $sugar_type_arr = array();
  $drupal_type_arr = explode('-', $drupal_field);
  $sugar_type_arr = explode('-', $sugar_field);
  $drupal_field_type = '';
  $sugar_field_type = '';
  if (isset($drupal_type_arr[4])) {
    $drupal_field_type = $drupal_type_arr[4];
  }
  if (isset($sugar_type_arr[1])) {
    $sugar_field_type = $sugar_type_arr[1];
  }
  // Sugar map field list.
  if (in_array($drupal_field_type, $list_of_webform_type)) {
    $sugar_date_map = array('date', 'datetimecombo', 'datetime');
    $sugar_email_map = array('varchar', 'email');
    $sugar_number_map = array(
      'int',
      'varchar',
      'name',
      'checkbox',
      'currency',
      'float',
      'phone',
    );
    $sugar_select_map = array(
      'varchar',
      'name',
      'radioenum',
      'enum',
      'multienum',
    );
    $sugar_textarea_map = array(
      'varchar',
      'address',
      'html',
      'iframe',
      'textarea',
      'text',
    );
    $sugar_time_map = array('varchar');
    $sugar_textfield_map = array(
      'varchar',
      'name',
      'fullname',
      'currency_id',
      'decimal',
      'phone',
      'float',
      'url',
      'relate',
      'textfield',
      'id',
      'text',
    );
    $sugar_file_map = array('file');
    if ($drupal_field_type != 'hidden') {
      $field_type_name = 'sugar_' . $drupal_field_type . '_map';
      if ((!in_array($sugar_field_type, $$field_type_name)) && ($sugar_field_type != '')) {
        form_set_error($sugar_field_name, t("Drupal !title type (!drupal_type) not matched with SugarCRM field type (!sugar_type)!",
          array(
            '!title' => ucwords(str_replace('_', ' ', $drupal_type_arr[1])),
            '!drupal_type' => $drupal_field_type,
            '!sugar_type' => $sugar_field_type)
          )
        );
      }
    }
  }
}

/**
 * Function to validate select option field.
 */
function _drupaltosugar_validate_select_option($drupal_field, $module_name, $sugar_field, $sugar_field_name) {
  $drupal_type_arr = array();
  $drupal_options = array();
  $drupal_field_name = '';
  $sugar_field_name = '';
  $sugar_field_arr = array();
  $drupal_field_arr = explode('-', $drupal_field);
  $sugar_field_array = explode('-', $sugar_field);
  $drupal_field_name = $drupal_field_arr[1];
  $webform_id = $drupal_field_arr[2];
  $sugar_field_name = $sugar_field_array[0];
  $drupal_field_type = $drupal_field_arr[4];
  if ($drupal_field_type == 'select') {
    $sugar_options = array();
    $drupal_options = array();
    $sugar_options = drupaltosugar_get_module_field_options($sugar_field_name, $module_name);
    $drupal_options = _drupaltosugar_fetch_default_fields($drupal_field_name, $webform_id);
    if (count($drupal_options) > count($sugar_options)) {
      form_set_error($sugar_field_name, t("Drupal !drupal_field_name options (!drupal_options) more than SugarCRM field (!sugar_options)!",
        array(
          '!drupal_field_name' => ucwords(str_replace('_', ' ', $drupal_field_name)),
          '!drupal_options' => count($drupal_options),
          '!sugar_options' => count($sugar_options))
        )
      );
    }
    else {
      $count_error = 0;
      $drupal_options_name = array();
      if (count($sugar_options) > 0) {
        foreach ($drupal_options as $key => $values) {
          if (!in_array($key, $sugar_options)) {
            $drupal_options_name[] = $key;
            $count_error++;
          }
        }
      }
      if ($count_error > 0) {
        $sugar_options_list  = implode(', ', $sugar_options);
        $drupal_not_mached_options = implode(', ', $drupal_options_name);
        form_set_error($sugar_field_name, t("Options (<strong>!drupal_options</strong>) of drupal field name '<strong>!drupal_field_name</strong>' is not matched with <br/ > available options (!sugar_options) of SugarCRM field name '<strong>!sugar_field_name</strong>'.",
          array(
            '!drupal_options' => $drupal_not_mached_options,
            '!sugar_options' => $sugar_options_list,
            '!drupal_field_name' => ucwords(str_replace('field_', '', $drupal_field_name)),
            '!sugar_field_name' => ucwords(str_replace('_', ' ', $sugar_field_name)),
          ))
        );
      }
    }
  }
}

/**
 * Function to save drupaltosugar module configuration form mapping.
 */
function drupaltosugar_module_configuration_form_submit($form, &$form_state) {
  global $user;
  $data = $form_state['values'];
  $wnid = $data['webform'];
  $data['webform'] = drupaltosugar_get_webformname_byId($wnid);
  $temp = array();
  $temp_one = array();
  $dupal_form_fields = array();
  $sugar_form_fields = array();
  $sugar_field_type = array();
  $dupaltosugar_form_fields = array();
  $related_module = array();
  $dupal_hidden_fields = array();
  $fields_count = '';
  foreach ($data as $key => $value) {
    $temp = explode('-', $key);
    if (count($temp) > 1) {
      if ($temp[0] == 'webform') {
        $field_name = $temp[2] . '-' . $temp[3] . '-' . $temp[4];
        $dupal_form_fields[] = $field_name;
        if ($temp[5] == 'hidden') {
          $dupal_hidden_fields[$field_name] = $value;
        }
      }
      if ($temp[0] == 'sugarmodule') {
        $temp_one = explode('-', $value);
        if (count($temp_one) > 1) {
          $sugar_form_fields[] = $temp_one[0];
          $sugar_field_type[] = $temp_one[1];
        }
        else {
          $sugar_form_fields[] = '';
          $sugar_field_type[] = '';
        }
      }
      if ($temp[0] == 'relmodule') {
        $related_module[] = $value;
      }
      if ($temp[0] == 'sugarfield') {
        $sugarfield_default_value[$temp[1]] = $value;
      }
    }
  }
  $fields_count = count($dupal_form_fields);
  for ($i = 0; $i < $fields_count; $i++) {
    $dupaltosugar_form_fields[] = array(
      'webform_field_name' => $dupal_form_fields[$i],
      'crm_field_name' => !empty($sugar_form_fields[$i]) ? $sugar_form_fields[$i] : 0,
      'rel_module' => $related_module[$i],
      'crm_default_value' => !empty($sugarfield_default_value[$i]) ? $sugarfield_default_value[$i] : 0,
      'crm_field_type' => !empty($sugar_field_type[$i]) ? $sugar_field_type[$i] : 0,
    );
  }
  $temp_two = array();
  foreach ($dupaltosugar_form_fields as $key1 => $val1) {
    $temp_two = explode('-', $val1['webform_field_name']);
    $query = db_select('drupaltosugar', 'd');
    $query->fields('d', array('id'));
    $query->condition('d.wnid', $temp_two[1]);
    $query->condition('d.wcid', $temp_two[2]);
    $result = $query->execute();
    $record_id = $result->fetchObject();
    if (isset($record_id->id)) {
      $update_query = db_update('drupaltosugar');
      $update_query->fields(array(
        'wnid' => $temp_two[1],
        'uid' => $user->uid,
        'wcid' => $temp_two[2],
        'w_field_name' => $temp_two[0],
        'crm_field_name' => $val1['crm_field_name'],
        'crm_module' => arg(4),
        'crm_related_module' => $val1['rel_module'],
        'crm_default_value' => $val1['crm_default_value'],
        'crm_field_type' => $val1['crm_field_type'],
      ));
      $update_query->condition('id', $record_id->id);
      $update_query->execute();
    }
    else {
      db_insert('drupaltosugar')
      ->fields(array(
        'wnid' => $temp_two[1],
        'uid' => $user->uid,
        'wcid' => $temp_two[2],
        'w_field_name' => $temp_two[0],
        'crm_field_name' => $val1['crm_field_name'],
        'crm_module' => arg(4),
        'crm_related_module' => $val1['rel_module'],
        'crm_default_value' => $val1['crm_default_value'],
        'crm_field_type' => $val1['crm_field_type'],
      ))
      ->execute();
    }
  }
  if (count($dupal_hidden_fields) > 1) {
    foreach ($dupal_hidden_fields as $dupal_hidden_field_key => $dupal_hidden_field_val) {
      $temp_hidden_key = array();
      $temp_hidden_key = explode('-', $dupal_hidden_field_key);
      if ($dupal_hidden_field_val) {
        $wnid = $temp_hidden_key[1];
        $cid = $temp_hidden_key[2];
        // Update webform_component.
        $update_query = db_update('webform_component');
        $update_query->fields(array('value' => $dupal_hidden_field_val));
        $update_query->condition('nid', $wnid);
        $update_query->condition('cid', $cid);
        $update_query->execute();
        // Update webform_submitted_data.
        $update_query = db_update('webform_submitted_data');
        $update_query->fields(array('data' => $dupal_hidden_field_val));
        $update_query->condition('nid', $wnid);
        $update_query->condition('cid', $cid);
        $update_query->execute();
      }
    }
  }
  drupal_set_message(t('Module fields have been successfully mapped.'));
  drupal_goto('admin/drupaltosugar/module_configuration');
}

/**
 * Function to list drupaltosugar mapping rows.
 */
function drupaltosugar_form_mapping_rows() {
  $query_list = db_select('drupaltosugar', 'dts');
  $query_list->fields('dts', array('wnid', 'crm_module'));
  $query_list->fields('n', array('nid', 'title'));
  $query_list->leftJoin('node', 'n', 'dts.wnid = n.nid');
  $query_list->groupBy('dts.wnid');
  $result = $query_list->execute();

  $rows = array();
  foreach ($result as $log) {
    $web_form_nid = $log->nid;
    $sugar_module = $log->crm_module;
    $destination = 'admin/drupaltosugar/module_configuration';
    $operations = l(t('Edit'), 'admin/drupaltosugar/module_configuration/' . $web_form_nid . '/' . $sugar_module . '/edit');
    $operations .= ' | ' . l(t('Delete'), 'admin/drupaltosugar/module_configuration/' . $log->wnid . '/delete', array('query' => array('destination' => $destination)));
    $rows[] = array(
      ucfirst($log->title),
      ucfirst($log->crm_module),
      $operations,
    );
  }
  return $rows;
}

/**
 * Function to return visible/hidden webform fileds.
 */
function drupaltosugar_drupal_webform_fields_type($webfom_all_fields, $webform_nid, $field_type) {
  $webfom_visible_fields = array();
  $webfom_hidden_fields = array();
  if ($webform_nid) {
    $temp = array();
    foreach ($webfom_all_fields[$webform_nid] as $webfom_field_key => $webfom_field_val) {
      $temp = explode('-', $webfom_field_key);
      if ($temp[1] == 'hidden') {
        $webfom_hidden_fields[$webfom_field_key] = $webfom_field_val;
      }
      else {
        $webfom_visible_fields[$webfom_field_key] = $webfom_field_val;
      }
    }
  }
  if ($field_type == 'hidden') {
    return $webfom_hidden_fields;
  }
  if ($field_type == 'visible') {
    return $webfom_visible_fields;
  }
}

/**
 * Function to return webform fields/options.
 *
 * @param string $arg
 *   String to get return value.
 *
 * @return array
 *   Array of options/field name.
 */
function drupaltosugar_webform_option_list($arg) {
  // For Fetching webform.
  $nodes = drupaltosugar_webform_nodes();
  $webform_options = array('' => '--- Select ---');
  $webfom_fields = array();
  $weform_name = '';
  $name_of_fields = '';
  $number_of_filed = '';
  $webfom_all_fields = array();
  foreach ($nodes as $key => $val) {
    $weform_name = drupal_strtolower(str_replace(' ', '_', $val->title));
    $weform_nid = $val->nid;
    $webform_options[$weform_nid] = $val->title;
    $webfom_fields_list[$weform_nid] = $val->webform['components'];
    foreach ($webfom_fields_list[$weform_nid] as $webfom_fields_val) {
      $webfom_fields[$weform_nid][] = $webfom_fields_val;
    }
  }
  foreach ($webfom_fields as $key1 => $webfom_field) {
    $number_of_filed = count($webfom_field);
    for ($i = 0; $i < $number_of_filed; $i++) {
      $name_of_fields = @$webfom_field[$i]['form_key'];
      $nodeid_of_fields = @$webfom_field[$i]['nid'];
      $componentsid_of_fields = @$webfom_field[$i]['cid'];
      $field_type = @$webfom_field[$i]['type'];
      if ($field_type == 'hidden') {
        $type = 'hidden';
      }
      else {
        $type = 'visible';
      }
      $webfom_fields_keys = 'webform-' . $type . '-' . $name_of_fields . '-' . $nodeid_of_fields . '-' . $componentsid_of_fields . '-' . $field_type;

      $webfom_all_fields[$key1][$webfom_fields_keys] = str_replace('_', ' ', drupal_ucfirst($name_of_fields));
    }
  }
  if ($arg == 'webform_options') {
    return $webform_options;
  }
  if ($arg == 'webfom_fields') {
    return $webfom_all_fields;
  }
}

/**
 * Function for queue manager list form.
 */
function drupaltosugar_queue_manager() {
  // Table settings.
  $attributes['datatable_options'] = array(
    'bFilter' => TRUE,
    'bInfo' => TRUE,
  );
  // Define table columns.
  $header = array(
    array('data' => t('Webform'), 'sort' => 'desc'),
    array('data' => t('Pending')),
    array('data' => t('Error')),
    array('data' => t('Sent')),
  );
  $webform_nodes = array();
  $webform_nodes = drupaltosugar_webform_nodes();
  $rows = array();
  $webform_options = array();
  foreach ($webform_nodes as $key => $val) {
    if (array_key_exists($key, drupaltosugar_webform_mapped_nid())) {
      $weform_name = str_replace(' ', '_', $val->title);
      $webform_options[$val->nid] = $val->title;
    }
  }
  foreach ($webform_options as $key => $val) {
    $webform_status = drupaltosugar_get_webform_queue_list($key);
    $pending = $error = $sent = 0;
    $destination_array = drupal_get_destination();
    $destination = $destination_array['destination'];
    if ($webform_status['pending']) {
      $pending = l(check_plain($webform_status['pending']), 'admin/drupaltosugar/queue_manager/pending_list/' . $key, array('query' => array('destination' => $destination)));
    }
    if ($webform_status['error']) {
      $error = l(check_plain($webform_status['error']), 'admin/drupaltosugar/queue_manager/error_list/' . $key, array('query' => array('destination' => $destination)));
    }
    if ($webform_status['sent']) {
      $sent = l(check_plain($webform_status['sent']), 'admin/drupaltosugar/queue_manager/sent_list/' . $key, array('query' => array('destination' => $destination)));
    }
    $rows[] = array(
      $val,
      $pending,
      $error,
      $sent,
    );
  }
  $variables = array(
    'attributes' => $attributes,
    'header' => $header,
    'rows' => $rows,
    'empty' => t("Table has no row!"),
  );
  $output = theme('table', $variables) . theme('pager');
  $form['queue_manage'] = array('#markup' => $output);
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Run Job Manually'),
    '#submit' => array('drupaltosugar_run_cron_submit'),
  );
  return $form;
}

/**
 * Function for running cron manually.
 */
function drupaltosugar_run_cron_submit($form, &$form_state) {
  if (drupal_cron_run()) {
    drupal_set_message(t('Cron run successfully.'));
  }
  else {
    drupal_set_message(t('Cron run failed.'), 'error');
  }
}

/**
 * Function for creating an array of pending, error and sent count of webform.
 *
 * @param string $wnid
 *   Webform nid.
 *
 * @return array
 *   Pending,error and sent array of that webform.
 */
function drupaltosugar_get_webform_queue_list($wnid) {
  $pending = $error = $sent = 0;
  $query = db_select('drupaltosugar_data', 'd');
  $query->fields('d', array('status', 'attempt'));
  $query->condition('d.wnid', $wnid);
  $result = $query->execute();
  while ($row = $result->fetchObject()) {
    if ($row->status == 0 && $row->attempt < 3) {
      $pending++;
    }
    elseif ($row->status == 1 && $row->attempt <= 3) {
      $sent++;
    }
    else {
      $error++;
    }
  }
  $record_status = array(
    'pending' => $pending,
    'error' => $error,
    'sent' => $sent,
  );
  return $record_status;
}

/**
 * Function for listing of all webform submissions having pending status i.e 0.
 */
function drupaltosugar_pending_list_form($form, &$form_state) {
  $wnid = arg(4);
  $header = array();
  if ($wnid) {
    $header = drupaltosugar_get_header($wnid);
    $node_title = node_load($wnid);
    drupal_set_title(t('@node_title Pending List', array('@node_title' => $node_title->title)));
  }
  if (empty($header)) {
    drupal_set_message(t('Webform not mapped with any sugarCRM module'), 'error');
  }
  else {
    // Fetch record of wsID.
    $query = db_select('drupaltosugar_data', 'dd');
    $query->fields('dd', array('wsid'));
    $query->condition('dd.wnid', $wnid);
    $query->condition('dd.status', 0);
    $query->condition('dd.attempt', 3, '<');
    $result = $query->execute();

    $submission_ids = array();
    while ($web_form = $result->fetchObject()) {
      $submission_ids[] = $web_form->wsid;
    }
    $rows = array();
    foreach ($submission_ids as $key) {
      $submission = webform_get_submission($wnid, $key);
      $wfnid = 'wfnid_' . $key;
      foreach ($submission->data as $key1 => $val) {
        $field_name = drupaltosugar_get_component_name($wnid, $key1);
        if (count($val['value']) > 1) {
          $field_value = implode(', ', $val['value']);
        }
        else {
          $field_value = $val['value'][0];
        }
        $rows[$wfnid][$field_name] = $field_value;
      }
    }
    $form['module_configuration']['webform_type'] = array(
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => $rows,
      '#empty' => t('No fields found.'),
    );
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Send'),
      '#prefix' => '<div id="module_configuration_submit">',
      '#suffix' => '</div>',
    );
  }
  return $form;
}

/**
 * Function defination of Pding list form submit.
 */
function drupaltosugar_pending_list_form_submit($form, &$form_state) {
  $sess_id = array();
  $data = $form_state['values']['webform_type'];
  foreach ($data as $key => $val) {
    if ($val) {
      $sid = explode('_', $val);
      $sess_id[] = $sid[1];
    }
  }
  if (!empty($sess_id)) {
    drupaltosugar_set_entry($sess_id);
  }
}

/**
 * Function for listing of all webform submissions having error status.
 */
function drupaltosugar_error_list_form($form, &$form_state) {
  $wnid = arg(4);
  $header = array();
  if ($wnid) {
    $header = drupaltosugar_get_header($wnid);
    $node_title = node_load($wnid);
    drupal_set_title(t('@node_title Error List', array('@node_title' => $node_title->title)));
  }
  if (empty($header)) {
    drupal_set_message(t('Webform not mapped with any sugarCRM module'), 'error');
  }
  else {
    $header['error_cause'] = t('Error');
    // Fetch record of wsID.
    $query = db_select('drupaltosugar_data', 'dd');
    $query->fields('dd', array('wsid'));
    $query->condition('dd.wnid', $wnid);
    $query->condition('dd.status', 0);
    $query->condition('dd.attempt', 3);
    $result = $query->execute();
    $submission_ids = array();
    while ($web_form = $result->fetchObject()) {
      $submission_ids[] = $web_form->wsid;
    }
    $rows = array();
    foreach ($submission_ids as $key) {
      $submission = webform_get_submission($wnid, $key);
      $wfnid = 'wfnid_' . $key;
      $error_description = drupaltosugar_get_error_list($key);
      foreach ($submission->data as $key1 => $val) {
        $field_name = drupaltosugar_get_component_name($wnid, $key1);
        if (count($val['value']) > 1) {
          $field_value = implode(', ', $val['value']);
        }
        else {
          $field_value = $val['value'][0];
        }
        $rows[$wfnid][$field_name] = $field_value;
        $rows[$wfnid]['error_cause'] = $error_description;
      }
    }
    $form['module_configuration']['webform_type'] = array(
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => $rows,
      '#empty' => t('No fields found.'),
    );
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Send'),
      '#prefix' => '<div id="module_configuration_submit">',
    );
    $form['actions']['clear'] = array(
      '#type' => 'submit',
      '#value' => t('Clear'),
      '#suffix' => '</div>',
    );
  }
  return $form;
}

/**
 * Function for getting error coloum against as submission id.
 *
 * @param string $wsid
 *   Webform submission id.
 *
 * @return string
 *   NULL if error not exist and $error as string if error exist.
 */
function drupaltosugar_get_error_list($wsid) {
  $query = db_select('drupaltosugar_data', 'dd');
  $query->fields('dd', array('error'));
  $query->condition('dd.wsid', $wsid);
  $result = $query->execute();
  $error = $result->fetchObject();
  if (!empty($error)) {
    return $error->error;
  }
  else {
    return NULL;
  }
}

/**
 * Implelents hook_submit().
 */
function drupaltosugar_error_list_form_submit($form, &$form_state) {
  $sess_id = array();
  $action_case = $form_state['values']['op'];
  $data = $form_state['values']['webform_type'];
  foreach ($data as $key => $val) {
    if ($val) {
      $sid = explode('_', $val);
      $sess_id[] = $sid[1];
    }
  }
  if (!empty($sess_id)) {
    switch ($action_case) {
      case 'Send':
        drupaltosugar_set_entry($sess_id);
        break;

      case 'Clear':
        $num_updated = db_update('drupaltosugar_data')
        ->fields(array('attempt' => 0, 'error' => NULL))
        ->condition('wsid', $sess_id, 'IN')
        ->execute();
        break;
    }
  }
}

/**
 * Function for listing header of a particular webform.
 *
 * @param string $wnid
 *   Webform nid.
 *
 * @return array
 *   Fields for table header in various status lists like pending etc.
 */
function drupaltosugar_get_header($wnid) {
  $query = db_select('drupaltosugar', 'd');
  $query->fields('d', array('w_field_name'));
  $query->condition('d.wnid', $wnid);
  $result = $query->execute();
  $header = array();
  $header_list = array();
  while ($header = $result->fetchObject()) {
    $header_list[$header->w_field_name] = ucfirst($header->w_field_name);
  }
  return $header_list;
}

/**
 * Function for getting webform component name.
 *
 * @param sting $wnid
 *   Webform nid.
 * @param string $cid
 *   Webform component id.
 *
 * @return string
 *   String as field name.
 */
function drupaltosugar_get_component_name($wnid, $cid) {
  $node_data = node_load($wnid);
  foreach ($node_data->webform['components'] as $key => $comp) {
    if ($key == $cid) {
      $field_name = $comp['form_key'];
    }
  }
  return $field_name;
}

/**
 * Function for listing webforms in sent status i.e 1 of a particular type.
 */
function drupaltosugar_sent_list() {
  $wnid = arg(4);
  $header = array();
  $output = '<div id="sent-list-form">';
  if ($wnid) {
    $header = drupaltosugar_get_header($wnid);
    $node_title = node_load($wnid);
    drupal_set_title(t('@node_title Sent List', array('@node_title' => $node_title->title)));
  }
  if (empty($header)) {
    drupal_set_message(t('Webform not mapped with any sugarCRM module'), 'error');
  }
  else {
    $query = db_select('drupaltosugar_data', 'dd');
    $query->fields('dd', array('wsid'));
    $query->condition('dd.wnid', $wnid);
    $query->condition('dd.status', 1);
    $result = $query->execute();
    $submission_ids = array();
    while ($web_form = $result->fetchObject()) {
      $submission_ids[] = $web_form->wsid;
    }
    $rows = array();
    foreach ($submission_ids as $key) {
      $submission = webform_get_submission($wnid, $key);
      $wfnid = 'wfnid_' . $key;
      if (!empty($submission)) {
        foreach ($submission->data as $key1 => $val) {
          $field_name = drupaltosugar_get_component_name($wnid, $key1);
          if (count($val['value']) > 1) {
            $field_value = implode(', ', $val['value']);
          }
          else {
            $field_value = $val['value'][0];
          }
          $rows[$wfnid][$field_name] = $field_value;
        }
      }
    }
    // Table settings.
    $attributes['datatable_options'] = array(
      'bFilter' => TRUE,
      'bInfo' => TRUE,
    );
    // Or, render using a theme function.
    $variables = array(
      'attributes' => $attributes,
      'header' => $header,
      'rows' => $rows,
      'empty' => t("Table has no row!"),
    );
    $output .= theme('table', $variables);
  }
  $output .= '<div class ="next-prev">';
  $output .= l(t('Back to Queue Manager'), 'admin/drupaltosugar/queue_manager');
  $output .= '</div>';
  $output .= '</div>';
  return $output;
}

/**
 * Function for generating array of webform nodes.
 */
function drupaltosugar_webform_nodes() {
  $query = db_select('webform', 'w');
  $query->join('node', 'n', 'w.nid = n.nid');
  $query->fields('n');
  $nids = $query->execute()->fetchAllAssoc('nid');
  $nodes = node_load_multiple(array_keys($nids));
  return $nodes;
}

/**
 * Function for listing sugarCRM available modules listing.
 *
 * @return array
 *   Array of available modules in sugarCRM.
 */
function drupaltosugar_get_module() {
  $module_option = array('' => '---Select---');
  $client = drupaltosugar_get_soap_object();
  $session_array = drupaltosugar_get_connection();
  if (array_key_exists('id', $session_array)) {
    $session_id = array('session' => $session_array['id']);
    $module_lists = $client->call('getEnabledModulesList', $session_id);
    foreach ($module_lists['modules'] as $key => $name) {
      $module_option[$name] = $name;
    }
  }
  else {
    drupal_set_message($session_array['error'], 'error');
  }
  return $module_option;
}

/**
 * Function for getting fields options value of a particular module of sugarCRM.
 */
function drupaltosugar_get_module_field_options($field_name, $module_name) {
  $data = array();
  $module_fields = $main_array = array();
  $main_array = unserialize($_SESSION['drupaltosugarData']);
  if ($main_array['main_module']['module_name'] == $module_name) {
    $module_fields = $main_array['main_module'];
  }
  else {
    foreach ($main_array['related_modules'] as $related_module_list_key => $related_module_list_val) {
      if ($related_module_list_val['module_name'] == $module_name) {
        $module_fields = $related_module_list_val;
      }
    }
  }
  if (array_key_exists('module_fields', $module_fields)) {
    $field_options_data = array();
    foreach ($module_fields['module_fields'] as $field_data) {
      if ($field_data['name'] == $field_name && ($field_data['type'] == 'enum' || $field_data['type'] == 'multienum')) {
        $field_options_data = $field_data['options'];
      }
    }
    foreach ($field_options_data as $field_options) {
      if ($field_options['value'] != '') {
        $data[$field_options['value']] = $field_options['name'];
      }
    }
  }
  return $data;
}

/**
 * Function for getting fields of a particular module of sugarCRM.
 */
function drupaltosugar_get_module_fields_byname($module_name, $required_fields) {
  if ($module_name) {
    $required = '';
    $field_list_required = array('' => '---Select---');
    $field_list = array('' => '---Select---');
    $main_array = array();
    $main_array = unserialize($_SESSION['drupaltosugarData']);
    if ($main_array['main_module']['module_name'] == $module_name) {
      $module_fields = $main_array['main_module'];
    }
    else {
      foreach ($main_array['related_modules'] as $related_module_list_key => $related_module_list_val) {
        if ($related_module_list_val['module_name'] == $module_name) {
          $module_fields = $related_module_list_val;
        }
      }
    }
    $related_module_list = array();

    // Prohibited field list.
    $prohibited_fields = array(
      'id' => 'ID',
      'date_entered' => 'Date Created',
      'date_modified' => 'Date Modified',
      'modified_user_id' => 'Modified By',
      'modified_by_name' => 'Modified By',
      'created_by' => 'Created By',
      'created_by_name' => 'Created By',
      'deleted' => 'Deleted',
    );
    if (array_key_exists('module_fields', $module_fields)) {
      foreach ($module_fields['module_fields'] as $field_key => $fields) {
        $required = isset($fields['required']) ? $fields['required'] : '';
        $field_key = $fields['name'];
        $label = isset($fields['label']) ? $fields['label'] : '';
        if ($label) {
          $type = $fields['type'];
          if ($required) {
            $indicate = '*';
          }
          else {
            $indicate = '';
          }
          $caption = $fields['label'] . ' (' . $type . ')' . $indicate;
          $field_list_key = $field_key . '-' . $type;
          if (array_key_exists($field_key, $prohibited_fields)) {

          }
          else {
            if ($field_key == 'email1') {
              $fields['source'] = '';
            }
            $fields_source = isset($fields['source']) ? $fields['source'] : '';
            if ($fields_source != 'non-db') {
              $field_list[$field_list_key] = str_replace(':', ' ', $caption);
              if ($required) {
                $field_list_required[$field_list_key] = str_replace(':', ' ', $caption);
              }
            }
          }
        }
      }
    }
    if ($required_fields) {
      return $field_list_required;
    }
    else {
      return $field_list;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function drupaltosugar_form_alter(&$form, &$form_state, $form_id) {
  $form_name = 'webform_client_form_' . arg(1);
  if ($form_id == $form_name) {
    $drupaltosugar_webform_nid = arg(1);
    $drupaltosugar_mapped_webforms = drupaltosugar_webform_mapped_nid();
    if (array_key_exists($drupaltosugar_webform_nid, $drupaltosugar_mapped_webforms)) {
      $form['#submit'][] = 'drupaltosugar_webform_client_form_crm_submit';
    }
  }
}

/**
 * Submit function for saving webform nid in {drupaltosugar_data table}.
 */
function drupaltosugar_webform_client_form_crm_submit(&$form, &$form_state) {
  $wnid = $form_state['values']['details']['nid'];
  $wsid = $form_state['values']['details']['sid'];
  $crm_rid = '1';
  $status = '0';
  $error = 'NULL';
  $attempt = '0';
  $created = $form_state['build_info']['args']['0']->created;
  $updated = $form_state['build_info']['args']['0']->changed;

  // Insert data in drupaltosugar_data.
  db_insert('drupaltosugar_data')
  ->fields(array(
    'wnid' => $wnid,
    'wsid' => $wsid,
    'crm_rid' => $crm_rid,
    'status' => $status,
    'error' => $error,
    'attempt' => $attempt,
    'created' => $created,
    'updated' => $updated,
  ))
  ->execute();
  drupal_set_message(t('Your data has been saved in CRM table.'));
}

/**
 * Function for listing all webform submissions which is in pending status.
 *
 * @return array
 *   Array of webform submissions ids.
 */
function drupaltosugar_get_webform_submission_ids($wnid) {
  $query = db_select('drupaltosugar_data', 'dd');
  $query->fields('dd', array('wsid'));
  $query->condition('dd.status', 0);
  $query->condition('dd.wnid', $wnid);
  $result = $query->execute();
  $wsid = array();
  while ($row = $result->fetchObject()) {
    $wsid[] = $row->wsid;
  }
  return $wsid;
}

/**
 * Function to list all fields of an webform and mapped sugarCRM fields.
 */
function drupaltosugar_fieldlisting() {
  $rows = array();
  $wnid = arg(2);
  $header = array(
    array('data' => t('Webform Field Name')),
    array('data' => t('Sugar Field Name')),
    array('data' => t('Operations'), 'colspan' => 2),
  );
  // Fetch record of wsID.
  $query = db_select('drupaltosugar', 'dts');
  $query->fields(
    'dts',
    array('wnid', 'w_field_name', 'crm_field_name', 'crm_module')
  );
  $query->fields('n', array('title'));
  $query->leftJoin('node', 'n', 'dts.wnid = n.nid');
  $query->condition('dts.wnid', $wnid);
  $query->groupBy('dts.w_field_name');
  $result = $query->execute();
  foreach ($result as $log) {
    $name = drupal_strtolower(str_replace(' ', '_', $log->title));
    $operations = l(t('Edit'), "admin/drupaltosugar/module_configuration/$name/$log->crm_module/edit");
    $rows[] = array(
      ucfirst($log->w_field_name),
      ucfirst($log->crm_field_name),
      $operations,
    );
  }
  $build['field_list_table'] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#header' => $header,
  );
  return $build;
}

/**
 * Funciton for list webform and sugarCRM module name.
 */
function drupaltosugar_formlisting() {
  $header = array(
    array('data' => t('Webform')),
    array('data' => t('Sugar Module')),
    array('data' => t('Operations'), 'colspan' => 2),
  );
  $query = db_select('drupaltosugar', 'dts');
  $query->fields(
    'dts',
    array('wnid', 'w_field_name', 'crm_field_name', 'crm_module')
  );
  $query->fields('n', array('title'));
  $query->leftJoin('node', 'n', 'dts.wnid = n.nid');
  $query->groupBy('dts.wnid');
  $result = $query->execute();

  $rows = array();
  foreach ($result as $log) {
    $name = drupal_strtolower(str_replace(' ', '_', $log->title));
    $operations = l(t('Edit'), "admin/drupaltosugar/module_configuration/$name/$log->crm_module/edit");
    $rows[] = array(
      ucfirst($log->title),
      ucfirst($log->crm_module),
      $operations,
    );
  }
  $build['form_list_table'] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#header' => $header,
  );
  return $build;
}

/**
 * Function for connecting with sugarCRM site.
 *
 * @return array
 *   Session id generated with sugarCRM.
 */
function drupaltosugar_get_connection() {
  $result_array = array();
  $session_id = array();
  $client = drupaltosugar_get_soap_object();
  // SugarCRM login details.
  $user_auth = array(
    'user_auth' => array(
      'user_name' => variable_get('drupaltosugar_sugarcrm_username', NULL),
      'password' => md5(variable_get('drupaltosugar_sugarcrm_pass', NULL)),
    ),
  );

  // Making connecttion.
  $result_array = $client->call('login', $user_auth);
  // Checking for ID when successfully login checked.
  if (is_array($result_array) && array_key_exists('id', $result_array)) {
    $session_id['id'] = $result_array['id'];
  }
  else {
    $session_id['error'] = t('Connection not established with sugarCRM, Please check sugarCRM URL or login credentials');
  }
  return $session_id;
}

/**
 * Function for deleting webform entry with sugarCRM module in mapping table.
 */
function drupaltosugar_delete_webform() {
  $wnid = arg(3);
  $node = node_load($wnid);
  $mesg = t('<div>Are you sure to delete mapping configuration of the @node_title ?</div><div>This action cannot be undone.</div>', array('@node_title' => $node->title));
  $form['fieldset'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['fieldset']['msg'] = array(
    '#markup' => $mesg,
  );
  $form['wnid'] = array(
    '#type' => 'hidden',
    '#value' => $wnid,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Ok'),
  );
  $form['back'] = array(
    '#type' => 'submit',
    '#value' => t('Back'),
  );
  return $form;
}

/**
 * Function for webform entry deleting from sugarCRM module in table.
 */
function drupaltosugar_delete_webform_submit(&$form, &$form_state) {
  $action_case = $form_state['values']['op'];
  $wnid = $form_state['values']['wnid'];
  if ($action_case == 'Ok') {
    db_delete('drupaltosugar')->condition('wnid', $wnid)->execute();
    db_delete('drupaltosugar_data')->condition('wnid', $wnid)->execute();
    drupal_set_message(t('Mapping deleted successfully'));
  }
}

/**
 * Functin to get related module list.
 */
function drupaltosugar_get_relatedmodule($sugarmodule_name) {
  $result = array();
  $main_module = '';
  $related_module_lists = array();
  $related_module_lists = unserialize($_SESSION['drupaltosugarData']);
  $main_module = $related_module_lists['main_module']['module_name'];
  $related_module_list = array();
  foreach ($related_module_lists['related_modules'] as $related_module_list_key => $related_module_list_val) {
    $related_module_list[$related_module_list_val['module_name']] = $related_module_list_val['module_name'];
  }
  $related_module_list[$main_module] = $main_module;
  $result = array_unique($related_module_list);
  asort($result);
  return $result;
}

/**
 * Custom function for mapped nid.
 */
function drupaltosugar_webform_mapped_nid() {
  $querys = db_select('drupaltosugar', 'd');
  $querys->fields('d', array('wnid'));
  $querys->fields('n', array('title'));
  $querys->join('node', 'n', 'n.nid = d.wnid');
  $querys->groupBy('d.wnid');
  $results = $querys->execute();
  $nid = array();
  while ($record = $results->fetchObject()) {
    $nid[$record->wnid] = $record->title;
  }
  return $nid;
}

/**
 * Function for generating a record to push in sugarCRM.
 *
 * @param array $wsid_array
 *   Array of webform submission ids.
 */
function drupaltosugar_set_entry($wsid_array = NULL, $wnid = 0) {
  $session = drupaltosugar_get_connection();
  if (array_key_exists('id', $session)) {
    $related_module_fields = $main_module_fields = array();
    $related_module_name = $main_module_name = '';
    $soap_client_object = drupaltosugar_get_soap_object();
    // Checking if request for data sent is received from cron or from
    // pending/error list form.
    if (empty($wsid_array)) {
      $wsids = drupaltosugar_get_webform_submission_ids($wnid);
    }
    else {
      $wsids = $wsid_array;
    }
    if (!empty($wsids)) {
      foreach ($wsids as $submission_id) {
        $query = db_select('drupaltosugar_data', 'dd');
        $query->fields('dd', array('id', 'wnid', 'attempt'));
        $query->innerJoin('drupaltosugar', 'd', 'd.wnid = dd.wnid');
        $query->fields('d', array('wcid'));
        $query->condition('dd.wsid', $submission_id);
        $result = $query->execute();
        $id = 0;
        $attempt = '';
        while ($row = $result->fetchObject()) {
          $row_row[] = $row;
          $id = $row->id;
          $attempt = $row->attempt;
          $wfnid = $row->wnid;
          $crmquery = db_select('drupaltosugar', 'd');
          $crmquery->fields('d', array(
            'crm_field_name',
            'crm_module',
            'crm_related_module',
            'crm_default_value',
            'crm_field_type',
            'wcid',
            'wnid',
          ));
          $crmquery->innerJoin('webform_submitted_data', 'wsd', 'd.wcid = wsd.cid');
          $crmquery->fields('wsd', array('data'));
          $crmquery->condition('d.wnid', $row->wnid);
          $crmquery->condition('d.wcid', $row->wcid);
          $crmquery->condition('wsd.sid', $submission_id);
          $crmquery->condition('d.crm_field_name', 0, '<>');
          $crmresult = $crmquery->execute();
          while ($row1 = $crmresult->fetchObject()) {
            $is_component_multiselect = FALSE;
            if ($row1->crm_field_type == 'multienum') {
              $cid_query = db_select('webform_submitted_data', 'wsd');
              $cid_query->fields('wsd', array('data'));
              $cid_query->condition('wsd.cid', $row1->wcid);
              $cid_query->condition('wsd.nid', $row1->wnid);
              $cid_query->condition('wsd.sid', $submission_id);
              $cid_result = $cid_query->execute();
              $multi_select_data = array();
              while ($data = $cid_result->fetchObject()) {
                $multi_select_data[] = '^' . $data->data . '^';
              }
              $is_component_multiselect = TRUE;
            }
            $crm_field_name[$row->wcid] = $row1;
            if ($row1->crm_module == $row1->crm_related_module) {
              $main_module_name = $row1->crm_module;
              if ($row1->crm_default_value && $row1->crm_default_value != '0') {
                $main_module_fields[$row1->crm_field_name] = $row1->crm_default_value;
              }
              else {
                if ($is_component_multiselect) {
                  $main_module_fields[$row1->crm_field_name] = implode(',', $multi_select_data);
                }
                else {
                  $main_module_fields[$row1->crm_field_name] = $row1->data;
                }
              }
            }
            else {
              $related_module_name = $row1->crm_related_module;
              if ($row1->crm_default_value && $row1->crm_default_value != '0') {
                $related_module_fields[$related_module_name][$row1->crm_field_name] = $row1->crm_default_value;
              }
              else {
                if ($is_component_multiselect) {
                  $related_module_fields[$related_module_name][$row1->crm_field_name] = implode(',', $multi_select_data);
                }
                else {
                  $related_module_fields[$related_module_name][$row1->crm_field_name] = $row1->data;
                }
              }
            }
          }
        }
        $main_module_array = array(
          'module' => array(
            'name' => $main_module_name,
            'fields' => $main_module_fields,
          ),
        );
        $related_array = array();
        foreach ($related_module_fields as $key => $val) {
          $related_module_name = $key;
          $field_list = array();
          foreach ($val as $key1 => $val1) {
            $field_list[$key1] = $val1;
          }
          $related_array[] = array('name' => $related_module_name, 'fields' => $field_list);
        }
        $related_module_array = array('related_module' => $related_array);
        $data_array = array_merge($main_module_array, $related_module_array);
        $record_id = drupaltosugar_save_entry($data_array, $main_module_name, $session['id'], $soap_client_object);
        if (array_key_exists('id', $record_id) && $record_id['id']) {
          $update_query = db_update('drupaltosugar_data');
          $update_query->fields(array('status' => 1, 'crm_rid' => $record_id['id']));
          $update_query->condition('id', $id);
          $update_query->execute();
        }
        else {
          $atempt = ++$attempt;
          $update_query = db_update('drupaltosugar_data');
          $update_query->fields(array('attempt' => $atempt, 'error' => $record_id['error']));
          $update_query->condition('id', $id);
          $update_query->execute();
        }
        $related_module_fields = $related_array = $main_module_name = array();
      }
    }
  }
  else {
    drupal_set_message(t('Connection not established with SugarCRM, Please contact Site Administrator'), 'error');
  }
}

/**
 * Function to push data to sugarCRM Module.
 *
 * @param array $sugar_data
 *   Data array to send to sugarCRM to save. 
 * @param string $main_module_name
 *   SugarCRM main module in which data is to be saved first.
 * @param string $session_id
 *   Session id with sugarCRM connection.
 * @param object $soap_client_object
 *   Soap client object pass to function.
 *
 * @return array
 *   If record saved return record id else return error.
 */
function drupaltosugar_save_entry($sugar_data, $main_module_name, $session_id, $soap_client_object) {
  if ($session_id) {
    $client = $soap_client_object;
    $data_detail = array('session' => $session_id, 'fields' => $sugar_data);
    $record_ids = $client->call('setSugarDruRelatedModulesEntry', $data_detail);
    if (array_key_exists('createdRecordId', $record_ids)) {
      $rid = $record_ids['createdRecordId'][$main_module_name]['Id'];
      $return_data = array('id' => $rid);
    }
    else {
      if (array_key_exists('error', $record_ids)) {
        $error = $record_ids['error']['name'];
      }
      else {
        $error = $record_ids['faultstring'];
      }
      $return_data = array('error' => $error);
    }
  }
  else {
    $return_data = array('error' => t('Connection with SugarCRM not established'));
  }
  return $return_data;
}

/**
 * Function for generation nusoap_client object.
 *
 * @return object
 *   Return nusoap_client object.
 */
function drupaltosugar_get_soap_object() {
  $url = variable_get('drupaltosugar_sugarcrm_url', NULL);
  $client = new nusoap_client($url . '/customsoap.php?wsdl');
  return $client;
}

/**
 * Function list of probhited field.
 */
function _drupaltosugar_get_probhited_fields() {
  $prohibited_fields = array(
    'id' => 'ID',
    'date_entered' => 'Date Created',
    'date_modified' => 'Date Modified',
    'modified_user_id' => 'Modified By',
    'modified_by_name' => 'Modified By',
    'created_by' => 'Created By',
    'created_by_name' => 'Created By',
    'deleted' => 'Deleted',
  );
  return $prohibited_fields;
}

/**
 * Fetch webform field options.
 * 
 * @param string $field_name
 *   Field name of webform.
 */
function _drupaltosugar_fetch_default_fields($field_name, $webform_id) {
  $options = array();
  $result = db_select('webform_component', 'wc')
  ->fields('wc', array('extra'))
  ->condition('wc.form_key', $field_name, '=')
  ->condition('wc.nid', $webform_id)
  ->execute();
  while ($record = $result->fetchObject()) {
    $data = unserialize($record->extra);
    if (array_key_exists('items', $data)) {
      $options = _webform_select_options_from_text($data['items'], $flat = FALSE, $filter = TRUE);
    }
  }
  return $options;
}

/**
 * Function for setting session variable for main and related module data.
 */
function drupaltosugar_set_related_module_array() {
  $_SESSION['drupaltosugarData'] = array();
  $url = variable_get('drupaltosugar_sugarcrm_url', NULL);
  $client = new nusoap_client($url . '/customsoap.php?wsdl');
  $session_array = drupaltosugar_get_connection();
  if (isset($_POST['module'])) {
    $sugar_module_name = $_POST['module'];
  }
  else {
    $sugar_module_name = arg(4);
  }

  if (array_key_exists('id', $session_array)) {
    $main_module_data = array('session' => $session_array['id'], 'module_name' => $sugar_module_name);
    $main_module_fields['main_module']   = $client->call('get_module_fields_custom', $main_module_data);
    $related_module_array = $client->call('getRelatedModulesList', $main_module_data);
  }
  $json_related_module_lists = $related_module_array['relatedModuleList']['related_modules'];
  foreach ($json_related_module_lists as $key) {
    $related_module_lists[] = drupaltosugar_object_to_array(json_decode($key));
  }
  $related_modules['related_modules'] = $related_module_lists;
  $final_module_data = array_merge($main_module_fields, $related_modules);
  $final_serialized_data = serialize($final_module_data);
  $_SESSION['drupaltosugarData'] = $final_serialized_data;
}

/**
 * Function to convert object to array.
 *
 * @param object $data
 *   Returns $data as array format.
 */
function drupaltosugar_object_to_array($data) {
  if (is_array($data) || is_object($data)) {
    $result = array();
    foreach ($data as $key => $value) {
      $result[$key] = drupaltosugar_object_to_array($value);
    }
    return $result;
  }
  return $data;
}
