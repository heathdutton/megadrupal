<?php

/**
 * @file
 * Tests for module masquerade_as_role.
 */

/**
 * Tests for module masquerade_as_role.
 */
class MasqueradeAsRoleTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Masquerade as Role',
      'description' => 'Tests that module Masquerade as Role works as expected.',
      'group' => 'Masquerade as Role',
    );
  }

  private $user;
  private $admin;

  function setUp() {
    parent::setUp('masquerade_as_role');
    $this->user  = $this->drupalCreateUser(array('administer blocks', 'administer permissions', 'administer masquerade', 'masquerade as role', 'masquerade as user'));
    $this->admin = $this->drupalCreateUser(array('administer blocks', 'administer permissions', 'administer masquerade', 'masquerade as role', 'masquerade as admin'));
    $this->drupalLogin($this->user);
    $block = block_load('masquerade', 'masquerade');
    $this->moveBlockToRegion($block, 'content');
  }


  /**
   * UI test.
   *
   * The Masquerade block displays our custom select box.
   */
  function testUI() {
    $this->drupalGet('');
    $this->assertResponse(200);
    $this->assertField('masquerade_user_field');
    $this->assertField('masquerade_role_field[]');
    $this->assertText('Alternatively, select one or several role(s) to masquerade as.');
  }

  /**
   * Perms test.
   *
   * Admin roles do not show up if perm 'masquerade as admin' not granted.
   */
  function testPerms() {
    // Create an admin role.
    $rid = $this->drupalCreateRole(array());
    $this->setMasqueradeAdminRoles(array($rid));

    // Without perm 'masquerade as admin', admin roles do not show up.
    $this->drupalLogin($this->user);
    $this->drupalGet('');
    $this->assertResponse(200);
    $this->assertNoOption('masquerade_role_field[]', $rid);

    // With perm 'masquerade as admin', admin roles show up.
    $this->drupalLogin($this->admin);
    $this->drupalGet('');
    $this->assertResponse(200);
    $this->assertOption('masquerade_role_field[]', $rid);
  }

  /**
   * Feature test.
   *
   * Users can maquerade as a set of roles and switch back.
   */
  function testFeature() {
    // Create roles we will masquerade as + assert user does not have roles before masquerading.
    $rid1 = $this->drupalCreateRole(array('administer permissions'));
    $rid2 = $this->drupalCreateRole(array());
    $this->assertNoRole($rid1);
    $this->assertNoRole($rid2);

    // Masquerade as roles + assert user has roles while masquerading.
    $this->masqueradeAsRoles(array($rid1, $rid2));
    $this->assertRole($rid1);
    $this->assertRole($rid2);

    // Switch back + assert user does not have roles after masquerading.
    $this->switchBack();
    $this->assertNoRole($rid1);
    $this->assertNoRole($rid2);
  }
 
  /**
   * Clean up test (when switching back).
   *
   * A temporary user is created when masquerading as role, and deleted when switching back.
   */
  function testCleanUpRegular() {
    // Create a role + get initial number of users.
    $rid = $this->drupalCreateRole(array());
    $userCount = $this->getUserCount();

    // Masquerade as role + assert number of users has been incremented.
    $this->masqueradeAsRoles(array($rid));
    $this->assertText(t('Created temporary user'));
    $this->assertEqual($this->getUserCount(), $userCount + 1);

    // Switch back + assert number of users is the same as initially.
    $this->switchBack();
    $this->assertText(t('Deleted temporary user'));
    $this->assertEqual($this->getUserCount(), $userCount);
  }

  /**
   * Clean up test (when no switching back).
   *
   * Cron takes care of deleting temporary accounts when the user did not switch back.
   */
  function testCleanUpCron() {
    /*
    // Create a role + get initial number of users.
    $rid = $this->drupalCreateRole(array());
    $userCount = $this->getUserCount();

    // Masquerade as role + assert number of users has been incremented.
    $this->masqueradeAsRoles(array($rid));
    $this->assertText(t('Created temporary user'));
    $this->assertEqual($this->getUserCount(), $userCount + 1);

    // Log out + assert number of users has not been decremented.
    $this->drupalLogout();
    $this->assertEqual($this->getUserCount(), $userCount + 1);
 
    // Run cron + assert number of users is the same as initially.
    // TODO for some reason, {sessions} is always empty and thus does not allow
    // to test our cron task.
    $this->cronRun();
    $this->assertEqual($this->getUserCount(), $userCount);
    */
  }

  /**
   * Isolation test.
   *
   * When a regular user logs out, it is not deleted.
   */
  function testIsolation() {
    $userCount = $this->getUserCount();
    $this->drupalLogout();
    $this->assertEqual($userCount, $this->getUserCount());
  }


  /**
   * Helper - Move a block to a region.
   *
   * @param $block Block object.
   * @param $region Target region.
   */
  function moveBlockToRegion($block, $region = 'content') {
    $this->drupalGet('admin/structure/block');
    $this->assertResponse(200);
    $edit = array(
      'blocks[' . $block->module . '_' . $block->delta . '][region]' => $region
    );
    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));
    $this->assertResponse(200);
  }

  /**
   * Helper - Get number of users.
   *
   * @return Number of users in DB.
   */
  function getUserCount() {
    return db_select('users', 'u')->countQuery()->execute()->fetchField();
  }

  /**
   * Helper - Sets masquerade admin roles.
   *
   * @param $rids Array of role IDs.
   */
  function setMasqueradeAdminRoles($rids = array()) {
    $this->drupalGet('admin/config/people/masquerade');
    $this->assertResponse(200);
    $edit = array();
    foreach ($rids as $rid) {
      $edit["masquerade_admin_roles[$rid]"] = $rid;
    }
    $this->drupalPost(NULL, $edit, t('Save configuration'));
    $this->assertResponse(200);

  }

  /**
   * Helper - Masquerade as a set of roles.
   *
   * @param $roles Array of rids.
   * @param $path Path to find the Masquerade block. Defaults to ''.
   */
  function masqueradeAsRoles($rids, $path = '') {
    $this->drupalGet($path);
    $this->assertResponse(200);
    $this->assertField('masquerade_role_field[]');
    $edit = array(
      'masquerade_role_field[]' => $rids,
    );
    $this->drupalPost(NULL, $edit, t('Go'));
    $this->assertResponse(200);
    $this->assertText('You are now masquerading as');
  }

  /**
   * Helper - Switch back from masquerade.
   *
   * @param $path Path to find the Masquerade block. Defaults to ''.
   */
  function switchBack($path = '') {
    $this->drupalGet($path);
    $this->assertResponse(200);
    $this->assertLink(t('Switch back'));
    $this->clickLink(t('Switch back'));
    $this->assertResponse(200);
    $this->assertText('You are no longer masquerading as');
  }


  /**
   * Helper - Assert that a select option exists.
   *
   * @param $name Name of select field to assert.
   * @param $option Option to assert.
   * @param $message Message to display.
   */
  function assertOption($name, $option, $message = '') {
    $elements = $this->xpath('//select[@name=:name]//option[@value=:option]', array(':name' => $name, ':option' => $option));
    return $this->assertFalse(empty($elements[0]), $message ? $message : t('Option @option for field @name exists.', array('@option' => $option, '@name' => $name)), t('Browser'));
  }

  /**
   * Helper - Assert that a select option does not exist.
   *
   * @param $name Name of select field to assert.
   * @param $option Option to assert.
   * @param $message Message to display.
   */
  function assertNoOption($name, $option, $message = '') {
    $elements = $this->xpath('//select[@name=:name]//option[@value=:option]', array(':name' => $name, ':option' => $option));
    return $this->assertTrue(empty($elements[0]), $message ? $message : t('Option @option for field @name does not exist.', array('@option' => $option, '@name' => $name)), t('Browser'));
  }

  /**
   * Helper - Assert that the current user has a role.
   * Note: the user needs perm 'administer permissions'.
   *
   * @param $rid The role ID to assert.
   */
  function assertRole($rid) {
    $this->drupalGet('user');
    $this->assertResponse(200);
    $this->clickLink(t('Edit'));
    $this->assertResponse(200);
    $this->assertField("edit-roles-$rid");
    $this->assertFieldChecked("edit-roles-$rid");
  }

  /**
   * Helper - Assert that the current user does not have a role.
   * Note: the user needs perm 'administer permissions'.
   *
   * @param $rid The role ID to assert.
   */
  function assertNoRole($rid) {
    $this->drupalGet('user');
    $this->assertResponse(200);
    $this->clickLink(t('Edit'));
    $this->assertResponse(200);
    $this->assertField("edit-roles-$rid");
    $this->assertNoFieldChecked("edit-roles-$rid");
  }

}
