<?php
/**
 * @file
 * The main module file.
 */

/**
 * Implements hook_permission().
 */
function email_validator_permission() {
  return array(
    'administer email validator' => array(
      'title' => t('Administer email validator'),
      'description' => t('Allow users to change the settings of the email validator module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function email_validator_menu() {
  $items['admin/config/people/emailvalidator'] = array(
    'title' => 'Email Validator',
    'description' => 'Configure email validator service',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_validator_admin_settings_form'),
    'access arguments' => array('administer email validator'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Builds the administration settings form.
 */
function email_validator_admin_settings_form($form, $form_state) {
  $form['email_validator_apikey'] = array(
    '#type' => 'textfield',
    '#title' => t('Api Key'),
    '#required' => TRUE,
    '#default_value' => variable_get('email_validator_apikey'),
  );

  $form['email_validator_halt'] = array(
    '#type' => 'select',
    '#title' => t('If service unavailable'),
    '#options' => array(
      0 => t('Don\'t halt. Allow form submission.'),
      1 => t('Halt. Prohibit form submission.'),
      2 => t('Validate using Drupal\'s built-in email validation (recommended)'),
    ),
    '#description' => t('In most cases, it would be wiser - if the service is unavailable - to allow Drupal handle the validation.'),
    '#default_value' => variable_get('email_validator_halt', 2),
  );

  $form['email_validator_user_registration_form'] = array(
    '#type' => 'checkbox',
    '#title' => t('Validate email in user registration form.'),
    '#default_value' => variable_get('email_validator_user_registration_form', 1),
  );

  if (module_exists('contact')) {
    $form['email_validator_user_contact_form'] = array(
      '#type' => 'checkbox',
      '#title' => t('Validate email in user contact form.'),
      '#default_value' => variable_get('email_validator_user_contact_form', 1),
    );

    $form['email_validator_site_contact_form'] = array(
      '#type' => 'checkbox',
      '#title' => t('Validate email in site contact form.'),
      '#default_value' => variable_get('email_validator_site_contact_form', 1),
    );
  }

  return system_settings_form($form);
}

/**
 * Drupal User/Contact module integration.
 * --------------------------------
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function email_validator_form_contact_personal_form_alter(&$form, $form_state) {
  if (variable_get('email_validator_user_contact_form', 1)) {
    $form['#validate'][] = 'email_validator_user_register_form_validate';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function email_validator_form_contact_site_form_alter(&$form, $form_state) {
  if (variable_get('email_validator_site_contact_form', 1)) {
    $form['#validate'][] = 'email_validator_user_register_form_validate';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function email_validator_form_user_register_form_alter(&$form, $form_state) {
  if (variable_get('email_validator_user_registration_form', 1)) {
    $form['#validate'][] = 'email_validator_user_register_form_validate';
  }
}

/**
 * Validation callback for the user registration form.
 */
function email_validator_user_register_form_validate($form, $form_state) {
  if (!email_validator_validate_email($form_state['values']['mail'])) {
    form_set_error('mail', t('The email address you used is not valid. Please choose another email address.'));
  }
}

/**
 * Email field module integration.
 * -------------------------------
 */
/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function email_validator_field_widget_email_textfield_form_alter(&$element, &$form_state, $context) {
  $instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);
  if ($instance['settings']['email_validator_skip'] == 0) {
    $element['email']['#element_validate'][] = '_email_validator_field_widget_validate';
  }
}

/**
 * Implements hook_field_info_alter().
 */
function email_validator_field_info_alter(&$info) {
  foreach ($info as $field_type => $field_type_info) {
    if ($field_type == 'email') {
      $info[$field_type]['instance_settings'] += array(
        'email_validator_skip' => 0,
      );
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function email_validator_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  $widget_type = $form_state['build_info']['args'][0]['widget']['type'];
  if ($widget_type == 'email_textfield') {
    $form['instance']['settings']['email_validator_skip'] = array(
      '#type' => 'checkbox',
      '#title' => t('Skip email validation'),
      '#description' => t('Skip email validation using the Email Validator service.'),
      '#default_value' => $form['#instance']['settings']['email_validator_skip'],
    );
  }
}

/**
 * Validation callback for email field widget.
 */
function _email_validator_field_widget_validate($element, &$form_state, $form) {
  $errors = form_get_errors();
  if ($errors) {
    // Form alreay has errors. Not wasting requests.
    return;
  }
  form_set_error('submit', 'test');
  if (!empty($element['#value'])) {
    if (!email_validator_validate_email($element['#value'])) {
      form_set_error($element['#field_name'], t('The email address you used is not valid. Please choose another email address.'));
    }
  }
}

/**
 * Webform module integration.
 * ---------------------------
 */
/**
 * Implements hook_form_alter().
 * Only used for webform integration.
 */
function email_validator_form_alter(&$form, $form_state, $form_id) {
  if (strpos($form_id, 'webform_client_form_') === 0) {
    _email_validator_webform_client_form_alter($form);
  }
}

/**
 * Parses all the elements of a webform to identity all webform_email fields
 * and add extra validation if required.
 * @see email_validator_form_alter()
 */
function _email_validator_webform_client_form_alter(&$elements) {
  $children = element_children($elements);
  foreach ($children as $child) {
    $subchildren = element_children($elements[$child]);
    if ($subchildren) {
      _email_validator_webform_client_form_alter($elements[$child]);
    }
    elseif ($elements[$child]['#type'] == 'webform_email' && $elements[$child]['#webform_component']['extra']['email_validator_skip'] == 0) {
      $elements[$child]['#element_validate'][] = '_email_validator_webform_email_validate';
    }
  }
}

/**
 * Validation callback for email field widget.
 */
function _email_validator_webform_email_validate($element, &$form_state, $form) {
  $errors = form_get_errors();
  if ($errors) {
    // Form alreay has errors. Not wasting requests.
    return;
  }

  if (!empty($element['#value'])) {
    if (!email_validator_validate_email($element['#value'])) {
      form_set_error($element['#name'], t('The email address you used is not valid. Please choose another email address.'));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function email_validator_form_webform_component_edit_form_alter(&$form, $form_state) {
  $form['validation']['email_validator_skip'] = array(
    '#type' => 'checkbox',
    '#title' => t('Skip email validation'),
    '#description' => t('Skip email validation using the Email Validator service.'),
    '#default_value' => isset($form_state['build_info']['args'][1]['extra']['email_validator_skip']) ? $form_state['build_info']['args'][1]['extra']['email_validator_skip'] : 0,
  );

  // Make sure our callback is executed first.
  array_unshift($form['#submit'], '_email_validator_form_webform_component_edit_submit');
}

/**
 * Validation callback.
 * @see email_validator_form_webform_component_edit_form_alter()
 */
function _email_validator_form_webform_component_edit_submit($form, &$form_state) {
  // Copy our settings to the extra array.
  // Function webform_component_edit_form_submit() will do the rest.
  $form_state['values']['extra']['email_validator_skip'] = $form_state['values']['validation']['email_validator_skip'];
}

/**
 * General functions below.
 * ------------------------
 */

/**
 * Main callback to validate one email address.
 */
function email_validator_validate_email($email, $tries = NULL) {
  $tries = !is_null($tries) ? $tries : 5;

  if ($tries > 0) {
    $url = url('http://www.email-validator.net/api/verify', array('query' => array('EmailAddress' => $email, 'APIKey' => variable_get('email_validator_apikey'))));
    $request = drupal_http_request($url);
    if ($request->code == 200) {
      $data = drupal_json_decode($request->data);
      if (in_array($data['status'], array(200, 207, 215))) {
        return TRUE;
      }
      elseif (in_array($data['status'], array(114, 118))) {
        // Retry for ($tries-1) more times.
        $tries--;
        return email_validator_validate_email($email, $tries);
      }
      else {
        return FALSE;
      }
    }
    watchdog('email_validator', 'Email %email couldn\'t get validated because of the following status message: %status', array('%email' => $email, '%status' => $data['info']), WATCHDOG_ERROR);
  }

  if (variable_get('email_validator_halt', 2) == 0) {
    // If service is unavailable.
    return TRUE;
  }

  if (variable_get('email_validator_halt', 2) == 2) {
    return valid_email_address($email);
  }

  return FALSE;
}
