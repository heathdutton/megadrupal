<?php

/**
 * @file Main module file for Popup field group module.
 *
 * @TODO: Test in various browsers.
 */


  /**
   * Implements hook_field_group_formatter_info().
   */
function popup_field_group_field_group_formatter_info() {

  return array(
    'form' => array(
      'popup' => array(
        'label' => t('Popup'),
        'description' => t('This fieldgroup renders the inner content in a simple (position-fixed) popup.'),
        'instance_settings' => array(
          'element' => 'div',
          'classes' => '',
          'required_fields' => 0,
          'popup_title' => '',
          'popup_close_text' => t('Save & close'),
          'description' => '',
          'link_title' => '',
          'link_classes' => 'button',
          'close_button_title' => '',
          'close_button_classes' => 'button',
          'extra_css' => array(),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_field_group_format_settings().
 *
 * If the group has no format settings, default ones will be added.
 *
 * @param Object $group The group object.
 * @return Array $form The form element for the format settings.
 */
function popup_field_group_field_group_format_settings($group) {
  $form = array();

  switch ($group->format_type) {
    case 'popup':
      $form['instance_settings']['popup_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Popup title'),
        '#default_value' => isset($group->format_settings['instance_settings']['popup_title']) ? $group->format_settings['instance_settings']['popup_title'] : (!empty($formatter['instance_settings']['popup_title']) ? $formatter['instance_settings']['popup_title'] : $group->label),
        '#weight' => 0,
      );
      $form['instance_settings']['popup_close_text'] = array(
        '#type' => 'textfield',
        '#title' => t('Popup close text'),
        '#default_value' => isset($group->format_settings['instance_settings']['popup_close_text']) ? $group->format_settings['instance_settings']['popup_close_text'] : (!empty($formatter['instance_settings']['popup_close_text']) ? $formatter['instance_settings']['popup_close_text'] : t('(close)')),
        '#weight' => 0,
      );
      $form['instance_settings']['link_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Link title'),
        '#default_value' => isset($group->format_settings['instance_settings']['link_title']) ? $group->format_settings['instance_settings']['link_title'] : (!empty($formatter['instance_settings']['link_title']) ? $formatter['instance_settings']['link_title'] : $group->label),
        '#weight' => 1,
      );
      $form['instance_settings']['link_classes'] = array(
        '#type' => 'textfield',
        '#title' => t('Link class'),
        '#default_value' => isset($group->format_settings['instance_settings']['link_classes']) ? $group->format_settings['instance_settings']['link_classes'] : (!empty($formatter['instance_settings']['link_classes']) ? $formatter['instance_settings']['link_classes'] : ''),
        '#description' => t('Multiple classes may be space-separated.'),
        '#element_validate' => array('field_group_validate_css_class'),
        '#weight' => 1,
      );
      $form['instance_settings']['close_button_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Close button title'),
        '#description' => t('This Save & close button is placed at the bottom, inside the popup which just closes the popup.'),
        '#default_value' => isset($group->format_settings['instance_settings']['close_button_title']) ? $group->format_settings['instance_settings']['close_button_title'] : (!empty($formatter['instance_settings']['close_button_title']) ? $formatter['instance_settings']['close_button_title'] : t('Save & close')),
        '#weight' => 2,
      );
      $form['instance_settings']['close_button_classes'] = array(
        '#type' => 'textfield',
        '#title' => t('Close button class'),
        '#default_value' => isset($group->format_settings['instance_settings']['close_button_classes']) ? $group->format_settings['instance_settings']['close_button_classes'] : (!empty($formatter['instance_settings']['close_button_classes']) ? $formatter['instance_settings']['close_button_classes'] : 'button'),
        '#description' => t('Multiple classes may be space-separated.'),
        '#element_validate' => array('field_group_validate_css_class'),
        '#weight' => 2,
      );
      $system_stream_wrappers = module_exists('system_stream_wrapper');
      $form['instance_settings']['extra_css'] = array(
        '#type' => 'textarea',
        '#title' => t('Include custom CSS files'),
        '#default_value' => isset($group->format_settings['instance_settings']['extra_css']) ? $group->format_settings['instance_settings']['extra_css'] : (!empty($formatter['instance_settings']['extra_css']) ? $formatter['instance_settings']['extra_css'] : array()),
        '#description' => t('Each line is a path to a CSS file in any module, theme, profile or library (see <a href="http://drupal.org/project/system_stream_wrapper">System stream wrapper</a>) or indeed any <strong>local</strong> path provided by any stream wrapper.'),
        '#element_validate' => array('popup_field_group_element_validate_css_files'),
        '#weight' => 10,
        '#disabled' => !$system_stream_wrappers,
      );
      if (!$system_stream_wrappers) {
        $form['instance_settings']['install_system_stream_wrappers'] = array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array(
              'messages',
              'warning'
            ),
          ),
          '#weight' => 10,
          'msg' => array(
            '#markup' => t('Install the <a href="http://drupal.org/project/system_stream_wrapper">System stream wrapper</a> module to include custom CSS files.'),
          ),
        );
      }
      break;
  }

  return $form;
}

/**
 * Form API #element_validate callback on extra CSS files field.
 *
 * We check the files exist and are generally valid.
 */
function popup_field_group_element_validate_css_files($element, &$form_state) {
  if (!empty($element['#value'])) {
    $value = popup_field_group_expand_file_names($element['#value']);
    $invalid_paths = array();
    foreach ($value as $path) {
      $realpath = drupal_realpath($path);
      if (!$realpath || !is_file($realpath)) {
        $invalid_paths[] = check_plain($path);
      }
      elseif ($wrapper = file_stream_wrapper_get_instance_by_uri($path)) {
        if (!$wrapper instanceof DrupalLocalStreamWrapper) {
          form_error($element, t('Only local paths may be specified for CSS files. Invalid path: @path', array('@path' => $path)));
        }
        elseif ($wrapper instanceof DrupalPrivateStreamWrapper) {
          form_error($element, t('Private paths may not be used for CSS files. Invalid path: @path', array('@path' => $path)));
        }
      }
    }
    if (!empty($invalid_paths)) {
      form_error($element, t('The following paths are invalid, or do not exist on the server: !paths', array('!paths' => theme('item_list', array('items' => $invalid_paths)))));
    }
  }
}

/**
 * Return a newline-separated list of files properly split into an array.
 */
function popup_field_group_expand_file_names($value) {
  $value = preg_split('/(\r\n?|\n)/', trim($value));
  return array_filter(array_map('trim', $value));
}

/**
 * Implements field_group_pre_render_<format-type>.
 * Format type: Fieldset.
 *
 * @param $element The field group form element.
 * @param $group The Field group object prepared for pre_render.
 * @param $form The root element or form.
 */
function field_group_pre_render_popup(&$element, $group, &$form) {

  $settings = $group->format_settings['instance_settings'];

  $element += array(
    '#theme' => 'popup_field_group',
    '#pre_render' => array(),
    '#prefix' => '',
    '#suffix' => '',
    '#attributes' => array(
      'class' => array_merge(explode(' ', $group->classes), array(
        'popup-field-group',
      )),
      'data-popup-link-title' => !empty($settings['link_title']) ? $settings['link_title'] : $group->label,
      'data-popup-link-classes' => isset($settings['link_classes']) ? $settings['link_classes'] : '',
      'data-popup-close-button-title' => !empty($settings['close_button_title']) ? $settings['close_button_title'] : t('Save & close'),
      'data-popup-close-button-classes' => isset($settings['close_button_classes']) ? $settings['close_button_classes'] : 'button',
    ),
    'popup_title' => array(
      '#weight' => -2100,
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('popup-field-group-title'),
      ),
      'title' => array(
        '#markup' => filter_xss(!empty($settings['popup_title']) ? $settings['popup_title'] : $group->label),
      ),
      'close_button' => array(
        '#markup' => '<a class="popup-field-group-close" href="javascript:void(0)">' . filter_xss($settings['popup_close_text']) . '</a>',
      ),
    ),
    'popup_description' => array(
      '#weight' => -2000,
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('popup-field-group-description'),
      ),
      'markup' => array(
        '#markup' => filter_xss($group->description),
      ),
    ),
  );

  $path = drupal_get_path('module', 'popup_field_group');
  $element['#attached']['js'][] = "$path/popup_field_group.js";
  $element['#attached']['css'][] = "$path/popup_field_group.css";

  // Add arbitrary extra CSS files from our config.
  if (!empty($settings['extra_css'])) {
    foreach (popup_field_group_expand_file_names($settings['extra_css']) as $uri) {
      $element['#attached']['css'][$uri] = array('group' => JS_THEME);
    }
  }
}

/**
 * Implements hook_theme().
 *
 * @return array
 */
function popup_field_group_theme() {
  $items = array();

  $items['popup_field_group'] = array(
    'render element' => 'element',
  );

  return $items;
}

/**
 * Theme a popup field group.
 *
 * @param $variables
 * @return string
 */
function theme_popup_field_group($variables) {

  $element = $variables['element'];

  // Special handling for form elements.
  // (from theme_container()).
  if (isset($element['#array_parents'])) {
    // Assign an html ID.
    if (!isset($element['#attributes']['id'])) {
      $element['#attributes']['id'] = $element['#id'];
    }
    // Add the 'form-wrapper' class.
    $element['#attributes']['class'][] = 'form-wrapper';
  }

  $output = array();

  $output[] = '<div' . drupal_attributes($element['#attributes']) . '>';
  $output[] =   '<div class="overlay"></div>';
  $output[] =   '<div class="popup">';
  $output[] =     '<div class="popup-title">';
  $output[] =       drupal_render($element['popup_title']);
  $output[] =     '</div>';
  $output[] =     '<div class="popup-inner">';
  $output[] =       drupal_render($element['popup_description']);
  $output[] =       drupal_render_children($element);
  $output[] =     '</div>';
  $output[] =   '</div>';
  $output[] = '</div>';

  return implode('', $output);
}