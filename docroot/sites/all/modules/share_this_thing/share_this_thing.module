<?php
/**
 * @file
 * Share This Thing module.
 *
 * Provides an alternative way of sharing content.
 *  - Shorten URL support.
 *  - Embed code for pasting in other websites.
 *  - Your choice of sharing/bookmarking service integration.
 */

// Get the path to the module.
define('PATH', drupal_get_path('module', 'share_this_thing'));

/**
 * Implements hook_permission().
 */
function share_this_thing_permission() {
  return array(
    'administer share this thing' => array(
      'description' => t('Administer content embedding and sharing configuration options'),
      'title' => t('Administer embed/share settings'),
      'restrict access' => TRUE,
    ),
    'use share this thing' => array(
      'title' => t('Use Share this thing'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function share_this_thing_menu() {
  $items = array();

  $items['admin/config/services/share-this-thing'] = array(
    'title' => 'Share This Thing',
    'description' => 'Settings for content embedding and sharing.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('share_this_thing_admin_settings'),
    'access arguments' => array('administer share this thing'),
    'file' => 'share_this_thing.admin.inc',
  );

  $items['embed/%node'] = array(
    'title' => 'Embed',
    'description' => 'Displays the node suitable for embedding into any website via an IFRAME.',
    'page callback' => 'share_this_thing_embed_node',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['node/%node/%ctools_js/share'] = array(
    'title' => 'Share This Thing',
    'page callback' => 'share_this_thing_share_node',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Create a new view_mode to be used for embedded content.
 */
function share_this_thing_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['embed'] = array(
    'label' => t('Embed page'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_theme().
 */
function share_this_thing_theme($existing, $type, $theme, $path) {
  return array(
    'share_this_thing_title' => array(
      'variables' => array('title' => NULL),
    ),
    'share_this_thing_link' => array(
      'variables' => array('node' => NULL),
    ),
    'share_this_thing_embed' => array(
      'variables' => array('nid' => NULL, 'width' => NULL, 'height' => NULL),
    ),
    'share_this_thing_html' => array(
      'variables' => array('title' => NULL, 'content' => NULL),
      'template' => 'share-this-thing-html',
      'path' => PATH,
    ),
  );
}

/**
 * Theme modal window title.
 *
 * Example usage:
 * @code
 *   print theme('share_this_thing_title', array('title' => 'New title'));
 * @endcode
 *
 * @param array $variables
 *   An associative array containing:
 *   - title: A string to use as modal window title.
 *
 * @return string
 *   Window title.
 */
function theme_share_this_thing_title($variables) {
  return check_plain($variables['title']);
}

/**
 * Theme the IFRAME code for the shared node.
 *
 * @param array $variables
 *   An associative array containing:
 *   - nid: Node ID.
 *   - width: Iframe width.
 *   - height: Iframe height.
 *
 * @return string
 *   IFRAME markup.
 */
function theme_share_this_thing_embed($variables) {
  $src = url('embed/' . $variables['nid'], array('absolute' => TRUE));

  return '<iframe' .
    ' src="' . $src . '"' .
    ' width="' . $variables['width'] . '"' .
    ' height="' . $variables['height'] . '"' .
    ' seamless="seamless"' .
    ' frameborder="0"' .
    ' style="width:' . $variables['width'] . 'px;' .
    ' height:' . $variables['height'] . 'px;' .
    ' margin:0 auto; border:0"></iframe>';
}

/**
 * Theme the URL for the shared node.
 *
 * @param array $variables
 *   An associative array containing:
 *   - node: Node object.
 *
 * @return string
 *   Shorten URL
 */
function theme_share_this_thing_link($variables) {
  $node = $variables['node'];

  if (module_exists('shorten')) {
    $original = url('node/' . $node->nid, array(
      'absolute' => TRUE,
      'alias' => !variable_get('shorten_use_alias', 1),
      )
    );
    $output = shorten_url($original);
  }
  elseif (isset($node->yourls['short_url']) && !empty($node->yourls['short_url'])) {
    $output = $node->yourls['short_url'];
  }
  else {
    $output = url('node/' . $node->nid, array('absolute' => TRUE, 'alias' => TRUE));
  }

  return $output;
}

/**
 * Process variables for share-this-thing-html.tpl.php.
 *
 * The $variables array contains the following elements:
 * - title
 * - content
 *
 * @see share-this-thing-html.tpl.php
 */
function template_preprocess_share_this_thing_html(&$variables) {
  global $base_url, $language;

  $variables['title']    = check_plain($variables['title']);
  $variables['base_url'] = $base_url;
  $variables['language'] = $language;
  $variables['language_rtl'] = ($language->direction == LANGUAGE_RTL);
  $variables['head']     = drupal_get_html_head();
  $variables['css']      = drupal_add_css();
  $variables['styles']   = drupal_get_css();
  $variables['scripts']  = drupal_get_js();
}

/**
 * Callback function for displaying entity in "embed" view mode.
 *
 * @param object $node
 *   Node object to be themed in share-this-thing-html.tpl.php
 */
function share_this_thing_embed_node($node) {
  $type = variable_get('share_this_thing_share_' . $node->type, 0);

  if ($type == 1) {
    $build = node_view($node, 'embed');
    $contents = drupal_render($build);

    print theme('share_this_thing_html', array('title' => $node->title, 'content' => $contents));
    // Exit gracefully.
    // drupal_exit();
  }
}

/**
 * Callback function for rendering the form in ctools modal window.
 *
 * @param object $node
 *   Node object to pass onto the modal window.
 *
 * @param string $js
 *   The argument to the page callback will be the result of ctools_js_load()
 *   which will return TRUE if 'ajax' was the string, and FALSE if anything else
 *   (i.e, nojs) is the string.
 */
function share_this_thing_share_node($node, $js = NULL) {
  // Fall back if $js is not set.
  if (!$js) {
    return drupal_get_form('share_this_thing_form');
  }

  ctools_include('modal');
  // ctools_include('ajax');
  $form_state = array(
    'title' => theme('share_this_thing_title', array('title' => 'Share This Thing')),
    'ajax' => TRUE,
    'node' => $node,
  );
  $output = ctools_modal_form_wrapper('share_this_thing_form', $form_state);

  print ajax_render($output);
  exit;
}

/**
 * Share This Thing form rendered in the modal window.
 */
function share_this_thing_form($form, &$form_state) {
  if (isset($form_state['node'])) {
    $node = $form_state['node'];
  }
  else {
    $node = node_load(arg(1));
  }

  $form['share_link'] = array(
    '#type' => 'textfield',
    '#title' => t('Link'),
    '#title_display' => 'invisible',
    '#value' => theme('share_this_thing_link', array('node' => $node)),
    '#size' => 100,
    '#description' => t('Paste link in email or IM'),
    '#attributes' => array(
      'readonly' => 'readonly',
      'class' => array('stt-share-link'),
      'id' => drupal_html_id('share-link-' . $node->nid),
      'title' => check_plain($node->title),
    ),
    '#weight' => 1,
  );

  $iframe_width = variable_get('share_this_thing_iframe_width_' . $node->type, 400);
  $iframe_height = variable_get('share_this_thing_iframe_height_' . $node->type, 250);

  $form['share_embed'] = array(
    '#type' => 'textfield',
    '#title' => t('Embed'),
    '#title_display' => 'invisible',
    '#value' => theme('share_this_thing_embed', array(
        'nid' => $node->nid,
        'width' => $iframe_width,
        'height' => $iframe_height,
      )
    ),
    '#size' => 100,
    '#description' => t('Paste HTML to embed in website'),
    '#attributes' => array(
      'readonly' => 'readonly',
      'class' => array('stt-share-embed'),
      'id' => drupal_html_id('share-embed-' . $node->nid),
    ),
    '#weight' => 2,
  );

  if (variable_get('share_this_thing_markup', '') != '') {
    $form['share_via'] = array(
      '#type' => 'item',
      '#title' => t('Share via'),
      '#title_display' => 'invisible',
      '#markup' => variable_get('share_this_thing_markup', ''),
      '#prefix' => '<div class="stt-share-via clearfix">',
      '#suffix' => '</div>',
      '#weight' => 3,
    );
  }

  // Attach the CSS and JS to the form.
  $form['#attached']['js'] = array(PATH . '/share-this-thing.form.js');
  $form['#attached']['css'] = array(PATH . '/share-this-thing.form.css');

  return $form;
}

/**
 * Implements hook_node_view().
 */
function share_this_thing_node_view($node, $view_mode, $langcode) {
  $type = variable_get('share_this_thing_share_' . $node->type, 0);

  if (($type == 1) && ($view_mode != 'embed')) {
    ctools_include('ajax');
    ctools_include('modal');
    ctools_modal_add_js();

    // Create our own javascript that will be used to theme a modal.
    $style = array(
      'share-this-thing' => array(
        'modalSize' => array(
          'type' => 'scaled',
          'width' => 500,
          'height' => 240,
          'addWidth' => 0,
          'addHeight' => 0,
          'contentRight' => 0,
          'contentBottom' => 0,
        ),
        'modalTheme' => 'ShareThisThingModal',
        'modalOptions' => array(
          'opacity' => .5,
          'background-color' => '#FFF',
        ),
        'animation' => 'fadeIn',
        'animationSpeed' => 'normal',
        'closeText' => t('Close'),
      ),
    );

    drupal_add_js($style, 'setting');
    drupal_add_js(PATH . '/share-this-thing.modal.js');
    drupal_add_css(PATH . '/share-this-thing.modal.css');
    drupal_add_library('system', 'drupal.ajax');

    $button_href = 'node/' . $node->nid . '/nojs/share';
    $button_text = t('Share');
    $button_attributes = array(
      'title' => t('Share @title', array('@title' => $node->title)),
      'class' => array('ctools-use-modal', 'ctools-modal-share-this-thing'),
      'rel' => 'nofollow',
    );

    if (variable_get('share_this_thing_links_' . $node->type, 0)) {
      $links = array();
      $links['share_this_thing_links'] = array(
        'href' => $button_href,
        'title' => $button_text,
        'attributes' => $button_attributes,
      );
      $node->content['links']['share_this_thing'] = array(
        '#theme' => 'links',
        '#links' => $links,
      );
    }

    if (variable_get('share_this_thing_content_' . $node->type, 0)) {
      $node->content['share_ctools'] = array(
        '#prefix' => '<span class="share_this_thing_content">',
        '#suffix' => '</span>',
        '#markup' => l($button_text, $button_href, array('attributes' => $button_attributes)),
        '#weight' => -100,
      );
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function share_this_thing_form_node_type_form_alter(&$form, $form_state) {
  $form['stt'] = array(
    '#type' => 'fieldset',
    '#title' => t('Share This Thing options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'additional_settings',
    '#description' => t('Choose the location of the share link. The Links area is usually below the node content, whereas the Content corner is placed in the upper-right corner of the node content. Unselect all options to disable the link. All the options could be disabled, and a share link could be added via API. See README.txt for details.'),
  );

  $form['stt']['share_this_thing_share'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable sharing %type', array('%type' => $form['#node_type']->name)),
    '#default_value' => variable_get('share_this_thing_share_' . $form['#node_type']->type, 0),
    '#description' => t('Check this box to enable sharing options for this content type. Do not forget to update the display of fields in <a href="!url">%viewmode</a> view mode.', array(
      '!url' => url('admin/structure/types/manage/' . $form['#node_type']->type . '/display/embed'),
      '%viewmode' => 'Embed page',
      )
    ),
  );

  $form['stt']['share_this_thing_links'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add "Share" link in the links area for %type content.', array('%type' => $form['#node_type']->name)),
    '#default_value' => variable_get('share_this_thing_links_' . $form['#node_type']->type, 0),
  );

  $form['stt']['share_this_thing_content'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add "Share" link in the Content corner for %type content.', array('%type' => $form['#node_type']->name)),
    '#default_value' => variable_get('share_this_thing_content_' . $form['#node_type']->type, 0),
  );

  $form['stt']['share_this_thing_iframe_width'] = array(
    '#type' => 'textfield',
    '#title' => t('IFRAME width'),
    '#title_display' => 'attribute',
    '#default_value' => variable_get('share_this_thing_iframe_width_' . $form['#node_type']->type, 400),
    '#size' => 10,
    '#maxlength' => 4,
    '#field_prefix' => t('@iframe width', array('@iframe' => '<iframe>')),
    '#field_suffix' => t('pixel'),
    '#attributes' => array('style' => 'width: 5em; text-align: right;'),
    '#element_validate' => array('share_this_thing_iframe_validate'),
  );

  $form['stt']['share_this_thing_iframe_height'] = array(
    '#type' => 'textfield',
    '#title' => t('IFRAME height'),
    '#title_display' => 'attribute',
    '#default_value' => variable_get('share_this_thing_iframe_height_' . $form['#node_type']->type, 250),
    '#size' => 10,
    '#maxlength' => 4,
    '#field_prefix' => t('@iframe height', array('@iframe' => '<iframe>')),
    '#field_suffix' => t('pixel'),
    '#attributes' => array('style' => 'width: 5em; text-align: right;'),
    '#element_validate' => array('share_this_thing_iframe_validate'),
  );
}

/**
 * Validation callback function for IFRAME width and height values.
 */
function share_this_thing_iframe_validate($element, &$form_state, $form) {
  if (empty($element['#value'])) {
    form_error($element, t('@title is required.', array('@title' => $element['#title'])));
  }

  if (!is_numeric($element['#value']) || !($element['#value'] > 0)) {
    form_error($element, t('@title must be a positive number.', array('@title' => $element['#title'])));
  }
}
