<?php

/**
 * @file
 * Defines a system for adding basic line items to an order.
 */

/**
 * Implements hook_commerce_line_item_type_info().
 */
function commerce_basic_line_item_commerce_line_item_type_info() {
  return array(
    'basic_line_item' => array(
      'type' => 'basic_line_item',
      'name' => t('Basic Line Item'),
      'description' => t('Creates an empty line item with an empty price.'),
      'add_form_submit_value' => t('Add basic line item'),
      'base' => 'commerce_basic_line_item',
    ),
  );
}

/**
 * Returns the title of a custom basic line item.
 */
function commerce_basic_line_item_title($line_item) {
  return drupal_ucfirst(str_replace('-', ' ', $line_item->line_item_label));
}

/**
 * Add a basic line item through the line item manager widget.
 */
function commerce_basic_line_item_add_form($form, &$form_state) {
  $form = array();

  $form['item_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => '',
    '#size' => 60,
    '#required' => TRUE,
  );
  $form['item_price_fieldset'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    'item_quantity' => array(
      '#type' => 'textfield',
      '#title' => t('Quantity'),
      '#default_value' => 1,
      '#size' => 10,
      '#required' => TRUE,
    ),
    'item_price' => array(
      '#type' => 'textfield',
      '#title' => t('Price'),
      '#default_value' => 0,
      '#size' => 10,
      '#required' => TRUE,
    ),
    'currency_code' => array(
      '#type' => 'select',
      '#title' => t('Currency'),
      '#options' => commerce_currency_get_code(true),
      '#default_value' => commerce_default_currency(),
    ),
  );

  return $form;
}

/**
 * Adds the selected price to the line item.
 */
function commerce_basic_line_item_add_form_submit($line_item, $element, &$form_state, $form) {
  $item_quantity = $element['actions']['item_price_fieldset']['item_quantity']['#value'];
  $item_price = $element['actions']['item_price_fieldset']['item_price']['#value'];
  $item_code = $element['actions']['item_price_fieldset']['currency_code']['#value'];

  // Make sure quantity is a numeric value.
  if (!is_numeric($item_quantity)) {
    return t('Invalid quantity entered, please enter a numeric value.');
  }

  // Make sure price is a numeric value.
  if (is_numeric($item_price)) {
    // Build the price array.
    $unit_price = array(
      'amount' => floor($item_price * 100),
      'currency_code' => $item_code,
      'data' => array(),
    );
    $unit_price['data'] = commerce_price_component_add($unit_price, 'basic_line_item', $unit_price, TRUE, FALSE);
  }
  else {
    return t('Invalid price entered, please enter a numeric value.');
  }

  commerce_basic_line_item_populate($line_item, $element, $unit_price);
}

/**
 * Populates a basic line item with values.
 */
function commerce_basic_line_item_populate($line_item, $element, $unit_price) {
  $item_title = $element['actions']['item_title']['#value'];
  $item_quantity = $element['actions']['item_price_fieldset']['item_quantity']['#value'];

  // Set the label to the machine name of the title.
  $line_item->line_item_label = strtolower(str_replace(' ', '-', $item_title));

  $line_item->quantity = $item_quantity;

  // Set the unit price.
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
  $line_item_wrapper->commerce_unit_price = $unit_price;
}

/**
 * Implements hook_commerce_price_formatted_components_alter().
 *
 * Adds the basic line item component to the subtotal and removes
 * it's display from the table.
 */
function commerce_basic_line_item_commerce_price_formatted_components_alter(&$components, $price, $entity) {
  if (isset($components['basic_line_item']) && !empty($components['basic_line_item'])) {
    $components['base_price']['price']['amount'] += $components['basic_line_item']['price']['amount'];
    unset($components['basic_line_item']);
  }
}

/**
 * Implements hook_views_api().
 */
function commerce_basic_line_item_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_basic_line_item') . '/includes/views',
  );
}
