<?php
/**
 * @file
 * Main module file for active session
 */

/**
 * Implements hook_menu().
 */
function active_session_menu() {

  $items['active_sessions'] = array(
    'title' => 'Active sessions',
    'description' => 'A list of active sessions for the current user.',
    'page callback' => 'active_session_page',
    'access callback' => '_active_session_access',
    'access arguments' => array('view'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/reports/active_sessions/all'] = array(
    'title' => 'Current active sessions',
    'description' => 'A list of active sessions for all users.',
    'page callback' => 'active_session_page',
    'page arguments' => array('all'),
    'access arguments' => array('view all sessions'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['active_session/%/%/close'] = array(
    'title' => 'Close a session',
    'description' => 'A list of active sessions for the current user.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('active_session_close_session_form', 1, 2),
    'access callback' => '_active_session_access',
    'access arguments' => array('close'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function active_session_permission() {
  return array(
    'view own sessions' => array('title' => t('View own sessions')),
    'view all sessions' => array('title' => t('View all sessions')),

    'close own sessions' => array('title' => t('Close own sessions')),
    'close all sessions' => array('title' => t('Close all sessions')),
  );
}

/**
 * Implements access controls for active_session.
 *
 * @param string $op
 *   What operation is being performed. Currently supports view and close.
 *
 * @return bool
 *   TRUE if the user can access otherwise FALSE.
 */
function _active_session_access($op) {

  switch ($op) {
    case 'view':
      return (user_access('view own sessions') || user_access('view all sessions'));
      break;
    case 'close':
      return (user_access('close own sessions') || user_access('close all sessions'));
      break;
  }

  return FALSE;
}

/**
 * Get other sessions for this user.
 *
 * @param int
 *   Drupal user id.
 *
 * @return array
 *   Array of session data.
 *
 */
function _active_session_get_sessions($uid = 0) {
  $sessions = array();

  $result = db_select('sessions', 's')
    ->fields('s')
    ->condition('uid', $uid, ($uid == 0) ? '>' : '=')
    ->orderBy('uid', 'ASC')
    ->execute();

  while ($record = $result->fetchAssoc()) {
    drupal_alter('active_session_record', $record);
    $sessions[] = $record;
  }

  return $sessions;
}

/**
 * Display the active sessions for the current user.
 */
function active_session_page($view = 'self') {
  global $user;

  $headers = array(t('IP Address'), t('Last Active'));
  if (_active_session_access('close')) {
    $headers[] = t('Action');
  }

  if ($view == 'all') {
    array_unshift($headers, t('uid'));
  }

  $rows = array();
  $uid = ($view == 'all') ? 0 : $user->uid;
  $sessions = _active_session_get_sessions($uid);

  foreach ($sessions as $session) {

    $hash = drupal_hash_base64($session['sid'] . $session['hostname']);
    if ($session['sid'] == $user->sid) {
      $action = t('Current Session');
    }
    else {
      $action = l(t('Close session'), 'active_session/' . $user->uid . '/' . $hash . '/close');
    }

    $row = array(
      $session['hostname'],
      format_interval((time() - $session['timestamp']) , 2) . ' ' . t('ago'),
    );

    if (_active_session_access('close')) {
      $row[] = $action;
    }

    if ($view == 'all') {
      array_unshift($row, $session['uid']);
    }

    // Allow another module to alter this information.
    drupal_alter('active_session_row', $row);

    $rows[] = $row;
  }

  // Allow another module to alter this information.
  drupal_alter('active_session_rows', $rows);
  drupal_alter('active_session_headers', $headers);

  $table = array('header' => $headers, 'rows' => $rows, 'empty' => t('No sessions to list'));

  if (user_access('view all sessions')) {
    if ($view == 'all') {
      $link = l(t('View my active sessions'), 'active_sessions');
    }
    else {
      $link = l(t('View all active sessions'), 'admin/reports/active_sessions/all');
    }

    $table['caption'] = $link;
  }

  return theme('table', $table);
}

/**
 * Implements hook_block_info().
 *
 * Create a block to display this data.
 */
function active_session_block_info() {

  $blocks['active_session'] = array(
    'info' => t('Active Sessions'),
    'status' => TRUE,
    'region' => 'footer',  // Not usually provided.
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function active_session_block_view($delta = '') {

  switch ($delta) {
    case 'active_session':
      $block['content'] = active_session_contents();
      break;
  }
  return $block;
}

/**
 * A module-defined block content function.
 */
function active_session_contents() {
  global $user;

  if ($user->uid > 0) {
    $sessions = _active_session_get_sessions($user->uid);
    $count = sizeof($sessions);
    $count--; //

    if ($count > 0) {
      $markup  = t('Active in @count other @location', array('@count' => $count, '@location' => format_plural($count, t('location'), t('locations'))));
      $markup .= ' ' . l(t('Details'), 'active_sessions', array('attributes' => array('target' => '_blank')));
      return array('#markup' => $markup);
    }
  }

  // nothing left, return nothing.
  return;
}

/**
 * Implements hook_form().
 *
 */
function active_session_close_session_form($form, &$form_state, $uid, $hash) {
  $args = func_get_args();

  $form['uid'] = array(
    '#type' => 'hidden',
    '#value' => $uid,
  );

  $form['hash'] = array(
    '#type' => 'hidden',
    '#value' => $hash,
  );

  return confirm_form($form, t('Are sure you want to close this session?'), 'active_sessions', '', t('Close session'), t('Cancel'));
}

/**
 * Implements hook_form_submit().
 */
function active_session_close_session_form_submit($form, &$form_state) {
  _active_session_close_session($form_state['values']['uid'], $form_state['values']['hash']);
}

/**
 * Delete the session based on the uid and hash
 *
 * @param int
 *   Drupal user id
 *
 * @param string
 *   hash created from the session hostname and session id
 *
 */
function _active_session_close_session($uid, $hash) {
  global $is_https, $user;

  $sessions = _active_session_get_sessions($uid);

  foreach ($sessions as $session) {
    $sess_hash = drupal_hash_base64($session['sid'] . $session['hostname']);
    if ($sess_hash == $hash) {
      db_delete('sessions')->condition($is_https ? 'ssid' : 'sid', $session['sid'])->execute();
      drupal_set_message(t("The session has been closed."));
      break;
    }
  }

  drupal_goto('active_sessions');
}
