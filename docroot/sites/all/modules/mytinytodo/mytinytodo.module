<?php

/**
 * Implements hook_menu().
 *
 * Provides a simple user interface that tells the developer where to go.
 */
function mytinytodo_menu() {
    $items['mytinytodo/init'] = array(
        'page callback' => 'mytinytodo_init_js',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['mytinytodo/ajax'] = array(
        'page callback' => 'mytinytodo_ajax_inc',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['mytinytodo/page'] = array(
        'page callback' => 'mytinytodo_page_inc',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['mytinytodo/settings'] = array(
        'page callback' => 'mytinytodo_settings_inc',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['mytinytodo/feed'] = array(
        'page callback' => 'mytinytodo_feed_inc',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['mytinytodo/export'] = array(
        'page callback' => 'mytinytodo_export_inc',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

  return $items;
}

/**
 * Implements hook_theme().
 */
function mytinytodo_theme() {
    $theme = array(
        'mytinytodo_page' => array(
            'template' => 'mytinytodo-page',
            'path' => drupal_get_path('module', 'mytinytodo') . '/tpl',
        ),
        'mytinytodo_html' => array(
            'variables' => array('nid' => NULL, 'field' => NULL, 'pda' => NULL),
            'file' => 'mytinytodo.theme.inc',
        ),
        'mytinytodo_todo_menu_tree' => array(
            'variables' => array('menu' => NULL, 'fid' => NULL),
            'file' => 'mytinytodo.theme.inc',
        ),
        'mytinytodo_todo_menu_item' => array(
            'variables' => array('item' => NULL, 'fid' => NULL),
            'file' => 'mytinytodo.theme.inc',
        ),
        'mytinytodo_todo_menu_item_callback' => array(
            'variables' => array('item' => NULL, 'callback' => NULL, 'arguments' => NULL, 'fid' => NULL),
            'file' => 'mytinytodo.theme.inc',
        ),
        'mytinytodo_todo_menu_items' => array(
            'variables' => array('items' => NULL, 'fid' => NULL),
            'file' => 'mytinytodo.theme.inc',
        ),
        'mytinytodo_todo_submenu_item' => array(
            'variables' => array('item' => NULL, 'fid' => NULL),
            'file' => 'mytinytodo.theme.inc',
        ),
        'mytinytodo_todo_menu_container' => array(
            'variables' => array('items' => NULL, 'item' => NULL, 'fid' => NULL),
            'file' => 'mytinytodo.theme.inc',
        ),
        'mytinytodo_todo_menu_containers' => array(
            'variables' => array('containers' => NULL, 'fid' => NULL),
            'file' => 'mytinytodo.theme.inc',
        ),
        'mytinytodo_todo_menu_scripts' => array(
            'variables' => array('scripts' => NULL, 'fid' => NULL),
            'file' => 'mytinytodo.theme.inc',
        ),
        'mytinytodo_edit_note' => array(
            'file' => 'mytinytodo.theme.inc',
        ),
        'mytinytodo_edit_tags' => array(
            'file' => 'mytinytodo.theme.inc',
        ),
    );

    return $theme;
}

function mytinytodo_ajax_inc() {
    module_load_include('inc', 'mytinytodo', 'lib/init');
    module_load_include('php', 'mytinytodo', 'lib/ajax');
}

function mytinytodo_page_inc() {
    module_load_include('inc', 'mytinytodo', 'lib/init');
    die( theme('mytinytodo_page') );
}

function mytinytodo_settings_inc() {
    module_load_include('inc', 'mytinytodo', 'lib/init');
    module_load_include('php', 'mytinytodo', 'lib/settings');
}

function mytinytodo_feed_inc() {
    module_load_include('inc', 'mytinytodo', 'lib/init');
    module_load_include('php', 'mytinytodo', 'lib/feed');
}

function mytinytodo_export_inc() {
    module_load_include('inc', 'mytinytodo', 'lib/init');
    module_load_include('php', 'mytinytodo', 'lib/export');
}

function mytinytodo_init_js() {
    module_load_include('inc', 'mytinytodo', 'lib/init');

    header("Content-Type: text/javascript");
    die(
'
(function ($) {
  $().ready(function(){

' . ((isset($_GET['pda'])) ? "

	$('body').width(screen.width);
	$(window).resize(function() {
		$('body').width(screen.width);
	});" : '' )
		
. '
	mytinytodo.mttUrl = "/' . drupal_get_path('module', 'mytinytodo')  . '/lib/";'  . '
	mytinytodo.templateUrl = "/' .drupal_get_path('module', 'mytinytodo') . '/lib/themes/default/";' . '
	mytinytodo.db = new mytinytodoStorageAjax(mytinytodo);
	mytinytodo.init({
            showdate: ' . ((Config::get('showdate') && !isset($_GET['pda'])) ? "true" : "false") . ',
            singletab: ' . ((isset($_GET['singletab']) || isset($_GET['pda'])) ? "true" : "false") . ',
            duedatepickerformat: "' . htmlspecialchars(Config::get('dateformat2')) . '",
            firstdayofweek: ' . (int) Config::get('firstdayofweek') . ',
            autotag: ' . (Config::get('autotag') ? "true" : "false") . '
            ' . ((isset($_GET['list'])) ? ', openList: ' . (int)$_GET['list'] : '') . '
            ' . ((isset($_GET['pda'])) ?', touchDevice: true' : '') . '
	}).loadLists(1);
  });
})(jQuery);');
}

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function mytinytodo_field_info() {
    return array(
        'mytinytodo_list' => array(
            'label' => t('TODO list'),
            'description' => t('A TODO list.'),
            'default_widget' => 'mytinytodo_widget',
            'default_formatter' => 'mytinytodo_formatter',
        ),
    );
}

/**
 * Implements hook_field_schema().
 */
function mytinytodo_field_schema($field) {
    $columns = array();
    if ($field['type'] == 'mytinytodo_list') {
        $columns = array(
            'display' => array(
                'type' => 'int',
                'default' => 1,
                'not null' => FALSE,
            ),
        );
    }

    return array('columns' => $columns);
}

/**
 * Implements hook_field_validate().
 */
function mytinytodo_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
}

/**
 * Implements hook_field_is_empty().
 */
function mytinytodo_field_is_empty($item, $field) {
    return empty($item['display']);
}

/**
 * Implements hook_field_formatter_info().
 */
function mytinytodo_field_formatter_info() {
    return array(
        'mytinytodo_formatter' => array(
            'label' => t('Default TODO list style.'),
            'field types' => array('mytinytodo_list'),
        ),
    );
}

function mytinytodo_get_field_id($entity_type, $entity_id, $instance) {
    $results = db_query("SELECT id FROM {mytinytodo_fields} WHERE entity_type = :entity_type AND entity_id = :entity_id AND delta = :delta",
            array(':entity_type' => $entity_type, ':entity_id' => $entity_id, ':delta' => $instance['field_id']));

    if ($results->rowCount() == 0) {
        db_insert("mytinytodo_fields")
            ->fields(array(
                'entity_type' => $entity_type,
                'entity_id' => $entity_id,
                'delta' => $instance['field_id'],
            ))
            ->execute();

        return mytinytodo_get_field_id($entity_type, $entity_id, $instance);
    }

    $result = $results->fetchCol();
    return $result[0];
}

/**
 * Implements hook_field_formatter_view().
 */
function mytinytodo_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
    switch ($entity_type) {
        case 'node':
            $id = $entity->nid;
            break;

        default:
            $id = entity_extract_ids($entity_type, $entity);
            $id = $id[0];
    }

    $element = array();
    foreach ($items as $delta => $item) {
        $field_id = mytinytodo_get_field_id($entity_type, $id, $instance);

        $element[$delta]['#markup'] = '<iframe scrolling="auto" style="overflow-y: auto; width: 100%; height: 400px; border: none;" src="'
            . url('mytinytodo/page', array( 'query' => array( 'fid' => $field_id ) ) )
            . '"></iframe>';
    }

    return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function mytinytodo_field_widget_info() {
    return array(
        'mytinytodo_widget' => array(
            'label' => t('myTinyTodo list'),
            'field types' => array('mytinytodo_list'),
        ),
    );
}

/**
 * Implements hook_field_widget_form().
 */
function mytinytodo_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
    $value = isset($items[$delta]['display']) ? $items[$delta]['display'] : '';
    $element += array(
        '#delta' => $delta,
    );
    $element['display'] = array();

    $element['display'] += array(
        '#type' => 'checkbox',
        '#title' => "Display {$instance['label']}?",
        '#default_value' => $value,
    );
    return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function mytinytodo_field_widget_error($element, $error, $form, &$form_state) {
    switch ($error['error']) {
        case 'mytinytodo_invalid':
            form_error($element, $error['message']);
            break;
    }
}

/**
 * Implements hook_views_api().
 */
function mytinytodo_views_api() {
    return array(
        'api' => 3, 
        'path' => drupal_get_path('module', 'mytinytodo') . '/views',
    );
}
