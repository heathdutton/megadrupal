Hooks
=====
These hooks can be implemented by any module.


Providing Data
--------------
### `hook_webform_ab_get_webform_types()`
Return a keyed array of webform types

### `hook_webform_ab_valid_webforms($webform_types)`
Given the webform types being used for a test, return an array of webforms that can be added to the test. Return should be a flat array. Each element should be another array, with nid and title keys.

### `hook_webform_ab_valid_webforms_alter(&$forms, $webform_types)`
Alter hook for the valid webforms list collected by `hook_webform_ab_valid_webforms()`

### `hook_webform_ab_validate_conversion($webform_types, $test_node, $form_state)`
Check if the form submission should be counted as a conversion. Only run the check if `$webform_types` is a value supplied by the current module.


Act on Events
-------------
### `hook_webform_ab_conversion($test_node, $submitted_values)`
Invoked when a form in the test is successfully submitted. This can be used to store information specific to your module when a form is submitted. For example, the `fundraiser_ab` module implements this hook to update stored aggregate stats about donations made on the forms included in an A/B test.

### `hook_webform_ab_reset_data($test_nid)`
Invoked when the Reset Data option is used on the Reports and Monitoring tab of a Webform A/B Test. This allows other modules to clear any data they might be storing about the test. For example, the `fundraiser_ab` module implements this hook to clear the aggregated donation stats when the A/B test data is reset.


### `hook_webform_ab_remove_form($test_nid, $webform_nid)`
Invoked when a webform is removed from a test, on the Included Webforms tab. Again, this can be used to remove data that your module stores about webforms in a test.


Plugins
=======
The 2.x version of Webform A/B Testing makes use of CTools plugins to define the win thresholds and winning conditions. Any module can define their own plugins to add thresholds or win conditions.

Plugin files have a .inc extension and live somewhere in your module directory. Typically, these go in a plugins directory, but you must specify where they live by implementing `hook_ctools_plugin_directory()`. When CTools is requesting information about plugins for this module, the `$module` argument will be '`webform_ab`', and `$plugin` will be either '`win_conditions`' or '`win_thresholds`'.

The recommended course is to split these into their own sub-directories. The implementation of this hook in `webform_ab` demonstrates how to do this; if you'd like, you can just copy this function into your own module and rename it:

    /**
     * Implementation of hook_ctools_plugin_directory().
     * Tell ctools where this module's plugins live
     */
    function webform_ab_ctools_plugin_directory($module, $plugin) {
      if ($module == 'webform_ab') {
        return 'plugins/' . $plugin;
      }
    }

This tells CTools to look for a subdirectory in `plugins` that matches the plugin type being requested. This way, CTools will look for plugins in `plugins/win_conditions` and `plugins/win_thresholds`.

Now you just need to create your plugin files in those directories. Create one `.inc` file for each plugin. Each of these files will include a `$plugin` array that provides details about the plugin, and any functions necessary for the implementation. The details for this array follow below.

Win Threshold and Win Condition Plugins
---------------------------------------
The following array keys can be defined in `$plugin` for both types of plugins. For a pretty basic example of a win threshold plugin, see `minimum_hits.inc`. For a pretty basic example of a win condition plugin, see `total_conversions.inc`.

Most of the options in this array are optional; those that are required are noted as such.

### title (required)
The name of the plugin. This is displayed on the Webform A/B Test node edit form for all plugins that may be enabled, and is displayed to admins viewing the node for any that have been enabled for that test. This is seen by admins only.

### description
A brief description of the plugin's functionality, displayed when editing or viewing a Webform A/B Test node. This is seen by admins only.

### config form
Name of the function that provides config options for this plugin. This form will be added into the Webform A/B Test node form, and displayed only when the plugin is enabled by checking the checkbox for that plugin. This function takes one argument: `$current_config`, an array of the existing config for this plugin on this node.

This function can be omitted for plugins that do not offer any configuration options.

### config form validation
Name of the function that validates the config form. Any errors should be reported by calling `form_set_error()`. This function takes two arguments:

* `$config`: array of submitted values for the config form
* `$field_name_prefix`: the prefix to use for the field name when calling `form_set_error()`, so that the correct field is highlighted as needing attention. Prepend the field name passed to `form_set_error()` with this variable, like so: `form_set_error($field_name_prefix . 'hits', t('Please enter an integer for Minimum Hits win threshold.'));`

This function can be omitted for plugins that do not offer any configuration options, or where no validation is required of the options.

### prep for save
Name of the function that prepares configuration for saving to the DB. At this writing, this function is only being used by the `percent_conversions` win condition, where it converts a percentage string (25%) to a decimal (.25). This function takes the `&$config` array as an argument, by reference, and changes to any values should be made directly on the array. Any return value is ignored.

This function can be omitted for plugins that do not offer any configuration options, or where the configuration options can be saved as-is (which is often the case).

### config summary
Name of the function that provides the summary of the plugin configuration, to be displayed when an admin is viewing the A/B test node. In most cases, the config form only includes one option, so this can just return the value of that field. A better example is the Percent Conversion win condition, which formats the percentage nicely for display. Like the other functions, this one takes a `$config` argument that contains an array with the config values for this plugin.

If this function is not defined for a plugin, then no summary is displayed for the plugin. This is appropriate for plugins that do not have any configuration options.

### check criteria (required)
Name of the function that will check if a form has met the minimum threshold for the test, or if the form has met the winning condition, depending on the plugin type. In either type of plugin, this function should return true if the given form meets the criteria specified in the `$config` array.

For win thresholds, this function must return true for all plugins, for all forms, before any win conditions will be checked.

For win conditions, if this function returns true for all plugins, for any one form, then that form will be declared the winner of the A/B test.

The function takes the following arguments:

* `$config`: array of configuration options for the plugin.
* `$webform_details`: array of details about the webform that should be checked. This includes the keys  webform_nid, status, title, hits, and conversions.
* `$test_node`: the A/B test node
