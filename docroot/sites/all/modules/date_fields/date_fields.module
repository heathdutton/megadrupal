<?php

/**
 * Implements hook_element_info().
 */
function date_fields_element_info() {
  return array(
    'date_fields' => array(
      '#input' => TRUE,
      '#process' => array(
        'date_fields_process',
      ),
      '#element_validate' => array(
        'date_fields_validate',
      ),
      '#theme_wrappers' => array('form_element'),
      '#theme' => 'date',
      '#maxdate' => FALSE,
      '#mindate' => FALSE,
    ),
  );
}

/**
 * Process callback.
 *
 * Yes, this is pretty much copied from the standard date field. Why mess with
 * something that ain't broken.
 *
 * @return array
 */
function date_fields_process($element, &$form_state) {
  $element['#tree'] = TRUE;
  // Determine the order of day, month, year in the site's chosen date format.
  $format = variable_get('date_format_short', 'm/d/Y');
  $sort = array();
  $sort['day'] = max(strpos($format, 'd'), strpos($format, 'j'));
  $sort['month'] = max(strpos($format, 'm'), strpos($format, 'M'));
  $sort['year'] = strpos($format, 'Y');
  asort($sort);
  $order = array_keys($sort);
  // Output multifields for date.
  foreach ($order as $type) {
    switch ($type) {
      case 'day':
        $size = 2;
        $placeholder = 'dd';
        break;
      case 'month':
        $size = 2;
        $placeholder = 'mm';
        break;
      case 'year':
        $size = 4;
        $placeholder = 'yyyy';
        break;
    }
    $element[$type] = array(
      '#type' => 'textfield',
      '#size' => $size,
      '#maxlength' => $size,
      '#value' => (isset($element['#value'][$type]) ? $element['#value'][$type] : ''),
      '#required' => !empty($element['#required']),
      '#attributes' => array(
        'placeholder' => $placeholder,
      ),
    );
  }
  return $element;
}

/**
 * Validation callback.
 *
 * @return array
 */
function date_fields_validate($element, &$form_state) {
  // Check the date is valid
  if (!is_numeric($element['#value']['year']) || !is_numeric($element['#value']['month']) || !is_numeric($element['#value']['day']) || !checkdate($element['#value']['month'], $element['#value']['day'], $element['#value']['year'])) {
    form_error($element, t('The date entered is invalid.'));
  }
  // Check the date entered against the #maxdate for the field.
  if ($element['#maxdate'] && is_numeric($element['#maxdate']) && strtotime("{$element['#value']['year']}-{$element['#value']['month']}-{$element['#value']['day']}") > $element['#maxdate']) {
    form_error($element, t('The date entered is too far in the future.'));
  }
  // Check the date entered against the #mindate for the field.
  if ($element['#mindate'] && is_numeric($element['#mindate']) && strtotime("{$element['#value']['year']}-{$element['#value']['month']}-{$element['#value']['day']}") < $element['#mindate']) {
    form_error($element, t('The date entered is too far in the past.'));
  }
  return $element;
}
