<?php
/**
 * @file
 * Allows access control to the hierarchical select menu in node types.
 */

/**
 * Implements hook_help().
 */
function hierarchical_select_access_help($path, $arg) {
  switch ($path) {
    case 'admin/help#hierarchical_select_access':
      $path = dirname(__FILE__) . '/README.txt';
      if (file_exists($path)) {
        $readme = file_get_contents($path);
      }
      if (!isset($readme)) {
        return NULL;
      }
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];
        if (function_exists($info['process callback'])) {
          $function = $info['process callback'];
          $output = ($function($readme, NULL));
        }
        else {
          $output = '<pre>' . ($readme) . '</pre>';
        }
      }
      else {
        $output = '<pre>' . ($readme) . '</pre>';
      }

      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function hierarchical_select_access_menu() {
  $items = array();

  $items['admin/config/content/hierarchical_select/access'] = array(
    'title'            => 'Menu access',
    'description'      => 'Configure site-wide settings for the Hierarchical Select Access module.',
    'access arguments' => array('administer site configuration'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('hierarchical_select_access_settings_form'),
    'type'             => MENU_LOCAL_TASK,
    'file' => 'hierarchical_select_access.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function hierarchical_select_access_form_node_form_alter(&$form, &$form_state) {
  global $user;

  // Get list of all configured roles.
  $role_ids = variable_get('hierarchical_select_access_selected_roles', array());
  // Get list of all configured node types.
  $node_types = variable_get('hierarchical_select_access_selected_content', array());

  if (isset($form['menu']['link']['parent'])
    && $form['menu']['#access']
    && !empty($role_ids)
    && !empty($node_types)) {
    if (in_array($form['#node']->type, $node_types, TRUE)) {

      // Roles assigned to the current user.
      $user_roles = $user->roles;

      // Determine if any of the current user's roles have been configured.
      foreach ($user_roles as $role_rid => $role_name) {
        if (in_array($role_rid, $role_ids)) {
          // Unset the submit callback added by Hierarchical Select Menu.
          foreach ($form['#submit'] as $key => $value) {
            if ($value == 'hs_menu_node_form_submit') {
              unset($form['#submit'][$key]);
            }
          }

          $form['menu']['link']['parent']['#type'] = 'select';

          // Generate a list of possible parents (not including this link or
          // descendants).
          $link = $form['#node']->menu;
          $type = $form['#node']->type;
          // menu_parent_options() is goofy and can actually handle either
          // a menu link or a node type both as second argument. Pick based on
          // whether there is a link already (menu_node_prepare() sets
          // mlid default to 0).
          $options = menu_parent_options(menu_get_menus(), $link['mlid'] ? $link : $type, $type);

          // If no possible parent menu items were found, there is nothing to
          // display.
          if (empty($options)) {
            return;
          }

          // Get the current parent menu item.
          $default = ($link['mlid'] ? $link['menu_name'] . ':' . $link['plid'] : variable_get('menu_parent_' . $type, 'main-menu:0'));

          // If the current parent menu item is not present in options, use the
          // first available option as default value.
          // @todo User should not be allowed to access menu link settings in
          // such a case.
          if (!isset($options[$default])) {
            $array = array_keys($options);
            $default = reset($array);
          }

          $form['menu']['link']['parent'] = array(
            '#type' => 'select',
            '#title' => t('Parent item'),
            '#default_value' => $default,
            '#options' => $options,
            '#attributes' => array('class' => array('menu-parent-select')),
          );

        }
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function hierarchical_select_access_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_node_form_alter'
    && isset($implementations['hierarchical_select_access'])) {
    // Move hierarchical_select_access to the end of the list.
    // module_implements() iterates through $implementations with a foreach loop
    // which PHP iterates in the order that the items were added, so to move an
    // item to the end of the array, we remove it and then add it.
    $group = $implementations['hierarchical_select_access'];
    unset($implementations['hierarchical_select_access']);
    $implementations['hierarchical_select_access'] = $group;
  }
}
