<?php

/**
 * @file
 * Displays AsciiDoc output in a Drupal site.
 */

/**
 * Implements hook_help().
 */
function asciidoc_display_help($path, $arg) {
  switch ($path) {
    case 'admin/help#asciidoc_display':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The AsciiDoc Display module allows you to display output from the AsciiDoc documentation formatting system in Drupal, if you use the scripts provided with the module to generate the output. A set of AsciiDoc documentation is known as a book, and this module can display one or more books. Books can also be translated. See the README.txt file in the project folder for installation and configuration information.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Configuring documentation display') . '</dt>';
      $output .= '<dd>' . t('After generating specially-formatted HTML output from the AsciiDoc tool chain, you can configure this module to display it in book form on the <a href="@config">Configuration page</a>. You will also need to grant users permission to view books.', array('@config' => url('admin/config/development/asciidoc'))) . '</dd>';
      $output .= '<dt>' . t('Editing source files') . '</dt>';
      $output .= '<dd>' . t('Users with appropriate permission can use an AsciiDoc editor on the site to edit the source files for the book, if a source file directory is configured for the book. Editing does not directly change any files, but users can download their changes locally.') . '</dd>';
      $output .= '<dt>' . t('Configuring blocks') . '</dt>';
      $output .= '<dd>' . t('This module provides several blocks. The AsciiDoc book list block provides links to all configured books, and can be displayed on any page. The AsciiDoc book navigation block provides navigation when it is displayed on a book page, and is inactive otherwise. The AsciiDoc source information block provides links to the project, issue filing, and editing on book pages, and is inactive otherwise. For translated books, the AsciiDoc languages block provides a jump list for translations on book pages.') . '</dd>';
      $output .= '</dl>';

      return $output;

    case 'admin/config/development/asciidoc/add':
    case 'admin/config/development/asciidoc/edit/%':
      $output = '<p>' . t('To enable patch file creation from the editor:') . '</p>';
      $items = array();
      $items[] = t('Configure the Source file directory.');
      if (!function_exists('xdiff_string_diff')) {
        $items[] = t('Install the PECL xdiff PHP package on your web server.');
      }
      $items[] = t('Choose the Patch option under Editor result below; it is only available if xdiff is installed.');
      $output .= '<ul><li>' . implode('</li><li>', $items) . '</li></ul>';

      $output .= '<p>' . t('If users cannot make patches, they can still edit and download the resulting text file. Note that patches are in unified diff format, relative to the files currently in the source directory, but they are not made using Git commands. They can be applied with the patch command, but not with git apply.') . '</p>';

      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function asciidoc_display_menu() {
  // Administrative pages.
  $items['admin/config/development/asciidoc'] = array(
    'title' => 'AsciiDoc configuration',
    'description' => 'Configure AsciiDoc to be displayed in the site',
    'page callback' => 'asciidoc_display_main_admin',
    'file' => 'asciidoc_display.admin.inc',
    'access arguments' => array('administer asciidoc'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/development/asciidoc/add'] = array(
    'title' => 'Add AsciiDoc book',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asciidoc_display_edit_form'),
    'file' => 'asciidoc_display.admin.inc',
    'access arguments' => array('administer asciidoc'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/development/asciidoc/edit/%'] = array(
    'title' => 'Edit AsciiDoc book',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asciidoc_display_edit_form', 5),
    'file' => 'asciidoc_display.admin.inc',
    'access arguments' => array('administer asciidoc'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/development/asciidoc/delete/%'] = array(
    'title' => 'Delete AsciiDoc book',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asciidoc_display_delete_form', 5),
    'file' => 'asciidoc_display.admin.inc',
    'access arguments' => array('administer asciidoc'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/development/asciidoc/clear_cache'] = array(
    'title' => 'Clear AsciiDoc book cache',
    'page callback' => 'asciidoc_display_clear_cache_page',
    'file' => 'asciidoc_display.admin.inc',
    'access arguments' => array('administer asciidoc'),
    'type' => MENU_CALLBACK,
  );

  // Book pages.
  $configs = asciidoc_display_load_all_configs(TRUE);
  foreach ($configs as $config) {
    if ($config['path']) {
      $items[$config['path']] = array(
        'title' => $config['title'],
        'page callback' => 'asciidoc_display_build_page',
        'access arguments' => array('access asciidoc pages'),
        'type' => MENU_CALLBACK,
        'file' => 'asciidoc_display.pages.inc',
      );

      $items['edit/' . $config['path']] = array(
        'title' => 'Edit source',
        'page callback' => 'asciidoc_display_edit_source',
        'access arguments' => array('edit asciidoc source'),
        'file' => 'asciidoc_display.pages.inc',
        'type' => MENU_CALLBACK,
      );
    }
  };

  return $items;
}

/**
 * Implements hook_permission().
 */
function asciidoc_display_permission() {
  return array(
    'access asciidoc pages' => array(
      'title' => t('View AsciiDoc pages'),
    ),
    'edit asciidoc source' => array(
      'title' => t('Use AsciiDoc source file editor'),
      'description' => t('Users will download edited files or diff files. They will not be saved or used in any way on the site.'),
    ),
    'administer asciidoc' => array(
      'title' => t('Administer AsciiDoc'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_library().
 */
function asciidoc_display_library() {
  $libs = array();

  $libs['asciidoc_display.edit'] = array(
    'title' => 'AsciiDoc Display Editing',
    'website' => 'https://drupal.org/project/asciidoc_display',
    'version' => '7.x-1.x',
    'js' => array(
      'sites/all/libraries/asciidoctor/dist/asciidoctor-all.min.js' => array('type' => 'file', 'group' => JS_LIBRARY),
      'sites/all/libraries/markitup/markitup/jquery.markitup.js' => array('type' => 'file', 'group' => JS_LIBRARY),
      drupal_get_path('module', 'asciidoc_display') .'/js/asciidoc_display.edit.js' => array('type' => 'file', 'group' => JS_LIBRARY),
    ),
    'css' => array(
       'sites/all/libraries/markitup/markitup/skins/markitup/style.css' => array('basename' => 'asciidoc_display/skins/style.css'),
     'sites/all/libraries/asciidoctor_images/asciidoc_display.edit.css' => array(),
    ),
    'dependencies' => array(
      array('system', 'jquery'),
    ),
  );

  $libs['asciidoc_display.nav'] = array(
    'title' => 'AsciiDoc Display Navigation',
    'website' => 'https://drupal.org/project/asciidoc_display',
    'version' => '7.x-1.x',
    'js' => array(
      drupal_get_path('module', 'asciidoc_display') . '/js/asciidoc_display.nav.js' => array('type' => 'file', 'group' => JS_LIBRARY),
    ),
    'css' => array(
      drupal_get_path('module', 'asciidoc_display') . '/js/asciidoc_display.nav.css' => array(),
    ),
    'dependencies' => array(
      array('system', 'jquery'),
    ),
  );

  return $libs;
}

/**
 * Implements hook_block_info().
 */
function asciidoc_display_block_info() {
  $blocks['book_nav'] = array(
    'info' => t('AsciiDoc book navigation'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['book_lang'] = array(
    'info' => t('AsciiDoc book language'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['page_edit'] = array(
    'info' => t('AsciiDoc source information'),
    'cache' => DRUPAL_CACHE_PER_ROLE | DRUPAL_CACHE_PER_PAGE,
  );

  $blocks['book_list'] = array(
    'info' => t('AsciiDoc book list'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function asciidoc_display_block_view($delta = '') {
  switch ($delta) {
    case 'book_nav':
      module_load_include('inc', 'asciidoc_display', 'asciidoc_display.pages');
      return asciidoc_display_navigation_block();

    case 'book_lang':
      module_load_include('inc', 'asciidoc_display', 'asciidoc_display.pages');
      return asciidoc_display_language_block();

    case 'book_list':
      // Leave this block in the main module, as it is suitable for display
      // on non-AsciiDoc pages.
      return asciidoc_display_book_list_block();

    case 'page_edit':
      module_load_include('inc', 'asciidoc_display', 'asciidoc_display.pages');
      return asciidoc_display_edit_block();
  }
}

/**
 * Generates the book list block.
 */
function asciidoc_display_book_list_block() {
  if (!user_access('access asciidoc pages')) {
    return array();
  }

  $configs = asciidoc_display_load_all_configs();

  $items = array();
  foreach ($configs as $config) {
    $items[] = l($config['title'], $config['path']);
  }

  if (!count($items)) {
    return array();
  }

  $build = array('list' => array(
    '#theme' => 'item_list',
    '#items' => $items,
  ));

  return array(
    'subject' => t('Book list'),
    'content' => $build,
  );
}

/**
 * Loads the desired configuration item, or creates a blank one.
 *
 * @param $config_id
 *   The ID of the item.
 *
 * @return
 *   A loaded or new configuration item.
 */
function asciidoc_display_load_config($config_id) {
  $configs = asciidoc_display_load_all_configs();

  $max = 0;
  foreach ($configs as $config) {
    if ($config['config_id'] == $config_id) {
      return $config;
    }
    $max = ($config['config_id'] > $max) ? $config['config_id'] : $max;
  }

  // If we get here, we need a new one.
  $default['config_id'] = $max + 1;
  return _asciidoc_display_add_config_defaults($default);
}

/**
 * Loads all configs, making sure all desired components are defined.
 *
 * @param $reset
 *   TRUE to reload.
 *
 * @return
 *   An array of all defined configs.
 */
function asciidoc_display_load_all_configs($reset = FALSE) {
  $configs = &drupal_static(__FUNCTION__);
  if (!$reset && $configs) {
    return $configs;
  }

  $old_configs = variable_get('asciidoc_configs', array());

  $configs = array();
  foreach ($old_configs as $config) {
    $configs[] = _asciidoc_display_add_config_defaults($config);
  }

  return $configs;
}

/**
 * Adds defaults to the supplied configuration array.
 */
function _asciidoc_display_add_config_defaults($config) {
  // Set up static defaults.
  $config += array(
    'config_id' => 0,
    'title' => '',
    'translated' => 0,
    'primary_language' => 'en',
    'path' => '',
    'dir' => '',
    'copyright_file' => '',
    'project_name' => '',
    'project_url' => '',
    'source_path' => '',
    'line_endings' => 'unix',
    'editor_result' => 'text',
    'issue' => '',
  );

  // Set up defaults based on other values, if not set.
  $config += array(
    'source_language' => $config['primary_language'],
  );

  return $config;
}

/**
 * Decides whether patches should be made or text files in the editor.
 *
 * @param array $config
 *   The current configuration.
 * @param bool $ignore_config
 *   TRUE (default) to ignore the settings in $config and only check for the
 *   PHP library being present (appropriate for settings editing). FALSE to
 *   check whether the PHP library is present, the source_file config setting
 *   is present, and the config has been set up to allow patches.
 *
 * @return bool
 *   TRUE if patches are allowed or should be used; FALSE if not.
 */
function asciidoc_display_patches_allowed($config = array(), $ignore_config = TRUE) {
  if (!function_exists('xdiff_string_diff')) {
    return FALSE;
  }

  if ($ignore_config) {
    return TRUE;
  }

  return isset($config['source_path']) && $config['editor_result'] == 'patch';
}

/**
 * Clears the page calculation caches for this module.
 */
function asciidoc_display_clear_calculation_caches() {
  cache_set('asciidoc_display_find_page', array());
  cache_set('asciidoc_display_list_languages', array());
  cache_set('asciidoc_display_parse_bare_html', array());
  drupal_static_reset('asciidoc_display_load_all_configs');
  drupal_static_reset('asciidoc_display_parse_bare_html');
  drupal_static_reset('asciidoc_display_find_page');
}
