<?php

/**
 * @file
 * Adds source file names to AsciiDoc text.
 *
 * Command-line arguments: Source directory, output directory. Use with care --
 * things in the output directory will be overwritten.
 *
 * Processes each .txt file in the source directory, by adding
 * @code
 * pass:[<remark>Source file: (filename)</remark>]
 * @endcode
 * after each 2nd-level and 3rd-level header found in the file. The resulting
 * files are written to the output directory with the same names.
 */

if (count($argv) < 3) {
  exit("Usage: php (scriptname) source output");
}

$source = $argv[1];
$output = $argv[2];

if (!is_dir($source) || !is_dir($output)) {
  exit("Source or output directories are missing");
}
if ($source == $output) {
  exit("Source and output directories are the same");
}

// Find all *.txt files in the source directory and process them.
if ($dh = opendir($source)) {
  while (($file = readdir($dh)) !== FALSE) {
    if (preg_match('|^[a-zA-Z_.\-]+\.txt$|', $file)) {
      if (!process_file($file, $source, $output)) {
        exit("Could not write to $file");
      }
    }
  }
  closedir($dh);
}

/**
 * Processes an AsciiDoc file to add the file name after each header.
 *
 * @param string $file
 *   Name of the file to process, without directory.
 * @param string $source
 *   Source directory. Input file is $source . '/' . $file.
 * @param string $output
 *   Output directory. Output file is $output . '/' . $file.
 * @param int[] depths
 *   (optional) Header depths to add file name to.
 *
 * @return int|FALSE
 *   The number of bytes written to the output file, or FALSE if there is an
 *   error.
 */
function process_file($file, $source, $output, $depths = array(2,3)) {
  $text = file_get_contents($source . '/' . $file);
  if (!$text) {
    return $text;
  }

  $addition = "pass:[<remark>Source file: $file</remark>]\n";

  // Make a regular expression to match level-N headers, which are '==' or
  // '===' or whatever at the start of a line.
  $match = array();
  foreach ($depths as $depth) {
    $match[] = preg_quote(str_repeat('=', $depth));
  }
  $match = array_filter($match);
  if (!count($match)) {
    return FALSE;
  }
  $match = '/^(' . implode('|', $match) . ')[^\=].*$/m';

  // Split the text at code block indicator lines: ----.
  // Only process the odd results, which will skip processing the code blocks.
  $codes = preg_split('/^----$/m', $text);
  for ($i = 0; $i < count($codes); $i += 2) {
    $codes[$i] = preg_replace($match, '$0' . "\n" . $addition, $codes[$i]);
  }
  $text = implode("----\n", $codes);
  return file_put_contents($output . '/' . $file, $text);
}
