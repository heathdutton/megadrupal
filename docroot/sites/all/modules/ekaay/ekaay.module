<?php

/**
 * @file
 * Provides an integration between ekaay and drupal.
 * @todo
 * Provide a hook_help.
 */


/**
 * Implements hook_menu().
 */
function ekaay_menu() {
  $items = array();
  $items['admin/config/people/ekaay'] = array(
    'title' => 'eKaay settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ekaay_admin_settings'),
    'access arguments' => array('administer sites'),
    'file' => 'ekaay.admin.inc',
  );

  // Callbacks
  $items['ekaay_check_reverse_token'] = array(
    'title' => 'Check the reverse token',
    'page callback' => 'ekaay_check_reverse_token',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'ekaay.pages.inc'
  );

  // Account entry
  $items['user/%user/ekaay'] = array(
    'title' => 'eKaay',
    'page callback' => 'ekaay_account_view',
    'page arguments' => array(1),
    'access arguments' => array('use ekaay'),
    'file' => 'ekaay.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}


/**
 * Implements hook_theme().
 */
function ekaay_theme() {
  return array(
    'ekaay_login' => array(
      'template' => 'ekaay_login',
      'variables' => array(
        'ekaay_url' => NULL,
        'build_id' => NULL
      ),
    ),
    'ekaay_register' => array(
      'template' => 'ekaay_register',
      'variables' => array(
        'ekaay_url' => NULL,
        'user_name' => NULL,
        'user' => NULL,
        'revtoken' => NULL,
      ),
    )
  );
}

/**
 * Preprocess function for ekaay_login.
 */
function template_preprocess_ekaay_login(&$vars) {
  $vars['ekaay_url'] = variable_get('ekaay_ekaay_url', '');
  $url = $vars['ekaay_url'] . '/ekaaycore/proxy/www';
  $session_id = $vars['build_id'];
  $vars['url'] = url($url, array('query' => array('pageidname' => 'form_build_id', 'pageidvalue' => $session_id)));
}

/**
 * Preprocess function for ekaay_register.
 */
function template_preprocess_ekaay_register(&$vars) {
  $ekaay_url = variable_get('ekaay_ekaay_url', '');
  $name = check_plain($vars['user']->name);
  $revoken = ekaay_user_get_revtoken($vars['user']);

  $query = array(
    'p' => 'register',
    'user' => $name,
    'revtoken' => $revoken,
    'register_add' => ''
  );

  $vars['url'] = url($ekaay_url . '/ekaaycore/proxy/www', array('query' => $query));
}

/**
 * Generate the revtoken of a certain user.
 */
function ekaay_user_get_revtoken($account) {
  // @todo Figure out the best way to generate a random token.
  $time = REQUEST_TIME;
  $token = drupal_substr(drupal_get_token($time), 0, 255);
  user_save($account, array('data' => array('ekaay_revtoken' => $token, 'ekaay_time' => $time)));
  return ekaay_user_token_wrapper($account->data['ekaay_revtoken']);
}

function ekaay_user_token_wrapper($token) {
  return strtr($token, array('-' => '', '_' => ''));
}

/**
 * Generate the revtoken by username.
 */
function ekaay_get_rev_info_by_name($name) {
  $account = user_load_by_name($name);
  $token = ekaay_user_token_wrapper($account->data['ekaay_revtoken']);
  $time = $account->data['ekaay_time'];
  return array($token, $time);
}

/**
 * Implements hook_form_FORM_ID_alter() for user_login().
 */
function ekaay_form_user_login_alter(&$form, &$form_state) {
  _ekaay_form_user_login_form_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter() for user_login_block().
 */
function ekaay_form_user_login_block_alter(&$form, &$form_state) {
  _ekaay_form_user_login_form_alter($form, $form_state);
}

/**
 * A generic alter function for all login forms.
 *
 * @see ekaay_form_user_login_block_alter
 * @see ekaay_form_user_login_alter
 */
function _ekaay_form_user_login_form_alter(&$form, &$form_state) {
  $form['ekaay_login'] = array(
    '#theme' => 'ekaay_login',
    '#weight' => 1000,
    '#build_id' => $form['form_build_id']['#value']
  );
  $validators = $form['#validate'];
  // Remove the default user/password validator and replace it with one
  // which works optional with ekaay.
  // @todo Actually it should be possible to append the validate function instead of removing
  $pos = array_search('user_login_authenticate_validate', $form['#validate']);
  $validators[$pos] = 'ekaay_user_login_authenticate_validate';
  $form['#validate'] = $validators;
}

/**
 * A validate handler on the login form. Check supplied username/password
 * against local users table or via ekaay. If successful, $form_state['uid']
 * is set to the matching user ID.
 */
function ekaay_user_login_authenticate_validate(&$form, &$form_state) {

  if (isset($_POST['ekaay'])) {
    $name = $form_state['values']['name'];
    $token = $form_state['values']['pass'];
    if (ekaay_check_token($name, $token)) {
      $account = user_load_by_name($name);
      // Only user with 'use ekaay' permission should be able to login
      if (user_access('use ekaay', $account) && $account) {
        $form_state['uid'] = $account->uid;
      }
      else {
        form_set_error(t('You cannot login with ekaay on this site.'));
      }
    }

  }
  else {
    // Fall back to the username/password functionality.
    user_login_authenticate_validate($form, $form_state);
  }
}


/**
 * Implements hook_permission().
 */
function ekaay_permission() {
  $perms = array();
  $perms['use ekaay'] = array(
    'title' => t('Allow to use ekaay for login'),
  );
  return $perms;
}

/**
 * Check the ekaay token on the ekaay server.
 *
 * @param string $name
 *   The username to check.
 * @param string $token
 *   The token to validate again, which is coming from ekaay.
 *
 * @return bool
 *   Is the ekaay token valid for this user.
 */
function ekaay_check_token($name, $token) {
  $url = variable_get('ekaay_ekaay_url', '');
  $url = url($url . '/ekaaycore/server/wwwsrv/_srv/checkToken.php', array('query' => array('user' => check_plain(urlencode($name)), 'token' => $token)));
  $data = drupal_http_request($url);
  $result = !empty($data->data) && $data->data == 'ok';

  return $result;
}
