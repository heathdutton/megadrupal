<?php

/**
 * @file
 * Install, update and uninstall functions for the highrise module.
 */

/**
 * Implements of hook_requirements().
 * @param type $phase
 * @return string
 */
function highrise_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time.
  $t = get_t();

  switch ($phase) {
    case 'install':
      $lib_path = drupal_get_path('module', 'highrise') . '/lib/HighriseAPI.class.php';

      if (!file_exists($lib_path)) {
        $requirements['lib'] = array(
          'title'       => $t('Highrise - API Class Library'),
          'description' => $t('Get the !highriseapiclass package and copy HighriseAPI.class.php to the lib directory inside module directory.',
                              array('!highriseapiclass' => l('HighriseAPI', 'https://github.com/ignaciovazquez/Highrise-PHP-Api/tree/master/lib', array('absolute' => TRUE)))),
          'severity'    => REQUIREMENT_ERROR,
          'value'       => $t('HighriseAPI.class.php file missing'),
        );
      }
      else {
        require_once($lib_path);
        $requirements['lib'] = array(
          'title'       => $t('Highrise - API Class Library'),
          'severity'    => REQUIREMENT_OK,
          'value'       => _get_file_phpdoc_version($lib_path),
        );
      }
      break;
  }
  return $requirements;
}

/**
 * Helper function to get PHPDoc @version tag from a file
 */
function _get_file_phpdoc_version($lib_path) {
  $version = 'unknown';
  $needle  = '@version ';

  if (file_exists($lib_path)) {
    $fp = @fopen($lib_path, 'r');
    if ($fp) {
      while (!feof($fp)) {
        $occurence = stristr(fgets($fp), $needle);
        if ($occurence) { // false if stristr found nothing
          return rtrim(drupal_substr($occurence, drupal_strlen($needle)));
        }
      }
    }
  }

  return $version;
}

/**
 * Implements hook_schema().
 */
function highrise_schema() {
  $schema = array();
  $schema['highrise_fields'] = array(
    'description' => 'Table for storing description of highrise fields.',
    'fields' => array(
      'hid' => array(
        'description' => 'Highrise field identifier.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Name of highrise field.',
        'type' => 'varchar',
        'length' => 255,
      ),
      'description' => array(
        'description' => 'Description of the highrise field.',
        'type' => 'varchar',
        'length' => 255,
      ),
    ),
    'primary key' => array('hid'),
  );

  $schema['highrise_webforms'] = array(
    'description' => 'Table for storing webforms that are integrated with highrise',
    'fields' => array(
      'mid' => array(
        'description' => 'Highrise webform mapping identifier.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => 'Webform identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Name of the mapping.',
        'type' => 'varchar',
        'length' => 255,
      ),
    ),
    'primary key' => array('mid'),
  );

  $schema['highrise_mappings'] = array(
    'description' => 'Table for storing mappings between webform fields and highrise fields.',
    'fields' => array(
      'mid' => array(
        'description' => 'Highrise webform mapping identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'cid' => array(
        'description' => 'Webform component identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'hid' => array(
        'description' => 'Highrise field identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'mid' => array('mid'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function highrise_install() {
  // Adds default highrise fields to mapping
  db_query("INSERT INTO {highrise_fields} (hid, name, description)
  VALUES (1, 'first-name', 'First Name'),
  (2, 'last-name', 'Last Name'),
  (3, 'title', 'Title'),
  (4, 'background', 'Background'),
  (5, 'email-address', 'Email Address'),
  (6, 'company-name', 'Company name'),
  (7, 'phone-number', 'Phone number')");
}

/**
 * Implements hook_uninstall().
 */
function highrise_uninstall() {
  variable_del('highrise_account');
  variable_del('highrise_token');
}

