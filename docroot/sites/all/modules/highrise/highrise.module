<?php

require_once("lib/HighriseAPI.class.php");

/**
 * Implements hook_menu().
 */
function highrise_menu() {
  $items['admin/config/services/highrise'] = array(
    'title' => 'Highrise',
    'description' => 'Configure Highrise webform integration',
    'page callback' => 'drupal_get_form',
    'file' => 'highrise.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('highrise_admin_settings'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/config/services/highrise/settings'] = array(
    'title' => 'Settings',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK
  );
  $items['admin/config/services/highrise/mapping'] = array(
    'title' => 'Webform mapping',
    'description' => 'Configure mapping of webformfields',
    'page callback' => 'highrise_configure',
    'file' => 'highrise.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/config/services/highrise/create'] = array(
    'title' => 'Create Mapping',
    'description' => 'Configure Highrise field Mapping',
    'page callback' => 'drupal_get_form',
    'file' => 'highrise.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('highrise_mapping'),
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/config/services/highrise/autocomplete'] = array(
    'page callback' => 'highrise_autocomplete',
    'file' => 'highrise.admin.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['highrise/delete/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('highrise_mapping_delete', 2),
    'file' => 'highrise.admin.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['admin/config/services/highrise/fields'] = array(
    'title' => 'Highrise fields',
    'description' => 'Available Highrise fields',
    'page callback' => 'highrise_fields',
    'file' => 'highrise.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK
  );
  $items['admin/config/services/highrise/edit/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('highrise_mapping_edit', 5),
    'file' => 'highrise.admin.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 *
 * Implements hook_form_alter().
 *
 */
function highrise_form_alter(&$form, &$form_state, $form_id) {
  // Check for webforms mapped with the highrise module.
  if (isset($form['#node']) && $form['#node']->type == 'webform') {
    $query = db_select('highrise_webforms', 'w');
    $query->fields('w', array('nid'));
    $query->distinct();
    $result = $query->execute();
    while ($row = $result->fetchAssoc()) {
      if ($form_id == 'webform_client_form_' . $row['nid']) {
        // pass the url of the current page
        $form['#get_path'] = drupal_get_path_alias($_GET['q']);
        $form['#submit'][] = 'highrise_add_contact';
      }
    }
  }
}

/**
 * Get mapped cid for given webform
 * @param type $nid
 * @param type $hid
 * @return type
 */
function highrise_getmail_cid($nid, $hid) {
  $cid = variable_get('highrise_webform_cid_' . $nid , 0);
  if ($cid) {
    return $cid;
  }
  $query = db_select('highrise_webforms ', 'hw');
  $query->join('highrise_mappings  ' , 'hm', 'hw.mid = hm.mid');
  $query->condition('hw.nid', $nid);
  $query->condition('hm.hid', $hid);
  $query->fields('hm', array('cid'));
  $result = $query->execute();
  while ($rows = $result->fetchAssoc()) {
    $cid = $rows['cid'];
    variable_set('highrise_webform_cid_' . $nid , $cid);
  }
  return $cid;
}

/**
 * Get highrise email hid
 * @return type
 */
function highrise_getmail_hid() {
  $hid = variable_get('highrise_email_hid', 0);
  if ($hid) {
    return $hid;
  }
  $query = db_select('highrise_fields ' , 'hf');
  $query->condition('hf.name', 'email-address');
  $query->fields('hf', array('hid'));
  $result = $query->execute();
  while ($rows = $result->fetchAssoc()) {
    $hid = $rows['hid'];
    variable_set('highrise_email_hid', $hid);
  }
  return $hid;
}


/**
 * Add a contact to highrise.
 */
function highrise_add_contact($form, &$form_state) {
  // Create highriseapi object.
  $hr = new HighriseAPI();
  $hr->debug = FALSE;
  $hr->setAccount(variable_get('highrise_account', ''));
  $hr->setToken(variable_get('highrise_token', ''));
  $formid = $form['#node']->nid;
  // Push info to highrise, if unique email is presented and it is configured to be checked at highrise.
  $validate_unique_email = variable_get('highrise_unique_mail', 0);
  if ($validate_unique_email) {
    $email_hid = highrise_getmail_hid();
    $cid = highrise_getmail_cid($formid, $email_hid);
    if ($cid > 0) {
      $email = trim($form_state['values']['submitted'][$cid]);
      //check for email presence and stop pushing data
      $highrise_data = ($email) ? $hr->findPeopleByEmail($email) : '';
      if (isset($highrise_data[0]->id)) {
        return '';
      }
    }
  }

  $query = db_select('highrise_mappings', 'm');
  $query->join('highrise_webforms', 'w', 'm.mid = w.mid'); // JOIN with highrise_mappings
  $query->condition('w.nid',  $formid);
  $query->fields('m', array('mid', 'cid', 'hid'));
  $result = $query->execute();
  $new_person = new HighrisePerson($hr);
  while ($row = $result->fetchAssoc()) {
    switch ($row['hid']) {
      case 1:
        $first_name = $form_state['values']['submitted'][$row['cid']];
        $new_person->setFirstName($first_name);
        break;
      case 2:
        $last_name = $form_state['values']['submitted'][$row['cid']];
        $new_person->setLastName($last_name);
        break;
      case 3:
        $title = $form_state['values']['submitted'][$row['cid']];
        $new_person->setTitle($title);
        break;
      case 4:
        $background = $form_state['values']['submitted'][$row['cid']];
        $background .= '###Drupal Webform URL - ' . $form['#get_path'] . '###';
        $new_person->setBackground($background);
        break;
      case 5:
        $email = $form_state['values']['submitted'][$row['cid']];
        $new_person->addEmailAddress($email);
        break;
      case 6:
        $company_name = $form_state['values']['submitted'][$row['cid']];
        $new_person->setCompanyName($company_name);
        break;
      case 7:
        $phone_number = $form_state['values']['submitted'][$row['cid']];
        $new_person->addPhoneNumber($phone_number, "work");
        break;
    }
  }
  $tag = variable_get('highrise_tag', '');
  if (!empty($tag)) {
    // tag to be associated with the contact on highrise
    $new_person->addTag(variable_get('highrise_tag', ''));
  }
  $new_person->save();
  $new_person = NULL;
}

