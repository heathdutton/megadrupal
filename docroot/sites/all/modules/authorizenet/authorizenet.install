<?php
/**
 * @file
 * Install, update and uninstall functions for the authorizenet module.
 *
 */


/**
 * Implements hook_schema().
 */
function authorizenet_schema() {
  return array(
    'authorizenet_login' => array(
      'description' => 'Maintain a list of Authorize.Net logins.',
      'fields' => array(
        'id' => array(
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'Reference id for this payment profile.',
        ),
        'uid' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'description' => 'The owner of this account, if applicable.',
        ),
        'name' => array(
          'type' => 'varchar',
          'length' => '25',
          'not null' => TRUE,
          'description' => 'The Authorize.Net login name.',
        ),
        'transaction_key' => array(
          'type' => 'varchar',
          'length' => '16',
          'not null' => TRUE,
          'description' => 'The Authorize.Net transaction key.',
        ),
        'developer' => array(
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'default' => 0,
          'description' => 'Whether this account is an Authorize.Net developer account, which uses a different server.',
        ),
      ),
      'primary key' => array('id'),
    ),
    'authorizenet_method_login' => array(
      'description' => 'Associate Authorize.Net logins to payment methods',
      'fields' => array(
        'pmid' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'Reference to the pay_method item',
        ),
        'authorizenet_login_id' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'Reference to the authorizenet_login entry',
        ),
      ),
      'primary key' => array('pmid', 'authorizenet_login_id'),
    ),
    'authorizenet_profile' => array(
      'description' => 'Store user profile entries for Authorize.Net.',
      'fields' => array(
        'id' => array(
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'Reference id for this payment profile.',
        ),
        'authorizenet_login_id' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'Reference to a specific Authorize.Net login entry',
        ),
        'uid' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'User ID.',
        ),
        'mail' => array(
          'type' => 'varchar',
          'length' => 64,
          'not null' => FALSE,
          'default' => '',
          'description' => 'User\'s email address.',
        ),
        'description' => array(
          'type' => 'varchar',
          'length' => 64,
          'not null' => FALSE,
          'default' => '',
          'description' => 'User-defined name for this payment profile.',
        ),
        'authorizenet_id' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'Payment gateway assigned ID associated with the customer profile.',
        ),
      ),
      'primary key' => array('id'),
      'unique keys' => array(
        'authorizenet_login_profile_id' => array('authorizenet_login_id', 'authorizenet_id'),
      ),
    ),
    'authorizenet_payment_profile' => array(
      'description' => 'Store payment profiles for Authorize.Net profiles.',
      'fields' => array(
        'id' => array(
          'type' => 'serial',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'Reference id for this payment profile.',
        ),
        'authorizenet_profile_id' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'Reference to a specific Authorize.Net profile',
        ),
        'authorizenet_id' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'Payment gateway assigned ID associated with the payment profile.',
        ),
        'description' => array(
          'type' => 'varchar',
          'length' => 64,
          'not null' => FALSE,
          'default' => '',
          'description' => 'User-defined name for this payment profile.',
        ),
        'account_type' => array(
          'type' => 'varchar',
          'length' => 64,
          'not null' => FALSE,
          'default' => '',
          'description' => 'Account type (e.g. check or credit card).',
        ),
        'account_mask' => array(
          'type' => 'varchar',
          'length' => 64,
          'not null' => FALSE,
          'default' => '',
          'description' => 'A masked version of the account number or description',
        ),
        'expiration' => array(
          'type' => 'int',
          'not null' => FALSE,
          'description' => 'Expiration date',
        ),
      ),
      'primary key' => array('id'),
      'unique keys' => array(
        'authorizenet_payment_profile_id' => array('authorizenet_profile_id', 'authorizenet_id'),
      ),
    ),
    'authorizenet_pay_activity' => array(
      'description' => 'Payment profile activities handled by the Payment API.',
      'fields' => array(
        'paid' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'Reference id for a pay_activity entry.',
        ),
        'authorizenet_payment_profile_id' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'description' => 'Reference id for a payment profile.',
        ),
      ),
      'primary key' => array('paid', 'authorizenet_payment_profile_id'),
    ),
  );
}

/**
 * Install the initial schema version and migrate existing data.
 */
function authorizenet_update_6001() {
  $ret = drupal_install_schema('authorizenet');

  // Burp the schema so that drupal_write_record will work correctly.
  drupal_get_schema(NULL, TRUE);

  $logins = array();
  foreach (pay_method_list() as $method) {
    if ($method->handler() == 'pay_method_gateway_authorizenet') {

      // Retrieve and remove the credentials from the pay_method proper.
      $login_values = array(
        'name' => $method->authorizenet_login,
        'transaction_key' => $method->authorizenet_key,
        'developer' => $method->authorizenet_developer,
      );

      unset($method->authorizenet_login);
      unset($method->authorizenet_key);
      unset($method->authorizenet_developer);

      // Save a record for this login account.
      $name = $login_values['name'];
      if (!isset($logins[$name])) {
        $logins[$name] = authorizenet_login_load();
        $logins[$name]->save($login_values);
      }

      // Set the login's id to the payment method.
      $method->authorizenet_login_id = $logins[$name]->id;

      // Save the result.
      $method->save();
    }
  }
  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
  return t('TODO Add a descriptive string here to show in the UI.') /* $ret */;
}

/**
 * Install the schema for CIM.
 */
function authorizenet_update_6002() {
  $tables = array('authorizenet_profile', 'authorizenet_payment_profile');
  $ret = array();
  foreach ($tables as $table) {
    if (!db_table_exists($table)) {
      $schema = drupal_get_schema($table, TRUE);
      db_create_table($table, $schema);
    }
  }
  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
  return t('TODO Add a descriptive string here to show in the UI.') /* $ret */;
}

/**
 * Install the schema for payment profile activity tracking.
 */
function authorizenet_update_6003() {
  $tables = array('authorizenet_pay_activity');
  $ret = array();
  foreach ($tables as $table) {
    if (!db_table_exists($table)) {
      $schema = drupal_get_schema($table, TRUE);
      db_create_table($table, $schema);
    }
  }
  // hook_update_N() no longer returns a $ret array. Instead, return
  // nothing or a translated string indicating the update ran successfully.
  // See http://drupal.org/node/224333#update_sql.
  return t('TODO Add a descriptive string here to show in the UI.') /* $ret */;
}
