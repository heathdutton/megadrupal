<?php
/**
 * @file
 * Creates an entity type of Slack Entity.
 */

/**
 * Implements hook_entity_info().
 */
function slack_entity_entity_info() {
  $info['slack_entity'] = array(
    // A human readable label to identify our entity.
    'label' => t('Slack Entity'),
    // The controller for our Entity - extends the Drupal core controller.
    'controller class' => 'SlackEntityController',
    // The table defined in hook_schema()
    'base table' => 'slack_entity',
    // Returns the uri elements of an entity
    'uri callback' => 'slack_entity_uri',
    // Fieldable that we can attach fields to it - the core functionality will
    // do the heavy lifting here.
    'fieldable' => TRUE,
    // The unique key of our base table.
    'entity keys' => array(
      'id' => 'seid',
    ),
    // FALSE disables caching -  caching functionality is handled by Drupal core
    'static cache' => TRUE,
    // Attach bundles - i.e. alternative configurations of fields associated with a main entity.
    'bundles' => array(
      'slack_entity' => array(
        'label' => 'Slack Entity',
        // Information below is used by the Field UI - they "attach" themselves here and lets us
        // do the standard field management that all the core entities enjoy.
        'admin' => array(
          'path' => 'admin/structure/slack_entity/manage',
          'access arguments' => array('administer slack_entity'),
        ),
      ),
    ),
    // module its from
    'module' => 'slack_entity',
    // View modes allow entities to be displayed differently based on context. We simply have one option
    // here but an alternative would be to have a Full and Teaser mode.
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' =>  FALSE,
      ),
    ),
    // access callback when entity invoked as object
    'access callback' => 'slack_entity_access',
    'creation callback' => 'slack_entity_create',
    'save callback' => 'slack_entity_save',
  );
  // Support entity cache module.
  $info['slack_entity']['field cache'] = FALSE;
  $info['slack_entity']['entity cache'] = TRUE;

  return $info;
}

/**
 * Fetch a slack_entity object.
 *
 * Make sure that the wildcard you choose in the slack_entity
 * entity definition fits the function name here.
 *
 * @param $slack_entity_id
 *   Integer specifying the slack_entity entity id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $slack_entity object or FALSE if it cannot be loaded.
 *
 * @see slack_entity_load_multiple()
 */
function slack_entity_load($slack_entity_id = NULL, $reset = FALSE) {
  $slack_entity_ids = (isset($slack_entity_id) ? array($slack_entity_id) : array());
  $slack_entity = slack_entity_load_multiple($slack_entity_ids, array(), $reset);
  return $slack_entity ? reset($slack_entity) : FALSE;
}

/**
 * Loads multiple slack_entity entities based on certain conditions
 */
function slack_entity_load_multiple($slack_entity_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('slack_entity', $slack_entity_ids, $conditions, $reset);
}

/**
 * Implementing the uri callback defined
 */
function slack_entity_uri($slack_entity) {
  return array(
    'path' => 'slack_entity/' . $slack_entity->seid,
  );
}

/**
 * Implements hook_menu().
 */
function slack_entity_menu() {

  // The page to view our entities - needs to follow what
  // is defined in slack_entity_uri and will use load_slack_entity to retrieve
  // the necessary entity info.
  $items['slack_entity/%slack_entity'] = array(
    'title callback' => 'slack_entity_page_title',
    'title arguments' => array(1),
    'page callback' => 'slack_entity_page_view',
    'page arguments' => array(1),
    'access callback' => 'slack_entity_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function slack_entity_permission() {
    return array(
    'view slack_entity' => array(
      'title' => t('View Slack Entitys'),
    ),
    'create slack_entity' => array(
      'title' => t('Create Slack Entitys'),
    ),

  );
}


/**
 * Callback for title
 */
function slack_entity_page_title($slack_entity) {
  return $slack_entity->slack_entity;
}

/**
 * Callback for displaying the entity
 */
function slack_entity_page_view($slack_entity, $view_mode = 'full') {
  $slack_entity->content = array();
  // Build fields content - this where the FieldAPI really comes in to play. The task
  // is relatively trivial for us - it all gets taken care of by Drupal core.
  field_attach_prepare_view('slack_entity', array($slack_entity->seid => $slack_entity), $view_mode);
  entity_prepare_view('slack_entity', array($slack_entity->seid => $slack_entity));
  $slack_entity->content += field_attach_view('slack_entity', $slack_entity, $view_mode);
  drupal_set_title($slack_entity->slack_entity);

  return $slack_entity->content;
}

/**
 * Creates an slack_entity entity for us.
 *
 * Simply intializing the main vars and sending us to a form.
 */
function slack_entity_add() {
  $slack_entity = slack_entity_create();
  return drupal_get_form('slack_entity_add_form', $slack_entity);
}


/**
 * We save the slack_entity entity by calling the controller.
 */
function slack_entity_save(&$slack_entity) {
  return entity_get_controller('slack_entity')->save($slack_entity);
}

/**
 * Implements hook_help().
 */
function slack_entity_help($path, $arg) {
  switch ($path) {
    case 'admin/help#slack_entity':
      return "<p>" . t('Once you have activated the module you can configure your entity bundle by visiting "admin/structure/slack_entity/manage"') . "</p>";
  }
}

/**
 * Determines whether the given user has access to an Slack Entity.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'.
 * @param $item
 *   Optionally an entity item. If nothing is given, access for all
 *   items is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function slack_entity_access($op, $item = NULL, $account = NULL) {
  // if no item is set, and not admin rights block access
  if (!isset($item)) {
    return FALSE;
  }
  // check for op rights
  if (user_access($op . ' slack_entity', $account)) {
    return TRUE;
  }
  // they didn't have viewer rights
  return FALSE;
}

/**
 * SlackEntityController extends the DrupalDefaultEntityController
 */
class SlackEntityController extends EntityCacheDefaultEntityController{

 /**
  * Saves the slack_entity entity mathching custom fields via drupal_write_record()
  */
  public function save($slack_entity) {
    // update vs insert
    if (!isset($slack_entity->seid)) {
      drupal_write_record('slack_entity', $slack_entity);
    }
    else {
      drupal_write_record('slack_entity', $slack_entity, 'seid');
    }
    field_attach_insert('slack_entity', $slack_entity);
    module_invoke_all('entity_insert', $slack_entity, 'slack_entity');
    return $slack_entity;
  }
}

/**
 * Implements hook_entity_property_info().
 */
function slack_entity_entity_property_info() {
  $info = array();
  // Add meta-data about the basic properties.
  $properties = &$info['slack_entity']['properties'];
  $properties['seid'] = array(
    'label' => t("Slack Entity ID"),
    'type' => 'integer',
    'description' => t("The unique integer ID of the Slack Entity."),
    'schema field' => 'seid',
  );
    $properties['created'] = array(
    'label' => t("Created Date"), // does this need to be a date? It is an int type in the define
    'type' => 'integer',
    'description' => t("The Created Date of the Slack Entity."),
    'schema field' => 'created',
  );
  $properties['team_id'] = array(
    'label' => t("Team ID"),
    'type' => 'text',
    'description' => t("team id someone would enter, this is a UUID"),
    'schema field' => 'team_id',
  );
  $properties['channel_id'] = array(
    'label' => t("Channel ID"),
    'type' => 'text',
    'description' => t("channel id someone would enter, this is a UUID"),
    'schema field' => 'channel_id',
  );
  $properties['channel_name'] = array(
    'label' => t("Channel Name"),
    'type' => 'text',
    'description' => t("Channel Name someone would enter, this is a UUID"),
    'schema field' => 'channel_name',
  );
  $properties['timestamp'] = array(
    'label' => t("Time Stamp"), // does this need to be a date? It is an int type in the define
    'type' => 'integer',
    'description' => t("The Created Date of the Slack Entity."),
    'schema field' => 'timestamp',
  );
  $properties['user_id'] = array(
    'label' => t("User ID"),
    'type' => 'text',
    'description' => t("User id someone would enter, this is a UUID"),
    'schema field' => 'user_id',
  );
  $properties['user_name'] = array(
    'label' => t("User Name"),
    'type' => 'text',
    'description' => t("team id someone would enter, this is a UUID"),
    'schema field' => 'user_name',
  );
  $properties['text'] = array(
    'label' => t("Text"),
    'type' => 'text',
    'description' => t("The message from slack"),
    'schema field' => 'text',
  );
  $properties['trigger_word'] = array(
    'label' => t("Trigger Word"),
    'type' => 'text',
    'description' => t("Trigger word someone would enter, this is a UUID"),
    'schema field' => 'trigger_word',
  );
  return $info;
}
/**
 * Callback to build an Slack Entity
 */
function slack_entity_create($values = array()) {
  // include uuid functions
  $slack_entity = (object) array(
    'type' => 'slack_entity',
  );
  // Apply the given values.
  foreach ($values as $key => $value) {
    $slack_entity->{$key} = $value;
  }
  return $slack_entity;
}