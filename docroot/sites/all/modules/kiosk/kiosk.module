<?php
// $Id: kiosk.module,v 1.3.2.1 2010/03/05 20:50:05 tylerwalts Exp $

/**
 * Implements hook_init().
 */
function kiosk_init() {
  if (kiosk_is_kiosk()) {
    // We need a separate page cache DB prefix for the kiosk mode
    global $db_prefix;
    if (!is_array($db_prefix)) {
      $db_prefix = array('default' => $db_prefix);
    }
    if (!isset($db_prefix['kiosk_cache_page'])) {
      $db_prefix['kiosk_cache_page'] = '';
    }
    $db_prefix['kiosk_cache_page'] = $db_prefix['default'] . $db_prefix['kiosk_cache_page'] . 'kiosk_';
  }
}



/**
 * Implements hook_cron().
 */
function kiosk_cron() {
  // TODO: hook into the Drupal cache clearing process instaed of cron
  cache_clear_all('*', 'kiosk_cache_page', TRUE);
}



/**
 * Implements hook_permission().
 */
function kiosk_permission() {
  return array(
    'administer my module' =>  array(
      'title' => t('Administer Kiosk Settings'),
      'description' => t('Perform administration tasks for setting up Kiosks.'),
    ),
  );
}



/**
 * Implements hook_menu().
 */
function kiosk_menu() {
  $items = array();
    $items['admin/config/kiosk'] = array(
      'title' => 'Kiosk Mode',
      'description' => 'Configure what clients will be considered "kisok mode".',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('kiosk_configure'),
      'type' => MENU_NORMAL_ITEM,
      'access arguments' => array('administer kiosk settings'),
    );
    $items['admin/config/kiosk/ip'] = array(
      'title' => 'Set Kiosks by IP',
      'description' => 'Configure what clients will be considered "kisok mode".',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('kiosk_configure'),
      'access arguments' => array('administer kiosk settings'),
    );
    $items['admin/config/kiosk/cookie'] = array(
      'title' => 'Set Kiosk by Cookie',
      'description' => 'Set a cookie on the current computer to force it into kiosk mode, regardless of IP address.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('kiosk_configure_cookie'),
      'type' => MENU_LOCAL_TASK,
      'access arguments' => array('administer kiosk settings'),
    );
  return $items;
}



/**
 * Form builder; Configure kiosk computers by cookie.
 *
 * @ingroup forms
 * @see kiosk_configure_cookie_submit()
 */
function kiosk_configure_cookie() {
  $form = array();
  $form['description'] = array(
    '#type' => 'item',
    '#value' => t('To set the computer you are currently using to kiosk mode using a cookie, click the button below.  The system will remain flagged for kiosk mode for one year or until cookies are cleared.'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Set this computer to kiosk mode.'),
  );
  return $form;
}


/**
 * Submit Handler for cookie form
 *
 */
function kiosk_configure_cookie_submit($form, &$form_state) {
  $expire = '0';
  setcookie('drupal_kiosk_mode', 1, $expire, '/');
  drupal_set_message(t('This computer has been set to kiosk mode.  Clear your cookies in order to reset it.'));
}



/**
 * Form builder; Configure kiosk computers by IP address.
 *
 * @ingroup forms
 * @see system_settings_form()
 */
function kiosk_configure() {
  $form = array();
  $form['kiosk_ip_addresses'] = array(
    '#type' => 'textarea',
    '#title' => t('Kiosk IP Addresses'),
    '#description' => t('Specify IP addresses here that should be always be flagged for "kiosk mode".  Separate each IP address with a line break or comma.  Note that this is the IP address that Drupal sees; it will be affected by firewalls, NAT routers, proxies, etc.'),
    '#default_value' => variable_get('kiosk_ip_addresses', ''),
  );
  return system_settings_form($form);
}



/**
 * Determine if the site should render in kiosk mode or not.
 *
 * @return TRUE or FALSE
 */
function kiosk_is_kiosk() {
  $ip_addresses = kiosk_parse_list_values(variable_get('kiosk_ip_addresses', ''));
  if (!isset($_COOKIE['drupal_kiosk_mode'])){
	$cookie_value = 0;
  }else{
  	$cookie_value = $_COOKIE['drupal_kiosk_mode'];	
  }
  return (in_array(ip_address(), $ip_addresses) || 1 == $cookie_value);
}



/**
 * Parse a string into an array, using either newlines or commas as a delimiter.
 *
 * @param array $list
 * @return string
 */
function kiosk_parse_list_values($list) {
  return array_filter(array_map('trim', explode(',', str_replace("\n", ',', $list))));
}



/**
 * Hook into the theme preprocess function and make the $kiosk variable available
 *
 */
function kiosk_preprocess(&$vars) {
  // This adds the variable $kiosk to the variables available to themers
  $vars['kiosk'] = kiosk_is_kiosk();
}



