<?php

/**
 * Implements hook_preprocess_html().
 */
function pdf_version_preprocess_html(&$variables) {
  // Add a class to let themers hide things for the PDF version.
  if (isset($_GET['pdf_version'])) {
    $variables['attributes_array']['class'][] = 'pdf-version';
  }
}

/**
 * Implements hook_menu().
 */
function pdf_version_menu() {
  $items = array();

  $items['pdf-version/%pdf_version_url'] = array(
    'page callback' => 'pdf_version_output',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'load arguments' => array('%map'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/user-interface/pdf-version'] = array(
    'title' => 'PDF Version',
    'description' => 'Configuration for the PDF version module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pdf_version_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'pdf_version.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function pdf_version_theme($existing, $type, $theme, $path) {
  return array(
    'pdf_version_phantomjs_script' => array(
      'template' => 'pdf-version-phantomjs-script',
      'variables' => array(
        'path' => NULL,
        'url' => NULL,
        'cookies' => array(),
        'paper_size' => array(),
        'viewport_size' => array(),
      ),
    ),
  );
}

/**
 * Helper to get a variable to keep the defaults in one place.
 */
function pdf_version_variable_get($variable) {
  // Our defaults.
  $default_variables = array(
    'phantomjs_binary' => '/usr/bin/phantomjs',
    'ignore_ssl_errors' => FALSE,
  );

  // Avoid PHP warnings about undefined indexes.
  $default_variables += array($variable => NULL);

  return variable_get('pdf_version_' . $variable, $default_variables[$variable]);
}

/**
 * Loader function for the pdf version url.
 */
function pdf_version_url_load($arg, $path = array()) {
  // Remove 'pdf-version' part.
  array_shift($path);

  // Lets determine if we have a prefix from our languages.
  if (module_exists('locale') && function_exists('language_url_split_prefix')) {
    // Get our language list to pass into our url splitter.
    $languages = language_list();
    // Turn the path into a string so we can then remove our prefix.
    $path_string = implode('/', $path);
    $language_path = language_url_split_prefix($path_string, $languages);
    // Separate out the returned path and language.  We should always
    // have two indexes, the first is the language, second is the path.
    $language = $language_path[0] ? $language_path[0]->language : '';
    $final_path = $language_path[1];
    // Lets find our path based on the current translation.
    return drupal_get_normal_path($final_path, $language);
  }

  // Now lets buld our path to return our system path,
  return drupal_get_normal_path(implode('/', $path));
}

/**
 * Page callback for the pdf version
 */
function pdf_version_output($path) {
  // Generate the script for PhantomJS.
  $script_render = array(
    '#theme' => 'pdf_version_phantomjs_script',
    '#path' => $path,
    '#url' => url($path, array('absolute' => TRUE, 'query' => array('pdf_version' => TRUE) + drupal_get_query_parameters())),
    '#cookies' => array(
      array(
        'name' => session_name(),
        'value' => session_id(),
        'domain' => $GLOBALS['cookie_domain'],
      ),
    ),
    '#paper_size' => array(
      'format' => 'A4',
      'orientation' => 'portrait',
      'border' => '1cm',
    ),
    '#viewport_size' => array(
      'width' => 1920,
      'height' => 1080,
    ),
  );

  // Render the script to a string we can pass to PhantomJS.
  $script = render($script_render);

  // Descriptors for the PhantomJS process.
  $descriptors = array(
    0 => array('pipe', 'r'), // stdin.
    1 => array('pipe', 'w'), // stdout.
    2 => array('pipe', 'w'), // stderr.
  );

  // Start an array for the arguments we'll pass to PhantomJS.
  $phantomjs_args = array();

  // Ignore SSL errors for development purposes.
  if (pdf_version_variable_get('ignore_ssl_errors')) {
    $phantomjs_args[] = '--ignore-ssl-errors=true';
  }

  // Allow other modules to alter these.
  drupal_alter('pdf_version_phantomjs_args', $phantomjs_args, $path);

  // The script "file" - we send the data via stdin.
  $phantomjs_args[] = '/dev/stdin';

  // Get the binary path and generate a safe string for the arguments.
  $phantomjs_binary = pdf_version_variable_get('phantomjs_binary');
  $phantomjs_safe_args = implode(' ', array_map('escapeshellarg', $phantomjs_args));

  // Open the phantom js binary - act like a 404 if we can't open the binary.
  $pipes = array();
  $phantomjs = proc_open($phantomjs_binary . ' ' . $phantomjs_safe_args, $descriptors, $pipes);
  if (!is_resource($phantomjs)) {
    return MENU_NOT_FOUND;
  }

  // Send the script to PhantomJS.
  fwrite($pipes[0], $script);
  fclose($pipes[0]);

  // And get the response from PhantomJS.
  $result = stream_get_contents($pipes[1]);
  fclose($pipes[1]);

  // Close stderr and the process.
  proc_close($phantomjs);

  // Spit out the output we got.
  header('Content-type: application/pdf');
  print $result;
  exit();
}
