<?php

/**
 * @file
 * Entity cache flusher
 */

/**
 * Api function to add a submit handler to a form.
 *
 * @param $form
 *   The form to attach the submit handler on.
 * @pararm $entity_type
 *   The name of the entity_type.
 * @param $id
 *   An id or a collection of id's.
 */
function entitycache_flush_add_submit_handler(&$form, $entity_type, $id) {

  if (!is_array($id)) {
    $id = array($id);
  }

  $form['#submit'][] = 'entitycache_flush_submit';
  $form['#entitycache_flush_entity_type'] = $entity_type;
  $form['#entitycache_flush_entity_id'] = $id;
}

/**
 * Entity cache flush submit handler.
 */
function entitycache_flush_submit($form, &$form_state) {
  entitycache_flush_clear_cache($form['#entitycache_flush_entity_type'], $form['#entitycache_flush_entity_id']);
}

/**
 * Api function to clear entity cache tables.
 *
 * @param $entity_type
 *   The name of the entity type.
 *
 * @param $ids
 *   A collection of entity id's.
 *
 * @param $wildcard
 *   If $wildcard is TRUE, cache IDs starting with $ids are deleted in
 *   addition to the exact cache ID specified by $ids. If $wildcard is
 *   TRUE and $ids is '*' then the entire entity cache table is emptied.
 *
 */
function entitycache_flush_clear_cache($entity_type, $ids = NULL, $wildcard = NULL) {

  $table = 'cache_entity_' . $entity_type;

  if (is_array($ids)) {
    foreach ($ids as $id) {
      cache_clear_all($id, $table);
    }
  }
  else {
    cache_clear_all($ids, $table, $wildcard);
  }
}

/**
 * Implements hook_node_type_insert().
 */
function entitycache_flush_node_type_insert($info) {
  if (!empty($info->old_type) && $info->old_type != $info->type) {
    entitycache_flush_clear_cache('node', '*', TRUE);
  }
}

/**
 * Implements hook_node_type_update().
 */
function entitycache_flush_node_type_update($info) {
  if (!empty($info->old_type) && $info->old_type != $info->type) {
    entitycache_flush_clear_cache('node', '*', TRUE);
  }
}

/**
 * Implements hook_node_type_delete().
 */
function entitycache_flush_node_type_delete($info) {
  entitycache_flush_clear_cache('node', '*', TRUE);
}

/**
 * Implements hook_user_update().
 */
function entitycache_flush_user_update($edit, $account, $category) {
  // User name was changed
  if ($edit['original']->name != $account->name) {

    // Retrieve nodes by this user and flush their cache.
    $nodes = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('uid', $account->uid)
      ->execute()
      ->fetchCol();

    entitycache_flush_clear_cache('node', $nodes);
  }
}

/**
 * Attach to Webform forms.
 */
function entitycache_flush_form_webform_components_form_alter(&$form, &$form_state, $form_id) {
  entitycache_flush_add_submit_handler($form, 'node', $form['nid']['#value']);
}

function entitycache_flush_form_webform_component_edit_form_alter(&$form, &$form_state, $form_id) {
  entitycache_flush_add_submit_handler($form, 'node', $form['nid']['#value']);
}

function entitycache_flush_form_webform_emails_form_alter(&$form, &$form_state, $form_id) {
  entitycache_flush_add_submit_handler($form, 'node', $form['nid']['#value']);
}

function entitycache_flush_form_webform_configure_form_alter(&$form, &$form_state, $form_id) {
  entitycache_flush_add_submit_handler($form, 'node', $form['nid']['#value']);
}
