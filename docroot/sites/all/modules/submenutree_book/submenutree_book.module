<?php
/**
 * @file
 * Extend submenutree to display child book pages as teasers or links.
 *
 * When using submenutree on a node that is part of a book,
 * child pages will be rendered using submenutree settings,
 * and the normal book navigation will be repressed.
 *
 * dman dan@coders.co.nz
 * for sparksinteractive.co.nz 2013-08
 */

/**
 * Return the mlid of the given nodes BOOK structure.
 *
 * submenutree will respect this and behave as if it were a normal menu 
 * structure.
 *
 * @impliments HOOK_submenutree_mlid
 */
function submenutree_book_submenutree_mlid($node) {
  $links = submenutree_book_menu_node_get_links($node->nid);
  foreach ($links as $mlid => $link) {
    if (strpos($link->menu_name, 'book-toc') !== FALSE) {
      return $mlid;
    }
  }
}

/**
 * Get the relevant menu links for a node.
 *
 * Stolen from menu_node.module.
 *
 * @param int $nid
 *   The node id.
 * @param bool $router
 *   Boolean flag indicating whether to attach the menu router link to the 
 *   $item object.
 *   If set to TRUE, the router will be set as $item->menu_router.
 *
 * @return array
 *   An array of complete menu_link objects or an empy array on failure.
 */
function submenutree_book_menu_node_get_links($nid, $router = FALSE) {
  $result = db_query("SELECT * FROM {menu_links} WHERE link_path = :link_path", array(':link_path' => 'node/' . $nid));
  $items = array();
  foreach ($result as $data) {
    if ($router) {
      $data->menu_router = menu_get_item('node/' . $nid);
    }
    $items[$data->mlid] = $data;
  }
  return $items;
}

/**
 * Catch the node_view operation.
 *
 * Maybe remove the book nav if we are doing our own version.
 */
function submenutree_book_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full') {
    if (!empty($node->submenutree_enable) || !empty($node->siblingmenutree_enable)) {
      unset($node->content['book_navigation']);
    }
  }
}

