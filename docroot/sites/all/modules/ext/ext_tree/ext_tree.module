<?php

/**
 * @file
 * Provides functions and a UI to create Ext Trees.
 *
 * Allows creating TreeStore definitions (specifying Model to use, root node
 * ID, etc).
 *
 * Allows extending existing Models with fields from Ext.data.NodeInterface,
 * which control the properties of the tree node (eg the text field, ability
 * to drag and drop).
 */


/**
 * Get the settings for a Tree node Model, or all Tree node Models.
 */
function ext_tree_get_model_settings($model_name = NULL) {
  $tree_models = variable_get('ext_tree_models', array());
  if ($model_name) {
    if (isset($tree_models[$model_name])) {
      return $tree_models[$model_name];
    }
    return FALSE;
  }
  return $tree_models;
}


/**
 * Get the settings for a Tree Store, or all Tree stores.
 */
function ext_tree_get_store_settings($store_name = NULL) {
  $tree_stores = variable_get('ext_tree_stores', array());
  if ($store_name) {
    if (isset($tree_stores[$store_name])) {
      return $tree_stores[$store_name];
    }
    return FALSE;
  }
  return $tree_stores;
}


/**
 * Returns the tree node options that may be added to the tree node Model.
 * These are a subset of the config options for the Ext JS NodeInterface:
 * http://docs.sencha.com/ext-js/4-0/#!/api/Ext.data.NodeInterface
 */
function ext_tree_node_options() {
  return array(
    'text',
    'icon',
    'iconCls',
    'allowDrag',
    'allowDrop',
    'checked',
    'cls',
    'leaf',
    'expandable',
    'expanded',
    'href',
    'hrefTarget',
    'index',
    'qtip',
    'qtitle',
  );
}


function _ext_tree_get_store_root_node_id($store_name) {
  if ($settings = ext_tree_get_store_settings($store_name)) {
    if ($settings['root_id_format'] == 'plain') {
      return $settings['root_id'];
    }
    elseif ($settings['root_id_format'] == 'php') {
      return eval($settings['root_id']);
    }
  }
  return FALSE;
}