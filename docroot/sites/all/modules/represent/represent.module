<?php

/**
 * @file
 *   Send request to the Represent API.
 *
 * The Represent API Module only provides a mechanism for module developers to
 * query the Represent API.  It is mainly intended as a launch point for
 * developers to create plugin modules that harness the Represent API.
 *
 * @see https://represent.opennorth.ca/
 * @see https://represent.opennorth.ca/api/
 */

/**
 * @return array
 *   The available representative sets
 */
function represent_representative_sets() {
  return represent_resource_sets('representative');
}

/**
 * @return array
 *   The available boundary sets
 */
function represent_boundary_sets() {
  return represent_resource_sets('boundary');
}

/**
 * @param string $set
 *   The machine name of a representative set, eg "house-of-commons"
 * @return array
 *   The representatives in the representative set
 */
function represent_representatives_by_set($set, $fields = array()) {
  return represent_resources_by_set($set, 'representatives');
}

/**
 * @param string $set
 *   The machine name of a boundary set, eg "federal-electoral-districts"
 * @return array
 *   The boundaries in the boundary set
 */
function represent_boundaries_by_set($set) {
  return represent_resources_by_set($set, 'boundaries');
}

/**
 * Returns the representatives matching the given postal code and belonging to
 * one of the given representative sets.
 *
 * @param string $postal_code
 *   A postal code
 * @param array $sets (optional)
 *   Machine names of representative sets, eg "house-of-commons"
 * @return array
 *   Matching representatives
 */
function represent_representatives_by_postal_code($postal_code, $sets = array()) {
  return represent_resources_by_postal_code($postal_code, 'representatives', 'representative', $sets);
}

/**
 * Returns the boundaries containing the given postal code and belonging to one
 * one of the given boundary sets.
 *
 * @param string $postal_code
 *   A postal code
 * @param array $sets (optional)
 *   Machine names of resource sets, eg "federal-electoral-districts"
 * @return array
 *   Matching boundaries
 */
function represent_boundaries_by_postal_code($postal_code, $sets = array()) {
  return represent_resources_by_postal_code($postal_code, 'boundaries', 'boundary', $sets);
}

/**
 * @param string $singular
 *   The singular resource name
 * @return array
 *   The available resource sets
 */
function represent_resource_sets($singular) {
  return represent_objects("${singular}-sets/?limit=0");
}

/**
 * @param string $set
 *   The machine name of a resource set, eg "house-of-commons" or
 *   "federal-electoral-districts"
 * @param string $plural
 *   The plural resource name
 * @return array
 *   The resources in the resource set
 */
function represent_resources_by_set($set, $plural) {
  return represent_objects("${plural}/${set}/?limit=0");
}

/**
 * @param string $postal_code
 *   A postal code
 * @param array $sets (optional)
 *   Machine names of resource sets, eg "house-of-commons" or
 *   "federal-electoral-districts"
 * @param string $plural
 *   The plural resource name
 * @param string $singular
 *   The singular resource name
 * @return array
 *   The matching resources
 */
function represent_resources_by_postal_code($postal_code, $plural, $singular, $sets = array()) {
  // Get the JSON response.
  $postal_code = represent_format_postal_code($postal_code);
  $json = represent_send_request("postcodes/${postal_code}/");

  // Find the matching resources.
  $matches = array();
  if ($json) {
    $set_field = "${singular}_set_url";
    if (!is_array($sets)) {
      $sets = array($sets);
    }

    foreach (array("${plural}_centroid", "${plural}_concordance") as $field) {
      if (isset($json->$field)) {
        foreach ($json->$field as $match) {
          $set = represent_get_machine_name($match->related->$set_field);
          if (empty($sets) || in_array($set, $sets)) {
            $matches[$set][] = $match;
          }
        }
      }
    }
  }
  return $matches;
}

/**
 * @param string $path
 *    A path
 * @return array
 *    The resources in the response
 */
function represent_objects($path) {
  $json = represent_send_request($path);
  if ($json) {
    return $json->objects;
  }
  return array();
}

/**
 * @param string $path
 *   A path
 * @return object
 *   The JSON as a PHP object, or FALSE if an error occurred
 */
function represent_send_request($path) {
  $cid = "represent:$path";

  $cache = cache_get($cid);
  if ($cache) {
    return $cache->data;
  }

  $result = drupal_http_request("https://represent.opennorth.ca/$path");
  if (isset($result->error)) {
    watchdog('Represent API', 'Unexpected error "@error" on @path', array(
      '@error' => $result->error,
      '@path' => $path,
    ), WATCHDOG_ERROR);
  }
  elseif ($result->code != 200) {
    watchdog('Represent API', 'Unexpected HTTP code "@code" on @path', array(
      '@code' => $result->code,
      '@path' => $path,
    ), WATCHDOG_ERROR);
  }
  else {
    $json = json_decode($result->data);
    cache_set($cid, $json, 'cache', strtotime('+1 week'));
    return $json;
  }
  return FALSE;
}

/**
 * Formats a postal code as "A1A1A1", ie uppercase without spaces.
 *
 * @param string $postal_code
 *   A postal code
 * @return string
 *   A formatted postal code
 */
function represent_format_postal_code($postal_code) {
  return preg_replace('/[^A-Z0-9]/', '', strtoupper($postal_code));
}

/**
 * @param string $path
 *   A path
 * @return string
 *   The name of the resource in the path
 */
function represent_get_machine_name($path) {
  return preg_replace('@^/[^/]+/([^/]+).+$@', '\1', $path);
}
