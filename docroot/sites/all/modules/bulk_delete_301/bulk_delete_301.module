<?php

/**
 * @file
 * Page and form to import drupal path for 301 delete.
 */

/**
 * Implements hook_menu().
 */
function bulk_delete_301_menu() {
  $items['admin/config/search/redirect/delete'] = array(
    'title' => 'Bulk Delete 301',
    'description' => 'Bulk delete 301 redirects from csv upload',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bulk_delete_301_form'),
    'access arguments' => array('administer redirects'),
    'file' => 'bulk_delete_301.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Function that read data of file and process the file for redirect delete.
 */
function bulk_delete_301_processing_file($file, $options = array()) {
  $options += array(
    'delimiter' => ',',
    'no_headers' => TRUE,
    'check' => FALSE,
  );

  if (!$f = fopen($file, 'r')) {
    return array('success' => FALSE, 'message' => array(t('Unable to read the file')));
  }
  $line_no = 0;
  $data = array();
  while ($line = fgetcsv($f, 0, $options['delimiter'])) {
    $line_no++;
    if ($line_no == 1 && !$options['no_headers']) {
      drupal_set_message(t('Skipping the header row.'));
      continue;
    }

    if (!is_array($line)) {
      drupal_set_message(t('Line @line_no is invalid.', array('@line_no' => $line_no)), 'error');
      continue;
    }

    if (empty($line[0])) {
      drupal_set_message(t('Line @line_no contains invalid data.', array('@line_no' => $line_no)), 'error');
      continue;
    }
    $source_parts = redirect_parse_url($line[0]);
    $data[] = array(
      'line_no' => $line_no,
      'source' => $source_parts['url'],
    );
  }
  fclose($f);
  // Processcing the data for detele operation.
  bulk_delete_301_data($data, $options);
}

/**
 * Function for procee .csv file data for redirect delete operation.
 *
 * @param array $data
 *   An array of URL process for deletion.
 * @param array $options
 *   An associative array of additional options, with the following keys:
 *   - delimiter: Delimiter selected for the file
 *   - no_headers: If TRUE, then file have no header
 *   - check : Check for 404 ,if value is true then it will check the node
 *             before redirect delete.
 */
function bulk_delete_301_data(array $data, array $options) {
  $count = 0;
  foreach ($data as $val) {
    $redirect = (object) $val;
    if (strpos($redirect->source, 'node/') !== FALSE) {
      $path = $redirect->source;
    }
    else {
      $path = drupal_lookup_path("source", $redirect->source);
    }
    $sql = db_select('redirect', 'rd');
    $sql->fields('rd', array('rid', 'source'));
    $sql->condition('rd.source', $path);
    if ($options['check_node']) {
      $path_nid = explode('/', $path);
      $nid = $path_nid[1];
      $sql->innerJoin('node', 'n', "rd.source = concat('node/', n.nid)");
      $sql->condition('n.status', 1);
      $sql->condition('n.nid', $nid);
    }
    $url_delete_data = $sql->execute()->fetchAll();
    if (empty($url_delete_data)) {
      drupal_set_message(t('Line @line_no: The source "@source" does not exist in redirect table.', array(
        '@line_no' => $redirect->line_no,
        '@source' => $redirect->source,
          )), "error");
    }
    else {
      redirect_delete($url_delete_data[0]->rid);
      $count++;
    }
  }
  if ($count > 0) {
    drupal_set_message(t('@count row(s) imported.', array('@count' => $count)), 'status');
  }
}
