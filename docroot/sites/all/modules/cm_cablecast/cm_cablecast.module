<?php

/** @file
 *  Tightrope Cablecast integration for the Community Media Startertkit
 *  Drupal profile
 */

define('CM_CABLECAST_CHANNEL_TID', variable_get('cm_cablecast_channel_vid', 12));

/**
 * Implements hook_menu()
 *
 * @return array
 */
function cm_cablecast_menu() {
  $items = array();
  
  $items['admin/config/cablecast/cm'] = array(
    'title' => 'Community Media Configuration',
    'description' => 'Configuration options for the Community Media Cablecast Integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cm_cablecast_admin_settings'),
    'access arguments' => array('administer cablecast'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Builds the admininstration settings form.
 */
function cm_cablecast_admin_settings($form, &$form_state) {
  $form = array();
  
  $form['cm_cablecast_push_project_on_save'] = array(
    '#type' => 'checkbox',
    '#title' => t('Push Project Metadata to Cablecast when Project is Created or Updated'),
    '#default_value' => variable_get('cm_cablecast_push_project_on_save', 0),
    '#description' => t('When enabled pushes Project metadata to the Cablecast
    system. Disabling this option will prevent any Project information from being
    sent to Cablecast.'),
  );

  $form['cm_cablecast_push_show_on_save'] = array(
    '#type' => 'checkbox',
    '#title' => t('Push Show Metadata to Cablecast when Show is Created or Updated'),
    '#default_value' => variable_get('cablecast_api_push_show_on_save', 0),
    '#description' => t('When enabled pushes Show metadata to the Cablecast
    system. Disabling this option will prevent any Show information from being
    sent to Cablecast'),
  );
  
   $form['cm_cablecast_push_airing_on_save'] = array(
    '#type' => 'checkbox',
    '#title' => t('Push Airing to Cablecast when Airing is Created or Updated'),
    '#default_value' => variable_get('cablecast_api_push_airing_on_save', 0),
    '#description' => t('When enabled pushes Airing to the Cablecast
    system. Disabling this option will prevent any Airing information from being
    sent to Cablecast'),
  );
  
  // TODO: This needs to be generalized or moved to PCM specific module
  //http://community.webdev.pcmtv.org/admin/structure/taxonomy/runtime_default
  // 826, 827, 828, 829
   $form['cm_cablecast_id_of_28_30'] = array(
    '#type' => 'textfield',
    '#title' => t('Cablecast ID for 28:30 Placeholder'),
    '#size' => 10,
    '#maxlength' => 255,
    '#default_value' => variable_get('cm_cablecast_id_of_28_30', NULL),
    '#description' => t(''),
  );
  
  $form['cm_cablecast_id_of_58_30'] = array(
    '#type' => 'textfield',
    '#title' => t('Cablecast ID for 58:30 Placeholder'),
    '#size' => 10,
    '#maxlength' => 255,
    '#default_value' => variable_get('cm_cablecast_id_of_58_30', NULL),
    '#description' => t(''),
  );
  
  $form['cm_cablecast_id_of_1_28_30'] = array(
    '#type' => 'textfield',
    '#title' => t('Cablecast ID for 1:28:30 Placeholder'),
    '#size' => 10,
    '#maxlength' => 255,
    '#default_value' => variable_get('cm_cablecast_id_of_1_28_30', NULL),
    '#description' => t(''),
  );
  
  $form['cm_cablecast_id_of_1_58_30'] = array(
    '#type' => 'textfield',
    '#title' => t('Cablecast ID for 1:58:30 Placeholder'),
    '#size' => 10,
    '#maxlength' => 255,
    '#default_value' => variable_get('cm_cablecast_id_of_1_58_30', NULL),
    '#description' => t(''),
  );


  $form = system_settings_form($form);
  return ($form);
}
/**
 * Implements hook_form_alter
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function cm_cablecast_form_alter(&$form, &$form_state, $form_id) {
  // hide the fields from entity add/edit forms
  switch($form_id) {
    case 'cm_project_node_form':
      if(!user_access('administer cablecast')) {
        $form['field_cablecast_project_id']['#type'] = 'hidden';
      }
      break;
    case 'cm_show_node_form':
      if(!user_access('administer cablecast')) {
        $form['field_cablecast_show_id']['#type'] = 'hidden';
      }
      break;
    case 'user_profile_form':
      if(!user_access('administer cablecast')) {
        $form['field_cablecast_producer_id']['#type'] = 'hidden';
      }
      break;
  }
}


function cm_cablecast_node_presave($node) {
  switch($node->type) {
    case 'cm_project':
      if (variable_get('cm_cablecast_push_project_on_save', 0) == '1') {
        cm_cablecast_sync_project($node);
      }
      break;
    case 'cm_show':
      if (variable_get('cm_cablecast_push_show_on_save', 0) == '1') {
        cm_cablecast_sync_show($node);
      }
      break;
  }
}

function cm_cablecast_entity_presave($entity, $type) {
  //dsm($type);
  //dsm($entity);
  //http://test.pcmtv.org/Cablecast/Schedule.Runs.Advanced.aspx?scheduleID=59251
  if($type == 'airing') {
    if (variable_get('cm_cablecast_push_airing_on_save', 0) == '1') {
        $cablecast_airing_id = cm_cablecast_sync_airing($entity);  
        dsm($cablecast_airing_id);
        $entity->field_cablecast_airing_id[LANGUAGE_NONE][0]['value'] = $cablecast_airing_id;
        dsm($entity);
    }
  }
}

/**
 * @param $show
 *  The Show $node
 *
 */
function cm_cablecast_sync_airing($airing) {
  dsm('cm_cablecast_sync_airing');
  // TODO: Create proper # of shows for the series project (actually do this via rules instead to keep this module clean)

  // get the Cablecast Show ID from the related Show node
  if (isset($airing->field_airing_show_ref[LANGUAGE_NONE][0]['target_id'])) {
    dsm($airing->field_airing_show_ref[LANGUAGE_NONE][0]['target_id']);
    $show_node = node_load($airing->field_airing_show_ref[LANGUAGE_NONE][0]['target_id']);
    if ($data = field_get_items('node', $show_node, 'field_cablecast_show_id', $langcode = NULL)) {
       $show_cablecast_id = $data[0]['value'];
    } else {
        //LOOK UP DEFAULT DURATION OF THE PROJECT AND ASSIGN PLACEHOLDER
        drupal_set_message(t('Cablecast Show ID set to Placeholder'), 'warning');
        
        $project_node = node_load($airing->field_airing_project_ref[LANGUAGE_NONE][0]['target_id']);
        dsm('project');
        dsm($project_node);
    }
  } 
  
  $channel_name = cm_cablecast_convert_channel_tid_to_name($airing->field_airing_channel[LANGUAGE_NONE][0]['tid']);
  
  
  //DOES THIS HAVE AIRING ALREADY HAVE A CABLECAST ID?
  if (isset($airing->field_cablecast_airing_id[LANGUAGE_NONE][0]['value'])) { 
    // REMOVE AND RE-ADD?
    //cablecast_api_remove_airing($airing, $show_cablecast_id);
    
  } else {
    return cablecast_api_add_airing($airing, $show_cablecast_id, $channel_name);
  }
}

/**
 * @param  $project
 *  The $project to push to Cablecast
 *
 *
 */
function cm_cablecast_sync_project($node) {

  // project needs to be an og_group with an active status, and published, if not, return without processing
  if (!og_is_group('node', $node) || !$node->status) {
    return;
  }

  // need producer id for project
  $producer_id = cm_cablecast_sync_producer($node->uid);

  if (isset($node->field_cablecast_project_id[LANGUAGE_NONE][0]['value']) && $producer_id) {
    if ($project_id = cablecast_api_get_projects($node)) {
      // existing project_id, update
      if (cablecast_api_update_project($node)) {
        // successful update project
        drupal_set_message(t('Updated <em>!title</em> on Cablecast', array('!title' => check_plain($node->title))), 'status');
      } else {
        // failed updating project
        drupal_set_message(t('There was an error while updating Project <em>!title</em> on Cablecast', array('!title' => check_plain($node->title))), 'error');
      }
    } else {
      // project not found on cablecast (though the value was stored in Drupal), create a new Cablecast Project
      $project_id = cablecast_api_add_project($node);
      if ($project_id) {
        // successfully added new project
        // add the project_id to the $node->field_cablecast_project_id field
        $node->field_cablecast_project_id[LANGUAGE_NONE][0]['value'] = $project_id;
        drupal_set_message(t('Saved new Project <em>!title</em> on Cablecast', array('!title' => check_plain($node->title))), 'status');
      } else {
        // failed adding new project
        drupal_set_message(t('There was an error saving new Project <em>!title</em> on Cablecast', array('!title' => check_plain($node->title))), 'error');
      }
    }


  } elseif($producer_id) {
    // new project, insert
    $project_id = cablecast_api_add_project($node, $producer_id);
    if ($project_id) {
      // successfully added new project
      // add the project_id to the $node->field_cablecast_project_id field
      $node->field_cablecast_project_id[LANGUAGE_NONE][0]['value'] = $project_id;
      drupal_set_message(t('Saved new Project <em>!title</em> on Cablecast', array('!title' => check_plain($node->title))), 'status');
    } else {
      // failed adding new project
      drupal_set_message(t('There was an error saving new Project <em>!title</em> on Cablecast', array('!title' => check_plain($node->title))), 'error');
    }
  }



}

/**
 * @param $show
 *  The Show $node
 *
 */
function cm_cablecast_sync_show($show) {
  // TODO: Create proper # of shows for the series project (actually do this via rules instead to keep this module clean)

  // show needs to be published
  if (!$show->status) {
    return;
  }

  // get the Cablecast Project ID from the related group node
  if (isset($show->og_group_ref[LANGUAGE_NONE][0]['target_id'])) {
    $project_node = node_load($show->og_group_ref[LANGUAGE_NONE][0]['target_id']);
    if ($data = field_get_items('node', $project_node, 'field_cablecast_project_id', $langcode = NULL)) {
       $project_id = $data[0]['value'];
    } else {
        drupal_set_message(t('Could not retreive the Cablecast Project ID'), 'error');
      return;
    }
  } else {

  }

  // need producer id for project
  $producer_id = cm_cablecast_sync_producer($show->uid);

  if (isset($show->field_cablecast_show_id[LANGUAGE_NONE][0]['value']) && $producer_id && $project_id) {
    if ($show_id = cablecast_api_get_show($show)) {
      // existing show_id, update
      if (cablecast_api_update_show($show, $producer_id, $project_id)) {
        drupal_set_message(t('Updated <em>!title</em> on Cablecast', array('!title' => check_plain($show->title))), 'status');
      } else {
        // failed updating show
        drupal_set_message(t('There was an error while updating Show <em>!title</em> on Cablecast', array('!title' => check_plain($show->title))), 'error');
      }
    } else {
      // show not found on cablecast (though the value was stored in Drupal), create a new Cablecast Project
      $show_id = cablecast_api_add_show($node, $producer_id, $project_id);
      if ($show_id) {
        // successfully added new show
        // add the show_id to the $show->field_cablecast_show_id field
        $show->field_cablecast_show_id[LANGUAGE_NONE][0]['value'] = $show_id;
        drupal_set_message(t('Saved new Show <em>!title</em> on Cablecast', array('!title' => check_plain($show->title))), 'status');
      } else {
        // failed adding new project
        drupal_set_message(t('There was an error saving new Show <em>!title</em> on Cablecast', array('!title' => check_plain($show->title))), 'error');
      }
    }


  } elseif($producer_id && $project_id) {
    // new project, insert
    $show_id = cablecast_api_add_show($show, $producer_id, $project_id);
    if ($show_id) {
      // successfully added new show
      // add the project_id to the $node->field_cablecast_project_id field
      $show->field_cablecast_show_id[LANGUAGE_NONE][0]['value'] = $show_id;
      drupal_set_message(t('Saved new Show <em>!title</em> on Cablecast', array('!title' => check_plain($show->title))), 'status');
    } else {
      // failed adding new project
      drupal_set_message(t('There was an error saving new Show <em>!title</em> on Cablecast', array('!title' => check_plain($show->title))), 'error');
    }
  }

}


/**
 * Sync Projects from Cablecast
 *
 */
function _cm_cablecast_sync_projects($channels) {
  watchdog('CM Cablecast', 'Syncing Projects');

  if(!is_array($channels)) {
    $channels = array($channels);
  }

  $data = array();
  $data['ChannelID'] = $channels[0]->ChannelID;
  $projects = cm_cablecast_get_projects($data);

  if(!is_array($projects)) {
    $projects = array($projects);
  }

  $mapping = _cm_cablecast_project_info();
  foreach($projects as $project) {
    _cm_cablecast_sync_cablecast_object($project, $mapping);
  }
}

/**
 * Sync Shows from Cablecast
 *
 */
function _cm_cablecast_sync_shows() {
  watchdog('CM Cablecast', 'Syncing Shows');
  try {
    $locations = cm_cablecast_get_locations();
    foreach ($locations as $location) {
      $cm_cablecast_location_id = $location->Location->LocationID;
    }


    $cm_cablecast_last_sync = variable_get("cablecast_last_sync_location_" . $cm_cablecast_location_id,
                          '1900-01-01T12:00:00');

    $data = array(
      'LocationID' => $cm_cablecast_location_id,
      'SearchDate' => $cm_cablecast_last_sync,
      'DateComparator' => ">",
    );
    $cablecast_updated_shows = cablecast_api_last_modified_search($data);


    //Guard against no results.
    if($cablecast_updated_shows == NULL) {
      return;
    }

    //Guard against 1 result.
    if(!is_array($cablecast_updated_shows)) {
      $cablecast_updated_shows = array($cablecast_updated_shows);
    }

    foreach($cablecast_updated_shows as $show) {
      // do we even have a Show in Drupal
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'cm_show')
            ->fieldCondition('field_cablecast_show_id', 'value', $show->ShowID);

      $result = $query->execute();

      if ($result['node']) {
        // existing show
        foreach ($result['node'] as $show_node) {
          $nid = $show_node->nid;
        }
      } else {
        $nid = false;
      }

      if($nid == false) {
        $node = new stdClass();
        $node->type = 'cm_show';
        node_object_prepare($node);
        $node->language = LANGUAGE_NONE;
      }
      // Load node for shows that do exist
      else {
        $node = node_load($nid);
      }

      $node->title = $show->Title;
      $node->field_cablecast_show_id['und'][0]['value'] = $show->ShowID;
      $node->title = $show->Title;
//      if ($show->ProjectID >= 1) {
//        $node->og_group_ref['und'][0]['target_id'] = _cm_cablecast_get_project_nid($show->ProjectID);
//      }

      watchdog("CM Cablecast", "Syncing Show: @showName", array('@showName' => $node->title));

      //Give Other modules a chance to extract data, specifically custom fields
      module_invoke_all('cm_cablecast_show_presave', $node, $show);

      node_save($node);
      $cm_cablecast_last_sync = $show->LastModified;
    }

    variable_set("cablecast_last_sync_location_".$cm_cablecast_location_id, $cm_cablecast_last_sync);
  }
  catch(SoapFault $fault)  {
  watchdog("Cablecast", "Communicating to server caused the following error: ".$fault->faultstring);
  }
}

/**
 * Sync Schedule (Airings) from Cablecast
 *
 */
function _cm_cablecast_sync_schedule($channels) {
  watchdog('CM Cablecast', 'Syncing Schedule');

  // This shouldn't happen, but its possible there are no channels
  if($channels == null) {
    return;
  }
  $start_time = date('Y-m-d 00:00:00', time() - 60*60*24*3); // 3 days ago

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'airing')
        ->entityCondition('bundle', 'airing')
        ->fieldCondition('field_airing_date', 'value', $start_time, '>=');

  $result = $query->execute();

  $schedule_airing_ids = null;
  if ($result['airing']) {
    foreach ($result['airing'] as $airing) {
      $schedule_airing_ids[$airing->airing_id] = $airing->airing_id;
    }
  }

  foreach ($channels as $channel) {
    // we will need this later
    $channel_tid = _cm_cablecast_get_channel_tid($channel->ChannelID);

    $params = array(
      'ChannelID' => $channel->ChannelID,
      'FromDate' =>  date('Y-m-d\T00:00:00', time() - 60*60*24*3), // 3 days ago
      'ToDate'  =>  date('Y-m-d\T23:59:59', time() + 60*60*24*30), // 30 days from now
      'restrictToShowID'  =>  0,
    );

    $schedule_events = cm_cablecast_get_schedule($params);

    // Schedule events can be an array, single run, or NULL
    // We need to normalize to an array
    if(!is_array($schedule_events)) {
      if($schedule_events == NULL) {
        $schedule_events = array();
      } else {
        $schedule_events = array($schedule_events);
      }
    }

    foreach ($schedule_events as $run) {

      //Check if Show even exists. If it doesn't well sync this later once we have the show
      $show_nid = _cm_cablecast_get_show_nid($run->ShowID);
      if ($show_nid == false) {
        continue;
      }

      // convert the Cablecast dates to UTC since the Drupal date field expects this
      $run->StartTime = _cm_cablecast_alter_date_tz($run->StartTime);
      $run->EndTime = _cm_cablecast_alter_date_tz($run->EndTime);

      //Check if Schedule event exists (airing)
      $airing_id = _cm_cablecast_get_airing_eid($run->ScheduleID);
      if ($airing_id == false) {
        // no existing airing found, create a new airing
        $airing = entity_create('airing', array('type' => 'airing'));
      } else {
        // existing airing found, load the airing
        $airing = entity_load('airing', array($airing_id));
        $airing = array_shift($airing);
        if($key = array_search($airing_id, $schedule_airing_ids))  {
          unset($schedule_airing_ids[$key]);
        }
      }

      // save the airing if it has changed
      if ($airing_id == false || _cm_cablecast_is_airing_changed($airing, $run, $channel_tid)) {

        // update the values of the airing
        $airing->field_airing_title[LANGUAGE_NONE][0]['value'] = $run->ShowTitle;
        $airing->field_cablecast_airing_id[LANGUAGE_NONE][0]['value'] = $run->ScheduleID;
        $airing->field_airing_channel[LANGUAGE_NONE][0]['tid'] = $channel_tid;
        $airing->field_airing_date[LANGUAGE_NONE][0]['value'] = $run->StartTime;
        $airing->field_airing_date[LANGUAGE_NONE][0]['value2'] = $run->EndTime;

        if (!$show_nid == false) {
          $airing->field_airing_show_ref[LANGUAGE_NONE][0]['nid'] = $show_nid;
        }
        entity_save('airing', $airing);
      }
    }
  }
  // Remove deleted runs
  entity_delete_multiple('airing', $schedule_airing_ids);
}

/**
 * Gets a Drupal user ID from a Cablecast Producer ID if it exists
 *
 * @param $producer_id
 *
 * @return mixed
 */
function _cm_cablecast_get_user_id($producer_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'user')
        ->fieldCondition('field_cablecast_producer_id', 'value', $producer_id, '=')
        ->addMetaData('account', user_load(1)); // Run the query as user 1.

  $result = $query->execute();

  if ($result) {
    foreach ($result['user'] as $user) {
      return $user->uid;
    }
  }
  return 1;
}

/**
 * Helper function to retreive the Cablecast Producer ID of a node's author
 *
 * @param  $user (int)
 *  The user id of the Drupal user to sync to Cablecast
 *
 * @return $producer_id (int)
 * The Cablecast producer id
 */
function cm_cablecast_sync_producer($user_id) {

  $user = user_load($user_id);

  // Producer ID exists in User field?
  if (isset($user->field_cablecast_producer_id[LANGUAGE_NONE][0]['value'])) {

    // existing producer, ensure record exists on Cablecast
    if ($producer_id = cablecast_api_get_producer($user)) {
      // Found Cablecast record, ok to continue
      if ($producer_id) {
        // successful update of producer record
        drupal_set_message(t('Updated producer <em>!name</em> on Cablecast', array('!name' => $user->display_name)), 'status');
        return $producer_id;
      } else {
        // something broke
        drupal_set_message(t('There was an error updating producer <em>!name</em> on Cablecast', array('!name' => $user->display_name)), 'error');
      }
    } else {
      // new producer, create
      $producer_id = cablecast_api_add_producer($user);
      if ($producer_id) {
        // successful create new producer
        drupal_set_message(t('Saved new producer <em>!name</em> on Cablecast', array('!name' => $user->display_name)), 'status');
        // add the producer_id to the cm_cablecast_producer_id field
        $user->field_cablecast_producer_id[LANGUAGE_NONE][0]['value'] = $producer_id;
        user_save($user);
        return $producer_id;
      } else {
        // something broke
        drupal_set_message(t('There was an error saving new producer <em>!name</em> on Cablecast', array('!name' => $user->display_name)), 'error');
      }
    }
  } else { // either no producer_id was found in user obj, or could not retreive from Cablecast (this can happen is the record is deleted on the Cablecast system and not Drupal)

    // new producer, create
    $producer_id = cablecast_api_add_producer($user);
    if ($producer_id) {
      // successful create new producer
      drupal_set_message(t('Saved new producer <em>!name</em> on Cablecast', array('!name' => $user->display_name)), 'status');
      // add the producer_id to the cm_cablecast_producer_id field
      $user->field_cablecast_producer_id[LANGUAGE_NONE][0]['value'] = $producer_id;
      user_save($user);
      return $producer_id;
    } else {
      // something broke
      drupal_set_message(t('There was an error saving new producer <em>!name</em> on Cablecast', array('!name' => $user->display_name)), 'error');
    }

  }
}

/**
 * Returns a Drupal Project entity id from a Cablecast object ID
 *
 *
 * @param $project_id
 *
 * @param $info
 *
 * @return null
 */
function _cm_cablecast_get_drupal_eid($cablecast_id, $info, $key) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $info['entity_type'])
        ->entityCondition('bundle', $info['bundle'])
        ->fieldCondition($info['fields'][$info['cablecast_id']]['drupal_field'], 'value', $cablecast_id, '=');

  $result = $query->execute();

  if ($result[$info['entity_type']]) {
    foreach ($result[$info['entity_type']] as $entity) {
      // there should only be one entity so return on the first one
      return $entity->$key;
    }
  }
  return null;
}


/**
 * @param $channel_id
 *
 * @param $info
 * @param $key
 *
 * @return mixed
 */
function _cm_cablecast_get_channel_eid($channel_id, $info, $key) {
  $channel_tid = null;
  $taxonomyQuery = new EntityFieldQuery();
  $result = $taxonomyQuery->entityCondition('entity_type', $info['entity_type'])
    ->entityCondition('bundle', $info['bundle'])
    ->fieldCondition($info['fields']['ChannelID'], 'value', $channel_id)
    ->execute();
  if ($result[$info['entity_type']]) {
    foreach ($result[$info['entity_type']] as $entity) {
      // there should only be one project so return on the first one
      return $entity->$key;
    }
  }
  return null;
}

/**
 * @param $show_id
 *
 * @return mixed
 */
function _cm_cablecast_get_show_nid($show_id) {
  $show_nid = false;
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'cm_show')
        ->fieldCondition('field_cablecast_show_id', 'value', $show_id, '=');

  $result = $query->execute();

  if (isset($result['node'])) {
    $show_nid = array_keys($result['node']);
  }

  return $show_nid[0];
}

/**
 * @param $schedule_id
 *
 * @return mixed
 */
function _cm_cablecast_get_airing_eid($schedule_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'airing')
        ->entityCondition('bundle', 'airing')
        ->fieldCondition('field_cablecast_airing_id', 'value', $schedule_id, '=');

  $result = $query->execute();

  if (isset($result['airing'])) {
    $airing_eid = array_keys($result['airing']);
  }
  return $airing_eid[0];
}

/**
 * Helper function to determine if a selected Drupal channel (term) is different
 * from the Cablecast channel.
 *
 * @param $channel_term
 * @param $channel
 *
 * @return bool
 */
function _cm_cablecast_is_channel_changed($entity_wrapper, $project, $mapping) {
  foreach ($mapping['fields'] as $dest_field => $source_field) {
    $field_info = $entity_wrapper->$source_field->info();
    if (isset($field_info['property info'])) {
      // a multi-valued field.
      $value = $entity_wrapper->$source_field->value->value();
    } else {
      // a single-valued field
      $value = $entity_wrapper->$source_field->raw();
    }
    if ($value != $project->$dest_field ) {
      return true;
    }
  }
  return false;
}

/**
 * Helper function to determine if a selected Drupal project is different
 * from the Cablecast Project
 *
 * @param $node
 * @param $project
 *
 * @return bool
 */
function _cm_cablecast_is_cablecast_object_changed($entity_wrapper, $cablecast_object, $mapping) {
  foreach ($mapping['fields'] as $cablecast_field => $field_settings) {
    if ($field_settings['drupal_field']) {
      $field_info = $entity_wrapper->$field_settings['drupal_field']->info();
      if (isset($field_info['property info'])) {
        // a multi-valued field.
        $value = $entity_wrapper->$field_settings['drupal_field']->value->value();
      } else {
        // a single-valued field
        $value = $entity_wrapper->$field_settings['drupal_field']->raw();
      }
      if ($value != $cablecast_object->$cablecast_field ) {
        return true;
      }
    }
  }
  return false;
}


/**
 * Helper function to determine if a selected Drupal airing is different
 * from the Cablecast run.
 *
 * @param $airing
 * @param $run
 *
 * @param $channel_tid
 *
 * @internal param $channel_id
 *
 * @return bool
 */
function _cm_cablecast_is_airing_changed($airing, $run, $channel_tid) {
  $title = ($airing->field_airing_title[LANGUAGE_NONE][0]['value'] == $run->ShowTitle) ? true : false;
  $channel = ($airing->field_airing_channel[LANGUAGE_NONE][0]['tid'] == $channel_tid) ? true : false;
  $starttime = ($airing->field_airing_date[LANGUAGE_NONE][0]['value'] == $run->UTCStartTime) ? true : false;
  $endtime = ($airing->field_airing_date[LANGUAGE_NONE][0]['value2'] == $run->UTCEndTime) ? true : false;
  $show = ($airing->field_airing_show_ref[LANGUAGE_NONE][0]['nid'] == _cm_cablecast_get_show_nid($run->ShowID)) ? true : false;
  $airing_id = ($airing->field_cablecast_airing_id[LANGUAGE_NONE][0]['value'] == $run->ScheduleID) ? true : false;

  return !($airing->field_airing_title[LANGUAGE_NONE][0]['value'] == $run->ShowTitle &&
           $airing->field_airing_channel[LANGUAGE_NONE][0]['tid'] == $channel_tid &&
           $airing->field_airing_date[LANGUAGE_NONE][0]['value'] == $run->UTCStartTime &&
           $airing->field_airing_date[LANGUAGE_NONE][0]['value2']  == $run->UTCEndTime &&
           $airing->field_airing_show_ref[LANGUAGE_NONE][0]['nid'] == _cm_cablecast_get_show_nid($run->ShowID) &&
           $airing->field_cablecast_airing_id[LANGUAGE_NONE][0]['value'] == $run->ScheduleID
  );
}

/**
 * Implements hook_cron
 *
 * Pulls Channels and "Runs" from Cablecast
 */
function cm_cablecast_cron() {
  // see if we can talk to the Cablecast server, if not there is no need to continue
  //if ($version = cablecast_api_get_version()) {
    //$channels = _cablecast_api_sync_channels();
    // _cm_cablecast_sync_projects($channels);
    //_cm_cablecast_sync_shows();
    //_cm_cablecast_sync_schedule($channels);
  //}
}

function cm_cablecast_convert_channel_tid_to_name($tid) {
  $term = taxonomy_term_load($tid);
  dsm($term);
  //_cablecast_api_get_channel_eid
  
  //814 = http://community.webdev.pcmtv.org/admin/structure/taxonomy/channel
}

// START MAPPINGS
// NOT SURE THESE WERE EVER USED, BUT IDEA IS SIMILAR TO TELVUE MAPPINGS
function _cm_cablecast_project_info() {
  $info = array(
    'entity_type'             => 'node',
    'bundle'                  => 'cm_project',
    'cablecast_type'          => 'project',
    'cablecast_id'            => 'ProjectID',
    'fields' => array(
      'ProjectID' => array(
        'drupal_field'    => 'field_cablecast_project_id',
        'directionality'  => 'sync',
        'default_value'   => null,
      ),
      'LocationID'            => array(
        'drupal_field'        => null,
        'directionality'      => 'push',
        'default_value'       => variable_get('cm_cablecast_location_id', 22)),
      'Name' => array(
        'drupal_field'    => 'title',
        'directionality'  => 'sync',
        'default_value'   => null,
      ),
      'Description' => array(
        'drupal_field'        => 'body',
        'directionality'      => 'sync',
        'default_value'       => null,
      ),
//      'ProducerID' => array(
//        'drupal_field' => 'author',
//        'directionality' => 'sync',
//        'default_value' => null,
//      ),
    ),
  );
  return $info;
}

function _cm_cablecast_show_info() {
  $info = array(
    'entity_type' => 'node',
    'bundle' => 'cm_show',
    'fields' => array(
      'ShowID'                => 'field_cablecast_show_id',
      'LocalID'               => 'Added by API',
      'LocationID'            => variable_get('cm_cablecast_location_id', 22),
      'Title'                 => 'title',
      'CGTitle'               => 'title',
      'ProjectID'             => '',
      'CGExempt'              => FALSE,
      'ProducerID'            => '',
      'CategoryID'            => 1,
      'EventDate'             => 'created',
      'Comments'              => '',
      'OnDemand'              => FALSE,
      'OnDemandStatus'        => FALSE,
      'CustomFields'          => FALSE,
      'BugText'               => '',
      'CrawlText'             => '',
      'CrawlLengthInSeconds'  => '',
    ),
  );
  return $info;
}

function _cm_cablecast_channel_info() {
  $info = array(
    'entity_type'          => 'taxonomy_term',
    'bundle'               => 'channel',
    'cablecast_type'       => 'channel',
    'cablecast_id'         => 'ChannelID',
    'fields' => array(
      'Name' => array(
        'drupal_field'     => 'name',
        'directionality'   => 'push',
        'default_value'    => null,
      ),
      'ChannelID'          => array(
        'drupal_field'     => 'field_cablecast_channel_id',
        'directionality'   => 'push',
        'default_value'    => null,
      ),
      'PrimaryLocationID'  => array(
        'drupal_field'     => null,
        'directionality'   => 'push',
        'default_value'    => variable_get('cm_cablecast_location_id', 22),
      ),
    ),
  );

  return $info;
}

function _cm_cablecast_producer_info() {
  $info = array(
    'entity_type' => 'user',
    'bundle' => 'user',
    'cablecast_type'             => 'project',
    'cablecast_id'               => 'ProjectID',
    'fields' => array(
      'LocationID'    => 1,
      'ProducerName'  => variable_get('cm_cablecast_location_id', 22),
      'Phone1'        => '',
      'Phone2'        => '',
      'Address'       => '',
      'Notes'         => '',
      'Active'        => 'status',
      'ContactName'   => 'display_name',
      'Email'         => 'mail',
      'Website'       => '',
    ),
  );
  return $info;
}
//END MAPPINGS 