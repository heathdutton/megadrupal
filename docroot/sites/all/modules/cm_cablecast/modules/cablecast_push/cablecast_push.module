<?php

/**
 * Implements hook_permission().
 */
function cablecast_push_permission() {
  $permissions = array(
    'push to cablecast' => array(
      'title' => t('Push to cablecast'),
      'description' => t('Allows users to push Show metadata to cablecast with Save and Push button.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Implementation of hook_menu().
 */
function cablecast_push_menu() {
  $items = array();

  // Standard Administration settings.
  $items['admin/config/system/cablecast-push'] = array(
    'title' => 'cablecast Push Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cablecast_push_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer cablecast'),
    'description' => 'Configure system options for cablecast Push.',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/system/cablecast-push/settings'] = array(
    'title' => 'cablecast Push Configuration',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/system/cablecast-push/mapping'] = array(
    'title' => 'cablecast Push Mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cablecast_push_mapping_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer cablecast'),
    'description' => 'Configure field mapping for cablecast Push.',
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%node/cablecast-push'] = array(
    'title' => 'Push to cablecast',
    'description' => 'Pushes metadata to cablecast if it doesn\'t exist',
    'page callback' => 'cablecast_push_push',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('push to cablecast'),
    'type' => MENU_CALLBACK,
  );

  return $items;

}

/**
 * Builds the admininstration settings form.
 */
function cablecast_push_admin_settings($form, &$form_state) {
  $form = array();

  $form['cablecast_push_on_save'] = array(
    '#type' => 'checkbox',
    '#title' => t('Push Metadata to cablecast when Show is Created or Updates'),
    '#default_value' => variable_get('cablecast_push_on_save', 0),
    '#description' => t(''),
  );

  $form['cablecast_delete_days'] = array(
    '#type' => 'textfield',
    '#title' => t('Days Before the Program is Deleted'),
    '#size' => 25,
    '#maxlength' => 25,
    '#default_value' => variable_get('cablecast_delete_days', NULL),
    '#description' => t('Number of Days to Add current date before the Program is deleted from cablecast.  Set to 0 to never delete. IMPORTANT: Programs that are scheduled to air will NOT be deleted.  Deleting the Program metadata does NOT delete the MPEG2 from VOL1.'),
  );

  $form['cablecast_push_extension'] = array(
    '#type' => 'textfield',
    '#title' => t('cablecast Expected Filename Extension'),
    '#size' => 25,
    '#maxlength' => 25,
    '#default_value' => variable_get('cablecast_push_extension', '.mpg'),
    '#description' => t('Extension that should be added to "Expected Filename" value before pushing to cablecast. Examples include ".mpg", ".mpeg", etc.'),
  );
  
  $form = system_settings_form($form);
  return ($form);
}

function cablecast_push_get_mapping_targets() {
  $targets = array(
    'program' => array('label' => t('Program')),
    'episode' => array('label' => t('Episode')),
    'episode_code' =>  array('label' => t('Episode code')),
    'description' => array('label' => t('Description')),
    'contributor' => array(
      'label' => t('Contributor'),
      'description' => t('64 characters or less'),
    ),
    'location' => array(
      'label' => t('Location'),
      'description' => t('32 characters or less'),
    ),
  );

  return $targets;
}

/**
 * Edit field mapping.
 */
function cablecast_push_mapping_form($form, &$form_state) {

  $form['help'] = array(
    '#markup' => t('Select a <em>Source entity</em> and <em>Source bundle</em>, then map the entity fields to the cablecast Metadata Fields.'),
  );

  $defaults = variable_get('cablecast_push_mapping', '');

  // Select the target entity type.
  $entity_options = array();
  foreach (entity_get_info() as $entity_type => $entity_info) {
    $entity_options[$entity_type] = $entity_info['label'];
  }
  $entity_options = array('' => t('- Select an entity -')) + $entity_options;

  if (isset($form_state['values']['source_entity'])) {
    $selected_entity = $form_state['values']['source_entity'];
  }
  elseif (isset($defaults['source_entity']) && !empty($defaults['source_entity'])) {
    $selected_entity = $defaults['source_entity'];
  }
  else {
    $selected_entity = key($entity_options);
  }

  $form['source_entity'] = array(
    '#title' => t('Source entity'),
    '#type' => 'select',
    '#options' => $entity_options,
    '#default_value' => $selected_entity,
    '#ajax' => array(
      'callback' => 'cablecast_push_mapping_form_entity_ajax_callback',
      'wrapper' => 'cablecast-push-bundle-wrapper',
    ),
  );

  $form['bundle_container'] = array(
    '#type' => 'container',
    '#prefix' => '<div id="cablecast-push-bundle-wrapper">',
    '#suffix' => '</div>',
  );

  $form['target_container'] = array(
    '#type' => 'container',
    '#prefix' => '<div id="cablecast-push-target-wrapper">',
    '#suffix' => '</div>',
  );

  if (!empty($defaults['source_entity']) || !empty($form_state['values']['source_entity'])) {
    $bundle_options = array();
    foreach (field_info_bundles($selected_entity) as $bundle => $bundle_info) {
      $bundle_options[$bundle] = $bundle_info['label'];
    }
    $bundle_options = array('' => t('- Select a bundle -')) + $bundle_options;

    if (isset($form_state['values']['source_bundle'])) {
      $selected_bundle = $form_state['values']['source_bundle'];
    }
    elseif (isset($defaults['source_bundle']) && !empty($defaults['source_bundle'])) {
      $selected_bundle = $defaults['source_bundle'];
    }
    else {
      $selected_bundle = key($bundle_options);
    }

    $form['bundle_container']['source_bundle'] = array(
      '#title' => t('Source bundle'),
      '#type' => 'select',
      '#options' => $bundle_options,
      '#default_value' => $selected_bundle,
      '#ajax' => array(
        'callback' => 'cablecast_push_mapping_form_bundle_ajax_callback',
        'wrapper' => 'cablecast-push-target-wrapper',
      ),
    );

    if (!empty($defaults['source_bundle']) || !empty($form_state['values']['source_bundle'])) {
      $target_options = cablecast_push_get_mapping_targets();
      // $entity_fields = field_info_instances($selected_entity, $selected_bundle);
      // $extra_fields = field_info_extra_fields($selected_entity, $selected_bundle, 'form');
      $entity_properties = entity_get_property_info($selected_entity);

      $field_options = array();
      // foreach ($entity_fields as $field => $field_info) {
      //   $field_options[$field] = $field_info['label'] . ' (' . $field_info['field_name'] . ')';
      // }
      // foreach ($extra_fields as $field => $extra_field) {
      //   $field_options[$field] = $extra_field['label'] . ' (' . $field . ')';
      // }
      foreach ($entity_properties['bundles'][$selected_bundle]['properties'] as $field => $field_info) {
        $field_options[$field] = $field_info['label'] . ' (' . $field . ')';
      }
      foreach ($entity_properties['properties'] as $prop => $prop_info) {
        $field_options[$prop] = $prop_info['label'] . ' (' . $prop . ')';
      }

      $field_options = array('' => t('- Not mapped -')) + $field_options;

      $form['target_container']['target'] = array(
        '#type' => 'fieldset',
        '#title' => $bundle_options[$selected_bundle] . ' ' . t('fields'),
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
      );

      foreach ($target_options as $key => $target) {
        $form['target_container']['target'][$key] = array(
          '#type' => 'select',
          '#title' => $target['label'],
          '#description' => isset($target['description']) ? $target['description'] : '',
          '#options' => $field_options,
          '#default_value' => (isset($defaults[$key]) && !empty($defaults[$key])) ? $defaults[$key] : key($field_options),
        );
      }
    }

  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

function cablecast_push_mapping_form_submit($form, $form_state) {
  $targets = array(
    'source_entity' => array('label' => t('Source entity')),
    'source_bundle' => array('label' => t('Source bundle')),
  );
  $targets += cablecast_push_get_mapping_targets();

  foreach ($targets as $key => $value) {
    $variables[$key] = '';
    if (!empty($form_state['values'][$key])) {
      $variables[$key] = $form_state['values'][$key];
    }
  }

  variable_set('cablecast_push_mapping', $variables);
  drupal_set_message(t('cablecast Push field mapping has been saved.'));
}

/**
 * Ajax callback for the handler settings form.
 *
 * @see cablecast_push_mapping_form()
 */
function cablecast_push_mapping_form_entity_ajax_callback($form, $form_state) {
  return $form['bundle_container'];
}

function cablecast_push_mapping_form_bundle_ajax_callback($form, $form_state) {
  return $form['target_container'];
}

/**
 * Implementation of hook_node_insert().
 */
function cablecast_push_node_insert($node) {

  if ($node->type == 'cm_show' && variable_get('cablecast_push_on_save', 0)) {
    drupal_goto('node/' . $node->nid . '/cablecast-push');
  }

  //drupal_goto('node/' . $node->nid);
}

/**
 * Implementation of hook_node_update().
 */
function cablecast_push_node_update($node) {

  if ($node->type == 'cm_show' && variable_get('cablecast_push_on_save', 0)) {
    drupal_goto('node/' . $node->nid . '/cablecast-push');
  }

  //drupal_goto('node/' . $node->nid);
}

function cablecast_push_push($node, $return = TRUE) {

  //check to make sure the cablecast API module has been configured
  $server = variable_get('cablecast_uri', NULL);
  $username = variable_get('cablecast_user', NULL);
  $mapping = variable_get('cablecast_push_mapping', '');
  $filename_ext = variable_get('cablecast_push_extension', '.mpg');
  $src_entity = $mapping['source_entity'];
  $src_bundle = $mapping['source_bundle'];

  $lang = $node->language;

  if (!$server || !$username) {
    drupal_set_message(t('cablecast API is NOT Configured'));
    drupal_goto('node/' . $node->nid);
  }
  
  if (!$filename_ext) {
    $filename_ext = '.mpg';
  }

  // extract mapped values
  $mapped = array();
  foreach ($mapping as $key => $field) {
    if (!empty($mapping[$key]) && !in_array($key, array('source_entity', 'source_bundle'))) {
      $value = _cablecast_push_field_extract_value($src_entity, $node, $field, $lang);
      $mapped[$key] = $value;
    }
  }

  // CLEANUP FILENAME
  if (isset($node->field_expected_filename[$lang][0]['value'])) {

    if (function_exists('transliteration_clean_filename')) {
      $transliterated = transliteration_clean_filename($filename, $node->language);
    }

    $filename = $node->field_expected_filename[$lang][0]['value'];

    //strip common video suffixes
    $filename = str_replace(".mpg", "", $filename);
    $filename = str_replace(".mov", "", $filename);
    $filename = str_replace(".mp4", "", $filename);
    $filename = str_replace(".wmv", "", $filename);
    $filename = str_replace(".ogg", "", $filename);
    $filename = str_replace(".ogv", "", $filename);
    $filename = str_replace(".mpeg", "", $filename);
    $filename = str_replace(".avi", "", $filename);

    $filename = $filename . $filename_ext;

  }

  if (!$filename) {
    drupal_set_message(t('Expected Filename is Required to Push to cablecast'));
    drupal_goto('node/' . $node->nid);
  }

  $duration = isset($node->field_expected_duration[$lang][0]['value']) ? $node->field_expected_duration[$lang][0]['value'] : 1;

  //dsm($node);
  //IF CLOUDCAST
  if (!empty($mapping['description']) && $mapped['description']) {
    $description = $mapped['description'];
  }
  elseif (isset($node->field_cloudcast[$lang][0]['value']) && $node->field_cloudcast[$lang][0]['value']) {
    $description = isset($node->body[$lang][0]['value']) ? $node->body[$lang][0]['value'] . ' [cc]' : '[cc]';
  }
  else {
    $description = isset($node->body[$lang][0]['value']) ? $node->body[$lang][0]['value'] : NULL;
  }

  if (!isset($program['delete_datetime'])) {
   $delete_days = variable_get('cablecast_delete_days', NULL);
   if ($delete_days) {
     $delete_datetime = date('Y-m-d g:i P', time() + ($delete_days * 24 * 60 * 60));
   }
   else {
     $delete_datetime = new SoapVar('<value xsi:nil="true" />', XSD_ANYXML);
   }
 }

  //IF EPISODE
  if (!empty($mapping['episode']) && $mapped['episode']) {
    $episode = $mapped['episode'];
  }
  elseif (isset($node->field_episode[$lang][0]['value']) && $node->field_episode[$lang][0]['value']) {
    $episode = $node->field_episode[$lang][0]['value'];
  }
  else {
    $episode = new SoapVar('<value xsi:nil="true" />', XSD_ANYXML);
  }

 //IF EPISODE CODE
  if (!empty($mapping['episode_code']) && $mapped['episode_code']) {
    $episode_code = $mapped['episode_code'];
  }
  elseif (isset($node->field_episode_code[$lang][0]['value']) && $node->field_episode_code[$lang][0]['value']) {
    $episode_code = $node->field_episode_code[$lang][0]['value'];
  }
  else {
    $episode_code = new SoapVar('<value xsi:nil="true" />', XSD_ANYXML);
  }

  //IF CONTRIBUTOR
  if (!empty($mapping['contributor']) && $mapped['contributor']) {
    $contributor = $mapped['contributor'];
  }
  elseif (isset($node->field_contributor[$lang][0]['value']) && $node->field_contributor[$lang][0]['value']) {
    $contributor = $node->field_contributor[$lang][0]['value'];
  }
  else {
    $contributor = new SoapVar('<value xsi:nil="true" />', XSD_ANYXML);
  }

  //IF LOCATION
  if (!empty($mapping['location']) && $mapped['location']) {
    $location = $mapped['location'];
  }
  elseif (isset($node->field_location[$lang][0]['value']) && $node->field_location[$lang][0]['value']) {
    $location = $node->field_location[$lang][0]['value'];
  }
  else {
    $location = new SoapVar('<value xsi:nil="true" />', XSD_ANYXML);
  }

  // map other fields
  if (!empty($mapping['program']) && $mapped['program']) {
    $program_val = $mapped['program'];
  }
  else {
    $program_val = $node->title;
  }

  //prepare show fields as the program array to send to cablecast
  $program = array(
    'program' => $program_val,
    'episode' => $episode,
    'episode_code' =>  $episode_code,
    'description' => $description,
    'delete_datetime' => $delete_datetime,
    'expected_filename' => $filename,
    'expected_duration' => $duration,
    'contributor' => $contributor ,
    'location' => $location,
    'username' => $username,
  );

  ;

  // check to see if the file already exists
  if (cablecast_content_metadata_by_filename($filename)) {
    drupal_set_message(t('Expected Filename is Already Exists'));
    drupal_goto('node/' . $node->nid);
  }
  else {
    $response = cablecast_addprogram($program, $server);

    drupal_set_message($node->title . ' Pushed to cablecast');

    if ($return) {
      drupal_goto('node/' . $node->nid);
    }
  }
}

function cablecast_content_metadata_by_filename($filename) {

  $server = variable_get('cablecast_uri', NULL);
  $url = $server . '/content_metadata_by_filename/' . $filename;
  $url_headers = @get_headers($url);
  if($url_headers[0] == 'HTTP/1.1 200 OK') {
    $response = simplexml_load_file($url);
  } else {
    // Error
    return FALSE;
  }

  $json = json_encode($response);
  $array = json_decode($json,TRUE);

  return $array;

}

/**
 * Implements hook_node_operations().
 * Provides a 'Push to cablecast' option.
 */
function cablecast_push_node_operations() {

  $operations['push-to-cablecast'] = array(
    'label' => t('Push to cablecast'),
    'callback' => 'cablecast_push_node_operations_callback',
  );
  return $operations;
}

/**
 * Node operation callback:
 * Updates the selected nodes' language.
 * Stores the new language to be assigned; then languageassign_node_presave()
 * updates the node and body languages.
 */
function cablecast_push_node_operations_callback($nodes) {
  foreach ($nodes as $nid) {
    $node = node_load($nid);
    if ($node->type == 'cm_show') {
      cablecast_push_push($node, FALSE);
    }
  }
}

/**
* Implementation of hook_form_alter
*/
function cablecast_push_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'cm_show_node_form' && user_access('cablecast_push')) {
    //dsm($form);
    $form['actions']['cablecast_save_and_push_button'] = array(
      '#type'   => 'submit',
      '#value'  => 'Save and Push',
      '#submit' => array('cablecast_push_add_redirect'),
      '#weight' => 99
    );
  }
}

function cablecast_push_add_redirect($form, &$form_state){

  unset($_GET['destination']);
  $node = node_form_submit_build_node($form, $form_state);
  $insert = empty($node->nid);
  node_save($node);
  $node_link = l(t('view'), 'node/' . $node->nid);
  $watchdog_args = array(
    '@type' => $node->type,
    '%title' => $node->title,
  );
  $t_args = array(
    '@type' => node_type_get_name($node),
    '%title' => $node->title,
  );

  if ($insert) {
    watchdog('content', '@type: added %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
    drupal_set_message(t('@type %title has been created.', $t_args));
  }
  else {
    watchdog('content', '@type: updated %title.', $watchdog_args, WATCHDOG_NOTICE, $node_link);
    drupal_set_message(t('@type %title has been updated.', $t_args));
  }
  if ($node->nid) {
    $form_state['values']['nid'] = $node->nid;
    $form_state['nid'] = $node->nid;
    $form_state['redirect'] = 'node/' . $node->nid  . '/cablecast-push';
  }
  else {
    // In the unlikely case something went wrong on save, the node will be
    // rebuilt and node form redisplayed the same way as in preview.
    drupal_set_message(t('The post could not be saved.'), 'error');
    $form_state['rebuild'] = TRUE;
  }
  // Clear the page and block caches.
  cache_clear_all();

}

function _cablecast_push_field_extract_value($entity_type, $entity, $field_name, $delta = 0, array $options = array()) {
  $value = FALSE;

  // TODO: handle multiple values
  $field_info = field_info_field($field_name);
  $raw = field_extract_values($entity_type, $entity, $field_name);

  // related to a Field API field
  if ($field_info) {
    switch ($field_info['type']) {
      case 'taxonomy_term_reference':
        $items = array();
        foreach ($raw as $tid => $value) {
          $items[] = $raw->name;
        }
        $value = implode(',', $items);
        break;

      case 'entityreference':
        $value = $raw[0]->title;
        break;

      default:
        $value = $raw[0];
        break;
    }
  }
  else {
    $entity_properties = entity_get_property_info($entity_type);
    $field = $entity_properties['properties'][$field_name]['schema field'];

    switch ($field) {
      case 'uid':
        $account = user_load($entity->{$field});
        if (module_exists('civicrm_realname') && !empty($account->display_name)) {
          $value = $account->display_name;
        }
        elseif (module_exists('realname') && !empty($account->realname)) {
          $value = $account->realname;
        }
        else {
          $value = $account->name;
        }
        break;

      default:
        $value = $entity->{$field};
    }
  }


  return $value;
}
