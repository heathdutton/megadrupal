<?php

/** @file
 *  Tightrope Cablecast integration for the Community Media Startertkit
 *  Drupal profile
 */

include_once(drupal_get_path('module', 'cablecast_api') . '/cablecast_api.api.inc');

/**
 * Implements hook_permission().
 */
function cablecast_api_permission() {
  $permissions = array(
    'administer cablecast' => array(
      'title' => t('Administer Cablecast API Configuration'),
      'description' => t('Allows users to access Cablecast settings.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Implements hook_menu()
 *
 * @return array
 */
function cablecast_api_menu() {
  $items = array();
  
  $items['admin/config/cablecast'] = array(
      'title' => 'Cablecast',
      'description' => 'Configuration options for Cablecast modules',
      'position' => 'right',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('administer cablecast'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
      'weight' => -99,
    );
  // Standard Administration settings.
  $items['admin/config/cablecast/api'] = array(
    'title' => 'Cablecast API Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cablecast_api_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer cablecast'),
    'description' => 'Configure system options for Cablecast API.',
  );

  return $items;
}

/**
 * Builds the admininstration settings form.
 */
function cablecast_api_admin_settings($form, &$form_state) {
  $form = array();
  
  if (variable_get('cablecast_api_server_address', NULL) && $version = cablecast_api_get_version()) {
    drupal_set_message(t('Cablecast server available. Version @version.', array('@version' => $version)));
  } else {
    drupal_set_message(t('Could not communicate with Cablecast server. Check your settings.'), 'error');
  }
  
  $form['cablecast_api'] = array(
    '#type' => 'fieldset',
    '#title' => t('Community Media Cablecast Settings'),
    '#collapsable' => FALSE,
  );

  $form['cablecast_api']['cablecast_api_server_address'] = array(
    '#type' => 'textfield',
    '#title' => t('Cablecast Server Address'),
    '#size' => 30,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => variable_get('cablecast_api_server_address', NULL),
    '#description' => t('The URI of your Cablecast FrontDoor without the
    trailing slash. If you access the FrontDoor at
    http://192.168.168.120/FrontDoor/Login.aspx then you would enter
    <strong>http://192.168.168.120</strong>'),
  );

  $form['cablecast_api']['cablecast_api_server_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Cablecast Username'),
    '#size' => 30,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => variable_get('cablecast_api_server_username', NULL),
    '#description' => t('The username for logging into Cablecast. Required for authentication when sending data to Cablecast.'),
  );

  $form['cablecast_api']['cablecast_api_server_password'] = array(
    '#type' => 'password',
    '#title' => t('Cablecast Password'),
    '#size' => 30,
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => variable_get('cablecast_api_server_password', NULL),
    '#description' => t('The password for logging into Cablecast. Required for authentication when sending data to Cablecast.'),
  );
  
  // attempt to lookup locations fails before server IP is configured
  
  if ($serverAddress = variable_get('cablecast_api_server_address', NULL)) {
    foreach (cablecast_api_get_locations()->GetLocationsResult as $locations) {
      $location[$locations->LocationID] = $locations->Name . " [$locations->LocationID]";
    }
       
		$form['cablecast_api']['cablecast_api_location_id'] = array(
			'#type' => 'radios',
			'#size' => 3,
			'#title' => t('Cablecast Location ID'),
			'#required' => FALSE,
			'#options' => $location,
			'#description' => t('The LocationID of the Cablecast Location you would like to sync from.'),
			'#default_value' => variable_get('cablecast_api_location_id', 22),
		);
  
  }
  
  $form['cablecast_api']['timezone'] = array(
    '#type' => 'fieldset',
    '#title' => t('Time zone'),
  );
  $form_state['storage']['zones'] = array();
  
  // get time zones for the form option values
  if (!$form_state['storage']['zones']) {
    $form_state['storage']['zones'] = system_time_zones();
  }
  $zones = $form_state['storage']['zones'];

  $form['cablecast_api']['timezone']['cablecast_api_server_tz'] = array(
   '#type' => 'select',
   '#title' => t('Select the Time Zone of the Cablecast Server'),
   '#options' => $zones,
   '#default_value' => variable_get('cablecast_api_server_tz', date_default_timezone_get()),
   '#description' => t('Set this to the equivalent time zone of the Cablecast server. This information is stored in Main Menu -> Server Setup -> Time Settings of the Cablecast server.'),
  );

  $form['#submit'][] = 'cablecast_api_admin_settings_submit';
  $form = system_settings_form($form);
  return ($form);
}


function _cablecast_api_project_info() {
  $info = array(
    'entity_type'             => 'node',
    'bundle'                  => 'cm_project',
    'cablecast_type'          => 'project',
    'cablecast_id'            => 'ProjectID',
    'fields' => array(
      'ProjectID' => array(
        'drupal_field'    => 'field_cablecast_project_id',
        'directionality'  => 'sync',
        'default_value'   => null,
      ),
      'LocationID'            => array(
        'drupal_field'        => null,
        'directionality'      => 'push',
        'default_value'       => variable_get('cablecast_api_location_id', 22)),
      'Name' => array(
        'drupal_field'    => 'title',
        'directionality'  => 'sync',
        'default_value'   => null,
      ),
      'Description' => array(
        'drupal_field'        => 'body',
        'directionality'      => 'sync',
        'default_value'       => null,
      ),
//      'ProducerID' => array(
//        'drupal_field' => 'author',
//        'directionality' => 'sync',
//        'default_value' => null,
//      ),
    ),
  );
  return $info;
}

function _cablecast_api_show_info() {
  $info = array(
    'entity_type' => 'node',
    'bundle' => 'cm_show',
    'fields' => array(
      'ShowID'                => 'field_cablecast_show_id',
      'LocalID'               => 'Added by API',
      'LocationID'            => variable_get('cablecast_api_location_id', 22),
      'Title'                 => 'title',
      'CGTitle'               => 'title',
      'ProjectID'             => '',
      'CGExempt'              => FALSE,
      'ProducerID'            => '',
      'CategoryID'            => 1,
      'EventDate'             => 'created',
      'Comments'              => '',
      'OnDemand'              => FALSE,
      'OnDemandStatus'        => FALSE,
      'CustomFields'          => FALSE,
      'BugText'               => '',
      'CrawlText'             => '',
      'CrawlLengthInSeconds'  => '',
    ),
  );
  return $info;
}

function _cablecast_api_channel_info() {
  $info = array(
    'entity_type'          => 'taxonomy_term',
    'bundle'               => 'channel',
    'cablecast_type'       => 'channel',
    'cablecast_id'         => 'ChannelID',
    'fields' => array(
      'Name' => array(
        'drupal_field'     => 'name',
        'directionality'   => 'push',
        'default_value'    => null,
      ),
      'ChannelID'          => array(
        'drupal_field'     => 'field_cablecast_channel_id',
        'directionality'   => 'push',
        'default_value'    => null,
      ),
      'PrimaryLocationID'  => array(
        'drupal_field'     => null,
        'directionality'   => 'push',
        'default_value'    => variable_get('cablecast_api_location_id', 22),
      ),
    ),
  );

  return $info;
}

function _cablecast_api_producer_info() {
  $info = array(
    'entity_type' => 'user',
    'bundle' => 'user',
    'cablecast_type'             => 'project',
    'cablecast_id'               => 'ProjectID',
    'fields' => array(
      'LocationID'    => 1,
      'ProducerName'  => variable_get('cablecast_api_location_id', 22),
      'Phone1'        => '',
      'Phone2'        => '',
      'Address'       => '',
      'Notes'         => '',
      'Active'        => 'status',
      'ContactName'   => 'display_name',
      'Email'         => 'mail',
      'Website'       => '',
    ),
  );
  return $info;
}

function cablecast_api_get_client() {
  $client = NULL;
  if ($serverAddress = variable_get('cablecast_api_server_address', NULL)) {
    $client = new SoapClient($serverAddress . "/CablecastWS/CablecastWS.asmx?WSDL", array('cache_wsdl' => 0));
  }
  return $client;
}

/**
 * Sync channels from Cablecast
 *
 */
function _cablecast_api_sync_channels() {
  watchdog('Cablecast API', 'Syncing Channels');

  $channels = cablecast_api_get_channels();

  if(!is_array($channels)) {
    $channels = array($channels);
  }

  $mapping = _cablecast_api_channel_info();
  foreach($channels as $channel) {
    _cablecast_api_sync_cablecast_object($channel, $mapping);
  }

  return $channels;
}



/**
 *
 * Sync a single Cablecast object (from Cablecast to Drupal)
 *
 * @param $cablecast_object
 *
 * @param $mapping
 *
 */
function _cablecast_api_sync_cablecast_object($cablecast_object, $mapping) {

  $entity_info = entity_get_info($mapping['entity_type']);

  //See if we already have the entity in drupal
  $eid = _cablecast_api_get_drupal_eid($cablecast_object->$mapping['cablecast_id'], $mapping, $entity_info['entity keys']['id']);

  if($eid == false) {
    if ($mapping['entity_type'] == 'taxonomy_term') {
      // create a Drupal term
      // first retrieve the parent vocabulary
      $taxonomies = taxonomy_get_vocabularies();
      foreach ($taxonomies as $taxonomy) {
        if ($taxonomy->machine_name == $mapping['bundle']) {
          $parent = $taxonomy;
          break;
        }
      }
      $data = array(
        'name' => $cablecast_object->Name,
        'vid' => $parent->vid, // The VID of the vocabulary this term should be saved under
        'vocabulary_machine_name' => $mapping['bundle'],
      );
      $entity = entity_create($mapping['entity_type'], $data);
      taxonomy_term_save($entity);
    } else {
      // create a Drupal entity
      $entity = entity_create($mapping['entity_type'], array('bundle' => $mapping['bundle']));
    }
  }
  else {
    // sync an existing Drupal entity
    $entity = entity_load($mapping['entity_type'], array($eid));
    $entity = $entity[$eid];
  }
  $entity_wrapper = entity_metadata_wrapper($mapping['entity_type'], $entity);
  if ($eid == false || _cablecast_api_is_cablecast_object_changed($entity_wrapper, $cablecast_object, $mapping)) {
      foreach ($mapping['fields'] as $cablecast_field => $field_settings) {
        if ($field_settings['drupal_field']) {
          $field_wrapper = $entity_wrapper->$field_settings['drupal_field'];
          if ($entity_wrapper->type() == 'taxonomy_term') {
            $field_wrapper->set($cablecast_object->$cablecast_field);
          } else {
            if ($field_wrapper->type() == 'field_item_textsummary') {
              $entity_wrapper->$field_wrapper->set(array('value' => $cablecast_object->$cablecast_field));
            } else {
              $entity_wrapper->$field_wrapper->set($cablecast_object->$cablecast_field);
            }
          }

        }
      }
    $entity_wrapper->save();
  }
}



/**
 * Gets a Drupal user ID from a Cablecast Producer ID if it exists
 *
 * @param $producer_id
 *
 * @return mixed
 */
function _cablecast_api_get_user_id($producer_id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'user')
        ->fieldCondition('field_cablecast_producer_id', 'value', $producer_id, '=')
        ->addMetaData('account', user_load(1)); // Run the query as user 1.

  $result = $query->execute();

  if ($result) {
    foreach ($result['user'] as $user) {
      return $user->uid;
    }
  }
  return 1;
}


/**
 * Returns a Drupal Project entity id from a Cablecast object ID
 *
 *
 * @param $project_id
 *
 * @param $info
 *
 * @return null
 */
function _cablecast_api_get_drupal_eid($cablecast_id, $info, $key) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $info['entity_type'])
        ->entityCondition('bundle', $info['bundle'])
        ->fieldCondition($info['fields'][$info['cablecast_id']]['drupal_field'], 'value', $cablecast_id, '=');

  $result = $query->execute();

  if ($result[$info['entity_type']]) {
    foreach ($result[$info['entity_type']] as $entity) {
      // there should only be one entity so return on the first one
      return $entity->$key;
    }
  }
  return null;
}


/**
 * @param $channel_id
 *
 * @param $info
 * @param $key
 *
 * @return mixed
 */
function _cablecast_api_get_channel_eid($channel_id, $info, $key) {
  $channel_tid = null;
  $taxonomyQuery = new EntityFieldQuery();
  $result = $taxonomyQuery->entityCondition('entity_type', $info['entity_type'])
    ->entityCondition('bundle', $info['bundle'])
    ->fieldCondition($info['fields']['ChannelID'], 'value', $channel_id)
    ->execute();
  if ($result[$info['entity_type']]) {
    foreach ($result[$info['entity_type']] as $entity) {
      // there should only be one project so return on the first one
      return $entity->$key;
    }
  }
  return null;
}



/**
 * Alter a Cablecast date to UTC
 *
 * @param $datetime
 *
 * @internal param $tz
 *
 * @return object - date
 */
function _cablecast_api_alter_date_tz($datetime) {
  $cablecast_tz = variable_get('cablecast_api_server_tz', date_default_timezone_get());

  // instantiate appropriate time zone objects
  $tz = new DateTimeZone($cablecast_tz);
  $utc = new DateTimeZone('UTC');

  // instantiate date object
  $date = new DateTime($datetime, $tz);

  // change timezone of date object to UTC
  $date->setTimezone($utc);

  // return correctly formatted date
  return $date->format('Y-m-d H:i:s');
}

/**
 * Helper function to determine if a selected Drupal channel (term) is different
 * from the Cablecast channel.
 *
 * @param $channel_term
 * @param $channel
 *
 * @return bool
 */
function _cablecast_api_is_channel_changed($entity_wrapper, $project, $mapping) {
  foreach ($mapping['fields'] as $dest_field => $source_field) {
    $field_info = $entity_wrapper->$source_field->info();
    if (isset($field_info['property info'])) {
      // a multi-valued field.
      $value = $entity_wrapper->$source_field->value->value();
    } else {
      // a single-valued field
      $value = $entity_wrapper->$source_field->raw();
    }
    if ($value != $project->$dest_field ) {
      return true;
    }
  }
  return false;
}

/**
 * Helper function to determine if a selected Drupal project is different
 * from the Cablecast Project
 *
 * @param $node
 * @param $project
 *
 * @return bool
 */
function _cablecast_api_is_cablecast_object_changed($entity_wrapper, $cablecast_object, $mapping) {
  foreach ($mapping['fields'] as $cablecast_field => $field_settings) {
    if ($field_settings['drupal_field']) {
      $field_info = $entity_wrapper->$field_settings['drupal_field']->info();
      if (isset($field_info['property info'])) {
        // a multi-valued field.
        $value = $entity_wrapper->$field_settings['drupal_field']->value->value();
      } else {
        // a single-valued field
        $value = $entity_wrapper->$field_settings['drupal_field']->raw();
      }
      if ($value != $cablecast_object->$cablecast_field ) {
        return true;
      }
    }
  }
  return false;
}


/**
 * Helper function to determine if a selected Drupal airing is different
 * from the Cablecast run.
 *
 * @param $airing
 * @param $run
 *
 * @param $channel_tid
 *
 * @internal param $channel_id
 *
 * @return bool
 */
function _cablecast_api_is_airing_changed($airing, $run, $channel_tid) {
  $title = ($airing->field_airing_title[LANGUAGE_NONE][0]['value'] == $run->ShowTitle) ? true : false;
  $channel = ($airing->field_airing_channel[LANGUAGE_NONE][0]['tid'] == $channel_tid) ? true : false;
  $starttime = ($airing->field_airing_date[LANGUAGE_NONE][0]['value'] == $run->UTCStartTime) ? true : false;
  $endtime = ($airing->field_airing_date[LANGUAGE_NONE][0]['value2'] == $run->UTCEndTime) ? true : false;
  $show = ($airing->field_airing_show_ref[LANGUAGE_NONE][0]['nid'] == _cablecast_api_get_show_nid($run->ShowID)) ? true : false;
  $airing_id = ($airing->field_cablecast_airing_id[LANGUAGE_NONE][0]['value'] == $run->ScheduleID) ? true : false;

  return !($airing->field_airing_title[LANGUAGE_NONE][0]['value'] == $run->ShowTitle &&
           $airing->field_airing_channel[LANGUAGE_NONE][0]['tid'] == $channel_tid &&
           $airing->field_airing_date[LANGUAGE_NONE][0]['value'] == $run->UTCStartTime &&
           $airing->field_airing_date[LANGUAGE_NONE][0]['value2']  == $run->UTCEndTime &&
           $airing->field_airing_show_ref[LANGUAGE_NONE][0]['nid'] == _cablecast_api_get_show_nid($run->ShowID) &&
           $airing->field_cablecast_airing_id[LANGUAGE_NONE][0]['value'] == $run->ScheduleID
  );
}