<?php
/**
 * @file
 * Commerce quick add to cart.
 */

/**
 * Implements hook_permission().
 */
function commerce_quickadd_permission() {
  return array(
    'administer commerce_quickadd' => array(
      'title' => t('Administer Commerce quick add'),
      'description' => t('Perform administration tasks for Commerce quick add.'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function commerce_quickadd_block_info() {
  $blocks['commerce_quickadd'] = array(
    'info' => t('Quick add'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function commerce_quickadd_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'commerce_quickadd':
      return array(
        'subject' => t('Quick add'),
        'content' => drupal_get_form('commerce_quickadd_form'),
      );
      break;

  }

  return $block;
}

/**
 * Implements hook_menu().
 */
function commerce_quickadd_menu() {
  $items['admin/commerce/config/quickadd'] = array(
    'title' => 'Commerce quick add',
    'description' => 'Adds a Quick add to cart block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_quickadd_admin_settings_form'),
    'access arguments' => array('administer commerce_quickadd'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'commerce_quickadd.admin.inc',
  );

  $items['quickaddtocart-autocomplete-engine'] = array(
    'page callback' => 'commerce_quickadd_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Quick add form.
 */
function commerce_quickadd_form($form, &$form_state) {
  $form['product'] = array(
    '#title' => t(variable_get('commerce_quickadd_product_label', 'Product')),
    '#type' => 'textfield',
    '#maxlength' => 60,
    '#autocomplete_path' => 'quickaddtocart-autocomplete-engine',
  );

  $form['quantity'] = array(
    '#title' => t(variable_get('commerce_quickadd_quantity_label', 'Quantity')),
    '#type' => 'textfield',
    '#default_value' => 1,
    '#maxlength' => 2,
    '#size' => 1,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t(variable_get('commerce_quickadd_submit_value', 'Add to cart')),
  );

  $description = variable_get('commerce_quickadd_description', 'Add products directly to your cart by entering the article number and quantity and click the add to cart button.');
  if ($description) {
    $form['description'] = array(
      '#markup' => '<div class="quickadd-description">' . t($description) . '</div>',
    );
  }

  return $form;
}

/**
 * Quick add form validate handler.
 */
function commerce_quickadd_form_validate($form, &$form_state) {
  if (!is_numeric($form_state['values']['quantity']) || $form_state['values']['quantity'] <= 0) {
    form_set_error('quantity', t('You must specify a valid quantity to add to the cart.'));
  }

  $product = FALSE;

  $values = explode(' (id: ', $form_state['values']['product']);
  $product_id = (isset($values[1])) ? trim($values[1], ')') : FALSE;

  if ($product_id) {
    $product = commerce_product_load($product_id);
  }
  elseif ($form_state['values']['product']) {
    $addby = variable_get('commerce_quickadd_addby', 'title');

    if ($addby == 'title') {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'commerce_product', '=');
      $query->propertyCondition('status', 1);
      $query->propertyCondition('title', trim($form_state['values']['product']));
      $query->range(0, 1);
      $result = $query->execute();

      if (isset($result['commerce_product'])) {
        $product = commerce_product_load(key($result['commerce_product']));
      }
    }
    else {
      $product = commerce_product_load_by_sku(trim($form_state['values']['product']));
    }
  }

  if ($product && $product->status && commerce_product_access('view', $product)) {
    $form_state['values']['product'] = $product->product_id;
  }
  else {
    form_set_error('product', t('Product is invalid.'));
  }
}

/**
 * Quick add form submit handler.
 */
function commerce_quickadd_form_submit($form, &$form_state) {
  global $user;

  $product = commerce_product_load($form_state['values']['product']);
  $data = array('context' => array());

  foreach (commerce_info_fields('commerce_product_reference', 'node') as $name => $field) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node', '=');
    $query->propertyCondition('status', 1);
    $query->fieldCondition($name, 'product_id', $product->product_id, '=');
    $result = $query->execute();

    if ($result) {
      $data['context']['display_path'] = 'node/' . key($result['node']);
      break;
    }
  }

  $quantity = $form_state['values']['quantity'];
  $line_item_type = variable_get('commerce_quickadd_line_item_type', '');

  $line_item = commerce_product_line_item_new($product, $quantity, FALSE, $data, $line_item_type);

  commerce_cart_product_add($user->uid, $line_item);
}

/**
 * Menu callback for autocomplete result.
 */
function commerce_quickadd_autocomplete($text=FALSE) {
  if ($text === FALSE) {
    drupal_exit();
  }

  $addby = variable_get('commerce_quickadd_addby', 'title');
  $product_type = variable_get('commerce_quickadd_product_type', 0);

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_product');

  if ($product_type) {
    $query->entityCondition('bundle', $product_type);
  }

  $query->propertyCondition($addby, '%' . db_like($text) . '%', 'LIKE');
  $query->propertyCondition('status', 1);
  $query->range(0, variable_get('commerce_quickadd_result_limit', 10));
  $query->propertyOrderBy($addby, 'ASC');

  $result = $query->execute();

  $json_output = array();

  if (isset($result['commerce_product'])) {
    $products = entity_load('commerce_product', array_keys($result['commerce_product']));

    foreach ($products as $product) {
      if (commerce_product_access('view', $product)) {
        $key = $product->{$addby} . ' (id: ' . $product->product_id . ')';
        $json_output[$key] = '<div class="reference-autocomplete">' . $product->{$addby} . '</div>';
      }
    }
  }

  drupal_json_output($json_output);
}
