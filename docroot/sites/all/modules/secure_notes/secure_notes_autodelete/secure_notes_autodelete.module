<?php

/**
 * @file
 *
 * Hook implementations and helper function for automatically deleting secure
 * note nodes after they have been viewed by users.
 */

/**
 * Implements hook_node_view().
 *
 * Add pickup confirmation button to nodes that have been dropped off via a
 * secure notes token.
 */
function secure_notes_autodelete_node_view($node, $view_mode, $langcode) {
  if (secure_notes_type_enabled($node->type)) {
    $dropoff = secure_nodes_autodelete_node_is_dropoff($node);
    $marked = secure_notes_autodelete_marked($node);
    if ($dropoff && !$marked) {
      $node->content['secure_notes_pickup'] = array(
        'form' => drupal_get_form('secure_notes_autodelete_pickup_confirm_form_' . $node->nid, $node->nid),
        '#weight' => 10,
      );
    }
    elseif ($marked > 0 && $dropoff && $view_mode == 'full') {
      $username = user_load($marked)->name;
      $messages = drupal_get_messages('status', FALSE);
      $messages = isset($messages['status']) ? $messages['status'] : array();
      $set = FALSE;
      foreach ($messages as $message) {
        if ($message == t('The secure note %title has been marked as "picked up" and is scheduled for deletion.', array('%title' => $node->title))) {
          $set = TRUE;
        }
      }
      if (!$set) {
        drupal_set_message(t('This node has been marked for deletion by user %username. It will be automaticially removed on the next cron run.', array('%username' => $username)), 'warning');
      }
    }
  }
}

/**
 * Implements hook_forms().
 *
 * Allow multiple autodelete pickup forms to be displayed on the same page if
 * necessary.
 */
function secure_notes_autodelete_forms($form_id, $args) {
  $forms = array();
  if (substr($form_id, 0, 44) == 'secure_notes_autodelete_pickup_confirm_form_') {
    $forms[$form_id] = array('callback' => 'secure_notes_autodelete_pickup_confirm_form');
  }
  return $forms;
}

/**
 * For to create a "pickup complete" button on secure note nodes.
 */
function secure_notes_autodelete_pickup_confirm_form($form, $form_state, $nid) {
  $form['pickup_nid'] = array(
    '#type' => 'value',
    '#value' => $nid,
  );

  $form['pickup_confirm'] = array(
    '#type' => 'submit',
    '#value' => t('Pickup complete'),
  );

  $form['pickup_instructions'] = array(
    '#type' => 'item',
    '#description' => t('Once you have sucessfully retrieved this data, confirm the pickup to mark the node for automatic removal.'),
  );

  return $form;
}

/**
 * Submit handler for picking up a secure note.
 *
 * @see secure_notes_autodelete_pickup_confirm_form()
 */
function secure_notes_autodelete_pickup_confirm_form_submit($form, $form_state) {
  global $user;
  $entry = array('nid' => $form_state['values']['pickup_nid'], 'uid' => $user->uid);
  $title = db_query('SELECT title FROM {node} WHERE nid = :nid', array(':nid' => $form_state['values']['pickup_nid']))->fetchField();
  try {
    drupal_write_record('secure_notes_autodelete', $entry);
    drupal_set_message(t('The secure note %title has been marked as "picked up" and is scheduled for deletion.', array('%title' => $title)), 'status');
  }
  catch (PDOException $e) {
    if ($e->getCode() == 23000) {
      drupal_set_message(t('This node is already marked as picked up. No need to remark it.'), 'warning');
    }
  }
}

/**
 * Helper function to determine of a node is a dropped off node that was created
 * via a token.
 *
 * @param $node A node object.
 *
 * @return TRUE if the node is a dropped off node created via token.
 */
function secure_nodes_autodelete_node_is_dropoff($node) {
  $result = db_query('SELECT nid FROM {secure_notes_dropoff} WHERE nid = :nid', array(':nid' => $node->nid))->fetchField();
  return ($result > 0);
}

/**
 * Helper function to determine if a given node has already been marked for
 * deletion.
 *
 * @param $node A node object.
 *
 * @return Mixed, the user uid who marked the node for delteion or FALSE if the
 *   node is unmarked.
 */
function secure_notes_autodelete_marked($node) {
  $result = db_query('SELECT uid FROM {secure_notes_autodelete} WHERE nid = :nid', array(':nid' => $node->nid))->fetchField();
  return $result;
}

/**
 * Implements hook_secure_notes_token_used().
 *
 * When a token has been used mark it as a dropoff or mark it as picked up and
 * thus put it in the queue for deletion.
 */
function secure_notes_autodelete_secure_notes_token_used($token_data, $token_type, $node) {
  switch ($token_type) {
    case 'view':
      // Only mark nodes for deletion if there are no tokens left.
      $tokens_left = db_query('SELECT nid FROM {secure_notes_view} WHERE nid = :nid AND token <> :token',
        array(':nid' => $node->nid, ':token' => $token_data['token']))
        ->fetchField();
      if ($tokens_left === FALSE) {
        $entry = array('nid' => $node->nid, 'uid' => 0);
        drupal_write_record('secure_notes_autodelete', $entry);
      }
      break;
    case 'create':
      $entry = array('nid' => $node->nid);
      drupal_write_record('secure_notes_dropoff', $entry);
      break;
  }
}

/**
 * Implements hook_cron().
 *
 * Delete the nodes and associated autodelete data on cron runs.
 */
function secure_notes_autodelete_cron() {
  $nids = db_query('SELECT nid FROM {secure_notes_autodelete}')->fetchCol();
  if (!empty($nids)) {
    node_delete_multiple($nids);
    db_delete('secure_notes_autodelete')
      ->condition('nid', $nids, 'IN')
      ->execute();
    db_delete('secure_notes_dropoff')
      ->condition('nid', $nids, 'IN')
      ->execute();
    watchdog('secure notes autodelete', 'Automatically deleted retreived secure notes on cron run. Nodes with the following nids were deleted: %nids', array('%nids' => implode($nids, ', ')));
  }
}
