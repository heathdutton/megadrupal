<?php

/**
 * @file
 * Adds an option to the Appearance page to set an overlay theme.
 */

/**
 * Shows the Overlay theme on every page except the listed pages.
 */
define('OVERLAY_THEME_VISIBILITY_NOTLISTED', 0);

/**
 * Shows the Overlay theme on only the listed pages.
 */
define('OVERLAY_THEME_VISIBILITY_LISTED', 1);

/**
 * Shows the Overlay theme if the associated PHP code returns TRUE.
 */
define('OVERLAY_THEME_VISIBILITY_PHP', 2);

/**
 * Implements hook_custom_theme().
 */
function overlay_theme_custom_theme() {
  // At this stage, the overlay is not yet initialized, so wen can't call
  // overlay_get_mode(). We try to replicate the behavior of overlay_init().
  global $user;
  $use_overlay = user_access('access overlay') && (!isset($user->data['overlay']) || $user->data['overlay']);
  if (!$use_overlay) {
    return;
  }

  $child_mode = isset($_GET['render']) && $_GET['render'] == 'overlay' && !isset($_SESSION['overlay_close_dialog']);
  if ($child_mode) {
    $settings = variable_get('overlay_theme');
    // Page match code borrowed from block.module.
    $pages = drupal_strtolower($settings['pages']);
    if ($settings['visibility'] < OVERLAY_THEME_VISIBILITY_PHP) {
      $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
      $page_match = drupal_match_path($path, $pages);
      if ($path != $_GET['q']) {
        $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
      }
      $page_match = !($settings['visibility'] xor $page_match);
    }
    elseif (module_exists('php')) {
      $page_match = php_eval($settings['pages']);
    }
    else {
      $page_match = FALSE;
    }

    if ($page_match) {
      return $settings['theme'];
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function overlay_theme_module_implements_alter(&$implementations, $hook) {
  // Move our implementation of the custom_theme hook to the bottom to override
  // the administration theme settings.
  if ($hook == 'custom_theme') {
    $group = $implementations['overlay_theme'];
    unset($implementations['overlay_theme']);
    $implementations['overlay_theme'] = $group;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function overlay_theme_form_system_themes_admin_form_alter(&$form, &$form_state) {
  $defaults = array('theme' => 0, 'visibility' => OVERLAY_THEME_VISIBILITY_NOTLISTED, 'pages' => '');
  $settings = variable_get('overlay_theme', $defaults);

  // Use the administration theme section as model.
  $form['overlay_theme'] = $form['admin_theme'];
  $form['overlay_theme']['#title'] = t('Administration theme in overlays');
  $form['overlay_theme']['overlay_theme'] = $form['overlay_theme']['admin_theme'];
  $form['overlay_theme']['overlay_theme']['#title'] = t('Overlay theme');
  $form['overlay_theme']['overlay_theme']['#default_value'] = $settings['theme'];

  // The administration theme doesn't need to be active to be used, but we don't
  // have this privilege, so only present options for active themes.
  $theme_options = array(t('Default theme'));
  foreach (list_themes() as $key => $theme) {
    if ($theme->status) {
      $theme_options[$key] = $theme->info['name'];
    }
  }
  $form['overlay_theme']['overlay_theme']['#options'] = $theme_options;
  $form['overlay_theme']['overlay_theme']['#description'] .= ' ' . t("Only active themes are available as overlay themes.");

  // Options to limit visibility of the Overlay theme by page or PHP code,
  // borrowed from block.admin.inc
  $php_access = user_access('use PHP for settings');
  if ($settings['visibility'] == OVERLAY_THEME_VISIBILITY_PHP && !$php_access) {
    $form['overlay_theme']['visibility'] = array(
      '#type' => 'value',
      '#value' => OVERLAY_THEME_VISIBILITY_PHP,
    );
    $form['overlay_theme']['pages'] = array(
      '#type' => 'value',
      '#value' => $settings['pages'],
    );
  }
  else {
    $visibility_options = array(
      OVERLAY_THEME_VISIBILITY_NOTLISTED => t('All pages except those listed'),
      OVERLAY_THEME_VISIBILITY_LISTED => t('Only the listed pages'),
    );
    $description = t("Specify pages by using their paths. Enter one path per line. The '*' character is a wildcard. %front is the front page. Note that these are the paths of pages loaded inside the overlay, not those of the parent page. When the Overlay theme is not selected, display will fall back to the Administration theme selected above.", array('%front' => '<front>'));

    if (module_exists('php') && $php_access) {
      $visibility_options += array(OVERLAY_THEME_VISIBILITY_PHP => t('Pages on which this PHP code returns <code>TRUE</code> (experts only)'));
      $title = t('Pages or PHP code');
      $description .= ' ' . t('If the PHP option is chosen, enter PHP code between %php. Note that executing incorrect PHP code can break your Drupal site.', array('%php' => '<?php ?>'));
    }
    else {
      $title = t('Pages');
    }
    $form['overlay_theme']['visibility'] = array(
      '#type' => 'radios',
      '#title' => t('Show overlay theme on specific pages'),
      '#options' => $visibility_options,
      '#default_value' => $settings['visibility'],
    );
    $form['overlay_theme']['pages'] = array(
      '#type' => 'textarea',
      '#title' => '<span class="element-invisible">' . $title . '</span>',
      '#default_value' => $settings['pages'],
      '#description' => $description,
    );
  }

  // Move the submit buttom at the bottom of the form.
  $form['actions'] = $form['admin_theme']['actions'];
  unset($form['overlay_theme']['node_admin_theme'], $form['overlay_theme']['admin_theme'], $form['overlay_theme']['actions'], $form['admin_theme']['actions']);
  $form['#submit'][] = 'overlay_theme_system_themes_admin_form_submit';
}

/**
 * Process overlay_theme's altered system_themes_admin_form form submissions.
 */
function overlay_theme_system_themes_admin_form_submit($form, &$form_state) {
  variable_set('overlay_theme', array('theme' => $form_state['values']['overlay_theme'], 'visibility' => $form_state['values']['visibility'], 'pages' => $form_state['values']['pages']));
}
