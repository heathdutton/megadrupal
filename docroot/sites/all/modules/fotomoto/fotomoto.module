<?php
define('FOTOMOTO_NODE_DISPLAY_TEASER_ONLY', 1); // Used only on teaser view
define('FOTOMOTO_NODE_DISPLAY_FULL_ONLY', 2);   // Used only on full node
define('FOTOMOTO_NODE_DISPLAY_BOTH', 3);        // Used on full node as well as on teaser

/** @file
    * Implements hook_init ().
    * This hook calls initially.
    */
function fotomoto_init() {
    drupal_add_css(drupal_get_path('module', 'fotomoto') . '/fotomoto.css');
    global $user;
    if (!field_info_field('field_fotomoto_store_id') && $user->uid == 1 ) {
  drupal_set_message(t('Fotomoto_store_id field not available. Please create a field fotomoto_store_id in User profile.'), 'error');
    }
  }

/** @file
    * Implements hook_help ().
    *
    * Displays help and module information.
    *
    * @param path
    *   Which path of the site we're using to display help
    * @param arg
    *   Array that holds the current path as returned from arg() function
    */
function fotomoto_help($path, $arg) {
  switch ($path) {
    case "admin/help#fotomoto":
      return '<p>' . t("Intergrate drupal website with fotomoto.") . '</p>';
      break;
  }
}

    /**  @file
    * Implements hook_permission ().
    */
function fotomoto_permission() {
  return array(
    'access fotomoto content' => array(
      'title' => t('Access content for the fotomoto module'),
  )
  );
  }

    /** @file
    * Implements hook_menu ().
    */
function fotomoto_menu() {
    $items=array();
  $items['admin/config/media/fotomoto'] = array(
     'title' => 'Fotomoto',
     'description' => 'Configuration for Fotomoto module',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('fotomoto_form'),
     'access arguments' => array('access administration pages'),
     'type' => MENU_NORMAL_ITEM,
    );
    return $items;
}

    /** @file
    * Form function, called by drupal_get_form()
    * in current_posts_menu().
    */
function fotomoto_form($form, &$form_state) {
    // First, setup variables we will need.
  // Get the path variables setup.
  $my_path = drupal_get_path('module', 'fotomoto');
  $current_options_array = fotomoto_get_options_array();
  global $base_url;
  // Create an array of node types.
  $node_type_array = node_type_get_types();
  $node_type_options = array();
  foreach ($node_type_array as $k => $v) {
    $node_type_options[$k] = $v->name;
    }
    // Figure out which nodeTypes are currently selected
    $nodes_string = $current_options_array['nodeType'];
    $nodes_selected = explode(",", $nodes_string);
    // Create the variables for publisher keys.
    $widget_selected = $current_options_array['widget'];
    $form['options']['node_option'] = array(
     '#type'          => 'checkboxes',
     '#title'         => t('Node types'),
     '#description'   => t('Select the node types for which you want to activate <strong>fototmoto</strong>.'),
     '#options'       => $node_type_options,
     '#default_value' => $nodes_selected
    );
    $form['options']['widget_option'] = array(
     '#type'          => 'select',
     '#title'         => t('Widget and fototmoto display'),
     '#description'   => t('When will the <strong>fotomoto</strong> widget be displayed?'),
     '#default_value' => $widget_selected,
     '#options'       => array(
      FOTOMOTO_NODE_DISPLAY_TEASER_ONLY => 'Teaser only',
      FOTOMOTO_NODE_DISPLAY_FULL_ONLY => 'Full display only',
      FOTOMOTO_NODE_DISPLAY_BOTH => 'Both teaser and full'),
    );
    $form['options']['submit'] = array(
     '#type' => 'submit',
     '#value' => t('Submit form')
    );
   // return system_settings_form($form);
  return $form;
}
 /** @file
 * This is the submit function for fotomoto_form
 */
function fotomoto_form_submit($form, &$form_state) {
//print_r($form);
    // Record the Store ID option.  Since it's a text field, remove anything that resembles code
    // Record the NodeType option.
    if (isset($form_state['input']['node_option'])) {
      $record = (object) NULL;
      $record->fotomoto_option = "nodeType";
      $node_string = "";
      foreach ($form_state['input']['node_option'] as $k => $v) {
        $node_string .= $v . ",";
      }
      variable_set('fotomoto_node_types', $node_string);
    }
    else {
      $record = (object) NULL;
      $record->fotomoto_option = "nodeType";
    }
    // Record the Widget Option .
    //echo"<pre>"; print_r($form_state['input']); echo"</pre>"; die();
    if (isset($form_state['input']['widget_option'])) {
      $record = (object) NULL;
      $record->fotomoto_option = "widget";
      $widget_value = $form_state['input']['widget_option'];
  variable_set('fotomoto_node_widget_show', $widget_value);
    }
    else {
      $record = (object) NULL;
      $record->fotomoto_option = "widget";
    }
    drupal_set_message(t("Thank you! Your preferences have been saved."));
}
/** @file
 * Implements hook_node_view ().
 *
 * Inserts fotomoto widget code onto each node view.
 * TODO: Want to add the option somewhere to select nodes.
 *
 * @param node
 *   The node that is being acted upon
 * @param view_mode
 *   The type of view (teaser, full, etc)
 * @param langcode
 *   Information about the language
 */
function fotomoto_node_view($node, $view_mode, $langcode) {
  global $_fotomoto_store_id;
  // Don't display if searched
  if ($view_mode == 'search_result' || $view_mode == 'search_index') {
  return;
  }
    // First get all of the options for the Fotomoto widget from the database:
    $data_options = fotomoto_get_options_array();
     //print_r($data_options);
    // This looks to see if the path variable has been posted by some rewrite module.
    // This is not super efficient, O(N), but N is often less than 20.
    $is_path = FALSE;
    foreach ($node as $k => $v) {
      if ($k == "path") {
  $is_path = TRUE;
  }
    }
    // This will choose the path to use.
    if ($is_path) {
      $path_module = $node->path;
    }
    else {
      $path_module = "/node/" . $node->nid;
    }
    // Pathauto integration !
    if (module_exists('pathauto')) {
      $path_module ='/';
      $path_module .= drupal_lookup_path('alias', "node/" . $node->nid);
    }
    global $base_url;
    global $_fotomoto_teaser;
    // Get the full path to insert into the fotomoto Buttons.
    $mpath = $base_url . $path_module;
    $mtitle = $node->title;
    /* For Multiple User Storeid */
    $node_uid= $node->uid;
    $uid=user_load($node_uid);
    global $user;
    $user_id=$user->uid;
  if (field_info_field("field_fotomoto_store_id") && !empty($uid->field_fotomoto_store_id['und'][0]['value']) && $user_id == $node_uid) {
    $_fotomoto_store_id=$uid->field_fotomoto_store_id['und'][0]['value'];
  }
  elseif (field_info_field("field_fotomoto_store_id") && (empty($uid->field_fotomoto_store_id['und'][0]['value'])) && $user_id==$node_uid) {
  global $base_url;
  $uid= $user->uid;
  drupal_set_message(check_plain(t('You have not entered your Fotomoto Store Id in your Profile')) . '<a href="' . $base_url . '/user/' . $uid . '/edit"> Click here </a> to enter your Store Id', 'error');
  }
    // Only display the fotomoto buttons if this node fits all the requirements
    if (strpos($data_options['nodeType'], $node->type) !== FALSE) { // Make sure this is the right type of node.
     //This puts the fotomoto on the node and adds the necessary scripts.
    if (($data_options['widget'] == 1) && ($view_mode=='teaser') ) { // Displays only node teaser
      $node->content['field_fotomoto_store_id'] = array(
        '#markup' => get_fotomoto_HTML($data_options , $mpath , $mtitle , $_fotomoto_store_id),
        '#weight' => 10
        );
    }
    if ($data_options['widget'] == 2 && ($view_mode=='full')) {  // Displays only  full node
       //This puts the fotomoto on the node and adds the necessary scripts.
        $node->content['field_fotomoto_store_id'] = array(
        '#markup' => get_fotomoto_HTML($data_options , $mpath , $mtitle , $_fotomoto_store_id),
        '#weight' => 10
      );
    }
    if ($data_options['widget'] == 3 && ($view_mode=='full' || $view_mode=='teaser')) { // Displays full node as well as teaser
       //This puts the fotomoto on the node and adds the necessary scripts.
        $node->content['field_fotomoto_store_id'] = array(
  '#markup' => get_fotomoto_HTML($data_options , $mpath , $mtitle , $_fotomoto_store_id),
        '#weight' => 10
      );
    }
  }
}
 /** @file
  * get_fotomoto_HTML is the function that creates the Fotomoto code
  * It returns the appropriate html based on your settings.
  */
function get_fotomoto_HTML($data_options , $mpath , $mtitle , $_fotomoto_store_id) {
    global $_fotomoto_user_store_id;
  $_fotomoto_user_store_id=$_fotomoto_store_id;
  $fotomoto_script = "<script type='text/javascript' src='http://widget.fotomoto.com/stores/script/$_fotomoto_user_store_id.js'></script>
  <noscript>If Javascript is disabled browser, to place orders please visit the page where I
  <a href='http://my.fotomoto.com/store/$_fotomoto_user_store_id'>sell my photos</a>,
  powered by <a href='http://my.fotomoto.com'>Fotomoto</a>.</noscript>";
  return $fotomoto_script;
}
/** @file
 * FotomotoGetOptionArray is a helper function for DB access.
 *
 * Returns options that have been stored in the database.
 */
function fotomoto_get_options_array() {
  $node_widget = variable_get('fotomoto_node_widget_show');
  $node_types = variable_get('fotomoto_node_types');
  $options_arr = array('nodeType' => $node_types,  'widget' => $node_widget);
  return $options_arr;
}