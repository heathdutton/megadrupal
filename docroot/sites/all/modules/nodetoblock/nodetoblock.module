<?php
/**
 * @file
 * Enables editors to create block from an existing node.
 */

/**
 * Implements hook_permission().
 */
function nodetoblock_permission() {
  return array(
    'administer node to blocks' => array(
      'title' => t('Administer node to blocks'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function nodetoblock_menu() {
  $items['nodetoblock/node-autocomplete'] = array(
    'title' => 'Node autocomplete',
    'page callback' => 'nodetoblock_node_autocomplete',
    'access arguments' => array('administer node to blocks'),
    'type' => MENU_CALLBACK,
    'file' => 'nodetoblock.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function nodetoblock_block_info() {
  $blocks = array();
  $nodeblocks = db_query("SELECT nid FROM {nodetoblock}")->fetchAllAssoc('nid');

  if ($nodeblocks) {
    $nodes = node_load_multiple(array_keys($nodeblocks));
    foreach ($nodes as $node) {
      $blocks[$node->nid] = array(
        'info' => t('Node to block: @title', array('@title' => $node->title)),
        'cache' => DRUPAL_CACHE_PER_ROLE,
      );
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function nodetoblock_block_configure($delta = '') {
  $node = node_load($delta);
  // Get view mode list.
  $view_modes = _nodetoblock_get_node_view_modes();

  $query = db_select('nodetoblock', 'nb');
  $query->fields('nb')
    ->condition('nb.nid', $node->nid);
  $result = $query->execute()->fetchAssoc();

  $form = array();
  $form['old_nid'] = array(
    '#type' => 'value',
    '#value' => $delta,
  );
  $form['nid'] = array(
    '#type' => 'textfield',
    '#title' => t('Renderable node'),
    '#default_value' => "{$node->title} ($node->nid)",
    '#autocomplete_path' => 'nodetoblock/node-autocomplete',
  );
  $form['view_mode'] = array(
    '#type' => 'select',
    '#title' => t('Default view mode'),
    '#options' => $view_modes,
    '#default_value' => $result['view_mode'],
  );

  return $form;
}

/**
 * Implements hook_block_save().
 */
function nodetoblock_block_save($delta = '', $edit = array()) {
  preg_match('/\(([0-9]*)\)$/', $edit['nid'], $matches);
  if (isset($matches[1])) {
    // Update the original record in block related tables.
    db_update('block')
      ->fields(array(
        'delta' => $matches[1],
      ))
      ->condition('module', 'nodetoblock')
      ->condition('delta', $edit['old_nid'])
      ->execute();
    db_update('block_role')
      ->fields(array(
        'delta' => $matches[1],
      ))
      ->condition('module', 'nodetoblock')
      ->condition('delta', $edit['old_nid'])
      ->execute();
    cache_clear_all();

    // Insert the new record into nodetoblock table.
    db_delete('nodetoblock')->condition('nid', $edit['old_nid'])->execute();
    db_insert('nodetoblock')
      ->fields(array(
        'nid' => $matches[1],
        'view_mode' => $edit['view_mode'],
      ))
      ->execute();
  }
}

/**
 * Implements hook_block_view().
 */
function nodetoblock_block_view($delta = '') {
  $node = node_load($delta);

  $query = db_select('nodetoblock', 'nb');
  $query->fields('nb')
    ->condition('nb.nid', $node->nid);
  $result = $query->execute()->fetchAssoc();
  if ($result) {
    $block['subject'] = $node->title;
    $block['content'] = node_view($node, $result['view_mode']);
    return $block;
  }

  return NULL;
}

/**
* Implements hook_entity_info_alter().
*/
function nodetoblock_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['nodetoblock'] = array(
    'label' => t('Node to block'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_preprocess_node().
 *
 * Hide title on the node if the view mode is nodetoblock because the block's
 * title will the node title. By default if we set the page variable TRUE, the
 * node.tpl.php won't render the title.
 *
 * @param $variables
 */
function nodetoblock_preprocess_node(&$variables) {
  if ($variables['view_mode'] == 'nodetoblock') {
    $variables['page'] = TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nodetoblock_form_node_type_form_alter(&$form, $form_state) {
  if (isset($form['type'])) {
    // Get view mode list.
    $view_modes = _nodetoblock_get_node_view_modes();

    // Build the settings form.
    $form['nodetoblock'] = array(
      '#type' => 'fieldset',
      '#title' => t('Node to block settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
      '#attributes' => array(
        'class' => array('nodetoblock-node-settings-form'),
      ),
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'nodetoblock') . '/nodetoblock-node-form.js'),
       ),
    );
    $form['nodetoblock']['nodetoblock_enable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable node to block on the node edit form'),
      '#description' => t('If you check this, the edit will be able to create or remove the block from the node add/edit form.'),
      '#default_value' => variable_get('nodetoblock_enable_' . $form['#node_type']->type),
    );
    $form['nodetoblock']['nodetoblock_view_mode'] = array(
      '#type' => 'select',
      '#title' => t('Default view mode'),
      '#options' => $view_modes,
      '#default_value' => variable_get('nodetoblock_view_mode_' . $form['#node_type']->type, 'nodetoblock'),
      '#states' => array(
        'visible' => array(
         ':input[name="nodetoblock_enable"]' => array('checked' => TRUE),
        ),
      ),
    );
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function nodetoblock_form_node_form_alter(&$form, $form_state) {
  $node = $form['#node'];
  if (variable_get("nodetoblock_enable_$node->type")) {
    // Get view mode list.
    $view_modes = _nodetoblock_get_node_view_modes();

    $form['nodetoblock'] = array(
      '#type' => 'fieldset',
      '#access' => user_access('administer node to blocks'),
      '#title' => t('Node to block settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
      '#attributes' => array(
        'class' => array('nodetoblock-node-settings-form'),
      ),
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'nodetoblock') . '/nodetoblock-node-form.js'),
       ),
    );
    $form['nodetoblock']['nodetoblock_enable'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable a block form this node'),
      '#default_value' => $node->nodetoblock_enable,
    );
    $form['nodetoblock']['nodetoblock_view_mode'] = array(
      '#type' => 'select',
      '#title' => t('View mode'),
      '#options' => $view_modes,
      '#default_value' => $node->nodetoblock_view_mode,
      '#states' => array(
        'visible' => array(
         ':input[name="nodetoblock_enable"]' => array('checked' => TRUE),
        ),
      ),
    );
  }
}

/**
 * Implements hook_node_prepare().
 */
function nodetoblock_node_prepare($node) {
  if (!isset($node->nodetoblock) && variable_get("nodetoblock_enable_$node->type")) {
    // New node or an existing.
    if (!isset($node->nid)) {
      $result = FALSE;
    }
    else {
      $query = db_select('nodetoblock', 'nb');
      $query->fields('nb')
        ->condition('nb.nid', $node->nid);
      $result = $query->execute()->fetchAssoc();
    }
    if ($result) {
      $node->nodetoblock_enable = 1;
      $node->nodetoblock_view_mode = $result['view_mode'];
    }
    else {
      $node->nodetoblock_enable = 0;
      $node->nodetoblock_view_mode = variable_get('nodetoblock_view_mode_' . $node->type, 'nodetoblock');
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function nodetoblock_node_delete($node) {
  db_delete('nodetoblock')->condition('nid', $node->nid)->execute();

  // Delete from block tables too.
  db_delete('block')
    ->condition('module', 'nodetoblock')
    ->condition('delta', $node->nid)
    ->execute();
  db_delete('block_role')
    ->condition('module', 'nodetoblock')
    ->condition('delta', $node->nid)
    ->execute();
  drupal_set_message(t('The block from this node has been removed.'));
  cache_clear_all();
}

/**
 * Implements hook_node_insert().
 */
function nodetoblock_node_insert($node) {
  nodetoblock_node_save($node);
}

/**
 * Implements hook_node_insert().
 */
function nodetoblock_node_update($node) {
  nodetoblock_node_save($node);
}

/**
 * Saves the created block's view mode into database.
 *
 * @param $node
 */
function nodetoblock_node_save($node) {
  db_delete('nodetoblock')->condition('nid', $node->nid)->execute();
  if (variable_get("nodetoblock_enable_$node->type") && $node->nodetoblock_enable) {
    db_insert('nodetoblock')
      ->fields(array(
        'nid' => $node->nid,
        'view_mode' => $node->nodetoblock_view_mode,
      ))
      ->execute();
  }
}

/**
 * Returns with the node entity's defined view modes.
 */
function _nodetoblock_get_node_view_modes() {
  $view_modes = &drupal_static(__FUNCTION__);

  if (!isset($view_modes)) {
    $entity_info = entity_get_info('node');
    foreach ($entity_info['view modes'] as $maschine_name => $view_mode) {
      $view_modes[$maschine_name] = $view_mode['label'];
    }
  }

  return $view_modes;
}
