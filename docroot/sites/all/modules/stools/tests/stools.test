<?php
/**
 * Tests
 */

/**
 * StoolsTests tests
 */
class StoolsTests extends DrupalWebTestCase {
  /**
   * Simple test info
   */
  public static function getInfo() {
    return array(
      'name' => 'Some tools tests',
      'description' => 'Tests the stools module',
      'group' => 'Stools',
    );
  }

  /**
   * Set up
   */
  public function setUp() {
    parent::setUp(array('stools'));
  }

  /**
   * Test stools_concat_field_values().
   */
  public function testFieldConcatValues() {
    $entity = new stdClass();
    $entity->field_example = array(
      LANGUAGE_NONE => array(
        array(
          'value' => 'abc',
        ),
      ),
    );
    $entity->field_second_example = array(
      LANGUAGE_NONE => array(
        array(
          'value' => 'def',
        ),
      ),
    );

    $this->assertEqual(stools_concat_field_values($entity, array('field_example', 'field_second_example')), 'abc, def');
  }

  /**
   * Test stools_field_has_value().
   */
  public function testFieldHasValue() {
    $entity = new stdClass();
    $entity->field_name = array(
      LANGUAGE_NONE => array(
        array(
          'value' => 123,
        ),
      ),
    );
    $this->assertTrue(stools_field_has_value($entity, 'field_name'));

    $entity->field_name = array(
      LANGUAGE_NONE => array(
        array(
          'target_id' => 123,
        ),
      ),
    );
    $this->assertTrue(stools_field_has_value($entity, 'field_name'));

    $entity->field_name = array(
      LANGUAGE_NONE => array(
        array(
          'asdf' => 123,
        ),
      ),
    );
    $this->assertTrue(stools_field_has_value($entity, 'field_name'));
  }

  /**
   * Test stools_field_has_value() when no value is present
   */
  public function testFieldHasValueReturnsFalse() {
    $entity = new stdClass();
    $entity->field_name = array();

    $this->assertFalse(stools_field_has_value($entity, 'field_name'));
    $entity->field_name = array(LANGUAGE_NONE => array());
    $this->assertFalse(stools_field_has_value($entity, 'field_name'));

    $entity->field_name[LANGUAGE_NONE][0] = array('value' => NULL);
    $this->assertFalse(stools_field_has_value($entity, 'field_name'));
  }

  /**
   * Test stools_field_value().
   */
  public function testFieldValue() {
    $entity = new stdClass();
    $entity->field_name = array(
      LANGUAGE_NONE => array(
        array(
          'value' => 123,
        ),
      ),
    );

    $this->assertEqual(stools_field_value($entity, 'field_name'), 123);

    $entity->field_name = array(
      LANGUAGE_NONE => array(
        array(
          'value' => 123,
        ),
        array(
          'value' => 456,
        ),
      ),
    );
    $result = stools_field_value($entity, 'field_name');
    $this->assertTrue(is_array($result));
    $this->assertEqual($result[0], 123);
    $this->assertEqual($result[1], 456);
  }

  /**
   * Test stools_field_value() with target_id.
   */
  public function testFieldValueWithTargetId() {
    $entity = new stdClass();
    $entity->field_name = array(
      LANGUAGE_NONE => array(
        array(
          'target_id' => 123,
        ),
      ),
    );

    $this->assertEqual(stools_field_value($entity, 'field_name'), 123);

    $entity->field_name = array(
      LANGUAGE_NONE => array(
        array(
          'target_id' => 123,
        ),
        array(
          'target_id' => 456,
        ),
      ),
    );
    $result = stools_field_value($entity, 'field_name');
    $this->assertTrue(is_array($result));
    $this->assertEqual($result[0], 123);
    $this->assertEqual($result[1], 456);
  }

  /**
   * Test stools_string_startswith().
   */
  public function testStartswith() {
    $this->assertTrue(stools_string_startswith('hello', 'he'));
    $this->assertTrue(stools_string_startswith('hello', 'hello'));
    $this->assertFalse(stools_string_startswith('hello', 'ello'));
    $this->assertFalse(stools_string_startswith('hello', 'hello, world'));
  }

  /**
   * Test stools_string_endswith().
   */
  public function testEndswith() {
    $this->assertTrue(stools_string_endswith('hello', 'lo'));
    $this->assertTrue(stools_string_endswith('hello', 'llo'));
    $this->assertTrue(stools_string_endswith('hello', 'hello'));
    $this->assertFalse(stools_string_endswith('hello', 'world'));
    $this->assertFalse(stools_string_endswith('hello', 'hello, world'));
  }

}
