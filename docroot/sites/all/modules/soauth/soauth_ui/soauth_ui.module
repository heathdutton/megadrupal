<?php

use Drupal\soauth\Service;

/**
 * Implements of Drupal's hook_form_alter().
 * Alter SoAuth settings form and as option also Drupal's user login and 
 * registration forms too.
 */
function soauth_ui_form_alter(&$form, $form_state, $form_id) {
  // Get settings from Drupa's vatiable storage
  $embed = variable_get('soauth_ui_embed', array());
  $hide = variable_get('soauth_ui_hide', array());
  $weight = variable_get('soauth_ui_weight', 9999);
  
  // Alter SoAuth settings form
  if ($form_id === 'soauth_settings_form') {
    
    // Alter form submission handler
    array_unshift($form['#submit'], 'soauth_ui_settings_form_submit');
    
    $form['ui'] = array(
      '#type' => 'fieldset',
      '#title' => t('Interface'),
      '#weight' => -1,
      '#tree' => TRUE,
    );
    
    $form['ui']['embed'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Enable Social Networks login on:'),
      '#options' => array(
        'user_login' => t('User login form'),
        'user_register_form' => t('User registration form')),
      '#default_value' => $embed,
    );
    
    $form['ui']['hide'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Disable default Drupal forms:'),
      '#options' => array(
        'user_login' => t('User login form'),
        'user_register_form' => t('User registration form'),),
      '#default_value' => $hide,
      '#description' => t('With these options enabled user login and registration will be possible only via social networks.'),
    );
    
    $form['ui']['weight'] = array(
      '#type' => 'radios',
      '#title' => t('Buttons position in the form:'),
      '#options' => array(
        -9999 => t('Top'),
         9999 => t('Bottom'),),
      '#default_value' => $weight,
    );
    
    return;
  }
  
  if (in_array($form_id, $hide)) {

  }
  
  // Alter form if it's id in array
  if (in_array($form_id, $embed)) {    
    $html = '';
    
    if ($form_id === 'user_login') {
      $html .= '<h2>Login with</h2>';
    }
    elseif ($form_id === 'user_register_form') {
      $html .= '<h2>Register with</h2>';
    }
    
    // Get available SoAuth providers
    $providers = Service::getInstance()
      ->getProviders();
    
    $form['soauth_ui'] = array(
      '#weight' => $weight,
      '#markup' => $html.theme('soauth_providers', array(
        'providers' => $providers,)),
    );
  }
}

/**
 * Implements of Drupal's hook_form_submit().
 * Save settings.
 * @param array $form
 * @param array $form_state
 */
function soauth_ui_settings_form_submit($form, &$form_state) {
  // Get settings form values and convert them to suitable format
  $embed_enabled = $form_state['values']['ui']['embed'];
  $hide_enabled = $form_state['values']['ui']['hide'];
 
  variable_set('soauth_ui_embed', array_keys($embed_enabled, TRUE));
  variable_set('soauth_ui_hide', array_keys($hide_enabled, TRUE));
  variable_set('soauth_ui_weight', $form_state['values']['ui']['weight']);
}

/**
 * Implements of Drupal's hook_theme().
 * Add theme info.
 * @return array
 */
function soauth_ui_theme() {
  return array(
    'soauth_providers' => array(
      'variables' => array(
        'providers' => NULL,),),
    'soauth_action' => array(
      'variables' => array(
        'provider' => NULL,
        'action' => '',),), 
  );
}

/**
 * Implements of Drupal's hook_block_info().
 * Add Drupal's block.
 * @return array
 */
function soauth_ui_block_info() {
  $blocks['login'] = array(
    'info' => t('SoAuth login'),
  );
  return $blocks;
}

/**
 * Implements of Drupal's hook_block_view().
 * Provide Drupal's block.
 * @return array
 */
function soauth_ui_block_view($delta='') {
  // Construct block
  $block = array();
  
  // Get all available providers
  $providers = Service::getInstance()
    ->getProviders();
  
  switch ($delta) {
    case 'login':
      $block['subject'] = t('Login or register with');
      $block['content'] = theme('soauth_providers', array(
        'providers' => $providers
      ));
      break;
  }
  
  return $block;
}

/**
 * Implements theme hook function.
 * Theme block with provider-connect actions.
 */
function theme_soauth_providers($variables) {
  // Push our custom stylesheet
  drupal_add_css(drupal_get_path('module', 'soauth_ui').'/css/soauth_ui.css');
  drupal_add_css(drupal_get_path('module', 'soauth_ui').'/css/font-awesome.css');
  
  // Get plugin to theme in block
  $providers = $variables['providers'];
  
  // Sort providers
  uasort($providers, function ($left, $right) {
    return $left->getWeight() - $right->getWeight();
  });
  
  // Add prefix
  $html = '<div class="soauth-plugins">';
  
  // Theme links
  foreach ($providers as $provider) {
    $html .= theme('soauth_action', array(
      'provider' => $provider,
      'action' => 'connect',
    ));
  }
  
  // Add suffix
  $html .= '</div>';
  
  return $html;
}

/**
 * Implements Drupal's hook_theme().
 * Theme plugin action link.
 */
function theme_soauth_action($variables) {
  // Get provider object and action name
  $provider = $variables['provider'];
  $action = $variables['action'];
  
  $icons = array(
    'facebook' => '<i class="fa fa-facebook"></i> ',
    'google' => '<i class="fa fa-google-plus"></i> ',
    'linkedin' => '<i class="fa fa-linkedin"></i> ',
    'vkontakte' => '<i class="fa fa-vk"></i> ',
    'twitter' => '<i class="fa fa-twitter"></i> ',
    'instagram' => '<i class="fa fa-instagram"></i>'
  );
  
  $link = '<a href="'.$provider->buildActionUrl($action).'" class="'
    . 'soauth-link soauth-'.$provider->getName().'">'
    . $icons[$provider->getName()].$provider->getFullName().'</a>';
  
  return $link;
}