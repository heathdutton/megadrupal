<?php

use Drupal\soauth\Service;

use Drupal\soauth\Common\Url;
use Drupal\soauth\Common\Session;
use Drupal\soauth\Common\Callback;

use Drupal\soauth\Manager\AccountManager;
use Drupal\soauth\Common\Entity\User;

use Drupal\soauth\Error\SoAuthError;


/**
 * Implements of Drupal's hook_menu().
 * Add item's to menu system.
 * @return array
 */
function soauth_menu() {
  $items['soauth/%soauth_provider/%'] = array(
    'title' => 'Provider action',
    'page callback' => 'soauth_provider_action',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['admin/config/people/soauth'] = array(
    'title' => 'Social authorization settings',
    'description' => 'Configure site for integration with social networks.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('soauth_settings_form'),
    'access arguments' => array('administer soauth'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

/**
 * Implents of Drupal's hook_permission().
 * Define user permissions.
 * @return array
 */
function soauth_permission() {
  return array(
    'administer soauth' => array(
      'title' => t('Administer SoAuth'),
      'description' => t('Peroform administration tasks for SoAuth'),),
  );
}

/**
 * Implements of Drupal's hook_theme().
 * Define some theme hooks.
 */
function soauth_theme() {
  return array(
    'providers_form' => array(
      'render element' => 'form',),
  );
}

/**
 * Implements of auto-load wildcard function.
 * Load SoAuth provider by name.
 * @param string $name
 * @return AbstractBaseProvider|FALSE
 */
function soauth_provider_load($name) {  
  try {
    return Service::getInstance()
      ->getProvider($name);      
  } 
  catch (SoAuthError $error) {
    $error->logMessage();
  }
  return FALSE;  
}

/**
 * Implements of Drupal's menu callback.
 * Do action with requested soauth provider.
 * @param AbstractBaseProvider $provider
 * @param string $action
 */
function soauth_provider_action($provider, $action) {
  // Get query parameters
  $query = drupal_get_query_parameters();
  
  // Transform the name of the action to a function name and make
  // full callback name.
  $method = 'action'.ucfirst($action);
  
  // Make full callback signature
  $callback = array($provider, $method);
  
  try {
    Callback::tryInvoke($callback, $query);
  } 
  catch (SoAuthError $error) {
    $error->logMessage();
  }
  
  drupal_goto($provider->getDestinationUrl());
}

/**
 * Implements of Drupal's hook_form().
 * Build SoAuth settings form.
 * @param array $form
 * @param array $form_state
 * @return array
 */
function soauth_settings_form($form, &$form_state) {  
  // Get SoAuth global settings
  $settings = Service::getInstance()
    ->getSettings();
  
  // Get SoAuth providers
  $providers = Service::getInstance()
    ->getProviders();
  
  // Mapping settings
  $adv_mapping = $settings->get('mapping', 0);
  $adv_mapping_map = $settings->get('mapping_map', array());
  
  $form['notice'] = array(
    '#type' => 'fieldset',
    '#title' => t('Notifications'),
    '#weight' => -1,
    '#tree' => TRUE,
  );
  
  $form['notice']['after_login'] = array(
    '#type' => 'fieldset',
    '#title' => t('After login'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  
  $form['notice']['after_login']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Drupal message after login'),
    '#default_value' => $settings->get('after_login_message_enabled', TRUE),
  );
  
  $form['notice']['after_login']['message'] = array(
    '#type' => 'textfield',
    '#states' => array(
      'disabled' => array(
        ':input[name="notice[after_login][enabled]"]' => array('checked' => FALSE),),),
    '#title' => '',
    '#description' => t('Please, use @provider placeholder for provider name.'),
    '#default_value' => $settings->get('after_login_message_text', 
      'You successfully logged in with your @provider account.'),
  );
  
  $form['notice']['after_registration'] = array(
    '#type' => 'fieldset',
    '#title' => t('After registration'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  
  $form['notice']['after_registration']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Drupal message after registration'),
    '#default_value' => $settings->get('after_registration_message_enabled', TRUE),
  );
  
  $form['notice']['after_registration']['message'] = array(
    '#type' => 'textfield',
    '#states' => array(
      'disabled' => array(
        ':input[name="notice[after_registration][enabled]"]' => array('checked' => FALSE),),),
    '#title' => '',
    '#description' => t('Please, use @provider placeholder for provider name.'),
    '#default_value' => $settings->get('after_registration_message_text', 
      'You successfully registered with your @provider account.'),
  );
  
  $form['mapping'] = array(
    '#type' => 'fieldset',
    '#title' => t('Field mapping'),
    '#weight' => 0,
    '#tree' => TRUE,
  );
  
  $form['mapping']['mode'] = array(
    '#type' => 'radios',
    '#title' => 'Mapping mode',
    '#options' => array(
      0 => t('Basic'),
      1 => t('Advanced'),),
    '#default_value' => $adv_mapping,
  );
  
  $form['mapping']['map'] = array(
    '#type' => 'fieldset',
    '#states' => array(
      'invisible' => array(
        ':input[name="mapping[mode]"]' => array('value' => 0),),),
    '#title' => t('Advanced mapping'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Put data, received via social networks API into the following user profile fields'),
    '#tree' => TRUE,
  );

  // Get fields for 'user' bundle
  $fields = field_info_instances('user');

  foreach ($fields['user'] as $name => $info) {
    $form['mapping']['map'][$name] = array(
      '#type' => 'select',
      '#title' => $info['label'],
      '#options' => array(
        'id' => t('User ID'),
        'mail' => t('User mail'),
        'first_name' => t('First name'),
        'last_name' => t('Last name'),
        // Compound fields are the same as simple, but separeted with '+'
        'first_name+last_name' => t('First name + Last name'),
        'last_name+first_name' => t('Last name + First name'),),
      '#default_value' => (isset($adv_mapping_map[$name]) ? $adv_mapping_map[$name] : -1),
      '#empty_value' => -1,
      '#empty_option' => t('Disabled'),
    );
  }
  
  $form['providers'] = array(
    '#type' => 'fieldset',
    '#title' => t('Providers'),
    '#weight' => 1,
  );
  
  // Build table rows
  $rows = array();
  
  // Sort providers
  uasort($providers, function ($left, $right) {
    return $left->getWeight() - $right->getWeight();
  });
  
  foreach ($providers as $name => $provider) {
    $rows[$name] = $provider->makeSettingsForm();
  }
  
  $form['providers']['form'] = array(
    '#theme' => 'providers_form',
    '#header' => array(
      t('Provider'),
      t('Weight'),
      t('App ID'),
      t('App Secret'),
      t('App Scope'),),
    'rows' => $rows,
  );
  
  $form['actions'] = array(
    '#type' => 'actions',
  );
  
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  
  return $form;
}

/**
 * Implement's of Drupal's hook_ajax().
 * Render new mapping map.
 */
function soauth_settings_form_ajax($form, &$form_state) {
  return $form['mapping']['map'];
}

/**
 * Implements of Drupal's hook_form_submit().
 * Submit SoAuth configuration form.
 * @param array $form
 * @param array $form_state
 */
function soauth_settings_form_submit($form, &$form_state) {
  // Get SoAuth settings
  $settings = Service::getInstance()
    ->getSettings();
  
  // Get SoAuth providers
  $providers = Service::getInstance()
    ->getProviders();
  
  // Mapping settings
  $mapping = $form_state['values']['mapping']['mode'];
  $mapping_map = $form_state['values']['mapping']['map'];
  
  $settings->set('mapping', $mapping);
  $settings->set('mapping_map', array_filter($mapping_map, function($field) {
    return !($field == -1); // Exclude disabled fields
  }));
  
  // Submit settings for each provider
  foreach ($providers as $name => $provider) {
    $provider->submitSettings($form_state['values'][$name]);
  }
  
  // Notification settings
  $notice_after_login = $form_state['values']['notice']['after_login']['enabled'];
  $notice_after_login_text = $form_state['values']['notice']['after_login']['message'];
  $notice_after_registration = $form_state['values']['notice']['after_registration']['enabled'];
  $notice_after_registration_text = $form_state['values']['notice']['after_registration']['message'];
  
  $settings->set('after_login_message_enabled', $notice_after_login);
  $settings->set('after_login_message_text', $notice_after_login_text);
  $settings->set('after_registration_message_enabled', $notice_after_registration);
  $settings->set('after_registration_message_text', $notice_after_registration_text);
}

/**
 * Implements of Drupal's theme callback.
 * Theme providers form table.
 * @param array $variables
 * @return array
 */
function theme_providers_form(&$variables) {
  // Get passed form
  $form = $variables['form'];
  
  // Table rows and header
  $header = $form['#header'];
  $rows = $form['rows'];
  
  // Setup structure to be rendered and returned.
  $table = array(
    '#attributes' => array(
      'id' => 'providers-form'),
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => array(),
  );
  
  // Traverse each row
  foreach (element_children($rows) as $row_index) {
    $row = array();
    
    // Traverse each column in the row
    foreach (element_children($rows[$row_index]) as $col_index) {
      // Render the column form element
      $row[] = drupal_render($rows[$row_index][$col_index]);
    }
    
    // Add the row to the table
    $table['#rows'][] = array(
      'data' => $row,
      'class' => array(
        'draggable',),
    );
  }
  
  // Add draggable table behaviour
  drupal_add_tabledrag('providers-form', 'order', 'sibling', 'provider-weight');
  
  // Render the table and return
  return drupal_render($table);
}

/**
 * Implements of Drupal's hook_user_delete().
 * Delete user accounts
 */
function soauth_user_delete($account) {
  AccountManager::getManagerFor(new User($account->uid))
    ->delAccounts();
}

/**
 * Implements Drupal's hook_modules_insalled().
 * Invoke install hook for providers.
 */
function soauth_modules_installed($modules) {
  foreach ($modules as $module) {
    if (is_callable($loader = $module.'_soauth_provider_load')) {
      $loader()->setDefaults();
    }
  }
}
