<?php

/**
 * Implements hook_module_implements_alter().
 */
function cachedblock_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'block_list_alter') {
    // Set our implementation to be the last one.
    $implementation = $implementations['cachedblock'];
    unset($implementations['cachedblock']);
    $implementations['cachedblock'] = $implementation;
  }
}

/**
 * Implements hook_block_list_alter().
 */
function cachedblock_block_list_alter(&$blocks) {
  global $theme_key;

  foreach ($blocks as &$block) {
    if (!isset($block->theme) || !isset($block->status) || $block->theme != $theme_key || $block->status != 1) {
      continue;
    }
    $conf = _cachedblock_block_list($block->module, $block->delta);
    if (!empty($conf->status)) {
      // Overwrite block identifiers.
      $block->module = 'cachedblock';
      $block->delta = $conf->bid;
      $block->cache = DRUPAL_CACHE_CUSTOM;
    }
  }
}

/**
 * Implements hook_block_view().
 */
function cachedblock_block_view($delta = '') {
  $delta = intval($delta);
  $list = _cachedblock_block_list();

  if (empty($list[$delta]->status)) {
    return array();
  }

  $show_timings = user_access('administer blocks');
  $start_time = $show_timings ? microtime(TRUE) : 0;

  $block = $list[$delta];
  $data = array();

  $cid = NULL;
  $cacheable = ($_SERVER['REQUEST_METHOD'] == 'GET' || $_SERVER['REQUEST_METHOD'] == 'HEAD');

  if ($cacheable) {
    $cid = _cachedblock_get_cache_id($block);
  }
  if (!empty($cid)) {
    $cached_block = cache_get($cid, 'cache_block');
    if (!empty($cached_block)) {
      $data = $cached_block->data;
      if ($show_timings) {
        $data['content']['#cachedblock_contextual_links'][] = t('Cached: @time ms.', array('@time' => round((microtime(TRUE) - $start_time) * 1000, 2)));
      }
    }
  }

  if (empty($data)) {
    // See the discussion https://drupal.org/node/1460766.
    $before = array(
      'head' => drupal_add_html_head(),
      'css' => drupal_add_css(),
      'js' => drupal_add_js(),
      'headers' => drupal_get_http_header(),
    );
    $before['settings'] = isset($before['js']['settings']['data']) ? $before['js']['settings']['data'] : array();
    unset($before['js']['settings']);

    $data = module_invoke($block->module, 'block_view', $block->delta);
    $delta = str_replace('-', '_', $block->delta);
    drupal_alter(array('block_view', "block_view_{$block->module}_{$delta}"), $data, $block);

    $after = array(
      'head' => drupal_add_html_head(),
      'css' => drupal_add_css(),
      'js' => drupal_add_js(),
      'headers' => drupal_get_http_header(),
    );
    $after['settings'] = isset($after['js']['settings']['data']) ? $after['js']['settings']['data'] : array();
    unset($after['js']['settings']);

    $array_mapping_func = function_exists('drupal_array_diff_assoc_recursive') ? 'drupal_array_diff_assoc_recursive' : 'array_diff_assoc';

    if (isset($data['content'])) {
      if (is_array($data['content'])) {
        $contextual_links = isset($data['content']['#contextual_links']) ? $data['content']['#contextual_links'] : array();
        $views_contextual_links = isset($data['content']['#views_contextual_links_info']) ? $data['content']['#views_contextual_links_info'] : array();
        unset($data['content']['#contextual_links']);
        unset($data['content']['#views_contextual_links_info']);
        // Do not miss attached assets.
        $attached = isset($data['content']['#attached']) ? $data['content']['#attached'] : array();
        unset($data['content']['#attached']);
        $data['content'] = array('content' => array('#markup' => drupal_render($data['content'])));
        if (!empty($attached)) {
          $data['content']['#attached'] = $attached;
        }
        if (!empty($contextual_links)) {
          $data['content']['#contextual_links'] = $contextual_links;
        }
        if (!empty($views_contextual_links)) {
          $data['content']['#views_contextual_links_info'] = $views_contextual_links;
        }
      }
      else {
        $data['content'] = array('content' => array('#markup' => $data['content']));
      }
      foreach ($before as $key => $before_data) {
        $data['content']['#cachedblock_attached'][$key] = _cachedblock_asset_diff($after[$key], $before_data, $array_mapping_func);
      }
      if ($show_timings) {
        $data['content']['#cachedblock_contextual_links'][] = t('Build: @time ms.', array('@time' => round((microtime(TRUE) - $start_time) * 1000, 2)));
      }
    }

    if (isset($cid)) {
      $expire = CACHE_TEMPORARY;
      drupal_alter('cachedblock_expire', $expire, $block);
      cache_set($cid, $data, 'cache_block', $expire);
    }
  }
  elseif (isset($data['content']['#cachedblock_attached'])) {
    // Restore assets.
    if (!empty($data['content']['#cachedblock_attached']['head'])) {
      drupal_add_html_head($data['content']['#cachedblock_attached']['head']);
    }
    foreach ($data['content']['#cachedblock_attached']['css'] as $css) {
      drupal_add_css($css['data'], $css);
    }
    foreach ($data['content']['#cachedblock_attached']['js'] as $js) {
      drupal_add_js($js['data'], $js);
    }
    foreach ($data['content']['#cachedblock_attached']['settings'] as $settings) {
      drupal_add_js($settings, 'setting');
    }
    foreach ($data['content']['#cachedblock_attached']['headers'] as $name => $value) {
      drupal_add_http_header($name, $value);
    }
  }

  // Overwrite the overwritten block identifiers to the original values.
  $data['module'] = $block->module;
  $data['delta'] = $block->delta;

  return $data;
}

/**
 * Implements hook_ctools_plugin_post_alter().
 */
function cachedblock_ctools_plugin_post_alter(&$plugin, &$info) {
  if (($plugin['module'] === 'ctools') && (isset($plugin['name'])) && ($plugin['name'] === 'block')) {
    $plugin['render callback'] = 'cachedblock_ctools_plugin_render_block';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cachedblock_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
  cachedblock_settings_form($form, $form_state, $form_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cachedblock_form_block_add_block_form_alter(&$form, &$form_state, $form_id) {
  cachedblock_settings_form($form, $form_state, $form_id);
}

function cachedblock_settings_form(&$form, &$form_state, $form_id) {
  $conf = _cachedblock_block_list($form['module']['#value'], $form['delta']['#value']);
  if ((empty($conf)) || (is_array($conf))) {
    $conf = new stdClass();
    $conf->module = $form['module']['#value'];
    $conf->delta = $form['delta']['#value'];
    $conf->status = 0;
    $conf->cache = DRUPAL_CACHE_PER_ROLE;
    $conf->settings = '';
  }
  if (!empty($conf->settings)) {
    $conf->settings = unserialize($conf->settings);
  }
  else {
    $conf->settings = array();
  }

  $block_cache_options = array(
    DRUPAL_CACHE_GLOBAL => t('Cache once for everything (global)'),
    DRUPAL_CACHE_PER_PAGE => t('Per page'),
    DRUPAL_CACHE_PER_ROLE => t('Per role'),
    DRUPAL_CACHE_PER_ROLE | DRUPAL_CACHE_PER_PAGE => t('Per role per page'),
    DRUPAL_CACHE_PER_USER => t('Per user'),
    DRUPAL_CACHE_PER_USER | DRUPAL_CACHE_PER_PAGE => t('Per user per page'),
  );

  $form['settings']['cachedblock'] = array(
    '#type' => 'select',
    '#title' => t('Cache this block'),
    '#description' => t('Enforce block caching even if node access modules are installed.'),
    '#weight' => 2,
    '#options' => array(0 => t('No'), 1 => t('Yes')),
    '#default_value' => $conf->status,
  );

  $form['settings']['cachedblock_type'] = array(
    '#type' => 'select',
    '#title' => t('Cache setting'),
    '#description' => t('Select the appropriate cache setting for this block.'),
    '#weight' => 3,
    '#options' => $block_cache_options,
    '#default_value' => $conf->cache,
  );

  drupal_alter('cachedblock_form', $form, $conf);

  $form['#submit'][] = 'cachedblock_settings_form_submit';
}

function cachedblock_settings_form_submit($form, &$form_state) {
  if ($form_state['values']['form_id'] == 'block_admin_configure' || $form_state['values']['form_id'] == 'block_add_block_form') {
    $conf = _cachedblock_block_list($form_state['values']['module'], $form_state['values']['delta']);
    if ((empty($conf)) || (is_array($conf))) {
      $conf = new stdClass();
      $conf->module = $form_state['values']['module'];
      $conf->delta = $form_state['values']['delta'];
      $conf->status = 0;
      $conf->cache = DRUPAL_CACHE_PER_ROLE;
      $conf->settings = '';
    }
    if (!empty($conf->settings)) {
      $conf->settings = unserialize($conf->settings);
    }
    else {
      $conf->settings = array();
    }

    if ((intval($conf->status) === 0) && (intval($form_state['values']['cachedblock']) === 0)) {
      // Do not store unneeded settings.
      return;
    }

    $conf->status = intval($form_state['values']['cachedblock']);
    $conf->cache = intval($form_state['values']['cachedblock_type']);

    drupal_alter('cachedblock_settings', $conf, $form_state['values']);

    if (!empty($conf->settings)) {
      $conf->settings = serialize($conf->settings);
    }
    else {
      $conf->settings = NULL;
    }

    if (empty($conf->bid)) {
      drupal_write_record('cachedblock', $conf);
    }
    else {
      drupal_write_record('cachedblock', $conf, array('bid'));
    }
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function cachedblock_contextual_links_view_alter(&$element, $items) {
  if (isset($element['#element']['#block'])) {
    $block = $element['#element']['#block'];
    $conf = _cachedblock_block_list($block->module, $block->delta);
    if (!empty($conf->status)) {
      if (!empty($element['#element']['#cachedblock_contextual_links'])) {
        $element['#links']['cachedblock-stat'] = array('title' => implode(' ', $element['#element']['#cachedblock_contextual_links']));
      }
    }
  }
}

function _cachedblock_block_list($module = NULL, $delta = NULL) {
  static $list = NULL;

  if (is_null($list)) {
    $list = db_select('cachedblock', 'b')->fields('b')->execute()->fetchAllAssoc('bid');
  }

  if (isset($module) && isset($delta)) {
    $delta = strval($delta);
    foreach ($list as $conf) {
      if (($conf->module === $module) && ($conf->delta === $delta)) {
        return $conf;
      }
    }
    return NULL;
  }

  return $list;
}

function _cachedblock_asset_diff(array $assets, array $start_assets, $diff_function) {
  $diff = $diff_function($assets, $start_assets);

  // Cleanup the resulting array since drupal_array_diff_assoc_recursive() can
  // leave half populated arrays behind.
  foreach ($diff as $key => $entry) {
    // If only the weight was different we can remove this entry.
    if (count($entry) == 1 && isset($entry['weight'])) {
      unset($diff[$key]);
    }
    // If there are other differences we override with the latest entry.
    elseif ($entry != $assets[$key]) {
      $diff[$key] = $assets[$key];
    }
  }
  return $diff;
}

function _cachedblock_get_cache_id($block) {
  $cid_parts[] = $block->module;
  $cid_parts[] = $block->delta;
  $cid_parts = array_merge($cid_parts, drupal_render_cid_parts($block->cache));

  return implode(':', $cid_parts);
}

function cachedblock_clear_block_cache($module, $delta) {
  cache_clear_all($module . ':' . $delta . ':', 'cache_block', TRUE);
}

function cachedblock_ctools_plugin_render_block($subtype, $conf) {
  list($module, $delta) = _ctools_block_get_module_delta($subtype, $conf);

  $info = _ctools_get_block_info($module, $delta);

  $cachedblock_conf = _cachedblock_block_list($module, $delta);
  $block = (empty($cachedblock_conf->status)) ? module_invoke($module, 'block_view', $delta) : cachedblock_block_view($cachedblock_conf->bid);

  if ((!empty($info)) && (empty($cachedblock_conf->status))) {
    // Allow modules to modify the block before it is viewed, via either
    // hook_block_view_alter() or hook_block_view_MODULE_DELTA_alter().
    drupal_alter(array('block_view', "block_view_{$module}_{$delta}"), $block, $info);
  }
  $block = (object) $block;

  if (empty($block)) {
    return NULL;
  }

  $block->module = $module;
  $block->delta = $delta;

  if (!isset($block->title)) {
    if ($module == 'block' && !empty($info) && isset($info->title)) {
      $block->title = $info->title;
    }
    elseif (isset($block->subject)) {
      $block->title = $block->subject;
    }
    else {
      $block->title = NULL;
    }
  }

  if (module_exists('block') && user_access('administer blocks')) {
    $block->admin_links = array(
      array(
        'title' => t('Configure block'),
        'href' => "admin/structure/block/manage/$module/$delta/configure",
        'query' => drupal_get_destination(),
      ),
    );
    if (!empty($block->content['#cachedblock_contextual_links'])) {
      $block->admin_links[] = array('title' => implode(' ', $block->content['#cachedblock_contextual_links']));
    }

  }

  return $block;
}
