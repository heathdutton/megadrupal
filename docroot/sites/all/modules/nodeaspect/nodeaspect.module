<?php


/**
 * Implements hook_perm().
 */
function nodeaspect_perm() {
  return nodeaspect_info()->hook_perm();
}


/**
 * Implements hook_menu().
 */
function nodeaspect_menu() {
  $items = nodeaspect_info()->hook_menu();
  return $items;
}


/**
 * Implements hook_pagapi()
 */
function nodeaspect_pageapi($api) {
  nodeaspect_page_info_cache()->hook_pageapi($api);
}


/**
 * Implements hook_menu_alter()
 */
function nodeaspect_menu_alter(&$items) {
  nodeaspect_info()->hook_menu_alter($items);
}


/**
 * Implements hook_nodeaspect_page__(), for node/%.
 */
function nodeaspect_nodeaspect_page__($node, $api) {
  // This is the main node/% route, with emtpy suffix.
  $api->title($node->title);
  $api->pageTitle(check_plain($node->title));
  $api->viewMode('full');
  // We make this easy to override, by setting a low override weight.
  $api->override(-10);
}


/**
 * Implements hook_nodeaspect_page__view(), for node/%/view.
 */
function nodeaspect_nodeaspect_page__view($node, $api) {
  // This is the main node/% route, with emtpy suffix.
  $api->title(t('View'));
  // We make this easy to override, by setting a low override weight.
  $api->override(-10);
}


/**
 * Implements hook_entity_info_alter().
 */
function nodeaspect_entity_info_alter(&$entity_info) {
  nodeaspect_info()->hook_entity_info_alter($entity_info);
}


/**
 * Implements hook_preprocess_page()
 */
function nodeaspect_preprocess_page(&$vars) {
  nodeaspect_page_info_cache()->hook_preprocess_page($vars);
}


// Access, title and page callbacks
// -----------------------------------------------------------------------------


/**
 * Access callback for node/%/$suffix
 */
function nodeaspect_page_access($node, $suffix = '') {
  return nodeaspect_page_info($node, $suffix)->access();
}


/**
 * Title callback for node/%/$suffix
 */
function nodeaspect_page_title($node, $suffix = '') {
  return nodeaspect_page_info($node, $suffix)->title();
}


/**
 * Page callback for node/%/$suffix.
 */
function nodeaspect_page($node, $suffix = '') {
  return nodeaspect_page_info_cache()->page($node, $suffix);
}


// Static cache stuff
// -----------------------------------------------------------------------------


/**
 * Get information collected from hook_nodeaspect()
 *
 * @param $reset :boolean
 *   True for cache reset.
 *
 * @return :nodeaspect_InfoWrapper
 *   Object with information about menu entries, permissions and build modes.
 */
function nodeaspect_info($reset = FALSE) {
  static $_info;
  if ($reset) {
    $_info = NULL;
  }
  if (!isset($_info)) {
    $_info = _nodeaspect_info_build();
  }
  return $_info;
}


function _nodeaspect_info_build() {
  $pages = array();
  $view_modes = array();
  $api = new nodeaspect_InjectedAPI_hookNodeaspect($pages, $view_modes);
  module_invoke_all('nodeaspect', $api);
  return new nodeaspect_InfoWrapper($pages, $view_modes);
}


/**
 * Get information collected from hook_nodeaspect_page[__$suffix]()
 *
 * @param $node :stdClass
 *   The node object
 * @param $suffix :string
 *   The path suffix for node/%/$suffix.
 *
 * @return :nodeaspect_PageWrapper
 *   Object that implements access, title and page callback.
 */
function nodeaspect_page_info($node, $suffix) {
  return nodeaspect_page_info_cache()->pageInfo($node, $suffix);
}


function nodeaspect_page_info_cache() {
  static $_cache;
  if (!isset($_cache)) {
    $_cache = new nodeaspect_PageInfoCache();
  }
  return $_cache;
}


function _nodeaspect_page_info_build($node, $suffix) {
  $info = array();
  $info_tmp = array();
  $api = new nodeaspect_InjectedAPI_hookNodeaspectPage($info_tmp);
  if (preg_match('#[a-zA-Z0-9_]*#', $suffix)) {
    // $suffix is a valid function suffix.
    // Try the very specific hook.
    foreach (module_implements('nodeaspect_page__' . $suffix) as $module) {
      $f = $module . '_nodeaspect_page__' . $suffix;
      $info_tmp = array('override' => 0, 'module' => $module);
      $f($node, $api);
      if (!isset($info['override']) || $info_tmp['override'] > $info['override']) {
        if (!empty($info_tmp['access']) || strlen($info_tmp['title'])) {
          $info = $info_tmp;
        }
      }
    }
  }
  foreach (module_implements('nodeaspect_page') as $module) {
    $f = $module . '_nodeaspect_page';
    $info_tmp = array('override' => 0, 'module' => $module);
    $f($node, $suffix, $api);
    if (!isset($info['override']) || $info_tmp['override'] > $info['override']) {
      if (!empty($info_tmp['access']) || @strlen($info_tmp['title'])) {
        $info = $info_tmp;
      }
    }
  }
  $info['access'] = @$info['access'] && node_access('view', $node);
  $info += array(
    // Use the defaults from node_show().
    'render as teaser' => FALSE,
    'render as page' => TRUE,
    'render links' => TRUE,
    'tab' => TRUE,
    'weight' => 0,
  );
  return new nodeaspect_PageInfo($info);
}
