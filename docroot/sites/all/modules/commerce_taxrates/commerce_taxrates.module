<?php

/**
 * @file
 * Calculate Sales Tax using TaxRates from TaxRates.com
 *
 * Copyright (C) adTumbler, Inc, adTumbler.com
 */

define('COMMERCE_TAXRATES_BASIC_VERSION', 'basic');
define('COMMERCE_TAXRATES_PRO_VERSION', 'pro');

/**
 * Implements hook_page_alter().
 */
function commerce_taxrates_page_alter() {
  $path = current_path();
  if (module_exists('commerce_tax') && strpos($path, 'admin/commerce/config/taxes') === 0) {
    drupal_set_message(t('Commerce TaxRates is enabled. Please disable or configure Commerce Tax module to avoid duplicate sales tax line items. Configure Commerce TaxRates !here.', array('!here' => l(t('here'), 'admin/commerce/config/taxrates'))));
  }
}

/**
 * Implements hook_permission().
 */
function commerce_taxrates_permission() {
  return array(
    'administer taxrates' => array(
      'title' => t('Administer Commerce TaxRates'),
      'description' => t('Allows users to configure Commerce TaxRates'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function commerce_taxrates_commerce_line_item_type_info() {
  $line_item_types = array();

  $line_item_types['taxrates'] = array(
    'name' => t('Sales tax'),
    'description' => t('Calculate TaxRates'),
    'add_form_submit_value' => t('Add Sales tax'),
    'base' => 'commerce_taxrates_line_item',
    'callbacks' => array(
      'configuration' => 'commerce_taxrates_configure_line_item',
    ),
  );

  return $line_item_types;
}

/**
 * Line item callback: configures the TaxRates line item type on module enable.
 */
function commerce_taxrates_configure_line_item() {
  $field_name = 'taxrates';
  $type = 'taxrates';

  $field = field_info_field($field_name);
  $instance = field_info_instance('commerce_line_item', $field_name, $type);

  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'list_text',
      'cardinality' => 1,
      'entity_types' => array('commerce_line_item'),
      'translatable' => FALSE,
      'locked' => TRUE,
    );
    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'commerce_line_item',
      'bundle' => $type,
      'label' => t('TaxRates'),
      'required' => TRUE,
      'settings' => array(),
      'widget' => array(
        'type' => 'options_select',
        'weight' => 0,
      ),
      'display' => array(
        'display' => array(
          'label' => 'hidden',
          'weight' => 0,
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Returns the title of a TaxRates line item.
 */
function commerce_taxrates_line_item_title($line_item) {
  if (!empty($line_item->data['taxrates']['display_title'])) {
    return $line_item->data['taxrates']['display_title'];
  }
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function commerce_taxrates_commerce_price_component_type_info() {
  // Get Sales Tax description.
  $tax_title = (variable_get('commerce_taxrates_tax_description', ''));

  $components = array();

  // Define a generic TaxRates price component type.
  $components['taxrates'] = array(
    'title' => t('TaxRates sales tax'),
    'display_title' => $tax_title,
    'weight' => 25,
  );

  return $components;
}

/**
 * Calculate sales tax using regular web site checkout.
 */
function commerce_taxrates_calculate_sales_tax($order) {
  if (commerce_taxrates_check_address($order)) {
    $sales_tax = commerce_taxrates_retrieve_sales_tax($order);
  }
  else {
    return;
  }

  // If we have a sales tax amount.
  if ($sales_tax) {
    // Create a new TaxRates line item.
    $line_item = commerce_taxrates_line_item_create($sales_tax, $order->order_id);

    // Add the line item data as a property of the order.
    $order->taxrates['taxrates'] = $line_item;

    commerce_taxrates_delete_taxrates_line_items($order);
    commerce_taxrates_add_taxrates_line_item($line_item, $order);
  }
  else {
    drupal_set_message(t('TaxRates did not calculate sales tax'), 'error');
    return;
  }
}

/**
 * Calculate sales tax for manual order entry.
 */
function commerce_taxrates_manual_calculate_sales_tax($order) {
  if (commerce_taxrates_check_address($order)) {
    $sales_tax = commerce_taxrates_retrieve_sales_tax($order);
  }
  else {
    drupal_set_message(t('TaxRates error: State not selected or incomplete address'), 'error');
    return TRUE;
  }

  // If we have a sales tax amount.
  if ($sales_tax) {
    // Create a new TaxRates line item.
    $line_item = commerce_taxrates_line_item_create($sales_tax, $order->order_id);

    // Add the line item data as a property of the order.
    $order->taxrates['taxrates'] = $line_item;
  }
  else {
    drupal_set_message(t('TaxRates error: Sales tax could not be calculated'), 'error');
    return TRUE;
  }
}

/**
 * Creates a sales tax line item.
 *
 * @param array $sales_tax
 *   A price array used to establish the base unit price for the TaxRates.
 * @param int $order_id
 *   If available, the order to which the TaxRates line item will belong.
 *
 * @return object
 *   The sales tax line item.
 */
function commerce_taxrates_line_item_create($sales_tax, $order_id = 0) {

  $taxrates_service = commerce_taxrates_service_load();

  // Create the new line item for TaxRates.
  $line_item = commerce_taxrates_line_item_new($sales_tax, $order_id);

  // Set the price component of the unit price if it hasn't already been done.
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
  $data = $line_item_wrapper->commerce_unit_price->data->value();

  if (empty($data['components'])) {
    $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
            $line_item_wrapper->commerce_unit_price->value(), $taxrates_service['price_component'], $line_item_wrapper->commerce_unit_price->value(), TRUE, FALSE
    );
  }

  return $line_item;
}

/**
 * Creates a new TaxRates line item populated with the sales tax values.
 *
 * @param array $sales_tax
 *   A price array used to initialize the value of the line item's unit price.
 * @param int $order_id
 *   The ID of the order the line item belongs to.
 * @param array $data
 *   An array value to initialize the line item's data array with.
 * @param string $type
 *   The name of the line item type being created; defaults to 'taxrates'.
 *
 * @return object
 *   The taxrates line item initialized to the given
 *   unit price.
 */
function commerce_taxrates_line_item_new($sales_tax, $order_id = 0, $data = array(), $type = 'taxrates') {

  // Ensure a default product line item type.
  if (empty($type)) {
    $type = 'taxrates';
  }

  // Create the new line item.
  $line_item = entity_create('commerce_line_item', array(
    'type' => $type,
    'order_id' => $order_id,
    'quantity' => 1,
    'data' => $data,
  ));

  // Populate line item with the sales tax unit price data.
  commerce_taxrates_line_item_populate($line_item, $sales_tax);

  return $line_item;
}

/**
 * Populates a sales tax line item with the specified values.
 *
 * @param array $sales_tax
 *   A sales tax array to be added to the value of the line item's unit price.
 */
function commerce_taxrates_line_item_populate($line_item, $sales_tax) {

  $taxrates_service = commerce_taxrates_service_load();

  // Use the label to store the display title of the taxrates service.
  $line_item->line_item_label = 'TaxRates';
  $line_item->quantity = 1;

  $line_item->data['taxrates'] = $taxrates_service;

  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

  // Set the unit price.
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
  $line_item_wrapper->commerce_unit_price = $sales_tax;
}

/**
 * Adds a TaxRates line item to an order, and saves the order.
 *
 * @param object $line_item
 *   An unsaved taxrates line item that should be added to the order.
 * @param object $order
 *   The order to add the taxrates line item to.
 *
 * @return object
 *   The saved taxrates line item object or FALSE on failure.
 */
function commerce_taxrates_add_taxrates_line_item($line_item, $order) {
  // Do not proceed without a valid order.
  if (empty($order)) {
    return FALSE;
  }

  // Delete any other TaxRates line items from the order.
  commerce_taxrates_delete_taxrates_line_items($order);

  // Save the incoming line item now so we get its ID.
  commerce_line_item_save($line_item);

  // Add it to the order's line item reference value.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_wrapper->commerce_line_items[] = $line_item;

  commerce_order_calculate_total($order);
}

/**
 * Returns form for adding a TaxRates line item through line item manager widget.
 */
function commerce_taxrates_line_item_add_form($form, &$form_state) {
  // Calculate the sales tax amount for this order.
  if (isset($form_state['commerce_order']->order_id)) {
    $order = commerce_order_load($form_state['commerce_order']->order_id);
  }
  else {
    $form = array();
    $form['taxrates_error'] = array(
      '#type' => 'value',
      '#value' => 0,
    );
    return $form;
  }

  $sales_tax_failed = commerce_taxrates_manual_calculate_sales_tax($order);

  // Return empty form with name to detect error.
  $form = array();
  if($sales_tax_failed) {
    $form['taxrates_error'] = array(
      '#type' => 'value',
      '#value' => 0,
    );
    return $form;
  }

  // Store the available rates in the form.
  $form['#attached']['css'][] = drupal_get_path('module', 'commerce_taxrates') . '/theme/commerce_taxrates.admin.css';

  $form['taxrates_rate'] = array(
    '#type' => 'value',
    '#value' => $order->taxrates,
  );

  // Create an options array for the sales tax amount.
  $options = commerce_taxrates_options($order);

  $form['taxrates'] = array(
    '#type' => 'radios',
    '#title' => t('Sales tax'),
    '#options' => $options,
    '#default_value' => key($options),
  );

  return $form;
}

/**
 * Adds the selected TaxRates information to a new TaxRates line item.
 *
 * @param object $line_item
 *   The newly created line item object.
 * @param array $element
 *   The array representing the widget form element.
 * @param array $form_state
 *   The present state of the form upon the latest submission.
 * @param array $form
 *   The actual form array.
 */
function commerce_taxrates_line_item_add_form_submit($line_item, $element, &$form_state, $form) {
  // Ensure a quantity of 1.
  $line_item->quantity = 1;

  // Use the values for taxrates.
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $element['actions']['taxrates_rate']['#value']['taxrates']);
  $sales_tax = $line_item_wrapper->commerce_unit_price->value();

  // Populate the line item with the appropriate data.
  commerce_taxrates_line_item_populate($line_item, $sales_tax);
}

/**
 * Turns the sales tax amount into a form element options array.
 *
 * @param object $order
 *   An order object with a TaxRates property defined as an array of
 *   sales tax values.
 *
 * @return array
 *   An options array of calculated TaxRates rates labelled using the display
 *   title of the TaxRates services.
 */
function commerce_taxrates_options($order) {
  $options = array();

  $line_item = $order->taxrates['taxrates'];
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

  $options['taxrates'] = t('!taxrates: !price', array(
    '!taxrates' => 'Sales tax',
    '!price' => commerce_currency_format($line_item_wrapper->commerce_unit_price->amount->value(), $line_item_wrapper->commerce_unit_price->currency_code->value()),
  ));

  return $options;
}

/**
 * Deletes all TaxRates line items on an order.
 *
 * @param object $order
 *   The order object to delete the TaxRates line items from.
 */
function commerce_taxrates_delete_taxrates_line_items($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // When deleting more than one line item, metadata_wrapper will give problems
  // if deleting while looping through the line items. So first remove from
  // order and then delete the line items.
  $line_item_ids = array();

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    // If this line item is an taxrates line item...
    if ($line_item_wrapper->type->value() == 'taxrates') {
      // Store its ID for later deletion and remove the reference from the line
      // item reference field.
      $line_item_ids[] = $line_item_wrapper->line_item_id->value();
      $order_wrapper->commerce_line_items->offsetUnset($delta);
    }
  }

  // If we found any TaxRates line items...
  if (!empty($line_item_ids)) {
    // Then delete the line items.
    commerce_line_item_delete_multiple($line_item_ids);
  }
}

/**
 * Returns the TaxRates service array.
 *
 * @return array
 *   An array with the TaxRates service details.
 */
function commerce_taxrates_service_load() {
  $taxrates_service = array(
    'name' => 'taxrates',
    'base' => 'taxrates',
    'display_title' => 'Sales tax',
    'description' => 'The calculated sales tax amount',
    'price_component' => 'taxrates',
    'weight' => 0,
    'module' => 'commerce_taxrates',
    'title' => 'Drupal Commerce Connector for TaxRates',
    'admin_list' => TRUE,
  );

  return $taxrates_service;
}

/**
 * TaxRates service: returns the sales tax amount as an array.
 *
 * @param object $order
 *   The order object to calculate the TaxRates line items for.
 *
 * @return array
 *   The TaxRates sales tax values as an array.
 */
function commerce_taxrates_retrieve_sales_tax($order) {
  $product_version = variable_get('commerce_taxrates_product_version', COMMERCE_TAXRATES_BASIC_VERSION);

  $sales_tax = array(
    'amount' => 0,
    'currency_code' => commerce_default_currency(),
    'data' => array(),
  );

  // Build order wrapper.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Exit if there are no line items in the order wrapper.
  if (count($order_wrapper->commerce_line_items) == 0) {
    drupal_set_message(t('There are no line items for this order. Please Cancel this entry!'), 'error');
    return FALSE;
  }

  // Integrate with physical goods module.
  // To use billing address if only digital products with the order.
  
  // Get address to be used for sales tax.
  $tax_address_profile = variable_get('commerce_taxrates_tax_address', '');
  if ($tax_address_profile == 'Billing') {
    if (isset($order_wrapper->commerce_customer_billing->commerce_customer_address)) {
      $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
      $street1 = $billing_address['thoroughfare'];
      $street2 = $billing_address['premise'];
      $city = $billing_address['locality'];
      $state = $billing_address['administrative_area'];
      $country = $billing_address['country'];
      $zip = $billing_address['postal_code'];
    }
  }
  elseif ($tax_address_profile == 'Shipping') {
    if (isset($order_wrapper->commerce_customer_shipping->commerce_customer_address)) {
      $shipping_address = $order_wrapper->commerce_customer_shipping->commerce_customer_address->value();
      $street1 = $shipping_address['thoroughfare'];
      $street2 = $shipping_address['premise'];
      $city = $shipping_address['locality'];
      $state = $shipping_address['administrative_area'];
      $country = $shipping_address['country'];
      $zip = $shipping_address['postal_code'];
    }
  }
  
  if (!variable_get('commerce_taxrates_select_states', array())) {
    drupal_set_message(t('Please select at least one state in which to calculate sales tax!'), 'error');
  }

  // Construct tax table date
  $tax_table_year = variable_get('commerce_taxrates_tax_table_year', '');
  $tax_table_month = variable_get('commerce_taxrates_tax_table_month', '');

  $tax_table_date = t('' . $tax_table_year . '' . $tax_table_month . '');

  $module_dir = dirname(__FILE__);

  // Construct arguments for TaxRates functions
  $ava_args = compact('product_version','tax_table_date', 'module_dir', 'street1', 'street2', 'city', 'state', 'country', 'zip');

  module_load_include('inc', 'commerce_taxrates', 'includes/commerce_taxrates_calc');

  // Get tax amount - conditional on version.
  $taxrates_result = commerce_taxrates_get_tax($order, $order_wrapper, $ava_args);

  // Check that there was a return from the tax request.
  if (!$taxrates_result) {
    // Integrator to determine if the checkout is to be blocked!
    return FALSE;
  }

  $sales_tax = array(
    'amount' => $taxrates_result['tax_amount'] * 100,
    'currency_code' => commerce_default_currency(),
    'data' => array(),
  );

  return $sales_tax;
}

/**
 * Implements hook_form_alter().
 */
function commerce_taxrates_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'commerce_order_ui_order_form') {
    $order = $form['#entity'];
    $tax_address_profile = variable_get('commerce_taxrates_tax_address', '');
    $profile = NULL;
    $address = array();
    if ($tax_address_profile == 'Billing') {
      $form_state_var = 'commerce_customer_billing';
      $profile = $form[$form_state_var]['und']['profiles'][0]['profile']['#value'];
      if (isset($profile->commerce_customer_address[LANGUAGE_NONE][0])) {
        $address = $profile->commerce_customer_address[LANGUAGE_NONE][0];
      }
    }
    else {
      $form_state_var = 'commerce_customer_shipping';
      $profile = $form[$form_state_var]['und']['profiles'][0]['profile']['#value'];
      if (isset($profile->commerce_customer_address[LANGUAGE_NONE][0])) {
        $address = $profile->commerce_customer_address[LANGUAGE_NONE][0];
      }
    }
    
    $has_taxrates_items = FALSE;
    if ($order->order_id) {
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
      foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
        if ($line_item_wrapper->type->value() == 'taxrates') {
          $has_taxrates_items = TRUE;       
        }
      }
    }

    $has_line_items = FALSE;
    if ($order->order_id) {
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
      if (count($order_wrapper->commerce_line_items) != 0) {
        $has_line_items = TRUE;
      }
    }

    $has_new_line_items = FALSE;    
    if (isset($form_state['line_item_save_warning'])) {
      $has_new_line_items = TRUE;
    }

    $is_complete_address = FALSE;
      if (isset($profile->profile_id)){
        if ($address['postal_code'] && $address['country'] && $address['locality'] && $address['administrative_area'] && $address['thoroughfare']) {
        $is_complete_address = TRUE;
      }
    }
    else {
      if (isset($form_state['input'][$form_state_var]['und']['profiles'][0]['commerce_customer_address']['und'][0])) {
        $address = $form_state['input'][$form_state_var]['und']['profiles'][0]['commerce_customer_address']['und'][0];
        if ($address['postal_code'] && $address['country'] && $address['locality'] && $address['administrative_area'] && $address['thoroughfare']) {
          $is_complete_address = TRUE;
        } 
      }
    }

    $is_selected_state = FALSE;
    $taxrates_states = variable_get('commerce_taxrates_select_states', array());
    if (isset($profile->profile_id)){
      if (!empty($taxrates_states) && in_array($address['administrative_area'], $taxrates_states)) {
        $is_selected_state = TRUE;
      }
    }
    else {
      if (isset($form_state['input'][$form_state_var]['und']['profiles'][0]['commerce_customer_address']['und'][0])) {
        $address = $form_state['input'][$form_state_var]['und']['profiles'][0]['commerce_customer_address']['und'][0];
        if (!empty($taxrates_states) && in_array($address['administrative_area'], $taxrates_states)) {
          $is_selected_state = TRUE;
        } 
      }
    }

    if (!$order->order_id || !$has_line_items || $has_new_line_items || $has_taxrates_items || !$is_complete_address || !$is_selected_state) {
      $form['commerce_line_items']['und']['actions']['line_item_type']['#ajax'] = array(
        'wrapper' => 'line-item-manager',
        'callback' => 'commerce_taxrates_line_item_add_btn',
      );
      $form['commerce_line_items']['und']['actions']['line_item_add']['#prefix'] = '<div id="line_item_add_btn">';
      $form['commerce_line_items']['und']['actions']['line_item_add']['#suffix'] = '</div>';
      if (isset($form_state['input']['commerce_line_items']['und']['actions']['line_item_type']) && $form_state['input']['commerce_line_items']['und']['actions']['line_item_type'] == 'taxrates') {
        if (!$order->order_id) {
          drupal_set_message(t('Please save this order to allocate an order # and then calculate sales tax.'), 'warning');
        }
         elseif (!$has_line_items) {
          drupal_set_message(t('You can not calculate sales tax on an order with no line items.'), 'warning');
        }
        elseif ($has_taxrates_items) {
          drupal_set_message(t('An order may not have two sales tax lines.'), 'warning');
        }
        elseif ($has_new_line_items) {
          drupal_set_message(t('Please save the order before calculating sales tax.'), 'warning');
        }
        elseif (!$is_complete_address) {
          drupal_set_message(t('Please save a complete taxable address before calculating sales tax.'), 'warning');
        }
        else {
          drupal_set_message(t('State - ' . $address['administrative_area'] . ' - is not configured for sales tax calculations. Please correct address and save the order.'), 'warning');
        }

        $form['commerce_line_items']['und']['actions']['line_item_add']['#disabled'] = TRUE;
      }
      else {
        $form['commerce_line_items']['und']['actions']['line_item_add']['#disabled'] = FALSE;
      }
    }
    // Disable save line item if no sales tax calculated
    if (isset($form['commerce_line_items']['und']['actions']['taxrates_error'])) {
       $form['commerce_line_items']['und']['actions']['save_line_item']['#disabled'] = TRUE;
    }
  }
}

/**
 * Ajax callback for commerce order form.
 */
function commerce_taxrates_line_item_add_btn($form, &$form_state) {
  return $form['commerce_line_items'];
}

/**
 * Checkout form validation callback.
 */
function commerce_taxrates_checkout_validate($form, &$form_state) {
  // Rebuild form on Ajax calls.
  if (isset($form['buttons']['validate']['#value']) &&
          isset($form_state['clicked_button']['#value']) &&
          $form_state['clicked_button']['#value'] == $form['buttons']['validate']['#value']) {
    commerce_checkout_form_validate($form, $form_state);
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Determine whether we should calculate tax for this order or not.
 */
function commerce_taxrates_check_address($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $tax_address_profile = variable_get('commerce_taxrates_tax_address', '');
  if ($tax_address_profile == 'Billing') {
    if (isset($order_wrapper->commerce_customer_billing->commerce_customer_address)) {
      $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
      $street1 = $billing_address['thoroughfare'];
      $street2 = $billing_address['premise'];
      $city = $billing_address['locality'];
      $state = $billing_address['administrative_area'];
      $country = $billing_address['country'];
      $zip = $billing_address['postal_code'];
    }
  }
  elseif ($tax_address_profile == 'Shipping') {
    if (isset($order_wrapper->commerce_customer_shipping->commerce_customer_address)) {
      $shipping_address = $order_wrapper->commerce_customer_shipping->commerce_customer_address->value();
      $street1 = $shipping_address['thoroughfare'];
      $street2 = $shipping_address['premise'];
      $city = $shipping_address['locality'];
      $state = $shipping_address['administrative_area'];
      $country = $shipping_address['country'];
      $zip = $shipping_address['postal_code'];
    }
  }

  // Exit if address is incomplete.
  if (!$street1 || !$city || !$state || !$zip) {
    drupal_set_message(t('Sales tax not calculated as shipping address incomplete. Please select "Cancel" and try again.'), 'error');
    return FALSE;
  }

  // Exit if delivery address state is not in list of active states.
  $taxrates_states = variable_get('commerce_taxrates_select_states', array());
  if (!empty($taxrates_states) && !in_array($state, $taxrates_states)) {
    commerce_taxrates_delete_taxrates_line_items($order);
    commerce_order_calculate_total($order);
    return FALSE;
  }
  return TRUE;
}
