<?php

/**
 * @file
 * Module file for phpconfig module.
 */

/**
 * Implements hook_menu().
 */
function phpconfig_menu() {
  $items['admin/config/system/phpconfig'] = array(
    'title' => 'PHP configurations',
    'description' => 'Add or set PHP configurations',
    'page callback' => 'phpconfig_list',
    'access arguments' => array('administer phpconfig'),
    'file' => 'phpconfig.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/system/phpconfig/add'] = array(
    'title' => 'Add new PHP configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('phpconfig_newform'),
    'access arguments' => array('administer phpconfig'),
    'file' => 'phpconfig.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/system/phpconfig/%/edit'] = array(
    'title' => 'Edit PHP configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('phpconfig_newform', 4),
    'access arguments' => array('administer phpconfig'),
    'file' => 'phpconfig.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/system/phpconfig/test'] = array(
    'title' => 'Test PHP configuration',
    'page callback' => 'phpconfig_test',
    'access arguments' => array('administer phpconfig'),
    'file' => 'phpconfig.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements of hook_permission().
 */
function phpconfig_permission() {
  return array(
    'administer phpconfig' => array(
      'title' => t('Administer phpconfig'),
    ),
  );
}

/**
 * Implements hook_boot().
 */
function phpconfig_boot() {
  // Applying all enabled PHP configurations.
  $handler = db_query("SELECT item, value FROM {phpconfig_items} WHERE status = 1");
  if ($handler) {
    while ($value = $handler->fetchObject()) {
      ini_set($value->item, $value->value);
    }
  }

  global $user;
  $path = request_path();
  $item = isset($_GET['item']) ? $_GET['item'] : '';
  $value = isset($_GET['value']) ? $_GET['value'] : '';
  if (!empty($_GET['phpconfig_tok']) && $path == 'admin/config/system/phpconfig/test' && $item != '' && $value != '') {
    // Include common.inc for accessing token functions.
    include_once getcwd() . '/includes/common.inc';
    // Check if user has access and token is valid.
    if (drupal_valid_token($_GET['phpconfig_tok'], 'phpconfig_verify_' . $user->uid) && ($user->uid == 1 || phpconfig_has_access($user->roles))) {
      // Setting the new phpconfig item to test.
      ini_set($item, $value);
    }
  }
}

/**
 * Check if user has access to administer phpconfig.
 */
function phpconfig_has_access($roles) {
  $rids = array_keys($roles);
  $result = db_query("SELECT perm FROM {permission} WHERE rid in (:rids)", array(':rids' => $rids));
  $perms = array();
  if ($result) {
    while ($data = $result->fetchObject()) {
      $data_perms = explode(', ', $data->perm);
      $perms = array_merge($perms, $data_perms);
    }
  }
  return in_array('administer phpconfig', $perms);
}
