<?php

/**
 * @file
 * Nested checkbox form element module.
 */

/**
 * Implements hook_help().
 */
function nested_checkbox_help($path, $arg) {
  switch ($path) {
    case 'admin/help#nested_checkbox':
      // Return a line-break version of the module README.txt
      return check_markup(file_get_contents(dirname(__FILE__) . "/README.txt"));
  }
}

/**
 * Implements hook_element_info().
 */
function nested_checkbox_element_info() {
  $types['nested_checkboxes'] = array(
    '#tree' => TRUE,
    '#input' => TRUE,
    '#process' => array('nested_checkbox_process'),
    '#theme_wrappers' => array('nested_checkboxes'),
    '#element_validate' => array('nested_checkbox_validate'),
    '#value_callback' => 'nested_checkbox_value',
    '#after_build' => array('nested_checkbox_cancel_validation'),
  );
  // You should never create nested_checkbox_inner yourself.
  $types['nested_checkboxes_inner'] = array(
    '#tree' => TRUE,
    '#input' => TRUE,
    '#process' => array('nested_checkbox_process'),
    '#theme_wrappers' => array('nested_checkboxes_inner'),
    '#value_callback' => 'nested_checkbox_value',
    '#after_build' => array('nested_checkbox_cancel_validation'),
    '#level' => 0,
  );
  return $types;
}

/**
 * Implements hook_libraries_info().
 */
function nested_checkbox_libraries_info() {
  $libraries['tristate'] = array(
    'name' => 'jQuery tristate checkbox plugin',
    'vendor url' => 'http://jlbruno.github.io/jQuery-Tristate-Checkbox-plugin/',
    'download url' => 'http://github.com/jlbruno/jQuery-Tristate-Checkbox-plugin/zipball/master',
    'version arguments' => array(
      'file' => 'jquery.tristate.js',
      'pattern' => '@version:\s+([0-9a-zA-Z\.-]+)@',
      'lines' => 5,
    ),
    'files' => array(
      'js' => array(
        'jquery.tristate.js',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'jquery.tristate.min.js',
          ),
        ),
      ),
    ),
    'integration files' => array(
      'nested_checkbox' => array(
        'js' => array('nested_checkbox.js'),
      ),
    ),
  );
  return $libraries;
}

/**
 * Processes nested checkbox element.
 *
 * Recursive processing that resolves to checkbox element.
 * Nesting level is introduced and post-process for checkbox elements added.
 */
function nested_checkbox_process($element, &$form_state) {
  if (empty($element['#options'])) {
    return NULL;
  }
  if ($element['#type'] == 'nested_checkboxes') {
    libraries_load('tristate');
  }
  $level = isset($element['#level']) ? $element['#level'] + 1 : 1;
  $options = $element['#options'];
  $keys = element_children($options);
  foreach ($keys as $key) {
    $value = $options[$key];
    if (is_array($value)) {
      $element[$key] = array(
        '#type' => 'nested_checkboxes_inner',
        '#level' => $level,
        '#default_value' => isset($element['#default_value'][$key]) ?
          $element['#default_value'][$key] : 0,
      );
      // To propagate down properties, e.g. attributes.
      $properties = element_properties($value);
      foreach ($properties as $property) {
        $element[$key][$property] = $value[$property];
      }
    }
    else {
      $element[$key] = array(
        '#type' => 'checkbox',
        '#title' => $value,
        '#return_value' => $key,
        '#theme_wrappers' => array('form_element'),
        '#post_render' => array('nested_checkbox_post_render'),
        '#default_value' => (!empty($element['#default_value'][$key]) &&
          $element['#default_value'][$key] == $key) ? $key : NULL,
      );
    }
  }
  return $element;
}

/**
 * Validation function for nested checkbox.
 *
 * @see _form_validate()
 */
function nested_checkbox_validate($element, &$form_state, $form) {
  $values = _nested_checkbox_flatten($element['#value']);
  $options = _nested_checkbox_flatten($element['#options']);
  foreach ($values as $v_key => $value) {
    $key_array = explode(':', $v_key);
    $initial_key = $key_array[count($key_array) - 1];
    if (!in_array($v_key, array_keys($options)) || $initial_key != $value) {
      form_error($element, t('An illegal choice has been detected. Please contact the site administrator.'));
      watchdog('form', 'Illegal choice %choice in %name element.', array(
        '%choice' => $value,
        '%name' => empty($element['#title']) ? $element['#parents'][0] : $element['#title'],
      ), WATCHDOG_ERROR);
    }
  }
  return $element;
}

/**
 * After-build function for nested checkboxes.
 *
 * If we don't cancel built-in validation for checkboxes, form won't ever be
 *  submitted.
 *
 * @see _form_validate()
 * @see nested_checkbox_element_info()
 */
function nested_checkbox_cancel_validation($element) {
  unset($element['#needs_validation']);
  return $element;
}

/**
 * Implements hook_theme().
 */
function nested_checkbox_theme($existing, $type, $theme, $path) {
  return array(
    'nested_checkboxes' => array(
      'render element' => 'element',
    ),
    'nested_checkboxes_inner' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Returns HTML for entire set of checkboxes.
 *
 * @ingroup themeable
 */
function theme_nested_checkboxes($variables) {
  $element = $variables['element'];
  if (!isset($element['#attributes']['class'])) {
    $element['#attributes']['class'] = array();
  }
  $classes = array('nested-checkboxes-top', 'nested-checkboxes');
  $element['#attributes']['class']
    = array_merge($element['#attributes']['class'], $classes);
  return '<ul' . drupal_attributes($element['#attributes']) . '>' .
  $element['#children'] . '</ul>';
}

/**
 * Returns HTML for nested checkbox element.
 *
 * @ingroup themeable
 */
function theme_nested_checkboxes_inner($variables) {
  $element = $variables['element'];
  $top_checkbox = array(
    '#type' => 'checkbox',
    '#title' => $element['#title'],
    '#theme_wrappers' => array('form_element'),
    '#default_value' => NULL,
  );
  $top_checkbox_rendered = drupal_render($top_checkbox);
  $top_checkbox_rendered = preg_replace('/^<div/', '<li', $top_checkbox_rendered);
  $top_checkbox_rendered = preg_replace('/form-type-checkbox/', 'form-type-nested-checkbox', $top_checkbox_rendered);
  // We remove closing tag, because all nested elements should be inside this
  // container. We close it at line 226.
  $top_checkbox_rendered = preg_replace('/<\/div>$/', '', $top_checkbox_rendered);
  $classes = array('nested-checkboxes', 'level-' . ($element['#level']));
  if (!isset($element['#attributes']['class'])) {
    $element['#attributes']['class'] = array();
  }
  $element['#attributes']['class'] = array_merge($element['#attributes']['class'], $classes);
  $output = $element['#children'];
  $output = $top_checkbox_rendered . '<ul ' . drupal_attributes($element['#attributes']) . '>' . $output . '</ul></li>';
  return $output;
}

/**
 * Changes HTML markup of single checkbox to meet tristate plugin expectations.
 *
 * We need li instead of divs.
 * Can be broken by custom form element theming.
 *
 * @see theme_form_element()
 * @see nested_checkbox_process()
 */
function nested_checkbox_post_render($element, $children) {
  $element = preg_replace('/^<div/', '<li', $element);
  $element = preg_replace('/\/div>$/', '/li>', $element);
  return $element;
}

/**
 * Value callback for nested checkboxes element.
 *
 * @see nested_checkbox_element_info()
 */
function nested_checkbox_value($element, $input, $form_state) {
  if ($input === FALSE) {
    // It escapes me when this is called with $input === FALSE,
    // but along with form_type_checkboxes_value, we set value to default here.
    if (isset($element['#default_value'])) {
      return $element['#default_value'];
    }
    else {
      return NULL;
    }
  }
  elseif (is_array($input)) {
    return $input;
  }
  else {
    return array();
  }
}

/**
 * Flatten nested checkboxes array.
 *
 * @see nested_checkboxes_validate()
 */
function _nested_checkbox_flatten($array, $prefix = '') {
  $result = array();
  if (is_array($array)) {
    foreach ($array as $key => $value) {
      if ($key == '#options') {
        $result += _nested_checkbox_flatten($value, $prefix);
      }
      elseif (substr($key, 0, 1) == '#') {
        continue;
      }
      elseif (is_array($value)) {
        $result += _nested_checkbox_flatten($value, $prefix . $key . ':');
      }
      else {
        $result[$prefix . $key] = $value;
      }
    }
  }
  return $result;
}
