<?php

/**
 * @file
 * Creates an action and a trigger to notify users when their password has been
 * changed by anyone.
 */

/**
 * Implements hook_help().
 *
 * Provides a menu entry which explains what the password_trigger module does
 * and how to configure it.
 */
function password_trigger_help($path, $arg) {
  switch ($path) {
    case 'admin/help#password_trigger':
      return '<h3>' . t('About') . '</h3>
        <p>' . t('The Password Trigger module is a simple module that adds a trigger for when a user password is updated and an action that sends a tokenized email message to the affected user.') . '</p>
        <h3>' . t('Setup Action') . '</h3>
        <p><ol>
          <li>' . t("Go to the !url.", array('!url' => l(t('Actions Config Page (admin/config/system/actions)'), 'admin/config/system/actions'))) . '</li>
          <li>' . t('Select “Send password change notification email” from the <em>Create An Advanced Action</em> list.') . '</li>
          <li>' . t('Adjust the Subject and Message to your liking.') . '</li>
          <li>' . t('Click <em>Save</em>.') . '</li>
        </ol></p>
        <h3>' . t('Setup Trigger') . '</h3>
        <p><ol>
          <li>' . t("Go to the !url.", array('!url' => l(t('Trigger Config Page (admin/structure/trigger/node)'), 'admin/structure/trigger/node'))) . '</li>
          <li>' . t('Click on the "Password Trigger" tab.') . '</li>
          <li>' . t('Under <em>Trigger: A Password Is Updated</em>, select "Send password change notification email" from the list.') . '</li>
          <li>' . t('Click <em>Assign</em>.') . '</li>
        </ol></p>';
    break;
  }
}

/**
 * Implements hook_user_update().
 *
 * Only fires when a user's password is updated, when the 'pass' key is present
 * in the $edit array.
 */
function password_trigger_user_update(&$edit, $account, $category) {
  if ($category == 'account') {
    if (array_key_exists('pass', $edit)) {
      password_trigger_change($account->original->mail, user_preferred_language($account));
    }
  }
}

/**
 * Implements hook_trigger_info().
 *
 * The first key in the array provides the name of the tab on the Triggers
 * page to which the trigger will be assigned.
 */
function password_trigger_trigger_info() {
  return array(
    'password_trigger' => array(
      'password_trigger' => array(
        'label' => t('A password is updated'),
      ),
    ),
  );
}

/**
 * Runs actions associated with updating passwords.
 */
function password_trigger_password_trigger($recipient) {
  // Ask the trigger module for all actions enqueued for the
  // 'pwtrigger' trigger.
  $aids = trigger_get_assigned_actions('password_trigger');
  // Prepare a basic context, indicating the group and "hook", and call all the
  // actions with this context as arguments.
  $context = array(
    'group' => 'password_trigger',
    'hook' => 'password_trigger',
    'recipient' => $recipient,
  );
  actions_do(array_keys($aids), (object) $recipient, $context);
}

/**
 * Function to generate ping events and invoke hook_trigger_example().
 */
function password_trigger_change($recipient, $language) {
  module_invoke_all('password_trigger', $recipient, $language);
}

/**
 * Implements hook_action_info().
 */
function password_trigger_action_info() {
  return array(
    'password_trigger_send_email_action' => array(
      'label' => t('Send password change notification email'),
      'type' => 'system',
      'configurable' => TRUE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Return a form definition so the Send Email action can be configured.
 *
 * @param array $context
 *   Default values (if we are editing an existing action instance).
 *
 * @return array
 *   Form definition
 */
function password_trigger_send_email_action_form($context) {
  if (!isset($context['subject'])) {
    $context['subject'] = '';
  }
  if (!isset($context['message'])) {
    $context['message'] = "Your password was changed on [site:name] by [current-user:name].\n\n[site:url]";
  }

  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $context['subject'],
    '#size' => '20',
    '#maxlength' => '254',
    '#description' => t('The subject of the message.'),
  );
  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#default_value' => $context['message'],
    '#cols' => '80',
    '#rows' => '20',
    '#description' => t('The message that should be sent.'),
  );

  if (module_exists('token')) {
    $form['help'] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#title' => t('Placeholder tokens'),
      '#description' => t("The following placeholder tokens can be used in to generate the URL path. Some tokens may not be available, depending on the context in which the action is triggered."),
    );
    $form['help']['tokens'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('all'),
    );
  }

  return $form;
}

/**
 * Assigns the subject and message content to the $params array.
 */
function password_trigger_send_email_action_submit($form, &$form_state) {
  $params = array(
    'subject' => $form_state['values']['subject'],
    'message' => $form_state['values']['message'],
  );

  return $params;
}

/**
 * Implementation of a configurable Drupal action.
 *
 * Sends an tokenized email.
 */
function password_trigger_send_email_action($entity, $context) {
  $params['from'] = variable_get('site_mail', ini_get('sendmail_from'));
  $params['subject'] = str_replace(array("\r", "\n"), '', token_replace($context['subject']));
  $params['body'] = token_replace($context['message']);

  if (empty($context['node'])) {
    $context['node'] = $entity;
  }

  $recipient = $context['recipient'];

  $recipient_account = user_load_by_mail($recipient);
  if ($recipient_account) {
    $language = user_preferred_language($recipient_account);
  }
  else {
    $language = language_default();
  }

  if (drupal_mail('password_trigger', 'action_send_email', $recipient, $language, $params)) {
    watchdog('action', 'Sent email to %recipient', array('%recipient' => $recipient));
  }
  else {
    watchdog('error', 'Unable to send email to %recipient', array('%recipient' => $recipient));
  }
}

/**
 * Implements hook_mail().
 */
function password_trigger_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}
