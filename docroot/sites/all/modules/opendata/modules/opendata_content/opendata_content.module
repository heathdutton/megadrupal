<?php
/**
 * @file
 * Code for the Project Open Data Content feature.
 */

include_once 'opendata_content.features.inc';

/**
 * Implements hook_node_validate().
 */
function opendata_content_node_validate($node, $form, &$form_state) {
  if ($node->type == 'opendata_dataset') {
    
    // Check for uniqueness of identifier field.
    $identifier = field_get_items('node', $node, 'field_opendata_identifier', $node->language);

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'opendata_dataset')
      ->fieldCondition('field_opendata_identifier', 'value', $identifier[0]['value'], '=');

    $result = $query->execute();
    
    if (isset($result['node'])) {
      if (array_keys($result['node']) != array($node->nid)) {     
        form_set_error('field_opendata_identifier', 'The Unique Identifier supplied is already in use.');
      }
    }

    // Check that modified is YYYY-MM-DD.
    $date_error = FALSE;
    $date_pattern = '/^\d{4}-\d{2}-\d{2}$/';
    $modified = field_get_items('node', $node, 'field_opendata_modified', $node->language);
    if (!preg_match($date_pattern, $modified[0]['value'])) {
      $date_error = TRUE;
    }
    else {
      list($year, $month, $day) = explode('-', $modified[0]['value']);
      if (!checkdate($month, $day, $year)) {
        $date_error = TRUE;
      }
    }

    if ($date_error) {
      form_set_error('field_opendata_modified', "The provided Last Update value is not a valid date or is not in YYYY-MM-DD format");
    }

    // If present, verify dataDictionary is a URL.
    $data_dictionary = field_get_items('node', $node, 'field_opendata_data_dictionary', $node->language);
    if (!empty($data_dictionary[0]['value'])) {
      if (!valid_url($data_dictionary[0]['value'], TRUE)) {
        form_set_error('field_opendata_data_dictionary', 'The provided Data Dictionary URL is not valid');
      }
    }

    // If present, verify accessURL and webService is a URL.
    $distributions = field_get_items('node', $node, 'field_opendata_distribution', $node->language);
    foreach ($distributions as $index => $distribution) {
      if ($index === 'add_more') {
        continue;
      }
      foreach (array('access_url', 'web_service') as $field) {
        if (!empty($distribution[$field]) && !valid_url($distribution[$field], TRUE)) {
          form_set_error("field_opendata_distribution", "The Download URL {$distribution[$field]} is not valid.");
        }
      }
    }
  }
}

/**
 * Implements hook_node_submit().
 *
 * On node submit, if the node being submitted is the node created by default
 * when the opendata_content module is installed, unset the requirment error
 * indicator.
 */
function opendata_content_node_submit($node, $form, &$form_state) {
  if ($node->type == 'opendata_dataset') {
    if (!variable_get('opendata_catalog_node_updated', FALSE)) {
      $catalog_nid = variable_get('opendata_catalog_node', 0);
      if ($node->nid == $catalog_nid) {
        // They're updating the catalog node, so unset the warning.
        variable_set('opendata_catalog_node_updated', TRUE);
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function opendata_content_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'opendata_dataset_node_form') {
    if (empty($form['field_opendata_identifier'][LANGUAGE_NONE][0]['value']['#default_value'])) {
      // Code blatantly stolen from Com::generate.
      $form['field_opendata_identifier']['und'][0]['value']['#default_value'] = opendata_content_uuid();
    }
  }
}

/**
 * Generates a unique ID.
 *
 * @return strip
 *   A unique string.
 */
function opendata_content_uuid() {
  return strtolower(sprintf('%04X%04X-%04X-%04X-%04X-%04X%04X%04X', mt_rand(0, 65535), mt_rand(0, 65535), mt_rand(0, 65535), mt_rand(16384, 20479), mt_rand(32768, 49151), mt_rand(0, 65535), mt_rand(0, 65535), mt_rand(0, 65535)));
}
