<?php

/**
 * @file
 * Replaces links to external URLs in the entire page content
 * with links to a redirect page with a configurable
 * disclaimer text.
 *
 * Implementation for Drupal 7.x
 */

define('EXT_RED_DEFAULT_PAGE_TITLE', 'External link');
define('EXT_RED_LINK_PLACEHOLDER', '[!link]');
define('EXT_RED_DEFAULT_PAGE_CONTENT', 'You are now leaving this site. Click here to proceed: [!link]');
define('EXT_RED_SETTINGS_NAME', 'configure external URL redirects');
define('ERD_SETTINGS_PAGE', 'admin/config/content/external_redirect');

//------------------------------------------------------------------------------

/**
 * Implements hook_filter_info().
 */
function external_redirect_filter_info() {
  return array(
    'external_redirect' => array(
      'title' => t('External link gateway'),
      'description' => t('Redirects links to external web pages via a gateway page.'),
      'settings callback' => '_filter_external_redirect_settings',
      'default settings' => array('hide_filter_tips' => FALSE),
      'tips callback' => '_filter_external_redirect_tips',
      'weight' => 10,
      'process callback' => '_external_redirect_process_content',
    ),
  );
} // external_redirect_filter

//------------------------------------------------------------------------------

/**
 * Implements pseudo hook_filter_FILTER_settings().
 */
function _filter_external_redirect_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  $filter->settings += $defaults;
  return array(
    'info' => array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#title' => t('External link gateway'),
      'hide_filter_tips' => array(
        '#title' => t('Hide filter tips'),
        '#type' => 'checkbox',
        '#default_value' => $filter->settings['hide_filter_tips'],
        '#description' => 'Do <em>not</em> display infos about external link redirection to the editing user.',
      ),
      'global_settings_info' => array(
        '#markup' => t(
          '<p>You may also want to check the <a href="@settings_url">global settings</a>.</p>',
          array('@settings_url' => url(ERD_SETTINGS_PAGE))
        ),
      ),
    ),
  );
} // _filter_external_redirect_settings

//------------------------------------------------------------------------------

/**
 * Implements pseudo hook_filter_FILTER_tips().
 */
function _filter_external_redirect_tips($filter, $format, $long) {
  return $filter->settings['hide_filter_tips'] ? '' :  t('<p>Links to external URLs will be redirected to a gateway page.</p>');
} // _filter_external_redirect_tips

//------------------------------------------------------------------------------

/**
 * Creates a gateway page that links to the external content.
 */

function external_redirect_gateway_page() {
  $linktext = urldecode($_REQUEST['extUrl']) . (!empty($_REQUEST['extQuery']) ? '?' . urldecode($_REQUEST['extQuery']) : '');
  $link = $linktext; // Not linked by default.
  if (strpos(
    strtolower(preg_replace('/https?:\/\//i', '', $_SERVER['HTTP_REFERER'])),
    strtolower($_SERVER['HTTP_HOST'])
  ) === 0) {
    // Only create a link if the refering page is on our host.
    $link = l($linktext, $linktext);
  }
  drupal_set_title(
    variable_get('external_redirect_page_title', EXT_RED_DEFAULT_PAGE_TITLE)
  );
  return str_replace(
    EXT_RED_LINK_PLACEHOLDER,
    $link,
    variable_get('external_redirect_page_disclaimer', EXT_RED_DEFAULT_PAGE_CONTENT)
  );
} // external_redirect_gateway_page

//------------------------------------------------------------------------------

/**
 * Implements hook_menu().
 */
function external_redirect_menu() {
  $items['external_redirect'] = array(
    'title callback' => 'variable_get',
    'title arguments' => array(
      'external_redirect_page_title',
      EXT_RED_DEFAULT_PAGE_TITLE
    ),
    'page callback' => 'external_redirect_gateway_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items[ERD_SETTINGS_PAGE] = array(
    'title' => 'External link gateway',
    'description' => 'Manage settings for the external link redirection gateway page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('external_redirect_settings'),
    'access arguments' => array(EXT_RED_SETTINGS_NAME),
  );
  return $items;
} // external_redirect_menu

//------------------------------------------------------------------------------

/**
 * Implements hook_permission().
 */
function external_redirect_permission() {
  return array(
    EXT_RED_SETTINGS_NAME => array(
      'title' => t('Configure the external link gateway'),
    ),
  );
} // external_redirect_permission

//------------------------------------------------------------------------------

/**
 * Helper function to determine whether a given URL is internal.
 *
 * @param $url
 *   The URL to be checked.
 *
 * @return bool|NULL
 *   TRUE, if the URL matches at least one internal host name.
 */
function _external_redirect_is_internal($url) {
  static $hosts;
  if (!isset($hosts)) {
    // Prepare host list
    $hosts = variable_get('external_redirect_internal_hosts', array());
    if (
      !in_array($_SERVER['HTTP_HOST'], $hosts)
      &&
      variable_get('external_redirect_include_current_host', TRUE)
    ) {
      $hosts[] = $_SERVER['HTTP_HOST'];
    }
  }
  foreach ($hosts as $host) {
    if (preg_match(
      "/^([a-z]+:\/\/)?" . $host . '($|\/)/i',
      $url
    )) {
      // First match is enough.
      return TRUE;
    }
  }
} // _external_redirect_is_internal

//------------------------------------------------------------------------------

/**
 * Process site content.
 *
 * Filters a given content piece and replaces external links is necessary.
 *
 * @param $content
 *   The text piece to be filtered.
 *
 * @return string
 *   The filtered text.
 */
function _external_redirect_process_content($content) {
  if (preg_match_all(
    '/(<a\b[^>]*?\bhref=["\']?)([a-z]+:\/\/)([^"\' >]+)(["\' >])/ims',
    $content,
    $founds,
    PREG_SET_ORDER
  ) > 0 ) {
    foreach ($founds as $found) {
      // Only replace links to external hosts.
      if (!_external_redirect_is_internal($found[3])) {
        $url_parts = explode('?', $found[3]);
        if (count($url_parts) > 1) {
          $query = array_pop($url_parts);
        }
        $url = implode('', $url_parts);
        $options = array('extUrl' => $found[2] . $url);
        if (!empty($query)) {
          $options['extQuery'] = $query;
        }
        $content = str_replace(
          $found[0],
          $found[1] . url('external_redirect', array('query' => $options)) . $found[4],
          $content
        );
      }
    }
  }
  return $content;
} // _external_redirect_process_content

//------------------------------------------------------------------------------

/**
 * Generate the settings form
 */
function external_redirect_settings() {
  $form = array(
    'external_redirect_page_title' => array(
      '#type' => "textfield",
      '#size' => 50,
      '#maxlength' => 255,
      '#default_value' => variable_get(
        'external_redirect_page_title',
        EXT_RED_DEFAULT_PAGE_TITLE
      ),
      '#weight' => -5,
      '#title' => t('Gateway page title'),
      '#description' => t('Headline for the redirection gateway page'),
    ),
    'external_redirect_page_disclaimer' => array(
      '#type' => 'textarea',
      '#cols' => 50,
      '#rows' => 5,
      '#default_value' => variable_get(
        'external_redirect_page_disclaimer',
        EXT_RED_DEFAULT_PAGE_CONTENT
      ),
      '#weight' => -4,
      '#title' => t('Gateway page text'),
      '#description' => t('A disclaimer, good bye message etc. Use [!link] as a placeholder for the external link.'),
    ),
    'external_redirect_hosts' => array(
      '#type' => 'fieldset',
      '#title' => t("Internal hosts"),
      'external_redirect_internal_hosts' => array(
        '#type' => 'textarea',
        '#rows' => 6,
        '#title' => t('Host list'),
        '#description' => t('Optional: Enter all hosts (domain names) not to treat as external, only one host per line. Avoid leading or trailing blanks, slashes etc. and do not prefix with a protocol such as <em>http://</em>!'),
        '#default_value' => implode("\n", variable_get('external_redirect_internal_hosts', array())),
      ),
      'external_redirect_include_current_host' => array(
        '#type' => 'checkbox',
        '#title' => t('Include current host'),
        '#default_value' => variable_get('external_redirect_include_current_host', TRUE),
        '#description' => t('Always treat the current host that the page has been requested with as internal.'),
      ),
    ),
  );
  $form['#submit'][] = '_external_redirect_settings_submit';
  return system_settings_form($form);
} // external_redirect_settings

//------------------------------------------------------------------------------

/**
 * Global settings form callback.
 *
 * Transforms textarea form values into arrays.
 *
 * @see external_redirect_settings()
 */
function _external_redirect_settings_submit($form, &$form_state) {
  $trimmed_lines = array();
  $lines = explode("\n", $form_state['values']['external_redirect_internal_hosts']);
  foreach ($lines as $line) {
    $line = trim($line);
    if (!empty($line)) {
      $trimmed_lines[] = $line;
    }
  }
  $form_state['values']['external_redirect_internal_hosts'] = $trimmed_lines;
} // _external_redirect_settings_submit

//------------------------------------------------------------------------------
// Integrate with field API.
//------------------------------------------------------------------------------

/**
 * Implements hook_theme().
 */
function external_redirect_theme($existing, $type, $theme, $path) {
  return array(
    'external_redirect_formatter_external_redirect_default_gateway' => array(
      'variables' => array('element' => NULL),
    ),
    'external_redirect_formatter_external_redirect_url_gateway' => array(
      'variables' => array('element' => NULL),
    ),
    'external_redirect_formatter_external_redirect_short_gateway' => array(
      'variables' => array('element' => NULL),
    ),
    'external_redirect_formatter_external_redirect_label_gateway' => array(
      'variables' => array('element' => NULL),
    ),
    'external_redirect_formatter_external_redirect_separate_gateway' => array(
       'variables' => array('element' => NULL),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function external_redirect_field_formatter_info() {
  return array(
    'external_redirect_default_gateway' => array(
      'label' => t('Title, as link (gateway)'),
      'field types' => array('link_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
    'external_redirect_url_gateway' => array(
      'label' => t('URL, as link (gateway)'),
      'field types' => array('link_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
    'external_redirect_short_gateway' => array(
      'label' => t('Short, as link with title "Link" (gateway)'),
      'field types' => array('link_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
    'external_redirect_label_gateway' => array(
      'label' => t('Label, as link with label as title (gateway)'),
      'field types' => array('link_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
    'external_redirect_separate_gateway' => array(
      'label' => t('Separate title and URL (gateway)'),
      'field types' => array('link_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
} // external_redirect_field_formatter_info

/**
 * Implements hook_field_formatter_view().
 */
function external_redirect_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  foreach ($items as $delta => $item) {
    $elements[$delta] = array(
      '#markup' => theme('external_redirect_formatter_'. $display['type'], array('element' => $item, 'field' => $instance)),
    );
  }
  return $elements;
}

/**
 * Theme function for 'default_gateway' text field formatter.
 *
 * @see link.module
 * @see theme_link_formatter_default()
 */
function theme_external_redirect_formatter_external_redirect_default_gateway($vars) {
  $link_options = $vars['element'];
  unset($link_options['element']['title']);
  unset($link_options['element']['url']);
  if (isset($link_options['attributes']['class'])) {
    $link_options['attributes']['class'] = array($link_options['attributes']['class']);
  }
  
  // Display a normal link if both title and URL are available.
  if (!empty($vars['element']['title']) && !empty($vars['element']['url'])) {
    _external_redirect_modify_link_item($vars['element'], $link_options);
    return l($vars['element']['title'], $vars['element']['url'], $link_options);
  }
  // If only a title, display the title.
  elseif (!empty($vars['element']['title'])) {
    return check_plain($vars['element']['title']);
  }
  elseif (!empty($vars['element']['url'])) {
    _external_redirect_modify_link_item($vars['element'], $link_options);
    return l($vars['element']['title'], $vars['element']['url'], $link_options);
  }
}

/**
 * Theme function for 'url_gateway' text field formatter.
 */
function theme_external_redirect_formatter_external_redirect_url_gateway($vars) {
  $link_options = $vars['element'];
  unset($link_options['element']['title']);
  unset($link_options['element']['url']);
  _external_redirect_modify_link_item($vars['element'], $link_options);
  return $vars['element']['url'] ? l($vars['element']['display_url'], $vars['element']['url'], $link_options) : '';
}

/**
 * Theme function for 'short_gateway' text field formatter.
 */
function theme_external_redirect_formatter_external_redirect_short_gateway($vars) {
  $link_options = $vars['element'];
  unset($link_options['element']['title']);
  unset($link_options['element']['url']);
  _external_redirect_modify_link_item($vars['element'], $link_options);
  return $vars['element']['url'] ? l(t('Link'), $vars['element']['url'], $link_options) : '';
}

/**
 * Theme function for 'label_gateway' text field formatter.
 */
function theme_external_redirect_formatter_external_redirect_label_gateway($vars) {
  $link_options = $vars['element'];
  unset($link_options['element']['title']);
  unset($link_options['element']['url']);
  _external_redirect_modify_link_item($vars['element'], $link_options);
  return $vars['element']['url'] ? l($vars['field']['label'], $vars['element']['url'], $link_options) : '';
}

/**
 * Theme function for 'separate_gateway' text field formatter.
 */
function theme_external_redirect_formatter_external_redirect_separate_gateway($vars) {
  $class = empty($vars['element']['attributes']['class']) ? '' : ' '. $vars['element']['attributes']['class'];
  unset($vars['element']['attributes']['class']);
  $link_options = $vars['element'];
  unset($link_options['element']['title']);
  unset($link_options['element']['url']);
  _external_redirect_modify_link_item($vars['element'], $link_options);
  $title = empty($vars['element']['title']) ? '' : check_plain($vars['element']['title']);
  
  // @TODO follow todo of original formatter in link.module

  $output = '';
  $output .= '<div class="link-item '. $class .'">';
  if (!empty($title)) {
    $output .= '<div class="link-title">'. $title .'</div>';
  }
  $output .= '<div class="link-url">'. l($vars['element']['display_url'], $vars['element']['url'], $link_options) .'</div>';
  $output .= '</div>';
  return $output;
}

/**
 * Helper function to modify CCK link field URL data.
 *
 * @param &$element
 *   The original link_field element data (by reference).
 *
 * @param &$options
 *   The original link_field link_options data (by reference).
 */
function _external_redirect_modify_link_item(&$element, &$options) {
  if (!_external_redirect_is_internal($element['url'])) {
    $new_query['extUrl']= $element['url'];
    if (!empty($element['query'])) {
      $new_query['extQuery'] = drupal_http_build_query($element['query']);
    }
    $element['url'] = url('external_redirect', array('absolute' => TRUE));
    $options['query'] = $new_query;
  }
}
