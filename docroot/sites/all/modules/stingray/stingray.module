<?php
/**
 * @file stingray.module
 *    Integration with the Stingray CDN Cache Control Web Service.
 */

/**
 * Cache service key.
 */
define('STINGRAY_SERVICE_CACHE', 'cache');

/**
 * Implementation of hook_perm().
 */
function stingray_permission() {
  return array(
    'administer stingray' => array(
      'description' => t('Configure the Stingray integration settings. Username, password, etc.'),
      'title' => t('Administer Stingray Settings'),
    ),
    'purge stingray cache' => array(
      'description' => t('Allowed to clear content from the Stingray cache.'),
      'title' => t('Purge Stingray Cache'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function stingray_menu() {
  $items = array();
  $items['admin/config/development/stingray'] = array(
    'title' => 'Stingray',
    'description' => 'Stingray integration settings and cache clearing utility',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stingray_settings'),
    'access arguments' => array('administer stingray'),
    'file' => 'includes/stingray.admin.inc',
  );

  $items['admin/config/development/stingray/settings'] = array(
    'title' => 'Settings',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/development/stingray/refresh'] = array(
    'title' => 'Cache Control Utility',
    'description' => 'Admin interface to flush Drupal resources from the Stingray cache',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stingray_cache_control'),
    'access arguments' => array('purge stingray cache'),
    'file' => 'includes/stingray.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_node_update().
 *
 * When nodes are modified, clear URL from the Stingray
 * cache. Clear base node/% url as well as aliases.
 */
function stingray_node_update($node) {
  $url = base_path() . "node/{$node->nid}";
  if (!stingray_clear_url($url, array(), $node)) {
    drupal_set_message(t('Can\'t clear the stingray cache'), 'error');
  }
}

/**
 * Implementation of hook_node_delete().
 *
 * When nodes are modified, clear URL from the Stingray
 * cache. Clear base node/% url as well as aliases.
 */
function stingray_node_delete($node) {
  $url = base_path() . "node/{$node->nid}";
  if (!stingray_clear_url($url, array(), $node)) {
    drupal_set_message(t('Can\'t clear the stingray cache'), 'error');
  }
}

/**
 * Clear a URL from Stingray.  Clears node/id and any url aliases.
 *
 * @param $paths_in
 *    a array of paths or single path to clear
 * @param $params
 *   an array of params for the API call
 * @return
 *    TRUE if it was successfully cleared, FALSE otherwise.
 */
function stingray_clear_url($paths_in, $params = array(), $node = NULL) {
  if (!is_array($paths_in)) {
    $paths_in = array($paths_in);
  }
  // Get the system path and all aliases to this url
  $paths = array();

  foreach ($paths_in as $path) {
    $paths = array_merge($paths, _stingray_get_all_paths($path, $node));
  }

  // It is possible to have no paths at this point if other modules have
  // altered the paths
  if (empty($paths)) {
    watchdog('stingray', 'No resultant paths to clear for %paths', array('%paths' => implode(', ', $paths_in)), WATCHDOG_NOTICE);
    return FALSE;
  }

  $paths = array_unique($paths);

  try {
    $stingray = stingray_get_class(STINGRAY_SERVICE_CACHE, $params);
    return $stingray->clearByPath($paths);
  }
  catch (Exception $e) {
    return FALSE;
  }
}

/**
 * Return all system and alias paths for the provided URL.
 *
 * @param $url
 *    The URL to find all aliases
 * @param $node
 *    The Node for the URL being cleared if one exists, NULL otherwise
 * @return
 *    An array of all paths aliased to the provided URL.
 */
function _stingray_get_all_paths($url, $node = NULL) {
  global $language;

  // If it is not a node path, get the system path
  if (strpos($url, 'node') !== 0) {
    $source = drupal_lookup_path('source', $url);
  }
  if (!isset($source)  || !$source) {
    $source = $url;
  }
  $source = preg_replace("/^\//", "", $source);
  $paths[] = $source;

  $options = array(
    ':source' => $source,
    ':language' => isset($language->language) ? $language->language : '',
    ':language_none' => LANGUAGE_NONE,
  );
  $result = db_query('SELECT alias FROM {url_alias} WHERE source = :source AND language IN (:language, :language_none)', $options);

  foreach ($result as $record) {
    $paths[] = $record->alias;
  }

  // If this is the frontpage, add a blank to clear the root doc
  if ($source == variable_get('site_frontpage', 'node')) {
    $paths[] = '';
  }

  // Allow other modules to add/modify paths to be cleared
  drupal_alter('stingray_paths', $paths, $node);

  return $paths;
}

/**
 * Returns the Stingray Cache Control class. This is abstracted to provide the capability
 * of a no-op or recording class for testing purposes.
 */
function stingray_get_class($service_name, $params = array()) {
  $class_key = 'stingray_service_' . $service_name . '_class';
  switch ($service_name) {
    case 'cache':
      $class = variable_get($class_key, 'StingrayCacheControl');
      break;
  }
  $service_path = drupal_get_path('module', 'stingray') . '/services';
  if (file_exists($service_path . '/')) {
    module_load_include('inc', 'stingray', 'stingray.class');
  }
  else {
    throw new Exception('Serivce !service is not available');
  }
  $service = new $class($params);

  return $service;
}
