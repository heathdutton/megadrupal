<?php

/**
 *  @file
 *  Helper modul for bloging with Drupal core
 *
 *  @author Palócz István <istvan@palocz.hu>
 *
 */

/**
 * Implements hook_perm().
 */
function blogaid_permission() {
  return array(
    'save to draft' => array(
      'title' => t('Save to Draft'),
    ),
    'save to public' => array(
      'title' => t('Save to Public'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function blogaid_menu() {
    $items['admin/config/content/blogaid'] = array(
    'title' => 'Blog Aid',
    'description' => 'Change Blog Aid settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('blogaid_settings_form'),
    'access arguments' => array('access administration pages'),
  );
    $items['node/%node/sticky'] = array(
    'title' => 'Sticky',
    'page callback' => 'blogaid_sticky',
    'context' => MENU_CONTEXT_INLINE,
    'page arguments' => array(1),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Module settings form.
 */
function blogaid_settings_form($form_state) {
  $form = array();
  $form['blogaid_node_types'] = array(
  '#type' => 'checkboxes',
  '#title' => t('The extra buttons will appear at the following content types'),
  '#default_value' => blogaid_get_types(),
  '#options' => node_type_get_names(),
  );
  $form['draft_blog_entries_block'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings of the Draft blog entries block'),
  );
  $form['draft_blog_entries_block']['blogaid_draft_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of links'),
    '#size' => 4,
    '#default_value' => variable_get('blogaid_draft_limit', 10),
  );
  $form['draft_blog_entries_block']['blogaid_draft_order'] = array(
    '#type' => 'select',
    '#title' => t('Order of links'),
    '#options' => blogaid_get_entries_orders(),
    '#default_value' => variable_get('blogaid_draft_order', 'title'),
  );
  return system_settings_form($form);
}

/**
 *
 */
function blogaid_get_entries_orders() {
  return array(
    'title' => t('Title'),
    'created ASC' => t('Time created ascending'),
    'created DESC' => t('Time created descending'),
    'changed ASC' => t('Time changed ascending'),
    'changed DESC' => t('Time changed descending'),
  );
}

/**
 *
 */
function blogaid_get_types() {
  return array_filter(variable_get('blogaid_node_types', array('story' => 'story')));
}

/**
 * Implements hook_block_info().
 */
function blogaid_block_info() {
  $blocks['admin'] = array(
    'info' => t('Blog Aid adminblock'),
  );
  $blocks['draft'] = array(
    'info' => t('Draft blog entries'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function blogaid_block_view($delta = '') {
  switch ($delta) {
    case 'admin':
      $block['subject'] = t('Admin menu');
      $block['content'] = blogaid_adminblock_contents();
      break;
    case 'draft':
      $block['subject'] = t('Draft blog entries');
      $block['content'] = blogaid_draftblock_contents();
      break;
  }
  return $block;
}

/**
 *  Create admin block links
 */
function blogaid_adminblock_contents() {
  global $user;
  $links = array();
  $enabled_types = blogaid_get_types();
  // get all type form readable names
  $types = node_type_get_names();
  foreach ($enabled_types as $type) {
    if (blogaid_menu_accessible('node/add/' . $type)) {
      $links[] = l(t('Create @name', array('@name' => $types[$type])), 'node/add/' . $type);
    }
  }
  // comments
  if ($comment_link = blogaid_get_comments_link()) {
    $links = $comment_link;
  }
  // imce file managger
  if (blogaid_menu_accessible('imce')) {
    $links[] = l(t('File managger (@space-used)', array('@space-used' => blogaid_space_used())), 'user/' . $user->uid . '/imce' ) ;
  }
  if (blogaid_menu_accessible('user/' . $user->uid, TRUE)) {
    $links[] = l(t('My account'), 'user/' . $user->uid ) ;
  }
  if (blogaid_menu_accessible('admin')) {
    $links[] = l(t('Administration'), 'admin' ) ;
  }
  if (blogaid_menu_accessible('user/logout')) {
    $links[] = l(t('Log out'), 'user/logout' ) ;
  }
  if (count($links)) {
    return theme('item_list', array('items' => $links));
  }
}

/**
 *
 */
function blogaid_get_comments_link() {
  global $user;
  if (blogaid_menu_accessible('admin/content/comment/new')) {
    $publish_comment = db_query("SELECT COUNT(*) FROM {comment} c JOIN {node} n ON c.nid = n.nid WHERE n.uid = :uid AND c.status = :status",
            array(':uid' => $user->uid, ':status' => 1)
          )->fetchField();
    if ($publish_comment > 0) {
      $link[] = l(t('Published comments (@count-comments)', array('@count-comments' => $publish_comment)), 'admin/content/comment/new');
    }
  }
  if (blogaid_menu_accessible('admin/content/comment/approval')) {
    $approval_comment = db_query("SELECT COUNT(*) FROM {comment} c JOIN {node} n ON c.nid = n.nid WHERE n.uid = :uid AND c.status = :status",
            array(':uid' => $user->uid, ':status' => 0)
          )->fetchField();
    if ($approval_comment > 0) {
      $link[] = l(t('Approval comments (@count-comments)', array('@count-comments' => $approval_comment)), 'admin/content/comment/approval');
    }
    return $link;
  }
}

/**
 *
 */
function blogaid_space_used() {
  $size = file_space_used();
  $suffix = array('', 'K', 'M', 'G', 'T');
  $i=0;
  $div = 1;
  while (($size / ($div * 1024)) > 1) {
    $i++;
    $div *= 1024;
  }
  return (int)($size / ($div)) . ' ' . $suffix[$i] . 'B';
}

/**
 *
 */
function blogaid_menu_accessible($path, $parent = FALSE) {
  $menu = menu_get_item($path);
  // If module not present or path included % (like user/%) the
  // $menu['path'] is not equal $path. The $parnet say what caller
  // want to.
  return ($menu['path'] == $path || $parent) && $menu['access'];
}

/**
 *  Create draft block draft entries edit links
 */
function blogaid_draftblock_contents() {
  global $user;
  $types = blogaid_get_types();
  $variables = array($user->uid);
  if (count($types)) {
    $draft_order = variable_get('blogaid_draft_order', 'title');
    $query = db_select('node', 'n');
    $res = $query
      ->fields('n')
      ->condition('n.uid', $user->uid)
      ->condition('n.type', $types, 'IN')
      ->condition('n.status', 0)
      ->orderBy("n.$draft_order")
      ->range(NULL, variable_get('blogaid_draft_limit', 10))
      ->execute()
      ->fetchAllAssoc('nid');
    $links = array();
    foreach ($res as $nid => $node) {
      $links[] = l($node->title, 'node/' . $node->nid . '/edit');
    }
    if (count($links)) {
      return theme('item_list', array('items' => $links));
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function blogaid_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#id']) && $form['#id'] == 'node-form' && in_array($form['type']['#value'], blogaid_get_types())) {
  // if create new node add to Save to draft button
    if (!isset($form['#node']->nid) && $form['#node']->nid == 0 && user_access('save to draft')) {
      $form['buttons']['savetodraft'] = array(
        '#type' => 'submit',
        '#value' => t('Save to draft'),
        '#weight' => 5,
        '#submit' => array('node_form_submit'),
      );
    }
    //if edit existing node and node un-published add to Save to public button
    if (isset($form['#node']->nid) && $form['#node']->nid != 0 && $form['#node']->status == 0 && user_access('save to public')) {
      $form['buttons']['savetopublic'] = array(
        '#type' => 'submit',
        '#value' => t('Save to public'),
        '#weight' => 5,
        '#submit' => array('node_form_submit'),
      );
    }
    if (isset($form['#node']->nid) && $form['#node']->nid != 0) {
      $form['buttons']['saveandedit'] = array(
        '#type' => 'submit',
        '#value' => t('Save and edit'),
        '#weight' => 5,
        '#submit' => array('node_form_submit', 'blogaid_redirect'),
      );
    }
  // make changes when form validate
  $form['#validate'][] = 'blogaid_node_form_validate';
  }
}

/**
 *
 */
function blogaid_node_form_validate($form, &$form_state) {
  // If user clicked Save to draft submit button status set unpublished
  if ( $form_state['clicked_button']['#id'] == 'edit-savetodraft') {
    $form_state['values']['status'] = 0;
  }
  if ($form_state['clicked_button']['#id'] == 'edit-savetopublic') {
    //publicate and set created time to now
    $form_state['values']['status'] = 1;
    $form_state['values']['date'] = '';
  }
}

/**
 *
 */
function blogaid_redirect($form, &$form_state) {
  drupal_goto('node/' . $form['#node']->nid . '/edit');
}

/**
 * Implements hook_link().
 */
function blogaid_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();
  if ($type == 'node' && user_access('administer-nodes')) {
      //todo chaneg node edit preferences access
      if (true) {
        if ($node->sticky == 0) {
          $links['blogaid_sticky'] = array(
            'title' => t('Set sticky'),
            'href' => "node/$node->nid/sticky",
            'attributes' => array('title' => t('Set sticy bit.')),
          );
        }
        else {
          $links['blogaid_sticky'] = array(
            'title' => t('Unset sticky'),
            'href' => "node/$node->nid/sticky",
            'attributes' => array('title' => t('Delete sticy bit.')),
          );
        }
      }
    }
  return $links;
}

/**
 *
 */
function blogaid_sticky($node) {
  if ($node->sticky) {
    $node->sticky = 0;
  }
  else {
    $node->sticky = 1;
  }
  node_save($node);
  drupal_set_message(t('%title set sticky', array('%title' => $node->title)));
  drupal_goto('<front>');
}

/**
 *
 */
function blogaid_mail_alter(&$message) {
  if ($message['id'] == 'system_action_send_email') {
    if (isset($message['params']['context']['comment'])) {
      $comment = $message['params']['context']['comment'];
      $tr = array(
        '%comment_subject' => drupal_html_to_text($comment->subject),
        '%comment_body' => drupal_html_to_text(check_markup($comment->comment, $comment->filter)),
        '%comment_user_name' => drupal_html_to_text($comment->name),
        '%comment_user_mail' => drupal_html_to_text($comment->mail),
        '%comment_user_hompage' => drupal_html_to_text($comment->hompage),
      );
      foreach ($message['body'] as $key => $val) {
        $message['body'][$key] = strtr($val, $tr);
      }
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function blogaid_uninstall() {
  variable_del('blogaid_draft_limit');
  variable_del('blogaid_draft_order');
  variable_del('blogaid_node_types');
}
