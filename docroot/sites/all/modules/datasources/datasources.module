<?php

define('DATASOURCES_SMART_DUMB', 0); // always update
define('DATASOURCES_SMART_PROTECT', 1); // do not update if target was modified
define('DATASOURCES_SMART_NEW', 2); // update only if source is new version

define('DATASOURCES_COUNT_IMPORTED', 0);
define('DATASOURCES_COUNT_PROCESSED', 1);
define('DATASOURCES_COUNT_ALL', 2);

/**
 * Implements hook_cron().
 */
function datasources_cron() {
  foreach (datasources_inputs_info() as $input_id => $input_info) {
    if ($input_info['ready'] && $input_info['cron']) {
      datasources_import($input_id, $input_info['max']);
    }
  }
}

/**
 * Implements hook_menu().
 */
function datasources_menu() {
  $pre = 'admin/config/content/datasource';
  $items[$pre] = array(
    'title' => 'Datasource inputs',
    'description' => 'Configure datasource inputs and map them to existing entities.',
    'page callback' => 'datasources_inputs_overview',
    'access arguments' => array('administer datasource'),
    'file' => 'datasources.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items[$pre . '/overview'] = array(
    'title' => 'Overview',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items[$pre . '/%'] = array(
    'title' => 'Edit datasource input',
    'description' => 'Edit datasource input.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('datasources_form_edit_input', 4),
    'access arguments' => array('administer datasource'),
    'file' => 'datasources.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items[$pre . '/%/edit'] = array(
    'title' => 'Edit',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );  
  $items[$pre . '/%/map'] = array(
    'title' => 'Map',
  	'description' => 'Map datasource input fields.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('datasources_form_map_input', 4),
    'access arguments' => array('administer datasource'),
    'file' => 'datasources.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );  
  $items[$pre . '/%/policy'] = array(
    'title' => 'Policy',
  	'description' => 'Manage entity matching and update policies.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('datasources_form_policy_input', 4),
    'access arguments' => array('administer datasource'),
    'file' => 'datasources.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );  
  $items[$pre . '/%/reset'] = array(
    'title' => 'Reset',
  	'description' => 'Reset datasource input.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('datasources_form_reset_input', 4),
    'access arguments' => array('administer datasource'),
    'file' => 'datasources.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );  
  return $items;
}

/**
 * Implements hook_permission().
 */
function datasources_permission() {
  return array(
    'administer datasource' => array(
      'title' => t('Administer datasource'),
    ),
  );
}

/**
 * Build and return the datasource inputs registry.
 * 
 * @param boolean $reset
 * @return array
 */
function datasources_inputs_registry($reset=FALSE) {
  $inputs = &drupal_static(__FUNCTION__, NULL);
  
  if ($inputs===NULL || $reset) {
       
    $datasource_inputs = module_invoke_all('datasource_inputs');
    drupal_alter('datasource_inputs', $datasource_inputs);
    
    $inputs=array();
    
    foreach ($datasource_inputs as $input_id => $input_info) {
            
      $input_info += array(
        'configure' => FALSE,
        'settings' => array(),
      );
      
      $inputs[$input_id] = $input_info;
      $inputs[$input_id]['id'] = $input_id;
      $data = variable_get('datasources_input_' . $input_id, NULL);
      if ($data===NULL) {
        $data = array();
      }
      else {
        $data['data'] = TRUE;
      }
      
      foreach (array(
          'data' => FALSE, // has settings data
          'enabled' => FALSE, // import enabled
          'cron' => FALSE, // auto import in cron
          'max' => 50, // max records to import
          'count_mode' => DATASOURCES_COUNT_PROCESSED, // count errors for max
          'entity' => '', // base entity
          'bundle' => '', // base bundle
      		'fields_map' => array(),
          'structures' => array(),
          'policies' => array(),
          'keys' => array(),
          'process_api_live' => TRUE, // Process API integration
          'custom_fields' => array(),
        ) as $key => $default) {
        if (!isset($data[$key])) {
          $data[$key] = $default;
        }
        $inputs[$input_id][$key] = $data[$key];
      }

      if (!isset($inputs[$input_id]['family'])) {
        $inputs[$input_id]['family'] = $input_id;
      }
      $inputs[$input_id]['id'] = $input_id;
      
      foreach (array(
        'insert' => TRUE,
        'update' => TRUE,
        'duplicate' => 'abort',
        'bad_bundle' => 'abort',
      ) as $key => $default) {
        if (!isset($inputs[$input_id]['policies'][$key])) {
          $inputs[$input_id]['policies'][$key] = $default;
        }
      }

      //add meta fields
      $inputs[$input_id]['fields']['#datasource_name'] = '#' . t('Datasource name');
      $inputs[$input_id]['fields']['#datasource_id'] = array(
        'name' => '#' . t('Datasource ID'),
        'type' => 'int', 
      );
      
      //add custom fields
      foreach ($inputs[$input_id]['custom_fields'] as $k => $v) {
        $inputs[$input_id]['fields']['#custom_' . $k] = array(
            'name' => '#' . t('Custom field ') . $k,
            'type' => 'mixed',
            );
      }

      $entity_fields = datasources_entity_fields($input_id);  
      // search potential key in target fields
      foreach ($inputs[$input_id]['fields_map'] as $key => $map) {
        if (!$map['field']) continue;
        if (!isset($entity_fields['fields'][$key])) continue;
        if ($entity_fields['fields'][$key]['type'] == 'udid') {
          if ($inputs[$input_id]['fields'][$map['field']]['type'] == 'udid') {
            $inputs[$input_id]['fields'][$map['field']]['udid_target_field'] = $key;
          }
          else {
            // source field is not a udid so we provide a preprocess callback
            $inputs[$input_id]['fields'][$map['field']]['udid_preprocessor'] = $map['preprocessor'];
            $inputs[$input_id]['fields'][$map['field']]['udid_target_field'] = $key;
          }
        }
      }
      
      $kw = 0;
      foreach ($inputs[$input_id]['fields'] as $field => &$field_info) {
        if (!is_array($field_info)) {
          $field_info = array('name' => $field_info);
        }
        if (!isset($field_info['type'])) {
          // default type
          $field_info['type'] = 'string';
        }
        if (!isset($field_info['udid_preprocessor'])) {
          // udid callback is a preprocess callback to convert the field into udid key
          $field_info['udid_preprocessor'] = FALSE;
        }
        if (!isset($field_info['udid_target_field'])) {
          $field_info['udid_target_field'] = FALSE;
        }
        // potential functional key
        if ($field_info['type']=='udid'||$field_info['udid_preprocessor']) {
          if (!isset($inputs[$input_id]['keys'][$field]['smart'])) {
            $inputs[$input_id]['keys'][$field]['smart'] = DATASOURCES_SMART_PROTECT;
          }
          if (!isset($inputs[$input_id]['keys'][$field]['use'])) {
            $inputs[$input_id]['keys'][$field]['use'] = TRUE;
          }
          if (isset($inputs[$input_id]['keys'][$field]['weight'])) {
            $kw=$inputs[$input_id]['keys'][$field]['weight']+1;
          }
          else {
            $inputs[$input_id]['keys'][$field]['weight']=$kw++;
          }
          if (!isset($inputs[$input_id]['keys'][$field]['udid_preprocessor'])) {
            $inputs[$input_id]['keys'][$field]['udid_preprocessor'] = $field_info['udid_preprocessor'];
            $inputs[$input_id]['keys'][$field]['udid_target_field'] = $field_info['udid_target_field'];
          }
          $field_info['key'] = $inputs[$input_id]['keys'][$field]['use'];
        }
        else {
          $field_info['key'] = FALSE;
        }
      }
      
      uasort($inputs[$input_id]['keys'], '_datasources_cmp_keys');
      $inputs[$input_id]['has_key'] = FALSE;
      foreach ($inputs[$input_id]['keys'] as $field => $key_info) {
        if ($key_info['use']) {
          $inputs[$input_id]['has_key'] = TRUE;
        }
      }
      $inputs[$input_id]['engine'] = new $inputs[$input_id]['class']($input_id);
      // maintain a "ready for import" flag
      $inputs[$input_id]['ready'] = $inputs[$input_id]['has_key'] && $inputs[$input_id]['enabled'];
      
    }
    
  }
  return $inputs;
}

/**
 * Implements hook_datasource_preprocessor_callbacks().
 */
function datasources_datasource_preprocessor_callbacks() {
  $callbacks = array(
      'body_html' => array(
          'callback' => 'datasources_body_html',
          'type' => 'text_formatted',
          'restrict' => array(
              'type' => array('text_formatted', 'list<text_formatted>'),
              ),
          ),
      'body_plain' => array(
          'callback' => 'datasources_body_plain',
          'type' => 'text_formatted',
          'restrict' => array(
              'type' => array('text_formatted', 'list<text_formatted>'),
              ),
          ),
      'str2taxo' => array(
          'callback' => 'datasources_str2taxo',
          'type' => 'taxonomy_term',
          'restrict' => array(
              'type' => array('taxonomy_term', 'list<taxonomy_term>'),
              ),
          ),
      'str2taxo_create' => array(
          'callback' => 'datasources_str2taxo_create',
          'type' => 'taxonomy_term',
          'restrict' => array(
              'type' => array('taxonomy_term', 'list<taxonomy_term>'),
              ),
          ),
      'str_truncate' => array(
          'callback' => 'datasources_string_truncate',
          'type' => 'string',
          'restrict' => array(
              'type' => array('string', 'list<string>'),
          ),
      ),      
  );
  return $callbacks;
}

/**
 * Basic preprocessor for the plain text body
 */
function datasources_body_plain($value, $context) {
  if (!is_array($value)) $value = array($value);
  return array('value' => implode('', $value), 'summary' => '', 'format' => 'plain_text');
}

/**
 * Basic preprocessor for the HTML body
 */
function datasources_body_html($value, $context) {
  if (!is_array($value)) $value = array($value);
  return array('value' => implode('', $value), 'summary' => reset($value), 'format' => 'full_html');
}

/**
 * Basic preprocessor to truncate string using text field settings
 */
function datasources_string_truncate($value, $context) {
  $maxsize = 255;
  switch($context['target_field']) {
    case 'title':
      $maxsize = variable_get('datasources_title_max_length', 255);
      break;
    default :
      $field_info = field_info_field($context['target_field']);
      if ($field_info) {
        $maxsize = $field_info['settings']['max_length'];
      }
  }
  if (mb_strlen($value) > $maxsize) {
    return mb_substr($value, 0, $maxsize);
  }
  return $value;
}

/**
 * Basic preprocessor with taxonomy terms
 */
function datasources_str2taxo($value, $context) {
  $field_info = field_info_field($context['target_field']);
  if (!empty($field_info['settings']['allowed_values'][0]['vocabulary'])) {
    $value = datasources_taxonomy_get_term($field_info['settings']['allowed_values'][0]['vocabulary'], $value, FALSE);
    if ($value) return $value->tid;
  }
}

function datasources_str2taxo_create($value, $context) {
  $field_info = field_info_field($context['target_field']);
  if (!empty($field_info['settings']['allowed_values'][0]['vocabulary'])) {
    $value = datasources_taxonomy_get_term($field_info['settings']['allowed_values'][0]['vocabulary'], $value);
    if ($value) return $value->tid;
  }
}

/**
 * Helper function to manipulate taxonomy
 * Return the corresponding term.
 * @param string $machine_name
 * @param string|array $tname
 * @param boolean $can_create
 * @param boolean $reset
 * @return null|stdClass
 *
 * If $tname is an array it's taken as a term path from top to leaf.
 * Ie. array('Term 1', 'Term 2') will match a term 'Term 2' which has a parent 'Term 1' that is top term.
 */
function datasources_taxonomy_get_term($machine_name, $tname, $can_create = TRUE, $reset = FALSE)
{
  $termsCache = &drupal_static(__FUNCTION__ . ':termsCache', array());
  $termsTreeCache = &drupal_static(__FUNCTION__ . ':termsTreeCache', array());

  $vocabulary = taxonomy_vocabulary_machine_name_load($machine_name);
  $vid = $vocabulary->vid;

  if (is_array($tname)) {
    $cid = implode('::', $tname);

    if(!$reset)
    {
      if(array_key_exists($vid, $termsTreeCache))
      {
        if(array_key_exists($cid, $termsTreeCache[$vid]))
        {
          return $termsTreeCache[$vid][$cid];
        }
      }
    }

    $ptname=$tname;
    $cname=array_pop($ptname);
    if (count($tname)>1) {
      $parent = datasources_taxonomy_get_term($machine_name, $ptname, $can_create, $reset);
      if (!$parent) {
        return null;
      }
      $ptid = $parent->tid;
    }
    else {
      $ptid = 0;
    }

    $terms=taxonomy_get_term_by_name($cname);

    foreach($terms as $term)
    {
      if($term->vid==$vid)
      {
        $ptids=array();
        foreach (taxonomy_get_parents($term->tid) as $p) {
          if ($p->vid==$vid) $ptids[]=$p->tid;
        }
        if ($ptid) {
          if (in_array($ptid, $ptids)) {
            // OK matching parent
            return $termsTreeCache[$vid][$cid]=$term;
          }
        }
        else {
          if (!count($ptids)) {
            // OK no parents
            return $termsTreeCache[$vid][$cid]=$term;
          }
        }
      }
    }
  }
  else {

    if(!$reset)
    {
      if(array_key_exists($vid, $termsCache))
      {
        if(array_key_exists($tname, $termsCache[$vid]))
        {
          return $termsCache[$vid][$tname];
        }
      }
    }

    $terms=taxonomy_get_term_by_name($tname);
    foreach($terms as $term)
    {
      if($term->vid==$vid)
      {
        return $termsCache[$vid][$tname]=$term;
      }
    }

    $ptid=0;
    $cname=$tname;
  }

  if (!$can_create) return null;
  $data=(object)array(
      'vid'=>$vid,
      'name'=>$cname,
  );

  if ($ptid) $data->parent = $ptid;
  taxonomy_term_save($data);

  return datasources_taxonomy_get_term($machine_name, $tname, false);
}

/**
 * Build and return the preprocessor callbacks registry.
 * 
 * @param boolean $reset
 * @return array
 *   array(
 *     'callback_id' => array('name' => 'My callback', 'callback' => callback, 'type' => 'return_type'),
 *     	...
 *   )
 */
function datasources_preprocessor_callbacks($reset=FALSE) {
  $preprocessor_callbacks = &drupal_static(__FUNCTION__, NULL);
  
  if ($preprocessor_callbacks===NULL || $reset) {
    $preprocessor_callbacks=array();
    foreach (module_implements('datasource_preprocessor_callbacks') as $module) {
      foreach(module_invoke($module, 'datasource_preprocessor_callbacks') as $id => $callback) {
        $name = $id;
        $type = NULL;
        $restrict = FALSE;
        if (is_array($callback)) {
          if (isset($callback['name'])) $name = $callback['name'];
          if (isset($callback['type'])) $type = $callback['type'];
          if (isset($callback['restrict'])) {
            $restrict = $callback['restrict'];
            if (!is_array($restrict)) {
              $restrict = array('datasource' => $restrict);
            }
            foreach (array('datasource', 'class', 'type', 'inner_type', 'field', 'family') as $key) { 
              if (!isset($restrict[$key])) continue;
              if (!is_array($restrict[$key])) {
                $restrict[$key] = array($restrict[$key]);
              }
            }
          }
          if (isset($callback['callback'])) $callback = $callback['callback'];
          if ($type) {
            $name = $name . ' (' . $type . ')';
          }
        }
        $preprocessor_callbacks[$module . ':' . $id] = array(
          'module' => $module,
          'id' => $id,
          'name' => $module . ':' . $name,
          'callback' => $callback,
          'type' => $type,
          'restrict' => $restrict,
        );
      }
    }
  }
  return $preprocessor_callbacks;
}

/**
 * Helper function to filter callbacks for a given field.
 * 
 * @see hook_datasource_preprocessor_callbacks()
 */
function _datasources_preprocessor_filter_callbacks($input, $field_id, $field_info) {
  $cid = "datasources_preprocessor_filter_callbacks:{$input['id']}:{$field_id}";
  $cached = cache_get($cid, 'datasources');
  if ($cached) {
    return $cached->data;
  }
  $callbacks = array_filter(datasources_preprocessor_callbacks(),
    function($callback) use ($input, $field_id, $field_info) {   
      if (!isset($callback['restrict'])||!$callback['restrict']) return TRUE;
      if (isset($callback['restrict']['callback'])) {
        return call_user_func($callback['restrict']['callback'], $callback, $input, $field_id);
      }
      if (isset($callback['restrict']['class'])&&!in_array($input['class'], $callback['restrict']['class'])) return FALSE;
      if (isset($callback['restrict']['family'])&&!in_array($input['family'], $callback['restrict']['family'])) return FALSE;
      if (isset($callback['restrict']['type'])&&!in_array($field_info['type'], $callback['restrict']['type'])) return FALSE;
      if (isset($callback['restrict']['inner_type'])&&!in_array(datasources_extract_inner_type($field_info['type']), $callback['restrict']['inner_type'])) return FALSE;
      if (isset($callback['restrict']['field'])) {
        $ret = FALSE;
        foreach ($callback['restrict']['field'] as $pattern) {
          if (preg_match("/^$pattern$/", $field_id)) $ret = TRUE;
        }
        if (!$ret) return FALSE;
      }
      if (isset($callback['restrict']['datasource'])) {
        $ret = FALSE;
        foreach ($callback['restrict']['datasource'] as $pattern) {
          if (preg_match("/^$pattern$/", $input['id'])) $ret = TRUE;
        }
        if (!$ret) return FALSE;
      }
      // we passed all tests
      return TRUE;
    }
  );
  cache_set($cid, $callbacks, 'datasources', time() + 3600);
  return $callbacks;
}

/**
 * Apply the given preprocessor callback.
 * 
 * @param string $callback_id
 * @param mixed $value
 * @param array $context
 * @return mixed
 */
function datasources_apply_preprocessor($callback_id, $value, $context) {
  if(!$callback_id) return $value;
  $callbacks = datasources_preprocessor_callbacks();
  if (!isset($callbacks[$callback_id])) return $value;
  return call_user_func($callbacks[$callback_id]['callback'], $value, $context);
}

function _datasources_cmp_keys($a, $b) {
    if ($a['weight'] == $b['weight']) {
        return 0;
    }
    return ($a['weight'] < $b['weight']) ? -1 : 1;
}

function datasources_inputs_info($input_id=NULL, $reset=FALSE) {
  $inputs=datasources_inputs_registry($reset);
  if ($input_id) return $inputs[$input_id];
  return $inputs;
}

/**
 * Implements hook_theme().
 */
function datasources_theme() {
  return array(
    'datasources_inputs_overview' => array(
      'variables' => array('inputs' => array()),
      'file' => 'datasources.admin.inc',
    ),
    'datasources_form_map_input_fields' => array(
      'render element' => 'form',
      'file' => 'datasources.admin.inc',
    ),
    'datasources_form_policy_keys_weight' => array(
      'render element' => 'form',
      'file' => 'datasources.admin.inc',
    ),
  );
}

/**
 * Reset and disable given datasource input.
 * @param string $input_id
 */
function datasources_reset_input($input_id) {
  variable_del('datasources_input_' . $input_id);
}

/**
 * Helper function for building the field list attached to an entity and optionaly wrap them against a given entity.
 * @param string $input_id
 * @param mixed $data
 *   The entity data
 * @param boolean $keep_wrappers
 *   If true return the entity wrappers
 */
function datasources_entity_fields($input_id, $entity = NULL, $keep_wrappers = FALSE) {
  $input=datasources_inputs_info($input_id);
  $registry = &drupal_static(__FUNCTION__, array());
  
  if ( (!array_key_exists($input_id, $registry)) || $entity) {
    
    $fields_info = array('fields' => array(), 'additional_structures' => array());
  
    if ($input['entity']) {
    
      $wrapper = entity_metadata_wrapper($input['entity'], $entity, array('bundle' => $input['bundle']));
      
      // return top wrapper
     if ($keep_wrappers) $fields_info['wrapper'] = $wrapper;
      
      // already added structures ?
      $added_structures = $input['structures'];
    
      // Then we walk through all properties and look if they are already contained in one of the arrays.
      // Since this uses an iterative instead of a recursive approach, it is a bit complicated, with arrays tracking the current depth.
    
      // A wrapper for a specific field name prefix, e.g. 'user:' mapped to the user wrapper
      $wrappers = array('' => $wrapper);
      
      $structures = array(
        '' => array( // top entity prefix
          'name' => '', // Display names for the prefixes
          'nesting' => 0, // The list nesting level for entities with a certain prefix
        )
      );
    
      while ($wrappers) {
        foreach ($wrappers as $prefix => $wrapper) {
          //echo get_class($wrapper) . ' - ';
          $prefix_name = $structures[$prefix]['name'];
          // Deal with lists of entities.
          $type_prefix = str_repeat('list<', $structures[$prefix]['nesting']);
          $type_suffix = str_repeat('>', $structures[$prefix]['nesting']);
          if ($structures[$prefix]['nesting']) {
            $info = $wrapper->info();
            // The real nesting level of the wrapper, not the accumulated one.
            $level = datasources_list_nesting_level($info['type']);
            for ($i = 0; $i < $level; ++$i) {
              $wrapper = $wrapper[0];
            }
          }
          // Now look at all properties.
          foreach ($wrapper as $property => $value) {
            //echo get_class($value) . ' - ';
            $info = $value->info();
            
            $info['type'] = $type_prefix . $info['type'] . $type_suffix;
            $key = $prefix . $property;
            $fields_info['fields'][$key]['name'] = $structures[$prefix]['name'] . $info['label'];
            $fields_info['fields'][$key]['description'] = empty($info['description']) ? NULL : $info['description'];
            $fields_info['fields'][$key]['type'] = $info['type']; // basic info
            if ($keep_wrappers) $fields_info['fields'][$key]['wrapper'] = $value; // more info
            $fields_info['fields'][$key]['map'] = isset($input['fields_map'][$key]) ? $input['fields_map'][$key] : NULL; // datasource map
            
            if ( ($value instanceof EntityStructureWrapper) || ($value instanceof EntityDrupalWrapper) || ($value instanceof EntityListWrapper) ) {
              // TODO add EntityDrupalWrapper true support currently only basic structure are supported
              if (isset($added_structures[$key])) {
                // Add wrapper to the queue.
                $wrappers[$key . ':'] = $value;
                $structures[$key . ':']['name'] = $structures[$prefix]['name'] . $info['label'] . ' » ';
                $structures[$key . ':']['nesting'] = datasources_list_nesting_level($info['type']);
                $structures[$key . ':']['wrapper'] = $value;
              }
              else {
                $fields_info['additional_structures'][$key] = $structures[$prefix]['name'] . $info['label'];
              }
            }
          }
          unset($wrappers[$prefix]);
        }
      }
    }
  }
  elseif (array_key_exists($input_id, $registry)) {
    $fields_info=$registry[$input_id];
  }
  if ((!array_key_exists($input_id, $registry)) && (!$entity)) {
    $registry[$input_id]=$fields_info;
  }
  return $fields_info;
}

/**
 * Utility function for determining whether a field of the given type contains
 * a list of any kind.
 *
 * @param $type
 *   A string containing the type to check.
 *
 * @return
 *   TRUE iff $type is a list type ("list<*>").
 */
function datasources_is_list_type($type) {
  return substr($type, 0, 5) == 'list<';
}

/**
 * Utility function for determining the nesting level of a list type.
 *
 * @param $type
 *   A string containing the type to check.
 *
 * @return
 *   The nesting level of the type. 0 for singular types, 1 for lists of
 *   singular types, etc.
 */
function datasources_list_nesting_level($type) {
  $level = 0;
  while (datasources_is_list_type($type)) {
    $type = substr($type, 5, -1);
    ++$level;
  }
  return $level;
}

/**
 * Utility function for nesting a type to the same level as another type.
 * I.e., after <code>$t = datasources_nest_type($type, $nested_type);</code> is
 * executed, the following statements will always be true:
 * @code
 * datasources_list_nesting_level($t) == datasources_list_nesting_level($nested_type);
 * datasources_extract_inner_type($t) == datasources_extract_inner_type($type);
 * @endcode
 *
 * @param $type
 *   The type to wrap.
 * @param $nested_type
 *   Another type, determining the nesting level.
 *
 * @return
 *   A list version of $type, as specified above.
 */
function datasources_nest_type($type, $nested_type) {
  while (datasources_is_list_type($nested_type)) {
    $nested_type = substr($type, 5, -1);
    $type = "list<$type>";
  }
  return $type;
}

/**
 * Utility function for extracting the contained primitive type of a list type.
 *
 * @param $type
 *   A string containing the list type to process.
 *
 * @return
 *   A string containing the primitive type contained within the list, e.g.
 *   "text" for "list<text>" (or for "list<list<text>>"). If $type is no list
 *   type, it is returned unchanged.
 */
function datasources_extract_inner_type($type) {
  while (datasources_is_list_type($type)) {
    $type = substr($type, 5, -1);
  }
  return $type;
}

/**
 * Return the engine object.
 * @param string $input_id
 * @param array $flags
 * 
 * @return DatasourceEngineInterface
 */
function datasources_engine($input_id, $flags = array()) {
  $input=datasources_inputs_info($input_id);
  foreach ($flags as $name => $value) {
    $input['engine']->setFlag($name, $value);
  }
  return $input['engine'];
}

/**
 * Import the given datasource input.
 * @param string $input_id
 * @param array $flags
 *   Associative array keyed with :
 *   max : The max items to import. If is 0 or FALSE loop until no more items.
 * 
 * @return integer
 *   The number of imported items
 */
function datasources_import($input_id, $flags=array()) {
  
  if (!is_array($flags)) {
    $flags = array(
        'max' => intval($flags),
    );
  }
  if (!isset($flags['max'])) {
    $flags['max'] = 50;
  }
  
  $input=datasources_inputs_info($input_id);
  
  if (!$input['ready']) {
    watchdog('datasources', 'Datasource input not ready !input', array('!input' => $input_id), WATCHDOG_ERROR);
    return FALSE;
  }
  
  $engine=datasources_engine($input_id, $flags);
  
  $n=0;
  if ($engine->initImport()) {
    for (; $n<$flags['max'] || $flags['max'] == 0; ) {
      $ret=$engine->importRecord();
      if ($ret===DatasourceEngineAbstract::EOF) break;
      if ($ret===DatasourceEngineAbstract::NOT_IMPORTED_ERROR) {
        if ($input['count_mode'] == DATASOURCES_COUNT_ALL) $n++;
      }
      elseif ($ret===DatasourceEngineAbstract::NOT_IMPORTED) {
        if ($input['count_mode'] == DATASOURCES_COUNT_PROCESSED || $input['count_mode'] == DATASOURCES_COUNT_ALL) $n++;
      }
      else $n++;
    }
    $engine->completeImport();
  }
  
  return $n;
}

/**
 * Set entity language.
 * @param string $entity_type
 * @param stdClass $entity
 * @param string $langcode
 */
function datasources_set_language($entity_type, $entity, $langcode=NULL) {
  if (!$langcode) $langcode = language_default('language');
  switch ($entity_type) {
    case 'node':
      $entity->language = $langcode;
      break;
    default:
      // should be good ...
      $entity->language = $langcode;
  }
}

/**
 * Implements hook_flush_caches()
 */
function datasources_flush_caches() {
  return array('datasources');
}
