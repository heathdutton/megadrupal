<?php

/**
 * Implements hook_datasource_inputs()
 */
function datasources_folder_datasource_inputs() {
  $inputs = array();
  
  foreach (datasources_folder_load() as $folder) {
  
    $inputs['datasource_folder_text_contents_' .$folder->name] = array(
      'name' => t('Folder text contents @name', array('@name' => $folder->name)),
      'family' => 'datasources_folder_text_contents',
      'class' => 'DatasourceEngineFolderTextContents',
      'configure' => 'admin/config/content/datasources_folder/' . $folder->dfid,
      'settings' => array(
          'dfid' => $folder->dfid,
          'folder_name' => $folder->name,
        ),
      'fields' => array(
        'creation' => array(
          'name' => t('Creation'),
          'type' => 'date',
        ),          
        'modification' => array(
          'name' => t('Modification'),
          'type' => 'date',
        ),
        'title' => array(
          'name' => t('Title'),
          'type' => 'string',
        ),
        'text' => array(
          'name' => t('Text'),
          'type' => 'list<string>',
        ), 
        'text_files' => array(
          'name' => t('Text files'),
          'type' => 'list<string>',
        ),
        'image_files' => array(
          'name' => t('Image files'),
          'type' => 'list<string>',
        ),
        'children' => array(
            'name' => t('Children text contents'),
            'type' => 'list<string>',
        ),
        'path' => array(
            'name' => t('Path'),
            'type' => 'string',
        ),
      ),
    );
  
    $inputs['datasource_folder_image_contents_' .$folder->name] = array(
      'name' => t('Folder image contents @name', array('@name' => $folder->name)),
      'family' => 'datasources_folder_image_contents',
      'class' => 'DatasourceEngineFolderImageContents',
      'configure' => 'admin/config/content/datasources_folder/' . $folder->dfid,
      'settings' => array(
          'dfid' => $folder->dfid,
          'folder_name' => $folder->name,
        ),
      'fields' => array(
        'creation' => array(
          'name' => t('Creation'),
          'type' => 'date',
        ),          
        'modification' => array(
          'name' => t('Modification'),
          'type' => 'date',
        ),
        'caption' => array(
            'name' => t('Caption'),
            'type' => 'string',
        ),
        'path' => array(
            'name' => t('Path'),
            'type' => 'string',
        ),
      ),
    );
        
  }
    
  return $inputs;
}

/**
 * Implements hook_udid_datasources()
 */
function datasources_folder_udid_datasources() {
  foreach (datasources_folder_load() as $folder) {
    $sources['datasource_folder_path_' . $folder->name] = array(
        'name' => t('Folder path @name', array('@name' => $folder->name)),
        'description' => t('Folder path for folder @name', array('@name' => $folder->name)),
    );
  }
  return $sources;
}

/**
 * Implements hook_menu().
 */
function datasources_folder_menu() {
  $pre = 'admin/config/content/datasources_folder';
  $items[$pre] = array(
      'title' => 'Datasource Folder',
      'description' => 'Import data from folders.',
      'page callback' => 'datasources_folder_folders_overview',
      'access arguments' => array('administer datasources_folder'),
      'file' => 'datasources_folder.admin.inc',
      'type' => MENU_NORMAL_ITEM,
  );
  $items[$pre . '/overview'] = array(
      'title' => 'Folders overview',
      'weight' => -10,
      'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items[$pre . '/%'] = array(
      'title' => 'Edit folder',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('datasources_folder_form_edit_folder', 4),
      'access arguments' => array('administer datasources_folder'),
      'file' => 'datasources_folder.admin.inc',
      'type' => MENU_NORMAL_ITEM,
  );
  $items[$pre . '/%/edit'] = array(
      'title' => 'Edit folder',
      'weight' => -10,
      'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items[$pre . '/%/delete'] = array(
      'title' => 'Delete folder',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('datasources_folder_form_delete_folder', 4),
      'access arguments' => array('administer datasource'),
      'file' => 'datasources_folder.admin.inc',
      'type' => MENU_LOCAL_TASK,
  );
  $items[$pre . '/add'] = array(
      'title' => 'Add folder',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('datasources_folder_form_add_folder'),
      'access arguments' => array('administer datasources_folder'),
      'file' => 'datasources_folder.admin.inc',
      'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function datasources_folder_permission() {
  return array(
      'administer datasource_folder' => array(
          'title' => t('Administer datasource_folder'),
      ),
  );
}

/**
 * Implements hook_theme().
 */
function datasources_folder_theme() {
  return array(
      'datasources_folder_folders_overview' => array(
          'variables' => array('folders' => array()),
          'file' => 'datasources_folder.admin.inc',
      ),
  );
}

/**
 * Helper function to load folder records.
 */
function datasources_folder_load($dfid = NULL, $reset = FALSE) {
  $folders = &drupal_static(__FUNCTION__, NULL);
  if ($folders===NULL||$reset) {
    $folders = array();
    $results = db_select('datasources_folder', 'df')
                ->fields('df')
                ->execute();
    if ($results) {
      foreach ($results as $folder) {
        if (is_string($folder->options)) {
          $folder->options = unserialize($folder->options);
        }
        elseif (!is_array($folder->options)) {
          $folder->options = array();
        }
        $folders[$folder->dfid] = $folder;
        
        $folder->options += array(
            'root' => NULL,
            'detect_caption' => FALSE,
            'multiple_text' => 'first',
            'image_pattern' => 'public://folder/image/%Y/%m/%d',
            );
      }
    }
  }
  if ($dfid !== NULL) {
    if (isset($folders[$dfid])) {
      return $folders[$dfid];
    }
    return NULL;
  }
  return $folders;
}

/**
 * Implements hook_datasource_preprocessor_callbacks().
 */
function datasources_folder_datasource_preprocessor_callbacks() {
  $callbacks = array(
      'path2udid' => array(
          'callback' => 'datasources_folder_path2udid',
          'type' => 'udid',
          'restrict' => array(
              'callback' => '_datasources_folder_restrict_path2udid',
          ),
      ),
      'path2ref' => array(
          'callback' => 'datasources_folder_path2ref',
          'type' => 'udid',
          'restrict' => array(
              'type' => array('node', 'list<node>',),
          ),
      ),
      'path2image' => array(
          'callback' => 'datasources_folder_path2image',
          'type' => 'field_item_image',
          'restrict' => array(
              'datasource' => 'datasource_folder_image_contents_.+',
              'type' => array('field_item_image','list<field_item_image>'),
          ),
      ),
  );
  return $callbacks;
}

/**
 * Filter function for udid field.
 * 
 * @param array $callback
 * @param array $input
 * @param string $target_field
 * @return boolean
 * 
 * @see _datasources_preprocessor_filter_callbacks()
 */
function _datasources_folder_restrict_path2udid($callback, $input, $target_field) {
  $field_info = field_info_field($target_field);
  if (isset($input['settings']['folder_name']) && $field_info && $field_info['type'] == 'udid' && $field_info['settings']['source'] == 'datasource_folder_path_' . $input['settings']['folder_name']) return TRUE;
  return FALSE;
}

/**
 * Preprocessor to get udid Path ID from path
 */
function datasources_folder_path2udid($value, $context) {
  $field_info = field_info_field($context['target_field']);
  $value = array('id' => $value);
  $value['source'] = 'datasource_folder_path_' . $context['input']['settings']['folder_name'];
  if (isset($context['record']['modification'])) {
    $value['version'] = $context['record']['modification'];
  }
  return $value;
}

function datasources_folder_path2ref($value, $context) {
  if (is_array($value)) {
    $ret = array();
    foreach ($value as $v) {
      $ret[] = datasources_folder_path2ref($v, $context);
    }
    return $ret;
  }
  $field_info = field_info_field($context['target_field']);
  $udid = array(
      'source' => 'datasource_folder_path_' . $context['input']['settings']['folder_name'],
      'id' => $value,
      );
  $ids=udid_entity_ids(
      $udid,
      array('entities' => 'node'));

  if (!($ids&&count($ids))) {
    throw new DatasourceEngineFolderException("No node for $value", DatasourceEngineFolderException::NODE_NOT_FOUND);
  }

  $nid = reset($ids['node']);
  $nid = $nid->nid;
  return $nid;
}

function datasources_folder_path2image($value, $context) {
  $path = $value;

  // dirty : only jpeg
  if (!preg_match('/\.jpe?g$/i', $path)) return NULL;

  $source = new stdClass();
  $source->uri = $context['engine']->getFolderOption('root') . '/' . $path;
  $source->uid = 1;
  $source->filemime = 'image/jpeg';

  $ts = time();
  if (isset($context['record']['creation'])) {
    $ts = $context['record']['creation'];
  }
  
  $folder = $context['engine']->getFolderOption('image_pattern');
  $folder = strftime($folder, $ts);

  file_prepare_directory($folder, FILE_CREATE_DIRECTORY|FILE_MODIFY_PERMISSIONS);
  // dirty : always create a new file record !!!
  $file = file_copy($source, $folder, FILE_EXISTS_REPLACE);

  if (!$file) {
    throw new DatasourceEngineFolderException(basename($path) . ' : file not found !', DatasourceEngineFolderException::FILE_NOT_FOUND);
  }

  return array(
      'fid' => $file->fid,
  );
}