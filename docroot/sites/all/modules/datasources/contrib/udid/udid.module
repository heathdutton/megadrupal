<?php

/**
 * Implements hook_field_info().
 *
 * Field settings:
 * - dsid : A datasource ID
 *
 */
function udid_field_info() {
  return array(
    'udid' => array(
      'label' => t('Unique datasource identifier'),
      'description' => t('This field stores a reference to an unique identifier in a given datasource.'),
      'default_widget' => 'options_select',
      'default_formatter' => 'udid',
      'settings' => array(
        'source' => NULL,
      ),
      'property_type' => 'udid', // for module entity
      'property_callbacks' => array('udid_field_udid_property_callback'), // for module entity
    ),
  );
}

/**
 * Additional callback to adapt the property info for udid fields.
 *
 * @see entity_metadata_field_entity_property_info()
 * @see entity_field_info_alter()
 */
function udid_field_udid_property_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];
  $property['getter callback'] = 'udid_field_udid_get';
  $property['setter callback'] = 'udid_field_udid_set';
}

/**
 * Callback for getting field property values.
 */
function udid_field_udid_get($entity, array $options, $name, $entity_type) {
  $field = field_info_field($name);
  $columns = array_keys($field['columns']);
  $langcode = field_language($entity_type, $entity, $name, isset($options['language']) ? $options['language']->language : NULL);
  $values = array();
  if (isset($entity->{$name}[$langcode])) {
    foreach ($entity->{$name}[$langcode] as $delta => $data) {
      $values[$delta] = $data; // we set all the array instead of just the first column
    }
  }
  // For an empty single-valued field, we have to return NULL.
  return $field['cardinality'] == 1 ? ($values ? reset($values) : NULL) : $values;
}

/**
 * Callback for setting field property values.
 */
function udid_field_udid_set($entity, $name, $value, $langcode, $entity_type) {
  $field = field_info_field($name);
  $columns = array_keys($field['columns']);
  $langcode = isset($langcode) ? $langcode : LANGUAGE_NONE;
  $values = $field['cardinality'] == 1 ? array($value) : $value;

  $items = array();
  foreach ($values as $delta => $value) {
    //$items[$delta][$columns[0]] = $value;
    if (is_array($value)) {
       $items[$delta] = $value;
    }
    else {
       $items[$delta][$columns[0]] = $value;
    }
  }
  $entity->{$name}[$langcode] = $items;
}

/**
 * Implements hook_field_is_empty().
 */
function udid_field_is_empty($item, $field) {
  return empty($item['id']);
}

/**
 * Implements hook_field_formatter_info().
 */
function udid_field_formatter_info() {
  return array(
    'udid_plain' => array(
      'label' => t('UDID plain'),
      'field types' => array('udid'),
    ),
  );
}

/**
 * Implements hook_field_prepare_view().
 *
 * This will load datasource and databranch names.
 */
function udid_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items)
{
  foreach ($entities as $id => $entity) {
    if (isset($items[$id]) && is_array($items[$id])) {
      foreach ($items[$id] as $delta => &$item) {
        if (!isset($item['source_info'])) {
          $item['source_info'] = udid_datasources_info($item['source']);
        }
      }
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function udid_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

   switch ($display['type']) {
     case 'udid_plain':
       foreach ($items as $delta => $item) {
         $markup = '<span class="udid-source">' . check_plain($item['source_info']['name']) . '</span>';
         if ($item['source_info']['branch_view']) $markup .= ' (<span class="udid-branch">' . check_plain($item['source_info']['branches'][$item['branch']]['name']) . '</span>)';
         $markup .= ' / <span class="udid-id">' . check_plain($item['id']) . '</span>';
         if ($item['source_info']['version_view'])  $markup .= ' (<span class="udid-version">' . check_plain($item['version']) . '</span>)';
         
         $element[$delta] = array(
           '#markup' => $markup,
         );
       }
       break;
   }
  
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function udid_field_widget_info() {
  return array(
    'udid_basic' => array(
      'label' => t('Unique datasource identifier basic input'),
      'field types' => array('udid'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function udid_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  
  $source_id = isset($items[$delta]['source']) ? $items[$delta]['source'] : $field['settings']['source'];
  
  $source=udid_datasources_info($source_id);
  
  $op_branches=array();
  foreach ($source['branches'] as $branch_id => $branch_info) {
    $op_branches[$branch_id] = $branch_info['name'];
  }
  
  $element += array(
  	'#type' => 'fieldset',
    'source_name' => array(
      '#prefix' => '<label>' . t('Datasource') . '</label>',
      '#type' => 'markup',
      '#markup' => $source['name'] . ($source_id != $field['settings']['source']?' (' . t('Datasource confict') . ')':''),
    ),
    'source' => array(
      '#type' => 'value',
      '#value' => $source_id,
    ),
    'branch' => array(
      '#title' => t('Databranch'),
      '#type' => 'select',
      '#default_value' => isset($items[$delta]['branch']) ? $items[$delta]['branch'] : $source['branch_default'],
      '#options' => $op_branches,
      '#disabled' => !$source['branch_edit'],
    ),
    'id' => array(
      '#title' => $source['id_label'],
      '#type' => 'textfield',
      '#default_value' => isset($items[$delta]['id']) ? $items[$delta]['id'] : '',
    ),
    'version' => array(
      '#title' => $source['version_label'],
      '#type' => 'textfield',
      '#default_value' => isset($items[$delta]['version']) ? $items[$delta]['version'] : '',
      '#disabled' => !$source['version_edit'],
    ),
  );
  
  return $element;
}

/**
 * Implements hook_field_settings_form().
 */
function udid_field_settings_form($field, $instance, $has_data) {

  $sources = udid_datasources_info();
  $options = array();
  foreach ($sources as $source_id => $source_info) {
    $options[$source_id] = $source_info['name'];
  }
  $form['source'] = array(
    '#type' => 'select',
    '#title' => t('Datasource'),
    '#default_value' => $field['settings']['source'],
    '#options' => $options,
    '#required' => TRUE,
    '#description' => t('The datasource for this Udid field.'),
    '#disabled' => $has_data,
  );

  return $form;
}

/**
 * Implements hook_field_update().
 */
function udid_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach($items as $delta=>$item)
  {
    if ((!isset($items[$delta]['branch']))||(!$items[$delta]['branch'])) {
      $source=udid_datasources_info($items[$delta]['source']);
      $items[$delta]['branch'] = $source['branch_default'];
    }
    if (!isset($items[$delta]['version'])) {
      $source=udid_datasources_info($items[$delta]['source']);
      $items[$delta]['version']=call_user_func($source['version_default'],
          $items[$delta]['source'],
          $items[$delta]['branch'],
          $items[$delta]['id']
        );
    }
  }
}

/**
 * Implements hook_field_access().
 */
function udid_field_access($op, $field, $entity_type, $entity, $account) {
  if ($op=='edit' && $field['type'] == 'udid') {
    return user_access('edit udid field ' . $field['field_name'], $account);
  }
  return TRUE;
}

/**
 * Implements hook_permission().
 */
function udid_permission() {
  $permissions=array();
  
  foreach (udid_list_fields() as $field => $field_info) {
    $permissions['edit udid field ' . $field] = array(
      'title' => t('Edit udid field !field', array('!field' => $field)),
    );
  }
  
  return $permissions;
}

/**
 * Build and return the datasources info registry.
 * 
 * @param boolean $reset
 * @return array
 */
function udid_datasources_registry($reset=FALSE) {
  $sources = &drupal_static(__FUNCTION__, NULL);
  
  if ($sources===NULL || $reset) {

    $sources=array();

    foreach (module_invoke_all('udid_datasources') as $source_id => $source_info) {
      $sources[$source_id] = $source_info;
      if (empty($sources[$source_id]['branches'])) {
        $sources[$source_id]['branches']=array();
      }
      if (empty($sources[$source_id]['branches']['main'])) {
        $sources[$source_id]['branches']['main']=array(
          'name' => t('Main databranch for !datasource', array('!datasource' => $source_info['name'])),
        );
      }
      if (empty($sources[$source_id]['branch_default'])) {
        $sources[$source_id]['branch_default']='main';
      }
      if (empty($sources[$source_id]['id_label'])) {
        $sources[$source_id]['id_label']=t('Unique ID in datasource');
      }
      if (empty($sources[$source_id]['version_label'])) {
        $sources[$source_id]['version_label']=t('Version');
      }
      if (empty($sources[$source_id]['version_default'])) {
        $sources[$source_id]['version_default']='udid_defaut_version';
      }
      if (empty($sources[$source_id]['compare'])) {
        $sources[$source_id]['compare']='udid_default_compare';
      }
    }

    foreach (module_invoke_all('udid_databranches') as $source_id => $branches) {
      $sources[$source_id]['branches']+=$branches;
    }
    
    foreach ($sources as $source_id => &$source_info) {
      if (!isset($sources[$source_id]['branch_view'])) {
        $sources[$source_id]['branch_view']=count($sources[$source_id]['branches'])>1;
      }
      if (!isset($sources[$source_id]['version_view'])) {
        $sources[$source_id]['version_view']=$sources[$source_id]['version_default']!='udid_defaut_version';
      }
      if (!isset($sources[$source_id]['branch_edit'])) {
        $sources[$source_id]['branch_edit']=count($sources[$source_id]['branches'])>1;
      }
      if (!isset($sources[$source_id]['version_edit'])) {
        $sources[$source_id]['version_edit']=FALSE;
      }
    }
    
    drupal_alter('udid_datasources', $sources);
    
    foreach ($sources as $source_id => &$source_info) {
      $weight=0;
      if (!isset($source_info['description'])) {
        $sources[$source_id]['description']=NULL;
      }
      foreach ($source_info['branches'] as $branch_id => &$branch_info) {
        if (isset($branch_info['weight'])) {
          if ($branch_info['weight']>$weight) $weight=$branch_info['weight'];
        }
        else {
          $branch_info['weight']=$weight;
        }
        $weight++;
        if (!isset($branch_info['description'])) {
          $branch_info['description']=NULL;
        }
      }
      uasort($source_info['branches'], '_udid_cmp_branches');
    }
  }
  
  return $sources;
}

/**
 * Cmp callback for branches sort.
 * @param array $a
 * @param array $b
 * @return interger
 * @see uasort()
 */
function _udid_cmp_branches($a, $b) {
  if ($a['weight'] == $b['weight']) {
    return 0;
  }
  return ($a['weight'] < $b['weight']) ? -1 : 1;
}

/**
 * Return informations on all datasources or given datasource.
 * @param string $source_id
 * @param boolean $reset
 * 
 * @return array
 */
function udid_datasources_info($source_id=NULL, $reset=NULL) {
  $sources=udid_datasources_registry($reset);
  if ($source_id) return $sources[$source_id];
  return $sources;
}

/**
 * Get fields from the given type.
 * @param string $type
 */
function udid_list_fields($type='udid') {
  $fields=&drupal_static(__FUNCTION__, NULL);
  
  if ($fields===NULL) {
    $fields[$type] = array();
    foreach (field_info_fields() as $field => $field_info) {
      $fields[$field_info['type']][$field]=$field_info;
    }
  }
  
  if (!isset($fields[$type])) return array();
  
  return $fields[$type];
}

function udid_defaut_version($source, $branch, $id) {
  return time();
}

function udid_default_compare($udid1, $udid2) {
  $version1 = isset($udid1['version']) ? $udid1['version'] : NULL;
  $version2 = isset($udid2['version']) ? $udid2['version'] : NULL;
  if ($version1 == $version2) return 0;
  return ($version1 < $version2) ? -1 : 1;
}

/**
 * Compare udid based on the compare callback.
 * @param array $udid1
 * @param array $udid2
 * @return < 0 if udid1 is less than udid2; > 0 if udid1 is greater than udid2, and 0 if they are equal. FALSE if udid are not from same source. 
 */
function udid_compare($udid1, $udid2) {
  if ($udid1['source']!=$udid2['source']) return FALSE;
  $info = udid_datasources_info($udid1['source']);
  return call_user_func($info['compare'], $udid1, $udid2);
}

/**
 * Quick helper function to check udid value.
 * 
 * @param array $udid
 * 
 * @return boolean
 */
function udid_check($udid) {
  return is_array($udid) && isset($udid['source']) && isset($udid['id']);
}

/**
 * Get entities IDs that match the udid.
 * 
 * @param array $udid
 *   Associative array with keys :
 *    - source
 *    - id
 *    - branch [optional]
 *    - version [optional]
 * @param array $options optional keyed array with :
 *   - fields : Search only in the given field(s).
 *   - entities : Search only in the given entitie(s).
 *   - bundles : Search only in the given bundle(s).
 *   - use_version : FALSE (default) or TRUE
 *   - use_branch : FALSE (default) or TRUE
 * 
 * @return array of entity ids keyed by entity type.
 *   We add an extra fields field to each item wich keep track of the fields that triggerd the match.
 * @see EntityFieldQuery::query()
 */
function udid_entity_ids(array $udid, $options=array()) {
  $fields = udid_list_fields();
  if (isset($options['fields'])) {
    if (!is_array($options['fields'])) {
      $options['fields'] = array( $options['fields'] );
    }
    $fields = array_intersect_key($fields, array_combine($options['fields'], $options['fields']));
  }

  if (isset($options['entities'])) {
    if (!is_array($options['entities'])) {
      $options['entities'] = array( $options['entities'] );
    }
  }
  
  if (isset($options['bundles'])) {
    if (!is_array($options['bundles'])) {
      $options['bundles'] = array( $options['bundles'] );
    }
  }
  
  $ids = array();
  foreach ($fields as $field => $field_info) {
    $query = new EntityFieldQuery();
    $query->fieldCondition($field, 'source', $udid['source'], '=');
    if (isset($udid['branch']) && isset($options['use_branch']) && $options['use_branch']) {
      $query->fieldCondition($field, 'branch', $udid['branch'], '=');
    }
    
    $query->fieldCondition($field, 'id', $udid['id'], '=');
    if (isset($udid['version']) && isset($options['use_version']) && $options['use_version']) {
      $query->fieldCondition($field, 'version', $udid['version'], '=');
    }
    
    if (isset($options['bundles'])) {
      $query->entityCondition('bundle', $options['bundles'], 'IN');
    }

    if (isset($options['entities'])) {
      $query->entityCondition('entity_type', $options['entities'], 'IN');
    }
    
    $res=$query->execute();
    
    if ($res) {
      foreach ($res as $entity_type => $items) {
        foreach ($items as $id => $item) {
          $ids[$entity_type][$id] = $item;
          $ids[$entity_type][$id]->fields[$field]=$field;
        }
      }
    }
  }
  return $ids;
}
