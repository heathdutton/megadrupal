<?php

/**
 * @file
 * The Spammer Node Add (spamna) module file.
 */

/**
 * Implements hook_menu().
 */
function spamna_menu() {
  $items = array();
  
  $items['spamna/check'] = array(
    'title' => 'Check for spammers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spamna_check_form'),
    'access arguments' => array('delete spammers'),
    'description' => 'Check for spammers.',
  );
  
  return $items;
}

/**
 * Display form for checking for spammers.
 */
function spamna_check_form() {
  $form = array();
  
  $form['delete'] = array(
      '#type' => 'checkbox',
      '#title' => t('Delete the user(s) suspected of spamming.'),
      '#description' => t('BEWARE!! Use this option with great caution!')
  );
  
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Check for spammers'),
  );
  
  return $form;
}

/**
 * Process the spammer check request.
 */
function spamna_check_form_submit($form, &$form_state) {
  if (module_exists('statistics')) {
    $sql = "SELECT uid FROM {users} 
        ORDER BY uid";
    $result = db_query($sql);
    foreach ($result as $row) {
      // Each operation is an array consisting of
      // - the function to call
      // - An array of arguments to that function
      $operations[] = array('spamna_check', 
        array($row->uid, $form_state['values']['delete']));
    }
    
    $batch = array(
        'operations' => $operations,
        'title' => 'Checking each user',
        'progress_message' => t('Processing user @current out of @total.'),
        'finished' => 'spamna_check_finished',
    );
    
    batch_set($batch);
  }
  else {
    drupal_set_message(
      "The core 'statistics' module at the " . 
      l(t("Modules page"), 'admin/modules') .
      " must be enabled for the spammer check to work.", 'error');
  }
}

/**
 * Callback for the end of the spammer check batch process.
 */
function spamna_check_finished($success, $results, $operations) {
  drupal_set_message(t("Spammer check complete!"));
  
  $output = format_plural(count($results), "There was 1 spammer found.", 
    "There were @count spammers found.");
  drupal_set_message(t($output));
}

/**
 * Check if a particular user is a spammer.
 * 
 * The check is done by testing to see if the user has attempted a "node/add"
 * and they have received an "Access denied" message.
 */
function spamna_check($uid, $delete = FALSE, &$context) {
  $sql = "SELECT uid, title, path 
    FROM {accesslog} WHERE uid = :uid LIMIT 0, 10";
  $result = db_query($sql, array(':uid' => $uid));
  foreach ($result as $row) {
    if ($row->path == "node/add" && $row->title == "Access denied") {
      $user = user_load($uid);
      drupal_set_message(
        t("User spammer found: user <a href='@link'>@username</a> (uid=@uid)",  
        array("@link" => url("user/") . $uid,
          "@username" => $user->name, 
          "@uid" => $uid)));
      if ($delete) {
        user_delete($uid);
      }
      
      $context['message'] = "Spammer found: " . $user->name;
      $context['results'][] = $user->name;
    }
  }
}