<?php 
/**  
 * @file : jquery_twitter_search.module  
 * This file contains hooks implementation and functions implementation  
 * for jQuery twitter search module.
 */

/**
 * Implements hook_permission()
 */
function jquery_twitter_search_permission() {
  return array(
    'administer jquery twitter search' => array(
      'title' => t('Administer jquery twitter search'),
      'description' => t('Perform administration task for jquery twitter search module.'),
    ),
  );
}

/**
 * Implements hook_menu()
 */
function jquery_twitter_search_menu() {
  $items = array();
  
  $items['admin/config/services/jquery-twitter-search'] = array(
    'title' => 'jQuery twitter search blocks list',
    'description' => 'jQuery twitter search block config',
    'page callback' => 'jquery_twitter_search_admin_page',
    'access arguments' => array('administer jquery twitter search'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'jquery_twitter_search_admin.inc',
    'file path' => drupal_get_path('module', 'jquery_twitter_search') . '/include',
  );

  $items['admin/config/services/jquery-twitter-search/default'] = array(
    'title' => 'blocks list',
    'description' => 'jQuery twitter search block config',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 2,
  );

  $items['admin/config/services/jquery-twitter-search/oauth-configration'] = array(
    'title' => 'OAuth configurations.',
    'description' => 'Configure OAuth for jQuery twitter search ',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jquery_twitter_search_oauth_admin_form'),
    'access arguments' => array('administer jquery twitter search'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'jquery_twitter_search_admin.inc',
    'file path' => drupal_get_path('module', 'jquery_twitter_search') . '/include',
    'weight' => 2,
  );

  $items['admin/config/services/jquery-twitter-search/search-configuration'] = array(
    'title' => 'Twitter search configurations.',
    'description' => 'configure/change twitter search',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jquery_twitter_search_twitter_search_form'),
    'access arguments' => array('administer jquery twitter search'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'jquery_twitter_search_admin.inc',
    'file path' => drupal_get_path('module', 'jquery_twitter_search') . '/include',
    'weight' => 2,
  );
  
  $items['admin/config/services/jquery-twitter-search/edit'] = array(
    'title' => 'jQuery twitter search add block',
    'description' => 'jQuery twitter search add a block page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jquery_twitter_search_admin_form'),
    'access arguments' => array('administer jquery twitter search'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'jquery_twitter_search_admin.inc',
    'file path' => drupal_get_path('module', 'jquery_twitter_search') . '/include',
  );
  
  $items['admin/config/services/jquery-twitter-search/del/%'] = array(
    'title' => 'jQuery twitter search delete block',
    'description' => 'jQuery twitter search add a block page.',
    'page callback' => 'jquery_twitter_search_confirm_delete_page',
    'page arguments' => array(5),
    'access arguments' => array('administer jquery twitter search'),
    'type' => MENU_CALLBACK,
    'file' => 'jquery_twitter_search_admin.inc',
    'file path' => drupal_get_path('module', 'jquery_twitter_search') . '/include',
  );
  
  $items['admin/config/services/jquery-twitter-search/edit/%'] = array(
    'title' => 'jQuery twitter search edit block',
    'description' => 'jQuery twitter search add a block page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jquery_twitter_search_admin_form', 5),
    'access arguments' => array('administer jquery twitter search'),
    'type' => MENU_CALLBACK,
    'file' => 'jquery_twitter_search_admin.inc',
    'file path' => drupal_get_path('module', 'jquery_twitter_search') . '/include',
  );

  $items['jquery-twitter-search/request'] = array(
    'title' => 'jQuery twitter search oauth request handler',
    'description' => 'jQuery twitter search oauth request handler',
    'page callback' => 'jquery_twitter_search_twitter_request_handler',
    'access arguments' => array('access content'),
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function jquery_twitter_search_block_info() {
  $blocks = array();
  $result = jquery_twitter_search_blocks_result_set();
  
  foreach ($result as $data) {
    $blocks[$data->delta] = array(
     'info' => t($data->title),
     'cache' => DRUPAL_NO_CACHE,
    );
  }
  
  return $blocks;
}

/** 
 * Implements hook_block_view().
 */
function jquery_twitter_search_block_view($delta = '') {
  $blocks = array();
  $result = jquery_twitter_search_blocks_result_set();
  while ($data = $result->fetchObject()) {
    if ($delta == $data->delta) {
      $blocks['subject'] = check_plain(t($data->title));
      $blocks['content'] = "<div class='jquery_twitter_search_block jquery_twitter_search_block_{$data->delta}' id='jquerytt-{$data->delta}'>" . jquery_twitter_search_blocks_block_content($data->delta) . "</div>";
      $block['attributes']['class'][] = 'mymodules-special-class';
    }
  }
  
  return $blocks;
}

/**
 * Add the contetnt to the block.
 * 
 * @param $delta 
 *   The id of the block.
 * 
 * @return
 *   return the html content of the jquery twitter search block.
 */
function jquery_twitter_search_blocks_block_content($delta) {
  if ($path = libraries_get_path('jquery_twitter_search')) {
    if (file_exists($path . '/jquery.twitter.search.js')) {
      drupal_add_js($path . '/jquery.twitter.search.js');
      if ($delta) {
        $block = jquery_twitter_search_get_block_info($delta);
        $options = unserialize($block->options);
        $output_js = "jQuery('#jquerytt-$delta').twitterSearch({";
        $output_js .= 'url:"' . base_path() . 'jquery-twitter-search/request/",';
        $output_js .=  (isset($options['jqueryts_term'])) ? 'term:"' . check_plain($options['jqueryts_term']) . '",' : 'term:"drupal",';
        $output_js .=  (isset($options['jqueryts_anchors'])) ? "anchors: {$options['jqueryts_anchors']}," : "anchors: Boolean(1),";
        $output_js .=  (isset($options['jqueryts_anim_out_speed'])) ? "animOutSpeed:{$options['jqueryts_anim_out_speed']}," : "animOutSpeed: 2000,";
        $output_js .=  (isset($options['jqueryts_nim_in_speed'])) ? "animInSpeed:({$options['jqueryts_nim_in_speed']})," : "animInSpeed: 1000,";
        $output_js .=  "animOut: { opacity: 1 },";
        $output_js .=  (isset($options['jqueryts_apply_styles'])) ? "applyStyles:Boolean({$options['jqueryts_apply_styles']})," : "applyStyles: Boolean(1),";
        $output_js .=  (isset($options['jqueryts_avatar'])) ? "avatar:Boolean({$options['jqueryts_avatar']}), " : "avatar: Boolean(1),";
        $output_js .=  (isset($options['jqueryts_bird'])) ? "bird:Boolean({$options['jqueryts_bird']}), " : "bird: Boolean(1),";
        $output_js .=  (isset($options['jqueryts_bird_link'])) ? "birdLink:'{$options['jqueryts_bird_link']}', " : "birdLink: false,";
        $output_js .=  (isset($options['jqueryts_bird_src'])) ? "birdSrc:'{$options['jqueryts_bird_src']}', " : "bird: 'http://cloud.github.com/downloads/malsup/twitter/tweet.gif',";
        $output_js .=  (isset($options['jqueryts_colorexterior'])) ? "colorExterior:'{$options['jqueryts_colorexterior']}', " : "colorExterior: '#DDD',";
        $output_js .=  (isset($options['jqueryts_colorinterior'])) ? "colorInterior:'{$options['jqueryts_colorinterior']}', " : "colorInterior: 'white',";
        $output_js .=  (isset($options['jqueryts_filter'])) ? "filter:Boolean({$options['jqueryts_filter']}), " : "filter: NULL,";
        $output_js .=  (isset($options['jqueryts_pause'])) ? "pause:Boolean({$options['jqueryts_pause']}), " : "pause: Boolean(1),";
        $output_js .=  (isset($options['jqueryts_refresh_seconds'])) ? "refreshSeconds:Boolean({$options['jqueryts_refresh_seconds']}), " : "refreshSeconds:0,";
        $output_js .=  (isset($options['jqueryts_time'])) ? "time:Boolean({$options['jqueryts_time']}), " : "time:Boolean(1)";
        $output_js .=  (isset($options['jqueryts_timeout'])) ? "timeout:Boolean({$options['jqueryts_timeout']}), " : "timeout:4000";
        $output_js .=  (isset($options['jqueryts_term_title'])) ? "title:'{$options['jqueryts_term_title']}', " : "title: '',";
        $output_js .=  (isset($options['jqueryts_term_title_link']) && $options['jqueryts_term_title_link'] != 'null' ) ? "titleLink:'{$options['jqueryts_term_title_link']}', " : "titleLink:null";
        $output_js .= "})";
        drupal_add_js($output_js, array('type' => 'inline', 'scope' => 'footer'));
        drupal_add_css(drupal_get_path('module', 'jquery_twitter_search') . '/css/jquery_twitter_search.css');
      }
    } 
    else {
      drupal_set_message(t('Please Make sure that you have jquery.twitter.search.js'), 'warning');
    }
  }
}

/**
 * fetch all the row from jquery_twitter_search table.
 * 
 * @return Database object restult set. 
 */
function jquery_twitter_search_blocks_result_set() {
  $result = db_select('jquery_twitter_search', 'jqts')->fields('jqts', array('title', 'delta', 'options'))->execute();
  return $result;
}

/**
 * fetch specific row from jquery_twitter_search table
 * depending on $delta.
 * 
 * @param $delta
 *    The id of the block.
 * @return Database object result set.
 */
function jquery_twitter_search_get_block_info($delta) {
  if ($delta) {
    $result = db_select('jquery_twitter_search', 'jqts')->fields('jqts', array('title', 'delta', 'options'))->condition('delta', $delta)->execute()->fetch();
    return $result; 
  }
}

function jquery_twitter_search_twitter_request_handler($term) {
  $results = array();
  if (!empty($term)) {
    $data = jquery_twitter_search_cache($term);
    $results = unserialize($data) ;
  }

  drupal_json_output($results->statuses);
  drupal_exit();

}

function jquery_twitter_search_cache($term) {
  $cid = 'jquery_twitter_search::' . $term;
  if (($cache = cache_get($cid)) && !empty($cache->data)) {
    $data = $cache->data;
  }
   else {
    $path = libraries_get_path('twitteroauth');
    require_once( $path . '/twitteroauth/twitteroauth.php');

    $consumer_key = variable_get('consumer_key', '');
    $access_token = variable_get('access_token', '');
    $consumer_secret = variable_get('consumer_secret', '');
    $access_token_secret = variable_get('access_token_secret', '');

    $toa = new TwitterOAuth($consumer_key, $consumer_secret, $access_token, $access_token_secret);

    $query = array(
      'q' => check_plain($term),
    );

    if (variable_get('twitter_search_geocode', '') != '' ) {
      $query['geocode'] = variable_get('twitter_search_geocode', '');
    }
    if (variable_get('twitter_search_lang', '') != '' ) {
      $query['lang'] = variable_get('twitter_search_lang', '');
    }
    if (variable_get('twitter_search_locale', '') != '' ) {
      $query['locale'] = variable_get('twitter_search_locale', '');
    }
    if (variable_get('twitter_search_type', '') != '' ) {
      $query['type'] = variable_get('twitter_search_type', '');
    }
    if (variable_get('twitter_search_result_count', '') != '' ) {
      $query['count'] = variable_get('twitter_search_result_count', '');
    }
    if (variable_get('twitter_search_result_until', '') != '' ) {
      $query['until'] = variable_get('twitter_search_result_until', '');
    }
    if (variable_get('twitter_search_result_since_id', '')  != '' ) {
      $query['since_id'] = variable_get('twitter_search_result_since_id', '');
    }
    if (variable_get('twitter_search_result_max_id', '')  != '' ) {
      $query['max_id'] = variable_get('twitter_search_result_max_id', '');
    }
    $results = $toa->get('search/tweets', $query);
    $data = serialize($results);
    cache_set($cid, $data);
  }
  return $data;
}