<?php

require_once('stacksight-php-sdk/SSUtilities.php');
require_once('stacksight-php-sdk/SSHttpRequest.php');
require_once('stacksight-php-sdk/SSClientBase.php');
require_once('stacksight-php-sdk/SSEventsMessageMapping.php');
require_once('stacksight-php-sdk/platforms/SSDrupalClient.php');

function stacksight_admin() {
	drupal_add_css(drupal_get_path('module', 'stacksight').'/css/ss-admin.css');

	$form = array();

	$form['stacksight_app_id'] = array(
		'#type' => 'textfield',
		'#title' => t('Stack ID'),
		'#default_value' => variable_get('stacksight_app_id', ''),
		'#size' => 24,
		'#maxlength' => 24,
		'#description' => t("A stack id as created at <a href='https://apps.stacksight.io'>stacksight.io</a>."),
		'#required' => TRUE,
	);

	$form['stacksight_token'] = array(
		'#type' => 'textfield',
		'#title' => t('Access Token'),
		'#default_value' => variable_get('stacksight_token', ''),
		'#size' => 68,
		'#maxlength' => 68,
		'#description' => t("An access token as created at <a href='https://apps.stacksight.io'>stacksight.io</a>"),
		'#required' => TRUE,
	);

	$app_id = variable_get('stacksight_app_id');
	$token = variable_get('stacksight_token');
	if ($app_id && $token) {
		$form['code'] = array(
			'#markup' => theme('code_config', array('data' => array(
				'_id' => $app_id, 
				'token' => $token, 
				'module_path' => drupal_get_path('module', 'stacksight'),
				'diagnostic' => stacksight_get_diagnostic($app_id, $token)
			)))
		);
	}

	//update LK
	stacksight_updates_publish();
	return system_settings_form($form);
}

function stacksight_menu() {
	$items = array();

	$items['admin/config/development/stacksight'] = array(
		'title' => 'StackSight',
		'description' => 'StackSight integration module settings',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('stacksight_admin'),
		'access arguments' => array('administer stacksight settings'),
		'weight' => -5,
	);

	return $items;
}

function stacksight_permission() {
	return array(
		'administer stacksight settings' => array(
			'title' => t('Administer StackSight settings')
		),
	);
}

function stacksight_watchdog($log) {
	global $ss_client;

	// exclude certain events
	$exclude = array('content');

	if (empty($ss_client) || empty($log) || empty($log['type']) || in_array($log['type'], $exclude)) return;

	$res = array();
	if (!empty($log['message'])) {
		$message = empty($log['variables']) ? t($log['message']) : t($log['message'], $log['variables']);
		$message = strip_tags($message);

		if ($log['type'] == 'php') {
			$severity = stacksight_map_severity_level($log['severity']);
			$res = $ss_client->sendLog($message, $severity);
		} else {
			// process other types...
		}
	}

	if ($res && !$res['success']) SSUtilities::error_log($res['message'], 'error');
}

function stacksight_map_severity_level($drupal_sev_level) {
	// suppose we have an error if the severity level is malformed
	$level = 'error';

	switch ($drupal_sev_level) {
		case WATCHDOG_ERROR:
			$level = 'error';
			break;

		case WATCHDOG_WARNING:
			$level = 'warn';
			break;

		case WATCHDOG_NOTICE:
			$level = 'info';
			break;
		
		case WATCHDOG_DEBUG:
			$level = 'log';
			break;
	}

	return $level;
}

function stacksight_theme() {
	return array(
		'code_config' => array(
			'variables' => array(
				'data' => NULL
			),
			'template' => 'code_config',
		),
	);
}

function stacksight_get_diagnostic($app_id, $token) {
    $list = array();

    if (!defined('STACKSIGHT_APP_ID')) {
        $list[] = t("App Id is not defined");
    } elseif (STACKSIGHT_APP_ID != $app_id) {
        $list[] = t("App Ids do not match");
    }

    if (!defined('STACKSIGHT_TOKEN')) {
        $list[] = t("Token is not defined<br>");
    } elseif(STACKSIGHT_TOKEN != $token) {
        $list[] = t("Tokens do not match<br>"); 
    }

    if (!defined('STACKSIGHT_BOOTSTRAPED')) {
        $list[] = t("bootstrap-drupal.php is not included in settings.php<br>");
    }

    return $list;
}

function stacksight_get_availible_updates() {
  require_once DRUPAL_ROOT . '/modules/update/update.module';
  require_once DRUPAL_ROOT . '/modules/update/update.compare.inc';
  $available = update_get_available(TRUE);
  $updates = update_calculate_project_data($available);
  return $updates;
}

////////////
// Events //
////////////

function _stacksight_node_events($node, $action) {
	global $ss_client, $user;
	if (empty($ss_client) || empty($action) || empty($node)) return;

	$event = $add_actions = array();
	$url_options = array('absolute' => true);
	if (user_is_logged_in()) {
		$event['user'] = array(
			'name' => $user->name,
			'url' => url('user/'.$user->uid, $url_options)
		);
	}

	$res = $ss_client->publishEvent(array(
		'action' => $action,
		'type' => 'content',
		'subtype' => $node->type,
		'name' => $node->title,
		'url' => url('node/' . $node->nid, $url_options)
	) + $event);

	switch ($action) {
		case 'updated':
			if (!empty($node->original)) {
				// promoted
				if ($node->original->promote == NODE_NOT_PROMOTED && $node->promote == NODE_PROMOTED) $add_actions[] = 'promoted';
				// unpromoted
				if ($node->original->promote == NODE_PROMOTED && $node->promote == NODE_NOT_PROMOTED) $add_actions[] = 'unpromoted';

				// published
				if ($node->original->status == NODE_NOT_PUBLISHED && $node->status == NODE_PUBLISHED) $add_actions[] = 'published';
				// unpublished
				if ($node->original->status == NODE_PUBLISHED && $node->status == NODE_NOT_PUBLISHED) $add_actions[] = 'unpublished';

				// sticky
				if ($node->original->sticky == NODE_NOT_STICKY && $node->sticky == NODE_STICKY) $add_actions[] = 'sticked';
				// not sticky
				if ($node->original->sticky == NODE_STICKY && $node->sticky == NODE_NOT_STICKY) $add_actions[] = 'unsticked';
			}
			break;
		
		case 'created':
			// checking only "on" actions, cause opposite state did not exist
			// promoted
			if ($node->promote == NODE_PROMOTED) $add_actions[] = 'promoted';
			// published
			if ($node->status == NODE_PUBLISHED) $add_actions[] = 'published';
			// sticky
			if ($node->sticky == NODE_STICKY) $add_actions[] = 'sticked';
			break;
	}

	if (!empty($add_actions)) {
		$add_res = $ss_client->publishEvent(array(
			'action' => implode(', ', $add_actions),
			'type' => 'content',
			'subtype' => $node->type,
			'name' => $node->title,
			'url' => url('node/' . $node->nid, $url_options)
		) + $event);
	}
}

function stacksight_node_update($node) {
	_stacksight_node_events($node, 'updated');
}

function stacksight_node_insert($node) {
	_stacksight_node_events($node, 'created');
}

function stacksight_node_delete($node) {
	_stacksight_node_events($node, 'deleted');
}

// user
function _stacksight_user_events($account, $action) {
	global $ss_client, $user;
	if (empty($ss_client) || empty($account) || empty($action)) return;

	$event = $changed = array(); $event_name = '';
	if (!empty($account->uid)) {
		$url_options = array('absolute' => true);
		$event['url'] = url('user/'.$account->uid, $url_options);
	}
	if (user_is_logged_in()) {
		$event['user'] = array(
			'name' => $user->name,
			'url' => url('user/'.$user->uid, $url_options)
		);
	}

	$event_name = $account->name;

	if ($action == 'updated' && !empty($account->original)) {
		$event_name = 'account';
		$origin = $account->original;
		// name
		if ($origin->name != $account->name) $changed[] = t('name (@str)', array('@str' => $account->name));
		// timezone
		if ($origin->timezone != $account->timezone) $changed[] = t('time zone (@str)', array('@str' => $account->timezone));
		// password
		if ($origin->pass != $account->pass) $changed[] = 'password';
		// email
		if ($origin->mail != $account->mail) $changed[] = t('email (@str)', array('@str' => $account->mail));
		// active/blocked
		if ($origin->status != $account->status) $changed[] = $account->status ? t('status (acvive)') : t('status (blocked)');
		// avatar uploaded
		if (!empty($account->picture_upload)) $changed[] = t('avatar (new)');
		// avatar deleted
		if (!empty($account->picture_delete)) $changed[] = t('avatar (removed)');
	}

	// general event
	$res = $ss_client->publishEvent(array(
		'action' => $action,
		'type' => 'user',
		'name' => $event_name
	) + $event);

	// specific what changed (see case 'updated' for details)
	if (!empty($changed)) {
		$add_res = $ss_client->publishEvent(array(
			'action' => 'changed',
			'type' => 'user',
			'name' => implode(', ', $changed)
		) + $event);
	}
}

function stacksight_user_insert(&$edit, $account, $category) {
	_stacksight_user_events($account, 'added');
}

function stacksight_user_update(&$edit, $account, $category) {
	_stacksight_user_events($account, 'updated');
}

function stacksight_user_delete($account) {
	_stacksight_user_events($account, 'deleted');
}

function _stacksight_user_log_events($account, $action) {
	global $ss_client;
	if (empty($ss_client) || empty($account) || empty($action)) return;

	$event = array();
	$url_options = array('absolute' => true);
	$event['user'] = array('name' => $account->name, 'url' => url('user/'.$account->uid, $url_options));

	$res = $ss_client->publishEvent(array(
		'action' => $action,
		'type' => 'user',
		'name' => '',
	) + $event);
}

function stacksight_user_login(&$edit, $account) {
	_stacksight_user_log_events($account, 'logged in');
}

function stacksight_user_logout($account) {
	_stacksight_user_log_events($account, 'logged out');
}

// files
function _stacksight_file_events($file, $action) {
	global $ss_client, $user;
	$event = array();

	if (empty($ss_client) || empty($file) || empty($action)) return;
	if ($action == 'uploaded') {
		// required that condition cause this hook is called 3 times with different parameters
		if (empty($file->original) || empty($file->status)) return;

		$event['url'] = file_create_url($file->uri);
	}

	$url_options = array('absolute' => true);
	if (user_is_logged_in()) {
		$event['user'] = array(
			'name' => $user->name,
			'url' => url('user/'.$user->uid, $url_options)
		);
	}
	$file_ex = explode('/', $file->filemime);
	if (!empty($file_ex[0])) {
		$event['subtype'] = $file_ex[0];
	}

	$res = $ss_client->publishEvent(array(
		'action' => $action,
		'type' => 'file',
		'name' => $file->filename,
		'id' => $file->fid,
		'data' => array(
			'file_name' => $file->filename,
			'type' => $file->filemime,
			'size' => $file->filesize,
			'url' => isset($event['url']) ? $event['url'] : '',
		)
	) + $event);
}

function stacksight_file_presave($file) {
	_stacksight_file_events($file, 'uploaded');
}

function stacksight_file_delete($file) {
	_stacksight_file_events($file, 'deleted');
}


// comments
function stacksight_comment_delete($comment) {
	global $ss_client, $user;
	if (empty($ss_client) || empty($comment)) return;

	$event = array();
	$url_options = array('absolute' => true);
	if (user_is_logged_in()) {
		$event['user'] = array(
			'name' => $user->name,
			'url' => url('user/'.$user->uid, $url_options)
		);
	}
	if (!empty($comment->subject)) $event['name'] = $comment->subject;

	$lang = $comment->language;
	if (!empty($comment->comment_body[$lang]) && count($comment->comment_body[$lang])) {
		$event['data']['body'] = $comment->comment_body[$lang][0]['value'];
		if (empty($event['name'])) $event['name'] = mb_substr($event['data']['body'], 0, 16).'...';
	}

	$res = $ss_client->publishEvent(array(
		'action' => 'deleted',
		'type' => 'comment'
	) + $event);
}

function stacksight_comment_insert($comment) {
	global $ss_client, $user;
	if (empty($ss_client) || empty($comment)) return;
	if ($comment->status != COMMENT_NOT_PUBLISHED) return;


	$event = array();
	$url_options = array('absolute' => true);
	if (user_is_logged_in()) {
		$event['user'] = array(
			'name' => $user->name,
			'url' => url('user/'.$user->uid, $url_options)
		);
	}
	if ($comment->subject) $event['name'] = $comment->subject;

	$lang = $comment->language;
	if (!empty($comment->comment_body[$lang]) && count($comment->comment_body[$lang])) {
		$event['data']['body'] = $comment->comment_body[$lang][0]['value'];
	}

	$res = $ss_client->publishEvent(array(
		'action' => 'added',
		'type' => 'comment',
		'id' => $comment->cid
	) + $event);
}

function stacksight_comment_update($comment) {
	global $ss_client, $user;
	if (empty($ss_client) || empty($comment)) return;

	$event = array();
	$url_options = array('absolute' => true);
	if (user_is_logged_in()) {
		$event['user'] = array(
			'name' => $user->name,
			'url' => url('user/'.$user->uid, $url_options)
		);
	}
	// if comment changed
	$com_changes = _stacksight_array_diff_assoc_recursive(
		array('subject' => $comment->subject) + $comment->comment_body, 
		array('subject' => $comment->original->subject) + $comment->original->comment_body
	);
	if ($com_changes) {

	}

	if ($comment->original->status == COMMENT_NOT_PUBLISHED && $comment->status == COMMENT_PUBLISHED) {
		// published
		$event['action'] = 'published';
	} elseif ($comment->original->status == COMMENT_PUBLISHED && $comment->status == COMMENT_NOT_PUBLISHED) {
		// unpublished
		$event['action'] = 'unpublished';
	}
}

function stacksight_updates_publish() {
	global $ss_client;
	if (empty($ss_client)) return;

	$updates = stacksight_get_availible_updates();
	$upd = array();
	foreach ($updates as $key => $uitem) {
		$upd[] = array(
			'title' => $uitem['title'],
			'release_ts' => $uitem['datestamp'],
			'current_version' => $uitem['existing_version'],
			'latest_version' => $uitem['latest_version'],
			'type' => $uitem['project_type'],
			'status' => $uitem['status'],
			// 'description' => $uitem['status'],
			'link' => $uitem['link'],
			'release_link' => isset($uitem['releases'][$uitem['latest_version']]['release_link']) ? $uitem['releases'][$uitem['latest_version']]['release_link'] : '',
			'download_link' => isset($uitem['releases'][$uitem['latest_version']]['download_link']) ? $uitem['releases'][$uitem['latest_version']]['download_link'] : '',
			// 'update_link' => '',
		);
	}

	$ss_client->sendUpdates(array('data' => $upd));
}

/* update on cron run */
function stacksight_cron(){
  watchdog('stacksight','stacksight invoked by cron');
// Default to an hourly interval. Of course, cron has to be running at least
  // hourly for this to work.
  if(module_exists('backup_migrate')){
//	stacksight_backup_call();
  }
  $interval = variable_get('stacksight_interval', 60 * 60);
  // We usually don't want to act every time cron runs (which could be every
  // minute) so keep a time for the next run in a variable.
  if (time() >= variable_get('stacksight_next_execution', 0)) {
    stacksight_updates_publish();
    if (!empty($GLOBALS['stacksight_show_status_message'])) {
      drupal_set_message(t('stacksight executed at %time', array('%time' => date_iso8601(time(0)))));
    }
    variable_set('stacksight_next_execution', time() + $interval);
  }
}

function _stacksight_array_diff_assoc_recursive($array1, $array2) {
    $difference=array();
    foreach($array1 as $key => $value) {
        if( is_array($value) ) {
            if( !isset($array2[$key]) || !is_array($array2[$key]) ) {
                $difference[$key] = $value;
            } else {
                $new_diff = _stacksight_array_diff_assoc_recursive($value, $array2[$key]);
                if( !empty($new_diff) )
                    $difference[$key] = $new_diff;
            }
        } else if( !array_key_exists($key,$array2) || $array2[$key] !== $value ) {
            $difference[$key] = $value;
        }
    }
    return $difference;
}

function stacksight_backup_call(){
/* temporary comment out untill php-5.2 robustnass is developed
	global $ss_client;
	$backup_list = backup_migrate_get_saved_backups();

	if (empty($ss_client) || empty($backup_list)) return;
	$result = [];
	$backups = [];
  $widgets = [];
	foreach($backup_list as $backup){
		if(is_array($backup)){
            foreach($backup as $key => $backup_info){
                if(isset($backup_info->file_info['file_id']))
                    $url_destination = $backup_info->file_info['destination_id'].'/'.$backup_info->file_info['file_id'];
                $backups[date('Y-m-d', $backup_info->file_info['filetime'])][] = [
                    'timestamp' => $backup_info->file_info['filetime'],
                    'file' => $backup_info->file_info['filename'],
                    'dest' => $backup_info->file_info['destination_id'],
                    'source' => $backup_info->file_info['bam_sourcename'],
                    'size' => $backup_info->file_info['filesize'],
                    'links' => [
                        'download' => url('/admin/config/system/backup_migrate/settings/destination/downloadfile/'.$url_destination, array('absolute' => TRUE)),
                        'restore'  => url('/admin/config/system/backup_migrate/settings/destination/list/restorefile/'.$url_destination, array('absolute' => TRUE)),
                        'delete'   => url('/admin/config/system/backup_migrate/settings/destination/list/deletefile/'.$url_destination, array('absolute' => TRUE))
                    ]
                ];
            }
        }
    }

    $widgets[] = [
		'type' => "backup",
	  	'title' => "Your backups",
	  	'desc' => "For information, updates and documentation, please visit the AIO WP Security & Firewall Plugin Page",
        'group' => 1,
        'order' => 2,
		'data' => $backups
	];

	$object = [
		'category' => 'backups',
        'title' => 'Great Backups Plugin',
        'desc' => 'Great Backups Plugin description',
        'widgets' => $widgets
	];

	$result['data'][] = $object;

	$res = $ss_client->sendHealth($result);
*/
}
