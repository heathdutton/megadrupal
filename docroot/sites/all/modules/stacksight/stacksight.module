<?php

require_once('stacksight-php-sdk/SSUtilities.php');
require_once('stacksight-php-sdk/SSHttpRequest.php');
require_once('stacksight-php-sdk/SSClientBase.php');
require_once('stacksight-php-sdk/SSEventsMessageMapping.php');
require_once('stacksight-php-sdk/platforms/SSDrupalClient.php');

function stacksight_admin() {
	drupal_add_css(drupal_get_path('module', 'stacksight').'/css/ss-admin.css');
	$form = array();

	if(defined('STACKSIGHT_APP_ID')){
		$form['stacksight_app_id'] = array(
			'#type' => 'fieldset',
			'#title' => t('Stack ID'),
			'#description' => defined('STACKSIGHT_APP_ID') ? STACKSIGHT_APP_ID : '<span class="pre-code-red">'.t("Not set").'</span>'
		);
	}

	$form['stacksight_token'] = array(
		'#type' => 'fieldset',
		'#title' => t('Access Token'),
		'#description' => defined('STACKSIGHT_TOKEN') ? STACKSIGHT_TOKEN : '<span class="pre-code-red">'.t("Not set").'</span>'
	);

	$token = defined('STACKSIGHT_TOKEN') ? STACKSIGHT_TOKEN : t('YOUR_STACKSIGHT_TOKEN');

	if ($token) {
		$form['code'] = array(
			'#markup' => theme('code_config', array('data' => array(
				'token' => $token,
				'module_path' => drupal_get_path('module', 'stacksight'),
				'diagnostic' => stacksight_get_diagnostic()
			)))
		);
	}

	//update LK
	stacksight_updates_publish();
	return system_settings_form($form);
}

function stacksight_menu() {
	$items = array();

	$items['admin/config/development/stacksight'] = array(
		'title' => 'StackSight',
		'description' => 'StackSight integration module settings',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('stacksight_admin'),
		'access arguments' => array('administer stacksight settings'),
		'weight' => -5,
	);

	return $items;
}

function stacksight_permission() {
	return array(
		'administer stacksight settings' => array(
			'title' => t('Administer StackSight settings')
		),
	);
}

function stacksight_watchdog($log) {
	global $ss_client;

	// exclude certain events
	$exclude = array('content');

	if (empty($ss_client) || empty($log) || empty($log['type']) || in_array($log['type'], $exclude)) return;

	$res = array();
	if (!empty($log['message'])) {
		$message = empty($log['variables']) ? t($log['message']) : t($log['message'], $log['variables']);
		$message = strip_tags($message);

		if ($log['type'] == 'php') {
			$severity = stacksight_map_severity_level($log['severity']);
			$res = $ss_client->sendLog($message, $severity);
		} else {
			// process other types...
		}
	}

	if ($res && !$res['success']) SSUtilities::error_log($res['message'], 'error');
}

function stacksight_map_severity_level($drupal_sev_level) {
	// suppose we have an error if the severity level is malformed
	$level = 'error';

	switch ($drupal_sev_level) {
		case WATCHDOG_ERROR:
			$level = 'error';
			break;

		case WATCHDOG_WARNING:
			$level = 'warn';
			break;

		case WATCHDOG_NOTICE:
			$level = 'info';
			break;
		
		case WATCHDOG_DEBUG:
			$level = 'log';
			break;
	}

	return $level;
}

function stacksight_theme() {
	return array(
		'code_config' => array(
			'variables' => array(
				'data' => NULL
			),
			'template' => 'code_config',
		),
	);
}

function stacksight_get_diagnostic() {
    $list = array();

    if (!defined('STACKSIGHT_TOKEN')) {
        $list[] = t("Token is not defined<br>");
    }

    if (!defined('STACKSIGHT_BOOTSTRAPED')) {
        $list[] = t("bootstrap-drupal.php is not included in settings.php<br>");
    }

    return $list;
}

function stacksight_get_availible_updates() {
  require_once DRUPAL_ROOT . '/modules/update/update.module';
  require_once DRUPAL_ROOT . '/modules/update/update.compare.inc';
  update_refresh();
  $available = update_get_available(TRUE);
  $updates = update_calculate_project_data($available);
  return $updates;
}

////////////
// Events //
////////////

function _stacksight_node_events($node, $action) {
	global $ss_client, $user;
	if (empty($ss_client) || empty($action) || empty($node)) return;

	$event = $add_actions = array();
	$url_options = array('absolute' => true);
	if (user_is_logged_in()) {
		$event['user'] = array(
			'name' => $user->name,
			'url' => url('user/'.$user->uid, $url_options)
		);
	}

	$res = $ss_client->publishEvent(array(
		'action' => $action,
		'type' => 'content',
		'subtype' => $node->type,
		'name' => $node->title,
		'url' => url('node/' . $node->nid, $url_options)
	) + $event);

	switch ($action) {
		case 'updated':
			if (!empty($node->original)) {
				// promoted
				if ($node->original->promote == NODE_NOT_PROMOTED && $node->promote == NODE_PROMOTED) $add_actions[] = 'promoted';
				// unpromoted
				if ($node->original->promote == NODE_PROMOTED && $node->promote == NODE_NOT_PROMOTED) $add_actions[] = 'unpromoted';

				// published
				if ($node->original->status == NODE_NOT_PUBLISHED && $node->status == NODE_PUBLISHED) $add_actions[] = 'published';
				// unpublished
				if ($node->original->status == NODE_PUBLISHED && $node->status == NODE_NOT_PUBLISHED) $add_actions[] = 'unpublished';

				// sticky
				if ($node->original->sticky == NODE_NOT_STICKY && $node->sticky == NODE_STICKY) $add_actions[] = 'sticked';
				// not sticky
				if ($node->original->sticky == NODE_STICKY && $node->sticky == NODE_NOT_STICKY) $add_actions[] = 'unsticked';
			}
			break;
		
		case 'created':
			// checking only "on" actions, cause opposite state did not exist
			// promoted
			if ($node->promote == NODE_PROMOTED) $add_actions[] = 'promoted';
			// published
			if ($node->status == NODE_PUBLISHED) $add_actions[] = 'published';
			// sticky
			if ($node->sticky == NODE_STICKY) $add_actions[] = 'sticked';
			break;
	}

	if (!empty($add_actions)) {
		$add_res = $ss_client->publishEvent(array(
			'action' => implode(', ', $add_actions),
			'type' => 'content',
			'subtype' => $node->type,
			'name' => $node->title,
			'url' => url('node/' . $node->nid, $url_options)
		) + $event);
	}
}

function stacksight_node_update($node) {
	_stacksight_node_events($node, 'updated');
}

function stacksight_node_insert($node) {
	_stacksight_node_events($node, 'created');
}

function stacksight_node_delete($node) {
	_stacksight_node_events($node, 'deleted');
}

// user
function _stacksight_user_events($account, $action) {
	global $ss_client, $user;
	if (empty($ss_client) || empty($account) || empty($action)) return;

	$event = $changed = array(); $event_name = '';
	if (!empty($account->uid)) {
		$url_options = array('absolute' => true);
		$event['url'] = url('user/'.$account->uid, $url_options);
	}
	if (user_is_logged_in()) {
		$event['user'] = array(
			'name' => $user->name,
			'url' => url('user/'.$user->uid, $url_options)
		);
	}

	$event_name = $account->name;

	if ($action == 'updated' && !empty($account->original)) {
		$event_name = 'account';
		$origin = $account->original;
		// name
		if ($origin->name != $account->name) $changed[] = t('name (@str)', array('@str' => $account->name));
		// timezone
		if ($origin->timezone != $account->timezone) $changed[] = t('time zone (@str)', array('@str' => $account->timezone));
		// password
		if ($origin->pass != $account->pass) $changed[] = 'password';
		// email
		if ($origin->mail != $account->mail) $changed[] = t('email (@str)', array('@str' => $account->mail));
		// active/blocked
		if ($origin->status != $account->status) $changed[] = $account->status ? t('status (acvive)') : t('status (blocked)');
		// avatar uploaded
		if (!empty($account->picture_upload)) $changed[] = t('avatar (new)');
		// avatar deleted
		if (!empty($account->picture_delete)) $changed[] = t('avatar (removed)');
	}

	// general event
	$res = $ss_client->publishEvent(array(
		'action' => $action,
		'type' => 'user',
		'name' => $event_name
	) + $event);

	// specific what changed (see case 'updated' for details)
	if (!empty($changed)) {
		$add_res = $ss_client->publishEvent(array(
			'action' => 'changed',
			'type' => 'user',
			'name' => implode(', ', $changed)
		) + $event);
	}
}

function stacksight_user_insert(&$edit, $account, $category) {
	_stacksight_user_events($account, 'added');
}

function stacksight_user_update(&$edit, $account, $category) {
	_stacksight_user_events($account, 'updated');
}

function stacksight_user_delete($account) {
	_stacksight_user_events($account, 'deleted');
}

function _stacksight_user_log_events($account, $action) {
	global $ss_client;
	if (empty($ss_client) || empty($account) || empty($action)) return;

	$event = array();
	$url_options = array('absolute' => true);
	$event['user'] = array('name' => $account->name, 'url' => url('user/'.$account->uid, $url_options));

	$res = $ss_client->publishEvent(array(
		'action' => $action,
		'type' => 'user',
		'name' => '',
	) + $event);
}

function stacksight_user_login(&$edit, $account) {
	_stacksight_user_log_events($account, 'logged in');
}

function stacksight_user_logout($account) {
	_stacksight_user_log_events($account, 'logged out');
}

// files
function _stacksight_file_events($file, $action) {
	global $ss_client, $user;
	$event = array();

	if (empty($ss_client) || empty($file) || empty($action)) return;
	if ($action == 'uploaded') {
		// required that condition cause this hook is called 3 times with different parameters
		if (empty($file->original) || empty($file->status)) return;

		$event['url'] = file_create_url($file->uri);
	}

	$url_options = array('absolute' => true);
	if (user_is_logged_in()) {
		$event['user'] = array(
			'name' => $user->name,
			'url' => url('user/'.$user->uid, $url_options)
		);
	}
	$file_ex = explode('/', $file->filemime);
	if (!empty($file_ex[0])) {
		$event['subtype'] = $file_ex[0];
	}

	$res = $ss_client->publishEvent(array(
		'action' => $action,
		'type' => 'file',
		'name' => $file->filename,
		'id' => $file->fid,
		'data' => array(
			'file_name' => $file->filename,
			'type' => $file->filemime,
			'size' => $file->filesize,
			'url' => isset($event['url']) ? $event['url'] : '',
		)
	) + $event);
}

function stacksight_file_presave($file) {
	_stacksight_file_events($file, 'uploaded');
}

function stacksight_file_delete($file) {
	_stacksight_file_events($file, 'deleted');
}


// comments
function stacksight_comment_delete($comment) {
	global $ss_client, $user;
	if (empty($ss_client) || empty($comment)) return;

	$event = array();
	$url_options = array('absolute' => true);
	if (user_is_logged_in()) {
		$event['user'] = array(
			'name' => $user->name,
			'url' => url('user/'.$user->uid, $url_options)
		);
	}
	if (!empty($comment->subject)) $event['name'] = $comment->subject;

	$lang = $comment->language;
	if (!empty($comment->comment_body[$lang]) && count($comment->comment_body[$lang])) {
		$event['data']['body'] = $comment->comment_body[$lang][0]['value'];
		if (empty($event['name'])) $event['name'] = mb_substr($event['data']['body'], 0, 16).'...';
	}

	$res = $ss_client->publishEvent(array(
		'action' => 'deleted',
		'type' => 'comment'
	) + $event);
}

function stacksight_comment_insert($comment) {
	global $ss_client, $user;
	if (empty($ss_client) || empty($comment)) return;
	if ($comment->status != COMMENT_NOT_PUBLISHED) return;


	$event = array();
	$url_options = array('absolute' => true);
	if (user_is_logged_in()) {
		$event['user'] = array(
			'name' => $user->name,
			'url' => url('user/'.$user->uid, $url_options)
		);
	}
	if ($comment->subject) $event['name'] = $comment->subject;

	$lang = $comment->language;
	if (!empty($comment->comment_body[$lang]) && count($comment->comment_body[$lang])) {
		$event['data']['body'] = $comment->comment_body[$lang][0]['value'];
	}

	$res = $ss_client->publishEvent(array(
		'action' => 'added',
		'type' => 'comment',
		'id' => $comment->cid
	) + $event);
}

function stacksight_comment_update($comment) {
	global $ss_client, $user;
	if (empty($ss_client) || empty($comment)) return;

	$event = array();
	$url_options = array('absolute' => true);
	if (user_is_logged_in()) {
		$event['user'] = array(
			'name' => $user->name,
			'url' => url('user/'.$user->uid, $url_options)
		);
	}
	// if comment changed
	$com_changes = _stacksight_array_diff_assoc_recursive(
		array('subject' => $comment->subject) + $comment->comment_body, 
		array('subject' => $comment->original->subject) + $comment->original->comment_body
	);
	if ($com_changes) {

	}

	if ($comment->original->status == COMMENT_NOT_PUBLISHED && $comment->status == COMMENT_PUBLISHED) {
		// published
		$event['action'] = 'published';
	} elseif ($comment->original->status == COMMENT_PUBLISHED && $comment->status == COMMENT_NOT_PUBLISHED) {
		// unpublished
		$event['action'] = 'unpublished';
	}
}

function stacksight_updates_publish() {
	global $ss_client;
	if (empty($ss_client)) return;

	$updates = stacksight_get_availible_updates();
	$upd = array();
	foreach ($updates as $key => $uitem) {
		$upd[] = array(
			'title' => $uitem['title'],
			'release_ts' => $uitem['datestamp'],
			'current_version' => $uitem['existing_version'],
			'latest_version' => $uitem['latest_version'],
			'type' => $uitem['project_type'],
			'status' => $uitem['status'],
			// 'description' => $uitem['status'],
			'link' => $uitem['link'],
			'release_link' => isset($uitem['releases'][$uitem['latest_version']]['release_link']) ? $uitem['releases'][$uitem['latest_version']]['release_link'] : '',
			'download_link' => isset($uitem['releases'][$uitem['latest_version']]['download_link']) ? $uitem['releases'][$uitem['latest_version']]['download_link'] : '',
			// 'update_link' => '',
		);
	}

	$ss_client->sendUpdates(array('data' => $upd));
}

/* update on cron run */
function stacksight_cron(){
	global $ss_client;

  	watchdog('stacksight','stacksight invoked by cron');
	// Default to an hourly interval. Of course, cron has to be running at least
  	// hourly for this to work.
  	$result = array();
	if(module_exists('backup_migrate')){
		$backup_migrate = stacksight_backup_call($result);
		if(!empty($backup_migrate))
			$result['data'][] = $backup_migrate;
  	}
  	if(module_exists('yoast_seo')){
		$yoast_seo = stacksight_seo_call();
		if(!empty($yoast_seo))
			$result['data'][] = $yoast_seo;
  	}

	if(module_exists('security_review')){
		module_load_include('inc', 'security_review', 'security_review.help');
		$security_review = stacksight_security_call();
		if(!empty($security_review))
			$result['data'][] = $security_review;
	}

	if(!empty($result)){
		$ss_client->sendHealth($result);
	}

	if(defined('STACKSIGHT_INCLUDE_INVENTORY') && STACKSIGHT_INCLUDE_INVENTORY == true){
		$inventory = stacksight_inventory_call();
		if(!empty($inventory)){
			$data = array(
				'data' => $inventory
			);
			$ss_client->sendInventory($data);
		}
	}

  	$interval = variable_get('stacksight_interval', 60 * 60);
  	// We usually don't want to act every time cron runs (which could be every
  	// minute) so keep a time for the next run in a variable.
  	if (time() >= variable_get('stacksight_next_execution', 0)) {
    	stacksight_updates_publish();
    	if (!empty($GLOBALS['stacksight_show_status_message'])) {
      	drupal_set_message(t('stacksight executed at %time', array('%time' => date_iso8601(time(0)))));
    	}
    	variable_set('stacksight_next_execution', time() + $interval);
  	}
}

function _stacksight_array_diff_assoc_recursive($array1, $array2) {
    $difference=array();
    foreach($array1 as $key => $value) {
        if( is_array($value) ) {
            if( !isset($array2[$key]) || !is_array($array2[$key]) ) {
                $difference[$key] = $value;
            } else {
                $new_diff = _stacksight_array_diff_assoc_recursive($value, $array2[$key]);
                if( !empty($new_diff) )
                    $difference[$key] = $new_diff;
            }
        } else if( !array_key_exists($key,$array2) || $array2[$key] !== $value ) {
            $difference[$key] = $value;
        }
    }
    return $difference;
}

function stacksight_backup_call($result){
	global $ss_client;
	$backup_list = backup_migrate_get_saved_backups();

	if (empty($ss_client) || empty($backup_list)) return;
	$backups = array();
    $widgets = array();
	foreach($backup_list as $backup){
		if(is_array($backup)){
            foreach($backup as $key => $backup_info){
                if(isset($backup_info->file_info['file_id']))
                    $url_destination = $backup_info->file_info['destination_id'].'/'.$backup_info->file_info['file_id'];

                $backups[date('Y-m-d', $backup_info->file_info['filetime'])][] = array(
                    'timestamp' => $backup_info->file_info['filetime'],
                    'file' => array($backup_info->file_info['filename']),
                    'dest' => array($backup_info->file_info['destination_id']),
                    'source' => $backup_info->file_info['bam_sourcename'],
                    'size' => $backup_info->file_info['filesize'],
                    'links' => array(
                        'download' => (isset($url_destination) && $url_destination) ? url('/admin/config/system/backup_migrate/settings/destination/downloadfile/'.$url_destination, array('absolute' => TRUE)) : null,
                        'restore'  => (isset($url_destination) && $url_destination) ? url('/admin/config/system/backup_migrate/settings/destination/list/restorefile/'.$url_destination, array('absolute' => TRUE)) : null,
                        'delete'   => (isset($url_destination) && $url_destination) ? url('/admin/config/system/backup_migrate/settings/destination/list/deletefile/'.$url_destination, array('absolute' => TRUE)) : null
					)
				);
            }
        }
    }

    $widgets[] = array(
		'type' => "backup",
	  	'title' => "Your backups",
	  	'desc' => "For information, updates and documentation, please visit the AIO WP Security & Firewall Plugin Page",
        'group' => 1,
        'order' => 2,
		'data' => $backups
	);

	$object = array(
		'category' => 'backups',
        'title' => 'Backups',
        'desc' => 'what is secureSight and why it\'s important to you!',
        'widgets' => $widgets
	);

	if($backups){
		return $object;
	} else return false;
}

function stacksight_inventory_call(){
	$inventory_modules = array();
	$inventory_themes = array();
	$modules = module_list();

	if($modules && is_array($modules)){
		foreach($modules as $key => $module){
			$path = drupal_get_path('module', $module) . '/' . $module . '.info';
			$info = drupal_parse_info_file($path);

			$dep_modules = array();
			if(isset($info['dependencies']) && !empty($info['dependencies'])){
				foreach($info['dependencies'] as $dep_module){
					if(!empty($dep_module)){
						$path_dep_mod = drupal_get_path('module', $dep_module) . '/' . $dep_module . '.info';
						$info_dep_mod = drupal_parse_info_file($path_dep_mod);
						if(!empty($info_dep_mod) && is_array($info_dep_mod)){
							$dep_modules[] = array(
								'type' => SSDrupalClient::TYPE_MODULE,
								'name' => (isset($dep_module) && !empty($dep_module)) ? $dep_module : $info_dep_mod['name'],
								'version' => (isset($info_dep_mod['version']) && !empty($info_dep_mod['version'])) ? $info_dep_mod['version'] : false,
								'label' => (isset($info_dep_mod['name']) && !empty($info_dep_mod['name'])) ? $info_dep_mod['name'] : false,
								'description' => (isset($info_dep_mod['description']) && !empty($info_dep_mod['description'])) ? $info_dep_mod['description'] : false,
								'active' => (module_exists($dep_module)) ? true : false,
								'requires' => array()
							);
						}
					}
				}
			}

			$inventory_modules[] = array(
				'type' => SSDrupalClient::TYPE_MODULE,
				'name' => (isset($key) && !empty($key)) ? $key : $info['name'],
				'version' => (isset($info['version']) && !empty($info['version'])) ? $info['version'] : false,
				'label' => (isset($info['name']) && !empty($info['name'])) ? $info['name'] : false,
				'description' => (isset($info['description']) && !empty($info['description'])) ? $info['description'] : false,
				'active' => (module_exists($module)) ? true : false,
				'requires' => (!empty($dep_modules)) ? $dep_modules : array()
			);
		}
	}

	$themes = list_themes();
	if($themes && is_array($themes)){
		foreach($themes as $key => $theme){
			$inventory_themes[] = array(
				'type' => SSDrupalClient::TYPE_THEME,
				'name' => $theme->name,
				'version' => $theme->info['version'],
				'label' => $theme->info['name'],
				'description' => $theme->info['description'],
				'active' => ($theme->status) ? true : false,
				'requires' => array()
			);
		}
	}

	return array_merge($inventory_modules, $inventory_themes);
}

function stacksight_security_call(){
	$last_result = security_review_get_stored_results();
	if($last_result && is_array($last_result) && !empty($last_result)){
		$points = array();
		$points['file_perms'] = array(
			'points' => 50,
			'critical' => true,
			'desc' => security_review_check_file_perms_help()
		);
		$points['input_formats'] = array(
			'points' => 30,
			'critical' => true,
			'desc' => security_review_check_input_formats_help()
		);
		$points['field'] = array(
			'points' => 15,
			'critical' => false,
			'desc' => security_review_check_field_help()
		);
		$points['error_reporting'] = array(
			'points' => 10,
			'critical' => false,
			'desc' => security_review_check_error_reporting_help()
		);
		$points['private_files'] = array(
			'points' => 15,
			'critical' => false,
			'desc' => security_review_check_private_files_help()
		);
		$points['query_errors'] = array(
			'points' => 30,
			'critical' => true,
			'desc' => security_review_check_query_errors_help()
		);
		$points['failed_logins'] = array(
			'points' => 20,
			'critical' => false,
			'desc' => security_review_check_failed_logins_help()
		);
		$points['upload_extensions'] = array(
			'points' => 35,
			'critical' => true,
			'desc' => security_review_check_upload_extensions_help()
		);
		$points['admin_permissions'] = array(
			'points' => 30,
			'critical' => false,
			'desc' => security_review_check_admin_permissions_help()
		);
		$points['untrusted_php'] = array(
			'points' => 30,
			'critical' => true,
			'desc' => null
		);
		$points['executable_php'] = array(
			'points' => 25,
			'critical' => false,
			'desc' => security_review_check_executable_php_help()
		);
		$points['base_url_set'] = array(
			'points' => 20,
			'critical' => false,
			'desc' => security_review_check_base_url_help()
		);
		$points['temporary_files'] = array(
			'points' => 15,
			'critical' => false,
			'desc' => security_review_check_temporary_files_help()
		);

		$max_points = 0;
		$cur_points = 0;
		$results = array();
		$critical = array();

		$list = array();
		$list['completed']['title'] = t('Completed Tasks');
		$list['completed']['points'] = 0;
		$list['pending']['title'] = t('Pending Tasks');
		$list['pending']['points'] = 0;


		foreach($last_result as $i => $result){
			if(isset($result['reviewcheck']) && !empty($result['reviewcheck']) && isset($points[$result['reviewcheck']])){
				$max_points += $points[$result['reviewcheck']]['points'];
				if($result['result'])
					$cur_points += $points[$result['reviewcheck']]['points'];
				$results[] = $points[$result['reviewcheck']];

				if($points[$result['reviewcheck']]['critical'] == true){
					$critical[] = array(
						'name' => $points[$result['reviewcheck']]['desc']['title'],
						'status' => 0,
						'link' => url('admin/reports/security-review/help/security_review/admin_permissions', array('absolute' => TRUE))
					);
				}

				if($result['result'] == true){
					$list['completed']['points'] += $points[$result['reviewcheck']]['points'];
					$list['completed']['data'][] = array(
						'id' => $i,
						'title' => $points[$result['reviewcheck']]['desc']['title'],
						'desc' => implode(' ', $points[$result['reviewcheck']]['desc']['descriptions']),
						'points' => $points[$result['reviewcheck']]['points'],
						'security_level' => 0,
						'link' => url('admin/reports/security-review/help/security_review/admin_permissions', array('absolute' => TRUE)),
						'status' => 1
					);
				} else {
					$list['pending']['points'] += $points[$result['reviewcheck']]['points'];
					$list['pending']['data'][] = array(
						'id' => $i,
						'title' => $points[$result['reviewcheck']]['desc']['title'],
						'desc' => implode(' ', $points[$result['reviewcheck']]['desc']['descriptions']),
						'points' => $points[$result['reviewcheck']]['points'],
						'security_level' => 0,
						'link' => url('admin/reports/security-review/help/security_review/admin_permissions', array('absolute' => TRUE)),
						'status' => 0
					);
				}
			}
		}

		$sending = false;
		$data = array(
			'category' => 'security',
			'title' => t('Security'),
			'desc' => t('This panel shows the summary how your site is secure (according to the Security review module)'),
			'plugin_url' => url('admin/reports/security-review',  array('absolute' => TRUE))
		);

		if (!empty($last_result)) {
			$data['widgets'][] = array(
				'type' => 'meter',
				'title' => t('Security Strength Meter'),
				'desc' => t('This meter shows in points the security level of your site'), // Optional
				'order' => 1,       // specifies the block sequence (the place in DOM). Optinal
				'group' => 1,       // specifies the group where the widget will be rendered.
				// lets sey for meter widget where will be 2 checklists but they should be display in once parent DOM container. Optinal
				'point_max' => $max_points, // max available points to gain
				'point_cur' => $cur_points  // current amount of the points
			);
			$sending = true;
		}

		if (!empty($critical)) {
			$data['widgets'][] = array(
				'type' => 'checklist',
				'title' => t('Critical Features Status'),
				'desc' => t('Below is the current status of the critical features that you should activate on your site to achieve a minimum level of recommended security'),
				'order' => 2,       // specifies the block sequence (the place in DOM). Optinal
				'group' => 1,       // specifies the group where the widget will be rendered.
				// lets sey for meter widget where will be 2 checklists but they should be display in once parent DOM container. Optinal
				'checklist' => $critical
			);
			$sending = true;
		}

		if(!empty($list)){
			$data['widgets'][] = array(
				'type' => 'pointslist',
				'title' => t('Secure points tasks'),
				'desc' => t('Secure points tasks desc'),
				'order' => 3,       // specifies the block sequence (the place in DOM). Optinal
				'group' => 1,       // specifies the group where the widget will be rendered.
				// lets sey for meter widget where will be 2 checklists but they should be display in once parent DOM container. Optinal
				'pointslist' => $list
			);
			$sending = true;
		}

		if($sending === true){
			return $data;
		} else return false;
	}
	return false;
}

function stacksight_seo_call(){
	$query = db_select('node', 'p');
	$query->leftJoin('yoast_seo', 'pm', 'pm.entity_id = p.nid');
	$query->fields('p', array('nid', 'title'))
		->fields('pm', array('seo_status'))
		->condition('p.status', 1, '=')
		->condition('p.type', 'article', '=');
	$posts = $query->execute();

	$results_post = array();
	$results_post['good'] = array();
	$results_post['ok'] = array();
	$results_post['poor'] = array();
	$results_post['bad'] = array();
	$results_post['no_focus'] = array();

	$count_posts = 0;
	$total_score = 0;
	while ($record = $posts->fetchObject()) {
		switch ($record->seo_status) {
			case '0':
			case '1':
			case '2':
			case '3':
				$post = _stacksight_seo_add_element($record);
				$results_post['bad'][] = $post;
				$total_score += $total_score + $post['points'];
				break;

			case '4':
			case '5':
				$post = _stacksight_seo_add_element($record);
				$results_post['poor'][] = $post;
				$total_score += $total_score + $post['points'];
				break;

			case '6':
			case '7':
				$post = _stacksight_seo_add_element($record);
				$results_post['ok'][] = $post;
				$total_score += $total_score + $post['points'];
				break;

			case '8':
			case '9':
			case '10':
				$post = _stacksight_seo_add_element($record);
				$results_post['good'][] = $post;
				$total_score += $total_score + $post['points'];
				break;

			default:
				$post = _stacksight_seo_add_element($record);
				$results_post['no_focus'][] = $post;
				$total_score += $total_score + $post['points'];
				break;
		}

		$count_posts++;

	}

	$data = array(
		'category' => 'seo',
		'title' => 'SEO',
		'desc' => 'This panel shows your SEO (according to the Yoast SEO plugin)',
	);

	$general_seo = array();;
	$general_seo['detail'] = $results_post;
	$general_seo['graphic'] = _stacksight_seo_call_graphic($results_post, $count_posts);
	$general_seo['performance'] = _stacksight_seo_call_performance($count_posts, $total_score);
	$returned = false;

	if(!empty($general_seo['performance'])){
		$data['widgets'][] = array(
			'type' => 'seo_meter',
			'title' => 'General SEO performance',
			'desc' => 'This is general performance information', // Optional
			'order' => 1,       // specifies the block sequence (the place in DOM). Optinal
			'group' => 1,       // specifies the group where the widget will be rendered.
			'seo_meter' => $general_seo['performance']
		);
		$returned = true;
	}

	if(!empty($general_seo['graphic'])){
		$data['widgets'][] = array(
			'type' => 'seo_chart',
			'title' => 'SEO graphic data',
			'desc' => 'This is general graphic information about posts', // Optional
			'order' => 2,       // specifies the block sequence (the place in DOM). Optinal
			'group' => 1,       // specifies the group where the widget will be rendered.
			'seo_chart' => $general_seo['graphic']
		);
		$returned = true;
	}

	if(!empty($general_seo['detail'])){
		$data['widgets'][] = array(
			'type' => 'seo_detail',
			'title' => 'SEO detail data',
			'desc' => 'This is detail information about posts', // Optional
			'order' => 3,       // specifies the block sequence (the place in DOM). Optinal
			'group' => 1,       // specifies the group where the widget will be rendered.
			'seo_detail' => $general_seo['detail']
		);
		$returned = true;
	}
	if ($returned === true){
		return $data;
	} else return false;
}

function _stacksight_seo_call_graphic($data, $post_size){
	$result = array();
	foreach($data as $key => $item){
		if(!isset($result[$key]))
			$result[$key] = array();
		$result[$key]['count'] = sizeof($item);
		$result[$key]['percent'] = ($result[$key]['count'] / $post_size) * 100;
	}
	return $result;
}

function _stacksight_seo_call_performance($count_posts, $total_score){
	$result = array();
	$result['max_score'] = $count_posts * 100;
	$result['total_score'] = $total_score;
	$result['performance_percent'] = ($result['max_score'] !== 0) ? ($result['total_score'] / $result['max_score']) * 100 : 0;
	return $result;
}

function _stacksight_seo_add_element($object){
	$result = array();
	$result['id'] = $object->nid;
	$result['title'] = (isset($object->title) && !empty($object->title)) ? $object->title : 'No title';
	$result['link'] = url(drupal_get_path_alias('/node/'.$object->nid), array('absolute'=>TRUE));
	$result['points'] = (isset($object->seo_status)) ? $object->seo_status * 10 : 0;
	return $result;
}