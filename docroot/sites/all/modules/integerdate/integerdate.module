<?php
// $Id: integerdate.module,v 1.3.2.2 2010/11/05 23:29:39 everettz Exp $

/**
 * @file
 * Provides an integer date field type, widget, and formatter.
 */

/**
 * Implements hook_field_info().
 */
function integerdate_field_info() {
  return array(
    'integerdate_date' => array(
      'label' => t('Integer date'),
      'description' => t('This field stores a date in the database as an integer.'),
//      'instance_settings' => array('min' => '', 'max' => '',),
      'default_widget' => 'integerdate_date_textfield',
      'default_formatter' => 'integerdate_date_default',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
/*function integerdate_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form = array();

  // Placeholder for future settings.

  return $form;
}*/

/**
 * Implements hook_field_instance_settings_form().
 */
/*function integerdate_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  $form = array();

  // Placeholder for future instance settings.

  return $form;
}*/

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 */
/*function integerdate_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if ($item['value'] != '') {
      if (is_numeric($instance['settings']['min']) && $item['value'] < $instance['settings']['min']) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'number_min',
          'message' => t('%name: the value may be no less than %min.', array('%name' => t($instance['label']), '%min' => $instance['settings']['min'])),
        );
      }
      if (is_numeric($instance['settings']['max']) && $item['value'] > $instance['settings']['max']) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'number_max',
          'message' => t('%name: the value may be no greater than %max.', array('%name' => t($instance['label']), '%max' => $instance['settings']['max'])),
        );
      }
    }
  }
}*/

/**
 * Implements hook_field_is_empty().
 */
function integerdate_field_is_empty($item, $field) {
  if (empty($item['value']) && (string) $item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function integerdate_field_formatter_info() {
  return array(
    'integerdate_date_default' => array(
      'label' => t('Default formatted date'),
      'field types' => array('integerdate_date',),
      'settings' => array(
        'format_custom_string' => '',
        'format_option' => 'short',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function integerdate_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  $element['format_option'] = array(
    '#type' => 'select',
    '#title' => t('Select date format'),
    '#description' => t('Select the date format for this instance'),
    '#options' => array(
      'short' => integerdate_field_formatter_format_date(REQUEST_TIME, 'short'),
      'medium' => integerdate_field_formatter_format_date(REQUEST_TIME, 'medium'),
      'long' => integerdate_field_formatter_format_date(REQUEST_TIME, 'long'),
      'html5_date' => format_date(REQUEST_TIME, 'custom', 'Y\-m\-d') . ' (HTML5 <date>)',
      'html5_month' => format_date(REQUEST_TIME, 'custom', 'Y\-m') . ' (HTML5 <month>)',
      'custom' => t('<custom format>'),
    ),
    '#default_value' => $settings['format_option'],
    '#multiple' => FALSE,
  );

  $element['format_custom_string'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom format string'),
    '#description' => t('Enter a custom format string, to be used if "Custom format" is selected'),
    '#default_value' => $settings['format_custom_string'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function integerdate_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = integerdate_field_formatter_format_date(REQUEST_TIME, $settings['format_option'], $settings['format_custom_string']);
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function integerdate_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $element = array();

  $formatted_date = integerdate_field_formatter_format_date($items[0]['value'], $settings['format_option'], $settings['format_custom_string']);
  $element[0] = array('#markup' => $formatted_date);

  return $element;
}

/**
 * Format a date with a specified format.
 *
 * @param $timestamp
 *   A unix type timestamp as an Integer.
 * @param $op
 *   The 'format_option' from the formatter settings.
 * @param $custom
 *   (optional) A custom format string. Defaults to ''.
 *
 * @return
 *   A formatted date.
 *
 * @see integerdate_field_formatter_settings_form()
 */
function integerdate_field_formatter_format_date($timestamp, $op, $custom = '') {
  $formatted_date = '';

    switch ($op) {
    case 'short':
      $formatted_date = format_date($timestamp, $op);
      break;
    case 'medium':
      $formatted_date = format_date($timestamp, $op);
      break;
    case 'long':
      $formatted_date = format_date($timestamp, $op);
      break;
    case 'html5_date':
      $formatted_date = format_date($timestamp, 'custom', 'Y\-m\-d');
      $formatted_date = '<date>' . $formatted_date . '</date>';
      break;
    case 'html5_month':
      $formatted_date = format_date($timestamp, 'custom', 'Y\-m');
      $formatted_date = '<month>' . $formatted_date . '</month>';
      break;
    case 'custom':
    default:
      $formatted_date = format_date($timestamp, 'custom', $custom);
      break;
  }

  return $formatted_date;
}

/**
 * Implements hook_field_widget_info().
 */
 function integerdate_field_widget_info() {
   return array(
     'integerdate_date_textfield' => array(
       'label' => t('Integer date textfield'),
       'field types' => array('integerdate_date',),
     ),
   );
 }

 /**
  * Implements hook_field_widget_form().
 */
 function integerdate_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
   $default_value = (!empty($items[$delta]['value'])) ? $items[$delta]['value'] : REQUEST_TIME;

   $element += array(
     '#type' => 'textfield',
     '#default_value' => $default_value,
     '#theme' => 'integerdate_date_textfield',
     '#value_callback' => 'integerdate_date_textfield_field_widget_value',
     '#element_validate' => array('integerdate_date_textfield_field_widget_validate'),
   );

   return $element;
 }

 /**
  * Value callback for 'integerdate_date_textfield'.
 */
function integerdate_date_textfield_field_widget_value($element, $input = FALSE) {
  if ($input) {
    $value_string = $input;
    $value = strtotime($value_string);
  }
  else {
    $value = $element['#default_value'];
    $value_string = date(DATE_RSS, $value);
  }

  return array(
    'value' => $value,
    'value_string' => $value_string,
  );
}

/**
 * Validate integerdate_date field widget.
 */
function integerdate_date_textfield_field_widget_validate($element, &$form_state) {
  if (empty($element['#value']['value'])) {
    form_error($element, t('Enter a valid date.'));
  }
}

/**
 * Implements hook_theme().
 */
function integerdate_theme() {
  return array(
    'integerdate_date_textfield' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Theme function for 'integerdate_date_textfield' field widget.
 */
function theme_integerdate_date_textfield($variables) {
  $element = $variables['element'];
  $element['#attributes']['type'] = 'text';
  $element['#value'] = $element['#value']['value_string'];
  element_set_attributes($element, array('id', 'name', 'value', 'size', 'maxlength'));
  _form_set_class($element, array('form-text', 'form-integerdate-date-text'));

  $output = '<input' . drupal_attributes($element['#attributes']) . ' />';

  return $output;
}
