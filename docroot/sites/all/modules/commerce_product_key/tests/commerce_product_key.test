<?php

/**
 * @file
 * Unit tests for the commerce product module.
 */

/**
 * Test the product and product type CRUD.
 */
class CommerceProductKeyCRUDTestCase extends CommerceBaseTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Product Key CRUD',
      'description' => 'Test the product key CRUD functions.',
      'group' => 'Drupal Commerce',
    );
  }

  function setUp() {
    $modules = parent::setUpHelper('all', array('commerce_product_key', 'commerce_product_key_ui'));
    parent::setUp($modules);

    $this->site_admin = $this->createSiteAdmin();
    cache_clear_all(); // Just in case
  }

  /**
   * Ensure the default product key types are created.
   */
  function testCommerceProductKeyDefaultProductKeys() {
    $default_types = array(
      'voucher' => 'Voucher',
    );

    // Load the default product key types.
    $types_created = commerce_product_key_types();
    //$this->verbose('Array contents ($types_created): ' . var_export($types_created, true));

    // Ensure each type exists.
    foreach ($default_types as $type => $product_key_type) {
      $this->assertTrue(!empty($types_created[$type]), 'Product type ' . check_plain($type) . ' has been created.');
    }
  }

  /**
   * Test the product key type CRUD functions.
   */
  function testCommerceProductKeyTypeCrud() {
    // Ensure commerce_product_key_ui_product_key_type_new() returns a valid empty product key type.
    $new_product_key_type = commerce_product_key_ui_product_key_type_new();
    $this->assertNotNull($new_product_key_type['type'], 'commerce_product_key_ui_product_key_type_new() instantiated the type property.');
    $this->assertNotNull($new_product_key_type['name'], 'commerce_product_key_ui_product_key_type_new() instantiated the help property.');
    $this->assertNotNull($new_product_key_type['description'], 'commerce_product_key_ui_product_key_type_new() instantiated the help property.');
    $this->assertNotNull($new_product_key_type['help'], 'commerce_product_key_ui_product_key_type_new() instantiated the help property');

    // Supply customer values for the product type properties.
    $type = $this->randomName(20);
    $name = $this->randomName(40);
    $description = $this->randomString(128);
    $help = $this->randomString(128);

    // Add the values to the new content type.
    $new_product_key_type['type'] = $type;
    $new_product_key_type['name'] = $name;
    $new_product_key_type['description'] = $description;
    $new_product_key_type['help'] = $help;
    $new_product_key_type['is_new'] = TRUE;

    // Ensure commerce_product_key_ui_product_key_type_save() returns the proper value when inserting.
    $return = commerce_product_key_ui_product_key_type_save($new_product_key_type, FALSE);

    //$this->verbose('Array contents: ' . var_export($return, true));
    $this->assertEqual($return, SAVED_NEW, 'commerce_product_key_ui_product_key_type_save() returned SAVED_NEW when saving a new product key type.');

    // Load the newly saved content type.
    $saved_product_key_type = commerce_product_key_type_load($type);

    // Ensure the values that were saved match the values that we created.
    $this->assertTrue($saved_product_key_type, 'commerce_product_key_type_load() loaded the new product key type.');
    $this->assertEqual($type, $saved_product_key_type['type'], 'The new product key type type was properly saved and loaded.');
    $this->assertEqual($name, $saved_product_key_type['name'], 'The new product key type name was properly saved and loaded.');
    $this->assertEqual($description, $saved_product_key_type['description'], 'The new product key type description text was properly saved and loaded.');
    $this->assertEqual($help, $saved_product_key_type['help'], 'The new product key type help text was properly saved and loaded.');

    // Alter the title, to ensure the update function works.
    $altered_name = $this->randomName(40);
    $saved_product_key_type['name'] = $altered_name;

    // Ensure commerce_product_key_ui_product_key_type_save() returns the proper value when updating.
    $return = commerce_product_key_ui_product_key_type_save($saved_product_key_type);
    $this->assertEqual($return, SAVED_UPDATED, 'commerce_product_key_ui_product_key_type_save() returned SAVED_UPDATED when saving an updated product key type.');

    // Reset the cached product types, and verify commerce_product_types load the saved type.
    commerce_product_key_types_reset();
    $types = commerce_product_key_types();
    $this->assertNotNull($types[$type], 'commerce_product_key_types_reset() successfully reset the product key types.');
    $this->assertEqual($saved_product_key_type['name'], $altered_name, 'commerce_product_key_ui_product_key_type_save() successfully updated the product key type name.');

    // Ensure commerce_product_ui_product_type_delete() deletes a content type.
    commerce_product_key_ui_product_key_type_delete($type);
    $deleted_type = commerce_product_key_type_load($type);
    $this->assertFalse($deleted_type, 'commerce_product_key_ui_product_key_type_delete() successfully removed a product key type.');
  }

  /**
   * Test the product CRUD functions.
   */
  function testCommerceProductKeyCrud() {
    // Ensure commerce_product_new() returns a new product key.
    $new_product_key = commerce_product_key_new('commerce_product_key');
    $fields = array('product_key_id', 'code', 'type', 'uid', 'activated', 'revoked');
    foreach ($fields as $field) {
      $this->assertNotNull($new_product_key->{$field}, 'commerce_product_key_new() instantiated the ' . check_plain($field) . ' property.');
    }

    $new_product_key->code = $code = $this->randomName(10);
    $new_product_key->type = $type = 'commerce_product_key';
    $new_product_key->uid = $uid = 1;
    $new_product_key->activated = $activated = 0;
    $new_product_key->revoked = $revoked = 0;

    // Ensure commerce_product_key_save() returns TRUE when saving a new product key
    $return = commerce_product_key_save($new_product_key);
    $this->assertNotEqual($return, FALSE, 'commerce_product_key_save() successfully saved the new product key.');

    // Ensure commerce_product_key_load() loaded the saved product.
    $loaded_product_key = commerce_product_key_load($new_product_key->product_key_id);
    foreach ($fields as $field) {
      $this->assertEqual($loaded_product_key->{$field}, $new_product_key->{$field}, 'The ' . check_plain($field) . ' value loaded by commerce_product_load() matches the value saved by commerce_product_save()');
    }

    $this->assertTrue($loaded_product_key->created > 0, 'commerce_product_key_save() added a created date to the product');
    $this->assertTrue($loaded_product_key->changed > 0, 'commerce_product_key_save() added a changed date to the product');

    // Ensure commerce_product_key_load_by_code() can load a product by Code.
    $loaded_product_key_by_code = commerce_product_key_load_by_code($code);
    $this->assertEqual($loaded_product_key_by_code->product_key_id, $new_product_key->product_key_id, 'The ID of the product key loaded via commerce_product_key_load_by_code() matches the saved product key ID.');

    // Ensure commerce_product_key_load_multiple() can load multiple multiple products.
    $saved_product_key_ids = array();

    // First create and save multiple new products.
    for ($i = 0; $i < 3; $i++) {
      $product_key = commerce_product_new('commerce_product_key');
      $product_key->type = 'commerce_product_key';
      $product_key->code = $this->randomName(10);
      $product_key->activated = 0;
      $product_key->revoked = 0;
      $product_key->uid = 1;
      commerce_product_key_save($product_key);

      // Save the ID of the newly created product.
      $saved_product_keys[$product_key->product_key_id] = $product_key->product_key_id;
    }

    $loaded_product_keys = commerce_product_key_load_multiple(array_keys($saved_product_keys));
    $this->assertEqual(count($saved_product_keys), count($loaded_product_keys), 'commerce_product_key_load_multiple() loaded the proper number of the product keys.');
    foreach ($loaded_product_keys as $loaded_product_key) {
      $this->assertEqual($loaded_product_key->product_key_id, $saved_product_keys[$loaded_product_key->product_key_id], 'commerce_product_key_load_multiple() successfully loaded a product key.');
    }

    // Ensure commerce_product_key_delete() can remove a product key.
    $return = commerce_product_key_delete($new_product_key->product_key_id);
    $this->assertTrue($return, 'commerce_product_delete() returned TRUE when deleting a product key.');
    $deleted_product_key_load = commerce_product_load_multiple(array($new_product_key->product_key_id), array(), TRUE);
    $this->assertFalse($deleted_product_key_load, 'commerce_product_load_multiple() could not load the deleted product key.');

    // Ensure commerce_product_key_delete_multiple() can delete multiple products.
    $return = commerce_product_key_delete_multiple(array_keys($saved_product_keys));
    $this->assertTrue($return, 'commerce_product_key_delete_multiple() returned TRUE when deleting a product.');
    $deleted_product_keys_load = commerce_product_key_load_multiple(array_keys($saved_product_keys), array(), TRUE);
    $this->assertFalse($deleted_product_key_load, 'commerce_product_key_load_multiple() could not load the deleted product keys.');
  }
}

/**
 * Test the Rules and Entity integration.
 */

class CommerceProductKeyRulesTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Product key rules integration',
      'description' => 'Tests the product key rules integration.',
      'group' => 'Drupal Commerce',
    );
  }

  function setUp() {
    parent::setUp('commerce_product_key', 'rules');
    variable_set('rules_debug', TRUE);
    variable_set('rules_debug_log', TRUE);
  }


  // Calculates the output of t() given an array of placeholders to replace.
  static function t($text, $strings) {
    $placeholders = array();
    foreach ($strings as $string) {
      $placeholders['%' . $string] = drupal_placeholder($string);
    }
    return strtr($text, $placeholders);
  }


  //Tests rules CRUD actions for products.
  function testRulesCRUD() {
    // Test creation.
    $action = rules_action('entity_create', array(
      'type' => 'commerce_product_key',
      'param_type' => 'commerce_product_key',
      'param_code' => 'foo',
      'param_creator' => $GLOBALS['user'],
      'param_activated' => 0,
      'param_revoked' => 0,
    ));
    // Test running access() and execute.
    $action->access();
    $action->execute();

    $key = commerce_product_key_load_by_code('foo');
    $this->assertFalse(empty($key), 'Product key has been created and saved.');

    $product_key = commerce_product_key_new('commerce_product_key');
    commerce_product_key_save($product_key);
    $logger = RulesLog::logger();
    $rule = rule();
    $rule->action('entity_fetch', array('type' => 'commerce_product_key', 'id' => $product_key->product_key_id, 'entity_fetched:var' => 'commerce_product_key'));
    $rule->action('entity_save', array('data:select' => 'commerce_product_key', 'immediate' => TRUE));
    $rule->action('entity_delete', array('data:select' => 'commerce_product_key'));

    // Test running access and integrtiy check + execute.
    $rule->access();
    $rule->integrityCheck()->execute();
    $text = $logger->render();
    $pos = strpos($text, RulesTestCase::t('Evaluating the action %entity_fetch.', array('entity_fetch')));
    $pos = ($pos !== FALSE) ? strpos($text, self::t('Added the provided variable %commerce_product_key of type %commerce_product_key', array('commerce_product_key', 'commerce_product_key')), $pos) : FALSE;
    $pos = ($pos !== FALSE) ? strpos($text, self::t('Saved %commerce_product_key of type %commerce_product_key.', array('commerce_product_key', 'commerce_product_key')), $pos) : FALSE;
    $pos = ($pos !== FALSE) ? strpos($text, self::t('Evaluating the action %entity_delete.', array('entity_delete')), $pos) : FALSE;
    $this->assertTrue($pos !== FALSE, 'Product has been fetched, saved and deleted.');

    $this->assertFalse(commerce_product_key_load($product_key->product_key_id), 'Product key has been deleted.');
  }


  // Tests making use of product metadata.
  function testProductKeyPropertyInfo() {
    // Populate $values with all values that are setable. They will be set
    // with an metadata wrapper, so we also test setting that way.
    $values = array();
    $wrapper = entity_metadata_wrapper('commerce_product_key');
    foreach ($wrapper as $name => $child) {
      $info = $wrapper->$name->info();
      if (!empty($info['setter callback'])) {
        $info += array('type' => 'text');
        $values[$name] = $this->createValue($info['type'], $info);
      }
    }
    $values['type'] = 'commerce_product_key';
    $product_key = entity_create('commerce_product_key', $values);
    $this->assertTrue($product_key, "Created a product key and set all setable values.");

    $wrapper = entity_metadata_wrapper('commerce_product_key', $product_key);
    foreach ($wrapper as $key => $child) {
      $this->assertValue($wrapper, $key);
    }
  }


  //Assert the value for the given property is returned.
  protected function assertValue($wrapper, $key) {
    $this->assertTrue($wrapper->$key->value() !== NULL, check_plain($key) . ' property returned.');
    $info = $wrapper->$key->info();
    if (!empty($info['raw getter callback'])) {
      // Also test getting the raw value
      $this->assertTrue($wrapper->$key->raw() !== NULL, check_plain($key) . ' raw value returned.');
    }
  }


  // Creates a value for the given data type.
  protected function createValue($type, $info) {
    if (!isset($this->node)) {
      // Create some entities to use the first time this runs.
      $this->node = $this->drupalCreateNode(array('type' => 'article'));
      $this->user = $this->drupalCreateUser();
    }

    if (isset($info['options list'])) {
      $options = array_keys($info['options list']());
      return entity_property_list_extract_type($type) ? array(reset($options)) : reset($options);
    }

    switch ($type) {
      case 'decimal':
      case 'integer':
      case 'duration':
        return 1;
      case 'date':
        return REQUEST_TIME;
      case 'boolean':
        return TRUE;
      case 'text':
        return drupal_strtolower($this->randomName(8));
      case 'text_formatted':
        return array('value' => $this->randomName(16));

      default:
        return $this->$type;
    }
  }
}
