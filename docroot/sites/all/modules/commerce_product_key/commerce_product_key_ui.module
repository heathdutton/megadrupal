<?php

/**
 * @file
 * The user interface for the product key module, allows the user to edit the underlying product key entity.
 */

/**
 * Implements hook_menu().
 */
function commerce_product_key_ui_menu() {
  $items = array();

  // Note: admin/commerce/product-keys is defined by a default View.

  // Add a product key.
  $items['admin/commerce/product-keys/add'] = array(
    'title' => 'Add a product key',
    'description' => 'Add a new product key for sale.',
    'page callback' => 'commerce_product_key_ui_add_page',
    'access callback' => 'commerce_product_key_ui_product_add_any_access',
    'weight' => 10,
    'file' => 'includes/commerce_product_key_ui.product-keys.inc',
  );
  foreach (commerce_product_key_types() as $type => $product_key_type) {
    $items['admin/commerce/product-keys/add/' . strtr($type, array('_' => '-'))] = array(
      'title' => 'Create @name',
      'title arguments' => array('@name' => $product_key_type['name']),
      'description' => $product_key_type['description'],
      'page callback' => 'commerce_product_key_ui_product_form_wrapper',
      'page arguments' => array(commerce_product_key_new($type)),
      'access callback' => 'commerce_product_key_access',
      'access arguments' => array('create', $type),
      'file' => 'includes/commerce_product_key_ui.product-keys.inc',
    );
  }

  $items['admin/commerce/product-keys/%commerce_product_key'] = array(
    'title callback' => 'commerce_product_key_ui_product_title',
    'title arguments' => array(3),
    'page callback' => 'commerce_product_key_ui_product_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'commerce_product_key_access',
    'access arguments' => array('update', 3),
    'weight' => 0,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_product_key_ui.product-keys.inc',
  );
  $items['admin/commerce/product-keys/%commerce_product_key/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/commerce/product-keys/%commerce_product_key/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'commerce_product_key_ui_product_delete_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'commerce_product_key_access',
    'access arguments' => array('update', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_product_key_ui.product-keys.inc',
  );

  $items['admin/commerce/product-keys/types'] = array(
    'title' => 'sequences',
    'description' => 'Manage products types for your store.',
    'page callback' => 'commerce_product_key_ui_types_overview',
    'access arguments' => array('administer sequences'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'file' => 'includes/commerce_product_key_ui.types.inc',
  );
  $items['admin/commerce/product-keys/types/add'] = array(
    'title' => 'Add sequence',
    'page callback' => 'commerce_product_key_ui_product_key_type_form_wrapper',
    'page arguments' => array(commerce_product_key_ui_product_key_type_new()),
    'access arguments' => array('administer sequences'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/commerce_product_key_ui.types.inc',
  );

  foreach (commerce_product_key_types() as $type => $product_key_type) {
    // Convert underscores to hyphens for the menu item argument.
    $type_arg = strtr($type, '_', '-');

    $items['admin/commerce/product-keys/types/' . $type_arg] = array(
      'title' => $product_key_type['name'],
      'page callback' => 'commerce_product_key_ui_product_key_type_form_wrapper',
      'page arguments' => array($type),
      'access arguments' => array('administer sequences'),
      'file' => 'includes/commerce_product_key_ui.types.inc',
    );

    if ($product_key_type['module'] == 'commerce_product_key_ui') {
      $items['admin/commerce/product-keys/types/' . $type_arg . '/edit'] = array(
        'title' => 'Edit',
        'access callback' => 'commerce_product_key_ui_product_key_type_update_access',
        'access arguments' => array($type),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      );
      $items['admin/commerce/product-keys/types/' . $type_arg . '/delete'] = array(
        'title' => 'Delete',
        'page callback' => 'commerce_product_key_ui_product_key_type_delete_form_wrapper',
        'page arguments' => array($type),
        'access callback' => 'commerce_product_key_ui_product_key_type_update_access',
        'access arguments' => array($type),
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_INLINE,
        'weight' => 10,
        'file' => 'includes/commerce_product_key_ui.types.inc',
      );
    }
  }

  return $items;
}

/**
 * Menu item title callback: returns the code of a product key for its pages.
 *
 * @param $product_key
 *   The product object as loaded via the URL wildcard.
 * @return
 *   A page title of the format "Product: [code]".
 */
function commerce_product_key_ui_product_title($product_key) {
  return t('Product: @code', array('@code' => $product_key->code));
}

/**
 * Access callback: determines if the user can create any type of product key.
 */
function commerce_product_key_ui_product_add_any_access() {
  // Grant automatic access to users with administer product keys permission.
  if (user_access('administer product keys')) {
    return TRUE;
  }

  // Check the user's access on a product key type basis.
  foreach (commerce_product_key_types() as $type => $product_key_type) {
    if (commerce_product_key_access('create', $type)) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Access callback: determines if the user can edit or delete a product key type.
 *
 * @param $type
 *   The machine-name of the product key type to be edited or deleted.
 */
function commerce_product_key_ui_product_key_type_update_access($type) {
  $product_key_type = commerce_product_key_type_load($type);
  if ($product_key_type['module'] == 'commerce_product_key_ui') {
    return user_access('administer sequences');
  }

  return FALSE;
}

/**
 * Implements hook_menu_alter().
 */
function commerce_product_key_ui_menu_alter(&$items) {
  // Transform the field UI tabs into contextual links.
  foreach (commerce_product_key_types() as $type => $product_key_type) {
    // Convert underscores to hyphens for the menu item argument.
    $type_arg = strtr($type, '_', '-');

    $items['admin/commerce/product-keys/types/' . $type_arg . '/fields']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
    $items['admin/commerce/product-keys/types/' . $type_arg . '/display']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function commerce_product_key_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/commerce/product-keys/add' on 'admin/commerce/product-keys'.
  if ($root_path == 'admin/commerce/product-keys') {
    $item = menu_get_item('admin/commerce/product-keys/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_admin_menu_map().
 */
function commerce_product_key_ui_admin_menu_map() {
  // Add awareness to the administration menu of the various product key types so
  // they are included in the dropdown menu.
  $type_args = array();

  foreach (array_keys(commerce_product_key_types()) as $type) {
    $type_args[] = strtr($type, '_', '-');
  }

  $map['admin/commerce/product-keys/types/%'] = array(
    'parent' => 'admin/commerce/product-keys/types',
    'arguments' => array(
      array('%' => $type_args),
    ),
  );

  return $map;
}

/**
 * Implements hook_help().
 */
function commerce_product_key_ui_help($path, $arg) {
  switch ($path) {
    case 'admin/commerce/product-keys/types/add':
      return '<p>' . t('Individual sequences can have different fields assigned to them.') . '</p>';
  }

  // Return the user defined help text per product key type when adding products.
  if ($arg[1] == 'commerce' && $arg[2] == 'product-keys' && $arg[3] == 'add' && $arg[4]) {
    $product_key_type = commerce_product_key_type_load($arg[4]);
    return (!empty($product_key_type['help']) ? '<p>' . filter_xss_admin($product_key_type['help']) . '</p>' : '');
  }
}

/**
 * Implements hook_theme().
 */
function commerce_product_key_ui_theme() {
  return array(
    'product_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'includes/commerce_product_key_ui.product-keys.inc',
    ),
    'product_key_type_admin_overview' => array(
      'variables' => array('type' => NULL),
      'file' => 'includes/commerce_product_key_ui.types.inc',
    ),
    'commerce_product_key_code' => array(
      'variables' => array('code' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'commerce_product_key_ui') . '/theme',
      'template' => 'commerce-product-key-code',
    ),
    'commerce_product_key_title' => array(
      'variables' => array('title' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'commerce_product_key_ui') . '/theme',
      'template' => 'commerce-product-key-title',
    ),
    'commerce_product_key_status' => array(
      'variables' => array('status' => NULL, 'label' => NULL, 'product' => NULL),
      'path' => drupal_get_path('module', 'commerce_product_key_ui') . '/theme',
      'template' => 'commerce-product-key-status',
    ),
  );
}

/**
 * Implements hook_entity_info_alter().
 */
function commerce_product_key_ui_entity_info_alter(&$entity_info) {
  // Add a URI callback to the product entity.
  $entity_info['commerce_product_key']['uri callback'] = 'commerce_product_key_ui_uri';

  // Expose the admin UI for product fields.
  foreach ($entity_info['commerce_product_key']['bundles'] as $type => &$bundle) {
    $bundle['admin'] = array(
      'path' => 'admin/commerce/product-keys/types/' . strtr($type, '_', '-'),
      'access arguments' => array('administer sequences'),
    );
  }
}

/**
 * Entity uri callback: points to the edit form of the given product if no other
 *   URI is specified.
 */
function commerce_product_key_ui_uri($product_key) {
  // First look for a return value in the default entity uri callback.
  $uri = commerce_product_key_uri($product_key);

  // If a value was found, return it now.
  if (!empty($uri)) {
    return $uri;
  }

  // Otherwise return an admin URI if the user has permission.
  if (commerce_product_key_access('view', $product_key)) {
    return array(
      'path' => 'admin/commerce/product-keys/' . $product_key->product_key_id,
    );
  }
}

/**
 * Implements hook_commerce_product_key_type_info().
 */
function commerce_product_key_ui_commerce_product_key_type_info() {
  return db_query('SELECT * FROM {commerce_product_key_type}')->fetchAllAssoc('type', PDO::FETCH_ASSOC);
}

/**
 * Returns an initialized product key type array.
 */
function commerce_product_key_ui_product_key_type_new() {
  return array(
    'product_id' => '',
    'type' => '',
    'name' => '',
    'description' => '',
    'help' => '',
  );
}

/**
 * Saves a product key type.
 *
 * This function will either insert a new product key type if $product_key_type['is_new']
 * is set or attempt to update an existing product key type if it is not. It does
 * not currently support changing the machine-readable name of the product key type,
 * nor is this possible through the form supplied by the Product UI module.
 *
 * @param $product_key_type
 *   The product key type array containing the basic properties as initialized in
 *     commerce_product_key_ui_product_key_type_new().
 * @param $configure
 *   Boolean indicating whether or not product key type configuration should be
 *     performed in the event of a new product key type being saved.
 *
 * @return
 *   The return value of the call to drupal_write_record() to save the product
 *     type, either FALSE on failure or SAVED_NEW or SAVED_UPDATED indicating
 *     the type of query performed to save the product key type.
 */
function commerce_product_key_ui_product_key_type_save($product_key_type, $configure = TRUE) {
  $op = drupal_write_record('commerce_product_key_type', $product_key_type, empty($product_key_type['is_new']) ? 'type' : array());

  // If this is a new product key type and the insert did not fail...
  if (!empty($product_key_type['is_new']) && $op !== FALSE) {
    // Notify the field API that a new bundle has been created.
    field_attach_create_bundle('commerce_product_key', $product_key_type['type']);

  // Notify other modules that a new product key type has been created.
    module_invoke_all('commerce_product_key_type_insert', $product_key_type);
  }
  elseif ($op !== FALSE) {
    // Notify other modules that an existing product key type has been updated.
    module_invoke_all('commerce_product_key_type_update', $product_key_type);
  }

  commerce_product_key_types_reset();
  menu_rebuild();

  return $op;
}

/**
 * Deletes a product key type.
 *
 * @param $type
 *   The machine-readable name of the product key type.
 */
function commerce_product_key_ui_product_key_type_delete($type) {
  $product_key_type = commerce_product_key_type_load($type);

  db_delete('commerce_product_key_type')
    ->condition('type', $type)
    ->execute();

  // Rebuild the menu to get rid of this type's product add menu item.
  commerce_product_key_types_reset();
  menu_rebuild();

  // Notify the field API that this bundle has been destroyed.
  field_attach_delete_bundle('commerce_product_key', $type);

  // Notify other modules that this product key type has been deleted.
  module_invoke_all('commerce_product_key_type_delete', $product_key_type);
}

/**
 * Checks to see if a given product key type already exists.
 *
 * @param $type
 *   The string to match against existing types.
 *
 * @return
 *   TRUE or FALSE indicating whether or not the product key type exists.
 */
function commerce_product_key_ui_validate_product_key_type_unique($type) {
  // Look for a match of the type.
  if ($match_id = db_query('SELECT type FROM {commerce_product_key_type} WHERE type = :type', array(':type' => $type))->fetchField()) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Implements hook_forms().
 */
function commerce_product_key_ui_forms($form_id, $args) {
  $forms = array();

  // Define a wrapper ID for the product add / edit form.
  $forms['commerce_product_key_ui_product_form'] = array(
    'callback' => 'commerce_product_key_product_form',
  );

  // Define a wrapper ID for the product delete confirmation form.
  $forms['commerce_product_key_ui_product_delete_form'] = array(
    'callback' => 'commerce_product_key_product_key_delete_form',
  );

  return $forms;
}

/**
 * Implements hook_form_alter().
 */
function commerce_product_key_ui_form_alter(&$form, &$form_state, $form_id) {
  // On field administration forms for product key types add a breadcrumb.
  if (in_array($form_id, array('field_ui_field_overview_form', 'field_ui_display_overview_form'))) {
    if ($form['#entity_type'] == 'commerce_product_key') {
      commerce_product_key_ui_set_breadcrumb(TRUE);
    }
  }
}

/**
 * Submit callback for commerce_product_key_ui_product_form().
 *
 * @see commerce_product_key_ui_form_commerce_product_key_ui_product_form_alter()
 */
function commerce_product_key_ui_product_form_submit($form, &$form_state) {
  // Set the redirect based on the button clicked.
  if ($form_state['clicked_button']['#parents'][0] == 'save_continue') {
    $form_state['redirect'] = 'admin/commerce/product-keys/add/' . strtr($form_state['commerce_product_key']->type, array('_' => '-'));
  }
  elseif (arg(2) == 'products' && arg(3) == 'add') {
    $form_state['redirect'] = 'admin/commerce/product-keys';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * The Product UI module instantiates the Product delete form at a particular
 * path in the Commerce IA. It uses its own form ID to do so and alters the
 * form here to add in appropriate redirection.
 *
 * @see commerce_product_key_ui_product_delete_form()
 */
function commerce_product_key_ui_form_commerce_product_key_ui_product_delete_form_alter(&$form, &$form_state) {
  $form['actions']['cancel']['#href'] = 'admin/commerce/product-keys';
  $form['#submit'][] = 'commerce_product_key_ui_product_delete_form_submit';
}

/**
 * Submit callback for commerce_product_key_ui_product_delete_form().
 *
 * @see commerce_product_key_ui_form_commerce_product_key_ui_product_delete_form_alter()
 */
function commerce_product_key_ui_product_delete_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'admin/commerce/product-keys';
}

/**
 * Implements hook_views_api().
 */
function commerce_product_key_ui_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_product_key_ui') . '/includes/views',
  );
}

/**
 * Sets the breadcrumb for administrative product pages.
 *
 * @param $product_key_types
 *   TRUE or FALSE indicating whether or not the breadcrumb should include the
 *     product key types administrative page.
 */
function commerce_product_key_ui_set_breadcrumb($product_key_types = FALSE) {
  $breadcrumb = array(
    l(t('Home'), '<front>'),
    l(t('Administration'), 'admin'),
    l(t('Store'), 'admin/commerce'),
    l(t('Product Keys'), 'admin/commerce/product-keys'),
  );

  if ($product_key_types) {
    $breadcrumb[] = l(t('Sequences'), 'admin/commerce/product-keys/types');
  }

  drupal_set_breadcrumb($breadcrumb);
}
