<?php

/**
 * @file
 * Defines the core Commerce product key entity, including the entity itself, the
 * bundle definitions (sequences), and various API functions to manage
 * product keys.
 */

/**
 * Implements hook_entity_info().
 */
function commerce_product_key_entity_info() {
  $return = array(
    'commerce_product_key' => array(
      'label' => t('Product Key'),
      'controller class' => 'CommerceProductKeyEntityController',
      'base table' => 'commerce_product_key',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'product_key_id',
        'bundle' => 'type',
        'label' => 'code',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'commerce_product_key_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Admin display'),
          'custom settings' => FALSE,
        ),
        'node_teaser' => array(
          'label' => t('Node: Teaser'),
          'custom settings' => TRUE,
        ),
        'node_full' => array(
          'label' => t('Node: Full content'),
          'custom settings' => FALSE,
        ),
        'node_rss' => array(
          'label' => t('Node: RSS'),
          'custom settings' => FALSE,
        ),
      ),
      'uri callback' => 'commerce_product_key_uri',
      'creation callback' => '_commerce_product_key_create',
      'save callback' => 'commerce_product_key_save',
      'deletion callback' => 'commerce_product_key_delete',
      'access callback' => 'commerce_product_key_access',
      //'token type' => 'product_key',
    ),
  );

  foreach (commerce_product_key_type_get_name() as $type => $name) {
    $return['commerce_product_key']['bundles'][$type] = array(
      'label' => $name,
    );
  }

  return $return;
}

/**
 * Entity uri callback: gives modules a chance to specify a path for a product.
 */
function commerce_product_key_uri($product_key) {
  // Allow modules to specify a path, returning the first one found.
  foreach (module_implements('commerce_product_key_uri') as $module) {
    $uri = module_invoke($module, 'commerce_product_key_uri', $product_key);

    // If the implementation returned data, use that now.
    if (!empty($uri)) {
      return $uri;
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function commerce_product_key_field_extra_fields() {
  $extra = array();

  foreach (commerce_product_key_types() as $type => $product_key_type) {
    $extra['commerce_product_key'][$type] = array(
      'form' => array(
        'code' => array(
          'label' => t('Product Code'),
          'description' => t('Product key module code form element'),
          'weight' => -10,
        ),
        'activated' => array(
          'label' => t('Activated'),
          'description' => t('Product key module activated form element'),
          'weight' => 35,
        ),
        'revoked' => array(
          'label' => t('Revoked'),
          'description' => t('Product key module revoked form element'),
          'weight' => 35,
        ),
        'status' => array(
          'label' => t('Status'),
          'description' => t('Product key module status form element'),
          'weight' => 35,
        ),      ),
      'display' => array(
        'code' => array(
          'label' => t('Product code'),
          'description' => t('The human readable identifier of the product key'),
          'weight' => -10,
        ),
      ),
    );
  }

  return $extra;
}

/**
 * Implements hook_views_api().
 */
function commerce_product_key_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_product_key') . '/includes/views',
  );
}

/**
 * Implements hook_permission().
 */
function commerce_product_key_permission() {
  $permissions = array(
    'administer product keys' => array(
      'title' => t('Administer product keys'),
      'description' => t('Allows users to perform any action on product keys of any type.'),
      'restrict access' => TRUE,
    ),
    'access product keys' => array(
      'title' => t('Access lists of product keys, primarily for viewing and referencing'),
      'restrict access' => TRUE,
    ),
    'administer sequences' => array(
      'title' => t('Administer sequences'),
      'description' => t('Allows users to configure sequences and their fields.'),
      'restrict access' => TRUE,
    ),
    'view own product keys' => array(
      'title' => t('View own product keys'),
      'description' => t('Allows users to view product keys assigned to them.'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_modules_enabled().
 */
function commerce_product_key_modules_enabled($modules) {
  // Loop through all the enabled modules.
  foreach ($modules as $module) {
    // If the module has hook_commerce_product_key_type_info()...
    if (module_hook($module, 'commerce_product_key_type_info')) {
      $product_key_types = module_invoke($module, 'commerce_product_key_type_info');
    }
  }
}

/**
 * Returns an array of product key type arrays keyed by type.
 */
function commerce_product_key_types() {
  // First check the static cache for a product key types array.
  $product_key_types = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($product_key_types)) {
    $product_key_types = array();

    // Find product key types defined by hook_commerce_product_key_type_info().
    foreach (module_implements('commerce_product_key_type_info') as $module) {
      foreach (module_invoke($module, 'commerce_product_key_type_info') as $type => $product_key_type) {
        // Set the module each product key type is defined by if it isn't set yet.
        $product_key_type += array('module' => $module);
        $product_key_types[$type] = $product_key_type;
      }
    }

    // Last allow the info to be altered by other modules.
    drupal_alter('commerce_product_key_type_info', $product_key_types);
  }

  return $product_key_types;
}

/**
 * Resets the cached list of product key types.
 */
function commerce_product_key_types_reset() {
  $product_key_types = &drupal_static('commerce_product_key_types');
  $product_key_types = NULL;
}

/**
 * Loads a product key type.
 *
 * @param $type
 *   The machine-readable name of the product key type; accepts normal machine names
 *     and URL prepared machine names with underscores replaced by hyphens.
 */
function commerce_product_key_type_load($type) {
  $type = strtr($type, array('-' => '_'));
  $product_key_types = commerce_product_key_types();
  return !empty($product_key_types[$type]) ? $product_key_types[$type] : FALSE;
}

/**
 * Returns the human readable name of any or all product key types.
 *
 * @param $type
 *   Optional parameter specifying the type whose name to return.
 *
 * @return
 *   Either an array of all product key type names keyed by the machine name or a
 *     string containing the human readable name for the specified type. If a
 *     type is specified that does not exist, this function returns FALSE.
 */
function commerce_product_key_type_get_name($type = NULL) {
  $product_key_types = commerce_product_key_types();

  // Return a type name if specified and it exists.
  if (!empty($type)) {
    if (isset($product_key_types[$type])) {
      return $product_key_types[$type]['name'];
    }
    else {
      // Return FALSE if it does not exist.
      return FALSE;
    }
  }

  // Otherwise turn the array values into the type name only.
  foreach ($product_key_types as $key => $value) {
    $product_key_types[$key] = $value['name'];
  }

  return $product_key_types;
}

/**
 * Wraps commerce_product_key_type_get_name() for the Entity module.
 */
function commerce_product_key_type_options_list() {
  return commerce_product_key_type_get_name();
}

/**
 * Returns a path argument from a product key type.
 */
function commerce_product_key_type_to_arg($type) {
  return strtr($type, '_', '-');
}

/**
 * Returns an initialized product object.
 *
 * @param $type
 *   The machine-readable type of the product.
 *
 * @return
 *   A product object with all default fields initialized.
 */
function commerce_product_key_new($type = '') {
  return entity_get_controller('commerce_product_key')->create($type);
}

/**
 * Creation callback for the Entity module.
 */
function _commerce_product_key_create($values = array()) {
  // Create a new product of the specified type.
  $product_key = commerce_product_key_new($values['type']);
  unset($values['type']);

  $wrapper = entity_metadata_wrapper('commerce_product_key', $product_key);

  foreach ($values as $name => $value) {
    $wrapper->$name->set($value);
  }

  return $wrapper->value();
}

/**
 * Saves a product key.
 *
 * @param $product_key
 *   The full product object to save.
 *
 * @return
 *   The saved product object.
 */
function commerce_product_key_save($product_key) {
  // Load the stored entity, if any.
  if (!empty($product_key->product_key_id) && !isset($product_key->original)) {
    $product_key->original = entity_load_unchanged('commerce_product_key', $product_key->product_key_id);
  }

  return entity_get_controller('commerce_product_key')->save($product_key);
}

/**
 * Loads a product key by ID.
 */
function commerce_product_key_load($product_key_id) {
  if (empty($product_key_id)) {
    return FALSE;
  }

  $product_keys = commerce_product_key_load_multiple(array($product_key_id), array());
  return $product_keys ? reset($product_keys) : FALSE;
}

/**
 * Loads a product key by code.
 */
function commerce_product_key_load_by_code($code) {
  if (empty($code)) {
    return FALSE;
  }
  $product_keys = commerce_product_key_load_multiple(array(), array('code' => $code));
  return $product_keys ? reset($product_keys) : FALSE;
}

/**
 * Loads a product key by order id.
 */
function commerce_product_key_load_by_order_id($order_id) {
  if (empty($order_id)) {
    return FALSE;
  }
  $product_keys = commerce_product_key_load_multiple(array(), array('order_id' => $order_id));
  return $product_keys ? reset($product_keys) : FALSE;
}

/**
 * Loads a product key by owner (uid).
 */
function commerce_product_key_load_by_owner($owner) {
  if (empty($owner)) {
    return FALSE;
  }
  $product_keys = commerce_product_key_load_multiple(array(), array('key_owner_id' => $owner));
  return $product_keys ? reset($product_keys) : FALSE;
}

/**
 * Find all product keys that have the product id.
 *
 * @param $product_id
 *  The product id that must be associated with the sequence / product key type
 */
function commerce_product_key_load_available_product_keys_by_product_id($product_id) {
  $product_keys = array();
  //find the sequence that are assoicated with the product.
  foreach (commerce_product_key_type_matches($product_id) as $product_key_type) {
    $conditions = array(
      //we are looking for our order
      'order_id' => NULL,
      //with owner
      'key_owner_id' => NULL,
      //of types that are associate with the product_id
      'type' => $product_key_type['type'],
    );
    $found_prouct_keys = commerce_product_key_load_multiple(array(), $conditions);
    if (!empty($found_prouct_keys)) {
      $product_keys = array_merge($found_prouct_keys, $product_keys) ;
    }
  }
  return $product_keys;
}

/**
 * Find all product keys that have not been assigned that are associated with the
 * sequence / product key type by product id.
 *
 * @param $product_id
 *  The product id that must be associated with the sequence / product key type.
 * @param $order_id
 *  The order_id to which the product should be associated to.
 * @param $key_owner_id
 *  The UID of the owner of the product key.
 */
function commerce_product_key_load_assigned_product_keys($product_id, $order_id, $key_owner_id) {
  $product_keys = array();
  //find the sequence that are assoicated with the product.
  foreach (commerce_product_key_type_matches($product_id) as $product_key_type) {
    $conditions = array(
      //we are looking for our order
      'order_id' => $order_id,
      //with owner
      'key_owner_id' => $key_owner_id,
      //of types that are associate with the product_id
      'type' => $product_key_type['type'],
    );

    $found_prouct_keys = commerce_product_key_load_multiple(array(), $conditions);
    if (!empty($found_prouct_keys)) {
      $product_keys = array_merge($found_prouct_keys, $product_keys) ;
    }
  }
  return $product_keys;
}


/**
 * Loads multiple product keys by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $product_key_ids
 *   An array of product IDs.
 * @param $conditions
 *   An array of conditions on the {commerce_product_key} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal product loading cache.
 *
 * @return
 *   An array of product objects indexed by product_key_id.
 */
function commerce_product_key_load_multiple($product_key_ids = array(), $conditions = array(), $reset = FALSE) {
  if (empty($product_key_ids) && empty($conditions)) {
    return array();
  }

  return entity_load('commerce_product_key', $product_key_ids, $conditions, $reset);
}

/**
 * Generate an array for rendering the given product.
 *
 * @param $product_key
 *   A fully loaded product object.
 * @param $view_mode
 *   The view mode for displaying the product, 'full', 'node_full',
 *     'node_teaser', or 'node_rss'.
 *
 * @return
 *   An array as expected by drupal_render().
 */
function commerce_product_key_build_content($product_key, $view_mode = 'full', $breadcrumb = TRUE) {
  // Remove previously built content, if it exists.
  $product_key->content = array();

  // Prepare a reusable array representing the CSS file to attach to the view.
  $attached = array(
    'css' => array(drupal_get_path('module', 'commerce_product_key_ui') . '/theme/commerce_product_key.css'),
  );

  // Add the default fields inherent to the product entity.
  $product_key->content['code'] = array(
    '#markup' => theme('commerce_product_key_code', array('code' => check_plain($product_key->code), 'label' => t('code:'), 'product' => $product_key)),
    '#attached' => $attached,
  );

  // Only display the title and status on the full page view.
  if ($view_mode == 'full') {
    $product_key->content['status'] = array(
      '#markup' => theme('commerce_product_key_status', array('status' => $product_key->status ? t('Active') : t('Disabled'), 'label' => t('Status:'), 'product' => $product_key)),
      '#attached' => $attached,
    );
  }

  // Build fields content.
  field_attach_prepare_view('commerce_product_key', array($product_key->product_key_id => $product_key), $view_mode);
  entity_prepare_view('commerce_product_key', array($product_key->product_key_id => $product_key));
  $product_key->content += field_attach_view('commerce_product_key', $product_key, $view_mode);

  // Allow modules to make their own additions to the product content.
  module_invoke_all('commerce_product_key_view', $product_key, $view_mode);

  // Remove the content array from the product to avoid duplicate rendering.
  $build = $product_key->content;
  unset($product_key->content);

  $build += array(
    '#product' => $product_key,
    '#view_mode' => $view_mode,
  );

  // Allow modules to modify the final build array.
  drupal_alter('commerce_product_key_view', $build);

  return $build;
}

/**
 * Deletes a product by ID.
 *
 * @param $product_key_id
 *   The ID of the product to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function commerce_product_key_delete($product_key_id) {
  return commerce_product_key_delete_multiple(array($product_key_id));
}

/**
 * Deletes multiple products by ID.
 *
 * @param $product_key_ids
 *   An array of product IDs to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function commerce_product_key_delete_multiple($product_key_ids) {
  return entity_get_controller('commerce_product_key')->delete($product_key_ids);
}

/**
 * Checks product access for various operations.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $product_key
 *   Optionally a product to check access for or for the create operation the
 *   product key type. If nothing is given access permissions for all products are returned.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function commerce_product_key_access($op, $product_key = NULL, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : $user;

  if (user_access('administer product keys', $account)) {
    return TRUE;
  }

  // Grant view access to users with the administrative access product keys permission
  // or to a user's own product keys with the view own product key permission.
  if ($op == 'view') {
    if (user_access('access product keys', $account)) {
      return TRUE;
    }
    elseif (user_access('view own product keys', $account) && $product_key->key_owner_id == $account->uid) {
      return TRUE;
    }
  }

  if (isset($product_key) && is_string($product_key) && $op == 'create' && user_access('create ' . $product_key . ' product keys', $account)) {
    return TRUE;
  }

  if (isset($product_key) && ($op == 'update' || $op == 'delete')) {
    if (user_access('edit any ' . $product_key->type . ' product key', $account)) {
      return TRUE;
    }

    // Others either don't have any access or must match the product uid.
    if ($account->uid && user_access('edit own ' . $product_key->type . ' product keys', $account) && $product_key->uid == $account->uid) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Performs token replacement on a code for valid tokens only.
 *
 * TODO: This function currently limits acceptable Tokens to Product ID and type
 * with no ability to use Tokens for the Fields attached to the product. That
 * might be fine for a core Token replacement, but we should at least open the
 * $valid_tokens array up to other modules to enable various Tokens for use.
 *
 * @param $code
 *   The raw code string including any tokens as entered.
 * @param $product_key
 *   A product object used to perform token replacement on the code.
 *
 * @return
 *   The code with tokens replaced or else FALSE if it included invalid tokens.
 */
function commerce_product_key_replace_code_tokens($code, $product_key) {
  // Build an array of valid code tokens.
  $valid_tokens = array('product-key-id', 'type');

  // Ensure that only valid tokens were used.
  $invalid_tokens = FALSE;

  foreach (token_scan($code) as $type => $token) {
    if ($type !== 'product_key') {
      $invalid_tokens = TRUE;
    }
    else {
      foreach (array_keys($token) as $value) {
        if (!in_array($value, $valid_tokens)) {
          $invalid_tokens = TRUE;
        }
      }
    }
  }

  // Register the error if an invalid token was detected.
  if ($invalid_tokens) {
    return FALSE;
  }

  return $code;
}

/**
 * Checks to see if a given code already exists for another product.
 *
 * @param $code
 *   The string to match against existing codes.
 * @param $product_key_id
 *   The ID of the product the code is for; an empty value represents the code is
 *     meant for a new product.
 *
 * @return
 *   TRUE or FALSE indicating whether or not the code exists for another product.
 */
function commerce_product_key_validate_code_unique($code, $product_key_id) {
  // Look for an ID of a product matching the supplied code.
  if ($match_id = db_query('SELECT product_key_id FROM {commerce_product_key} WHERE code = :code', array(':code' => $code))->fetchField()) {
    // If this code is supposed to be for a new product or a product other than
    // the one that matched...
    if (empty($product_key_id) || $match_id != $product_key_id) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Callback for getting product properties.
 * @see commerce_product_key_entity_property_info()
 */
function commerce_product_key_get_properties($product_key, array $options, $name) {
  switch ($name) {
    case 'creator':
      return $product_key->uid;
    case 'edit_url':
      return url('admin/commerce/product-keys/' . $product_key->product_key_id . '/edit', $options);
  }
}

/**
 * Callback for setting product properties.
 * @see commerce_product_key_entity_property_info()
 */
function commerce_product_key_set_properties($product_key, $name, $value) {
  if ($name == 'creator') {
    $product_key->uid = $value;
  }
}


/**
 * Returns an array of product key type arrays keyed by type.
 */
function commerce_product_key_type_matches($product_id) {

  $product_key_type_matches = array();

  // Find product key types defined by hook_commerce_product_key_type_info().
  foreach (module_implements('commerce_product_key_type_info') as $module) {
    foreach (module_invoke($module, 'commerce_product_key_type_info') as $type => $product_key_type) {
      //check that the sequence has the product associated with it.
      if ($product_key_type['product_id'] == $product_id) {
        // Set the module each product key type is defined by.
        $product_key_type['module'] = $module;
        $product_key_type_matches[$type] = $product_key_type;
      }
    }
  }
  return $product_key_type_matches;
}

/**
 * Assign the product key for each line item in the order.
 *
 * @param $order
 *    The order object containing the line items for the order.
 */
function commerce_product_key_update($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    //get the line item produck id and quantity
    $product_id = $line_item_wrapper->commerce_product->product_id->value();
    $quantity = $line_item_wrapper->quantity->value();

    //initalise our iterator


    //find the sequence that are assoicated with the product.
    $product_keys = commerce_product_key_load_available_product_keys_by_product_id($product_id);
    foreach ($product_keys as $product_key) {
      if (!empty($product_key)) {
        $quantity--;
        if ($quantity < 0) {
          //we are done assigning keys get outa here.
          break;
        }
        //assign the product key to a user and order
        $product_key->order_id = $order->order_id;
        $product_key->key_owner_id = $order->uid;

        //save the product key with the details
        commerce_product_key_save($product_key);
        watchdog('commerce_product_key', 'Product Key code: @code, was assigned to order: @order_id', array(
          '@code' => $product_key->code,
          '@order_id' => $product_key->order_id),
          WATCHDOG_NOTICE);
      }
      else {
        //we cant assign keys as there are no avialbe keys.
        watchdog('commerce_product_key', 'Could not assign product key, there are not enough product keys available for product: @product_id, for order: @order_id', array(
          '@product_id' => $product_id,
          '@order_id' => $order->order_id),
          WATCHDOG_ERROR);
        //TODO send admin email...
      }
    }
  }
}

/**
 * Get the transaction id from the database... looks like there are no functions on commerce payment to do this.
 */
function commerce_product_key_get_payment_transaction_id($order_id) {
  if (!empty($order_id)) {
    return db_query('SELECT transaction_id FROM {commerce_payment_transaction}  WHERE order_id = :order_id', array(':order_id' => $order_id))->fetchField();
  }
}

/**
 * Assign the product key for each line item in the order, only if the payment
 * was successful and the balance less than or equal to zero.
 *
 * @param $order
 *    The order object containing the line items for the order.
 */
function commerce_product_key_update_payment_successful($order) {

  //we load the trasactions
  foreach (commerce_payment_transaction_load_multiple(array(), array('order_id' => $order->order_id)) as $transaction) {
    if (!empty($transaction)) {
      $balance = commerce_payment_order_balance($order);
      if (($order->order_id == $transaction->order_id) && ($transaction->status == 'success') && ($balance['amount'] >= 0) && ($transaction->amount > 0)) {
        //the transaction was successful we can now assign the product keys.
        commerce_product_key_update($order);
        watchdog('commerce_product_key', 'Payment was successful, Checking order: @order_id, status: @status, amount: @amount, balance: @balance', array(
          '@order_id' => $order->order_id,
          '@status' => $transaction->status,
          '@amount' => $transaction->amount,
          '@balance' => $balance['amount']),
          WATCHDOG_NOTICE);
      }
      else {
        watchdog('commerce_product_key', 'Payment was NOT successful, Checking order: @order_id, status: @status, amount: @amount, balance: @balance', array(
          '@order_id' => $order->order_id,
          '@status' => $transaction->status,
          '@amount' => $transaction->amount,
          '@balance' => $balance['amount']),
          WATCHDOG_ERROR);
      }
    }
  }
}

/**
 * Unassign the product key form a order / user.
 *
 * @param $order
 *    The order that is contains all line items with the products that may be related to product keys.
 */
function commerce_product_key_remove_from_order($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    //get the line item produck id and quantity
    $product_id = $line_item_wrapper->commerce_product->product_id->value();
    $quantity = $line_item_wrapper->quantity->value();

    foreach (commerce_product_key_load_assigned_product_keys($product_id, $order->order_id, $order->uid) as $product_key) {
      if (($order->order_id == $product_key->order_id) && ($order->uid == $product_key->key_owner_id)) {
        watchdog('commerce_product_key', 'Product Key ID: @id, code: @code was removed from customer: @key_owner_id for order: @order_id', array(
          '@key_owner_id' => $product_key->key_owner_id,
          '@id' => $product_key->product_key_id,
          '@code' => $product_key->code,
          '@order_id' => $product_key->order_id, ),
          WATCHDOG_NOTICE);

        $product_key->order_id = NULL;
        $product_key->key_owner_id = NULL;

        //save the product key with the details
        commerce_product_key_save($product_key);
      }
    }
  }
}

/**
 * Change the status of the product keys in a order.
 *
 * @param $order
 *    The order that is contains all line items with the products that may be related to product keys.
 */
function commerce_product_key_status_product_key($order, $status) {
  $status_options = commerce_product_key_status_options_list();
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    //get the line item produck id and quantity
    $product_id = $line_item_wrapper->commerce_product->product_id->value();
    $quantity = $line_item_wrapper->quantity->value();

    foreach (commerce_product_key_load_assigned_product_keys($product_id, $order->order_id, $order->uid) as $product_key) {
      if (($order->order_id == $product_key->order_id) && ($order->uid == $product_key->key_owner_id)) {
        $product_key->status = $status;

        //save the product key with the details
        commerce_product_key_save($product_key);

        watchdog('commerce_product_key', 'Product Key ID: @id, code: @code status was changed to @status_options for order: @order_id, disabled items are hidden from customer view', array(
          '@status_options' => $status_options[$status],
          '@id' => $product_key->product_key_id,
          '@code' => $product_key->code,
          '@order_id' => $product_key->order_id, ),
        WATCHDOG_NOTICE);
      }
    }
  }
}

/**
 * Returns an array with the available option for status.
 */
function commerce_product_key_status_options_list() {
  return array(1 => t('Active'), 0 => t('Disabled'), );
}

/**
 * Check if a product has an association with a sequence / product key type
 *
 * @param $product_id
 *  The product id which we are checking has an association.
 */
function commerce_product_key_has_product_association($product_id) {
  $product_key_types = commerce_product_key_type_matches($product_id);

  return (!empty($product_key_types)) ? TRUE : FALSE;
}

/**
 * Assign the product key for each line item in the order.
 *
 * @param $product_id
 *  The product we are checking for.
 * @param $stock_required
 *  The amount of items we are making sure we have.
 *
 * @return
 *   If we have stock we return TRUE, if we don't we return FALSE.
 */
function commerce_product_key_check_has_stock($product_id, $stock_required) {
  if (commerce_product_key_has_product_association($product_id)) {
    $product_keys = commerce_product_key_load_available_product_keys_by_product_id($product_id);
    return (count($product_keys) >= $stock_required) ? TRUE : FALSE;
  }

  //no assiciation
  return TRUE;
}

/**
 * Get the amount of stock (product keys) we have for a product.
 *
 * @param $product_id
 *  The product we are checking for.
 *
 * @return
 *   Number of items in stock.
 */
function commerce_product_key_get_stock_count($product_id) {
  if (commerce_product_key_has_product_association($product_id)) {
    $product_keys = commerce_product_key_load_available_product_keys_by_product_id($product_id);
    return count($product_keys);
  }
  return 0;
}


/**
 * Check that we have enough product keys on hand for the product that is currently viewed & in the cart.
 *
 * @param $order
 *  The order to check against.
 * @param $current_product_id
 *  The current product that is being viewed.
 *
 * @return
 *  True if we have stock, False if we don't.
 */
function commerce_product_key_current_item_stock($order, $current_product_id, $current_quantity) {
  if (!empty($order)) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    if (!empty($order_wrapper)) {
      foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
        $product_id = $line_item_wrapper->commerce_product->product_id->value();
        $quantity = $line_item_wrapper->quantity->value();

        if ($product_id == $current_product_id) {
          //we are only looking for the currently passed product if we have it
          //return if it self and what in the order is enough stock.
          return commerce_product_key_check_has_stock($current_product_id, $quantity + $current_quantity);
        }
      }
    }
  }

  //there are no items like the currently selected item in the cart so we
  //just check there is the current one.
  return commerce_product_key_check_has_stock($current_product_id, $current_quantity);
}

/**
 * Implements hook_form_alter().
 * Check that there is enough stock on hand so that we don't over sell our product keys.
 */
function commerce_product_key_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state, $form_id) {
  //get the current order off the form.
  $order = commerce_cart_order_load($form['uid']['#value']);
  //the default product

  if (isset($form_state['default_product'])) {
    $default_product = $form_state['default_product']->product_id;
  }
  else {
    $default_product = $form['product_id']['#value'];
  }

  //check we have stock else dissable the button so user can't add more and change the text.
  if (!commerce_product_key_current_item_stock($order, $default_product, $form['quantity']['#value'])) {
    $form['submit']['#value'] = t('out of stock');
    $form['submit']['#disabled'] = TRUE;
  }
}

/**
 * This is a work around until we can correctly add errors to the forms altering quantity & adding product's to the cart.
 */
function commerce_product_key_commerce_cart_order_refresh($order_wrapper) {
  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    if (!empty($line_item_wrapper)) {
      $product_id = $line_item_wrapper->commerce_product->product_id->value();
      $quantity = $line_item_wrapper->quantity->value();

      if ((!empty($quantity)) && (!empty($product_id))) {
        //check the quantity of the current product
        //to see if we have enough product keys on hand to assign.
        if (!commerce_product_key_check_has_stock($product_id, (int) $quantity)) {
          //drupal_set_message(t('You have added more products to your cart than we have in stock, please reduce the number of items in your cart.'), 'warning', FALSE);
          drupal_set_message(t('You have added more @title to your cart than we have in stock, please reduce the number of items in your cart. @title.', array('@title' => $line_item_wrapper->commerce_product->title->value())), 'warning', FALSE);
        }
      }
    }
  }
}