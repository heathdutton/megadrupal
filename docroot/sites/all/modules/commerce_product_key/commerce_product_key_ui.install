<?php
/**
 * @file
 * Database schema that goes with the user interface to mange the product key entity.
 *
 */

/**
 * Implements hook_install().
 */
function commerce_product_key_ui_install() {
  // Create the basic product key type.
  $product_key_type = commerce_product_key_ui_product_key_type_new();

  $product_key_type['type'] = 'voucher';
  $product_key_type['name'] = st('Voucher');
  $product_key_type['description'] = st('A basic sequence.');
  $product_key_type['is_new'] = TRUE;

  commerce_product_key_ui_product_key_type_save($product_key_type, FALSE);
}

/**
 * Implements hook_schema().
 */
function commerce_product_key_ui_schema() {
  $schema = array();

  $schema['commerce_product_key_type'] = array(
    'description' => 'Stores information about {commerce_product_key} types created via Product Key UI.',
    'fields' => array(
      'type' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'product_id' => array(
        'description' => 'The primary identifier for a product, used internally only.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The human-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'A brief description of this type.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
      ),
      'help' => array(
        'description' => 'Help information shown to the user when creating a {commerce_product_key} of this type.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
      ),
    ),
    'primary key' => array('type'),
  );

  return $schema;
}
