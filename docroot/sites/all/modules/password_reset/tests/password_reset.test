<?php

/**
 * @file
 * Test the Password reset module.
 */

/**
 * Abstract parent of all Password reset Test classes.
 *
 * @author Karthik Kumar
 */
abstract class PasswordResetTest extends DrupalWebTestCase {
  protected $prUser;
  protected $prAdmin;

  function setUp() {
    parent::setUp(array('password_reset'));

    $this->prAdmin = $this->drupalCreateUser(array('administer site configuration', 'administer users'));
    $this->prUser = $this->drupalCreateUser(array());
  }

  /**
   * Add a security question.
   *
   * @param String $question
   *   The question to add.
   * @param Integer $length
   *   The minimum length of the question.
   * @param Boolean $case
   *   A boolean to indicate case-sensitivity towards answers.
   * @param String $regex
   *   A regular expression string that validates user answers.
   * @param String $message
   *   A message to display if the regular expression fails.
   */
  function addQuestion($question, $length = 1, $case = FALSE, $regex = '', $message = '') {
    $edit = array(
      'question' => $question,
      'answer_length' => $length,
      'case_sensitive' => $case,
      'regex' => $regex,
      'regex_message' => $message
    );
    $this->drupalPost('admin/config/people/password-reset/add', $edit, t('Add question'));
  }

  /**
   * Update a security question.
   *
   * @param Array $edit
   *   Array of form values
   * @param Integer $qid
   *   The question ID.
   */
  function updateQuestion($edit, $qid) {
    $this->drupalPost('admin/config/people/password-reset/edit/' . $qid, $edit, t('Update question'));
  }

  /**
   * Set module variables.
   *
   * @param $variables
   *   An associated array ofvariables.
   */
  function configure($variables) {
    foreach ($variables as $name => $value) {
      _password_reset_variable_set($name, $value);
    }
  }
}

/**
 * Tests particular to the profile form.
 *
 * @author Karthik Kumar
 */
class PasswordResetProfileTest extends PasswordResetTest {

  public static function getInfo() {
    return array(
      'name' => 'Profile Form',
      'description' => 'Tests the profile form.',
      'group' => 'Password reset',
      'dependencies' => array()
    );
  }

  /**
   * Test the profile form of a user.
   */
  function testProfileFormUser() {
    $this->profileFormTest($this->prUser);
  }

  /**
   * Test the profile form of an admin.
   */
  function testProfileFormAdmin() {
    $this->profileFormTest($this->prAdmin);
  }

  /**
   * Test the profile form of a user as an admin.
   */
  function testProfileFormUserAdmin() {
    $this->profileFormTest($this->prUser, $this->prAdmin);
  }

  /**
   * Test the redirect configuration setting.
   */
  function testRedirect() {
    // Test if the user is redirected to the profile form if the security
    // question has not been set.
    $this->configure(array('redirect_user' => TRUE));

    $this->drupalLogin($this->prUser);
    $this->assertURL('user/' . $this->prUser->uid . '/edit', array(), 'Redirected to the profile edit page.');
    $this->assertText('Please choose a security question and answer for your account. This question will be used to verify your identity in case you ever forget your password.');

    $this->drupalLogout();

    // Test if the user is *not* redirected to the profile form if the security
    // question has not been set.
    $this->configure(array('redirect_user' => FALSE));
    $this->drupalLogin($this->prUser);
    // Using $url as there is no assertNoURL().
    if ($this->url == 'user/' . $this->prUser->uid . '/edit') {
      $this->fail('Redirected when it should not have');
    }
    else {
      $this->pass('Did not redirect to the profile edit page.');
    }

    $this->drupalLogout();
  }

  /**
   * Flexible test for the profile form.
   *
   * @param Object $user
   *   The user to test as.
   * @param Object $admin
   *   Admin to test $user's profile form.
   */
  function profileFormTest($user, $admin = NULL) {
    if ($admin) {
      // Access $user pages as $admin.
      $this->drupalLogin($admin);
    }
    else {
      $this->drupalLogin($user);
    }

    // Test that the user must enter current password before choosing a
    // question.
    $this->configure(array('password_verify' => TRUE));
    $edit = array();
    $edit['password_reset[question]'] = 1;
    $edit['password_reset[answer]'] = $answer = $this->randomName();
    $this->drupalPost('user/' . $user->uid . '/edit', $edit, t('Save'));
    if ($admin) {
      $this->assertNoRaw(t("Your current password is missing or incorrect; it's required to change the %name.", array('%name' => t('Password reset question'))), 'The current password is not a requirement for admins.');
    }
    else {
      $this->assertRaw(t("Your current password is missing or incorrect; it's required to change the %name.", array('%name' => t('Password reset question'))), 'The current password is a requirement for users.');

      // Try again with the current password.
      $edit['current_pass'] = $user->pass_raw;
      $this->drupalPost('user/' . $user->uid . '/edit', $edit, t('Save'));
      $this->assertText('The changes have been saved.', 'Security question saved when the current password was provided.');
    }

    // Check that the form goes through fine if we are not altering the security
    // question.
    $this->drupalPost('user/' . $user->uid . '/edit', array(), t('Save'));
    $this->assertText('The changes have been saved.', 'Form saved successfully when no changes made.');

    // Test that the user need not enter current password before choosing a
    // question, if so configured.
    $this->configure(array('password_verify' => FALSE));
    $edit = array();
    $edit['password_reset[question]'] = 1;
    $edit['password_reset[answer]'] = $answer = $this->randomName();
    $this->drupalPost('user/' . $user->uid . '/edit', $edit, t('Save'));
    $this->assertText('The changes have been saved.', 'If so configured, the user does not need to provide the password to add or edit his security question.');

    // Test the e-mail field's visibility configuration.
    $this->configure(array('email_profile' => TRUE));
    $this->drupalGet('user/' . $user->uid . '/edit');
    $this->assertFieldById('edit-mail', '', 'E-mail field present in profile form when so configured.');

    // Switch off the e-mail field.
    $this->configure(array('email_profile' => FALSE));
    $this->drupalGet('user/' . $user->uid . '/edit');
    $this->assertNoFieldById('edit-mail', 'Email field removed from profile form when so configured.');

    // Check that the form goes through fine even when we are hiding the e-mail
    // field.
    $this->drupalPost('user/' . $user->uid . '/edit', array(), t('Save'));
    $this->assertText('The changes have been saved.', 'Form submitted successfully even with the e-mail field removed.');

    $this->drupalLogout();
  }
}

/**
 * Tests particular to the registration form.
 *
 * @author Karthik Kumar
 */
class PasswordResetRegistrationTest extends PasswordResetTest {

  public static function getInfo() {
    return array(
      'name' => 'Registration Form',
      'description' => 'Tests the registration form.',
      'group' => 'Password reset',
      'dependencies' => array()
    );
  }

  /**
   * Test the profile form of a user.
   */
  function testRegistrationForm() {
    $this->configure(array('registration_form' => FALSE, 'email_registration' => FALSE));
    $this->drupalGet('user/register');
    $this->assertNoField('edit-password-reset-question', 'Security question not visible when so configured.');
    $this->assertNoField('edit-mail', 'E-mail field removed when so configured.');

    $this->configure(array('registration_form' => TRUE));
    $this->drupalGet('user/register');
    $this->assertField('edit-password-reset-question', 'Security question available when so configured.');

    // Allow visitors to create accounts without approval.
    variable_set('user_register', 1);

    $edit['name'] = $this->randomName();
    $edit['pass[pass1]'] = $edit['pass[pass2]'] = 'foobar';
    $edit['password_reset[question]'] = 1;
    $edit['password_reset[answer]'] = 'foobar';
    $this->drupalPost('user/register', $edit, t('Create new account'));
    $this->assertText('Registration successful. You are now logged in.');

    // Check if the question has been set.
    $this->drupalGet('user');
    // $this->loggedInUser is not working. But uid=4 is the expected uid.
    $this->drupalGet('user/4/edit');
    $this->assertText('Your answer for the chosen question has already been saved. Add another answer only if you wish to overwrite the existing data.', 'Security question chosen during registration has been saved.');
  }
}

/**
 * Tests particular to the administration interface.
 *
 * @author Karthik Kumar
 */
class PasswordResetAdminTest extends PasswordResetTest {

  public static function getInfo() {
    return array(
      'name' => 'Administration Interface',
      'description' => 'Tests the administration interface.',
      'group' => 'Password reset',
      'dependencies' => array()
    );
  }

  function setUp() {
    parent::setUp();
    $this->drupalLogin($this->prAdmin);
  }

  /**
   * Test the Add/Edit Question form.
   *
   * @todo: Need to test the Delete and Empty links as well.
   */
  function testQuestionForm() {
    $this->addQuestion('Test Question 1', 5, TRUE, '/^\d{5}$/', 'The answer must be exactly five digits long');
    $this->assertText('Password reset question Test Question 1 added.');

    /*
    // Test for invalid regex notice.
    $this->addQuestion('Test Question 2', 5, TRUE, 'foo', 'This should trigger a NOTICE');
    $this->assertText('Warning: preg_match():');
    $this->assertText('Password reset question Test Question 2 added.');
    */

    // Check list for new question.
    $this->drupalGet('admin/config/people/password-reset');
    $this->assertText('Test Question 1');
    $this->assertLinkByHref('admin/config/people/password-reset/edit/2', 0, 'Edit Link confirmed');

    // Check update form.
    $this->drupalGet('admin/config/people/password-reset/edit/2');
    $this->assertFieldById('edit-question', 'Test Question 1');

    $edit = array('question' => 'Test Question 1a');
    $this->updateQuestion($edit, 2);
    $this->assertText('Password reset question Test Question 1a updated.');

    // Look for updated question.
    $this->drupalGet('admin/config/people/password-reset');
    $this->assertText('Test Question 1a');
  }
}

/**
 * Tests the password reset form.
 *
 * @author Karthik Kumar
 */
class PasswordResetResetTest extends PasswordResetTest {
  private $messageIncorrect = 'Answer incorrect. Please check and try again.';

  public static function getInfo() {
    return array(
      'name' => 'Reset Form',
      'description' => 'Tests the password reset form.',
      'group' => 'Password reset',
      'dependencies' => array()
    );
  }

  /**
   * Test the reset password form..
   */
  function testResetForm() {
    $this->drupalLogin($this->prAdmin);

    // Set up a security question.
    $edit = array();
    $edit['password_reset[question]'] = 1;
    $edit['password_reset[answer]'] = 'testanswer';
    $this->drupalPost('user/' . $this->prUser->uid . '/edit', $edit, t('Save'));

    $this->drupalLogout();

    $this->recover($this->prUser->name, 'wronganswer');
    $this->assertText($this->messageIncorrect);

    $this->recover($this->prUser->name, 'testanswer');
    $this->assertText('A one-time login link has been created. Click here to reset your password.');
    $this->clickLink('Click here');
    $this->assertText('This is a one-time login for ' . $this->prUser->name . ' and will expire on');
  }

  /**
   * Test the flood control setting.
   */
  function testFloodControl() {
    $attempts = 2;
    $flood_message = "For security reasons, password reset attempts are limited to $attempts per hour. Please try again later.";
    $this->configure(array('flood_control' => $attempts));

    $this->recover($this->prUser->name, 'wronganswer1');
    $this->assertText($this->messageIncorrect);

    $this->recover($this->prUser->name, 'wronganswer2', TRUE);
    $this->assertText($this->messageIncorrect);

    $this->recover($this->prUser->name, 'wronganswer3', TRUE);
    $this->assertText($flood_message);

    $this->drupalGet('user/password');
    $this->assertText($flood_message);
  }

  /**
   * Test blocked user attempting to reset question and get back into the site.
   */
  function testBlockedUser() {
    // Add security question for user and block.
    $this->drupalLogin($this->prAdmin);
    $edit['password_reset[question]'] = 1;
    $edit['password_reset[answer]'] = 'testanswer';
    $edit['status'] = 0;
    $this->drupalPost('user/' . $this->prUser->uid . '/edit', $edit, t('Save'));
    $this->drupalLogout();

    // Ensure that the user cannot login.
    $edit = array(
      'name' => $this->prUser->name,
      'pass' => $this->prUser->pass_raw,
    );
    $this->drupalPost('user', $edit, t('Log in'));
    $this->assertText(t('The username @name has not been activated or is blocked.', array('@name' => $this->prUser->name)), 'Blocked user cannot log in.');

    // Try recovering account with the correct answer.
    $this->recover($this->prUser->name, 'testanswer');
    $this->assertText($this->messageIncorrect, 'Blocked user cannot reset password.');
  }

  /**
   * Run through the multistep reset form.
   * @param String $username
   *   The username of the account to recover.
   * @param String $answer
   *   The answer to the associated security question.
   * @param Boolean $continue
   *   Continue the multi-step form if TRUE else start the form from the
   *   beginning.
   */
  function recover($username, $answer, $continue = FALSE) {
    if (!$continue) {
      $edit = array('username' => $username);
      $this->drupalPost('user/password', $edit, t('Next'));
      $this->assertText('What is your library card number?');
    }

    $edit = array('answer' => $answer);
    // Multi-step form.
    $this->drupalPost(NULL, $edit, t('Next'));
  }
}
