<?php

/**
 * Implementation of hook_form_alter
 */
function webform_userpoints_form_alter(&$form, &$form_state, $form_id) {
  //add the userponts to the webform config
  if ($form_id == 'webform_configure_form') {
    webform_userpoints_configure_form($form, $form_state);
  }

  // Check all Webform forms.
  if (substr($form_id, 0, 20) == 'webform_client_form_') {

    // Add the submit handler after the existing Webform submit
    $first = array_shift($form['#submit']);
    array_unshift($form['#submit'], $first, 'webform_userpoints_webform_submit');
  }
}

/**
 * Form for additional configuration entries.
 */
function webform_userpoints_configure_form(&$form, $form_state) {
  $node = node_load($form['nid']['#value']);

  $form['userpoints'] = array(
    '#type' => 'fieldset',
    '#title' => t('Userpoints'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['userpoints']['userpoints_award'] = array(
    '#type' => 'radios',
    '#title' => t('Award Userpoints for this webform'),
    '#options' => array( 0 => t('No'), 1 => t('Yes') ),
    '#default_value' => $node->webform['userpoints_award'],
  );
  $form['userpoints']['userpoints_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Points to award'),
    '#default_value' => $node->webform['userpoints_value'],
  );
  $form['userpoints']['userpoints_moderate'] = array(
    '#type' => 'radios',
    '#title' => t('Points should be moderated'),
    '#options' => array( 0 => t('No'), 1 => t('Yes') ),
    '#description' => t('Points for this webform can be moderated if moderation is set to "Yes".'),
    '#default_value' => $node->webform['userpoints_moderate'],
  );
  $form['userpoints']['userpoints_tid'] = array(
    '#type'          => 'select',
    '#title'         => t('Category'),
    '#default_value' => $node->webform['userpoints_tid'],
    '#options'       => userpoints_get_categories(),
    '#description'   => t('Points awarded from this webform will be assigned to this category.'),
  );
  $form['userpoints']['userpoints_display'] = array(
    '#type' => 'radios',
    '#title' => t('Points should be displayed upon reward'),
    '#options' => array( 0 => t('No'), 1 => t('Yes') ),
    '#description' => t('Points for this webform can be displayed to the user upon reward if set to "Yes".'),
    '#default_value' => $node->webform['userpoints_display'],
  );
  $form['#validate'][] = 'webform_userpoints_configure_form_validate';
  $form['#submit'][] = 'webform_userpoints_configure_form_submit';
}

/**
 * Implementation of hook_webform_node_defaults_alter
 */
function webform_userpoints_webform_node_defaults_alter(&$defaults) {
  $defaults['userpoints_award'] = '0';
  $defaults['userpoints_value'] = '';
  $defaults['userpoints_moderate'] = '0';
  $defaults['userpoints_tid'] = '0';
  $defaults['userpoints_display'] = '0';
}

/**
 *  Additional validate handler for the webform_configure_form() form
 */
function webform_userpoints_configure_form_validate($form, &$form_state) {

  // only run this check if we are awarding points
  if ($form_state['values']['userpoints_award'] == 1) {
    if ($form_state['values']['userpoints_value'] == "") {
      form_set_error('userpoints_value', t('You must enter a value for points to be awarded.'));
    }
    if ( ($form_state['values']['userpoints_value']) && (!is_numeric($form_state['values']['userpoints_value'])) ) {
      form_set_error('userpoints_value', t('You may only enter a number into the points to be awarded field.'));
    }
  }
  else {
    // we can alter the $form_state to remove any stored points
    $form_state['values']['userpoints_value'] = NULL;
    $form_state['values']['userpoints_moderate'] = 0;
    $form_state['values']['userpoints_tid'] = 0;
    $form_state['values']['userpoints_display'] = 0;
  }
}

/**
 * Additional submit handler for the webform_configure_form() form.
 */
function webform_userpoints_configure_form_submit($form, &$form_state) {
  db_query( "UPDATE {webform} SET userpoints_award = :userpoints_award, userpoints_value = :userpoints_value, 
      userpoints_moderate = :userpoints_moderate, userpoints_tid = :userpoints_tid, userpoints_display = :userpoints_display
      WHERE nid = :nid", array(
        ':userpoints_award'     => $form_state['values']['userpoints_award'],
        ':userpoints_value'     => $form_state['values']['userpoints_value'],
        ':userpoints_moderate'  => $form_state['values']['userpoints_moderate'],
        ':userpoints_tid'       => $form_state['values']['userpoints_tid'],
        ':userpoints_display'   => $form_state['values']['userpoints_display'],
        ':nid'                  => $form_state['values']['nid']
    )
  );
}

/**
 * Submit each individual webform on user submit
 */
function webform_userpoints_webform_submit($form, &$form_state) {
  global $user;

  // pull in the node
  $node = node_load($form_state['values']['details']['nid']);

  if ( $node->webform['userpoints_award'] == 1 ) {
    // if this webform awards userpoints
    // Award the points - implementation of hook_userpointsapi()
    $param = array(
      'points'      => $node->webform['userpoints_value'],
      'uid'         => $user->uid,
      'operation'   => 'webform',
      'entity_type' => 'webform',
      'entity_id'   => $user->uid,
      'tid'         => $node->webform['userpoints_tid'],
      'display'     => $node->webform['userpoints_display'],
      'moderate'    => $node->webform['userpoints_moderate'],
    );
    userpoints_userpointsapi($param);
  }
}

