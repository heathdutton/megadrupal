<?php

/**
 * @file
 * Provides an input filter for simple collapsible fieldset creation.
 */

define('FIELDSET_FORMATTER_GLOBAL_SETTINGS_PAGE', 'admin/config/content/fieldset_formatter');
define('FIELDSET_FORMATTER_DEFAULT_KEYWORD', 'fieldset');
define('FIELDSET_FORMATTER_REGEX_TEMPLATE_PREPARE', '#<(/?%s[^>]*)>#s');
define('FIELDSET_FORMATTER_REGEX_TEMPLATE_PROCESS', '#\[%1$s\b(?<params>[^\]]*)\](?<content>.*?)\[/%1$s\]#s');
define('FIELDSET_FORMATTER_REGEX_TYPE', '#type=(["\']?)(?<type>.*?)\1#');
define('FIELDSET_FORMATTER_FIELDSET_TEMPLATE', '<fieldset class="%1$s"><legend><span class="fieldset-legend">%2$s</span></legend><div class="fieldset-wrapper">%3$s</div></fieldset>');
// Currently not used:
define('FIELDSET_FORMATTER_REGEX_CLASSES', '#class=(["\']?)(?<userclasses>.*?)\1#');

/*----------------------------------------------------------------------------*/

/**
 * Implements hook_init().
 */
function fieldset_formatter_init() {
  // Add collapser JS for every page call.
  drupal_add_js('misc/form.js');
  drupal_add_js('misc/collapse.js');
}

/*----------------------------------------------------------------------------*/

/**
 * Implements hook_filter_info().
 */
function fieldset_formatter_filter_info() {
  return array(
    'fieldset_formatter' => array(
      'title' => t('Fieldset formatter'),
      'description' => t(
        'Transforms &lt;!keyword&gt; shortcodes into collapsible fieldsets.',
        array(
          '!keyword' => FIELDSET_FORMATTER_DEFAULT_KEYWORD,
        )
      ),
      'settings callback' => '_filter_fieldset_formatter_settings',
      'default settings' => array(
        'keyword' => FIELDSET_FORMATTER_DEFAULT_KEYWORD,
        'types' => fieldsetFormatter::getTypeDefaults(),
        'classes' => 'formatted-fieldset',
      ),
      'tips callback' => '_filter_fieldset_formatter_tips',
      'weight' => 10,
      'prepare callback' => '_fieldset_formatter_prepare_content',
      'process callback' => '_fieldset_formatter_process_content',
    ),
  );
} // fieldset_formatter_filter_info

/*----------------------------------------------------------------------------*/

/**
 * Implements _filter_FILTER_settings().
 */
function _filter_fieldset_formatter_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  $filter->settings += $defaults;
  return array(
    'keyword' => array(
      '#title' => t('Keyword'),
      '#description' => t('The keyword to use in the shortcode tag, like &lt;keyword&gt;&lt;/keyword&gt;.'),
      '#type' => 'textfield',
      '#default_value' => $filter->settings['keyword'],
    ),
    'types' => array(
      '#title' => t('Fieldset types'),
      '#description' => t(
        "A fieldset type determines the fieldset's CSS class, its initial status"
        . "and the corresponging fieldset title.</p><ul>"
        . "<li><p>To make</p><p><strong><code>&lt;!keyword type=\"example\"&gt;"
        . "&lt;/!keyword&gt;</code></strong></p><p>result in a collapsed "
        . "fieldset with the CSS class <em>example</em> and a headline "
        . "<em>Example</em>, you would add a line like</p><p><strong>"
        . "<code>example:collapsible,collapsed:Example</code></strong></p></li>"
        . "<li><p><strong><code>warning::Danger!</code></strong></p><p>would "
        . "make</p><p><strong><code>&lt;!keyword type=\"warning\"&gt;"
        . "&lt;/!keyword&gt;</code></strong></p><p>result in an opened "
        . "(and not at all collapsible) fieldset with the CSS class "
        . "<em>warning</em> and a headline "
        . "<em>Danger!</em></p></li></ul>"
        . "<p>Add one type per line and as many as you need. You may use colons "
        . "in the third portion as well, there are no restrictions to the "
        . "fieldset's title.",
        array(
          '!keyword' => $filter->settings['keyword'],
        )
      ),
      '#type' => 'textarea',
      '#rows' => 9,
      '#default_value' => $filter->settings['types'],
    ),
    'classes' => array(
      '#type' => 'textfield',
      '#title' => t('CSS classes'),
      '#description' => t('You may optionally add css classes to apply to the actually generated &lt;fieldset&gt; tag. Separate classes by spaces, like you would in arbitrary HTML code.'),
      '#default_value' => $filter->settings['classes'],
    ),
  );
} // _filter_fieldset_formatter_settings

/*----------------------------------------------------------------------------*/

/**
 * Implements _filter_FILTER_tips().
 */
function _filter_fieldset_formatter_tips($filter, $format, $long) {

  $settings = _fieldset_formatter_settings_decode($filter, $format);

  if ($long) {
    // Prepare formatted type list:
    $typelist = array();
    foreach ($settings['types'] as $type => $data) {
      $typelist[] = t(
        '<li>%html will render to a fieldset labelled %label and with CSS class(es) &quot;%classes&quot;.</li>',
        array(
          '%html'=> sprintf('<%1$s type="%2$s"></%1$s>', $settings['keyword'], $type),
          '%label' => $data['label'],
          '%classes' => implode(' ', array($settings['classes'], $data['classes'])),
        )
      );
    }
    if (!empty($typelist)) {
      $typelist = implode('', $typelist);
      $typelist = t(
        '<p>The following fieldset types are available:</p><ul>!types</ul>',
        array('!types' => $typelist)
      );
    }
  }
  else {
    $typelist = '';
  }

  return t(
    '<p>Content enclosed in %html tags will be rendered as a collapsible fieldset.</p>!typedetails',
    array(
      '%html' => sprintf('<%1$s></%1$s>', $settings['keyword']),
      '!keyword' => $settings['keyword'],
      '!typedetails' => $typelist,
    )
  );
} // _filter_fieldset_formatter_tips

/*----------------------------------------------------------------------------*/

/**
 * Implements _filter_FILTER_prepare().
 *
 * Transforms all <fieldset/> tags into pseudotags to bypass HTML
 * related filters.
 */
function _fieldset_formatter_prepare_content($text, $filter, $format, $langcode, $cache, $cache_id) {
  $regex = sprintf(
    FIELDSET_FORMATTER_REGEX_TEMPLATE_PREPARE,
    $filter->settings['keyword']
  );
  return preg_replace($regex, '[$1]', $text);
}

/*----------------------------------------------------------------------------*/

/**
 * Implements _filter_FILTER_process().
 */
function _fieldset_formatter_process_content($text, $filter, $format, $langcode, $cache, $cache_id) {

  $settings = _fieldset_formatter_settings_decode($filter, $format);

  // Look up all escaped tags.
  $regex = sprintf(
    FIELDSET_FORMATTER_REGEX_TEMPLATE_PROCESS,
    $settings['keyword']
  );
  preg_match_all($regex, $text, $matches, PREG_SET_ORDER);

  // Replace one by one.
  foreach ($matches as $match) {
    // Build the replacement with further regexes to determine the fieldset type.
    $label = '';
    // Always use defined default classes, if any.
    $classes = $settings['classes'];

    // Determine type from the parameters match (if any).
    if (!empty($match['params'])) {
      preg_match(FIELDSET_FORMATTER_REGEX_TYPE, $match['params'], $params);
      if (!empty($params['type'])) {
        $type = $params['type'];
        if (isset($settings['types'][$type])) {
          $classes = implode(' ', array($classes, $settings['types'][$type]['classes']));
          $label = $settings['types'][$type]['label'];
        }
      }
    }

    $replacement = sprintf(
      FIELDSET_FORMATTER_FIELDSET_TEMPLATE,
      empty($classes) ? '' : " $classes",
      $label,
      $match['content']
    );

    $text = str_replace($match[0], $replacement, $text);
  }

  return $text;
}

/*----------------------------------------------------------------------------*/

/**
 * Helper callback to prepare filter settings for actual filter usage.
 *
 * @param array $filter
 *   A filter settings object as passed to filter hooks.
 * @param object $format
 *   A Drupal fÃ­lter format object, used for cache indexing.
 *
 * @return array
 *   The same array but with values ready for the settings form.
 */
function _fieldset_formatter_settings_decode($filter, $format) {

  // Static caching may be a good idea.
  $cache =& drupal_static(__FUNCTION__);

  if (empty($cache)) {
    $cache = array();
  }

  if (empty($cache[$format->format])) {

    // Process types textarea.
    $ret = $filter->settings;
    $ret['types'] = array();
    $lines = explode("\n", trim($filter->settings['types']));
    foreach ($lines as $line) {
      list($class, $options, $label) = explode(':', $line, 3);
      $classes = $class = trim($class);
      $label = trim($label);
      $options = explode(',', $options);
      // Remove whitespaces etc.
      $options = array_map('trim', $options);
      if (in_array('collapsed', $options)) {
        $classes .= ' collapsed';
      }
      if (in_array('collapsible', $options)) {
        $classes .= ' collapsible';
      }
      if (!empty($class)) {
        $ret['types'][$class] = array(
          'label' => $label,
          'options' => $options,
          // Prepare a classes array with $class AND eventually
          // the collapsed option.
          'classes' => $classes,
        );
      }
      // Add "collapsed" class to the default classes, if configured for this type.
    }
    $cache[$format->format] = $ret;
  }
  return $cache[$format->format];
}
