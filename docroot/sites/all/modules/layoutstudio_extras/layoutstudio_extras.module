<?php
define('LAYOUTSTUDIO_EXTRAS_CACHE_NAME', 'layoutstudio_extras_cache'); // The name of our cache.

/**
 * The path to our cache.
 */
function layoutstudio_extras_cache_dir() {
	return variable_get('file_public_path', 'sites/default/files') . '/' . LAYOUTSTUDIO_EXTRAS_CACHE_NAME;
}

/**
 * Delete the cache.
 */
function layoutstudio_extras_delete_cache() {
	$deleted = layoutstudio_extras_delete_directory(layoutstudio_extras_cache_dir());
	if (!$deleted) {
		return false;
	}
	return true;
}

/**
 * Create our cache.
 */
function layoutstudio_extras_create_cache() {
	$created = mkdir(layoutstudio_extras_cache_dir(), 0755);
	if (!$created) {
		return false;
	}
	return true;
}

/**
 * Check if our cache exists.
 */
function layoutstudio_extras_cache_exists() {
	if (!file_exists(layoutstudio_extras_cache_dir())) {
		return false;
	}
	return true;
}

/**
 * Our subtheme creator form.
 */
function layoutstudio_extras_subtheme_form() {
  $form = array();
  $form['subtheme'] = array(
    '#type' => 'fieldset',
    '#title' => t('Sub-theme information'),
  );
  $form['subtheme']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
    '#description' => t('The name of the new sub-theme. The name must start with a lowercase letter, and may only contain lowercase letters, numbers and the underscore character. This name must be unique.'),
  );
  $form['subtheme']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
	);
  $form['#submit'][] = 'layoutstudio_extras_subtheme_submit';
	$form['#validate'][] = 'layoutstudio_extras_subtheme_validate';
  return $form;
}

/**
 * Validation handler for layoutstudio_extras_subtheme_form.
 */
function layoutstudio_extras_subtheme_validate($form, &$form_state) {
	$name = $form_state['values']['name'];
	
	// borrowed from zenophile, thanks guys :)
	// we are making sure the name is valid and doesn't already exist
	if ($exists = drupal_get_path('theme', $name)) {
    form_set_error('name', t('A theme with this <em>System name</em> already exists at %exists. Please chose a different one.', array('%exists' => $exists)));
  } elseif (!preg_match('/^[abcdefghijklmnopqrstuvwxyz][abcdefghijklmnopqrstuvwxyz0-9_]*$/', $name)) {
    form_set_error('name', t('The <em>System name</em> may only consist of lowercase letters and the underscore character.'));
  }
}

/**
 * Submit handler for layoutstudio_extras_subtheme_form.
 *
 * We pass our validated subtheme name to layoutstudio_extras_create_subtheme.
 * if that function is successfull we go to admin/appearance/install with the location
 * of our subtheme's tar in $_GET['ls_url']
 * 
 */
function layoutstudio_extras_subtheme_submit($form, &$form_state) {
	global $base_url;
	$name = $form_state['values']['name'];
	
	// we have a valid name so we try to copy the subtheme to <public_files_directory>/layoutstudiosubthemetemp
	// where it will then be tarred.
	list($success, $message) = layoutstudio_extras_create_subtheme($name);
	
	// we have a tar file waiting to be installed. We simply go to admin/appearance/install
	// while carrying the path to the tar file with GET.
  if ($success) {
    if (module_exists('update')) {
      // Redirect to theme install page
      $form_state['redirect'] = array('admin/appearance/install', array('query' => array('ls_url' => $base_url . '/' . layoutstudio_extras_cache_dir() . '/' . $name . '.tar')));
    }
    else {
      drupal_set_message(t('Your LayoutStudio Sub-Theme is ready. !download, then extract and upload it to the themes directory of your Drupal site.', array('!download' => '<a href="' . $base_url . '/' . layoutstudio_extras_cache_dir() . '/' . $name . '.tar' . '">' .t('Click here to download it') . '</a>')));
      drupal_set_message(t('Note: Enable the Update module to install future sub-themes automatically.'));
      $form_state['redirect'] = array('admin/appearance');
    }
  }
}

/**
 * Implementation of hook_block_info().
 */
function layoutstudio_extras_block_info() {
  $blocks['copyright'] = array(
    'info' => t('Copyright'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['credit'] = array(
    'info' => t('Credit'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implementation of hook_block_configure().
 */
function layoutstudio_extras_block_configure($delta = '') {
  $form = array();

  switch ($delta) {
    case 'copyright':
      $form['layoutstudio_extras_copyright'] = array(
        '#type' => 'fieldset',
        '#title' => t('Copyright Information'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );

      $form['layoutstudio_extras_copyright']['layoutstudio_extras_copyright_start_year'] = array(
        '#type' => 'textfield',
        '#title' => t('Year to show as start of copyright range'),
        '#default_value' => variable_get('layoutstudio_extras_copyright_start_year', format_date(time(), 'custom', 'Y')),
        '#description' => t('This will show yyyy-xxxx for multiple years and xxxx for single years, where yyyy is the text entered, and xxxx is the same as the current year.'),
        '#required' => TRUE,
      );

      $form['layoutstudio_extras_copyright']['layoutstudio_extras_copyright_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Name to show as copyright holder'),
        '#default_value' => variable_get('layoutstudio_extras_copyright_name', variable_get('site_name', '')),
        '#description' => t('This is the text that will appear after the date. Allows a different name than the site name.'),
        '#required' => TRUE,
      );

      $form['layoutstudio_extras_copyright']['layoutstudio_extras_copyright_message'] = array(
        '#type' => 'textfield',
        '#title' => t('Legal message'),
        '#default_value' => variable_get('layoutstudio_extras_copyright_message', t('All rights reserved.')),
        '#description' => t('A custom message that appears at the end of the copyright statement.'),
      );

      break;
    case 'credit':
      $form['#attributes'] = array('enctype' => "multipart/form-data");
      
      $form['layoutstudio_extras_credit'] = array(
        '#type' => 'fieldset',
        '#title' => t('Credit Settings'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#description' => t('If you are creating a site for a client, this section allows you to put a credit logo (or text link) in the footer back to your company website.'),
      );

      $form['layoutstudio_extras_credit']['layoutstudio_extras_credit_prefix'] = array(
        '#type' => 'textfield',
        '#title' => t('Credit prefix text'),
        '#default_value' => variable_get('layoutstudio_extras_credit_prefix', ''),
        '#description' => t('This text will appear in front of the credit name. It will not appear if a credit logo is uploaded.'),
      );

      $form['layoutstudio_extras_credit']['layoutstudio_extras_credit_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Credit name'),
        '#default_value' => variable_get('layoutstudio_extras_credit_name', ''),
        '#required' => TRUE,
      );

      $form['layoutstudio_extras_credit']['logo'] = array(
        '#type' => 'fieldset',
        '#title' => t('Credit logo image settings'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );
      $credit_logo_path = variable_get('layoutstudio_extras_credit_logo', '');
      // If $credit_logo_path is a public:// URI, display the path relative to the files
      // directory; stream wrappers are not end-user friendly.
      if (file_uri_scheme($credit_logo_path) == 'public') {
        $credit_logo_path = file_uri_target($credit_logo_path);
      }
      $form['layoutstudio_extras_credit']['logo']['layoutstudio_extras_credit_logo'] = array(
        '#type' => 'textfield',
        '#title' => t('Path to custom logo'),
        '#default_value' => $credit_logo_path,
        '#description' => t("The path to the file you would like to use as your credit logo. Leave this empty if you don't want to use a credit logo."),
      );
      if (variable_get('layoutstudio_extras_credit_logo', '')) {
        $form['layoutstudio_extras_credit']['logo']['layoutstudio_extras_credit_logo']['#suffix'] = t('Current logo:') . '<br />';
        $form['layoutstudio_extras_credit']['logo']['layoutstudio_extras_credit_logo']['#suffix'] .= theme('image', array('path' => variable_get('layoutstudio_extras_credit_logo', '')));
      }
      $form['layoutstudio_extras_credit']['logo']['layoutstudio_extras_credit_logo_upload'] = array(
        '#type' => 'file',
        '#title' => t('Upload credit logo image'),
        '#maxlength' => 40,
        '#description' => t("If you don't have direct file access to the server, use this field to upload your credit logo.")
      );

      $form['layoutstudio_extras_credit']['layoutstudio_extras_credit_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Credit url'),
        '#default_value' => variable_get('layoutstudio_extras_credit_url', ''),
      );

      break;
  }
  
  return $form;
}

function layoutstudio_extras_credit_block_settings_form_validate($form, &$form_state) {
  // Handle file uploads.
  $validators = array('file_validate_is_image' => array());

  // Check for a new uploaded logo.
  $file = file_save_upload('layoutstudio_extras_credit_logo_upload', $validators);
  if (isset($file)) {
    // File upload was attempted.
    if ($file) {
      // Put the temporary file in form_values so we can save it on submit.
      $form_state['values']['layoutstudio_extras_credit_logo_upload'] = $file;
    }
    else {
      // File upload failed.
      form_set_error('layoutstudio_extras_credit_logo_upload', t('The logo could not be uploaded.'));
    }
  }

  // If the user provided a path for a credit logo file, make sure a file
  // exists at that path.
  if ($form_state['values']['layoutstudio_extras_credit_logo']) {
    $path = _layoutstudio_extras_validate_logo_path($form_state['values']['layoutstudio_extras_credit_logo']);
    if (!$path) {
      form_set_error('logo_path', t('The custom credit logo path is invalid.'));
    }
  }
}

/**
 * Helper function for the credit logo block settings form.
 *
 * Attempts to validate normal system paths, paths relative to the public files
 * directory, or stream wrapper URIs. If the given path is any of the above,
 * returns a valid path or URI that the theme system can display.
 *
 * @param $path
 *   A path relative to the Drupal root or to the public files directory, or
 *   a stream wrapper URI.
 * @return mixed
 *   A valid path that can be displayed through the theme system, or FALSE if
 *   the path could not be validated.
 */
function _layoutstudio_extras_validate_logo_path($path) {
  $uri = 'public://' . $path;
  if (file_exists($uri)) {
    return $uri;
  }
  return FALSE;
}

function layoutstudio_extras_credit_block_settings_form_submit($form, &$form_state) {
  $values = $form_state['values'];

  // If the user uploaded a new credit logo, save it to a permanent location.
  if ($file = $values['layoutstudio_extras_credit_logo_upload']) {
    unset($values['layoutstudio_extras_credit_logo_upload']);
    $filename = file_unmanaged_copy($file->uri);
    variable_set('layoutstudio_extras_credit_logo', $filename);
  }
  // If the user entered a path relative to the system files directory for
  // a credit logo, store a public:// URI so the theme system can handle it.
  else if (!empty($values['layoutstudio_extras_credit_logo'])) {
    if ($credit_logo_path = _layoutstudio_extras_validate_logo_path($values['layoutstudio_extras_credit_logo'])) {
      variable_set('layoutstudio_extras_credit_logo', $credit_logo_path);
    }
  }
  else if (!$values['layoutstudio_extras_credit_logo_upload'] && empty($values['layoutstudio_extras_credit_logo'])) {
    variable_set('layoutstudio_extras_credit_logo', '');
  }
}

/**
 * Implementation of hook_block_save().
 */
function layoutstudio_extras_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'copyright':
      variable_set('layoutstudio_extras_copyright_start_year', $edit['layoutstudio_extras_copyright_start_year']);
      variable_set('layoutstudio_extras_copyright_name', $edit['layoutstudio_extras_copyright_name']);
      variable_set('layoutstudio_extras_copyright_message', $edit['layoutstudio_extras_copyright_message']);
      break;
    case 'credit':
      variable_set('layoutstudio_extras_credit_prefix', $edit['layoutstudio_extras_credit_prefix']);
      variable_set('layoutstudio_extras_credit_name', $edit['layoutstudio_extras_credit_name']);
      variable_set('layoutstudio_extras_credit_url', $edit['layoutstudio_extras_credit_url']);
      break;
  }
}

/**
 * Implementation of hook_block_view().
 */
function layoutstudio_extras_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'copyright':
      $block['subject'] = '';
      $block['content'] = theme('layoutstudio_extras_copyright', array('start_year' => variable_get('layoutstudio_extras_copyright_start_year', format_date(time(), 'custom', 'Y')), 'name' => variable_get('layoutstudio_extras_copyright_name', variable_get('site_name', '')), 'message' => variable_get('layoutstudio_extras_copyright_message', t('All rights reserved.'))));
      break;

    case 'credit':
      $block['subject'] = '';
      $block['content'] = theme('layoutstudio_extras_credit', array('name_prefix' => variable_get('layoutstudio_extras_credit_prefix', ''), 'name' => variable_get('layoutstudio_extras_credit_name', ''), 'logo' => variable_get('layoutstudio_extras_credit_logo', ''), 'url' => variable_get('layoutstudio_extras_credit_url', '')));
      break;
  }
  return $block;
}

/**
 * Implementation of hook_theme().
 */
function layoutstudio_extras_theme($existing, $type, $theme, $path) {
  return array(
    'layoutstudio_extras_copyright' => array(
      'variables' => array('start_year' => NULL, 'name' => NULL, 'message' => NULL),
    ),
    'layoutstudio_extras_credit' => array(
      'variables' => array('name_prefix' => NULL, 'name' => NULL, 'logo' => NULL, 'url' => NULL),
    ),
  );
}

function theme_layoutstudio_extras_copyright($variables) {
  $output = '';

  $current_year = format_date(time(), 'custom', 'Y');
  if ($variables['start_year'] && strlen($variables['start_year']) == 4 && $variables['start_year'] != $current_year){
    $copyright_date = check_plain($variables['start_year']) .'&ndash;'. $current_year;
  }
  else{
    $copyright_date = $current_year;
  }

  $output .= '<span class="copyright">'. t('Copyright &copy; !copyright_date !name. @message', array('!copyright_date' => $copyright_date, '!name' => filter_xss($variables['name']), '@message' => $variables['message'])) . '</span>';

  return $output;
}

function theme_layoutstudio_extras_credit($variables) {
  $output = '';

  $output .= '<span class="credit">';
  if (empty($variables['logo'])) {
    $output .= check_plain($variables['name_prefix']) . '&nbsp;';
  }
  if (!empty($variables['url'])) {
    $output .= '<a title="' . $variables['name'] . '" href="' . $variables['url'] . '">';
  }
  if (!empty($variables['logo'])) {
    $output .= theme('image', array('path' => $variables['logo']));
  }
  else {
    $output .= check_plain($variables['name']);
  }
  if (!empty($variables['url'])) {
    $output .= '</a>';
  }
  $output .= '</span>';

  return $output;
}

function layoutstudio_extras_menu() {
  $items['admin/appearance/layoutstudio/subtheme'] = array(
    'title' => 'Create a subtheme of LayoutStudio',
    'page callback' => 'drupal_get_form',
    'page arguments'   => array('layoutstudio_extras_subtheme_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );
  
  foreach (list_themes() as $theme) {
    if ((isset($theme->base_theme) && $theme->base_theme == 'layoutstudio')) {
      $items['admin/appearance/settings/' . $theme->name . '/adjustments'] = array(
        'title' => 'Layout adjustments',
        'page callback' => 'layoutstudio_extras_adjustments_page',
        'page arguments' => array(3),
        'access callback' => '_system_themes_access',
        'access arguments' => array($theme),
        'type' => MENU_LOCAL_TASK,
      );
      $items['admin/appearance/settings/' . $theme->name . '/adjustments/add'] = array(
        'title' => 'Add new adjustment',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('layoutstudio_extras_adjustment_form', 3),
        'access callback' => '_system_themes_access',
        'access arguments' => array($theme),
        'type' => MENU_LOCAL_ACTION,
      );
      $items['admin/appearance/settings/' . $theme->name . '/adjustments/edit'] = array(
        'title' => 'Edit adjustment',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('layoutstudio_extras_adjustment_form', 3, 6),
        'access callback' => '_system_themes_access',
        'access arguments' => array($theme),
        'type' => MENU_LOCAL_TASK,
      );
      $items['admin/appearance/settings/' . $theme->name . '/adjustments/delete'] = array(
        'title' => 'Delete adjustment',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('layoutstudio_extras_adjustment_delete_form', 3, 6),
        'access callback' => '_system_themes_access',
        'access arguments' => array($theme),
        'type' => MENU_LOCAL_TASK,
      );
    }
  }
  return $items;
}

function layoutstudio_extras_adjustments_page($theme_key) {
  drupal_set_title(t('Layout adjustments'));
  
  $output = '';

  $adjustments = db_select('layoutstudio_adjustments', 'a')
    ->fields('a')
    ->condition('theme_key', $theme_key)
    ->orderBy('weight', 'ASC')
    ->execute();

  $rows = array();
  if ($adjustments) {
    foreach ($adjustments as $adjustment) {
      $adjustment->settings = unserialize($adjustment->settings);
      $operations = array(
        l(t('edit'), 'admin/appearance/settings/' . $theme_key . '/adjustments/edit/' . $adjustment->aid),
        l(t('delete'), 'admin/appearance/settings/' . $theme_key . '/adjustments/delete/' . $adjustment->aid),
      );
      $rows[] = array(
        $adjustment->settings['layoutstudio_layout'],
        check_plain($adjustment->pages),
        implode('&nbsp;&nbsp;', $operations),
      );
    }
  }

  if (count($rows) > 0) {
    $header = array(
      t('Layout'),
      t('Pages'),
      t('Operations'),
    );
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
  }
  else {
    $output .= t('No layout adjustments have been created yet.');
  }

  return $output;
}

function layoutstudio_extras_adjustment_form($form, &$form_state, $theme_key, $aid = '') {
  include_once drupal_get_path('theme', 'layoutstudio') . '/theme-settings.php';
  if (!function_exists('layoutstudio_layout_settings_form')) {
    // Fail gracefully if the LayoutStudio theme is out of date.
    drupal_set_message(t("The LayoutStudio Starter Theme needs to be updated to a newer version before layout adjustments can be made."));
    return array();
  }

  $settings = array();
  if (!empty($aid)) {
    $settings = db_select('layoutstudio_adjustments', 'a')
      ->fields('a')
      ->condition('aid', $aid)
      ->range(0, 1)
      ->execute()
      ->fetchAssoc();
    $settings = array_merge($settings, unserialize($settings['settings']));
    unset($settings['settings']);

    $form['aid'] = array(
      '#type' => 'value',
      '#value' => $aid,
    );
  }
  
  // Add the form's CSS
  drupal_add_css(drupal_get_path('theme', 'layoutstudio') . '/css/theme-settings.css', 'file');
  drupal_add_css(drupal_get_path('theme', 'layoutstudio') . '/css/theme-settings-ie.css', array('weight' => CSS_THEME, 'browsers' => array('IE' => 'lte IE 7', '!IE' => FALSE), 'preprocess' => FALSE));

  $form['theme_key'] = array(
    '#type' => 'value',
    '#value' => $theme_key,
  );

  // Add layout specific theme settings.
  $layoutstudio_settings_form = layoutstudio_layout_settings_form($form, $form_state, $theme_key);
  if (!empty($aid)) {
    // Override default values for this particular layout adjustment.
    _layoutstudio_extras_adjustment_form_set_defaults($layoutstudio_settings_form, $settings);
  }
  $form = array_merge($form, $layoutstudio_settings_form);

  $form['pages'] = array(
    '#type' => 'textarea',
    '#title' => t('Use this adjustment on specific pages'),
    '#description' => t("Specify pages by using their paths. Enter one path per line. The '*' character is a wildcard. Example paths are %blog for the blog page and %blog-wildcard for every personal blog. %front is the front page.", array('%blog' => 'blog', '%blog-wildcard' => 'blog/*', '%front' => '<front>')),
    '#default_value' => (!empty($aid)) ? $settings['pages'] : '',
  );

  $form['weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Weight'),
    '#default_value' => (!empty($aid)) ? $settings['weight'] : 0,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Recursive function that sets the default value of layout specific form elements.
 */
function _layoutstudio_extras_adjustment_form_set_defaults(&$form, $settings) {
  foreach ($form as $key => $element) {
    if (!isset($element['#type'])) {
      continue;
    }

    if ($element['#type'] == "fieldset") {
      _layoutstudio_extras_adjustment_form_set_defaults($form[$key], $settings);
    }
    else if (isset($settings[$key])) {
      $form[$key]['#default_value'] = $settings[$key];
    }
  }
}

function layoutstudio_extras_adjustment_form_submit($form, &$form_state) {
  $record = array(
    'theme_key' => $form_state['values']['theme_key'],
    'settings' => array(
      'layoutstudio_layout' => $form_state['values']['layoutstudio_layout'],
      'layoutstudio_page_width' => $form_state['values']['layoutstudio_page_width'],
      'layoutstudio_secondary_width' => $form_state['values']['layoutstudio_secondary_width'],
      'layoutstudio_tertiary_width' => $form_state['values']['layoutstudio_tertiary_width'],
      'layoutstudio_header_width' => $form_state['values']['layoutstudio_header_width'],
      'layoutstudio_footer_width' => $form_state['values']['layoutstudio_footer_width'],
    ),
    'pages' => $form_state['values']['pages'],
    'weight' => $form_state['values']['weight'],
  );

  if (isset($form_state['values']['aid']) && !empty($form_state['values']['aid'])) {
    $record['aid'] = $form_state['values']['aid'];
    drupal_write_record('layoutstudio_adjustments', $record, array('aid'));
  }
  else {
    drupal_write_record('layoutstudio_adjustments', $record);
  }
  
  $form_state['redirect'] = array('admin/appearance/settings/' . $form_state['values']['theme_key'] . '/adjustments');
}

function layoutstudio_extras_adjustment_delete_form($form, &$form_state, $theme_key, $aid) {
  $form['aid'] = array(
    '#type' => 'value',
    '#value' => $aid,
  );

  $form['theme_key'] = array(
    '#type' => 'value',
    '#value' => $theme_key,
  );

  return confirm_form($form, t('Are you sure you want to delete this layout adjustment?'), 'admin/appearance/settings/' . $theme_key . '/adjustments');
}

function layoutstudio_extras_adjustment_delete_form_submit($form, &$form_state) {
  db_delete('layoutstudio_adjustments')
      ->condition('aid', $form_state['values']['aid'])
      ->execute();
  drupal_set_message(t('The layout adjustment has been deleted.'));

  $form_state['redirect'] = 'admin/appearance/settings/' . $form_state['values']['theme_key'] . '/adjustments';
}

/**
 * Implements hook_system_themes_page_alter().
 *
 * Altering the appearance page so that we can't enable layoutstudio.
 *
 * We replace the enable links with a link to our subtheme creator.
 *
 * Subthemes are given their own settings link.
 * 
 */
function layoutstudio_extras_system_themes_page_alter(&$theme_groups) {
  // add the subtheme settings link.
  if (count($theme_groups['enabled'])) {
    foreach ($theme_groups['enabled'] as $key => $theme) {
      if (isset($theme->base_themes) && in_array('layoutstudio', $theme->base_themes) && $theme->status) {
        $theme->operations[] = array(
          'title' => t('Layout adjustments'),
          'href' => 'admin/appearance/settings/' . $theme->name . '/adjustments',
        );
        $theme_groups['enabled'][$key] = $theme;
      }
    }
  }
  
  /*
   * The sub-theme creator requires Drupal 7.2 or higher due to issue #1019834.
   */
  if (VERSION >= 7.2) {
    // we want to remove the enable links from layoutstudio as well as the MYTHEME subtheme all together
    if (count($theme_groups['disabled'])) {
      foreach ($theme_groups['disabled'] as $key => $theme) {
        if ($theme->name == 'MYTHEME' && $theme->base_themes['layoutstudio'] == 'layoutstudio') {
          unset($theme_groups['disabled'][$key]);
        }
        if ($theme->name == 'layoutstudio') {
          $theme->operations[0]['title'] = 'Create subtheme';
          $theme->operations[0]['href'] = 'admin/appearance/layoutstudio/subtheme';
          $theme->operations[0]['attributes']['title']  = 'Create a subtheme of LayoutStudio';
          unset($theme->operations[0]['query']);
          unset($theme->operations[1]);
        }
      }
    }
  }
}

function layoutstudio_extras_theme_get_setting($setting_name) {
  if (empty($GLOBALS['theme_key'])) {
    return theme_get_setting($setting_name);
  }

  // Statically cache matched theme adjustment to save overhead.
  $matched_adjustment = &drupal_static(__FUNCTION__);
  
  if (!isset($matched_adjustment)) {
    $matched_adjustment = FALSE;

    $theme_key = $GLOBALS['theme_key'];

    $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));

    $adjustments = db_select('layoutstudio_adjustments', 'a')
      ->fields('a')
      ->condition('theme_key', $theme_key)
      ->orderBy('weight', 'ASC')
      ->execute();

    foreach ($adjustments as $adjustment) {
      $pages = $adjustment->pages;

      // Compare the lowercase internal and lowercase path alias (if any).
      $page_match = drupal_match_path($path, $pages);
      if ($path != $_GET['q']) {
        $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
      }

      if ($page_match) {
        $matched_adjustment = $adjustment;
        $matched_adjustment->settings = unserialize($matched_adjustment->settings);
        break;
      }
    }
  }

  if ($matched_adjustment !== FALSE) {
    if (isset($matched_adjustment->settings[$setting_name])) {
      return $matched_adjustment->settings[$setting_name];
    }
  }

  // If no adjustments apply to the current path, return the normal theme setting.
  return theme_get_setting($setting_name);
}


/**
 * Implements hook_form_alter().
 *
 * Simply changing the description to indicate we are installing
 * a layoutstudio subtheme.
 */
function layoutstudio_extras_form_alter(&$form, $form_state, $form_id) {
	if ($form_id == 'update_manager_install_form') {
		// if ls_url is set we have came from admin/appearance/layoutstudio/subtheme
		// and have a tar file ready to be installed
		if ($_GET['ls_url']) {
			$form['project_url']['#default_value'] = $_GET['ls_url'];
			$form['#submit'][] = 'layoutstudio_extras_install_form_submit';
			$form['help_text']['#markup'] = 'Your LayoutStudio Sub-Theme is ready to install. Simply click "Install" now.';
			unset($form['available_backends']);
			$_SESSION['ls_extras'] = 1;
		}
	}

  if ($form_id == 'block_admin_configure') {
    if ($form['module']['#value'] == 'layoutstudio_extras' && $form['delta']['#value'] == "credit") {
      $form['#validate'][] = 'layoutstudio_extras_credit_block_settings_form_validate';
      $form['#submit'][] = 'layoutstudio_extras_credit_block_settings_form_submit';
    }
  }
}

/**
 * Submit handler for update_manager_install_form
 *
 * We have set a variable in $_SESSION to indicate an installation
 * is being done from the layoutstudio_extras_cache.
 *
 * We hit this function when the installation is complete
 * so it is time to delete the cache and unset the session variable.
 * 
 */
function layoutstudio_extras_install_form_submit(&$form, $form_state) {
	if (isset($_SESSION['ls_extras'])) {
		// remove leftover directory
		layoutstudio_extras_delete_cache();
		unset($_SESSION['ls_extras']);
	}
}

/**
 *
 * This function creates the subtheme folder, moves the files into it
 * and replaces MYTHEME with the new subtheme name.
 *
 * If called from drush it creates the subtheme in the final location
 * but if called from the webserver if creates the subtheme in the public files directory,
 * tars the files to be used with Drupal 7's new installation scripts.
 *
 * @param $name
 *   String to indicate the name of the subtheme,
 *   it must be validated prior to this function -
 *   ie: a valid function name that doesn not already exist.
 * @param $drush
 *   String to indicate whether or not called by a drush script.
 * @param $location
 *   String to indicate where the subtheme should be created.
 *   Should only be used for drush.
 * @return
 *   Array of (boolean for success, error messages if they exist)
 */
function layoutstudio_extras_create_subtheme($name, $drush = FALSE, $location = '') {
  $success = FALSE;
  $errors = '';

  if (empty($location)) {
    $location = variable_get('file_public_path', 'sites/default/files');
  }
	
	// ensure the cache is deleted and re-created.
  // we don't want old files getting in our way.
	if (!$drush) {
    $location = layoutstudio_extras_cache_dir();
		if (layoutstudio_extras_cache_exists()) {
			if (!layoutstudio_extras_delete_cache()) {
				drupal_set_message(t('Could not delete cache'), 'error');
				$errors = t('Could not delete cache');
				return array($success, $errors);
			}
		}

    if (!layoutstudio_extras_create_cache()) {
      drupal_set_message(t('Could not create cache'), 'error');
      $errors = t('Could not create cache');
      return array($success, $errors);
    }
	}
	
	// check to see if layoutstudio exists
  $source_location = drupal_get_path('theme', 'layoutstudio');
  if (!$source_location) {
    drupal_set_message(t('Layoutstudio was not found. Please ensure it is properly installed.'), 'error');
    $errors = t('Layoutstudio was not found. Please ensure it is properly installed.');
    return array($success, $errors);
  }
  
  // check to see if MYTHEME within layoutstudio exists
  if (!file_exists($source_location .'/MYTHEME')) {
    drupal_set_message(t('The "MYTHEME" folder was not found within Layoutstudio. Please ensure it is properly installed.'), 'error');
    $errors = t('The "MYTHEME" folder was not found within Layoutstudio. Please ensure it is properly installed.');
    return array($success, $errors);
  }
	
	// create the subtheme directory within the layoutstudio cache directory
	// or within sites/ if called by drush.
	$created = mkdir($location .'/'. $name, 0755);
	if (!$created) {
		drupal_set_message(t('Could not create '. $location .'/'. $name), 'error');
		$errors = t('Could not create '. $location .'/'. $name);
		return array($success, $errors);
	}
  
	// we have our subtheme directory created and we know the existing layout studio files exist
	// we now try to copy the MYTHEME folder.
  $result = layoutstudio_extras_smart_copy($source_location .'/MYTHEME', $location .'/'. $name);
	// rename the MYTHEME.info file to the new subtheme name
  $result1 = rename($location .'/'. $name .'/MYTHEME.info', $location .'/'. $name .'/'. $name .'.info');
  
  if (!$result || !$result1) {
    drupal_set_message(t('There was an error when trying to copy files. Your webserver may not support the necessary functions for this operation.'), 'error');
    $errors = t('There was an error when trying to copy files. Your webserver may not support the necessary functions for this operation.');
    return array($success, $errors);
  }
  
	// now we open template.php, theme-settings.php and $name.info and replace
	// MYTHEME with the new theme name.
	
  // template.php
  $filename = $location .'/'. $name .'/template.php';
  $contents = file_get_contents($filename);
  $contents = str_replace('MYTHEME', $name, $contents);
  
  $handle = fopen($filename, "w+");
  if (fwrite($handle, $contents) === FALSE) {
    drupal_set_message(t('There was an error when trying to write to'. $name), 'error');
    $errors = t('There was an error when trying to write to'. $name);
    return array($success, $errors);
  }
  fclose($handle);
  
  // theme-settings.php
  $filename = $location .'/'. $name .'/theme-settings.php';
  $contents = file_get_contents($filename);
  $contents = str_replace('MYTHEME', $name, $contents);
  
  $handle = fopen($filename, "w+");
  if (fwrite($handle, $contents) === FALSE) {
    drupal_set_message(t('There was an error when trying to write to'. $name), 'error');
    $errors = t('There was an error when trying to write to'. $name);
    return array($success, $errors);
  }
  fclose($handle);
  
  // $name.info
  $filename = $location .'/'. $name .'/'. $name .'.info';
  $contents = file_get_contents($filename);
  $contents = str_replace('MYTHEME', $name, $contents);
  
  $handle = fopen($filename, "w+");
  if (fwrite($handle, $contents) === FALSE) {
    drupal_set_message(t('There was an error when trying to write to'. $name), 'error');
    $errors = t('There was an error when trying to write to'. $name);
    return array($success, $errors);
  }
  fclose($handle);
  
	// the rest of the process is for web only, drush is done
	if ($drush) {
		return array(true, '');
	} else {
		// We need to change directories to be able to tar
		// the new theme folder properly.
		
		// Save the current directory so we can change back to it and
		// not break anything during the rest of the script execution.
		$current_dir = getcwd();
		chdir($location);
		
		$obj = new Archive_Tar($name.'.tar');
		$path = './';
		$handle = opendir($path); 
		if (!$obj->create('./'.$name.'/')) {
			drupal_set_message(t('There was an error when trying to tar '. $name), 'error');
			$errors = t('There was an error when trying to tar '. $name);
			return array($success, $errors);
		}
		
		// We're done! lets go back to where we came from
		// and report our success.
		chdir($current_dir);
	}
	
  return array(true, '');
}


/**
 * Recursively copy a directory.
 *
 * http://www.php.net/manual/en/function.copy.php#91256
 * 
 * @param $source
 *   The source directory.
 * @param $dest
 *   The destination directory.
 * @param $options
 * 	 Optional file or folder permissions.
 * @return
 *   True of False on success.
 */
function layoutstudio_extras_smart_copy($source, $dest, $options=array('folderPermission'=>0755,'filePermission'=>0755)) {
  $result=false;
  if (is_file($source)) {
    if ($dest[strlen($dest)-1]=='/') {
      if (!file_exists($dest)) {
        cmfcDirectory::makeAll($dest,$options['folderPermission'],true);
      }
      $__dest=$dest."/".basename($source);
    } else {
      $__dest=$dest;
    }
    $result=copy($source, $__dest);
    chmod($__dest,$options['filePermission']);
  } elseif(is_dir($source)) {
    if ($dest[strlen($dest)-1]=='/') {
      if ($source[strlen($source)-1]=='/') {
        //Copy only contents
      } else {
        //Change parent itself and its contents
        $dest=$dest.basename($source);
        @mkdir($dest);
        chmod($dest,$options['filePermission']);
      }
    } else {
      if ($source[strlen($source)-1]=='/') {
        //Copy parent directory with new name and all its content
        @mkdir($dest,$options['folderPermission']);
        chmod($dest,$options['filePermission']);
      } else {
        //Copy parent directory with new name and all its content
        @mkdir($dest,$options['folderPermission']);
        chmod($dest,$options['filePermission']);
      }
    }
    $dirHandle=opendir($source);
    while($file=readdir($dirHandle)) {
      if($file!="." && $file!="..") {
        if(!is_dir($source."/".$file)) {
          $__dest=$dest."/".$file;
        } else {
          $__dest=$dest."/".$file;
        }
        //echo "$source/$file ||| $__dest<br />";
        $result=layoutstudio_extras_smart_copy($source."/".$file, $__dest, $options);
      }
    }
    closedir($dirHandle);
  } else {
    $result=false;
  }
  return $result;
}

/**
 * Recursively delete a directory.
 *
 * http://www.php.net/manual/en/function.rmdir.php#98499
 * 
 * @param $directory
 *   The directory to be deleted.
 * @param $empty
 *   Whether the directory is empty or not.
 * @return
 *   True of False on success.
 */
function layoutstudio_extras_delete_directory($directory, $empty = false) {
	if(substr($directory,-1) == "/") {
			$directory = substr($directory,0,-1);
	}

	if(!file_exists($directory) || !is_dir($directory)) {
		return false;
	} elseif(!is_readable($directory)) {
		return false;
	} else {
		$directoryHandle = opendir($directory);
	 
		while ($contents = readdir($directoryHandle)) {
			if($contents != '.' && $contents != '..') {
				$path = $directory . "/" . $contents;
			 
				if(is_dir($path)) {
					layoutstudio_extras_delete_directory($path);
				} else {
					unlink($path);
				}
			}
		}
	 
		closedir($directoryHandle);

		if($empty == false) {
			if(!rmdir($directory)) {
				return false;
			}
		}
	 
		return true;
	}
}