<?php

/**
 * @file
 * Allow users to checkout with the Pin payment method.
 */

// Add our required API related files.
require_once 'includes/commerce_pin_base.inc';
require_once 'includes/commerce_pin_charges.inc';
require_once 'includes/commerce_pin_response.inc';
require_once 'includes/commerce_pin_customer.inc';

// The message to tell the user that the payment gateway is not avaiable.
define('COMMERCE_PIN_PAYMENT_METHOD_NOT_ACTIVE', t('This payment method is not available. Please try another payment method or come back later.'));

/**
 * Implements hook_theme().
 */
function commerce_pin_theme($existing, $type, $theme, $path) {
  $return['commerce_pin_javascript_form'] = array(
    'render element' => 'element',
    'template' => 'templates/commerce-pin-javascript-form',
  );
  return $return;
}
/**
 * Implements hook_payment_method_info().
 */
function commerce_pin_commerce_payment_method_info() {
  return array(
    'commerce_pin' => array(
      'title' => t('Pin Payments'),
      'display_title' => t('Credit Card'),
      'description' => t('Process payment using the online Australian payment gateway Pin Payments (see pin.net.au).'),
      'active' => TRUE,
      'offsite' => FALSE,
      'cardonfile' => array(
        'delete callback' => 'commerce_pin_cardonfile_delete',
        'charge callback' => 'commerce_pin_cardonfile_charge',
      ),
    ),
  );
}

/**
 * Card on file delete callback.
 */
function commerce_pin_cardonfile_delete($form, $form_state, $payment_method, $card) {
  $token = $card->remote_id;
  $settings = commerce_pin_prepare_settings($payment_method['settings']);
  $customer_transaction = new CommercePinTransactionCustomer($settings['correct_secret_key'], $settings['test_mode']);
  return $customer_transaction->deleteCustomer($token);
}

/**
 * Card on file charge callback.
 */
function commerce_pin_cardonfile_charge($payment_method, $card, $order, $charge = NULL) {
  $transaction = commerce_pin_create_transaction($payment_method, $order, $charge);
  $settings = commerce_pin_prepare_settings($payment_method['settings']);

  // Create a new transaction object to query the gateway.
  $pin_transaction = new CommercePinTransactionCharge($settings['correct_secret_key'], $settings['test_mode']);

  $values = array(
    'currency' => $transaction->currency_code,
    'amount' => $transaction->amount,
    'email' => $order->mail,
    'description' => t('Commerce payment for order #@order-number', array('@order-number' => $order->order_number)),
    'customer_token' => $card->remote_id,
  );
  // Charge the credit cards.
  $payment = $pin_transaction->chargeCreditCard($values);

  // If the details we submitted resulted in a successful payment.
  if ($payment->wasSuccessful()) {

    // Add our Pin token to the order for future reference.
    $transaction->remote_id = $payment->getToken();
    commerce_pin_transaction_pass($transaction, t('Pin payment was successful.'));
    return TRUE;
  }
  else {

    // Handle when our payment gateway refused our payment.
    $error_message = $payment->getErrorMessage();
    commerce_pin_transaction_fail(
      $transaction,
      t('Pin payment was unsuccessful. Error given was: !error', array('!error' => $error_message))
    );

    drupal_set_message($error_message, 'error');
    return FALSE;
  }
}

/**
 * The settings form for our Pin payment method.
 *
 * Implements hook_form().
 */
function commerce_pin_settings_form($settings = NULL) {

  $form = array();

  // Create an array of settings with some defaults.
  $settings = array_merge(
    array(
      'secret_key_live' => '',
      'secret_key_test' => '',
      'test_mode' => TRUE,
      'javascript' => FALSE,
      'logo' => FALSE,
    ),
    // If we have valid settings, use them otherwise us an empty array.
    (is_array($settings) ? $settings : array())
  );

  // A selector to the test/javascript mode checkbox for the purposes of the
  // #states API.
  $test_mode_checkbox = ':input[name="parameter[payment_method][settings][payment_method][settings][test_mode]"]';
  $javascript_mode_checkbox = ':input[name="parameter[payment_method][settings][payment_method][settings][javascript]"]';

  $form['secret_key_live'] = array(
    '#type' => 'textfield',
    '#default_value' => $settings['secret_key_live'],
    '#title' => t('Live Secret Key'),
    '#description' => t(
      'Enter the secret key you get from the "Account" area in the Pin dashboard.'
    ),
    '#states' => array(
      'required' => array(
        $test_mode_checkbox => array(
          'checked' => FALSE,
        ),
      ),
    ),
  );

  $form['public_key_live'] = array(
    '#type' => 'textfield',
    '#default_value' => $settings['public_key_live'],
    '#title' => t('Publishable Live Key'),
    '#description' => t(
      'Enter the publishable secret key you get from the "Account" area in the Pin dashboard.'
    ),
    '#states' => array(
      'required' => array(
        $test_mode_checkbox => array(
          'checked' => FALSE,
        ),
        $javascript_mode_checkbox => array(
          'checked' => TRUE,
        ),
      ),
    ),
  );

  $form['secret_key_test'] = array(
    '#type' => 'textfield',
    '#default_value' => $settings['secret_key_test'],
    '#title' => t('Test Secret Key'),
    '#description' => t(
      'Enter the secrety key for the test mode.'
    ),
    '#states' => array(
      'required' => array(
        $test_mode_checkbox => array(
          'checked' => TRUE,
        ),
      ),
    ),
  );

  $form['public_key_test'] = array(
    '#type' => 'textfield',
    '#default_value' => $settings['public_key_test'],
    '#title' => t('Publishable Test Key'),
    '#description' => t(
      'Enter the publishable secret key for the test mode.'
    ),
    '#states' => array(
      'required' => array(
        $test_mode_checkbox => array(
          'checked' => TRUE,
        ),
        $javascript_mode_checkbox => array(
          'checked' => TRUE,
        ),
      ),
    ),
  );

  $form['test_mode'] = array(
    '#type' => 'checkbox',
    '#default_value' => $settings['test_mode'],
    '#title' => t('Test Mode'),
    '#description' => t(
      'If test mode is active, payments will not be charged to cards but they
      will appear in your Pin dashboard.'
    ),
  );

  $form['logo'] = array(
    '#type' => 'checkbox',
    '#default_value' => $settings['logo'],
    '#title' => t('Show Pin payments logo on checkout form'),
    '#description' => t('Show a link and pin-payments logo on checkout form.'),
  );

  $form['javascript'] = array(
    '#type' => 'checkbox',
    '#default_value' => $settings['javascript'],
    '#title' => t('JavaScript Mode (recommended)'),
    '#description' => t(
      "If JavaScript mode is active, payments will be sent directly to Pin from the client's browser. No card data will be sent to your server."
    ),
  );

  return $form;
}


/**
 * Prepare settings provided by the commerce API for consumption by our hooks.
 *
 * @param array $settings
 *   The settings given to us by the commerce payment hooks.
 */
function commerce_pin_prepare_settings($settings) {
  // Ensure the test mode variable is a boolean value and default it to on.
  $settings['test_mode'] = !isset($settings['test_mode'])
    ? TRUE : $settings['test_mode'] == '1';

  $correct_secret_name = $settings['test_mode']
    ? 'secret_key_test' : 'secret_key_live';

  $correct_public_name = $settings['test_mode']
    ? 'public_key_test' : 'public_key_live';

  $settings['correct_secret_key'] = $settings[$correct_secret_name];
  $settings['correct_public_key'] = $settings[$correct_public_name];

  return $settings;
}


/**
 * Add validation to the payment settings form.
 *
 * The commerce payment method API doesn't allow a validate function so we have
 * to hook into the parent form manually. See
 * http://drupal.stackexchange.com/questions/38606 for details.
 *
 * Implements hook_FORM_ID_form_alter().
 */
function commerce_pin_form_rules_ui_edit_element_alter(&$form, &$form_state, $form_id) {

  $payment_method = isset($form_state['element_settings']['payment_method']['method_id'])
    ? $form_state['element_settings']['payment_method']['method_id'] : FALSE;

  if ($payment_method === 'commerce_pin') {
    $form['#validate'][] = 'commerce_pin_settings_form_validate';
  }
}


/**
 * Validate the admin settings form for collecting payment gateway settings.
 *
 * Implements hook_form_validate().
 */
function commerce_pin_settings_form_validate($form, &$form_state) {

  // Get the lengthy path to our submitted ssettings.
  $submitted_settings = $form_state['values']['parameter']['payment_method']['settings']['payment_method']['settings'];
  $test_mode = $submitted_settings['test_mode'] == '1';

  // Check which API key is required based on our settings. Depending on the
  // mode, test or live, we only have to supply one API key. We just need to
  // ensure we are collecting the correct one.
  $required_field = $test_mode
    ? 'secret_key_test' : 'secret_key_live';

  // If the value is blank.
  if ($submitted_settings[$required_field] == '') {
    // Raise an error on our element.
    $element_path = 'parameter][payment_method][settings][payment_method][settings][' . $required_field;
    form_set_error($element_path, t('You have not entered the required API key.'));
  }
  $required_field = $test_mode
    ? 'public_key_test' : 'public_key_live';
  if ($submitted_settings['javascript'] == '1' && $submitted_settings[$required_field] == '') {
    $element_path = 'parameter][payment_method][settings][payment_method][settings][' . $required_field;
    form_set_error($element_path, t('You have not entered the required public API key to use the Javascript method.'));
  }

}

/**
 * The form that is presented to the user to collect their credit card details.
 *
 * Implements PAYMENT_METHOD_submit_form().
 */
function commerce_pin_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $settings = commerce_pin_prepare_settings($payment_method['settings']);

  $logo = array();
  if (!empty($payment_method['settings']['logo'])) {
    $logo = array(
      'logo' => array(
        '#markup' => l(
          theme('image', array(
            'path' => drupal_get_path('module', 'commerce_pin') . '/images/pin_logo.png',
            'alt' => t('Powered by pin payments'),
          )),
          'https://pin.net.au',
          array(
            'external' => TRUE,
            'html' => TRUE,
          )
        ),
      ),
    );
  }

  // Tell the user we are in test mode.
  if ($settings['test_mode']) {
    drupal_set_message(t('Your Pin payment gateway is currently in test mode.'), 'warning');
  }

  // Check if we have yet to configure payment methods and if we have the
  // permissions to do so.
  if ($settings['correct_secret_key'] == '' && user_access('administer payment methods')) {

    // Tell the admin we need to configure the API key.
    drupal_set_message(
      t(
        'No API key has been configured for the Pin payment method. Please !url.',
        array(
          '!url' => l(
            t('add your API key'),
            'admin/commerce/config/payment-methods/manage'
          ),
        )
      ),
      'error'
    );

  }

  // If we have reached this point we are not an admin who can add an API key
  // but a user who has landed on this form when the admin has failed to
  // configure an API key.
  if ($settings['correct_secret_key'] == '') {
    return array('#markup' => COMMERCE_PIN_PAYMENT_METHOD_NOT_ACTIVE);
  }

  if (isset($payment_method['settings']['javascript']) && $payment_method['settings']['javascript'] == '1') {
    $order_w = entity_metadata_wrapper('commerce_order', $order);
    try {
      $address = $order_w->commerce_customer_billing->commerce_customer_address->value();
    }
    catch (Exception $e) {
      return array(
        '#markup' => t('You must configure a customer address profile. Please contact the administrator.'),
      );
    }
    return array(
      'payment_form' => array(
        '#theme' => 'commerce_pin_javascript_form',
        '#attached' => array(
          'js' => array(
            'https://cdn.pin.net.au/pin.v2.js' => array('type' => 'external'),
            array(
              'data' => array(
                'commerce_pin' => array(
                  'key' => check_plain($settings['correct_public_key']),
                  'mode' => $settings['test_mode'] == '1' ? 'test' : 'live',
                  'address' => check_plain($address['thoroughfare']),
                  'name' => check_plain($address['name_line']),
                  'city' => check_plain($address['locality']),
                  'state' => check_plain($address['administrative_area']),
                  'postcode' => check_plain($address['postal_code']),
                  'country' => check_plain($address['country']),
                ),
              ),
              'type' => 'setting',
            ),
            drupal_get_path('module', 'commerce_pin') . '/js/commerce-pin.js',
          ),
        ),
      ),
      'card_token' => array(
        '#type' => 'hidden',
        '#default_value' => '',
      ),
    ) + $logo;
  }
  else {
    module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

    return commerce_payment_credit_card_form(
      array(
        'type' => array(
          'visa',
          'mastercard',
        ),
        'code' => '',
      ),
      array()
    ) + $logo;
  }

}

/**
 * Validate users credit card information.
 *
 * Implements PAYMENT_METHOD_submit_form_validate().
 */
function commerce_pin_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {

  // This indicates the form had no element for credit cards. This means the
  // admin failed to enter the API key.
  if (isset($pane_values['cardonfile']) && ($cardonfile = $pane_values['cardonfile']) && is_numeric($cardonfile)) {
    // The user is paying with an existing card, there is no need to validate
    // any card-number or expiry date fields.
    return TRUE;
  }

  if (isset($payment_method['settings']['javascript']) && $payment_method['settings']['javascript'] == '1') {
    if (empty($pane_values['card_token'])) {
      // Create a failed transaction for audit-sake.
      $transaction = commerce_pin_create_transaction($payment_method, $order, 0);
      commerce_pin_transaction_fail($transaction, t('An error occurred receiving authorization from the payment provider.'));
      form_set_error('', t('An error occurred receiving authorization from the payment provider. Please ensure you have JavaScript enabled in your browser.'));
      return FALSE;
    }
    return TRUE;
  }

  if (!isset($pane_values['credit_card'])) {
    form_set_error('', COMMERCE_PIN_PAYMENT_METHOD_NOT_ACTIVE);
    return FALSE;
  }

  // Validate the credit card fields.
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );
  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }

}


/**
 * After the form has validated, submit the details off to our payment gateway.
 *
 * Implements PAYMENT_METHOD_submit_form_submit().
 */
function commerce_pin_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {

  $transaction = commerce_pin_create_transaction($payment_method, $order, $charge);
  $settings = commerce_pin_prepare_settings($payment_method['settings']);

  // Create a new transaction object to query the gateway.
  $pin_transaction = new CommercePinTransactionCharge($settings['correct_secret_key'], $settings['test_mode']);

  // Get the credit card details from the pane values.
  $javascript = isset($payment_method['settings']['javascript']) && $payment_method['settings']['javascript'] == '1';
  $card = FALSE;
  $stored_card = FALSE;
  $store_card = FALSE;
  if (!$javascript) {
    $card = $pane_values['credit_card'];
  }
  else {
    if (module_exists('commerce_cardonfile')) {
      $store_card = TRUE;
    }
  }

  // Get the users address off the order object.
  $order_w = entity_metadata_wrapper('commerce_order', $order);
  try {
    $address = $order_w->commerce_customer_billing->commerce_customer_address->value();
  }
  catch (Exception $e) {
    drupal_set_message(t('You must configure a customer address profile. Please contact the administrator.', 'error'));
    return FALSE;
  }

  if (isset($pane_values['cardonfile'])) {
    // Card on File form elements are added to the payment form.
    $cardonfile = $pane_values['cardonfile'];
    $cardonfile_instance_default = $pane_values['cardonfile_instance_default'];
    $cardonfile_store = $pane_values['credit_card']['cardonfile_store'];

    if (is_numeric($cardonfile)) {
      // A stored card is selected to use.
      $stored_card = commerce_cardonfile_load($cardonfile);
    }
    elseif ($cardonfile == 'new' && $cardonfile_store) {
      $store_card = TRUE;
    }
  }

  $card_token = FALSE;
  if (!$stored_card) {
    if ($javascript) {
      $card_token = $pane_values['card_token'];
    }
    else {
      $card = array(
        'number' => $card['number'],
        'expiry_month' => $card['exp_month'],
        'expiry_year' => $card['exp_year'],
        'cvc' => $card['code'],
        'name' => $address['name_line'],
        'address_line1' => $address['thoroughfare'],
        'address_city' => $address['locality'],
        'address_postcode' => $address['postal_code'],
        'address_state' => $address['administrative_area'],
        'address_country' => $address['country'],
      );
    }
  }

  $values = array(
    'currency' => $transaction->currency_code,
    'amount' => $transaction->amount,
    'email' => $order->mail,
    'description' => t('Commerce payment for order #@order-number', array('@order-number' => $order->order_number)),
  );
  if ($stored_card) {
    $values['customer_token'] = $stored_card->remote_id;
  }
  elseif ($store_card) {
    // A new card is used and we are supposed to store it.
    $customer_transaction = new CommercePinTransactionCustomer($settings['correct_secret_key'], $settings['test_mode']);
    if ($card_token) {
      $customer_values = array(
        'card_token' => $card_token,
        'email' => $order->mail,
      );
    }
    else {
      $customer_values = array(
        'card' => $card,
        'email' => $order->mail,
      );
    }
    $response = $customer_transaction->createCustomer($customer_values);
    $customer_token = $response->getRawResponse()->response->token;
    $stored_card = commerce_cardonfile_new(array(
      'uid' => $order->uid,
      'payment_method' => $payment_method['method_id'],
      'instance_id' => $payment_method['instance_id'],
      'remote_id' => $customer_token,
      'card_type' => '',
      'card_name' => $card['name'],
      'card_number' => substr($card['number'], -4),
      'card_exp_month' => $card['expiry_month'],
      'card_exp_year' => $card['expiry_year'],
      'status' => 1,
    ));
    commerce_cardonfile_save($stored_card);
    $values['customer_token'] = $customer_token;
  }
  else {
    if ($card_token) {
      $values['card_token'] = $card_token;
    }
    else {
      $values['card'] = $card;
    }
  }
  // Charge the credit cards.
  $payment = $pin_transaction->chargeCreditCard($values);

  // If the details we submitted resulted in a successful payment.
  if ($payment->wasSuccessful()) {

    // Add our Pin token to the order for future reference.
    $transaction->remote_id = $payment->getToken();
    commerce_pin_transaction_pass($transaction, t('Pin payment was successful.'));
  }
  else {

    // Handle when our payment gateway refused our payment.
    $error_message = $payment->getErrorMessage();
    commerce_pin_transaction_fail(
      $transaction,
      t('Pin payment was unsuccessful. Error given was: !error', array('!error' => $error_message))
    );

    drupal_set_message($error_message, 'error');
    return FALSE;
  }
}


/**
 * Create a transaction record based on the values submitted by the user.
 *
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 * @param Object $order
 *   The order object the payment applies to.
 * @param array $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_pin_create_transaction($payment_method, $order, $charge) {
  // Create a new transaction entity.
  $transaction = commerce_payment_transaction_new('commerce_pin', $order->order_id);

  // Add the stable information to the object.
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];

  return $transaction;
}


/**
 * Fail a transaction and provide a message.
 *
 * @param Object $transaction
 *   The transaction object we would like to fail.
 * @param String $message
 *   The message we are giving as the reason for the failure.
 */
function commerce_pin_transaction_fail($transaction, $message) {
  $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  $transaction->message = $message;
  commerce_pin_transaction_save($transaction);
  return $transaction;
}


/**
 * Pass a transaction and provide a message.
 *
 * @param Object $transaction
 *   The transaction object we would like to fail.
 * @param String $message
 *   The message we are giving as the reason for the failure.
 */
function commerce_pin_transaction_pass($transaction, $message) {
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->message = $message;
  commerce_pin_transaction_save($transaction);
  return $transaction;
}


/**
 * Once we are done with our transaction object, save it.
 *
 * @param Object $transaction
 *   The transaction object we wish to save.
 */
function commerce_pin_transaction_save($transaction) {
  commerce_payment_transaction_save($transaction);
  return $transaction;
}
