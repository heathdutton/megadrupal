<?php
/**
 * @file
 * The Webclient Extension module.
 */

/*
 * Constant definitions.
 */

define('DRUPAL_HTTP_REQUEST_TAG', 'drupal_http_request_tag');

/*
 * Hook implementations.
 */

/**
 * Implements hook_boot().
 */
function webclient_extension_boot() {
  // Initialize the override function to NULL.
  $override_function = NULL;
  // The webclient cor extension module will auto replace the
  // drupal_http_request implementation if the runkit php extension is
  // installed.
  //
  // Check if the runkit redefine function is defined.
  if (function_exists('runkit_function_redefine')) {
    // Use the runkit redefine function.
    $override_function = 'runkit_function_redefine';
  }
  // Check if the apd override function is defined.
  elseif (function_exists('override_function')) {
    // Use the apd override function.
    $override_function = 'override_function';
  }
  else {
    // Missing the PHP runkit or apd extension, log it to the watchdog.
    watchdog('webclient_extension', 'Missing the PHP runkit or apd extension, check the PHP configuration.', array(), WATCHDOG_ERROR);
  }
  // Check if an override function was found.
  if (isset($override_function)) {
    // Check if the drupal_http_request() function is not declared.
    if (!function_exists('drupal_http_request')) {
      // Require the common.inc file which declares the drupal_http_request()
      // function.
      require_once DRUPAL_ROOT . '/includes/common.inc';
    }
    // Redifine the 'drupal_http_request' function so that it uses the webclient
    // instead of the original logic.
    call_user_func($override_function, 'drupal_http_request', '$url, array $options = array()', 'return _webclient_extension_drupal_http_request($url, $options);');
  }
}

/**
 * Implements hook_webclient_proxy_supported_request().
 */
function webclient_extension_webclient_proxy_supported_request() {
  return array(
    DRUPAL_HTTP_REQUEST_TAG => array(
      'name' => 'Drupal',
      'description' => 'Used for all requests made by the drupal_http_request() function.',
    ),
  );
}

/*
 * Private module helper functions.
 */

/**
 * Replacement implementation for drupal_http_request.
 *
 * This function should not be invoked other then by drupal_http_request.
 *
 * @param string $url
 *   A string containing a fully qualified URI.
 * @param array $options
 *   (optional) An array that can have one or more of the following elements:
 *   - headers: An array containing request headers to send as name/value pairs.
 *   - method: A string containing the request method. Defaults to 'GET'.
 *   - data: A string containing the request body, formatted as
 *     'param=value&param=value&...'. Defaults to NULL.
 *   - max_redirects: An integer representing how many times a redirect
 *     may be followed. Defaults to 3.
 *   - timeout: A float representing the maximum number of seconds the function
 *     call may take. The default is 30 seconds. If a timeout occurs, the error
 *     code is set to the HTTP_REQUEST_TIMEOUT constant.
 *   - context: Not supported by the webclient core extension implementation.
 *
 * @return object
 *   An object that can have one or more of the following components:
 *   - request: A string containing the request body that was sent.
 *   - code: An integer containing the response status code, or the error code
 *     if an error occurred.
 *   - protocol: The response protocol (e.g. HTTP/1.1 or HTTP/1.0).
 *   - status_message: The status message from the response, if a response was
 *     received.
 *   - redirect_code: If redirected, an integer containing the initial response
 *     status code.
 *   - redirect_url: If redirected, a string containing the URL of the redirect
 *     target.
 *   - error: If an error occurred, the error message. Otherwise not set.
 *   - headers: An array containing the response headers as name/value pairs.
 *     HTTP header names are case-insensitive (RFC 2616, section 4.2), so for
 *     easy access the array keys are returned in lower case.
 *   - data: A string containing the response body that was received.
 */
function _webclient_extension_drupal_http_request($url, array $options = array()) {
  // Initialize the supported schemes.
  static $supported_schemes = array(
    'feed' => TRUE,
    'http' => TRUE,
    'https' => TRUE,
  );
  // Initialize the result object.
  $result = new stdClass();
  // This part simulates the drupal_http_request() function which determines
  // the URL scheme.
  // Try to parse the URL.
  if (($uri = @parse_url($url)) != FALSE) {
    // Check if the schema is missing.
    if (!isset($uri['scheme'])) {
      // Missing schema error.
      $result->error = 'missing schema';
      $result->code = -1001;
    }
    // Check if the schema is not supported.
    elseif (!isset($supported_schemes[$uri['scheme']])) {
      // Invalid schema used in URL error.
      $result->error = "invalid schema {$uri['scheme']}";
      $result->code = -1003;
    }
  }
  else {
    // Unable to parse URL error.
    $result->error = 'unable to parse URL';
    $result->code = -1001;
  }
  // Check if the result does not contain any errors yet due to URL or scheme
  // problems. If no problem was found then the code property is not set.
  if (!isset($result->code)) {
    // Check if the context option was set which is not supported by the
    // webclient module.
    if (isset($options['context'])) {
      // Log the invalid option to the watchdog.
      watchdog('webclient', 'The option "context" is incompatible with webclient and will be ignored.');
      // Remove the context option.
      unset($options['context']);
    }
    // Support feed schema by using the http protocol instead.
    $url = strtr($url, array('feed://' => 'http://'));
    // Add the Drupal HTTP request tag.
    $options['tags'] = array(DRUPAL_HTTP_REQUEST_TAG);
    // Make drupal_curl_request return the response object.
    $options['return'] = WEBCLIENT_RESPONSE;
    // Get the server response for the given URL.
    $response = drupal_curl_request($url, $options);
    // Check if the response contains a non HTTP related error.
    if ($response->hasError() && !$response->hasHTTPError()) {
      // Check if the response contains an HTTP error.
      $result->code = -$response->getErrorCode();
      $result->error = $response->getErrorMessage();
    }
    // A valid HTTP response was received.
    else {
      // Set the raw response data.
      $result->data = $response->getRawData();
      // Get the response protocol.
      $result->protocol = $response->getProtocol();
      // Set the HTTP status code.
      $result->code = $response->getStatusCode();
      // Set the HTTP status message.
      $result->status_message = $response->getStatusMessage();
      // Check if the response contains an HTTP error.
      if ($response->hasHTTPError()) {
        // Set the HTTP status message as error.
        $result->error = $result->status_message;
      }
      // Initialize the response headers.
      $result->headers = array();
      // Iterate through the response headers.
      foreach ($response->getHeaders() as $header => $value) {
        // Convert header to lowercase which is the drupal_http_request
        // behavior and add the header.
        $result->headers[drupal_strtolower($header)] = $value;
      }
      // TODO: Need some way to retrieve the original request headers.
      $result->request = 'Request headers not yet supported by webclient.';
    }
  }
  return $result;
}
