<?php
/**
 * @file
 * Defines the installation and DB schema for the webclient_proxy module.
 */

/**
 * Implements hook_install().
 */
function webclient_proxy_install() {
  // Set variables with defaults for this module.
  variable_set('webclient_proxy_default_proxy', WEBCLIENT_PROXY_NO_PROXY);
  variable_set('webclient_proxy_host_exceptions', '');
  variable_set('webclient_proxy_supported_requests', array());
}

/**
 * Implements hook_uninstall().
 */
function webclient_proxy_uninstall() {
  // Remove all variables used by this module.
  variable_del('webclient_proxy_default_proxy');
  variable_del('webclient_proxy_host_exceptions');
  variable_del('webclient_proxy_supported_requests');
}

/**
 * Implements hook_schema().
 */
function webclient_proxy_schema() {
  $schema = array();
  // Define the WebClient proxy table.
  $schema['webclient_proxy'] = array(
    'description' => 'The base table for WebClient proxies.',
    'fields' => array(
      'pid' => array(
        'description' => 'The primary identifier for a proxy.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'machine_name' => array(
        'description' => 'The machine name of this proxy.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => 'The human readable name of this proxy.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'A description of this proxy for the admin interface.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'settings' => array(
        'description' => 'The settings for this proxy.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
    ),
    'indexes' => array('machine_name' => array('machine_name')),
    'primary key' => array('pid'),
  );
  return $schema;
}

/**
 * Add the user agent setting to existing proxies.
 *
 * @see http://drupal.org/node/1930192
 */
function webclient_proxy_update_7001(&$sandbox) {
  // Check if the progress info is not already built.
  if (!isset($sandbox['progress'])) {
    // Determine the number of changes.
    $max = db_query('SELECT COUNT(pid) FROM {webclient_proxy}')->fetchField();
    // Build the progress info.
    $sandbox['progress'] = 0;
    $sandbox['current_pid'] = 0;
    $sandbox['max'] = $max ? $max - 1 : 0;
  }
  // Get the next 10 proxy servers which need to be updated.
  $proxies = db_select('webclient_proxy', 'wp')
    ->fields('wp', array('machine_name'))
    ->condition('pid', $sandbox['current_pid'], '>')
    ->range(0, 10)
    ->orderBy('pid', 'ASC')
    ->execute();
  // Iterate through the proxies.
  foreach ($proxies as $proxy) {
    // Load the proxy by machine name.
    $proxy = webclient_proxy_get_proxy($proxy->machine_name);
    // Check if the user agent setting is missing.
    if (!isset($proxy->settings['user_agent'])) {
      // Add the user agent setting to the proxy.
      $proxy->settings['user_agent'] = '';
      // Save the changes made to the proxy.
      if (!webclient_proxy_save_proxy($proxy)) {
        // Raise exception due to failure of saving changes for the current
        // proxy.
        throw new DrupalUpdateException('Failed to save proxy "' . $proxy->machine_name . '", could not apply the user_agent setting.');
      }
    }
    // Increment the progress.
    $sandbox['progress']++;
    // Set the current proxy identifier.
    $sandbox['current_pid'] = $proxy->pid;
  }
  // Determine whether the update has finished.
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}
