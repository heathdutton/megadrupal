<?php
/**
 * @file
 * The Webclient Proxy module.
 */

/*
 * Constant definitions.
 */

define('WEBCLIENT_PROXY_NO_PROXY', '');
define('WEBCLIENT_PROXY_DEFAULT_PROXY', 'default');
define('WEBCLIENT_PROXY_DRUPAL_PROXY', 'drupal');

define('WEBCLIENT_PROXY_AUTHENTICATION_DISABLED', 0);
define('WEBCLIENT_PROXY_AUTHENTICATION_AUTO', CURLAUTH_BASIC | CURLAUTH_NTLM);

/*
 * Hook implementations.
 */

/**
 * Implements hook_menu().
 */
function webclient_proxy_menu() {
  $items = array();

  $items['admin/config/webclient/proxy'] = array(
    'title' => 'Proxy',
    'description' => 'Manage the proxy settings for WebClient requests.',
    'page callback' => 'webclient_proxy_admin_overview_page',
    'access arguments' => array('administer webclient'),
    'file' => 'webclient_proxy.admin.inc',
  );

  $items['admin/config/webclient/proxy/overview'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/webclient/proxy/configure'] = array(
    'title' => 'Configure',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webclient_proxy_admin_configure_form'),
    'access arguments' => array('administer webclient'),
    'file' => 'webclient_proxy.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/webclient/proxy/add'] = array(
    'title' => 'Add proxy',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webclient_proxy_admin_edit_proxy_form'),
    'access arguments' => array('administer webclient'),
    'file' => 'webclient_proxy.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/config/webclient/proxy/edit/%webclient_proxy'] = array(
    'title' => 'Edit proxy',
    'title callback' => 'webclient_proxy_get_proxy_name',
    'title arguments' => array(5),
    'page callback' => 'webclient_proxy_admin_edit_proxy_page',
    'page arguments' => array(5),
    'access arguments' => array('administer webclient'),
    'file' => 'webclient_proxy.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/webclient/proxy/delete/%webclient_proxy'] = array(
    'title' => 'Edit proxy',
    'title callback' => 'webclient_proxy_get_proxy_name',
    'title arguments' => array(5),
    'page callback' => 'webclient_proxy_admin_delete_proxy_page',
    'page arguments' => array(5),
    'access arguments' => array('administer webclient'),
    'file' => 'webclient_proxy.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function webclient_proxy_help($path, $arg) {
  switch ($path) {
    case 'admin/config/webclient/proxy':
      return '<p>' . t('List of available proxy settings. These proxy settings can be assigned to WebClient requests using the "Configure" tab.') . '</p>';
    case 'admin/config/webclient/proxy/add':
      return '<p>' . t('Create a new proxy setting.') . '</p>';
    case 'admin/config/webclient/proxy/edit/%':
      return '<p>' . t('Change existing proxy setting.') . '</p>';
    case 'admin/config/webclient/proxy/configure':
      return '<p>' . t('Configure which proxy settings should be used when a WebClient request is made.') . '</p>';
  }
}

/**
 * Implements hook_webclient_request_alter().
 */
function webclient_proxy_webclient_request_alter(WebRequest $request) {
  // Apply the proxy settings for the current request.
  webclient_proxy_apply_proxy_to_request($request);
}

/*
 * Menu related functions.
 */

/**
 * Load and get the proxy object by machine name.
 *
 * @param string $machine_name
 *   The machine name of the proxy.
 *
 * @return mixed
 *   A proxy object if the machine name exists, otherwise NULL.
 */
function webclient_proxy_load($machine_name) {
  return webclient_proxy_get_proxy($machine_name);
}

/**
 * Get the name of the specified proxy.
 *
 * @param object $proxy
 *   A proxy object.
 *
 * @return mixed
 *   A string containing the proxy human readable name if the proxy object is
 *   valid, otherwise NULL.
 */
function webclient_proxy_get_proxy_name($proxy) {
  if (isset($proxy) && is_object($proxy) && property_exists($proxy, 'name')) {
    // Return the filtered proxy name.
    return check_plain($proxy->name);
  }
  return NULL;
}

/*
 * Module API functions.
 */

/**
 * Apply the proxy settings to the specified request.
 *
 * @param WebRequest $request
 *   A WebRequest object.
 * @param string $machine_name
 *   The machine name of the proxy.
 */
function webclient_proxy_apply_proxy_to_request(WebRequest $request, $machine_name = NULL) {
  // Get the proxy object.
  $proxy = isset($machine_name) ? webclient_proxy_get_proxy($machine_name) : webclient_proxy_get_request_proxy($request);
  // Check if the proxy is set.
  if (isset($proxy)) {
    // Get the proxy settings.
    $url = $proxy->settings['url'];
    $user_agent = $proxy->settings['user_agent'];
    // Check if the user agent settings is not empty.
    if ($user_agent) {
      // Apply the user agent to the request.
      $request->setOption(CURLOPT_USERAGENT, $user_agent);
    }
    $authentication = $proxy->settings['authentication'];
    $username = $proxy->settings['username'];
    $password = $proxy->settings['password'];
    // Apply settings to the request.
    $request->setOption(CURLOPT_PROXY, $url);
    // Check if authentication is needed.
    if ($authentication !== WEBCLIENT_PROXY_AUTHENTICATION_DISABLED) {
      // Apply authentication mode, username and password.
      $request->setOption(CURLOPT_PROXYAUTH, $authentication);
      $request->setOption(CURLOPT_PROXYUSERPWD, "{$username}:{$password}");
    }
    // Enable HTTP proxy tunnel.
    $request->setOption(CURLOPT_HTTPPROXYTUNNEL, TRUE);
    // Add the proxy that was applied to the request.
    $request->addMetaData('proxy', $proxy);
  }
  else {
    // Set proxy URL to an empty string to disable proxy support.
    $request->setOption(CURLOPT_PROXY, '');
    // Disable HTTP proxy tunnel.
    $request->setOption(CURLOPT_HTTPPROXYTUNNEL, FALSE);
  }
}

/**
 * Get a list of supported request tags.
 *
 * @param bool $reset
 *   Indicates whether the cache needs to be rebuild.
 *
 * @return array
 *   An associative array containing the request info, keyed by the request tag.
 */
function webclient_proxy_get_supported_requests($reset = FALSE) {
  // Get the supported requests.
  $supported_requests = _webclient_proxy_get_supported_requests($reset);
  // Iterate through the supported requests.
  foreach ($supported_requests as $request_tag => &$request_info) {
    // Translate the request info.
    $request_info['name'] = t($request_info['name']);
    $request_info['description'] = t($request_info['description']);
  }
  return $supported_requests;
}

/**
 * Get a list of supported request tags.
 *
 * @param bool $reset
 *   Indicates whether the cache needs to be rebuild.
 *
 * @return array
 *   An associative array containing the request info, keyed by the request tag.
 */
function _webclient_proxy_get_supported_requests($reset = FALSE) {
  // Get the static cache for supported requests.
  $supported_requests = &drupal_static(__FUNCTION__);
  // Check if the cahce needs to be rebuild.
  if (!isset($supported_requests) || $reset) {
    // Try to retrieve the supported requests from DB cache and no rebuild was
    // requested.
    if (!$reset && ($cache = cache_get(__FUNCTION__)) !== NULL && !empty($cache->data)) {
      // Use the DB cache data as static cache data.
      $supported_requests = $cache->data;
    }
    else {
      // Initialize the static cache.
      $supported_requests = array();
      // Iterate through the implementing modules.
      foreach (module_implements('webclient_proxy_supported_request') as $module) {
        // Invoke the module hook.
        $result = module_invoke($module, 'webclient_proxy_supported_request');
        // Check if the return value is valid.
        if (!empty($result) && is_array($result)) {
          // Iterate through the module's return value.
          foreach ($result as $request_tag => $request_info) {
            // Add module information to the request info.
            $supported_requests[$request_tag] = $request_info + array(
              'description' => '',
              'module' => $module,
            );
          }
        }
      }
      // Allow other modules to alter the supported requests.
      drupal_alter('webclient_proxy_supported_request', $supported_requests);
      // Copy static cache to DB.
      cache_set(__FUNCTION__, $supported_requests);
    }
  }
  return $supported_requests;
}

/**
 * Get a list of proxies for form select usage.
 *
 * @return array
 *   An associative array containing the name, keyed by the machine name.
 */
function webclient_proxy_get_proxies_select($default = TRUE, $disable = FALSE) {
  // Check if the disable option should be added to the list.
  $proxy_select = $disable ? array(WEBCLIENT_PROXY_NO_PROXY => t('Disable')) : array();
  // Check if the default proxy should be added to the list.
  if ($default) {
    // Add default proxy.
    $proxy_select[WEBCLIENT_PROXY_DEFAULT_PROXY] = t('Default');
  }
  // Iterate through the proxies.
  foreach (webclient_proxy_get_proxies() as $proxy_machine_name => $proxy) {
    // Add the proxy to the proxy select.
    $proxy_select[$proxy_machine_name] = check_plain($proxy->name);
  }
  return $proxy_select;
}

/**
 * Get the default proxy setting.
 *
 * @return string
 *   The proxy setting if configured, otherwise WEBCLIENT_PROXY_NO_PROXY.
 */
function webclient_proxy_get_default_proxy_setting() {
  return variable_get('webclient_proxy_default_proxy', WEBCLIENT_PROXY_NO_PROXY);
}

/**
 * Get the default proxy.
 *
 * @return mixed
 *   A proxy object if the default proxy is configured, otherwise NULL.
 */
function webclient_proxy_get_default_proxy() {
  // Get the default proxy machine name.
  $proxy_machine_name = webclient_proxy_get_default_proxy_setting();
  // Get the proxy using the given machine name.
  return webclient_proxy_get_proxy($proxy_machine_name);
}

/**
 * Get the proxy setting for the specified tag.
 *
 * @param string $tag
 *   A tag name.
 *
 * @return string
 *   The proxy setting if configured, otherwise WEBCLIENT_PROXY_NO_PROXY.
 */
function webclient_proxy_get_supported_request_setting($tag) {
  // Get the supported request settings.
  $settings = webclient_proxy_get_supported_request_settings();
  // Get the setting for the given tag.
  return isset($settings[$tag]) ? $settings[$tag] : WEBCLIENT_PROXY_NO_PROXY;
}

/**
 * Get the proxy settings for all request tags.
 *
 * @return array
 *   An associative array containing the proxy setting, keyed by the request
 *   tag.
 */
function webclient_proxy_get_supported_request_settings() {
  $settings = array();
  // Get the supported requests.
  $supported_requests = webclient_proxy_get_supported_requests();
  // Get the supported request settings.
  $supported_request_settings = variable_get('webclient_proxy_supported_requests', array());
  // Iterate through the supported requests.
  foreach ($supported_requests as $request_tag => $request_info) {
    // Check if the setting is available.
    if (isset($supported_request_settings[$request_tag])) {
      // Add current setting.
      $settings[$request_tag] = $supported_request_settings[$request_tag];
    }
    else {
      // Use default proxy.
      $settings[$request_tag] = array('proxy' => WEBCLIENT_PROXY_DEFAULT_PROXY);
    }
  }
  return $settings;
}

/**
 * Get the proxy for the specified tag.
 *
 * @param string $tag
 *   A request tag.
 *
 * @return mixed
 *   A proxy object if configured to use a proxy, otherwise NULL.
 */
function webclient_proxy_get_proxy_by_tag($tag) {
  // Get the proxies using the request tags.
  $proxies = webclient_proxy_get_proxies_by_tags(array($tag));
  // Get the first proxy from the array.
  return array_shift($proxies);
}

/**
 * Get the proxies by the specified tags.
 *
 * @param array $tags
 *   An array of tags.
 *
 * @return array
 *   An associative array containing the proxy objects, keyed by a tag.
 *   Unsupported tags are not included in the result. Tags that have the proxy
 *   disabled will contain a NULL value.
 */
function webclient_proxy_get_proxies_by_tags(array $tags) {
  $proxies = array();
  // Get the supported request settings.
  $supported_request_settings = webclient_proxy_get_supported_request_settings();
  // Compute the tags which are known to be supported.
  $tags = array_intersect($tags, array_keys($supported_request_settings));
  // Check if the tags array is not empty.
  if (!empty($tags)) {
    // Get the default proxy.
    $default_proxy = webclient_proxy_get_default_proxy();
    // Iterate through all the tag which are registered.
    foreach ($tags as $tag) {
      // Get the proxy configuration for the current tag.
      $proxy_machine_name = isset($supported_request_settings[$tag]) ? $supported_request_settings[$tag]['proxy'] : WEBCLIENT_PROXY_DEFAULT_PROXY;
      // Get the proxy object using the proxy machine name.
      $proxies[$tag] = ($proxy_machine_name === WEBCLIENT_PROXY_DEFAULT_PROXY) ? $default_proxy : webclient_proxy_get_proxy($proxy_machine_name);
      }
    }
  return $proxies;
}

/**
 * Get the proxy for the specified request.
 *
 * @param WebRequest $request
 *   A WebRequest object.
 *
 * @return mixed
 *   A proxy object if configured to use a proxy, otherwise NULL.
 */
function webclient_proxy_get_request_proxy(WebRequest $request) {
  $proxy = NULL;
  // Check if the request requires a proxy.
  if (webclient_proxy_use_proxy($request->getURL())) {
    // Get the proxies using the request tags.
    $proxies = webclient_proxy_get_proxies_by_tags($request->getTags());
    // Check if the proxies array is not empty.
    if (count($proxies) > 0) {
      // Get the first proxy linked to the tags.
      $proxy = reset($proxies);
    }
    else {
      // Default fallback: use default proxy.
      $proxy = webclient_proxy_get_default_proxy();
    }
  }
  return $proxy;
}

/**
 * Get a list of proxies.
 *
 * @param bool $reset
 *   Indicates whether the cache needs to be rebuild.
 *
 * @return array
 *   An associative array containing the proxy objects, keyed by the machine
 *   name.
 */
function webclient_proxy_get_proxies($reset = FALSE) {
  $proxies = &drupal_static(__FUNCTION__);
  // Check if the static cache is not already initialized or if a rebuild is
  // requested.
  if (!isset($proxies) || $reset) {
    // Initialize the static cache and fill with proxy objects.
    $proxies = db_select('webclient_proxy', 'proxy')
        ->fields('proxy')
        ->execute()
        ->fetchAllAssoc('machine_name');
    // Iterate through the proxies.
    foreach ($proxies as $proxy_machine_name => &$proxy) {
      // Unserialize the proxy settings.
      $proxy->settings = unserialize($proxy->settings);
    }
    // Check if Drupal has been configured to use a proxy.
    if (($drupal_proxy_server = variable_get('proxy_server', ''))) {
      // Get the default proxy object.
      $drupal_proxy = webclient_proxy_default_proxy(array(
        'name' => 'Drupal',
        'machine_name' => WEBCLIENT_PROXY_DRUPAL_PROXY,
        'description' => 'Proxy settings as defined by the Drupal settings file.',
        'settings' => array(
          'url' => 'http://' . $drupal_proxy_server . ':' . variable_get('proxy_port', 8080),
          'user_agent' => variable_get('proxy_user_agent', ''),
          'authentication' => WEBCLIENT_PROXY_AUTHENTICATION_DISABLED,
          'username' => '',
          'password' => '',
        ),
      ));
      // Check if basic authentication is required. Note proxy settings of
      // Drupal only support basic authentication.
      if (($drupal_proxy_username = variable_get('proxy_username', ''))) {
        // Configure the basic authentication.
        $drupal_proxy['settings']['authentication'] = CURLAUTH_BASIC;
        $drupal_proxy['settings']['username'] = $drupal_proxy_username;
        $drupal_proxy['settings']['password'] = variable_get('proxy_password', '');
      }
      // Prepend the Drupal proxy to the proxies list.
      $proxies = array(WEBCLIENT_PROXY_DRUPAL_PROXY => (object) $drupal_proxy) + $proxies;
    }
  }
  return $proxies;
}

/**
 * Get the proxy by machine name.
 *
 * @param string $machine_name
 *   The machine name of the proxy.
 * @param bool $reset
 *   Indicates whether the cache needs to be rebuild.
 *
 * @return mixed
 *   A proxy object if the machine name exists, otherwise NULL.
 */
function webclient_proxy_get_proxy($machine_name, $reset = FALSE) {
  // Get the proxies.
  $proxies = webclient_proxy_get_proxies($reset);
  // Return the proxy for the given machine name.
  return isset($proxies[$machine_name]) ? $proxies[$machine_name] : NULL;
}

/**
 * Get a value indicating whether a machine name exists.
 *
 * @param string $machine_name
 *   The machine name of a proxy.
 * @param boolean $reset
 *   Indicates whether the cache needs to be rebuild.
 *
 * @return boolean
 *   TRUE if the machine name exists, otherwise FALSE.
 */
function webclient_proxy_machine_name_exists($machine_name, $reset = FALSE) {
  // Determine whether the machine name has a special meaning.
  if (!($exists = in_array($machine_name, array(WEBCLIENT_PROXY_DEFAULT_PROXY, WEBCLIENT_PROXY_DRUPAL_PROXY)))) {
    // Determine whether the machine name already exists in the database.
    $exists = webclient_proxy_get_proxy($machine_name, $reset) !== NULL;
  }
  return $exists;
}

/**
 * Save the proxy object.
 *
 * @param object $proxy
 *   A proxy object.
 *
 * @return mixed
 *   If the record insert or update failed, returns FALSE. If it succeeded,
 *   returns SAVED_NEW or SAVED_UPDATED, depending on the operation performed.
 */
function webclient_proxy_save_proxy($proxy) {
  // Initialize the return value.
  $write_status = FALSE;
  // Check if the proxy argument is valid.
  if (isset($proxy) && !in_array($proxy->machine_name, array(WEBCLIENT_PROXY_DEFAULT_PROXY, WEBCLIENT_PROXY_DRUPAL_PROXY))) {
    // Get the primary key field which is needed for the update statement.
    $pk = isset($proxy->pid) ? array('pid') : array();
    // Make sure the authentication setting is a numeric value.
    if (isset($proxy->settings['authentication'])) {
      // Cast the authentication value to an integer.
      $proxy->settings['authentication'] = (int) $proxy->settings['authentication'];
    }
    // Save the proxy object.
    $write_status = drupal_write_record('webclient_proxy', $proxy, $pk);
    // Check if the write operation was successful.
    if ($write_status !== FALSE) {
      // Get the proxy static cache.
      $proxies = &drupal_static('webclient_proxy_get_proxies');
      // Update the static cache with the new proxy object.
      $proxies[$proxy->machine_name] = $proxy;
    }
  }
  return $write_status;
}

/**
 * Delete the proxy object.
 *
 * @param object $proxy
 *   A proxy object.
 *
 * @return mixed
 *   If the record delete failed returns FALSE. If it succeeded, returns
 *   SAVED_DELETED.
 */
function webclient_proxy_delete_proxy($proxy) {
  // Initialize the return value.
  $delete_status = FALSE;
  // Check if the proxy argument is valid.
  if (isset($proxy) && !in_array($proxy->machine_name, array(WEBCLIENT_PROXY_DEFAULT_PROXY, WEBCLIENT_PROXY_DRUPAL_PROXY))) {
    // Remove the proxy object by machine name.
    $affected_rows = db_delete('webclient_proxy')
      ->condition('webclient_proxy.machine_name', $proxy->machine_name, '=')
      ->execute();
    // Check if the delete modified at least one record.
    if ($affected_rows > 0) {
      // Change the return value to SAVED_DELETED;
      $delete_status = SAVED_DELETED;
      // Get the proxy static cache.
      $proxies = &drupal_static('webclient_proxy_get_proxies');
      // Remove the proxy from the static cache.
      unset($proxies[$proxy->machine_name]);
    }
  }
  return $delete_status;
}

/**
 * Get the default proxy structure.
 *
 * @param array $proxy
 *   A proxy array structure which overrides the defaults.
 *
 * @return array
 *   An associative array containing the default proxy structure.
 */
function webclient_proxy_default_proxy(array $proxy = array()) {
  // Initialize the proxy defaults.
  static $defaults = array(
    'name' => '',
    'machine_name' => '',
    'description' => '',
    'settings' => array(
      'url' => 'http://localhost',
      'user_agent' => '',
      'authentication' => WEBCLIENT_PROXY_AUTHENTICATION_DISABLED,
      'username' => '',
      'password' => '',
    ),
  );
  // Merge proxy with defaults.
  return $proxy + $defaults;
}

/**
 * Get a value indicating whether the URL requires a proxy.
 *
 * @param string $url
 *   A absolute URL.
 *
 * @return boolean
 *   TRUE if the URL requires a proxy, otherwise FALSE.
 */
function webclient_proxy_use_proxy($url) {
  $use_proxy = FALSE;
  // Get the host from the URL.
  if (($host = parse_url($url, PHP_URL_HOST))) {
    // Static cache the hosts regex and native host exclusion support.
    $cache = &drupal_static(__FUNCTION__, array('regex' => NULL, 'native' => NULL));
    // Check if the hosts regular expression needs to be build.
    if (!isset($cache['regex'])) {
      // Build the replacement patterns.
      $to_replace = array('/(\r\n?|\n)/', '/\\\\\*/');
      // Build the replacements.
      $replacements = array('|', '.*');
      // Quote the hosts regular expression.
      $hosts_regex_quoted = preg_quote(variable_get('webclient_proxy_host_exceptions', ''), '/');
      // Build the reqular hosts expression.
      $cache['regex'] = '/^(' . preg_replace($to_replace, $replacements, $hosts_regex_quoted) . ')$/';
    }
    // Check if the native host exclusion support need to be checked.
    if (!isset($cache['native'])) {
      // Determine whether native host exclusion is supported.
      $cache['native'] = function_exists('_drupal_http_use_proxy');
    }
    // Determine whether the host does requires a proxy.
    if (($use_proxy = !((bool) preg_match($cache['regex'], $host))) && $cache['native']) {
      // Determine whether the host does not require a proxy according to
      // Drupal settings.
      $use_proxy = _drupal_http_use_proxy($host);
    }
  }
  return $use_proxy;
}
