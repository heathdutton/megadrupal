<?php
/**
 * @file
 * The Webclient module.
 */

/*
 * Constant definitions.
 */

/**
 * WebClient request type.
 */
define('WEBCLIENT_REQUEST', 0);
/**
 * WebClient response type.
 */
define('WEBCLIENT_RESPONSE', 1);
/**
 * WebClient raw response type.
 */
define('WEBCLIENT_RESPONSE_RAW', 2);
/**
 * WebClient formatted response type.
 */
define('WEBCLIENT_RESPONSE_FORMATTED', 3);
/**
 * WebClient Drupal HTTP API integration tag.
 */
define('WEBCLIENT_DRUPAL_HTTP_REQUEST_TAG', 'drupal_http_request');
/**
 * Name of the WebClient Drupal HTTP API integration function.
 */
define('WEBCLIENT_DRUPAL_HTTP_REQUEST_FUNCTION', '_webclient_drupal_http_request');

/*
 * Hook implementations.
 */

/**
 * Implements hook_boot().
 */
function webclient_boot() {
  // Check if the drupal_http_request override needs to be reapplied.
  if (variable_get('webclient_drupal_http_request_override') && variable_get('drupal_http_request_function', FALSE) != WEBCLIENT_DRUPAL_HTTP_REQUEST_FUNCTION) {
    // Override the drupal_http_request() functionality.
    variable_set('drupal_http_request_function', WEBCLIENT_DRUPAL_HTTP_REQUEST_FUNCTION);
  }
}

/**
 * Implements hook_menu().
 */
function webclient_menu() {
  $items = array();

  $items['admin/config/webclient'] = array(
    'title' => 'Webclient',
    'description' => 'Configure webclient components.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/webclient/general'] = array(
    'title' => 'General',
    'description' => 'Manage general configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webclient_admin_form'),
    'access arguments' => array('administer webclient'),
    'file' => 'webclient.admin.inc',
    'weight' => -10,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function webclient_permission() {
  return array(
    'administer webclient' => array(
      'title' => 'Administer WebClient',
      'description' => 'Administer Webclient configuration.',
    ),
  );
}

/**
 * Implements hook_help().
 */
function webclient_help($path, $arg) {
  switch ($path) {
    case 'admin/config/webclient/general':
      return '<p>' . t('Configure the behaviour of WebClient.') . '</p>';
  }
}

/**
 * Implements hook_webclient_proxy_supported_request().
 */
function webclient_webclient_proxy_supported_request() {
  $supported_requests = array();
  // Check if drupal_http_request() override is supported.
  if (version_compare(VERSION, '7.22', 'ge')) {
    // Add the Drupal HTTP request tag as supported request.
    $supported_requests[WEBCLIENT_DRUPAL_HTTP_REQUEST_TAG] = array(
      'name' => 'Drupal',
      'description' => 'Used for all requests made using the Drupal HTTP API. The WebClient integration must be enabled.',
    );
  }
  return $supported_requests;
}

/*
 * Module API functions.
 */

/**
 * Create new request object for the specified url.
 *
 * @param string $url
 *   A string containing the fully qualified URI.
 *
 * @return WebRequest
 *   An instance of WebRequest.
 *
 * @throws InvalidArgumentException
 *   If the URL argument is not a fully qualified URI.
 */
function webclient_create_request($url) {
  // Get the request class for the current URL.
  $request_class = webclient_discover_request_class($url);
  // Create new instance of the request class.
  return new $request_class($url);
}

/**
 * Perform an HTTP request using WebClient.
 *
 * @param string $url
 *   A string containing a fully qualified URI.
 * @param array $options
 *   (optional) An array that can have one or more of the following elements:
 *   - headers: An array containing request headers to send as name/value pairs.
 *   - method: A string containing the request method. Defaults to 'GET'.
 *   - data: A string containing the request body, formatted as
 *     'param=value&param=value&...'. Defaults to NULL.
 *   - max_redirects: An integer representing how many times a redirect
 *     may be followed. Defaults to 3.
 *   - timeout: A float representing the maximum number of seconds the function
 *     call may take. The default is 30 seconds.
 *   - tags: An array containing the tags to link to the request so that other
 *     module can alter the request using the tags as identification.
 *   - return: Determines what the return value of the function will be, valid
 *     values are:
 *        * WEBCLIENT_REQUEST: Return the request object.
 *        * WEBCLIENT_RESPONSE: Return the response object.
 *        * WEBCLIENT_RESPONSE_RAW: Return the raw response data.
 *        * WEBCLIENT_RESPONSE_FORMATTED: Return the formatted response
 *          data.
 *
 * @return mixed
 *   Mixed value depending on the return options. If no return option is
 *   specified then the request object is returned.
 *
 * @throws InvalidArgumentException
 *  If the request header options contain an invalid header or value or if the
 *  URL is not a fully qualified URI.
 *
 * @deprecated since 1.4
 */
function webclient_request($url, array $options = array()) {
  // Create a new request for the given URL.
  $request = webclient_create_request($url);
  // Get the request header option.
  $header_options = isset($options['headers']) ? $options['headers'] : array();
  // Get the request headers.
  $request_headers = $request->getHeaders();
  // Iterate through the headers.
  foreach ($header_options as $header => $value) {
    // Add the header to the request headers.
    $request_headers->add($header, $value);
  }
  // Set the request method.
  $method = isset($options['method']) ? $options['method'] : 'GET';
  $request->setOption(CURLOPT_CUSTOMREQUEST, $method);
  // Set the request data.
  $data = isset($options['data']) ? $options['data'] : NULL;
  $request->setOption(CURLOPT_POSTFIELDS, $data);
  // Set the maximum number of redirect that may occur during the request.
  $max_redirects = isset($options['max_redirects']) ? $options['max_redirects'] : 3;
  $follow_location = (bool) $max_redirects;
  $request->setOption(CURLOPT_FOLLOWLOCATION, $follow_location);
  $request->setOption(CURLOPT_MAXREDIRS, $max_redirects);
  // Set the connection timeout (in seconds).
  $timeout = isset($options['timeout']) ? $options['timeout'] : 30;
  $request->setOption(CURLOPT_CONNECTTIMEOUT, $timeout);
  // Add the tags to the request.
  $tags = isset($options['tags']) ? $options['tags'] : array();
  // Iterate through the tags.
  foreach ($tags as $tag) {
    // Add the tag to the request object.
    $request->addTag($tag);
  }
  // Get return option value.
  $return = isset($options['return']) ? $options['return'] : WEBCLIENT_REQUEST;
  // Evaluate the return option.
  switch ($return) {
    case WEBCLIENT_RESPONSE_FORMATTED:
      return $request->getFormattedResponse();
    case WEBCLIENT_RESPONSE_RAW:
      return $request->getRawResponse();
    case WEBCLIENT_RESPONSE:
      return $request->getResponse();
    default:
      return $request;
  }
}

/**
 * Get the request class for the specified URL.
 *
 * @param string $url
 *   A string containing the fully qualified URL.
 *
 * @return string
 *   The class name for the request
 */
function webclient_discover_request_class($url) {
  // Get the request classes from the static cache.
  $request_classes = &drupal_static(__FUNCTION__, array());
  // Check if the URL is not present in the request classes array.
  if (!isset($request_classes[$url])) {
    // Initialize the request class variable.
    $request_class = NULL;
    // Get a list of module implementing the discover hook.
    $modules = module_implements('webclient_discover_request_class');
    // Get the implementing module count.
    $module_count = count($modules);
    // Initialize indexer.
    $i = 0;
    // Iterate through the modules until end is reached or a request class was
    // found.
    while ($i < $module_count && !isset($request_class)) {
      // Invoke the hook for the current module.
      $request_class = module_invoke($modules[$i], 'webclient_discover_request_class', $url);
      // Increment indexer.
      $i++;
    }
    // Check if the request class is missing or has an invalid inheritance.
    if (!isset($request_class) || !is_subclass_of($request_class, 'WebRequest')) {
      // Use the default request class.
      $request_class = 'WebRequest';
    }
    // Add the request class to the static cache for the current URL.
    $request_classes[$url] = $request_class;
  }
  // Return the request class for the current URL.
  return $request_classes[$url];
}

/**
 * Get the formatted response data for the specified response data.
 *
 * @param string $mime_type
 *   The MIME type of the response data.
 * @param string $data
 *   The response data.
 *
 * @return mixed
 *   Mixed value depending on the MIME type.
 */
function webclient_format_response($mime_type, $data) {
  // Get the response formatter for the given MIME type.
  $formatter = webclient_get_response_formatter($mime_type);
  // Return the formatted response data.
  return $formatter->format($mime_type, $data);
}

/**
 * Get the response formatter for the specified MIME type.
 *
 * @param string $mime_type
 *   A MIME type string.
 *
 * @return WebResponseFormatter
 *   An object implementing the WebResponseFormatter class if the MIME type was
 *   found, otherwise NULL.
 */
function webclient_get_response_formatter($mime_type) {
  // Get the static cache for already created response formatters.
  $formatter_instances = &drupal_static(__FUNCTION__, array());
  // Check if the formatter is not already created.
  if (!isset($formatter_instances[$mime_type])) {
    // Get the response formatter info.
    if (($formatter_info = webclient_get_response_formatter_info($mime_type)) != NULL) {
      // Get the formatter class.
      $formatter_class = $formatter_info['class'];
    }
    // Check if the formatter class is not set or does not inherit from
    // WebResponseFormatter.
    if (!isset($formatter_class) || !is_subclass_of($formatter_class, 'WebResponseFormatter')) {
      // Use the default response formatter class.
      $formatter_class = 'WebResponseFormatter';
    }
    // Create and cache the formatter instance.
    $formatter_instances[$mime_type] = new $formatter_class();
  }
  // Return a copy of the formatter instance.
  return clone($formatter_instances[$mime_type]);
}

/**
 * Get the response formatter info for the specified MIME type.
 *
 * @param string $mime_type
 *   A MIME type string.
 * @param bool $reset
 *   Indicates whether the formatters info cache should be rebuild.
 *
 * @return array
 *   An associative array containing the formatter info if MIME type was found,
 *   otherwise NULL.
 */
function webclient_get_response_formatter_info($mime_type, $reset = FALSE) {
  // Get the response formatters information.
  $formatters_info = webclient_get_response_formatters_info($reset);
  // Return the formatter corresponding to the given MIME type.
  return isset($formatters_info[$mime_type]) ? $formatters_info[$mime_type] : NULL;
}

/**
 * Get a list of response formatters info.
 *
 * @param bool $reset
 *   Indicates whether the formatters info cache should be rebuild.
 *
 * @return array
 *   An associative array containing the response formatters info, keyed by the
 *   MIME type.
 */
function webclient_get_response_formatters_info($reset = FALSE) {
  // Try to retrieve the response formatters info from the static cache.
  $formatters_info = &drupal_static(__FUNCTION__);
  // Check if the cache needs to be rebuild.
  if (!isset($formatters_info) || $reset) {
    // Try to retrieve the formatters info from DB cache if no rebuild is
    // requested.
    if (!$reset && ($cache = cache_get(__FUNCTION__)) !== NULL && !empty($cache->data)) {
      // Get the formatters from DB cache.
      $formatters_info = $cache->data;
    }
    else {
      // Initialize the formatters info static cache.
      $formatters_info = array();
      // Iterate through the modules that implement the
      // 'webclient_response_formatter'-hook.
      foreach (module_implements('webclient_response_formatter_info') as $module) {
        // Invoke the hook for the current module.
        $result = module_invoke($module, 'webclient_response_formatter_info');
        // Check if the result is valid.
        if (!empty($result) && is_array($result)) {
          // Iterate through the formatters info declared by the current module.
          foreach ($result as $mime_type => $formatter_info) {
            // Add the formatter and build some default values.
            $formatters_info[$mime_type] = $formatter_info + array(
              'name' => 'Unknown response formatter',
              'description' => '',
              'class' => 'WebResponseFormatter',
              'module' => $module,
            );
          }
        }
      }
      // Allow other modules to alter the response formatters info.
      drupal_alter('webclient_response_formatter_info', $formatters_info);
      // Save the static cache to the DB cache.
      cache_set(__FUNCTION__, $formatters_info);
    }
  }
  return $formatters_info;
}

/*
 * Private helper functions.
 */

/**
 * Replacement implementation for drupal_http_request.
 *
 * This function should not be invoked other then by drupal_http_request.
 *
 * @param string $url
 *   A string containing a fully qualified URI.
 * @param array $options
 *   (optional) An array that can have one or more of the following elements:
 *   - headers: An array containing request headers to send as name/value pairs.
 *   - method: A string containing the request method. Defaults to 'GET'.
 *   - data: A string containing the request body, formatted as
 *     'param=value&param=value&...'. Defaults to NULL.
 *   - max_redirects: An integer representing how many times a redirect
 *     may be followed. Defaults to 3.
 *   - timeout: A float representing the maximum number of seconds the function
 *     call may take. The default is 30 seconds. If a timeout occurs, the error
 *     code is set to the HTTP_REQUEST_TIMEOUT constant.
 *   - context: Not supported by the webclient core extension implementation.
 *
 * @return object
 *   An object that can have one or more of the following components:
 *   - request: A string containing the request body that was sent.
 *   - code: An integer containing the response status code, or the error code
 *     if an error occurred.
 *   - protocol: The response protocol (e.g. HTTP/1.1 or HTTP/1.0).
 *   - status_message: The status message from the response, if a response was
 *     received.
 *   - redirect_code: If redirected, an integer containing the initial response
 *     status code.
 *   - redirect_url: If redirected, a string containing the URL of the redirect
 *     target.
 *   - error: If an error occurred, the error message. Otherwise not set.
 *   - headers: An array containing the response headers as name/value pairs.
 *     HTTP header names are case-insensitive (RFC 2616, section 4.2), so for
 *     easy access the array keys are returned in lower case.
 *   - data: A string containing the response body that was received.
 */
function _webclient_drupal_http_request($url, array $options = array()) {
  // Initialize the supported schemes.
  static $supported_schemes = array(
    'feed' => TRUE,
    'http' => TRUE,
    'https' => TRUE,
  );
  // Initialize the result object.
  $result = new stdClass();
  // This part simulates the drupal_http_request() function which determines
  // the URL scheme.
  // Try to parse the URL.
  if (($uri = @parse_url($url)) != FALSE) {
    // Check if the schema is missing.
    if (!isset($uri['scheme'])) {
      // Missing schema error.
      $result->error = 'missing schema';
      $result->code = -1001;
    }
    // Check if the schema is not supported.
    elseif (!isset($supported_schemes[$uri['scheme']])) {
      // Invalid schema used in URL error.
      $result->error = "invalid schema {$uri['scheme']}";
      $result->code = -1003;
    }
  }
  else {
    // Unable to parse URL error.
    $result->error = 'unable to parse URL';
    $result->code = -1001;
  }
  // Check if the result does not contain any errors yet due to URL or scheme
  // problems. If no problem was found then the code property is not set.
  if (!isset($result->code)) {
    // Check if the context option was set which is not supported by the
    // webclient module.
    if (isset($options['context'])) {
      // Log the invalid option to the watchdog.
      watchdog('webclient', 'The option "context" is incompatible with webclient and will be ignored.');
      // Remove the context option.
      unset($options['context']);
    }
    // Support feed schema by using the http protocol instead.
    $url = strtr($url, array('feed://' => 'http://'));
    // Add the Drupal HTTP request tag.
    $options['tags'] = array(WEBCLIENT_DRUPAL_HTTP_REQUEST_TAG);
    // Make drupal_curl_request returns the response object.
    $options['return'] = WEBCLIENT_RESPONSE;
    // Get the server response for the given URL.
    $response = drupal_curl_request($url, $options);
    // Check if the response contains a non HTTP related error.
    if ($response->hasError() && !$response->hasHTTPError()) {
      // Check if the response contains an HTTP error.
      $result->code = -$response->getErrorCode();
      $result->error = $response->getErrorMessage();
    }
    // A valid HTTP response was received.
    else {
      // Set the raw response data.
      $result->data = $response->getRawData();
      // Get the response protocol.
      $result->protocol = $response->getProtocol();
      // Set the HTTP status code.
      $result->code = $response->getStatusCode();
      // Set the HTTP status message.
      $result->status_message = $response->getStatusMessage();
      // Check if the response contains an HTTP error.
      if ($response->hasHTTPError()) {
        // Set the HTTP status message as error.
        $result->error = $result->status_message;
      }
      // Initialize the response headers.
      $result->headers = array();
      // Iterate through the response headers.
      foreach ($response->getHeaders() as $header => $value) {
        // Convert header to lowercase which is the drupal_http_request
        // behavior and add the header.
        $result->headers[drupal_strtolower($header)] = $value;
      }
      // TODO: Need some way to retrieve the original request headers.
      $result->request = 'Request headers not yet supported by WebClient.';
    }
  }
  return $result;
}

/*
 * Deprecated functions and constants.
 */

/**
 * Use WEBCLIENT_REQUEST instead.
 *
 * @deprecated since 1.4
 */
define('DRUPAL_CURL_RETURN_REQUEST', WEBCLIENT_REQUEST);
/**
 * Use WEBCLIENT_RESPONSE instead.
 *
 * @deprecated since 1.4
 */
define('DRUPAL_CURL_RETURN_RESPONSE', WEBCLIENT_RESPONSE);
/**
 * Use WEBCLIENT_RESPONSE_RAW instead.
 *
 * @deprecated since 1.4
 */
define('DRUPAL_CURL_RETURN_RAW_RESPONSE', WEBCLIENT_RESPONSE_RAW);
/**
 * Use WEBCLIENT_RESPONSE_FORMATTED instead.
 *
 * @deprecated since 1.4
 */
define('DRUPAL_CURL_RETURN_FORMATTED_RESPONSE', WEBCLIENT_RESPONSE_FORMATTED);

/**
 * Perform an HTTP request using the cURL library.
 *
 * @param string $url
 *   A string containing a fully qualified URI.
 * @param array $options
 *   (optional) An array that can have one or more of the following elements:
 *   - headers: An array containing request headers to send as name/value pairs.
 *   - method: A string containing the request method. Defaults to 'GET'.
 *   - data: A string containing the request body, formatted as
 *     'param=value&param=value&...'. Defaults to NULL.
 *   - max_redirects: An integer representing how many times a redirect
 *     may be followed. Defaults to 3.
 *   - timeout: A float representing the maximum number of seconds the function
 *     call may take. The default is 30 seconds.
 *   - tags: An array containing the tags to link to the request so that other
 *     module can alter the request using the tags as identification.
 *   - return: Determines what the return value of the function will be, valid
 *     values are:
 *        * WEBCLIENT_REQUEST: Return the request object.
 *        * WEBCLIENT_RESPONSE: Return the response object.
 *        * WEBCLIENT_RESPONSE_RAW: Return the raw response data.
 *        * WEBCLIENT_RESPONSE_FORMATTED: Return the formatted response
 *          data.
 *
 * @return mixed
 *   Mixed value depending on the return options. If no return option is
 *   specified then the request object is returned.
 *
 * @throws InvalidArgumentException
 *  If the request header options contain an invalid header or value or if the
 *  URL is not a fully qualified URI.
 *
 * @deprecated since 1.4
 */
function drupal_curl_request($url, array $options = array()) {
  return webclient_request($url, $options);
}
