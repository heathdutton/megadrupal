<?php
/**
 * @file
 * Contains core functions for the Facebook Photo Sync module.
 */

/**
 * Include additional files.
 */
foreach (module_list() as $module) {
  if (file_exists($file = dirname(__FILE__) . "/includes/{$module}.inc")) {
    require_once $file;
  }
}

/**
 * Implements hook_theme().
 */
function fbphotosync_theme() {
  $items = array();

  $items['fbphotosync_authenticated_user'] = array(
    'variables' => array(
      'account' => NULL,
    ),
    'template' => 'templates/fbphotosync_authenticated_user',
  );

  return $items;
}

/**
 * Implements hook_menu().
 */
function fbphotosync_menu() {
  $items = array();

  $items['admin/config/services/fbphotosync'] = array(
    'title' => 'Facebook Photo Sync',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fbphotosync_admin'),
    'access arguments' => array('administer fbphotosync module'),
    'file' => 'fbphotosync.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/services/fbphotosync/reset'] = array(
    'title' => 'Facebook Photo Sync',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fbphotosync_admin', TRUE),
    'access arguments' => array('administer fbphotosync module'),
    'file' => 'fbphotosync.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 *
 */
function fbphotosync_facebook_sdk($reset = FALSE) {
  if (variable_get('fbphotosync_library', NULL) == NULL || !include_once libraries_get_path(variable_get('fbphotosync_library', '')) . '/src/facebook.php') {
    foreach (libraries_get_libraries() as $library => $path) {
      if (strstr($library, 'facebook-php-sdk') == 0) {
        variable_set('fbphotosync_library', $library);
        include_once "{$path}/src/facebook.php";
        return fbphotosync_facebook_sdk_initialize($reset);
      }
    }
    return FALSE;
  }
  return fbphotosync_facebook_sdk_initialize($reset);
}

/**
 *
 */
function fbphotosync_facebook_sdk_initialize($reset = FALSE) {
  static $facebook = NULL;

  if (!isset($facebook) || $reset) {
    $settings = variable_get('fbphotosync_settings', array());
    $facebook = new Facebook(array(
      'appId'  => $settings['app_id'],
      'secret' => $settings['app_secret'],
    ));
  }

  return $facebook;
}

/**
 *
 */
function fbphotosync_facebook_sdk_is_authenticated($facebook, $access_token) {
  $facebook->setAccessToken($access_token);
  return $facebook->getUser();
}

/**
 *
 */
function fbphotosync_facebook_sdk_get() {
  $args = func_get_args();
  $facebook = array_shift($args);

  $user = $facebook->getUser();
  $cid = "fbphotosync:{$user}:" . md5(serialize($args));
  $data = cache_get($cid);
  if (!empty($data->data)) {
    $data = $data->data;
  }
  else {
    $data = call_user_func_array(array($facebook, 'api'), $args);
    cache_set($cid, $data, 'cache', CACHE_TEMPORARY);
  }

  return $data;
}

/**
 *
 */
function fbphotosync_account_ids($facebook) {
  $ids = &drupal_static(__FUNCTION__);

  if (empty($ids)) {
    // Standard user account.
    $account = fbphotosync_facebook_sdk_get($facebook, '/me');
    $ids["account:{$account['id']}"] = $account['name'];

    // Pages and Applications.
    $accounts = fbphotosync_facebook_sdk_get($facebook, '/me/accounts');
    foreach ($accounts['data'] as $account) {
      switch ($account['category']) {
        case 'Application':
          $ids["application:{$account['id']}"] = "Application: {$account['name']}";
          break;

        default:
          $ids["page:{$account['id']}"] = "Page: {$account['name']}";
      }
    }
  }

  return $ids;
}

/**
 *
 */
function fbphotosync_album_ids($facebook, $account_id) {
  $albums = array();

  $response = fbphotosync_facebook_sdk_get($facebook, "/{$account_id}/albums");
  foreach ($response['data'] as $album) {
    $albums[$album['id']] = "{$album['name']} ({$album['id']})";
  }

  return $albums;
}
