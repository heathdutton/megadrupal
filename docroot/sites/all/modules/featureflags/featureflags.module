<?php

/**
 * @file
 * Main feature flags module
 */

define('RULE_ROLEID', 0);
define('RULE_USERID', 1);
define('RULE_PERCENTAGE', 2);

/**
 * Register permission handler
 */
function featureflags_permission() {
  return array(
    'administer_featureflags' => array(
      'title' => t('Administer feature flags'),
    )
  );
}

/**
 * Defines menu items
 */
function featureflags_menu() {
  $items['admin/config/development/featureflags'] = array(
    'title' => 'Feature Flags',
    'page callback' => 'featureflags_admin_overview',
    'access arguments' => array('administer_featureflags'),
    'file' => 'featureflags.admin.inc',
  );

  $items['admin/config/development/featureflags/add'] = array(
    'title' => 'Add Feature Flag',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('featureflags_admin_editflag'),
    'type' => MENU_LOCAL_ACTION,
    'access arguments' => array('administer_featureflags'),
    'file' => 'featureflags.admin.inc',
  );

  $items['admin/config/development/featureflags/edit/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('featureflags_admin_editflag', 5),
    'access arguments' => array('administer_featureflags'),
    'file' => 'featureflags.admin.inc',
  );

  $items['admin/config/development/featureflags/delete/%'] = array(
    'title' => 'Delete Feature Flag',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('featureflags_admin_deleteflag', 5),
    'access arguments' => array('administer_featureflags'),
    'file' => 'featureflags.admin.inc',
  );

  $items['user/autocomplete/multiple'] = array(
    'page callback' => 'featureflags_autocomplete_multiple',
    'access arguments' => array('administer_featureflags'),
    'type' => MENU_CALLBACK,
    'file' => 'featureflags.admin.inc',
  );

  return $items;
}

/**
 * Returns all feature flags that have the matching $flag_name
 */
function featureflags_load($flag_name) {
  $result = db_query('SELECT * from {featureflags} ff WHERE ff.flag_name = :fname', array(':fname' => $flag_name));
  $record = $result->fetchObject();
  return $record;
}

/**
 * Returns all feature flags in the system
 */
function featureflags_loadall() {
  $results = db_query('SELECT * from {featureflags}');
  return $results->fetchAll();
}

/**
 * Saves a feature flag that matches the required format
 * If an existing flag with the same flag_name exists, it will update
 */
function featureflags_save($flag) {
  // validate the machine name and make sure there are no spaces
  if (empty($flag['flag_name']) || preg_match('/\s/', $flag['flag_name'])) {
    return NULL;
  }

  if (empty($flag['name'])) {
    return NULL;
  }

  // validate the status, and make sure it is a valid option
  // valid status options are currently 0 (disabled) and 1 (enabled)
  $valid_statuses = array(0, 1);
  if (!isset($flag['status']) || !(in_array($flag['status'], $valid_statuses))) {
    return NULL;
  }

  try {
    $existing = featureflags_load($flag['flag_name']);

    if ($existing == NULL) {
      $flag = db_insert('featureflags')->fields(array(
        'flag_name' => $flag['flag_name'],
        'name' => $flag['name'],
        'description' => $flag['description'],
        'updated' => time(),
        'status' => $flag['status'],
      ))->execute();
    }
    else {
      $flag = db_update('featureflags')->fields(array(
        'name' => $flag['name'],
        'description' => $flag['description'],
        'updated' => time(),
        'status' => $flag['status'],
      ))->condition('flag_name', $flag['flag_name'])->execute();
    }

    return $flag['flag_name'];
  } catch (Exception $e) {
    return NULL;
  }
}

/**
 * Returns 1 if record deleted, 0 if record was not deleted, NULL if an error occured
 */
function featureflags_delete($flag_name) {
  try {
    $deleted = db_delete('featureflags')
      ->condition('flag_name', $flag_name)
      ->execute();
    return $deleted;
  } catch (Exception $e) {
    return NULL;
  }
}

/**
 * Returns all rules that match the flag_name
 */
function featureflags_rule_loadmultiple($flag_name) {
  $results = db_query('SELECT * from {featureflags_rules} ffr WHERE ffr.flag_name = :fname', array(':fname' => $flag_name));
  $records = $results->fetchAll();
  return $records;
}

/**
 * Returns all rules that match the flag name and rule type (integer)
 */
function featureflags_rule_loadmultiple_bytype($flag_name, $rule_type) {
  $results = db_query('SELECT * from {featureflags_rules} ffr WHERE ffr.flag_name = :fname AND ffr.rule_type = :rtype', array(':fname' => $flag_name, ':rtype' => $rule_type));
  $records = $results->fetchAll();
  return $records;
}


/**
 * Returns 1 if record deleted, 0 if record was not deleted, NULL if an error occured
 */
function featureflags_rule_delete($rid) {
  try {
    $deleted = db_delete('featureflags_rules')
      ->condition('rid', $rid)
      ->execute();
    return $deleted;
  } catch (Exception $e) {
    return NULL;
  }
}

/**
 * Saves the rule provided that matches required format
 * If rid is provided, the rule is updated
 */
function featureflags_rule_save($rule) {
  // validate the machine name and make sure there are no spaces
  if (empty($rule['flag_name']) || preg_match('/\s/', $rule['flag_name'])) {
    return NULL;
  }

  // validate the type, and make sure it is a valid option
  $valid_types = array(RULE_ROLEID, RULE_USERID, RULE_PERCENTAGE);
  if (!isset($rule['rule_type']) || !(in_array($rule['rule_type'], $valid_types))) {
    return NULL;
  }

  try {
    if (!empty($rule['rid'])) {
      $flag = db_update('featureflags_rules')->fields(array(
        'flag_name' => $rule['flag_name'],
        'rule_type' => $rule['rule_type'],
        'rule_data' => $rule['rule_data'],
        'updated' => time(),
      ))->condition('rid', $rule['rid'])->execute();
    }
    else {
      $rule = db_insert('featureflags_rules')->fields(array(
        'flag_name' => $rule['flag_name'],
        'rule_type' => $rule['rule_type'],
        'rule_data' => $rule['rule_data'],
        'updated' => time(),
      ))->execute();
    }
    return $rule;
  } catch (Exception $e) {
    return NULL;
  }
}

/**
 * Main API function to check if current user can access feature flag
 */
function featureflags_cando($flag_name) {
  global $user;
  $flag = featureflags_load($flag_name);
  $rules = featureflags_rule_loadmultiple($flag_name);

  // if the flag exists, and is enabled
  if (!empty($flag) && $flag->status == 1) {
    foreach ($rules as $rule) {
      if ($rule->rule_type == RULE_ROLEID) {
        // if user has one of the roles
        if (in_array($rule->rule_data, $user->roles)) {
          return TRUE;
        }
      }
      elseif ($rule->rule_type == RULE_USERID) {
        // if user is one of the permitted users
        if ($rule->rule_data == $user->name) {
          return TRUE;
        }
      }
      elseif ($rule->rule_type == RULE_PERCENTAGE) {
        if ($user->uid == 0) { // anonymous user
          srand(hexdec(md5($_SERVER['REMOTE_ADDR'] . $flag_name)));
        }
        else {
          srand(hexdec(md5($user->uid . $flag_name)));
        }

        if (rand(0, 1) < $rule->rule_data) {
          srand(); // reset the seed
          return TRUE;
        }
        srand(); // reset the seed
      }
    }
  }
  return FALSE;
}

/**
 * Convenience function for featureflags_cando
 */
function fff($flag_name) {
  return featureflags_cando($flag_name);
}