<?php

/**
 * Implements hook_field_formatter_info().
 */
function num_items_field_formatter_info() {
  return array(
    'num_items' => array(
      'label' => t('# field items'),
      'field types' => array_keys(field_info_field_types()),
      'settings' => array('markup' => ''),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function num_items_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();
  $element['markup'] = array(
    '#type' => 'textfield',
    '#title' => t('Markup'),
    '#default_value' => $settings['markup'],
    '#size' => 20,
    '#description' => t('Translatable string to contain the count: <code>@count</code>. Can contain HTML.'),
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function num_items_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  return $settings['markup'] ? 'Markup: ' . check_plain($settings['markup']) : '-';
}

/**
 * Implements hook_field_formatter_view().
 */
function num_items_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];

  $value = count($items);
  $markup = $settings['markup'];

  $html = $markup ? t($markup, array('@count' => $value)) : $value;

  $element[0] = array('#markup' => $html);
  return $element;
}
