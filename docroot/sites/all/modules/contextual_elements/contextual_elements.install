<?php
/**
 * @file
 * Installation file for contextual_elements module.
 */

/**
 * Implements hook_update_N().
 * Add variable fields.
 */
function contextual_elements_update_7100(&$sandbox) {
  $var_name = array(
    'description' => 'The variable name.',
    'type' => 'varchar',
    'length' => '128',
    'not null' => FALSE,
  );
  $var_data = array(
    'description' => 'The variable data.',
    'type' => 'text',
    'not null' => FALSE,
  );
  
  db_add_field('contextual_elements', 'var_name', $var_name);
  db_add_field('contextual_elements', 'var_data', $var_data);
  
  // Provide a success messgage.
  return t('Update 7100 successful: Add variable fields.');
  
  // If the update fails, provide a failure message.
  throw new DrupalUpdateException('Updated 7100 failed: Add variable fields.');
}

/**
 * Implements hook_update_N().
 * Add GA variables.
 */
function contextual_elements_update_7101(&$sandbox) {
  $fields = array(
    'ga_vars_name' => array(
      'description' => 'The GA variables name.',
      'type' => 'varchar',
      'length' => '128',
      'not null' => FALSE,
    ),
    'ga_vars' => array(
      'description' => 'Serialized array of GA variables.',
      'type' => 'text',
      'not null' => FALSE,
    ),
  );  
  
  foreach ($fields as $name => $value) {
    db_add_field('contextual_elements', $name, $value);  
  }
  
  // Provide a success messgage.
  return t('Update 7101 successful: Add GA variables.');
  
  // If the update fails, provide a failure message.
  throw new DrupalUpdateException('Updated 7101 failed: Add GA variables.');
}

/**
 * Implements hook_schema().
 */
function contextual_elements_schema() {
  $schema['contextual_elements'] = array(
    'description' => 'Holds the instances of conditional tags.',
    'fields' => array(
      'cid' => array(
        'description' => 'The instance ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'The status of the tags: disabled, test or active.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 2,
      ),
      'name' => array(
        'description' => 'The human-readable name of the instance.',
        'type' => 'varchar',
        'length' => '128',
        'not null' => FALSE,
      ),
      'description' => array(
        'description' => 'A description of the instance.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'weight' => array(
        'description' => 'Weight the order to evanlaute the instances.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'header' => array(
        'description' => 'Elements to place in the header.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'footer' => array(
        'description' => 'Elements to place in the footer.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'domain_inc' => array(
        'description' => 'Determines whether to include or exclude a list of domains.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'domains' => array(
        'description' => 'A list of domains to evaluate.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'page_inc' => array(
        'description' => 'Determines whether the list of pages is included or excluded.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'pages' => array(
        'description' => 'A list of pages to include or exclude.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'role_inc' => array(
        'description' => 'Determines whether to include or exclude the selected roles.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'roles' => array(
        'description' => 'A serialized array of roles to include or exclude.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'users' => array(
        'description' => 'Allow users to opt in or out of implementing the tag. ',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'debug' => array(
        'description' => 'Determines whether or not to show fitering results as messages.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'var_name' => array(
        'description' => 'The variable name.',
        'type' => 'varchar',
        'length' => '128',
        'not null' => FALSE,
      ),
      'var_data' => array(
        'description' => 'The variable data.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'ga_vars_name' => array(
        'description' => 'The variable name.',
        'type' => 'varchar',
        'length' => '128',
        'not null' => FALSE,
      ),
      'ga_vars' => array(
        'description' => 'Serialized array of GA variables.',
        'type' => 'text',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('cid'),
  );
  return $schema;
}
