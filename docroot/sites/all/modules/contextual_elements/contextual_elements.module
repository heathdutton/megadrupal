<?php
/**
 * @file
 * contextual elements module to conditionally add elements to pages on your site.
 */
define('CONTEXTUAL_ELEMENTS_STATUS_DISABLED', 0);
define('CONTEXTUAL_ELEMENTS_STATUS_TESTMODE', 1);
define('CONTEXTUAL_ELEMENTS_STATUS_ACTIVE', 2);

/*******************************************************************************
 * CORE HOOKS
 * Drupal core hook implementations.
 ******************************************************************************/
/**
 * Implements hook_form_alter().
 */
function contextual_elements_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_profile_form':
      $account = user_load($form['#user']->uid);
      $contextual_elements = contextual_elements_get_elements();

      // Get a list of options the user can opt out of.
      $options = array();
      foreach ($contextual_elements as $contextual_element) {
        $role_filter_passed = contextual_elements_filter_element('role', $contextual_element);
        if ($contextual_element->users && user_access('users may opt in or out of contextual_elements') && $role_filter_passed) {
          $options[$contextual_element->cid] = $contextual_element->name;
        }
      }

      // If there are any options, render the extra fields.
      if ($options) {
        $form['contextual_elements_fieldset'] = array(
          '#type' => 'fieldset',
          '#title' => t('Contextual Elements Options'),
          '#weight' => 3,
          '#collapsible' => TRUE,
        );
        $form['contextual_elements_fieldset']['contextual_elements'] = array(
          '#type' => 'checkboxes',
          '#title' => t('Allow Contextual Elements'),
          '#description' => t('Allowing a contextual element may load additional data on the pages you visit.'),
          '#options' => $options,
          '#default_value' => (isset($account->data['contextual_elements']) ? $account->data['contextual_elements'] : drupal_map_assoc(array_keys($options))),
        );
      }
      break;
  }
}

/**
 * Implements hook_help().
 */
function contextual_elements_help($path, $arg) {
  $p = array();
  switch ($path) {
    case 'admin/config/search/contextual-elements':
      $p[] = t('Contextual elements allows you to place custom content into the head element or in the closure (footer) region of your site based on a number of criteria.');
      $p[] = t('Create and organize your contextual elements here.  Drag elements up and down to change the order they are rendered.  Test the placement before making your code live by putting a element into Test Mode.  Turn on the debugger to see if and why a element is not rendered.');
      $p[] = t('SET YOUR !link CAREFULLY! The content of the header and footer are injected directly into your pages.  Only administrators should be given this privilege.', array('!link' => l('PERMISSIONS', 'admin/people/permissions', array('fragment' => 'module-contextual_elements'))));
      return '<p>' . implode('</p><p>', $p) . '</p>';
      break;
  }
}

/**
 * Implements hook_init().
 */
function contextual_elements_init() {
  $output = '';
  $vars = array();

  // Get any elements that passed the current filters.
  $contextual_elements = contextual_elements_get_filtered_elements();

  // Lead each header
  foreach ($contextual_elements as $contextual_element) {
    // Get the custom vars
    if ($contextual_element->var_name) {
      $vars[] = _contextual_elements_prepare_jsvar($contextual_element);
    }
    
    // Get the Google Vars
    if ($contextual_element->ga_vars_name) {
      $vars[] = _contextual_elements_prepare_gavar($contextual_element);
    }
    
    // Generate the element output
    $output .= ($contextual_element->status == CONTEXTUAL_ELEMENTS_STATUS_TESTMODE ? "<!-- CONTEXTUAL ELEMENT '$contextual_element->name' HEADER WILL GO HERE -->" : token_replace($contextual_element->header, array('contextual_element' => $contextual_element))) . "\n";
  }

  // We must place the vars before any other scripts so they are accessible.
  $vars_out = ($vars ? "<script type=\"text/javascript\"><!--//--><![CDATA[//><!--\n" . implode(PHP_EOL, $vars) . "\n//--><!]]></script>" : '');

  $element = array(
    '#type' => 'markup',
    '#markup' => $vars_out . $output,
  );

  drupal_add_html_head($element, 'contextual_elements');
}

/**
 * Implements hook_menu().
 */
function contextual_elements_menu() {
  $items['admin/config/search/contextual-elements'] = array(
    'title' => 'Contextual Elements',
    'description' => 'Manage contextual element settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('contextual_elements_instances_table_form'),
    'access arguments' => array('administer contextual elements settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/contextual_elements.forms.inc',
  );
  $items['admin/config/search/contextual-elements/list'] = array(
    'title' => 'List',
    'description' => 'Manage contextual element settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('contextual_elements_instances_table_form'),
    'access arguments' => array('administer contextual elements settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    'file' => 'includes/contextual_elements.forms.inc',
  );

  $items['admin/config/search/contextual-elements/add'] = array(
    'title' => 'Add Element',
    'description' => 'Create a new set of contextual element.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('contextual_elements_form_element'),
    'access arguments' => array('create contextual elements'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'includes/contextual_elements.forms.inc',
  );

  $items['admin/config/search/contextual-elements/%contextual_elements'] = array(
    'title' => 'View',
    'description' => 'View the details of a contextual element instance.',
    'page callback' => 'contextual_elements_details_page',
    'page arguments' => array(4),
    'access arguments' => array('view contextual element details'),
    'file' => 'includes/contextual_elements.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/search/contextual-elements/%contextual_elements/view'] = array(
    'title' => 'View',
    'description' => 'View the details of a contextual element instance.',
    'page callback' => 'contextual_elements_details_page',
    'page arguments' => array(4),
    'access arguments' => array('view contextual element details'),
    'file' => 'includes/contextual_elements.pages.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/config/search/contextual-elements/%contextual_elements/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit a contextual element.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('contextual_elements_form_element', 4),
    'access arguments' => array('edit contextual elements'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/contextual_elements.forms.inc',
    'weight' => 1,
  );
  $items['admin/config/search/contextual-elements/%contextual_elements/delete'] = array(
    'title' => 'Delete',
    'description' => 'View the details of a contextual element instance.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('contextual_elements_delete_confirm_form', 4),
    'access arguments' => array('delete contextual elements'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/contextual_elements.forms.inc',
    'weight' => 2,
  );

  return $items;
}

/**
 * Implements hook_page_alter().
 */
function contextual_elements_page_alter(&$page) {
  $output = '';

  // Get any elements that passed the current filters.
  $contextual_elements = contextual_elements_get_filtered_elements();

  // Lead each footer
  foreach ($contextual_elements as $contextual_element) {
    $output .= ($contextual_element->status == CONTEXTUAL_ELEMENTS_STATUS_TESTMODE ? "<!-- CONTEXTUAL ELEMENT '$contextual_element->name' FOOTER WILL GO HERE -->" : token_replace($contextual_element->footer, array('contextual_element' => $contextual_element))) . "\n";
  }

  $page['page_bottom']['contextual_elements'] = array(
    '#markup' => $output,
  );
}

/**
 * Implements hook_perm().
 */
function contextual_elements_permission() {
  return array(
    'administer contextual elements settings' => array(
      'title' => t('Administer contextual elements settings'),
      'description' => t('Access the contextual elements overview page and enable/disable contextual_elements.'),
    ),
    'create contextual elements' => array(
      'title' => t('Create new contextual elements'),
      'description' => t("Enables the 'Add element' tab."),
      'restrict access' => TRUE,
    ),
    'view contextual element details' => array(
      'title' => t('View Details'),
      'description' => t("Displays a read-only listing of the elements and filters applied to a contextual element."),
    ),
    'edit contextual elements' => array(
      'title' => t('Edit contextual elements'),
      'description' => t("Allows users to change the content and filters of any contextual element."),
      'restrict access' => TRUE,
    ),
    'delete contextual elements' => array(
      'title' => t('Delete contextual elements'),
      'description' => t("Delete a contextual_element from the database."),
    ),
    'users may opt in or out of contextual elements' => array(
      'title' => t('Users May Opt-Out'),
      'description' => t("Provides an option on the users' account edit page to opt-in or opt-out of specific contextual element application."),
    ),
    'view contextual element debug messages' => array(
      'title' => t('View Debug Messages'),
      'description' => t("Display debug messages for contextual elements in Debug Mode."),
    ),
  );
}

/**
 * Implements hook_preprocess().
 */
function contextual_elements_preprocess_contextual_elements_details(&$vars) {
  $contextual_element = $vars['contextual_element'];

  drupal_add_css(drupal_get_path('module', 'contextual_elements') . '/contextual_elements.css');
  drupal_set_title(contextual_elements_title('view', $contextual_element));

  $vars['status']     = _contextual_elements_opts('status',     $contextual_element->status);
  $vars['debug']      = _contextual_elements_opts('debug',      $contextual_element->debug);
  $vars['domain_inc'] = _contextual_elements_opts('domain_inc', $contextual_element->domain_inc);
  $vars['page_inc']   = _contextual_elements_opts('page_inc',   $contextual_element->page_inc);
  $vars['role_inc']   = _contextual_elements_opts('role_inc',   $contextual_element->role_inc);
  $vars['users']      = _contextual_elements_opts('users',      $contextual_element->users);

  $vars['header']   = ($contextual_element->header ?  _filter_autop(htmlentities($contextual_element->header)) : t('None'));
  $vars['footer']   = ($contextual_element->footer ?  _filter_autop(htmlentities($contextual_element->footer)) : t('None'));
  $vars['domains']  = ($contextual_element->domains ? _filter_autop($contextual_element->domains) : t('None'));
  $vars['pages']    = ($contextual_element->pages ?   _filter_autop($contextual_element->pages) : t('None'));

  $vars['var_data']     = ($contextual_element->var_data ? htmlentities(_contextual_elements_prepare_jsvar($contextual_element, FALSE)) : t('None'));
  $vars['ga_var_data']  = ($contextual_element->ga_vars ?  htmlentities(_contextual_elements_prepare_gavar($contextual_element, FALSE)) : t('None'));
  
  // Get the actual names for the roles
  $roles = user_roles();
  $vars['roles'] = '';
  foreach ($contextual_element->roles as $rid => $active) {
    if ($active) {
      $vars['roles'][] = $roles[$rid];
    }
  }
}

/**
 * Implements hook_theme().
 */
function contextual_elements_theme($existing, $type, $theme, $path) {
  return array(
    'contextual_elements_details' => array(
      'variables' => array('contextual_element' => NULL),
      'template' => 'contextual-elements-details',
    ),
    'contextual_elements_instances_table_form' => array(
      'render element' => 'form',
      'file' => "includes/contextual_elements.themes.inc",
    ),
    'contextual_elements_admin_gavar_table' => array(
      'render element' => 'form',
      'file' => "includes/contextual_elements.themes.inc",
    ),
  );
}

/**
 * Implements hook_token_info().
 */
function contextual_elements_token_info() {
  $type = array(
    'name' => t('Contextual Elements'), 
    'description' => t('Tokens for contextual elements.'), 
    'needs-data' => 'contextual_element',
  );

  $tokens['var_name'] = array(
    'name' => t('JS Variable Name'),
    'description' => t('Insert the custom JS variable name.'),
  );
    
  return array(
    'types' => array('contextual_element' => $type),
    'tokens' => array('contextual_element' => $tokens),
  );
}

/**
 * Implements hook_tokens().
 */
function contextual_elements_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  
  switch ($type) {
    case 'contextual_element':
      foreach ($tokens as $name => $original) {
        switch ($name) {
          case 'var_name':
            $replacements[$original] = $data['contextual_element']->var_name;
            break;
        }
      }
      break;
  }
  
  return $replacements;
}

/**
 * Implements hook_user_presave().
 */
function contextual_elements_user_presave(&$edit, $account, $category) {
  // Store the contextual_elements value per user into the user's data.
  if (isset($edit['contextual_elements'])) {
    $edit['data']['contextual_elements'] = $edit['contextual_elements'];
  }
}

/*******************************************************************************
 * CONTRIB HOOKS
 * Contributed hook implementations.
 ******************************************************************************/
/**
 * Implements hook_contextual_elements_filters().
 *
 * @return
 *   An array of filters to be provided to modules to implement their own
 *   filtering functions.
 *
 * @see
 *   hook_contextual_elements_filter_FILTER().
 */
function contextual_elements_contextual_elements_filters() {
  return array(
    'status' => array('weight' => 0),
    'domain' => array('weight' => 1),
    'path'   => array('weight' => 2),
    'role'   => array('weight' => 3),
    'user'   => array('weight' => 4),
  );
}

/**
 * Implements hook_contextual_elements_filter_domain().
 *
 * @return
 *   Boolean value whether to allow or deny this contextual_element.
 */
function contextual_elements_contextual_elements_filter_domain($contextual_element) {
  $domain = $_SERVER['HTTP_HOST'];
  $domains = explode('|', preg_replace('/(\r\n?|\n)/', '|', $contextual_element->domains));

  // Check whether the domain filter is inclusionary or exclusionary
  if (($contextual_element->domain_inc && in_array($domain, $domains)) || (!$contextual_element->domain_inc && !in_array($domain, $domains))) {
    return array('status' => TRUE);
  }
  else {
    return array('status' => FALSE);
  }
}

/**
 * Implements hook_contextual_elements_filter_path().
 *
 * @return
 *   Boolean value whether to allow or deny this contextual_element.
 */
function contextual_elements_contextual_elements_filter_path($contextual_element) {
  $pages_match = drupal_match_path($_GET['q'], $contextual_element->pages);

  // Check whether the page filter is inclusionary or exclusionary
  if (($contextual_element->page_inc && $pages_match) || (!$contextual_element->page_inc && !$pages_match)) {
    return array('status' => TRUE);
  }
  else {
    return array('status' => FALSE, 'message' => t('Path %path is not valid.', array('%path' => $_GET['q'])));
  }
}

/**
 * Implements hook_contextual_elements_filter_role().
 *
 * @return
 *   Boolean value whether to allow or deny this contextual_element.
 */
function contextual_elements_contextual_elements_filter_role($contextual_element) {
  global $user;

  // Get an array of roles checked in the contextual_element and assigned to the active user.
  $matching_roles = array();
  foreach ($contextual_element->roles as $rid => $active) {
    if ($active && isset($user->roles[$rid])) {
      $matching_roles[$rid] = $rid;
    }
  }

  // Check whether the role filter is inclusionary or exclusionary
  if (($contextual_element->role_inc && $matching_roles) || (!$contextual_element->role_inc && empty($matching_roles))) {
    return array('status' => TRUE);
  }
  else {
    return array('status' => FALSE);
  }
}

/**
 * Implements hook_contextual_elements_filter_status().
 *
 * @return
 *   Boolean value whether to allow or deny this contextual_element.
 */
function contextual_elements_contextual_elements_filter_status($contextual_element) {
  return array('status' => (bool)$contextual_element->status);
}

/**
 * Implements hook_contextual_elements_filter_user().
 *
 * @return
 *   Boolean value whether to allow or deny this contextual_element.
 */
function contextual_elements_contextual_elements_filter_user($contextual_element) {
  global $user;

  if ($contextual_element->users && isset($user->data['contextual_elements']) && (!isset($user->data['contextual_elements'][$contextual_element->cid]) || $user->data['contextual_elements'][$contextual_element->cid] == 0)) {
    return array('status' => FALSE);
  }
  else {
    return array('status' => TRUE);
  }
}

/*******************************************************************************
 * MODULE FUNCTIONS
 * Extendable functionality for this module.
 ******************************************************************************/
/**
 * Delete a contextual_element instance.  We should have already gone through a confirmation
 * process to get to this point.
 *
 * @param $cid
 *   contextual_element object or integer CID to be removed.
 */
function contextual_elements_delete($cid) {
  if (is_numeric($cid)) {
    $contextual_element = contextual_elements_load($cid);
  }
  elseif (is_object($cid)) {
    $contextual_element = $cid;
    $cid = $contextual_element->cid;
  }

  if (is_numeric($cid)) {
    $cnt = db_delete('contextual_elements')->condition('cid', $cid)->execute();

    if ($cnt > 0) {
      drupal_set_message(t('%name successfully deleted.', array('%name' => $contextual_element->name)));
    }
    else {
      drupal_set_message(t('Error deleting %name.', array('%name' => $contextual_element->name)), 'error');
      watchdog('contextual_elements', 'Error deleting %name.  Database reported no rows affected.', $args, WATCHDOG_ERROR);
    }
  }
  else {
    drupal_set_message(t('Unable to delete %name.', array('%name' => $contextual_element->name)), 'error');
    watchdog('contextual_elements', 'Unable to delete %name.  Either no CID or a non-numeric CID was provided.', $args, WATCHDOG_ERROR);
  }
}

/**
 * Execute a single filter on a contextual_element.
 * Call any module implementations for the given filter.
 *
 * @param $filter
 *   A registered contextual_element filter.
 *
 * @param $contextual_element
 *   A loaded contextual_element object.
 *
 * @return
 *   A boolean result of the filtering.
 */
function contextual_elements_filter_element($filter, $contextual_element) {
  // Allow modules to hook into each filter
  $hook = "contextual_elements_filter_$filter";
  foreach (module_implements($hook) as $module) {
    $func = $module . "_" . $hook;
    $response = $func($contextual_element);
    $response['message'] = (isset($response['message']) ? filter_xss($response['message']) : '');
    if (!$response['status']) {
      // Set debugging messages for failures.
      if ($contextual_element->debug && user_access('view contextual_element debug messages')) {
        drupal_set_message(t('CONTEXTUAL ELEMENTS DEBUG: %name was denied by the @filter filter implemented by the @module module %function.', array('%name' => $contextual_element->name, '@filter' => $filter, '@module' => $module, '%function' => $func . "()")) . '<br />' . $response['message'], 'debug', FALSE);
      }
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Filter all contextual_elements to get those that may be applied in the current environment.
 *
 * @return
 *   An array of loaded contextual_element objects.
 */
function contextual_elements_get_filtered_elements() {
  static $allowed_contextual_elements;

  // Use the static variable to only load the filtered contextual_elements once per request
  // instead of twice (once for headers and once for footers)
  if (!isset($allowed_contextual_elements)) {
    // Get the elements
    $all_contextual_elements = contextual_elements_get_elements();
    $allowed_contextual_elements = $all_contextual_elements;

    // Get a list of filters from all modules
    $filters = module_invoke_all('contextual_elements_filters');
    drupal_alter('contextual_elements_filters', $filters);

    // Sort the filters
    foreach ($filters as $name => $data) {
      $sorted_filters[$data['weight'] . $name] = $name;
    }
    ksort($sorted_filters);

    // Evaluate each contextual_element
    foreach ($all_contextual_elements as $contextual_element) {
      // Run the element through each filter.
      foreach ($sorted_filters as $filter) {
        //dsm("Checking $filter filter on $contextual_element->name");
        if (!contextual_elements_filter_element($filter, $contextual_element)) {
          unset($allowed_contextual_elements[$contextual_element->cid]);
          // As soon as a filter results in the denial of a element, stop checking
          // that element.
          break 1;
        }
      }
    }

    // Set debugging messages for successes.
    foreach ($allowed_contextual_elements as $contextual_element) {
      if ($contextual_element->debug && user_access('view contextual_element debug messages')) {
        drupal_set_message(t('CONTEXTUAL ELEMENTS DEBUG: %name passed all filters and should be visible in the source code.', array('%name' => $contextual_element->name)), 'debug', FALSE);
      }
    }
  }

  return $allowed_contextual_elements;
}

/**
 * Get contextual_elements from the database.
 *
 * @return
 *   An array of loaded objects.
 */
function contextual_elements_get_elements($case = 'all') {
  $select = db_select('contextual_elements', 'c');
  $select->fields('c');
  $select->orderBy('weight', 'ASC');

  switch ($case) {
    case 'active':
      $select->condition('status', 0, '<>');
      break;
  }

  $res = $select->execute();
  $ret = array();
  foreach ($res as $row) {
    $ret[$row->cid] = $row;
    $ret[$row->cid]->roles = unserialize($row->roles);
    $ret[$row->cid]->ga_vars = unserialize($row->ga_vars);
  }

  return $ret;
}

/**
 * Load a contextual_element instance from the database.
 *
 * @param $params
 *   An integer, array or object used to load the data object from the database.
 *
 * @param $reset
 *   Boolean value determines whether to load the object from memory or directly
 *   from the database.
 *
 * @return
 *   A fully loaded contextual_element object or NULL if one could not be loaded.
 */
function contextual_elements_load($params = NULL, $reset = FALSE) {
  $contextual_elements = &drupal_static(__FUNCTION__);

  // Normalize a data array to fetch the row from the database.
  if (is_numeric($params)) {
    $data['cid'] = $params;
  }
  elseif (is_array($params)) {
    $data = $params;
  }
  elseif (is_object($params)) {
    $data = (array)$params;
  }

  // Attempt to get the object from memory before we call the db.
  if (isset($data['contextual_elements']) && is_numeric($data['cid']) && isset($contextual_elements['cid']) && !$reset) {
    return $contextual_elements['cid'];
  }

  // Initialize the select query.
  $select = db_select('contextual_elements', 'c')->fields('c');

  // Format the data for sql queries
  foreach ($data as $field => $value) {
    if (!is_null($value)) {
      $select->condition($field, $value);
    }
  }

  $contextual_element = $select->execute()->fetchObject();
  // If we get a result, load the contextual_element object.
  if (is_object($contextual_element) && isset($contextual_element->cid)) {
    $contextual_element->roles   = unserialize($contextual_element->roles);
    $contextual_element->ga_vars = unserialize($contextual_element->ga_vars);
      
    $contextual_elements[$contextual_element->cid] = $contextual_element;
  }

  return $contextual_element;
}

/**
 * Insert or update a contextual_element entry in the database.
 *
 * @param $contextual_element
 *   Object containing contextual_element data.
 */
function contextual_elements_save(&$contextual_element) {
  // Initialize the query object depending on the existence of a valid cid
  if (!isset($contextual_element->cid) || $contextual_element->cid == 0) {
    $query = db_insert('contextual_elements');
    unset($contextual_element->cid);
  }
  else {
    $query = db_update('contextual_elements');
    $query->condition('cid', $contextual_element->cid);
    $cid = $contextual_element->cid;
    unset($contextual_element->cid);
  }

  $query->fields((array)$contextual_element)->execute();

  // Get the loaded object from the database to make sure we saved correctly.
  if (isset($cid)) {
    $contextual_element->cid = $cid;
  }

  // Get the fully loaded contextual_element object.
  $loaded_contextual_element = contextual_elements_load($contextual_element);
  if ($loaded_contextual_element->cid) {
    $contextual_element = $loaded_contextual_element;
  }
}

/**
 * Generate the title for the details page.
 */
function contextual_elements_title($action, $contextual_element) {
  switch ($action) {
    case 'view':
      return t("Contextual element '!name'", array('!name' => $contextual_element->name));
      break;

    case 'edit':
      return t("Edit contextual element '!name'", array('!name' => $contextual_element->name));
      break;

    case 'delete':
      return t("Delete contextual element '!name'", array('!name' => $contextual_element->name));
      break;

    default:
      return t('Contextual Elements');
      break;
  }
}

/*******************************************************************************
 * HELPERS
 * Subroutines to aid module functions.  Not intrinsically useful outside the
 * scope of this module.  Generally begin with an underscore.
 ******************************************************************************/
/**
 * Translate data values into usable information.  This is useful for getting
 * option arrays for form fields or translating individual values to display
 * to users.
 *
 * @param $field
 *   The field name to reference.
 *
 * @param $value
 *   The value to translate.  If empty the entire array is returned.
 *
 * @return
 *   The translated value.
 */
function _contextual_elements_opts($field, $value = NULL) {
  $data = array(
    'status' => array(
      CONTEXTUAL_ELEMENTS_STATUS_DISABLED => t('Disabled'),
      CONTEXTUAL_ELEMENTS_STATUS_TESTMODE => t('Test Mode'),
      CONTEXTUAL_ELEMENTS_STATUS_ACTIVE => t('Active'),
    ),
    'debug' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
    'domain_inc' => array(
      1 => t('Add elements to pages <strong>only</strong> on these domains'),
      0 => t('Add elements to any domains <strong>except</strong> the following'),
    ),
    'page_inc' => array(
      1 => t('Add elements to <strong>only</strong> the following paths'),
      0 => t('Add elements to all paths <strong>except</strong> the following'),
    ),
    'role_inc' => array(
      1 => t('Add elements to <strong>only</strong> the selected roles'),
      0 => t('Add elements to all roles <strong>except</strong> the following'),
    ),
    'users' => array(
      1 => t('Users with permission may opt out'),
      0 => t('Users are automatically tagged'),
    ),
    'weight' => drupal_map_assoc(range(-50, 50)),
  );

  return (isset($value) ? (isset($data[$field]) ? $data[$field][$value] : $value) : $data[$field]);
}

/**
 * Prepare the JS variables for display.
 */
function _contextual_elements_prepare_jsvar($contextual_element, $tokenize = TRUE) {
  $rows = explode(PHP_EOL, $contextual_element->var_data);
  $var_name = check_plain($contextual_element->var_name);
  $pairs = array();
  $node = (arg(0) == 'node' && is_numeric(arg(1)) ? node_load(arg(1)) : new stdClass());
  
  $vars_js = "var {$var_name}=[];";
  
  foreach ($rows as $row) {
    list($key, $value) = explode('|', $row);
    $value = trim($value);
    
    if ($tokenize) {
      $key   = token_replace($key, array('contextual_element' => $contextual_element, 'node' => $node));
      $value = token_replace($value, array('contextual_element' => $contextual_element, 'node' => $node));
      $key   = addslashes($key);
      $value = addslashes($value);
    }
    
    $vars_js .= "{$var_name}['{$key}']='{$value}';";
  }
    
  return $vars_js;
}

/*
 * Prepare the GA variables for display.
 */
function _contextual_elements_prepare_gavar($contextual_element, $tokenize = TRUE) {
  $var_name = check_plain($contextual_element->ga_vars_name);
  $rows = $contextual_element->ga_vars;
  $node = (arg(0) == 'node' && is_numeric(arg(1)) ? node_load(arg(1)) : new stdClass());
  
  $vars_ga = "var {$var_name}=[];";
    
  foreach ($rows as $row) {
    if ($row['name']) {
      $value = ($tokenize ? token_replace($row['value'], array('node' => $node)) : $row['value']);
      $value = addslashes($value);
      $vars_ga .= "{$var_name}[{$row['slot']}]=['{$row['name']}','{$value}','{$row['scope']}'];";
    }
  }
    
  return $vars_ga;
}