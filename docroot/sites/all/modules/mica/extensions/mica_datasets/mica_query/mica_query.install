<?php

/**
 * @file
 * Install, update and uninstall functions for the Mica Query module.
 */

/**
 * Implements hook_schema().
 */
function mica_query_schema() {
  $schema = array();

  $schema['mica_query'] = array(
    'description' => 'Stores all the queries that are to be applied to their associated Mica Datasets.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a query.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The displayed name for a query.',
        'type' => 'varchar',
        'length' => 200,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'The displayed description for a query.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'dataset_id' => array(
        'description' => 'The dataset identifier for a query.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'cross_variable_id' => array(
        'description' => 'The cross variable identifier for a query.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
      'user_id' => array(
        'description' => 'The query author identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'published' => array(
        'description' => 'A flag indicating whether the query is available to users that are not the author.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ) + entity_exportable_schema_fields(),
    'indexes' => array(
      'indexing' => array('published', 'user_id', 'dataset_id'),
    ),
    'primary key' => array('id'),
  );

  $schema['mica_query_term'] = array(
    'description' => 'Stores the query terms of a query.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a query term.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'query_id' => array(
        'description' => 'The query identifier for a query term.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'variable_id' => array(
        'description' => 'The variable identifier for a query term.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'weight' => array(
        'description' => 'The weight of a term in its query.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'depth' => array(
        'description' => 'The depth of a term in its query.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'options' => array(
        'description' => 'The options that describe the query term.',
        'type' => 'text',
        'serialize' => TRUE,
        'not null' => TRUE,
      ),
    ) + entity_exportable_schema_fields(),
    'indexes' => array(
      'indexing' => array('query_id'),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function mica_query_install() {
  _mica_query_migrate_data();
}

/**
 * Import mica_datasets_query previously exported by mica_core, if any.
 */
function _mica_query_migrate_data() {
  $query_export = variable_get('mica_query_export');
  if (!empty($query_export)) {
    foreach ($query_export as $query) {
      db_insert('mica_query')
        ->fields(array(
        'id' => $query->id,
        'name' => $query->name,
        'description' => $query->description,
        'dataset_id' => $query->dataset_id,
        'cross_variable_id' => $query->cross_variable_id,
        'user_id' => $query->user_id,
        'published' => $query->published,
        'status' => $query->status,
        'module' => 'mica_query',
      ))->execute();
    }
    variable_del('mica_query_export');
  }

  $term_export = variable_get('mica_query_term_export');
  if (!empty($term_export)) {
    foreach ($term_export as $term) {
      db_insert('mica_query_term')
        ->fields(array(
        'id' => $term->id,
        'query_id' => $term->query_id,
        'variable_id' => $term->variable_id,
        'weight' => $term->weight,
        'depth' => $term->depth,
        'options' => $term->options,
        'status' => $term->status,
        'module' => 'mica_query',
      ))->execute();
    }
    variable_del('mica_query_term_export');
  }
}