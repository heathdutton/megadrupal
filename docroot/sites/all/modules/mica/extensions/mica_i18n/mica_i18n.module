<?php
/**
 * @file
 * Code for the Mica i18n feature.
 */

include_once('mica_i18n.devel.inc');

define('MEMENTO_BUNDLES', 'mica_i18n_memento_bundles');
define('MEMENTO_VIEWS', 'mica_i18n_memento_views');
define('MEMENTO_TAXONOMIES', 'mica_i18n_memento_taxonomies');
define('MEMENTO_INDEXES', 'mica_i18n_memento_indexes');

/**
 * Implements hook_menu_alter().
 *
 * Take over the node translation page.
 */
function mica_i18n_menu_alter(&$items) {
  // Take over node/add pages for Correctly deal with special characters ' " ...
  $items['node/add']['page callback'] = 'mica_i18n_node_add_page';

}

/**
 * Replacement for node_add_page.
 */
function mica_i18n_node_add_page() {
  $item = menu_get_item();
  $content = system_admin_menu_block($item);
  foreach ($content as &$item) {
    $item['title'] = html_entity_decode($item['title'], ENT_QUOTES, "ISO-8859-1");
  }
  return theme('node_add_list', array('content' => $content));
}

/**
 * Implements hook_menu().
 */
function mica_i18n_menu() {
  // Mica i18n configure content types
  $items['admin/config/system/mica_i18n'] = array(
    'title' => 'Mica i18n',
    'description' => 'development tools for Mica I18n',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_mica_i18n_devel_form'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Implements hook_menu_breadcrumb_alter() to translate links title of breadcrumb
 */
function mica_i18n_menu_breadcrumb_alter(&$active_trail, $item) {
  foreach (array_keys($active_trail) as $trail) {
    $active_trail[$trail]['title'] = t($active_trail[$trail]['title']);
  }
}

// pathauto are not translated
function mica_i18n_pathauto_alias_alter(&$alias, array &$context) {
  if (array_key_exists('node', $context['data']) && !i18n_node_type_enabled($context['data']['node']->type)) {
    $context['language'] = LANGUAGE_NONE;
  }
}

/**
 * Implements hook_multilingual_settings_changed()
 */
function mica_i18n_multilingual_settings_changed() {

  // Prepare Mica i18n for new language
  foreach (array_keys(language_list()) as $lang) {
    // skip default language
    if ($lang !== language_default()->language) {
      mica_i18n_configure_block();

      // find all mica translation files
      mica_i18n_import_po_files($lang);

      // translate menus
      mica_i18n_translate_menus($lang);

      // set homepage variable for new language
      i18n_variable_set('site_frontpage', 'node/1', $lang);
    }
  }

  // Refresh strings
  module_load_include('inc', 'i18n_string', 'i18n_string.admin');
  $batch = i18n_string_refresh_batch(array('field', 'menu', 'node', 'taxonomy', 'default', 'blocks'), TRUE);
  batch_set($batch);
}

function mica_i18n_translate_menus($langcode) {

  // Resave all menu links of main-menu to enable the translate tab
  module_load_include('inc', 'l10n_update');
  module_load_include('locale . inc', 'l10n_update');
  module_load_include('admin . inc', 'i18n_string');

  // Enable translation mode for main-menu
  db_update('menu_custom')
    ->expression('i18n_mode', ':mode', array(':mode' => I18N_MODE_MULTIPLE))
    ->condition('menu_name', MAIN_MENU)
    ->execute();

  $result = db_query("SELECT mlid FROM {menu_links} WHERE menu_name = :menu_name",
    array(':menu_name' => MAIN_MENU), array('fetch' => PDO::FETCH_ASSOC));

  foreach ($result as $m) {
    $link = menu_link_load($m['mlid']);
    $link['customized'] = 1;
    menu_link_save($link);

    // Add menu link translation
    $value = array(
      'msgctxt' => 'item:' . $link['mlid'] . ':title',
      'msgid' => $link['link_title'],
      'msgstr' => _mica_i18n_get_menu_translations($langcode, $link['link_title']),
    );

    _l10n_update_locale_import_one_string('db-store', $value, LOCALE_IMPORT_OVERWRITE, $langcode, NULL, 'menu');
    // import to interface to use on menu_breadcrumb_alter
    _l10n_update_locale_import_one_string('db-store', $value, LOCALE_IMPORT_OVERWRITE, $langcode, NULL, 'default');
  }

  _menu_clear_page_cache();
  menu_cache_clear(MAIN_MENU);
}

function mica_i18n_import_po_files($langcode = 'fr') {
  if (db_query("SELECT COUNT(language) FROM {languages} WHERE language = :language", array(':language' => $langcode))->fetchField()) {
    $filename = '/' . $langcode . '.po$/';
    $path = drupal_get_path('module', 'mica') . '/translations';
    $files = drupal_system_listing($filename, $path, 'name', 0);

    if (!empty($files)) {
      foreach ($files as $file) {
        _mica_i18n_update_mica_languages($file, $langcode);
      }
    }
  }
}

function _mica_i18n_update_mica_languages($file, $langcode) {
  module_load_include('batch.inc', 'l10n_update');

  $field_pattern = '/.field.' . $langcode . '.po$/';
  $menu_pattern = '/.menu.' . $langcode . '.po$/';
  $blocks_pattern = '/.blocks.' . $langcode . '.po$/';
  $node_pattern = '/.node.' . $langcode . '.po$/';
  $taxonomy_pattern = '/.taxonomy.' . $langcode . '.po$/';

  if (preg_match($field_pattern, $file->filename) == 1) {
    _l10n_update_locale_import_po($file, $langcode, LOCALE_IMPORT_OVERWRITE, 'field');
  }
  elseif (preg_match($menu_pattern, $file->filename) == 1) {
    _l10n_update_locale_import_po($file, $langcode, LOCALE_IMPORT_OVERWRITE, 'menu');
  }
  elseif (preg_match($blocks_pattern, $file->filename) == 1) {
    _l10n_update_locale_import_po($file, $langcode, LOCALE_IMPORT_OVERWRITE, 'blocks');
  }
  elseif (preg_match($node_pattern, $file->filename) == 1) {
    _l10n_update_locale_import_po($file, $langcode, LOCALE_IMPORT_OVERWRITE, 'node');
  }
  elseif (preg_match($taxonomy_pattern, $file->filename) == 1) {
    _l10n_update_locale_import_po($file, $langcode, LOCALE_IMPORT_OVERWRITE, 'taxonomy');
  }
  else {
    _l10n_update_locale_import_po($file, $langcode, LOCALE_IMPORT_OVERWRITE, 'default');
    _l10n_update_locale_import_po($file, $langcode, LOCALE_IMPORT_OVERWRITE, 'field');
  }

}

function _mica_i18n_get_menu_translations($langcode, $title) {
  if ($langcode === 'fr') {
    $translations = array(
      'Home' => 'Accueil',
      'Studies' => 'Études',
      'About' => 'À propos de nous',
      'Resources' => 'Ressources',
      'Research' => 'Recherche',
      'Community' => 'Communauté',
      'Data Access' => 'Accès aux données',
      'Datasets' => 'Jeux de données',
      'Publications' => 'Publications',
      'DACO Approved Projects' => 'Projets approuvés par le DACO',
      'Projects' => 'Projets',
      'News' => 'Nouvelles',
      'Events' => 'Événements',
      'Calendar' => 'Calendrier',
      'Forums' => 'Forums',
      'Blogs' => 'Blogs',
      'Study Datasets' => "Jeux de données d'études",
      'Harmonization Datasets' => "Jeux de données d'harmonisation",
      'Variables Search' => 'Recherche de variables',
      'Consortium Policies and Guidelines' => 'Politiques et lignes directrices du consortium',
      'Data Access Administration' => "Administration des demandes d'accès",
      'Data Access Committee' => "Comité de demandes d'accès",
      'Data Access Request' => "Demandes d'accès",
      'My Data Access Requests' => "Mes demandes d'accès",
    );

    return !empty($translations[$title]) ? $translations[$title] : '';
  }

  return '';
}

function mica_i18n_configure_block() {

  // add the language switcher dropdown block to the header
  $theme_default = variable_get('theme_default', 'mica_subtheme');
  db_update('block')->fields(
    array(
      'status' => 1,
      'region' => 'header',
      'weight' => 0,
      'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    )
  )
    ->condition('module', 'lang_dropdown')
    ->condition('delta', 'language')
    ->condition('theme', $theme_default)
    ->execute();

  // Set all facetApi blocks to be translatable...
  db_update('block')->fields(
    array(
      'i18n_mode' => 1,
    )
  )
    ->condition('module', 'facetapi')
    ->execute();
}

function mica_i18n_update_displays($instance) {
  $update = FALSE;
  foreach (array_keys($instance['display']) as $display) {
    if ($instance['display'][$display]['type'] === 'list_default') {
      $update = TRUE;
      $instance['display'][$display]['type'] = 'i18n_list_default';
      $instance['display'][$display]['module'] = 'i18n_field';
    }
    else {
      if ($instance['display'][$display]['type'] === 'text_default') {
        $update = TRUE;
        $instance['display'][$display]['type'] = 'i18n_text_default';
        $instance['display'][$display]['module'] = 'NULL';
      }
      else {
        if ($instance['display'][$display]['type'] === 'taxonomy_term_reference_plain') {
          $update = TRUE;
          $instance['display'][$display]['type'] = 'i18n_taxonomy_term_reference_plain';
          $instance['display'][$display]['module'] = 'i18n_taxonomy';
        }
      }
    }
  }
  if ($update) {
    field_update_instance($instance);
  }
}

/**
 * Set variable to enable translated content types, hide language fields from all view modes,
 * change display type for lists and texts to enable translation
 */
function mica_i18n_fix_entity_display() {

  $memento = variable_get(MEMENTO_BUNDLES, array());
  $types = node_type_get_types();
  $translatables_widget_types = mica_i18n_get_translatables_widget_types();
  $excludes = module_invoke_all('translation_exclude_fields');
  foreach ($types as $type) {
    if (!in_array($type->type, $memento)) {
      $memento[] = $type->type;

      // Enable multilingual support (field translation) and locked options
      variable_set('i18n_node_extended_' . $type->type, I18N_LANGUAGE_ENABLED);
      variable_set('i18n_node_options_' . $type->type, array('current')); // No constant found in in i18n_node.variable
      variable_set('language_content_type_' . $type->type, I18N_MODE_TRANSLATE);
      variable_set('entity_translation_comment_filter_' . $type->type, FALSE);
      variable_set('entity_translation_node_metadata_' . $type->type, FALSE);

      // Remove language from all display
      mica_i18n_hide_language_display($type->type);

      // Set all display to default translated
      $instances = field_read_instances(array('entity_type' => 'node', 'bundle' => $type->type));
      foreach ($instances as $instance) {

        // Configure fields that should be 'translatable'
        $info = field_info_field_by_id($instance['field_id']);

        // only update the field if not already translatables but do not process field that have been excluded
        if (in_array($instance['widget']['type'], $translatables_widget_types) &&
          (!array_key_exists($type->type, $excludes) || !in_array($info['field_name'], $excludes[$type->type]))
        ) {
          $operations[] = array('entity_translation_translatable_batch', array(TRUE, $info['field_name']));
          $operations[] = array('entity_translation_translatable_switch', array(TRUE, $info['field_name']));

        }
        else if (isset($info['translatable']) && $info['translatable'] === '1') {
          // Explicitly set translatables to FALSE
          $operations[] = array('entity_translation_translatable_switch', array(FALSE, $info['field_name']));
          $operations[] = array('entity_translation_translatable_batch', array(FALSE, $info['field_name']));
        }

        // Configure 'Field Display'
        $operations[] = array('mica_i18n_update_displays', array($instance));
      }
    }
  }

  $operations[] = array('variable_set', array(MEMENTO_BUNDLES, $memento));

  $batch = array(
    'title' => 'Enabling field translations',
    'operations' => $operations,
    'file' => drupal_get_path('module', 'entity_translation') . '/entity_translation.admin.inc',
  );

  batch_set($batch);
}

function mica_i18n_fix_views_display() {

  $memento = variable_get(MEMENTO_VIEWS, array());
  $views = views_get_all_views();

  foreach ($views as $view) {
    if (!array_key_exists($view->name, $memento)) {
      $memento[] = $view->name;
      $save = FALSE;

      // Set translation of list items for page and default
      foreach (array_keys($view->display) as $display) {
        if (isset($view->display[$display]) && isset($view->display[$display]->display_options['fields'])) {
          foreach (array_keys($view->display[$display]->display_options['fields']) as $key) {
            // If the field is a list type
            $info = field_info_field($key);
            if ($info == NULL && strpos($key, '_field_') > 0) {
              // if field is through a relation
              $info = field_info_field(substr($key, strpos($key, '_field_') + 1));
            }

            if (isset($info['type']) && $info['type'] === 'list_text') {
              if (isset($view->display[$display]->display_options['fields'][$key]['type']) && $view->display[$display]->display_options['fields'][$key]['type'] !== 'list_key' || !isset($view->display[$display]->display_options['fields'][$key]['type'])) {
                $view->display[$display]->display_options['fields'][$key]['type'] = 'i18n_list_default';
                $save = TRUE;
              }
            }
          }
        }
      }

      if ($save) {
        $view->save();
        variable_set(MEMENTO_VIEWS, $memento);
      }
    }
  }
}

function mica_i18n_taxonomy_localizable() {
  $memento = variable_get(MEMENTO_TAXONOMIES, array());
  $taxonomies = taxonomy_get_vocabularies();
  foreach ($taxonomies as $taxonomy) {
    if (!array_key_exists($taxonomy->machine_name, $memento)) {
      $memento[] = $taxonomy->machine_name;

      $taxonomy->i18n_mode = I18N_MODE_LOCALIZE;
      taxonomy_vocabulary_save($taxonomy);
    }
  }
  variable_set(MEMENTO_TAXONOMIES, $memento);
}

function mica_i18n_search_index_update() {

  $memento = variable_get(MEMENTO_INDEXES, array());
  $indexes = search_api_index_load_multiple(FALSE);
  foreach ($indexes as $index) {

    if (!array_key_exists($index->machine_name, $memento)) {
      $memento[] = $index->machine_name;

      $index->options['fields']['language'] = array('type' => 'string');
      $index->options['data_alter_callbacks']['search_api_alter_language_control'] = array(
        'status' => 1,
        'weight' => '0',
        'settings' => array(
          'lang_field' => 'language',
          'languages' => array()
        ),
      );

      module_load_include('admin.inc', 'search_api');
      uasort($index->options['data_alter_callbacks'], 'search_api_admin_element_compare');

      $index->save();
      $index->reindex();
    }
  }

  variable_set(MEMENTO_INDEXES, $memento);
}

function mica_i18n_hide_language_display($type) {
  $settings = field_bundle_settings('node', $type);

  // Set language dropdown to appear before all other fields
  if (!array_key_exists('language', $settings['extra_fields']['form'])) {
    $settings['extra_fields']['form']['language']['weight'] = -50;
  }

  if (!array_key_exists('language', $settings['extra_fields']['display'])) {
    $settings['extra_fields']['display']['language'] = array();
  }

  foreach (array_keys(field_view_mode_settings('node', $type)) as $view_mode) {
    $settings['extra_fields']['display']['language'][$view_mode] = array(
      'weight' => 0,
      'visible' => FALSE,
    );
  }

  // set default view_mode also
  $settings['extra_fields']['display']['language']['default'] = array(
    'weight' => 0,
    'visible' => FALSE,
  );

  field_bundle_settings('node', $type, $settings);
}

function mica_i18n_get_translatables_widget_types() {
  /*
   * These are all widget types that are currently used by Mica:
   * 'text_textarea_with_summary', 'date_popup','file_generic','link_field','text_textfield','number',
   * 'node_reference_autocomplete','options_buttons','text_textarea','options_select','autocomplete_deluxe_taxonomy',
   * 'category_field_default_widget','name_widget','email_textfield','options_onoff','viewreference_select',
   * 'noderefcreate_autocomplete', 'multiselect', 'date_select', 'image_image', 'taxonomy_autocomplete',
   */

  // Translatables types are
  return array(
    'text_textarea_with_summary',
    'text_textfield',
    'text_textarea',
    'link_field',
    'category_field_default_widget',
  );
}

/*
 * Hook hook_translation_exclude_fields to exclude fields to be automatically enabled as translatable
 * functions implementing this hook must return an associative array of bundle => field_name
 */
function mica_i18n_translation_exclude_fields() {

  return array();
}
