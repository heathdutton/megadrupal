<?php

/**
 * Implementation of hook_views_api().
 */
function stop_spam_views_api() {
  return array('api' => '3.0');
}

/**
 * Implements hook_menu().
 */
function stop_spam_menu() {
  $items = array();
  
  $items['admin/config/system/stop_spam'] = array(
    'title' => 'Stop Spam',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stop_spam_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'stop_spam.admin.inc',
  );
  
  $items['admin/reports/stop_spam'] = array(
    'title' => 'External links',
    'page callback' => 'stop_spam_external_links_report',
    'access arguments' => array('view stop spam reports'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'stop_spam.report.inc',
  );
  
  $items['admin/reports/stop_spam/summary'] = array(
    'title' => 'Summary',
    'access arguments' => array('view stop spam reports'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  return $items;
}

/**
 * Implements hook_permission().
 */
function stop_spam_permission() {
  return array(
    'skip stop spam protection' => array(
      'title' => t('Skip Stop Spam protection'),
      'description' => t('Skip Stop Spam protection.'),
    ),
    'view stop spam reports' => array(
      'title' => t('View external links report'),
      'description' => t('View and rebuild report with external links.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 *
 * Adds custom validation functions to node and comment forms (if enabled). We
 * can't use hook_form_BASE_FORM_ID_alter(), because our handlers must be
 * launched after all other validators to prevent unnecessary checks when
 * validation has already failed.
 */
function stop_spam_form_alter(&$form, &$state, $form_id) {
  // Fix of notice on update.php main form.
  if (empty($state['build_info']['base_form_id'])) {
    return;
  }

  $protected_forms = variable_get('stop_spam_forms', array());

  switch ($state['build_info']['base_form_id']) {
    case 'comment_form':
      if (!empty($protected_forms['comment_form'])) {
        $form['#validate'][] = '_stop_spam_comment_form_validate';
      }
      break;

    case 'node_form':
      if (!empty($protected_forms[$form_id])) {
        $form['#validate'][] = '_stop_spam_node_form_validate';
      }
      break;
  }
}

/**
 * Implements hook_node_delete().
 */
function stop_spam_node_delete($node) {
  $content_types = variable_get('stop_spam_links_index_types', array());
  if (in_array($node->type, $content_types)) {
    db_delete('stop_spam_links')
      ->condition('entity_type', 'node')
      ->condition('entity_id', $node->nid)
      ->execute();
  }
}

/**
 * Implements hook_comment_delete().
 */
function stop_spam_comment_delete($comment) {
  db_delete('stop_spam_links')
    ->condition('entity_type', 'comment')
    ->condition('entity_id', $comment->cid)
    ->execute();
}

function _stop_spam_remove_www($host) {
  return preg_replace('/^www\./u', '', drupal_strtolower($host));
}

function _stop_spam_body_subfields($type) {
  switch ($type) {
    case 'node':
      return array('summary', 'value');

    case 'comment':
      return array('value');

    default:
      return array();
  }
}

function _stop_spam_extract_attributes($content, $tags) {
  static $document = NULL;

  if (!isset($document)) {
    $document = new DOMDocument();
  }

  $result = array();

  // We set the text encoding to UTF-8 and use a wrapper to prevent tags from
  // being added automatically.
  $html = '<head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/></head><body><div>' . $content . '</div></body>';
  if (!@$document->loadHTML($html)) {
    return $result;
  }

  foreach ($tags as $tag_name => $attr_name) {
    $result[$tag_name] = array();
    $elements = $document->getElementsByTagName($tag_name);

    foreach ($elements as $element) {
      $attribute = $element->getAttribute($attr_name);

      if (!empty($attribute)) {
        $result[$tag_name][] = $attribute;
      }
    }
  }

  return $result;
}

function _stop_spam_current_host($reset = FALSE) {
  static $current_host = NULL;

  if (!isset($current_host) || $reset) {
    $current_host = @parse_url($GLOBALS['base_url'], PHP_URL_HOST);
    $current_host = $current_host ? _stop_spam_remove_www($current_host) : FALSE;
  }
  return $current_host;
}

function _stop_spam_comment_form_validate($form, &$state) {
  module_load_include('inc', 'stop_spam');
  _stop_spam_form_validate($state['values'], 'comment');
}

function _stop_spam_node_form_validate($form, &$state) {
  module_load_include('inc', 'stop_spam');
  _stop_spam_form_validate($state['values'], 'node');
}
