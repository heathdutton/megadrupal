<?php

/**
 * @file
 * Adding menu advanced permissions functionality.
 *
 * Adds permission lines for every custom menu for all known operations
 * "add", "edit", "reset", "delete", "view". Also adds one more permission
 * which is bypass menu access.
 */

/**
 * Implements hook_menu().
 */
function menu_advanced_permissions_menu() {
  $items = array();

  $items['admin/config/people/menu_advanced_permissions'] = array(
    'title' => 'Menu advanced permissions settings',
    'description' => 'Configuration page on which you can change major settings for the menu advanced permissions module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_advanced_permissions_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'menu_advanced_permissions.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function menu_advanced_permissions_permission() {
  $perms = array();
  if (variable_get('map_menu_list_access', 1)) {
    $perms['menu list access'] = array(
      'title' => t('Access list of menus'),
      'description' => t('View list of menus.'),
    );

    if (variable_get('map_menu_parents_access', 1)) {
      $perms['menu parents access'] = array(
        'title' => t('Access menu parents'),
        'description' => t('View parents.'),
      );
    }

    if (variable_get('map_menu_settings_access', 1)) {
      $perms['menu settings access'] = array(
        'title' => t('Access menu settings'),
        'description' => t('Access menu settings form.'),
      );
    }

    if (variable_get('map_add_menu', 1)) {
      $perms['add menu access'] = array(
        'title' => t('Add menu'),
        'description' => t('Access add menu form.'),
      );
    }
  }

  $menus = menu_get_menus();
  foreach ($menus as $name => $title) {
    $perms += menu_advanced_permissions_list_permissions($name, $title);
  }

  return $perms;
}

/**
 * Helper function to generate standard menu item permission list for a given menu.
 *
 * @param string $name
 *   The machine-readable name of the menu.
 *
 * @param string $title
 *   The real name of the menu.
 *
 * @return array
 *   An array of permission names and descriptions.
 */
function menu_advanced_permissions_list_permissions($name, $title) {
  $perms = array();

  if (variable_get('map_menu_list_access', 1)) {
    if (variable_get('map_edit_menu', 1)) {
      $perms["edit $name menu"] = array(
        'title' => t('%title: Edit custom menu', array('%title' => $title)),
      );
    }

    if (variable_get('map_delete_menu', 1)) {
      $perms["delete $name menu"] = array(
        'title' => t('%title: Delete custom menu', array('%title' => $title)),
      );
    }
  }

  if (variable_get('map_view_menu_items', 1)) {
    $perms["view $name menu"] = array(
      'title' => t('%title: View list of links for menu', array('%title' => $title)),
    );

    if (variable_get('map_add_menu_item', 1)) {
      $perms["add $name menu"] = array(
        'title' => t('%title: Add menu item', array('%title' => $title)),
      );
    }

    if (variable_get('map_edit_menu_item', 1)) {
      $perms["edit $name menu item"] = array(
        'title' => t('%title: Edit menu item', array('%title' => $title)),
      );
    }

    if (variable_get('map_reset_menu_item', 1)) {
      $perms["reset $name menu item"] = array(
        'title' => t('%title: Reset menu item', array('%title' => $title)),
      );
    }

    if (variable_get('map_delete_menu_item', 1)) {
      $perms["delete $name menu item"] = array(
        'title' => t('%title: Delete menu item', array('%title' => $title)),
      );
    }
  }

  return $perms;
}

/**
 * Implementation of hook_menu_alter().
 */
function menu_advanced_permissions_menu_alter(&$items) {
  if (variable_get('map_menu_list_access', 1)) {
    $items['admin/structure/menu']['access arguments'] = array('menu list access');

    if (variable_get('map_menu_parents_access', 1)) {
      $items['admin/structure/menu/parents']['access arguments'] = array('menu parents access');
    }

    if (variable_get('map_add_menu', 1)) {
      $items['admin/structure/menu/add']['access arguments'] = array('add menu access');
    }

    if (variable_get('map_menu_settings_access', 1)) {
      $items['admin/structure/menu/settings']['access arguments'] = array('menu settings access');
    }

    if (variable_get('map_edit_menu', 1)) {
      $items['admin/structure/menu/manage/%menu/edit']['access callback'] = 'menu_advanced_permissions_menu_access';
      $items['admin/structure/menu/manage/%menu/edit']['access arguments'] = array('edit', 4);
    }

    if (variable_get('map_delete_menu', 1)) {
      $items['admin/structure/menu/manage/%menu/delete']['access callback'] = 'menu_advanced_permissions_menu_access';
      $items['admin/structure/menu/manage/%menu/delete']['access arguments'] = array('delete', 4);
    }
  }

  if (variable_get('map_view_menu_items', 1)) {
    $items['admin/structure/menu/manage/%menu']['access callback'] = 'menu_advanced_permissions_menu_access';
    $items['admin/structure/menu/manage/%menu']['access arguments'] = array('view', 4);

    if (variable_get('map_add_menu_item', 1)) {
      $items['admin/structure/menu/manage/%menu/add']['access callback'] = 'menu_advanced_permissions_menu_access';
      $items['admin/structure/menu/manage/%menu/add']['access arguments'] = array('add', 4);
    }

    if (variable_get('map_edit_menu_item', 1)) {
      $items['admin/structure/menu/item/%menu_link/edit']['access callback'] = 'menu_advanced_permissions_menu_item_access';
      $items['admin/structure/menu/item/%menu_link/edit']['access arguments'] = array('edit', 4);
    }

    if (variable_get('map_reset_menu_item', 1)) {
      $items['admin/structure/menu/item/%menu_link/reset']['access callback'] = 'menu_advanced_permissions_menu_item_access';
      $items['admin/structure/menu/item/%menu_link/reset']['access arguments'] = array('reset', 4);
    }

    if (variable_get('map_delete_menu_item', 1)) {
      $items['admin/structure/menu/item/%menu_link/delete']['access callback'] = 'menu_advanced_permissions_menu_item_access';
      $items['admin/structure/menu/item/%menu_link/delete']['access arguments'] = array('delete', 4);
    }
  }
}

/**
 * Determines whether the current user may perform the operation on the menu.
 *
 * @param $op
 *   The operation to be performed on the menu. Possible values are:
 *   - "view"
 *   - "add"
 *   - "edit"
 *   - "delete"
 * @param $menu
 *   The menu on which the operation wiil be performed (e.g. 'navigation').
 * @param $account
 *   Optional, a user object representing the user for whom the operation is to
 *   be performed. Determines access for a user other than the current user.
 *
 * @return
 *   TRUE if the operation may be performed, FALSE otherwise.
 */
function menu_advanced_permissions_menu_access($op, $menu, $account = NULL) {
  $rights = &drupal_static(__FUNCTION__, array());

  if (!$menu || !in_array($op, array('view', 'add', 'edit', 'delete'), TRUE)) {
    // If there was no menu to check against, or the $op was not one of the
    // supported ones, we return access denied.
    return FALSE;
  }
  // If no user object is supplied, the access check is for the current user.
  if (empty($account) || !(is_object($account) && isset($account->uid))) {
    $account = $GLOBALS['user'];
  }

  // Get the machine-readable menu name.
  if (!empty($menu['menu_name'])) {
    $menu = $menu['menu_name'];
  }
  else {
    return FALSE;
  }

  // If we've already checked access for this menu, user and op, return from cache.
  if (isset($rights[$account->uid][$menu][$op])) {
    return $rights[$account->uid][$menu][$op];
  }

  if (user_access('administer menu', $account)) {
    $rights[$account->uid][$menu][$op] = TRUE;
    return TRUE;
  }

  if (!user_access('menu list access', $account)) {
    $rights[$account->uid][$menu][$op] = FALSE;
    return FALSE;
  }
  if (user_access($op . ' ' . $menu . ' menu', $account)) {
    $rights[$account->uid][$menu][$op] = TRUE;
    return TRUE;
  }

  return FALSE;
}

/**
 * Determines whether the current user may perform the operation on the menu item.
 *
 * @param $op
 *   The operation to be performed on the menu item. Possible values are:
 *   - "edit"
 *   - "reset"
 *   - "delete"
 * @param $menu
 *   The menu item on which the operation wiil be performed.
 * @param $account
 *   Optional, a user object representing the user for whom the operation is to
 *   be performed. Determines access for a user other than the current user.
 *
 * @return
 *   TRUE if the operation may be performed, FALSE otherwise.
 */
function menu_advanced_permissions_menu_item_access($op, $menu_item, $account = NULL) {
  $rights = &drupal_static(__FUNCTION__, array());

  if (!$menu_item || !in_array($op, array('edit', 'reset', 'delete'), TRUE)) {
    // If there was no menu item to check against, or the $op was not one of the
    // supported ones, we return access denied.
    return FALSE;
  }
  // If no user object is supplied, the access check is for the current user.
  if (empty($account) || !(is_object($account) && isset($account->uid))) {
    $account = $GLOBALS['user'];
  }

  if (!empty($menu_item['menu_name'])) {
    $menu = $menu_item['menu_name'];
  }
  else {
    return FALSE;
  }

  // If we've already checked access for this menu item, user and op, return from cache.
  if (isset($rights[$account->uid][$menu][$op])) {
    return $rights[$account->uid][$menu][$op];
  }

  if (user_access('administer menu', $account)) {
    $rights[$account->uid][$menu][$op] = TRUE;
    return TRUE;
  }

  if (user_access($op . ' ' . $menu . ' menu item', $account)) {
    $rights[$account->uid][$menu][$op] = TRUE;
    return TRUE;
  }

  return FALSE;
}
