<?php

/**
 * Implements hook_theme.
 */
function relation_edit_theme($existing, $type, $theme, $path) {
  return array(
    'relation_edit_widget' => array(
      'variables' => array('element' => array()),
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function relation_edit_field_widget_info() {
  return array(
    'relation_edit' => array(
      'label' => t('Edit form of related content'), 
      'field types' => array('relation'),
      'settings' => array('node_bundle' => NULL, 'hidden_fields' => array('actions', 'options', 'revision_information', 'author', 'additional_settings'), 'delete_endpoint' => TRUE),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM, 
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function relation_edit_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  
  // Load node types
  $bundle_options = array();
  foreach(node_type_get_types() as $type)
    $bundle_options[$type->type] = $type->name;
  
  $form['node_bundle'] = array(
    '#type' => 'select', 
    '#title' => t('Type of related content'), 
    '#default_value' => $settings['node_bundle'],
    '#options' => $bundle_options,
    '#required' => TRUE,
    '#description' => t('Related entities that are not content of this type will be shown as link.'),
  );
  
  if($settings['node_bundle']) {
    // Load fields
    module_load_include('inc', 'node', 'node.pages');
    $node_form_state = array();
    $node_form = node_form(array(), $node_form_state, (object)array('type' => $settings['node_bundle'], 'language' => LANGUAGE_NONE));
    $hidden_fields_options = array();
    foreach ($node_form as $field_name => $field) {
      if(is_array($field) && isset($field['#type']) && $field['#type'] != 'value' && $field['#type'] != 'hidden')
        $hidden_fields_options[$field_name] = isset($field['#title']) ? $field['#title'] : $field_name;
    }
    
    $form['hidden_fields'] = array(
      '#type' => 'checkboxes', 
      '#title' => t('Hide this fields'), 
      '#default_value' => $settings['hidden_fields'],
      '#options' => $hidden_fields_options,
    );
  } else {
    $form['hidden_fields'] = array(
      '#markup' => t('Select and save <em>Type of related nodes</em> for setup hidden fields.'),
    );
  }
  
  $form['delete_endpoint'] = array(
    '#type' => 'checkbox', 
    '#title' => t('Delete endpoints'), 
    '#default_value' => $settings['delete_endpoint'],
    '#description' => t('If a user delete relation by this widget, delete related content too. Attention, related content will not be deleted, if a user delete parrent content.'),
  );
  
  // Add process function which add submit handler
  $form['#process'][] = 'relation_edit_field_widget_settings_form_process';

  return $form;
}

/**
 * Process function of relation_edit_field_widget_settings_form.
 */
function relation_edit_field_widget_settings_form_process($element, &$form_state, &$form) {
  $form['#submit'][] = 'relation_edit_field_widget_settings_form_submit';
  
  return $element;
}

/**
 * Implements of hook_field_widget_form().
 */
function relation_edit_field_widget_settings_form_submit($form, &$form_state) {
  relation_edit_weight_field($form_state['values']['instance']['settings']['relation_type']);
}

/**
 * Create field and instance if needed.
 */
function relation_edit_weight_field($bundle) {
  if(field_info_instance('relation', 'field_weight', $bundle))
    return;
  
  if(!field_read_field('field_weight')) {
    field_create_field(array(
      'field_name' => 'field_weight',
      'type' => 'number_integer',
      'cardinality' => '1',
    ));
  }
  
  field_create_instance(array(
    'label' => 'Weight',
    'required' => 1,
    'default_value' => array(
      0 => array('value' => '0'),
    ),
    'field_name' => 'field_weight',
    'entity_type' => 'relation',
    'bundle' => $bundle,
  ));
  
  drupal_set_message(t('Weight field for relation bundle has been created.'));
}

/**
 * Implements of hook_field_widget_form().
 */
function relation_edit_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  
  // Check context
  if($element['#entity_type'] != 'node') {
    if(user_access('administer content types'))
      drupal_set_message(t('Relation edit widget works only if parrent entity is node.'), 'error');
    return $element;
  }
  if(!isset($settings) || !isset($settings['node_bundle'])) {
    if(user_access('administer content types'))
      drupal_set_message(t('Relation edit widget for field %field is not configured.', array('%field' => check_plain($instance['label']))), 'error');
    return $element;
  }
  
  $field_state = field_form_get_state($form['#parents'], $field['field_name'], $langcode, $form_state);
  
  // Determine the number of widgets to display.
  $add_blank = 3;
  if ($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED)
    $max = $field_state['items_count'] + $add_blank;
  else
    $max = $field['cardinality'];
  
  // Check if weight field exists
  relation_edit_weight_field($instance['settings']['relation_type']);
  
  // Load relations
  if(isset($form_state['node']->nid)) {
    $relations_id = array_keys(relation_query('node', $form_state['node']->nid)->execute());
    $relations = array_values(entity_load('relation', $relations_id));
  }
  
  // Process items
  for ($delta = 0; $delta < $max; $delta++) {
    
    // Create or load node object
    if(isset($relations[$delta])) {
      // Load related node
      $relation = $relations[$delta];
      
      if($relation->relation_type != $instance['settings']['relation_type'])
        continue;
      
      foreach ($relation->endpoints[LANGUAGE_NONE] as $endpoint) {
        if($endpoint['entity_id'] != $form_state['node']->nid && $endpoint['entity_type'] == 'node') {
          $related_node = node_load($endpoint['entity_id']);
          break;
        }
      }
      
      if(!isset($related_node))
        continue;
      
      $weight = $relation->field_weight[LANGUAGE_NONE][0]['value'];
    }
    else {
      // Create new node
      global $user;
      $related_node = (object) array(
        'uid' => $user->uid,
        'name' => (isset($user->name) ? $user->name : ''),
        'type' => $settings['node_bundle'],
        'language' => $langcode,
      );
      
      // Determine default weight
      $weight = (isset($weight_max) ? $weight_max : 0) + 1;
    }
    
    // Maintain maximum weight
    $weight_max = isset($weight_max) ? max($weight_max, $weight) : $weight;
    
    $element[$delta] = array(
      '#delta' => $delta,
      '#weight' => $weight,
    );
    
    if(isset($relation))
      $element[$delta]['rid'] = array( // ID of edited relation
        '#type' => 'value',
        '#value' => $relation->rid,
      );
    
    $element[$delta]["$instance[field_name]-{$delta}-node"] = array(
      '#type' => 'subform',
      '#subform_id' => 'node_form',
      '#subform_file' => array('module' => 'node', 'name' => 'node.pages'),
      '#subform_arguments' => array($related_node, $settings),
      '#subform_default_triggering_element' => array('actions', 'submit'),
      '#required' => isset($relation),
    );
    $element[$delta]['_weight'] = array(
      '#type' => 'weight',
      '#title' => t('Weight for row @number', array('@number' => $delta + 1)),
      '#title_display' => 'invisible',
      '#delta' => $max,
      '#default_value' => isset($items[$delta]['_weight']) ? $items[$delta]['_weight'] : $weight,
      '#weight' => 100,
    );
    $element[$delta]['_delete'] = array(
      '#type' => 'checkbox',
      '#title' => t('Delete'),
      '#default_value' => 0,
      '#weight' => 101,
    );
    
    // Unset reusable variables
    unset($relation);
  }
  
  // Element metadata
  $id_prefix = implode('-', array_merge($form['#parents'], array($field['field_name'])));
  $wrapper_id = drupal_html_id($id_prefix . '-add-more-wrapper');
  $element += array(
    '#theme' => 'field_multiple_value_form', 
    '#field_name' => $field['field_name'], 
    '#cardinality' => FIELD_CARDINALITY_UNLIMITED, // Unlimited because we want reordeable beahvior always 
    '#title' => check_plain($instance['label']), 
    '#required' => $instance['required'], 
    '#description' => field_filter_xss($instance['description']), 
    '#prefix' => '<div id="' . $wrapper_id . '">', 
    '#suffix' => '</div>', 
    '#max_delta' => $field_state['items_count'],
    '#process' => array('relation_edit_field_widget_form_process'),
  );
  
  // Add button if "unlimited"
  if ($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED) {
    $element['add_more'] = array(
      '#type' => 'submit', 
      '#name' => strtr($id_prefix, '-', '_') . '_add_more', 
      '#value' => t('Add another item'), 
      '#attributes' => array('class' => array('field-add-more-submit')), 
      '#limit_validation_errors' => array(array_merge($form['#parents'], array($field['field_name'], $langcode))), 
      '#submit' => array('field_add_more_submit'), 
      '#ajax' => array(
        'callback' => 'field_add_more_js', 
        'wrapper' => $wrapper_id, 
        'effect' => 'fade',
      ),
    );
  }
  
  return $element;
}

/**
 * Process function for parrent form.
 */
function relation_edit_field_widget_form_process($element, &$form_state, &$form) {
  // Handler for save relations
  $form['#submit']['relation_edit_widget_form_submit'] = 'relation_edit_widget_form_submit';
  
  // Handler that handles all subforms.
  $form['#submit']['subform_submit_all'] = 'subform_submit_all';
  
  return $element;
}

/**
 * Submit handler that save relations.
 */
function relation_edit_widget_form_submit($form, &$form_state) {
  foreach ($form_state['field'] as $field) {
    // Only own widget type
    if($field[LANGUAGE_NONE]['instance']['widget']['type'] != 'relation_edit')
      continue;
    
    $field_name = $field[LANGUAGE_NONE]['instance']['field_name'];
    $settings = $field[LANGUAGE_NONE]['instance']['widget']['settings'];
    
    // Walk widget items
    foreach ($form_state['values'][$field_name][LANGUAGE_NONE] as $delta => $item) {
      // Filter buttons
      if(is_string($item))
        continue;
      
      $subform_values = &$form_state['temporary']['subform']['subform-' . $field_name . '-' . LANGUAGE_NONE . '-' . $delta . '-' . $field_name . '-' . $delta . '-node']['values'];
      $item_values = &$form_state['values'][$field_name][LANGUAGE_NONE][$delta];
      
      // Delegate processing of one widget item
      relation_edit_widget_item_submit(&$form_state, $field_name, $delta, &$subform_values, &$item_values, $settings);
    }
    
    // Set settings for parrent node
    $form_state['values']['_relation_edit']['child'] = FALSE;
    $form_state['values']['_relation_edit']['settings'][$field_name] = $settings;
  }
}

/**
 * Save relations for one widget item.
 */
function relation_edit_widget_item_submit(&$form_state, $field_name, $delta, &$subform_values, &$item_values, $settings) {
  
  // Delete relation
  if($item_values['_delete']) {
    if(isset($item_values['rid'])) {
      // Delete related node
      if($settings['delete_endpoint']) {
        $relation = relation_load($item_values['rid']);
        node_delete($relation->endpoints[LANGUAGE_NONE][1]['entity_id']);
      }
      // Delete relation
      relation_delete($item_values['rid']);
    }
    
    // Clear subform
    unset($form_state['temporary']['subform']['subform-' . $field_name . '-' . LANGUAGE_NONE . '-' . $delta . '-' . $field_name . '-' . $delta . '-node']);
  }
  
  // Exist relation - save weight to relation
  elseif(isset($item_values['rid'])) {
    $relation = relation_load($item_values['rid']);
    $relation->field_weight[LANGUAGE_NONE][0]['value'] = $item_values['_weight'];
    relation_save($relation);
  }
  
  // New node - create relation
  elseif(!empty($subform_values['title'])) {
    $subform_values['_relation_edit'] = array(
      'child' => TRUE,
      'nid' => isset($form_state['node']->nid) ? $form_state['node']->nid : NULL,
      'weight' => $item_values['_weight'],
      'settings' => $settings,
      'form_token' => $form_state['values']['form_token'],
    );
  }
}

/**
 * Implements hook_node_insert. Create relation between parrent node and newly created node. If parrent node is newly created too, relation will be created after save of parrent node.
 */
function relation_edit_node_insert($node) {
  if(!isset($node->_relation_edit))
    return;
  
  static $prepared_relations = array();
  
  if($node->_relation_edit['child']) {
    // Configure endpoints
    $relation = relation_create($node->_relation_edit['settings']['relation_bundle'], array(
      array('entity_type' => 'node', 'entity_id' => isset($node->_relation_edit['nid']) ? $node->_relation_edit['nid'] : NULL), // parrent
      array('entity_type' => 'node', 'entity_id' => $node->nid), // child
    ));
    
    // Set weight
    $relation->field_weight[LANGUAGE_NONE][0]['value'] = $node->_relation_edit['weight'];
    
    // Save relation now or later?
    if(isset($node->_relation_edit['nid']))
      relation_save($relation);
    else
      $prepared_relations[$node->_relation_edit['form_token']][] = $relation;
  }
  elseif(!$node->_relation_edit['child']) {
    // Save relations if parrent node is new too.
    if(isset($prepared_relations[$node->form_token])) {
      foreach ($prepared_relations[$node->form_token] as $relation) {
        $relation->endpoints[LANGUAGE_NONE][0]['entity_id'] = $node->nid;
        relation_save($relation);
      }
    }
    unset($prepared_relations[$node->form_token]);
  }
}

/**
 * Implements hook_form_alter.
 */
function relation_edit_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Node form is in our widget
  if(isset($form_state['build_info']['args'][1])) {
    $settings = $form_state['build_info']['args'][1];
    
    // Hide fields
    foreach ($settings['hidden_fields'] as $field_key) {
      if($field_key)
        $form[$field_key]['#access'] = FALSE;
    }
    
    
  }
}

/**
 * Implements of hook_field_widget_properties_alter().
 */
/*function relation_edit_field_widget_properties_alter(&$widget, $context) {

}*/

