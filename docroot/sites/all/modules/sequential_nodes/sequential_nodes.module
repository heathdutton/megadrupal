<?php

/**
 * @file
 * Contains module hooks.
 */

/**
 * Implements hook_help().
 */
function sequential_nodes_help($path, $arg) {
  switch ($path) {
    case 'admin/help#sequential_nodes':
      // Return a line-break version of the module README.txt
      return check_markup(file_get_contents(dirname(__FILE__) . "/README.txt"), 'plain_text');
  }
}

/**
 * Implements hook_permission().
 */
function sequential_nodes_permission() {
  return array(
    'administer node sequences' => array(
      'title' => t('Administer displaying of node sequences'),
      'description' => t('Allows to change the way how links to previous/next nodes are displayed'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function sequential_nodes_menu() {
  $items['admin/config/user-interface/prev-next'] = array(
    'title' => 'Previous/Next Link Settings',
    'description' => 'Configure how Previous/Next links are displayed.',
    'file' => 'sequential_nodes.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sequential_nodes_admin_settings'),
    'access arguments' => array('administer node sequences'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * Implements hook_field_extra_fields().
 *
 * Declare our links as a pseudo-field.
 */
function sequential_nodes_field_extra_fields() {
  $extras = array();
  foreach (node_type_get_names() as $type => $name) {

    $extras['node'][$type] = array(
      'display' => array(
        'prevnext' => array(
          'label' => t('Previous/Next links'),
          'description' => t('Display previous/next links.'),
          'weight' => 10,
        ),
      ),
    );
  }
  return $extras;
}

/**
 * Implements hook_node_view().
 *
 * Adds our node sequence links to nodes of all types we can find.
 */
function sequential_nodes_node_view($node, $view_mode, $langcode) {
  $info = field_info_extra_fields('node', $node->type, 'display');
  if (!$info['prevnext']['display'][$view_mode]['visible']) {
    return;
  }
  module_load_include('inc', 'sequential_nodes');
  $next_node = _sequential_nodes_page_link($node);
  $prev_node = _sequential_nodes_page_link($node, TRUE);
  $prev_button = variable_get('sequential_nodes_prev_link', '[node:title]');
  $next_button = variable_get('sequential_nodes_next_link', '[node:title]');
  $mid_node = variable_get('sequential_nodes_use_mid_link', '0');
  $mid_button = variable_get('sequential_nodes_mid_link', '[node:title]');

  $theme_array = array(
    '#theme' => 'prev_next_link',
  );

  if ($prev_node) {
    $theme_array += array(
      '#previd' => $prev_node->nid,
      '#prevtitle' => token_replace($prev_button, array('node' => $prev_node)),
    );
  }

  if ($mid_node !== '0') {
    if ($mid_node === 'jumplink') {
      $midopts = array('fragment' => $mid_node, 'external' => TRUE);
      $theme_array += array(
        '#attached' => array(
          'js' => array(
            0 => array(
              'data' => drupal_get_path('module', 'sequential_nodes') . '/sequential_nodes.js',
              'type' => 'file',
            ),
            1 => array(
              'data' => array(
                'sequential_nodes' => array(
                  'mid_speed' => variable_get('sequential_nodes_mid_speed', 'slow'),
                ),
              ),
              'type' => 'setting',
            ),
          ),
        ),
      );
    }
    else {
      $midopts = array();
    }
    $theme_array += array(
      '#midid' => $mid_node,
      '#midtitle' => token_replace($mid_button, array('node' => $node)),
      '#midopts' => $midopts,
    );
  }

  if ($next_node) {
    $theme_array += array(
      '#nextid' => $next_node->nid,
      '#nexttitle' => token_replace($next_button, array('node' => $next_node)),
    );
  }

  $node->content['prevnext'] = $theme_array;
}

/**
 * Implements hook_theme().
 *
 * Adds theme for previous/next links
 */
function sequential_nodes_theme($existing, $type, $theme, $path) {
  return array(
    'prev_next_link' => array(
      'variables' => array(
        'previd' => NULL,
        'prevtitle' => NULL,
        'midid' => NULL,
        'midtitle' => NULL,
        'midopts' => NULL,
        'nextid' => NULL,
        'nexttitle' => NULL),
      'template' => 'prev-next-link',
    ),
  );
}
