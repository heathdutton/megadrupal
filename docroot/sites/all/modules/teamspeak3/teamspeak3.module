<?php

/**
 * @file
 * Module implementation.
 */

/**
 * Implements hook_menu().
 */
function teamspeak3_menu() {

  $items = array();
  
  $items['admin/config/gaming'] = array(
    'title' => 'Gaming',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/gaming/teamspeak'] = array(
    'title' => 'Teamspeak',
    'description' => 'Configure the Teamspeak 3 module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('teamspeak3_admin_settings'),
    'access arguments' => array('administer teamspeak'),
    'file' => 'teamspeak3.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/gaming/teamspeak/settings/general'] = array(
    'title' => 'Settings',
    'description' => 'General settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('teamspeak3_admin_settings'),
    'access arguments' => array('administer teamspeak'),
    'file' => 'teamspeak3.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/gaming/teamspeak/settings/authentication'] = array(
    'title' => 'Authentication',
    'description' => 'Authentication settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('teamspeak3_admin_authentication'),
    'access arguments' => array('administer teamspeak'),
    'file' => 'teamspeak3.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -8,
  );

  $items['admin/config/gaming/teamspeak/settings/advanced'] = array(
    'title' => 'Advanced',
    'description' => 'Advanced settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('teamspeak3_admin_advanced'),
    'access arguments' => array('administer teamspeak'),
    'file' => 'teamspeak3.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -6,
  );

  return $items;

}


/**
 * Implements hook_permission().
 */
function teamspeak3_permission() {

  return array(
    'administer teamspeak' => array(
      'title' => t('Administer Teamspeak'),
      'description' => t('Administer the Teamspeak 3 module.'),
    ),
    'access teamspeak' => array(
      'title' => t('View Teamspeak'),
      'description' => t('View the Teamspeak 3 module block.'),
    ),
  );

}


/**
 * Implements hook_block_info().
 */
function teamspeak3_block_info() {

  $blocks['teamspeak3']['info'] = t('Teamspeak 3');
  return $blocks;

}


/**
 * Helper function to sort users inside channels.
 */
function teamspeak3_sort_users($a, $b) {

  return strcasecmp($a["client_nickname"], $b["client_nickname"]);

}


/**
 * Replace Teamspeak 3 server query characters with proper ones.
 */
function teamspeak3_unescape($str, $reverse = FALSE) {

  $find = array(
    '\\\\',
    "\/",
    "\s",
    "\p",
    "\a",
    "\b",
    "\f",
    "\n",
    "\r",
    "\t",
    "\v");

  $rplc = array(
    chr(92),
    chr(47),
    chr(32),
    chr(124),
    chr(7),
    chr(8),
    chr(12),
    chr(10),
    chr(3),
    chr(9),
    chr(11));

  if (!$reverse) {
    return str_replace($find, $rplc, $str);
  }

  return str_replace($rplc, $find, $str);

}


/**
 * Parse a server query response line.
 */
function teamspeak3_parse_line($raw_line) {

  $data = array();
  $raw_items = explode("|", $raw_line);
  foreach ($raw_items as $raw_item) {
    $raw_data = explode(" ", $raw_item);
    $temp_data = array();
    foreach ($raw_data as $r) {
      $a = explode("=", $r, 2);
      $temp_data[$a[0]] = isset($a[1]) ? teamspeak3_unescape($a[1]) : "";
    }
    $data[] = $temp_data;
  }
  return $data;

}


/**
 * Send a command to the Teamspeak 3 server and return the response.
 */
function teamspeak3_send_command($socket, $command) {

  $response = '';
  fwrite($socket, "$command\n");

  do {
    // Read the server response.
    $response .= fread($socket, 8096);
  } while (strpos($response, 'error id=') === FALSE);

  if (strpos($response, "error id=0") === FALSE) {
    throw new Exception("The server returned the following error: " . teamspeak3_unescape(trim($response)));
  }

  return $response;

}


/**
 * Render the Teamspeak 3 users list.
 */
function teamspeak3_render_users($usersdata, $parent_id, $imagespath) {

  $output = '';
  foreach ($usersdata as $user) {

    if ($user["client_type"] == 0 && $user["cid"] == $parent_id) {

      $icon = "16x16_player_off.png";

      if ($user["client_away"] == 1) {
        $icon = "16x16_away.png";
      }
      elseif ($user["client_flag_talking"] == 1) {
        $icon = "16x16_player_on.png";
      }
      elseif ($user["client_output_hardware"] == 0) {
        $icon = "16x16_hardware_output_muted.png";
      }
      elseif ($user["client_output_muted"] == 1) {
        $icon = "16x16_output_muted.png";
      }
      elseif ($user["client_input_hardware"] == 0) {
        $icon = "16x16_hardware_input_muted.png";
      }
      elseif ($user["client_input_muted"] == 1) {
        $icon = "16x16_input_muted.png";
      }

      $output .= '<div class="teamspeak-item">';
      $output .= '<div class="teamspeak-label">';
      $output .= '<img src="' . $imagespath . $icon . '" />' . htmlentities($user["client_nickname"], ENT_COMPAT, "ISO-8859-1");
      $output .= '</div></div>';

    }
  }

  return $output;

}

/**
 * Render a Teamspeak 3 spacer.
 */
function teamspeak3_render_spacer($spacer) {

  $output = '';
  $spacer = preg_replace('/\[\w*\]/', '', $spacer);
  $output .= '<div class="teamspeak-item">';
  $output .= '<div class="teamspeak-spacer">';
  $output .= ($spacer == "___") ? '<hr class="teamspeak-spacer-line" />' : $spacer;
  $output .= '</div>';
  $output .= '</div>';
  return $output;

}

/**
 * Render the Teamspeak 3 channels list.
 */
function teamspeak3_render_channels($channelsdata, $usersdata, $parent_id, $imagespath) {

  $output = '';
  foreach ($channelsdata as $channel) {

    if ($channel["pid"] == $parent_id) {

      if (stristr($channel["channel_name"], 'spacer')) {

        $output .= teamspeak3_render_spacer($channel["channel_name"]);
        $output .= teamspeak3_render_channels($channelsdata, $usersdata, $channel["cid"], $imagespath);

      }
      else {

        $icon = "16x16_channel_green.png";
        if ($channel["channel_maxclients"] > -1 && ($channel["total_clients"] >= $channel["channel_maxclients"])) {
          // Full channel.
          $icon = "16x16_channel_red.png";
        }
        elseif ($channel["channel_maxfamilyclients"] > -1 && ($channel["total_clients_family"] >= $channel["channel_maxfamilyclients"])) {
          // Unjoinable channel.
          $icon = "16x16_channel_red.png";
        }
        elseif ($channel["channel_flag_password"] == 1) {
          // Password channel.
          $icon = "16x16_channel_yellow.png";
        }

        $output .= '<div class="teamspeak-item">';
        $output .= '<div class="teamspeak-label">';
        $output .= '<img src="' . $imagespath . $icon . '" />' . htmlentities($channel["channel_name"]);
        $output .= '</div>';

        if (count($usersdata) > 0) {
          // If the channel is not empty, render the users.
          $output .= teamspeak3_render_users($usersdata, $channel["cid"], $imagespath);
        }

        $output .= teamspeak3_render_channels($channelsdata, $usersdata, $channel["cid"], $imagespath);
        $output .= '</div>';
      }

    }

  }

  return $output;

}

/**
 * Return the Teamspeak block HTML content.
 */
function teamspeak3_render() {

  $output = '';
  $socket = NULL;
  $serverdata = array();
  $channelsdata = array();
  $usersdata = array();

  $address = variable_get('teamspeak3_address', NULL);
  $port = variable_get('teamspeak3_port', 10011);
  $serverid = variable_get('teamspeak3_server_id', 1);
  $username = variable_get('teamspeak3_username', NULL);
  $password = variable_get('teamspeak3_password', NULL);
  $timeout = variable_get('teamspeak3_timeout', 3);
  $cachetime = variable_get('teamspeak3_cache_time', 30);
  $cachedata = variable_get('teamspeak3_cache_data', NULL);
  $lastcachetime = variable_get('teamspeak3_last_cache_time', NULL);
  $imagespath = base_path() . drupal_get_path('module', 'teamspeak3') . '/images/';

  // If cache is enabled and we got data set in the cache variable.
  if (($cachetime > 0) && ($cachedata != NULL) && ($lastcachetime != NULL) && (($lastcachetime + ($cachetime)) > REQUEST_TIME)) {
    // Fetch block content from the cache.
    return $cachedata;
  }

  try {

    if ($address == NULL) {
      throw new Exception("Server query address has not been configured");
    }

    if ($username == NULL) {
      throw new Exception("Server query username has not been configured");
    }

    if ($password == NULL) {
      throw new Exception("Server query password has not been configured");
    }

    $socket = @fsockopen($address, $port, $errno, $errstr, $timeout);
    if (!$socket) {
      throw new Exception("Socket error: $errstr [$errno]");
    }

    @socket_set_timeout($socket, $timeout);
    if (!trim(fgets($socket)) == "TS3") {
      throw new Exception("Not a Teamspeak 3 server/bad query port");
    }

    $response  = "";
    $response .= teamspeak3_send_command($socket, "use sid=" . $serverid);
    $response .= teamspeak3_send_command($socket, "serverinfo");
    $response .= teamspeak3_send_command($socket, "channellist -topic -flags -voice -limits");
    $response .= teamspeak3_send_command($socket, "clientlist -uid -away -voice -groups");
    $response .= teamspeak3_send_command($socket, "servergrouplist");
    $response .= teamspeak3_send_command($socket, "channelgrouplist");
    $response  = utf8_decode($response);

    $lines = explode("error id=0 msg=ok\n\r", $response);

    if (count($lines) == 7) {

      $serverdata = teamspeak3_parse_line($lines[1]);
      $serverdata = $serverdata[0];
      $channelsdata = teamspeak3_parse_line($lines[2]);
      $usersdata = teamspeak3_parse_line($lines[3]);
      usort($usersdata, "teamspeak3_sort_users");

      // Render the block content.
      $output .= '<div class="teamspeak-viewer">';

      $output .= '<div class="teamspeak-server-name"><img src="' . $imagespath . '16x16_server_green.png" />' . $serverdata["virtualserver_name"] . "</div>";
      if (count($channelsdata) > 0) {
        $output .= teamspeak3_render_channels($channelsdata, $usersdata, 0, $imagespath);
      }

      $output .= '</div>';

      // Cache the output.
      if ($cachetime > 0) {
        variable_set('teamspeak3_cache_data', $output);
        variable_set('teamspeak3_last_cache_time', REQUEST_TIME);
      }

    }
    else {
      // Not a proper server query response.
      throw new Exception("Invalid Teamspeak 3 server response");
    }

  }
  catch (Exception $e) {

    if ($socket) {
      @fwrite($socket, "quit\n");
      @fclose($socket);
    }

    $output = '<div class="teamspeak-error">' . $e->getMessage() . '</div>';
  }

  return $output;

}

/**
 * Implements hook_block_view().
 */
function teamspeak3_block_view($delta) {

  switch ($delta) {

    case 'teamspeak3':
      if (user_access('access teamspeak')) {
        $block = array(
          'subject' => t('Teamspeak 3'),
          'content' => array(
            '#markup'   => teamspeak3_render(),
            '#attached' => array(
              'css' => array(drupal_get_path('module', 'teamspeak3') . '/teamspeak3.css'),
            ),
          ),
        );

        return $block;
      }

      break;

  }

}
