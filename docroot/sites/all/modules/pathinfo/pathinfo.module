<?php
/**
 * @file
 * Hooks and core functions for the pathinfo module.
 */

/**
 * Implements hook_init().
 */
function pathinfo_init() {
  $menu = menu_get_item(pathinfo_get_current_path());
  if (
    user_access('view pathinfo') &&
    !devel_silent() && 
    variable_get('pathinfo_footer_display', TRUE) &&
    // Special case for image style generation urls.
    $menu['page_callback'] !== 'image_style_deliver'
  ) {
    drupal_add_css(drupal_get_path('module', 'pathinfo') . '/pathinfo.css');
    pathinfo_add_js();
    drupal_register_shutdown_function('pathinfo_shutdown');
  }
}

/**
 * Implements hook_menu().
 */
function pathinfo_menu() {
  $items['admin/config/pathinfo'] = array(
    'title' => 'PathInfo Settings',
    'description' => 'Settings for PathInfo',
    'position' => 'right',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer pathinfo'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'weight' => -15,
  );

  $items['admin/config/pathinfo/config'] = array(
    'title' => 'Configure PathInfo settings',
    'position' => 'right',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pathinfo_config_form'),
    'access arguments' => array('administer pathinfo'),
    'file' => 'pathinfo.admin.inc',
    'weight' => 3,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function pathinfo_permission() {
  return array(
    'administer pathinfo' => array(
      'title' => t('Administer pathinfo settings.'),
    ),
    'view pathinfo' => array(
      'title' => t('View pathinfo details in footer.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function pathinfo_theme() {
  return array(
    'pathinfo_served_by' => array(
      'variables' => array(
        'path' => NULL,
        'function' => NULL,
        'arguments' => NULL,
        'complex_arguments' => NULL,
        'module' => NULL,
        'filepath' => NULL,
        'filepath_full' => NULL,
        'line' => NULL,
        'is_form' => NULL,
        'is_core' => NULL,
      ),
      'file' => 'pathinfo.theme.inc',
    ),
    'pathinfo_api_link' => array(
      'variables' => array(
        'function' => NULL,
        'filepath' => NULL,
        'is_core' => NULL,
      ),
      'file' => 'pathinfo.theme.inc',
    ),
    'pathinfo_complex_arguments' => array(
      'variables' => array(
        'link_text' => 'complex arguments',
        'arguments' => '',
      ),
    ),
  );
}

/**
 * Shutdown callback.
 */
function pathinfo_shutdown() {
  // Try not to break non html pages.
  if (pathinfo_html_page()) {
    print pathinfo_served_by(pathinfo_get_info());
  }
}

/**
 * Callback to show
 *
 * @param array $pathinfo
 *   Path information, in format defined by pathinfo_get_info().
 *
 * @return string
 *   HTML string describing path.
 *
 * @see pathinfo_get_info()
 * @see theme_pathinfo_served_by()
 */
function pathinfo_served_by($pathinfo) {
  return theme('pathinfo_served_by', $pathinfo);
}

/**
 * Get info about a supplied path, or the current path if none supplied.
 *
 * @return array
 *   An associative array containing the path info:
 *   - path: System path to url.
 *   - function: The function that serves the path.
 *   - arguments: Any arguments passed to the function that serves the path.
 *   - module: The module that contains the function.
 *   - filepath: Relative ath to the file that implements the function.
 *   - filepath_full: The full path to the file that contains the function.
 *   - line: The line the function is implemented on.
 *   - is_form: Whether or not the function is a form constructor.
 *   - is_core: Whether or not this module is in Drupal core.
 */
function pathinfo_get_info($path = NULL) {
  if ($path == NULL) {
    $path = current_path();
  }
  $menu = menu_get_item($path);
  $function = $menu['page_callback'];
  $arguments = $menu['page_arguments'];
  $is_form = FALSE;
  
  // Get the module this callback is implemented in.
  if ($function == 'drupal_get_form') {
    // Form definitions are always served by drupal_get_form, so the first
    // argument that defines the form is much more useful.
    $function = $arguments[0];
    $is_form = TRUE;
    unset($arguments[0]);
  }
  $complex_arguments = pathinfo_complex_arguments($arguments);
  // If there's only scalar arguments, cast them all to a string.
  if ($complex_arguments == FALSE) {
    $arguments = array_map('strval', $arguments);
  }

  $module = pathinfo_get_module_for_function($function);

  // Find the file this function is in. In some cases, the file that serves
  // the function is not available at run time (maybe its output is cached?)
  if (function_exists($function)) {
    $reflection = new ReflectionFunction($function);
    $filepath_full = $reflection->getFileName();
    $line = $reflection->getStartLine();
  }

  $is_core = pathinfo_module_is_core($module);
  $filepath = pathinfo_get_relative_path($filepath_full);

  return array(
    'path' => $path,
    'function' => $function,
    'arguments' => $arguments,
    'complex_arguments' => $complex_arguments,
    'module' => $module,
    'filepath' => $filepath,
    'filepath_full' => $filepath_full,
    'line' => $line,
    'is_form' => $is_form,
    'is_core' => $is_core,
  );

}

/**
 * Checks whether any values in an array (like an argument list) are complex
 * (cannot be easily cast to a string).
 *
 * @param array $arguments
 *   An array of variables of any type.
 *
 * @return mixed
 *   TRUE is any of the variables are complex, FALSE if not.
 *
 * @see pathinfo_is_simple_type()
 */
function pathinfo_complex_arguments($arguments) {
  $is_simple = TRUE;
  foreach ($arguments as $variable) {
    $is_simple = $is_simple && pathinfo_is_simple_type($variable);  
  }
  if ($is_simple) {
    // All of the arguments are simple.
    return FALSE;
  } 
  
  // At least one of the variables is not a simple type.
  return TRUE;
}

/**
 * Checks whether a variable is of a type that can easily be cast to a string -
 * that is, any type except array, object, or resource.
 * 
 * @param mixed $variable
 *   Any variable.
 * 
 * @return boolean
 *   TRUE if it is a simple type, FALSE if not.
 *
 * @see gettype()
 */
function pathinfo_is_simple_type($variable) {
  $type = gettype($variable);
  // Doesn't handle resource types as yet. @see get_resource_type()
  if (in_array($type, array('boolean', 'integer', 'double', 'string', 'resource', 'NULL', 'unknown type'))) {
    return TRUE;
  }
  
  return FALSE;
}

/**
 * Returns the system url of the current page.
 *
 * @return string
 *   The path string (eg node/306).
 *
 * @see current_path()
 */
function pathinfo_get_current_path() {
  return current_path();
}

/**
 * Given a function name, return the module that it appears in. This will
 * only work for functions that have the module name in them.
 *
 * @param string $function_name
 *   Name of the function you'd like to cehck.
 *
 * @return string
 *   The module name, or an empty string if not found.
 *
 * @todo test with modules with overlapping names, eg node and node_dog. Just
 * have to find some good test cases.
 *
 * @todo It seems that module_list() is very fast (use static cache), and we can
 * call it many times per request without a meaningful perfomance impact.
 * However, it is worth monitoring for performance issues.
 */
function pathinfo_get_module_for_function($function_name) {
  $implemented_in = '';
  $modules = module_list();
  // Go through all loaded modules.
  foreach ($modules as $module) {
    if (strstr($function_name, $module)) {
      if (strlen($module) > strlen($implemented_in)) {
        $implemented_in = $module;
      }
    }
  }

  return $implemented_in;
}

/**
 * Detects whether a page request delivers HTML or not.
 *
 * @return bool
 *   TRUE for HTML page requests, FALSE otherwise.
 *
 * @see devel_shutdown_real()
 */
function pathinfo_html_page() {
  if (function_exists('drupal_get_http_header')) {
    $header = drupal_get_http_header('content-type');
    if ($header) {
      $formats = array('xml', 'javascript', 'json', 'plain', 'image', 'application', 'csv', 'x-comma-separated-values');
      foreach ($formats as $format) {
        if (strstr($header, $format)) {
          return FALSE;
        }
      }
    }
  }

  return TRUE;
}

/**
 * Detects whether a module is Drupal core or otherwise.
 *
 * @todo Integrate other modules into API links.
 * As this is used solely to link functions to API docs, it could return TRUE
 * for other modules that are documented at api.drupal.org:
 *   - devel
 *   - views
 * That would require parsing the path to the module differently so that links
 * to API docs could be generated.
 *
 * See http://api.drupal.org/api/projects and theme_pathinfo_core_api_link()
 * for more details.
 *
 * @param string $module_name
 *   Machine name of a drupal module.
 *
 * @return bool
 *   TRUE if a core module, FALSE if not.
 */
function pathinfo_module_is_core($module_name) {
  $path = drupal_get_path('module', $module_name);
  if (substr($path, 0, 7) == 'modules') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Strips local filesystem information from a files include path.
 *
 * @param string $fullpath
 *   Full path including the local Drupal installation directory.
 *
 * @return string
 *   Path relative to the Drupal installation directory.
 */
function pathinfo_get_relative_path($fullpath) {
  return str_replace(getcwd() . '/', '', $fullpath);
}

/**
 * Adds inline css with simple show/hide for complex arguments.
 */
function pathinfo_add_js($link_css_id = 'pathinfo-args-showhide', $args_css_id = 'pathinfo-args-output') {
  $js = <<<JS
  jQuery(document).ready(function() {
    jQuery('a#{$link_css_id}').click(function() {
      jQuery('#{$args_css_id}').toggle();
      var bottomPos = $(document).height();
      var time = 500;
      jQuery('body').animate({scrollTop: bottomPos }, time);
      return false;
      // searchstring
    });
  });
JS;
  // Will this work in shutdown??? Probably not.
  drupal_add_js($js, 'inline');
}
