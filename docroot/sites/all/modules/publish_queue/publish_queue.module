<?php

/**
 * Implementation of hook_menu().
 */
function publish_queue_menu() {
  $items['admin/config/content/publish_queue'] = array(
    'title' => 'Publish queues',
    'description' => 'Allows site admins to configure publish queues.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('publish_queue_admin'),
    'access arguments' => array('administer scheduler'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'publish_queue.admin.inc',
  );
  
  return $items;
}
/**
 * Implementation of hook_node_presave().
 */
function publish_queue_node_presave($node) {
  if (isset($node->publish_queue) && !publish_queue_inqueue($node)) {
    $query = db_select('scheduler', 's')
      ->fields('s', array('publish_on'));
    $query->innerJoin('publish_queue_nodes', 'p', 'p.nid = s.nid');
    $query->orderBy('p.pid', 'DESC')->range(0, 1)->execute()->fetchField();
    $time = $query->execute()->fetchField();
    $time = ($time) ? $time : time();
    $node->publish_on = $time + variable_get('publish_queue_interval', 86400);
    return $node;
  }
}

/**
 * Implementation of hook_node_insert().
 */
function publish_queue_node_insert($node) {
  if (isset($node->publish_queue)) {
    publish_queue_add($node);
  }
}

/**
* Implementation of hook_node_update().
*/
function publish_queue_node_update($node) {
  $inqueue = publish_queue_inqueue($node);
  if ($node->publish_queue) {
    if (!$inqueue) {
      publish_queue_add($node);
    }
  }
  elseif ($inqueue) {
    publish_queue_delete($node);
  }
}

/**
* Implementation of hook_form_alter().
*/
function publish_queue_form_alter(&$form, $form_state) {
  // Is this a node form and scheduling has been enabled for this node type
  if (!empty($form['#node_edit_form']) && user_access('schedule (un)publishing of nodes')) {
    $publishing_enabled = variable_get('scheduler_publish_enable_' . $form['type']['#value'], 0) == 1;

    // if scheduling has been enabled for this node type
    if ($publishing_enabled) {
      
      if (isset($form_state['values']['op']) && $form_state['values']['op'] == t('Preview')) {
        $enabled = $publishing_enabled ? $form_state['values']['publish_on'] : NULL;
      }
      elseif (isset($form['#node']->nid) && $form['#node']->nid > 0) {
        $enabled = publish_queue_inqueue($form['#node']);
      }
      else {
        $enabled = FALSE;
      }
      $form['scheduler_settings']['publish_queue'] = array(
        '#type' => 'checkbox',
        '#title' => t('Add to publishing queue'),
        '#default_value' => $enabled ? 1 : 0,
      );

      $form['scheduler_settings']['publish_on']['#states'] = array(
        'invisible' => array(
          'input[name="publish_queue"]' => array('checked' => TRUE),
        ),
      );
    }
  }
}

/**
 * Implementation of hook_cron()
 */
function publish_queue_cron() {
  $subquery = db_select('scheduler')->fields('scheduler', array('nid'));
  $delete = db_delete('publish_queue_nodes');
  $delete->condition('nid', $subquery, 'NOT IN')->execute();
}

/**
 * Implementation of hook_module_implements_alter().
 */
function publish_queue_module_implements_alter(&$implementations, $hook) {
  //Any change here requires Caches to be cleared.

  switch ($hook) {
    case 'form_alter':
      $publish_queue = $implementations['publish_queue'];
      unset($implementations['publish_queue']);

      $scheduler = $implementations['scheduler'];
      unset($implementations['scheduler']);

      //hook_form_alter would be called on module scheduler before module publish_queue.
      $implementations['scheduler'] = $scheduler;
      $implementations['publish_queue'] = $publish_queue;
      break;

    case 'node_presave':
      $publish_queue = $implementations['publish_queue'];
      unset($implementations['publish_queue']);

      $scheduler = $implementations['scheduler'];
      unset($implementations['scheduler']);

      //hook_menu would be called on module publish_queue before module scheduler.
      $implementations['publish_queue'] = $publish_queue;
      $implementations['scheduler'] = $scheduler;
      break;
  }
}

/**
 * Return if a node is in publish queue and return its pid
 */
function publish_queue_inqueue($node) {
  return db_select('publish_queue_nodes', 'p')
  ->fields('p', array('nid'))->condition('p.nid', $node->nid)
  ->execute()->fetchField();
}

/**
 * Add a node to publish queue DB
 */
function publish_queue_add($node) {
  $fields = array('nid' => $node->nid);
  return drupal_write_record('publish_queue_nodes', $fields);
}

/**
* Remove a node from publish queue DB
*/
function publish_queue_delete($node) {
  return db_delete('publish_queue_nodes')->condition('nid', $node->nid)->execute();
}