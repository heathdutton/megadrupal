<?php

/**
 * Implements hook_menu().
 */
function tarpit_captcha_menu() {
  $items = array();
  $title = \Drupal\tarpit\Config::get('tarpit.page_title');
  $path = \Drupal\tarpit\Config::get('tarpit.tarpit_captcha_path');

  $items[$path] = array(
    'title' => $title,
    'page callback' => '_tarpit_captcha_get_page',
    'access arguments' => array('access tarpit'),
    'file' => 'tarpit_captcha.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_captcha().
 */
function tarpit_captcha_captcha($op, $captcha_type = '') {
  switch ($op) {
    case 'list': return array('Tarpit CAPTCHA');
    case 'generate':
      if ($captcha_type == 'Tarpit CAPTCHA') {
        $path = current_path();
        $exploded_path = explode('/', $path);
        $default_path = \Drupal\tarpit\Config::get('tarpit.tarpit_forms_path');

        if ($exploded_path[0] === $default_path) {
          $path = implode('/', $exploded_path);
        } else {
          $path = $default_path;
        }

        $config = array(
          'size' => \Drupal\tarpit\Config::get('tarpit.size'),
          'links' => \Drupal\tarpit\Config::get('tarpit.links'),
          'wordlist'  => \Drupal\tarpit\Config::get('tarpit.wordlist'),
        );

        $markup = _tarpit_generate_content($path, $config['size'], $config['links'], $config['wordlist'], 0);

        $captcha = array();
        $captcha['solution'] = '';
        $captcha['form']['captcha_response'] = array(
          '#type' => 'item',
          '#markup' => $markup,
          '#element_validate' => array('tarpit_captcha_validate', 'captcha_validate'),
          '#captcha_validate' => 'tarpit_captcha_captcha_validate',
        );

        return $captcha;
      }
      break;
  }
}

/**
 * Implementation of hook_theme().
 */
function tarpit_captcha_theme() {
  return array(
    'captcha' => array(
      'arguments' => array('element' => NULL),
      'function' => 'theme_tarpit_captcha_captcha'
    )
  );
}

/**
 * Custom form validate callback.
 *
 * This is to avoid warning because we are not using a form with a user input.
 */
function tarpit_captcha_validate($element, &$form_state) {
  $form_state['values']['captcha_response'] = '';
}

/**
 * Custom captcha validate callback.
 *
 * This returns TRUE all the time because we are not using a form with a user
 * input.
 */
function tarpit_captcha_captcha_validate($element, &$form_state) {
  return TRUE;
}

/**
 * Implementation of theme_hook().
 */
function theme_tarpit_captcha_captcha($element) {
  $captcha = theme_captcha($element);
  if (strncmp($element['element']['#captcha_type'], 'tarpit_captcha/', 15) == 0) {
    $class = _generate_random_classname();
    drupal_add_css('div.' . $class . '{width:0;height:0;overflow:hidden;display:none;}', 'inline'); // TODO: move the random class to an external file
    $captcha = '<div class="' . $class . '">' . $captcha . '</div>';
  }
  return $captcha;
}

/**
 * Helper function to generate a random CSS classname.
 *
 * @param int $size_min
 *   The minimum size of the classname
 * @param int $size_max
 *   The maximum size of the classname
 * @return string
 *   The CSS classname
 */
function _generate_random_classname($size_min = 32, $size_max = 65) {
  $chars = "abcdefghijklmnopqrstuvwzxyz";
  $len = strlen($chars . '0123456789_-') - 1;
  $size = round(mt_rand($size_min, $size_max)) -1;
  $class = substr($chars, mt_rand(0, strlen($chars)), 1);
  for ($i=0;$i<$size;++$i) {
    $class .= substr($chars . '0123456789_-', mt_rand(0, $len), 1);
  }
  return $class;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tarpit_captcha_form_tarpit_ui_admin_settings_alter(&$form, &$form_state, $form_id) {
  $form['tarpit_captcha']['tarpit_captcha_path'] = array(
    '#type' => 'textfield',
    '#title' => 'Tarpit captcha path',
    '#description' => 'Page path used to generate a tarpit. Needed in Captcha.',
    '#default_value' => \Drupal\tarpit\Config::get('tarpit.tarpit_captcha_path'),
  );
}