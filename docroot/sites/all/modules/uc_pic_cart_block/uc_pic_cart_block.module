<?php

/**
 * @file
 * The module of pictured cart block for Ubercart.
 *
 * Right in block users can change quantity of items or remove them.
 * Block has vertical or horisontal orientation with optional jQuery scrolling.
 */

/**
 * Implementation of hook_init().
 */
function uc_pic_cart_block_init() {
  drupal_add_css(drupal_get_path('module', 'uc_pic_cart_block') . '/uc_pic_cart_block.css');
}

/**
 * Implementation of hook_menu().
 *
 * @see uc_pic_cart_block_sortproducts()
 */
function uc_pic_cart_block_menu() {

  $items['uccartpics/sort/%'] = array(
    'title' => 'Set sort order',
    'page callback' => 'uc_pic_cart_block_sortproducts',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['uccartpics/remove/%/%'] = array(
    'title' => 'Remove product',
    'page callback' => 'uc_pic_cart_block_remove_product',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['uccartpics/update/%/%/%'] = array(
    'title' => 'Update product',
    'page callback' => 'uc_pic_cart_block_update_cart_item',
    'page arguments' => array(2, 3, 4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Remove product from Cart page
 */

function uc_pic_cart_block_remove_product($ajax, $nid) {

  //Removing item from the cart
  $cid = uc_cart_get_id();
  $cartcontents = uc_cart_get_contents();

  foreach ($cartcontents as $content) {
    //if nid exist in current content item
    if ($content->nid == $nid) {
      $data = $content->data;
      uc_cart_remove_item($nid, $cid, $data);
    }
  }

  // Rebuild the cached cart items.
  uc_cart_get_contents(NULL, 'rebuild');

  $content = uc_pic_cart_block_content();

  $commands = array();
  $commands[] = ajax_command_html('#uc-pic-cart-block-wrapper', $content);
  $html =  array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($html);

}

/**
 * Update Quantity of the product into cart
 */
function uc_pic_cart_block_update_cart_item($ajax, $update,  $nid) {

  $cartcontents = uc_cart_get_contents();

  foreach ($cartcontents as $content) {
    //if nid exist in current content item
    if ($content->nid == $nid) {
      $item = $content;

      //If increment button is clicked, increment qty of the product by 1
      if ($update == 'inc') {
        $item->qty = $item->qty + 1;
      }
      //If decrement button is clicked, decrease qty of the product by 1
      else if ($update == 'dec') {
        $item->qty = $item->qty - 1;
      }

      uc_cart_update_item($item);

    }
  }

  // Rebuild the cached cart items.
  uc_cart_get_contents(NULL, 'rebuild');

  $content = uc_pic_cart_block_content();

  $commands = array();
  $commands[] = ajax_command_html('#uc-pic-cart-block-wrapper', $content);
  $html =  array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($html);

}



/**
 * Menu callback for uccartpics/sort/%.
 *
 * Only setting session variable actually.
 *
 * @param $order
 *   Sort order, 0 - 6.
 * @return
 *   Page with refreshed block or "Access denied"
 */
function uc_pic_cart_block_sortproducts($order) {
  if (is_numeric($order)) {
    if ($order >= 0 && $order < 6) {
      $_SESSION['uc_pic_cart_block_sortorder'] = $order;
    }
    else {
      $_SESSION['uc_pic_cart_block_sortorder'] = 0;
    }

    $content = uc_pic_cart_block_content();

    $commands = array();
    $commands[] = ajax_command_html('#uc-pic-cart-block-wrapper', $content);
    $html =  array('#type' => 'ajax', '#commands' => $commands);
    ajax_deliver($html);

  }
  else {
    return drupal_access_denied();
  }
}


/**
 * Implements hook_block_info().
 */

function uc_pic_cart_block_block_info() {

  $blocks['pic_cart'] = array(
     'info' => t('Pictured cart block'),
     'cache' => BLOCK_NO_CACHE, // as in uc_cart
  //'region' => 'right',
     'pages' => "admin*\ncart*\ncheckout*",
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 * @param $delta
 * @return unknown_type
 */

function uc_pic_cart_block_block_configure($delta = '') {
  if ($delta == 'pic_cart') {
    return uc_pic_cart_block_configureform();
  }
}


/**
 * Generator of block settings form.
 *
 * @ingroup forms
 * @see uc_pic_cart_block_block()
 * @see uc_pic_cart_block_scroll_count_validate()
 */
function uc_pic_cart_block_configureform() {
  $form = array();
  $form['uc_pic_cart_block_image_style'] = array(
    '#type' => 'textfield',
    '#title' => t('Image style'),
    '#description' => t('The name of Image style preset for product picture in block. Scale to 50x50 (default "cart" preset) or 64x64 is recommended. Square images or actions like "define canvas" in preset are highly recommended for horisontal orientation.'),
    '#default_value' => variable_get('uc_pic_cart_block_image_style', 'uc_cart'),
  );
  $form['uc_pic_cart_block_hide_if_empty'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide block if cart is empty'),
    '#default_value' => variable_get('uc_pic_cart_block_hide_if_empty', FALSE),
  );
  $form['uc_pic_cart_block_hide_if_cached'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide block for unregistered users if caching of pages or blocks enabled'),
    '#description' => t('Otherwise message will shown.'),
    '#default_value' => variable_get('uc_pic_cart_block_hide_if_cached', FALSE),
  );
  $form['uc_pic_cart_block_show_cart_icon'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show cart icon in block header'),
    '#description' => t("Icon doesn't show if block header overriden."),
    '#default_value' => variable_get('uc_pic_cart_block_show_cart_icon', TRUE),
  );
  $form['uc_pic_cart_block_increase_first'] = array(
    '#type' => 'checkbox',
    '#title' => t('Increase first'),
    '#description' => t('The order of buttons "-" and "+".'),
    '#default_value' => variable_get('uc_pic_cart_block_increase_first', FALSE),
  );
  $form['uc_pic_cart_block_show_descriptions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show descriptions of items in vertical view'),
    '#description' => t('Selected attributes, content of product kit, etc.'),
    '#default_value' => variable_get('uc_pic_cart_block_show_descriptions', FALSE),
  );
  $form['uc_pic_cart_block_scroll_count'] = array(
    '#type' => 'textfield',
    '#size' => 4,
    '#maxlength' => 2,
    '#element_validate' => array('uc_pic_cart_block_scroll_count_validate'),
    '#title' => t('Enable scrolling if products more than'),
    '#description' => t('JavaScript must be enabled for scrolling. 0 - disable scrolling. In this case, a horizontal orientation looks like "large icons", and vertical orientation can be very long.'),
    '#default_value' => variable_get('uc_pic_cart_block_scroll_count', 0),
  );
  $form['uc_pic_cart_block_summary_items'] = array(
    '#type' => 'radios',
    '#title' => t('Item count in summary of block is'),
    '#default_value' => variable_get('uc_pic_cart_block_summary_items', 0),
    '#options' => array(0 => t('Number of rows in cart table view'), 1 => t('Sum of quanitity of all products')),
  );
  $form['uc_pic_cart_block_orientation'] = array(
    '#type' => 'radios',
    '#title' => t('Orientation'),
    '#default_value' => variable_get('uc_pic_cart_block_orientation', 0),
    '#options' => array(0 => t('Vertical (cart items in rows)'), 1 => t('Horizontal (product pitures in one row)')),
  );

  return $form;
}

/**
 * Implements hook_block_save().
 * @param $delta
 * @param $edit
 * @return unknown_type
 */

function uc_pic_cart_block_block_save($delta = '', $edit = array()) {

  if ($delta == 'pic_cart') {
    variable_set('uc_pic_cart_block_image_style', $edit['uc_pic_cart_block_image_style']);
    variable_set('uc_pic_cart_block_hide_if_empty', $edit['uc_pic_cart_block_hide_if_empty']);
    variable_set('uc_pic_cart_block_hide_if_cached', $edit['uc_pic_cart_block_hide_if_cached']);
    variable_set('uc_pic_cart_block_show_cart_icon', $edit['uc_pic_cart_block_show_cart_icon']);
    variable_set('uc_pic_cart_block_increase_first', $edit['uc_pic_cart_block_increase_first']);
    variable_set('uc_pic_cart_block_scroll_count', $edit['uc_pic_cart_block_scroll_count']);
    variable_set('uc_pic_cart_block_show_descriptions', $edit['uc_pic_cart_block_show_descriptions']);
    variable_set('uc_pic_cart_block_summary_items', $edit['uc_pic_cart_block_summary_items']);
    variable_set('uc_pic_cart_block_orientation', $edit['uc_pic_cart_block_orientation']);
    return;
  }

}

/**
 * Implements hook_block_view().
 * @param $delta
 * @return unknown_type
 */
function uc_pic_cart_block_block_view($delta = '') {
  if ($delta == 'pic_cart') {

    //Adding ajax library
    drupal_add_library('system', 'drupal.ajax');

    $block = array(
    'subject' => '',
    'content' => '',
    );

    $path_module = drupal_get_path('module', 'uc_pic_cart_block'); // "cache" for theming images
    $icon_class = FALSE;

    $block['subject'] = theme('uc_pic_cart_block_block_title',  array('title' =>  t('Shopping cart'),  'icon_class' => $icon_class, 'path_module' => $path_module));
    $block['content'] = '<div id="uc-pic-cart-block-wrapper">' . uc_pic_cart_block_content() . '</div>';

    return $block;
  }
}

/**
 * Generate the content of block.
 *
 * @return
 *   Array which represents the block.
 *
 * @see uc_pic_cart_block_block()
 * @see uc_product_cart_display()
 * See also uc_cart.module and uc_product.module
 */
function uc_pic_cart_block_content() {

  global $user;

  $content = '';

  $path_module = drupal_get_path('module', 'uc_pic_cart_block'); // "cache" for theming images
  $icon_class = FALSE;

  // Like a standart block, pictured one works correctly only if cache was disabled.
  // Caching blocks seems to be unsafe too.
  $cachable = !$user->uid && (variable_get('cache', FALSE) != FALSE || variable_get('block_cache', 0) != 0);

  if ($cachable) {

    if (!variable_get('uc_pic_cart_block_hide_if_cached', FALSE)) {
      // Caching is turned on and the user is not logged in, so we should
      // deliver a block that is safe for caching.
      if (variable_get('uc_pic_cart_block_show_cart_icon', TRUE)) {
        $icon_class = 'empty';
      }

      $content = theme('uc_pic_cart_block_content_cachable');

      return $content;
    }
     
  }

  // Build full block
  $cartcontents = uc_cart_get_contents();
  $product_count = count($cartcontents);

  // Subject

  if (variable_get('uc_pic_cart_block_show_cart_icon', TRUE)) {
    $icon_class = ($product_count) ? 'full' : 'empty';
  }

  // Content

  $items       = array();
  $preset      = variable_get('uc_pic_cart_block_image_style', 'uc_cart');
  $orientation = variable_get('uc_pic_cart_block_orientation', 0);

  if (!empty($product_count)) {
    // Like in a standart cart block we invokes cart_display hook
    foreach ($cartcontents as $item) {

      $display_item = module_invoke($item->module, 'uc_cart_display', $item);

      // See uc_product.module (as basic, or another like uc_product_kit),
      // function uc_product_cart_display for structure of $display_item.

      // if product kits or something other like this used, $display_item can be empty

      if (!empty($display_item)) {
        $items[] = array(
          'nid'          => $display_item['nid']['#value'],
          'qty'          => $display_item['qty']['#default_value'],
          'title'        => $display_item['title']['#markup'],
          'description'  => $display_item['description']['#markup'],
          'price'        => $display_item['#total'],
          'data'         => $display_item['data']['#value'],
          'img'          => uc_pic_cart_block_get_picture($display_item['nid']['#value'], $preset, $path_module, ($orientation == 0)),
          'title_simple' => check_plain($item->title),
          'module'       => $display_item['module']['#value'],
        );
      }
    }
  }

  $product_count = count($items);

  $_SESSION['uc_pic_cart_block_product_count'] = $product_count; // to generate needed forms


  if (!empty($product_count)) {
    $summary_items = variable_get('uc_pic_cart_block_summary_items', 0);
    $scroll_count  = variable_get('uc_pic_cart_block_scroll_count', 0);
    $use_scroll    = (($scroll_count > 0) && ($product_count > $scroll_count));

    if ($use_scroll) {
      drupal_add_js(drupal_get_path('module', 'uc_pic_cart_block') .'/uc_pic_cart_block_scrolling.js');
      drupal_add_js(array('ucPicCartBlockUseScroll'    => TRUE,
                          'ucPicCartBlockOrientation'  => (int) $orientation,
                          'ucPicCartBlockScrollCount'  => (int) $scroll_count,
                          'ucPicCartBlockProductCount' => (int) $product_count), 'setting');
    }



    $content .= theme('uc_pic_cart_block_sort_header', array('path_module' => $path_module));
    usort($items, '_uc_pic_cart_block_sortitems');

    if ($use_scroll) {
      $content .= theme('uc_pic_cart_block_scroll_btn', array('last' => FALSE, 'orientation' => $orientation, 'path_module' => $path_module));
    }

    if ($orientation == 0) { // vertical
      $content .= '<table id="uc_pic_cart_block_content"><tbody>';
    }
    else { // horisontal
      $content .= '<div id="uc_pic_cart_block_content">';
    }
    $content .= "\n";
    $total = 0;
    $count = 0;
    $rownum = 0;
    foreach ($items as $item) {
      $total += $item['price'];
      if ($summary_items == 1) {
        $count += $item['qty'];
      }
      $rownum += 1;

      $content .= theme('uc_pic_cart_block_item', array('item' =>  $item, 'rownum' => $rownum, 'orientation' => $orientation, 'path_module' => $path_module)) ."\n";
    }

    if ($orientation == 0) {
      $content .= "</tbody></table> <!-- cart content --> \n";
    }
    else {
      $content .= "</div> <!-- cart content --> \n";
    }

    if ($use_scroll) {
      $content .= theme('uc_pic_cart_block_scroll_btn', array('last' => FALSE, 'orientation' => $orientation, 'path_module' => $path_module));
    }

    if ($summary_items == 0) {
      $count = $product_count;
    }
    $content .= theme('uc_pic_cart_block_summary', array('count' => $count, 'total' => $total));
  }
  else {
    if (!variable_get('uc_pic_cart_block_hide_if_empty', FALSE)) {
      $content .= '<p>'. t('The cart is empty') .'</p>';
    }
  }

  return $content;

}

/**
 * End of main block functions
 */


/**
 * Getting picture of product.
 *
 * @param $node_id
 *   ID of product node.
 * @param $preset
 *   The name of Image style preset.
 * @param $path_module
 *   Path to this module.
 * @return
 *   Themed image (linked to node if can view).
 *
 * @see uc_product_get_picture()
 */
function uc_pic_cart_block_get_picture($node_id, $preset, $path_module) {
  $img = '';

  $product = node_load($node_id);
  $field = variable_get('uc_image_'. $product->type, '');

  if (isset($product->$field)) {
    $image = $product->{$field}[$product->language][0];
    $img = theme('image_style', array('style_name' => $preset, 'tite' => $image['title'], 'path' => $image['uri'], 'width' => $image['width'], 'height' => $image['height'], 'alt' => $image['alt']));

  }

  if (empty($img)) {// theming default image
    //$img = theme('imagecache', $preset, $path_module .'/img/no_image.gif', t('No pic'), check_plain($product->title) .' ('. t('no picture available') .')');
    //$img = theme('image_style', array('style_name' => $preset, 'tite' => $image['title'], 'path' => , 'width' => $image['width'], 'height' => $image['height'], 'alt' => $image['alt']));
  }

  if (node_access('view', $product)) {
    $output = l($img, 'node/'. $product->nid, array('html' => TRUE));
  }
  else {
    $output = $img;
  }

  return $output;
}



/*******************************************************************************
 * Theming
 ******************************************************************************/

/**
 * Implementation of hook_theme().
 *
 * @ingroup theme
 */
function uc_pic_cart_block_theme() {
  return array(
    'uc_pic_cart_block_block_title' => array(
      'variables' => array('title' => NULL, 'icon_class' => FALSE, 'path_module' => ''),
  ),
    'uc_pic_cart_block_content_cachable' => array(
      'variables' => array(),
  ),
    'uc_pic_cart_block_sort_header' => array(
      'variables' => array('path_module' => ''),
  ),
    'uc_pic_cart_block_scroll_btn' => array(
      'variables' => array('last' => FALSE, 'orientation' => 0, 'path_module' => ''),
  ),
    'uc_pic_cart_block_item' => array(
      'variables' => array('item' => NULL, 'rownum' => 0, 'orientation' => 0, 'path_module' => ''),
  ),
    'uc_pic_cart_block_summary' => array(
      'variables' => array('count' => 0, 'total' => 0),
  ),
  );
}

/**
 * Theme the block title.
 *
 * Unlike standart block, we haven't collapsing.
 *
 * @param $title
 *   A title text.
 * @param $icon_class
 *   'empty' or 'full' will show appropriate icon, false - won't.
 * @param $path_module
 *   Path to this module.
 *
 * @ingroup theme
 */
function theme_uc_pic_cart_block_block_title($variables) {

  $title = $variables['title'];
  $icon_class = $variables['icon_class'];
  $path_module = $variables['path_module'];


  $output ='';

  if (empty($path_module)) return $output;

  if ($icon_class == 'empty') {
    $path = $path_module .'/img/cart_empty.gif';
  }
  elseif ($icon_class == 'full') {
    $path = $path_module .'/img/cart_full.gif';
  }

  if (!empty($path)) {
    $output = l(theme('image', array('path' => $path, 'alt' => '', 'title' =>  t('View your shopping cart'), 'attributes'  => array('class' => 'uc_pic_cart_block_btn'))), 'cart', array('html' => TRUE, 'attributes' => array('rel' => 'nofollow'))) .' ';
  }

  $output .= '<span class="uc_pic_cart_block_block_title">'. $title .'</span>';
  return $output;
}

/**
 * Theme the cachable block content - message to user.
 *
 * @ingroup theme
 */
function theme_uc_pic_cart_block_content_cachable() {
  $output = t('We are sorry, but advanced cart block features are not available for guests with current site settings.');

  $attr = array('attributes' => array('rel' => 'nofollow'));

  $output .= ' '. t('Please') .' '. l(t('register'), 'user/register', $attr) .' '. t('or') .' ';
  $output .= l(t('login'), 'user/login', $attr) .'.';
  $output .= '<p>'. t('You can also') .' '. l(t('view your cart'), 'cart', $attr) .'.</p>';

  return $output;
}

/**
 * Theme the sort header - "Sort by: name | qty | sum"
 *
 * @param $path_module
 *   Path to this module.
 *
 * @ingroup theme
 */
function theme_uc_pic_cart_block_sort_header($variables) {
  $path_module = $variables['path_module'];

  if (empty($path_module)) return '';

  $attr = array('attributes' => array('rel' => 'nofollow' , 'class' => 'use-ajax '));
  $sortorder = !empty($_SESSION['uc_pic_cart_block_sortorder']) ? $_SESSION['uc_pic_cart_block_sortorder'] : '';

  if (!is_numeric($sortorder)) {
    $sortorder = 0;
    $_SESSION['uc_pic_cart_block_sortorder'] = 0;
  }
  $output = '<p class="uc_pic_cart_block_sort_header">'. t('Sort by') .': ';

  if ($sortorder % 2) {
    $arrowup = ' '. theme('image', array('path' => $path_module .'/img/bullet-arrow-up.gif', 'alt' => t('d'), 'title' => t('Descending'), 'attributes' => array('class' => 'uc_pic_cart_block_btn')));
  }
  else {
    $arrowdown = ' '. theme('image', array('path' => $path_module .'/img/bullet-arrow-down.gif', 'alt' => t('a'), 'title' => t('Ascending'), 'attributes' => array('class' => 'uc_pic_cart_block_btn')));
  }

  $output .= l(t('name'), 'uccartpics/sort/'. (($sortorder==0) ? '1' : '0'), $attr);
  if ($sortorder == 0)
  $output .= $arrowdown;
  elseif ($sortorder == 1)
  $output .= $arrowup;

  $output .= ' | ';
  $output .= l(t('qty'), 'uccartpics/sort/'. (($sortorder==2) ? '3' : '2'), $attr);
  if ($sortorder == 2)
  $output .= $arrowdown;
  elseif ($sortorder == 3)
  $output .= $arrowup;

  $output .= ' | ';
  $output .= l(t('sum'), 'uccartpics/sort/'. (($sortorder==4) ? '5' : '4'), $attr);
  if ($sortorder == 4)
  $output .= $arrowdown;
  elseif ($sortorder == 5)
  $output .= $arrowup;

  $output .= "</p>\n";
  return $output;
}

/**
 * Theme the scroll buttons.
 *
 * @param $last
 *   Boolean. If false, we have the first part of scrolling (e.g. top),
 *   otherwise - last (e.g. bottom).
 * @param $orientation
 *   0 is vertical, other is horisontal.
 * @param $path_module
 *   Path to this module.
 *
 * @ingroup theme
 */
function theme_uc_pic_cart_block_scroll_btn($variables) {

  $last = $variables['last'];
  $orientation = $variables['orientation'];
  $path_module = $variables['path_module'];

  $output = '';
  if (!is_bool($last) || !is_numeric($orientation) || empty($path_module)) {
    return $output;
  }

  if ($last) {
    $output .= "</div> <!-- scroll area -->\n";
  }

  if (!$last && ($orientation == 0)) {
    // scroll up
    $arrowup = theme('image', array('path' => $path_module . '/img/bullet-arrow-up.gif', 'alt' =>  '^', 'title' => '', 'attributes' => array('class' => 'uc_pic_cart_block_btn')));
    $output .= '<div class="uc_pic_cart_block_scroll_up_def">'. $arrowup .'</div>';
  }
  elseif ($last && ($orientation == 0)) {
    // scroll down
    $arrowdown = theme('image', array('path' => $path_module . '/img/bullet-arrow-down.gif', 'alt' => 'v', 'title' => '', 'attributes' => array('class' => 'uc_pic_cart_block_btn')));
    $output .= '<div class="uc_pic_cart_block_scroll_down_def">'. $arrowdown .'</div>';
  }
  elseif (!$last) {
    // scrolling horisontal
    $arrowleft = theme('image', array('path' => $path_module . '/img/bullet-arrow-left.gif',  'alt' => '<', 'title' => '', 'attributes' => array('class' => 'uc_pic_cart_block_btn')));
    $arrowright = theme('image', $path_module .'/img/bullet-arrow-right.gif', '>', '', array('class' => 'uc_pic_cart_block_btn'));
    $output .= '<div class="uc_pic_cart_block_scroll_left_def">'. $arrowleft .'</div>';
    $output .= '<div class="uc_pic_cart_block_scroll_right_def">'. $arrowright .'</div>';
  }

  if (!$last) {
    $output .= '<div id="uc_pic_cart_block_scroll_area">';
  }
  $output .= "\n";

  return $output;
}

/**
 * Theme the cart item in block.
 *
 * @param $item
 *   Array which represents current cart item:
 *     'title' - name of product (link to node in most cases),
 *     'description' - description of product, e.g. attributes, parts of product kit, etc.
 *     'qty' - quantity of product,
 *     'price' - price of item,
 *     'nid' - node ID of product,
 *     'data' - serialized data of product,
 *     'img' - full themed image of product,
 *     'module' - module of product ('uc_product', 'uc_product_kit', etc.).
 * @param $rownum
 *   Current row number (we are using odd and even styles).
 * @param $orientation
 *   0 is vertical, another is horisontal.
 * @param $path_module
 *   Path to this module.
 *
 * @ingroup theme
 * @see uc_pic_cart_block_block()
 */
function theme_uc_pic_cart_block_item($variables) {
  //$item = NULL, $rownum = 0, $orientation = 0, $path_module = ''

  $item = $variables['item'];
  $rownum = $variables['rownum'];
  $orientation = $variables['orientation'];
  $path_module = base_path() . $variables['path_module'];

  $output = '';

  if (!is_array($item) || !is_numeric($orientation) || empty($path_module)) {
    return $output;
  }

  // Generating buttons (forms) "remove", "inc.", "dec.".

  $itemdata = unserialize($item['data']);

  $remvoebtn = l('<img src="' . $path_module . '/img/remove_product.gif"  title="remove" alt="remvoe" />', 'uccartpics/remove/nojs/' . $item['nid'], array('html' => TRUE, 'attributes' => array('class' => 'use-ajax')));


  // Product feature "restrict qty" is supported, so we can add "inc." and "dec." buttons
  // only if this feature is not used for this product.
  if (!isset($itemdata['restrict_qty']) || (isset($itemdata['restrict_qty']) && ($itemdata['restrict_qty'] != '1'))) {

    //Decrement button
    $decbtn = l('<img src="' . $path_module . '/img/dec_product.gif"  title="-" alt="-" />', 'uccartpics/update/nojs/dec/' . $item['nid'], array('html' => TRUE, 'attributes' => array('class' => 'use-ajax')));
    //Increment button
    $incbtn = l('<img src="' . $path_module . '/img/inc_product.gif"  title="-" alt="-" />', 'uccartpics/update/nojs/inc/' . $item['nid'], array('html' => TRUE, 'attributes' => array('class' => 'use-ajax')));

  }

  if ($orientation == 0) {
    $rowclass = ($rownum % 2) ? 'odd' : 'even';
    $output .= '<tr class="'. $rowclass .'">';
    $output .= '<td rowspan=2 class="uc_pic_cart_block_td pic"><div class="uc_pic_cart_block_productimage">'. $item['img'] .'</div></td>';
    $output .= '<td class="uc_pic_cart_block_td title">'. $item['title'] .'</td>';
    $output .= '<td class="uc_pic_cart_block_td remove">'. $remvoebtn .'</td></tr>'."\n";

    $use_description = (variable_get('uc_pic_cart_block_show_descriptions', FALSE) && !empty($item['description']));

    if ($use_description) {
      $output .= '<tr class="'. $rowclass .'">';
      $output .= '<td colspan=2 class="uc_pic_cart_block_tddesc">'. $item['description'] .'</td>';
      $output .= '</tr>';
    }

    $output .= '<tr class="'. $rowclass .'">';
    if ($use_description) {
      $output .= '<td></td>';
    }

    $output .= '<td class="uc_pic_cart_block_tdqty">';
  }
  else {
    $output .= '<div class="uc_pic_cart_block_item_hor">';
    $output .= '<div class="uc_pic_cart_block_productimage">'. $item['img'] .'</div>';
  }

  $itemdata = unserialize($item['data']);

  if (!isset($itemdata['restrict_qty']) || (isset($itemdata['restrict_qty']) && ($itemdata['restrict_qty'] != '1'))) {
    if (variable_get('uc_pic_cart_block_increase_first', FALSE)) {
      $output .= $incbtn .'<span class="uc_pic_cart_block_spanqty">'. $item['qty'] .'</span>'. $decbtn;
    }
    else {
      $output .= $decbtn .'<span class="uc_pic_cart_block_spanqty">'. $item['qty'] .'</span>'. $incbtn;
    }
  }
  else {
    $output .= '<span class="uc_pic_cart_block_spanqty">'. $item['qty'] .'</span>';
    if ($orientation != 0) {
      $output .= $removebtn;
    }
  }

  if ($orientation == 0) {
    $output .=  '</td>';
    $output .= '<td class="uc_pic_cart_block_tdsum"><span class="uc_pic_cart_block_spansum">'. $item['price'] .'</span></td>';
    $output .= '</tr>';
  }
  else {
    $output .= '<br /><span class="uc_pic_cart_block_spansum">'. $item['price'] .'</span></div>';
  }

  return $output;
}

/**
 * Theme the block summary.
 *
 * @param $count
 *   How many items are in cart.
 * @param $total
 *   How much money we want to spend :)
 */
function theme_uc_pic_cart_block_summary($variables) {
  //$count = 0, $total = 0

  $count = $variables['count'];
  $total = $variables['total'];

  if ($count==0 || $total==0) {
    return '';
  }

  $item_text = format_plural($count, '<span class="num-items">@count</span> Item', '<span class="num-items">@count</span> Items');
  $output = '<table class="uc_pic_cart_block_summary"><tbody><tr>'
  .'<td class="uc_pic_cart_block_summary_tditems">'. $item_text .'</td>'
  .'<td class="uc_pic_cart_block_summary_tdtotal">'. uc_currency_format($total) .'</td></tr>'."\n";

  $attr = array('attributes' => array('rel' => 'nofollow'));
  $output .= '<tr class="uc_pic_cart_block_summary_links"><td class="uc_pic_cart_block_summary_tdview">';
  $output .= l(t('View cart'), 'cart', $attr) .'</td><td class="uc_pic_cart_block_summary_tdcheckout">';
  if (variable_get('uc_checkout_enabled', TRUE)) {
    $output .= l(t('Checkout'), 'cart/checkout', $attr) .'</td></tr>';
  }
  else {
    $output .= '</td></tr>';
  }

  $output .= "</tbody></table>\n";

  return $output;
}


/**
 * Callback function for custom sort array of cart items.
 *
 * We want to sort by name, quantity or sum (price).
 * We are using $_SESSION param for current sort order.
 *
 * See http://www.php.net/manual/en/function.usort.php
 */
function _uc_pic_cart_block_sortitems($item1, $item2) {
  if (!isset($_SESSION['uc_pic_cart_block_sortorder']) || !is_numeric($_SESSION['uc_pic_cart_block_sortorder'])) {
    $_SESSION['uc_pic_cart_block_sortorder'] = 0;
  }

  switch ($_SESSION['uc_pic_cart_block_sortorder']) {
    case 0: // by title asc
      return strnatcasecmp($item1['title_simple'], $item2['title_simple']);

    case 1: // by title desc
      return -strnatcasecmp($item1['title_simple'], $item2['title_simple']);

    case 2: // by qty asc
      if ($item1['qty'] > $item2['qty']) {
        return 1;
      }
      elseif ($item1['qty'] < $item2['qty']) {
        return -1;
      }
      else {
        return strnatcasecmp($item1['title_simple'], $item2['title_simple']);
      }

    case 3: // by qty desc
      if ($item1['qty'] > $item2['qty']) {
        return -1;
      }
      elseif ($item1['qty'] < $item2['qty']) {
        return 1;
      }
      else {
        return -strnatcasecmp($item1['title_simple'], $item2['title_simple']);
      }

    case 4: // by total asc
      $total1 = $item1['price'];
      $total2 = $item2['price'];
      if ($total1 > $total2) {
        return 1;
      }
      elseif ($total1 < $total2) {
        return -1;
      }
      else {
        return strnatcasecmp($item1['title_simple'], $item2['title_simple']);
      }

    case 5: // by total desc
      $total1 = $item1['price'];
      $total2 = $item2['price'];
      if ($total1 > $total2) {
        return -1;
      }
      elseif ($total1 < $total2) {
        return 1;
      }
      else {
        return -strnatcasecmp($item1['title_simple'], $item2['title_simple']);
      }

    default:
      return 0;
  }

}
