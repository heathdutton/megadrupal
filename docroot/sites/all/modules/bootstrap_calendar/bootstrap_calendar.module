<?php
/**
* @file
* Generates a Twitter Bootstrap Carousel with images carousel.
*
*/

/**
 * Implements hook_init().
 */

function bootstrap_calendar_init() {
}

/**
* Implementation of hook_menu().
*/
function bootstrap_calendar_menu() {
  // Admin settings.
  $items['bootstrap_calendar'] = array(
    'title' => 'Calendar',
    'page callback' => 'bootstrap_calendar_page',
    'access arguments' => array('access bootstrap calendar'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['ajax/bootstrap_calendar/events'] = array(
    'page callback' => 'bootstrap_calendar_ajax_calendar_events',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );  
  $items['admin/config/user-interface/bootstrap_calendar'] = array(
    'title' => 'Bootstrap Calendar',
    'description' => 'Reder events on a Bootstrap Calendar',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bootstrap_calendar_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function bootstrap_calendar_permission() {
  $permissions = array(
    'access bootstrap calendar' => array(
      'title' => t('Access bootstrap calendar page'),
      'description' => t('Give access to the Bootstrap Calendar page.'),
    ),
  );
  return $permissions;  
}

/**
 * Module settings form.
 */
function bootstrap_calendar_settings($form, &$form_state) {
  $settings = variable_get('bootstrap_calendar_settings');

  // Layout
  $options['views'] = array(
    '#type' => 'fieldset',
    '#title' => t('Views'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $options['views']['year'] = array(
    '#type' => 'fieldset',
    '#title' => t('Year'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $options['views']['year']['enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable year'),
    '#default_value' => $settings['views']['year']['enable'],
  );
  $options['views']['year']['slide_events'] = array(
    '#type' => 'checkbox',
    '#title' => t('Slide events'),
    '#default_value' => $settings['views']['year']['slide_events'],
  );
  $options['views']['month'] = array(
    '#type' => 'fieldset',
    '#title' => t('Month'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $options['views']['month']['enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable month'),
    '#default_value' => $settings['views']['month']['enable'],
  );
  $options['views']['month']['slide_events'] = array(
    '#type' => 'checkbox',
    '#title' => t('Slide events'),
    '#default_value' => $settings['views']['month']['slide_events'],
  );
  $options['views']['week'] = array(
    '#type' => 'fieldset',
    '#title' => t('Week'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $options['views']['week']['enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable week'),
    '#default_value' => $settings['views']['week']['enable'],
  );
  $options['views']['day'] = array(
    '#type' => 'fieldset',
    '#title' => t('Day'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $options['views']['day']['enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable day'),
    '#default_value' => $settings['views']['day']['enable'],
  );
  $options['layout'] = array(
    '#type' => 'fieldset',
    '#title' => t('Layout'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $options['layout']['first_day'] = array(
    '#type' => 'radios',
    '#title' => t('First day of week'),
    '#options' => array(
      '' => t('First day of week language-dependant'),
      1 => t('First day of week is Monday'),
      2 => t('First day of week is Sunday'),
    ),
    '#default_value' => $settings['layout']['first_day'],
  );
  $jquery_ajax_load = module_exists('jquery_ajax_load');
  $options['layout']['open_modal'] = array(
    '#type' => 'checkbox',
    '#title' => t('Open events on modal (Requires @module module).', array(@module => 'jquery_ajax_load')),
    '#default_value' => $jquery_ajax_load ? $settings['layout']['open_modal'] : FALSE,
    '#description' => t('When enable, event detail will load via AJAX on a Modal.'),
    '#disabled' => !$jquery_ajax_load,
  );
  $options['layout']['default_view'] = array(
    '#type' => 'radios',
    '#title' => t('The view where the Calendar will open as default'),
    '#options' => array(
      'year' => t('Year'),
      'month' => t('Month'),
      'week' => t('Week'),
      'day' => t('Day'),
    ),
    '#default_value' => $settings['layout']['default_view'],
  );
  $options['layout']['time_start'] = array(
    '#type' => 'textfield',
    '#title' => t('Time to start for day view'),
    '#default_value' => $settings['layout']['time_start'],
    '#description' => t('Use a 24 hour format. Example: 06:00, 22:00.'),
    '#required' => TRUE,
  );
  $options['layout']['time_end'] = array(
    '#type' => 'textfield',
    '#title' => t('Time end for day view'),
    '#default_value' => $settings['layout']['time_end'],
    '#description' => t('Use a 24 hour format. Example: 06:00, 22:00.'),
    '#required' => TRUE,
  );
  $options['layout']['split'] = array(
    '#type' => 'select',
    '#title' => t('Split in minutes'),
    '#options' => array(
      '15' => t('15'),
      '30' => t('30'),
      '30' => t('60'),
    ),
    '#default_value' => $settings['layout']['split'],
    '#required' => TRUE,
  );
  // Origin of the events.
  $options['entity'] = array(
    '#type' => 'fieldset',
    '#title' => t('Entity'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $options['entity']['entity_type'] = array(
    '#type' => 'select',
    '#title' => t('Entity type for events'),
    '#options' => array(
      'node' => t('Node'),
    ),
    '#default_value' => $settings['entity']['entity_type'],
  );
  $options['entity']['entity_bundle'] = array(
    '#type' => 'select',
    '#title' => t('Entity bundle'),
    '#options' => bootstrap_calendar_get_nodes_types(),
    '#default_value' => $settings['entity']['entity_bundle'],
  );
  $options['entity']['field_class'] = array(
    '#type' => 'textfield',
    '#title' => t('Event class field'),
    '#default_value' => $settings['entity']['field_class'],
    '#description' => t('Name of a term reference field that will define the class of an event.'),
    '#required' => TRUE,
  );
  $options['entity']['field_date'] = array(
    '#type' => 'textfield',
    '#title' => t('Event date field'),
    '#default_value' => $settings['entity']['field_date'],
    '#description' => t('A Date field with initial and end fields.'),
    '#required' => TRUE,
  );
  $options['entity']['field_filter'] = array(
    '#type' => 'textfield',
    '#title' => t('Event filter field'),
    '#default_value' => $settings['entity']['field_filter'],
    '#description' => t('A term reference field to be used as filter for events.'),
  );
  $options['entity']['field_group'] = array(
    '#type' => 'textfield',
    '#title' => t('Event group field'),
    '#default_value' => $settings['entity']['field_group'],
    '#description' => t('A term reference field to be used as filter for events.'),
  );
  $options['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $options['advanced']['tmpls'] = array(
    '#type' => 'select',
    '#title' => t('Template location'),
    '#options' => array(
      'library' => t('Library'),
      'theme' => t('Theme'),
    ),
    '#default_value' => $settings['advanced']['tmpls'],
    '#description' => t('Default templates are located in the library directory. If you wish to personalize templates, copy all of them to tmpls directory inside your themes directory and modify any you want.'),
    '#required' => TRUE,
  );

  $options['#tree'] = TRUE;
  $form['bootstrap_calendar_settings'] = $options;

  // Disable automatic defaults, which don't work with nested values.
  return system_settings_form($form, FALSE);
}

/**
 * Implementation of hook_theme().
 *
 * Creates the template page.
 */
function bootstrap_calendar_theme() {
  $themes = array(
    'bootstrap_calendar' => array(
      'variables' => array(
        'eventtypes' => array(),
        'parameters' => NULL, 
      ),
      'template' => 'bootstrap_calendar'
    ),
  );
  return $themes;
}

function template_preprocess_bootstrap_calendar(&$variables) {
  $variables['prev'] = t('Prev');
  $variables['next'] = t('Next');
  $variables['today'] = t('Today');
  $variables['year'] = t('Year');
  $variables['month'] = t('Month');
  $variables['week'] = t('Week');
  $variables['day'] = t('Day');
}

/**
 * Returns basic HTML for page.
 * Takes URL parameters to filter events
 */

function bootstrap_calendar_page() {
  $args = func_get_args();
  $settings = variable_get('bootstrap_calendar_settings');
  $module_path = drupal_get_path('module', 'bootstrap_calendar');
  if ($settings['advanced']['tmpls'] == 'theme') {
    $path = path_to_theme();
  }
  else {
    $path = libraries_get_path('bootstrap_calendar');
  }
  drupal_add_js(array(
    'bootstrap_calendar' => array(
      'base' => base_path(),
      'first_day' => $settings['layout']['first_day'],
      'open_modal' => $settings['layout']['open_modal'],
      'default_view' => $settings['layout']['default_view'],
      'time_start' => $settings['layout']['time_start'],
      'time_end' => $settings['layout']['time_end'],
      'time_split' => $settings['layout']['split'],
      'views' => $settings['views'],
      'path' => $path,
      'date' => date("Y-m-d"),
      'args' => isset($args) ? '/' . implode("/", $args) : '',
    ),
  ),
  'setting');
  libraries_load('bootstrap_calendar');
  drupal_add_js($module_path . '/i18n.js');
  drupal_add_js($module_path . '/bootstrap_calendar.js');
  drupal_add_css($module_path . '/bootstrap_calendar.css');

  // This query is duplicated to obtain tid
  // ToDo: do this on the javascript
  $settings = variable_get('bootstrap_calendar_settings');
  $entity = $settings['entity']['entity_type'];
  $bundle = $settings['entity']['entity_bundle'];
  $class_field = $settings['entity']['field_class'];
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', $entity)
    ->entityCondition('bundle', $bundle)
    ->propertyCondition('status', 1)
//    ->fieldCondition('group_audience', 'gid', $og->gid)
//    ->fieldCondition('field_due_date', 'value', array($start, $end), 'BETWEEN');
    ->addMetaData('account', user_load(1)); // Run the query as user 1.
  $result = $query->execute();

  if (isset($result[$entity])) {
    $result_ids = array_keys($result[$entity]);
    $result_items = entity_load($entity, $result_ids);
  }
  $eventtypes = array();
  foreach($result_items as $row) {
    $class = field_get_items($entity, $row, "$class_field");
    if (!array_key_exists($class[0]['tid'], $eventtypes)) {
      $eventtypes[$class[0]['tid']] = taxonomy_term_load($class[0]['tid'])->name;
    }
  }
  $items = array();
  $attributes = array(
    'id' => 'calendar-event-types',
    'class' => 'list-group',
  );
  foreach ($eventtypes as $key => $eventtype) {
    $items[] = array(
      'data' => '<span></span>' . $eventtype,
      'class' => array('event-class-' . $key, "list-group-item"),
    );
  }
  $event_list = theme_item_list(array('items' => $items, 'title' => NULL, 'type' => 'ul','attributes' => $attributes));
  $render_html = theme( 'bootstrap_calendar', array( 
    'eventtypes' => $event_list,
    'parameters' => array('title' => 'Titulo') 
  ));
  return $render_html;
}

/**
 * Ajax callback to return project events.
 */
function bootstrap_calendar_ajax_calendar_events() {
  $args = func_get_args();
 // dpm($args);
  drupal_add_library('system', 'drupal.ajax');
  $settings = variable_get('bootstrap_calendar_settings');
  $entity = $settings['entity']['entity_type'];
  $bundle = $settings['entity']['entity_bundle'];
  $filter_field = $settings['entity']['field_filter'];
  $filter_group = $settings['entity']['field_group'];
  $events = array();
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', $entity)
    ->entityCondition('bundle', $bundle)
    ->propertyCondition('status', 1)
    ->addMetaData('account', user_load(1)); // Run the query as user 1.
  for ( $i=0; $i < count($args); $i++) {
    switch ($args[$i]) {
      case 'og':
        $query->fieldCondition($filter_group, 'target_id', explode('+', $args[$i+1]), 'IN');
        break;
      case 'tid':
        $query->fieldCondition($filter_field, 'tid', explode('+', $args[$i+1]), 'IN');
        break;
      case 'eid':
        $query->fieldCondition($filter_field, 'id', explode('+', $args[$i+1]), 'IN');
        break;
    }
  }
  $result = $query->execute();

  if (isset($result[$entity])) {
    $result_ids = array_keys($result[$entity]);
    $result_items = entity_load($entity, $result_ids);
  }
  $eventtypes = array();
  foreach($result_items as $row) {
    $class = field_get_items($entity, $row, $settings['entity']['field_class']);//formato
    $date = field_get_items($entity, $row, $settings['entity']['field_date']);
    if (!in_array($class[0]['tid'], $eventtypes)) {
      $eventtypes[] = $class[0]['tid'];
    }
    $event = (object) array(
      'id' => $row->nid,
      'title' => format_date(strtotime($date[0]['value'])*1000, 'custom', 'H:i') . ' - ' . $row->title,
// ToDo: If jquery_ajax_load, add prefix to URL
      'url' => '/'.drupal_get_path_alias('node/'. $row->nid),
      'class' => 'calendar-event-' . $class[0]['tid'],
      'start' => strtotime($date[0]['value'])*1000,
      'end' => strtotime($date[0]['value2'])*1000,
    );
 
    $events[] = $event;
 
  }
  echo drupal_json_encode(array('success' => 1, 'result' => $events));
 
  drupal_exit();
}

/**
 * Libraries implementation.
 */

/**
 * Implements hook_libraries_info().
 */
function bootstrap_calendar_libraries_info() {
  $libraries['bootstrap_calendar'] = array(
    'name' => 'bootstrap_calendar',
    'vendor url' => 'https://github.com/Serhioromano/bootstrap-calendar',
    'download url' => 'https://github.com/Serhioromano/bootstrap-calendar/archive/master.zip',
    'version'=> "1.0",
    'files' => array(
      'js' => array(
        'js/calendar.min.js',
        'components/jstimezonedetect/jstz.min.js',
        'components/underscore/underscore-min.js',
      ),
      'css' => array(
        'css/calendar.min.css',
      ),
    ),
  );
  return $libraries;
}

/**
 * Check if the Sroll Reveal library is installed.
 *
 * @return
 *   A boolean indicating the installed status.
 */
function bootstrap_calendar_installed() {
  if (($library = libraries_detect('bootstrap_calendar')) && !empty($library['installed'])) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Check if the Scroll Reveal library has been loaded.
 *
 * @return
 *   A boolean indicating the loaded status.
 */
function bootstrap_calendar_library_loaded() {
  if (($library = libraries_load('bootstrap_calendar')) && !empty($library['loaded'])) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

// Helper functions

/**
 * Get the list of nodes types.
 */
function bootstrap_calendar_get_nodes_types() {
  $node_types = node_type_get_types();
  $results = array();
  foreach($node_types as $node_type) {
    if (!$node_type->disabled) $results[$node_type->type] = $node_type->name;
  }
  return $results;
}

