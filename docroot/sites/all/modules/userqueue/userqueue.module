<?php

/**
 * Implements hook_menu().
 */
function userqueue_menu() {
  $items['admin/structure/userqueue'] = array(
    'title' => 'Userqueue',
    'page callback' => 'userqueue_list_queues',
    'description' => 'Create and maintain queues of users',
    'access arguments' => array('administer user queues'),
    'file' => 'userqueue.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/structure/userqueue/list'] = array(
    'title' => 'List',
    'page callback' => 'userqueue_list_queues',
    'access arguments' => array('administer user queues'),
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/structure/userqueue/add'] = array(
    'title' => 'Add',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('userqueue_edit_form', NULL),
    'access arguments' => array('administer user queues'),
    'file' => 'userqueue.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/structure/userqueue/%userqueue/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('userqueue_admin_delete', 3),
    'access arguments' => array('administer user queues'),
    'file' => 'userqueue.admin.inc',
    'type' => MENU_CALLBACK
  );
  $items['admin/structure/userqueue/%userqueue/view'] = array(
    'title' => 'View queue',
    'page callback' => 'userqueue_view_queue',
    'page arguments' => array(3),
    'file' => 'userqueue.pages.inc',
    'access arguments' => array('manipulate userqueue'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/structure/userqueue/%userqueue/edit'] = array(
    'title' => 'Edit queue',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('userqueue_edit_form', 3),
    'access arguments' => array('administer user queues'),
    'file' => 'userqueue.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['userqueue/%userqueue/remove-user/%user'] = array(
    'page callback' => 'userqueue_admin_remove_user',
    'page arguments' => array(1, 3),
    'access arguments' => array('administer user queues'),
    'file' => 'userqueue.pages.inc',
    'type' => MENU_CALLBACK
  );
  return $items;
}


/**
 * Implements hook_permission().
 */
function userqueue_permission() {
  return array(
    'administer userqueues' => array(
      'title' => t('Administer userqueue'),
      'description' => t('Administer the userqueue module.'),
    ),
   'manipulate userqueues' => array(
      'title' => t('Manipulate userqueue'),
      'description' => t('Manipulate userqueue.'),
    ),
  );
}

/**
 * Tool function for %userqueue
 */
function userqueue_load($uqid) {
  return db_select('userqueue', 'uq')
          -> fields('uq')
          -> condition('uqid', $uqid)
          -> execute()
          -> fetchObject();
}

/**
 * Return users from a userqueue
 */
function userqueue_get_users($queue) {
  $result = db_select('userqueue_user', 'uu')
      -> fields('uu', array('uid', 'position'))
      -> condition('uqid', $queue -> uqid)
      -> orderBy('position', 'ASC')
      -> execute();
  $users = array();
  foreach ($result as $row) {
    $account = user_load($row -> uid);
    $account -> position = $row -> position;
    $users[$row -> uid] = $account;
  }
  return $users;
}

/**
 * Implements hook_theme().
 */
function userqueue_theme($existing, $type, $theme, $path) {
  return array(
    'userqueue_arrange_subqueue_form_table' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Theme the subqueue overview as a sortable list.
 * @ingroup themeable
 */
function theme_userqueue_arrange_subqueue_form_table($variables) {
  $form = $variables['form'];
  $output = '';
  // get css to hide some of the help text if javascript is disabled
  drupal_add_tabledrag('userqueue-dragdrop', 'order', 'sibling', 'user-position');

  // render form as table rows
  $rows = array();
  $counter = 1;
  foreach (element_children($form) as $key) {
    if (isset($form[$key]['title'])) {
      $row = array();
      $row[] = drupal_render($form[$key]['title']);
      $row[] = drupal_render($form[$key]['date']);
      $row[] = drupal_render($form[$key]['position']);
      $row[] = drupal_render($form[$key]['edit']);
      $row[] = drupal_render($form[$key]['remove']);
      $row[] = array(
        'data' => $counter,
        'class' => array('position')
      );
      $rows[] = array(
        'data' => $row,
        'class' => array('draggable'),
      );
    }
    $counter ++;
  }
  if (empty($rows)) {
    $rows[] = array(array('data' => t('No users in this queue.'), 'colspan' => 7));
  }

  // render the main userqueue table
  $header = array(t('Title'), t('Created'), t('Position'), array('data' => t('Operations'), 'colspan' => 2), t('Position'));
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => array('userqueue-dragdrop'), 'class' => array('userqueue-dragdrop'))));

  return $output;
}

/**
 * Helper, delete a userqueue
 */
function userqueue_delete_queue($uqid) {
  db_delete('userqueue_user')
      -> condition('uqid', $uqid)
      -> execute();
  db_delete('userqueue')
      -> condition('uqid', $uqid)
      -> execute();
  drupal_set_message(t('Userqueue has been deleted.'));
}

/**
 * Load all userqueues
 */
function userqueue_load_queues() {
  $result = db_select('userqueue', 'uq')
      -> fields('uq')
      -> execute();
  $queues = array();
  foreach ($result as $queue) {
    $queues[$queue->uqid] = $queue;
  }
  return $queues;
}

/**
 * Helper, update a userqueue
 */
function userqueue_update_queue($queue, $uqid) {
  $queue['uqid'] = $uqid;
  drupal_write_record('userqueue', $queue, 'uqid');
  return drupal_set_message(t("Updated queue '@name'.", array('@name' => $queue['title'])));
}

/**
 * Helper, create a new userqueue
 */
function userqueue_create_queue($queue) {
  if (drupal_write_record('userqueue', $queue)) {
    drupal_set_message(t("Created queue '@name'.", array('@name' => $queue['title'])));
    return $queue;
  }
}
