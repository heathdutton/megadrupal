<?php
/**
 * @file
 * Hooks and support for Codit: Crons.
 */

/**
 * Implements hook_help().
 */
function codit_crons_help($path, $arg) {
  switch ($path) {
    case 'admin/help#codit_crons':
      $output = file_get_contents(drupal_get_path('module', 'codit_crons') . '/README.md');
      if (module_exists('markdown')) {
        // Markdown can be used.
        module_load_include('php', 'markdown', 'markdown');
        $output = Markdown($output);
      }
      else {
        // Markdown is not available.
        $output = '<pre>' . $output . '</pre>';
      }
      return $output;
  }
}


/**
 * Implements hook_cron().
 */
function codit_crons_cron() {
  // Only do something with hook_cron if Elysia Cron is not in use.
  if (!module_exists('elysia_cron')) {
    // Load up helper functions.
    module_load_include('inc', 'codit_crons', 'codit_crons');
    // Cycle through all cron jobs and calls its callback function.
    $a_codit_cron_jobs = codit_crons_get_cron_jobs();

    if (!empty($a_codit_cron_jobs) && is_array($a_codit_cron_jobs)) {
      // Means there are crons to process.
      $cron_job_queue = DrupalQueue::get('codit_crons_jobs');
      $cron_job_queue->createQueue();
      foreach ($a_codit_cron_jobs as $cron_job_name => $cron_job_callback_file) {
        // Queue up each of the registered cron jobs.
        $cron_job_queue->createItem($cron_job_name);
      }
    }
  }
}


/**
 * Implements hook_cronapi().
 */
function codit_crons_cronapi($op, $job = NULL) {
  // Only do something with _cronapi if Elysia Cron is in use.
  if (module_exists('elysia_cron')) {
    $items = array();
    // Load up helper functions.
    module_load_include('inc', 'codit_crons', 'codit_crons');
    $a_codit_cron_jobs = codit_crons_get_cron_jobs();

    if (!empty($a_codit_cron_jobs) && is_array($a_codit_cron_jobs)) {
      // Means there are cron jobs to process.
      $cron_job_queue = DrupalQueue::get('codit_crons_jobs');
      foreach ($a_codit_cron_jobs as $cron_job_name => $cron_job_callback_file) {

        // Create sandbox to keep included callback file from bleeding through.
        $sandbox_params = array(
          'cron_job_name' => $cron_job_name,
          'cron_job_callback_file' => $cron_job_callback_file,
        );
        $sandbox = function() {
          // Extract the params.
          extract(func_get_arg(0));
          // Load the cron job callback file to get the $_time_pattern and
          // the $_description.  If it exists, it will be used.
          include $cron_job_callback_file;

          // Read the time pattern.
          $parameters = (!empty($_time_pattern)) ? array('PatternSubmitted' => $_time_pattern) : array();
          $time = new CronTime($cron_job_name, $parameters);

          return array(
            'description' => (!empty($_description)) ? $_description : t('Description not available'),
            'rule' => $time->getElysiaCronAPIRule(),
          );
        };
        // Get the details from sandbox.
        $cron_job = $sandbox($sandbox_params);
        // Build the individual cron job to register with the Elysia Cron API.
        $items['codit_crons_' . $cron_job_name] = array(
          'description' => $cron_job['description'],
          // The initial time rule comes from the variable in the callback, but
          // it can be overridden by using the admin
          // /admin/config/system/cron/settings Once altered in the admin, any
          // setting in code are ignored.
          'rule' => $cron_job['rule'],
          'callback' => 'codit_crons_callback_router',
          'arguments' => array($cron_job_name),
        );
      }
    }
    return $items;

  }
}


/**
 * Implements hook_mail().
 */
function codit_crons_mail($key, &$message, $params) {
  switch ($key) {
    case 'normal-send':
      $message['subject'] = $params['subject'];
      $message['body'][] = drupal_wrap_mail($params['body']);
      // $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      break;
  }
}


/**
 * Implements hook_cron_queue_info().
 */
function codit_crons_cron_queue_info() {
  // Set up the worker queue that will run all cron jobs from codit_crons.
  $queues['codit_crons_jobs'] = array(
    'worker callback' => 'codit_crons_callback_router',
    'time' => 120,
    'skip on cron' => FALSE,
  );

  return $queues;
}
