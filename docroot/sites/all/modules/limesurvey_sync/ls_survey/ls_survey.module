<?php
/**
 * @file
 * Main functions for the ls_survey module.
 */

/**
 * Implements hook_node_info().
 *
 * Declare the "Survey" content type, corresponding to node with a specific
 * survey ID reference and a specific language.
 */
function ls_survey_node_info() {
  return array(
    'survey' => array(
      'name' => t('Survey'),
      'base' => 'ls_survey',
      'description' => t('Surveys from your LimeSurvey site'),
      'title_label' => t('Survey title'),
      'locked' => TRUE, // Default value.
    ),
  );
}

/**
 * Implements hook_permission().
 *
 * Since we are limiting the ability to create new nodes to certain users,
 * we need to define what those permissions are here. We also define a
 * permission to allow users to edit the nodes they created.
 */
function ls_survey_permission() {

  // Note that the ls_survey_install() function prevent core from creating
  // permissions for the ls_survey module, because som entries need to be
  // customised.
  // set wrap for displaying the message : 'Warning: Give to trusted roles
  // only; this permission has security implications'.
  $warning = t('This permission exposes informations from your LimeSurvey site administrator interface.') . '<br />';
  // Entries for create, edit own/any, delete own/any survey content.
  $info_name = t('Survey');
  return array(
    'create survey content' => array(
      'title' => t('%type_name: Create new content', array('%type_name' => $info_name)),
      'description' => t('Import a survey from your LimeSurvey site into this site.') . '<br />' . $warning,
      'restrict access' => TRUE,
    ),
    'edit own survey content' => array(
      'title' => t('%type_name: Edit own content', array('%type_name' => $info_name)),
      'description' => $warning,
      'restrict access' => TRUE,
    ),
    'edit any survey content' => array(
      'title' => t('%type_name: Edit any content', array('%type_name' => $info_name)),
      'description' => $warning,
      'restrict access' => TRUE,
    ),
    'delete own survey content' => array(
      'title' => t('%type_name: Delete own content', array('%type_name' => $info_name)),
    ),
    'delete any survey content' => array(
      'title' => t('%type_name: Delete any content', array('%type_name' => $info_name)),
    ),
    'view own survey content' => array(
      'title' => t('%type_name: View own content', array('%type_name' => $info_name)),
      'description' => $warning,
      'restrict access' => TRUE,
    ),
    'view any survey content' => array(
      'title' => t('%type_name: View any content', array('%type_name' => $info_name)),
      'description' => $warning,
      'restrict access' => TRUE,
    ),
    'force answers synchronization' => array(
      'title' => t('Force answers synchronization'),
      'description' => t('Allow to force the answers synchronization with your LimeSurvey site, even if it not needed or for desynchronized answers, for answers from a viewable survey'),
    ),
    'compare answers' => array(
      'title' => t('Compare answers'),
      'description' => t('Allow to compare answers from a viewable survey'),
    ),
  );
}

/**
 * Implements hook_node_access().
 *
 * Handle specific access to the survey content type.
 */
function ls_survey_node_access($node, $op, $account) {
  if ($op == 'create') {
    if (user_access('create survey content', $account)) {
      return NODE_ACCESS_ALLOW;
    }
  }

  if ($op == 'update') {
    if (user_access('edit any survey content', $account) || (user_access('edit own survey content', $account) && ($account->uid == $node->uid))) {
      return NODE_ACCESS_ALLOW;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any survey content', $account) || (user_access('delete own survey content', $account) && ($account->uid == $node->uid))) {
      return NODE_ACCESS_ALLOW;
    }
  }

  if ($op == 'view') {
    if (isset($node->type) && $node->type == 'survey') {
      if (user_access('view any survey content', $account) || (user_access('view own survey content', $account) && ($account->uid == $node->uid))) {
        return NODE_ACCESS_IGNORE; // Allowed by the access content permission
      }
      else {
        // As we set the 'view' entry, we return a deny access here.
        return NODE_ACCESS_DENY;
      }
    }
    else {
      return NODE_ACCESS_IGNORE;
    }
  }
}

/**
 * Implements hook_menu().
 *
 * Create 3 tabs for the each survey content type : a tab allowing to create
 * and manage options of the associated answers content type, a tab printing
 * all associated node answers and a tab for importing answers.
 */
function ls_survey_menu() {
  $items = array();
  $items['node/%node/options'] = array(
    'title' => 'Options',
    'page callback' => 'ls_survey_type',
    'page arguments' => array(1),
    'access callback' => 'ls_survey_type_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'ls_survey.type.inc',
  );

  // Link to force synchronization for a specific answer. For admin purpose.
  $items['node/%node/ls-import'] = array(
    'title' => 'Synchronization',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ls_survey_import', 1),
    'access callback' => 'ls_survey_import_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 15,
    'file' => 'ls_survey.import.inc',
  );

  return $items;
}

/**
 * Manage access to the options tab of a survey node
 *
 * Allow access depending on permissions and if the answer content is already
 * created.
 *
 * @param $node
 *   The survey node object.
 *
 * @return
 *   A boolean. TRUE if access is granted.
 */
function ls_survey_type_access($node) {
  if (!empty($node) && $node->type == 'survey' && !empty($node->ls_orig_type) && node_access('update', $node)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Manage access to the synchronization tab of a Survey node
 *
 * Allow access depending on permissions and if the answer content is already
 * created.
 *
 * @param $node
 *   The survey node object.
 *
 * @return
 *   A boolean. TRUE if access is granted.
 */
function ls_survey_import_access($node) {
  if (!empty($node) && $node->type == 'survey' && module_exists('ls_answ')) {
    module_load_include('inc', 'ls_survey', 'ls_survey');
    $answ_type = (!empty($node->ls_orig_type)) ? ls_survey_find_answ_type($node->ls_orig_type) : FALSE;
    if ($answ_type && node_access('view', $node)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_theme().
 *
 * Display surveys properties from the LimeSurvey database as a html table.
 */
function ls_survey_theme($existing, $type, $theme, $path) {
  return array(
    'ls_survey_sid' => array(
      'render element' => 'form',
      'theme path' => drupal_get_path('module', 'ls_survey'),
      'file' => 'ls_survey.inc',
    ),
  );
}

/**
 * Implements hook_load().
 *
 * Load specific datas from the {ls_survey} table.
 */
function ls_survey_load($nodes) {
  foreach ($nodes as $nid => $record) {
    $additions = db_query('SELECT ls_orig_type, ls_sid, ls_lang FROM {ls_survey} WHERE vid = :vid', array(':vid' => $record->vid))->fetchAssoc();
    foreach ($additions as $property => $value) {
      $nodes[$nid]->$property = $value;
    }
  }
}

/**
 * Implements hook_prepare().
 *
 * Load specific datas from the {ls_survey} table if node is new.
 */
function ls_survey_prepare(&$node) {
  if (!isset($node->ls_sid)) {
    $node->ls_sid = 0;
  }
  if (!isset($node->ls_lang)) {
    $node->ls_lang = '';
  }
  if (!isset($node->ls_orig_type)) {
    $node->ls_orig_type = '';
  }
}

/**
 * Implements hook_insert().
 *
 * Insert specific datas to the {ls_survey} table.
 */
function ls_survey_insert($node) {
  $id = db_insert('ls_survey')
  ->fields(array(
    'vid' => $node->vid,
    'nid' => $node->nid,
    'ls_sid' => $node->ls_sid,
    'ls_orig_type' => $node->ls_orig_type,
    'ls_lang' => $node->ls_lang,
  ))
  ->execute();

  // Create or update the associated answers content type.
  ls_survey_answ_type($node);

  // Rebuild the cache.
  module_load_include('inc', 'ls_survey', 'ls_survey');
  ls_survey_find_survey('', TRUE);
  if (module_exists('ls_answ')) {
    module_load_include('inc', 'ls_answ', 'ls_answ');
    ls_answ_find_current_survey(0, 0, TRUE);
  }
}

/**
 * Implements hook_update().
 *
 * Update specific datas to the {ls_survey} table.
 */
function ls_survey_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    ls_survey_insert($node);
  }
  else {
    db_update('ls_survey')
    ->fields(array(
      'nid' => $node->nid,
      'ls_sid' => $node->ls_sid,
      'ls_lang' => $node->ls_lang,
      'ls_orig_type' => $node->ls_orig_type,
    ))
    ->condition('vid', $node->vid)
    ->execute();

    // Create or update the associated answers content type.
    ls_survey_answ_type($node);
    // Rebuild the cache.
    if (module_exists('ls_answ')) {
      module_load_include('inc', 'ls_answ', 'ls_answ');
      ls_answ_find_current_survey(0, 0, TRUE);
    }
  }
}

/**
 * Implements hook_delete().
 *
 * When a node is deleted, we need to remove all related records from the
 * {ls_survey} table.
 */
function ls_survey_delete($node) {
  // If we delete a survey, we delete the associated content type (= the
  // answers).
  module_load_include('inc', 'ls_survey', 'ls_survey');
  if (!empty($node->ls_orig_type) && $info = ls_survey_find_answ_type($node->ls_orig_type)) {
    node_type_delete($info->type);
    node_types_rebuild();
    // We must delete the variable to : ls_survey_node_type will do it.
    // We need to rebuilt the menu. If we don't, "create ls_orig_type content"
    // menu entry will still exists !
    menu_rebuild();
  }

  // Notice that we're matching all revision, by using the node's nid.
  db_delete('ls_survey')
  ->condition('nid', $node->nid)
  ->execute();
}

/**
 * Implements hook_node_revision_delete().
 */
function ls_survey_node_revision_delete($node) {
  // Notice that we're matching a single revision based on the node's vid.
  db_delete('ls_survey')
  ->condition('vid', $node->vid)
  ->execute();
}

/**
 * Implements hook_node_type_update().
 */
function ls_survey_node_type_update($info) {

  // Make sure to not insert troncate variable name.
  if (empty($info->type)) {
    return;
  }
  // If an answ node type is updated, with don't update the ls_orig_type
  // associated because it is egal to the orig_type and it will never be
  // changed.

  // Monitor breaking association between the survey node ans the answer
  // content type, it occures when the ls_answ module is disabled and it is
  // automatically reassociated when the module is enabled again.
  // This situation occures when the ls_answ module is disabled : all answers
  // content types are disabled but answer nodes still exist. This would break
  // the existing answers nodes type. To prevent this, we enabled it again as
  // a 'node' content type instead. To restore the association later, we keep
  // the same orig_type and the same node->ls_orig_type values. The admin user
  // will only have enable the ls_answ module or to submit the answers content
  // type edit page to restore the association between the answers content
  // type and its survey node.
  if ($info->module == 'ls_answ' && !empty($info->disabled_changed)) {
    // Don't use the node_type_get_types() function, cache is not up-to-date
    // and clearing it here may produce an infinite loop.
    $bt = db_query("SELECT n.nid AS survey_nid, n.title AS survey_title
    FROM {ls_survey} lss
    JOIN {node} n ON n.nid = lss.nid AND n.vid = lss.vid
    JOIN {node_type} nt ON nt.orig_type = lss.ls_orig_type
    WHERE module = :module AND orig_type = :orig_type", array(':module' => 'ls_answ', ':orig_type' => $info->orig_type))->fetchAssoc();
    if (!empty($bt['survey_nid'])) {
      // The associated survey node still exists !
      $variable = array(
        '%name' => $info->name,
        '%survey' => $bt['survey_title'],
      );
      $node_survey_link = l($bt['survey_title'], 'node/' . $bt['survey_nid']);
      if ($info->disabled) {
        // Set revision content type to FALSE to not break the ls_answ table on
        // the vid value if new revisions are saved.
        $variable_name = 'node_options_' . $info->type;
        $variable_type = variable_get($variable_name, FALSE);
        if (!$variable_type) {
          variable_set($variable_name, array());
        }
        else {
          if (isset($variable_type['revision'])) {
            unset($variable_type['revision']);
            variable_set($variable_name, $variable_type);
          }
        }

        // Instead of disabling the answers content types, set them as node
        // content types.
        $info->disabled = FALSE;
        $info->base = 'node_content';
        $info->module = 'node';
        $info->custom = TRUE;
        $info->locked = FALSE;
        $status = node_type_save($info);
        if ($status == SAVED_UPDATED) {
          // Permissions of the ls_answ module are managed henceforth by the
          // node module.
          variable_set('node_permissions_' . $info->type, 1);

          // Load the associated survey node.
          module_load_include('inc', 'ls_survey', 'ls_survey');
          $node_survey = ls_survey_find_survey($info->orig_type);
          $content_type_link = l($info->name, 'admin/structure/types/manage/' . $info->type);
          $variable = array(
            '!name' => $content_type_link,
            '!survey' => l($node_survey->title, 'node/' . $node_survey->nid),
          );
          $variable_wd = array(
            '%name' => $info->name,
            '%survey' => $node_survey->title,
          );
          drupal_set_message(t('The answers content type !name is not associated to the survey !survey anymore and is handled henceforth by the node module. Synchronization features are not availables anymore. Enable the LimeSurvey Sync Responses module in order to restore the association.', $variable));
          watchdog('ls_survey', 'The answers content type %name, associated to the survey %survey, is handled henceforth by the node module', $variable_wd, WATCHDOG_ALERT, $content_type_link);
        }
      }
    }
  }
  elseif (module_exists('ls_answ') && ($info->module == 'node' || $info->base == 'node_content') && !empty($info->orig_type)) {
    // In most cases, the ls_answ_enabled() function will take care of the
    // reassociation.
    // Check if a survey exist, associated to this orig_type.
    module_load_include('inc', 'ls_survey', 'ls_survey');
    $node_survey = ls_survey_find_survey($info->orig_type);
    if ($node_survey) {
      // Reassociate answers content types with the ls_answ module.
      $info->base = 'ls_answ';
      $info->module = 'ls_answ';
      $info->custom = FALSE;
      $info->locked = FALSE;
      $status = node_type_save($info);
      if ($status == SAVED_UPDATED) {
        // Switch back to the ls_answ module for managing permissions.
        variable_set('node_permissions_' . $info->type, 0);
        $content_type_link = l($info->name, 'admin/structure/types/manage/' . $info->type);
        $variable = array(
          '!name' => $content_type_link,
          '!survey' => l($node_survey->title, 'node/' . $node_survey->nid),
        );
        $variable_wd = array(
          '%name' => $info->name,
          '%survey' => $node_survey->title,
        );
        drupal_set_message(t('The responses content type !name has been associated again to the survey !survey.', $variable));
        watchdog('ls_answ', 'The responses content type %name has been associated again to the survey %survey.', $variable_wd, WATCHDOG_NOTICE, $content_type_link);
      }
    }
  }

  // Concern only answers content types.
  if ($info->module != 'ls_answ') {
    return;
  }
  // Handle the specific variable :

  // Define the variable names.
  $variable_new = 'ls_answ_options_' . $info->type;
  $variable_old = (!empty($info->old_type)) ? 'ls_answ_options_' . $info->old_type : 'ls_answ_options_' . $info->type;

  // Update variables.
  $options = variable_get($variable_old, FALSE);
  if (!$options) {
    // The variable does not exist and must be created.
    // 1) Load default values :
    module_load_include('inc', 'ls_survey', 'ls_survey.type');
    $default_options = ls_survey_answ_default_options();
    $survey_default_options = variable_get('ls_survey_options', $default_options);
    // 2) Edit the prefix and ls_format values.
    $survey_default_options['ls_prefix'] =  t('@type #', array('@type' => $info->name));
    $compatible_formats = ls_survey_type_compatible_filters();
    $survey_default_options['ls_format'] = (array_key_exists(0, $compatible_formats)) ? $compatible_formats[0] : '';
    if (empty($survey_default_options['ls_format'])) {
      drupal_set_message(t('The <a href="@url">input format</a> should display HTML text or at least the following tags : @tags.', array('@url' => url('admin/config/content/formats'), '@tags' => ls_survey_type_compatible_tags(TRUE))), 'warning');
    }
    // 3) Create variable :
    variable_set($variable_new, $survey_default_options);
  }
  else {
    // The variable does exist : Check if need to be updated.
    if ($variable_new != $variable_old) {
      variable_set($variable_new, $options);
      variable_del($variable_old);
    }
  }
}

/**
 * Implements hook_node_type_insert().
 */
function ls_survey_node_type_insert($info) {
  ls_survey_node_type_update($info);
}

/**
 * Implements hook_node_type_delete().
 */
function ls_survey_node_type_delete($info) {
  if ($info->module == 'ls_answ') {
    // Then we inform the associated survey node that its content type has
    // been deleted.
    drupal_set_message(t('The answers content type %type has been deleted', array('%type' => $info->name)));
    watchdog('ls_survey', 'The answers content type %type has been deleted', array('%type' => $info->name), WATCHDOG_ALERT);

    // Delete the associated variable :
    variable_del('ls_answ_options_' . $info->type);

    // Delete the permission variable :
    variable_del('node_permissions_' . $info->type);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Display options on the survey content type editing form for answers content
 * types editing form.
 */
function ls_survey_form_node_type_form_alter(&$form, &$form_state) {
  $node_type = $form['#node_type'];
  if ($node_type->module == 'ls_survey' || $node_type->module == 'ls_answ') {

    // The validation files need to be called even on cached form, especially
    // from /admin/structure/types.
    form_load_include($form_state, 'inc', 'limesurvey_sync', 'limesurvey_sync');
    form_load_include($form_state, 'inc', 'ls_survey', 'ls_survey.type');
    form_load_include($form_state, 'inc', 'ls_survey', 'ls_survey');
    form_load_include($form_state, 'inc', 'ls_answ', 'ls_answ');
    form_load_include($form_state, 'inc', 'limesurvey_sync', 'ls_api/limesurvey_sync_api_survey');
    // Overlay does not like links opening into a new window. Disable it.
    module_load_include('inc', 'limesurvey_sync', 'limesurvey_sync');
    limesurvey_sync_disable_overlay();

    // Load form for the answers content type edit page.
    module_load_include('inc', 'ls_survey', 'ls_survey.type');
    $form = array_merge($form, ls_survey_answ_options($form));

    // Put the identity fieldset before the options fielset.
    $form['name']['#weight'] = -2;
    $form['type']['#weight'] = -2;
    $form['description']['#weight'] = -2;
    // The validation file needs to be called even on cached form.
    form_load_include($form_state, 'inc', 'ls_survey', 'ls_survey.type');

    $form['#validate'][] = 'ls_survey_answ_options_validate';

    // Execute the options submit function before the node type submit
    // function because we need to prevent options datas to be store as
    // variables during the node_type_form_submit function and for the reset
    // feature.
    $options_submit = 'ls_survey_answ_options_submit';
    $key_options_submit = array_search($options_submit, $form['#submit']);
    if ($key_options_submit !== FALSE) { // Use strict comparison.
      unset($form['#submit'][$key_options_submit]);
      array_unshift($form['#submit'], $options_submit);
    }

    // The answers content type specific stuff (not for the survey content
    // type edit form).
    if ($node_type->module == 'ls_answ') {

      // Add a link to the associated survey at the top of the page :
      module_load_include('inc', 'ls_survey', 'ls_survey');
      $node_survey = ls_survey_find_survey($node_type->orig_type);
      // Retreive the current url.
      $path = isset($_GET['q']) ? $_GET['q'] : '<front>';
      if ($node_survey) {
        $form['ls_survey'] = array(
          '#type' => 'markup',
          '#prefix' => '<div>',
          '#markup' => ls_survey_theme_box(t('Survey'), '[' . l(t('Link to the associated survey edit page'), 'node/' . $node_survey->nid . '/edit') . ']'),
          '#suffix' => '</div>',
          '#weight' => -20,
          // Print the link on the answers content type edit page, and not on
          // the options tab of the survey node.
          '#access' => (url($path) == url('admin/structure/types/manage/' . $node_type->type)),
        );
      }

      // Provide informations about the language (multilingual options).
      if (module_exists('ls_answ') && module_exists('locale') && isset($form['workflow']['language_content_type'])) {
        // On the Answer content type edit tab : informs that the module will
        // automatically set the LimeSurvey language as default language or set
        // language for new answers.
        // Retrieve the ls_import_lang value.
        $ls_import_lang = (isset($form_state['values']['ls_import_lang'])) ? $form_state['values']['ls_import_lang'] : $form['ls_answers_options']['answ_options']['ls_import_lang']['#default_value'];
        $existing_answers_to = (empty($ls_import_lang)) ? '' : ' ' . t('and existing answers');
        $type = $form['old_type']['#value'];
        module_load_include('inc', 'ls_answ', 'ls_answ');
        $node_answer = ls_answ_new_node($type);
        $ls_default_lang = $node_answer->ls_lang;
        // Below : note the TRUE parameter, bypass the multilingual option value.
        $drupal_default_lang = ls_answ_validlang_dp_nodelanguage($node_answer, '', TRUE);
        // Make sure this language is enabled.
        form_load_include($form_state, 'module', 'locale', 'locale');
        module_load_include('module', 'locale');
        $language_list = locale_language_list();
        if (!empty($drupal_default_lang)) {
          $output = t(': for new answers@existing_answers, the default language will be automatically set to %lang.', array(
            '%lang' => $language_list[$drupal_default_lang],
            '@existing_answers' => $existing_answers_to,
          ));
        }
        else {
          // Suggest to add/enable this language. Note the TRUE parameter for
          // retrieving installed disabled
          // languages to.
          $language_list_installed = locale_language_list('name', TRUE);
          $installed = (isset($language_list_installed[$drupal_default_lang]));
          if ($installed) {
            $output = t('You would probably want to <a href="@url">enable</a> the LimeSurvey survey default language (%lang) on you Drupal site.', array('@url' => url('admin/config/regional/language'), '%lang' => $language_list_installed[$drupal_default_lang]));
          }
          else {
            $output = t('You would probably want to <a href="@url">install</a> the LimeSurvey survey default language (%lang) on you Drupal site.', array('@url' => url('admin/config/regional/language/add'), '%lang' => ls_survey_display_sync_fields('ls_lang', $ls_default_lang)));
          }
        }
        $multilingual_support = $form['workflow']['language_content_type']['#options'];
        // $multilingual_support[1] value is 'enabled' concerning the multilingual
        // support.
        $multilingual_support[1] .= ' <strong>' . $output . '</strong>';
        $form['workflow']['language_content_type']['#options'] = $multilingual_support;
      }
    }
  }

  // Prevent from a Drupal core bug when type is equal to an orig_type value.
  // I have provided a patch in order to fix it :
  // http://drupal.org/node/515454#comment-5734692
  // This validation function may be deleted if the patch is commited.
  $form['#validate'][] = 'ls_survey_node_type_validate';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * When a survey has been edited (and when the associated answers content type
 * has been created) : redirect to the options page to edit it, specially for
 * the default associated answers content type name and description values.
 */
function ls_survey_form_survey_node_form_alter(&$form, &$form_state) {
  // Add an ultimate submit for specific redirection.
  $form['actions']['submit']['#submit'][] = 'ls_survey_form_redirect';
  // Some modules may change the body weight. We fix it.
  $form['body']['#weight'] = 0;
}

/**
 * Implements hook_enable().
 *
 * Display message on enabling the ls_survey module
 */
function ls_survey_enable() {
  drupal_set_message(t('LimeSurvey Sync Survey module enabled'));
}

/**
 * Implements hook_disable().
 *
 * Display messages on disabling the ls_survey module
 */
function ls_survey_disable() {
  drupal_set_message(t('LimeSurvey Sync Survey module disabled'));
}

/**
 * Implements hook_view().
 *
 * Display survey properies from the LimeSurvey database and specific links
 * about this survey.
 */
function ls_survey_view($node, $view_mode) {

  module_load_include('inc', 'ls_survey', 'ls_survey');
  // Set default value for $ls_sid.
  $form_state['values']['surveys']['ls_sid']['#default_value'] = $node->ls_sid;
  $table_survey = ls_survey_view_properties($node);
  $node->content['ls_field'] = array(
    '#markup' => ls_survey_theme_box(t('Survey properties'), $table_survey),
    '#weight' => -1,
  );

  // Prepare specific links.
  module_load_include('inc', 'ls_survey', 'ls_survey');
  $type = ls_survey_find_answ_type($node->ls_orig_type);
  if ($type) {
    if (node_access('create', $type->type)) {
      // Prepare link 'To response to the survey'.
      $new_windows = array('attributes' => array('onclick' => 'window.open(this.href); return false;'));
      $answ_link = l(t('To response to the survey'), 'node/add/' . str_replace('_', '-', $type->type), $new_windows);
      $node->content['ls_answ'] = array(
        '#markup' => ls_survey_theme_box(t('New response'), $answ_link),
        '#weight' => -0.7,
      );
    }

    // Prepare links to graphics answers on the LimeSurey website.
    // Load file for the limesurvey_sync_link_to_ls() function.
    module_load_include('inc', 'limesurvey_sync', 'limesurvey_sync');
    $stat_link = limesurvey_sync_link_to_ls(t('Responses on real time graphic statistics'), $node->ls_sid, 'statistics');
    t("Choose 'Include' : 'Completed responses only' to ignore revisions from responses.");
    $node->content['ls_graph'] = array(
      '#markup' => ls_survey_theme_box(t('Statistics'), $stat_link),
      '#weight' => -0.5,
    );
  }
  else {
    // If the associated answers content type does not exist, suggest to
    // create it.
    // This case may not occure because in the ls_answ_node_info, "custom"
    // value is FALSE. Anyway, I write it for better code integration if one
    // day I change it to TRUE.
    $node_type_url = '/node/' . $node->nid . '/edit';
    $node_type_link = l(t('Create respond section now !'), $node_type_url);
    $node->content['ls_answ_node_type'] = array(
      '##markup' => ls_survey_theme_box(l(t('Create respond section to start completing this survey !'), $node_type_url), $node_type_link),
      '#weight' => -5,
    );
  }
  return $node;
}

/**
 * Implements hook_form().
 *
 * The survey node form allows to select the Survey reference ID and the
 * associated language.
 */
function ls_survey_form(&$node, $form_state) {
  $form = array();
  $survey_node = $form_state['node'];
  $type = node_type_get_type($node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => (isset($node->title)) ? check_plain($node->title) : '',
      '#maxlength' => 255,
      '#weight' => -5,
    );
  }

  $form['ls_sid'] = array(
    '#type' => 'hidden',
    '#value' => $survey_node->ls_sid,
  );
  $form['ls_lang'] = array(
    '#type' => 'hidden',
    '#value' => $survey_node->ls_lang,
  );

  // Load form for selecting ls_sid and ls_lang.
  module_load_include('inc', 'ls_survey', 'ls_survey');
  $form = array_merge($form, ls_survey_sid($form_state, $survey_node));

  // Display the ls_orig_type field : it can be edited only if it empty.
  $form['ls_answers'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content type storing this survey responses'),
    '#description' => t('This survey is connected to a content type that stores each response as node'),
    '#weight' => -1,
  );

  $ls_orig_type = $survey_node->ls_orig_type;
  // The answer node type can be created of the survey node edit page, but it
  // can only be edited on the content type edit page.
  // To delete an answer content type, you need to delete the survey.
  module_load_include('inc', 'ls_survey', 'ls_survey');
  $answ_type_exists = (!empty($ls_orig_type)) ? ls_survey_find_answ_type($ls_orig_type) : FALSE;

  if (!$answ_type_exists) {
    $form['ls_answers']['ls_orig_type'] = array(
      '#title' => t('Type'),
      '#type' => 'textfield',
      '#required' => TRUE,
      '#default_value' => $ls_orig_type,
      '#maxlength' => 32,
      '#description' => t('The machine-readable name of this content type. This text will be used for constructing the URL of the <em>create content</em> page for this content type. This name must contain only lowercase letters, numbers, and underscores. Underscores will be converted into hyphens when constructing the URL of the <em>create content</em> page. This name must be unique.'),
    );
  }
  else {
    $form['ls_answers']['ls_orig_type'] = array(
      '#type' => 'hidden',
      '#value' => $ls_orig_type,
    );

    // Add a link to the answer edit page
    module_load_include('inc', 'ls_survey', 'ls_survey');
    $type = ls_survey_find_answ_type($ls_orig_type);
    if ($type && !empty($survey_node->nid)) {
      $form['ls_answers']['ls_answ_display'] = array(
        '#type' => 'markup',
        '#prefix' => '<p>',
        '#markup' => $type->type
          . '<br />' . t('You can edit it on the <a href="@url">options edit page</a>', array('@url' => url('node/' . $survey_node->nid . '/options'))),
        '#suffix' => '</p>',
      );
    }
  }

  return $form;
}

/**
 * Implements hook_validate().
 *
 * Validate each specific field for the {ls_survey} table.
 */
function ls_survey_validate($node, &$form) {

  module_load_include('inc', 'ls_survey', 'ls_survey');

  // Validate the ls_orig_type value.
  ls_survey_ls_orig_type_validate($node, $form);

  // Validate the ls_sid ans ls_lang values.
  ls_survey_ls_sid_ls_lang_validate($node, $form);
}

/**
 * Import ls_sid and ls_lang from the selecting fieldset.
 *
 * Overwrite the ls_sid and the ls_lang value from the selecting fieldset.
 * This function is called before the node_form_submit() function.
 */
function ls_survey_sid_validate($form, &$form_state) {

  // Handle the ls_sid field
  $ls_sid = check_plain($form_state['values']['surveys']['ls_sid']);
  if (!empty($ls_sid)) {
    $form_state['values']['ls_sid'] = $ls_sid;

    // Handle the ls_lang field
    if (!empty($form_state['values']['surveys']['ls_lang'][$ls_sid])) {
      if (is_array($form_state['values']['surveys']['ls_lang'][$ls_sid])) {
        // If the answer value is array('en' =>'en') (or another language) as
        // an array.
        $ls_lang = check_plain(current($form_state['values']['surveys']['ls_lang'][$ls_sid]));
      }
      else {
        // If the survey contain an unique language (it uses an hidden field).
        $ls_lang = check_plain($form_state['values']['surveys']['ls_lang'][$ls_sid]);
      }
      $form_state['values']['ls_lang'] = $ls_lang;
    }
  }

  // rebuild form in order to update the js_value.
  //$form_state['rebuild'] = TRUE;
  //unset($form_state['values']['surveys']); // Useless anymore.
}

/**
 * Validate the type value of the answers content type.
 */
function ls_survey_node_type_validate($form, &$form_state) {

  // Extra validation to prevent an knowed bug :
  // http://drupal.org/node/515454 correponding to the issue : [Node type
  // cannot be used (sometimes) if its "type" is the same as another node
  // type's "original type"]. I have provided patch :
  // http://drupal.org/node/515454#comment-5734692

  // When validating the node type "type" value : check if the orig_type does
  // not already exist.
  $type = trim($form_state['values']['type']);
  $orig_type = trim($form_state['values']['orig_type']);
  if (!$form_state['values']['locked']) {
    // No content type should have a type value equal to the orig_type value
    // of another content type.
    $invalid_type = FALSE;
    if ($type != $orig_type) {
      $infos = node_type_get_types();
      foreach ($infos as $info) {
        if ($type == $info->orig_type) {
          $invalid_type = TRUE;
          break;
        }
      }
    }

    if ($invalid_type) {
      form_set_error('type', t("Invalid machine-readable name. Enter a name other than %invalid.", array('%invalid' => $type)));
    }
  }
}

/**
 * Redirect after submitting survey node editing page.
 *
 * Redirect to the answers content type editing page after submitting the
 * survey node editing page. Suggests to edit default values.
 */
function ls_survey_form_redirect($form, &$form_state) {
  $form_state['redirect'] = 'node/' . $form_state['nid'] . '/options';
  module_load_include('inc', 'ls_survey', 'ls_survey');
  $type = ls_survey_find_answ_type($form_state['values']['ls_orig_type']);
  if ($type && !$type->modified) {
    drupal_set_message(t('Name and description values have been imported from your LimeSurvey website, you can edit them now'));
  }
}

/**
 * Handle the creation (or update) of the associated answers content type.
 *
 * This function is called on each insert or update operation on a survey node.
 *
 * @param $node
 *   A object. The survey node associated to the new answers content type
 *   (optional). default is NULL.
 */
function ls_survey_answ_type($node) {
  // Load the answer content type, we need to search via the "orig_type" value.
  module_load_include('inc', 'ls_survey', 'ls_survey');
  $answ_type_exists = ls_survey_find_answ_type($node->ls_orig_type);
  if (!$answ_type_exists && module_exists('ls_answ')) {
    // Check for a previous answers content type to restore.
    module_load_include('inc', 'node', 'content_types');
    $all_types = node_type_get_types();
    foreach ($all_types as $type_name => $info) {
      if ($info->module == 'node' && $info->orig_type == $node->ls_orig_type) {
        $type = $info;
        break;
      }
    }
    if (isset($type)) {
      // This case may not occure because in the ls_answ_node_info,
      // "custom" value is FALSE. The answers content type could be delete
      // when the ls_answ module is disabled, but it will be reassociated
      // automatically thanks to the ls_answ_enabled() function.
      // However, I write it for better code integration if one
      // day I change it to TRUE.
      // Find the node survey associated to the updated answer content
      // type.
      $type->module = 'ls_answ';
      $type->locked = FALSE;
    }
    else {
      // An associated answers content type does not exist : load specific
      // default values.
      $type = ls_survey_default_node_type_answ($node);
    }

    // And create the associated answers content type :
    $status = node_type_save($type);
    if ($status == SAVED_UPDATED) {
      drupal_set_message(t('The responses content type %name has been updated.', array('%name' => $type->name)));
    }
    elseif ($status == SAVED_NEW) {
      drupal_set_message(t('The responses content type %name has been added.', array('%name' => $type->name)));
      watchdog('ls_survey', 'Added answers content type %name.', array('%name' => $type->name), WATCHDOG_NOTICE, l(t('view'), 'node/' . $node->nid . '/options'));
      // For new answers content types, remove the default "promote" node
      // options.
      variable_set('node_options_' . $type->type, array('status'));

      // And declare a body field for the newly answers content type.
      node_add_body_field($type);

      // Permissions of the ls_answ module are managed by the module itself
      // instead of the node module.
      variable_set('node_permissions_' . $type->type, 0);
    }

    // Rebuild node types and menus.
    node_types_rebuild();
    menu_rebuild();
  }
}

/**
 * Return a themed box.
 *
 * @param $title
 *   The subject of the box.
 * @param $content
 *   The content of the box.
 *
 * @return
 *   A string containing the box output.
 */
function ls_survey_theme_box($title, $content) {
  // @TODO : create a template instead.
  $output = '<h2 class="title">' . $title . '</h2><div>' . $content . '</div>';
  return $output;
}
/**
 * Implements hook_views_api().
 *
 * Make the synchronization fields available for the Views module.
 */
function ls_survey_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ls_survey') . '/views',
  );
}
