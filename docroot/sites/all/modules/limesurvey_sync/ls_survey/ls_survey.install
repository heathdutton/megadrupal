<?php
/**
 * @file
 * Install, update and uninstall functions for the ls_survey module.
 */

/**
 * Implements hook_install().
 *
 * Create the specific table and options for the Survey node type.
 */
function ls_survey_install() {
  // Declare a body field entity for the survey content type.
  node_types_rebuild();
  $types = node_type_get_types();
  node_add_body_field($types['survey']);

  // Take out 'promote' by default.
  variable_set('node_options_survey', array('status'));

  // Set default options values for the answers content types.
  module_load_include('inc', 'ls_survey', 'ls_survey.type');
  variable_set('ls_survey_options', ls_survey_answ_default_options());

  // Permissions of the ls_survey module are managed by the module itself
  // instead of the node module.
  variable_set('node_permissions_survey', 0);
}

/**
 * Implements hook_uninstall().
 *
 * Delete options for the Survey node type.
 */
function ls_survey_uninstall() {
  // variable_del('node_options_survey');//useless.
  variable_del('ls_survey_options');
  variable_del('node_permissions_survey');

  // Delete the answers content type variables.
  $infos = node_type_get_types();
  module_load_include('inc', 'ls_survey', 'ls_survey');
  foreach ($infos as $info) {
    if (!empty($info->orig_type) && in_array($info->module, array('ls_answ', 'node')) && ls_survey_find_survey($info->orig_type)) {
      variable_del('ls_answ_options_' . $info->type);
      variable_del('node_permissions_' . $info->type);
    }
  }
}

/**
 * Implements hook_schema().
 *
 * Store Limesurvey datas for synchronizations.
 */
function ls_survey_schema() {

  $schema['ls_survey'] = array(
    'description' => 'the {ls_survey} table stores synchronized LimeSurvey surveys',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not NULL' => TRUE,
        'default' => 0,
      ),
      'vid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not NULL' => TRUE,
        'default' => 0,
      ),
      'ls_sid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not NULL' => TRUE,
        'default' => 0,
        'description' => 'survey ID reference from the LimeSurvey site database',
      ),
      'ls_lang' => array(
        'type' => 'varchar',
        'length' => 12,
        'not NULL' => TRUE,
        'default' => '',
        'description' => 'the selected default language for this survey',
      ),
      'ls_orig_type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not NULL' => TRUE,
        'default' => '',
        'description' => 'specific content type origin name, bounded to a survey',
      ),
    ),
    'indexes' => array(
      'nid' => array('nid', 'ls_sid'),
    ),
    'foreign keys' => array(
      'nid' => array('node' => 'nid'),
      'vid' => array('node' => 'vid'),
    ),
  );
  return $schema;
}

/**
 * Add new options default values to the survey options page.
 */
function ls_survey_update_7100() {
  module_load_include('inc', 'ls_survey', 'ls_survey.type');
  $default_options = ls_survey_answ_default_options();
  $new_options = array(
    'ls_overwrite_endurl',
    'ls_hide_lang',
    'iframe_dim',
    'iframe_dim_width',
    'iframe_dim_height',
    'ls_import_lang',
  );
  // Handle the survey default options :
  $variables = array('ls_survey_options');
  // Retrieve all answers content types.
  $query = db_query("SELECT type FROM {node_type} WHERE module = :module", array(':module' => 'ls_answ'));
  while ($record = $query->fetchAssoc()) {
    // Retrieve the corresponding variables name.
    $variables[] = 'ls_answ_options_' . $record['type'];
  }
  // Add options to all variables.
  foreach ($variables as $variable_name) {
    $options = variable_get($variable_name, FALSE);
    $unchanged = TRUE;
    foreach ($new_options as $new_option) {
      if ($options && !isset($options[$new_option]) && isset($default_options[$new_option])) {
        $options[$new_option] = $default_options[$new_option];
        $unchanged = FALSE;
      }
      // Save them.
      if (!$unchanged) {
        variable_set($variable_name, $options);
      }
    }
  }
  return array();
}
