<?php
/**
 * @file
 * Helpful tools for working with plugins.
 *
 * @copyright Copyright(c) 2013 Christopher Skene
 * @license GPL v2 http://www.fsf.org/licensing/licenses/gpl.html
 * @author Chris Skene chris at xtfer dot com
 */

use Drupal\plugin_tools\PluginTools\PluginTool;

/**
 * Implements hook_permission.
 */
function plugin_tools_permission() {
  return array(
    'administer plugin tools' => array(
      'title' => t('Administer Plugin Tools'),
    ),
  );
}

/**
 * Implements hook_menu.
 */
function plugin_tools_menu() {
  $items = array();
  $items['admin/config/system/plugins'] = array(
    'title' => t('Plugins'),
    'description' => t('Information about the various module-provided plugins on this site'),
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'plugin_tools_overview',
    'access arguments' => array('administer plugin tools'),
  );

  $items['admin/config/system/plugins/%/%'] = array(
    'title' => t('Plugins'),
    'title callback' => 'plugin_tools_plugin_type_overview_title',
    'description' => t('Information about plugins of a specific type'),
    'type' => MENU_CALLBACK,
    'page callback' => 'plugin_tools_plugin_type_page',
    'page arguments' => array(4,5),
    'access arguments' => array('administer plugin tools'),
  );
  return $items;
}

/**
 * Load a plugin tool.
 *
 * @return PluginTool
 */
function plugin_tools_tool(){
  return new PluginTool();
}

/**
 * Page callback for the overview page.
 *
 * @return string
 *  The output of the page.
 */
function plugin_tools_overview() {
  $plugin = plugin_tools_tool();
  $plugin->getPluginInfo();

  $output = '';

  foreach ($plugin->plugin_types as $module => $plugin_types) {
    $output .= '<h3>' . plugin_tools_project_human_name($module) . '</h3>';
    $output .= $plugin->pluginModuleOverview($module, TRUE);
  }

  return $output;
}

/**
 * Page callback for a specific plugin type
 *
 * @param string $module
 *  The module providing the plugin
 * @param string $type
 *  The type of plugin
 *
 * @return string
 *  A human-readable set of information about a plugin type
 */
function plugin_tools_plugin_type_page($module, $type) {

  $module = check_plain($module);
  $type = check_plain($type);

  return plugin_tools_render_overview($module, $type);
}

/**
 * API function to render a plugin type and its plugins.
 *
 * @param string $module
 *  The module providing the plugin
 * @param string $type
 *  The type of plugin
 *
 * @return string
 *  A human-readable set of information about a plugin type
 *
 */
function plugin_tools_render_overview($module, $type) {

  $plugin = plugin_tools_tool();

  // If the plugin doesnt exist, don't return the table.
  if (!$plugin->pluginTypeExists($module, $type)) {
    return t('No matching plugin type was found.');
  }

  $plugin->getPlugins($module, $type);

  $output = '<div class="plugin-tools-overview">';

  $output .= $plugin->pluginTypeDetails($module, $type);
  $output .= $plugin->pluginList($module, $type);

  return $output . '</div>';
}

/**
 * Title call back for information about plugins of a type
 *
 * @return string
 *  Title for a plugin overview page
 */
function plugin_tools_plugin_type_overview_title() {
  if(arg(4) && arg(5)){
    return t('Registered plugins for ') . filter_xss(arg(4)) . ':' . filter_xss(arg(5));
  }
}

/**
 * Helper to get a module name from a machine name
 *
 * @param string $machine_name
 *  The module's machine name
 *
 * @return string | bool
 *  Human readable name of the module, or FALSE if not enabled/found
 */
function plugin_tools_project_human_name($machine_name) {
  static $list;

  if (empty($list)) {
    $list['modules'] = system_get_info('module');
    $list['themes'] = list_themes();
  }

  if (isset($list['modules'][$machine_name])) {
    return check_plain($list['modules'][$machine_name]['name']);
  }

  if (isset($list['themes'][$machine_name])) {
    return check_plain($list['themes'][$machine_name]->info['name']) . ' ' . t('[theme]');
  }


  return FALSE;
}
