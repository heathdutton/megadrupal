<?php

/**
 * @file
 * Moves any admin local tasks to the contextual menu of the main content area.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function contextual_admin_form_menu_configure_alter(&$form, &$form_state, $form_id) {
  $form['contextual_admin'] = array(
    '#type' => 'fieldset',
    '#title' => t('Contextual Admin'),
  );
  $form['contextual_admin']['contextual_admin_local_tasks'] = array(
    '#type' => 'checkbox',
    '#title' => t('Move administrative local task links to contextual links.'),
    '#default_value' => variable_get('contextual_admin_local_tasks', 1),
  );
  $form['contextual_admin']['contextual_admin_local_actions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Move administrative local action links to contextual links.'),
    '#default_value' => variable_get('contextual_admin_local_actions', 0),
  );
  $form['#submit'][] = '_contextual_admin_menu_cache_clear';
}

function _contextual_admin_menu_cache_clear($form, &$form_state) {
  foreach (element_children($form['contextual_admin']) as $variable) {
    // Only rebuild menu if a value has changed.
    if ($form['contextual_admin'][$variable]['#default_value'] != $form_state['values'][$variable]) {
      menu_rebuild();
      break;
    }
  }
}

/**
 * Implements hook_menu_alter().
 */
function contextual_admin_menu_alter(&$items) {
  // Set the context flag for all admin local tasks on non-admin pages so they
  // appear as contextual links.
  foreach ($items as $path => $item) {
    // Check if the item is a administrative local task.
    if (isset($item['type']) && $item['type'] & MENU_IS_LOCAL_TASK && path_is_admin($path)) {
      if ((!variable_get('contextual_admin_local_actions', 0) && $item['type'] & MENU_IS_LOCAL_ACTION) || (!variable_get('contextual_admin_local_tasks', 1) && ($item['type'] & MENU_IS_LOCAL_TASK) && !($item['type'] & MENU_IS_LOCAL_ACTION))) {
        continue;
      }
      
      // Find the parent path. We can't use tab_root as it isn't been set yet.
      $parent_path_len = strrpos($path, '/');
      if ($parent_path_len !== FALSE) {
        $parent_path = substr($path, 0, $parent_path_len);

        // Check if the parent is non-administrative and if so, force item's
        // context to be inline.
        if (!path_is_admin($parent_path)) {
          $items[$path]['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
        }
      }
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function contextual_admin_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $is_admin = path_is_admin(current_path());

  if (!empty($data['tabs'][0]) && variable_get('contextual_admin_local_tasks', 1)) {
    // Don't know the negative consequenses (if any) of only doing top level.
    foreach ($data['tabs'][0]['output'] as $delta => $tab) {
      // Discard any non-admin tabs, but only if it's not active due to an active
      // admin sub-tab.
      if ($is_admin) {
        if (!path_is_admin($tab['#link']['href']) && empty($tab['#active'])) {
          unset($data['tabs'][0]['output'][$delta]);
        }
      }
      // Discard any admin tabs, but only if it's not active due to an active
      // non-admin sub-tab.
      else {
        if (path_is_admin($tab['#link']['href']) && empty($tab['#active'])) {
          unset($data['tabs'][0]['output'][$delta]);
        }
      }
    }

    // Update tab count and discard tabs if there is only one left.
    $data['tabs'][0]['count'] = count($data['tabs'][0]['output']);
    if ($data['tabs'][0]['count'] == 1) {
      $data['tabs'][0]['output'] = array();
    }
  }

  // Discard admin actions on non-admin pages.
  if (!$is_admin && variable_get('contextual_admin_local_actions', 0)) {
    foreach ($data['actions']['output'] as $key => $link) {
      if (variable_get('contextual_admin_local_actions', 0) && path_is_admin($link['#link']['href'])) {
        unset($data['actions']['output'][$key]);
      }
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function contextual_admin_page_alter(&$page) {
  // Don't alter contextual links on admin pages.
  if (path_is_admin(current_path())) {
    return;
  }

  // Add the tab root as the parent path of the contextual links provided by
  // this module.
  $menu_item = menu_get_item();
  if (isset($menu_item['tab_root'])) {
    $root = explode('/', $menu_item['tab_root']);
    $root_href = explode('/', $menu_item['tab_root_href']);

    $root_parts = count($root);
    while (array_pop($root) == '%') {
      $root_parts--;
    }

    $args = array_splice($root_href, $root_parts);
    $root = implode('/', $root_href);

    $page['#contextual_links']['contextual_admin'] = array($root, $args);
    $page['#contextual_admin'] = TRUE;
  }
}

/**
 * Implements MODULE_preprocess_HOOK().
 */
function contextual_admin_preprocess_html(&$variables) {
  // Copied from views.module
  if (!empty($variables['page']['#contextual_admin'])) {
    $key = array_search('contextual-links-region', $variables['classes_array']);
    if ($key !== FALSE) {
      unset($variables['classes_array'][$key]);
      drupal_add_js(drupal_get_path('module', 'contextual_admin') . '/contextual_admin.js', array('group' => JS_LIBRARY, 'weight' => -2));
    }
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function contextual_admin_contextual_links_view_alter(&$element, $items) {
  // Thanks again to Views.
  if (isset($element['#element']['#contextual_admin'])) {
    $element['#attributes']['class'][] = 'contextual-admin';
  }
}
