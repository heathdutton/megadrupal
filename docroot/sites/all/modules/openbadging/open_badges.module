<?php
/**
 * @file
 * Code for the Open Badges feature.
 */

include_once 'open_badges.features.inc';

/**
 * Implements hook_menu()
 */
function open_badges_menu() {
  $item = array();
  // Menu items that are basically just menu blocks.
  $item['admin/open_badges'] = array(
    'title' => 'Open Badges',
    'description' => 'Manage issuer, badges, awards ...',
    'position' => 'left',
    'weight' => -8,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $item['assertions/%/%'] = array(
    'page callback' => 'open_badges_json_url_assertions',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $item['openbadging_amobb/assertions/%/%'] = array(
    'title' => 'Assertions',
    'page callback' => 'open_badges_assertions',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $item['openbadging_amobb/badges/%/%'] = array(
    'title' => 'Assertions',
    'page callback' => 'open_badges_amobb_badges',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $item['openbadging_amobb/issuer/%/%'] = array(
    'title' => 'Assertions',
    'page callback' => 'open_badges_amobb_issuer',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $item;
}

function open_badges_amobb_issuer($badge_nid, $uid) {
	$badge_node = node_load($badge_nid);
	$course_tid = $badge_node->field_course['und'][0]['tid'];
	$issuer_nid = _open_badges_get_issuer_nid_by_course($course_tid);
	$issuer_node = node_load($issuer_nid);
	$name = $issuer_node->title;
	$url = $issuer_node->field_origin['und'][0]['url'];
	$mail = $issuer_node->field_email['und'][0]['email'];
	$issuer = array(
		'name'=> $name,
		'url'=> $url,
		'email'=> $mail,
	);
	drupal_json_output($issuer);
	return;
}

function open_badges_amobb_badges($badge_nid, $uid) {
	global $base_url;
	$badge_node = node_load($badge_nid);
	$user = user_load($uid);
		
	$title = $badge_node->title;
	$description = isset($badge_node->body['und'][0]['value']) ? $badge_node->body['und'][0]['value'] : '';
	$image = file_create_url($badge_node->field_badge_image['und'][0]['uri']);
	$criteria = $badge_node->field_criteria['und'][0]['url'];
	$url = $base_url.'/openbadging_amobb/issuer/'.$badge_nid.'/'.$uid;
	$badge = array(
		'name'=> $title,
		'description'=> $description,
		'image'=> $image,
		'criteria'=> $criteria,
		'issuer'=> $url,
	);
	drupal_json_output($badge);
	return;
}

/**
 * Return json assertions for openbadgings.
 *
 * @param int $bid
 *   badge node nid.
 * @param int $uid
 *   user uid.
 *
 * @return array
 *   One of the following, based on the passed parameters:
 *   - If the $uid has not unlocked $openbadging_id, return empty badge.
 *   - If $openbadging_url is unlocked, return the formatted badge assertion.
 */
function open_badges_json_url_assertions($bid, $uid) {
	//var_dump('abc');die;
	global $base_url;
	$badge = node_load($bid);
	$openbadging_url = isset($badge->title) ? $badge->title : '';
	open_badges_assertions($openbadging_url, $uid);
}

/**
 * Return json assertions for openbadgings.
 *
 * @param string $openbadging_url
 *   A specific openbadging title to check the unlock status of.
 * @param int $uid
 *   The user this request applies against (defaults to current user).
 *
 * @return array
 *   One of the following, based on the passed parameters:
 *   - If the $uid has not unlocked $openbadging_id, return empty badge.
 *   - If $openbadging_url is unlocked, return the formatted badge assertion.
 */
function open_badges_assertions($openbadging_url, $uid, $issuer_time='') {
	global $base_url;
	$url = $base_url.'/openbadging_amobb/assertions/'.$openbadging_url.'/'.$uid;
	$assertion_url = str_replace(" ","%20", $url);	
	$openbadging_name = urldecode($openbadging_url);
	
	$badge_nid = _open_badges_get_nid_by_title($openbadging_name, 'badge');
	$award_nid = _open_badges_get_award_nid_by_user_and_badge($badge_nid, $uid);
	if((isset($award_nid) && !empty($award_nid)) || !empty($issuer_time)){
		$badge_node = node_load($badge_nid);
		$user = user_load($uid);
		if(empty($issuer_time)){
			$award_node = node_load($award_nid);
			$issue_date = $award_node->created;
		}else{
			$issue_date = $issuer_time;
		}		
		
		$salt = 'mybadge!';
		$hash = 'sha256$' . hash('sha256', $user->mail . $salt);
		//$evidence = isset($badge_node->field_badge_entity_evidence['und'][0]['url']) ? $badge[$badge_id]->field_badge_entity_evidence['und'][0]['url'] : '';
		$image = file_create_url($badge_node->field_badge_image['und'][0]['uri']);
		$badge_url = $base_url.'/openbadging_amobb/badges/'.$badge_nid.'/'.$uid;
		//$issue_date = $issuer_time;
		$assertion = array(
			'uid' => $uid,
				'recipient' => array(
					'type' => 'email',
					'hashed' => true,
					'salt' => $salt,
					'identity' => $hash
				 ),
			'image' => $image,
			//'evidence' => $evidence,
			'issuedOn'=> $issue_date,
			'badge' => $badge_url,
				'verify' => array(
					'type' => 'hosted',
					'url' => $assertion_url
				 ),
		);
		if(empty($issuer_time)){
			drupal_json_output($assertion);
			return;
		}else{
			return drupal_json_encode($assertion);
		}
	}
	$assertion = array(
    'badge' => array(
      'name' => 'No badge',
    ),
  );
  if(empty($issuer_time)){
	  drupal_json_output($assertion);
  }else{
	  return drupal_json_encode($assertion);
  }  
  
}

function _open_badges_get_issuer_nid_by_course($course_tid){
  $result = db_query("SELECT node.nid AS nid
FROM 
{node} node
INNER JOIN {field_data_field_courses} field_data_field_courses ON node.nid = field_data_field_courses.entity_id AND (field_data_field_courses.entity_type = 'node' AND field_data_field_courses.deleted = '0')
WHERE (( (node.status = :status) AND (node.type IN  (:type)) AND (field_data_field_courses.field_courses_tid = :tid) ))", array(":status"=> '1', ":type"=> "issuer", ":tid"=> $course_tid));
  $nid = $result->fetchField();
  return $nid;
}

function _open_badges_get_award_nid_by_user_and_badge($nid, $uid){
  $result = db_query("SELECT node.nid AS nid
FROM 
{node} node
LEFT JOIN {field_data_field_badge} field_data_field_badge ON node.nid = field_data_field_badge.entity_id AND (field_data_field_badge.entity_type = 'node' AND field_data_field_badge.deleted = '0')
LEFT JOIN {field_data_field_user} field_data_field_user ON node.nid = field_data_field_user.entity_id AND (field_data_field_user.entity_type = 'node' AND field_data_field_user.deleted = '0')
WHERE (( (node.status = :status) AND (node.type IN  (:type)) AND (field_data_field_badge.field_badge_nid IN  (:nid)) AND (field_data_field_user.field_user_uid IN  (:uid)) ))", array(":status"=> '1', ":type"=> "award", ":nid"=> $nid, ":uid"=> $uid));
  $nid = $result->fetchField();
  return $nid;
}

function _open_badges_get_nid_by_title($title, $type){
  $result = db_query("SELECT n.nid FROM {node} n WHERE n.title = :title AND n.type = :type", array(":title"=> $title, ":type"=> $type));  
  $nid = $result->fetchField();
  return $nid;
}

function _open_badges_bake_image($node){
	global $user, $base_url;
	//$node = node_load($nid);
	$badge_nid = $node->field_badge[$node->language][0]['nid'];
    $badge_node = node_load($badge_nid);
    $user_uid = $node->field_user[$node->language][0]['uid'];
    
    $badge_image_uri = $badge_node->field_badge_image['und'][0]['uri'];
    $badge_type_term = taxonomy_term_load($badge_node->field_badge_type['und'][0]['tid']);
    
    $style = $badge_type_term->field_badge_image_style['und'][0]['value'];
    $badge_image_derivative_uri = image_style_path($style, $badge_image_uri);
    $success = file_exists($badge_image_derivative_uri) || image_style_create_derivative(image_style_load($style), $badge_image_uri, $badge_image_derivative_uri);
    
    $badge_image_derivative_url = file_create_url($badge_image_derivative_uri);
    $badge_image_derivative_realpath = drupal_realpath($badge_image_derivative_uri);
    
    //var_dump($badge_image_derivative_url);
    //var_dump($badge_image_derivative_realpath);
    
    $realpath_explode = explode('/', $badge_image_derivative_realpath);
    $file_name = end($realpath_explode);
    $file_name_explode = explode('.png', $file_name);
    $baked_file_name = $file_name_explode[0] . '-' . $user_uid . '.png';
    $baked_image_dir_name = 'award/';
    $baked_image_dir_uri = 'public://' . $baked_image_dir_name;
    $baked_image_dir = drupal_realpath('public://') . '/' . $baked_image_dir_name;
    file_prepare_directory($baked_image_dir, FILE_CREATE_DIRECTORY);
    $baked_image_path = $baked_image_dir . '/' . $baked_file_name;
    $baked_image_uri = $baked_image_dir_uri . $baked_file_name;
    //var_dump($baked_image_path);die;
    //$assertion_path = $base_url . '/assertions/' . $badge_node->nid . '/' . $user_uid;
    //$content = stripslashes(file_get_contents($assertion_path));
    
	$openbadging_url = isset($badge_node->title) ? $badge_node->title : '';
	$content = stripcslashes(open_badges_assertions($openbadging_url, $user_uid, $node->created));
    
    $key = "openbadges";    
    //$content = 'This is testing.';
    $baked_image_content = file_get_contents($badge_image_derivative_url);
    
    bakeimage($baked_image_content, $key, $content, $baked_image_path);
    
    $file = (object) array(
      'uid' => $user->uid,
      'filename' => $baked_file_name,
      'uri' => $baked_image_uri,
      'filemime' => file_get_mimetype($baked_image_uri),
      'filesize' => filesize($baked_image_uri),
      'status' => 1
    );
    $file = file_save($file); // Save the file to the root of the files directory. You can specify a subdirectory, for example, 'public://images' 
    //file_usage_add($file, 'file', 'node', $node->nid);
    $node->field_baked_image[$node->language][0] = (array) $file;
    //field_attach_update('node', $node);
    //node_save($node);
}

/**
 * Implement hook_node_presave().
 */
function open_badges_node_presave($node){
  global $user, $base_url;
  if($node->type == 'award' && $node->is_new) {
	//register_shutdown_function('_open_badges_bake_image',$node->nid);
	_open_badges_bake_image($node);    
  }
}

//Function added for new badging process by K
function bakeimage($png, $key, $text, $baked_image_dest_path){
  $png = removeTextChunks($key, $png);
  $chunk = additxtchunk($key, $text);
  $png2 = addPngChunk($chunk, $png, $baked_image_dest_path);
  return $png2;
}

// Strip out any existing text chunks with a particular key
function removeTextChunks($key, $png){
  $retval = substr($png, 0, 8);
  $ipos = 8;
  $chunkHeader = substr($png, $ipos, 8);
  $ipos = $ipos + 8;
  while($chunkHeader) {
    // Extract length and type from binary data
    $chunk = @unpack('Nsize/a4type', $chunkHeader);
    $skip = false;
    if($chunk['type'] == 'iTXt') {
      $data = substr($png, $ipos, $chunk['size']);
      $sections = explode("\0", $data);
      print_r($sections);
      if($sections[0] == $key)
        $skip = true;
    }
    // Extract the data and the CRC
    $data = substr($png, $ipos, $chunk['size'] + 4);
    $ipos = $ipos + $chunk['size'] + 4;
    
    // Add in the header, data, and CRC
    if(!$skip)
      $retval = $retval . $chunkHeader . $data;
    
    // Read next chunk header
    $chunkHeader = substr($png, $ipos, 8);
    $ipos = $ipos + 8;
  }
  return $retval;
}

// creates a iTXt chunk with given key and text
function additxtchunk($key, $text){
  if(strlen($key) > 79)
    throw new Exception('Key is too big');
  $chunktype = "iTXt";
  $text = utf8_encode($text);
  $chunkdata = $key . "\0" . "\0" . "\0" . "" . "\0" . "" . "\0" . $text;
  $crc = pack("N", crc32($chunktype . $chunkdata));
  $len = pack("N", strlen($chunkdata));
  return $len . $chunktype . $chunkdata . $crc;
}

// inserts chunk before IEND chunk (last 12 bytes)
function addPngChunk($chunk, $png, $baked_image_dest_path){
  $len = strlen($png);
  $result = file_put_contents($baked_image_dest_path, substr($png, 0, $len - 12) . $chunk . substr($png, $len - 12, 12));
  return $result;
}

/**
 * Implement hook_modules_installed().
 */
function open_badges_modules_installed($modules) {
  if (in_array('open_badges', $modules)) {
    $field_badge_image_style_updated = db_insert('cck_field_settings') // Table name no longer needs {}
	  ->fields(array(
	    'field_name' => 'field_badge_image_style',
	    'entity_type' => '',
	    'bundle' => NULL,
	    'language' => 'und',
	    'setting_type' => 'field',
		'setting' => 'allowed_values_php',
		'setting_option' => 'return image_style_options(FALSE, PASS_THROUGH);',	
	  ))
	  ->execute(); 
	$field_instance_badge_image_style_updated = db_insert('cck_field_settings') // Table name no longer needs {}
	  ->fields(array(
	    'field_name' => 'field_badge_image_style',
	    'entity_type' => 'taxonomy_term',
	    'bundle' => 'badge_type',
	    'language' => 'und',
	    'setting_type' => 'instance',
		'setting' => 'default_value_php',
		'setting_option' => '',	
	  ))
	  ->execute(); 
  }
}
