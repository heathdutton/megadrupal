<?php
/**
 * @file
 * install file for opac module
 */

/**
 * Implements hook_schema().
 */
function opac_schema() {

  $schema['opac_fields_mapping'] = array(
    'description' => 'Stores opac fields mapping informations.',
    'fields' => array(
      'serv_id' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'content_type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'node_field_name' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 32,
      ),
      'node_field_label' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 255,
      ),
      'mapped_with' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 255,
      ),
      'plugin' => array(
        'type' => 'varchar',
        'length' => 255,
      ),
      'plugin_options' => array(
        'type' => 'blob',
      ),
    ),
    'foreign keys' => array(
      'opac_servers_serv_id' => array(
        'table' => 'opac_servers', 'columns' => array('serv_id' => 'serv_id'),
      ),
    ),
    'primary key' => array('serv_id', 'content_type', 'node_field_name'),
  );

  $schema['opac_servers'] = array(
    'description' => 'An ILS Server',
    'fields' => array(
      'serv_id' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'description' => 'The machine-readable name of this server',
      ),
      'serv_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'serv_host' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'serv_connector' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'first_bib_num' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'last_bib_num' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'serv_enabled' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('serv_id'),
  );

  $schema['opac_content_type'] = array(
    'description' => 'Content types for OPAC servers',
    'fields' => array(
      'serv_id' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'content_type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'matching_field' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'value' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('serv_id', 'content_type'),
  );

  $schema['opac_records'] = array(
    'description' => 'Stores corresponding record id and server if for a node.',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'recordid' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'serv_id' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('nid', 'recordid', 'serv_id'),
  );

  return $schema;
}

/**
 * Implements hook_field_schema().
 */
function opac_field_schema($field) {
  return array(
    'columns' => array(
      'value' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'indexes' => array(
      'value' => array('value'),
    ),
  );
}

/**
 * Add opac_fields_mapping.plugin field.
 */
function opac_update_7100(&$sandbox) {
  $description = t('Add plugin capabilities to harvesting process');

  db_add_field(
    'opac_fields_mapping',
    'plugin',
    array(
      'type' => 'varchar',
      'length' => 255,
    )
  );

  db_add_field(
    'opac_fields_mapping',
    'plugin_options',
    array(
      'type' => 'blob',
    )
  );

  $result = db_select('opac_fields_mapping', 'ofm')
    ->fields('ofm', array(
      'serv_id',
      'content_type',
      'node_field_name',
      'vid',
      'vocabulary_machine_name',
      'vocabulary_name',
      'term_field',
      'term_field_label',
      'nomatch_rule')
    )
    ->isNotNull('vid')
    ->execute();
  while ($mapping = $result->fetchAssoc()) {
    $serv_id = $mapping['serv_id'];
    $content_type = $mapping['content_type'];
    $node_field_name = $mapping['node_field_name'];
    unset($mapping['serv_id']);
    unset($mapping['content_type']);
    unset($mapping['node_field_name']);
    $plugin = "taxonomy";
    $plugin_options = serialize($mapping);

    db_update('opac_fields_mapping')
      ->fields(array(
        'plugin' => $plugin,
        'plugin_options' => $plugin_options,
      ))
      ->condition('serv_id', $serv_id, '=')
      ->condition('content_type', $content_type, '=')
      ->condition('node_field_name', $node_field_name, '=')
      ->execute();
  }

  db_drop_field('opac_fields_mapping', 'vid');
  db_drop_field('opac_fields_mapping', 'vocabulary_machine_name');
  db_drop_field('opac_fields_mapping', 'vocabulary_name');
  db_drop_field('opac_fields_mapping', 'term_field');
  db_drop_field('opac_fields_mapping', 'term_field_label');
  db_drop_field('opac_fields_mapping', 'nomatch_rule');

  return $description;
}

/**
 * Add opac_records table.
 */
function opac_update_7200(&$sandbox) {
  if (!db_table_exists('opac_records')) {
    $opac_records_schema = array(
      'description' => 'Stores corresponding record id and server if for a node.',
      'fields' => array(
        'nid' => array(
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'recordid' => array(
          'type' => 'varchar',
          'length' => 32,
          'not null' => TRUE,
        ),
        'serv_id' => array(
          'type' => 'varchar',
          'length' => 32,
          'not null' => TRUE,
        ),
      ),
      'primary key' => array('nid', 'recordid', 'serv_id'),
    );
    db_create_table('opac_records', $opac_records_schema);

    // Get all exsiting content types for opac.
    module_load_include('inc', 'opac', "includes/opac.db");
    $content_types = array_keys(opac_get_content_types());

    // Which node fields embed server and record identifiers?
    $record_id_field = variable_get('opac_record_id_field', 'none');
    $server_id_field = variable_get('opac_server_id_field', 'none');

    $record_id_table = "field_data_$record_id_field";
    $server_id_table = "field_data_$server_id_field";

    $record_id_column = $record_id_field . '_value';
    $server_id_column = $server_id_field . '_value';

    // Now fill the table.
    $result = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('type', $content_types, 'IN')
      ->execute();

    $success = 0;
    $fail = 0;
    while ($node = $result->fetchAssoc()) {
      $nid = $node['nid'];
      $recordid = db_select($record_id_table, 'r')
        ->fields('r', array($record_id_column))
        ->condition('entity_id', $nid)
        ->execute()
        ->fetchField();

      $serverid = db_select($server_id_table, 's')
        ->fields('s', array($server_id_column))
        ->condition('entity_id', $nid)
        ->execute()
        ->fetchField();

      if ($nid && $recordid && $serverid) {
        opac_add_record($nid, $recordid, $serverid);
        $success++;
      }
      else {
        $fail++;
      }
    }
    $description = t("Table opac_records created. $success record inserted. $fail failed.<br />");
    $description .= t("Now you can remove '$record_id_field' and '$server_id_field' fields from this content type(s):<br />");
    $description .= '  ' . implode(', ', $content_types);

    variable_del('opac_record_id_field');
    variable_del('opac_server_id_field');
  }
  return $description;
}
