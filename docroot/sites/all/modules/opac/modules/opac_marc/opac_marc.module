<?php
/**
 * @file
 * Opac marc module.
 */

/**
 * Implements hook_menu().
 */
function opac_marc_menu() {
  $items['admin/config/opac/marc/settings'] = array(
    'title' => 'Marc structure',
    'description' => 'Configure marc data displaying.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_marc_structure_overview'),
    'file' => 'opac_marc.admin.inc',
    'access arguments' => array('administer site configuration'),
    'weight' => 4,
  );
  $items['admin/config/opac/marc/settings/addtype'] = array(
    'title' => 'Add structure type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_marc_type_add_form'),
    'file' => 'opac_marc.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/opac/marc/settings/structure/%'] = array(
    'title' => 'Marc edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_marc_structure_edit_form', 6),
    'file' => 'opac_marc.admin.inc',
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/opac/marc/settings/structure/%/addtag'] = array(
    'title' => 'New tag',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_marc_tag_add_form'),
    'file' => 'opac_marc.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['node/%node/marc'] = array(
    'title' => 'Marc',
    'page callback' => 'opac_marc_view_page',
    'page arguments' => array(1),
    'access callback' => 'opac_marc_access',
    'access arguments' => array('view', 1),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function opac_marc_permission() {
  return array(
    'view marc' => array(
      'title' => t('View Marc data', array(), array('context' => 'libraries')),
      'description' => t("Allowed user can view a 'Marc' tab on node.", array(), array('context' => 'libraries')),
    ),
  );
}

/**
 * Implements hook_access().
 */
function opac_marc_access($op, $node) {
  global $user;
  $content_types = array_keys(opac_get_content_types());

  // User must have 'view marc' permission.
  if (in_array($node->type, $content_types) && user_access('view marc', $user)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_theme().
 */
function opac_marc_theme() {
  return array(
    'opac_marc_view' => array('variables' => array('marcdata' => NULL, 'title' => NULL)),
    'opac_datafield_view' => array('variables' => array('field' => NULL)),
    'opac_subfield_view' => array('variables' => array('fieldtag' => NULL, 'subfield' => NULL)),
  );
}

/**
 * Returns HTML output for marc view of a record/node.
 *
 * @param array $variables
 *   An associative array containing:
 *   - marcdata: Marc fields and subfields returned by the ILS server.
 *   - title: title of the node/record.
 *
 * @ingroup themeable
 */
function theme_opac_marc_view($variables) {
  $marcdata = $variables['marcdata'];
  $title = $variables['title'];

  $output = "<h1>$title</h1>";

  $output .= "<ul style='list-style-type: none; line-height: 18px; padding-left: 1px'>";
  // Loop through marc fields and call theme_opac_datafield_view.
  foreach ($marcdata['datafields'] as $key => $field) {
    $output .= theme('opac_datafield_view', array('field' => $field));
  }
  $output .= "</ul>";

  return $output;
}

/**
 * Returns HTML output for a Marc field.
 *
 * @param array $variables
 *   An associative array containing:
 *   - field: Marc field of the record.
 *
 * @ingroup themeable
 */
function theme_opac_datafield_view($variables) {
  module_load_include('inc', 'opac_marc', "opac_marc.db");
  // Get the marc structure type variable.
  $structure_type = variable_get('opac_marc_default_structure_type', 'none');
  // Get the structure.
  $marc_structure = opac_marc_structure_get($structure_type);

  $field = $variables['field'];
  $tag = $field['tag'];

  // If the subfield is @ this means we have to describe the field
  // not the subfield.
  if (isset($marc_structure[$tag]['@']) && $marc_structure[$tag]['@']['hidden']) {
    return '';
  }

  $desc = '';
  if (isset($marc_structure[$tag]['@']['label'])) {
    $desc = $marc_structure[$tag]['@']['label'];
  }

  $output = "<li><b>$tag</b> - $desc</li>";
  $output .= "<ul style='list-style-type: none; margin: 2px; padding-left: 8px'>";
  // Loop through subfields and call theme_opac_subfield_view.
  foreach ($field['subfields'] as $key => $subfield) {
    $output .= theme('opac_subfield_view', array('fieldtag' => $tag, 'subfield' => $subfield));
  }
  $output .= "</ul>";
  return $output;
}

/**
 * Returns HTML output for a Marc subfield.
 *
 * @param array $variables
 *   An associative array containing:
 *   - fieldtag: Marc field tag of the record.
 *   - subfield: Marc subfields of the record.
 *
 * @ingroup themeable
 */
function theme_opac_subfield_view($variables) {
  module_load_include('inc', 'opac_marc', "opac_marc.db");
  $structure_type = variable_get('opac_marc_default_structure_type', 'none');
  $marc_structure = opac_marc_structure_get($structure_type);

  $subfield = $variables['subfield'];
  $tag = $variables['fieldtag'];

  if (isset($marc_structure[$tag][$subfield['code']]) && $marc_structure[$tag][$subfield['code']]['hidden']) {
    return '';
  }

  $desc = '';
  if (isset($marc_structure[$tag][$subfield['code']]['label'])) {
    $desc = $marc_structure[$tag][$subfield['code']]['label'];
  }

  $output = "<li><b>" . $subfield['code'] . "</b> <i>$desc</i>: " . $subfield['data'] . "</li>";
  return $output;
}

/**
 * Build a marc view page for a given opac node.
 *
 * @param object $node
 *   The node being displayed.
 *
 * @return string
 *   HTML output.
 */
function opac_marc_view_page($node) {
  // Check if data cache exists.
  $cache = cache_get("opac_marc_" . $node->nid, "cache");
  if ($cache) {
    return $cache->data;
  }

  module_load_include('inc', 'opac', "includes/opac.db");
  list($recordid, $serverid) = opac_get_record($node->nid);

  // Get marc data for this node and call theme_opac_marc_view.
  $marc = _opac_getMarcData($recordid, $serverid);
  $output = theme('opac_marc_view', array('marcdata' => $marc, 'title' => $node->title));
  cache_set("opac_marc_" . $node->nid, $output, "cache");
  return $output;
}

/**
 * Retrieve Marc data from an ILS server using the right connector.
 *
 * @param string $recordid
 *   Record identifier in ILS server.
 *
 * @param string $serverid
 *   ILS server identifier.
 *
 * @return array
 *   Marc data or 'unsupported'.
 */
function _opac_getMarcData($recordid, $serverid) {
  module_load_include('inc', 'opac', "includes/opac.db");

  // Create an instance of the corresponding connector.
  $server = opac_server_load($serverid);
  $connector = opac_get_instance($server);

  // Return marc data.
  if (method_exists($connector, 'marc')) {
    return $connector->marc($recordid);
  }
  return 'unsupported';
}
