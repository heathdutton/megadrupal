<?php
/**
 * @file
 * Opac register module.
 */


/**
 * Implements hook_init().
 */
function opac_register_init() {
}

/**
 * Implements hook_menu().
 */
function opac_register_menu() {
  $items['user/opac-register'] = array(
    'title' => 'Register',
    'description' => 'Registration form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_register_registration_form'),
    'access callback' => 'opac_register_access',
    'file' => 'opac_register.form.inc',
    'type' => MENU_LOCAL_TASK,
  );
  // General settings.
  $items['admin/config/opac/opac-register'] = array(
    'title' => 'OPAC Registration settings',
    'description' => 'Configure registration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_register_settings_form'),
    'file' => 'opac_register.admin.inc',
    'access arguments' => array('administer site configuration'),
    'weight' => -2,
  );

  return $items;
}

/**
 * Implements hook_access().
 */
function opac_register_access() {
  return TRUE;

}

/**
 * Check if a user already exists.
 *
 * @param array $conditions
 *   An array of fields=>values to check.
 *
 * @return bool
 *   TRUE if the user exists.
 */
function opac_register_user_exists($conditions = array()) {
  $query = db_select('users')->fields('users', array('uid'));

  foreach ($conditions as $field => $value) {
    $query->condition($field, $value);
  }

  $exists = (bool) $query->execute()->fetchField();
  return $exists;
}

/**
 * Get all available branches.
 *
 * @return array
 *   Array of branche names keyed with branch codes.
 */
function opac_register_user_branches() {
  $vocab = taxonomy_vocabulary_machine_name_load('library');
  $branches = taxonomy_get_tree($vocab->vid);
  $branches_options = array();
  foreach ($branches as $branch) {
    $term = taxonomy_term_load($branch->tid);
    $name = $term->name;
    $termbc = $term->field_code;
    $code = ($termbc) ? $termbc['und'][0]['value'] : '';
    $branches_options[$code] = $name;
  }

  return $branches_options;
}

/**
 * Get all enabled opac servers as a dropdown list.
 *
 * @return array
 *   Array of opac servers
 */
function opac_register_ils_servers() {

  $servers = opac_server_load_multiple(FALSE, array('serv_enabled' => 1));
  $servers_options = array();
  foreach ($servers as $code => $server) {
    $servers_options[$code] = $server->serv_name;
  }
  return $servers_options;
}

/**
 * Implements hook_mail().
 */
function opac_register_mail($key, &$message, $params) {
  switch ($key) {
    case 'confirm_drupal_register':
      $langcode = $message['language']->language;
      $site_name = variable_get('site_name');
      $account = $params['account'];
      $t_options = array('langcode' => $langcode);
      $message['subject'] = t('Confirmation of your inscription at !site', array('!site' => $site_name), $t_options);
      $message['body'] = array(
        t("Welcome to @site!", array('@site' => $site_name), $t_options),
        t("Your account has just been created.", array(), $t_options),
        t("Your account name is: @name (you will need it to login).", array('@name' => $account->name), $t_options),
      );
      break;

    case 'confirm_ils_register':
      $langcode = $message['language']->language;
      $site_name = variable_get('site_name');
      $account = $params['account'];
      $t_options = array('langcode' => $langcode);
      $message['subject'] = t('Confirmation of your inscription at !site', array('!site' => $params['ilsname']), $t_options);
      $message['body'] = array(
        t("Welcome to @site!", array('@site' => $params['ilsname']), $t_options),
        t("Your account has just been created.", array(), $t_options),
        t("You may have to wait for the library to activate your account.", $t_options),
      );
      break;
  }
}
