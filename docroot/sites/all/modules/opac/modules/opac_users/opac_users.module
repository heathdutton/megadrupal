<?php
/**
 * @file
 * Opac users module.
 */


/**
 * Denotes available ILS authentication methods.
 *
 * OPAC_USER_AUTH_METHOD_NONE: No ILS authentication.
 *
 * OPAC_USER_AUTH_METHOD_DRUPAL: ILS authentication is done with Drupal
 * login/password.
 *
 * OPAC_USER_AUTH_METHOD_LIBRARY: ILS authentication is done with another
 * login/password couple.
 */
define('OPAC_USER_AUTH_METHOD_NONE', 0);
define('OPAC_USER_AUTH_METHOD_DRUPAL', 1);
define('OPAC_USER_AUTH_METHOD_LIBRARY', 2);

/**
 * Implements hook_init().
 */
function opac_users_init() {
  global $user;
  $uid = $user->uid;
  if (variable_get('opac_users_debug_mode', 0) && !isset($_SESSION['opac_user']) && $uid != 0) {
    drupal_set_message(t(
      'You are not authenticated to an ILS server. If you should, check your !url.',
      array('!url' => l(t('account settings'), "user/$uid/edit"))), 'error');
  }
}

/**
 * Implements hook_menu().
 */
function opac_users_menu() {
  if (variable_get('opac_users_library_registration_allowed', 1)) {
    $lib_register_path = variable_get('opac_users_library_registration_path', 'opac-user/register');
    $lib_register_title = variable_get('opac_users_library_registration_title', 'Library registration');
    $items[$lib_register_path] = array(
      'title' => check_plain($lib_register_title),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('opac_users_library_register_form'),
      'access callback' => 'opac_users_access',
      'access arguments' => array('register'),
      'file' => 'opac_users.register.inc',
      'menu_name' => 'user-menu',
    );
  }
  $items['admin/config/opac/opac-users'] = array(
    'title' => 'OPAC user settings',
    'description' => 'Configure global settings for opac users module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_users_settings_form'),
    'file' => 'opac_users.admin.inc',
    'access arguments' => array('administer site configuration'),
    'weight' => 5,
  );
  $items['opac-user/check'] = array(
    'title' => 'library account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_users_library_account_form'),
    'access callback' => 'opac_users_access',
    'access arguments' => array('check'),
    'file' => 'opac_users.pages.inc',
    'menu_name' => 'user-menu',
  );
  if (variable_get('opac_users_checkouts_page_allowed', '')) {
    $checkouts_page_path = variable_get('opac_users_checkouts_page_path', 'opac-user/checkouts');
    $checkouts_page_title = variable_get('opac_users_checkouts_page_title', 'My Checkouts');
    $items[$checkouts_page_path] = array(
      'title' => check_plain($checkouts_page_title),
      'page callback' => 'opac_users_checkouts_page',
      'access callback' => 'opac_users_access',
      'access arguments' => array('checkouts'),
      'file' => 'opac_users.pages.inc',
      'menu_name' => 'user-menu',
    );
    $items["$checkouts_page_path/refresh"] = array(
      'title' => 'Refresh checkouts informations',
      'type' => MENU_LOCAL_ACTION,
      'page callback' => 'opac_users_refresh_checkouts_page',
      'access callback' => 'opac_users_access',
      'access arguments' => array('checkouts'),
      'file' => 'opac_users.pages.inc',
      'menu_name' => 'user-menu',
    );
  }
  if (variable_get('opac_users_holds_page_allowed', '')) {
    $holds_page_path = variable_get('opac_users_holds_page_path', 'opac-user/holds');
    $holds_page_title = variable_get('opac_users_holds_page_title', 'My Holds');
    $items[$holds_page_path] = array(
      'title' => check_plain($holds_page_title),
      'page callback' => 'opac_users_holds_page',
      'access callback' => 'opac_users_access',
      'access arguments' => array('holds'),
      'file' => 'opac_users.pages.inc',
      'menu_name' => 'user-menu',
    );
    $items["$holds_page_path/refresh"] = array(
      'title' => 'Refresh holds informations',
      'type' => MENU_LOCAL_ACTION,
      'page callback' => 'opac_users_refresh_holds_page',
      'access callback' => 'opac_users_access',
      'access arguments' => array('holds'),
      'file' => 'opac_users.pages.inc',
      'menu_name' => 'user-menu',
    );
  }
  if (variable_get('opac_users_issues_history_page_allowed', TRUE)) {
    $issues_history_page_path = variable_get(
      'opac_users_issues_history_page_path', 'opac-user/issues-history');
    $issues_history_page_title = variable_get(
      'opac_users_issues_history_page_title', 'My issues history');
    $items[$issues_history_page_path] = array(
      'title' => check_plain($issues_history_page_title),
      'page callback' => 'opac_users_issues_history_page',
      'access callback' => 'opac_users_access',
      'access arguments' => array('issues_history'),
      'file' => 'opac_users.pages.inc',
      'menu_name' => 'user-menu',
    );
    $items["$issues_history_page_path/refresh"] = array(
      'title' => 'Refresh issues history',
      'type' => MENU_LOCAL_ACTION,
      'page callback' => 'opac_users_refresh_issues_history_page',
      'access callback' => 'opac_users_access',
      'access arguments' => array('issues_history'),
      'file' => 'opac_users.pages.inc',
    );
  }
  $items['node/%node/holditem/%'] = array(
    'title' => 'Hold confirm',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_users_holditem_form', 1, 3),
    'access callback' => 'opac_users_access',
    'access arguments' => array('holditem'),
    'file' => 'opac_users.pages.inc',
  );
  $items['node/%node/holditem'] = array(
    'title' => 'Hold confirm',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_users_holditem_form', 1),
    'access callback' => 'opac_users_access',
    'access arguments' => array('holditem'),
    'file' => 'opac_users.pages.inc',
  );
  $items['node/%node/cancelhold/%'] = array(
    'title' => 'Hold confirm',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_users_cancelhold_form', 1, 3),
    'access callback' => 'opac_users_access',
    'access arguments' => array('cancelhold'),
    'file' => 'opac_users.pages.inc',
  );
  $items['node/%node/renewloan/%'] = array(
    'title' => 'Renew confirm',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_users_renewloan_form', 1, 3),
    'access callback' => 'opac_users_access',
    'access arguments' => array('renewloan'),
    'file' => 'opac_users.pages.inc',
  );
  $items['admin/config/opac/servers/manage/%/patron-mapping'] = array(
    'title' => 'patron mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_users_mapping_overview_form', 5),
    'file' => 'opac_users.admin.inc',
    'access arguments' => array('administer site configuration'),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/opac/servers/manage/%/patron-fields'] = array(
    'title' => 'Patron fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_users_fields_form', 5),
    'file' => 'opac_users.admin.inc',
    'access arguments' => array('administer site configuration'),
    'weight' => 4,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/opac/opac_users/fields/add/%'] = array(
    'title' => 'New field',
    'description' => 'New field',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_users_admin_field_edit_form', 6),
    'file' => 'opac_users.admin.inc',
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/opac/opac_users/fields/edit/%/%'] = array(
    'title callback' => 'opac_users_field_edit_title_callback',
    'title arguments' => array(6, 7),
    'description' => 'Edit items fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_users_admin_field_edit_form', 6, 7),
    'file' => 'opac_users.admin.inc',
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Title callback for admin/config/opac/opac_users/fields/edit/%/%.
 */
function opac_users_field_edit_title_callback($server, $field) {
  return t('Configure @server mapping for @field field', array('@server' => $server, '@field' => $field));
}

/**
 * Implements hook_access().
 */
function opac_users_access($op) {
  global $user;
  // Anonymous users cannot create an ILS account.
  if ($user->uid == 0) {
    return FALSE;
  }

  // Admin must access for creating menu entries.
  if ($user->uid == 1) {
    return TRUE;
  }

  // All drupal user can set a login password
  // to the library account page.
  if ($op == 'check') {
    if (isset($_SESSION['opac_user']['opac_user_id'])) {
      return FALSE;
    }
    $opac_users_auth_method = variable_get('opac_users_auth_method', 0);
    if ($opac_users_auth_method != OPAC_USER_AUTH_METHOD_LIBRARY) {
      return FALSE;
    }
    return TRUE;
  }

  // Authenticated users can't access to
  // registration page again.
  elseif ($op == 'register') {
    if (isset($_SESSION['opac_user']['opac_user_id'])) {
      return FALSE;
    }
    return TRUE;
  }

  elseif ($op == 'issues_history') {
    if (isset($_SESSION['opac_user']['opac_server'])) {
      $server_id = $_SESSION['opac_user']['opac_server'];
      $server = opac_server_load($server_id);
      $connector = opac_get_instance($server);
      if ($connector && $connector->has('issues_history')) {
        return TRUE;
      }
    }
    return FALSE;
  }

  // If the drupal has already been authenticated
  // from the ILS server.
  else {
    if (isset($_SESSION['opac_user']['opac_user_id'])) {
      return TRUE;
    }
    return FALSE;
  }
}

/**
 * Implements hook_theme().
 */
function opac_users_theme() {
  return array(
    'opac_users_checkouts' => array(
      'arguments' => array('elements' => NULL),
    ),
    'opac_users_holds' => array(
      'arguments' => array('elements' => NULL),
    ),
    'opac_users_issues_history' => array(
      'arguments' => array('elements' => NULL),
    ),
    'opac_users_mapping_overview_form' => array(
      'render element' => 'form',
    ),
    'opac_users_fields_tabledrag' => array(
      'render element' => 'form',
    ),
    'opac_users_table_cell' => array(
      'render element' => 'value',
      'template' => 'opac-users-table-cell',
      'path' => drupal_get_path('module', 'opac_users') . '/templates',
    ),
  );
}

/**
 * Returns HTML output for opac_users_mapping_overview_form.
 *
 * @param array $variables
 *   An associative array containing:
 *   - form: opac_users_mapping_overview_form.
 *
 * @ingroup themeable
 */
function theme_opac_users_mapping_overview_form($variables) {
  $form = $variables['form'];

  $rows = array();

  foreach (element_children($form) as $key) {
    if (isset($form[$key]['patron_field'])) {
      $rule = &$form[$key];

      $row = array();
      $row[] = drupal_render($rule['patron_field']);
      $row[] = drupal_render($rule['label_display']);
      $row[] = drupal_render($rule['edit']);

      $rows[] = array('data' => $row);
    }
  }
  $header = array(t('Patron field', array(), array('context' => 'libraries')));
  $header[] = t('Label display');
  $header[] = array('data' => t('Operations'), 'colspan' => '2');

  return theme(
    'table',
    array(
      'header' => $header,
      'rows' => $rows,
      'empty' => t('No rule available.'),
      'attributes' => array('id' => 'patrons'),
    )
  ) . drupal_render_children($form);
}

/**
 * Comparison function used in _opac_users_fields.
 */
function _opac_users_fields_cmp_weight($a, $b) {
  if ($a['weight'] == $b['weight']) {
    return 0;
  }
  return ($a['weight'] < $b['weight']) ? -1 : 1;
}

/**
 * Retrieve users fields informations.
 */
function _opac_users_fields($serv_id, $connector_fields, $region) {
  $opac_users_fields = variable_get('opac_users_fields', array());
  $region_fields = isset($opac_users_fields[$serv_id][$region]) ?
  $opac_users_fields[$serv_id][$region] : array();
  foreach ($connector_fields as $name => $connector_field) {
    if (!isset($region_fields[$name])) {
      $region_fields[$name] = array(
        'visible' => 1,
        'weight' => 0,
      );
    }
    $region_fields[$name]['label'] = $connector_field['label'];
    if (array_key_exists('type', $connector_field)) {
      $region_fields[$name]['type'] = $connector_field['type'];
    }
  }
  uasort($region_fields, '_opac_users_fields_cmp_weight');
  return $region_fields;
}

/**
 * Returns HTML table for user checkouts.
 *
 * @param array $elements
 *   An associative array containing:
 *   - checkouts: an array of checkouts for the user.
 *   - serverid: identifier of the ILS server checkouts for the user come from.
 *
 * @ingroup themeable
 */
function theme_opac_users_checkouts($elements) {
  module_load_include('inc', 'opac', "includes/opac.db");
  module_load_include('inc', 'opac', "includes/opac.node");

  // Get all the user checkouts and the
  // corresponding ILS server.
  $checkouts = $elements['checkouts'];
  $serverid = $elements['serverid'];

  $show_renew_link = 0;
  if (user_access('renew loans')) {
    $show_renew_link = 1;
  }

  $connector = opac_get_instance(opac_server_load($serverid));
  $fields = _opac_users_fields($serverid, $connector->patronCheckoutsFields(), 'checkouts');
  $reverse_fields = array();
  foreach ($fields as $name => $field) {
    if ($field['visible']) {
      $header[] = array(
        'data' => $field['label'],
        'field' => $name,
        'sort' => ($name == 'date') ? 'desc' : NULL,
        'class' => array($name),
      );
    }

    $reverse_fields[$field['label']] = $name;
  }

  $show_operations_column = 0;
  if ($show_renew_link) {
    $show_operations_column = 1;
    $header[] = array('data' => t('Operations'), 'class' => array('operations'));
  }

  $rows = array();

  if (!empty($checkouts)) {
    // Sort table.
    $sort = isset($_GET['sort']) ? $_GET['sort'] : 'desc';
    $order = isset($_GET['order']) ? $reverse_fields[$_GET['order']] : 'date';
    if ($sort && $order) {
      usort($checkouts, function ($a, $b) use ($sort, $order) {
        $cmp = strcmp($a[$order], $b[$order]);
        return ($sort == 'asc') ? $cmp : -$cmp;
      });
    }

    // Loop on checkouts to build the table.
    foreach ($checkouts as $key => $checkout) {
      // Check if node exists because a checkout
      // can be related to a record that has not been harvested
      // in drupal. If the node exists we make a link on checkout
      // title to the node.
      $node = NULL;
      $nid = opac_get_node_id($serverid, $checkout['recordid']);
      if ($nid) {
        $node = node_load($nid);
      }

      $checkout['title'] = ($node && $node->nid) ?
      l($checkout['title'], "node/$node->nid") : $checkout['title'];

      // Add a link to renew the checkout if it is possible.
      if ($show_renew_link) {
        if ($node && $node->nid && $checkout['renewable']) {
          $renewloan = l(t('Renew loan', array(), array('context' => 'libraries')), "node/" . $node->nid . "/renewloan/"
            . $checkout['itemid']);
        }
        else {
          if (isset($checkout['reasons_not_renewable'])) {
            $reason = $checkout['reasons_not_renewable'];
          }
          else {
            $reason = t("Unknown");
          }
          $renewloan = t("Can't renew. Reason: @reason", array('@reason' => $reason), array('context' => 'libraries'));
        }
      }

      $row = array();
      foreach ($fields as $name => $field) {
        if ($field['visible']) {
          $theme_name = "opac_users_table_cell__checkouts__$name";
          $theme_variables = array(
            'value' => isset($checkout[$name]) ? $checkout[$name] : NULL,
            'name' => $name,
            'field' => $field,
            'node' => $node,
            'row' => $checkout,
          );
          $row[$name] = array(
            'data' => theme($theme_name, $theme_variables),
            'class' => array($name),
          );
        }
      }

      // If document is overdue, duedate is red.
      if (array_key_exists('duedate', $row) && isset($checkout['overdue'])) {
        $row['duedate']['data'] = '<b style="color: red;">' . $row['duedate']['data'] . ' (' . t('Overdue', array(), array('context' => 'libraries')) . ')</b>';
      }

      if ($show_operations_column) {
        $row['operations'] = array(
          'data' => $renewloan,
          'class' => array('operations'),
        );
      }

      $rows[$key] = array(
        'data' => $row,
      );
    }
  }

  // Use default drupal theme_table function.
  $theme_variables = array(
    'header' => $header,
    'rows' => $rows,
    'empty' => t('You have nothing checked out.', array(), array('context' => 'libraries')),
    'attributes' => array('class' => array('opac_users_checkouts_holds_tables', 'opac_users_checkouts')),
  );
  return theme('table', $theme_variables);
}

/**
 * Returns HTML table for user holds.
 *
 * @param array $elements
 *   An associative array containing:
 *   - holds: an array of hold items for the user.
 *   - serverid: identifier of the ILS server holds for the user come from.
 *
 * @ingroup themeable
 */
function theme_opac_users_holds($elements) {
  module_load_include('inc', 'opac', "includes/opac.db");
  module_load_include('inc', 'opac', "includes/opac.node");

  // Get all the user holds and the
  // corresponding ILS server.
  $holds = $elements['holds'];
  $serverid = $elements['serverid'];

  $show_cancel_link = 0;
  if (user_access('cancel holds')) {
    $show_cancel_link = 1;
  }

  $connector = opac_get_instance(opac_server_load($serverid));
  $fields = _opac_users_fields($serverid, $connector->patronHoldsFields(), 'holds');

  // Build table header.
  $reverse_fields = array();
  foreach ($fields as $name => $field) {
    if ($field['visible']) {
      $header[] = array(
        'data' => $field['label'],
        'field' => $name,
        'sort' => ($name == 'date') ? 'asc' : NULL,
        'class' => array($name),
      );
    }
    $reverse_fields[$field['label']] = $name;
  }
  $show_operations_column = 0;
  if ($show_cancel_link) {
    $show_operations_column = 1;
    $header[] = array('data' => t('Operations'), 'class' => array('operations'));
  }

  $rows = array();

  if (!empty($holds)) {
    // Sort table.
    $sort = isset($_GET['sort']) ? $_GET['sort'] : 'asc';
    $order = isset($_GET['order']) ? $reverse_fields[$_GET['order']] : 'date';
    if ($sort && $order) {
      usort($holds, function ($a, $b) use ($sort, $order) {
        $cmp = strcmp($a[$order], $b[$order]);
        return ($sort == 'asc') ? $cmp : -$cmp;
      });
    }

    // Loop on holds to build the table.
    foreach ($holds as $key => $hold) {
      // Check if node exists because an hold
      // can be related to a record that has not been harvested
      // in drupal. If the node exists we make a link on hold
      // title to the node.
      $node = NULL;
      $nid = opac_get_node_id($serverid, $hold['recordid']);
      if ($nid) {
        $node = node_load($nid);
      }

      $hold['title'] = $node && $node->nid ? l($hold['title'], "node/$node->nid") : $hold['title'];
      if ($show_cancel_link) {
        $cancelhold = t("Can't cancel");
        if ($node && $node->nid) {
          $cancelhold = l(t('Cancel'), "node/" . $node->nid . "/cancelhold/" . $hold['cancelid']);
        }
      }

      $row = array();
      foreach ($fields as $name => $field) {
        if ($field['visible']) {
          $theme_name = "opac_users_table_cell__holds__$name";
          $theme_variables = array(
            'value' => isset($hold[$name]) ? $hold[$name] : NULL,
            'name' => $name,
            'field' => $field,
            'node' => $node,
            'row' => $hold,
          );
          $row[$name] = array(
            'data' => theme($theme_name, $theme_variables),
            'class' => array($name),
          );
        }
      }
      if ($show_operations_column) {
        $row['operations'] = array(
          'data' => $cancelhold,
          'class' => array('operations'),
        );
      }
      $rows[$key] = array('data' => $row);
    }
  }

  // Use default drupal theme_table function.
  $theme_variables = array(
    'header' => $header,
    'rows' => $rows,
    'empty' => t('You have nothing on hold', array(), array('context' => 'libraries')),
    'attributes' => array('class' => array('opac_users_checkouts_holds_tables', 'opac_users_holds')),
  );
  return theme('table', $theme_variables);
}

/**
 * Theme 'opac_users_issues_history'.
 */
function theme_opac_users_issues_history($elements) {
  module_load_include('inc', 'opac', "includes/opac.db");
  module_load_include('inc', 'opac', "includes/opac.node");

  // Get all the user issues and the
  // corresponding ILS server.
  $issues = $elements['issues'];
  $serverid = $elements['serverid'];

  $connector = opac_get_instance(opac_server_load($serverid));
  $fields = _opac_users_fields($serverid, $connector->patronIssuesHistoryFields(), 'issues_history');
  $reverse_fields = array();
  foreach ($fields as $name => $field) {
    if ($field['visible']) {
      $header[] = array(
        'data' => $field['label'],
        'field' => $name,
        'sort' => ($name == 'date') ? 'desc' : NULL,
      );
    }

    $reverse_fields[$field['label']] = $name;
  }

  $rows = array();

  if (!empty($issues)) {
    // Sort table.
    $sort = isset($_GET['sort']) ? $_GET['sort'] : 'desc';
    $order = isset($_GET['order']) ? $reverse_fields[$_GET['order']] : 'date';
    if ($sort && $order) {
      usort($issues, function ($a, $b) use ($sort, $order) {
        $cmp = strcmp($a[$order], $b[$order]);
        return ($sort == 'asc') ? $cmp : -$cmp;
      });
    }

    // Loop on issues to build the table.
    foreach ($issues as $key => $issue) {
      // Check if node exists because a issue
      // can be related to a record that has not been harvested
      // in drupal. If the node exists we make a link on issue
      // title to the node.
      $node = NULL;
      $nid = opac_get_node_id($serverid, $issue['recordid']);
      if ($nid) {
        $node = node_load($nid);
      }

      $issue['title'] = ($node && $node->nid) ?
      l($issue['title'], "node/$node->nid") : $issue['title'];

      $row = array();
      foreach ($fields as $name => $field) {
        if ($field['visible']) {
          $theme_name = "opac_users_table_cell__issues_history__$name";
          $theme_variables = array(
            'value' => isset($issue[$name]) ? $issue[$name] : NULL,
            'name' => $name,
            'field' => $field,
            'node' => $node,
            'row' => $issue,
          );
          $row[$name] = array(
            'data' => theme($theme_name, $theme_variables),
            'class' => array($name),
          );
        }
      }

      // If there is no return date, it means the item is still checked out.
      if (array_key_exists('returndate', $row) && !$row['returndate']) {
        $row['returndate']['data'] = t('Checked out', array(), array('context' => 'libraries'));
      }

      $rows[$key] = array(
        'data' => $row,
      );
    }
  }

  // Use default drupal theme_table function.
  $theme_variables = array(
    'header' => $header,
    'rows' => $rows,
    'empty' => t('You have nothing checked out.', array(), array('context' => 'libraries')),
    'attributes' => array('class' => array('opac_users_issues_history')),
  );
  return theme('table', $theme_variables);
}

/**
 * Perform user authentification with ILS server.
 *
 * Set a SESSION array with patron id and server id.
 *
 * @param string $login
 *   User login
 *
 * @param string $pass
 *   User pass
 *
 * @param bool $cas
 *   Is this a CAS authentication?
 */
function opac_users_authenticate($login, $pass, $cas = FALSE) {
  module_load_include('inc', 'opac_users', "opac_users.db");
  module_load_include('inc', 'opac', "includes/opac.db");

  // If we are in a regular (login/pass) authentication.
  if ($cas == FALSE) {

    // Get authentification method that has
    // been set in opac users settings.
    $auth_method = variable_get('opac_users_auth_method', OPAC_USER_AUTH_METHOD_NONE);
    switch ($auth_method) {
      case OPAC_USER_AUTH_METHOD_NONE:
        break;

      case OPAC_USER_AUTH_METHOD_DRUPAL:
        $result = _opac_users_auth_with_drupalpass($login, $pass);
        if (count($result)) {
          $_SESSION['opac_user'] = $result;
        }
        break;

      case OPAC_USER_AUTH_METHOD_LIBRARY:
        $result = _opac_users_auth_with_librarypass();
        if (count($result)) {
          $_SESSION['opac_user'] = $result;
        }
        break;
    }
  }
  else {
    // We are in a CAS authentication.
    $result = _opac_users_auth_with_cas($login);
    if (count($result)) {
      $_SESSION['opac_user'] = $result;
    }
  }
}

/**
 * Implements hook_user_insert().
 */
function opac_users_user_insert($edit, $account, $category) {

  // If the CAS module exists.
  if (module_exists('cas')) {
    /* Let's prefill the user's CAS username with his regular username if no
    CAS username is provided. */
    if ($edit['cas_name'] == '') {
      module_load_include('inc', 'cas', "cas");
      cas_user_operations_create_username(array($edit['uid']));
    }
  }
}


/**
 * Implements hook_user_login().
 */
function opac_users_user_login($edit, $account) {

  $opac_users_auth_method = variable_get('opac_users_auth_method', 0);

  // If we're in a CAS login.
  if (isset($edit['cas_user']['name'])) {
    opac_users_authenticate($edit['cas_user']['name'], '', TRUE);
  }
}


/**
 * Perform user authentification using drupal credentials.
 *
 * @param string $login
 *   User login
 *
 * @param string $pass
 *   User pass
 *
 * @return array
 *   array with patron id and server id.
 */
function _opac_users_auth_with_drupalpass($login, $pass) {
  module_load_include('inc', 'opac_users', "includes/opac_users.user");
  global $user;
  $account = user_load($user->uid);
  $opac_server = opac_user_get_server($account);
  $result = array();
  if ($opac_server) {
    $server = opac_server_load($opac_server);

    $connector = opac_get_instance($server);
    if ($connector) {
      $patron_id = $connector->authenticateUser($login, $pass);
      if ($patron_id) {
        $result['opac_user_id'] = $patron_id;
        $result['opac_server'] = $opac_server;
        return $result;
      }
    }
  }
  return $result;
}

/**
 * Perform user authentification using library credentials.
 *
 * @return array
 *   array with patron id and server id.
 */
function _opac_users_auth_with_librarypass() {
  module_load_include('inc', 'opac_users', "includes/opac_users.user");
  global $user;
  $account = user_load($user->uid);
  $opac_server = opac_user_get_server($account);

  $result = array();
  if ($opac_server) {
    $opac_login = opac_user_get_login($account);
    $opac_password = opac_user_get_password($account);

    // Retrieve the ILS server from which the user has
    // set an account.
    $server = opac_server_load($opac_server);
    // Create an instance of the connector and
    // call authenticateUser method passing it
    // the login and pass of the opac user.
    $connector = opac_get_instance($server);
    $patron_id = $connector->authenticateUser($opac_login, $opac_password);
    if ($patron_id) {
      $result['opac_user_id'] = $patron_id;
      $result['opac_server'] = $opac_server;
      return $result;
    }
  }
  return $result;
}

/**
 * Perform user authentification from a CAS authentication.
 *
 * @param string $login
 *   User login
 *
 * @return array
 *   array with patron id and server id.
 */
function _opac_users_auth_with_cas($login) {
  module_load_include('inc', 'opac_users', "includes/opac_users.user");
  global $user;
  $account = user_load($user->uid);
  $opac_server = opac_user_get_server($account);
  $result = array();
  if ($opac_server) {
    $server = opac_server_load($opac_server);

    $connector = opac_get_instance($server);
    if ($connector) {
      $patron_id = $connector->lookupUser($login);
      if ($patron_id) {
        $result['opac_user_id'] = $patron_id;
        $result['opac_server'] = $opac_server;
        return $result;
      }
    }
  }
  return $result;
}


/**
 * Implements hook_node_view().
 */
function opac_users_node_view($node, $view_mode, $langcode) {
  $content_types = array_keys(opac_get_content_types());
  // Make sure the current node is an opac node type.
  if (in_array($node->type, $content_types)) {
    $field_name = 'field_opac_users_holdtitle';
    $bundle_settings = field_bundle_settings('node', $node->type);
    if (isset($bundle_settings['extra_fields']['display'][$field_name][$view_mode]['visible'])
      && $bundle_settings['extra_fields']['display'][$field_name][$view_mode]['visible'])
    {
      module_load_include('inc', 'opac_users', "includes/opac_users.commons");
      module_load_include('inc', 'opac', "includes/opac.db");

      // Get the server name the node come from.
      list($recordid, $serverid) = opac_get_record($node->nid);

      // Add 'Hold title' link only if user can place holds on titles.
      if (user_access('hold titles') && opac_users_connected_to($serverid)) {
        $server = opac_server_load($serverid);
        $connector = opac_get_instance($server);
        $patron_id = $_SESSION['opac_user']['opac_user_id'];
        if ($connector->biblioIsHoldable($recordid, $patron_id)) {
          $node->content['field_opac_users_holdtitle'] = array(
            '#markup' => l(t('Hold this title', array(), array('context' => 'libraries')), "node/$node->nid/holditem"),
          );
        }
        // Or if the user is not logged in.
      }
      elseif (user_is_anonymous() && user_access('hold titles')) {
        $node->content['field_opac_users_holdtitle'] = array(
          '#markup' => l(t('Hold this title', array(), array('context' => 'libraries')), variable_get('opac_users_redirect', 'user/login'), array("query" => array('destination' => "node/$node->nid/holditem"))),
        );
      }
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function opac_users_field_extra_fields() {
  $extra = array();

  // Node extra fields.
  $content_types = array_keys(opac_get_content_types());
  foreach ($content_types as $content_type) {
    $extra['node'][$content_type] = array(
      'form' => array(
        'field_opac_users_holdtitle' => array(
          'label' => t('OPAC Hold link', array(), array('context' => 'libraries')),
          'description' => 'OPAC node holding link',
          'weight' => 7,
        ),
      ),
      'display' => array(
        'field_opac_users_holdtitle' => array(
          'label' => t('OPAC Hold link', array(), array('context' => 'libraries')),
          'description' => 'OPAC node holding link',
          'weight' => 7,
        ),
      ),
    );
  }

  // User extra fields.
  $servers = opac_server_load_multiple(FALSE, array(), TRUE);
  $f = array();
  foreach ($servers as $server_id => $server) {
    $server_name = $server->serv_name;
    $connector = opac_get_instance($server);
    $fields = $connector->patronFields();
    foreach ($fields as $field_name => $field) {
      $f["$server_id:$field_name"] = array(
        'label' => $server_name . ' - ' . $field['label'],
        'description' => (isset($field['description']) ? $field['description'] : $field['label']) . " ($server_name)",
        'weight' => 0,
      );
    }
  }

  $extra['user']['user'] = array(
    'form' => $f,
    'display' => $f,
  );
  return $extra;
}

/**
 * Implements hook_user_view().
 */
function opac_users_user_view($account, $view_mode, $langcode) {
  module_load_include('inc', 'opac_users', 'includes/opac_users.user');
  module_load_include('inc', 'opac_users', 'opac_users.db');
  $server_id = opac_user_get_server($account);
  if (isset($server_id)) {
    $server = opac_server_load($server_id);
    if (!$server) {
      $message = t('Server @server_id does not exist (user @uid )', array('@server_id' => $server_id, '@uid' => $account->uid));
      drupal_set_message($message, 'error');
      return;
    }
    $connector = opac_get_instance($server);
    $fields = $connector->patronFields();
    $ils_infos = opac_user_get_ils_infos($account);
    $mapping = opac_users_get_fields_mapping($server_id);

    // Does the user have a note from the library?
    if ($ils_infos['opacnote']) {
      drupal_set_message(t("You have a message from the library:") . "<br />" . $ils_infos['opacnote']);
    }

    foreach ($fields as $field_name => $field) {
      if (!empty($ils_infos[$field_name])) {
        $items = array(
          array(
            '#markup' => $ils_infos[$field_name],
          ),
        );
        $full_field_name = "$server_id:$field_name";
        $f = array(
          '#theme' => 'field',
          '#label_display' => isset($mapping[$field_name]) ? $mapping[$field_name]['label_display'] : 'above',
          '#field_type' => 'text',
          '#entity_type' => 'user',
          '#bundle' => 'user',
          '#title' => $field['label'],
          '#field_name' => $full_field_name,
          '#items' => $items,
        );
        $account->content[$full_field_name] = array_merge($f, $items);
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function opac_users_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_login' || $form_id == 'user_login_block') {
    $form['#submit'][] = 'opac_users_user_login_form_submit';
  }
  if ($form_id == 'user_profile_form') {
    $form['#validate'][] = 'opac_users_user_profile_form_validate';
    $form['#submit'][] = 'opac_users_user_profile_form_submit';

    // Add ILS fields in user edit form.
    module_load_include('inc', 'opac_users', 'includes/opac_users.user');
    $auth_method = variable_get('opac_users_auth_method', OPAC_USER_AUTH_METHOD_NONE);
    if ($auth_method != OPAC_USER_AUTH_METHOD_NONE) {
      $server = opac_user_get_server($form['#user']);
      if ($server) {
        $extra_fields = field_info_extra_fields('user', 'user', 'form');

        // Find fields that start with $opac_server followed by ':'.
        $ils_fields = array_filter(array_keys($extra_fields), function ($k) use ($server) {
          return (0 === strpos($k, "$server:")) ? TRUE : FALSE;
        });

        $opac_server = opac_server_load($server);
        $connector = opac_get_instance($opac_server);
        $patron_fields = $connector->patronFields();
        $ils_infos = opac_user_get_ils_infos($form['#user']);

        foreach ($ils_fields as $ils_field) {
          list(,$fieldname) = explode(':', $ils_field);
          if (isset($patron_fields[$fieldname]) && (!isset($patron_fields[$fieldname]['readonly']) || !$patron_fields[$fieldname]['readonly'])) {
            list(,$label) = explode(' - ', $extra_fields[$ils_field]['label']);
            $form[$ils_field] = array(
              '#type' => 'textfield',
              '#title' => $label,
              '#description' => $extra_fields[$ils_field]['description'],
              '#weight' => $extra_fields[$ils_field]['weight'],
              '#default_value' => $ils_infos[$fieldname],
            );
          }
        }
      }
    }
  }
}

/**
 * Form submission handler for opac_users_user_login_form().
 */
function opac_users_user_login_form_submit(&$form, $form_state) {
  $user_name = $form_state['values']['name'];
  $user_pass = $form_state['values']['pass'];

  opac_users_authenticate($user_name, $user_pass);
}

/**
 * Implements hook_opac_items_data_alter().
 */
function opac_users_opac_items_data_alter(&$data) {

  if (user_access('hold items')) {
    $data['mapping'][] = array(
      'item_field' => 'hold_link',
      'display_header' => t('Operations'),
      'weight' => '50',
    );
    $nid = $data['nid'];

    foreach ($data['items'] as $itemnumber => $item) {
      if (user_is_anonymous()) {
        $data['items'][$itemnumber]['hold_link'] = l(t('hold', array(), array('context' => 'libraries')), variable_get('opac_users_redirect', 'user/login'), array("query" => array('destination' => "node/$nid/holditem/$itemnumber")));
      }
      elseif (!empty($item['canhold'])) {
        $data['items'][$itemnumber]['hold_link'] = l(t('hold', array(), array('context' => 'libraries')), "node/$nid/holditem/$itemnumber");
      }
      else {
        $data['items'][$itemnumber]['hold_link'] = t('Not available for hold', array(), array('context' => 'libraries'));
      }
    }
  }
}

/**
 * Implements hook_permission().
 */
function opac_users_permission() {
  $permissions = array(
    'hold titles' => array(
      'title' => t('Place holds on titles', array(), array('context' => 'libraries')),
    ),
    'hold items' => array(
      'title' => t('Place holds on items', array(), array('context' => 'libraries')),
    ),
    'cancel holds' => array(
      'title' => t('Cancel own holds', array(), array('context' => 'libraries')),
    ),
    'renew loans' => array(
      'title' => t('Renew loans', array(), array('context' => 'libraries')),
    ),
  );
  return $permissions;
}

/**
 * Implements hook_feeds_presave().
 *
 * Reset ILS password.
 */
function opac_users_feeds_presave(FeedsSource $source, $entity, $item) {
  module_load_include('inc', 'opac', 'includes/opac.harvest');

  $auth_method = variable_get('opac_users_auth_method', 0);
  if ($entity->feeds_item->entity_type == 'user' && $auth_method != 0) {
    $server_field = variable_get('opac_users_server_field');
    if ($server_field && $entity->{$server_field}['und'][0]['value']) {
      $opac_server = $entity->{$server_field}['und'][0]['value'];
      $server = opac_server_load($entity->{$server_field}['und'][0]['value']);
      $connector = opac_get_instance($server);
      if ($connector) {
        // Retrieving password from source because if it
        // is not mapped in feeds processor, $entity->pass
        // variable will contain the old crypted password from database.
        $user_pass;
        $user_name;
        foreach ($source->importer->processor->getMappings() as $mapping) {
          if ($mapping['target'] == 'pass') {
            $user_pass = $item[$mapping['source']];
          }
        }

        if ($auth_method == OPAC_USER_AUTH_METHOD_DRUPAL) {
          $user_name = $entity->name;
        }
        elseif ($auth_method == OPAC_USER_AUTH_METHOD_LIBRARY) {
          $opac_users_login_field = variable_get('opac_users_login_field');
          $opac_users_password_field = variable_get('opac_users_password_field');
          if ($opac_users_login_field && $entity->$opac_users_login_field
          && $opac_users_password_field && $entity->$opac_users_password_field) {
            $user_name = $entity->{$opac_users_login_field}['und'][0]['value'];
          }
        }
        if ($user_name && $user_pass) {
          if (!$connector->changePassword($user_name, $user_pass)) {
            $error = t('REST webservice error');
          }
        }
      }
      else {
        $error = t('no connector for server @server', array('@server' => $opac_server));
      }
    }
    else {
      $error = t('Unable to retrieve user server');
    }

    if (isset($error)) {
      drupal_set_message(t('ILS password update failed for user @username',
        array('@username' => $entity->name)) . ': ' . $error, 'error');
    }
  }
}

/**
 * Implements hook_features_api().
 */
function opac_users_features_api() {
  return array(
    'opac_users_mapping' => array(
      'name' => 'OPAC users mapping',
      'file' => drupal_get_path('module', 'opac_users') . '/opac_users.features.inc',
      'default_hook' => 'opac_users_features_default_mapping',
      'feature_source' => TRUE,
    ),
  );
}

/**
 * Comparison function used by theme for users fields form.
 */
function _opac_users_fields_form_cmp_weight($a, $b) {
  if ($a['weight']['#value'] == $b['weight']['#value']) {
    return 0;
  }
  return ($a['weight']['#value'] < $b['weight']['#value']) ? -1 : 1;
}

/**
 * Theme for users fields form.
 */
function theme_opac_users_fields_tabledrag($variables) {
  $form = $variables['form'];
  $region = $form['#region'];
  $weight_class = "opac-users-$region-fields-weight";

  // Extract form children in order to sort them by weight.
  $fields = array();
  foreach (element_children($form) as $field_name) {
    $fields[] = $form[$field_name];
  }
  usort($fields, '_opac_users_fields_form_cmp_weight');

  // Render each form element in rows.
  $rows = array();
  foreach ($fields as $field) {
    $row = array();
    foreach (element_children($field) as $elem_name) {
      $elem = $field[$elem_name];
      if ($elem_name == 'weight') {
        $elem['#attributes']['class'] = array($weight_class);
      }
      $row[] = drupal_render($elem);
    }
    $rows[] = array('data' => $row, 'class' => array('draggable'));
  }

  $table_id = "opac-users-$region-fields";
  // Add drag & drop capabilities to the table.
  drupal_add_tabledrag($table_id, 'order', 'sibling', $weight_class);

  // Return the rendered HTML.
  $output = theme('table', array(
    'header' => $form['#header'],
    'rows' => $rows,
    'empty' => t('No fields available'),
    'attributes' => array('id' => $table_id),
  ));
  return $output;
}

/**
 * Custom form validate handler for user_profile_form().
 */
function opac_users_user_profile_form_validate(&$form, &$form_state) {
  // We keep the plain pass before it is encrypted.
  $form_state['values']['plain_pass'] = $form_state['values']['pass'];
}

/**
 * Custom form submission handler for user_profile_form().
 */
function opac_users_user_profile_form_submit(&$form, &$form_state) {
  module_load_include('inc', 'opac_users', 'includes/opac_users.user');

  $values = $form_state['values'];
  $name = $values['name'];
  $pass = $values['plain_pass'];
  $current_pass = isset($values['current_pass']) ? $values['current_pass'] : NULL;

  // Modify ILS user.
  $auth_method = variable_get('opac_users_auth_method', OPAC_USER_AUTH_METHOD_NONE);
  if ($auth_method != OPAC_USER_AUTH_METHOD_NONE) {
    $opac_server = opac_user_get_server($form['#user']);
    if ($opac_server) {
      // Find fields that start with $opac_server followed by ':'.
      $ils_fields = array_filter(array_keys($values), function ($k) use ($opac_server) {
        return (0 === strpos($k, "$opac_server:")) ? TRUE : FALSE;
      });

      // Fill $data with ILS fields that were modified.
      $data = array();
      foreach ($ils_fields as $ils_field) {
        if ($form[$ils_field]['#default_value'] != $values[$ils_field]) {
          list(,$fieldname) = explode(':', $ils_field);
          $data[$fieldname] = $values[$ils_field];
        }
      }

      if (!empty($data)) {
        $server = opac_server_load($opac_server);
        $connector = opac_get_instance($server);
        $user_name = opac_user_get_login($form['#user']);

        // Modify ILS user.
        $result = $connector->modifyUser($user_name, $data);
        if (!$result['success']) {
          drupal_set_message(t("Modification of ILS data has failed."), 'error');
        }
        else {
          $params = array(
            'user_name' => $user_name,
            'modified_fields' => $result['modified_fields'],
          );
          drupal_mail('opac_users', 'ils_user_modified', variable_get('site_mail'),
            language_default(), $params);
          cache_clear_all('opac_user_get_ils_infos_' . $form['#user']->uid, 'cache');
        }
      }
    }
  }

  // If drupal account is the same than the ILS
  // and a new password is given we change
  // the ILS password too.
  if ($auth_method == OPAC_USER_AUTH_METHOD_DRUPAL && $pass && (!isset($current_pass) || $pass != $current_pass)) {
    module_load_include('inc', 'opac', "includes/opac.harvest");
    module_load_include('inc', 'opac_users', "includes/opac_users.user");

    // Load user account.
    global $user;
    $account = user_load($values['uid']);

    // Server name depends on user.
    $opac_server = opac_user_get_server($account);

    $server = opac_server_load($opac_server);
    if ($server) {
      $connector = opac_get_instance($server);
      $success = $connector->changePassword($name, $pass);
      if ($success != 1) {
        drupal_set_message(t('Password change failed for OPAC server @serv_name', array('@serv_name' => $server->serv_name)), 'error');
      }
      else {
        drupal_set_message(t('Password change successed for OPAC server @serv_name', array('@serv_name' => $server->serv_name)), 'status');
      }
    }
    // Reauthenticate user, so its pass is still correct against the OPAC
    // servers, but only if the user that requested the change is the user for
    // whom the password is changed (ie: not an admin).
    if ($user->name == $name) {
      opac_users_authenticate($name, $pass);
    }
  }
}

/**
 * Implements hook_mail().
 */
function opac_users_mail($key, &$message, $params) {
  switch ($key) {
    case 'ils_user_modified':
      $user_name = $params['user_name'];
      $modified_fields = $params['modified_fields'];
      $message['subject'] = t("An ILS user was modified");
      $message['body'] = array(
        t("The user @username was modified.", array('@username' => $user_name)),
        t("The following fields were modified:"),
      );
      foreach ($modified_fields as $field => $value) {
        $message['body'][] = "$field = $value";
      }
      break;
  }
}
