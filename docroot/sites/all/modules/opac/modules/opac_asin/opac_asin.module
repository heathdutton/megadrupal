<?php

/**
 * @file
 * Opac ASIN module.
 */

/**
 * Implements hook_opac_node_field_plugin_info().
 */
function opac_asin_opac_node_field_plugin_info() {
  $plugins = array(
    'asin' => array(
      'label' => 'Amazon ASIN',
      'available callback' => 'opac_asin_plugin_asin_available',
      'value callback' => 'opac_asin_plugin_asin',
    ),
  );
  return $plugins;
}

/**
 * Callback 'available' for asin plugin.
 */
function opac_asin_plugin_asin_available($server, $field) {
  if ($field['type'] == 'asin') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Callback 'value' for asin plugin.
 */
function opac_asin_plugin_asin($record, $mapping) {
  $remotefield = $mapping['mapped_with'];
  $field = array('und' => array());
  if (array_key_exists($remotefield, $record)) {
    foreach ($record[$remotefield] as $value) {
      // Extract all valid ISBNs from $value and remove dashes.
      $valid_isbn_count = 0;
      if (preg_match_all('/[0-9-]+/', $value, $matches)) {
        foreach ($matches[0] as $match) {
          $match = str_replace('-', '', $match);
          $length = strlen($match);
          if ($length == 10) {
            $asin = $match;
          }
          elseif ($length == 13) {
            $asin = amazon_ean_to_asin($match);
          }
          if (isset($asin)) {
            $field['und'][] = array('asin' => $asin);
            $valid_isbn_count++;
          }
        }
      }
      if ($valid_isbn_count == 0) {
        error_log("Invalid ISBN: $value");
      }
    }
  }
  return $field;
}
