<?php

/**
 * @file
 * Opac suggestions module.
 */

define('OPAC_SUGGESTIONS_SUBJECT_MAIL', '[site:name]: [user:name] has been submitted a new purchase suggestion.');
define('OPAC_SUGGESTIONS_BODY_MAIL', 'The following suggestion has been submitted by [user:name]:
Branch: [suggestion:branchname] ([suggestion:branchcode]),
Title: [suggestion:title],
Author: [suggestion:author],
Document type: [suggestion:doctypename] ([suggestion:doctype])

You can see the details here: http://yourils.com/suggestions/[suggestion:id]
');
define('OPAC_SUGGESTIONS_SUBJECT_USER_MAIL', 'Your suggestion has been submitted');
define('OPAC_SUGGESTIONS_BODY_USER_MAIL', 'Your suggestion has been submitted to "[site:name]"');

/**
 * Implements hook_menu().
 */
function opac_suggestions_menu() {
  $items['admin/config/opac/opac-suggestions'] = array(
    'title' => 'OPAC suggestions',
    'description' => 'Settings for OPAC suggestions module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_suggestions_settings_form'),
    'file' => 'opac_suggestions.admin.inc',
    'access arguments' => array('administer site configuration'),
    'weight' => 8,
  );
  $items['new-suggestion'] = array(
    'title' => 'New purchase suggestion',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_suggestions_add_form'),
    'access callback' => 'opac_suggestions_add_page_access',
    'file' => 'opac_suggestions.form.inc',
  );
  $items['user/%user/suggestions'] = array(
    'title callback' => 'opac_suggestion_form_title',
    'title arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_suggestions_form', 1),
    'access callback' => 'opac_suggestions_form_access',
    'access arguments' => array(1),
    'file' => 'opac_suggestions.form.inc',
  );
  $items['my-suggestions'] = array(
    'title callback' => 'opac_suggestion_form_title',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_suggestions_form'),
    'access callback' => 'opac_suggestions_form_access',
    'file' => 'opac_suggestions.form.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function opac_suggestions_permission() {
  return array(
    'create suggestions' => array(
      'title' => t('Create suggestions'),
      'description' => t('Ability to add purchase suggestions.'),
    ),
    'view own suggestions' => array(
      'title' => t('View own suggestions'),
      'description' => t('Permission to view own purchase suggestions'),
    ),
    'view any suggestions' => array(
      'title' => t('View any suggestions'),
      'description' => t('Permission to view purchase suggestions of all users'),
    ),
  );
}

/**
 * Access callback for /new-suggestion
 */
function opac_suggestions_add_page_access() {
  if (!user_access('create suggestions')) {
    return FALSE;
  }

  if (user_is_logged_in() && !isset($_SESSION['opac_user']['opac_user_id'])) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Tell if current user has access to user/%user/suggestions.
 */
function opac_suggestions_form_access($account = NULL) {
  global $user;

  // Current path is 'user/%user/suggestions and
  // %user is different from current one.
  if ($account && $user->uid != $account->uid) {
    return user_access('view any suggestions');
  }

  // Current path is 'my-suggestions' or 'user/%user/suggestions'.
  // User must be connected to OPAC server to see its own suggestions.
  if (isset($_SESSION['opac_user']['opac_user_id'])) {
    return user_access('view own suggestions');
  }

  return FALSE;
}

/**
 * Title callback for user/%user/suggestions.
 */
function opac_suggestion_form_title($account = NULL) {
  if (!$account) {
    global $user;
    $account = user_load($user->uid);
  }
  return t("Purchase suggestions of @name", array('@name' => $account->name));
}

/**
 * Sort a suggestions array.
 *
 * @param array $arr
 *   Array containing suggestions.
 *
 * @param string $key
 *   Key on which sorting.
 *
 * @param string $sort
 *   Sort desc or asc.
 *
 * @return array
 *   Sorted array.
 */
function _opac_suggestions_sort_suggestions($arr, $key, $sort) {
  uasort($arr, function ($a, $b) use ($key, $sort) {
    $cmp = strcasecmp($a[$key], $b[$key]);
    return ($sort == 'asc') ? $cmp : -$cmp;
  });
  return $arr;
}

/**
 * Create and send a notification email when a suggestion is created.
 *
 * @see drupal_mail()
 *
 * @param object $account
 *   User account which created the suggestions.
 *
 * @param array $suggestion
 *   Suggestion created.
 *
 * @param strin $email
 *   Receiver of this mail.
 */
function _opac_suggestions_mail_notify($account, $suggestion, $email, $key) {
  $params['account'] = $account;
  $params['suggestion'] = $suggestion;
  $language = user_preferred_language($account);
  $from = $key == 'opac_suggestions_notify' ? $account->mail : variable_get('site_mail', '');
  $mail = drupal_mail('opac_suggestions', $key, $email, $language, $params, $from);
}

/**
 * Implements hook_mail().
 */
function opac_suggestions_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = array(
    'user' => $params['account'],
    'suggestion' => json_decode(json_encode($params['suggestion'], FALSE)),
  );

  $subject = '';
  $body = '';
  switch ($key) {
    case "opac_suggestions_user_notify":
      $subject = variable_get('opac_suggestions_user_mail_subject', OPAC_SUGGESTIONS_SUBJECT_USER_MAIL);
      $body = variable_get('opac_suggestions_user_mail_body', OPAC_SUGGESTIONS_BODY_USER_MAIL);
      break;

    case "opac_suggestions_notify":
      $subject = variable_get('opac_suggestions_mail_subject', OPAC_SUGGESTIONS_SUBJECT_MAIL);
      $body = variable_get('opac_suggestions_mail_body', OPAC_SUGGESTIONS_BODY_MAIL);
      break;
  }

  $message['subject'] = token_replace($subject, $variables, array('language' => $language));
  $message['body'][] = token_replace($body, $variables, array('language' => $language));
}

/**
 * Get receiver of the notification email.
 *
 * Email address depends on configuration or
 * selected library in suggestion add form.
 *
 * @param string $branchcode
 *   Code of the selected library (if selected).
 *
 * @return string
 *   Email address of the receiver.
 */
function _opac_suggestion_get_email($branchcode) {
  $vid = variable_get('suggestions_branch_vocabulary', '');
  $user_address_field = variable_get('opac_suggestions_use_address_field', FALSE);
  $field_email = variable_get('opac_suggestions_address_field', '');
  $field_code = variable_get('suggestions_branch_field', '');
  $email = variable_get('opac_suggestions_email_address', '');

  // All variables are set to get email using vocabulary field.
  if ($vid && $user_address_field && $field_code && $field_email && $branchcode) {
    module_load_include('inc', 'opac', "includes/helper.taxonomy");
    $tid = _opac_taxonomy_get_term($vid, $field_code, $branchcode);
    $term = taxonomy_term_load($tid);
    if (is_object($term) && isset($term->{$field_email}) && isset($term->{$field_email}['und'][0]['value'])) {
      if (valid_email_address($term->{$field_email}['und'][0]['value'])) {
        return $term->{$field_email}['und'][0]['value'];
      }
    }
  }
  elseif (!$user_address_field && $email) {
    return $email;
  }
  return variable_get('site_mail', ini_get('sendmail_from'));
}
