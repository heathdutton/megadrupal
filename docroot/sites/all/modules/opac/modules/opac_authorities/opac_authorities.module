<?php
/**
 * @file
 * opac authorities module.
 */

/**
 * Implements hook_entity_info().
 */
function opac_authorities_entity_info() {
  $return = array(
    'opac_authority' => array(
      'label' => t('Authority'),
      'entity class' => 'OpacAuthority',
      'controller class' => 'OpacAuthorityController',
      'base table' => 'opac_authority',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'authid',
        'bundle' => 'authtype',
        'label' => 'title',
      ),
      'bundle keys' => array(
        'bundle' => 'authtype',
      ),
      'bundles' => array(),
      'load hook' => 'opac_authority_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'opac_authorities',
      'access callback' => 'opac_authority_access',
    ),
  );
  $return['opac_authority_type'] = array(
    'label' => t('Authority type'),
    'entity class' => 'OpacAuthorityType',
    'controller class' => 'OpacAuthorityTypeController',
    'base table' => 'opac_authority_type',
    'fieldable' => FALSE,
    'bundle of' => 'opac_authority',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'authtype',
      'label' => 'label',
    ),
    'module' => 'opac_authorities',
    'admin ui' => array(
      'path' => 'admin/structure/authority-types',
      'file' => 'opac_authorities.admin.inc',
      'controller class' => 'OpacAuthorityTypeUIController',
    ),
    'access callback' => 'opac_authority_type_access',
  );
  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function opac_authorities_entity_info_alter(&$entity_info) {
  foreach (opac_authority_types() as $type => $info) {
    $entity_info['opac_authority']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/authority-types/manage/%opac_authority_type',
        'real path' => 'admin/structure/authority-types/manage/' . $type,
        'bundle argument' => 4,
      ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function opac_authorities_menu() {
  $items = array();
  $items['admin/authorities'] = array(
    'title' => 'Authorities',
    'description' => 'Manage authorities.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_authorities_admin'),
    'access arguments' => array('view opac_authority entities'),
    'weight' => -9,
    'file' => 'opac_authorities.admin.inc',
  );
  $items['admin/authorities/add'] = array(
    'title' => 'Add authority',
    'page callback' => 'opac_authority_admin_add_page',
    'access arguments' => array('edit opac_authority entities'),
    'file' => 'opac_authorities.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['opac_authority/add'] = array(
    'title' => 'Add authority',
    'page callback' => 'opac_authority_admin_add_page',
    'access arguments' => array('edit opac_authority entities'),
    'file' => 'opac_authorities.admin.inc',
  );

  $auth_uri = 'opac_authority/%opac_authority';
  $auth_uri_argument_position = 1;

  $items[$auth_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('opac_authority', $auth_uri_argument_position),
    'page callback' => 'opac_authority_view',
    'page arguments' => array($auth_uri_argument_position),
    'access arguments' => array('view opac_authority entities'),
    'file' => 'opac_authorities.pages.inc',
  );

  $items[$auth_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$auth_uri . '/delete'] = array(
    'title' => 'Delete authority',
    'title callback' => 'opac_authority_label',
    'title arguments' => array($auth_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_authority_delete_form', $auth_uri_argument_position),
    'access arguments' => array('edit opac_authority entities'),
    'file' => 'opac_authorities.admin.inc',
  );

  $items[$auth_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_authority_form', $auth_uri_argument_position),
    'access arguments' => array('edit opac_authority entities'),
    'file' => 'opac_authorities.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  foreach (opac_authority_types() as $type => $info) {
    $items['opac_authority/add/' . $type] = array(
      'title' => "Add $type authority",
      'page callback' => 'opac_authority_add',
      'page arguments' => array(2),
      'access arguments' => array('edit opac_authority entities'),
      'file' => 'opac_authorities.admin.inc',
    );
  }

  $items['admin/structure/authority-types/%opac_authority_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_authority_type_form_delete_confirm', 4),
    'access arguments' => array('administer opac_authority types'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'opac_authorities.admin.inc',
  );
  $items['admin/config/opac/servers/manage/%opac_server/authority-types'] = array(
    'title' => 'Authority types',
    'description' => 'Manage authority types mapping',
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('opac_authorities_admin_authority_types_overview_form', 5),
    'file' => 'opac_authorities.mapping.inc',
    'access arguments' => array('administer opac_authority types'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/config/opac/servers/manage/%opac_server/authority-types/add'] = array(
    'title' => 'Add authority type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_authorities_server_type_edit_form', 5),
    'file' => 'opac_authorities.mapping.inc',
    'access arguments' => array('administer opac_authority types'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/opac/servers/manage/%opac_server/authority-types/%/edit'] = array(
    'title' => 'Edit authority type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_authorities_server_type_edit_form', 5, 7),
    'file' => 'opac_authorities.mapping.inc',
    'access arguments' => array('administer opac_authority types'),
  );
  $items['admin/config/opac/servers/manage/%opac_server/authority-types/%/delete'] = array(
    'title' => 'Delete authority type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'opac_authorities_server_type_delete_confirm', 5, 7,
    ),
    'file' => 'opac_authorities.mapping.inc',
    'access arguments' => array('administer opac_authority types'),
  );
  $items['admin/config/opac/servers/manage/%opac_server/authority-mapping/%'] = array(
    'title' => 'Authority mapping',
    'description' => 'OPAC authority fields mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_authorities_mapping_form', 5, 7),
    'file' => 'opac_authorities.mapping.inc',
    'access arguments' => array('administer opac_authority types'),
    'weight' => 2,
  );
  $items['admin/config/opac/server/%/authority-mapping/%/%/edit'] = array(
    'title' => 'Edit authority mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'opac_authorities_admin_server_mapping_edit_form', 4, 6, 7,
    ),
    'file' => 'opac_authorities.mapping.inc',
    'access arguments' => array('administer opac_authority types'),
  );
  $items['admin/config/opac/server/%/authority-mapping/%/%/delete'] = array(
    'title' => 'Delete mapping',
    'page callback' => 'opac_authority_mapping_delete_callback',
    'page arguments' => array(4, 6, 7),
    'file' => 'opac_authorities.mapping.inc',
    'access arguments' => array('administer opac_authority types'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Access callback for authority.
 */
function opac_authority_access($op, $entity = NULL) {
  switch ($op) {
    case 'view':
      $access = user_access('view opac_authority entities');
      break;

    case 'edit':
      $access = user_access('edit opac_authority entities');
      break;

    default:
      $access = FALSE;
  }

  return $access;
}

/**
 * Access callback for authority Type.
 */
function opac_authority_type_access($op, $entity = NULL) {
  return user_access('administer opac_authority types');
}

/**
 * Implements hook_permission().
 */
function opac_authorities_permission() {
  $permissions = array(
    'administer opac_authority types' => array(
      'title' => t('Administer authority types', array(), array('context' => 'libraries')),
      'description' => t('Allows users to configure authority types and their fields.', array(), array('context' => 'libraries')),
      'restrict access' => TRUE,
    ),
    'edit opac_authority entities' => array(
      'title' => t('Create, edit, delete authorities', array(), array('context' => 'libraries')),
      'description' => t('Allows users to manage authorities.', array(), array('context' => 'libraries')),
      'restrict access' => TRUE,
    ),
    'view opac_authority entities' => array(
      'title' => t('View authorities', array(), array('context' => 'libraries')),
      'description' => t('Allows users to view authorities.', array(), array('context' => 'libraries')),
      'restrict access' => TRUE,
    ),
  );
  return $permissions;
}

/**
 * Implements hook_theme().
 */
function opac_authorities_theme() {
  $items = array();
  $items['opac_authorities_admin_authority_types_overview_form'] = array(
    'render element' => 'form',
    'file' => 'opac_authorities.theme.inc',
  );
  $items['opac_authorities_mapping_overview'] = array(
    'variables' => array('mapping' => NULL, 'serv_id' => NULL),
    'file' => 'opac_authorities.theme.inc',
  );
  return $items;
}

/**
 * Load an opac authority .
 */
function opac_authority_load($authid, $reset = FALSE) {
  $authorities = opac_authority_load_multiple(array($authid), array(), $reset);
  return reset($authorities);
}

/**
 * Load multiple authorities based on certain conditions.
 */
function opac_authority_load_multiple($authids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('opac_authority', $authids, $conditions, $reset);
}

/**
 * Save authority.
 */
function opac_authority_save($authority) {
  entity_save('opac_authority', $authority);
}

/**
 * Delete single authority.
 */
function opac_authority_delete($authority) {
  entity_delete('opac_authority', entity_id('opac_authority', $authority));
}

/**
 * Delete multiple authorities.
 */
function opac_authority_delete_multiple($authids) {
  entity_delete_multiple('opac_authority', $authids);
}

/**
 * Load authority type.
 */
function opac_authority_type_load($authority_type) {
  return opac_authority_types($authority_type);
}

/**
 * List of authorities types.
 */
function opac_authority_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('opac_authority_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Save authority type entity.
 */
function opac_authority_type_save($authority_type) {
  entity_save('opac_authority_type', $authority_type);
}

/**
 * Delete single case type.
 */
function opac_authority_type_delete($authority_type) {
  entity_delete('opac_authority_type', entity_id('opac_authority_type', $authority_type));
}

/**
 * Delete multiple case types.
 */
function opac_authority_type_delete_multiple($authority_type_ids) {
  entity_delete_multiple('opac_authority_type', $authority_type_ids);
}

/**
 * Implements hook_field_extra_fields().
 */
function opac_authorities_field_extra_fields() {
  $return = array();
  $info = entity_get_info('opac_authority');
  foreach (array_keys($info['bundles']) as $bundle) {
    $return['opac_authority'][$bundle] = array(
      'form' => array(
        'title' => array(
          'label' => t('Title'),
          'description' => t('Authority title', array(), array('context' => 'libraries')),
          'weight' => -5,
        ),
      ),
    );
  }
  return $return;
}

/**
 * Implements hook_opac_node_field_plugin_info().
 */
function opac_authorities_opac_node_field_plugin_info() {
  $plugins = array(
    'authority_link' => array(
      'label' => t('Authority link', array(), array('context' => 'libraries')),
      'file' => 'plugins/authority_link.inc',
      'available callback' => 'opac_authorities_plugin_authority_link_available',
      'value callback' => 'opac_authorities_plugin_authority_link',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_features_api().
 */
function opac_authorities_features_api() {
  return array(
    'opac_authorities_server_type' => array(
      'name' => 'OPAC authorities server type',
      'file' => drupal_get_path('module', 'opac_authorities') . '/opac_authorities.features.inc',
      'default_hook' => 'opac_authorities_features_default_server_type',
      'feature_source' => TRUE,
    ),
    'opac_authorities_mapping' => array(
      'name' => 'OPAC authorities mapping',
      'file' => drupal_get_path('module', 'opac_authorities') . '/opac_authorities.features.inc',
      'default_hook' => 'opac_authorities_features_default_mapping',
      'feature_source' => TRUE,
    ),
  );
}

/**
 * Get all authorities.
 *
 * @return array
 *   Opac autorities keyed with node id.
 */
function opac_authorities_get_node_ids() {
  $result = db_select('opac_authority', 'r')
    ->fields('r')
    ->execute();

  $node_ids = array();
  while ($record = $result->fetchAssoc()) {
    $aid = $record['authid'];
    $sid = $record['server_id'];
    $nid = $record['server_authid'];
    $node_ids[$sid][$aid] = $nid;
  }
  return $node_ids;
}

/**
 * Get a node id for a given authority.
 *
 * @param string $serverid
 *   The server where the authority come from.
 *
 * @param string $authid
 *   The authority identifier.
 *
 * @return string
 *   The node id.
 */
function opac_authorities_get_node_id($serverid, $authid) {
  $nid = db_select('opac_authority', 'r')
    ->fields('r')
    ->condition('server_id', $serverid)
    ->condition('server_authid', $authid)
    ->execute()
    ->fetchField();

  return $nid;
}

/**
 * Implements hook_field_delete_instance().
 *
 * We must delete mapping if a field instance
 * if a field is deleted.
 */
function opac_authorities_field_delete_instance($instance) {
  if ($instance['entity_type'] == 'opac_authority') {
    $count = db_delete('opac_authority_mapping')
      ->condition('authtype', $instance['bundle'])
      ->condition('authority_field_name', $instance['field_name'])
      ->execute();

    if ($count) {
      drupal_set_message(t('@count related OPAC authority mapping have been deleted.', array('@count' => $count)));
    }
  }
}
