<?php

/**
 * @file
 * OPAC Items theme functions.
 */

/**
 * Returns HTML table for items description.
 *
 * @param array $element
 *   An associative array containing:
 *   - items: items fields to be displayed.
 *   - mapping: Items mapping for the ILS server.
 *   - nid: the node id related to the record.
 *
 * @ingroup themeable
 */
function theme_opac_items($element) {
  $data = $element['data'];
  if (!count($data['items'])) {
    return '<span>' . t('No items') . '</span>';
  }

  // Get items mapping.
  $mapping = $data['mapping'];

  // Build headers according to mapping.
  $headers = array();

  // Table theme function defines the first column as the default column used
  // for sorting (if sort column is not explicitely given).
  // We do not want the table to be sorted by default. This allow other modules
  // to provide a custom default sort order.
  // For this we need to add an hidden, empty column which will be marked as
  // the column used for sorting. This way we also hide the little arrow beside
  // the column name.
  $headers[] = array(
    'data' => 'Hidden column',
    'field' => 'hidden_column',
    'class' => array('element-invisible'),
  );

  foreach ($mapping as $values) {
    $headers[] = array(
      'data' => t($values['display_header']),
      'field' => $values['item_field'],
      'class' => array($values['item_field']),
    );
  }

  // Get sort and key on which to sort.
  $order = tablesort_get_order($headers);
  $sort = tablesort_get_sort($headers);

  // Sort data (only if explicitely requested by user).
  if ($order['sql'] != 'hidden_column') {
    $data['items'] = opac_items_sort_items($data['items'], $order['sql'], $sort);
  }

  // Create the array with rows.
  $rows = array();
  foreach ($data['items'] as $itemnumber => $item) {
    $rows[$itemnumber]['data'][] = array('data' => '', 'class' => array('element-invisible'));
    foreach ($mapping as $values) {
      $value = isset($item[$values['item_field']]) ? $item[$values['item_field']] : '';
      $rows[$itemnumber]['data'][] = array('data' => $value, 'class' => array($values['item_field']));
    }
  }

  $build = array(
    'header' => $headers,
    'rows' => $rows,
  );

  $node = node_load($element['nid']);
  $output = l(t('Back to record details'), 'node/' . $node->nid);
  $output .= theme('table', array(
    'header' => $build['header'],
    'rows' => $build['rows'],
    'attributes' => array(
      'class' => array('opac-items'),
    ),
  ));
  return $output;
}

/**
 * Returns HTML table for items description in a field.
 *
 * @param array $element
 *   An associative array containing:
 *   - items: items fields to be displayed.
 *   - mapping: Items mapping for the ILS server.
 *   - nid: the node id related to the record.
 *
 * @ingroup themeable
 */
function theme_opac_items_field($element) {
  $data = $element['data'];
  $nid = $element['nid'];
  $max_items = $element['limititems'];
  $total_items = count($data['items']);
  $hide_no_items = variable_get('opac_items_hide_no_items', FALSE);

  if (!$total_items) {
    if ($hide_no_items) {
      return 'hide_no_items';
    }
    else {
      return '<span>' . t('No items') . '</span>';
    }
  }

  // Get items mapping.
  $mapping = $data['mapping'];
  $more_message = '';
  $more_link = '';

  // Headers.
  $headers = array();
  foreach ($mapping as $values) {
    $headers[] = array(
      'data' => t($values['display_header']),
      'class' => array($values['item_field']),
    );
  }

  // Table body.
  $i = 1;
  $rows = array();
  foreach ($data['items'] as $itemnumber => $item) {
    if ($max_items && $i > $max_items) {
      $more_message = t('Only @max item(s) on @total are displayed.', array('@max' => $max_items, '@total' => $total_items), array('context' => 'libraries'));
      $more_link = l(t('View more items', array(), array('context' => 'libraries')), "node/$nid/items");
      break;
    }
    foreach ($mapping as $values) {
      $value = isset($item[$values['item_field']]) ? $item[$values['item_field']] : '';
      $rows[$itemnumber]['data'][] = array('data' => $value, 'class' => array($values['item_field']));
    }
    $i++;
  }

  $output = theme('table', array(
    'header' => $headers,
    'rows' => $rows,
    'attributes' => array(
      'class' => array('opac-items'),
    ),
  ));

  if ($more_message && $more_link) {
    $output .= "<div>$more_message $more_link</div>";
  }

  return $output;
}

/**
 * Returns HTML table for items mapping.
 *
 * @param array $variables
 *   An associative array containing:
 *   - form: items_mapping_overview_form.
 *
 * @ingroup themeable
 */
function theme_opac_items_mapping_overview_form($variables) {
  $form = $variables['form'];

  $rows = array();

  foreach (element_children($form) as $key) {
    if (isset($form[$key]['item_field'])) {
      $rule = &$form[$key];

      $row = array();
      $row[] = drupal_render($rule['item_field']);
      if (isset($rule['weight'])) {
        $rule['weight']['#attributes']['class'] = array('items-mapping-weight');
        $row[] = drupal_render($rule['weight']);
      }
      $row[] = drupal_render($rule['display_header']);
      $row[] = drupal_render($rule['vocabulary_name']);
      $row[] = drupal_render($rule['term_field']);
      $row[] = drupal_render($rule['nomatch_rule']);
      $row[] = drupal_render($rule['edit']);
      $row[] = drupal_render($rule['delete']);

      $rows[] = array('data' => $row, 'class' => array('draggable'));
    }
  }
  $header = array(t('Item field', array(), array('context' => 'libraries')));
  if (isset($rule['weight'])) {
    $header[] = t('Weight');
  }
  $header[] = t('Header');
  $header[] = t('Vocabulary');
  $header[] = t('Term field');
  $header[] = t('No match rule');
  $header[] = array('data' => t('Operations'), 'colspan' => '2');
  drupal_add_tabledrag('items', 'order', 'sibling', 'items-mapping-weight');

  return theme(
    'table',
    array(
      'header' => $header,
      'rows' => $rows,
      'empty' => t('No rule available.'),
      'attributes' => array('id' => 'items'),
    )
  ) . drupal_render_children($form);
}

/**
 * Returns HTML table for server items settings.
 *
 * @param array $variables
 *   An associative array containing:
 *   - form: items_mapping_overview_form.
 *
 * @ingroup themeable
 */
function theme_opac_items_server_settings_table($variables) {
  $element = $variables['element'];

  $rows = array();
  foreach (element_children($element) as $key) {
    $rule = &$element[$key];

    $row = array();
    $row[] = drupal_render($rule['use']);
    $row[] = drupal_render($rule['field']);
    $row[] = drupal_render($rule['operator']);
    $row[] = drupal_render($rule['value']);

    $rows[] = array('data' => $row);
  }

  $header = array(
    t('Use'),
    t('Field'),
    t('Operator'),
    t('Value'),
  );

  return theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'empty' => t('No criterion available.'),
  ));
}
