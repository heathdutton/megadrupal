<?php
/**
 * @file
 * Opac items module.
 */

/**
 * Implements hook_init().
 */
function opac_items_init() {
  drupal_add_js(drupal_get_path('module', 'opac_items') . '/opac_items.js');
  drupal_add_js(array('opac_items' => array('hide_no_items' => variable_get('opac_items_hide_no_items', 'FALSE'))), 'setting');
  drupal_add_css(drupal_get_path('module', 'opac_items') . '/opac_items.css');
}

/**
 * Title callback. Set translation context to 'libraries'.
 */
function opac_items_title_context_callback($title) {
  return t($title, array(), array('context' => 'libraries'));
}

/**
 * Implements hook_menu().
 */
function opac_items_menu() {
  $items['node/%node/items'] = array(
    'title callback' => 'opac_items_item_title',
    'title arguments' => array(1),
    'page callback' => 'opac_item_view_page',
    'page arguments' => array(1),
    'access callback' => 'opac_items_access',
    'access arguments' => array('view', 1),
  );

  // Admin can decide to show the items tab or not.
  if (variable_get('opac_items_show_tab', TRUE)) {
    $items['node/%node/items']['type'] = MENU_LOCAL_TASK;
  }
  else {
    $items['node/%node/items']['type'] = MENU_NORMAL_ITEM;
  }

  $items['opac_items/availability/%'] = array(
    'title callback' => 'opac_items_title_context_callback',
    'title arguments' => array('Items'),
    'page callback' => 'opac_items_availability_callback',
    'access callback' => TRUE,
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,

  );

  $items['opac_items/information/%/%'] = array(
    'title callback' => 'opac_items_title_context_callback',
    'title arguments' => array('Items'),
    'page callback' => 'opac_items_information_callback',
    'access callback' => TRUE,
    'page arguments' => array(2,3),
    'type' => MENU_CALLBACK,

  );
  $items['admin/config/opac/opac-items'] = array(
    'title callback' => 'opac_items_title_context_callback',
    'title arguments' => array('OPAC items'),
    'description' => 'Global settings for opac items module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_items_settings_form'),
    'file' => 'opac_items.admin.inc',
    'access arguments' => array('administer site configuration'),
    'weight' => 7,
  );
  $items['admin/config/opac/servers/manage/%/items-settings'] = array(
    'title callback' => 'opac_items_title_context_callback',
    'title arguments' => array('Items settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_items_server_settings_form', 5),
    'file' => 'opac_items.admin.inc',
    'access arguments' => array('administer site configuration'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/opac/servers/manage/%/items-mapping'] = array(
    'title callback' => 'opac_items_title_context_callback',
    'title arguments' => array('Items mapping'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_items_mapping_overview_form', 5),
    'file' => 'opac_items.admin.inc',
    'access arguments' => array('administer site configuration'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/opac/items/fields/add/%'] = array(
    'title' => 'New field',
    'description' => 'New field',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_items_admin_field_edit_form', 6),
    'file' => 'opac_items.admin.inc',
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/opac/items/fields/edit/%/%'] = array(
    'title' => 'Edit items fields',
    'description' => 'Edit items fields',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_items_admin_field_edit_form', 6, 7),
    'file' => 'opac_items.admin.inc',
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/opac/items/fields/delete/%/%'] = array(
    'title' => 'Delete mapping',
    'description' => 'Delete mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'opac_items_admin_field_delete_confirm_form',
      6,
      7,
    ),
    'file' => 'opac_items.admin.inc',
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function opac_items_permission() {
  return array(
    'view items' => array(
      'title' => t('View items informations', array(), array('context' => 'libraries')),
      'description' => t("Allowed user can view a 'Items' tab on node.", array(), array('context' => 'libraries')),
    ),
  );
}

/**
 * Implements hook_access().
 */
function opac_items_access($op, $node) {
  module_load_include('inc', 'opac', "includes/opac.db");
  global $user;
  $content_types = array_keys(opac_get_content_types());

  // The current user must have 'view items' permission
  // and the node being viewed must be an opac node type.
  if (in_array($node->type, $content_types) && user_access('view items', $user)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_theme().
 */
function opac_items_theme() {
  return array(
    'opac_items' => array(
      'arguments' => array('element' => NULL),
      'file' => 'opac_items.theme',
    ),
    'opac_items_field' => array(
      'arguments' => array('element' => NULL),
      'file' => 'opac_items.theme',
    ),
    'opac_items_mapping_overview_form' => array(
      'render element' => 'form',
      'file' => 'opac_items.theme',
    ),
    'opac_items_server_settings_table' => array(
      'render element' => 'element',
      'file' => 'opac_items.theme',
    ),
  );
}

/**
 * Sort an items array.
 *
 * @param array $arr
 *   Array containing items.
 *
 * @param string $key
 *   Key on which sorting.
 *
 * @param string $sort
 *   Sort DESC or ASC.
 *
 * @return array
 *   Sorted array.
 */
function opac_items_sort_items($arr, $key, $sort) {
  global $_opac_items_key2sort;
  $_opac_items_key2sort = $key;
  uasort($arr, "opac_items_sort_items_$sort");
  return ($arr);
}

/**
 * Sort an items array (asc).
 *
 * @param string $a
 *   value a.
 *
 * @param string $b
 *   value b.
 *
 * @return array
 *   Sorted array (asc).
 */
function opac_items_sort_items_asc($a, $b) {
  global $_opac_items_key2sort;
  return (strcasecmp($a[$_opac_items_key2sort], $b[$_opac_items_key2sort]));
}

/**
 * Sort an items array (desc).
 *
 * @param string $a
 *   value a.
 *
 * @param string $b
 *   value b.
 *
 * @return array
 *   Sorted array (desc).
 */
function opac_items_sort_items_desc($a, $b) {
  global $_opac_items_key2sort;
  return (strcasecmp($b[$_opac_items_key2sort], $a[$_opac_items_key2sort]));
}

/**
 * Build items view page.
 *
 * @param object $node
 *   The opac node for which build the items tab.
 *
 * @return string
 *   HTML output.
 */
function opac_item_view_page($node) {
  // This retrieves items informations for the given record.
  $data = opac_items_get_items($node, TRUE);

  // Call theme_opac_items.
  $output = theme('opac_items', array('data' => $data, 'nid' => $node->nid));

  return $output;
}

/**
 * Build taxonomy fields for elements mapped with a vocabulary.
 *
 * @param array $items
 *   Contains all items to be displayed.
 *
 * @return array
 *   Items modified.
 */
function opac_items_build_taxonomy(&$items) {
  module_load_include('inc', 'opac', "includes/opac.node");
  module_load_include('inc', 'opac', 'includes/helper.taxonomy');
  $mappings = opac_items_get_fields_mapping($items['serverid']);

  // Loop through all items.
  foreach ($items['items'] as $itemid => $item) {
    // Loop through mapped field ans check
    // for those having a taxonomy related to.
    foreach ($mappings as $mapping) {
      if ($mapping['vocabulary_machine_name'] != NULL) {
        $itemfield = $mapping['item_field'];
        $termfield = $mapping['term_field'];
        $vid = _opac_taxonomy_get_vid($mapping['vocabulary_machine_name']);
        // Get the term identifier that match the
        // item field value given a vocabulary and
        // term field.
        $tid = _opac_taxonomy_get_term($vid, $termfield, $item[$itemfield]);

        // If a term matched, build the link.
        if ($tid) {
          $term = taxonomy_term_load($tid);
          if ($mapping['show_as_link']) {
            $items['items'][$itemid][$itemfield] = l($term->name, "taxonomy/term/$tid");
          }
          else {
            $items['items'][$itemid][$itemfield] = check_plain($term->name);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_view().
 */
function opac_items_node_view($node, $view_mode, $langcode) {
  module_load_include('inc', 'opac', "includes/opac.db");
  $content_types = array_keys(opac_get_content_types());

  // Make sure the current node is an opac node type
  // and the view mode is '$view_mode'.
  if (in_array($node->type, $content_types)) {
    if (variable_get("opac_items_enable_field_$view_mode", FALSE)) {
      $info_markup = '<div id="items_informations_' . $node->nid . '"';
      $info_markup .= ' class="opac-items-wrapper"';

      if (variable_get('opac_items_hide_no_items', 'FALSE')) {
        $info_markup .= ' style="display:none"';
      }

      $info_markup .= '>';
      if (variable_get("opac_items_fieldset_$view_mode", 'fieldset') == 'fieldset') {
        drupal_add_library('system', 'drupal.collapse');
        $title = variable_get("opac_items_fieldset_title_$view_mode", 'Items');
        $collapsed = variable_get("opac_items_fieldset_collapsed_$view_mode", FALSE) == TRUE ? 'collapsed' : '';
        $info_markup .= '<fieldset class="collapsible ' . $collapsed . '">';
        $info_markup .= '<legend><span class="fieldset-legend">';
        $info_markup .= '<a class="fieldset-title" href="#">';
        $info_markup .= '<span class="fieldset-legend-prefix element-invisible">Masquer</span>';
        $info_markup .= t($title) . '</a><span class="summary"></span></span></legend>';
        $info_markup .= '<div class="fieldset-wrapper">';
      }
      elseif (variable_get("opac_items_fieldset_$view_mode", 'fieldset' == 'nofieldset')) {
        $title = variable_get("opac_items_title_$view_mode", 'Items');
        if ($title != '<NONE>') {
          $info_markup .= '<h3>' . t($title) . '</h3>';
        }
      }

      $info_markup .= '<div class="opac_items_information opac_items_fields">';
      $info_markup .= "<span class='node hidden'>$node->nid</span>";
      $info_markup .= "<span class='limititems hidden'>" . variable_get("opac_items_max_in_field_$view_mode", 5) . "</span>";
      $info_markup .= '<a href="#">' . t('Checking items information...', array(), array('context' => 'libraries')) . '</a>';
      $info_markup .= '</div>';

      if (variable_get("opac_items_fieldset_$view_mode", 'fieldset') == 'fieldset') {
        $info_markup .= '</div></fieldset>';
      }
      // End of #items_informations_$node->nid:
      $info_markup .= '</div>';
      $node->content['field_opac_items_info'] = array(
        '#markup' => $info_markup,
      );
    }

    $markup = '<div class="opac_items_availability opac_items_fields">';
    $markup .= "<span class='node hidden'>$node->nid</span>";
    $markup .= "<span class='limititems hidden'>" . variable_get("opac_items_max_in_field_$view_mode", 5) . "</span>";
    $markup .= '<a href="#">' . t('Waiting for availability...') . '</a>';
    $markup .= '</div>';

    $node->content['field_opac_items_avail'] = array(
      '#markup' => $markup,
    );
  }
}

/**
 * Callback function to get items availability.
 *
 * @param int $nid
 *   node identifier.
 *
 * @return string
 *   html output.
 */
function opac_items_availability_callback($nid) {
  if ($nid) {
    $counts = opac_items_get_items_counts(node_load($nid));

    // Calculate total and available items.
    $total = $counts['total'];
    $avail = $counts['avail'];

    // Here we add a field to the node being displayed in
    // search result mode. Field contains items availability.
    $data = l("$avail/$total " . format_plural($avail, "item available", "items available", array(), array('context' => 'libraries')), "node/$nid/items");
    drupal_json_output($data);
  }
}

/**
 * Callback function to get items information.
 *
 * @param int $nid
 *   node identifier.
 *
 * @return string
 *   html output.
 */
function opac_items_information_callback($nid, $limititems) {
  $output = '<span>' . t('No items information available.', array(), array('context' => 'libraries')) . '</span>';
  if ($nid) {
    $data = opac_items_get_items(node_load($nid), TRUE);

    // Call theme_opac_items.
    $output = theme('opac_items_field', array(
      'data' => $data,
      'nid' => $nid,
      'limititems' => $limititems,
    ));
  }
  drupal_json_output($output);
}

/**
 * Implements hook_field_extra_fields().
 */
function opac_items_field_extra_fields() {
  module_load_include('inc', 'opac', "includes/opac.db");
  $extra = array();
  $content_types = array_keys(opac_get_content_types());

  foreach ($content_types as $content_type) {
    $extra['node'][$content_type] = array(
      'form' => array(
        'field_opac_items_avail' => array(
          'label' => t('OPAC items availability', array(), array('context' => 'libraries')),
          'description' => 'Dynamically checks items availability',
          'weight' => 8,
        ),
        'field_opac_items_info' => array(
          'label' => t('OPAC items information', array(), array('context' => 'libraries')),
          'description' => 'Dynamically checks items information',
          'weight' => 9,
        ),
      ),
      'display' => array(
        'field_opac_items_avail' => array(
          'label' => t('OPAC items availability', array(), array('context' => 'libraries')),
          'description' => 'Dynamically checks items availability',
          'weight' => 8,
        ),
        'field_opac_items_info' => array(
          'label' => t('OPAC items information', array(), array('context' => 'libraries')),
          'description' => 'Dynamically checks items information',
          'weight' => 9,
        ),
      ),
    );
  }
  return $extra;
}

/**
 * Check if an item should be hidden.
 *
 * @param string $server_id
 *   Server identifier
 *
 * @param array $item
 *   An associative array that contains item informations.
 *   Keys are field names, values are field values.
 */
function opac_items_item_is_hidden($server_id, $item) {
  $settings = variable_get("opac_items_server_settings_$server_id");
  $hidden = FALSE;
  if ($settings) {
    foreach ($settings['criteria'] as $fieldname => $criterion) {
      if (!$criterion['use']) {
        unset ($settings['criteria'][$fieldname]);
      }
    }
    if (!empty($settings['criteria'])) {
      $and_or = $settings['and_or'];
      $hidden = ($and_or == 'and') ? TRUE : FALSE;
      foreach ($settings['criteria'] as $fieldname => $criterion) {
        if (isset($item[$fieldname])) {
          $item_value = $item[$fieldname];
          $criterion_value = $criterion['value'];
          $criterion_met = FALSE;
          switch ($criterion['operator']) {
            case 'eq':
              $criterion_met = ("$item_value" == "$criterion_value");
              break;

            case 'ne':
              $criterion_met = ("$item_value" != "$criterion_value");
              break;

            case '==':
              $criterion_met = ((0 + $item_value) == (0 + $criterion_value));
              break;

            case '!=':
              $criterion_met = ((0 + $item_value) != (0 + $criterion_value));
              break;

            case '>':
              $criterion_met = ((0 + $item_value) > (0 + $criterion_value));
              break;

            case '<':
              $criterion_met = ((0 + $item_value) < (0 + $criterion_value));
              break;

            case 'match':
              $criterion_met = preg_match($criterion_value, $item_value) ? TRUE : FALSE;
              break;

            case 'not match':
              $criterion_met = preg_match($criterion_value, $item_value) ? FALSE : TRUE;
              break;
          }
          if ($and_or == 'or' && $criterion_met) {
            $hidden = TRUE;
            break;
          }
          elseif ($and_or == 'and' && !$criterion_met) {
            $hidden = FALSE;
            break;
          }
        }
      }
    }
  }
  return $hidden;
}

/**
 * Check for items data.
 *
 * @param object $node
 *   node loaded.
 *
 * @param bool $check_hold_status
 *   TRUE if you want the function to return holdable status for current user.
 *
 * @return array
 *   Items data array or 'unsupported' string if connector does not support it.
 */
function opac_items_get_items($node, $check_hold_status = FALSE) {
  $data = &drupal_static(__FUNCTION__ . $check_hold_status);

  if (!isset($data)) {
    module_load_include('inc', 'opac_items', "includes/opac_items.db");
    module_load_include('inc', 'opac', "includes/opac.db");

    // Get server and record identifiers values.
    list($recordid, $serverid) = opac_get_record($node->nid);

    // Get items mapping (mapped fields).
    $mapping = opac_items_get_fields_mapping($serverid);
    // Prepare the fields list to request.
    $fields = array();
    foreach ($mapping as $values) {
      $fields[] = $values['item_field'];
    }

    // Create an instance of the connector.
    $server = opac_server_load($serverid);
    $connector = opac_get_instance($server);

    // Call itemsStatus method and return data.
    if (method_exists($connector, 'itemsStatus')) {
      $user_id = NULL;
      if (isset($_SESSION) && $check_hold_status && array_key_exists('opac_user', $_SESSION)) {
        $user_id = $_SESSION['opac_user']['opac_user_id'];
      }
      $items_status = $connector->itemsStatus($recordid, array_keys($connector->itemFields()), $user_id);
      $data['mapping'] = opac_items_sort_items($mapping, 'weight', 'asc');
      $data['recordid'] = $recordid;
      $data['serverid'] = $serverid;
      $data['nid'] = $node->nid;

      // Format dates.
      $data['items'] = array();
      $total = 0;
      $avail = 0;
      foreach ($items_status['items'] as $itemid => $item) {
        if (!opac_items_item_is_hidden($serverid, $item)) {
          if (isset($item['date_due']) && $item['date_due'] != '') {
            $item['date_due'] = format_date($item['date_due'], variable_get('opac_date_type'));
          }
          $data['items'][$itemid] = $item;
          if ($item['avail']) {
            $avail++;
          }
          $total++;
        }
      }
      $data['total'] = $total;
      $data['avail'] = $avail;

      // Tranform fields which are linked to a vocabulary.
      opac_items_build_taxonomy($data);

      // Others modules can add columns in the table.
      drupal_alter('opac_items_data', $data);
    }
    else {
      // This is for connectors that doesn't allows items checking.
      $data = 'unsupported';
    }
  }
  return $data;
}

/**
 * Return the number of items and the number of available items.
 */
function opac_items_get_items_counts($node) {
  $data = &drupal_static(__FUNCTION__);

  if (!isset($data)) {
    module_load_include('inc', 'opac', "includes/opac.db");

    // Get server and record identifiers values.
    list($recordid, $serverid) = opac_get_record($node->nid);
    // Create an instance of the connector.
    $server = opac_server_load($serverid);
    $connector = opac_get_instance($server);

    $items_status = $connector->itemsStatus($recordid, array_keys($connector->itemFields()));
    $total = 0;
    $avail = 0;
    foreach ($items_status['items'] as $itemid => $item) {
      if (!opac_items_item_is_hidden($serverid, $item)) {
        if ($item['avail']) {
          $avail++;
        }
        $total++;
      }
    }
    $data['total'] = $total;
    $data['avail'] = $avail;
  }

  return $data;
}

/**
 * Check for an item tab title.
 *
 * Item title contains the total number of items and
 * the number that are available.
 *
 * @param object $node
 *   The opac node for which checking items.
 *
 * @return string
 *   The title.
 */
function opac_items_item_title($node) {
  // Call opac_items_get_items_counts to retrieve information for
  // calculate the availability.
  $counts = opac_items_get_items_counts($node);

  $output = '';
  if (variable_get('opac_items_show_tab', FALSE)) {
    // Return total items and availability.
    $total = $counts['total'];
    $avail = $counts['avail'];
    $output = t(
      'Items (@avail/@total)',
      array('@avail' => $avail, '@total' => $total),
      array('context' => 'libraries'));
  }
  else {
    $output = $node->title;
  }
  return $output;
}

/**
 * Implements hook_features_api().
 */
function opac_items_features_api() {
  return array(
    'opac_items_mapping' => array(
      'name' => 'OPAC items mapping',
      'file' => drupal_get_path('module', 'opac_items') . '/opac_items.features.inc',
      'default_hook' => 'opac_items_features_default_mapping',
      'feature_source' => TRUE,
    ),
  );
}

/**
 * Implements hook_opac_items_data_alter().
 */
function opac_items_opac_items_data_alter(&$data) {
  if (!variable_get('opac_items_hide_availability', FALSE)) {
    $data['mapping'][] = array(
      'item_field' => 'avail',
      'display_header' => 'Available?',
      'weight' => '40',
    );
    foreach ($data['items'] as $itemnumber => $item) {
      $avail = $item['avail'] == 1 ? t('Yes') : t('No');
      $data['items'][$itemnumber]['avail'] = $avail;
    }
  }
}
