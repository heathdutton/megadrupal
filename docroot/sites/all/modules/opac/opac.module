<?php

/**
 * @file
 * Opac module.
 */

/**
 * Implements hook_entity_info().
 */
function opac_entity_info() {
  return array(
    'opac_server' => array(
      'label' => t('OPAC Server'),
      'entity class' => 'OpacServer',
      'controller class' => 'OpacServerController',
      'base table' => 'opac_servers',
      'exportable' => FALSE,
      'load hook' => 'opac_server_load',
      'entity keys' => array(
        'id' => 'serv_id',
        'label' => 'serv_name',
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'access callback' => 'opac_server_access',
      'module' => 'opac',
      'admin ui' => array(
        'path' => 'admin/config/opac/servers',
        'file' => 'opac.admin.inc',
      ),
    ),
  );
}

/**
 * Return TRUE if user have rights to manage opac servers.
 */
function opac_server_access($op, $opac_server, $account = NULL) {
  return user_access('manage opac servers', $account);
}

/**
 * Fetch a opac server object.
 *
 * @param string $serv_id
 *   Integer specifying the server id.
 *
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return object
 *   A fully-loaded $server object or FALSE if it cannot be loaded.
 *
 * @see opac_server_load_multiple()
 */
function opac_server_load($serv_id, $reset = FALSE) {
  $server = opac_server_load_multiple(array($serv_id), array(), $reset);
  return reset($server);
}

/**
 * Load multiple opac server based on certain conditions.
 *
 * @param array $serv_ids
 *   An array of server IDs.
 *
 * @param array $conditions
 *   An array of conditions to match against the {opac_servers} table.
 *
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return array
 *   An array of opac server objects.
 *
 * @see entity_load()
 * @see opac_server_load()
 */
function opac_server_load_multiple($serv_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('opac_server', $serv_ids, $conditions, $reset);
}

/**
 * Implements hook_menu().
 */
function opac_menu() {
  // Configuration block for opac.
  $items['admin/config/opac'] = array(
    'title' => 'OPAC',
    'description' => 'Configure opac module.',
    'position' => 'left',
    'weight' => -25,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  // General settings.
  $items['admin/config/opac/settings'] = array(
    'title' => 'General Settings',
    'description' => 'Configure global settings for OPAC module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_admin_form'),
    'file' => 'opac.admin.inc',
    'access arguments' => array('administer site configuration'),
    'weight' => -2,
  );
  $items['admin/config/opac/settings/overall'] = array(
    'title' => 'Overall settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  // Opac servers.
  $items['admin/config/opac/servers/manage/%/view'] = array(
    'title' => 'View',
    'description' => 'View server details.',
    'page callback' => 'opac_server_view',
    'page arguments' => array(5),
    'access arguments' => array('manage opac servers'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'opac.admin.inc',
  );
  // Opac content types.
  $items['admin/config/opac/servers/manage/%opac_server/content-types'] = array(
    'title' => 'Content types',
    'description' => 'OPAC server content types overview',
    'page callback' => array('drupal_get_form'),
    'page arguments' => array('opac_admin_content_types_overview_form', 5),
    'file' => 'opac.admin.content-types.inc',
    'access arguments' => array('manage opac servers'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/config/opac/servers/manage/%opac_server/content-types/add'] = array(
    'title' => 'Add content type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_content_type_edit_form', 5),
    'file' => 'opac.admin.content-types.inc',
    'access arguments' => array('manage opac servers'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/opac/servers/manage/%opac_server/content-types/%/edit'] = array(
    'title' => 'Edit content type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_content_type_edit_form', 5, 7),
    'file' => 'opac.admin.content-types.inc',
    'access arguments' => array('manage opac servers'),
  );
  $items['admin/config/opac/servers/manage/%opac_server/content-types/%/delete'] = array(
    'title' => 'Delete content type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_content_type_delete_confirm', 5, 7),
    'file' => 'opac.admin.content-types.inc',
    'access arguments' => array('manage opac servers'),
  );
  // Opac mapping.
  $items['admin/config/opac/servers/manage/%opac_server/biblio-mapping/%'] = array(
    'title' => 'Biblio mapping',
    'description' => 'OPAC server fields mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_admin_server_mapping_form', 5, 7),
    'file' => 'opac.admin.inc',
    'access arguments' => array('manage opac servers'),
    'weight' => 2,
  );
  $items['admin/config/opac/server/%/mapping/%/%/edit'] = array(
    'title' => 'Mapping',
    'description' => 'OPAC server fields mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_admin_server_mapping_edit_form', 4, 6, 7),
    'file' => 'opac.admin.inc',
    'access arguments' => array('manage opac servers'),
  );
  $items['admin/config/opac/server/%/mapping/%/%/delete'] = array(
    'title' => 'Delete mapping',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('opac_mapping_delete_confirm', 4, 6, 7),
    'file' => 'opac.admin.inc',
    'access arguments' => array('manage opac servers'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function opac_permission() {
  $permissions = array(
    'manage opac servers' => array(
      'title' => t('Manage OPAC servers'),
      'description' => t('View, create, delete, enable and disable OPAC servers.'),
    ),
  );
  return $permissions;
}

/**
 * Implements hook_theme().
 */
function opac_theme() {
  $items = array();
  $items['opac_mapping_overview'] = array(
    'variables' => array('mapping' => NULL, 'serv_id' => NULL),
    'path' => drupal_get_path('module', 'opac') . '/theme',
    'file' => 'theme.inc',
  );
  $items['opac_content_types_overview'] = array(
    'variables' => array('content_types' => NULL),
    'path' => drupal_get_path('module', 'opac') . '/theme',
    'file' => 'theme.inc',
  );
  $items['opac_admin_content_types_overview_form'] = array(
    'render element' => 'form',
    'path' => drupal_get_path('module', 'opac') . '/theme',
    'file' => 'theme.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function opac_help($path, $arg) {
  switch ($path) {
    case 'admin/help#opac':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The opac module enables libraries to integrate their catalog into Drupal allowing importing records, make advanced searches with faceted results, circulation task etc â€¦ This module is intended to work with any ILS by using connectors. Everyone can make its own by creating a php file. For more information, have a look to <a href="@doc">current documentation</a>.', array('@doc' => 'http://drupac.biblibre.com/drupal-opac')) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_options_list().
 */
function opac_options_list($field, $instance, $entity_type, $entity) {
  $function = !empty($field['settings']['options_list_callback']) ? $field['settings']['options_list_callback'] : 'opac_server_reference_allowed_values';
  return $function($field);
}

/**
 * Return list of allowed values for opac_server_reference fields.
 */
function opac_server_reference_allowed_values($field) {
  $options = array();

  $servers = opac_server_load_multiple(FALSE, array('serv_enabled' => 1));
  foreach ($servers as $server_name => $server) {
    $options[$server_name] = $server->serv_name;
  }

  return $options;
}

/**
 * Implements hook_field_info().
 */
function opac_field_info() {
  return array(
    'opac_server_reference' => array(
      'label' => t('Opac server reference'),
      'description' => t('Opac server reference'),
      'settings' => array(
        'allowed_values_function' => 'opac_server_reference_allowed_values',
      ),
      'default_widget' => 'options_select',
      'default_formatter' => 'list_default',
    ),
  );
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function opac_field_formatter_info_alter(&$info) {
  $info['list_default']['field types'][] = 'opac_server_reference';
}

/**
 * Implements hook_field_widget_info_alter().
 */
function opac_field_widget_info_alter(&$info) {
  $info['options_select']['field types'][] = 'opac_server_reference';
}

/**
 * Implements hook_field_is_empty().
 */
function opac_field_is_empty($item, $field) {
  if (!is_array($item) || empty($item['value'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_feeds_processor_targets_alter().
 */
function opac_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  foreach (field_info_instances($entity_type, $bundle_name) as $name => $instance) {
    $info = field_info_field($name);
    if ($info['type'] == 'opac_server_reference') {
      $targets[$name] = array(
        'name' => check_plain($instance['label']),
        'callback' => 'opac_server_reference_feeds_set_target',
        'description' => t('The @label field of the node.', array('@label' => $instance['label'])),
      );
    }
  }
}

/**
 * Feeds callback for mapping opac_server_reference fields.
 */
function opac_server_reference_feeds_set_target($source, $entity, $target, $value) {
  if (empty($value)) {
    return;
  }

  // Cache this so it's loaded only one time per import.
  $allowed_values = drupal_static(__FUNCTION__ . '_allowed_values');
  if (!isset($allowed_values)) {
    $allowed_values = opac_server_reference_allowed_values(NULL);
  }

  // Force field to contain only one value, whatever its cardinality is.
  if (is_array($value)) {
    $value = array_shift($value);
  }

  if (is_object($value) && ($value instanceof FeedsElement)) {
    $value = $value->getValue();
  }

  $field = array('und' => array());
  if (is_scalar($value) && array_key_exists($value, $allowed_values)) {
    $field['und'][0]['value'] = $value;
  }

  $entity->$target = $field;
}

/**
 * Implements hook_opac_node_field_plugin_info().
 */
function opac_opac_node_field_plugin_info() {
  $plugins = array(
    'taxonomy' => array(
      'label' => t('Taxonomy'),
      'file' => 'plugins/taxonomy.inc',
      'available callback' => 'opac_plugin_taxonomy_available',
      'value callback' => 'opac_plugin_taxonomy',
      'form callback' => 'opac_plugin_taxonomy_form',
    ),
    'url' => array(
      'label' => t('Url'),
      'file' => 'plugins/url.inc',
      'available callback' => 'opac_plugin_url_available',
      'value callback' => 'opac_plugin_url',
      'form callback' => 'opac_plugin_url_form',
    ),
    'integer' => array(
      'label' => t('Integer'),
      'file' => 'plugins/integer.inc',
      'available callback' => 'opac_plugin_integer_available',
      'value callback' => 'opac_plugin_integer',
    ),
  );

  return $plugins;
}

/**
 * Implements hook_features_api().
 */
function opac_features_api() {
  return array(
    'opac_server' => array(
      'name' => 'OPAC server',
      'file' => drupal_get_path('module', 'opac') . '/opac.features.inc',
      'default_hook' => 'opac_features_default_opac_server',
      'feature_source' => TRUE,
    ),
    'opac_content_type' => array(
      'name' => 'OPAC content type',
      'file' => drupal_get_path('module', 'opac') . '/opac.features.inc',
      'default_hook' => 'opac_features_default_opac_content_type',
      'feature_source' => TRUE,
    ),
    'opac_mapping' => array(
      'name' => 'OPAC mapping (biblio)',
      'file' => drupal_get_path('module', 'opac') . '/opac.features.inc',
      'default_hook' => 'opac_features_default_opac_mapping',
      'feature_source' => TRUE,
    ),
  );
}

/**
 * Implements hook_system_info_alter().
 *
 * Set modules as required if they provide an opac connector which is
 * currently used by a server.
 */
function opac_system_info_alter(&$info, $file, $type) {
  if ($type == 'module' && module_hook($file->name, 'opac_connectors')) {
    $connectors = module_invoke($file->name, 'opac_connectors');
    $ids = array();
    foreach ($connectors as $c) {
      $ids[] = $c['id'];
    }
    $query = new EntityFieldQuery();
    $result = $query
      ->entityCondition('entity_type', 'opac_server')
      ->propertyCondition('serv_connector', $ids)
      ->execute();
    if (!empty($result['opac_server'])) {
      $info['required'] = TRUE;
      $info['explanation'] = t('Connector(s) in use - see !link', array('!link' => l(t('Servers list'), 'admin/config/opac/servers')));
    }
  }
}

/**
 * Implements hook_field_delete_instance().
 *
 * We must delete mapping if a field instance
 * is deleted.
 */
function opac_field_delete_instance($instance) {
  if ($instance['entity_type'] == 'node') {
    $count = db_delete('opac_fields_mapping')
      ->condition('content_type', $instance['bundle'])
      ->condition('node_field_name', $instance['field_name'])
      ->execute();

    if ($count) {
      drupal_set_message(t('@count related OPAC mapping have been deleted.', array('@count' => $count)));
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function opac_node_delete($node) {
  module_load_include('inc', 'opac', "includes/opac.db");
  opac_delete_record($node->nid);
}

/**
 * Get all available connectors.
 *
 * @return array
 *   An array with available connectors.
 */
function opac_available_connectors() {
  $connectors = array();

  // Allow external modules to supply connectors.
  $connectors = module_invoke_all('opac_connectors');

  // Allow external modules to alter connectors.
  drupal_alter('opac_connectors', $connectors);

  return $connectors;
}

/**
 * Create an instance of a connector.
 *
 * @param array $server
 *   ILS server values.
 *
 * @return array
 *   An array with connector infos.
 */
function opac_get_instance($server) {
  $connector = NULL;

  if ($server) {
    // Get the connector class and create an instance.
    $class = $server->serv_connector;
    $connector = new $class();

    // Set the connector host property of the server.
    $connector->host = $server->serv_host;
  }

  return $connector;
}
