<?php

/**
 * @file
 * Contains class iDEALTestiDEALVersion2PaymentMethodControllerWebTestCase.
 */

/**
 * Tests iDEALPaymentMethodController functionality.
 */
class iDEALTestiDEALVersion2PaymentMethodControllerWebTestCase extends PaymentWebTestCase {

  static function getInfo() {
    return array(
      'description' => '',
      'name' => 'iDEALVersion2PaymentMethodController functionality',
      'group' => 'iDEAL',
      'dependencies' => array('ideal_test'),
    );
  }

  function setUp(array $modules = array()) {
    parent::setUp($modules + array('ideal_test'));
  }

  /**
   * Test the token and token code functionality.
   */
  function testEncryption() {
    $dir = drupal_get_path('module', 'ideal_test') . '/encryption/';
  	$payment_method = $this->paymentMethodCreate(2, payment_method_controller_load('iDEALVersion2PaymentMethodController'));
  	$payment_method->controller_data['merchant_private_key_path'] = $dir . 'ideal_merchant_private_key_v2.pem';
  	$payment_method->controller_data['merchant_private_key_password'] = 'BunniesHaveFloppyEars';
  	$payment_method->controller_data['acquirer_public_certificate_path'] = $dir . 'ideal_merchant_public_certificate_v2.cer';
  	$values = array('foo');
    $token_code = 'VTEuP5LJJj2oDUhrY+qtYeq2M4psIq62ubxQ34X+w8E8Maq5SP40XAPESmU1FpUQfLXrvicHxQxAjcNIB6jdXFg9xT1CpA3X9//qFizilfsU7F3Xzam47yMraxoVp840g16Ycd1ZwZ8/8SrB0IQZRq7yEfWS8o7cTWW5WDnFs0g=';

    // Test iDEALVersion2PaymentMethodController::tokenCode().
    $this->assertEqual($payment_method->controller->tokenCode($values, $payment_method->controller->merchantPrivateKey($payment_method)), $token_code, 'iDEALVersion2PaymentMethodController::tokenCode() creates a valid token code from a private key.');

    // Test iDEALVersion2PaymentMethodController::verifyTokenCode().
  	try {
  	  $payment_method->controller->verifyTokenCode($payment_method, $values, $token_code);
  	  $verified = TRUE;
  	}
  	catch (PaymentException $e) {
  	  $verified = FALSE;
  	}
  	$this->assertTrue($verified, 'iDEALVersion2PaymentMethodController::verifyTokenCode() validates a valid token code.');
  	try {
  	  $payment_method->controller->verifyTokenCode($payment_method, $values, 'ThisTokenCodeIsNotValidAtAllYouKnow');
  	  $verified = TRUE;
  	}
  	catch (PaymentException $e) {
  	  $verified = FALSE;
  	}
  	$this->assertFalse($verified, 'iDEALVersion2PaymentMethodController::verifyTokenCode() invalidates a invalid token code.');

	  // Test a private key of an incorrect length.
  	$payment_method->controller_data['merchant_private_key_path'] = $dir . 'ideal_merchant_private_key_v3.pem';
	  try {
      $payment_method->controller->merchantPrivateKey($payment_method);
  	  $valid = TRUE;
    }
    catch (PaymentException $e) {
  	  $valid = FALSE;
    }
  	$this->assertFalse($valid);
  }
}