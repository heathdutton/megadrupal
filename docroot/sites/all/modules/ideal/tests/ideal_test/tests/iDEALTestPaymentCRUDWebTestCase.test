<?php

/**
 * @file
 * Contains class iDEALTestPaymentCRUDWebTestCase.
 */

/**
 * Tests Payment CRUD functionality.
 */
class iDEALTestPaymentCRUDWebTestCase extends PaymentWebTestCase {

  static function getInfo() {
    return array(
      'description' => '',
      'name' => 'Payment CRUD functionality',
      'group' => 'iDEAL',
      'dependencies' => array('ideal_test'),
    );
  }

  function setUp(array $modules = array()) {
    parent::setUp($modules + array('ideal_test'));
  }

  /**
   * Count the payment methods that match have specific controller data.
   */
  function CRUDPaymentCount(Payment $payment) {
    $query = db_select('ideal_payment');
    foreach ($payment->method_data as $key => $value) {
      $query->condition($key, $value);
    }

    return $query->countQuery()->execute()->fetchField();
  }

  /**
   * Test CRUD functionality.
   */
  function testCRUD() {
    $payment_method = $this->paymentMethodCreate(2, payment_method_controller_load('iDEALPaymentMethodController'));
    entity_save('payment_method', $payment_method);
    $payment = $this->paymentCreate(2, $payment_method);
    entity_save('payment', $payment);

    // Test inserting a payment.
    $payment->method_data = array(
      'consumer_account_number' => 'foo',
      'consumer_city' => 'bar',
      'consumer_name' => 'baz',
      'entrance_code' => 'qux',
      'issuer_authentication_url' => 'foobar',
    );
    entity_save('payment', $payment);
    $pid = $payment->pid;
    $this->assertTrue($this->CRUDPaymentCount($payment), "A new iDEALPaymentMethodController payment's method data is inserted correctly.");

    // Test loading a payment method.
    $payment_loaded = entity_load_single('payment', $pid);
    $this->assertFalse(array_diff_assoc($payment->method_data, $payment_loaded->method_data), "An iDEALPaymentMethodController payment's method data is loaded correctly.");

    // Test updating a payment method.
    $payment->method_data = array(
      'consumer_account_number' => 'bar',
      'consumer_city' => 'baz',
      'consumer_name' => 'qyx',
      'entrance_code' => 'foobar',
      'issuer_authentication_url' => 'foo',
    );
    entity_save('payment', $payment);
    $this->assertTrue($this->CRUDPaymentCount($payment), "An iDEALPaymentMethodController payment's method data is updated correctly.");

    // Test deleting a payment method.
    entity_delete('payment', $pid);
    $count = db_query("SELECT COUNT(1) FROM {ideal_payment} WHERE pid = :pid", array(
      ':pid' => $pid,
    ))->fetchField();
    $this->assertFalse($count, "An iDEALPaymentMethodController payment's method data is deleted when the payment is deleted.");
  }
}