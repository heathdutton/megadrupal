<?php

/**
 * @file
 * Contains class iDEALTestiDEALPaymentMethodControllerWebTestCase.
 */

/**
 * Tests iDEALPaymentMethodController functionality.
 */
class iDEALTestiDEALPaymentMethodControllerWebTestCase extends PaymentWebTestCase {

  static function getInfo() {
    return array(
      'description' => '',
      'name' => 'iDEALPaymentMethodController functionality',
      'group' => 'iDEAL',
      'dependencies' => array('ideal_test'),
    );
  }

  function setUp(array $modules = array()) {
    parent::setUp($modules + array('ideal_test'));
  }

  /**
   * Count the payment methods that match have specific controller data.
   */
  function CRUDPaymentMethodCount(PaymentMethod $payment_method) {
    $query = db_select('ideal_payment_method');
    foreach ($payment_method->controller_data as $key => $value) {
      $query->condition($key, $value);
    }

    return $query->countQuery()->execute()->fetchField();
  }

  /**
   * Test CRUD functionality.
   */
  function testCRUD() {
    $payment_method = new PaymentMethod(array(
      'controller' => payment_method_controller_load('iDEALPaymentMethodController'),
      'controller_data' => array(
        'expiration_period' => 300,
        'merchant_id' => 'foo',
        'merchant_sub_id' => 'bar',
        'merchant_private_key_path' => 'baz',
        'merchant_private_key_password' => 'qux',
        'merchant_public_certificate_path' => 'foobar',
        'acquirer_url' => 'barfoo',
        'acquirer_public_certificate_path' => 'barbaz',
      ),
    ));
    entity_save('payment_method', $payment_method);
    $pmid = $payment_method->pmid;
    $this->assertTrue($this->CRUDPaymentMethodCount($payment_method), "A new iDEALPaymentMethodController payment method's controller data is inserted correctly.");

    // Test loading a payment method.
    $payment_method_loaded = entity_load_single('payment_method', $pmid);
    $this->assertFalse(array_diff_assoc($payment_method->controller_data, $payment_method_loaded->controller_data), "An iDEALPaymentMethodController payment method's controller data is loaded correctly.");

    // Test updating a payment method.
    $payment_method->controller_data = array(
        'expiration_period' => 900,
      'merchant_id' => 'bar',
      'merchant_sub_id' => 'baz',
      'merchant_private_key_path' => 'qux',
      'merchant_private_key_password' => 'foobar',
      'merchant_public_certificate_path' => 'barfoo',
      'acquirer_url' => 'barbaz',
      'acquirer_public_certificate_path' => 'foo',
    );
    entity_save('payment_method', $payment_method);
    $this->assertTrue($this->CRUDPaymentMethodCount($payment_method), "An iDEALPaymentMethodController payment method's controller data is updated correctly.");

    // Test deleting a payment method.
    entity_delete('payment_method', $pmid);
    $count = db_query("SELECT COUNT(1) FROM {ideal_payment_method} WHERE pmid = :pmid", array(
      ':pmid' => $pmid,
    ))->fetchField();
    $this->assertFalse($count, "An iDEALPaymentMethodController payment method's controller data is deleted when the payment method is deleted.");
  }

  /**
   * Test
   * iDEALPaymentMethodController::payment_method_configuration_form_elements_callback.
   */
  function testPaymentMethodFormCallback() {
    $account = $this->drupalCreateUser(array('payment.payment_method.create.iDEALPaymentMethodController'));
    $this->drupalLogin($account);
    $dir = drupal_get_path('module', 'ideal_test') . '/encryption/';
    $controller_data = array(
      'expiration_period' => 300,
      'merchant_id' => 'bar',
      'merchant_sub_id' => 1,
      'merchant_private_key_path' => $dir . 'ideal_merchant_private_key_v2.pem',
      'merchant_private_key_password' => 'BunniesHaveFloppyEars',
      'merchant_public_certificate_path' => $dir . 'ideal_merchant_public_certificate_v2.cer',
      'acquirer_url' => 'http://example.com',
      'acquirer_public_certificate_path' => $dir . 'ideal_acquirer_public_certificate_v2.cer'
    );
    $form_controller_data = array(
      'title_specific' => 'Foo',
      'name' => 'foo',
      'controller_form[expiration_period]' => '300',
      'controller_form[merchant][merchant_id]' => 'bar',
      'controller_form[merchant][sub_id]' => '1',
      'controller_form[merchant][private_key_path]' => $dir . 'ideal_merchant_private_key_v2.pem',
      'controller_form[merchant][private_key_password]' => 'BunniesHaveFloppyEars',
      'controller_form[merchant][public_certificate_path]' => $dir . 'ideal_merchant_public_certificate_v2.cer',
      'controller_form[acquirer][url]' => 'http://example.com',
      'controller_form[acquirer][public_certificate_path]' => $dir . 'ideal_acquirer_public_certificate_v2.cer'
    );

    // Test a valid payment method.
    $this->drupalPost('admin/config/services/payment/method/add/iDEALPaymentMethodController', $form_controller_data, t('Save'));
    $payment_method = entity_load_single('payment_method', 1);
    $this->assertTrue(!($payment_method instanceof PaymentMethodUnavailable) && !array_diff_assoc($controller_data, $payment_method->controller_data), "An iDEALPaymentMethodController payment method's controller data is correctly saved by the payment method form.");

    // Test a completely invalid payment method.
    $this->drupalPost('admin/config/services/payment/method/add/iDEALPaymentMethodController', array_merge($form_controller_data, array(
      'controller_form[merchant][merchant_id]' => 'a1!',
      'controller_form[merchant][sub_id]' => 'a1!',
      'controller_form[merchant][private_key_path]' => $dir . 'merchant_private_key.pe',
      'controller_form[merchant][private_key_password]' => 'BunniesHaveFloppyEars',
      'controller_form[merchant][public_certificate_path]' => $dir . 'merchant_public_certificate.ce',
      'controller_form[acquirer][url]' => 'httpexamplecom',
      'controller_form[acquirer][public_certificate_path]' => $dir . 'acquirer_public_certificate.ce'
    )), t('Save'));
    $this->assertFieldByXPath('//input[@id="edit-controller-form-merchant-merchant-id" and contains(@class, "error")]', NULL, 'A non-alphanumeric merchant ID throws a validation error.');
    $this->assertFieldByXPath('//input[@id="edit-controller-form-merchant-sub-id" and contains(@class, "error")]', NULL, 'A non-numeric merchant sub ID throws a validation error.');
    $this->assertFieldByXPath('//input[@id="edit-controller-form-merchant-private-key-path" and contains(@class, "error")]', NULL, 'A non-existing merchant private key path throws a validation error.');
    $this->assertFieldByXPath('//input[@id="edit-controller-form-merchant-public-certificate-path" and contains(@class, "error")]', NULL, 'A non-existing merchant public certificate throws a validation error.');
    $this->assertFieldByXPath('//input[@id="edit-controller-form-acquirer-url" and contains(@class, "error")]', NULL, 'An invalid iDEAL server URL throws a validation error.');
    $this->assertFieldByXPath('//input[@id="edit-controller-form-acquirer-public-certificate-path" and contains(@class, "error")]', NULL, 'A non-existing acquirer public certificate throws a validation error.');

    // Test specific encryption invalidation.
    $this->drupalPost('admin/config/services/payment/method/add/iDEALPaymentMethodController', array_merge($form_controller_data, array(
      'controller_form[merchant][private_key_password]' => 'MyBunnyHasOneFloppyEar',
      'controller_form[merchant][public_certificate_path]' => $dir . 'ideal_merchant_public_certificate_v2.cer',
      'controller_form[acquirer][public_certificate_path]' => $dir . 'ideal_merchant_public_certificate_v2.cer',
    )), t('Save'));
    $this->assertFieldByXPath('//input[@id="edit-controller-form-merchant-private-key-path" and contains(@class, "error")]', NULL, 'An invalid merchant private key password throws a validation error.');
    $this->assertFieldByXPath('//input[@id="edit-controller-form-merchant-public-certificate-path" and contains(@class, "error")]', NULL, 'An identical merchant public certificate and acquirer public certificate throw a validation error.');
    $this->assertFieldByXPath('//input[@id="edit-controller-form-acquirer-public-certificate-path" and contains(@class, "error")]', NULL, 'An identical acquirer public certificate and merchant public certificate throw a validation error.');
    $this->drupalPost('admin/config/services/payment/method/add/iDEALPaymentMethodController', array_merge($form_controller_data, array(
      'controller_form[merchant][public_certificate_path]' => $dir . 'ideal_acquirer_public_certificate_v2.cer',
      'controller_form[acquirer][public_certificate_path]' => $dir . 'ideal_merchant_public_certificate_v2.cer',
    )), t('Save'));
    $this->assertFieldByXPath('//input[@id="edit-controller-form-merchant-private-key-path" and contains(@class, "error")]', NULL, 'A merchant private key and merchant public certificate that are no pair throw a validation error.');
    $this->assertFieldByXPath('//input[@id="edit-controller-form-merchant-public-certificate-path" and contains(@class, "error")]', NULL, 'A merchant public certificate and merchant private key that are no pair throw a validation error.');
  }

  /**
   * Test iDEALPaymentMethodController::publicKeyIdentifier.
   */
  function testEncryption() {
    $dir = drupal_get_path('module', 'ideal_test') . '/encryption/';
	  $payment_method = $this->paymentMethodCreate(2, payment_method_controller_load('iDEALVersion2PaymentMethodController'));

	  // Test a valid public certificate.
	  $payment_method->controller_data['merchant_public_certificate_path'] = $dir . 'ideal_merchant_public_certificate_v2.cer';
    $this->assertEqual($payment_method->controller->publicKeyIdentifier($payment_method->controller->publicCertificate($payment_method, 'merchant')), '2f6e027c0e999c5a9584113a269bc40cefba89a7', 'iDEALPaymentMethodController::publicKeyIdentifier() creates a valid identifier from a public certificate.');

	  // Test an invalid public certificate.
	  $payment_method->controller_data['merchant_public_certificate_path'] = $dir . 'ideal_merchant_private_key_v2.pem';
    $exception = FALSE;
    try {
      iDEALPaymentMethodController::publicKeyIdentifier($payment_method->controller->publicCertificate($payment_method, 'merchant'));
    }
    catch (PaymentException $e) {
      $exception = TRUE;
    }
    $this->assertTRUE($exception, 'iDEALPaymentMethodController::publicKeyIdentifier() throws an exception for a file that does not contain a public certificate.');
  }

  /**
   * Tests alterRequest().
   */
  function testAlterRequest() {
    $controller = new iDEALPaymentMethodController();
    $payment_method = $this->paymentMethodCreate(1, $controller);
    $controller->alterRequest($controller::REQUEST_STATUS, new DOMDocument(), $payment_method);
    $this->assertTrue(variable_get('ideal_test_ideal_request_alter'));
  }

  /**
   * Tests alterResponse().
   */
  function testAlterResponse() {
    $controller = new iDEALPaymentMethodController();
    $payment_method = $this->paymentMethodCreate(1, $controller);
    $controller->alterResponse($controller::RESPONSE_STATUS, new DOMDocument(), $payment_method);
    $this->assertTrue(variable_get('ideal_test_ideal_response_alter'));
  }
}