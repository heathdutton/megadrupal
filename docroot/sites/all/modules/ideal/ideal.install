<?php

/**
 * @file
 * Installation and uninstallation functions.
 */

/**
 * Implements hook_schema().
 */
function ideal_schema() {
  $schema['ideal_payment'] = array(
    'fields' => array(
      'consumer_account_number' => array(
        'type' => 'varchar',
        'length' => 10,
      ),
      'consumer_bic' => array(
        'type' => 'varchar',
        'length' => 11,
      ),
      'consumer_city' => array(
        'type' => 'varchar',
        'length' => 24,
      ),
      'consumer_iban' => array(
        'type' => 'varchar',
        'length' => 34,
      ),
      'consumer_name' => array(
        'type' => 'varchar',
        'length' => 70,
      ),
      'entrance_code' => array(
        'type' => 'varchar',
        'length' => 40,
      ),
      'issuer_authentication_url' => array(
        'type' => 'text',
        'size' => 'medium',
      ),
      'issuer_id' => array(
        'type' => 'varchar',
        'length' => 11,
      ),
      'updated' => array(
        'type' => 'int',
      ),
      'pid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'transaction_id' => array(
        'type' => 'varchar',
        'length' => 16,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('pid'),
  );
  $schema['ideal_payment_method'] = array(
    'fields' => array(
      'expiration_period' => array(
        'type' => 'int',
      ),
      'pmid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'merchant_id' => array(
        'type' => 'varchar',
        'length' => 9,
        'not null' => TRUE,
      ),
      'merchant_sub_id' => array(
        'type' => 'varchar',
        'length' => 6,
        'default' => '',
      ),
      'merchant_private_key_path' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'merchant_private_key_password' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'merchant_public_certificate_path' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'acquirer_public_certificate_path' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'acquirer_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('pmid'),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function ideal_uninstall() {
  db_query("DELETE FROM {variable} WHERE name LIKE 'ideal_%'");
  cache_clear_all('variables', 'cache');
}

/**
 * Implements hook_requirements().
 */
function ideal_requirements($phase) {
  $requirements = array();

  if ($phase == 'install') {
    // Confirm Drupal can make HTTP requests. Only do this during installation,
    // because Drupal core checks for this requirement during runtime already.
    if (variable_get('drupal_http_request_fails', TRUE) && !system_check_http_request()) {
      $requirements['ideal_http request'] = array(
        'title' => t('HTTP request'),
        'value' => t('Fails'),
        'severity' => REQUIREMENT_ERROR,
        'description' => t('iDEAL needs to be able to make HTTP requests to other websites in order to process transactions.'),
      );
    }
  }

  // Check for required PHP extensions.
  foreach (array('DOM', 'OpenSSL') as $extension) {
    $loaded = extension_loaded($extension);
    $requirements["ideal_extension_$extension"] = array(
      'title' => t('PHP %extension extension', array(
        '%extension' => $extension,
      )),
      'value' => $loaded ? t('Loaded') : t('Not loaded'),
      'severity' => $loaded ? REQUIREMENT_OK : REQUIREMENT_ERROR,
    );
  }
  // OpenSSL needs to support SHA256.
  if (extension_loaded('OpenSSL')) {
    $available = in_array('sha256', openssl_get_md_methods());
    $requirements["ideal_extension_OpenSSL_SHA256"] = array(
      'description' => $available ? '' : t('The OpenSSL library will need to be upgraded to a more recent version.'),
      'title' => t('OpenSSL SHA256 digest method'),
      'value' => $available ? t('Available') : t('Unavailable'),
      'severity' => $available ? REQUIREMENT_OK : REQUIREMENT_ERROR,
    );
  }

  // Cron must run regularly.
  $last_cron_run = variable_get('cron_last');
  if ($last_cron_run < REQUEST_TIME - 18000) {
    $requirements['ideal_last_cron_run'] = array(
      'description' => t('iDEAL uses cron to retrieve payment statuses from acquirers. For best results, run cron minimally every five hours.'),
      'title' => t('Last cron run'),
      'value' => t('More than five hours ago.'),
      'severity' => $phase == 'install' ? REQUIREMENT_WARNING : REQUIREMENT_ERROR,
    );
  }

  return $requirements;
}

/**
 * Update public_certificate_path column name.
 */
function ideal_update_7200() {
  if (db_field_exists('ideal_merchant', 'private_certificate_path')) {
    db_change_field('ideal_merchant', 'private_certificate_path', 'public_certificate_path', array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
    ));
  }
}

/**
 * Remove incompletely configured predefined acquirers from the database.
 */
function ideal_update_7201() {
  // Find all acquirers that are not iDEAL Simulator (IAID 1). We need this
  // check, because they only existed in 7.x-2.0-beta1 and before.
  $query = new EntityFieldQuery();
  $acquirers = $query->entityCondition('entity_type', 'ideal_acquirer')
    ->propertyCondition('iaid', 1, '<>')
    ->propertyCondition('locked', TRUE)
    ->execute();
  if ($acquirers) {
    $iaids = array_keys($acquirers['ideal_acquirer']);
    // Delete the acquirers.
    db_delete('ideal_acquirer')
      ->condition('iaid', $iaids)
      ->execute();
    // Update existing merchants to use iDEAL Simulator instead to prevent
    // errors.
    db_update('ideal_merchant')
      ->condition('iaid', $iaids)
      ->fields(array(
        'iaid' => 1,
      ))
      ->execute();
  }
}

/**
 * Enables dependencies, and optional modules to mimic iDEAL 7.x-2.x behavior.
 */
function ideal_update_7300(array &$sandbox) {
  module_enable(array('payment'));
  // Enable Views UI separately, because it may not be available.
  module_enable(array('views_ui'));
  registry_rebuild();
}
/**
 * Creates iDEAL 7.x-3.x database tables.
 */
function ideal_update_7301(array &$sandbox) {
  db_create_table('ideal_payment', array(
    'fields' => array(
      'consumer_account_number' => array(
        'type' => 'varchar',
        'length' => 10,
      ),
      'consumer_bic' => array(
        'type' => 'varchar',
        'length' => 11,
      ),
      'consumer_city' => array(
        'type' => 'varchar',
        'length' => 24,
      ),
      'consumer_iban' => array(
        'type' => 'varchar',
        'length' => 34,
      ),
      'consumer_name' => array(
        'type' => 'varchar',
        'length' => 70,
      ),
      'entrance_code' => array(
        'type' => 'varchar',
        'length' => 40,
      ),
      'issuer_authentication_url' => array(
        'type' => 'text',
        'size' => 'medium',
      ),
      'issuer_id' => array(
        'type' => 'varchar',
        'length' => 11,
      ),
      'updated' => array(
        'type' => 'int',
      ),
      'pid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'transaction_id' => array(
        'type' => 'varchar',
        'length' => 16,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('pid'),
  ));
  db_create_table('ideal_payment_method', array(
    'fields' => array(
      'acquirer_public_certificate_path' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'acquirer_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'expiration_period' => array(
        'type' => 'int',
      ),
      'merchant_id' => array(
        'type' => 'varchar',
        'length' => 9,
        'not null' => TRUE,
      ),
      'merchant_sub_id' => array(
        'type' => 'varchar',
        'length' => 6,
        'default' => '',
      ),
      'merchant_private_key_path' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'merchant_private_key_password' => array(
        'type' => 'varchar',
        'length' => 24,
        'not null' => TRUE,
      ),
      'merchant_public_certificate_path' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'pmid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('pmid'),
  ));
}

/**
 * Converts iDEAL 7.x-2.x acquirers, merchants, and global configuration to
 * Payment 7.x-1.x payment methods.
 */
function ideal_update_7302(array &$sandbox) {
  // Add a PMID field to {ideal_merchant}.
  db_add_field('ideal_merchant', 'pmid', array(
    'type' => 'int',
    'unsigned' => TRUE,
    'default' => 0,
    'not null' => TRUE,
  ));

  // Load all merchants.
  $merchants_data = db_select('ideal_merchant')
    ->fields('ideal_merchant')
    ->execute()
    ->fetchAllAssoc('imid');

  // Load all acquirers.
  $acquirers_data = db_select('ideal_acquirer')
    ->fields('ideal_acquirer')
    ->execute()
    ->fetchAllAssoc('iaid');

  // Create a payment method for every merchant.
  foreach ($merchants_data as $imid => $merchant_data) {
    $acquirer_data = $acquirers_data[$merchant_data->iaid];
    $payment_method_data = array(
      'enabled' => TRUE,
      'controller_class_name' => 'iDEALVersion2PaymentMethodController',
      'module' => 'payment',
      'name' => preg_replace('#[^a-z0-9_]#', '_', drupal_strtolower($merchant_data->title)),
      'title_specific' => $merchant_data->title,
      'title_generic' => $merchant_data->title,
    );
    drupal_write_record('payment_method', $payment_method_data);
    $controller_data = array(
      'acquirer_public_certificate_path' => $acquirer_data->public_certificate_path,
      'acquirer_url' => variable_get('ideal_test', TRUE) ? $acquirer_data->url_test : $acquirer_data->url_live,
      'expiration_period' => variable_get('ideal_default_expiration_period', 900),
      'merchant_id' => $merchant_data->merchant_id,
      'merchant_sub_id' => $merchant_data->sub_id,
      'merchant_private_key_password' => $merchant_data->private_key_password,
      'merchant_private_key_path' => $merchant_data->private_key_path,
      'merchant_public_certificate_path' => $merchant_data->public_certificate_path,
      'pmid' => $payment_method_data['pmid'],
    );
    drupal_write_record('ideal_payment_method', $controller_data);
    db_update('ideal_merchant')
      ->condition('imid', $imid)
      ->fields(array(
        'pmid' => $payment_method_data['pmid'],
      ))
      ->execute();
  }
}

/**
 * Converts iDEAL 7.x-2.x transactions to Payment 7.x-1.x payments.
 */
function ideal_update_7303(array &$sandbox) {
  // Find out how many transactions need to be converted in total and during
  // this run.
  $per_run = 100;
  if (!isset($sandbox['count'])) {
    $sandbox['count'] = db_select('ideal_transaction')
      ->countQuery()
      ->execute()
      ->fetchField();
  }
  if (!isset($sandbox['run'])) {
    $sandbox['run'] = 0;
  }
  else {
    $sandbox['run']++;
  }
  if ($sandbox['count']) {
    $sandbox['#finished'] = 1 / ($sandbox['count'] / (($sandbox['run'] + 1) * $per_run));

    // Load the PMIDs for all IMIDs.
    $pmids = db_select('ideal_merchant')
      ->fields('ideal_merchant', array('imid', 'pmid'))
      ->execute()
      ->fetchAllKeyed();

    // Load the transactions for this run.
    $transactions_data = db_select('ideal_transaction')
      ->fields('ideal_transaction')
      ->range($sandbox['run'] * $per_run, $per_run)
      ->execute()
      ->fetchAllAssoc('itid');

    // Create payments for the transactions.
    $status_map = iDEALPaymentMethodController::statusMap();
    foreach ($transactions_data as $transaction_data) {
      $payment_data = array(
        'context_data' => array(),
        'currency_code' => 'EUR',
        'description' => $transaction_data->description,
        'description_arguments' => array(),
        'finish_callback' => 'ideal_finish_updated_payment',
        'pmid' => $pmids[$transaction_data->imid],
      );
      drupal_write_record('payment', $payment_data);
      $payment_method_data = array(
        'consumer_account_number' => $transaction_data->account_number,
        'consumer_bic' => '',
        'consumer_city' => $transaction_data->city,
        'consumer_iban' => '',
        'consumer_name' => $transaction_data->name,
        'entrance_code' => $transaction_data->entrance_code,
        'issuer_authentication_url' => $transaction_data->issuer_authentication_url,
        'issuer_id' => '',
        'pid' => $payment_data['pid'],
        'transaction_id' => $transaction_data->transaction_id,
        'uid' => $transaction_data->uid,
        'updated' => $transaction_data->updated,
      );
      drupal_write_record('ideal_payment', $payment_method_data);
      $statuses_data = array(
        'first' => array(
          'status' => PAYMENT_STATUS_NEW,
          'created' => $transaction_data->created,
          'pid' => $payment_data['pid'],
        ),
        array(
          'status' => PAYMENT_STATUS_PENDING,
          'created' => $transaction_data->created,
          'pid' => $payment_data['pid'],
        ),
        'last' => array(
          'status' => $status_map[$transaction_data->status],
          'created' => $transaction_data->updated,
          'pid' => $payment_data['pid'],
        ),
      );
      foreach ($statuses_data as &$status_data) {
        drupal_write_record('payment_status_item', $status_data);
      }
      $payment_data['psiid_first'] = $statuses_data['first']['psiid'];
      $payment_data['psiid_last'] = $statuses_data['last']['psiid'];
      drupal_write_record('payment', $payment_data, 'pid');
      $line_item_data = array(
        'amount' => ((float) $transaction_data->amount) / 100,
        'amount_total' => ((float) $transaction_data->amount) / 100,
        'description' => $transaction_data->description,
        'description_arguments' => array(),
        'name' => 'ideal_updated_from_7.x-2.x',
        'pid' => $payment_data['pid'],
      );
      drupal_write_record('payment_line_item', $line_item_data);
    }
  }
}

/**
 * Deletes iDEAL 7.x-2.x database tables and global configuration, and
 * uninstalls sub-modules.
 */
function ideal_update_7304(array &$sandbox) {
  // Uninstall modules one at a time, so if one of them has enabled dependents,
  // the other can be successfully uninstalled.
  foreach (array('idealdonation', 'idealui') as $module) {
    module_disable(array($module));
    drupal_uninstall_modules(array($module));
  }
  db_drop_table('ideal_acquirer');
  db_drop_table('ideal_merchant');
  db_drop_table('ideal_transaction');
  variable_del('ideal_debug');
  variable_del('ideal_default_expiration_period');
  variable_del('ideal_default_imid');
  variable_del('ideal_test');
  variable_del('idealdonation_amount');
  variable_del('idealdonation_imid');
  variable_del('idealdonation_description');
}

/**
 * Increases the maximum private key password length to 255 characters.
 */
function ideal_update_7305(array &$sandbox) {
  db_change_field('ideal_payment_method', 'merchant_private_key_password', 'merchant_private_key_password', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
  ));
}
