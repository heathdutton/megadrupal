<?php
/**
 * @file
 * Widget for fulfillment.
 */

require_once __DIR__ . '/includes/work_days.widget.inc';
require_once __DIR__ . '/includes/work_days.formatter.inc';

/**
 * Implements hook_field_info().
 */
function work_days_field_info() {
  return array(
    'work_days' => array(
      'label' => t('Work days'),
      'description' => t(''),
      'settings' => array(),
      'default_widget' => 'work_days',
      'default_formatter' => 'work_days_calendar',

      // Integrate with the Entity Metadata module.
      'property_type' => 'work_days',
      'property_callbacks' => array('work_days_property_info_callback'),
    ),
  );
}

/**
 * Callback to alter the property info of address fields.
 *
 * @see addressfield_field_info().
 */
function work_days_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $name = $field['field_name'];
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];

  $property['type'] = ($field['cardinality'] != 1) ? 'list<work_days>' : 'work_days';
  $property['getter callback'] = 'work_days_property_get';
  $property['setter callback'] = 'work_days_property_set';
  $property['property info'] = work_days_data_property_info();

  unset($property['query callback']);
}

/**
 * Defines info for the properties of the address field data structure.
 */
function work_days_data_property_info($name = NULL) {
  // Build an array of basic property information for the work_days field.
  $properties = array(
    'additions' => array(
      'label' => t('Additions'),
    ),
    'exclusions' => array(
      'label' => t('Exclusions'),
    ),
  );

  // Add the default values for each of the work_days field properties.
  foreach ($properties as $key => &$value) {
    $value += array(
      'description' => !empty($name) ? t('!label of field %name', array('!label' => $value['label'], '%name' => $name)) : '',
      'type' => 'list<text>',
      'getter callback' => 'work_days_property_get',
      'setter callback' => 'work_days_property_set',
    );
  }

  return $properties;
}

/**
 * Getter callback for property.
 */
function work_days_property_get($entity, array $options, $name, $entity_type, &$context) {
  // Set contextual info useful for getters of any child properties.
  $context['instance'] = field_info_instance($context['parent']->type(), $name, $context['parent']->getBundle());
  $context['field'] = field_info_field($name);
  $langcode = isset($options['language']) ? $options['language']->language : LANGUAGE_NONE;
  $langcode = entity_metadata_field_get_language($entity_type, $entity, $context['field'], $langcode, TRUE);

  $items = array();
  foreach ($entity->{$name}[$langcode] as $delta => $item) {
    $items[$delta]['additions'] = !empty($item['additions']) ? json_decode($item['additions']) : array();
    $items[$delta]['exclusions'] = !empty($item['exclusions']) ? json_decode($item['exclusions']) : array();
  }

  if ($context['field']['cardinality'] == 1) {
    return !empty($items[0]) ? $items[0] : NULL;
  }
  return !empty($items) ? $items : array();
}

/**
 * Setter callback for property.
 */
function work_days_property_set($entity, $name, $items, $langcode, $entity_type) {
  $field = field_info_field($name);
  $langcode = entity_metadata_field_get_language($entity_type, $entity, $field, $langcode);
  $value = $field['cardinality'] == 1 ? array($items) : (array) $items;

  // Convert data.
  foreach ($value as &$item) {
    if (empty($item['additions']) || empty($item['exclusions'])) {
      throw new Exception(t('Invalid input data format'));
    }

    $item['additions'] = json_encode($item['additions'], JSON_UNESCAPED_SLASHES);
    $item['exclusions'] = json_encode($item['exclusions'], JSON_UNESCAPED_SLASHES);
  }

  // Filter out any items set to NULL.
  $entity->{$name}[$langcode] = array_filter($value);

  // Empty the static field language cache, so the field system picks up any
  // possible new languages.
  drupal_static_reset('field_language');
}

/**
 * Implements hook_field_is_empty().
 */
function work_days_field_is_empty($item, $field) {
  return empty($item['additions']) || empty($item['exclusions']);
}
