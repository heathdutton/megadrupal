<?php

/**
 * Implements hook_permission().
 */
function blob_relay_permission() {
  return array(
    'use blob relay' => array(
      'title' => t('Use blob relay.'),
      'description' => t('Use the blob relay through javascript.'),
    ),
  );
}

/**
 * Implements hook_init().
 *
 * TODO: the js and css belong to the form. Use #attached.
 */
function blob_relay_init() {
  $path = drupal_get_path('module', 'blob_relay');
  drupal_add_js($path . '/js/blob_relay.js');
  drupal_add_css($path . '/css/blob_relay.css');
}

function blob_relay_block_info() {
  $blocks['blob-relay'] = array(
    'info' => t('Blob Relay'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

function blob_relay_block_view($delta = '') {
  $block = array();
  if ($delta == 'blob-relay') {
    $form = drupal_get_form('blob_relay_input');
    $block['content'] = array(
      'content' => $form,
    );
  }
  return $block;
}

/**
 * Implements hook_menu().
 */
function blob_relay_menu() {
  $items['blob-relay/form'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('blob_relay_input'),
    'access arguments' => array('use blob relay'),
    'title' => 'Blob form relay',
    'description' => "You may upload a blob and get it's download",
  );

  $items['admin/config/media/blob-relay'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('blob_relay_input'),
    'access arguments' => array('administer site configuration'),
    'title' => 'Blob form relay',
    'description' => "You may upload a blob and get it's download",
  );

  return $items;
}

/**
 * Form for submitting a browser data item for download back to the client.
 *
 * @param array $form
 * @param array $form_state
 * @return array
 */
function blob_relay_input($form, &$form_state) {
  $admin = (arg(0) == 'admin' && arg(1) == 'config' && arg(2) == 'media' && arg(3) == 'blob-relay');
  $form['#action'] = url(($admin ? 'admin/config/media/blob-relay' : 'blob-relay/form'));

  $form['filename'] = array(
    '#title' => 'Filename',
    '#type' => ($admin ? 'textfield' : 'hidden'),
    '#default_value' => 'text.txt',
  );
  $form['mimetype'] = array(
    '#title' => 'Mime type',
    '#type' => ($admin ? 'textfield' : 'hidden'),
    '#default_value' => 'text/plain',
  );
  $form['encoding'] = array(
    '#title' => 'Encoding',
    '#type' => ($admin ? 'textfield' : 'hidden'),
    '#default_value' => '',
  );
  $form['data'] = array(
    '#title' => t('Your data'),
    '#type' => ($admin ? 'textfield' : 'hidden'),
  );
  $form['prepend'] = array(
    '#title' => t('Data to prepend when having decoded.'),
    '#type' => ($admin ? 'textfield' : 'hidden'),
  );
  // TODO: prevent default attach behaviour on jQuery('#submit')
  $form['blob-relay-submit'] = array(
    '#type' => 'submit',
    '#value' => t('Download'),
    '#attributes' => array(
      'class' => array(
        'blob-relay' . ($admin ? ' admin' : ''),
      ),
    ),
  );
  return $form;
}

/**
 * Implements hook_validate().
 *
 * As this is intended as javascript only there are no validation messages.
 */
function blob_relay_input_validate($form, &$form_state) {
  // As we change values all are "by ref".
  $data = &$form_state['values']['data'];
  $filename = &$form_state['values']['filename'];
  $mimetype = &$form_state['values']['mimetype'];
  $encoding = &$form_state['values']['encoding'];

  $error = '';
  if (empty($data)) {
    $error .= " No data to relay.\n";
  }
  else {
    if ($encoding == 'base64') {
      $data = base64_decode($data);
    }
  }
  // Protect the receiving user
  if (empty($filename)) {
    $error .= "No filename given.\n";
  }
  else {
    // Don't trust the filename.
    $basename = $filename;

    // Begin code taken from includes/file.inc
    // @see file_create_filename
    $basename = preg_replace('/[\x00-\x1F]/u', '_', $basename);
    if (substr(PHP_OS, 0, 3) == 'WIN') {
      // These characters are not allowed in Windows filenames
      $basename = str_replace(array(':', '*', '?', '"', '<', '>', '|'), '_', $basename);
    }
    // End code taken from includes/file.inc
    // Remove newlines
    $basename = str_replace(array("\n", "\m"), '_', $basename);

    if ($basename !== $filename) {
      $error .= "Dubious filename transformed into $basename\n";
    }
    $filename = $basename;
  }
  // Now filename is 'valid' check it's extension
  $ext = pathinfo($filename, PATHINFO_EXTENSION);
  if (empty($ext)) {
    $error .= "No extension found for filename.\n";
  }
  if (empty($mimetype)) {
    $error .= "No mimetype given.\n";
  }
  else {
    list(, $type) = explode('/', $mimetype);
    if (empty($type)) {
      $error .= "Invalid mimetype.\n";
    }
  }
  if ($error) {
    // We return a text/text file
    $data = t("Please contact your site administrator.");
    $error = "Error creating relay file. " . $error . ' Check your javascript code.';
    watchdog('blob_relay', check_plain($error), NULL, WATCHDOG_NOTICE);
    $mimetype = 'text/text';
    $filename = 'error.txt';
  }
}

/**
 * Implements hook_submit().
 */
function blob_relay_input_submit($form, &$form_state) {
  $values = $form_state['values'];
  blob_relay_download_file($values['data'], $values['filename'], $values['mimetype'], $values['prepend']);
}

/**
 * Make the browser trigger a file download.
 *
 * @global type $user
 * @param type $content
 * @param type $filename
 * @param type $mimetype
 */
function blob_relay_download_file($content, $filename, $mimetype, $prepend = '') {
  # create temp file
  $ext = pathinfo($filename, PATHINFO_EXTENSION);
  $temp = tempnam("temporary://", 'blob_relay_');
  $name = basename($temp . '.' . $ext);
  $uri = "temporary://" . $name . '.' . $ext;
  $file = file_save_data($prepend . $content, $uri, FILE_EXISTS_RENAME);

  $headers = array(
    'Content-Type' => 'force-download',
    'Content-Disposition' => 'attachment; filename="' . $filename . '"',
    'Content-Length' => $file->filesize,
    'Content-Transfer-Encoding' => 'binary',
    'Pragma' => 'no-cache',
    'Cache-Control' => 'must-revalidate, post-check=0, pre-check=0',
    'Expires' => '0',
    'Accept-Ranges' => 'bytes',
    'Mime-Type' => $mimetype,
  );

  file_transfer($file->uri, $headers);
}
