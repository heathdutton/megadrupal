<?php

/**
 * @file
 * Provides the functionality of the Alternative Templates module.
 */

/**
 * Implements hook_menu().
 */
function alternative_templates_menu() {
  $items = array();

  $items['admin/config/alternative-templates'] = array(
    'title' => 'Alternative Templates configuration',
    'description' => 'Configuration for the Alternative Templates module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('alternative_templates_settings_form'),
    'access arguments' => array('administrate content'),
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

function alternative_templates_settings_form($form, &$form_state) {
  $node_types = array();

  $node_type_objects = node_type_get_types();

  foreach ($node_type_objects as $node_type_object) {
    $node_types[$node_type_object->type] = $node_type_object->name;
  }

  $form = array();

  $alternative_templates_node_types = variable_get('alternative_templates_node_types', array());

  // node type selection
  $form['alternative_templates_node_types'] = array(
    '#type' => 'checkboxes',
    '#options' => $node_types,
    '#title' => t('Node types supported by Alternative Templates'),
    '#description' => t('Choose the node types you wish to be supported by Alternative Templates. The selected node types will have a template selection field in their respective edit forms.'),
    '#default_value' => $alternative_templates_node_types
  );

  // templates to be used per node type
  $form['alternative_templates_node_templates'] = array(
    '#type' => 'fieldset',
    '#title' => t('Templates used per node type'),
    '#description' => t('Select the template files you want to use per node type.')
  );

  foreach ($alternative_templates_node_types as $node_type) {
    if (!$node_type) {
      continue;
    }

    $templates = alternative_templates_get_node_type_templates($node_type);

    $form['alternative_templates_node_templates']['alternative_templates_' . $node_type . '_templates'] = array(
      '#type' => 'checkboxes',
      '#options' => $templates,
      '#title' => t('Templates for @node_type', array('@node_type' => $node_types[$node_type])),
      '#default_value' => variable_get('alternative_templates_' . $node_type . '_templates', array())
    );
  }

  return system_settings_form($form);
}

/**
 * Implements hook_form_alter().
 */
function alternative_templates_form_alter(&$form, &$form_state, $form_id) {
  $alternative_templates_node_types = variable_get('alternative_templates_node_types', array());

  $form_ids = array();

  foreach ($alternative_templates_node_types as $node_type) {
    $form_ids[] = $node_type . '_node_form';
  }

  if (in_array($form_id, $form_ids)) {
    $form['alternative_template'] = array(
      '#type' => 'select',
      '#title' => t('Alternative template'),
      '#description' => t('Select the alternative template for this node.'),
      '#options' => alternative_templates_get_node_type_templates($form['#node']->type),
      '#default_value' => isset($form['#node']->nid) ? variable_get('alternative_template_node_' . $form['#node']->nid, 0) : 0
    );
  }
}

/**
 * Implements hook_node_insert().
 */
function alternative_templates_node_insert($node) {
  variable_set('alternative_template_node_' . $node->nid, $node->alternative_template);
}

/**
 * Implements hook_node_update().
 */
function alternative_templates_node_update($node) {
  variable_set('alternative_template_node_' . $node->nid, $node->alternative_template);
}

/**
 * Implements hook_preprocess_node().
 */
function alternative_templates_preprocess_node(&$vars) {
  $alternative_templates_node_types = variable_get('alternative_templates_node_types', array());

  if (in_array($vars['type'], $alternative_templates_node_types)) {
    $templates = alternative_templates_get_node_type_templates($vars['type']);

    $template = $templates[variable_get('alternative_template_node_' . $vars['nid'], 0)];

    $theme_hook_suggestion = str_replace(array('-', '.tpl'), array('_', ''), $template);

    $vars['theme_hook_suggestions'][] = $theme_hook_suggestion;
  }
}

/**
 * Gets the available template files for a given node type.
 *
 * @param $node_type
 *   The node type as a machine readable string
 *
 * @return $template_names
 *   The available template file names as an array
 */
function alternative_templates_get_node_type_templates($node_type) {
  $templates = file_scan_directory(drupal_get_path('theme', variable_get('theme_default', 'none')), "/.*$node_type.*/");

  $template_names = array();

  foreach ($templates as $template) {
    $template_names[] = $template->name;
  }

  return $template_names;
}