<?php

/**
 * @file
 * Tests for Relation unique module.
 */

/**
 * Tests the Relation unique functionality.
 */
class RelationUniqueTestCase extends RelationTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Relation unqiue test',
      'description' => 'Tests Relation unique functionality.',
      'group' => 'Relation',
    );
  }

  /**
   * Overrides DrupalWebTestCase::seUp().
   */
  public function setUp() {
    parent::setUp('relation_unique');
  }

  /**
   * Tests the relation type settings.
   */
  public function testRelationTypeSettings() {
    $this->drupalGet('admin/structure/relation/add');
    $this->assertField(
      'advanced[relation_unique_source]',
      'Source unique field exists on Add relation type form.'
    );
    $this->assertField(
      'advanced[relation_unique_source]',
       'Target unique field exists on Add relation type form.'
    );

    $this->assertNoFieldChecked(
      'edit-advanced-relation-unique-source',
      'Source unique field is not checked on new relation type.'
    );
    $this->assertNoFieldChecked(
      'edit-advanced-relation-unique-target',
      'Target unique field is not checked on new relation type.'
    );
    // 'directional' is a relation set up by the parent class.
    $this->drupalGet('admin/structure/relation/manage/directional');
    $this->assertNoFieldChecked(
      'edit-advanced-relation-unique-source',
      'Source unique field is not checked on existing relation type.'
    );
    $this->assertNoFieldChecked(
      'edit-advanced-relation-unique-target',
      'Target unique field is not checked on existing relation type.'
    );

    relation_unique_type_set_unique('directional', 'source', TRUE);
    relation_unique_type_set_unique('directional', 'target', TRUE);

    $this->assertTrue(
      relation_unique_type_is_unique('directional', 'source'),
      'Setting relation type unique through the API is successful (for the source).'
    );
    $this->assertTrue(
      relation_unique_type_is_unique('directional', 'target'),
      'Setting relation type unique through the API is successful (for the target).'
    );

    $this->drupalGet('admin/structure/relation/manage/directional');
    $this->assertFieldChecked(
      'edit-advanced-relation-unique-source',
      'Source unique field is checked after setting unique through the API.'
    );
    $this->assertFieldChecked(
      'edit-advanced-relation-unique-target',
      'Target unique field is checked after setting unique through the API.'
    );

    relation_unique_type_set_unique('directional', 'source', FALSE);
    relation_unique_type_set_unique('directional', 'target', FALSE);


    $this->assertFalse(
      relation_unique_type_is_unique('directional', 'source'),
      'Setting relation type not-unique through the API is successful (for the source).'
    );
    $this->assertFalse(
      relation_unique_type_is_unique('directional', 'target'),
      'Setting relation type not-unique through the API is successful (for the target).'
    );
    $this->drupalGet('admin/structure/relation/manage/directional');
    $this->assertNoFieldChecked(
      'edit-advanced-relation-unique-source',
      'Source unique field is checked after setting non-unique through the API.'
    );
    $this->assertNoFieldChecked(
      'edit-advanced-relation-unique-target',
      'Target unique field is not checked after setting non-unique through the API.'
    );

    $params = array(
      'advanced[relation_unique_source]' => 1,
      'advanced[relation_unique_target]' => 1,
    );
    $this->drupalPost('admin/structure/relation/manage/directional', $params, 'Save');

    $this->assertTrue(
      relation_unique_type_is_unique('directional', 'source'),
      'Setting relation type unique through the UI is successful (for the source).'
    );
    $this->assertTrue(
      relation_unique_type_is_unique('directional', 'target'),
      'Setting relation type unique through the UI is successful (for the target).'
    );

    $this->drupalGet('admin/structure/relation/manage/directional');
    $this->assertFieldChecked(
      'edit-advanced-relation-unique-source',
      'Source unique field is checked after setting unique through the UI.'
    );
    $this->assertFieldChecked(
      'edit-advanced-relation-unique-target',
      'Target unique field is checked after setting unique through the UI.'
    );

    $params = array(
      'advanced[relation_unique_source]' => FALSE,
      'advanced[relation_unique_target]' => FALSE,
    );
    $this->drupalPost('admin/structure/relation/manage/directional', $params, 'Save');

    $this->assertFalse(
      relation_unique_type_is_unique('directional', 'source'),
      'Setting relation type non-unique through the UI is successful (for the source).'
    );
    $this->assertFalse(
      relation_unique_type_is_unique('directional', 'target'),
      'Setting relation type non-unique through the UI is successful (for the target).'
    );

    $this->drupalGet('admin/structure/relation/manage/directional');
    $this->assertNoFieldChecked(
      'edit-advanced-relation-unique-source',
      'Source unique field is unchecked after setting non-unique through the UI.'
    );
    $this->assertNoFieldChecked(
      'edit-advanced-relation-unique-target',
      'Target unique field is unchecked after setting non-unique through the UI.'
    );

    // We are destroying source uniqueness for the directional relation type.
    // There already exists a relation Node3 -> Node4
    $this->endpoints[0]['entity_id'] = $this->node3->nid;
    $this->endpoints[1]['entity_id'] = $this->node5->nid;
    $rid = $this->saveRelation(
      $this->relation_type_directional,
      $this->endpoints
    );
    $params = array(
      'advanced[relation_unique_source]' => TRUE,
    );
    $this->drupalPost('admin/structure/relation/manage/directional', $params, 'Save');
    // We should have remained on the form due to a validation error.
    $this->assertUrl(
      'admin/structure/relation/manage/directional',
      array(),
      'Trying to set a non-source-unique relation source unique does not result in a sucessful form submission.'
    );
    $this->assertText(
      'You cannot set this relation type to be entity unique on the source',
      'Trying to set a non-source-unique relation source unique triggers an error message.'
    );
    relation_delete($rid);

    $this->drupalPost('admin/structure/relation/manage/directional', $params, 'Save');

    $this->assertText(
      'relation type has been saved',
      'Making the relation source unique allows saving the setting.'
    );

    // Now we destroy target uniqeness for the directional type.
    // We again use the existing relation Node3 -> Node4.
    $this->endpoints[0]['entity_id'] = $this->node5->nid;
    $this->endpoints[1]['entity_id'] = $this->node4->nid;
    $rid = $this->saveRelation(
      $this->relation_type_directional,
      $this->endpoints
    );

    $params = array(
      'advanced[relation_unique_target]' => TRUE,
    );
    $this->drupalPost('admin/structure/relation/manage/directional', $params, 'Save');
    // We should have remained on the form due to a validation error.
    $this->assertUrl(
      'admin/structure/relation/manage/directional',
      array(),
      'Trying to set a non-target-unique relation target unique does not result in a sucessful form submission.'
    );
    $this->assertText(
      'You cannot set this relation type to be entity unique on the target',
      'Trying to set a non-target-unique relation target unique triggers an error message.'
    );
    relation_delete($rid);

    $this->drupalPost('admin/structure/relation/manage/directional', $params, 'Save');

    $this->assertText(
      'relation type has been saved',
      'Making the relation target unique allows saving the setting.'
    );

    // Now we destroy uniqueness of the symmetric relation type.
    // There already is a Node1 <-> Node4 relation.
    $this->endpoints[0]['entity_id'] = $this->node1->nid;
    $this->endpoints[1]['entity_id'] = $this->node3->nid;
    $rid = $this->saveRelation(
      $this->relation_type_symmetric,
      $this->endpoints
    );
    $params = array(
      'advanced[relation_unique_source]' => TRUE,
    );
    $this->drupalPost('admin/structure/relation/manage/symmetric', $params, 'Save');
    // We should have remained on the form due to a validation error.
    $this->assertUrl(
      'admin/structure/relation/manage/symmetric',
      array(),
      'Trying to set a symmetric non-unique relation source unique does not result in a sucessful form submission.'
    );
    $this->assertText(
      'You cannot set this relation type to be entity unique on the source',
      'Trying to set a symmetric non-unique relation source unique triggers an error message.'
    );
    relation_delete($rid);

    $this->drupalPost('admin/structure/relation/manage/symmetric', $params, 'Save');

    $this->assertText(
      'relation type has been saved',
      'Making the relation unique allows saving the setting.'
    );

    // Now we destroy uniqueness on the "second" argument, to make sure there
    // is no difference.
    // There already is a Node1 <-> Node4 relation.
    $params = array(
      'advanced[relation_unique_source]' => FALSE,
    );
    $this->drupalPost('admin/structure/relation/manage/symmetric', $params, 'Save');
    $this->endpoints[0]['entity_id'] = $this->node3->nid;
    $this->endpoints[1]['entity_id'] = $this->node4->nid;
    $rid = $this->saveRelation(
      $this->relation_type_symmetric,
      $this->endpoints
    );
    $params = array(
      'advanced[relation_unique_source]' => TRUE,
    );
    $this->drupalPost('admin/structure/relation/manage/symmetric', $params, 'Save');
    // We should have remained on the form due to a validation error.
    $this->assertUrl(
      'admin/structure/relation/manage/symmetric',
      array(),
      'Trying to set a symmetric non-unique relation source unique does not result in a sucessful form submission.'
    );
    $this->assertText(
      'You cannot set this relation type to be entity unique on the source',
      'Trying to set a symmetric non-unique relation source unique triggers an error message.'
    );
    relation_delete($rid);

    $this->drupalPost('admin/structure/relation/manage/symmetric', $params, 'Save');

    $this->assertText(
      'relation type has been saved',
      'Making the relation unique allows saving the setting.'
    );


  }

  /**
   * Tests the creation of relations.
   */
  public function testRelationCreation() {
    relation_unique_type_set_unique('directional', 'source', TRUE);

    // There already is a Node3 -> Node4 relation.
    $this->endpoints[0]['entity_id'] = $this->node3->nid;
    $this->endpoints[1]['entity_id'] = $this->node3->nid;
    $rel = relation_create($this->relation_type_directional, $this->endpoints);
    try {
      field_attach_validate('relation', $rel);
    }
    catch (FieldValidationException $e) {
      $this->assertEqual(
        $e->errors[0]['error'],
        'relation_unique_source_exists_directional',
        "Validating a new relation that has the same source as an existing one triggers a FieldValidationException for a source unique directional relation type."
      );
    }

    $this->assertFalse(
      relation_save($rel),
      "A new relation that has the same source as an existing one cannot be saved for a source unique directional relation type.");

    $existing_rel = relation_load($this->rid_directional);
    $this->assertTrue(
      relation_save($existing_rel),
      "An existing relation can be saved for a source unique directional relation type."
    );


    $this->endpoints[0]['entity_id'] = $this->node4->nid;
    $this->endpoints[1]['entity_id'] = $this->node3->nid;
    $rel = relation_create($this->relation_type_directional, $this->endpoints);

    $this->assertTrue(
      $rid = relation_save($rel),
      "An new relation that does not share its source with any existing relation can be saved for a source unique directional relation type."
    );

    relation_delete($rid);

    relation_unique_type_set_unique('directional', 'source', FALSE);
    relation_unique_type_set_unique('directional', 'target', TRUE);
    // There already is a Node3 -> Node4 relation.
    $this->endpoints[0]['entity_id'] = $this->node2->nid;
    $this->endpoints[1]['entity_id'] = $this->node4->nid;
    $rel = relation_create($this->relation_type_directional, $this->endpoints);
    try {
      field_attach_validate('relation', $rel);
    }
    catch (FieldValidationException $e) {
      $this->assertEqual(
        $e->errors[0]['error'],
        'relation_unique_target_exists',
        "Validating a new relation that has the same target as an existing one triggers a FieldValidationException for a source unique directional relation type."
      );
    }
    $this->assertFalse(
      relation_save($rel),
      "A new relation that has the same target as an existing one cannot be saved for a target unique directional relation type.");

    $this->assertTrue(
      relation_save($existing_rel),
      "An existing relation can be saved for a target unique directional relation type."
    );

    $this->endpoints[0]['entity_id'] = $this->node4->nid;
    $this->endpoints[1]['entity_id'] = $this->node5->nid;
    $rel = relation_create($this->relation_type_directional, $this->endpoints);

    $this->assertTrue(
      $rid = relation_save($rel),
      "An new relation that does not share its target with any existing relation can be saved for a target unique directional relation type."
    );
    relation_delete($rid);

    // Testing symmetric relation.
    relation_unique_type_set_unique('symmetric', 'source');
    // There already is a Node1 <-> Node4 relation.
    $this->endpoints[0]['entity_id'] = $this->node2->nid;
    $this->endpoints[1]['entity_id'] = $this->node1->nid;
    $rel = relation_create($this->relation_type_symmetric, $this->endpoints);
    try {
      field_attach_validate('relation', $rel);
    }
    catch (FieldValidationException $e) {
      $this->assertEqual(
        $e->errors[0]['error'],
        'relation_unique_source_exists',
        "Validating a new relation that has the same source as an existing one triggers a FieldValidationException for a source unique non-directional relation type."
      );
    }
    $this->assertFalse(
      relation_save($rel),
      "A new relation that has the same source as an existing one cannot be saved for a source unique non-directional relation type."
    );

    $existing_rel = relation_load($this->rid_symmetric);
    $this->assertTrue(
      relation_save($existing_rel),
      "An existing relation can be saved for a source unique non-directional relation type."
    );

    $rel->endpoints[LANGUAGE_NONE][1]['entity_id'] = $this->node3->nid;

    $this->assertTrue(
      $rid = relation_save($rel),
      "An new relation that does not share its source with any existing relation can be saved for a source unique non-directional relation type."
    );
    relation_delete($rid);
  }
}
