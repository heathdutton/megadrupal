<?php

/**
 * @file
 * Allows relations to be restricted to being unique by endpoint.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see relation_unique_relation_type_form_validate()
 * @see relation_unique_relation_type_form_submit()
 */
function relation_unique_form_relation_type_form_alter(&$form, &$form_state) {
  if (!empty($form_state['build_info']['args'])) {
    $relation_type = $form_state['build_info']['args'][0]->relation_type;
  }
  $form['advanced']['relation_unique_source'] = array(
    '#type' => 'checkbox',
    '#title' => t('Entity unique (non-directional / source)'),
    '#description' => t('If a directional relation type is entity unique on the source, this means that any entity can only be the source in at most one relation of this type. For a husband-of relation, this prevents polygamy: If A is the husband of B, he cannot be the husband of anyone else. For non-directional relation types, entity unqiueness ensures that any entity can occur in at most one relation of the type. Again, for the non-directional relation type married-to, this prevents polygamy.'),
    '#default_value' => !empty($relation_type) ? relation_unique_type_is_unique($relation_type, 'source') : FALSE,
  );
  $form['advanced']['relation_unique_target'] = array(
    '#type' => 'checkbox',
    '#title' => t('Entity unique (target)'),
    '#description' => t('If a directional relation type is entity unique on the target, this means that any entity can only be a target in at most one relation of this type.'),
    '#default_value' => !empty($relation_type) ? relation_unique_type_is_unique($relation_type, 'target') : FALSE,
    '#states' => array(
      '!visible' => array(
        ':input[name="directional"]' => array('checked' => FALSE),
      ),
    ),
  );
  $form['#validate'][] = 'relation_unique_relation_type_form_validate';
  $form['#submit'][] = 'relation_unique_relation_type_form_submit';
}

/**
 * Form validation handler for relation_unique_form_relation_type_form_alter().
 *
 * @see relation_unique_relation_type_form_submit()
 */
function relation_unique_relation_type_form_validate($form, &$form_state) {
  $type = relation_type_load($form_state['values']['relation_type']);
  // If the type does not yet exist, we do not need to check anything.
  if (!empty($type)) {
    if ($form_state['values']['advanced']['relation_unique_source']) {
      // We need to set this manually, as the current form submission may
      // also change the directional setting.
      $type->directional = $form_state['values']['directional'];
      if (!relation_unique_type_can_be_unique($type, 'source')) {
        form_set_error('advanced][relation_unique_source', t('You cannot set this relation type to be entity unique on the source, as there are existing relations that violate the constraint. Go to the <a href="!relations_url">Relation page</a> to delete the problematic relations or unset the "Entity unique (non-directional / source)" setting below.', array('!relations_url' => url('admin/content/relation'))));
      }

    }
    if ($form_state['values']['advanced']['relation_unique_target']) {
      if (!relation_unique_type_can_be_unique($type, 'target')) {
        form_set_error('advanced][relation_unique_target', t('You cannot set this relation type to be entity unique on the target, as there are existing relations that violate the constraint.Go to the <a href="!relations_url">Relation page</a> to delete the problematic relations or unset the "Entity unique (target)" setting below.', array('!relations_url' => url('admin/content/relation'))));
      }
    }
  }
}

/**
 * Form submission handler for relation_unique_form_relation_type_form_alter().
 *
 * @see relation_unique_relation_type_form_validate()
 */
function relation_unique_relation_type_form_submit($form, &$form_state) {
  $fv = $form_state['values'];
  $relation_type = $fv['relation_type'];
  relation_unique_type_set_unique($relation_type, 'source', $fv['advanced']['relation_unique_source']);
  relation_unique_type_set_unique($relation_type, 'target', $fv['advanced']['relation_unique_target']);
}

/**
 * Determines wether a given relation type is set to be unique in an endpoint.
 *
 * @param string $type
 *   The machine name of the relation type for which to check.
 * @param string $endpoint
 *   The endpoint for which to check: 'source' or 'target'.
 *
 * @return bool
 *   Boolean indicating whether $type is set to be $endpoint unique.
 */
function relation_unique_type_is_unique($type, $endpoint) {
  return variable_get('relation_unique_' . $type . '_' . $endpoint, FALSE);
}

/**
 * Sets a relation type to be (non-)unique in a given endpoint.
 *
 * @param string $type
 *   The machine name of the relation type for which to (un)set uniqueness.
 * @param string $endpoint
 *   The endpoint type for which to (un)set uniqueness: 'source' or 'target'.
 * @param bool $value
 *   (optional) Boolean indicating whether uniqueness should be required (TRUE)
 *   or not (FALSE).
 */
function relation_unique_type_set_unique($type, $endpoint, $value = TRUE) {
  variable_set('relation_unique_' . $type . '_' . $endpoint, $value);
}

/**
 * Checks whether an existing relation can be set to be unique in an endpoint.
 *
 * This is used in relation_unique_relation_type_form_validate() to verify
 * that no relations of this type violate the uniqueness constraint.
 *
 * We directly query the endpoints database table, since there is no efficient
 * way to do an EntityFieldQuery that answers the question "Is there a value
 * that occurs more than once?".
 *
 * @param object $type
 *   Object representing the relation type for which the check should be
 *   performed.
 * @param string $endpoint
 *   Either 'source' or 'target', depending on which kind of uniqueness should
 *   be checked. Note: If 'target' is provided, the relation type will be
 *   assumed to be directional. If 'source' is provided, $type will be inspected
 *   to determine directionality.
 *
 * @return bool
 *   Boolean indicating whether the type can be set to be $endpoint unique.
 */
function relation_unique_type_can_be_unique($type, $endpoint) {
  $query = db_select('field_data_endpoints')
    ->fields('field_data_endpoints', array('endpoints_entity_type', 'endpoints_entity_id'))
    ->condition('entity_type', 'relation', '=')
    ->condition('bundle', $type->relation_type, '=')
    ->groupBy('endpoints_entity_type')
    ->groupBy('endpoints_entity_id')
    ->having('COUNT(*) > 1');
  switch ($endpoint) {
    case 'source':
      if ($type->directional) {
        $query->condition('endpoints_r_index', 0, '=');
      }
      break;

    case 'target':
      $query->condition('endpoints_r_index', 0, '>');
      break;
  }

  return $query->execute()->rowCount() == 0;
}

/**
 * Implements hook_field_attach_validate().
 */
function relation_unique_field_attach_validate($entity_type, $entity, &$errors) {
  // We only act on relation entities.
  if ($entity_type == 'relation') {

    $rid = !empty($entity->rid) ? $entity->rid : 0;

    $rel_type = relation_type_load($entity->relation_type);

    // The endpoints field is never translatable.
    foreach ($entity->endpoints[LANGUAGE_NONE] as $delta => $item) {
      if (!isset($item['r_index'])) {
        $item['r_index'] = $delta;
      }
      if (relation_unique_type_is_unique($entity->relation_type, 'source')
      && !_relation_unique_item_valid($rel_type, $item, 'source', $rid)) {

        $error_code = 'relation_unique_source_exists';
        if ($rel_type->directional) {
          $error_code .= '_directional';
        }
        $errors[] = relation_unique_error($error_code, $rel_type, $item);
      }

      if (relation_unique_type_is_unique($entity->relation_type, 'target')
      && !_relation_unique_item_valid($rel_type, $item, 'target', $rid)) {

        $error_code = 'relation_unique_target_exists';
        $errors[] = relation_unique_error($error_code, $rel_type, $item);
      }
    }
  }
}

/**
 * Returns the translated version of a validation message.
 *
 *
 * @param string $error
 *   The error code of the error
 * @param array $relation_type
 *   The array describing the relation type, as returned by
 *   relation_type_load().
 * @param array $item
 *   A item array as contained in $relation->endpoints[LANGUAGE_NONE].
 *
 * @return array
 *   An error array, ready to be added to the $errors argument of
 *   hook_field_attach_validate().
 *
 * @see hook_field_attach_validate()
 */
function relation_unique_error($error, $relation_type, $item) {
  $entity_type = entity_get_info($item['entity_type']);
  $entities = entity_load($item['entity_type'], array($item['entity_id']));
  $entity = reset($entities);
  $vars = array(
    '@label' => $relation_type->label,
    '@type' => $entity_type['label'],
    '@name' => entity_label($item['entity_type'], $entity),
  );

  $messages['relation_unique_source_exists_directional'] = t('The relation @label is set to be entity unique in the source, and there already exists a relation that has the @type @name as the source.', $vars);

  $messages['relation_unique_source_exists'] = t('The relation @label is set to be entity unique, and there already exists a relation that references the @type @name', $vars);

  $messages['relation_unique_target_exists'] = t('The relation @label is set to be entity unique in the target, and there already exists a relation that references the @type @name.', $vars);

  return array(
    'error' => $error,
    'message' =>  $messages[$error],
  );
}

/**
 * Checks for a single item whether it is valid for a given entity type.
 *
 * This function assumes that the entity type is set to be unqique in the
 * endpoint type given in the parameter $endpoint, it does not verify this.
 *
 * @param string $type
 *   The relation type for which to check.
 * @param array $item
 *   A item array as contained in $relation->endpoints[LANGUAGE_NONE].
 * @param string $endpoint
 *   The endpoint type for which the check is to be performed: 'source' or
 *  'target'.
 * @param int $validating_rid
 *   (optional) The relation ID of the relation being validated. Can be left
 *   unset if a new relation is being validated.
 *
 * @return bool
 *   Boolean indicating whether the item is valid, on the assumption that
 *   $type is $endpoint unique.
 */
function _relation_unique_item_valid($type, $item, $endpoint, $validating_rid = 0) {
  $entity_type = $item['entity_type'];
  $entity_id = $item['entity_id'];
  $r_index = $item['r_index'];
  if ($endpoint == 'source' & $type->directional && $r_index > 0) {
    return TRUE;
  }
  elseif ($endpoint == 'target' && $r_index == 0) {
    return TRUE;
  }
  else {
    $rids = relation_unique_exists($type, $endpoint, $entity_type, $entity_id);
    return !$rids || in_array($validating_rid, $rids);
  }
}

/**
 * Retrieves all relations that contains a given entity in a specified endpoint.
 *
 * @param array $type
 *   The array describing the relation type, as returned by
 *   relation_type_load().
 * @param string $endpoint
 *   In which endpoint type the check should be performed: 'source' or 'target'.
 * @param string $entity_type
 *   The type of the entity.
 * @param int $entity_id
 *   The ID of the entity.
 *
 * @return array
 *   An array of IDs of relations that contain the entity in the given endpoint
 *   type or FALSE if no such relation exists.
 */
function relation_unique_exists($type, $endpoint, $entity_type, $entity_id) {

  $query = relation_query()
    ->entityCondition('bundle', $type->relation_type, '=')
    ->fieldCondition('endpoints', 'entity_type', $entity_type, '=', 0)
    ->fieldCondition('endpoints', 'entity_id', $entity_id, '=', 0);

  if ($endpoint == 'source' && $type->directional) {
    $query->fieldCondition('endpoints', 'r_index', 0, '=', 0);
  }
  elseif ($endpoint == 'target') {
    $query->fieldCondition('endpoints', 'r_index', 0, '>', 0);
  }
  $relations = $query->execute();

  return !empty($relations) ? array_keys($relations) : FALSE;
}
