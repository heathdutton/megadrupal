<?php

/**
 * @file
 * Grants role to user upon join a group
 */

define('OG_SITE_ROLE_ASSIGN_ROLE', 'og_site_role_assign_role');

/**
 * Implements hook_og_fields_info().
 */
function og_site_role_assign_og_fields_info() {
  $items[OG_SITE_ROLE_ASSIGN_ROLE] = array(
    'type' => array('group'),
    'description' => t('Set what role a user is granted site when they are joined to this space.'),
    'entity' => array('node'),
    'field' => array(
      'field_name' => OG_SITE_ROLE_ASSIGN_ROLE,
      'no_ui' => TRUE,
      'type' => 'list_integer',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values_function' => 'og_site_role_assign_allowed_roles'
      ),
    ),
    'instance' => array(
      'label' => t('Group Site Role'),
      'required' => FALSE,
      'default_value' => array(),
      'widget_type' => 'options_buttons',
      'view modes' => array(
        'full' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
  );
  return $items;
}

function og_site_role_assign_allowed_roles($field, $instance, $entity_type, $entity, $cacheable) {
  $roles = user_roles(TRUE);
  // Remove administer role as needed.
  if ($entity && !user_access('administer permissions') && ($rid = variable_get('user_admin_role', 0))) {
    unset($roles[$rid]);
  }
  unset($roles[DRUPAL_AUTHENTICATED_RID]);
  return $roles;
}

function _og_site_role_assign_get_rids($group_type, $gid) {
  if (($group_wrapper = entity_metadata_wrapper($group_type, $gid)) && !empty($group_wrapper->{OG_SITE_ROLE_ASSIGN_ROLE}) && ($rids = $group_wrapper->{OG_SITE_ROLE_ASSIGN_ROLE}->value())) {
    if (!is_array($rids)) {
      $rids = array($rids);
    }
  }
  return !empty($rids) ? array_filter($rids) : array();
}

function _og_site_role_assign_get_group_item($account, $field_name, $gid) {
  if (!empty($account->{$field_name}[LANGUAGE_NONE])) {
    foreach ($account->{$field_name}[LANGUAGE_NONE] as $key => $item) {
      if ($item['target_id'] == $gid) {
        return $key;
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_og_membership_insert().
 */
function og_site_role_assign_og_membership_insert(OgMembership $og_membership) {
  if ($og_membership->state == OG_STATE_ACTIVE && $og_membership->entity_type == 'user' && ($rids = _og_site_role_assign_get_rids($og_membership->group_type, $og_membership->gid))) {
    $account = user_load($og_membership->etid);
    if (!is_array($rids)) {
      $rids = array($rids);
    }
    $edit = array('roles' => $account->roles, 'data' => array('og_site_role_roles_added' => array()));
    foreach ($rids as $rid) {
      if (empty($account->roles[$rid])) {
        $edit['roles'][$rid] = $rid;
        // On removal of user, we check what roles to remove via this.
        $edit['data']['og_site_role_roles_added'][$rid] = $rid;
      }
    }
    if (!empty($edit['data']['og_site_role_roles_added'])) {
      // If this is insert, the membership array will not contain the current
      // group id, so add it so it's not removed.
      if (_og_site_role_assign_get_group_item($account, $og_membership->field_name, $og_membership->gid) === FALSE) {
        $account->{$og_membership->field_name}[LANGUAGE_NONE][] = array('target_id' => $og_membership->gid);

        // Invalidate all og static cache
        og_membership_invalidate_cache();

        // Clear the group content entity field cache.
        cache_clear_all('field:'. $og_membership->entity_type . ':' . $og_membership->etid, 'cache_field');
      }
      user_save($account, $edit);
    }
  }
}
/**
 * Implements hook_og_membership_update().
 */
function og_site_role_assign_og_membership_update(OgMembership $og_membership) {
  if ($og_membership->entity_type == 'user') {
    if ($og_membership->state != OG_STATE_ACTIVE) {
      // Remove role if they lot the the state for it.
      _og_site_role_assign_role_delete($og_membership, FALSE);
    }
    else {
      // In case membership is being approved so they now need the role.
      og_site_role_assign_og_membership_insert($og_membership);
    }
  }
}

/**
 * Implements hook_og_membership_delete().
 */
function og_site_role_assign_og_membership_delete(OgMembership $og_membership) {
  _og_site_role_assign_role_delete($og_membership);
}

function _og_site_role_assign_role_delete(OgMembership $og_membership, $is_delete = TRUE) {
  if ($og_membership->entity_type == 'user' && ($rids = _og_site_role_assign_get_rids($og_membership->group_type, $og_membership->gid))) {
    $account = user_load($og_membership->etid);
    // If any of these roles were added by this module, see if they need to be removed.
    if (!empty($account->data['og_site_role_roles_added']) && ($remove_roles = array_intersect($rids, $account->data['og_site_role_roles_added']))) {
      // Go through the user groups and see if user would have any of these
      // roles from another group. If so, don't remove them.
      foreach (og_get_entity_groups('user', $account) as $group_type => $group_ids) {
        // @TODO Turn this into an entityFieldQuery?
        foreach ($group_ids as $group_id) {
          if ($no_remove_rids = _og_site_role_assign_get_rids($group_type, $group_id)) {
            $remove_roles = array_diff($remove_roles, $no_remove_rids);
            if (empty($remove_roles)) {
              return;
            }
          }
        }
      }
      if (!empty($remove_roles)) {
        // If this is delete, the membership field will still have the group id
        // so need to remove it so it's not re-added.
        if ($is_delete) {
          $key = _og_site_role_assign_get_group_item($account, $og_membership->field_name, $og_membership->gid);
          if ($key !== FALSE) {
            unset($account->{$og_membership->field_name}[LANGUAGE_NONE][$key]);

            // Invalidate all og static cache
            og_membership_invalidate_cache();

            // Clear the group content entity field cache.
            cache_clear_all('field:'. $og_membership->entity_type . ':' . $og_membership->etid, 'cache_field');
          }
        }
        $remove_roles = array_flip($remove_roles);
        $edit = array(
          'roles' => array_diff_key($account->roles, $remove_roles),
          'data' => array(
            'og_site_role_roles_added' => array_diff_key($account->data['og_site_role_roles_added'], $remove_roles),
          ),
        );
        user_save($account, $edit);
      }
    }
  }
}

