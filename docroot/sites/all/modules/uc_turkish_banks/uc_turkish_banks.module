<?php

/**
 * @file
 *
 */


/**
 * Implements hook_help().
 */
function uc_turkish_banks_help($path, $arg) {
	switch ($path) {
		case 'admin/store/settings/payment/method/%':
			if ($arg[5] == 'uc_turkish_banks') {
				return '<p>' . t('Turkish Banks.') . '</p>';
			}
	}
}

/**
 * Implements hook_menu().
 */
function uc_turkish_banks_menu() {
	$items = array();

	$items['cart/bank/3d_hosting_complete'] = array(
			'title' => t('Order Complete'),
			'page callback' => 'uc_turkish_banks_3d_hosting_complete',
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
			'file' => 'uc_turkish_banks.pages.inc',
	);

	$items['cart/bank/3d_callback'] = array(
			'title' => t('Order Complete'),
			'page callback' => 'uc_turkish_banks_3d_callback',
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
			'file' => 'uc_turkish_banks.pages.inc',
	);

	return $items;
}

/**
 * Implements hook_init().
 */
function uc_turkish_banks_init() {
	global $conf;
	$conf['i18n_variables'][] = 'uc_turkish_banks_method_title';
	$conf['i18n_variables'][] = 'uc_turkish_banks_checkout_button';
}

/**
 * Implements hook_ucga_display().
 */
function uc_turkish_banks_ucga_display() {
	// Tell UC Google Analytics to display the e-commerce JS on the custom
	// order completion page for this module.
	if (arg(0) == 'cart' && arg(1) == 'bank' && arg(2) == 'complete') {
		return TRUE;
	}
}

/**
 * Implements hook_uc_payment_method().
 *
 * @see uc_payment_method_turkish_banks()
 */
function uc_turkish_banks_uc_payment_method() {
	$path = base_path() . drupal_get_path('module', 'uc_turkish_banks');
	$title = variable_get('uc_turkish_banks_method_title', t('Credit card on a secure server:'));
	$title .= '<br />' . theme('image', array(
			'path' => drupal_get_path('module', 'uc_turkish_banks') . '/logo.gif',
			'attributes' => array('class' => array('uc_turkish_banks-logo')),
	));

	$methods['turkish_banks'] = array(
			'name' => t('Turkish Banks (3D Hosting)'),
			'title' => $title,
			'review' => variable_get('uc_turkish_banks_check', FALSE) ? t('Credit card/eCheck') : t('Credit card'),
			'desc' => t('Turkish Banks Gateway'),
			'callback' => 'uc_payment_method_turkish_banks',
			'redirect' => 'uc_turkish_banks_form',
			'weight' => 3,
			'checkout' => TRUE,
			'no_gateway' => FALSE,
	);

	return $methods;
}

/**
 * Adds Turkish Banks settings to the payment method settings form.
 *
 * @see uc_turkish_banks_uc_payment_method()
 */
function uc_payment_method_turkish_banks($op, &$order, $form = NULL, &$form_state = NULL) {
	switch ($op) {
		case 'cart-details':
			$build = array();

			if (variable_get('uc_turkish_banks_check', FALSE)) {
				$build['pay_method'] = array(
						'#type' => 'select',
						'#title' => t('Select your payment type:'),
						'#default_value' => $_SESSION['pay_method'] == 'CK' ? 'CK' : 'CC',
						'#options' => array(
								'CC' => t('Credit card'),
								'CK' => t('Online check'),
						),
				);
				unset($_SESSION['pay_method']);
			}

			return $build;

		case 'cart-process':
			if (isset($form_state['values']['panes']['payment']['details']['pay_method'])) {
				$_SESSION['pay_method'] = $form_state['values']['panes']['payment']['details']['pay_method'];
			}
			return;

		case 'settings':
			 
			$form['3d_hosting_fieldset'] = array('#type' => 'fieldset',
			'#title' => t('3D Hosting yöntemi için sanalPOS mağaza tanımları.'),
			'#collapsible' => true,
			'#collapsed' => false,
			'#weight' => 0,
			);
			 
			$form['3d_hosting_fieldset']['3d_hosting_clientid'] = array('#type' => 'textfield',
					'#title' => t('Client Id'),
					'#default_value' => variable_get('3d_hosting_clientid'),
					'#size' => 30,
					'#weight' => 1,
					'#required' => true,
			);
			$form['3d_hosting_fieldset']['3d_hosting_storekey'] = array('#type' => 'textfield',
					'#title' => t('Store Key'),
					'#default_value' => variable_get('3d_hosting_storekey'),
					'#size' => 20,
					'#weight' => 2,
					'#required' => true,
			);
			$form['3d_hosting_fieldset']['3d_hosting_post_url'] = array('#type' => 'textfield',
					'#title' => t('POST URL'),
					'#default_value' => variable_get('3d_hosting_post_url'),
					'#size' => 100,
					'#weight' => 3,
					'#required' => true,
			);
			return $form;
	}
}

/**
 * Form to build the submission to secure server.
 */
function uc_turkish_banks_form($form, &$form_state, $order) {

	$clientId = variable_get('3d_hosting_clientid');
	$amount = uc_currency_format($order->order_total, FALSE, FALSE, '.');
	$currency = '949'; // TL için
	$oid = $order->order_id;                    //Siparis numarasi
	$okUrl = url('cart/bank/complete/'. uc_cart_get_id(),array('absolute' => TRUE));
	$failUrl = url('cart/bank/complete/'. uc_cart_get_id(),array('absolute' => TRUE));
	$rnd = microtime();
	$islemtipi= 'Auth';
	$storekey = variable_get('3d_hosting_storekey');
	$taksit="";

	$hashstr = $clientId . $oid . $amount . $okUrl . $failUrl . $islemtipi . $taksit . $rnd . $storekey;
	$hash = base64_encode(pack('H*',sha1($hashstr)));


	$data = array(
			'clientid' => $clientId,
			'amount' => $amount,
			'currency' => $currency,
			'firmaadi' => variable_get('uc_store_name'),
			'oid' => $oid,
			'okUrl' => $okUrl,
			'failUrl' => $failUrl,
			'islemtipi' => $islemtipi,
			'taksit' => $taksit,
			'rnd' => $rnd,
			'hash' => $hash,
			'storetype' => '3d_pay_hosting',
			'lang' => 'tr',
			'refreshtime' => '0',
				
			'Fadres' => drupal_substr($order->billing_street1, 0, 64),
			'Fadres2' => drupal_substr($order->billing_street2, 0, 64),
			'city' => drupal_substr($order->billing_city, 0, 64),
			'state' => uc_get_zone_code($order->billing_zone),
			'zip' => drupal_substr($order->billing_postal_code, 0, 16),
			'email' => drupal_substr($order->primary_email, 0, 64),
			'phone' => drupal_substr($order->billing_phone, 0, 16),
	);

	$form['#action'] = variable_get('3d_hosting_post_url');

	foreach ($data as $name => $value) {
		$form[$name] = array('#type' => 'hidden', '#value' => $value);
	}

	$form['actions'] = array('#type' => 'actions');
	$form['actions']['submit'] = array(
			'#type' => 'submit',
			'#value' => variable_get('uc_turkish_banks_checkout_button', t('Submit Order')),
	);

	return $form;
}

// As A GateWay


/*******************************************************************************
 * Hook Functions (Ubercart)
******************************************************************************/

function uc_turkish_banks_uc_payment_gateway() {
	$gateways['turkish_bank'] = array(
			'title' => t('Anlaşmalı Bankanız (3D)'),
			'description' => t('Anlaşmalı bankanız ile 3D yöntemi ile ödeme alır.'),
			'settings' => 'uc_turkish_banks_settings_form',
			'credit' => 'uc_turkish_banks_charge',
	);

	return $gateways;
}

// This function requires modelu reinstall
function uc_turkish_banks_form_uc_cart_checkout_review_form_alter(&$form, $form_state, $form_id) {
	$order = uc_order_load($_SESSION['cart_order']);
	$cc_data = uc_credit_cache($order->order_id);
	// if no credit card data is receiced then apply 3D rules otherwise stay where you are...
	if (count($cc_data)>0)
	{
		//var_dump($order);
		$clientId = variable_get('3d_clientid');
		$amount = uc_currency_format($order->order_total, FALSE, FALSE, '.');
		$currency = '949'; // TL için
		$oid = $order->order_id;
		$okUrl = url('cart/bank/3d_callback/'.uc_cart_get_id(),array('absolute' => TRUE));
		$failUrl = url('cart/bank/3d_callback/'.uc_cart_get_id(),array('absolute' => TRUE));
		$rnd = microtime();
		$islemtipi= 'Auth';
		$storekey = variable_get('3d_storekey');

		$hashstr = $clientId . $oid . $amount . $okUrl . $failUrl . $islemtipi. $rnd . $storekey;
		$hash = base64_encode(pack('H*',sha1($hashstr)));

			
		$data = array(
				'clientid' => $clientId,
				'amount' => $amount,
				'currency' => $currency,
				'firmaadi' => variable_get('uc_store_name'),
				'oid' => $oid,
				'okUrl' => $okUrl,
				'failUrl' => $failUrl,
				'islemtipi' => $islemtipi,
				'rnd' => $rnd,
				'hash' => $hash,
				'storetype' => '3d',
				'lang' => 'tr',
				'pan' => $cc_data['cc_number'],
				'Ecom_Payment_Card_ExpDate_Year' => substr($cc_data['cc_exp_year'],-2),
				'Ecom_Payment_Card_ExpDate_Month' => $cc_data['cc_exp_month'],
		);

		$form['#action'] = variable_get('3d_post_url');

		foreach ($data as $name => $value) {
			$form[$name] = array('#type' => 'hidden', '#value' => $value);
		}

		$form['actions'] = array('#type' => 'actions');
		$form['actions']['submit'] = array(
				'#type' => 'submit',
				'#value' => variable_get('uc_turkish_banks_checkout_button', t('Submit Order')),
		);
		return $form;
	}
}

/*******************************************************************************
 * Callback Functions, Forms, and Tables
******************************************************************************/

/**
 * Callback for payment gateway settings for 3D method.
 */
function uc_turkish_banks_settings_form($form, &$form_state) {

	 
	$form['3d_fieldset'] = array('#type' => 'fieldset',
			'#title' => t('3D yöntemi için sanalPOS mağaza tanımları.'),
			'#collapsible' => true,
			'#collapsed' => false,
			'#weight' => 0,
	);

	$form['3d_fieldset']['3d_clientid'] = array('#type' => 'textfield',
			'#title' => t('Client Id'),
			'#default_value' => variable_get('3d_clientid'),
			'#size' => 30,
			'#weight' => 1,
			'#required' => true,
	);
	$form['3d_fieldset']['3d_storekey'] = array('#type' => 'textfield',
			'#title' => t('Store Key'),
			'#default_value' => variable_get('3d_storekey'),
			'#size' => 20,
			'#weight' => 2,
			'#required' => true,
	);
	$form['3d_fieldset']['3d_post_url'] = array('#type' => 'textfield',
			'#title' => t('POST URL'),
			'#default_value' => variable_get('3d_post_url'),
			'#size' => 100,
			'#weight' => 3,
			'#required' => true,
	);
	$form['3d_fieldset']['3d_api_username'] = array('#type' => 'textfield',
			'#title' => t('API Username'),
			'#default_value' => variable_get('3d_api_username'),
			'#size' => 30,
			'#weight' => 4,
			'#required' => true,
	);
	$form['3d_fieldset']['3d_api_password'] = array('#type' => 'textfield',
			'#title' => t('API Password'),
			'#default_value' => variable_get('3d_api_password'),
			'#size' => 30,
			'#weight' => 5,
			'#required' => true,
	);
	$form['3d_fieldset']['3d_api_url'] = array('#type' => 'textfield',
			'#title' => t('API URL'),
			'#default_value' => variable_get('3d_api_url'),
			'#size' => 100,
			'#weight' => 5,
			'#required' => true,
	);
	return $form;
}

function uc_turkish_banks_charge($order_id, $amount, $data) {

	// 3d MPI repsonses bact to uc_turkish_banks_3d_complete
	// This method is here to enable the gateway.
	// So do not remove...
}

