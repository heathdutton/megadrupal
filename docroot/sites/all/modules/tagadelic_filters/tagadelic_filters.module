<?php

define('TAGADELIC_FILTERS_DEFAULT_BLOCK_COUNT', 5);
define('TAGADELIC_FILTERS_DEFAULT_TAG_COUNT', 12);
define('TAGADELIC_FILTERS_DEFAULT_FILTER_KEY', 'tid');

/**
 * Implements hook_menu().
 */
function tagadelic_filters_menu() {
  $items = array();
  $items['admin/config/content/tagadelic/filters'] = array(
    'title' => 'Tagadelic filter blocks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tagadelic_filters_settings_form'),
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_LOCAL_ACTION,
  );

  $items['tagadelic_filters/block/%'] = array(
    'title' => 'Tags',
    'page callback' => 'tagadelic_filters_page_chunk',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );
    
  return $items;
}

/**
 * Implements hook_block_info().
 */
function tagadelic_filters_block_info() {
  $blocks = array();
  $block_count = variable_get('tagadelic_filters_block_count', TAGADELIC_FILTERS_DEFAULT_BLOCK_COUNT);
  for ($i = 1; $i <= $block_count; $i++) {
    $blocks[$i] = array();
    $blocks[$i]['info'] = t('Tagadelic filters block !count', array('!count' => $i));
    $description = variable_get('tagadelic_filters_block_' . $i. '_description', '');
    if ($description != '') {
      $blocks[$i]['info'] .= ': ' . $description;
    }
  }
  return $blocks;  
}

/**
 * Implements hook_block_configure().
 */
function tagadelic_filters_block_configure($delta = '') {
  $form = array();
  $vocabs = taxonomy_get_vocabularies();
  $options = array(-1 => t('- Select -'));
  foreach ($vocabs as $vid => $vocab) {
    $options[$vid] = check_plain($vocab->name);
  }
  $prefix = 'tagadelic_filters_block_' . $delta . '_';
  $form[$prefix . 'description'] = array(
      '#title' => t('Description'),
      '#type' => 'textfield',
      '#default_value' => variable_get($prefix . 'description', ''),
  );
  $form[$prefix . 'vocabulary'] = array(
    '#title' => t('Vocabulary'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => variable_get($prefix . 'vocabulary', -1),
  );
  $form[$prefix . 'filter_key'] = array(
    '#title' => t('Filter key'),
    '#type' => 'textfield',
    '#description' => t('The filter key of the Views Exposed Filter to populate.'),
    '#default_value' => variable_get($prefix . 'filter_key', TAGADELIC_FILTERS_DEFAULT_FILTER_KEY),
    '#element_validate' => array('tagadelic_filters_filter_key_validate'),
  );
  $form[$prefix . 'path'] = array(
    '#title' => t('Path'),
    '#type' => 'textfield',
    '#description' => t('The path of the View with exposed filters needing populating. Leave blank to use current page.'),
    '#default_value' => variable_get($prefix . 'path', ''),
  );
  $form[$prefix . 'tag_count'] = array(
    '#title' => t('Tag count'),
    '#type' => 'select',
    '#options' => array(
      -1 => t('Use default (!default)', array('!default' => variable_get('tagadelic_filters_tag_count_default', TAGADELIC_FILTERS_DEFAULT_TAG_COUNT))),
      0 => t('Show all'),
    ) + array_combine(range(1, 100), range(1, 100)),
    '#default_value' => variable_get($prefix . 'tag_count', -1),
  );
  $form[$prefix . 'more_text'] = array(
    '#title' => t('More link title text'),
    '#type' => 'textfield',
    '#default_value' => variable_get($prefix . 'more_text', t('more tags')),
  );
  $form[$prefix . 'show_reset'] = array(
    '#title' => t('Show reset link'),
    '#type' => 'select',
    '#options' => array(
      0 => t('Never show'),
      1 => t('Show when a filter is applied'),
    ),
    '#default_value' => variable_get($prefix . 'show_reset', 1),
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function tagadelic_filters_block_save($delta = '', $edit = array()) {
  foreach ($edit as $key => $value) {
    variable_set($key, $value);
  }  
}

/**
 * Implements hook_block_view().
 */
function tagadelic_filters_block_view($delta = '') {
  $block = array();
  $prefix = 'tagadelic_filters_block_' . $delta . '_';
  $vid = variable_get($prefix . 'vocabulary');
  if ($vid != -1 && $vocab = taxonomy_vocabulary_load($vid)) {
    $tag_count = variable_get($prefix . 'tag_count', -1);
    if ($tag_count == -1) {
      $tag_count = variable_get('tagadelic_filters_tag_count_default', TAGADELIC_FILTERS_DEFAULT_TAG_COUNT);
    }
    elseif ($tag_count == 0) {
      $tag_count = 10000; // Shouldn't need to do this, but tagadelic_get_weighted_tags will set it to 60 otherwise.
    }
    $tags = tagadelic_get_weighted_tags(array($vid), variable_get('tagadelic_levels', 6), $tag_count);
    $tags = tagadelic_sort_tags($tags);
    $tag_path = variable_get($prefix . 'path', '');
    $filter_key = variable_get($prefix . 'filter_key', TAGADELIC_FILTERS_DEFAULT_FILTER_KEY);
    $block['subject'] = t('Filter !vocab', array('!vocab' => $vocab->name));
    $block['content'] = theme('tagadelic_filters_weighted', array(
    	'terms' => $tags,
    	'filter_key' => $filter_key,
    	'path' => $tag_path,
    ));
    if (count($tags) >= $tag_count) {
      $query = array();
      if ($tag_path == '') {
        $query['return_path'] = urlencode($_GET['q']);
      }
      // Can't use theme('more_link') here because it doesn't give us the query string option.
      $block['content'] .= '<div class="more-link">' . l(t('More'), 'tagadelic_filters/block/' . $delta, array(
      	'attributes' => array(
      		'title' => variable_get($prefix . 'more_text', t('more tags')),
        ),
        'query' => $query,
      )) . '</div>';
    }
    if (!empty($_GET[$filter_key]) && variable_get($prefix . 'show_reset', 1) && !empty($block['content'])) {
      $block['content'] .= '<div class="reset-link">' . l(t('Reset'), $_GET['q'], array(
        'query' => drupal_get_query_parameters($_GET, array('q', $filter_key)),
      )) . '</div>';
    }
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function tagadelic_filters_theme() {
  return array(
    'tagadelic_filters_weighted' => array(
    	'arguments' => array(
    		'terms' => array(),
    		'filter_key' => '',
    		'path' => '',
    	),
    ),
  );
}

function tagadelic_filters_settings_form($form, $form_state) {
  $form['tagadelic_filters_block_count'] = array(
    '#title' => t('Block count'),
    '#type' => 'select',
    '#options' => range(0, 20),
    '#default_value' => variable_get('tagadelic_filters_block_count', TAGADELIC_FILTERS_DEFAULT_BLOCK_COUNT),
  );
  $form['tagadelic_filters_tag_count_default'] = array(
    '#title' => t('Default tag count'),
    '#type' => 'select',
    '#options' => array(0 => t('Show all')) + array_combine(range(1, 100), range(1, 100)),
    '#default_value' => variable_get('tagadelic_filters_tag_count_default', TAGADELIC_FILTERS_DEFAULT_TAG_COUNT),
  );    
  return system_settings_form($form);
}

/**
 * Menu callback renders a tagadelic filters page.
 */
function tagadelic_filters_page_chunk($delta) {
  // TODO: Check the query string for a return path.
  $prefix = 'tagadelic_filters_block_' . $delta . '_';
  $vid = variable_get($prefix . 'vocabulary');
  if ($vid != -1 && $vocab = taxonomy_vocabulary_load($vid)) {
    $tags = tagadelic_get_weighted_tags(array($vid), variable_get('tagadelic_levels', 6), variable_get('tagadelic_page_amount', '60'));
    $tags = tagadelic_sort_tags($tags);
    if (empty($_GET['return_path'])) {
      $return_path = variable_get($prefix . 'path', '');
    }
    else {
      $return_path = $_GET['return_path'];
    }
    $output = theme('tagadelic_filters_weighted', array(
      'terms' => $tags,
      'filter_key' => variable_get($prefix . 'filter_key', TAGADELIC_FILTERS_DEFAULT_FILTER_KEY),
      'path' => $return_path,     	
    ));
    $output = "<div class=\"wrapper tagadelic\">$output</div>";
    return $output;
  }
  return drupal_not_found();
}

/**
 * Theme function that renders the HTML for the tags.
 *
 * @ingroup themable
 */
function theme_tagadelic_filters_weighted(array $vars) {
  $terms = $vars['terms'];
  $filter_key = $vars['filter_key'];
  $path = $vars['path'];
  if (empty($path)) {
    $path = $_GET['q'];
  }
  // TODO: Add an option to include query string or not.
  // For now just include the current query string.
  $query = drupal_get_query_parameters($_GET, array('q', 'return_path'));
  $output = '';
  foreach ($terms as $term) {
    $query[$filter_key] = $term->tid;
    $output .= l($term->name, $path, array(
      'attributes' => array(
        'class' => array("tagadelic", "level" . $term->weight),
        'rel' => 'tag',
        'title'  => $term->description,
      ),
      'query' => $query,
    )) . "\n";
  }
  return $output;
}

function tagadelic_filters_filter_key_validate($element, &$form_state) {
  if ($element['#value'] == 'q') {
    form_error($element, t('You cannot use q as the filter key.'));
  }  
}