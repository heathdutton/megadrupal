<?php

/**
 * Implementation of hook_feeds_processor_targets_alter().
 */
function uc_feeds_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  // Proceed only if the content_type is a product type.
  if ($entity_type == 'node' && in_array($bundle_name, uc_product_types())) {
    // Model
    $targets['model'] = array(
      'name' => t('UC: Model/SKU'),
      'callback' => 'uc_feeds_set_target',
      'description' => 'Ubercart:' . t('Model/SKU'),
    );
    // List price
    $targets['list_price'] = array(
      'name' => t('UC: List price'),
      'callback' => 'uc_feeds_set_target',
      'description' => 'Ubercart:' . t('List price'),
    );
    // Cost
    $targets['cost'] = array(
      'name' => t('UC: Cost'),
      'callback' => 'uc_feeds_set_target',
      'description' => 'Ubercart:' . t('Cost'),
    );
  // Name
    $targets['Name'] = array(
      'name' => t('UC: Name'),
      'callback' => 'uc_feeds_set_target',
      'description' => 'Ubercart:' . t('Name'),
  );
    // Sell price
    $targets['sell_price'] = array(
      'name' => t('UC: Sell price'),
      'callback' => 'uc_feeds_set_target',
      'description' => 'Ubercart:' . t('Sell price'),
    );
    // Weight
    $targets['weight'] = array(
      'name' => t('UC: Weight'),
      'callback' => 'uc_feeds_set_target',
      'description' => 'Ubercart:' . t('Weight'),
    );
    $targets['weight_units'] = array(
      'name' => t('UC: Weight Unit'),
      'callback' => 'uc_feeds_set_target',
      'description' => 'Ubercart:' . t('Weight Unit'),
    );
    
    // Attributes
    if (module_exists("uc_attribute")) {
      $attribs = uc_attribute_load_multiple();
      
      foreach ($attribs as $attrib) {
        $aid = $attrib->aid;
        
        foreach ($attrib->options as $option) {
          $oid = $option->oid;
          
          // Attribute Price
          $targets['attribute_price_' . $aid . "_" . $oid] = array(
            'name' => t('UCA Price: ' . $attrib->name . ":" . $option->name),
            'callback' => 'uc_feeds_set_target',
            'description' => 'Ubercart:' . t('Attribute Price:' . $attrib->name . ":" . $option->name),
          );

          // Attribute Cost
          $targets['attribute_cost_' . $aid . "_" . $oid] = array(
            'name' => t('UCA Cost: ' . $attrib->name . ":" . $option->name),
            'callback' => 'uc_feeds_set_target',
            'description' => 'Ubercart:' . t('Attribute Cost:' . $attrib->name . ":" . $option->name),
          );

          // Attribute Weight
          $targets['attribute_weight_' . $aid . "_" . $oid] = array(
            'name' => t('UCA Weight: ' . $attrib->name . ":" . $option->name),
            'callback' => 'uc_feeds_set_target',
            'description' => 'Ubercart:' . t('Attribute Weight:' . $attrib->name . ":" . $option->name),
          );
        }
      }
    }
  }
}

 /**
  * user has decided to map to and $value contains the value of the feed item
  * element the user has picked as a source.
  */
function uc_feeds_set_target($source, $node, $target, $value) {
  if (!is_array($value)) {
    if (substr($target, 0, 10) != "attribute_") {
      $node->$target = $value;
    }
    else {
      $ao_arr = explode("_", $target);
      $aid = $ao_arr[2];
      $oid = $ao_arr[3];
      
      // just flag the attributes for now - node API will take care of saving them
      $node->uc_feeds_flag = "Attributes";
      
    // If value is empty, it's not an attribute we want to use
      if (substr($target, 0, 15) == "attribute_price" && $value != '') {
    $node->attributes[$aid]->options[$oid]->price = $value;
      }
      elseif (substr($target, 0, 14) == "attribute_cost" && $value != '') {
    $node->attributes[$aid]->options[$oid]->cost = $value;
      }
      elseif (substr($target, 0, 16) == "attribute_weight" && $value != '') {
        $node->attributes[$aid]->options[$oid]->weight = $value;
      }
    }
  }
}

/**
 * Implements hook_feeds_node_insert().
 */
function uc_feeds_node_insert($node) {
  if (uc_product_is_product($node) && module_exists("uc_attribute")) {
    foreach ($node->attributes as $aid => $feedattrib) {
      // Load all options for added attributes. (Will only enable the ones set in the import)
      $attribute = uc_attribute_load($aid);
      
      foreach ($attribute->options as $option) {
    // some part of the option is set, default all empty parts to 0 or ''
        if (isset($node->attributes[$aid]->options[$option->oid])) {
          $option->price = ($node->attributes[$aid]->options[$option->oid]->price != '') ? $node->attributes[$aid]->options[$option->oid]->price : 0;
          $option->cost = ($node->attributes[$aid]->options[$option->oid]->cost != '') ? $node->attributes[$aid]->options[$option->oid]->cost : 0;
          $option->weight = ($node->attributes[$aid]->options[$option->oid]->weight != '') ? $node->attributes[$aid]->options[$option->oid]->weight : 0;

          $id = db_insert('uc_product_options')->fields(array(
            'nid' => $node->nid,
            'oid' => $option->oid,
            'cost' => $option->cost,
            'price' => $option->price,
            'weight' => $option->weight,
            'ordering' => $option->ordering,
          ))->execute();
    }
      }
      
      // Make the first option (if any) the default.
      $option = reset($attribute->options);
      if ($option) {
        $oid = $option->oid;
      }
      else {
        $oid = 0;
      }
      // TODO Please convert this statement to the D7 database API syntax.

      //Drupal 7 piece added
      $res = db_select('uc_attributes', 'c')
      ->fields('c')
      ->condition('aid',$aid)
      ->execute()
      ->fetchAssoc();

      $nid = db_insert('uc_product_attributes') // Table name no longer needs {}
      ->fields(array(
          'nid' => $node->nid,
          'aid' => $res['aid'],
          'label' => $res['label'],
          'ordering' => $res['ordering'],
          'default_option' => $oid,
          'required' => $res['required'],
          'display' => $res['display'],
        ))
      ->execute();
    }
  }
}