<?php

/**
 * @file
 * Implements NetCommerce (http://www.netcommerce.com.lb/) in Drupal Commerce checkout.
 */

/**
 * Implements hook_menu().
 */
function commerce_netcommerce_menu() {
  $items = array();

  $items['netcommerce-response/%'] = array(
    'page callback' => 'commerce_netcommerce_response_process',
    'page arguments' => array(1),
    'access callback' => 'commerce_netcommerce_response_validate',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Validates an IPN-style callback from NetCommerce.
 *
 * @return bool
 */
function commerce_netcommerce_response_validate($transaction_id) {

  $settings = commerce_netcommerce_get_settings();

  if (!empty($settings['watchdog'])) {
    // Log full transaction data.
    watchdog('commerce_netcommerce', 'NetCommerce Response @response', array('@response' => print_r($_REQUEST)));
  }

  $expected_signature = hash('sha256',
    $_REQUEST['txtMerchNum'] . $_REQUEST['txtIndex'] . $_REQUEST['txtAmount'] . $_REQUEST['txtCurrency'] .
    $_REQUEST['txtNumAut'] . $_REQUEST['RespVal'] . $_REQUEST['RespMsg'] . $settings['sha_key']);

  if ($transaction_id == $_REQUEST['txtIndex'] && $settings['merchant_number'] == $_REQUEST['txtMerchNum'] && $expected_signature == $_REQUEST['signature']) {

    $transaction = commerce_payment_transaction_load($transaction_id);
    if (!empty($transaction)) {
      $order = commerce_order_load($transaction->order_id);

      if (!empty($order)) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Process a response call from NetCommerce.
 */
function commerce_netcommerce_response_process($transaction_id) {
  $transaction = commerce_payment_transaction_load($transaction_id);
  $order = commerce_order_load($transaction->order_id);

  $transaction->remote_id = $_REQUEST['txtNumAut'];
  $transaction->amount = commerce_currency_decimal_to_amount($_REQUEST['txtAmount'], commerce_netcommerce_get_currency_code_by_id($_REQUEST['txtCurrency']));
  $transaction->currency_code = commerce_netcommerce_get_currency_code_by_id($_REQUEST['txtCurrency']);
  $transaction->payload[REQUEST_TIME] = $_REQUEST;

  switch ($_REQUEST['RespVal']) {
    case '0':
      drupal_set_message(t('Error processing payment: @reason. Transaction #@transaction_id failed.', array('@reason' => $_REQUEST['RespMsg'], '@transaction_id' => $transaction_id)), 'error');

      // Set the transaction's statuses based on the IPN's payment_status.
      $transaction->remote_status = 'Failed';
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t("The payment has failed with result: Code: @code, Message: @message", array('@code' => $_REQUEST['RespVal'], '@message' => $_REQUEST['RespMsg']));

      // Save the transaction information.
      commerce_payment_transaction_save($transaction);
      commerce_payment_redirect_pane_previous_page($order);
      drupal_goto('checkout/' . $order->order_id . '/review');
      break;

    case '1':
      // Set the transaction's statuses based on the IPN's payment_status.
      $transaction->remote_status = 'Completed';
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t('The payment has completed.');

      // Save the transaction information.
      commerce_payment_transaction_save($transaction);
      drupal_set_message(t("Transaction #@transaction_id successful. Authorization Number: @authNum. Total: @total",
        array('@transaction_id' => $transaction_id, '@authNum' => $_REQUEST['txtNumAut'], '@total' => commerce_currency_format($transaction->amount, $transaction->currency_code))));
      commerce_payment_redirect_pane_next_page($order);
      drupal_goto('checkout/' . $order->order_id . '/payment');
      break;
  }
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_netcommerce_commerce_payment_method_info() {
  $payment_methods = array();

  $icons = commerce_netcommerce_icons();
  $display_title = t('NetCommerce');
  $display_title .= '<div class="commerce-netcommerce-logo">' .
    theme('image', array(
      'path' => 'https://www.netcommercepay.com/logo/NCseal_S.gif',
      'title' => 'NetCommerce',
      'alt' => 'NetCommerce',
      'attributes' => array(
        'class' => array('commerce-netcommerce-logo'),
      ),
    )) .
    '</div>';
  $display_title .= '<div class="commerce-netcommerce-icons">' . implode(' ', $icons) . '</div>';

  $payment_methods['netcommerce'] = array(
    'base' => 'commerce_netcommerce',
    'title' => t('NetCommerce'),
    'short_title' => t('NetCommerce'),
    'display_title' => $display_title,
    'description' => t('NetCommerce'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Returns the default settings for the NetCommerce payment method.
 */
function commerce_netcommerce_default_settings() {
  return array(
    'merchant_number' => '',
    'sha_key' => '',
    'payment_mode' => 'test',
    'language' => 'EN',
    'watchdog' => FALSE,
    'show_payment_instructions' => FALSE,
    'payment_instructions_text' => 'Continue with checkout to complete payment via NetCommerce.',
    'payment_url' => 'https://www.netcommercepay.com/iPAY/default.asp',
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_netcommerce_settings_form($settings = array()) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_netcommerce_default_settings();

  $form['merchant_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Number'),
    '#default_value' => $settings['merchant_number'],
  );
  $form['sha_key'] = array(
    '#type' => 'textfield',
    '#title' => t('SHA Key'),
    '#default_value' => $settings['sha_key'],
  );
  $form['payment_mode'] = array(
    '#type' => 'select',
    '#title' => t('Payment Mode'),
    '#options' => array(
      'test' => t('Testing Mode'),
      'real' => t('Real Mode'),
    ),
    '#default_value' => $settings['payment_mode'],
  );
  $form['language'] = array(
    '#type' => 'select',
    '#title' => t('Language'),
    '#options' => array(
      'EN' => t('English'),
      'AR' => t('Arabic'),
    ),
    '#default_value' => $settings['language'],
  );
  $form['show_payment_instructions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show a message on the checkout form when NetCommerce is selected.'),
    '#default_value' => $settings['show_payment_instructions'],
  );
  $form['payment_instructions_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Message to display.'),
    '#default_value' => $settings['payment_instructions_text'],
  );
  $form['watchdog'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log full transaction information from the NetCommerce response to the system log.'),
    '#default_value' => $settings['watchdog'],
  );
  $form['payment_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Payment URL'),
    '#default_value' => $settings['payment_url'],
  );

  return $form;
}

/**
 * Payment method callback: adds a message and CSS to the submission form if
 * enabled in the payment method settings.
 */
function commerce_netcommerce_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  if (!empty($payment_method['settings']['show_payment_instructions'])) {
    $instructions = t('Continue with checkout to complete payment via NetCommerce.');
    if (!empty($payment_method['settings']['payment_instructions_text'])) {
      $instructions = $payment_method['settings']['payment_instructions_text'];
    }

    $form['netcommerce_information'] = array(
      '#markup' => '<span class="commerce-netcommerce-info">' . $instructions . '</span>',
    );
  }

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_netcommerce_form_commerce_checkout_form_alter(&$form, &$form_state) {
  // If this checkout form contains the payment method radios...
  if (!empty($form['commerce_payment']['payment_method']['#options'])) {
    // Loop over its options array looking for a NetCommerce option.
    foreach (array_keys($form['commerce_payment']['payment_method']['#options']) as $key) {
      list($method_id, $rule_name) = explode('|', $key);
      // If we find NetCommerce, include its CSS on the form and exit the loop.
      if ($method_id == 'netcommerce') {
        $form['commerce_payment']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'commerce_netcommerce') . '/theme/commerce_netcommerce.theme.css';
        break;
      }
    }
  }
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a NetCommerce form.
 */
function commerce_netcommerce_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['merchant_number']) || empty($payment_method['settings']['sha_key'])) {
    drupal_set_message(t('NetCommerce is not configured for use.'), 'error');
    return array();
  }

  return commerce_netcommerce_order_form($form, $form_state, $order, $payment_method['settings']);
}

/**
 * Builds a NetCommerce form from an order object.
 *
 * @param $order
 *   The fully loaded order being paid for.
 * @param $settings
 *
 * @return
 *   A renderable form array.
 */
function commerce_netcommerce_order_form($form, &$form_state, $order, $settings) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  $amount = $wrapper->commerce_order_total->amount->value();
  $currency_code = $wrapper->commerce_order_total->currency_code->value();


  // NetCommerce will not allow the same order ID to be processed
  // twice. So, if customer fails to enter a valid credit card,
  // they can't come back to Commerce, and then go back to NetCommerce.
  // So, to get around this limitation, we need to send them a
  // transaction ID instead of the order ID.
  $transaction = commerce_payment_transaction_new('netcommerce', $order->order_id);
  $transaction->instance_id = commerce_netcommerce_get_method_instance_id();
  $transaction->remote_id = '';
  $transaction->amount = $amount;
  $transaction->currency_code = $currency_code;
  $transaction->remote_status = 'Pending';
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  commerce_payment_transaction_save($transaction);

  // Ensure a default value for the payment_method setting.
  $settings += array('payment_method' => '');

  $data = array(
    // Essential transaction data.
    'payment_mode' => $settings['payment_mode'],
    'txtAmount' => commerce_currency_amount_to_decimal($amount, $currency_code),
    'txtCurrency' => commerce_netcommerce_get_currency_id_by_code($currency_code),
    'txtIndex' => $transaction->transaction_id,
    'txtMerchNum' => $settings['merchant_number'],
    'txthttp' => url('netcommerce-response/' . $transaction->transaction_id, array('absolute' => TRUE)),
  );

  // Send option language data if it's not English.
  if (!empty($settings['language']) && $settings['language'] != 'EN') {
    $data['Lng'] = $settings['language'];
  }

  // Calculate the signature.
  $data['signature'] = hash('sha256',
    $data['txtAmount']  . $data['txtCurrency']  . $data['txtIndex']  .
    $data['txtMerchNum']  . $data['txthttp']  . $settings['sha_key']);

  // Add values from billing address
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
  $data['first_name'] = $billing_address['first_name'];
  $data['last_name'] = $billing_address['last_name'];
  $data['email'] = $order_wrapper->mail->value();
  $data['address_line1'] = $billing_address['thoroughfare'];
  $data['address_line2'] = $billing_address['premise'];
  $data['city'] = $billing_address['locality'];
  $data['state'] = $billing_address['administrative_area'];
  $data['postal_code'] = $billing_address['postal_code'];
  $data['country'] = $billing_address['country'];

  // Allow modules to alter parameters of the API request.
  drupal_alter('commerce_netcommerce_order_form_data', $data, $order);

  $form['#action'] = $settings['payment_url'];

  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }

  // Write the outgoing data out to the payment transaction record.
  $transaction->payload[REQUEST_TIME] = $data;
  commerce_payment_transaction_save($transaction);

  $form['netcommerce_seal'] = array(
    '#type' => 'markup',
    '#markup' => '<div class="commerce-netcommerce-logo">' .
    theme('image', array(
      'path' => 'https://www.netcommercepay.com/logo/NCseal_S.gif',
      'title' => 'NetCommerce',
      'alt' => 'NetCommerce',
      'attributes' => array(
        'class' => array('commerce-netcommerce-logo'),
      ),
    )) .
    '</div>',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to NetCommerce'),
  );

  return $form;
}

/**
 * Returns the NetCommerce currency ID from the Drupal Commerce currency code.
 *
 * @param $currency_code
 *   Drupal Commerce currency code.
 * @return int
 *   NetCommerce currency ID
 */
function commerce_netcommerce_get_currency_id_by_code($currency_code) {
  switch ($currency_code) {
    case 'USD':
      return 840;
    case 'LBP':
      return 422;
    default:
      return 0;
  }
}

/**
 * Returns the Drupal Commerce currency code from the NetCommerce currency ID.
 *
 * @param $currency_id
 *   NetCommerce currency ID
 * @return string
 *   Drupal Commerce currency code
 */
function commerce_netcommerce_get_currency_code_by_id($currency_id) {
  switch ($currency_id) {
    case 840:
      return 'USD';
    case 422:
      return 'LBP';
    default:
      return '';
  }
}

/**
 * Returns an array of NetCommerce payment method icon img elements.
 *
 * @return
 *   The array of themed payment method icons keyed by name: visa, mastercard
 */
function commerce_netcommerce_icons() {
  $icons = array();

  $payment_methods = array(
    'visa' => t('Visa'),
    'mastercard' => t('Mastercard'),
  );

  foreach ($payment_methods as $name => $title) {
    $variables = array(
      'path' => drupal_get_path('module', 'commerce_netcommerce') . '/images/' . $name . '.gif',
      'title' => $title,
      'alt' => $title,
      'attributes' => array(
        'class' => array('commerce-netcommerce-icon'),
      ),
    );
    $icons[$name] = theme('image', $variables);
  }

  return $icons;
}


/**
 * Returns the settings for this payment processor.
 *
 * @return array
 *   Settings for this payment processor
 */
function commerce_netcommerce_get_settings() {
  $settings = NULL;
  $instance = commerce_payment_method_instance_load(commerce_netcommerce_get_method_instance_id());
  if (!empty($instance['settings'])) {
    $settings = $instance['settings'];
  }
  return $settings;
}

/**
 * Returns the method instance ID of the payment processor.
 *
 * @return null|string
 *   Method Instance ID of the payment processor
 */
function commerce_netcommerce_get_method_instance_id() {

  $event = rules_get_cache('event_commerce_payment_methods');

  // Only build the options array if payment method Rules are enabled.
  if (!empty($event)) {
    foreach (commerce_payment_methods() as $method_id => $payment_method) {
      // Look for a Rule enabling this payment method.
      foreach ($event->getIterator() as $rule) {
        foreach ($rule->actions() as $action) {
          // If an action is found, get the settings for it.
          if ($method_id == 'netcommerce' && $action->getElementName() == 'commerce_payment_enable_' . $method_id) {
            return commerce_payment_method_instance_id($method_id, $rule);
          }
        }
      }
    }
  }
  return NULL;
}
