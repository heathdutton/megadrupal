<?php
/**
 * @file
 * Main module file.
 */

/**
 * Implements hook_menu().
 */
function entity_collection_menu() {
  $items = array();
  $items['admin/structure/entity_collection'] = array(
    'title' => 'Entity Collections',
    'page callback' => 'entity_collection_admin',
    'description' => t('Administer entity_collections'),
    'access arguments' => array('administer entity_collections'),
    'file' => 'entity_collection.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['entity-collection/%entity_collection'] = array(
    'title' => 'Entity Collection',
    'page callback' => 'entity_collection_page',
    'page arguments' => array(1),
    'access arguments' => array('view', 1),
    'access callback' => 'entity_collection_access',
    'file' => 'entity_collection.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['entity-collection/%entity_collection/view'] = array(
    'title' => 'View',
    'page callback' => 'entity_collection_page',
    'page arguments' => array(1),
    'access arguments' => array('view', 1),
    'access callback' => 'entity_collection_access',
    'file' => 'entity_collection.pages.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['entity-collection/%entity_collection/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_collection_edit_form', 1),
    'access arguments' => array('edit', 1),
    'access callback' => 'entity_collection_access',
    'file' => 'entity_collection.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['entity-collection/%entity_collection/content'] = array(
    'title' => 'Content',
    'page callback' => 'entity_collection_content_admin',
    'page arguments' => array(1),
    'access arguments' => array('add content to', 1),
    'access callback' => 'entity_collection_access',
    'file' => 'entity_collection.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['entity-collection/%entity_collection/delete'] = array(
    'title' => 'Delete Entity collection',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_collection_delete_form', 1),
    'access callback' => 'entity_collection_access',
    'access arguments' => array('manage content in', 1),
    'file' => 'entity_collection.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['entity-collection/%entity_collection/ajax/add'] = array(
      'title' => 'Add to Entity collection',
      'page callback' => 'entity_collection_ajax_add',
      'page arguments' => array(1),
      'access callback' => 'entity_collection_access',
      'access arguments' => array('add content to', 1),
      'file' => 'entity_collection.admin.inc',
      'type' => MENU_CALLBACK,
  );
  $items['entity-collection/%entity_collection/content/delete/%/%'] = array(
    'title' => 'Delete content',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_collection_content_delete_form', 1, 4, 5),
    'access arguments' => array('manage content in', 1),
    'access callback' => 'entity_collection_access',
    'file' => 'entity_collection.admin.inc',
    'type' => MENU_CALLBACK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $entity_collection_bundles = entity_collection_bundles();
  // If we are using the block module, then we add links from there.
  foreach ($entity_collection_bundles as $info) {
    $items['admin/structure/entity_collection/add/' . $info->name] = array(
      'title' => 'Add ' . drupal_strtolower($info->label),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('entity_collection_add_form', 4),
      'access arguments' => array("create {$info->name} entity blocks"),
      'file' => 'entity_collection.admin.inc',
      'type' => MENU_LOCAL_ACTION,
    );
  }
  $items['entity_collection/autocomplete/%entity_collection/%/%/%'] = array(
    'title' => 'entity_collection autocomplete',
    'page callback' => 'entity_collection_content_form_autocomplete',
    'page arguments' => array(2, 3, 4, 5),
    'access callback' => 'entity_collection_access',
    'access arguments' => array('add content to', 2),
    'type' => MENU_CALLBACK,
    'file' => 'entity_collection.admin.inc',
  );

  $items['entity_collection/ajax'] = array(
    'title' => 'entity_collection autocomplete',
    'page callback' => 'entity_collection_ajax_callback',
    'access callback' => 'entity_collection_access',
    'access arguments' => array('add content to'),
    'type' => MENU_CALLBACK,
    'file' => 'entity_collection.admin.inc',
  );
  // Modal dialog for adding new entities directly to an entity collection.
  if (module_exists('inline_entity_form')) {
    $items['entity_collection/add/%entity_collection/%/%/%ctools_js'] = array(
      'title' => 'Add new item to collection',
      'page callback' => 'entity_collection_ief_add',
      'file' => 'entity_collection.ief.inc',
      'access callback' => 'entity_collection_ief_access',
      'type' => MENU_CALLBACK,
      'access arguments' => array(2,3,4),
      'page arguments' => array(2,3,4,5),
    );
  }
  return $items;
}

function entity_collection_edit_path($entity_type, $entity) {
  $paths = drupal_static(__FUNCTION__, NULL);
  list($id,,$bundle) = entity_extract_ids($entity_type, $entity);
  if (!isset($paths)) {
    $paths = module_invoke_all('entity_collection_edit_paths');
  }
  if (!isset($paths[$entity_type])) {
    return FALSE;
  }
  return str_replace(array('[bundle]', '[id]'), array($bundle, $id), $paths[$entity_type]);
}

function entity_collection_entity_collection_edit_paths() {
  return array(
    'node' => 'node/[id]/edit',
    'taxonomy_term' => 'taxonomy/term/[id]/edit',
    'file' => 'file/[id]/edit',
    'user' => 'user/[id]/edit',
  );
}

function entity_collection_ief_access($entity_collection, $entity_type, $entity_bundle) {
  return entity_collection_access('add content to', $entity_collection) &&
         entity_access('create', $entity_type, $entity_bundle) &&
         (empty($entity_collection->settings['allowed_bundles']) ||
         in_array($entity_bundle, $entity_collection->settings['allowed_bundles'][$entity_type]));
}

/**
 * Implements hook_entity_info().
 */
function entity_collection_entity_info() {
  $bundles = entity_collection_bundles();
  $bundle_info = array();
  foreach ($bundles as $key => $bundle) {
    $bundle_info[$bundle->name] = array(
      'label' => $bundle->label,
      'admin' => array(
        'path' => 'admin/structure/entity_collection_bundle/list/%entity_collection_bundle/edit',
        'real path' => 'admin/structure/entity_collection_bundle/list/' . $bundle->name . '/edit',
        'bundle argument' => 4,
        'access arguments' => array('administer entity_collection types'),
      ),
    );
  }
  $definition = array(
    'entity_collection' => array(
      'label' => t('Entity Collection'),
      'entity class' => 'EntityCollection',
      'controller class' => 'EntityAPIControllerExportable',
      'rules controller class' => 'EntityCollectionRulesController',
      'fieldable' => TRUE,
      'exportable' => TRUE,
      'view modes' => array(
        'block' => array(
          'label' => t('Region Block'),
          'custom settings' => FALSE,
        ),
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
      ),
      'access callback' => 'entity_collection_access',
      'base table' => 'entity_collection_collections',
      'module' => 'entity_collection',
      'bundles' => $bundle_info,
      'bundle keys' => array('bundle' => 'name'),
      'entity keys' => array(
        'id' => 'eid',
        'name' => 'name',
        'bundle' => 'bundle',
        'label' => 'title',
      ),
    ),
  );
  return $definition;
}

/**
 * Implements hook_entity_property_info().
 */
function entity_collection_entity_property_info() {
  $info = array();
  $properties = &$info['entity_collection']['properties'];
  $properties['content'] = array(
    'label' => t("Entity collection content"),
    'type' => 'list<entity>',
    'description' => t("The content in the entity collection"),
    'getter callback' => 'entity_collection_content_property_get',
  );
  $properties['last_item'] = array(
    'label' => t("Entity collection content: last item"),
    'type' => 'entity',
    'description' => t("The last item in the collection"),
    'getter callback' => 'entity_collection_last_item_property_get',
  );
  $properties['content_count'] = array(
    'label' => t('Items in collection'),
    'type' => 'integer',
    'description' => t('The total number of items in the collection.'),
    'getter callback' => 'entity_collection_content_count_property_get',
  );
  $properties['contexts'] = array(
    'label' => t("Contexts"),
    'type' => 'list<entity>',
    'description' => t("A list of contexts to use for this entity collection."),
    'getter callback' => 'entity_collection_context_property_get',
    'setter callback' => 'entity_collection_context_property_set',
  );
  return $info;
}

/**
 * Append an item to an entity collection.
 * @param EntityCollection $entity_collection
 * @param EntityCollectionTreeNode $item
 * @param array $contexts
 */
function entity_collection_append_item(EntityCollection $entity_collection, EntityCollectionTreeNode $item, $contexts = NULL) {
  entity_collection_content_pre_insert($entity_collection, $item);
  EntityCollectionStorage::getBundleStorage($entity_collection->bundle)
    ->appendItem($entity_collection, $item, $contexts);
  entity_collection_content_insert($entity_collection, $item);
}

/**
 * Prepend an item to an entity collection.
 * @param EntityCollection $entity_collection
 * @param EntityCollectionTreeNode $item
 * @param array $contexts
 */
function entity_collection_prepend_item(EntityCollection $entity_collection, EntityCollectionTreeNode $item, $contexts = NULL) {
  entity_collection_content_pre_insert($entity_collection, $item);
  EntityCollectionStorage::getBundleStorage($entity_collection->bundle)
    ->prependItem($entity_collection, $item, $contexts);
  entity_collection_content_insert($entity_collection, $item);
}

/**
 * Delete content in an Entity collection.
 * @param EntityCollection $entity_collection
 * @param type $entity_type
 * @param type $entity_ids
 */
function entity_collection_content_delete(EntityCollection $entity_collection, $entity_type, $entity_ids) {
  $storage = EntityCollectionStorage::getBundleStorage($entity_collection->bundle);
  $storage->delete($entity_collection, $entity_type, $entity_ids);
  module_invoke_all('entity_collection_content_delete', $entity_collection, $entity_type, $entity_ids);
}

/**
 * Getter function for number of items in the collection.
 */
function entity_collection_content_count_property_get($data, array $options, $name, $type, $info) {
  $content = entity_collection_load_content($data->bundle, $data)->getFlat();
  return count($content);
}

/**
 * Getter function for the last item in the collection.
 */
function entity_collection_last_item_property_get($data, array $options, $name, $type, $info) {
  $content = entity_collection_load_content($data->bundle, $data)->getFlat();
  $item = end($content);
  if ($item) {
    return entity_metadata_wrapper($item->type, $item->content);
  }
  return FALSE;
}

/**
 * Getter function for the content property on entity collections.
 */
function entity_collection_content_property_get($data, array $options, $name, $type, $info) {
  $content = entity_collection_load_content($data->bundle, $data)->getFlat();
  $list = array();
  foreach ($content as $tree_node) {
    $list[] = entity_metadata_wrapper($tree_node->type, $tree_node->content);
  }
  return $list;
}

/**
 * Getter callback for the context property on entity collections.
 */
function entity_collection_context_property_get($data, array $options, $name, $type, $info) {
  $list = array();
  if (!isset($data->contexts)) {
    $data->contexts = array();
  }
  $contexts = array();
  foreach ($data->contexts as $context) {
    list(,$entity_type) = explode(':', $context->plugin);
    $contexts[] = entity_metadata_wrapper($entity_type, $context->data);
  }
  return $contexts;
}

/**
 * Setter callback for the contextd property on entity collections.
 */
function entity_collection_context_property_set(&$data, $name, $value, $langcode, $type, $info) {
  $data->contexts = array();
  ctools_include('context');
  foreach ($value as $context) {
    $data->contexts[] = ctools_context_create('entity:' . $context->type(), $context->value());
  }
}

/**
 * Triggers hooks to act before an item is added to an entity collection.
 */
function entity_collection_content_pre_insert($entity_collection, $item) {
  module_invoke_all('entity_collection_content_pre_insert', $entity_collection, $item);
}

/**
 * Triggers hooks for acting after an item is added to an entity collection.
 */
function entity_collection_content_insert($entity_collection, $item) {
  module_invoke_all('entity_collection_content_insert_event', $entity_collection, $item);
}

/**
 * Implements hook_entity_collection_content_pre_insert().
 */
function entity_collection_entity_collection_content_pre_insert($entity_collection, $item) {
  // Load the current row plugin and let it act on the event.
  EntityCollectionRow::getRow($entity_collection)->itemPreAdd($item);
}

/**
 * Implements hook_entity_collection_content_delete().
 */
function entity_collection_entity_collection_content_delete($entity_collection, $entity_type, $entity_ids) {
  if (module_exists('rules')) {
    $data = entity_metadata_wrapper("list<$entity_type>", $entity_ids);
    rules_invoke_all('entity_collection_content_delete_event', $entity_collection, $data);
  }
}

/**
 * Implements hook_entity_content_insert().
 */
function entity_collection_entity_collection_content_insert($entity_collection, $item) {
  // Load the current row plugin and let it act on the event.
  if (module_exists('rules')) {
    $wrapper = entity_metadata_wrapper($item->type, $item->content);
    rules_invoke_all('entity_collection_content_insert', $entity_collection, $wrapper);
  }
}

/**
 * Fetch all bundles for a entity_collection.
 * @return array
 *   An array of all available bundles.
 */
function entity_collection_bundles() {
  ctools_include('export');
  return ctools_export_load_object('entity_collection_bundles');
}

/**
 * Load a entity_collection bundle
 * @param $name
 *   The name of the bundle.
 * @return stdClass
 *   The actual bundle.
 */
function entity_collection_bundle_load($name) {
  ctools_include('export');
  $result = ctools_export_load_object('entity_collection_bundles', 'names', array($name));
  if (isset($result[$name])) {
    if (isset($result[$name]->settings) && !is_array($result[$name]->settings)) {
      $result[$name]->settings = unserialize($result[$name]->settings);
    }
    return $result[$name];
  }
  return FALSE;
}

/**
 * Save an entity collection bundle.
 */
function entity_collection_bundle_save($bundle) {
  $update = (isset($bundle->ebid) && $bundle->ebid != 'new') ? array('ebid') : array();
  $bundle->settings = serialize($bundle->settings);
  drupal_write_record('entity_collection_bundles', $bundle, $update);
  menu_rebuild();
  return $bundle;
}

/**
 * Check if an entity collection bundle exists.
 */
function entity_collection_bundle_exists($name) {
  return entity_collection_bundle_load($name) !== FALSE;
}

/**
 * Load a entity_collection by name
 * @param string $name the name of the entity_collection.
 * @return EntityCollection
 *   A loaded entity collection.
 */
function entity_collection_load($name) {
  $entity_collections = &drupal_static(__FUNCTION__, array());
  if (isset($entity_collections[$name])) {
    return $entity_collections[$name];
  }
  $entity_collection = entity_load_single('entity_collection', $name);
  if (!empty($entity_collection)) {
    $entity_collections[$name] = $entity_collection;
    return $entity_collection;
  }
  return FALSE;
}

/**
 * Load all entity collections.
 */
function entity_collection_load_all() {
  return entity_load_multiple_by_name('entity_collection');
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function entity_collection_ctools_plugin_directory($module, $type) {
  $types = array(
    'export_ui',
    'entity_collection_style',
    'entity_collection_row',
    'cache',
    'content_types',
    'relationships',
    'contexts',
    'access',
  );
  if (in_array($type, $types)) {
    return 'plugins/' . $type;
  }
}

/**
 * Implements hook_ctools_plugin_plugin_type().
 */
function entity_collection_ctools_plugin_type() {
  return array(
    'plugins' => array(
      'cache' => TRUE,
      'use hooks' => TRUE,
      'classes' => array(
        'entity_collection_storage',
        'entity_collection_style',
        'entity_collection_row',
      ),
    ),
  );
}

/**
 * Implements hook_entity_collection_plugins().
 */
function entity_collection_entity_collection_plugins() {
  $path = drupal_get_path('module', 'entity_collection') . '/plugins/entity_collection_style';
  $info = array();
  $info['entity_collection_style_flat'] = array(
    'title' => t('Flat list'),
    'entity_collection_style' => array(
      'parent' => 'EntityCollectionStyle',
      'class' => 'EntityCollectionStyleFlat',
      'file' => 'entity_collection_style_flat.inc',
      'path' => $path,
    ),
  );
  $info['entity_collection_style_limit'] = array(
    'title' => t('Limited list'),
    'entity_collection_style' => array(
      'parent' => 'EntityCollectionStyle',
      'class' => 'EntityCollectionStyleLimit',
      'file' => 'entity_collection_style_limit.inc',
      'path' => $path,
    ),
  );
  $info['entity_collection_style_hierarchy'] = array(
    'title' => t('Hierarchy'),
    'theme' => array(
      'template' => 'entity_collection_style_hierarchy',
      'render element' => 'element',
      'file' => 'plugins/entity_collection_style/entity_collection_style_hierarchy.inc',
    ),
    'entity_collection_style' => array(
      'parent' => 'EntityCollectionStyle',
      'class' => 'EntityCollectionStyleHierarchy',
      'file' => 'entity_collection_style_hierarchy.inc',
      'path' => $path,
    ),
  );
  $info['entity_collection_style_hierarchy_limited'] = array(
    'title' => t('Hierarchy Limited'),
    'theme' => array(
      'template' => 'entity_collection_style_hierarchy',
      'render element' => 'element',
      'file' => 'plugins/entity_collection_style/entity_collection_style_hierarchy_limited.inc',
    ),
    'entity_collection_style' => array(
      'parent' => 'EntityCollectionStyleHierarchy',
      'class' => 'EntityCollectionStyleHierarchyLimited',
      'file' => 'entity_collection_style_hierarchy_limited.inc',
      'path' => $path,
    ),
  );
  $info['entity_collection_style_grid'] = array(
    'title' => t('Limited grid'),
    'theme' => array(
      'template' => 'entity_collection_style_grid',
      'render element' => 'element',
      'file' => 'plugins/entity_collection_style/entity_collection_style_grid.inc',
    ),
    'entity_collection_style' => array(
      'parent' => 'EntityCollectionStyle',
      'class' => 'EntityCollectionStyleGrid',
      'file' => 'entity_collection_style_grid.inc',
      'path' => $path,
    ),
  );
  
  $path = drupal_get_path('module', 'entity_collection') . '/plugins/entity_collection_row';
  $info['entity_collection_row_view_mode'] = array(
    'title' => t('View mode'),
    'entity_collection_row' => array(
      'parent' => 'EntityCollectionRow',
      'class' => 'EntityCollectionRowViewMode',
      'file' => 'entity_collection_row_view_mode.inc',
      'path' => $path,
    ),
  );
  $info['entity_collection_row_view_options'] = array(
    'title' => t('View Options'),
    'entity_collection_row' => array(
      'parent' => 'EntityCollectionRow',
      'class' => 'EntityCollectionRowOptions',
      'file' => 'entity_collection_row_options.inc',
      'path' => $path,
    ),
  );
  if (module_exists('panels_mini')) {
    $info['entity_collection_row_panels_mini'] = array(
      'title' => t('Mini panels'),
      'entity_collection_row' => array(
        'parent' => 'EntityCollectionRow',
        'class' => 'EntityCollectionRowPanelsMini',
        'file' => 'entity_collection_row_panels_mini.inc',
        'path' => $path,
      ),
    );
  }

  return $info;
}

/**
 * Implements hook_permission().
 */
function entity_collection_permission() {
  $permissions = array(
    'administer entity_collection types' =>  array(
      'title' => t('Administer entity_collection types'),
      'description' => t('Create and delete fields on entity_collections, and set their permissions.'),
    ),
  );
  // Generate per entity colletion type permissions.
  foreach (entity_collection_bundles() as $bundle) {
    $name = check_plain($bundle->name);
    $permissions += array(
      "create $name entity collections" => array(
        'title' => t('%type_name: Create entity collection', array('%type_name' => $bundle->label)),
      ),
      "edit $name entity collections" => array(
        'title' => t('%type_name: Edit entity collection', array('%type_name' => $bundle->label)),
      ),
      "view $name entity collections" => array(
        'title' => t('%type_name: View entity collection', array('%type_name' => $bundle->label)),
      ),
      "delete $name entity collections" => array(
        'title' => t('%type_name: Delete entity collection', array('%type_name' => $bundle->label)),
      ),
      "add content to $name entity collections" => array(
        'title' => t('%type_name: Add content', array('%type_name' => $bundle->label)),
      ),
      "manage content in $name entity collections" => array(
        'title' => t('%type_name: Manage content', array('%type_name' => $bundle->label)),
      ),
    );
  }
  return $permissions;
}

/**
 * Implements hook_theme().
 */
function entity_collection_theme() {
  $theme = array();
  // Get all row and style plugins and add theme functions for them..
  $row_plugins = EntityCollectionRow::getRows();
  $style_plugins = EntityCollectionStyle::getStyles();
  foreach ($row_plugins + $style_plugins as $name => $info) {
    if (isset($info['theme'])) {
      $theme[$name] = $info['theme'];
    }
  }
  $theme['entity_collection_content_form'] = array(
    'render element' => 'form',
  );
  $theme['entity_collection_entity_info'] = array(
    'function' => '_entity_collection_theme_entity_info',
    'variables' => array( 'entity' => NULL, ),
  );
  $theme['entity_collection'] = array(
    'template' => 'entity_collection',
    'render element' => 'element',
  );
  return $theme;
}

/**
 * Preprocess function for entity collections.
 */
function template_preprocess_entity_collection(&$variables) {
  
  // Add the style name, the view-mode and the collection name to the classes array 
  $style = EntityCollectionStyle::getStyle($variables['element']['#entity_collection']);  
  $variables['classes_array'][] = str_replace('_', '-', $style->entity_collection->style);
  $variables['classes_array'][] = 'view-mode-' . str_replace('_', '-', $variables['element']['#view_mode']);
  $variables['classes_array'][] = 'entity-collection-name-' . str_replace('_', '-', $variables['element']['#entity_collection']->name);

  if($style->useBreakpoint()) {
    $current_contexts = '';
    foreach($variables['element']['#entity_collection']->contexts as $context) {
      $current_contexts[] = $context->argument;
    }
    if($current_contexts) {
      $variables['classes_array'][] = 'has-breakpoint';
      $variables['attributes_array'] = array('data-contexts'=>implode(':', $current_contexts));
    }
  }

  // Here we take the object that is being themed and define some useful
  // variables that we will print in the template file.
  $variables['collection'] = isset($variables['element']['entity_collection']) ? $variables['element']['entity_collection'] : array();
  $variables['title'] = $variables['element']['#entity_collection']->title;
  // Never show title, for now.
  $variables['show_title'] = FALSE;
}

/**
 * Access callback for entity_collections.
 */
function entity_collection_access($op, $entity_collection, $account = NULL) {
  if (isset($entity_collection)) {
    return user_access("$op {$entity_collection->bundle} entity collections", $account);
  }
}

/**
 * Implements hook_block_info().
 */
function entity_collection_block_info() {
  $entity_collections = array();
  $blocks = array();
  // Load all entity collections and add them.
  $entity_collections = entity_load('entity_collection');
  foreach ($entity_collections as $entity_collection) {
    // We only support entity collections without required contexts here.
    if (!count($entity_collection->requiredcontexts)) {
      $blocks[$entity_collection->name] = array(
        'info' => $entity_collection->title,
        'cache' => 0,
      );
    }
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function entity_collection_block_view($delta) {
  $block = array();
  // The delta is always the same as the machine name of the
  // entity block, so it's fairly easy to load.
  $entity_collection = entity_collection_load($delta);
  if (!empty($entity_collection) && user_access("view {$entity_collection->bundle} entity collections")) {
    $block['subject'] = check_plain($entity_collection->title);
    $block['content'] = $entity_collection->buildContent();
    return $block;
  }
}

/**
 * Save the content of a entity_collection.
 * @param string $name
 *   The entity_collection name
 * @param RegioNode $tree
 *   The tree to save.
 */
function entity_collection_save_content(EntityCollection $entity_collection, EntityCollectionTreeNode $tree) {
  return EntityCollectionStorage::getBundleStorage($entity_collection->bundle)->save($entity_collection, $tree);
}

/**
 * Load content for a entity_collection.
 * @param string $bundle
 *   The name of the entity_collection bundle
 * @param string $name
 *   The name of the entity_collection.
 * @return EntityCollectionTreeNode the content for a entity_collection.
 */
function entity_collection_load_content($bundle, $name) {
  return EntityCollectionStorage::getBundleStorage($bundle)->retrieve($name);
}

/**
 * Implements hook_admin_paths().
 */
function entity_collection_admin_paths() {
  return array('entity-collection/*' => TRUE);
}

/**
 * Implements hook_entity_load().
 */
function entity_collection_entity_load($entities, $type) {
  // Unserialize blobs for entity collections.
  // @todo this might be better to put in the entity controller?
  if ($type == 'entity_collection') {
    foreach ($entities as $entity) {
      $properties = array('settings', 'requiredcontexts');
      foreach ($properties as $property) {
        if (isset($entity->{$property})) {
          $entity->{$property} = unserialize($entity->{$property});
        }
        else {
          $entity->{$property} = array();
        }
      }
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function entity_collection_entity_presave($entity, $type) {
  if ($type == 'entity_collection') {
    $properties = array('settings', 'requiredcontexts');
    foreach ($properties as $property) {
      if (!isset($entity->{$property})) {
        $entity->{$property} = array();
      }
      $entity->{$property} = serialize($entity->{$property});
    }
  }
}

/**
 * Implements hook_entity_delete().
 */
function entity_collection_entity_delete($entity, $type) {
  $collections = entity_collection_load_all();
  if (!empty($collections)) {
    list($id) = entity_extract_ids($type, $entity);
    foreach ($collections as $collection) {
      $storage = EntityCollectionStorage::getBundleStorage($collection->bundle);
      if($storage) {
        $storage->delete($collection, $type, array($id));
      }
    }
  }
  // Remove any data attached to this entity collection.
  if ($type == 'entity_collection') {
    $storage = EntityCollectionStorage::getBundleStorage($entity->bundle);
    if ($storage) {
      $storage->drop($entity);
      field_attach_delete($type, $entity);
    }
  }
}

/**
 * Implements hook_references_dialog_search_attachables().
 */
function entity_collection_references_dialog_search_attachables() {
  // Return search views attachables for nodes.
  $attachables = array();
  foreach (entity_collection_load_all() as $collection) {
    $attachables['node'][$collection->name] = array(
      'label' => $collection->name,
    );
  }
  return $attachables;
}

/**
 * Implements hook_flush_caches().
 */
function entity_collection_flush_caches() {
  return array('cache_entity_entity_collection');
}

/**
 * Get contexts for this entity collection, either from the collection itself
 * or from the URL.
 * @param EntityCollection $entity_collection
 * @return array an array of contexts that exists.
 */
function _entity_collection_get_contexts(EntityCollection $entity_collection) {
  ctools_include('context');
  // We got the contexts prepulated already. Great.
  if (isset($entity_collection->contexts) && count($entity_collection->contexts) == count($entity_collection->requiredcontexts)) {
    return $entity_collection->contexts;
  }
  $loaded_contexts = array();
  // This hack is necessary if you don't
  // create your own contextual administration.
  // We can probably deal with this in a nice way,
  // but what we actually want to do
  // is to let the user create their administrative pages
  // and fetch their contexts through page manager.
  $contexts = array();
  if (isset($_GET['contexts'])) {
    $contexts = explode(':', check_plain($_GET['contexts']));
  }
  // Convert arguments to CTools Contexts.
  $required_context = reset($entity_collection->requiredcontexts);
  foreach ($contexts as &$context) {
    $new_context = ctools_context_create($required_context['name'], $context);
    $required_context = next($entity_collection->requiredcontexts);
    // Only return the context if it's actually loaded!
    if ( $new_context && is_a($new_context, 'ctools_context') )
      $loaded_contexts[] = $new_context;
  }
  $entity_collection->contexts = $loaded_contexts;
  return $loaded_contexts;
}

function _entity_collection_serialize_contexts(EntityCollection $entity_collection) {
  $serialized = array();
  if (empty($entity_collection->contexts)) {
    return 'none';
  }
  foreach ($entity_collection->contexts as $context) {
    if (isset($context->argument)) {
      $serialized[] = $context->argument;
    }
  }
  return implode(':', $serialized);
}

/**
 * This form let's the user enter the contexts
 * that are needed to view the entity collection.
 */
function entity_collection_context_input_form($form, &$form_state, EntityCollection $entity_collection) {
  $form = array();
  $form['info']['#markup'] = t('This entity collection has required contexts. Please enter them below in order to manage the content of this entity collection.');
  $form['contexts'] = array(
    '#tree' => TRUE,
  );

  foreach ($entity_collection->requiredcontexts as $i => $context) {
    $plugin = ctools_get_context($context['name']);
    if (isset($plugin['placeholder form'])) {
      $plugin_default = array(
        '#title' => $context['identifier'],
        '#required' => TRUE,
      );
      $form['contexts'][$i] = $plugin_default + $plugin['placeholder form'];
    }
  }
  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Submit contexts'),
  );
  return $form;
}

/**
 * Submit handler for entity_collection_context_input_form().
 */
function entity_collection_context_input_form_submit($form, &$form_state) {
  $contexts = $form_state['values']['contexts'];
  foreach ($contexts as $key => $context) {
    $contexts[$key] = check_plain($context);
  }
  $contexts = implode(':', $contexts);
  $form_state['redirect'] = array(current_path(), array('query' => array('contexts' => $contexts)));
}

function _entity_collection_theme_entity_info($vars)
{
  if ( !empty($vars['entity']) ) {
    $entity = $vars['entity']->content;
    $entity_type = $vars['entity']->type;
    $entity_info = entity_get_info($entity_type);
    $entity_properties = entity_get_property_info($entity_type);

    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  
    $bundle_label = _entity_collection_get_bundle_label($bundle, $entity_info);
    
    $themed_content =  "<strong class='entity-bundle'>{$bundle_label}</strong>";

    if ( $entity_type == 'node' || isset($entity->status) ) {
      $status_text = ($entity->status) ? 'Published' : 'Not published';
      $status_class = ($entity->status) ? 'published' : 'not-published';
      $themed_content .= "<br><span class='node-{$status_class}'>".t($status_text)."</span>";
    }
  
    return $themed_content;
  }
  
  return '';
}


function _entity_collection_get_bundle_label($bundle, $entity_info)
{
  return $entity_info['bundles'][$bundle]['label'];
}
