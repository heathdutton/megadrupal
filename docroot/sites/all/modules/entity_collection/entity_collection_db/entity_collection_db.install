<?php
/**
 * @file
 * Install-related things for entity collection.
 */

/**
 * Implements of hook_schema().
 */
function entity_collection_db_schema() {
  $schema['entity_collection_storage'] = array(
    'fields' => array(
      'rsid' => array(
        'description' => 'Serial ID',
        'type' => 'serial',
        'unsigned' => TRUE,
      ),
      'eid' => array(
        'description' => 'The entity id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Machine-readable name for a entity_collection.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'entity_type' => array(
        'description' => 'The entity type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'entity' => array(
        'description' => 'An entity object.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
      ),
      'position' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Position.',
      ),
      'parent' => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
        'description' => 'The parent, if any.',
      ),
      'depth' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The parent, if any.',
      ),
      'style' => array(
        'type' => 'blob',
        'description' => 'The styles to be used to render this row',
        'serialize' => TRUE,
      ),
      'contexts' => array(
        'type' => 'varchar',
        'length' => 255,
        'description' => 'The contexts used.'
      ),
    ),
    'primary key' => array('rsid'),
    'indexes' => array(
      'parent' => array('parent'),
      'name' => array('name'),
      'eid' => array('eid'),
    ),
  );
  return $schema;
}

/**
 * Updates the table to store the style as a serialized object.
 */
function entity_collection_db_update_7200(&$sandbox)
{

  if (!isset($sandbox['progress']))
  {
    // If the table has not been updated yet
    if (  !db_field_exists('entity_collection_storage', 'old_style') ) {
      $old_style_spec = array(
        'type' => 'varchar',
        'length' => 255,
        'description' => 'The styles to be used to render this row',
      );
      $new_style_spec = $old_style_spec;
      $new_style_spec['type'] = 'blob';
      $new_style_spec['serialize'] = TRUE;
  
      db_change_field('entity_collection_storage', 'style', 'old_style', $old_style_spec);
      db_add_field('entity_collection_storage', 'style', $new_style_spec);
    }
    
    $sandbox['progress'] = 0;
    $sandbox['current_rsid'] = 0;
    $sandbox['max'] = db_query('SELECT COUNT(rsid) FROM entity_collection_storage')->fetchField();
  }

  $items = db_select('entity_collection_storage', 'c')
    ->fields('c')
    ->condition('rsid', $sandbox['current_rsid'], '>')
    ->range(0, 5)
    ->orderBy('rsid', 'ASC')
    ->execute();

  foreach ($items as $item) {
    $fields = array(
      'style' => serialize($item->old_style),
    );
    
    db_update('entity_collection_storage')
      ->fields($fields)
      ->condition('rsid', $item->rsid)
      ->execute();

    $sandbox['progress']++;
    $sandbox['current_rsid'] = $item->rsid;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);

  if ( $sandbox['#finished'] === 1 ) {
    db_drop_field('entity_collection_storage', 'old_style');
  }

  return;
}
