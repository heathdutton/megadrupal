<?php

/**
 * @file
 *   Integrates external rating systems with Drupal.
 */
define('ENTITY_EXT_RATING_MINIMUM_VERSION', 1);
define('ENTITY_EXT_RATING_VERSION', 1);

/**
 * Implements hook_permission().
 */
function entity_ext_rating_permission() {
  return array(
    'administer external rating settings' => array(
      'title' => t('Administer external rating settings'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function entity_ext_rating_menu() {
  $items['admin/structure/entity_ext_rating'] = array(
    'title' => 'Entity external rating',
    'description' => 'Manage the Entity External Rating settigs, like plugins.',
    'page callback' => 'entity_ext_rating_admin',
    'access arguments' => array('administer external rating settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'entity_ext_rating.admin.inc',
  );
  $items['admin/structure/entity_ext_rating/edit/%entity_ext_rating_source'] = array(
    'title' => 'Edit rating source',
    'description' => 'Edit a rating source',
    'page callback' => 'entity_ext_rating_edit_source',
    'page arguments' => array(4),
    'access arguments' => array('administer external rating settings'),
    'type' => MENU_CALLBACK,
    'file' => 'entity_ext_rating.admin.inc',
  );
  return $items;
}

/**
 * Magic placeholder load function. Loads a source plugin from its id.
 *
 * @return object
 *   An plugin object.
 */
function entity_ext_rating_source_load($id) {
  ctools_include('plugins');
  return ctools_get_plugins('entity_ext_rating', 'plugins', $id);
}

/**
 * Implements hook_theme().
 */
function entity_ext_rating_theme() {
  return array(
    'entity_ext_rating_facebook_widget' => array(
      'variables' => array('params' => array()),
      'template' => 'themes/entity_ext_rating_facebook_widget'
    ),
    'entity_ext_rating_twitter_widget' => array(
      'variables' => array('params' => array()),
      'template' => 'themes/entity_ext_rating_twitter_widget'
    ),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function entity_ext_rating_ctools_plugin_api($owner, $api) {
  if ($owner == 'entity_ext_rating' && $api == 'plugins') {
    return array('version' => ENTITY_EXT_RATING_MINIMUM_VERSION);
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function entity_ext_rating_ctools_plugin_type() {
  return array(
    'plugins' => array(
      'cache' => TRUE,
      'use hooks' => TRUE,
      'classes' => array('handler'),
    ),
  );
}

/**
 * Implements hook_entity_ext_rating_plugins().
 */
function entity_ext_rating_entity_ext_rating_plugins() {
  module_load_include('inc', 'entity_ext_rating', 'entity_ext_rating.plugins');
  return _entity_ext_rating_entity_ext_rating_plugins();
}

/**
 * Loads a plugin by its name.
 *
 * @return object|false
 *   An instance of a plugin (an object) or FALSE if the plugin name was not
 *   found.
 */
function entity_ext_rating_get_plugin($name) {
  ctools_include('plugins');
  if ($class = ctools_plugin_load_class('entity_ext_rating', 'plugins', $name, 'handler')) {
    return EntityExtRatingSource::instance($class);
  }
  return FALSE;
}

/**
 * Implements hook_cron().
 */
function entity_ext_rating_cron() {
  module_load_include('inc', 'entity_ext_rating', 'entity_ext_rating.cron');
  _entity_ext_rating_cron();
}

/**
 * Implements hook_entity_delete();
 */
function entity_ext_rating_entity_delete($entity, $type) {
  // @todo: implement a setting for these actions. Maybe sometimes it makes
  // sense to not delete them.
  list($id) = entity_extract_ids($type, $entity);
  db_delete('entity_ext_rating_queue')
    ->condition('entity_type', $type)
    ->condition('entity_id', $id)
    ->execute();
  db_delete('entity_ext_rating_total')
    ->condition('entity_type', $type)
    ->condition('entity_id', $id)
    ->execute();
  db_delete('entity_ext_rating_values')
    ->condition('entity_type', $type)
    ->condition('entity_id', $id)
    ->execute();
}

// Some API functions that can (and should) be called from other modules.

/**
 * Adds an entry in the queue.
 *
 * @param string $rating_id
 *   A unique identifier for the entry.
 *
 * @param int $entity_id
 *   The id of the entity.
 *
 * @param string $entity_type
 *   The type of the entity, for example "node" or "user".
 *
 * @param array $params
 *   Any parameters that have to be used by the plugins to query the external
 *   services. Usually, there is an url parameter that represents the url of
 *   the entity on the actual site.
 *
 * @param int $expire
 *   An integer value representing the timestamp when this entry will not be
 *   queried anymore for updating the rate.
 */
function entity_ext_rating_add_to_queue($rating_id, $entity_id = NULL, $entity_type = NULL, $params = NULL, $expire = NULL) {
  // First, try to load the entry, and if it exists, just update the fields.
  $row = db_select('entity_ext_rating_queue', 'queue')
              ->fields('queue')
              ->condition('rating_id', $rating_id)
              ->execute()->fetchObject();
  $update = TRUE;
  if (!is_object($row)) {
    $row = new stdClass();
    $row->rating_id = $rating_id;
    $update = FALSE;
  }
  if (!is_null($entity_id)) {
    $row->entity_id = $entity_id;
  }
  if (!is_null($entity_type)) {
    $row->entity_type = $entity_type;
  }
  if (!is_null($params)) {
    $row->params = $params;
  }
  if (!is_null($expire)) {
    $row->expire = $expire;
  }
  if ($update) {
    drupal_write_record('entity_ext_rating_queue', $row, 'rating_id');
  }
  else {
    drupal_write_record('entity_ext_rating_queue', $row);
  }
}

/**
 * Loads the total rating object for a rating id.
 *
 * @param string $rating_id
 *   A string representing the id of the rating to load.
 *
 * @return object|false
 *   An object representing the rating.
 */
function entity_ext_rating_get_total_rating($rating_id) {
  $result = db_select('entity_ext_rating_total', 'total_rating')
          ->fields('total_rating')
          ->condition('rating_id', $rating_id)
          ->execute()->fetchObject();
  return $result;
}

/**
 * Calls a set of rating plugins to get the html output for their widgets.
 *
 * @param array $params
 *   An array with parameters that will be used when calling each plugin's html
 *   method.
 *
 * @param array $plugin_names
 *   An array of plugin names (for example Twitter, Facebook). If no plugins are
 *   specified, all enabled plugins will be considered.
 *
 * @return string
 *   The html widgets for a set of rating plugins.
 */
function entity_ext_rating_get_html_widgets($params = array(), $plugin_names = array()) {
  // If no plugins were specified, take all enabled plugins.
  if (!$plugin_names) {
    $available_plugins = variable_get('entity_ext_rating_active_plugins', array());
    foreach ($available_plugins as $key => $value) {
      if ($value) {
        $plugin_names[] = $key;
      }
    }
  }
  // Iterate over each plugin, create an instance and call the method that
  // returns the html output.
  $result = array();
  foreach ($plugin_names as $plugin_name) {
    $plugin = entity_ext_rating_get_plugin($plugin_name);
    $result[$plugin_name] = $plugin->getHtml($params);
  }
  return $result;
}