<?php

/**
 * @file
 * Implement jQuery gentleSelect widget for select field.
 */

/**
 * Implements hook_field_widget_info().
 */
function gentleselect_field_widget_info() {
  return array(
    'gentleselect' => array(
      'label' => t('Gentle Select'),
      'field types' => array(
        'list',
        'list_text',
        'list_number',
        'node_reference',
        'taxonomy_term_reference',
        'user_reference',
        'entityreference',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_CUSTOM,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function gentleselect_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value_key = key($field['columns']);

  $type = str_replace('options_', '', $instance['widget']['type']);
  $multiple = $field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED;

  $required = $element['#required'];
  $has_value = isset($items[0][$value_key]);
  $properties = _options_properties($type, $multiple, $required, $has_value);

  $options = _options_get_options($field, $instance, $properties, NULL, NULL);
  $options = array_map("strip_tags", $options);

  $default_value = _options_storage_to_form($items, $options, $value_key, $properties);

  foreach ($items as $item) {
    if (isset($options[$item[$value_key]])) {
      $val = $options[$item[$value_key]];
      unset($options[$item[$value_key]]);
      $options[$item[$value_key]] = $val;
    }
  }
  $unique_class = 'gentle_select_' . str_replace(array('.', ' '), array('_', '_'), microtime());
  // Build the basic select box using Form API.
  $element += array(
    '#type' => 'select',
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => $required,
    '#multiple' => $multiple,
    '#options' => $options,
    '#size' => 10,
    '#attributes' => array('class' => array('gentle_select', $unique_class)),
    '#default_value' => $default_value,
    '#value_key' => $value_key,
    '#element_validate' => array('options_field_widget_validate'),
    '#properties' => $properties,
  );

  $widget_settings = $instance['widget']['settings'];
  $settings = array(
    'box_title' => isset($widget_settings['box_title']) ? $widget_settings['box_title'] : t('Select'),
    'display_type' => isset($widget_settings['display_type']) ? $widget_settings['display_type'] : 'columns',
    'row_col_quantity' => isset($widget_settings['row_col_quantity']) ? $widget_settings['row_col_quantity'] : 3,
    'item_width' => isset($widget_settings['item_width']) ? $widget_settings['item_width'] : 100,
    'open_effect' => isset($widget_settings['open_effect']) ? $widget_settings['open_effect'] : 'slide',
    'close_effect' => isset($widget_settings['close_effect']) ? $widget_settings['close_effect'] : 'slide',
    'open_speed' => isset($widget_settings['open_speed']) ? $widget_settings['open_speed'] : 400,
    'close_speed' => isset($widget_settings['close_speed']) ? $widget_settings['close_speed'] : 400,
    'max_display' => isset($widget_settings['max_display']) ? $widget_settings['max_display'] : 0,
  );

  if (isset($widget_settings['display_type']) && $widget_settings['display_type'] == 'rows') {
    $js = ' jQuery(".' . $unique_class . '").gentleSelect({
                    title: "' . $settings['box_title'] . '",
                    rows: ' . $settings['row_col_quantity'] . ',
                    itemWidth: ' . $settings['item_width'] . ',
                    openEffect: "' . $settings['open_effect'] . '",
                    closeEffect: "' . $settings['close_effect'] . '",
                    openSpeed: ' . $settings['open_speed'] . ',
                    closeSpeed: ' . $settings['close_speed'] . ',
                    maxDisplay: ' . $settings['max_display'] . ',
                });';
  }
  else {
    $js = ' jQuery(".' . $unique_class . '").gentleSelect({
                    title: "' . $settings['box_title'] . '",
                    columns: ' . $settings['row_col_quantity'] . ',
                    itemWidth: ' . $settings['item_width'] . ',
                    openEffect: "' . $settings['open_effect'] . '",
                    closeEffect: "' . $settings['close_effect'] . '",
                    openSpeed: ' . $settings['open_speed'] . ',
                    closeSpeed: ' . $settings['close_speed'] . ',
                    maxDisplay: ' . $settings['max_display'] . ',
                });';
  }

  drupal_add_js('jQuery(document).ready(function () { ' . $js . ' });', array(
    'type' => 'inline',
    'scope' => 'header',
      )
  );

  $path = libraries_get_path('gentle_select');
  $module_path = drupal_get_path('module', 'gentleselect');
  $element['#attached'] = array(
    'css' => array($path . '/jquery-gentleSelect.css', $module_path . '/gentleselect.css'),
    'js' => array($path . '/jquery-gentleSelect.js'),
  );

  return $element;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function gentleselect_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form['box_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Box Title'),
    '#description' => t('Heading for the selection box'),
    '#default_value' => isset($settings['box_title']) ? $settings['box_title'] : t('Select'),
    '#required' => TRUE,
  );

  $form['display_type'] = array(
    '#type' => 'radios',
    '#title' => t('Display Type'),
    '#default_value' => isset($settings['display_type']) ? $settings['display_type'] : 'columns',
    '#options' => array('columns' => t('Columns'), 'rows' => t('Rows')),
    '#description' => t('You can either fix number of row or columns to display.'),
  );

  $form['row_col_quantity'] = array(
    '#type' => 'textfield',
    '#title' => t('Number Of Cols / Rows To Display'),
    '#description' => t('Enter the number of cols / rows to display.'),
    '#default_value' => isset($settings['row_col_quantity']) ? $settings['row_col_quantity'] : 3,
    '#required' => TRUE,
    '#element_validate' => array('_element_validate_integer_positive'),
  );

  $form['item_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Item Width'),
    '#description' => t('This value must be large enough to fit the longest option.'),
    '#default_value' => isset($settings['item_width']) ? $settings['item_width'] : 100,
    '#required' => TRUE,
    '#element_validate' => array('_element_validate_integer_positive'),
  );

  $form['open_effect'] = array(
    '#type' => 'select',
    '#title' => t('Open Effect'),
    '#options' => array(
      'fade' => t('Fade'),
      'slide' => t('Slide'),
    ),
    '#default_value' => isset($settings['open_effect']) ? $settings['open_effect'] : 'slide',
    '#description' => t('Effects to use for displaying the selection menu. Possible options are "fade" and "slide" (default).'),
  );

  $form['close_effect'] = array(
    '#type' => 'select',
    '#title' => t('Close Effect'),
    '#options' => array(
      'fade' => t('Fade'),
      'slide' => t('Slide'),
    ),
    '#default_value' => isset($settings['close_effect']) ? $settings['close_effect'] : 'slide',
    '#description' => t('Effects to use for hiding the selection menu. Possible options are "fade" and "slide" (default).'),
  );

  $form['open_speed'] = array(
    '#type' => 'textfield',
    '#title' => t('Open Speed'),
    '#description' => t('Specifies the speed of the open animation. This value is specified in milliseconds; higher values indicate slower animations, not faster ones.'),
    '#default_value' => isset($settings['open_speed']) ? $settings['open_speed'] : 400,
    '#required' => TRUE,
    '#element_validate' => array('_element_validate_integer_positive'),
  );

  $form['close_speed'] = array(
    '#type' => 'textfield',
    '#title' => t('Close Speed'),
    '#description' => t('Specifies the speed of the close animation. This value is specified in milliseconds; higher values indicate slower animations, not faster ones.'),
    '#default_value' => isset($settings['close_speed']) ? $settings['close_speed'] : 400,
    '#required' => TRUE,
    '#element_validate' => array('_element_validate_integer_positive'),
  );

  $form['hide_on_mouse_out'] = array(
    '#type' => 'select',
    '#title' => t('Hide On Mouse Out'),
    '#options' => array(
      'false' => t('False'),
      'true' => t('True'),
    ),
    '#default_value' => isset($settings['hide_on_mouse_out']) ? $settings['hide_on_mouse_out'] : 'true',
    '#description' => t('Specifies whether the selection menu should be hidden when the mouse leaves the selection box. This is true by default. Set to false to disable this behaviour. This option has no effect if multiple is enabled on the selection box.'),
  );

  $form['max_display'] = array(
    '#type' => 'textfield',
    '#title' => t('Max Display'),
    '#description' => t('Specifies the maximum number of items to display when multiple selection is enabled. When the number of selected items exceed a specified value. say 5, then only the first 5 items are displayed (delimited by comma) followed by "..." to indicate that some selected items are hidden.'),
    '#default_value' => isset($settings['max_display']) ? $settings['max_display'] : 3,
    '#required' => TRUE,
    '#element_validate' => array('_element_validate_integer_positive'),
  );
  return $form;
}
