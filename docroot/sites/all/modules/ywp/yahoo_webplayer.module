<?php
/*
 * @file
 * Implements the player Yahoo! Webplayer on your site.
 *
 */

/**
 * Implement hook_permission().
 */
function yahoo_webplayer_permission() {
  $perms['administer ywp'] = array(
    'title' => t('Administer Yahoo! Webplayer'),
    'description' => t('Allow users to change the Yahoo! Webplayer settings.'),
  );
  $perms['show ywp'] = array(
    'title' => t('View Yahoo! Webplayer'),
    'description' => t('Show the Yahoo! Webplayer only for the selected role(s).'),
  );
  return $perms;
}

/**
 * Implement hook_menu().
 */
function yahoo_webplayer_menu() {
  $items['admin/config/media/yahoo_webplayer'] = array(
    'title' => 'Yahoo! Webplayer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('yahoo_webplayer_admin'),
    'access arguments' => array('administer ywp'),
    'description' => 'Configure your Yahoo! Webplayer settings.',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implement hook_help().
 */
function yahoo_webplayer_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/config/media/yahoo_webplayer':
      $output = '<p>' . t('You can get help on using the Yahoo! Webplayer in its <a href="@url">official documentation.</a>', array('@url' => 'http://webplayer.yahoo.com/docs/how-to-use/')) . '</p>';
      if (!module_exists('image')) {
        $output .= '<p>' . t('The Image Module is not active at this time. You can enable this module to activate the cover art feature.') . '</p>';
      }
    break;
  }
  return $output;
}

/**
 * Implement hook_image_default_styles().
 */
function yahoo_webplayer_image_default_styles() {
  if (module_exists('image')) {
    $styles = array();
    $styles['default_album_art'] = array(
      'effects' => array(
        array(
          'name' => 'image_scale_and_crop',
          'data' => array(
            'width' => 205,
            'height' => 205,
          ),
          'weight' => 0,
        ),
      ),
    );
    return $styles;
  }
}

function yahoo_webplayer_admin($form, &$form_state) {
  $form['ywp_volume'] = array(
    '#type' => 'select',
    '#required' => TRUE,
    '#options' => array(
      '0' => '0',
      '0.1' => '10%',
      '0.2' => '20%',
      '0.3' => '30%',
      '0.4' => '40%',
      '0.5' => '50%',
      '0.6' => '60%',
      '0.7' => '70%',
      '0.8' => '80%',
      '0.9' => '90%',
      '1' => '100%',
    ),
    '#default_value' => variable_get('ywp_volume', '0.5'),
    '#title' => t('Default volume'),
    '#description' => t('Define default volume, 0 to 100%')
  );
  $form['ywp_theme'] = array(
    '#type' => 'select',
    '#options' => array('black' => t('Black'), 'silver' => t('Silver')),
    '#required' => FALSE,
    '#default_value' => variable_get('ywp_theme', 'black'),
    '#title' => t('Theme')
  );
  if (module_exists('image')) {
    $form['albumart_container'] = array(
      '#title' => t('Default album art'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    if (variable_get('ywp_defaultalbum', '') != '') {
      $file = file_load(variable_get('ywp_defaultalbum', ''));
      list($width, $height, $type, $attributes) = @getimagesize(file_create_url($file->uri));
      $variables = array(
        'style_name' => 'default_album_art',
        'path' => $file->uri,
        'width' => $width,
        'height' => $height,
        'alt' => t('Default album art'),
      );
      $form['albumart_container']['defaultalbumart_current'] = array(
        '#type' => 'item',
        '#markup' => '<div style="float: right">' . theme_image_style($variables) . '</div>'
      );
      $form['albumart_container']['ywp_defaultalbumart_delete'] = array(
        '#type' => 'checkbox',
        '#default_value' => FALSE,
        '#title' => t('Delete current album art'),
        '#required' => FALSE,
      );
    }
    $form['albumart_container']['ywp_defaultalbumart'] = array(
      '#name' => 'files[albumart]',
      '#type' => 'file',
      '#required' => FALSE,
      '#default_value' => variable_get('ywp_defaultalbumart', ''),
      '#description' => t('Set your own image inside the Yahoo! WebPlayer that appears while audio is playing. The recommended dimensions are 205px by 205px. Allowed extensions: jpg, jpeg, png, gif')
    );
  }
  $form['ywp_autoadvance'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('ywp_autoadvance', TRUE),
    '#required' => FALSE,
    '#title' => t('Advance automatically to the next item on playlist')
  );
  $form['ywp_playlink'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('ywp_playlink', TRUE),
    '#required' => FALSE,
    '#title' => t('Open the webplayer when user click in the text link')
  );
  $form['ywp_parse'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('ywp_parse', TRUE),
    '#required' => FALSE,
    '#title' => t('Enable automatic link detection and term recognition')
  );
  $form['ywp_wmode'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('ywp_wmode', TRUE),
    '#required' => FALSE,
    '#title' => t('Disable wmode override for embedded YouTube videos')
  );
  $form['ywp_autoplay'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('ywp_autoplay', FALSE),
    '#required' => FALSE,
    '#title' => t('Autoplay')
  );
  $form['ywp_displaystate'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('ywp_displaystate', FALSE),
    '#required' => FALSE,
    '#title' => t('Show the webplayer with maximized state on page load')
  );
  $form['ywp_term_detection'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('ywp_term_detection', FALSE),
    '#required' => FALSE,
    '#title' => t('Detect and play mentions of movie titles')
  );
  $form['ywp_linkconfig'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('ywp_linkconfig', FALSE),
    '#required' => FALSE,
    '#title' => t('Ignore links to YouTube pages')
  );
  $form['ywp_changetotop'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('ywp_changetotop', FALSE),
    '#required' => FALSE,
    '#title' => t('Change player position to top-left')
  );
  $form['visibility_title'] = array(
    '#type' => 'item',
    '#markup' => '<h2>' . t('Visibility settings') . '</h2>'
  );
  $form['visibility'] = array(
    '#type' => 'vertical_tabs'
  );
  $form['visibility']['pages'] = array(
    '#type' => 'fieldset',
    '#title' => t('Pages'),
  );
  $form['visibility']['pages']['ywp_pages_visibility'] = array(
    '#type' => 'radios',
    '#title' => t('Show Yahoo! Webplayer on specific pages'),
    '#options' => array('except' => t('All pages except those listed'), 'only' => t('Only the listed pages')),
    '#default_value' => variable_get('ywp_pages_visibility', 'except')
  );
  $form['visibility']['pages']['ywp_pages_paths'] = array(
    '#type' => 'textarea',
    '#default_value' => variable_get('ywp_pages_paths', ''),
    '#description' => t('Specify pages by using their paths. Enter one path per line. The \'*\' character is a wildcard. Example paths are <em class="placeholder">blog</em> for the blog page and <em class="placeholder">blog/*</em> for every personal blog. <em class="placeholder">&lt;front&gt;</em> is the front page.'),
  );
  $node_types = node_type_get_types();
  foreach ($node_types as $value) {
    $nodetypes[$value->type] = $value->name;
  }
  $form['visibility']['nodetypes'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content types'),
  );
  $form['visibility']['nodetypes']['ywp_node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Show Yahoo! Webplayer for specific content types'),
    '#options' => $nodetypes,
    '#default_value' => variable_get('ywp_node_types', array()),
    '#description' => t('Show the Yahoo! Webplayer only on pages that display content of the given type(s). If you select no types, there will be no type-specific limitation.'),
  );

  $form['#validate'][] = 'yahoo_webplayer_admin_validate';
  $form['#submit'][] = 'yahoo_webplayer_admin_submit';

  return system_settings_form($form);
}

/**
 * Implement hook_validate().
 */
function yahoo_webplayer_admin_validate($form, &$form_state) {
  if (module_exists('image')) {
    // validate the album art
    $file = file_save_upload('albumart', array(
      'file_validate_is_image' => array(), // Validates file is really an image.
      'file_validate_extensions' => array('png gif jpg jpeg'), // Validate extensions.
    ));
    // If the file passed validation:
    if ($file) {
      // delete old album art
      if (variable_get('ywp_defaultalbum', '') != '') {
        $oldfile = file_load(variable_get('ywp_defaultalbum', ''));
        file_delete($oldfile, TRUE);
        variable_set('ywp_defaultalbum', '');
      }
      // Move the file, into the Drupal file system
      $ext = explode(".", $file->filename);
      if ($file = file_move($file, 'public://defaultalbumart.' . end($ext))) {
        // Save the file for use in the submit handler.
        $form_state['storage']['file'] = $file;
      }
      else {
        form_set_error('ywp_defaultalbumart', t('Failed to write the uploaded file the site\'s file folder.'));
      }
    }
    else {
      $form_state['storage']['file'] = '';
      if (isset($form_state['values']['ywp_defaultalbumart_delete']) && $form_state['values']['ywp_defaultalbumart_delete'] == TRUE) {
        $oldfile = file_load(variable_get('ywp_defaultalbum', ''));
        file_delete($oldfile, TRUE);
        variable_set('ywp_defaultalbum', '');
      }
    }
  }
}

function yahoo_webplayer_admin_submit($form, &$form_state) {
  if ($form_state['storage']['file'] && module_exists('image')) {
    $file = $form_state['storage']['file'];
    variable_set('ywp_defaultalbum', $file->fid);
    // We are done with the file, remove it from storage.
    unset($form_state['storage']['file']);
    // Make the storage of the file permanent
    $file->status = FILE_STATUS_PERMANENT;
    // Save file status.
    file_save($file);
  }
}

function yahoo_webplayer_add_js() {
  $player_config = '';
  $player_config .= 'var YWPParams = { ';
  if (variable_get('ywp_volume', '0.5') != '0.5') {
    $player_config .= ' volume: ' . variable_get('ywp_volume', '0.5') . ',';
  }
  if (variable_get('ywp_theme', 'black') != 'black') {
    $player_config .= ' theme: "' . variable_get('ywp_theme', 'black') . '",';
  }
  if (variable_get('ywp_defaultalbum', '') != '') {
    $file = file_load(variable_get('ywp_defaultalbum', ''));
    $player_config .= ' defaultalbumart: "' . file_create_url($file->uri) . '",';
  }
  if (variable_get('ywp_autoadvance', TRUE) != TRUE) {
    $player_config .= ' autoadvance: false,';
  }
  if (variable_get('ywp_playlink', TRUE) != TRUE) {
    $player_config .= ' playlink: false,';
  }
  if (variable_get('ywp_parse', TRUE) != TRUE) {
    $player_config .= ' parse: false,';
  }
  if (variable_get('ywp_autoplay', FALSE) != FALSE) {
    $player_config .= ' autoplay: true,';
  }
  if (variable_get('ywp_displaystate', FALSE) != FALSE) {
    $player_config .= ' displaystate: 1,';
  }
  if (variable_get('ywp_term_detection', FALSE) != FALSE) {
    $player_config .= ' termDetection: "on",';
  }
  if (variable_get('ywp_linkconfig', FALSE) != FALSE) {
    $player_config .= ' linkConfig: { youtube: "ignore" },';
  }
  if (variable_get('ywp_wmode', TRUE) != TRUE) {
    $player_config .= ' wmodeoverride: false,';
  }
  $player_config .= ' }';
  drupal_add_js($player_config, 'inline');
  drupal_add_js('http://webplayer.yahooapis.com/player.js', 'external');
}

function yahoo_webplayer_check_visibility() {
  if (variable_get('ywp_pages_paths', '') != '') {
    $pages = drupal_strtolower(variable_get('ywp_pages_paths', ''));
    $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));;
    $page_match = drupal_match_path($path, $pages);
    if ($path != $_GET['q']) {
      $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
    }
    switch (variable_get('ywp_pages_visibility', 'except')) {
      case 'except':
        return !$page_match;
      break;
      case 'only':
        return $page_match;
      break;
    }
  }
  else {
    foreach (variable_get('ywp_node_types', array()) as $selected_nodetypes) {
      if ($selected_nodetypes != '') {
        $types = variable_get('ywp_node_types', array());
        if (arg(0) == 'node' && is_numeric(arg(1))) {
          $node = node_load(arg(1));
          foreach ($types as $type) {
            if (is_numeric($type)) {
              return FALSE;
            }
            elseif ($node->type == $type) {
              return TRUE;
            }
          }
        }
        else {
          return FALSE;
        }
      }
      else {
        return TRUE;
      }
    }
  }
}

/**
 * Implement hook_preprocess_page().
 */
function yahoo_webplayer_preprocess_page(&$vars, $hook) {
  if (user_access('show ywp') && yahoo_webplayer_check_visibility()) {
    yahoo_webplayer_add_js();
    if(variable_get('ywp_changetotop', FALSE)) {
      drupal_add_css(drupal_get_path('module', 'yahoo_webplayer') . '/css/top-left.css', array('type' => 'file', 'group' => CSS_DEFAULT));
    }
  }
}
