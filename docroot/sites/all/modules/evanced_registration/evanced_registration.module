<?php

/**
 * @file
 * Allows visitors to register for Evanced events from within the context of the Drupal site.
 */

/**
 * Define constants.
 */
define('EVANCED_HOST', variable_get('evanced_registration_url'));
define('EVANCED_ASSISTANCE_URL', variable_get('evanced_registration_assistance_url'));

/**
 * Implements hook_init().
 */
function evanced_registration_init() {
  drupal_add_js(drupal_get_path('module', 'evanced_registration') . '/evanced_registration.js', 'file');
  // If the current page is one we want to exclude from the cache, set the page caching to false.
  preg_match('/(evanced-registration\/[0-9]*)/U', $_GET['q'], $matches); // U makes it an ungreedy match.
  if (count($matches) > 1) {
    $path_non_cacheable = $matches[1];
  }
  if (!empty($path_non_cacheable)) {
    drupal_page_is_cacheable(FALSE);
    return;
  }
}

/**
 * Implements hook_menu().
 */
function evanced_registration_menu() {
  $items['evanced-registration/%'] = array(
    'title' => t('Register for Event'),
    'title callback' => 'evanced_registration_form_page_title',
    'title arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('evanced_registration_form', 1),
    'file' => 'evanced_registration.pages.inc', // Move page callback functions to an include file or else they're called on each page load.
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['evanced-registration/confirmation'] = array(
    'title' => t('Registration Confirmed'),
    'page callback' => 'evanced_registration_confirmation',
    'file' => 'evanced_registration.pages.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['evanced-registration/confirmation-waiting'] = array(
    'title' => t('Added to Waiting List'),
    'page callback' => 'evanced_registration_confirmation_waiting',
    'file' => 'evanced_registration.pages.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['evanced-registration/cancel/%'] = array(
    'title' => t('Cancel Registration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('evanced_cancellation_form', 2),
    'file' => 'evanced_registration.pages.inc', // Move page callback functions to an include file or else they're called on each page load.
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['evanced-registration/cancellation'] = array(
    'title' => t('Registration Successfully Cancelled'),
    'page callback' => 'evanced_registration_cancellation',
    'file' => 'evanced_registration.pages.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['admin/config/development/evanced-registration'] = array(
    'title' => t('Evanced Registration'),
    'description' => t('Allows visitors to register for Evanced events from within the context of the Drupal site.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('evanced_registration_settings'),
    'access arguments' => array('administer evanced registration'),
    'file' => 'evanced_registration.admin.inc',
    'type' => MENU_NORMAL_ITEM
  );
  return $items;
}

/**
 * Page Title callback function from hook_menu().
 * The URL will pass in parameters. The 1st should be the Evanced ID of the event in question.
 */
function evanced_registration_form_page_title($evanced_id) {
  $event_title = evanced_registration_get_title($evanced_id);
  if (!empty($event_title) && $event_title != FALSE) {
    return 'Register for ' . $event_title;
  }
  else {
    return 'Register for event #' . $evanced_id;
  }
}

/**
 * Implementation of hook_permission().
 */
function evanced_registration_permission() {
  return array('administer evanced registration' => array(
      'title' => t('Administer Evanced Registration'),
      'description' => t('Configure settings for Evanced Registration.'),
    ),
  );
}

/**
 * Simplify phone numbers.
 */
function evanced_registration_simplfy_phone($phone) {
  // Eliminate every char except 0-9
  $justNums = preg_replace("/[^0-9]/", '', $phone);
  // Eliminate leading 1 if its there
  if (strlen($justNums) == 11) $justNums = preg_replace("/^1/", '',$justNums);
  // Add hyphens back in.
  $first_phone = substr($justNums, 0, 3) . '-' . substr($justNums, 3);
  $final_phone = substr($first_phone, 0, 7) . '-' . substr($first_phone, 7);
  return $final_phone;
}

/**
 * Check an Evanced ID to make sure it is something we have a record of in Drupal.
 * Returns the event title if found.
 * Returns boolean FALSE if nothing found.
 */
function evanced_registration_get_title($evanced_id) {
  // Pull title of the event from the Drupal database based on the Evanced ID. Same way that Evanced Events Importer does it.
  // Most of the code below copied from Evanced Events Importer.
  // This sql query retrieves an event that
  // matches the evanced ID currently in play.
  $sql = "SELECT  n.nid, n.created, COUNT(fel.field_evanced_location_tid) as location_term_count " .
         "FROM {node} n " .
         "LEFT JOIN {field_data_field_evanced_id} eid " .
         "ON n.nid = eid.entity_id " .
         "LEFT JOIN {field_data_field_evanced_location} fel " .
         "ON n.nid = fel.entity_id " .
         "WHERE eid.bundle = :bundle " .
         "AND eid.field_evanced_id_value = :evanced_id " .
         "GROUP BY fel.entity_id";

  // Run the query.
  $result = db_query($sql, array(':bundle' => 'event', ':evanced_id' => trim($evanced_id)));

  // Make loop for each record in the query results.
  foreach ($result as $data) {
    $nid = $data->nid;
    $last_updated_db = date('Y-m-d\TH:i:s\Z', $data->created);
    // $last_updated_db = date('Y-m-d\TH:i:s\Z', strtotime('+1 hour', $data->created));
    $location_term_count = $data->location_term_count;
    // drupal_set_message('id #' . $id . ': DB: ' . $last_updated_db . '; Evanced: ' . $lastupdated, 'status');
    $node = node_load($nid);
    $event_title = $node->title;
  }
  if (!empty($event_title)) {
    return $event_title;
  }
  return FALSE;
}
