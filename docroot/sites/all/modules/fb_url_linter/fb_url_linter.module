<?php
/**
 * @file
 * Primarily Drupal hooks and global API functions.
 */

/**
 * Default value for variable that limit number of nodes that is processed
 * on one cron job execution.
 */
define('FB_URL_LINTER_CRON_LIMIT', 10);

/**
 * Implements hook_menu().
 */
function fb_url_linter_menu() {
  $items['admin/config/search/facebook-url-linter'] = array(
    'title' => 'Facebook URL sending',
    'description' => 'Configure settings for Facebook URL Linter module.',
    'access arguments' => array('administer facebook url linter'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fb_url_linter_configuration_form'),
    'file' => 'fb_url_linter.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function fb_url_linter_permission() {
  return array(
    'administer facebook url linter' => array(
      'title' => t('Administer Facebook URL Linter'),
      'description' => t('Access to modify Facebook URL Linter configuration.'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function fb_url_linter_cron() {
  $enabled_types = variable_get('fb_url_linter_cron_types', array());
  $limit = variable_get('fb_url_linter_cron_limit', FB_URL_LINTER_CRON_LIMIT);
  $processed = 0;

  if (!empty($enabled_types)) {
    $query = db_select('node', 'n');
    $query->fields('n', array('nid', 'title', 'changed'));
    $query->leftJoin('fb_url_linter', 'ful', 'n.nid = ful.nid');
    $db_or = db_or()
      ->isNull('ful.nid', 'null', 'IS')
      ->where("ful.timestamp < n.changed");
    $query->condition($db_or)
      ->condition('status', 0, '>')
      ->condition('type', $enabled_types, 'IN');
    $query->addTag('node_access');
    $nodes = $query->execute()->fetchAll();
    foreach ($nodes as $node) {
      if ($processed == $limit) {
        break;
      }
      if (fb_url_linter_send_node($node)) {
        _fb_url_linter_write_record($node);
        $processed++;
      }
    }
    if ($processed > 0) {
      watchdog('Facebook URL', 'There was successfully submitted %count nodes to Facebook Linter service API by cron job.', array('%count' => $processed), WATCHDOG_INFO);
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function fb_url_linter_node_insert($node) {
  _fb_url_linter_node_submitted($node);
}

/**
 * Implements hook_node_update().
 */
function fb_url_linter_node_update($node) {
  _fb_url_linter_node_submitted($node);
}

/**
 * Helper function executed on node insert or update.
 *
 * @param stdObject $node
 *   Object of subbmited node.
 */
function _fb_url_linter_node_submitted($node) {
  $enabled_types = variable_get('fb_url_linter_update_types', array());
  if (in_array($node->type, $enabled_types) && $node->status == 1) {
    if (!fb_url_linter_send_node($node)) {
      watchdog('Facebook URL', 'Error on sending a content %title URL to Facebook Linter service API.', array('%title' => $node->title), WATCHDOG_WARNING);
    }
    else {
      _fb_url_linter_write_record($node);
    }
  }
}

/**
 * Update or insert record to module custom table.
 */
function _fb_url_linter_write_record($node) {
  if (db_query('SELECT nid FROM {fb_url_linter} WHERE nid = :nid', array(':nid' => $node->nid))->rowCount() == 0) {
    db_insert('fb_url_linter')
      ->fields(array(
        'nid' => $node->nid,
        'timestamp' => $node->changed,
      ))
      ->execute();
  }
  else {
    db_update('fb_url_linter')
      ->fields(array(
        'timestamp' => $node->changed,
      ))
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Send absolute node URL to Facebook Linter by specified nid.
 *
 * @param int $nid
 *   Node nid.
 */
function fb_url_linter_send_node($node) {
  $result = FALSE;
  $node_uri = entity_uri('node', $node);
  $node_uri['options']['absolute'] = TRUE;
  $url = url($node_uri['path'], $node_uri['options']);
  $fb_url_linter_endpoint = variable_get('fb_url_linter_endpoint', 'http://developers.facebook.com/tools/lint/?url=!url&format=json');
  if ($url) {
    $result = drupal_http_request(format_string($fb_url_linter_endpoint, array('!url' => $url)));
  }
  if ($result && $result->code == 200) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}
