<?php

/**
 * @file
 * Creates an user, who has the ability to login by password only.
 */

/**
 * Implements hook_menu().
 */
function passwd_only_menu() {
  $items['passwd-only/login'] = array(
    'title' => 'Password only login',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('passwd_only_login_form'),
    'access arguments' => array('use passwd only'),
  );

  $items['admin/config/system/passwd-only'] = array(
    'title' => 'PassWd only',
    'description' => 'Manage PassWd only.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('passwd_only_admin'),
    'access arguments' => array('admin passwd only'),
    'file' => 'passwd_only.pages.inc',
  );

  $items['admin/config/system/passwd-only/view'] = array(
    'title' => 'PassWd only',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function passwd_only_permission() {
  $perms = array(
    'use passwd only' => array(
      'title' => t('Use password only'),
      'description' => t('Use the login page and the block of password only.'),
    ),
    'admin passwd only' => array(
      'title' => t('Admin password only'),
      'description' => t('Set the user to use with the module passwd only.'),
    ),
  );

  return $perms;
}

/**
 * Implements hook_block_info().
 */
function passwd_only_block_info() {
  global $user;

  $blocks['login']['info'] = t('Password only user login');
  // Not worth caching.
  $blocks['login']['cache'] = DRUPAL_NO_CACHE;

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function passwd_only_block_view($delta = '') {
  global $user;
  $block = array();

  switch ($delta) {
    case 'login':
      // For usability's sake, avoid showing two login forms on one page.
      if (!$user->uid && !(arg(0) == 'user' && !is_numeric(arg(1)))) {
        $block['subject'] = t('Password only user login');
        $block['content'] = drupal_get_form('passwd_only_login_form');
      }
      break;

  }
  return $block;
}

/**
 * Returns the actual password only user.
 *
 * @return string
 *   The name of the actual password only user.
 */
function passwd_only_get_name() {
  if (variable_get('passwd_only_user') != '') {
    $account = user_load(variable_get('passwd_only_user'));
    return $account->name;
  }
  else {
    return FALSE;
  }
}

/**
 * Form callback for passwd_only_block_view().
 */
function passwd_only_login_form($form) {
  global $user;

  $passwd_only_user = variable_get('passwd_only_user');

  if (!$user->uid && !empty($passwd_only_user)) {

    $destination = drupal_get_destination();

    if ($destination['destination'] == 'passwd-only/login') {
      $destination['destination'] = 'user';
    }

    $form['#action'] = url(current_path(), array('query' => $destination, 'external' => FALSE));
    $form['#id'] = 'passwd-only-login-form';
    $form['#validate'] = array(
      'user_login_name_validate',
      'user_login_authenticate_validate',
      'passwd_only_login_final_validate',
    );
    $form['#submit'][] = 'passwd_only_login_form_submit';
    $form['name'] = array(
      '#type' => 'hidden',
      '#value' => passwd_only_get_name(),
    );

    $form['markup'] = array(
      '#markup' => variable_get('passwd_only_block_description', ''),
    );

    $form['pass'] = array(
      '#type' => 'password',
      '#title' => t('Password'),
      '#size' => 15,
      '#required' => TRUE,
    );

    $form['actions'] = array(
      '#type' => 'actions',
    );
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Log in'),
    );
  }

  if (empty($passwd_only_user)) {
    $form['warning'] = array(
      '#markup' => t('First create and set an user account you want use with passwd only. Go to the !admin_page of the passwd only module.', array('!admin_page' => l(t('admin page'), 'admin/config/system/passwd-only'))),
    );
  }

  return $form;
}

/**
 * The final validation handler on the login form.
 *
 * Sets a form error if user has not been authenticated, or if too many
 * logins have been attempted. This validation function should always
 * be the last one.
 */
function passwd_only_login_final_validate($form, &$form_state) {
  if (empty($form_state['uid'])) {
    // Always register an IP-based failed login event.
    flood_register_event('failed_login_attempt_ip', variable_get('user_failed_login_ip_window', 3600));
    // Register a per-user failed login event.
    if (isset($form_state['flood_control_user_identifier'])) {
      flood_register_event('failed_login_attempt_user', variable_get('user_failed_login_user_window', 21600), $form_state['flood_control_user_identifier']);
    }

    if (isset($form_state['flood_control_triggered'])) {
      if ($form_state['flood_control_triggered'] == 'user') {
        form_set_error('name', format_plural(variable_get('user_failed_login_user_limit', 5), 'Sorry, there has been more than one failed login attempt for this account. It is temporarily blocked. Try again later or <a href="@url">request a new password</a>.', 'Sorry, there have been more than @count failed login attempts for this account. It is temporarily blocked. Try again later or <a href="@url">request a new password</a>.', array('@url' => url('user/password'))));
      }
      else {
        // We did not find a uid, so the limit is IP-based.
        form_set_error('name', t('Sorry, too many failed login attempts from your IP address. This IP address is temporarily blocked. Try again later or <a href="@url">request a new password</a>.', array('@url' => url('user/password'))));
      }
    }
    else {
      form_set_error('name', t('Sorry, unrecognized password.'));
      watchdog('user', 'Passwd only login attempt failed for %user.', array('%user' => $form_state['values']['name']));
    }
  }
  elseif (isset($form_state['flood_control_user_identifier'])) {
    // Clear past failures for this user so as not to block a user who might
    // log in and out more than once in an hour.
    flood_clear_event('failed_login_attempt_user', $form_state['flood_control_user_identifier']);
  }
}

/**
 * Submit function for passwd_only_login_block().
 */
function passwd_only_login_form_submit($form, &$form_state) {
  global $user;
  $user = user_load($form_state['uid']);
  $form_state['redirect'] = 'user/' . $user->uid;

  user_login_finalize($form_state);
}

/**
 * Implements hook_help().
 */
function passwd_only_help($path, $arg) {
  $output = '';
  switch ($path) {

    case 'admin/help#passwd_only':
      $output .= '<p>' . t('First you install the module, you have to select one user (or create an new user) to use with PassWd only. The password you set for this user is the login password in the PassWd only login form.') . '</p>';

      $output .= '<h2>' . t('PassWd only login page') . ' </h2>';

      $output .= '<p>' . t('Go to <a href="@page">PassWd only login page</a> to log in only with password.', array('@page' =>
      url('passwd-only/login'))) . '</p>';

      $output .= '<h2>' . t('PassWd only login block') . ' </h2>';

      $output .= '<p>' . t('Go to the <a href="@blocks">blocks administration page</a> and enable the PassWd only block for your theme.', array('@blocks' =>
      url('admin/structure/block'))) . '</p>';
  }

  return $output;
}
