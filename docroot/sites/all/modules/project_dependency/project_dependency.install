<?php
/**
 * @file
 * Install, update and uninstall functions for the project_dependency module.
 *
 */

/**
 * Implements hook_uninstall().
 */
function project_dependency_uninstall() {
  $variables = array(
    'project_dependency_sourcecode_directory',
    'project_dependency_upstream_repository_path',
  );
  foreach ($variables as $variable) {
    variable_del($variable);
  }
}

/**
 * Implements hook_schema().
 */
function project_dependency_schema() {
  $schema['project_dependency_component'] = array(
    'description' => 'The component(s) contained by a project release.',
    'fields' => array(
      'component_id' => array(
        'description' => 'Unique component ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'release_nid' => array(
        'description' => 'The {node}.nid of the project_dependency node that includes a component.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The machine readable name of a component.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The human readable name of a component',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'A description of a component.',
        'type' => 'text',
        'size' => 'medium',
      ),
    ),
    'primary key' => array('component_id'),
    'indexes' => array(
      'release_nid' => array('release_nid'),
      'name' => array('name'),
    ),
  );

  $schema['project_dependency_dependency'] = array(
    'description' => 'The dependencies of a component.',
    'fields' => array(
      'dependency_id' => array(
        'description' => 'Dependency ID',
        'type' => 'serial',
      ),
      'component_id' => array(
        'description' => 'ID of a component.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'dependency' => array(
        'description' => 'Name (shortname) of a component that the component is dependent upon.',
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
      ),
      'core_api' => array(
        'type' => 'varchar',
        'length' => 8,
        'description' => 'The core api version of this component, as in "6.x" or "7.x".',
        'not null' => TRUE,
      ),
      'external' => array(
        'description' => 'TRUE if the dependency is not in the same package as this component.',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'external_release_nid' => array(
        'description' => 'Release nid for this dependency',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
      'dependency_type' => array(
        'description' => 'Dependency type, project_dependency_DEPENDENCY_*.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('dependency_id'),
    'indexes' => array('component_dependency' => array('component_id', 'dependency')),
  );
  return $schema;
}

/**
 * Increase the size of the dependency column in {project_dependency_dependency} table.
 */
function project_dependency_update_7000() {
  db_drop_index('project_dependency_dependency', 'component_dependency');
  $description = 'Name (shortname) of a component that the component is dependent upon.';
  db_change_field('project_dependency_dependency', 'dependency', 'dependency',
    array(
      'description' => $description,
      'type' => 'varchar',
      'length' => 100,
      'not null' => TRUE,
    ),
    array('indexes' => array('component_dependency' => array('component_id', 'dependency')))
  );
}
