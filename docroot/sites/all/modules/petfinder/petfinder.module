<?php
/**
 * @file
 *
 * This file contains the core functionality for the Petfinder module
 */

// Define constants
define('PETFINDER_SEARCH_DEFAULT_COUNT', 25);
define('PETFINDER_SEARCH_DEFAULT_MAX_COUNT', 100);
define('PETFINDER_SELECT_NONE', '');

// Pet image index offsets within media array, best guess of scaling rules
// used by Petfinder based on samples (no documentation I could find)
define('PETFINDER_IMG_X', 0);     // Original?
define('PETFINDER_IMG_FPM', 1);   // Scaled to 95px max width?
define('PETFINDER_IMG_PN', 2);    // Scaled to 300x250 max dims?
define('PETFINDER_IMG_PNT', 3);   // Scaled to 60px max width?
define('PETFINDER_IMG_T', 4);     // Scaled to 50px max height?

/**
 * Implements hook_menu
 */
function petfinder_menu() {
  $items = array();

  // Main configuration settings page
  $items['admin/config/system/petfinder'] = array(
    'title' => 'Petfinder',
    'description' => 'Configure the Petfinder module to integrate against Petfinder.com services.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('petfinder_admin_form'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer petfinder'),
    'file' => 'petfinder.admin.inc',
  );

  // Shelter detail page
  $items['petfinder/shelter/%petfinder_shelter'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'theme',
    'page arguments' => array('petfinder_shelter', 2),
    'access arguments' => array('access content'),
  );

  // Pet detail page
  $items['petfinder/pet/%petfinder_pet'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'theme',
    'page arguments' => array('petfinder_pet', 2),
    'access arguments' => array('access content'),
  );

  // Shelter search page
  $items['petfinder/search/shelters'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Shelter Search',
    'description' => 'Search for shelters listed on Petfinder.com',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('petfinder_shelter_search_page'),
    'access arguments' => array('access petfinder shelter search'),
    'file' => 'petfinder.pages.inc',
  );

  // Pet search page
  $items['petfinder/search/pets'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Pet Search',
    'description' => 'Search for pets listed on Petfinder.com',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('petfinder_pet_search_page'),
    'access arguments' => array('access petfinder pet search'),
    'file' => 'petfinder.pages.inc',
  );

  return $items;
}

/**
 * Implements menu autoload callback for %petfinder_shelter
 */
function petfinder_shelter_load($id) {
  $id = filter_xss($id);
  $data = petfinder_query('shelter.get', array('id' => $id));
  if ($data && !empty($data['shelter'])) {
    $shelter = array('shelter' => $data['shelter']);

    // Invoke any alter hooks for the record
    drupal_alter('petfinder_shelter', $shelter);

    // Invoke any load hooks for the record; note we ignore the return as any
    // modifications should be handled by the alter hooks above
    module_invoke_all('petfinder_shelter_load', $shelter);

    return $shelter;
  }

  return FALSE;
}

/**
 * Implements menu autoload callback for %petfinder_pet
 */
function petfinder_pet_load($id) {
  $id = filter_xss($id);
  $data = petfinder_query('pet.get', array('id' => $id));
  if ($data && !empty($data['pet'])) {
    $pet = array('pet' => $data['pet']);

    // Invoke any alter hooks for the record
    drupal_alter('petfinder_pet', $pet);

    // Invoke any load hooks for the record; note we ignore the return as any
    // modifications should be handled by the alter hooks above
    module_invoke_all('petfinder_pet_load', $pet);

    return $pet;
  }

  return FALSE;
}

/**
 * Utility function to query Petfinder for a list of matching shelters
 *
 * @param $args
 *   Array of name-value pairs matching the API call arguments:
 *     location:    the ZIP/postal code or city and state where the search should begin
 *     name:        full or partial shelter name
 *     offset:      offset into the result set (default is 0)
 *     count:       how many records to return for this particular API call (default is 25)
 */
function petfinder_shelter_search($args = array()) {
  // Scrub our arguments in case they were passed in raw
  array_walk($args, '_petfinder_filter_xss');
  $data = petfinder_query('shelter.find', $args);
  if ($data && !empty($data['shelters'])) {
    $shelters = array('shelters' => $data['shelters']['shelter']);

    // Invoke any alter hooks for the entire list; note we are not invoking
    // hook_petfinder_shelter_load_alter on every shelter record for
    // performance sake.  List alter hooks can do this themselves if they need to.
    drupal_alter('petfinder_shelters', $shelters);

    // Invoke any load hooks for the entire list; note we ignore the return as any
    // modifications should be handled by the alter hooks above.  Same logic
    // applies to list vs record level hooks invocation as above.
    module_invoke_all('petfinder_shelter_search', $shelters);

    return $shelters;
  }

  return FALSE;
}

/**
 * Utility function to query Petfinder for a list of matching pets
 *
 * @param $args
 *   Array of name-value pairs matching the API call arguments:
 *     location:    the ZIP/postal code or city and state where the search should begin
 *     offset:      offset into the result set (default is 0)
 *     count:       how many records to return for this particular API call (default is 25)
 */
function petfinder_pet_search($args = array()) {
  // Scrub our arguments in case they were passed in raw
  array_walk($args, '_petfinder_filter_xss');
  $data = petfinder_query('pet.find', $args);
  if ($data && !empty($data['pets'])) {
    $shelters = array('pets' => $data['pets']['pet']);

    // Invoke any alter hooks for the entire list; note we are not invoking
    // hook_petfinder_shelter_load_alter on every shelter record for
    // performance sake.  List alter hooks can do this themselves if they need to.
    drupal_alter('petfinder_pets', $shelters);

    // Invoke any load hooks for the entire list; note we ignore the return as any
    // modifications should be handled by the alter hooks above.  Same logic
    // applies to list vs record level hooks invocation as above.
    module_invoke_all('petfinder_pet_search', $shelters);

    return $shelters;
  }

  return FALSE;
}

/*
 * Implements hook_theme
 */
function petfinder_theme($existing, $type, $theme, $path) {
  $items = array();

  // Some quasi clever array merging here borrowed from Views
  $base = array(
    'path' => drupal_get_path('module', 'petfinder') . '/templates',
  );

  // Define theme template for shelters
  $items['petfinder_shelter'] = $base + array(
    'variables' => array('shelter' => NULL, 'page' => TRUE),
    'template' => 'petfinder_shelter',
  );

  // Define theme template for shelter list
  $items['petfinder_shelter_list'] = $base + array(
    'variables' => array('shelters' => array(), 'offset' => 0, 'count' => NULL),
  );

  // Define theme template for pets
  $items['petfinder_pet'] = $base + array(
    'variables' => array('pet' => NULL, 'page' => TRUE),
    'template' => 'petfinder_pet',
  );

  // Define theme template for pet list
  $items['petfinder_pet_list'] = $base + array(
    'variables' => array('pets' => array(), 'offset' => 0, 'count' => NULL),
  );

  return $items;
}

/**
 * Implements default theme function for a shelter list
 */
function theme_petfinder_shelter_list($vars) {
  $output = array();
  $shelters = $vars['shelters'];
  $offset = $vars['offset'];
  $count =  $vars['count'];

  foreach (array_slice($shelters, $offset, $count) as $shelter) {
    $output[] = theme('petfinder_shelter', array('shelter' => $shelter, 'page' => FALSE));
  }

  return implode("\n", $output);
}

/**
 * Implements default theme function for a pet list
 */
function theme_petfinder_pet_list($vars) {
  $output = array();
  $pets = $vars['pets'];
  $offset = $vars['offset'];
  $count =  $vars['count'];

  foreach (array_slice($pets, $offset, $count) as $pet) {
    $output[] = theme('petfinder_pet', array('pet' => $pet, 'page' => FALSE));
  }

  return implode("\n", $output);
}

/**
 * Implements default template_preprocess_HOOK for 'petfinder_shelter'
 */
function template_preprocess_petfinder_shelter(&$vars) {
  // Make sure we have a valid shelter record before we go crazy
  if (!empty($vars['shelter'])) {
    $shelter = &$vars['shelter'];

    if ($vars['page']) {
      drupal_set_title($shelter['name']);
    }
  }

  // Inject custom CSS
  drupal_add_css(drupal_get_path('module', 'petfinder') . '/css/petfinder.css');
}

/**
 * Implements default template_preprocess_HOOK for 'petfinder_pet'
 */
function template_preprocess_petfinder_pet(&$vars) {
  // Make sure we have a valid pet record before we go crazy
  if (!empty($vars['pet'])) {
    $pet = &$vars['pet'];

    if ($vars['page']) {
      drupal_set_title($pet['name']);
    }

    // Build breeds info; sometimes single value, sometimes an array
    if (!empty($pet['breeds']['breed']) && is_array($pet['breeds']['breed'])) {
      $pet['breeds']['breed'] = implode(', ', $pet['breeds']['breed']);
    }

    // Build "options" list up, using human-readable values; sometimes single value, sometimes an array
    if (!empty($pet['options']['option'])) {
      $xref_options = array(
        'specialNeeds' => 'Special Needs',
        'noDogs' => t('Not good with dogs'),
        'noCats' => t('Not good with cats'),
        'noKids' => t('Not good with children'),
        'noClaws' => t('Declawed'),
        'hasShots' => t('Current on shots'),
        'housebroken' => t('Housebroken'),
        'altered' => !empty($pet['sex']) ? (('M' == $pet['sex']) ? t('Neutered') : t('Spayed')) : t('Altered'),
      );

      // Convert to array for common code if single value
      if (!is_array($pet['options']['option'])) {
        $pet['options']['option'] = array($pet['options']['option']);
      }

      $new_options = array();
      foreach ($pet['options']['option'] as $option) {
        $new_options[] = (isset($xref_options[$option])) ? $xref_options[$option] : $option;
      }

      $pet['options'] = theme('item_list', array(
        'items' => $new_options,
        'title' => NULL,
        'type' => 'ul',
        'attributes' => array(),
      ));
    }

    // Tack on shelter info
    if (isset($pet['shelterId'])) {
      $shelter = petfinder_shelter_load($pet['shelterId']);
      if ($shelter) {
        $shelter['page'] = FALSE;
        $vars['shelter'] = theme('petfinder_shelter', $shelter);
      }
    }

    // Human-readable, translatable gender
    if (!empty($pet['sex'])) {
      $pet['sex'] = ('M' == $pet['sex']) ? t('Male') : t('Female');
    }

    // Human-readable, translatable animal size
    if (!empty($pet['size'])) {
      $xref_size = array(
        'S' => t('Small'),
        'M' => t('Medium'),
        'L' => t('Large'),
        'XL' => t('Very Large'),
      );
      $pet['size'] = isset($xref_size[$pet['size']]) ? $xref_size[$pet['size']] : $pet['size'];
    }
  }

  // Inject custom CSS
  drupal_add_css(drupal_get_path('module', 'petfinder') . '/css/petfinder.css');
}

/**
 * Implements hook_permission
 */
function petfinder_permission() {
  $perms = array();

  $perms['administer petfinder'] = array(
    'title' => t('Administer Petfinder settings'),
    'description' => t("Allows users to configure the Petfinder module's system settings"),
    'restrict access' => TRUE,
  );

  $perms['access petfinder shelter search'] = array(
    'title' => t('Access Petfinder shelter search page'),
    'description' => t("Allows users to view and search the Petfinder shelter database"),
  );

  $perms['access petfinder pet search'] = array(
    'title' => t('Access Petfinder pet search page'),
    'description' => t("Allows users to view and search the Petfinder pet database"),
  );

  return $perms;
}

/**
 * Implements hook_flush_caches
 */
function petfinder_flush_caches() {
  $bins = array(
    'cache_petfinder',
  );

  return $bins;
}

/**
 * Util function to clear the Petfinder API query cache
 */
function petfinder_cache_clear() {
  cache_clear_all('*', 'cache_petfinder', TRUE);
}

/**
 * Query wrapper for API
 *
 * @param $method
 *   Petfinder API method, as defined on http://www.petfinder.com/developers/api-docs
 * @param $args
 *   Array of arguments to pass to the call
 *
 * @return
 *   Returns an array built from the JSON response received from the server,
 *   or FALSE if call to server could not be completed.  Note that the server
 *   might return a response even though an error occurred in the API call,
 *   so check for PFAPI_OK in the result array.
 */
function petfinder_query($method, $args) {
  $retval = FALSE;
  $session = &drupal_static(__FUNCTION__);

  // Check to see if we've already got an initialized session object, create one if not
  if (!$session) {
    $cfg = _petfinder_get_cfg();
    if (!empty($cfg)) {
      $pf = new PetfinderSession();
      $resp = $pf->init($cfg['api_key'], $cfg['secret_key']);
      if ($resp) {
        $session = $pf;
      }
    }
  }

  // Double-check we have a session object
  if ($session) {
    $retval = $session->call($method, $args);
  }

  return $retval;
}

/**
 * Util function to get config settings
 */
function _petfinder_get_cfg() {
  $cfg = variable_get('petfinder_cfg', array());
  return $cfg;
}

/**
 * Util function to set config settings
 */
function _petfinder_set_cfg($cfg) {
  variable_set('petfinder_cfg', $cfg);
}

/**
 * Util function to wrap all debug output
 */
function _petfinder_dpm($value) {
  $debug = variable_get('petfinder_debug', FALSE);

  if ($debug && function_exists('dpm')) {
    dpm($value);
  }
}

/**
 * Util function to wrap our watchdog output
 */
function _petfinder_watchdog($message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL) {
  if ($link) {
    $message .= ' (Attached link session token expires 60 minutes after call timestamp)';
  }
  watchdog('petfinder', $message, $variables, $severity, l('Failed call link', $link, array('html' => TRUE, 'attributes' => array('target' => '_blank'))));
  _petfinder_dpm(array('message' => $message, 'link' => $link));
}

/**
 * Array element data scrubbing callback
 */
function _petfinder_filter_xss(&$value) {
  if (is_string($value)) {
    $value = filter_xss($value);
  }
}

/**
 * Util function to centralize animal option list
 */
function _petfinder_get_animals() {
  $animals = array(
    'barnyard' => t('Barn Yard'),
    'bird' => t('Bird'),
    'cat' => t('Cat'),
    'dog' => t('Dog'),
    'horse' => t('Horse'),
    'pig' => t('Pig'),
    'reptile' => t('Reptile'),
    'smallfurry' => t('Small & Furry'),
    'rabbit' => t('Rabbit'),
  );

  // Sort based on translated values
  asort($animals);
  return $animals;
}

/**
 * Util function to retrieve breeds for an animal type
 */
function _petfinder_get_breeds($animal) {
  $breeds = array();
  if (!empty($animal)) {
    $args = array(
      'animal' => $animal,
    );
    $data = petfinder_query('breed.list', $args);
    if ($data && !empty($data['breeds'])) {
      foreach ($data['breeds']['breed'] as $breed) {
        $breeds[$breed] = $breed;
      };
      asort($breeds);
    }
  }

  return $breeds;
}

/**
 * AJAX callback for change of animal on settings form
 */
function _petfinder_default_animal($form, $form_state) {
  // When animal type changes, trigger rebuild of breeds
  return $form['pet_search']['default_breed'];
}

/**
 * AJAX callback for change of animal on pet search form
 */
function _petfinder_search_animal($form, $form_state) {
  // When animal type changes, trigger rebuild of breeds
  return $form['search']['breed'];
}
