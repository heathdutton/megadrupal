<?php

/**
 * @file
 * Extends the simple currency converter module.
 */

/**
 * Implements hook_simple_currency_converter_feed().
 */
function westpac_scc_simple_currency_converter_feed($feeds) {
  $feeds['westpac_scc'] = 'Westpac';
  return $feeds;
}

/**
 * Calculate the conversion rate.
 */
function westpac_scc_simple_currency_converter_request_feed($from_currency, $to_currency, $amount) {

  $url = 'http://www.westpac.co.nz/olcontent/olcontent.nsf/fx.xml';

  $xml = drupal_http_request($url);

  if (!isset($xml->error) && isset($xml->data) && !empty($xml->data)) {
    $data = westpac_scc_update_parse_xml($xml->data);
  }
  else {
    return NULL;
  }

  if (!isset($data[$from_currency]) || !isset($data[$to_currency])) {
    return NULL;
  }

  // Bank Buys At (1).
  // Bank Sells At (4).
  $from = $data[$from_currency]['rate'][1];
  $to   = $data[$to_currency]['rate'][1];

  $amount = ($to / $from) * $amount;

  return $amount;
}

/**
 * Parse the xml.
 */
function westpac_scc_update_parse_xml($raw_xml) {
  try {
    $xml = new SimpleXMLElement($raw_xml);
  }
  catch (Exception $e) {
    return FALSE;
  }

  $data = array();
  foreach ($xml->country as $country) {

    // 0 = Indicative.
    // 1 = BankBuysTT.
    // 2 = BankBuysOD.
    // 3 = BankBuysNotes.
    // 4 = BankSellsAt.
    $code = (string) $country['code'];
    $rate = array(
      (string) $country->rate[0],
      (string) $country->rate[1],
      (string) $country->rate[2],
      (string) $country->rate[3],
      (string) $country->rate[4],
    );

    $data[$code] = array(
      'code' => $code,
      'rate' => $rate,
    );
  }

  return $data;
}

/**
 * Available currency.
 */
function westpac_scc_return_codes() {
  return array(
    'NZD',
    'USD',
    'GBP',
    'AUD',
    'EUR',
    'JPY',
    'CAD',
    'CHF',
    'XPF',
    'DKK',
    'FJD',
    'HKD',
    'INR',
    'NOK',
    'PKR',
    'PGK',
    'PHP',
    'SGD',
    'SBD',
    'ZAR',
    'LKR',
    'SEK',
    'THB',
    'TOP',
    'VUV',
    'WST',
  );
}
