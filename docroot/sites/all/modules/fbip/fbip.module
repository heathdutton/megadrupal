<?php

/**
 * @file
 * Module file for the form flood control module
 */

/**
 * Implements hook_menu().
 */
function fbip_menu() {
  $items['admin/config/system/fbip'] = array(
    'title' => 'Form Block IP Configuration',
    'description' => 'Manage Form Block IP (FBIp) Configuration. Configure spam form submitters\' IPs to be blocked.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fbip_form'),
    'access arguments' => array('administer fbip'),
    'file' => 'fbip.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function fbip_permission() {
  return array(
    'administer fbip' => array(
      'title' => t('Administer Form Block IP (FBIp) configuration'),
      'description' => t('Allows a user to configure flood control and IP Banning.'),
    ),
    'bypass fbip' => array(
      'title' => t('Bypass Form Block IP (FBIp) restrictions'),
      'description' => t('Bypasses any restrictions imposed by Form Block IP (FBI) Module'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function fbip_form_alter(&$form, &$form_state, $form_id) {
  if (_fbip_is_applicable()) {
    $validator_to_be_added = FALSE;
    $control_all_forms = variable_get('fbip_all', 0);
    if ($control_all_forms) {
      $validator_to_be_added = TRUE;
    }
    else {
      $form_ids_to_control = explode("\r\n", variable_get('fbip_form_ids', ''));
      if (in_array($form_id, $form_ids_to_control)) {
        $validator_to_be_added = TRUE;
      }
    }
    if ($validator_to_be_added) {
      $form['#validate'][] = 'fbip_validator';
    }
  }
}

/**
 * Validation callback: The validator added to all monitored forms
 *
 */
function fbip_validator($form, &$form_state) {
  if (_fbip_is_applicable()) {
    if (!flood_is_allowed('fbip', variable_get('fbip_threshold', 100), variable_get('fbip_window', 3600))) {
      db_insert('blocked_ips')
          ->fields(array(
            'ip' => ip_address(),
          ))
          ->execute();
    }
    else {
      flood_register_event('fbip', variable_get('fbip_window', 3600));
    }
  }
}

/**
 * Implements hook_cron().
 */
function fbip_cron() {
  if (variable_get('fbip_reset', 0)) {
    db_delete('blocked_ips')
        ->execute();
  }
}

/**
 * Helper Function to validate if FBI restriction is in place for the user
 */
function _fbip_is_applicable() {
  $applicable = TRUE;
  if (user_access('bypass fbip')) {
    $applicable = FALSE;
  }
  elseif (in_array(ip_address(), explode("\r\n", variable_get('fbip_form_whitelist', '')))) {
    $applicable = FALSE;
  }
  return $applicable;
}
