<?php
// TODO: Impl. for per roles

/**
 * Implements hook_menu().
 */
function flag_limiter_menu() {
  $items = array();
  $items['admin/structure/flags/manage/%flag/limiter'] = array(
    'title' => 'Limiter',
    'description' => 'Configure limits on the number of flagged items.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flag_limiter_settings_form', 4),
    'access arguments' => array('administer flags'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  return $items;
}

/**
 * Flag limiter settings form.
 */
function flag_limiter_settings_form($form, &$form_state) {
  $flag = $form_state['build_info']['args'][0];
  $form = array();

  $form['flag_limiter_' . $flag->name . '_value'] = array(
    '#type' => 'textfield',
    '#title' => t('!flag Limit', array('!flag' => $flag->title)),
    '#description' => t('Maximum number of items that can be flagged per user at one time with <em>%flag</em>. 0 for unlimited', array('%flag' => $flag->title)),
    '#default_value' => variable_get('flag_limiter_' . $flag->name . '_value', 0),
  );

  $form['flag_limiter_' . $flag->name . '_peritem_value'] = array(
    '#type' => 'textfield',
    '#title' => t('!flag Limit Per Item', array('!flag' => $flag->title)),
    '#description' => t('Maximum number of times that each item can be flagged across all users with <em>%flag</em>. 0 for unlimited', array('%flag' => $flag->title)),
    '#default_value' => variable_get('flag_limiter_' . $flag->name . '_peritem_value', 0),
  );

  $form['flag_limiter_' . $flag->name . '_hide_links'] = array(
    '#type' => 'checkbox',
    '#title' => 'Hide flag links',
    '#description' => 'Hide flag links if is limit exhausted',
    '#default_value' => variable_get('flag_limiter_' . $flag->name . '_hide_links', 0),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_flag_flag().
 */
function flag_limiter_flag_flag($flag, $entity_id, $account, $flagging) {
  // Get the flag limits.
  $flag_limit = variable_get('flag_limiter_' . $flag->name . '_value', 0);
  $peritem_limit = variable_get('flag_limiter_' . $flag->name . '_peritem_value', 0);

  if ($flag_limit) {
    $user_flags = flag_limiter_get_user_flags($account->uid, $flag->fid);
    if (count($user_flags) > $flag_limit) {
      $unflag = flag('unflag', $flag->name, $entity_id, $account, TRUE);
      if ($unflag) {
        drupal_set_message(t("You've already signed up @num times", array('@num' => $flag_limit)), 'error');
      } else {
        drupal_set_message(t('Fail limiter operation'), 'status', FALSE);
      }
    }
  }

  if ($peritem_limit) {
    $flagging_data = flag_get_counts($flag->entity_type, $entity_id, TRUE);
    if ($flagging_data[$flagging->flag_name] > $peritem_limit) {
      $unflag_item = flag('unflag', $flag->name, $entity_id, $account, TRUE);
      if ($unflag_item) {
        drupal_set_message(t("The event already signed up @num times", array('@num' => $peritem_limit)), 'error');
      } else {
        drupal_set_message(t('Fail limiter operation'), 'status', FALSE);
      }
    }
  }
}

/**
 * Preprocess function for flag link displays.
 */
function flag_limiter_preprocess_flag(&$variables) {
  $flag = $variables['flag'];
  $hide = variable_get('flag_limiter_' . $flag->name . '_hide_links', 0);

  if ($hide) {
    // Get the flag limits.
    $flag_limit = variable_get('flag_limiter_' . $flag->name . '_value', 0);
    $peritem_limit = variable_get('flag_limiter_' . $flag->name . '_peritem_value', 0);

    // TODO: reuse unflag_denied_text
    if ($flag_limit) {
      $user_flags = flag_limiter_get_user_flags($variables['user']->uid, $flag->fid);
      if (count($user_flags) >= $flag_limit && $variables['status'] == 'unflagged') {
        $variables['link_href'] = '';
        $variables['link_text'] = $flag->unflag_denied_text;
      }
    }

    if ($peritem_limit) {
      $limit = flag_get_counts($flag->entity_type, $variables['entity_id'], TRUE);
      if ($limit) {
        $name = $flag->name;
        if ($limit[$name] >= $peritem_limit && $variables['link_text'] != $flag->unflag_short ) {
          $variables['link_href'] = '';
          $variables['link_text'] = $flag->unflag_denied_text;
        }
      }
    }
  }
}

/**
 * Get all user flags.
 */
function flag_limiter_get_user_flags($uid, $fid) {
  $query = db_select('flagging', 'f')
    ->fields('f', array('entity_id', 'uid', 'flagging_id'))
    ->condition('uid', $uid, '=')
    ->condition('fid', $fid, '=')
    ->execute();
  return $query->fetchAllAssoc('flagging_id');
}