<?php
// $Id$

  /* @file
   * A simple module that adds a user to groups based on attending a class.
   */

  /**
   * Implementation of hook_help()
   */
function civicrm_event_auto_pass_help($section, $args = array() ) 
{ 
    switch ($section) { 
    case 'admin/modules#description': 
        return t('Changes status of CiviCRM partipant X hours after an Event has ended.');
    default :
        return;
    } 
} 

/*
@TODO: 
function civicrm_event_auto_pass_user_login( &$edit, $account ) {
    if ( ! civicrm_initialize( ) ) {
        return;
    } 
     
    
    // do nothing for now
}
*/



/**
 * Implementation of hook_menu().
 */
function civicrm_event_auto_pass_menu( ) 
{
    $items = array();
    $items['admin/config/civicrm/civicrm_event_auto_pass'] = array(
      'title' => t('CiviEvent Auto Pass'),
      'description' => t(''),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('civicrm_event_auto_pass_admin_settings'),
      'access arguments' => array('edit event participants'),
      'type' => MENU_NORMAL_ITEM,
    );  
    
    return $items;
}

function civicrm_event_auto_pass_admin_settings(){
   //Begin add form
    $form = array();      
    
    //civicrm_participant_status_type
    
    $status_types = db_query('SELECT * FROM {civicrm_participant_status_type}')->fetchAll();
    
    $status_type_options = array();
    
    foreach ($status_types as $status_type) {
      
      $status_type_options[$status_type->id] = $status_type->name;
   
    }
    
    $form['civicrm_event_auto_pass_status_types'] = array(
      '#type' => 'select',
      '#multiple' => TRUE,
      '#title' => 'Participant Status to Alter',
      '#options' => $status_type_options,
      '#default_value' => variable_get('civicrm_event_auto_pass_status_types', 0),
      '#description' => t('Participants in these statuses will be added to the group specified by the Rule.  If Update Status for Registered Participants is also checked, participants with any of these statuses will also be changed to Attended (Passed).'),
    );
    
    $form['civicrm_event_auto_pass_registered_to_passed'] = array(
      '#type' => 'checkbox',
      '#title' => t('Update Status for Registered Participants'),
      '#default_value' => variable_get('civicrm_event_auto_pass_registered_to_passed', 0),
      '#description' => t('This will change the status of any attendee left in the Registered status to Attended (Passed) when the Rule is processed.  Participants with any other status (No-show, Cancelled, Attended (Failed), etc) will remain in that status.'),
    );
          
    $form['civicrm_event_auto_pass_hours_after_event'] = array(
      '#type' => 'textfield',
      '#title' => t('Hours Event\'s Start to Autogroup'),
      '#size' => 11,
      '#maxlength' => 11,
      '#default_value' => variable_get('civicrm_event_auto_pass_hours_after_event', '1'),
      '#description' => t('Allow time to deal with no shows and cancellations. Will only run if cron is enabled.'),
    );
    
    $form['civicrm_event_auto_pass_days_since_event'] = array(
      '#type' => 'textfield',
      '#title' => t('Limit events to process to this many days ago'),
      '#size' => 11,
      '#maxlength' => 11,
      '#default_value' => variable_get('civicrm_event_auto_pass_days_since_event', '1'),
      '#description' => t(''),
    );
    
    $form['civicrm_event_auto_pass_debug'] = array(
      '#type' => 'checkbox',
      '#title' => t('Run in Debug mode'),
      '#default_value' => variable_get('civicrm_event_auto_pass_debug', 0),
      '#description' => t('This option will display the message telling you what a Rule would do, but won\'t actually change anything.'),
    );
    
                      
    return system_settings_form($form);
}

function civicrm_event_auto_pass_cron() {

  // get events that have ended > X hours ago and < X days ago
  $daysafter = variable_get('civicrm_event_auto_pass_days_since_event', '1');
  $process_date  = mktime(0, 0, 0, date("m")  , date("d")-$daysafter, date("Y"));
  $date_greater = date("Y-m-d", $process_date);
  
  $hoursbefore = variable_get('civicrm_event_auto_pass_hours_after_event', '1');
  $process_date  = mktime(0, 0, 0, date("m")  , date("d")-$days, date("Y"));
  $date_less_than = date("Y-m-d", $process_date);
  
  $events = db_query('SELECT * FROM {civicrm_event} WHERE civicrm_event.id = :event_id', array(':event_id' => $event_id))->fetchAll();

  
  foreach($events as $event) {
    dsm($event);
    //civicrm_event_auto_pass_process_event($event_id)
  }
}

function civicrm_event_auto_pass_process_event($event_id) {
    $debug_msg = '';
    $debug_msg .= 'found event: ' . $event->id . '">' . $event->title . ' that started ' . $event->start_date  . '. ';

    //get the users who attended that event
    $participants = db_query('SELECT * FROM {civicrm_participant} WHERE event_id = :event_id', array(':event_id' => $event->id))->fetchAll();
    //dsm($participants);
    
    foreach ($participants as $participant) {
      //update if any of the types match the contacts participation status
      if (in_array($participant->status_id, variable_get('civicrm_event_auto_pass_status_types', 0))) {
        $participation_updated = db_update('civicrm_participant')
         ->fields(array(
        'status_id' => 6,
        ))
        ->condition('contact_id', $participant->contact_id, '=')
        ->condition('event_id', $event_id, '=')
        ->execute();
              
        $debug_msg .= 'Changed the participation status of contact #' . $participant->contact_id . '. ';
    } else {
        $debug_msg .= 'did NOT update contact #' . $participant->contact_id . ' because status = ' . $group_status . '<br />';
    }
  }
  
   if (variable_get('civicrm_event_auto_pass_debug', 0)) {
    watchdog( 'civicrm_event_auto_pass',  $msg);
  }
}


