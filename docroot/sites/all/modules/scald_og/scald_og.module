<?php
/**
 * @file
 * Scald OG provides OG integration for the scald module.
 */

/**
 * Implements hook_og_permission().
 *
 * Adds group permissions.
 */
function scald_og_og_permission() {
  $permissions = array();
  foreach (scald_actions() as $key => $action) {
    $permissions[$key . ' own atom'] = array(
      'title' => t('%action own atom', array('%action' => $action['title'])),
      'default role' => array(OG_AUTHENTICATED_ROLE),
    );

    $permissions[$key . ' any atom'] = array(
      'title' => t('%action any atom marked as %actionable', array('%action' => $action['title'], '%actionable' => $action['adjective'])),
      'default role' => array(OG_AUTHENTICATED_ROLE),
    );
  }
  return $permissions;
}

/**
 * Computes actions bitstring for a single og role.
 *
 * @return int
 *   Computed action bistring.
 */
function _scald_og_compute_role_actions($role) {
  // Extract the role id.
  $rid = key($role);

  $cache = cache_get('scald_actions_bitstring_for_og_rid_' . $rid, 'cache_scald');
  if (empty($cache)) {
    // Get permissions for the specified role.
    $permissions = og_role_permissions($role);

    // Get all Scald actions.
    $scald_actions = scald_actions();

    // Prepare empty bit strings.
    $role_actions = array(
      'own' => 0,
      'any' => 0,
    );

    // Get enabled permissions for this role.
    $role_permissions = $permissions[$rid];

    // For each action, check the role permissions, and add the action bitmask
    // to our counter if the permission is granted.
    foreach ($scald_actions as $key => $action) {
      if (!empty($role_permissions[$key . ' own atom'])) {
        $role_actions['own'] |= $action['bitmask'];
      }
      if (!empty($role_permissions[$key . ' any atom'])) {
        $role_actions['any'] |= $action['bitmask'];
      }
    }

    cache_set('scald_actions_bitstring_for_og_rid_' . $rid, $role_actions, 'cache_scald', CACHE_TEMPORARY);
  }
  else {
    $role_actions = $cache->data;
  }
  return $role_actions;
}

/**
 * Fetch action bitstring components for a user for a group.
 */
function scald_og_user_combine_actions($account, $gid) {
  $scald_actions = array(
    'own' => 0,
    'any' => 0,
  );

  $og_roles = og_get_user_roles('node', $gid, $account->uid);
  // Fetch action bitstring components by User OG Role and combine.
  foreach ($og_roles as $rid => $role_name) {
    $role_actions = _scald_og_compute_role_actions(array($rid => $role_name));

    $scald_actions['own'] |= $role_actions['own'];
    $scald_actions['any'] |= $role_actions['any'];
  }

  // Allow operations that are allowed on any atoms to
  // the user own atoms too.
  $scald_actions['own'] |= $scald_actions['any'];

  return $scald_actions;
}

/**
 * Implements hook_scald_atom_access().
 *
 * This function limits access for actions in scald based on OG roles.
 */
function scald_og_scald_atom_access($atom, $action, $account = NULL) {
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }

  // The user account might not be fully loaded.
  $account_full = user_load($account->uid);

  $og_user_node = field_get_items('user', $account_full, 'og_user_node');
  $og_group_ref = key(og_get_group_audience_fields('scald_atom', $atom->type));

  if ($action == 'create') {
    // The "create" action is currently not supported.
    return;
  }

  if (isset($atom->$og_group_ref)) {
    $atom_og_group_ref = field_get_items('scald_atom', $atom, $og_group_ref);
  }
  else {
    // In case the OG audience field cannot be found, the atom is probably
    // not fully loaded.
    $atoms = entity_load('scald_atom', array($atom->sid), array(), FALSE);
    if (!$atoms) {
      return NULL;
    }
    $atom_full = reset($atoms);
    $atom_og_group_ref = field_get_items('scald_atom', $atom_full, $og_group_ref);
  }

  $og_combined_scald_actions = array(
    'own' => 0,
    'any' => 0,
  );
  if (!empty($og_user_node) && !empty($atom_og_group_ref)) {
    foreach ($atom_og_group_ref as $og_atom_target) {
      foreach ($og_user_node as $og_user_target) {
        // Checking for groups common for the user and the atom in question.
        if ($og_user_target['target_id'] == $og_atom_target['target_id']) {
          $og_scald_actions = scald_og_user_combine_actions($account, $og_atom_target['target_id']);
          $og_combined_scald_actions['own'] |= $og_scald_actions['own'];
          $og_combined_scald_actions['any'] |= $og_scald_actions['any'];
        }
      }
    }
  }

  $actions_key = ($atom->publisher == $account->uid) ? 'own' : 'any';
  $actions = scald_actions();
  // Only extend the base permissions,
  // to let other modules fine tune the access.
  return (($og_combined_scald_actions[$actions_key] & $actions[$action]['bitmask']) ? TRUE : NULL);
}
