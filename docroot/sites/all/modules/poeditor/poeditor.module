<?php

/**
 * @file
 * Translate user interface to languages other than English.
 */

/**
 * Implements hook_permission().
 */
function poeditor_permission() {
  return array(
    'translate interface' => array(
      'title' => t('Use Poeditor for translating content'),
      'description' => t('Translate interface with POEditor.'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function poeditor_cron() {
  // Send and get operations will be executed once per cron run.
  // If cron schedule is smaller than 24 hours, send and get
  // operations will be executed once every 24 hours.
  $drupal_token = drupal_get_token();
  $execute_send_all_terms = FALSE;
  $execute_get_all_translations = FALSE;
  $cron_poeditor_date = variable_get('poeditor_next_cron_date', NULL);
  $send_all_terms = variable_get('poeditor_send_all_terms_cron', NULL);
  $get_all_translations = variable_get('poeditor_get_all_translations_cron', NULL);
  $date_now = date('Y-m-d', time());
  if (empty($cron_poeditor_date)) {
    variable_set('poeditor_next_cron_date', date('Y-m-d', strtotime('+1 day')));
    if ($send_all_terms != NULL) {
      $execute_send_all_terms = TRUE;
    };
    if ($get_all_translations != NULL) {
      $execute_get_all_translations = TRUE;
    };
  }
  else {
    if ($cron_poeditor_date <= $date_now) {
      variable_set('poeditor_next_cron_date', date('Y-m-d', strtotime('+1 day')));
      if ($send_all_terms != NULL) {
        $execute_send_all_terms = TRUE;
      };
      if ($get_all_translations != NULL) {
        $execute_get_all_translations = TRUE;
      };
    }
  }
  if ($execute_send_all_terms == TRUE) {
    $project_id = poeditor_project_id();
    $poeditor_api_token = poeditor_token();
    $locales = poeditor_select_terms_original('en');
    poeditor_api_add_terms($poeditor_api_token, $project_id, $locales, $drupal_token);
  };
  if ($execute_get_all_translations == TRUE) {
    $project_id = poeditor_project_id();
    $poeditor_api_token = poeditor_token();
    foreach (poeditor_api_list_project_languages($poeditor_api_token, $project_id) as $lang) {
      $language = $lang['language_code'];
      if ($language != 'en') {
        $locales = poeditor_select_terms_original($language);
        $terms = poeditor_api_view_terms($poeditor_api_token, $project_id, $language);
        if (!empty($terms)) {
          foreach ($terms as $term) {
            poeditor_save($term['term'], $term['definition']['form'], $language, $drupal_token);
          };
        }
      }
    }
  }
}

/**
 * Returns the token value associated with POEditor.
 *
 * @return string
 *   Token value associated with POEditor.
 */
function poeditor_token() {
  return variable_get('poeditor_token');
}

/**
 * Returns the project_id value from POEditor.
 *
 * @return string
 *   POEditor project ID.
 */
function poeditor_project_id() {
  return variable_get('poeditor_project');
}

/**
 * Send requests to POEditor.
 *
 * @param string $config
 *   Arguments.
 *     -$url: The url of the POEditor API.
 *     -$params: Query data.
 *     -$options: Query options.
 *
 * @return object
 *   Status of the request.
 */
function poeditor_send_data($config) {
  $url = 'http://poeditor.com/api/';
  $params = http_build_query($config, '', '&');
  $options = array(
    'method' => 'POST',
    'data' => $params,
    'timeout' => 300,
    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
  );
  $result = drupal_http_request($url, $options);
  return $result;
}

/**
 * Returns the list of projects owned by an user.
 *
 * @param int $poeditor_api_token
 *   POEditor API token.
 *
 * @return array
 *   List of projects.
 */
function poeditor_api_list_projects($poeditor_api_token) {
  $config = array(
    'api_token' => $poeditor_api_token,
    'action' => 'list_projects',
  );
  $result = poeditor_send_data($config);
  $response = drupal_json_decode($result->data);
  if ($response['response']['status'] == 'success') {
    return $response['list'];
  }
  else {
    drupal_set_message(t('Error connecting to POEditor. Reason is %message', array('%message' => $response['response']['message'])), 'error');
  };
}

/**
 * Adds a new language to the project with POEditor API add_language.
 *
 * @param int $poeditor_api_token
 *   POEditor API token.
 *
 * @param int $project_id
 *   POEditor project ID.
 *
 * @param string $lang
 *   Language ID.
 *
 * @return object
 *   Status of the request.
 */
function poeditor_api_add_language_to_project($poeditor_api_token, $project_id, $lang) {
  $config = array(
    'api_token' => $poeditor_api_token,
    'action' => 'add_language',
    'language' => $lang,
    'id' => $project_id,
  );
  $result = poeditor_send_data($config);
  if (isset($result->data)) {
    $response = drupal_json_decode($result->data);
    drupal_set_message(t('@message', array('@message' => $response['response']['message'])));
  }
  else{
    drupal_set_message(t('@message', array('@message' => $result->error)), 'error');
  }
  return $result;
}

/**
 * Delete a specific POEditor project language.
 *
 * @param int $poeditor_api_token
 *   POEditor API token.
 *
 * @param int $project_id
 *   POEditor project ID.
 *
 * @param string $lang
 *   Language ID.
 *
 * @return object
 *   Status of the request.
 */
function poeditor_api_delete_language_to_project($poeditor_api_token, $project_id, $lang) {
  $config = array(
    'api_token' => $poeditor_api_token,
    'action' => 'delete_language',
    'language' => $lang,
    'id' => $project_id,
  );
  $result = poeditor_send_data($config);
  $response = drupal_json_decode($result->data);
  if (isset($result->data)) {
    drupal_set_message(t('@message', array('@message' => $response['response']['message'])));
  }
  else{
    drupal_set_message(t('The POEditor website error  was: %message', array('%message' => $result->error)), 'error');
  }
}

/**
 * Sends existent term translations to POEditor.
 *
 * @param int $poeditor_api_token
 *   POEditor API key.
 *
 * @param int $project_id
 *   POEditor project ID.
 *
 * @param string $values
 *   Translatable strings from your Drupal website.
 *
 * @param string $lang
 *   Language ID.
 */
function poeditor_api_update_language_to_project($poeditor_api_token, $project_id, $values, $lang) {
  $config = array(
    'api_token' => $poeditor_api_token,
    'action' => 'update_language',
    'language' => $lang,
    'id' => $project_id,
    'data' => drupal_json_encode($values),
  );
  $result = poeditor_send_data($config);
  if (isset($result->data)) {
    $response = drupal_json_decode($result->data);
    if ($response['response']['status'] == 'success') {
      drupal_set_message(t('The translations have been successfully sent to POEditor.'));
    }
    else{
      drupal_set_message(t('An error occured when we tried to send translations.'), 'error');
      drupal_set_message(t('The POEditor error was: %message', array('%message' => $response['response']['message'])), 'error');
    }
  }
  else{
    drupal_set_message(t('The request was not completed. The following error occurred: %message', array('%message' => $result->error)), 'error');
    if ($result->error=='request timed out') {
      drupal_set_message(t('Increase the timeout limit in your web server or php configuration.'), 'warning');
    }
  }
}

/**
 * Returns project terms and definitions if the language argument is provided.
 *
 * @param int $poeditor_api_token
 *   POEditor API key.
 *
 * @param int $project_id
 *   POEditor project ID.
 *
 * @param string $lang
 *   Language ID.
 *
 * @return array
 *   Terms and definitions from POEditor.
 */
function poeditor_api_view_terms($poeditor_api_token, $project_id, $lang = NULL) {
  $config = array(
    'api_token' => $poeditor_api_token,
    'action' => 'view_terms',
    'id' => $project_id,
    'language' => $lang,
  );
  $result = poeditor_send_data($config);
  $response = drupal_json_decode($result->data);
  return $response['list'];
}

/**
 * Counts project definitions if the language argument is provided.
 *
 * @param int $poeditor_api_token
 *   POEditor API key.
 *
 * @param int $project_id
 *   POEditor project ID.
 *
 * @param string $lang
 *   Language ID.
 *
 * @return int
 *   Number of definitions.
 */
function poeditor_api_count_definition($poeditor_api_token, $project_id, $lang = 'en') {
  $config = array(
    'api_token' => $poeditor_api_token,
    'action' => 'view_terms',
    'id' => $project_id,
    'language' => $lang,
  );
  $result = poeditor_send_data($config);
  $response = drupal_json_decode($result->data);
  $count = 0;
  if (isset($result->data)) {
    if ($response['response']['status'] == 'success') {
      foreach ($response['list'] as $item) {
        if (!empty($item['definition']['form'])) {
          ++$count;
        }
      }
    }
    else{
      drupal_set_message(t('An error occured when we tried to count the definitions.'), 'error');
      drupal_set_message(t('The POEditor website error  was: %message', array('%message' => $response['response']['message'])), 'error');
    }
  }
  else{
    drupal_set_message(t('The request was not completed. The following error occurred: %message', array('%message' => $result->error)), 'error');
    if ($result->error=='request timed out') {
      drupal_set_message(t('Increase the timeout parameter number in your web server or php configuration.'), 'warning');
    }
  }
  return $count;
}

/**
 * Counts project terms if the language argument is provided.
 *
 * @param int $poeditor_api_token
 *   POEditor API key.
 *
 * @param int $project_id
 *   POEditor project ID.
 *
 * @return int
 *   Number of terms.
 */
function poeditor_api_count_terms($poeditor_api_token, $project_id) {
  $config = array(
    'api_token' => $poeditor_api_token,
    'action' => 'view_terms',
    'id' => $project_id,
  );
  $result = poeditor_send_data($config);
  $response = drupal_json_decode($result->data);
  $count = 0;
  if (isset($result->data)) {
    if ($response['response']['status'] == 'success') {
      foreach ($response['list'] as $item) {
        if (!empty($item['term'])) {
          ++$count;
        }
      }
    }
    else{
      drupal_set_message(t('An error occured when we tried to count the terms.'));
      drupal_set_message(t('The POEditor website error  was: %message', array('%message' => $response['response']['message'])), 'error');
    }
  }
  else{
    drupal_set_message(t('The request was not completed. The following error occurred: %message', array('%message' => $result->error)), 'error');
    if ($result->error=='request timed out') {
      drupal_set_message(t('Increase the timeout limit to your web server or php.'), 'warning');
    }
  }
  return $count;
}

/**
 * Add terms to project.
 *
 * @param int $poeditor_api_token
 *   POEditor API key.
 *
 * @param int $project_id
 *   POEditor project ID.
 *
 * @param string $values
 *   Translatable strings from drupal
 *
 * @return object
 *   Status of the request.
 */
function poeditor_api_add_terms($poeditor_api_token, $project_id, $values) {
  $config = array(
    'api_token' => $poeditor_api_token,
    'action' => 'add_terms',
    'id' => $project_id,
    'data' => drupal_json_encode($values),
  );
  $result = poeditor_send_data($config);
  if (isset($result->data)) {
    $response = drupal_json_decode($result->data);
    if ($response['response']['status'] == 'success') {
      drupal_set_message(t('The terms have been successfully sent to POEditor.'));
    }
    else{
      drupal_set_message(t('An error occured when we tried to send the terms.'), 'error');
      drupal_set_message(t('The POEditor website error  was: %message', array('%message' => $response['response']['message'])), 'error');
    }
  }
  else{
    drupal_set_message(t('The request was not completed. The following error occurred: %message', array('%message' => $result->error)), 'error');
    if ($result->error=='request timed out') {
      drupal_set_message(t('Increase the timeout parameter number in your web server or php configuration.'), 'warning');
    }
  }
}

/**
 * Delete project terms.
 *
 * @param int $poeditor_api_token
 *   POEditor API key.
 *
 * @param int $project_id
 *   POEditor project ID.
 *
 * @param string $values
 *   Translatable strings from drupal.
 *
 * @return object
 *   Status of the request.
 */
function poeditor_api_delete_terms($poeditor_api_token, $project_id, $values) {
  $config = array(
    'api_token' => $poeditor_api_token,
    'action' => 'delete_terms',
    'id' => $project_id,
    'data' => drupal_json_encode($values),
  );
  $result = poeditor_send_data($config);
  return $result;
}

/**
 * This will sync your project with the array you send.
 *
 * @param int $poeditor_api_token
 *   POEditor API key.
 *
 * @param int $project_id
 *   POEditor project ID.
 *
 * @param string $values
 *   Translatable strings from your Drupal website.
 *
 * @param string $lang
 *   Language ID.
 *
 * @return object
 *   Status of the request.
 */
function poeditor_api_sync_terms($poeditor_api_token, $project_id, $values, $lang) {
  $config = array(
    'api_token' => $poeditor_api_token,
    'action' => 'sync_terms',
    'id' => $project_id,
    'language' => $lang,
    'data' => drupal_json_encode($values),
  );
  $result = poeditor_send_data($config);
  return $result;
}

/**
 * Selects the terms with translation done for updating the language.
 *
 * @param string $query_language
 *   Language ID.
 *
 * @return array
 *   An array containing terms and definitions from your Drupal website.
 */
function poeditor_select_terms($query_language = 'en') {
  if (($query_language != 'en') && ($query_language != '')) {
    $query = "SELECT s.source AS source, s.location AS location, s.context AS context, s.lid AS lid, s.textgroup AS textgroup, t.translation AS translation, t.language AS language FROM {locales_source s} LEFT OUTER JOIN {locales_target t} ON t.lid = s.lid AND t.language = :language WHERE (t.translation LIKE '%') and source is not null ORDER BY t.translation ASC";
    $locales = db_query($query, array(':language' => $query_language));
  }
  else {
    $query = "SELECT s.source AS source, s.location AS location, s.context AS context, s.lid AS lid, s.textgroup AS textgroup, s.source AS translation,  'en' AS language FROM {locales_source s} where source is not null ORDER BY s.source ASC";
    $locales = db_query($query);
  }
  $locales_drupal = array();
  foreach ($locales as $x) {
    $locales_drupal[] = array(
      'term' => array('term' => $x->source, 'context' => $x->context),
      'definition' => array('forms' => array($x->translation), 'fuzzy' => 0),
    );
  }
  return $locales_drupal;
}

/**
 * Selects the terms with translation done.
 *
 * @param string $query_language
 *   Language ID.
 *
 * @return array
 *   An array containing drupal terms.
 */
function poeditor_select_terms_original($query_language = 'en') {
  if (($query_language != 'en') && ($query_language != '')) {
    $query = "SELECT s.source AS source, s.location AS location, s.context AS context, s.lid AS lid, s.textgroup AS textgroup, t.translation AS translation, t.language AS language FROM {locales_source s} LEFT OUTER JOIN {locales_target t} ON t.lid = s.lid AND t.language = :language WHERE  (t.translation LIKE '%') and source is not null ORDER BY t.translation DESC";
    $locales = db_query($query, array(':language' => $query_language));
  }
  else {
    $query = "SELECT s.source AS source, s.location AS location, s.context AS context, s.lid AS lid, s.textgroup AS textgroup,  '' AS translation, 'en' AS language FROM {locales_source} s where source is not null";
    $locales = db_query($query);
  }
  $locales_drupal = array();
  foreach ($locales as $x) {
    $locales_drupal[] = array(
      'term' => $x->source,
      'context' => $x->context,
      'reference' => $x->location,
      'plural' => '',
    );
  }
  return $locales_drupal;
}

/**
 * Returns the number of terms in your Drupal website database for a specific language.
 *
 * @param string $query_language
 *   Language ID.
 *
 * @return int
 *   The number of terms found.
 */
function poeditor_count_terms($query_language = 'en') {
  if (($query_language != 'en') && ($query_language != '')) {
    $query = "SELECT count('x') AS 'count' FROM {locales_source s} LEFT OUTER JOIN {locales_target t} ON t.lid = s.lid AND t.language = :language WHERE  (t.translation LIKE '%') ORDER BY t.translation DESC";
    $result = db_query($query, array(':language' => $query_language));
  }
  else {
    $query = "SELECT count('x') as 'count' FROM {locales_source} s where source is not null";
    $result = db_query($query);
  }
  $count = $result->fetchObject();
  if ($count->count == 0) {
    return 0;
  }
  else {
    return $count->count;
  }
}

/**
 * Save terms to your Drupal website.
 *
 * @param string $translatable_string
 *   Terms from drupal.
 *
 * @param string $_translation
 *   Translation from POEditor.
 *
 * @param string $language
 *   Language ID.
 *
 * @param string $drupal_token
 *   Token based on the user session and private key.
 */
function poeditor_save($translatable_string, $_translation, $language, $drupal_token) {
  $valid_token = drupal_valid_token($drupal_token);
  if ($valid_token == TRUE) {
    // The column 'source' is of the type BLOB and a conversion into string is
    // required using utf8.
    $result = db_query("SELECT lid FROM {locales_source} WHERE CONVERT(source USING utf8) = :string", array('string' => $translatable_string));
    $_lid = $result->fetchObject();
    // Only update if the term is already defined inside your Drupal installation.
    if (!empty($_lid->lid)) {
      $lid = $_lid->lid;
      $transl = db_query("SELECT translation FROM {locales_target} WHERE lid = :lid AND language = :language", array(':lid' => $lid, ':language' => $language))->fetchField();
      if (!empty($_translation)) {
        // Only update or insert if we have a value to use.
        if (!empty($transl)) {
          db_update('locales_target')
            ->fields(array('translation' => $_translation))
            ->condition('lid', $lid)
            ->condition('language', $language)
            ->execute();
          return TRUE;
        }
        else {
          db_insert('locales_target')
          ->fields(array(
            'lid' => $lid,
            'translation' => $_translation,
            'language' => $language,
          ))
          ->execute();
          return TRUE;
        }
        drupal_set_message(t('Translation definitions have been modified.'));
      }
      else {
        return FALSE;
      }
    }
    else {
      return FALSE;
    }
  }
}

/**
 * Implements hook_menu().
 */
function poeditor_menu() {
  $items['admin/config/regional/poeditor/overview'] = array(
    'title' => 'POEditor: Management & Configuration',
    'description' => 'Manage terms and translations with poeditor.com',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('poeditor_translate_form'),
    'access arguments' => array('translate interface'),
    'file' => 'poeditor.admin.inc',
    'weight' => 0,
  );
  $items['admin/config/regional/poeditor/overview/translate'] = array(
    'title' => 'Translate interface with Poeditor',
    'description' => 'Sync your terms and definitions with POEditor',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('poeditor_translate_form'),
    'access arguments' => array('translate interface'),
    'weight' => 2,
    'file' => 'poeditor.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/config/regional/poeditor/overview/configure'] = array(
    'title' => 'Configure settings',
    'description' => 'Change API key, project ID and other settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('poeditor_configure_form'),
    'access arguments' => array('translate interface'),
    'file' => 'poeditor.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  $items['admin/poeditor/process/%/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('poeditor_process_form'),
    'access arguments' => array('translate interface'),
    'weight' => 4,
    'file' => 'poeditor.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/poeditor/overview/translate/delete-confirm/%/%'] = array(
    'title' => 'Confirm Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('poeditor_delete_lang_form'),
    'access arguments' => array('translate interface'),
    'weight' => 5,
    'file' => 'poeditor.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/poeditor/overview/translate/delete-all-terms/%/%'] = array(
    'title' => 'Confirm Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('poeditor_delete_all_terms'),
    'access arguments' => array('translate interface'),
    'weight' => 6,
    'file' => 'poeditor.admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function poeditor_theme() {
  return array(
    'poeditor_translate_form' => array('render element' => 'form'),
    'poeditor_configure_form' => array('render element' => 'form'),
  );
}

/**
 * Returns the link of the file (expires after 10 minutes).
 *
 * @param int $poeditor_api_token
 *   POEditor API key.
 *
 * @param int $project_id
 *   POEditor project ID.
 *
 * @param string $lang
 *   Language ID.
 *
 * @return string
 *   Link of the file.
 */
function poeditor_api_language_export($poeditor_api_token, $project_id, $lang) {
  $config = array(
    'api_token' => $poeditor_api_token,
    'action' => 'export',
    'id' => $project_id,
    'language' => $lang,
    'type' => 'xls',
  );
  $result = poeditor_send_data($config);
  $result_decode = drupal_json_decode($result->data);
  $link = $result_decode['item'];
  return $link;
}

/**
 * Returns project languages and percentage of translation done for each.
 *
 * @param int $poeditor_api_token
 *   POEditor API key.
 *
 * @param int $project_id
 *   POEditor project ID.
 *
 * @return array
 *   An array containing language translations percentage .
 */
function poeditor_api_list_project_languages($poeditor_api_token, $project_id) {
  $config = array(
    'api_token' => $poeditor_api_token,
    'action' => 'list_languages',
    'id' => $project_id,
  );
  $result = poeditor_send_data($config);
  $response = drupal_json_decode($result->data);
  $items = array();
  foreach ($response['list'] as $item) {
    $items[] = array('language_code' => $item['code'], 'percent' => $item['percentage']);
  }
  return $items;
}

/**
 * Displays the button for adding a new language to POEditor.
 *
 * @param int $poeditor_api_token
 *   POEditor API key.
 *
 * @param int $project_id
 *   POEditor project ID.
 *
 * @param string $languages
 *   Language ID.
 *
 * @param string $drupal_token
 *   Token based on the user session and private key.
 *
 * @return string
 *   String Text to display.
 */
function poeditor_compare_lang_add($poeditor_api_token, $project_id, $languages, $drupal_token) {
  $x = 0;
  foreach (poeditor_api_list_project_languages($poeditor_api_token, $project_id) as $lang) {
    if ($lang['language_code'] == $languages) {
      ++$x;
    }
  }
  if ($x == 0) {
    $i = l(t('Add to POEditor'), 'admin/poeditor/process/add-language/' . $languages . '/' . $drupal_token);
  }
  else {
    $i = "";
  };
  return $i;
}

/**
 * Checks if the language has terms in order to display the delete button.
 *
 * @param string $languages
 *   Language ID.
 *
 * @param string $drupal_token
 *   Token based on the user session and private key.
 *
 * @return string
 *   String Text to display.
 */
function poeditor_compare_lang_delete($poeditor_api_token, $project_id, $languages, $drupal_token) {
  $x = 0;
  foreach (poeditor_api_list_project_languages($poeditor_api_token, $project_id) as $lang) {
    if ($lang['language_code'] == $languages) {
      ++$x;
    }
  }
  if ($x == 0) {
    $i = "";
  }
  else {
    $i = l(t('Delete from POEditor'), 'admin/poeditor/process/delete-language/' . $languages . '/' . $drupal_token);
  };
  return $i;
}

/**
 * Displays the button for exporting term translations.
 *
 * @param string $languages
 *   Language ID.
 *
 * @return string
 *   String Text to display.
 */
function poeditor_compare_lang_export($poeditor_api_token, $project_id, $languages) {
  $x = 0;
  foreach (poeditor_api_list_project_languages($poeditor_api_token, $project_id) as $lang) {
    if ($lang['language_code'] == $languages) {
      ++$x;
    }
  }
  if ($x == 0) {
    $i = "";
  }
  else {
    $i = l(t('Export'), poeditor_api_language_export($poeditor_api_token, $project_id, $languages));
  };
  return $i;
}

/**
 * Displays the button for sending term translations.
 *
 * @param string $languages
 *   Language ID.
 *
 * @param string $drupal_token
 *   Token based on the user session and private key.
 *
 * @return string
 *   String Text to display.
 */
function poeditor_compare_lang_update($poeditor_api_token, $project_id, $languages, $drupal_token) {
  $x = 0;
  foreach (poeditor_api_list_project_languages($poeditor_api_token, $project_id) as $lang) {
    if ($lang['language_code'] == $languages) {
      ++$x;
    }
  }
  if ($x == 0) {
    $i = "";
  }
  else {
    $i = l(t('Send translations'), 'admin/poeditor/process/send-translations/' . $languages . '/' . $drupal_token);
  };
  return $i;
}

/**
 * Displays the button receiving translations from POEditor.
 *
 * @param string $languages
 *   Language ID.
 *
 * @param string $drupal_token
 *   Token based on the user session and private key.
 *
 * @return string
 *   String Text to display.
 */
function poeditor_compare_lang_get_definitions($poeditor_api_token, $project_id, $languages, $drupal_token) {
  $x = 0;
  foreach (poeditor_api_list_project_languages($poeditor_api_token, $project_id) as $lang) {
    if ($lang['language_code'] == $languages) {
      ++$x;
    }
  }
  if ($x == 0) {
    $i = "";
  }
  else {
    $i = l(t('Get translations'), 'admin/poeditor/process/get-translations/' . $languages . '/' . $drupal_token);
  };
  return $i;
}

/**
 * Displays the language percentage for a POEditor project.
 *
 * @param int $poeditor_api_token
 *   POEditor API key.
 *
 * @param int $project_id
 *   POEditor project ID.
 *
 * @param string $lang
 *   Language ID.
 *
 * @return float
 *   percentage as a number between 0 and 1
 */
function poeditor_lang_percentage($poeditor_api_token, $project_id, $lang) {
  foreach (poeditor_api_list_project_languages($poeditor_api_token, $project_id) as $percentage) {
    if ($percentage['language_code'] == $lang) {
      if (empty($percentage['percent'])) {
        $lang_percentage = '0';
      }
      else {
        $lang_percentage = $percentage['percent'];
      }
    }
  }
  return $lang_percentage;
}

/**
 * Checks status.
 *
 * @param int $poeditor_api_token
 *   POEditor API key.
 *
 * @param int $project_id
 *   POEditor project ID.
 *
 * @return string
 *   String Text to display.
 */
function poeditor_api_status($poeditor_api_token, $project_id) {
  $config = array(
    'api_token' => $poeditor_api_token,
    'action' => 'view_terms',
    'id' => $project_id,
  );
  $result = poeditor_send_data($config);
  $response = drupal_json_decode($result->data);
  $status = $response['response']['status'];
  return $status;
}

/**
 * Displays the link for removal of all terms defined from the POEditor website.
 */
function poeditor_confirm_delete_all_terms($drupal_token) {
    $i = l(t('Delete all terms from POEditor'), 'admin/poeditor/process/delete-all-terms/terms/' . $drupal_token);
  return $i;
}
