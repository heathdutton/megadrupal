<?php
/**
 * @file
 * Install file for COmmerce CIB module.
 */

/**
 * Implements hook_requirements().
 */
function commerce_cib_requirements($phase) {
  $requirements = array();
  $t = get_t();

  // Check if Commerce payment fields module is present.
  if ($phase == 'update') {
    $ret = module_enable(array('commerce_payment_fields', 'date', 'text'));
    $severity = empty($ret) ? REQUIREMENT_ERROR : REQUIREMENT_OK;
    $requirements['commerce_cib_commerce_payment_fields'] = array(
      'title' => $t('Commerce Payment fields module dependency for Commerce CIB'),
      'value' => '',
      'severity' => $severity,
    );
  }

  // Check mcrypt
  $severity = REQUIREMENT_ERROR;
  if (extension_loaded('mcrypt')) {
    $severity = REQUIREMENT_OK;
  }

  $requirements['commerce_cib_mcrypt'] = array(
    'title' => $t('mcrypt for Commerce CIB'),
    'value' => '',
    'severity' => $severity,
  );
  return $requirements;
}

/**
 * Move contents of {commerce_cib_transactions} to
 * {commerce_payment_transaction}.
 */
function commerce_cib_update_7100(&$sandbox) {
  if (!isset($sandbox ['progress'])) {
    $sandbox ['progress'] = 0;
    module_enable(array('commerce_payment_fields', 'date', 'text'));
    _commerce_cib_configure_payment_entity();
    drupal_flush_all_caches();

    $sandbox['max'] = db_select('commerce_cib_transactions', 'cb')
      ->fields('cb', array())
      ->countQuery()
      ->execute()
      ->fetchField();
  }

  $transactions_to_process = 10;
  $transactions = db_select('commerce_cib_transactions', 'cb')
    ->fields('cb', array())
    ->range($sandbox['progress'], $transactions_to_process)
    ->execute()
    ->fetchAll();
  foreach ($transactions as $tr ) {
    $order = commerce_order_load($tr->order_id);
    $transaction = commerce_payment_transaction_new('cib', $tr->order_id);
    $transaction->commerce_cib_eki_user[LANGUAGE_NONE][0]['value'] = $tr->eki_user;
    $transaction->remote_id = $tr->trid;
    $transaction->amount = $tr->amount;
    $transaction->currency_code = $tr->currency;
    $transaction->commerce_cib_start[LANGUAGE_NONE][0]['value'] = $tr->start;
    $transaction->commerce_cib_end[LANGUAGE_NONE][0]['value'] = $tr->end;
    $transaction->remote_status = $tr->rc;
    $transaction->message = $tr->rt;
    $transaction->commerce_cib_msgt[LANGUAGE_NONE][0]['value'] = $tr->msgt;
    $transaction->commerce_cib_anum[LANGUAGE_NONE][0]['value'] = $tr->anum;
    $transaction->commerce_cib_history[LANGUAGE_NONE][0]['value'] = $tr->history;
    $transaction->uid = $order->uid;
    $transaction->instance_id = 'cib|commerce_payment_cib';
    if ($tr->rc == '00') {
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    }
    elseif ($tr->end - $tr->changed > COMMERCE_CIB_TIMEOUT) {
      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
    }
    else {
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    }
    commerce_payment_transaction_save($transaction);
    $sandbox['progress']++;
  }
  $sandbox['#finished'] = empty($sandbox ['max']) ? 1 : ($sandbox ['progress'] / $sandbox ['max']);
  if (empty($sandbox ['max']) || ($sandbox ['progress'] >= $sandbox ['max'])) {
    db_drop_table('commerce_cib_transactions');
  }
}
