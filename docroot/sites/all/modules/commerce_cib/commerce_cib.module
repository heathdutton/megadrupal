<?php

/**
 * @file
 * Commerce Payment method for CIB bank.
 */

// Default value for transaction timeouts in seconds.
define('COMMERCE_CIB_TIMEOUT', 700);

/**
 * Implements hook_menu().
 */
function commerce_cib_menu() {
  $items = array();
  $items['commerce_cib_finish/%commerce_order'] = array(
    'page callback' => 'commerce_cib_finish_step',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access checkout'),
  );
  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_cib_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['cib'] = array(
    'base' => 'commerce_cib',
    'title' => t('CIB bank'),
    'short_title' => t('CIB'),
    'display_title' => t('CIB bank'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
    'description' => t('Integrates with CIB bank payment service.'),
    'fieldable' => TRUE,
  );
  return $payment_methods;
}

/**
 * Returns the default settings for the CIB payment method.
 */
function commerce_cib_default_settings() {
  return array(
    'pid' => '',
    'cur' => 'HUF',
    'env' => 'testing',
    'des-test' => '',
    'des-live' => '',
  );
}

/**
 * Payment settings form.
 */
function commerce_cib_settings_form($settings = array()) {
  $settings = (array) $settings + commerce_cib_default_settings();

  $form = array();
  $form['pid'] = array(
    '#type' => 'textfield',
    '#title' => t('CIB Shop ID'),
    '#description' => t('The shop ID received from CIB in email. Has the format "ABC0001".'),
    '#default_value' => $settings['pid'],
    '#required' => TRUE,
  );

  $form['cur'] = array(
    '#type' => 'radios',
    '#title' => t('Currency'),
    '#description' => t('The currency of the payment.'),
    '#options' => array(
      'EUR' => 'EUR',
      'HUF' => 'HUF',
    ),
    '#default_value' => $settings['cur'],
    '#required' => TRUE,
  );

  $form['env'] = array(
    '#type' => 'radios',
    '#title' => t('Environment'),
    '#options' => array(
      'testing' => t('Testing'),
      'live' => t('Live')
    ),
    '#default_value' => $settings['env'],
    '#required' => TRUE,
  );

  $form['des-test'] = array(
    '#type' => 'textfield',
    '#title' => t('Test keyfile path'),
    '#description' => t('The absolute path of the des keyfile used for encryption on the dev site.'),
    '#default_value' => $settings['des-test'],
    '#required' => TRUE,
  );
  $form['des-live'] = array(
    '#type' => 'textfield',
    '#title' => t('Live keyfile path'),
    '#description' => t('The absolute path of the des keyfile used for encryption on the live site.'),
    '#default_value' => $settings['des-live'],
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Payment method callback; generation callback for the payment redirect form.
 */
function commerce_cib_redirect_form($form, &$form_state, $order, $payment_method) {
  $amo = field_get_items('commerce_order', $order, 'commerce_order_total');
  $amo = $amo[0]['amount'];

  // Last chance to prevent redirection to CIB.
  // Useful to check if an out-of-stock event occurs.
  rules_invoke_event('commerce_cib_pre_redirect', $order);
  $des = ($payment_method['settings']['env'] == 'live') ? $payment_method['settings']['des-live'] : $payment_method['settings']['des-test'];

  // Identify eki user based on email.
  $transactions = db_select('commerce_payment_transaction', 'cpt')
    ->fields('cpt', array('transaction_id'));
  $order_alias = $transactions->innerJoin('commerce_order', 'co', '%alias.order_id = cpt.order_id');
  $transactions = $transactions->condition("{$order_alias}.mail", $order->mail)
    ->execute()
    ->fetchField();
  if (empty($transactions)) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'commerce_payment_transaction')
      ->entityCondition('bundle', 'cib')
      ->fieldOrderBy('commerce_cib_eki_user', 'value', 'DESC')
      ->range(0, 1)
      ->addMetaData('account', user_load(1)); // Run the query as user 1.
    $result = $query->execute();

    if (isset($result['commerce_payment_transaction'])) {
      $transaction_ids = array_keys($result['commerce_payment_transaction']);
      $transaction = commerce_payment_transaction_load($transaction_ids[0]);
      $last_eki_user = field_get_items('commerce_payment_transaction', $transaction, 'commerce_cib_eki_user');
      $last_eki_user = $last_eki_user[0]['value'];
      $no = substr($last_eki_user, 3) + 1;
    }
    else {
      $no = 1;
    }
    $eki_user = substr($payment_method['settings']['pid'], 0, 3) . str_pad($no, 8, '0', STR_PAD_LEFT);
  }
  // This customer has already purchased something, let's get her eki_user.
  else {
    $transaction = commerce_payment_transaction_load($transactions);
    $eki_user = field_get_items('commerce_payment_transaction', $transaction, 'commerce_cib_eki_user');
    $eki_user = $eki_user[0]['value'];
  }

  $initialized = FALSE;
  $tries = 0;

  while (!$initialized && $tries++ < 10) {
    $trid = date("is", time());
    for ($i=1; $i <= 12; $i++) {
      $trid .= rand(1,9);
    }

    // Let's initialize the transaction
    $query10 = array(
      'CRYPTO' => 1,
      'MSGT' => 10,
      'TRID' => $trid,
      'UID' => $eki_user,
      'LANG' => 'HU',
      'TS' => date("YmdHis", time()),
      'AUTH' => 0,
      'AMO' => $amo,
      'CUR' => $payment_method['settings']['cur'],
      'URL' => 'http://' . $_SERVER['SERVER_NAME'] . '/commerce_cib_finish/' . $order->order_id,
      'PID' => $payment_method['settings']['pid'],
    );
    $url = commerce_cib_create_url($query10, $payment_method['settings']);
    $answer = drupal_http_request($url);
    if ($answer->code == 200) {
      $cleartext = ekiDecodeUrl($answer->data, $des);
      parse_str($cleartext, $query);
      if ($query['RC'] == '00') {
        $initialized = TRUE;
      }
    }
  }

  if ($initialized) {
    $new_transaction = commerce_payment_transaction_new('cib', $order->order_id);
    $new_transaction->commerce_cib_eki_user[LANGUAGE_NONE][0]['value'] = $eki_user;
    $new_transaction->commerce_cib_start[LANGUAGE_NONE][0]['value'] = time();
    $new_transaction->commerce_cib_end[LANGUAGE_NONE][0]['value'] = 0;
    $new_transaction->remote_id = $trid;
    $new_transaction->amount = $amo;
    $new_transaction->currency_code = $payment_method['settings']['cur'];
    $new_transaction->commerce_cib_msgt[LANGUAGE_NONE][0]['value'] = '';
    $new_transaction->commerce_cib_rc[LANGUAGE_NONE][0]['value'] = '';
    $new_transaction->commerce_cib_rt[LANGUAGE_NONE][0]['value'] = '';
    $new_transaction->commerce_cib_anum[LANGUAGE_NONE][0]['value'] = '';
    $new_transaction->commerce_cib_history[LANGUAGE_NONE][0]['value'] = '';
    commerce_payment_transaction_save($new_transaction);
    $query20 = array(
      'MSGT' => 20,
      'PID' => $payment_method['settings']['pid'],
      'TRID' => $trid,
    );
    $url = commerce_cib_create_url($query20, $payment_method['settings'], 'customer');
    header('Location: ' . $url);
    exit();
  }
  else {
    rules_invoke_event('commerce_cib_initialization_fails', $order);
  }
}

/**
 * Menu callback for CIB redirecting to our site.
 */
function commerce_cib_finish_step($order) {
  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
  $des = ($payment_method['settings']['env'] == 'live') ? $payment_method['settings']['des-live'] : $payment_method['settings']['des-test'];
  // Getting answer from the CIB payment gateway.
  $crypto = 'DATA=' . $_GET['DATA'] . '&PID=' . $_GET['PID'] . '&CRYPTO=1';
  $cleartext = ekiDecodeUrl($crypto, $des);
  parse_str($cleartext, $query);
  $transaction = _commerce_cib_get_transaction($query['TRID']);
  if (($query['MSGT'] == '21') && ($transaction->order_id == $order->order_id)) {

    // Closing the transaction.
    $amo = field_get_items('commerce_order', $order, 'commerce_order_total');
    $amo = $amo[0]['amount'];
    $query32 = array(
      'CRYPTO' => 1,
      'MSGT' => 32,
      'PID' => $payment_method['settings']['pid'],
      'TRID' => $query['TRID'],
      'AMO' => $amo,
    );

    $url = commerce_cib_create_url($query32, $payment_method['settings']);
    $answer = drupal_http_request($url);
    // Everything seems to be allright so far.
    if ($answer->code == 200) {
      commerce_cib_analyse_message($answer, $payment_method, $order);
    }
    // Handle timeout.
    elseif ($answer->code == 500) {
      $query33 = array(
        'CRYPTO' => 1,
        'MSGT' => 33,
        'PID' => $payment_method['settings']['pid'],
        'TRID' => $query['TRID'],
        'AMO' => $amo,
      );
      $url = commerce_cib_create_url($query33, $payment_method['settings']);
      $answer = drupal_http_request($url);
      if ($answer->code == 200) {
        commerce_cib_analyse_message($answer, $payment_method, $order);
      }
    }
  }
  else {
    rules_invoke_event('commerce_cib_no_communication', $order);
  }
  return '';
}

/**
 * Analyse answer to a 32 and 33 message.
 */
function commerce_cib_analyse_message($answer, $payment_method, $order) {
  $des = ($payment_method['settings']['env'] == 'live') ? $payment_method['settings']['des-live'] : $payment_method['settings']['des-test'];
  $cleartext2 = ekiDecodeUrl($answer->data, $des);
  parse_str($cleartext2, $query);
  $transaction = _commerce_cib_get_transaction($query['TRID']);
  $transaction->commerce_cib_msgt[LANGUAGE_NONE][0]['value'] = $query['MSGT'];
  $transaction->remote_status = $query['RC'];
  $transaction->message = iconv('ISO-8859-2//TRANSLIT', 'UTF-8', $query['RT']);
  $transaction->commerce_cib_anum[LANGUAGE_NONE][0]['value'] = $query['ANUM'];
  $end = $transaction->commerce_cib_end[LANGUAGE_NONE][0]['value'] = time();
  $start = field_get_items('commerce_payment_transaction', $transaction, 'commerce_cib_start');

  if ($query['RC'] == '00') {
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    commerce_payment_transaction_save($transaction);
    commerce_payment_redirect_pane_next_page($order);
  }
  else {
    if ($end - $start[0]['value'] > COMMERCE_CIB_TIMEOUT) {
      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
    }
    else {
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    }
    commerce_payment_transaction_save($transaction);
    rules_invoke_event('commerce_cib_transaction_fails', $order);
  }
}

/**
 * Get transaction entity by TRID.
 */
function _commerce_cib_get_transaction($trid) {
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'commerce_payment_transaction')
    ->entityCondition('bundle', 'cib')
    ->propertyCondition('remote_id', $trid)
    ->execute();
  if (!empty($result['commerce_payment_transaction'])) {
    $transaction = reset($result['commerce_payment_transaction']);
    return commerce_payment_transaction_load($transaction->transaction_id);
  }
  else {
    return NULL;
  }
}

/**
 * Prepare an URL for communication with CIB.
 *
 * @param array $query An array with the URL query keys and values.
 * @param array $settings The $payment_method['settings'] array.
 * @param string $market_customer Whether the market or customer url should be returned.
 *
 * @return string The encoded URL.
 */
function commerce_cib_create_url($query, $settings, $market_customer = 'market') {
  $cleartext = '';
  foreach ($query as $key => $value) {
    $cleartext .= $key . '=' . $value . '&';
  }
  $cleartext = substr($cleartext, 0, -1);
  $des = ($settings['env'] == 'live') ? $settings['des-live'] : $settings['des-test'];
  $crypto = ekiEncodeUrl($cleartext, $des);
  $function = ($market_customer == 'market') ? 'commerce_cib_env_url' : 'commerce_cib_env_customer_url';
  $url = $function($settings['env']) . '?'. $crypto;
  return $url;
}

/**
 * Implements hook_cron().
 */
function commerce_cib_cron() {
  commerce_cib_handle_timeouts();
}

/**
 * Handling timeouted transactions.
 *
 * Called by cron.
 */
function commerce_cib_handle_timeouts() {
  $timeout_time = time() - COMMERCE_CIB_TIMEOUT;
  // Get unfinished transactions.
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'commerce_payment_transaction')
    ->entityCondition('bundle', 'cib')
    ->fieldCondition('commerce_cib_start', 'value', $timeout_time, '<')
    ->fieldCondition('commerce_cib_end', 'value', 0)
    ->execute();
  if (!empty($result['commerce_payment_transaction'])) {
    $transaction_ids = array_keys($result['commerce_payment_transaction']);
    $timeouted_transactions = commerce_payment_transaction_load_multiple($transaction_ids);

    foreach ($timeouted_transactions as $tt) {
      $order = commerce_order_load($tt->order_id);
      // Get transaction error codes and history.
      _commerce_cib_transaction_investigate($tt);
      watchdog('commerce_cib', 'Transaction query returned: RC=!rc, RT=!rt, HISTORY=!history, ANUM=!anum, TRID=!trid', array('!rc' => $tt->remote_status, '!rt' => $tt->message, '!history' => $history[0]['value'], '!anum' => empty($anum[0]['value']) ? $anum[0]['value'] : 'n/a', '!trid' => $tt->remote_id));
      commerce_order_status_update($order, 'canceled');
      rules_invoke_event('commerce_cib_timeout', $order);
    }
  }
}

/**
 * Investigate a broken transaction.
 *
 * Send a MSGT 33 (transaction status query) and if it succeeds
 * send a MSGT 37 (transaction history query).
 *
 * If we don't get a valid response, we close the transaction anyway by setting
 * the finishing timestamp.
 *
 * @param $transaction
 *   The transaction entity.
 */
function _commerce_cib_transaction_investigate($transaction) {
  // Send MSGT 33 to find out what happened with the transaction.
  // TODO: We do not know the name of the payment method.
  $payment_method = commerce_payment_method_instance_load('cib|commerce_payment_cib');
  $query33 = array(
    'MSGT' => 33,
    'PID' => $payment_method['settings']['pid'],
    'TRID' => $transaction->remote_id,
    'AMO' => $transaction->amount,
  );
  $url = commerce_cib_create_url($query33, $payment_method['settings']);
  $answer = drupal_http_request($url);
  $des = ($payment_method['settings']['env'] == 'live') ? $payment_method['settings']['des-live'] : $payment_method['settings']['des-test'];
  if ($answer->code == 200) {
    $cleartext2 = ekiDecodeUrl($answer->data, $des);
    parse_str($cleartext2, $query);
    if (($query['TRID'] == $transaction['trid']) && ($query['MSGT'] == 31)) {
      $transaction->commerce_cib_msgt[LANGUAGE_NONE][0]['value'] = $query['MSGT'];
      $transaction->remote_status = $query['RC'];
      $transaction->message = iconv('ISO-8859-2//TRANSLIT', 'UTF-8', $query['RT']); // Text messages are sent in latin2 by IIS.
      $transaction->commerce_cib_anum[LANGUAGE_NONE][0]['value'] = $query['ANUM'];

      $query37 = array(
        'MSGT' => 37,
        'PID' => $payment_method['settings']['pid'],
        'TRID' => $transaction->remote_id,
        'AMO' => $transaction->amount,
      );
      $url = commerce_cib_create_url($query37, $payment_method['settings']);
      $answer = drupal_http_request($url);
      if ($answer->code == 200) {
        $cleartext2 = ekiDecodeUrl($answer->data, $des);
        parse_str($cleartext2, $query);
        if (($query['TRID'] == $transaction->remote_id) && ($query['MSGT'] == 38)) {
          $transaction->commerce_cib_history[LANGUAGE_NONE][0]['value'] = $query['HISTORY'];
        }
      }

    }
    else {
      $transaction->commerce_cib_rc[LANGUAGE_NONE][0]['value'] = '';
    }
    $transaction['commerce_cib_end'][LANGUAGE_NONE][0]['value'] = time();
    commerce_payment_transaction_save($transaction);
  }
}

/**
 * Generate messages from return codes.
 */
function commerce_cib_get_errmsg($rc) {
  $message = '';

  switch ($rc) {
    case '00':
      $message = t('The transaction was successful.');
      break;

    case '03':
    case '09':
    case '12':
    case '13':
    case '20':
    case '21':
    case '22':
    case '30':
    case '34':
    case '36':
    case '42':
    case '52':
    case '54':
    case '55':
    case '56':
    case '87':
    case '88':
    case '90':
      $message = t('Your card information appears to be invalid. Please check that:');
      $list = array(
        t('you have entered the correct card number,'),
        t('you have entered the expiry date of your card,'),
        t('your card has not expired yet,'),
        t('in case of an EC/MC card you have entered the CVC code (three digits on the back of your card near the signature zone)'),
        t('your card is allowed for transactions on the internet'),
        t('in case of a Visa card you have entered the CVV code (three digits on the back of your card).'),
      );
      break;

    case '14':
    case '15':
    case '16':
    case '17':
    case '23':
    case '24':
    case '29':
    case '32':
    case '35':
    case '45':
    case '69':
    case '70':
    case '72':
    case '74':
    case '75':
    case '76':
    case '77':
    case '78':
      $message = t('Your order could not be fulfilled. Please check that:');
      $list = array(
        t('you have sufficient funds available on your card,'),
        t("you haven't exceeded your allowed limit."),
      );
      break;

    case '08':
    case '10':
    case '19':
    case '27':
    case '31':
    case '60':
    case '64':
    case '65':
    case '71':
    case '86':
    case '93':
    case 'A2':
    case 'A9':
      $list = array(
        t('The connection was probably lost somewhere during the transaction.'),
      );
      break;

    case '50':
    case 'TO':
      $list = array(
        t('The transaction has timed out.'),
      );
      break;

    case 'C2':
      $list = array(
        t('You have canceled the transaction. You can try completing the order again by <a href="!url">starting over here</a>.', array('!url' => url('cart'))),
      );
      break;

    default:
      $list = array(
        t('An unknown error has occurred with the transaction.'),
      );
      break;
  }
  if (isset($list) && is_array($list)) {
    $message .= theme('item_list', array('items' => $list));
  }
  return (!empty($message)) ? $message : FALSE;
}

/**
 * CIB market url.
 *
 * @param string $env 'live'or something else
 *
 *  Return live or test CIB market url.
 */
function commerce_cib_env_url($env) {
  if ($env == 'live') {
    return 'http://eki.cib.hu:8090/market.saki';
  }
  return 'http://ekit.cib.hu:8090/market.saki';
}

/**
 * CIB customer url
 *
 * @param string $env 'live'or something else
 *
 *  Return live or test CIB customer url.
 */
function commerce_cib_env_customer_url($env) {
  if ($env == 'live') {
    return 'https://eki.cib.hu/customer.saki';
  }
  return 'https://ekit.cib.hu/customer.saki';
}

/**
 * Encryption using the saki protocoll.
 *
 * @param $plaintext: The string to encrypt.
 * @param $keyfile: The keyfile path needed for the encryption.
 *
 * @return The encrypted message.
 */
function ekiEncodeUrl($plaintext, $keyfile) {
  $f = fopen($keyfile,"r");
  $keyinfo = fread($f, 38);
  fclose($f);
  $k1 = substr($keyinfo, 14, 8);
  $k2 = substr($keyinfo, 22, 8);
  $iv = substr($keyinfo, 30, 8);
  $key = $k1 . $k2 . $k1;
  $arr = explode("&", $plaintext);
  $outs = "";
  $pid = "";
  for ($i = 0; $i < count($arr); $i++) {
    if (strtoupper($arr[$i]) != "CRYPTO=1") {
      $outs .= "&" . $arr[$i];
    }
    if (substr(strtoupper($arr[$i]), 0, 4)=="PID=") {
      $pid=substr(strtoupper($arr[$i]), 4, 7);
    }
  }
  $outs = substr($outs, 1);
  $outs = rawurlencode($outs);
  $outs = str_replace("%3D", "=", $outs);
  $outs = str_replace("%26", "&", $outs);
  $crc = str_pad(dechex(crc32($outs)), 8, "0", STR_PAD_LEFT);
  for ($i=0; $i<4; $i++) {
    $outs .= chr(base_convert(substr($crc, $i*2, 2), 16, 10));
  }
  $pad = 8 - (strlen($outs) % 8);
  for ($i = 0; $i < $pad; $i++) {
    $outs .= chr($pad);
  }
  $td = mcrypt_module_open("tripledes", "", "cbc", "");
  mcrypt_generic_init($td, $key, $iv);
  $outs = mcrypt_generic($td, $outs);
  mcrypt_module_close($td);
  $pad = 3 - (strlen($outs) % 3);
  for ($i = 0; $i < $pad; $i++)
    $outs .= chr($pad);
  $outs = base64_encode($outs);
  $outs = rawurlencode($outs);
  $outs = "PID=" . $pid . "&CRYPTO=1&DATA=" . $outs;
  return $outs;
}

/**
 * Decryption using the saki protocoll.
 *
 * @param $plaintext: The string to decrypt.
 * @param $keyfile: The keyfile path needed for the encryption.
 *
 * @return The decrypted message or an empty string in case of crc error.
 */
function ekiDecodeUrl($crypto, $keyfile) {
  $f = fopen($keyfile, "r");
  $keyinfo = fread($f, 38);
  fclose($f);
  $k1 = substr($keyinfo, 14, 8);
  $k2 = substr($keyinfo, 22, 8);
  $iv = substr($keyinfo, 30, 8);
  $key = $k1 . $k2 . $k1;
  $arr = explode("&", $crypto);
  $outs = '';
  $pid = '';
  for ($i=0; $i < count($arr); $i++) {
    if (substr(strtoupper($arr[$i]), 0, 5) == "DATA=") {
      $outs = substr($arr[$i], 5);
    }
    if (substr(strtoupper($arr[$i]), 0, 4) == "PID=") {
      $pid = substr(strtoupper($arr[$i]), 4, 7);
    }
  }
  $outs = rawurldecode($outs);
  $outs = base64_decode($outs);
  $lastc = ord($outs[strlen($outs) - 1]);
  $validpad = 1;
  for ($i = 0; $i < $lastc; $i++) {
    if (ord(substr($outs, strlen($outs) - 1 - $i, 1)) != $lastc) {
      $validpad = 0;
    }
  }
  if ($validpad==1) {
    $outs = substr($outs, 0, strlen($outs) - $lastc);
  }
  $td = mcrypt_module_open("tripledes", "", "cbc", "");
  mcrypt_generic_init($td, $key, $iv);
  $outs = mdecrypt_generic($td, $outs);
  mcrypt_module_close($td);
  $lastc = ord($outs[strlen($outs) - 1]);
  $validpad = 1;
  for ($i = 0; $i < $lastc; $i++) {
    if (ord(substr($outs, strlen($outs) - 1 - $i, 1)) != $lastc) {
    $validpad = 0;
    }
  }
  if ($validpad == 1) {
    $outs = substr($outs, 0, strlen($outs) - $lastc);
  }
  $crc = substr($outs, strlen($outs) - 4);
  $crch = "";
  for ($i = 0; $i < 4; $i++) {
    $crch .= str_pad(dechex(ord($crc[$i])), 2, "0", STR_PAD_LEFT);
  }
  $outs = substr($outs, 0, strlen($outs) - 4);
  $crc = str_pad(dechex(crc32($outs)), 8, "0", STR_PAD_LEFT);
  if ($crch != $crc) {
    return "";
  }
  $outs = str_replace("&", "%26", $outs);
  $outs = str_replace("=", "%3D", $outs);
  $outs = rawurldecode($outs);
  $outs = "CRYPTO=1&" . $outs;
  return $outs;
}

/**
 * Create fields on the payment entity when enabling or upgrading the module.
 */
function _commerce_cib_configure_payment_entity() {
  $entity_type = 'commerce_payment_transaction';
  $field_bases = array();

  // Field bases
  $text_fields = array(
    'commerce_cib_eki_user',
    'commerce_cib_msg',
    'commerce_cib_history',
    'commerce_cib_anum',
  );
  foreach ($text_fields as $text_field) {
    $field_bases[$text_field] = array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => $text_field,
      'foreign keys' => array(
        'format' => array(
          'columns' => array(
            'format' => 'format',
          ),
          'table' => 'filter_format',
        ),
      ),
      'indexes' => array(
        'format' => array(
          0 => 'format',
        ),
      ),
      'locked' => 0,
      'module' => 'text',
      'settings' => array(
        'max_length' => 256,
      ),
      'translatable' => 0,
      'type' => 'text',
    );
  }

  $field_bases['commerce_cib_end'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'commerce_cib_end',
    'foreign keys' => array(),
    'indexes' => array(),
    'locked' => 0,
    'module' => 'date',
    'settings' => array(
      'cache_count' => 4,
      'cache_enabled' => 0,
      'granularity' => array(
        'day' => 'day',
        'hour' => 'hour',
        'minute' => 'minute',
        'month' => 'month',
        'second' => 'second',
        'year' => 'year',
      ),
      'timezone_db' => 'UTC',
      'todate' => '',
      'tz_handling' => 'site',
    ),
    'translatable' => 0,
    'type' => 'datestamp',
  );

  $field_bases['commerce_cib_start'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'commerce_cib_start',
    'foreign keys' => array(),
    'indexes' => array(),
    'locked' => 0,
    'module' => 'date',
    'settings' => array(
      'cache_count' => 4,
      'cache_enabled' => 0,
      'granularity' => array(
        'day' => 'day',
        'hour' => 'hour',
        'minute' => 'minute',
        'month' => 'month',
        'second' => 'second',
        'year' => 'year',
      ),
      'timezone_db' => 'UTC',
      'todate' => '',
      'tz_handling' => 'site',
    ),
    'translatable' => 0,
    'type' => 'datestamp',
  );

  // Field instances.
  $field_instances = array();
  foreach ($text_fields as $text_field) {
    $field_instances[$text_field] = array(
      'bundle' => 'cib',
      'default_value' => NULL,
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'inline',
          'module' => 'text',
          'settings' => array(),
          'type' => 'text_default',
          'weight' => 0,
        ),
      ),
      'entity_type' => 'commerce_payment_transaction',
      'field_name' => $text_field,
      'required' => 1,
      'settings' => array(
        'text_processing' => 0,
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => 16,
        ),
        'type' => 'text_textfield',
        'weight' => 1,
      ),
    );
  }
  $field_instances['commerce_cib_eki_user']['label'] = 'EKI User';
  $field_instances['commerce_cib_msgt']['label'] = 'msgt';
  $field_instances['commerce_cib_anum']['label'] = 'Anum';
  $field_instances['commerce_cib_history']['label'] = 'History';

  $field_instances['commerce_cib_end'] = array(
    'bundle' => 'cib',
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'inline',
        'module' => 'date',
        'settings' => array(
          'format_type' => 'long',
          'fromto' => 'both',
          'multiple_from' => '',
          'multiple_number' => '',
          'multiple_to' => '',
        ),
        'type' => 'date_default',
        'weight' => 2,
      ),
    ),
    'entity_type' => 'commerce_payment_transaction',
    'field_name' => 'commerce_cib_end',
    'label' => 'End',
    'required' => 0,
    'settings' => array(
      'default_value' => 'blank',
      'default_value2' => 'same',
      'default_value_code' => '',
      'default_value_code2' => '',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'date',
      'settings' => array(
        'increment' => 15,
        'input_format' => 'm/d/Y - H:i:s',
        'input_format_custom' => '',
        'label_position' => 'none',
        'text_parts' => array(),
        'year_range' => '-3:+3',
      ),
      'type' => 'date_text',
      'weight' => 3,
    ),
  );

  $field_instances['commerce_cib_start'] = array(
    'bundle' => 'cib',
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'inline',
        'module' => 'date',
        'settings' => array(
          'format_type' => 'long',
          'fromto' => 'both',
          'multiple_from' => '',
          'multiple_number' => '',
          'multiple_to' => '',
        ),
        'type' => 'date_default',
        'weight' => 1,
      ),
    ),
    'entity_type' => 'commerce_payment_transaction',
    'field_name' => 'commerce_cib_start',
    'label' => 'Start',
    'required' => 0,
    'settings' => array(
      'default_value' => 'blank',
      'default_value2' => 'same',
      'default_value_code' => '',
      'default_value_code2' => '',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'date',
      'settings' => array(
        'increment' => 15,
        'input_format' => 'm/d/Y - H:i:s',
        'input_format_custom' => '',
        'label_position' => 'none',
        'text_parts' => array(),
        'year_range' => '-3:+3',
      ),
      'type' => 'date_text',
      'weight' => 2,
    ),
  );
  foreach ($field_bases as $field_name => $field_base) {
    $field = field_info_field($field_name);
    $instance = field_info_instance($entity_type, $field_name, 'cib');
    if (empty($field)) {
      $field = field_create_field($field_base);
    }
    if (empty($instance)) {
      field_create_instance($field_instances[$field_name]);
    }
  }
}
