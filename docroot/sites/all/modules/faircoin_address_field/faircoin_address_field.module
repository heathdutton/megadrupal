<?php
/**
 * @file
 * Setup a new faircoin field using the Field Types API.
 */

/**
 * Implements hook_help().
 */
function faircoin_address_field_help($path, $arg) {
  switch ($path) {
    case "admin/help#faircoin_address_field":
      $output = '<p>' . t("The FairCoin Address Field module provides a field composed of a FairCoin address.") . '<br />' .
        t("When the user enters an address, the module validates that it is a real FairCoin address. When the field is displayed, a little and expansible QR code is presented.") . '</p>' .
        '<p>' . t("This module depends on !linktomodule and the !linktolibrary", array(
          '!linktomodule' => l(t("Libraries API module"), 'https://www.drupal.org/project/libraries'),
          '!linktolibrary' => l(t("jquery.qrcode library"), 'https://github.com/XaviP/jquery-qrcode/archive/master.zip'),
        )) . '<br />' .
        t("About the jquery.qrcode library, you should download it, unpack it, rename the directory to 'qrcode' and place it inside the 'sites/all/libraries' directory.") . '<br />' .
        t("Make sure the path to the plugin file becomes: 'sites/all/libraries/qrcode/jquery.qrcode.min.js'") . '</p>' .
        '<p>' . t("To use the faircoin address field, attach it to a content type, user accounts (admin/config/people/accounts/fields) or entity.") . '</p>';
      return $output;
  }
}

/**
 * Implements hook_libraries_info().
 */
function faircoin_address_field_libraries_info() {
  $libraries = array();
  $libraries['qrcode'] = array(
    'name' => 'QRcode',
    'vendor url' => 'https://github.com/jeromeetienne',
    'download url' => 'https://github.com/XaviP/jquery-qrcode/archive/master.zip',
    'version callback' => 'faircoin_address_field_simple_callback',
    'files' => array(
      'js' => array(
        'jquery.qrcode.min.js',
      ),
    ),
  );
  return $libraries;
}
/**
 * Short-circuit the hook_libraries_info version argument.
 *
 * There's a unique version of the library and it's not defined in the file.
 */
function faircoin_address_field_simple_callback() {
  return TRUE;
}

/**
 * Implements hook_field_info().
 */
function faircoin_address_field_field_info() {
  return array(
    'faircoin_field' => array(
      'label' => t('Faircoin address'),
      'description' => t('A field composed of a faircoin address.'),
      'default_widget' => 'faircoin_address_field_simple_text',
      'default_formatter' => 'faircoin_address_field_text_and_qrcode',
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * Validate content ($items parameter)
 * We want to verify that the item/s only contain valid faircoin
 * address/es, and they aren't duplicated. If the item validates,
 * we do nothing. If it doesn't validate, we add our own error
 * notification to the $errors parameter.
 */
function faircoin_address_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  $message = array();
  $addresses = array();
  foreach ($items as $delta => $item) {
    if (!empty($item['faircoin'])) {
      // Validate no repeated addresses in a multiple field input.
      if (in_array($item['faircoin'], $addresses)) {
        $message[] = array(
          'num' => $delta,
          'message' => t('There are two or more equal faircoin addresses.'),
        );
      }
      else {
        $addresses[] = $item['faircoin'];
      }
      // Validate FairCoin address.
      $validator = _faircoin_address_field_check_address($item['faircoin']);
      if (!$validator) {
        $message[] = array(
          'num' => $delta,
          'message' => t('This is not a valid faircoin address.'),
        );
      }
    }
  }
  if (!empty($message)) {
    foreach ($message as $m) {
      $errors[$field['field_name']][$langcode][$m['num']][] = array(
        'error' => 'faircoin_address_field_invalid',
        'message' => $m['message'],
      );
    }
  }
}


/**
 * Implements hook_field_is_empty().
 *
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function faircoin_address_field_field_is_empty($item, $field) {
  return empty($item['faircoin']);
}

/**
 * Implements hook_field_formatter_info().
 *
 * Two formatters for this field.
 */
function faircoin_address_field_field_formatter_info() {
  return array(
    'faircoin_address_field_text_and_qrcode' => array(
      'label' => t('Text and QR code'),
      'field types' => array('faircoin_field'),
    ),
    'faircoin_address_field_only_text' => array(
      'label' => t('Only text'),
      'field types' => array('faircoin_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Two formatters are implemented.
 */
function faircoin_address_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'faircoin_address_field_text_and_qrcode':
      if (($library = libraries_load('qrcode')) && !empty($library['loaded'])) {
        drupal_add_js(drupal_get_path('module', 'faircoin_address_field') . '/faircoin_address_field.js');
      }
      drupal_add_css(drupal_get_path('module', 'faircoin_address_field') . '/css/faircoin_address_field.css');
      $logo_petit = theme('image', array(
        'path' => drupal_get_path('module', 'faircoin_address_field') . '/img/icon_qrcode.png',
        'attributes' => array(
          'class' => 'icon-qrcode-petit',
          'title' => t('Click to show QR code'),
        ),
      ));
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          'faircoin-address-qrcode-label' => array(
            '#type' => 'markup',
            '#markup' => $logo_petit,
          ),
          'faircoin-address-qrcode-text' => array(
            '#type' => 'html_tag',
            '#tag' => 'code',
            '#attributes' => array(
              'class' => 'faircoin-address-qrcode-text',
            ),
            '#value' => check_plain($item['faircoin']),
          ),
          'faircoin-address-qrcode-image' => array(
            '#type' => 'html_tag',
            '#tag' => 'div',
            '#attributes' => array(
              'class' => 'faircoin-address-qrcode-wrapper',
            ),
            '#value' => '<div class="faircoin-address-qrcode-image"></div>',
          ),
        );
      }
      break;

    case 'faircoin_address_field_only_text':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'html_tag',
          '#tag' => 'code',
          '#attributes' => array(
            'style' => 'font-family: Courier, monospace',
            'class' => 'faircoin-address-only-text',
          ),
          '#value' => check_plain($item['faircoin']),
        );
      }
      break;

  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * Just one widget is provided.
 */
function faircoin_address_field_field_widget_info() {
  return array(
    'faircoin_address_field_simple_text' => array(
      'label' => t('Faircoin address'),
      'field types' => array('faircoin_field'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function faircoin_address_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['faircoin']) ? $items[$delta]['faircoin'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {

    case 'faircoin_address_field_simple_text':
      $widget += array(
        '#type' => 'textfield',
        '#default_value' => $value,
        // Allow a slightly larger size that the field length to allow for some
        // configurations where all characters won't fit in input field.
        '#size' => 35,
        '#maxlength' => 35,
      );
      break;

  }

  $element['faircoin'] = $widget;
  return $element;
}


/**
 * Implements hook_field_widget_error().
 */
function faircoin_address_field_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'faircoin_address_field_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Verify the FairCoin address.
 */
function _faircoin_address_field_check_address($address) {
  if (preg_match('/[^1-9A-HJ-NP-Za-km-z]/', $address)) {
    return FALSE;
  }
  // Decode address.
  $hexadecimal = '0123456789ABCDEF';
  $base58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
  $raw = "0";
  for ($i = 0; $i < drupal_strlen($address); $i++) {
    $position = (string) strpos($base58, $address[$i]);
    $raw = (string) bcmul($raw, "58", 0);
    $raw = (string) bcadd($raw, $position, 0);
  }
  $hex = "";
  while (bccomp($raw, 0) == 1) {
    $dv = (string) bcdiv($raw, "16", 0);
    $rem = (integer) bcmod($raw, "16");
    $raw = $dv;
    $hex = $hex . $hexadecimal[$rem];
  }
  $addr_decoded = strrev($hex);
  // Amend padding.
  for ($i = 0; $i < drupal_strlen($address) && $address[$i] == "1"; $i++) {
    $addr_decoded = "00" . $addr_decoded;
  }
  if (drupal_strlen($addr_decoded) % 2 != 0) {
    $addr_decoded = "0" . $addr_decoded;
  }
  // Control invalid length.
  if (drupal_strlen($addr_decoded) != 50) {
    return FALSE;
  }
  // Control invalid type.
  // FairCoin main net public key: "5F"
  // FairCoin main net script: "24"
  $type = drupal_substr($addr_decoded, 0, 2);
  if ($type != "5F" && $type != "24") {
    return FALSE;
  }
  // Check address.
  $ch = drupal_substr($addr_decoded, 0, drupal_strlen($addr_decoded) - 8);
  $ch = pack("H*", $ch);
  $ch = hash("sha256", $ch, TRUE);
  $ch = hash("sha256", $ch);
  $ch = drupal_strtoupper($ch);
  $ch = drupal_substr($ch, 0, 8);
  $is_valid = ($ch == drupal_substr($addr_decoded, drupal_strlen($addr_decoded) - 8));
  return ($is_valid ? $type : FALSE);
}
