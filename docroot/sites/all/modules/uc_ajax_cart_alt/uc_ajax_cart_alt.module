<?php

define('UC_AJAX_CART_ALT_DEFAULT_LINK', 1);
define('UC_AJAX_CART_ALT_DEFAULT_SELECTOR', 'li[class|="menu"] > a[href$="/cart"],ul.menu > li > a[href$="/cart"]');
define('UC_AJAX_CART_ALT_DEFAULT_REPLACEMENT', '[uc_ajax_cart_alt:total]');

/**
 *  Internal function that creates a rednerable array for another module.
 *
 *  @see block.module.
 */
function _uc_ajax_cart_build_block($module, $delta) {
  $block = block_load($module, $delta);

  // Render the block content if it has not been created already.
  if (!isset($block->content)) {
    $array = module_invoke($block->module, 'block_view', $block->delta);

    // Valid PHP function names cannot contain hyphens.
    $delta = str_replace('-', '_', $block->delta);
    // Allow modules to modify the block before it is viewed, via either
    // hook_block_view_alter() or hook_block_view_MODULE_DELTA_alter().
    drupal_alter(array('block_view', "block_view_{$block->module}_{$delta}"), $array, $block);

    if (isset($array) && is_array($array)) {
      foreach ($array as $k => $v) {
        $block->$k = $v;
      }
    }
    if (isset($block->content) && $block->content) {
      // Normalize to the drupal_render() structure.
      if (is_string($block->content)) {
        $block->content = array('#markup' => $block->content);
      }
      // Override default block title if a custom display title is present.
      if ($block->title) {
        // Check plain here to allow module generated titles to keep any
        // markup.
        $block->subject = $block->title == '<none>' ? '' : check_plain($block->title);
      }
      if (!isset($block->subject)) {
        $block->subject = '';
      }
    }
  }

  $build = $block->content;
  $block->uc_ajax_cart_alt = TRUE;

  $build['#block'] = $block;
  $build['#theme_wrappers'][] = 'block';

  return $build;
}

/**
 * Implements hook_init().
 *
 * Adds some javascript configuration and drupal AJAX javascript on every page.
 */
function uc_ajax_cart_alt_init() {
  if (!path_is_admin(current_path())) {
    drupal_add_library('system', 'drupal.ajax');
    $settings['linkSelector'] = variable_get('uc_ajax_cart_link_selector', UC_AJAX_CART_ALT_DEFAULT_SELECTOR);
    $settings['ucAjaxCartAlt'] = $settings;
    drupal_add_js($settings, 'setting');
    drupal_add_js(drupal_get_path('module', 'uc_ajax_cart_alt') . '/uc_ajax_cart_alt.js');
  }
}

/**
 * Implements hook_form_alter().
 */
function uc_ajax_cart_alt_form_alter(&$form, $form_state, $form_id) {
  if (preg_match('/^uc_product_add_to_cart_form_/', $form_id)
      || preg_match('/^uc_catalog_buy_it_now_form_/', $form_id)
      || preg_match('/^uc_product_kit_add_to_cart_form/', $form_id)) {

    // Because we can have the form more than one in a page, makes sure
    // the ajax id element of the submit element is the same.
    $form['actions']['submit']['#id'] = drupal_html_id($form['actions']['submit']['#id']);

    // Add a special submit handler to clear session data
    $form['#submit'][] = 'uc_ajax_cart_alt_clear_cache_submit';

    $form['actions']['submit']['#ajax'] = array(
      'callback' => 'uc_ajax_cart_alt_ajax_add_to_cart',
    );
  }

  if ($form_id == 'uc_cart_view_form') {

    // Add a special submit handler to clear session data
    $form['actions']['update']['#submit'][] = 'uc_ajax_cart_alt_clear_cache_submit';
    $form['actions']['checkout']['checkout']['#submit'][] = 'uc_ajax_cart_alt_clear_cache_submit';
    $form['#submit'][] = 'uc_ajax_cart_alt_clear_cache_submit';

    // This is so we can create a new ajax button, because ubercart duplicates
    // the upate button and AJAX framework needs a valid unique ID (as it should)
    $form['actions']['update_ajax'] = $form['actions']['update'];
    $form['actions']['update_ajax']['#weight'] = -10;
    $form['actions']['update_ajax']['#ajax'] = array(
      'callback' => 'uc_ajax_cart_alt_ajax_cart_view',
      'wrapper' => 'uc-cart-view-form-table',
    );
    $form['actions']['update']['#ajax'] = array(
      'callback' => 'uc_ajax_cart_alt_ajax_cart_view',
      'wrapper' => 'uc-cart-view-form-table',
      'event' => 'click submit',
    );

    // This is to hide it, it uses styles from ubercart the same way as
    // creates the same update button twice and hide it
    $form['actions']['update']['#attributes']['class'][] = 'uc-default-submit';

    $form['items']['#prefix'] = '<div id="uc-cart-view-form-table">';
    $form['items']['#suffix'] = '</div>';

    foreach (element_children($form['items']) as $key) {
      if (isset($form['items'][$key]['cart_item_id'])) {
        $form['items'][$key]['remove']['#ajax'] = array(
          'callback' => 'uc_ajax_cart_alt_ajax_cart_view',
          'wrapper' => 'uc-cart-view-form-table',
        );
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function uc_ajax_cart_alt_menu() {

  $items['uc_ajax_cart_alt/%/refresh'] = array(
      'page callback' => 'uc_ajax_cart_alt_ajax_refresh',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'theme callback' => 'ajax_base_page_theme',
      'type' => MENU_CALLBACK,
  );

  $items['admin/store/settings/uc_ajax_cart_alt'] = array(
    'title' => 'AJAX Cart (Alt)',
    'description' => 'Configure the AJAX cart settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_ajax_cart_alt_settings'),
    'access arguments' => array('administer store'),
  );

  return $items;
}


/**
 * Implements hook_block_info().
 */
function uc_ajax_cart_alt_block_info() {
  // Retrieve block informations
  $blocks['uc_ajax_cart_alt'] = array(
    'info' => t('Shopping cart (AJAX)'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function uc_ajax_cart_alt_block_view($delta) {
  switch ($delta) {
    case 'uc_ajax_cart_alt':
      $block['subject'] = t('Shopping cart');
      $block['content'] = '<div class="uc-ajax-cart-alt-cart">' . theme('uc_ajax_cart_alt_block_placeholder') . '</div>';
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function uc_ajax_cart_alt_theme($existing, $type, $theme, $path) {
  return array(
    'uc_ajax_cart_alt_block_placeholder' => array(
    ),
  );
}

function uc_ajax_cart_alt_token_info() {
  $type = array(
    'name' => t('Current cart'),
    'description' => t('Tokens related to the current cart.'),
  );

  $tokens['items'] = array(
    'name' => t("Cart items"),
    'description' => t("The total amount of items in the cart."),
  );
  $tokens['total'] = array(
    'name' => t("Cart total"),
    'description' => t("The total amount of the cart (themed)."),
  );
  $tokens['total-number'] = array(
    'name' => t("Cart total (number)"),
    'description' => t("The total amount of the cart as a number."),
  );

  return array(
    'types' => array('uc_ajax_cart_alt' => $type),
    'tokens' => array('uc_ajax_cart_alt' => $tokens),
  );
}

function uc_ajax_cart_alt_tokens($type, $tokens, array $data = array(), array $options = array()) {
  if (isset($options['language'])) {
    $url_options['language'] = $options['language'];
    $language_code = $options['language']->language;
  }
  else {
    $language_code = NULL;
  }
  $sanitize = !empty($options['sanitize']);

  $replacements = array();

  if ($type == 'uc_ajax_cart_alt') {
    $form = $data['uc_ajax_cart_alt'];
    $items = 0;
    foreach (element_children($form['items']) as $key) {
      if (isset($form['items'][$key]['qty'])) {
        $items += $form['items'][$key]['qty']['#value'];
      }
      if (isset($form['items'][$key]['total'])) {
        $total_element = $form['items'][$key];
      }
    }

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'items':
          $replacements[$original] = check_plain($items);
          break;
        case 'total':
          $replacements[$original] = drupal_render($total_element);
          break;
        case 'total-number':
          $replacements[$original] = check_plain($total_element['total']['#price']);
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_uc_checkout_complete().
 */
function uc_ajax_cart_alt_uc_checkout_complete($order, $account) {
  $form = $form_state = array();
  uc_ajax_cart_alt_clear_cache_submit($form, $form_state);
}

/**
 * FAPI submit callback.
 */
function uc_ajax_cart_alt_clear_cache_submit($form, &$form_state) {
  // Clear our cache variable to refresh cart data
  $cid = 'uc_ajax_cart_alt_' . uc_cart_get_id();
  cache_clear_all($cid, 'cache');
}

/**
 * Menu form: AJAX Cart settings.
 */
function uc_ajax_cart_alt_settings($form, &$form_state) {
  $form = array();

  $form['uc_ajax_cart_link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable menu link'),
    '#description' => t('If enabled, a menu link can be updated with cart values.'),
    '#default_value' => variable_get('uc_ajax_cart_link', UC_AJAX_CART_ALT_DEFAULT_LINK),
    '#size' => 128,
  );

  $form['uc_ajax_cart_link_data'] = array(
    '#type' => 'fieldset',
    '#title' => t('Menu link'),
    '#states' => array(
      'visible' => array(
        ':input[name="uc_ajax_cart_link"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['uc_ajax_cart_link_data']['uc_ajax_cart_link_selector'] = array(
    '#type' => 'textfield',
    '#title' => t('Selector'),
    '#description' => t('The jQuery selector of links that will be updated. Defaults to menu item on both navigation and blocks. Custom themes might need some adjustments.'),
    '#default_value' => variable_get('uc_ajax_cart_link_selector', UC_AJAX_CART_ALT_DEFAULT_SELECTOR),
    '#size' => 128,
  );

  // To demo tokens
  $items = uc_cart_get_contents();
  if (!empty($items)) {
    $cart_form = drupal_get_form('uc_cart_view_form', $items);
    $replacement = variable_get('uc_ajax_cart_link_text', UC_AJAX_CART_ALT_DEFAULT_REPLACEMENT);
    $replacement = token_replace($replacement, array('uc_ajax_cart_alt' => $cart_form));
  }
  else {
    $replacement = t('Cart is empty, no replacement will be done');
  }
  $form['uc_ajax_cart_link_data']['uc_ajax_cart_link_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Replacement text'),
    '#description' => t('The text that will be used for the link. Supports tokens. If there are no items in the cart, no replacement is done. Current replacement: <b>!replacement.</b>', array('!replacement' => $replacement)),
    '#default_value' => variable_get('uc_ajax_cart_link_text', UC_AJAX_CART_ALT_DEFAULT_REPLACEMENT),
    '#size' => 128,
  );

  $form['uc_ajax_cart_link_data']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('uc_ajax_cart_alt'),
    '#global_types' => TRUE, // A boolean TRUE or FALSE whether to include 'global' context tokens like [current-user:*] or [site:*]. Defaults to TRUE.
    '#click_insert' => TRUE, // A boolean whether to include the 'Click this token to insert in into the the focused textfield' JavaScript functionality. Defaults to TRUE.
  );

  return system_settings_form($form);
}

/**
 * Commands for refreshing cart block and menu link, it happens on every
 * AJAX call, so we bundle it in a function
 */
function uc_ajax_cart_alt_commands_refresh() {
  global $user;

  // Check if we should also clear the session because of a possible clear of
  // the cart
  if ($user->uid) {
    $time = strtotime(variable_get('uc_cart_auth_duration', '1') . ' ' . variable_get('uc_cart_auth_unit', 'years') . ' ago');
  }
  else {
    $time = strtotime(variable_get('uc_cart_anon_duration', '4') . ' ' . variable_get('uc_cart_anon_unit', 'hours') . ' ago');
  }

  $cid = 'uc_ajax_cart_alt_' . uc_cart_get_id();
  $cache = cache_get($cid);

  if (!empty($cache) && time() <= $cache->expire) {
    $commands = $cache->data['commands'];
  }
  else {
    $items = uc_cart_get_contents();

    $commands = array();

    $selector = variable_get('uc_ajax_cart_link_selector', UC_AJAX_CART_ALT_DEFAULT_SELECTOR);

    // Refresh shopping cart link
    $link = variable_get('uc_ajax_cart_link', UC_AJAX_CART_ALT_DEFAULT_LINK);
    if ($link && !empty($items)) {
      $form = drupal_get_form('uc_cart_view_form', $items);
      $items_keys = element_children($form['items']);
      $total_key = end($items_keys);

      $text = variable_get('uc_ajax_cart_link_text', UC_AJAX_CART_ALT_DEFAULT_REPLACEMENT);
      $text = token_replace($text, array('uc_ajax_cart_alt' => $form));
      $command = ajax_command_html($selector, $text);
      $command['effect'] = 'fade';
      $commands[] = $command;
    }

    // Refresh block
    $block = _uc_ajax_cart_build_block('uc_cart', 'cart');
    $command = ajax_command_replace('.block-uc-ajax-cart-alt', drupal_render($block));
    $commands[] = $command;

    // Custom overridable AJAX command
    $commands[] = array(
      'command' => 'ucAjaxCartAltRefresh',
      'selector' => $selector,
      'empty' => empty($items),
    );

    $data = array();
    $data['commands'] = $commands;

    cache_set($cid, $data, 'cache', 2*time() - $time);
  }

  return $commands;
}

/**
 * AJAX Menu callback.
 *
 * It runs when the ubercart cart view is either updated or an item removed.
 */
function uc_ajax_cart_alt_ajax_refresh($js = null) {
  if ($js != 'ajax') {
    // We don't support degrading this from js because we're not
    // using the server to remember the state of the table.
    return MENU_ACCESS_DENIED;
  }

  $commands = uc_ajax_cart_alt_commands_refresh();
  $output = ajax_render($commands);

  print $output;
}

/**
 * AJAX Form callback.
 *
 * It runs when the ubercart cart view is either updated or an item removed.
 */
function uc_ajax_cart_alt_ajax_add_to_cart($form, $form_state) {
  global $user;

  // Because the refresh logic is based on the output from the uc_cart_view_form
  // for a number of reasons, and because that form itself also has forms
  // inside, it's possible that the same form that was submittied via AJAX is
  // rendred, causing the ajax call to redirect and giving user a nasty error.
  // After hours of debugging, the only way I found to prevent that, was to
  // clear the POST variables so that the form is not considered submitted by
  // the internal drupal FAPI.
  //
  // It is a hack, but I think a safe one, since all of the submit logic has
  // been executed by the Drupal AJAX framwork already and there shouldn't be a
  // need for POST data moving forward.
  $_POST = array();

  // This is another hack, another batch of long debug hours and still didn't
  // really get the difference, but when using secure pages and mixed HTTP/HTTPS
  // sessions as normal with ubercart, this module somehow can lead to the mixed
  // sessions not be updated immediate, a.k.a. immediately trying to purchase
  // an item after a successfull order.
  // With this, I am making sure that something in the session changed so that
  // its being written to the db, and this makes both secure and not secure
  // session match
  $_SESSION['uc_ajax_cart_alt_last_added'] = time();

  $commands = array();

  // Store the messages for later use, but do not clear them so they
  // can be used in theme('status_messages') below
  $messages = drupal_get_messages(NULL, FALSE);

  if (isset($messages['error'])) {
    $commands[] = array(
      'command' => 'ucAjaxCartAltAddItemError',
      'messages' => $messages,
      'status_messages' => theme('status_messages'),
    );
  }
  else {
    $commands[] = array(
      'command' => 'ucAjaxCartAltAddItemSuccess',
      'messages' => $messages,
      'status_messages' => theme('status_messages'),
    );
  }

  $commands = array_merge($commands, uc_ajax_cart_alt_commands_refresh());
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * AJAX Form callback.
 *
 * It runs when the ubercart cart view is either updated or an item removed.
 */
function uc_ajax_cart_alt_ajax_cart_view($form, $form_state) {
  // Clear $_POST so that drupal_get_form down and deep inside works.
  // @see uc_ajax_cart_alt_ajax_add_to_cart() for a deeper explanation
  $_POST = array();


  // If it was submitted fine
  $items = array();
  if (!empty($form_state['executed'])) {
    // Because we want to keep the cached AJAX table in sync with what's
    // displayed to the user, we do this little hacky code to pull the new
    // cache information of the new form and store it in the cache of the old form
    // imitiating what would have happen on a first run.
    // If you know a better way to do it, I am all ears :)
    $items = uc_cart_get_contents();

    if (count($items)) {
      $new_form = drupal_get_form('uc_cart_view_form', $items);

      $form_build_id = $form['form_build_id']['#id'];

      $cached_form_state = array();
      $cached_form = form_get_cache($form_build_id, $cached_form_state);

      $new_form_build_id = $new_form['form_build_id']['#id'];
      $new_cached_form_state = array();
      $new_cached_form = form_get_cache($new_form_build_id, $new_cached_form_state);

      $cached_form['items'] = $new_cached_form['items'];
      form_set_cache($form_build_id, $cached_form, $cached_form_state);

      $items = $new_form['items'];
    }
  } else {
    $items = $form['items'];
  }

  if (count($items)) {
    // Replace table
    $commands[] = ajax_command_replace(NULL, drupal_render($items));

    // Prepend status messages
    $commands[] = ajax_command_prepend(NULL, theme('status_messages'));
  }
  else {
    // Display the empty cart page if there are no items in the cart.
    $empty_element = array('#theme' => 'uc_empty_cart');
    $commands[] = ajax_command_replace('#cart-form-pane', drupal_render($empty_element));

    // Prepend status messages
    $commands[] = ajax_command_prepend('.uc-cart-empty', theme('status_messages'));
  }

  // Custom overridable AJAX command
  $commands[] = array(
    'command' => 'ucAjaxCartAltViewForm',
  );

  // Refresh commands
  $commands = array_merge($commands, uc_ajax_cart_alt_commands_refresh());

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements hook_preprocess_block().
 *
 * It adds a class so that the AJAX commands can use it.
 */
function uc_ajax_cart_alt_preprocess_block(&$variables) {
  if (isset($variables['block']->uc_ajax_cart_alt)) {
    $variables['classes_array'][] = 'block-uc-ajax-cart-alt';
  }
}

/**
 * Theme function that outputs the content of the placeholder block HTML.
 *
 * A wrapper div needed is added by the module and can't be themed.
 */
function theme_uc_ajax_cart_alt_block_placeholder() {
  return '<div class="ajax-progress ajax-progress-throbber"><div class="throbber">&nbsp;</div><div class="message">' . t('Please wait...') . '</div></div>';
}
