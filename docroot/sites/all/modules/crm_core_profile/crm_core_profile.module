<?php

/**
 * @file
 * Main file of CRM Core Profile module.
 */

/**
 * Implements hook_menu().
 */
function crm_core_profile_menu() {
  $items = array();

  $items['admin/structure/crm-core/profile'] = array(
    'title' => 'CRM Core Profile',
    'description' => 'CRM Core Profile main configuration page',
    'page callback' => 'crm_core_profile_main',
    'access arguments' => array('create new crm core profile forms'),
    'file' => 'crm_core_profile.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/structure/crm-core/profile/new'] = array(
    'title' => 'Add new profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_profile_new_form', new stdClass()),
    'access arguments' => array('create new crm core profile forms'),
    'file' => 'crm_core_profile.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/structure/crm-core/profile/import'] = array(
    'title' => 'Import profile',
    'description' => 'Description',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_profile_import_form'),
    'access arguments' => array('create new crm core profile forms'),
    'file' => 'crm_core_profile.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/structure/crm-core/profile/manage/%crm_core_profile'] = array(
    'title' => 'Edit Profile Form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_profile_new_form', 5),
    'access arguments' => array('create new crm core profile forms'),
    'file' => 'crm_core_profile.admin.inc',
    'type' => MENU_CALLBACK,
    'weight' => -10,
  );
  $items['admin/structure/crm-core/profile/manage/%crm_core_profile/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/structure/crm-core/profile/manage/%crm_core_profile/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_profile_settings_form', 5),
    'access arguments' => array('create new crm core profile forms'),
    'file' => 'crm_core_profile.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -9,
  );

  $items['admin/structure/crm-core/profile/manage/%crm_core_profile/clone'] = array(
    'title' => 'Clone',
    'description' => 'Create a duplicate of this profile.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_profile_new_form', 5, TRUE),
    'access arguments' => array('create new crm core profile forms'),
    'file' => 'crm_core_profile.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/structure/crm-core/profile/manage/%crm_core_profile/export'] = array(
    'title' => 'Export',
    'description' => 'Export this profile.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_profile_export_form', 5),
    'access arguments' => array('create new crm core profile forms'),
    'file' => 'crm_core_profile.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/structure/crm-core/profile/manage/%crm_core_profile/delete'] = array(
    'title' => 'Delete Profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_profile_delete_form', 5),
    'access arguments' => array('create new crm core profile forms'),
    'file' => 'crm_core_profile.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/structure/crm-core/profile/manage/%crm_core_profile/status'] = array(
    'title' => 'Toggle profile status',
    'page callback' => 'crm_core_profile_status_toggle_callback',
    'page arguments' => array(5),
    'access arguments' => array('create new crm core profile forms'),
    'file' => 'crm_core_profile.admin.inc',
    'type' => MENU_CALLBACK,
  );

  // Register our profile path's.
  foreach (crm_core_profile_load_all() as $profile) {
    // Profile is enabled.
    if ($profile->status) {
      $prepopulate = isset($profile->entities['crm_core_contact']['prepopulate']) ? $profile->entities['crm_core_contact']['prepopulate'] : FALSE;
      $prepopulate_type = isset($profile->entities['crm_core_contact']['prepopulate_type']) ? $profile->entities['crm_core_contact']['prepopulate_type'] : '';
      $page_title = empty($profile->page_title) ? $profile->label : $profile->page_title;
      // Prepopulation is enabled.
      if ($prepopulate && ($prepopulate_type == 'token_user' || $prepopulate_type == 'token_contact')) {
        $token_position = crm_core_profile_token_handler($profile);
        $items[$profile->page_path] = array(
          'title' => $page_title,
          'page callback' => 'drupal_get_form',
          'page arguments' => array('crm_core_profile_entry_form_' . $profile->name, $profile, $token_position),
          'access callback' => 'crm_core_profile_access',
          'access arguments' => array($profile, 'access crm_core_profile forms'),
          'type' => MENU_CALLBACK,
        );
      }
      elseif ($profile->page && !empty($profile->page_path)) {
        $items[$profile->page_path] = array(
          'title' => $page_title,
          'page callback' => 'drupal_get_form',
          'page arguments' => array('crm_core_profile_entry_form_' . $profile->name, $profile),
          'access callback' => 'crm_core_profile_access',
          'access arguments' => array($profile, 'access crm_core_profile forms'),
          'type' => MENU_CALLBACK,
        );
      }
    }
  }

  return $items;
}

/**
 * Identifies tokens in the URL and passed back their position.
 *
 * @param object $profile
 *   CRM Core Profile.
 *
 * @return int
 *   Position of the token.
 */
function crm_core_profile_token_handler($profile) {

  // Find the position of the token used in the URL.
  $token_position = -1;
  $path_arr = explode('/', $profile->page_path);

  foreach ($path_arr as $i => $part) {
    if ($part == '%user' || $part == '%crm_core_contact') {
      $token_position = $i;
    }
  }

  return $token_position;
}

/**
 * Implements hook_permission().
 */
function crm_core_profile_permission() {
  return array(
    'administer crm core profile forms' => array(
      'title' => t('Administer CRM Core profile forms'),
      'description' => t('Administer CRM Core profile forms'),
    ),
    'create new crm core profile forms' => array(
      'title' => t('Create new CRM Core profile forms'),
      'description' => t('Ability to create new CRM Core profile forms'),
    ),
    'access crm_core_profile forms' => array(
      'title' => t('Access CRM Core profile forms'),
      'description' => t('Allow the access to the profile form'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function crm_core_profile_theme() {
  return array(
    'crm_core_profile_entry_form' => array(
      'render element' => 'form',
    ),
    'crm_core_profile_new_form' => array(
      'render element' => 'form',
      'file' => 'crm_core_profile.admin.inc',
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function crm_core_profile_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'crm_core_profile') . '/includes/views/',
  );
}

/**
 * Implements hook_block_info().
 */
function crm_core_profile_block_info() {
  $blocks = array();

  // Load all the profiles.
  $conditions = array(
    array(
      'field' => 'status',
      'value' => 1,
    ),
    array(
      'field' => 'block',
      'value' => 1,
    ),
  );

  $profiles = crm_core_profile_load_all($conditions);
  foreach ($profiles as $profile) {
    // Block delta is limited to 32 characters.
    $delta = 'ccp_' . $profile->name;
    $blocks[$delta] = array(
      'info' => t('CRM Core Profile: @profile', array('@profile' => $profile->label)),
      'cache' => DRUPAL_NO_CACHE,
    );
  }

  // Displays a CRM Core Profile form that has previously been hidden.
  $blocks['crm_core_profile_form_viewer'] = array(
    'info' => t('CRM Core Profile: Display Hidden Form'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function crm_core_profile_block_view($delta) {

  $block = array(
    'subject' => '',
    'content' => '',
  );

  // Data that gets passed into a profile from a node.
  $crm_core_profile_data = array();

  if ($delta == 'crm_core_profile_form_viewer') {

    // This gets a copy of the current node being viewed.
    $node = menu_get_object();
    // Use this block to display a hidden crm core profile form.
    if (isset($node->nid) && arg(2) !== 'edit') {

      // Check if there is a profile attached to the node.
      $config = crm_core_profile_load_node_config($node->nid);

      // If so, let's display it.
      if (!empty($config) && $config->use_profile && empty($config->display_profile)) {

        // Check the node to see if there is any data being passed into
        // crm core profile if so, grab it and put it in a variable that will
        // be passed to the profile function.
        if (isset($node->crm_core_profile_data)) {
          $crm_core_profile_data = $node->crm_core_profile_data;
        }

        $profile = crm_core_profile_load($config->profile_name);
      }
    }
  }
  else {
    // Extract the profile machine name from the block delta
    // theming is still needed.
    $name = substr($delta, 4);
    $profile = crm_core_profile_load($name);
  }

  if (!empty($profile) && crm_core_profile_access($profile)) {
    if (isset($config) && !empty($config->inline_title)) {
      $block_title = $config->inline_title;
    }
    elseif (!empty($profile->block) && !empty($profile->block_title)) {
      $block_title = $profile->block_title;
    }
    else {
      $block_title = $profile->label;
    }
    $block['subject'] = check_plain($block_title);
    $block['content'] = crm_core_profile_generate_profile($profile, $crm_core_profile_data);
  }

  return $block;
}

/**
 * Gets a CRM Core Profile.
 *
 * Use this function any time you need to call a CRM Core Profile by machine
 * name.
 *
 * @param string $profile_name
 *   The machine name for the profile being called.
 *
 * @return array
 *   The profile to be rendered, or false.
 */
function crm_core_profile_get_profile($profile_name) {
  $profile = crm_core_profile_load($profile_name);

  return crm_core_profile_generate_profile($profile);
}

/**
 * Implements crm_core_profile_register_entity().
 */
function crm_core_profile_crm_core_profile_register_entity() {
  $handlers = array(
    'crm_core_contact' => 'CRMCoreContactHandler',
  );

  if (module_exists('crm_core_activity')) {
    $handlers['crm_core_activity'] = 'CRMCoreActivityHandler';
  }

  return $handlers;
}

/**
 * Generates the form for a profile.
 *
 * Call this function when you have a profile loaded and need to display it.
 *
 * @param object $profile
 *   A CRM Core Profile array.
 *
 * @param array $data
 *   An associative array of information to be passed into the profile.
 *
 * @return array
 *   A form array for rendering the profile.
 */
function crm_core_profile_generate_profile($profile, $data = array()) {

  $return = NULL;
  // Check if the profile is enabled and user have access to it.
  if ($profile->status != 1 && !crm_core_profile_access($profile)) {
    $return = FALSE;
  }
  else {
    // Lets see if some one wants to override access.
    if (isset($data['access_override']) && isset($data['access_override']['access'])
      && $data['access_override']['access'] === FALSE
    ) {
      // Access restricted, returning empty form.
      $return = array(
        '#type' => 'item',
        '#markup' => '',
      );
      // Do we have what to say to user?
      if (!empty($data['access_override']['message'])) {
        // Assume that message is already formatted and properly escaped.
        if (!empty($data['access_override']['html'])) {
          $return['#markup'] = $data['access_override']['message'];
        }
        else {
          $return['#markup'] = check_plain($data['access_override']['message']);
        }
      }
    }
    else {
      $return = drupal_get_form('crm_core_profile_entry_form_' . $profile->name, $profile, NULL, $data);
    }
  }

  return $return;
}

/**
 * Saves a profile form entry.
 *
 * @param object $profile
 *   A CRM Core Profile to save to the database.
 */
function crm_core_profile_save($profile) {
  $stored_profile = crm_core_profile_load($profile->name);

  drupal_alter('crm_core_profile_pre_save', $profile);

  if (!empty($stored_profile) && empty($stored_profile->in_code_only)) {
    drupal_write_record('crm_core_profile', $profile, array('name'));
  }
  else {
    drupal_write_record('crm_core_profile', $profile);
  }
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * Loads a profile form entry.
 *
 * @param string $machine_name
 *   Machine readable name of profile.
 *
 * @return object|false
 *   CRM Core Profile or FALSE.
 */
function crm_core_profile_load($machine_name) {
  $profiles = &drupal_static(__FUNCTION__);
  if (empty($profiles[$machine_name])) {
    ctools_include('export');
    $profiles[$machine_name] = ctools_export_crud_load('crm_core_profile', $machine_name);
  }

  return isset($profiles[$machine_name]) ? $profiles[$machine_name] : FALSE;
}

/**
 * Loads all profiles from the system.
 *
 * @param array $conditions
 *   An array of conditions to apply to the query for pulling profiles.
 *
 * @return array
 *   Array of loaded profiles.
 */
function crm_core_profile_load_all($conditions = array()) {
  ctools_include('export');
  if (empty($conditions)) {
    $profiles = ctools_export_crud_load_all('crm_core_profile');
  }
  else {
    $profiles = ctools_export_load_object('crm_core_profile', 'conditions', $conditions);
  }

  return $profiles;
}

/**
 * Delete a profile form.
 *
 * @param string|object $profile
 *   Machine name for the profile being deleted or profile itself.
 */
function crm_core_profile_delete($profile) {

  if (is_string($profile)) {
    $profile = crm_core_profile_load($profile);
  }

  // Letting other modules know that we are deleting the profile.
  module_invoke_all('crm_core_profile_delete', $profile);

  db_delete('crm_core_profile')
    ->condition('name', $profile->name)
    ->execute();
}

/**
 * Toggle profile status.
 *
 * @param object $profile
 *   Profile.
 */
function crm_core_profile_status_toggle($profile) {
  $profile->status = $profile->status ? 0 : 1;
  crm_core_profile_save($profile);
}

/**
 * Menu callback for profile status toggling.
 */
function crm_core_profile_status_toggle_callback($profile) {
  crm_core_profile_status_toggle($profile);
  drupal_goto('admin/structure/crm-core/profile');
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function crm_core_profile_form_node_type_form_alter(&$form, $form_state) {

  $type = $form['#node_type'];

  $form['crm_core_profile'] = array(
    '#title' => t('CRM Core Profile'),
    '#type' => 'fieldset',
    '#group' => 'additional_settings',
    '#attributes' => array(
      'class' => array('crm-core-profile-node-settings-form'),
    ),
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'crm_core_profile') . '/js/crm_core_profile-node-type-form.js'),
    ),
  );

  $form['crm_core_profile']['crm_core_profile_node_type_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use CRM Core Profile for this node type?'),
    '#default_value' => variable_get('crm_core_profile_node_type_enabled_' . $type->type, FALSE),
  );

  $form['crm_core_profile']['crm_core_profile_node_type_label'] = array(
    '#type' => 'textfield',
    '#title' => t('CRM Core Profile vertical tab label'),
    '#default_value' => variable_get('crm_core_profile_node_type_label_' . $type->type, ''),
    '#states' => array(
      'visible' => array(
        ':input[name="crm_core_profile_node_type_enabled"]' => array('checked' => TRUE),
      ),
    ),
  );

  $profiles = crm_core_profile_load_all();
  $options = array();
  foreach ($profiles as $profile) {
    if (crm_core_profile_access($profile)) {
      $options[$profile->name] = $profile->label;
    }
  }
  $form['crm_core_profile']['crm_core_profile_node_type_profile'] = array(
    '#type' => 'select',
    '#title' => t('Select default profile for this node type.'),
    '#default_value' => variable_get('crm_core_profile_node_type_profile_' . $type->type, FALSE),
    '#empty_option' => t('--Please Select--'),
    '#empty_value' => '',
    '#options' => $options,
    '#states' => array(
      'visible' => array(
        ':input[name="crm_core_profile_node_type_enabled"]' => array('checked' => TRUE),
      ),
    ),
  );
}

/**
 * Implements hook_node_type_delete().
 */
function crm_core_profile_node_type_delete($info) {
  $settings = array(
    'crm_core_profile_node_type_enabled',
    'crm_core_profile_node_type_profile',
  );
  foreach ($settings as $setting) {
    variable_del($setting . '_' . $info->type);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function crm_core_profile_form_node_form_alter(&$form, $form_state) {

  $node = $form['#node'];

  if (variable_get('crm_core_profile_node_type_enabled_' . $node->type, FALSE)) {
    $label = variable_get('crm_core_profile_node_type_label_' . $node->type, '');

    $form['crm_core_profile'] = array(
      '#title' => t(empty($label) ? 'CRM Core Profile' : $label),
      '#type' => 'fieldset',
      '#group' => 'additional_settings',
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'crm_core_profile') . '/js/crm_core_profile-node-form.js'),
      ),
    );

    $node_config = isset($node->nid) ? crm_core_profile_load_node_config($node->nid) : FALSE;
    $form['crm_core_profile']['crm_core_profile_node_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use CRM Core Profile for this node?'),
      '#default_value' => empty($node_config) ? TRUE : $node_config->use_profile,
    );

    $states = array(
      'visible' => array(
        ':input[name="crm_core_profile_node_enabled"]' => array('checked' => TRUE),
      ),
    );

    $profiles = crm_core_profile_load_all();
    $options = array();
    foreach ($profiles as $profile) {
      // Profile enabled and user have access to it.
      if (!empty($profile->status) && crm_core_profile_access($profile)) {
        $options[$profile->name] = $profile->label;
      }
    }
    // Get default profile for this node type.
    $default = variable_get('crm_core_profile_node_type_profile_' . $node->type, '');
    $form['crm_core_profile']['crm_core_profile_node_profile'] = array(
      '#type' => 'select',
      '#title' => t('Select profile for this node.'),
      '#default_value' => empty($node_config) ? $default : $node_config->profile_name,
      '#empty_option' => t('--Please Select--'),
      '#empty_value' => '',
      '#options' => $options,
      '#states' => $states,
    );

    $inline_description = 'Checking this box will display the selected profile'
      . ' automatically whenever this page is viewed. Uncheck this box if you'
      . ' plan to display the form another way.';
    $form['crm_core_profile']['crm_core_profile_node_inline'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display the form inline with other content?'),
      '#default_value' => empty($node_config) ? TRUE : $node_config->display_profile,
      '#description' => t($inline_description),
      '#states' => $states,
    );

    $title_description = 'Please enter a title for this form when it appears'
      . ' inline with other content. Leave this field blank for no title.';
    $form['crm_core_profile']['crm_core_profile_inline_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Form label'),
      '#default_value' => empty($node_config) ? '' : $node_config->inline_title,
      '#description' => t($title_description),
      '#states' => $states,
    );
  }
}

/**
 * Implements hook_node_validate().
 */
function crm_core_profile_node_validate($node, $form, &$form_state) {
  if (!empty($node->crm_core_profile_node_enabled) && empty($node->crm_core_profile_node_profile)) {
    $message = 'You must select CRM Core Profile or uncheck "Use CRM Core '
      . 'Profile for this node? " checkbox.';
    form_set_error('crm_core_profile_node_profile', t($message));
  }
}

/**
 * Implements hook_node_insert().
 */
function crm_core_profile_node_insert($node) {
  if (isset($node->crm_core_profile_node_enabled)) {
    $config = new stdClass();
    $config->nid = $node->nid;
    $config->use_profile = $node->crm_core_profile_node_enabled;
    $config->profile_name = $node->crm_core_profile_node_profile;
    $config->display_profile = $node->crm_core_profile_node_inline;
    $config->inline_title = $node->crm_core_profile_inline_title;
    crm_core_profile_node_config_save($config);
  }
  elseif (isset($node->crm_core_profile_node_config)) {
    $config = $node->crm_core_profile_node_config;
    $uuid = $config['nid'];
    $nids = entity_get_id_by_uuid('node', array($uuid));
    if (isset($nids[$uuid])) {
      $config['nid'] = $nids[$uuid];
      crm_core_profile_node_config_save($config);
    }
  }
}

/**
 * Implements hook_node_update().
 */
function crm_core_profile_node_update($node) {
  crm_core_profile_node_insert($node);
}

/**
 * Implements hook_node_type_delete().
 */
function crm_core_profile_node_delete($node) {
  db_delete('crm_core_profile_nodes')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_view().
 */
function crm_core_profile_node_view($node, $view_mode) {
  $config = crm_core_profile_load_node_config($node->nid);

  $node_data = array();

  // Checks to see if data is being passed in from the node, and
  // sends it to the profile generation function if so.
  if (isset($node->crm_core_profile_data)) {
    $node_data = $node->crm_core_profile_data;
  }

  if (!empty($config) && $config->use_profile && !empty($config->display_profile)) {
    $profile = crm_core_profile_load($config->profile_name);
    if ($profile && crm_core_profile_access($profile) && $view_mode == 'full' && empty($node->in_preview)) {
      $node->content['crm_core_profile'] = crm_core_profile_generate_profile($profile, $node_data);
      $node->content['crm_core_profile']['#weight'] = 99;
      if (!empty($config->inline_title)) {
        if (empty($node->content['crm_core_profile']['#prefix'])) {
          $node->content['crm_core_profile']['#prefix'] = '<h2 class="crm-core-profile-title">' . check_plain($config->inline_title) . '</h2>';
        }
        else {
          $node->content['crm_core_profile']['#prefix'] .= '<h2 class="crm-core-profile-title">' . check_plain($config->inline_title) . '</h2>';
        }
      }
    }
  }
}

/**
 * Role level per profile access callback.
 *
 * @param object $profile
 *   CRM Core Profile.
 *
 * @return bool
 *   Permit access?
 */
function crm_core_profile_access($profile) {

  global $user;

  // Role level access, this comes before everything else.
  if (!empty($profile->roles)) {
    $roles = array_intersect($user->roles, $profile->roles);
    if (empty($roles)) {
      return FALSE;
    }
  }

  // User level access, this comes before permissions.
  if ($profile->access_control !== 'default') {

    // Figure out if we are dealing with a contact or a user.
    $path = explode('/', $profile->page_path);
    $user_check = array_search('%user', $path);
    $contact_check = array_search('%crm_core_contact', $path);
    $perm_check = user_access($profile->access_control_perm, $user);
    $true_user = $user;
    $has_permission = TRUE;

    // If we are checking users, do it here only run this check if the form
    // is prepopulated through a token.
    if ($user_check !== FALSE || $contact_check !== FALSE) {

      // Gets the uid from a contact requires crm core user sync, other methods
      // will fail.
      if ($contact_check !== FALSE && module_exists('crm_core_user_sync')) {
        $cuser = crm_core_user_sync_get_user_from_contact_id($contact_check);
        if ($cuser->uid !== $user->uid) {
          $true_user = $cuser;
        }
      }

      // Now that we know the true user id, let's do some checking if this
      // user does not have access to this profile, hide the form.
      if ($true_user->uid !== arg($user_check)) {
        $has_permission = FALSE;
      }

      // If we are also checking for permissions, check that here if the
      // current user has the right permission, let them see the form.
      if ($profile->access_control === 'selected_user_or_contact_and_admins') {
        $has_permission = $perm_check;
      }

      // If nothing has worked out, deny access.
      if ($has_permission === FALSE) {
        return FALSE;
      }
    }
  }

  // Permission level access control only run this when there are no user
  // level permissions.
  if ($profile->access_control_perm !== 'none' && $profile->access_control === 'default') {
    // Do the permission check.
    return user_access($profile->access_control_perm, $user->uid);
  }

  // If there are no roles, permissions or user level access restrictions,
  // let everyone see this form.
  return TRUE;
}

/**
 * Executes a specific field handler method.
 *
 * @param string $handler_method
 *   Handler method name.
 * @param string $entity_type
 *   Entity type.
 * @param object $entity
 *   Entity itself.
 * @param array $fields_config
 *   Fields configuration array.
 * @param array $form
 *   Form structure.
 * @param array $form_state
 *   Form state.
 */
function _crm_core_profile_attach_handler($handler_method, $entity_type, $entity, $fields_config, &$form, &$form_state) {

  // There are entities without bundles, in that case bundle = type.
  $entity_bundle = $entity_type;
  if (isset($entity->bundle)) {
    $entity_bundle = $entity->bundle;
  }

  // Getting all the fields for the entity type - this can be an activity or a
  // contact.
  $fields = field_info_instances($entity_type, $entity_bundle);

  // Fields we are iterating here are all non-subfields (such as contact_name).
  foreach (array_keys($fields) as $field_name) {

    if (!empty($fields[$field_name])) {

      // Get field handler.
      $field_handler = _crm_core_profile_get_field_handler($field_name);

      // Call the appropriate handler for the field type.
      $obj = new $field_handler();
      $obj->{$handler_method}($field_name, $fields_config, $form, $form_state);
    }
  }
}

/**
 * Returns the field handler for the given field name.
 *
 * When a field is rendered in CRM Core Profile, it will usually be rendered
 * using the default field rendering function present in Drupal. The exception
 * to this is with complex and compound fields, where someone could
 * be looking to only capture information in part of that field. For example:
 * using a name field, someone could be looking to only capture a first name and
 * a last name.
 *
 * This function checks for the presence of field handlers, which provide
 * special rules for how a field should be rendered.
 *
 * @param string $field_name
 *   The name for the current field
 *
 * @return string
 *   Field handler name.
 */
function _crm_core_profile_get_field_handler($field_name) {

  // This returns some additional information about the field.
  $field_info = field_info_field($field_name);

  // Field handler is used to select the type of rendering we are going to do
  // with the form.
  $field_handler = $field_info['type'] . 'ProfileFieldHandler';

  if (!class_exists($field_handler)) {

    // This sets the field handler to use for generating the form fields within
    // the profile. If there is not a specific field handler defined for the
    // field type, use the DefaultProfileFieldHandler instead.
    $field_handler = 'DefaultProfileFieldHandler';
  }

  return $field_handler;
}

/**
 * Helper to generate key string for storing field config.
 *
 * @param array $field_config
 *   Field configuration
 *
 * @return string
 *   Key used to store field config in profile.
 */
function _crm_core_profile_field_separator($field_config) {

  $field_separator = empty($field_config['field_item']) ? implode('_', array(
    $field_config['entity_type'],
    $field_config['bundle'],
    $field_config['field_name'],
  )) : implode('_', array(
    $field_config['entity_type'],
    $field_config['bundle'],
    $field_config['field_name'],
    $field_config['field_item'],
  ));

  return $field_separator;
}

/**
 * Helper to set field weight on profile edit form.
 */
function _crm_core_profile_default_weight() {

  // Doing $weight static withing single field.
  $weight =& drupal_static('crm_core_profile_edit_form_fields_weight', DEFAULT_WEIGHT_DELTA + 1);
  // Decreasing default weight, so next field appears upper.
  if ($weight >= -DEFAULT_WEIGHT_DELTA) {
    $weight--;
  }

  return $weight;
}

/**
 * Load node config.
 *
 * @param int $nid
 *   Node ID.
 *
 * @return object
 *   Returns nodes configuration, if saved, FALSE otherwise.
 */
function crm_core_profile_load_node_config($nid) {
  $cache =& drupal_static(__FUNCTION__, array());
  if (empty($cache[$nid])) {
    $cache[$nid] = db_select('crm_core_profile_nodes', 'c')
      ->condition('nid', $nid)
      ->fields('c')
      ->execute()->fetchObject();
  }

  return empty($cache[$nid]) ? FALSE : $cache[$nid];
}

/**
 * Displays the page view of a CRM Core Profile.
 *
 * The main form that will generate the form to collect information.
 * This form will be loaded in a default form path or a block.
 *
 * @param array $form
 *   Form definition array.
 * @param array $form_state
 *   Form state array.
 * @param object $profile
 *   The CRM Core Profile
 * @param object $preload
 *   A user  or a contact for use in prepopulating the form.
 * @param array $data
 *   An associative array of data to be passed into the form. Used in working
 * with handlers.
 *
 * @return array
 *   Form definition array.
 *
 * @see crm_core_profile_entry_form_validate
 * @see crm_core_profile_entry_form_after_build
 * @see crm_core_profile_entry_form_submit
 */
function crm_core_profile_entry_form($form, &$form_state, $profile, $preload = NULL, $data = array()) {

  $form_state['profile'] = $profile;

  // Store any data passed into the form generation function here.
  drupal_alter('crm_core_profile_data', $profile, $data);
  $form_state['crm_core_profile_data'] = $data;

  $entity_handlers = module_invoke_all('crm_core_profile_register_entity');

  foreach ($entity_handlers as $entity_handler_name) {
    $entity_handler = new $entity_handler_name();
    $entity_info = $entity_handler->entityInfo();
    $entity_type = $entity_info['entity'];
    if (isset($profile->entities[$entity_type])) {
      $entity_config = $profile->entities[$entity_type];
      if (!empty($entity_config['status'])) {
        $entity_handler->execute($profile, $entity_type, $preload, $form, $form_state);
      }
    }
  }

  $form['#after_build'][] = 'crm_core_profile_entry_form_after_build';

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  // Returns the CRM Core Profile form.
  return $form;
}

/**
 * After_build method for CRM Core Profile forms.
 *
 * Ensures all fields render properly using field handlers.
 *
 * @param array $form
 *   Form definition array.
 * @param array $form_state
 *   Form state array.
 *
 * * @return array
 *   Form definition array.
 */
function crm_core_profile_entry_form_after_build($form, &$form_state) {

  // Load profile.
  $profile = $form_state['profile'];

  // Setting the page redirect.
  if ($profile->page_redirect !== '') {
    $form_state['redirect'] = $profile->page_redirect;
  }

  // Retrieve entity handlers.
  $entity_handlers = module_invoke_all('crm_core_profile_register_entity');

  foreach ($entity_handlers as $entity_handler_name) {
    $entity_handler = new $entity_handler_name();
    $entity_info = $entity_handler->entityInfo();

    $entity_type = $entity_info['entity'];
    if (isset($profile->entities[$entity_type])) {

      $entity_config = $profile->entities[$entity_type];

      if ($entity_config['status'] === 1 && isset($form_state[$entity_type])) {
        $entity = $form_state[$entity_type];
        _crm_core_profile_attach_handler('afterBuild', $entity_type, $entity, $profile->fields, $form, $form_state);
      }
    }
  }

  // Apply element weights from the profile fields settings.
  foreach ($profile->entities as $entity_name => $entity) {
    if (isset($entity['fields_container'])) {
      foreach ($entity['fields_container']['fields'] as $field_name) {
        if (array_key_exists($field_name, $form)) {
          $field_key = $entity_name . '_' . $entity['bundle'] . '_' . $field_name;
          $form[$field_name]['#weight'] = $profile->fields[$field_key]['weight'];
        }
      }
    }
  }

  return $form;
}

/**
 * Theme function for the crm_core_profile form.
 */
function theme_crm_core_profile_entry_form($variables) {
  $form = $variables['form'];
  $output = drupal_render_children($form);

  return $output;
}

/**
 * Validation callback.
 *
 * @param array $form
 *   Form definition array.
 * @param array $form_state
 *   Form state array.
 */
function crm_core_profile_entry_form_validate($form, &$form_state) {
  // Load profile.
  $profile = $form_state['profile'];

  $entity_handlers = module_invoke_all('crm_core_profile_register_entity');

  foreach ($entity_handlers as $entity_handler_name) {
    $entity_handler = new $entity_handler_name();
    $entity_info = $entity_handler->entityInfo();

    $entity_type = $entity_info['entity'];
    if (isset($profile->entities[$entity_type])) {
      $entity_config = $profile->entities[$entity_type];
      if ($entity_config['status'] && isset($form_state[$entity_type])) {
        $entity = $form_state[$entity_type];
        _crm_core_profile_attach_handler('validateField', $entity_type, $entity, $profile->fields, $form, $form_state);
        field_attach_form_validate($entity_type, $entity, $form, $form_state);
        $entity_handler->validateEntity($profile, $form, $form_state);
      }
    }
  }
}

/**
 * Submission callback.
 *
 * This function handles submissions from a CRM Core Profile. Depending on how
 * the profile is configured, CRM Core Profile can add a new contact or update
 * an existing one.
 *
 * An explanation of the logic at work here:
 *
 * 1) If a profile has prepopulation enabled, the profile already knows who the
 * contact is. It will simply update the contact.
 *
 * 2) If a profile has matching enabled, the profile does not know who the
 * contact is. It will attempt to locate a duplicate contact using the rules
 * from CRMCoreContactEntity->match. If duplicates are found, it will always
 * use the top match and update it. Otherwise, if no matches are returned, a
 * new contact will be created.
 *
 * 3) If prepopulation and matching are not enabled, profiles will always create
 * a new contact.
 *
 * 4) Matching and prepopulation are NOT mutually exclusive. The matching system
 * for contact is able to update contact information when it is submitted.
 * Therefore it needs to be able to process any contact matching rules that may
 * be in place.
 *
 * For example: A profile may be pre-populated with contact information. There
 * may be a matching system in place that checks whether or not there is a match
 * in an external database via web services, and it may need to update the
 * contact record. CRM Core Profile can still check for matches and allow the
 * contact to be updated.
 *
 * @param array $form
 *   Form definition array.
 * @param array $form_state
 *   Form state array.
 */
function crm_core_profile_entry_form_submit($form, &$form_state) {

  // Set the message for the profile, if there is one.
  if (isset($form_state['profile']->message) && $form_state['profile']->message != '') {
    drupal_set_message(check_plain($form_state['profile']->message));
  }

  $profile = $form_state['profile'];

  $entity_handlers = module_invoke_all('crm_core_profile_register_entity');

  // Context used for token processing.
  $context = array();

  foreach ($entity_handlers as $entity_handler_name) {
    $entity_handler = new $entity_handler_name();
    $entity_info = $entity_handler->entityInfo();

    $entity_type = $entity_info['entity'];
    if (isset($profile->entities[$entity_type])) {
      $entity_config = $profile->entities[$entity_type];
      if ($entity_config['status']) {
        $entity_handler->submitEntity($profile, $form, $form_state);
        if (isset($form_state[$entity_type])) {
          $info = entity_get_info($entity_type);
          $token_type = isset($info['token type']) ? $info['token type'] : $entity_type;
          $context[$token_type] = $form_state[$entity_type];
        }
      }
    }
  }
  drupal_alter('crm_core_profile_before_token_replace', $context);
  // Now set default values using tokens from available entities
  // but only for those fields that are disabled or hidden.
  foreach ($profile->fields as $key => $field_config) {
    if ((empty($field_config['status']) || !empty($field_config['hidden'])) &&
      !empty($field_config['default']) && isset($form_state[$field_config['entity_type']])) {
      $entity_type = $field_config['entity_type'];
      $field_name = $field_config['field_name'];
      $entity = $form_state[$entity_type];

      // Replace tokens in default value.
      if (is_array($field_config['default'])) {
        // Entity reference fields and some others use an array structure.
        // Tokens are not supported yet for these.
        $value = $field_config['default'];
      }
      else {
        $value = token_replace(filter_xss_admin($field_config['default']), $context, array(
          // Remove tokens that could not be found.
          'clear' => TRUE,
          // Sanitizing prevent us from storing correct values.
          'sanitize' => FALSE,
          // Use unformatted token replacements.
          // @ todo: This will work if patch from #2082407 will be accepted.
          // Until then, decimals greater then 1000 will not be stored in
          // decimal fields(because returned as 1,000.00 which assumed string.).
          'format' => FALSE,
        ));
      }

      try {
        // Use the power of entity metadata wrappers to set our value.
        $entity_wrapper = entity_metadata_wrapper($entity_type, $entity);
        $entity_wrapper->{$field_name}->set($value);
      }
      catch (Exception $e) {
        // We don't want any exceptions here.
      }
    }
  }

  drupal_alter('crm_core_profile_pre_entity_save', $profile, $form, $form_state);

  // Now save the entities.
  foreach ($entity_handlers as $entity_handler_name) {
    $entity_handler = new $entity_handler_name();
    $entity_info = $entity_handler->entityInfo();

    $entity_type = $entity_info['entity'];
    if (isset($profile->entities[$entity_type])) {
      $entity_config = $profile->entities[$entity_type];
      if ($entity_config['status']) {
        $entity_handler->saveEntity($profile, $form, $form_state);
      }
    }
  }

  drupal_alter('crm_core_profile_post_entity_save', $profile, $form, $form_state);
}

/**
 * Subfields helper.
 *
 * Checks a field to see if it is compound. If it is, this returns a list of all
 * fields used in the field.
 *
 * @param string $field_name
 *   The name of the field.
 *
 * @return array
 *   A list of the names of all subfields associated with the field.
 */
function _crm_core_profile_subfields($field_name) {
  $sub_fields = array();
  $field_info = field_info_field($field_name);

  if (count($field_info['columns']) == 1) {
    $keys = array_keys($field_info['columns']);
    $tmp = reset($keys);

    return array($tmp => $field_name);
  }

  foreach (array_keys($field_info['columns']) as $column) {
    $sub_fields[$column] = $field_name . '_' . $column;
  }

  return $sub_fields;
}

/**
 * Checks for duplicate contact records.
 *
 * This function is called by crm_core_profile_entry_form_submit in the process
 * of saving a contact. It is only called when there is some form of contact
 * matching at work. It will attempt to identify matches via
 * CRMCoreContactEntity->match, which will run against any module that registers
 * itself as a contact matching service.
 *
 * This function will identify duplicate contacts in the system and copy values
 * from the profile into it to save. Otherwise, if no matches are found, it will
 * not affect the contact record.
 *
 * It should be noted that CRMCoreContactEntity->match allows modules to modify
 * contact records on their own. This function will only update the form fields
 * submitted through the profile. It is possible, but unlikely, that the process
 * of matching a contact could result in changes to the contact record being
 * searched that do not make their way over to the matched contact.
 *
 * Modules that need to implement matching rules for contact that update contact
 * values and use CRM Core Profile may want to use
 * hook_crm_core_profile_contact_presave to verify modifications to contact
 * records before they are committed to the system.
 *
 * @param CRMCoreContactEntity $contact
 *   CRM Core Contact
 * @param array $form_state
 *   Form state
 */
function _crm_core_profile_check_matches(CRMCoreContactEntity &$contact, $form_state) {

  // Matching profiles attempt to locate a duplicate contact in the system.
  // Failing that, they will create a new contact.
  $dupes = $contact->match();

  // Check for matches. If any exist, get the top match and update it.
  if (count($dupes) > 0) {

    $match = crm_core_contact_load($dupes[0]);

    // Copy individual field elements from the profile to the contact. Copy
    // values for individual columns within complex fields. This will ensure we
    // are not losing data that does not exist in the profile.
    // For instance: if we have a name field,and the profile includes
    // a FIRST NAME and LAST NAME, this method will avoid
    // overwriting a MIDDLE NAME that might already be stored in the system.
    $processed_fields = array();
    foreach ($form_state['profile']->fields as $field_cfg) {
      if ($field_cfg['status']) {
        if (isset($contact->$field_cfg['field_name'])) {
          if (empty($field_cfg['field_item'])) {
            $match->$field_cfg['field_name'] = $contact->$field_cfg['field_name'];
            $processed_fields[] = $field_cfg['field_name'];
          }
          else {
            $match->{$field_cfg['field_name']}[LANGUAGE_NONE][0][$field_cfg['field_item']] = $contact->{$field_cfg['field_name']}[LANGUAGE_NONE][0][$field_cfg['field_item']];
          }
        }
      }
    }

    // Replace the contact with the match.
    $contact = $match;
  }
}

/**
 * Implements hook_forms().
 */
function crm_core_profile_forms() {

  $forms = array();
  foreach (crm_core_profile_load_all() as $profile) {
    $forms['crm_core_profile_entry_form_' . $profile->name]['callback'] = 'crm_core_profile_entry_form';
  }

  return $forms;
}

/**
 * Helper to update profile with settings from form.
 */
function _crm_core_profile_update_profile(&$profile, $values) {
  unset($values['submit'], $values['form_build_id'], $values['form_token']);
  unset($values['form_id'], $values['op'], $values['cancel']);
  unset($values['entities']['entities__active_tab'], $values['delete']);
  unset($values['update'], $values['save']);

  foreach (array_keys($values['entities']) as $entity_type) {
    foreach ($values['entities'][$entity_type] as $key => $value) {
      $profile->entities[$entity_type][$key] = $value;
    }
    unset($values['entities'][$entity_type]);
  }
  unset($values['entities']);

  foreach ($values as $key => $value) {
    $profile->{$key} = $value;
  }
}

/**
 * Implements COMPONENT_features_enable_feature().
 */
function crm_core_profile_features_enable_feature($module_name, $component) {
  if ($component == 'crm_core_profile') {
    $crm_core_profiles = features_get_default($component, $module_name);
    if (!empty($crm_core_profiles)) {
      foreach ($crm_core_profiles as $crm_core_profile) {
        crm_core_profile_save($crm_core_profile);
      }
    }
  }
}

/**
 * Implements COMPONENT_features_disable_feature().
 */
function crm_core_profile_features_disable_feature($module_name, $component) {
  if ($component == 'crm_core_profile') {
    // Module already disabled, we can't use features_get_default().
    module_load_include('inc', $module_name, $module_name . '.' . $component);
    $function = $module_name . '_default_' . $component;
    if (function_exists($function)) {
      $crm_core_profiles = $function();
      if (!empty($crm_core_profiles)) {
        foreach ($crm_core_profiles as $crm_core_profile) {
          crm_core_profile_delete($crm_core_profile);
        }
      }
    }
  }
}

/**
 * Implements hook_features_revert().
 */
function crm_core_profile_features_revert($module_name) {
  $crm_core_profiles = features_get_default('crm_core_profile', $module_name);
  if (!empty($crm_core_profiles)) {
    foreach ($crm_core_profiles as $crm_core_profile) {
      crm_core_profile_save($crm_core_profile);
    }
  }
}


/**
 * Saves nodes configuration.
 *
 * @param object $config
 *   Nodes configuration.
 */
function crm_core_profile_node_config_save($config) {
  $config = (array) $config;
  db_merge('crm_core_profile_nodes')
    ->condition('nid', $config['nid'])
    ->fields($config)
    ->execute();
}

/**
 * Implements hook_entity_uuid_load().
 */
function crm_core_profile_entity_uuid_load(&$entities, $entity_type) {
  if ($entity_type == 'node') {
    foreach ($entities as $nid => $node) {
      $config = crm_core_profile_load_node_config($nid);
      if ($config !== FALSE) {
        $config->nid = $node->uuid;
        $entities[$nid]->crm_core_profile_node_config = $config;
      }
    }
  }
}

/**
 * Implements hook_entity_uuid_save().
 */
function crm_core_profile_entity_uuid_save(&$entity, $entity_type) {
  if ($entity_type == 'node') {
    if (isset($entity->crm_core_profile_node_config)) {
      $config = (array) $entity->crm_core_profile_node_config;
      $uuid = $config['nid'];
      $nids = entity_get_id_by_uuid('node', array($uuid));
      $config['nid'] = $nids[$uuid];
      crm_core_profile_node_config_save($config);
    }
  }
}

/**
 * Implements hook_uuid_node_features_export_render_alter().
 *
 * Adding node configuration to export.
 */
function crm_core_profile_uuid_node_features_export_render_alter(&$export, $node, $module) {
  $nids = entity_get_id_by_uuid('node', array($node->uuid));
  $config = crm_core_profile_load_node_config($nids[$node->uuid]);
  if ($config !== FALSE) {
    $config->nid = $node->uuid;
    $export->crm_core_profile_node_config = $config;
    if (isset($export->crm_core_profile_data)) {
      unset($export->crm_core_profile_data);
    }
  }
}
