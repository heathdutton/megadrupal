<?php

/**
 * @file
 * Defines the IATS payment gateway.
 */

/**
 * Implements hook_libraries_info().
 */
function uc_iats_libraries_info() {
  $libraries['iatspayments'] = array(
    'name' => 'iATS Payments API',
    'vendor url' => 'https://github.com/iATSPayments/PHP',
    'download url' => 'https://github.com/iATSPayments/PHP/archive/v1.0.tar.gz',
    'path' => 'lib',
    'version callback' => 'uc_iats_get_library_version',
    'version arguments' => array(
      'file' => 'composer.json',
    ),
    'files' => array(
      'php' => array(
        'Core.php',
        'CustomerLink.php',
        'ProcessLink.php',
        'ReportLink.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Callback used by hook_libraries_info.
 *
 * Parses a JSON file and returns the value of the "version" property.
 *
 * @param array $library
 *   Associative array containing all information about the library.
 * @param array $options
 *   Associative array containing library version options.
 *
 * @return string
 *   The library version.
 */
function uc_iats_get_library_version(array $library, array $options) {
  $version = '';
  $config_file = DRUPAL_ROOT . '/' . $library['library path'] . '/' . $options['file'];

  if (file_exists($config_file)) {
    $file_content = file_get_contents($config_file);
    $config = drupal_json_decode($file_content);

    if (isset($config['version'])) {
      $version = $config['version'];
    }
  }
  return $version;
}

/**
 * Implementation of hook_payment_gateway().
 */
function uc_iats_uc_payment_gateway() {
  $gateways[] = array(
    'id' => 'iats',
    'title' => t('IATS'),
    'description' => t('Process credit card payments using IATS.'),
    'settings' => 'uc_iats_settings_form',
    'credit' => 'uc_iats_charge',
    'credit_txn_types' => array(UC_CREDIT_AUTH_CAPTURE),
  );

  return $gateways;
}

/**
 * Admin settings form.
 */
function uc_iats_settings_form() {

  $form['uc_iats_credentials'] = array(
    '#type' => 'fieldset',
    '#title' => t('IATS API Credentials'),
  );
  $form['uc_iats_credentials']['uc_iats_agentcode'] = array(
    '#type' => 'textfield',
    '#title' => t('Agent Code'),
    '#description' => t('Your IATS account Agent Code.'),
    '#default_value' => variable_get('uc_iats_agentcode', ''),
  );
  $form['uc_iats_credentials']['uc_iats_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t('Your IATS account password.'),
    '#default_value' => variable_get('uc_iats_password', ''),
  );
  return $form;
}

/**
 * Handles credit card transaction.
 */
function uc_iats_charge($order_id, $amount, $data) {
  // Load the order.
  $order = uc_order_load($order_id);

  /**
   * TODO: Add switch statement to do other stuff here.
   * This space is reserved for future development, including recurring
   * payments, etc.
   */
  // Pass the info along.
  return _uc_iats_charge($order, $amount, $data);
}

/**
 * Handles authorizations and captures.
 * Does the heavy lifting.
 */
function _uc_iats_charge($order, $amount, $data) {

  // Build a description of the order for logging in Auth.Net.
  $description = array();
  foreach ((array) $order->products as $product) {
    $description[] = $product->qty . 'x ' . $product->model;
  }

  // Check for creditecard number validation
  if (_uc_credit_valid_card_number($order->payment_details['cc_number']) == FALSE) {
    $result = _uc_iats_build_result(FALSE, _uc_iats_handle_error(40));
  }
  else {
    // Instantiating our object.
    $iATS_PL = uc_iats_get_service('ProcessLink');

    // Build API parameter.
    $month = str_pad($order->payment_details['cc_exp_month'],2,0,STR_PAD_LEFT);
    $year = substr($order->payment_details['cc_exp_year'],2,2);
    $creditCardExpiry = $month .'/'. $year ;
    $request = array(
      'invoiceNum' => $order->order_id,
      'creditCardNum' => $order->payment_details['cc_number'],
      'creditCardExpiry' => $creditCardExpiry,
      'cvv2' => $order->payment_details['cc_cvv'],
      'firstName' => $order->billing_first_name,
      'lastName' => $order->billing_last_name,
      'address' => $order->billing_street1,
      'city' => $order->billing_city,
      'state' => uc_get_zone_code($order->billing_zone),
      'zipCode' => $order->billing_postal_code,
      'total' => $order->order_total,
      'currency' => 'USD',
      'mop' => _uc_iats_card_type($order->payment_details['cc_number']),
    );

    //// Make the API call using the ProcessLink service.
    $response = $iATS_PL->processCreditCard($request);

    // Check the response from IATS for success or failure.
    if (substr(trim($response['AUTHORIZATIONRESULT']), 0, 2) == 'OK') {
      $response = explode(':', $response['AUTHORIZATIONRESULT'], 2);
      $trxn_result = trim($response[0]);
      $trxn_id = trim($response[1]);

      /**
       * Deal with responses.
       */
      // Payment accepted.
      if ($trxn_result == 'OK') {
        $result = _uc_iats_build_result(TRUE);

        // Build an admin order comment.
        $comment = t('<b>@status:</b> @message', array('@status' => $result['success'] ? t('ACCEPTED') : t('REJECTED'), '@message' => $response[1]));

        // Save the comment to the order.
        uc_order_comment_save($order->order_id, $result['user'], $comment, 'admin');
      }

      // This means the call was successful, but the card was rejected, etc.
      else {
        $result = _uc_iats_build_result(FALSE, _uc_iats_handle_error($trxn_id));
      }
      // Could not call the API.
    }
    else {

      if (isset($response['message'])) {
        drupal_get_messages('error');
        $error_reason = $response['message'];
        drupal_set_message(
            t('We received the following error while attempting to process your payment:  @reason and the errorcode is @code', array('@reason' => $error_reason, '@code' => $response['code'])), 'error'
        );
        return FALSE;
      }
    }
  }
  return $result;
}

function _uc_iats_build_result($success = FALSE, $message = '') {
  global $user;
  return array(
    'success' => $success,
    'message' => $message,
    'user' => $user->uid,
  );
}

/**
 * Gets an instance of an iATS Payments API service.
 *
 * @param string $service_name
 *   The iATS service to get. 'ProcessLink', 'CustomerLink', 'ReportLink'
 * @param array $payment_method
 *   The payment method, used to populate iATS API settings.
 *
 * @return Mixed
 *   The instantiated iATS Payments API service.
 */
function uc_iats_get_service($service_name) {
  if (libraries_load('iatspayments')) {
    $service_name = 'iATS\\' . $service_name;
    $service = new $service_name(
        variable_get('uc_iats_agentcode', ''), variable_get('uc_iats_password', ''), 'NA'
    );
    return $service;
  }
  return NULL;
}

function _uc_iats_handle_error($code) {
  $errors = array(
    1 => 'Agent Code has not been set up on the authorization system.',
    2 => 'Unable to process transaction. Verify and re-enter credit card information.',
    3 => 'Charge card expired.',
    4 => 'Incorrect expiration date.',
    5 => 'Invalid transaction. Verify and re-enter credit card information.',
    6 => 'Transaction not supported by institution.',
    7 => 'Lost or stolen card.',
    8 => 'Invalid card status.',
    9 => 'Restricted card status. Usually on corporate cards restricted to specific sales.',
    10 => 'Error. Please verify and re-enter credit card information.',
    11 => 'General decline code, may have different reasons for each card type. Please have your client call customer service.',
    14 => 'This means that the credit card is over the limit.',
    15 => 'Decline code, may have different reasons for each card type. Please have your client call customer service.',
    16 => 'Invalid charge card number. Verify and re-enter credit card information.',
    17 => 'Unable to authorize transaction. Verify card information with customer and re-enter. Could be invalid name or expiry date.',
    18 => 'Card not supported by institution.',
    19 => 'Incorrect CVV2.',
    22 => 'Bank Timeout. Bank lines may be down or busy. Re-try transaction later.',
    23 => 'System error. Re-try transaction later.',
    24 => 'Charge card expired.',
    25 => 'Capture card. Reported lost or stolen.',
    27 => 'System error, please re-enter transaction.',
    29 => 'Rejected by Ticketmaster.',
    31 => 'Manual reject code ',
    39 => 'Contact Ticketmaster 1-888-955-5455 ',
    40 => 'Card not supported by Ticketmaster. Invalid cc number.',
    41 => 'Invalid Expiry date ',
    100 => 'Authorization system down. DO NOT REPROCESS.',
  );
  return $errors[$code];
}

/**
 * Returns the Iats approved credit card type for a card number.
 */
function _uc_iats_card_type($cc_number) {
  switch (substr(strval($cc_number), 0, 1)) {
    case '3':
      return 'AMX';
    case '4':
      return 'VISA';
    case '5':
      return 'MC';
    case '6':
      return 'DSC';
  }

  return FALSE;
}