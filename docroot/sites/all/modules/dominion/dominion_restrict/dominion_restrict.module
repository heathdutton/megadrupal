<?php

/**
 * Implements hook_menu().
 */
function dominion_restrict_menu() {
  $items = array();

  $items['admin/structure/dominion/settings/restrict'] = array(
    'title' => 'Restrict posting',
    'description' => 'Configure which nodes may be posted on all domains',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dominion_restrict_admin_settings'),
    'access arguments' => array('administer domains'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'dominion_restrict.admin.inc',
  );

  return $items;
}

/**
 * Form validate function for forms where we are not allowed to post
 */
function dominion_restrict_validate(&$form, $form_state){
  form_set_error(t('You are not allowed to post content of this type on this domain.'));
  drupal_set_message(t('You are not allowed to post content of this type on this domain.'), 'error');
}

/**
 * Implements hook_node_access().
 */
function dominion_restrict_node_access($type, $op, $account){
  global $user, $_domain;

  // The first argument is a node object in a few cases (e.g. preview).
  if (is_object($type)) {
    $type = $type->type;
  }

  if ($op == 'create') {
    if (dominion_restrict_create_access($type, $account)) {
      return NODE_ACCESS_DENY;
    }
    else {
      return NODE_ACCESS_IGNORE;
    }
  }
}

/**
 * Check if create access should be prohibited.
 *
 * @param string $type
 * @param object $account
 */
function dominion_restrict_create_access($type, $account = NULL) {
  global $user, $_domain;

  if (is_null($account)) {
    $account = $user;
  }

  if (user_access('bypass node access', $account)){
    return FALSE;
  }

  $mode = (string) variable_get('dominion_restrict_type_'.$type, 0);
  $mode = explode('-', $mode, 2);
  if (!isset($mode[1])) {
    $require_dominion_function = NULL;
    $require_own_domain = $mode[0] == 1;
    $require_main_domain = $mode[0] == 2;
  }
  else {
    $require_dominion_function = $mode[1];
    $require_own_domain = $mode[0] == 'own';
    $require_main_domain = FALSE;
  }

  if ($require_dominion_function) {
    if (!dominion_has_function($require_dominion_function) && dominion_is_subsite()) {
      return TRUE;
    }
  }

  if ($require_main_domain) {
    if (dominion_is_subsite()) {
      return TRUE;
    }
  }

  if ($require_own_domain && dominion_is_subsite()) {
    if (!isset($account->domain_user[$_domain['domain_id']])) {
      return TRUE;
    }
  }

  /**
   * hook_dominion_restrict_creation() let other modules restrict
   * creation of nodes on the current domain. The first argument
   * is the nodetype (string). The function must always return a boolean,
   * TRUE if the current user is not allowed to create a node of the given
   * nodetype on the current domain, FALSE otherwise. Returning FALSE does
   * not mean that the user is allowed to create the node, depending on the
   * pemissons and (eventually) other modules.
   */
  foreach (module_implements('dominion_restrict_creation') as $module){
    if (module_invoke($module, 'dominion_restrict_creation', $type, $account)){
      drupal_set_message('deny: ' . $type . ' on ' . __LINE__);
      return TRUE;
    }
  }

  return FALSE;
}
