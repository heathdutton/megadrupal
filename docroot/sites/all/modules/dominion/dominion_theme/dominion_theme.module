<?php

define('DOMINION_THEME_VAR_THEMES', 'dominion_theme_themes');
define('DOMINION_THEME_VAR_DEFAULT_THEME', 'dominion_default_theme');
define('DOMINION_THEME_VAR_IMAGECACHE', 'dominion_theme_imagecache');

// Define constants for theme configuration.
define('DOMINION_THEME_COLOR', 'color');
define('DOMINION_THEME_FILE', 'file');
define('DOMINION_THEME_IMAGE', 'image');
define('DOMINION_THEME_LIST', 'list');

/**
 * Implements of hook_menu().
 */
function dominion_theme_menu() {
  $menu = array();

  $menu['admin/structure/dominion/settings/theme'] = array(
    'title' => 'Theme',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dominion_theme_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'dominion_theme.admin.inc',
    'weight' => 3,
  );

  $menu['admin/structure/dominion/list/%/themefiles'] = array(
    'title' => 'Theme files',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dominion_theme_files_form', 4),
    'access arguments' => array('manage dominion subsites'),
    'type' => MENU_CALLBACK,
  );

  return $menu;
}

/**
 * Retrieve the customized dominion.inc info for a particular theme.
 *
 * @param string $theme
 *   The selected theme.
 *
 * @return array
 *   A set of theme information.
 */
function _dominion_theme_get_info($theme) {
  $path = drupal_get_path('theme', $theme);
  $file = $path . '/dominion.inc';
  $info = array();
  if ($path && file_exists($file)) {
    include $file;
  }
  $info += array(
    'options' => array(),
    'copy' => array(),
    'css' => array(),
  );
  return $info;
}

/**
 * Implements hook_form_alter.
 *
 * Adds a section to the dominion_form, where the admin is able customize the themes.
 */
function dominion_theme_form_dominion_form_alter(&$form, &$form_state) {
  $available_themes = variable_get(DOMINION_THEME_VAR_THEMES, array());
  $default_theme = variable_get(DOMINION_THEME_VAR_DEFAULT_THEME, NULL);
  $options = array_filter($available_themes);

  $form['dominion_theme'] = array(
    '#type' => 'fieldset',
    '#title' => t('Theming'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  // Set the default theme to the first theme from the list if not set.
  // This is required to get the right theme configuration options.
  if (!$default_theme) {
    foreach ($options as $theme => $theme_name) {
      $default_theme = $theme;
      break;
    }
  }

  // Set default theme to theme currently in use (only applies for edit forms).
  // Isset is used over array_key_exists as no null value is expected.
  if (isset($form['#domain_id'])) {
    if ($subsite = dominion_get_info($form['#domain_id'])) {
      if (isset($subsite->theme)) {
        $default_theme = $subsite->theme;
      }
    }
  }
  else {
    $form['#domain_id'] = NULL;
  }

  // Set default theme to the theme provided by AHAH.
  // This is required to get the right theme configuration options.
  if (isset($form_state['values'])) {
    $default_theme = $form_state['values']['theme'];
  }

  $form['dominion_theme']['theme'] = array(
    '#type' => 'select',
    '#title' => t('Theme'),
    '#options' => drupal_map_assoc($options),
    '#default_value' => $default_theme,
    '#ajax' => array(
      'callback' => 'dominion_theme_configuration_callback',
      'wrapper' => 'dominion-theme-configuration',
      'method' => 'replace',
      'effect' => 'fade',
      'event' => 'change',
      'progress' => array(
        'type' => 'throbber',
        'message' => '',
      )
    )
  );

  $form['dominion_theme']['dominion_theme_configuration'] = array(
    '#prefix' => '<div id="dominion-theme-configuration">',
    '#suffix' => '</div>',
  );

  $options = _dominion_theme_get_theme_configuration($default_theme, $form['#domain_id']);
  foreach ($options as $name => $option) {
    $form['dominion_theme']['dominion_theme_configuration']['dominion_theme_' . $name] = $option;
  }
  if (empty($options)) {
    // Add content to the wrapper. It will not render otherwise.
    $form['dominion_theme']['dominion_theme_configuration']['#value'] = '';
  }
}

/**
 * Ajax callback for function dominion_theme_configuration.
 */
function dominion_theme_configuration_callback($form, &$form_state) {
  return $form['dominion_theme']['dominion_theme_configuration'];
}

/**
 * Function that continues with handeling the form based on the information from the dominion.inc
 * and the stored data, in which allows the admin to do customizations on the editing page of the
 * custom theme, such as rendering the jQuery Color picker tool for custom colors.
 *
 * @param string $theme
 *   The selected theme.
 * @param int $domain_id
 *   The domain ID.
 *
 * @return array $form
 *   The drupal form for the admin.
 */
function _dominion_theme_get_theme_configuration($theme, $domain_id) {
  // Retrieve information from dominion.inc.
  $info = _dominion_theme_get_info($theme);

  // Inits the stored data.
  $config = array();
  if ($domain_id && ($subsite = dominion_get_info($domain_id))) {
    if (isset($subsite->theme) && $subsite->theme == $theme) {
      $config = $subsite->theme_config;
    }
  }

  // Initialize the drupal form.
  $form = array();

  // Loop the info file.
  foreach ($info['options'] as $id => $option) {
    $option_key = 'option_' . $id;
    $title = $option['title'];
    $default_value = isset($option['default_value']) ? isset($config[$option_key]) ? $config[$option_key] : $option['default_value'] : NULL;

    // Preset the form element
    $form[$option_key] = array(
      '#title' => t($title),
      '#default_value' => $default_value,
    //'#required' => !empty($option['required']),
    );

    // Type must be defined.
    if (isset($option['type'])) {
      switch ($option['type']) {
        case DOMINION_THEME_COLOR:
          if (module_exists('jquery_colorpicker')) {
            $form[$option_key] += array(
              '#type' => 'jquery_colorpicker',
            );
            // The jQuery Colorpicker requires a color without the "#", therefore we
            // are going remove it and put it back during the generation of output.
            $form[$option_key]['#default_value'] = str_replace('#', '', $form[$option_key]['#default_value']);
          }
          else {
            // Fallback to textfield.
            $form[$option_key] += array(
              '#type' => 'textfield',
              '#size' => 10,
            );
          }
          break;

        case DOMINION_THEME_LIST:
          // Check if option contains items.
          if (count($option['options']) > 0) {
            $form[$option_key] += array(
              '#type' => 'select',
              '#options' => $option['options'],
            );
            // If default value is no there, pick the first one of the options.
            empty($form[$option_key]['#default_value']) ? $form[$option_key]['#default_value'] = current($option['option']) : FALSE;
          }
          else {
            // If options has no items, remove this this form item.
            unset($form[$option_key]);
          }
          break;

        case DOMINION_THEME_IMAGE:
          // No break, deliberate fall-throught.

        case DOMINION_THEME_FILE:
          // If the info contains any file related items, set this option on.
          $form['upload_files'] = array(
            '#type' => 'checkbox',
            '#title' => t('Upload files on next page'),
            '#description' => t('Check this box to go to the upload files form after submitting this form.'),
            '#default_value' => !$config,
          );
          break;

      }
    }
  }
  return $form;

  /*
   foreach ($info['options'] as $id => $option) {
   $form['option_' . $id] = array(
   '#title' => t($option['title']),
   '#default_value' => isset($option['default_value']) ? $option['default_value'] : NULL,
   //'#required' => !empty($option['required']),
   );
   if (isset($config['option_' . $id])) {
   $form['option_' . $id]['#default_value'] = $config['option_' . $id];
   }
   switch ($option['type']) {
   case DOMINION_THEME_COLOR:
   // The jQuery Colorpicker requires a color without the "#", therefore we are going remove it and put it back during the generation of output.
   $form['option_' . $id]['#default_value'] = str_replace('#', '', $form['option_' . $id]['#default_value']);
   $form['option_' . $id] += array(
   '#type' => 'jquery_colorpicker',
   );
   break;
   case DOMINION_THEME_IMAGE:
   $has_files = TRUE;
   break;
   case DOMINION_THEME_FILE:
   $has_files = TRUE;
   break;
   case DOMINION_THEME_LIST:
   $form['option_' . $id] += array(
   '#type' => 'select',
   '#options' => $option['options'],
   );
   if (empty($form['option_' . $id]['#default_value'])) {
   $form['option_' . $id]['#default_value'] = $option['search_string'];
   }
   break;
   }
   }*/
}

/**
 * Implements hook_dominion_insert().
 */
function dominion_theme_dominion_insert($domain_id, $form_values) {
  // Creating empty serialized array for config, stylesheets and files
  $config_serialized = $stylesheets_serialized = $files_serialized = serialize(array());

  db_insert('dominion_theme')
    ->fields(array(
      'domain_id' => $domain_id,
      'theme' => $form_values['theme'],
      'configuration' => $config_serialized,
      'stylesheets' => $stylesheets_serialized,
      'files' => $files_serialized,
    ))
    ->execute();
}

/**
 * Implements hook_dominion_update().
 */
function dominion_theme_dominion_update($domain_id, $form_values) {
  $res = db_select('dominion_theme', 'dt')
    ->fields('dt', array('theme', 'configuration'))
    ->condition('domain_id', $domain_id)
    ->execute()
    ->fetchObject();

  if ($res) {
    if ($res->theme == $form_values['theme']) {
      // Theme was not changed. Load old configuration options.
      $old_config = unserialize($res->configuration);
    }
    else {
      // Different theme was chosen, start with a blank configuration.
      $old_config = array();
      _dominion_theme_delete_files(unserialize($res->configuration));
    }
    $config = _dominion_theme_get_configuration($old_config, $form_values['theme'], $form_values);
    $config_serialized = serialize($config);
    if ($res->theme != $form_values['theme'] || $config_serialized != $res->configuration) {
      _dominion_theme_delete_files(unserialize($res->configuration));
      if ($theme_data = _dominion_theme_apply_configuration($domain_id, $form_values['theme'], $config)) {
        extract($theme_data);
      }
      else {
        $stylesheets = array();
        $files = array();
      }
      $stylesheets_serialized = serialize($stylesheets);
      $files_serialized = serialize($files);
      db_update('dominion_theme')
        ->fields(array(
          'theme' => $form_values['theme'],
          'configuration' => $config_serialized,
          'stylesheets' => $stylesheets_serialized,
          'files' => $files_serialized,
        ))
        ->condition('domain_id', $domain_id)
        ->execute();
    }
  }
  else {
    dominion_theme_dominion_insert($domain_id, $form_values);
  }
  // drupal_exit();
  if (!empty($form_values['dominion_theme_upload_files'])) {
    dominion_form_set_redirect('admin/structure/dominion/list/' . $domain_id . '/themefiles');
  }
}

/**
 * Implements hook_dominion_load()
 */
function dominion_theme_dominion_load(&$domain) {
  $result = db_select('dominion_theme', 'dt')
    ->fields('dt', array('theme', 'configuration', 'stylesheets', 'files'))
    ->condition('domain_id', $domain->domain_id)
    ->execute()
    ->fetchAssoc();
  if ($result) {
    $domain->theme = $result['theme'];
    $domain->theme_config = unserialize($result['configuration']);
    $domain->theme_stylesheets = unserialize($result['stylesheets']);
    $domain->theme_files = unserialize($result['files']);
  }
}

/**
 * Implements hook_dominion_delete()
 */
function dominion_theme_dominion_delete($subsite) {
  // Retrieve configuration for deleting files.
  $configuration = db_select('dominion_theme', 'dt')
    ->fields('dt', array('configuration'))
    ->condition('domain_id', $subsite->domain_id)
    ->execute()
    ->fetchField();
  db_delete('dominion_theme')
    ->condition('domain_id', $subsite->domain_id)
    ->execute();
  _dominion_theme_delete_files(unserialize($configuration));
}

function _dominion_theme_get_configuration($old_config, $theme, $values) {
  // Use the old configuration as a basis
  $output = $old_config;
  foreach ($values as $name => $value) {
    if (preg_match('/^dominion_theme_(option_.*?)$/', $name, $match)) {
      $name = $match[1];
      $output[$name] = $value;
    }
  }
  return $output;
}

function _dominion_theme_get_base_themes($theme) {
  $themes = list_themes();

  // Find all our ancestor themes and put them in an array.
  $base_theme = array();
  $ancestor = $theme;
  while ($ancestor && isset($themes[$ancestor]->base_theme)) {
    $base_theme[] = $new_base_theme = $themes[$themes[$ancestor]->base_theme];
    $ancestor = $themes[$ancestor]->base_theme;
  }
  return array_reverse($base_theme);
}

/**
 * Create the domain alpha image
 * @param $$alpha_image
 *  Alpha image from the theme info
 * @param $target
 *  The target path
 * @param $color
 *  Color option from the configuration
 * @return
 *  Alpha image filepath
 function _dominion_theme_build_alpha_image($alpha_image, $target, $color) {
 $alpha = (int)$alpha_image['alpha'];

 $r = hexdec(substr($color, 1, 2));
 $g = hexdec(substr($color, 3, 2));
 $b = hexdec(substr($color, 5, 2));
 $img = imagecreatetruecolor(25, 25);
 imagealphablending($img, FALSE);
 $color = imagecolorallocatealpha($img, $r, $g, $b, $alpha);
 imagefilledrectangle($img, 0, 0, 25, 25, $color);
 imagesavealpha($img, TRUE);
 $filename = $target . 'alpha.png';
 imagepng($img, $filename);

 return $filename;
 }
 */


/**
 * Based on the collected form_values ($config), this function generates the required CSS file(s)
 * in a public map.
 *
 * @param int $domain_id
 *   The domain ID.
 * @param string $theme
 *   The selected theme.
 * @param array $config
 *   The collected form_values.
 *
 * @return array
 *   Set which contains the location of the generated CSS files and images.
 */
function _dominion_theme_apply_configuration($domain_id, $theme, $config) {
  _dominion_theme_clear_configuration($domain_id);

  if (empty($config)) {
    // No theme options were overridden, use theme as is.
    return;
  }

  $base_themes = _dominion_theme_get_base_themes($theme);

  $info = _dominion_theme_get_info($theme);

  // Prepare target locations for generated files.
  $id = $domain_id; // . '-' . substr(md5(serialize($config) . microtime()), 0, 8);
  $paths['color'] = file_default_scheme() . '://dominion';
  $paths['target'] = $paths['color'] . '/' . $id;
  foreach ($paths as $path) {
    file_prepare_directory($path, FILE_CREATE_DIRECTORY);
  }
  $paths['target'] .= '/';
  $paths['id'] = $id;
  $paths['sources'] = array();
  foreach ($base_themes as $base_theme) {
    $paths['sources'][] = drupal_get_path('theme', $base_theme->name) . '/';
  }
  $paths['sources'][] = drupal_get_path('theme', $theme) . '/';
  $paths['files'] = $paths['map'] = array();

  // Create alpha image.
  $alpha_image_search_str = '';
  if (!empty($info['alpha_image'])) {
    $alpha_image_search_str = $info['alpha_image']['search_string'];
    $alpha = (int) $info['alpha_image']['alpha'];
    $color_option = (int) $info['alpha_image']['color'];
    if (!empty($config['option_' . $color_option])) {
      $color = $config['option_' . $color_option];

      $r = hexdec(substr($color, 1, 2));
      $g = hexdec(substr($color, 3, 2));
      $b = hexdec(substr($color, 5, 2));

      $img = imagecreatetruecolor(25, 25);
      imagealphablending($img, FALSE);
      $color = imagecolorallocatealpha($img, $r, $g, $b, $alpha);
      imagefilledrectangle($img, 0, 0, 25, 25, $color);
      imagesavealpha($img, TRUE);
      imagepng($img, $paths['target'] . 'alpha.png');
      $paths['files'][] = $paths['target'] . 'alpha.png';
    }
  }
  // Rewrite theme stylesheets.
  $css = array();
  foreach ($info['css'] as $stylesheet) {
    // Build a temporary array with LTR and RTL files.
    $files = array();
    foreach ($paths['sources'] as $source) {
      if (file_exists($source . $stylesheet)) {
        $files[] = $source . $stylesheet;
        $rtl_file = str_replace('.css', '-rtl.css', $stylesheet);
        if (file_exists($source . $rtl_file)) {
          $files[] = $source . $rtl_file;
        }
      }
    }

    foreach ($files as $file) {
      $parts = explode('/', $file);
      $file = array_pop($parts);
      $source = implode('/', $parts) . '/';
      // Set which contains all the default_values
      $default_values = array();
      // Aggregate @imports recursively for each configured top level CSS file
      // without optimization. Aggregation and optimization will be
      // handled by drupal_build_css_cache() only.
      $style = drupal_load_stylesheet($source . $file, FALSE);

      // Return the path to where this CSS file originated from, stripping
      // off the name of the file at the end of the path.
      $base = base_path() . dirname($source . $file) . '/';
      _drupal_build_css_path(NULL, $base);

      // Change CSS in $style. Replace search strings by tokens first.
      foreach ($info['options'] as $id => $option) {
        if (!empty($option['search_string'])) {
          $token = '::dominion_theme_option_' . $id . '::';
          $style = str_replace($option['search_string'], $token, $style);
          $default_values[$token] = $option['search_string'];
        }
        $token = '::dominion_theme_option_' . $id . '::';
      }
      // Replace alpha image by token.
      if ($alpha_image_search_str) {
        $style = str_replace($alpha_image_search_str, '::alpha::', $style);
      }

      // Rewrite relative paths to files.
      $source_trimmed = trim($source, '/');
      $files_path = DrupalPublicStreamWrapper::getDirectoryPath() . '/dominion/' . $id;
      $target_trimmed = trim($files_path, '/');
      $relative = str_repeat('../', substr_count($target_trimmed, '/') + 1) . $source_trimmed . '/';
      $relative .= str_replace(basename($file), '', $file);
      $style = preg_replace('/url\\(\\\'?([^\\/\\\'][^\\:\\)]+?)\\\'?\\)/', "url('$relative\\1')", $style);

      // Replace alpha token by alpha image.
      if ($alpha_image_search_str) {
        $style = str_replace('::alpha::', 'alpha.png', $style);
      }

      // Replace tokens by new codes.
      foreach ($info['options'] as $id => $option) {
        $option_key = 'option_' . $id;
        $token = '::dominion_theme_option_' . $id . '::';
        $value = $default_values[$token];
        switch ($option['type']) {
          case DOMINION_THEME_COLOR:
            $value = empty($config[$option_key]) ? $value :  $config[$option_key];
            if (substr($value, 0, 1) != '#') {
              // Colorpicker gives the color without #.
              $value = "#$value";
            }
            break;

          case DOMINION_THEME_IMAGE:
            // No break. Deliberate fall-through.

          case DOMINION_THEME_FILE:
            $file_item = !empty($config[$option_key]) ? $config[$option_key] : $config['option_' . $option['title']];

            if (empty($file_item)) {
              $value = $relative . $value;
            }
            else {
              $fid = $file_item->fid;
              $doc_url = file_create_url($file_item->uri);
              // Set the status of the uploaded file or it will become delete by the cron.
              $file_item->status = FILE_STATUS_PERMANENT;
              file_save($file_item);

              $value = str_replace('public://', '', $file_item->uri);
              $value = base_path() . DrupalPublicStreamWrapper::getDirectoryPath() . '/' . $value;

              // Append CSS option.
              if (!empty($option['append_to']) && $option['append_to'] == $stylesheet) {
                $extra = file_get_contents($file_item->uri);
                $extra = preg_replace('/url\\(\\\'?([^\\/\\\'][^\\:\\)]+?)\\\'?\\)/', "url('" . $relative . "\\1')", $extra);
                $style .= $extra;
              }
            }
            break;

          case DOMINION_THEME_LIST:
            $value = empty($config[$option_key]) ? $value : $config[$option_key];
            break;

        }
        $style = str_replace($token, $value, $style);
      }

      // When there are no hits, replace it with the default value.
      // First, find all leftovers.
      preg_match_all('/\[(.*?)\]/', $style, $result);
      // Take the second set on index 1.
      foreach ($result[1] as $key => $css_tuple) {
        $css_tuple_array = explode(':', $css_tuple);
        // If the explode is correct, there should be two items only. Therefore we take the
        // first result set, which is the original identifier and replace it with the default.
        count($css_tuple_array) == 2 ? $style = str_replace($result[0][$key], $css_tuple_array[0], $style) : FALSE;
      }

      // Eventually, save the file.
      $base_file = basename($file);
      $css[] = $paths['target'] . $base_file;

      $file_path = $paths['target'] . $base_file;
      $success = file_save_data($style, $file_path, FILE_EXISTS_REPLACE);
      $paths['files'][] = $file_path;
      @chmod($file_path, 0664);
    }
  }
  return array(
    'stylesheets' => $css,
    'files' => $paths['files'],
  );
}


/**
 * Function that deletes the generated folder and stylesheets.
 *
 * @param int $domain_id
 *   The domain ID.
 */
function _dominion_theme_clear_configuration($domain_id) {
  $files = db_select('dominion_theme', 'dt')
    ->fields('dt', array('files'))
    ->condition('domain_id', $domain_id)
    ->execute()
    ->fetchField();

  $files = unserialize($files);
  variable_del('dominion_theme_' . $domain_id . '_files');
  variable_del('dominion_theme_' . $domain_id . '_stylesheets');

  // If there were custom files, remove them
  if ($files) {
    // Deleting files and stylesheets
    foreach ($files as $file) {
      @unlink($file);
    }
    cache_clear_all(NULL, 'cache_dominion', 'domain_id');
  }

}

/**
 * Function that removes the uploaded files.
 */
function _dominion_theme_delete_files($config) {
  $fids = array();
  foreach ($config as $value) {
    // if (is_object($value) && isset($value->uri) && isset($value->fid) && file_delete($value)) {
    // $fids[] = $value->fid;
    // }
  }
  // Deleting the files
  if (!empty($fids)) {

    $deleted = db_delete('file_managed')
      ->condition('fid', $fids, 'IN')
      ->execute();
    if ($deleted != count($fids)) {
      watchdog('dominion', 'Failed to delete all the files from a theme.');
    }
  }
}

function dominion_theme_files_form($form, &$form_state, $domain_id) {
  if (!$subsite = dominion_get_info($domain_id)) {
    drupal_not_found();
  }

  $form['#domain_id'] = $domain_id;
  $config = $subsite->theme_config;
  $info = _dominion_theme_get_info($subsite->theme);

  foreach ($info['options'] as $id => $option) {
    if (array_key_exists('title', $option)) {
      $option_key = 'option_' . $option['title'];

      if (!in_array($option['type'], array(DOMINION_THEME_IMAGE, DOMINION_THEME_FILE))) {
        continue;
      }

      $form['fieldset_' . $id] = array(
        '#type' => 'fieldset',
        '#title' => check_plain(t($option['title'])),
        '#collapsible' => FALSE,
      );

      if (!empty($option['description'])) {
        $form['fieldset_' . $id]['#description'] = $option['description'];
      }

      if (isset($config[$option_key])) {
        $file = $config[$option_key];
        $ic_preset = variable_get(DOMINION_THEME_VAR_IMAGECACHE, '');
        $thumbnail = $ic_preset && preg_match('/^image\\//', $file->filemime) ? theme('imagecache', $ic_preset, $file->filepath) : '';

        $form['fieldset_' . $id][$option_key . '_current'] = array(
          '#markup' => '<p><strong>' . t('Current file:') . '</strong><br />' . t('@filename (@size)', array('@filename' => $file->filename, '@size' => format_size($file->filesize))) . '</p>' . $thumbnail,
        );

        // Add a checkbox for deleting the current file.
        $form['fieldset_' . $id][$option_key . '_delete'] = array(
          '#type' => 'checkbox',
          '#title' => 'Delete current file',
        );
      }

      $form['fieldset_' . $id][$option_key] = array(
        '#type' => 'file',
        '#title' => check_plain(t('Upload new file')),
        '#default_value' => isset($option['default_value']) ? $option['default_value'] : NULL,
      );
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Upload'),
  );

  $form['#attributes'] = array(
    'enctype' => 'multipart/form-data',
  );

  return $form;
}

function dominion_theme_files_form_submit($form, &$form_state) {
  $domain_id = $form['#domain_id'];
  if (!$subsite = dominion_get_info($domain_id)) {
    drupal_not_found();
  }
  $config = $subsite->theme_config;
  $info = _dominion_theme_get_info($subsite->theme);

  foreach ($info['options'] as $id => $option) {
    $option_key = 'option_' . $option['title'];
    if (!in_array($option['type'], array(DOMINION_THEME_IMAGE, DOMINION_THEME_FILE))) {
      continue;
    }

    // Get the uploaded file, if any.
    $file = file_save_upload($option_key, NULL, file_default_scheme() . '://dominion');

    // Create flag that indicates if the 'delete current file' checkbox was
    // checked.
    $delete_file = isset($form_state['values'][$option_key . '_delete']) ? $form_state['values'][$option_key . '_delete'] : FALSE;

    if ($file || $delete_file) {
      // Delete old file if any, otherwise we will get a duplicated entry error
      // from PDO.
      if (isset($config[$option_key])) {
        if (file_delete($config[$option_key], TRUE)) {
          db_delete('file_managed')
            ->condition('fid', $config[$option_key]->fid)
            ->execute();
        }

        unset($config[$option_key]);
      }
    }

    if ($file) {
      // Add the file to the config.
      $config[$option_key] = $file;
    }
  }

  // Updates the configuration in db.
  db_update('dominion_theme')
    ->fields(array('configuration' => serialize($config)))
    ->condition('domain_id', $domain_id)
    ->execute();

  // Clear the cache of this domain_id
  cache_clear_all('domain_id:' . $domain_id, 'cache_dominion');

  if ($theme_data = _dominion_theme_apply_configuration($domain_id, $subsite->theme, $config)) {
    extract($theme_data);
  }
  else {
    $stylesheets = array();
    $files = array();
  }

  $stylesheets_serialized = serialize($stylesheets);
  $files_serialized = serialize($files);
  db_update('dominion_theme')
    ->fields(array(
      'stylesheets' => $stylesheets_serialized,
      'files' => $files_serialized,
    ))
    ->condition('domain_id', $domain_id)
    ->execute();

  drupal_set_message(t('The theme settings has been saved.'));
  $form_state['redirect'] = 'admin/structure/dominion';
}

/**
 * Implements hook_custom_theme().
 *
 * This is where the theme switch takes place.
 */
function dominion_theme_custom_theme() {
  if ($subsite = dominion_get_info()) {
    // Allow the admin theme and other custom themes to be retained.
    $item = menu_get_item();
    if (!empty($item['theme_callback'])) {
      return;
    }
    if (!empty($subsite->theme)) {
      return $subsite->theme;
    }
  }
}

/**
 * Implements of hook_css_alter().
 *
 * Replace original CSS files by rewritten file.
 */
function dominion_theme_css_alter(&$css) {
  if (($subsite = dominion_get_info()) && !empty($subsite->theme_stylesheets)) {
    foreach ($css as $filename => $info) {
      foreach ($subsite->theme_stylesheets as $filename_rewritten) {
        if (basename($filename) == basename($filename_rewritten)) {
          $css[$filename]['data'] = $filename_rewritten;
        }
      }
    }
  }
}
