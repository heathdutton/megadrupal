<?php

define('DOMINION_VAR_DOMAIN_SUFFIX', 'dominion_domain_suffix');
define('DOMINION_VAR_DOMAIN_SUFFIX_DEFAULT', '.example.com');
define('DOMINION_VAR_EDITOR_ROLES', 'dominion_roles');
define('DOMINION_VAR_PATH_FRONTPAGE', 'dominion_path_frontpage');
define('DOMINION_VAR_PATH_FRONTPAGE_DEFAULT', 'dominion_frontpage');
define('DOMINION_VAR_ITEMS_IN_OVERVIEW', 'dominion_items_in_overview');
define('DOMINION_VAR_ITEMS_IN_OVERVIEW_DEFAULT', 25);
define('DOMINION_VAR_CUSTOM_FUNCTIONS', 'dominion_custom_functions');
define('DOMINION_VAR_DEFAULT_DOMAIN_TYPE', 'dominion_default_domain_type');

define('DOMINION_MENU_NAME', 'dominion-%');

/**
 * Implements hook_permission().
 */
function dominion_permission() {
  $perms = array();

  $perms['manage dominion subsites'] = array(
    'title' => t('Manage dominion subsites'),
    'description' => t('Create and edit subsites.'),
  );

  $blueprints = db_select('dominion_blueprint', 'b')
    ->fields('b', array('blueprint', 'name'))
    ->execute()
    ->fetchAllKeyed();
  foreach ($blueprints as $blueprint => $name) {
    $perms["manage $blueprint subsites"] = array(
      'title' => t('Manage %name subsites', array('%name' => $name)),
      'description' => t('Create, edit and delete subsites built using the %name blueprint.', array('%name' => $name)),
    );
  }

  return $perms;
}

/**
 * Implements of hook_menu().
 */
function dominion_menu() {
  $menu = array();

  $menu['admin/structure/dominion'] = array(
    'title' => 'Dominion',
    'access arguments' => array('manage dominion subsites'),
    'page callback' => 'dominion_admin_overview',
    'file' => 'dominion.admin.inc',
    'description' => 'Manage subsites using dominion.',
  );
  $menu['admin/structure/dominion/list'] = array(
    'title' => 'List',
    'description' => 'Subsites',
    'page callback' => 'dominion_admin_overview',
    'access arguments' => array('manage dominion subsites'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'dominion.admin.inc',
    'weight' => 0,
  );

  $blueprints = db_select('dominion_blueprint', 'b')
    ->fields('b', array('blueprint', 'name'))
    ->execute()
    ->fetchAllKeyed();
  $weight = 0;
  foreach ($blueprints as $blueprint => $name) {
    ++$weight;
    $menu['admin/structure/dominion/add/' . $blueprint] = array(
      'title' => "Add $name subsite",
      'page callback' => 'drupal_get_form',
      'page arguments' => array('dominion_form', NULL, $blueprint),
      'access arguments' => array("manage $blueprint subsites"),
      'type' => MENU_LOCAL_ACTION,
      'file' => 'dominion.crud.inc',
      'weight' => $weight,
    );
  }

  $menu['admin/structure/dominion/list/%'] = array(
    'title' => 'Edit subsite',
    'title callback' => 'dominion_title',
    'title arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dominion_form', 4),
    'access arguments' => array('manage dominion subsites'),
    'description' => 'Edit dominion record.',
    'file' => 'dominion.crud.inc',
    'weight' => -10,
  );

  $menu['admin/structure/dominion/list/%/edit'] = array(
    'title' => 'Edit',
    'access arguments' => array('manage dominion subsites'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );

  $menu['admin/structure/dominion/list/%/delete'] = array(
    'title' => 'Delete',
    'access callback' => 'dominion_subsite_edit_access',
    'access arguments' => array(4),
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dominion_delete_form', 4),
    'file' => 'dominion.crud.inc',
    'weight' => 50,
  );
  $menu['admin/structure/dominion/list/%/members'] = array(
    'title' => 'Members',
    'page callback' => 'dominion_admin_members',
    'page arguments' => array(4),
    'access arguments' => array('manage dominion subsites'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'dominion.admin.inc',
    'weight' => 5,
  );

  $menu['admin/structure/dominion/list/members/autocomplete/username'] = array(
    'page callback' => 'dominion_admin_users_autocomplete_username',
    'access arguments' => array('manage dominion subsites'),
    'type' => MENU_CALLBACK,
    'file' => 'dominion.admin.inc',
  );
  $menu['admin/structure/dominion/list/members/autocomplete/email'] = array(
    'page callback' => 'dominion_admin_users_autocomplete_email',
    'access arguments' => array('manage dominion subsites'),
    'type' => MENU_CALLBACK,
    'file' => 'dominion.admin.inc',
  );
  $menu['admin/structure/dominion/list/%/remove-member/%/%'] = array(
    'title' => 'Remove member',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dominion_admin_delete_member_form', 4, 6, 7),
    'access arguments' => array('manage dominion subsites'),
    'type' => MENU_CALLBACK,
    'file' => 'dominion.admin.inc',
    'weight' => 1,
  );
  $menu['admin/structure/dominion/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure settings for Dominion module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dominion_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'dominion.admin.inc',
    'weight' => 2,
  );
  $menu['admin/structure/dominion/settings/core'] = array(
    'title' => 'Dominion core',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dominion_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'dominion.admin.inc',
    'weight' => 0,
  );

  $menu['admin/structure/dominion/settings/blueprint'] = array(
    'title' => 'Blueprint',
    'page callback' => 'dominion_admin_blueprint_page',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'dominion.blueprint.inc',
    'weight' => 2,
  );

  $menu['admin/structure/dominion/settings/blueprint/add'] = array(
    'title' => 'Add blueprint',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dominion_blueprint_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'dominion.blueprint.inc',
  );

  $menu['admin/structure/dominion/settings/blueprint/%/edit'] = array(
    'title' => 'Edit blueprint',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dominion_blueprint_form', 5),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'dominion.blueprint.inc',
  );

  $menu['admin/structure/dominion/settings/blueprint/%/delete'] = array(
    'title' => 'Delete blueprint',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dominion_blueprint_delete_form', 5),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'dominion.blueprint.inc',
  );

  $path = dominion_path(DOMINION_VAR_PATH_FRONTPAGE, DOMINION_VAR_PATH_FRONTPAGE_DEFAULT);
  $menu[$path] = array(
    'page callback' => 'dominion_display_node',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $menu;
}

function dominion_subsite_edit_access($domain_id) {
  if ($subsite = dominion_get_info($domain_id)) {
    if ($subsite->locked) {
      return user_access('administer site configuration');
    }
    else {
      return user_access('manage dominion subsites');
    }
  }
  return FALSE;
}

function dominion_path($name, $value, $set = FALSE) {
  static $paths = array();
  if ($set) {
    $paths[$name] = $value;
    variable_set($name, $value);
  }
  if (!isset($paths[$name])) {
    $paths[$name] = variable_get($name, $value);
  }
  return $paths[$name];
}

/**
 * Determine if a domain is a subsite handled by Dominion.
 *
 * @param int $domain_id
 * @return bool
 *  True if found, FALSE otherwise
 */
function dominion_is_subsite($domain_id = NULL) {
  global $_domain;
  $is_subsite = FALSE; // Pessimism
  $res = db_select('domain', 'd')
  ->fields('d', array('domain_id'))
  ->condition('domain_id', $domain_id ? $domain_id : $_domain['domain_id'], '=')
  ->condition('dominion_domain', 1, '=')
  ->execute()->fetchField();
  if ($res) {
    $is_subsite = TRUE;
  }
  return $is_subsite;
}

/**
 * Check if a domain already exists in the domain or domain_alias table
 *
 * @return bool
 *  True if found, FALSE otherwise
 */
function _dominion_domain_exists($domain, $ignore_domain_id = -1) {
  $exists = FALSE; // Pessimism

  $res = db_select('domain', 'd')
    ->fields('d', array('domain_id'))
    ->condition('d.subdomain', $domain)
    ->condition('d.domain_id', $ignore_domain_id, '<>' )
    ->isNull('d.dominion_directory')
    ->execute()
    ->fetchField();

  if ($res) {
    $exists = TRUE;
  }
  // Checking Domain Alias if enabled and no domain_id was found
  if (!$exists && module_exists('domain_alias')) {
    $res = db_select('domain_alias', 'd')
    ->fields('d', array('alias_id'))
    ->condition('pattern', $domain, '=')
    ->condition('domain_id', $ignore_domain_id)
    ->execute()
    ->fetchField();
    if ($res) {
      $exists = TRUE;
    }
  }
  return $exists;
}

/**
 * Create a new domain record.
 *
 * @param string $subdomain
 * @param string $name
 * @param string $directory
 * @param string $blueprint
 * @return int Domain id
 */
function _dominion_create_domain($subdomain, $name, $directory = NULL, $blueprint = NULL, $locked = FALSE) {
  // The new weight is just the count of all domains.
  $query = db_select('domain', 'd')->fields('d');
  $query->addExpression('COUNT(*)', 'weight');
  $weight = $query->execute()->fetchField();

  // Generate machine name.
  $machine_name = strtolower($subdomain);
  if ($directory) {
    $machine_name .= '_' . strtolower($directory);
  }
  $machine_name = preg_replace('/:[0-9]+$/', '', $machine_name);
  $machine_name = preg_replace('/[^a-z0-9]/', '_', $machine_name);

  $domain = new stdClass();
  $domain->subdomain = $subdomain;
  $domain->sitename = $name;
  $domain->scheme = 'http';
  $domain->valid = 1;
  $domain->domain_id = NULL;
  $domain->weight = $weight;
  $domain->is_default = 0;
  $domain->machine_name = $machine_name;
  $domain->dominion_domain = 1;
  $domain->dominion_locked = (int) $locked;
  if ($directory) {
    $domain->dominion_directory = $directory;
  }
  $domain->dominion_blueprint = $blueprint;
  $domain->path = $domain->scheme . '://' . $domain->subdomain . '/' . $directory;
  $domain->site_grant = TRUE;

  // Store the data, using the machine_name to generate a numeric id.
  // Note that we _must_ have a numeric key for {node_access}.
  drupal_write_record('domain_export', $domain, array());
  drupal_write_record('domain', $domain, array());

  // Wait 100ms. This is sometimes required due to delays in MySQL inserts.
  // We must be sure that the domain can be found after it is created.
  usleep(100000);
  drupal_static_reset('domain_lookup_domains');
  drupal_static_reset('domain_lookup_result');

  $domain = (array) $domain;
  module_invoke_all('domain_insert', $domain, array());

  menu_rebuild();

  return $domain['domain_id'];
}

/**
 * Update a domain record.
 *
 * @param int $domain_id
 * @param string $subdomain
 * @param string $name
 * @param string $directory
 * @return int
 */
function _dominion_update_domain($domain_id, $subdomain, $sitename, $directory = NULL, $locked = FALSE) {
  db_update('domain')
    ->fields(array(
      'subdomain' => $subdomain,
      'sitename' => $sitename,
      'dominion_directory' => $directory,
      'dominion_locked' => (int) $locked,
    ))
    ->condition('domain_id', $domain_id)
    ->execute();
}

/**
 * Loads dominion domain data
 * this is called if there is as of yet no caching for the data
 *
 * @param int $domain_id
 * @param bool $reset Reset the internal static cache
 * @return object
 */
function _dominion_load_info($domain_id) {
  // Get information from the subsite and domain tables
  $subsite = db_select('domain', 'd')
    ->fields('d', array('domain_id', 'sitename', 'scheme', 'subdomain', 'dominion_directory', 'dominion_blueprint', 'dominion_locked'))
    ->condition('domain_id', $domain_id)
    ->condition('dominion_domain', 1)
    ->execute()
    ->fetchObject();

  // Exit the function if there is no subsite.
  if (!$subsite) {
    return FALSE;
  }

  // Remove dominion_ prefixes.
  $subsite->directory = $subsite->dominion_directory;
  unset($subsite->dominion_directory);
  $subsite->blueprint = $subsite->dominion_blueprint;
  unset($subsite->dominion_blueprint);
  $subsite->locked = $subsite->dominion_locked;
  unset($subsite->dominion_locked);

  // Get root and parent domain id's.
  $subsite->root = NULL;
  $subsite->parent = NULL;
  $root_directory_length = -1;
  $parent_directory_length = -1;
  $candidates = db_select('domain', 'd')
    ->fields('d', array('domain_id', 'dominion_directory'))
    ->condition('d.subdomain', $subsite->subdomain)
    ->execute()
    ->fetchAll();
  foreach ($candidates as $candidate) {
    if (strlen($candidate->dominion_directory) < strlen($subsite->directory)) {
      if (empty($candidate->dominion_directory) || (substr($subsite->directory, 0, strlen($candidate->dominion_directory) + 1) == $candidate->dominion_directory . '/')) {
        if ($root_directory_length < 0 || strlen($candidate->dominion_directory) < $root_directory_length) {
          $root_directory_length = strlen($candidate->dominion_directory);
          $subsite->root = $candidate->domain_id;
        }
        if ($parent_directory_length < 0 || strlen($candidate->dominion_directory) > $parent_directory_length) {
          $parent_directory_length = strlen($candidate->dominion_directory);
          $subsite->parent = $candidate->domain_id;
        }
      }
    }
  }

  $subsite->frontpage = domain_conf_variable_get($domain_id, 'site_frontpage');

  // Get hostname (= subdomain without prefix)
  $domain_suffix = variable_get(DOMINION_VAR_DOMAIN_SUFFIX, DOMINION_VAR_DOMAIN_SUFFIX_DEFAULT);
  $regex = '/' . preg_quote($domain_suffix) . '$/';
  if ($subsite->directory) {
    $subsite->domain_type = 'directory';
  }
  elseif (preg_match($regex, $subsite->subdomain)) {
    $subsite->domain_type = 'subdomain';
  }
  else {
    $subsite->domain_type = 'domain';
  }

  // Build list of available functions
  $subsite->available_functions = db_select('dominion_function', 'f')
    ->fields('f', array('name'))
    ->condition('f.domain_id', $subsite->domain_id)
    ->execute()
    ->fetchCol();
  // Invoke hook_dominion_load
  foreach (module_implements('dominion_load') as $module) {
    $hook = $module . '_dominion_load';
    $hook($subsite);
  }

  return $subsite;
}

/**
 * Get the subsite information in an object.
 *
 * @param int $domain_id
 * @param bool $reset Reset the internal static cache
 * @return object
 */
function dominion_get_info($domain_id = NULL, $reset = FALSE) {
  global $_domain;
  $cache = drupal_static(__FUNCTION__, array(), $reset);
  $return = NULL;
  $domain_id = is_null($domain_id) ? $_domain['domain_id'] : $domain_id;
  if (isset($cache[$domain_id])) {
    return $cache[$domain_id];
  }

  $cid = 'domain_id:' . $domain_id;
  if ($cache_data = cache_get($cid, 'cache_dominion')) {
    $return = $cache_data->data;
  }
  else {
    $return = _dominion_load_info($domain_id);
    cache_set($cid, $return, 'cache_dominion', CACHE_PERMANENT);
  }
  $cache[$domain_id] = $return;

  return $return;
}

/**
 * Get a list of all available dominion functions.
 *
 * @return array
 */
function dominion_get_all_functions() {
  static $cache = NULL;

  if (is_array($cache)) {
    return $cache;
  }

  $functions = array();
  foreach (module_implements('dominion_functions') as $module) {
    $hook = "{$module}_dominion_functions";
    $functions += $hook();
  }

  $cache = $functions;
  return $functions;
}

/**
 * Check if a function is enabled on a given domain.
 *
 * @param string $name
 * @param int $domain_id
 * @return bool
 */
function dominion_has_function($name, $domain_id = NULL) {
  if (!$subsite = dominion_get_info($domain_id)) {
    // Given domain id is not a domain handled by dominion.
    return FALSE;
  }
  return in_array($name, $subsite->available_functions);
}

/**
 * Implements hook_dominion_functions().
 *
 * Provide functions configured as custom function on the dominion settings page.
 */
function dominion_dominion_functions() {
  $functions = variable_get(DOMINION_VAR_CUSTOM_FUNCTIONS, '');
  $functions = array_filter(array_unique(array_map('trim', explode("\n", $functions))));
  $output = array();
  foreach ($functions as $function) {
    $function = explode('|', $function, 2);
    $output[$function[0]] = $function[1];
  }
  return $output;
}

function dominion_display_node($type = NULL, $sticky_only = FALSE) {
  global $_domain;

  // If no type has been set, use the frontpage nodetype from the blueprint.
  if (empty($type)) {
    if (!($subsite = dominion_get_info()) || !($blueprint = dominion_blueprint_load($subsite->blueprint))) {
      drupal_not_found();
      return;
    }
  }

  $query = db_select('node', 'n')
    ->fields('n', array('nid'));
  $da = $query->join('domain_access', 'da', 'n.nid = da.nid');
  $query->condition("$da.realm", 'domain_id')
    ->condition("$da.gid", $_domain['domain_id']);
  $sticky_only ? $query->condition('n.sticky', 1) : FALSE;
  $query->range(0, 1);
  $nid = $query->execute()->fetchField();
  if (!$nid) {
    drupal_not_found();
    return;
  }
  $node = node_load($nid);

  drupal_set_title($node->title);

  return node_view($node, 'full');
}

function dominion_save_node($domain_id, $type, $title, $comment = 0) {
  global $user;

  // Check if node already exists.
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'));
  $query->join('domain_access', 'da', 'da.nid = n.nid');
  $query->condition('n.type', $type);
  $query->condition('da.realm', 'domain_id');
  $query->condition('da.gid', $domain_id);
  $node = $query->execute()->fetchObject();

  // Node doesn't exist, create it.
  if (empty($node)) {
    $node = new stdClass;
    $node->type = $type;
    $node->uid = $user->uid;
    $node->language = LANGUAGE_NONE;
    $node->title = $title;
    $node->status = 1;
    $node->domains = array($domain_id => $domain_id);
    $node->domain_site = FALSE;
    $node->domain_source = $domain_id;
    $node->comment = 0;
    node_object_prepare($node);
    node_save($node);
  }

  return $node->nid;
}

function dominion_delete_node($domain_id, $type, $sticky_only = FALSE) {
  $query = db_select('node', 'n')
  ->fields('n', array('nid'))
  ->join('domain_access', 'da', 'da.nid = n.nid  ')
  ->condition('n.type', $type)
  ->condition('da.realm', 'domain_id')
  ->condition('da.gid', $domain_id);
  $sticky_only ? $query->condition('n.sticky', 1) : FALSE;
  $nid = $query->execute()
  ->fetchField();
  // Deletes the node.
  node_delete($nid);
}

/**
 * Implements hook_domain_bootstrap_load().
 *
 * The domain module requires modules to implement hook_domain_bootstrap_load
 * or _domain_bootstrap_load in order to get this module in the domain bootstrap
 * process.
 *
 * @see domain.api.php
 */
function dominion_domain_bootstrap_load() {
  // Nothing here.
}

/**
 * Implements hook_domain_bootstrap_lookup().
 */
function dominion_domain_bootstrap_lookup($domain) {
  global $_dominion_directory;
  $_dominion_directory = _dominion_get_directory($_GET['q'], $domain);
  return $domain;
}

/**
 * Extract subsite from path.
 *
 * @param string $path
 * @param array $domain
 *   Array as returne from domain_load().
 * @output string
 */
function _dominion_get_directory(&$path, &$domain) {
  $directory = '';
  $candidates = db_select('domain', 'd')
    ->fields('d', array('domain_id', 'dominion_directory', 'sitename'))
    ->condition('d.subdomain', $domain['subdomain'])
    ->isNotNull('d.dominion_directory')
    ->execute()
    ->fetchAll();
  $q = $path . '/';
  foreach ($candidates as $candidate) {
    if (substr($q, 0, strlen($candidate->dominion_directory) + 1) == $candidate->dominion_directory . '/') {
      $path = trim(substr($q, strlen($candidate->dominion_directory)), '/');
      $arg_cache = &drupal_static('arg');
      $domain['domain_id'] = $candidate->domain_id;
      $domain['sitename'] = $candidate->sitename;
      $directory = $candidate->dominion_directory;
    }
  }
  return $directory;
}

/**
 * Implements hook_module_implements_alter().
 *
 * Disable hook_url_outbound_alter from the domain module.
 *
 * @see dominion_url_outbound_alter()
 */
function dominion_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'url_outbound_alter' && isset($implementations['domain'])) {
    unset($implementations['domain']);
  }
}

/**
 * Implements dominion_url_outbound_alter().
 *
 * Changes are made to make url() work with paths starting with a slash and
 * to make links to other subsites work.
 * This conflicts with the domain_custom_url.inc from domain module.
 * That hook is disabled by dominion_module_implements_alter().
 */
function dominion_url_outbound_alter(&$path, &$options, $original_path) {
  global $_domain, $_dominion_directory, $is_https;

  // Don't alter urls starting with "//".
  if (substr($original_path, 0, 2) === '//') {
    return $original_path;
  }

  if ($original_path == $_GET['q'] || substr($original_path, 0, 5) != 'node/') {
    // Do not cache in these cases.
    $cid = NULL;
  }
  else {
    // Build a cache id using a hash.
    // Prefix with the path, to make it possible to wipe cache using wildcards.
    $cid = 'url:' . $original_path . ':' . sha1(serialize($options) . $path . $_domain['domain_id'] . ($is_https ? 'S' : 'U') . $_dominion_directory);
  }

  if ($cid && ($cache = cache_get($cid, 'cache_dominion'))) {
    $path = $cache->data->path;
    $options['external'] = $cache->data->external;
    $options['alias'] = $cache->data->alias;
    $options['absolute'] = $cache->data->absolute;
    return;
  }

  $use_https = isset($options['https']) ? $options['https'] : $is_https;

  // The node/%/edit links are requested with non-ssl base url and absolute = TRUE,
  // even when currently on SSL. Manually rewrite these links to https.
  if ($use_https && !empty($options['base_url'])) {
    $options['base_url'] = str_replace('http:', 'https:', $options['base_url']);
  }

  // Links to the frontpage are to the current subsite frontpage.
  if (!$options['external'] && !empty($_dominion_directory)) {
    $path = $_dominion_directory . ($path == '<front>' || $path == '' ? '' : '/' . drupal_get_path_alias($path));
    $options['alias'] = TRUE;
  }

  // Make URL's work with links starting with a slash.
  if (substr($original_path, 0, 1) == '/') {
    $path = '';
    if ($options['absolute']) {
      $scheme = $use_https || !empty($options['https']) ? 'https' : $_domain['scheme'];
      $path .= $scheme . '://' . $_domain['subdomain'];
    }
    $path .= '/' . trim($original_path, '/');
    $options['external'] = TRUE;
  }
  else {
    // Rewrite node links.
    if (!$options['external'] && preg_match('/^node\\/([0-9]+)$/', $original_path, $match)) {
      $nid = $match[1];
      $access = db_select('domain_access', 'da')
        ->fields('da', array('gid', 'realm'))
        ->condition('da.nid', $nid)
        ->execute()
        ->fetchAll();
      $domain_site = FALSE;
      $domains = array();
      foreach ($access as $rule) {
        switch ($rule->realm) {
          case 'domain_site':
            $domain_site = TRUE;
            break;
          case 'domain_id':
            $domains[] = (int) $rule->gid;
            break;
        }
      }
      sort($domains);

      $use_source = FALSE;
      if ($original_path == $_GET['q'] && $options['absolute']) {
        // Absolute path to the same page is used to get the canonical URL.
        // Always use the source domain in this case.
        $use_source = TRUE;
      }

      if (!$use_source && (in_array($_domain['domain_id'], $domains) || $domain_site)) {
        $target_domain = $_domain['domain_id'];
      }
      elseif (module_exists('domain_source')) {
        $source = db_select('domain_source', 's')
          ->fields('s', array('domain_id'))
          ->condition('s.nid', $nid)
          ->execute()
          ->fetchField();
        $target_domain = $source ? $source : reset($domains);
      }
      else {
        $target_domain = reset($domains);
      }

      if ($target = dominion_get_info($target_domain)) {
        $current = dominion_get_info();
        $path = '';
        if ($options['absolute']) {
          $scheme = $use_https ? 'https' : $target->scheme;
          $path .= $scheme . '://' . $target->subdomain;
        }
        else {
          if ($current->subdomain != $target->subdomain) {
            $path .= '//' . $target->subdomain;
          }
        }
        if ($target->directory) {
          $path .= '/' . $target->directory;
        }
        $frontpage = domain_conf_variable_get($target_domain, 'site_frontpage');
        if ($original_path != $frontpage) {
          // Only add the path if it's not the subsites frontpage.
          $alias = '';
          if (function_exists('domain_path_lookup_path')) {
            // Check domain specific paths if domain_path module exists.
            $alias = domain_path_lookup_path('alias', $original_path);
          }
          if (empty($alias)) {
            // Lookup Drupal alias.
            $alias = drupal_get_path_alias($original_path);
          }
          $path .= '/' . $alias;
        }
        $options['external'] = TRUE;
      }
    }

    if (preg_match('#.*/.*\\.[a-z0-9]{2,}$#i', $original_path) && is_file($original_path)) {
      // Use the original path for links to files (without the subsite path).
      $path = $original_path;
    }
  }

  if ($cid) {
    $cache = new stdClass();
    $cache->path = $path;
    $cache->absolute = $options['absolute'];
    $cache->alias = $options['alias'];
    $cache->external = $options['external'];
    cache_set($cid, $cache, 'cache_dominion', 900);
  }
}

/**
 * Implements hook_node_update().
 */
function dominion_node_insert($node) {
  cache_clear_all('url:node/' . $node->nid, 'cache_dominion', TRUE);
}

/**
 * Implements hook_node_update().
 */
function dominion_node_update($node) {
  cache_clear_all('url:node/' . $node->nid, 'cache_dominion', TRUE);
}

/**
 * Implements hook_token_info().
 */
function dominion_token_info() {
  return array(
    'tokens' => array(
      'domain' => array(
        'parent' => array(
          'name' => t('Parent domain'),
          'description' => t('Parent domain based on subsite directories.'),
          'type' => 'domain',
        ),
        'root' => array(
          'name' => t('Root domain'),
          'description' => t('Root domain based on subsite directories.'),
          'type' => 'domain',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function dominion_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'domain' && !empty($data['domain'])) {
    $domain_id = $data['domain']['domain_id'];
    if ($subsite = dominion_get_info($domain_id)) {
      foreach ($tokens as $name => $original) {
        switch ($name) {
          // Default value for chained token.
          case 'parent':
            if ($subsite->parent && ($parent = domain_load($subsite->parent))) {
              $replacements[$original] = $parent['sitename'];
            }
            break;
          // Default value for chained token.
          case 'root':
            if ($subsite->root && ($root = domain_load($subsite->root))) {
              $replacements[$original] = $root['sitename'];
            }
            break;
        }
      }
      if ($parent_tokens = token_find_with_prefix($tokens, 'parent')) {
        if ($subsite->parent && ($parent = domain_load($subsite->parent))) {
          $replacements += token_generate('domain', $parent_tokens, array('domain' => $parent), $options);
        }
      }
      if ($root_tokens = token_find_with_prefix($tokens, 'root')) {
        if ($subsite->root && ($root = domain_load($subsite->root))) {
          $replacements += token_generate('domain', $parent_tokens, array('domain' => $parent), $options);
        }
      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_tokens_alter().
 */
function dominion_tokens_alter(array &$replacements, array $context) {
  if ($context['type'] == 'domain' && !empty($context['tokens']['path'])) {
    if ($subsite = dominion_get_info($context['data']['domain']['domain_id'])) {
      $replacements[$context['tokens']['path']] .= $subsite->directory;
    }
  }
}

/**
 * Implements hook_hansel_action_types().
 */
function dominion_hansel_action_types() {
  return array(
    'add parent subsites' => array(
      'get crumbs' => 'dominion_hansel_action_add_parent_subsites_get_crumbs',
      'config form' => 'dominion_hansel_action_add_parent_subsites_config_form',
      'file' => 'dominion.hansel.inc',
    ),
  );
}

/**
 * Implements hook_hansel_switch_types().
 */
function dominion_hansel_switch_types() {
  return array(
    'blueprint' => array(
      'compare' => 'dominion_hansel_switch_url_blueprint_compare',
      'file' => 'dominion.hansel.inc',
    ),
  );
}

/**
 * Load blueprint.
 *
 * @param string $blueprint
 * @return object
 */
function dominion_blueprint_load($blueprint = NULL) {
  $query = db_select('dominion_blueprint', 'b')->fields('b');
  if ($blueprint) {
    $query->condition('b.blueprint', $blueprint);
  }
  else {
    // Empty argument can be used to load the default blueprint.
    $query->condition('b.is_default', 1);
  }
  $config = $query->execute()->fetchObject();
  if (!$config) {
    return FALSE;
  }
  $config->default_functions = db_select('dominion_blueprint_function', 'f')
    ->fields('f', array('function'))
    ->condition('f.blueprint', $blueprint)
    ->execute()
    ->fetchCol();

  // Invoke load hook.
  foreach (module_implements('dominion_blueprint_load') as $module) {
    $function = "{$module}_dominion_blueprint_load";
    $function($config);
  }

  return $config;
}

/**
 * Implements hook_context_plugins().
 *
 * Provide a condition plugin for subsite blueprints.
 */
function dominion_context_plugins() {
  $plugins = array();
  $plugins['dominion_context_condition_blueprint'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'dominion'),
      'file' => 'dominion.context.inc',
      'class' => 'dominion_context_condition_blueprint',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_context_registry().
 */
function dominion_context_registry() {
  return array(
    'conditions' => array(
      'blueprint' => array(
        'title' => t('Subsite blueprint'),
        'description' => t('Set this context when the subsite uses a specific blueprint.'),
        'plugin' => 'dominion_context_condition_blueprint',
      ),
    ),
  );
}

/**
 * Implement hook_context_page_condition().
 */
function dominion_context_page_condition() {
  if ($plugin = context_get_plugin('condition', 'blueprint')) {
    $plugin->execute();
  }
}

/**
 * Implements hook_pathologic_alter().
 */
function dominion_pathologic_alter(&$url_params, $parts, $settings) {
  global $_domain;
  $domain = $_domain;
  $path = $url_params['path'];
  $target_directory = _dominion_get_directory($path, $domain);
  if (empty($path) && !empty($target_directory)) {
    $path = "/$target_directory";
  }
  else {
    // Translate to internal path to make sure that the flow in url_output_alter applies.
    $path = drupal_get_normal_path($path);
  }
  $url_params['path'] = $path;
  $url_params['options']['absolute'] = FALSE;
}

/**
 * Implements hook_flush_caches().
 */
function dominion_flush_caches() {
  return array('cache_dominion');
}

/**
 * Implements hook_boot().
 */
function dominion_boot() {
  global $user, $_domain;

  // Check if it is worth checking if this domain exists.
  // Domain will use the default domain for unknown hosts. If it does not match
  // the domain suffix, it may be an unknown domain or a configuration error.
  $suffix = variable_get(DOMINION_VAR_DOMAIN_SUFFIX, '');
  $host = $_domain['subdomain'];
  if ($_domain['domain_id'] == 1 && $host != trim($suffix, '.') && $host != "www$suffix") {

    // Check if a domain exists without the www-prefix.
    if (substr($host, 0, 4) === 'www.') {
      $domain = db_select('domain', 'd')
        ->fields('d', array('scheme', 'subdomain'))
        ->condition('d.subdomain', substr($host, 4))
        ->execute()
        ->fetchObject();
      if ($domain) {
        // The drupal_goto() function doesn't exists yet in hook_boot().
        header('Location: ' . $domain->scheme . '://' . $domain->subdomain . '/' . request_path());
        exit;
      }
    }

    // Check if this domain exists.
    $domain = db_select('domain', 'd')
      ->fields('d', array('scheme', 'subdomain'))
      ->condition('d.subdomain', $host)
      ->execute()
      ->fetchObject();
    if (!$domain) {
      // No domain exists with the requested hostname.
      // Set the unknown domain flag, which will set the menu item to the 404 page in hook_init().
      dominion_unknown_domain(true);
    }
  }

  // Check if the user has additional roles on this domain.
  if ($user->uid) {
    $user_roles = array_keys($user->roles);
    $add_roles = array();

    $role_mapping = db_select('dominion_role_mapping', 'rm')
      ->fields('rm', array('rid', 'target_rid'))
      ->condition('rm.domain_id', $_domain['domain_id'])
      ->execute()
      ->fetchAllKeyed();
    foreach ($role_mapping as $rid => $target_rid) {
      if (in_array($rid, $user_roles) && !in_array($target_rid, $user_roles)) {
        $add_roles[] = $target_rid;
      }
    }

    $query = db_select('dominion_editor_role', 'der')
      ->fields('der', array('rid'))
      ->condition('der.uid', $user->uid)
      ->condition('der.domain_id', $_domain['domain_id']);
    $de = $query->join('domain_editor', 'de', 'der.uid = de.uid');
    $query->condition("$de.domain_id", $_domain['domain_id']);
    $roles = $query->execute()
      ->fetchCol();
    $roles = $roles ? array_map('intval', $roles) : array();
    foreach ($roles as $rid) {
      if (!in_array($rid, $user_roles)) {
        $add_roles[] = $rid;
      }
    }
    if ($add_roles) {
      $roles = db_select('role', 'r')
        ->fields('r', array('rid', 'name'))
        ->condition('r.rid', $add_roles)
        ->execute()
        ->fetchAll();
      foreach ($roles as $role) {
        $user->roles[$role->rid] = $role->name;
      }
      drupal_static_reset('user_access');
    }
  }
}

/**
 * Get or set the unknown domain flag.
 *
 * @param bool $set
 * @return bool
 */
function dominion_unknown_domain($set = NULL) {
  static $unknown = false;
  if (!is_null($set)) {
    $unknown = $set;
  }
  return $unknown;
}

/**
 * Implements hook_init().
 */
function dominion_init() {
  if (dominion_unknown_domain()) {
    menu_set_active_item(MENU_NOT_FOUND);
  }
}

/**
 * Implements hook_domain_path().
 *
 * Add subsite directory to redirects to other domains done by the domain module.
 */
function dominion_domain_path($domain_id, &$path, &$options, $original_path) {
  if ($subsite = dominion_get_info($domain_id)) {
    if (!empty($subsite->directory)) {
      $path = drupal_get_path_alias($path);
      $path = $subsite->directory . '/' . $path;
      $options['alias'] = TRUE;
    }
  }
}
