<?php

define('DOMINION_MENU_VAR_CREATE_PRIMARY_MENU', 'dominion_menu_create_primary');
define('DOMINION_MENU_VAR_CREATE_PRIMARY_MENU_DEFAULT', 1);
define('DOMINION_MENU_VAR_CREATE_SECONDARY_MENU', 'dominion_menu_create_secondary');
define('DOMINION_MENU_VAR_CREATE_SECONDARY_MENU_DEFAULT', 0);
define('DOMINION_MENU_VAR_PRIMARY_MENU_SOURCE', 'dominion_primary_menu_source');
define('DOMINION_MENU_VAR_SECONDARY_MENU_SOURCE', 'dominion_secondary_menu_source');
define('DOMINION_MENU_VAR_DEFAULT_PRIMARY_MENU', 'dominion_default_primary_menu');
define('DOMINION_MENU_VAR_DEFAULT_PRIMARY_MENU_DEFAULT', "<front>|Home");
define('DOMINION_MENU_VAR_DEFAULT_SECONDARY_MENU', 'dominion_default_secondary_menu');
define('DOMINION_MENU_VAR_DEFAULT_SECONDARY_MENU_DEFAULT', "");
define('DOMINION_MENU_VAR_PRIMARY_MENU_TITLE', 'dominion_primary_menu_title');
define('DOMINION_MENU_VAR_PRIMARY_MENU_TITLE_DEFAULT', '@name primary links');
define('DOMINION_MENU_VAR_SECONDARY_MENU_TITLE', 'dominion_secondary_menu_title');
define('DOMINION_MENU_VAR_SECONDARY_MENU_TITLE_DEFAULT', '@name secondary links');

define('DOMINION_MENU_PRIMARY_NAME', 'd%');
define('DOMINION_MENU_SECONDARY_NAME', 'd%-secondary');

/**
 * Implements hook_permission().
 */
function dominion_menu_permission() {
  return array(
    'edit own menus' => array(
      'title' => t('Edit own menu\'s'),
      'description' => t('Add and edit links on menu\'s belonging to assigned domains.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function dominion_menu_menu() {
  $menu = array();

  $menu['admin/structure/dominion/settings/menu'] = array(
    'title' => 'Menu',
    'page callback' => 'dominion_menu_admin_page',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'dominion_menu.admin.inc',
    'weight' => 4,
  );

  $menu['admin/structure/dominion/settings/menu/add'] = array(
    'title' => 'Add menu configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dominion_menu_menu_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'dominion_menu.admin.inc',
  );

  $menu['admin/structure/dominion/settings/menu/%/edit'] = array(
    'title' => 'Edit menu configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dominion_menu_menu_form', 5),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'dominion_menu.admin.inc',
  );

  $menu['admin/structure/dominion/settings/menu/%/delete'] = array(
    'title' => 'Delete menu configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dominion_menu_menu_delete_form', 5),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'dominion_menu.admin.inc',
  );

  return $menu;
}

/**
 * Implements hook_menu_alter().
 *
 * Overrule menu access callbacks for menu administration.
 */
function dominion_menu_menu_alter(&$menu) {
  $menu['admin/structure/menu']['page callback'] = 'dominion_menu_overview_page';
  $menu['admin/structure/menu']['access callback'] = 'dominion_menu_menu_access';
  $menu['admin/structure/menu']['access arguments'] = array();
  $menu['admin/structure/menu']['file'] = 'dominion_menu.admin.inc';
  $menu['admin/structure/menu']['module'] = 'dominion_menu';
  $menu['admin/structure/menu/manage/%menu']['access callback'] = 'dominion_menu_menu_access';
  $menu['admin/structure/menu/manage/%menu']['access arguments'] = array(4);
  $menu['admin/structure/menu/manage/%menu']['page arguments'] = array('dominion_menu_overview_form', 4);
  $menu['admin/structure/menu/manage/%menu']['file'] = 'dominion_menu.admin.inc';
  $menu['admin/structure/menu/manage/%menu']['module'] = 'dominion_menu';
  $menu['admin/structure/menu/manage/%menu/add']['access callback'] = 'dominion_menu_menu_access';
  $menu['admin/structure/menu/manage/%menu/add']['access arguments'] = array(4);
  $menu['admin/structure/menu/item/%menu_link/edit']['access callback'] = 'dominion_menu_menu_access';
  $menu['admin/structure/menu/item/%menu_link/edit']['access arguments'] = array(4);
  $menu['admin/structure/menu/item/%menu_link/reset']['access callback'] = 'dominion_menu_menu_access';
  $menu['admin/structure/menu/item/%menu_link/reset']['access arguments'] = array(4);
  $menu['admin/structure/menu/item/%menu_link/delete']['access callback'] = 'dominion_menu_menu_access';
  $menu['admin/structure/menu/item/%menu_link/delete']['access arguments'] = array(4);
}

/**
 * Access callback for menu admin pages.
 *
 * @param array $menu
 *   Menu or menu item. Only $menu['menu_name'] is used. Omit this parameter
 *   to check if the user can edit at least one menu.
 */
function dominion_menu_menu_access($menu = NULL) {
  if (user_access('administer menu')) {
    return TRUE;
  }
  if (!user_access('edit own menus')) {
    return FALSE;
  }

  global $user;
  static $menu_user = NULL;
  if (is_null($menu_user)) {
    $domain_user = db_select('domain_editor', 'de')
      ->fields('de', array('domain_id'))
      ->condition('de.uid', $user->uid)
      ->execute()
      ->fetchCol();
    if (empty($domain_user)) {
      $menu_user = array();
    }
    else {
      $menu_user = db_select('dominion_menu', 'dm')
        ->fields('dm', array('menu_name'))
        ->condition('dm.domain_id', $domain_user)
        ->execute()
        ->fetchCol();
      foreach ($menu_user as $key => $menu_name) {
        $menu_user[$key] = $menu_name;
      }
    }
  }

  if ($menu) {
    return in_array($menu['menu_name'], $menu_user);
  }
  else {
    return (bool) $menu_user;
  }
}

/**
 * Implements hook_block_info().
 */
function dominion_menu_block_info() {
  $blocks = array();
  $configs = db_select('dominion_menu_config', 'mc')
    ->fields('mc', array('cid', 'name'))
    ->execute()
    ->fetchAll();
  foreach ($configs as $config) {
    $blocks[$config->cid] = array(
      'info' => 'Dominion menu: '. $config->name,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dominion_menu_block_view($delta = '') {
  global $user;

  if (!$subsite = dominion_get_info()) {
    return;
  }
  foreach ($subsite->menus as $menu) {
    if ($menu->cid == $delta) {
      $cid = $user->uid ? NULL : 'dominion_menu:' . $delta . ':' . $subsite->domain_id;
      if ($cid && ($cache = cache_get($cid, 'cache_dominion'))) {
        return $cache->data;
      }

      $block = NULL;
      $menus = menu_get_menus();
      if (isset($menus[$menu->menu_name])) {
        $block = array(
          'subject' => check_plain($menu->name),
          'content' => menu_tree($menu->menu_name),
        );
      }
      if ($cid) {
        cache_set($cid, $block, 'cache_dominion', 60);
      }
      return $block;
    }
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function dominion_menu_form_dominion_form_alter(&$form, &$form_state) {
  if (!empty($form['#domain_id'])) {
    // Only for new subsites.
    return;
  }

  $blueprint = dominion_blueprint_load($form['#blueprint']);
  if (!$blueprint->menu_configs) {
    // This blueprint has no menu configuration.
    return;
  }

  $query = db_select('dominion_menu_config', 'mc')
    ->fields('mc', array('cid', 'name', 'copy_source', 'inherit', 'inherit_allow_override'))
    ->condition('mc.cid', $blueprint->menu_configs);
  if (!user_access('administer site configuration')) {
    $query->condition('mc.inherit_allow_override', 1);
  }
  $configs = $query->orderBy('cid', 'asc')
    ->execute()
    ->fetchAll();
  if ($configs) {
    $options = array();
    $default = array();
    foreach ($configs as $config) {
      $options[$config->cid] = $config->name;
      if ($config->inherit) {
        $default[$config->cid] = $config->cid;
      }
    }
    $form['menu'] = array(
      '#type' => 'fieldset',
      '#title' => t('Menu\'s'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
    );
    $form['menu']['inherit'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Inherit menu\'s'),
      '#options' => $options,
      '#default_value' => $default,
      '#description' => t('These menu\'s will be inherited from parent subsites. A new menu will be created when unchecked or in case there is no parent.'),
    );
  }
}

/**
 * Implements hook_dominion_load()
 */
function dominion_menu_dominion_load(&$subsite) {
  $query = db_select('dominion_menu', 'm')
    ->fields('m', array('menu_name', 'cid'));
  $mc = $query->join('dominion_menu_config', 'mc', 'm.cid = mc.cid');
  $subsite->menus = $query->fields($mc, array('name', 'description_template'))
    ->condition('m.domain_id', $subsite->domain_id)
    ->execute()
    ->fetchAll();
}

/**
 * Implements hook_dominion_insert().
 */
function dominion_menu_dominion_insert($domain_id, $form_values) {
  if ($domain_id == 1) {
    // Not for main domain.
    return;
  }
  $functions = empty($form_values['functions']) ? array() : $form_values['functions'];
  module_load_include('inc', 'dominion_menu');
  $overrides = array();
  if (!empty($form_values['menu']['inherit'])) {
     foreach ($form_values['menu']['inherit'] as $cid => $inherit) {
       $overrides[$cid] = array(
         'inherit' => (bool) $inherit,
       );
     }
  }
  _dominion_menu_create($domain_id, $functions, $overrides);
}

/**
 * Implements hook_dominion_update().
 */
function dominion_menu_dominion_update($domain_id, $form_values) {
  // Use the same procedure as on insert.
  // The menu create function checks for existence.
  dominion_menu_dominion_insert($domain_id, $form_values);
}

/**
 * Implements hook_dominion_delete().
 */
function dominion_menu_dominion_delete($subsite) {
  if ($subsite->domain_id == 1) {
    // Not for main domain.
    return;
  }
  module_load_include('inc', 'dominion_menu');
  _dominion_menu_delete($subsite->domain_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dominion_menu_form_dominion_blueprint_form_alter(&$form, &$form_state) {
  $options = db_select('dominion_menu_config', 'mc')
    ->fields('mc', array('cid', 'name'))
    ->orderBy('cid', 'asc')
    ->execute()
    ->fetchAllKeyed();
  if ($options) {
    if ($form['#blueprint']) {
      $blueprint = dominion_blueprint_load($form['#blueprint']);
      $default = drupal_map_assoc($blueprint->menu_configs);
    }
    else {
      // All options checked by default.
      $default = drupal_map_assoc(array_keys($options));
    }
    $form['menu'] = array(
      '#type' => 'fieldset',
      '#title' => t('Menu settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
    );
    $form['menu']['configs'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Menu\'s'),
      '#options' => $options,
      '#default_value' => $default,
      '#description' => t('Choose which menu\'s should be created for new subsites using this blueprint.'),
    );
  }
}

/**
 * Implements hook_dominion_blueprint_laod().
 */
function dominion_menu_dominion_blueprint_load(&$blueprint) {
  $blueprint->menu_configs = db_select('dominion_menu_config_blueprint', 'mcb')
    ->fields('mcb', array('cid'))
    ->condition('mcb.blueprint', $blueprint->blueprint)
    ->execute()
    ->fetchCol();
}

/**
 * Implements hook_dominion_blueprint_insert().
 */
function dominion_menu_dominion_blueprint_insert($blueprint, $form_values) {
  $cids = empty($form_values['menu']['configs']) ? array() : array_keys(array_filter($form_values['menu']['configs']));
  foreach ($cids as $cid) {
    db_insert('dominion_menu_config_blueprint')->fields(array(
      'cid' => $cid,
      'blueprint' => $blueprint,
    ))->execute();
  }
}

/**
 * Implements hook_dominion_blueprint_insert().
 */
function dominion_menu_dominion_blueprint_update($blueprint, $form_values) {
  dominion_menu_dominion_blueprint_delete($blueprint);
  dominion_menu_dominion_blueprint_insert($blueprint, $form_values);
}

/**
 * Implements hook_dominion_blueprint_delete().
 */
function dominion_menu_dominion_blueprint_delete($blueprint) {
  db_delete('dominion_menu_config_blueprint')
    ->condition('blueprint', $blueprint)
    ->execute();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dominion_menu_form_menu_edit_item_alter(&$form, &$form_state) {
  module_load_include('inc', 'dominion_menu');

  $item = $form['original_item']['#value'];
  $menus = array();
  foreach (_dominion_menu_get_copies('menu-' . $item['menu_name']) as $menu => $config) {
    // Only show the menu's to which we have access.
    if (dominion_menu_menu_access(array('menu_name' => $menu_name))) {
      $menus[$menu] = $config;
    }
  }
  if (empty($item['mlid'])) {
    $checked = array();
    foreach ($menus as $menu => $config) {
      if ($config->copy_by_default) {
        $checked[] = $menu;
      }
    }
  }
  else {
    $checked = array();
    foreach (array_keys($menus) as $menu) {
      if (_dominion_menu_get_copied_item($item, $menu)) {
        $checked[] = $menu;
      }
    }
  }

  if ($menus) {
    $form['dominion_menu'] = array(
      '#type' => 'fieldset',
      '#title' => t('Subsite menus'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#weight' => 5,
    );
    drupal_add_js(drupal_get_path('module', 'dominion_menu') . '/admin.js');
    $options = array();
    foreach ($menus as $menu => $config) {
      $options[$menu] = $config->title;
    }
    $form['dominion_menu']['dominion_menu_copy'] = array(
      '#type' => 'checkboxes',
      '#title' => empty($item['mlid']) ? t('Also create this item in the following menus') : t('Apply changes to the following menus'),
      '#options' => $options,
      '#default_value' => drupal_map_assoc($checked),
    );
    $form['#submit'][] = 'dominion_menu_copy_link';
  }

  // Limit list of possible parent items.
  foreach ($form['parent']['#options'] as $menu => $label) {
    list($menu_name, ) = explode(':', $menu);
    if (!dominion_menu_menu_access(array('menu_name' => $menu_name))) {
      unset($form['parent']['#options'][$menu]);
    }
  }
}

/**
 * Submit callback for menu_edit_item form.
 */
function dominion_menu_copy_link($form, &$form_state) {
  module_load_include('inc', 'dominion_menu');

  $item = $form_state['values'];
  $source_menu = $item['menu_name'];
  $mlid = empty($item['mlid']) ? 0 : $item['mlid'];

  $parent = NULL;
  if ($item['plid']) {
    $parent = db_select('menu_links', 'ml')
      ->fields('ml', array('link_path', 'link_title'))
      ->condition('ml.mlid', $item['plid'])
      ->range(0, 1)
      ->execute()
      ->fetchObject();
  }

  $menus = array_filter(array_values($item['dominion_menu_copy']));
  foreach ($menus as $menu) {
    if (isset($item['mlid'])) {
      unset($item['mlid']);
    }
    // Check if the destination menu is the same as the source menu
    // to prevent duplicate menu items.
    if ($menu != $source_menu) {
      $item['menu_name'] = $menu;
      if ($mlid) {
        // We are editing an existing item. Search the copy in the other menu.
        if ($mlid_target = _dominion_menu_get_copied_item($form['original_item']['#value'], $menu)) {
          $item['mlid'] = $mlid_target;
          // Get the original get_children value, menu_link_save() will always set this value to 0 otherwise.
          $item['has_children'] = db_select('menu_links', 'ml')
            ->fields('ml', array('has_children'))
            ->condition('ml.mlid', $mlid_target)
            ->execute()
            ->fetchField();
        }
      }
      if ($parent) {
        // Search the parent in the other menu.
        $plid = db_select('menu_links', 'ml')
          ->fields('ml', array('mlid'))
          ->condition('ml.menu_name', $menu)
          ->condition('ml.link_path', $parent->link_path)
          ->condition('ml.link_title', $parent->link_title)
          ->range(0, 1)
          ->execute()
          ->fetchField();
        $item['plid'] = (int) $plid;
      }
      menu_link_save($item);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dominion_menu_form_menu_item_delete_form_alter(&$form, &$form_state) {
  module_load_include('inc', 'dominion_menu');

  $item = $form['#item'];
  $all_menus = _dominion_menu_get_copies('menu-' . $item['menu_name']);
  $menus = array();
  foreach ($all_menus as $menu => $config) {
    if ($menu != $item['menu_name'] && _dominion_menu_get_copied_item($item, $menu)) {
      $menus[$menu] = $config->title;
    }
  }

  if ($menus) {
    $form['dominion_menu_copy'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Also delete this item from the following menus'),
      '#options' => $menus,
      '#default_value' => drupal_map_assoc(array_keys($menus)),
    );
    $form['#submit'][] = 'dominion_menu_delete_link';
  }
}

/**
 * Submit callback for menu_item_delete_form.
 */
function dominion_menu_delete_link($form, &$form_state) {
  module_load_include('inc', 'dominion_menu');

  $item = $form['#item'];
  $mlid = empty($item['mlid']) ? 0 : $item['mlid'];

  $menus = array_filter(array_values($form_state['values']['dominion_menu_copy']));
  foreach ($menus as $menu) {
    if ($mlid_target = _dominion_menu_get_copied_item($item, $menu)) {
      menu_link_delete($mlid_target);
    }
  }
}

/**
 * Delete a menu.
 *
 * @param int $domain_id
 * @param string $name
 */
function _dominion_menu_delete_menu($domain_id, $name) {
  // Check if other subsites are still using this menu.
  $others = db_select('dominion_menu', 'm')
    ->condition('m.menu_name', $name)
    ->condition('m.domain_id', $domain_id, '!=')
    ->countQuery()
    ->execute()
    ->fetchField();
  if (!$others) {
    // Delete menu using the menu_delete_menu_confirm form.
    $menu = db_select('menu_custom', 'mc')
      ->fields('mc', array('menu_name', 'title'))
      ->condition('mc.menu_name', $name)
      ->execute()
      ->fetchAssoc();
    if ($menu) {
      $messages = $_SESSION['messages'];
      $menu_delete_menu_confirm_form_state = array('values' => array());
      module_load_include('inc', 'menu', 'menu.admin');
      menu_delete_menu_confirm_submit(array('#menu' => $menu), $menu_delete_menu_confirm_form_state);
      // Suppress messages.
      $_SESSION['messages'] = $messages;
    }
  }
}

/**
 * Implements hook_init().
 */
function dominion_menu_init() {
  global $conf;
  if (($cid = variable_get('dominion_menu_submenutree', FALSE)) && ($subsite = dominion_get_info())) {
    foreach ($subsite->menus as $menu) {
      if ($menu->cid == $cid) {
        $conf['submenutree_extended_menu_name'] = $menu->menu_name;
      }
    }
  }
}
