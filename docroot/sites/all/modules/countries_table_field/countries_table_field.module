<?php

/**
 * Helper function to get the continents.
 *
 * Get valid continents and ensure we have the fallback UN. Empty continents
 * will be filtered out if empty.
 */
function _countries_table_field_continents() {
  static $continents;
  if (!$continents) {
    $continents = countries_get_continents();
    $continents += array(
      'UN' => t('Unknown', array(), array('context' => 'countries')),
    );
  }
  return $continents;
}

/**
 * Implements hook_theme().
 */
function countries_table_field_theme() {
  return array(
    'countries_table_widget' => array('render element' => 'element'),
  );
}

/**
 * The theme wrapper for a country table.
 */
function theme_countries_table_widget($variables) {
  $element = $variables['element'];

  $widget = $element['#instance']['widget'];
  $settings = $widget['settings'];

  $continents = _countries_table_field_continents();

  // @todo allow sorting here.
  $sorted = array_combine(array_keys($continents), array_fill(0, count($continents), array()));
  foreach (element_children($element) as $iso2) {
    if ($country = country_load($iso2)) {
      if (!empty($country->continent) && isset($continents[$country->continent])) {
        $continent_code = $country->continent;
      }
      else {
        $continent_code = 'UN';
      }
      $label = '';
      if ($settings['label'] == 'token' && !empty($settings['token'])) {
        $label = token_replace($settings['token'], array('country' => $country));
      }
      elseif (strpos($settings['label'], 'flag') !== FALSE && module_exists('countryicons')) {
        $variables = array(
          'country' => $country,
          'settings' => $settings,
        );
        if ($settings['label'] != 'flag') {
          $variables['settings']['property'] = $settings['property'];
        }
        $label = theme('country_icon_adapter', $variables);
      }
      if (!$label) {
        $label = country_property($country, $settings['property']);
      }

      $element[$iso2]['#title'] = $label;
      // Used to sort latter.
      $element[$iso2]['#property_label'] = country_property($country, $settings['property']);

      $sorted[$continent_code][$iso2] = array(
        'country' => $country,
        'element' => $element[$iso2],
      );
      unset($element[$iso2]);
    }
  }

  $column = $settings['column']; // 'continents|countries'
  $continents = _countries_table_field_continents();
  $colspan = empty($settings['colspan']) ? 1 : $settings['colspan'];

/*
        //'layout' => 'table',
*/

  $output = '';
  if ($sorted = array_filter($sorted)) {
    if ($column == 'countries') {
      foreach ($sorted as $continent_code => $countries) {
        usort($countries, 'countries_table_field_sort');
        $row = array();
        foreach (countries_table_field_partition($countries, $colspan) as $chunk) {
          $rendered = '';
          foreach ($chunk as $country_element) {
            $country_element['element']['#attributes']['class'][] = $continent_code . '-marker';
            $rendered .= drupal_render($country_element['element']);
          }
          $row[] = $rendered;
        }
        $output .= theme('table', array(
          'header' => array(array(
            'data' => '<input type="checkbox" class="' . $continent_code . '-marker form-checkbox" value="' . $continent_code . '"> ' . $continents[$continent_code],
            'colspan' => $colspan == 1 ? NULL : $colspan,
          )),
          'rows' => array($row),
          'attributes' => array('class' => array('countries-table countries-table-per-continent')),
        ));
      }
    }
    else {
      foreach (array_chunk($sorted, $colspan, TRUE) as $chunk) {
        $header = array();
        $row = array();
        foreach ($chunk as $continent_code => $countries) {
          $header[] = array(
            'data' => '<input type="checkbox" class="' . $continent_code . '-marker form-checkbox" value="' . $continent_code . '"> ' . $continents[$continent_code],
          );
          $rendered = '';
          usort($countries, 'countries_table_field_sort');
          foreach ($countries as $country_element) {
            $country_element['element']['#attributes']['class'][] = $continent_code . '-marker';
            $rendered .= drupal_render($country_element['element']);
          }
          $row[] = $rendered;
        }
        $output .= theme('table', array(
          'header' => $header,
          'rows' => array($row),
          'attributes' => array('class' => array('countries-table countries-table-per-country')),
        ));
      }
    }
  }
  return $output . drupal_render_children($element);
}

function countries_table_field_sort($a, $b) {
  $a = countries_transliterate($a['element']['#property_label']);
  $b = countries_transliterate($b['element']['#property_label']);
  return strnatcasecmp($a, $b);
}

/**
 * Splits an array into a number of partitions.
 */
function countries_table_field_partition(Array $list, $p) {
  $listlen = count($list);
  $partlen = floor($listlen / $p);
  $partrem = $listlen % $p;
  $partition = array();
  $mark = 0;
  for($px = 0; $px < $p; $px ++) {
    $incr = ($px < $partrem) ? $partlen + 1 : $partlen;
    $partition[$px] = array_slice($list, $mark, $incr);
    $mark += $incr;
  }
  return $partition;
}

/**
 * Implement hook_field_widget_info().
 */
function countries_table_field_field_widget_info() {
  $continents = _countries_table_field_continents();

  return array(
    'countries_table' => array(
      'label' => t('Countries table'),
      'field types' => array('country'),
      'settings' => array(
        'label' => module_exists('countryicons') ? 'flag_property' : 'property',
        'property' => 'name',
        'token' => '[country:name] ([country:iso2])',
        'countryiconset' => '',
        // @todo CSS3 column layout
        'layout' => 'table',
        'column' => 'continents',
        'colspan' => 3,
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
    ),
  );
}

/**
 * Implement hook_field_widget_settings_form().
 */
function countries_table_field_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $options = array('property' => t('Country property'));
  if (module_exists('countryicons')) {
    $options['flag'] = t('Country flag');
    $options['flag_property'] = t('Flag followed by a property');
  }
  $options['token'] = t('Token');

  $form['label'] = array(
    '#type' => 'radios',
    '#title' => t('Country label'),
    '#default_value' => isset($settings['label']) ? $settings['label'] : 'property',
    '#options' => $options,
  );
  if (module_exists('countryicons')) {
    $version = function_exists('countryicons_api_version') ? countryicons_api_version() : '1.0';
    $options = array();
    foreach (countryicons_get_iconsets() as $iconset) {
      $iconset = (array) $iconset;

      // The only diff between versions 1 & 2 of countryicons is the key value.
      $key = version_compare("$version", '2.0') >= 0 ? $iconset['key'] : $iconset['name'];
      $name = version_compare("$version", '2.0') >= 0 ? $iconset['name'] : $iconset['description'];
      $options['icon_' . $key] = t('Icon: @country_icon_set', array('@country_icon_set' => empty($name) ? $key : $name));
      if (!empty($iconset['css_sprite'])) {
        $options['sprite_' . $key] = t('Icon sprite: @country_icon_set', array('@country_icon_set' => empty($name) ? $key : $name));
      }
    }
    $form['countryiconset'] = array(
      '#type' => 'select',
      '#title' => t('Icon'),
      '#options' => $options,
      '#default_value' => $settings['countryiconset'],
      '#states' => array(
        'visible' => array(
          ':input[name="instance[widget][settings][label]"]' => array(
            array('value' => 'flag'),
            array('value' => 'flag_property'),
          ),
        ),
      ),
    );
  }
  else {
    $form['countryiconset'] = array(
      '#type' => 'value',
      '#value' => $settings['countryiconset'],
    );
  }
  $properties = countries_core_properties();
  $properties['continent_code'] = t('Continent code');
  $form['property'] = array(
    '#type' => 'select',
    '#title' => t('Property'),
    '#options' => array('' => t('-- None --')) + $properties,
    '#default_value' => $settings['property'],
    '#states' => array(
      'invisible' => array(
        ':input[name="instance[widget][settings][label]"]' => array('value' => 'token'),
      ),
    ),
  );
  $form['token'] = array(
    '#type' => 'textfield',
    '#title' => t('Token label'),
    '#default_value' => $settings['token'],
    '#description' => t('Take care, this field is not validated. i.e. [country:name] ([country:iso2])'),
    '#states' => array(
      'visible' => array(
        ':input[name="instance[widget][settings][label]"]' => array('value' => 'token'),
      ),
    ),
  );

  $form['layout'] = array(
    '#type' => 'value',
    '#value' => $settings['layout'],
  );
  $form['column'] = array(
    '#type' => 'radios',
    '#title' => t('Layout'),
    '#required' => TRUE,
    '#options' => array(
      'continents' => t('Countries in single column under the continent'),
      'countries' => t('Single table per continent, countries in multiple columns'),
    ),
    '#default_value' => $settings['column'],
  );

  $continents = _countries_table_field_continents();
  $form['colspan'] = array(
    '#type' => 'select',
    '#title' => t('Columns'),
    '#required' => TRUE,
    '#options' => drupal_map_assoc(range(1, 10)),
    '#default_value' => $settings['colspan'],
  );

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function countries_table_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $default_value = array();
  if (!is_array($items)) {
    $items = array_filter(array($items));
  }
  foreach ($items as $item) {
    $default_value []= $item['iso2'];
  }
  $element += array(
    '#type' => $field['cardinality'] == 1 ? 'radios' : 'checkboxes',
    '#default_value' => $default_value,
    '#cardinality' => $field['cardinality'],
    '#element_validate' => array('countries_table_field_validate'),
    '#options' => countries_options_list($field),
    '#theme' => 'countries_table_widget',
    '#field' => $field,
    '#instance' => $instance,
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'countries_table_field') . '/countries-table-field.css',
      ),
      'js' => array(
        drupal_get_path('module', 'countries_table_field') . '/countries-table-field.js',
      ),
    ),
  );

  if ($field['cardinality'] == 1) {
    $element['#type'] = 'radios';
    $element['#default_value'] = reset($default_value);
  }
  else {
    $element['#type'] = 'checkboxes';
    $element['#default_value'] = $default_value;
  }

  return $element;
}

/**
 * We need to transform the field values here to complete the
 * requirements for the field custom handling of multiple values.
 *
 * This converts the array('AU' => 'AU', 'US' => 'US') to
 * array(0 => array('iso2' => 'AU'), 1 => array('iso2' => 'US')).
 *
 * @todo Will this work....
 * @see countries_country_element_validate() for validation.
 */
function countries_table_field_validate($element, &$form_state) {
  $values = array();
  if (!is_array($element['#value'])) {
    $element['#value'] = array_filter(array($element['#value']));
  }
  foreach (array_values($element['#value']) as $value) {
    $values[] = array('iso2' => $value);
  }
  form_set_value($element, $values, $form_state);
}
