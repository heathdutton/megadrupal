<?php
/**
 * @file
 * Automatically create a valid RestWS account.
 */

/**
 * Implements hook_install().
 */
function cis_service_restws_install() {
  // Make sure that cis_restws runs before other authentication systems
  // since the included code can quickly reject anonymous access to the
  // webservices "data" addresses.
  db_update('system')
  ->fields(array(
    'weight' => -100,
  ))
  ->condition('name', 'cis_service_restws')
  ->condition('type', 'module')
  ->execute();

  // create user acocunt to match registry file if exists
  $distro = variable_get('install_profile', FALSE);
  $registry = _cis_connector_build_registry($distro);
  // ensure that user and pass are set
  if (isset($registry['user']) && isset($registry['pass'])) {
    // make sure this account doesn't already exist to avoid an error
    if (!user_load_by_name($registry['user'])) {
      // we know we need to make an account, look for mail address
      if (isset($registry['mail'])) {
        $mail = $registry['mail'];
      }
      else {
        // generate a fake address
        $mail = $registry['user'] . '@' . $registry['user'] . '.' . $registry['user'];
      }
      // odd check to ensure role name is created prior to assignment to user
      $rname = 'SERVICE ACCOUNT';
      // @ignore druplart_conditional_assignment
      if (!$srole = user_role_load_by_name($rname)) {
        // Create new role if role doesn't exist
        $srole = new stdClass();
        $srole->name = $rname;
        user_role_save($srole);
        $srole = user_role_load_by_name($rname);
      }
      // assemble a user object
      $fields = array(
        'name' => $registry['user'],
        'mail' => $mail,
        'pass' => $registry['pass'],
        'status' => 1,
        'init' => $GLOBALS['user']->name,
        'roles' => array(
          DRUPAL_AUTHENTICATED_RID => 'authenticated user',
          $srole->rid => $rname,
        ),
      );
      // the first parameter is left blank so a new user is created
      $account = user_save('', $fields);
    }
  }
}
