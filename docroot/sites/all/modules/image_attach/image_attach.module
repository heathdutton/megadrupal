<?php

/**
 * @file image_attach.module
 * Provides enhancements for using nodes as standalone images.
 */

/**
 * Implements hook_inline_entity_form_table_fields_alter().
 *
 * Add the image thumbnail to Inline Entity Form widgets that are for fields
 * that are configured to act as attaching images.
 */
function image_attach_inline_entity_form_table_fields_alter(&$fields, $context) {
  // Get the instance for this IEF widget.
  $instance = field_info_instance($context['parent_entity_type'], $context['field_name'], $context['parent_bundle']);

  // Bail if this is not an Image Attach field.
  if (empty($instance['settings']['image_attach']['attached'])) {
    return;
  }

  $attached_image_field_name = $instance['settings']['image_attach']['image_field'];

  $fields[$attached_image_field_name] = array(
    'type' => 'field',
    'formatter' => 'image',
    'label' => t('Thumbnail'),
    'weight' => 5,
  );

  // Add the image style setting. This gets sent on to field_view_field() as
  // the $display parameter.
  if (!empty($instance['settings']['image_attach']['image_style'])) {
    $fields[$attached_image_field_name]['settings'] = array(
      'image_style' => $instance['settings']['image_attach']['image_style'],
    );
  }
}

/**
 * Implements hook_field_info_alter().
 */
function image_attach_field_info_alter(&$info) {
  // Add our default settings to entityreference fields.
  $info['entityreference']['instance_settings'] += array(
    'image_attach' => array(
      'attached' => FALSE,
      'image_field' => '',
      'image_style' => '',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter(): field_ui_field_edit_form
 *
 * Add our options to field settings forms for entityreference fields.
 */
function image_attach_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  // Bail if this is not an entityreference field.
  if ($form['#field']['type'] != 'entityreference') {
    return;
  }

  // Bail if this field does not point to nodes.
  // Note we don't restrict this to any particular node bundle: we leave it open
  // for which node bundle is used as images.
  if ($form['#field']['settings']['target_type'] != 'node') {
    return;
  }

  $form['instance']['settings']['image_attach'] = array(
    '#type' => 'fieldset',
    '#title' => t("Image attach"),
    '#weight' => 20,
  );

  $form['instance']['settings']['image_attach']['attached'] = array(
    '#title' => t("Use this entityreference field for attaching image nodes"),
    '#type' => 'checkbox',
    '#default_value' => $form['#instance']['settings']['image_attach']['attached'],
  );

  // WHat target bundles does this point to?
  // is there an image field common to all of them?

  $field_map = field_info_field_map();
  $entityreference_target_bundles = $form['#field']['settings']['handler_settings']['target_bundles'];
  $possible_image_fields = array();

  foreach ($form['#field']['settings']['handler_settings']['target_bundles'] as $target_bundle) {
    foreach ($field_map as $field_name => $field_map_data) {
      if ($field_map_data['type'] == 'image' && isset($field_map_data['bundles']['node'])) {
        $target_bundles_without_this_field = array_diff($entityreference_target_bundles, $field_map_data['bundles']['node']);
        if (empty($target_bundles_without_this_field)) {
          $possible_image_fields[] = $field_name;
        }
      }
    }
  }

  if (empty($possible_image_fields)) {
    $form['instance']['settings']['image_attach']['attached']['#disabled'] = TRUE;
    $form['instance']['settings']['image_attach']['attached']['#default_value'] = FALSE;
    $form['instance']['settings']['image_attach']['attached']['#description'] = t("Image attach needs all the target bundles to have a common image field.");
    return;
  }

  // Build an options array for the image fields.
  $options = array();
  // The field labels may be different on the different bundles, so just take
  // the first one.
  $first_target_bundle = array_shift($entityreference_target_bundles);
  foreach ($possible_image_fields as $image_field_name) {
    $image_field_instance = field_info_instance('node', $image_field_name, $first_target_bundle);
    $options[$image_field_name] = $image_field_instance['label'];
  }

  $form['instance']['settings']['image_attach']['image_field'] = array(
    '#title' => t("Image field on target bundles"),
    '#type' => 'radios',
    '#options' => $options,
    '#description' => t("The field that holds the image for the image nodes."),
    '#default_value' => $form['#instance']['settings']['image_attach']['image_field'],
    '#states' => array(
      'visible' => array(
        ':input[name="instance[settings][image_attach][attached]"]' => array('checked' => TRUE),
      ),
      'required' => array(
        ':input[name="instance[settings][image_attach][attached]"]' => array('checked' => TRUE),
      ),
    ),
  );

  // Technically this should go under $form['instance']['widget']['settings'],
  // but that would result in it being outside the fieldset and be lousy UX.
  $image_styles = image_style_options(FALSE, PASS_THROUGH);
  $form['instance']['settings']['image_attach']['image_style'] = array(
    '#title' => t('Image style to show in attaching forms'),
    '#type' => 'select',
    '#default_value' => $form['#instance']['settings']['image_attach']['image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
    '#states' => array(
      'visible' => array(
        ':input[name="instance[settings][image_attach][attached]"]' => array('checked' => TRUE),
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 *
 * Our formatters are only available to fields configured with image attach
 * settings: see image_attach_form_field_ui_display_overview_form_alter().
 */
function image_attach_field_formatter_info() {
  return array(
    'image_attach_basic' => array(
      'label' => t('Image attach basic'),
      'field types' => array('entityreference'),
      'settings' => array(
        'node_title' => FALSE,
        // These are passed on to image module's image formatter.
        'image_style' => '',
        'image_link' => '',
      ),
    ),
    'image_attach_view_mode' => array(
      'label' => t('Image attach view mode'),
      'field types' => array('entityreference'),
      'settings' => array(
        'node_title' => FALSE,
        // TODO: provide a custom view mode?
        'view_mode' => 'teaser',
      ),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter(): field_ui_display_overview_form
 *
 * Make our entityreference field formatters only available to fields which are
 * configured as Image Attaching.
 */
function image_attach_form_field_ui_display_overview_form_alter(&$form, &$form_state, $form_id) {
  // Check all the instances in the display settings.
  $field_map = field_info_field_map();
  $instances = field_info_instances($form['#entity_type'], $form['#bundle']);

  foreach ($instances as $field_name => $instance) {
    // Bail if this is not an entityreference field.
    if ($field_map[$field_name]['type'] != 'entityreference') {
      continue;
    }

    // If the entityreference field is not set to be used for image attach,
    // remove the Image Attach formatters.
    if (empty($instance['settings']['image_attach']['attached'])) {
      // The entityreference field is not set to be used for image attach, so
      // remove the Image Attach formatters.
      // If the formatter was already set to one of these (in the case that the
      // field was previously configured for Image Attach, and is now no longer)
      // then FormAPI changes the default value to the first option, which is
      // all we could do anyway.
      unset($form['fields'][$field_name]['format']['type']['#options']['image_attach_basic']);
      unset($form['fields'][$field_name]['format']['type']['#options']['image_attach_view_mode']);
    }
  }
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function image_attach_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  // Piggyback on entityreference's implementation of this hook: if does exactly
  // what we need, which is load the referenced entities.
  entityreference_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items, $displays);
}

/**
 * Implements hook_field_formatter_view().
 */
function image_attach_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  if ($items) {
    // Both of our formatters hand over to the image field formatter on the
    // attached image node; they differ only in how they expose options to pass
    // on to the other formatter. Here we build the $display parameter to pass
    // to field_view_field()
    switch ($display['type']) {
      case 'image_attach_basic':
        // Create a display settings array to pass on for viewing the image
        // field, copying from the settings from this field.
        $image_attach_display = array(
          'label' => 'hidden',
          'type' => 'image',
          'settings' => array(
            'image_style' => $settings['image_style'],
            'image_link' => $settings['image_link'],
          ),
        );
        break;
      case 'image_attach_view_mode':
        // Use the name of a view mode, taken from this field's display
        // settings. The image field can then be configured within the image
        // node's display options.
        $image_attach_display = $settings['view_mode'];
        break;
    }

    $target_entity_type = $field['settings']['target_type'];

    // The name of the image field to use is in the instance settings.
    // We've ensured that this setting exists by making these formatters only
    // available to fields configured with image attach settings: see
    // image_attach_form_field_ui_display_overview_form_alter().
    $image_field_name = $instance['settings']['image_attach']['image_field'];

    list($attaching_entity_id, ) = entity_extract_ids($entity_type, $entity);

    foreach ($items as $delta => $item) {
      // Mark the image node for the benefit of theming.
      $item['entity']->image_attach_attaching = array(
        'entity_type' => $entity_type,
        'entity_id' => $attaching_entity_id,
      );

      $element[$delta] = array(
        '#theme' => 'image_attach_attached_image',
        '#item' => $item,
        '#node_title'  => $settings['node_title'],
        '#image_field' => field_view_field($target_entity_type, $item['entity'], $image_field_name, $image_attach_display),
      );
    }
  }

  return $element;
}

/**
 * Returns HTML for the image attach field formatter.
 *
 * @param $variables
 *   An associative array containing:
 *   - item: Associative array of data for the entityreference field.
 *   - node_title: Boolean determining whether to show the title of the attached
 *     image node.
 *   - image_field: A render array for the attached image.
 *
 * @ingroup themeable
 */
function theme_image_attach_attached_image($variables) {
  $output = '';

  if (!$variables['item']['access']) {
    return $output;
  }

  $output .= '<div class="image_attach">';

  $output .= drupal_render($variables['image_field']);

  if ($variables['node_title']) {
    $output .= '<div class="image_attach_node_title">'
      . check_plain($variables['item']['entity']->title)
      . '</div>';
  }

  $output .= '</div>';

  return $output;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function image_attach_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  // Both formatters have the node title setting.
  $element['node_title'] = array(
    '#title' => t("Show image node title"),
    '#type' => 'checkbox',
    '#default_value' => $settings['node_title'],
  );

  switch ($display['type']) {
    case 'image_attach_basic':
      $element += image_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
      break;
    case 'image_attach_view_mode':
      $entity_info = entity_get_info('node');
      $options = array();
      foreach ($entity_info['view modes'] as $view_mode => $view_mode_info) {
        $options[$view_mode] = $view_mode_info['label'];
      }
      $element['view_mode'] = array(
        '#title' => t("View mode"),
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => $settings['view_mode'],
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function image_attach_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'image_attach_basic':
      $summary = $settings['node_title'] ? t('Show image node title') : t('No image node title');
      $summary .= '<br />';
      // Piggyback on image module's implementation of this hook, to show the
      // options that we pass on to it.
      $summary .= image_field_formatter_settings_summary($field, $instance, $view_mode);
      break;
    case 'image_attach_view_mode':
      $summary = $settings['node_title'] ? t('Show image node title') : t('No image node title');
      $summary .= '<br />';
      $summary .= t("Using the image node's @view-mode view mode", array(
        '@view-mode' => $settings['view_mode'],
      ));
      break;
  }

  return $summary;
}

/**
 * Implements hook_theme().
 */
function image_attach_theme($existing, $type, $theme, $path) {
  return array(
    'image_attach_attached_image' => array(
      'variables' => array(
        'item' => NULL,
        'image_field' => NULL,
        'node_title' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_preprocess_HOOK() for theme_colorbox_image_formatter().
 *
 * Support for Colorbox module: allow gallery grouping on an attaching entity.
 */
function image_attach_preprocess_colorbox_image_formatter(&$variables, $hook) {
  if (isset($variables['entity']->image_attach_attaching)) {
    // If the Colorbox gallery grouping is 'per post', then in the context of
    // an attaching entity, the attaching entity is (presumably) meant.
    if ($variables['display_settings']['colorbox_gallery'] == 'post') {
      $variables['display_settings']['colorbox_gallery'] = 'custom';

      $gallery_id = 'image_attach_' . $variables['entity']->image_attach_attaching['entity_id'];
      $variables['display_settings']['colorbox_gallery_custom'] = $gallery_id;
    }
  }
}
