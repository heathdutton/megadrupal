<?php

/**
 * Implements hook_help().
 */
function entity_type_browser_help($path, $arg) {
  switch ($path) {
    case 'admin/reports/entity-types':
      return '<p>' . t('This list shows all entity types defined on the website. You can use provided links to drill down to their details.') . '</p>';
    case 'admin/help#entity_type_browser':
      return '<p>' . t('The Entity Type Browser module provides a set of pages listing all entity types defined on the site and allowing to drill down to their details.') . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function entity_type_browser_permission() {
  return array(
    'access entity type browser' => array(
      'title' => t('Access entity type browser'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function entity_type_browser_menu() {
  $items = array();

  $items['admin/reports/entity-types'] = array(
    'title' => 'Entity types',
    'description' => 'View and manage defined entity types.',
    'page callback' => 'entity_type_browser_page_entity_types',
    'access arguments' => array('access entity type browser'),
  );

  foreach (entity_get_info() as $entity_type => $entity_info) {
    $items['admin/reports/entity-types/' . $entity_type] = array(
      'title' => '!label',
      'title arguments' => array('!label' => $entity_info['label']),
      'page callback' => 'entity_type_browser_page_entity',
      'page arguments' => array($entity_type, $entity_info),
      'access arguments' => array('access entity type browser'),
    );
    $items['admin/reports/entity-types/' . $entity_type . '/properties'] = array(
      'title' => t('Properties'),
      'page callback' => 'entity_type_browser_page_entity',
      'page arguments' => array($entity_type, $entity_info),
      'access arguments' => array('access entity type browser'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
    );

    $items['admin/reports/entity-types/' . $entity_type . '/bundles'] = array(
      'title' => 'Bundles',
      'page callback' => 'entity_type_browser_page_entity_bundles',
      'page arguments' => array($entity_type, $entity_info),
      'access arguments' => array('access entity type browser'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
    );
    if (count($entity_info['bundles'])) {
      foreach ($entity_info['bundles'] as $bundle_type => $bundle_info) {
        $items['admin/reports/entity-types/' . $entity_type . '/bundles/' . $bundle_type] = array(
          'title' => $bundle_info['label'],
          'page callback' => 'entity_type_browser_page_entity_bundle',
          'page arguments' => array($bundle_type, $bundle_info),
          'access arguments' => array('access entity type browser'),
          'type' => MENU_LOCAL_TASK,
        );
      }
    }

    $items['admin/reports/entity-types/' . $entity_type . '/view-modes'] = array(
      'title' => 'View modes',
      'page callback' => 'entity_type_browser_page_entity_view_modes',
      'page arguments' => array($entity_info),
      'access arguments' => array('access entity type browser'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 20,
    );
  }

  return $items;
}

/**
 * Entity types.
 */
function entity_type_browser_page_entity_types() {
  $header = array(
    'label' => t('Label'),
    'machine' => t('Machine name'),
    'fieldable' => t('Fieldable'),
    'bundles' => t('Bundles'),
    'view modes' => t('View modes'),
    'links' => t('Operations'),
  );

  $rows = array();
  foreach (entity_get_info() as $entity_type => $info) {
    $links = array(
      array('title' => t('properties'), 'href' => current_path() . '/' . $entity_type),
      array('title' => t('bundles'), 'href' => current_path() . '/' . $entity_type . '/bundles'),
      array('title' => t('view modes'), 'href' => current_path() . '/' . $entity_type . '/view-modes'),
    );
    $rows[] = array(
      'label' => l($info['label'], current_path() . '/' . $entity_type),
      'machine' => $entity_type,
      'fieldable' => $info['fieldable'] ? t('yes') : t('no'),
      'bundles' => array(
        'data' => count($info['bundles']),
        'title' => implode("\n", array_keys($info['bundles'])),
      ),
      'view_modes' => array(
        'data' => count($info['view modes']),
        'title' => implode("\n", array_keys($info['view modes'])),
      ),
      'links' => theme('links', array(
        'links' => $links,
        'attributes' => array('class' => array('links', 'inline')),
      )),
    );
  }

  $variables = array(
    'header' => $header,
    'rows' => $rows,
  );
  return theme('table', $variables);
}

/**
 * Entity details.
 */
function entity_type_browser_page_entity($entity_type, $entity_info) {
  entity_type_browser_rebuild_breadcrumb();
  $args = func_get_args();
  array_shift($args);
  array_shift($args);
  return entity_type_browser_key_value_table($entity_info, $args);
}

/**
 * Entity bundles.
 */
function entity_type_browser_page_entity_bundles($entity_type, $entity_info) {
  entity_type_browser_rebuild_breadcrumb();

  $header = array(
    'label' => t('Label'),
    'machine' => t('Machine name'),
    'links' => t('Operations'),
  );

  $rows = array();
  foreach ($entity_info['bundles'] as $bundle_type => $bundle_info) {
    $links = array();
    if (isset($bundle_info['admin']['real path']) || isset($bundle_info['admin']['path'])) {
      $path = isset($bundle_info['admin']['real path']) ? $bundle_info['admin']['real path'] : $bundle_info['admin']['path'];
      $links[] = array('title' => t('edit'), 'href' => $path);
      $links[] = array('title' => t('manage fields'), 'href' => $path . '/fields');
      $links[] = array('title' => t('manage display'), 'href' => $path . '/display');
      $links[] = array('title' => t('delete'), 'href' => $path . '/delete');
    }
    $rows[] = array(
      'label' => l($bundle_info['label'], current_path() . '/' . $bundle_type),
      'machine' => $bundle_type,
      'links' => theme('links', array(
        'links' => $links,
        'attributes' => array('class' => array('links', 'inline')),
      )),
    );
  }

  $variables = array(
    'header' => $header,
    'rows' => $rows,
  );
  return theme('table', $variables);
}

/**
 * Entity bundle details.
 */
function entity_type_browser_page_entity_bundle($bundle_type, $bundle_info) {
  drupal_set_title($bundle_info['label']);
  entity_type_browser_rebuild_breadcrumb();

  $args = func_get_args();
  array_shift($args);
  array_shift($args);
  return entity_type_browser_key_value_table($bundle_info, $args);
}

/**
 * Entity view modes.
 */
function entity_type_browser_page_entity_view_modes($entity) {
  entity_type_browser_rebuild_breadcrumb();

  $header = array(
    'label' => t('Label'),
    'machine' => t('Machine name'),
    'custom' => t('Custom settings'),
  );

  $rows = array();
  foreach ($entity['view modes'] as $view_mode_type => $view_mode_info) {
    $rows[] = array(
      'label' => $view_mode_info['label'],
      'machine' => $view_mode_type,
      'custom' => $view_mode_info['custom settings'] ? l(t('yes'), str_replace('view-modes', 'bundles', current_path())) : t('no'),
    );
  }

  $variables = array(
    'header' => $header,
    'rows' => $rows,
  );
  return theme('table', $variables);
}

/**
 * Array table browser.
 */
function entity_type_browser_key_value_table($array, $args = array()) {
  if ($args) {
    $title = array(drupal_get_title());
    foreach ($args as $arg) {
      if (isset($array[$arg])) {
        $array = $array[$arg];
        $title[] = $arg;
      }
    }
    drupal_set_title(implode(' : ', $title));
  }

  ksort($array);

  $header = array(
    'key' => t('Key'),
    'value' => t('Value'),
  );

  $rows = array();
  foreach ($array as $key => $value) {
    if (is_array($value)) {
      $value = l(t('array(!count)', array('!count' => count($value))), current_path() . '/' . $key);
    }
    elseif (is_bool($value)) {
      $value = $value ? t('TRUE') : t('FALSE');
    }
    $rows[] = array(
      'key' => $key,
      'value' => $value,
    );
  }

  $variables = array(
    'header' => $header,
    'rows' => $rows,
  );
  return theme('table', $variables);
}

/**
 * Breadcrumbs fix.
 */
function entity_type_browser_rebuild_breadcrumb() {
  $crumbs = array(l(t('Home'), '<front>'));
  $path_elements = explode('/', current_path());
  array_pop($path_elements);
  $processed_elements = array();
  foreach ($path_elements as $path_element) {
    $processed_elements[] = $path_element;
    $path = implode('/', $processed_elements);
    $item = menu_get_item($path);
    if ($path == $item['path']) {
      $crumbs[] = l($item['title'], $path);
    }
  }
  drupal_set_breadcrumb($crumbs);
}
