<?php
/**
 * @file
 * The plagiarize module allows you to display
 * the summaries of nodes inside the body of other nodes.
 */
/*******************************************************************************
 * CORE HOOKS
 ******************************************************************************/
/**
 * Implements hook_filter_info().
 */
function plagiarize_filter_info() {
  return array(
    'plagiarize' => array(
      'title' => t('Plagiarize Shortcode Embedding'),
      'description' => t('Allows users to embed the teaser or summary of one piece of content into the body of another.'),
      'settings callback' => 'plagiarize_filter_settings',
      'process callback' => 'plagiarize_filter_process',
      'cache' => FALSE,
      'tips callback' => 'plagiarize_filter_tips',
      'default settings' => array(
        'plagiarize_types' => drupal_map_assoc(array_keys(node_type_get_names())),
        'plagiarize_bailout' => 'show',
      ),
    ),
  );
}

/**
 * Implements hook_node_validate().
 */
function plagiarize_node_validate($node, $form, &$form_state) {
  $vals = $form_state['values'];
  $lang = $vals['language'];
  $filters = filter_list_format($vals['body'][$lang][0]['format']);

  // We only need to validate the content if the desired format implements
  // the plagiarize summary shortcode filter.
  if ($filters['plagiarize']->status == 1) {
    // Don't let nodes with summary shortcodes in the summary text pass validation.
    if (preg_match(_plagiarize_summary_pattern(), $vals['body'][$lang][0]['summary'])) {
      form_set_error("body][$lang][0][summary", t('Summary shortcodes are not allowed in summary text.'));
    }

    // If the node exists and is being edited, prevent self-referring shortcodes
    // in the body.
    if ($node->nid) {
      if (preg_match(_plagiarize_summary_pattern($node->nid), $vals['body'][$lang][0]['value'])) {
        form_set_error("body][$lang][0][value", t('Body text cannot contain summary shortcodes that refer to its own summary.'));
      }
    }
    // If this is a new node, don't allow shortcodes so we don't accidentally
    // run into any recursion.
    else {
      if (preg_match(_plagiarize_summary_pattern(), $vals['body'][$lang][0]['value'])) {
        form_set_error("body][$lang][0][value", t('To prevent accidental recursion, summary shortcodes cannot be added to new content.  First create the @type then edit it to add the shorcodes.', array('@type' => $node->type)));
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function plagiarize_preprocess_plagiarize_summary(&$vars) {
  // Set the title whether is should be displayed or linked.
  $vars['title'] = ($vars['show_title'] ? ($vars['link_title'] ? l($vars['node']->title, "node/" . $vars['node']->nid) : $vars['node']->title) : '');

  $vars['content_attributes_array'] = array(
    'class' => array(
      'embedded-summary',
      'embedded-summary-id-' . $vars['node']->nid,
      'embedded-summary-type-' . str_replace('_', '-', $vars['node']->type),
      'node' . ($vars['node']->status == 0 ? '-unpublished' : ''),
    ),
    'id' => array(
      $vars['node']->uniqueid,
    ),
  );
  $vars['title_attributes_array'] = array();
}

/**
 * Implements hook_theme().
 */
function plagiarize_theme($existing, $type, $theme, $path) {
  return array(
    'plagiarize_summary' => array(
      'variables' => array('title' => NULL, 'teaser' => NULL, 'node' => NULL, 'link_title' => TRUE, 'show_title' => TRUE),
      'template' => 'plagiarize-summary',
    ),
    'plagiarize_summary_list' => array(
      'variables' => array('items' => array(), 'title' => NULL, 'type' => 'ul', 'attributes' => array()),
      'file' => 'includes/plagiarize.themes.inc',
    ),
  );
}

/*******************************************************************************
 * MODULE FUNCTIONS
 ******************************************************************************/
/**
 * Plagiarize Filter Process.
 *
 * @todo
 *   - Allow foy dynamic body names instead of assuming that 'body' will always
 *     have the summary.
 *   - Handle multiple values of a field.  Currently only the first instance is
 *     used as a substitution string.
 */
function plagiarize_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  $pattern = _plagiarize_summary_pattern();
  $nodes   = array();

  // Get all instances of the replacement pattern [teaser:NID]
  preg_match_all($pattern, $text, $matches);

  // Loop through each instance and perform the appropriate replacement.
  foreach ($matches[2] as $i => $match) {
    $args    = explode(':', $match);
    $nid     = array_shift($args);
    $nolink  = (in_array('nolink',  $args));
    $notitle = (in_array('notitle', $args));
    $nolist  = (in_array('nolist',  $args));

    // We must reset the static node list on each iteration to get unique IDs
    // for each instance in the body if a node is repeated.
    $node    = node_load($nid, NULL, TRUE);
    $replacement_value = '';

    // Only get a replacement value if the requested node is valid and enabled in
    // the filter settings.
    if (isset($node->nid) && is_numeric($node->nid) && ($filter->settings['plagiarize_types'][$node->type] === $node->type) && node_access('view', $node)) {
      // The summary text shouldn't contain any shortcodes due to our node
      // validation function but we'll double check before we actually generate
      // the output.
      // @TODO make this a dyanmic name instead of assuming 'body'
      $body_fields = field_get_items('node', $node, 'body');

      $summary = preg_replace($pattern, '', $body_fields[0]['summary']);
      $summary = check_markup($summary, $format->format, $langcode, $cache);

      // Don't make the title a link if there is no body.
      $link_title = ($body_fields[0]['value'] && !$nolink);

      // If there's is a summary to replace with, get the themed replacement
      // content.
      if ($summary) {
        // Collect nodes to make a jump list of titles.
        if (!$nolist) {
          $node->uniqueid = "summary{$i}";
          $nodes[] = $node;
        }
        $replacement_value = theme('plagiarize_summary', array('title' => $node->title,
                                                          'summary' => $summary,
                                                          'node' => $node,
                                                          'link_title' => $link_title,
                                                          'show_title' => !$notitle));
      }
    }

    // Replace the shortcode text unless there is no replacement value and the
    // settings are set to show any unreplaceable shortcodes.
    if ($replacement_value || (!$replacement_value && $filter->settings['plagiarize_bailout'] === 'hide')) {
      $text = preg_replace('/' . addcslashes($matches[0][$i], '[]') . '/', $replacement_value, $text, 1);
    }
  }

  // Look for the pattern [summary:list] and replace it with a jump list of
  // node titles.
  if (stristr($text, '[summary:list')) {
    if (!empty($nodes)) {
      $items = array('linked' => array(), 'unlinked' => array());
      foreach ($nodes as $node) {
        $items['linked'][]   = l($node->title, $_GET['q'], array('fragment' => $node->uniqueid));
        $items['unlinked'][] = filter_xss($node->title);
      }

      if (stristr($text, '[summary:list]')) {
        $list = theme('plagiarize_summary_list', array('items' => $items['linked'], 'title' => t('Contents')));
        $text = str_replace('[summary:list]', $list, $text);
      }
      if (stristr($text, '[summary:list:nolink]')) {
        $list = theme('plagiarize_summary_list', array('items' => $items['unlinked'], 'title' => t('Contents')));
        $text = str_replace('[summary:list:nolink]', $list, $text);
      }
    }
    elseif ($filter->settings['plagiarize_bailout'] === 'hide') {
      $text = preg_replace('/\[summary:list(:nolink)?\]/', '', $text);
    }
  }

  return $text;
}

/**
 * Plagiarize Filter Settings.
 */
function plagiarize_filter_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  $filter->settings += $defaults;

  $elements['plagiarize_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Allowed Content Types'),
    '#description' => t('Only allow content of these types to be embedded with a summary shortcode.  Unchecking all types will disable the filter.'),
    '#options' => node_type_get_names(),
    '#default_value' => $filter->settings['plagiarize_types'],
  );
  $elements['plagiarize_bailout'] = array(
    '#type' => 'radios',
    '#title' => t('No Summary Behavior'),
    '#description' => t('How should the filter handle cases where it recognizes a pattern but has no data to replace it with? (EX. Invalid node ID or type)'),
    '#options' => array(
      'show' => t('Leave the shortcode.'),
      'hide' => t('Remove the shortcode.'),
    ),
    '#default_value' => $filter->settings['plagiarize_bailout'],
  );
  return $elements;
}

/**
 * plagiarize Filter Tips.
 */
function plagiarize_filter_tips($filter, $format, $long) {
  // Create a readable list of allowed content types.
  $allowed_types = array();
  foreach (node_type_get_names() as $type => $name) {
    if ($filter->settings['plagiarize_types'][$type] === $type) {
      $allowed_types[] = $name;
    }
  }

  // Provide some examples of good shortcodes.
  $examples = array(
    '[summary:23] - "Substitute the hyperlinked title and summary value entered in node 23."',
    '[summary:23:notitle] - "Substitute just the summary value from node 23."',
    '[summary:23:nolink] - "Substitute the title and summary value of node 23, but the title is not a hyperlink."',
    '[summary:23:nolist] - "Substitute the title and summary value of node 23 and do not add the title to the jump list."',
  );

  // Format some extra text
  $allowed_text = '<br />' . t("The following types of content may be used in replacement:") . ' <em>' . implode(", ", $allowed_types) . '</em>';
  $example_text = '<br />' . theme('item_list', array('title' => t('Shortcode Examples'), 'items' => $examples));

  if ($long) {
    $output  = t('You can inject the summary from one piece of content into the body of another using the shortcode <em>[summary:ID]</em>.  Two values may be added to the shortcode to further customize the formatting: ":nolink" and ":notitle."');
    $output .= t('If a summary cannot be generated (EX. invalid ID or content type) the shortcode may be removed or left in place depending on the filter settings.');
    $output .= $allowed_text;
    $output .= $example_text;
    return $output;
  }
  else {
    return t('Shortcodes formatted <em>[summary:ID]</em> are replaced with the summary from the content with the id "ID."') . $allowed_text;
  }
}

/*******************************************************************************
 * HELPERS
 ******************************************************************************/
/**
 * Stores the substitution pattern.
 *
 * When matching through preg_match_all, matches are returned as follows:
 *
 * $matches = array(
 *   0 => array(i => [summary:nid:a1:a2]),
 *   1 => array(i => summary:nid:a1:a2),
 *   2 => array(i => nid:a1:a2),
 *   3 => array(i => :a1:a2),
 * );
 *
 * @param $nid
 *   INT node id to substitute into the pattern to match a particular node.
 *
 * @return
 *   A standardized regex pattern.
 */
function _plagiarize_summary_pattern($nid = NULL) {
  if (is_numeric($nid)) {
    return '/\[(summary:(' . $nid . '(:\w*){0,3}))\]/';
  }
  else {
    return '/\[(summary:(\d{1,9}(:\w*){0,3}))\]/';
  }
}
