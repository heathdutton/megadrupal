<?php
/**
 * @file
 * Main module file for DFP Respond.
 */

/**
 * Implements hook_menu().
 */
function dfp_respond_menu() {
  $items = array();
  $items['admin/structure/dfp_ads/respond'] = array(
    'title' => 'DFP Respond',
    'description' => 'Configure DFP Respond.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dfp_respond_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 15,
  );
  return $items;
}

/**
 * Implements hook_form().
 */
function dfp_respond_settings_form() {
  $form = array();

  $form['dfp_respond_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Respond URL'),
    '#description' => t('The URL for the Respond script.'),
    '#default_value' => variable_get('dfp_respond_url', 'http://responddiscovery.blob.core.windows.net/scripts/respond-discovery-placement.min.js'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_context_registry().
 */
function dfp_respond_context_registry() {
  return array(
    'reactions' => array(
      'dfp_respond' => array(
        'title' => t('DFP Respond'),
        'plugin' => 'dfp_respond_context_reaction_respond',
      ),
    ),
  );
}

/**
 * Implements hook_context_plugins().
 */
function dfp_respond_context_plugins() {
  $plugins = array();
  $plugins['dfp_respond_context_reaction_respond'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'dfp_respond') . '/plugins',
      'file' => 'dfp_respond_context_reaction_respond.inc',
      'class' => 'dfp_respond_context_reaction_respond',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}

/**
 * Helper to process the script url.
 */
function _dfp_respond_get_script_url() {
  return check_plain(variable_get('dfp_respond_url', 'http://responddiscovery.blob.core.windows.net/scripts/respond-discovery-placement.min.js'));
}

/**
 * Helper add the javascript code for DFP Respond.
 */
function _dfp_respond_add_js($tags) {
  if (!empty($tags)) {
    $js  = 'function async(src, callback) {';
    $js .= '  var s = document.createElement("script");';
    $js .= '  s.type = "text/javascript";';
    $js .= '  s.src = src;';
    $js .= '  s.async = true;';
    $js .= '  if (!s.addEventListener) {';
    $js .= '    s.onreadystatechange = function () { if (s.readyState in { loaded: 1, complete: 1 }) { s.onreadystatechange = null; callback(); } }';
    $js .= '  } else { s.addEventListener("load", function (e) { callback(null, e); }, false); }';
    $js .= '    var head = document.getElementsByTagName("head")[0];';
    $js .= '    head.appendChild(s);';
    $js .= '  }';
    $js .= '  async("' . _dfp_respond_get_script_url() . '", function () {';
    $js .= '    var options = {';

    // Process the ad DFP Respond Ad tags.
    foreach ($tags as $name => $values) {
      if (!empty($values)) {
        $js .= PHP_EOL . $name . ': { ';
        $js .= 'id: "dfp-ad-' . $values['ad_tag'] . '", ';
        $js .= 'parentContainer: "' . $values['container'] . '", ';
        $js .= 'parentChildren: "' . $values['children'] . '", ';
        $js .= 'position: "' . $values['position'] . '", ';
        $js .= '}, ';
      }
    }

    $js .= '    };';
    $js .= '    Respond.AdBuilder(options, function () {';
    $js .= '  });';
    $js .= '});';

    $options = array(
      'every_page' => TRUE,
      'scope' => 'header',
      'type' => 'inline',
    );
    drupal_add_js($js, $options);
  }
}

/**
 * Implements hook_page_build().
 */
function dfp_respond_page_build(&$page) {

  $dfp_respond_tags = array();
  $html = '';

  // Execute dfp_respond plugin.
  if (module_exists('context')) {
    if ($plugin = context_get_plugin('reaction', 'dfp_respond')) {
      $plugin->execute();
      if (!empty($plugin->dfp_respond_tags)) {
        foreach ($plugin->dfp_respond_tags as $machinename => $values) {
          if (!empty($values)) {
            $dfp_respond_tags[$machinename] = $values;

            // Load the DFP tag.
            $tag = dfp_tag_load($values['ad_tag']);
            if (empty($tag->disabled)) {
              $dfp_tag = dfp_tag($values['ad_tag']);
              // Render the tag.
              $html .= render($dfp_tag);
            }
          }
        }
      }
    }
  }

  // Add the javascript.
  _dfp_respond_add_js($dfp_respond_tags);
}
