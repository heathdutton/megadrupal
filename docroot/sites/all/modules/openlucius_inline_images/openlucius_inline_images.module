<?php
/**
 * @File
 * The main module file for hook implementations.
 */

define('OPENLUCIUS_INLINE_IMAGES_MAX_WIDTH', 690);

/**
 * Implements hook_menu().
 */
function openlucius_inline_images_menu() {
  return array(
    'openlucius-inline-images-attach-file/%/%' => array(
      'page callback'    => 'openlucius_inline_images_attach_file',
      'page arguments'   => array(1, 2),
      'type'             => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),
  );
}

/**
 * Implements hook_filter_default_formats_alter().
 */
function openlucius_inline_images_filter_default_formats_alter(&$formats) {
  // Check formats if img tag is missing append image tag.
  foreach ($formats as &$format) {

    // Check if html filter enabled.
    if (!empty($format['filters']['filter_html']) && !stristr($format['filters']['filter_html']['settings']['allowed_html'], '<img>')) {

      // Add the image tag.
      $format['filters']['filter_html']['settings']['allowed_html'] .= '<img>';
    }
  }
}

/**
 * Implements hook_init().
 */
function openlucius_inline_images_init() {
  drupal_add_css(drupal_get_path('module', 'openlucius_inline_images') . '/css/dialog.css');

  // Fetch active group.
  $group = openlucius_core_get_active_group();

  // Check if we have a group before adding the settings.
  if (!empty($group)) {

    // Append variables required for attaching images to the group.
    drupal_add_js(array(
      'openlucius_inline_images' => array(
        'token' => drupal_get_token(),
        'group' => $group,
      )
    ), 'setting');
  }
}

/**
 * Function for moving / attaching the files to the group.
 *
 * @param int $group
 *   The group the file is to be attached to.
 * @param $token
 *   A valid user token to authenticate the upload.
 *
 * @return string|bool
 *   Returns either a valid path to the file or FALSE.
 */
function openlucius_inline_images_attach_file($group, $token) {
  global $user;

  // Initiate as FALSE.
  $image = $error = FALSE;

  // Check for file.
  if (!empty($_FILES['files']['name'])) {

    // Convert single upload to something Drupal can understand.
    foreach ($_FILES['files'] as $key => &$value) {
      $value = array($value);
    }

    // Set the file validators.
    $validators = array(
      'file_validate_extensions' => 'jpg jpeg gif png',
      'file_validate_size'       => array(),
    );

    // Get the default file scheme for file destination.
    $directory = file_default_scheme() . '://group/' . $group . '/' . date('y_w') . '/' . $user->uid . '/';

    // Get the directory path.
    if (!file_stream_wrapper_valid_scheme(file_uri_scheme($directory))) {

      // Only trim if we're not dealing with a stream.
      $directory = rtrim($directory, '/\\');
    }

    // Create the directory if it doesn't exist.
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    foreach ($_FILES['files']['name'] as $key => $val) {

      // Let the file module handle the upload and moving.
      if ($file = file_save_upload($key, $validators, $directory, FILE_EXISTS_RENAME)) {

        // Check if extension valid.
        $extension_valid = file_validate_extensions($file, $validators['file_validate_extensions']);

        // Validate file extension.
        if (empty($extension_valid)) {

          // Make file permanent.
          $file->status = FILE_STATUS_PERMANENT;

          // Save the file.
          file_save($file);

          // Create file node to attach the file to.
          $node = new stdClass();
          $node->type     = 'file';
          $node->language = LANGUAGE_NONE;

          // Prepare the node object for editing.
          node_object_prepare($node);

          // Add the required fields.
          $node->uid                                                   = $user->uid;
          $node->title                                                 = 'inline-attachment-' . $file->fid;
          $node->field_shared_group_reference[LANGUAGE_NONE][0]['nid'] = $group;

          // Create array from object and attach the file.
          $file_array = (array) $file;
          $file_array['display'] = 1;
          $node->field_shared_files[LANGUAGE_NONE][0] = $file_array;

          // Save the node
          node_save($node);

          // Fetch the file path.
          $file_path = file_create_url($file->uri);

          // Calculate ratio height / width and scale down to fit in textarea,
          // the users may then upscale it.
          $info = image_get_info($file->uri);

          // Check if the image-size exceeds 690px.
          if (!empty($info) && $info['width'] > OPENLUCIUS_INLINE_IMAGES_MAX_WIDTH) {

            // Calculate ratio.
            $original_ratio = $info['width'] / $info['height'];
            $height         = $info['height'];
            $width          = OPENLUCIUS_INLINE_IMAGES_MAX_WIDTH;

            // Scale image to stay within ratio.
            if (OPENLUCIUS_INLINE_IMAGES_MAX_WIDTH / $info['height'] > $original_ratio) {

              $width = $info['height'] * $original_ratio;
            }
            else {
              $height = OPENLUCIUS_INLINE_IMAGES_MAX_WIDTH / $original_ratio;
            }

            // Theme the image.
            $image = theme('image', array('path' => $file_path, 'width' => $width, 'height' => $height));
          }
          else {

            // Theme the image.
            $image = theme('image', array('path' => $file_path));
          }
        }
        else {
          watchdog('Failed', drupal_json_encode($extension_valid));
          $error = strip_tags(implode(',', $extension_valid));
        }
      }
      else {
        watchdog('Failed', 'Failed to upload file: @upload', array('@upload' => $key));
        $errors = drupal_get_messages('error');
        $error = strip_tags(implode(',', $errors['error']));
      }
    }
  }

  // Return FALSE on failed uploads.
  drupal_json_output(array('image' => $image, 'error' => $error));
  drupal_exit();
}

/**
 * Implements hook_wysiwyg_plugin().
 */
function openlucius_inline_images_wysiwyg_plugin($editor, $version) {

  $plugins = array();
  switch ($editor) {
    case 'tinymce':
      if ($version > 3) {
        $plugins['openlucius_inline_image'] = array(
          'title' => t('OpenLucius Inline Image'),
          'url' => 'http://drupal.org/project/openlucius',
          'path' => drupal_get_path('module', 'openlucius_inline_images') . '/plugins/openlucius_inline_image',
          'filename' => 'openlucius_inline_image.js',
          'icon file' => 'plugins/openlucius_inline_image/img/image.gif',
          'icon title' => t('Inline image'),
          'buttons' => array(
            'openlucius_inline_image' => t('OpenLucius Inline Image'),
          ),
          'load' => TRUE,
          'internal' => FALSE,
        );
      }
      break;
  }
  return $plugins;
}

/**
 * Function to enable the wysiwyg button as there is no profile alter.
 *
 * TODO if there is a method to alter the profile we should use that.
 */
function _openlucius_inline_images_enable_button() {

  // Fetch all profiles using tinymce.
  $profiles = db_select('wysiwyg', 'w')
    ->fields('w')
    ->condition('editor', 'tinymce', '=')
    ->execute()
    ->fetchAll();

  // Loop through the profiles.
  foreach ($profiles as $profile) {

    // Get Settings.
    $settings = unserialize($profile->settings);

    // Check if enabled if not enable.
    if (empty($settings['buttons']['openlucius_inline_image'])) {
      $settings['buttons']['openlucius_inline_image']['openlucius_inline_image'] = 1;
    }

    // Serialize settings.
    $settings = serialize($settings);

    watchdog('nieuwe settings', $settings);

    // Enable setting.
    db_update('wysiwyg')
      ->fields(array('settings' => $settings))
      ->condition('format', $profile->format)
      ->condition('editor', 'tinymce')
      ->execute();
  }
}

/**
 * Implements hook_openlucius_core_1_wysiwyg_feature_post_revert_trigger().
 */
function openlucius_inline_images_openlucius_core_1_wysiwyg_feature_post_revert_trigger() {
  _openlucius_inline_images_enable_button();
}
