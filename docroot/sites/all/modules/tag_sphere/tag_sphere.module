<?php

/**
 * @file
 * Enables the blocks with tagsphere plugin for vocabulary.
 */

/**
 * Implements hook_help().
 */
function tag_sphere_help($path, $arg) {
  switch ($path) {
    case 'admin/help#tag_sphere':
      $output = '<p>' . t('Creates the Tag Sphere blocks for specified vocabulary.') . '</p>';
      return $output;
  }
}


/**
 * Implements hook_block_info().
 */
function tag_sphere_block_info() {
  $blocks = array();
  $tag_sphere_settings = variable_get('tag_sphere_settings', array());
  foreach ($tag_sphere_settings as $key => $val) {
    $blocks[$key] = array(
      'info' => t('Tag Sphere - !vocab_name', array('!vocab_name' => $val['vocab_name'])),
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function tag_sphere_block_configure($delta = 0) {
  $form = array();
  $tag_sphere_settings = variable_get('tag_sphere_settings', array());

  $form['tag_sphere'] = array(
    '#type' => 'fieldset',
    '#title' => t('Tag sphere settings.'),
    '#collapsible' => TRUE,
    '#weight' => 10,
  );
  $form['tag_sphere']['vid'] = array(
    '#type' => 'hidden',
    '#value' => $tag_sphere_settings[$delta]['vid'],
  );
  $form['tag_sphere']['vocab_name'] = array(
    '#type' => 'hidden',
    '#value' => $tag_sphere_settings[$delta]['vocab_name'],
  );
  $form['tag_sphere']['tag_sphere_status'] = array(
    '#type' => 'hidden',
    '#value' => $tag_sphere_settings[$delta]['tag_sphere_status'],
  );
  $form['tag_sphere']['background_color'] = array(
    '#type' => 'textfield',
    '#size' => 16,
    '#title' => t('Background color'),
    '#default_value' => $tag_sphere_settings[$delta]['background_color'],
    '#description' => t('e.g., #000000, #000.'),
  );
  $form['tag_sphere']['font_color'] = array(
    '#type' => 'textfield',
    '#size' => 16,
    '#title' => t('Font color.'),
    '#default_value' => $tag_sphere_settings[$delta]['font_color'],
    '#description' => t('e.g., #FFFFFF, #FFF.'),
  );
  $form['tag_sphere']['height'] = array(
    '#type' => 'textfield',
    '#size' => 16,
    '#title' => t('Height'),
    '#default_value' => $tag_sphere_settings[$delta]['height'],
    '#description' => t('e.g., 200px, 450pt.'),
  );
  $form['tag_sphere']['width'] = array(
    '#type' => 'textfield',
    '#size' => 16,
    '#title' => t('Width'),
    '#default_value' => $tag_sphere_settings[$delta]['width'],
    '#description' => t('e.g., 200px, 450pt.'),
  );
  $form['tag_sphere']['rotate_factor'] = array(
    '#type' => 'textfield',
    '#size' => 16,
    '#title' => t('Rotate factor'),
    '#default_value' => $tag_sphere_settings[$delta]['rotate_factor'],
    '#description' => t('The amount that the sphere rotates, in degrees. e.g., 10 or 20.'),
  );
  $form['tag_sphere']['centrex'] = array(
    '#type' => 'textfield',
    '#size' => 16,
    '#title' => t('Centre-X'),
    '#default_value' => $tag_sphere_settings[$delta]['centrex'],
    '#description' => t('Horizontal rotation centre in the container. e.g., 50 or 100.'),
  );
  $form['tag_sphere']['centrey'] = array(
    '#type' => 'textfield',
    '#size' => 16,
    '#title' => t('Centre-Y'),
    '#default_value' => $tag_sphere_settings[$delta]['centrey'],
    '#description' => t('Vertical rotation centre in the container. e.g., 50 or 100.'),
  );
  $form['tag_sphere']['min_font_size'] = array(
    '#type' => 'textfield',
    '#size' => 16,
    '#title' => t('Min font size'),
    '#default_value' => $tag_sphere_settings[$delta]['min_font_size'],
    '#description' => t('e.g., 10, 22.'),
  );
  $form['tag_sphere']['max_font_size'] = array(
    '#type' => 'textfield',
    '#size' => 16,
    '#title' => t('Max font size'),
    '#default_value' => $tag_sphere_settings[$delta]['max_font_size'],
    '#description' => t('e.g., 30, 60.'),
  );
  $form['tag_sphere']['init_motion_x'] = array(
    '#type' => 'textfield',
    '#size' => 16,
    '#title' => t('Init motion-x'),
    '#default_value' => $tag_sphere_settings[$delta]['init_motion_x'],
    '#description' => t('Horizontal initial rotation. e.g., 10, 20.'),
  );
  $form['tag_sphere']['init_motion_y'] = array(
    '#type' => 'textfield',
    '#size' => 16,
    '#title' => t('Init motion-y'),
    '#default_value' => $tag_sphere_settings[$delta]['init_motion_y'],
    '#description' => t('Vertical initial rotation. e.g., 10, 20.'),
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function tag_sphere_block_save($delta = 0, $edit = array()) {
  $tag_sphere_settings = variable_get('tag_sphere_settings', array());
  $tag_sphere_settings[$delta] = $edit;
  variable_set('tag_sphere_settings', $tag_sphere_settings);
}

/**
 * Implements hook_block_view().
 */
function tag_sphere_block_view($delta = '') {
  $block = array();
  $tag_sphere_settings = variable_get('tag_sphere_settings', array());
  drupal_add_js(drupal_get_path('module', 'tag_sphere') . '/js/jquery.mousewheel.min.js');
  drupal_add_js(drupal_get_path('module', 'tag_sphere') . '/js/jquery.tagsphere.js');
  drupal_add_js(array('tag_sphere' => array('tag_sphere_settings' => $tag_sphere_settings)), 'setting');
  drupal_add_js(drupal_get_path('module', 'tag_sphere') . '/js/tag_sphere.js');

  $block_subject = filter_xss($tag_sphere_settings[$delta]['vocab_name']);
  $query = db_select('taxonomy_index', 'ti');
  $query->join('taxonomy_term_data', 'ttd', 'ti.tid = ttd.tid');
  $query->addField('ttd', 'vid');
  $query->condition('ttd.vid', $tag_sphere_settings[$delta]['vid']);
  $count_nodes = $query->execute()->rowCount();
  $block_content = '';
  if ($count_nodes != 0) {
    // Load tag_sphere.pages.inc from the tag_sphere module.
    require_once 'tag_sphere.pages.inc';
    $block_content .= tag_sphere_block_content($tag_sphere_settings[$delta]['vid'], $tag_sphere_settings[$delta]['vocab_name']);
  }

  $block['subject'] = t('!block_subject', array('!block_subject' => $block_subject));
  $block['content'] = $block_content;

  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tag_sphere_form_taxonomy_form_vocabulary_alter(&$form, &$form_state, $form_id) {
  $tag_sphere_settings = variable_get('tag_sphere_settings', array());
  $machine_name = str_replace('_', '-', $form['#vocabulary']->machine_name);
  $machine_name = isset($machine_name) ? $machine_name : '';

  if (array_key_exists($machine_name, $tag_sphere_settings)) {
    $tag_sphere_status = 1;
  }
  else {
    $tag_sphere_status = 0;
  }

  $form['tag_sphere_status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Tag sphere block'),
    '#default_value' => $tag_sphere_status,
    '#description' => t('Check this box to create the Tag sphere block for this vocabulary.'),
  );
}

/**
 * Implements hook_taxonomy_vocabulary_insert().
 */
function tag_sphere_taxonomy_vocabulary_insert($vocabulary) {
  $tag_sphere_settings = array();
  $machine_name = str_replace('_', '-', $vocabulary->machine_name);
  $tag_sphere_settings = variable_get('tag_sphere_settings', array());

  if ($vocabulary->tag_sphere_status == 1) {
    $tag_sphere_settings[$machine_name]['vocab_name'] = t('!vocab_name', array('!vocab_name' => $vocabulary->name));
    $tag_sphere_settings[$machine_name]['tag_sphere_status'] = $vocabulary->tag_sphere_status;
    $tag_sphere_settings[$machine_name]['vid'] = $vocabulary->vid;
    $tag_sphere_settings[$machine_name]['height'] = '200px';
    $tag_sphere_settings[$machine_name]['width'] = '158px';
    $tag_sphere_settings[$machine_name]['background_color'] = '#0f6b6a';
    $tag_sphere_settings[$machine_name]['font_color'] = '#FFFFFF';
    $tag_sphere_settings[$machine_name]['rotate_factor'] = 5;
    $tag_sphere_settings[$machine_name]['centrex'] = 100;
    $tag_sphere_settings[$machine_name]['centrey'] = 100;
    $tag_sphere_settings[$machine_name]['min_font_size'] = 12;
    $tag_sphere_settings[$machine_name]['max_font_size'] = 32;
    $tag_sphere_settings[$machine_name]['init_motion_x'] = 10;
    $tag_sphere_settings[$machine_name]['init_motion_y'] = 10;

    variable_set('tag_sphere_settings', $tag_sphere_settings);
    drupal_set_message(t('%vocab_name Tag sphere Block has been created. <a href="@url">Click here</a> to visit blocks page to configure.',
        array(
          '%vocab_name' => $vocabulary->vocab_name,
          '@url' => url("admin/structure/block"),
        )
      )
    );
  }
}

/**
 * Implements hook_taxonomy_vocabulary_update().
 */
function tag_sphere_taxonomy_vocabulary_update($vocabulary) {
  $tag_sphere_settings = array();
  $machine_name = str_replace('_', '-', $vocabulary->machine_name);

  $tag_sphere_settings = variable_get('tag_sphere_settings', array());

  if ($vocabulary->tag_sphere_status == 1) {
    if ($vocabulary->tag_sphere_status != isset($tag_sphere_settings[$machine_name]['tag_sphere_status'])) {
      $tag_sphere_settings[$machine_name]['vocab_name'] = t('!vocab_name', array('!vocab_name' => $vocabulary->name));
      $tag_sphere_settings[$machine_name]['tag_sphere_status'] = $vocabulary->tag_sphere_status;
      $tag_sphere_settings[$machine_name]['vid'] = $vocabulary->vid;
      $tag_sphere_settings[$machine_name]['height'] = isset($vocabulary->height) ? $vocabulary->height : '200px';
      $tag_sphere_settings[$machine_name]['width'] = isset($vocabulary->width) ? $vocabulary->width : '158px';
      $tag_sphere_settings[$machine_name]['background_color'] = isset($vocabulary->background_color) ? $vocabulary->background_color : '#0f6b6a';
      $tag_sphere_settings[$machine_name]['font_color'] = isset($vocabulary->font_color) ? $vocabulary->font_color : '#FFFFFF';
      $tag_sphere_settings[$machine_name]['rotate_factor'] = isset($vocabulary->rotate_factor) ? $vocabulary->rotate_factor : 5;
      $tag_sphere_settings[$machine_name]['centrex'] = isset($vocabulary->centrex) ? $vocabulary->centrex : 100;
      $tag_sphere_settings[$machine_name]['centrey'] = isset($vocabulary->centrey) ? isset($vocabulary->centrey) : 100;
      $tag_sphere_settings[$machine_name]['min_font_size'] = isset($vocabulary->min_font_size) ? $vocabulary->min_font_size : 12;
      $tag_sphere_settings[$machine_name]['max_font_size'] = isset($vocabulary->max_font_size) ? $vocabulary->max_font_size : 32;
      $tag_sphere_settings[$machine_name]['init_motion_x'] = isset($vocabulary->init_motion_x) ? $vocabulary->init_motion_x : 10;
      $tag_sphere_settings[$machine_name]['init_motion_y'] = isset($vocabulary->init_motion_y) ? $vocabulary->init_motion_y : 10;

      variable_set('tag_sphere_settings', $tag_sphere_settings);
      drupal_set_message(t('%vocab_name Tag sphere Block has been created. <a href="@url">Click here</a> to visit blocks page to configure.',
          array(
            '%vocab_name' => $vocabulary->name,
            '@url' => url("admin/structure/block"),
          )
        )
      );
    }
  }
  else {
    // Deletes the specific block row from the Database.
    db_delete('block')
      ->condition('delta', $machine_name)
      ->condition('module', 'tag_sphere')
      ->execute();

    if ($vocabulary->tag_sphere_status != isset($tag_sphere_settings[$machine_name]['tag_sphere_status'])) {
      drupal_set_message(t('%vocab_name Tag Sphere Block has been deleted.', array('%vocab_name' => $vocabulary->name)));
    }
    // Unset the specified machine_name.
    unset($tag_sphere_settings[$machine_name]);
    variable_set('tag_sphere_settings', $tag_sphere_settings);
  }
}

/**
 * Implements hook_taxonomy_vocabulary_delete().
 */
function tag_sphere_taxonomy_vocabulary_delete($vocabulary) {
  $tag_sphere_settings = variable_get('tag_sphere_settings', array());

  $machine_name = str_replace('_', '-', $vocabulary->machine_name);
  // Unset the specified machine_name.
  unset($tag_sphere_settings[$machine_name]);
  // Deletes the specific block row from the Database.
  db_delete('block')
    ->condition('delta', $machine_name)
    ->condition('module', 'tag_sphere')
    ->execute();
  drupal_set_message(t('%vocab_name Tag Sphere Block has been deleted.', array('%vocab_name' => $vocabulary->name)));
  variable_set('tag_sphere_settings', $tag_sphere_settings);
}
