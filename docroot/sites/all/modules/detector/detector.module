<?php

module_load_include('inc', 'detector', 'detector.lib');
module_load_include('inc', 'detector', 'plugin/rules/detector.rules');

/**
 * Implement hook_ctools_plugin_api().
 */
function detector_ctools_plugin_api($module, $api) {
  if ($module == "context" && $api == "context") {
    return array("version" => "3");
  }
  return array('version' => 1);
}

/**
 * Implementation of hook_init().
 */
function detector_init() {
  global $ua;
  
  $detector_active = variable_get('detector_active', false);
  $detector_special_detection = variable_get('detector_special_detection', false);
  
  $cli = (php_sapi_name() == 'cli');
  
  if ($detector_active && !$cli) {
    $found = _detector_get_lib();
    
    if ($found) {
      if ($detector_special_detection) {
        _detector_load_special();
      }
   
      $detector_path = libraries_get_path('Detector');
      
      require_once($detector_path . '/lib/Detector/Detector.php');
      
      $per_request = variable_get('detector_per_request', false);
      if ($per_request) {
        drupal_add_js($detector_path . '/web/js/features.js.php');
        drupal_add_js($detector_path . '/web/js/modernizr.2.5.2.min.custom.js');
      }
    }
  }
}

/**
 * Implementation of hook_permission().
 */
function detector_permission() {
  return array(
    'administer detector' => array(
      'title' => t('Administer Detector'), 
      'description' => t('Change settings for the Detector module.'),
    ),
    'use detector' => array(
      'title' => t('Use Detector'), 
      'description' => t('Detector will run for these users.'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function detector_menu() {
  $items['admin/config/development/detector'] = array(
    'title' => 'Detector',
    'description' => 'Set up Detector preferences, or view a demonstration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('detector_admin'),
    'access arguments' => array('administer detector'),
  );
  
  $items['admin/config/development/detector/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  
  $items['admin/config/development/detector/demo'] = array(
    'title' => 'Demonstration',
    'page callback' => 'detector_admin_demo',
    'access arguments' => array('administer detector'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  
  return $items;
}

/**
 * Implementation of hook_menu().
 */
function detector_admin_demo() {
  global $ua;
  
  $detector_active = variable_get('detector_active', false);
  
  if ($detector_active) {
    $detector_path = libraries_get_path('Detector');
	drupal_add_js($detector_path . '/web/js/tests.demo.js');
	
	$arr = DetectorProperty::listProperties();
	
	$rows = array();
	foreach ($arr as $k => $v) {
	  $rows[] = array($k, $v);
	}
	
	$header = array(t('Feature'), t('Value'));
	
	return '<p>' . t("Note: some of the features listed below that test TRUE " . 
	"actually test as PROBABLY or MAYBE under Modernizr's tests.") . '</p>' . 
	theme('table', array('header' => $header, 'rows' => $rows));
  }
  else {
    drupal_set_error("Detector is not active. Please enable it in Detector's settings page to display");
  }
  
  return '';
}

/**
 * Administration form
 */
function detector_admin() {
  module_load_include('inc', 'detector', 'detector.lib');
  
  $lib_present = _detector_check_lib();
  
  $form = array();
  
  $form['detector_active'] = array(
    '#type' => 'checkbox',
    '#title' => t("Detector is Active"),
    '#description' => t("Check to activate Detector."),
    '#default_value' => variable_get('detector_active', false),
    '#disabled' => !$lib_present,
  );
  
  $form['detector_per_request'] = array(
    '#type' => 'checkbox',
    '#title' => t("Run per request detection"),
    '#description' => t("Check to run Detector on every browser request."),
    '#default_value' => variable_get('detector_per_request', false),
    '#disabled' => !$lib_present,
  );
  
  $special_detection = variable_get('detector_special_detection', false);
  
  $form['detector_special_detection'] = array(
    '#type' => 'checkbox',
    '#title' => t("Special Detection Tests"),
    '#description' => t("Check if you're using the included Java or Flash detection tests."),
    '#default_value' => variable_get('detector_special_detection', false),
    '#disabled' => !$lib_present,
  );
  
  $form['detector_special_detection_java'] = array(
    '#type' => 'textfield',
    '#title' => t("Path to deployJava script"),
    '#description' => t("If you're using a local or alternative copy of deployJava, enter the path here."),
    '#default_value' => variable_get('detector_special_detection_java', ''),
    '#disabled' => !$lib_present && $special_detection,
  );
  
  $form['detector_special_detection_flash'] = array(
    '#type' => 'textfield',
    '#title' => t("Path to swfobject script"),
    '#description' => t("If you're using a local or alternative copy of swfobject, enter the path here."),
    '#default_value' => variable_get('detector_special_detection_flash', ''),
    '#disabled' => !$lib_present && $special_detection,
  );
  
  return system_settings_form($form);
}

/* Plugins */

/* Context */

/**
* Implementation of hook_context_registry().
*/
function detector_context_registry() {
  return array(
    'conditions' => array(
      'detector_feature' => array(
        'title' => t('Detector'),
        'description' => t('Triggers when a given feature is detected.'),
        'plugin' => 'detector_feature_context_condition',
      ),  
    ),  
  );  
}

/**
* Implementation of hook_context_plugins().
*/
function detector_context_plugins() {
  $plugins = array();
  $plugins['detector_feature_context_condition'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'detector'),
      'file' => 'plugins/context/detector.context.feature.inc',
      'class' => 'detector_feature_context_condition',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}

/* Rules */

/**
 * Implements detector_rules_event_info().
 *
 * @see hook_rules_event_info()
 * @see rules_invoke_event()
 */
function detector_rules_event_info() {
  return array(
    'detector_loaded' => array(
      'label' => t('Detector settings are loaded'),
      'group' => t('Detector'),
      'arguments' => array(
        'detector_feature' => array(
          'label' => t('Detector Feature'),
          'type' => 'text',
          'description' => t('The detector feature to check for.'),
          'options list' => 'detector_condition_comparison_feature_options',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_rules_condition_info.
 *
 * @see hook_rules_condition_info()
 */
function detector_rules_condition_info() {
  return array(
    'detector_condition_comparison' => array(
      'label' => t('Detector comparison'),
      'parameter' => array(
        'detector_feature' => array(
          'type' => 'text',
          'label' => t('Detector feature'), 
          'description' => t('The feature to compare.'),
          'optional' => FALSE, 
          'default value' => 'ua',
          'options list' => 'detector_condition_comparison_feature_options',
          'restriction' => 'input',
        ),
        'value' => array(
          'type' => 'text',
          'label' => t('Value'),
          'description' => t('The value to compare the feature with.'),
        ),
        'op' => array(
          'type' => 'text',
          'label' => t('Operator'),
          'description' => t('The comparison operator.'),
          'optional' => TRUE,
          'default value' => '==',
          'options list' => 'detector_condition_comparison_operator_options',
          'restriction' => 'input',
        ),
      ),
      'group' => t('Detector'),
    ),
  );
}

/**
 * Options list callback for condition detector_is, parameter detector_feature.
 */
function detector_condition_comparison_feature_options() {
  $props = DetectorProperty::listProperties();
  $keys = array_keys($props);
  return array_combine($keys, $keys);
}

/**
 * Options list callback for condition data_is.
 */
function detector_condition_comparison_operator_options() {
  return array(
    '==' => t('equals'),
    '<' => t('is lower than'),
    '<=' => t('is lower than or equal to'),
    '>' => t('is greater than'),
    '>=' => t('is greater than or equal to'),
    'starts' => t('starts with'),
    'ends' => t('ends with'),
    'contains' => t('contains'),    
  );
}

/**
 * Condition: Compare detector data.
 */
function detector_condition_comparison($feature, $value, $op) {
  $feature_value = NULL;
  
  // wtf simpletest
  $args = func_get_args();
  if (is_array($args) && isset($args['detector_feature'])) {
    $feature = $args['detector_feature'];
    $value = $args['value'];
    $op = $args['op'];
  }
  
  if ($val = DetectorProperty::getProperty($feature)) {
    $feature_value = $val;
  }
  
  switch ($op) {
    default:
    case '==':
      // In case both values evaluate to FALSE, further differentiate between
      // NULL values and values evaluating to FALSE.
      if (!is_null($feature_value) && !$value) {
        return (isset($feature_value) && isset($value)) || (!isset($feature_value) && !isset($value));
      }
      return $feature_value == $value;
    case '<':
      return strcmp($feature_value, $value) < 0;
    case '>':
      return strcmp($feature_value, $value) > 0;
    case '<=':
      return strcmp($feature_value, $value) <= 0;
    case '>=':
      return strcmp($feature_value, $value) >= 0;
    case 'contains':
      return strpos($feature_value, $value) !== FALSE;
    case 'starts':
      return strpos($feature_value, $value) === 0;
    case 'ends':
     return strrpos($feature_value, $value) === (strlen($feature_value) - strlen($value));
  }
}
