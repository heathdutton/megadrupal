<?php
/**
 * @file
 * Tests for the Detector module.
 */

module_load_include('inc', 'detector', 'detector.lib');

/**
 * Tests the Detector module.
 */
class DetectorTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Detector tests',
      'description' => 'Test the Detector module.',
      'group' => 'Detector',
    );
  }
  
  function setUp() {
    parent::setUp();
    $this->special_detection = variable_get('detector_special_detection', false);
    variable_set('detector_special_detection', true);
    
    $test_bot_ua = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.46 Safari/536.5';
    $this->additionalCurlOptions[CURLOPT_USERAGENT] = $test_bot_ua;
  }
  
  function tearDown() {
    parent::tearDown();
    variable_set('detector_special_detection', $this->special_detection);
  }

  /**
   * Tests whether Detector's UA object is present and populated.
   */
  public function testDetectorPresentPopulated() {
    global $ua;
    $this->assertTrue(
      is_object($ua) && !empty($ua->ua), 
      'The $ua object is populated.'
    );
  }
  
  /**
   * Tests whether Detector's API is working.
   */
  public function testDetectorAPI() {
    global $ua;
    $list = DetectorProperty::listProperties();
    $master = _detector_flatten_list($ua);
    $this->assertTrue(
      (count(array_diff($list, $master)) === 0), 
      'The API is working.'
    );
  }
  
  /**
   * Tests whether alternative special libraries are being used.
   */
  public function testSpecialLibraries() {
    $java = variable_get('detector_special_detection_java', '');
    if (empty($java)) {
      $java = 'http://java.com/js/deployJava.js';
    }
    $external_java = parse_url($java);
    $javascript = drupal_add_js($java);
    
    $flash = variable_get('detector_special_detection_flash', '');
    if (empty($flash)) {
      $flash = 'http://ajax.googleapis.com/ajax/libs/swfobject/2.2/swfobject.js';
    }
    $external_flash = parse_url($flash);
    $javascript = drupal_add_js($flash);
    
    $javascript = drupal_add_js('misc/collapse.js');
    
    $this->assertEqual(array_key_exists($java, $javascript), 
      "The Java library was found.");
    $this->assertEqual(array_key_exists($flash, $javascript), 
      "The Flash library was found.");
  }
}

/**
 * Tests the Detector module.
 */
class DetectorContextTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Detector Context tests',
      'description' => 'Test the Detector module\'s Context capabilities.',
      'group' => 'Detector',
    );
  }
  
  function setUp() {
    parent::setUp('context', 'ctools');
    
    $this->testHash = rand(0,9999999);

    // Create test contexts.
    ctools_include('export');
    
    $this->sitewideContext = ctools_export_new_object('context');
    $this->sitewideContext->name = 'sitewideContext';
    $this->sitewideContext->conditions = array(
      'sitewide' => array(
        'values' => array(
          1,
        ),
      ),
    );
    $this->sitewideContext->reactions = array(
      'theme_html' => array(
        'class' => 'detector-test-sitewideContext-' . $this->testHash,
      ),
    );
    $saved = context_save($this->sitewideContext);
    $this->assertTrue($saved, "Context 'sitewideContext' saved.");
    
    /*
    $this->checkedContext = ctools_export_new_object('context');
    $this->checkedContext->name = 'checkedContext';
    $this->checkedContext->conditions = array(
      'detector_feature' => array(
        'values' => array(
          0 => 'isComputer',
        ),
        'options' => array(
          'value_match' => '',
          'value_preset' => array(
            'TRUE' => 'TRUE',
            'FALSE' => 0,
          ),
        ),
      ),
    );
    $this->checkedContext->reactions = array(
      'theme_html' => array(
        'class' => 'detector-test-is-computer-checked-' . $this->testHash,
      ),
    );
    $saved = context_save($this->checkedContext);
    $this->assertTrue($saved, "Context 'checkedContext' saved.");
    */
    
    $this->typedContext = ctools_export_new_object('context');
    $this->typedContext->name = 'typedContext';
    $this->checkedContext->conditions = array(
      'detector_feature' => array(
        'values' => array(
          0 => 'isComputer',
        ),
        'options' => array(
          'value_match' => DetectorProperty::getProperty('isComputer'),
          'value_preset' => array(
            'TRUE' => 0,
            'FALSE' => 0,
          ),
        ),
      ),
    );
    $this->typedContext->reactions = array(
      'theme_html' => array(
        'class' => 'detector-test-is-computer-typed-' . $this->testHash,
      ),
    );
    $saved = context_save($this->typedContext);
    $this->assertTrue($saved, "Context 'typedContext' saved.");
    
    $this->user = $this->drupalCreateUser(array('access content'));
    
    // $test_bot_ua = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.46 Safari/536.5';
    // $this->additionalCurlOptions[CURLOPT_USERAGENT] = $test_bot_ua;
  }
  
  function tearDown() {
    parent::tearDown();
    context_delete($this->sitewideContext);
    // context_delete($this->checkedContext);
    context_delete($this->typedContext);
    user_delete($this->user->uid);
  }
  
  function testContext() {
    $this->drupalLogin($this->user);
    
    $this->drupalGet('node');
    $this->drupalGet('node');
    $this->assertRaw('detector-test-sitewideContext-' . $this->testHash);
    // $this->assertRaw('detector-test-is-computer-checked-' . $this->testHash);
    $this->assertRaw('detector-test-is-computer-typed-' . $this->testHash);
  }
}

/**
 * Tests the Detector module.
 */
class DetectorRulesTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Detector Rules tests',
      'description' => 'Test the Detector module\'s Rules capabilities.',
      'group' => 'Detector',
    );
  }

  function setUp() {
    parent::setUp('rules', 'rules_test');
    variable_set('rules_debug_log', 1);
    RulesLog::logger()->clear();
    
    $test_bot_ua = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.46 Safari/536.5';
    $this->additionalCurlOptions[CURLOPT_USERAGENT] = $test_bot_ua;
  }
  
  function tearDown() {
    parent::tearDown();
    variable_set('rules_debug_log', 0);
  }

  /**
   * Test type matching
   */
  function testAllUARules() {
    $props = DetectorProperty::listProperties();
    
    $count = 0;
    
    foreach ($props as $key => $value) {
      if ($count > 10) {
        break;
      }
      
      try {
        
        $condition = rules_condition('detector_condition_comparison', array(
          'detector_feature' => $key,
          'value' => $value,
          'op' => '=='
        ));
        
        $result = $condition->execute($props);
        
        $this->assertTrue($result, 'Detector matching condition using key ' . $key . ' evaluated.');
        
        /*
        $rule = rule();
        
        $rule->active = TRUE;
      
        // $rule->event('detector_loaded', array(
        //  'detector_feature' => $props,
        // ));
      
        $rule->condition('detector_condition_comparison', array(
          'detector_feature' => $key,
          'value' => $value,
          'op' => '=='
        ));
        
        $rule->action('drupal_message', array('message' => $key));
        
        $rule->integrityCheck();
      
        $rule->execute();
        
        $msgs = drupal_get_messages('status');
        $this->assertEqual(array_pop($msg['status']), $key);
        */
      
        // $text = RulesLog::logger()->render();
        // $this->verbose($text);
      }
      catch (RulesIntegrityException $e) {
        $this->fail('Integrity check has thrown exception: ' . $e->getMessage() . " \n ". $e->getTraceAsString());
      }
      catch (Exception $e) {
        $this->fail(get_class($e) . ': ' . $e->getMessage() . " \n ". $e->getTraceAsString());
      }
      
      $count++;
    }
  }
}

