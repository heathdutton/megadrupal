<?php
//v7

/**
* @param string $haystack
* @param string $needle
* @return boolean whether $haystack starts with substring $needle
*/
function starts_with($haystack, $needle)
{
   //Return as boolean so no need to run a check_plain() call.
   return (strpos($haystack, $needle) === 0);
}

/**
* @param string $haystack
* @param string $needle
* @return boolean whether $haystack ends with substring $needle
*/
function ends_with($haystack, $needle)
{
   //Return as boolean so no need to run a check_plain() call.
   return (strrevpos($haystack, $needle) === (strlen($haystack) - strlen($needle)));
}

//This surround function was originally coded to return null when the value was empty.  I've instead changed it to at least return the
//withthis andthis variables because it would be useful in the multi_between() function.  doing so allows the array keys to be returned even if
//the values are empty.  If it were left the other way around, the array keys would be not count every instance.
function surround($surround_this, $withthis = '', $andthis = '', $when_empty = '', $surround_when_empty_as_well = FALSE, $check_plain = TRUE)
{
   if ($surround_when_empty_as_well && empty($surround_this))
   {
      $surround_this = $when_empty;
   }

   if (!$check_plain)
   {
      if (empty($surround_this))
      {
         $surrounded_value =  $withthis . $when_empty . $andthis;
      }
      else
      {
          $surrounded_value = $withthis . $surround_this . $andthis;
      }
      return $surrounded_value;
   }

   if (empty($surround_this))
   {
      $surrounded_value =  $withthis . $when_empty . $andthis;
   }
   else
   {
       $surrounded_value = $withthis . $surround_this . $andthis;
   }
   return check_plain($surrounded_value);
}

function multi_between($this, $that, $inthat, $check_plain = TRUE)
{
   $counter = 0;
   //Check plain messes up the data in the while loop, we dont want to mess with the data while it's being manipulated so we wait until it's all done
   //and THEN we run check_plain on the return value.
   while ($inthat)
   {
      if (before($that, $inthat, FALSE))
      {
         $elements[$counter] = before($that, $inthat, FALSE);
         $elements[$counter] = after($this, $elements[$counter], FALSE);
         $counter++;
      }
      
      $inthat = after($that, $inthat, FALSE);
      
   }
   
   if (!$check_plain)
   {
      return $elements;
   }
   
   $elements = array_map('check_plain', $elements);
   return $elements;
}

function after($this, $inthat, $check_plain = TRUE)
{
    if (!is_bool(strpos($inthat, $this)))
    {
      if (!$check_plain)
      {
         return substr($inthat, strpos($inthat,$this)+strlen($this));
      }

      return check_plain(substr($inthat, strpos($inthat,$this)+strlen($this)));
    }
}

function after_last($this, $inthat, $check_plain = TRUE)
{
    if (!is_bool(strrevpos($inthat, $this)))
    {
      if (!$check_plain)
      {
         return substr($inthat, strrevpos($inthat, $this)+strlen($this));
      }

      return check_plain(substr($inthat, strrevpos($inthat, $this)+strlen($this)));
    }
}

//Regex version of after()
function after_pattern($this_pattern, $inthat, $check_plain = TRUE)
{
   $result = '';

   $matches = array();
   if (preg_match($this_pattern, $inthat, $matches))
   {
      $matched = $matches[0];
      $result = after($matched, $inthat, FALSE);
   }

   if (!$check_plain)
   {
      return $result;
   }

  return check_plain($result);
}

//Regex version of after_last()
function after_last_pattern($this_pattern, $inthat, $check_plain = TRUE)
{
   $result = '';

   $matches = array();
   if (preg_match_all($this_pattern, $inthat, $matches))
   {
      $matched = $matches[0][count($matches[0]) - 1];
      $result = after_last($matched, $inthat, FALSE);
   }

   if (!$check_plain)
   {
      return $check_plain;
   }

   return check_plain($result);
}

function before($this, $inthat, $check_plain = TRUE)
{
   if (!$check_plain)
   {
      return substr($inthat, 0, strpos($inthat, $this));
   }

   return check_plain(substr($inthat, 0, strpos($inthat, $this)));
}

function before_last($this, $inthat, $check_plain = TRUE)
{
   if (!$check_plain)
   {
      return substr($inthat, 0, strrevpos($inthat, $this));
   }

   return check_plain(substr($inthat, 0, strrevpos($inthat, $this)));
}

//Regex version of before()
function before_pattern($this_pattern, $inthat, $check_plain = TRUE)
{
   $result = '';

   $matches = array();
   if (preg_match($this_pattern, $inthat, $matches))
   {
      $matched = $matches[0];
      $result = before($matched, $inthat, FALSE);
   }

   if (!$check_plain)
   {
      return $result;
   }

   return check_plain($result);
}

//Regex version of before_last()
function before_last_pattern($this_pattern, $inthat, $check_plain = TRUE)
{
   $result = '';

   $matches = array();
   if (preg_match_all($this_pattern, $inthat, $matches))
   {
      $matched = $matches[0][count($matches[0]) - 1];;
      $result = before_last($matched, $inthat, FALSE);
   }

   if (!$check_plain)
   {
      return $result;
   }

   return check_plain($result);
}


function between($this, $that, $inthat, $check_plain = TRUE)
{
   if (!$check_plain)
   {
      return before($that, after($this, $inthat, FALSE), FALSE);
   }

return check_plain(before($that, after($this, $inthat)));
}

function between_last($this, $that, $inthat, $check_plain = TRUE)
{
   if (!$check_plain)
   {
      return after_last($this, before_last($that, $inthat));
   }

   return check_plain(after_last($this, before_last($that, $inthat)));
}

//Regex version of between
function between_pattern($this_pattern, $that_pattern, $inthat, $check_plain = TRUE)
{
   $result = before_pattern($that_pattern, after_pattern($this_pattern, $inthat, FALSE), FALSE);
   if (!$check_plain)
   {
      return $result;
   }

   return check_plain($result);
}

//Regex version of between_last
function between_last_pattern($this_pattern, $that_pattern, $inthat, $check_plain = TRUE)
{
   $result = after_last_pattern($this_pattern, before_last_pattern($that_pattern, $inthat, FALSE), FALSE);
   if (!$check_plain)
   {
      return $result;
   }
   check_plain($result);
}

function strrevpos($haystack, $needle)
{
   if (version_compare(phpversion(), '5.0') < 0)
   {
      // php4 doesn't support strrpos for strings, but it does for a single character
      $rev_pos = strpos(strrev($haystack), strrev($needle));
      if ($rev_pos === FALSE)
      {
         return FALSE;
      }
      else
      {
         return strlen($haystack) - $rev_pos - strlen($needle);
      }
   }
   else
   {
      // php5 does support strrpos for strings
      return strrpos($haystack, $needle);
   }
}

/* Personal utility function, all my modules have this. I dont like
the drupal devel module so I use this instead. */
if (!function_exists('printr'))
{
   function printr($arr)
   {
      echo "<pre>";
      print_r($arr);
      echo "</pre>";
   }
}