<?php
/**
 * Implements hook_search_info().
 */
function apachesolr_media_search_info() {
  return array(
    'title' => 'File',
    'path' => 'file',
    'conditions_callback' => 'apachesolr_media_search_conditions',
  );
}

/**
 * Implements hook_search_execute().
 * @param $keys
 *   The keys that are available after the path that is defined in
 *   hook_search_info
 * @param $conditions
 *   Conditions that are coming from apachesolr_search_conditions
 */
function apachesolr_media_search_execute($keys = NULL, $conditions = NULL) {
  $search_page = apachesolr_search_page_load('core_search');
  $results = apachesolr_search_search_results($keys, $conditions, $search_page);
  return $results;
}

/**
 * Implementation of a search_view() conditions callback.
 */
function apachesolr_media_search_conditions() {
  //get default conditions from the core_search
  $search_page = apachesolr_search_page_load('core_search');
  $search_page->search_path = 'seach/file';
  $search_page->env_id = variable_get('apachesolr_media_default_environment');
  $conditions = apachesolr_search_conditions_default($search_page);
  return $conditions;
}

/**
 * Implements hook_entity_info_alter().
 */
function apachesolr_media_apachesolr_entity_info_alter(&$entity_info) {
  $entity_info['file']['indexable'] = TRUE;
  $entity_info['file']['result callback'] = 'apachesolr_media_search_file_result';
}

/**
 * Callback function for file search results.
 *
 * @param stdClass $doc
 *   The result document from Apache Solr.
 * @param array $result
 *   The result array for this record to which to add.
 */
function apachesolr_media_search_file_result($doc, &$result, &$extra) {
  $doc->uid = $doc->is_uid;
  $result += array(
    'type' => node_type_get_name($doc->bundle),
    'user' => theme('username', array('account' => $doc)),
    'date' => isset($doc->changed) ? $doc->changed : 0,
//    'node' => $doc,
    'uid' => $doc->is_uid,
  );

  if (isset($doc->is_comment_count)) {
    $extra['comments'] = format_plural($doc->is_comment_count, '1 comment', '@count comments');
  }
}

function apachesolr_media_cron() {
  $env_id = variable_get('apachesolr_media_default_environment');
  if (empty($env_id)) {
    return;
  }
  if (apachesolr_environment_variable_get($env_id, 'apachesolr_read_only', APACHESOLR_READ_WRITE) == APACHESOLR_READ_ONLY) {
    return;
  }
  module_load_include('inc', 'apachesolr_media', 'includes/index');
  $limit = variable_get('apachesolr_cron_limit', 50);
  apachesolr_media_index_files($env_id, $limit);
}

function apachesolr_media_menu() {
  $items['admin/config/search/apachesolr/media'] = array(
    'title' => 'File index',
    'description' => 'Administer Apache Solr Media.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apachesolr_media_index_action_form'),
    'access arguments' => array('administer search'),
    'file' => 'includes/admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Returns an array of rows from a query based on an indexing namespace.
 */
function apachesolr_media_get_file_to_index($namespace, $limit) {
  $rows = array();
  if (apachesolr_environment_variable_get(apachesolr_default_environment(), 'apachesolr_read_only', APACHESOLR_READ_WRITE) == APACHESOLR_READ_ONLY) {
    return $rows;
  }

  $excluded_types = apachesolr_get_excluded_types($namespace);
//  list($last_change, $last_fid) = apachesolr_get_last_change($namespace);
//  $results = apachesolr_search_run($name, array $params = array(), $solrsort = '', $base_path = '', $page = 0, $solr = NULL)

  $query = db_select('file_managed', 'fm')
    ->fields('fm', array('fid', 'timestamp'))
    ->condition('fm.status', 1)
    ->orderBy('fm.timestamp', 'ASC')
    ->orderBy('fm.fid', 'ASC')
    ->range(0, $limit);
//  apachesolr_query_add_excluded_types($query, $excluded_types);
  $result = $query->execute();
  return $result;
}

function apachesolr_media_file_type_info() {
  return array(
    'pdf' => array(
      'label' => t('PDF'),
//      'admin' => array(
//        'search' => 'admin/config/media/file-types/manage/pdf/search'
//      ),
    ),
    'epub' => array(
      'label' => t('EPUB'),
    )
  );
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 */
function apachesolr_media_file_mimetype_mapping_alter(&$mapping) {
  $new_mappings['epub'] = 'application/epub+zip';

  foreach ($new_mappings as $extension => $mime_type) {
    if (!in_array($mime_type, $mapping['mimetypes'])) {
      // If the mime type does not already exist, add it.
      $mapping['mimetypes'][] = $mime_type;
    }

    // Get the index of the mime type and assign the extension to that key.
    $index = array_search($mime_type, $mapping['mimetypes']);
    $mapping['extensions'][$extension] = $index;
  }
}

function apachesolr_media_form_apachesolr_environment_edit_form_alter(&$form, &$form_state, $form_id) {
  if ($form['make_default']['#disabled'] == FALSE) {
    if (variable_get('apachesolr_media_default_environment') == $form['env_id']['#default_value']) {
      $form['apachesolr_media'] = array(
        '#type' => 'checkbox',
        '#title' => t('Make this Solr search environment for indexing files (Apachesolr Media)'),
        '#default_value' => TRUE,
        '#disabled' => TRUE,
      );
    }
    else {
      $form['apachesolr_media'] = array(
        '#type' => 'checkbox',
        '#title' => t('Make this Solr search environment for indexing files (Apachesolr Media)'),
        '#default_value' => FALSE,
        '#disabled' => FALSE,
      );
    }
    $form['actions']['save']['#validate'][] = 'apachesolr_media_environment_edit_validate';
    $form['actions']['save']['#submit'][] = 'apachesolr_media_environment_edit_submit';
  }
}

function apachesolr_media_environment_edit_validate($form, &$form_state) {
  if ($form_state['values']['make_default'] == TRUE && $form_state['values']['apachesolr_media'] == TRUE) {
      form_set_error('apachesolr_media', t('You can\'t use one index for both nodes and files!'));
  }
}

function apachesolr_media_environment_edit_submit($form, &$form_state) {
  if (empty($form_state['values']['make_default']) && $form_state['values']['apachesolr_media'] == TRUE) {
    variable_set('apachesolr_media_default_environment', $form_state['values']['env_id']);
    drupal_set_message(t('The %name search environment has been saved for file index.', array('%name' => $form_state['values']['name'])));
  }
}

