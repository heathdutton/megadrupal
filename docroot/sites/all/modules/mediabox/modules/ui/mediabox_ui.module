<?php
/**
 * @file
 * Mediabox UI module.
 */

require_once 'includes/mediabox_ui.elements.inc';
require_once 'includes/mediabox_ui.fields.inc';

/**
 * Implements hook_menu().
 */
function mediabox_ui_menu() {
  $items = array();

  $items['admin/config/mediabox'] = array(
    'title' => 'Mediabox',
    'description' => 'Mediabox configuration.',
    'position' => 'left',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['mediabox/browser/%ctools_js/%/%/%'] = array(
    'page arguments' => array(2, 3, 4, 5),
    'page callback' => 'mediabox_ui_browser_page',
    'access arguments' => array('access mediabox library'),
    'file' => 'includes/mediabox_ui.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['mediabox/upload/%ctools_js/%/%/%'] = array(
    'page callback' => 'mediabox_ui_upload_page',
    'page arguments' => array(2, 3, 4, 5),
    'access arguments' => array('upload mediabox files'),
    'file' => 'includes/mediabox_ui.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_entity_info().
 */
function mediabox_ui_entity_info() {

  $entities['mediabox_display'] = array(
    'label' => t('Mediabox display'),
    'controller class' => 'MediaboxDisplayController',
    'views controller class' => 'MediaboxDisplayViewsController',
    'metadata controller class' => 'MediaboxDisplayMetaDataController',
    'entity class' => 'MediaboxDisplayEntity',
    'view callback' => 'mediabox_display_view',
    'load hook' => 'mediabox_display_load',
    'base table' => 'mediabox_display',
    'fieldable' => TRUE,
    'module' => 'mediabox_ui',
    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'type',
      'label' => 'title',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(
      'default' => array(
        'label' => t('Default'),
      ),
    ),
    'view modes' => array(
      'default' => array(
        'label' => t('Default'),
        'custom settings' => FALSE,
      ),
      'display' => array(
        'label' => t('Display'),
        'custom settings' => FALSE,
      ),
    ),
    'static cache' => TRUE,
  );

  $entities['mediabox_display_type'] = array(
    'label' => t('Mediabox Display Type'),
    'entity class' => 'MediaboxDisplayType',
    'controller class' => 'MediaboxDisplayTypeController',
    'base table' => 'mediabox_display_type',
    'fieldable' => FALSE,
    'bundle of' => 'mediabox_display',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'title',
    ),
    'module' => 'mediabox_ui',
    'admin ui' => array(
      'path' => 'admin/structure/mediabox-ui',
      'file' => 'includes/mediabox_ui.entity.inc',
      'controller class' => 'MediaboxDisplayTypeUIController',
      'menu wildcard' => '%mediabox_display_type',
    ),
    'access callback' => 'mediabox_display_type_access',
  );

  return $entities;
}

/**
 * Implements hook_entity_info_alter().
 */
function mediabox_ui_entity_info_alter(&$entity_info) {
  $bundles = mediabox_display_get_bundles();
  if (is_array($bundles)) {
    foreach ($bundles as $bundle) {
      $entity_info['mediabox_display']['bundles'][$bundle->type] = array(
        'label' => $bundle->title,
        'admin' => array(
          'path' => 'admin/structure/mediabox-ui/manage/%mediabox_display_type',
          'real path' => 'admin/structure/mediabox-ui/manage/' . $bundle->type,
          'bundle argument' => 4,
          'access arguments' => array('administer media display types'),
        ),
      );
    }
  }
}

/**
 * Implements of hook_permission().
 */
function mediabox_ui_permission() {
  return array(
    'administer media display types' => array(
      'title' => t('Administer mediabox display bundles'),
      'description' => t('Allows to access mediabox display bundles administration'),
    ),
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function mediabox_ui_field_extra_fields() {
  $fields = array(
    'title' => array(
      'label' => t('Title'),
      'description' => t('mediabox entity meta'),
      'weight' => -5,
    ),
    'alternate_text' => array(
      'label' => t('Alt. text'),
      'description' => t('mediabox entity meta'),
      'weight' => -3,
    ),
    'meta_dimension' => array(
      'label' => t('Dimensions'),
      'description' => t('mediabox entity meta'),
      'weight' => -1,
    ),
  );

  // All our bundles should get extra fields info.
  $info = entity_get_info('mediabox_display');
  foreach($info['bundles'] as $bundle_name => $bundle) {
    $extra['mediabox_display'][$bundle_name] = array(
      'form' => $fields,
      'display' => $fields,
    );
  }

  return $extra;
}

/**
 * Implements hook_entity_insert().
 */
function mediabox_ui_entity_insert($entity, $entity_type) {
  // Do something on entity insert?
}

/**
 * Implements hook_entity_update().
 */
function mediabox_ui_entity_update($entity, $entity_type) {
  // Do something on entity update?
}

/**
 * Implements hook_filter_info().
 */
function mediabox_ui_filter_info() {
  $filters = array();
  $filters['filter_mediabox'] = array(
    'title' => t('Convert mediabox placeholders into mediabox view'),
    'process callback' => '_mediabox_filter',
  );

  return $filters;
}

/**
 * Implements hook_views_api().
 */
function mediabox_ui_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'mediabox_ui') . '/views',
  );
}

/**
 * Implements hook_theme().
 */
function mediabox_ui_theme() {
  return array(
    'mediabox_multiple_value_form' => array(
      'render element' => 'element',
      'file' => 'includes/mediabox_ui.theme.inc',
    ),
    'mediabox_ui_element' => array(
      'render element' => 'element',
    ),
    'mediabox_display' => array(
      'render element' => 'elements',
      'template' => 'theme/mediabox_display',
    ),
  );
}

/* API */

/**
 * Access callback for mediabox display bundles.
 * 
 * @param $op
 * @param $mediabox_display
 * @param null $account
 * @param null $entity_type
 * @return bool
 */
function mediabox_display_type_access($op, $mediabox_display, $account = NULL, $entity_type = NULL) {
  if (!isset($account)) {
    $account = $GLOBALS['user'];
  }

  switch ($op) {
    // Only one permission for managing bundles
    case 'create':
    case 'view':
    case 'edit':
    case 'update':
      return user_access('administer mediabox types', $account);
  }

  return FALSE;
}

/**
 * @param $type
 * @return array|mixed
 */
function mediabox_display_type_load($type) {
  return mediabox_display_get_bundles($type);
}

function mediabox_display_load($ids) {
  if (is_array($ids)) {
    return mediabox_display_load_multiple($ids);
  }

  $mediabox_display = mediabox_display_load_multiple(array($ids));
  return array_shift($mediabox_display);
}

/**
 * @param $ids
 * @return mixed
 */
function mediabox_display_load_multiple($ids) {
  return entity_load('mediabox_display', $ids);
}

/**
 * @param $media
 * @return bool
 */
function mediabox_display_delete($media) {
  return entity_delete('mediabox_display', entity_id('mediabox_display', $media));
}

/**
 * @param $media
 * @return bool
 */
function mediabox_display_type_delete($media) {
  return entity_delete('mediabox_display_type', entity_id('mediabox_display_type', $media));
}

/**
 * @param array $ids
 * @return bool
 */
function mediabox_display_delete_multiple(array $ids) {
  return entity_delete_multiple('mediabox_display', $ids);
}

/**
 * @param array $ids
 * @return bool
 */
function mediabox_display_type_delete_multiple(array $ids) {
  return entity_delete_multiple('mediabox_display_type', $ids);
}

/**
 * Save mediabox entity
 *
 * @param mediabox $media
 * @return mixed
 */
function mediabox_display_save($media) {
  return entity_save('mediabox_display', $media);
}

/**
 * Save MediaboxType entity
 *
 * @param $media_type
 * @return mixed
 */
function mediabox_display_type_save($media_type) {
  return entity_save('mediabox_type', $media_type);
}

/**
 * Get media by id or array of ids
 *
 * @param $ids
 * @return void
 */
function mediabox_ui_db_get_media($ids) {
  $formed_ids = array();
  if (is_array($ids)) {
    foreach ($ids as $id) {
      $formed_ids[$id] = $id;
    }
  }
  else {
    $formed_ids[$ids] = $ids;
  }

  return entity_get_controller('mediabox_display')->load($formed_ids);
}

/**
 * Remove media
 *
 * @param $media
 * @return
 */
function mediabox_ui_db_remove_media($media) {
  return entity_get_controller('mediabox_display')->remove($media);
}

/**
 * Get all media files in library
 *
 * @return array
 */
function mediabox_ui_db_get_all_media() {
  return entity_get_controller('mediabox_display')->loadAll();
}

/**
 * @param $media
 * @return mixed
 */
function mediabox_ui_db_save_media($media) {
  return entity_get_controller('mediabox_display')->save($media);
}

/**
 * @param $type_name
 * @return array|mixed
 */
function mediabox_display_get_bundles($type_name = NULL) {
  $types = entity_load_multiple_by_name('mediabox_display_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/* Helpers */

/**
 * Creates a Drupal Ajax mediabox dialog command.
 *
 * @param $html
 *   The data to use with the jQuery method.
 * @param $options
 * @param $settings
 *   An optional array of settings that will be used for this command only.
 *
 * @return array An array suitable for use with the ajax_render() function.
 */
function mediabox_ui_command_dialog($html, $options, $settings = NULL) {
  return array(
    'command' => 'mediaboxDialog',
    'data' => $html,
    'options' => $options,
    'settings' => $settings,
  );
}

/**
 * Creates a Drupal Ajax mediabox info dialog command.
 *
 * @param $title
 * @param $message
 *
 * @return array An array suitable for use with the ajax_render() function.
 */
function mediabox_ui_command_info_dialog($title, $message) {
  return mediabox_ui_command_dialog('<div>' . $message . '</div>', array(
      'title' => $title,
      'buttons' => array(
        'mediabox-browser-close' => array(
          'text' => t('OK'),
          'class' => 'button form-submit btn btn-default',
        ),
      ),
    )
  );
}

/**
 * Creates a Drupal Ajax mediabox close dialog command. Will close current
 * mediabox dialog.
 *
 * @return array An array suitable for use with the ajax_render() function.
 */
function mediabox_ui_command_close_dialog() {
  return array(
    'command' => 'mediaboxCloseDialog',
  );
}

/**
 * Creates a Drupal Ajax mediabox add files command.
 *
 * @param $ids
 *
 * @return array An array suitable for use with the ajax_render() function.
 */
function mediabox_ui_command_add_files($ids) {
  return array(
    'command' => 'mediaboxAddFiles',
    'ids' => $ids,
  );
}

/**
 * Filter - replacing the placeholders with actual mediabox entities.
 *
 * @param $text
 * @param $filter
 * @return mixed
 */
function _mediabox_filter($text, $filter) {

  $matches = array();
  preg_match_all('/[mediabox:id:[0-9]+]/', $text, $matches);

  foreach (array_shift($matches) as $match) {

    $id = explode(":", $match);
    $mediabox = mediabox_display_load($id);
    if ($mediabox) {
      $view = mediabox_display_view($mediabox);
      $replacement = drupal_render($view);
      $text = str_replace($match, $replacement, $text);
    }
  }

  return $text;
}

function mediabox_ui_db_get_bundle_options($index = NULL) {
  $options = db_select('mediabox_display_type', 't')
    ->fields('t', array('type', 'title'))
    ->execute()->fetchAllKeyed();

  if (!empty($index) && isset($options[$index])) {
    return $options[$index];
  }

  return $options;
}
