<?php
/**
 * @file
 * Mediabox Crop module.
 */

/**
 * Implements hook_menu().
 */
function mediabox_crop_menu() {
  $items = array();

  $items['admin/structure/mediabox-library/crop/%mediabox'] = array(
    'title' => 'Crop settings for each image style',
    'access arguments' => array('administer media files'),
    'page arguments' => array(4),
    'page callback' => 'mediabox_crop_styles',
    'file' => 'includes/mediabox_crop.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_library().
 */
function mediabox_crop_library() {
  $libraries = array();
  $library_path = _mediabox_library_path('Jcrop');

  $libraries['Jcrop'] = array(
    'title' => 'Jcrop',
    'website' => 'https://github.com/tapmodo/Jcrop',
    'version' => '0.9.12',
    'css' => array(
      $library_path . '/css/jquery.Jcrop.min.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
    'js' => array(
      $library_path . '/js/jquery.Jcrop.min.js' => array(
        'type' => 'file',
      ),
    )
  );

  return $libraries;
}

/**
 * Implements hook_image_effect_info().
 */
// @todo - This is commented for now because this custom image effect is very
// broken. We will maybe use this effect when we finish decoupling of crop
// functionality from the core mediabox UI.
// Check http://drupal.org/node/1956148 for more info.
//function mediabox_crop_image_effect_info() {
//  $effects = array();
//
//  $effects['mediabox_crop'] = array(
//    'label' => t('Mediabox Crop'),
//    'effect callback' => 'mediabox_crop_image',
//  );
//
//  return $effects;
//}

/**
 * Implements hook_entity_remove().
 * 
 * Remove associated crop.
 *
 * @param $entity
 * @param $entity_type
 */
function mediabox_crop_entity_remove($entity, $entity_type) {
}

/* API */

/**
 * Save or update mediabox crop settings.
 *
 * @param mediaboxCrop $mediabox_crop
 * @return bool|mediaboxCrop
 */
function mediabox_crop_db_save(MediaboxCrop $mediabox_crop) {
  $transaction = db_transaction();

  try {
    // UPDATE
    if (!empty($mediabox_crop->id)) {
      $mediabox_crop->modified = REQUEST_TIME;
      drupal_write_record('mediabox_crops', $mediabox_crop, 'id');
    }
    else {
      // INSERT
      $mediabox_crop->created = REQUEST_TIME;
      $mediabox_crop->modified = REQUEST_TIME;
      drupal_write_record('mediabox_crops', $mediabox_crop);
    }

    return $mediabox_crop;

  } catch (PDOException $e) {
    $transaction->rollback();
    watchdog_exception(WATCHDOG_ERROR, $e, t('Can not save media crop!'));
    return FALSE;
  }
}

/**
 * Delete mediabox crop setting.
 * 
 * @param MediaboxCrop $mediabox_crop
 * @return boolean
 */
function mediabox_crop_db_delete(MediaboxCrop $mediabox_crop) {
  $transaction = db_transaction();

  try {
    if (!empty($mediabox_crop->id)) {
      db_delete('mediabox_crops')
        ->condition('id', $mediabox_crop->id)
        ->execute();
    }
    return TRUE;
  } catch (PDOException $e) {
    $transaction->rollback();
    watchdog_exception(WATCHDOG_ERROR, $e, t('Can no delete media crop settings!'));
    return FALSE;
  }
}

/**
 * @param $id
 * @return mediaboxCrop
 */
function mediabox_crop_load($id) {
  $data = db_select('mediabox_crops', 'xc')
    ->fields('xc')
    ->condition('id', $id)
    ->execute()->fetch();

  $crop = new MediaboxCrop();
  $crop->populateFromClass($data);
  return $crop;
}

/**
 * Get all crop settings for entity
 *
 * @param $entity_id
 * @return array
 */
function mediabox_crop_db_get_by_entity_id($entity_id) {
  $results = array();

  $crops = db_select('mediabox_crops', 'c')
    ->fields('c')
    ->condition('entity_id', $entity_id)
    ->execute()
    ->fetchAll();

  if (is_array($crops)) {
    foreach ($crops as $crop) {
      $mediabox_crop = new MediaboxCrop();
      $mediabox_crop->populateFromClass($crop);
      $results[$crop->origin_image_style] = $mediabox_crop;
    }
  }

  return $results;
}

/**
 * Delete all crops settings for given entity ids.
 *
 * @param $entity_ids array
 * @return boolean
 */
function mediabox_crop_db_delete_by_entity($entity_ids) {
  $transaction = db_transaction();

  if (empty($entity_ids)) {
    return;
  }

  try {
    db_delete('mediabox_crops')
      ->condition('entity_id', $entity_ids, 'IN')
      ->execute();
    return TRUE;
  } catch (PDOException $e) {
    $transaction->rollback();
    watchdog_exception(WATCHDOG_ERROR, $e, t('Can no delete media crop settings!'));
    return FALSE;
  }
}

/**
 * Get crop settings by entity ID and style name
 *
 * @param $entity_id
 * @param $style_name
 * @return mediaboxCrop|NULL
 */
function mediabox_crop_db_get_by_entity_id_and_style($entity_id, $style_name) {
  $crops = db_select('mediabox_crops', 'c')
    ->fields('c')
    ->condition('entity_id', $entity_id)
    ->condition('origin_image_style', $style_name)
    ->execute()
    ->fetchAll();
  $crop = array_shift($crops);

  if ($crop === NULL) {
    return NULL;
  }

  $mediabox_crop = new MediaboxCrop();
  $mediabox_crop->populateFromClass($crop);
  return $mediabox_crop;
}

/**
 * @todo - doc.
 * 
 * @param stdClass $image
 * @param type $settings
 * @return boolean
 */
function mediabox_crop_image(stdClass $image, $settings) {
  $style_name = mediabox_crop_get_style_name_from_uri();
  $fid = mediabox_crop_get_fid_by_uri($image->source);
  $mediabox = mediabox_db_get_media_by_fid($fid);
  $crop = mediabox_crop_db_get_by_entity_id_and_style($mediabox->id, $style_name);

  // No crop setting found
  if ($crop == NULL) {
    return FALSE;
  }

  image_crop($image, $crop->x, $crop->y, $crop->width, $crop->height);
}

/**
 * Get image fid by uri.
 *
 * @param string $uri
 * @return int
 */
function mediabox_crop_get_fid_by_uri($uri) {
  $images = db_select('file_managed', 'f')
    ->fields('f')
    ->condition('uri', $uri)
    ->execute()
    ->fetchAll();

  $image = array_shift($images);
  return $image->fid;
}

/**
 * Get style name from URI.
 *
 * @return bool|string
 */
function mediabox_crop_get_style_name_from_uri() {
  $split = explode('/', $_GET['q']);
  $pointer = array_search('styles', $split);

  if ($pointer !== FALSE) {
    return $split[++$pointer];
  }

  return FALSE;
}

/**
 * Get best coords by style's effects.
 *
 * @param array $style
 * @return array
 */
function mediabox_crop_get_default_coords_from_style($style = array()) {
  $coords = array();

  $coords['x'] = 0;
  $coords['y'] = 0;

  $coords['x1'] = '';
  $coords['y1'] = '';
  $coords['w'] = '';
  $coords['h'] = '';


  // Search for crop
  foreach ($style['effects'] as $effect) {
    if ($effect['name'] == 'image_crop') {
      $coords['x1'] = $effect['data']['width'];
      $coords['y1'] = $effect['data']['height'];
      $coords['w'] = $effect['data']['width'];
      $coords['h'] = $effect['data']['height'];
    }
  }

  if ($coords['x1'] == '' || $coords['y1'] == '') {
    foreach ($style['effects'] as $effect) {
      if (isset($effect['data']['width'])) {
        $coords['x1'] = $effect['data']['width'];
        $coords['y1'] = $effect['data']['height'];
        $coords['h'] = $effect['data']['width'];
        $coords['w'] = $effect['data']['height'];
      }
    }
  }

  return $coords;
}
