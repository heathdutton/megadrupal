<?php
/**
 * Mediabox module.
 * @file
 */

/**
 * Implements hook_entity_info().
 */
function mediabox_entity_info() {

  $entities['mediabox'] = array(
    'label' => t('Mediabox'),
    'controller class' => 'MediaboxController',
    'views controller class' => 'MediaboxViewsController',
    'metadata controller class' => 'MediaboxMetaDataController',
    'entity class' => 'MediaboxEntity',
    'view callback' => 'mediabox_view',
    'load hook' => 'mediabox_load',
    'base table' => 'mediabox',
    'fieldable' => TRUE,
    'module' => 'mediabox',
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'type',
      'label' => 'title',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'view modes' => array(
      'library' => array(
        'label' => t('Library'),
        'custom settings' => TRUE,
      ),
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
      'full' => array(
        'label' => t('Full'),
        'custom settings' => TRUE,
      ),
    ),
    'static cache' => TRUE,
    'bundles' => array(),
  );

  $entities['mediabox_type'] = array(
    'label' => t('Mediabox Type'),
    'entity class' => 'MediaboxType',
    'controller class' => 'MediaboxTypeController',
    'base table' => 'mediabox_type',
    'fieldable' => FALSE,
    'bundle of' => 'mediabox',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'title',
    ),
    'module' => 'mediabox',
    'admin ui' => array(
      'path' => 'admin/structure/mediabox',
      'file' => 'includes/mediabox.ui_controller.inc',
      'controller class' => 'MediaboxTypeUIController',
      'menu wildcard' => '%mediabox_type',
    ),
    'access callback' => 'mediabox_type_access',
  );

  // Add bundle info but bypass entity_load() as we cannot use it here.
  $types = db_select('mediabox_type', 'et')
    ->fields('et')
    ->execute()
    ->fetchAllAssoc('type');
  foreach ($types as $name => $type) {
     $entities['mediabox']['bundles'][$name] = array(
       'label' => $name,
       'admin' => array(
         'path' => 'admin/structure/mediabox/manage/%mediabox_type',
         'real path' => 'admin/structure/mediabox/manage/' . $type->type,
         'bundle argument' => 4,
         'access arguments' => array('administer mediabox types'),
       ),
     );
   }

  // Support entity cache module.
  if (module_exists('entitycache')) {
    $entities['mediabox']['field cache'] = FALSE;
    $entities['mediabox']['entity cache'] = TRUE;
  }

  return $entities;
}

/**
 * Access callback for mediabox bundles.
 *
 * @param $op
 * @param $mediabox
 * @param null $account
 * @param null $entity_type
 * @return bool
 */
function mediabox_type_access($op, $mediabox, $account = NULL, $entity_type = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  switch ($op) {
    // Only one permission for managing bundles
    case 'create':
    case 'view':
    case 'edit':
    case 'update':
      return user_access('administer mediabox types', $account);
  }

  return FALSE;
}

/**
 * Implements hook_entity_info_alter().
 * 
 * @param $entity_info
 */
function mediabox_entity_info_alter(&$entity_info) {
  $bundles = mediabox_get_bundles();

  if (is_array($bundles)) {
    foreach ($bundles as $bundle) {
      $entity_info['mediabox']['bundles'][$bundle->type] = array(
        'label' => $bundle->title,
        'admin' => array(
          'path' => 'admin/structure/mediabox/manage/%mediabox_type',
          'real path' => 'admin/structure/mediabox/manage/' . $bundle->type,
          'bundle argument' => 4,
          'access arguments' => array('administer mediabox types'),
        ),
      );
    }
  }
}

/**
 * Implements hook_menu().
 */
function mediabox_menu() {
  $items['mediabox/%mediabox/delete'] = array(
    'title callback' => 'mediabox_page_delete_title',
    'title arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediabox_form_delete_confirm', 1),
    'access arguments' => array('manage mediabox files'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/mediabox.forms.inc',
  );

  $items['mediabox/%mediabox/edit'] = array(
    'title callback' => 'mediabox_page_edit_title',
    'title arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediabox_form_media', 1),
    'access arguments' => array('manage mediabox files'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/mediabox.forms.inc',
  );

  $items['admin/config/mediabox'] = array(
    'title' => 'Mediabox',
    'description' => 'Mediabox related settings.',
    'position' => 'left',
    'weight' => -20,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/mediabox/core'] = array(
    'title' => 'Core',
    'description' => 'Mediabox core settings.',
    'access arguments' => array('administer mediabox settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediabox_form_settings'),
    'file' => 'includes/mediabox.forms.inc',
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function mediabox_admin_paths() {
  // Display edit and delete in administration theme.
  return array(
    'mediabox/*/delete' => TRUE,
    'mediabox/*/edit' => TRUE,
  );
}

/**
 * Implements hook_permission().
 * 
 * @return array
 */
function mediabox_permission() {
  return array(
    'access mediabox library' => array(
      'title' => t('Access mediabox library'),
      'description' => t('Allow access to mediabox library view'),
    ),
    'upload mediabox files' => array(
      'title' => t('Upload mediabox files'),
      'description' => t('Allow uploading mediabox files to library'),
    ),
    'manage mediabox files' => array(
      'title' => t('Manage mediabox files'),
      'description' => t('Allow editing and deleting of mediabox entities'),
    ),
    'administer mediabox types' => array(
      'title' => t('Administer mediabox types'),
      'description' => t('Allow access to mediabox types administration'),
    ),
    'administer mediabox settings' => array(
      'title' => t('Administer mediabox settings'),
      'description' => t('Allow access to mediabox settings page'),
    )
  );
}

/**
 * Implements hook_theme().
 */
function mediabox_theme() {
  return array(
    'mediabox_type_detail' => array(
      'variables' => array('label' => NULL, 'name' => NULL, 'description' => NULL),
      'template' => 'theme/mediabox-type-detail',
      'file' => 'includes/mediabox.theme.inc',
    ),
    'mediabox' => array(
      'render element' => 'elements',
      'template' => 'theme/mediabox',
      'file' => 'includes/mediabox.theme.inc',
    ),
    'mediabox_meta' => array(
      'variables' => array('mediabox'),
      'template' => 'theme/mediabox-meta',
      'file' => 'includes/mediabox.theme.inc',
    ),
  );
}

/**
 * Implements hook_field_extra_fields().
 *
 * @return array
 */
function mediabox_field_extra_fields() {
  $extra = array();

  $fields = array(
    'title' => array(
      'label' => t('Title'),
      'description' => t('mediabox entity meta'),
      'weight' => -5,
    ),
    'description' => array(
      'label' => t('Description'),
      'description' => t('mediabox entity meta'),
      'weight' => -4,
    ),
    'alternate_text' => array(
      'label' => t('Alt. text'),
      'description' => t('mediabox entity meta'),
      'weight' => -3,
    ),
    'caption' => array(
      'label' => t('Caption'),
      'description' => t('mediabox entity meta'),
      'weight' => -2,
    ),
    'meta_dimension' => array(
      'label' => t('Dimensions'),
      'description' => t('mediabox entity meta'),
      'weight' => -1,
    ),
  );

  $info = entity_get_info('mediabox');
  foreach($info['bundles'] as $bundle_name => $bundle) {
    $extra['mediabox'][$bundle_name] = array(
      'form' => $fields,
      'display' => array(
        'mediabox_table_field' => array(
          'label' => t('Mediabox meta table'),
          'description' => t('Table with basic meta information fields.'),
          'weight' => 0,
        ),
      ),
    );
  }

  return $extra;
}

/**
 * Implements hook_views_api().
 */
function mediabox_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'mediabox') . '/views',
  );
}

/**
 * Implements hook_views_bulk_operations_form_alter()
 */
function mediabox_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
  if ($vbo->view->name == 'mediabox_library' && $form_state['step'] == 'views_bulk_operations_confirm_form') {
    $form['message'] = array(
      'header' => array(
        '#markup' => '<h3>' . t('Which are attached to this nodes:') . '</h3>',
      ),
       'items' => array(
      '#theme' => 'item_list',
      '#items' => mediabox_list_nodes_by_mediaboxes($form_state['values']['views_bulk_operations']), )
    );
  }
}

/* API */

/**
 * View callback for entity mediabox.
 *
 * @param $mediaboxs
 * @param string $view_mode
 * @param null $langcode
 * @return array
 */
function mediabox_view($mediaboxs, $view_mode = "full", $langcode = NULL) {

  $entity = array_shift($mediaboxs);
  $entity->content = array();

  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }

  $mediaboxs = array($entity->id => $entity);

  field_attach_prepare_view('mediabox', $mediaboxs, $view_mode, $langcode);
  entity_prepare_view('mediabox', $mediaboxs, $langcode);

  $entity->content += field_attach_view('mediabox', $entity, $view_mode, $langcode);
  $entity->content['mediabox_table_field'] = array(
    '#markup' => theme('mediabox_meta', array('mediabox' => $entity))
  );

  $build = $entity->content;
  unset($entity->content);

  $build += array(
    '#theme' => 'mediabox',
    '#mediabox' => $entity,
    '#view_mode' => $view_mode,
    '#language' => $langcode,
  );

  return $build;
}

/**
 * Load media by fid
 *
 * @param $fid
 * @return mediabox
 */
function mediabox_db_get_media_by_fid($fid) {
  return entity_get_controller('mediabox')->loadByFid($fid);
}

/**
 * @param $id
 * @return mediabox
 */
function mediabox_load($id) {

  $id = str_replace('%2B', ' ', $id);
  $id = str_replace('+', ' ', $id);
  $parts = explode(' ', $id);

  if (is_array($parts) && sizeof($parts) > 1) {
    $ids = $parts;
    return mediabox_load_multiple($ids);
  }

  $mediabox = mediabox_load_multiple(array($id));
  return array_shift($mediabox);
}

/**
 * @param $type
 * @return array|mixed
 */
function mediabox_type_load($type) {
  return mediabox_get_bundles($type);
}

/**
 * @param $ids
 * @return mixed
 */
function mediabox_load_multiple($ids) {
  return entity_load('mediabox', $ids);
}

/**
 * @param $media
 * @return bool
 */
function mediabox_delete($media) {
  return entity_delete('mediabox', entity_id('mediabox', $media));
}

/**
 * @param $media
 * @return bool
 */
function mediabox_type_delete($media) {
  return entity_delete('mediabox_type', entity_id('mediabox_type', $media));
}

/**
 * @param array $ids
 * @return bool
 */
function mediabox_delete_multiple(array $ids) {
  return entity_delete_multiple('mediabox', $ids);
}

/**
 * @param array $ids
 * @return bool
 */
function mediabox_type_delete_multiple(array $ids) {
  return entity_delete_multiple('mediabox_type', $ids);
}

/**
 * Save mediabox entity
 *
 * @param mediabox $media
 * @return mixed
 */
function mediabox_save($media) {
  return entity_save('mediabox', $media);
}

/**
 * Save MediaboxType entity
 *
 * @param $media_type
 * @return mixed
 */
function mediabox_type_save($media_type) {
  return entity_save('mediabox_type', $media_type);
}

/**
 * Get all mediabox entities
 *
 * @return array
 */
function mediabox_db_get_all_media() {
  $query = db_select('mediabox', 'x')
    ->fields('x', array('id'));

  return entity_get_controller('mediabox')->load($query->execute()->fetchCol());
}

/**
 * Save file object(plupload_file_uri_to_object) as mediabox entity
 *
 * @param stdClass $file
 * @param string $type bundle type
 * @return FALSE|mediabox
 */
function mediabox_db_save_media_from_file(stdClass $file, $type = NULL) {
  $file = file_save($file);

  $media = entity_create('mediabox',
    array(
      'fid' => $file->fid,
      'title' => $file->filename,
    )
  );

  if ($type != NULL) {
    $media->type = $type;
  }

  $info = array();
  $data = getimagesize(drupal_realpath($file->uri), $info);
  if (isset($info['APP13'])) {
    $iptc = iptcparse($info['APP13']);
  }


  $media->mediabox_image[LANGUAGE_NONE][] = array(
    'fid' => $file->fid,
  );

  if (mediabox_save($media)) {
    return $media;
  }

  return FALSE;
}

/**
 * @param null $type_name
 * @return array|mixed
 */
function mediabox_get_bundles($type_name = NULL) {
  $types = entity_load_multiple_by_name('mediabox_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Get bundle options array of select or
 * only title of bundle if argument $index present
 * @param null $index
 * @return array|string
 */
function mediabox_db_get_bundle_options($index = NULL) {
  $options = db_select('mediabox_type', 't')
    ->fields('t', array('type', 'title'))
    ->execute()->fetchAllKeyed();

  if (!empty($index) && isset($options[$index])) {
    return $options[$index];
  }

  return $options;
}

/**
 * Get keyed version of all bundles
 *
 * @return array
 */
function mediabox_db_get_bundles_keyed() {
  $bundles = mediabox_get_bundles();
  $keyed = array();

  if (is_array($bundles)) {
    foreach ($bundles as $bundle) {
      $keyed[$bundle->type] = $bundle->title;
    }
  }

  return $keyed;
}

/**
 * Title callback
 *
 * @path: mediabox/%mediabox/edit
 * @param MediaboxEntity $mediabox
 * @return string
 */
function mediabox_page_edit_title($mediabox) {
  return t('Edit !title', array('!title' => $mediabox->title));
}

/**
 * Title callback
 *
 * @path: mediabox/%mediabox/delete
 * @param MediaboxEntity $mediabox
 * @return string
 */
function mediabox_page_delete_title($mediabox) {
  return t('Delete !title', array('!title' => $mediabox->title));
}

function mediabox_get_image_styles_options($origin = TRUE) {
  $styles = array();

  // @todo - do we really need origin special image style? Basically if user
  // wants something like this he can create origin image style with 100% width
  // and height.
  // This is little hackish and also can collide with custom 'origin' image
  // style that user can create on it site.
  // Because of all of this we should remove this.
  if ($origin) {
    $styles['origin'] = t('origin');
  }

  foreach (image_styles() as $style => $settings) {
    $styles[$style] = $settings['name'];
  }
  return $styles;
}

/**
 * List nodes with attached mediaboxs.
 *
 * @param array $mediaboxes
 * @return array
 */
function mediabox_list_nodes_by_mediaboxes($mediaboxes) {
  $select = db_select('field_config', 'fc');
  $select->fields('fc', array('field_name'));
  $select->condition('type', 'mediabox', '=');
  $result = $select->execute();
  $nodes = array();

  foreach ($result as $field) {
    $select = db_select('field_data_' . $field->field_name, 'fd');
    $select->fields('fd', array('entity_type', 'bundle', 'entity_id', $field->field_name . '_mid'));
    $select->condition($field->field_name . '_mid', $mediaboxes, 'IN');
    $result_entities = $select->execute();

    foreach ($result_entities as $row) {
      $property = $field->field_name . '_mid';
      $nodes[$row->$property][$row->entity_type][] = $row->entity_id;
    }
  }
  
  return mediabox_prepare_list_nodes($nodes);
}

/* Helpers */

/**
 * Crete array with list items for rendering
 * @param array $nodes
 * return array
 *
 */
function mediabox_prepare_list_nodes($nodes) {
  $list = array();
  foreach ($nodes as $mediabox_id => $nodes) {
    $enity = mediabox_load($mediabox_id);
    $list_item = array();
    $children = array();
    foreach ($nodes as $entity_type => $node_ids) {
      $ids = array_unique($node_ids);
      foreach ($ids as $id) {
        $entity = entity_load($entity_type, array($id));
        $children[]['data'] = $entity[$id]->title;
      }
    }

    $list_item['data'] = $enity->title;
    $list_item['children'] = $children;
        $list[] = $list_item;
  }
  return $list;
}

/**
 * Returns the path for the given library name.
 *
 * @param $name string
 *   Library name.
 */
function _mediabox_library_path($name) {
  return module_exists('libraries') ? libraries_get_path($name) : 'sites/all/libraries/' . $name;
}
