<?php

/*
* This function borrows functionality from the Libraries module to look for
* and find locations where a plugins directory could exist.
*/
function add_plugins_get_plugins() {
  $searchdir = array();
  $profile = drupal_get_path('profile', drupal_get_profile());
  $config = conf_path();

  // Similar to 'modules' and 'themes' directories in the root directory,
  // certain distributions may want to place plugins into a 'plugins'
  // directory in Drupal's root directory.
  $searchdir[] = 'plugins';

  // Similar to 'modules' and 'themes' directories inside an installation
  // profile, installation profiles may want to place plugins into a
  // 'plugins' directory.
  $searchdir[] = "$profile/plugins";

  // Always search sites/all/plugins.
  $searchdir[] = 'sites/all/plugins';

  // Also search sites/<domain>/*.
  $searchdir[] = "$config/plugins";

  // Retrieve list of directories.
  $nomask = array('CVS');
  foreach ($searchdir as $dir) {
    if (is_dir($dir) && $handle = opendir($dir)) {
      while (FALSE !== ($file = readdir($handle))) {
        if (!in_array($file, $nomask) && $file[0] != '.') {
          if (is_dir("$dir/$file")) {
            $directories = "$dir";
          }
        }
      }
      closedir($handle);
    }
  }
  if(!empty($directories)){
    return $directories;
  }
}

/*
* This function returns the relative path from one directory to another.
*
* Reference http://stackoverflow.com/a/2638272/1017096.
*
* This probably did not have to be broken out into it's own function, however
* I've selfishly done so so that I can use this snippet of code more easily
* down the road. If you feel strongly about this, post an issue. :-)
 */
function add_plugins_get_relative_path($from, $to)
{
    // some compatibility fixes for Windows paths
    $from = is_dir($from) ? rtrim($from, '\/') . '/' : $from;
    $to   = is_dir($to)   ? rtrim($to, '\/') . '/'   : $to;
    $from = str_replace('\\', '/', $from);
    $to   = str_replace('\\', '/', $to);

    $from     = explode('/', $from);
    $to       = explode('/', $to);
    $relPath  = $to;

    foreach($from as $depth => $dir) {
        // find first non-matching dir
        if($dir === $to[$depth]) {
            // ignore this directory
            array_shift($relPath);
        } else {
            // get number of remaining dirs to $from
            $remaining = count($from) - $depth;
            if($remaining > 1) {
                // add traversals up to first matching dir
                $padLength = (count($relPath) + $remaining - 1) * -1;
                $relPath = array_pad($relPath, $padLength, '..');
                break;
            } else {
                $relPath[0] = './' . $relPath[0];
            }
        }
    }
    return implode('/', $relPath);
}

/*
* Implements hook_ctools_plugin_directory -
* This lets ctools know to scan my module for a content_type plugin file
* Detailed docks in ctools/ctools.api.php
*/
function add_plugins_ctools_plugin_directory($owner, $plugin_type) {
  // Return the path of the module.
  $module = drupal_get_path('module','add_plugins');

  // Return the path of the plugins directory;
  $plugins = add_plugins_get_plugins();

  // Provide a relative path to all plugins from the module.
  $path = add_plugins_get_relative_path($module, $plugins) . '/' . $plugin_type;

  return $path;
}