<?php
/**
 * @file
 * Page guide configuration.
 */

/**
 * Implements hook_permission().
 */
function page_guide_permission() {
  return array(
    'administer page guide' => array(
      'title' => t('Administer Page guide'),
      'description' => t('Perform administration tasks for page guide.'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function page_guide_help($path, $arg) {
  switch ($path) {
    case 'admin/help#page_guide':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('pageguide.js is an interactive visual guide to elements on web pages. Instead of cluttering your interface with static help message, or explanatory text,add a pageguide and let your users learn about new features and functions.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function page_guide_menu() {
  $items = array();
  $items['admin/config/user-interface/page-guide'] = array(
    'title' => 'Page Guide',
    'description' => 'Configure page guide',
    'page callback' => 'page_guide_list',
    'access arguments' => array('administer page guide'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/user-interface/page-guide/create'] = array(
    'title' => 'Add page guide',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('page_guide_create'),
    'access arguments' => array('administer page guide'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'page_guide.admin.inc',
  );
  $items['admin/config/user-interface/page-guide/%/edit'] = array(
    'title' => 'Edit page guide',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('page_guide_create', 4),
    'access arguments' => array('administer page guide'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'page_guide.admin.inc',
  );
  $items['admin/config/user-interface/page-guide/%/delete'] = array(
    'title' => 'Edit page guide',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('page_guide_delete', 4),
    'access arguments' => array('administer page guide'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/user-interface/%/page-guide-step'] = array(
    'title' => 'Page Guide Step',
    'description' => 'Configure page guide Step',
    'page callback' => 'page_guide_step_list',
    'page arguments' => array(3),
    'access arguments' => array('administer page guide'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/user-interface/%/page-guide-step/create'] = array(
    'title' => 'Add page guide step',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('page_guide_step_create', 3),
    'access arguments' => array('administer page guide'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'page_guide.admin.inc',
  );
  $items['admin/config/user-interface/%/page-guide-step/%/edit'] = array(
    'title' => 'Edit page guide',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('page_guide_step_create', 3, 5),
    'access arguments' => array('administer page guide'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'page_guide.admin.inc',
  );
  $items['admin/config/user-interface/page-guide-step/%/delete'] = array(
    'title' => 'Edit page guide',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('page_guide_step_delete', 4),
    'access arguments' => array('administer page guide'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Perform retrive the page guide list.
 *
 * Page callback for admin/config/user-interface/page-guide.
 *
 * @return array
 *   Renderable array $data.
 */
function page_guide_list() {
  $lists = page_guide_get_list();
  $header = array(
    'name' => t('Name'),
    'op' => t('Operation'),
  );
  $rows = array();
  foreach ($lists as $list) {
    $rows[] = array(
      'data' => array(
        'name' => check_plain($list->name),
        'op' => l(t('create'),
        'admin/config/user-interface/' . $list->pg_id . '/page-guide-step') .
        ' | ' . l(t('edit'), 'admin/config/user-interface/page-guide/' .
        $list->pg_id . '/edit') . ' | ' . l(t('delete'),
        'admin/config/user-interface/page-guide/' . $list->pg_id . '/delete'),
      ),
    );
  }
  if (empty($rows)) {
    $header = array();
  }
  $data['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('Currently we have no contents in page guides steps'),
  );
  $data['pager'] = array(
    '#markup' => theme('pager'),
  );
  return $data;
}

/**
 * Perform retrive the page guide step list.
 *
 * Page callback admin/config/user-interface/%/page-guide-step.
 *
 * @return array
 *   Renderable array $data.
 */
function page_guide_step_list($pg_id) {
  $lists = page_guide_step_get_list($pg_id);
  $header = array(
    'class' => t('Selectors'),
    'weight' => t('Weight'),
    'op' => t('Operation'),
  );
  $rows = array();
  foreach ($lists as $list) {
    $rows[] = array(
      'data' => array(
        'class' => check_plain($list->class_name),
        'weight' => $list->weight,
        'op' => l(t('edit'), 'admin/config/user-interface/' . $list->pg_id .
        '/page-guide-step/' . $list->id . '/edit') .
        ' | ' . l(t('delete'), 'admin/config/user-interface/page-guide-step/'
        . $list->id . '/delete'),
      ),
    );
  }
  if (empty($rows)) {
    $header = array();
  }
  $data['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('Currently we have no contents in page guides steps'),
  );
  $data['pager'] = array(
    '#markup' => theme('pager'),
  );
  return $data;
}

/**
 * API for get page guide list.
 *
 * @return object
 *   Page guide list object.
 */
function page_guide_get_list() {
  $list = db_select('page_guide', 'pg')
    ->fields('pg')
    ->extend('PagerDefault')->limit(20)
    ->execute();
  return $list;
}

/**
 * API for check the page guide url exist or not.
 *
 * @param string $url
 *   Page guide's url to check.
 */
function page_guide_url_exist($url) {
  $list = db_query('SELECT pg_id FROM {page_guide} WHERE url = :url', array(':url' => $url))->fetchAssoc();
  if (empty($list)) {
    return FALSE;
  }
  return TRUE;
}

/**
 * API for get page list by id.
 *
 * @param int $id
 *   Page guide id.
 *
 * @return object
 *   Page guide list object.
 */
function page_guide_get_by_id($id) {
  $list = db_query('SELECT * FROM {page_guide} WHERE pg_id = :id', array(':id' => $id))->fetchAssoc();
  return $list;
}

/**
 * API for get page guide step list.
 *
 * @param int $pg_id
 *   Page guide id.
 *
 * @return object
 *   Page guide step object.
 */
function page_guide_step_get_list($pg_id) {
  $list = db_select('page_guide_step', 'pgs')
    ->fields('pgs')
    ->condition('pgs.pg_id', $pg_id, '=')
    ->orderBy('pgs.weight', 'ASC')
    ->extend('PagerDefault')->limit(20)
    ->execute();
  return $list;
}

/**
 * API for get page list by id.
 *
 * @param int $id
 *   Page guide step id.
 *
 * @return object
 *   Page guide step object.
 */
function page_guide_step_get_by_id($id) {
  $list = db_query('SELECT * FROM {page_guide_step} WHERE id = :id', array(':id' => $id))->fetchObject();
  return $list;
}

/**
 * API for remove page guide step.
 */
function page_guide_step_delete($form, &$form_state, $id) {
  $form['guide_step'] = array(
    '#type' => 'value',
    '#value' => $id,
  );
  $page_guide = page_guide_step_get_by_id($id);
  $_GET['destination'] = 'admin/config/user-interface/' . $page_guide->pg_id . '/page-guide-step';
  return confirm_form($form, t('Are you sure you want to delete this step?'), 'admin/config/user-interface/' . $page_guide->pg_id . '/page-guide-step', t('This action cannot be undone.'), ('Delete'), ('Cancel'));
}

/**
 * Page guide step delete submit handler.
 */
function page_guide_step_delete_submit($form, &$form_state) {
  $id = $form_state['values']['guide_step'];
  db_delete('page_guide_step')
    ->condition('id', $id, '=')
    ->execute();
  drupal_set_message(t('Record has been removed'));
}

/**
 * Page guide delete submit handler.
 */
function page_guide_delete($form, &$form_state, $id) {
  $form['guide'] = array(
    '#type' => 'value',
    '#value' => $id,
  );
  $_GET['destination'] = 'admin/config/user-interface/page-guide';
  return confirm_form($form, t('Are you sure you want to delete this page guide step ?'), 'admin/config/user-interface/page-guide', t('This action cannot be undone.'), ('Delete'), ('Cancel'));
}

/**
 * API for remove page guide.
 */
function page_guide_delete_submit($form, &$form_state) {
  $pg_id = $form_state['values']['guide'];
  db_delete('page_guide')
    ->condition('pg_id', $pg_id, '=')
    ->execute();
  db_delete('page_guide_step')
    ->condition('pg_id', $pg_id, '=')
    ->execute();
  drupal_set_message(t('Record has been removed'));
}

/**
 * Implements hook_page_alter().
 */
function page_guide_page_alter(&$page) {
  $page['content']['system_main']['#attached']['js'][] = libraries_get_path('pageguide') . '/pageguide.js';
  $page_guides = page_guide_get_list();
  if (!empty($page_guides)) {
    foreach ($page_guides as $page_guide) {
      if (drupal_match_path(current_path(), $page_guide->url)) {
        $page['content']['system_main']['#attached']['css'][] = libraries_get_path('pageguide') . '/pageguide.min.css';
        $page['content']['system_main']['#attached']['js'][] = libraries_get_path('pageguide') . '/pageguide.js';
        $page['content']['system_main']['#attached']['js'][] = drupal_get_path('module', 'page_guide') . '/page_guide_init.js';
        $steps = page_guide_step_get_list($page_guide->pg_id);
        $page['content']['system_main']['page_guide'] = array(
          '#markup' => page_guide_generate_steps_html($steps),
        );
      }
    }
  }
}

/**
 * Custom function to generate page guide step.
 *
 * @params object $steps
 *   Page guide step returned from page_guide_step_list().
 *
 * @return string
 *   return html page guide step list.
 */
function page_guide_generate_steps_html($steps) {
  $content = "<ul id='tlyPageGuide' data-tourtitle='Online help guide'>";
  foreach ($steps as $step) {
    $content .= "<li" . drupal_attributes(array('class' => array('tlypageguide_left'), 'data-tourtarget' => $step->class_name)) . "><div>" . check_plain($step->content) . "</div></li>";
  }
  $content .= "</ul>";
  return $content;
}
