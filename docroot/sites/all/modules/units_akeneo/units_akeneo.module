<?php

/**
 * @file
 * Akeneo metric units module.
 */

require_once 'units_akeneo.class.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function units_akeneo_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'units') {
    return "plugins/$plugin_type";
  }
}

/**
 * Load all families.
 *
 * @param bool $reload
 *   Reload.
 *
 * @return array
 *   Config.
 */
function units_akeneo_family_load_all($reload = FALSE) {
  $measures_config = & drupal_static(__FUNCTION__, array());

  if (empty($measures_config) || $reload) {
    $cid = 'units:akeneo:measures_config';

    if (($cache = cache_get($cid)) && !$reload) {
      $measures_config = $cache->data;

      return $measures_config;
    }

    $json = file_get_contents(drupal_get_path('module', 'units_akeneo') . '/resources/measures.json');
    $data = json_decode($json, TRUE);
    $data = _units_akeneo_array_lower_keys($data);

    $measures_config = $data['measures_config'];

    // Using cache avoid to read file on each call.
    if (!empty($measures_config) && is_array($measures_config)) {
      cache_set($cid, $measures_config);
    }
  }

  return $measures_config;
}

/**
 * Change keys to lower case.
 *
 * @param array $input
 *   Array to lower keys.
 *
 * @return array
 *   Array with lowered keys.
 */
function _units_akeneo_array_lower_keys($input) {
  if (!is_array($input)) {
    return $input;
  }

  $output = array();

  foreach ($input as $key => $value) {
    $output[drupal_strtolower($key)] = _units_akeneo_array_lower_keys($value);
  }

  return $output;
}

/**
 * Implements hook_default_units_measure().
 */
function units_akeneo_default_units_measure() {

  $items    = array();
  $families = units_akeneo_family_load_all(TRUE);

  foreach ($families as $label => $family) {
    $entity = array(
      'measure'          => $label,
      'label'            => drupal_ucfirst($label),
      'description'      => '',
      'converter'        => 'akeneo',
      'rdf_mapping'      => array(),
    );

    $items[$entity['measure']] = entity_import(
      'units_measure',
      json_encode($entity)
    );
  }

  return $items;
}

/**
 * Implements hook_default_units_unit().
 */
function units_akeneo_default_units_unit() {

  $items    = array();
  $families = units_akeneo_family_load_all(TRUE);

  foreach ($families as $measure => $family) {
    foreach ($family['units'] as $machine_name => $unit) {
      $label = drupal_ucfirst(str_replace('_', ' ', $machine_name));

      $entity = array(
        'measure'      => $measure,
        'machine_name' => $machine_name,
        'label'        => drupal_ucfirst($label),
        'symbol'       => $unit['symbol'],
        'description'  => '',
        'factor'       => '0',
        'rdf_mapping'  => array(),
      );

      $items[$entity['machine_name']] = entity_import(
        'units_unit',
        json_encode($entity)
      );
    }
  }

  return $items;
}
