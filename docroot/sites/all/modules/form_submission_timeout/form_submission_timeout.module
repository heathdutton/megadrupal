<?php
/**
 * @file
 * Implement a basic setup of timeout sesisons.
 */

//TODO:remove timer when countdown is up
//TODO:fix js effect that appears for only one form when there are several forms on the page
//TODO:go through code and text

/**
 * Implements hook_menu().
 */
function form_submission_timeout_menu() {
  $items['admin/config/development/form_submission_timeout'] = array(
    'title' => 'Form Submission timeout',
    'description' => 'Timeout a form submit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_submission_timeout_configuration'),
    'access arguments' => array('access administration menu'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/form_submission_timeout.admin.inc',
  );
  $items['admin/config/development/form_submission_timeout/countdown'] = array(
    'title' => 'Countdown',
    'description' => 'Timeout a form submit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_submission_timeout_countdown_configuration'),
    'access arguments' => array('access administration menu'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/form_submission_timeout_countdown.admin.inc',
  );
  $items['admin/config/development/form_submission_timeout/timed'] = array(
    'title' => 'Timed',
    'description' => 'Timeout a form submit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_submission_timeout_timed_configuration'),
    'access arguments' => array('access administration menu'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/form_submission_timeout_timed.admin.inc',
  );
  $items['admin/config/development/form_submission_timeout/remove/%/%/%'] = array(
    'page callback' => 'form_submission_timeout_remove_formid',
    'page arguments' => array(5, 6, 7),
    'access arguments' => array('access administration menu'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/form_submission_timeout.admin.inc',
  );
  $items['form_submission_timeout/reset'] = array(
    'page callback' => 'form_submission_timeout_reset_timer',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/form_submission_timeout.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function form_submission_timeout_theme() {
  return array(
    'form_submission_timeout_config_form' => array(
      'render element' => 'form',
      'file' => 'includes/form_submission_timeout.theme.inc',
    ),
    'form_submission_timeout_timed_config_form' => array(
      'render element' => 'form',
      'file' => 'includes/form_submission_timeout.theme.inc',
    )
  );
}

/**
 * Implements hook_form_alter().
 */
function form_submission_timeout_form_alter(&$form, $form_state, $form_id) {
  $form_ids = variable_get('sub_out_form_ids', array());
  $timed_form_ids = variable_get('sub_out_stop_form_ids', array());

  // Initialize session counter and add custom submit handler.
  if (array_key_exists($form_id, $form_ids)) {
    global $base_url;

    // Add countdown js, settings, and prevent preventDefault() function hack.
    $form['#attached']['js'] = array(
      drupal_get_path('module', 'form_submission_timeout') . '/js/fst_countdown_timer.js' => array(
        'type' => 'file',
      ),
    );
    $form['#attached']['js'][] = array(
      'data' => array(
        'form_submission_timeout' => array(
          'dom_form_id' => $form['#id'],
          'form_id' => $form_id,
          'time' => $form_ids[$form_id]['sub_out_timeout_period'],
          'show_timer' => $form_ids[$form_id]['sub_out_show_timer'],
          'message' => check_plain($form_ids[$form_id]['sub_out_timeout_message']),
          'url' => $base_url . '/form_submission_timeout/reset',
        )
      ),
      'type' => 'setting',
    );
    drupal_add_js('Object.defineProperty(Event.prototype, "preventDefault", {writable: false});', 'inline');

    // Reset any form ids in $_SESSION.
    if (isset($_SESSION['form_submission_timeout_form_ids'][$form_id . '_session_start']['status'])) {
      if ($_SESSION['form_submission_timeout_form_ids'][$form_id . '_session_start']['status'] == 'reset') {
        unset($_SESSION['form_submission_timeout_form_ids'][$form_id . '_session_start']);
      }
    }

    if (!isset($_SESSION['form_submission_timeout_form_ids'][$form_id . '_session_start'])) {
      $_SESSION['form_submission_timeout_form_ids'][$form_id . '_session_start'] = array(
        'session_time' => time(),
        'status' => 'set'
      );
    }

    // Custom form validation.
    array_unshift($form['#validate'], 'form_submission_timeout_form_validate');
  }

  // Timed section starts.
  if (array_key_exists($form_id, $timed_form_ids)) {
    $current = strtotime(date('Y-m-d H:i:s'));
    $day = date('D', time());
    $date = _convert_date_to_timestamps($form_id);
    if (($current > $date['start']) && ($current < $date['end']) &&
       ($date['frequency'] == 'once' || $date['frequency'] == 'everyday')) {
      $remaining_time = $date['end'] - $current;

      $time_ar = _cal_remaining_time($remaining_time);
      $time_string = $time_ar['days'] . 'd ' . $time_ar['hours'] . 'h ' .
       $time_ar['minutes'] . 'm ' . $time_ar['seconds'] . 's';

      $message = 'Remaining time left: ' . $time_string . ', This form will expire on ' .
         date('D, M jS Y H:i', $date['end']);
      $class = 'warning';
    }
    elseif (($current > $date['start']) && ($current < $date['end']) &&
       ($date['frequency'] == 'weekdays') && ($day != 'Sun' || $day != 'Sat')) {
      $remaining_time = $date['end'] - $current;

      $time_ar = _cal_remaining_time($remaining_time);
      $time_string = $time_ar['days'] . 'd ' . $time_ar['hours'] . 'h ' .
       $time_ar['minutes'] . 'm ' . $time_ar['seconds'] . 's';

      $message = 'Remaining time left: ' . $time_string . ', This form will expire on ' .
         date('D, M jS Y H:i', $date['end']);
      $class = 'warning';
    }
    elseif (($current > $date['start']) && ($current < $date['end']) &&
       ($date['frequency'] == 'weekends') && ($day == 'Sun' || $day == 'Sat')) {
      $remaining_time = $date['end'] - $current;

      $time_ar = _cal_remaining_time($remaining_time);
      $time_string = $time_ar['days'] . 'd ' . $time_ar['hours'] . 'h ' .
       $time_ar['minutes'] . 'm ' . $time_ar['seconds'] . 's';

      $message = 'Remaining time left: ' . $time_string . ', This form will expire on ' .
         date('D, M jS Y H:i', $date['end']);
      $class = 'warning';
    }
    else {
      $class = 'error';
      $message = check_plain($timed_form_ids[$form_id]['sub_out_stop_timeout_message']);
    }

    $form['remaining_time'] = array(
      '#markup' => '<div class="messages ' . $class . '">' . $message . '</div>',
      '#weight' => -100
    );
    array_unshift($form['#validate'], 'form_submission_timeout_form_validate');
  }
}

/**
 * Validation handler for the forms.
 */
function form_submission_timeout_form_validate($form, $form_state) {
  $form_ids = variable_get('sub_out_form_ids', array());
  $timed_form_ids = variable_get('sub_out_stop_form_ids', array());
  $form_id = $form['#form_id'];

  // Check if session has countdown timed out.
  if (array_key_exists($form_id, $form_ids)) {
    $session_remaining = round(time() - $_SESSION['form_submission_timeout_form_ids'][$form_id . '_session_start']['session_time'], 2);
    if (($session_remaining > $form_ids[$form_id]['sub_out_timeout_period'])) {

      // Show an overlay on form.
      $form['#attributes'] = array(
        'class' => array('fst-input-disabled'),
      );

      // Remove submit actions, being safe.
      unset($form['actions']);
      form_set_error('', check_plain($form_ids[$form_id]['sub_out_timeout_message']));
    }
    $_SESSION['form_submission_timeout_form_ids'][$form_id . '_session_start']['status'] = 'reset';
  }

  // Timed section starts.
  if (array_key_exists($form_id, $timed_form_ids)) {

    // Convert date to timestamp.
    $current = strtotime(date('Y-m-d H:i:s'));
    $date = _convert_date_to_timestamps($form_id);
    $day = date('D', time());
  
    if (($current > $date['start']) && ($current < $date['end']) &&
       ($date['frequency'] == 'once' || $date['frequency'] == 'everyday')) {
      unset($_SESSION['submission_timed_timeout_form_ids'][$form_id . '_session_end']);
      $_SESSION['submission_timed_timeout_form_ids'][$form_id . '_session_start'] = time();
    }
    elseif (($current > $date['start']) && ($current < $date['end']) &&
       ($date['frequency'] == 'weekdays') && ($day != 'Sun' || $day != 'Sat')) {
      unset($_SESSION['submission_timed_timeout_form_ids'][$form_id . '_session_end']);
      $_SESSION['submission_timed_timeout_form_ids'][$form_id . '_session_start'] = time();
    }
    elseif (($current > $date['start']) && ($current < $date['end']) &&
       ($date['frequency'] == 'weekends') && ($day == 'Sun' || $day == 'Sat')) {
      unset($_SESSION['submission_timed_timeout_form_ids'][$form_id . '_session_end']);
      $_SESSION['submission_timed_timeout_form_ids'][$form_id . '_session_start'] = time();
    }
    else {
      unset($_SESSION['submission_timed_timeout_form_ids'][$form_id . '_session_start']);
      $_SESSION['submission_timed_timeout_form_ids'][$form_id . '_session_end'] = time();  
      form_set_error('', check_plain($timed_form_ids[$form_id]['sub_out_stop_timeout_message'])); 
    }
  
    if (!isset($_SESSION['submission_timed_timeout_form_ids'][$form_id . '_session_start']) && 
      isset($_SESSION['submission_timed_timeout_form_ids'][$form_id . '_session_end'])) {
      form_set_error('', check_plain($timed_form_ids[$form_id]['sub_out_stop_timeout_message']));
    }
  }
}

/**
 * @param $name
 * Name of the variable to update (array name)
 *
 * @param $value
 * Variable values to be updated (array to merge)
 *
 * @param $process
 * Add or remove items from the variable (array)
 */
function _form_submission_timeout_update_form_ids($name, $value, $process = 'add') {
  $form_ids = variable_get($name, array());
  switch ($process) {
    case 'add':
      $form_ids = array_merge($form_ids, $value);
      break;
    case 'update':
      $form_ids = $value;
      break;
    case 'remove':
      unset($form_ids[$value]);
      break;
  }

  // Update new values into the variable.
  variable_set($name, $form_ids);
}

/**
 * Function to convert start and end date to timestamps.
 *
 * @param $form_id
 * Current form id (string)
 */
function _convert_date_to_timestamps($form_id) {
  $date_ar = array();
  $timed_form_ids = variable_get('sub_out_stop_form_ids', array());

  if ($timed_form_ids && array_key_exists($form_id, $timed_form_ids)) {
    $frequency = $timed_form_ids[$form_id]['sub_out_timeout_frequency'];
    $start_timed = $timed_form_ids[$form_id]['sub_out_start_date'];
    $end_timed = $timed_form_ids[$form_id]['sub_out_stop_date'];

    // Convert start and end date into date format Y-m-d H:i:s.
    if ($frequency == 'once') {
      $startdate = $start_timed['year'] . '-' . $start_timed['month'] . '-' . $start_timed['day'] . ' ' .
       $timed_form_ids[$form_id]['sub_out_start_timeout_period'] . ':00';
      $enddate = $start_timed['year'] . '-' . $start_timed['month'] . '-' . $start_timed['day'] . ' ' .
       $timed_form_ids[$form_id]['sub_out_stop_timeout_period'] . ':00';

      $date_ar['start'] = strtotime($startdate);
      $date_ar['end'] = strtotime($enddate);
    }
    else {
      $startdate = $start_timed['year'] . '-' . $start_timed['month'] . '-' . $start_timed['day'] . ' ' .
       $timed_form_ids[$form_id]['sub_out_start_timeout_period'] . ':00';
      $enddate = $end_timed['year'] . '-' . $end_timed['month'] . '-' . $end_timed['day'] . ' ' .
       $timed_form_ids[$form_id]['sub_out_stop_timeout_period'] . ':00';

      $date_ar['start'] = strtotime($startdate);
      $date_ar['end'] = strtotime($enddate);
    }

    $date_ar['frequency'] = $frequency;
    return $date_ar;
  }
}

/**
 * Convert to seconds per day :
 * 60 sec/min * 60 min/hr * 24 hr/day = 86400 sec/day.
 *
 * @param $remaining_time
 * Calculated remaining time
 */
function _cal_remaining_time($remaining_time) {
  $temp = $remaining_time / 86400;
  $time = array();

  // Days.
  $time['days'] = floor($temp);
  $temp = 24 * ($temp - $time['days']);

  // Hours.
  $time['hours'] = floor($temp);
  $temp = 60 * ($temp - $time['hours']);

  // Minutes.
  $time['minutes'] = floor($temp);
  $temp = 60 * ($temp - $time['minutes']);

  // Seconds.
  $time['seconds'] = floor($temp);
  return $time;
}
