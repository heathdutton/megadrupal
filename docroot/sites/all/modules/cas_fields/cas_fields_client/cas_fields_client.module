<?php

/**
 * @file
 * Documentation for CAS Fields Client API.
 */

/**
 * Return additional CAS attributes when acting as a CAS server.
 *
 * This hook allows modules to add additional CAS attributes to the basic
 * response by the CAS Server module.
 *
 * @param $account
 *   The user being logged in.
 * @param $service
 *   The service URL of the site the user is logging in to.
 * @param $ticket
 *   The login ticket the user provided.
 *
 * @return
 *   An associative array of CAS attributes for the user.
 */

/**
 * Implements hook_menu().
 */
function cas_fields_client_menu() {
  $items = array();

  $items['admin/config/people/cas/cas_client'] = array(
    'title' => 'CAS Client Config',
    'description' => 'Configuration for CAS Client module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cas_fields_client_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Building the cas client configuration form.
 */
function cas_fields_client_config_form($form, &$form_state) {

  foreach (field_info_instances('user', 'user') as $field_name => $instance) {
    $fields[$field_name] = $instance['label'];
  }

  $form['cas_fields_client_config_form']['checkboxes'] = array(
    '#type' => 'checkboxes',
    '#title' => t('User fields to be automatically updated from the server'),
    '#options' => $fields,
    '#default_value' => variable_get('fields_that_need_updating_from_cas_server', array()),
    '#description' => t('The user fields checked above will be automatically synced with data from the server upon user login.'),
    '#required' => FALSE,
  );


  $form['#submit'][] = 'cas_fields_client_config_form_submit';

  return system_settings_form($form);
}

/**
 * Config form submit function.
 */
function cas_fields_client_config_form_submit($form, &$form_state) {
  variable_set('fields_that_need_updating_from_cas_server', $form_state['values']['checkboxes']);
}


/**
 * Function used for updating the user when logging in via CAS
 */
function cas_fields_client_user_login(&$edit, $account) {

  $save_user = FALSE;
  $fields_to_be_updated = variable_get('fields_that_need_updating_from_cas_server', array());
  $cas_vars = _toArray(json_decode($account->cas_user['attributes']['user_fields']));
  $account = _toArray($account);

  // Update fields which have been marked for update.
  foreach ($cas_vars as $cas_key => $cas_value) {
    if (substr($cas_key, 0, 6) == 'field_') {
      foreach ($fields_to_be_updated as $field => $value) {
        if (_trim_variable($value) == _trim_variable($cas_key)) {
          if ((isset($cas_value[LANGUAGE_NONE]['0']['value'])) && ((!isset($account["$value"][LANGUAGE_NONE]['0']['value'])) || !($cas_value[LANGUAGE_NONE]['0']['value'] === $account["$value"][LANGUAGE_NONE]['0']['value']))) {
            $account["$field"] = $cas_value;
            $save_user = TRUE;
          }
        }
      }
    }
  }

  // Update user email.
  if ($account['cas_user']['attributes']['mail'] != $account['mail']) {
    $account['mail'] = $account['cas_user']['attributes']['mail'];
    $save_user = TRUE;
  }

  _cas_fields_client_update_user_avatar($account, $cas_vars, $edit, $save_user);

  _cas_fields_client_update_user_roles($account, $edit, $save_user);

  if ($save_user) {
    $account = (object) $account;
    user_save($account, $edit);
  }
}


/**
 * Function used to update the user avatar.
 */
function _cas_fields_client_update_user_avatar($account, $cas_vars, &$edit, &$save_user) {

  $current_user_picture = file_load($account['picture']);
  $current_user_picture = _toArray($current_user_picture);

  if (!(empty($cas_vars['picture']))) {

    if ($cas_vars['picture']['filesize'] !== $current_user_picture['filesize']) {

      $image_contents = file_get_contents($account['cas_user']['attributes']['picture']);

      $image_name = $cas_vars['picture']['filename'];
      $image = file_save_data($image_contents, 'public://pictures/' . $image_name, FILE_EXISTS_RENAME);

      $edit['picture'] = $image;
      $save_user = TRUE;
    }
  }
}

/**
 * Function used to update the user role(s).
 */
function _cas_fields_client_update_user_roles($user, &$edit, &$save_user) {

  $tmp = array();

  $cas_drupal_roles = $user['cas_user']['attributes']['drupal_roles'];
  $cas_drupal_roles = !is_array($cas_drupal_roles) ? array($cas_drupal_roles) : $cas_drupal_roles;

  $roles_to_be_removed = array_diff($user['roles'], $cas_drupal_roles);
  $roles_to_be_added = array_diff($cas_drupal_roles, $user['roles']);

  if (!(empty($roles_to_be_added))) {
    _cas_fields_client_add_user_roles($user['uid'], $roles_to_be_added, $edit, $save_user);
  }


  if (!(empty($roles_to_be_removed))) {
    foreach ($roles_to_be_removed as $role) {
      _cas_fields_client_remove_user_role($user['uid'], $role);
    }
  }
}

/**
 * Helper function used to add roles to the user.
 */
function _cas_fields_client_add_user_roles($user, $role_names, &$edit, &$save_user) {

  $changed = FALSE;

  // For convenience, we'll allow user ids as well as full user objects.
  if (is_numeric($user)) {
    $user = user_load($user);
  }

  // If the user doesn't already have the role, add the role to that user.
  foreach ($role_names as $role_name) {
    $key = array_search($role_name, $user->roles);

    if ($key == FALSE) {
      // Get the rid from the roles table.
      $roles = user_roles(TRUE);
      $rid = array_search($role_name, $roles);
      if ($rid != FALSE) {
        $new_role[$rid] = $role_name;
        // Add new role to existing roles.
        $all_roles = $user->roles + $new_role;
        $changed = TRUE;
      }
    }
  }

  if ($changed) {
    $edit['roles'] = $all_roles;
    $save_user = TRUE;
  }
}

/**
 * Function used to remove roles from the user.
 */
function _cas_fields_client_remove_user_role($user, $role_name) {
  // For convenience, we'll allow user ids as well as full user objects.
  if (is_numeric($user)) {
    $user = user_load($user);
  }
  // Only remove the role if the user already has it.
  $key = array_search($role_name, $user->roles);
  if ($key == TRUE) {
    // Get the rid from the roles table.
    $roles = user_roles(TRUE);
    $rid = array_search($role_name, $roles);
    if ($rid != FALSE) {
      // Make a copy of the roles array, without the deleted one.
      $new_roles = array();
      foreach ($user->roles as $id => $name) {
        if ($id != $rid) {
          $new_roles[$id] = $name;
        }
      }
      user_save($user, array('roles' => $new_roles));
    }
  }
}

/**
 * Disabling editing of the user fields that are updated automatically
 * upon login.
 */
function cas_fields_client_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($form_id == 'user_profile_form' && !(in_array("administrator", $user->roles))) {

    $fields_to_be_disabled = variable_get('fields_that_need_updating_from_cas_server', array());

    // Disable server-client shared fields.
    foreach ($fields_to_be_disabled as $field => $value) {
      foreach ($form['#user'] as $form_field => $form_field_value) {
        if ($value === $form_field) {
          $form["$form_field"][LANGUAGE_NONE]['0']['value']['#attributes']['disabled'] = TRUE;
        }
      }
    }

    // Some other fields are disabled by "default".
    $form['picture']['#attributes']['disabled'] = TRUE;
    $form['account']['mail']['#attributes']['disabled'] = FALSE;
    $form['account']['mail']['#description'] = "This field has been disabled. More descriptive message to go here";

    // And some others are just hidden.
    $form['account']['current_pass']['#access'] = FALSE;
    $form['account']['pass']['#access'] = FALSE;
    $form['timezone']['#access'] = FALSE;
  }
}

/**
 * Trim excess text from any variable. "_" is used as a separator.
 * Used in extracting the actual field name without "field_<prefix_if_any>_".
 */
function _cas_fields_client_trim_variable($variable) {
  return substr(strrchr($variable, '_'), 1);
}

/**
 * Function that turns an object in an array.
 * Used in turning the user object in an array for easier data manipulation.
 */
function _cas_fields_client_toArray($data) {
  if (is_object($data)) {
    $data = get_object_vars($data);
  }
  return is_array($data) ? array_map(__FUNCTION__, $data) : $data;
}
