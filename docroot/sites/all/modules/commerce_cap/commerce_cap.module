<?php

/**
 * @file
 * commerce_cap.module
 *
 * Provides an AJAX powered checkout process and checkout block.
 */

/**
 * Implements hook_menu().
 */
function commerce_cap_menu() {
  $items['admin/commerce/config/checkout/block'] = array(
    'title' => 'Checkout block form',
    'description' => 'Customize the checkout form and configure checkout rules.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_checkout_builder_form', 4),
    'access arguments' => array('administer checkout'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'file path' => drupal_get_path('module', 'commerce_checkout'),
    'file' => '/includes/commerce_checkout.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function commerce_cap_block_info() {
  $blocks['cap'] = array(
    'info' => t('Commerce Checkout (CAP)'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function commerce_cap_block_view($delta = '') {
  switch ($delta) {
    case 'cap':
      $block['subject'] = t('Commerce Checkout (CAP)');
      $block['content'] = _commerce_cap_checkout_block_content();
    break;
  }

  return $block;
}

/**
 * Block content function.
 */
function _commerce_cap_checkout_block_content() {
  global $user;

  $form_state = array();
  $form = array(
    '#prefix' => '<div class="cart-empty-page">',
    '#markup' => t('Your shopping cart is empty.'),
    '#suffix' => '</div>'
  );

  // Attempt to load an order id.
  $order_id = commerce_cart_order_id($user->uid);

  if ($order_id) {
    $order = commerce_order_load($order_id);
    $page = commerce_cap_checkout_page();

    $form_id = 'commerce_checkout_form_' . $page['page_id'];
    $form_state['block'] = TRUE;
    $form_state['build_info']['args'] = array($order, $page);

    form_load_include($form_state, 'inc', 'commerce_checkout', 'includes/commerce_checkout.pages');
    $form = drupal_build_form($form_id, $form_state);
  }

  return array(
    '#markup' => drupal_render($form),
  );
}

/**
 * Implements hook_form_alter().
 */
function commerce_cap_form_commerce_checkout_form_alter(&$form, $form_state) {
  if (variable_get('commerce_cap_enable_checkout_ajax', 1) || isset($form_state['block'])) {
    $order = $form_state['order'];
    $page = $form_state['checkout_page'];

    // AJAX wrapper.
    $wrapper_id = drupal_html_id('checkout-ajax-wrapper');
    $form['#prefix'] = '<div id="' . $wrapper_id . '">';
    $form['#suffix'] = '</div>';

    // Force a lower weight.
    $form['buttons']['#weight'] = 11;

    // Apply AJAX callback & submit for back button.
    $form['buttons']['back']['#submit'] = array('commerce_cap_commerce_checkout_form_back_submit');
    $form['buttons']['back']['#ajax'] = array(
      'callback' => 'commerce_cap_commerce_checkout_form_callback',
      'wrapper' => $wrapper_id,
    );

    // Apply AJAX callback, submit & validation handlers.
    $form['buttons']['continue']['#validate'] = array('commerce_cap_commerce_checkout_form_validate');
    $form['buttons']['continue']['#submit'] = array('commerce_cap_commerce_checkout_form_submit');
    $form['buttons']['continue']['#ajax'] = array(
      'callback' => 'commerce_cap_commerce_checkout_form_callback',
      'wrapper' => $wrapper_id,
    );

    // Remove the expected panes which are already populated.
    foreach (commerce_checkout_panes(array('enabled' => TRUE, 'page' => $page['page_id'])) as $pane_id => $pane) {
      unset($form[$pane_id]);
    }

    // Set default visible panes.
    $visible_panes = 0;

    // Repopulate form page with block panes.
    foreach (commerce_cap_checkout_panes(array('enabled' => TRUE, 'page' => $page['page_id'])) as $pane_id => $checkout_pane) {
      if ($callback = commerce_checkout_pane_callback($checkout_pane, 'checkout_form')) {
        // Generate the pane form.
        $pane_form = $callback($form, $form_state, $checkout_pane, $order);

        // Combine the messages that were created during this pane's validation or
        // submit process with any that were created during the pane generation
        // and merge them into the session's current messages array.
        if (!empty($form_state['storage']['messages'][$pane_id])) {
          $_SESSION['messages'] = array_merge_recursive($form_state['storage']['messages'][$pane_id], drupal_get_messages());
        }

        // If there are messages in the session right now for this pane, theme
        // them into the form right above the pane itself.
        if (!empty($_SESSION['messages'])) {
          // If there are error messages and this is not the first pane on the
          // form, then indicate we need to show an error message at the top of
          // the page.
          if ($visible_panes > 0 && !empty($_SESSION['messages']['error'])) {
            $show_errors_message = TRUE;
          }

          // Rendering status messages clears the session of messages, so they
          // will not be visible if the user is redirected. We can at least not
          // render here when we detect the global variable added by Rules to
          // handle redirects, though modules implementing redirects will still
          // encounter the same problem of "lost" messages.
          if (!isset($GLOBALS['_rules_action_drupal_goto_do'])){
            $form_state['storage']['themed_messages'][$pane_id] = theme('status_messages');

            $pane_form[$pane_id . '_messages'] = array(
              '#markup' => $form_state['storage']['themed_messages'][$pane_id],
              '#weight' => -50,
            );
          }
        }

        // Create a fieldset for the pane and add the form data defined in the
        // pane's form callback.
        if ($pane_form) {
          $form[$pane_id] = $pane_form + array(
            '#type' => $checkout_pane['fieldset'] ? 'fieldset' : 'container',
            '#title' => check_plain($checkout_pane['title']),
            '#collapsible' => $checkout_pane['collapsible'],
            '#collapsed' => $checkout_pane['collapsed'],
            '#attributes' => array('class' => array($pane_id)),
            '#tree' => TRUE,
          );

          $visible_panes++;
        }
      }
    }
  }
}

/**
 * Checkout form AJAX callback.
 */
function commerce_cap_commerce_checkout_form_callback($form, $form_state) {
  $next_page = $form_state['next_page'];

  if ($next_page == 'payment') {
    ctools_include('ajax');
    ctools_add_js('ajax-responder');

    $commands[] = ctools_ajax_command_redirect('checkout/' . $form_state['order']->order_id . '/' . $next_page);

    print ajax_render($commands);
    drupal_exit();
  }

  return $form;
}

/**
 * Validate handler for the continue button of the checkout form.
 *
 * Please see, http://drupalcontrib.org/api/drupal/contributions!commerce!modules!checkout!commerce_checkout.module
 */
function commerce_cap_commerce_checkout_form_validate($form, &$form_state) {
  $checkout_page = $form_state['checkout_page'];

  // Load a fresh copy of the order stored in the form.
  $order = commerce_order_load($form_state['order']->order_id);

  // Catch and clear already pushed messages.
  $previous_messages = drupal_get_messages();

  // Load any pre-existing validation errors for the elements.
  $errors = array();

  foreach ((array) form_get_errors() as $element_path => $error) {
    list($pane_id, ) = explode('][', $element_path, 2);
    $errors[$pane_id][$element_path] = $error;
  }

  // Loop through the enabled checkout panes for the current page.
  $form_validate = TRUE;
  foreach (commerce_cap_checkout_panes(array('enabled' => TRUE, 'page' => $checkout_page['page_id'])) as $pane_id => $checkout_pane) {
    $validate = TRUE;

    // If any element in the pane failed validation, we mark the pane as
    // unvalidated and replay the validation messages on top of it.
    if (!empty($errors[$pane_id])) {
      $validate = FALSE;

      foreach ($errors[$pane_id] as $element_path => $message) {
        if ($message) {
          drupal_set_message($message, 'error');
        }
      }

      if (isset($previous_messages['error'])) {
        $previous_messages['error'] = array_values(array_diff($previous_messages['error'], $errors[$pane_id]));
      }
    }

    // If the pane has defined a checkout form validate handler...
    if ($callback = commerce_checkout_pane_callback($checkout_pane, 'checkout_form_validate')) {
      // Give it a chance to process the submitted data.
      $validate &= $callback($form, $form_state, $checkout_pane, $order);
    }

    // Catch and clear panes' messages.
    $pane_messages = drupal_get_messages();

    // Submit the pane if it validated.
    if ($validate && $callback = commerce_checkout_pane_callback($checkout_pane, 'checkout_form_submit')) {
      $callback($form, $form_state, $checkout_pane, $order);
    }

    // Generate status messages.
    $form_state['storage']['messages'][$pane_id] = array_merge_recursive($pane_messages, drupal_get_messages());

    // A failed pane makes the form fail.
    $form_validate &= $validate;
  }

  // Restore messages and form errors.
  $_SESSION['messages'] = array_merge_recursive(array_filter($previous_messages), drupal_get_messages());
  $form_errors = &drupal_static('form_set_error', array());
  $form_state['storage']['errors'] = $form_errors;
  $form_errors = array();

  // Save the updated order object and reset the order in the form cache to
  // ensure rebuilt forms use the updated order.
  commerce_order_save($order);
  $form_state['build_info']['args'][0] = $order;

  // If a pane failed validation or the form state has otherwise been altered to
  // initiate a rebuild, return without moving to the next checkout page.
  if (!$form_validate || $form_state['rebuild']) {
    $form_state['rebuild'] = TRUE;
  }
}

/**
 * Checkout form back button submit handler.
 */
function commerce_cap_commerce_checkout_form_back_submit($form, &$form_state) {
  $prev_page = $form_state['checkout_page']['prev_page'];

  $order = $form_state['order'];
  $page = commerce_cap_checkout_page($prev_page);

  // Overwrite form state with previous page data.
  $form_state['build_info']['args'] = array($order, $page);
  $form['#form_id'] = 'commerce_checkout_form_' . $prev_page;

  // Update the order status for the checkout step.
  $form_state['order'] = commerce_order_status_update($order, 'checkout_' . $page['page_id'], FALSE, NULL, t('Customer returned to the previous checkout page via a submit button.'));

  $form_state['rebuild'] = TRUE;
}

/**
 * Checkout form submit handler.
 */
function commerce_cap_commerce_checkout_form_submit(&$form, &$form_state) {
  $next_page = $form_state['checkout_page']['next_page'];

  // @todo, this is used in our callback 
  // as form_state['checkout_page'] is dubious there.
  $form_state['next_page'] = $next_page;

  // Load a fresh copy of the order stored in the form.
  $order = commerce_order_load($form_state['order']->order_id);

  // Load next page.
  $page = commerce_cap_checkout_page($next_page);

  // Overwrite form state arguments.
  $form_state['build_info']['args'] = array($order, $page);
  $form['#form_id'] = 'commerce_checkout_form_' . $next_page;

  // @ref commerce_checkout_form_submit().
  if (!empty($form_state['storage']['messages'])) {
    foreach ($form_state['storage']['messages'] as $pane_id => $pane_messages) {
      $_SESSION['messages'] = array_merge_recursive($_SESSION['messages'], $pane_messages);
    }
  }

  // If the form was submitted via the continue button...
  if (end($form_state['triggering_element']['#array_parents']) == 'continue') {
    // If there is another checkout page...
    if ($next_page) {
      // Update the order status to reflect the next checkout page.
      $order = commerce_order_status_update($order, 'checkout_' . $next_page, FALSE, NULL, t('Customer continued to the next checkout page via a submit button.'));

      // If it happens to be the complete page, process completion now.
      if ($next_page == 'complete') {
        commerce_checkout_complete($order);
      }
    }
  }

  // Don't rebuild for payment & complete page.
  // @todo, provide support for edge cases here.
  if ($next_page != 'payment') {
    $form_state['rebuild'] = TRUE;
  }

  // Fallback.
  $form_state['redirect'] = 'checkout/' . $order->order_id . '/' . $next_page;
}

/**
 * Implements hook_form_alter().
 */
function commerce_cap_form_commerce_checkout_builder_form_alter(&$form, $form_state) {
  if (in_array('block', $form_state['build_info']['args'])) {
    // Overwrite submit & reset handlers.
    $form['actions']['reset']['#submit'] = array('commerce_cap_checkout_panes_reset_submit');
    $form['actions']['submit']['#submit'] = array('commerce_cap_checkout_pane_save_submit');

    // Load an array of all available checkout pages.
    $checkout_pages = commerce_checkout_pages();

    // Add a "disabled" pseudo-page.
    $checkout_pages['disabled'] = array('page_id' => 'disabled', 'title' => t('Disabled'), 'name' => t('Disabled'));

    $form['checkout_pages'] = array(
      '#type' => 'value',
      '#value' => $checkout_pages,
    );

    $checkout_pages_options = array();

    // Create arrays for checkout panes in each of the pages.
    foreach (array_keys($checkout_pages) as $page_id) {
      $form['page'][$page_id]['panes'] = array('#tree' => TRUE);

      // Build the options list for selecting the pane's checkout page.
      $checkout_pages_options[$page_id] = $checkout_pages[$page_id]['name'];
    }

    // Loop through all the checkout panes on the site.
    $panes = commerce_cap_checkout_panes();

    foreach ($panes as $pane_id => $checkout_pane) {
      // Determine a checkout pane's current checkout page.
      $page_id = $checkout_pane['enabled'] ? $checkout_pane['page'] : 'disabled';

      // If the page no longer exists, place the pane on the first page.
      if (empty($checkout_pages[$page_id])) {
        reset($checkout_pages);
        $page_id = key($checkout_pages);
      }

      // Add the pane's name to the form array.
      $form['page'][$page_id]['panes'][$pane_id]['name'] = array(
        '#markup' => check_plain($checkout_pane['name']),
      );

      // Add the select field for the pane's checkout page.
      $form['page'][$page_id]['panes'][$pane_id]['page'] = array(
        '#type' => 'select',
        '#options' => $checkout_pages_options,
        '#default_value' => $checkout_pane['page'],
        '#attributes' => array('class' => array('checkout-pane-page checkout-pane-page-'. $checkout_pane['page'])),
      );

      // Add the select field for the pane's weight.
      $form['page'][$page_id]['panes'][$pane_id]['weight'] = array(
        '#type' => 'weight',
        '#delta' => 20,
        '#default_value' => $checkout_pane['weight'],
        '#attributes' => array('class' => array('checkout-pane-weight checkout-pane-weight-'. $checkout_pane['page'])),
      );

      // Add a configuration link for the pane.
      $form['page'][$page_id]['panes'][$pane_id]['ops'] = array(
        '#markup' => l(t('configure'), 'admin/commerce/config/checkout/form/pane/'. $pane_id),
      );
    }
  }
  else {
    // Include additional submit handler.
    $form['actions']['submit']['#submit'][] = 'commerce_cap_form_commerce_checkout_builder_submit';

    // @todo, defaults.
    $form['enable_ajax'] = array(
      '#type' => 'fieldset',
      '#title' => t('AJAXIFY Checkout'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['enable_ajax']['enable_checkout_ajax'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable'),
      '#description' => t('Enable AJAX through normal checkout procedure.'),
      '#default_value' => variable_get('commerce_cap_enable_checkout_ajax', 1),
    );
  }
}

/**
 * Additional submit handler.
 */
function commerce_cap_form_commerce_checkout_builder_submit($form, $form_state) {
  variable_set('commerce_cap_enable_checkout_ajax', $form_state['values']['enable_checkout_ajax']);
}

/**
 * Submit handler for the checkout builder form's reset button.
 *
 * Please see, http://drupalcontrib.org/api/drupal/contributions!commerce!modules!checkout!commerce_checkout.module
 */
function commerce_cap_checkout_panes_reset_submit($form, &$form_state) {
  // Empty the checkout pane table of configuration data.
  db_truncate('commerce_checkout_block_pane')->execute();
  drupal_set_message(t('Checkout pane positions reset.'));
}

/**
 * Submit handler for the checkout builder form's save button.
 *
 * Please see, http://drupalcontrib.org/api/drupal/contributions!commerce!modules!checkout!commerce_checkout.module
 */
function commerce_cap_checkout_pane_save_submit($form, &$form_state) {
  // Loop through each of the checkout panes.
  if (!empty($form_state['values']['panes'])) {
    foreach ($form_state['values']['panes'] as $pane_id => $data) {
      // Load and update the checkout pane array.
      $checkout_pane = commerce_cap_checkout_pane_load($pane_id);
      $checkout_pane['weight'] = $data['weight'];

      // Accommodate the "Disabled" pseudo-page in the form.
      if ($data['page'] == 'disabled') {
        $checkout_pane['enabled'] = FALSE;
        $checkout_pane['page'] = 'disabled';
      }
      else {
        $checkout_pane['enabled'] = TRUE;
        $checkout_pane['page'] = $data['page'];
      }

      commerce_cap_checkout_pane_save($checkout_pane);
    }
  }

  drupal_set_message(t('Checkout pane positions saved.'));
}

/**
 * Saves a checkout pane's configuration to the database.
 *
 * Please see, http://drupalcontrib.org/api/drupal/contributions!commerce!modules!checkout!commerce_checkout.module
 */
function commerce_cap_checkout_pane_save($checkout_pane) {
  return drupal_write_record('commerce_checkout_block_pane', $checkout_pane, !empty($checkout_pane['saved']) ? 'pane_id' : array());
}

/**
 * Loads the data for a specific checkout pane.
 *
 * Please see, http://drupalcontrib.org/api/drupal/contributions!commerce!modules!checkout!commerce_checkout.module
 */
function commerce_cap_checkout_pane_load($pane_id) {
  // Loads the entire list of panes.
  $checkout_panes = commerce_cap_checkout_panes();

  // Return FALSE if the pane does not exist.
  if (empty($checkout_panes[$pane_id])) {
    return FALSE;
  }

  return $checkout_panes[$pane_id];
}

/**
 * Return a filtered array of checkout pane objects.
 *
 * Please see, http://drupalcontrib.org/api/drupal/contributions!commerce!modules!checkout!commerce_checkout.module
 */
function commerce_cap_checkout_panes($conditions = array(), $skip_saved_data = FALSE) {
  if (!$skip_saved_data) {
    $checkout_panes = &drupal_static(__FUNCTION__);
  }

  // Cache the saved checkout pane data if it hasn't been loaded yet.
  if (!isset($checkout_panes)) {
    if (!$skip_saved_data) {
      $saved_panes = db_query('SELECT * FROM {commerce_checkout_block_pane}')->fetchAllAssoc('pane_id', PDO::FETCH_ASSOC);
    }

    // Load panes defined by modules.
    $checkout_panes = array();

    foreach (module_implements('commerce_checkout_pane_info') as $module) {
      foreach (module_invoke($module, 'commerce_checkout_pane_info') as $pane_id => $checkout_pane) {
        $checkout_pane['pane_id'] = $pane_id;
        $checkout_pane['module'] = $module;

        // Update the pane with saved data.
        if (!$skip_saved_data && !empty($saved_panes[$pane_id])) {
          $checkout_pane = array_merge($checkout_pane, $saved_panes[$pane_id]);
          $checkout_pane['saved'] = TRUE;
        }

        $checkout_panes[$pane_id] = $checkout_pane;
      }
    }

    drupal_alter('commerce_checkout_block_pane_info', $checkout_panes);

    // Merge in defaults.
    foreach ($checkout_panes as $pane_id => $checkout_pane) {
      // Set some defaults for the checkout pane.
      $defaults = array(
        'base' => $pane_id,
        'name' => $checkout_pane['title'],
        'page' => 'checkout',
        'locked' => FALSE,
        'fieldset' => TRUE,
        'collapsible' => FALSE,
        'collapsed' => FALSE,
        'weight' => 0,
        'enabled' => TRUE,
        'review' => TRUE,
        'callbacks' => array(),
        'file' => '',
      );
      $checkout_pane += $defaults;

      // Merge in default callbacks.
      foreach (array('settings_form', 'checkout_form', 'checkout_form_validate', 'checkout_form_submit', 'review') as $callback) {
        if (!isset($checkout_pane['callbacks'][$callback])) {
          $checkout_pane['callbacks'][$callback] = $checkout_pane['base'] . '_' . $callback;
        }
      }

      $checkout_panes[$pane_id] = $checkout_pane;
    }

    // Sort the panes by their weight value.
    uasort($checkout_panes, 'drupal_sort_weight');
  }

  // Apply conditions to the returned panes if specified.
  if (!empty($conditions)) {
    $matching_panes = array();

    foreach ($checkout_panes as $pane_id => $checkout_pane) {
      // Check the pane against the conditions array to determine whether to add
      // it to the return array or not.
      $valid = TRUE;

      foreach ($conditions as $property => $value) {
        // If the current value for the specified property on the pane does not
        // match the filter value...
        if ($checkout_pane[$property] != $value) {
          // Do not add it to the temporary array.
          $valid = FALSE;
        }
      }

      if ($valid) {
        $matching_panes[$pane_id] = $checkout_pane;
      }
    }

    return $matching_panes;
  }

  return $checkout_panes;
}

/**
 * Load commerce checkout pages.
 */
function commerce_cap_checkout_page($page = NULL) {
  $pages = commerce_checkout_pages();

  if (empty($page)) {
    $page = reset($pages);
  }
  else {
    $page = $pages[$page];
  }

  return $page;
}
