<?php
include_once('cdn_upload.field.inc');

/**
 * Return all of the files needed for the uploader.
 *
 * @return array
 *   An array of files for the fine uploader.
 */
function cdn_upload_get_uploader_files() {

  // Get the fineuploader path.
  $path = libraries_get_path('fine-uploader');

  // Get the path to cdn uploader module.
  $cdn_upload = drupal_get_path('module', 'cdn_upload');
  return array(
    'js' => array(
      $path . '/_build/all.fineuploader.js' => array('group' => JS_LIBRARY),
      $cdn_upload . '/js/cdn_upload.js' => array('group' => JS_LIBRARY),
    ),
    'css' => array(
      $path . '/_build/fineuploader.min.css' => array(
        'type' => 'file',
        'media' => 'screen'
      ),
      $cdn_upload . '/css/cdn_upload.css' => array(
        'type' => 'file',
        'media' => 'screen'
      ),
    )
  );
}

/**
 * Register the Amazon S3 account upload.
 *
 * @param $module
 * @param $plugin
 *
 * @return string
 */
function cdn_upload_ctools_plugin_directory($module, $plugin) {
  if ($module == 'awssdk2' && $plugin == 'service') {
    return 'plugins/awssdk';
  }
}

/**
 * Implementation of hook_library().
 */
function cdn_upload_library() {
  $libraries['fine_uploader'] = array(
    'title' => 'Fine Uploader',
    'website' => 'https://github.com/Widen/fine-uploader',
    'version' => '4.4.0',
    'dependencies' => array(
      array('system', 'ui.widget')
    ),
  );
  $libraries['fine_uploader'] += cdn_upload_get_uploader_files();
  return $libraries;
}

/**
 * Implementation of hook_requirements()
 */
function cdn_upload_requirements($phase) {
  $requirements = array();
  $t = get_t();
  if ($phase == 'runtime') {
    $requirements['fine_uploader'] = array(
      'title' => $t('Fine Uploader'),
      'value' => $t('Installed'),
      'severity' => REQUIREMENT_OK,
    );

    // Make sure the fine-upload library has been built.
    $files = cdn_upload_get_uploader_files();
    foreach ($files['js'] as $path => $options) {
      if (!file_exists($path)) {
        $requirements['fine_uploader']['value'] = 'Fine Uploader File Not Found: ' . $path;
        $requirements['fine_uploader']['description'] = $t('We could not locate the fine uploader library.  Please make sure to read the README.md file in the cdn_upload module folder to walk through the installation of fine uploader.');
        $requirements['fine_uploader']['severity'] = REQUIREMENT_ERROR;
      }
    }
    foreach ($files['css'] as $path => $options) {
      if (!file_exists($path)) {
        $requirements['fine_uploader']['value'] = 'Fine Uploader File Not Found: ' . $path;
        $requirements['fine_uploader']['description'] = $t('We could not locate the fine uploader library.  Please make sure to read the README.md file in the cdn_upload module folder to walk through the installation of fine uploader.');
        $requirements['fine_uploader']['severity'] = REQUIREMENT_ERROR;
      }
    }
  }
  return $requirements;
}

/**
 * Implements hook_permission().
 */
function cdn_upload_permission() {
  return array(
    'perform s3 direct uploads' => array(
      'title' => t('Perform Direct Amazon S3 Uploads.'),
      'description' => t('If this person can upload directly to Amazon S3.'),
    )
  );
}

/**
 * Implements hook_menu().
 */
function cdn_upload_menu() {

  // Add the cdn_upload endpoint for processing all requests.
  $items['cdn_upload/%'] = array(
    'page callback' => 'cdn_upload_endpoint',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access arguments' => array('perform s3 direct uploads'),
  );

  // Add the cdn session object.
  $items['cdn_session/%'] = array(
    'page callback' => 'cdn_upload_session',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access arguments' => array('perform s3 direct uploads'),
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 * @return type
 */
function cdn_upload_theme() {
  $path = drupal_get_path('module', 'cdn_upload');
  $themes = array();
  $themes['cdn_upload'] = array(
    'render element' => 'element',
    'template' => 'cdn_upload',
    'path' => $path . '/templates',
    'preprocess functions' => array('cdn_upload_preprocess_widget'),
    'process functions' => array(),
  );
  return $themes;
}

/**
 * Returns the method used for the upload.
 *
 * @return string
 */
function cdn_upload_get_method() {
  global $HTTP_RAW_POST_DATA;
  if(isset($HTTP_RAW_POST_DATA)) {
    parse_str($HTTP_RAW_POST_DATA, $_POST);
  }

  if (isset($_POST['method'])) {
    $method = check_plain($_POST['method']);
  }
  else {
    $method = check_plain($_SERVER['REQUEST_METHOD']);
  }
  return $method;
}

/**
 * Preprocess the s3 direct upload theme.
 *
 * @param $variables
 *
 * @return string
 */
function cdn_upload_preprocess_widget(&$variables) {
  static $cdn_upload_settings = array();
  $element = $variables['element'];
  drupal_add_library('cdn_upload', 'fine_uploader');
  $conf = awssdk_service_load('s3');

  // Get a new build ID.
  $buildId = drupal_random_key();

  // Get the value
  $values = array();
  $value = $element['#upload_value'];
  if (!empty($value)) {
    $file = new S3File($element['#cdn_upload_settings']['bucket']);
    $values['name'] = $value;
    $values['uuid'] = $file->getUUIDFromURL($value);
    $values['s3Key'] = $file->getKeyFromURL($value);
  }

  // Get the element ID for this upload widget.
  $elementId = preg_replace('/-upload$/', '', $element['#id']);

  // Set the cdn upload settings.
  $cdn_upload_settings[$elementId] = array(
    'conf' => $buildId,
    'bucket' => $element['#cdn_upload_settings']['bucket'],
    'maxSize' => $element['#cdn_upload_settings']['maxSize'],
    'modulePath' => drupal_get_path('module', 'cdn_upload'),
    'publicKey' => $conf->config['access']['key'],
    'value' => $values,
  );

  // Get the cache for cdn_upload.
  cache_set('cdn_upload-' . $buildId, $cdn_upload_settings[$elementId]);

  // Add the javascript configurations.
  drupal_add_js(array('cdn_upload' => $cdn_upload_settings), 'setting');
}

/**
 * Perform the s3 upload signature.
 */
function cdn_upload_endpoint($session) {

  // Add the CORS header to the request.
  drupal_add_http_header('Access-Control-Allow-Origin', '*');

  // Switch on the method.
  switch (cdn_upload_get_method()) {

    // Handle the OPTIONS request.
    case 'OPTIONS':
      drupal_add_http_header('Access-Control-Allow-Methods', 'POST');
      drupal_add_http_header('Access-Control-Allow-Headers', 'Content-Type');
      break;

    // Handle the DELETE request.
    case 'DELETE':
      $bucket = $_GET['bucket'];
      $key = $_GET['key'];
      if ($bucket && $key) {
        $file = new S3File(check_plain($bucket));
        $file->delete($key);
      }
      break;

    // Handle the POST request.
    case 'POST':
      if (empty($session)) {
        return NULL;
      }

      // Get the parameters from cache.
      $cache = cache_get('cdn_upload-' . $session);

      // Only continue if we have a cached object.
      if (empty($cache) || empty($cache->data)) {
        return NULL;
      }

      // Create the file.
      $file = new S3File(
        check_plain($cache->data['bucket']),
        check_plain($cache->data['maxSize'])
      );

      // Check to see if the request is a success.
      if (!empty($_GET['success'])) {

        // Get the UUID and key of this upload.
        $uuid = check_plain($_POST['uuid']);
        $key = check_plain($_POST['key']);
        drupal_json_output($file->verify($uuid, $key));
      }
      else {
        drupal_json_output($file->sign());
      }
      break;
  }

  return NULL;
}

/**
 * Return the upload session.
 *
 * @param string $session
 *   The current upload session.
 *
 * @return NULL
 */
function cdn_upload_session($session) {

  // Get the upload session.
  $cache = cache_get('cdn_upload-' . $session);
  if ($cache) {
    $values = array();
    if (!empty($cache->data['value'])) {
      $values[] = $cache->data['value'];
    }
    drupal_json_output($values);
  }

  return NULL;
}
