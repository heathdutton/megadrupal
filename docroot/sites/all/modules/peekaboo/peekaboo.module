<?php

/**
 * @file
 * The Peekaboo module.
 */

/**
 * Implements hook_menu().
 */
function peekaboo_menu() {
  $items = array();
  $items['peekaboo'] = array(
    'title' => 'Peekaboo ajax',
    'page callback' => 'peekaboo_ajax',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Ajax menu callback.
 *
 * Given a node ID and field name this will get the HTML
 * of the content field.
 */
function peekaboo_ajax($entity_type, $entity_id, $field_name, $langcode) {
  $q = $_GET['q'];
  $referer = str_replace(url('<front>', array('absolute' => TRUE)), '', $_SERVER['HTTP_REFERER']);

  if (strpos($referer, '?q=') === 0) {
    $referer = preg_replace('/\?q=/', '', $referer, 1);
    $referer = preg_replace('/&/', '?', $referer, 1);
  }

  $_GET['q'] = $referer;

  $entity = reset(entity_load($entity_type, array($entity_id)));
  $display = array('label' => 'hidden');

  $output = field_view_field($entity_type, $entity, $field_name, $display, $langcode);

  $_GET['q'] = $q;

  print drupal_render($output);
  exit;
}

/**
 * Implements hook_module_implements_alter().
 */
function peekaboo_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'field_formatter_info_alter') {
    // Move to end of list.
    $group = $implementations['peekaboo'];
    unset($implementations['peekaboo']);
    $implementations['peekaboo'] = $group;
  }
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function peekaboo_field_formatter_info_alter(&$info) {
  foreach (array_keys($info) as $key) {
    $info[$key]['settings'] += array(
      'peekaboo' => FALSE,
      'peekaboo_module' => $info[$key]['module'],
      'peekaboo_type' => 'inline',
      'peekaboo_link' => TRUE,
      'peekaboo_link_remove' => TRUE,
      'peekaboo_link_text' => t('Show field'),
      'peekaboo_link_text_hide' => t('Hide field'),
      'peekaboo_autoload' => FALSE,
      'peekaboo_autoload_delay' => 0,
      'peekaboo_reload' => FALSE,
      'peekaboo_reload_delay' => 20,

    );
    $info[$key]['module'] = 'peekaboo';
  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function peekaboo_field_formatter_settings_summary($field, $instance, $view_mode) {
  // Not much effort has gone into this function, when there are more settings give this a thorough do over.
  $settings = $instance['display'][$view_mode]['settings'];
  $summary = module_invoke($settings['peekaboo_module'], 'field_formatter_settings_summary', $field, $instance, $view_mode);
  if (!empty($settings['peekaboo'])) {
    $summary .= '<div>' . t('Peekaboo') . ': ' . t('Enabled') . '</div>';
  }
  else {
    // This hook requires us to return *something* for the settings form hook to work.
    $summary .= '<div>' . t('Peekaboo') . ': ' . t('Disabled') . '</div>';
  }
  return $summary;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function peekaboo_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $settings = $instance['display'][$view_mode]['settings'];
  $element = module_invoke($settings['peekaboo_module'], 'field_formatter_settings_form', $field, $instance, $view_mode, $form, $form_state);

  $peekaboo_setting_id = 'edit-fields-' . drupal_clean_css_identifier($field['field_name']) . '-settings-edit-form-settings-peekaboo';

  $element['peekaboo'] = array(
    '#type' => 'checkbox',
    '#title' => t('Peekaboo'),
    '#default_value' => $settings['peekaboo'],
  );

  $element['peekaboo_type'] = array(
    '#type' => 'select',
    '#title' => t('Peekaboo type'),
    '#options' => array(
      'inline' => t('Inline'),
    ),
    '#required' => TRUE,
    '#default_value' => $settings['peekaboo_type'],
    '#states' => array(
      'visible' => array(
        ':input[id=' . $peekaboo_setting_id . ']'
          => array('checked' => TRUE),
      ),
    ),
  );

  $peekaboo_link_setting_id = 'edit-fields-' . drupal_clean_css_identifier($field['field_name']) . '-settings-edit-form-settings-peekaboo-link';

  $element['peekaboo_link'] = array(
    '#type' => 'checkbox',
    '#title' => t('Link'),
    '#default_value' => $settings['peekaboo_link'],
    '#states' => array(
      'visible' => array(
        ':input[id=' . $peekaboo_setting_id . ']'
          => array('checked' => TRUE),
      ),
    ),
    '#description' => t('Show a link to load the content.'),
  );

  $element['peekaboo_link_remove'] = array(
    '#type' => 'checkbox',
    '#title' => t('Remove the link when used'),
    '#default_value' => $settings['peekaboo_link_remove'],
    '#states' => array(
      'visible' => array(
        ':input[id=' . $peekaboo_setting_id . ']'
          => array('checked' => TRUE),
        ':input[id=' . $peekaboo_link_setting_id . ']'
          => array('checked' => TRUE),
      ),
    ),
  );

  $element['peekaboo_link_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Link text'),
    '#default_value' => $settings['peekaboo_link_text'],
    '#required' => TRUE,
    '#states' => array(
      'visible' => array(
        ':input[id=' . $peekaboo_setting_id . ']'
          => array('checked' => TRUE),
        ':input[id=' . $peekaboo_link_setting_id . ']'
          => array('checked' => TRUE),
      ),
    ),
    '#size' => '30',
  );

  $element['peekaboo_link_text_hide'] = array(
    '#type' => 'textfield',
    '#title' => t('Toggled link text'),
    '#default_value' => $settings['peekaboo_link_text_hide'],
    '#required' => TRUE,
    '#states' => array(
      'visible' => array(
        ':input[id=' . $peekaboo_setting_id . ']'
          => array('checked' => TRUE),
        ':input[id=' . $peekaboo_link_setting_id . ']'
          => array('checked' => TRUE),
      ),
    ),
    '#size' => '30',
  );

  $peekaboo_autoload_setting_id = 'edit-fields-' . drupal_clean_css_identifier($field['field_name']) . '-settings-edit-form-settings-peekaboo-autoload';

  $element['peekaboo_autoload'] = array(
    '#type' => 'checkbox',
    '#title' => t('Autoload'),
    '#default_value' => $settings['peekaboo_autoload'],
    '#states' => array(
      'visible' => array(
        ':input[id=' . $peekaboo_setting_id . ']'
          => array('checked' => TRUE),
      ),
    ),
    '#description' => t('Automatically load the content.'),
  );

  $element['peekaboo_autoload_delay'] = array(
    '#type' => 'textfield',
    '#title' => t('Autoload delay'),
    '#default_value' => $settings['peekaboo_autoload_delay'],
    '#required' => TRUE,
    '#states' => array(
      'visible' => array(
        ':input[id=' . $peekaboo_setting_id . ']'
          => array('checked' => TRUE),
        ':input[id=' . $peekaboo_autoload_setting_id . ']'
          => array('checked' => TRUE),
      ),
    ),
    '#size' => '10',
    '#description' => t('The delay in seconds before loading the content.'),
    '#element_validate' => 'element_validate_integer_positive',
  );

  $peekaboo_reload_setting_id = 'edit-fields-' . drupal_clean_css_identifier($field['field_name']) . '-settings-edit-form-settings-peekaboo-reload';

  $element['peekaboo_reload'] = array(
    '#type' => 'checkbox',
    '#title' => t('Reload'),
    '#default_value' => $settings['peekaboo_reload'],
    '#states' => array(
      'visible' => array(
        ':input[id=' . $peekaboo_setting_id . ']'
          => array('checked' => TRUE),
      ),
    ),
    '#description' => t('Repeatedly reload the content.'),
  );

  $element['peekaboo_reload_delay'] = array(
    '#type' => 'textfield',
    '#title' => t('Reload delay'),
    '#default_value' => $settings['peekaboo_reload_delay'],
    '#required' => TRUE,
    '#states' => array(
      'visible' => array(
        ':input[id=' . $peekaboo_setting_id . ']'
          => array('checked' => TRUE),
        ':input[id=' . $peekaboo_reload_setting_id . ']'
          => array('checked' => TRUE),
      ),
    ),
    '#size' => '10',
    '#description' => t('The delay in seconds before reloading the content.'),
    '#element_validate' => 'element_validate_integer_positive',
  );

  return $element;
}

/**
 * Implements hook_field_formatter_view().
 */
function peekaboo_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if (!empty($display['settings']['peekaboo'])) {
    $element = array(
      'entity_type' => $entity_type,
      'entity' => $entity,
      'field' => $field,
      'instance' => $instance,
      'langcode' => $langcode,
      'items' => $items,
      'display' => $display,
    );
    $element['peekaboo_id'] = peekaboo_id($element);

    // Filter settings strings with a permissive filter.
    $display['settings']['peekaboo_link_text'] = filter_xss($display['settings']['peekaboo_link_text']);
    $display['settings']['peekaboo_link_text_hide'] = filter_xss($display['settings']['peekaboo_link_text_hide']);

    $settings['peekaboo'][$element['peekaboo_id']] = $display['settings'];
    drupal_add_js($settings, 'setting');

    drupal_add_css(drupal_get_path('module', 'peekaboo') . '/peekaboo.css');
    drupal_add_js(drupal_get_path('module', 'peekaboo') . '/peekaboo.js');

    $output = array();
    switch ($element['display']['settings']['peekaboo_type']) {
      case 'inline':
        $output[0]['container']['#markup'] = peekaboo_inline_container($element);
        if ($element['display']['settings']['peekaboo_link']) {
          $output[0]['link']['#markup'] = peekaboo_link_anchor($element);
        }
        break;
    }
    return $output;
  }
  else {
    return module_invoke($display['settings']['peekaboo_module'], 'field_formatter_view', $entity_type, $entity, $field, $instance, $langcode, $items, $display);
  }
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function peekaboo_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  $function = $field['module'] . '_field_formatter_prepare_view';
  if (function_exists($function)) {
    return $function($entity_type, $entities, $field, $instances, $langcode, $items, $displays);
  }
}

/**
 * Return the div structure required by peekaboo.
 */
function peekaboo_inline_container($element) {
  $classes = 'peekaboo-container peekaboo-collapsed peekaboo-unprocessed';
  return '<div id="' . $element['peekaboo_id'] . '" class="' . $classes . '"></div>';
}

/**
 * Get the link anchor for an element.
 */
function peekaboo_link_anchor($element) {
  $classes = array(
     'peekaboo-link',
     'peekaboo-collapsed',
     'peekaboo-unprocessed'
  );
  return l(
    $element['display']['settings']['peekaboo_link_text'],
    $_GET['q'],
    array(
      'attributes' => array(
        'id' => $element['peekaboo_id'] . '-link',
        'class' => $classes,
      ),
      'fragment' => drupal_clean_css_identifier($element['display']['settings']['peekaboo_link_text']),
    )
  );
}

/**
 * Get the identifier for an element in the format required by peekaboo.
 *
 * This relies on hyphens not being allowed in the pieces used to make the id,
 * and depends on underscores being used, which are kept in the css identifier
 * and the internal key name for the peekaboo, and are not filtered out with
 * drupal_clean_css_identifier(), this may need to change one day and the settings
 * array could be macgyvered to carry the information JavaScript currently
 * deduces from the css identifier.
 */
function peekaboo_id($element) {
  $id = array('peekaboo');
  $id[] = $element['entity_type'];
  $entity_ids = entity_extract_ids($element['entity_type'], $element['entity']);
  $id[] = $entity_ids[0];
  $id[] = $element['field']['field_name'];
  $id[] = $element['langcode'];
  return implode('-', $id);
}

/*

@todo:
- Ajax transition effects
- Support for modals
- Get value automatically
- Update value automatically every X seconds.

*/