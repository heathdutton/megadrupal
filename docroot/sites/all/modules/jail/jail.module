<?php
/**
 * @file
 * adds a formatter for images that makes them 'lazy load' using Javascript Image Asynchronous Loading
 *
 */
/**
 * Implements hook_menu().
 */
function jail_menu() {
  $items = array();
  $items['admin/config/content/social-share'] = array(
    'title'            => 'JAIL Formatter',
    'description'      => 'Configure JAIL formatting',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('jail_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type'             => MENU_NORMAL_ITEM,
    'file'             => 'jail.admin.inc',
  );
  return $items;
}

function jail_field_formatter_info() {
  return array(
    'jail' => array(
      'label' => t('JAIL load'),
      'field types' => array('image', 'text'),
      'settings'  => array(
        'jail_effect' => 'none',
        'jail_image_style' => 'None (original image)',
      ),
    ),
  );
}
/**
 * Implements hook_field_formatter_settings_form().
 */
function jail_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();
  $element['jail_effect'] = array(
    '#type'           => 'select',
    '#title'          => t('Effect'),
    '#description'    => t('Select the effect to use'),
    '#default_value'  => $settings['jail_effect'],
    '#options'        => array(
      'show'  => 'None',
      'fadeIn' => 'Fade in',
      'slideDown'  => 'Slide down',
    ),
  );
  $image_styles = image_style_options(FALSE);
   $element['jail_image_style'] = array(
     '#title' => t('Image style'),
     '#type' => 'select',
     '#default_value' => $settings['jail_image_style'],
     '#empty_option' => t('None (original image)'),
     '#options' => $image_styles,
   );
  return $element;
}
/**
 * Implements hook_field_formatter_settings_summary().
 */
function jail_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  if ($settings['jail_effect']=="none") {
    $effect = 'show';  }
    else {
      $effect = $settings['jail_effect'];
    }
    $noscript = " NOT ";
  if (variable_get('jail_noscript', 0)) {
    $noscript = "";
  }
  if ($settings['jail_image_style']=="") {
    $jis = "Original";
  } else {
    $jis = $settings['jail_image_style'];
  }
  $summary = t('Images will load Asynchronously when scrolled into view using a "@effect" effect.<br>Using Image Style: @jail_image_style', array(
    '@effect'     => $effect,
    '@jail_image_style'     => $jis,
  ));
  return $summary;
}
/**
 * Implements hook_field_formatter_view().
 */
function jail_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
  $effect = $settings['jail_effect'];

  $imagepath = file_create_url($items[0]['uri']);
  foreach ($items as $delta => $item) {
    $element[$delta] = array(

        '#theme' => 'jail_formatter',
        '#item' => $item,
        '#jail_image_style' => $settings['jail_image_style'],
       //@TODO add links '#path' => isset($uri) ? $uri : '',
        '#jail_effect' => $effect,
      );
    }
    return $element;
  }

/**
 * Returns HTML for an image field formatter.
 *
 * @param $variables
 *   An associative array containing:
 *   - item: An array of image data.
 *   - image_style: An optional image style.
 *   - path: An array containing the link 'path' and link 'options'.
 *
 * @ingroup themeable
 */
function theme_jail_formatter($variables) {
  $item = $variables['item'];

  $placeholder = $variables['placeholder'];
  $image = array(
    'path' => $item['uri'],
    'alt' => $item['alt'],
  );
  $effect = $variables['jail_effect'];
  // Do not output an empty 'title' attribute.
  if (drupal_strlen($item['title']) > 0) {
    $image['title'] = $item['title'];
  }
  if ($variables['jail_image_style']=='None (original image)' || $variables['jail_image_style']=='') {
    $url = file_create_url($item['uri']);
  } else {
    $url = image_style_url($variables['jail_image_style'], $item['uri']);
  }
  $output = '<img class="lazy" data-href="' . $url . '" src="' . $placeholder . '"/>';
  if ($variables['path']) {
    $path = $variables['path']['path'];
    $options = $variables['path']['options'];
    // When displaying an image inside a link, the html option must be TRUE.
    $options['html'] = TRUE;
    $output = l($output, $path, $options);
  }
  if(variable_get('jail_noscript', 0)) {
    $output .= '<noscript><img src="' . $url . '"></noscript>';
  }
  drupal_add_js(libraries_get_path('jail') . '/jquery.jail.js');
  drupal_add_js('(function ($) {$(".lazy").jail({placeholder : "/' . variable_get('jail_loader', '/' . drupal_get_path('module', 'jail') . '/white.gif') . '", effect : "' . $variables['jail_effect'] .'"});})(jQuery);', array('type' => 'inline', 'scope' => 'footer', 'weight' => 5));
  return $output;
}

function jail_preprocess_user_picture(&$variables) {
  if (variable_get('jail_users', 0)) {
    $path = image_style_url(variable_get('user_picture_style', ''),$variables['account']->picture->uri);
  $place = variable_get('jail_place', '/' . drupal_get_path('module', 'jail') . '/white.gif');
    $img = '<img class="lazy" data-href="' . $path . '" src="/' . $place . '"/>';
   if(variable_get('jail_noscript', 0)) {
      $img .= '<noscript><img src="' . $path . '"></noscript>';
    }
    drupal_add_js(libraries_get_path('jail') . '/jquery.jail.js');
    drupal_add_js('(function ($) {$(".lazy").jail({placeholder : "/' . variable_get('jail_loader', drupal_get_path('module', 'jail') . '/white.gif') . '", effect : "' . variable_get('jail_effect','show') .'"});})(jQuery);', array('type' => 'inline', 'scope' => 'footer', 'weight' => 5));
    $variables['user_picture'] = $img;
  };
}

function jail_theme() {
  return array(

    'jail_formatter' => array(
      'variables' => array('item' => NULL, 'path' => NULL, 'jail_image_style' => NULL, 'placeholder' => NULL, 'jail_effect' => NULL),
    ),
  );
}
