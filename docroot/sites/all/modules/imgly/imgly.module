<?php
/**
 * @file
 * Imgly module.
 */

/**
 * Implements hook_permission().
 */
function imgly_permission() {
  return array(
    'administer imgly' => array(
      'title' => t('Administer Imgly settings'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function imgly_menu() {
  return array(
    // Admin settings page.
    'admin/config/media/imgly' => array(
      'title' => 'Imgly',
      'description' => 'Configure settings for Imgly.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('imgly_settings_form'),
      'access arguments' => array('administer imgly'),
      'file' => 'includes/imgly.admin.inc'
    ),
    // Admin settings page.
    'admin/config/media/imgly/default' => array(
      'title' => 'Imgly',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
    ),
    // "Add Imgly image" navigation link
    'imgly/add' => array(
      'title' => 'Add imgly image',
      'page callback' => 'drupal_goto',
      'page arguments' => array('node/add/imgly'),
      'access arguments' => array('create imgly content'),
    ),
    // Imgly share form
    'node/%/imgly_share' => array(
      'title' => 'Imgly share',
      'description' => 'Open imgly share url form',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('imgly_share_form', 1),
      'access callback' => 'imgly_access',
      'access arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
    ),
    // View full node
    'node/%/imgly_full' => array(
      'title' => 'Imgly full node',
      'description' => 'View full node',
      'page callback' => 'imgly_full_node',
      'page arguments' => array(1),
      'access callback' => 'imgly_access',
      'access arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
    ),
    // Download image.
    'imgly/download/%' => array(
      'page callback' => 'imgly_download',
      'page arguments' => array(2),
      'access callback' => 'imgly_access',
      'access arguments' => array(2),
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Access callback.
 *
 * Only add imgly tab on imgly nodes.
 *
 * @see imgly_menu().
 */
function imgly_access($nid) {
  $node = node_load($nid);
  return ($node->type === 'imgly' && user_access('access content'));
}

/**
 * Page callback.
 *
 * Download an imgly image.
 *
 * @see imgly_menu().
 */
function imgly_download($nid) {
  if (is_numeric($nid)) {
    if ($node = node_load($nid)) {
      $file = $node->field_imgly_image[$node->language][0];
      $uri = $file['uri'];
      $name = mime_header_encode($file['filename']);
      $type = mime_header_encode($file['filemime']);

      $headers = array(
        'Content-Type' => $type . '; name="' . $name . '"',
        'Content-Length' => $file['filesize'],
        'Content-Disposition' => 'Attachment; filename="' . $name . '"',
        'Cache-Control' => 'private',
      );

      if (module_exists('imgly_stats') && variable_get('imgly_stats_download', 1)) {
        _imgly_stats_ajax(FALSE, IMGLY_DOWNLOAD, $nid);
      }

      file_transfer($uri, $headers);
    }
  }

  watchdog('imgly', 'Trying to download invalid node: %nid', array('%nid' => $nid), WATCHDOG_WARNING);
  drupal_access_denied();
}

/**
 * Page callback.
 * View full node, bypassing Imgly template.
 *
 * @see imgly_menu().
 */
function imgly_full_node($nid) {
  if (is_numeric($nid)) {
    if ($node = node_load($nid)) {
      return node_view($node);
    }
  }

  watchdog('imgly', 'Trying to access invalid node: %nid', array('%nid' => $nid), WATCHDOG_WARNING);
  drupal_access_denied();
}

/**
 * Form callback.
 *
 * Displays form with shortened URL for copying.
 *
 * @see imgly_menu().
 */
function imgly_share_form($form, $form_state, $nid) {
  if (is_numeric($nid)) {
    if ($node = node_load($nid)) {
      $form = array();

      $form['imgly_url'] = array(
        '#type' => 'textfield',
        '#title' => t('URL'),
        '#value' => url('node/' . $nid, array('absolute' => TRUE)),
        '#attributes' => array('readonly' => TRUE),
      );

      $form['imgly_copy'] = array(
        '#prefix' => '<div id="imgly_clip_container" style="position:relative;">',
        '#suffix' => '</div>',
        '#type' => 'button',
        '#value' => t('Copy to clipboard'),
      );

      $imgly_path = drupal_get_path('module', 'imgly');
      $form['#attached'] = array(
        'js' => array(
          $imgly_path . '/js/imgly_share.js',
          $imgly_path . '/zeroclipboard/ZeroClipboard.js',
          array(
            'data' => "ZeroClipboard.setMoviePath( '" . base_path() . $imgly_path . '/zeroclipboard/ZeroClipboard.swf' . "' );",
            'type' => 'inline',
          ),
        ),
      );

      return $form;
    }
  }

  watchdog('imgly', 'Trying to share invalid node: %nid', array('%nid' => $nid), WATCHDOG_WARNING);
  drupal_access_denied();
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Enhances imgly node forms.
 */
function imgly_form_imgly_node_form_alter(&$form, &$form_state) {
  // Figure out if where are adding a new node or editing an existing one.
  $node_edit = isset($form['nid']['#value']);

  // Add field to allow image filename to be used as node title.
  $form['imgly_title_auto'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use image filename as title'),
    '#description' => t("Check this option to use the image's filename as the node's title."),
    '#weight' => -7,
    '#default_value' => !$node_edit,
  );

  // If we are editing a node and the title is already the filename, fill the checkbox.
  if ($node_edit) {
    $title = $form['title']['#default_value'];
    $image_name = isset($form['field_imgly_image'][LANGUAGE_NONE][0]['#default_value']['filename'])
        ? $form['field_imgly_image'][LANGUAGE_NONE][0]['#default_value']['filename']
        : '';

    if ($title === $image_name) {
      $form['imgly_title_auto']['#default_value'] = TRUE;
    }
  }

  // Set title to not-required. Our custom validation will take care of this.
  $form['title']['#required'] = FALSE;

  // Hide title field when checking the "Use image filename as title" field.
  $form['title']['#states'] = array(
    'invisible' => array(
      'input[name="imgly_title_auto"]' => array('checked' => TRUE)
    ),
  );

  // Move image field to top.
  $form['field_imgly_image']['#weight'] = -8;

  // Add JavaScript that will disable the path textfield when the automatic alias checkbox is checked.
  $form['path']['alias']['#states']['!enabled']['input[name="path[imgly]"]'] = array('checked' => TRUE);

  // Override path.module's vertical tabs summary.
  $form['path']['#attached']['js'] = array(
    'vertical-tabs' => drupal_get_path('module', 'imgly') . '/js/imgly_form.js'
  );

  // Add automatic URL checkbox.
  $form['path']['imgly'] = array(
    '#type' => 'checkbox',
    '#title' => t('Generate automatic Imgly URL alias'),
    '#default_value' => !$node_edit,
    '#description' => t('Uncheck this to create a custom alias below.'),
    '#weight' => -1,
  );

  // Add custom validation functions.
  $form['#validate'][] = 'imgly_form_imgly_node_form_validate_title';
  $form['#validate'][] = 'imgly_form_imgly_node_form_validate_path';
}

/**
 * Validatation callback.
 *
 * If "Use image filename as title" option selected, make it happen.
 * If not, make sure the title field is required.
 *
 * @see imgly_form_imgly_node_form_alter().
 */
function imgly_form_imgly_node_form_validate_title(&$form, &$form_state) {
  if ($form_state['values']['imgly_title_auto']) {
    // Get filename of uploaded image.
    if ($fid = $form_state['values']['field_imgly_image'][LANGUAGE_NONE][0]['fid']) {
      $title = file_load($fid)->filename;
      // Set filename as node's title.
      form_set_value($form['title'], $title, $form_state);
      // Exit.
      return;
    }
  }

  // If we got here, the title field is required.
  if (empty($form_state['values']['title'])) {
    form_set_error('title', t('The title field is required.'));
  }
}

/**
 * Validation callback.
 *
 * Validates custom path aliases.
 * Generates and sets automatic path alias.
 *
 * @see imgly_form_imgly_node_form_alter().
 */
function imgly_form_imgly_node_form_validate_path(&$form, &$form_state) {
  if ($form_state['values']['path']['imgly']) {
    form_set_value($form['path']['alias'], imgly_next_url(), $form_state);
  }
  else {
    if (!imgly_validate_custom($form_state['values']['path']['alias'])) {
      form_set_error($form['path']['alias'], t('Invalid path alias.'));
    }
  }
}

/**
 * Implements template_preprocess_page().
 *
 * Add theme hook suggestion for image nodes.
 */
function imgly_preprocess_page(&$variables) {
  // Only act one node view pages.
  if (arg(0) === 'node' && is_numeric(arg(1)) && !arg(2)) {
    // Only act if we have a valid node.
    if ($node = node_load(arg(1))) {
      // Only act on imgly nodes.
      if ($node->type === 'imgly') {
        // Add template suggestion.
        $variables['theme_hook_suggestions'] = array('page__node__imgly');
        $links = array();
        $destination = drupal_get_path_alias();

        if (user_is_logged_in()) {
          $user = user_uid_optional_load();

          if (user_access('administer nodes') || user_access('edit any imgly content') || (user_access('edit own imgly content') && $node->uid == $user->uid)) {
            $links['edit'] = array(
              'title' => t('Edit node'),
              'destination' => $destination,
              'href' => "node/{$node->nid}/edit",
            );
          }

          $links['view'] = array(
            'title' => t('View full node'),
            'destination' => $destination,
            'href' => "node/{$node->nid}/imgly_full",
          );
        }
        else {
          $links['login'] = array(
            'title' => t('Login'),
            'destination' => $destination,
            'href' => 'user/login',
          );
        }

        // Add extra variables.
        $links['download'] = array(
          'title' => t('Download full image'),
          'href' => 'imgly/download/' . $node->nid,
        );

        // Add links.
        $variables['imgly_links'] = array(
          '#theme' => 'links__imgly_links',
          '#links' => $links,
          '#attributes' => array('class' => array('inline', 'imgly-links')),
        );

        // Add imgly page styles.
        drupal_add_css(drupal_get_path('module', 'imgly') . '/css/imgly.css', array('group' => CSS_THEME, 'every_page' => TRUE));
      }
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 *
 * @see http://drupal.org/node/715160
 */
function imgly_theme_registry_alter(&$theme_registry) {
  // Add template suggestion for imgly nodes.
  $imgly_path = drupal_get_path('module', 'imgly') . '/templates';
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', NULL, $imgly_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
}

/**
 * Implements template_preprocess_node().
 */
function imgly_preprocess_node(&$variables) {
  if ($variables['type'] === 'imgly') {
    // Make sure node renders as expected in "Imgly full node".
    if (arg(2) === 'imgly_full') {
      // Find node__imgly key.
      $index = array_search('node__imgly', $variables['theme_hook_suggestions']);
      if ($index !== FALSE) {
        unset($variables['theme_hook_suggestions'][$index]);
      }
      $variables['page'] = TRUE;
    }
    else {
      if (variable_get('imgly_powered', 1)) {
        $variables['imgly_powered_by'] = theme('imgly_powered_by');
      }
    }
  }
}

/**
 * Implements hook_node_update().
 *
 * Redirects to imgly page after updating an imgly node.
 */
function imgly_node_update($node) {
  if ($node->type === 'imgly') {
    $_GET['destination'] = "node/{$node->nid}/imgly_share";
  }
}

/**
 * Implements hook_node_insert().
 *
 * Redirects to imgly page after inserting an imgly node.
 */
function imgly_node_insert($node) {
  if ($node->type === 'imgly') {
    $_GET['destination'] = "node/{$node->nid}/imgly_share";
  }
}

/**
 * Return next available short URL.
 * Borrowed from ShURLy.
 *
 * @return string
 * @see http://drupal.org/project/shurly
 */
function imgly_next_url() {
  $count = variable_get('imgly_counter', 3249); // Starts the URLs with 3 characters.
  $shurly = module_exists('shurly');

  do {
    $count++;
    // Counter is stored as base 10.
    // $index is a-z, A-Z, 0-9, sorted randomly, with confusing characters (01lIO) removed - 57 characters
    // A custom index can be created as a variable override in settings.php.
    $index = variable_get('imgly_index', 'kZ4oJ3Uwi5STqcpGNxfYgMQAdPWmsenh78XB26uLbEaRDzKrHVj9CyFtv');
    $str = imgly_dec2any($count, NULL, $index);

    // Check that this string hasn't been used already.
    // If ShURLy is available, make sure we plays nice with it.
    if ($shurly) {
      $shurly_ok = shurly_url_exists($str) !== FALSE || shurly_path_available($str) === FALSE;
    }
  }
  while (drupal_lookup_path('source', $str) !== FALSE && $shurly_ok);

  variable_set('imgly_counter', $count);
  return $str;
}

/**
 * Validate custom short URL string.
 * Borrowed from ShURLy.
 *
 * @param string $url
 * @return bool
 * @see http://drupal.org/project/shurly
 */
function imgly_validate_custom($url) {
  // Make sure it's not empty.
  $url = trim($url);

  if (empty($url)) {
    return FALSE;
  }

  // Disallow: #%&@*{}\:;<>?/+.,'"$|`^[] and space character.
  return preg_match('/[\/#%&\@\*\{\}\\:\;<>\?\+ \.\,\'\"\$\|`^\[\]]/u', $url) ? FALSE
      : TRUE;
}

/**
 * From http://www.php.net/manual/en/function.base-convert.php#52450.
 * Borrowed from ShURLy.
 *
 * @param int $num
 *  Your decimal integer
 * @param int $base
 *  Base to which you wish to convert $num (leave it 0 if you are providing $index or omit if you're using default (62))
 * @param $index
 *  If you wish to use the default list of digits (0-1a-zA-Z), omit this option, otherwise provide a string (ex.: "zyxwvu")
 * @return string
 * @see http://drupal.org/project/shurly
 */
function imgly_dec2any($num, $base = 62, $index = FALSE) {
  if (!$base) {
    $base = strlen($index);
  }
  elseif (!$index) {
    // note: we could rearrange this string to get more random looking URLs
    // another note, to create printable URLs, omit the following characters: 01lIO
    $index = substr("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 0, $base);
  }
  $out = "";
  for ($t = floor(log10($num) / log10($base)); $t >= 0; $t--) {
    $a = floor($num / pow($base, $t));
    $out = $out . substr($index, $a, 1);
    $num = $num - ( $a * pow($base, $t) );
  }
  return $out;
}

### Implement a couple blocks ###

/**
 * Implements hook_block_info().
 */
function imgly_block_info() {
  return array(
    'powered-by' => array(
      'info' => t('Powered by Imgly'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function imgly_block_view($delta = '') {
  if ($delta === 'powered-by') {
    return array(
      'subject' => NULL,
      'content' => theme('imgly_powered_by'),
    );
  }
}

/**
 * Implements hook_theme().
 */
function imgly_theme() {
  return array(
    'imgly_powered_by' => array(
      'variables' => array(),
    ),
  );
}

/**
 * Returns HTML for the Powered by Imgly text.
 *
 * @ingroup themeable
 */
function theme_imgly_powered_by() {
  return '<span>' . t('Powered by <a href="@imgly">Imgly</a> and <a href="@drupal">Drupal</a>', array('@imgly' => 'http://drupal.org/project/imgly', '@drupal' => 'http://drupal.org')) . '</span>';
}

### Definition of content type, fields and image styles ###

/**
 * Implements hook_node_info().
 */
function imgly_node_info() {
  $items = array(
    'imgly' => array(
      'name' => t('Imgly Image'),
      'base' => 'node_content',
      'description' => t('An image to share.'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
    ),
  );
  return $items;
}

/**
 * Helper function.
 * Returns definitions for default Imgly image styles.
 */
function _imgly_styles() {
  $styles = array();

  // Exported image style: imgly
  $styles['imgly'] = array(
    'name' => 'imgly',
    'effects' => array(
      array(
        'label' => 'Scale',
        'help' => 'Scaling will maintain the aspect-ratio of the original image. If only a single dimension is specified, the other dimension will be calculated.',
        'effect callback' => 'image_scale_effect',
        'dimensions callback' => 'image_scale_dimensions',
        'form callback' => 'image_scale_form',
        'summary theme' => 'image_scale_summary',
        'module' => 'image',
        'name' => 'image_scale',
        'data' => array(
          'width' => '640',
          'height' => '640',
          'upscale' => 0,
        ),
        'weight' => '1',
      ),
    ),
  );

  return $styles;
}

/**
 * Helper function.
 * Returns definitions for default Imgly fields.
 *
 * @return array
 */
function _imgly_fields() {
  return array(
    array(
      'translatable' => '0',
      'entity_types' => array(),
      'settings' => array(
        'uri_scheme' => 'public',
        'default_image' => 0,
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
        'module' => 'field_sql_storage',
        'active' => '1',
        'details' => array(
          'sql' => array(
            'FIELD_LOAD_CURRENT' => array(
              'field_data_field_imgly_image' => array(
                'fid' => 'field_imgly_image_fid',
                'alt' => 'field_imgly_image_alt',
                'title' => 'field_imgly_image_title',
                'width' => 'field_imgly_image_width',
                'height' => 'field_imgly_image_height',
              ),
            ),
            'FIELD_LOAD_REVISION' => array(
              'field_revision_field_imgly_image' => array(
                'fid' => 'field_imgly_image_fid',
                'alt' => 'field_imgly_image_alt',
                'title' => 'field_imgly_image_title',
                'width' => 'field_imgly_image_width',
                'height' => 'field_imgly_image_height',
              ),
            ),
          ),
        ),
      ),
      'foreign keys' => array(
        'fid' => array(
          'table' => 'file_managed',
          'columns' => array(
            'fid' => 'fid',
          ),
        ),
      ),
      'indexes' => array(
        'fid' => array(
          'fid',
        ),
      ),
      'field_name' => 'field_imgly_image',
      'type' => 'image',
      'module' => 'image',
      'active' => '1',
      'locked' => '0',
      'cardinality' => '1',
      'deleted' => '0',
      'columns' => array(
        'fid' => array(
          'description' => 'The {file_managed}.fid being referenced in this field.',
          'type' => 'int',
          'not null' => FALSE,
          'unsigned' => TRUE,
        ),
        'alt' => array(
          'description' => "Alternative image text, for the image's 'alt' attribute.",
          'type' => 'varchar',
          'length' => 512,
          'not null' => FALSE,
        ),
        'title' => array(
          'description' => "Image title text, for the image's 'title' attribute.",
          'type' => 'varchar',
          'length' => 1024,
          'not null' => FALSE,
        ),
        'width' => array(
          'description' => 'The width of the image in pixels.',
          'type' => 'int',
          'unsigned' => TRUE,
        ),
        'height' => array(
          'description' => 'The height of the image in pixels.',
          'type' => 'int',
          'unsigned' => TRUE,
        ),
      ),
      'bundles' => array(
        'node' => array(
          'imgly',
        ),
      ),
    ),
    array(
      'translatable' => '0',
      'entity_types' => array(),
      'settings' => array(),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
        'module' => 'field_sql_storage',
        'active' => '1',
        'details' => array(
          'sql' => array(
            'FIELD_LOAD_CURRENT' => array(
              'field_data_field_imgly_description' => array(
                'value' => 'field_imgly_description_value',
                'format' => 'field_imgly_description_format',
              ),
            ),
            'FIELD_LOAD_REVISION' => array(
              'field_revision_field_imgly_description' => array(
                'value' => 'field_imgly_description_value',
                'format' => 'field_imgly_description_format',
              ),
            ),
          ),
        ),
      ),
      'foreign keys' => array(
        'format' => array(
          'table' => 'filter_format',
          'columns' => array(
            'format' => 'format',
          ),
        ),
      ),
      'indexes' => array(
        'format' => array(
          'format',
        ),
      ),
      'field_name' => 'field_imgly_description',
      'type' => 'text_long',
      'module' => 'text',
      'active' => '1',
      'locked' => '0',
      'cardinality' => '1',
      'deleted' => '0',
      'columns' => array(
        'value' => array(
          'type' => 'text',
          'size' => 'big',
          'not null' => FALSE,
        ),
        'format' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
      ),
      'bundles' => array(
        'node' => array(
          'imgly',
        ),
      ),
    ),
  );
}

/**
 * Helper function.
 * Returns definitions for default Imgly field instances.
 *
 * @return array
 */
function _imgly_instances() {
  return array(
    array(
      'label' => 'Image',
      'widget' => array(
        'weight' => '-4',
        'type' => 'image_image',
        'module' => 'image',
        'active' => 1,
        'settings' => array(
          'progress_indicator' => 'throbber',
          'preview_image_style' => 'thumbnail',
        ),
      ),
      'settings' => array(
        'file_directory' => 'imgly',
        'file_extensions' => 'png gif jpg jpeg',
        'max_filesize' => '',
        'max_resolution' => '',
        'min_resolution' => '',
        'alt_field' => 0,
        'title_field' => 0,
        'user_register_form' => FALSE,
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'image',
          'weight' => '0',
          'settings' => array(
            'image_style' => 'imgly',
          ),
          'module' => 'image',
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'image',
          'weight' => '0',
          'settings' => array(
            'image_style' => 'medium',
            'image_link' => 'content',
          ),
          'module' => 'image',
        ),
      ),
      'required' => 1,
      'description' => '',
      'field_name' => 'field_imgly_image',
      'entity_type' => 'node',
      'bundle' => 'imgly',
      'deleted' => '0',
    ),
    array(
      'label' => 'Description',
      'widget' => array(
        'weight' => '-3',
        'type' => 'text_textarea',
        'module' => 'text',
        'active' => 1,
        'settings' => array(
          'rows' => '3',
        ),
      ),
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'text_default',
          'weight' => '1',
          'settings' => array(),
          'module' => 'text',
        ),
        'teaser' => array(
          'label' => 'above',
          'type' => 'hidden',
          'weight' => '1',
          'settings' => array(),
        ),
      ),
      'required' => 0,
      'description' => '',
      'default_value' => NULL,
      'field_name' => 'field_imgly_description',
      'entity_type' => 'node',
      'bundle' => 'imgly',
      'deleted' => '0',
    ),
  );
}