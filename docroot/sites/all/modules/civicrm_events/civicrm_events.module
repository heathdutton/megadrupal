<?php

  /**
   * @file
   *  CiviCRM Events.
   */

  /**
   * Implements hook_help().
   */
  function civicrm_events_help($path, $arg) { 
    switch ($path) {
      case 'admin/help#civicrm_events':
      $output = '<p>' . t('Display CiviCRM Events in a Calendar.') . '</p>';
      return $output;
    }
  }

  /**
   * Implements hook_permission().
   */
  function civicrm_events_permission() {
    return array(
           'administer civicrm events' => array(
             'title' => t('Administer CiviCRM Events'),
             'description' => t('Administer CiviCRM Events'),
           ),
	   'view events calendar' => array(
             'title' => t('View Events Calendar'),
             'description' => t('View Events Calendar'),
           ),
    );
  }

  /**
   * Implements hook_menu().
   */
  function civicrm_events_menu() {
    $items = array();

    $items['events/calendar'] = array(
      'title' => 'CiviCRM Events Calendar',
      'description' => 'CiviCRM Events Calendar.',
      'page callback' => 'events_calendar',
      'access arguments' => array('view events calendar'),
    );
    
    $items['admin/config/civicrm_events/events_calendar'] = array(
      'title' => t('Events Calendar Settings'),
      'description' => t('Events Calendar Settings'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('civicrm_events_admin_settings'),
      'access arguments' => array('administer civicrm events'),
    );
    return $items;
  }


  function civicrm_events_admin_settings(){
    $form = array();
  
    if ( ! civicrm_initialize( ) ) {
      return;
    }
    require_once 'CRM/Core/OptionGroup.php';
    $eventtypes = CRM_Core_OptionGroup::values('event_type');

    // add form input element
    $form['civicrm_events_event_end_date'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show End Date'),
    '#default_value' => variable_get('civicrm_events_event_end_date', 0),
    '#description' => t('Will show the event with start and end dates on calendar.'),
    );
  
    $form['civicrm_events_event_past'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show Past Events'),
      '#default_value' => variable_get('civicrm_events_event_past', 0),
      '#description' => t('Will Show the Past events also.'),
    );
  
    $form['civicrm_events_event_months'] = array(
      '#type' => 'textfield',
      '#title' => t('Show Events from how many months from current month'),
      '#size' => 60,
      '#default_value' => variable_get('civicrm_events_event_months', 0),
      '#description' => t('Will filter the events with start date less then defined number of months from current month.'),
    );
  
    $form['civicrm_events_event_types'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Show End Date'),
      '#options' => $eventtypes,
      '#default_value' => variable_get('civicrm_events_event_types', 0),
      '#description' => t('Filter the types of event to be shown on the calendar.'),
    );

    $form['civicrm_events_event_is_public'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show Only Public Events'),
      '#default_value' => variable_get('civicrm_events_event_is_public', 0),
      '#description' => t('Filter showing  public events.'),
    );
   
    return system_settings_form($form);
  }


  /*
   * Display output
   */
  function events_calendar() {
	
    if ( ! civicrm_initialize( ) ) {
      return;
    }
  
    //get fullcalendar path.
    $fullcalendar_path = libraries_get_path('civicrm_events');
    drupal_add_js(drupal_get_path('module', 'civicrm_events') . '/js/civicrm_events.js');
    drupal_add_css(drupal_get_path('module', 'civicrm_events') . '/css/civicrm_events.css');
    drupal_add_js($fullcalendar_path. '/fullcalendar.js');		
    drupal_add_css( $fullcalendar_path. '/fullcalendar.css');
    
    $whereCondition = '';
    $eventTypes = variable_get('civicrm_events_event_types', 0);
    if($eventTypes) {
     $whereCondition .= ' AND civicrm_event.event_type_id in (' . implode(",", $eventTypes) . ')';
    }  
  
    $currentDate =  date("Y-m-d h:i:s", time());
    $pastEvents = variable_get('civicrm_events_event_past', 0);
    if(!$pastEvents) {
      $whereCondition .= " AND civicrm_event.start_date > '" .$currentDate . "'";
    }

    $monthEvents = variable_get('civicrm_events_event_months', 0);
    if($monthEvents) {
      $monthEventsDate = date("Y-m-d h:i:s",strtotime(date("Y-m-d h:i:s", strtotime($currentDate)) . "+".$monthEvents." month"));
      $whereCondition .= " AND civicrm_event.start_date < '" .$monthEventsDate . "'";
    }

    $ispublicEvents = variable_get('civicrm_events_event_is_public', 0);
    if($ispublicEvents) {
      $whereCondition .= " AND civicrm_event.is_public > '" .$ispublicEvents. "'";
    }

    $query = "SELECT `id`, `title`, `start_date` as start, `end_date`  as end FROM `civicrm_event` WHERE civicrm_event.is_active = 1 AND civicrm_event.is_template = 0";
  
    $query .= $whereCondition; 
    $events['events'] = array();
    $dao = CRM_Core_DAO::executeQuery( $query, CRM_Core_DAO::$_nullArray );
    $eventCalendarParams = array ('title' => 'title', 'start' => 'start', 'url' => 'url');
    if(variable_get('civicrm_events_event_end_date', 0)) {
      $eventCalendarParams['end'] = 'end';
    }
 
    while ( $dao->fetch( ) ) {
      if ( $dao->title ) { 
        if( isset($startDate) ) {
          $startDate = date("Y,n,j", strtotime( $dao->start_date ) );
        }
        if( isset($endDate) ) {
	  $endDate   = date("Y,n,j", strtotime( $dao->end_date ) );
        }
	$dao->url =   CRM_Utils_System::url( 'civicrm/event/info', 'id=' . $dao->id );
      }
      $eventData = array();
      foreach ($eventCalendarParams as  $k) {
	$eventData[$k] = $dao->$k; 
       }	
       $events['events'][] = $eventData;
    }

    drupal_add_js(array('civicrm_events' => $events), 'setting');
  
    return "<div id='calendar'></div>";
}

