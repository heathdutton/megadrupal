<?php

/**
 * @file
 *  The main functionality of the FreshBooks module.
 *
 * @author Guy Paddock (guy.paddock@redbottledesign.com)
 * @author Xavier L. (xavier@openconcept.ca)
 */
require_once('freshbooks.constants.inc');

/**
 * Implementation of hook_menu().
 */
function freshbooks_menu() {
  $items = array();

  $items[FRESHBOOKS_PATH_SETTINGS] = array(
    'title' => 'FreshBooks',
    'description' => 'Configure your site to integrate with FreshBooks.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('freshbooks_settings_form'),
    'access arguments' => array('administer freshbooks'),
    'file' => 'freshbooks.admin.inc',
  );

  return $items;
}

/**
 *  Implements hook_permission().
 */
function freshbooks_permission() {
  $perms = array();
  $perms['administer freshbooks'] = array(
    'title' => 'Administer FreshBooks',
    'description' => t('Configure the FreshBooks API parameters.'),
    'restrict access' => TRUE,
  );

  return $perms;
}

/**
 * Implementation of hook_init().
 *
 * This loads FreshBooks so that it is ready for use later in the request.
 */
function freshbooks_init() {
  $apiDomain = variable_get(FRESHBOOKS_VAR_DOMAIN, NULL);
  $apiToken = variable_get(FRESHBOOKS_VAR_TOKEN, NULL);

  if (!empty($apiDomain) && !empty($apiToken)) {
    _freshbooks_load($apiDomain, $apiToken);
  }
}

/**
 *  Implements hook_libraries_info().
 */
function freshbooks_libraries_info() {
  $libraries = array();
  $libraries[FRESHBOOKS_LIBRARY_NAME] = array(
    'name' => 'FreshBooks API',
    'vendor url' => 'https://github.com/rtconner/freshbooks-api',
    'download url' => 'https://github.com/rtconner/freshbooks-api',
    'version callback' => 'freshbooks_libraries_version_callback',
    'files' => array(
      'php' => array(
        'src/Freshbooks/FreshBooksApi.php',
        'src/Freshbooks/FreshBooksApiException.php',
        'src/Freshbooks/XmlDomConstruct.php',
      ),
    ),
  );
  return $libraries;
}

function freshbooks_libraries_version_callback() {
  return 'dev-master';
}

/**
 * An internal function for loading and initializing the FreshBooks API using the specified API URL and API token.
 *
 * @param $apiUrl   string The service URL for processing FreshBooks requests.
 * @param $apiToken string The unique authentication token FreshBooks assigns for authenticating requests.
 *
 * @return          bool   TRUE if the FreshBooks API has been successfully loaded.
 */
function _freshbooks_load($apiUrl, $apiToken) {
  if (!freshbooks_is_loaded()) {
    $isLoaded = ($library = libraries_load(FRESHBOOKS_LIBRARY_NAME)) && $library['loaded'] !== FALSE;
    if ($isLoaded) {
      \Freshbooks\FreshBooksApi::init($apiUrl, $apiToken);
      freshbooks_is_loaded(TRUE);
    }
  }

  return freshbooks_is_loaded();
}

/**
 * A convenience function for modules to be able to determine whether the FreshBooks API is loaded and ready to use
 * or not.
 *
 * @param   $set bool|NULL
 *          This parameter is used internally by the FreshBooks module to set the status that this function returns.
 *          Do not provide a value for this parameter in calls from your own code.
 *
 * @return  bool TRUE if the FreshBooks API is loaded and ready for use; FALSE if the API is not loaded and should not
 *          be used during the current request.
 */
function freshbooks_is_loaded($set = NULL) {
  static $isLoaded = FALSE;

  if ($set != NULL) {
    $isLoaded = $set;
  }

  return $isLoaded;
}

/**
 * Convenience function for FreshBooks-dependent modules to use to guard code that requires the FreshBooks library to
 * be loaded and configured properly before continuing.
 *
 * If FreshBooks has not been initialized, the appropriate error message will be written to the watchdog log and
 * FALSE will be returned.
 *
 * @return  bool TRUE if the FreshBooks library has been loaded and configured
 *               properly, and it is safe to use the FreshBooks API; FALSE
 *               otherwise.
 */
function freshbooks_assert_loaded() {
  static $errorRaised = FALSE;

  if (!($isLoaded = freshbooks_is_loaded())) {
    if (!$errorRaised) {
      watchdog(
        'freshbooks',
        'FreshBooks functionality is not available because the FreshBooks library has not been initialized. ' .
        'This usually indicates that the FreshBooks module has not been configured. Please check the !reports_page ' .
        'for any related errors.',
        array(
          '!reports_page' => l(t('status report page'), 'admin/reports/status'),
        ),
        WATCHDOG_CRITICAL
      );

      $errorRaised = TRUE;
    }
  }

  return $isLoaded;
}

/**
 * @param $method
 * @return \Freshbooks\FreshBooksApi|null
 */
function freshbooks_get_new_api_client($method) {
  if (freshbooks_assert_loaded()) {
    return new \Freshbooks\FreshBooksApi($method);
  }
  return NULL;
}

/**
 * Utility function for looking-up a FreshBooks client by an e-mail address.
 *
 * @param  $email string
 *         The e-mail address of the client to look-up and return.
 *
 * @return Array|NULL
 *         An array that contains the information for the client with the
 *         specified e-mail address, or NULL if no such client could be found.
 */
function freshbooks_get_client_by_email($email) {
  $client = NULL;

  if (!empty($email) && freshbooks_assert_loaded()) {
    $fb = freshbooks_get_new_api_client('client.list');
    $fb->post(array('email' => $email));
    $fb->request();

    if ($fb->success()) {
      $cl = $fb->getResponse();
      $client = $cl[0];
    }
  }

  return $client;
}

/**
 * Utility function for looking-up a FreshBooks client by user name.
 *
 * @param  $username string
 *         The user name of the client to look-up and return.
 *
 * @return Array|NULL
 *         An array that contains the information for the client with the
 *         specified username, or NULL if no such client could be found.
 */
function freshbooks_get_client_by_user_name($username) {
  $client = NULL;

  if (!empty($email) && freshbooks_assert_loaded()) {
    $fb = freshbooks_get_new_api_client('client.list');
    $fb->post(array('username' => $username));
    $fb->request();

    if ($fb->success()) {
      $cl = $fb->getResponse();
      $client = $cl[0];
    }
  }

  return $client;
}
