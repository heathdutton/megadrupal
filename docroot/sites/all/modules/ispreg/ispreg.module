<?php

/**
 * @file
 *
 * Developed by Gabor Szanto.
 *  hello@szantogabor.com
 *  http://szantogabor.com
 */

/**
 * Implements hook_action_info()
 */
function ispreg_action_info() {
  $info = array(
    'ispreg_node_generate' => array(
      'type' => 'node',
      'label' => t('Generate image derivatives of a node field.'),
      'configurable' => TRUE,
    ),
    'ispreg_user_generate' => array(
      'type' => 'user',
      'label' => t('Generate image derivatives of a user field.'),
      'configurable' => TRUE,
    ),
    'ispreg_file_generate' => array(
      'type' => 'file',
      'label' => t('Generate image derivatives of a file field.'),
      'configurable' => TRUE,
    ),
  );

  return $info;
}

/**
 * Implements hook_views_api().
 */
function ispreg_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ispreg'),
  );
}

function ispreg_node_generate($entity, $context) {
  _ispreg_generate($entity, $context);
}


function ispreg_node_generate_form() {
  return _ispreg_generate_form('node');
}

function ispreg_node_generate_submit($form, $form_state) {
  $return = _ispreg_generate_form_submit($form, $form_state);
  $return['bundle_key'] = 'type';
  return $return;
}

function ispreg_user_generate($entity, $context) {
  _ispreg_generate($entity, $context);
}


function ispreg_user_generate_form() {
  return _ispreg_generate_form('user');
}

function ispreg_user_generate_submit($form, $form_state) {
  $return = _ispreg_generate_form_submit($form, $form_state);
  $return['bundle_key'] = 'user';
  return $return;
}

function ispreg_file_generate($entity, $context) {
  _ispreg_generate($entity, $context);
}


function ispreg_file_generate_form() {
  return _ispreg_generate_form('file');
}

function ispreg_file_generate_submit($form, $form_state) {
  $return = _ispreg_generate_form_submit($form, $form_state);
  $return['bundle_key'] = 'type';
  return $return;
}

/**
 * Helper function to wrap
 *
 * @param $entity
 * @param $context
 */
function _ispreg_generate($entity, $context) {
  $entity_info = entity_get_info($context['entity_type']);
  $bundle_key = $context['bundle_key'];
  foreach ($context['fields'] as $key => $field) {
    $explode = explode('-|-', $field);
    $bundle_name = $explode[0];
    $field_name = $explode[1];
    if (isset($entity->$bundle_key) && $entity->$bundle_key == $bundle_name && isset($entity->$field_name)) {
      if ($files = field_get_items($context['entity_type'], $entity, $field_name)) {
        foreach ($files as $file) {
          if ($file_loaded = file_load($file['fid'])) {
            if ($file_loaded->type == 'image') {
              foreach ($context['image_style'] as $style_name) {
                $original_path = file_uri_target($file_loaded->uri);
                $style_path = image_style_path($style_name, $file_loaded->uri);
                if ($context['sleep'] != '') {
                  sleep((int)$context['sleep'] / 1000);
                }
                if (!file_exists($style_path)) {
                  image_style_create_derivative(image_style_load($style_name), $file_loaded->uri, $style_path);
                }
              }
            }
          }
        }
      };
    }
  }
}

/**
 * Helper function to generate a default form array, which is used in every
 * action type.
 */
function _ispreg_generate_form($entity_key = 'node') {
  $instances = field_info_instances($entity_key);
  $allowed_types = _ispreg_get_allowed_widget_types();
  $fields_options = array();
  foreach ($instances as $bundle_name => $instance) {
    foreach ($instance as $field) {
      if (in_array($field['widget']['type'], $allowed_types)) {
        $key = $bundle_name . '-|-' . $field['field_name'];
        $fields_options[$key] = $field['label'] . ' (' . $bundle_name . ')';
      }
    }
  }

  $form = array(
    'image_style' => array(
      '#type' => 'checkboxes',
      '#title' => t('Image style'),
      '#description' => t('Choose, which image styles will be generated.'),
      '#options' => _ispreg_images_style_list(),
    ),
    'fields' => array(
      '#type' => 'checkboxes',
      '#title' => t('Fields'),
      '#description' => t('Choose, which fields will be processed. Based on exposed filter of this view, not sure, that all of checked item will be processed!'),
      '#options' => $fields_options,
    ),
    'sleep' => array(
      '#type' => 'textfield',
      '#title' => t('Sleep'),
      '#description' => t('Sleep between two process. (ms)'),
    )
  );

  return $form;
}

/**
 * Helper function to build a usual return array passed to the context.
 *
 * @param $form
 * @param $form_state
 */
function  _ispreg_generate_form_submit($form, $form_state) {
  $return = array();

  foreach ($form_state['values']['image_style'] as $style) {
    if ($style) {
      $return['image_style'][] = $style;
    }
  }

  foreach ($form_state['values']['fields'] as $field) {
    if ($field) {
      $return['fields'][] = $field;
    }
  }

  $return['sleep'] = $form_state['values']['sleep'];

  return $return;
}

/**
 * Prepare an assoicative array keyed by style names, and value is the style
 * name too. It is used as form element values.
 *
 * @return array
 *
 */
function _ispreg_images_style_list() {
  $image_styles = array();
  foreach (image_styles() as $name => $settings) {
    $image_styles[$name] = $name;
  }
  return $image_styles;
}

/**
 * @param $entity
 *
 * @return array
 */
function _ispreg_get_allowed_widget_types($entity = NULL) {
  $allowed = array(
    'image_image',
    'file_file',
    'media_generic',
    'file_generic',
  );

  drupal_alter($allowed, $entity);

  return $allowed;
}
