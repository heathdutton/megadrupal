<?php
/**
 * @file
 * Apachesolr biblio implementation.
 */

/**
 * Implements hook_menu().
 */
function apachesolr_biblio_menu() {
  $items                                          = array();
  $items['admin/config/search/apachesolr/biblio'] = array(
    'title' => 'Biblio',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('apachesolr_biblio_fields_form'),
    'access arguments' => array('administer biblio'),
    'file' => 'apachesolr_biblio.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function apachesolr_biblio_theme() {
  return array(
    'apachesolr_biblio_fields_form' => array(
      'render element' => 'element',
      'file' => 'apachesolr_biblio.admin.inc',
    ),
  );
}

/**
 * Returns raw apachesolr_biblio_fields configuration.
 *
 * @return array
 *   Biblio fields settings as saved in database.
 */
function _apachesolr_biblio_get_raw_fields() {
  // Get all of the field info.
  $fields = array();
  $result = db_query("SELECT bf.fid, bf.name, bf.type, bftd.title, bft.weight
                      FROM {biblio_fields} AS bf
                      INNER JOIN {biblio_field_type} AS bft ON bft.fid = bf.fid
                      INNER JOIN {biblio_field_type_data} AS bftd ON bftd.ftdid = bft.ftdid
                      ORDER BY bft.weight ASC");
  foreach ($result as $row) {
    $fields[$row->fid] = (array) $row;
  }

  return $fields;
}

/**
 * Returns apachesolr_biblio_fields in solr format.
 *
 * @return array
 *   Biblio fields settings in solr format.
 */
function _apachesolr_biblio_get_fields() {
  // Load settings from variable table.
  $apachesolr_biblio_index = array();
  $fields                  = _apachesolr_biblio_get_raw_fields();
  foreach ($fields as $field) {
    $apachesolr_biblio_index_field_settings = json_decode((variable_get('apachesolr_biblio_index_' . $field['name'])));
    if ($apachesolr_biblio_index_field_settings) {
      $apachesolr_biblio_index[$field['name']] = $apachesolr_biblio_index_field_settings;
    }
  }

  // Reset fields array and parse settings.
  $fields = array();
  foreach ($apachesolr_biblio_index as $row) {
    $fields[$row->fid] = (array) $row;

    // Support for multiple index-keys per row.
    $solr_keys = array();

    // String / Text / Date.
    if ($row->index_type == 'string') {
      $solr_keys[0] = 's';
      $solr_keys[1] = 't';
    }
    if ($row->index_type == 'text') {
      $solr_keys[0] = 't';
    }
    elseif ($row->index_type == 'date') {
      $solr_keys[0] = 'd';
    }

    // Single / Multiple.
    if ($row->multiple) {
      foreach ($solr_keys as &$key) {
        $key .= 'm';
      }
    }
    else {
      foreach ($solr_keys as &$key) {
        $key .= 's';
      }
    }

    // Name.
    foreach ($solr_keys as &$key) {
      $key .= '_' . $row->name;
    }
    $row->solr_keys = $solr_keys;

    $fields[$row->fid] = (array) $row;
  }
  $fields['contributors'] = variable_get('apachesolr_biblio_index_authors', 1);

  return $fields;
}

/**
 * Implements hook_facetapi_facet_info().
 *
 * Expose indexed biblio fields to facetapi.
 */
function apachesolr_biblio_facetapi_facet_info($searcher_info) {
  module_load_include('inc', 'apachesolr_biblio', 'apachesolr_biblio.facets');
  $facets = apachesolr_biblio_apachesolr_facets();

  return $facets;
}

/**
 * Implements hook_apachesolr_index_document_build_ENTITY_TYPE().
 *
 * Build the documents before sending them to Solr.
 */
function apachesolr_biblio_apachesolr_index_document_build_node(ApacheSolrDocument $document, $entity, $env_id) {

  // Act only on biblio nodes.
  if ($entity->type == 'biblio') {

    // Title.
    $title = $entity->title;
    if (!empty($title)) {
      $document->setMultiValue('sm_biblio_title', $title);
      $document->setMultiValue('tm_biblio_title', strtolower($title));
    }

    // Contributors.
    if (variable_get('apachesolr_biblio_index_authors') == 1) {
      foreach ($entity->biblio_contributors as $contributor) {
        if (!empty($contributor['name'])) {
          $document->setMultiValue('sm_biblio_contributors', $contributor['name']);
          $document->setMultiValue('tm_biblio_contributors', strtolower($contributor['name']));
        }
      }
    }

    // Get field settings from apachesolr_biblio.
    $apachesolr_biblio_fields = _apachesolr_biblio_get_fields();

    // Loop through field settings.
    foreach ($apachesolr_biblio_fields as $field) {
      // Only act when 'indexed' is TRUE.
      if ($field['indexed']) {
        // Get solr_keys.
        $solr_keys = $field['solr_keys'];
        // Get value from $entity.
        $value = $entity->$field['name'];

        foreach ($solr_keys as $solr_key) {
          // STRING / TEXT.
          if ($field['index_type'] == 'string' || $field['index_type'] == 'text') {
            // Single value fields.
            if (!$field['multiple'] && is_string($value) && !empty($value)) {
              if ($field['index_type'] == 'string') {
                $document->setMultiValue($solr_key, $value);
              }
              else {
                $document->setMultiValue($solr_key, strtolower($value));
              }
            }
            // Multivalue fields.
            elseif ($field['multiple'] && is_array($value)) {
              foreach ($value as $single_value) {
                if (!empty($single_value)) {
                  if ($field['index_type'] == 'string') {
                    $document->setMultiValue($solr_key, $single_value);
                  }
                  else {
                    $document->setMultiValue($solr_key, strtolower($single_value));
                  }
                }
              }
            }
          }
          // End of STRING / TEXT.

          // DATE.
          if ($field['index_type'] == 'date') {
            if (!empty($value)) {
              module_load_include('inc', 'apachesolr_biblio', 'apachesolr_biblio.date');
              // Note: this function will always return an array.
              $value = apachesolr_biblio_format_date_value($value);

              // Single value fields.
              if (!$field['multiple'] && is_array($value) && !empty($value)) {
                $document->setMultiValue($solr_key, current($value));
              }
              // Multivalue fields.
              elseif ($field['multiple'] && is_array($value) && !empty($value)) {
                foreach ($value as $single_value) {
                  $document->setMultiValue($solr_key, current($single_value));
                }
              }
            }
          }
          // End of DATE.
        }
        // end foreach $solr_key.
      }
    }
  }
}

/**
 * Implements hook_apachesolr_query_prepare().
 *
 * Add sortable fields to apachesolr_query.
 */
function apachesolr_biblio_apachesolr_query_prepare($query) {
  // Get field settings from apachesolr_biblio.
  $apachesolr_biblio_fields = _apachesolr_biblio_get_fields();

  // Loop through field settings.
  foreach ($apachesolr_biblio_fields as $field) {

    // Only act when 'indexed' and 'sorting are TRUE.
    if ($field['indexed'] && $field['sortable']) {

      // Get solr_key.
      $solr_keys = $field['solr_keys'];

      foreach ($solr_keys as $solr_key) {
        // Get title from bibio field.
        $title = db_query('SELECT bftd.title FROM {biblio_field_type_data} bftd WHERE bftd.ftdid = :fid', array(':fid' => $field['fid']))->fetchField();

        // Add sorter to query.
        $query->setAvailableSort($solr_key, array(
          'title' => t("@title", array('@title' => $title)),
          'default' => 'desc',
        ));
      }
      // end foreach $solr_key.
    }
  }
}
