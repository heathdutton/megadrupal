<?php
/**
 * @file
 * Version Control / Project Node integration - Integrates project nodes
 * (provided by the Project module) with version control systems supported
 * by the Version Control API.
 *
 * Copyright 2006 by Karthik ("Zen", http://drupal.org/user/21209)
 * Copyright 2006, 2007, 2009 by Derek Wright ("dww", http://drupal.org/user/46549)
 * Copyright 2007, 2009 by Jakob Petsovits ("jpetso", http://drupal.org/user/56020)
 */

/**
 * Implements hook_schema().
 */
function versioncontrol_project_schema() {
  $schema['versioncontrol_project_projects'] = array(
    'description' => 'This table associates a project (given as node id) with a directory location in a version controlled repository.',
    'fields' => array(
      'nid' => array(
        'description' => 'The {node}.nid identifier of the project node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'repo_id' => array(
        'description' => 'The {versioncontrol_repositories}.repo_id identifier of the repository where the project directory is located.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid'),
    'indexes' => array(
      'repo_id' => array('repo_id'),
    ),
  );
  $schema['versioncontrol_project_maintainers_block_cache'] = array(
    'description' => 'Cache for Versioncontrol-specific blocks that cannot rely on the normal block cache.',
    'fields' => array(
      'cid' => array(
        'description' => 'Primary Key: Unique cache ID.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'data' => array(
        'description' => 'A collection of data to cache.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
      ),
    ),
    'primary key' => array('cid'),
  );

  return $schema;
}

/**
 * Implements hook_enable().
 */
function versioncontrol_project_enable() {
  require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'versioncontrol_project') . '/versioncontrol_project.module';

  // Check to make sure all existing projects are entered in the
  // {versioncontrol_project_projects} table, and add if not.
  $vc_projects = array();
  $projects = array();
  $current_vc_projects = db_query("SELECT nid FROM {versioncontrol_project_projects}");
  foreach ($current_vc_projects as $vc_project) {
    $vc_projects[] = $vc_project->nid;
  }
  $projects = db_query("SELECT nid FROM {node} WHERE type IN (:types)", array(':types' => project_project_node_types()));
  while ($project = $projects->fetchAssoc()) {
    if (!in_array($project['nid'], $vc_projects)) {
      versioncontrol_project_set_project($project['nid'], 0);
    }
  }
}

/**
 * Implements hook_update_N().
 *
 * Add an index to {versioncontrol_project_projects}.repo_id
 */
function versioncontrol_project_update_6200(&$sandbox) {
  db_add_index('versioncontrol_project_projects', 'repo_id', array('repo_id'));

  return t('TODO Add a descriptive string here to show in the UI.');
}
