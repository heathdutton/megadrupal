<?php

/**
 * @file
 * Provides additional Git-specific integration between the Version Control API
 * suite and the Project suite.
 */

/**
 * Implements hook_menu().
 */
function versioncontrol_project_git_menu() {
  $items['node/%project/edit/default-branch'] = array(
    'title' => 'Default branch',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('versioncontrol_project_git_default_branch_form', 1),
    'access callback' => 'versioncontrol_project_git_default_branch_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'file' => 'versioncontrol_project_git.pages.inc',
  );

  return $items;
}

/**
 * Access callback: Checks for a user's access to a valid Git repository.
 *
 * Path: node/%project_node/edit/default-branch
 *
 * @param $project
 *   The project object that should have an attached repository.
 *
 * @return
 *   TRUE if the project has an attached Git repository with at least one
 *   branch that the user has write access to, FALSE otherwise.
 *
 * @see versioncontrol_project_git_menu()
 */
function versioncontrol_project_git_default_branch_access($project) {
  // Display only on nodes that have a repository attached.
  if (empty($project->versioncontrol_project)) {
    return FALSE;
  }

  // Ensure it is a Git repository.
  $repo = $project->versioncontrol_project['repo'];
  if (!$repo instanceof VersioncontrolGitRepository) {
    return FALSE;
  }

  // Ensure at least one branch exists.
  if (!count($repo->loadBranches())) {
    return FALSE;
  }

  // Check the permissions.
  return project_user_access($project, 'write to vcs');
}

/**
 * Implements hook_versioncontrol_code_arrival().
 *
 * This will fit better on a versioncontrol_project_release_git module
 * if it is created sometime in the future.
 */
function versioncontrol_project_git_versioncontrol_code_arrival(VersioncontrolRepository $repository, VersioncontrolEvent $event) {
  if (!module_exists('project_release')) {
    // Nothing to do.
    return;
  }
  if (!isset($repository->project_nid)) {
    // No project associated.
    return;
  }
  if ($repository->vcs != 'git') {
    // Not the right backend.
  }
  if (!$project_node = project_load($repository->project_nid)) {
    // Not a valid project node.
    return;
  }

  // Queue release packaging if needed.
  $queue_rebuild = FALSE;
  foreach ($event->refs as $updated_ref) {
    if ($updated_ref->reftype == VERSIONCONTROL_GIT_REFTYPE_BRANCH) {
      // Only support branch autorebuilds.
      // @todo This could probably be an option.
      $queue_rebuild = TRUE;
    }
  }
  if ($queue_rebuild) {
    $queue = DrupalQueue::get('project_release_package');
    $queue->createItem(array(
      'project' => $project_node->nid,
      'type' => 'branch',
    ));
  }
}

/**
 * Implements hook_views_api().
 */
function versioncontrol_project_git_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'versioncontrol_project_git') . '/views',
  );
}
