<?php

/**
 * @file
 * Module provides goals for donations/purchases in for Drupal Commerce.
 */

/**
 * Implements hook_menu().
 */
function commerce_goal_menu() {
  $items = array();

  $items['admin/commerce/config/goal'] = array(
    'title' => 'Goals',
    'description' => 'Configure goal related settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_goal_admin_form'),
    'access arguments' => array('configure store'),
    'file' => 'commerce_goal.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_field_formatter_info().
 */
function commerce_goal_field_formatter_info() {
  return array(
    'commerce_goal_progress' => array(
      'label' => t('Commerce Goal Progress Bar'),
      'field types' => array('commerce_price'),
      'settings' => array(
        'commerce_goal_products_field' => array(),
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function commerce_goal_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $settings = $instance['display'][$view_mode]['settings'];

  $element = array();

  // Build list of all commerce product reference fields on this bundle.
  $product_ref_fields = array('0' => t('None'));

  $possible_fields = array();
  if (!empty($instance['entity_type']) && $instance['entity_type'] != 'ctools' && !empty($instance['bundle']) && $instance['bundle'] != 'ctools') {
    // We're on the content type manage display page.
    $bundle_fields = field_info_instances($instance['entity_type'], $instance['bundle']);
    foreach ($bundle_fields as $bundle_field) {
      $possible_fields[$bundle_field['field_name']] = $bundle_field;
    }
  }
  elseif (!empty($field['bundles'])) {
    // We're in a view (with fields) or a panel or something.
    // Let's list all the possible fields from all entity types and bundles
    // this field is on.
    foreach ($field['bundles'] as $entity_type => $bundles) {
      foreach ($bundles as $bundle) {
        $bundle_fields = field_info_instances($entity_type, $bundle);
        foreach ($bundle_fields as $bundle_field) {
          $possible_fields[$bundle_field['field_name']] = $bundle_field;
        }
      }
    }
  }

  // Get the fields that are product references in select options format
  foreach ($possible_fields as $bundle_field) {
    $bundle_field_info = field_info_field($bundle_field['field_name']);
    if ($bundle_field_info['type'] == 'commerce_product_reference') {
      $product_ref_fields[$bundle_field_info['field_name']] =
        t('@field_label (@field_name)', array(
          '@field_label' => $possible_fields[$bundle_field_info['field_name']]['label'],
          '@field_name' => $bundle_field_info['field_name'])
        );
    }
  }
  $element['commerce_goal_products_field'] = array(
    '#type'           => 'select',
    '#title'          => t('Products Contributing to Goal'),
    '#description'    => t('Specify the product reference field holding the products that contribute to this goal.'),
    '#default_value'  => $settings['commerce_goal_products_field'],
    '#options'        => $product_ref_fields,
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function commerce_goal_field_formatter_settings_summary($field, $instance, $view_mode) {
  $settings = $instance['display'][$view_mode]['settings'];
  if (!empty($settings['commerce_goal_products_field'])) {
    $bundle_fields = field_info_instances($instance['entity_type'], $instance['bundle']);
    $field_label = $bundle_fields[$settings['commerce_goal_products_field']]['label'];
  }
  else {
    $field_label = t('None');
  }
  $summary = t('Product Reference Field: @field_label', array('@field_label' => $field_label));
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function commerce_goal_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  foreach ($items as $delta => $item) {
    // Get all line items for completed orders that contain this product
    // Convert the currency type (if necessary) and add them up.
    $converted_total = 0;
    if (!empty($settings['commerce_goal_products_field'])) {
      $entity_wrapper = entity_metadata_wrapper($entity_type, $entity);
      $products = $entity_wrapper->{$settings['commerce_goal_products_field']}->raw();
      if (!is_array($products)) {
        $products = array($products);
      }
      if (!empty($products)) {
        $result = commerce_goal_get_total_for_products($products);
        foreach ($result as $record) {
          $converted_total += commerce_currency_convert($record->total, $record->commerce_total_currency_code, $item['currency_code']);
        }
      }
    }

    $element[$delta] = array(
      '#theme' => 'commerce_goal_formatter_progress_bar',
      '#element' => $item,
      '#current_total' => $converted_total,
    );
  }
  return $element;
}

function commerce_goal_get_total_for_products($products) {
  // Query for line items in completed orders that are for these products.
  // Sum them up and return them grouped by currency, so they can be converted
  // if necessary.
  $valid_statuses = variable_get('commerce_goal_order_statuses', commerce_goal_get_default_order_statuses());

  $query = db_select('commerce_line_item', 'cli');

  $query->join('commerce_order', 'co', 'cli.order_id = co.order_id');
  $query->join('commerce_product', 'cp', 'cli.line_item_label = cp.sku');
  $query->join('field_data_commerce_total', 'fdct', 'cli.line_item_id = fdct.entity_id');

  $query->fields('cli', array('line_item_id', 'order_id'));
  $query->fields('co', array('status'));
  $query->fields('cp', array('product_id'));
  $query->addExpression('SUM(fdct.commerce_total_amount)', 'total');
  $query->fields('fdct', array('commerce_total_currency_code'));

  $query->condition('cp.product_id', $products, 'IN');
  $query->condition('fdct.entity_type', 'commerce_line_item');
  $query->condition('co.status', $valid_statuses, 'IN');

  $query->groupBy('fdct.commerce_total_currency_code');

  return $query->execute();
}

/**
 * Implements hook_theme().
 */
function commerce_goal_theme() {
  return array(
    'commerce_goal_formatter_progress_bar' => array(
      'variables' => array('element' => NULL, 'current_total' => NULL),
      'template' => 'commerce-goal-formatter-progress-bar',
    ),
  );
}

/*
 * Preprocess function for commerce_goal_formatter_progress_bar
 */
function template_preprocess_commerce_goal_formatter_progress_bar(&$variables) {
  drupal_add_css(drupal_get_path('module', 'commerce_goal') . '/commerce_goal.css');

  $goal = !empty($variables['element']['amount']) ? $variables['element']['amount'] : 0;

  if (!empty($goal)) {
    $variables['goal'] = $goal;
    $variables['current_percent'] = round(($variables['current_total'] / $goal) * 100);
    if ($variables['current_percent'] > 100) {
      $variables['current_percent'] = 100;
    }
    $variables['remaining'] = $goal - $variables['current_total'];
  }
  else {
    $variables['goal'] = $goal;
    $variables['current_percent'] = 0;
    $variables['remaining'] = 0;
  }

  $variables['current_total_formatted'] = commerce_currency_format($variables['current_total'], $variables['element']['currency_code']);
  $variables['goal_formatted'] = commerce_currency_format($variables['element']['amount'], $variables['element']['currency_code']);
  $variables['remaining_formatted'] = commerce_currency_format($variables['remaining'], $variables['element']['currency_code']);
}

/**
 * @return array
 *   Default statuses of Commerce Orders that should be count toward goal.
 */
function commerce_goal_get_default_order_statuses() {
  return array('pending', 'processing', 'completed');
}
