<?php

/**
 * @file
 * The Restrict Page by IP module controls access to a page based on IPs.
 */

/**
 * Implements hook_menu().
 */
function restrict_page_ip_menu() {
  $items['admin/config/people/restrict_page_ip'] = array(
    'title' => 'Restrict Page by IP',
    'description' => 'Set the list of IP addresses that will allow or '
    . 'disallow to access the listed pages',
    'page callback' => 'restrict_page_ip_settings',
    'access arguments' => array('administer restrict page by ip'),
    'file' => 'restrict_page_ip.admin.inc',
  );
  $items['admin/config/people/restrict_page_ip/add'] = array(
    'title' => 'Add IP',
    'page callback' => 'restrict_page_ip_edit_form',
    'access arguments' => array('administer restrict page by ip'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'restrict_page_ip.admin.inc',
  );
  $items['admin/config/people/restrict_page_ip/%restrict_page_ip/edit'] = array(
    'title' => 'Edit Page Access Control',
    'page callback' => 'restrict_page_ip_edit_form',
    'page arguments' => array(4),
    'access arguments' => array('administer restrict page by ip'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'restrict_page_ip.admin.inc',
  );
  $items['admin/config/people/restrict_page_ip/%restrict_page_ip/delete'] = array(
    'title' => 'Delete Page Access Control',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('restrict_page_ip_delete_confirm', 4),
    'access arguments' => array('administer restrict page by ip'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'restrict_page_ip.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function restrict_page_ip_permission() {
  return array(
    'administer restrict page by ip' => array(
      'title' => 'Administer Restrict Page by IP',
      'description' => t('Allows the administrator to set IP addresses for allowing or restricting to access pages'),
    ),
  );
}

/**
 * Implements hook_boot().
 */
function restrict_page_ip_boot() {
  drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
  global $user;
  $curr_ip = ip_address();
  $curr_path = current_path();
  $router_item = menu_get_item($curr_path);
  if ($user->uid != 1 && $router_item['access']) {
    /*
     * Skip super admin (user id 1) from this restrictrions AND
     * user must have access to the page, ifelse drupal will handle this access
     * restrictions.
     */

    if ($matches = db_query("SELECT ips, access_control FROM {restrict_page_ip} WHERE :curr_path REGEXP pattern", array(':curr_path' => $curr_path))->fetchAll()) {
      foreach ($matches as $rule) {
        $ip_addresses = explode(PHP_EOL, trim($rule->ips));
        if (($rule->access_control == 1 && !restrict_page_ip_in_ip($curr_ip, $ip_addresses)) ||
            ($rule->access_control == 2 && restrict_page_ip_in_ip($curr_ip, $ip_addresses))) {
          watchdog('restrict page ip', 'The ip "%ip" is denied to access page "%page"', array('%ip' => $curr_ip, '%page' => $curr_path), WATCHDOG_WARNING);
          // Redirect to the Access Denied page if current IP is not allowed
          // to access the page.
          $denied_text = variable_get('restrict_page_ip_message', t('Your IP [restrict_page_ip:ip] is not authorized to access the page [restrict_page_ip:page].
Please contact site administrator, if you need privileges to access the page [restrict_page_ip:page].
Sorry for the inconvinence.'));
          $variables = array('page' => $curr_path, 'ip' => $curr_ip);
          $denied_text = token_replace($denied_text, $variables);
          drupal_set_message(check_markup(nl2br($denied_text), 'filtered_html'), 'error');
          drupal_access_denied();
          drupal_exit();
        }
      }
    }
  }
}

/**
 * To Check whether the current user IP is present in the list or range of ips.
 *
 * @param string $ip
 *   The user ip address.
 * @param array $ip_ranges
 *   The ranges of ips.
 *
 * @return boolean $ip
 *   Returns TRUE if the ip($ip) is found on the range of given ips($ip_ranges)
 *   or FALSE if not found.
 */
function restrict_page_ip_in_ip($ip, $ip_ranges = array()) {
  $curr_ip = sprintf('%u', ip2long(trim($ip)));
  foreach ($ip_ranges as $ip_range) {
    if (strpos($ip_range, '-') !== FALSE) {
      $range_ips['range'][] = trim($ip_range);
    }
    else {
      $range_ips['single'][] = sprintf('%u', ip2long(trim($ip_range)));
    }
  }

  if (isset($range_ips['single']) && in_array($curr_ip, $range_ips['single'])) {
    return TRUE;
  }
  elseif (isset($range_ips['range'])) {
    // Compares with range of IPs.
    foreach ($range_ips['range'] as $range_ip) {
      $range_ip_array = explode('-', $range_ip);
      // Separating start and end IPs of the range from
      // the format AAA.BBB.CCC.XXX-AAA.BBB.CCC.YYY.
      $ip_min = sprintf('%u', ip2long(trim($range_ip_array[0])));
      $ip_max = sprintf('%u', ip2long(trim($range_ip_array[1])));
      // Checks wheteher the IP falls on the given range.
      if ($curr_ip >= $ip_min && $curr_ip <= $ip_max) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Loads a page control object from the database.
 *
 * @param int $restrict_page_ip
 *   The page control ID.
 *
 * @return object
 *   A fully-populated page control object.
 */
function restrict_page_ip_load($restrict_page_ip) {
  return db_select('restrict_page_ip', 'rpi')
    ->fields('rpi')
    ->condition('id', $restrict_page_ip, '=')
    ->execute()
    ->fetchObject();
}
