<?php

/**
 * @file
 * This field is designed to save confidential settings (INI style) such database access info or 
 * credit card info, which could be saved as encrypted text in the database.
 * The module also provides INI parsing function.
 */


/**
 * Implements hook_help().
 */
function encset_help($path, $arg) {
  switch ($path) {
    case 'admin/help#encset':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("This module allows encryption for settings field to save credential info into database.") . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_info().
 */
function encset_field_info() {
  return array(
    'encset' => array(
      'label' => t('Encrypted settings'),
      'description' => t('The field supports encryption for settings.'),
      'settings' => array(
        // make the instance setting so that it can't be changed once created.
        'encryption' => 'none', // could be 'base64' or 'mcrypt'
        'usage' => 'free', // could be 'ini', and others
      ),
      'default_widget' => 'encset_textarea',
      'default_formatter' => 'encset_plain_text',
    ),
  );
}


/**
 * Implements hook_field_is_empty().
 */
function encset_field_is_empty($item, $field) {
  if (!isset($item['value']) || $item['value'] === '') {
    return TRUE;
  }
  else {
    return FALSE;
  }
}


/**
 * Implements hook_field_settings_form().
 */
function encset_field_settings_form($field, $instance, $has_data) {
  $form = array();
  
  if ($field['type'] == 'encset') {
    $form['encryption'] = array(
      '#type' => 'select',
      '#title' => t('Choose encryption method:'),
      '#default_value' => $field['settings']['encryption'],
      '#required' => TRUE,
      '#description' => t('The encryption methods: none, obfuscate(base64), or mcrypt'),
      '#options' => array(
        'none' => t('None'),
        'base64' => t('Base64 (simple obfuscation)'),
        'mcrypt' => t('Mcrypt (encryption; requires PHP mcrypt module)'),
      ),
      '#element_validate' => array('_encset_mcrypt_validate'),
      '#disabled' => $has_data,
    );
    
    $form['usage'] = array(
      '#type' => 'select',
      '#title' => t('Choose how this field is used and validated'),
      '#default_value' => $field['settings']['usage'],
      '#required' => TRUE,
      '#description' => t('The option here decides how the field is validated for user input.'),
      '#options' => array(
        'free' => t('Free text (no validation)'),
        'ini' => t('INI settings (user input needs to be valid INI format)'),
      ),
      '#disabled' => $has_data,
    );
  }
  
  return $form;
}

/**
 * Validate whether mcrypt library is installed.
 */
function _encset_mcrypt_validate($element, &$form_state) {
  if (!function_exists('mcrypt_ecb')) {
    form_error($element, t('Mcrypt library not installed. Please install it first before using the Mcrypt option.'));
  }
  else { 
    global $mcrypt_secret_key;
    if (!isset($mcrypt_secret_key)) {
      drupal_set_message(t('Please set $mcrypt_secret_key in settings.php to encrypt the settings field. Otherwise the encryption will be unsecure.'), 'warning');
    }
  }
}


/**
 * Implements hook_field_instance_settings_form().
 */
/*function encset_field_instance_settings_form($field, $instance) {  
  $form = array();
  
  if ($field['type'] == 'encset') {
    $form['template'] = array(
      '#type' => 'textarea',
      '#title' => t('Template'),
      '#description' => t('Template for this plain text field. Could be an example INI settings.'),
      '#default_value' => $instance['settings']['template'],
      //'#rows' => 5,
    );
  }

  return $form;
}*/
 

/**
 * Implements hook_field_validate().
 */
function encset_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  if ($field['type'] == 'encset') {
    switch ($field['settings']['usage']) {
      case 'free':
        // do nothing
        break;
      case 'ini':
        _encset_check_version();
        foreach ($items as $delta => $item) {
          if (!empty($item['value']) && parse_ini_string($item['value']) == FALSE) {
              $errors[$field['field_name']][$langcode][$delta][] = array(
                'error' => 'encset_ini_invalid',
                'message' => t('The field needs to follow the INI format.'),
              );
          }
        }
        break;
    }
  }
}



/**
 * Implements hook_field_widget_info().
 */
function encset_field_widget_info() {
  return array(
    'encset_textarea' => array(
      'label' => t('Default'),
      'description' => t('Multi-lines text area to allow user input.'),
      'field types' => array('encset'),
      //'settings' => array('rows' => 5), // to simplify things, we don't allow rows setting.
    ),
  );
}


/**
 * Implements hook_field_widget_settings_form().
 */
/*function encset_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if ($widget['type'] == 'encset_textarea') {
    $form['rows'] = array(
      '#type' => 'textfield',
      '#title' => t('Rows'),
      '#default_value' => $settings['rows'],
      '#required' => TRUE,
      '#element_validate' => array('_element_validate_integer_positive'),
    );
  }

  return $form;
}*/


/**
 * Implements hook_field_widget_form().
 */
function encset_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $base = $element;
  
  if ($instance['widget']['type'] == 'encset_textarea') {
    //$template = $instance['settings']['template'];
    $element['value'] = array(
      '#type' => 'textarea',
      //'#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : $template,
      '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : '',
      //'#rows' => $instance['widget']['settings']['rows'],
      //'#attributes' => array('class' => array('text-full')),
    ) + $base;
  }
  
  return $element;
}


/**
 * Implements hook_field_presave().
 */
function encset_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $encryption = $field['settings']['encryption'];
  switch ($encryption) {
    case 'none':
      break;  // if no enryption, do nothing here.
      
    case 'base64':
      foreach ($items as $delta => $item) {
        // can't use $item['value']=..., because that is not the referenced $items.
        $items[$delta]['value'] = base64_encode($item['value']);
      }
      break;
      
    case 'mcrypt':
      foreach ($items as $delta => $item) {
        // encryption
        $items[$delta]['value'] = encset_encrypt($item['value']);
      }
      break;
  }
}


/**
 * Implements hook_field_load().
 */
function encset_field_load($entity_type, $entities, $field, $instances, $langcode, &$items) {
  $encryption = $field['settings']['encryption'];
  switch ($encryption) {
    case 'none':
      break;  // if no enryption, do nothing here.
      
    case 'base64':
      foreach ($entities as $id => $entity) {
        foreach ($items[$id] as $delta => $item) {
          $items[$id][$delta]['value'] = base64_decode($item['value']);
        }
      }
      break;
      
    case 'mcrypt':
      foreach ($entities as $id => $entity) {
        foreach ($items[$id] as $delta => $item) {
          // decryption
          $items[$id][$delta]['value'] = encset_decrypt($item['value']);
        }
      }
      break;
  }
  
}


/**
 * Implements hook_field_formatter_info().
 */
function encset_field_formatter_info() {
  return array(
    'encset_plain_text' => array(
      'label' => t('Default'),
      'field types' => array('encset'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function encset_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  if ($display['type'] == 'encset_plain_text') {
      foreach ($items as $delta => $item) {
        // just display the row text here.
        $element[$delta] = array(
          //'#markup' => check_plain($item['value'])
          '#type' => 'textarea',
          '#value' => $item['value'],
          '#attributes' => array('disabled'=>TRUE),  // don't know why can't use '#disabled'=>TRUE, but only this way works.
        );
      }
  }
  return $element;
}

/**
 * Retrieve secret key.
 */
function _encset_get_secret_key() {
  // TODO: should not limit to length=6 key.
  global $drupal_hash_salt;
  global $mcrypt_secret_key;
  $secret_key = isset($mcrypt_secret_key) ? $mcrypt_secret_key : 
      (isset($drupal_hash_salt) ? substr($drupal_hash_salt, 0, 6) : 'secret_key');
  return $secret_key;
}

/**
 * Encrypt the $text
 * @param $text
 */
function encset_encrypt($text) {
  $secret_key = _encset_get_secret_key();
  $encrypted = mcrypt_encrypt(MCRYPT_3DES, $secret_key, $text, 'ecb');
  // need to encode in base64 to save to database.
  return base64_encode($encrypted);
}

/**
 * Decrypt the $text
 * @param unknown_type $text
 */
function encset_decrypt($text) {
  $secret_key = _encset_get_secret_key();
  // decode base64
  $text = base64_decode($text);
  $decrypted = mcrypt_decrypt(MCRYPT_3DES, $secret_key, $text, 'ecb');
  // remove padding
  return rtrim($decrypted, "\0");
}


/**
 * Read INI settings
 */
function encset_ini_get($field, $key, $default) {
  if (empty($field)) {
    return $default;
  }
  $field_value = $field[LANGUAGE_NONE][0]['value'];
  _encset_check_version();
  $ini = parse_ini_string($field_value);
  if (isset($ini[$key])) {
    return $ini[$key];
  }
  else {
    return $default;
  }
}


function encset_parse_ini($field) {
  return new EncsetINI($field);
}



class EncsetINI {
  // the default ini settings array
  private $ini = array();

  function __construct($field) {
    if (!empty($field)) {
      $field_value = $field[LANGUAGE_NONE][0]['value'];
      _encset_check_version();
      $this->ini = parse_ini_string($field_value);
    }
  }

  public function get($key, $default, $func = NULL) {
    if (isset($this->ini[$key])) {
      if ($func != NULL) {
        return $func($this->ini[$key]);
      }
      else {
        return $this->ini[$key];
      }
    }
    else {
      return $default;
    }
  }
}

function _encset_check_version() {
  if (!function_exists('parse_ini_string')) {
    function parse_ini_string($str, $ProcessSections = false) {
      $lines = explode("\n", $str);
      $return = Array();
      $inSect = false;
      foreach ($lines as $line) {
        $line = trim($line);
        if (!$line || $line[0] == "#" || $line[0] == ";")
          continue;
        if ($line[0] == "[" && $endIdx = strpos($line, "]")) {
          $inSect = substr($line, 1, $endIdx - 1);
          continue;
        }
        if (!strpos($line, '=')) // (We don't use "=== false" because value 0 is not valid as well)
          continue;

        $tmp = explode("=", $line, 2);
        if ($ProcessSections && $inSect)
          $return[$inSect][trim($tmp[0])] = ltrim($tmp[1]);
        else
          $return[trim($tmp[0])] = ltrim($tmp[1]);
      }
      return $return;
    }
  }
}