<?php

/**
 * @file
 * Various module information.
 */

/**
 * Implments hook_permission().
 */
function regbar_permission() {
  return array(
    'access regbar' => array(
        'info' => t('access regbar'),
        'description' => t('access regbar'),
    ),
    'administer regbar' => array(
        'info' => t('administer regbar'),
        'description' => t('administer regbar'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function regbar_menu() {
  $items['admin/config/people/regbar'] = array(
    'title' => 'Regbar settings',
    'description' => 'Adjust the options for barcode generation.',
    'position' => 'right',
    'weight' => -10,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer regbar'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/people/regbar/settings'] = array(
    'title' => 'Configure barcode',
    'description' => 'Change how the barcode will be generated',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('regbar_admin_settings'),
    'access arguments' => array('administer regbar'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'regbar.admin.inc',
  );

  $items['user/%/regbar'] = array(
    'title' => 'My icard',
    'page callback' => 'theme_regbar',
    'access arguments' => array('access regbar'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function theme_regbar() {
  global $user;
  regbar();
  $imagepath = file_default_scheme() . '://regbar/temp_' . $user->name . '.jpg';
  $variables = array(
    'path' => $imagepath,
    'alt' => '',
    'title' => NULL,
    'attributes' => array(),
  );
  return theme('image', $variables);
}

/**
 * Function generate barcode according to user defined or default settings.
 */
function regbar() {
  global $user;
  $user_name = $user->name;

  $name = 'regbarlibs';
  if ($path = libraries_get_path($name)) {
    include_once $path . '/Barcode.php';
    $font = $path . '/arial.ttf';
  }

  // Properties.
  $font_size = 10;
  $marge = 10;
  $x = 125;
  $y = 75;
  $height = variable_get('regbar_height', 50);
  $width = variable_get('regbar_width', 2);

  $angle = 0;
  $code_types = array(
    'ean8',
    'ean13',
    'std25',
    'int25',
    'code11',
    'code39',
    'code93',
    'code128',
    'codabar',
    'msi',
    'datamatrix',
  );
  $background_string = variable_get('regbar_background', '0xffffff');
  $background_arr = sscanf($background_string, '#%2x%2x%2x');
  $barcolor_string = variable_get('regbar_barcolor', '0x000000');
  $barcolor_arr = sscanf($barcolor_string, '#%2x%2x%2x');
  $textcolor = variable_get('regbar_textcolor', '0xFA0000');
  $textcolor_arr = sscanf($textcolor, '#%2x%2x%2x');
  $code_types_index = variable_get('regbar_type', 5);
  $type = $code_types[$code_types_index];
  $code_option = variable_get('regbar_barcodevalue', 1);
  $showvaluebelow = variable_get('regbar_showvalue', 1);
  $default_barimage = variable_get('regbar_default_barimage', 0);
  $barimage_path = variable_get('regbar_barimage_path', '');
  $barcode_center_x = variable_get('regbar_barcode_center_x', 100);
  $barcode_center_y = variable_get('regbar_barcode_center_y', 100);

  if ($code_option == 0) {
    $code = $user_name;
  }
  else {
    $length = 7;
    if ($type == 'ean13') {
      $length = 13;
    }
    $code = regbar_str_rand($type, $length);
  }

  // Ignore custom bar image if using default barimage.
  if ($default_barimage == 1) {
    $barimage_path = '';
  }

  // Allocate GD resources.
  if (file_exists($barimage_path)) {
    $im = regbar_image_create($barimage_path);
    $x = $barcode_center_x;
    $y = $barcode_center_y;
  }
  elseif ($default_barimage == 1) {
    $im = regbar_image_create(drupal_get_path('module', 'regbar') . '/default_icard.jpg');
    $x = $barcode_center_x;
    $y = $barcode_center_y;
  }
  else {
    $im = imagecreatetruecolor(250, 150);
    $background = ImageColorAllocate($im, $background_arr[0], $background_arr[1], $background_arr[2]);
    imagefilledrectangle($im, 0, 0, 250, 150, $background);
  }
  $barcolor = ImageColorAllocate($im, $barcolor_arr[0], $barcolor_arr[1], $barcolor_arr[2]);
  $data = Barcode::gd($im, $barcolor, $x, $y, $angle, $type, array('code' => $code), $width, $height);

  if ($showvaluebelow == 1) {
    $box = imagettfbbox($font_size, 0, $font, $data['hri']);
    $len = $box[2] - $box[0];
    $barcode_text_color = ImageColorAllocate($im, $textcolor_arr[0], $textcolor_arr[1], $textcolor_arr[2]);
    Barcode::rotate(-$len / 2, ($data['height'] / 2) + $font_size + $marge, $angle, $xt, $yt);
    imagettftext($im, $font_size, $angle, $x + $xt, $y + $yt, $barcode_text_color, $font, $data['hri']);
  }

  $realpath = drupal_realpath(file_default_scheme() . '://regbar/temp_' . $user_name . '.jpg');
  regbar_image_format($im, $realpath);
  imagedestroy($im);
}

/**
 * Function used to generate random strings which is further used for barcode.
 */
function regbar_str_rand($type, $length = 7, $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890') {
  $is_alphabet_allowed = FALSE;
  $alphabet_allowed_code = array('code39', 'code93', 'code128', 'datamatrix');

  if (in_array($type, $alphabet_allowed_code)) {
    $is_alphabet_allowed = TRUE;
  }

  // Length of character list.
  $chars_length = (drupal_strlen($chars) - 1);

  if ($is_alphabet_allowed) {
    $string = $chars{rand(0, $chars_length)};
    // Generate random string.
    for ($i = 1; $i < $length; $i = drupal_strlen($string)) {
      // Grab a random character from our list.
      $r = $chars{rand(0, $chars_length)};
      // Make sure the same two characters don't appear next to each other.
      if ($r != $string{$i - 1}) {
        $string .= $r;
      }
    }
  }
  else {
    $string = $chars{rand($chars_length - 9, $chars_length)};
    for ($i = 1; $i < $length; $i = drupal_strlen($string)) {
      $r = $chars{rand($chars_length - 9, $chars_length)};
      // Make sure the same two characters don't appear next to each other.
      if ($r != $string{$i - 1}) {
        $string .= $r;
      }
    }
  }

  return $string;
}

/**
 * Wrapper to create image from multiple file format.
 */
function regbar_image_create($image) {
  $size=getimagesize($image);
  switch ($size["mime"]) {
    case "image/jpeg":
      $im = imagecreatefromjpeg($image);
      break;

    default:
      $im = FALSE;
      break;
  }
  return $im;
}

/**
 * Function to output image to browser or file.
 */
function regbar_image_format($resource, $file) {
  $output = imagejpeg($resource, $file);
  return $output;
}
