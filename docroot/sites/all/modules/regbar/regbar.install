<?php

/**
 * @file
 * Requirements, install, uninstall functions for regbar module.
 */

/**
 * Implements hook_requirements().
 */
function regbar_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time.
  $t = get_t();

  switch ($phase) {
    case 'install':
      $name = 'regbarlibs';
      if ($path = libraries_get_path($name)) {
        $lib_path = $path . '/Barcode.php';
        $font_path = $path . '/arial.ttf';
      }
      if (!file_exists($lib_path)) {
        $requirements['lib'] = array(
          'title'       => $t('barcode lib'),
          'description' => $t('Get the !barcodelib package and copy Barcode.php inside "regbarlibs" libraries directory.',
                              array(
                                '!barcodelib' => l($t('Barcode Lib'),
                                    'https://github.com/nmudgal/regbar_libs',
                                    array('absolute' => TRUE)))
          ),
          'severity'    => REQUIREMENT_ERROR,
          'value'       => $t('"Barcode.php" file missing'),
        );
      }
      elseif (!file_exists($font_path)) {
        $requirements['font'] = array(
          'title'       => $t('font file'),
          'description' => $t('Get the !fontfile package and copy arial.ttf inside "regbarlibs" libraries directory.',
                              array(
                                '!fontfile' => l($t('Font File'),
                                    'https://github.com/nmudgal/regbar_libs',
                                    array('absolute' => TRUE)))
          ),
          'severity'    => REQUIREMENT_ERROR,
          'value'       => $t('arial.ttf file missing'),
        );
      }
      else {
        require_once $lib_path;
        $requirements['lib'] = array(
          'title'       => $t('Barcode api library'),
          'severity'    => REQUIREMENT_OK,
          'value'       => regbar_get_file_phpdoc_version($lib_path),
        );
        $requirements['font'] = array(
          'title'       => $t('Arial Font file'),
          'severity'    => REQUIREMENT_OK,
        );
        // Create the regbar directory and ensure it's writable.
        $regbar_directory = file_default_scheme() . '://regbar';
        if (!file_prepare_directory($regbar_directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
          if (!is_dir($regbar_directory)) {
            $requirements['regbar_directory'] = array(
              'title' => $t('Barcode directory'),
              'value' => $t('%p is not a directory or is not readable by the webserver.', array('%p' => $regbar_directory)),
              'severity' => REQUIREMENT_ERROR,
            );
          }
          elseif (!is_writable($regbar_directory)) {
            $requirements['regbar_directory'] = array(
              'title' => $t('Barcode directory'),
              'value' => $t('%p is not writeable by the webserver.', array('%p' => $regbar_directory)),
              'severity' => REQUIREMENT_ERROR,
            );
          }
          else {
            $requirements['regbar_directory'] = array(
              'title' => $t('Barcode directory'),
              'value' => $t('An unknown error occured.'),
              'description' => $t('An unknown error occured trying to verify %p is a directory and is writable.', array('%p' => $regbar_directory)),
              'severity' => REQUIREMENT_ERROR,
            );
          }
        }

        if (!is_writable(file_directory_temp())) {
          $requirements['regbar_directory'] = array(
            'title' => $t('BarcodeCache temp directory'),
            'value' => $t('%p is not writeable by the webserver.', array('%p' => file_directory_temp())),
            'severity' => REQUIREMENT_ERROR,
          );
        }
      }
      break;

    case 'runtime':
      // Check GD library
      if (function_exists('imagegd2')) {
        $info = gd_info();
        $requirements['gd'] = array(
          'value' => $info['GD Version'],
        );

        // Check JPEG support
        if (function_exists('imagecreatefromjpeg')) {
          $requirements['gd']['severity'] = REQUIREMENT_OK;
        }
        else {
          $requirements['gd'] = array(
            'severity' => REQUIREMENT_ERROR,
            'description' => $t('The GD library for PHP is enabled, but was compiled without JPEG support. Please check the !phpimagedoc for information on how to correct this.', array(
                                '!phpimagedoc' => l($t('PHP Image Docuementation'),
                                    'http://www.php.net/manual/en/ref.image.php',
                                    array('absolute' => TRUE)))),
          );
        }
      }
      else {
        $requirements['gd'] = array(
          'value' => t('Not installed'),
          'severity' => REQUIREMENT_ERROR,
          'description' => $t('The GD library for PHP is missing or outdated. Please check the !phpimagedoc for information on how to correct this.', array('!phpimagedoc' => l($t('PHP Image Docuementation'),
                             'http://www.php.net/manual/en/ref.image.php',
                              array('absolute' => TRUE)))),
        );
      }
      $requirements['gd']['title'] = $t('GD library');

      break;
  }
  return $requirements;
}

/**
 * Helper function to get PHPDoc @version tag from a file
 */
function regbar_get_file_phpdoc_version($lib_path) {
  $version = 'unknown';
  $needle  = '@version ';

  if (file_exists($lib_path)) {
    $fp = @fopen($lib_path, 'r');
    if ($fp) {
      while (!feof($fp)) {
        $occurence = stristr(fgets($fp), $needle);
        if ($occurence) {
          return rtrim(drupal_substr($occurence, drupal_strlen($needle)));
        }
      }
    }
  }
  return $version;
}

/**
 * Implements hook_install().
 */
function regbar_install() {
  // Set the variables.
  variable_set('regbar_type', 5);
  variable_set('regbar_background', '#FFFFFF');
  variable_set('regbar_barcolor', '#000000');
  variable_set('regbar_textcolor', '#FA0000');
  variable_set('regbar_width', '1');
  variable_set('regbar_height', '60');
  variable_set('regbar_barcodevalue', 1);
  variable_set('regbar_showvalue', 1);
  variable_set('regbar_default_barimage', 0);
}

/**
 * Implements hook_uninstall().
 */
function regbar_uninstall() {
  // Delete our module's variable from the variables table.
  variable_del('regbar_type');
  variable_del('regbar_background');
  variable_del('regbar_barcolor');
  variable_del('regbar_textcolor');
  variable_del('regbar_width');
  variable_del('regbar_height');
  variable_del('regbar_barcodevalue');
  variable_del('regbar_showvalue');
  variable_del('regbar_default_barimage');
  variable_del('regbar_barimage_path');
  variable_del('regbar_barimage_paths');
  variable_del('regbar_barimage_upload');
  variable_del('regbar_barcode_center_x');
  variable_del('regbar_barcode_center_y');
  // Remove the regbar directory and generated images.
  file_unmanaged_delete_recursive(file_default_scheme() . '://regbar');
}
