<?php

/**
 * @file
 * Implements Everyday online payment services in Drupal Commerce checkout.
 */

/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_everyday_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_everyday'] = array(
    'base' => 'commerce_everyday',
    'title' => t('Everyday Online Payment'),
    'short_title' => t('Everyday'),
    'display_title' => t('Everyday online payment on a secure server'),
    'description' => t('Everyday online payment service'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
    'callbacks' => array(
      'settings_form' => 'commerce_everyday_settings_form',
    ),
    'file' => 'includes/commerce_everyday.admin.inc',
  );

  return $payment_methods;
}

/**
 * Implements hook_commerce_payment_method_info_alter().
 *
 * Override the default values with the settings specific values
 * See http://drupal.org/node/1246052
 */
function commerce_everyday_commerce_payment_method_info_alter(&$payment_methods) {

  // Load rule configuration to check whether payment method rule exists.
  // See https://drupal.org/node/2004942
  // Corrected in Commerce 1.8
  $rule = rules_config_load('commerce_payment_' . $payment_methods['commerce_everyday']['method_id']);
  if (!empty($rule)) {
    // Load payment method settings.
    $instance_id = $payment_methods['commerce_everyday']['method_id'] . '|' . 'commerce_payment_' . $payment_methods['commerce_everyday']['method_id'];
    $payment_method = commerce_payment_method_instance_load($instance_id);
    $settings = $payment_method['settings'];

    if (!empty($settings)) {
      // Override the default values.
      if ($settings['commerce_everyday_method_title_icons']) {
        $path = base_path() . drupal_get_path('module', 'commerce_everyday');
        $display_title = $settings['commerce_everyday_method_title'];
        $display_title .= '<div class="commerce-everyday-icons"><img src="' . $path . _commerce_everyday_banner($settings) . '"></div>';
        drupal_add_css(drupal_get_path('module', 'commerce_everyday') . '/theme/commerce_everyday.css');
      }
      else {
        $display_title = $settings['commerce_everyday_method_title'];
      }

      $payment_methods['commerce_everyday']['display_title'] = $display_title;
      $payment_methods['commerce_everyday']['offsite_autoredirect'] = $settings['commerce_everyday_method_offsite_autoredirect'];
    }
  }

  return $payment_methods;
}

/**
 * Payment method callback: adds a message and CSS to the submission form.
 */
function commerce_everyday_submit_form($payment_method, $pane_values, $checkout_pane, $order) {

  $msg = $payment_method['settings']['commerce_everyday_method_payment_msg'];
  $form['everyday_information'] = array(
    '#markup' => '<span class="commerce-everyday-info">' . '(' . $msg . ')' . '</span>',
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'commerce_everyday') . '/theme/commerce_everyday.css'),
    ),
  );

  // TODO This avoids a notice message about undefined payment_details index.
  // We need to find better solution for that.
  $form['empty'] = array(
    '#type' => 'hidden',
    '#default_value' => '',
  );

  return $form;
}

/**
 * Payment method callback: redirect form.
 */
function commerce_everyday_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['commerce_everyday_mode'])) {
    drupal_set_message(t('Everyday Online Payment is not configured for use. !link.', array(
      '!link' => l(t('Add configuration'),
      'admin/commerce/config/payment-methods/manage/commerce_payment_commerce_everyday/edit/3'))),
      'error');
    // TODO Return error and stop execution OR
    // set message and use test account settings?
    return array();
  }

  // Process payment data details.
  $form_elements = commerce_everyday_payment_data($order, $payment_method['settings']);

  // Build the form array.
  $form['#action'] = _commerce_everyday_server_url();

  foreach ($form_elements as $key => $value) {
    $form[$key] = array('#type' => 'hidden', '#value' => $value);
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => $payment_method['settings']['commerce_everyday_checkout_button'],
    '#weight' => 10,
  );

  return $form;
}

/**
 * Payment method callback: redirect form back callback.
 */
function commerce_everyday_redirect_form_back($order, $payment_method) {
  // Display a message indicating the customer canceled payment.
  // drupal_set_message(t('You have canceled payment at Everyday but may resume the checkout process here when you are ready.'));

  // Set payment status to failure.
  $transaction = commerce_payment_transaction_load($order->data['commerce_everyday']['transaction']->transaction_id);
  $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  $transaction->remote_status = t('Cancel');
  commerce_payment_transaction_save($transaction);

  // Remove the payment information from the order data array.
  unset($order->data['commerce_everyday']);
  unset($order->data['payment_method']);
}

/**
 * Payment method callback: redirect form return validation.
 */
function commerce_everyday_redirect_form_validate($order, $payment_method) {

  // Log validation request.
  watchdog('commerce_everyday', 'Received callback for redirect validation with $_REQUEST: <pre>%request</pre>', array('%request' => print_r($_REQUEST, 1)), WATCHDOG_INFO);

  // Save $order with $_REQUEST data.
  if ($order) {
    $order->data['commerce_everyday']['response'] = $_REQUEST;
    commerce_order_save($order);
  }

  // Select validation mode based on transaction return status code.
  if (arg(5) == 'reject') {
    drupal_set_message(t('Payment has been rejected by Everyday Online Payment service. Please select another payment method to complete your order'), 'error');
    watchdog('commerce_everyday', 'Payment has been rejected by Everyday Online Payment service.', array(), WATCHDOG_WARNING);
    $failure = TRUE;
  }
  // Else we'll just skip rest of the validation.
  elseif (arg(5) == 'success') {
    // Validate response fields with hash.
    $hash_elements = array(
      'OPR_RETURN_VERSION',
      'OPR_RETURN_STAMP',
      'OPR_RETURN_REF',
      'OPR_RETURN_PAID',
    );

    foreach ($hash_elements as $key => $element) {
      $hash_elements[$element] = $_GET[$element];
      unset($hash_elements[$key]);
    }

    if ($payment_method['settings']['commerce_everyday_mode'] == 'test') {
      $everyday_secretkey = !empty($payment_method['settings']['test_mode']['commerce_everyday_test_secret_key']) ? $payment_method['settings']['test_mode']['commerce_everyday_test_secret_key'] : '11223344556677889900';
    }
    else {
      $everyday_secretkey = $payment_method['settings']['prod_mode']['commerce_everyday_secret_key'];
    }
    $hash_elements['secret_key'] = $everyday_secretkey;

    // Generate hash with md5, convert to uppercase.
    $hash = strtoupper(md5(implode('&', $hash_elements) . '&'));

    // Check hash validity.
    if ($hash != $_GET['OPR_RETURN_MAC']) {
      drupal_set_message(t('Validation failed (security hash mismatch). Please contact store administration if the problem persists.'), 'error');
      watchdog('commerce_everyday', 'Validation failed (security hash mismatch).', array(), WATCHDOG_WARNING);
      $failure = TRUE;
    }

    // Check order reference validity.
    $order_reference = _commerce_everyday_reference($order->order_id);
    if ($order_reference != $_GET['OPR_RETURN_REF']) {
      drupal_set_message(t('Payment reference does not match with order reference. Please contact store administration.'), 'error');
      watchdog('commerce_everyday', 'Payment reference does not match with order reference.', array(), WATCHDOG_WARNING);
      $failure = TRUE;
    }
  }
  // If return status is unknown.
  else {
    drupal_set_message(t('Payment returned with unknown status. Please contact store administration if the problem persists.'), 'error');
    watchdog('commerce_everyday', 'Payment returned with unknown status.', array(), WATCHDOG_WARNING);
    $failure = TRUE;
  }

  // If any errors were detected, set payment status to failure and terminate.
  if (isset($failure)) {
    $transaction = commerce_payment_transaction_load($order->data['commerce_everyday']['transaction']->transaction_id);
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $transaction->remote_status = t('Failure');
    commerce_payment_transaction_save($transaction);
    return FALSE;
  }

  // If all ok, proceed to submit function.
  return TRUE;
}

/**
 * Payment method callback for redirect form submission.
 */
function commerce_everyday_redirect_form_submit($order, $payment_method) {

  // Load transaction.
  $transaction = commerce_payment_transaction_load($order->data['commerce_everyday']['transaction']->transaction_id);

  // Set payment status based on transaction return status code.
  if (arg(5) == 'reject') {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $transaction->remote_status = t('Reject');
  }
  elseif (arg(5) == 'success') {
    // Everyday payment successful, set transaction status to success.
    $transaction->message = 'Reference: @ref';
    $transaction->message_variables = array('@ref' => $_GET['OPR_RETURN_REF']);
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $transaction->remote_status = t('Success');
    $transaction->remote_id = $_GET['OPR_RETURN_PAID'];
  }

  commerce_payment_transaction_save($transaction);
}

/**
 * Keyed array of Everyday payment parameters.
 */
function commerce_everyday_payment_data($order, $settings) {

  // Get entity metadata.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Build the data array that will be translated into hidden form values.
  $context = array(
    'revision' => 'formatted-original',
    'type' => 'order_total',
    'subject' => array(
      'order' => $order,
    ),
  );
  $options = array(
    'sign' => FALSE,
    'dec' => ',',
    'thou' => FALSE,
  );

  // Set merchant id and secret key (online / test usage).
  if ($settings['commerce_everyday_mode'] == 'test') {
    $everyday_sellerid = !empty($settings['test_mode']['commerce_everyday_test_sid']) ? $settings['test_mode']['commerce_everyday_test_sid'] : '5442';
    $everyday_secretkey = !empty($settings['test_mode']['commerce_everyday_test_secret_key']) ? $settings['test_mode']['commerce_everyday_test_secret_key'] : 'NGNhODg0ZjA0NjYxNzllZmQxNWRhZA';
    $everyday_secretkey_version = !empty($settings['test_mode']['commerce_everyday_test_secret_key_version']) ? $settings['test_mode']['commerce_everyday_test_secret_key_version'] : '1';
    drupal_set_message(t('Everyday Web Payment service is in test mode'));
  }
  else {
    $everyday_sellerid = $settings['prod_mode']['commerce_everyday_sid'];
    $everyday_secretkey = $settings['prod_mode']['commerce_everyday_secret_key'];
    $everyday_secretkey_version = $settings['prod_mode']['commerce_everyday_secret_key_version'];
  }

  // Data.
  $data = array(
    'OPR_VERSION' => '0004',
    'OPR_STAMP' => date("YmdHisu"),
    'OPR_RCV_ID' => $everyday_sellerid,
    'OPR_LANGUAGE' => 'fi_FI',
    'OPR_AMOUNT' => number_format($order_wrapper->commerce_order_total->amount->value() / 100, 2, ',', ''),
    'OPR_CUR' => 'EUR',
    'OPR_REF' => _commerce_everyday_reference($order->order_id),
    'OPR_MSG' => '',
    'OPR_RETURN' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'] . '/success', array('absolute' => TRUE)),
    'OPR_REJECT' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'] . '/reject', array('absolute' => TRUE)),
    'OPR_CANCEL' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'] . '/cancel', array('absolute' => TRUE)),
    'OPR_DATE' => '',
    'OPR_TYPE' => '',
  );

  // Calculate hash code.
  $hash_fields['secret_key'] = $everyday_secretkey;
  $hash_fields['version'] = $data['OPR_VERSION'];
  $hash_fields['stamp'] = $data['OPR_STAMP'];
  $hash_fields['sellerid'] = $data['OPR_RCV_ID'];
  $hash_fields['amount'] = $data['OPR_AMOUNT'];
  $hash_fields['reference'] = $data['OPR_REF'];
  $hash_fields['date'] = $data['OPR_DATE'];
  $hash_fields['currency'] = $data['OPR_CUR'];

  // Hash code.
  $data['OPR_MAC'] = strtoupper(md5(implode('&', $hash_fields) . '&'));
  $data['OPR_KEYVERS'] = $everyday_secretkey_version;

  return $data;
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_everyday_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['commerce_everyday'] = $pane_values;
  // TODO: Check pane values - how determined?
  $transaction = commerce_everyday_transaction($payment_method, $order, $charge);
  // Save the transaction in the order to use later in
  // commerce_everyday_redirect_form_submit().
  $order->data['commerce_everyday']['transaction'] = $transaction;
}

/**
 * Creates payment transaction for the specified charge amount.
 *
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 * @param object $order
 *   The order object the payment applies to.
 * @param array $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_everyday_transaction($payment_method, $order, $charge) {
  $transaction = commerce_payment_transaction_new('commerce_everyday', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  commerce_payment_transaction_save($transaction);

  return $transaction;
}

/*******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/

/**
 *  Return path to banner image.
 */
function _commerce_everyday_banner($settings) {
  $banner = '/images/' . $settings['commerce_everyday_method_title_icon_select'];

  return $banner;
}

/**
 * Return url for posting data.
 */
function _commerce_everyday_server_url() {
  $url = 'https://everyday.opr-vakuus.fi/maksu.php';

  return $url;
}

/**
 * Returns reference to given reference number as used by Finnish banks.
 *
 * @param int $reference
 *   Reference number based on order id.
 *
 * @return string
 *   Reference (with check number) as used by Finnish banks.
 */
function _commerce_everyday_reference($reference) {
  $tmp_multip = array(7, 3, 1);

  // Calculated sum for given reference.
  $reference_prefix = variable_get('commerce_everyday_reference_prefix', '1000');
  $tmp_str = (string) $reference_prefix . $reference;
  $tmp_sum = 0;
  $tmp_index = 0;
  for ($i = strlen($tmp_str) - 1; $i >= 0; $i--) {
    $tmp_sum += intval(substr($tmp_str, $i, 1)) * intval($tmp_multip[$tmp_index % 3]);
    $tmp_index++;
  }

  // Nearest decimal number for calculated sum.
  $next_ten = ceil(intval($tmp_sum) / 10) * 10;

  // Return reference.
  return $tmp_str . (string) (abs($next_ten - $tmp_sum));
}
