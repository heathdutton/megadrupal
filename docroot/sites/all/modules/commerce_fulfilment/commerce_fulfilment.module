<?php

/**
 * Implements hook_menu().
 */
function commerce_fulfilment_menu() {
  $items = array();

  $items['admin/commerce/config/fulfilment'] = array(
    'title' => 'Order fulfilment',
    'description' => 'Configure order fulfilment.',
    'page callback' => 'drupal_get_form',
    'type' => MENU_NORMAL_ITEM,
    'page arguments' => array('commerce_fulfilment_admin_page'),
    'access arguments' => array('configure commerce fulfilment'),
  );

  $items['admin/commerce/config/fulfilment/general'] = array(
    'title' => 'General',
    'description' => 'Configure general order fulfilment settings.',
    'page callback' => 'drupal_get_form',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'page arguments' => array('commerce_fulfilment_admin_page'),
    'access arguments' => array('configure commerce fulfilment'),
  );

  return $items;
}


/**
 * Implements hook_permission().
 */
function commerce_fulfilment_permission() {
  return array(
    'configure commerce fulfilment' => array('title' => 'Configure Commerce Fulfilment'),
    'access commerce fulfilment' => array('title' => 'Access Commerce Fulfilment'),
  );
}


/**
 * Admin settings page
 */
function commerce_fulfilment_admin_page() {
  $form = array();

  return system_settings_form($form);
}


/**
 * Return the shipping service used in an order.
 *
 * ->commerce_shipping_service->value(); // SKU
 * ->line_item_label->value(); // Label
 *
 * @var $order_wrapper EntityDrupalWrapper The wrapped order.
 */
function commerce_fulfilment_get_shipping_lineitem(EntityDrupalWrapper $order_wrapper) {
  foreach ($order_wrapper->commerce_line_items as $line_item) {
    if ($line_item->type->value() === 'shipping') {
      return $line_item;
    }
  }

  return FALSE;
}
