<?php
/**
 * @file
 * Added privat24 payment method.
 */

define('COMMERCE_PRIVAT24_FORM_HANDLER', 'https://api.privatbank.ua/p24api/ishop');

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_privat24_commerce_payment_method_info() {
  $payment_method = array();
  $payment_method['privat24'] = array(
    'title'                => t('Privat24'),
    'display_title'        => t('Privat24'),
    'description'          => t('Privat24 payment method'),
    'active'               => TRUE,
    'terminal'             => TRUE,
    'offsite'              => TRUE,
    'offsite_autoredirect' => TRUE,
    'base'                 => 'commerce_privat24',
  );
  return $payment_method;
}

/**
 * Payment method callback: submit form.
 */
function commerce_privat24_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();
  $form['payment_logo'] = array(
    '#theme'      => 'image',
    '#path'       => drupal_get_path('module', 'commerce_privat24') . '/images/logo_privat24.png',
    '#alt'        => t('Privat24'),
    '#title'      => t('Privat24'),
    '#attributes' => array('class' => 'logo-privat24'),
  );
  return $form;
}

/**
 * Returns the default settings for the Privat24 payment method.
 *
 * @return array
 *   The default settings for payment method.
 */
function commerce_privat24_default_settings() {
  return array(
    'merchant_pass' => '',
    'merchant_id'   => '',
    'form_handler'  => COMMERCE_PRIVAT24_FORM_HANDLER,
    'log_enable'    => 1,
  );
}

/**
 * Payment method callback: payment settings page.
 *
 * @param array $settings
 *   Payment method settings.
 *
 * @return array
 *   Settings form.
 */
function commerce_privat24_settings_form($settings = NULL) {
  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_privat24_default_settings();

  $form = array();
  $form['merchant_id'] = array(
    '#type'          => 'textfield',
    '#title'         => 'Merchant ID',
    '#description'   => t('Merchant id for the Privat24 account.'),
    '#default_value' => $settings['merchant_id'],
    '#required'      => TRUE,
  );
  $form['merchant_pass'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Merchant password'),
    '#description'   => t('Merchant password for the Privat24 account.'),
    '#default_value' => $settings['merchant_pass'],
    '#required'      => TRUE,
  );
  $form['form_handler'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Form handler'),
    '#description'   => t('Link to the script which will process requests.'),
    '#default_value' => $settings['form_handler'],
    '#required'      => TRUE,
  );
  $form['log_enable'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Enable log'),
    '#default_value' => $settings['log_enable'],
  );
  return $form;
}

/**
 * Payment method callback: payment redirect form.
 */
function commerce_privat24_redirect_form($form, &$form_state, $order, $payment_method) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency      = $order_wrapper->commerce_order_total->currency_code->value();
  $line_items    = $order_wrapper->commerce_line_items->value();
  $amount        = $order_wrapper->commerce_order_total->amount->value();
  $amount        = commerce_currency_amount_to_decimal($amount, $currency);
  foreach ($line_items as $line_item) {
    $product  = commerce_product_load($line_item->commerce_product[LANGUAGE_NONE][0]['product_id']);
    $titles[] = trim($product->title);
  }

  $form['#action'] = $payment_method['settings']['form_handler'];
  $form['amt'] = array(
    '#type'  => 'hidden',
    '#value' => $amount,
  );
  $form['ccy'] = array(
    '#type'  => 'hidden',
    '#value' => $currency,
  );
  $form['merchant'] = array(
    '#type'  => 'hidden',
    '#value' => $payment_method['settings']['merchant_id'],
  );
  $form['order'] = array(
    '#type'  => 'hidden',
    '#value' => $order->order_id,
  );
  $form['details'] = array(
    '#type'  => 'hidden',
    '#value' => implode(', ', $titles),
  );
  $form['ext_details'] = array(
    '#type'  => 'hidden',
    '#value' => '',
  );
  $form['pay_way'] = array(
    '#type'  => 'hidden',
    '#value' => 'privat24',
  );

  $return_and_server_url = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
  $form['return_url'] = array(
    '#type'  => 'hidden',
    '#value' => $return_and_server_url,
  );
  $form['server_url'] = array(
    '#type'  => 'hidden',
    '#value' => $return_and_server_url,
  );
  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Payment via Privat24'),
  );
  return $form;
}

/**
 * Payment method callback: redirect form validation.
 */
function commerce_privat24_redirect_form_validate($order, $payment_method) {
  $request_data = $_POST;
  $pass = $payment_method['settings']['merchant_pass'];
  $signature = sha1(md5($request_data['payment'] . $pass));
  commerce_privat24_add_log('Privat24 response for the order @order_number: @request_data', array(
    '@order_number' => $order->order_id,
    '@request_data' => print_r($request_data, 1),
  ));
  $placeholder = array('@order_number' => $order->order_id);
  if ($request_data['signature'] == $signature) {
    commerce_privat24_add_log('Payment for the order @order_number was successful.', $placeholder);
    return TRUE;
  }
  commerce_privat24_add_log('Payment for the order @order_number has been failed.', $placeholder);
  return FALSE;
}

/**
 * Payment method callback: redirect form submission.
 */
function commerce_privat24_redirect_form_submit($order, $payment_method) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency      = $order_wrapper->commerce_order_total->currency_code->value();
  $amount        = $order_wrapper->commerce_order_total->amount->value();

  $transaction = commerce_payment_transaction_new('privat24', $order->order_id);
  $transaction->amount        = $amount;
  $transaction->instance_id   = $payment_method['instance_id'];
  $transaction->revision_id   = $order->revision_id;
  $transaction->remote_id     = $transaction->transaction_id;
  $transaction->currency_code = $currency;
  $transaction->status        = COMMERCE_PAYMENT_STATUS_SUCCESS;
  $transaction->message       = t('Payment via Privat24 has been completed.');
  drupal_set_message($transaction->message);

  commerce_payment_transaction_save($transaction);
  commerce_privat24_add_log('Transaction for the order @order_number has been successfully created.', $transaction->instance_id, array('@order_number' => $order->order_id));
}

/**
 * Write messages to the system log.
 *
 * @param string $message
 *   Message text.
 * @$instance_id
 *   A payment method instance ID in the form of a pipe delimited string
 *   containing the method_id and the enabling Rule's name.
 * @param array $variables
 *   Variables to replace placeholders.
 */
function commerce_privat24_add_log($message, $instance_id, $variables = array()) {
  $payment_method = commerce_payment_method_instance_load($instance_id);
  $payment_method['settings'] = (array) $payment_method['settings'] + commerce_privat24_default_settings();
  if ($payment_method['settings']['log_enable']) {
    watchdog('commerce_privat24', $message, $variables);
  }
}