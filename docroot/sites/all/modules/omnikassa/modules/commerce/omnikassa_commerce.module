<?php
/**
 * @file
 * Provides an Rabobank OmniKassa payment method for Drupal Commerce
 */

/**
 * Implements hook_menu().
 */
function omnikassa_commerce_menu() {
  $items = array();

  $items['omnikassa/report/%commerce_order'] = array(
    'title' => 'Rabobank Omnikassa Report URL',
    'page callback' => 'omnikassa_commerce_report',
    'page arguments' => array(2),
    'file' => 'omnikassa_commerce.pages.inc',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function omnikassa_commerce_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['omnikassa_ideal'] = array(
    'title' => t('iDEAL'),
    'short_title' => t('iDEAL'),
    'display_title' => t('iDEAL'),
    'description' => t('iDEAL Omnikassa payment through Rabobank'),
    'active' => FALSE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  $payment_methods['omnikassa_bcmc'] = array(
    'title' => t('Bancontact/Mister Cash'),
    'short_title' => t('Bancontact/Mister Cash'),
    'display_title' => t('Bancontact/Mister Cash'),
    'description' => t('Bancontact/Mister Cash Omnikassa payment through Rabobank'),
    'active' => FALSE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  $payment_methods['omnikassa_vpay'] = array(
    'title' => t('V PAY'),
    'short_title' => t('V PAY'),
    'display_title' => t('V PAY'),
    'description' => t('V PAY Omnikassa payment through Rabobank'),
    'active' => FALSE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  $payment_methods['omnikassa_minitix'] = array(
    'title' => t('Minitix'),
    'short_title' => t('Minitix'),
    'display_title' => t('Minitix'),
    'description' => t('Minitix Omnikassa payment through Rabobank'),
    'active' => FALSE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  $payment_methods['omnikassa_visa'] = array(
    'title' => t('Visa'),
    'short_title' => t('Visa'),
    'display_title' => t('Visa'),
    'description' => t('Visa Omnikassa payment through Rabobank'),
    'active' => FALSE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  $payment_methods['omnikassa_mastercard'] = array(
    'title' => t('Mastercard'),
    'short_title' => t('Mastercard'),
    'display_title' => t('Mastercard'),
    'description' => t('Mastercard Omnikassa payment through Rabobank'),
    'active' => FALSE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  $payment_methods['omnikassa_maestro'] = array(
    'title' => t('Maestro'),
    'short_title' => t('Maestro'),
    'display_title' => t('Maestro'),
    'description' => t('Maestro Omnikassa payment through Rabobank'),
    'active' => FALSE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  $payment_methods['omnikassa_incasso'] = array(
    'title' => t('Incasso'),
    'short_title' => t('Incasso'),
    'display_title' => t('Incasso'),
    'description' => t('Incasso Omnikassa payment through Rabobank'),
    'active' => FALSE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  $payment_methods['omnikassa_acceptgiro'] = array(
    'title' => t('Acceptgiro'),
    'short_title' => t('Acceptgiro'),
    'display_title' => t('Acceptgiro'),
    'description' => t('Acceptgiro Omnikassa payment through Rabobank'),
    'active' => FALSE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  $payment_methods['omnikassa_rembours'] = array(
    'title' => t('Rembours'),
    'short_title' => t('Rembours'),
    'display_title' => t('Rembours'),
    'description' => t('Rembours Omnikassa payment through Rabobank'),
    'active' => FALSE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callbacks: redirect form
 * returns form elements that should be submitted to the redirected
 * payment service; because of the array merge that happens upon return,
 * the service's URL that should receive the POST variables should be set in
 * the #action property of the returned form array
 */

/**
 * Callback for Ideal.
 */
function omnikassa_ideal_redirect_form($form, &$form_state, $order) {
  $settings = omnikassa_commerce_create_settings(OMNIKASSA_IDEAL, $order);
  return omnikassa_commerce_build_redirect_form($form, $form_state, $order, $settings);
}

/**
 * Callback for Bancontact/Mister Cash.
 */
function omnikassa_bcmc_redirect_form($form, &$form_state, $order) {
  $settings = omnikassa_commerce_create_settings(OMNIKASSA_BCMC, $order);
  return omnikassa_commerce_build_redirect_form($form, $form_state, $order, $settings);
}

/**
 * Callback for V PAY.
 */
function omnikassa_vpay_redirect_form($form, &$form_state, $order) {
  $settings = omnikassa_commerce_create_settings(OMNIKASSA_VPAY, $order);
  return omnikassa_commerce_build_redirect_form($form, $form_state, $order, $settings);
}

/**
 * Callback for Minitrix.
 */
function omnikassa_minitix_redirect_form($form, &$form_state, $order) {
  $settings = omnikassa_commerce_create_settings(OMNIKASSA_MINITIX, $order);
  return omnikassa_commerce_build_redirect_form($form, $form_state, $order, $settings);
}

/**
 * Callback for Visa.
 */
function omnikassa_visa_redirect_form($form, &$form_state, $order) {
  $settings = omnikassa_commerce_create_settings(OMNIKASSA_VISA, $order);
  return omnikassa_commerce_build_redirect_form($form, $form_state, $order, $settings);
}

/**
 * Callback for Mastercard.
 */
function omnikassa_mastercard_redirect_form($form, &$form_state, $order) {
  $settings = omnikassa_commerce_create_settings(OMNIKASSA_MASTERCARD, $order);
  return omnikassa_commerce_build_redirect_form($form, $form_state, $order, $settings);
}

/**
 * Callback for Maestro.
 */
function omnikassa_maestro_redirect_form($form, &$form_state, $order) {
  $settings = omnikassa_commerce_create_settings(OMNIKASSA_MAESTRO, $order);
  return omnikassa_commerce_build_redirect_form($form, $form_state, $order, $settings);
}

/**
 * Callback for Incasso.
 */
function omnikassa_incasso_redirect_form($form, &$form_state, $order) {
  $settings = omnikassa_commerce_create_settings(OMNIKASSA_INCASSO, $order);
  return omnikassa_commerce_build_redirect_form($form, $form_state, $order, $settings);
}

/**
 * Callback for Acceptgiro.
 */
function omnikassa_acceptgiro_redirect_form($form, &$form_state, $order) {
  $settings = omnikassa_commerce_create_settings(OMNIKASSA_ACCEPTGIRO, $order);
  return omnikassa_commerce_build_redirect_form($form, $form_state, $order, $settings);
}

/**
 * Callback for Rembours.
 */
function omnikassa_rembours_redirect_form($form, &$form_state, $order) {
  $settings = omnikassa_commerce_create_settings(OMNIKASSA_REMBOURS, $order);
  return omnikassa_commerce_build_redirect_form($form, $form_state, $order, $settings);
}

/**
 * Create a associated array with settings for the payment.
 */
function omnikassa_commerce_create_settings($payment_method, $order) {
  if (is_array($payment_method)) {
    $payment_method = implode(',', $payment_method);
  }
  $data = omnikassa_get_data();
  $form_data = array(
    'normalReturnUrl' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    'automaticResponseUrl' => url('omnikassa/report/' . $order->order_id, array('absolute' => TRUE)),
    'orderId' => $order->order_number,
    'transactionReference' => $order->order_number . variable_get('omnikassa_reference') . date('His'),
    'paymentMeanBrandList' => $payment_method,
  );
  $data = array_merge($data, $form_data);

  $order_data = omnikassa_commerce_filter_orderdetails($order);
  $data = array_merge($data, $order_data);
  return omnikassa_create_settings($data);
}

/**
 * Build the redirect form for Commerce payment.
 */
function omnikassa_commerce_build_redirect_form($form, $form_state, $order, $settings) {

  $form['#action'] = omnikassa_gateway_url(variable_get('omnikassa_mode', '1'));

  foreach ($settings as $name => $value) {
    if (isset($value)) {
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Pay with OmniKassa'),
  );

  return $form;
}

/**
 * Implements hook_redirect_form_validate().
 */
function omnikassa_ideal_redirect_form_validate($order) {
  return omnikassa_commerce_redirect_form_validate($order, 'omnikassa_ideal');
}

/**
 * Implements hook_redirect_form_validate().
 */
function omnikassa_bcmc_redirect_form_validate($order) {
  return omnikassa_commerce_redirect_form_validate($order, 'omnikassa_bcmc');
}

/**
 * Implements hook_redirect_form_validate().
 */
function omnikassa_vpay_redirect_form_validate($order) {
  return omnikassa_commerce_redirect_form_validate($order, 'omnikassa_vpay');
}


/**
 * Implements hook_redirect_form_validate().
 */
function omnikassa_minitix_redirect_form_validate($order) {
  return omnikassa_commerce_redirect_form_validate($order, 'omnikassa_minitix');
}

/**
 * Implements hook_redirect_form_validate().
 */
function omnikassa_visa_redirect_form_validate($order) {
  return omnikassa_commerce_redirect_form_validate($order, 'omnikassa_visa');
}

/**
 * Implements hook_redirect_form_validate().
 */
function omnikassa_mastercard_redirect_form_validate($order) {
  return omnikassa_commerce_redirect_form_validate($order, 'omnikassa_mastercard');
}

/**
 * Implements hook_redirect_form_validate().
 */
function omnikassa_maestro_redirect_form_validate($order) {
  return omnikassa_commerce_redirect_form_validate($order, 'omnikassa_maestro');
}

/**
 * Implements hook_redirect_form_validate().
 */
function omnikassa_incasso_redirect_form_validate($order) {
  return omnikassa_commerce_redirect_form_validate($order, 'omnikassa_incasso');
}

/**
 * Implements hook_redirect_form_validate().
 */
function omnikassa_acceptgiro_redirect_form_validate($order) {
  return omnikassa_commerce_redirect_form_validate($order, 'omnikassa_acceptgiro');
}

/**
 * Implements hook_redirect_form_validate().
 */
function omnikassa_rembours_redirect_form_validate($order) {
  return omnikassa_commerce_redirect_form_validate($order, 'omnikassa_rembours');
}

/**
 * Implements hook_redirect_form_validate().
 */
function omnikassa_commerce_redirect_form_validate($order, $payment_method) {
  // Return false to indicate failure, see commerce_payment.checkout_pane.inc, commerce_payment_redirect_pane_checkout_form().
  return omnikassa_commerce_handle_response($_REQUEST, $order, $payment_method);
}

/**
 * Commerce response handling.
 */
function omnikassa_commerce_handle_response(array $response, stdClass $order, $payment_method = NULL) {
  if ($payment_method == NULL) {
    $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
    $payment_method = $payment_method['method_id'];
  }

  $response = array_map('check_plain', $response);
  if (!isset($response['Data'])) {
    return FALSE;
  }
  if (!isset($response['Seal'])) {
    return FALSE;
  }

   $data = array();
  foreach (explode('|', $response['Data']) as $data_value) {
    $data_value = explode('=', $data_value, 2);
    $data[$data_value[0]] = $data_value[1];
  }
  if ($response['Seal'] !== omnikassa_create_seal($response['Data'])) {
    return FALSE;
  }

  $transaction = commerce_payment_transaction_new($payment_method, $order->order_id);
  $payment_status = omnikassa_commerce_result_parse($data['responseCode'], $data['paymentMeanBrand']);
  // payment amount details
  $transaction->amount = $data['amount'];
  $transaction->instance_id = $payment_method;
  $transaction->currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
  // payment status
  $transaction->status = isset($payment_status['code']) ? $payment_status['code'] : COMMERCE_PAYMENT_STATUS_FAILURE;
  $transaction->remote_status = isset($payment_status['code']) ? $payment_status['code'] : COMMERCE_PAYMENT_STATUS_FAILURE;

  $transaction->message = '';
  commerce_payment_transaction_save($transaction);

  return TRUE;
}

/**
 * Parse Omnikassa result code.
 *
 * @param string $code
 *   Resultcode from OmniKassa.
 * @param string $payment_method
 *   Payment method used.
 *
 * @return array
 *   Status and message.
 */
function omnikassa_commerce_result_parse($code, $payment_method) {
  $data = omnikassa_result_parse($code, $payment_method);
  switch ($data['code']) {
    case OMNIKASSA_PAYMENT_STATUS_FAILURE:
      $data['code'] = COMMERCE_PAYMENT_STATUS_FAILURE;
      break;

    case OMNIKASSA_PAYMENT_STATUS_SUCCESS:
      $data['code'] = COMMERCE_PAYMENT_STATUS_SUCCESS;
      break;

    case OMNIKASSA_PAYMENT_STATUS_PENDING:
      $data['code'] = COMMERCE_PAYMENT_STATUS_PENDING;
      break;
  }
  return $data;
}

/**
 * Implements hook_redirect_form_validate().
 */
function omnikassa_commerce_filter_orderdetails($order) {
  $details = array();
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $details['currencyCode'] = omnikassa_commerce_get_currency_code($wrapper->commerce_order_total->currency_code->value());
  $details['amount'] = $wrapper->commerce_order_total->amount->value();
  return $details;
}

/**
 * Implements hook_redirect_form_validate().
 */
function omnikassa_commerce_get_currency_code($str) {
  $accepted_currencies = array(
    'CAD',
    'CHF',
    'DEK',
    'EUR',
    'GBP',
    'JPY',
    'NOK',
    'SEK',
    'USD',
  );
  $currencies = commerce_currencies(FALSE, FALSE);
  if (isset($currencies[$str]['numeric_code']) && in_array($str, $accepted_currencies)) {
    return $currencies[$str]['numeric_code'];
  }
  return NULL;
}
