<?php

/**
 * @file
 *   Flag tracker module.
 */

/**
 * Show the number of followers.
 */
define('FLAG_TRACKER_FOLLOWERS_COUNT_SHOWN', 1);

/**
 * Don't show the number of followers.
 */
define('FLAG_TRACKER_FOLLOWERS_COUNT_NOT_SHOWN', 0);

/**
 * Implements hook_form_node_type_form_alter().
 */
function flag_tracker_form_node_type_form_alter(&$form, $form_state) {
  $node_type = $form['#node_type']->type;
  $flags = flag_get_flags('node');
  $flag_options[0] = t('- None -');
  foreach ($flags as $flag) {
    if (in_array($node_type, $flag->types)) {
      $flag_options[$flag->name] = $flag->title;
    }
  }
  if (count($flag_options) > 1) {
    $form['flag_tracker'] = array(
      '#type' => 'fieldset',
      '#title' => 'Flag tracker settings',
      '#weight' => 35,
      '#group' => 'additional_settings',
    );
    $form['flag_tracker']['flag_tracker_track_flag'] = array(
      '#title' => t('Flag for following'),
      '#type' => 'select',
      '#options' => $flag_options,
      '#default_value' => flag_tracker_get_tracker_flag($node_type),
      '#description' => t('Select which flag to use for this content type.'),
    );
    $form['flag_tracker']['flag_tracker_show_followers'] = array(
      '#title' => t('Show number of users following'),
      '#type' => 'checkbox',
      '#default_value' => variable_get('flag_tracker_show_followers_' . $node_type, FLAG_TRACKER_FOLLOWERS_COUNT_NOT_SHOWN),
    );
  }
}

/**
 * Return the flag name for following content on this site (if any).
 *
 * @return
 *   The name of the flag being used for following content, or '' (an empty
 *   string) if flag.module isn't enabled or there's no flag configured for
 *   this purpose.
 */
function flag_tracker_get_tracker_flag($node_type = 'default') {
  return variable_get('flag_tracker_track_flag_' . $node_type, '');
}

/**
 * Implements hook_flag().
 */
function flag_tracker_flag($event, $flag, $entity_id, $account) {

  // If this is a node flag see if it's configured as the tracker flag for
  // this content type.
  if ($flag->content_type == 'node') {
    $node = node_load($entity_id);
    // If this flag is the one we're configured to use for following, ensure
    // that the Tracker data reflects the current state of the flag for the
    // given user and node.
    $flag_name = flag_tracker_get_tracker_flag($node->type);
    if (!empty($flag_name) && $flag->name == $flag_name) {
      switch ($event) {
        case 'flag':
          _tracker_add($entity_id, $account->uid, $node->changed, FALSE);
          break;

        case 'unflag':
          db_query("DELETE FROM {tracker_user} WHERE nid = :entity_id AND uid = :uid",
            array(':entity_id' => $entity_id, ':uid' => $account->uid));
          break;
      }
    }
  }
}

/**
 * Implements hook_flag_default_flags().
 *
 * This is an example/template flag configuration.
 */
function flag_tracker_flag_default_flags() {
  $flags = array();
  // Exported flag: "Follow".
  $flags['flag_tracker_follow'] = array(
    'entity_type' => 'node',
    'title' => 'Follow',
    'global' => 0,
    'types' => array(),
    'flag_short' => 'Follow',
    'flag_long' => '',
    'flag_message' => '',
    'unflag_short' => 'Unfollow',
    'unflag_long' => '',
    'unflag_message' => '',
    'unflag_denied_text' => '',
    'link_type' => 'toggle',
    'weight' => 0,
    'show_in_links' => array(),
    'show_as_field' => FALSE,
    'show_on_form' => 0,
    'access_author' => '',
    'show_contextual_link' => FALSE,
    'i18n' => 0,
    'api_version' => 3,
  );
  return $flags;
}

/**
 * Implements hook_preprocess_flag().
 */
function flag_tracker_preprocess_flag(&$variables) {
  $variables['suffix'] = '';

  if ($variables['flag']->entity_type !== 'node') {
    return;
  }

  $node = node_load($variables['entity_id']);
  $follow_flag = flag_tracker_get_tracker_flag($node->type);

  if ($variables['flag']->name == $follow_flag) {
    if ($variables['action'] == 'unflag') {
      $variables['link_text'] = '<span class="flag-state">' . t('Following') . '</span><span class="flag-action">' . t('Unfollow') . '</span>';
    }

    $show_followers = variable_get('flag_tracker_show_followers_' . $node->type, FLAG_TRACKER_FOLLOWERS_COUNT_NOT_SHOWN);
    if ($show_followers) {
      // Get the current number of people following the node.
      $flag_count = flag_get_counts('node', $node->nid);

      if (array_key_exists($follow_flag, $flag_count)) {
        $flag_count = $flag_count[$follow_flag]; 
      }
      else {
        $flag_count = 0;
      }

      drupal_add_js(array('flag_tracker' => array('follower_count' => $flag_count)), 'setting');
      $variables['suffix'] = ' ' . format_plural($flag_count, '1 follower', '@count followers');
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function flag_tracker_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['flag'])) {
    $theme_registry['flag']['path'] = drupal_get_path('module', 'flag_tracker') . '/theme';
  }
}

/**
 * Implements hook_node_insert().
 *
 * Adds new tracking information for this node since it's new.
 */
function flag_tracker_node_insert($node, $arg = 0) {
  _flag_tracker_add($node->nid, $node->uid);
}

/**
 * Implements hook_node_update().
 *
 * Adds tracking information for this node since it's been updated. We only
 * want to flag the owner of the node if it's different than the previous
 * revision, or less it's impossible for users to unfollow a post they author
 * since we would keep re-flagging it every time someone else edits that node.
 */
function flag_tracker_node_update($node, $arg = 0) {
  if ($node->uid != $node->original->uid) {
    _flag_tracker_add($node->nid, $node->uid);
  }
}

/**
 * Implements hook_comment_publish().
 *
 * This actually handles the insert and update of published nodes since
 * comment_save() calls hook_comment_publish() for all published comments.
 */
function flag_tracker_comment_publish($comment) {
  _flag_tracker_add($comment->nid, $comment->uid);
}

/**
 * Flag a given node for a user based on tracker changes.
 *
 * @param integer $nid
 *   The node ID for the content to be tracked.
 * @param integer $uid
 *   The user ID for the user who wants to do the tracking.
 */
function _flag_tracker_add($nid, $uid) {
  $node = node_load($nid);
  $tracker_flag = flag_tracker_get_tracker_flag($node->type);
  if (!empty($tracker_flag)) {
    $flag = flag_get_flag($tracker_flag);
    if (in_array($node->type, $flag->types)) {
      // Make sure it's not already flagged.
      if (!$flag->is_flagged($nid, $uid)) {
        $flag->flag('flag', $nid, user_load($uid));
      }
    }
  }
}
