<?php

/**
 * Implements hook_page_build().
 */
function crush_page_build(&$page) {
  $page['page_bottom']['crush'] = array(
    '#type' => 'markup',
    '#markup' => l(t('Use crush'), 'crush', array('query' => array('page' => $_GET['q']), 'attributes' => array('style' => 'background-color: #ffffff; bottom: 0; padding: 10px; position: fixed; right: 0;'))),
    '#access' => user_access('use crush'),
  );
}

/**
 * Implements hook_menu().
 */
function crush_menu() {
  $items = array();

  $items['crush'] = array(
    'page callback' => 'crush_page',
    'access arguments' => array('use crush'),
    'type' => MENU_CALLBACK,
  );

  $items['crush/ajax'] = array(
    'page callback' => 'crush_ajax',
    'access arguments' => array('use crush'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permissions().
 */
function crush_permissions() {
  return array(
    'use crush' => array(
      'title' => t('Use the crush administrative command line'),
      'description' => t('Grants users full access to perform ALL administrative tasks on the website through a powerful command line interface called crush. Grant only to users who are both trusted and know what they are doing. WARNING: this permission has security implications - any user with this permission will have full access to ALL aspects of this site.'),
    ),
  );
}

/**
 * Page callback.
 */
function crush_page() {
  $url = url($_GET['page']);
  $loading = t('Loading...');
  $css = base_path() . drupal_get_path('module', 'crush') . '/crush.css';
  $data = crush_invoke();
  $js_files[] = 'misc/jquery.js';
  $js_files[] = 'misc/jquery.once.js';
  $js_files[] = 'misc/drupal.js';
  $js_files[] = drupal_get_path('module', 'crush') . '/crush.js';
  $js = '';
  $commands = array();
  foreach ($data as $command => $command_data) {
    $commands[$command] = $command_data['help'];
  }
  $settings = array('basePath' => base_path(), 'crushCommands' => $commands, 'crushAjax' => url('crush/ajax'), 'crushToken' => drupal_get_token('crush'));
  foreach ($data as $command => $command_data) {
    if (isset($data[$command]) && !empty($data[$command]['file'])) {
      require_once $data[$command]['file'];
      $function = 'crush_setting_' . $command;
      if (function_exists($function)) {
        $settings += $function();
      }
    }
    if (!empty($command_data['js'])) {
      $js_files[] = $command_data['js'];
    }
  }
  foreach ($js_files as $js_file) {
    $js .= '    <script type="text/javascript" src="' . base_path() . $js_file . '"></script>' . "\n";
  }
  $settings = json_encode($settings);
  print <<<EOM
<html>
  <head>
    <title>$loading</title>
    <link type="text/css" rel="stylesheet" media="all" href="$css" />
$js
    <script type="text/javascript">jQuery.extend(Drupal.settings, $settings);</script>
  </head>
  <body>
    <iframe src="$url"></iframe>
    <form id="crush-form">
      <div id="crush-log"></div>
      <input id="crush" type="text" />
    </form>
  </body>
</html>
EOM;
}

/**
 * AJAX callback.
 */
function crush_ajax() {
  if (!drupal_valid_token($_POST['token'], 'crush')) {
    drupal_json_output('error');
    return;
  }
  $parsed_command = $_POST['parsed_command'];
  $command = $parsed_command['command'];
  $data = crush_invoke();
  if (isset($data[$command]) && !empty($data[$command]['file'])) {
    require_once $data[$command]['file'];
    $function = 'crush_command_' . $command;
    if (function_exists($function)) {
      $result = $function($parsed_command);
      drupal_json_output($result);
    }
  }
}

/**
 * Helper function: gather all crush data.
 */
function crush_invoke() {
  $cache = &drupal_static(__FUNCTION__);
  if (!isset($cache)) {
    $cache = array();
    foreach (module_implements('crush_commands') as $module) {
      $commands = module_invoke($module, 'crush_commands');
      foreach ($commands as $command => $help) {
        $cache[$command] = array('help' => $help);
        if (file_exists(drupal_get_path('module', $module) . "/commands/$command.inc")) {
          $cache[$command]['file'] = drupal_get_path('module', $module) . "/commands/$command.inc";
        }
        if (file_exists(drupal_get_path('module', $module) . "/commands/$command.js")) {
          $cache[$command]['js'] = drupal_get_path('module', $module) . "/commands/$command.js";
        }
      }
    }
  }
  return $cache;
}

/**
 * Implements hook_crush_commands().
 */
function crush_crush_commands() {
  return array(
    // Navigation.
    'cd' => t('Changes "path" to a sub-path. Use ".." to go up a level. Usage: cd <path>.'),
    'ls' => t('Lists possible sub-paths. May not print all sub-paths for dynamic items. Usage: ls <path>.'),
    'pwd' => t('Shows the current path.'),
    'refresh' => t('Refresh the current page. Same as "cd .".'),
    // Command-line interface.
    'clear' => t('Clears the command line of messages. To clear cache, use "cc".'),
    'commands' => t('Lists all possible commands.'),
    'help' => t('Displays help text for commands. Usage: help <command>.'),
    // Common drupal administrative helpers.
    'cc' => t('Clears all the Drupal caches by running drupal_flush_all_caches().'),
    'cron' => t('Runs all Drupal cron tasks.'),
    // Module administration.
    'enable' => t('Enable a Drupal module on this site. This will also enable any dependencies. Usage: enable <module_name> [<another_module>].'),
    'disable' => t('Disable a Drupal module on this site. This will also disable any dependent modules. Required core modules cannot be disabled. Usage: disable <module_name> [<another_module>].'),
    'install' => t('Alias of "enable". See "help enable" for more information.'),
    'uninstall' => t('Completely uninstall a Drupal module on this site, including removing any data handled by the module. This will also disable any dependent modules. Usage: uninstall <module_name> [<another_module>].'),
    'reinstall' => t('Disable, uninstall, and reinstall a Drupal module currently enabled on the site.'),
    // Administrative quick links.
    'admin' => t('Displays all administrative links for a module, or the main administration by module page if no module is specified.'),
    'ct' => t('Quick link: takes you to the edit page for a content type, or the main content type page if no type is specified.'),
    'fields' => t('Quick link: takes you to the manage fields page for a content type.'),
    // Developer tools.
    'eval' => t('Execute arbitrary PHP code. Use with caution!'),
    'sql' => t('Execute an arbitrary SQL query. Use with caution!'),
  );
}
