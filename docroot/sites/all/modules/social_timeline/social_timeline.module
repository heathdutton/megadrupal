<?php

/**
 * @file
 * This file provides the jQuery Social Timeline drupal module functionality.
 */

/**
 * Implements hook_menu().
 */
function social_timeline_menu() {
  $items = array();

  $items['admin/config/services/social-timeline'] = array(
    'title' => 'Social Timeline',
    'description' => 'jQuery Social Timeline',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('social_timeline_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/social_timeline.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_libraries_info().
 */
function social_timeline_libraries_info() {
  $libraries['social-timeline'] = array(
    'name' => 'dpSocialTimeline Library',
    'vendor url' => 'http://codecanyon.net/item/jquery-social-timeline/2390758',
    'version arguments' => array(
      'file' => 'js/jquery.dpSocialTimeline.js',
      'pattern' => '@Social Timeline v([0-9\.a-z]+)@',
      'lines' => 5,
    ),
    'files' => array(
      'js' => array(
        'js/jquery.magnific-popup.min.js',
        'js/jquery.isotope.min.js',
        'js/jquery.dpSocialTimeline.min.js',
      ),
      'css' => array(
        'css/magnific-popup.css',
        'css/dpSocialTimeline.css',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_theme().
 */
function social_timeline_theme() {
  // Define our tabledrag theme.
  return array(
    'social_timeline_admin_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Return an array of available feeds in an array.
 *
 * @return array
 *   Array of available feeds.
 */
function _social_timeline_get_feeds() {
  // Define the default feeds.
  $feeds = array();

  $feeds['twitter'] = array('data' => 'Username', 'title' => 'Twitter');
  $feeds['twitter_hash'] = array('data' => 'Hashtag (without the #)', 'title' => 'Twitter Hashtag');
  $feeds['facebook_page'] = array('data' => 'Page ID', 'title' => 'Facebook');
  $feeds['instagram'] = array('data' => 'Username', 'title' => 'Instagram');
  $feeds['instagram_hash'] = array('data' => 'Hashtag (without the #)', 'title' => 'Instagram Hashtag');
  $feeds['delicious'] = array('data' => 'Username', 'title' => 'Delicious');
  $feeds['flickr'] = array('data' => 'User ID', 'title' => 'Flickr');
  $feeds['flickr_hash'] = array('data' => 'Hashtag (without the #)', 'title' => 'Flickr Hashtag');
  $feeds['tumblr'] = array('data' => 'Username', 'title' => 'Tumblr');
  $feeds['youtube'] = array('data' => 'Username', 'title' => 'Youtube');
  $feeds['youtube_search'] = array('data' => 'Search', 'title' => 'Youtube Search');
  $feeds['dribbble'] = array('data' => 'Username', 'title' => 'Dribbble');
  $feeds['digg'] = array('data' => 'Username', 'title' => 'Digg');
  $feeds['pinterest'] = array('data' => 'Username', 'title' => 'Pinterest');
  $feeds['vimeo'] = array('data' => 'Username', 'title' => 'Vimeo');

  return $feeds;
}

/**
 * Array sorting function for the Social Timeline admin form.
 *
 * @param array $a
 *   First element to compare against.
 * @param array $b
 *   Second element to compare against.
 *
 * @return bool
 *   Boolean for weighting.
 */
function social_timeline_array_sort($a, $b) {
  // Sort by item weight.
  if (is_array($a) && is_array($b)) {
    if ($a['weight']['#default_value'] == $b['weight']['#default_value']) {
      return 0;
    }

    return ($a['weight']['#default_value'] < $b['weight']['#default_value']) ? -1 : 1;
  }
}

/**
 * Array sorting function for the Social Timeline display.
 *
 * @param array $a
 *   First element to compare against.
 * @param array $b
 *   Second element to compare against.
 *
 * @return bool
 *   Boolean for weighting.
 */
function social_timeline_feeds_sort($a, $b) {
  // Sort by item weight.
  if ($a['weight'] == $b['weight']) {
    return 0;
  }

  return ($a['weight'] < $b['weight']) ? -1 : 1;
}

/**
 * Implements hook_block_info().
 */
function social_timeline_block_info() {
  $blocks['social_timeline'] = array(
    'info' => t('jQuery Social Timeline'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function social_timeline_block_view($delta = '') {
  switch ($delta) {
    case 'social_timeline':
      $block['subject'] = '<none>';
      $block['content'] = social_timeline_contents($delta);
      break;
  }

  return $block;
}

/**
 * Social Timeline block content callback.
 *
 * @param string $delta
 *   String containing the key name of the block.
 *
 * @return array
 *   Array of markup for the block.
 */
function social_timeline_contents($delta) {
  if ($delta == 'social_timeline') {
    // Load the library.
    $library = libraries_load('social-timeline');

    // Get the data.
    $global = variable_get('social_timeline_global');
    $feeds = variable_get('social_timeline');
    $custom_feeds = array();

    // Sort the feeds by weight.
    uasort($feeds, 'social_timeline_feeds_sort');

    // Format the feeds array.
    $feeds_settings = '';

    foreach ($feeds as $k => $v) {
      if ($v['active']) {
        if (strstr($k, 'custom_')) {
          $custom_feeds[$k] = $v;
        }
        else {
          if (in_array($k, array('twitter'))) {
            (isset($_SERVER['HTTPS'])) ? $protocol = 'https://' : $protocol = 'http://';
            $uid = $v['data'];
            $v['data'] = $protocol . $_SERVER['HTTP_HOST']. base_path() . 'sites/all/libraries/social-timeline/twitter_oauth/user_timeline.php?screen_name=' . $uid;
          }
          elseif (in_array($k, array('twitter_hash'))) {
            (isset($_SERVER['HTTPS'])) ? $protocol = 'https://' : $protocol = 'http://';
            $uid = $v['data'];
            $v['data'] = $protocol . $_SERVER['HTTP_HOST'] . base_path() . 'sites/all/libraries/social-timeline/twitter_oauth/search.php?q=%23' . $uid;
          }
          elseif (in_array($k, array('facebook_page'))) {
            (isset($_SERVER['HTTPS'])) ? $protocol = 'https://' : $protocol = 'http://';
            $uid = $v['data'];
            $v['data'] = $protocol . $_SERVER['HTTP_HOST'] . base_path() . 'sites/all/libraries/social-timeline/facebook_auth/facebook_page.php?page_id=' . $uid;
          }
          elseif (in_array($k, array('instagram'))) {
            (isset($_SERVER['HTTPS'])) ? $protocol = 'https://' : $protocol = 'http://';
            $uid = $v['data'];
            $v['data'] = $protocol . $_SERVER['HTTP_HOST'] . base_path() . 'sites/all/libraries/social-timeline/instagram_auth/instagram.php?username=' . $uid;
          }
          elseif (in_array($k, array('instagram_hash'))) {
            (isset($_SERVER['HTTPS'])) ? $protocol = 'https://' : $protocol = 'http://';
            $uid = $v['data'];
            $v['data'] = $protocol . $_SERVER['HTTP_HOST'] . base_path() . 'sites/all/libraries/social-timeline/instagram_auth/instagram_hash.php?tag=' . $uid;
          }
          elseif (in_array($k, array('youtube'))) {
            (isset($_SERVER['HTTPS'])) ? $protocol = 'https://' : $protocol = 'http://';
            $uid = $v['data'];
            $v['data'] = $protocol . $_SERVER['HTTP_HOST'] . base_path() . 'sites/all/libraries/social-timeline/youtube_auth/youtube.php?username=' . $uid;
          }
          elseif (in_array($k, array('youtube_search'))) {
            (isset($_SERVER['HTTPS'])) ? $protocol = 'https://' : $protocol = 'http://';
            $uid = $v['data'];
            $v['data'] = $protocol . $_SERVER['HTTP_HOST'] . base_path() . 'sites/all/libraries/social-timeline/youtube_auth/youtube.php?q=' . $uid;
          }

          $limit = (isset($v['limit'])) ? ', limit: \'' . $v['limit'] . '\'' : '';
          ($v['data'] != '') ? $feeds_settings .= "'" . $k . "': {data: '" . $v['data'] . "'" . $limit . "}, \n \t \t \t \t" : NULL;
        }
      }
    }

    // Format the custom feeds array.
    $custom_feed_settings = '';

    if (!empty($custom_feeds)) {
      $custom_feed_settings .= "custom: \n \t \t \t { \n \t \t \t \t";
      foreach ($custom_feeds as $k => $v) {
        $icon = (isset($v['icon'])) ? ', icon: \'' . $v['icon'] . '\'' : '';
        $limit = (isset($v['limit'])) ? ', limit: \'' . $v['limit'] . '\'' : '';
        $name = ", name: '" . $k . "'";
        ($v['data'] != '') ? $custom_feed_settings .= "'" . $k . "': {url: '" . $v['data'] . "'" . $limit . $icon . $name . "}, \n \t \t \t \t" : NULL;
      }
      $custom_feed_settings .= '},';
    }

    // Add jQuery Social Timeline initialization.
    $js_social_slider = 'jQuery(document).ready(function(){ jQuery(\'#socialTimeline\').dpSocialTimeline({
      feeds:
      {
          ' . $feeds_settings . '
      },
      ' . $custom_feed_settings . '
      layoutMode: \'' . ((!empty($global['layout'])) ? $global['layout'] : 'timeline') . '\',
      addColorbox: ' . ((empty($global['magnific_popup'])) ? 'false' : 'true') . ',
      showSocialIcons: ' . ((empty($global['social_icons'])) ? 'false' : 'true') . ',
      showFilter: ' . ((empty($global['show_filter'])) ? 'false' : 'true') . ',
      showLayout: ' . ((empty($global['show_layout'])) ? 'false' : 'true') . ',
      share: ' . ((empty($global['show_share_buttons'])) ? 'false' : 'true') . ',
      total: ' . ((!empty($global['total'])) ? $global['total'] : 10) . ',
      itemWidth: ' . ((!empty($global['items_width'])) ? $global['items_width'] : 200) . ',
      skin: \'' . ((!empty($global['skin'])) ? $global['skin'] : 'light') . '\',
        });
     });';

    drupal_add_js($js_social_slider, 'inline');

    // Return the HTML div that will contain the Social Timeline.
    return array('#markup' => '<div id="socialTimeline"></div>');
  }
}

/**
 * Theme callback for the Social Timeline admin form.
 *
 * @param array $variables
 *   An array of variables for the admin form.
 *
 * @return string
 *   HTML table for the admin form.
 */
function theme_social_timeline_admin_form($variables) {
  $form = $variables['form'];
  $rows = array();

  // Put the form elements into table rows.
  foreach (element_children($form['social_timeline'], TRUE) as $id) {
    // Set the weight column class for tabledrag.
    $form['social_timeline'][$id]['weight']['#attributes']['class'] = array('social-item-weight');

    $rows[] = array(
      'data' => array(
        drupal_render($form['social_timeline'][$id]['feed']),
        drupal_render($form['social_timeline'][$id]['data']),
        drupal_render($form['social_timeline'][$id]['icon']),
        drupal_render($form['social_timeline'][$id]['limit']),
        drupal_render($form['social_timeline'][$id]['active']),
        drupal_render($form['social_timeline'][$id]['delete']),
        drupal_render($form['social_timeline'][$id]['weight']),
      ),

      // Add the draggable class to the rows for tabledrag.
      'class' => array('draggable'),
    );
  }

  // Set the table headers.
  $header = array(
    t('Feed'),
    t('Config'),
    t('Icon'),
    t('Limit'),
    t('Active?'),
    t('Delete'),
    t('Weight'),
  );

  // Set the table ID.
  $table_id = 'social-items-table';

  // Render the first part of the form before the table.
  $output = drupal_render_children($form);

  // Theme the form into a table.
  $output .= theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => $table_id),
  ));

  // Add a submit button at the bottom of the form.
  $output .= drupal_render($variables['form']['actions']);

  // Add the tabledrag functionality.
  drupal_add_tabledrag($table_id, 'order', 'sibling', 'social-item-weight');

  // Return the rendered HTML.
  return $output;
}
