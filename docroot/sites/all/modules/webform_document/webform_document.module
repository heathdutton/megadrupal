<?php

define('WEBFORM_DOCUMENT_INPUT_DIR', 'public://webform_document/input');
define('WEBFORM_DOCUMENT_OUTPUT_DIR', 'public://webform_document/output');
define('WEBFORM_DOCUMENT_FILLED_DIR', 'public://webform_document/filled');

/**
 * Implements hook_menu().
 */
function webform_document_menu() {
  $items = array();
  $items['node/%webform_menu/webform/document-template'] = array(
    'title' => 'Document template',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_document_form', 1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'webform_document.admin.inc',
    'weight' => 4,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%webform_menu/submission/%webform_menu_submission/document-template'] = array(
    'title' => 'Submission document template',
    'load arguments' => array(1),
    'page callback' => 'webform_document_submission_page',
    'page arguments' => array(1, 3),
    'access arguments' => array('access webform document template'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function webform_document_permission() {
  $permissions = array();
  $permissions['access webform document template'] = array(
    'title' => t('Access webform document template'),
  );
  if (module_exists('php')) {
    $permissions['use php for custom replacements'] = array(
      'title' => t('Access webform document template'),
      'description' => t('This permission needs also "@php-perm" permission.', array('@php-perm' => t('use PHP for settings'))),
    );
  }
  return $permissions;
}

/**
 * Implements hook_libraries_info().
 */
function webform_document_libraries_info() {
  return array(
    'libreoffice_cde' => array(
      'name' => 'LibreOffice in CDE',
      'version' => '4.1',
    ),
  );
}

/**
 * Implements hook_node_load().
 */
function webform_document_node_load($nodes, $types) {
  foreach ($nodes as $nid => $node) {
    if (isset($node->webform)) {
      $document_templates = variable_get('webform_document', array());
      if (isset($document_templates[$nid])) {
        $node->webform['document_template'] = $document_templates[$nid];
      }
    }
  }
}

/**
 * Menu callback for "node/%webform_menu/submission/%webform_menu_submission/document-template".
 */
function webform_document_submission_page($node, $submission) {
  if (empty($node->webform['document_template']['fid'])) {
    return;
  }

  if (!($file = file_load($node->webform['document_template']['fid']))) {
    drupal_set_message(t('Input file file does not exist.'), 'error');
    return;
  }

  $pathinfo = pathinfo($file->uri);
  $input_file = $file->uri;

  $filled_dir = WEBFORM_DOCUMENT_FILLED_DIR;
  $filled_file = $filled_dir . '/' . $pathinfo['filename'] . '.docx';
  file_prepare_directory($filled_dir, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);

  $data = array(
    'node' => $node,
    'webform-submission' => $submission,
  );

  webform_document_apply_replacements($input_file, $data, $node->webform['document_template']['custom_replacements']);

  if ($node->webform['document_template']['output_type'] == 'pdf') {
    $output_dir = WEBFORM_DOCUMENT_OUTPUT_DIR;
    $output_file = $output_dir . '/' . $pathinfo['filename'] . '.pdf';
    file_prepare_directory($output_file, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
    webform_document_convert($filled_file);
    webform_document_download($output_file);
  }
  else {
    webform_document_download($filled_file);
  }
}

/**
 * Convert DOCX file to PDF.
 *
 * @param  string $input_file Path to file to convert.
 * @return bool               TRUE or FALSE depending of converting result.
 */
function webform_document_convert($input_file) {
  // Check if LibreOffice exist.
  if (!($libreoffice_path = webform_document_libreoffice_path())) {
    drupal_set_message(t('Webform Document is not properly configured.'), 'error');
    return FALSE;
  }

  $pathinfo = pathinfo($input_file);

  $uniqid = uniqid();
  $base_cwd = getcwd();
  $libreoffice_local_dir = DRUPAL_ROOT . '/' . $libreoffice_path . '/cde-package/cde-root/usr/local/edirect/test';

  $filename = $pathinfo['filename'];
  $extension_input = 'docx';
  $extension_output = 'pdf';

  $input_dir = drupal_realpath(WEBFORM_DOCUMENT_FILLED_DIR);
  $input_filename = $filename . '.' . $extension_input;
  $input_filename_tmp = $filename . '-' . $uniqid . '.' . $extension_input;

  $output_dir = drupal_realpath(WEBFORM_DOCUMENT_OUTPUT_DIR);
  $output_filename = $filename . '.' . $extension_output;
  $output_filename_tmp = $filename . '-' . $uniqid . '.' . $extension_output;

  // First copy the file to the magic place where we can convert it to a pdf on the fly
  copy($input_dir . '/' . $input_filename, $libreoffice_local_dir . '/tmp/' . $input_filename_tmp);

  chdir($libreoffice_local_dir);
  $cmd_libre_exe = './libreoffice4.1.cde';
  $cmd_input_file = 'tmp/' . $input_filename_tmp;
  $cmd_output_dir = 'tmp/';
  $command = "$cmd_libre_exe --headless -convert-to pdf $cmd_input_file -outdir $cmd_output_dir";
  exec($command);
  chdir($base_cwd);

  if (!is_dir($output_dir)) {
    mkdir($output_dir);
  }

  // Copy the file back.
  copy($libreoffice_local_dir . '/tmp/' . $output_filename_tmp, $output_dir . '/' . $output_filename);

  // Delete temporary files.
  unlink($libreoffice_local_dir . '/tmp/' . $input_filename_tmp);
  unlink($libreoffice_local_dir . '/tmp/' . $output_filename_tmp);

  return TRUE;
}

/**
 * Apply token replacements in provided file.
 *
 * @param  string $input_file          File path to file which replacements will be made.
 * @param  array  $data                (optional) An array of keyed objects.
 * @param  array  $custom_replacements (optional) Custom replacement tokens to apply.
 * @return bool                        Return TRUE on success, FALSE otherwise.
 */
function webform_document_apply_replacements($input_file, $data = array(), $custom_replacements = array()) {
  $filled_file = file_unmanaged_copy($input_file, drupal_realpath(WEBFORM_DOCUMENT_FILLED_DIR));
  $zip = new ZipArchive();

  if ($zip->open($filled_file)) {
    $xml = $zip->getFromName('word/document.xml');

    $pattern = '|\[([^\}]+)\]|U';
    preg_match_all($pattern, $xml, $matches);

    foreach ($matches[0] as $value) {
      $modified = strip_tags($value);
      $xml = str_replace($value, $modified, $xml);
    }

    // There are custom replacements.
    if (!empty($custom_replacements)) {
      foreach ($custom_replacements as $replacement) {
        if (empty($replacement['search'])) {
          continue;
        }
        // Replacement found.
        if (strpos($xml, $replacement['search']) !== FALSE) {
          if (strpos($replacement['replace'], '[') !== FALSE) {
            $replacement['replace'] = token_replace($replacement['replace'], $data);
          }
          if (module_exists('php') && user_access('use php for custom replacements') && user_access('use PHP for settings') && strpos($replacement['replace'], '<?php') !== FALSE) {
            $replacement['replace'] = php_eval($replacement['replace']);
          }
          $xml = str_replace($replacement['search'], $replacement['replace'], $xml);
        }
      }
    }

    $xml = token_replace($xml, $data);
  }
  else {
    drupal_set_message(t('Error while opening file %filename.', array('%filename' => $filled_file)), 'error');
    return FALSE;
  }

  $zip->addFromString('word/document.xml', $xml);

  // Close zip file.
  if ($zip->close() === FALSE) {
    drupal_set_message(t('Could not close zip file %filename.', array('%filename' => $filled_file)), 'error');
    return FALSE;
  }

  return TRUE;
}

/**
 * Download file.
 *
 * @param  string $filepath File path to download.
 */
function webform_document_download($filepath) {
  $headers = array(
    'Cache-Control' => 'private',
    'Content-Disposition' => 'attachment; filename="' . basename($filepath) . '"',
    'Content-Type' => file_get_mimetype($filepath),
  );

  file_transfer($filepath, $headers);
}

/**
 * Implements hook_webform_submission_insert().
 */
function webform_document_webform_submission_insert($node, $submission) {
  if (isset($node->webform['document_template']['fid'])) {
    drupal_goto('node/' . $node->nid . '/submission/' . $submission->sid . '/document-template');
  }
}

/**
 * Get path to LibreOffice.
 *
 * @return bool|string
 *   Path to LibreOffice when found, FALSE otherwise.
 */
function webform_document_libreoffice_path() {
  if (!module_exists('libraries')) {
    return FALSE;
  }

  $libreoffice_path = libraries_get_path('libreoffice_cde');

  // LibreOffice file does not exist.
  if (!$libreoffice_path || !file_exists($libreoffice_path . '/cde.options')) {
    return FALSE;
  }
  else {
    return $libreoffice_path;
  }
}
