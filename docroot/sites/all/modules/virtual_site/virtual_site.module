<?php
/**
 * @file
 * Virtual Sites - main module file.
 */

/**
 * Implements hook_menu().
 */
function virtual_site_menu() {
  $items = array();

  $items['admin/structure/virtual-site'] = array(
    'title' => 'Virtual sites',
    'description' => "Create new virtual sites, much like Drupal's multi-site feature does.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('virtual_site_list_form'),
    'access arguments' => array('administer virtual sites'),
    'file' => 'virtual_site.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/structure/virtual-site/list'] = array(
    'title' => 'Sites',
    'file' => 'virtual_site.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/virtual-site/add'] = array(
    'title' => 'Add',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('virtual_site_edit_form'),
    'access arguments' => array('administer virtual sites'),
    'file' => 'virtual_site.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/virtual-site/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('virtual_site_edit_form', 3),
    'access arguments' => array('administer virtual sites'),
    'file' => 'virtual_site.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/virtual-site/%/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('virtual_site_delete_form', 3),
    'access arguments' => array('administer virtual sites'),
    'file' => 'virtual_site.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function virtual_site_permission() {
  return array(
    'administer virtual sites' => array(
      'title' => t('Administer virtual sites'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function virtual_site_help($path, $arg) {
  switch ($path) {
    case 'admin/structure/virtual-site':
      return '<p>'.
        t('Virtual sites offer almost the same (and more) functionality as the Drupal <a href="@multisite-doc">multisite feature</a> without the need for complicated setup. Depending on <a href="@conditions">conditions</a> (eg. requested URL, subdomain or user role), you can override theme, site information, menus and many moreâ€”to practically present the visitor with a different website.', array(
          '@multisite-doc' => url('http://drupal.org/node/43816', array('attributes' => array('target' => '_blank'))),
          '@conditions' => url('admin/structure/virtual-site/condition'))) .
        '</p><p>' .
        t('The first listed site that matches the specified conditions will be used. You can change the order by dragging the rows.') .
        '</p>';
  }
}

/**
 * Implements hook_theme().
 */
function virtual_site_theme() {
  return array(
    'virtual_site_list_form' => array(
      'render element' => 'form',
      'file' => 'virtual_site.admin.inc',
    ),
    'virtual_site_edit_form' => array(
      'render element' => 'form',
      'file' => 'virtual_site.admin.inc',
    ),
    'virtual_site_edit_feature_form' => array(
      'render element' => 'form',
      'file' => 'virtual_site.admin.inc',
    ),
  );
}

/**
 * Implements hook_init().
 */
function virtual_site_init() {
  if ($site = virtual_site_load_active()) {
    $features = _virtual_site_features();
    foreach ($features as $feature) {
      if (isset($site->features[$feature['callback']])) {
        $context = $site->features[$feature['callback']];
        $context['site'] = $site;
        $feature['callback']($context);
      }
    }
  }
}

/**
 * Returns all installed features.
 *
 * @return array
 *   Array of feature objects.
 */
function _virtual_site_features() {
  static $features;

  if (is_null($features)) {
    $features = (array) module_invoke_all('feature_info');

    foreach ($features as $feature => $info) {
      $features[$feature]['callback'] = function_exists($feature) ? $feature : NULL;
      $features[$feature]['form'] = function_exists($feature .'_form') ? $feature .'_form' : NULL;
      $features[$feature]['validate'] = function_exists($feature .'_validate') ? $feature .'_validate' : NULL;

      if (!isset($features[$feature]['callback'], $features[$feature]['form'], $features[$feature]['validate'])) {
        unset($features[$feature]);
      }
    }
  }

  return $features;
}

/**
 * Loads a virtual site.
 *
 * @param int|array|null $sid
 *   (Optional) The virtual sites to load. Can be:
 *   - a single {virtual_sites}.sid identifier,
 *   - an array of {virtual_sites}.sid identifiers,
 *   - empty (all virtual sites will be loaded).
 *
 * @return array
 *   A single virtual site object or an array of them.
 *
 * @see virtual_site_menu()
 */
function _virtual_site_load($sid = NULL, $refresh = FALSE) {
  static $sites;

  if (is_numeric($sid)) {
    if (!isset($sites[$sid])) {
      $new_site = db_query("SELECT * FROM {virtual_sites} WHERE sid = :site", array(
        ':site' => $sid,
      ))->fetchObject();
      $new_site->conditions = (array) unserialize($new_site->conditions);
      $new_site->features = (array) unserialize($new_site->features);
      $sites[$sid] = $new_site;
    }
    return $sites[$sid];
  }
  elseif (is_array($sid) && count($sid)) {
    if (!isset($sites[reset($sid)])) {
      $new_sites = db_select('virtual_sites', 's')
        ->fields('s')
        ->condition('s.sid', $sid, 'IN')
        ->orderBy('s.weight', 'ASC')
        ->execute()
        ->fetchAll();
      foreach ($new_sites as $key => $new_site) {
        $new_sites[$key]->conditions = (array) unserialize($new_site->conditions);
        $new_sites[$key]->features = (array) unserialize($new_site->features);
        $sites[$new_site->sid] = $new_site;
      }
    }
    return array_intersect_key($sites, array_flip($sid));
  }
  else {
    if (!isset($sites) || $refresh) {
      $sites = array();
      $new_sites = db_query("SELECT * FROM {virtual_sites} ORDER BY weight ASC")->fetchAll();
      foreach ($new_sites as $key => $new_site) {
        $new_sites[$key]->conditions = (array) unserialize($new_site->conditions);
        $new_sites[$key]->features = (array) unserialize($new_site->features);
        $sites[$new_site->sid] = $new_site;
      }
    }
    return $sites;
  }
}

/**
 * Determines the active virtual site.
 * It will be first enabled virtual site whose conditions are currently met.
 *
 * @return object
 *   A virtual site object.
 */
function virtual_site_load_active() {
  static $active_site;

  if (!isset($active_site)) {
    $active_site = FALSE;
    foreach (_virtual_site_load() as $site) {
      if ($site->status) {
        if (module_invoke('virtual_site_condition', 'selection_validate', $site->conditions)) {
          return $active_site = $site;
        }
      }
    }
  }
  return $active_site;
}

/**
 * Saves one or more virtual sites.
 *
 * @param object|array $sites
 *   The virtual sites to save. Can be:
 *   - a single virtual site object,
 *   - an array of virtual site objects.
 */
function _virtual_site_save($sites) {
  if (!is_array($sites)) {
    $sites = array($sites);
  }
  foreach ($sites as $site) {
    $key = (isset($site->sid) && $site->sid) ? 'sid' : array();
    drupal_write_record('virtual_sites', $site, $key);
  }
}

/**
 * Deletes one or more virtual sites.
 *
 * @param int|array $sids
 *   The virtual site to delete. Can be:
 *   - a single {virtual_sites}.sid identifier,
 *   - an array of {virtual_sites}.sid identifiers.
 */
function virtual_site_delete($sids) {
  if (is_numeric($sids)) {
    $sids = array($sids);
  }
  db_delete('virtual_sites')
    ->condition('sid', $sids, 'IN')
    ->execute();
}
