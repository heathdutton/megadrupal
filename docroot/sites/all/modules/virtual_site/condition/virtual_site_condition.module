<?php
/**
 * @file
 * VS Conditions - main module file.
 */

/**
 * Condition flags.
 */
define('CONDITION_NONE', 'none');
define('CONDITION_ANY', 'or');
define('CONDITION_ALL', 'and');
define('CONDITION_NOT_ALL', 'nand');
define('CONDITION_NEVER', 'false');
define('CONDITION_ALWAYS', 'true');
define('CONDITION_NOT_ANY', 'nor');
define('CONDITION_FALSE', 'false');
define('CONDITION_TRUE', 'true');
define('CONDITION_SKIP', 'skip');

/**
 * Implements hook_menu().
 */
function virtual_site_condition_menu() {
  $items = array();

  $items['admin/structure/virtual-site/condition'] = array(
    'title' => 'Conditions',
    'description' => 'Configure conditions other modules use to trigger actions.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('virtual_site_condition_list_form'),
    'access arguments' => array('administer conditions'),
    'file' => 'virtual_site_condition.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/structure/virtual-site/condition/list'] = array(
    'title' => 'Conditions',
    'weight' => -10,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/structure/virtual-site/condition/add'] = array(
    'title' => 'Add',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('virtual_site_condition_edit_form'),
    'access arguments' => array('administer conditions'),
    'type' => MENU_CALLBACK,
    'file' => 'virtual_site_condition.admin.inc',
  );
  $items['admin/structure/virtual-site/condition/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('virtual_site_condition_edit_form', 4),
    'access arguments' => array('administer conditions'),
    'type' => MENU_CALLBACK,
    'file' => 'virtual_site_condition.admin.inc',
  );
  $items['admin/structure/virtual-site/condition/%/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('virtual_site_condition_delete_form', 4),
    'access arguments' => array('administer conditions'),
    'type' => MENU_CALLBACK,
    'file' => 'virtual_site_condition.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function virtual_site_condition_permission() {
  return array(
    'administer conditions' => array(
      'title' => t('Administer conditions'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function virtual_site_condition_theme() {
  return array(
    'virtual_site_condition_list_form' => array(
      'render element' => 'form',
      'file' => 'virtual_site_condition.admin.inc',
      ),
  );
}

/**
 * Implements hook_help().
 */
function virtual_site_condition_help($path, $arg) {
  switch ($path) {
    case 'admin/structure/virtual-site/condition':
      return '<p>'. t('Conditions are sets of requirements that make the condition met <em>(TRUE)</em> or not <em>(FALSE)</em>. Use the built-in condition types or the Condition API to trigger some kind of action (eg. switch theme to <em>Garland)</em> in case a condition is met.') .'</p>';
  }
}

/**
 * Loads one, more or all conditions.
 *
 * @param $cid
 *   (Optional) The conditions to load. Can be:
 *   - a single {virtual_site_conditions}.cid identifier,
 *   - an array of {virtual_site_conditions}.cid identifiers,
 *   - empty (all conditions will be loaded).
 *
 * @return
 *   An array of condition objects.
 *
 * @see virtual_site_condition_menu()
 */
function _virtual_site_condition_load($cid = NULL) {
  static $conditions;

  if (is_numeric($cid)) {
    if (!isset($conditions[$cid])) {
      $new_condition = db_query("SELECT * FROM {virtual_site_conditions} WHERE cid = :condition", array(
        ':condition' => $cid,
      ))->fetchObject();
      $new_condition->parameters = (array) unserialize($new_condition->parameters);
      $conditions[$cid] = $new_condition;
    }
    return $conditions[$cid];
  }
  elseif (is_array($cid) && count($cid)) {
    if (!isset($conditions[reset($cid)])) {
      $new_conditions = db_select('virtual_site_conditions', 'c')
        ->fields('c')
        ->condition('c.cid', $cid, 'IN')
        ->orderBy('c.weight', 'ASC')
        ->execute()
        ->fetchAll();
      foreach ($new_conditions as $key => $new_condition) {
        $new_conditions[$key]->parameters = (array) unserialize($new_condition->parameters);
        $conditions[$new_condition->cid] = $new_condition;
      }
    }
    return array_intersect_key((array)$conditions, array_flip($cid));
  }
  else {
    $conditions = array();
    $new_conditions = db_query("SELECT * FROM {virtual_site_conditions} ORDER BY weight ASC")->fetchAll();
    foreach ($new_conditions as $key => $new_condition) {
      $new_conditions[$key]->parameters = (array) unserialize($new_condition->parameters);
      $conditions[$new_condition->cid] = $new_condition;
    }
    return $conditions;
  }
}

/**
 * Saves one or more conditions.
 *
 * @param $conditions
 *   The conditions to save. Can be:
 *   - a single condition object,
 *   - an array of condition objects.
 */
function _virtual_site_condition_save($save) {
  if (!is_array($save)) {
    $save = array($save);
  }
  foreach ($save as $condition) {
    $key = (isset($condition->cid) && $condition->cid) ? 'cid' : array();
    drupal_write_record('virtual_site_conditions', $condition, $key);
  }
}

/**
 * Deletes one or more conditions.
 *
 * @param $cids
 *   The conditions to delete. Can be:
 *   - a single {virtual_site_conditions}.cid identifier,
 *   - an array of {virtual_site_conditions}.cid identifiers.
 */
function _virtual_site_condition_delete($cids) {
  if (is_numeric($cids)) {
    $cids = array($cids);
  }
  db_delete('virtual_site_conditions')
    ->condition('cid', $cids, 'IN')
    ->execute();
}

/**
 * Validates a condition.
 *
 * @param $condition
 *   The condition to validate.
 */
function _virtual_site_condition_validate($condition) {
  static $validations;

  if (is_array($validations) && isset($validations[$condition->cid])) {
    return $validations[$condition->cid];
  }

  if (!$condition->status) {
    return $validations[$condition->cid] = FALSE;
  }

  module_load_include('inc', 'virtual_site_condition', 'virtual_site_condition.basic');
  $requirements = array_merge(virtual_site_condition_requirement_info(), module_invoke_all('requirement_info'));
  if (is_array($requirements) && count($requirements)) {
    foreach ($requirements as $requirement => $info) {
      if ($condition->parameters[$requirement]) {
        if ($requirement($condition, $condition->parameters[$requirement]) === FALSE) {
          return $validations[$condition->cid] = FALSE;
        }
      }
    }
  }

  return $validations[$condition->cid] = TRUE;
}

/**
 * Form constructor for the selection of conditions.
 *
 * @param $context
 *   The validation context.
 *
 * @see virtual_site_condition_selection_submit()
 * @see virtual_site_condition_selection_validate()
 *
 * @ingroup forms
 */
function virtual_site_condition_selection_form($context) {
  $form = array();

  $form['conditions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Conditions'),
    '#description' => t('Restrict to situations where selected conditions (do not) validate.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
  );
  $form['conditions']['operator'] = array(
    '#type' => 'select',
    '#title' => t('Apply when'),
    '#options' => array(
      CONDITION_NEVER => t("NEVER validate"),
      CONDITION_ALWAYS => t("ALWAYS validate"),
      CONDITION_ANY => t('ANY selected condition is met'),
      CONDITION_ALL => t('ALL selected conditions are met'),
      CONDITION_NOT_ANY => t('ANY selected condition is NOT met'),
      CONDITION_NOT_ALL => t('ALL selected conditions are NOT met'),
    ),
    '#default_value' => isset($context['operator']) ? $context['operator'] : CONDITION_ANY,
  );

  $conditions = _virtual_site_condition_load();
  if (count($conditions)) {
    $options = array();
    foreach ($conditions as $condition) {
      $options[$condition->cid] = $condition->name .' ('. l(t('edit'), 'admin/structure/virtual-site/condition/'. $condition->cid .'/edit') .')';
    }
    $form['conditions']['selection'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Conditions'),
      '#options' => $options,
      '#default_value' => isset($context['selection']) ? (array) $context['selection'] : array(),
    );
  }
  else {
    $form['conditions']['selection'] = array(
      '#type' => 'item',
      '#title' => t('Conditions'),
      '#markup' => t('<a href="@add">Add a condition</a> first.', array('@add' => url('admin/structure/virtual-site/condition/add'))),
    );
  }

  return $form;
}

/**
 * Form submission handler for virtual_site_condition_selection_form().
 */
function virtual_site_condition_selection_submit($form, $form_state) {
  return array(
    'operator' => $form_state['values']['conditions']['operator'],
    'selection' => $form_state['values']['conditions']['selection'],
  );
}

/**
 * Form validation handler for virtual_site_condition_selection_form().
 */
function virtual_site_condition_selection_validate($parameters) {
  // We might get all form values instead of just ours.
  if (isset($parameters['conditions'])) {
    $parameters = $parameters['conditions'];
  }

  if (!$parameters['operator'] || !is_array($parameters['selection']) || $parameters['operator'] == CONDITION_NEVER) {
    return FALSE;
  }

  if ($parameters['operator'] == CONDITION_ALWAYS) {
    return TRUE;
  }

  $cids = array_filter($parameters['selection'], 'intval');
  $conditions = _virtual_site_condition_load($cids);
  $valid = 0;
  foreach ($conditions as $condition) {
    if (_virtual_site_condition_validate($condition)) {
      $valid++;
    }
  }

  switch ($parameters['operator']) {
    case CONDITION_ANY:
      return ($valid > 0);
    case CONDITION_ALL:
      return ($valid == count($conditions));
    case CONDITION_NOT_ANY:
      return ($valid != count($conditions));
    case CONDITION_NOT_ALL:
      return ($valid == 0);
    default:
      return FALSE;
  }
}
