<?php

/**
 * @file
 * Defines the database schema for the table that will store users' browser
 * records.
 */

/**
 * Implements hook_uninstall().
 */
function login_notify_uninstall() {
  // Delete our variables.
  variable_del('login_notify_enabled');
  variable_del('login_notify_roles_mode');
  variable_del('login_notify_roles');
  variable_del('login_notify_email_subject');
  variable_del('login_notify_email_body');
  variable_del('login_notify_email_blocked_subject');
  variable_del('login_notify_email_blocked_body');
}

/**
 * Implements hook_schema().
 *
 * Defines the database schema for our table login_notify_browsers.
 */
function login_notify_schema() {
  $schema['login_notify_browsers'] = array(
    'description' => 'Browsers identified by users.',
    'fields' => array(
      'browser_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The unique ID of this browser.',
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'User ID',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'description' => 'The unique name chosen by the user that identifies the browser.',
      ),
      'token' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'description' => 'The random token that identifies the browser in the cookie.',
      ),
      'locked' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Boolean indicating if this browser has been locked.',
      ),
      'deleted' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Boolean indicating if this browser has been deleted.',
      ),
      'bypass_user_agent' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Boolean indicating if this user agent can bypass the browser naming process.',
      ),
      'remember' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
        'description' => 'Boolean indicating if the user chose to remember the browser.',
      ),
      'ip_address' => array(
        'type' => 'varchar',
        'length' => '15',
        'not null' => TRUE,
        'default' => '',
        'description' => 'The IP address of the user when this browser was added (IPv4 only).',
      ),
      'user_agent' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The user agent of the browser when it was added.',
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for when the user added this browser.',
      ),
      'access' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Timestamp for previous time user accessed the site.',
      ),
    ),
    'primary key' => array('browser_id'),
    'unique keys' => array(
      'uid_token' => array('uid', 'token'),
      // Ideally we'd have a unique key for array('uid', 'name') but we can't
      // because when a browser is 'deleted' it isn't actually deleted, it's
      // just updated with 'deleted' => 1, and we need to allow someone to use
      // the same name as a browser that has been deleted.
    ),
    'foreign keys' => array(
      'uid' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'indexes' => array(
      'uid' => array('uid'),
      'name' => array('name'),
      'token' => array('token'),
      'access' => array('access'),
      'uid_bypass_user_agent_user_agent' => array(
        'uid',
        'bypass_user_agent',
        'user_agent',
      ),
    ),
  );
  return $schema;
}

/**
 * Adds the field bypass_user_agent to the table login_notify_browsers.
 */
function login_notify_update_7100() {
  db_add_field('login_notify_browsers', 'bypass_user_agent', array(
    'type' => 'int',
    'size' => 'tiny',
    'not null' => TRUE,
    'default' => 0,
    'description' => 'Boolean indicating if this user agent can bypass the browser naming process.',
  ));
  db_add_index('login_notify_browsers', 'uid_bypass_user_agent_user_agent', array(
    'uid',
    'bypass_user_agent',
    'user_agent',
  ));
}
