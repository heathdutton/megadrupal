<?php
/**
 * @file
 * The HTML5 FAPI module.
 */

define('MAGIC_FORMS_HTML5_VARS_PLACEHOLDER', 'magic_forms_html5_placeholder');
define('MAGIC_FORMS_HTML5_VARS_PLACEHOLDER_DEFAULT', TRUE);
define('MAGIC_FORMS_HTML5_PLACEHOLDER', 'html5-placeholder');

define('MAGIC_FORMS_HTML5_VARS_REQUIRED', 'magic_forms_html5_required');
define('MAGIC_FORMS_HTML5_VARS_REQUIRED_DEFAULT', TRUE);
define('MAGIC_FORMS_HTML5_REQUIRED', 'html5-required');

/**
 * Implements hook_theme().
 */
function magic_forms_html5_theme() {
  $items = array();

  $items['emailfield'] = array(
    'render element' => 'element',
  );

  $items['urlfield'] = array(
    'render element' => 'element',
  );

  $items['numberfield'] = array(
    'render element' => 'element',
  );

  return $items;
}

/**
 * Implements hook_element_info().
 */
function magic_forms_html5_element_info() {
  $items = array();

  $items['emailfield'] = array(
    '#input' => TRUE,
    '#size' => 60,
    '#maxlength' => 128,
    '#autocomplete_path' => FALSE,
    '#process' => array('ajax_process_form'),
    '#element_validate' => array('magic_forms_element_validate'),
    '#theme' => 'emailfield',
    '#theme_wrappers' => array('form_element'),
  );

  $items['urlfield'] = array(
    '#input' => TRUE,
    '#size' => 60,
    '#maxlength' => 128,
    '#autocomplete_path' => FALSE,
    '#process' => array('ajax_process_form'),
    '#element_validate' => array('magic_forms_element_validate'),
    '#theme' => 'urlfield',
    '#theme_wrappers' => array('form_element'),
  );

  $items['numberfield'] = array(
    '#input' => TRUE,
    '#size' => 60,
    '#maxlength' => 128,
    '#min_value' => 0,
    '#max_value' => 100,
    '#autocomplete_path' => FALSE,
    '#process' => array('ajax_process_form'),
    '#element_validate' => array('magic_forms_element_validate'),
    '#theme' => 'numberfield',
    '#theme_wrappers' => array('form_element'),
  );

  return $items;
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Alter the settings form, and place in HTML5 settings.
 */
function magic_forms_html5_form_magic_forms_settings_form_alter(&$form, &$form_state, $form_id) {
  $form['html5'] = array(
    '#type' => 'fieldset',
    '#title' => t('HTML5'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['html5'][MAGIC_FORMS_HTML5_VARS_PLACEHOLDER] = array(
    '#type' => 'checkbox',
    '#title' => t('Use description placeholder'),
    '#description' => t('Use the fields description as a field placeholder (only works with textfields, passwords and textareas).'),
    '#default_value' => variable_get(MAGIC_FORMS_HTML5_VARS_PLACEHOLDER, MAGIC_FORMS_HTML5_VARS_PLACEHOLDER_DEFAULT),
  );

  $form['html5'][MAGIC_FORMS_HTML5_VARS_REQUIRED] = array(
    '#type' => 'checkbox',
    '#title' => t('Use required attribute'),
    '#description' => t('Use the html5 required attribute.'),
    '#default_value' => variable_get(MAGIC_FORMS_HTML5_VARS_REQUIRED, MAGIC_FORMS_HTML5_VARS_REQUIRED_DEFAULT),
  );
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Alter the examples form, and place in examples of the HTML5 fields.
 */
function magic_forms_html5_form_magic_forms_example_form_alter(&$form, &$form_state, $form_id) {
  $form['html5_fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('HTML5 fields'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['html5_fields']['html5_email'] = array(
    '#type' => 'emailfield',
    '#title' => t('Email field'),
    '#description' => t('An HTML5 email field.'),
  );

  $form['html5_fields']['html5_url'] = array(
    '#type' => 'urlfield',
    '#title' => t('URL field'),
    '#description' => t('An HTML5 url field.'),
  );
}

/**
 * Implements hook_magic_forms_config_alter().
 *
 * Place the default settings into the config if not available.
 */
function magic_forms_html5_magic_forms_config_alter(&$config) {
  $config = array_merge(array(
    MAGIC_FORMS_HTML5_PLACEHOLDER => variable_get(MAGIC_FORMS_HTML5_VARS_PLACEHOLDER, MAGIC_FORMS_HTML5_VARS_PLACEHOLDER_DEFAULT) == TRUE,
    MAGIC_FORMS_HTML5_REQUIRED => variable_get(MAGIC_FORMS_HTML5_VARS_REQUIRED, MAGIC_FORMS_HTML5_VARS_REQUIRED_DEFAULT) == TRUE,
  ), $config);
}

/**
 * Implements hook_magic_forms_element_prerender_alter().
 */
function magic_forms_html5_magic_forms_element_prerender_alter(&$element, $config) {
  $cfg = $element['#magic-forms'];

  // Attempt to define placeholder's.
  if (!empty($cfg['placeholder']) || magic_forms_config_property(MAGIC_FORMS_HTML5_PLACEHOLDER, $config)) {
    $placeholder = FALSE;

    // The element's placeholder settings should take priority over the
    // variable. But first determine if the element already has a placeholder
    // attribute.
    if (isset($element['#attributes']['placeholder'])) {
      // The element already has a placeholder, so do nothing.
    }
    elseif (!empty($cfg['placeholder'])) {
      // The element has placeholder settings, if the placeholder = TRUE then
      // we will try to use the description or title, if the placeholder is a
      // string value then we will use that.
      if ($cfg['placeholder'] === TRUE && !empty($element['#description'])) {
        // The element has a description, so use this as a placeholder.
        $placeholder = $element['#description'];
        unset($element['#description']);
      }
      elseif ($cfg['placeholder'] === TRUE && !empty($element['#title'])) {
        // The element has a title, so use this as a placeholder.
        $placeholder = $element['#title'];
        unset($element['#title']);
      }
      elseif (is_string($cfg['placeholder'])) {
        // The placeholder is a string value.
        $placeholder = $cfg['placeholder'];
      }
    }
    elseif (magic_forms_config_property(MAGIC_FORMS_HTML5_PLACEHOLDER, $config)) {
      // The element does not have any placeholder settings, but the variable
      // is TRUE so attempt to use the elements description if available.
      if (!empty($element['#description'])) {
        $placeholder = $element['#description'];
        unset($element['#description']);
      }
    }

    if ($placeholder) {
      // The placeholder has been defined so add it to the element attributes.
      $element['#attributes']['placeholder'] = $placeholder;
    }
  }

  // The HTML5 required attribute.
  if (magic_forms_config_property(MAGIC_FORMS_HTML5_REQUIRED, $config) && !empty($element['#required'])) {
    $element['#attributes']['required'] = 'required';
  }
}

/**
 * Helper function for a generic input type theme.
 *
 * @param array $element
 *   The element array,
 * @param array $attributes
 *   The attributes to pass.
 *
 * @return string
 *   The HTML output.
 */
function _magic_forms_html5_inputfield($element, array $attributes) {
  element_set_attributes($element, $attributes);
  _form_set_class($element, array('form-text'));

  $extra = '';
  if ($element['#autocomplete_path'] && drupal_valid_path($element['#autocomplete_path'])) {
    drupal_add_library('system', 'drupal.autocomplete');
    $element['#attributes']['class'][] = 'form-autocomplete';

    $attributes = array();
    $attributes['type'] = 'hidden';
    $attributes['id'] = $element['#attributes']['id'] . '-autocomplete';
    $attributes['value'] = url($element['#autocomplete_path'], array('absolute' => TRUE));
    $attributes['disabled'] = 'disabled';
    $attributes['class'][] = 'autocomplete';
    $extra = '<input' . drupal_attributes($attributes) . ' />';
  }

  $output = '<input' . drupal_attributes($element['#attributes']) . ' />';

  return $output . $extra;
}

/**
 * The email field theme.
 */
function theme_emailfield($variables) {
  $element = $variables['element'];
  $element['#attributes']['type'] = 'email';
  return _magic_forms_html5_inputfield($element, array(
    'id', 'name', 'value', 'size', 'maxlength',
  ));
}

/**
 * The URL field theme.
 */
function theme_urlfield($variables) {
  $element = $variables['element'];
  $element['#attributes']['type'] = 'url';
  return _magic_forms_html5_inputfield($element, array(
    'id', 'name', 'value', 'size', 'maxlength',
  ));
}

/**
 * The numberfield theme.
 */
function theme_numberfield($variables) {
  $element = $variables['element'];
  $element['#attributes']['type'] = 'number';
  return _magic_forms_html5_inputfield($element, array(
    'id', 'name', 'value', 'size', 'maxlength', 'min', 'max',
  ));
}
