<?php

/**
 * @file
 * Main logic of UI Components.
 */

/**
 * Implements hook_entity_info().
 */
function uicomponents_entity_info() {
  $return = array(
    'uicomponent' => array(
      'label' => t('UI Component'),
      'controller class' => 'UIComponentController',
      'base table' => 'uicomponent',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'ucid',
        'bundle' => 'type',
        'path' => 'path',
        'template' => 'template',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
    ),
  );

  return $return;
}

class UIComponentController extends DrupalDefaultEntityController {}

/**
 * Implements hook_theme_registry_alter().
 */
function uicomponents_theme_registry_alter(&$registry_themes) {
  // Gets the templates only.
  $templates = array_filter($registry_themes, function($theme) {
    return $theme['type'] === 'theme_engine' && isset($theme['path']);
  });

  // Simple solution to avoid duplicates: delete everything.
  db_truncate('uicomponent')->execute();

  $css_files = uicomponents_find_files('css', $templates);

  $js_files = uicomponents_find_files('js', $templates);

  uicomponents_create_entities('css', $css_files);

  uicomponents_create_entities('js', $js_files);
}

/**
 * Find files next to a template.
 *
 * @param string $type
 *   The type of file to find.
 * @param array $templates
 *   Array of templates to scan.
 *
 * @return array
 *   Array of files found.
 */
function uicomponents_find_files($type, $templates) {
  $return = array();

  foreach ($templates as $template) {
    $path = DRUPAL_ROOT . DIRECTORY_SEPARATOR . $template['path'];
    $files = array();
    if ($handle = opendir($path)) {
      while (FALSE !== ($entry = readdir($handle))) {
        $files[] = $entry;
      }
    }

    $files = array_filter($files, function($file) use ($type) {
      return (bool) preg_match('/\.' . $type . '$/', $file);
    });

    foreach ($files as $file) {
      $return[] = array(
        'path' => $template['path'] .  DIRECTORY_SEPARATOR . $file,
        'template' => $template['path'] .  DIRECTORY_SEPARATOR .
          $template['template'] . '.tpl.php',
      );
    }
  }

  // There may be duplicates if two templates are in the same folder.
  return array_unique($return);
}

/**
 * Creates entities of specific type.
 *
 * @param string $type
 *   The type of entities to create.
 * @param array $files
 *   Array of files, on which to create the entities.
 */
function uicomponents_create_entities($type, $files) {
  $values = array();

  foreach ($files as $file) {
    $values[] = array(
      'type' => $type,
      'path' => $file['path'],
      'template' => $file['template'],
    );
  }

  $query = db_insert('uicomponent')
    ->fields(
      array(
        'type',
        'path',
        'template',
      )
    );

  // Recommended way for multiple-values inserts.
  foreach ($values as $value) {
    $query->values($value);
  }

  $query->execute();
}

/**
 * Implements hook_preprocess_html().
 */
function uicomponents_preprocess_html(&$vars) {
  $components = entity_load('uicomponent');
  foreach ($components as $component) {
    if ($component->type === 'css') {
      drupal_add_css($component->path);
    }
    elseif ($component->type === 'js') {
      drupal_add_js($component->path);
    }
  }
}
