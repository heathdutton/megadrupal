<?php
/**
 * @file
 * UUID support for roles
 */

define('UUID_ROLE_ADMIN_UUIDS', FALSE);

/**
 * Implements hook_uuid_sync().
 */
function uuidrole_uuid_sync() {
  module_load_include('inc', 'uuid');
  // Resave all roles to generate the UUID as required
  $roles = user_roles();
  foreach ($roles as $key => $role) {
    // Reload the role to include all fields
    $role = user_role_load($key);
    uuidrole__save($role);
  }
}

/**
 * Implements hook_user_load().
 */
function uuidrole_user_load($users) {
  foreach ($users as $user) {
    foreach ($user->roles as $rid => $name) {
      $role = user_role_load($rid);
      $user->uuidroles[$role->uuid] = $role->name;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function uuidrole_form_user_admin_roles_alter(&$form, &$form_state) {
  if (UUID_ROLE_ADMIN_UUIDS) {
    $roles = user_roles();
    foreach ($roles as $rid => $role) {
      $ro = user_role_load($rid);
      $form['roles'][$rid]['#role']->name = $ro->name . ' (' . $ro->uuid . ')';
    }
  }
  array_unshift($form['add']['#submit'], '_uuidrole_form_user_admin_roles_generate_uuid');
}

/**
 * Generates a new uuid for new roles.
 */
function _uuidrole_form_user_admin_roles_generate_uuid(&$form, &$form_state) {
  module_load_include('inc', 'uuid');
  $form_state['values']['uuid'] = uuid_generate();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function uuidrole_form_user_admin_role_alter(&$form, &$form_state) {
  $rid = $form['rid']['#value'];

  $role = user_role_load($rid);

  $form['disabled_uuid'] = array(
    '#type' => 'textfield',
    '#title' => t('UUID'),
    '#default_value' => isset($form_state['values']['uuid']) ? $form_state['values']['uuid'] : $role->uuid,
    '#disabled' => TRUE,
  );

  if (UUID_ROLE_ADMIN_UUIDS) {
    $form['uuid'] = $form['disabled_uuid'];
    $form['uuid']['#disabled'] = FALSE;
    unset($form['disabled_uuid']);
  }
}


/**
 * Load a role by UUID.
 *
 * @param string $uuid
 *  UUID of the role
 * @see user_load_role_by_name().
 */
function uuidrole__load($uuid) {
  return db_select('role', 'r')->fields('r')->condition('uuid', $uuid)->execute()->fetchObject();
}

/**
 * Delete a role by UUID
 *
 * @param string $uuid
 *  Role UUID
 * @see user_role_delete().
 */
function uuidrole__delete($uuid) {
  $role = uuidrole__load($uuid);
  if (!empty($role->rid)) {
    return user_role_delete($role->rid);
  }
}

/**
 * Save a role and assign a UUID
 *
 * @param object $role
 *  Role object
 * @return integer|boolean
 *  Returns SAVED_NEW or SAVED_UPDATED on success, FALSE otherwise.
 * @see user_role_save().
 */
function uuidrole__save($role) {
  if (empty($role->uuid)) {
    module_load_include('inc', 'uuid');
    $role->uuid = uuid_generate();
  }
  return user_role_save($role);
}

/**
 * Implementation of user_roles() with the exception that the returned array is keyed on UUID
 *
 * @see user_roles().
 */
function uuidrole_roles($membersonly = FALSE, $permission = NULL) {
  $query = db_select('role', 'r');
  $query->addTag('translatable');
  $query->fields('r', array('rid', 'name', 'uuid'));
  $query->orderBy('weight');
  $query->orderBy('name');
  if (!empty($permission)) {
    $query->innerJoin('role_permission', 'p', 'r.rid = p.rid');
    $query->condition('p.permission', $permission);
  }
  $result = $query->execute();

  $roles = array();
  foreach ($result as $role) {
    switch ($role->rid) {
      // We only translate the built in role names
      case DRUPAL_ANONYMOUS_RID:
        if (!$membersonly) {
          $roles[$role->uuid] = t($role->name);
        }
        break;
      case DRUPAL_AUTHENTICATED_RID:
        $roles[$role->uuid] = t($role->name);
        break;
      default:
        $roles[$role->uuid] = $role->name;
    }
  }

  return $roles;
}

/**
 * Checks if a user has a role by UUID.
 *
 * @param int $rid
 *   A role ID.
 * @param object|null $account
 *   (optional) A user account. Defaults to the current user.
 *
 * @return bool
 *   TRUE if the user has the role, or FALSE if not.
 * @see user_has_role().
 */
function uuidrole_has_role($uuid, $account = NULL) {
  if (!$account) {
    $account = $GLOBALS['user'];
  }

  return isset($account->uuidroles[$uuid]);
}

/**
 * Implements of hook_ctools_plugin_directory().
 */
function uuidrole_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools') {
    return 'plugins/' . $plugin_type;
  }
}
