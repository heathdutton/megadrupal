<?php
// $Id$

/**
 * @file
 * Add Google tracking parameters to the core node RSS feed links
 *
 * @author Vojtech Kusy <wojtha@gmail.com>, http://vojtechkusy.com
 *
 * Google resource:
 * http://www.google.com/support/googleanalytics/bin/answer.py?hl=en&answer=55578
 *
 */

/**
 * Implementats hook_menu().
 */
function rsstrack_menu() {
  $items = array();

  $items['admin/config/services/rss-track'] = array(
    'title' => 'RSS tracking',
    'description' => 'Configure the Google Analytics RSS tracking.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rsstrack_system_feeds_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'rsstrack.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function rsstrack_menu_alter(&$callbacks) {
  $path = drupal_get_path('module', 'rsstrack');

  // Node feeds
  $callbacks['rss.xml']['page callback'] = 'rsstrack_node_feed';
  $callbacks['rss.xml']['file path'] = $path;
  $callbacks['rss.xml']['file'] = 'rsstrack.inc';

  // Taxonomy feeds
  if (module_exists('taxonomy')) {
    $callbacks['taxonomy/term/%taxonomy_term/feed']['page callback'] = 'taxonomy_term_feed';
    $callbacks['taxonomy/term/%taxonomy_term/feed']['file path'] = $path;
    $callbacks['taxonomy/term/%taxonomy_term/feed']['file'] = 'rsstrack.inc';
  }

  // Blog feeds
  if (module_exists('blog')) {
    $callbacks['blog/%user/feed']['page callback'] = 'rsstrack_blog_feed_user';
    $callbacks['blog/%user/feed']['file path'] = $path;
    $callbacks['blog/%user/feed']['file'] = 'rsstrack.inc';

    $callbacks['blog/feed']['page callback'] = 'rsstrack_blog_feed_last';
    $callbacks['blog/feed']['file path'] = $path;
    $callbacks['blog/feed']['file'] = 'rsstrack.inc';
  }
}

/**
 * Construct array of the Google RSS tracking parameters.
 *
 * Desired use:
 *   url('some/url', array('absolute' => TRUE, 'query' => rsstrack_get_node_query_params());
 *   l(t('Link text'), 'some/url', array('absolute' => TRUE, 'query' => rsstrack_get_node_query_params())
 *
 * @return array
 *   An array of the URL query parameters
 */
function rsstrack_get_node_query_params($node = NULL) {
  static $raw_query = NULL;
  $query = array();

  if (is_null($raw_query)) {
    $raw_query = array();

    // Process GA params.
    foreach (array('source', 'medium', 'term', 'content', 'campaign') as $param) {
      $raw_query["utm_$param"] = filter_xss(trim(variable_get("rsstrack_utm_$param", '')));
    }
    $raw_query = array_filter($raw_query, 'strlen');

    // Process custom tracking code.
    $custom = trim(variable_get('rsstrack_custom', ''));
    if (strlen($custom)) {
      $custom_parsed = _rsstrack_parse_custom_code($custom);
      foreach ($custom_parsed as $param => $value) {
        $raw_query[$param] = $value;
      }
    }
  }

  // Replace Drupal tokens.
  if (variable_get('rsstrack_use_tokens', 0)) {
    if (!is_null($node) && $node instanceof stdClass) {
      $token_data = array('node' => $node);
    }
    else {
      $token_data = array();
    }
    foreach ($raw_query as $key => $value) {
      $query[$key] = token_replace($value, $token_data);
    }
  }
  else {
    $query = & $raw_query;
  }

  return $query;
}

/**
 * Check if Tokens module is active and tokens uses
 *
 * @return bool
 */
function _rsstrack_is_using_tokens() {
  if (module_exists('token')) {    
    $strings = '';
    foreach (array('utm_source', 'utm_medium', 'utm_term', 'utm_content', 'utm_campaign', 'custom') as $param) {
      $strings .= variable_get("rsstrack_$param", '');
    }
    return (bool) preg_match('/\[[\w\d:-_]+\]/', $strings);
  }
  return FALSE;
}

/**
 * Parse custom tracking code (one key pair value per line)
 *
 * @param string $text
 * @return array
 */
function _rsstrack_parse_custom_code($text) {
  $values = array();
  $list = explode("\n", $text);
  $list = array_map('trim', $list);
  $list = array_filter($list, 'strlen');
  foreach ($list as $opt) {
    // Sanitize the user input with a permissive filter.
    $opt = filter_xss($opt);
    $key = $value = '';
    if (strpos($opt, '=') !== FALSE) {
      list($key, $value) = explode('=', $opt);
      $values[$key] = (isset($value) && $value !== '') ? $value : $key;
    } else {
      return $values[$opt] = '';
    }
  }
  return $values;
}
