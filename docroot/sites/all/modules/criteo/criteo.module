<?php
/**
 * @file
 * criteo.module
 *
 * Implements Tags for the Criteo Product Recommendation service.
 */

/**
 * Implements template_preprocess_html().
 */
function criteo_preprocess_html(&$vars) {
  // @todo Allow to exclude certain roles from being tracked.
  if (drupal_is_front_page()) {
    _criteo_events(array('event' => 'viewHome'));
  }
  $products_viewed = _criteo_view_list();
  if (!empty($products_viewed)) {
    _criteo_events(array('event' => 'viewList', 'product' => array_values($products_viewed)));
  }

  $events = _criteo_events();
  if (!empty($events)) {
    // If there's no ui_existing event, add the right one.
    if (!array_key_exists('setData', $events) || !array_key_exists('ui_existing', $events['setData'])) {
      // Set to zero for anonymous, 1 for logged in users.
      $events['setData'] = array(
        'event' => 'setData',
        'ui_existing' => user_is_anonymous() ? 0 : 1,
      );
    }

    // Add the User ID, if authenticated. Do this at the last possible
    // moment, in case the user authenticated during this request.
    if (user_is_logged_in() && !array_key_exists('setCustomerId', $events)) {
      $events['setCusomerId'] = array(
        'event' => 'setCustomerId', 'id' => $GLOBALS['user']->uid,
      );
    }

    // The following  avoids drupal_add_js() because it doesn't support the
    // async attribute yet. https://drupal.org/node/1140356
    $lib = array(
      '#tag' => 'script',
      '#attributes' => array(
        'type' => "text/javascript",
        'src' => '//static.criteo.net/js/ld/ld.js',
      ),
      // The empty value is necessary to build script tags correctly.
      '#value' => '',
      '#pre_render' => array('drupal_pre_render_conditional_comments'),
      '#weight' => 1000,
    );

    // Old IEs don't support async, so use defer instead.
    $lib['#browsers'] = array('IE' => 'lt IE 10', '!IE' => FALSE);
    // The 'defer' value is consistent with how Drupal does it.
    $lib['#attributes']['defer'] = 'defer';
    drupal_add_html_head($lib, 'criteo_ie');

    // Current browsers get async.
    $lib['#browsers'] = array('IE' => 'gte IE 10');
    unset($lib['#attributes']['defer']);
    // The 'true' value is consistent with how Criteo recommends it.
    $lib['#attributes']['async'] = 'true';
    drupal_add_html_head($lib, 'criteo');

    // Build a string of javascript containing the event objects.
    $events_json = implode(',', array_map('json_encode', $events));
    $script = 'window.criteo_q = window.criteo_q || []; window.criteo_q.push(' . $events_json . ');';
    drupal_add_js($script, 'inline');
  }
}

/**
 * API function that stores tags added to the page.
 *
 * @param array $new_event
 *   Optional array of event parameters. Must include an 'event' key and value.
 *
 * @return array
 *   Returns events recorded within a page request.
 *
 * @throws Exception
 */
function _criteo_events($new_event = NULL) {
  $events = &drupal_static(__FUNCTION__);
  // It's not clear form the Criteo documentation if these are required to be
  // first, but they are in all the examples. If it doesn't matter, it might be
  // better to move this to criteo_preprocess_html() to handle in the same way
  // as 'setCustomerId'.
  if (empty($events) && $new_event !== NULL) {
    $events = array(
      'setAccount' => array('event' => 'setAccount', 'account' => variable_get('criteo_account')),
      'setSiteType' => array('event' => 'setSiteType', 'type' => 'd'),
    );
  }

  if (is_array($new_event) && isset($new_event['event'])) {
    $events[$new_event['event']] = $new_event;
  }
  elseif (isset($new_event)) {
    throw new Exception("Invalid data. Parameter must be an array with an 'event' key.");
  }

  return $events;
}

/**
 * API function that stores IDs for building a viewList Criteo event.
 *
 * @param mixed $product_id
 *   A single product id, or an array of ids to add to the event.
 *
 * @return array
 *   Returns product_ids recorded within a page request.
 */
function _criteo_view_list($product_id = NULL) {
  $list = &drupal_static(__FUNCTION__);
  if (is_array($product_id)) {
    $list = array_merge($list, $product_id);
  }
  elseif ($product_id) {
    $list[$product_id] = $product_id;
  }
  return $list;
}
