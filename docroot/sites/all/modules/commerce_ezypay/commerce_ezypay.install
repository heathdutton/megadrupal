<?php
/*
 * @file commerce_ezypay.install
 * Provides requirements/install hooks for the module
 * @copyright Copyright(c) 2011 Rowlands Group
 * @license GPL v3 http://www.fsf.org/licensing/licenses/gpl.html
 * @author Lee Rowlands leerowlands at rowlandsgroup dot com
 * 
 */

/**
 * Implements hook_requirements
*/
function commerce_ezypay_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time
  $t = get_t();

  // Test Soap Client
  $soap_status = $t('Not Installed');
  $additional = array(
    'description' => $t('Your server does not have the PHP soap extension installed. Please consult the <a href="!url">PHP manual</a>.', array('!url' => "http://www.php.net/manual/en/book.soap.php")),
    'severity' => REQUIREMENT_ERROR
  );
  if (class_exists('SoapClient')) {
    $soap_status = $t('Installed');
    $additional = array(
      'description' => $t('Your server has the PHP soap extension installed.'),
      'severity' => REQUIREMENT_OK
    );
  }
  $requirements['commerce_ezypay_soap'] = array(
    'title' => $t('Soap Client'),
    'value' => ($phase == 'runtime') ? l($soap_status, 'admin/reports/status/php') : $soap_status,
  );
  $requirements['commerce_ezypay_soap'] += $additional;
  
  // Test gpg is installed
  $soap_status = $t('Not Installed');
  $additional = array(
    'description' => $t('Your server does not have the gpg utility installed, please install the gnupg package on your server.'),
    'severity' => REQUIREMENT_ERROR
  );
  $return = $output = TRUE;
  exec("which gpg", $output, $return);
  if (!$return) {
    $soap_status = $t('Installed');
    $additional = array(
      'description' => $t('Your server has the gpg utlity installed.'),
      'severity' => REQUIREMENT_OK
    );
  }
  $requirements['commerce_ezypay_gpg'] = array(
    'title' => $t('GPG utilities'),
    'value' => ($phase == 'runtime') ? l($soap_status, 'admin/reports/status/php') : $soap_status,
  );
  $requirements['commerce_ezypay_gpg'] += $additional;
  
  if ($phase == 'runtime') {
  // Test directory
    $directory = variable_get('commerce_ezypay_gpg_path', FALSE);
    $requirements['Commerce Ezypay GPG Configuration'] = array(
      'title' => $t('Commerce Ezypay GPG Configuration'),
      'value' => $t('Path exists and is writeable'),
      'description' => $t('Directory for GPG keys: @path', array('@path' => $directory)),
      'severity' => REQUIREMENT_OK
    );
    if (substr($directory, -1) == '/') {
      //strip the trailing /
      $directory = substr($directory, 0, -1);
    }
    if ($directory) {
      $is_directory = is_dir($directory);
      $is_in_webroot = file_check_location($directory .'/dummy.txt', $_SERVER['DOCUMENT_ROOT'] . base_path());
      if ($is_in_webroot) {
        $requirements['Commerce Ezypay GPG Configuration']['description'] = $t(
          'The folder which is used to store GPG key files
          is inside the web root, for security of encryption - please
          <a href="!url">change it now</a>',
          array('!url' => url('admin/commerce/config/commerce-ezypay'))
        );
        $requirements['Commerce Ezypay GPG Configuration']['severity'] = REQUIREMENT_WARNING;
        $requirements['Commerce Ezypay GPG Configuration']['value'] = $t('Insecurely set');
      }
      if (!$is_directory) {
        $requirements['Commerce Ezypay GPG Configuration']['description'] = $t(
          'The folder which is used to store GPG key files
          does not exist, please <a href="!url">change it now</a>',
          array('!url' => url('admin/commerce/config/commerce-ezypay'))
        );
        $requirements['Commerce Ezypay GPG Configuration']['severity'] = REQUIREMENT_ERROR;
        $requirements['Commerce Ezypay GPG Configuration']['value'] = $t('Does not exist');
      }
    }
    else {
      $requirements['Commerce Ezypay GPG Configuration']['description'] = $t(
        'The folder which is used to store GPG key files
        is not set, please <a href="!url">set it now</a>',
        array('!url' => url('admin/commerce/config/commerce-ezypay'))
      );
      $requirements['Commerce Ezypay GPG Configuration']['severity'] = REQUIREMENT_ERROR;
      $requirements['Commerce Ezypay GPG Configuration']['value'] = $t('Not set');
    }
  }
  
  return $requirements;
}

/**
 * Implements hook_schema
*/
function commerce_ezypay_schema() {
  $schema = array();
  $schema['commerce_ezypay_customer_number'] = array(
    'description' => 'Stores ezypay customer numbers',
    'fields'      => array(
      'billing_profile_id' => array(
        'description'   => 'Commerce Billing Profile Id',
        'type'          => 'int',
        'size'          => 'medium',
        'not null'      => TRUE,
      ),
      'customer_number' => array(
        'description'   => 'Customer number returned by ezypay',
        'type'          => 'int',
        'size'          => 'big',
        'not null'      => TRUE,
      ),
    ),
    'primary key' => array('billing_profile_id'),
  );
  
  $schema['commerce_ezypay_processing'] = array(
    'description' => 'Records details of processing',
    'fields'      => array(
      'id' => array(
        'description'   => 'desc',
        'type'          => 'serial',
        'size'          => 'medium',
        'not null'      => TRUE,
      ),
      'order_id' => array(
        'description'   => 'Commerce Order Id',
        'type'          => 'int',
        'size'          => 'medium',
        'not null'      => TRUE,
      ),
      'status' => array(
        'description'   => 'Status see commerce_ezypay_processing_states',
        'type'          => 'int',
        'size'          => 'tiny',
        'not null'      => TRUE,
        'default'       => 0
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'status' => array('status'),
    )
  );
  
  return $schema;
}

/**
 * Implements hook_update_N
 * Update the commerce_ezypay_customer_number.customer_number field to be a big int
*/
function commerce_ezypay_update_7002() {
  db_change_field('commerce_ezypay_customer_number', 'customer_number', 'customer_number', array(
    'description'   => 'Customer number returned by ezypay',
    'type'          => 'int',
    'size'          => 'big',
    'not null'      => TRUE,
  ));
  return t('Successfully updated the customer number column size');
}

/**
 * Implements hook_update_N
 * Adds the commerce_ezypay_processing table
*/
function commerce_ezypay_update_7003() {
  $schema = commerce_ezypay_schema();
  db_create_table('commerce_ezypay_processing', $schema['commerce_ezypay_processing']);
}