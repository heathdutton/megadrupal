<?php

/**
 * @file
 * Defines Wikiloc field type.
 */

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function wikiloc_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'wikiloc_fields' => array(
      'label' => t('Wikiloc'),
      'description' => t('Wikiloc field iframe.'),
      'default_widget' => 'wikiloc_field_widget',
      'default_formatter' => 'wikiloc_field_formatter',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function wikiloc_field_formatter_info() {
  return array(
    'wikiloc_field_formatter' => array(
      'label' => t('Wikiloc iframe'),
      'field types' => array('wikiloc_fields'),
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function wikiloc_field_widget_info() {
  return array(
    'wikiloc_field_widget' => array(
      'label' => t('Wikiloc iframe'),
      'field types' => array('wikiloc_fields'),
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 *
 * We are forbidding the field from being empty so we can set default
 * values for all its elements
 *
 * @see wikiloc_field_formatter_view()
 */
function wikiloc_field_is_empty($item, $field) {
  return FALSE;
}

/**
 * Implements hook_field_validate().
 */
function wikiloc_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['id']) && !is_numeric($item['id'])) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'wikiloc_invalid_id',
        'message' => t(
          'The Wikiloc trail ID has to be numeric'
        ),
      );
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function wikiloc_field_widget_error($element, $error, $form, &$form_state) {
  if ($error['error'] == 'wikiloc_invalid_id') {
    // Handle the error that was set in wikiloc_field_validate()
      form_error($element, $error['message']);
  }
}

/**
 * Implements hook_field_formatter_view().
 *
 * @see wikiloc_field_formatter_info()
 */
function wikiloc_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the iframe.
    case 'wikiloc_field_formatter':
      foreach ($items as $delta => $item) {
        // Check if the ID is set and is numeric.
        if (!empty($item['id']) and is_numeric($item['id'])) {
          // Try to use localized map.
          $wik_url = 'http://' . $langcode . '.wikiloc.com/wikiloc';
          $wik_url_headers = @get_headers($wik_url);
          if (empty($wik_url_headers) or $wik_url_headers[0] == 'HTTP/1.1 404 Not Found') {
            // If no localized map available, default to english.
            $wik_url = 'http://www.wikiloc.com/wikiloc';
          }
          $wik_width = $item['width'];
          $wik_height = $item['height'];
          $query = array(
            'event' => 'view',
            'id' => $item['id'],
            'measures' => ($item['measures'] == 'on') ? 'on' : '',
            'near' => ($item['near'] == 'on') ? 'on' : '',
            'images' => ($item['images'] == 'on') ? 'on' : '',
            'maptype' => $item['maptype'],
          );
          $url = url($wik_url . '/spatialArtifacts.do', array('query' => $query));
          $attributes['scrolling'] = "no";
          $attributes['frameBorder'] = "0";
          $attributes['src'] = $url;
          $attributes['width'] = $wik_width;
          $attributes['height'] = $wik_height;

          $iframe = '<iframe' . drupal_attributes($attributes) . '></iframe>';

          $element[$delta] = array(
            '#markup' => $iframe,
          );
        }
      }
      break;

  }
  return $element;
}

/**
 * Implements hook_field_widget_form().
 *
 * The hook_widget_form() is where Drupal tells us to create form elements
 * for our field's widget.
 */
function wikiloc_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $item = isset($items[$delta]) ? $items[$delta] : NULL;
  // Thanks https://drupal.org/user/1455932 (seb_tsolutions).
  switch ($instance['widget']['type']) {

    case 'wikiloc_field_widget':

      $element += array(
        '#type' => 'fieldset',
        '#title' => t('Trail or waypoints (Wikiloc)'),
        '#langcode' => $langcode,
      );

      $element['id'] = array(
        '#type' => 'textfield',
        '#title' => t('Wikiloc Id'),
        '#size' => 10,
        '#maxlength' => 10,
        '#required' => FALSE,
        '#default_value' => (isset($item)) ? $item['id'] : '',
      );

      $element['measures'] = array(
        '#type' => 'select',
        '#title' => t('Trail data'),
        '#options' => array(
          'of' => t('Off'),
          'on' => t('On'),
        ),
        '#default_value' => (isset($item)) ? $item['measures'] : 'of',
        '#description' => t('Show trail data, like distance, max. and min. height, difficulty, completion time, etc...'),
      );

      $element['near'] = array(
        '#type' => 'select',
        '#title' => t('Show nearest location'),
        '#options' => array(
          'of' => t('Off'),
          'on' => t('On'),
        ),
        '#default_value' => (isset($item)) ? $item['near'] : 'of',
        '#description' => t('Show the nearest location to the trail'),
      );

      $element['images'] = array(
        '#type' => 'select',
        '#title' => t('Images'),
        '#options' => array(
          'of' => t('Off'),
          'on' => t('On'),
        ),
        '#default_value' => (isset($item)) ? $item['images'] : 'of',
        '#description' => t("Show trail's images"),
      );

      $element['maptype'] = array(
        '#type' => 'select',
        '#title' => t('Map type'),
        '#options' => array(
          'M' => t('Normal Map'),
          'S' => t('Satellite Map'),
          'H' => t('Hybrid Map'),
          'T' => t('Terrain (physical) Map'),
        ),
        '#default_value' => (isset($item)) ? $item['maptype'] : 'T',
      );

      $element['width'] = array(
        '#type' => 'textfield',
        '#title' => t('Iframe width'),
        '#default_value' => (isset($item)) ? $item['width'] : '100%',
        '#size' => 10,
        '#maxlength' => 10,
        '#description' => t('You can specify any valid HTML units (%, px, em, etc...). If no units specified, pixels will be used'),
      );
      $element['height'] = array(
        '#type' => 'textfield',
        '#title' => t('Iframe height'),
        '#default_value' => (isset($item)) ? $item['height'] : 400,
        '#size' => 10,
        '#maxlength' => 10,
        '#description' => t('You can specify any valid HTML units (%, px, em, etc...). If no units specified, pixels will be used'),
      );

      break;

  }
  return $element;
}
