<?php

/**
 * @file
 * TagCanvas - A HTML5 canvas based tag cloud.
 */

/**
 * Implements hook_form_alter().
 */
function tagcanvas_form_block_admin_configure_alter(&$form, &$form_state) {
  if ($form['module']['#value'] == 'tagadelic') {
    $form['settings']['enable_tagcanvas'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display using TagCanvas.'),
      '#default_value' => variable_get('tagcanvas_block_tags_' . $form['delta']['#value'], 0),
    );

    $form['settings']['tagcanvas_options'] = array(
      '#title' => t('TagCanvas options'),
      '#type' => 'textarea',
      '#required' => TRUE,
      '#description' => t('Put the options in json format. You can find a list of all the available options at !url.<br />Additional options provided by this module are <em>canvasHeight</em>, <em>canvasWidth</em> in px, or "auto" to take its parent height/width.', array('!url' => l('http://www.goat1000.com/tagcanvas.php#optionList', 'http://www.goat1000.com/tagcanvas.php#optionList'))),
      '#default_value' => variable_get('tagcanvas_block_tags_options_' . $form['delta']['#value'], tagcanvas_get_default_settings(TRUE, TRUE)),
      '#states' => array(
        'invisible' => array(
          'input[name="enable_tagcanvas"]' => array('checked' => FALSE),
        ),
      ),
    );

    $form['#submit'][] = 'tagcanvas_form_submit';
  }
}

/**
 * Implements submit callback for block configuration.
 */
function tagcanvas_form_submit($form, &$form_state) {
  variable_set('tagcanvas_block_tags_' . $form_state['values']['delta'], $form_state['values']['enable_tagcanvas']);
  variable_set('tagcanvas_block_tags_options_' . $form_state['values']['delta'], $form_state['values']['tagcanvas_options']);
}

/**
 * Implements hook_block_view_alter().
 */
function tagcanvas_block_view_alter(&$data, $block) {
  if ($block->module == 'tagadelic'
    && variable_get('tagcanvas_block_tags_' . $block->delta, FALSE)
  ) {

    $options = drupal_json_decode(variable_get('tagcanvas_block_tags_options_' . $block->delta, tagcanvas_get_default_settings(TRUE)));
    $options['tagcanvas']['cssSelector'] = 'block-tagadelic-' . $block->delta . ' .item-list';
    $options['tagcanvas']['canvasId'] = 'tagcanvas-' . $block->delta;

    tagcanvas_add_tagcanvas($options);
  }
}

/**
 * This is an API. Call this function to add tagcanvas.
 *
 * @param array $options - See README.txt for details
 */
function tagcanvas_add_tagcanvas($settings = array()) {
  static $added = FALSE;

  // Add TagCanvas jQuery plugin
  if (!$added && $lib = tagcanvas_get_library()) {
    $path = drupal_get_path('module', 'tagcanvas');

    // for IE
    if (function_exists('libraries_get_path')) {
      $expath = libraries_get_path('excanvas_r3') . '/excanvas.compiled.js';
      if (file_exists($expath)) {
        $exhtml = array(
          '#type' => 'markup',
          '#markup' => '<!--[if IE lte 8]><script language="javascript" type="text/javascript" src="/' . $expath . '"></script><![endif]-->',
        );
        drupal_add_html_head($exhtml, 'tagcanvas');
      }
    }

    drupal_add_js($lib);
    // set a heavy weight to load after google_webfont_loader_api js file
    drupal_add_js($path . '/js/tagcanvas.js', array('weight' => 10));

    if (module_exists('google_webfont_loader_api')) {
      $settings['tagcanvas']['google_webfont_loader_api'] = TRUE;
    }
    drupal_add_js($settings, 'setting');
    $added = TRUE;
  }
}

/**
 * Get the location of the TagCanvas jquery library.
 *
 * @return
 *   The location of the library, or FALSE if the library isn't installed.
 */
function tagcanvas_get_library() {
  $path = FALSE;

  if (function_exists('libraries_get_path')) {
    $path = libraries_get_path('tagcanvas') . '/jquery.tagcanvas.min.js';
    if (!file_exists($path)) {
      $path = libraries_get_path('tagcanvas') . '/jquery.tagcanvas.js';
    }
    elseif (!file_exists($path)) {
      $path = FALSE;
    }
  }
  elseif (file_exists('sites/all/libraries/tagcanvas/jquery.tagcanvas.min.js')) {
    $path = 'sites/all/libraries/tagcanvas/jquery.tagcanvas.min.js';
  }
  elseif (file_exists('sites/all/libraries/tagcanvas/jquery.tagcanvas.js')) {
    $path = 'sites/all/libraries/tagcanvas/jquery.tagcanvas.js';
  }

  return $path;
}

/**
 * Default js settings for tagcanvas.
 */
function tagcanvas_get_default_settings($json = FALSE, $pretty_print = FALSE) {
  $defaults['tagcanvas'] = array(
    'canvasHeight' => 'auto',
    'canvasWidth' => 'auto',
    // 'interval' => 20,
    'maxSpeed' => 0.08,
    'minSpeed' => 0.0,
    'decel' => 0.95,
    // 'minBrightness' => 0.1,
    'textColour' => '#000000',
    'textHeight' => 15,
    'textFont' => 'Helvetica, Arial, sans-serif',
    'outlineColour' => '#000000',
    'outlineMethod' => 'outline',
    'outlineThickness' => 1,
    'outlineOffset' => 5,
    // 'pulsateTo' => 1.0,
    // 'pulsateTime' => 3,
    // 'depth' => 0.5,
    'initial' => array(0.1, -0.1),
    // 'freezeActive' => false,
    // 'activeCursor' => 'pointer',
    // 'frontSelect' => FALSE,
    'txtOpt' => TRUE,
    'txtScale' => 2,
    // 'reverse' => false,
    // 'hideTags' => true,
    // 'zoom' => 1.0,
    'wheelZoom' => FALSE,
    // // 'zoomStep' => 0.05,
    // // 'zoomMax' => 3.0,
    // // 'zoomMin' => 0.3,
    // // 'shadow' => '#000000',
    // // 'shadowBlur' => 0,
    // // 'shadowOffset' => "[0,0]",
    'weight' => TRUE,
    'weightMode' => 'size',
    // 'weightSize' => 1.0,
    // 'weightGradient' => array('0' => '#f00', '0.33' => '#ff0', '0.66' => '#0f0', '1' =>'#00f'),
    // 'weightFrom' => null,
    // 'weightFrom' => 'data-weight',
    // 'shape' => 'sphere',
    // 'lock' => null,
    // 'radiusX' => 1,
    // 'radiusY' => 1,
    // 'radiusZ' => 1,
    // 'stretchX' => 1,
    // 'stretchY' => 1,
    // 'shuffleTags' => false,
    // 'noSelect' => false,
    // 'noMouse' => false,
    // 'imageScale' => 1,
  );

  if ($json) {
    $jsonString = drupal_json_encode($defaults);

    // simple pretty print formatter
    if ($pretty_print) {
      $jsonString = tagcanvas_json_pretty_print($jsonString);
    }

    return $jsonString;
  }

  return $defaults;
}

/**
 * Implements hook_theme_registry_alter().
 */
function tagcanvas_theme_registry_alter(&$theme_registry) {
  if (!empty($theme_registry['tagadelic_weighted'])) {
    $theme_registry['tagadelic_weighted']['function'] = 'tagcanvas_tagadelic_weighted';
  }
}

/**
 * Theme function that renders the HTML for the tags.
 *
 * @ingroup themable
 */
function tagcanvas_tagadelic_weighted($vars) {
  $terms = $vars['terms'];

  $items = array();
  $output = '';

  if (isset($terms[0])) {
    $vid = $terms[0]->vid;

    if (variable_get('tagcanvas_block_tags_' . $vid, FALSE)) {
      $settings = tagcanvas_get_default_settings();

      $output = '<div id="tagcanvas-' . $vid . '-container">
          <canvas id="tagcanvas-' . $vid . '">
            <p>Your browser does not support canvas.</p>
          </canvas>
        </div>';

      foreach ($terms as $term) {
        $items[] = l($term->name, 'taxonomy/term/' . $term->tid, array(
            'attributes' => array(
              'class' => array('tagadelic', 'level' . $term->weight),
              'rel' => 'tag',
              'title' => $term->description,
              // 'data-weight' => $term->weight,
            ),
          )
        );
      }

      $output .= theme('item_list', array('items' => $items, 'type' => 'ul'));
    }
    else {
      $output = theme_tagadelic_weighted($vars);
    }
  }

  return $output;
}

/**
 * Indents a flat JSON string to make it more human-readable.
 * http://recursive-design.com/blog/2008/03/11/format-json-with-php/
 *
 * @param string $json The original JSON string to process.
 *
 * @return string Indented version of the original JSON string.
 */
function tagcanvas_json_pretty_print($json) {

  $result      = '';
  $pos         = 0;
  $strLen      = strlen($json);
  $indentStr   = '  ';
  $newLine     = "\n";
  $prevChar    = '';
  $outOfQuotes = TRUE;

  for ($i = 0; $i <= $strLen; $i++) {

    // Grab the next character in the string.
    $char = substr($json, $i, 1);

    // Are we inside a quoted string?
    if ($char == '"' && $prevChar != '\\') {
      $outOfQuotes = !$outOfQuotes;

      // If this character is the end of an element,
      // output a new line and indent the next line.
    }
    elseif (($char == '}' || $char == ']') && $outOfQuotes) {
      $result .= $newLine;
      $pos--;
      for ($j = 0; $j < $pos; $j++) {
        $result .= $indentStr;
      }
    }

    // Add the character to the result string.
    $result .= $char;

    // If the last character was the beginning of an element,
    // output a new line and indent the next line.
    if (($char == ',' || $char == '{' || $char == '[') && $outOfQuotes) {
      $result .= $newLine;
      if ($char == '{' || $char == '[') {
        $pos++;
      }

      for ($j = 0; $j < $pos; $j++) {
        $result .= $indentStr;
      }
    }

    $prevChar = $char;
  }

  return $result;
}

