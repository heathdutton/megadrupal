<?php
/**
 * @file
 * Code for the Time tracker feature.
 */
define('TIMETRACKER_TRACK_THEME', 'stark');

include_once 'timetracker.features.inc';

/*
 * Implements hook_menu().
 */
function timetracker_menu() {
  $items = array();

  $items['timetracker/track/%node'] = array(
    'title' => 'Time track table',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('timetracker_table_form', 2, 3),
    'delivery callback' => 'timetracker_deliver_html',
    'theme callback' => 'timetracker_table_form_theme_callback',
    'access arguments' => array('track time'),
    'file' => 'includes/timetracker.table.form.inc',
  );

  return $items;
}

/**
 * Theme callback for time tracker table page.
 */
function timetracker_table_form_theme_callback() {
  return TIMETRACKER_TRACK_THEME;
}

/**
 * Find the time tracks for a given user in a given range.
 *
 * @param $user
 *   User object.
 * @param $range
 *   Time Entry object with the range.
 *
 * @return
 *   An array of matched time entry objects.
 */
function timetracker_find_by_user($user, $range) {
  $return = array();

  $fields = array(
    'field_timetrack_user' => array(
      'column' => 'target_id',
      'value' => $user->uid,
      'operator' => '=',
    ),
  );

  $result = time_entry_get_time_entry_ids_by_period($range->time * 1, $range->end * 1, 'timetrack', $fields);
  if (!empty($result['time_entry'])) {
    $return = entity_load('time_entry', array_keys($result['time_entry']));
  }

  return $return;
}

/**
 * Find the time tracks for a given user in a given range AND
 * a list of entities previously loaded with timetracker_find_by_user.
 * It is essentially a better performing version of timetracker_find_by_user().
 *
 * @param $range
 *   Time Entry object with the range.
 * @param $time_entries
 *   A list of entities loaded with timetracker_find_by_user. $range must be
 *   within the $range used when calling timetracker_find_by_user.
 *
 * @return
 *   An array of matched time entry objects.
 */
function timetracker_find_by_user_with_preloaded_time_entries($range, $time_entries) {
  $results = array();

  foreach ($time_entries as $time_entry) {
    if (
      (($time_entry->time <= $range->time) && ($time_entry->time + $time_entry->duration >= $range->time)) ||
      (($time_entry->time >= $range->time) && ($time_entry->time <= $range->time + $range->duration))
    ) {
      $results[] = $time_entry;
    }
  }

  return $results;
}

/**
 * Deliver page content into html result without the overhead of page.tpl.php.
 */
function timetracker_deliver_html($page_callback_result) {
  // Use default drupal_deliver_html_page() for deliver error pages.
  if (is_int($page_callback_result)) {
    return drupal_deliver_html_page($page_callback_result);
  }
  elseif (isset($page_callback_result)) {
    // Headers set copied from drupal_deliver_html_page().
    if (isset($page_callback_result) && is_null(drupal_get_http_header('Content-Type'))) {
      drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
    }
    global $language;
    drupal_add_http_header('Content-Language', $language->language);

    // Print the main page contant into html.tpl.php.
    print theme('html', array('page' => array(
      'page_top' => array(),
      '#children' => drupal_render($page_callback_result),
      'page_bottom' => array(),
    )));
  }

  // Perform end-of-request tasks.
  drupal_page_footer();
}

/*
 * Implements hook_permission().
 */
function timetracker_permission() {
  return array(
    'track time' => array(
      'title' => t('Track time'),
      'description' => t('Allows user to track time.'),
    ),
    'track time on behave of other users' => array(
      'title' => t('Track time on behave of other users'),
      'description' => t('Allows user to track time on behave of other users.'),
    ),
    'approve time track' => array(
      'title' => t('Approve time tracked by other users'),
      'description' => t('Allows user to track time on behave of other users.'),
    ),
    'approve own time track' => array(
      'title' => t('Approve own time track'),
      'description' => t('Allows user to track time on behave of other users.'),
    ),
  );
}

/*
 * Implements hook_form_FORM_ID_alter().
 */
function timetracker_form_timetrack_time_entry_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if (!user_access('track time on behave of other users')) {
    $form['field_timetrack_user']['#disabled'] = TRUE;
    $form['field_timetrack_user'][LANGUAGE_NONE][0]['target_id']['#default_value'] = $user->uid;
  }

  if (!user_access('approve time track')) {
    $form['field_timetrack_user']['#access'] = FALSE;
  }

  if (!is_array($form['#validate'])) {
    $form['#validate'] = array($form['#validate']);
  }

  if (!is_array($form['#submit'])) {
    $form['#submit'] = array($form['#submit']);
  }

  $form['#validate'][] = 'timetracker_timetrack_time_entry_form_validate';
  $form['#submit'][] = 'timetracker_timetrack_time_entry_form_submit';
}

function timetracker_timetrack_time_entry_form_validate($form, &$form_state) {
  global $user;

  if (!user_access('track time on behave of other users') && $form_state['values']['field_timetrack_user'][LANGUAGE_NONE][0]['target_id'] != $user->uid) {
    form_set_error('field_timetrack_user', t('You cannot track on behave of other people.'));
  }

  if (!user_access('approve time track')) {
    //Should we just unset it here to prevent it from changing previous values when editing an existing time entry? (Fabiano 20121217)
    $form_state['values']['field_timetrack_status'][LANGUAGE_NONE][0]['value'] = 0;
  }
}

function timetracker_timetrack_time_entry_form_submit($form, &$form_state) {
  drupal_goto('time-report/by-date');
}


function timetracker_is_period_tracked($start, $end, $account, $case) {
  if (!is_int($start)) {
    $start = strtotime($start);
  }
  if (!is_int($end)) {
    $end = strtotime($end);
  }

  $query = _timetracker_is_period_tracked_query($start, $end, $account, $case, '=');
  $query->timeEntryConditions = db_and()->condition('time', $start, '<=')->where('time + duration >= :end', array(':end' => $end));

  if($query->count()->execute()) {
     return TRUE;
  }

  return FALSE;
}


function timetracker_is_period_locked($start, $end, $account, $case = NULL) {
  static $locked_periods;
  if (!isset($locked_periods)) {
    $locked_periods = &drupal_static(__FUNCTION__, array());
  }
  if (isset($locked_periods[$account->uid][$start][$end])) {
    return $locked_periods[$account->uid][$start][$end];
  }


  $query = _timetracker_is_period_tracked_query($start, $end, $account, $case);
  $query->timeEntryConditions = _timetracker_lock_conditions($start, $end);

  $result = $query->count()->execute();

  if ($result) {
    $locked_periods[$account->uid][$start][$end] = TRUE;
  }
  else {
    $locked_periods[$account->uid][$start][$end] = FALSE;
  }

  return $locked_periods[$account->uid][$start][$end];
}

function _timetracker_is_period_tracked_query($start, $end, $account, $case, $case_operand = '<>') {
  $query = new TimeEntryEntityFieldQuery();
  $query->entityCondition('bundle', 'timetrack');
  $query->fieldCondition('field_timetrack_user', 'target_id', $account->uid, '=');

  if ($case) {
    $query->fieldCondition('field_timetrack_case', 'target_id', $case->nid, $case_operand);
  }

  return $query;
}

function _timetracker_lock_conditions($start, $end) {
  if (!is_int($start)) {
    $start = strtotime($start);
  }

  if (!is_int($end)) {
    $end = strtotime($end);
  }

  $db_or = db_or();
  $db_and = db_and();

  $starts_before = clone $db_and;
  $starts_before->condition('time', $start , '<=');
  $starts_before->where('time + duration >= :start', array(':start' => $start));

  $starts_during = clone $db_and;
  $starts_during->condition('time', $start, '>=');
  $starts_during->condition('time', $end, '<=');

  $db_or->condition($starts_before)->condition($starts_during);
  $db_and->condition($db_or);

  return $db_and;
}

/**
 * Implements hook_entity_presave().
 */
function timetracker_entity_presave($entity, $type) {
  if ($type == 'time_entry' && $entity->type == 'timetrack') {
    if (isset($entity->timetrack_case) && is_numeric($entity->timetrack_case)) {
      if (!isset($entity->original) || $entity->timetrack_case != $entity->original->timetrack_case) {
        $entity->field_timetrack_case[LANGUAGE_NONE][0]['target_id'] = $entity->timetrack_case;
      }
      unset($entity->timetrack_case);
    }
    if (isset($entity->timetrack_user) && is_numeric($entity->timetrack_user)) {
      if (!isset($entity->original) || $entity->timetrack_user != $entity->original->timetrack_user) {
        $entity->field_timetrack_user[LANGUAGE_NONE][0]['target_id'] = $entity->timetrack_user;
      }
      unset($entity->timetrack_user);
    }
    if (isset($entity->timetrack_status) && is_string($entity->timetrack_status)) {
      if (!isset($entity->original) || $entity->timetrack_status != $entity->original->timetrack_status) {
        $entity->field_timetrack_status[LANGUAGE_NONE][0]['value'] = $entity->timetrack_status;
      }
      unset($entity->timetrack_status);
    }
  }
}

/**
 * Implements hook_entity_load().
 */
function timetracker_entity_load($entities, $type) {
  if ($type == 'time_entry') {
    foreach ($entities as $entity) {
      if ($entity->type == 'timetrack') {
        if (isset($entity->field_timetrack_case[LANGUAGE_NONE][0]['target_id'])) {
          $entity->timetrack_case = $entity->field_timetrack_case[LANGUAGE_NONE][0]['target_id'];
        }
        if (isset($entity->field_timetrack_user[LANGUAGE_NONE][0]['target_id'])) {
          $entity->timetrack_user = $entity->field_timetrack_user[LANGUAGE_NONE][0]['target_id'];
        }
        if (isset($entity->field_timetrack_status[LANGUAGE_NONE][0]['value'])) {
          $entity->timetrack_status = $entity->field_timetrack_status[LANGUAGE_NONE][0]['value'];
        }
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function timetracker_theme($existing, $type, $theme, $path) {
  return array(
    'timetracker_table_form' => array(
      'file' => 'includes/timetracker.table.form.inc',
      'render element' => 'form',
    ),
  );
}

