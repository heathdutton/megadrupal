<?php

/**
 * @file
 * Defines tests for the core functionality of the Encrypted Files module
 */

/**
 * Tests the core ability of encrypting and decrypting files
 */
class EncryptedFilesCoreTestCase extends DrupalWebTestCase {

  // Dummy data.
  protected $testFilePath;
  protected $testFileContents;
  protected $testArticleName;

  /**
   * Describes tests to the testing environment.
   */
  public static function getInfo() {
    return array(
      'name' => 'Encrypted Files Core Functionality',
      'description' => 'Tests the module\'s core functionality of encrypting ' .
      'and decrypting files.',
      'group' => 'Encrypted Files',
    );
  }

  /**
   * Runs any necessary pre-test setup.
   */
  public function setUp() {
    // Call parent class's method with module's name.
    parent::setUp(array('encrypted_files', 'devel'));
    // Create an administrative user and log in.
    $admin = $this->drupalCreateUser(array(
      'administer content types',
      'access content',
      'create article content',
    ));
    $this->drupalLogin($admin);
    // Gather dummy data to test with.
    $this->testFilePath = drupal_get_path('module', 'encrypted_files') .
      '/tests/test-text.txt';
    $this->testFilePath = realpath($this->testFilePath);
    $this->testFileContents = file_get_contents($this->testFilePath);
    $this->testArticleName = $this->randomName(10);
  }

  /**
   * Tests file upload, encryption, download, & decryption.
   */
  public function testEncryptedFile() {
    // First, add basic encrypted file field to Article node type.
    $this->addBasicField();
    // Create a new Article with a file attached to it.
    $add_article_post = array(
      'title' => $this->testArticleName,
      'files[field_encrypted_files_basic_file_und_0]' => $this->testFilePath,
    );
    $this->drupalPost('node/add/article', $add_article_post, t('Save'));
    $this->assertText(t('Article @title has been created.',
      array('@title' => $this->testArticleName)),
      'Article created with file attached.');
    // Make sure file was uploaded and encrypted.
    $this->checkFileEncryption();
    // Make sure file can be downloaded and decrypted.
    $decrypted_file = 'system/' . ENCRYPTED_FILES_DIRECTORY . '/test-text.txt';
    $decrypted_file_contents = $this->drupalGet($decrypted_file);
    $this->assertEqual($decrypted_file_contents, $this->testFileContents,
      'File was downloaded and decrypted.');
  }

  /**
   * Adds basic encrypted file field to Article node type.
   */
  protected function addBasicField() {
    $add_field_post = array(
      'fields[_add_new_field][label]' => 'Encrypted File',
      'fields[_add_new_field][field_name]' => 'encrypted_files_basic_file',
      'fields[_add_new_field][type]' => 'file',
      'fields[_add_new_field][widget_type]' => 'file_generic',
    );
    $this->drupalPost('admin/structure/types/manage/article/fields',
      $add_field_post, t('Save'));
    $field_settings_post = array(
      'field[settings][uri_scheme]' => 'ef',
      'field[settings][encrypt_config]' => '',
    );
    $this->drupalPost(NULL, $field_settings_post, t('Save field settings'));
    $this->drupalPost(NULL, $field_settings_post, t('Save settings'));
    // Check that the field was added successfully.
    field_cache_clear();
    $add_field_success = field_info_instance('node', 'field_encrypted_files_basic_file', 'article');
    $this->assertNotNull($add_field_success,
      'Basic EF field added to Article.');
  }

  /**
   * Makes sure file was uploaded and encrypted.
   *
   * @param string|null $file
   *   The name of the file to test. If NULL, will use the default test file
   */
  protected function checkFileEncryption($file = NULL) {
    $uploaded_file = NULL;
    if (isset($file)) {
      $uploaded_file = realpath(variable_get('file_private_path', '') . '/' .
        ENCRYPTED_FILES_DIRECTORY . '/' . $file);
    }
    else {
      $uploaded_file = realpath(variable_get('file_private_path', '') . '/' .
        ENCRYPTED_FILES_DIRECTORY . '/test-text.txt');
    }
    $this->assertTrue(file_exists($uploaded_file), 'File was uploaded.');
    $encrypted_check = md5(encrypt($this->testFileContents, NULL, NULL, NULL, 'default'));
    $uploaded_file_contents = md5(file_get_contents($uploaded_file));
    $this->assertEqual($uploaded_file_contents, $encrypted_check,
      'File was encrypted.');
  }

}
