<?php

/**
 * @file
 * The Encrypted Files module's hooks and important functions.
 */

/**
 * Directory in which encrypted files are stored.
 * Sits inside the private filesystem directory.
 */
define('ENCRYPTED_FILES_DIRECTORY', 'encrypted-files');

/**
 * Name of the Encrypted Files URI scheme (the scheme in 'scheme://').
 */
define('ENCRYPTED_FILES_SCHEME', 'ef');

/****** HOOK IMPLEMENTATIONS ******/

/**
 * Implements hook_stream_wrappers().
 *
 * Registers Encrypted Files custom scheme.
 */
function encrypted_files_stream_wrappers() {
  return array(
    ENCRYPTED_FILES_SCHEME => array(
      'name' => t('Encrypted files'),
      'class' => 'EncryptedStreamWrapper',
      'description' => t('Private, encrypted local files served by Drupal.'),
      'type' => STREAM_WRAPPERS_LOCAL_NORMAL,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function encrypted_files_menu() {
  return array(
    // Register callback for downloading encrypted files.
    'system/' . ENCRYPTED_FILES_DIRECTORY => array(
      'title' => 'Encrypted Files Download',
      'page callback' => 'encrypted_files_get_file',
      'access callback' => 'encrypted_files_can_access_file',
      'type' => MENU_CALLBACK,
    ),
    // Register download error page.
    'ef-download-error' => array(
      'title' => 'Encrypted Files Download Error',
      'page callback' => 'encrypted_files_download_error',
      'file' => 'includes/encrypted_files.pages.inc',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Implements hook_file_presave().
 *
 * For files saved, this ensures that the database
 * stores the size of the file before encryption, not after.
 */
function encrypted_files_file_presave($file) {
  // If not saving an encrypted file, return.
  if (strpos($file->uri, ENCRYPTED_FILES_SCHEME . '://') === FALSE) {
    return;
  }
  // Update file object with correct size.
  $file_info = EncryptedStreamWrapper::getFileInfo($file->uri);
  $file->filesize = $file_info['size'];
  if (!empty($file->original)) {
    if (empty($file->filesize)) {
      $file->filesize = $file->original->filesize;
    }
  }
}

/**
 * Implements hook_file_update().
 */
function encrypted_files_file_update($file) {
  if (!empty($file->original)) {
    if (empty($file->filesize)) {
      $file->filesize = $file->original->filesize;
    }
  }
}
/**
 * Implements hook_field_info_alter().
 */
function encrypted_files_field_info_alter(&$info) {
  if (isset($info['file'])) {
    $info['file']['settings']['encrypt_config'] = '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds to the file system form a field for encryption configuration,
 * which is visible and required if Encrypted Local Files is selected as the
 * default download method.
 */
function encrypted_files_form_system_file_system_settings_alter(&$form, &$form_state, $form_id) {
  // Retrieve the list of configurations to use as options.
  $options = encrypt_get_enabled_configs_as_options();
  $default_value = variable_get('encrypted_files_encryption_config', '');

  $form['encrypted_files_encryption_config'] = array(
    '#type' => 'select',
    '#title' => t('Default encryption configuration'),
    '#description' => t('Select a configuration to use as the default when encrypting files.'),
    '#empty_option' => t('- Default -'),
    '#options' => $options,
    '#default_value' => $default_value,
    '#states' => array(
      'visible' => array(
        ':input[name="file_default_scheme"]' => array('value' => 'ef'),
      ),
      'required' => array(
        ':input[name="file_default_scheme"]' =>  array('value' => 'ef')
      ),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function encrypted_files_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  $field_name = $form['#field']['field_name'];
  _encrypted_files_add_encrypt_config_field($form, $field_name);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function encrypted_files_form_field_ui_field_settings_form_alter(&$form, &$form_state, $form_id) {
  $field_name = $form['field']['field_name']['#value'];
  _encrypted_files_add_encrypt_config_field($form, $field_name);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function encrypted_files_field_widget_file_generic_form_alter(&$element, &$form_state, $context) {
  if (!isset($context['field']['settings']['encrypt_config'])) {
    return;
  }

  foreach ($element as $key => $item) {
    $element[$key]['#upload_validators']['encrypted_files_validate_encrypt_config'] = array($context['field']['settings']['encrypt_config']);
  }
}

/****** IMPORTANT FUNCTIONS ******/

/**
 * Access callback.
 *
 * Determines if the current user can access a given encrypted file
 * by querying the node system to see if the user has view access to
 * the node the file is attached to.
 *
 * @param string $uri
 *   (optional) The URI of the requested file. If omitted, will use the request
 *
 * @return bool
 *   TRUE if user has access, FALSE if not
 */
function encrypted_files_can_access_file($uri = NULL) {
  if (!isset($uri)) {
    $uri = request_path();
  }
  // Get the node associated with the file.
  module_load_include('inc', 'encrypted_files', 'includes/encrypted_files.file');
  $file = encrypted_files_load_file_by_uri($uri);
  $node = encrypted_files_load_files_node($file);
  // Answer using the node object's access.
  return node_access('view', $node);
}

/**
 * Menu callback that parses the URL of the requested file.
 */
function encrypted_files_get_file() {
  $uri = func_get_args();
  if (in_array('system', $uri) && in_array(ENCRYPTED_FILES_DIRECTORY, $uri)) {
    $uri = array_slice($uri, 2);
  }
  $uri = implode('/', $uri);
  encrypted_files_transfer_file($uri);
}

/**
 * Sends a decrypted file to the requester.
 *
 * @param string $uri
 *   URI of the file to send
 * @param string $redirect
 *   (optional) Path to redirect user to if an error is encountered
 */
function encrypted_files_transfer_file($uri, $redirect = 'ef-download-error') {
  $uri = str_replace(ENCRYPTED_FILES_SCHEME . '://', '', $uri);
  try {
    file_download(ENCRYPTED_FILES_SCHEME, $uri);
  }
  catch (FileTransferException $e) {
    drupal_set_message(t('Failed to decrypt the requested file.'),
      'error', FALSE);
    if (isset($redirect)) {
      drupal_goto($redirect, array(), 307);
    }
  }
}

/**
 * Checks that the encryption configuration exists and is enabled.
 *
 * @param $file
 *   A Drupal file object.
 * @param $encrypt_config
 *   The machine name of an encryption configuration.
 *
 * @return array
 *   If the encryption configuration is not available, the array
 *   will contain an error message.
 */
function encrypted_files_validate_encrypt_config(stdClass $file, $encrypt_config = '') {
  $errors = array();

  // If the configuration is empty, get the default configuration.
  if (empty($encrypt_config)) {
    $default_config = encrypt_get_default_config();
    $encrypt_config = $default_config['name'];
  }

  $configs = encrypt_get_enabled_configs();
  if (!array_key_exists($encrypt_config, $configs)) {
    $errors[] = t('The selected encryption configuration is not available.');
  }

  if (!EncryptedStreamWrapper::setEncryptConfig($encrypt_config)) {
    $errors[] = t('The encryption configuration could not be set.');
  }

  return $errors;
}

/**
 * Adds a field to select an encryption configuration.
 *
 * @param array $form
 *   The form to which to add the configuration field.
 * @param array $field_name
 *   The machine name of the field.
 */
function _encrypted_files_add_encrypt_config_field(&$form, $field_name) {
  $field_info = field_info_field($field_name);
  $settings = $field_info['settings'];

  // Retrieve the list of configurations to use as options.
  $options = encrypt_get_enabled_configs_as_options();

  $form['field']['settings']['encrypt_config'] = array(
    '#type' => 'select',
    '#title' => t('Encryption configuration'),
    '#description' => t('Select a configuration to use to encrypt this field.'),
    '#empty_option' => t('- Default -'),
    '#options' => $options,
    '#default_value' => (isset($settings['encrypt_config'])) ? $settings['encrypt_config'] : '',
    '#states' => array(
      'visible' => array(
        ':input[name="field[settings][uri_scheme]"]' => array('value' => 'ef'),
      ),
      'required' => array(
        ':input[name="field[settings][uri_scheme]"]' =>  array('value' => 'ef')
      ),
    ),
  );
}
