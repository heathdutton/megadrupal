<?php

/**
 * We use our own alter to add the 'extra' fields.
 */
function oauth_connector_email_oauthconnector_fields_alter(&$fields) {
  $fields['email'] = array(
    'title' => t('Email'),
    'description' => t('Email for this connection.'),
    'required' => TRUE,
  );
  return $fields;

}

/**
 * Implements hook_module_implements_alter().
 * 
 * Reorders the modules that implement a given hook so that this module gets
 * run first during module_invoke_all.
 */
function oauth_connector_email_module_implements_alter(&$implementations, $hook) {
  if ($hook != 'oauth_common_authorized') {
    return;
  }
  $module = "oauth_connector_email";
  $group = array($module => $implementations[$module]);
  unset($implementations[$module]);
  $implementations = $group + $implementations;
}

/**
 * Implements hook_oauth_common_authorized().
 * 
 * Creates an association between the connector used and an existing Drupal 
 * account (if it doesn't exist already in authmap).
 * 
 * Using some introductory logic from oauthconnector_oauth_common_authorized,
 * we get the $external_uid (i.e. the unique id of the external provider).
 * With this $external_uid, we see if the user has logged in before using this
 * connector. If not, and if there is an existing account we can associate with
 * it, then create the new connector in authmap. We let 
 * oauthconnector_oauth_common_authorized take care of logging the user in
 * because it is called during the module_invoke_all after this function.
 */
function oauth_connector_email_oauth_common_authorized($consumer, $access_token, $request_token) {
  global $user;

  if ($_SESSION['oauthconnector_request_key'] == $request_token->key) {

    //this function works for any provider, but if you want to limit to just
    //one, then forget the foreach loop and use:
    //$provider = oauthconnector_provider_load($my_provider_machine_name);
    $providers = oauthconnector_provider_load_all();
    foreach ($providers as $provider) {
      if ($provider->csid == $consumer->csid) {
  
        $cid = $external_uid = _oauthconnector_fetch_field('uid', $provider, $access_token, $consumer);
  
        if (!empty($external_uid)) {
          $connector_name = 'oauthconnector_' . $provider->name;
          $connector = _connector_get_connectors($connector_name);
          $info = $connector['information callback']($connector, $cid, array(), $access_token);
          $authname = $connector_name . '__' . $external_uid;
          
          //check if this user has already logged in before using this connector
          $uid = db_query("SELECT uid FROM {authmap} WHERE authname = :authname", array(':authname' => $authname))->fetchField();
  
          //check whether a user exists with this email
          if (!$uid) {
            $existing = db_select('users', 'u')
              ->fields('u', array('uid'))
              ->condition('mail', $info['email']['value'])
              ->execute();
            if ($existing->rowCount() > 1) {
              watchdog('connector', 'oauth_connector_email_oauth_common_authorized found more than one user with cid = ' . $external_uid, array(), WATCHDOG_ERROR);
            }
            else if ($existing->rowCount() == 1) {
              //associate a new connector entry with them
              $existing_uid = $existing->fetchField();
              _connector_add_connection($connector_name, $external_uid, $existing_uid);
            }
          }
        }
      }
    }
  }          
}