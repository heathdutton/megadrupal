<?php

/**
 * @file
 * Provides an API to allow Drupal to query the Salsa CRM provided by Salsa
 * Labs (www.salsalabs.com)
 *
 * This module does not provide any visible functionality on its own, it just
 * provides an API that other modules can use to query data in Salsa.
 */


/**
 * Implements hook_permission().
 */
function salsa_api_permission() {
  return array(
    'administer salsa' => array(
      'title' => t('Administer Salsa'),
      'description' => t('Administer Salsa module, enter or change the login information used to connect to Salsa, enable or disable entity types, and so on.'),
    ),
  );
}

/**
 * Returns an instance of the SalsaAPI class.
 *
 * @return SalsaAPI
 */
function salsa_api() {
  $instance = &drupal_static(__FUNCTION__, NULL);
  if (!$instance) {
    $class_name = variable_get('salsa_api_class', 'SalsaAPI');
    $interfaces = class_implements($class_name);
    if (!$interfaces || !in_array('SalsaAPIInterface', $interfaces)) {
      throw new Exception($class_name . ' must implement SalsaAPIInterface');
    }
    $instance = new $class_name();
  }
  return $instance;
}

/**
 * Implements hook_sytem_settings().
 */
function salsa_api_system_settings($form, &$form_state) {
  //$form = array();
  $form['salsa_api_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL to Salsa API'),
    '#description' => t('Type the URL to the Salsa API that your organizations node is on. ex: https://hq-org2.democracyinaction.org'),
    '#default_value' => variable_get('salsa_api_url', NULL),
    '#size' => 50,
  );
  $form['salsa_api_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Campaign Manager Username'),
    '#description' => t('Type the username of the Campaign Manager that you are using to login to the Salsa interface.'),
    '#default_value' => variable_get('salsa_api_username', NULL),
    '#size' => 50,
  );
  $form['salsa_api_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Campaign Manager Password'),
    '#description' => t('Type the password of the Campaign Manager that you entered above.'),
    '#default_value' => variable_get('salsa_api_password', NULL),
    '#size' => 50,
  );
  $form['salsa_api_curlopt_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Query Timeout'),
    '#description' => t('Number of seconds before a Salsa API query times out'),
    '#default_value' => variable_get('salsa_api_curlopt_timeout', 10),
    '#size' => 4,
  );
  return system_settings_form($form);
}

/**
 * Implements hook_menu().
 */
function salsa_api_menu() {
  $items = array();
  $items['admin/config/services/salsa'] = array(
    'title' => 'Salsa',
    'description' => 'Manage and configure the Salsa integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salsa_api_system_settings'),
    'access arguments' => array('administer salsa'),
  );
  $items['admin/config/services/salsa/api'] = array(
    'title' => 'API settings',
    'access arguments' => array('administer salsa'),
    'description' => 'Authentication and API related settings for the Salsa API',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  return $items;
}

/**
 * Build and then run a query against the DIA/Salsa database.
 *
 * @param query_info
 * The query information (array) that needs to be built and then run.
 * The query builder expects an array that looks like this (not all values are
 * required):
 * query_info = array(
 *  '#script' => '',
 *  '#tables' => '',
 *  '#condition' => '',
 *  '#limit' => '',
 *  '#fields' => '',
 *  '#order' => '',
 *  '#group' => '',
 *  '#links' => ''
 * );
 *
 * @return array
 *   An array of the result returned from Salsa.
 *
 * @throws SalsaQueryException
 * @throws SalsaConnectionException
 *
 * @deprecated as of 7.x-1.0-beta1
 *   Please use the methods in the new SalsaAPI() class instead.
 */
function salsa_api_query($query_info) {
  $script = '/api/' . $query_info['#script'];
  $query = '';

  // Encode various fields and conditions for use in URLs.
  foreach (array('#fields', '#condition', '#order') as $key) {
    if (isset($query_info[$key])) {
      if (is_array($query_info[$key])) {
	foreach ($query_info[$key] as $subkey => $value) {
	  $query_info[$key][$subkey] = rawurlencode($value);
	}
      }
      else {
	$query_info[$key] = rawurlencode($query_info[$key]);
      }
    }
  }

  switch ($query_info['#script']) {
    case 'getLeftJoin.sjs':
      if (isset($query_info['#tables'])) {
        $build_query_array['object'] = $query_info['#tables'];
      }
      if (isset($query_info['#condition'])) {
        $build_query_array['condition'] = $query_info['#condition'];
      }
      if (isset($query_info['#limit'])) {
        $build_query_array['limit'] = $query_info['#limit'];
      }
      if (isset($query_info['#fields'])) {
        $build_query_array['include'] = $query_info['#fields'];
      }
      if (isset($query_info['#order'])) {
        $build_query_array['orderBy'] = $query_info['#order'];
      }
      if (isset($query_info['#group'])) {
        $build_query_array['groupBy'] = $query_info['#group'];
      }
      foreach ($build_query_array as $item => $value) {
        if (is_array($value)) {
          foreach ($value as $i => $v) {
            $query .= $item . '=' . $v . '&';
          }
        }
        else {
          $query .= $item . '=' . $value . '&';
        }
      }
      break;

    case 'getObject.sjs':
      $build_query_array['object'] = $query_info['#tables'];
      $build_query_array['key'] = $query_info['#fields'];
      foreach ($build_query_array as $item => $value) {
        if (is_array($value)) {
          foreach ($value as $i => $v) {
            $query .= $item . '=' . $v . '&';
          }
        }
        else {
          $query .= $item . '=' . $value . '&';
        }
      }
      break;

    case 'getObjects.sjs':
      $build_query_array['object'] = $query_info['#tables'];
      if (isset($query_info['#condition'])) {
        $build_query_array['condition'] = $query_info['#condition'];
      }
      if (isset($query_info['#limit'])) {
        $build_query_array['limit'] = $query_info['#limit'];
      }
      if (isset($query_info['#fields'])) {
        $build_query_array['include'] = $query_info['#fields'];
      }
      if (isset($query_info['#order'])) {
        $build_query_array['orderBy'] = $query_info['#order'];
      }
      if (isset($query_info['#group'])) {
        $build_query_array['groupBy'] = $query_info['#group'];
      }
      $query = "";
      foreach ($build_query_array as $item => $value) {
        if (is_array($value)) {
          foreach ($value as $i => $v) {
            $query .= $item . '=' . $v . '&';
          }
        }
        else {
          $query .= $item . '=' . $value . '&';
        }
      }
      break;

    case 'getCount.sjs':
      $build_query_array['object'] = $query_info['#tables'];
      if ($query_info['#condition']) {
        $build_query_array['condition'] = $query_info['#condition'];
      }
      $build_query_array['countColumn'] = $query_info['#fields'];
      foreach ($build_query_array as $item => $value) {
        if (is_array($value)) {
          foreach ($value as $i => $v) {
            $query .= $item . '=' . $v . '&';
          }
        }
        else {
          $query .= $item . '=' . $value . '&';
        }
      }
      break;

    case 'getCounts.sjs':
      $build_query_array['object'] = $query_info['#tables'];
      if (isset($query_info['#condition'])) {
        $build_query_array['condition'] = $query_info['#condition'];
      }
      if (isset($query_info['#limit'])) {
        $build_query_array['limit'] = $query_info['#limit'];
      }
      if (isset($query_info['#order'])) {
        $build_query_array['orderBy'] = $query_info['#order'];
      }
      if (isset($query_info['#group'])) {
        $build_query_array['groupBy'] = $query_info['#group'];
      }
      $build_query_array['countColumn'] = $query_info['#fields'];
      foreach ($build_query_array as $item => $value) {
        if (is_array($value)) {
          foreach ($value as $i => $v) {
            $query .= $item . '=' . $v . '&';
          }
        }
        else {
          $query .= $item . '=' . $value . '&';
        }
      }
      break;

    case 'getReport.sjs':
      $query = 'report_KEY=' . $query_info['#fields'];
      break;

    case 'describe.sjs':
      $query = 'object=' . $query_info['#tables'];
      break;

    case 'describe2.sjs':
      $query = 'object=' . $query_info['#tables'];
      break;

    case 'save':
      $script = '/' . $query_info['#script'];
      $query = 'xml&';
      $build_query_array['object'] = $query_info['#tables'];
      $build_query_array['fields'] = $query_info['#fields'];
      if (isset($query_info['#links'])) {
        $build_query_array['links'] = $query_info['#links'];
      }
      foreach ($build_query_array as $item => $value) {
        if (is_array($value)) {
          if ($item == 'links') {
            foreach ($value as $table => $links) {
              foreach ($links as $key) {
                $query .= 'link=' . $table . '&linkKey=' . $key . '&';
              }
            }
          }
          else {
            foreach ($value as $i => $v) {
              $query .= $i . '=' . $v . '&';
            }
          }
        }
        else {
          $query .= $item . '=' . $value . '&';
        }
      }
      break;

    case 'delete':
      $script = '/' . $query_info['#script'];
      $query = 'xml&';
      $build_query_array['object'] = $query_info['#tables'];
      $build_query_array['key'] = $query_info['#fields'];
      foreach ($build_query_array as $item => $value) {
        if (is_array($value)) {
          foreach ($value as $i => $v) {
            $query .= $item . '=' . $v . '&';
          }
        }
        else {
          $query .= $item . '=' . $value . '&';
        }
      }
      break;

    case 'copy':
      $query = 'xml&';
      $build_query_array['object'] = $query_info['#tables'];
      $build_query_array['key'] = $query_info['#fields'];
      foreach ($build_query_array as $item => $value) {
        if (is_array($value)) {
          foreach ($value as $i => $v) {
            $query .= $item . '=' . $v . '&';
          }
        }
        else {
          $query .= $item . '=' . $value . '&';
        }
      }
      break;

    case 'email':
      $script = '/' . $query_info['#script'];
      $query = 'xml&';
      foreach ($query_info['#fields'] as $key => $value) {
        $query .= $key . '=' . $value . '&';
      }
      break;

    case 'processSpread.jsp':
      $script = '/dia/' . $query_info['#script'];
      foreach ($query_info['#fields'] as $key => $value) {
        $query .= $key . '=' . $value . '&';
      }
      break;

  }
  $query = rtrim($query, '&');
  $query_result = salsa_api()->query($script, $query);
  if (preg_match("<div class='sjs error'>", $query_result)) {
    throw new SalsaQueryException(strip_tags($query_result));
  }
  else {
    $query_result = salsa_api_object2array(simplexml_load_string($query_result));
  }
  if (isset($query_result['error'])) {
    throw new SalsaQueryException($query_result['error']);
  }
  return $query_result;
}

/**
 * Convert an XML object into an array. Some XML KEYs returned from Salsa have
 * an "-" in them which makes navigating through an XML object difficult!
 *
 * @param $object
 *  The xml object that needs to be converted into an array.
 *
 * @return array
 *   An array containing the converted xml object.
 */
function salsa_api_object2array($object) {
  $return = NULL;
  if (is_array($object)) {
    foreach ($object as $key => $value) {
      $return[$key] = salsa_api_object2array($value);
    }
  }
  elseif (is_object($object)) {
    $var = get_object_vars($object);
    if ($var) {
      foreach ($var as $key => $value) {
        $return[$key] = ($key && !$value) ? NULL : salsa_api_object2array($value);
      }
    }
    else {
      return $object;
    }
  }
  else {
    return $object;
  }
  return $return;
}

/**
 * Load an object from Salsa.
 *
 * @param $type
 *   Type of the object e.g. supporter or donation.
 * @param $key
 *   The object identifier.
 *
 * @return
 *   The object if it exists, FALSE if not.
 *
 * @throws SalsaQueryException
 * @throws SalsaConnectionException
 */
function salsa_api_get_object($type, $key) {
  $query = array(
    '#script' => 'getObject.sjs',
    '#tables' => $type,
    '#fields' => $key,
  );
  $return = salsa_api_query($query);

  // Get the actual object and convert it.
  if (isset($return[$type]['item']['key'])) {
    return (object)$return[$type]['item'];
  }
  return FALSE;
}

/**
 * Load objects from Salsa.
 *
 * @param $type
 *   Type of the objects e.g. supporter or donation.
 * @param $conditions
 *   Query conditions as a encoded query string or an array.
 * @param $query_info
 *   Query info.
 *
 * @return
 *   The object if it exists, FALSE if not.
 *
 * @throws SalsaQueryException
 * @throws SalsaConnectionException
 */
function salsa_api_get_objects($type, $conditions = NULL, array $query_info = array()) {
  $query = array(
    '#script' => 'getObjects.sjs',
    '#tables' => $type,
    '#condition' => $conditions,
  ) + $query_info;
  $return = salsa_api_query($query);

  // If there are any items, convert them to objects and return.
  if ($return[$type]['count'] > 0) {
    $objects = array();

    // If count is 1, item is the object.
    if ($return[$type]['count'] == 1) {
      $return[$type]['item'] = array($return[$type]['item']);
    }

    foreach ($return[$type]['item'] as $item) {
      $objects[$item['key']] = (object)$item;
    }
    return $objects;
  }
  return array();
}
