<?php
/**
 * @file
 * Content Access Roles module file.
 */

/**
 * Content Access Roles field.
 */
define('CONTENTACCESS_ROLES_FIELD', 'field_contentaccess_roles');

/**
 * Content Access Roles widget.
 */
define('CONTENTACCESS_ROLES_FIELD_WIDGET', 'contentaccessroles');

/**
 * Implements hook_help().
 */
function contentaccess_roles_help($path, $arg) {
  switch ($path) {
    case 'admin/help#contentaccess_roles':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<dl>';
      $output .= '<dd>' . t('The Contentaccess roles module gives node authors the ability to let users in selected roles view nodes.') . '</dd>';
      $output .= '<dd>' . t('This is great if you want to restrict node view access by role on a per node basis, but allow anonymous access to the teaser.') . '</dd>';
      $output .= '</dl>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dd>' . t('When the module have been enabled, it can be configure on the <a href="@content-type">content type</a> configuration page.', array('@content-type' => url('admin/structure/types'))) . '</dd>';
      $output .= '<dd>' . t('Go to <a href="@content-type">Content types</a> >> Add/Edit content type.', array('@content-type' => url('admin/structure/types'))) . '</dd>';
      $output .= '<dd>' . t('In the Contentaccess roles settings area, click "Enable" and save.') . '</dd>';
      $output .= '<dt>' . t('Controlling visibility') . '</dt>';
      $output .= '<dd>' . t('Edit content/node you have created and choose which roles can be view it.') . '</dd>';
      $output .= '</dl>';

      return $output;
  }
}

/**
 * Implements hook_node_access().
 */
function contentaccess_roles_node_access($node, $op, $account) {
  if (!is_object($node)) {
    return NODE_ACCESS_IGNORE;
  }

  if ($op == 'view') {
    // Deny access if the user does not have the proper roles.
    if (isset($node->{CONTENTACCESS_ROLES_FIELD}[LANGUAGE_NONE]) && !empty($node->{CONTENTACCESS_ROLES_FIELD}[LANGUAGE_NONE]) && !contentaccess_roles_has_user_role($node->{CONTENTACCESS_ROLES_FIELD}[LANGUAGE_NONE], $account)) {
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Check if user have the proper roles to view content.
 *
 * @param array $contentaccess_roles
 *   The selected roles to view this content.
 * @param object $account
 *   (optional) The user object. If empty the current user will be used.
 *
 * @return bool
 *   TRUE if the user has access role to view content, otherwise FALSE.
 */
function contentaccess_roles_has_user_role($contentaccess_roles, $account) {
  if (empty($account)) {
    global $user;
    $account = clone $user;
  }

  if (is_array($contentaccess_roles) && !empty($contentaccess_roles)) {
    foreach ($contentaccess_roles as $roles) {
      if (array_key_exists($roles['rid'], $account->roles)) {
        return TRUE;
      }
    }
  }
  return FALSE;
}
/**
 * Add Content Access Roles settings to the content type form.
 */
function contentaccess_roles_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  $node_type = $form['#node_type']->type;
  $default   = contentaccess_roles_field_content_type('node', $node_type) ? 1 : 0;
  $disabled  = $default != 0;

  // Build settings form.
  $form['contentaccess_roles_config'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content access roles settings'),
    '#group' => 'additional_settings',
    '#attributes' => array('class' => array('contentaccess-roles-config')),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );

  // Enable Content Access Roles for the current content type.
  $form['contentaccess_roles_config']['enable'] = array(
    '#type' => 'radios',
    '#title' => t('Enable Per content/node access view control by role'),
    '#default_value' => $default,
    '#options' => array(0 => t('Disabled'), 1 => t('Enabled')),
    '#description' => t('Make nodes visible only to users with specific roles'),
    '#disabled' => $disabled,
  );
}

/**
 * Check if the contentaccess_roles field is already created in a bundle.
 *
 * @param string $entity_type
 *   The entity_type
 * @param string $bundle_name
 *   The content type to be checked.
 * 
 * @return bool
 *   TRUE if the field_contentaccess_roles is already created, 
 *   False otherwise.
 */
function contentaccess_roles_field_content_type($entity_type, $bundle_name) {
  return contentaccess_roles_get_field_infoinstance($entity_type, $bundle_name, 'node');
}

 /**
  * Return True if the contentaccess_roles field is already created in a bundle.
  */
function contentaccess_roles_get_field_infoinstance($entity_type, $bundle_name, $type) {
  if ($type == 'node') {
    return (bool) field_info_instance($entity_type, CONTENTACCESS_ROLES_FIELD, $bundle_name);
  }
}

/**
 * Implements hook_node_type_insert().
 */
function contentaccess_roles_node_type_insert($info) {
  contentaccess_roles_node_type_save($info->type);
}

/**
 * Implements hook_node_type_update().
 */
function contentaccess_roles_node_type_update($info) {
  contentaccess_roles_node_type_save($info->type);
}

/**
 * Implements hook_node_type_delete().
 */
function contentaccess_roles_node_type_delete($info) {
  variable_del('contentaccess_roles_config_' . $info->type);
}

/**
 * Add CONTENTACCESS_ROLES_FIELD to current content type.
 *
 * @param string $bundle_name
 *   The content type name.
 */
function contentaccess_roles_node_type_save($bundle_name) {
  if (variable_get('contentaccess_roles_config_' . $bundle_name, FALSE)) {
    contentaccess_roles_create_field(CONTENTACCESS_ROLES_FIELD, 'node', $bundle_name);
    // Delete the variable.
    variable_del('contentaccess_roles_config_' . $bundle_name);
  }
}

/**
 * Add new field to current content type.
 *
 * @param string $field_name
 *   The field name, @see 'CONTENTACCESS_ROLES_FIELD' .
 * @param string $entity_type
 *   node.
 * @param string $bundle
 *   The content type name.
 */
function contentaccess_roles_create_field($field_name, $entity_type, $bundle) {
  if ($node_access_field = contentaccess_roles_fields_info($field_name)) {
    $field = field_info_field($field_name);
    if (empty($field)) {
      $field = field_create_field($node_access_field['field']);
    }

    $instance = field_info_instance($entity_type, $field_name, $bundle);
    if (empty($instance)) {
      $instance = $node_access_field['instance'];
      $instance += array(
        'field_name' => $field_name,
        'bundle' => $bundle,
        'entity_type' => $entity_type,
      );

      field_create_instance($instance);
    }
  }
}

/**
 * Implements hook_field_info().
 */
function contentaccess_roles_field_info() {
  return array(
    CONTENTACCESS_ROLES_FIELD_WIDGET => array(
      'label' => t('Contentaccess roles'),
      'description' => t('This field stores the ID of a related role as an integer value.'),
      'settings' => array(CONTENTACCESS_ROLES_FIELD => array()),
      'default_widget' => 'options_select',
      'default_formatter' => 'contentaccess_roles_default',
      'property_type' => 'integer',
    ),
  );
}

/**
 * Get all the modules fields that can be assigned to fieldable enteties.
 */
function contentaccess_roles_fields_info($field_name = NULL) {
  $return = &drupal_static(__FUNCTION__, array());

  if (empty($return)) {
    foreach (module_implements('contentaccess_roles_fields_info') as $module) {
      if ($fields = module_invoke($module, 'contentaccess_roles_fields_info')) {
        foreach ($fields as $key => $field) {
          // Add default values.
          $field += array(
            'entity type' => array(),
            'disable on node translate' => TRUE,
          );

          // Add the module information.
          $return[$key] = array_merge($field, array('module' => $module));
        }
      }
    }

    // Allow other modules to alter the field info.
    drupal_alter('contentaccess_roles_fields_info', $return);
  }

  return empty($field_name) ? $return : $return[$field_name];
}

/**
 * Hook_contentaccess_roles_fields_info().
 */
function contentaccess_roles_contentaccess_roles_fields_info() {
  $items[CONTENTACCESS_ROLES_FIELD] = array(
    'type' => array('node'),
    'description' => t('Show this node/content only for the selected role(s). If you select no roles, the content/node will be visible to all users.'),
    'field' => array(
      'field_name' => CONTENTACCESS_ROLES_FIELD,
      'no_ui' => TRUE,
      'type' => CONTENTACCESS_ROLES_FIELD_WIDGET,
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(CONTENTACCESS_ROLES_FIELD => array()),
      'default_widget' => 'options_select',
      'default_formatter' => 'contentaccess_roles_default',
      'property_type' => 'integer',
    ),
    'instance' => array(
      'label' => t('Show content for specific roles'),
      'description' => t('Show this node/content only for the selected role(s). If you select no roles, the content/node will be visible to all users.'),
      'widget_type' => CONTENTACCESS_ROLES_FIELD_WIDGET,
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'type' => 'select',
          'custom settings' => FALSE,
        ),
        'teaser' => array(
          'label' => t('Teaser'),
          'type' => 'select',
          'custom settings' => FALSE,
        ),
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    ),
  );

  return $items;
}

/**
 * Implements hook_field_schema().
 */
function contentaccess_roles_field_schema($field) {
  $columns = array(
    'rid' => array(
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => FALSE,
    ),
  );
  return array(
    'columns' => $columns,
    'indexes' => array('rid' => array('rid')),
    'foreign keys' => array(
      'rid' => array(
        'table' => 'role',
        'columns' => array('rid' => 'rid'),
      ),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function contentaccess_roles_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form = array();
  $role_options = array_map('check_plain', user_roles());
  $form[CONTENTACCESS_ROLES_FIELD] = array(
    '#type'          => 'checkboxes',
    '#title'         => t('Roles that can be referenced'),
    '#description'   => t('Select roles that may be referenced by this field. All roles will be available if none are checked.'),
    '#multiple'      => TRUE,
    '#default_value' => is_array($settings[CONTENTACCESS_ROLES_FIELD]) ? $settings[CONTENTACCESS_ROLES_FIELD] : array(),
    '#options'       => $role_options,
    '#disabled'      => $has_data,
  );
  return $form;
}

/**
 * Implements hook_field_validate().
 */
function contentaccess_roles_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // Extract nids to check.
  $ids = array();

  // First check non-numeric rid's to avoid losing time with them.
  foreach ($items as $delta => $item) {
    if (is_array($item) && !empty($item['rid'])) {
      if (is_numeric($item['rid'])) {
        $ids[] = $item['rid'];
      }
      else {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'invalid_rid',
          'message' => t("%name: invalid input.",
            array('%name' => $instance['label'])),
        );
      }
    }
  }

  if ($ids) {
    $content_access_role = contentaccess_roles_potential_refer($field['settings'][CONTENTACCESS_ROLES_FIELD]);

    foreach ($items as $delta => $item) {
      if (is_array($item)) {
        if (!empty($item['rid']) && !isset($content_access_role[$item['rid']])) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'invalid_rid',
            'message' => t("%name: this role can't be added.",
              array('%name' => $instance['label'])),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function contentaccess_roles_field_is_empty($item, $field) {
  if (empty($item['rid']) && (string) $item['rid'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_info().
 */
function contentaccess_roles_field_formatter_info() {
  $ret = array(
    'contentaccess_roles_default' => array(
      'label'       => t('Title'),
      'description' => t('Display the title of the role.'),
      'field types' => array(CONTENTACCESS_ROLES_FIELD_WIDGET),
    ),
  );
  return $ret;
}

/**
 * Implements hook_field_formatter_view().
 */
function contentaccess_roles_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $user_roles = user_roles();
  $element = array();

  switch ($display['type']) {
    case 'contentaccess_roles_default':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => check_plain($user_roles[$item['rid']]));
      }
      break;
  }

  return $element;
}

/**
 * Returns a list of roles based on the field settings.
 */
function contentaccess_roles_potential_refer($contentaccess_roles) {
  $roles = &drupal_static(__FUNCTION__, array());
  $user_roles = user_roles();

  if (empty($roles)) {
    foreach ($contentaccess_roles as $rid => $enabled) {
      if (!empty($enabled) && isset($user_roles[$rid])) {
        $roles[$rid] = $user_roles[$rid];
      }
    }
    if (empty($roles)) {
      $roles = $user_roles;
    }
  }
  return $roles;
}

/**
 * Implements hook_field_widget_info_alter().
 */
function contentaccess_roles_field_widget_info_alter(&$info) {
  $info['options_select']['field types'][] = CONTENTACCESS_ROLES_FIELD_WIDGET;
  $info['options_buttons']['field types'][] = CONTENTACCESS_ROLES_FIELD_WIDGET;
}

/**
 * Implements hook_options_list().
 */
function contentaccess_roles_options_list($field) {
  return contentaccess_roles_potential_refer($field['settings'][CONTENTACCESS_ROLES_FIELD]);
}
