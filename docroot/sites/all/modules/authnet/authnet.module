<?php

/**
 * @file
 * Authorize.net API
 */

/* ******************************************************************************
 * Constants
 * *****************************************************************************/

/**
 * Authorize.net transaction methods.
 */
define('AUTHNET_METHOD_AUTH_CAPTURE', 'AUTH_CAPTURE');
define('AUTHNET_METHOD_PRIOR_AUTH_CAPTURE', 'PRIOR_AUTH_CAPTURE');
define('AUTHNET_METHOD_AUTH_ONLY', 'AUTH_ONLY');
define('AUTHNET_METHOD_CAPTURE_ONLY', 'CAPTURE_ONLY');
define('AUTHNET_METHOD_CREDIT', 'CREDIT');
define('AUTHNET_METHOD_VOID', 'VOID');
define('AUTHNET_MINIMUM_VERSION', '3.1');

/* ******************************************************************************
 * Includes
 * *****************************************************************************/

/**
 * Authorize.net object types
 */
require_once 'includes/authnet.types.inc';

/**
 * Authorize.net AIM
 */
require_once 'includes/authnet.aim.inc';

/**
 * Authorize.net CIM
 */
require_once 'includes/authnet.cim.inc';

/* ******************************************************************************
 * Drupal hooks
 * *****************************************************************************/

/**
 * Implements hook_menu().
 */
function authnet_menu() {
  $items['admin/config/services/authnet'] = array(
    'title' => 'Authorize.net API',
    'description' => 'Authorize.net API module settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('authnet_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'authnet.pages.inc',
  );
  return $items;
}

/* ******************************************************************************
 * Path and include functions
 * *****************************************************************************/

/**
 * Implements hook_libraries_info()
 */
function authnet_libraries_info() {
  return array(
    'anet_php_sdk' => array(
      'title' => 'Authorize.net SDK for PHP',
      'vendor url' => 'https://github.com/AuthorizeNet/sdk-php',
      'download url' => 'https://github.com/AuthorizeNet/sdk-php/archive/master.zip',
      'version arguments' => array(
        'file' => 'lib/AuthorizeNetAIM.php',
        'pattern' => '/"version" => "([^"\r\n]*)/',
        'lines' => 100,
      ),
      'files' => array(
        'php' => array(
          'autoload.php',
        ),
      ),
    ),
  );
}

/**
 * Determine the path to the Authorize.net PHP SDK library.
 *
 * @param bool $filename
 *  Boolean to determine whether or not the primary library filename should be
 *  appended to the path before it's returned. Defaults to FALSE.
 *
 * @return
 *  Returns the path to the library.
 */
function authnet_sdk_path($filename = FALSE) {
  $info = libraries_load('anet_php_sdk');
  $path = $info['library path'];

  // Append the filename, if requested.
  if ($filename) {
    $path .= '/' . key($info['files']['php']);
  }
  return $path;
}

/**
 * Include the Authorize.net SDK library code.
 */
function authnet_sdk_include() {
  static $loaded = FALSE;
  if (!$loaded) {

    // Load the library file.
    require_once(authnet_sdk_path(TRUE));

    // Remember that we loaded it already.
    $loaded = TRUE;
  }
}

/* ******************************************************************************
 * Helper functions
 * *****************************************************************************/

/**
 * Returns the message text for an AVS response code.
 */
function authnet_avs($code) {
  $codes = array(
    'A' => t('Address (Street) matches, ZIP does not'),
    'B' => t('Address information not provided for AVS check'),
    'E' => t('AVS error'),
    'G' => t('Non-U.S. Card Issuing Bank'),
    'N' => t('No Match on Address (Street) or ZIP'),
    'P' => t('AVS not applicable for this transaction'),
    'R' => t('Retry â€“ System unavailable or timed out'),
    'S' => t('Service not supported by issuer'),
    'U' => t('Address information is unavailable'),
    'W' => t('Nine digit ZIP matches, Address (Street) does not'),
    'X' => t('Address (Street) and nine digit ZIP match'),
    'Y' => t('Address (Street) and five digit ZIP match'),
    'Z' => t('Five digit ZIP matches, Address (Street) does not'),
  );
  return $code . ' - ' . $codes[$code];
}

/**
 * Returns the message text for a CVV match.
 */
function authnet_cvv($code) {
  $codes = array(
    'M' => t('Match'),
    'N' => t('No Match'),
    'P' => t('Not Processed'),
    'S' => t('Should have been present'),
    'U' => t('Issuer unable to process request'),
  );
  return $code . ' - ' . $codes[$code];
}

/**
 * Returns an array of credit card transaction types available to Authorize.net.
 */
function authnet_transaction_types() {
  return array(
    AUTHNET_METHOD_AUTH_CAPTURE => t('Authorize and capture immediately'),
    AUTHNET_METHOD_PRIOR_AUTH_CAPTURE => t('Prior authorization capture'),
    AUTHNET_METHOD_AUTH_ONLY => t('Authorization only'),
    AUTHNET_METHOD_CAPTURE_ONLY => t('Capture only'),
    AUTHNET_METHOD_CREDIT => t('Credit'),
    AUTHNET_METHOD_VOID => t('Void'),
  );
}

/**
 * Logs Authorize.net response objects.
 *
 * @param $response
 *   An Authorize.net response object.
 */
function authnet_log_response($response) {

  // Add the response to the static cache in authnet_get_response().
  authnet_set_response($response);

  // Parse the response to get a message and error flag.
  $status = _authnet_response_status($response);

  // If success or message flags aren't set, bail.
  if (!isset($status['success']) || !isset($status['message'])) {
    return;
  }

  // Process the message if it's an error, or if debug mode is on.
  if (!$status['success'] || variable_get('authnet_debug', FALSE)) {

    // Print errors to the screen, if debug mode is on and Drupal's core error_level variable is greater than or equal to 1.
    if (!$status['success'] && variable_get('authnet_debug', FALSE) && variable_get('error_level', 1) >= 1) {
      drupal_set_message($status['message'], 'error');
    }

    // Log the message to watchdog.
    watchdog('authnet', $status['message']);
  }
}

/**
 * Retrieves the last error
 *
 * @return
 *   The last error message if the last request failed, FALSE otherwise.
 */
function authnet_get_error_message() {

  // Get the latest response.
  $response = authnet_get_response();

  // Parse the response to get a message and error flag.
  $status = _authnet_response_status($response);

  // If success or message flags aren't set, bail.
  if (!isset($status['success']) || !isset($status['message'])) {
    return;
  }

  // If the request was not successful, return the error message.
  if (!$status['success']) {
    return $status['message'];
  }

  // Otherwise return FALSE
  else {
    return FALSE;
  }
}

/**
 * Retrieves a statically-cached Authorize.net response object.
 */
function authnet_get_response() {
  return authnet_set_response();
}

/**
 * Stores last Authorize.net response object in a static cache.
 */
function authnet_set_response($response = NULL) {
  static $last_response = NULL;

  // If a response is passed in, cache it
  if ($response) {
    $last_response = $response;
  }

  return $last_response;
}

/**
 * Check to see if a response was successful
 *
 * @param $response
 *   An Authorize.net response object.
 *
 * @return
 *   An array in the form array('success' => bool, 'message' => string);
 */
function _authnet_response_status($response) {

  // If the response object is an instance of AuthorizeNetCIM_Response...
  if ($response instanceof AuthorizeNetCIM_Response) {

    // Prepend the Authorize.net request type to the message.
    $message = 'Authorize.net CIM ';

    // Error Message
    if ($response->isError()) {
      $message .= $response->getErrorMessage();
    }

    // Success Message
    else {
      $message .= t('Success: !ResultCode  Message: !MessageText !MessageCode', array(
        '!ResultCode' => $response->getResultCode(),
        '!MessageText' => $response->getMessageText(),
        '!MessageCode' => $response->getMessageCode(),
      ));
    }

    return array('success' => !$response->isError(), 'message' => $message);
  }

  // Or, if the response object is an instance of AuthorizeNetAIM_Response...
  elseif ($response instanceof AuthorizeNetAIM_Response) {

    // Prepend the Authorize.net request type to the message.
    $message = 'Authorize.net AIM ';

    // Error message
    if ($response->error) {
      $message .= $response->error_message;
    }

    // Success message
    else {
      $message .= t('Success: Response Code: !code Response Subcode: !subcode Response Reason Code: !reason_code Response Reason Text: !reason_text', array(
        '!code' => $response->response_code,
        '!subcode' => $response->response_subcode,
        '!reason_code' => $response->response_reason_code,
        '!reason_text' => $response->response_reason_text,
      ));
    }

    return array('success' => !$response->error, 'message' => $message);
  }
}

/**
 * Recursivley converts a SimpleXMLElement object to an array of keyed values,
 * with an optional ability to define non-unique properties that may exist in the XML and
 * ensure that they end up in arrays.
 *
 * @param $simplexml
 *   The SimpleXMLElement to copy from.
 * @param $nonunique
 *   An array of non-unique element indices. If a property is found in the $simplexml parameter with a non-unique index,
 *   this function will make sure that it is copied into an array so that the output is consistent whether or not one or many elements are included.
 *
 * @return
 *   Returns an array that the SimpleXMLElement values were copied to.
 *
 * @see uc_cim_profile_load()
 */
function _authnet_simplexml_to_array($simplexml, $nonunique = array()) {
  $array = array();
  foreach ((array) $simplexml as $index => $node) {

    // If the element is non-unique and there are less than 2 of them, make sure it ends up in an array regardless.
    if (in_array($index, $nonunique) && (count($simplexml->$index) < 2)) {
      $node = array($node);
    }

    // Assign the element to the array. If the element is an object, recurse into it.
    $array[$index] = (is_object($node) || is_array($node)) ? _authnet_simplexml_to_array($node) : $node;
  }
  return $array;
}
