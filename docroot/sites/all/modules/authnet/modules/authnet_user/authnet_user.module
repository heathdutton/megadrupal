<?php

/**
 * @file
 * Authorize.net - User Integration
 */

/* ******************************************************************************
 * Drupal hooks
 * *****************************************************************************/

/**
 * Implements hook_permission().
 */
function authnet_user_permission() {
  return array(
    'administer authnet payment profiles' => array(
      'title' => t('administer authnet payment profiles'),
      'description' => t('TODO Add a description for \'administer authnet payment profiles\''),
    ),
    'manage own authnet payment profiles' => array(
      'title' => t('manage own authnet payment profiles'),
      'description' => t('TODO Add a description for \'manage own authnet payment profiles\''),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function authnet_user_menu() {

  // List of user payment profiles.
  $items['user/%user/billing'] = array(
    'title' => 'Billing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('authnet_user_payment_profiles_list_form', 1),
    'access callback' => 'authnet_user_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'authnet_user.pages.inc',
    'weight' => 20,
  );
  $items['user/%user/billing/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );

  // Add a user's payment profile.
  $items['user/%user/billing/add'] = array(
    'title' => 'Add',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('authnet_user_payment_profile_form', 1),
    'access callback' => 'authnet_user_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'authnet_user.pages.inc',
    'weight' => 2,
  );

  // Edit a user's payment profile.
  $items['user/%user/billing/%authnet_cim_entity_payment_profile_id/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('authnet_user_payment_profile_form', 1, 3),
    'access callback' => 'authnet_user_access',
    'access arguments' => array(1, 3),
    'type' => MENU_CALLBACK,
    'file' => 'authnet_user.pages.inc',
  );

  // Delete a user's payment profile.
  $items['user/%user/billing/%authnet_cim_entity_payment_profile_id/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('authnet_user_payment_profile_delete_form', 1, 3),
    'access callback' => 'authnet_user_access',
    'access arguments' => array(1, 3),
    'type' => MENU_CALLBACK,
    'file' => 'authnet_user.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_forms().
 */
function authnet_user_forms($form_id, $args) {
  $forms['authnet_user_payment_profile_form'] = array(
    'callback' => 'authnet_user_payment_profile_form_builder',
  );
  return $forms;
}

/**
 * Implements hook_theme().
 */
function authnet_user_theme($existing, $type, $theme, $path) {
  return array(
    'authnet_user_payment_profiles_list_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_user_delete().
 */
function authnet_user_user_delete($account) {

  // Load their customer profile id.
  if ($customer_profile_id = authnet_cim_entity_profile_id_load('user', $account->uid)) {

    // Delete their customer profile from the database and Authorize.net.
    authnet_cim_profile_delete($customer_profile_id);
  }
}

/* ******************************************************************************
 * Authnet UI hooks
 * *****************************************************************************/

/**
 * Implements hook_authnet_ui_form_customer_profile_new().
 */
function authnet_user_authnet_ui_form_customer_profile_new(&$profile, $form_state, $form_id) {

  // If this is being called by our authnet_user_payment_profile_form...
  if ($form_id == 'authnet_user_payment_profile_form') {

    // If a user id is set in the form...
    if (!empty($form_state['values']['uid'])) {

      // Pass the profile into the helper function for generating a new customer profile based on a user.
      // The second paramater is FALSE to tell the function not to automatically save the profile to Authorize.net.
      // authnet_ui_form_customer_profile_new() will do that.
      $profile = authnet_user_customer_profile_new($form_state['values']['uid'], FALSE, $profile);
    }
  }
}

/**
 * Implements hook_authnet_ui_payment_profile_form_submit().
 */
function authnet_user_authnet_ui_payment_profile_form_submit($payment_profile, $form_state) {

  /**
   * This is called when a new payment profile is saved via authnet_ui_payment_profile_form_submit().
   *
   * Authorize.net does not save the credit card type, so that piece of information is missing from the database record
   * that the authnet_cim_entity module creates. Therefore, we need to add it here.
   *
   * We also add payment profile label and default status here.
   *
   * It's less than ideal that we need to save the payment profile record twice like this, but it's the only way to ensure
   * that the type is saved to the database, while still maintaining the ability to use the authnet_cim_entity module
   * without the authnet_user module.
   */

  // Load the record that was saved to the database.
  $record = authnet_cim_entity_payment_profile_load($payment_profile->customerPaymentProfileId);
  if ($record) {

    // Create a save flag.
    $save = FALSE;

    // Set the card type, if it's different from the saved record, and not empty.
    if (!empty($form_state['values']['card']['type']) && $record['cc_type'] != $form_state['values']['card']['type']) {
      $record['cc_type'] = check_plain($form_state['values']['card']['type']);
      $save = TRUE;
    }

    // Set the profile label, if it's different from the saved record.
    if ($record['label'] != $form_state['values']['label']) {
      $record['label'] = check_plain($form_state['values']['label']);
      $save = TRUE;
    }

    // Set the profile default status, if it's different from the saved record.
    if ($record['is_default'] != $form_state['values']['is_default']) {
      $record['is_default'] = check_plain($form_state['values']['is_default']);
      $save = TRUE;

      // Set all the other payment profiles for this customer to NOT default.
      $query = db_update('authnet_cim_entity_payment_profile');
      $query->fields(array('is_default' => 0));
      $query->condition('is_default', 1);
      $query->condition('customer_profile_id', $record['customer_profile_id']);
      $query->execute();
    }

    // Save the record.
    if ($save) {
      authnet_cim_entity_payment_profile_save($record);
    }
  }
}

/* ******************************************************************************
 * Access Callbacks
 * *****************************************************************************/

/**
 * Access callback for payment profile management.
 *
 * @param $payment_profile_id
 *   Optionally check to see if user has access to a specific payment profile.
 */
function authnet_user_access($account, $payment_profile_id = NULL) {

  // If the user has 'administer authnet payment profiles' access, return TRUE.
  if (user_access('administer authnet payment profiles')) {
    return TRUE;
  }

  // If the account belongs to the logged in user, and they have the 'manage own authnet payment profiles' permission...
  if ($GLOBALS['user']->uid == $account->uid && user_access('manage own authnet payment profiles', $account)) {

    // If a payment profile id is set...
    if ($payment_profile_id) {

      // Load the payment profile database record.
      $payment_profile = authnet_cim_entity_payment_profile_load($payment_profile_id);

      // Load the customer profile id.
      $customer_profile_id = authnet_cim_entity_profile_id_load('user', $account->uid);

      // Return TRUE if the payment profile id matches the customer profile id.
      if ($payment_profile && $payment_profile['customer_profile_id'] == $customer_profile_id) {
        return TRUE;
      }
    }

    // If a payment profile id isn't set, return TRUE.
    else {
      return TRUE;
    }
  }

  // Otherwise, return FALSE.
  return FALSE;
}

/* ******************************************************************************
 * Form functions
 * *****************************************************************************/

/**
 * User payment profile form builder function.
 *
 * @param $user
 *   The user account object.
 * @param $payment_profile_id
 *   The id of the payment profile to edit.
 */
function authnet_user_payment_profile_form_builder($form, &$form_state, $user, $payment_profile_id = NULL) {
  module_load_include('inc', 'authnet_user', 'authnet_user.pages');
  return authnet_user_payment_profile_form($form, $form_state, $user, $payment_profile_id);
}

/* ******************************************************************************
 * Theme functions
 * *****************************************************************************/

/**
 * Theme function for a user's list of payment profiles.
 */
function theme_authnet_user_payment_profiles_list_form($variables) {
  $form = $variables['form'];

  // Start with empty output.
  $output = '';

  // Get the user id from the form.
  $uid = $form['uid']['#value'];

  // Create a link to add a new profile.
  $options = array(
    'attributes' => array(
      'class' => 'authnet-add-payment-profile',
    ),
  );
  $output .= l(t('+ Add a credit card'), 'user/' . $uid . '/billing/add', $options);

  // Put together header and rows for the payment profile table.
  $header = array(
    t('Default'),
    t('Credit card'),
    t('Operations'),
  );
  $rows = array();

  // Get a list of all the existing payment profile primary keys.
  $pids = array();
  if (!empty($form['payment_profiles'])) {
    $pids = element_children($form['payment_profiles']);
  }

  // Create a row for each existing credit card.
  foreach ($pids as $pid) {

    // Get the payment profile from the form.
    $payment_profile = $form['payment_profiles'][$pid]['payment_profile']['#value'];

    // Format the payment profile title.
    $title = theme('authnet_payment_profile', array('payment_profile' => $payment_profile));

    // Add the row.
    $rows[] = array(
      drupal_render($form['payment_profiles'][$pid]['default']),
      l($title, 'user/' . $uid . '/billing/' . $pid . '/edit', array('html' => TRUE)),
      l(t('Edit'), 'user/' . $uid . '/billing/' . $pid . '/edit') . ' | ' . l(t('Delete'), 'user/' . $uid . '/billing/' . $pid . '/delete'),
    );
  }

  // Theme the table.
  $output .= theme('table', array('header' => $header, 'rows' => $rows));

  // If there are no existing payment profiles, display some empty text.
  if (empty($pids)) {
    $output .= t('You don\'t have any saved cards. Click "Add a credit card" above to save a new one.');
  }

  // Render the rest of the form.
  $output .= drupal_render_children($form);

  // Return the output.
  return $output;
}

/* ******************************************************************************
 * Helper functions
 * *****************************************************************************/

/**
 * Initialize a new Authorize.net customer profile object, given a user id.
 *
 * @param $uid
 *   The id of the user to create a customer profile for.
 * @param $save
 *   Boolean: whether or not to automatically save the new customer profile to Authorize.net. Defaults to TRUE.
 * @param $profile
 *   (Optional) An existing customer profile object that will be modified.
 *
 * @return
 *   Returns a new AuthorizeNetCustomer object.
 */
function authnet_user_customer_profile_new($uid, $save = TRUE, $profile = NULL) {

  // If a profile isn't provided, create one.
  if (!$profile) {
    $profile = authnet_customer_profile_new();
  }

  // Load the user object.
  $user = user_load($uid);

  // Customize the customer profile with the user information.
  $profile->merchantCustomerId = 'user:' . $user->uid;
  $profile->description = $user->name;
  $profile->email = $user->mail;

  // If $save is TRUE, save the new profile to Authorize.net.
  if ($save) {
    authnet_cim_profile_save($profile);
  }

  // Return the profile.
  return $profile;
}
