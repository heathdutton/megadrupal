<?php

/**
 * @file
 * Authorize.net CIM Entity
 */

/* ******************************************************************************
 * Authnet hooks
 * *****************************************************************************/

/**
 * Implements hook_authnet_cim_profile_insert().
 */
function authnet_cim_entity_authnet_cim_profile_insert($customerProfile) {

  // Get the entity type and id.
  $entity = authnet_cim_entity_id_parse($customerProfile->merchantCustomerId);

  // If a type or id are empty, return.
  if (empty($entity['type']) || empty($entity['id'])) {
    return;
  }

  // Save the association to the database.
  authnet_cim_entity_profile_id_save($entity['type'], $entity['id'], $customerProfile->customerProfileId);

  // If there are payment profiles, save those too.
  if (!empty($customerProfile->paymentProfiles)) {
    foreach ($customerProfile->paymentProfiles as $payment_profile) {

      // Generate a payment profile database record from the payment profile.
      $record = authnet_cim_entity_payment_profile_new($customerProfile->customerProfileId, $payment_profile);
      authnet_cim_entity_payment_profile_save($record);
    }
  }
}

/**
 * Implements hook_authnet_cim_profile_update().
 */
function authnet_cim_entity_authnet_cim_profile_update($customerProfile) {

  /**
   * The purpose of the following code is to ensure that the payment profiles assigned to a customer profile in Authorize.net
   * match those that we have saved in the {authnet_cim_entity_payment_profile} table. To do that, we'll start by going through
   * all of the payment profiles on the customer profile that was passed into this function, and add new ones to the database.
   * Then, we'll see if there are any extra payment profiles in the database, indicating that they don't exist in Authorize.net,
   * and delete them.
   */

  // Get the entity type and id.
  $entity = authnet_cim_entity_id_parse($customerProfile->merchantCustomerId);

  // If a type or id are empty, return.
  if (empty($entity['type']) || empty($entity['id'])) {
    return;
  }

  // Save the new payment profiles, and make an array of all payment profile ids in the Authorize.net record.
  $payment_profile_ids = array();
  if (!empty($customerProfile->paymentProfiles)) {
    foreach ($customerProfile->paymentProfiles as $paymentProfile) {

      // Load the payment profile from the database if it exists.
      $record = authnet_cim_entity_payment_profile_load($paymentProfile->customerPaymentProfileId);

      // Generate a new payment profile database record from the payment profile.
      $new_record = authnet_cim_entity_payment_profile_new($customerProfile->customerProfileId, $paymentProfile);

      // If there is an existing record, check to see if we need to update it.
      if ($record) {

        // We're only updating the credit card information, at this point, and that's only available if it's been changed.
        // If the expiration date isn't 'XXXX', then we know that's the case.
        if ($paymentProfile->payment->creditCard->expirationDate != 'XXXX') {

          // Update the credit card information on the original record.
          $record['cc_last_four'] = $new_record['cc_last_four'];
          $record['cc_exp_month'] = $new_record['cc_exp_month'];
          $record['cc_exp_year'] = $new_record['cc_exp_year'];

          // Save the record.
          authnet_cim_entity_payment_profile_save($record);
        }
      }

      // If an existing record doesn't exist, save the new one.
      else {
        authnet_cim_entity_payment_profile_save($new_record);
      }

      // Keep track of the payment profile ids.
      $payment_profile_ids[] = $paymentProfile->customerPaymentProfileId;
    }
  }

  // Load all the saved payment profiles.
  $payment_profiles = authnet_cim_entity_customer_payment_profiles_load($customerProfile->customerProfileId);

  // If there are more saved profiles than official ones, we need to delete some.
  if (count($payment_profiles) > count($payment_profile_ids)) {

    // Loop through the database records.
    foreach ($payment_profiles as $payment_profile) {

      // If the database record's payment profile id doesn't exist in the list from Authorize.net, delete it.
      if (!in_array($payment_profile['payment_profile_id'], $payment_profile_ids)) {
        authnet_cim_entity_payment_profile_delete($payment_profile['payment_profile_id']);
      }
    }
  }
}

/**
 * Implements hook_authnet_cim_profile_delete().
 */
function authnet_cim_entity_authnet_cim_profile_delete($customerProfileId) {

  // Delete the customer and payment profiles from the databse.
  authnet_cim_entity_profile_id_delete($customerProfileId);
}

/**
 * Implements hook_authnet_cim_payment_profile_insert().
 */
function authnet_cim_entity_authnet_cim_payment_profile_insert($customerProfileId, $paymentProfile) {

  // Generate a payment profile database record from the payment profile.
  $record = authnet_cim_entity_payment_profile_new($customerProfileId, $paymentProfile);

  // Save the profile.
  authnet_cim_entity_payment_profile_save($record);
}

/**
 * Implements hook_authnet_cim_payment_profile_update().
 */
function authnet_cim_entity_authnet_cim_payment_profile_update($customerProfileId, $paymentProfile) {

  // We're only updating the credit card information, at this point, and that's only available if it's been changed.
  // If the expiration date isn't 'XXXX', then we know that's the case.
  if ($paymentProfile->payment->creditCard->expirationDate != 'XXXX') {

    // Load the payment profile database record.
    $record = authnet_cim_entity_payment_profile_load($paymentProfile->customerPaymentProfileId);

    // Generate a new record with the new information.
    $new_record = authnet_cim_entity_payment_profile_new($customerProfileId, $paymentProfile);

    // Update the credit card information on the original record.
    $record['cc_last_four'] = $new_record['cc_last_four'];
    $record['cc_exp_month'] = $new_record['cc_exp_month'];
    $record['cc_exp_year'] = $new_record['cc_exp_year'];

    // Save the record.
    authnet_cim_entity_payment_profile_save($record);
  }
}

/**
 * Implements hook_authnet_cim_payment_profile_delete().
 */
function authnet_cim_entity_authnet_cim_payment_profile_delete($customerProfileId, $paymentProfileId) {

  // Delete the payment profile record from the database.
  authnet_cim_entity_payment_profile_delete($paymentProfileId);
}

/* ******************************************************************************
 * Entity profile id functions
 * *****************************************************************************/

/**
 * Get a customer profile id, based on an entity type and id.
 *
 * @param $type
 *   The Drupal entity type.
 * @param $id
 *   The Drupal entity id.
 *
 * @return
 *   Returns a customer profile id for the given entity type and id.
 */
function authnet_cim_entity_profile_id_load($type, $id) {

  // Create a static variable for storing customer profile ids.
  static $customer_profile_ids = array();

  // If an id wasn't provided, return FALSE.
  if (!$id) {
    return FALSE;
  }

  // If the customer profile id of the given type and id is not known, look it up.
  if (!isset($customer_profile_ids[$type]) || !isset($customer_profile_ids[$type][$id])) {
    $query = db_select('authnet_cim_entity', 'ace');
    $query->addField('ace', 'customer_profile_id');
    $query->condition('type', $type);
    $query->condition('id', $id);
    $result = $query->execute();
    $customer_profile_ids[$type][$id] = $result->fetchField();
  }

  // Return the requested customer profile id.
  return $customer_profile_ids[$type][$id];
}

/**
 * Get a customer profile, based on an entity type and id.
 *
 * @param $type
 *   The Drupal entity type.
 * @param $id
 *   The Drupal entity id.
 *
 * @return
 *   Returns the Authorize.net customer profile for the given entity type and id, if available. FALSE otherwise.
 */
function authnet_cim_entity_profile_load($type, $id) {

  // Look up the customer profile id.
  $customer_profile_id = authnet_cim_entity_profile_id_load($type, $id);

  // Return FALSE if a customer profile id wasn't found.
  if (!$customer_profile_id) {
    return FALSE;
  }

  // Return the loaded customer profile.
  return authnet_cim_profile_load($customer_profile_id);
}

/**
 * Save an entity's customer profile id to the database.
 *
 * @param $type
 *   The Drupal entity type.
 * @param $id
 *   The Drupal entity id.
 * @param $customer_profile_id
 *   The Authorize.net customer profile id.
 */
function authnet_cim_entity_profile_id_save($type, $id, $customer_profile_id) {

  // Build the record.
  $record = array(
    'type' => $type,
    'id' => $id,
    'customer_profile_id' => $customer_profile_id,
  );

  // Write the record.
  drupal_write_record('authnet_cim_entity', $record);
}

/**
 * Delete a customer profile and their payment profiles from the database.
 *
 * @param $customer_profile_id
 *   The Authorize.net customer profile id.
 */
function authnet_cim_entity_profile_id_delete($customer_profile_id) {

  // Delete the customer profile from the database.
  $query = db_delete('authnet_cim_entity');
  $query->condition('customer_profile_id', $customer_profile_id);
  $query->execute();

  // Delete all of the customer's payment profiles from the database.
  $query = db_delete('authnet_cim_entity_payment_profile');
  $query->condition('customer_profile_id', $customer_profile_id);
  $query->execute();
}

/* ******************************************************************************
 * Payment profile functions
 * Note that these functions only deal with the database records and the fields
 * they contain. They do not contact Authorize.net, so most of the payment
 * profile information is not included.
 * *****************************************************************************/

/**
 * Generate a database record array, optionally from an AuthorizeNetPaymentProfile object.
 */
function authnet_cim_entity_payment_profile_new($customer_profile_id = NULL, $payment_profile = NULL) {

  // Put together an empty record.
  $record = array(
    'pid' => NULL,
    'payment_profile_id' => '',
    'customer_profile_id' => '',
    'label' => '',
    'cc_last_four' => '',
    'cc_type' => '',
    'cc_exp_year' => '',
    'cc_exp_month' => '',
    'is_default' => 0,
  );

  // If a payment profile is supplied, fill in the appropriate values.
  if ($customer_profile_id && $payment_profile) {
    $record['customer_profile_id'] = $customer_profile_id;
    $record['payment_profile_id'] = $payment_profile->customerPaymentProfileId;

    // If the payment profile is a credit card...
    if (!empty($payment_profile->payment->creditCard->cardNumber)) {

      // Trim the card number to the last 4 digits.
      $record['cc_last_four'] = drupal_substr($payment_profile->payment->creditCard->cardNumber, -4);

      // Parse the expiration date. A valid date will be in the format 'YYYY-MM'. Ignore invalid dates.
      $expiration_date = explode('-', $payment_profile->payment->creditCard->expirationDate);
      if (count($expiration_date) == 2) {
        $record['cc_exp_month'] = $expiration_date[1];
        $record['cc_exp_year'] = $expiration_date[0];
      }
    }
  }

  return $record;
}

/**
 * Load a payment profile id from the database, given a pid.
 *
 * @param $pid
 *  The id of the payment profile record to load.
 *
 * @return
 *   Returns the payment profile id.
 */
function authnet_cim_entity_payment_profile_id_load($pid) {

  // Create a static variable for storing payment_profile_ids.
  static $payment_profile_ids = array();

  // If the payment profile id for the given pid isn't known, look it up.
  if (!isset($payment_profile_ids[$pid])) {
    $query = db_select('authnet_cim_entity_payment_profile', 'acepp');
    $query->addField('acepp', 'payment_profile_id');
    $query->condition('pid', $pid);
    $result = $query->execute();
    $payment_profile_ids[$pid] = $result->fetchField();
  }

  // Return the payment profile id.
  return $payment_profile_ids[$pid];
}

/**
 * Load a payment profile record from the database.
 *
 * @param $payment_profile_id
 *  The id of the payment profile record to load.
 *
 * @return
 *   Returns the payment profile record.
 */
function authnet_cim_entity_payment_profile_load($payment_profile_id) {

  // Load the payment profile from the database.
  $query = db_select('authnet_cim_entity_payment_profile', 'acepp');
  $query->fields('acepp');
  $query->condition('payment_profile_id', $payment_profile_id);
  $result = $query->execute();
  return $result->fetchAssoc();
}

/**
 * Load all payment profile records for a customer profile id.
 *
 * @param $customer_profile_id
 *   The customer profile id.
 *
 * @return
 *   Returns an array of payment profile records from the database.
 */
function authnet_cim_entity_customer_payment_profiles_load($customer_profile_id) {

  // Start with an empty result set.
  $payment_profiles = array();

  // Get all the payment profiles for that customer profile id.
  $query = db_select('authnet_cim_entity_payment_profile', 'acepp');
  $query->fields('acepp');
  $query->condition('customer_profile_id', $customer_profile_id);
  $result = $query->execute();

  // Loop through the results and add them to the array.
  while ($payment_profile = $result->fetchAssoc()) {
    $payment_profiles[$payment_profile['payment_profile_id']] = $payment_profile;
  }

  // Return the results.
  return $payment_profiles;
}

/**
 * Save a payment profile record to the database.
 *
 * @param payment_profile
 *   The payment profile record to save.
 */
function authnet_cim_entity_payment_profile_save($payment_profile) {
  $update = array();
  if (isset($payment_profile['pid']) && !empty($payment_profile['pid'])) {
    $update[] = 'pid';
  }
  drupal_write_record('authnet_cim_entity_payment_profile', $payment_profile, $update);
}

/**
 * Delete a payment profile record from the database.
 *
 * @param $payment_profile_id
 *   The id of the payment profile to delete.
 */
function authnet_cim_entity_payment_profile_delete($payment_profile_id) {
  $query = db_delete('authnet_cim_entity_payment_profile');
  $query->condition('payment_profile_id', $payment_profile_id);
  $query->execute();
}

/**
 * Determine the pid of a customer's default payment profile.
 */
function authnet_cim_entity_customer_payment_profile_default($customer_profile_id) {

  // Create a static variable for storing default pids.
  static $default_pids = array();

  // If the default pid for the given customer profile id isn't known, look it up.
  if (!isset($default_pids[$customer_profile_id])) {
    $query = db_select('authnet_cim_entity_payment_profile', 'acepp');
    $query->addField('acepp', 'pid');
    $query->condition('customer_profile_id', $customer_profile_id);
    $query->condition('is_default', 1);
    $result = $query->execute();
    $default_pids[$customer_profile_id] = $result->fetchField();
  }

  // Return the default pid for the customer profile id.
  return $default_pids[$customer_profile_id];
}

/* ******************************************************************************
 * Helper functions
 * *****************************************************************************/

/**
 * Split an Authorize.net customer profile's merchant customer id into a type and id, based on the expected format: "[type]:[id]" (ie: "user:1").
 */
function authnet_cim_entity_id_parse($id) {

  // Create an array with empty values.
  $entity = array(
    'type' => '',
    'id' => '',
  );

  // Make sure the id isn't empty.
  if (!empty($id)) {

    // Explode the id at the colon.
    $data = explode(':', $id);

    // If the explosion was successful, and there are exactly two parts, fill in the data.
    if (count($data) == 2) {
      $entity['type'] = $data[0];  // The first part is the entity type.
      $entity['id'] = $data[1];  // The second part is the entity id.
    }
  }

  // Return the entity information.
  return $entity;
}
