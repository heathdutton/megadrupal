<?php

/**
 * @file
 * Authorize.net - UI
 */

/* ******************************************************************************
 * Drupal hooks
 * *****************************************************************************/

/**
 * Implements hook_theme().
 */
function authnet_ui_theme($existing, $type, $theme, $path) {
  return array(
    'authnet_payment_profile' => array(
      'variables' => array('payment_profile' => array()),
    ),
  );
}

/* ******************************************************************************
 * Theme callbacks
 * *****************************************************************************/

/**
 * Theme a payment profile description.
 */
function theme_authnet_payment_profile($variables) {
  $payment_profile = $variables['payment_profile'];
  $parts = array();

  // If the payment profile has a label, start with that.
  if (!empty($payment_profile['label'])) {
    $parts[] = '<strong>' . $payment_profile['label'] . '</strong>';
  }

  // If the payment profile has a card type, add that.
  if (!empty($payment_profile['cc_type'])) {
    $parts[] = $payment_profile['cc_type'];
  }

  // If the last four digits are available, add them.
  if (!empty($payment_profile['cc_last_four'])) {
    $parts[] = 'ending in <strong>' . $payment_profile['cc_last_four'] . '</strong>';
  }

  // Assemble the output.
  $output = implode(' - ', $parts);

  // If this is a default payment profile, add a little flag for that.
  if ($payment_profile['is_default']) {
    $output .= ' (default)';
  }

  // Return the output.
  return $output;
}

/* ******************************************************************************
 * Form functions
 * *****************************************************************************/

/**
 * Payment profile form.
 *
 * @param $customer_profile_id
 *   The id of the Authorize.net customer profile (optional).
 * @param $payment_profile_id
 *   The id of the Authorize.net payment profile (optional).
 */
function authnet_ui_payment_profile_form($form, &$form_state, $customer_profile_id = NULL, $payment_profile_id = NULL) {

  // Set the form up as a tree.
  $form = array(
    '#tree' => TRUE,
  );

  // If a customer profile id and a payment profile id are provided, load the profile.
  if ($payment_profile_id) {
    $payment_profile = authnet_cim_payment_profile_load($customer_profile_id, $payment_profile_id);
  }

  // Otherwise, initialze a blank payment profile for default values.
  else {
    $payment_profile = authnet_payment_profile_new();
  }

  // Save the customer profile id, and payment profile id values.
  $form['customer_profile_id'] = array(
    '#type' => 'value',
    '#value' => $customer_profile_id,
  );
  $form['payment_profile_id'] = array(
    '#type' => 'value',
    '#value' => $payment_profile_id,
  );

  // Customer type.
  $form['customer_type'] = array(
    '#type' => 'select',
    '#title' => t('Customer type'),
    '#options' => array(
      '' => '',
      'individual' => 'Individual',
      'business' => 'Business',
    ),
    '#default_value' => $payment_profile->customerType,
  );

  // Billing address fieldset/fields.
  $form['billing'] = array(
    '#type' => 'fieldset',
    '#title' => t('Billing address'),
  );
  $form['billing']['first_name'] = array(
    '#type' => 'textfield',
    '#title' => t('First name'),
    '#required' => TRUE,
    '#default_value' => $payment_profile->billTo->firstName,
  );
  $form['billing']['last_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Last name'),
    '#required' => TRUE,
    '#default_value' => $payment_profile->billTo->lastName,
  );
  $form['billing']['company'] = array(
    '#type' => 'textfield',
    '#title' => t('Company'),
    '#default_value' => $payment_profile->billTo->company,
  );
  $form['billing']['address'] = array(
    '#type' => 'textfield',
    '#title' => t('Address'),
    '#required' => TRUE,
    '#default_value' => $payment_profile->billTo->address,
  );
  $form['billing']['city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#required' => TRUE,
    '#default_value' => $payment_profile->billTo->city,
  );
  $form['billing']['state'] = array(
    '#type' => 'textfield',
    '#title' => t('State/province'),
    '#required' => TRUE,
    '#default_value' => $payment_profile->billTo->state,
  );
  $form['billing']['zip'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip/postal code'),
    '#required' => TRUE,
    '#default_value' => $payment_profile->billTo->zip,
  );
  $form['billing']['country'] = array(
    '#type' => 'textfield',
    '#title' => t('Country'),
    '#required' => TRUE,
    '#default_value' => $payment_profile->billTo->country,
  );
  $form['billing']['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone'),
    '#default_value' => $payment_profile->billTo->phoneNumber,
  );
  $form['billing']['fax'] = array(
    '#type' => 'textfield',
    '#title' => t('Fax'),
    '#default_value' => $payment_profile->billTo->faxNumber,
  );

  // Card fieldset.
  $form['card'] = array(
    '#type' => 'fieldset',
    '#title' => t('Card information'),
  );

  // If we're editing an existing profile, provide an explanation about how the credit card fields work.
  if ($payment_profile_id) {
    $form['card']['#description'] = t('Note: the form below will NOT display your existing credit card information (except for the last four digits of the card). If you need to update your credit card, fill in all the fields below with the new information. Otherwise, leave them alone and the original values will be used.');
  }

  // Card type.
  $card_types = array(
    '',
    'Visa',
    'MasterCard',
    'American Express',
    'Discover',
  );
  $form['card']['type'] = array(
    '#type' => 'select',
    '#title' => t('Card type'),
    '#options' => drupal_map_assoc($card_types),
  );

  // Card number.
  $form['card']['number'] = array(
    '#type' => 'textfield',
    '#title' => t('Card number'),
    '#default_value' => $payment_profile->payment->creditCard->cardNumber,
  );

  // Card expiration month.
  $months = array(
    '',
    '01',
    '02',
    '03',
    '04',
    '05',
    '06',
    '07',
    '08',
    '09',
    '10',
    '11',
    '12',
  );
  $form['card']['exp_month'] = array(
    '#type' => 'select',
    '#title' => t('Expiration month'),
    '#options' => drupal_map_assoc($months),
  );

  // Build a list of year options (current year + 10).
  $current_year = date('Y');
  $years = range($current_year, $current_year + 10);
  array_unshift($years, '');

  // Card expiration year.
  $form['card']['exp_year'] = array(
    '#type' => 'select',
    '#title' => t('Expiration year'),
    '#options' => drupal_map_assoc($years),
  );

  // Card CVV.
  $form['card']['cvv'] = array(
    '#type' => 'textfield',
    '#title' => t('Card CVV'),
    '#size' => 5,
  );

  // Only make the credit card fields required if we're saving a new payment profile.
  if (!$payment_profile_id) {
    $form['card']['type']['#required'] = TRUE;
    $form['card']['number']['#required'] = TRUE;
    $form['card']['exp_month']['#required'] = TRUE;
    $form['card']['exp_year']['#required'] = TRUE;
  }

  // Save button.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#submit' => array('authnet_ui_payment_profile_form_submit'),
  );

  return $form;
}

/**
 * Payment profile form submit.
 */
function authnet_ui_payment_profile_form_submit($form, &$form_state) {

  // Get the customer profile id.
  $customer_profile_id = $form_state['values']['customer_profile_id'];

  // If no customer profile id is set, call the new profile creation function.
  if (!$customer_profile_id) {
    $customer_profile = authnet_ui_form_customer_profile_new($form_state['values']['form_id'], $form_state);
    $customer_profile_id = $customer_profile->customerProfileId;
  }

  // Get the payment profile id.
  $payment_profile_id = $form_state['values']['payment_profile_id'];

  // Assemble the payment profile object from the form values.
  $values = array(
    'customerPaymentProfileId' => $payment_profile_id,
    'customerType' => check_plain($form_state['values']['customer_type']),
    'billTo' => array(
      'firstName' => check_plain($form_state['values']['billing']['first_name']),
      'lastName' => check_plain($form_state['values']['billing']['last_name']),
      'company' => check_plain($form_state['values']['billing']['company']),
      'address' => check_plain($form_state['values']['billing']['address']),
      'city' => check_plain($form_state['values']['billing']['city']),
      'state' => check_plain($form_state['values']['billing']['state']),
      'zip' => check_plain($form_state['values']['billing']['zip']),
      'country' => check_plain($form_state['values']['billing']['country']),
      'phoneNumber' => check_plain($form_state['values']['billing']['phone']),
      'faxNumber' => check_plain($form_state['values']['billing']['fax']),
    ),
  );

  // Assemble the credit card information.
  $cc = array(
    'type' => $form_state['values']['card']['type'],
    'number' => $form_state['values']['card']['number'],
    'exp' => $form_state['values']['card']['exp_year'] . '-' . $form_state['values']['card']['exp_month'],
    'cvv' => $form_state['values']['card']['cvv'],
  );

  // Only add credit card fields if a) the payment profile is new, or b) all the fields are present in the form.
  if (!$payment_profile_id || ( !empty($cc['type']) && $cc['exp'] != '-' )) {
    $values['payment'] = array(
      'creditCard' => array(
        'cardNumber' => check_plain($cc['number']),
        'expirationDate' => check_plain($cc['exp']),
        'cardCode' => check_plain($cc['cvv']),
      ),
    );
  }

  // Otherwise, add default payment information, which Authorize.net will ignore.
  else {
    $values['payment'] = array(
      'creditCard' => array(
        'cardNumber' => check_plain($cc['number']),
        'expirationDate' => 'XXXX',
        'cardCode' => '',
      ),
    );
  }

  // Generate the AuthorizeNetPaymentProfile object from the values.
  $payment_profile = authnet_payment_profile_new($values);

  // Save the payment profile.
  authnet_cim_payment_profile_save($customer_profile_id, $payment_profile);

  // Invoke a hook to allow other modules to do stuff with the new payment profile after it's been saved via this form.
  module_invoke_all('authnet_ui_payment_profile_form_submit', $payment_profile, $form_state);
}

/* ******************************************************************************
 * Helper functions
 * *****************************************************************************/

/**
 * Generate an array of payment profile options for a given user.
 *
 * @param $customer_profile_id
 *   The customer profile id to load payment profile options for.
 *
 * @return
 *   An array of themed payment profiles.
 */
function authnet_ui_payment_profile_options($customer_profile_id) {
  $options = array();

  // Load the customer's payment profiles and iterate through them.
  $payment_profiles = authnet_cim_entity_customer_payment_profiles_load($customer_profile_id);
  foreach ($payment_profiles as $payment_profile) {

    // Add an option to the array with the last four digits and the street address.
    $options[$payment_profile['pid']] = theme('authnet_payment_profile', array('payment_profile' => $payment_profile));
  }
  return $options;
}

/**
 * Create a new Authorize.net customer profile during form submit.
 *
 * @param $form_id
 *   The id of the form calling this function.
 * @param $form_state
 *   The state of the form calling this function.
 * @param $save
 *   Boolean: whether or not to automatically save the new customer profile to Authorize.net. Defaults to TRUE.
 *
 * @return
 *   Returns a new AuthorizeNetCustomer object.
 */
function authnet_ui_form_customer_profile_new($form_id, $form_state, $save = TRUE) {

  // Create a new AuthorizeNetCustomer object with the values.
  $profile = authnet_customer_profile_new();

  // Allow other modules to modify the profile.
  $hook = 'authnet_ui_form_customer_profile_new';
  foreach (module_implements($hook) as $module) {
    $function = $module . '_' . $hook;
    $function($profile, $form_state, $form_id);
  }

  // If $save is TRUE, save the new profile to Authorize.net.
  if ($save) {
    authnet_cim_profile_save($profile);
  }

  // Return the profile.
  return $profile;
}
