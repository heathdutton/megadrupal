<?php

/**
 * @file
 * The module file.
 * Author : Shamsh Tabrij - CyberNetikz.
 */


/**
 * Implements hook_menu().
 */
function smart_import_menu() {

  $items['admin/content/smart-import'] = array(
    'title' => 'Smart Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smart_import_node_form'),
    'access callback' => 'user_access',
    'access arguments' => array('access smart import'),
    'description' => 'Node data import form',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function smart_import_permission() {
  return array(
    'access smart import' => array(
      'title' => t('Access permission for import'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Node import form.
 */
function smart_import_node_form($form, $form_state) {
  smart_import_init_error_session();
  $types = node_type_get_types();
  if ($types) {
    $options = array('' => t('Select Content Type'));
    foreach ($types as $type) {
      $options[$type->type] = $type->name;
    }
    $form['node_import_form'] = array(
      '#type' => 'fieldset',
      '#title' => t('Node Import Form'),
    );
    $form['node_import_form']['types'] = array(
      '#type' => 'select',
      '#title' => 'Content Type',
      '#options' => $options,
      '#default_value' => '',
      '#required' => TRUE,
    );
    $form['node_import_form']['file'] = array(
      '#type' => 'file',
      '#title' => t('Upload File'),
      '#description' => t('Upload a file, allowed extensions: xls, xlsx'),
    );
    $form['node_import_form']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );
  }
  return $form;
}

/**
 * Validate handler for smart_import_node_form().
 */
function smart_import_node_form_validate($form, &$form_state) {
  $file = file_save_upload('file', array(
    'file_validate_extensions' => array('xls xlsx'),
  ));
  if ($file) {
    if ($file = file_move($file, 'public://smart-import')) {
      $form_state['storage']['file'] = $file;
    }
    else {
      form_set_error('file', t("Failed to write the uploaded file the site's file/smart-import folder."));
    }
  }
  else {
    form_set_error('file', t('File is required.'));
  }
}

/**
 * Submit handler for smart_import_node_form().
 */
function smart_import_node_form_submit($form, &$form_state) {
  if (isset($form_state['storage']['file'])) {
    module_load_include('inc', 'phpexcel', 'phpexcel');
    $success_history = array('Accept' => 0, 'Reject' => 0);

    // The path to the excel file.
    $path = drupal_realpath($form_state['storage']['file']->uri);
    $data = phpexcel_import($path);
    $attrib = new stdClass();
    $attrib->node_type = $form_state['values']['types'];
    $attrib->success_history = $success_history;
    $fields = field_info_instances("node", $attrib->node_type);
    $attrib->fields = $fields;

    if (isset($data[0]) && count($data[0])) {

      foreach ($data[0] as $key => $item) {
        $attrib->key = $key + 2;
        $attrib->data = $item;
        smart_import_save_row_as_node($attrib);
      }
    }

    $errors = smart_import_get_error();
    if ($errors) {
      foreach ($errors as $error) {
        drupal_set_message($error, 'error');
      }
    }

    drupal_set_message(t("Import completed with Accept: @accept & Reject: @reject.", array('@accept' => $attrib->success_history['Accept'], '@reject' => $attrib->success_history['Reject'])));
    file_delete($form_state['storage']['file']);
  }
}

/**
 * Save each row from uploaded file.
 */
function smart_import_save_row_as_node($attrib) {
  global $user;
  $no_title = FALSE;
  if (!isset($attrib->data['title']) && empty($attrib->data['title'])) {
    smart_import_set_error(t("Row # @key row has no title", array('@key' => $attrib->key)));
    $no_title = TRUE;
  }

  if (!$no_title) {
    $attrib->validation = TRUE;
    $values = array(
      'type' => $attrib->node_type,
      'uid' => $user->uid,
      'status' => 1,
      'comment' => 0,
      'promote' => 0,
    );

    $entity = entity_create('node', $values);
    $ewrapper = entity_metadata_wrapper('node', $entity);

    $ewrapper->title->set($attrib->data['title']);
    foreach ($attrib->fields as $field_name => $field) {
      smart_import_prepare_fields($field_name, $field, $attrib, $ewrapper);
    }

    if ($attrib->validation) {
      drupal_alter('smart_import_row', $attrib->data, $ewrapper);
      $ewrapper->save(TRUE);
      $status = entity_save('node', $entity);
      $attrib->success_history['Accept'] += 1;
    }
    else {
      $attrib->success_history['Reject'] += 1;
    }
  }
}

/**
 * Prepare field based on their type.
 */
function smart_import_prepare_fields($field_name, $field, $attrib, &$ewrapper) {
  $field_config = field_info_field($field_name);
  $attrib->field_config = $field_config;
  switch ($field_config['type']) {
    case 'text':
    case 'text_long':
    case 'list_text':
    case 'text_with_summary': smart_import_set_text_field($field_name, $field, $attrib, $ewrapper);
      break;

    case 'list_integer':
    case 'number_integer':  smart_import_set_int_field($field_name, $field, $attrib, $ewrapper);
      break;

    case 'number_decimal':
    case 'list_float':
    case 'number_float':  smart_import_set_float_field($field_name, $field, $attrib, $ewrapper);
      break;

    case 'list_boolean':  smart_import_set_bool_field($field_name, $field, $attrib, $ewrapper);
  }
}

/**
 * Set boolean field.
 */
function smart_import_set_bool_field($field_name, $field, $attrib, &$ewrapper) {
  if (isset($attrib->data[$field_name]) && !empty($attrib->data[$field_name])) {
    $value = 1;
    if ($attrib->field_config['cardinality'] != 1) {
      $value = array($value);
    }
    smart_import_set_field($field_name, $value, $ewrapper);
  }
  elseif ($field['required']) {
    $value = 0;
    if ($attrib->field_config['cardinality'] != 1) {
      $value = array($value);
    }
    smart_import_set_field($field_name, $value, $ewrapper);
  }
}

/**
 * Set text type field.
 */
function smart_import_set_text_field($field_name, $field, $attrib, &$ewrapper) {
  if (isset($attrib->data[$field_name]) && !empty($attrib->data[$field_name])) {
    if ($attrib->field_config['cardinality'] == 1) {
      $value = $attrib->data[$field_name];
      smart_import_set_field($field_name, $value, $ewrapper);
    }
    else {
      $value = $attrib->data[$field_name];
      $value = explode(',', $value);
      foreach ($value as $key => $val) {
        $value[$key] = $val;
      }
      smart_import_set_field($field_name, $value, $ewrapper);
    }
  }
  elseif ($field['required']) {
    $attrib->validation = FALSE;
    smart_import_set_error("Row #" . $attrib->key . ' ' . $field_name . " is required.");
  }
}

/**
 * Set int type field.
 */
function smart_import_set_int_field($field_name, $field, $attrib, &$ewrapper) {

  if (isset($attrib->data[$field_name]) && !empty($attrib->data[$field_name])) {
    if ($attrib->field_config['cardinality'] == 1) {
      $value = intval($attrib->data[$field_name]);
      smart_import_set_field($field_name, $value, $ewrapper);
    }
    else {
      $value = $attrib->data[$field_name];
      $value = explode(',', $value);
      foreach ($value as $key => $val) {
        $value[$key] = intval($val);
      }
      smart_import_set_field($field_name, $value, $ewrapper);
    }
  }
  elseif ($field['required']) {
    $attrib->validation = FALSE;
    smart_import_set_error("Row #" . $attrib->key . ' ' . $field_name . " is required.");
  }
}

/**
 * Set float type field.
 */
function smart_import_set_float_field($field_name, $field, $attrib, &$ewrapper) {

  if (isset ($attrib->data[$field_name]) && !empty($attrib->data[$field_name])) {
    if ($attrib->field_config['cardinality'] == 1) {
      $value = floatval($attrib->data[$field_name]);
      smart_import_set_field($field_name, $value, $ewrapper);
    }
    else {
      $value = $attrib->data[$field_name];
      $value = explode(',', $value);
      foreach ($value as $key => $val) {
        $value[$key] = floatval($val);
      }
      smart_import_set_field($field_name, $value, $ewrapper);
    }
  }
  elseif ($field['required']) {
    $attrib->validation = FALSE;
    smart_import_set_error("Row #" . $attrib->key . ' ' . $field_name . " is required.");
  }
}

/**
 * Set field value.
 */
function smart_import_set_field($field_name, $value, &$ewrapper) {
  if ($field_name == 'body') {
    $ewrapper->body->set(array('value' => $value));
  }
  else {
    $ewrapper->$field_name->set($value);
  }
}

/**
 * Initialize the session for smart import use.
 */
function smart_import_init_error_session() {

  $errors = array('code' => 0, 'msg' => array(), 'error' => array());
  $_SESSION['smart_import_error'] = $errors;
}

/**
 * Set import error.
 */
function smart_import_set_error($msg) {
  $_SESSION['smart_import_error']['code'] = 1;
  array_push($_SESSION['smart_import_error']['error'], $msg);
}

/**
 * Return the import errors.
 */
function smart_import_get_error() {
  return $_SESSION['smart_import_error']['error'];
}

/**
 * Check the import has any error.
 */
function smart_import_is_error() {
  return $_SESSION['smart_import_error']['code'];
}
