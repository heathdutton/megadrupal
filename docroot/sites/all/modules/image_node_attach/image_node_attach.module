<?php

/**
 * Image Node Attach module.
 *
 * @file image_node_attach.module
 *
 * Migrate all image_attach module nodes to new image field in Drupal 7. Any
 * image nodes that participate in image_attach will be properly attached with
 * new image field.
 *
 * The idea is that you are done with migration from Drupal 6 to Drupal 7 but
 * image_attach module migration still pending. This module defines migration
 * plans for image_attach module migration which can then be selected in an
 * admin UI and run as a batch.
 *
 * Each plan defines:
 *  - select content type where image attach field migration needed.
 *  - It automatically attach images with entity reference field where all your
 *    images will be migrated.
 */

/**
 * Implements hook_help().
 */
function image_node_attach_help($path, $arg) {
  switch ($path) {
    case 'admin/help#image_node_attach':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The Image Node Attach module resolved the issue of migration image attach nodes from Drupal 6 to Drupal 7. In Drupal 6, to add pictures to posts was using a combination of the image module with the image attach module. Now in Drupal 7 Imagecache and ImageField is incorporated into Drupal 7 core and renamed 'Image'.") . '</p>';
      $output .= '<p>' . t("You need to migrate image_attach images using following steps:") . '</p>';
      $output .= '<ul>';
      $output .= '<li>' . t("Back up your files and database.") . '</li>';
      $output .= '<li>' . t("Assuming Migration from D6 Content Construction Kit (CCK) to D7 Fields is already done. See <a href='@cck_migration'>Migrating D6 Content Construction Kit (CCK) to D7 Fields</a>", array('@cck_migration' => 'https://www.drupal.org/node/1144136')) . '</li>';
      $output .= '<li>' . t("Image node data is already converted to Image fields using <a href='@field_convert'>Field converter</a> module.", array('@field_convert' => 'http://www.drupal.org/project/field_convert')) . '</li>';
      $output .= '<li>' . t("Now visit to <a href='@image_attach'>Image Node Attach page</a>. Select the content types where image attach images will be migrated.", array('@image_attach' => url('admin/config/media/image-attach-migrate'))) . '</li>';
      $output .= '</ul>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function image_node_attach_menu() {
  $items = array();
  $items['admin/config/media/image-node-attach'] = array(
    'title' => 'Image Node Attach',
    'description' => 'Image Node Attach Migrate From Drupal 6 to Drupal 7.',
    'page callback' => 'drupal_get_form',
    'page arguments'    => array('image_node_attach_admin_form'),
    'access arguments' => array('administer image node attach'),
    'file' => 'image_node_attach.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function image_node_attach_permission() {
  return array(
    'administer image node attach' => array(
      'title' => t('Administer image node attach'),
      'description' => t('Access the image node attach page that migrate image attach nodes from D6 to D7.'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 *
 * Expose Entity Reference Field formatter type.
 */
function image_node_attach_field_formatter_info() {
  return array(
    // The key must be unique, so it's best to prefix with your module's name.
    'image_node_attach_entity_image_formatter' => array(
      // The label is is what is displayed in the select box in the UI.
      'label' => t('Entity Reference Image Formatter'),
      // The field types is the entityreference.
      'field types' => array('entityreference'),
      // Make 'multiple values' as follows.
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
      'settings' => array('image_style' => '', 'image_link' => ''),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Build a renderable array for a field value. A renderable array for the
 * $items, as an array of child elements keyed by numeric indexes starting from
 * 0.
 */
function image_node_attach_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  // Check if the formatter involves a link.
  if ($display['settings']['image_link'] == 'content') {
    $uri = entity_uri($entity_type, $entity);
  }
  elseif ($display['settings']['image_link'] == 'file') {
    $link_file = TRUE;
  }
  // This formatter simply outputs the field as text and with a color.
  if ($display['type'] == 'image_node_attach_entity_image_formatter') {
    foreach ($items as $delta => $item) {
      $image_node = node_load($item['target_id']);
      if (isset($image_node->node_image[LANGUAGE_NONE][0])) {
        $item = $image_node->node_image[LANGUAGE_NONE][0];
        if (isset($link_file)) {
          $uri = array(
            'path' => file_create_url($item['uri']),
            'options' => array(),
          );
        }
        $elements[$delta] = array(
          '#theme' => 'entity_reference_image_formatter',
          '#item' => $item,
          '#image_style' => $display['settings']['image_style'],
          '#path' => isset($uri) ? $uri : '',
        );
      }
    }
  }
  return $elements;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function image_node_attach_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE, PASS_THROUGH);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['image_style']])) {
    $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
  }
  else {
    $summary[] = t('Original image');
  }

  $link_types = array(
    'content' => t('Linked to content'),
    'file' => t('Linked to file'),
  );
  // Display this setting only if image is linked.
  if (isset($link_types[$settings['image_link']])) {
    $summary[] = $link_types[$settings['image_link']];
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function image_node_attach_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_styles = image_style_options(FALSE, PASS_THROUGH);
  $element['image_style'] = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#default_value' => $settings['image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );

  $link_types = array(
    'content' => t('Content'),
    'file' => t('File'),
  );
  $element['image_link'] = array(
    '#title' => t('Link image to'),
    '#type' => 'select',
    '#default_value' => $settings['image_link'],
    '#empty_option' => t('Nothing'),
    '#options' => $link_types,
  );

  return $element;
}

/**
 * Implements hook_theme().
 */
function image_node_attach_theme() {
  return array(
    'entity_reference_image_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'path' => NULL,
        'image_style' => NULL,
      ),
    ),
  );
}

/**
 * Returns HTML for an image field formatter.
 *
 * @param array $variables
 *   An associative array containing:
 *   - item: Associative array of image data, which may include "uri", "alt",
 *     "width", "height", "title" and "attributes".
 *   - image_style: An optional image style.
 *   - path: An array containing the link 'path' and link 'options'.
 *
 * @ingroup themeable
 */
function theme_entity_reference_image_formatter(array $variables) {
  $item = $variables['item'];
  $image = array(
    'path' => $item['uri'],
  );

  if (array_key_exists('alt', $item)) {
    $image['alt'] = $item['alt'];
  }

  if (isset($item['attributes'])) {
    $image['attributes'] = $item['attributes'];
  }

  if (isset($item['width']) && isset($item['height'])) {
    $image['width'] = $item['width'];
    $image['height'] = $item['height'];
  }

  // Do not output an empty 'title' attribute.
  if (isset($item['title']) && drupal_strlen($item['title']) > 0) {
    $image['title'] = $item['title'];
  }

  if ($variables['image_style']) {
    $image['style_name'] = $variables['image_style'];
    $output = theme('image_style', $image);
  }
  else {
    $output = theme('image', $image);
  }
  // The link path and link options are both optional, but for the options to be
  // processed, the link path must at least be an empty string.
  if (isset($variables['path']['path'])) {
    $path = $variables['path']['path'];
    $options = isset($variables['path']['options']) ? $variables['path']['options'] : array();
    // When displaying an image inside a link, the html option must be TRUE.
    $options['html'] = TRUE;
    $output = l($output, $path, $options);
  }

  return $output;
}
