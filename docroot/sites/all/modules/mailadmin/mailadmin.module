<?php
/**
 * @file
 * E-mail server administration module.
 */

/**
 * Implements hook_menu().
 */
function mailadmin_menu() {
  $items = array();

  $items['mailadmin'] = array(
    'title' => 'E-mail administration',
    'page callback' => 'mailadmin_overview_page',
    'access arguments' => array('access mailadmin'),
    'file' => 'includes/mailadmin.pages.inc',
  );

  $items['mailadmin/overview'] = array(
    'title' => 'Overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['mailadmin/domain/%'] = array(
    'title' => 'E-mail addresses for domain',
    'page callback' => 'mailadmin_domain_page',
    'page arguments' => array(2),
    'access arguments' => array('access mailadmin'),
    'file' => 'includes/mailadmin.pages.inc',
  );

  $items['mailadmin/mailbox'] = array(
    'title' => 'Mailboxes',
    'page callback' => 'mailadmin_mailbox_page',
    'access arguments' => array('access mailadmin'),
    'file' => 'includes/mailadmin.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['mailadmin/mailbox/add'] = array(
    'title' => 'Add new mailbox',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailadmin_mailbox_edit_form', NULL),
    'access arguments' => array('access mailadmin'),
    'file' => 'includes/mailadmin.pages.inc',
  );

  $items['mailadmin/mailbox/%mailadmin_mailbox'] = array(
    'title' => 'Edit mailbox',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailadmin_mailbox_edit_form', 2),
    'access arguments' => array('access mailadmin'),
    'file' => 'includes/mailadmin.pages.inc',
  );

  $items['mailadmin/mailbox/%mailadmin_mailbox/delete'] = array(
    'title' => 'Delete mailbox',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailadmin_mailbox_delete_form', 2),
    'access arguments' => array('access mailadmin'),
    'file' => 'includes/mailadmin.pages.inc',
  );

  $items['mailadmin/forward'] = array(
    'title' => 'Forwards',
    'page callback' => 'mailadmin_forward_page',
    'access arguments' => array('access mailadmin'),
    'file' => 'includes/mailadmin.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['mailadmin/forward/add'] = array(
    'title' => 'Add new forwarding-only address',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailadmin_forward_form'),
    'access arguments' => array('access mailadmin'),
    'file' => 'includes/mailadmin.pages.inc',
  );

  $items['mailadmin/forward/%mailadmin_forward'] = array(
    'title' => 'Edit forwarding-only address',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailadmin_forward_form', 2),
    'access arguments' => array('access mailadmin'),
    'file' => 'includes/mailadmin.pages.inc',
  );

  $items['mailadmin/forward/%mailadmin_forward/delete'] = array(
    'title' => 'Delete forwarding-only address',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailadmin_forward_delete_form', 2),
    'access arguments' => array('access mailadmin'),
    'file' => 'includes/mailadmin.pages.inc',
  );

  $items['mailadmin/alias/add'] = array(
    'title' => 'Add new domain alias',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailadmin_alias_form'),
    'access arguments' => array('access mailadmin'),
    'file' => 'includes/mailadmin.pages.inc',
  );

  $items['mailadmin/alias/%mailadmin_alias'] = array(
    'title' => 'Edit domain alias',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailadmin_alias_form', 2),
    'access arguments' => array('access mailadmin'),
    'file' => 'includes/mailadmin.pages.inc',
  );

  $items['mailadmin/alias/%mailadmin_alias/delete'] = array(
    'title' => 'Delete domain alias',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailadmin_alias_delete_form', 2),
    'access arguments' => array('access mailadmin'),
    'file' => 'includes/mailadmin.pages.inc',
  );

  return $items;
}

function mailadmin_admin_paths() {
  return array(
    'mailadmin' => TRUE,
    'mailadmin/*' => TRUE,
  );
}

/**
 * Implements hook_permission().
 */
function mailadmin_permission() {
  return array(
    'access mailadmin' => array(
      'title' => t('Access mailadmin'), 
      'description' => t('Enables the user to administer e-mail accounts for its domains.'),
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function mailadmin_entity_info() {
  $return = array(
    'mailadmin_mailbox' => array(
      'label' => t('E-mail mailbox'),
      'controller class' => 'MailadminMailboxController',
      'base table' => 'mailadmin_mailboxes',
      // We do not want extra fields or revisions on this entity.
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'mailbox_id',
      ),
      'bundles' => array(
        'mailadmin_mailbox' => array(
          'label' => t('E-mail mailbox'),
        ),
      ),
      'load hook' => 'mailadmin_mailbox_load',
      'view modes' => array(
        'administrator' => array(
          'label' => t('Administrator'),
          'custom settings' => FALSE,
        ),
      ),
      'views controller class' => 'EntityDefaultViewsController',
    ),
    'mailadmin_forward' => array(
      'label' => t('E-mail forward'),
      'controller class' => 'MailadminForwardController',
      'base table' => 'mailadmin_forwards',
      // We do not want extra fields or revisions on this entity.
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'forward_id',
      ),
      'bundles' => array(
        'mailadmin_forward' => array(
          'label' => t('E-mail forward'),
        ),
      ),
      'load hook' => 'mailadmin_forward_load',
      'view modes' => array(
        'administrator' => array(
          'label' => t('Administrator'),
          'custom settings' => FALSE,
        ),
      ),
      'views controller class' => 'EntityDefaultViewsController',
    ),
    'mailadmin_alias' => array(
      'label' => t('E-mail domain alias'),
      'controller class' => 'MailadminAliasController',
      'base table' => 'mailadmin_domain_aliases',
      // We do not want extra fields or revisions on this entity.
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'alias_id',
      ),
      'bundles' => array(
        'mailadmin_alias' => array(
          'label' => t('E-mail domain alias'),
        ),
      ),
      'load hook' => 'mailadmin_forward_load',
      'view modes' => array(
        'administrator' => array(
          'label' => t('Administrator'),
          'custom settings' => FALSE,
        ),
      ),
      'views controller class' => 'EntityDefaultViewsController',
    ),
  );

  return $return;
}

/**
 * Create a new mail mailbox object
 */
function mailadmin_mailbox_new($values = array()) {
  return entity_create('mailadmin_mailbox', $values);
}

/**
 * Save a mail mailbox.
 *
 * @param $mailbox
 *    The mailbox object
 */
function mailadmin_mailbox_save($mailbox) {
  return entity_save('mailadmin_mailbox', $mailbox);
}

/**
 * Save a mail mailbox.
 *
 * @param $mailbox_id
 *    The mailbox ID
 */
function mailadmin_mailbox_delete($mailbox_id) {
  return entity_delete('mailadmin_mailbox', $mailbox_id);
}

/**
 * Loads a mail mailbox by ID.
 *
 * @param $mailbox_id
 *   The mailbox id
 * @param $reset
 *   Whether to reset the internal mailbox loading cache.
 *
 * @return A mailbox object or FALSE if no mailbox was found.
 */
function mailadmin_mailbox_load($mailbox_id, $reset = FALSE) {
  $mailboxes = mailadmin_mailbox_load_multiple(array($mailbox_id), array(), $reset);
  return $mailboxes ? reset($mailboxes) : FALSE;
}

/**
 * Loads multiple mailboxes by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $mailbox_ids
 *   An array of mailbox IDs.
 * @param $conditions
 *   An array of conditions on the {mailadmin_mailboxes} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal mailbox loading cache.
 *
 * @return
 *   An array of mailbox objects indexed by mailbox_id.
 */
function mailadmin_mailbox_load_multiple($mailbox_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('mailadmin_mailbox', $mailbox_ids, $conditions, $reset);
}

/**
 * Create a new forward object
 */
function mailadmin_forward_new($values = array()) {
  return entity_create('mailadmin_forward', $values);
}

/**
 * Save a forward.
 *
 * @param $forward
 *   The forward object
 */
function mailadmin_forward_save($forward) {
  return entity_save('mailadmin_forward', $forward);
}

/**
 * Save a forward.
 *
 * @param $forward_id
 *   The forward ID
 */
function mailadmin_forward_delete($forward_id) {
  return entity_delete('mailadmin_forward', $forward_id);
}

/**
 * Loads a forward by ID.
 *
 * @param $forward_id
 *   The forward id
 * @param $reset
 *   Whether to reset the internal forward loading cache.
 *
 * @return A forward object or FALSE if no forward was found.
 */
function mailadmin_forward_load($forward_id, $reset = FALSE) {
  $forwards = mailadmin_forward_load_multiple(array($forward_id), array(), $reset);
  return $forwards ? reset($forwards) : FALSE;
}

/**
 * Loads multiple forwards by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $forward_ids
 *   An array of forward IDs.
 * @param $conditions
 *   An array of conditions on the {mailadmin_forwards} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal forward loading cache.
 *
 * @return
 *   An array of forward objects indexed by forward_id.
 */
function mailadmin_forward_load_multiple($forward_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('mailadmin_forward', $forward_ids, $conditions, $reset);
}

/**
 * Create a new alias object
 */
function mailadmin_alias_new($values = array()) {
  return entity_create('mailadmin_alias', $values);
}

/**
 * Save an alias.
 *
 * @param $alias
 *   The alias object
 */
function mailadmin_alias_save($alias) {
  return entity_save('mailadmin_alias', $alias);
}

/**
 * Delete an alias.
 *
 * @param $alias_id
 *   The alias ID
 */
function mailadmin_alias_delete($alias_id) {
  return entity_delete('mailadmin_alias', $alias_id);
}

/**
 * Loads an alies by ID.
 *
 * @param $alias_id
 *   The alias IDs
 * @param $reset
 *   Whether to reset the internal forward loading cache.
 *
 * @return An alias object or FALSE if no forward was found.
 */
function mailadmin_alias_load($alias_id, $reset = FALSE) {
  $aliases = mailadmin_alias_load_multiple(array($alias_id), array(), $reset);
  return $aliases ? reset($aliases) : FALSE;
}

/**
 * Loads multiple aliases by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $alias_ids
 *   An array of alias IDs.
 * @param $conditions
 *   An array of conditions on the {mailadmin_forwards} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal forward loading cache.
 *
 * @return
 *   An array of forward objects indexed by forward_id.
 */
function mailadmin_alias_load_multiple($alias_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('mailadmin_alias', $alias_ids, $conditions, $reset);
}

/**
 * Hash a password according to Dovecot's SSHA hash format.
 */
function mailadmin_hash_password($password) {
  $algo = variable_get('mailadmin_hash_algorithm', 'sha256');

  $salt = drupal_random_bytes(7);

  return '{S' . strtoupper($algo) . '}' . base64_encode(hash('sha256', $password . $salt, TRUE) . $salt);
}

/**
 * Renders a View for display in some other element.
 *
 * @param $view_key
 *   The ID of the View to embed.
 * @param $display_id
 *   The ID of the display of the View that will actually be rendered.
 * @param $arguments
 *   An array of arguments to pass to the View.
 *
 * @return
 *   The rendered output of the chosen View display.
 */
function mailadmin_embed_view($view_id, $display_id, $arguments = array()) {
  // Load the View.
  $view = views_get_view($view_id);
  $view->set_display($display_id);

  // Set the argument(s)
  $view->set_arguments($arguments);

  // Prepare and execute the View query.
  $view->pre_execute();
  $view->execute();

  // Return the rendered View.
  return $view->render();
}

/**
 * Implements hook_views_api().
 */
function mailadmin_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'mailadmin') . '/includes/views',
  );
}
