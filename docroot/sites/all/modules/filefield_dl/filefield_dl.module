<?php
/**
 * @file
 * Adds an option to filefield instances to trigger a download of the file when
 * the page containing that entity is loaded.
 */

define('FFDL_NODE_NORMAL', 0);
define('FFDL_WAITING_TEXT', t('Your download should begin shortly.'));

/**
 * Implements hook_form_alter().
 */
function filefield_dl_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'field_ui_field_edit_form':
      if ($form['#field']['type'] == 'file') {
        $form['instance']['settings']['auto_dl'] = array(
          '#type' => 'checkbox',
          '#title' => t('Enable <em>Auto-Download</em> field'),
          '#description' => t('Allow authors to select a file to being downloading as soon as the entity display is rendered.'),
          '#default_value' => (isset($form['#instance']['settings']['auto_dl']) ? $form['#instance']['settings']['auto_dl'] : 0),
          '#weight' => 98,
        );
      }
      break;
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function filefield_dl_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($context['field']['type'] == 'file' && isset($context['instance']['settings']['auto_dl']) && $context['instance']['settings']['auto_dl'] == 1) {
    foreach ($element as $delta => &$item) {
      $item['#process'][] = 'filefield_dl_field_widget_process';
    }
    /*$lang = $form_state['node']->language;
    //$file_field_data = $form_state['field']['###'][$lang]['instance']['settings']

    dsm($element, 'element');
    dsm($form_state, 'form_state');
    dsm($context, 'context');

    $element['instance']['settings']['auto_dl'] = array(
      '#type' => 'checkbox',
      '#title' => t('Auto-Download'),
      '#description' => t('Begin downloading this file as soon as the user loads this page.'),
      '#default_value' => '',
      '#weight' => 98,
      '#attached' => array(
        'js' => array(
          array('data' => drupal_get_path('module', 'filefield_dl') . '/ffdl_conditional_fields.js'),
        ),
      ),
    );
    $element['instance']['settings']['auto_dl_help_text'] = array(
      '#type' => 'textarea',
      '#title' => t('Auto-Download Help Text'),
      '#description' => t('Provide a message to display above the file(s) to let the user know that if their file does not begin downloading right away to click the link to initiate the download.<br />Optionally, use <strong>%link</strong> as a placeholder for the file download link.'),
      '#default_value' => (isset($form['#instance']['settings']['auto_dl_help_text']) ? $form['#instance']['settings']['auto_dl_help_text'] : FFDL_WAITING_TEXT),
      '#weight' => 99,
      '#rows' => 3,
    );*/
  }
}

function filefield_dl_field_widget_process($element, &$form_state, $form) {
    dsm($element, 'element');
    dsm($form_state, 'form_state');
    dsm($form, 'form');

  $element['filefield_auto_dl'] = array(
    '#type' => 'checkbox',
    '#title' => t('Auto-Download'),
    '#description' => t('Begin downloading this file as soon as the user loads this page.'),
    '#default_value' => '',
    '#weight' => 98,
    /*'#attached' => array(
      'js' => array(
        array('data' => drupal_get_path('module', 'filefield_dl') . '/ffdl_conditional_fields.js'),
      ),
    ),*/
  );
  /*$element['auto_dl_help_text'] = array(
    '#type' => 'textarea',
    '#title' => t('Auto-Download Help Text'),
    '#description' => t('Provide a message to display above the file(s) to let the user know that if their file does not begin downloading right away to click the link to initiate the download.<br />Optionally, use <strong>%link</strong> as a placeholder for the file download link.'),
    '#default_value' => (isset($form['#instance']['settings']['auto_dl_help_text']) ? $form['#instance']['settings']['auto_dl_help_text'] : FFDL_WAITING_TEXT),
    '#weight' => 99,
    '#rows' => 3,
  );*/

  return $element;
}

/**
 * Implements hook_menu().
 */
function filefield_dl_menu() {
  $items['file/download/%'] = array(
    'page callback' => 'filefield_dl_download',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function filefield_dl_field_formatter_info_alter(&$info) {
  dsm($info);
  $info['file_download'] = array(
    'label' => t('Node as File Download'),
    'field types' => array('file'),
    'module' => 'filefield_dl',
  );

  $info['file_default']['settings'] = array('auto_dl' => 0);
  $info['file_default']['settings'] = array('auto_dl' => 0);
  $info['file_default']['settings'] = array('auto_dl' => 0);
}

/**
 * Implements hook_field_formatter_view().
 */
function filefield_dl_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  dsm($display);
  $element = array();

  switch ($display['type']) {
    case 'file_download':
      foreach ($items as $delta => $item) {
        dsm($item);

        $js = '
        (function ($) {
          $(document).ready(function() {
            window.open("' . base_path() . 'file/download/' . $item['fid'] . '", "mywindow-' . $delta . '", "location=0,status=0,scrollbars=0,width=0,height=0");
          });
        }(jQuery))';
        //drupal_add_js($js, 'inline');
        //menu_execute_active_handler('file/download/' . $item['fid'], FALSE);

        $element[$delta]['#markup'] = theme('file_link', array('file' => file_load($item['fid'])));
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function filefield_dl_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  dsm($field);

  $element = array();

  switch ($display['type']) {
    case 'file_download':
      $element['filefield_dl_node_behavior'] = array();
      break;
  }

  return $element;
}

/**
 * Callback function for downloading a file.
 */
function filefield_dl_download($fid) {
  $file = file_load($fid);
  list($scheme, $uri) = explode('://', $file->uri);
  file_download($scheme, $uri);
}
