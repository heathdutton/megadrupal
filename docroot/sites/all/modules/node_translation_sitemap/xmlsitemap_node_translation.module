<?php

/**
 * Implements hook_entity_info_alter().
 */
function xmlsitemap_node_translation_entity_info_alter(array &$entity_info) {
  $entity_info['node']['xmlsitemap'] = array(
    'process callback' => 'xmlsitemap_node_translation_xmlsitemap_process_node_links',
  );
}

/**
 * Process node sitemap links.
 *
 * @param $nids
 *   An array of node IDs.
 */
function xmlsitemap_node_translation_xmlsitemap_process_node_links(array $nids){
  xmlsitemap_node_xmlsitemap_process_node_links($nids);
  xmlsitemap_node_translation_xmlsitemap_process_node_translation_links($nids);
}


/**
 * Implements hook_cron().
 *
 * Process old nodes not found in the {xmlsitemap} table.
 */
function xmlsitemap_node_translation_cron() {
  xmlsitemap_node_translation_xmlsitemap_index_links(xmlsitemap_var('batch_limit'));
}

/**
 * Implements hook_xmlsitemap_index_links().
 */
function xmlsitemap_node_translation_xmlsitemap_index_links($limit) {
  if ($types = xmlsitemap_get_link_type_enabled_bundles('node')) {
    $nids = db_query_range("SELECT n.nid FROM {node} n LEFT JOIN {xmlsitemap} x ON x.type = 'node' AND n.nid = x.id WHERE x.id IS NULL AND n.type IN (:types) ORDER BY n.nid DESC", 0, $limit, array(':types' => $types))->fetchCol();
    xmlsitemap_node_translation_xmlsitemap_process_node_translation_links($nids);
  }
}

/**
 * Process node translation sitemap links.
 *
 * @param $nids
 *   An array of node IDs.
 */
function xmlsitemap_node_translation_xmlsitemap_process_node_translation_links(array $nids) {
  $nodes = node_load_multiple($nids);
  foreach ($nodes as $node) {
    $links = xmlsitemap_node_translation_create_link($node);
    foreach($links as $link){
      xmlsitemap_link_save($link);
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function xmlsitemap_node_translation_node_insert(stdClass $node) {
  xmlsitemap_node_translation_node_update($node);
}

/**
 * Implements hook_node_update().
 */
function xmlsitemap_node_translation_node_update(stdClass $node) {
  $links = xmlsitemap_node_translation_create_link($node);
  foreach($links as $link){
    xmlsitemap_link_save($link);
  }
}

/**
 * Implements hook_node_delete().
 */
function xmlsitemap_node_translation_node_delete(stdClass $node) {
  xmlsitemap_link_delete('node', $node->nid);
}

/**
 * Implements hook_comment_update().
 */
function xmlsitemap_node_translation_comment_update(stdClass $comment) {
  if ($node = node_load($comment->nid, NULL, TRUE)) {
    xmlsitemap_node_translation_node_update($node);
  }
}

/**
 * Implements hook_comment_publish().
 */
function xmlsitemap_node_translation_comment_publish(stdClass $comment) {
  xmlsitemap_node_translation_comment_update($comment);
}

/**
 * Implements hook_comment_unpublish().
 */
function xmlsitemap_node_translation_comment_unpublish(stdClass $comment) {
  xmlsitemap_node_translation_comment_update($comment);
}

/**
 * Implements hook_comment_delete().
 */
function xmlsitemap_node_translation_comment_delete(stdClass $comment) {
  xmlsitemap_node_translation_comment_update($comment);
}

/**
 * Create a sitemap link from a node.
 *
 * The link will be saved as $node->xmlsitemap.
 *
 * @param $node
 *   A node object.
 */
function xmlsitemap_node_translation_create_link(stdClass $node) {
  // Get active languages list.
  $languages = language_list();

  // Get current node's original language.
  $original_language = entity_language('node', $node);

  // Remove original language form the language list.
  if(isset($languages[$original_language])){
    unset($languages[$original_language]);
  }

  $node_translation_sitemap = array();

  // For each translation language.
  foreach($languages as $language){
    // If tranlsation exists and is active.
    if(isset($node->translations->data[$language->language]) and $node->translations->data[$language->language]['status'] == 1){
      $node_translation_sitemap[$language->language] = array();
      if ($node->nid && $link = xmlsitemap_link_load('node_translation_' . $language->language, $node->nid)) {
        $node_translation_sitemap[$language->language] = $link;
      }

      $settings = xmlsitemap_link_bundle_load('node', $node->type);
      $uri = entity_uri('node', $node);

      $node_translation_sitemap[$language->language] += array(
        'type' => 'node_translation_' . $language->language,
        'id' => $node->nid,
        'subtype' => $node->type,
        'status' => $settings['status'],
        'status_default' => $settings['status'],
        'status_override' => 0,
        'priority' => $settings['priority'],
        'priority_default' => $settings['priority'],
        'priority_override' => 0,
      );

      // Always recalculate changefreq and changecount.
      $timestamps = xmlsitemap_node_get_timestamps($node);
      $node_translation_sitemap[$language->language]['changefreq'] = $node->nid ? xmlsitemap_calculate_changefreq($timestamps) : 0;
      $node_translation_sitemap[$language->language]['changecount'] = $node->nid ? count($timestamps) - 1 : 0;

      // The following values must always be checked because they are volatile.
      $node_translation_sitemap[$language->language]['loc'] = $uri['path'];
      $node_translation_sitemap[$language->language]['lastmod'] = count($timestamps) ? max($timestamps) : 0;
      $node_translation_sitemap[$language->language]['access'] = $node->nid ? xmlsitemap_node_view_access($node, drupal_anonymous_user()) : 1;
      $node_translation_sitemap[$language->language]['language'] = $language->language;
    }
  }

  return $node_translation_sitemap;
}
