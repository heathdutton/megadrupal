<?php

/**
 * ACCESS TOKEN TYPE
 */
define('OAUTH3LEGGED_CLIENT_ACCESS_TOKEN_TYPE', 0);

/**
 * REQUEST TOKEN TYPE
 */
define('OAUTH3LEGGED_CLIENT_REQUEST_TOKEN_TYPE', 1);


/**
 * Implements hook_menu().
 */
function oauth3legged_client_menu() {
  $items = array();

  // Your mobile application can start from calling this menu
  $items['oauth3legged_client/oauthstart'] = array(
    'title' => 'Oauth client',
    'page callback' => 'oauthclient_3legged_oauth',
    'page arguments' => array(2,3), //2 should be uid, 3 should be udid
    'access callback' => 'oauthclient_access',
    'access arguments' => array(2,3), //Defaults to user_access
  );

  $items['admin/config/services/oauth3legged_client'] = array(
    'title' => 'Oauth Consumer Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('oauth3legged_client_admin'),
    'access arguments' => array('administer Oauth provider consumer.'),
    'file' => 'oauth3legged_client.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/services/oauth3legged_client/settings'] = array(
    'title' => 'Oauth provider Consumer Configuration',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/config/services/oauth3legged_client/example'] = array(
    'title' => 'Example',
    'page arguments' => array('oauth3legged_client_example'),
    'access arguments' => array('administer Oauth provider consumer.'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/config/services/oauth3legged_client/example/create_user'] = array(
    'title' => 'Create user',
    'page callback' => 'oauth3legged_client_create_user',
    'access arguments' => array('Oauth provider create user'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function oauth3legged_client_permission() {
  return array(
    'administer oauth3legged_client module' => array(
        'title' => t('Administer Oauth provider Consumer'),
        'description' => t('Configuration for App Key and App Secret.'),
      ),
    'Oauth provider create user' => array(
        'title' => t('Create Oauth provider user'),
        'description' => t('Remotely create Oauth provider user.'),
      ),
  );
}

/*
 * @param $uid, $udid (from mobile phone)
 * @return true if user / udid found in database
 */
function oauthclient_access($uid, $udid) {
  // TO-Do Denied user if the UDID & uid not found in database
  if ($uid > 0)
    return TRUE;

  //Just a way to let the module know it is a callback from oauth provider
  if ($uid == 'authenticated' && $udid == 'token')
    return TRUE;
  else 
    return FALSE;
}

/**
 * Create user at provider server example.
 *
 * @param $external_id is UDID in our case.
 * @return An array of token key and secret
 *   - token_key OAuth token key.
 *   - token_secret OAuth token secret.
 */
function oauth3legged_client_create_user($name, $pass, $mail, $external_id = NULL) {
  $settings = variable_get('oauth3legged_client', _oauth3legged_client_default());

  $request_url = $settings['provider']['url'] . '/' . $settings['provider']['endpoint'] . '/user.json';

  // 2-legged OAuth
  try {
    $oauth = new OAuth($settings['provider']['consumer_key'], $settings['provider']['consumer_secret'], OAUTH_SIG_METHOD_HMACSHA1, OAUTH_AUTH_TYPE_URI);
    header('Content-Type: application/json');
    $oauth->fetch($request_url, array(
      'name' => $name . '_' . $external_id,
      'pass' => $pass,
      'mail' => $mail,
    ), OAUTH_HTTP_METHOD_POST);
    $response = $oauth->getLastResponse();
    $json = json_decode($response);
    return TRUE;
  } catch(OAuthException $E) {
    return FALSE;
  }
}

/**
 * Default settings value.
 *
 * @return An array of default value.
 */
function _oauth3legged_client_default() {
  return array(
    'fields' => array(
      'token_key' => '',
      'token_secret' => '',
      'token_type' => '',
    ),
    'provider' => array(
      'url' => '',
      'endpoint' => '',
      'consumer_key' => '',
      'consumer_secret' => '',
      'uri_schema' => '',
    ),
  );
}

/**
 * Helper function for calling oauth server.
 * Require sending uid from client 
 *
 * @param $uid
 *    (required) User ID.
 * @param $external_id
 *    (optional) External ID, i.e. udid.
 */
function oauthclient_3legged_oauth($uid, $external_id = NULL) {
  // get the settings value.
  $settings = variable_get('oauth3legged_client', _oauth3legged_client_default());

  // build urls.
  $oauth_provider_url = $settings['provider']['url'];
  if ( valid_url($oauth_provider_url) ) {
    $request_token_url = $oauth_provider_url.'/oauth/request_token'; //To-DO read from admin form
    $access_token_url = $oauth_provider_url.'/oauth/access_token';
    $authorize_url = $oauth_provider_url.'/oauth/authorize';
  }
  $consumer_key = $settings['provider']['consumer_key'];
  $consumer_secret = $settings['provider']['consumer_secret'];

  // start OAuth
  $oauth = new OAuth($consumer_key, $consumer_secret, OAUTH_SIG_METHOD_HMACSHA1, OAUTH_AUTH_TYPE_URI);
  $oauth->enableDebug(); // let you know when and why some request fails

  if (empty($_SESSION['request_token_secret'])) {
    $request_token_array = $oauth->getRequestToken($request_token_url);
    $_SESSION['request_token'] = $request_token_array['oauth_token'];
    $_SESSION['request_token_secret'] = $request_token_array['oauth_token_secret'];

    // mapping ids with request token
    $user = user_load($uid);
    $user_wrapper = entity_metadata_wrapper('user', $user);
    $user_wrapper->{$settings['fields']['token_key']}->set($_SESSION['request_token']);
    $user_wrapper->{$settings['fields']['token_secret']}->set($_SESSION['request_token_secret']);
    $user_wrapper->{$settings['fields']['token_type']}->set(OAUTH3LEGGED_CLIENT_REQUEST_TOKEN_TYPE);
    $user_wrapper->save();
    // takes you to Drupal authorize page
    drupal_goto($authorize_url.'?oauth_token='.$_SESSION['request_token']);

  } else if (empty($_SESSION['access_token'])) { // continues below
    // PHP still needs the request token/secret to get the access token and secret
    $request_token_secret = $_SESSION['request_token_secret']; 
    $oauth->setToken($_REQUEST['oauth_token'],$request_token_secret);

    $access_token_info = $oauth->getAccessToken($access_token_url);
    $_SESSION['access_token']= $access_token_info['oauth_token'];
    $_SESSION['access_token_secret']= $access_token_info['oauth_token_secret'];
  }

  if (isset ($_SESSION['access_token'])) {
    //Set access_token and consume service
    $access_token = $_SESSION['access_token'];
    $access_token_secret =$_SESSION['access_token_secret'];
    $oauth->setToken($access_token,$access_token_secret);
    $access_token_array = array (
        'access_token' => $access_token,
        'access_token_secret' => $access_token_secret,
        );
    //You can consume Oauth provider resource here
    //$data = $oauth->fetch($resource_url,null,OAUTH_HTTP_METHOD_GET,$req_header);

    //Mapping request token with ids

    //Get the settings value.
    $settings = variable_get('oauth3legged_client', _oauth3legged_client_default());

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'user')
      ->fieldCondition($settings['fields']['token_key'], 'value', $_SESSION['request_token'], '=');
    $results = $query->execute();

    //Save access token in user profile
    $users = user_load_multiple(array_keys($results['user']));
    foreach($users as $user) {
      $wrapper = entity_metadata_wrapper('user', $user);
      $wrapper->{$settings['fields']['token_key']}->set($_SESSION['access_token']);
      $wrapper->{$settings['fields']['token_secret']}->set($_SESSION['access_token_secret']);
      $wrapper->{$settings['fields']['token_type']}->set(OAUTH3LEGGED_CLIENT_ACCESS_TOKEN_TYPE);
      $wrapper->save();
    }
    drupal_set_message('Saving access_token ok!');

    // Execute custom schema and trigger client finish oauth
    $uri_schema = oauth3legged_client_convert_url($settings['provider']['uri_schema']);
    header("Location: " . $uri_schema );
    // Verify the tokens
    $req_header = array(
      'Accept' => "application/json",
      'format' => "json"
    );
  }
}

/**
 * API function: get oauth object
 *
 * @param $user
 *    User object.
 * @return An array with following key.
 *    - access_token OAuth access token.
 *    - access_token_secret OAuth access token secret.
 */
function oauth3legged_client_get_oauth_object($user) {

  $settings = variable_get('oauth3legged_client', _oauth3legged_client_default());
  $consumer_key = $settings['provider']['consumer_key'];
  $consumer_secret = $settings['provider']['consumer_secret'];

  $user_wrapper = entity_metadata_wrapper('user', $user);
 
  if ( $user_wrapper->{$settings['fields']['token_type']}->value() == 0) {
    $tokensecret['access_token'] = $user_wrapper->{$settings['fields']['token_key']}->value();
    $tokensecret['access_token_secret'] = $user_wrapper->{$settings['fields']['token_secret']}->value();
  }

  $oauth = new OAuth($consumer_key, $consumer_secret, OAUTH_SIG_METHOD_HMACSHA1, OAUTH_AUTH_TYPE_URI);
  $oauth->setToken($tokensecret['access_token'],$tokensecret['access_token_secret']);

  $oauthinfo['oauth'] = $oauth;
  $oauthinfo['url'] = $settings['provider']['url'];
  $oauthinfo['endpoint'] = $settings['provider']['endpoint'];

  return $oauthinfo;
}

/**
 * Helper function to convery current url to custom scheme:
 */
function oauth3legged_client_convert_url($custom_scheme) {
  $pageURL = 'http';
  if ( isset( $_SERVER["HTTPS"] ) && $_SERVER["HTTPS"] == "on") {
    $pageURL .= "s";
  }
    $pageURL .= "://";
  if ($_SERVER["SERVER_PORT"] != "80") {
    $pageURL .= $_SERVER["SERVER_NAME"].":".$_SERVER["SERVER_PORT"].$_SERVER["REQUEST_URI"];
  } else {
    $pageURL .= $_SERVER["SERVER_NAME"].$_SERVER["REQUEST_URI"];
  }
  return str_replace("http://", $custom_scheme."://", $pageURL);
}
