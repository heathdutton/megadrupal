<?php

/**
 * @file
 * The Node access node reference module.
 */

/**
 * Implements hook_node_grants().
 */
function nodeaccess_nodereference_node_grants($account, $op) {
  // $grants stores known grants for account/op combos, because the grant
  // calculations can be exhaustive.  Proper caching is also used.
  static $grants = array();
  // Check the static cache for grants.
  if (!isset($grants[$account->uid][$op])) {
    // The static cache is empty, check the drupal cache.
    // First check if the cache can be trusted.
    if (variable_get('nodeaccess_nodereference_cache_needs_clear', FALSE)) {
      // Clear the cache.
      cache_clear_all('nodeaccess_nodereference', 'cache', TRUE);
      variable_del('nodeaccess_nodereference_cache_needs_clear');
      $cached_grants = NULL;
    }
    else {
      // Cache is good.
      if ($account->uid) {
        $cached_grants = cache_get('nodeaccess_nodereference_' . $account->uid . '_' . $op);
      }
      else {
        $cached_grants = cache_get('nodeaccess_nodereference_' . session_id() . '_' . $op);
      }
    }
    if (empty($cached_grants)) {
      // There were no cached grants, calculate the grants.
      $result = nodeaccess_nodereference_calculate_grants($grants, $op, $account);
      if (!empty($result)) {
        // Function returned a value, it was incomplete and $grants was not
        // affected, so return the result.
        return $result;
      }
    }
    else {
      // Cache was good, assign the data to the static cache.
      $grants[$account->uid][$op] = $cached_grants->data;
    }
  }
  return $grants[$account->uid][$op];
}

/**
 * Calculate grants for nodeaccess_nodereference_node_grants().
 */
function nodeaccess_nodereference_calculate_grants(&$grants, $op, $account) {
  // $current_references stores an array of node IDs for referenced nodes that
  // are currently being node_access() checked by this function, to prevent
  // recursively nested node_access() checking which causes an endless loop.
  static $current_references = array();
  // $known_node_access stores an array of results to calls to node_access()
  // for that account/op/node ID.
  static $known_node_access = array();
  // $parent_reference is set to the current reference before calling
  // node_access() so that the child iteration of this function is aware why it
  // is being called.
  static $parent_reference = NULL;
  // $child_completed is used to pass the value of $complete to the parent
  // iteration.
  static $child_completed = TRUE;
  // $complete marks whether the results of this iteration are to be considered
  // completed and therefore stored in cache. An iteration is not considered
  // complete when:
  //  - Recursion occurs on the same account/reference/operation combo. This
  //    iteration will assume FALSE to prevent an endless loop, but this means
  //    the data should not be relied upon in future calls.
  //  - A child iteration is not complete (because of the previous reason).
  $complete = TRUE;
  // $do_cache is similar to $complete except it doesn't affect the static
  // variable $child_completed.  $do_cache is set to FALSE when:
  //  - This function is being called on behalf of a parent iteration.  The
  //    cache should be based on the parent's calculations, not this iteration.
  $do_cache = TRUE;

  // Get info about whether we need cross access checking for this $op.
  $cross_access = variable_get(
    'nodeaccess_nodereference_cross_access',
    array('view' => FALSE, 'update' => FALSE, 'delete' => FALSE)
  );

  // The access operations we check on the reference nodes will either be
  // the current $op, or in situations where cross access checking is
  // needed it will be all three operations.
  if ($cross_access[$op]) {
    $operations = array('view', 'update', 'delete');
  }
  else {
    $operations = array($op);
  }

  // Track an array of node access grants, don't put them into static cache
  // until later.
  $rights = array();
  // Get a list of all Node ID values from node reference fields.
  $references = nodeaccess_nodereference_get_referenced($parent_reference);

  if (!is_null($parent_reference)) {
    // There is a parent reference, so do not cache this run.
    $do_cache = FALSE;
  }

  // Iterate through each reference.
  foreach ($references as $reference) {
    // Alias for easier code reading.
    $known = &$known_node_access[$account->uid][$reference];
    // Flags whether we already have the data needed for an $operation.
    $needs_check = FALSE;
    // Check each $operation to see if we're missing $known data.
    foreach ($operations as $operation) {
      if (!isset($known[$operation])) {
        $needs_check = TRUE;
      }
    }

    if ($needs_check) {
      // This reference is missing $known value/s that we need, load it.
      $reference_node = node_load($reference);
      if (!empty($reference_node)) {
        // Reference loaded successfully.

        // Check each $operation on the referenced node.
        foreach ($operations as $operation) {
          // Set the static $parent_reference variable to the reference being done.
          $parent_reference = $reference;

          if (!isset($known[$operation])) {
            // We're missing an $operation or two, proceed with calculations.
            if (!isset($current_references[$reference][$operation])) {
              // This reference isn't in the list of ancestors, add to the list.
              $current_references[$reference][$operation] = $reference;

              // We don't want static caching in node_access() to intefere.
              drupal_static_reset('node_access');

              // Check node_access() and add the result to $known data.
              $node_access = node_access($operation, $reference_node, $account);
              // If the child completed fully, or node access was granted...
              if ($child_completed || $node_access) {
                // We can rely on this information in the future.
                $known[$operation] = $node_access;
              }
              else {
                // Flag this iteration as incomplete.
                $complete = FALSE;
                // Reset static variable.
                $child_completed = TRUE;
              }
              // We're done with this reference, remove it from the list.
              unset($current_references[$reference]);
            }
            else {
              // Recursion, assume FALSE.
              $complete = FALSE;
              $node_access = FALSE;
            }
          }
          else {
            // Grab the value from known data.
            $node_access = $known[$operation];
          }
          // Check if the node_access() return value is TRUE.
          if ($node_access) {
            // Add the reference as a grant on the relevant realm.
            $rights['nodeaccess_nodereference_' . $operation][] = $reference;
            if (!$cross_access[$op]) {
              // Nothing more we need to do for this reference.
              break;
            }
          }
        }
      }
    }
    else {
      // We have all the $known data we need, test the values of each
      // operation and add the reference as a grant on the relevant
      // realm.
      foreach ($operations as $operation) {
        if ($known[$operation]) {
          $rights['nodeaccess_nodereference_' . $operation][] = $reference;
        }
      }
    }
  }
  // Reset the $parent_reference variable.
  $parent_reference = NULL;
  // Add the author and all grants.
  $rights['nodeaccess_nodereference_author'][] = $account->uid;
  $rights['nodeaccess_nodereference_all'][] = 1;

  if ($complete && $do_cache) {
    // We have grants worked out completely, so add them to the caches.
    // It is unsafe to store incomplete grants in any caches.
    $grants[$account->uid][$op] = $rights;
    // Use drupal cache to minimise how often this function needs to work out the grants.
    if ($account->uid) {
      cache_set('nodeaccess_nodereference_'. $account->uid .'_'. $op, $grants[$account->uid][$op]);
    }
    else {
      cache_set('nodeaccess_nodereference_'. session_id() .'_'. $op, $grants[$account->uid][$op]);
    }
  }
  else {
    if (!$complete) {
      // Affect the static $child_completed variable.
      $child_completed = FALSE;
    }
    return $rights;
  }
}

/**
 * Get all referenced nodes that are referenced in a NANR related field.
 *
 * Due to the repeated usage of this function, an initial call to this in a page
 * request will build a list of all the site's relevant references in static
 * cache.  Subsequent calls will use the static cache.
 */
function nodeaccess_nodereference_get_referenced($nid) {
  $references = &drupal_static(__FUNCTION__);
  if (empty($references)) {
    $cache = cache_get('nodeaccess_nodereference_get_referenced');
    if (!empty($cache->data)) {
      $references = $cache->data;
    }
    if (empty($references)) {
      // This is to prevent a legit 'empty' value being seen as an uncalculated 'empty' value.
      $references['refs'] = array();
      $settings = variable_get('nodeaccess_nodereference', array());
      foreach ($settings as $type => $fields) {
        foreach ($fields as $field => $data) {
          if (
            isset($data['referenced']) &&
            nodeaccess_nodereference_array_filter($data['referenced'])
          ) {
            $args = array(':bundle' => $type);
            if ($data['field_type'] == 'entityreference') {
              $sql = 'SELECT DISTINCT entity_id, ' . $field . '_target_id AS reference '
                 . 'FROM {field_data_' . $field . '} '
                 . 'WHERE ' . $field . '_target_id IS NOT NULL '
                 . "AND entity_type = 'node' "
                 . 'AND bundle = :bundle ';
            }
            else {
              // Assumed node_reference.  This assumption may change if more field
              // types supported.
              $sql = 'SELECT DISTINCT entity_id, ' . $field . '_nid AS reference '
                 . 'FROM {field_data_' . $field . '} '
                 . 'WHERE ' . $field . '_nid IS NOT NULL '
                 . "AND entity_type = 'node' "
                 . 'AND bundle = :bundle ';
            }
            $result = db_query($sql, $args);
            foreach ($result as $row) {
               $references['refs'][$row->entity_id][$row->reference] = $row->reference;
            }
          }
        }
      }
      cache_set('nodeaccess_nodereference_get_referenced', $references);
    }
  }
  if ($nid && !empty($references['refs'][$nid])) {
    return $references['refs'][$nid];
  }
  elseif (!$nid && !empty($references['refs'])) {
    return call_user_func_array('array_merge', $references['refs']);
  }
  else {
    return array();
  }
}

/**
 * Apply array_filter() to an array recursively.
 */
function nodeaccess_nodereference_array_filter($input) {
  foreach ($input as &$value) {
    if (is_array($value)) {
      $value = nodeaccess_nodereference_array_filter($value);
    }
  }
  return array_filter($input);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nodeaccess_nodereference_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  if (
    (
      ($form['#field']['type'] == 'entityreference' && $form['#field']['settings']['target_type'] == 'node')
      ||
      $form['#field']['type'] == 'node_reference'
    )
    &&
    $form['#instance']['entity_type'] == 'node'
  ) {
    $data = isset($form['#instance']['settings']['nodeaccess_nodereference']) ?
      $form['#instance']['settings']['nodeaccess_nodereference'] : array();
    $current = nodeaccess_nodereference_field_settings($form['#instance']['bundle'], $form['#instance']['field_name']);

    $form['instance']['settings']['nodeaccess_nodereference'] = array(
      '#type' => 'fieldset',
      '#title' => t('Node access node reference'),
      '#tree' => TRUE,
      '#collapsible' => TRUE,
      '#collapsed' => empty($current),
    );

    $referenced_states = array(
      array('[name="instance[settings][nodeaccess_nodereference][referenced][view][view]"]' => array('checked' => TRUE)),
      array('[name="instance[settings][nodeaccess_nodereference][referenced][view][update]"]' => array('checked' => TRUE)),
      array('[name="instance[settings][nodeaccess_nodereference][referenced][view][delete]"]' => array('checked' => TRUE)),
      array('[name="instance[settings][nodeaccess_nodereference][referenced][update][update]"]' => array('checked' => TRUE)),
      array('[name="instance[settings][nodeaccess_nodereference][referenced][update][delete]"]' => array('checked' => TRUE)),
      array('[name="instance[settings][nodeaccess_nodereference][referenced][update][view]"]' => array('checked' => TRUE)),
      array('[name="instance[settings][nodeaccess_nodereference][referenced][delete][delete]"]' => array('checked' => TRUE)),
      array('[name="instance[settings][nodeaccess_nodereference][referenced][delete][view]"]' => array('checked' => TRUE)),
      array('[name="instance[settings][nodeaccess_nodereference][referenced][delete][update]"]' => array('checked' => TRUE)),
    );
    $form['instance']['settings']['nodeaccess_nodereference']['referenced'] = array(
      '#type' => 'fieldset',
      '#title' => t('Grants from referenced nodes'),
    );
    $form['instance']['settings']['nodeaccess_nodereference']['referenced']['view'] = array(
      '#type' => 'checkboxes',
      '#title' => t('If the user has <em>view</em> access to a referenced node'),
      '#default_value' => isset($data['referenced']['view']) ? $data['referenced']['view'] : array(),
      '#options' => array(
        'view' => t('Pass on <em>view</em> access'),
        'update' => t('Grant <em>update</em> access'),
        'delete' => t('Grant <em>delete</em> access'),
      ),
      '#description' => t('These content access permissions will be granted to users that have view access to at least one of the referenced nodes.'),
    );
    $form['instance']['settings']['nodeaccess_nodereference']['referenced']['update'] = array(
      '#type' => 'checkboxes',
      '#title' => t('If the user has <em>update</em> access to a referenced node'),
      '#default_value' => isset($data['referenced']['update']) ? $data['referenced']['update'] : array(),
      '#options' => array(
        'update' => t('Pass on <em>update</em> access'),
        'view' => t('Grant <em>view</em> access'),
        'delete' => t('Grant <em>delete</em> access'),
      ),
      '#description' => t('These content access permissions will be granted to users that have update access to at least one of the referenced nodes.'),
    );
    $form['instance']['settings']['nodeaccess_nodereference']['referenced']['delete'] = array(
      '#type' => 'checkboxes',
      '#title' => t('If the user has <em>delete</em> access to a referenced node'),
      '#default_value' => isset($data['referenced']['delete']) ? $data['referenced']['delete'] : array(),
      '#options' => array(
        'delete' => t('Pass on <em>delete</em> access'),
        'view' => t('Grant <em>view</em> access'),
        'update' => t('Grant <em>update</em> access'),
      ),
      '#description' => t('These content access permissions will be granted to users that have delete access to at least one of the referenced nodes.'),
    );
    $form['instance']['settings']['nodeaccess_nodereference']['referenced']['published'] = array(
      '#type' => 'select',
      '#title' => t('Unpublished nodes'),
      '#title_display' => 'none',
      '#default_value' => isset($data['referenced']['published']) ? $data['referenced']['published'] : 0,
      '#options' => array(
        0 => t('Give these grants for published nodes only'),
        1 => t('Give these grants for published and unpublished nodes'),
      ),
      '#states' => array(
        'visible' => $referenced_states,
      ),
    );
    $form['instance']['settings']['nodeaccess_nodereference']['author'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Grants for author'),
      '#default_value' => isset($data['author']) ? $data['author'] : array(),
      '#options' => array(
        'view' => t('View'),
        'update' => t('Update'),
        'delete' => t('Delete'),
      ),
      '#description' => t('These content access permissions will be granted to the authors of nodes.'),
      '#states' => array(
        'visible' => $referenced_states,
      ),
    );
    $form['instance']['settings']['nodeaccess_nodereference']['author_published'] = array(
      '#type' => 'select',
      '#title' => t('Unpublished nodes'),
      '#title_display' => 'none',
      '#default_value' => isset($data['author_published']) ? $data['author_published'] : 0,
      '#options' => array(
        0 => t('Give these grants for published nodes only'),
        1 => t('Give these grants for published and unpublished nodes'),
      ),
      '#states' => array(
        'visible' => $referenced_states,
      ),
    );
    $form['instance']['settings']['nodeaccess_nodereference']['all'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Grants for all users'),
      '#default_value' => isset($data['all']) ? $data['all'] : array(),
      '#options' => array(
        'view' => t('View'),
      ),
      '#description' => t('These content access permissions will be granted to all users.'),
      '#states' => array(
        'visible' => $referenced_states,
      ),
    );
    $form['instance']['settings']['nodeaccess_nodereference']['all_published'] = array(
      '#type' => 'select',
      '#title' => t('Unpublished nodes'),
      '#title_display' => 'none',
      '#default_value' => isset($data['all_published']) ? $data['all_published'] : 0,
      '#options' => array(
        0 => t('Give these grants for published nodes only'),
        1 => t('Give these grants for published and unpublished nodes'),
      ),
      '#states' => array(
        'visible' => $referenced_states,
      ),
    );
    $form['instance']['settings']['nodeaccess_nodereference']['unused'] = array(
      '#type' => 'radios',
      '#title' => t('When to set grants'),
      '#default_value' => isset($data['unused']) ? $data['unused'] : 0,
      '#options' => array(
        0 => t('When the node reference field is in use'),
        1 => t('Always'),
      ),
      '#description' => t('Determines whether to set grants when the field is not in use.'),
      '#states' => array(
        'visible' => $referenced_states,
      ),
    );
    $form['instance']['settings']['nodeaccess_nodereference']['priority'] = array(
      '#type' => 'weight',
      '#title' => t('Priority'),
      '#default_value' => isset($data['priority']) ? $data['priority'] : 0,
      '#description' => t('It is recommended to always leave this set to 0.'),
      '#states' => array(
        'visible' => $referenced_states,
      ),
    );

  }
}

/**
 * Implements hook_field_update_instance().
 */
function nodeaccess_nodereference_field_update_instance($instance, $prior_instance) {
  $field_info = field_info_field($instance['field_name']);
  if (
    (
      ($field_info['type'] == 'entityreference' && $field_info['settings']['target_type'] == 'node')
      ||
      $field_info['type'] == 'node_reference'
    )
    &&
    $instance['entity_type'] == 'node'
  ) {
     $instance['settings']['nodeaccess_nodereference']['field_type'] = $field_info['type'];

     $old_settings = isset($prior_instance['settings']['nodeaccess_nodereference']) ?
       nodeaccess_nodereference_reduce_variable($prior_instance['settings']['nodeaccess_nodereference']) :
       array();
     $new_settings = isset($instance['settings']['nodeaccess_nodereference']) ?
       nodeaccess_nodereference_reduce_variable($instance['settings']['nodeaccess_nodereference']) :
       array();

     if ($old_settings != $new_settings) {
       nodeaccess_nodereference_field_settings($instance['bundle'], $instance['field_name'], $new_settings);
       nodeaccess_nodereference_check_cross_access();

       $nodes = db_query("SELECT 1 FROM {node} WHERE type = :type", array(
         ':type' => $instance['bundle'],
       ))->fetchField();

       if ($nodes) {
         // Because the field settings have changed we should prompt for a full rebuild.
         node_access_needs_rebuild(TRUE);
       }
     }
  }
}

/**
 * Add node grants in a way that prevents overriding previous iterations.
 *
 * @param &$grants
 *  The grants array where the grant will be added.
 * @param $realm
 *  The realm of this grant.
 * @param $gid
 *  The grant ID.
 * @param $priority
 *  The grant priority.
 * @param $settings
 *  An settings array of boolean equivalent values with keys 'view', 'edit',
 *  and 'delete'.
 */
function nodeaccess_nodereference_add_grant(&$grants, $realm, $gid, $priority, $settings) {
  $key = $realm . $gid;
  if (!isset($grants[$key])) {
    // Setup the record.
    $grants[$key] = array(
      'realm' => $realm,
      'gid' => $gid,
      'priority' => $priority,
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 0,
    );
  }
  // Add the grants needed, so as not to override previous iterations.
  if (!empty($settings['view'])) {
    $grants[$key]['grant_view'] = 1;
  }
  if (!empty($settings['update'])) {
    $grants[$key]['grant_update'] = 1;
  }
  if (!empty($settings['delete'])) {
    $grants[$key]['grant_delete'] = 1;
  }
  // Increase the priority if needed.
  if ($priority > $grants[$key]['priority']) {
    $grants[$key]['priority'] = $priority;
  }
}

/**
 * Implements hook_node_access_records().
 */
function nodeaccess_nodereference_node_access_records($node) {
  $grants = array();
  $field_data = nodeaccess_nodereference_field_settings($node->type);
  if (!empty($field_data)) {
    foreach ($field_data as $field_name => &$data) {
      if (!empty($data)) {

        if (!isset($data['priority'])) {
          $data['priority'] = 0;
        }

        if (!empty($node->status) || !empty($data['referenced']['published'])) {

          // Add referenced user grants.
          $items = field_get_items('node', $node, $field_name);
          if (!empty($items)) {
            foreach ($items as &$node_reference) {
              $uid = NULL;
              // @todo: change these statements to check $node_reference['field_type'] instead.
              // node_reference
              if (isset($node_reference['nid'])) {
                $nid = $node_reference['nid'];
              }
              // entityreference
              elseif (isset($node_reference['target_id'])) {
                $nid = $node_reference['target_id'];
              }
              if ($nid && isset($data['referenced'])) {
                foreach (array_keys($data['referenced']) as $operation) {
                  nodeaccess_nodereference_add_grant(
                    $grants,
                    'nodeaccess_nodereference_' . $operation,
                    $nid,
                    $data['priority'],
                    $data['referenced'][$operation]
                  );
                }
              }
            }
          }

          if (!empty($data['unused']) && isset($data['referenced'])) {
            foreach (array_keys($data['referenced']) as $operation) {
              // Add a dummy grant for node 0 to block other users' access.
              nodeaccess_nodereference_add_grant(
                $grants,
                'nodeaccess_nodereference_' . $operation,
                0,
                $data['priority'],
                $data['referenced'][$operation]
              );
            }
          }

        }

        // If there are grants set, also add the author and view-all grants.
        // These will fire for each non-empty nodeaccess_nodereference field,
        // but redundant calls will be correctly handled by the helper function:
        // nodeaccess_nodereference_add_grant().
        if (!empty($grants)) {
          if (!empty($data['author']) && (!empty($node->status) || !empty($data['author_published']))) {
            // Add author grants.
            nodeaccess_nodereference_add_grant(
              $grants,
              'nodeaccess_nodereference_author',
              $node->uid,
              $data['priority'],
              $data['author']
            );
          }
          if (!empty($data['all']) && (!empty($node->status) || !empty($data['all_published']))) {
            // Add all grants.
            nodeaccess_nodereference_add_grant(
              $grants,
              'nodeaccess_nodereference_all',
              1,
              $data['priority'],
              $data['all']
            );
          }
        }
      }

    }
  }

  // Flag that the cache is not to be relied upon.
  variable_set('nodeaccess_nodereference_cache_needs_clear', TRUE);

  return $grants;
}

/**
 * Set and get nodeaccess nodereference field settings.
 *
 * @param $bundle_name
 *   The name of the bundle.
 * @param $field_name
 *   The name of the field.
 * @param $variable
 *   If set will update the value of the settings for this field.
 * @return
 *   The stored or updated value of the settings for this field, or array() if no settings found.
 */
function nodeaccess_nodereference_field_settings($bundle_name, $field_name = NULL, $variable = NULL) {
  $data = variable_get('nodeaccess_nodereference', array());

  if (!is_null($field_name)) {
    if (!is_null($variable)) {
      if (!empty($variable)) {
        $data[$bundle_name][$field_name] = $variable;
      }
      else {
        // Variable is empty.
        unset($data[$bundle_name][$field_name]);
        // Clear empty bundle too.
        if (empty($data[$bundle_name])) {
          unset($data[$bundle_name]);
        }
      }
      variable_set('nodeaccess_nodereference', $data);
    }
    if (isset($data[$bundle_name][$field_name])) {
      return $data[$bundle_name][$field_name];
    }
  }
  elseif (isset($data[$bundle_name])) {
    return $data[$bundle_name];
  }

  // No data found
  return array();
}

/**
 * Reduce settings array to the bare minimum.
 *
 * @param $variable
 *  The settings array.
 * @return
 *  The minimum array or FALSE if there is no array left to save.
 */
function nodeaccess_nodereference_reduce_variable($variable) {
  // Filter the variable.
  $variable = nodeaccess_nodereference_recursive_filter($variable);

  // Create a test array without the volatile keys and filter again.
  $test = $variable;
  unset($test['referenced']['published']);
  unset($test['author_published']);
  unset($test['all_published']);
  unset($test['unused']);
  unset($test['priority']);
  unset($test['field_type']);
  $test = nodeaccess_nodereference_recursive_filter($test);

  // Remove major areas of the variable if they are empty in the test array.
  foreach ($variable as $key => $value) {
    if (is_array($value) && empty($test[$key])) {
      unset($variable[$key]);
    }
  }

  // If 'referenced' is empty, then the variable can be considered empty.
  if (empty($variable['referenced'])) {
    return FALSE;
  }

  return $variable;
}

/**
 * Recursively filter an array.
 */
function nodeaccess_nodereference_recursive_filter($array) {
  foreach ($array as $key => $value) {
    if (is_array($value)) {
      $array[$key] = nodeaccess_nodereference_recursive_filter($value);
    }
  }
  return array_filter($array);
}

/**
 * Check for cross access.
 *
 * Cross access is our term for when a referenced node gives a different kind
 * of access than the one that the reference is tested for. e.g. if a field
 * gave users 'view' access to the node when they have 'update' access on the
 * reference. This requires extra checking in
 * nodeaccess_nodereference_node_grants(), so this is how we inform that
 * function that this needs to be done.
 */
function nodeaccess_nodereference_check_cross_access() {
  $data = variable_get('nodeaccess_nodereference', array());
  $cross_access = array(
    'view' => FALSE,
    'update' => FALSE,
    'delete' => FALSE,
  );
  foreach ($data as $type_name => $type_data) {
    foreach ($type_data as $field_name => $field_data) {
      foreach (array_keys($cross_access) as $check) {
        foreach (array_keys($cross_access) as $grant) {
          if ($check != $grant && !empty($field_data['referenced'][$check][$grant])) {
            $cross_access[$grant] = TRUE;
          }
        }
      }
    }
  }
  variable_set('nodeaccess_nodereference_cross_access', $cross_access);
}

/**
 * Implements of hook_node_access_explain().
 *
 * This gives the Devel module nice information to display when
 * debugging node grants.
 */
function nodeaccess_nodereference_node_access_explain($row) {
  if (
    in_array(
      $row->realm,
      array(
        'nodeaccess_nodereference_view',
        'nodeaccess_nodereference_update',
        'nodeaccess_nodereference_delete',
        'nodeaccess_nodereference_author',
        'nodeaccess_nodereference_all'
      )
    )
  ) {

    $ops = array();
    foreach (array('view', 'update', 'delete') as $op) {
      $gop = 'grant_' . $op;
      if (!empty($row->$gop)) {
        $ops[] = $op;
      }
    }

    if (!empty($ops)) {
      $do = implode('/', $ops);
      switch ($row->realm) {
        case 'nodeaccess_nodereference_view':
          $reference = node_load($row->gid);
          return t(
            'Users that may view referenced node !node may !do this node',
            array('!node' => l($reference->title, 'node/' . $reference->nid), '!do' => $do)
          );
        case 'nodeaccess_nodereference_update':
          $reference = node_load($row->gid);
          return t(
            'Users that may update referenced node !node may !do this node',
            array('!node' => l($reference->title, 'node/' . $reference->nid), '!do' => $do)
          );
        case 'nodeaccess_nodereference_delete':
          $reference = node_load($row->gid);
          return t(
            'Users that may delete referenced node !node may !do this node',
            array('!node' => l($reference->title, 'node/' . $reference->nid), '!do' => $do)
          );
        case 'nodeaccess_nodereference_author':
          $account = user_load($row->gid);
          return t(
            'Node author %name may !do this node',
            array('%name' => $account->name, '!do' => $do)
          );
        case 'nodeaccess_nodereference_all':
          return t(
            'All users may !do this node',
            array('!do' => $do)
          );
      }
    }

  }
}

/**
 * Implements hook_field_delete_instance().
 */
function nodeaccess_nodereference_field_delete_instance($instance) {
  nodeaccess_nodereference_field_settings($instance['bundle'], $instance['field_name'], FALSE);
}