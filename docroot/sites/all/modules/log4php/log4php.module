<?php

/**
 * Implements hook_watchdog().
 */
function log4php_watchdog(array $log_entry) {
  global $conf;
  static $logger;

  if (!isset($logger)) {
    $logger_path = _log4php_get_path();
    // libraries module might not be available if watchdog is being called during hook_boot() phase
    // @TODO not sure if this is the best way to handle this scenario
    if (empty($logger_path)) {
      return;
    }
    require_once($logger_path);
    Logger::configure($conf['log4php_config']);
  }

  $logger = Logger::getLogger('drupal:' . $log_entry['type']);

  $log_object = LoggerRendererDrupalLogObject::getInstanceFromLogEntry($log_entry);

  // Allow other modules to change the format
  drupal_alter('log4php', $log_object);

  // Map Drupal severity levels to log4php levels
  // (Drupal currently has no analog to TRACE)
  switch ($log_entry['severity']) {
    case WATCHDOG_EMERGENCY:
    case WATCHDOG_ALERT:
    case WATCHDOG_CRITICAL:
      $logger->fatal($log_object);
      break;
    case WATCHDOG_ERROR:
      $logger->error($log_object);
      break;
    case WATCHDOG_WARNING:
      $logger->warn($log_object);
      break;
    case WATCHDOG_NOTICE:
    case WATCHDOG_INFO:
      $logger->info($log_object);
      break;
    case WATCHDOG_DEBUG:
      $logger->debug($log_object);
      break;
  }
}

/**
 * Helper function to determine if log4php libraries are installed correctly.
 */
function _log4php_get_path() {
  // Check for preferred PEAR installation (or within module directory)
  if (file_exists('log4php/Logger.php')) {
    $path = 'log4php/Logger.php';
  }
  elseif (module_exists('libraries')) {
    // Use Libraries module, if available
    if (file_exists(libraries_get_path('log4php') . '/Logger.php')) {
      // check if the library is in the recommended location
      $path = libraries_get_path('log4php') . '/Logger.php';
    }
    elseif (file_exists(libraries_get_path('log4php') . '/src/main/php/Logger.php')) {
      // check if the library has been downloaded directly into libraries folder
      // this caters for drush make files
      $path = libraries_get_path('log4php') . '/src/main/php/Logger.php';
    }
  }

  return isset($path) ? $path : NULL;
}

/**
 * Mostly a clone of t function which uses format_string() to sanitize log messages
 * that are being shows in a page. We don't want that but we do need translation support
 *
 * @param $string
 * @param array $args
 * @param array $options
 * @return array|null|string
 */
function log4php_t($string, array $args = array(), array $options = array()) {
  global $language;
  static $custom_strings;

  // Merge in default.
  if (empty($options['langcode'])) {
    $options['langcode'] = isset($language->language) ? $language->language : 'en';
  }
  if (empty($options['context'])) {
    $options['context'] = '';
  }

  // First, check for an array of customized strings. If present, use the array
  // *instead of* database lookups. This is a high performance way to provide a
  // handful of string replacements. See settings.php for examples.
  // Cache the $custom_strings variable to improve performance.
  if (!isset($custom_strings[$options['langcode']])) {
    $custom_strings[$options['langcode']] = variable_get('locale_custom_strings_' . $options['langcode'], array());
  }
  // Custom strings work for English too, even if locale module is disabled.
  if (isset($custom_strings[$options['langcode']][$options['context']][$string])) {
    $string = $custom_strings[$options['langcode']][$options['context']][$string];
  }
  // Translate with locale module if enabled.
  elseif ($options['langcode'] != 'en' && function_exists('locale')) {
    $string = locale($string, $options['context'], $options['langcode']);
  }
  if (empty($args)) {
    return $string;
  }
  else {
    return strtr($string, $args);
  }
}
