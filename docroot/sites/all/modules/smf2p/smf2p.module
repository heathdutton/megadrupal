<?php

/**
 * @file
 * Simple Machines Forum Drupal integration: Autoposting
 * Developer: nikiit.ru
 */


/**
 * Node is not published to SMF2 forum.
 */
define('SMF2_NOT_PUBLISHED', 0);

/**
 * Node is published to SMF2 forum.
 */
define('SMF2_PUBLISHED', 1);

/**
 * Implements hook_menu().
 */
function smf2p_menu() {
  $items = array();

  // Administration pages.
  $items['admin/config/content/smf2p'] = array(
    'title' => 'SMF2 Posting settings',
    'description' => 'From Drupal to Simple Machine Forum 2 (SMF2) posting settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smf2p_common_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'smf2p.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function smf2p_permission() {
  $perms = array();
  foreach (node_type_get_types() as $type) {
    if (isset($type->type)) {
      $perms['smf2p ' . $type->type . ' publish'] = array(
        'title' => t("Publish %type to SMF2", array('%type' => $type->name,)),
      );
    }
  }
  return $perms;
}

/**
 * Implements hook_field_extra_fields().
 */
function smf2p_field_extra_fields() {
  $return = array();
  
  if (variable_get('smf2p_link_as_field')) {
    return $return;
  }

  $nodetypes = node_type_get_types();
  $certain_nt = array_filter(variable_get('smf2p_nodetypes', array()));
  if (!empty($certain_nt)) {
    foreach (variable_get('smf2p_nodetypes', array()) as $type => $enabled) {
      if (!$enabled) {
        unset($nodetypes[$type]);
      }
    }
  }

  foreach ($nodetypes as $type) {
    $return['node'][$type->type] = array(
      'display' => array(
        'smf2p_url' => array(
          'label' => t('URL to Forum topic'),
          'description' => t('SMF2 posted link.'),
          'weight' => 50,
        ),
      ),
    );
  }
  return $return;
}

/**
 * Implements hook_node_prepare().
 */
function smf2p_node_prepare($node) {
  $nodetypes = array_filter(variable_get('smf2p_nodetypes', array()));
  if (!empty($nodetypes)) {
    if (!isset($nodetypes[$node->type])) return ;
  }
  
  if (empty($node->smf2p)) {
    // Prepare the node for the edit form so that $node->smf2p always exists.
    $item = array();
    if (isset($node->nid)) {
      $record = db_query("SELECT * FROM {smf2p_nodemsg} WHERE nid = :nid", array(':nid' => $node->nid))->fetchObject();
      if (isset($record->nid)) {
        $item['id_topic'] = $record->id_topic;
        $item['published'] = $record->published;
        $item['url'] = $record->url;
        $item['board'] = 1;
        $item['title'] = '';
        $item['body'] = '';
      }
    }
    // Set default values.
    $node->smf2p = $item + array(
      'id_topic' => 0,
      'published' => 0,
      'board' => 1,
      'url' => '',
      'title' => variable_get('smf2p_title'),
      'body' => variable_get('smf2p_body'),
    );
  }
}

/**
 * Implements hook_node_view().
 */
function smf2p_node_view($node) {
  smf2p_node_prepare($node);
  if (isset($node->smf2p) && $node->smf2p['published']) {
    if (variable_get('smf2p_link2forum_field')) {
      $node->content['smf2p_url'] = array(
        '#markup' => l(t('Talk in forum'), $node->smf2p['url'], array('absolute' => TRUE, 'attributes' => array('target' => '_blank', 'rel' => 'nofollow'))),
      );
    }
    else {
      $links['link'] = array(
        'href' => $node->smf2p['url'],
        'title' => t('Talk in forum'),
        'attributes' => array('target' => '_blank', 'rel' => 'nofollow'),
      );
      $node->content['links']['smf2p'] = array(
        '#theme' => 'links',
        '#links' => $links,
        '#attributes' => array('class' => array('links', 'inline')),
      );
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function smf2p_node_insert($node) {
  smf2p_node_save($node);
}

/**
 * Implements hook_node_update().
 */
function smf2p_node_update($node) {
  smf2p_node_save($node);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function smf2p_form_node_form_alter(&$form, $form_state) {
  $node = $form['#node'];
  $smf2p = $form['#node']->smf2p;
  
  if (variable_get('smf2p_connected') && user_access('smf2p ' . $node->type . ' publish')) {
    $form['smf2p'] = array(
      '#type' => 'fieldset',
      '#title' => t('Community options'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
      '#tree' => TRUE,
      '#attributes' => array(
        'class' => array('node-form-smf2p'),
      ),
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'smf2p') . '/js/smf2p.js'),
      ),
      '#weight' => 0,
    );
    $form['smf2p']['published'] = array(
      '#type' => 'checkbox',
      '#title' => t('Create post on forum'),
      '#default_value'=> $smf2p['published'],
    );
    $form['smf2p']['topic'] = array(
      '#type' => 'container',
      '#parents' => array('smf2p'),
      '#states' => array(
        'invisible' => array(
          'input[name="smf2p[published]"]' => array('checked' => FALSE),
        ),
      ),
     '#prefix' => '<div id="smf2_topic_wrapper">',
      '#suffix' => '</div>',      
    );
    if ($smf2p['id_topic']) {
      $form['smf2p']['topic']['url'] = array(
        '#type' => 'textfield',
        '#title' => t('Link to forum topic'),
        '#default_value' => $smf2p['url'],
      );
    }
    else {
      $form['smf2p']['topic']['refresh'] = array(
        '#type' => 'button',
        '#value' => t('Refresh'),
        '#ajax' => array(
          'callback' => 'smf2p_form_node_form_refresh_js',
          'wrapper' => 'smf2_topic_wrapper',
        ),
        '#suffix' => '<div class="description">' . t('Each time when you change form values, you should click Refresh for filling Forum title and body by prepared pattern.') . '</div>',
      );
      
      $api = smf2p_connect2forum();
      $opts = array();
      $smf2_boards = $api->get_Boards();
      if (isset($smf2_boards->data)) {
        $smf2_boards->data = (array)$smf2_boards->data;
        foreach ($smf2_boards->data as $board_id => $board) {
          $opts[$board->id_cat . '. ' . $board->cat_name][$board->id_board] = str_repeat('-', $board->child_level) . $board->board_name;
        }
      }
      $form['smf2p']['topic']['board'] = array(
        '#type' => 'select',
        '#title' => t('Board'),
        '#default_value' => $smf2p['board'],
        '#options' => $opts,
      );
      $form['smf2p']['topic']['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#default_value' => $smf2p['title'],
      );
      $form['smf2p']['topic']['body'] = array(
        '#type' => 'textarea',
        '#title' => t('Body'),
        '#default_value' => $smf2p['body'],
        '#description' => t('Please, don\'t change tokens surrounded by {{TOKEN:VALUE}} since it will generated only at node form submit time.'),
      );
    }
  }
}

/**
 * ajax response to refresh
 */
function smf2p_form_node_form_refresh_js($form, $form_state) {
  $node = node_form_submit_build_node($form, $form_state);
  $form['smf2p']['topic']['title']['#value'] = token_replace(variable_get('smf2p_title'), array('node' => $node), array('clear' => 1));
  $form['smf2p']['topic']['body']['#value'] = token_replace(variable_get('smf2p_body'), array('node' => $node), array('clear' => 1));
  return $form['smf2p']['topic'];
}

/**
 * Helper for hook_node_insert() and hook_node_update().
 */
function smf2p_node_save($node) {
  if (isset($node->smf2p)) {
    $smf2p = &$node->smf2p;
    if (empty($smf2p['published'])) {
      // Disable publishing
      db_query("UPDATE {smf2p_nodemsg} SET published = :published WHERE nid = :nid",
        array(':nid' => $node->nid, ':published' => SMF2_NOT_PUBLISHED)
      );
    }
    else {
      $nid = db_query("SELECT nid FROM {smf2p_nodemsg} WHERE nid = :nid", array(':nid' => $node->nid))->fetchField();
      if (!$nid) {
        // Publish to forum
        $check_empty = trim(strip_tags($smf2p['title']));
        $token_title = empty($check_empty) ? variable_get('smf2p_title') : $smf2p['title'];
        // TODO Change str_replace to regexp processing? So it will change only surrounded {{TOKENS}} strings.
        $token_title = str_replace('{{', '[', $token_title);
        $token_title = str_replace('}}', ']', $token_title);
        $title = token_replace($token_title, array('node' => $node));

        $check_empty = trim(strip_tags($smf2p['body']));
        $token_body = empty($check_empty) ? variable_get('smf2p_body') : $smf2p['body'];
        $token_body = str_replace('{{', '[', $token_body);
        $token_body = str_replace('}}', ']', $token_body);
        $body = token_replace($token_body, array('node' => $node));

        $post = smf2p_post2forum($node, $smf2p['board'], $title, $body);
        if (!isset($post->data->id)) {
          drupal_set_message(t('!title not published to forum. Please refer to site administrator.', array('!title' => $node->title)), 'error');
          return ;
        }

        $smf2p_url = variable_get('smf2p_url');
        if (substr($smf2p_url, -1) !== '/') {
          $smf2p_url .= '/';
        }
        $smf2p['url'] = $smf2p_url . 'index.php?topic=' . $post->data->id . '.0';
        
        // Insert publishing
        db_insert('smf2p_nodemsg')
          ->fields(array(
            'nid' => $node->nid,
            'id_topic' => $post->data->id,
            'url' => $smf2p['url'],
            'published' => SMF2_PUBLISHED,
          ))
          ->execute();
      }
      else {
        // Update existance info
        db_query("UPDATE {smf2p_nodemsg} SET published = :published, url=:url WHERE nid = :nid", 
          array(':nid' => $node->nid, ':published' => SMF2_PUBLISHED, ':url' => $smf2p['url'])
        );
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function smf2p_node_delete($node) {
  db_query('DELETE FROM {smf2p_nodemsg} WHERE nid = :nid', array(':nid' => $node->nid));
}

/**
 * Make connection to SMF2.
 */
function smf2p_connect2forum() {
  if (!variable_get('smf2p_secretkey')) {
    return FALSE;
  }
  
  include_once drupal_get_path('module', 'smf2p'). '/inc/SmfRestClient.php';
  $smf2p_url_api = variable_get('smf2p_url_api');
  if (substr($smf2p_url_api, -1) !== '/') {
    $smf2p_url_api .= '/';
  }
  $api = new SmfApi\Client\SmfRestClient($smf2p_url_api, variable_get('smf2p_secretkey'));
  return $api;
}

/**
 * Post topic to SMF2.
 */
function smf2p_post2forum($node, $board = 1, $subject = '', $body = '') {
  if (empty($node->smf2p)) {
    drupal_set_message(t('Error calling posting. Please refer to site administrator.'), 'error');
    return FALSE;
  }
  $smf2p = $node->smf2p;
  
  $api = smf2p_connect2forum();
  if (!$api) {
    drupal_set_message(t('SMF2 REST API isn\'t initialized. Please visit settings page.'), 'error');
    return FALSE;
  }

  if (!variable_get('smf2p_email')) {
    drupal_set_message(t('User for posting to SMF2 forum isn\'t assigned. Please visit settings page.'), 'error');
    return FALSE;
  }
  $smf2_user = $api->login_user(variable_get('smf2p_email'));
  $user_info = $api->get_userInfo();
  if (!isset($user_info->data->id)) {
    drupal_set_message(t('User for posting to SMF2 forum isn\'t found on SMF2 side. Please refer to site administrator.'), 'error');
    return FALSE;
  }  
  
  // Collect all parameters for the creation of a post.
  $msgOptions = array(
    'id' =>  0,
    'subject' => $subject,
    'body' => $body,
    //'icon' => preg_replace('~[\./\\\\*:"\'<>]~', '', $_POST['icon']),
    //'smileys_enabled' => !isset($_POST['ns']),
    //'attachments' => empty($attachIDs) ? array() : $attachIDs,
    'approved' => true,
  );
  $topicOptions = array(
    'id' => 0,
    'board' => $board,
    'poll' => null,
    'lock_mode' => null,
    'sticky_mode' => null,
    'mark_as_read' => true,
    'is_approved' => true,
  );
  $posterOptions = array(
    'id' => $user_info->data->id,
    'name' => $user_info->data->name,
    'email' => $user_info->data->email,
    'update_post_count' => TRUE,
  );
  
  return $api->create_post($msgOptions, $topicOptions, $posterOptions);
}
