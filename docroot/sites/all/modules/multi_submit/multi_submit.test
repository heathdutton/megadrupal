<?php
/**
 * @file
 * Tests for multi_submit module.
 *
 * @ingroup multi_submit
 * @{
 */

/**
 * Helper class used for setting up the environment.
 */
class MultiSubmitTestHelper extends DrupalWebTestCase {
  protected $profile = 'standard';
  protected $admin_user;
  protected $privileged_user;

  function setUp(array $modules = array()) {
    $modules[] = 'multi_submit';
    parent::setUp($modules);

    // Create some test fields (key is cardinality, value is field name).
    $field_names = array(
      FIELD_CARDINALITY_UNLIMITED => 'field_test_unlimited',
      1 => 'field_test_single',
      4 => 'field_test_multiple',
    );
    foreach ($field_names as $cardinality => $field_name) {
      $this->field = field_create_field(
        array(
          'field_name' => $field_name,
          'type' => 'text',
          'cardinality' => $cardinality,
        )
      );
      $this->instance = field_create_instance(
        array(
          'field_name' => $field_name,
          'entity_type' => 'node',
          'bundle' => 'article',
        )
      );
    }

    // Create a couple of users.
    $permissions = array(
      'access content overview',
      'administer content types',
      'create article content',
      'edit own article content',
    );
    $this->privileged_user = $this->drupalCreateUser($permissions);
    $permissions[] = 'administer multi submit';
    $this->admin_user = $this->drupalCreateUser($permissions);
  }

  /**
   * Saves a content-type with enabled Multi Submit settings applied.
   */
  function saveMultiSubmitSettings($type = 'article', $multiple_field = 'field_test_multiple') {
    $edit = array(
      'multi_submit_enable' => TRUE,
      'multi_submit_multiple' => $multiple_field,
      'multi_submit_single' => 'field_test_single',
    );
    $this->drupalPost("admin/structure/types/manage/{$type}", $edit, t('Save content type'));
  }

  /**
   * Saves an article node with 'x' Multi Submit fields populated.
   */
  function createArticleNode($num = 3) {
    // Create an article node.
    $edit = array();
    $edit['title'] = $this->randomName();
    $langcode = LANGUAGE_NONE;
    $edit["body[{$langcode}][0][value]"] = $this->randomName();
    for ($fid = 0; $fid <= $num; $fid++) {
      $edit["field_test_multiple[{$langcode}][{$fid}][value]"] = $this->randomName();
    }
    $this->drupalPost('node/add/article', $edit, t('Save'));
    return $edit;
  }
}

/**
 * Test basic multi_submit functionality.
 */
class MultiSubmitFunctionalTestCase extends MultiSubmitTestHelper {
  public static function getInfo() {
    return array(
      'name' => 'Multi Submit basic tests',
      'description' => 'Tests basic Multi Submit functionality.',
      'group' => 'Multi Submit',
    );
  }

  /**
   * Tests the permissions are correctly applied.
   */
  function testPermissions() {
    $this->drupalLogin($this->privileged_user);
    $this->drupalGet('admin/structure/types/manage/article');
    $this->assertNoText(t('Multi Submit settings'));
    $this->drupalLogin($this->admin_user);
    $this->drupalGet('admin/structure/types/manage/article');
    $this->assertText(t('Multi Submit settings'));
  }

  /**
   * Tests the default options are correctly shown.
   */
  function testDefaults() {
    $this->drupalLogin($this->admin_user);
    $this->drupalGet('admin/structure/types/manage/article');
    // Ensure 'enabled' is not checked by default.
    $this->assertNoFieldChecked('edit-multi-submit-enable');
    // Ensure single and multiple fields are set to 'Disabled'.
    $this->assertOptionSelected('edit-multi-submit-multiple', '', "Option 'Disabled' for field edit-multi-submit-multiple is selected.");
    $this->assertOptionSelected('edit-multi-submit-single', '', "Option 'Disabled' for field edit-multi-submit-single is selected.");
  }

  /**
   * Tests the settings apply correctly.
   */
  function testSettingsApply() {
    $this->drupalLogin($this->admin_user);
    $this->assertFalse(variable_get('multi_submit_enable_article', FALSE), 'Multi Submit is correctly DISABLED.');
    $this->assertFalse(variable_get('multi_submit_multiple_article'), "Multi Submit 'multiple' field is correctly set to DISABLED.");
    $this->assertFalse(variable_get('multi_submit_single_article'), "Multi Submit 'single' field is correctly set to DISABLED.");
    $this->saveMultiSubmitSettings();
    $this->assertTrue(variable_get('multi_submit_enable_article', FALSE), 'Multi Submit is now ENABLED.');
    $this->assertTrue(variable_get('multi_submit_multiple_article'), "Multi Submit 'multiple' field is correctly set to 'field_test_multiple'.");
    $this->assertTrue(variable_get('multi_submit_single_article'), "Multi Submit 'single' field is correctly set to 'field_test_single'.");
  }

  /**
   * Tests the functionality works correctly.
   */
  function testFunctionality() {
    $langcode = LANGUAGE_NONE;
    $this->drupalLogin($this->admin_user);
    $this->saveMultiSubmitSettings();

    // Test node/add/article form shows multiple field and not single field.
    $this->drupalGet('node/add/article');
    // These fields *should* exist.
    for ($fid = 0; $fid <= 3; $fid++) {
      $this->assertFieldByName("field_test_multiple[{$langcode}][{$fid}][value]");
    }
    // These shouldn't exist.
    $this->assertNoFieldByName("field_test_multiple[{$langcode}][4][value]");
    $this->assertNoFieldByName("field_test_single[{$langcode}][0][value]");

    // Create an article node.
    $edit = $this->createArticleNode();

    // Test four nodes were created.
    // Consider removing this test as the similar loop below essentially
    // does the same thing (however the verbose output does help to let you
    // instantly know what's missing).
    $this->drupalGet('admin/content');
    for ($nid = 1; $nid <= 4; $nid++) {
      $href = "node/{$nid}";
      $links = $this->xpath('//a[@href = :href]', array(':href' => url($href)));
      $this->assert(isset($links[0]), format_string('Link to %link found.', array('%link' => $href)));
    }
    // Test a fifth node *doesn't* exist.
    $link = $this->xpath('//a[@href = :href]', array(':href' => url('node/5')));
    $this->assert(!isset($link[0]), format_string('Link to %link NOT found.', array('%link' => 'node/5')));

    // Finally test switch between multiple field => showing only single field.
    for ($nid = 1; $nid <= 4; $nid++) {
      $href = "node/{$nid}/edit";
      $this->drupalGet($href);
      $this->assertResponse(200, format_string('%link exists.', array('%link' => $href)));
      // Odd bit of logic to determine which field belongs to which node.
      $multi_fid = ($nid == 4) ? 0 : $nid;
      $this->assertFieldByName("field_test_single[{$langcode}][0][value]", $edit["field_test_multiple[{$langcode}][{$multi_fid}][value]"]);
      // Pretty stupid to check all multiple fields, but meh - why not?
      for ($fid = 0; $fid < 4; $fid++) {
        $this->assertNoFieldByName("field_test_multiple[{$langcode}][{$fid}][value]");
      }
    }
  }
}

/**
 * @} End of "ingroup multi_submit".
 */
