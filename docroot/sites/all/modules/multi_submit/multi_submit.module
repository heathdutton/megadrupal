<?php
/**
 * @file
 * Main file for the Multi Submit module.
 */

/**
 * @defgroup multi_submit Multi Submit
 * @{
 * Allows a user with permissions to create nodes the ability to create several nodes at once
 * gained from input given in a multiple entry field.  This input is then parsed into individually
 * created nodes with their title/ unique field populated from the multiple entry field.
 */

/**
 * Implements hook_form_node_type_form_alter().
 */
function multi_submit_form_node_type_form_alter(&$form, $form_state) {
  $form['multi_submit'] = array(
    '#type' => 'fieldset',
    '#title' => t('Multi Submit settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#attributes' => array(
      'class' => array('multi-submit-node-settings-form'),
    ),
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'multi_submit') . '/multi_submit.admin.js'),
    ),
    '#group' => 'additional_settings',
    '#access' => user_access('administer multi submit'),
  );
  $form['multi_submit']['multi_submit_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Multi Submit'),
    '#description' => t('Check this box to enable Multi Submit for this node type.'),
    '#default_value' => variable_get('multi_submit_enable_' . $form['#node_type']->type, FALSE),
  );
  $form['multi_submit']['settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Field settings'),
      '#description' => t('Select the required fields.'),
      '#collapsible' => TRUE,
      '#collapsed' => !variable_get('multi_submit_enable_' . $form['#node_type']->type, FALSE),
      '#weight' => 1,
      '#group' => 'multi_submit',
  );
  $form['multi_submit']['settings']['multi_submit_multiple'] = array(
    '#type' => 'select',
    '#title' => t('Use this field'),
    '#description' => t('Select which field holds the multiple node data for the "%name" content type.', array('%name' => $form['#node_type']->name)),
    '#options' => array_merge(array('' => t('Disabled')), _multi_submit_available_fields($form['#node_type']->type, 'multiple')),
    '#default_value' => variable_get('multi_submit_multiple_' . $form['#node_type']->type),
  );
  $form['multi_submit']['settings']['multi_submit_single'] = array(
    '#type' => 'select',
    '#title' => t('To populate this field'),
    '#description' => t('Select which field is unique for the "%name" content type.', array('%name' => $form['#node_type']->name)),
    '#options' => array_merge(array('' => t('Disabled')), _multi_submit_available_fields($form['#node_type']->type, 'single')),
    '#default_value' => variable_get('multi_submit_single_' . $form['#node_type']->type),
  );
}

/**
 * Implements hook_permission().
 */
function multi_submit_permission() {
  return array(
    'administer multi submit' => array(
      'title' => t('Administer Multi Submit'),
      'description' => t('Administer settings for the Multi Submit module.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function multi_submit_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['type']['#value']) && $form['type']['#value'] . '_node_form' == $form_id && variable_get('multi_submit_enable_' . $form['#node']->type, FALSE)) {
    // Don't show the multiple field on node edit forms.
    if (isset($form['#node']->nid)) {
      unset($form[variable_get('multi_submit_multiple_' . $form['#node']->type)]);
      unset($form['#field_info'][variable_get('multi_submit_multiple_' . $form['#node']->type)]);
    }
    // Don't show the populated field on node add forms.
    else {
      unset($form[variable_get('multi_submit_single_' . $form['#node']->type)]);
      unset($form['#field_info'][variable_get('multi_submit_single_' . $form['#node']->type)]);
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function multi_submit_node_presave($node) {
  if (variable_get('multi_submit_enable_' . $node->type, FALSE)) {
    // Only act if this really is a new node.
    if (!isset($node->multi_submit) && !$node->nid) {
      if (($single_field = variable_get('multi_submit_single_' . $node->type)) && ($multi_field = variable_get('multi_submit_multiple_' . $node->type))) {
        $langcode = entity_language('node', $node);
        // Populate the unique field for the original 'base' node.
        $node->{$single_field}[$langcode][0] = $node->{$multi_field}[$langcode][0];
        $values = $node->{$multi_field};
        // Remove the multiple field as it's irrelevant to nodes.
        unset($node->{$multi_field});
        // Remove the first value as it populates the original submitted node.
        unset($values[$langcode][0]);
        if (count($values[$langcode]) > 0) {
          // Loop through the remaining values.
          foreach ($values[$langcode] as $populate) {
            $edit = new stdClass();
            $edit = clone($node);
            // Ensure this is a new node.
            $edit->is_new = TRUE;
            unset($edit->nid, $edit->vid);
            // Set a flag so this 'presave' hook isn't called in an infinite loop.
            $edit->multi_submit = TRUE;
            // If it's enabled, apply an auto node title.
            $edit->auto_nodetitle_applied = FALSE;
            // Populate the unique field from the currently referenced multiple field.
            $edit->{$single_field}[$langcode][0] = $populate;
            // Save the node, NOTE at this point the node is already validated so there's
            // no need to do it again...
            $temp_node = node_submit($edit);
            node_save($temp_node);
          }
        }
      }
    }
  }
}

/**
 * Get fields for selected content-type.
 *
 * @param string $type
 *   Bundle machine name.
 * @param string $option
 *   Whether field's cardinality is set to single or multiple values.
 * @param boolean $reset
 *   Whether to rebuild the array from scratch or not.
 *
 * @return array
 *   Array of machine names of the queried fields.
  */
function _multi_submit_available_fields($type, $option = 'multiple', $reset = FALSE) {
  $bundles = &drupal_static(__FUNCTION__, array());

  if (!isset($bundles[$type][$option]) || $reset) {
    foreach (field_info_fields() as $field) {
      // We're only interested in node bundles.
      if (isset($field['bundles']['node'])) {
        // Determine the cardinality.
        $cardinality = $field['cardinality'] == '1' ? 'single' : 'multiple';
        foreach ($field['bundles']['node'] as $bundle) {
          $bundles[$bundle][$cardinality][$field['field_name']] = $field['field_name'];
        }
      }
    }
  }

  return isset($bundles[$type][$option]) ? $bundles[$type][$option] : array();
}

/**
 * @} End of "defgroup multi_submit".
 */
