<?php
/**
 * Implements hook_init().
 */
function rollover_filter_init() {
  $path = drupal_get_path('module', 'rollover_filter');
  drupal_add_js($path . '/js/rollover-filter.js', array('every_page' => TRUE));
}

/**
 * Implements hook_filter_info().
 */
function rollover_filter_filter_info() {
  $filters = array();
  $filters['rollover_filter'] = array(
    'title' => t('Convert [rollover] tags'),
    'process callback' => 'rollover_filter_process_filter',
    'tips callback' => 'rollover_filter_tips',
    'weight' => 5,
  );
  return $filters;
}

/**
 * Filter tips callback. Display the help for using [rollover] syntax.
 */
function rollover_filter_tips($filter, $format, $long = FALSE) {
  if ($long) {
    return t('
      <p><strong>Rollover Filter</strong></p>
      <p>You may add rollover states to images using the <code>[rollover]<img>[/rollover]</code> format.</p>
      <p>Examples:</p>
      <ul>
        <li><code>[rollover src=""]<img src="" />[/rollover]</code></li>
      </ul>');
  }
  else {
    return check_plain(t('Rollovers may be specified with [rollover src=""]<img src="example.png">[/rollover].'));
  }
}

/**
 * Filter process callback. Replace the [rollover] tags with HTML.
 */
function rollover_filter_process_filter($text, $filter) { 
  // Prevent useless processing if there are no caption tags at all.
  if (stristr($text, '[rollover') !== FALSE) {
    $pattern = "/(\[rollover:([^\]]*)\])(.*?)(\[\/rollover\])/";
    $text = preg_replace_callback($pattern, '_rollover_filter_replace', $text);
  }
  return $text;
}

/**
 * Callback for preg_replace_callback() in rollover_filter_process_filter().
 *
 * This function actually does the work of replacing each [rollover] tag with
 * HTML output.
 */
function _rollover_filter_replace($matches) {
  $rollover = file_create_url($matches[2]);
  $image_tag = $matches[3];
  
  return str_replace('<img', '<img placeholder-data="' . $rollover . '"', $image_tag);
}