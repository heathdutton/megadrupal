<?php
/**
 * @file
 * Functional tests for hosting_stats module.
 */

class HostingStatsTest extends DrupalWebTestCase {

  // Administrative user with access to configure hosting stats.
  protected $admin_user;

  // Admin user with access to view hosting stats.
  protected $privileged_user;

  /**
   * Implements getInfo().
   *
   * @return array
   */
  public static function getInfo() {
    return array(
      'name' => 'Hosting Diagnostics',
      'description' => 'Make sure that hosting stats are collected and reported.',
      'group' => 'Hosting Diagnostics',
    );
  }

  function setUp() {
    // Enable hosting_stats.module for testing.
    parent::setUp('hosting_stats');
    $this->admin_user = $this->drupalCreateUser(array('administer hosting stats'));
    $this->privileged_user = $this->drupalCreateUser(array('view hosting stats'));
  }

  /**
   * Tests that admins can enable logging.
   */
  function testEnableLogging() {
    $this->drupalLogin($this->admin_user);

    $this->drupalGet('admin/config/hosting_stats');
    $this->assertText('Capture performance data', 'Hosting Diagnostics admin form loaded.');

    // Test that the form saves data correctly.
    $options = $this->getLoggingOptions();
    $this->drupalPost('admin/config/hosting_stats', $options, 'Save configuration');
    $this->assertText('The configuration options have been saved', 'Configuration options saved.');
    $this->assertTrue(variable_get('hosting_stats_logging', $options['hosting_stats_logging']), 'Logging setting saved.');
    $this->assertTrue(variable_get('hosting_stats_row_limit', $options['hosting_stats_row_limit']), 'Row limit setting saved.');
    $this->assertTrue(variable_get('hosting_stats_mailto', $options['hosting_stats_mailto']), 'Mailto setting saved.');
  }

  /**
   * Tests that statistics are calculated.
   */
  function testCalculateStatistics() {
    // Only admin users can generate reports.
    $this->drupalLogin($this->admin_user);
    // Test that the basic report form is accessible.
    $this->drupalGet('admin/reports/hosting_stats');

    $this->drupalPost('admin/reports/hosting_stats', array(), t('Calculate database statistics'));
    $this->assertText('Open tables', 'Database stats report shown.');

    $this->drupalPost('admin/reports/hosting_stats', array(), t('Calculate performance statistics'));
    $this->assertText('Logging window *', 'Performance stats report shown/');

    $this->drupalPost('admin/reports/hosting_stats', array(), t('Calculate filesystem statistics'));
    $this->assertText('Total Files', 'Filesystem stats report shown.');
  }

  /**
   * Tests that visits are logged.
   */
  function testLogVisits() {
    // Run the report functions to check data is aggregated correctly.
    module_load_include('inc', 'hosting_stats', 'hosting_stats.report');
    hosting_stats_perf_stats();

    // Check that anonymous visits are saved.
    $this->drupalLogout();
    $this->clearLog();
    $this->visitSite(10);
    $anonymous_logged = db_query('SELECT usertype, timestamp FROM {hosting_stats_log}');
    $anonymous_only = TRUE;

    while ($log = $anonymous_logged->fetchObject()) {
      if ($log->usertype !== '0') {
        $anonymous_only = FALSE;
        break;
      }
    }
    $this->assertTrue($anonymous_only, 'Anonymous users logged correctly in database.');
    // Check that stats are aggregated correctly.
    hosting_stats_perf_stats();
    $performance_stats = unserialize(variable_get('hosting_stats_perf'));
    foreach ($performance_stats as $stat_array) {
      if ($stat_array[0] == 'Anonymous requests') {
        $this->assertTrue($stat_array[1] == '10 (100%)', 'Anonymous requests aggregated correctly.');
      }
    }

    // Check that authenticated visits are saved.
    $this->drupalLogin($this->privileged_user);
    $this->clearLog();
    $this->visitSite(10);
    $auth_logged = db_query('SELECT usertype, timestamp FROM {hosting_stats_log}');
    $auth_only = TRUE;

    while ($log = $auth_logged->fetchObject()) {
      if ($log->usertype !== '1') {
        $auth_only = FALSE;
        break;
      }
    }
    $this->assertTrue($auth_only, 'Authenticated users are logged correctly in database.');
    // Check that stats are aggregated correctly.
    hosting_stats_perf_stats();
    $performance_stats = unserialize(variable_get('hosting_stats_perf'));
    foreach ($performance_stats as $stat_array) {
      if ($stat_array[0] == 'Authenticated requests') {
        $this->assertTrue($stat_array[1] == '10 (100%)', 'Authentic requests aggregated correctly.');
      }
    }
  }

  /**
   * Tests that logs are truncated.
   */
  function testCron() {
    // Insert rows for deletion.
    $this->clearLog();
    for ($i = 0; $i < 10; $i++) {
      db_query(
        'INSERT INTO {hosting_stats_log} (usertype, timestamp) VALUES (:usertype, :timestamp)',
        array(':usertype' => 1, ':timestamp' => REQUEST_TIME)
      );
    }

    // Configure hosting_stats to keep at most 5 logs.
    $limit = 5;
    variable_set('hosting_stats_row_limit', $limit);

    hosting_stats_cron();
    $logcount = db_query("SELECT count(*) FROM {hosting_stats_log}")->fetchField();
    $this->assertTrue($limit == $logcount, 'Log was truncated correctly.');
  }

  /**
   * Do a simple GET request to the site, so that we can log a visit.
   *
   * @param int $count
   *   Number of times to visit the site.
   */
  function visitSite($count) {
    for ($i = 0; $i < $count; $i++) {
      $this->drupalGet('/');
    }
  }

  /*
   * Remove all records from the hosting stats log.
   */
  function clearLog() {
    db_query('TRUNCATE {hosting_stats_log}');
  }

  /**
   * Returns options suitable for hosting_stats admin form submission.
   *
   * @return array
   *   POST compatible form array.
   */
  function getLoggingOptions() {
    $edit = array(
      'hosting_stats_logging' => '1',
      'hosting_stats_row_limit' => '20',
      'hosting_stats_mailto' => 'admin@example.com',
    );

    return $edit;
  }

}
