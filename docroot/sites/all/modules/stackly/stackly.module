<?php
/**
 * @file
 * This module enables stackly integration with drupal.
 */

// @TODO make this a drupal library.
define('STACKLY_API', 'http://www.stackly.org/widget/scripts/widget.js');

/**
 * Implements hook_menu().
 */
function stackly_menu() {
  $items = array();
  $items['stackly/my-stacks'] = array(
    'title' => 'My Stacks',
    'type' => MENU_CALLBACK,
    'page callback' => 'stackly_mystacks',
    'access callback' => TRUE,
  );

  $items['admin/config/services/stackly'] = array(
    'title' => 'Stackly',
    'description' => 'Configure stackly.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stackly_admin_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Page callback.
 */
function stackly_mystacks() {
  return t('My Stacks');
}

/**
 * Settings form for module stackly.
 *
 * @todo We might need to re-wright the block logic wrt this change.
 */
function stackly_admin_settings() {
  $form['stackly_doi'] = array(
    '#type' => 'textfield',
    '#title' => t('DOI'),
    '#description' => t('The DOI for content, tokens available for use.'),
    '#default_value' => variable_get('stackly_doi', ''),
  );

  if (module_exists('token')) {
    $form['token_tree'] = array(
      '#type' => 'fieldset',
      '#title' => t('Replacement patterns'),
      '#theme' => 'token_tree',
      '#token_types' => array('node'),
    );
  }
  else {
    $form['token_tree'] = array(
      '#markup' => '<p>' . t('Enable the <a href="@drupal-token">Token module</a> to view the available token browser.', array('@drupal-token' => 'http://drupal.org/project/token')) . '</p>',
    );
  }

  return system_settings_form($form);
}

/**
 * Implements hook_theme().
 */
function stackly_theme($existing, $type, $theme, $path) {
  return array(
    'add_to_stackly' => array(
      'variables' => array(
        'data-stackly-widget-type' => 'stackthis',
        'data-details' => '_self_',
        'data-id-doi' => NULL,
        'data-id-pmid' => NULL,
        'data-id-pmcid' => NULL,
      ),
    ),
    'stackly_tracked_stacks' => array(
      'variables' => array('stackly_publisher_id' => NULL),
    ),
  );
}

/**
 * Returns HTML for the Publisher Tracked Stacks widget.
 *
 * @param array $variables
 *   An associative array containing:
 *   - stackly_publisher_id: The publisher id for stackly.
 *
 * @ingroup themeable
 */
function theme_stackly_tracked_stacks($variables) {
  if (!$variables['stackly_publisher_id']) {
    return FALSE;
  }
  // Add stackly API.
  drupal_add_js(STACKLY_API, array('type' => 'external', 'scope' => 'footer'));

  // Any HTML tag except <a> can be used.
  $output = '<div data-stackly-widget-type="mypublishertrackedstacks" ';
  $output .= 'data-publisher="' . $variables['stackly_publisher_id'] . '" ';
  $output .= '></div>';
  return $output;
}

/**
 * Returns HTML for the add_to_stackly widget.
 *
 * @param array $variables
 *   An associative array containing:
 *   - doi: The resource identifier.
 *
 * @ingroup themeable
 */
function theme_add_to_stackly($variables) {
  // Add external stackly script.
  drupal_add_js(STACKLY_API, array('type' => 'external', 'scope' => 'footer'));

  $attributes = array();
  if ($variables) {
    foreach ($variables as $key => $value) {
      if ($value) {
        $attributes[$key] = $value;
      }
    }
  }

  // Ensure required variables are set.
  if (!$attributes['data-details']) {
    $attributes['data-details'] = '_self_';
  }

  if (!$attributes['data-stackly-widget-type']) {
    $attributes['data-stackly-widget-type'] = 'stackthis';
  }

  return l(t(''), '', array('attributes' => $attributes));
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function stackly_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implements hook_preprocess_menu_link().
 */
function stackly_preprocess_menu_link(&$vars) {
  // Anything that links to stackly/my-stacks, make sure to add js.
  if ($vars['element']['#href'] == 'stackly/my-stacks') {
    // Add stackly javascript files.
    drupal_add_js(STACKLY_API, array('type' => 'external', 'scope' => 'footer'));
    drupal_add_js(drupal_get_path('module', 'stackly') . '/js/stackly-global.js', array('scope' => 'footer'));

    // Add class so that stackly js picks it up.
    if (!in_array('stackly-mystacks', $vars['element']['#attributes']['class'])) {
      $vars['element']['#attributes']['class'][] = "stackly-mystacks";
    }

    // Add data attribute so that stackly js picks it up.
    if (isset($vars['element']['#attributes']['data-stackly-widget-type'])) {
      if (!in_array('stackly-mystacks', $vars['element']['#attributes']['data-stackly-widget-type'])) {
        $vars['element']['#attributes']['data-stackly-widget-type'][] = "mystacks";
      }
    }
    else {
      $vars['element']['#attributes']['data-stackly-widget-type'][] = "mystacks";
    }
  }
}

/**
 * Implements hook_block_info().
 */
function stackly_block_info() {
  return array(
    'stackly_add_to_stackly' => array(
      'info' => t('stackly Stack This button'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
  );
}

/**
 * Implements hook_block_configure().
 */
function stackly_block_configure($delta = '') {
  $form = array();
  if ($delta == 'stackly_add_to_stackly') {

    $form['stackly_doi'] = array(
      '#type' => 'textfield',
      '#title' => t('DOI'),
      '#description' => t('The DOI for content, tokens available for use.'),
      '#default_value' => variable_get('stackly_doi', ''),
    );

    if (module_exists('token')) {
      $form['token_tree'] = array(
        '#theme' => 'token_tree',
        '#token_types' => array('node'),
      );
    }
    else {
      $form['token_tree'] = array(
        '#markup' => '<p>' . t('Enable the <a href="@drupal-token">Token module</a> to view the available token browser.', array('@drupal-token' => 'http://drupal.org/project/token')) . '</p>',
      );
    }
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function stackly_block_save($delta = '', $edit = array()) {
  if ($delta == 'stackly_add_to_stackly') {
    variable_set('stackly_doi', $edit['stackly_doi']);
  }
}

/**
 * Implements hook_block_view().
 */
function stackly_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'stackly_add_to_stackly':
      $node = menu_get_object('node', 1);
      $attributes = array();

      if ($node) {
        if ($stackly_doi = variable_get('stackly_doi', FALSE)) {
          $attributes['data-id-doi'] = token_replace($stackly_doi, array('node' => $node));
        }
      }

      $block['content'] = theme('add_to_stackly', $attributes);
      break;
  }

  return $block;
}
