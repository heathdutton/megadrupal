<?php
/**
 * @file
 * Assign users a role based on a Recur.ly subscription.
 */

/**
 * Implements hook_menu().
 */
function recurly_roles_menu() {
  $items = array();
  // URL that can be linked to and will redirect a user to the appropriate page
  // to manage their subscription whatever state/status their account is in at
  // the time.
  $items['signup'] = array(
    'page callback' => 'recurly_roles_signup_redirect',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu callback; Redirect user to page for managing their own subscription.
 */
function recurly_roles_signup_redirect() {
  global $user;
  if ($user->uid !== 0) {
    drupal_goto('user/' . $user->uid . '/subscription/signup');
  }
  else {
    drupal_goto('user/register');
  }
}

/**
 * Implements hook_form_alter().
 */
function recurly_roles_form_recurly_settings_form_alter(&$form, &$form_state) {
  // If the 'user' entity type is selected for syncing lets add some options.
  $roles = array_map('check_plain', user_roles());
  $form['sync']['recurly_roles'] = array(
    '#type' => 'fieldset',
    '#title' => t('Roles to apply to user account'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#states' => array(
      'visible' => array(
        ':input[name="recurly_entity_type"]' => array('value' => 'user'),
      ),
    ),
  );
  $form['sync']['recurly_roles_enabled_on_registration_form'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display subscription options on user registration form.'),
    '#description' => t('Enabling this option will display a list of subscription plans on the user registration form and allow a user to choose one when creating a new account and will then redirect the user to recurly payment page after sucessfull user account creation.'),
    '#default_value' => variable_get('recurly_roles_enabled_on_registration_form', 0),
    '#states' => array(
      'visible' => array(
        ':input[name="recurly_entity_type"]' => array('value' => 'user'),
      ),
    ),
  );
  $form['sync']['recurly_roles_enabled_on_registration_form_required'] = array(
    '#type' => 'checkbox',
    '#title' => t("Require user's to choose a subscription plan in order to complete registration."),
    '#default_value' => variable_get('recurly_roles_enabled_on_registration_form_required', TRUE),
    '#states' => array(
      'visible' => array(
        ':input[name="recurly_entity_type"]' => array('value' => 'user'),
      ),
    ),
  );

  $form['sync']['recurly_roles']['help'] = array(
    '#type' => 'markup',
    '#markup' => t("<p>Using the options below you can choose to add/remove roles from a user's account based on their Recurly subscription status. Global settings apply to all users regardless of which plan they are subscribed to.</p>"),
  );

  // Add a set of fields for choosing a roles to add/remove for any plan.
  $form['sync']['recurly_roles']['default'] = _recurly_roles_form_fields('default');
  $form['sync']['recurly_roles']['default']['#title'] = t('Global Settings - Applies to All Plans');

  // Add a set of fields to choose roles to add/remove for each plan.
  $subscription_plans = variable_get('recurly_subscription_plans', array());
  if (count($subscription_plans)) {
    foreach ($subscription_plans AS $plan) {
      $form['sync']['recurly_roles'][$plan] = _recurly_roles_form_fields($plan);
    }
  }
}

/**
 * Build a set of checkboxes for choosing role(s) to add/remove when a user
 * subscribes to a plan, or their current subscription expires.
 *
 * @param string $plan
 *   Recurly plan name.
 *
 * @return array
 *   Form API array.
 */
function _recurly_roles_form_fields($plan) {
  $roles = array_map('check_plain', user_roles());
  $fields = array(
    '#type' => 'fieldset',
    '#title' => check_plain($plan),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $fields['recurly_roles_plans_' . $plan . '_add'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Roles to add to an account when the %plan plan is purchased', array('%plan' => $plan)),
    '#options' => $roles,
    '#default_value' => variable_get('recurly_roles_plans_' . $plan . '_add', array()),
  );
  $fields['recurly_roles_plans_' . $plan . '_remove'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Roles to remove from accounts when the %plan plan expires.', array('%plan' => $plan)),
    '#options' => $roles,
    '#default_value' => variable_get('recurly_roles_plans_' . $plan . '_remove', array()),
  );
  $fields['recurly_roles_plans_' . $plan . '_expired_add'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Roles to add to an account when the %plan plan expires.', array('%plan' => $plan)),
    '#options' => $roles,
    '#default_value' => variable_get('recurly_roles_plans_' . $plan . '_expired_add', array()),
  );
  return $fields;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function recurly_roles_form_user_register_form_alter(&$form, &$form_state) {
  // Do not add these additions to the user register form when it's being shown
  // at admin/people/create.
  if (current_path() === 'admin/people/create') {
    return;
  }

  // Optionally add subscription options to the user registration form.
  if (variable_get('recurly_roles_enabled_on_registration_form', FALSE)) {
    $form['recurly_subscription_plans'] = _recurly_roles_plan_options();
    $form['#submit'][] = 'recurly_roles_user_register_form_submit';
  }
}

/**
 * Submit handler for user_register_form. Redirect to recurly signup page.
 */
function recurly_roles_user_register_form_submit($form, &$form_state) {
  if (isset($form_state['values']['recurly_roles_radios'])) {
    $form_state['redirect'] = 'user/' . $form_state['values']['uid'] . '/subscription/signup/' . $form_state['values']['recurly_roles_radios'];
  }
}

/**
 * Implements hook_recurly_process_push_notification().
 */
function recurly_roles_recurly_process_push_notification($subdomain, $notification) {
  $entity_type = variable_get('recurly_entity_type', 'user');
  if ($entity_type == 'user') {
    $account = recurly_account_load(array('account_code' => $notification->account->account_code), TRUE);
    $account = user_load($account->entity_id);
    switch ($notification->type) {
      // Add the subscriber role.
      case 'new_subscription_notification':
      case 'reactivated_account_notification':
        _recurly_roles_add_roles($account, $notification->subscription->plan->plan_code);
        break;

      case 'updated_subscription_notification':
        // Remove default roles and roles for all plans
        _recurly_roles_remove_roles($account, $notification->subscription->plan->plan_code);
        // Add the roles for the new plan
        _recurly_roles_add_roles($account, $notification->subscription->plan->plan_code);
        break;
      // Remove the subscriber role.
      case 'expired_subscription_notification':
        _recurly_roles_remove_roles($account, $notification->subscription->plan->plan_code);
        _recurly_roles_add_roles($account, $notification->subscription->plan->plan_code, 'expired');
        break;

      // @todo: Should we do something with failed payments? Like flag the
      // account so we can display something different on the dashboard?
    }
  }
}

/**
 * Generate a list of enabled Recurly plans.
 *
 * Includes a set of radio buttons, one for each plan and a formatted display
 * of the plan name and information along with some Javascript to allow hiding
 * the radio buttons and using the displayed plan name to toggle the buttons.
 *
 * @return array
 *   A render array that contains a set of radio buttons and the list of plans.
 */
function _recurly_roles_plan_options() {
  global $user;

  $currency = variable_get('recurly_default_currency', 'USD');
  $all_plans = recurly_subscription_plans();
  $enabled_plan_keys = variable_get('recurly_subscription_plans', array());
  $enabled_plans = array();
  foreach ($enabled_plan_keys as $plan_code => $enabled) {
    foreach ($all_plans as $plan) {
      $setup_fee_amount = NULL;
      foreach ($plan->setup_fee_in_cents as $setup_currency) {
        if ($setup_currency->currencyCode === $currency) {
          $setup_fee_amount = recurly_format_currency($setup_currency->amount_in_cents, $setup_currency->currencyCode, TRUE);
          break;
        }
      }
      $unit_amount = NULL;
      foreach ($plan->unit_amount_in_cents as $unit_currency) {
        if ($unit_currency->currencyCode === $currency) {
          $unit_amount = recurly_format_currency($unit_currency->amount_in_cents, $unit_currency->currencyCode, TRUE);
          break;
        }
      }

      if ($enabled && $plan_code === $plan->plan_code) {
        $enabled_plans[$plan_code] = $plan->name . ' (';
        if ($setup_fee_amount) {
          $enabled_plans[$plan_code] .= t('Setup fee: !fee', array('!fee' => $setup_fee_amount)) . ' ';
        }
        $enabled_plans[$plan_code] .= t('Fee: !amount', array('!amount' => $unit_amount)) . ')';
      }
    }
  }

  $build = array();
  $build['recurly_roles_radios'] = array(
    '#type' => 'radios',
    '#title' => t('Choose a plan'),
    '#options' => $enabled_plans,
    '#required' => variable_get('recurly_roles_enabled_on_registration_form_required', TRUE),
  );

  module_load_include('inc', 'recurly', 'includes/recurly.pages');
  $build['recurly_roles_options'] = array(
    '#type' => 'markup',
    '#markup' => recurly_subscription_plan_select('user', $user, 'USD'),
  );

  // Add the JS we need.
  $build['#attached'] = array(
    'js' => array(
      drupal_get_path('module', 'recurly_roles') . '/js/recurly_roles.js',
    ),
  );

  return $build;
}

/**
 * Helper function to remove roles from an account.
 *
 * @param obj $account
 *   User object representing the account to which roles should be applied.
 * @param string $plan_code
 *   The plan_code for the plan to add roles for.
 *
 * @return mixed
 *   Returns TRUE if one or more roles are removed from the account. If no
 *   roles were removed from the $account NULL is returned.
 */
function _recurly_roles_remove_roles($account, $plan_code) {
  $remove_roles = variable_get('recurly_roles_plans_default_add', array());
  // Combine our global remove roles with the plan's roles to remove.
  $remove_roles = array_merge($remove_roles, variable_get('recurly_roles_plans_' . $plan_code . '_remove', array()));
  $remove_roles = array_filter($remove_roles);
  $removed_roles = 0;
  if (count($remove_roles)) {
    foreach ($remove_roles AS $rid) {
      if (isset($account->roles[$rid])) {
        $removed_roles++;
        unset($account->roles[$rid]);
      }
    }
  }
  if ($removed_roles > 0) {
    user_save($account);
    return TRUE;
  }
  return NULL;
}

/**
 * Helper function to add roles to an account.
 *
 * @param obj $account
 *   User account object to which the roles should be added.
 * @param string $reason
 *   Why roles are being added, either 'expired' or 'subscribe'.
 * @param string $plan_code
 *   The plan_code for the plan to add roles for.
 *
 * @return mixed
 *   TRUE if one or more roles are added, NULL otherwise.
 */
function _recurly_roles_add_roles($account, $plan_code, $reason = 'subscribe') {
  $var_suffix = ($reason === 'expired') ? '_expired_add' : '_add';

  $add_roles = variable_get('recurly_roles_plans_default' . $var_suffix, array());
  // Combine our global add roles with the plan's roles to add.
  $add_roles = array_merge($add_roles, variable_get('recurly_roles_plans_' . $plan_code . $var_suffix, array()));
  $add_roles = array_filter($add_roles);
  $added_roles = 0;
  if (count($add_roles)) {
    foreach ($add_roles AS $rid) {
      if (!isset($account->roles[$rid])) {
        $account->roles[$rid] = $rid;
        $added_roles++;
      }
    }
  }
  if ($added_roles > 0) {
    user_save($account);
    return TRUE;
  }
  return NULL;
}
