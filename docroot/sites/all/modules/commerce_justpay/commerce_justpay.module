<?php

/**
 * @file
 * commerce_justpay defines a single page form for Drupal Commerce
 * allowing a simple payment to be made without any associated product
 */

/**
 * Implements hook_menu().
 */
function commerce_justpay_menu() {
  $items['justpay'] = array(
    'title' => 'Pay',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_justpay_form'),
    'access arguments' => array('access commerce justpay form'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['justpay/offsite'] = array(
    'title' => 'Offsite Payment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_justpay_offsite_payment_form', 1),
    'access arguments' => array('access commerce justpay form'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['admin/commerce/config/justpay'] = array(
    'title' => 'Justpay settings',
    'description' => 'Configuration options for the Commerce Justpay module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_justpay_admin_form'),
    'access arguments' => array('administer commerce justpay'),
    'file' => 'includes/commerce_justpay.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_justpay_permission() {
  return array(
    'access commerce justpay form' => array(
      'title' => t('Access Commerce Justpay form'),
      'description' => t('Access the /justpay single step payment page'),
    ),
    'administer commerce justpay' => array(
      'title' => t('Administer Commerce Justpay'),
      'description' => t('Make changes to Commerce Justpay configuration'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function commerce_justpay_block_info() {
  $blocks['commerce_justpay'] = array(
    'info' => t('Commerce Justpay'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function commerce_justpay_block_view($delta) {
  if ($delta == 'commerce_justpay') {
    $content = drupal_get_form('commerce_justpay_form');
    return array(
      'content' => $content,
    );
  }
}

/**
 * Main payment form.
 */
function commerce_justpay_form($form, &$form_state) {
  global $user;

  $order = (isset($form_state['order']) && is_object($form_state['order'])) ? $form_state['order'] : commerce_cart_order_new($user->uid);
  $form_state['order'] = $order;

  $product = commerce_justpay_base_product();
  if (!$product) {
    drupal_set_message(t('Commerce Justpay is not properly configured, an administrator needs to set it up'));
    return array();
  }

  // Ensure this include file is loaded when the form is rebuilt from the cache.
  $form_state['build_info']['files'][] = drupal_get_path('module', 'commerce_customer') . '/includes/commerce_customer_profile.forms.inc';
  module_load_include('inc', 'commerce_customer', 'includes/commerce_customer_profile.forms');

  $form_state['build_info']['files'][] = drupal_get_path('module', 'commerce_payment') . '/includes/commerce_payment.checkout_pane.inc';
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.checkout_pane');

  $checkout_pane_id = 'commerce_payment';
  $checkout_pane = array('pane_id' => $checkout_pane_id);
  $form_state['values'][$checkout_pane_id] = array();
  $form[$checkout_pane_id] = commerce_payment_pane_checkout_form($form, $form_state, $checkout_pane, $order);

  // Rebuild payment details if changed.
  if (!empty($form_state['values']['payment_method'])) {
    $payment_method = commerce_payment_method_instance_load($form_state['values']['payment_method']);
    if ($callback = commerce_payment_method_callback($payment_method, 'submit_form')) {
      $form[$checkout_pane_id]['payment_details'] = $callback($payment_method, $form_state['values'], $checkout_pane, $order);
    }

    $form[$checkout_pane_id]['payment_details']['#prefix'] = '<div id="payment-details">';
    $form[$checkout_pane_id]['payment_details']['#suffix'] = '</div>';
  }

  field_attach_form('commerce_order', $order, $form, $form_state);
  // Remove any configured exluded fields.
  foreach (variable_get('commerce_justpay_exlude_order_fields', array('commerce_line_items', 'commerce_order_total')) as $field_name) {
    if ($field_name) {
      unset($form[$field_name]);
    }
  }

  $currency = commerce_currency_load($product->commerce_price[$product->language][0]['currency_code']);

  $form['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#size' => 5,
    '#weight' => -20,
    '#required' => TRUE,
    '#field_prefix' => $currency['symbol'] ,
  );

  $form['mail'] = array(
    '#weight' => 0,
    '#type' => 'textfield',
    '#maxlength' => EMAIL_MAX_LENGTH,
    '#title' => t('E-mail address'),
    '#required' => TRUE,
    '#default_value' => isset($user->mail) ? $user->mail : '',
    '#weight' => -19,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => variable_get('commerce_justpay_submit_text', t('Pay')),
  );

  return $form;
}

/**
 * Validation handler for commerce_justpay_form().
 */
function commerce_justpay_form_validate(&$form, &$form_state) {
  
  // Get the selected payment method from the form.
  if (empty($form_state['values']['payment_method'])) {
    form_set_error('form', t('No payment method enabled'));
  }

  $amount = $form_state['values']['amount'];

  if (!is_numeric($amount) || $amount <= 0) {
    form_error($form['amount'], t('You must enter a positive number for the amount.'));
  }
  else {
    $product = commerce_justpay_base_product();
    $currency_code = $product->commerce_price[$product->language][0]['currency_code'];
    form_set_value($form['amount'], commerce_currency_decimal_to_amount($amount, $currency_code), $form_state);
  }
}


/**
 * Submit handler for commerce_justpay_form().
 */
function commerce_justpay_form_submit(&$form, &$form_state) {
  $order = $form_state['order'];
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  commerce_cart_order_empty($order);

  $order->log = t("Attempting Justpay type payment");

  // Add a simple product, but modify its price before adding it as a line item.
  $product = commerce_justpay_base_product();
  $product->commerce_price[$product->language][0]['amount'] = $form_state['values']['amount'];

  $line_item = commerce_product_line_item_new($product, 1, $order->order_id);
  commerce_line_item_save($line_item);
  $order_wrapper->commerce_line_items[] = $line_item;

  // Extract attach collected information to the order.
  field_attach_submit('commerce_order', $order, $form, $form_state);
  if (!empty($form_state['values']['mail'])) {
    $order_wrapper->mail = $form_state['values']['mail'];
  }

  // Once the line item has been added, save the order so the
  // balance can be calculated from the attached line items.
  commerce_order_save($order);

  // Allow other modules to mess with the order and profile data.
  drupal_alter('commerce_justpay_order', $order, $form, $form_state);
  $balance = commerce_payment_order_balance($order);

  // Get the selected payment method from the form.
  $payment_method = commerce_payment_method_instance_load($form_state['values']['payment_method']);
  drupal_alter('commerce_justpay_payment_method', $payment_method, $form, $form_state);

  $order->data['payment_method'] = $form_state['values']['payment_method'];

  // Save the order before we attempt a transaction.
  commerce_order_save($order);

  // This is normally called when the checkout is completed,
  // but we now have enough data built up to call it from here.
  if ($callback = commerce_payment_method_callback($payment_method, 'submit_form_submit')) {
    // If payment fails, rebuild the checkout form without progressing.
    $payment_details = $form['commerce_payment']['payment_details'];
    if ($callback($payment_method, $payment_details, $form_state['values'], $order, $balance) !== FALSE) {
      // Make sure the order doesn't stay in the cart.
      $order->log = t("Justpay payment successful");
      commerce_checkout_complete($order);
    }
  }

  if ($payment_method['offsite']) {
    $_SESSION['justpay_order'] = $order;
    drupal_goto('justpay/offsite');
  }

  $form_state['rebuild'] = TRUE;
}

/**
 * For offsite payment methods like Paypal WPS.
 */
function commerce_justpay_offsite_payment_form($form, &$form_state) {

  if (!empty($_SESSION['justpay_order'])) {
    $order = $_SESSION['justpay_order'];
  }
  else {
    drupal_set_message(t('Invalid Order'), 'error');
    return FALSE;
  }

  // First load the order's specified payment method instance.
  if (!empty($order->data['payment_method'])) {
    $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
  }
  else {
    drupal_set_message(t('Invalid payment method selected'), 'error');
    return FALSE;
  }

  // If the user came to the return URL...
  if (arg(2) == 'return' && arg(3) == $order->data['payment_redirect_key']) {
    // Check for a validate handler on return.
    $validate_callback = commerce_payment_method_callback($payment_method, 'redirect_form_validate');

    // If there is no validate handler or if there is and it isn't FALSE...
    if (!$validate_callback || $validate_callback($order, $payment_method) !== FALSE) {
      // Perform any submit functions if necessary.
      if ($callback = commerce_payment_method_callback($payment_method, 'redirect_form_submit')) {
        $callback($order, $payment_method);
      }

      unset($_SESSION['justpay_order']);
      commerce_checkout_complete($order);
      drupal_set_message(t('Payment completed successfully.'));
      return array();
    }
    else {
      // Otherwise display the failure message and send the customer back.
      drupal_set_message(t('Payment failed at the payment server. Please review your information and try again.'), 'error');
    }
  }

  // If the function to build the redirect form exists...
  if ($callback = commerce_payment_method_callback($payment_method, 'redirect_form')) {
    // Generate a key to use in the return URL from the redirected service.
    $order->data['payment_redirect_key'] = drupal_hash_base64(time());
    $_SESSION['justpay_order'] = $order;

    // If the payment method has the 'offsite_autoredirect' option enabled, add
    // the redirection behavior.
    if (!empty($payment_method['offsite_autoredirect'])) {
      $form['#attached']['js'][] = drupal_get_path('module', 'commerce_payment') . '/commerce_payment.js';
      $message = t('Please wait while you are redirected to the payment server. If nothing happens within 10 seconds, please click on the button below.');
      $form['help']['#markup'] = '<div class="checkout-help">' . $message . '</div>';
    }

    // Merge the new form into the current form array, preserving the help text
    // if it exists. We also add a wrapper so the form can be easily submitted.
    $form += drupal_get_form($callback, $order, $payment_method);

    $form['#prefix'] = '<div class="payment-redirect-form">';
    $form['#suffix'] = '</div>';

    drupal_alter('commerce_justpay_' . $callback, $form, $order);
  }
  else {
    // Alert the administrator that the module does not provide a required form.
    drupal_set_message(t('The %title payment method indicates it is offsite but does not define the necessary form to process the redirect.', array('%title' => $payment_method['title'])), 'error');
  }

  return $form;
}


/**
 * Helper function to return up a dummy product.
 */
function commerce_justpay_base_product($sku = NULL) {
  $sku = empty($sku) ? variable_get('commerce_justpay_sku', 'JUSTPAYMENT') : $sku;
  $product = commerce_product_load_by_sku($sku);
  if (is_object($product)) {
    return $product;
  }

  if (user_access('administer commerce justpay')) {
    $product = commerce_product_new('product');
    $product->language = LANGUAGE_NONE;
    $product->commerce_price[$product->language][0]['amount'] = 0;
    $product->commerce_price[$product->language][0]['currency_code'] = commerce_default_currency();
    $product->uid = 1;
    $product->sku = $sku;
    $product->title = t("Justpay Template Product");
    commerce_product_save($product);
    $vars = array(
      '@config_url' => url('admin/commerce/config/justpay'),
      '%sku' => $sku,
    );
    drupal_set_message(t('A product with SKU %sku has been automatically generated, if you want to use a different base product for Commerce Justpay, configure it <a href="@config_url">here</a>', $vars));
    return $product;
  }
  else {
    return FALSE;
  }
}

/**
 * Offsite redirect URLs need to be modified so they return to justpay/offsite.
 */
function commerce_justpay_commerce_justpay_commerce_paypal_wps_redirect_form_alter(&$form, $order) {
  $form['return']['#value'] = str_replace('checkout/' . $order->order_id . '/payment', 'justpay/offsite', $form['return']['#value']);
  $form['cancel_return']['#value'] = str_replace('checkout/' . $order->order_id . '/payment', 'justpay/offsite', $form['cancel_return']['#value']);
}
