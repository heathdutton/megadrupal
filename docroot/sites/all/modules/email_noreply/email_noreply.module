<?php

/**
 * @file E-mail No-Reply module.
 */

/**
 * Implements hook_requirements().
 */
function email_noreply_requirements($phase) {
  $t = get_t();

  // If the module is not in use, no need to check requirements.
  if (!variable_get('email_noreply_mail') || $phase != 'runtime') {
    return;
  }

  $requirements['email_noreply_site_mail_unique'] = array(
    'title' => $t('Unique Site E-mail'),
    'severity' => REQUIREMENT_OK,
    'value' => $t('Unique'),
  );

  // Check to see if the site_mail email address is used by any users.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'user')
    ->propertyCondition('mail', variable_get('site_mail', ini_get('sendmail_from')));
  $result = $query->execute();

  // If we have results, display a warning.
  if (isset($result['user']) && !empty($result['user'])) {
    $account = user_load(key($result['user']));
    $requirements['email_noreply_site_mail_unique']['value'] = $t('Not unique');
    $requirements['email_noreply_site_mail_unique']['severity'] = REQUIREMENT_WARNING;
    $t_args = array(
      '%name' => $account->name,
      '!user-url' => url("user/$account->uid/edit"),
      '!config-url' => url('admin/config/system/site-information'),
    );
    $requirements['email_noreply_site_mail_unique']['description'] = $t('The
      user %name has the same e-mail address as the site. Please
      <a href="!user-url">edit the user</a>, or <a href="!config-url">modify the
      site e-mail address</a> to use a unique email address. Otherwise, mail
      that was intended to be delivered from the user will use the noreply
      address.', $t_args);
  }

  return $requirements;
}

/**
 * Implements hook_form_alter().
 */
function email_noreply_form_system_site_information_settings_alter(array &$form) {
  $form['site_information']['site_mail']['#description'] = t("The default site
    e-mail address, used for sending notifications and in token replacements.
    (Use an address ending in your site's domain to help prevent this e-mail
    being flagged as spam.)");
  $form['site_information']['email_noreply_mail'] = array(
    '#type' => 'textfield',
    '#title' => t('No-Reply E-mail Address'),
    '#description' => t('Set this if you would like all email to come from a no-reply e-mail address.'),
    '#default_value' => variable_get('email_noreply_mail'),
    '#element_validate' => array('email_noreply_email_validate'),
  );
}

/**
 * Element validate function, to ensure the email_noreply_mail address is valid.
 */
function email_noreply_email_validate(array $element) {
  // Validate the e-mail address.
  if (empty($element['#value'])) {
    return;
  }
  if ($error = user_validate_mail($element['#value'])) {
    form_error($element, $error);
  }
}

/**
 * Implements hook_mail_alter().
 */
function email_noreply_mail_alter(array &$message) {
  $noreply = variable_get('email_noreply_mail');
  // If we don't have a no-reply email address, or the from field isn't using
  // the site_mail e-mail address, do nothing.
  if (!$noreply
    || !isset($message['from'])
    || $message['from'] != variable_get('site_mail', ini_get('sendmail_from'))) {
      return;
  }
  $message['from'] =
  $message['headers']['From'] =
  $message['headers']['Sender'] =
  $message['headers']['Return-Path'] = $noreply;
}

/**
 * Implements hook_token_info().
 */
function email_noreply_token_info_alter(array &$data) {
  $data['tokens']['site']['noreply-mail'] = array(
    'name' => t('No-reply E-mail Address'),
    'description' => t("The site's no-reply e-mail address"),
  );
}

/**
 * Implements hook_tokens_alter().
 */
function email_noreply_tokens_alter(array &$replacements, array $context) {
  if ($context['type'] == 'site') {
    $replacements['[site:noreply-mail]'] = variable_get('email_noreply_mail', '');
  }
}
