<?php

/**
 * @file
 * Install, update and uninstall functions for the dbee module.
 */

/**
 * Implements hook_install().
 *
 * Create the dbee variables and the dbee table email encryption is actived by
 * default. Encrypt all exisiting email adresses of the user table.
 */
function dbee_install() {
  // Call dbee module on an ultimate stage to improve compatibility with custom
  // modules : dbee decrypt functions will be call early thanks to the
  // dbee_module_implements_alter() function. Email address will be availables
  // for custom modules. It allows to fix custom modules to.
  db_update('system')
    ->fields(array(
    'weight' => 10,
  ))
    ->condition('name', 'dbee')
    ->condition('type', 'module')
    ->execute();

  variable_set('dbee_loggin_email', (dbee_mail_login_fix()) ? 1 : 0);
  variable_set('dbee_custom_search', 0);

  // Change the description on the {users} table fields.
  $schema = drupal_get_schema('users');
  $dbee_fields = array('mail', 'init');
  foreach ($dbee_fields as $dbee_field) {
    db_change_field('users', $dbee_field, $dbee_field, $schema['fields'][$dbee_field]);
  }

  // Create 2 new fields into the {users} table.
  $schema['users'] = array();
  dbee_schema_alter($schema);
  foreach ($schema['users']['fields'] as $field => $spec) {
    if (in_array($field, array('dbee_mail', 'dbee_init'))) {
      if (db_field_exists('users', $field)) {
        watchdog('system', 'Module install: Attempt to recreate field: "@field", when it already exists.', array('@field' => $field), WATCHDOG_WARNING);
      }
      else {
        db_add_field('users', $field, $spec);
      }
    }
  }
}

/**
 * Implements hook_uninstall().
 *
 * Decrypt all exisiting email adresses of the user table. delete the dbee
 * variables, delete dbee fields.
 */
function dbee_uninstall() {
  variable_del('dbee_loggin_email');
  variable_del('dbee_custom_search');

  // Change the description on the {users} table fields.
  // Note : drupal_get_schema('users', TRUE) fails, use the user core module.
  module_load_include('install', 'user');
  $users_schema = user_schema();
  $dbee_fields = array('mail', 'init');
  foreach ($dbee_fields as $dbee_field) {
    db_change_field('users', $dbee_field, $dbee_field, $users_schema['users']['fields'][$dbee_field]);
  }

  // Delete dbee fields.
  $schema['users'] = array();
  dbee_schema_alter($schema);
  foreach ($schema['users']['fields'] as $field => $specs) {
    if (in_array($field, array('dbee_mail', 'dbee_init')) && db_field_exists('users', $field)) {
      db_drop_field('users', $field);
    }
  }
}

/**
 * Implements hook_schema_alter().
 *
 * Edit the mail and init field description precising they are encrypted, add
 * 2 new fields storing lowercase encrypted mail and init values.
 */
function dbee_schema_alter(&$schema) {
  if (isset($schema['users'])) {
    // Change the description on the {users} table fields.
    $schema['users']['fields']['mail']['description'] = "User's encrypted e-mail address.";
    $schema['users']['fields']['init']['description'] = 'Encrypted e-mail address used for initial account creation.';
    // Create 2 new fields.
    $schema['users']['fields']['dbee_mail'] = array(
      'type' => 'varchar',
      'length' => 254,
      'not null' => TRUE,
      'default' => '',
      'description' => "User's encrypted lowercase email address.",
    );
    $schema['users']['fields']['dbee_init'] = array(
      'type' => 'varchar',
      'length' => 254,
      'not null' => TRUE,
      'default' => '',
      'description' => "Encrypted lowercase e-mail address used for initial account creation.",
    );
  }
}

/**
 * Implements hook_enable().
 *
 * Enable encryption of user email address when the module is installed or
 * enabled. Encrypt all existing user email addresses.
 */
function dbee_enable() {
  drupal_set_message(t('DataBase Email Encryption module enabled'));

  // Encrypt all existing email addresses.
  dbee_update_crypt_all('encrypt');
}

/**
 * Implements hook_disable().
 *
 * Disable encryption of user email address when the module is disabled.
 * Decrypt all existing user email addresses.
 */
function dbee_disable() {
  // Decrypt all existing email addresses.
  dbee_update_crypt_all('decrypt');

  // Display messages.
  drupal_set_message(t('DataBase Email Encryption module disabled. Encryption is disabled now.'));
}

/**
 * Edit the description of the mail and init fields of the {users} table.
 *
 * Precising that the fields are encrypted.
 */
function dbee_update_7100(&$sandbox) {
  // Change the description on the {users} table fields.
  $schema = drupal_get_schema('users', TRUE);
  $dbee_fields = array('mail', 'init');
  foreach ($dbee_fields as $dbee_field) {
    db_change_field('users', $dbee_field, $dbee_field, $schema['fields'][$dbee_field]);
  }
}

/**
 * Migration from previous database structure ({dbee} table) to new
 * structure based on altering the core users table.
 */
function dbee_update_7200() {
  // Change the description on the {users} table fields. Reload schema.
  $schema_users = drupal_get_schema('users', TRUE);
  db_change_field('users', 'mail', 'mail', $schema_users['fields']['mail']);

  $schema['users'] = array();
  dbee_schema_alter($schema);
  foreach ($schema['users']['fields'] as $field => $specs) {
    if (!db_field_exists('users', $field)) {
      db_add_field('users', $field, $specs);
    }
  }

  if (db_table_exists('dbee')) {
    // Fill the new dbee_init and dbee_mail fields.
    $result = db_query('SELECT uid, mail, init FROM {users} ORDER BY uid');
    while ($record = $result->fetchObject()) {
      if ($record->mail == $record->init) {
        // 'init' and 'mail' values are equal and lowercase : copy it.
        $dbee_init = $record->mail;
      }
      else {
        // Provide the lowercase encrypted version of the 'init' value.
        // First decrypt it :
        $uncrypted_init = dbee_decrypt($record->init);
        if ($uncrypted_init == $record->init) {
          // The init value is already decrypted.
          $dbee_init = drupal_strtolower($record->init);
        }
        else {
          // Encrypt the lowercase init value.
          $dbee_init = dbee_encrypt($uncrypted_init, FALSE);
        }
      }
      db_update('users')
          ->fields(array(
        'dbee_mail' => $record->mail,
        'dbee_init' => $dbee_init,
      ))
          ->condition('uid', $record->uid)
          ->execute();
    }

    // Migrate all existing records from {dbee} table to users table.
    $result = db_query('SELECT uid, mail FROM {dbee} ORDER BY uid');
    while ($record = $result->fetchObject()) {
      db_update('users')
          ->fields(array('mail' => $record->mail))
          ->condition('uid', $record->uid)
          ->execute();
    }
    // Remove the {dbee} table.
    db_drop_table('dbee');
  }
}

