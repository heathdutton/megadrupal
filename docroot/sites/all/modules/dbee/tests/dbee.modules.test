<?php
/**
 * @file
 * simpletest functions for the dbee module compatibility with extra modules.
 */

// @TODO : add unit tests for the views, logintogoggan and email regisration
// custom modules.

class DbeeSearchUserTestCase extends DbeeWebTestCase {
  protected $existing_user1;
  protected $existing_user2;
  protected $existing_user3;
  protected $provider;
  protected $search_users_account;
  protected $admin_modules_account;

  public static function getInfo() {
    return array(
      'name' => 'Search users',
      'description' => 'Ensure searching user via email address is still available.',
      'group' => 'DataBase Email Encryption',
    );
  }

  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('aes', 'search');

    $this->provider = 'MYprovider.com';
    // Create a user, with sensitive case mail.
    $this->existing_user1 = $this->drupalCreateUser(array());
    // Make sure the email and name are distincts.
    $this->existing_user1 = user_save($this->existing_user1, array(
      'name' => 'anyname1',
      'mail' => $this->randomName() . '@' . $this->provider,
    ));
    $this->existing_user2 = $this->drupalCreateUser(array());
    // Make sure the email and name are distincts.
    $this->existing_user2 = user_save($this->existing_user2, array(
      'name' => 'anyname2',
      'mail' => $this->randomName() . '@' . $this->provider,
    ));
    // Extra user, do nothing.
    $this->existing_user3 = $this->drupalCreateUser(array());

    // Create a user who can search by email address and log in.
    $this->search_users_account = $this->drupalCreateUser(array(
      'administer users',
      'search content',
      'access user profiles',
    ));
    // Create a user who can enable the dbee module.
    $this->admin_modules_account = $this->drupalCreateUser(array('administer modules'));
    $this->drupalLogin($this->search_users_account);
  }

  protected function testSearchUser() {
    // Test the feature : search user using an existing email address : first
    // without the dbee module, then with dbee module enable.

    // Search the completed email address.
    $edit1 = array('keys' => drupal_strtoupper($this->existing_user1->mail));
    $this->drupalPost('search/user', $edit1, t('Search'));
    $this->assertRaw(l(format_username($this->existing_user1) . ' (' . $this->existing_user1->mail . ')', url('user/' . $this->existing_user1->uid, array('absolute' => TRUE))), 'searching user by completed email address succeed');

    // Search the partial email address.
    $edit2 = array('keys' => drupal_strtoupper($this->provider));
    $this->drupalPost('search/user', $edit2, t('Search'));
    $this->assertRaw(l(format_username($this->existing_user1) . ' (' . $this->existing_user1->mail . ')', url('user/' . $this->existing_user1->uid, array('absolute' => TRUE))), 'searching user by partial email address succeed (first user finded)');
    $this->assertRaw(l(format_username($this->existing_user2) . ' (' . $this->existing_user2->mail . ')', url('user/' . $this->existing_user2->uid, array('absolute' => TRUE))), 'searching user by partial email address succeed (second user finded)');
    $this->assertNoRaw(l(format_username($this->existing_user3) . ' (' . $this->existing_user3->mail . ')', url('user/' . $this->existing_user3->uid, array('absolute' => TRUE))), 'searching user by partial email address succeed (third user not finded)');

    // Install dbee module.
    module_load_include('module', 'dbee');
    $this->drupalLogin($this->admin_modules_account);
    $edit3 = array('modules[Security][dbee][enable]' => 1);
    $this->drupalPost('admin/modules', $edit3, t('Save configuration'));
    $this->assertText(t('DataBase Email Encryption module enabled'), 'The dbee module is enabled now');
    $stored_mail = db_query('SELECT mail FROM {users} WHERE uid = :uid', array(':uid' => $this->existing_user1->uid))->fetchField();
    $crypted_mail = dbee_encrypt($this->existing_user1->mail);
    $this->assertTrue(($stored_mail == $crypted_mail && valid_email_address($this->existing_user1->mail)), 'The email is encrypted into the database');

    // Search again.
    $this->drupalLogin($this->search_users_account);
    $this->drupalPost('search/user', $edit1, t('Search'));
    $this->assertRaw(l(format_username($this->existing_user1) . ' (' . $this->existing_user1->mail . ')', url('user/' . $this->existing_user1->uid, array('absolute' => TRUE))), 'searching user by completed email address still succeed');
    $this->drupalPost('search/user', $edit2, t('Search'));
    $this->assertRaw(l(format_username($this->existing_user1) . ' (' . $this->existing_user1->mail . ')', url('user/' . $this->existing_user1->uid, array('absolute' => TRUE))), 'searching user by partial email address still succeed (first user finded)');
    $this->assertRaw(l(format_username($this->existing_user2) . ' (' . $this->existing_user2->mail . ')', url('user/' . $this->existing_user2->uid, array('absolute' => TRUE))), 'searching user by partial email address still succeed (second user finded)');
    $this->assertNoRaw(l(format_username($this->existing_user3) . ' (' . $this->existing_user3->mail . ')', url('user/' . $this->existing_user3->uid, array('absolute' => TRUE))), 'searching user by partial email address still succeed (third user not finded)');
  }
}

class DbeeContactMailTestCase extends DrupalWebTestCase {
  protected $sender_user;
  protected $recipient_user;

  public static function getInfo() {
    return array(
      'name' => 'Mail functions',
      'description' => 'Verify if sending mail via the contact form is not altered.',
      'group' => 'DataBase Email Encryption',
    );
  }

  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('contact', 'dbee');
    $this->recipient_user = $this->drupalCreateUser(array());
    $this->sender_user = $this->drupalCreateUser(array('access user contact forms'));
    $this->drupalLogin($this->sender_user);
  }

  protected function testContactMail() {
    $this->drupalGet('user/' . $this->recipient_user->uid . '/contact');
    $this->assertFieldById('edit-mail', $this->sender_user->mail, "Sendder 's email address is available on the contact form page.");
    $edit = array(
      'subject' => $this->randomString(40),
      'message' => $this->randomString(128),
    );
    $this->drupalPost('user/' . $this->recipient_user->uid . '/contact', $edit, t('Send message'));
    $this->assertRaw(t('Your message has been sent.'), t('The email has been sent.'));
    $this->assertMail('to', $this->recipient_user->mail, 'The recipient email address is valid');
    $this->assertMail('from', $this->sender_user->mail, 'The sender email address is valid');
  }
}

class DbeeQueryFunctionsTestCase extends DrupalWebTestCase {
  protected $user_2;
  protected $user_3;
  protected $user_4;

  public static function getInfo() {
    return array(
      'name' => 'Hook query functions',
      'description' => 'Verify if the searching via email on dynamic tagged queries succeed.',
      'group' => 'DataBase Email Encryption',
    );
  }

  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('dbee');
    $this->user_2 = $this->drupalCreateUser(array());
    $this->user_3 = $this->drupalCreateUser(array());
    $this->user_4 = $this->drupalCreateUser(array());

    // drupalCreateUser() set an empty 'init' value. Fix it.
    $this->user_2->init = $this->randomName() . '@example.com';
    user_save($this->user_2);
    $this->user_3->init = $this->randomName() . '@example.com';
    user_save($this->user_3);
    $this->user_4->init = $this->randomName() . '@example.com';
    user_save($this->user_4);
  }

  protected function testQueryFunctions() {

    $dbee_fields = array('mail', 'init');
    foreach ($dbee_fields as $dbee_field) {

      for ($test = 1; $test <= 8; $test++) {

        $operator = NULL;
        $verbose = "'$dbee_field' field, test #$test, ";
        switch ($test) {
          case 1:
            // Test searching 1 whole email.
            $keys = $this->user_2->$dbee_field;
            $expected_users = 1;
            $verbose .= "'=' operator : Quering 1 user by the exact email succeed.";
            break;

          case 2:
            // Test searching 1 whole mail email value changing case.
            $keys = drupal_substr(drupal_strtoupper($this->user_2->$dbee_field), 0, 1) . drupal_substr(drupal_strtolower($this->user_2->$dbee_field), 1);
            $expected_users = 0;
            $verbose .= "'=' operator : Quering 1 user by email with sensitive case conflict successfully fails.";
            break;

          case 3:
            // Test searching an mail email value changing case with 'like' operator.
            // $keys is the same.
            $operator = 'LIKE';
            $expected_users = 1;
            $verbose .= "'LIKE' operator : Quering 1 user by email with sensitive case conflict succeed.";
            break;

          case 4:
            // Test searching 2 whole email.
            $keys = array(
              $this->user_2->$dbee_field,
              $this->user_3->$dbee_field,
            );
            $operator = 'IN';
            $expected_users = 2;
            $verbose .= "'$operator' operator : Quering 2 users succeed.";
            break;

          case 5:
            // Test searching 2 whole email.
            // $keys is the same.
            $operator = 'NOT IN';
            $expected_users = 3; // uid 0 and 1 and
            $verbose .= "'$operator' operator : Quering 2 users successfully fails.";
            break;

          case 6:
            // Test searching 3 users  by a partial key.
            $keys = '%exAM_le.com%';
            $operator = 'LIKE';
            $expected_users = 3;
            $verbose .= "'LIKE' operator : Quering users using wilcards succeed.";
            break;

          case 7:
            // Test searching 3 users  by a partial key.
            // $keys is the same.
            $operator = 'NOT LIKE';
            $expected_users = 2; // uid 0 and 1.
            $verbose .= "'$operator' operator : Quering users using wilcards succeed.";
            break;

          case 8:
            // Using nested conditions.
            $keys = '%' . db_like('exAMple.com') . '%';
            $operator = 'LIKE';
            $expected_users = 3;
            $verbose .= "'$operator' operator : Quering users using wilcards on nested conditions succeed.";
            break;
        }

        $query = db_select('users', 'u');
        $query->fields('u', array('uid', 'mail', 'name', 'status', 'created', 'access'));

        if ($test != 8) {
          $query->condition("u.$dbee_field", $keys, $operator);
        }
        else {
          $query->condition(db_or()->
            condition('name', $keys, $operator)->
              condition($dbee_field, $keys, $operator));
        }
        // The hook_query_alter function only works on dynamic tagged queries.
        $query->addTag('test');
        $result = $query->execute();
        $result_uids = array();
        foreach ($result as $record) {
          $result_uids[] = $record->uid;
        }
        $this->assertEqual(count($result_uids), $expected_users, $verbose);
        // $this->verbose($query->__toString());
        // $this->verbose(count($result_uids));
        // $this->verbose('mails = '.$this->user_2->mail.' and '.$this->user_3->mail);
      }
    }
  }
}
