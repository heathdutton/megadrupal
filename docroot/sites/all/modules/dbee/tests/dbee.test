<?php
/**
 * @file
 * simpletest functions for the dbee module.
 */

/**
 * Although most core test cases are based on DrupalWebTestCase and are
 * functional tests (exercising the web UI) we also have DrupalUnitTestCase,
 * which executes much faster because a Drupal install does not have to be
 * one. No environment is provided to a test case based on DrupalUnitTestCase;
 * it must be entirely self-contained.
 */
class DbeeUnitTestCase extends DrupalUnitTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Encryption/Decryption',
      'description' => 'Check unit tests on the encryption/decryption functions with various entries.',
      'group' => 'DataBase Email Encryption',
    );
  }

  function setUp() {
    drupal_load('module', 'aes');
    drupal_load('module', 'dbee');
    parent::setUp();
  }

  /**
   * Call dbee_encrypt() and dbee_decrypt() and check that it returns correct
   * result.
   *
   * Note that no environment is provided; we're just testing the correct
   * behavior of a function when passed specific arguments.
   */
  public function testSimpletestUnitTestExampleFunction() {
    $mail = 'example@example.com'; // Lowercase.
    $crypted_mail = dbee_encrypt($mail);
    $result = ($mail != $crypted_mail && valid_email_address($mail) && !valid_email_address($crypted_mail));
    $message = 'A valid email address is encrypted,';
    $this->assertTrue($result, $message);

    $decrypted = dbee_decrypt($crypted_mail);
    $result = ($decrypted === $mail);
    $message = 'And it can be decrypted back.';
    $this->assertTrue($result, $message);

    $mail_empty = ''; // Empty.
    $crypted_mail_empty = dbee_encrypt($mail_empty);
    $mail_null = NULL; // NULL.
    $crypted_mail_null = dbee_encrypt($mail_null);
    $result = ($mail_empty === $crypted_mail_empty && $mail_null === $crypted_mail_null);
    $message = 'If the email is empty or NULL, the encryption is not fired.';
    $this->assertTrue($result, $message);

    $mail_test_crypted = $crypted_mail; // Already crypted.
    $crypted_test_crypted = dbee_encrypt($mail_test_crypted);
    $result = ($mail_test_crypted === $crypted_test_crypted);
    $message = "If the email is already crypted, the crypted function returns the same value (don't encrypt it twice).";
    $this->assertTrue($result, $message);

    $mail_invalid = 'this is an invalid email!'; // Invalid.
    $crypted_invalid = dbee_encrypt($mail_invalid);
    $result = ($mail_invalid === $crypted_invalid);
    $message = "If the email is invalid, the crypted function returns the same value (don't encrypt invalid emails).";
    $this->assertTrue($result, $message);

    $mail_case = 'ExAMpLe@ExAMpLe.com'; // Sensitive case.
    $crypted_case = dbee_encrypt($mail_case);
    $result = ($crypted_mail !== $crypted_case && valid_email_address($mail_case) && !valid_email_address($crypted_case));
    $message = 'If the email is sensitive case, 2 dictinct encrypted versions exist.';
    $this->assertTrue($result, $message);

    $decrypted_case = dbee_decrypt($crypted_case);
    $result = ($decrypted_case == $mail_case);
    $message = 'And the sensitive case email can be decrypted back.';
    $this->assertTrue($result, $message);
  }
}

class DbeeWebTestCase extends DrupalWebTestCase {
  /**
   * Verify if the mail value is the one expected, comparing from provided values.
   *
   * Check the 3 values : mail, init, and the sensitive case mail (dbee). Try
   * to decrypt it back.
   *
   * @param array $all_datas
   *   Multidimensional array storing user mail information (crypted and
   *   decrypted) keyed by the user ID.
   * @param boolean $crypted
   *   Inform if the dbee module is enable. TRUE for encrypted, FALSE for
   *   decrypted. Default is TRUE.
   * @param boolean $user_deleted
   *   TRUE existing user, FALSE for deleted user. Default is FALSE.
   */
  protected function dbee_all_users_valid($all_datas, $crypted = TRUE, $installed = TRUE) {
    // Test all email address.
    $all_succeed = TRUE;
    foreach ($all_datas as $uid => $datas) {
      $expected = array(
        'mail' => ($crypted) ? dbee_encrypt($datas['mail']) : $datas['mail'],
        'init' => ($crypted) ? dbee_encrypt($datas['init']) : $datas['init'],
        'dbee_mail' => ($crypted) ? dbee_encrypt($datas['mail'], TRUE) : '',
        'dbee_init' => ($crypted) ? dbee_encrypt($datas['init'], TRUE) : '',
      );
      $dbee_fields = ', dbee_mail, dbee_init';
      if (!$installed) {
        unset($expected['dbee_mail'], $expected['dbee_init']);
        $dbee_fields = '';
      }
      $stored = db_query("SELECT mail, init{$dbee_fields} FROM {users} WHERE uid = :uid", array(':uid' => $uid))->fetchAssoc();
      $compare = array_diff_assoc($expected, $stored);

      if ($compare != array()) {
        $all_succeed = FALSE;
        foreach ($compare as $field => $value) {
          $arg = array(
            '%field' => $field,
            '%stored_value' => $stored[$field],
            '%expected_value' => $expected[$field],
          );
          $this->assertTrue(FALSE, format_string('the stored %field (%stored_value) is not the expected one (%expected_value)', $arg));
        }
      }
    }
    return $all_succeed;
  }
}

class DbeeAllUsersTestCase extends DbeeWebTestCase {

  protected $admin_modules_account;
  protected $admin_aes_account;

  public static function getInfo() {
    return array(
      'name' => 'Encrypt/Decrypt all users',
      'description' => 'When the dbee module is enabled or disabled or when the AES encryption key changes.',
      'group' => 'DataBase Email Encryption',
    );
  }

  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('aes');
    // Create a user who can edit the aes options.
    $this->admin_aes_account = $this->drupalCreateUser(array('administer aes'));
    // Create a user who can enable the dbee module.
    $this->admin_modules_account = $this->drupalCreateUser(array('administer modules'));

    $this->drupalLogin($this->admin_modules_account);
  }

  public function testAllUsers($n_users = 10) {

    module_load_include('module', 'dbee');
    // Test encryption and decryption all email addresses on enabling and
    // disabling the module.
    // First create 10 users with variant email addresses : sensitive case,
    // lowercase, empty and invalid.
    $all_datas = array();
    for ($i = 1; $i <= $n_users; $i++) {
      // Create users, sensitive case and low case.
      $edit = array();
      if (isset($account)) {
        unset($account);
      }
      $edit['name'] = $this->randomName();
      if ( ceil($i / 2) == $i / 2 ) {
        // 4 lowercase email addresses (5-1).
        $edit['name'] = drupal_strtolower($edit['name']);
      }
      // 3 sensitive case email addresses (5 - 2).
      $edit['mail'] = $edit['name'] . '@example.com';
      if ( ceil($i / 5) == $i / 5 ) {

        // 2 empty email addresses.
        $edit['mail'] = '';
      }
      if ( ceil($i / 9) == $i / 9 ) {
        // 1 invalid email address.
        $edit['mail'] = 'This-is-an-invalid-email-address';
      }
      $edit['pass'] = user_password();
      $edit['status'] = 1;
      $edit['init'] = $edit['mail'];

      $account = user_save('', $edit);
      if (empty($account->uid)) {
        return FALSE;
      }

      // Store datas for checking.
      $all_datas[$account->uid] = array(
        'mail' => $edit['mail'],
        'init' => $edit['init'],
      );
    }
    $this->assertTrue(count($all_datas) == $n_users, format_string('@user users have been created successfully', array('@user' => $n_users)));
    // Test all email address.
    $this->assertTrue($this->dbee_all_users_valid($all_datas, FALSE, FALSE), 'All users are uncrypted and valid');

    // Count users
    $total_users = $no_update_user = 0;
    $query_users_no_update = db_query("SELECT uid, mail, init FROM {users} WHERE uid <> :uid", array(':uid' => 0));
    while ($row_users_no_update = $query_users_no_update->fetchAssoc()) {
      $total_users++;
      if (empty($row_users_no_update['mail']) && empty($row_users_no_update['init'])) {
        $no_update_user++;
      }
    }
    $updated_users = $total_users - $no_update_user;

    // Enable the dbee module.
    $edit0 = array('modules[Security][dbee][enable]' => 1);
    $this->drupalPost('admin/modules', $edit0, t('Save configuration'));
    $this->assertText(t('DataBase Email Encryption module enabled'), 'dbee module is enabled now');
    $variables_encrypt = array(
      '%crypted' => 'encrypted',
      '@updated_users' => $updated_users,
      '@total_users' => $total_users,
    );
    $this->assertRaw(t('All users email addresses have been %crypted (concerning @updated_users of @total_users users', $variables_encrypt), format_string('the dbee module claims to have %crypted all users (@updated_users of @total_users users)', $variables_encrypt));
    // Test all email address.
    $this->assertTrue($this->dbee_all_users_valid($all_datas), 'All users are encrypted and can be decrypted back');


    // Disable the dbee module.
    $edit1 = array('modules[Security][dbee][enable]' => FALSE);
    $this->drupalPost('admin/modules', $edit1, t('Save configuration'));
    $this->assertText('The configuration options have been saved.', 'dbee module is disabled now');
    $variables_decrypt = array(
      '%crypted' => 'decrypted',
      '@updated_users' => $updated_users,
      '@total_users' => $total_users,
    );
    $this->assertRaw(t('All users email addresses have been %crypted (concerning @updated_users of @total_users users', $variables_decrypt), format_string('the dbee module claims to have %crypted all users (@updated_users of @total_users users)', $variables_decrypt));
    // Test all email address.
    $this->assertTrue($this->dbee_all_users_valid($all_datas, FALSE), 'All users are uncrypted and valid');


    // Enable again dbee module (not the same that install module).
    $edit2 = array('modules[Security][dbee][enable]' => 1);
    $this->drupalPost('admin/modules', $edit2, t('Save configuration'));
    $this->assertText('DataBase Email Encryption module enabled', 'dbee module is enabled again');
    $this->assertRaw(t('All users email addresses have been %crypted (concerning @updated_users of @total_users users', $variables_encrypt), format_string('the dbee module claims to have %crypted all users (@updated_users of @total_users users)', $variables_encrypt));
    // Test all email address.
    $this->assertTrue($this->dbee_all_users_valid($all_datas), 'All users are encrypted and can be decrypted back');

    // Edit the AES encryption key.
    //$this->privileged_user = $this->drupalCreateUser( array('administer aes'));
    $this->drupalLogin($this->admin_aes_account);
    $new_key = aes_make_key();
    $edit3 = array(
      'aes_key' => $new_key,
      'aes_key_c' => $new_key,
    );
    $this->drupalPost('admin/config/system/aes', $edit3, t('Save'));
    // Test all email address.
    $this->assertTrue($this->dbee_all_users_valid($all_datas), 'All users are encrypted and can be decrypted back');
  }
}

class DbeeNewUsersTestCase extends DbeeWebTestCase {
  protected $admin_users_account;
  protected $existing_user;
  protected $to_delete_account;

  public static function getInfo() {
    return array(
      'name' => 'New/Delete users',
      'description' => 'Test the user registration, add a new user from the admin interface, create new user programmatically and an external user, delete a user, make sure the system do not validate duplicate emails.',
      'group' => 'DataBase Email Encryption',
    );
  }

  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('dbee');

    // Create a basic user with mail = 'example@example.com'. This email will
    // be used to testing if the system prevent from creating a new user with
    // an existing email.
    // Create a user, with sensitive case mail.
    $this->existing_user = $this->drupalCreateUser(array());
    // Reload the existing user to encrypt the email address.
    $this->existing_user = user_load($this->existing_user->uid, TRUE);

    $this->admin_users_account = $this->drupalCreateUser(array(
      'administer users',
      'access user profiles',
    ));
  }

  public function testNewUsers() {
    // Create new user form register page, then this new user try to edit it,
    // test sensitive case feature, test for dooblon.

    $this->drupalLogout(); // Anonymous user.
    // Try to create a new user from  the register form.
    $name = $this->randomName(8);
    $mail = $name . '@exAMple.com';
    $edit1 = array(
      'name' => $name,
      'mail' => $mail,
    );
    $this->drupalPost('user/register', $edit1, t('Create new account'));
    $this->assertRaw(t('Thank you for applying for an account. Your account is currently pending approval by the site administrator.<br />In the meantime, a welcome message with further instructions has been sent to your e-mail address.'), 'Anonymous user successfully registered.');
    $register_uid = db_query('SELECT uid FROM {users} WHERE name = :name', array(':name' => $name))->fetchField();
    // Test the email address.
    $data_register = array(
      $register_uid => array(
        'mail' => $mail,
        'init' => $mail,
      ),
    );
    $this->assertTrue($this->dbee_all_users_valid($data_register), 'The new user from the register page is encrypted and can be decrypted back');

    $this->drupalLogout(); // Anonymous user, optional.
    // Try to create a new user with an email already register, the system
    // should not validate it.
    $password  = user_password();
    $edit2 = array(
      'name' => $this->randomName(8),
      // Set email to 'STRING@EXAMPLE.COM'.
      'mail' => drupal_strtoupper($this->existing_user->mail),
    );
    $this->drupalPost('user/register', $edit2, t('Create new account'));
    $this->assertRaw(t('The e-mail address %email is already registered. <a href="@password">Have you forgotten your password?</a>', array('%email' => $edit2['mail'], '@password' => url('user/password'))), 'The module successfully detects when someone trying to register the same email twice, even if there is case conflict.');

    // Try to create a new user from the admin interface.
    $this->drupalLogin($this->admin_users_account);
    $password3 = user_password();
    $name3 = $this->randomName(8);
    $mail3 = $name3 . '@example.com';
    $edit3 = array(
      'name' => $name3,
      'mail' => $mail3,
      'pass[pass1]' => $password3,
      'pass[pass2]' => $password3,
    );
    $this->drupalPost('admin/people/create', $edit3, t('Create new account'));
    // Check if new user account has not been created.
    // From the user_profile_form_submit() function.
    $added_uid = db_query('SELECT uid FROM {users} WHERE name = :name', array(':name' => $name3))->fetchField();
    $this->assertRaw(t('Created a new user account for <a href="@url">%name</a>. No e-mail has been sent.', array('@url' => url('user/' . $added_uid), '%name' => $name3)), 'New user successfully added from the admin interface.');
    // Test the email address.
    $data_added = array(
      $added_uid => array(
        'mail' => $mail3,
        'init' => $mail3,
      ),
    );
    $this->assertTrue($this->dbee_all_users_valid($data_added), 'The new user from the admin interface is encrypted and can be decrypted back');

    // Try to create a new user with an email already register, the system
    // should not validate it.
    $password4 = user_password();
    $name4 = $this->randomName(8);
    // Set email to 'STRING@EXAMPLE.COM'.
    $mail4 = drupal_strtoupper($this->existing_user->mail);
    $edit4 = array(
      'name' => $name4,
      'mail' => $mail4,
      'pass[pass1]' => $password4,
      'pass[pass2]' => $password4,
    );
    $this->drupalPost('admin/people/create', $edit4, t('Create new account'));
    // Check if new user account has not been created.
    // From the user_account_form_validate() function.
    $this->assertRaw(t('The e-mail address %email is already taken.', array('%email' => $mail4)), 'The module successfully detects when someone trying to add a new user with an existing email, even if there is case conflict.');


    // Try to save a new user programatically.
    $password5 = user_password();
    $name5 = $this->randomName(8);
    $mail5 = $name5 . '@exAMple.com';
    $prog_user_array = array(
      'name' => $name5,
      'pass' => $password5, // note: do not md5 the password
      'mail' => $mail5,
      'status' => 1,
      'init' => $mail5,
    );
    $prog_user = user_save(NULL, $prog_user_array);
    // Test the email address.
    $data_prog = array(
      $prog_user->uid => $prog_user_array,
    );
    $this->assertTrue($this->dbee_all_users_valid($data_prog), 'The new user from php is encrypted and can be decrypted back');
    $this->assertEqual($prog_user->mail, $mail5, 'The mail value returned by the user_save() fonction is valid (decrypted)');
    $this->assertEqual($prog_user->init, $mail5, 'The init value returned by the user_save() fonction is valid (decrypted)');


    // Try to create a new external user.
    $name6 = $this->randomName(8);
    user_external_login_register($name6, '');
    // Retrieve the created user uid.
    $ext_user_uid = db_query('SELECT uid FROM {users} WHERE name = :name', array(':name' => $name6))->fetchField();
    if (!$ext_user_uid) {
      $this->assertTrue($ext_user_uid, 'registering a new external user fails');
    }
    else {
      $ext_user_array = array(
        $ext_user_uid => array(
          'mail' => '',
          'init' => $name6,
        ),
      );
      $this->assertTrue($this->dbee_all_users_valid($ext_user_array), 'The new external user is encrypted and can be decrypted back');

      // Check the user_load function
      $register_user = user_load($ext_user_uid, TRUE);
      $this->assertEqual($register_user->init, $name6, 'The init value from the new external user is still valid');
    }
  }

}

class DbeeEditUserTestCase extends DbeeWebTestCase {
  protected $edited_user_account;
  protected $existing_user;

  public static function getInfo() {
    return array(
      'name' => 'Edit users',
      'description' => 'Test the user mail edition.',
      'group' => 'DataBase Email Encryption',
    );
  }

  public function setUp() {
    parent::setUp('aes', 'dbee');
    // Create a basic user with mail = 'example@example.com'. This email will
    // be used to testing if the system prevent from creating a new user with
    // an existing email.
    // Create a user, with sensitive case mail.
    $this->existing_user = $this->drupalCreateUser(array());

    $this->edited_user_account = $this->drupalCreateUser(array());
    // drupalCreateUser() set an empty 'init' value. Fix it.
    $this->edited_user_account->init = $this->randomName() . '@example.com';
    user_save($this->edited_user_account);
    $this->drupalLogin($this->edited_user_account);
  }

  public function testEditUser() {

    $uid = $this->edited_user_account->uid;
    $pass = $this->edited_user_account->pass_raw;

    $data0 = array(
      $uid => array(
        'mail' => $this->edited_user_account->mail,
        'init' => $this->edited_user_account->init,
      ),
    );
    $this->assertTrue($this->dbee_all_users_valid($data0), 'The user is encrypted and can be decrypted back');
    // Check if the email is decrypted on the user edit page.
    $this->drupalGet('user/' . $uid . '/edit');
    $this->assertFieldById('edit-mail', $data0[$uid]['mail'], 'The email on the user edit page is available.');

    // Set the email to lowercase.
    $edit1 = array(
      'mail' => drupal_strtolower($data0[$uid]['mail']),
      'current_pass' => $pass,
    );
    $this->drupalPost('user/' . $uid . '/edit', $edit1, t('Save'));
    $data1 = $data0;
    $data1[$uid]['mail'] = $edit1['mail'];
    $this->assertTrue($this->dbee_all_users_valid($data1), 'The user mail is encrypted and can be decrypted back');

    // Check is email is still encryped after mail edit, Check case sensitive.
    // Email address :
    $edit3 = array(
      'mail' => $this->randomName() . '@EXAMple.com',
      'current_pass' => $pass,
    );
    $this->drupalPost('user/' . $uid . '/edit', $edit3, t('Save'));
    // Check user account on edition.
    $this->assertText(t('The changes have been saved.'), 'We successfully edit the user email address : to a new case sensitive email address :');
    // Check if the stored email is encrypted.
    $data3 = $data1;
    $data3[$uid]['mail'] = $edit3['mail'];
    $this->assertTrue($this->dbee_all_users_valid($data3), 'The user mail is encrypted and can be decrypted back');
    // Check if the email is decrypted on the user edit page.
    $this->drupalGet('user/' . $uid . '/edit');
    $this->assertFieldById('edit-mail', $edit3['mail'], 'email on the user edit page is still available AND case sensitive is respected.');

    // Check is email is still encryped after mail edit, back to a new
    // lowercase email address :
    $edit4 = array(
      'mail' => drupal_strtolower($this->randomName() . '@example.com'),
      'current_pass' => $pass,
    );
    $this->drupalPost('user/' . $uid . '/edit', $edit4, t('Save'));
    // Check user account on edition.
    $this->assertText(t('The changes have been saved.'), 'We successfully edit the user email address again : back to a new lower case email address :');
    // Check if the stored email is encrypted.
    $data4 = $data3;
    $data4[$uid]['mail'] = $edit4['mail'];
    $this->assertTrue($this->dbee_all_users_valid($data4), 'The user mail is encrypted and can be decrypted back');
    // Check if the email is decrypted on the user edit page.
    $this->drupalGet('user/' . $uid . '/edit');
    $this->assertFieldById('edit-mail', $edit4['mail'], 'The email on the user edit page is still available.');

    // Try to change the email address to an existing one from another user. The
    // system should not validate it.
    $edit5 = array(
      'mail' => drupal_strtoupper($this->existing_user->mail),
      'current_pass' => $pass,
    );
    $this->drupalPost('user/' . $uid . '/edit', $edit5, t('Save'));
    // Check if new user account has not been created.
    // From the user_account_form_validate() function.
    $this->assertRaw(t('The e-mail address %email is already taken.', array('%email' => $edit5['mail'])), 'The system successfully detects when someone trying to save the same email twice, even if there is case conflict.');
    // Check if the stored email is encrypted.
    $this->assertTrue($this->dbee_all_users_valid($data4), 'The user informations have not changed');
  }
}

class DbeeCoreFunctionsTestCase extends DrupalWebTestCase {
  protected $user_save_user;
  protected $user_load_user;
  protected $user_load_by_mail_user;

  public static function getInfo() {
    return array(
      'name' => 'Core functions',
      'description' => 'Verify if the user_save(), user_load(), user_load_by_mail() core functions are not altered.',
      'group' => 'DataBase Email Encryption',
    );
  }

  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp('dbee');
    $this->user_save_user = $this->drupalCreateUser(array());
    $this->user_load_user = $this->drupalCreateUser(array());
    $this->user_load_by_mail_user = $this->drupalCreateUser(array());
    // drupalCreateUser() set an empty 'init' value. Fix it.
    $this->user_save_user->init = $this->randomName() . '@example.com';
    user_save($this->user_save_user);
    $this->user_load_user->init = $this->randomName() . '@example.com';
    user_save($this->user_load_user);
    $this->user_load_by_mail_user->init = $this->randomName() . '@example.com';
    user_save($this->user_load_by_mail_user);
  }

  protected function testCoreFunctions() {
    // Test the user_save(), user_load(), user_load_by_mail() core functions.
    // Note : On the dbee 7.x-2.x : thoses tests will need to be edited because
    // the user object will store an extra variable !

    // Test the user_save().
    $user_save_edited = user_save($this->user_save_user, array());
    $this->assertEqual($user_save_edited->mail, $this->user_save_user->mail, 'the user_save() fonction is not altered by the dbee module');

    // Test the user_load().
    $user_load_edited = user_load($this->user_load_user->uid);
    $this->assertEqual($user_load_edited->mail, $this->user_load_user->mail, 'the user_load() fonction is not altered by the dbee module');

    // Test the user_load_by_mail().
    $user_load_by_mail_edited = user_load_by_mail($this->user_load_by_mail_user->mail);
    $this->assertTrue(($user_load_by_mail_edited && $user_load_by_mail_edited->mail == $this->user_load_by_mail_user->mail), 'the user_load_by_mail() fonction is not altered by the dbee module');
  }
}
