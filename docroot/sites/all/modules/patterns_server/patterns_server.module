<?php
/**
 * @file
 * Patterns Server module.
 */
module_load_include('inc', 'patterns_server', 'includes/variables');
module_load_include('inc', 'patterns_server', 'includes/db');
module_load_include('inc', 'patterns_server', 'includes/io');
module_load_include('inc', 'patterns_server', 'theme/theme');
module_load_include('inc', 'patterns_server', 'includes/utils');

/**
 * Implements hook_help().
 */
function patterns_server_help($path, $arg) {
  switch ($path) {
    case "admin/help#patterns_server":
      return '<p>' . t("help for patterns_server module") . '<p>';
      break;
  }
}

/**
 * Implements hook_permission().
 */
function patterns_server_permission() {
  return array(
    'access patterns_server' => array(
      'title' => t('Access permission for the patterns_server module'),
    ),
    'post patterns' => array(
      'title' => t('Post patterns through REST api'),
    ),
    'update patterns' => array(
      'title' => t('Update patterns through REST api'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * the path'callback function is _patterns_server_page().
 * second: configure form page.
 */
function patterns_server_menu() {
  $items = array();
  $allow_pulbish = variable_get('patterns_allow_publish', PATTERNS_ALLOW_PUBLISH_DEFAULT);
  if (patterns_utils_is_public_page_enabled() && $allow_pulbish) {
    $public_link = variable_get('patterns_public_url', '');
    $items[$public_link] = array(
      'title' => $public_link,
      'page callback' => '_patterns_server_page',
      'access arguments' => array('access patterns_server'),
      'type' => MENU_LOCAL_TASK,
    );
    $search_link = $public_link . "/search/%";
    $items[$search_link] = array(
      'title' => 'Search',
      'page callback' => '_patterns_search_page',
      'page arguments' => array(2),
      'access arguments' => array('access patterns_server'),
      'access callback' => TRUE,
      'type' =>  MENU_CALLBACK,
    );
    $post_link = $public_link . "/post";
    $items[$post_link] = array(
      'title' => 'patterns_server',
      'page callback' => 'patterns_server_incoming_patterns',
      'access arguments' => array('post patterns'),
      'type' => MENU_CALLBACK,
    );
    $download_link = $public_link . "/download";
    $items[$download_link] = array(
      'title' => 'Download Pattern Source',
      'page callback' => 'patterns_server_download',
      'access arguments' => array('get patterns'),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );
    $liked_link = $public_link . "/like";
    $items[$liked_link] = array(
      'title' => 'Rate certain Pattern',
      'page callback' => 'patterns_server_like',
      'access arguments' => array('get patterns'),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );
    $info_link = $public_link . "/info";
    $items[$info_link] = array(
      'title' => 'Information of one pattern',
      'page callback' => 'patterns_server_pattern_info',
      'access arguments' => array('get patterns'),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );
  }
  return $items;
}

/**
 * Returns the search form().
 */
function patterns_server_search_form($form, &$form_state, $args='') {
  $search_type = NULL;
  $search_content = NULL;
  if (!empty($args)) {
    $search_type = substr($args, 0, 1);
    $search_content = substr($args, 2);
  }
  $form['patterns_search']= array(
    '#type' => 'container',
    '#attributes' => array('class' => array('container-inline')),
  );
  $form['patterns_search']['search'] = array(
    '#type' => 'textfield',
    '#title' => t('Search'),
    '#title_display' => 'invisible',
    '#size' => 15,
    '#default_value' => ($args == '')?'':$search_content ,
    '#attributes' => array('title' => t('Enter the terms you wish to search for.'), 'class' => array('container-inline')),
  );
  $form['patterns_search']['selected'] = array(
    '#type' => 'select',
    '#title' => t('Selected'),
    '#title_display' => 'invisible',
    '#options' => array(
      0 => t('Title'),
      1 => t('Description'),
      2 => t('Author'),
      3 => t('UUID'),
      4 => t('Pid'),
    ),
    '#default_value' => ($args == '')?0:$search_type,
  );
  $form['patterns_search']['actions'] = array('#type' => 'actions');
  $form['patterns_search']['actions']['submit'] = array('#type' => 'submit', '#value' => t('Search'));
  $form['patterns_search']['#submit'][] = 'patterns_server_search_form_submit';
  return $form;
}

/**
 * Implements hook_form_submit().
 */
function patterns_server_search_form_submit($form, &$form_state) {
  if ($form_state['values']['search'] == '') {
    form_set_error('keys', t('Please enter some keywords.'));
  }
  $form_id = $form['form_id']['#value'];
  $form_state['redirect'] = variable_get('patterns_public_url', '') . '/search/' . trim($form_state['values']['selected']) . '_' . trim($form_state['values']['search']);
}

/**
 * Returns the form for comments about the patterns.
 */
function patterns_server_comment_form($form, &$form_state, $args='') {
  $form['patterns_comment']= array(
    '#type' => 'container',
    '#attributes' => array('class' => array('container-inline')),
  );
  $form['patterns_comment']['comment'] = array(
    '#type' => 'textarea',
    '#title' => t('comment'),
    '#title_display' => 'invisible',
    '#cols' => 60,
    '#rows' => 5,
    '#attributes' => array('title' => t('Enter the terms you wish to comment .'), 'class' => array('container-inline')),
  );
  $form['patterns_comment']['pid'] = array('#type' => 'value', '#value' => $args['pid']);
  $form['patterns_comment']['actions'] = array('#type' => 'actions');
  $form['patterns_comment']['actions']['submit'] = array('#type' => 'submit', '#value' => t('Comment'));
  $form['patterns_comment']['#submit'][] = 'patterns_server_comment_form_submit';
  return $form;
}

/**
 * Implements hook_form_submit().
 */
function patterns_server_comment_form_submit($form, &$form_state) {
  global $user;
  if ($form_state['values']['comment'] == '') {
    form_set_error('comments', t('Please enter some comment.'));
    return;
  }
  $form_state['values']['comment'] = check_plain($form_state['values']['comment']);
    db_insert('patterns_comments')
      ->fields(array( 'pid' => $form_state['values']['pid'], 'uid' => $user->uid, 'created' => time(), 'comment_content' => $form_state['values']['comment']))
      ->execute();
  global $base_url;
  $public_link = variable_get('patterns_public_url', '');
  drupal_goto($base_url . '/' . $public_link . '/info/' . $form_state['values']['pid']);
}

/**
 * Function called by hook_menu() to perform the search/get pattern information.
 */
function _patterns_server_page() {
  drupal_add_js(drupal_get_path('module', 'patterns_server') . '/js/patterns_server_page.js');
  $page = NULL;
  // Search box and patterns list.
  $result = patterns_server_get_pattern_from_db(10);
  $page .= theme('patterns_server_pattern_list', array('patterns' => $result, ));
  // Patter information
  $result = patterns_server_get_pattern_from_db(1);
  $page .= theme('patterns_server_one_pattern_info', array('patterns' => $result, ));
  return $page;
}

/**
 * Function called by hook_menu() to process the search.
 */
function _patterns_search_page($keys) {
  $search_type = substr($keys, 0, 1);
  $search_content = substr($keys, 2);
  $result = patterns_server_search_pattern($search_content, $search_type);
  $page_array = theme('patterns_server_pattern_list', array('patterns' => $result, 'searchkey' => $keys, ));
  $page_array .= '<div id="one_pattern_div"></div>';
  return $page_array;
}

/**
 * Function called by hook_menu() to peform the download of the file.
 */
function patterns_server_pattern_download($file, $filename) {
  drupal_add_http_header("Content-type", " text/plain; charset=utf-8");
  drupal_add_http_header("Content-Disposition", "attachment;filename=" . $filename);
  print $file;
  exit;
}

/**
 * Recodes the file.
 */
function patterns_server_download_recode($id) {
  $download_origin_times = db_select('patterns_server', 'ps')
    ->fields('ps', array('downloadnum', 'pid'))
    ->condition('pid', $id)
    ->execute()
    ->fetchAssoc();
  if (empty($download_origin_times['pid'])) {
    db_insert('patterns_server')
      ->fields(array( 'pid' => $id, 'downloadnum' => 1, 'liked' => 0))
      ->execute();
  }
  else{
    $download_origin_times['downloadnum']  += 1;
    db_update('patterns_server')
      ->condition('pid', $id)
      ->fields(array('downloadnum' => $download_origin_times['downloadnum']))
      ->execute();
  }
}

/**
 * Downloads the file.
 */
function patterns_server_download($id) {
  $result = patterns_server_get_pattern_pid_from_db($id);
  $result[0]->pattern = unserialize($result[0]->pattern);
  patterns_server_download_recode($id);
  patterns_server_pattern_download(file_get_contents($result[0]->file), $result[0]->name);
  exit;
}

/**
 * Increases the number of likes of the given pattern.
 */
function patterns_server_like($id) {
  global $user;
  $liked_origin = db_select('patterns_liked', 'pr')
    ->fields('pr', array('liked', 'pid', 'uid'))
    ->condition('pid', $id)
    ->condition('uid', $user->uid)
    ->execute()
    ->fetchAssoc();
  if (empty($liked_origin['pid'])) {
    db_insert('patterns_liked')
      ->fields(array( 'pid' => $id, 'uid' => $user->uid, 'liked' => 1, 'created' => time()))
      ->execute();
    $liked_origin = db_select('patterns_server', 'ps')
      ->fields('ps', array('liked', 'pid'))
      ->condition('pid', $id)
      ->execute()
      ->fetchAssoc();
    if (empty($liked_origin['pid'])) {
      db_insert('patterns_server')
      ->fields(array( 'pid' => $id, 'downloadnum' => 0, 'liked' => 1, ))
      ->execute();
    }
    else {
      $liked_origin['liked']  += 1;
      db_update('patterns_server')
      ->condition('pid', $id)
      ->fields(array('liked' => $liked_origin['liked']))
      ->execute();
    }
  }
  else {
    db_delete('patterns_liked')
      ->condition('pid', $id)
      ->condition('uid', $user->uid)
      ->execute();
    $liked_origin = db_select('patterns_server', 'ps')
      ->fields('ps', array('liked', 'pid'))
      ->condition('pid', $id)
      ->execute()
      ->fetchAssoc();
    $liked_origin['liked']  -= 1;
    db_update('patterns_server')
      ->condition('pid', $id)
      ->fields(array('liked' => $liked_origin['liked']))
      ->execute();
  }
  $public_link = variable_get('patterns_public_url', '');
  $info_link_id = $public_link . "/info/" . $id;
  drupal_goto($info_link_id);
}

/**
 * Returns the information of the pattern.
 */
function patterns_server_pattern_info($id) {
  $result = patterns_server_get_pattern_from_db($id, FALSE);
  $page = theme('patterns_server_one_pattern_info', array(
                    'patterns' => $result,
  ));
  return $page;
}