<?php

/**
 * @file
 */

/**
 * Implements hook_menu().
 */
function amocrm_widget_menu() {
  $items['amocrm_widget/widget-init'] = array(
    'title' => 'Embed widget initialization page',
    'page callback' => 'amocrm_widget_init_page',
    'access callback' => TRUE,
    'delivery callback' => 'amocrm_widget_empty_delivery_callback',
  );

  $items['amocrm_widget/widget-page'] = array(
    'title' => 'Embed widget page',
    'page callback' => 'amocrm_widget_ajax_page',
    'access callback' => TRUE,
    'delivery callback' => 'ajax_deliver',
  );

  $items['amocrm_widget/embed'] = array(
    'title' => 'Embed widget',
    'page callback' => 'amocrm_widget_embed_page',
    'access callback' => TRUE,
    'delivery callback' => 'amocrm_widget_empty_delivery_callback',
  );

  $items['amocrm_widget/form-submit'] = array(
    'title' => 'amoCRM form submit',
    'page callback' => 'amocrm_widget_form_submit',
    'access callback' => TRUE,
    'delivery callback' => 'ajax_deliver',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function amocrm_widget_theme($existing, $type, $theme, $path) {
  $base = array(
    'path' => $path . '/theme',
    'file' => 'theme.inc',
  );

  $items['amocrm_widget_list'] = $base + array(
    'variables' => array(
      'elements' => array(),
    ),
    'template' => 'amorcm-widget-list',
  );

  $items['amocrm_widget_page'] = $base + array(
    'variables' => array(
      'content' => array(),
    ),
    'template' => 'amorcm-widget-page',
  );

  $items['amocrm_widget_html'] = $base + array(
    'variables' => array(
      'content' => array(),
      'css' => '',
      'js' => '',
    ),
    'template' => 'amorcm-widget-html',
  );

  $items['amocrm_widget_preload'] = $base + array(
    'template' => 'amorcm-widget-preload',
  );

  $items['amocrm_widget_not_found'] = $base + array(
    'template' => 'amorcm-widget-not-found',
  );

  return $items;
}

/**
 * Page callback for amocrm_widget/widget-init.
 */
function amocrm_widget_init_page() {
  $params = drupal_get_query_parameters();

  if (!isset($params['api_key'])) {
    return;
  }

  // Attempt to login user by API key.
  _amocrm_widget_user_login_by_key($params['api_key']);

  drupal_add_js(drupal_get_path('module', 'amocrm_widget') . '/includes/amoCrmDrupal.js');
  drupal_add_js(drupal_get_path('module', 'amocrm_widget') . '/includes/amocrm_widget.js');
  drupal_add_js(drupal_get_path('module', 'amocrm_widget') . '/includes/amocrm_widget_preloader.js');

  $preloader = theme('amocrm_widget_preload');
  $output = theme('amocrm_widget_page', array('content' => $preloader));

  return $output;
}

/**
 * Page callback for amocrm_widget/widget-page.
 */
function amocrm_widget_ajax_page() {
  module_load_include('inc', 'amocrm_widget', 'amocrm_widget.ajax');

  $amocrm_page_type = !empty($_POST['page_type']) ? $_POST['page_type'] : '';
  $context = !empty($_POST['context']) ? $_POST['context'] : array();

  if (!empty($context['language'])) {
    _amocrm_widget_switch_language($context['language']);
  }

  // Allow modules to act upon widget list.
  $widgets_info = module_invoke_all('amocrm_widget_info');
  drupal_alter('amocrm_widget_info', $widgets_info);

  // To prepare information on each widget.
  $widget_items = array();
  foreach ($widgets_info as $widget) {
    foreach ($widget['links'] as $link_info) {
      if ($link_info['ammocrm_page'] == $amocrm_page_type) {
        $widget_items[$link_info['group']][] = $link_info;
      }
    }
  }

  if (!empty($widget_items)) {
    $output = theme('amocrm_widget_list', array('elements' => $widget_items));
  }
  else {
    $output = theme('amocrm_widget_not_found');
  }

  $commands[] = array(
    'command' => 'insert',
    'data' => $output,
    'selector' => '[id^=panel-amo-widget-preload]',
  );

  $commands[] = amocrm_widget_ajax_command_resize();

  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * Page callback for amocrm_widget/embed.
 * It is designed to display any internal page, the page indicates to a get parameter - url.
 */
function amocrm_widget_embed_page() {
  $params = drupal_get_query_parameters();

  if (!empty($params['language'])) {
    _amocrm_widget_switch_language($params['language']);
  }

  if (!isset($params['url'])) {
    return;
  }

  menu_set_active_item(ltrim($params['url'], '/'));

  return menu_execute_active_handler(NULL, FALSE);
}

/**
 * Packages and sends the result of a page callback to the browser as HTML.
 * To display only the page content, without other additional elements.
 */
function amocrm_widget_empty_delivery_callback($response) {
  if ($response == MENU_NOT_FOUND) {
    drupal_add_http_header('Status', '404 Not Found');
    drupal_set_title(t('Page not found'));
    print t('The requested page "@path" could not be found.', array('@path' => request_uri()));
  }

  $output = theme('amocrm_widget_html', array('content' => $response));

  print render($output);
}

/**
 * Implements hook_FORM_ID_alter().
 */
function amocrm_widget_form_user_profile_form_alter(&$form, &$form_state) {
  $account = $form['#user'];
  $accounts_api_keys = variable_get('amocrm_widget_user_api', array());

  $form['amocrm_user_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('amoCRM API key.'),
    '#default_value' => !empty($accounts_api_keys[$account->uid])
        ? $accounts_api_keys[$account->uid]
        : '',
    '#element_validate' => array('amocrm_widget_user_api_validate'),
  );

  array_unshift($form['#submit'], 'amocrm_widget_user_api_submit');
}

/**
 * Validation for user_profile_form.
 */
function amocrm_widget_user_api_validate($form, $form_state) {
  if (isset($form_state['values']['amocrm_user_api_key'])) {
    $user_uid = amocrm_widget_get_user_by_api_key($form_state['values']['amocrm_user_api_key']);

    if ($user_uid) {
      form_set_error('amocrm_user_api_key', t('This key is already in use by another user.'));
    }
  }
}

/**
 * Submit for user_profile_form.
 */
function amocrm_widget_user_api_submit($form, $form_state) {
  $account = $form['#user'];
  $accounts_api_keys = variable_get('amocrm_widget_user_api', array());
  $accounts_api_keys[$account->uid] = $form_state['values']['amocrm_user_api_key'];
  variable_set('amocrm_widget_user_api', $accounts_api_keys);
}

/**
 * Ger user uid by API key.
 */
function amocrm_widget_get_user_by_api_key($key) {
  $accounts_api_keys = variable_get('amocrm_widget_user_api', array());
  $user_id = array_search($key, $accounts_api_keys);

  return $user_id;
}

/**
 * Try user login by API key.
 */
function _amocrm_widget_user_login_by_key($api_key) {
  global $user;

  $user_uid = amocrm_widget_get_user_by_api_key($api_key);
  if ($user_uid != $user->uid) {
    $account = user_load($user_uid);

    if ($account) {
      $user = $account;
      user_login_finalize();

      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Submit for amoCRM forms.
 */
function amocrm_widget_form_submit() {
  $data = array();

  // Each widget should take care of the security of submitted data.
  $form_data = $_POST;

  _amocrm_widget_switch_language($form_data['language']);

  if (!empty($form_data['callback']) && function_exists($form_data['callback'])) {
    $data = $form_data['callback']($form_data);
  }

  return array(
    '#type' => 'ajax',
    '#commands' => $data,
  );
}

/**
 * Switch site language.
 */
function _amocrm_widget_switch_language($lang) {
  global $language;
  $language_list = language_list();

  if (!empty($form_data['language']) && !empty($language_list[$form_data['language']])) {
    $language = $language_list[$form_data['language']];
  }
}
