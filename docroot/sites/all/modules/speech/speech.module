<?php

/**
 * @file
 * The Speech module.
 */

/**
 * Implements hook_init().
 */
function speech_init() {
  //drupal_add_js(array('speech_selectors' => speech_selectors()), 'setting');
  //drupal_add_js(array('speech_show_enable' => speech_show_enable()), 'setting');
}

/**
 * Implements hook_permission().
 */
function speech_permission() {
  return array(
    'administer speech' => array(
      'title' => t('Administer speech'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function speech_menu() {
  $items = array();
  $items['admin/config/user-interface/speech'] = array(
    'title' => 'Speech recognition',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('speech_admin_form'),
    'access arguments' => array('administer speech'),
    'description' => 'Administer speech recognition.',
  );
  $items['speech/ajax/%/%'] = array(
    'page callback' => 'speech_ajax',
    'page arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer speech'),
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function speech_theme() {
  return array(
    'speech_enable_widget' => array(
      'variables' => array(
        'form_data' => array(),
      ),
    ),
  );
}

/**
 * Page callback for ajax.
 */
function speech_ajax($form_key, $value) {
  speech_enabled_set($form_key, ($value == 'true'));
  drupal_json_output($value);
  exit;
}

/**
 * Page callback for speech admin form.
 */
function speech_admin_form($form, &$form_state) {
  $speech_settings = speech_settings();

  if (isset($_GET['add-delta'])) {
    $new_delta = 0;
    while (isset($speech_settings[$new_delta])) {
      $new_delta++;
    }
  }
  elseif (empty($speech_settings)) {
    $new_delta = 0;
  }
  if (isset($new_delta)) {
    $speech_settings[$new_delta] = (object)array();
  }

  $form['show_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show the <em>enable speech recognition</em> widget.'),
    '#default_value' => variable_get('speech_show_enable', 1),
    '#description' => t(
      'Users permitted to administer speech will be able to easily enable' .
      ' speech on individual form inputs by using this UI tool.'
    ),
  );


  $form['speech']['#tree'] = TRUE;

  foreach ($speech_settings as $delta => $settings) {

    $default_name = isset($settings->name) ?
      $settings->name :
      (
        $delta == 0 ?
          t('default') :
          t('group !delta', array('!delta' => $delta))
      );

    $form['speech'][$delta] = array(
      '#type' => 'fieldset',
      '#title' => $default_name,
    );

    if (count($speech_settings) >= 3) {
      $form['speech'][$delta]['#collapsible'] = TRUE;
      if (!isset($new_delta) || $new_delta != $delta) {
        $form['speech'][$delta]['#collapsed'] = TRUE;
      }
    }

    $form['speech'][$delta]['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name'),
      '#default_value' => $default_name,
      '#size' => 60,
      '#maxlength' => 128,
      '#required' => TRUE,
      '#description' => t('A name for this group of settings.'),
    );

    $speech_enabled = speech_enabled_get_values_for_delta($delta);
    if (!empty($speech_enabled)) {
      $speech_enabled_options = array();
      $speech_enabled_default = array();
      foreach ($speech_enabled as $form_key => $value) {
        list($speech_enabled_form, $speech_enabled_path, $speech_enabled_delta) = explode('.', $form_key);
        $form_key_nerfed = str_replace('][', '>>', $form_key);
        $speech_enabled_options[$form_key_nerfed] =
          drupal_ucfirst(str_replace('_', ' ', $speech_enabled_form)) . ': ' . str_replace('][', ' &raquo; ', $speech_enabled_path);
        if ($value) {
          $speech_enabled_default[] = $form_key_nerfed;
        }
      }

      $form['speech'][$delta]['speech_enabled'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Enabled by the widget'),
        '#default_value' => $speech_enabled_default,
        '#options' => $speech_enabled_options,
        '#description' => t(
          'Here you can temporarily disable speech on inputs enabled by the <em>enable speech recognition</em> widget.'
        ),
      );
    }

    $form['speech'][$delta]['add'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Add speech recognition to all of these inputs'),
      '#default_value' => isset($settings->add) ? $settings->add : array(),
      '#options' => array(
        'textfield' => t('Plain textfield'),
        'autocomplete' => t('Autocomplete textfield'),
        'textarea' => t('Text area'),
      ),
      '#description' => t(
        'Speech recognition will be added to all of these types of inputs,' .
        ' regardless of where they appear.'
      ),
    );
/*
    $form['speech'][$delta]['selectors'] = array(
      '#title' => t('Add speech recognition to these DOM elements'),
      '#type' => 'textarea',
      '#description' => t(
         'Specify the CSS/jQuery selectors for the inputs.  You can specify one' .
         ' selector per line, or comma seperate on one line.  See' .
         ' <a href="!css_doc">CSS</a> and <a href="!jquery_doc">jQuery</a>' .
         ' documentation for syntax.',
         array(
           '!css_doc' => url(
             'http://www.w3.org/TR/CSS21/syndata.html',
             array(
               'fragment' => 'value-def-identifier',
               'external' => TRUE,
             )
           ),
           '!jquery_doc' => url(
             'http://api.jquery.com/category/selectors',
             array(
               'external' => TRUE,
             )
           ),
         )
       ),
      '#default_value' => isset($settings->selectors) ?
        implode("\n", $settings->selectors) : '',
      '#rows' => isset($settings->selectors) ?
        max(count($settings->selectors) + 2, 3) : 3,
    );
*/
    $form['speech'][$delta]['actions'] = array(
      '#type' => 'fieldset',
      '#title' => t('Actions'),
    );

    $form['speech'][$delta]['actions']['autosubmit'] = array(
      '#type' => 'checkbox',
      '#title' => t('Submit upon speech change'),
      '#default_value' => isset($settings->actions['autosubmit']) ? $settings->actions['autosubmit'] : 0,
      '#description' => t(
        'This will add JavaScript to submit the form when speech is used to enter input.'
      ),
    );

    if (count($speech_settings) > 1) {
      $form['speech'][$delta]['delete'] = array(
        '#type' => 'fieldset',
        '#title' => t('Delete this group of settings'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['speech'][$delta]['delete']['delete'] = array(
        '#type' => 'checkbox',
        '#title' => t('Delete this group of settings'),
        '#default_value' => 0,
        '#description' => t(
          'To delete this group of settings, check this box and save the configuration.'
        ),
      );
    }

  }

  if (!isset($_GET['add-delta'])) {
    $form['add_delta'] = array(
      '#markup' => l(t('Add new group of settings'), $_GET['q'], array('query' => array('add-delta' => 1))),
    );
  }

  $form['actions'] = array(
    '#type' => 'actions',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save speech configuration'),
  );

  return $form;
}

/**
 * Submit function for admin realm form.
 */
function speech_admin_form_submit($form, $form_state) {
  $speech = &$form_state['values']['speech'];
  foreach ($speech as $delta => $settings) {
    $delete = isset($settings['delete']['delete']) && !empty($settings['delete']['delete']);
    if (isset($settings['speech_enabled'])) {
      $speech_enabled = $settings['speech_enabled'];
      unset($settings['speech_enabled']);
      foreach ($speech_enabled as $form_key => $value) {
        $form_key = str_replace('>>', '][', $form_key);
        if ($delete) {
          speech_enabled_set($form_key, FALSE);
        }
        elseif ($value) {
          speech_enabled_set($form_key, TRUE);
        }
        else {
          // NULL keeps the form_key stored, whereas FALSE would delete it.
          speech_enabled_set($form_key, NULL);
        }
      }
    }
    if ($delete) {
      speech_settings($delta, FALSE);
    }
    else {
      speech_settings($delta, (object)$settings);
    }
  }
  $show_enable = &$form_state['values']['show_enable'];
  variable_set('speech_show_enable', $show_enable);


  drupal_clear_js_cache();

  drupal_goto($_GET['q']);
}

/**
 * Get and set speech settings.
 *
 * @param $delta
 *  If set will affect the delta setting.
 *  This is not used yet and is always 0.  In the future we may want to have
 *  different 'groups' of settings, so that's what this would be for.
 * @param $variable
 *  The settings to override the current $delta settings with.
 * @return
 *  The latest settings for the $delta, FALSE if no settings for $delta, or
 *  all settings if $delta not supplied.
 */
function speech_settings($delta = NULL, $variable = NULL) {
  $settings = variable_get('speech', array());
  if (!is_null($delta)) {
    if (!is_null($variable)) {
      // Array-ify the selectors if they are not an array.
      if (isset($variable->selectors) && !is_array($variable->selectors)) {
        $variable->selectors = explode("\n", $variable->selectors);
        // Trim each selector.
        foreach ($variable->selectors as &$selector) {
          $selector = trim($selector);
        }
        // Filter out blank values.
        $variable->selectors = array_filter($variable->selectors);
      }
      $settings[$delta] = $variable;
      if ($variable === FALSE) {
        unset($settings[$delta]);
      }
      variable_set('speech', $settings);
    }
    if (isset($settings[$delta])) {
      return $settings[$delta];
    }
    return FALSE;
  }
  return $settings;
}

/**
 * Get an array keyed by delta where each value is an array of selectors.
 */
 /*
function speech_selectors() {
  $selectors = array();
  $settings = speech_settings();
  foreach ($settings as $delta => &$delta_settings) {
    $selectors[$delta] = isset($delta_settings->selectors) ?
      $delta_settings->selectors : array();
    if (isset($delta_settings->add['textfield']) && $delta_settings->add['textfield']) {
      $selectors[$delta][] = 'input.form-text:not(.form-autocomplete)';
    }
    if (isset($delta_settings->add['autocomplete']) && $delta_settings->add['autocomplete']) {
      $selectors[$delta][] = 'input.form-autocomplete';
    }
    if (isset($delta_settings->add['textarea']) && $delta_settings->add['textarea']) {
      $selectors[$delta][] = 'textarea.form-textarea';
    }
  }
  return $selectors;
}
*/

/**
 * Implements hook_form_alter().
 */
function speech_form_alter(&$form, &$form_state, $form_id) {
  $settings = speech_settings();
  if (empty($settings)) {
    return;
  }
  $add_js = FALSE;

  if (user_access('administer speech') && variable_get('speech_show_enable', 1)) {
    $paths = array();
    speech_get_input_paths($form, $paths);
    if (!empty($paths)) {
      foreach ($paths as $path) {
        $var_name = 'form';
        $variable = &$$var_name;
        preg_match_all('/\[([^\]]*)\]/', '[' . $path . ']', $matches, PREG_PATTERN_ORDER);
        $element = &$variable;
        foreach ($matches[1] as $dimension) {
          $element = &$element[$dimension];
        }
        // Build forms.
        $form_data = array();
        foreach ($settings as $delta => $delta_settings) {
          $form_key = $form_id . '.' . $path . '.' . $delta;
          $form_data[$form_key] = $delta_settings->name;
        }
        // Theme appendage.
        $extra = theme(
          'speech_enable_widget',
          array(
            'form_data' => $form_data,
          )
        );
        // Attach appendage.
        $element['#field_suffix'] = isset($element['#field_suffix']) ? $extra . $element['#field_suffix'] : $extra;
      }
    }
  }

  $enabled_list = speech_enabled_get_by_form_id();
  $form_ids = array_keys($enabled_list);
  $iterate = array();
  if (in_array($form_id, $form_ids)) {
    $iterate[] = $enabled_list[$form_id];
  }

  $add = array();
  foreach ($settings as $delta => $delta_settings) {
    $delta_settings->add = array_filter($delta_settings->add);
    foreach ($delta_settings->add as $type) {
      $add[$type][] = $delta;
    }
  }
  if (!empty($add)) {
    $paths = array();
    speech_get_input_paths($form, $paths);
    foreach ($paths as $path) {
      $var_name = 'form';
      $variable = &$$var_name;
      preg_match_all('/\[([^\]]*)\]/', '[' . $path . ']', $matches, PREG_PATTERN_ORDER);
      $element = &$variable;
      foreach ($matches[1] as $dimension) {
        $element = &$element[$dimension];
      }
      if (isset($add[$element['#type']])) {
        foreach ($add[$element['#type']] as $delta) {
          $iterate[] = array('delta' => $delta, 'path' => $path);
        }
      }
    }
  }

  foreach ($iterate as $form_settings) {
    $delta = &$form_settings['delta'];
    $path = &$form_settings['path'];
    $var_name = 'form';
    $variable = &$$var_name;
    preg_match_all('/\[([^\]]*)\]/', '[' . $path . ']', $matches, PREG_PATTERN_ORDER);
    $element = &$variable;
    foreach ($matches[1] as $dimension) {
      $element = &$element[$dimension];
    }
    $element['#attributes']['speech'] = 'speech';
    $element['#attributes']['x-webkit-speech'] = 'x-webkit-speech';
    $element['#attributes']['class'][] = 'speech-delta-' . $delta;
    if ($settings[$delta]->actions['autosubmit']) {
      $element['#attributes']['class'][] = 'speech-autosubmit';
      $add_js = TRUE;
    }
    if (
      isset($element['#type']) &&
      $element['#type'] == 'textfield' &&
      isset($element['#autocomplete_path']) &&
      !empty($element['#autocomplete_path'])
    ) {
      $add_js = TRUE;
    }
  }

  if ($add_js) {
    drupal_add_js(drupal_get_path('module', 'speech') . '/speech.js');
  }
}

/**
 * Recursively get the input paths for applicable fields in form.
 */
function speech_get_input_paths($form, &$paths, $path = array()) {
  $children = element_children($form);
  $types = array(
    'textfield',
    'textarea',
  );
  foreach ($children as $child) {
    $parents = $path;
    $parents[] = $child;
    if (isset($form[$child]['#type']) && in_array($form[$child]['#type'], $types)) {
      $paths[] = implode('][', $parents);
    }
    speech_get_input_paths($form[$child], $paths, $parents);
  }
}

/**
 * Enable widget form.
 */
function speech_enable_widget_form($form, &$form_state, $form_data) {
  foreach ($form_data as $form_key => $form_label) {
    $default_value = speech_enabled_get($form_key);
    $form[$form_key] = array(
      '#type' => 'checkbox',
      '#title' => $form_label,
      '#default_value' => $default_value,
    );
    if ($default_value) {
      $form[$form_key]['#attributes']['class'][] = 'enabled';
    }
  }
  return $form;
}

/**
 * Theme an enable speech widget.
 */
function theme_speech_enable_widget($variables) {
  $form_data = &$variables['form_data'];

  drupal_add_css(drupal_get_path('module', 'speech') . '/speech.css');
  drupal_add_js(drupal_get_path('module', 'speech') . '/speech.js');

  $output = '<div class="speech-enable-widget">';
  $output .= '<a title="' . t('Enable speech recognition') . '" class="speech-enable-widget-show">' . t('Enable speech recognition') . '</a>';
  $output .= '<div class="speech-enable-widget-popup">';
  $output .= '<div class="speech-enable-widget-title">' . t('Enable speech recognition') . '</div>';
  $output .= drupal_render(drupal_get_form('speech_enable_widget_form', $form_data));
  $output .= '</div>';
  $output .= '</div>';

  return $output;
}

/**
 * Set or unset form_key as being speech enabled.
 */
function speech_enabled_set($form_key, $value) {
  $speech_enabled = variable_get('speech_enabled', array());
  if ($value !== FALSE) {
    // We need to set it.
    $speech_enabled[$form_key] = $value;
  }
  elseif ($value === FALSE && isset($speech_enabled[$form_key])) {
    // We need to unset it.
    unset($speech_enabled[$form_key]);
  }
  variable_set('speech_enabled', $speech_enabled);
}

/**
 * Get whether form_key has speech enabled.
 */
function speech_enabled_get($form_key) {
  $speech_enabled = variable_get('speech_enabled', array());
  if (isset($speech_enabled[$form_key])) {
    return $speech_enabled[$form_key];
  }
  return FALSE;
}

/**
 * Get all form ids that have speech enabled through the widget.
 *
 * Only gets enabled ones.
 */
function speech_enabled_get_by_form_id() {
  static $enabled_list = array();
  if (empty($enabled_list)) {
    $speech_enabled = variable_get('speech_enabled', array());
    foreach ($speech_enabled as $form_key => $value) {
      if ($value) {
        list($form_id, $path, $delta) = explode('.', $form_key);
        $enabled_list[$form_id] = array(
          'path' => $path,
          'delta' => $delta,
        );
      }
    }
  }
  return $enabled_list;
}

/**
 * Get all form keys that have been enabled through the widget.
 *
 * Gets enabled and temporarily disabled ones.
 */
function speech_enabled_get_values_for_delta($delta) {
  static $enabled_list = array();
  if (empty($enabled_list)) {
    $speech_enabled = variable_get('speech_enabled', array());
    foreach ($speech_enabled as $form_key => $value) {
      list($form_id, $path, $form_key_delta) = explode('.', $form_key);
      $enabled_list[$form_key_delta][$form_key] = $value;
    }
  }
  if (isset($enabled_list[$delta])) {
    return $enabled_list[$delta];
  }
  return array();
}