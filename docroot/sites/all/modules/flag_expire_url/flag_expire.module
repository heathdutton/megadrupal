<?php

/**
 * @file
 * Provides logic for cache expiration for flag.
 */

/**
 * Define the constant.
 */
define('FLAG_EXPIRE_EXPIRE_CUSTOM_URL', 1);

/**
 * Implements hook_form_FORM_ID_alter().
 */
function flag_expire_form_expire_admin_settings_form_alter(&$form, &$form_state, $form_id) {
  if (module_exists('flag')) {
    $form['tabs']['flag'] = array(
      '#type' => 'fieldset',
      '#title' => t('Flag expiration'),
      '#group' => 'tabs',
      '#weight' => 7,
    );
    $form['tabs']['flag']['expire']['expire_flag_custom'] = array(
      '#type' => 'checkbox',
      '#title' => t('Custom pages'),
      '#description' => t('Expire user-defined custom urls.'),
      '#default_value' => variable_get('expire_flag_custom', FALSE),
    );

    $form['tabs']['flag']['expire']['expire_flag_custom_pages'] = array(
      '#type' => 'textarea',
      '#title' => t('Enter custom URLs'),
      '#description' => t('Enter one relative URL per line. It can be the path of a node (e.g. !example1) or of any alias (e.g. !example2). However, it has to be the final URL, not a redirect (use the !link1 and !link2 modules).', array(
        '!example1' => '<strong>user/[user:uid]</strong>', '!example2' => '<strong>my/path</strong>',
        '!link1' => l(t('Global Redirect'), 'https://drupal.org/project/globalredirect'),
        '!link2' => l(t('Redirect'), 'https://drupal.org/project/redirect'),
        )) . '<br/>'
      . t('If you want to match a path with any ending, add "|wildcard" to the end of the line (see !link1 for details). Example: !example1 will match !example1a, but also !example1b, !example1c, etc.', array(
        '!link1' => l(t('function cache_clear_all'), 'https://api.drupal.org/api/drupal/includes%21cache.inc/function/cache_clear_all/7'),
        '!example1' => '<strong>my/path|wildcard</strong>', '!example1a' => '<strong>my/path</strong>',
        '!example1b' => '<strong>my/path/one</strong>',
        '!example1c' => '<strong>my/path/two</strong>',
        )) . '<br/>'
      . t('You may use tokens here.'),
      '#states' => array(
        'visible' => array(
          ':input[name="expire_flag_custom"]' => array('checked' => TRUE),
        ),
      ),
      '#default_value' => variable_get('expire_flag_custom_pages'),
    );
  }

  if (module_exists('token') && module_exists('flag')) {
    $form['tabs']['flag']['expire']['expire_flag_custom_pages']['#description'] .= ' ' .
      theme('token_tree_link', array('text' => t('View available tokens.'), 'token_types' => array('flag-action')));
  }

  return system_settings_form($form);
}


/**
 * Implements hook_flag_flag().
 */
function flag_expire_flag_flag($flag, $entity_id, $account, $flagging) {
  _flag_expire_url($flag, $entity_id);
}

/**
 * Implements hook_flag_unflag().
 */
function flag_expire_flag_unflag($flag, $entity_id, $account, $flagging) {
  _flag_expire_url($flag, $entity_id);
}

/**
 * Below helper purge the custom URL those are configured from cache expiration.
 *
 * @param object $flag
 *   Flag object which is action on an entity.
 * @param int $entity_id
 *   Entity id to which flag is applied.
 */
function _flag_expire_url($flag, $entity_id) {

  // To purge the esi count url from varnish.
  if (is_object($flag)) {
    $flag->entity_id = $entity_id;
    expire_execute_expiration('flag', $flag, FLAG_EXPIRE_EXPIRE_CUSTOM_URL);
  }
}
