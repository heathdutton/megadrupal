<?php
/**
 * @file
 * Code for the Wechat dkf.
 */
 
include_once 'wechat_dkf.features.inc';

/**
 * Implementation of hook_wechat_build_response_message().
 */
function wechat_dkf_wechat_build_response_message($response_message, $request_message) {
  //这里主要是实现用户绑定。
  //watchdog('wechat', '进入hook_wechat_build_response_message'); 
  $request_message_wrapper = entity_metadata_wrapper('wechat_request_message', $request_message);
  $response_message_wrapper = entity_metadata_wrapper('wechat_response_message', $response_message);
  if ($request_message->msg_type == 'text') {
	$response_message->msg_type = 'transfer_customer_service';
	$response_message_wrapper = entity_metadata_wrapper('wechat_response_message', $response_message);
    //指向哪一个客服
	$kfaccount = "";
	if (!empty($kfaccount)) {
	  $response_message_wrapper->field_kfaccount->set($kfaccount);
	}
  }
}

/**
 * Implementation of hook_wechat_response_message_obj_to_xml().
 */
function wechat_dkf_wechat_response_message_obj_to_xml(WechatResponseMessage $message){
  $message_wrapper = entity_metadata_wrapper('wechat_response_message', $message);
  $request_time = REQUEST_TIME;
  $to_user_name = $message_wrapper->to_user_name->value();
  $from_user_name = $message_wrapper->from_user_name->value();
  $result_str = "";
  if ($message->msg_type == 'transfer_customer_service') {
    $kfaccount = $message_wrapper->field_kfaccount->value();
	if (empty($kfaccount)) {
      $return_template = 
      "<xml>
        <ToUserName><![CDATA[%s]]></ToUserName>
        <FromUserName><![CDATA[%s]]></FromUserName>
        <CreateTime>%s</CreateTime>
        <MsgType><![CDATA[transfer_customer_service]]></MsgType>
      </xml>";
      $result_str = sprintf($return_template, $to_user_name, $from_user_name, $request_time);
    }
	else {
      $return_template = 
      "<xml>
        <ToUserName><![CDATA[%s]]></ToUserName>
        <FromUserName><![CDATA[%s]]></FromUserName>
        <CreateTime>%s</CreateTime>
        <MsgType><![CDATA[transfer_customer_service]]></MsgType>
        <TransInfo>
          <KfAccount><![CDATA[%s]]></KfAccount>
        </TransInfo>
      </xml>";
      $result_str = sprintf($return_template, $to_user_name, $from_user_name, $request_time, $kfaccount);
	}
  }
  
  return $result_str;
}

function wechat_dkf_get_kflist(){
  $kflist = array();
  $we_obj = wechat_init_obj_with_access_token();
  $kflist = $we_obj->getCustomServiceKFlist();
  //print debug($kflist);
  return $kflist;
}

function wechat_dkf_get_online_kflist(){
  $online_kflist = array();
  $we_obj = wechat_init_obj_with_access_token();
  $online_kflist = $we_obj->getCustomServiceOnlineKFlist();
  return $online_kflist;
}

function wechat_dkf_get_kf_session_wait(){
  $kf_session_wait = array();
  $we_obj = wechat_init_obj_with_access_token();
  $kf_session_wait = $we_obj->getKFSessionWait();
  return $kf_session_wait;
}

function wechat_dkf_add_kf_account($wechat_kf){
  $we_obj = wechat_init_obj_with_access_token();
  $ret = $we_obj->addKFAccount($wechat_kf->kf_account, $wechat_kf->nickname, $wechat_kf->password);
  return $ret;
}

function wechat_dkf_update_kf_account($wechat_kf){
  $we_obj = wechat_init_obj_with_access_token();
  $ret = $we_obj->updateKFAccount($wechat_kf->kf_account, $wechat_kf->nickname, $wechat_kf->password);
  return $ret;
}

function wechat_dkf_delete_kf_account($wechat_kf){
  $we_obj = wechat_init_obj_with_access_token();
  $ret = $we_obj->deleteKFAccount($wechat_kf->kf_account);
  return $ret;
}

/**
 * Implement hook_entity_info().
 */
function wechat_dkf_entity_info() {
  $return = array();

  $return['wechat_kf'] = array(
    'label' => t('Wechat kf'),
    'plural label' => t('Wechat kf'),
    'description' => t('Wechat kf.'),
    'entity class' => 'WechatKf',
    'controller class' => 'EntityAPIController',
    'base table' => 'wechat_kf',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
    ),
    'access callback' => 'wechat_dkf_wechatkf_access',
    'module' => 'wechat_kf',
	'metadata controller class' => 'WechatKfMetadataController',
    'bundles' => array(
	  'wechat_kf' => array(
	    'label' => t('Wechat kf'),
	    'admin' => array(
		  'path' => 'admin/wechat/config/kf',
		  'access arguments' => array('administer users'),
	    ),
	  ),
    ),
  );  
  
  return $return;
}

/**
 * Determines whether the given user has access to a wechat_kf.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $wechat_kf
 *   Optionally a wechat_user to check access for. If nothing is
 *   given, access for all wechat_user is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function wechat_dkf_wechatkf_access($op, $wechat_kf = NULL, $account = NULL) {
  if (user_access('administer wechat kf', $account)) {
    return TRUE;
  }
  return TRUE;
}

/**
 * Fetch a wechat kf. 
 *
 * @param $id
 *   wechat kf id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $wechat_user object or FALSE if it cannot be loaded.
 *
 * @see wechat_user_load_multiple()
 */
function wechat_dkf_wechatkf_load($id, $reset = FALSE) {
  $wechatkfs = wechat_dkf_wechatkf_load_multiple(array($id), array(), $reset);
  return reset($wechatkfs);
}


/**
 * Load multiple wechat kf based on certain conditions.
 *
 * @param $ids
 *   An array of wechat kf ids.
 * @param $conditions
 *   An array of conditions to match against the {wechat_user} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of wechat kf objects, indexed by id.
 *
 * @see entity_load()
 * @see wechat_dkf_wechatkf_load()
 */
function wechat_dkf_wechatkf_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('wechat_kf', $ids, $conditions, $reset);
}

/**
 * Deletes a wechat kf.
 */
function wechat_dkf_wechatkf_delete(WechatKf $wechat_kf) {
  $wechat_kf->delete();
}


/**
 * Delete multiple wechat kfs.
 *
 * @param $ids
 *   An array of wechat kf ids.
 */
function wechat_dkf_wechatkf_delete_multiple(array $ids) {
  entity_get_controller('wechat_kf')->delete($ids);
}


/**
 * Create a wechat kf.
 */
function wechat_dkf_wechatkf_create($values = array()) {
  return new WechatKf($values);
}


/**
 * Saves a wechat kf to the database.
 *
 * @param $wechat_kf
 *   The wechat kf object.
 */
function wechat_dkf_wechatkf_save(WechatKf $wechat_kf) {
  return $wechat_kf->save();
}

/**
 * URI callback for wechat_kf
 */
function wechat_dkf_wechatkf_uri(WechatKf $wechat_kf) {
  return array(
    'path' => 'wechat-kf/' . $wechat_kf->id,
  );
}

/**
 * The class used for wechat_kf entities
 */
class WechatKf extends Entity {
  /**
   * The id of wechat_kf.
   *
   * @var integer
   */
  public $id;
  
  /**
   * The kf_account of wechat kf.
   *
   * @var string
   */
  public $kf_account;
  
  /**
   * The nickname of wechat kf.
   *
   * @var string
   */
  public $nickname;
  
  /**
   * The kf_id of wechat kf.
   *
   * @var string
   */
  public $kf_id;  
  
  /**
   * The password of wechat kf.
   *
   * @var string
   */
  public $password;   
  
  public function __construct($values = array()) {
    parent::__construct($values, 'wechat_kf');
  }

  protected function defaultLabel() {
    return $this->kf_account;
  }

  protected function defaultUri() {
    return array('path' => 'wechat-kf/' . $this->id);
  }
  
  public function save() {
    parent::save();
  }
}

/**
 * Implementation of hook_menu().
 */
function wechat_dkf_menu() {
  $items['admin/wechat/config/kf/add'] = array(
    'title' => '添加客服',
    'description' => '添加客服.',
    'access arguments' => array('administer wechat kf'),
    'page callback' => 'wechat_dkf_wechatkf_add',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'wechat_dkf.admin.inc',
  );
  $items['admin/wechat/config/kf'] = array(
    'title' => '微信客服',
    'description' => '微信客服.',
    'access arguments' => array('administer wechat kf'),
    'page callback' => 'wechat_dkf_wechatkf_callback',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'wechat_dkf.admin.inc',
  ); 
  $items['admin/wechat/config/kf/edit/%'] = array(
    'title' => '编辑客服',
    'description' => '编辑客服.',
    'access arguments' => array('administer wechat kf'),
    'page callback' => 'wechat_dkf_wechatkf_edit',
    'type' => MENU_NORMAL_ITEM,
    'file' => 'wechat_dkf.admin.inc',
  );  
  return $items;
}
