<?php
// $Xx: uts.module,v 1.53 2009/05/26 15:58:24 boombatower Exp $
/**
 * @file
 * Provide general Usability Testing Suite functionality and module implementation.
 *
 * Copyright 2008 by Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 */

/**
 * The content type for a UTS Study.
 */
define('UTS_STUDY', 'uts_study');

/**
 * The content type for a UTS Task.
 */
define('UTS_TASK', 'uts_task');

/**
 * The content type for a UTS Environment.
 */
define('UTS_ENVIRONMENT', 'uts_environment');

/**
 * Study status: in development.
 */
define('UTS_STUDY_STATUS_IN_DEVELOPMENT', 1);

/**
 * Study status: active.
 */
define('UTS_STUDY_STATUS_ACTIVE', 2);

/**
 * Study status: closed.
 */
define('UTS_STUDY_STATUS_CLOSED', 3);

/**
 * Task Completion.
 */
define('UTS_STUDY_TYPE_TASK', 1);

/**
 * Audience role: end user.
 */
define('UTS_STUDY_AUDIENCE_ROLE_USER', 1);

/**
 * Audience role: designer.
 */
define('UTS_STUDY_AUDIENCE_ROLE_DESIGNER', 2);

/**
 * Audience role: programer.
 */
define('UTS_STUDY_AUDIENCE_ROLE_PROGRAMER', 3);

/**
 * Audience experience level: beginner.
 */
define('UTS_STUDY_AUDIENCE_LEVEL_BEGINNER', 1);

/**
 * Audience experience level: intermediate.
 */
define('UTS_STUDY_AUDIENCE_LEVEL_INTERMEDIATE', 2);

/**
 * Audience experience level: advanced.
 */
define('UTS_STUDY_AUDIENCE_LEVEL_ADVANCED', 3);

require_once drupal_get_path('module', 'uts') . '/uts.data.inc';
require_once drupal_get_path('module', 'uts') . '/uts.environment.inc';
require_once drupal_get_path('module', 'uts') . '/uts.node.inc';
require_once drupal_get_path('module', 'uts') . '/uts.participate.inc';
require_once drupal_get_path('module', 'uts') . '/uts.session.inc';
require_once drupal_get_path('module', 'uts') . '/uts.help.inc';

/**
 * Implementation of hook_menu().
 */
function uts_menu() {
  $items = array();

  // Participant items.
  $items['uts'] = array(
    'title' => '1 - Choose a study',
    'description' => 'Description of usability testing and study selection.',
    'page callback' => 'uts_participate_list',
    'access arguments' => array('participate in study'),
    'file' => 'uts.pages.inc',
    'type' => MENU_CALLBACK
  );
  $items['uts/environment/%'] = array(
    'title' => '2 - Create environment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uts_participate_create_environment_form', 2),
    'access arguments' => array('participate in study'),
    'file' => 'uts.pages.inc',
    'type' => MENU_CALLBACK
  );
  $items['uts/session/%'] = array(
    'title' => '3 - Start session',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uts_participate_start_session_form', 2),
    'access arguments' => array('participate in study'),
    'file' => 'uts.pages.inc',
    'type' => MENU_CALLBACK
  );
  $items['uts/thanks'] = array(
    'title' => 'Thanks for participating',
    'page callback' => 'uts_participate_thanks',
    'access arguments' => array('access content'),
    'file' => 'uts.pages.inc',
    'type' => MENU_CALLBACK
  );
  $items['uts/thanks/return'] = array(
    'title' => 'Thanks for participating',
    'page callback' => 'uts_participate_thanks',
    'page arguments' => array(TRUE),
    'access arguments' => array('access content'),
    'file' => 'uts.pages.inc',
    'type' => MENU_CALLBACK
  );

  // Internal environmental callback.
  $items['uts/environment/%/%'] = array(
    'title' => 'Environment',
    'description' => 'Perform environment processes.',
    'page callback' => 'uts_environment_callback',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['uts/environment/%/%/%'] = array(
    'title' => 'Environment',
    'description' => 'Perform environment processes.',
    'page callback' => 'uts_environment_callback',
    'page arguments' => array(2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );

  // General items.
  $items['admin/uts'] = array(
    'title' => 'Usability testing suite',
    'description' => 'Configure suite, create studies, manage data, and analyze results.',
    'page callback' => 'uts_dashboard',
    'access arguments' => array('access administration pages'),
    'file' => 'uts.pages.inc'
  );
  $items['admin/uts/configuration'] = array(
    'title' => 'Configuration',
    'description' => 'Configure usability testing suite.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uts_settings'),
    'access arguments' => array('access administration pages')
  );
  $items['admin/uts/invite'] = array(
    'title' => 'Invite',
    'description' => 'Send e-mails inviting people to participate in a study.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uts_invite'),
    'access arguments' => array('access administration pages'),
    'file' => 'uts.pages.inc'
  );

  // Study related items.
  $items['admin/uts/studies'] = array(
    'title' => 'Studies',
    'description' => 'Manage studies: create, edit, copy, and delete studies.',
    'page callback' => 'uts_studies',
    'access arguments' => array('manage studies')
  );
  $items['admin/uts/studies/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );
  $items['admin/uts/studies/add'] = array(
    'title' => 'Add',
    'page callback' => 'node_add',
    'page arguments' => array('uts-study'),
    'access callback' => 'node_access',
    'access arguments' => array('create', 'uts-study'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'weight' => -9
  );
  $items['admin/uts/studies/%node/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'node_page_edit',
    'page arguments' => array(3),
    'access callback' => 'node_access',
    'access arguments' => array('update', 'uts-study'),
    'type' => MENU_CALLBACK,
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'weight' => -8
  );
  $items['admin/uts/studies/%node/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uts_delete_confirm', 3),
    'access callback' => 'node_access',
    'access arguments' => array('delete', 'uts-study'),
    'type' => MENU_CALLBACK,
    'file' => 'uts.pages.inc',
    'weight' => -7
  );

  // General task management.
  $items['admin/uts/tasks'] = array(
    'title' => 'Tasks',
    'description' => 'Manage tasks: create, edit, copy, and delete tasks.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uts_tasks'),
    'access arguments' => array('manage studies'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/uts/tasks/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );
  $items['admin/uts/tasks/add'] = array(
    'title' => 'Add',
    'page callback' => 'node_add',
    'page arguments' => array('uts-task'),
    'access callback' => 'node_access',
    'access arguments' => array('create', 'uts-task'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'weight' => -9
  );
  $items['admin/uts/tasks/import'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uts_import_tasks'),
    'access arguments' => array('manage studies'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'uts.pages.inc',
    'weight' => -8
  );

  // Tasks related to a study.
  $items['admin/uts/tasks/%'] = array(
    'title' => 'Tasks',
    'description' => 'View tasks.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uts_tasks', 3),
    'access arguments' => array('manage studies'),
    'type' => MENU_CALLBACK
  );
  $items['admin/uts/tasks/%/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );
  $items['admin/uts/tasks/%/add'] = array(
    'title' => 'Add',
    'page callback' => 'node_add',
    'page arguments' => array('uts-task'),
    'access callback' => 'node_access',
    'access arguments' => array('create', 'uts-task'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'weight' => -9
  );
  $items['admin/uts/tasks/%/import'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uts_import_tasks', 3),
    'access arguments' => array('manage studies'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'uts.pages.inc',
    'weight' => -8
  );

  // General task wrappers.
  $items['admin/uts/tasks/%node/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'node_page_edit',
    'page arguments' => array(3),
    'access callback' => 'node_access',
    'access arguments' => array('update', 'uts-task'),
    'type' => MENU_CALLBACK,
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'weight' => -8
  );
  $items['admin/uts/tasks/%node/detach'] = array(
    'title' => 'Detach',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uts_task_detach_confirm', 3),
    'access arguments' => array('manage studies'),
    'type' => MENU_CALLBACK,
    'file' => 'uts.pages.inc',
    'weight' => -7
  );
  $items['admin/uts/tasks/%node/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uts_delete_confirm', 3),
    'access callback' => 'node_access',
    'access arguments' => array('delete', 'uts-task'),
    'type' => MENU_CALLBACK,
    'file' => 'uts.pages.inc',
    'weight' => -6
  );

  // Analysis related items.
  $items['admin/uts/analyze'] = array(
    'title' => 'Analyze',
    'description' => 'Analyze data collected from studies.',
    'page callback' => 'uts_analysis_list',
    'access arguments' => array('manage studies'),
    'file' => 'uts.analysis.inc',
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/uts/analyze/%'] = array(
    'title' => 'Analyze',
    'description' => 'Analyze data collected from studies.',
    'page callback' => 'uts_analysis_list_sessions',
    'page arguments' => array(3),
    'access arguments' => array('manage studies'),
    'file' => 'uts.analysis.inc',
    'type' => MENU_CALLBACK
  );
  $items['admin/uts/analyze/%/sessions'] = array(
    'title' => 'Sessions',
    'description' => 'Manage sessions',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );

  $items['admin/uts/analyze/%/%'] = array(
    'title' => 'Analyze',
    'description' => 'Analyze data collected from studies.',
    'page callback' => 'uts_analysis_session_details',
    'page arguments' => array(3, 4),
    'access arguments' => array('manage studies'),
    'file' => 'uts.analysis.inc',
    'type' => MENU_CALLBACK
  );
  $items['admin/uts/analyze/%/%/sessions'] = array(
    'title' => 'Sessions',
    'description' => 'Manage sessions',
    'page callback' => 'uts_analysis_sessions_goto',
    'page arguments' => array(3),
    'access arguments' => array('manage studies'),
    'file' => 'uts.analysis.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -10
  );
  $items['admin/uts/analyze/%/%/details'] = array(
    'title' => 'Details',
    'description' => 'Manage sessions',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -9
  );

  $items['admin/uts/analyze/%/%/destroy'] = array(
    'title' => 'Destroy session',
    'description' => 'Remove session and related data.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uts_analysis_destroy_confirm', 4),
    'access arguments' => array('manage studies'),
    'file' => 'uts.analysis.inc',
    'type' => MENU_CALLBACK
  );

  // Generate local tasks for plug-ins.
  $bases = array('admin/uts/analyze/%' => FALSE, 'admin/uts/analyze/%/%' => TRUE);
  $analysis_plugins = uts_data_analysis_list();
  $collection_plugins = uts_data_collection_list();
  foreach ($bases as $base => $session_id) {
    foreach ($analysis_plugins as $module => $modes) {
      // Create task for data collection module.
      $items["$base/$module"] = array(
        'title' => $collection_plugins[$module]['name'],
        'description' => 'Analyze data for ' . $collection_plugins[$module]['name'],
        'page callback' => 'uts_analysis',
        'page arguments' => array(3, 4, 5), // Althought arg[5] will never be set it serves as a placeholder.
        'access arguments' => array('manage studies'),
        'file' => 'uts.analysis.inc',
        'type' => MENU_LOCAL_TASK
      );
      if ($session_id) {
        // Shift arguements to make room for session ID.
        $items["$base/$module"]['page arguments'][1]++;
        $items["$base/$module"]['page arguments'][2]++;
        $items["$base/$module"]['page arguments'][] = 4;
      }

      // Create sub-task for each analysis mode.
      $first = TRUE;
      $i = 0;
      foreach ($modes as $mode) {
        $items["$base/$module/$mode"] = array(
          'title' => $mode,
          'description' => $mode,
          'page callback' => 'uts_analysis',
          'page arguments' => array(3, 4, 5),
          'access arguments' => array('manage studies'),
          'file' => 'uts.analysis.inc',
          'type' => MENU_LOCAL_TASK,
          'weight' => $i
        );
        // Action callback.
        $items["$base/$module/$mode/%"] = array(
          'title' => $mode,
          'description' => $mode,
          'page callback' => 'uts_analysis_action',
          'page arguments' => array(3, 4, 5, 6),
          'access arguments' => array('manage studies'),
          'file' => 'uts.analysis.inc',
          'type' => MENU_CALLBACK
        );
        if ($session_id) {
          // Shift arguements to make room for session ID.
          $items["$base/$module/$mode"]['page arguments'][1]++;
          $items["$base/$module/$mode"]['page arguments'][2]++;
          $items["$base/$module/$mode"]['page arguments'][] = 4;

          $items["$base/$module/$mode/%"]['page arguments'][1]++;
          $items["$base/$module/$mode/%"]['page arguments'][2]++;
          $items["$base/$module/$mode/%"]['page arguments'][3]++;
          $items["$base/$module/$mode/%"]['page arguments'][] = 4;
        }
        if ($first) {
          $items["$base/$module/$mode"]['type'] = MENU_DEFAULT_LOCAL_TASK;
          $first = FALSE;
        }
        $i++;
      }
    }
  }

  // Base environment items.
  $items['admin/uts/environments'] = array(
    'title' => 'Environments',
    'description' => 'Setup base environments to be used as the starting point for studies.',
    'page callback' => 'uts_environments',
    'access arguments' => array('manage studies'),
    'file' => 'uts.pages.inc'
  );
  $items['admin/uts/environments/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );
  $items['admin/uts/environments/add'] = array(
    'title' => 'Add',
    'page callback' => 'node_add',
    'page arguments' => array('uts-environment'),
    'access callback' => 'node_access',
    'access arguments' => array('create', 'uts-environment'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'weight' => -9
  );
  $items['admin/uts/environments/%node/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'node_page_edit',
    'page arguments' => array(3),
    'access callback' => 'node_access',
    'access arguments' => array('update', 'uts-environment'),
    'type' => MENU_CALLBACK,
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'weight' => -7
  );
  $items['admin/uts/environments/%node/open'] = array(
    'title' => 'Open',
    'page callback' => 'uts_environment_open',
    'page arguments' => array(3),
    'access arguments' => array('manage studies'),
    'type' => MENU_CALLBACK,
    'weight' => -6
  );
  $items['admin/uts/environments/%node/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uts_delete_confirm', 3),
    'access callback' => 'node_access',
    'access arguments' => array('delete', 'uts-environment'),
    'type' => MENU_CALLBACK,
    'file' => 'uts.pages.inc',
    'weight' => -5
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function uts_menu_alter(&$callbacks) {
  // Disable node/add links.
  $callbacks['node/add/uts-study']['access callback'] = FALSE;
  $callbacks['node/add/uts-task']['access callback'] = FALSE;
  $callbacks['node/add/uts-environment']['access callback'] = FALSE;
}

/**
 * Implementation of hook_perm().
 */
function uts_perm() {
  return array('manage studies', 'participate in study');
}

/**
 * Implementation of hook_theme().
 */
function uts_theme() {
  return array(
    'uts_tasks' => array(
      'arguments' => array('form' => NULL)
    ),
    'uts_form_data_collection' => array(
      'arguments' => array('form' => NULL)
    ),
    'uts_participate_start_form_data_collection' => array(
      'arguments' => array('form' => NULL)
    ),
    'uts_dashboard_studies' => array(
      'arguments' => array('header' => NULL, 'rows' => NULL),
      'file' => 'uts.pages.inc'
    ),
    'uts_progress' => array(
      'arguments' => array('progress' => 0, 'total' => 100),
      'file' => 'uts.pages.inc'
    )
  );
}

/**
 * UTS settings form.
 */
function uts_settings(&$form_state) {
  $form = array();
  $form['admin_login'] = array(
    '#type' => 'fieldset',
    '#title' => t('Admin login'),
    '#description' => t('The admin login information used to populate the first user when an environment
                         is created. If a study uses a base environment than this will not take effect,
                         but when creating a base environment or a study with no base environment specified
                         then the admin user will have the following information.')
  );
  $form['admin_login']['uts_environment_admin_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => variable_get('uts_environment_admin_name', 'admin')
  );
  $form['admin_login']['uts_environment_admin_pass'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => variable_get('uts_environment_admin_pass', 'utsadmin')
  );

  $form['email'] = array(
    '#type' => 'fieldset',
    '#title' => t('E-mail text'),
    '#description' => t('Customize various e-mail texts. Users will only receive e-mails if they are logged in
                         as a registered user. You can set the <i>participate in study</i> permission to allow
                         only registered users to participate.')
  );

  // Describe the available variables.
  $header = array(t('Variable'), t('Description'));
  $rows = array();
  $rows[] = array('!username', t('Username of the current user.'));
  $rows[] = array('!name', t('The name specified through the format on the <a href="@invite">invite</a> page.
                              If only the e-mail address is found than the name will be set to the e-mail address.',
                              array('@invite' => url('admin/uts/invite'))));
  $rows[] = array('!site', t('Title of the base site. The title used in the site you are currently viewing.'));
  $rows[] = array('!mailto', t('The e-mail address of the user account at the time the e-mail is sent. For invites
                                this will be the user you run the invite page as. For session info it will be
                                the user that starts the session.'));
  $rows[] = array('!date', t('Current date using the <em>medium</em> format.'));
  $rows[] = array('!register', t('Registration page url.'));
  $rows[] = array('!participate', t('URL to participation page. Will specify a study if in the context of the e-mail.'));
  $rows[] = array('!session_id', t('The ID of the generated session.'));

  $form['email']['variables'] = array(
    '#type' => 'item',
    '#value' => theme('table', $header, $rows)
  );

  // Generate base email form items for each key.
  $keys = array('invite', 'session_info');
  foreach ($keys as $key) {
    $form['email'][$key] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE
    );
    $form['email'][$key]['uts_mail_' . $key . '_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => uts_mail_text($key . '_subject'),
      '#maxlength' => 180
    );
    $form['email'][$key]['uts_mail_' . $key . '_body'] = array(
      '#type' => 'textarea',
      '#title' => t('Body'),
      '#default_value' => uts_mail_text($key . '_body'),
      '#rows' => 15
    );
  }

  // Set title and description for each email key.
  $form['email']['invite']['#title'] = t('Invite');
  $form['email']['invite']['#description'] = t('Customize the invite message.
                                                Available varibles: !name, !site, !mailto, !date, !register,
                                                !participate');

  $form['email']['session_info']['#title'] = t('Session info');
  $form['email']['session_info']['#description'] = t('Customize the message sent when participant creates a session.
                                                     Available varibles: !username, !site, !mailto, !date, !register,
                                                     !participate, !session_id.');

  return system_settings_form($form);
}

/**
 * Create a table to list all the studies.
 *
 * @return string HTML output.
 */
function uts_studies() {
  $header = array(t('Title'), t('Status'), t('Task count'), t('Completed sessions'), t('Operations'));
  $rows = array();

  $studies = uts_studies_load();
  foreach ($studies as $study) {
    $row = array();
    $row[] = $study->title;
    $row[] = uts_get_study_status($study->study_status);
    $row[] = count(uts_tasks_load($study->nid));
    $row[] = $study->complete_session_count = count(uts_session_load_all($study->nid, TRUE));

    $operations = uts_study_operations($study);
    $row[] = uts_render_operations($operations);

    $rows[] = $row;
  }

  if (empty($rows)) {
    return t('No studies to display.');
  }
  return theme('table', $header, $rows);
}

/**
 * Get an array containing the study operation links.
 *
 * @param $study Study object.
 * @return Array of links.
 */
function uts_study_operations($study) {
  $links = array();
  $links['study_edit'] = array(
    'title' => t('edit'),
    'href' => "admin/uts/studies/$study->nid/edit"
  );
  $links['study_manage_tasks'] = array(
    'title' => t('manage tasks'),
    'href' => "admin/uts/tasks/$study->nid"
  );
  if ($study->complete_session_count > 0) {
    $links['study_analyze'] = array(
      'title' => t('analyze'),
      'href' => "admin/uts/analyze/$study->nid"
    );
  }
  $links['study_delete'] = array(
    'title' => t('delete'),
    'href' => "admin/uts/studies/$study->nid/delete"
  );
  return $links;
}

/**
 * Load all the studies.
 *
 * @param boolean $status Require the study to be a specific status. NULL for any status.
 * @return array List of study node objects.
 */
function uts_studies_load($status = NULL) {
  if ($status !== NULL) {
    $result = db_query('SELECT nid
                        FROM {uts_study}
                        WHERE study_status = %d', $status);
  }
  else {
    $result = db_query('SELECT nid
                        FROM {uts_study}');
  }
  $studies = array();
  while ($nid = db_result($result)) {
    $studies[] = node_load($nid);
  }
  return $studies;
}

/**
 * Create a form to list all the tasks related to a study and their weights.
 *
 * @param int $study_nid Study NID tasks are related to.
 */
function uts_tasks(&$form_state, $study_nid = NULL) {
  $form = array();
  if ($study_nid) {
    uts_set_title($study_nid);

    $form['study_nid'] = array(
      '#type' => 'value',
      '#value' => $study_nid
    );
  }

  $tasks = uts_tasks_load($study_nid);
  foreach ($tasks as $task) {
    $row = array();
    $row['title'] = array(
      '#type' => 'item',
      '#title' => t('Title'),
      '#value' => $task->title
    );
    $row['description'] = array(
      '#type' => 'item',
      '#title' => t('Description'),
      '#value' => $task->body
    );
    $row['study_title'] = array(
      '#type' => 'item',
      '#title' => t('Parent study'),
      '#value' => ''
    );
    if ($task->study_nid) {
      $study = node_load($task->study_nid);
      $row['study_title']['#value'] = l($study->title, 'node/' . $study->nid);
    }

    $operations = uts_task_operations($task);
    $row['operations'] = array(
      '#type' => 'item',
      '#title' => t('Operations'),
      '#value' => uts_render_operations($operations)
    );

    $row['weight'] = array(
      '#type' => 'textfield',
      '#name' => 'weight[' . $task->nid . ']',
      '#title' => t('Weight'),
      '#default_value' => $task->weight
    );

    $form[] = $row;
  }

  $form['draggable'] = array(
    '#type' => 'value',
    '#value' => ($study_nid !== NULL)
  );
  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save')
  );
  return $form;
}

/**
 * Theme the task overview form to include the draggable components.
 *
 * @return string HTML output.
 */
function theme_uts_tasks($form) {
  $draggable = $form['draggable']['#value'];
  $header = array(t('Title'), t('Description'), t('Parent study'), t('Operations'), t('Weight'));
  $rows = array();
  foreach (element_children($form) as $key) {
    // Make sure element is task.
    if (!is_numeric($key)) {
      continue;
    }
    $task = &$form[$key];

    $row = array();
    $row[] = $task['title']['#value'];
    $row[] = $task['description']['#value'];
    $row[] = $task['study_title']['#value'];
    $row[] = $task['operations']['#value'];

    if ($draggable) {
      $task['weight']['#attributes']['class'] = 'task-weight';
      $row[] = drupal_render($task['weight']);
    }

    $rows[] = array(
      'data' => $row,
      'class' => 'draggable'
    );
    unset($form[$key]); // Remove already rendered item.
  }

  $output = '';
  if ($draggable) {
    drupal_add_tabledrag('uts-tasks-table', 'order', 'sibling', 'task-weight');
    $output = drupal_render($form);
  }
  else {
    array_pop($header);
  }

  if (empty($rows)) {
    return t('No tasks to display.');
  }
  $output = theme('table', $header, $rows, array('id' => 'uts-tasks-table')) . $output;

  if (isset($form['study_nid'])) {
    $study = node_load($form['study_nid']['#value']);
    $output = t('<p><b>Description:</b> @body</p>', array('@body' => $study->body)) . $output;
  }
  return $output;
}

/**
 * Save task weights.
 */
function uts_tasks_submit($form, &$form_state) {
  foreach ($form_state['values']['weight'] as $task_nid => $weight) {
    db_query('UPDATE {uts_task}
              SET weight = %d
              WHERE nid = %d', $weight, $task_nid);
  }
  drupal_set_message(t('Task order saved.'));
}

/**
 * Get an array containing the task operation links.
 *
 * @param $task Task object.
 * @return Array of links.
 */
function uts_task_operations($task) {
  $links = array();
  $links['task_edit'] = array(
    'title' => t('edit'),
    'href' => "admin/uts/tasks/$task->nid/edit"
  );
  if ($task->study_nid) {
    $links['task_detach'] = array(
      'title' => t('detach'),
      'href' => "admin/uts/tasks/$task->nid/detach"
    );
  }
  $links['task_delete'] = array(
    'title' => t('delete'),
    'href' => "admin/uts/tasks/$task->nid/delete"
  );
  return $links;
}

/**
 * Load the tasks for a particular study. If none is specified then load
 * all tasks.
 *
 * @param integer $study_nid NID of the study to load the tasks for.
 * @param boolean $free Not attached to a study.
 * @return array List of task node objects.
 */
function uts_tasks_load($study_nid = NULL, $free = FALSE) {
  if ($study_nid) {
    $result = db_query('SELECT nid
                        FROM {uts_task}
                        WHERE study_nid = %d
                        ORDER BY weight ASC', $study_nid);
  }
  elseif ($free) {
    $result = db_query('SELECT nid
                        FROM {uts_task}
                        WHERE study_nid IS NULL');
  }
  else {
    $result = db_query('SELECT nid
                        FROM {uts_task}');
  }

  // Load the node objects for each task.
  $tasks = array();
  while ($nid = db_result($result)) {
    $tasks[] = node_load($nid);
  }
  return $tasks;
}

/**
 * Import a list of tasks to the specified study.
 *
 * @param integer $study_nid Study NID to related tasks to.
 * @param array $tasks List of task NIDs to import.
 */
function uts_tasks_import($study_nid, array $tasks) {
  // Tasks selected for import into current study.
  $study = node_load($study_nid);

  // Get largest weight for tasks in study.
  $max_weight = db_result(db_query('SELECT MAX(weight) FROM {uts_task} WHERE study_nid = %d', $study->nid));
  if (!$max_weight) {
    $max_weight = 0;
  }

  // Always start with a weight one larger than the previous.
  $weight = $max_weight + 1;
  foreach ($tasks as $task) {
    db_query('UPDATE {uts_task}
              SET study_nid = %d,
              weight = %d
              WHERE nid = %d', $study->nid, $weight, $task);
    $weight++;
  }
  drupal_set_message(t('%count task(s) imported to %study', array('%count' => count($tasks), '%study' => $study->title)));
}

/**
 * Render a set of operations as links.
 *
 * @param array $operations Operations to render.
 * @return string HTML output.
 */
function uts_render_operations(array $operations) {
  $out = '';
  foreach ($operations as $operation) {
    $out .= l($operation['title'], $operation['href']) . ' | ';
  }
  return substr($out, 0, strlen($out) - 3); // Remove last task pipe.
}

/**
 * Set the page title in for in operation related to a study.
 *
 * @param integer $study_nid Study NID that operation is related to.
 * @param string $title_prefix Page title prefix or operation.
 */
function uts_set_title($study_nid, $title_prefix = NULL) {
  if ($title_prefix === NULL) {
    $title_prefix = drupal_get_title();
  }
  $study = node_load($study_nid);
  drupal_set_title(t('@prefix for %name', array('@prefix' => $title_prefix, '%name' => $study->title)));
}

/**
 * Implementation of hook_mail().
 */
function uts_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = uts_mail_tokens($params, $language);
  $message['subject'] .= uts_mail_text($key .'_subject', $language, $variables);
  $message['body'][] = uts_mail_text($key .'_body', $language, $variables);
}

/**
 * Get the tokens used in uts e-mails.
 *
 * @param array $params Associative array of parameters.
 * @param object $language Language object.
 * @return array Associative array of tokens.
 */
function uts_mail_tokens($params, $language) {
  $account = $params['account'];

  $tokens = array(
    '!username' => $account->name,
    '!site' => variable_get('site_name', 'Drupal'),
    '!mailto' => $account->mail,
    '!date' => format_date(time(), 'medium', '', NULL, $language->language),
    '!register' => url('user/register', array('absolute' => TRUE))
  );

  if (!empty($params['session_id'])) {
    $tokens['!participate'] = url('uts/session/' . $params['session_id'], array('absolute' => TRUE));
  }
  elseif (!empty($params['study_nid'])) {
    $tokens['!participate'] = url('uts/environment/' . $params['study_nid'], array('absolute' => TRUE));
  }
  else {
    $tokens['!participate'] = url('uts', array('absolute' => TRUE));
  }

  if (!empty($params['session_id'])) {
    $tokens['!session_id'] = check_plain($params['session_id']);
  }

  if (!empty($params['name'])) {
    $tokens['!name'] = check_plain($params['name']);
  }

  return $tokens;
}

/**
 * Get the text of an e-mail with the specified key. Translate the text and
 * merge the tokens.
 *
 * @param string $key Mail key.
 * @param object $language Language object.
 * @param array $tokens Associative array of tokens.
 * @return string Mail text.
 */
function uts_mail_text($key, $language = NULL, $tokens = array()) {
  $langcode = isset($language) ? $language->language : NULL;

  if ($admin_setting = variable_get('uts_mail_'. $key, FALSE)) {
    // An admin setting overrides the default string.
    return strtr($admin_setting, $tokens);
  }
  else {
    // No override, return default string.
    switch ($key) {
      case 'session_info_subject':
        return t('Usability testing session started', $tokens, $langcode);
      case 'session_info_body':
        return t("!username,\n\n" .
                  "Your testing session code is: !session_id.\n\n" .
                  "If you decided to quit during the session you may return to resume your session by visiting " .
                  "!participate.\n\n" .
                  "You may also change computers when you resume, but the data collection plug-in requirements " .
                  "will be re-evaluated so make sure you meet any of the requirements on your new computer.\n\n" .
                  "Thanks for participating!", $tokens, $langcode);
      case 'invite_subject':
        return t('Your invited to participate in a usability study!', $tokens, $langcode);
      case 'invite_body':
        return t("!name,\n\n" .
                  "Your invited to take part in a usability study. The data collected from the study will be " .
                  "used to improve the usability of the interfaces tested.\n\n" .
                  "If you are interested you can find out more by visiting !participate.\n\n" .
                  "You may be required to register an account on the site. If so visit !register and login " .
                  "before visiting the above link.\n\n" .
                  "Thanks for your consideration.", $tokens, $langcode);
    }
  }
}

/**
 * Get the study status from a integer code.
 *
 * @param integer $status Study status code.
 * @return string Representation of study status.
 */
function uts_get_study_status($status) {
  switch ($status) {
    case UTS_STUDY_STATUS_IN_DEVELOPMENT:
      return t('In development');
    case UTS_STUDY_STATUS_ACTIVE:
      return t('Active');
    case UTS_STUDY_STATUS_CLOSED:
      return t('Closed');
    default:
      return 'Unknown';
  }
}

/**
 * Get the study type from a integer code.
 *
 * @param integer $type Study type code.
 * @return string Representation of study type.
 */
function uts_get_study_type($type) {
  switch ($type) {
    case UTS_STUDY_TYPE_TASK:
      return t('Task Completion');
    default:
      return 'Unknown';
  }
}

/**
 * Get the study audience role from a integer code.
 *
 * @param integer $type Study audience role code.
 * @return string Representation of study audience role.
 */
function uts_get_study_audience_role($type) {
  switch ($type) {
    case UTS_STUDY_AUDIENCE_ROLE_USER:
      return t('End user');
    case UTS_STUDY_AUDIENCE_ROLE_DESIGNER:
      return t('Designer');
    case UTS_STUDY_AUDIENCE_ROLE_PROGRAMER:
      return t('Programer');
    default:
      return 'Unknown';
  }
}

/**
 * Get the study audience level from a integer code.
 *
 * @param integer $type Study audience level code.
 * @return string Representation of study audience level.
 */
function uts_get_study_audience_level($type) {
  switch ($type) {
    case UTS_STUDY_AUDIENCE_LEVEL_BEGINNER:
      return t('Beginner');
    case UTS_STUDY_AUDIENCE_LEVEL_INTERMEDIATE:
      return t('Intermediate');
    case UTS_STUDY_AUDIENCE_LEVEL_ADVANCED:
      return t('Advanced');
    default:
      return 'Unknown';
  }
}
