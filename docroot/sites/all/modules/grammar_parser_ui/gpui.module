<?php

/**
 * @file
 * Developer module that provides a user interface to the grammar parser library.
 * The grammar parser library parses a source code snippet and returns:
 * - the tokens generated from the source code.
 * - a structured object based on the programming language grammar.
 * - the rewritten source code snippet after any modifications.
 *
 * The parsed code snippet may be used with automated code analyis and to make
 * automated code changes (e.g. version upgrade conversions).
 *
 * Copyright 2009-10 by Jim Berry ("solotandem", http://drupal.org/user/240748)
 */

module_load_include('inc', 'gpui', 'gpui');

/**
 * Implements hook_permission().
 */
function gpui_permission() {
  return array(
    'manage parser' => array(
      'title' => t('Manage parser'),
      'description' => t('Manage source code parser execution'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function gpui_menu() {
  $items = array();

  // Parser items.
  $items[PARSER_MENU_PATH] = array(
    'title' => 'Parser',
    'description' => 'Parse source code from a file, directory, or inline.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gpui_parser_form'),
    'access arguments' => array('manage parser'),
  );

  // Run items.
  $items[PARSER_MENU_PATH . '/files'] = array(
    'title' => 'Files',
    'description' => 'Parse individual source code files.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items[PARSER_MENU_PATH . '/directories'] = array(
    'title' => 'Directories',
    'description' => 'Parse directories of source code files.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gpui_bulk_parser_form'),
    'access arguments' => array('manage parser'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items[PARSER_MENU_PATH . '/inline'] = array(
    'title' => 'Inline',
    'description' => 'Parse inline source code.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gpui_inline_parser_form'),
    'access arguments' => array('manage parser'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  // Settings items.
  $items[PARSER_MENU_PATH . '/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure the source code parser.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gpui_settings_form'),
    'access arguments' => array('manage parser'), // array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );

  // Inline files.
  $items['files/gpui/inline/%'] = array(
    'title' => 'Files',
    'description' => 'Display output file from parse of inline source code.',
    'page callback' => 'gpui_inline_display',
    'page arguments' => array(3),
    'access arguments' => array('manage parser'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function gpui_theme() {
  return array(
    'gpui_outputs_table' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Form builder for settings form.
 */
function gpui_settings_form($form, &$form_state) {
  $path = gpui_directory_path('', FALSE);
  $form['gpui_dir'] = array(
    '#type' => 'textfield',
    '#title' => t('Parsed source code output directory'),
    '#required' => TRUE,
    '#default_value' => variable_get('gpui_dir', PARSER_DIR),
    '#description' => t('Directory beneath the file system path (@path) in which to save the parsed source code files. Default is @default.', array('@path' => $path, '@default' => PARSER_DIR)),
    '#size' => 30,
    '#maxlength' => 255,
    '#validate' => array('gpui_validate_dir'),
  );
  $form['gpui_preserve_array_format'] = array(
    '#type' => 'checkbox',
    '#title' => t('Preserve array formatting'),
    '#default_value' => variable_get('gpui_preserve_array_format', FALSE),
    '#description' => t('If checked, then array expressions will be formatted to match the input. If not checked, then array expressions will be formatted per Drupal coding standards. This means array expressions will be inlined in function calls, function parameters, and when a single value. Otherwise, the expression will will be multiline formatted.'),
  );
  $form['gpui_enable_debug_output'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable debug output'),
    '#default_value' => variable_get('gpui_enable_debug_output', FALSE),
    '#description' => t('If checked, then debug output will be written to the file @file. WARNING: This option should NOT be enabled except for testing and development purposes, and then only on smaller files containing the code to be debugged.', array('@file' => gpui_path('debug'))),
  );
  $form['#submit'][] = 'gpui_settings_form_submit';

  return system_settings_form($form);
}

/**
 * Submit handler for settings form.
 */
function gpui_settings_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $op = isset($values['op']) ? $values['op'] : '';

  $cur = variable_get('gpui_dir', PARSER_DIR);
  $new = $op == t('Reset to defaults') ? PARSER_DIR : $values['gpui_dir'];

  // Rename parsed source code output directory based on user settings.
  if ($new != $cur) {
    if (rename(gpui_directory_path($cur, FALSE), gpui_directory_path($new, FALSE))) {
      drupal_set_message(t('Output directory was renamed to ' . $new . '.'));
    }
    else {
      // Reset the directory variable.
      variable_set('gpui_dir', $cur);
      drupal_set_message(t('Could not rename output directory'), 'error');
    }
  }
}

/**
 * Form builder for the source code parser form.
 */
function gpui_parser_form($form, &$form_state) {
  gpui_check_settings($form_state);

  // Set default values.
  $outputs = gpui_parser_form_defaults($form_state);

  // Build form.
  $form['inputs'] = array(
    '#type' => 'fieldset',
    '#title' => t('Input files to parse'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['inputs']['filenames'] = array(
    '#type' => 'textarea',
    '#title' => t('File paths'),
    '#required' => TRUE,
    '#rows' => 5,
    '#weight' => -1,
    '#default_value' => variable_get('gpui_files', ''),
    '#attributes' => array('wrap' => 'OFF'),
    '#description' => t('Enter the complete path of each file to parse (one per line). You may manually type the paths or use copy and paste. These paths will be saved for reuse.'),
  );

  // Add a file to the list text field and button.
  // Provide default file name for output and allow for override.

  $form['outputs'] = gpui_outputs_build($outputs, 'gpui/settings');

  $form['convert'] = array(
    '#type' => 'submit',
    '#value' => t('Parse files'),
    '#disabled' => !gplib_version_check(),
  );

  return $form;
}

/**
 * Returns form content for output types fieldset.
 *
 * @param array $outputs
 *   User selections or default values.
 * @param string $settings
 *   Relative path to settings form.
 * @param boolean $show_links
 *   If TRUE, then display selected items as link to the output file.
 * @return array
 *   Form item.
 */
function gpui_outputs_build(&$outputs, $settings, $show_links = FALSE) {
  $path = gpui_dir();
  $form = array(
    '#type' => 'fieldset',
    '#title' => t('Output files to produce'),
    '#description' => t('The output files will be written to the directory @path. To change this directory, go to the <a href="@settings">settings page</a>.', array('@path' => $path, '@settings' => $settings)), // Use relative path in case of path rewrite rules.
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
    '#theme' => 'gpui_outputs_table',
  );
  $types = array(
    'tokens' => 'Source code converted to tokens',
    'grammar' => 'Source code converted to grammar',
    'rewrite' => 'Source code after any modifications',
    'patch' => 'Difference between input and rewritten source code (the rewrite option must be selected)',
  );
  foreach ($types as $key => $type) {
    $row = array();
    $row['include'] = array(
      '#type' => 'checkbox',
      '#default_value' => $outputs[$key],
    );
    $row['title'] = array(
      '#type' => 'item',
      '#title' => t('Title'),
      '#value' => $show_links && $outputs[$key] ? l($key, gpui_inline_link($key)) : $key,
    );
    $row['description'] = array(
      '#type' => 'item',
      '#title' => t('Description'),
      '#value' => $type,
    );

    $form[$key] = $row;
  }

  return $form;
}

/**
 * Validation handler for the source code parser form.
 */
function gpui_parser_form_validate($form, &$form_state) {
  $files = preg_split("/(\r\n|\n)/", trim($form_state['values']['filenames']));
  if (!count($files)) {
    // Count check is equivalent to field being required.
    // TODO Strip the text.
    form_set_error('filenames', t('Please select at least one file to parse.'));
  }

  // TODO Confirm the text actually is a valid filename.
  // TODO Should they be able to specify a directory???

  gpui_outputs_validate($form_state);
}

/**
 * Validates output type selections.
 */
function gpui_outputs_validate(&$form_state) {
  // Gather the output file types to produce.
  $outputs = array();
  $values = $form_state['values']['outputs'];
  foreach ($values as $key => $value) {
    if ($value['include']) {
      $outputs[] = $key;
    }
  }
  if (!count($outputs)) {
    form_set_error('outputs', t('Please select at least one output file to produce.'));
  }
}

/**
 * Submit handler for the source code parser form.
 */
function gpui_parser_form_submit($form, &$form_state) {
  // Rebuild form with user selections.
  $form_state['rebuild'] = TRUE;

  // Gather the output file types to produce.
  $outputs = $form_state['values']['outputs'];

  // Save and parse the file list.
  variable_set('gpui_files', trim($form_state['values']['filenames']));
  $filenames = preg_split("/(\r\n|\n)/", trim($form_state['values']['filenames']));

  // Parse the files.
  if (gpui_parser_run($filenames, $outputs)) {
    drupal_set_message(t('Module conversion code was run.'));
    drupal_set_message(t('Output files may be viewed in the directory @path.', array('@path' => gpui_dir())));
    $form_state['values']['success'] = TRUE;
  }
  else {
    drupal_set_message(t('Module conversion code was not run.'), 'error');
    $form_state['values']['success'] = FALSE;
  }
}

/**
 * Sets warning message if debug output is enabled.
 */
function gpui_check_settings($form_state) {
  if ($form_state['submitted']) {
    return;
  }
  if (variable_get('gpui_enable_debug_output', FALSE)) {
    $settings = l('here', PARSER_MENU_PATH . '/settings');
    drupal_set_message(t('WARNING: Debug output is enabled. If not intended, please change this setting !settings.', array('!settings' => $settings)), 'warning');
  }
}

/**
 * Sets the default values for the source code parser form.
 *
 * @return array of default values.
 */
function gpui_parser_form_defaults($form_state) {
  // Set defaults when form is first loaded.
  $outputs = array(
    'tokens' => FALSE,
    'grammar' => FALSE,
    'rewrite' => TRUE,
    'patch' => FALSE,
  );

  // Set defaults from submitted values.
  if (isset($form_state['values'])) {
    if (isset($form_state['values']['outputs'])) {
      $values = $form_state['values']['outputs'];
      foreach ($values as $key => $value) {
        $outputs[$key] = $value['include'];
      }
    }
  }

  return $outputs;
}

/**
 * Themes the output files to produce table.
 *
 * @return HTML output.
 */
function theme_gpui_outputs_table($variables) {
  $form = $variables['form'];
  if (function_exists('theme_table_select_header_cell')) {
    // For D6.
    $select_header = theme('table_select_header_cell');
  }
  else {
    // Adapted from D7 theme_tableselect().
    drupal_add_js('misc/tableselect.js');
    $select_header = array('class' => array('select-all')); // In D7, the value is also an array.
  }
  $header = array($select_header, t('Extension') /*t('Type')*/, t('Description'));
  $rows = array();
  foreach (element_children($form) as $key) {
    $task = &$form[$key];

    $row = array();
    $row[] = drupal_render($task['include']);
    $row[] = '<strong><label for="' . $task['include']['#id'] . '">' . $task['title']['#value'] . '</label></strong>';
    $row[] = $task['description']['#value'];

    $rows[] = $row;
  }

  return theme('table', array('header' => $header, 'rows' => $rows));
}

/**
 * Form builder for the source code bulk parser form.
 */
function gpui_bulk_parser_form($form, &$form_state) {
  gpui_check_settings($form_state);

  // Set default values.
  $extensions = gpui_bulk_parser_form_defaults($form_state);
  $path = gpui_dir();
  $drupal = DRUPAL_ROOT . '/includes';

  // Build form.
  $form['inputs'] = array(
    '#type' => 'fieldset',
    '#title' => t('Input directories to parse'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['inputs']['filenames'] = array(
    '#type' => 'textarea',
    '#title' => t('Directory paths'),
    '#required' => TRUE,
    '#rows' => 5,
    '#weight' => -1,
    '#default_value' => variable_get('gpui_bulk_files', ''),
    '#attributes' => array('wrap' => 'OFF'),
    '#description' => t('On each line, enter: 1) the complete path of each directory of files to parse, and 2) the output subdirectory of the parser directory to write to, separated by a semi-colon. You may manually type the paths or use copy and paste. These paths will be saved for reuse. Example: to parse the Drupal includes directory and place the output files in the includes subdirectory of the parser directory, i.e. in @path/includes, enter "!drupal;includes".', array('@path' => $path, '!drupal' => $drupal)),
  );

  // Add a file to the list text field and button.
  // Provide default file name for output and allow for override.

  $form['extensions'] = array(
    '#type' => 'fieldset',
    '#title' => t('File types to parse'),
    '#description' => t('The input files with these extensions will be written to the subdirectory of @path that is specified above. To change this base directory, go to the <a href="@settings">settings page</a>.', array('@path' => $path, '@settings' => 'settings')), // Use relative path in case of path rewrite rules.
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
    '#theme' => 'gpui_outputs_table',
  );
  // Build the file extension list.
  $types = array(
    'inc' => 'PHP code files',
    'info' => 'Info files used with module installation',
    'install' => 'PHP code files used with module installation, update and uninstallation',
    'module' => 'PHP code files',
    'php' => 'PHP code files',
    'profile' => 'PHP code files used with site installation',
    'test' => 'SimpleTest files',
    'theme' => 'PHP code files used with theming',
    'upgrade' => 'PHP code files used with automated upgrades',
  );
  foreach ($types as $key => $type) {
    $row = array();
    $row['include'] = array(
      '#type' => 'checkbox',
      '#default_value' => isset($extensions[$key]) ? $extensions[$key] : FALSE,
    );
    $row['title'] = array(
      '#type' => 'item',
      '#title' => t('Title'),
      '#value' => $key,
    );
    $row['description'] = array(
      '#type' => 'item',
      '#title' => t('Description'),
      '#value' => $type,
    );

    $form['extensions'][$key] = $row;
  }

  $form['convert'] = array(
    '#type' => 'submit',
    '#value' => t('Parse directories'),
    '#disabled' => !gplib_version_check(),
  );

  return $form;
}

/**
 * Validation handler for the source code bulk parser form.
 */
function gpui_bulk_parser_form_validate($form, &$form_state) {
  $files = preg_split("/(\r\n|\n)/", trim($form_state['values']['filenames']));
  if (!count($files)) {
    // Count check is equivalent to field being required.
    // TODO Strip the text.
    form_set_error('filenames', t('Please select at least one file to parse.'));
  }

  // TODO Confirm the text actually is a valid filename.
  // TODO Should they be able to specify a directory???

  // Gather the output file types to produce.
  $extensions = array();
  $values = $form_state['values']['extensions'];
  foreach ($values as $key => $value) {
    if ($value['include']) {
      $extensions[] = $key;
    }
  }
  if (!count($extensions)) {
    form_set_error('extensions', t('Please select at least one output file to produce.'));
  }
}

/**
 * Submit handler for the source code bulk parser form.
 */
function gpui_bulk_parser_form_submit($form, &$form_state) {
  // Rebuild form with user selections.
  $form_state['rebuild'] = TRUE;

  // Gather the output file types to produce.
  $values = $form_state['values']['extensions'];
  $extensions = array();
  foreach ($values as $key => $value) {
    if ($value['include']) {
      $extensions[$key] = $key;
    }
  }

  // Save and parse the file list.
  variable_set('gpui_bulk_files', trim($form_state['values']['filenames']));
  $directories = preg_split("/(\r\n|\n)/", trim($form_state['values']['filenames']));

  $path = DRUPAL_ROOT . '/' . gpui_dir();

  $key = '';
  foreach ($directories as /*$key =>*/ $directory) {
    list($input, $output) = explode(';', $directory);
    $items[] = array(
      'name' => $key,
      'old_dir' => $input . $key,
      'new_dir' => $path . '/' . $output . '-new', // 'new_dir' => $path . '/new/' . $output . $key,
      'patch_dir' => $path . '/' . $output . '-patch/', // 'patch_dir' => $path . '/patch/' . $output . $key,
    );
  }

  // Prepare batch operations to parse the directories.
  module_load_include('inc', 'gpui', 'gpui.bulk');
  if (gpui_bulk_batch_set($extensions, $items/*, $recursive, $rewrite*/)) {
    drupal_set_message(t('Batch setup for bulk parsing of code files was successful.'));
  }
  else {
    drupal_set_message(t('Batch setup for bulk parsing of code files was not successful.'), 'error');
  }
}

/**
 * Sets the default values for the source code bulk parser form.
 *
 * @return array of default values.
 */
function gpui_bulk_parser_form_defaults($form_state) {
  // Set defaults when form is first loaded.
  $extensions = array(
    'inc' => TRUE,
    'info' => FALSE,
    'install' => TRUE,
    'module' => TRUE,
    'php' => FALSE,
    'profile' => FALSE,
    'test' => FALSE,
    'theme' => FALSE,
    'upgrade' => FALSE,
  );

  // Set defaults from submitted values.
  if (isset($form_state['values'])) {
    if (isset($form_state['values']['extensions'])) {
      $values = $form_state['values']['extensions'];
      foreach ($values as $key => $value) {
        $extensions[$key] = $value['include'];
      }
    }
  }

  return $extensions;
}

/**
 * Form builder for the source code inline parser form.
 */
function gpui_inline_parser_form($form, &$form_state) {
//   gpui_check_settings();

  // Set default values.
  $outputs = gpui_parser_form_defaults($form_state);
  $show_links = isset($form_state['values']) && isset($form_state['values']['success']) && $form_state['values']['success'];
  $path = gpui_dir() . '/input.module';

  // Build form.
  $form['inputs'] = array(
    '#type' => 'fieldset',
    '#title' => t('Source code to parse'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['inputs']['source'] = array(
    '#type' => 'textarea',
    '#title' => t('Source code'),
    '#required' => TRUE,
    '#rows' => 10,
    '#weight' => -1,
    '#attributes' => array('wrap' => 'OFF'),
    '#description' => t('Enter the source code to be parsed including the opening PHP tag, "@tag." This code will be saved as @path.', array('@tag' => '<?php', '@path' => $path)), // "@tag."', array('@tag' => '<?php')),
  );

  // Add a file to the list text field and button.
  // Provide default file name for output and allow for override.

  $form['outputs'] = gpui_outputs_build($outputs, 'settings', $show_links);

  $form['convert'] = array(
    '#type' => 'submit',
    '#value' => t('Parse code'),
    '#disabled' => !gplib_version_check(),
  );

  return $form;
}

/**
 * Validation handler for the source code inline parser form.
 */
function gpui_inline_parser_form_validate($form, &$form_state) {
  gpui_outputs_validate($form_state);
}

/**
 * Submit handler for the source code inline parser form.
 */
function gpui_inline_parser_form_submit($form, &$form_state) {
  // Rebuild form with user selections.
  $form_state['rebuild'] = TRUE;

  // Gather the output file types to produce.
  $outputs = $form_state['values']['outputs'];

  // Save the input source code to a file.
  $source = gpui_inline_path('inline.module');
  $text = str_replace("\r\n", "\n", $form_state['values']['source']);
  file_put_contents($source, $text);

  // Parse the files.
  if (gpui_parser_run(array($source), $outputs)) {
    drupal_set_message(t('Module conversion code was run.'));
    drupal_set_message(t('Output files may be viewed by clicking on Extension links in the fieldset below.'));
    $form_state['values']['success'] = TRUE;
  }
  else {
    drupal_set_message(t('Module conversion code was not run.'), 'error');
    $form_state['values']['success'] = FALSE;
  }
}

/**
 * Executes parser on form inputs
 *
 * @param array $filenames
 *   List of filenames to parse.
 * @param array $outputs
 *   List of output file types to produce.
 */
function gpui_parser_run($filenames, $outputs) {
  global $_gpui_debug;

  // Load parser code.
  gpui_path_clear('memory');
  gpui_log_memory_use('initial');
  gpui_load_parser();
  gpui_log_memory_use('load code');

  // Create the reader and writer.
  $reader = PGPReader::getInstance();
  gpui_log_memory_use('create reader');
  $writer = PGPWriter::getInstance();
  gpui_log_memory_use('create writer');

  // Set array formatting preference.
  $reader->setPreserveArrayFormat(variable_get('gpui_preserve_array_format', FALSE));
  // Set debug output preference.
  $_gpui_debug = variable_get('gpui_enable_debug_output', FALSE);
  $reader->setDebug($_gpui_debug);
  if ($_gpui_debug) {
    // Clear the debug file.
    file_put_contents($reader->debugPath(), '');
  }

  $path = gpui_dir();

  // Parse the files.
  foreach ($filenames as $filename) {
    // TODO Check for valid directory!!! Recurse a directory => turn this into another function.
    if (!file_exists($filename)) {
      drupal_set_message(t('File does not exist: %file', array('%file' => $filename)), 'error');
      continue;
    }

    $prefix = $path . '/' . pathinfo($filename, PATHINFO_FILENAME);

    // Build grammar statements.
    $contents = file_get_contents($filename);
    gpui_log_memory_use('file_get_contents for file ' . $filename);
    $reader->setSnippet($contents);
    gpui_log_memory_use('set snippet');
    unset($contents);
    gpui_log_memory_use('unset contents');
    $reader->addTokenNames();
    gpui_log_memory_use('add token names');
    $reader->buildGrammar();
    gpui_log_memory_use('build grammar');

    if ($outputs['tokens']['include']) {
      // Save tokens.
      $out_file = $prefix . '.tokens.txt';
      file_put_contents($out_file, print_r($reader->getTokens(), 1));
    }
    if ($outputs['grammar']['include']) {
      // Save grammar statements.
      $out_file = $prefix . '.grammar.txt';
      file_put_contents($out_file, $reader->getStatements()->print_r());
    }
    if ($outputs['rewrite']['include']) {
      // Build the code snippet string.
      $string = $writer->toString($reader->getStatements());
      gpui_log_memory_use('writer->toString');

      // Rewrite the file.
      $out_file = $prefix . '.rewrite.' . pathinfo($filename, PATHINFO_EXTENSION);
      file_put_contents($out_file, $string);
      unset($string);
      gpui_log_memory_use('unset string');

      if ($outputs['patch']['include']) {
        // Create a patch file.
        $patch_filename = $prefix . '.patch';
        shell_exec("diff -up -r {$filename} {$out_file} > {$patch_filename}");

        // Remove the path strings from the patch file (for usability purposes).
        $old1 = pathinfo($filename, PATHINFO_DIRNAME) . '/';
        $new1 = $path . '/';
        $contents = file_get_contents($patch_filename);
        file_put_contents($patch_filename, str_replace(array($old1, $new1), '', $contents));
      }
    }

    // Free up memory.
    $reader->reset();
    gpui_log_memory_use('reset reader');
  }

  return TRUE;
}

/**
 * Loads grammer parser code files.
 */
function gpui_load_parser() {
  libraries_load('grammar_parser');
}

/**
 * Returns link to file.
 *
 * @param string $name
 *   String of the filename.
 * @return string
 *   Link to file.
 */
function gpui_inline_link($key) {
  switch ($key) {
    case 'tokens':
    case 'grammar':
      $filename = 'inline.' . $key . '.txt';
      break;

    case 'rewrite':
      $filename = 'inline.' . $key . '.module';
      break;

    case 'patch':
      $filename = 'inline.' . $key;
      break;
  }
  // Hard-code this path as it relates to the path for a menu item.
  return 'files/gpui/inline/' . $filename;
}

/**
 * Returns file wrapped in html tags.
 *
 * @param string $filename
 *   String of the filename.
 * @return string
 *   HTML output.
 */
function gpui_inline_display($filename) {
  echo '<html><head><body><pre>' . check_plain(file_get_contents(gpui_inline_path($filename))) . '</pre></body></head></html>';
}

/**
 * Returns path to file in parser directory.
 *
 * @param string $filename
 *   String of the filename.
 * @return string
 *   Path to file.
 */
function gpui_inline_path($filename) {
  return gpui_dir() . '/' . $filename;
}
