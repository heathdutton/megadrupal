<?php

// TODO: Build action for rules for e-mail verification e-mail send!

/**
 * Implements hook_cron_queue_info().
 */
function user_email_verification_cron_queue_info() {
  $queues['user_email_verification_tasks'] = array(
    'worker callback' => 'user_email_verification_task',
    'time' => 15,
  );
  return $queues;
}

/**
 * Queue worker callback for running a single task.
 *
 * @param array $task
 *   The task to process.
 */
function user_email_verification_task($uid) {
  $account = user_load($uid);

  if (!empty($account->roles) && !user_email_verification_user_skip_roles($account->roles)) {
    $account->status = 0;
    user_save($account);
  }
}

/**
 * Check if the user has a skip role.
 * @param array $roles
 * @return boolean
 */
function user_email_verification_user_skip_roles($roles){
  $skip = FALSE;
  if (!empty($roles)) {
    $roles = array_keys($roles);
    $skip_roles = variable_get('user_email_verification_roles', array());
    if (!empty($skip_roles)) {
      foreach($skip_roles as $rid => $skip_role) {
        $skip_role = (int)$skip_role;
        if (!empty($skip_role) && in_array($skip_role, $roles)) {
          $skip = TRUE;
          break;
        }
      }
    }
  }

  return $skip;
}

/**
 * Implements hook_cron().
 */
function user_email_verification_cron() {
  $timestamp = time();
  $interval = variable_get('user_email_verification_validate_interval', 86400);

  $query = db_select('user_email_verification', 'uev');
  $query->join('users', 'u', 'uev.uid = u.uid');

  $result  = $query
    ->fields('u', array('uid'))
    ->condition('uev.verified', 0, '=')
    ->condition('u.uid', 1, '>')
    ->condition('u.created', $timestamp - $interval, '<')
    ->execute();

  $queue = DrupalQueue::get('user_email_verification_tasks');
  foreach ($result as $account) {
    $queue->createItem($account->uid);
  }

}

/**
 * Implements hook_menu().
 */
function user_email_verification_menu() {

  $items['user/verify'] = array(
    'title' => 'Request new e-mail verification',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_email_verification_request'),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'file' => 'user_email_verification.admin.inc',
  );

  $items['user/email-verify/%/%/%'] = array(
    'title' => 'Verify user e-mail',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_email_verification_verify', 2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'user_email_verification.admin.inc',
  );

  return $items;
}

/**
 * Implements of hook_form_FORM_ID_alter().
 */
function user_email_verification_form_user_admin_settings_alter(&$form, &$form_state, $form_id) {
  $form['user_email_verification'] = array(
    '#type' => 'fieldset',
    '#title' => t('User e-mail verification'),
  );

  $roles = array_map('check_plain', user_roles(TRUE));
  unset($roles[DRUPAL_AUTHENTICATED_RID]);
  $form['user_email_verification']['user_email_verification_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Roles'),
    '#default_value' => variable_get('user_email_verification_roles', array()),
    '#options' => $roles,
    '#access' => !empty($roles) && user_access('administer permissions'),
    '#description' => t('Select the roles for which we should not verify the e-mail address!'),
  );

  $form['user_email_verification']['user_email_verification_validate_interval'] = array(
    '#type' => 'textfield',
    '#title' => t('Verification time interval'),
    '#required' => TRUE,
    '#default_value' => variable_get('user_email_verification_validate_interval', 86400),
    '#description' => t('Enter the time interval in seconds in which the user must validate his/her e-mail.'),
    '#element_validate' => array('element_validate_number'),
  );

  //TODO: Add the e-mail templates to be manageble through account settings.
}

/**
 * Implements hook_user_delete().
 */
function user_email_verification_user_delete($account) {
  db_delete('user_email_verification')->condition('uid', $account->uid)->execute();
}

/**
 * Implements hook_user_insert().
 */
function user_email_verification_user_insert(&$edit, $account, $category) {
  db_insert('user_email_verification')
    ->fields(array('uid', 'verified'))
    ->values(array(
      'uid'        => $account->uid,
      'verified'   => 0,
    ))
    ->execute();
}

/**
 * Implements hook_mail_alter().
 */
function user_email_verification_mail_alter(&$message) {
  if ($message['module'] == 'user' || $message['module'] == 'user_email_verification') {
    $language = $message['language'];
    $params = $message['params'];
    $account = $params['account'];
    if (!empty($account)) {
      if (!empty($message['subject'])) {
        $message['subject'] = str_replace('[user:verify-email]', user_email_verification_url($account), $message['subject']);
      }

      if (!empty($message['body'])) {
        foreach ($message['body'] as &$body) {
          $body = str_replace('[user:verify-email]', user_email_verification_url($account), $body);
        }
      }
    }
  }
}

/**
 * Implements hook_mail().
 */
function user_email_verification_mail($key, &$message, $params) {
  $language = $message['language'];

  if ($key == 'verify') {
    $account = $params['account'];
    $message['subject'] .= variable_get('user_email_verification_subject', t('Verification e-mail'));
    $message['body'][] = variable_get('user_email_verification_body', t('Please verify your e-mail by following the link: [user:verify-email]'));
  }

  if ($key == 'verify_blocked') {
    $account = $params['account'];
    $message['subject'] .= t('An blocked account verify his e-mail.');
    $message['body'][] = t('The blocked account ID: @AID validated his e-mail. If the account is not blocked for other reason, please unblock the account.');
  }
}

function user_email_verification_mail_notify($op, $account, $language = NULL) {
  // By default, we always notify except for canceled and blocked.
  $params['account'] = $account;
  $language = $language ? $language : user_preferred_language($account);
  $mail = drupal_mail('user_email_verification', 'verify', $account->mail, $language, $params);
  return empty($mail) ? NULL : $mail['result'];
}

/**
 * Generate the
 * @param unknown $account
 * @return string
 */
function user_email_verification_url($account) {
  $timestamp = REQUEST_TIME;
  $hmac = user_email_verification_hmac($account->uid, $timestamp);

  return url("user/email-verify/$account->uid/$timestamp/" . $hmac, array('absolute' => TRUE));
}

/**
 * Generate HMAC.
 * @param unknown $uid
 * @param unknown $timestamp
 * @return string
 */
function user_email_verification_hmac($uid, $timestamp) {
  $string = drupal_get_hash_salt() . $uid . variable_get('user_email_verification_salt', 'salt');
  return drupal_hmac_base64($timestamp . $uid, $string);
}

/**
 * Return the verified flag
 * @param int $uid
 * @return bool
 */
function user_email_verification_load_verify_flag($uid) {
  $result  = db_select('user_email_verification')->fields('user_email_verification', array('verified'))->condition('uid', $uid, '=')->execute()->fetchAssoc();
  if (!empty($result)) {
    return (bool)$result['verified'];
  }

  return FALSE;
}
