<?php

include_once('includes/content_callback.cache.inc');

/**
 * Implements hook_field_info().
 */
function content_callback_field_info() {
  return array(
    'content_callback' => array(
      'label'             => t('Content callback'),
      'description'       => t('This field show the output of a content callback.'),
      'default_widget'    => 'options_select',
      'default_formatter' => 'content_callback_default',
      'property_type' => 'node',
    ),
  );
}

/**
 * Implements hook_field_schema().
 */
function content_callback_field_schema($field) {
  $columns = array(
    'cid' => array(
      'type'     => 'varchar',
      'length'     => 255,
      'not null' => FALSE,
      'default' => '',
    ),
  );
  return array(
    'columns' => $columns,
  );
}

/**
 * Implements hook_field_validate().
 */
function content_callback_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  return;

  foreach ($items as $delta => $item) {
    $errors[$field['field_name']][$langcode][$delta][] = array(
      'error' => 'invalid_nid',
      'message' => t("%name: invalid input.",
        array('%name' => $instance['label'])),
    );
  }
}

/**
 * Implements hook_field_is_empty().
 */
function content_callback_field_is_empty($item, $field) {
  $temp = array_keys($field['columns']);
  $key = array_shift($temp);

  return empty($item[$key]);
}


/**
 * Implements hook_field_widget_info().
 */
function content_callback_field_widget_info() {
  return array(
    'content_callback_widget' => array(
      'label'       => t('Select list'),
      'description' => t('A widget for the content callback.'),
      'field types' => array('content_callback'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function content_callback_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'content_callback_widget':
      $options = array();
      $callbacks = content_callback_callbacks_get();

      foreach ($callbacks as $key => $callback) {
        if (!isset($element['#entity_type']) || !isset($callback['entity_types']) || !is_array($callback['entity_types']) || in_array($element['#entity_type'], $callback['entity_types'])) {
          $options[$key] = $callback['title'];
        }
      }
      asort($options);
      array_unshift($options, '- ' . t('Select') . ' -');

      $element += array(
        '#type' => 'select',
        '#default_value' => isset($items[$delta]['cid']) ? $items[$delta]['cid'] : NULL,
        '#options' => $options,
      );
      break;
  }

  return array('cid' => $element);
}

/**
 * Implements hook_field_widget_settings_form().
 */
function content_callback_field_widget_settings_form($field, $instance) {
  // Only enable this settings for beans.
  if ($instance['entity_type'] != 'bean') {
    return;
  }

  $widget   = $instance['widget'];
  $defaults = field_info_widget_settings($widget['type']);
  $settings = array_merge($defaults, $widget['settings']);

  $form = array();
  $form['hide_empty_bean'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide bean if empty'),
    '#description' => t('If this field returns nothing the block is not displayed.'),
    '#default_value' => isset($settings['hide_empty_bean']) ? $settings['hide_empty_bean'] : NULL,
  );
  return $form;
}

/**
 * Implements hook_field_formatter_info().
 */
function content_callback_field_formatter_info() {
  $ret = array(
    'content_callback_default' => array(
      'label'       => t('Content callback'),
      'description' => t('Display the output of the content callback.'),
      'field types' => array('content_callback'),
    ),
  );
  return $ret;
}

/**
 * Implements hook_field_formatter_view().
 */
function content_callback_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $list = array();
  foreach ($items as $item) {
    $list[] = $item['cid'];
  }

  $callbacks = content_callback_callbacks_get();
  foreach ($items as $item) {
    if (!isset($callbacks[$item['cid']])) {
      return;
    }
    $callback = $callbacks[$item['cid']];

    if (isset($callback['callback'])) {
      // Include file?
      if (isset($callback['file'])) {
        $file = drupal_get_path('module', $callback['module']) . '/' . $callback['file'];
        if (is_file($file)) {
          require_once $file;
        }
      }

      // Get result from callback
      if (function_exists($callback['callback'])) {
        $element[] = $callback['callback']($entity, $display, $callback);
        content_callback_active($item['cid']);
      }
    }
  }
  return $element;
}

function content_callback_active($value = NULL) {
  static $callbacks = array();

  if ($value) {
    $callbacks[$value] = $value;
  }
  return $callbacks;
}

/**
 * Implements hook_block_view_alter().
 */
function content_callback_block_view_alter(&$data, $block) {
  if (isset($data['content']['#id']) && $data['content']['#id'] == 'bean-form') {
    return;
  }

  if (isset($data['content']['bean']) && is_array($data['content']['bean'])) {
    $bean = $data['content']['bean'];
    $bean = array_pop($bean);
    $fields = array();
    foreach (element_children($bean) as $key) {
      $fields[$key] = $bean[$key];
    }

    // Get all content_callback fields
    foreach ($fields as $field) {
      if (isset($field['#field_type']) && $field['#field_type'] == 'content_callback') {
        // Get field settings
        $query = db_select('field_config_instance', 'fci')
          ->condition('fci.entity_type', 'bean', '=')
          ->condition('fci.field_name', $field['#field_name'])
          ->fields('fci', array('data'));
        $settings = unserialize($query->execute()->fetchField());

        // Check hide on empty bean setting
        if (isset($settings['widget']['settings']['hide_empty_bean']) && $settings['widget']['settings']['hide_empty_bean']) {

          // Check if we have something to return
          $hide_empty_bean = TRUE;
          foreach (element_children($field) as $key) {
            if (isset($field[$key]['view_results']) && is_array($field[$key]['view_results'])) {
              if (count($field[$key]['view_results']) > 0) {
                $hide_empty_bean = FALSE;
                continue;
              }
              else {
                // Check for empty text
                if (isset($field[$key]['#markup']) && strstr($field[$key]['#markup'], '<div class="view-empty">')) {
                  $hide_empty_bean = FALSE;
                  continue;
                }
              }
            }
            else {
              if (is_array($field[$key])) {
                $rendered_value = render($field[$key]);
              }
              else {
                $rendered_value = $field[$key];
              }

              if ($rendered_value !== FALSE && $rendered_value !== NULL && $rendered_value !== '') {
                $hide_empty_bean = FALSE;
                continue;
              }
            }
          }
        }
        else {
          continue;
        }

        // The field returns nothing so we hide the bean.
        if ($hide_empty_bean) {
          unset($data['content']);
        }
      }
    }
  }
}

/**
 * Implements hook_context_plugins().
 */
function content_callback_context_plugins() {
  $plugins = array();
  $plugins['content_callback_context_condition_content_callback'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'content_callback') . '/plugins',
      'file' => 'content_callback_context_conditions.inc',
      'class' => 'content_callback_context_condition_content_callback',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_context_registry().
 */
function content_callback_context_registry() {
  return array(
    'conditions' => array(
      'content_callback' => array(
        'title' => t('Content callback'),
        'plugin' => 'content_callback_context_condition_content_callback',
      ),
    ),
  );
}

/**
 * Implements of hook_context_page_condition().
 */
function content_callback_context_page_condition() {
  if ($plugin = context_get_plugin('condition', 'content_callback')) {
    $plugin->execute();
  }
}
