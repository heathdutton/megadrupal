<?php

/**
 * Provides several common utility functions used for testing the 
 * Namecards module. 
 * @author bengul
 *
 */
class NamecardsWebTestCase extends DrupalWebTestCase {
  private $event_name;
  private $privileged_user;
  private $org_name;
  private $position_name;
  private $department_name;
  
  
  /*
   * Create a simple contact
   * 
   * The created contact contains a single value for each form element.
   * 
   * @return node object.
   */
  protected function createBasicContact() {
    // Create a user with permissions to create contact.
    $this->privileged_user = $this->drupalCreateUser(array('access namecards'));
    $this->drupalLogin($this->privileged_user);
    $this->drupalGet('namecards/add_contact');
    $this->assertNoText('Access denied', 'User is allowed to access the page.');
        
    // Create node to edit.
    $edit = array();
    // Enter surname
    $edit['title'] = $this->randomName(8);
    // Enter given name.
    $edit["namecards_namecard_given_name[und][0][value]"] = $this->randomName(8);
    // Add nickname.
    $edit["namecards_namecard_nickname[und][0][value]"] = $this->randomName(4) . ' ' . $this->randomName(5);
    // Enter organization.
    $this->org_name = $this->randomName(8);
    $edit["namecards_namecard_organization[und][0][nid]"] = $this->org_name;
    // Enter position.
    $this->position_name = $this->randomName(8);
    $edit["namecards_namecard_position[und][0][nid]"] = $this->position_name;
    // Enter department.
    $this->department_name = $this->randomName(8);
    $edit["namecards_namecard_department[und][0][nid]"] = $this->department_name;
    // Enter phone number.
    $edit["namecards_namecard_phone[und][0][phone_number]"] = '+86 (1) 11111111';
    $edit["namecards_namecard_phone[und][0][phone_type]"] = '0';
    // Enter fax number.
    $edit["namecards_namecard_fax[und][0][fax_number]"] = '+86 (5) 55555555';
    $edit["namecards_namecard_fax[und][0][fax_type]"] = '1';
    // Enter mobile.
    $edit["namecards_namecard_mobile[und][0][value]"] = '+86 4444444';
    // Enter email address.
    $edit["namecards_namecard_email[und][0][value]"] = $this->randomName(8) . '@' . $this->randomName(5) . '.com';
    // Add street address.
    $edit["namecards_namecard_address[und][0][street]"] = '12 ' . $this->randomName(10) . ' Street';
    $edit["namecards_namecard_address[und][0][district]"] = $this->randomName(6);
    $edit["namecards_namecard_address[und][0][city]"] = $this->randomName(8);
    $edit["namecards_namecard_address[und][0][state]"] = $this->randomName(3);
    $edit["namecards_namecard_address[und][0][postcode]"] = '100094';
    $edit["namecards_namecard_address[und][0][country]"] = $this->randomName(8);
    // Add event.
    $this->event_name = $this->randomName(8) . ' [2012-07-15]';
    $edit["namecards_namecard_event[und][0][nid]"] = $this->event_name;
    // POST form.
    $this->drupalPost(NULL, $edit, t('Save'));
    // Check results.
    $this->assertText(t('Namecards namecard @title has been created.', array('@title' => $edit['title'])), 'Node created.');
    
    // Return newly created node.
    return $this->drupalGetNodeByTitle($edit['title']);
  }
  
  /*
   * Create a complex contact
   * 
   * The created contact provides values for all form fields and provides 
   * multiple values for several form elements (e.g. multiple phone and 
   * email addresses).
   * 
   * @return node object.
   */
  protected function createComplexContact() {
    // Create and log in our user.
    $this->privileged_user = $this->drupalCreateUser(array('access namecards'));
    $this->drupalLogin($this->privileged_user);
    
    // Create node to edit.
    $this->drupalGet('namecards/add_contact');
    $this->assertNoText('Access denied', 'User is allowed to access the page.');
    $edit = array();
    // Enter surname
    $edit['title'] = $this->randomName(8);
    // Enter given name.
    $edit["namecards_namecard_given_name[und][0][value]"] = $this->randomName(8);
    // Add nickname.
    $edit["namecards_namecard_nickname[und][0][value]"] = $this->randomName(4) . ' ' . $this->randomName(5);
    // Enter organization.
    $this->org_name = $this->randomName(8);
    $edit["namecards_namecard_organization[und][0][nid]"] = $this->org_name;
    // Enter position.
    $this->position_name = $this->randomName(8);
    $edit["namecards_namecard_position[und][0][nid]"] = $this->position_name;
    // Enter department.
    $this->department_name = $this->randomName(8);
    $edit["namecards_namecard_department[und][0][nid]"] = $this->department_name;
    // Enter phone number.
    $edit["namecards_namecard_phone[und][0][phone_number]"] = '+86 (1) 11111111';
    $edit["namecards_namecard_phone[und][0][phone_type]"] = '0';
    // Add additional phone number.
    $this->drupalPostAJAX(NULL, array(), array('namecards_namecard_phone_add_more' => 'Add another item'));
    $edit["namecards_namecard_phone[und][1][phone_number]"] = '+86 (2) 22222222';
    $edit["namecards_namecard_phone[und][1][phone_type]"] = '1';
    // Enter fax number.
    $edit["namecards_namecard_fax[und][0][fax_number]"] = '+86 (5) 55555555';
    $edit["namecards_namecard_fax[und][0][fax_type]"] = '1';
    // Enter mobile.
    $edit["namecards_namecard_mobile[und][0][value]"] = '+86 4444444';
    // Enter email address.
    $edit["namecards_namecard_email[und][0][value]"] = $this->randomName(8) . '@' . $this->randomName(5) . '.com';
    // Click "add another item" for another email field.
    $this->drupalPostAJAX(NULL, array(), array('namecards_namecard_email_add_more' => 'Add another item'));
    // Enter another email address.
    $edit["namecards_namecard_email[und][1][value]"] = $this->randomName(8) . '@' . $this->randomName(5) . '.com.cn';
    // Add street address.
    $edit["namecards_namecard_address[und][0][street]"] = '12 ' . $this->randomName(10) . ' Street';
    $edit["namecards_namecard_address[und][0][district]"] = $this->randomName(6);
    $edit["namecards_namecard_address[und][0][city]"] = $this->randomName(8);
    $edit["namecards_namecard_address[und][0][state]"] = $this->randomName(3);
    $edit["namecards_namecard_address[und][0][postcode]"] = '100094';
    $edit["namecards_namecard_address[und][0][country]"] = $this->randomName(8);
    // Add event.
    $this->event_name = $this->randomName(8) . ' [2012-07-15]';
    $edit["namecards_namecard_event[und][0][nid]"] = $this->event_name;
    
    // POST form.
    $this->drupalPost(NULL, $edit, t('Save'));
    // Check results.
    $this->assertText(t('Namecards namecard @title has been created.', array('@title' => $edit['title'])), 'Node created.');
    $this->assertText($edit['title'], 'Surnamename present.');
    $this->assertText($edit["namecards_namecard_given_name[und][0][value]"], 'Given name present.');
    $this->assertText($edit["namecards_namecard_nickname[und][0][value]"], 'Nickname present.');
    $this->assertText($edit["namecards_namecard_organization[und][0][nid]"], 'Organization present.');
    $this->assertText($edit["namecards_namecard_position[und][0][nid]"], 'Position present.');
    $this->assertText($edit["namecards_namecard_department[und][0][nid]"], 'Department present.');
    $this->assertText($edit["namecards_namecard_email[und][0][value]"], 'Email ' . $edit["namecards_namecard_email[und][0][value]"] . ' present.');
    $this->assertText($edit["namecards_namecard_email[und][1][value]"], 'Email ' . $edit["namecards_namecard_email[und][1][value]"] . ' present.');
    $this->assertText($edit["namecards_namecard_phone[und][0][phone_number]"], 'Phone number ' . $edit["namecards_namecard_phone[und][0][phone_number]"] . ' present.');
    $this->assertText($edit["namecards_namecard_phone[und][1][phone_number]"], 'Phone number ' . $edit["namecards_namecard_phone[und][1][phone_number]"] . ' present.');
    $this->assertText($edit["namecards_namecard_fax[und][0][fax_number]"], 'Fax number ' . $edit["namecards_namecard_fax[und][0][fax_number]"] . ' present.');
    $this->assertText($edit["namecards_namecard_mobile[und][0][value]"], 'Mobile number ' . $edit["namecards_namecard_mobile[und][0][value]"] . ' present.');
    $this->assertText($edit["namecards_namecard_address[und][0][street]"], 'Street present.');
    $this->assertText($edit["namecards_namecard_address[und][0][district]"], 'District present.');
    $this->assertText($edit["namecards_namecard_address[und][0][city]"], 'City present.');
    $this->assertText($edit["namecards_namecard_address[und][0][state]"], 'State present.');
    $this->assertText($edit["namecards_namecard_address[und][0][postcode]"], 'Postcode present.');
    $this->assertText($edit["namecards_namecard_address[und][0][country]"], 'Country present.');
    
    // Return newly created node.
    return $this->drupalGetNodeByTitle($edit['title']);
  }
  
  protected function getDepartmentName() {
    // Return false if event_name is not set.
    if (!$this->department_name) {
      return FALSE;
    }
    return $this->department_name;
  }
  
  protected function getEventName() {
    // Return false if event_name is not set.
    if (!$this->event_name) {
      return FALSE;
    }
    return $this->event_name;
  }

  protected function getOrgName() {
    // Return false if org_name is not set.
    if (!$this->org_name) {
      return FALSE;
    }
    return $this->org_name;
  }

  protected function getPositionName() {
    // Return false if event_name is not set.
    if (!$this->position_name) {
      return FALSE;
    }
    return $this->position_name;
  }

}

/**
 * Users without namecards user or admin permission denied access to create contact page.
 * @author bengul
 *
 */
class NonNamecardsUserTestCase extends NamecardsWebTestCase {
  protected $privileged_user;
  private $node;

  public static function getInfo() {
    return array(
        'name' => 'Non namecards user/administrator access to namecards system',
        'description' => 'Users without namecards user or admin permissions are denied access to namecards system.',
        'group' => 'Namecards',
    );
  }

  public function setUp() {
    // Enable any modules required for the test
    parent::setUp('namecards');
    
    // Create a contact.
    $this->node = $this->createBasicContact();
    $this->verbose($this->node->nid);

    // Create and log a user without namecards user or admin permissions. 
    $this->privileged_user = $this->drupalCreateUser(array());
    $this->drupalLogin($this->privileged_user);
  }

  public function testNamecardsNamecardCreate() {
    // Access add contact page.
    $this->drupalGet('namecards/add_contact');
    $this->assertText('Access denied', 'Access to add contact page denied to non-namecards user/administrator.');
    
    // Access edit contact page.
    $this->drupalGet('namecards/modalframe/node/edit/' . $this->node->nid . '/nojs');
    $this->assertText('Access denied', 'Access to edit contact page denied to non-namecards user/administrator.');
    
    // Access delete contact page.
    $this->drupalGet('namecards/modalframe/node/delete/' . $this->node->nid . '/nojs');
    $this->assertText('Access denied', 'Access to delete contact page denied to non-namecards user/administrator.');
    
    // Access browse contacts tab.
    $this->drupalGet('namecards/browse_contacts');
    $this->assertText('Access denied', 'Access to browse contacts tab denied to non-namecards user/administrator.');
    
    // Access organizations tab.
    $this->drupalGet('namecards/organization_names');
    $this->assertText('Access denied', 'Access to organizations tab denied to non-namecards user/administrator.');

    // Access events tab.
    $this->drupalGet('namecards/event_names');
    $this->assertText('Access denied', 'Access to events tab denied to non-namecards user/administrator.');
    
    // Access email list tab.
    $this->drupalGet('namecards/email_list');
    $this->assertText('Access denied', 'Access to email list tab denied to non-namecards user/administrator.');

    // Access settings tab.
    $this->drupalGet('namecards/settings');
    $this->assertText('Access denied', 'Access to settings tab denied to non-namecards user/administrator.');
  }
}

/**
 * Namecards user create a new contact
 * @author bengul
 *
 */
class NamecardsUserCreateContactTestCase extends NamecardsWebTestCase {
  protected $privileged_user;
  
  public static function getInfo() {
    return array(
        'name' => 'Namecards user create contact',
        'description' => 'Ensure that a namecards user can correctly add a contact to the system.',
        'group' => 'Namecards',
    );
  }
  
  public function setUp() {
    // Enable any modules required for the test
    parent::setUp('namecards');  
  }
  
  public function testNamecardsNamecardCreate() {
    // Create a contact.
    $this->createComplexContact();
  }
}

/**
 * Namecards administrator create a new contact
 * @author bengul
 *
 */
class NamecardsAdminCreateContactTestCase extends NamecardsWebTestCase {
  protected $privileged_user;

  public static function getInfo() {
    return array(
        'name' => 'Namecards administrator create contact',
        'description' => 'Ensure that a namecards administrator can correctly add a contact to the system.',
        'group' => 'Namecards',
    );
  }

  public function setUp() {
    // Enable any modules required for the test
    parent::setUp('namecards');
  }

  // Create a contact.
  public function testNamecardsNamecardCreate() {
    // Create a contact.
    $this->createComplexContact();
  }
}

/**
 * Ensure that linked nodes are removed from the system when they are no longer linked with any contacts.
 * @author bengul
 *
 */
class NamecardsDeleteOrphanedNodeTestCase extends NamecardsWebTestCase {
  private $privileged_user;
  private $org_name;
  private $event_name;
  private $position_name;
  private $department_name;
  private $node;
  
  public static function getInfo() {
    return array(
        'name' => 'Removal of orphaned nodes',
        'description' => 'Ensure that orphaned nodes are removed from the system.',
        'group' => 'Namecards',
    );
  }
  
  public function setUp() {
    // Enable any modules required for the test
    parent::setUp('namecards');
  }
  
  public function testSuite() {
    // Create contact.
    $this->node = $this->createComplexContact();
    $this->org_name = $this->getOrgName();
    $this->event_name = $this->getEventName();
    $this->department_name = $this->getDepartmentName();
    $this->position_name = $this->getPositionName();
    
    // Edit contact. Set organization field to blank.
    $this->privileged_user = $this->drupalCreateUser(array('access namecards'));
    $this->drupalLogin($this->privileged_user);
    // Get contact edit form.
    $this->drupalGet('namecards/modalframe/node/edit/' . $this->node->nid . '/nojs');
    $this->assertNoText('Access denied', 'User is allowed to access the page.');
    $edit = array(
      'namecards_namecard_organization[und][0][nid]' => '',
      'namecards_namecard_event[und][0][nid]' => '',
      'namecards_namecard_department[und][0][nid]' => '',
      'namecards_namecard_position[und][0][nid]' => '',
    );
    // POST form.
    $this->drupalPost(NULL, $edit, t('Save'));
    // Check organization node was removed.
    $this->assertText(t('Organization "@name" is no longer associated with any contact and has been deleted', array('@name' => $this->org_name)), 'Orphaned organization removed.');
    $this->assertText(t('Event "@name" is no longer associated with any contact and has been deleted', array('@name' => $this->event_name)), 'Orphaned event removed.');
    $this->assertText(t('Department "@name" is no longer associated with any contact and has been deleted', array('@name' => $this->department_name)), 'Orphaned department removed.');
    $this->assertText(t('Position "@name" is no longer associated with any contact and has been deleted', array('@name' => $this->position_name)), 'Orphaned position removed.');
  }
}
