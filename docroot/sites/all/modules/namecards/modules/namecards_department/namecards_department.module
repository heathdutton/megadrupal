<?php
/**
 * @file
 * This module provides a node type called Namecards department
 */

/**
 * Implements hook_node_info() to provide our job_post type.
 */
function namecards_department_node_info() {
  return array(
    'namecards_department' => array(
      'name' => t('Namecards department'),
      'base' => 'namecards_department',
      'description' => t(''),
      'has_title' => TRUE,
      'title_label' => t('Name'),
      'help' => t('Enter name of this department'),
    ),
  );
}

/**
 * Implements hook_permission().
 */
//function namecards_department_permission() {
//  return array(
//    'create department' => array(
//      'title' => t('Create a department'),
//      'description' => t('Create a department'),
//    ),
//    'edit own department' => array(
//      'title' => t('Edit own department'),
//      'description' => t('Edit your own department'),
//    ),
//    'edit any department' => array(
//      'title' => t('Edit any department'),
//      'description' => t('Edit any department'),
//    ),
//    'delete own department' => array(
//      'title' => t('Delete own department'),
//      'description' => t('Delete own department'),
//    ),
//    'delete any department' => array(
//      'title' => t('Delete any department'),
//      'description' => t('Delete any department'),
//    ),
//  );
//}

/**
 * Implements hook_node_access().
 */
function namecards_department_node_access($node, $op, $account) {
  // Set default access behaviour.
  $access = NODE_ACCESS_IGNORE;
  // Get node->type and node->uid based on whether $node is object or string.
  if (!is_object($node)) {
    $node_type = $node;
    $node_uid = NULL;
  }
  else {
    $node_type = $node->type;
    $node_uid = $node->uid;
  }
  if ($node_type == 'namecards_department') {
    switch ($op) {
      case 'create':
          // Allow if user's role has 'create department' permission.
          if (user_access('create department', $account)) {
          $access = NODE_ACCESS_ALLOW;
        }
      case 'update':
        // Allow if user's role has 'edit own department' permission and user is
        // the author; or if the user's role has 'edit any department' permission.
        if (user_access('edit own department', $account) && $account->uid == $node_uid ||
          user_access('edit any department', $account)) {
          $access = NODE_ACCESS_ALLOW;
        }
      case 'delete':
        // Allow if user's role has 'delete own department' permission and user is
        // the author; or if the user's role has 'delete any department' permission.
        if (user_access('delete own department', $account) && $account->uid == $node_uid ||
          user_access('delete any department', $account)) {
          $access = NODE_ACCESS_ALLOW;
        }
    }
    return $access;
  }
}

/**
 * Implement hook_form()
 *
 * Alters certain default form values for this node type.
 */
function namecards_department_form($node, $form_state) {
//  dsm($node);
//  dsm($form_state);
  // Do not automatically promote to front page.
  $node->promote = 0;
  // Disable comments.
  $node->comment = 0;
  return node_content_form($node, $form_state);
}

function namecards_department_field_info_alter(&$info) {
//  dsm($info);
}

/**
 * Implements hook_validate().
 */
function namecards_department_validate($node) {
//  dsm($node);
}