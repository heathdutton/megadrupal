<?php
/**
* @file
* This module provides a node type called Namecards namecard
*/

/**
* Implements hook_menu_alter().
*/
function namecards_namecard_menu_alter(&$callbacks) {
  // Remove add content links for nodes of type organization,
  // position, department and event, since these are automatically
  // created when creating a node of type namecard.
  $callbacks['node/add/namecards-organization']['access callback'] = FALSE;
  $callbacks['node/add/namecards-department']['access callback'] = FALSE;
  $callbacks['node/add/namecards-position']['access callback'] = FALSE;
  $callbacks['node/add/namecards-event']['access callback'] = FALSE;
  // Must unset access arguments or Drupal will use user_access()
  // as a default access callback.
  unset($callbacks['node/add/namecards-organization']['access arguments']);
  unset($callbacks['node/add/namecards-department']['access arguments']);
  unset($callbacks['node/add/namecards-position']['access arguments']);
  unset($callbacks['node/add/namecards-event']['access arguments']);
}

/**
* Implements hook_node_info() to provide our namecards_namecard type.
*/
function namecards_namecard_node_info() {
  return array(
    'namecards_namecard' => array(
      'name' => t('Namecards namecard'),
      'base' => 'namecards_namecard',
      'description' => t('Record personal contact information for a given person.'),
      'has_title' => TRUE,
      'title_label' => t('Surname'),
      'help' => t('Enter contact details for this person'),
    ),
  );
}

/**
* Implements hook_permission().
*/
//function namecards_namecard_permission() {
//  return array(
//    'create namecard' => array(
//      'title' => t('Create a namecard'),
//      'description' => t('Create a namecard'),
//    ),
//    'edit own namecard' => array(
//      'title' => t('Edit own namecard'),
//      'description' => t('Edit your own namecard'),
//    ),
//    'edit any namecard' => array(
//      'title' => t('Edit any namecard'),
//      'description' => t('Edit any namecard'),
//    ),
//    'delete own namecard' => array(
//      'title' => t('Delete own namecard'),
//      'description' => t('Delete own namecard'),
//    ),
//    'delete any namecard' => array(
//      'title' => t('Delete any namecard'),
//      'description' => t('Delete any namecard'),
//    ),
//  );
//}

/**
 * Implements hook_node_prepare()
 */
function namecards_namecard_node_prepare($node) {
  // Set additional default settings for nodes of type namecard.
  // @TODO: This is not a permanent solution for settings these
  // values for the given node type.  Must find a way of settings
  // these when defining the node type itself. The current
  // solution relies on altering each instance of the node type.
  if ($node->type == 'namecards_namecard') {
    $node->comment = '0';
    $node->promote = 0;
  }
}

/**
* Implements hook_node_access().
*/
function namecards_namecard_node_access($node, $op, $account) {
  // Set default access behaviour.
  $access = NODE_ACCESS_IGNORE;
  // Get node type.  $node can either be a node object or a content type string.
  $node_type = (is_object($node)) ? $node->type : $node;
  if ($node_type == 'namecards_namecard') {
    switch ($op) {
      case 'create':
        // Allow if user's role has 'create namecard' permission.
        if (user_access('create namecard', $account)) {
          $access = NODE_ACCESS_ALLOW;
        }
        break;
      case 'update':
        // Allow if user's role has 'edit own namecard' permission and user is
        // the author; or if the user's role has 'edit any namecard' permission.
        if (user_access('edit own namecard', $account) && $account->uid == $node->uid ||
          user_access('edit any namecard', $account)) {
          $access = NODE_ACCESS_ALLOW;
        }
        break;
      case 'delete':
        // Allow if user's role has 'delete own namecard' permission and user is
        // the author; or if the user's role has 'delete any namecard' permission.
        if (user_access('delete own namecard', $account) && $account->uid == $node->uid ||
          user_access('delete any namecard', $account)) {
          $access = NODE_ACCESS_ALLOW;
        }
        break;
    }
  }
  return $access;
}

/**
* Implement hook_form()
*
* Alters certain default form values for this node type.
*/
function namecards_namecard_form($node, $form_state) {
//  dsm($node);
//  dsm($form_state);
  // Do not automatically promote to front page.
  $node->promote = 0;
  // Disable comments.
  $node->comment = '0';
  return node_content_form($node, $form_state);
}

/**
 * Get titles of specific nodes
 *
 * @param $nids
 *   Array of nids.
 * @return
 *   Array of strings containing node titles.
 */
function namecards_namecard_get_node_titles($nids) {
  if (empty($nids)) {
    return array();
  }
  $titles = array();
  $results = db_query('SELECT n.title FROM {node} n WHERE n.nid IN (:placeholders)', array(':placeholders' => $nids));
  foreach ($results as $result) {
    $titles[] = $result->title;
  }
  return $titles;
}

/**
* Implements hook_validate().
*/
function namecards_namecard_validate($node) {
  // Get language setting.
  $lang = $node->language;

  // Validate phone number.
  if (isset($node->namecards_namecard_phone)) {
    foreach ($node->namecards_namecard_phone[$lang] as $delta => $content) {
      if (is_numeric($delta)) {
        $regex_pattern = '/^\+[0-9]{1,} \([0-9]{1,}\) ([0-9]{1,}|[0-9]{1,}-[0-9]{1,})$/';
        $field_value = $node->namecards_namecard_phone[$lang][$delta]['phone_number'];
        if (!empty($field_value) && preg_match($regex_pattern, $field_value) == 0) {
          form_set_error('namecards_namecard_phone][' . $lang . '][' . $delta . '][phone_number', t('Wrong format for phone number.'), $limit_validation_errors = NULL);
        }
      }
    }
  }
  // Validate fax number.
  if (isset($node->namecards_namecard_fax)) {
    foreach ($node->namecards_namecard_fax[$lang] as $delta => $content) {
      if (is_numeric($delta)) {
        $regex_pattern = '/^\+[0-9]{1,} \([0-9]{1,}\) ([0-9]{1,}|[0-9]{1,}-[0-9]{1,})$/';
        $field_value = $node->namecards_namecard_fax[$lang][$delta]['fax_number'];
        if (!empty($field_value) && preg_match($regex_pattern, $field_value) == 0) {
          form_set_error('namecards_namecard_fax][' . $lang . '][' . $delta . '][fax_number', t('Wrong format for fax number.'), $limit_validation_errors = NULL);
        }
      }
    }
  }
  // Validate mobile number.
  if (isset($node->namecards_namecard_mobile)) {
    foreach ($node->namecards_namecard_mobile[$lang] as $delta => $content) {
      if (is_numeric($delta)) {
        $regex_pattern = '/^\+[0-9]{1,} [0-9]{1,}$/';
        $field_value = $node->namecards_namecard_mobile[$lang][$delta]['value'];
        if (!empty($field_value) && preg_match($regex_pattern, $field_value) == 0) {
          form_set_error('namecards_namecard_mobile][' . $lang . '][' . $delta . '][value', t('Wrong format for mobile number.'), $limit_validation_errors = NULL);
        }
      }
    }
  }
  // Validate email address.
  if (isset($node->namecards_namecard_email)) {
    foreach ($node->namecards_namecard_email[$lang] as $delta => $content) {
      if (is_numeric($delta)) {
        $regex_pattern = '/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]{1,}$/';
        $field_value = $node->namecards_namecard_email[$lang][$delta]['value'];
        if (!empty($field_value) && preg_match($regex_pattern, $field_value) == 0) {
          form_set_error('namecards_namecard_email][' . $lang . '][' . $delta . '][value', t('Wrong format for email address.'), $limit_validation_errors = NULL);
        }
      }
    }
  }
  // Validate event.
  if (isset($node->namecards_namecard_event)) {
    foreach ($node->namecards_namecard_event[$lang] as $delta => $content) {
      if (is_numeric($delta)) {
        $regex_pattern = '/^[a-zA-Z0-9 \?@<>\'":-]{1,} \[[1-9][0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])\]$/';
        $nid = $node->namecards_namecard_event[$lang][$delta]['nid'];
        $field_value = db_query('SELECT title FROM {node} WHERE nid = :nid', array(':nid' => $nid))->fetchField();
        if (!empty($field_value) && preg_match($regex_pattern, $field_value) == 0) {
          form_set_error('namecards_namecard_event', t('Wrong format for event.'), $limit_validation_errors = NULL);
          // Delete event node from DB. This is required since the event node is saved before namecard validation.
          $num_deleted = db_delete('node')
            ->condition('nid', $nid)
            ->execute();
        }
      }
    }
  }
}

/**
 * Create content of computed field 'namecards_namecard_full_content'
 *
 * Incorporates the content of all fields for node type 'namecards_namecard'
 * into a single computed field. This is utilised by the module's search function.
 */
function computed_field_namecards_namecard_full_content_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $output = '';
  $lang = $entity->language;
  $node_ref_nids = array();
  $fields = array(
    'namecards_namecard_given_name',
    'namecards_namecard_nickname',
    'namecards_namecard_organization',
    'namecards_namecard_department',
    'namecards_namecard_event',
    'namecards_namecard_position',
    'namecards_namecard_phone',
    'namecards_namecard_fax',
    'namecards_namecard_mobile',
    'namecards_namecard_email',
    'namecards_namecard_address',
  );

  // Add surname.
  $output .= check_plain($entity->title) . ' ';
  // Add remaining fields.
  foreach ($fields as $field_name) {
    if (empty($entity->{$field_name})) {
      // Skip to next iteration if this field is not present.
      continue;
    }
    $count = count($entity->{$field_name}[$lang]);
    for ($i = 0; $i < $count; $i++) {
      if ($field_name == 'namecards_namecard_address') {
        // Get values of address field.
        foreach ($entity->namecards_namecard_address[$lang][$i] as $value) {
          $output .= check_plain($value) . ' ';
        }
      }
      elseif ($field_name == 'namecards_namecard_phone') {
         foreach ($entity->namecards_namecard_phone[$lang][$i] as $key => $value) {
          if ($key == 'phone_number') {
            $output .= $entity->namecards_namecard_phone[$lang][$i][$key] . ' ';
          }
         }
      }
      elseif ($field_name == 'namecards_namecard_fax') {
         foreach ($entity->namecards_namecard_fax[$lang][$i] as $key => $value) {
           if ($key == 'fax_number') {
             $output .= $entity->namecards_namecard_fax[$lang][$i][$key] . ' ';
           }
         }
      }
      else {
        // Get value of all fields except address, as address
        // has a different structure and is thus handled separately.
        foreach ($entity->{$field_name}[$lang][$i] as $key => $value) {
          if ($key == 'value') {
            $output .= check_plain($value) . ' ';
          }
          elseif ($key == 'nid' && preg_match('/^[0-9]{1,}$/', $value) > 0) {
            // Collect nid of referenced node.
            $node_ref_nids[] = (int) $value;
          }
        }
      }
    }
  }

  // Get the values (i.e. titles) of all referenced nodes.
  if (count($node_ref_nids) > 0) {
    $results = db_query('SELECT title FROM {node} WHERE nid IN (:node_ref_nids)', array(':node_ref_nids' => $node_ref_nids));
    foreach ($results as $result) {
      $output .= check_plain($result->title) . ' ';
    }
  }
  // Set value of computed field.
  $entity_field[0]['value'] = $output;
}

/**
 * Create content of computed field 'namecards_namecard_comp_department'
 */
function computed_field_namecards_namecard_comp_dept_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $output = '';
  $department_nids = array();
    
  $lang = $entity->language;
  if (!empty($entity->namecards_namecard_department[$lang])) {
    foreach ($entity->namecards_namecard_department[$lang] as $item) {
      $department_nids[] = (integer) $item['nid'];
    }
  }
  $output .= implode('<br />', namecards_namecard_get_node_titles($department_nids));
  $entity_field[0]['value'] = $output;
}

/**
 * Create content of computed field 'namecards_namecard_comp_email'
 *
 * Merges all email addresses of given contact into a single string.
 */
function computed_field_namecards_namecard_comp_email_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $output = '';
  $lang = $entity->language;
  if (!empty($entity->namecards_namecard_email[$lang])) {
    $email_addresses = array();
    foreach ($entity->namecards_namecard_email[$lang] as $item) {
      $email_addresses[] = check_plain($item['value']);
    }
    $output .= implode(', ', $email_addresses);
  }
  $entity_field[0]['value'] = $output;
}

/**
 * Create content of computed field 'namecards_namecard_comp_event'
 */
function computed_field_namecards_namecard_comp_event_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $output = '';
  $event_nids = array();
    
  $lang = $entity->language;
  if (!empty($entity->namecards_namecard_event[$lang])) {
    foreach ($entity->namecards_namecard_event[$lang] as $item) {
      $event_nids[] = (integer) $item['nid'];
    }
  }
  $output .= implode('<br />', namecards_namecard_get_node_titles($event_nids));
  $entity_field[0]['value'] = $output;
}

/**
 * Create content of computed field 'namecards_namecard_comp_organization'
 */
function computed_field_namecards_namecard_comp_org_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $output = '';
  $organization_nids = array();
    
  $lang = $entity->language;
  if (!empty($entity->namecards_namecard_organization[$lang])) {
    foreach ($entity->namecards_namecard_organization[$lang] as $item) {
      $organization_nids[] = (integer) $item['nid'];
    }
  }
  $output .= implode('<br />', namecards_namecard_get_node_titles($organization_nids));
  $entity_field[0]['value'] = $output;
}

/**
 * Create content of computed field 'namecards_namecard_comp_position'
 */
function computed_field_namecards_namecard_comp_pos_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $output = '';
  $position_nids = array();
    
  $lang = $entity->language;
  if (!empty($entity->namecards_namecard_position[$lang])) {
    foreach ($entity->namecards_namecard_position[$lang] as $item) {
      $position_nids[] = (integer) $item['nid'];
    }
  }
  $output .= implode('; ', namecards_namecard_get_node_titles($position_nids));
  $entity_field[0]['value'] = $output;
}
