<?php

/**
 * @file
 * This is a Drupal Module - Namecards Import
 *
 * Provides users with access to csv file import and export functionality.
 *
 * Makes use of some classes created by other third parties. Addition information
 * and credits for original authors are contained in the respective class files.
 * TODO: third party classes may be removed from future versions as the lisencing
 * conditions cannot be clarified in all cases.
 *
 * Copyright 2010 Ben Gunn
 *
 * Licensed under the GNU Public License
 */

/**
 * Implements hook_perm()
 */
function namecards_import_perm() {
  return array('access namecards');
}

/**
 * Page callback for 'namecards/import_save_new_contacts'.
 */
function namecards_import_save_new_contacts() {
  drupal_add_js('misc/progress.js');
  drupal_add_js(drupal_get_path('module', 'namecards_import') .'/namecards_import_save_import_contacts.js');
  $output .= '<h2>Importing contacts</h2>';
  $output .= '<div id="progress"></div>';

  return $output;
}

/**
 * Delete unused variables
 *
 * This cleanup function is run after via ajax after the imported contacts have been saved.
 */
function namecards_import_save_new_contacts_post_save() {
  if (isset($_SESSION['namecards_imported_contacts'])) {
    unset($_SESSION['namecards_imported_contacts']);
  }
  if (isset($_SESSION['namecards_imported_contacts_total_num'])) {
    unset($_SESSION['namecards_imported_contacts_total_num']);
  }
  variable_del('namecards_import_saved_contacts_count_' . session_id());
  drupal_json(array('status' => TRUE));
  exit;
}

/**
 * Implements hook_form_alter
 */
function namecards_import_form_alter(&$form, &$form_state, $form_id) {
  // Add import file upload elements
  switch ($form_id) {
    case 'namecards_user_settings_form':
      if (!empty($form_state['namecards_import']['csv_file_object'])) {
        $file = $form_state['namecards_import']['csv_file_object'];
        if (file_exists($file->uri)) {
          $form['exported_file_link'] = array(
            '#type' => 'markup',
            '#markup' => theme('namecards_import_export_csv_file_link', array('file' => $file)),
            '#weight' => '0',
          );
        }
        else {
          drupal_set_message(t('File @filename does not exist', array('@filename' => $file->filename)), 'error');
        }
      }
      $form['import'] = array(
        '#type' => 'fieldset',
        '#title' => t('Import contacts from file'),
        '#description' => t('Allows user to import multiple contacts from a CSV file.'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['import']['import_file'] = array(
        '#type' => 'file',
        '#title' => t('Select a CSV file'),
        '#description' => t('Create a new contact by importing an existing CSV file.  Currently only supports CSV files exported by MS Outlook and Mozilla Thunderbird.'),
        '#size' => 40,
      );
      $form['import']['email_client'] = array(
        '#type' => 'select',
        '#title' => t('Email client'),
        '#description' => t('Select the email program the file was exported from.'),
        '#default_value' => 0,
        '#options' => array(
          'none' => '-- Select --',
          'outlook' => t('Outlook'),
          'thunderbird' => t('Thunderbird'),
        ),
      );
      $form['import']['import'] = array(
        '#type' => 'submit',
        '#value' => t('Import'),
        '#validate' => array('namecards_import_form_import_file_validate'),
        '#submit' => array('namecards_import_form_import_file_submit'),
        '#limit_validation_errors' => array(
          array('import_file'), 
          array('email_client'),
        ),
      );
      $form['export'] = array(
        '#type' => 'fieldset',
        '#title' => t('Export contacts to file'),
        '#description' => t('Export contacts to a file compatible with MS Outlook CSV format.'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['export']['export_options'] = array(
        '#type' => 'radios',
        '#title' => t('Options'),
        '#options' => array(
          0 => t('Export my contacts only.'),
          1 => t('Export my contacts plus any public contacts.'),
        ),
        '#default_value' => 0,
      );
      $form['export']['export'] = array(
        '#type' => 'submit',
        '#value' => t('Export'),
        '#submit' => array('namecards_import_export_contacts_submit'),
      );
      break;
  }
}

/**
 * Implemention of hook_menu()
 */
function namecards_import_menu() {
  $items['namecards/import_save_new_contacts'] = array(
    'page callback' => 'namecards_import_save_new_contacts',
    'page arguments' => array(),
    'access callback' => 'namecards_menu_access_callback_function',
    'type' => MENU_CALLBACK,
  );
  $items['namecards/import_batch_save_nodes'] = array(
    'page callback' => 'namecards_import_batch_save_nodes',
    'page arguments' => array(),
    'access callback' => 'namecards_menu_access_callback_function',
    'type' => MENU_CALLBACK,
  );
  $items['namecards/import_save_new_contacts_post_save'] = array(
    'page callback' => 'namecards_import_save_new_contacts_post_save',
    'page arguments' => array(),
    'access callback' => 'namecards_menu_access_callback_function',
    'type' => MENU_CALLBACK,
  );
  $items['namecards/import_select_contacts'] = array(
    'page callback' => 'namecards_import_select_contacts',
    'page arguments' => array(),
    'access callback' => 'namecards_menu_access_callback_function',
    'type' => MENU_CALLBACK,
  );
  $items['namecards/export_contacts_file/%'] = array(
    'page callback' => 'namecards_import_get_exported_csv_file',
    'page arguments' => array(2),
    'access callback' => 'namecards_menu_access_callback_function',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_menu_alter()
 * 
 * Replaces page callback function for "namecards/add_contact" 
 * with alternative function which contains import contact form 
 * fields in addition to regular contacts fields. 
 * 
 */
function namecards_import_menu_alter(&$items) {
  $items['namecards/add_contact']['page callback'] = 'namecards_import_modalframe_add_contact';
}

/**
 * Loads add new namecard_namecard node form in modal frame.
 */
function namecards_import_modalframe_add_contact() {
  // Required for loading node form
  global $user;
  
  // Check if javascript is enabled.
  $js = (!empty($_POST['js'])) ? TRUE : FALSE;
  
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
  }
  
  // Mock the node type
  $node = new stdClass();
  $node->type = 'namecards_namecard';
  node_object_prepare($node);
  $node->uid = $user->uid;
  $node->name = $user->name;
  $node->language = LANGUAGE_NONE;

  // Add imported fields if present to node object so they can be 
  // added to node form when it is rendered. 
  if (!empty($_SESSION['namecards_import_contact_fields'])) {
    $contacts = $_SESSION['namecards_import_contact_fields'];
    unset($_SESSION['namecards_import_contact_fields']);
    foreach ($contacts as $key => $item) {
      switch ($key) {
        case 'namecards_namecard_organization':
          if (isset($contacts['namecards_namecard_organization'][LANGUAGE_NONE][0]['nid'])) {
            $node->{$key} = $item;
          }
          elseif (isset($contacts['namecards_namecard_organization'][LANGUAGE_NONE][0]['value'])) {
            // Make value available to client side javascript (see file 'namecards_import_fill_form.js') in order to fill in form field.
            drupal_add_js(array(
              'namecardsImport' => array(
                'organizationName' => $contacts['namecards_namecard_organization'][LANGUAGE_NONE][0]['value'],
              ),
            ),
            'setting');
          }
          break;
        case 'namecards_namecard_position':
          if (isset($contacts['namecards_namecard_position'][LANGUAGE_NONE][0]['nid'])) {
            $node->{$key} = $item;
          }
          else {
            // Make value available to client side javascript (see file 'namecards_import_fill_form.js') in order to fill in form field.
            drupal_add_js(array(
              'namecardsImport' => array(
                'positionName' => $contacts['namecards_namecard_position'][LANGUAGE_NONE][0]['value'],
              ),
            ),
            'setting');
          }
          break;
        case 'namecards_namecard_department':
          if (isset($contacts['namecards_namecard_department'][LANGUAGE_NONE][0]['nid'])) {
            $node->{$key} = $item;
          }
          else {
            // Make value available to client side javascript (see file 'namecards_import_fill_form.js') in order to fill in form field.
            drupal_add_js(array(
              'namecardsImport' => array(
                'departmentName' => $contacts['namecards_namecard_department'][LANGUAGE_NONE][0]['value'],
              ),
            ),
            'setting');
          }
          break;
        default:
          $node->{$key} = $item;
          break;
      }
    }
    // Add javascript to fill in form values.
    theme('namecards_import_fill_form_javascript');
  }
  
  if ($js) {
    ctools_include('node.pages', 'node', '');
    $form_state = array(
      'ajax' => $js,
      'title' => t('Add'),
      'build_info' => array(
        'args' => array(
          $node,
        ),
      ),
    );
    $output = ctools_modal_form_wrapper($node->type . '_node_form', $form_state);
    // Close modal if form has been processed.
    if (!empty($form_state['executed'])) {
      $output = array();
      if (isset($form_state['namecards_modal_close'])) {
        // Close button was pressed so close modal.
        $output[] = ctools_modal_command_dismiss();
      }
      if (isset($form_state['namecards_modal_reload'])) {
        // Reload the contents of current modal.
        watchdog('namecards_import', 'Reload the contents of current modal');
        $output[] = ctools_ajax_command_reload();
      }
      else {
        // Close modal and reload parent page.
        $output[] = ctools_modal_command_dismiss();
        $output[] = ctools_ajax_command_reload();
      }
    }
    print ajax_render($output);
    exit;
  }
  else {
    $form_state = array();
    $form_state['build_info']['args'] = array($node);
    form_load_include($form_state, 'inc', 'node', 'node.pages');
  
    return drupal_build_form($node->type . '_node_form', $form_state);
  }
}

/**
 * Replace the value stored in $form_state['values']['title'] with value of title form field.
 *
 *  Must override the previously set value for title in $form_state['values']['title'], which
 *  was set when the CSV file was imported, with the current value contained in the title field of
 *  the form.
 *
 * @param $form
 * @param $form_state
 */
function namecards_import_namecard_namecard_node_form_submit($form, &$form_state) {
  $form_state['values']['title'] = check_plain($form['#post']['title']);
}

/**
 * Validates submitted namecard_namecard node form.
 *
 * This function is required in the situation that the node title value was taken from
 * an uploaded file, but the title field was subsequently altered by the user. It checks
 * whether the posted value for title is valid.
 *
 * @param $form
 * @param $form_state
 */
function namecards_import_namecard_namecard_node_form_validate($form, &$form_state) {
  // Make sure the stored form value is the same as the posted value.
  $form_state['values']['title'] = check_plain($form['#post']['title']);
  // Set the value of the title field to the newest value.  Ensures the correct value for
  // title appears in the form field should the form be reloaded (e.g. if the form fails
  // validation).
  $form['title']['#value'] = $form_state['values']['title'];
  if ($form_state['values']['title'] == '') {
    form_set_error('title', t('You must enter a surname for this person.'));
  }
}

/**
 * Implements hook_node_insert().
 */
function namecards_import_node_insert($node) {
  // Allow bulk updates and inserts to temporarily disable the
  // maintenance of the {node_comment_statistics} table.
  if ($node->type == 'namecards_namecard') {
    variable_set('comment_maintain_node_statistics', FALSE);
  }
}


/**
 * Implements hook_theme()
 */
function namecards_import_theme() {
  return array(
    'namecards_import_create_select_contacts_to_import_list_theme' => array(
      'render element' => 'form',
    ),
    'namecards_import_export_csv_file_link' => array(
      'variables' => array(
        'file' => NULL,
      ),
    ),
    'namecards_import_fill_form_javascript' => array(
      'arguments' => array(),
    ),
  );
}

/**
 * 
 * @param unknown_type $variables
 * @return string
 */
function theme_namecards_import_export_csv_file_link($variables) {
  global $base_root;
  $output = '';
  
  drupal_add_css(drupal_get_path('module', 'namecards_import') . '/namecards_import.css');
  drupal_add_js(drupal_get_path('module', 'namecards_import') . '/namecards_import.js');
  $file = $variables['file'];
  $output .= '<div id="namecards-import-export-csv-file">';
  $output .= '<ul>';
  $output .= '<li>' . t('Your file of exported contacts has been created.') . '</li>';
  $output .= '<li>' . t('<a id="namecards-import-export-contacts-download-file-link" href="@url">Download file</a>', array('@url' => $base_root . '/namecards/export_contacts_file/' . $file->fid)) . '</li>';
  $output .= '<li id="namecards-download-file-close"><a id="namecards-download-file-close-button-link" href="#"><img id="namecards-download-file-close-button" src="' . $base_root . '/' . drupal_get_path('module', 'namecards') . '/images/icon-close-window.png' . '" alt="close"></a></li>';
  $output .= '</ul>';
  $output .= '</div>';
  
  return $output;
}

/**
 * Fills in form elements using javascript.
 *
 * Used to place strings in nodereference fields.  Essentially mimics manual user input, as
 * programatically such fields only accept integers (i.e. nid).
 */
function theme_namecards_import_fill_form_javascript() {
  drupal_add_js(drupal_get_path('module', 'namecards_import') . '/namecards_import_fill_form.js');
}

/**
 * Theme create select contacts to import list form
 */
function theme_namecards_import_create_select_contacts_to_import_list_theme($variables) {
  $form = $variables['form'];
  $rows = array();
  foreach (element_children($form['select_contacts_checkboxes']) as $contact_id) {
    $row = array();
    $row[] = drupal_render($form['select_contacts_checkboxes'][$contact_id]);
    $row[] = drupal_render($form['public_checkboxes'][$contact_id]);
    $row[] = drupal_render($form[$contact_id]['surname']);
    $row[] = drupal_render($form[$contact_id]['given_name']);
    $row[] = drupal_render($form[$contact_id]['org_name']);
    $rows[] = $row;
  }
$header = array();
   
  if (count($rows)) {
    $header = array(theme('namecards_select_table_column_checkbox', array('label' => t('Select'))), theme('namecards_select_table_column_checkbox', array('label' => t('Public'))), t('Surname'), t('Given name'), t('Organization'));
//    $header = array(t('Select'), t('Public'), t('Surname'), t('Given name'), t('Organization'));
  }
  else {
    $header = array(t('Select'), t('Public'), t('Surname'), t('Given name'), t('Organization'));
    $row = array();
    $row[] = array(
      'data' => '<strong>' . t('There are no contacts to import.') . '</strong>',
      'colspan' => 5,
      'style' => 'text-align:center'
    );
    $rows[] = $row;
  }

   // Set table tag attributes
   $attributes = array(
     'class' => array('namecards-import-select-contacts-to-import-list-table'),
   );

  $output = '<div class="namecards-import-select-contacts-to-import-list">';
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => $attributes));
  $output .= drupal_render_children($form);
  $output .= '</div>';
  return $output;
}

/**
 * Presubmit validation for file import form
 *
 * @param $form
 * @param $form_state
 */
function namecards_import_form_import_file_validate($form, &$form_state) {
  // Check email client was selected.
  if ($form_state['values']['email_client'] == 'none') {
    form_set_error('email_client', t('Please select the email program used to create the CSV file.'));
  }
  // Check that file was selected.
  if (empty($_FILES['files']['name']['import_file']) || empty($_FILES['files']['size']['import_file'])) {
    form_set_error('import_file', t('Please select a file to upload.'));
  }
}

/**
 * Return number type as its integer representation.
 * 
 * The number type (e.g 'work', 'home', 'other') for a phone or fax number is 
 * stored in the database as an integer. This function returns the corresponding 
 * integer value for these number types.  
 */
function _namecards_import_get_number_type($type) {
  $value = NULL;
  switch ($type) {
    case 'work':
      $value = 0;
      break;
    case 'home':
      $value = 1;
      break;
    case 'other':
      $value = 2;
      break;
  }
  return $value;
}

/**
 * Return CSV file to client.
 * 
 * @param integer $fid
 *   File ID number. 
 */
function namecards_import_get_exported_csv_file($fid) {
  global $user;
  $file = file_load((int)$fid);

  // Confirm that user has access to this file.
  if ($file->uid != $user->uid) {
    drupal_set_message(t('An error occured while retrieving the exported contacts file.'), 'error');
    drupal_goto('namecards/settings');
  }
  
  // Set headers.
  drupal_add_http_header('Cache-Control', 'max-age=60, must-revalidate');
  drupal_add_http_header('Content-type', 'text/csv; charset=utf-8');
  drupal_add_http_header('Content-Disposition', 'attachment; filename="'. $file->filename .'"');
  // Send file content.
  $file_hande = fopen($file->uri, 'r');
  $content = fread($file_hande, filesize($file->uri));
  print $content;
}

/**
 * Implements hook_init()
 */
function namecards_import_init() {
  /*if (isset($_SESSION['namecards_imported_contacts_progress_monitor'])) {
    unset($_SESSION['namecards_imported_contacts_progress_monitor']);
  }*/
}

/**
 * Page callback function
 *
 * Creates select imported contacts page
 */
function namecards_import_select_contacts() {
  $output = '';
  $output .= 'Select contacts to import';
  $form = drupal_get_form('namecards_import_select_contacts_form');
  $output .= drupal_render($form);
  return $output;
}

/**
 * Define select contacts to import form
 */
function namecards_import_select_contacts_form() {
  $form = array();
  // Load file.
  $file = $_SESSION['namecards_csv_file'];
  
  
  if (file_exists($file->uri)) {
    // Set correct locale to avoid any issues with multibyte characters.
    $original_local_value = setlocale(LC_CTYPE, 0);
    if ($original_local_value !== 'en_US.UTF-8') {
      setlocale(LC_CTYPE, 'en_US.UTF-8');
    }
    // Load raw csv content into a handler variable.
    $handle = fopen($file->uri, "r");
//     dsm(mb_detect_encoding (file_get_contents($file->uri)));
    $cardinfo = array();
    while (($data = fgetcsv($handle, 5000, ",")) !== FALSE) {
      $cardinfo[] = $data;
    }
    fclose($handle);
    // Restore original locale value.
    setlocale(LC_CTYPE, $original_local_value);
  }
  else {
    drupal_set_message(t('CSV file doesn\'t exist'), 'error');
  }

  // Parse handler variable to create a nicely formatted array representing the contact.
  $contacts = _namecards_import_parse_csv_info($cardinfo, $file->email_format, FALSE);
  $select_contacts_options = array();
  $public_options = array();

  $num = count($contacts);
  for ($i = 0; $i < $num; $i++) {
    $file_line_num = $i + 1; // The first line of csv file contains labels so must add one to the current index to ensure it points to correct line number in file.
    $select_contacts_options[$file_line_num] = '';
    $public_options[$file_line_num] = '';
    $form[$file_line_num]['surname'] = array(
      '#markup' => !empty($contacts[$i]['surname']) ? check_plain($contacts[$i]['surname']) : t('[Unknown]'),
    );
    $form[$file_line_num]['given_name'] = array(
      '#markup' => !empty($contacts[$i]['given_name']) ? check_plain($contacts[$i]['given_name']) : '',
    );
    $form[$file_line_num]['org_name'] = array(
      '#markup' => !empty($contacts[$i]['organization']) ? check_plain($contacts[$i]['organization']) : '',
    );
  }

  $form['select_contacts_checkboxes'] = array(
    '#type' => 'checkboxes',
    '#options' => $select_contacts_options,
    '#attributes' => array(
      'title' => t('Select'),
    ),
  );

  $form['public_checkboxes'] = array(
    '#type' => 'checkboxes',
    '#options' => $public_options,
    '#attributes' => array(
      'title' => t('Public'),
    ),
  );

  // Only display widgets if there are contacts to import.
  if (count($select_contacts_options) > 0) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Import selected contacts'),
      '#submit' => array('namecards_import_select_contacts_to_import_form_submit'),
    );
  }

  $form['#theme'] = 'namecards_import_create_select_contacts_to_import_list_theme';
  return $form;
}

/**
 * Submit function for file import form
 */
function namecards_import_select_contacts_to_import_form_submit($form, &$form_state) {
  $selected_rows = array();

  // Get the file line numbers for selected contacts.
  foreach ($form_state['values']['select_contacts_checkboxes'] as $index => $value) {
    if ($value != 0) {
      if ($form_state['values']['public_checkboxes'][$index] != 0) {
        $public_value = 1;
      }
      else {
        $public_value = 0;
      }
      // Set public field
      $selected_rows[] = array('line_num' => $index, 'public' => $public_value);
    }
  }
  // Start node batch save process.
  //namecards_import_batch_save_nodes($selected_rows);
  $_SESSION['namecards_import_selected_contacts'] = $selected_rows;
  drupal_goto('namecards/import_batch_save_nodes');
}

/**
 * Convert a csv string to an array 
 * 
 * In the event that PHP function str_getcsv() is not available an alternative is provided.
 * 
 * @param $input
 * @param $delimiter
 * @param $enclosure
 * @param $escape
 * @param $eol
 * @return Array of string values or false
 */
function namecards_import_str_getcsv($input, $delimiter = ',', $enclosure = '"', $escape = '\\', $eol = '\n') {
  if (!function_exists('str_getcsv')) {
    if (is_string($input) && !empty($input)) {
      $output = array();
      $tmp    = mb_split("/".$eol."/", $input);
      if (is_array($tmp) && !empty($tmp)) {
        while (list($line_num, $line) = each($tmp)) {
          if (mb_ereg_match("/" . $escape . $enclosure . "/", $line)) {
            while ($strlen = mb_strlen($line)) {
              $pos_delimiter = mb_strpos($line, $delimiter);
              $pos_enclosure_start = mb_strpos($line, $enclosure);
              if (is_int($pos_delimiter) && is_int($pos_enclosure_start) && ($pos_enclosure_start < $pos_delimiter)) {
                $enclosed_str = mb_substr($line, 1);
                $pos_enclosure_end = mb_strpos($enclosed_str, $enclosure);
                $enclosed_str = mb_substr($enclosed_str, 0, $pos_enclosure_end);
                $output[$line_num][] = $enclosed_str;
                $offset = $pos_enclosure_end + 3;
              } 
              else {
                if (empty($pos_delimiter) && empty($pos_enclosure_start)) {
                  $output[$line_num][] = mb_substr($line, 0);
                  $offset = mb_strlen($line);
                } 
                else {
                  $output[$line_num][] = mb_substr($line,0,$pos_delimiter);
                  $offset = (!empty($pos_enclosure_start) && ($pos_enclosure_start < $pos_delimiter))? $pos_enclosure_start : $pos_delimiter + 1;
                }
              }
              $line = mb_substr($line,$offset);
            }
          } 
          else {
            $line = mb_split("/" . $delimiter . "/", $line);

            /*
             * Validating against pesky extra line breaks creating false rows.
            */
            if (is_array($line) && !empty($line[0])) {
              $output[$line_num] = $line;
            }
          }
        }
        return $output;
      } 
      else {
        return false;
      }
    } 
    else {
      return false;
    }
  }
  else {
    return str_getcsv($input);
  }
}

/**
 * Disables validation on required fields
 *
 * @param $element
 */
function _namecards_import_disable_validation(&$element) {
  unset($element['#needs_validation']);
  foreach(element_children($element) as $key) {
    _namecards_disable_validation($element[$key]);
  }
}

/**
 * Strips the byte-order-mark (BOM) from a UTF-8 encoded string.
 * 
 * @param String $string
 * @return String
 */
function _namecards_import_remove_utf8_bom($string) {
  if (substr($string, 0,3) == pack("CCC", 0xef, 0xbb, 0xbf)) {
    $string = substr($string, 3);
  }
  return $string;
}

/**
 * Sets empty values to NULL
 */
function _namecards_import_set_empty_value_to_null($val) {
  if ($val != '') {
    return $val;
  }
  return NULL;
}

/**
 * Converts a csv string into an array
 *
 * @param string $input
 *   csv string.
 * @param string $delimiter
 *   csv delimiter character.
 * @param string $enclosure
 *   csv enclosing character.
 * @param unknown_type $escape
 * @param unknown_type $eol
 */
function _namecards_import_str_getcsv($input, $delimiter=',', $enclosure='"', $escape=null, $eol=null) {
  $temp=fopen("php://memory", "rw");
  fwrite($temp, $input);
  fseek($temp, 0);
  $r = array();
  while (($data = fgetcsv($temp, 0, $delimiter, $enclosure)) !== false) {
    $r[] = $data;
  }
  fclose($temp);
  
  return $r;
}

/**
 * File upload validation function which checks if file encoding is valid UTF-8
 *
 * @param Object $file
 * @return Array of errors
 */
function _namecards_import_validate_utf8_file($file) {
  $file_content = file_get_contents($file->uri);
  $errors = Array();

  if (!_namecards_import_check_valid_utf8($file_content)) {
    // Not valid UTF-8 encoding so flag an error.
    $errors[] = t('The encoding of the uploaded file is not valid UTF-8. Please ensure that your file has been saved as UTF-8 format before uploading. <em>TIP</em>: to convert your file to UTF-8, first open the file in a text editor (e.g. Windows notepad aplication) and then select "Save as". Be sure to select the UTF-8 encoding option before pressing save. Now try importing the file again.');
  }
  return $errors;
}

/**
 * Batch import finished function
 */
function namecards_import_batch_export_nodes_finished($success, $results, $operations) {
  global $user;
  
  // Resave file contents in order to update database entry. Is required 
  // as the database entry must be updated after adding new content during 
  // the batch operation. 
  $filepath = $results['filepath'];
  $file_handle = fopen($filepath, 'r');
  $content = fread($file_handle, filesize($filepath));
  fclose($file_handle);
  // Resave file.
  $file = file_save_data($content, $filepath, FILE_EXISTS_REPLACE);
  // Update file status to temporary.  Ensures file will be deleted automatically in future. 
  $file->status = 0;
  file_save($file);
  
  // Transfer file to client (i.e. download it).
//   $headers = array(
//     'Content-type: text/csv',
//     'Cache-Control: no-store, no-cache',
//     'Content-disposition: attachment; filename=exported_contacts.csv',
//   );
//   file_transfer($filepath, $headers);
}

/**
 * Batch import processing function
 */
function namecards_import_batch_export_nodes_process($filepath, $nid, $total_num_of_records_to_process, &$context) {
  // Initialize value for $content['results']['processed'].
  if (!isset($content['results']['processed'])) {
    $content['results']['processed'] = 0;
  }

  // Write data to file.
  $file = fopen($filepath, 'a');
  $node = node_load($nid);
  $lang = $node->language;
  
  // Process phone numbers to group based on type.
  $phone = array('work', 'home', 'other');
  if (!empty($node->namecards_namecard_phone[$lang])) {
    foreach ($node->namecards_namecard_phone[$lang] as $item) {
      switch ($item['phone_type']) {
        case NAMECARDS_NUMBER_TYPE_WORK:
          $phone['work'][] = $item['phone_number'];
          break;
        case NAMECARDS_NUMBER_TYPE_HOME:
          $phone['home'][] = $item['phone_number'];
          break;
        case NAMECARDS_NUMBER_TYPE_OTHER:
          $phone['other'][] = $item['phone_number'];
          break;
      }
    }
  }

  // Process fax numbers to group based on type.
  $fax = array('work', 'home', 'other');
  if (!empty($node->namecards_namecard_fax[$lang])) {
    foreach ($node->namecards_namecard_fax[$lang] as $item) {
      switch ($item['fax_type']) {
        case NAMECARDS_NUMBER_TYPE_WORK:
          $fax['work'][] = $item['fax_number'];
          break;
        case NAMECARDS_NUMBER_TYPE_HOME:
          $fax['home'][] = $item['fax_number'];
          break;
        case NAMECARDS_NUMBER_TYPE_OTHER:
          $fax['other'][] = $item['fax_number'];
          break;
      }
    }
  }
  
  $mobile =array();
  if (!empty($node->namecards_namecard_mobile[$lang])) {
    foreach ($node->namecards_namecard_mobile[$lang] as $item) {
      $mobile[] = $item['safe_value'];
    }
  }
  
  $email = array();
  if (!empty($node->namecards_namecard_email[$lang])) {
    foreach ($node->namecards_namecard_email[$lang] as $item) {
      $email[] = $item['safe_value'];
    }
  }
  
  $address = array('work', 'home', 'other', 'remainder');
  if (!empty($node->namecards_namecard_address[$lang])) {
    $num = count($node->namecards_namecard_address[$lang]);
    for ($i = 0; $i < $num; $i++) {
      switch ($i) {
        case 0:  
          if (isset($node->namecards_namecard_address[$lang][$i])) {
            $address['work'] = $node->namecards_namecard_address[$lang][$i];
          }
          break;
        case 1:
          if (isset($node->namecards_namecard_address[$lang][$i])) {
            $address['home'] = $node->namecards_namecard_address[$lang][$i];
          }
          break;
        case 2:
          if (isset($node->namecards_namecard_address[$lang][$i])) {
            $address['other'] = $node->namecards_namecard_address[$lang][$i];
          }
          break;
        default:
          if (isset($node->namecards_namecard_address[$lang][$i])) {
            $address['remainder'][] = $node->namecards_namecard_address[$lang][$i];
          }
          break;
      }
    }
  }
  
  // Create content for notes field.
  $notes = array();
  // Add notes.
  if (!empty($node->namecards_namecard_notes[$lang])) {
    $notes[] = $node->namecards_namecard_notes[$lang][0]['value'];
  }
  
  // Process any remainding values from other fields.
  
  // Process left remaining addresses.
  if (!empty($address['remainder'])) {
    foreach ($address['remainder'] as $item) {
      $notes[] = t('Address: ') . implode(', ', $item);;
    }
  }
  // Process remaining mobile numbers.
  $num = count($mobile);
  if ($num > 1) {
    for ($i = 1; $i < $num; $i++) {
      $notes[] = t('Mobile') . ': ' . $mobile[$i] . "\n";
    }
  }
  // Process remaining email addresses.
  $num = count($email);
  if ($num > 3) {
    for ($i = 3; $i < $num; $i++) {
      $notes[] = 'Email: ' . $email[$i] . "\n";
    }
  }
  // Process remaining phone numbers.
  if (!empty($phone['work'])) {
    $num = count($phone['work']);
    if ($num > 2) {
      for ($i = 2; $i < $num; $i++) {
        $notes[] = t('Work phone: ') . $phone['work'][$i];
      }      
    }
  }
  if (!empty($phone['home'])) {
    $num = count($phone['home']);
    if ($num > 2) {
      for ($i = 2; $i < $num; $i++) {
        $notes[] = t('Home phone: ') . $phone['home'][$i];
      }
    }
  }
  if (!empty($phone['other'])) {
    $num = count($phone['other']);
    if ($num > 1) {
      for ($i = 1; $i < $num; $i++) {
        $notes[] = t('Other phone: ') . $phone['other'][$i];
      }
    }
  }
  // TODO Process remaining fax numbers.
  if (!empty($fax['work'])) {
    $num = count($fax['work']);
    if ($num > 1) {
      for ($i = 2; $i < $num; $i++) {
        $notes[] = t('Work fax: ') . $fax['work'][$i];
      }
    }
  }
  if (!empty($fax['home'])) {
    $num = count($fax['home']);
    if ($num > 1) {
      for ($i = 2; $i < $num; $i++) {
        $notes[] = t('Home fax: ') . $fax['home'][$i];
      }
    }
  }
  if (!empty($fax['other'])) {
    $num = count($fax['other']);
    if ($num > 1) {
      for ($i = 1; $i < $num; $i++) {
        $notes[] = t('Other fax: ') . $fax['other'][$i];
      }
    }
  }
  
  // Developer's note: although positions has multiple values, there is no need to process additional values.  
  // This is because the exported field is a computed field, in which all positions have been merged into a single string.
  
  // TODO Process remaining notes.
  
  $content = array(
    "", // Title
    !empty($node->namecards_namecard_given_name[$lang][0]['safe_value']) ? $node->namecards_namecard_given_name[$lang][0]['safe_value'] : '',
    "", // Middle Name
    check_plain($node->title),
    "", // Suffix
    !empty($node->namecards_namecard_comp_org[$lang][0]['value']) ? $node->namecards_namecard_comp_org[$lang][0]['value'] : '',
    !empty($node->namecards_namecard_comp_dept[$lang][0]['value']) ? $node->namecards_namecard_comp_dept[$lang][0]['value'] : '',
    !empty($node->namecards_namecard_comp_pos[$lang][0]['value']) ? $node->namecards_namecard_comp_pos[$lang][0]['value'] : '',
    !empty($address['work']['street']) ? $address['work']['street'] : '',
    "",
    "",
    !empty($address['work']['city']) ? $address['work']['city'] : '',
    !empty($address['work']['state']) ? $address['work']['state'] : '',
    !empty($address['work']['postcode']) ? $address['work']['postcode'] : '',
    !empty($address['work']['country']) ? $address['work']['country'] : '',
    !empty($address['home']['street']) ? $address['home']['street'] : '',
    "",
    "",
    !empty($address['home']['city']) ? $address['home']['city'] : '',
    !empty($address['home']['state']) ? $address['home']['state'] : '',
    !empty($address['home']['postcode']) ? $address['home']['postcode'] : '',
    !empty($address['home']['country']) ? $address['home']['country'] : '',
    !empty($address['other']['street']) ? $address['other']['street'] : '',
    "",
    "",
    !empty($address['other']['city']) ? $address['other']['city'] : '',
    !empty($address['other']['state']) ? $address['other']['state'] : '',
    !empty($address['other']['postcode']) ? $address['other']['postcode'] : '',
    !empty($address['other']['country']) ? $address['other']['country'] : '',
    "", // Assistant's Phone
    !empty($fax['work'][0]) ? $fax['work'][0] : '',
    !empty($phone['work'][0]) ? $phone['work'][0] : '',
    !empty($phone['work'][1]) ? $phone['work'][1] : '',
    "", // Callback
    "", // Car Phone
    "", // Company Main Phone
    !empty($fax['home'][0]) ? $fax['home'][0] : '',
    !empty($phone['home'][0]) ? $phone['home'][0] : '',
    !empty($phone['home'][1]) ? $phone['home'][1] : '',
    "", // ISDN
    !empty($mobile) ? $mobile[0] : '',
    !empty($fax['other'][0]) ? $fax['other'][0] : '',
    !empty($phone['other'][0]) ? $phone['other'][0] : '',
    "", // Pager
    "", // Primary Phone
    "", // Radio Phone
    "", // TTY/TDD Phone
    "", // Telex
    "", // Account
    "", // Anniversary
    "", // Assistant's Name
    "", // Billing Information
    "", // Birthday
    "", // Business Address PO Box
    "", // Categories
    "", // Children
    "", // Directory Server
    !empty($email[0]) ? $email[0] : '',
    "", // E-mail Type
    "", // E-mail Display Name
    !empty($email[1]) ? $email[1] : '',
    "", // E-mail 2 Type
    "", // E-mail 2 Display Name
    !empty($email[2]) ? $email[2] : '',
    "", // E-mail 3 Type
    "", // E-mail 3 Display Name
    "", // Gender
    "", // Government ID Number
    "", // Hobby
    "", // Home Address PO Box
    "", // Initials
    "", // Internet Free Busy
    "", // Keywords
    "", // Language
    "", // Location
    "", // Manager's Name
    "", // Mileage
    !empty($notes) ? implode("\n", $notes) : '',
    "", // Office Location
    "", // Organizational ID Number
    "", // Other Address PO Box
    "", // Priority
    "Private",
    "", // Profession
    "", // Referred By
    "", // Sensitivity
    "", // Spouse
    "", // User 1
    "", // User 2
    "", // User 3
    "", // User 4
    "", // Web Page
  );
  fputcsv($file, $content,',','"');
  fclose($file);
  
  $node = NULL;
  unset($node);
  
  // Update our progress information.
  $context['results']['processed']++;
  $context['message'] = t('Completed @count out of @total', array('@count' => $context['results']['processed'], '@total' => $total_num_of_records_to_process));
  
  // Inform the batch engine that we are finished this particular operation
  // by setting $context['finished'] = 1. Otherwise the callback will keep
  // looping until all node save operations are complete.
  if ($context['results']['processed'] != $context['sandbox']['max']) {
    $context['results']['filepath'] = $filepath;
    // End operation since only one loop of the operation is required.
    $context['finished'] = 1;
  }
}

/**
 * Creates and saves new contacts
 *
 * @param array $selected_rows
 *   Associative array containing selected csv file line numbers and public setting of contacts' information corresponding to each sekected line.
 */
function namecards_import_batch_save_nodes() {
  $selected_rows = $_SESSION['namecards_import_selected_contacts'];
  unset($_SESSION['namecards_import_selected_contacts']);
  // split array into smaller packets of contacts for batch processing.
  $batch_packets = array_chunk($selected_rows, 30);

  // Create list of batch processing operations.
  $ops = array();
  $num_of_packets = count($batch_packets);
  $total = count($selected_rows);

  // Since nodes are saved in batches/packets we need a way to track overall progress (i.e. cumulative number of nodes saved). To do this need to get the cummulative number of node prior to the current packet. Get the beginning count of contacts for each packet. Used in namecards_import_batch_save_nodes_process() to display number of contacts processed.
  $start_pos = array();
  $start = 0;

  for ($i = 0; $i < $num_of_packets; $i++) {
    $start_pos[$i] = $start;
    $start = $start + count($batch_packets[$i]);
  }

  for ($i = 0; $i < $num_of_packets; $i++) {
    $ops[] = array('namecards_import_batch_save_nodes_process', array($batch_packets[$i], $start_pos[$i], $total));
  }

  $batch = array(
    'operations' => $ops,
    'finished' => 'namecards_import_batch_save_nodes_finished',
    'title' => t('Importing contacts'),
    'init_message' => t('Starting to import contacts.'),
    'progress_message' => t('Processing...'),
    'error_message' => t('An error has occured whilst importing contacts.'),
  );

  batch_set($batch);
  batch_process('namecards/settings');
}

/**
 * Batch 'finished' callback
 */
function namecards_import_batch_save_nodes_finished($success, $results, $operations) {
  if ($success) {
    // Here we do something meaningful with the results.
    if (!empty($results['saved'])) {
      drupal_set_message(format_plural(count($results['saved']), '1 contact imported.', '@count contacts imported.'));
    }
    if (!empty($results['error'])) {
      $message = t('The following contacts could not be imported: ');
      $message .= implode(', ', $results['error']) . '. ';
      drupal_set_message($message, 'error');
    }
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
    drupal_set_message($message, 'error');
  }

  unset($_SESSION['namecards_csv_file']);
  drupal_goto('namecards/settings');
}

/**
 * Batch processing callback
 *
 * Saves the node.
 *
 * @param object $node
 *   Node to be saved.
 * @param integer $num_of_nodes
 *   Total number of nodes to save.
 * @param array $context
 *   Passed automatically by batch API.
 */
function namecards_import_batch_save_nodes_process($packet, $start_pos, $total_num_of_records_to_process, &$context) {

  $email_program = $_SESSION['namecards_csv_file']->email_format;

  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = $start_pos;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = $total_num_of_records_to_process;
  }

  // Get selected lines from file.
  $selected = array();
  $lines = array();
  $lines[] = 0;

  foreach ($packet as $index => $value) {
    $lines[] = $value['line_num'];
  }

  $highest_line_num = max($lines);

  $handle = fopen($_SESSION['namecards_csv_file']->uri, 'r');
  $i = 0;
  if ($handle) {
    // Set correct locale to avoid any issues with multibyte characters.
    $original_local_value = setlocale(LC_CTYPE, 0);
    if ($original_local_value !== 'en_US.UTF-8') {
      setlocale(LC_CTYPE, 'en_US.UTF-8');
    }
    // Extract data
    while (($data = fgetcsv($handle, 0, ",")) !== FALSE) {
      if (in_array($i, $lines)) {
        $selected[] = $data;
      }
      $i++;
      if ($i > $highest_line_num) {
        break;
      }
    }
    fclose($handle);
    // Restore original locale value.
    setlocale(LC_CTYPE, $original_local_value);
  }

  // Parse handler variable to create a nicely formatted array representing the contact.
  $contacts = _namecards_import_parse_csv_info($selected, $email_program, TRUE);
  $organizations = array();
  $departments = array();
  $positions = array();

  // Get all unique values for org, department, position.
  $num_of_contacts = count($contacts);
  for ($i = 0; $i < $num_of_contacts; $i++) {
    if (isset($contacts[$i]['organization'])) {
      $organizations[] = $contacts[$i]['organization'];
    }
    if (isset($contacts[$i]['department'])) {
      $departments[] = $contacts[$i]['department'];
    }
    if (isset($contacts[$i]['position'])) {
      $positions[] = $contacts[$i]['position'];
    }
  }

  // Disable maintenance of the {node_comment_statistics} table. See 
  // comment_node_insert() in file 'comment.module'.
  $comment_maintain_node_statistics = variable_get('comment_maintain_node_statistics', NULL);
  variable_set('comment_maintain_node_statistics', FALSE);
  
  // Create associative array of linked node titles and corresponding nids.
  $organizations = _namecards_import_covert_to_associative_array($organizations, 'namecards_organization');
  $departments = _namecards_import_covert_to_associative_array($departments, 'namecards_department');
  $positions = _namecards_import_covert_to_associative_array($positions, 'namecards_position');

  for ($i = 0; $i < $num_of_contacts; $i++) {
    // Build complete node object.
    $saved_node = _namecards_import_create_node($contacts[$i], $organizations, $positions, $departments, $packet[$i]['public']);

    // Check node save operation completed successfully.
    if (!empty($saved_node['nid'])) {
      $context['results']['saved'][] = check_plain($saved_node['title']);
    }
    else {
      $context['results']['error'][] = check_plain($saved_node['title']);
    }
    
    // Update our progress information.
    $context['sandbox']['progress']++;
    $context['message'] = t('Completed @count out of @total', array('@count' => $context['sandbox']['progress'], '@total' => $total_num_of_records_to_process));
  }

  // Re-enable maintenance of the {node_comment_statistics} table.  See 
  // comment_node_insert() in file 'comment.module'.
  variable_set('comment_maintain_node_statistics', $comment_maintain_node_statistics);
  
  
  // Inform the batch engine that we are finished this particular operation
  // by setting $context['finished'] = 1. Otherwise the callback will keep
  // looping until all node save operations are complete.
  if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
    $context['finished'] = 1;
  }

  // Free memory by unsetting vars.
  $selected = null;
  $placeholder = null;
  $organizations = null;
  $departments = null;
  $positions = null;
  unset($selected, $placeholder, $organizations, $departments, $positions);
}

/**
 * Submit function for exporting contacts.
 */
function namecards_import_export_contacts_submit($form, &$form_state) {
  global $user;
  $nids = array();
  $ops = array();

  switch ($form_state['values']['export_options']) {
    case 0:
      // Export my contacts only.
      $results = db_query('SELECT n.nid FROM {node} n WHERE n.type = \'namecards_namecard\' AND n.uid = :uid', array(':uid' => $user->uid));
      break;
    case 1:
      // Export my contacts plus other public contacts.
      $query = db_select('node', 'n');
      $table_alias = $query->leftJoin('field_data_namecards_namecard_public', 'fdnnp', 'n.nid = fdnnp.entity_id');
      $query
        ->condition('n.type', 'namecards_namecard')
        ->condition(db_or()->condition($table_alias . '.namecards_namecard_public_value ', 1)->condition('n.uid', $user->uid))
        ->fields('n', array('nid'));
      
      $results = $query->execute();
      break;
  }
  
  // Parse results.
  foreach ($results as $result) {
    $nids[] = $result->nid;
  }
  
  
  // Create tmp csv file and write first line containing field labels.
  $filename = 'temporary://' . 'namecards_import_' . uniqid(mt_rand(), FALSE) . '.csv';
  // Create file and reqister with drupal database.
  $file = file_save_data('', $filename);
  $file_handle = fopen($filename, 'a');
  $headers = array("Title","First Name","Middle Name","Last Name","Suffix","Company","Department","Job Title","Business Street","Business Street 2","Business Street 3","Business City","Business State","Business Postal Code","Business Country/Region","Home Street","Home Street 2","Home Street 3","Home City","Home State","Home Postal Code","Home Country/Region","Other Street","Other Street 2","Other Street 3","Other City","Other State","Other Postal Code","Other Country/Region","Assistant's Phone","Business Fax","Business Phone","Business Phone 2","Callback","Car Phone","Company Main Phone","Home Fax","Home Phone","Home Phone 2","ISDN","Mobile Phone","Other Fax","Other Phone","Pager","Primary Phone","Radio Phone","TTY/TDD Phone","Telex","Account","Anniversary","Assistant's Name","Billing Information","Birthday","Business Address PO Box","Categories","Children","Directory Server","E-mail Address","E-mail Type","E-mail Display Name","E-mail 2 Address","E-mail 2 Type","E-mail 2 Display Name","E-mail 3 Address","E-mail 3 Type","E-mail 3 Display Name","Gender","Government ID Number","Hobby","Home Address PO Box","Initials","Internet Free Busy","Keywords","Language","Location","Manager's Name","Mileage","Notes","Office Location","Organizational ID Number","Other Address PO Box","Priority","Private","Profession","Referred By","Sensitivity","Spouse","User 1","User 2","User 3","User 4","Web Page");
  fputcsv($file_handle, $headers,',','"');
  fclose($file_handle);
  
  $form_state['rebuild'] = TRUE;
  $form_state['namecards_import']['csv_file_object'] = $file;
  
  
  // Setup batch.
  $total_num_of_jobs = count($nids);
  foreach ($nids as $nid) {
    $ops[] = array('namecards_import_batch_export_nodes_process', array($filename, $nid, $total_num_of_jobs));
  }
  $batch = array(
    'operations' => $ops,
    'finished' => 'namecards_import_batch_export_nodes_finished',
    'title' => t('Importing contacts'),
    'init_message' => t('Starting to import contacts.'),
    'progress_message' => t('Processing...'),
    'error_message' => t('An error has occured whilst importing contacts.'),
  );
  
  // Execute batch.
  batch_set($batch);
}

/**
 * Submit function for import file button
 *
 * Processes uploaded file.
 *
 * @param $form
 * @param $form_state
 */
function namecards_import_form_import_file_submit($form, &$form_state) {
  $email_client = $form_state['values']['email_client'];
  
  $validators = array(
    'file_validate_extensions' => array('csv'),
    'namecards_import_validate_file' => array(),
    '_namecards_import_validate_utf8_file' => array(),
  );

  if ($file = file_save_upload('import_file', $validators)) {
    if (strtolower($file->filemime) == 'text/csv') {
      // Strip UTF-8 byte-order-mark (BOM) from file contents.
      $file_content = file_get_contents($file->uri);
      $file_content = _namecards_import_remove_utf8_bom($file_content);
      file_put_contents($file->uri, $file_content);
      
      // Get rid of unwanted newline chars in file. For some reason
      // outlook produces CSV files which contain newline characters
      // within the data to import, which causes problem when iterating
      // through the file.
      if ($email_client == 'outlook') {
        $temp = file_get_contents($file->uri);
        $temp = preg_replace('/"\r\n"\,|"\n"\,/', '""', $temp);
        $handler = new SplFileObject($file->uri, 'w+');
        $handler->fwrite($temp);
      }

      // Add form specific final processing
      switch ($form['#form_id']) {
        // Following code block processes CSV file submit via 
        // namecards_namecard_node_form.  This functionality has been 
        // removed for the time being. 
        /* case 'namecards_namecard_node_form':
          // Set correct locale to avoid any issues with multibyte characters.
          $original_local_value = setlocale(LC_CTYPE, 0);
          if ($original_local_value !== 'en_US.UTF-8') {
            setlocale(LC_CTYPE, 'en_US.UTF-8');
          }
          // Load raw csv content into a handler variable.
          $handle = fopen($file->uri, "rw");
          $cardinfo = array();
          $i = 0;
          while (($data = fgetcsv($handle, 5000, ",")) !== FALSE) {
    	      // Only read first two lines (labels and first contact).
            if ($i > 1) {
    	        break;
    	      }
            $cardinfo[] = $data;
    	      $i++;
          }
          fclose($handle);
          // Restore original locale value.
          setlocale(LC_CTYPE, $original_local_value);
                    
          // Parse handler variable to create a nicely formatted array representing the contact.
          $contacts = _namecards_import_parse_csv_info($cardinfo, $email_client, TRUE);
          // Convert data to a format for later insertion into node object. 
          $contacts_fields = _namecards_import_convert_to_node_fields($contacts);
          $_SESSION['namecards_import_contact_fields'] = $contacts_fields;
//           $form_state['namecards_import']['contacts_fields'] = $contacts_fields;
          $form_state['rebuild'] = TRUE;
          $form_state['namecards_modal_reload'] = TRUE;
          drupal_goto('namecards/add_contact');
          break; */
    
        case 'namecards_user_settings_form':
          // Add email client info to file object.
          $file->email_format = $email_client;
    
          // Save file name for future reference.
          $_SESSION['namecards_csv_file'] = $file;
    
          // Redirect to import contacts selection page
          drupal_goto('namecards/import_select_contacts');
          break;
      }
    }
  }
}

/**
 * Perform validation of uploaded file
 * 
 * Throws error if $errors returns populated array.
 * 
 */ 
function namecards_import_validate_file($file) {
  $errors = array();
  
  if (empty($file->filename) || empty($file->filesize) || $file->filemime !== 'text/csv') {
    // Set error as empty string.  This ensures error is triggered
    // without specifying any error text.
    $errors[] = t('Please try again.  If the problem persists, please contact your system adminstrator.');
  }
  
  return $errors;
}

/**
 * Check string is UTF-8 encoded
 * 
 * From http://cn.php.net/manual/en/function.mb-check-encoding.php#95289
 * 
 * @param String $str
 * @return Boolean
 *   Returns whether or not the string encoding is valid UTF-8. 
 */
function _namecards_import_check_valid_utf8($str) {
  $len = strlen($str);
  for($i = 0; $i < $len; $i++){
    $c = ord($str[$i]);
    if ($c > 128) {
      if (($c > 247)) {
        return false;
      }
      elseif ($c > 239) {
        $bytes = 4;
      }
      elseif ($c > 223) {
        $bytes = 3;
      }
      elseif ($c > 191) {
        $bytes = 2;
      }
      else {
        return false;
      }
      if (($i + $bytes) > $len) {
        return false;
      }
      while ($bytes > 1) {
        $i++;
        $b = ord($str[$i]);
        if ($b < 128 || $b > 191) {
          return false;
        }
        $bytes--;
      }
    }
  }
  return true;
}

/**
 * 
 * @param unknown_type $contact
 */
function _namecards_import_convert_to_node_fields($contact) {
  $node_fields_array = array();
  $lang = LANGUAGE_NONE;
  $i = 0;
  
  if (isset($contact[$i]['surname']) && $contact[$i]['surname'] != NULL) {
    $node_fields_array['title'] = check_plain($contact[$i]['surname']);
  }
  if (isset($contact[$i]['given_name']) && $contact[$i]['given_name'] != NULL) {
    $node_fields_array['namecards_namecard_given_name'][$lang][$i]['value'] = check_plain($contact[$i]['given_name']);
  }
  if (isset($contact[$i]['nickname']) && $contact[$i]['nickname'] != NULL) {
    $node_fields_array['namecards_namecard_nickname'][$lang][$i]['value'] = check_plain($contact[$i]['nickname']);
  }
  if (isset($contact[$i]['organization']) && $contact[$i]['organization'] != NULL) {
    $nid = db_query('SELECT n.nid FROM {node} n WHERE n.title = :title AND n.type = \'namecards_organization\'', array(':title' => $contact[$i]['organization']))->fetchField();
    if (!empty($nid)) {
      // If the org exists, set the value to the org node's nid.
      $node_fields_array['namecards_namecard_organization'][$lang][$i]['nid'] = $nid;
    }
    else {
      // Set the string to be written to the organization field in the node form. The actual value is added to the form field during implementation of hook_form_alter().
      $node_fields_array['namecards_namecard_organization'][$lang][$i]['value'] = check_plain($contact[$i]['organization']);
    }
  }
  if (isset($contact[$i]['position']) && $contact[$i]['position'] != NULL) {
    $nid = db_query('SELECT n.nid FROM {node} n WHERE title = :title AND type = \'namecards_position\'', array(':title' => $contact[$i]['position']))->fetchField();
    if (!empty($nid)) {
      // If the org exists, set the value to the org node's nid.
      $node_fields_array['namecards_namecard_position'][$lang][$i]['nid'] = $nid;
    }
    else {
      // Set the string to be written to the organization field in the node form. The actual value is added to the form field during implementation of hook_form_alter().
      $node_fields_array['namecards_namecard_position'][$lang][$i]['value'] = check_plain($contact[$i]['position']);
    }
  }
  if (isset($contact[$i]['department']) && $contact[$i]['department'] != NULL) {
    $nid = db_query('SELECT n.nid FROM {node} n WHERE title = :title AND type = \'namecards_department\'', array(':title' => $contact[$i]['department']))->fetchField();
    if (!empty($nid)) {
      // If the org exists, set the value to the org node's nid.
      $node_fields_array['namecards_namecard_department'][$lang][$i]['nid'] = $nid;
    }
    else {
      // Set the string to be written to the organization field in the node form. The actual value is added to the form field during implementation of hook_form_alter().
      $node_fields_array['namecards_namecard_department'][$lang][$i]['value'] = check_plain($contact[$i]['department']);
    }
  }
  if (isset($contact[$i]['phone'])) {
    for ($j = 0; $j < count($contact[$i]['phone']); $j++) {
      if ($contact[$i]['phone'][$j]['value'] != NULL && $contact[$i]['phone'][$j]['type'] != NULL) {
        $node_fields_array['namecards_namecard_phone'][$lang][$j]['phone_number'] = check_plain($contact[$i]['phone'][$j]['value']);
        $node_fields_array['namecards_namecard_phone'][$lang][$j]['phone_type'] = _namecards_import_get_number_type($contact[$i]['phone'][$j]['type']);
        $node_fields_array['namecards_namecard_phone'][$lang][$j]['_weight'] = $j;
        //         $form_state['values']['namecards_namecard_phone'][$lang][$j]['_error_element'] = 'namecards_namecard_phone][' . $j . '][value';
      }
    }
  }
  if (isset($contact[$i]['fax'])) {
    for ($j = 0; $j < count($contact[$i]['fax']); $j++) {
      if ($contact[$i]['fax'][$j]['value'] != NULL && $contact[$i]['fax'][$j]['type'] != NULL) {
        $node_fields_array['namecards_namecard_fax'][$lang][$j]['fax_number'] = check_plain($contact[$i]['fax'][$j]['value']);
        $node_fields_array['namecards_namecard_fax'][$lang][$j]['fax_type'] = _namecards_import_get_number_type($contact[$i]['fax'][$j]['type']);
        $node_fields_array['namecards_namecard_fax'][$lang][$j]['_weight'] = $j;
        //         $form_state['values']['namecards_namecard_fax'][$lang][$j]['_error_element'] = 'namecards_namecard_fax][' . $j . '][value';
      }
    }
  }
  if (isset($contact[$i]['mobile'])) {
    for ($j = 0; $j < count($contact[$i]['mobile']); $j++) {
      if ($contact[$i]['mobile'][$j] != NULL) {
        $node_fields_array['namecards_namecard_mobile'][$lang][$j]['value'] = check_plain($contact[$i]['mobile'][$j]);
        $node_fields_array['namecards_namecard_mobile'][$lang][$j]['_weight'] = $j;
        //         $form_state['values']['namecards_namecard_mobile'][$lang][$j]['_error_element'] = 'namecards_namecard_mobile][' . $j . '][value';
      }
    }
  }
  if (isset($contact[$i]['email'])) {
    for ($j = 0; $j < count($contact[$i]['email']); $j++) {
      if ($contact[$i]['email'][$j] != NULL) {
        $node_fields_array['namecards_namecard_email'][$lang][$j]['value'] = check_plain($contact[$i]['email'][$j]);
        $node_fields_array['namecards_namecard_email'][$lang][$j]['_weight'] = $j;
        //         $form_state['values']['namecards_namecard_email'][$lang][$j]['_error_element'] = 'namecards_namecard_email][' . $j . '][value';
      }
    }
  }
  if ($contact[$i]['address']) {
    $j = 0;
    foreach ($contact[$i]['address'] as $key => $value) {
      //for ($j = 0; $j < count($contact[$i]['address']); $j++) {
      $node_fields_array['namecards_namecard_address'][$lang][$j]['street'] = !empty($contact[$i]['address'][$key]['street']) ? check_plain($contact[$i]['address'][$key]['street']) : '';
      //$form_state['values']['namecards_namecard_address'][$j]['district'] = ''; // Not used as imported CSV files do not contain a district/suburb field.
      $node_fields_array['namecards_namecard_address'][$lang][$j]['city'] = !empty($contact[$i]['address'][$key]['city']) ? check_plain($contact[$i]['address'][$key]['city']) : '';
      $node_fields_array['namecards_namecard_address'][$lang][$j]['state'] = !empty($contact[$i]['address'][$key]['state']) ? check_plain($contact[$i]['address'][$key]['state']) : '';
      $node_fields_array['namecards_namecard_address'][$lang][$j]['postcode'] = !empty($contact[$i]['address'][$key]['postcode']) ? check_plain($contact[$i]['address'][$key]['postcode']) : '';
      $node_fields_array['namecards_namecard_address'][$lang][$j]['country'] = !empty($contact[$i]['address'][$key]['country']) ? check_plain($contact[$i]['address'][$key]['country']) : '';
      $j++;
    }
    // Remove any empty address blocks. Prevents sending any blank address elements.
    $num = count($node_fields_array['namecards_namecard_address'][$lang]);
    for ($i = 0; $i < $num; $i++) {
      $delete_block = TRUE;
      foreach ($node_fields_array['namecards_namecard_address'][$lang][$i] as $address_element) {
        if (!empty($address_element)) {
          $delete_block = FALSE;
          break;
        }
      }
      if ($delete_block == TRUE) {
        unset($node_fields_array['namecards_namecard_address'][$lang][$i]);
      }
    }
  }
  
  return $node_fields_array;
}

/**
 * Adds values to $form_state so that they can to added to relevant
 * form fields when the node form is rebuilt.
 *
 * @param $form_state
 * @param $contact
 *   An array containing the contact information for a given contact.
 */
function _namecards_import_alter_form_state_values(&$form_state, $contact) {
  // Currently this function only works for a single contact; however, in
  // the future it may be expanded to process multiple contacts.  Thus,
  // have used $i incase it is needed in the future.
  $i = 0;
  $lang = $form_state['node']->language;

  if (isset($contact[$i]['surname']) && $contact[$i]['surname'] != NULL) {
    $form_state['values']['title'] = check_plain($contact[$i]['surname']);
  }
  if (isset($contact[$i]['given_name']) && $contact[$i]['given_name'] != NULL) {
    $form_state['values']['namecards_namecard_given_name'][$lang][$i]['value'] = check_plain($contact[$i]['given_name']);
  }
  if (isset($contact[$i]['nickname']) && $contact[$i]['nickname'] != NULL) {
    $form_state['values']['namecards_namecard_nickname'][$lang][$i]['value'] = check_plain($contact[$i]['nickname']);
  }
  if (isset($contact[$i]['organization']) && $contact[$i]['organization'] != NULL) {
    $nid = db_query('SELECT n.nid FROM {node} n WHERE n.title = :title AND n.type = \'namecards_organization\'', array(':title' => $contact[$i]['organization']))->fetchField();
    if (!empty($nid)) {
      // If the org exists, set the value to the org node's nid.
      $form_state['values']['namecards_namecard_organization'][$lang][$i]['nid'] = $nid;
    }
    else {
      // Set the string to be written to the organization field in the node form. The actual value is added to the form field during implementation of hook_form_alter().
      $form_state['storage']['namecards_import']['values']['organization'] = check_plain($contact[$i]['organization']);
    }
  }
  if (isset($contact[$i]['position']) && $contact[$i]['position'] != NULL) {
    $nid = db_query('SELECT n.nid FROM {node} n WHERE title = :title AND type = \'namecards_position\'', array(':title' => $contact[$i]['position']))->fetchField();
    if (!empty($nid)) {
      // If the org exists, set the value to the org node's nid.
      $form_state['values']['namecards_namecard_position'][$lang][$i]['nid'] = $nid;
    }
    else {
      // Set the string to be written to the organization field in the node form. The actual value is added to the form field during implementation of hook_form_alter().
      $form_state['storage']['namecards_import']['values']['position'] = check_plain($contact[$i]['position']);
    }
  }
  if (isset($contact[$i]['department']) && $contact[$i]['department'] != NULL) {
    $nid = db_query('SELECT n.nid FROM {node} n WHERE title = :title AND type = \'namecards_department\'', array(':title' => $contact[$i]['department']))->fetchField();
    if (!empty($nid)) {
      // If the org exists, set the value to the org node's nid.
      $form_state['values']['namecards_namecard_department'][$lang][$i]['nid'] = $nid;
    }
    else {
      // Set the string to be written to the organization field in the node form. The actual value is added to the form field during implementation of hook_form_alter().
      $form_state['storage']['namecards_import']['values']['department'] = check_plain($contact[$i]['department']);
    }
  }
  if (isset($contact[$i]['phone'])) {
    for ($j = 0; $j < count($contact[$i]['phone']); $j++) {
      if ($contact[$i]['phone'][$j]['value'] != NULL) {
        $form_state['values']['namecards_namecard_phone'][$lang][$j]['value'] = check_plain($contact[$i]['phone'][$j]['value']);
        $form_state['values']['namecards_namecard_phone'][$lang][$j]['_weight'] = $j;
//         $form_state['values']['namecards_namecard_phone'][$lang][$j]['_error_element'] = 'namecards_namecard_phone][' . $j . '][value';
      }
    }
  }
  if (isset($contact[$i]['fax'])) {
    for ($j = 0; $j < count($contact[$i]['fax']); $j++) {
      if ($contact[$i]['fax'][$j]['value'] != NULL) {
        $form_state['values']['namecards_namecard_fax'][$lang][$j]['value'] = check_plain($contact[$i]['fax'][$j]['value']);
        $form_state['values']['namecards_namecard_fax'][$lang][$j]['_weight'] = $j;
//         $form_state['values']['namecards_namecard_fax'][$lang][$j]['_error_element'] = 'namecards_namecard_fax][' . $j . '][value';
      }
    }
  }
  if (isset($contact[$i]['mobile'])) {
    for ($j = 0; $j < count($contact[$i]['mobile']); $j++) {
      if ($contact[$i]['mobile'][$j] != NULL) {
        $form_state['values']['namecards_namecard_mobile'][$lang][$j]['value'] = check_plain($contact[$i]['mobile'][$j]);
        $form_state['values']['namecards_namecard_mobile'][$lang][$j]['_weight'] = $j;
//         $form_state['values']['namecards_namecard_mobile'][$lang][$j]['_error_element'] = 'namecards_namecard_mobile][' . $j . '][value';
      }
    }
  }
  if (isset($contact[$i]['email'])) {
    for ($j = 0; $j < count($contact[$i]['email']); $j++) {
      if ($contact[$i]['email'][$j] != NULL) {
        $form_state['values']['namecards_namecard_email'][$lang][$j]['value'] = check_plain($contact[$i]['email'][$j]);
        $form_state['values']['namecards_namecard_email'][$lang][$j]['_weight'] = $j;
//         $form_state['values']['namecards_namecard_email'][$lang][$j]['_error_element'] = 'namecards_namecard_email][' . $j . '][value';
      }
    }
  }
  if ($contact[$i]['address']) {
    $j = 0;
    foreach ($contact[$i]['address'] as $key => $value) {
    //for ($j = 0; $j < count($contact[$i]['address']); $j++) {
      $form_state['values']['namecards_namecard_address'][$j]['street'] = check_plain($contact[$i]['address'][$key]['street']);
      //$form_state['values']['namecards_namecard_address'][$j]['district'] = ''; // Not used as imported CSV files do not contain a district/suburb field.
      $form_state['values']['namecards_namecard_address'][$j]['city'] = check_plain($contact[$i]['address'][$key]['city']);
      $form_state['values']['namecards_namecard_address'][$j]['state'] = check_plain($contact[$i]['address'][$key]['state']);
      $form_state['values']['namecards_namecard_address'][$j]['postcode'] = check_plain($contact[$i]['address'][$key]['postcode']);
      $form_state['values']['namecards_namecard_address'][$j]['country'] = check_plain($contact[$i]['address'][$key]['country']);
      $form_state['values']['namecards_namecard_address'][$j]['_weight'] = $j;
      $j++;
    }
  }
}

/**
 * Create a new contact node object
 * 
 * @param array $contact
 *   Contains new contact's data (e.g. surname, phone, email address, etc).
 * @param int $public
 *   Contact privacy setting for new node. 1 = public, 0 = private.
 * @param array $organizations
 *   Name and nids of existing organizations in system.
 * @param array $positions
 *   Name and nids of existing positions in system.
 * @param array $departments
 *   Name and nids of existing departments in system.
 * @return array
 *   NID and title of new node.
 */
function _namecards_import_create_node($contact, $organizations, $positions, $departments, $public = 0) {
  global $user;

  // Create node object.
  $new_node = new stdClass();
  $new_node->type = 'namecards_namecard';
  node_object_prepare($new_node);

  // Add additional node properties.
  $new_node->title = $contact['surname'];
  $new_node->language = LANGUAGE_NONE;
  $new_node->uid = $user->uid;
  $new_node->created = strtotime("now");
  $new_node->changed = strtotime("now");
  $new_node->status = 1;
  $new_node->comment = 0;
  $new_node->promote = 0;
  $new_node->moderate = 0;
  $new_node->sticky = 0;

  // Add CCK fields. I know shouldn't use shorthand IF statements in Drupal, but it makes things much cleaner here.
  // Set default value for field_public as this is a required field.
  $new_node->namecards_namecard_public[$new_node->language][0]['value'] = $public;

  if (isset($contact['given_name'])) {
    $new_node->namecards_namecard_given_name[$new_node->language][0]['value'] = $contact['given_name'];
  }

  // Add organization.
  if (isset($contact['organization'])) {
    $org_name = $contact['organization'];
    $org_nid = $organizations[$org_name];
    $new_node->namecards_namecard_organization[$new_node->language][0]['nid'] = $org_nid;
  }
  else {
    $new_node->namecards_namecard_organization = array();
  }

  // Add position.
  if (isset($contact['position'])) {
    $position_name = $contact['position'];
    $position_nid = $positions[$position_name];
    $new_node->namecards_namecard_position[$new_node->language][0]['nid'] = $position_nid;
  }
  else {
    $new_node->namecards_namecard_position = array();
  }

  // Add department.
  if (isset($contact['department'])) {
    $department_name = $contact['department'];
    $department_nid = $departments[$contact['department']];
    $new_node->namecards_namecard_department[$new_node->language][0]['nid'] = $department_nid;
  }
  else {
    $new_node->namecards_namecard_department = array();
  }
  
  // Add phone.
  if (isset($contact['phone'])) {
    $num = count($contact['phone']);
    for ($i = 0; $i < $num; $i++) {
      if (!empty($contact['phone'][$i]['type']) && !empty($contact['phone'][$i]['value'])) {
        $new_node->namecards_namecard_phone[$new_node->language][] = array('phone_number' => $contact['phone'][$i]['value'], 'phone_type' => _namecards_import_get_number_type($contact['phone'][$i]['type']));
      }
    }
  }

  // Add mobile.
  if (isset($contact['mobile'])) {
    $num = count($contact['mobile']);
    for ($i = 0; $i < $num; $i++) {
      $new_node->namecards_namecard_mobile[$new_node->language][] = array('value' => $contact['mobile'][$i]);
    }
  }
  else {
    $new_node->namecards_namecard_mobile[$new_node->language][0]['value'] = NULL;
  }

  // Add fax.
  if (isset($contact['fax'])) {
    $num = count($contact['fax']);
    for ($i = 0; $i < $num; $i++) {
    if (!empty($contact['phone'][$i]['type']) && !empty($contact['phone'][$i]['value'])) {
        $new_node->namecards_namecard_fax[$new_node->language][] = array('fax_number' => $contact['fax'][$i]['value'], 'fax_type' => _namecards_import_get_number_type($contact['fax'][$i]['type']));
      }
    }
  }

  // Add email.
  if (isset($contact['email'])) {
    $num = count($contact['email']);
    for ($i = 0; $i < $num; $i++) {
      $new_node->namecards_namecard_email[$new_node->language][] = array('value' => $contact['email'][$i]);
    }
  }
  else {
    $new_node->namecards_namecard_email[$new_node->language][0]['value'] = NULL;
  }

  // Add address.
  if (isset($contact['address'])) {
    $index = 0;
    foreach ($contact['address'] as $address_details) {
      $new_node->namecards_namecard_address[$new_node->language][$index]['street'] = !empty($address_details['street']) ? $address_details['street'] : '';
      // Set district field blank as neither outlook or thunderbird contain a district field.
      $new_node->namecards_namecard_address[$new_node->language][$index]['district'] = '';
      $new_node->namecards_namecard_address[$new_node->language][$index]['city'] = !empty($address_details['city']) ? $address_details['city'] : '';
      $new_node->namecards_namecard_address[$new_node->language][$index]['state'] = !empty($address_details['state']) ? $address_details['state'] : '';
      $new_node->namecards_namecard_address[$new_node->language][$index]['postcode'] = !empty($address_details['postcode']) ? $address_details['postcode'] : '';
      $new_node->namecards_namecard_address[$new_node->language][$index]['country'] = !empty($address_details['country']) ? $address_details['country'] : '';
      $index++;
    }
  }

  // Put remainding info into notes field.
  if (isset($contact['notes'])) {
    $new_node->namecards_namecard_notes[$new_node->language][0]['value'] = $contact['notes'];
  }
  
  // Save the node.
  node_save($new_node);
  
  // Get nid of saved node. Used to check if node was saved.
  $saved_node_nid = $new_node->nid;
  $saved_node_title = $new_node->title;
  
  // Free memory by unsetting $node.
  $node = null;
  unset($node);
  
  return array('nid' => $saved_node_nid, 'title' => $saved_node_title);
}

/**
 * Creates an associative array of node title and corresponding nid
 *
 *
 * @param array $node_titles
 *   Contains titles for a given node type.
 * @param string $node_type
 *   Name of node type
 * @return
 *   Associative array containing node title as key and nid as value.
 */
function _namecards_import_covert_to_associative_array($node_titles, $node_type) {
  global $user;
  $nids = array();

  // Exit in event of empty array.
  if (empty($node_titles)) {
    return array();
  }

  // Create array of unique values.
  $node_titles = array_unique($node_titles);

  // Construct associative array.
  $count = count($node_titles);
  for ($i = 0; $i < $count; $i++) {
    $key = $node_titles[$i];
    $nids[$key] = NULL;
  }

  // Populate with node nid if already exists in database. 
  $node_titles_string = '';
  $num = count($node_titles);
  for ($i = 0; $i < $num; $i++) {
    $node_titles[$i] = $node_titles[$i];
  }
  $node_titles_string = implode(',', $node_titles);
  $results = db_query('SELECT n.title, n.nid FROM {node} n WHERE n.type = :type AND n.title IN (:placeholders)', array(':type' => $node_type, ':placeholders' => $node_titles));
  foreach ($results as $result) {
    $nids[$result->title] = $result->nid;
  }

  // Create new nodes if given node title doesn't exist.
  foreach ($nids as $title => $nid) {
    if ($nid == NULL) {
      // Create node.
      $new_node = new stdClass();
      $new_node->type = $node_type;
      node_object_prepare($new_node);
      
      // Add additional node properties.
      $new_node->language = LANGUAGE_NONE;
      $new_node->title = $title;
      $new_node->uid = $user->uid;
      $new_node->created = strtotime("now");
      $new_node->changed = strtotime("now");
      $new_node->status = 1;
      $new_node->comment = 0;
      $new_node->promote = 0;
      $new_node->moderate = 0;
      $new_node->sticky = 0;

      // Save node.
      node_save($new_node);

      // Add newly created nid to array of title/nid key pairs.
      $nids[$title] = $new_node->nid;

      // TODO: Add error handling.
    }
  }

  return $nids;
}

/**
 * Creates an associative array which is structured for easier parsing by the parsing function "_namecards_import_parse_csv_info".
 *
 * @param array $cardinfo
 * @return $temp_array
 *   Associative array containing preprecess data for a given contact.
 */
function _namecards_import_preprocess_csv_info($cardinfo) {
  $temp_array = array();
  $num_contacts = count($cardinfo) - 1; // First cell of array is title info so subtract from count.
  $num_items = count($cardinfo[0]); // First line of CSV contains title of each item hence use of $cardinfo[0].
  for ($i = 0; $i < $num_contacts; $i++) {
    for ($j = 0; $j < $num_items; $j++) {
      if (!empty($cardinfo[0][$j]) && !empty($cardinfo[$i + 1][$j])) {
        // Note use of "$cardinfo[$i + 1]", required as $cardinfo[0] only contains field title information.
        $temp_array[$i][$cardinfo[0][$j]] = $cardinfo[$i + 1][$j];
      }
    }
  }
//   dsm($temp_array);
  return $temp_array;
}

/**
 * Creates an associative array representing the contact imported contact.
 *
 * @param array $cardinfo
 * @param string $email_client
 * @param boolean $full_scan
 *   If TRUE will extract all contact info for each contact. If FALSE will only extract a subset of contact info.
 */
function _namecards_import_parse_csv_info($cardinfo, $email_client, $full_scan = TRUE) {
  // preprocess the imported data for easier parsing.
  $preprocessed_card_info = _namecards_import_preprocess_csv_info($cardinfo);
  
  // Create array $contact to hold extracted info.  This will be returned at end of function.
  $contact = array();
  $num = count($preprocessed_card_info);
  $business_street_temp = array();
  $home_street_temp = array();
  $other_street_temp = array();

  for ($i = 0; $i < $num; $i++) {
    // Reset temporary storage arrays.
    $business_street_temp = array();
    $home_street_temp = array();
    $other_street_temp = array();
    
    foreach ($preprocessed_card_info[$i] as $key => $item) {
      
      switch ($email_client) {
        case 'outlook':
          switch ($key) {
            case 'Last Name':
              if (!empty($item)) {
                $contact[$i]['surname'] = _namecards_import_set_empty_value_to_null($item);
              }
              else {
                $contact[$i]['surname'] = theme('namecards_import_unknown_value', array('text' => t('Unknown')));
              }
              break;
            case 'First Name':
              if (!empty($item)) {
                $contact[$i]['given_name'] = _namecards_import_set_empty_value_to_null($item);
              }
              break;
            case 'Company':
             if (!empty($item)) {
               $contact[$i]['organization'] = _namecards_import_set_empty_value_to_null($item);
             }
             break;
          }
          if ($full_scan == TRUE) {
            switch ($key) {
              case 'Job Title':
                if (!empty($item)) {
                  $contact[$i]['position'] = _namecards_import_set_empty_value_to_null($item);
                }
                break;
              case 'Department':
                if (!empty($item)) {
                  $contact[$i]['department'] = _namecards_import_set_empty_value_to_null($item);
                }
                break;
              case 'Business Phone':
                if (!empty($item)) {
                  $contact[$i]['phone'][] = array(
                    'type' => 'work',
                    'value' => _namecards_import_set_empty_value_to_null($item),
                  );
                }
                break;
              case 'Business Phone 2':
                if (!empty($item)) {
                  $contact[$i]['phone'][] = array(
                    'type' => 'work',
                    'value' => _namecards_import_set_empty_value_to_null($item),
                  );
                }
                break;
              case 'Home Phone':
                if (!empty($item)) {
                  $contact[$i]['phone'][] = array(
                    'type' => 'home',
                    'value' => _namecards_import_set_empty_value_to_null($item),
                  );
                }
                break;
              case 'Home Phone 2':
                if (!empty($item)) {
                  $contact[$i]['phone'][] = array(
                    'type' => 'home',
                    'value' => _namecards_import_set_empty_value_to_null($item),
                  );
                }
                break;
              case 'Other Phone':
                if (!empty($item)) {
                  $contact[$i]['phone'][] = array(
                    'type' => 'other',
                    'value' => _namecards_import_set_empty_value_to_null($item),
                  );
                }
                break;
              case 'Business Fax':
                if (!empty($item)) {
                  $contact[$i]['fax'][] = array(
                    'type' => 'work',
                    'value' => _namecards_import_set_empty_value_to_null($item),
                  );
                }
                break;
              case 'Home Fax':
                if (!empty($item)) {
                  $contact[$i]['fax'][] = array(
                    'type' => 'home',
                    'value' => _namecards_import_set_empty_value_to_null($item),
                  );
                }
                break;
              case 'Other Fax':
                if (!empty($item)) {
                  $contact[$i]['fax'][] = array(
                    'type' => 'other',
                    'value' => _namecards_import_set_empty_value_to_null($item),
                  );
                }
                break;
              case 'Mobile Phone':
                if (!empty($item)) {
                  $contact[$i]['mobile'][] = _namecards_import_set_empty_value_to_null($item);
                }
                break;
              case 'E-mail Address':
                if (!empty($item)) {
                  $contact[$i]['email'][] = _namecards_import_set_empty_value_to_null($item);
                }
                break;
              case 'E-mail 2 Address':
                if (!empty($item)) {
                  $contact[$i]['email'][] = _namecards_import_set_empty_value_to_null($item);
                }
                break;
              case 'E-mail 3 Address':
                if (!empty($item)) {
                  $contact[$i]['email'][] = _namecards_import_set_empty_value_to_null($item);
                }
                break;
              case 'Business Street':
                if (!empty($item)) {
                  $business_street_temp[] = $item;
                }
                break;
              case 'Business Street 2':
                if (!empty($item)) {
                  $business_street_temp[] = $item;
                }
                break;
              case 'Business Street 3':
                if (!empty($item)) {
                  $business_street_temp[] = $item;
                }
                break;
              case 'Business City':
                if (!empty($item)) {
                  $contact[$i]['address']['work']['city'] = $item;
                }
                break;
              case 'Business State':
                if (!empty($item)) {
                  $contact[$i]['address']['work']['state'] = $item;
                }
                break;
              case 'Business Postal Code':
                if (!empty($item)) {
                  $contact[$i]['address']['work']['postcode'] = $item;
                }
                break;
              case 'Business Country/Region':
                if (!empty($item)) {
                  $contact[$i]['address']['work']['country'] = $item;
                }
                break;
              case 'Home Street':
                if (!empty($item)) {
                  $home_street_temp[] = $item;
                }
                break;
              case 'Home Street 2':
                if (!empty($item)) {
                  $home_street_temp[] = $item;
                }
                break;
              case 'Home Street 3':
                if (!empty($item)) {
                  $home_street_temp[] =  $item;
                }
                break;
              case 'Home City':
                if (!empty($item)) {
                  $contact[$i]['address']['work']['city'] = $item;
                }
                break;
              case 'Home State':
                if (!empty($item)) {
                  $contact[$i]['address']['work']['state'] = $item;
                }
                break;
              case 'Home Postal Code':
                if (!empty($item)) {
                  $contact[$i]['address']['work']['postcode'] = $item;
                }
                break;
              case 'Home Country/Region':
                if (!empty($preprocessed_card_info[$i]['Home Country/Region'])) {
                  $contact[$i]['address']['work']['country'] = $preprocessed_card_info[$i]['Home Country/Region'];
                }
                break;
              case 'Other Street':
                if (!empty($item)) {
                  $other_street_temp[] = $item;
                }
                break;
              case 'Other Street 2':
                if (!empty($item)) {
                  $other_street_temp[] = $item;
                }
                break;
              case 'Other Street 3':
                if (!empty($item)) {
                  $other_street_temp[] =  $item;
                }
                break;
              case 'Other City':
                if (!empty($item)) {
                  $contact[$i]['address']['work']['city'] = $item;
                }
                break;
              case 'Other State':
                if (!empty($item)) {
                  $contact[$i]['address']['work']['state'] = $item;
                }
                break;
              case 'Other Postal Code':
                if (!empty($item)) {
                  $contact[$i]['address']['work']['postcode'] = $item;
                }
                break;
              case 'Other Country/Region':
                if (!empty($item)) {
                  $contact[$i]['address']['work']['country'] = $item;
                }
                break;
              
              default:
                // Exclude last name, first name and company as they are handled by seperate switch() operation.
                if ($key != 'Last Name' && $key != 'First Name' && $key != 'Company' && !empty($preprocessed_card_info[$i][$key])) {
                  if (!isset($contact[$i]['notes'])) { 
                    $contact[$i]['notes'] = t('The following data was imported along with the contact:') . "\n" . $key . ': ' . $preprocessed_card_info[$i][$key] . "\n";
                  }
                  else {
                    $contact[$i]['notes'] .= $key . ': ' . $preprocessed_card_info[$i][$key] . "\n";
                  }
                }
                break;
            }
          }
          // Outlook doesn't provide nickname field, so create a default value.
          $contact[$i]['nickname'] = NULL;
          break;
        
        case 'thunderbird':
          // Tested on Thunderbird 3.1
  
          switch ($key) {
            case 'Last Name':
              if (!empty($item)) {
                $contact[$i]['surname'] = _namecards_import_set_empty_value_to_null($item);
              }
              else {
                $contact[$i]['surname'] = theme('namecards_import_unknown_value', array('text' => t('Unknown')));
              }
              break;
            case 'First Name':
              if (!empty($item)) {
                $contact[$i]['given_name'] = _namecards_import_set_empty_value_to_null($item);
              }
              break;
            case 'Organization':
              if (!empty($item)) {
                $contact[$i]['organization'] = _namecards_import_set_empty_value_to_null($item);
              }
              break;
          }
          if ($full_scan == TRUE) {
            switch ($key) {
              case 'Nickname':
                if (!empty($item)) {
                  $contact[$i]['nickname'] = _namecards_import_set_empty_value_to_null($item);
                }
                break;
              case 'Job Title':
                if (!empty($item)) {
                  $contact[$i]['position'] = _namecards_import_set_empty_value_to_null($item);
                }
                break;
              case 'Department':
                if (!empty($item)) {
                  $contact[$i]['department'] = _namecards_import_set_empty_value_to_null($item);
                }
                break;
              case 'Work Phone':
                if (!empty($item)) {
                  $contact[$i]['phone'][] = array(
                      'type' => 'work',
                      'value' => _namecards_import_set_empty_value_to_null($item),
                  );
                }
                break;
              case 'Home Phone':
                if (!empty($item)) {
                  $contact[$i]['phone'][] = array(
                      'type' => 'home',
                      'value' => _namecards_import_set_empty_value_to_null($item),
                  );
                }
                break;
              case 'Fax Number':
                if (!empty($item)) {
                  $contact[$i]['fax'][] = array(
                      'type' => 'work',
                      'value' => _namecards_import_set_empty_value_to_null($item),
                  );
                }
                break;
              case 'Mobile Number':
                if (!empty($item)) {
                  $contact[$i]['mobile'][] = _namecards_import_set_empty_value_to_null($item);
                }
                break;
              case 'Primary Email':
                if (!empty($item)) {
                  $contact[$i]['email'][] = _namecards_import_set_empty_value_to_null($item);
                }
                break;
              case 'Secondary Email':
                if (!empty($item)) {
                  $contact[$i]['email'][] = _namecards_import_set_empty_value_to_null($item);
                }
                break;
              case 'Work Address':
                if (!empty($item)) {
                  $business_street_temp[] = $item;
                }
                break;
              case 'Work Address 2':
                if (!empty($item)) {
                  $business_street_temp[] = $item;
                }
                break;
              case 'Work City':
                if (!empty($item)) {
                  $contact[$i]['address']['work']['city'] = $item;
                }
                break;
              case 'Work State':
                if (!empty($item)) {
                  $contact[$i]['address']['work']['state'] = $item;
                }
                break;
              case 'Work ZipCode':
                if (!empty($item)) {
                  $contact[$i]['address']['work']['postcode'] = $item;
                }
                break;
              case 'Work Country':
                if (!empty($item)) {
                  $contact[$i]['address']['work']['country'] = $item;
                }
                break;
              case 'Home Address':
                if (!empty($item)) {
                  $home_street_temp[] = $item;
                }
                break;
              case 'Home Address 2':
                if (!empty($item)) {
                  $home_street_temp[] = $item;
                }
                break;
              case 'Home City':
                if (!empty($item)) {
                  $contact[$i]['address']['work']['city'] = $item;
                }
                break;
              case 'Home State':
                if (!empty($item)) {
                  $contact[$i]['address']['work']['state'] = $item;
                }
                break;
              case 'Home ZipCode':
                if (!empty($item)) {
                  $contact[$i]['address']['work']['postcode'] = $item;
                }
                break;
              case 'Home Country':
                if (!empty($item)) {
                  $contact[$i]['address']['work']['country'] = $item;
                }
                break;
              default:
                // Exclude last name, first name and company as they are handled by seperate switch() operation.
                if ($key != 'Last Name' && $key != 'First Name' && $key != 'Organization' && !empty($preprocessed_card_info[$i][$key])) {
                  if (!isset($contact[$i]['notes'])) {
                    $contact[$i]['notes'] = t('The following data was imported along with the contact:') . "\n" . $key . ': ' . $preprocessed_card_info[$i][$key] . "\n";
                  }
                  else {
                    $contact[$i]['notes'] .= $key . ': ' . $preprocessed_card_info[$i][$key] . "\n";
                  }
                }
                break;
            }
          }
          break;
      }
    }
    // Process street addresses. Merges multi lined street addresses into single string.
    if (!empty($business_street_temp)) {
      $contact[$i]['address']['work']['street'] = implode(', ', $business_street_temp);
    }
    if (!empty($home_street_temp)) {
      $contact[$i]['address']['home']['street'] = implode(', ', $home_street_temp);
    }
    if (!empty($other_street_temp)) {
      $contact[$i]['address']['other']['street'] = implode(', ', $other_street_temp);
    }
    
    // Remove any empty address blocks. Prevents sending any blank address elements.
    if (!empty($contact[$i]['address'])) {
      foreach ($contact[$i]['address'] as $type => $item) {
        $delete_block = TRUE;
        foreach ($contact[$i]['address'][$type] as $value) {
          if (!empty($value)) {
            $delete_block = FALSE;
            break;
          }
        }
        if ($delete_block == TRUE) {
          unset($contact[$i]['address'][$type]);
        }
      }
    }
  }
  return $contact;
}
