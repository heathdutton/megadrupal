<?php
/**
 * @file
 * This module provides a node type called Namecards organization
 */

/**
 * Implements hook_node_info() to provide our job_post type.
 */
function namecards_organization_node_info() {
  return array(
    'namecards_organization' => array(
      'name' => t('Namecards organization'),
      'base' => 'namecards_organization',
      'description' => t(''),
      'has_title' => TRUE,
      'title_label' => t('Name'),
      'help' => t('Enter name of this organization'),
    ),
  );
}

/**
 * Implements hook_permission().
 */
//function namecards_organization_permission() {
//  return array(
//    'create organization' => array(
//      'title' => t('Create a organization'),
//      'description' => t('Create a organization'),
//    ),
//    'edit own organization' => array(
//      'title' => t('Edit own organization'),
//      'description' => t('Edit your own organization'),
//    ),
//    'edit any organization' => array(
//      'title' => t('Edit any organization'),
//      'description' => t('Edit any organization'),
//    ),
//    'delete own organization' => array(
//      'title' => t('Delete own organization'),
//      'description' => t('Delete own organization'),
//    ),
//    'delete any organization' => array(
//      'title' => t('Delete any organization'),
//      'description' => t('Delete any organization'),
//    ),
//  );
//}

/**
 * Implements hook_node_access().
 */
function namecards_organization_node_access($node, $op, $account) {
  // Set default access behaviour.
  $access = NODE_ACCESS_IGNORE;
  // Get node type.  $node can either be a node object or a content type string.
  $node_type = (is_object($node)) ? $node->type : $node;
  if ($node_type == 'namecards_organization') {
    switch ($op) {
      case 'create':
          // Allow if user's role has 'create organization' permission.
          if (user_access('create organization', $account)) {
          $access = NODE_ACCESS_ALLOW;
        }
      case 'update':
        // Allow if user's role has 'edit own organization' permission and user is
        // the author; or if the user's role has 'edit any organization' permission.
        if (user_access('edit own organization', $account) && $account->uid == $node->uid ||
          user_access('edit any organization', $account)) {
          $access = NODE_ACCESS_ALLOW;
        }
      case 'delete':
        // Allow if user's role has 'delete own organization' permission and user is
        // the author; or if the user's role has 'delete any organization' permission.
        if (user_access('delete own organization', $account) && $account->uid == $node->uid ||
          user_access('delete any organization', $account)) {
          $access = NODE_ACCESS_ALLOW;
        }
    }
  }
  return $access;
}

/**
 * Implement hook_form()
 *
 * Alters certain default form values for this node type.
 */
function namecards_organization_form($node, $form_state) {
//  dsm($node);
//  dsm($form_state);
  // Do not automatically promote to front page.
  $node->promote = 0;
  // Disable comments.
  $node->comment = 0;
  return node_content_form($node, $form_state);
}

function namecards_organization_field_info_alter(&$info) {
//  dsm($info);
}

/**
 * Implements hook_validate().
 */
function namecards_organization_validate($node) {
  //
}