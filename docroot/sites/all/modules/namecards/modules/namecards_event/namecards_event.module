<?php
/**
 * @file
 * This module provides a node type called Namecards department
 */

/**
 * Implements hook_node_info() to provide our job_post type.
 */
function namecards_event_node_info() {
  return array(
    'namecards_event' => array(
      'name' => t('Namecards event'),
      'base' => 'namecards_event',
      'description' => t(''),
      'has_title' => TRUE,
      'title_label' => t('Name'),
      'help' => t('Enter name of this event'),
    ),
  );
}

/**
 * Implements hook_permission().
 */
//function namecards_event_permission() {
//  return array(
//    'create event' => array(
//      'title' => t('Create a event'),
//      'description' => t('Create a event'),
//    ),
//    'edit own event' => array(
//      'title' => t('Edit own event'),
//      'description' => t('Edit your own event'),
//    ),
//    'edit any event' => array(
//      'title' => t('Edit any event'),
//      'description' => t('Edit any event'),
//    ),
//    'delete own event' => array(
//      'title' => t('Delete own event'),
//      'description' => t('Delete own event'),
//    ),
//    'delete any event' => array(
//      'title' => t('Delete any event'),
//      'description' => t('Delete any event'),
//    ),
//  );
//}

/**
 * Implements hook_node_access().
 */
function namecards_event_node_access($node, $op, $account) {
  // Set default access behaviour.
  $access = NODE_ACCESS_IGNORE;
  // Get node type.  $node can either be a node object or a content type string.
  $node_type = (is_object($node)) ? $node->type : $node;
  if ($node_type == 'namecards_event') {
    switch ($op) {
      case 'create':
          // Allow if user's role has 'create event' permission.
          if (user_access('create event', $account)) {
          $access = NODE_ACCESS_ALLOW;
        }
      case 'update':
        // Allow if user's role has 'edit own event' permission and user is
        // the author; or if the user's role has 'edit any event' permission.
        if (user_access('edit own event', $account) && $account->uid == $node->uid ||
          user_access('edit any event', $account)) {
          $access = NODE_ACCESS_ALLOW;
        }
      case 'delete':
        // Allow if user's role has 'delete own event' permission and user is
        // the author; or if the user's role has 'delete any event' permission.
        if (user_access('delete own event', $account) && $account->uid == $node->uid ||
          user_access('delete any event', $account)) {
          $access = NODE_ACCESS_ALLOW;
        }
    }
  }
  return $access;
}

/**
 * Implement hook_form()
 *
 * Alters certain default form values for this node type.
 */
function namecards_event_form($node, $form_state) {
//  dsm($node);
//  dsm($form_state);
  // Do not automatically promote to front page.
  $node->promote = 0;
  // Disable comments.
  $node->comment = 0;
  return node_content_form($node, $form_state);
}

function namecards_event_field_info_alter(&$info) {
//  dsm($info);
}

/**
 * Implements hook_validate().
 */
function namecards_event_validate($node) {
  $regex_pattern = '/^[a-zA-Z0-9 \?@<>\'":-]{1,} \[[1-9][0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])\]$/';
  if (preg_match($regex_pattern, $node->title) == 0) {
    form_set_error('title', t('Wrong format for event.'), $limit_validation_errors = NULL);
  }
}