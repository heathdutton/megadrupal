<?php
/**
* @file
* This module provides a personal contacts management application for Drupal
*/

/* Define module specific constants. */

// Caching options.
define('NAMECARDS_CACHING_DISABLED', 0);
define('NAMECARDS_CACHING_MODERATE', 1);
define('NAMECARDS_CACHING_INTENSIVE', 2);

// Default page.
define('NAMECARDS_DEFAULT_PAGE_BROWSE', 0);
define('NAMECARDS_DEFAULT_PAGE_ORGS', 1);
define('NAMECARDS_DEFAULT_PAGE_EVENTS', 2);

// Keep or delete public contacts on user delete.
define('NAMECARDS_DELETE_ALL_CONTACTS_ON_USER_DEL', 0);
define('NAMECARDS_PRESERVE_PUBLIC_CONTACTS_ON_USER_DEL', 1);

// Administrators can view private contacts of other users.
define('NAMECARDS_ADMIN_VIEW_PRIV_CONTACTS_DISABLED', 0);
define('NAMECARDS_ADMIN_VIEW_PRIV_CONTACTS_ENABLED', 1);

// 
define('NAMECARDS_NUMBER_TYPE_WORK', 0);
define('NAMECARDS_NUMBER_TYPE_HOME', 1);
define('NAMECARDS_NUMBER_TYPE_OTHER', 2);

/**
 * Add required files and settings for ctools modal to parent page. 
 */
function _namecards_ctools_modal_parent() {
  ctools_include('modal');
  ctools_include('ajax');
  ctools_add_js('ajax-responder');
  ctools_modal_add_js();
  // Create our own javascript that will be used to theme a modal.
  $modal_styles = array(
    'namecards-style-details' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 800,
        'height' => 600,
        'contentRight' => 29,
        'contentBottom' => 49,
      ),
      'modalOptions' => array(
        'opacity' => .5,
        'background-color' => '#000',
      ),
      'closeText' => t(''),
      'closeImage' => theme('image', array('path' => ctools_image_path('icon-close-window.png', 'namecards', 'images'), 'alt' => t('Close'), 'title' => t('Close'))),
      'loadingText' => t('Loading...'),
      'animation' => 'fadeIn',
      'animationSpeed' => 'medium',
      'modalTheme' => 'CToolsNamecardsModal',
    ),
    'namecards-style-edit' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 800,
        'height' => 600,
        'contentRight' => 29,
        'contentBottom' => 49,
      ),
      'modalOptions' => array(
        'opacity' => .5,
        'background-color' => '#000',
      ),
      'closeText' => t(''),
      'closeImage' => theme('image', array('path' => ctools_image_path('icon-close-window.png', 'namecards', 'images'), 'alt' => t('Close'), 'title' => t('Close'))),
      'loadingText' => t('Loading...'),
      'animation' => 'fadeIn',
      'animationSpeed' => 'medium',
      'modalTheme' => 'CToolsNamecardsModal',
      'throbber' => theme('image', array('path' => ctools_image_path('throbber.gif'), 'alt' => t('Loading...'), 'title' => t('Loading'))),
    ),
    'namecards-style-delete' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 300,
        'height' => 150,
        'contentRight' => 29,
        'contentBottom' => 49,
      ),
      'modalOptions' => array(
        'opacity' => .5,
        'background-color' => '#000',
      ),
      'closeText' => t(''),
      'closeImage' => theme('image', array('path' => ctools_image_path('icon-close-window.png', 'namecards', 'images'), 'alt' => t('Close'), 'title' => t('Close'))),
      'loadingText' => t('Loading...'),
      'animation' => 'fadeIn',
      'animationSpeed' => 'medium',
      'modalTheme' => 'CToolsNamecardsModal',
    ),
    'namecards-style-600x400' => array(
      'modalSize' => array(
        'type' => 'fixed',
        'width' => 600,
        'height' => 400,
        'contentRight' => 29,
        'contentBottom' => 49,
      ),
      'modalOptions' => array(
        'opacity' => .5,
        'background-color' => '#000',
      ),
      'closeText' => t(''),
      'closeImage' => theme('image', array('path' => ctools_image_path('icon-close-window.png', 'namecards', 'images'), 'alt' => t('Close'), 'title' => t('Close'))),
      'loadingText' => t('Loading...'),
      'animation' => 'fadeIn',
      'animationSpeed' => 'medium',
      'modalTheme' => 'CToolsNamecardsModal',
    ),
  );
  drupal_add_js($modal_styles, 'setting');
  drupal_add_js(drupal_get_path('module', 'namecards') . '/js/namecards_ctools_modal.js');
}

/**
 * Delete cached data based on current caching level.
 * @param int $current_caching_level
 * Is one of there constants (NAMECARDS_CACHING_DISABLED,
 * NAMECARDS_CACHING_MODERATE, NAMECARDS_CACHING_INTENSIVE).
 */
function _namecards_delete_cached_data() {
  // Delete all cached data.
  $result = db_query("DELETE FROM {cache_namecards}");
}

/**
 * Delete Linked Nodes
 *
 * Deletes any linked nodes, of either namecards_organization, namecards_event, namecards_department,
 * or namecards_position content types, if they are no longer referenced by any nodes of type
 * namecards_namecard after an instance of content type "namecards_namecard" has been deleted or
 * updated.
 */
function _namecards_delete_linked_nodes(&$node, $op) {
  // Confirm node is of type namecards_namecard.
  if ($node->type != 'namecards_namecard') {
    return;
  }
  switch ($op) {
      case 'delete':
        // Organizations.
        $linked_nids =_namecards_delete_linked_nodes_check_fld_contains_linked_data('org', $node);
        if (!empty($linked_nids)) {
          _namecards_delete_linked_nodes_delete_orphaned_node($node->nid, $linked_nids, 'org');
        }

        // Event.
        $linked_nids =_namecards_delete_linked_nodes_check_fld_contains_linked_data('event', $node);
        if (!empty($linked_nids)) {
          _namecards_delete_linked_nodes_delete_orphaned_node($node->nid, $linked_nids, 'event');
        }

        // Position.
        $linked_nids =_namecards_delete_linked_nodes_check_fld_contains_linked_data('position', $node);
        if (!empty($linked_nids)) {
          _namecards_delete_linked_nodes_delete_orphaned_node($node->nid, $linked_nids, 'position');
        }

        // Department.
        $linked_nids =_namecards_delete_linked_nodes_check_fld_contains_linked_data('department', $node);
        if (!empty($linked_nids)) {
          _namecards_delete_linked_nodes_delete_orphaned_node($node->nid, $linked_nids, 'department');
        }

        if (isset($_SESSION['original_org_nids'])) {
          unset($_SESSION['original_org_nids']);
        }

        if (isset($_SESSION['original_position_nids'])) {
          unset($_SESSION['original_position_nids']);
        }

        if (isset($_SESSION['original_department_nids'])) {
          unset($_SESSION['original_department_nids']);
        }

        if (isset($_SESSION['original_event_nids'])) {
          unset($_SESSION['original_event_nids']);
        }
        break;

      case 'update':
        // For organizations
        $current_organization_nids = _namecards_delete_linked_nodes_return_node_id($node, 'org');
        $previous_organization_nids = $_SESSION['original_org_nids'];
        sort($current_organization_nids);
        sort($previous_organization_nids);

        // Check for linked nodes no longer used by the updated node.
        $nolonger_used_nids = array();
        foreach ($previous_organization_nids as $nid) {
          if (array_search($nid, $current_organization_nids) === FALSE) {
            $nolonger_used_nids[] = $nid;
          }
        }
        // Delete nolonger linked nodes if no longer in use by other nodes.
        _namecards_delete_linked_nodes_delete_orphaned_node($node->nid, $nolonger_used_nids, 'org');

        // For events
        $current_event_nids = _namecards_delete_linked_nodes_return_node_id($node, 'event');
        $previous_event_nids = $_SESSION['original_event_nids'];
        sort($current_event_nids);
        sort($previous_event_nids);

        // Check for linked nodes no longer used by the updated node.
        $nolonger_used_nids = array();
        foreach ($previous_event_nids as $nid) {
          if (array_search($nid, $current_event_nids) === FALSE) {
            $nolonger_used_nids[] = $nid;
          }
        }
        // Delete nolonger linked nodes if no longer in use by other nodes.
        _namecards_delete_linked_nodes_delete_orphaned_node($node->nid, $nolonger_used_nids, 'event');

        // For department.
        $current_department_nids = _namecards_delete_linked_nodes_return_node_id($node, 'department');
        $previous_department_nids = $_SESSION['original_department_nids'];
        sort($current_department_nids);
        sort($previous_department_nids);

        // Check for linked nodes no longer used by the updated node.
        $nolonger_used_nids = array();
        foreach ($previous_department_nids as $nid) {
          if (array_search($nid, $current_department_nids) === FALSE) {
            $nolonger_used_nids[] = $nid;
          }
        }
        // Delete nolonger linked nodes if no longer in use by other nodes.
        _namecards_delete_linked_nodes_delete_orphaned_node($node->nid, $nolonger_used_nids, 'department');

        // For position.
        $current_position_nids = _namecards_delete_linked_nodes_return_node_id($node, 'position');
        $previous_position_nids = $_SESSION['original_position_nids'];
        sort($current_position_nids);
        sort($previous_position_nids);

        // Check for linked nodes no longer used by the updated node.
        $nolonger_used_nids = array();
        foreach ($previous_position_nids as $nid) {
          if (array_search($nid, $current_position_nids) === FALSE) {
            $nolonger_used_nids[] = $nid;
          }
        }
        // Delete nolonger linked nodes if no longer in use by other nodes.
        _namecards_delete_linked_nodes_delete_orphaned_node($node->nid, $nolonger_used_nids, 'position');
        break;

      case 'load':
        // For organizations
        // Get the value of the original nid before current node is altered.
        // This is so as to be able to compare changes with the value when
        // the current node is updated  See "case 'update'" above.
        $_SESSION['original_org_nids'] = _namecards_delete_linked_nodes_return_node_id($node, 'org');

        // For events
        // Get the value of the original nid before current node is altered.
        // This is so as to be able to compare changes with the value when
        // the current node is updated  See "case 'update'" above.
        $_SESSION['original_event_nids'] = _namecards_delete_linked_nodes_return_node_id($node, 'event');

        // For department
        // Get the value of the original nid before current node is altered.
        // This is so as to be able to compare changes with the value when
        // the current node is updated  See "case 'update'" above.
        $_SESSION['original_department_nids'] = _namecards_delete_linked_nodes_return_node_id($node, 'department');

        // For position
        // Get the value of the original nid before current node is altered.
        // This is so as to be able to compare changes with the value when
        // the current node is updated  See "case 'update'" above.
        $_SESSION['original_position_nids'] = _namecards_delete_linked_nodes_return_node_id($node, 'position');
        break;
  }
}

/**
 * Returns nids of linked nodes
 *
 * @param $str
 * String representing the node type being tested.
 *
 * @param $node
 * Node object being tested.
 *
 * @return
 *   Returns array of linked node IDs.
 */
function _namecards_delete_linked_nodes_return_node_id($node, $str) {
  $node_nids = array();
  $lang = $node->language;
  switch ($str) {
    case 'org':
      if (!empty($node->namecards_namecard_organization)) {
        foreach ($node->namecards_namecard_organization[$lang] as $delta => $value) {
          $node_nids[] = $node->namecards_namecard_organization[$lang][$delta]['nid'];
        }
      }
      break;

    case 'event':
      if (!empty($node->namecards_namecard_event)) {
        foreach ($node->namecards_namecard_event[$lang] as $delta => $value) {
          $node_nids[] = $node->namecards_namecard_event[$lang][$delta]['nid'];
        }
      }
      break;

    case 'department':
      if (!empty($node->namecards_namecard_department)) {
        foreach ($node->namecards_namecard_department[$lang] as $delta => $value) {
          $node_nids[] = $node->namecards_namecard_department[$lang][$delta]['nid'];
        }
      }
      break;

    case 'position':
      if (!empty($node->namecards_namecard_position)) {
        foreach ($node->namecards_namecard_position[$lang] as $delta => $value) {
          $node_nids[] = $node->namecards_namecard_position[$lang][$delta]['nid'];
        }
      }
      break;
  }
  return $node_nids;
}

/**
 * Recursive function.
 * Removes required validation flag for specified form element
 * and all its children. Used by close button to circumvent
 * validation on required fields.
 */
function _namecards_disable_validation(&$element) {
  unset($element['#needs_validation']);
  foreach (element_children($element) as $key) {
    _namecards_disable_validation($element[$key]);
  }
}

function _namecards_form_redirect_on_submit($form, &$form_state) {
  global $base_root;
  $uri = (isset($_SESSION['modalframe']['parent'])) ? $base_root . '/' . _namecards_get_parent_page($_SESSION['modalframe']['parent']) : NULL;
  if (!empty($uri)) {
    $form_state['redirect'] = $uri;
  }
}

/**
 * Returns the URI of the default page for a given user.
 *
 * @param int $uid
 * @return string $uri
 */
function _namecards_get_default_user_page_uri($uid) {
  $uri = '';
  $default_page = db_query('SELECT default_page FROM {user_namecard_settings} WHERE uid = :uid', array(':uid' => $uid))->fetchField();
  switch ($default_page) {
    case NAMECARDS_DEFAULT_PAGE_BROWSE:
      $uri = 'namecards/browse_contacts';
      break;
    case NAMECARDS_DEFAULT_PAGE_ORGS:
      $uri = 'namecards/organization_names';
      break;
    case NAMECARDS_DEFAULT_PAGE_EVENTS:
      $uri = 'namecards/events_names';
      break;
    default:
      $uri = 'namecards/browse_contacts';
      break;
  }
  return $uri;
}

/**
 * 
 * @param unknown_type $uri
 * @return Ambigous <string, unknown>
 */
function _namecards_get_parent_page($uri) {
  $parent_page_uri = '';

  if (preg_match('/namecards\/contacts_by_node\/get\/org\/[0-9]{1,}/', $uri) > 0) {
    $parent_page_uri = 'namecards/organization_names';
  }
  elseif (preg_match('/namecards\/contacts_by_node\/get\/event\/[0-9]{1,}/', $uri) > 0) {
    $parent_page_uri = 'namecards/event_names';
  }
  else {
    $parent_page_uri = $uri;
  }
  return $parent_page_uri;
}

/**
 * Reassign ownership of nodes to different user
 * 
 * The behavior of this function is different depending on the type of node.  
 * In the case of type "namecards_namecard" a node will be reassigned only if 
 * the module configuration settings have been set to "preserve public 
 * contacts".  In the case of other node types (e.g. 'namecards_organization', 
 * 'namecards_event', 'namecards_position', 'namecards_department'), a node 
 * will only be reassigned if it is linked to the contact (i.e. node of type 
 * 'namecards_namecard') of another user.
 * 
 * @param $account
 *   User account information of user currently being deleted
 * @param $node_types
 *   Array of node types to modify.
 * @param $new_owner_uid
 *   Uid of the new owner.
 *   
 */
function _namecards_reassign_node_ownership($original_user_uid, $node_types = array('namecards_organization', 'namecards_event', 'namecards_position', 'namecards_department'), $new_owner_uid = 1) {
  // Check if user has any namecard content.
  $results = db_query('SELECT n.nid FROM {node} n WHERE n.uid = :uid AND n.type IN (:placeholder_)', array(':uid' => $original_user_uid, ':placeholder_' => array('namecards_namecard', 'namecards_organization', 'namecards_event', 'namecards_position', 'namecards_department')));
  $user_created_node_nids = array();
  foreach ($results as $result) {
    $user_created_node_nids[] = $result->nid;
  }
  // If user has no nodes then exit function.
  if (empty($user_created_node_nids)) {
    return;
  }

  $linked_node_nids = array();  
  if (in_array('namecards_namecard', $node_types)) {
    // Only public contacts are to be reassigned.
    $query = db_select('node', 'n');
    $results = $query
    ->fields('n', array('nid'))
    ->condition('n.uid', $original_user_uid)
    ->condition('type', 'namecards_namecard');
    $tbl_alias = $query->leftJoin('field_data_namecards_namecard_public', 'fdnnp', 'n.nid = %alias.entity_id');
    // check public value.
    $query->condition($tbl_alias . '.namecards_namecard_public_value', 1);
    $results = $query->execute();
  
    foreach ($results as $result) {
      $linked_node_nids[] = $result->nid;
    }
  }
  
  if (in_array('namecards_organization', $node_types)) {
    // Get nids of user created organizations which are linked to namecards of other users.
    $query = db_select('node', 'n');
    $org_table_alias = $query->join('field_data_namecards_namecard_organization', 'fdnno', 'n.nid = %alias.entity_id');
    $results = $query
      ->fields($org_table_alias, array('namecards_namecard_organization_nid'))
      ->condition('n.uid', $original_user_uid, '<>')
      ->condition($org_table_alias . '.namecards_namecard_organization_nid', $user_created_node_nids, 'IN')
      ->execute();
    foreach ($results as $result) {
      $linked_node_nids[] = $result->namecards_namecard_organization_nid;
    }
  }

  if (in_array('namecards_event', $node_types)) {
    // Get nids of user created events which are linked to namecards of other users.
    $query = db_select('node', 'n');
    $event_table_alias = $query->join('field_data_namecards_namecard_event', 'fdnne', 'n.nid = %alias.entity_id');
    $results = $query
      ->fields($event_table_alias, array('namecards_namecard_event_nid'))
      ->condition('n.uid', $original_user_uid, '<>')
      ->condition($event_table_alias . '.namecards_namecard_event_nid', $user_created_node_nids, 'IN')
      ->execute();
    foreach ($results as $result) {
      $linked_node_nids[] = $result->namecards_namecard_event_nid;
    }
  }

  if (in_array('namecards_position', $node_types)) {
    // Get nids of user created positions which are linked to namecards of other users.
    $query = db_select('node', 'n');
    $position_table_alias = $query->join('field_data_namecards_namecard_position', 'fdnnp', 'n.nid = %alias.entity_id');
    $results = $query
      ->fields($position_table_alias, array('namecards_namecard_position_nid'))
      ->condition('n.uid', $original_user_uid, '<>')
      ->condition($position_table_alias . '.namecards_namecard_position_nid', $user_created_node_nids, 'IN')
      ->execute();
    foreach ($results as $result) {
      $linked_node_nids[] = $result->namecards_namecard_position_nid;
    }
  }

  if (in_array('namecards_department', $node_types)) {
    // Get nids of user created departments which are linked to namecards of other users.
    $query = db_select('node', 'n');
    $department_table_alias = $query->join('field_data_namecards_namecard_department', 'fdnnd', 'n.nid = %alias.entity_id');
    $results = $query
      ->fields($department_table_alias, array('namecards_namecard_department_nid'))
      ->condition('n.uid', $original_user_uid, '<>')
      ->condition($department_table_alias . '.namecards_namecard_department_nid', $user_created_node_nids, 'IN')
      ->execute();
    foreach ($results as $result) {
      $linked_node_nids[] = $result->namecards_namecard_department_nid;
    }
  }

  // Remove duplicate nids.
  $linked_node_nids = array_unique($linked_node_nids);

  if (!empty($linked_node_nids)) {
    // Reassign linked nodes to user 1.
    module_load_include('inc', 'node', 'node.admin');
    node_mass_update($linked_node_nids, array('uid' => $new_owner_uid));
  }
}

/**
 * Checks for linked nodes which have become orphaned.
 *
 * Each saved contact is composed of related (i.e. linked) node types.
 * This function can detect nodes which are no longer attached to a parent
 * node.
 */
function _namecards_scan_for_orphan_nodes() {
  $output = '';

  // Find and delete orphaned nodes.
  $node_types_descriptor = array('organization', 'event', 'position', 'department');
  foreach ($node_types_descriptor as $str) {
    $sql = db_select('node', 'n');
    $tbl_alias = $sql->leftJoin('field_data_namecards_namecard_' . $str, 'fdnno', 'n.nid = %alias.namecards_namecard_' . $str . '_nid');
    $results = $sql
      ->fields('n', array('nid', 'title'))
      ->condition('n.type', 'namecards_' . $str)
      ->isNull($tbl_alias . '.entity_id')
      ->execute();

    $orphaned_nids = array();
    $orphaned_titles = array();
    foreach ($results as $result) {
      $orphaned_nids[] = $result->nid;
      $orphaned_titles[] = $result->title;
    }

    if (count($orphaned_nids) > 0) {
      $output .= t('Orphaned :types found: :count ( :titles )', array(':type' => t($str), ':count' => count($orphaned_nids), ':titles' => implode(', ', $orphaned_titles))) . '<br />';
      $num_deleted = db_delete('node')
        ->condition('nid', $orphaned_nids, 'IN')
        ->execute();
      $output .= t('Orphaned organizations deleted: :num_deleted', array(':num_deleted' => $num_deleted)) . '<br />';
    }
  }

  // Set default message if no results are found.
  if (empty($output)) {
    $output = t('No orphaned nodes found.');
  }

  return $output;
}

/**
 * Creates a datestamp
 *
 * The value represents the last time the data for was altered. Used
 * for updating cached views (For an example on ho it is used see 
 * namecards_browse_contacts()).
 */
function _namecards_set_var_last_updated($node) {
  if (preg_match('/^namecards_(namecard|organization|event|department|position)$/', $node->type) == 0) {
    // Quit function if node type is not of given type.
    return;
  }
  variable_set('namecards_contacts_last_updated', time());
}

/**
 * Updates computed field values in contacts {content_type_namecard_namecard} when organization,
 * event, position or department names change.
 *
 * Content type namecard utilizes a computed CCK field to store the name of the organization,
 * event, position and department. This is a work around to avoid a bug in the finder module
 * which cannot search in CCK fields which have a relationship with another content type.
 * Since the computed field is saved in the database when the namecard content type is saved
 * or edited, any additional changes to the name of the organization (which belongs to another
 * content type) will not be updated in the computed CCK field if the organization name, which
 * belongs to a different content type is updated.
 *
 */
function _namecards_update_namecard_on_linked_name_change(&$node) {
  if (preg_match('/^namecards_(organization|event|department|position)$/', $node->type) == 0) {
    // Quit function if node type is not of given type.
    return;
  }

  // Create array to hold list of affected nids.
  $affected_nids = array();
  // Title of the node being updated.
  $field_value = $node->title;

  switch ($node->type) {
    case 'namecards_organization':
      $sql = 'SELECT entity_id FROM {field_data_namecards_namecard_organization} WHERE namecards_namecard_organization_nid = :nid';
      $type = 'Organization';
      break;
    case 'namecards_event':
      $sql = 'SELECT entity_id FROM {field_data_namecards_namecard_event} WHERE namecards_namecard_event_nid = :nid';
      $type = 'Event';
      break;
    case 'namecards_department':
      $sql = 'SELECT entity_id FROM {field_data_namecards_namecard_department} WHERE namecards_namecard_department_nid = :nid';
      $type = 'Department';
      break;
    case 'namecards_position':
      $sql = 'SELECT entity_id FROM {field_data_namecards_namecard_position} WHERE namecards_namecard_position_nid = :nid';
      $type = 'Position';
      break;
  }

  $results = db_query($sql, array(':nid' => $node->nid));

  $count = 0;
  foreach ($results as $result) {
    drupal_set_time_limit(5);

    $target_node = node_load($result->entity_id);
    node_save($target_node);
    $count++;
  }

  if ($count > 0) {
    drupal_set_message(t('@type <em>@field_value</em> has been updated. @count been updated accordingly.', array('@type' => $type, '@field_value' => $field_value, '@count' => format_plural($count, '1 linked record has', '@count linked records have'))));
  }
}

/**
 * Create namecard settings for a new user
 * @param $uid
 *   ID of user on which to perform operation.
 */
function _namecards_user_settings_add($uid) {
  $fields = array(
    'uid' => $uid,
    'default_page' => 0,
    //'font_size' => 2,
    'browse_surname' => 1,
    'browse_given_name' => 1,
    'browse_nickname' => 1,
    'browse_organization' => 1,
    'browse_position' => 1,
    'browse_department' => 0,
    'browse_email' => 1,
    'browse_mobile' => 1,
    'browse_phone' => 1,
    'browse_fax' => 1,
    'browse_address' => 0,
    'browse_event' => 0,
    'contact_by_org_surname' => 1,
    'contact_by_org_given_name' => 1,
    'contact_by_org_nickname' => 1,
    'contact_by_org_organization' => 1,
    'contact_by_org_position' => 1,
    'contact_by_org_department' => 0,
    'contact_by_org_email' => 1,
    'contact_by_org_mobile' => 1,
    'contact_by_org_phone' => 1,
    'contact_by_org_fax' => 1,
    'contact_by_org_address' => 0,
    'contact_by_org_event' => 0,
    'contact_by_event_surname' => 1,
    'contact_by_event_given_name' => 1,
    'contact_by_event_nickname' => 1,
    'contact_by_event_organization' => 1,
    'contact_by_event_position' => 1,
    'contact_by_event_department' => 0,
    'contact_by_event_email' => 1,
    'contact_by_event_mobile' => 1,
    'contact_by_event_phone' => 1,
    'contact_by_event_fax' => 1,
    'contact_by_event_address' => 0,
    'contact_by_event_event' => 0,
  );

  db_insert('user_namecard_settings')->fields($fields)->execute();
}

/**
 * Delete namecard settings for a specified user
 * @param $uid
 *   ID of user on which to perform operation.
 */
function _namecards_user_settings_delete($uid) {
  // Super user should not be deleted
  if ($uid == 1) {
    exit;
  }

  if (_namecards_user_settings_exist($uid)) {
    $num_deleted = db_delete('user_namecard_settings')
      ->condition('uid', $uid)
      ->execute();
    if ($num_deleted < 1) {
      drupal_set_message(t("User's namecards settings could not be deleted."), 'error');
    }
  }
}

/**
 * Checks whether user has settings in {user_namecard_settings}.
 *
 * @param $uid
 *   ID of user on which to perform operation.
 * @return
 *   True or false depending if settings exist or not.
 */
function _namecards_user_settings_exist($uid) {
  $settings_exist = FALSE;
  $result = db_query('SELECT uid FROM {user_namecard_settings} WHERE uid = :uid', array(':uid' => $uid))->fetchField();
  if ($result) {
    $settings_exist = TRUE;
  }
  unset($result);
  return $settings_exist;
}

/**
 * Add or remove user's settings in {user_namecard_settings} and accompanying
 * session variable when user's permissions change.
 *
 * Since this submit function comes after 'user_admin_permissions_submit',
 * the database has already been updated.  Thus we can get all the
 * information needed from the database rather then relying on
 * $form and $form_state variables.
 */
function _namecards_user_settings_process($form, &$form_state) {
  global $user;
//  $roles = user_roles(TRUE, 'access namecards');

  //for each user see if they have permission
  $results = db_query('SELECT uid FROM {users}');
  foreach ($results as $result) {
    $uid = $result->uid;
    $user_account = user_load($uid);

    // Check if user has permission to use namecards
    if (user_access('access namecards', $user_account) || user_access('administer namecards', $user_account)) {
      if (!_namecards_user_settings_exist($uid)) {
        // Create settings for user if user is in {user_namecard_settings}
        _namecards_user_settings_add($uid);
        // Create namecards user settings session variable if user is current user
        if ($user->uid == $uid) {
          _namecards_user_settings_session_var('set', $uid);
        }
      }
    }
    else {
      if (_namecards_user_settings_exist($uid)) {
        // Delete user settings
        _namecards_user_settings_delete($uid);
        // Create namecards user settings session variable if user is current user
        if ($user->uid == $uid) {
          _namecards_user_settings_session_var('delete');
        }
      }
    }
  }
}

/**
 * Either sets or unsets session variable containing the users namecards settings.
 *
 * Use of session variable is the reduce need to query the database.
 *
 * @param $set
 *   Determines whether to set or unset the session variable. Will set session
 *   variable if value equals TRUE.
 * @param $uid
 *   ID of the user.
 */
function _namecards_user_settings_session_var($op = 'set', $uid = NULL) {
  switch ($op) {
    case 'set':
      // Check user has permissions to use namecards.
      if (user_access('access namecards') || user_access('administer namecards')) {
        $results = db_query('SELECT * FROM {user_namecard_settings} WHERE uid = :uid', array(':uid' => $uid));
        $result = $results->fetchObject();
        if ($result) {
          $_SESSION['namecards_user_namecard_settings'] = $result;
        }
        else {
          // Used for debugging purposes.
          drupal_set_message(t("Namecards settings have not been set for this user."), 'error');
        }
      }
      break;

    case 'delete':
      if (isset($_SESSION['namecards_user_namecard_settings'])) {
        unset($_SESSION['namecards_user_namecard_settings']);
      }
      break;
  }
}

/**
 * Delete a given user's cached views data.
 *
 * Will selectively delete cache data depending on current caching settings.
 * For example if switching from intensive to moderate caching one should
 * keep cached data for browse contacts view.
 *
 * @param int $uid
 *   User id.
 * @param int $current_caching_level
 *   Constant corresponding to current caching setting.
 */
function _namecards_delete_users_cached_data($uid, $current_caching_level = NULL) {
  if ($current_caching_level == NAMECARDS_CACHING_INTENSIVE) {
    // Dont delete anything.
    return;
  }
  elseif ($current_caching_level == NULL || $current_caching_level == NAMECARDS_CACHING_DISABLED) {
    // Delete all cached data for given user. Used when switching to caching level 'disabled'.
    $term = '%uid:' . (string) $uid . '%';
  }
  elseif ($current_caching_level == NAMECARDS_CACHING_MODERATE) {
    // Delete all cached data for views contacts_by_orgs and contacts_by_events. Used when switching to caching level 'moderate '.
    $term = '%namecards:contacts_by_node:uid:' . (string) $uid . '%';
  }
  $result = db_delete('cache_namecards')
    ->condition('cid', $term, 'LIKE')
    ->execute();
  unset($result);
}

/**
 * Determines if the organizations attached to the namecard_namecard becomes orphaned
 * and if so will delete the node for that organization and display a message confirming
 * deletion
 *
 * @TODO check what happens if another user deletes contacts resulting in orphaned orgs;
 *
 */
function _namecards_delete_linked_nodes_delete_orphaned_node($nid, $linked_nids, $type) {
  switch ($type) {
    case 'org':
      $type_name = t('Organization');
      break;

    case 'event':
      $type_name = t('Event');
      break;

    case 'position':
      $type_name = t('Position');
      break;
    case 'department':
      $type_name = t('Department');
      break;
  }
  foreach ($linked_nids as $linked_nid) {
    if (_namecards_delete_linked_nodes_check_orphaned_node($type, $linked_nid) == TRUE) {
      // Get name of org to construct message
      $result = db_query('SELECT title FROM {node} WHERE nid = :nid', array(':nid' => $linked_nid))->fetchField();
      $txt = t('@type "@title" is no longer associated with any contact and has been deleted', array('@type' => $type_name, '@title' => $result));
      drupal_set_message($txt);
      // delete orphaned node from database
      node_delete($linked_nid);
    }
  }
}

/**
 * Determines if the node is an orphan or not
 *
 * Performs search to see if referenced given node is linked to 
 * any other namecard_namecard nodes.
 *
 * @param $str
 * String representing a node type being tested.
 *
 * @param $nid
 * Integer representing the node ID for the node type being tested.
 *
 * @return
 *  True if node is not linked to a contact (i.e. not linked 
 *  to a node of type namecard_namecard) else returns false.
 */
function _namecards_delete_linked_nodes_check_orphaned_node($type, $nid) {  
  switch ($type) {
    case 'org':
      $query = 'SELECT COUNT(*) FROM {field_data_namecards_namecard_organization} WHERE entity_type = \'node\' AND bundle = \'namecards_namecard\' AND namecards_namecard_organization_nid = :nid';
      break;
    case 'event':
      $query = 'SELECT COUNT(*) FROM {field_data_namecards_namecard_event} WHERE entity_type = \'node\' AND bundle = \'namecards_namecard\' AND namecards_namecard_event_nid = :nid';
      break;
    case 'position':
      $query = 'SELECT COUNT(*) FROM {field_data_namecards_namecard_position} WHERE entity_type = \'node\' AND bundle = \'namecards_namecard\' AND namecards_namecard_position_nid = :nid';
      break;
    case 'department':
      $query = 'SELECT COUNT(*) FROM {field_data_namecards_namecard_department} WHERE entity_type = \'node\' AND bundle = \'namecards_namecard\' AND namecards_namecard_department_nid = :nid';
      break;
    default:
      return FALSE;
      break;
  }

  $num_results = db_query($query, array(':nid' => $nid))->fetchField();
  if ($num_results >= 1) {
    // Node is linked to other contacts.
    return FALSE;
  }
  else {
    // Node is not linked to any contacts.
    return TRUE;
  }
}

/**
 *  Determines if a specific field in namecards_namecard content type contains data
 *
 *  @param $type
 *  String representing the node type being tested.
 *
 *  @param $specific_node
 *  Node object being tested.
 *
 *  @return
 *  Returns nids of any linked linked nodes.
 */
function _namecards_delete_linked_nodes_check_fld_contains_linked_data($type, $specific_node) {
  $language = $specific_node->language;
  $nids = array();

  switch ($type) {
    case 'org':
      if (isset($specific_node->namecards_namecard_organization[$language])) {
        foreach ($specific_node->namecards_namecard_organization[$language] as $delta => $value) {
          $nids[] = $specific_node->namecards_namecard_organization[$language][$delta]['nid'];
        }
      }
      break;
    case 'event':
      if (isset($specific_node->namecards_namecard_event[$language])) {
        foreach ($specific_node->namecards_namecard_event[$language] as $delta => $value) {
          $nids[] = $specific_node->namecards_namecard_event[$language][$delta]['nid'];
        }
      }
      break;
    case 'position':
      if (isset($specific_node->namecards_namecard_position[$language])) {
        foreach ($specific_node->namecards_namecard_position[$language] as $delta => $value) {
          $nids[] = $specific_node->namecards_namecard_position[$language][$delta]['nid'];
        }
      }
      break;
    case 'department':
      if (isset($specific_node->namecards_namecard_department[$language])) {
        foreach ($specific_node->namecards_namecard_department[$language] as $delta => $value) {
          $nids[] = $specific_node->namecards_namecard_department[$language][$delta]['nid'];
        }
      }
      break;
  }
  
  return $nids;
}

/* 
function namecards_after_form_build() {} 
*/

/**
 * Displays the view 'namecards_browse_contacts'
 */
function namecards_browse_contacts() {
  global $user;
  $output = '';
  
  // Add jquery compacted contact action links.
  theme('namecards_contact_action_links_javascript');

  // Add js libraries required for ctools modal.
  _namecards_ctools_modal_parent();
  
  // Get args passed in URI and convert to string. Required since views handler expects string.
  $args = func_get_args();
  if (count($args) > 0) {
    $search_terms = check_plain($args[0]);
    $views_args = $search_terms;
  }
  else {
    $search_terms = '';
    $views_args = NULL;
  }

  // Create first part of output.
  $search_form = drupal_get_form('namecards_search_form', $search_terms);
  $output .= drupal_render($search_form);

  if ($args != NULL) {
    // Embed view (don't use cached version) if arguments (i.e. search terms) are present.
    $output .= views_embed_view('namecards_browse_contacts', 'default', $views_args);
    return $output;
  }
  else {
    // Check if caching enabled.
    if (variable_get('namecards_caching_settings_options', NAMECARDS_CACHING_DISABLED) != NAMECARDS_CACHING_DISABLED) {
      // Check if compression is enabled.
      $compression_enabled = variable_get('namecards_compression_settings_options', 0);
      // Check if view is paged and set cache id accordingly.
      if (!isset($_GET['page'])) {
        $cid = 'namecards:views_browse_contacts:uid:' . $user->uid;
      }
      else {
        $page_num = $_GET['page'];
        $cid = 'namecards:views_browse_contacts:uid:' . $user->uid . ':page:' . $page_num;
      }
      // Retrieve cached data.
      $cached_view = cache_get($cid, 'cache_namecards');
      if (!empty($cached_view) && $cached_view->created > variable_get('namecards_contacts_last_updated', 0)) {
        // Use cached data.
        // Uncompress cached data.
        if ($compression_enabled == 1) {
          $cached_view->data = gzinflate($cached_view->data);
        }
        $output .= $cached_view->data;
      }
      else {
        // Create cached data.
        $view = views_embed_view('namecards_browse_contacts', 'default', $views_args);
        // Compress data if data compression enabled.
        if ($compression_enabled == 1) {
          $data_to_cache = gzdeflate($view, 1);
        }
        else {
          $data_to_cache = $view;
        }
        // Create cache.
        cache_set($cid, $data_to_cache, 'cache_namecards');
        $output .= $view;
      }
    }
    else {
      $output .= views_embed_view('namecards_browse_contacts', 'default', $views_args);
    }
  }
  return $output;
}

/**
 * Menu callback function
 *
 * Loads views namecards_contacts_by_org and namecards_contacts_by_event.
 */
function namecards_contacts_by_node($type, $node) {
  global $user;
  $view = ''; // Holds the rendered view.

  // Set parent_handle. Used by namecards_set_parent_page_session_variable(). Required to
  // solve issue with running a menu page callback via AJAX.
  $_SESSION['modalframe']['parent_handle'] = '/namecards/contacts_by_node/get/' . $type . '/' . $node->nid;

  // Prepare views_embed_view() arguments.
  if ($type == 'org') {
    // The name of the view we are going to load
    $viewName = 'namecards_contacts_by_org';
  }
  elseif ($type == 'event') {
    // The name of the view we are going to load
    $viewName = 'namecards_contacts_by_event';
  }
  // Array of arguments we set for the view. Only one argument in
  // our example. your actual view may require additional arguments
  // which you may need to set.
  $args = $node->nid;
  // The display id of for the view.
  $displayId = 'default';

  // Check if caching enabled.
  if (variable_get('namecards_caching_settings_options', 0) == NAMECARDS_CACHING_INTENSIVE) {
    $cid = 'namecards:contacts_by_node:uid:'. $user->uid . ':nid:' . $node->nid;

    // Check if compression is enabled.
    $compression_enabled = variable_get('namecards_compression_settings_options', 0);

    // Retreive cached data.
    $cached_view = cache_get($cid, 'cache_namecards');
    if (!empty($cached_view) && $cached_view->created > variable_get('namecards_contacts_last_updated', 0)) {
      // Uncompress cached data.
      if ($compression_enabled == 1) {
        $cached_view->data = gzinflate($cached_view->data);
      }
      // Cached view available, so use it.
      $view = $cached_view->data;
    }
    else {
      // No cached view available so render the view and cache it.
      $view = views_embed_view($viewName, $displayId, $args);
      // Compress data if data compression enabled.
      if ($compression_enabled == 1) {
        $data_to_cache = gzdeflate($view, 1);
      }
      else {
        $data_to_cache = $view;
      }
      // Save cache.
      cache_set($cid, $data_to_cache, 'cache_namecards');
    }
  }
  else {
    // Call the views_embed_view function to returned themed view output
    $view = views_embed_view($viewName, $displayId, $args);
  }
  // Return the rendered view in a JSON object. The object will contain a property named “contacts” and "nodeId" that will be sent to the browser and is accessabel to javascript.
  return drupal_json_output(array('contacts' => $view, 'nodeId' => $node->nid));
  exit;
}

/**
 * Redirects the user to the menu tab based on user's default page settings
 */
function namecards_default_page() {
  global $user;

  if (!isset($_SESSION['namecards_user_namecard_settings'])) {
    _namecards_user_settings_session_var('set', $user->uid);
  }
  switch ($_SESSION['namecards_user_namecard_settings']->default_page) {
    case NAMECARDS_DEFAULT_PAGE_BROWSE: // Browse
      drupal_goto('namecards/browse_contacts');
      break;
    case NAMECARDS_DEFAULT_PAGE_ORGS: // Organizations
      drupal_goto('namecards/organization_names');
      break;
    case NAMECARDS_DEFAULT_PAGE_EVENTS: // Events
      drupal_goto('namecards/event_names');
      break;
    default:
      // This is a fallback just incase something goes wrong in the above code
      // due to unseen bugs.  This ensures user can still get to a page.
      drupal_set_message(t('Something went wrong when redirecting to default page. You have been automatically redirected to \'Browse\' by the system.'), 'error');
      drupal_goto('namecards/browse_contacts');
      break;
  }
}

/**
 * Displays the view 'namecards_events'
 */
function namecards_events() {
  $output = '';

  // Load javascript to handle JSON data when loading contacts_by_org or contacts_by_event views
  theme('namecards_get_contacts_by_node_javascript');

  // Reload any previously opened table rows containing contacts.
//  theme('namecards_reload_rows_javascript', 'event');
  
  // Add jquery compacted contact action links.
  theme('namecards_contact_action_links_javascript');
  
  // Add js libraries required for ctools modal.
  _namecards_ctools_modal_parent();
  
  
  // Get args passed in URI and convert to string. Required since views handler expects string.
  $args = func_get_args();
  if (count($args) > 0) {
    $search_terms = check_plain($args[0]);
    $views_args = $search_terms;
  }
  else {
    $search_terms = '';
    $views_args = NULL;
  }

  $search_form = drupal_get_form('namecards_search_form', $search_terms);
  $output .= drupal_render($search_form);
  $output .= views_embed_view('namecards_events', 'default', $views_args);
  
  return $output;
}

function namecards_exception_handler($errno, $errstr) {
  print $errstr;
}

/**
 * Implements hook_form_alter()
 */
function namecards_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
//     case 'namecards_live_search_form':
//       //$form['namecards_live_search_textfield']['#default_value'] = $form_state['values']['namecards_live_search_textfield'];
//       break;
      
    case 'namecards_event_node_form':
      // Remove preview button.
      if (isset($form['actions']['preview'])) {
        unset($form['actions']['preview']);
      } 
      // Remove delete button
      if (isset($form['actions']['delete'])) {
        unset($form['actions']['delete']);
      }
      // Add a cancel button to node form.
      $form['actions']['cancel'] = array(
          '#type' => 'submit',
          '#value' => t('Cancel'),
          '#weight' => 9999,
          '#attributes' => array(
              'class' => array('namecards_form_cancel_button'),
          ),
          '#submit' => array('namecards_modalframe_close'),
          '#limit_validation_errors' => array(),
      );
      break;

    case 'namecards_namecard_node_form':
//       dsm($form);
      // Ensure that relevent node functions are available to form.
      form_load_include($form_state, 'inc', 'node', 'node.pages');
      if (isset($form['actions']['preview'])) {
        // Remove preview button. This is a work around as previewing the node will
        // result in the org, event or other linked nodes being created. This will
        // cause a problem should the node not be saved, in which case there will be
        // orphaned org, event, etc nodes.
        unset($form['actions']['preview']);
      }
      // Remove delete button
      if (isset($form['actions']['delete'])) {
        unset($form['actions']['delete']);
      }
      $form['actions']['submit']['#validate'][] = 'namecards_form_validation_function';
      // Set what page to redirect to after form submit.
      $form['actions']['submit']['#submit'][] = '_namecards_form_redirect_on_submit';
      // Add a cancel button to node form.
      $form['actions']['cancel'] = array(
        '#type' => 'submit',
        '#value' => t('Cancel'),
        '#weight' => 9999,
        '#attributes' => array(
          'class' => array('namecards_form_cancel_button'),
        ),
        '#submit' => array('namecards_modalframe_close'),
        '#limit_validation_errors' => array(),
      );
      break;
      
    case 'namecards_organization_node_form':
      // Remove preview button.
      if (isset($form['actions']['preview'])) {
        unset($form['actions']['preview']);
      } 
      // Remove delete button
      if (isset($form['actions']['delete'])) {
        unset($form['actions']['delete']);
      }
      // Add a cancel button to node form.
      $form['actions']['cancel'] = array(
          '#type' => 'submit',
          '#value' => t('Cancel'),
          '#weight' => 9999,
          '#attributes' => array(
              'class' => array('namecards_form_cancel_button'),
          ),
          '#submit' => array('namecards_modalframe_close'),
          '#limit_validation_errors' => array(),
      );
      break;

    case 'node_delete_confirm':
      // Set path for cancel link.
      $uri = $form['actions']['cancel']['#href'];
      $form['actions']['cancel']['#href'] = _namecards_get_parent_page($uri);
      break;
      
    case 'user_admin_permissions':
      // Permissions form. Add function to update namecards user settings.
      $form['#submit'][] = '_namecards_user_settings_process';
      break;
      
  }

  // When editing nodes using a form within a modal frame (e.g. namecards, organizations and events).
  $regex_pattern = '/^\/namecards\/modalframe\/node\/edit\/[0-9]{1,}$/'; // This path is used exclusively in modal frames.
  $regex_pattern2 = '/^\/namecards\/add_contact$/'; // This path is used when the namecard node form is opened from 'Add' tab in 'Namecards' menu.
  if (($form_id == 'namecard_namecard_node_form' || $form_id == 'namecard_organization_node_form' || $form_id == 'namecard_event_node_form') && (preg_match($regex_pattern, $form['#action']) > 0 || preg_match($regex_pattern2, $form['#action']) > 0)) {
    if (isset($form['buttons']['preview'])) {
      unset($form['buttons']['preview']); // Remove preview button. This is a work around as previewing the node will result in the org, event or other linked nodes being created. This will cause a problem should the node not be saved, in which case there will be orphaned org, event, etc nodes.
    }
    if (isset($form['buttons']['delete'])) {
      unset($form['buttons']['delete']);  // Remove delete button
    }
    $form['buttons']['submit']['#submit'][] = 'namecards_modalframe_close'; // Add modalframe close function to queue of submit functions
    $form['buttons']['close'] = array(
      '#type' => 'submit',
      '#value' => t('Close'),
      '#submit' => array('namecards_modalframe_close'),
      '#weight' => 10,
    );
    // TODO: What does this do?  Possibly a left over from D6 build of module.  Check if still required.
    //$form['#after_build'][] = 'namecards_form_after_build';
  }
}

/**
 * Validation function for namecards node form
 */
function namecards_form_validation_function($form, &$form_state) {
  if ($form_state['values']['type'] == 'namecards_namecard') {
    $lang = $form_state['values']['language'];

    $num = count($form_state['values']['namecards_namecard_phone'][$lang]);
    for ($i = 0; $i < $num; $i++) {
      if (isset($form_state['values']['namecards_namecard_phone'][$lang][$i]['phone_number']) && !empty($form_state['values']['namecards_namecard_phone'][$lang][$i]['phone_number'])) {
        $field_name = 'namecards_namecard_phone][' . $lang . '][' . $i . '][phone_number';
        $regex_pattern = '/^\+[0-9]{1,} \([0-9]{1,}\) ([0-9]{1,}|[0-9]{1,}-[0-9]{1,})$/';
        $field_value = $form_state['values']['namecards_namecard_phone'][$lang][$i]['phone_number'];
        if (preg_match($regex_pattern, $field_value) == 0) {
          form_set_error($field_name, t('Phone number is in the wrong format.'));
        }
      }
    }
    $num = count($form_state['values']['namecards_namecard_fax'][$lang]);
    for ($i = 0; $i < $num; $i++) {
      if (isset($form_state['values']['namecards_namecard_fax'][$lang][$i]['fax_number']) && !empty($form_state['values']['namecards_namecard_fax'][$lang][$i]['fax_number'])) {
        $field_name = 'namecards_namecard_fax][' . $lang . '][' . $i . '][fax_number';
        $regex_pattern = '/^\+[0-9]{1,} \([0-9]{1,}\) ([0-9]{1,}|[0-9]{1,}-[0-9]{1,})$/';
        $field_value = $form_state['values']['namecards_namecard_fax'][$lang][$i]['fax_number'];
        if (preg_match($regex_pattern, $field_value) == 0) {
          form_set_error($field_name, t('Fax number is in the wrong format.'));
        }
      }
    }
    $num = count($form_state['values']['namecards_namecard_mobile'][$lang]);
    for ($i = 0; $i < $num; $i++) {
      if (isset($form_state['values']['namecards_namecard_mobile'][$lang][$i]['value']) && !empty($form_state['values']['namecards_namecard_mobile'][$lang][$i]['value'])) {
        $field_name = 'namecards_namecard_mobile]['. $lang . '][' . $i . '][value';
        $regex_pattern = '/^\+[0-9]{1,} [0-9]{1,}$/';
        $field_value = $form_state['values']['namecards_namecard_mobile'][$lang][$i]['value'];
        if (preg_match($regex_pattern, $field_value) == 0) {
          form_set_error($field_name, t('Mobile phone number is in the wrong format.'));
        }
      }
    }
    $num = count($form_state['values']['namecards_namecard_email'][$lang]);
    for ($i = 0; $i < $num; $i++) {
      if (isset($form_state['values']['namecards_namecard_email'][$lang][$i]['value']) && !empty($form_state['values']['namecards_namecard_email'][$lang][$i]['value'])) {
        $field_name = 'namecards_namecard_email]['. $lang . '][' . $i . '][value';
        $regex_pattern = '/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]{1,}$/';
        $field_value = $form_state['values']['namecards_namecard_email'][$lang][$i]['value'];
        if (preg_match($regex_pattern, $field_value) == 0) {
          form_set_error($field_name, t('Email address is in the wrong format.'));
        }
      }
    }
    $num = count($form_state['values']['namecards_namecard_event'][$lang]);
    for ($i = 0; $i < $num; $i++) {
      if (isset($form_state['values']['namecards_namecard_event'][$lang][$i]['nid']) && !empty($form_state['values']['namecards_namecard_event'][$lang][$i]['nid'])) {
        $field_name = 'namecards_namecard_event';
        $regex_pattern = '/.\ \[[1-9][0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])\]$/';
        $field_value = db_query('SELECT title FROM {node} WHERE nid = :nid', array(':nid' => $form_state['values']['namecards_namecard_event'][$lang][$i]['nid']))->fetchField();
        // If validation failed.
        if (preg_match($regex_pattern, $field_value) == 0) {
          // Appears to not be necessary to "Set value of event title in form so can be displayed on form reload",
          // as it appears to have been taken care of by system or some other relevant module.
          // Remove event from database, since it has already been inserted into the database at this point.
          $num_deleted = db_delete('node')
            ->condition('nid', $form_state['values']['namecards_namecard_event'][$lang][$i]['nid'])
            ->execute();
          form_set_error($field_name, t('The event name is not in the correct format.  Please use "EVENTNAME [YYYY-MM-DD]" (e.g. <b>Boston Conference [2009-07-02]</b>)'));
        }
      }
    }
  }
}

/**
 * Creates structure for table elements.
 *
 * This structure is used for creating the table seen when viewing
 * a single contact in a modal frame.
 *
 * @param int $nid
 * @return $structure
 *   An associative array containing the structure of table headers
 *   (as $structure['header']), rows (as $structure['rows']), and
 *   general table attributes (as $structure['attributes']).
 */
function namecards_get_table_data($nid) {
  $structure = array();
  $structure['header'] = array(NULL, NULL);
  $structure['rows'] = array();
  $structure['attributes'] = array();

  $node = node_load($nid);
  $lang = $node->language;

  // Set field values.

  // Field public value.
  if ($node->namecards_namecard_public[$lang][0]['value'] == 1) {
    $public = t('Yes');
  }
  else {
    $public = t('No');
  }

  // Field surname value.
  
  if (!empty($node->title)) {
    $surname = check_plain($node->title);
  }
  else {
    $surname = theme('namecards_set_unknown_value', array('text' => t('Unknown')));
  }

  // Field given name value.
  $given_name = '--';
  if (!empty($node->namecards_namecard_given_name[$lang][0]['value'])) {
    $given_name = check_plain($node->namecards_namecard_given_name[$lang][0]['value']);
  }

  // Field nickname value.
  $nickname = '--';
  if (!empty($node->namecards_namecard_nickname[$lang])) {
    $nickname = check_plain($node->namecards_namecard_nickname[$lang][0]['value']);
  }

  // Field org value.
  $org = '--';
  if ($node->namecards_namecard_comp_org[$lang][0]['value'] != NULL) {
    $org = check_plain($node->namecards_namecard_comp_org[$lang][0]['value']);
  }

  // Field position value.
  $position = '--';
  if ($node->namecards_namecard_comp_pos[$lang][0]['value'] != NULL) {
    $position = check_plain($node->namecards_namecard_comp_pos[$lang][0]['value']);
  }

  // Field department value.
  $department = '--';
  if ($node->namecards_namecard_comp_dept[$lang][0]['value'] != NULL) {
    $department = check_plain($node->namecards_namecard_comp_dept[$lang][0]['value']);
  }

  // Field email value.
  $email = '--';
  if (!empty($node->namecards_namecard_email[$lang])) {
    $temp = array();
    foreach ($node->namecards_namecard_email[$lang] as $item) {
      if (!empty($item['safe_value'])) {
        $temp[] = theme('namecards_add_email_links', array('text' => $item['safe_value']));
      }
    }
    if (!empty($temp)) {
      $email = implode('<br/>', $temp);
    }
  }

  // Field phone value.
  $phone = '--';
  if (!empty($node->namecards_namecard_phone[$lang])) {
    $temp = array();
    foreach ($node->namecards_namecard_phone[$lang] as $item) {
      if (!empty($item['phone_number'])) {
        $temp[] = theme('namecards_number_type', array('type' => $item['phone_type'])) . ' ' . check_plain($item['phone_number']);
      }
    }
    if (!empty($temp)) {
      $phone = implode('<br/>', $temp);
    }
  }

  // Field mobile value.
  $mobile = '--';
  if (!empty($node->namecards_namecard_mobile[$lang])) {
    $temp = array();
    foreach ($node->namecards_namecard_mobile[$lang] as $item) {
      if (!empty($item['value'])) {
        $temp[] = check_plain($item['value']);
      }
    }
    if (!empty($temp)) {
      $mobile = implode('<br/>', $temp);
    }
  }
  
  // Field fax value.
  $fax = '--';
  if (!empty($node->namecards_namecard_fax[$lang])) {
    $temp = array();
    foreach ($node->namecards_namecard_fax[$lang] as $item) {
    if (!empty($item['fax_number'])) {
        $temp[] = theme('namecards_number_type', array('type' => $item['fax_type'])) . ' ' . check_plain($item['fax_number']);
      }
    }
    if (!empty($temp)) {
      $fax = implode('<br/>', $temp);
    }
  }

  // Field address value.
  $address = '--';
  if (!empty($node->namecards_namecard_address[$lang])) {
    $temp = array();
    foreach ($node->namecards_namecard_address[$lang] as $item) {
      $address_str = '';
      foreach ($item as $key => $value) {
        if ($key == 'street' && !empty($value)) {
          $address_str .= str_replace(', ', '<br />', check_plain($value)) . '<br />';
        }
        elseif (!empty($value)) {
          $address_str .= check_plain($value) . '<br />';
        }
      }
      $temp[] = '<div class="namecards-address-compound-field">' . $address_str . '</div>';
    }
    $address = implode($temp);
  }

  // Field event value.
  $event = '--';
  if (!empty($node->namecards_namecard_comp_event[$lang][0]['value'])) {
    $event = check_plain($node->namecards_namecard_comp_event[$lang][0]['value']);
  }
  
  // Field notes.
  $notes = '--';
  if (!empty($node->namecards_namecard_notes[$lang][0]['value'])) {
    $notes = nl2br(check_plain($node->namecards_namecard_notes[$lang][0]['value']));
  }
  

  // Set row content.
  $structure['rows'][] = array(
      array(
          'data' => t('Public'),
          'class' => 'namecards-table-header-cell',
      ),
      array(
          'data' => $public,
      ),
  );
  $structure['rows'][] = array(
      array(
          'data' => t('Surname'),
          'class' => 'namecards-table-header-cell',
      ),
      array(
          'data' => $surname,
      ),
  );
  $structure['rows'][] = array(
      array(
          'data' => t('Given name'),
          'class' => 'namecards-table-header-cell',
      ),
      array(
          'data' => $given_name,
      ),
  );
  $structure['rows'][] = array(
      array(
          'data' => t('Nick name'),
          'class' => 'namecards-table-header-cell',
      ),
      array(
          'data' => $nickname,
      ),
  );
  $structure['rows'][] = array(
      array(
          'data' => t('Organization'),
          'class' => 'namecards-table-header-cell',
      ),
      array(
          'data' => $org,
      ),
  );
  $structure['rows'][] = array(
      array(
          'data' => t('Position'),
          'class' => 'namecards-table-header-cell',
      ),
      array(
          'data' => $position,
      ),
  );
  $structure['rows'][] = array(
      array(
          'data' => t('Department'),
          'class' => 'namecards-table-header-cell',
      ),
      array(
          'data' => $department,
      ),
  );
  $structure['rows'][] = array(
      array(
          'data' => t('E-mail'),
          'class' => 'namecards-table-header-cell',
      ),
      array(
          'data' => $email,
      ),
  );
  $structure['rows'][] = array(
      array(
          'data' => t('Phone'),
          'class' => 'namecards-table-header-cell',
      ),
      array(
          'data' => $phone,
      ),
  );
  $structure['rows'][] = array(
      array(
          'data' => t('Mobile'),
          'class' => 'namecards-table-header-cell',
      ),
      array(
          'data' => $mobile,
      ),
  );
  $structure['rows'][] = array(
      array(
          'data' => t('Fax'),
          'class' => 'namecards-table-header-cell',
      ),
      array(
          'data' => $fax,
      ),
  );
  $structure['rows'][] = array(
      array(
          'data' => t('Address'),
          'class' => 'namecards-table-header-cell',
      ),
      array(
          'data' => $address,
      ),
  );
  $structure['rows'][] = array(
      array(
          'data' => t('Event'),
          'class' => 'namecards-table-header-cell',
      ),
      array(
          'data' => $event,
      ),
  );
  $structure['rows'][] = array(
      array(
          'data' => t('Notes'),
          'class' => 'namecards-table-header-cell',
      ),
      array(
          'data' => $notes,
      ),
  );
  
  // Set table attributes.
  $structure['attributes'] = array(
      'class' => array('namecards-contact-details-table'),
  );

  return $structure;
}

/**
 * Implements hook_init()
 */
function namecards_init() {
  global $user;
  
  // Add general javascript functions.
  theme('namecards_javascript');
  // Add user icons to contacts.
  theme('namecards_add_icons_javascript');

  // Get the URI of the page currently being loaded.  Utilizes check_plain()
  // to circumvent hackers. Get src uri to avoid problems with changing aliases.
  $orig_uri = check_plain($_GET['q']);

  // This section handles reloading of pages containing AJAX content when coming from a closed modal frame
  $regex_pattern = '/namecards\/(browse_contacts|organization_names|event_names|email_list|settings|contacts_by_node\/get\/(org|event)\/[0-9]{1,})/';
  if (preg_match($regex_pattern, $orig_uri) > 0) {
    // Load javascript to handle JSON data when loading contacts_by_org or contacts_by_event views
    theme('namecards_get_contacts_by_node_javascript');

    // Deals specifically with the issue of reloading a page after a modal frame
    // closes, where the parent page contains content which is displayed with AJAX.
    // Only runs when the '$_SESSION['modalframe']['child']' is set, to ensure that
    // the AJAX is only triggered when coming from a modal frame.  Otherwise the
    // AJAX would also fire on regular loading of 'namecards/organization_names'.
    if (preg_match('/namecards\/(organization|event)_names/', $orig_uri) > 0 && preg_match('/namecards\/contacts_by_node\/get\/(org|event)\/[0-9]{1,}/', $_SESSION['modalframe']['parent']) > 0 && isset($_SESSION['modalframe']['child'])) { // Only running when the '$_SESSION['modalframe']['child']' is set, ensures that the AJAX is only triggered when coming from a modal frame.  Otherwise the AJAX would also fire on regular loading of 'namecards/organization_names'
      // Get node id and type from URI.
      $array_of_uri_parts = explode('/', $_SESSION['modalframe']['parent']);
      $nid = array_pop($array_of_uri_parts);
      $type = array_pop($array_of_uri_parts);
      // Reset $_SESSION['modalframe']['parent'] to that of the page, since
      // 'namecards/nojs/contacts_by_org/get/156' is embedded within
      // 'namecards/organization_names'.
      $_SESSION['modalframe']['parent'] = _namecards_get_parent_page($_SESSION['modalframe']['parent']);
      // Reload ajax data (i.e. already open row)
      theme('namecards_reload_rows_javascript', array('type' => $type));
    }

    // Can unset $_SESSION['modalframe']['child'] since the parent page has
    // already been reloaded after closing modalframe.
    if (isset($_SESSION['modalframe']['child'])) {
      unset($_SESSION['modalframe']['child']);
    }

//     if (module_exists('modalframe')) {
//       // Send the Modal Frame javascript for parent windows to the page
//       modalframe_parent_js();
//       // Add the client-side behaviors for the modalframe.
//       theme('namecards_modalframe_javascript');
//     }

    // Get the URI of the page and set as session variable.
    // Used for reloading pages after closing modalframes.
    if (preg_match('/namecards\/(organization_names|event_names)/', $orig_uri) > 0 && isset($_SESSION['modalframe']['parent_handle'])) {
      namecards_set_parent_page_session_variable($_SESSION['modalframe']['parent_handle']);
    }
    else {
      namecards_set_parent_page_session_variable();
    }
  }

  // Sets up variables required for proper reloading of parent pages after closing modal frames.
  // All these URIs apear in modalframes so are assigned to $_SESSION['modalframe']['child']
  $regex_pattern = '/namecards\/(add_contact|display_email_list|modalframe\/node\/(edit|view|delete)\/[0-9]{1,})/'; // This path is used exclusively in modal frames.
  if (preg_match($regex_pattern, $orig_uri) > 0) {
    $_SESSION['modalframe']['child'] = $orig_uri;
  }

  // Destroy parent handle. Should be destroyed at end of any page load, since
  // it is only temporary and has already been processed earlier in this function.
  if (isset($_SESSION['modalframe']['parent_handle'])) {
    unset($_SESSION['modalframe']['parent_handle']);
  }
}

/**
 * Implements hook_menu()
 */
function namecards_menu() {
  $weight = 0;
  $items['namecards'] = array(
    'title' => t('Namecards'),
    'page callback' => 'namecards_default_page',
    'access callback' => 'namecards_menu_access_callback_function',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'main-menu',
  );
  $items['namecards/browse_contacts'] = array(
    'title' => 'Browse',
    'description' => t('Browse contacts'),
    'page callback' => 'namecards_browse_contacts',
    'access callback' => 'namecards_menu_access_callback_function',
    'weight' => ++$weight,
    'type' => MENU_LOCAL_TASK,
  );
  $items['namecards/organization_names'] = array(
    'title' => 'Organizations',
    'description' => t('List of organizations'),
    'page callback' => 'namecards_organizations',
    'access callback' => 'namecards_menu_access_callback_function',
    'weight' => ++$weight,
    'type' => MENU_LOCAL_TASK,
  );
  $items['namecards/contacts_by_node/get/%/%node'] = array(
    'page callback' => 'namecards_contacts_by_node',
    'page arguments' => array(3, 4),
    'access callback' => 'namecards_menu_access_callback_function',
    'type' => MENU_CALLBACK,
  );
  $items['namecards/event_names'] = array(
    'title' => 'Events',
    'description' => t('List contacts by event'),
    'page callback' => 'namecards_events',
    'access callback' => 'namecards_menu_access_callback_function',
    'type' => MENU_LOCAL_TASK,
    'weight' => ++$weight,
  );
  $items['namecards/email_list'] = array(
    'title' => 'Email list',
    'description' => t('Creates a list of selected email addresses which can be copied and pasted into sender field of an email.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('namecards_email_list_form'),
    'access callback' => 'namecards_menu_access_callback_function',
    'weight' => ++$weight,
    'type' => MENU_LOCAL_TASK,
    'file' => 'namecards_create_email_list.inc',
    'file path' => drupal_get_path('module', 'namecards'),
  );
  $items['namecards/add_contact'] = array(
    'title' => 'Add',
    'description' => t('Add a new contact.'),
    'page callback' => 'namecards_modalframe_add_contact',
    'access callback' => 'namecards_menu_access_callback_function',
    'weight' => ++$weight,
    'type' => MENU_LOCAL_TASK,
  );
  $items['namecards/settings'] = array(
    'title' => 'Settings',
    'description' => t('User settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('namecards_user_settings_form'),
    'access callback' => 'namecards_menu_access_callback_function',
    'weight' => ++$weight,
    'type' => MENU_LOCAL_TASK,
    'file' => 'namecards_user_settings.inc',
    );
  $items['namecards/modalframe/node/%/%/%ctools_js'] = array(
    'page callback' => 'namecards_modalframe_node',
    'page arguments' => array(3, 4, 5),
    'access callback' => 'namecards_menu_access_callback_function',
    'access arguments' => array(3, 4),
    'type' => MENU_CALLBACK,
  );
  $items['namecards/set_displayed_rows_session_var'] = array(
    'page callback' => 'namecards_set_displayed_rows_session_variable',
    'page arguments' => array(),
    'access callback' => 'namecards_menu_access_callback_function',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/namecards'] = array(
    'title' => 'Namecards',
    'description' => t('Configuration settings for namecards module.'),
    'position' => 'right',
    'weight' => -5,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/namecards/settings'] = array(
    'title' => 'Namecards settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('namecards_admin_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'namecards.admin.inc',
    'file path' => drupal_get_path('module', 'namecards'),
  );
  $items['namecards/scan_for_orphan_nodes'] = array(
    'page callback' => 'namecards_scan_for_orphan_nodes',
    'access arguments' => array('administer namecards module settings'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Access callback function for certain menu items
 *
 * Determines whether user can user particular menu item.
 * @see namecards_menu()
 */
function namecards_menu_access_callback_function($op = NULL, $nid = NULL) {
  global $user;
  $permission = FALSE; // Defaults to false.

  if ($user->uid == 1) {
    // Grant access for Super user.
    return TRUE;
  }

  if ($op != NULL && is_int($nid)) {
    // grant permissions for node related menu operations
    
    $node = node_load($nid);

    switch ($op) {
      // Grant permission to use node specific menu items (view and create csv
      // file).
      case 'view':
      case 'csv':
        // Grant access for public namecards.
        if ($node->field_public[0]['value'] == 1) {
          if ($node->uid == $user->uid || user_access('access namecards', $user) || user_access('administer namecards', $user)) {
            $permission = TRUE;
          }
        }
        // Grant access for private namecards. Access only available for
        // original author or namecards administrators.
        elseif ($node->field_public[0]['value'] == 0) {
          if ($node->uid == $user->uid || user_access('administer namecards', $user)) {
            $permission = TRUE;
          }
        }
        break;
      case 'edit':
      case 'delete':
        // Grant permission to use node specific menu items (e.g. edit, and delete) only if
        // the user is original author or has namecards administrative permissions.
        if ($node->uid == $user->uid || user_access('administer namecards', $user)) {
          $permission = TRUE;
        }
        break;
    }
  }
  elseif (user_access('access namecards', $user) || user_access('administer namecards', $user)) {
    // Grant permission to use none node related menu items based on user's permissions.
    $permission = TRUE;
  }

  return $permission;
}

/**
 * Loads add new namecard_namecard node form in modal frame.
 */
function namecards_modalframe_add_contact() {
  // Required for loading node form
  global $user;
  
  // Check if javascript is enabled.
  $js = (!empty($_POST['js'])) ? TRUE : FALSE;
  
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
  }

  // Mock the node type
  $node = new stdClass();
  $node->type = 'namecards_namecard';
  node_object_prepare($node);
  $node->uid = $user->uid;
  $node->name = $user->name;
  $node->language = LANGUAGE_NONE;

  if ($js) {
    ctools_include('node.pages', 'node', '');
    $form_state = array(
      'ajax' => $js,
      'title' => t('Add'),
      'build_info' => array(
        'args' => array(
          $node,
        ),
      ),
    );
    $output = ctools_modal_form_wrapper($node->type . '_node_form', $form_state);
    
    // Close modal if form has been processed.
    if (!empty($form_state['executed'])) {
      $output = array();
      if (isset($form_state['namecards_modal_close'])) {
        // Close button was pressed so close modal.
        $output[] = ctools_modal_command_dismiss();
      }
      else {
        // Close modal and reload parent page.
        $output[] = ctools_modal_command_dismiss();
        $output[] = ctools_ajax_command_reload();
      }
    }
    print ajax_render($output);
    exit;
  }
  else {
    $form_state = array();
    $form_state['build_info']['args'] = array($node);
    form_load_include($form_state, 'inc', 'node', 'node.pages');
  
    return drupal_build_form($node->type . '_node_form', $form_state);
  }
}

/**
 * Submit function for close button
 * 
 * @param $form
 * @param $form_state
 * @param $parent_reload
 *   Boolean denoting whether or not parent page should be reloaded
 *   after closing modal. 
 */
function namecards_modalframe_close($form, &$form_state, $parent_reload = FALSE) {
  global $base_root;

  // Remove any linked nodes that may have been created.  For some reason 
  // nodes for any org, position, etc in the node form will be created even though
  // close button is pressed.  TODO: need to investigate cause of this and fix.
  _namecards_scan_for_orphan_nodes();

  if ($_POST['js']) {
    // Javascript is enabled so modal is in use.
    $form_state['executed'] = TRUE;
    $form_state['namecards_modal_close'] = _namecards_get_parent_page($_SESSION['modalframe']['parent']);
  }
  else {
    // Javascript not enabled, redirect the previous page.
    if (isset($_SESSION['modalframe']['parent'])) {
      drupal_goto($base_root . '/' ._namecards_get_parent_page($_SESSION['modalframe']['parent']));
    }
    else {
      // Default behavior if no parent set.
      global $user;
      drupal_goto($base_root . '/' . _namecards_get_default_user_page_uri($user->uid));
    }
  }
}

/**
 * Creates a close modal frame button for use on forms.
 */
function namecards_modalframe_close_button_form() {
  $form['close'] = array(
    '#type' => 'submit',
    '#value' => t('Close'),
    '#submit' => array('namecards_modalframe_close'),
    '#weight' => 10,
    '#attributes' => array(
      'class' => array('namecards-modalframe-close-button'),
    ),
  );

  return $form;
}

/**
 * Page callback function for menu item 'namecards/modalframe/node/%/%node'.
 * @param $op
 *   Used to determine which form to load based on whether the node should be either viewed, edited or deleted.
 * @param $node
 *   Node to be either viewed, edited or deleted.
 */
function namecards_modalframe_node($op, $nid, $js = FALSE) {
  $output = '';
  
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
  }
  
  switch ($op) {
    case 'view':
      if ($js) {
        // Create table showing contact's information
        $table_structure = namecards_get_table_data($nid);
        $output .= theme('table', array('header' => $table_structure['header'], 'rows' => $table_structure['rows'], 'attributes' => $table_structure['attributes']));
        // Add close button to bottom of page.
        return ctools_modal_render(t('Details'), $output);
      }
      else {
        // Create table showing contact's information
        $table_structure = namecards_get_table_data($nid);
        $output .= theme('table', array('header' => $table_structure['header'], 'rows' => $table_structure['rows'], 'attributes' => $table_structure['attributes']));
        // Add close button to bottom of page.
        $form = drupal_get_form('namecards_modalframe_close_button_form');
        $output .= drupal_render($form);
        return $output;
      }
      break;
    
    case 'edit':
      $node = node_load($nid);
      if ($js) {
        ctools_include('node.pages', 'node', '');
        $form_state = array(
          'ajax' => $js,
          'title' => t('Edit'),
          'build_info' => array(
            'args' => array(
              $node,
            ),
          ),
        );
        $output = ctools_modal_form_wrapper($node->type . '_node_form', $form_state);
        
        // Close modal if form has been processed.
        if (!empty($form_state['executed'])) {
          $output = array();
          if (isset($form_state['namecards_modal_close'])) {
            // Close button was pressed so close modal.
            $output[] = ctools_modal_command_dismiss();
          }
          else {
            // Close modal and reload parent page.
            $output[] = ctools_modal_command_dismiss();
            $output[] = ctools_ajax_command_reload();
          }
        }
        print ajax_render($output);
        exit;
      }
      else {
        module_load_include('inc', 'node', 'node.pages');
        $node_edit_form = node_page_edit($node);
        return drupal_render($node_edit_form);
      }
      break;

    case 'delete':
      $node = node_load($nid);
      $lang = $node->language;
      if (!empty($node->namecards_namecard_given_name[$lang][0]['safe_value'])) {
        $given_name = $node->namecards_namecard_given_name[$lang][0]['safe_value'];
      } 
      else {
        $given_name = '';
      }
      $surname = check_plain($node->title);
      $contact_name = $given_name . ' ' . $surname;
      
      if ($js) {
        $form_state = array(
          'title' => t('Delete'),
          'ajax' => $js,
          'build_info' => array(
            'args' => array(
              $contact_name, 
              $nid,
            ),
          ),
        );
        $output = ctools_modal_form_wrapper('namecards_node_delete_confirmation_form', $form_state);
        
        // Close modal if form has been processed.
        if (!empty($form_state['executed'])) {
          $output = array();
          if (isset($form_state['namecards_modal_close'])) {
            // Close button was pressed so close modal.
            $output[] = ctools_modal_command_dismiss();
          }
          else {
            // Close modal and reload parent page.
            $output[] = ctools_modal_command_dismiss();
            $output[] = ctools_ajax_command_reload();
          }
        }
        
        print ajax_render($output);
        exit;
      }
      else {
        $node_delete_form = drupal_get_form('namecards_node_delete_confirmation_form', $contact_name, $nid);
        $output .= drupal_render($node_delete_form);
        return $output;
      }
      break;
      
    default:
      break;
  }
}

/**
 * Implements hook_node_access_records()
 */
function namecards_node_access_records($node) {
  global $user;
  
  // Only implement for node types specific to namecards module.
  if ($node->type =='namecards_namecard' || $node->type =='namecards_organization' || $node->type =='namecards_event' || $node->type =='namecards_position' || $node->type =='namecards_department') {
    $grants = array();
    $grants[] = array(
      'realm' => 'namecards',
      'gid' => 0, // Regular namecards user
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    $grants[] = array(
      'realm' => 'namecards',
      'gid' => 1, // Namecards module administrator
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
      'priority' => 0,
    );

    // For the namecards_author array, the GID is equivalent to a UID, which
    // means there are many many groups of just 1 user.
    $grants[] = array(
      'realm' => 'namecards_author',
      'gid' => !empty($node->uid) ? $node->uid : $user->uid,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
      'priority' => 0,
    );

    return $grants;
  }
}

/**
 * Implements hook_node_delete()
 */
function namecards_node_delete($node) {
  // Delete linked nodes.
  _namecards_delete_linked_nodes($node, 'delete');
  // Notify system of updated to data (used by data caching functions).
  _namecards_set_var_last_updated($node);
}

/**
 * Defines delete individual contact form
 */
function namecards_node_delete_confirmation_form($form, &$form_state, $name, $nid) {
  $form = array();
$_SESSION['debug'] = array('Name' => $name, 'Nid' => $nid);
//   if (!empty($form_state['build_info']['args'][0])) {
//     $name = $form_state['build_info']['args'][0];
//   }
//   if (!empty($form_state['build_info']['args'][1])) {
//     $nid = $form_state['build_info']['args'][1];
//   }
  
  $form['message'] = array(
    '#prefix' => '<div class="namecards-delete-confirmation-form-message">',
    '#markup' => t('Are you sure you want to permanently delete contact %name?', array('%name' => $name)),
    '#suffix' => '</div>',
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#attributes' => array(
      'class' => array('namecards_node_delete_confirmation_form_submit_button'),
    ),
    '#submit' => array('namecards_node_delete_confirmation_form_submit'),
  );
  $form['contact_nid'] = array(
    '#type' => 'hidden',
    '#value' => $nid,
  );
//  $form['refering_page'] = array(
//    '#type' => 'hidden',
//    '#value' => $refering_page,
//  );
  $form['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
//    '#executes_submit_callback' => TRUE,
    '#attributes' => array(
      'class' => array('namecards_node_delete_confirmation_form_cancel_button'),
    ),
    '#submit' => array('namecards_modalframe_close'),
    '#limit_validation_errors' => array(),
  );
  return $form;
}

/**
 * Submit function for node delete confirmation form.
 */
function namecards_node_delete_confirmation_form_submit($form, &$form_state) {
  global $user;
  $nid = $form_state['values']['contact_nid'];
  
  // Switch to admin (UID = 1) and delete node using best 
  // practice methods (http://drupal.org/node/218104). If 
  // the code fails, it's not a problem because the 
  // admin's session is not be saved.
  $original_user = $user;
  $old_state = drupal_save_session();
  drupal_save_session(FALSE);
  $user = user_load(1); 
  // Delete node.
  node_delete($nid);
  // Restore original session. 
  $user = $original_user;
  drupal_save_session($old_state);

  // Close modal frame
  if ($_POST['js']) {
    // Javascript is enabled so modal is in use.
    $form_state['executed'] = TRUE;
  }
  else {
    // Javascript not enabled, redirect the previous page.
    if (isset($_SESSION['modalframe']['parent'])) {
      drupal_goto($base_root . '/' ._namecards_get_parent_page($_SESSION['modalframe']['parent']));
    }
    else {
      // Default behavior if no parent set.
      global $user;
      drupal_goto($base_root . '/' . _namecards_get_default_user_page_uri($user->uid));
    }
  }
}

/**
 * Implements hook_node_grants().
 */
function namecards_node_grants($account, $op) {
  switch ($op) {
    case 'view':
      if (user_access('administer namecards', $account)) {
        // Full permissions for namecards administrator.
        $grants['namecards'] = array(1);
      }
      elseif (user_access('access namecards', $account)) {
        // View permissions allowed for regular namecards user.
        $grants['namecards'] = array(0);
      }
      break;
    case 'update':
    case 'delete':
      if (user_access('administer namecards', $account)) {
        // Full permissions for namecards administrator.
        $grants['namecards'] = array(1);
      }
      elseif (user_access('access namecards', $account)) {
        // Only view permissions allowed for regular namecards user.
        $grants['namecards'] = array(0);
      }
      break;
  }

  // Always grant full permissions to node author.
  $grants['namecards_author'] = array($account->uid);
  return $grants;
}

/**
 * Implements hook_node_insert()
 */
function namecards_node_insert($node) {
  // Notify system of update to data (used by data caching functions).
  _namecards_set_var_last_updated($node);
}

/**
 * Implements hook_node_load()
 */
function namecards_node_load($nodes, $types) {
  // Get first node as there should only be one.
  $node = array_shift($nodes);
  if ($node->type == 'namecards_namecard') {
    _namecards_delete_linked_nodes($node, 'load');
  }
}

/**
 * Implements hook_node_update()
 */
function namecards_node_update($node) {
  // Remove any nodes that are no longer linked to namecard.
  if ($node->type == 'namecards_namecard') {
    _namecards_delete_linked_nodes($node, 'update');
  }
  // Make sure any computed values are recalculated.
  _namecards_update_namecard_on_linked_name_change($node);
  // Notify system of update to data (used by data caching functions).
  _namecards_set_var_last_updated($node);
}

/**
 * Displays the view 'namecards_organizations'
 */
function namecards_organizations() {
  $output = '';
  // Load javascript to handle JSON data when loading contacts_by_org or contacts_by_event views
  theme('namecards_get_contacts_by_node_javascript');

  // Reload any previously opened table rows containing contacts.
//  theme('namecards_reload_rows_javascript', 'org');

  // Add jquery compacted contact action links.
  theme('namecards_contact_action_links_javascript');
  
  // Add js libraries required for ctools modal.
  _namecards_ctools_modal_parent();
  
  // Get args passed in URI and convert to string. Required since views handler expects string.
  $args = func_get_args();
  if (count($args) > 0) {
    $search_terms = check_plain($args[0]);
    $views_args = $search_terms;
  }
  else {
    $search_terms = '';
    $views_args = NULL;
  }

  $search_form = drupal_get_form('namecards_search_form', $search_terms);
  $output .= drupal_render($search_form);
  $output .= views_embed_view('namecards_organizations', 'default', $views_args);
  
  return $output;
}

/**
 * Implements hook_perm()
 */
function namecards_permission() {
  // Options are:
  // 'access namecards' - user is allowed to use the namecards module (i.e. is namecards user)
  // 'administer namecards' - user is a super user (i.e. can view, edit, delete any namecard
  //    record) thus giving theM an admin function within the bounds of the namecards
  //    module; GRANT WITH CARE!
  return array(
    'access namecards' => array(
      'title' => t('Access namecards'),
      'description' => t('Provides user level access to the namecards system.'),
    ),
    'administer namecards' => array(
      'title' => t('Administer namecards'),
      'description' => t('Provides administrator level access to the namecards system.'),
    ),
  );
}

/**
 * Create search form
 *
 * @param string $search_term_string
 *   keywords from previous search.
 */
function namecards_search_form($form, &$form_state, $search_term_string = '') {
  $default_value = urldecode($search_term_string);
  $form = array();
  $form['namecards_live_search_textfield'] = array(
    '#type' => 'textfield',
    '#default_value' => check_plain($default_value),
    '#size' => 30,
    '#maxlength' => 400,
  );
  $form['namecards_live_search_search_button'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );
  $form['namecards_live_search_clear_button'] = array(
    '#type' => 'submit',
    '#value' => t('Clear'),
  );
  return $form;
}

/**
 * Submit function for namecards_search_form
 */
function namecards_search_form_submit($form, &$form_state) {
  $uri = check_plain($_GET['q']);
  if ($form_state['clicked_button']['#value'] === t('Search')) {
    $search_terms = urlencode(trim($form_state['values']['namecards_live_search_textfield']));
    if (preg_match('/^namecards\/browse_contacts/', $uri) > 0) {
      drupal_goto('namecards/browse_contacts/' . $search_terms);
    }
    elseif (preg_match('/^namecards\/organization_names/', $uri) > 0) {
      drupal_goto('namecards/organization_names/' . $search_terms);
    }
    elseif (preg_match('/^namecards\/event_names/', $uri) > 0) {
      drupal_goto('namecards/event_names/' . $search_terms);
    }
  }
  elseif ($form_state['clicked_button']['#value'] === t('Clear')) {
    if (preg_match('/^namecards\/browse_contacts/', $uri) > 0) {
      drupal_goto('namecards/browse_contacts');
    }
   elseif (preg_match('/^namecards\/organization_names/', $uri) > 0) {
      drupal_goto('namecards/organization_names');
    }
   elseif (preg_match('/^namecards\/event_names/', $uri) > 0) {
      drupal_goto('namecards/event_names');
    }
  }
}

/**
 * Records the identity of displayed rows based on feedback sent from javascript via ajax.
 *
 * See function Namecards.getDisplayedRows in file 'namecards_get_contacts_by_node.js'
 * for client side details.
 */
function namecards_set_displayed_rows_session_variable() {
  $args = arg();
  // Remove unneeded arguments.
  unset($args[0]);
  unset($args[1]);

  // Reinitialize session variable.
  $_SESSION['modalframe']['contacts_by_nodes'] = array();
  foreach ($args as $arg) {
    $_SESSION['modalframe']['contacts_by_nodes'][] = $arg;
  }
}

/**
 * Sets the session variable $_SESSION['modalframe']['parent']
 *
 * This session variable is an important component for reloading
 * a page after closing a modalframe. It holds the value of the
 * parent page from which a modalframe was loaded.
 *
 * @param string $parent_handle
 * Value of session variable holding the uri for menu page callback
 * namecards_contacts_by_node. Enables the correct URI to be
 * set when viewing contacts by node. For example, because
 * 'namecards/contacts_by_node/get/org/111' is loaded via ajax
 * the actual URI will still be displayed as 'namecards/organizations'.
 */
function namecards_set_parent_page_session_variable($parent_handle = NULL) {
  // Get the URI of the page currently being loaded.
  if (preg_match('/\/namecards\/contacts_by_node\/get\/(org|event)\/[0-9]{1,}/', $parent_handle) > 0) {
    $orig_uri = $_SESSION['modalframe']['parent_handle'];
  }
  else {
    $orig_uri = $_GET['q'];
    // Add variable for paged results to URI.
    if (isset($_GET['page'])) {
      $orig_uri .= '?page=' . $_GET['page'];
    }
  }
  $_SESSION['modalframe']['parent'] = $orig_uri;
}

/**
 * Implements hook_theme()
 */
function namecards_theme($existing, $type, $theme, $path) {
  return array(
    'namecards_javascript' => array(
      'variables' => array(),
    ),
    'namecards_add_icons_javascript' => array(
      'variables' => array(),
    ),
    'namecards_add_email_links' => array(
      'variables' => array(
        'text' => '',
      ),
    ),
    // Function located in file 'namecards_email_mailing_list.inc'.
    'namecards_create_email_list_theme' => array(
      'render element' => 'form',
    ),
    'namecards_contact_action_links_javascript' => array(
      'variables' => array(),
    ),
//    'namecards_download_cvs_link' => array(
//      'arguments' => array(
//        'nid' => NULL,
//      ),
//    ),
    'namecards_contact_action_links' => array(
      'variables' => array(),
    ),
    // Used for highlighting empty checkboxes. Function located
    // in file 'namecards_email_mailing_list.inc'.
    'namecards_highlight_checkboxes_javascript' => array(
      'variables' => array(),
    ),
    'namecards_set_unknown_value' => array(
      'variables' => array(
        'text' => t('Unknown'),
      ),
    ),
    // Function located in file 'namecards_user_settings.inc'.
    'namecards_user_settings_theme' => array(
      'render element' => 'form',
    ),
    'views_view_field__namecards_browse_contacts__default__namecards_namecard_email' => array(
      'variables' => array(
        'view' => NULL,
        'field' => NULL,
        'row' => NULL,
        'output' => NULL,
      ),
      'original hook' => 'views_view_field',
      'path' => drupal_get_path('module', 'namecards'),
    ),
    'views_view_field__namecards_contacts_by_event__default__namecards_namecard_email' => array(
      'variables' => array(
        'view' => NULL,
        'field' => NULL,
        'row' => NULL,
        'output' => NULL,
      ),
      'original hook' => 'views_view_field',
      'path' => drupal_get_path('module', 'namecards'),
    ),
    'views_view_field__namecards_contacts_by_org__default__namecards_namecard_email' => array(
      'variables' => array(
        'view' => NULL,
        'field' => NULL,
        'row' => NULL,
        'output' => NULL,
      ),
      'original hook' => 'views_view_field',
      'path' => drupal_get_path('module', 'namecards'),
    ),
    'namecards_get_contacts_by_node_javascript' => array(
      'variables' => array(),
    ),
    'namecards_number_type' => array(
      'variables' => array(
        'type' => NULL,
      ),
    ),
//     'namecards_modalframe_javascript' => array(
//       'variables' => array(),
//     ),
//     'namecards_modal_dialog_javascript' => array(
//         'variables' => array(),
//     ),
    'namecards_reload_rows_javascript' => array(
      'variables' => array(
        'type' => NULL,
      ),
    ),
    'namecards_select_table_column_checkbox' => array(
      'variables' => array(
        'label' => '',
      ),
    ),
  );
}

/**
 * Implements hook_user_cancel()
 */
function namecards_user_cancel($edit, $account, $method) {
  // Ensure that user created namecards nodes that are linked to namecard of
  // other users remain accessable to other users, whilst preventing them
  // from becoming accessible to anonymous users. This is achieved by
  // reassigning to user 1.
  switch ($method) {
    case 'user_cancel_block_unpublish':
      $node_types = array('namecards_organization', 'namecards_event', 'namecards_position', 'namecards_department');
      _namecards_reassign_node_ownership($account->uid, $node_types, 1);
      break;
    case 'user_cancel_reassign':
      // Ensure all namecard related nodes are reassigned to prevent being accessible to anonymous users.
      $nids = array();
      // Reassign any public contacts (i.e. "namecards_namecard"). 
      $delete_user_option = variable_get('namecards_delete_user_contacts_options', NAMECARDS_DELETE_ALL_CONTACTS_ON_USER_DEL);
      if ($delete_user_option == NAMECARDS_PRESERVE_PUBLIC_CONTACTS_ON_USER_DEL) {
        _namecards_reassign_node_ownership($account->uid, array('namecards_namecard'), 1);
      }
      // Reassign any org, event, position or department which is linked to contacts of other users. 
      $node_types = array('namecards_organization', 'namecards_event', 'namecards_position', 'namecards_department');
      _namecards_reassign_node_ownership($account->uid, $node_types, 1);
      
      // Delete any remaining contacts and related linked nodes, as they should not to be reassigned to anonymous users.
      $query = db_select('node', 'n');
      $results = $query
        ->fields('n', array('nid'))
        ->condition('n.uid', $account->uid)
        ->condition('type', array('namecards_namecard', 'namecards_organization', 'namecards_event', 'namecards_position', 'namecards_department'), 'IN')
        ->execute();
      foreach ($results as $result) {
        node_delete($result->nid);
      }
      break;
    default:
      break;
  }
}

/**
 * Implements hook_user_delete()
 */
function namecards_user_delete($account) {
  // Reassign ownership of nodes created by the user to be deleted which are linked to
  // nodes of other users (i.e. nodes with relationships to other nodes). This prevents
  // namecards of other users from being corrupted due to missing linked nodes. Linked
  // nodes are reassigned to user 1.
  
  // Reassign any public contacts (i.e. "namecards_namecard").
  $delete_user_option = variable_get('namecards_delete_user_contacts_options', NAMECARDS_DELETE_ALL_CONTACTS_ON_USER_DEL);
  if ($delete_user_option == NAMECARDS_PRESERVE_PUBLIC_CONTACTS_ON_USER_DEL) {
    _namecards_reassign_node_ownership($account->uid, array('namecards_namecard'), 1);
  }
  // Reassign any linked nodes.
  $node_types = array('namecards_organization', 'namecards_event', 'namecards_position', 'namecards_department');
  _namecards_reassign_node_ownership($account->uid, $node_types, 1);

  // Remove namecard settings for a deleted user.
  _namecards_user_settings_delete($account->uid);
  // Remove cached views for deleted user.
  _namecards_delete_cached_data();
}

/**
 * Implements hook_user_insert
 */
function namecards_user_insert(&$edit, $account, $category) {
  // Only create settings for user with permission to use namecards module.
  if (user_access('access namecards', $account) || user_access('administer namecards', $account)) {
    _namecards_user_settings_add($account->uid);
  }
}

/**
 * Implements hook_user_login
 */
function namecards_user_login(&$edit, $account) {
  // Only create settings for users with permission to use namecards module
  // and don't already have settings in the database.
  if (user_access('access namecards', $account) || user_access('administer namecards', $account)) {
    if (_namecards_user_settings_exist($account->uid) == FALSE) {
      // Add user setting to database.
      _namecards_user_settings_add($account->uid);
      // Following line is for testing purposes.
      drupal_set_message(t("Namecard user @uid settings added", array('@uid' => $account->uid)));
    }
    // Set session variable containing user settings.
    _namecards_user_settings_session_var('set', $account->uid);

  }
}

/**
 * Implements hook_user_logout
 */
function namecards_user_logout($account) {
  if (isset($_SESSION['namecards_user_namecard_settings'])) {
    // Release resources by unsetting session variable.
    _namecards_user_settings_session_var('delete');
  }
}

/**
 * Implements hook_user_update
 */
function namecards_user_update(&$edit, $account, $category) {
  if (user_access('access namecards', $account) || user_access('administer namecards', $account)) {
    // User has access to namecards system.  Create user's namecards specific 
    // settings if they don't already exist.
    if (_namecards_user_settings_exist($account->uid) == FALSE) {
      _namecards_user_settings_add($account->uid);
      drupal_set_message(t('Add user namecards settings for @name', array('@name' => $account->name)));
    }
  }
  else {
    // User doesn't have access so delete relevant settings from database if 
    // they exist.
    if (_namecards_user_settings_exist($account->uid) == TRUE) {
      _namecards_user_settings_delete($account->uid);
      drupal_set_message(t('Delete user namecards settings for @name', array('@name' => $account->name)));
    }
  }
}

/**
 * Implements hook_views_api()
 */
function namecards_views_api() {
  return array('api' => 3.0);
}

/**
 * Implements hook_views_pre_execute()
 */
function namecards_views_pre_execute(&$view) {
  // Set whether or not to exclude a field from view based on user's settings.
  if ($view->name == 'namecards_browse_contacts' || $view->name == 'namecards_contacts_by_org' || $view->name == 'namecards_contacts_by_event') {
    // Set view specific parameters.
    switch ($view->name) {
      case 'namecards_browse_contacts':
        $prefix = 'browse_';
        $regex_pattern = '/^(contact_by_org_|contact_by_event_)/';
        break;
      case 'namecards_contacts_by_org':
        $prefix = 'contact_by_org_';
        $regex_pattern = '/^(browse_|contact_by_event_)/';
        break;
      case 'namecards_contacts_by_event':
        $prefix = 'contact_by_event_';
        $regex_pattern = '/^(browse_|contact_by_org_)/';
        break;
    }
    // Convert object to array for easier parsing.
    $fields = (array)$_SESSION['namecards_user_namecard_settings'];
    // Get the visibility settings for each views field for a given
    // view and exclude/include it based on its visibility settings.
    while (list($key, $field_visible) = each($fields)) {
      switch ($key) {
        case $prefix . 'surname':
          // The field name for title is different for the different
          // views so the value should be adjusted accordingly.
          if ($view->name == 'namecards_browse_contacts') {
            $view_field_name = 'title';
          }
          elseif ($view->name == 'namecards_contacts_by_org') {
            $view_field_name = 'title_1';
          }
          elseif ($view->name == 'namecards_contacts_by_event') {
            $view_field_name = 'title_1';
          }
          break;
        case $prefix . 'given_name':
          $view_field_name = 'namecards_namecard_given_name';
          break;
        case $prefix . 'nickname':
          $view_field_name = 'namecards_namecard_nickname';
          break;
        case $prefix . 'organization':
          $view_field_name = 'namecards_namecard_organization';
          break;
        case $prefix . 'position':
          $view_field_name = 'namecards_namecard_position';
          break;
        case $prefix . 'department':
          $view_field_name = 'namecards_namecard_department';
          break;
        case $prefix . 'email':
          $view_field_name = 'namecards_namecard_email';
          break;
        case $prefix . 'mobile':
          $view_field_name = 'namecards_namecard_mobile';
          break;
        case $prefix . 'phone':
          $view_field_name = 'namecards_namecard_phone';
          break;
        case $prefix . 'fax':
          $view_field_name = 'namecards_namecard_fax';
          break;
        case $prefix . 'address':
          $view_field_name = 'namecards_namecard_address';
          break;
        case $prefix . 'event':
          $view_field_name = 'namecards_namecard_event';
          break;
      }

      // The field is shown by default, unless it has been specified not to
      // show this particular field in which case it will be excluded.
      $exclude = 0;
      if ($field_visible == 0) {
        $exclude = 1;
      }

      if ($key != 'uid' && $key != 'default_page' && $key != 'address' && preg_match($regex_pattern, $key) == 0) {
        if (isset($view->field[$view_field_name])) {
          $view->field[$view_field_name]->options['exclude'] = $exclude;
        }
      }
    }
  }
}

/**
 * Implements hook_views_pre_render()
 */
function namecards_views_pre_render(&$view) {
  // Filter views 'namecards_organizations' and 'namecards_events' based on 
  // whether there is any contacts viewable by the given user. 
  if ($view->name === 'namecards_organizations' || $view->name === 'namecards_events') {
    global $user;
    // Variable to holds alias for either 'field_data_namecards_namecard_organization' 
    // or 'field_data_namecards_namecard_event' depending on which view is to be 
    // filtered.
    $tbl_alias_fdnnoe = '';

    // Check if user has admin privileges and has permission to view private
    // contacts of others.
    if (user_access('administer namecards') && variable_get('namecards_privacy_settings_options') === NAMECARDS_ADMIN_VIEW_PRIV_CONTACTS_ENABLED) {
      // User can view all contacts so no need to filter view results.
      return;
    }
    
    // Check which organizations contain contacts viewable by the user.
    $sql = db_select('node', 'n');
    switch ($view->name) {
      case 'namecards_organizations':
        $tbl_alias_fdnnoe = $sql->leftJoin('field_data_namecards_namecard_organization', 'fdnnoe', 'n.nid = %alias.namecards_namecard_organization_nid');
        break;
      case 'namecards_events':
        $tbl_alias_fdnnoe = $sql->leftJoin('field_data_namecards_namecard_event', 'fdnnoe', 'n.nid = %alias.namecards_namecard_event_nid');
        break;
    }
    $tbl_alias_contact = $sql->leftJoin('node', 'contact', $tbl_alias_fdnnoe . '.entity_id = %alias.nid');
    $tbl_alias_public = $sql->leftJoin('field_data_namecards_namecard_public', 'fdnnp', $tbl_alias_contact . '.nid = %alias.entity_id');
    $sql->fields('n', array('nid'));

    $sql
    ->condition(db_or()
        ->condition($tbl_alias_public . '.namecards_namecard_public_value', 1)
        ->condition(db_and()
            ->condition($tbl_alias_public . '.namecards_namecard_public_value', 0)
            ->condition($tbl_alias_contact . '.uid', $user->uid)
        )
    );
    
    $results = $sql->execute();
    $visible_nodes = array();
    foreach ($results as $result) {
      $visible_nodes[] = $result->nid;
    }
    $visible_nodes = array_unique($visible_nodes);
    
    // Remove any organizations from the view that do not contain any visible
    // contacts.
    foreach ($view->result as $delta => $item) {
      if (array_search($item->nid, $visible_nodes) === FALSE) {
        unset($view->result[$delta]);
      }
    }
  }
}

/**
 * General javascript functions
 */
function theme_namecards_javascript($variables) {
  drupal_add_js(drupal_get_path('module', 'namecards') . '/js/namecards.js');
}

/**
 * Adds email link icons to email addresses
 * @param string $text
 *   String containing email addresses.
 */
function theme_namecards_add_email_links($variables) {
  $text = $variables['text'];
  $regexp = '/[a-zA-Z0-9.-_]{1,}@[a-zA-Z0-9.-_]{1,}/';
  $matched_results = array();
  preg_match_all($regexp, $text, $matched_results);
  $extracted_email_addresses = array();
  
  // Build replacement string for each email address and replace matched value in original string.
  foreach ($matched_results[0] as $email) {
    $email_link_string = '<a href="mailto:' . $email . '" class="namecards-email-link">Send email</a>' . $email;
    $text = str_replace($email, $email_link_string, $text);
  }

  return $text;
}

/**
 * Add user icons to contacts.
 */
function theme_namecards_add_icons_javascript() {
  global $user;

  $username = (!empty($user->name)) ? $user->name : '';
  drupal_add_js(array('namecards' => array('uid' => $user->uid, 'username' => $username)), 'setting');
  drupal_add_js(drupal_get_path('module', 'namecards') . '/js/namecards_add_icons.js');
}

/**
 * Add javascript responsible for altering the UI such that buttons for 
 * view, edit and delete actions are presented in a compact form.  This 
 * creates more space for other contact specific information on a page.
 */
function theme_namecards_contact_action_links_javascript($variables) {
  drupal_add_js(drupal_get_path('module', 'namecards') . '/js/namecards_contact_action_links.js');
}

/**
 * Loads javascript for retrieving contacts_by_node.
 */
function theme_namecards_number_type($variables) {
  $output = '';
  switch ($variables['type']) {
    case 0:
      $output .= '<span class="namecards-number-type-work">[' . t('work') . ']</span>';
      break;
    case 1:
      $output .= '<span class="namecards-number-type-home">[' . t('home') . ']</span>';
      break;
    case 2:
      $output .= '<span class="namecards-number-type-other">[' . t('other') . ']</span>';
      break;
  }
  return $output;
}

/**
 * Loads javascript for retrieving contacts_by_node.
 */
function theme_namecards_get_contacts_by_node_javascript() {
  drupal_add_js(drupal_get_path('module', 'namecards') . '/js/namecards_get_contacts_by_node.js');
}

/**
 * Create a table column select-all/deselect-all checkbox
 *
 * @param String $label
 *   Label to display next to select-all checkbox
 */
function theme_namecards_select_table_column_checkbox($variables) {
  drupal_add_js(drupal_get_path('module', 'namecards') . '/js/namecards_select_table_column.js');
  return array('data' => $variables['label'], 'class' => 'namecards-select-table-column');
}

/**
 * Return formatted string to display if an unknown value is present.
 */
function theme_namecards_set_unknown_value($variables) {
  return '<span class="namecards-unknown-value">[' . $variables['text'] . ']</span>';
}

/**
 * Javascript used by modal frame
 */
// function theme_namecards_modalframe_javascript($variables) {
//   drupal_add_js(drupal_get_path('module', 'namecards') . '/js/namecards_modalframe.js');
// }

/**
 * Javascript used by modal frame
 */
// function theme_namecards_modal_dialog_javascript($variables) {
//   drupal_add_js(drupal_get_path('module', 'namecards') . '/js/namecards_modal_dialog.js');
// }

/**
 * Triggers click event on link which appears in 'namecards_organization/events' view.
 *
 * Used when reloading a page containing AJAX content.  Ensures AJAX content is reloaded.
 *
 * @param String $type
 *   Node type.
 *
 * @param Array $_SESSION['modalframe']['contacts_by_nodes']
 *   Containins ids of rows to display.
 */
function theme_namecards_reload_rows_javascript($variables) {
  $type = $variables['type'];
  if (isset($_SESSION['modalframe']['contacts_by_nodes'])) {
    foreach ($_SESSION['modalframe']['contacts_by_nodes'] as $nid) {
      drupal_add_js('(function ($) {
                       $(document).ready(function() {
                         $("a[href*=\'/namecards/contacts_by_node/get/' . $type . '/' . $nid . '\']").not(".click-triggered").addClass("click-triggered").triggerHandler("click");
                       });
                     })(jQuery);', 'inline');
    }
  }
}

/**
 * Theming function for email field in "namecards_browse_contacts" view
 */
function theme_views_view_field__namecards_browse_contacts__default__namecards_namecard_email($variables) {
  $row = $variables['row'];
  $output = '';

  // Check if field contains data.
  if (!empty($row->field_namecards_namecard_email)) {
    foreach ($row->field_namecards_namecard_email as $email) {
      // Build formatted email string.
      $email_address = theme('namecards_add_email_links', array('text' => $email['raw']['safe_value']));
      $output .=  $email_address . '<br/>';
    }
  }
  
  return $output;
}

/**
 * Theming function for email field in "namecards_contacts_by_event" view
 *
 * Makes use of existing theme_views_view_field__namecards_contacts_by_event__default__namecards_namecard_email() function, since the output is identical.  Only reason for separate function is because each view requires a separate field function.
 */
function theme_views_view_field__namecards_contacts_by_event__default__namecards_namecard_email($variables) {
  $output = theme('views_view_field__namecards_browse_contacts__default__namecards_namecard_email', $variables);
  return $output;
}

/**
 * Theming function for email field in "namecards_contacts_by_org" view
 *
 * Makes use of existing theme_views_view_field__namecards_contacts_by_event__default__namecards_namecard_email() function, since the output is identical.  Only reason for separate function is because each view requires a separate field function.
 */
function theme_views_view_field__namecards_contacts_by_org__default__namecards_namecard_email($variables) {
  $output = theme('views_view_field__namecards_browse_contacts__default__namecards_namecard_email', $variables);
  return $output;
}
