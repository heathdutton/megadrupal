<?php

require_once dirname(__FILE__) . '/autordf.module';

function autordf_install() {
	autordf_create_vocabularies();
  $message = t('Autordf tag cloud needs to be Build <a href="@tag_rebuild">Rebuild tag cloud</a>.', array('@tag_rebuild' => url('admin/config/autordf/rebuild')));    
  drupal_set_message($message, 'error');

}

function autordf_uninstall() {
  autordf_remove_vocabularies();
  variable_del('autordf_vocabulary_names');
  variable_del('autordf_list_countries');
  variable_del('autordf_stopword_threshold');
  variable_del('autordf_ignorelist_default');
  variable_del('autordf_ignorelist');
  variable_del('autordf_nestedtags');
  variable_del('autordf_tags_threshold');
  variable_del('autordf_minlength');
  variable_del('autordf_vocabulary');
  variable_del('autordf_node_types');
  variable_del('autordf_ignorelist_default');
  
}

function autordf_schema() {

  $schema['autordf_term'] = array(
    'description' => 'Associate Autordf term with Drupal Vocabularies',
    'fields' => array(
      'tid' => array(
        'type' => 'serial', 
        'unsigned' => TRUE, 
        'not null' => TRUE,
        'description' => t('Unique Identifier for Autordf Term')
      ),
      'name' => array(
        'type' => 'varchar', 
        'length' => 255, 
        'not null' => TRUE,
        'description' => t('The value of the term')
      ),
      'vid' => array(
        'type' => 'int', 
        'unsigned' => TRUE, 
        'not null' => TRUE, 
        'default' => 0,
        'description' => t('The Drupal Vocabulary the term is associated with')
      ),
      'tdid' => array(
        'type' => 'int', 
        'unsigned' => TRUE, 
        'description' => t('The Term Data ID for this mapping')
      ),
    ),
    'indexes' => array(
      'vid'    => array('vid'),
      'tdid'    => array('tdid'),
    ),
    'primary key' => array('tid'),
  );

  // Table to store the association b/w a autordf term and the node for which it was retrieved 
  $schema['autordf_term_node'] = array(
    'description' => 'Contains association between the Autordf Terms and a node',
    'fields' => array(
      'tid' => array(
        'type' => 'int', 
        'unsigned' => TRUE, 
        'not null' => TRUE, 
        'default' => 0,
        'description' => t('The term identifier')
      ),
      'nid' => array(
        'type' => 'int', 
        'unsigned' => TRUE, 
        'not null' => TRUE, 
        'default' => 0,
        'description' => t('The node for this term')
      ),
      'relevance' => array(
        'type' => 'numeric', 
        'size' => 'normal', 
        'not null' => TRUE, 
        'default' => 0.0, 
        'precision' => 5, 
        'scale' => 3,
        'description' => t('The relevence score for this term/node combination')
        ),
    ),
    'indexes' => array(
      'tid'    => array('tid'),
      'nid'    => array('nid'),
    ),
    'primary key' => array('tid', 'nid'),
  );

  $schema['autordf_total'] = array(
    'description' => 'Store count of words',
    'fields' => array(
      'word' => array(
        'description' => 'Unique words.',
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'default' => '',
      ),
      'count' => array(
        'description' => "Word count.",
        'type' => 'float',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('word'),
  );

	return $schema;
}

function autordf_create_vocabularies() {
  $list = autordf_get_all_entities();
  $vocabularies = array();

  foreach($list as $v) {
  	$vid = autordf_create_entity_vocabulary(autordf_make_readable($v));
    $vocabularies[$v] = $vid;
  }
  variable_set('autordf_vocabulary_names', $vocabularies);
}

/**
 * Remove vocabularies for all currently known Entities
 */
function autordf_remove_vocabularies() {
  $entities = variable_get('autordf_vocabulary_names', array());
  foreach ($entities as $key => $vid) {
    taxonomy_vocabulary_delete($vid);
  }
}