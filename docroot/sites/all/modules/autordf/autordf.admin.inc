<?php

function autordf_admin_vocab() {
  
  $form['autordf_list_countries'] = array(
    '#type' => 'textarea',
    '#title' => ('List of Countries'),
    '#row' => 4,
    '#default_value' => variable_get('autordf_list_countries', autordf_countries()),
  );	
  return system_settings_form($form);    
}

function autordf_admin_stopword_setting() {
  $status = '<p>'. t('You may rebuild the tag cloud to generate list of ignore words.') .'</p>';
  $status .= '<p>'. t('Rebuilding may take some time if there is a lot of content.') .'</p>';


  $form['status'] = array('#markup' => $status);
  $form['rebuild'] = array(
    '#type' => 'submit',
    '#value' => t('Rebuild ignore list'),
    '#submit' => array('autordf_configure_tag_submit'),
  );  

  $form['autordf_stopword_threshold'] = array(
    '#type' => 'textfield',
    '#title' => t('Threshold'),
    '#default_value' => variable_get('autordf_stopword_threshold', 0.3),
    '#description' => t('Set the threshold for finding stopwords. Must be between 0 and 1. A value of 1 ignore those words that appear on every nodepage and 0 means ignore every word. Ideally it should be between 0.2 - 0.7'),
  );

  $form['autordf_ignorelist_default'] = array(
    '#type' => 'textarea',
    '#title' => t('Default Ignore List'),
    '#description' => t('Default ignore list separated by comma'),
    '#row' => 4,
    '#default_value' => variable_get('autordf_ignorelist_default', ''),
  );
  
  $generated_list = variable_get('autordf_ignorelist_generated');
  $ignore = $generated_list? implode(', ', $generated_list): '';
   
  $form['autordf_ignorelist_generated'] = array(
    '#type' => 'item',
    '#title' => t('Generated Ignore List'),
    '#description' => t('This list is generated by cron matching most frequent occuring words in the content'),
    '#markup' => $ignore,
  );

  $lang_list = autordf_stopwords('list');
  $form['autordf_stopwords_list'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Import Stopwords'),
    '#options' => $lang_list,
    '#default_value' => variable_get('autordf_stopwords_list', array('en')),
  );
  
  $form['#submit'][] = 'autordf_admin_stopword_setting_submit';
  
  return system_settings_form($form);
}

function autordf_admin_stopword_setting_submit($form, &$form_state) {
	autordf_ignorelist_all(TRUE);
}

function autordf_admin_settings() {

  $form['autordf_nestedtags'] = array(
    '#type' => 'radios',
    '#title' => t('Nested Tags'),
    '#options' => array(
      AUTORDF_TAG_ALL => 'Tag All',
      AUTORDF_TAG_MIN => 'Tag Min', 
      AUTORDF_TAG_MAX => 'Tag Max'
    ),
    '#default_value' => variable_get('autordf_nested_tags', 0),
    '#description' => t('This settings determine how relative similar tags gets handled e.g Apple, Apple Iphone, Apple Iphone OS all have "apple". In "Tag All" all 3 will get tagged. In "Tag Max" only Apple Iphone OS will get tagged. In "Tag Min" only Apple gets tagged'),
  );  
    
  $form['autordf_minlength'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum word length to tag'),
    '#size' => 5,
    '#default_value' => variable_get('autordf_minlength', 3),
  );  
  
    $form['autordf_tags_threshold'] = array(
    '#type' => 'textfield',
    '#title' => t('Tag threshold'),
    '#size' => 3,
    '#default_value' => variable_get('autordf_tags_threshold', 1),
    '#field_suffix' => '%',
  );
  
  $options = array();
  $vocabularies = taxonomy_get_vocabularies();
  foreach ($vocabularies as $vocabulary) {
    $options[$vocabulary->vid] = $vocabulary->name ;
  }
  $form['autordf_vocabulary'] = array(
    '#type' => 'select',
    '#title' => t('Vocabulary'),
    '#options' => $options,
    '#default_value' => variable_get('autordf_vocabulary', 1),
  );

  $node_types = node_type_get_types();
  foreach($node_types as $node_type) {
  	$types[$node_type->type] = $node_type->name;
  }
  
  $form['autordf_node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Node Types'),
    '#options' => $types,
    '#default_value' => variable_get('autordf_node_types', array('article')),
  );

//  debug(array_keys(field_info_instances($entity_type, $bundle)));
  return system_settings_form($form); 
}

function autordf_node_keywords($node) {
  drupal_set_title(t('Terms for: @title', array('@title' => $node->title)), PASS_THROUGH);
  return drupal_get_form('autordf_nodetag_form', $node);
}

function autordf_nodetag_form($form, &$form_state, $node) {
  $vocabulary = variable_get('autordf_vocabulary_names', FALSE);
  $keywords = autordf_get_node_keywords($node->nid);
  if ($keywords) {
    $tags = array();
    foreach ($keywords as $keyword) {
    	$tags[$keyword->vid][] = $keyword->name;
    }
  }
  $form = array();
  
  $form['#tree'] = TRUE;
  
  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );
  
  foreach ($vocabulary as $name => $vid) {
    $value['name'] = autordf_make_readable($name);
    $value['default'] = '';
    if(isset($tags[$vid])) {
      $value['default'] = implode(', ', $tags[$vid]);
    }
    
  	$form['vocabulary'][$vid] = autordf_node_vocabulary_form($vid, $node->nid, $value);
  }
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  
  return $form;
}

function autordf_node_vocabulary_form($vid, $nid, $value = array()) {
  $form['vid'] = array(
    '#type' => 'value',
    '#value' => $vid,
  );
  
  $description = $value['default']? t('Suggestions: ').$value['default']: '';
  
  $form['tags'] = array(
    '#type' => 'textfield',
    '#title' => $value['name'],
    '#default_value' => $value['default'],
    '#description' => $description,
    '#autocomplete_path' => 'autordf/autocomplete/'. $nid,
    '#element_validate' => array('autordf_autocomplete_validate'),    
  );

  return $form;	
}

function autordf_autocomplete_validate($element, &$form_state) {
  // Save New Taxonomy terms here
  // Also Validate the term to RDF also exist in the document
  
  
  if ($tags = $element['#value']) {
    $vid = $element['#parents'][1];
    $typed_terms = drupal_explode_tags($tags);
    $values = array();
    foreach ($typed_terms as $typed_term) {
    	// See if the term exists in the chosen vocabulary and return the tid;
      // otherwise, create a new term.
      $term = autordf_save_term($vid, $typed_term);

      $values[$term->name] = $term->tid;
    }     

    $value = options_array_transpose(array('tid' => $values));
  }
  else {
    $value = array();
  }

  form_set_value($element, $value, $form_state);
  
  
}

function autordf_nodetag_form_submit($form, &$form_state) {

  $form_values = $form_state['values'];
  $nid = $form_values['nid'];
  autordf_delete_autordf_term_node($nid);

  foreach ($form_values['vocabulary'] as $value) {
    $tags = $value['tags'];
    $vid = $value['vid'];
    
    if (!$tags) {
    	continue;
    }
    foreach ($tags as $name => $tag) {
      $tid = $tag['tid'];
      if(!($autordf_term = autordf_term_autordf_exist($tid))) {
        $autordf_term = new stdClass;
        $autordf_term->tdid = $tid;
        $autordf_term->name = $name;
        $autordf_term->vid = $vid;
        autordf_save_autordf_term($autordf_term);
      }
      autordf_save_autordf_term_node($autordf_term, $nid);
    }
  }
}

function autordf_configure_tag_submit($form, &$form_state) {
  $form_state['redirect'] = 'admin/config/autordf/rebuild';
}


function autordf_configure_rebuild_confirm() {
  return confirm_form(array(), t('Are you sure you want to rebuild the stopwords?'),
         'admin/config/autordf/settings', t('This action rebuilds stop words, and may be a lengthy process.'), t('Rebuild stopwords'), t('Cancel'));
}

function autordf_configure_rebuild_confirm_submit($form, &$form_state) {
  autordf_stopword_rebuild();
  $form_state['redirect'] = 'admin/config/autordf/settings';
}
