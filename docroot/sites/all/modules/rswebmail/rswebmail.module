<?php

/**
 * @file
 * Drupal hooks and uses nusoap for Rackspace Webmail API integration.
 *
 * This module integrates with rackspace webmail and provides
 * a single sign-on for users.
 */

define('RSWEBMAIL_ADMIN_WSDL_PATH', 'https://admin.webmail.us/mailaccounts/mailaccounts.wsdl');
define('RSWEBMAIL_WSDL_PATH', 'https://email.rackspace.com/mail6/ext/soap/soap_server.php?wsdl');

/**
 * Implements hook_permission().
 */
function rswebmail_permission() {
  return array(
    'administer Rswebmail' => array(
      'title' => t('Administer Rswebmail'),
      'description' => t('Perform administration tasks for Rswebmail module.'),
    ),
    'access Rswebmail' => array(
      'title' => t('Access Rswebmail'),
      'description' => t('Use the Rswebmail page/block.'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function rswebmail_help($path, $arg) {
  switch ($path) {
    case 'admin/help#rswebmail':

      return '<pre>' . file_get_contents(dirname(__FILE__) . '/README.txt') . '</pre>';
  }
}

/**
 * Implements hook_block_info().
 */
function rswebmail_block_info() {
  $blocks['webmail_new_message_count'] = array(
    'info' => t('Rackspace webmail new message count'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function rswebmail_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();
  switch ($delta) {
    case 'webmail_new_message_count':
      $block['subject'] = t('Rackspace webmail new message count');
      $block['content'] = rswebmail_block_content();
      break;
  }

  return $block;
}

/**
 * Implements hook_menu().
 */
function rswebmail_menu() {
  $items = array();

  $items['admin/config/services/rswebmail'] = array(
    'title' => 'Rackspace webmail integration',
    'description' => 'Rackspace webmail integration',
    'access callback' => 'user_access',
    'access arguments' => array('administer Rswebmail'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rswebmail_create_form'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['user/%user/mail'] = array(
    'title' => 'Mail information',
    'access callback' => 'user_access',
    'access arguments' => array('access Rswebmail'),
    'page callback' => 'rswebmail_block_content',
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
  );

  return $items;
}

/**
 * Function to create rackspace webmail integration form.
 */
function rswebmail_create_form($form, &$form_state) {
  rswebmail_nusoap_library_exists();
  $record = rswebmail_details();
  $form['org_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Organization name'),
    '#size' => 150,
    '#maxlength' => 220,
    '#required' => TRUE,
    '#default_value' => (isset($record->org_name)) ? $record->org_name : NULL,
  );
  $form['host_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Host Name'),
    '#description' => t('Host name should be in the format of YOURHOSTNAME.COM (http or www in prefix not allow)'),
    '#size' => 150,
    '#maxlength' => 220,
    '#required' => TRUE,
    '#default_value' => (isset($record->host_name)) ? $record->host_name : NULL,
  );
  $form['rs_uname'] = array(
    '#type' => 'textfield',
    '#title' => t('Reseller Username'),
    '#size' => 150,
    '#maxlength' => 220,
    '#required' => TRUE,
    '#default_value' => (isset($record->rs_uname)) ? $record->rs_uname : NULL,
  );
  $form['rs_pass'] = array(
    '#type' => 'textfield',
    '#title' => t('Reseller Password'),
    '#size' => 150,
    '#maxlength' => 220,
    '#required' => TRUE,
    '#default_value' => (isset($record->rs_pass)) ? $record->rs_pass : NULL,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );

  return $form;
}

/**
 * Form submit: rackspace webmail integration form submit.
 */
function rswebmail_create_form_submit($form, &$form_state) {
  $result = rswebmail_details();
  if (empty($result)) {
    db_insert('rswebmail_config')
      ->fields(array(
      'org_name' => $form_state['values']['org_name'],
      'host_name' => $form_state['values']['host_name'],
      'rs_uname' => $form_state['values']['rs_uname'],
      'rs_pass' => $form_state['values']['rs_pass'],
    ))->execute();
    drupal_set_message(t("Your Rackspace webmail information has been successfully saved."));
  }
  else {
    db_update('rswebmail_config')
      ->fields(array(
      'org_name' => $form_state['values']['org_name'],
      'host_name' => $form_state['values']['host_name'],
      'rs_uname' => $form_state['values']['rs_uname'],
      'rs_pass' => $form_state['values']['rs_pass'],
    ))->execute();
    drupal_set_message(t("Your Rackspace webmail information has been successfully updated."));
  }
}

/**
 * Form validate: rackspace webmail integration form.
 */
function rswebmail_create_form_validate($form, &$form_state) {
  $server_name = $form_state['values']['host_name'];
  $check_valid1 = stristr($server_name, 'http://');
  $check_valid2 = stristr($server_name, 'www');
  if ($check_valid1 == TRUE) {
    form_set_error('host_name', t("http:// not allowed in prefix of host name."));
  }
  if ($check_valid2 == TRUE) {
    form_set_error('host_name', t("www not allowed in prefix of host name."));
  }
}

/**
 * Function to fetch the rackspace webmail information from db.
 */
function rswebmail_details() {
  $result = db_select('rswebmail_config', 'rs')
          ->fields('rs', array(
          'org_name',
          'host_name',
          'rs_uname',
          'rs_pass',
          ))
          ->execute()
          ->fetch();

  return $result;
}

/**
 * Define rackspace webmail block content.
 *
 * Function to call rackspace webmail api to show new messages count
 * and render webmail.
 */
function rswebmail_block_content() {
  $library_exist = rswebmail_nusoap_library_exists();
  if ($library_exist) {
    global $user;
    global $base_url;
    $rsweb = rswebmail_details();
    if (!empty($rsweb)) {
      if (user_is_logged_in()) {
        if (rswebmail_check_user_exists($user->name) == 1) {
          $client = new nusoap_client(RSWEBMAIL_WSDL_PATH, array('trace' => TRUE, 'exceptions' => TRUE));
          $num_messages_response = $client->Call('GetUserNumMessages', array(
          'ResellerUsername' => $rsweb->rs_uname,
          'ResellerPassword' => $rsweb->rs_pass,
          'HostName' => $rsweb->host_name,
          'UserID' => $user->name,
          )
          );

          if ($client->fault) {
            drupal_set_message(t('Could not get the number of messages, error: @fault. Response: @new_messages.', array(
              '@fault' => $client->fault,
              '@new_messages' => $num_messages_response,
            )));

            return " ";
          }
          $email = $user->name . '@' . $rsweb->host_name;
          $res1 = $client->call('LoginUserWebmail', array(
            'ResellerUsername' => $rsweb->rs_uname,
            'ResellerPassword' => $rsweb->rs_pass,
            'HostName' => $rsweb->host_name,
            'UserID' => $user->name,
            )
          );

          if ($client->fault) {
            drupal_set_message(t('Could not get the number of messages, error: @fault', array(
              '@fault' => $client->fault,
            )));

            return " ";
          }
          $src = 'https://secure.webmail.us/mail/src/redirect.php?user_name=' . $email . '&emailaddress=' . $email . '&sessionID=' . $res1['SessionID'];
          if ($num_messages_response['NewMessages'] != 0 && $num_messages_response['NewMessages'] != '') {
            $message_count = t('<strong>@total_mail</strong> New emails in <a href="@inbox_url" target="_blank">inbox</a>.', array(
              '@total_mail' => $num_messages_response['NewMessages'],
              '@inbox_url' => $src,
            ));
          }
          else {
            $message_count = t('No unread emails in <a href="@inbox_url" target="_blank">inbox</a>.', array(
              '@inbox_url' => $src,
            ));
          }
          $img_path = $base_url . '/' . drupal_get_path('module', 'rswebmail') . '/images/icon-mail.png';

          return array(
            'email_count' => array(
              '#markup' => '<table><tr><td class="mail_icon"><img src="' . $img_path . '" /></td><td class="email_message"><span>' . $message_count . '</span></td></tr></table>',
              '#prefix' => '<p class="email_message">',
              '#suffix' => '</p>',
            ),
          );
        }
        else {

          return array(
            'no_email_user' => array(
              '#markup' => t('email user does not exist.'),
              '#prefix' => '<p class="email_message">',
              '#suffix' => '</p>',
            ),
          );
        }
      }
    }
    else {
      drupal_set_message(t('Rackspace webmail information is not properly inserted. Enter the information <a href="@rswebmail_config">here</a>.', array(
        '@rswebmail_config' => url('admin/config/services/rswebmail'),
        )), 'warning');

      return " ";
    }
  }
  else {

    return " ";
  }
}

/**
 * Implements hook_user_insert().
 */
function rswebmail_user_insert(&$edit, $account, $category) {
  $library_exist = rswebmail_nusoap_library_exists();
  if ($library_exist) {
    $client = new nusoap_client(RSWEBMAIL_ADMIN_WSDL_PATH, array('trace' => TRUE, 'exceptions' => TRUE));
    $rsweb = rswebmail_details();
    if (!empty($rsweb)) {
      if (rswebmail_check_user_exists($edit['name'], $client) == 0) {
        $name = array();
        if (stripos($edit['name'], ".")) {
          $name = explode('.', $edit['name']);
        }
        elseif (stripos($edit['name'], " ")) {
          $name = explode(' ', $edit['name']);
        }
        elseif (stripos($edit['name'], "_")) {
          $name = explode('_', $edit['name']);
        }
        elseif (stripos($edit['name'], "-")) {
          $name = explode('-', $edit['name']);
        }
        else {
          $name[0] = $edit['name'];
          $name[1] = $edit['name'];
        }
        $client->Call('AddUser', array(
          'ResellerUsername' => $rsweb->rs_uname,
          'ResellerPassword' => $rsweb->rs_pass,
          'HostName' => $rsweb->host_name,
          'UserID' => $edit['name'],
          'Password' => $edit['pass'],
          'SetActive' => '1',
          'FirstName' => $name[0],
          'LastName' => $name[1],
          'StreetAddress' => '',
          'City' => '',
          'State' => '',
          'Country' => '',
          'PostalCode' => '',
          'Telephone' => '',
          'Organization' => $rsweb->org_name,
          'Department' => '',
          )
        );
      }
    }
  }
}

/**
 * Implements hook_user_update().
 */
function rswebmail_user_update(&$edit, $account, $category) {
  $library_exist = rswebmail_nusoap_library_exists();
  if ($library_exist) {
    $rsweb = rswebmail_details();
    if (!empty($rsweb)) {
      // The value of the key in $edit is null for some reason.
      // This also explains why we get the names from $account below.
      if (!empty($edit['pass'])) {
        $client = new nusoap_client(RSWEBMAIL_ADMIN_WSDL_PATH, array('trace' => TRUE, 'exceptions' => TRUE));
        $name = array();
        if (stripos($edit['name'], ".")) {
          $name = explode('.', $edit['name']);
        }
        elseif (stripos($edit['name'], " ")) {
          $name = explode(' ', $edit['name']);
        }
        elseif (stripos($edit['name'], "_")) {
          $name = explode('_', $edit['name']);
        }
        elseif (stripos($edit['name'], "-")) {
          $name = explode('-', $edit['name']);
        }
        else {
          $name[0] = $edit['name'];
          $name[1] = $edit['name'];
        }
        if (rswebmail_check_user_exists($account->name, $client) == 1) {
          $client->Call('ModifyUser', array(
            'ResellerUsername' => $rsweb->rs_uname,
            'ResellerPassword' => $rsweb->rs_pass,
            'HostName' => $rsweb->host_name,
            'UserID' => $account->name,
            'Password' => $edit['pass'],
            'SetActive' => '1',
            'FirstName' => $name[0],
            'LastName' => $name[1],
            'StreetAddress' => '',
            'City' => '',
            'State' => '',
            'Country' => '',
            'PostalCode' => '',
            'Telephone' => '',
            'Organization' => $rsweb->org_name,
            'Department' => '',
            )
          );
        }
        else {
          $client->Call('AddUser', array(
            'ResellerUsername' => $rsweb->rs_uname,
            'ResellerPassword' => $rsweb->rs_pass,
            'HostName' => $rsweb->host_name,
            'UserID' => $account->name,
            'Password' => $edit['pass'],
            'SetActive' => '1',
            'FirstName' => $name[0],
            'LastName' => $name[1],
            'StreetAddress' => '',
            'City' => '',
            'State' => '',
            'Country' => '',
            'PostalCode' => '',
            'Telephone' => '',
            'Organization' => $rsweb->org_name,
            'Department' => '',
            )
          );
        }
      }
    }
  }
}

/**
 * Function to check user exists and return client details in $res.
 */
function rswebmail_check_user_exists($name, $client = NULL) {
  $rsweb = rswebmail_details();
  if (!is_a($client, 'nusoap_client')) {
    $client = new nusoap_client(RSWEBMAIL_ADMIN_WSDL_PATH, array('trace' => TRUE, 'exceptions' => TRUE));
  }
  $res = $client->call('CheckUserExists', array(
    'ResellerUsername' => $rsweb->rs_uname,
    'ResellerPassword' => $rsweb->rs_pass,
    'HostName' => $rsweb->host_name,
    'UserID' => $name,
    )
  );

  return $res;
}

/**
 * Function to check nusoap library exists and Get nusoap.php file.
 */
function rswebmail_nusoap_library_exists() {
  $path = FALSE;
  // Add libraries supported path.
  $path = function_exists('libraries_get_path') ? libraries_get_path('rswebmail_nusoap') : 'sites/all/libraries/rswebmail_nusoap';
  if (!empty($path) && file_exists($path . '/lib/nusoap.php')) {
    include_once $path . '/lib/nusoap.php';
  }
  else {
    drupal_set_message(t("NuSOAP library for Rackspace webmail integration is not properly installed. For details check the 'Requirements' section of README.txt."), 'warning');
    $path = FALSE;
  }
  return $path;
}
