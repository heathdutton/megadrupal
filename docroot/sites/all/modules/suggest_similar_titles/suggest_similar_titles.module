<?php

/**
 * @file
 * Main module file.
 */

/**
 * Implements hook_permission().
 */
function suggest_similar_titles_permission() {
  return array(
    'view similar titles suggestion' => array(
      'title' => t('View similar titles suggestion'),
      'description' => t('Allow user to view similar titles suggestion'),
      'restrict access' => TRUE,
    )
  );
}

/**
 * Implements hook_menu().
 */
function suggest_similar_titles_menu() {
  $items['node/ajax/title'] = array(
    'title' => 'Ajax title',
    'page callback' => 'suggest_similar_titles_ajax_title',
    'access arguments' => array('view similar titles suggestion'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/system/suggest_title'] = array(
    'title' => 'Similar titles suggestion',
    'description' => 'Setting page for auto suggest title while adding node.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('suggest_similar_titles_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'suggest_similar_titles.admin.inc',
  );
  return $items;
}

/**
 * Ajax Callback: function to get suggested titles via ajax request.
 * 
 * @return: html
 *   formatted list of titles
 */
function suggest_similar_titles_ajax_title() {
  $post_title = trim($_POST['title']);
  $node_array = array();
  $data = '';
  if ($post_title) {
    // Number of nodes to display as suggestion.
    $no_of_nodes = variable_get("suggest_similar_titles_noof_nodes", '5');
    $check_permissions = variable_get("suggest_similar_titles_node_access", "no");
    $type = drupal_strtolower($_POST['type']);
    $percentage = variable_get("suggest_similar_titles_percentage", 75);
    $ignored = variable_get("suggest_similar_titles_ignored", "the,is,a");
    $desired_ratio = 100 / $percentage;
    // Splitting string into array.
    $exp_ignored = explode(",", $ignored);
    // Splitting title string into array.
    $exp_title = explode(" ", $post_title);
    // Removing ignored words from node title.
    $title_minus_ignore = array_diff($exp_title, $exp_ignored);
    // Preparing like clause for each word of title.
    $like_clause = '(';
    // Arguments array to pass db_query function.
    $query_args = array(':type' => $type);
    // Variable to increment pattern count (depends on number of title words)
    $pattern_count = 1;
    foreach ($title_minus_ignore as $value) {
      $pattern = ':pattern' . $pattern_count;
      if ($like_clause == '(') {
        $like_clause .= 'n.title LIKE ' . $pattern;
      }
      else {
        $like_clause .= ' OR n.title LIKE ' . $pattern;
      }
      $query_args[$pattern] = '%' . db_like($value) . '%';
      $pattern_count++;
    }
    $like_clause .= ')';

    $results = db_query("SELECT title, nid FROM {node} n 
      WHERE n.type = :type AND " . $like_clause, $query_args)->fetchAll();

    foreach ($results as $res) {
      $exp_exist_title = explode(" ", $res->title);
      $explode = array_diff($exp_exist_title, $exp_ignored);
      if (count($explode) >= count($exp_title)) {
        $count = count($exp_title);
        $diff = count(array_diff($exp_title, $explode));
        $words_match = $count - $diff;
      }
      else {
        $count = count($explode);
        $diff = count(array_diff($explode, $exp_title));
        $words_match = $count - $diff;
      }
      if ($words_match > 0) {
        $ratio = $count / $words_match;
        if ($ratio <= $desired_ratio) {
          $node = node_load($res->nid);
          $node->link = theme('links', array('links' => array(
              array(
                'title' => $node->title,
                'href' => 'node/' . $node->nid,
                'attributes' => array('target' => '_blank'),
              ),),)
          );
          // Whether to check node permission before node display.
          if ($check_permissions == 'yes') {
            // Check if user has access to view node.
            if (node_access('view', $node)) {
              $node_array[$res->nid] = $node;
            }
          }
          else {
            $node_array[$res->nid] = $node;
          }
        }
      }
      if (count($node_array) == $no_of_nodes) {
        break;
      }
    }
    if (count($node_array) > 0) {
      // Calling theme function and passing nodes array.
      $data = theme('suggest_similar_titles', array('node' => $node_array));
    }
  }
  // Returning data to ajax call.
  echo $data;
}

/**
 * Implements hook_form_alter().
 */
function suggest_similar_titles_form_alter(&$form, &$form_state, $form_id) {
  // Checking if user has access to view suggested titles.
  if (user_access('view similar titles suggestion')) {
    $types = _node_types_build()->types;
    foreach ($types as $value) {
      if ($form_id == $value->type . '_node_form') {
        if (variable_get($value->type . "_suggest_similar_titles", "")) {
          // Adding js file.
          drupal_add_js(drupal_get_path('module', 'suggest_similar_titles') . '/suggest_similar_titles.js');
          // Adding css file.
          drupal_add_css(drupal_get_path('module', 'suggest_similar_titles') . '/suggest_similar_titles.css');
          if (variable_get("suggest_similar_titles_settings", "top") == 'top') {
            $form['title']['#prefix'] = '<div id="ajax-title-div"><span class="type">' . $value->type . '</span>
              <span class="base_path">' . base_path() . '</span>
                <div id="ajax-title-container" class="' . variable_get("suggest_similar_titles_settings", "top") . '"> </div>';
            $form['title']['#suffix'] = '</div>';
          }
          else {
            $form['title']['#prefix'] = '<div id="ajax-title-div">';
            $form['title']['#suffix'] = '<span class="type">' . $value->type . '</span>
              <span class="base_path">' . base_path() . '</span>
                <div id="ajax-title-container" class="' . variable_get("suggest_similar_titles_settings", "top") . '"> </div>
              </div>';
          }
        }
      }
    }
  }
  return $form;
}

/**
 * Implements hook_theme().
 */
function suggest_similar_titles_theme() {
  return array(
    'suggest_similar_titles' => array(
      'variables' => array('node' => NULL),
      'template' => 'title-suggestion',
    ),
  );
}
