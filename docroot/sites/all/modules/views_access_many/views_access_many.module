<?php

if (module_exists('simpletest')) {
  module_load_include('inc', 'views_access_many', 'views_access_many.test');
}

/**
 * Implements hook_views_api()
 */
function views_access_many_views_api() {
  return array (
    'api' => 2,
  );
}

/**
 * Implements hook_views_plugins().
 */
function views_access_many_views_plugins() {

  $plugins = array (
    'module' => 'views_access_many',
    'access' => array (
      'many' => array (
        'title' => t('Many Access Plugins'),
        'help' => t('This plugin allows many access plugins to be chosen instead of just one.'),
        'handler' => 'views_plugin_access_many',
        'uses options' => TRUE,
        'help topic' => 'access',
      ),
    ),
  );

  if (function_exists('_views_access_many_test_views_plugins')) {
    _views_access_many_test_views_plugins($plugins);
  }

  return $plugins;
}

/**
 * Access callback
 *
 * Works through all the callbacks and grants access either
 * by blacklisting or whitelisting
 */
function views_plugin_access_many_access_callback($callbacks, $settings) {

  // For consistency when we are called programatically / by the menu system
  if (!isset($settings['account'])) {
    $settings['account'] = $GLOBALS['user'];
  }

  // Full override
  if (user_access('access all views', $settings['account']) && empty($GLOBALS['views_access_many_test_skip_admin_override'])) {
    return TRUE;
  }

  $FALSE = FALSE;

  // If we're whitelisting rather than blacklisting we need an inverted behaviour here
  if ($settings['blacklist'] == 'OR') {
    $FALSE = TRUE;
  }

  foreach ($callbacks as $plugin_name => $callback) {

    // Call the function and get the Boolean result
    if (function_exists($callback[0])) {
      $args = is_array($callback[1]) ? $callback[1] : array ();
      $running_result = call_user_func_array($callback[0], $args);

      // Since we're blacklisting, if we get a false
      // result, immediately return FALSE
      if ($running_result == $FALSE) {
        return $FALSE;
      }
    }
  }

  // Default to returning TRUE
  return !$FALSE;
}


/**
 * Functions used as callbacks for our degenerative access plugins
 * useful for testing
 * @see tests/views_plugin_access_degenerative.inc
 */
function views_plugin_access_return_true() {
  return TRUE;
}
function views_plugin_access_return_false() {
  return FALSE;
}
