<?php

/**
 * Unit tests the handling of the logic in views_access_many
 */
class ViewsAccessManyLogic extends DrupalUnitTestCase {

  public static function getInfo() {
    return array (
      'name' => 'Unit Test logic',
      'description' => 'Tests the handling of the boolean logic in the access callback.',
      'group' => 'Views Access Many',
    );
  }

  public function setUp() {
    // Modules our test depends on
    parent::setUp(
      'views',
      'views_access_many'
    );

    // Set a flag that stops our callback giving admin user auto override - we want to test the logic, not
    // whether or not our callback knows how to give administrators all power
    $GLOBALS['views_access_many_test_skip_admin_override'] = TRUE;
  }

  public function tearDown() {
    unset($GLOBALS['views_access_many_test_skip_admin_override']);
    parent::tearDown();
  }

  public function testTrue1And() {
    $callbacks = array (
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
    );
    $settings = array (
      'blacklist' => 'AND',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertTrue($access_result, t('Access allowed'), 'PHP');
  }

  public function testFalse1And() {
    $callbacks = array (
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
    );
    $settings = array (
      'blacklist' => 'AND',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertFalse($access_result, t('Access disallowed'), 'PHP');
  }

  public function testTrue1Or() {
    $callbacks = array (
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
    );
    $settings = array (
      'blacklist' => 'OR',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertTrue($access_result, t('Access allowed'), 'PHP');
  }

  public function testFalse1Or() {
    $callbacks = array (
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
    );
    $settings = array (
      'blacklist' => 'OR',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertFalse($access_result, t('Access disallowed'), 'PHP');
  }

  public function testTrue2And() {
    $callbacks = array (
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
    );
    $settings = array (
      'blacklist' => 'AND',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertTrue($access_result, t('Access allowed'), 'PHP');
  }

  public function testTrue3And() {
    $callbacks = array (
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
    );
    $settings = array (
      'blacklist' => 'AND',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertTrue($access_result, t('Access allowed'), 'PHP');
  }

  public function testFalse2And() {
    $callbacks = array (
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
    );
    $settings = array (
      'blacklist' => 'AND',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertFalse($access_result, t('Access disallowed'), 'PHP');
  }

  public function testFalse3And() {
    $callbacks = array (
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
    );
    $settings = array (
      'blacklist' => 'AND',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertFalse($access_result, t('Access disallowed'), 'PHP');
  }

  public function testTrue2Or() {
    $callbacks = array (
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
    );
    $settings = array (
      'blacklist' => 'OR',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertTrue($access_result, t('Access allowed'), 'PHP');
  }

  public function testTrue3Or() {
    $callbacks = array (
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
    );
    $settings = array (
      'blacklist' => 'OR',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertTrue($access_result, t('Access allowed'), 'PHP');
  }

  public function testFalse2Or() {
    $callbacks = array (
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
    );
    $settings = array (
      'blacklist' => 'OR',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertFalse($access_result, t('Access disallowed'), 'PHP');
  }

  public function testFalse3Or() {
    $callbacks = array (
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
    );
    $settings = array (
      'blacklist' => 'OR',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertFalse($access_result, t('Access disallowed'), 'PHP');
  }

  public function testTrue1False1And() {
    $callbacks = array (
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
    );
    $settings = array (
      'blacklist' => 'AND',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertFalse($access_result, t('Access disallowed'), 'PHP');
  }

  public function testFalse1True1And() {
    $callbacks = array (
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
    );
    $settings = array (
      'blacklist' => 'AND',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertFalse($access_result, t('Access disallowed'), 'PHP');
  }

  public function testTrue1False2And() {
    $callbacks = array (
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
    );
    $settings = array (
      'blacklist' => 'AND',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertFalse($access_result, t('Access disallowed'), 'PHP');
  }

  public function testTrue2False1And() {
    $callbacks = array (
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
    );
    $settings = array (
      'blacklist' => 'AND',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertFalse($access_result, t('Access disallowed'), 'PHP');
  }

  public function testFalse1True2And() {
    $callbacks = array (
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
    );
    $settings = array (
      'blacklist' => 'AND',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertFalse($access_result, t('Access disallowed'), 'PHP');
  }

  public function testFalse2True1And() {
    $callbacks = array (
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
    );
    $settings = array (
      'blacklist' => 'AND',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertFalse($access_result, t('Access disallowed'), 'PHP');
  }

  public function testTrue1False1Or() {
    $callbacks = array (
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
    );
    $settings = array (
      'blacklist' => 'OR',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertTrue($access_result, t('Access allowed'), 'PHP');
  }

  public function testFalse1True1Or() {
    $callbacks = array (
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
    );
    $settings = array (
      'blacklist' => 'OR',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertTrue($access_result, t('Access allowed'), 'PHP');
  }

  public function testTrue1False2Or() {
    $callbacks = array (
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
    );
    $settings = array (
      'blacklist' => 'OR',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertTrue($access_result, t('Access allowed'), 'PHP');
  }

  public function testTrue2False1Or() {
    $callbacks = array (
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
    );
    $settings = array (
      'blacklist' => 'OR',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertTrue($access_result, t('Access allowed'), 'PHP');
  }

  public function testFalse1True2Or() {
    $callbacks = array (
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
    );
    $settings = array (
      'blacklist' => 'OR',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertTrue($access_result, t('Access allowed'), 'PHP');
  }

  public function testFalse2True1Or() {
    $callbacks = array (
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
      'views_plugin_access_false' => array ('views_plugin_access_return_false', array ()),
      'views_plugin_access_true' => array ('views_plugin_access_return_true', array ()),
    );
    $settings = array (
      'blacklist' => 'OR',
    );
    $access_result = views_plugin_access_many_access_callback($callbacks, $settings);
    $this->assertTrue($access_result, t('Access allowed'), 'PHP');
  }

}