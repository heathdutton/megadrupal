<?php

/**
 * Tries to actually access views that are handled by views_access_many
 */
class ViewsAccessManyAccessTestCase extends ViewsAccessManyParentTestCase {

  public static function getInfo() {
    return array (
      'name' => 'Tests Views access',
      'description' => 'Tries to access views that have been configured with view_access_many.',
      'group' => 'Views Access Many',
    );
  }

  public function setUp() {
    parent::setUp();
    $this->significant_role_id = $this->drupalCreateRole(array ('access content'), 'ViewsAccessManyUniqueTestRole');
    $this->user_with_role_but_not_administer_nodes = $this->drupalCreateUserWithRoles(array ($this->significant_role_id));
    $this->user_with_role_and_administer_nodes = $this->drupalCreateUserWithRoles(array ($this->significant_role_id, $this->drupalCreateRole(array ('access content', 'administer nodes'))));
  }

  /**
   * Return a list of views against whether it is expected
   * they should be accessible
   */
  private function getBasicViews() {
    $views = array (
      'vma_false1and' => FALSE,
      'vma_false1or' => FALSE,
      'vma_false1true1and' => FALSE,
      'vma_false1true1or' => TRUE,
      'vma_true1and' => TRUE,
      'vma_true1or' => TRUE,
      'vma_trueAnd_falseOrTrue_' => TRUE,
      'vma_trueAnd_falseAndTrue_' => FALSE,
      'vma_falseAnd_falseAndTrue_' => FALSE,
    );
    foreach ($views as $name => $expected_result) {
      if (($view = views_get_view($name, TRUE))) {
        $view->save();
      }
      else {
        $this->fail('View "' . $name . '" does not exist');
        return array ();
      }
    }
    return $views;
  }

  /**
   * Test the basic, unnested views to check that access fails
   */
  public function testViewsAccessProgrammaticAdmin() {

    $views = $this->getBasicViews();

    // Ensure we're logged in as the admin
    $old_user = self::drupalSwitchUserProgrammatic(user_load(1));

    foreach ($views as $name => $expected_result) {

      // We're the admin
      $expected_result = TRUE;

      $msg = t('Programmatic access !allowed for admin', array ('!allowed' => empty($expected_result) ? t('disallowed') : t('allowed')));

      $view = views_get_view($name);
      $result = $view->access('page');
      $this->assertIdentical($result, $expected_result, $msg, 'PHP');
    }

    self::drupalSwitchUserProgrammatic($old_user);
  }

  /**
   * Test the basic, unnested views to check that access fails
   */
  public function testViewsAccessProgrammaticAnonymous() {

    $views = $this->getBasicViews();

    // Log out
    $old_user = self::drupalLogoutProgrammatic();
    foreach ($views as $name => $expected_result) {

      $msg = t('Programmatic access !allowed for anonymous', array ('!allowed' => empty($expected_result) ? t('disallowed') : t('allowed')));

      $view = views_get_view($name);
      $result = $view->access('page');
      $this->assertIdentical($result, $expected_result, $msg, 'PHP');
    }

    self::drupalSwitchUserProgrammatic($old_user);
  }

  /**
   * Test the basic, unnested views to check that access fails
   */
  public function testViewsAccessBrowserAdmin() {

    $views = $this->getBasicViews();

    $this->drupalLogin($this->user_access_all_views);

    foreach ($views as $name => $expected_result) {

      // We're the admin
      $expected_result = TRUE;

      $msg = t('Browser access !allowed for admin', array ('!allowed' => empty($expected_result) ? t('disallowed') : t('allowed')));

      $view = views_get_view($name);
      $view->set_display('page');
      $path = $view->display_handler->get_option('path');
      $this->drupalGet($path);
      $this->assertResponse(200, $msg);
    }
  }

  /**
   * Test the basic, unnested views to check that access fails
   */
  public function testViewsAccessBrowserAnonymous() {

    $views = $this->getBasicViews();

    // Log out
    $this->drupalLogout();

    foreach ($views as $name => $expected_result) {

      $msg = t('Browser access !allowed for anonymous', array ('!allowed' => empty($expected_result) ? t('disallowed') : t('allowed')));

      $view = views_get_view($name);
      $view->set_display('page');
      $path = $view->display_handler->get_option('path');
      $expected_response = empty($expected_result) ? 403 : 200;
      $this->drupalGet($path);
      $this->assertResponse($expected_response, $msg);
    }
  }



  /**
   * Test other views that have more complex access callbacks.
   * We have a new method per test from now on..
   *
   * NOTE: (views-2.x) Keep names of views less than 32 chars in length,
   * otherwise tests will fail because of truncation that goes on in the db
   */

  public function testViewsAccessBrowserPerm() {

    $view_name = 'vma_perm';
    $view_display = 'page';

    // We can grab the path we need to go to from the view directly
    $view = views_get_view($view_name, TRUE);
    // This ensures our view exists in the database - a workaround for the
    // limiting static cache on views_discover_default_views in views-2.x
    $view->save();
    $view->set_display($view_display);
    $path = $view->display_handler->get_option('path');

    // Try it as the admin
    $this->drupalLogin($this->user_access_all_views);
    $this->drupalGet($path);
    $this->assertResponse(200, t('Browser access allowed for admin.'), 'PHP');

    // Try it as anonymous
    $this->drupalLogout();
    $this->drupalGet($path);
    $this->assertResponse(403, t('Browser access disallowed for anonymous'), 'PHP');

    // Try it as a user with the specific permission
    $this->drupalLogin($this->user_administer_nodes);
    $this->drupalGet($path);
    $this->assertResponse(200, t('Browser access allowed for authorized user.'), 'PHP');

    // Try it as a user without the specific permission
    $this->drupalLogin($this->user_standard);
    $this->drupalGet($path);
    $this->assertResponse(403, t('Browser access disallowed for unauthorized user.'), 'PHP');
  }

  public function testViewsAccessBrowserPermOrRole() {

    $view_name = 'vma_roleorperm';
    $view_display = 'page';

    // Set a Global so our default view restricts its access plugin to the right role
    $GLOBALS['views_access_many_test_significant_role_id'] = $this->significant_role_id;

    // Jump through many static cache resetting hoops to force views to pick up
    // our default view from scratch when responding to a menu callback.
    $view = views_get_view($view_name, TRUE);
    $view->save();
    views_get_all_views(TRUE);
    menu_rebuild();

    $view->set_display($view_display);
    // We can grab the path we need to go to from the view directly
    $path = $view->display_handler->get_option('path');

    // Try it as the admin
    $this->drupalLogin($this->user_access_all_views);
    $this->drupalGet($path);
    $this->assertResponse(200, t('Browser access allowed for admin.'), 'PHP');
    $this->drupalLogout();

    // Try it as anonymous
    $this->drupalGet($path);
    $this->assertResponse(403, t('Browser access disallowed for anonymous'), 'PHP');

    // Try it as a user with the specific permission but not the role
    $this->drupalLogin($this->user_administer_nodes);
    $this->drupalGet($path);
    $this->assertResponse(200, t('Browser access allowed for authorized user without correct role.'), 'PHP');

    // Try it as a user with the role but not the permission
    $this->drupalLogin($this->user_with_role_but_not_administer_nodes);
    $this->drupalGet($path);
    $this->assertResponse(200, t('Browser access allowed for user with correct role (only).'), 'PHP');
    $this->drupalLogout();

    // Try it as a user with both the role and the permission
    $this->drupalLogin($this->user_with_role_and_administer_nodes);
    $this->drupalGet($path);
    $this->assertResponse(200, t('Browser access allowed for user with correct role and correct permission.'), 'PHP');
    $this->drupalLogout();

    // Try it as a user without the specific permission or role
    $this->drupalLogin($this->user_standard);
    $this->drupalGet($path);
    $this->assertResponse(403, t('Browser access disallowed for unauthorized user without correct role.'), 'PHP');
  }
}