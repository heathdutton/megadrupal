<?php

/**
 * @file
 * Provides the SCP API functions. Requires access to shell_exec function.
 */

/**
 * Implements hook_menu().
 */
function scp_api_menu() {
  $items['admin/config/services/scp_api'] = array(
    'title' => 'SCP API',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scp_api_admin_settings'),
    'access arguments' => array('access administration pages'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function scp_api_permission() {
  return array(
    'use scp' => array(
      'title' => t('Use SCP API'),
      'description' => t('Use the SCP API to transfer files.'),
    ),
  );
}

/**
 * Callback page for administrative settings. Turn off scp for testing.
 */
function scp_api_admin_settings() {
  $form['scp_api_test_mode'] = array(
    '#type' => 'checkbox',
    '#title' => 'Test mode',
    '#description' => 'In test mode scp commands will be created but not executed.',
    '#default_value' => variable_get('scp_api_test_mode', TRUE),
  );
  return system_settings_form($form);
}

/**
 * Helper function to move files. Used by passing an array configured with information to create the scp command.
 *
 * Given an array of arrays, where each take the following format:
 *  $file_set_move[$scp_api_id] = array( //scp_id is used to assist hook_scp_api_alter to differentiate queued SCP files.
 *    'from_folder' => '',
 *    'from_file' => '',
 *    'from_account' => '', // Usually blank if file is local.
 *    'from_server' => '', // Usually blank if file is local.
 *    'to_folder' => '',
 *    'to_file' => '', // Does not have to be the same name as the from file.
 *    'to_account' => '',
 *    'to_server' => '',
 *    'options' => '', // Options are SCP commandline options. See man scp for details.
 *                     // Options is where identity file information is passed if ssh keys are not already configured between servers.
 *  );
 */
function scp_api_scp_files($file_set = array()) {
  if (!user_access('use scp')) {
    return;
  }
  // Allow other modules to modify or respond to scp call
  $file_set = module_invoke_all('scp_api_alter', $file_set);

  // Execute commands
  foreach ($file_set as $scp_api_id => $file_to_move) {
    $command  = '';
    $from_file = '';
    $to_file = '';
    $options = '';
    $from_file = $file_to_move['from_folder'] . '/' . $file_to_move['from_file'];
    if (!empty($file_to_move['from_account']) && !empty($file_to_move['from_server'])) {
      $from_file = $file_to_move['from_account'] . '@' . $file_to_move['from_server'] . ':' . $from_file;
    }
    $to_file = $file_to_move['to_folder'] . '/' . $file_to_move['to_file'];
    if (!empty($file_to_move['to_account']) && !empty($file_to_move['to_server'])) {
      $to_file = $file_to_move['to_account'] . '@' . $file_to_move['to_server'] . ':' . $to_file;
    }
    $options = $file_to_move['options'];
    $command = 'scp ' . $options . ' ' . $from_file . ' ' . $to_file;
    if (variable_get('scp_api_test_mode', TRUE)) {
      $this_output = $scp_api_id . ': ' . t('Test mode is active, this scp command was not executed.');
      drupal_set_message(t('@scp returned @output', array('@scp' => $command, '@output' => $this_output)), 'warning');
    }
    else {
      shell_exec($command); // On some php installs shell access is disallowed. Check with your hosting company.
      $this_output = $scp_api_id . ': ' . 'Command was executed.';
    }
    watchdog('scp_api', '@output @scp', array('@output' => $this_output, '@scp' => $command), WATCHDOG_DEBUG);
  }
  return;
}
