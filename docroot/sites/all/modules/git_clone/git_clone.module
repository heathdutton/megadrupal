<?php
/**
 * @file
 * Git Clone module file.
 */

use Drupal\GitClone\GitClone;

define('GIT_CLONE_ADMIN_PATH', 'admin/structure/clones');
define('GIT_CLONE_QUEUE', 'git_clone');

/******************************************************************************
 * Private helper functions.
 *****************************************************************************/

/**
 * Determine the absolute path to the git binary.
 *
 * @return string
 *   The path to the system binary git command.
 */
function _git_clone_binary_path() {
  static $git;
  if (!isset($git)) {
    $git = variable_get('git_binary', 'git');
  }
  return $git;
}

/**
 * Options to pass to Gitonomy objects.
 *
 * This is primarily used to pass the system git binary path.
 *
 * @param array $options
 *   Additional options to pass.
 *
 * @return array
 *   An associative array of option values, key by the option name.
 */
function _git_clone_gitonomy_options(array $options = array()) {
  $options = array_merge(array(
    'environment_variables' => array(),
    'command' => _git_clone_binary_path(),
    'process_timeout' => 3600,
  ), $options);
  return $options;
}

/**
 * Convert a string for use in a Drupal hook name.
 *
 * @param string $string
 *   The string to convert.
 *
 * @return string
 *   The string converted to hook name.
 */
function _git_clone_hook_name($string) {
  return drupal_strtolower(preg_replace('/[^a-z0-9_]+/i', '_', $string));
}

/**
 * Determines the file system path used for storing cloned git repositories.
 *
 * @param bool $absolute
 *   Toggle determining whether or not to return an absolute system path.
 * @param bool $create
 *   Toggle determining whether or not to attempt to create the path if it
 *   does not exist and modify permissions if it isn't writable.
 *
 * @return string|FALSE
 *   The file system path or FALSE if not set.
 */
function _git_clone_path($absolute = FALSE, $create = FALSE) {
  static $path;
  if (!isset($path)) {
    $path = variable_get('file_git_clone_path', FALSE);
  }
  if ($path) {
    if ($absolute) {
      $path = drupal_realpath($path);
    }
    if ($create) {
      if (file_prepare_directory($path, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
        file_create_htaccess($path);
      }
      else {
        $path = FALSE;
      }
    }
  }
  return $path;
}

/******************************************************************************
 * Hooks.
 *****************************************************************************/

/**
 * Implements hook_cron().
 */
function git_clone_cron() {
  $clones = entity_load('git_clone');
  /** @var GitClone $clone */
  foreach ($clones as $clone) {
    // Only queue branches.
    if ($clone->refType === 'branch') {
      $clone->queue();
    }
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function git_clone_cron_queue_info() {
  $queues['git_clone'] = array(
    'worker callback' => '_git_clone_dequeue_callback',
    // Default timeout to 5 minutes.
    // @todo document/make this a UI configurable option.
    'time' => variable_get('git_clone_timeout', 300),
  );
  return $queues;
}

/**
 * Implements hook_entity_info().
 */
function git_clone_entity_info() {
  $info['git_clone'] = array(
    'label' => t('Git Clone'),
    'plural label' => t('Git Clones'),
    'module' => 'git_clone',
    // Entity.
    'access callback' => '_git_clone_access_callback',
    'base table' => 'git_clone',
    'controller class' => '\Drupal\GitClone\EntityController',
    'entity class' => '\Drupal\GitClone\GitClone',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'title',
      'name' => 'name',
    ),
    'exportable' => TRUE,
    // Admin.
    'admin ui' => array(
      'controller class' => '\Drupal\GitClone\AdminUIController',
      'file' => 'git_clone.admin.inc',
      'path' => GIT_CLONE_ADMIN_PATH,
    ),
  );
  return $info;
}

/**
 * Implements hook_ENTITY_TYPE_OPERATION().
 */
function git_clone_git_clone_delete(GitClone $clone) {
  if ($path = $clone->getPath(FALSE, FALSE)) {
    file_unmanaged_delete_recursive($path);
  }
}

/**
 * Implements hook_ENTITY_TYPE_OPERATION().
 */
function git_clone_git_clone_insert(GitClone $clone) {
  $clone->getPath();
}

/**
 * Implements hook_ENTITY_TYPE_OPERATION().
 */
function git_clone_git_clone_update(GitClone $clone) {
  $clone->getPath();
}


/**
 * Implements hook_module_implements_alter().
 */
function git_clone_module_implements_alter(&$implementations, $hook) {
  // Ensure that Git Clone is executed before everything else, especially
  // modules like the the API module. This helps to ensure that all the git
  // clone repository files are updated before other modules consume them.
  if ($hook === 'cron' || $hook === 'cron_queue_info') {
    $module = 'git_clone';
    if (isset($implementations[$module])) {
      $group = array($module => $implementations[$module]);
      unset($implementations[$module]);
      $implementations = $group + $implementations;
    }
  }
}

/**
 * Implements hook_permission().
 */
function git_clone_permission() {
  return array(
    'administer git clones' => array(
      'title' => t('Administer git clones'),
      'restrict access' => TRUE,
    ),
    'create git clones' => array(
      'title' => t('Create git clones'),
    ),
    'delete git clones' => array(
      'title' => t('Delete git clones'),
    ),
    'update git clones' => array(
      'title' => t('Update git clones'),
    ),
    'view git clones' => array(
      'title' => t('View git clones'),
    ),
  );
}

/**
 * Implements hook_stream_wrappers().
 */
function git_clone_stream_wrappers() {
  $wrappers['gitclone'] = array(
    'name' => t('Git clone files'),
    'class' => 'GitCloneStreamWrapper',
    'description' => t('Local cloned git repository files.'),
    'type' => STREAM_WRAPPERS_LOCAL_HIDDEN,
  );
  return $wrappers;
}

/******************************************************************************
 * Callbacks.
 *****************************************************************************/

/**
 * Implements callback_entity_access().
 *
 * @see entity_access()
 */
function _git_clone_access_callback($op, $entity, $account, $entity_type) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  // Check that the git clone path is set.
  if (!_git_clone_path(TRUE, TRUE)) {
    drupal_set_message(t('You must set a writable <a href="!url">file system git clone path</a> before being able to use the Git Clone system.', array(
      '!url' => url('admin/config/media/file-system'),
    )), 'error', FALSE);

    // If there is no git clone path, only let the "view" operation through.
    if ($op !== 'view') {
      return FALSE;
    }
  }

  // User 1 and roles with the "administer git clones" have all privileges.
  if ($account->uid == 1 || user_access('administer git clones')) {
    return TRUE;
  }

  // Check roles that have the following operation permissions.
  $ops = array('create', 'delete', 'update', 'view');
  if (in_array($op, $ops)) {
    return user_access($op . ' git clones', $account);
  }
}

/**
 * Worker callback for git_clone_cron_queue_info().
 *
 * @param \Drupal\GitClone\GitClone $clone
 *   The git clone entity.
 *
 * @see git_clone_cron_queue_info()
 */
function _git_clone_dequeue_callback(GitClone $clone) {
  module_invoke_all('git_clone_pre_dequeue', $clone);
  $clone->dequeue();
  module_invoke_all('git_clone_post_dequeue', $clone);
}

/******************************************************************************
 * Alters.
 *****************************************************************************/

/**
 * Implements hook_form_FORM_ID_alter().
 */
function git_clone_form_api_branch_edit_form_alter(&$form, &$form_state, $form_id) {
  /** @var GitClone $clone */
  $options = array();
  foreach (entity_load('git_clone') as $clone) {
    $options[$clone->getPath(FALSE)] = $clone->label();
  }
  $form['data']['directories']['#title'] = t('Git Clone Repository');
  $form['data']['directories']['#type'] = 'select';
  $form['data']['directories']['#options'] = $options;
  $form['data']['directories']['#description'] = t('Choose the !link that will be associated and used to parse this "API branch".', array(
    '!link' => entity_access('view', 'git_clone') ? l(t('Git Clone Repository'), GIT_CLONE_ADMIN_PATH) : t('Git Clone Repository'),
  ));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function git_clone_form_system_file_system_settings_alter(&$form, &$form_state, $form_id) {
  // Move the core paths up.
  $form['file_public_path']['#weight'] = -10;
  $form['file_private_path']['#weight'] = -9;

  // Inject file_git_clone_path.
  $form['file_git_clone_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Git clone file system path'),
    '#default_value' => _git_clone_path(),
    '#maxlength' => 255,
    '#weight' => -8,
    '#description' => t('An existing local file system path for storing cloned git repositories. It should be writable by Drupal and not accessible over the web. See the online handbook for <a href="@handbook">more information about securing private files</a>.', array('@handbook' => 'http://drupal.org/documentation/modules/file')),
    '#after_build' => array('system_check_directory'),
  );

  // Inject git_binary.
  $form['git_binary'] = array(
    '#type' => 'textfield',
    '#title' => t('Git binary path'),
    '#default_value' => variable_get('git_binary', ''),
    '#maxlength' => 255,
    '#weight' => -7,
    '#description' => t('The absolute path to the git binary on this server. (e.g. /usr/bin/git)'),
  );
}
