<?php
/**
 * @file
 * Install and update hooks.
 */

// Include the module file.
include_once 'git_clone.module';

/**
 * Implements hook_schema().
 */
function git_clone_schema() {
  $schema['git_clone'] = array(
    'description' => 'The base table for GitClone entities.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key of a GitClone entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Machine name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'title' => array(
        'description' => 'Display title.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'url' => array(
        'description' => 'Repository URL.',
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
        'default' => NULL,
      ),
      'ref' => array(
        'description' => 'Repository reference.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'refType' => array(
        'description' => 'Repository reference type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'settings' => array(
        'description' => 'Settings.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
  );
  return $schema;
}

/**
 * Implements hook_requirements().
 */
function git_clone_requirements($phase) {
  $requirements = array();
  $t = get_t();

  // Retrieve the git clone path.
  $git_clone_path = _git_clone_path();

  // Install phase.
  if ($phase === 'install') {
    // Since autoloading will only happen after this module has been installed,
    // the individual class files must be loaded manually here so they don't
    // generate any errors by Entity API when the cache clears.
    $files = file_scan_directory(__DIR__ . '/src', '/\.php$/');
    foreach ($files as $file) {
      include_once $file->uri;
    }

    // Warn users that they will need to set the "file_git_clone_path" variable.
    if (!$git_clone_path) {
      $cli = drupal_is_cli();
      $message = '';
      if ($cli) {
        $message .= "\n" . str_repeat('*', 80);
      }
      $file_system_url = 'admin/config/media/file-system';
      $message .= $t("\n<strong>ADDITIONAL ACTION REQUIRED:</strong><br/>\n\nFor the Git Clone module to work, you will need to setup a separate system file path for git clones.\nIdeally, this should be <strong>outside</strong> of the site <code>DOCROOT</code>. You can do this one of two ways:\n\n<br/>  1) Set a configuration variable in your site's <code>settings.php</code> file, e.g. <code>\$conf[\"file_git_clone_path\"]</code>\n<br/>  2) Navigate to <a href=\"!file_system_url\">!file_system_title</a>, set it and then save.\n\n", array(
        '!file_system_title' => drupal_is_cli() ? "/$file_system_url" : $t('File System'),
        '!file_system_url' => url($file_system_url),
      ));
      if ($cli) {
        $message = strip_tags($message);
        $message .= str_repeat('*', 80) . "\n";
      }
      drupal_set_message($message, 'warning');
    }
  }
  // Runtime phase.
  elseif ($phase === 'runtime') {
    // Show the git binary path.
    $requirements['git_binary'] = array(
      'title' => $t('Git Clone: binary path'),
      'value' => _git_clone_binary_path(),
    );

    // Use Symfony\Component\Process to retrieve the git binary version.
    // Some hosting providers may have placed restrictions to which methods or
    // functions can be executed. Using the same methods that the module
    // ensures consistency when testing requirements.
    $options = _git_clone_gitonomy_options();
    $builder = Symfony\Component\Process\ProcessBuilder::create(array($options['command'], '--version'));
    $builder->inheritEnvironmentVariables(FALSE);
    $process = $builder->getProcess();
    $process->setEnv($options['environment_variables']);
    $process->setTimeout($options['process_timeout']);
    $process->setIdleTimeout($options['process_timeout']);
    $process->run();

    $git_version = $process->isSuccessful() ? $process->getOutput() : FALSE;
    $requirements['git_version'] = array(
      'title' => $t('Git Clone: binary version'),
      'value' => $git_version ? $git_version : t('Unknown'),
    );

    // Indicate that the git binary version cannot be determined.
    if (!$git_version) {
      $requirements['git_binary']['severity'] = REQUIREMENT_ERROR;
      $requirements['git_version']['severity'] = REQUIREMENT_ERROR;
      $requirements['git_version']['description'] = $t('The system git binary is either not discoverable or not executable. You can explicitly set the path to the git binary by adding the following to this site\'s settings.php file: <code>$conf["git_binary"] = "/path/to/git";</code>.');
    }

    $tokens = array(
      '%directory' => $git_clone_path,
      '!handbook' => 'http://drupal.org/documentation/modules/file',
      '!git_clone' => 'https://www.drupal.org/project/git_clone',
    );
    $title = $t('Git Clone: file system path', $tokens);
    if (!file_prepare_directory($git_clone_path, FILE_CREATE_DIRECTORY)) {
      $requirements['git_clone_path'] = array(
        'title' => $title,
        'description' => $t('This directory cannot be written to. The <a href="!git_clone">Git Clone</a> module must be able to clone external remote repositories into this directory.', $tokens),
        'severity' => REQUIREMENT_ERROR,
        'value' => $t('Not writable (%directory)', $tokens),
      );
    }
    else {
      // Check if private .htaccess file exists.
      file_create_htaccess($git_clone_path);
      if (!file_exists("$git_clone_path/.htaccess")) {
        $requirements['git_clone_path'] = array(
          'title' => $title,
          'description' => $t('This directory does not contain an .htaccess file. See the online handbook for <a href="!handbook">more information about securing private files</a>.', $tokens),
          'value' => $t('Writable, but not protected (%directory)', $tokens),
          'severity' => REQUIREMENT_WARNING,
        );
      }
      else {
        $requirements['git_clone_path'] = array(
          'title' => $title,
          'value' => $t('Writable & Protected (%directory)', $tokens),
        );
      }
    }
  }
  return $requirements;
}

/**
 * Implements hook_install().
 */
function git_clone_install() {
  // Create the git clone file system path.
  _git_clone_path(TRUE, TRUE);

  // Increase this module's weight to ensure it runs first for cron (which
  // other modules may depend on a correct and updated file system).
  db_update('system')
    ->fields(array('weight' => 10))
    ->condition('name', 'git_clone')
    ->execute();
}

/**
 * Implements hook_uninstall().
 */
function git_clone_uninstall() {
  // Remove the git clone file system path.
  file_unmanaged_delete_recursive(_git_clone_path());

  // Remove the git clone queue.
  /** @var DrupalQueueInterface $queue */
  $queue = DrupalQueue::get(GIT_CLONE_QUEUE, TRUE);
  $queue->deleteQueue();
}

/**
 * Remove "refs" field from {git_clone} table.
 */
function git_clone_update_7001() {
  // Drop the "refs" field.
  db_drop_field('git_clone', 'refs');

  // Because the entity info is cached, how Drupal bootstraps and because the
  // class and path to the file stream wrapper has changed the entire registry,
  // schema for git_clone and entity info cache needs to be rebuilt so it
  // doesn't fatal after the update has finished during a normal cache clear.
  registry_rebuild();
  drupal_static_reset('file_get_stream_wrappers');
  drupal_get_schema('git_clone', TRUE);
  entity_info_cache_clear();
}
