<?php
define('BIBLE_GOLDEN_VERSE_DEFAULT_URL', 'http://drupalbible.org/dgv');
define('BIBLE_DATA_DEFAULT_URL', 'http://drupalbible.org/bibledata');
define('BIBLE_WEBIMPORT_URL', 'http://drupalbible.org/bibledata/wi');
define('BIBLE_WEBSERVICE_URL', 'http://drupalbible.org/bibledata/ws');
define('BIBLE_GOLDEN_VERSE_DEFAULT_TYPE', '0');
define('BIBLE_BLS_POPUP_STYLE', 'border-style:ridge;border-color:#00AAFF;border-width:1px;background-color:#EEEEEE;width:300px;height:200px;');

function bible_boot() {
  global $book_list;
  $book_list = 'GEN|EXO|LEV|NUM|DEU|';
  $book_list .= 'JOS|JUG|RUT|1SM|2SM|1KG|2KG|1CH|2CH|EZR|NEH|TOB|JDT|EST|1MC|2MC|3MC|4MC|';
  $book_list .= 'JOB|PS|PSA|PRO|ECC|SON|WIS|SIR|';
  $book_list .= 'ISA|JER|LAM|BAR|EZE|DAN|';
  $book_list .= 'HOS|JOE|AMO|OBA|JON|MIC|NAH|HAB|ZEP|HAG|ZEC|MAL|';
  $book_list .= 'MAT|MAK|LUK|JHN|';
  $book_list .= 'ACT|';
  $book_list .= 'ROM|1CO|2CO|GAL|EPH|PHL|COL|1TS|2TS|1TM|2TM|TIT|PHM|HEB|';
  $book_list .= 'JAM|';
  $book_list .= '1PE|2PE|';
  $book_list .= '1JN|2JN|3JN|';
  $book_list .= 'JUD|';
  $book_list .= 'REV|';
  $book_list .= '1ES|2ES|EJR|AZA|SUS|BEL|MAN|PSS|ODE';
  global $book_namelist;
  $book_namelist = 'Gen|Genesis;';
  $book_namelist .= 'Exo|Exodus|Exode;';
  $book_namelist .= 'Lev|Leviticus;';
  $book_namelist .= 'Num|Numbers|Nom|Nombres;';
  $book_namelist .= 'Deu|Deuteronomy;';
  $book_namelist .= 'Jos|Josh|Joshua;';
  $book_namelist .= 'Jug|Judges|Jug|Juges;';
  $book_namelist .= 'Rut|Ruth;';
  $book_namelist .= '1 Sam|1 Samuel;';
  $book_namelist .= '2 Sam|2 Samuel;';
  $book_namelist .= '1 Ki|1 Kings|1 Ro|1 Roi|1 Rois;';
  $book_namelist .= '2 Ki|2 Kings|2 Ro|2 Roi|2 Rois;';
  $book_namelist .= '1 Chr|1 Chro|1 Chron|1 Chronicles|1 Chroniques;';
  $book_namelist .= '2 Chr|2 Chro|2 Chron|2 Chronicles|2 Chroniques;';
  $book_namelist .= 'Ezra|Esd|Esdras;';
  $book_namelist .= 'Neh|Nehemiah;';
  $book_namelist .= 'Tob|Tobit|Tobie;';
  $book_namelist .= 'Jdt|Judith;';
  $book_namelist .= 'Est|Esther;';
  $book_namelist .= '1 Mc|1 Maccabees|1 Mac;';
  $book_namelist .= '2 Mc|2 Maccabees|2 Mac;';
  $book_namelist .= '3 Mc|3 Maccabees|3 Mac;';
  $book_namelist .= '4 Mc|4 Maccabees|4 Mac;';
  $book_namelist .= 'Job;';
  $book_namelist .= 'Ps|Psa|Psm|Psalm|Psalms|Psaume|Psaumes;';
  $book_namelist .= 'Psalm 151;';
  $book_namelist .= 'Pro|Prov|Proverbs|Proverbes;';
  $book_namelist .= 'Ecc|Ecclesiastes;';
  $book_namelist .= 'Song|Song of Solomon|Can|Cantique|Cantique des cantiques|Cantique de Salomon;';
  $book_namelist .= 'Wis|Wisdom|Sagesse;';
  $book_namelist .= 'Sir|Sirach|Ecq|Siracide;';
  $book_namelist .= 'Isa|Isaiah|Isaie;';
  $book_namelist .= 'Jer|Jeremiah;';
  $book_namelist .= 'Lam|Lamentations;';
  $book_namelist .= 'Bar|Baruch;';
  $book_namelist .= 'Eze|Ezek|Ezekiel;';
  $book_namelist .= 'Dan|Daniel;';
  $book_namelist .= 'Hos|Hosea;';
  $book_namelist .= 'Joel;';
  $book_namelist .= 'Amo|Amos;';
  $book_namelist .= 'Obad|Obadiah|Abd|Abdi|Abdias;';
  $book_namelist .= 'Jona|Jonah|Jonas;';
  $book_namelist .= 'Mic|Micah;';
  $book_namelist .= 'Nah|Nahum;';
  $book_namelist .= 'Hab|Habakkuk|Habaccuc;';
  $book_namelist .= 'Zep|Zephaniah|Sop|Sophonie;';
  $book_namelist .= 'Hag|Haggai|Agg;';
  $book_namelist .= 'Zec|Zech|Zechariah|Zac|Zacharie;';
  $book_namelist .= 'Mal|Malachi|Malachie;';
  $book_namelist .= 'Mat|Matt|Matthew|Matthieu;';
  $book_namelist .= 'Mar|Mark|Marc;';
  $book_namelist .= 'Luke|Luc;';
  $book_namelist .= 'John|Jn|Jean;';
  $book_namelist .= 'Act|Acts|Actes;';
  $book_namelist .= 'Rom|Romans|Romains;';
  $book_namelist .= '1 Cor|1 Corinthians|1 Corinthiens;';
  $book_namelist .= '2 Cor|2 Corinthians|2 Corinthiens;';
  $book_namelist .= 'Gal|Galatians|Galates;';
  $book_namelist .= 'Eph|Ephesians;';
  $book_namelist .= 'Phi|Phil|Phili|Philippians|Philippiens;';
  $book_namelist .= 'Col|Colossians;';
  $book_namelist .= '1 Thes|1 Thessalonians|1 Thessaloniciens;';
  $book_namelist .= '2 Thes|2 Thessalonians|2 Thessaloniciens;';
  $book_namelist .= '1 Tim|1 Timothy;';
  $book_namelist .= '2 Tim|2 Timothy;';
  $book_namelist .= 'Tit|Titus|Tite;';
  $book_namelist .= 'Phm|Philemon;';
  $book_namelist .= 'Heb|Hebrews;';
  $book_namelist .= 'Jam|James|Jac|Jacques;';
  $book_namelist .= '1 Pet|1 Peter|1 Pi|1 Pie|1 Pierre;';
  $book_namelist .= '2 Pet|2 Peter|2 Pi|2 Pie|2 Pierre;';
  $book_namelist .= '1 John|1 Jn|1 Jean;';
  $book_namelist .= '2 John|2 Jn|2 Jean;';
  $book_namelist .= '3 John|3 Jn|3 Jean;';
  $book_namelist .= 'Jud|Jude;';
  $book_namelist .= 'Rev|Revelation|Apo|Apocalypse;';
  $book_namelist .= '1 Esdras;';
  $book_namelist .= '2 Esdras;';
  $book_namelist .= 'Epistle of Jeremiah;';
  $book_namelist .= 'Prayer of Azariah;';
  $book_namelist .= 'Susanna;';
  $book_namelist .= 'Bel and the Dragon;';
  $book_namelist .= 'Prayer of Manasseh;';
  $book_namelist .= 'Psalm of Solomon;';
  $book_namelist .= 'Odes';
  global $bdtypelist;
  $bdtypelist = array ( 'commentary' => t('Commentary'),
                        'music' => t('Music'),
  						'gallery' => t('Gallery'),
                        'refverse' => t('Reference Verse'),
                        'dailyread' => t('Daily Reading'),
                        'sermon' => t('Sermon'),
                        'misc' => t('Other Data'),
                         );
  global $bibledataxml;
  $bibledataxml = isset($_SESSION['bibledataxml']) ? $_SESSION['bibledataxml'] : "";
}

function bible_init() {
  $path = drupal_get_path('module', 'bible');
  global $base_path, $imagedir, $base_url;
  $imagedir = $base_path. $path . '/images/';
  drupal_add_js(array('baseurl' => $base_url. '/'), array('type' => 'setting', 'scope' => JS_DEFAULT));
  drupal_add_js(array('bibleimgurl' => $imagedir), array('type' => 'setting', 'scope' => JS_DEFAULT));
}

/**
 * Implements hook_permission().
 * Defines the permissions this module uses.
 */
function bible_permission() {
  return array(
    'administer bible' => array(
      'title' => t('Administer of Bible'),
      'description' => t('The administor of bible.'),
    ),
    'access bible content' => array(
      'title' => t('Access Bible content'),
      'description' => t('Users can access bible content.'),
    ),
  );
}


/**
 * Implements hook_block_info().
 *   Generate HTML for the bible block.
 */
function bible_block_info() {
  $blocks[0]['info'] = t('Daily Golden Verse');
  $blocks[1]['info'] = t('Bible Search');
  $blocks[2]['info'] = t('Daily Proverb');
  $blocks[3]['info'] = t('Random Golden Verse');
  $blocks[4]['info'] = t('Quotes of Religion');
  $blocks[5]['info'] = t('My Verses');
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function bible_block_configure($delta = '') {
  $form = array();
  switch ($delta) {
    case 0:
      if (_bible_get_bible_count() > 1) {
        $biblelist = _bible_get_bible_list();
        $biblelist[-1] = t('[By System Default]');
        ksort($biblelist);
        $form['dgvbible_options'] = array(
          '#type' => 'select',
          '#title' => t('Bible Version Options'),
          '#options' => $biblelist,
          '#description' => t('Select bible version.'),
          '#default_value' =>
            variable_get('dgvbible_options',  -1),
        );
      }
      break;
    case 2:
      $form['proverb_options'] = array(
        '#type' => 'select',
        '#title' => t('Display Options'),
        '#options' => array(
            'verse' => t('First verse only'),
            'chapter' => t('Whole chapter'),),
        '#description' => t('Select display options.'),
        '#default_value' =>
          variable_get('proverb_options',  t('verse')),
      );
      break;
    case 4:
      $form['quotes_lang'] = array(
        '#type' => 'textfield',
        '#title' => t('Quotes Language'),
        '#description' => t('Set the language(s) to show. Use * for all quotes. Selected language can seperate by "|". Ex. en|zh-hant'),
        '#default_value' =>
          variable_get('quotes_language',  '*'),
      );
      break;
    case 5:
      global $user;
      $sqlcmd = sprintf("SELECT item,count(*) AS c FROM {bible_userprofile} WHERE uid=%s AND item='vs_goldenverse' OR item LIKE 'vs_verseset%%' GROUP BY item", $user->uid);
      $result_set = db_query($sqlcmd)->fetch();
      $verseset[-1] = t('[All My Verses]');
      foreach ($result_set as $vs){
        $vset = ($vs->item == "vs_goldenverse" ? 0 : substr($vs->item, strlen($vs->item)-1, 1));
        $vitem = ($vs->item == "vs_goldenverse" ? t('Golden Verse') : t('Verse Set'). ' '. $vset);
        $verseset[$vset] = $vitem;
      }
      $form['verseset_options'] = array(
        '#type' => 'select',
        '#title' => t('My Verse Options'),
        '#options' => $verseset,
        '#description' => t('Select Verse set.'),
        '#default_value' =>
          variable_get('verseset_options',  -1),
      );
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *   Generate HTML for the bible block.
 */
function bible_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 0:
      if (!empty($edit['dgvbible_options']))
        variable_set('dgvbible_options', $edit['dgvbible_options']);
      break;
    case 2:
      variable_set('proverb_options', $edit['proverb_options']);
      break;
    case 4:
      variable_set('quotes_language', $edit['quotes_lang']);
      break;
    case 5:
      variable_set('verseset_options', $edit['verseset_options']);
      break;
  }
  return;
}

/**
 * Implements hook_block_view().
 */
function bible_block_view($delta = '') {
	$block = array();
  switch ($delta) {
    // Daily Golden Verse block
    case 0:
      $block['subject'] = t('Daily Golden Verse');
      $gvtype = variable_get('block_bible_GV_bls_type', BIBLE_GOLDEN_VERSE_DEFAULT_TYPE);
      $gvtime = variable_get('block_bible_GV_bls_time', time());
      $gvelapse = time() - $gvtime;
      if ((date('Y-m-d', $gvtime) != date('Y-m-d') && $gvtype == 2) || ($gvelapse > 3600 && $gvtype == 1) || ($gvtype == 0)) {
        $default_url = variable_get('bible_golden_verse_fetch_url', BIBLE_GOLDEN_VERSE_DEFAULT_URL);
        $xml = drupal_http_request($default_url);
        if ($xml->code == 200 && $xml->data != "") {
          $xml_parser = xml_parser_create();
          xml_parse_into_struct($xml_parser, $xml->data, $vals, $index);
          xml_parser_free($xml_parser);
          if ($vals[0]['value']) {
            $bls = $vals[0]['value'];
            if (strpos($bls, ';')) {
			        $bls1 = explode(';', $bls);
			        $bls = $bls1[0];
			      }
          }
          else {
            $bls = '2TM:3:16';
          }
        }
        else {
          $bls = 'PS:119:105';
        }
        variable_set('block_bible_GV_bls', $bls);
        variable_set('block_bible_GV_bls_time', time());
      }
      else {
        if ($gvtype == 3) {
          $verses = trim(variable_get('block_bible_GV_verses', ""));
          $verses = explode("\n", $verses);
          $bls = trim($verses[mt_rand(0, count($verses)-1)]);
          if(!$bls) $bls = "GAL:3:11";
        }
        else {
          $bls = variable_get('block_bible_GV_bls', 'PS:119:105');
          if ($gvelapse == 0) {
            variable_set('block_bible_GV_bls_time', time());
          }
        }
      }
      $bid = variable_get('dgvbible_options', -1);
      $block['content'] = theme("bible_golden_verse",
        array('versearray' => _bible_get_bls_versearray($bls, $bid)));
      break;

    // Bible Search block
    case 1:
      $block['subject'] = t('Bible Search');
      $block['content'] = drupal_get_form('bible_search_form', false, true);
      break;

    // Daily Proverb block
    case 2:
      $block['subject'] = t('Daily Proverb');
      // Get bible translation
      $bid = _bible_get_select_bid();
      // Display options. One verse ($opt=verse) or whole chapter ($opt=chapter)
      $opt = variable_get('proverb_options', 'verse');
      $block['content'] = theme("bible_daily_proverb", array('bid' => $bid, 'chapter' => _bible_get_daily_proverb($bid), 'opt' => $opt));
      break;

    // Golden Verse block
    case 3:
      $block['subject'] = t('Golden Verse');
      // Bible translation
      $bid = _bible_get_select_bid();
      $block['content'] = theme("bible_golden_verse", array('versearray' => _bible_get_random_verse($bid)));
      break;

    // Religion Quotes
    case 4:
      $quoteurl = BIBLE_WEBSERVICE_URL. '/quote//'. variable_get('quotes_language', '*');
      $xml = drupal_http_request($quoteurl);
      if ($xml->code == 200 && $xml->data != "") {
        $doc = new DOMDocument();
        $doc->loadXML($xml->data);
        $root = $doc->documentElement;
        $author = $root->getAttribute('author');
        $quote = $root->nodeValue;
        $block['subject'] = t('Quotes of Religion');
        $block['content'] = theme("bible_quotes", array('quote' => $quote, 'author' => $author));
      }
      break;

    // My Verses
    case 5:
      $block['subject'] = t('My Verses');
      $vset = variable_get('verseset_options',  -1);
      $bid = _bible_get_select_bid();
      $block['content'] = theme("bible_golden_verse", array('versearray' => _bible_get_random_myverse($bid, $vset)));
      break;
  }
  return $block;
}

/**
 * Implements hook_menu().
 */
function bible_menu() {
  $items['admin/config/bible'] = array(
    'title' => 'Bible module settings',
    'description' => 'Bible module settings control',
    'page callback' => 'bible_admin_list',
    'file' => 'bible.admin.inc',
    'access arguments' => array('administer bible'),
  );
  $items['admin/config/bible/list'] = array(
    'title' => 'List',
    'page callback' => 'bible_admin_list',
    'file' => 'bible.admin.inc',
    'access arguments' => array('administer bible'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/config/bible/import'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bible_admin_import'),
    'file' => 'bible.admin.inc',
    'access arguments' => array('administer bible'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  $items['admin/config/bible/webimport'] = array(
    'title' => 'Web Import',
    'page callback' => 'bible_admin_webimport',
    'file' => 'bible.admin.inc',
    'access arguments' => array('administer bible'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );
  $items['admin/config/bible/config'] = array(
    'title' => 'Config',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bible_admin_config'),
    'file' => 'bible.admin.inc',
    'access arguments' => array('administer bible'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );

  // Manage bible subtabs
  $items['admin/config/bible/select'] = array(
    'page callback' => 'bible_admin_select',
    'file' => 'bible.admin.inc',
    'access arguments' => array('administer bible'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/bible/delete'] = array(
    'description' => 'Delete selected bible.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bible_admin_delete'),
    'file' => 'bible.admin.inc',
    'access arguments' => array('administer bible'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/bible/snselect'] = array(
    'page callback' => 'bible_admin_snselect',
    'file' => 'bible.admin.inc',
    'access arguments' => array('administer bible'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/bible/sndelete'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bible_admin_sndelete'),
    'file' => 'bible.admin.inc',
    'access arguments' => array('administer bible'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/bible/snsselect'] = array(
    'page callback' => 'bible_admin_snsselect',
    'file' => 'bible.admin.inc',
    'access arguments' => array('administer bible'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/bible/maintain'] = array(
    'page callback' => 'bible_admin_maintain',
    'file' => 'bible.admin.inc',
    'access arguments' => array('administer bible'),
    'type' => MENU_CALLBACK,
  );

  // Normal Functions. ==========================================================
  $items['bible'] = array(
    'title' => 'Bible',
    'page callback' => 'bible_all',
    'file' => 'bible.pages.inc',
    'access arguments' => array('access bible content'),
    'type' => MENU_CALLBACK,
  );
  $items['bible/multiread'] = array(
    'title' => 'Bible Multi-Read',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bible_multiread'),
    'access arguments' => array('access bible content'),
    'type' => MENU_CALLBACK,
  );
  $items['bible/sn'] = array(
    'title' => 'Bible Strong Number',
    'page callback' => 'bible_sn',
    'access arguments' => array('access bible content'),
    'type' => MENU_CALLBACK,
  );
  $items['bible/snsearch'] = array(
    'title' => 'Bible Strong Number Search',
    'page callback' => 'bible_sn_search',
    'access arguments' => array('access bible content'),
    'type' => MENU_CALLBACK,
  );
  $items['bible/snajax'] = array(
    'page callback' => 'bible_snajax',
    'access arguments' => array('access bible content'),
    'type' => MENU_CALLBACK,
  );
  $items['bible/ajax/vcontent'] = array(
    'page callback' => 'bible_ajax_vcontent',
    'access arguments' => array('access bible content'),
    'type' => MENU_CALLBACK,
  );
  $items['bible/search'] = array(
    'title' => 'Bible Search',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bible_search_form'),
    'access arguments' => array('access bible content'),
    'type' => MENU_CALLBACK,
  );
  $items['bible/search/kw'] = array(
    'title' => 'Bible Search',
    'page callback' => 'bible_search_keyword',
    'access arguments' => array('access bible content'),
    'type' => MENU_CALLBACK,
  );

  // Mark the verse set.
  $items['bible/vset'] = array(
    'title' => 'Bible Verse Set',
    'page callback' => 'bible_verseset',
    'access arguments' => array('access bible content'),
    'type' => MENU_CALLBACK,
  );
  $items['bible/vset/list'] = array(
    'title' => 'My Bible Verse Set',
    'page callback' => 'bible_verseset_list',
    'access arguments' => array('access bible content'),
    'type' => MENU_CALLBACK,
  );
  $items['bible/vset/ajax'] = array(
    'page callback' => 'bible_verseset_ajax',
    'access arguments' => array('access bible content'),
    'type' => MENU_CALLBACK,
  );

  // Bible Note
  $items['bible/note'] = array (
  	'title' => 'Bible Note',
    'page callback' => 'bible_note',
    'access arguments' => array('access bible content'),
    'type' => MENU_CALLBACK,
  );
  $items['bible/note/add'] = array (
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bible_note_addform'),
    'access arguments' => array('access bible content'),
    'type' => MENU_CALLBACK,
  );
  $items['bible/note/edit'] = array (
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bible_note_addform'),
    'access arguments' => array('access bible content'),
    'type' => MENU_CALLBACK,
  );
  $items['bible/note/delete'] = array (
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bible_note_delete'),
    'access arguments' => array('access bible content'),
    'type' => MENU_CALLBACK,
  );
  $items['bible/note/addlines'] = array (
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bible_note_addlinesform'),
    'access arguments' => array('access bible content'),
    'type' => MENU_CALLBACK,
  );
  $items['bible/note/export'] = array (
    'page callback' => 'bible_note_export',
    'access arguments' => array('access bible content'),
    'type' => MENU_CALLBACK,
  );
  $items['bible/note/ajax'] = array (
    'page callback' => 'bible_note_ajax',
    'access arguments' => array('access bible content'),
    'type' => MENU_CALLBACK,
  );

  $items['bible/refverse'] = array (
    'page callback' => 'bible_refverse',
    'access arguments' => array('access bible content'),
    'type' => MENU_CALLBACK,
  );

  $items['user/%/bible'] = array(
    'title' => 'My Verses',
    'page callback' => 'bible_verseset_list',
    'access callback' => 'bible_user_access',
    'access arguments' => array('access bible content'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function bible_theme() {
  return array(
    'bible_multiread' => array(
      'render element' => 'form',
    ),
    'bible_breadcrumb' => array(
      'variables' => array('bibles' => array(), 'book' => null, 'chapter' => null),
    ),
    'bible_chapter' => array(
      'variables' => array('bibles' => array(), 'book' => null, 'chapter' => null, 'chapter_data' => null, 'versemask' => null),
    ),
    'bible_chapter_data' => array(
      'variables' => array('book' => null, 'chapter' => null),
    ),
    'bible_select_book' => array(
      'variables' => array('bibles' => array(), 'bible_data' => null),
    ),
    'bible_select_chapter' => array(
      'variables' => array('bibles' => array(), 'book' => null, 'book_data' => null),
    ),
    'bible_links' => array(
      'variables' => array('bibles' => array(), 'bible_count' => 1),
    ),
    'bible_daily_proverb' => array(
      'variables' => array('bid' => null, 'chapter' => null, 'opt' => 'verse'),
    ),
    'bible_golden_verse' => array(
      'variables' => array('versearray' => array()),
    ),
    'bible_quotes' => array(
      'variables' => array('quote' => null, 'author' => null),
    ),
  );
}

/**
 * Implements hook_user_categories().
 */
function bible_user_categories() {
  return array(
    array(
      'name' => 'bible',
      'title' => 'Bible',
      'weight' => 3,
    ),
  );
}

/**
 * Implements hook_user_presave().
 */
function bible_user_presave(&$edit, $account, $category) {
	$sqlcmd = "";
  if (!isset($edit['defaultbible']) || $edit['defaultbible'] == -1 || $edit['defaultbible'] == '') {
  	if (isset($account->uid)) {
	    $sqlcmd = sprintf("DELETE FROM {bible_userprofile} WHERE uid=%s AND item='bibleselect'", $account->uid);
	  }
  }
  else {
    $pobj = _bible_get_userprofile2($account->uid, "bibleselect", "");
    if ($pobj != null) {
      $sqlcmd = sprintf("UPDATE {bible_userprofile} SET data=%s WHERE uid=%s AND item='bibleselect'", $edit['defaultbible'], $account->uid);
    }
    else {
      $sqlcmd = sprintf("INSERT INTO {bible_userprofile} (uid, item, data) VALUES (%s, 'bibleselect', '%s')", $account->uid, $edit['defaultbible']);
    }
  }
  if ($sqlcmd!="") db_query($sqlcmd);
}

/**
 * Implements hook_user_view().
 */
function bible_user_view($user, $view_mode, $langcode) {
  $user->content['bible'] = array(
    '#type' => 'user_profile_category',
    '#title' => t('Bible'),
  );
  $user->content['bible']['vset'] = array(
    '#type' => 'user_profile_item',
    '#title' => t('Bible'),
    '#markup' => l(t('My Verses'), "bible/vset/list"),
  );
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function bible_form_user_profile_form_alter(&$form, &$form_state) {
  if ($form['#user_category'] == 'bible') {
    $account = $form['#user'];
    $form['bible'] = array(
      '#type' => 'fieldset',
      '#title' => t('Bible settings'),
      '#weight' => 10,
      '#collapsible' => TRUE,
    );
    $biblelist = _bible_get_bible_list();
    $biblelist[-1] = t('[By System Default]');
    ksort($biblelist);
    $form['bible']['defaultbible'] = array(
      '#type' => (count($biblelist) <= 5 ? 'radios' : 'select'),
      '#title' => t('Default Bible'),
      '#default_value' => _bible_get_select_bid(),
      '#options' => $biblelist,
      '#description' => t("Select user default bible."),
    );
  }
}

function bible_user_access($permission = 'access bible content', $account = NULL) {
  if ($account === NULL ) {
    global $user;
    $account = $user;
  }
  if (!$account->uid) { // Disallow anonymous access, regardless of permissions
    return FALSE;
  }
  if (!user_access($permission, $account)) {
    return FALSE;
  }
  return TRUE;
}

function theme_bible_breadcrumb($variables) {
  $bibles = $variables['bibles'];
  $book = $variables['book'];
  $chapter = $variables['chapter'];
  $default_bible = $bibles[0];
  $bibles_ = implode('_', $bibles);

  $page_content = "<div class='bible-breadcrumb'>";
   $bname = _bible_get_bible_name($default_bible);
  if (!empty($bibles_)) {
    $page_content .= l($bname, 'bible/'. $bibles_);
  }
  $cname = "";
  if (!empty($book)) {
    $cname = _bible_get_chapter_name($default_bible, $book);
    $page_content .= ' &raquo; '. l($cname, 'bible/'. $bibles_ .'/'. $book);
  }
  $chapname = "";
  if (!empty($chapter)) {
    $chapname = t('Chapter @chap', array('@chap' => $chapter));
    $page_content .= ' &raquo; '. l($chapname, 'bible/'. $bibles_ .'/'. $book .'/'. $chapter);
  }
  $page_content .= "</div>";
  $title = $cname. ' '. $chapname;
  if (sizeof($bibles)<=1) {
    $title .= ($cname == "" ? '' : ' - '). $bname;
  }
  if (trim($title) == "") $title = t('Bible');
  drupal_set_title($title);

  return $page_content;
}

function theme_bible_chapter($variables) {
  $bibles = $variables['bibles'];
  $book = $variables['book'];
  $chapter = $variables['chapter'];
  $chapter_data = $variables['chapter_data'];
  $versemask = $variables['versemask'];

  $ismulti = (sizeof($bibles) > 1);
  if ($ismulti) {
    for ($i = 0; $i < sizeof($bibles); $i++) {
      $bibles[$i] = _bible_get_bible_id_number($bibles[$i]);
      $biblename[$bibles[$i]] = _bible_get_bible_bsn($bibles[$i]);
    }
  }
  $page_content = "";

  if ($book !='' && $chapter != '') {
    // Generate 'prev chapter' and 'next chapter' links
    $pnchap = explode(':', _bible_get_prevnextchap($book .':'. $chapter, $bibles[0]));
    $bibles_ = implode('_', $bibles);
    $pnline1 = "&#171;" . l($pnchap[2] .' '. t('Chapter @chap', array('@chap' => $pnchap[1])), 'bible/'. $bibles_ .'/'. $pnchap[0] .'/'. $pnchap[1]);
    $pnline2 = l($pnchap[5] .' '. t('Chapter @chap', array('@chap' => $pnchap[4])), 'bible/'. $bibles_ .'/'. $pnchap[3] .'/'. $pnchap[4]) . "&#187;";
  }

  // Output chapter content
  $page_content .= '<dl class="bible-chapter-content">';
  $curverse = 0;
  $bbpos = 0;
  global $user;
  foreach ($chapter_data as $verse) {
    if ($verse->linemark == '*') {
      $page_content .= '<dt class="header">'. $verse->context .'&nbsp;</dt>';
    }
    else {
      $showchapternumber = variable_get('bible_config_showchapternumber', 0);
      $verse_ = ($showchapternumber ? $verse->chapter.":" : "") . $verse->verse;
      $page_content .= '<span';
      if ($curverse != $verse->verse) {
         $bls = $verse->book. ':'. $verse->chapter. ':'. $verse->verse;
        $mark = isset($versemask[$verse->verse]);
        // Check mark highlight
        if ($mark && in_array('highlight', $versemask[$verse->verse])) {
          $page_content .= ' class="bible-chapter-highlight"';
        }
        $page_content .= '><dt';
        $page_content .= '><a name="v'. $verse->verse .'"></a>';
        if ($user->uid > 0) {
          $page_content .= '<span class="chap-verse" vset="'. bible_verseset_status($bls). '">';
          $page_content .= '<verse para="'. $bibles_. '/'. $bls. '">'. $verse_. '</verse>';
          $page_content .= '<span class="vsetimg">';
        }
        else {
          $page_content .= $verse->verse;
        }
        // Check mark goldenverse
        if ($mark) {
          global $imagedir;
          for ($i=0; $i<6; $i++) {
            $vsetitem = ($i == 0 ? "goldenverse" : "verseset". $i);
            $icon = ($i == 0 ? "icon_star" : "vset_". $i). ".gif";
            if (isset($versemask[$verse->verse][$vsetitem]))
              $page_content .= '<image src='. $imagedir. $icon. ' />';
          }
        }
        if ($user->uid > 0) $page_content .= '</span></span>';
        $page_content .= '</dt';
        $curverse = $verse->verse;
        $bbpos = 0;
      }
      $page_content .= '><dd class="bible-context-'. ($bbpos % 7). '">';
      if ($ismulti) {
        $multireadbiblename = variable_get('bible_config_multireadbiblename', 0);
        if ($multireadbiblename) {
          $page_content .= '(<b>'. $biblename[$bibles[$bbpos]]. '</b>) ';
        }
      }
      $page_content .= _bible_sn_replace($verse->context);

      if (isset($versemask[$verse->verse]) && isset($versemask[$verse->verse]['refverse'])
      		&& $versemask[$verse->verse]['refverse'] != "") {
        $refverse = $versemask[$verse->verse]['refverse'];
        global $imagedir;
        $idname = "refverse_". $verse->verse;
			  $page_content .= "<a href=". url('bible/refverse/'). $bls . "/". $bibles_ .">";
	      $page_content .= "<span class='bls' id='". $idname. "' width='100px;'><img src='". $imagedir. "refverse.gif' /></span></a>";
        $page_content .= '<span class="popup" id="popup-'. $idname. '" style="position:absolute;visibility:hidden;';
        $page_content .= '">';
        $data = explode(';', $refverse);
        $rvline = "";
        foreach ($data as $bls) {
          if ($bls != "") {
            $rvline .= ($rvline != "" ? "<br />" : "");
            $bb = explode(':', $bls);
            $rvline .= '<span class="vref" id="'. $bls. '">';
            $rvline .= _bible_get_chapter_sname($bibles[0], $bb[0]). ':'. $bb[1]. ':'. $bb[2];
            $rvline .= '</span>';
          }
        }
        $page_content .= $rvline. '</span>';
      }

      if (isset($versemask[$verse->verse]) && isset($versemask[$verse->verse]['note'])
      		&& $versemask[$verse->verse]['note'] != "") {
		    $notes = $versemask[$verse->verse]['note'];
	    	$bnline = "";
	      foreach ($notes as $note) {
		      $bnline .= '<img class="note" id="note-'. $note[0]. '" src="'. $imagedir. 'note'.$note[1].'.gif" />';
		    }
	      $page_content .= $bnline;
	    }

      $page_content .= '</dd></span>';
      $bbpos++;
    }
  }
  $page_content .= '</dl>';

  if ($ismulti) {
    $page_content .= '<h3 class="title">'. t('Bible Color Mark') .'</h3>';
    $page_content .= '<ul class="bible-color-mark-list">';
    for ($i = 0; $i < sizeof($bibles); $i++) {
      $page_content .= '<li class="bible-context-'. $i. '">'. _bible_get_bible_name($bibles[$i]). '</li>';
    }
    $page_content .= "</ul>";
  }

  // Output prev/next chapter
  if ($pnline1 != '' && $pnline2 != '') {
    $page_content .= '<div class="bible-chapter-seek">';
    $page_content .= '<ul class="links clear-block">';
    $page_content .= '<li class="first bible-prev-chapter">'. $pnline1 .'</li>';
    $page_content .= '<li class="last bible-next-chapter">'. $pnline2 .'</li>';
    $page_content .= '</ul>';
    $page_content .= '</div>';
  }

  return $page_content;
}

function theme_bible_chapter_data($variables) {
  $book = $variables['book'];
  $chapter = $variables['chapter'];

  global $bibledataxml;
  if (_bible_get_bibledata($book, $chapter) == "") {
    return "";
  }
  global $imagedir;
  $page_content = '<div class="bible-chapter-data">';
  $page_content .= '<ul class="links inline">';
  $doc = new DOMDocument();
  $doc->loadXML($bibledataxml);
  $root = $doc->documentElement;
  $domXPath = new DOMXPath($doc);
  global $bdtypelist;
  foreach ($bdtypelist as $li => $name) {
    if ($li == "refverse") continue;
    if ($domXPath->query('//bibledata/'. $li)->length > 0) {
      $rows = array();
      $page_content .= '<fieldset><legend>'. $name .'</legend>';
      foreach ($domXPath->query('//bibledata/'. $li. '/data') as $keyDOM) {
        $did = $keyDOM->getAttribute('did');
        $datalink = "<img src='". $imagedir. $li. ".gif' />";
        $datalink .= "<a href='". BIBLE_DATA_DEFAULT_URL . "/fwd/". $did;
        $datalink .= "' target='bibledata'>". $keyDOM->textContent. "</a>";
        $resplink = "<a href='". BIBLE_DATA_DEFAULT_URL . "/rec/". $did;
        $resplink .= "' title='". t('Recommend this bible data.');
        $resplink .= "' target='bibledata'><img src='". $imagedir. "recommend.gif'></a>";
        $resplink .= "<a href='". BIBLE_DATA_DEFAULT_URL . "/opp/". $did;
        $resplink .= "' title='". t('Opposite this bible data.');
        $resplink .= "' target='bibledata'><img src='". $imagedir. "opposite.gif'></a>";
        $resplink .= "<a href='". BIBLE_DATA_DEFAULT_URL . "/linkbrk/". $did;
        $resplink .= "' title='". t('Report this data link borken.'). "'";
        $resplink .= "' target='bibledata'><img src='". $imagedir. "link-broken.gif'></a>";
        $resplink .= "<a href='". BIBLE_DATA_DEFAULT_URL . "/unfit/". $did;
        $resplink .= "' title='". t('Report this data content unfit.'). "'";
        $resplink .= "' target='bibledata'><img src='". $imagedir. "unfit.gif'></a>";
        $rows[] = array($datalink, array('data' => $resplink, 'align' => 'right'));
      }
      $page_content .= theme('table', array('rows' => $rows));
      $page_content .= '</fieldset>';
    }
  }
  $page_content .= '</ul></div>';
  return $page_content;
}

function theme_bible_select_chapter($variables) {
  $bibles_ = $variables['bibles'];
  $book = $variables['book'];
  $book_data = $variables['book_data'];
  $page_content = '<h3 class="title">'. t("Select Chapter").'</h3>';
  $page_content .= '<ul class="bible-chapter-list">';
  for ($i = 1; $i <= $book_data->chap; $i++) {
    $page_content .= '<li>'. l($i, 'bible/'. $bibles_ .'/'. $book .'/'. $i) .'</li>';
  }
  $page_content .= '</ul><br />';
  return $page_content;
}

function theme_bible_select_book($variables) {
  $bibles_ = $variables['bibles'];
  $book_data = $variables['book_data'];
  $lastbook = "";
  $booklines = "";
  foreach ($book_data as $qr) {
      if ($lastbook == 'MAL' || $lastbook == 'REV') $booklines .= '|';
      $booklines .= '<span class="book book-'.strtolower($qr->book).'">'. l($qr->fname, 'bible/'. $bibles_ . '/'. $qr->book).'</span>';
      $lastbook = $qr->book;
  }
  $bookline = explode('|', $booklines);

  $page_content = '<div class="bible-book-list">';
  $header = array();
  $rows = array();
  if (strlen($bookline[0])>0) $rows[] = array('data' => array(t('Old Testament'), $bookline[0]), 'class' => array('old-testament'));
  if (isset($bookline[1]) && strlen($bookline[1])>0) $rows[] = array('data' => array(t('New Testament'), $bookline[1]), 'class' => array('new-testament'));
  if (isset($bookline[2]) && strlen($bookline[2])>0) $rows[] = array('data' => array(t('Apocrypha'), $bookline[2]), 'class' => array('apocrypha'));
  $page_content .= theme('table', array('header' => $header, 'rows'=> $rows));
  $page_content .= '</div>';
  return $page_content;
}

function theme_bible_links($variables) {
  $bibles = $variables['bibles'];
  $bible_count = $variables['bible_count'];
  $page_content = '<hr /><div class="bible-links"><ul class="links inline">';
  $arg2 = check_plain(arg(2));
  $arg3 = check_plain(arg(3));
   if (sizeof($bibles) == 1) {
    if ($bible_count > 1) {
      $biblelist = _bible_get_bible_list();
      $href = "'". url('bible'). "/'+this.value";
      $hrefpara = (!empty($arg2) ? "/". $arg2 : "") . (!empty($arg3) ? "/". $arg3 : "");
      if ($hrefpara != '') $href .= "+'". $hrefpara. "';";
      global $imagedir;
      $page_content .= '<li class="bible-selector">';
      $page_content .= '<img src='. $imagedir. 'change.gif alt="'. t('Change Bible'). '" title="'. t('Change Bible'). '" />';
      $page_content .= '<select onchange="location.href='.$href.'" class="bible-select">';
      foreach ($biblelist as $bid => $bb) {
        $page_content .= '<option value="'.$bid.'"';
        if ($bid == arg(1)) $page_content .= ' selected="selected"';
        $page_content .= '>'. $bb. '</option>';
      }
      $page_content .= '</select></li>';
    }
    if (arg(1) != "") {
      $href = "'". url('bible'). "/". arg(1). "/'+this.value";
      $href .= (!empty($arg3) ? "+'/". $arg3. "';" : "");
      $page_content .= '<li class="book-selector">';
      $page_content .= '<select onchange="location.href='.$href.'" class="book-select">';
      $bid = _bible_get_bible_id_number(arg(1));
      $book_data = db_query("SELECT * FROM {bible_book_name} WHERE bid = ? ORDER BY bkid", array($bid));
      foreach ($book_data as $qr) {
        $page_content .= '<option value="'.$qr->book.'"';
        if (!empty($arg2) && $qr->book == $arg2) $page_content .= ' selected="selected"';
        $page_content .= '>'. $qr->fname. '</option>';
      }
      $page_content .= '</select></li>';

      if (arg(2) != "") {
        $href = "'". url('bible'). "/". arg(1). "/". $arg2. "/'+this.value";
        $bid = _bible_get_bible_id_number(arg(1));
        $book_data = db_query("SELECT * FROM {bible_book_name} WHERE bid = ? AND book = ?", array($bid, $arg2))->fetch();
        if (isset($book_data)) {
          $page_content .= '<li class="chap-selector">';
          $page_content .= '<select onchange="location.href='.$href.'" class="chap-select">';
          for ($i = 1; $i <= $book_data->chap; $i++) {
            $page_content .= '<option value="'.$i.'"';
            if ($i == $arg3) $page_content .= ' selected="selected"';
            $page_content .= '>'. $i. '</option>';
          }
          $page_content .= '</select></li>';
        }
      }
    }
    $page_content .= '<br/>';
  }

  $page_content .= '<li class="first bible-search">'. l(t('Search Keyword in Bible'), 'bible/search').'</li>';
  $page_content .= '<li>'. l(t('My Verses'), 'bible/vset/list').'</li>';
  if ($bible_count > 1) {
    if (sizeof($bibles) > 1)
      $page_content .= '<li id="bible-plain-read">'. l(t('Bible Plain-Read'), 'bible') .'</li>';
    else
      $page_content .= '<li class="last bible-multi-read">'. l(t('Bible Multi-Read'), 'bible/multiread') .'</li>';
  }
  else {
    $page_content .= '<li>'. l(t('Select Bible'), 'bible').'</li>';
  }
	if (variable_get('bible_config_showbiblenote', 0) == 1) {
	  $page_content .= '<li>'. l(t('My Notes'), 'bible/note').'</li>';
	}
  $page_content .= '</ul></div>';
  return $page_content;
}

function bible_multiread() {
  $form['bible'] = array('#tree' => TRUE);
  $options = array();
  $queryResult = db_query("SELECT * FROM {bible_list}");
  foreach ($queryResult as $bb) {
    if (variable_get('bible_select', 0) == 0) {
      variable_set('bible_select', $bb->bid);
    }
    $options[$bb->bid] = $bb->bsn;
    $form['bible'][$bb->bid] = array('#value' => $bb->bname);
    $enabled[] = $bb->bid;
    if ($bb->bid == variable_get('bible_select', 0)) {
      $isdefault = $bb->bid;
    }
  }
  $form['enabled'] = array(
    '#type' => 'checkboxes',
    '#options' => $options,
    '#attributes' => array('class' => array('mr_check')),
    '#default_value' => $enabled,
  );
  $form['bible_default'] = array(
    '#type' => 'radios',
    '#options' => $options,
    '#default_value' => $isdefault,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Bible Multi-Read')
  );
  $form['#theme'] = 'bible_multiread';
  return $form;
} // end bible_multiread

/**
 * Theme the bible_multiread form.
 */
function theme_bible_multiread($variables) {
  $form = $variables['form'];

  $rows = array();
  foreach ($form['bible'] as $key => $element) {
    // Do not take form control structures.
    if (is_array($element) && element_child($key)) {
      $rows[] = array(
        check_plain($key),
        $form['bible'][$key]['#value'],
        drupal_render($form['enabled'][$key]),
        drupal_render($form['bible_default'][$key]),
      );
    }
  }
  $header = array(
    array('data' => t('#')),
    array('data' => t('Bible name')),
    array('data' => '<input type="checkbox" class="selectall" checked />'.t('Selected')),
    array('data' => t('Base Bible')),
  );
  $output = theme('table', array('header' => $header, 'rows' => $rows));
  $output .= drupal_render_children($form);
  return $output;
}

function bible_multiread_submit($form, &$form_state) {
  $mb = $form_state['values']['bible_default'];
  foreach ($form_state['values']['enabled'] as $key => $element) {
    if (($element != 0 ) && ($key != $form_state['values']['bible_default'])) {
      $mb .= '_'. $key;
    }
  }
  $form_state['redirect'] = 'bible/'. $mb;
}

// SN Functions =========================================
function bible_sn() {
  $arg2 = check_plain(arg(2));
  $arg3 = check_plain(arg(3));
  if (!empty($arg3)) {
    $sn = db_query("SELECT * FROM {bible_strongnumber} WHERE snid = ? AND sn = ?", array($arg2, $arg3))->fetch();
    if ($sn == NULL) {
      $snid = db_query("SELECT snid FROM {bible_sn_list} LIMIT 1")->fetchField();
      if (!empty($snid) && ($snid != $arg2)) {
        drupal_goto('bible/sn/'. $snid .'/'. $arg3);
      }
      else {
        return t('Strong Number File not imported; Or Strong Number is mistype.');
      }
    }
    if (variable_get('bible_sn_select', 0) == 0) {
      variable_set('bible_sn_select', $arg2);
    }
    $sn_content = _bible_sn_replace($sn->content);
    $output = str_replace("\n", '<br />', t('Strong Number'). '[<b>'. $arg3. '</b>]<br />'. $sn_content);
    $snselect = variable_get('bible_snsearch_select', 0);
    if ($snselect <> 0) {
      $output .= '<hr />['. l("Search for all appearance", "bible/snsearch/". $snselect. "/". $arg3). ']';
    }
    return $output;
  }
  elseif (!empty($arg2)) {
    drupal_goto('bible/sn/'. variable_get('bible_sn_select', 0) .'/'. $arg2);
  }
}

function bible_snajax($sn) {
  $snid = variable_get('bible_sn_select', 0);
  $snlist = db_query("SELECT * FROM {bible_strongnumber} WHERE snid = ? AND sn = ?", array($snid, $sn));
  if ($snobj = $snlist->fetch()) {
    $sndata = $snobj->sn ."\r". str_replace("\n", '', $snobj->content);
    $sndata = str_replace("\r", '|', $sndata);
    if (strlen($sndata) > 300) {
      $sndata = substr($sndata, 0, 300) .'...';
    }
    print $sndata;
  }
  else {
    print '';
  }
  exit();
}

function bible_ajax_vcontent($bls) {
  $bid = _bible_get_select_bid();
  print _bible_get_verse_content2($bls, $bid, "@c", "[@v]@c");
  exit();
}

function _bible_sn_replace($context) {
    $replace = '<span class="biblesn">[<a href='. url('bible/sn/') .'\1\2>\1\2</a>]</span>';
    return preg_replace('/<([H|G])(\d{4})>/', $replace, $context);
}

// Search Functions =========================================================
function bible_sn_search() {
  $arg2 = check_plain(arg(2));
  $arg3 = check_plain(arg(3));
  if (!empty($arg3)) {
    /*TODO$result_set = pager_query("SELECT * FROM {bible_context} WHERE bid = '%s' AND context LIKE '%%<%s>%%' ORDER BY vsid",
      10, 0, NULL, $arg2, strtoupper($arg3));*/
    $result_set = db_select('bible_context')->fields('bible_context')
      ->extend('PagerDefault')
      ->condition('bid', $arg2)
      ->condition('context', '%<'. strtoupper($arg3) .'>%', 'LIKE')
      ->limit(10)
      ->orderBy('vsid')
      ->execute();
	$rows = array();
    foreach ($result_set as $verse){
      $bls = _bible_get_chapter_sname($arg2, $verse->book). ':'. $verse->chapter;
      $context = str_replace('<', '&lt;', $verse->context);
      $context = str_replace('&lt;'. $arg3. '>', '<b><font color=#ff0000>&lt;'. $arg3 .'></font></b>', $context);
      $rows[] = array(
        l($bls .':'. $verse->verse, 'bible/'. $arg2 .'/'. $verse->book .'/'. $verse->chapter),
        $context,
      );
    }
    $sqlcmd = sprintf("SELECT count(*) AS c FROM {bible_context} WHERE bid = %s AND UPPER(context) LIKE '%%%s%%' AND linemark <> '*'", $arg2, strtoupper($arg3));
    $countobj = db_query($sqlcmd)->fetch();
    $output = t('Search in Bible [@bible] for Strong Number [@kw], total found [@count] time(s).', array(
      '@bible' => _bible_get_bible_name($arg2),
      '@kw' => $arg3,
      '@count' => $countobj->c,
    ));
    $header = array();
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
    $output .= theme('pager');
    return $output;
  }
  elseif (!empty($arg2)) {
    drupal_goto('bible/sn/'. variable_get('bible_sn_select', 0) .'/'. $arg2);
  }
}

function bible_search_keyword() {
  $arg3 = trim(check_plain(arg(3)));
  $arg4 = check_plain(arg(4));
  if (!empty($arg4)) {
    $defaultBible = ($arg4=="*" ? "*" : _bible_get_bible_id_number($arg4));
  }
  else {
    $defaultBible = _bible_get_select_bid();
  }
  $regex_enabled = (check_plain(arg(5)) == 1);
  $blsrange = check_plain(arg(6));
  if (empty($arg3) && $blsrange == "") {
    return t('Please input Search Keyword.');
  }

  $rows = array();
  $header = array(
    array('data' => t('Verse'), 'field' => 'vsid'),
    array('data' => t('Context'), 'field' => 'context')
  );
  $wherestr = "";
  if ($regex_enabled) {
    $wherestr .= " AND context REGEXP '". $arg3 . "'";
    $kwlist = array($arg3);
  }
  else {
    $kwl = explode(' ', $arg3);
    foreach ($kwl as $kw) {
      $kw = trim($kw);
      if ($kw == "") continue;
      $wherestr .= " AND";
      if (substr($kw, 0, 1) == '-') {
        $wherestr .= " NOT";
        $kw = substr($kw, 1);
      }
      $wherestr .= " UPPER(context) LIKE '%". strtoupper($kw). "%'";
      $kwlist[] = $kw;
    }
  }
  $wherestr = " linemark <> '*'" .$wherestr;
  if ($defaultBible != "*") $wherestr .= " AND bid = '". $defaultBible. "'";
  if ($blsrange != "") {
    $bls = explode(':', $blsrange);
    if ($bls[0] != "*") {
      if ($bls[0] == "OT") $bls[0] = "GEN-MAL";
      if ($bls[0] == "NT") $bls[0] = "MAT-REV";
      $book = explode('-', $bls[0]);
      if (sizeof($book)==2) {
        if ($defaultBible == "*") {
          $bkobj = _bible_get_obj("SELECT bid FROM {bible_book_name} LIMIT 1,1");
          $bid = $bkobj->bid;
        }
        else
          $bid = $defaultBible;
        $sqlcmd = "SELECT book FROM {bible_book_name} WHERE bid=". $bid;
        $sqlcmd .= " AND bkid>=(SELECT bkid FROM {bible_book_name} WHERE book='". $book[0]. "' AND bid=". $bid. ")";
        $sqlcmd .= " AND bkid<=(SELECT bkid FROM {bible_book_name} WHERE book='". $book[1]. "' AND bid=". $bid. ")";
        $queryResult = db_query($sqlcmd)->fetch();
        $bkline = "";
        foreach ($queryResult as $books) {
           $bkline .= ",'". $books->book. "'";
        }
        if ($bkline<>"") $bkline = substr($bkline,1);
        $wherestr .= " AND book IN (". $bkline .")";
      }
      else
        $wherestr .= " AND book='". $book[0]. "'";
    }
    if (sizeof($bls)>1 && $bls[1] != "*") {
      $chap = explode('-', $bls[1]);
      if (sizeof($chap)==2) {
        if ($chap[0] == "") $chap[0] = 1;
        if ($chap[1] == "") $chap[1] = 200;
        $wherestr .= " AND (chapter>=". $chap[0]. " AND chapter<=". $chap[1] .")";
      } else
        $wherestr .= " AND chapter=". $chap[0];
    }
    if (sizeof($bls)>2 && $bls[2] != "*") {
      $verse = explode('-', $bls[2]);
      if (sizeof($verse)==2) {
        if ($verse[0] == "") $verse[0] = 1;
        if ($verse[1] == "") $verse[1] = 200;
        $wherestr .= " AND (verse>=". $verse[0]. " AND verse<=". $verse[1] .")";
      } else
        $wherestr .= " AND verse=". $verse[0];
    }
  }

  $bbname = ""; $lastbid = -1;
  $result_set = db_select('bible_context')->fields('bible_context')
    ->extend('PagerDefault')
    ->where($wherestr)
    ->limit(15)
    ->orderBy('vsid')
    ->execute();

  foreach ($result_set as $verse) {
    $bls = _bible_get_chapter_sname($verse->bid, $verse->book). ':'. $verse->chapter;
    if ($defaultBible == "*") {
      if ($lastbid != $verse->bid) $bbname = '('. _bible_get_bible_bsn($verse->bid) .')';
      $lastbid = $verse->bid;
    }
    $searchlink = url('bible/'. $verse->bid .'/'. $verse->book .'/'. $verse->chapter .'/'. $verse->verse);
    $searchlink .= '#v'. $verse->verse;
    $content = !empty($kwlist) ? preg_replace('/('. implode('|', $kwlist). ')/', '<span class="searchkw">\1</span>', $verse->context) : $verse->context;
    $rows[] = array(
      $bbname. "<a href='". $searchlink. "'>". $bls .':'. $verse->verse. "</a>", $content
    );
  }
  $countobj = db_query("SELECT count(*) AS c FROM {bible_context} WHERE ". $wherestr)->fetchField();
  if ($defaultBible == "*") {
    $output = t('Search in all Bibles for Keyword [@kw], total found [@count] time(s).', array(
      '@kw' => $arg3,
      '@count' => $countobj,
    ));
  }
  else {
    $output = t('Search in Bible [@bible] for Keyword [@kw], total found [@count] time(s).', array(
      '@bible' => _bible_get_bible_name($defaultBible),
      '@kw' => $arg3,
      '@count' => $countobj,
    ));
  }
  $output .= theme('table', array('header' => $header, 'rows' => $rows));
  $output .= theme('pager');
  // output links
  $output .= theme("bible_links", array(array(), 1));
  return $output;
}

function bible_search_form($form, &$form_state, $useframe = true, $isblock = false) {
  $form['search'] = array();
  if ($useframe) {
    $form['search']['#type'] = 'fieldset';
    $form['search']['#title'] = t('Bible Search');
  }
  $form['search']['keyword'] = array(
    '#type' => 'textfield',
    '#title' => t('Keyword to search'). '<a href="" title="'. t('Keyword to search in Bible context. Multi-keywords are available. Use - as a negative(NOT) search.'). '"> <b>(?)</b></a>',
    '#attributes' => array('class' => array('searchtext')),
    '#default_value' => '',
  );

  $form['search']['blsrange'] = array(
     '#type' => 'textfield',
     '#title' => t('Book:Chapter:Verse Search'). '<a href="" title="'. t('Search in book-range [colon] chapter-range [colon] verse-range. Use * for wildcard. Ex, GEN-EXO [colon] * [colon] 1-20'). '"> <b>(?)</b></a>',
     '#attributes' => array('class' => array('searchblsrange')),
     '#default_value' => ''
  );

  if (_bible_get_bible_count() > 1) {
    $form['search']['select'] = array(
      '#type' => 'select',
      '#title' => t('Bible to search'). '<a href="" title="'. t('Select Bible you want to search.'). '"> <b>(?)</b></a>',
      '#default_value' => _bible_get_select_bid(),
      '#options' => _bible_get_bible_list(),
      '#attributes' => array('class' => array('biblelist')),
    );
  }
  else {
    $form['search']['select'] = array(
			'#type' => 'hidden',
			'#value' => _bible_get_select_bid(),
    );
  }

  if (!$isblock || variable_get('bible_block_searchblockshowadvance', '0') == 1) {
    $form['search']['advance'] = array(
      '#type' => 'fieldset',
      '#title' => t('Advanced Search Options'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['search']['advance']['regex'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use regex?'),
      '#default_value' => 0,
       '#description' => t('Search using regular expressions.'),
     );
    $form['search']['advance']['allbibles'] = array(
      '#type'  => 'checkbox',
      '#title' => t('Use all bibles?'),
      '#default_value' => 0,
       '#description' => t('Search for keyword in all available bibles.'),
     );
  }
  $form['search']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#submit' => array('bible_search_form_submit'),
  );
  return $form;
}

function bible_search_form_submit($form, &$form_state) {
  $keyword = $form['search']['keyword']['#value'];
  $bible = $form['search']['select']['#value'];
  $regex = isset($form['search']['regex']) ? $form['search']['regex']['#value'] : "";
  $allbibles = isset($form['search']['allbibles']) ? $form['search']['allbibles']['#value'] : "";
  if ($allbibles == 1) $bible = "*";
  $blsrange = isset($form['search']['blsrange']) ? $form['search']['blsrange']['#value'] : "";
  $form_state['redirect'] = 'bible/search/kw/'. $keyword .'/'. $bible .'/'. $regex .'/'. $blsrange;
}

function bible_verseset_toggle($bls = '', $vset = 0) {
  global $user;
  if ($user->uid == 0) {
    return -1;
  }
  $vsetitem = ($vset <= 0 ? "vs_goldenverse" : "vs_verseset". $vset);
  $pobj = _bible_get_verseset_obj($vset, $bls);
  if ($pobj == null) {
    db_query("INSERT INTO {bible_userprofile} (uid, item, data) VALUES (?, ?, ?)", array($user->uid, $vsetitem, $bls));
  }
  else {
    db_query("DELETE FROM {bible_userprofile} WHERE pid=?", array($pobj->pid));
  }
  return 0;
}

function bible_verseset($bibles_ = 1, $bls = '', $vset = null, $more = null, $tag = null) {
  global $user;
  if ($user->uid == 0) {
    return;
  }
  $gotopath = "";
  $vcount = _bible_get_verse_count($bls, $bibles_);
  if ($vcount == 0) {
    drupal_set_message(t('[<b>@bls</b>] is not valid.', array('@bls' => $bls)), 'error');
    $gotopath = 'bible/'. $bibles_;
  }
  else if ($vcount > 1) {
    drupal_set_message(t('[<b>@bls</b>] is more than one verse.', array('@bls' => $bls)), 'error');
    $gotopath = 'bible/'. $bibles_;
  }
  else if (bible_verseset_toggle($bls, $vset) == -1) {
    drupal_set_message(t('Please mark verse after login.'));
    $gotopath = 'bible/'. $bibles_;
  }
  if ($tag != null) {
    bible_verseset_addtag($bls, $vset, $tag);
  }
  switch ($more)
  {
    case "list":
      drupal_goto('bible/vset/list/'.$vset);
      break;
    default:
      if ($gotopath != "") {
        $data = explode(':', $bls);
        drupal_goto('bible/'.$bibles_.'/'.$data[0].'/'.$data[1].'/'.$data[2]);
      }
      else {
        drupal_goto($gotopath);
      }
      break;
  }
}

function bible_verseset_list($vset = -1) {
  global $user, $imagedir;
  if ($user->uid == 0) {
    drupal_set_message(t('Please login.'));
    drupal_goto('bible');
  }

  $output = "";
  $header = array();
  $rows = array();
  $sqlcmd = sprintf("SELECT item,count(*) AS c FROM {bible_userprofile} WHERE uid=%s AND item='vs_goldenverse' OR item LIKE 'vs_verseset%%' GROUP BY item", $user->uid);
  $result_set = db_query($sqlcmd);
  if ($result_set->rowCount()>0) {
    foreach ($result_set as $vs){
      $vno = ($vs->item == "vs_goldenverse" ? 0 : substr($vs->item, strlen($vs->item)-1, 1));
      $vitem = ($vs->item == "vs_goldenverse" ? t('Golden Verse') : t('Verse Set'). ' '. $vno);
      $rows[] = array(
        $vitem, '['. l($vs->c, 'bible/vset/list/'. $vno). ']',
      );
    }
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
  }

  $rows = array();
  $header = array(
    array('data' => t('Verse')),
    array('data' => t('Context')),
    array('data' => t('Tag')),
    array('data' => t('Action'))
  );
  $defaultBible = _bible_get_select_bid();
  $vsetitem = ($vset <= 0 ? "goldenverse" : "verseset". $vset);
  $result_set = db_select('bible_userprofile', 'u')->fields('u', array('data'))
    ->extend('PagerDefault')
    ->condition('uid', $user->uid)
    ->condition('item', "vs_". $vsetitem)
    ->limit(15)
    ->execute();
  if ($result_set->rowCount()>0) {
    foreach ($result_set as $verse){
      $para = explode(';', $verse->data, 2);
      $data = explode(':', $para[0]);
      $bls = _bible_get_chapter_sname($defaultBible, $data[0]). ':'. $data[1];
      $verselink = url('bible/'. $defaultBible .'/'. $data[0] .'/'. $data[1] .'/'. $data[2]);
      $verselink .= '#v'. $data[2];
      $rows[] = array(
        "<a href='". $verselink. "'>". $bls .':'. $data[2]. "</a>",
        _bible_get_verse_content($verse->data),
        (sizeof($para)==1 ? "" : $para[1]),
        l('<image src='. $imagedir. 'delete.gif />', 'bible/vset/'. $defaultBible. '/'. $verse->data.'/'. $vset. '/list', array('html' => true)),
      );
    }
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
    $output .= theme('pager');
  }

  $addform = drupal_get_form('bible_verseset_addblsform', $vset);
  $output .= drupal_render($addform);

  // output links
  $output .= theme("bible_links");
  return $output;
}

function bible_verseset_addblsform($form, &$form_state, $vset) {
  $form['vset'] = array(
    '#type' => 'fieldset',
    '#title' => 'Add verse into this VerseSet',
  );
  $form['vset']['pre'] = array('#type' => 'hidden', '#suffix' => '<table><tr>');
  $form['vset']['vset'] = array('#type' => 'hidden', '#value' => $vset);
  $form['vset']['bls'] = array(
    '#type' => 'textfield',
    '#size' => 10,
    '#default_value' => '',
    '#prefix' => '<td>'. t('Verse'). '</td><td>',  '#suffix' => '</td>',
  );
  $form['vset']['tag'] = array(
    '#type' => 'textfield',
    '#size' => 60,
    '#default_value' => '',
    '#prefix' => '<td>'. t('Tag'). '</td><td>',  '#suffix' => '</td>',
  );
  $form['vset']['submit'] = array(
    '#type' => 'submit',
    '#title' => 'Command',
    '#value' => t('Add'),
    '#submit' => array('bible_verseset_addblsform_submit'),
    '#prefix' => '<td>',  '#suffix' => '</td>',
  );
  $form['vset']['suf'] = array('#type' => 'hidden', '#suffix' => '</tr></table>');
  return $form;
}

function bible_verseset_addblsform_submit($form, &$form_state) {
  $bls = $form['vset']['bls']['#value'];
  $tag = $form['vset']['tag']['#value'];
  $vset = $form['vset']['vset']['#value'];
  $defaultBible = _bible_get_select_bid();
  bible_verseset($defaultBible, $bls, $vset, "list", $tag);
}

function bible_verseset_status($bls) {
  global $user;
  if ($user->uid == 0) {
    return "000000";
  }
  $pobj = _bible_get_userprofile("vs_goldenverse", $bls);
  $status = ($pobj == null ? "0" : "1");
  for ($i=1; $i<6; $i++) {
    $pobj = _bible_get_userprofile("vs_verseset". $i, $bls);
    $status .= ($pobj == null ? "0" : "1");
  }
  return $status;
}

function bible_verseset_ajax($bls = '', $vset = 0) {
  bible_verseset_toggle($bls, $vset);
  print bible_verseset_status($bls);
  exit();
}

function bible_verseset_addtag($bls, $vset, $tag) {
  if ($tag == "") return;
  global $user;
  $pobj = _bible_get_verseset_obj($vset, $bls);
  if ($pobj == null) {
    db_query("INSERT INTO {bible_userprofile} (uid, item, data) VALUES (?, ?, ?)", array($user->uid, $vsetitem, $bls.';'.$tag));
  }
  else {
    db_query("UPDATE {bible_userprofile} SET data=? WHERE pid=?", array($bls.';'.$tag, $pobj->pid));
  }
}

function _bible_get_verseset_obj($vset, $bls) {
  global $user;
  $where = " AND (data='". $bls. "' OR data LIKE '". $bls .";%')";
  $vsetitem = ($vset <= 0 ? "vs_goldenverse" : "vs_verseset". $vset);
  return _bible_get_userprofile3($user->uid, $vsetitem, $where);
}

function bible_note() {
	global $user;
	global $imagedir;
	if ($user->uid == 0) {
		drupal_set_message(t('Please login.'));
		drupal_goto('bible');
	}

  $rows = array();
  $header = array(
    array('data' => t('Verse')),
    array('data' => t('Public')),
    array('data' => t('Context')),
    array('data' => t('Action')),
  );

  $result_set = db_select('bible_note')->fields('bible_note')
    ->extend('PagerDefault')
    ->condition('uid', $user->uid)
    ->limit(15)
    ->orderBy('bnid')
    ->execute();

  $default_bible = _bible_get_select_bid();
  foreach ($result_set as $note){
  	$pp = ($note->access == 0 ? 'public' : 'private');
    $rows[] = array(
    	_bible_get_blslink($default_bible, $note->bls),
    	"<image src='". $imagedir. "access". $pp. ".gif' title='". $pp. " usage' />",
    	$note->content,
    	l(t('Edit'), 'bible/note/edit/'. $note->bnid),
    );
  }

  $output = theme('table', array('header' => $header, 'rows' => $rows));
  $output .= theme('pager');

  // output links
  $output .= bible_note_links();
  $output .= theme("bible_links");
  return $output;
}

function bible_note_links() {
	$output = "<hr>";
	$output .= '['. l(t('Add Note'), 'bible/note/add') .']';
	$output .= '['. l(t('Add Multi-Notes'), 'bible/note/addlines') .']';
	$output .= '['. l(t('Export my notes'), 'bible/note/export') .']';
	return $output;
}

function bible_note_addform($form, &$form_state, $bnid = -1) {
	if ($bnid>=0) {
		$bnobj = _bible_get_note_obj($bnid);
	}
  $form['note'] = array(
    '#type' => 'fieldset',
	  '#title' => t('Add your note'),
  );
  $form['note']['bnid'] = array('#type' => 'hidden', '#value' => $bnid);
  $form['note']['bls'] = array(
    '#type' => 'textfield',
	  '#title' => t('Verse'),
    '#size' => 40,
    '#default_value' => ($bnid==-1 ? '' : $bnobj->bls),
  );
  $form['note']['title'] = array(
    '#type' => 'textfield',
	  '#title' => t('Title'),
    '#size' => 80,
    '#default_value' => ($bnid==-1 ? '' : $bnobj->title),
  );
  $form['note']['content'] = array(
		'#type' => 'textarea',
	  '#title' => t('Content'),
		'#default_value' => variable_get('block_bible_GV_verses', ""),
		'#rows' => 20,
		'#required' => TRUE,
    '#default_value' => ($bnid==-1 ? '' : $bnobj->content),
  );
  $form['note']['access'] = array(
    '#type' => 'radios',
    '#title' => t('These notes are for public usage or private usage?'),
    '#options' => array(0 => t('Public usage'), 1 => t('Private usage')),
    '#default_value' => ($bnid==-1 ? 0 : $bnobj->access),
  );
  $form['note']['source'] = array(
    '#type' => 'textfield',
	  '#title' => 'Source',
    '#size' => 80,
    '#default_value' => ($bnid==-1 ? '' : $bnobj->source),
  );
  $form['note']['submit'] = array(
    '#type' => 'submit',
    '#value' => ($bnid==-1 ? t('Add') : t('Edit')),
    '#submit' => array('bible_note_addform_submit'),
  );
  if ($bnid >=0) {
	  $form['note']['submit1'] = array(
	    '#type' => 'submit',
	    '#value' => t('Delete'),
	    '#submit' => array('bible_note_deleteform_submit'),
	  );
	}
	$form['note']['links'] = array(
    '#type' => 'item',
    '#value' => bible_note_links(). theme("bible_links"),
  );
  return $form;
}

function bible_note_addform_submit($form, &$form_state) {
	$bnid = $form['note']['bnid']['#value'];
	$bls = $form['note']['bls']['#value'];
	$title = $form['note']['title']['#value'];
	$content = $form['note']['content']['#value'];
	$access = $form['note']['access']['#value'];
	$source = $form['note']['source']['#value'];
	global $user;
	if ($bnid==-1) {
		_bible_note_add($user->uid, $access, $bls, $title, $content, $source);
	}
	else {
		$sqlcmd = sprintf("UPDATE {bible_note} SET access=%s, bls='%s', title='%s', content='%s', source='%s', modified=now() WHERE bnid=%s",
							$access, $bls, $title, $content, $source, $bnid);
		db_query($sqlcmd);
	}
	drupal_goto('bible/note');
}

function bible_note_deleteform_submit($form, &$form_state) {
	$bnid = $form['note']['bnid']['#value'];
  $form_state['redirect'] = 'bible/note/delete/'. $bnid;
}

function bible_note_delete($form, &$form_state, $bnid = -1) {
	$form = array();
  $form['noteid'] = array(
    '#type' => 'value',
    '#value' => $bnid,
  );
  return confirm_form($form,
    t('Are you sure you want to delete this note?'),
    'bible/note',
    t('This action cannot be undone.'),
    t('Delete'), t('Cancel'));
}

function bible_note_delete_submit($form, &$form_state) {
	$bnid = $form['noteid']['#value'];
  db_delete('bible_note')->condition('bnid', $bnid)->execute();
  $form_state['redirect'] = 'bible/note';
}

function bible_note_addlinesform($form, &$form_state) {
  $form['note'] = array(
    '#type' => 'fieldset',
	  '#title' => t('Add your notes one note per line.'),
  );
  $form['note']['content'] = array(
		'#type' => 'textarea',
		'#title' => t('Note content'),
		'#description' => t('Please following this format: BLS|note. Ex. GEN:1:1|God create the world.'),
		'#rows' => 20,
		'#required' => TRUE,
    '#default_value' => '',
  );
  $form['note']['title'] = array(
    '#type' => 'textfield',
	  '#title' => t('Title'),
    '#size' => 80,
    '#default_value' => '',
  );
  $form['note']['access'] = array(
    '#type' => 'radios',
    '#title' => t('These notes are for public usage or private usage?'),
    '#options' => array(0 => t('Public usage'), 1 => t('Private usage')),
    '#default_value' => 0,
  );
  $form['note']['source'] = array(
    '#type' => 'textfield',
	  '#title' => t('Source'),
    '#size' => 80,
    '#default_value' => '',
  );
  $form['note']['submit'] = array(
    '#type' => 'submit',
    '#title' => t('Command'),
    '#value' => t('Add'),
    '#submit' => array('bible_note_addlinesform_submit'),
  );
	$form['note']['links'] = array(
    '#type' => 'item',
    '#value' => bible_note_links(). theme("bible_links"),
  );
  return $form;
}

function bible_note_addlinesform_submit($form, &$form_state) {
	$content = $form['note']['content']['#value'];
	$access = $form['note']['access']['#value'];
	$title = $form['note']['title']['#value'];
	$source = $form['note']['source']['#value'];
	global $user;
	$line = explode("\r\n", $content);
	$addcount = 0;
	foreach ($line as $l) {
		if ($l == "") continue;
		$data = explode("|", $l);
		if ($data[0] == "") continue;
		$addcount += _bible_note_add($user->uid, $access, $data[0], $title, $data[1], $source);
	}
	drupal_set_message(t('Bible notes added:%count', array('%count' => $addcount)));
	drupal_goto('bible/note');
}

function bible_note_export() {
	global $user;

	$sqlcmd = sprintf("SELECT * FROM {bible_note} WHERE uid=%s ORDER BY bnid", $user->uid);
  $result_set = db_query($sqlcmd);
  $exportlines = "";
  foreach($result_set as $note) {
  	$line = $note->bls."|".$note->content;
  	if (strlen($line)>0) $exportlines .= $line."\r\n";
  }
  $http_filename = "mybiblenote.txt";
  header('Content-Type: text/plain; charset=utf-8');
  header('Content-Transfer-Encoding: 8bit');
  header("Content-Disposition: attachment; filename=$http_filename");
  print $exportlines;
  return;
}

function bible_note_ajax($bnid = '') {
  if ($bnobj = _bible_get_note_obj($bnid)) {
		print $bnobj->content;
	}
	else {
		print '';
	}
  exit();
}

function _bible_get_note_obj($bnid) {
	global $user;
	$sqlcmd = "SELECT * FROM {bible_note} WHERE (access=0 OR uid=". $user->uid. ") AND bnid=". $bnid;
	return _bible_get_obj($sqlcmd);
}

function _bible_get_note_obj_bls($bls) {
	global $user;
	$sqlcmd = "SELECT * FROM {bible_note} WHERE (access=0 OR uid=". $user->uid. ") AND bls='". $bls. "' ORDER BY bnid";
	$queryResult = db_query($sqlcmd);
	$notes = "";
	foreach ($queryResult as $bn) $notes = $bn->content."\r\n";
	return $notes;
}

function _bible_note_add($uid, $access, $bls, $title, $content, $source) {
	if ($bls == "" || strlen($bls)>11) return 0;
	$title = str_replace("'", "\'", $title);
	$content = str_replace("'", "\'", $content);
	$source = str_replace("'", "\'", $source);
	$sqlcmd = sprintf("SELECT * FROM {bible_note} WHERE uid=%s AND bls='%s' AND access=%s AND content='%s'", $uid, $bls, $access, $content);
	$bnobj = _bible_get_obj($sqlcmd);
	if ($bnobj == null) {
		$sqlcmd = sprintf("INSERT INTO {bible_note} (uid, access, bls, title, content, source, modified) VALUES (%s, %s, '%s', '%s', '%s', '%s', now())",
							$uid, $access, $bls, $title, $content, $source);
		db_query($sqlcmd);
		return 1;
	}
	else {
		return 0;
	}
}

function bible_refverse($bls = null, $bibles_ = null) {
	if ($bls == "" || strlen($bls)>11) {
		drupal_set_message(t("BLS for reference is wrong."), 'error');
		return;
	}
	$data = explode(':', $bls);
	$bibles = _bible_get_bibles_array($bibles_);
  if (sizeof($bibles) == 0 || $bibles == null) {
  	return t('Format invalid. Please check.');
  }
	global $bibledataxml;
	if (_bible_get_bibledata($data[0], $data[1]) == "") {
		return "";
  }
  $header = array();
  $output = t('Original Verse:'). "<br/>";
  $rows[] = array(_bible_get_blslink2($bibles_, $bls), _bible_get_verse_content($bls));
	$output .= theme('table', array('header' => $header, 'rows' => $rows));

  $output .= "<hr/>". t('Reference Verses:'). "<br/>";
  $rows = array();
  $doc = new DOMDocument();
  $doc->loadXML($bibledataxml);
  $domXPath = new DOMXPath($doc);
  foreach ($domXPath->query('//bibledata/refverse/data') as $keyDOM) {
    if ($bls == $keyDOM->getAttribute('bls')) {
	    $refurl = $keyDOM->getAttribute('refurl');
		  $rows[] = array(_bible_get_blslink2($bibles_, $refurl), _bible_get_verse_content($refurl));
	  }
  }
	$output .= theme('table', array('header' => $header, 'rows' => $rows));
  return $output;
}

/**
 * Implements hook_filter_format_insert().
 */
function bible_filter_format_insert($format) {
  drupal_set_message(t('BLS filter inserted.'));
}

/**
 * Implements hook_filter_format_update().
 */
function bible_filter_format_update($format) {
  drupal_set_message(t('BLS filter updated.'));
}

/**
 * Implements hook_filter_format_disable().
 */
function bible_filter_format_disable($format) {
  drupal_set_message(t('BLS filter disabled.'));
}

/**
 * Implements hook_filter_info().
 */
function bible_filter_info() {
  $filters['filter_bible'] = array(
    'title' => 'BLS filter',
    'description' => 'This filter enables content that has a BLS reference.',
    'process callback' => '_bible_blsanchorize',
  );
  return $filters;
}

function _bible_blsanchorize($text = '', $filter, $format, $langcode, $cache, $cache_id) {
  // Skip everything within a hyperlink, a <pre> block, a <code> block, or a tag.
  $anchor_regex = '<a\s+href.*?<\/a>';
  $pre_regex = '<pre>.*<\/pre>';
  $code_regex = '<code>.*<\/code>';
  $tag_regex = '<(?:[^<>\s]*)(?:\s[^<>]*){0,1}>';
  $split_regex = "/((?:$anchor_regex)|(?:$pre_regex)|(?:$code_regex)|(?:$tag_regex))/i";
  $parsed_text = preg_split($split_regex, $text, -1, PREG_SPLIT_DELIM_CAPTURE);
  $linked_text = '';
  while (list($key,$value) = each($parsed_text)) {
    if (preg_match($split_regex, $value)) {
      $linked_text .= $value; // If it is an HTML element or within a link, just leave it as is.
    }
    else {
      $linked_text .= _bible_blsaddLink($value);
    }
  }
  return $linked_text;
}

function _bible_blsaddLink($text = '') {
  global $book_list, $book_namelist;
  $book_regex = $book_list .'|'. str_replace(';', '|', $book_namelist);
  $pattern_regex = '/('. $book_regex .')[:. ]+(\d{1,3}):(\d{1,3}(?:-\d{1,3})?)([#\^]\w+)?([\&]\w+)?(\s?)/e';
  $replacement_regex = '_bible_blsdivhtml("\1", "\2", "\3", "\4", "\5", "\6")';
  $text = preg_replace($pattern_regex, $replacement_regex, $text);
  return $text;
}

function _bible_blsdivhtml($book, $chap, $verse, $para, $func, $tail) {
	if ($para != "") {
		$paracmd = substr($para, 0, 1);
		$bid = _bible_get_bible_id(trim(substr($para, 1)));
		if ($bid == "") {
			$bid = _bible_get_select_bid();
		}
	}
	else {
		$bid = _bible_get_select_bid();
	}

  if ($para == "" || $paracmd == "^") {
    $usec = explode(' ', microtime());
    $timeid = explode('.', $usec[0]);
    $idname = str_replace(' ', '_', $book) .'_'. $chap .'_'. $verse . '_'. $timeid[1];
    if ($bid == "") $bid = _bible_get_select_bid();

    global $book_list, $book_namelist;
    if (preg_match('/'.$book_list.'/', $book)) {
      // For Reguler BLS, Ex: GEN:1:1
      $bls = _bible_get_chapter_sname($bid, $book). ':'. $chap. ':'. $verse;
    }
    else {
      // For other naming, Ex: Gen.1:2
      $bls = $book. ':'. $chap. ':'. $verse;
      $patt_array = explode(';', '/'. str_replace(';', '%/A;/', str_replace('|', '%|', $book_namelist)). '/');
      $book_array = explode('|', $book_list);
      $book = preg_replace($patt_array, $book_array, $book.'%');
    }
    $html = '<span class="bls" id="'. $idname. '"';
    $html .= '>'. $bls;
    $html .= '</span>';
    $blspopupstyle = variable_get('bible_bls_popup_style', BIBLE_BLS_POPUP_STYLE);
    if ($blspopupstyle == '') {
      $blspopupstyle = BIBLE_BLS_POPUP_STYLE;
      variable_set('bible_bls_popup_style', $blspopupstyle);
    }

    $html .= '<span class="popup" id="popup-'. $idname .'" style="position:absolute;';
    $html .= 'visibility:hidden;z-index:999;overflow-x:hidden;overflow-y:auto;'.$blspopupstyle.'"';
    $pattern_regex = '/(\[\d{1,3}\])/';
    $replacement_regex = '<font color="green">\1</font>';
    $html .= '>'. preg_replace($pattern_regex, $replacement_regex, _bible_get_verse_content2($book .':'. $chap .':'. $verse, $bid));
    if (variable_get('bible_bls_popup_morelink', '0') == 1) {
      $morelink = _bible_morelink($bid, $book, $chap, $verse);
      $html .= '<br /><a href="'. $morelink. '">'. t("See All..."). '</a>';
    }
    $html .= '</span>';
  }
  else {
    if ($paracmd == '#') {
      $bls = $book. ':'. $chap. ':'. $verse;
      $html = _bible_get_verse_content2($bls, $bid);
    }
  }

	// For example  GEN:1:1#KJV&N
	$func_text = "";
	if ($func != "") {
		$bls = $book. ':'. $chap. ':'. $verse;
		switch ($func) {
			case "&N":
				$func_text = _bible_get_note_obj_bls($bls);
				break;
			default:
				$func_text = $func;
				break;
		}
	}
	return _bible_sn_replace($html). $func_text .$tail;
}

// Common Functions
function _bible_get_bible_count() {
  return db_query("SELECT COUNT(bid) FROM {bible_list}")->fetchField();
}

function _bible_get_bible_list($showlang = 0) {
  $sqlcmd = "SELECT * FROM {bible_list}";
  $biblelist = array();
  switch (variable_get('block_config_bibielistorder', 0)) {
    case 1:
      $sqlcmd .= " ORDER BY bname";
	  break;
  }
  $queryResult = db_query($sqlcmd);
  foreach ($queryResult as $bb) {
    $biblelist[$bb->bid] = $bb->bname . ($showlang == 1 ? ' ['. $bb->lang. ']' : '');
  }
  return $biblelist;
}

function _bible_get_obj($sqlcmd) {
  return db_query($sqlcmd)->fetch();
}

function _bible_get_bible($bid) {
  $bid = _bible_get_bible_id_number($bid);
  return _bible_get_obj(sprintf("SELECT * FROM {bible_list} WHERE bid = '%s'", $bid));
}

function _bible_get_bible2($bsn, $lang) {
  return _bible_get_obj(sprintf("SELECT * FROM {bible_list} WHERE bsn = '%s' AND lang = '%s'", $bsn, $lang));
}

function _bible_get_bible_name($bid) {
  $bb = _bible_get_bible($bid);
  return ($bb == null ? '' : $bb->bname);
}

function _bible_get_bible_bsn($bid) {
  $bb = _bible_get_bible($bid);
  return ($bb == null ? '' : $bb->bsn);
}

function _bible_get_bible_id($bsn) {
  $bb = _bible_get_obj(sprintf("SELECT * FROM {bible_list} WHERE bsn = '%s'", $bsn));
  return ($bb == null ? '' : $bb->bid);
}

function _bible_get_bible_id2($bsn, $lang) {
  $bb = _bible_get_bible2($bsn, $lang);
  return ($bb == null ? '' : $bb->bid);
}

function _bible_get_bible_id_number($bid) {
  return (!is_numeric($bid) ? _bible_get_bible_id($bid) : $bid);
}

function _bible_get_chapter_name($bid, $book) {
  $bid = _bible_get_bible_id_number($bid);
  $book = _bible_get_obj(sprintf("SELECT * FROM {bible_book_name} WHERE bid = '%s' AND book = '%s'", $bid, $book));
  return ($book == null ? '' : $book->fname);
}

function _bible_get_chapter_sname($bid, $book) {
  $bid = _bible_get_bible_id_number($bid);
  $book = _bible_get_obj(sprintf("SELECT * FROM {bible_book_name} WHERE bid = '%s' AND book = '%s'", $bid, $book));
  return ($book == null ? '' : $book->sname);
}

function _bible_get_sn_name($snid) {
  $sn = _bible_get_obj(sprintf("SELECT * FROM {bible_sn_list} WHERE snid = '%s'", $snid));
  return ($sn == null ? '' : $sn->snname);
}

function _bible_get_bls_name($bls, $bid = -1, $langcode = NULL) {
  if ($bid == -1) $bid = _bible_get_select_bid();
  $data = explode(':', $bls);
  $bookname = _bible_get_chapter_name($bid, $data[0]);
  switch (sizeof($data)) {
    case 0:
      return t('N/A');
    case 1:
      return $bookname;
    case 2:
      return t('@bookname Chapter @chap', array('@bookname' => $bookname, '@chap' => $data[1]), array('langcode' => $langcode));
    default:
      return t('@bookname Chapter @chap Verse @verse', array('@bookname' => $bookname, '@chap' => $data[1], '@verse' => $data[2]), array('langcode' => $langcode));
  }
}

function _bible_get_from_book_alias($book) {
  global $book_list, $book_namelist;
  $patt_array = explode(';', '/'. str_replace(';', '%/Ai;/', str_replace('|', '%|', $book_namelist)). '/');
  $book_array = explode('|', $book_list);
  $ret = preg_replace($patt_array, $book_array, $book.'%');
  return ($ret == "" ? $book : str_replace('%', '', $ret));
}

/**
 * Returns a bible chapter.
 *
 * @param $bid
 *   STRING integer identifying the default bible translation.
 * @param $book
 *   STRING identifying the book short name. Example: 'GEN'.
 * @param $chapter
 *   STRING integer identifying the chapter.
 * @return
 *   ARRAY containing chapter verses.
 */
function _bible_get_chapter($bid, $book, $chapter) {
  // Check variables
  if($bid != '' && $book != '' && $chapter != ''){
    $queryResult = db_query("SELECT b.vsid, b.bid, b.book, b.chapter, b.context " .
      "FROM {bible_context} b " .
      "WHERE b.bid = :bid AND b.book = :book AND b.chapter = :chapter AND linemark = :linemark " .
      "ORDER BY b.vsid", array(
      ':bid' => $bid,
      ':book' => $book,
      ':chapter' => $chapter,
      ':linemark' => '',
    ));
    $chapter_context = array();
    foreach ($queryResult as $co) {
      $chapter_context[] = $co->context;
    }
    return $chapter_context;
  }
  return '';
}

function _bible_get_userprofile($item, $data) {
  global $user;
  return _bible_get_userprofile2($user->uid, $item, $data);
}

function _bible_get_userprofile2($uid, $item, $data) {
  return _bible_get_userprofile3($uid, $item, ($data != "" ? " AND data='". $data. "'" : ""));
}

function _bible_get_userprofile3($uid, $item, $where) {
  $sqlcmd = sprintf("SELECT * FROM {bible_userprofile} WHERE uid=%s AND item='%s'", $uid, $item);
  if ($where != "") {
    $sqlcmd .= $where;
  }
  return _bible_get_obj($sqlcmd);
}

function _bible_get_user_browser_lang() {
	if (isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {
	  $lang = explode(',', $_SERVER['HTTP_ACCEPT_LANGUAGE']);
	  return $lang[0];
	}
	else {
		return "";
	}
}

function _bible_get_select_bid() {
  // Priority: UserSet, BibleLang+SystemLocale, BibleLang+Browser, System Default
  // UserSet
  $pobj = _bible_get_userprofile("bibleselect", "");
  if ($pobj != null) {
    return $pobj->data;
  }
  $pobj = _bible_get_userprofile2(-1, "bibleselect", "");
  if ($pobj != null) {
    return $pobj->data;
  }
  $biblelist = _bible_get_bible_list();
  if ($biblelist != null) {
	  // BibleLang_SystemLocale
		global $language;
    foreach ($biblelist as $bid => $bb) {
      if (variable_get('bibledata_language_'. $bid, '*') == $language->language) {
        return $bid;
      }
    }
	  // BibleLang_Browser
    $userbrowserlang = _bible_get_user_browser_lang();
    foreach ($biblelist as $bid => $bb) {
      if (variable_get('bibledata_language_'. $bid, '*') == $userbrowserlang) {
        return $bid;
      }
    }
  }
  else {
    drupal_set_message(t("You haven't imported any bibles to your site."), 'error');
    if (user_access('administer bible')) {
      drupal_set_message(t('Please import bibles from '). l(t('here'), 'admin/config/bible/webimport'). '.');
    }
  }
  // System Default
  return variable_get('bible_select', 1);
}

function _bible_get_verse_content($bls) {
  $bid = _bible_get_select_bid();
  return _bible_get_verse_content2($bls, $bid);
}

function _bible_get_verse_content2($bls, $bid,
                                    $sinpatt = "@c",
                                    $mulpatt = " <span class='verse'>[@v]</span> @c\n") {
  $data = explode(':', $bls);
  $singleverse = (strpos($data[2], '-') === FALSE);
  if ($singleverse) {
    $queryResult = db_query("SELECT * FROM {bible_context} WHERE bid = ? AND book = ? AND chapter = ? AND linemark = '' AND verse = ?",
      array($bid, $data[0], $data[1], $data[2]));
  }
  else {
    $vv = explode('-', $data[2]);
    $queryResult = db_query("SELECT * FROM {bible_context} WHERE bid = ? AND book = ? AND chapter = ? AND linemark = '' AND verse >= ? AND verse <= ? ORDER BY verse",
      array($bid, $data[0], $data[1], $vv[0], $vv[1]));
  }
  $verse = '';
  foreach ($queryResult as $qr) {
    $verse .= strtr(($singleverse ? $sinpatt : $mulpatt), array("@v" => $qr->verse, "@c" => $qr->context));
  }
  return $verse;
}

function _bible_get_verse_count($bls, $bid) {
  $data = explode(':', $bls);
  $singleverse = (strpos($data[2], '-') === FALSE);
  if ($singleverse) {
    $queryResult = db_query("SELECT COUNT(*) AS c FROM {bible_context} WHERE bid = ? AND book = ? AND chapter = ? AND linemark = '' AND verse = ?",
      array($bid, $data[0], $data[1], $data[2]));
  }
  else {
    $vv = explode('-', $data[2]);
    $queryResult = db_query("SELECT COUNT(*) AS c FROM {bible_context} WHERE bid = ? AND book = ? AND chapter = ? AND linemark = '' AND verse >= ? AND verse <= ? ORDER BY verse",
      array($bid, $data[0], $data[1], $vv[0], $vv[1]));
  }
  return $queryResult->fetchField();
}

function _bible_get_prevnextchap($bls, $bid = -1) {
  if ($bid == -1) {
    $bid = _bible_get_select_bid();
  }
  else {
    $bid = _bible_get_bible_id_number($bid);
  }
  $data = explode(':', $bls);
  $queryResult = db_query("SELECT * FROM {bible_book_name} WHERE bid = :bid AND book = :book", array(':bid' => $bid, ':book' => $data[0]));
  $book = $queryResult->fetch();
  if ($book == null) {
    return '';
  }
  // Find Prev Chapter.
  if ($data[1] > 1) {
    $prevchap = $data[0] . ':' . ($data[1] - 1) . ':' . $book->fname;
  }
  else {
    if ($book->bkid == 1) {
      $bkid = 66;
    }
    else {
      $bkid = ($book->bkid) -1;
    }
    $prevbk = db_query("SELECT * FROM {bible_book_name} WHERE bid = :bid AND bkid = :bkid", array(':bid' => $bid, ':bkid' => $bkid))->fetch();
    $prevchap = $prevbk->book . ':' . $prevbk->chap . ':' . $prevbk->fname;
  }
  // Find Next Chapter.
  if (($book->chap) > $data[1]) {
    $nextchap = $data[0] . ':' . ($data[1] + 1) . ':' . $book->fname;
  }
  else {
    if ($book->bkid == 66) {
      $bkid = 1;
    }
    else {
      $bkid = ($book->bkid) + 1;
    }
    $nextbk = db_query("SELECT * FROM {bible_book_name} WHERE bid = :bid AND bkid = :bkid", array(':bid' => $bid, ':bkid' => $bkid))->fetch();
    $nextchap = $nextbk->book . ':1:' . $nextbk->fname;
  }
  return $prevchap . ':' . $nextchap;
}

/**
 * Returns a Daily Proverb
 *
 * Returns a Daily Proverb from the database based on the current day of the month.
 *
 * @param $bid
 *   A string integer identifying the default bible translation.
 * @return
 *   ARRAY containing chapter verses.
 */
function _bible_get_daily_proverb($bid = 1) {
  // Initialize variable
  $page_content = '';
  // Set book to Proverbs 'PRO'
  $book = 'PRO';
  // Set chapter the current day of the month
  global $user;
  $chapter = date("j", time()+ ($user->uid>0 ? $user->timezone : 0));
  // Call get chapter method
  $page_content = _bible_get_chapter($bid, $book, $chapter);
  // Return Proverb chapter
  return $page_content;
}

/**
 * Grabs a random verse
 *
 * Grabs a random verse from the database based on the default translation.
 *
 * @param $bid
 *   STRING integer identifying the default bible translation.
 * @return
 *   ARRAY containing verse information.
 */
function _bible_get_random_verse($bid = 1) {
  // Initialize variables
  $verse_array = '';
  $count = '';
  $min = '';
  $max = '';
  $rand = '';
  // Determine verse limits based on translation
  $queryResults = db_query("SELECT max(b.vsid) as vmax, min(b.vsid) as vmin FROM {bible_context} b WHERE b.bid = :bid ORDER BY b.vsid", array(':bid' => $bid));
  if ($vl = $queryResults->fetch()) {
    $max = $vl->vmax;
    $min = $vl->vmin;
    $rand = rand($min, $max);
    // Grab random verse from db using translation and random verse id
    $verseResults = db_query("SELECT b.vsid, b.bid, b.book, b.chapter, b.verse, b.context FROM {bible_context} b WHERE b.vsid = :vsid AND b.bid = :bid", array(':vsid' => $rand, ':bid' => $bid));
    if ($vo = $verseResults->fetch()) {
      $verse_array = array('bid' => $vo->bid, 'book' => $vo->book, 'chapter' => $vo->chapter, 'verse' => $vo->verse, 'context' => $vo->context);
    }
  }
  // Return verse array
  return $verse_array;
}

function _bible_get_random_myverse($bid = 1, $vset = -1){
  global $user;
  $wherestr = sprintf("uid=%s", $user->uid);
  if ($vset >=0) {
    $vsetitem = ($vset <= 0 ? "goldenverse" : "verseset". $vset);
    $wherestr .= " AND item='vs_". $vsetitem. "'";
  }
  else {
    $wherestr .= " AND item LIKE 'vs_%'";
  }
  $sqlcmd = "SELECT COUNT(*) AS c FROM {bible_userprofile} WHERE ". $wherestr;
  $offset = db_query($sqlcmd)->fetch();
  if ($offset->c == 0) return array();
  $rnd = mt_rand(0, $offset->c - 1);
  $sqlcmd = "SELECT data FROM {bible_userprofile} WHERE ". $wherestr. " LIMIT ". $rnd. ",1";
  $verse = db_query($sqlcmd);
  if ($verse->rowCount() == 0) return array();
  $updata = preg_split('/([A-Z]{2,3}:\d{1,3}:\d{1,3});?(.*)?/', $verse->fetch()->data, -1, PREG_SPLIT_DELIM_CAPTURE);
  return _bible_get_bls_versearray($updata[1], $bid);
}

function _bible_get_bls_versearray($bls, $bid = -1){
  if ($bid == -1) {
    $bid = _bible_get_select_bid();
  }
  $data = explode(':', $bls);
  $verse_array = array(  'bid' => $bid,
                        'book' => $data[0],
                        'chapter' => $data[1],
                        'verse' => $data[2],
                        'context' => _bible_get_verse_content2($bls, $bid));
  // Return verse array
  return $verse_array;
}

function _bible_get_goldenversemask($book, $chapter, $versemask = array()) {
  global $user;
  if ($user->uid > 0) {
    $sqlcmd = "SELECT * FROM {bible_userprofile} WHERE uid=%s AND item IN ('vs_goldenverse'";
    for ($i = 1; $i < 6; $i++) {
      $sqlcmd .= ", 'vs_verseset" . $i . "'";
    }
    $sqlcmd .= ") AND data LIKE '%s:%s:%%'";
    $verseset = db_query(sprintf($sqlcmd, $user->uid, check_plain($book), check_plain($chapter)));
    foreach ($verseset as $up) {
      $updata = preg_split('/([A-Z]{2,3}):(\d{1,3}):(\d{1,3});?(.*)?/', $up->data, -1, PREG_SPLIT_DELIM_CAPTURE);
      $vsname = substr($up->item,3);
      if (!isset($versemask[$updata[3]])) $versemask[$updata[3]] = array();
      $versemask[$updata[3]][$vsname] = $updata[4];
    }
  }
  return $versemask;
}

function _bible_get_refversemask($book, $chapter, $versemask = array()) {
  global $bibledataxml;
  if (_bible_get_bibledata($book, $chapter) == "") {
    return $versemask;
  }
  $doc = new DOMDocument();
  $doc->loadXML($bibledataxml);
  $domXPath = new DOMXPath($doc);
  foreach ($domXPath->query('//bibledata/refverse/data') as $keyDOM) {
    $did = $keyDOM->getAttribute('did');
    $bls = $keyDOM->getAttribute('bls');
    $refurl = $keyDOM->getAttribute('refurl');
    $data = explode(':', $bls);
    if (!isset($versemask[$data[2]])) $versemask[$data[2]] = array();
    if (!isset($versemask[$data[2]]['refverse'])) $versemask[$data[2]]['refverse'] = "";
    $versemask[$data[2]]['refverse'] .= $refurl. ';';
  }
  return $versemask;
}

function _bible_get_notemask($book, $chapter, $versemask = array()) {
	global $user;
	$sqlcmd = sprintf("SELECT * FROM {bible_note} WHERE (access=0 OR uid=%s) AND bls LIKE '%s:%s:%%'",
										$user->uid, check_plain($book), check_plain($chapter));
	$noteset = db_query($sqlcmd);
  foreach ($noteset as $note) {
  	$bndata = preg_split('/([A-Z]{2,3}):(\d{1,3}):(\d{1,3})?/', $note->bls, -1, PREG_SPLIT_DELIM_CAPTURE);
		if (!isset($versemask[$bndata[3]])) $versemask[$bndata[3]] = array();
		$versemask[$bndata[3]]['note'][] = array($note->bnid, $note->access);
	}
	return $versemask;
}

function _bible_morelink($bid, $book, $chap, $verse) {
  $morelink = url('bible/' . $bid . '/' . $book . '/' . $chap . '/' . $verse);
  if (strpos($verse, '-')) {
    $vv = explode('-', $verse);
    $morelink .= '#v' . $vv[0];
  }
  else {
    $morelink .= '#v' . $verse;
  }
  return $morelink;
}

function _bible_get_blslink($bid, $bls) {
	$data = explode(':', $bls);
	return "<a href='". _bible_morelink($bid, $data[0], $data[1], $data[2]). "'>". $bls. "</a>";
}

function _bible_get_blslink2($bid, $bls) {
	$data = explode(':', $bls);
	return "<a href='". _bible_morelink($bid, $data[0], $data[1], $data[2]). "'>". _bible_get_bls_name($bls). "</a>";
}

function _bible_get_bibledata($book, $chapter) {
  global $bibledataxml;
  if (variable_get('bibledata_active', 1) != 1) {
    $bibledataxml = "";
    return "";
  }
  if ($bibledataxml != "") {
    $doc = new DOMDocument();
    $doc->loadXML($bibledataxml);
    $root = $doc->documentElement;
    if ($root->getAttribute('bls') == $book . ":" . $chapter) {
      return $bibledataxml;
    }
  }
  $default_url = BIBLE_DATA_DEFAULT_URL . '/getchap/' . $book . ':' . $chapter;
  $default_url .= '/' . variable_get('bibledata_bdtypeselect', '');
  if (variable_get('bibledata_langcode', '*') != '*') {
    $default_url .= '/' . variable_get('bibledata_langcode', '*');
  }
  $xml = drupal_http_request($default_url);
  $bibledataxml = ($xml->code == 200 ? $xml->data : '');
  $_SESSION['bibledataxml'] = $bibledataxml;
  return $bibledataxml;
}

function _bible_get_bibles_array($bibles_) {
  // If arg(1) is not provided, assume default translation to be active and display chapter selection screen
  if (empty($bibles_)) {
  	return array(_bible_get_select_bid());
	// If arg(1) is provided, extract bibles array (for multi read) and default bible from it
  }
  else {
    $bibles1 = explode('_', $bibles_);
    $bibles = array();
    for ($i = 0; $i < sizeof($bibles1); $i++) {
    	$bid = $bibles1[$i];
	    if (!is_numeric($bid)) {
	    	$bid = _bible_get_bible_id($bid);
	    }
	    if (_bible_get_bible($bid) != null) $bibles[] = $bid;
    }
    return $bibles;
  }
}

function bible_views_api() {
  return array(
    'api' => '3',
  );
}

// Theme Functions =========================================================

/**
 * Displays a daily Proverb.
 *
 * Displays a daily Proverb based on the day of the month.
 *
 * @param $bid
 *   STRING integer identifying the bible translation id.
 * @param $chapter
 *   ARRAY of strings containing each verse.
 * @param $opt
 *   STRING which identifies which view to display ('admin', or 'verse').
 * @return
 *   STRING a themed box.
 * @ingroup themeable
 */
function theme_bible_daily_proverb($variables) {
  $bid = $variables['bid'];
  $chapter = $variables['chapter'];
  $opt = $variables['opt'];

  global $user;
  $page_content = '';
  $chapter_id = date("j", time()+ ($user->uid>0 ? $user->timezone : 0));
  // Show the whole chapter
  if($opt == 'chapter'){
    $title = t("Proverbs"). " ". $chapter_id;
    $content = theme_item_list($chapter, '', $type = 'ol');
    $page_content .= theme_box($title, $content);
  }
  // Show just the first verse or a random verse
  else{
    $count = _bible_get_obj("SELECT Max(Verse) AS c FROM {bible_context} WHERE book='PRO' AND chapter=". $chapter_id. " AND bid=". $bid);
    if ($count->c == 0) return "";
    // Try three times
    for ($i=0; $i<3; $i++) {
      $vno = rand(1, $count->c);
      $title = t("Proverbs"). " ". $chapter_id. ":". $vno;
      $content = $chapter[$vno-1];
      if ($content != "") break;
    }
    $page_content .= theme_box($title, $content);
    $page_content .= '<div class="bible-more-link">'.l(t("See All..."), 'bible/'.$bid.'/PRO/'.$chapter_id)."</div>";
  }
  // Return themed table
  return $page_content;
}

/**
 * Displays a random verse.
 *
 * Displays a random verse based on the default translation.
 *
 * @param $verse_array
 *   ARRAY containing the translation, book, chapter and verse information.
 * @return
 *   STRING a themed box.
 * @ingroup themeable
 */
function theme_bible_golden_verse($variables) {
  $verse_array = $variables['versearray'];
  if (!isset($verse_array['bid'])) return "";

  $page_content = '';
  // Show just the first verse
  $bookname = _bible_get_chapter_name($verse_array['bid'], $verse_array['book']);
  $title = $bookname . " " . $verse_array['chapter'] . ":" . $verse_array['verse'];
  $showchapternumber = variable_get('bible_config_showchapternumber', 0);
  $replacement_regex = ' <span class="verse">[' . ($showchapternumber ? $verse_array['chapter'] . ":" : '');
  $replacement_regex .= '\1]</span>\2<span class="verse-break"></span>';
  $content = preg_replace('/\[(\d{1,3})\](.*)\n/', $replacement_regex, $verse_array['context']);

  $page_content .= theme_box($title, $content);
  $morelink = _bible_morelink($verse_array['bid'], $verse_array['book'], $verse_array['chapter'], $verse_array['verse']);
  $page_content .= "<div class='bible-more-link'><a href='" . $morelink . "'>" . t("See All...") . "</a></div>";
  // Return themed table
  return $page_content;
}

function theme_bible_quotes($variables) {
  $quote = $variables['quote'];
  $author = $variables['author'];

  $page_content = $quote;
  $page_content .= "<div class='bible-quote-author'>". $author. "</div>";
  // Return themed table
  return $page_content;
}

function theme_box($title, $content) {
  $header[] = $title;
  $rows[0][] = $content;
  return theme('table', array('header' => $header, 'rows' => $rows));
}
