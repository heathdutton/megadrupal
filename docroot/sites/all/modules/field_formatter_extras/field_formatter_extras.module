<?php

/**
 * @file
 * Provides custom field wrappers and classes for field formatters.
 */

define('FIELD_FORMATTER_EXTRAS_WRAPPER_DEFAULT', 'div');

/**
 * Implements hook_theme_registry_alter().
 */
function field_formatter_extras_theme_registry_alter(&$theme_registry) {
  // Override the template file only if it hasn't been already overridden.
  if (!isset($theme_registry['field']['path'])) {
    $theme_registry['field']['template'] = drupal_get_path('module', 'field_formatter_extras') . '/field';
    unset($theme_registry['field']['function']);
  }
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function field_formatter_extras_field_formatter_info_alter(&$info) {
  foreach (array_keys($info) as $formatter) {
    $info[$formatter]['settings'] += array(
      'field_formatter_extras_field_wrapper' => '',
      'field_formatter_extras_field_class' => '',
      'field_formatter_extras_value_class' => '',
      'field_formatter_extras_value_prefix' => '',
      'field_formatter_extras_value_suffix' => '',
    );
  }
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 */
function field_formatter_extras_field_formatter_settings_form_alter(&$settings_form, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  $settings_form['field_formatter_extras_field_wrapper'] = array(
    '#type' => 'select',
    '#title' => t('Field wrapper HTML tag'),
    '#options' => field_formatter_extras_wrapper_html_tags(),
    '#default_value' => $settings['field_formatter_extras_field_wrapper'],
    '#description' => t('Default value: <em>div</em>.'),
  );

  $settings_form['field_formatter_extras_field_class'] = array(
    '#type' => 'textfield',
    '#title' => t('Field wrapper classes'),
    '#default_value' => $settings['field_formatter_extras_field_class'],
    '#description' => t('Separate multiple classes with spaces.'),
  );

  $settings_form['field_formatter_extras_value_class'] = array(
    '#type' => 'textfield',
    '#title' => t('Field value wrapper classes'),
    '#default_value' => $settings['field_formatter_extras_value_class'],
    '#description' => t('Separate multiple classes with spaces.'),
  );

  $settings_form['field_formatter_extras_value_prefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Field value prefix'),
    '#default_value' => $settings['field_formatter_extras_value_prefix'],
  );

  $settings_form['field_formatter_extras_value_suffix'] = array(
    '#type' => 'textfield',
    '#title' => t('Field value suffix'),
    '#default_value' => $settings['field_formatter_extras_value_suffix'],
  );
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function field_formatter_extras_field_formatter_settings_summary_alter(&$summary, $context) {
  $display = $context['instance']['display'][$context['view_mode']];
  $settings = $display['settings'];

  // This line is UBER-IMPORTANT. Only thanks to its existence those little
  // "Field settings" gear buttons appear for all fields. True story!
  $summary .= ' ';

  if (
    !empty($settings['field_formatter_extras_field_wrapper'])
    && $settings['field_formatter_extras_field_wrapper'] != FIELD_FORMATTER_EXTRAS_WRAPPER_DEFAULT
  ) {
    $summary .= '<br />' . t('Custom field wrapper');
  }

  if ((!empty($settings['field_formatter_extras_field_class']))) {
    $summary .= '<br />' . t('Custom field classes');
  }

  if ((!empty($settings['field_formatter_extras_value_class']))) {
    $summary .= '<br />' . t('Custom value classes');
  }

  if (!empty($settings['field_formatter_extras_value_prefix'])) {
    $summary .= '<br />' . t('Custom value prefix');
  }

  if (!empty($settings['field_formatter_extras_value_suffix'])) {
    $summary .= '<br />' . t('Custom value suffix');
  }

}

/**
 * Implements hook_preprocess_field().
 *
 * Adds a custom field class to the field's classes_array
 * according to the field formatter settings.
 */
function field_formatter_extras_preprocess_field(&$variables, $hook) {
  $field_name   = $variables['element']['#field_name'];
  $entity_type  = $variables['element']['#entity_type'];
  $bundle       = $variables['element']['#bundle'];
  $display      = $variables['element']['#view_mode'];

  $formatter_info = field_formatter_extras_formatter_info($field_name, $entity_type, $bundle, $display);

  // Add field wrapper element.
  $variables['element']['#field_wrapper'] =
    (!empty($formatter_info['field_formatter_extras_field_wrapper']))
    ? $formatter_info['field_formatter_extras_field_wrapper']
    : FIELD_FORMATTER_EXTRAS_WRAPPER_DEFAULT;

  // Throw in extra classes.
  if (!empty($formatter_info['field_formatter_extras_field_class'])) {
    $variables['classes_array'][] = filter_xss($formatter_info['field_formatter_extras_field_class'], array());
  }

  // Add field value #prefix and #suffix.
  if (
    !empty($formatter_info['field_formatter_extras_value_class'])
    || !empty($formatter_info['field_formatter_extras_value_prefix'])
    || !empty($formatter_info['field_formatter_extras_value_suffix'])
  ) {
    $children = element_children($variables['element']);
    if (is_array($children) && count($children)) {
      foreach ($children as $delta) {
        // Re-add default field value classes removed from original field.tpl.php.
        $variables['item_attributes_array'][$delta]['class'] = array(
          'field-item',
          $delta % 2 ? 'odd' : 'even',
        );
        // Add extra field value classes if required.
        if (!empty($formatter_info['field_formatter_extras_value_class'])) {
          $variables['item_attributes_array'][$delta]['class'][] = $formatter_info['field_formatter_extras_value_class'];
        }
        // Add field value prefix.
        if (!empty($formatter_info['field_formatter_extras_value_prefix'])) {
          $variables['items'][$delta]['#prefix'] = $formatter_info['field_formatter_extras_value_prefix'];
        }
        // Add field value suffix.
        if (!empty($formatter_info['field_formatter_extras_value_suffix'])) {
          $variables['items'][$delta]['#suffix'] = $formatter_info['field_formatter_extras_value_suffix'];
        }
      }
    }
  }
}

/**
 * Get the formatter settings for a field instance and display.
 *
 * @param string $field_name
 * @param string $display
 * @param string $bundle
 * @param string $display
 *
 * @return array
 */
function field_formatter_extras_formatter_info($field_name, $entity_type, $bundle, $display) {
  $info = _field_info_collate_fields();

  // There is no bundle for this entity type so the bundle name is the
  // entity_type name.
  if (empty($bundle)) {
    $bundle = $entity_type;
  }

  $field_display = $info['instances'][$entity_type][$bundle][$field_name]['display'];
  $default = $field_display['default']['settings'];

  if (isset($field_display[$display]['settings'])) {
    return $field_display[$display]['settings'] + $default;
  }
  return $default;
}

/**
 * Returns array of allowed field wrapper HTML elements.
 */
function field_formatter_extras_wrapper_html_tags() {
  $wrapper_html_tags = drupal_map_assoc(array('div', 'span', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'strong', 'em'));
  drupal_alter('field_formatter_extras_wrapper_html_tags', $wrapper_html_tags);
  return $wrapper_html_tags;
}
