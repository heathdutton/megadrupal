<?php

/**
 * @file
 * This is the main module file, branch 7.x
 */


define('REMEMBER_VALUES_VALID_WIDGETS', serialize(array(
  'text_textfield', 'text_textarea', 'text_textarea_with_summary',
  'options_buttons', 'options_onoff', 'options_select',
  'image_image',
  'date_text', 'date_popup',
  'formatted_number',
  'money_widget',
  'link_field',
  'email_textfield',
  'entityreference_autocomplete',
  'select_or_other',
  'select_or_other_buttons',
  'addressfield_standard',
)));

/**
 * Implements hook_menu().
 */
function remember_values_menu() {
  $items['admin/config/content/remember_values'] = array(
    'title' => 'Remember values',
    'description' => "Setup configuration to remember user's previous selection in forms.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('remember_values_settings'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer site configuration'),
    'file' => 'remember_values.module',
  );
  return $items;
}

/**
 * Module settings form.
 */
function remember_values_settings() {
  $form['remember_values_status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable remembering'),
    '#default_value' => variable_get('remember_values_status', 0),
    '#description' => t('Remember form values for all content types.'),
  );
  $form['remember_values_lifespan'] = array(
    '#type' => 'textfield',
    '#size' => 8,
    '#title' => t('Memory span'),
    '#default_value' => variable_get('remember_values_lifespan', 24),
    '#description' => t('How long would you like the values to be remembered. Enter an amount in hours.'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_alter().
 *
 * Fills out the default values of selected fields
 */
function remember_values_form_alter(&$form, $form_state, $form_id) {
  // Master on/off switch. This is set in module settings page.
  $status = variable_get('remember_values_status', 0);

  // Check $form['nid'] value to see if it's add or edit form.
  // Go ahead with altering if it's node add form.
  if ($status && isset($form['#node_edit_form']) && !$form['nid']['#value']) {

    // Node type is stored in #node object in some forms,
    // in #node_type in others. Dunno why.
    $node_type = isset($form['#node']->type) ? $form['#node']->type : $form['#node_type']->type;

    // List of fields to remember values of.
    $selected_fields = variable_get('remember_values_fields_' . $node_type, 0) ? variable_get('remember_values_fields_' . $node_type, 0) : array();
    if ($selected_fields) {

      $lifespan = variable_get('remember_values_lifespan', 24) * 60 * 60;

      $result = db_query('SELECT * FROM {remember_values} WHERE form_id = :form_id AND uid = :uid', array(':form_id' => $form_id, ':uid' => $form['uid']['#value']));

      // We will check if there is a db record for this node type,
      // see if it's not expired and load the values from there to the form.
      if ($result) {
        $record = $result->fetchAssoc();
        if ($record['created'] + $lifespan - time() > 0 && !empty($selected_fields)) {
          $values = unserialize($record['data']);

          // write title value
          if (in_array('title', $selected_fields)) {
            $form['title']['#default_value'] = $values['title'];
          }

          // adn the rest of fields
          $fields = field_info_instances('node', $node_type);
          foreach ($fields as $field => $data) {
            if (in_array($field, $selected_fields) && isset($values[$field])) {
              remember_values_write_value($form, $field, $values[$field], $data);
            }
          }
        }
      }
    }
    $form['actions']['submit']['#submit'][] = 'remember_values_write_db';
  }
}

/**
 * Writes field value into $form according to the field type.
 *
 * @param object $form
 *   A form object.
 * @param string $field
 *   Field name into which the value is to be written.
 * @param array $values
 *   The value.
 */
function remember_values_write_value(&$form, $field_name, $values, $field_data) {
  $widget_type = $field_data['widget']['type'];
  if (!empty($values)) {
    switch ($widget_type) {
      case 'image_image':
        $clone = $form[$field_name]['und'][0];
        foreach ($values as $key => $data) {
          $form[$field_name][$key] = $clone;
          $path = db_query("SELECT uri FROM {file_managed} WHERE fid = :fid", array(':fid' => $data['fid']))->fetchObject();
          if (is_object($path) && is_file($path->uri)) {
            $form[$field_name]['und'][$key]['#default_value'] = $data;
          }
        }
        break;

      case 'date_popup':
        $clone = $form[$field_name]['und'][0];
        foreach ($values as $key => $data) {
          $form[$field_name]['und'][$key]['#default_value'] = $data;
          $nextkey = $key + 1;
          if (isset($values[$nextkey])) {
            $form[$field_name]['und'][$nextkey] = $clone;
          }
        }
        break;

      case 'options_buttons':
      case 'options_select':
      case 'select_or_other':
      case 'select_or_other_buttons':
        $field_info = field_info_field($field_name);
        if ($field_info['cardinality'] == 1) {
          $value = array_values($values['0']);
          $form[$field_name]['und']['#default_value'] = $value[0];
        }
        else {
          foreach ($values as $key => $data) {
            $value = array_values($data);
            $form[$field_name]['und']['#default_value'][] = $value[0];
          }
        }
        break;

      case 'addressfield_standard':
        $field_info = field_info_field($field_name);
        foreach ($values as $key => $value) {
          $form[$field_name]['und'][$key]['#address'] = $value;
        }
        break;

      case 'options_onoff':
        $form[$field_name]['und']['#default_value'] = $values[0]['value'];
        break;

      case 'entityreference_autocomplete':
        $clone = $form[$field_name]['und'][0];
        foreach ($values as $key => $data) {
          $node_title = node_load($data['target_id'])->title;
          $form[$field_name]['und'][$key]['target_id']['#default_value'] = $node_title . ' (' . $data['target_id'] . ')';
          $nextkey = $key + 1;
          if (isset($values[$nextkey])) {
            $form[$field_name]['und'][] = $clone;
          }
        }
        break;

      case 'money_widget':
        $clone = $form[$field_name]['und'][0];
        foreach ($values as $key => $data) {
          foreach ($data as $name => $value) {
            $form[$field_name]['und'][$key][$name]['#default_value'] = $value;
          }
          $nextkey = $key + 1;
          if (isset($values[$nextkey])) {
            $form[$field_name]['und'][$nextkey] = $clone;
          }
        }
        break;

      case 'link_field':
        $clone = $form[$field_name]['und'][0];
        foreach ($values as $key => $data) {
          $form[$field_name]['und'][$key]['#default_value'] = $data;

          $nextkey = $key + 1;
          if (isset($values[$nextkey])) {
            $form[$field_name]['und'][$nextkey] = $clone;
          }
        }

    }

    // The rest of field types are similar.
    if (in_array($widget_type, array(
        'text_textfield',
        'email_textfield',
        'text_textarea',
        'date_text',
        'text_textarea_with_summary',
        'formatted_number'))) {
      $clone = $form[$field_name]['und'][0];
      foreach ($values as $key => $data) {
        // this is not needed for default values
//        unset($data['format']);
        foreach ($data as $name => $value) {
          $form[$field_name]['und'][$key][$name]['#default_value'] = $value;
        }
        $nextkey = $key + 1;
        if (isset($values[$nextkey])) {
          $form[$field_name]['und'][$nextkey] = $clone;
        }
      }
    }
  }
}

/**
 * Submit callback for node add form.
 *
 * Writes a database record with current field values
 */
function remember_values_write_db($form, $form_state) {

  if ($selected_fields = variable_get('remember_values_fields_' . $form['#node']->type, 0)) {

    $values = array();
    if (in_array('title', $selected_fields)) {
      $values['title'] = $form_state['values']['title'];
    }

    // Collect field values
    if (is_array($form_state['field'])) {
      $nid = $form_state['nid'];
      $node = node_load($nid);
      foreach ($form_state['field'] as $field => $data) {
        if (in_array($field, $selected_fields)) {
          if ($field == 'title') {
            $value = array($form_state['title']['#value']);
          }
          $value = field_get_items('node', $node, $field);
          if (!empty($value)) {
            if (!isset($value[0])) {
              $value = array($value);
            }
            $values[$field] = $value;
          }
        }
      }
    }

    $form_id = $form['form_id']['#value'];
    $uid = $form['uid']['#value'];
    $created = time();
    $lifespan = variable_get('remember_values_lifespan', 24);

    $write_object = array(
      'form_id' => $form_id,
      'uid' => $uid,
      'data' => serialize($values),
      'created' => $created,
      'lifespan' => $lifespan,
    );

    $results = db_query('SELECT * FROM {remember_values} WHERE form_id = :form_id AND uid = :uid', array(':form_id' => $form_id, ':uid' => $uid));
    $have_record = $results->fetchAssoc();
    if (!$have_record) {
      drupal_write_record('remember_values', $write_object);
    }
    else {
      drupal_write_record('remember_values', $write_object, array('form_id', 'uid'));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds our checkboxes to node_type_form
 */
function remember_values_form_node_type_form_alter(&$form, $form_state) {
  // Master on/off switch. This is set in module settings page.
  $status = variable_get('remember_values_status', 0);

  $node_type = $form['#node_type']->type;

  // List of fields to remember values of.
  $selected_fields = variable_get('remember_values_fields_' . $node_type, 0) ? variable_get('remember_values_fields_' . $node_type, 0) : array();

  if ($status) {
    $form['remember_values'] = array(
      '#type' => 'fieldset',
      '#title' => t('Remember values'),
      '#description' => t("Choose the fields which should remember their previously set values. If a field's checbox is disabled, it means that this type of field is not yet supported."),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
      '#attributes' => array(
        'class' => array('remember_values-node-type-settings-form'),
      ),
    );

    // Get fields from this node type and add them to the form.
    if (($fields = field_info_instances('node', $node_type))) {
      $form['remember_values']['remember_values_field_title'] = array(
        '#title' => t('Title'),
        '#type' => 'checkbox',
        '#default_value' => in_array('title', $selected_fields),
      );
      foreach ($fields as $name => $data) {
        $form['remember_values']['remember_values_field_' . $name] = array(
          '#title' => check_plain($data['label']),
          '#type' => 'checkbox',
          '#default_value' => in_array($name, $selected_fields),
          '#disabled' => !in_array($data['widget']['type'], unserialize(REMEMBER_VALUES_VALID_WIDGETS)),
        );
      }
    }

    array_push($form['#submit'], 'remember_values_node_type_form_submit');
  }
}

/**
 * Submit callback for node_type_form.
 */
function remember_values_node_type_form_submit($form, $form_state) {
  $values = array();
  foreach ($form_state['values'] as $field_name => $value) {
    if (strstr($field_name, 'remember_values')) {
      $field = str_replace('remember_values_field_', '', $field_name);
      if ($value > 0) {
        $values[] = $field;
      }
    }
  }
  // Drupal's node_type_form_submit() stores a variable automatically, but it
  // doesn't handle arrays the way we need... So we set our own variable.
  variable_set('remember_values_fields_' . $form['#node_type']->type, $values);
}

