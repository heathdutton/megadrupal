<?php
/**
 * @file
 * Enterprise search with a cloud based Solr service.
 *
 * @author Axis12 Ltd <technical@axitwelve.com>
 */

define('ENTERPRISE_SEARCH_USER_AGENT', 'a12_find/7.x-2.0');
define('ENTERPRISE_SEARCH_SERVER', 'https://find.axis12.com/');

/**
 * Implements hook_menu().
 */
function enterprise_search_menu() {
  $items = array();
  $items['admin/config/search/apachesolr/indicies'] = array(
    'title' => '1. Choose Index',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('enterprise_search_index_form'),
    'access arguments' => array('administer search'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'enterprise_search.pages.inc',
    'weight' => 2,
  );
  $items['admin/config/search/apachesolr/features'] = array(
    'title' => '5. Optional Features',
    'page callback' => 'enterprise_search_features_page',
    'access arguments' => array('administer search'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'enterprise_search.pages.inc',
    'weight' => 12,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * Reorganise the Apache Solr search modules menu items to make room for
 * Enterprise Search menu items.
 */
function enterprise_search_menu_alter(&$menu) {
  if (isset($menu['admin/config/search/apachesolr'])) {
    $menu['admin/config/search/apachesolr']['title'] = 'Enterprise Search';
    $menu['admin/config/search/apachesolr']['description'] = 'Configure enterprise search settings, indexing options and blocks, and manage search environments.';
  }
  if (isset($menu['admin/config/search/apachesolr/settings'])) {
    $menu['admin/config/search/apachesolr/settings']['title'] = '4. Advanced Settings';
    $menu['admin/config/search/apachesolr/settings']['weight'] = 10;
  }
  if (isset($menu['admin/config/search/apachesolr/index'])) {
    $menu['admin/config/search/apachesolr/index']['title'] = '2. Manage Index';
    $menu['admin/config/search/apachesolr/index']['weight'] = 3;
    $menu['admin/config/search/apachesolr/index']['type'] = MENU_LOCAL_TASK;
  }

  if (isset($menu['admin/config/search/apachesolr/search-pages'])) {
    $menu['admin/config/search/apachesolr/search-pages']['title'] = '3. Manage Pages/Blocks';
    $menu['admin/config/search/apachesolr/search-pages']['weight'] = 4;
  }

  if (isset($menu['admin/reports/apachesolr/conf'])) {
    $menu['admin/reports/apachesolr/conf']['page callback'] = 'enterprise_search_solr_conf_page';
  }

  if (module_exists('apachesolr_attachments')) {
    $menu['admin/config/search/apachesolr/attachments']['weight'] = 11;
    $menu['admin/config/search/apachesolr/attachments']['type'] =
      MENU_CALLBACK;
  }
}

/**
 * Display an error message if the configuration file page is accessed.
 */
function enterprise_search_solr_conf_page() {
  return t("The solr server is provided by Axis12 Find so the configuration files are not currently accessible.");
}

/**
 * Reset Solr environment settings to Enterprise Search defaults.
 */
function enterprise_search_refresh_solr_settings() {
  $environments = apachesolr_load_all_environments();
  foreach ($environments as $environment) {
    if ($environment['env_id'] == "find") {
      apachesolr_environment_delete($environment['env_id']);
    }
  }

  $values = array(
    'env_id' => 'find',
    'name' => 'Enterprise Search',
    'url' => ENTERPRISE_SEARCH_SERVER,
    'service_class' => 'DrupalFindService',
  );

  apachesolr_environment_save($values);
  variable_set('apachesolr_default_environment', 'find');
}

/**
 * Implements hook_apacheesolr_entity_info_alter().
 *
 * Add our custom attachment callback.
 */
function enterprise_search_apachesolr_entity_info_alter(&$entity_info) {
  if (module_exists('apachesolr_attachments')) {
    $entity_info['file']['document callback'] = array();
    $entity_info['file']['document callback'][] = 'enterprise_search_attachments_solr_document';
  }
}

/**
 * Implements hook_apachesolr_index_document_build_ENTITY_TYPE().
 */
function enterprise_search_apachesolr_index_document_build_node(ApacheSolrDocument $document, $entity, $env_id) {
  if (isset($entity->language)) {
    $document->language = $entity->language;
  }
  else {
    $document->language = "und";
  }
}
/**
 * Implements custom docuemnt id creation for the A12:FIND service
 * @staticvar DrupalFindService $service_class
 * @param type $content_id
 * @param type $environment_id_options
 * @return type
 */
function enterprise_search_document_id($content_id, $environment_id_options) {
  static $service_class;
  if (!isset($service_class)) {
    $service_class = new DrupalFindService($environment_id_options['url']);
  }
  if ($environment_id_options['unique field'] == 'id') {
    $content_id_data = explode(':', $content_id);
    $fakeNode = new stdClass();
    $fakeNode->nid = $content_id_data[2];
    $content_id = $service_class->generateDocumentId($fakeNode);
  }
  return $content_id;
}
