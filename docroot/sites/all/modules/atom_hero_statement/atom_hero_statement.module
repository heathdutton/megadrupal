<?php
/**
 * @file
 *
 * Atom Hero Module provides hero statement block and updates context to add the
 * hero blocks to the homepage.
 */

/**
 * Implements hook_block_info().
 */
function atom_hero_statement_block_info() {
  $blocks = array();
  $blocks['atom_hero'] = array(
    'info' => t('Hero Statement'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function atom_hero_statement_block_configure($delta = '') {
  $form = array();

  $function_name = 'atom_hero_statement_block_' . $delta . '_configure';
  if (function_exists($function_name)) {
    $form = call_user_func($function_name, $form);
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function atom_hero_statement_block_save($delta = '', $edit = array()) {
  $function_name = 'atom_hero_statement_block_' . $delta . '_save';
  if (function_exists($function_name)) {
    call_user_func($function_name, $edit);
  }
}

/**
 * Implements hook_block_view().
 */
function atom_hero_statement_block_view($delta = '') {
  $function_name = 'atom_hero_statement_block_' . $delta . '_view';
  if (function_exists($function_name)) {
    return call_user_func($function_name);
  }
}

/**
 * Configuration options for the block: atom_hero
 */
function atom_hero_statement_block_atom_hero_configure($form) {
  $text = atom_hero_statement_get_statement();
  $link_text = atom_hero_link_get_link();
  $link_title = atom_hero_link_get_label();
  $form['atom_hero_text'] = array(
    '#type' => 'text_format',
    '#title' => t('Hero Statement'),
    '#description' => t('Enter your Hero Statement here.'),
    '#default_value' => $text['value'],
    '#format' => $text['format'],
    '#required' => TRUE,
  );
  $form['atom_hero_link_label'] = array(
    '#type' => 'textfield',
    '#description' => t('Enter the label you would like to have for the link button. Leave blank to hide the Learn More button.'),
    '#default_value' => $link_label['value'],
    '#size' => 60,
  );
 $form['atom_hero_link'] = array(
    '#type' => 'textfield',
    '#title' => t('Learn More Link'),
    '#description' => t('Enter the full URL for your Learn More link. Leave blank to hide the Learn More button.'),
    '#default_value' => variable_get('atom_hero_link', url('about', array('absolute' => TRUE))),
    '#size' => 60,
  );
  return $form;
}

/**
 * Save configuration for block: atom_hero
 */
function atom_hero_statement_block_atom_hero_save($edit) {
  variable_set('atom_hero_text', $edit['atom_hero_text']);
  variable_set('atom_hero_link_label', $edit['atom_hero_link_label']);  
  variable_set('atom_hero_link', $edit['atom_hero_link']);
}

/**
 * Block view function for block: atom_hero
 */
function atom_hero_statement_block_atom_hero_view() {
  $block = array();
  $text = atom_hero_statement_get_statement();
  $text = '<div class="hero-statement-text">' . check_markup($text['value'], $text['format']) . '</div>';


  $label = variable_get('atom_hero_link_label');
  $url = variable_get('atom_hero_link');
  if (!empty($url)) {
    if (!preg_match('/^http/', $url)) {
      $url = 'http://' . $url;
    }
    $url = '<div class="hero-statement-link">' . l($label, $url) . '</div>';
  }

  $block['content'] = $text . $url;
  return $block;
}

/**
 * Return the configured hero statement or default value
 */
function atom_hero_statement_get_statement() {
  return variable_get(
    'atom_hero_text',
    array(
      'value' => t('The Atom Hero Statement'),
      'format' => filter_default_format(),
    )
  );
}

/**
 * Return the configured hero link or default value
 */
function atom_hero_link_get_link() {
  return variable_get(
    'atom_hero_link_text',
    array(
      'value' => t('The Atom Hero Link Text'),
      'format' => filter_default_format(),
    )
  );
}

/**
 * Return the configured hero link or default value
 */
function atom_hero_link_get_label() {
  return variable_get(
    'atom_hero_link_title',
    array(
      'value' => t('Get Involved'),
      'format' => filter_default_format(),
    )
  );
}

/**
 * Preprocess the block
 */
function atom_hero_statement_preprocess_block(&$vars) {
  /* Set shortcut variables. Hooray for less typing! */
  $block_id = $vars['block']->module . '-' . $vars['block']->delta;
  $classes = &$vars['classes_array'];
  $title_classes = &$vars['title_attributes_array']['class'];
  $content_classes = &$vars['content_attributes_array']['class'];

  /* Add global classes to all blocks */
  $title_classes[] = 'block-title';
  $content_classes[] = 'block-content';

  if ($block_id == 'atom_hero-atom_hero') {
    $classes[] = 'hero-statement';
  }
}
