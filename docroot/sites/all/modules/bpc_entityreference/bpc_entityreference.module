<?php

/**
 * @file
 * Allows use of entity reference fields in the bulk product creation process
 */

/**
 * Implements hook_commerce_bpc_is_combination_field().
 */
function bpc_entityreference_commerce_bpc_is_combination_field($instance) {
  $field = field_info_field($instance['field_name']);
  if ($field['type'] == 'entityreference') {

    // force static is not actually implemented yet
    $force_static = _commerce_bpc_get_value($instance, array('commerce_bpc', 'is_static'), FALSE);
    $is_attribute_field = _commerce_bpc_get_value($instance, array('commerce_cart_settings', 'attribute_field'), FALSE);
    return !$force_static && $is_attribute_field;
  }
}

/*
 * Implements hook_commerce_bpc_FIELDNAME_form_element_alter().
 */
function bpc_entityreference_commerce_bpc_entityreference_form_element_alter(&$form, &$form_state, &$path) {
  $element = drupal_array_get_nested_value($form, $path);
  $lang = $element['#language'];
  $field_name = $element[$lang]['#field_name'];
  $instance = field_info_instance('commerce_product', $field_name, $form['product_type']['#value']);

  if (bpc_entityreference_commerce_bpc_is_combination_field($instance)) {
    switch ($instance['widget']['type']) {
      case 'options_buttons':
        // Switch to checkboxes and standardize the "none" option
        $element[$lang]['#type'] = 'checkboxes';
        $options =& $element[$lang]['#options'];
        $element[$lang]['#default_value'] = array();        
        _bpc_entityreference_fix_none(&$options, $instance);

        break;
      case 'options_select':
        // Switch to multi-select and standardize the "none" option
        $element[$lang]['#multiple'] = TRUE;
        $options =& $element[$lang]['#options'];
        _bpc_entityreference_fix_none(&$options, $instance);

        break;
      case 'entityreference_autocomplete':
        $field = field_info_field($field_name);
        
        // If the field is limited to one value, we need to manually create the
        // multi-value widget.
        if ($field['cardinality'] < 2) {
          $field['cardinality'] = -1;
          $new_product = commerce_product_new('product');
          $element = field_default_form('commerce_product', $new_product, $field, $instance, $lang, array(), $form, $form_state);
        }
        
        break;
        
      // No action is necessary for the autocomplete tag-style
    }

    // Move to combinations-fieldset
    $form['combinations'][$field_name] = $element;
    drupal_array_set_nested_value($form, $path, NULL);

    // Change path to allow subsequent hooks operate on the form element.
    $path = array('combinations', $field_name);

    if (empty($form_state['commerce_bpc']['bpc_entityreference']['combination_fields'])
    || !in_array($field_name, $form_state['commerce_bpc']['bpc_entityreference']['combination_fields'])) {
    // Record what we have done. As this hook may be run multiple times
    // due to form rebuilds, we need to make sure that we record each field
    // only once.
      $form_state['commerce_bpc']['bpc_entityreference']['combination_fields'][] = $field_name;
    }
  }
}

/**
 * Evalulate whether an instance is required; if so, fix "none" option so that it
 * works
 *
 * @param array &$options
 *   List of form options
 *
 * @param array $instance
 *   Field config instance
 */
function _bpc_entityreference_fix_none(&$options, $instance) {
  if (!$instance['required']) {
    unset($options['_none']);

    // Put "none" option at the beginning
    $options += array('none' => t('None'));
  }
}

/*
 * Implements hook_commerce_bpc_get_combinations().
 */
function bpc_entityreference_commerce_bpc_get_combinations($form, &$form_state, &$combinations) {
  $new_combinations = array();

  if (!empty($form_state['commerce_bpc']['bpc_entityreference']['combination_fields'])) {
    $fields = array_values($form_state['commerce_bpc']['bpc_entityreference']['combination_fields']);

    foreach ($fields as $field_name) {
      $new_combinations = array();
      $product_type = $form_state['values']['product_type'];
      $product_stub = commerce_product_new($product_type);
      $lang = field_language('commerce_product', $product_stub, $field_name);
      $field = field_info_field($field_name);
      $instance = field_info_instance('commerce_product', $field_name, $product_type);
      
      // Different for autocomplete vs select
      if (!empty($form_state['values']['combinations'][$field_name][$field_name][$lang])) {
        foreach ($form_state['values']['combinations'][$field_name][$field_name][$lang] as $delta => $element) {
          if (is_numeric($delta)) {
            if (!empty($element['target_id'])) {
              $values[] = array('target_id' => $element['target_id']);
            }
            else if (!$instance['required']) {
              $values[] = array('target_id' => 'none');
            }
          }
        }
      }
      else {
        $values = $form_state['values']['combinations'][$field_name][$lang];
      }

      foreach ($combinations as $combination) {
        foreach ($values as $item) {
          if (!empty($item)) {            
            if (!entityreference_field_is_empty($item, $field) || $item['target_id'] == 'none') {
              $new_combinations[] = $combination + array(
                $field_name => array($lang => array($item)),
              );
            }
            else {
              $new_combinations[] = $combination;

              // If the values for a field are invalid, we make sure that
              // we (re)-add the original combination only once.
              break;
            }
          }
        }
      }
      $combinations = $new_combinations;
    }
  }
}

/*
 * Implements hook_commerce_bpc_tokens().
 */
function bpc_entityreference_commerce_bpc_tokens($product_type, $combination, $options) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  foreach ($combination as $field_name => $values) {
    $langs = array_keys($values);
    $lang = reset($langs);
    $field = field_info_field($field_name);
    $instance = field_info_instance('commerce_product', $field_name, $product_type);
    if ($field['module'] == 'entityreference' &&  !_commerce_bpc_get_value($instance, array('commerce_bpc', 'is_static'), FALSE)) {

      // When creating sample values the 'value' key is present, but when 
      // creating products the 'target_id' is present.
      $value = isset($values[$lang][0]['value']) ? $values[$lang][0]['value'] : $values[$lang][0]['target_id'];
      $replacements['values'][$field_name] = $value;
      $replacements['labels'][$field_name] = $value ;
    }
  }
  return $replacements;
}

/*
 * Implements hook_commerce_bpc_token_sample_values().
 */
function bpc_entityreference_commerce_bpc_token_sample_values($instance) {
  $samples = array();
  $field_name = $instance['field_name'];
  $field = field_info_field($field_name);
  if ($field['module'] == 'entityreference') {
    $options = entityreference_options_list($field);
    $values = array_keys($options);
    $samples['value'] = array(LANGUAGE_NONE => array(array('value' => reset($values))));
    $samples['label'] = reset($options);
  }
  return $samples;
}
