<?php
/**
 * @file
 * Contains the functionality for accessible_skip_links.
 *
 * Borrows heavily from block_titlelink.
 */

define('ACCESSIBLE_SKIP_LINKS_PREFIX', 'accessible_skip_links_');
define('ACCESSIBLE_SKIP_LINKS_BID', 'accessible_skip_links_accessible_skip_links');

/**
 * Implements hook_preprocess_block().
 *
 * Add our anchor tag to the block's content. This is the "target".
 */
function accessible_skip_links_preprocess_block(&$vars, $hook) {
  if (!empty($vars['block']->skip_link_data)) {
    $options = array(
      'attributes' => array(
        'id' => $vars['block']->skip_link_data['id'],
        'title' => $vars['block']->skip_link_data['title'],
        'class' => array(
          'element-invisible',
          'element-focusable',
        ),
      ),
      'external' => TRUE,
      'fragment' => $vars['block']->skip_link_data['id'],
    );
    $anchor = l($vars['block']->skip_link_data['title'], '', $options);
    $vars['content'] = $anchor . $vars['content'];
  }
}

/**
 * Implements hook_page_alter().
 *
 * Loop though regions and blocks to add skip links to our  skip links block.
 */
function accessible_skip_links_page_alter(&$page) {
  $skip_links = array();
  $skip_block_region = FALSE;
  $skip_link_items = array();
  $markup = '';

  foreach ($page as $region_id => $region) {
    // Skip #render elements on regions.
    if (strpos($region_id, '#') !== FALSE) {
      continue;
    }
    foreach ($region as $block_id => $block) {
      // Skip #render elements on blocks.
      if (strpos($block_id, '#') !== FALSE) {
        continue;
      }
      if ($block_id == ACCESSIBLE_SKIP_LINKS_BID) {
        $skip_block_region = $region_id;
      }
      if (isset($block['#block']->skip_link_data)) {
        $link = $block['#block']->skip_link_data;
        $skip_links[] = _accessible_skip_links_generate_skip_link($link['title'], $link['id']);
      }
    }
  }
  if (!$skip_block_region) {
    // The block is not placed on this page, so return.
    return;
  }

  // Open up $skip_links to alter (for sorting and such).
  drupal_alter('skip_links', $skip_links, $page);

  foreach ($skip_links as $link) {
    $skip_link_items[] = l($link['title'], $link['url'], $link['options']);
  }

  if (!empty($skip_link_items)) {
    $markup = theme_item_list(
      array(
        'items' => $skip_link_items,
        'type' => 'ul',
        'title' => NULL,
        'attributes' => array(),
      )
    );
    // Have to set both ['#markup'] and ['content']['#markup'].
    $page[$skip_block_region][ACCESSIBLE_SKIP_LINKS_BID]['content']['#markup'] = $markup;
    $page[$skip_block_region][ACCESSIBLE_SKIP_LINKS_BID]['#markup'] = $markup;
  }
  else {
    // Do not render the block.
    unset($page[$skip_block_region][ACCESSIBLE_SKIP_LINKS_BID]);
  }
}

/**
 * Implements hook_block_info().
 */
function accessible_skip_links_block_info() {
  $blocks['accessible_skip_links'] = array(
    'info' => t('Skip Links Block'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function accessible_skip_links_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'accessible_skip_links':
      $block['subject'] = '';
      // Block content must not be empty so that the block is rendered.
      $block['content'] = 'To be replaced on page build';
      break;
  }
  return $block;
}

/**
 * Implements hook_block_view_alter().
 */
function accessible_skip_links_block_view_alter(&$data, &$block) {
  $skip_link_data = _skip_link_get_data($block);
  if ($skip_link_data) {
    $html_id = 'skip_link-block-' . $block->module . '-' . $block->delta;
    $block->skip_link_data = array(
      'id' => $html_id,
      'title' => $skip_link_data['title'],
    );
  }
}

/**
 * Implements hook_form_alter().
 */
function accessible_skip_links_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'block_admin_configure':
      $block = new stdClass();
      $block->module = $form['module']['#value'];
      $block->delta = $form['delta']['#value'];
      $skip_link_data = _skip_link_get_data($block);
      $form['skip_link'] = array(
        '#type' => 'fieldset',
        '#title' => t('Accessible Skip Links'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#group' => 'visibility',
        '#description' => t('Accessible Skip Links Configuration'),
      );
      $form['skip_link']['skip_link_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Accessible Skip Link Title'),
        '#description' => t('Include a Skip Link to this block using the provided title. Leave blank to exclude the link.'),
        '#default_value' => !empty($skip_link_data['title']) ? $skip_link_data['title'] : '',
      );
      $form['#submit'][] = 'accessible_skip_links_block_save_config';
      break;
  }
  return $form;
}

/**
 * Our submit handler.
 */
function accessible_skip_links_block_save_config($form, &$form_state) {
  $block = new stdClass();
  $block->module = $form['module']['#value'];
  $block->delta = $form_state['values']['delta'];
  $title = trim($form_state['values']['skip_link_title']);
  $data = array(
    'title' => $form_state['values']['skip_link_title'],
  );
  if (empty($data['title'])) {
    _skip_link_delete_data($block);
    return;
  }
  _skip_link_save_data($block, $data);
}

/**
 * Utility function to generate a skip link.
 *
 * @param (string) $title
 *   The translated title of the link.
 *
 * @param (string) $html_id
 *   The html id to link to.
 */
function _accessible_skip_links_generate_skip_link($title, $html_id) {
  $url = '';
  $skip_title = t('Skip to @skip_link_title', array('@skip_link_title' => t($title)));
  $options = array(
    'fragment' => $html_id,
    'external' => TRUE,
    'attributes' => array(
      'title' => $skip_title,
      'class' => array(
        'element-invisible',
        'element-focusable',
      ),
    ),
  );

  return array('title' => $skip_title, 'url' => $url, 'options' => $options);
}

/**
 * Utility: save block skip link configuration.
 */
function _skip_link_save_data($block, $data) {
  if (empty($block->module) || empty($block->delta)) {
    return FALSE;
  }
  $varname = ACCESSIBLE_SKIP_LINKS_PREFIX . $block->module . '_' . $block->delta;
  variable_set($varname, $data);
}

/**
 * Utility: Delete a block's skip link configuration.
 *
 * @param (object) $block
 *   A Block object.
 */
function _skip_link_delete_data($block) {
  if (!isset($block->module) && !isset($block->delta)) {
    return FALSE;
  }
  $varname = ACCESSIBLE_SKIP_LINKS_PREFIX . $block->module . '_' . $block->delta;
  variable_del($varname);
}

/**
 * Utility: returns the skip link data for a block.
 *
 * @param (object) $block
 *   The block.
 *
 * @return (array)
 *   containing display_link and title_link variable, or FALSE.
 */
function _skip_link_get_data($block) {
  if (!isset($block->module) && !isset($block->delta)) {
    return FALSE;
  }
  $varname = ACCESSIBLE_SKIP_LINKS_PREFIX . $block->module . '_' . $block->delta;
  return variable_get($varname, FALSE);
}
