<?php

/**
 * @file
 * SMSPay payment method. More info at http://smspay.io .
 */

// SMSPay transaction mode definitions:
define('SMSPAY_MODE_LIVE', 'live');
define('SMSPAY_MODE_TEST', 'test');
define('SMSPAY_URL_LIVE', 'https://api.smspay.io/v1');
define('SMSPAY_URL_TEST', 'http://api.smspay.devz.no/v1');
define('SMSPAY_LOGIN_PATH', '/login');
define('SMSPAY_PAYMENTS_PATH', '/payments');
//define('SMSPAY_COUNTRY_CODES', '');

/**
 * Implements hook_menu().
 */
function commerce_smspay_menu() {
  $items = array();

  $items['commerce_smspay/success'] = array(
    'title' => 'SMSPay success',
    'page callback' => 'commerce_smspay_callback_success',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'file' => 'includes/commerce_smspay.callbacks.inc',
  );

  $items['commerce_smspay/failure'] = array(
    'title' => 'SMSPay failure',
    'page callback' => 'commerce_smspay_callback_failure',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    'file' => 'includes/commerce_smspay.callbacks.inc',
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_smspay_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_smspay'] = array(
    'title' => t('SMSPay payment'),
    'description' => t('SMSPay payment gateway.'),
    'active' => TRUE,
    'offsite' => FALSE,
  );

  $payment_methods['commerce_smspay_offline'] = array(
    'title' => t('SMSPay payment - Offline'),
    'description' => t('SMSPay payment gateway.'),
    'active' => TRUE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );
 
  return $payment_methods;
}

/**
 * Get default country codes.
 */
function commerce_smspay_get_default_coutry_codes() {
  $codes = '880,32,226,359,387,1246,681,590,1441,673,591,973,257,229,975,1876,267,685,599,55,1242,441534,375,501,7,250,381,670,262,993,992,40,690,245,1,502,30,240,590,81,592,44,594,995,1473,44,241,503,224,220,299,350,233,968,216,962,385,509,36,852,504,58,1787,1939,970,680,351,47|1,595,964,507,689,675,51,92,63,870,48,508,260,212,372,20,27,593,39,84,677,251,252,263,966,34,291,382,373,261,590,212,377,998,95,223,853,976,692,389,230,356,265,960,596,1670,1664,222,441624,256,255,60,52,972,33,246,290,358,679,500,691,298,505,31,47,264,678,687,227,672,234,64,977,674,683,682,225,41,57,86,237,56,61,1,242,236,243,420,357,61,506,599,238,53,268,963,599,996,254,211,597,686,855,1869,269,239,421,82,386,850,965,221,378,232,248,7,1345,65,46,249,1809,1829,1767,253,45,1284,49,967,213,1,598,262,1,961,1758,856,688,886,1868,90,94,423,371,676,370,352,231,266,66,228,235,1649,218,379,1784,971,376,1268,93,1264,1340,354,98,374,355,244,1684,54,61,43,297,91,35818,994,353,62,380,974,258';

  return $codes;
}

/**
 * Returns the default settings for the SMSPay payment method.
 */
function commerce_smspay_default_settings() {
  return array(
    'username' => '',
    'password' => '',
    'mode' => SMSPAY_MODE_TEST,
    'codes' => commerce_smspay_get_default_coutry_codes(),
    'log' => array('request' => '0', 'response' => '0'),
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_smspay_settings_form($settings = NULL) {
  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_smspay_default_settings();

  $form = array();

  $form['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant username'),
    '#default_value' => $settings['username'],
    '#required' => TRUE,
  );
  $form['password'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#default_value' => $settings['password'],
    '#required' => TRUE,
  );
  $form['mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Adjust to live transactions when you are ready to start processing real payments.'),
    '#options' => array(
      SMSPAY_MODE_LIVE => t('Live'),
      SMSPAY_MODE_TEST => t('Test'),
    ),
    '#default_value' => $settings['mode'],
  );
  
  $form['codes'] = array(
    '#type' => 'textarea',
    '#title' => t('Country codes'),
    '#description' => t('Mobile country codes that will appear on checkout payment fieldset. Add |1 to the code you wish to be selected by default'),
    '#default_value' => $settings['codes']
  );

  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );

  return $form;
}

/**
 * Payment method callback: settings form.
 */
function commerce_smspay_offline_settings_form($settings = NULL) {
  return commerce_smspay_settings_form($settings);
}

/**
 * Payment method callback: submit form.
 */
function commerce_smspay_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  drupal_add_css(drupal_get_path('module', 'commerce_smspay') . '/commerce_smspay.css');

  $settings = (array) $payment_method['settings'] + commerce_smspay_default_settings();

  $codes = explode(',', $settings['codes']);
  $code_options = array();
  foreach ($codes as $code) {
    $default = explode('|', $code);
    if (count($default) > 1) {
      $code_options[$default[0]] = '+' . $default[0];
      $default_code = $default[0];
    } else {
      $code_options[$code] = '+' . $code;
    }
  }
  asort($code_options);

  $form = array();

  $form['mobile'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('commerce-smspay'))
  );

  $form['mobile']['country_code'] = array(
    '#type' => 'select',
    '#required' => TRUE,
    '#title' => t('Country code'),
    '#options' => $code_options,
    '#default_value' => $default_code,
  );

  $form['mobile']['number'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Mobile number'),
  );

  if (module_exists('elements')) {
    $form['mobile']['number']['#type'] = 'telfield';
  }

  return $form;
}

/**
 * Offline payment method callback: submit form.
 */
function commerce_smspay_offline_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = commerce_smspay_submit_form($payment_method, $pane_values, $checkout_pane, $order);
  $form['#validate'][] = 'commerce_smspay_submit_form_validate';
  return $form;
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_smspay_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  $country_code = '+' . $pane_values['mobile']['country_code'];
  $number = $pane_values['mobile']['number'];
  if (!preg_match('/^\+\d+$/', $country_code . $number)) {
    form_set_error('', t('Mobile number with invalid format.'));
  }
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_smspay_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $has_error = FALSE;

  $country_code = $pane_values['mobile']['country_code'];
  $number = $pane_values['mobile']['number'];
  $complete_number = '+' . $country_code . $number;

  $order->data['commerce_smspay'] = $pane_values;

  // Every attempted transaction should result in a new transaction entity being
  // created for the order to log either the success or the failure.
  $transaction = commerce_smspay_transaction($payment_method, $order, $charge);

  // Login and gget auth token.
  $response = commerce_smspay_login($payment_method);

  if (!$response) {
    drupal_set_message(t('An error occurred when communicating with SMSPay gateway. Please, contact the system administrator.'), 'error');
    watchdog('commerce_smspay', t('Unable to connect to SMSPay API.'));
    $has_error = TRUE;
  }

  $result = json_decode($response);

  if (isset($result->statusCode) && $result->statusCode !== 200) {
    drupal_set_message(t('An error occurred when communicating with SMSPay gateway. Please, contact the system administrator.'), 'error');
    watchdog('commerce_smspay', t('Error: :code, :error, :message', array(':code' => $result->statusCode, ':error' => $result->error, ':message' => $result->message)));
    $has_error = TRUE;
  }
  
  $response = commerce_smspay_send_order($result, $payment_method, $order, $complete_number);

  if (!$response) {
    drupal_set_message(t('An error occurred when communicating with SMSPay gateway. Please, contact the system administrator.'), 'error');
    watchdog('commerce_smspay', t('Unable to connect to SMSPay API.'));
    $has_error = TRUE;
  }

  $result = json_decode($response);
  if (isset($result->statusCode) && $result->statusCode !== 200) {
    drupal_set_message(t('An error occurred when communicating with SMSPay gateway. Please, contact the system administrator.'), 'error');
    watchdog('commerce_smspay', t('Error: :code, :error, :message', array(':code' => $result->statusCode, ':error' => $result->error, ':message' => $result->message)));
    $has_error = TRUE;
  }
  
  // If any error occurred the transaction gets cancelled.
  if ($has_error) {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $transaction->message = t('Number: @country_code @number; Error: @message');
    $transaction->message_variables = array(
      '@country_code' => $pane_values['mobile']['country_code'],
      '@number' => $pane_values['mobile']['number'],
      '@message' => isset($result->message)?$result->message:t('Unable to connect to SMSPay API.'),
    );
    commerce_payment_transaction_save($transaction);
    return FALSE;
  }

  // All good. Update transaction remote references.
  // Need to validate if remote reference hasn't been filled yet because SMSPay service can trigger the failure callback before we get here.
  if (!$transaction->remote_id || $transaction->remote_id == '') {
    $transaction->remote_id = $result->reference;
    $transaction->remote_status = $result->status;
    commerce_payment_transaction_save($transaction);
  }

  return TRUE;
}

/**
 * Offline payment method callback: submit form submission.
 */
function commerce_smspay_offline_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $country_code = $pane_values['mobile']['country_code'];
  $number = $pane_values['mobile']['number'];
  $complete_number = '+' . $country_code . $number;

  $order->data['commerce_smspay'] = $pane_values;
}

/**
 * Payment method callback: redirect form.
 */
function commerce_smspay_offline_redirect_form($form, &$form_state, $order, $payment_method) {
  $settings = $form_state['build_info']['args'][0]->data['commerce_smspay'];
  $charge = $order->commerce_order_total[LANGUAGE_NONE][0];

  if (commerce_smspay_submit_form_submit($payment_method, $form, $settings, $order, $charge)) {
    drupal_goto('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key']);    
  } else {
    drupal_goto('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key']);    
  }
}

/**
 * Creates a SMSPay payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_smspay_transaction($payment_method, $order, $charge) {
  $details = $order->data['commerce_smspay']['mobile'];

  $transaction = commerce_payment_transaction_new('commerce_smspay', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;

  $transaction->message = t('Mobile number: +@country_code @number');
  $transaction->message_variables = array(
    '@country_code' => $details['country_code'],
    '@number' => $details['number'],
  );

  commerce_payment_transaction_save($transaction);
  return $transaction;
}

/**
 * Submits an API login request to SMSPay.
 *
 * @param $payment_method
 *   The payment method instance array associated with this API request.
 */
function commerce_smspay_login($payment_method) {
  $values = array(
    'user' => $payment_method['settings']['username'],
    'password' => $payment_method['settings']['password'],
  );

  $response = commerce_smspay_request($payment_method, SMSPAY_LOGIN_PATH, null, $values);

  return $response;
}

/**
 * Send order to SMSPay.
 * 
 * @param object $sms_account
 *   The response object requested via login method.
 * @param array $payment_method
 *   The payment method instance array associated with this API request.
 * @param object $order
 *   The order instance associated with this API request.
 * @param string $number
 *   The mobile phone number to send the order payment notification.
 */
function commerce_smspay_send_order($sms_account, $payment_method, $order, $number) {
  global $base_url;

  // Let's include the values filling process in a try/catch block in case some of the default fields got deleted.
  try{
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    $nvp = array(
      'phone' => $number,
      'invoice' => $order->order_number,
      'currency' => $order_wrapper->commerce_order_total->currency_code->value(),
      'merchant' => $sms_account->merchantId,
      'description' => '',
      'shipping' => 0,
    );

    $line_items = $order_wrapper->commerce_line_items->value();
    foreach ($line_items as $key => $line_item) {
      $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

      $nvp += array(
        'item_number_'.($key+1) => $line_item->line_item_id,
        'item_name_'.($key+1) => $line_item->line_item_label,
        'amount_'.($key+1) => $line_item_wrapper->commerce_unit_price->amount->value(),
        'quantity_'.($key+1) => $line_item_wrapper->quantity->value(),
        'shipping_'.($key+1) => 0,
      );
    }
    
    // Set callbacks URLs.
    $nvp += array(
      'success_url' => $base_url . '/commerce_smspay/success',
      'failure_url' => $base_url . '/commerce_smspay/failure',
    );
  }catch (Exception $ex) {
    watchdog('commerce_smspay', t('An internal error occured.'));
    return FALSE;
  }
  
  $response = commerce_smspay_request($payment_method, SMSPAY_PAYMENTS_PATH, $sms_account->token, $nvp);

  return $response;
}

/**
 * Submits an API request to SMSPay.
 *
 * @param $payment_method
 *   The payment method instance array associated with this API request.
 */
function commerce_smspay_request($payment_method, $path = '', $auth_token = null, $values = array(), $post = 1) {
  // Get the API endpoint URL for the method's transaction mode.
  if ($payment_method['settings']['mode'] == SMSPAY_MODE_LIVE) {
    $url = SMSPAY_URL_LIVE;
  } else {
    $url = SMSPAY_URL_TEST;
  }
  
  // Call request hooks available on other modules.
  drupal_alter('commerce_smspay_request', $values);

  // Log the request if specified.
  if ($payment_method['settings']['log']['request'] == 'request') {
    watchdog('commerce_smspay', 'SMSPay request to @url: !param', array('@url' => $url, '!param' => '<pre>' . check_plain(print_r($values, TRUE)) . '</pre>'), WATCHDOG_DEBUG);
  }

  // Prepare the name-value pair array to be sent as a string.
  $pairs = array();

  foreach ($values as $key => $value) {
    $pairs[] = $key . '=' . urlencode($value);
  }

  // Setup the cURL request.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url . $path);
  if ($auth_token) {
    //curl_setopt($ch, CURLOPT_HEADER, 1);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Authorization: Bearer ' . $auth_token));
  }
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, $post);
  curl_setopt($ch, CURLOPT_POSTFIELDS, implode('&', $pairs));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
  $information = curl_getinfo($ch);
  $result = curl_exec($ch);

  // Log any errors to the watchdog.
  if ($error = curl_error($ch)) {
    watchdog('commerce_smspay', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
    return FALSE;
  }
  curl_close($ch);

  $response = $result;

  // Log the response if specified.
  if ($payment_method['settings']['log']['response'] == 'response') {
    watchdog('commerce_smspay', 'SMSPay response: !param', array('!param' => '<pre>' . check_plain(print_r($response, TRUE)) . '</pre>', WATCHDOG_DEBUG));
  }

  return $response;
}