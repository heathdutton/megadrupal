<?php

/**
 * Implements hook_menu().
 */
function civicrm_entities_flexiform_menu() {
  return array(
    'flexiforms/civicrm/country/%' => array(
      'title' => 'Get states for country',
      'page callback' => 'civicrm_entities_flexiform_country_ajax',
      'page arguments' => array(3),
      'access callback' => true,
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
function civicrm_entities_flexiform_menu_alter(&$items) {
  // Some of Flexiforms important logic is in files others than the main module file.
  // These files don't seem to get loaded in AJAX files automatically so we need to do some manual bootstrapping.
  $items['file/ajax']['file'] = 'bootstrap_flexiform.inc';
  $items['file/ajax']['file path'] = drupal_get_path('module', 'civicrm_entities_flexiform');
}

/**
 * Implements hook_entity_info_alter().
 */
function civicrm_entities_flexiform_entity_info_alter(&$entity_info) {
  foreach($entity_info as $entity_name => &$entity) {
    if(stripos($entity_name, 'civicrm_') === 0) {
      // Let's set some entity admin ui info.
      $entity['file'] = 'civicrm_entity_ui_controller.inc';
      $entity['path'] = 'admin/structure/civicrm';
      foreach($entity['bundles'] as $bundle_name => &$bundle) {
        $bundle['admin']['path'] = 'admin/structure/civicrm/manage/' . $bundle_name;
      }
    }
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function civicrm_entities_flexiform_entity_property_info_alter(&$info) {
  foreach($info as $entity_name => &$entity) {
    if(stripos($entity_name, 'civicrm_') === 0) {
      foreach($entity['properties'] as $property_name => &$property) {
        // Set a validation wrapper handler.
        $property['validation callback'] = 'civicrm_entities_flexiform_civicrm_validation';
      }
    }
  }
}

/**
 * Implements hook_flexiform_element_info_alter().
 */
function civicrm_entities_flexiform_flexiform_element_info_alter(&$elements) {
  static $processed;
  if(!isset($processed)) {
    $processed = array();
    foreach($elements as $entity => $details) {
      if(stripos($entity, 'civicrm_') === 0) {
        $content_elements = CiviCrmEntitiesFlexiformElementBase::getEntityFields(str_ireplace('civicrm_', '', $entity));
        $processed = array_merge($processed, $content_elements);
      }
    }

  }
  $elements = array_merge($elements, $processed);
}


/**
 * Implements hook_flexiform_entity_getter_info().
 */
function civicrm_entities_flexiform_flexiform_entity_getter_info() {
  return array(
    'civicrm_contact' => array(
      'label' => 'CiviCRM Contact',
      'entity_types' => array(
        'civicrm_contact',
      ),
      'class' => 'FlexiformCiviCrmContact',
      'file' => 'flexiform_entity_getters/civicrm_contact.inc'
    ),
    'civicrm_address' => array(
      'label' => 'CiviCRM Address',
      'entity_types' => array(
        'civicrm_address',
      ),
      'class' => 'FlexiformCiviCrmAddress',
      'file' => 'flexiform_entity_getters/civicrm_address.inc'
    ),
    'civicrm_email' => array(
      'label' => 'CiviCRM Email',
      'class' => 'FlexiformCiviCrmEmail',
      'entity_types' => array(
        'civicrm_email',
      ),
      'file' => 'flexiform_entity_getters/civicrm_email.inc'
    ),
    'civicrm_phone' => array(
      'label' => 'CiviCRM Phone',
      'entity_types' => array(
        'civicrm_phone',
      ),
      'class' => 'FlexiformCiviCrmPhone',
    ),
    'civicrm_website' => array(
      'label' => 'CiviCRM Website',
      'class' => 'FlexiformCiviCrmWebsite',
      'entity_types' => array(
        'civicrm_website',
      ),
    ),     
  );
}

/**
 * Implements hook_ctools_civicrm_alter_drupal_entities().
 */
function civicrm_entities_flexiform_civicrm_alter_drupal_entities(&$whitelist) {
  //add the civi element website to the core entites list
  // see _civicrm_entity_enabled_entities in civicrm_entity.module
  $whitelist['civicrm_website'] = 'website';
}


/**
 * Implements hook_ctools_plugin_type().
 */
function civicrm_entities_flexiform_ctools_plugin_type() {
  return array(
    'validator' => array(
      'use hooks' => FALSE,
    ),
  );
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function civicrm_entities_flexiform_ctools_plugin_directory($module, $plugin) {
  if ($module == 'property_validation' && $plugin == 'validator') {
    return 'plugins/' . $plugin;
  }
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implementation of hook_ctools_plugin_api().
 *
 * Tell Ctools that we support the default_field_validation_rules API.
 */
function civicrm_entities_flexiform_ctools_plugin_api($owner, $api) {
  if ($owner == 'property_validation' && $api == 'default_property_validation_rules') {
    return array('version' => 2);
  }
}

/**
 * Implements hook_form_alter().
 */
function civicrm_entities_flexiform_form_alter(&$form, &$form_state, $form_id) {
  // Sort the flexiform field items for convenience.
  if($form_id == 'flexiform_manage_form_fields_form') {
    $elements = &$form['fields']['_add_element']['field']['#options'];
    if(isset($elements['CivCRM '])) {
      asort($elements['CivCRM ']);
    }
  }

  if(stripos($form_id, 'flexiform__') !== false) {
    // Add the JS files specific to this module.
    $module_path = drupal_get_path('module', 'civicrm_entities_flexiform');
    $form['#attached']['js'][] = array(
      'data' => $module_path . '/js/civicrm-flexiform.js',
      'type' => 'file',
    );
    $form['#attached']['css'][] = array(
      'data' => $module_path . '/css/civicrm-entities-flexiform.css',
      'type' => 'file',
    );
  }
}

/**
 * Implements hook_views_api().
 */
function civicrm_entities_flexiform_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_views_data_alter().
 */

function civicrm_entities_flexiform_views_data_alter(&$data) { 
  $data['civicrm_website']['url']['field']['handler'] = 'civicrm_handler_field_website';
}

/**
 * AJAX callback to return states/provinces for the country.
 *
 * @param int $country_id
 */
function civicrm_entities_flexiform_country_ajax($country_id) {
  civicrm_initialize();
  $states = CRM_Core_PseudoConstant::stateProvinceForCountry($country_id);
  // Order the states alphabetically.
  uasort($states, 'civicrm_entities_flexiform_sort_states');
  drupal_json_output($states);
  drupal_exit();
}

function civicrm_entities_flexiform_sort_states($a, $b) {
  if ($a == $b) {
    return 0;
  }
  return ($a < $b) ? -1 : 1;
}
