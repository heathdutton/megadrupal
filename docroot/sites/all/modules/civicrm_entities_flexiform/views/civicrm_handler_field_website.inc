<?php
/*
 +--------------------------------------------------------------------+
 | CiviCRM version 4.4                                               |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License and the CiviCRM Licensing Exception along                  |
 | with this program; if not, contact CiviCRM LLC                     |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 * Field handler for website field
 *
 * @ingroup civicrm_field_handlers
 */
class civicrm_handler_field_website extends civicrm_handler_field {
  static $_websiteType;
  function construct() {
    parent::construct();
    if (!self::$_websiteType) {
      if (!civicrm_initialize()) {
        return;
      }
      self::$_websiteType = CRM_Core_PseudoConstant::get('CRM_Core_DAO_Website', 'website_type_id', array(), 'validate');
    }
  }

  function option_definition() {
    $options = parent::option_definition();
    $options['website_type'] = array('default' => 0);
    return $options;
  }

  function options_form(&$form, &$form_state) {
    parent::options_form($form, $form_state);
    $websiteOptions = array(0 => 'Any');
    foreach (self::$_websiteType as $id => $type) {
      $websiteOptions[$id] = $type;
    }
    
    $label = $this->label();
    $form['label'] = array(
      '#type' => 'textfield',
      '#title' => t('Label'),
      '#default_value' => $label,
      '#dependency' => array(
        'edit-options-custom-label' => array(1),
      ),
      '#weight' => -102,
    );
    $form['website_choices'] = array(
      '#type' => 'fieldset',
      '#title' => t('CiviCRM Website Display Options'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => '<strong>Note:</strong> it is possible to choose display options that result in nothing being displayed for this field',
      '#weight' => 1,
    );    
    $form['website_type'] = array(
      '#type' => 'radios',
      '#title' => 'Website type for this field',
      '#options' => $websiteOptions,
      '#description' => t('Website type to be displayed for this field'),
      '#default_value' => $this->options['website_type'],
      '#fieldset' => 'website_choices',
    );
  }

  function ensure_my_table() {
    if (!isset($this->table_alias)) {
      if (!method_exists($this->query, 'ensure_table')) {
        vpr_trace();
        exit;
      }
      if (isset($this->options['website_type']) && $this->options['website_type']) {
        $join    = $this->get_join();
        $extra   = array();
        $extra[] = array(
          'value' => $this->options['website_type'],
          'numeric' => TRUE,
          'field' => 'website_type_id',
          'operator' => '=',
        );
        $join->extra       = $extra;
        $this->table_alias = $this->query->add_table($this->table, $this->relationship, $join);
      }
      else {
        $join              = $this->get_join();
        $this->table_alias = $this->query->add_table($this->table, $this->relationship, $join);
      }
    }
    return $this->table_alias;
  }
}

