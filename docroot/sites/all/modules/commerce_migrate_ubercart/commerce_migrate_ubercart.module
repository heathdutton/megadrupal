<?php

define('SOURCE_DATABASE_DRUPAL_VERSION', variable_get('commerce_migrate_ubercart_source_database_api_version', 'd7'));
/**
 * Implements hook_menu().
 */
function commerce_migrate_ubercart_menu() {
  $items['admin/content/migrate/ubercart_migration_options'] = array(
    'title' => 'Configure Ubercart Migration',
    'description' => 'Database configuration for Commerce Migrate Ubercart',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_migrate_ubercart_admin_form'),
    'access arguments' => array('migration information'),
    'weight' => 111,
  );
  return $items;
}

/**
 * Implements hook_entity_info_alter() to prevent locking behavior in the
 * commerce order entity.
 *
 * @param $info
 */
function commerce_migrate_ubercart_entity_info_alter(&$entity_info) {
  unset($entity_info['commerce_order']['locking mode']);
}

/**
 * Administrative form to set migration options.
 */
function commerce_migrate_ubercart_admin_form($form, &$form_state) {
  $form['commerce_migrate_ubercart_source_database'] = array(
    '#type' => 'textfield',
    '#title' => t('Source database key in settings.php'),
    '#description' => t('The settings.php file in this site must have two databases configured for most migration situations (this site\'s database, named default, plus a second one using the key name of your choice) unless you are migrating from within the same database. If left as "default" the current database will be used (and it must have all the Ubercart tables in it).'),
    '#default_value' => variable_get('commerce_migrate_ubercart_source_database', 'default'),
    '#required' => true,
  );
  $form['commerce_migrate_ubercart_source_database_api_version'] = array(
    '#type' => 'select',
    '#title' => t('Source Database Drupal major version'),
    '#options' => array(
      'd6' => t('Drupal 6'),
      'd7' => t('Drupal 7'),
    ),
    '#default_value' => variable_get('commerce_migrate_ubercart_source_database_api_version', 'd7'),
  );
  $filters = filter_formats();
  foreach ($filters as $machine_name => $info) {
    $options[$machine_name] = $info->name;
  }
  $form['commerce_migrate_ubercart_default_filter_format'] = array(
    '#type' => 'select',
    '#title' => t('Default filter format to be used if the source input format cannot be correlated to input formats in this Drupal system'),
    '#description' => t('The input filters in one Drupal installation may not map to this Drupal install. First, get all your filters set up to be the same. This filter will be used as the fallback. Note that this choice may have security implications, if you accidentally set the format to something you do not want, like "php".'),
    '#options' => $options,
    '#default_value' => variable_get('commerce_migrate_ubercart_default_filter_format', 'plain_text'),
  );

  $form['commerce_migrate_ubercart_user_map_ok'] = array(
    '#type' => 'checkbox',
    '#title' => t('User ownership should be mapped'),
    '#description' => t('Check this box if the users should be mapped. If user ownership should not be mapped they will be assigned to user 1.'),
    '#default_value' => variable_get('commerce_migrate_ubercart_user_map_ok', FALSE),
  );
  $form['commerce_migrate_ubercart_user_migration_class'] = array(
    '#type' => 'textfield',
    '#title' => t('Machine name of migration to be used to map users'),
    '#description' => t('(required) When user ownership is being mapped it is necessary to create a user migration (using something like migrate_d2d module) and put the machine name here. Incoming uids will then be mapped using that migration. You must previously have run this migration before importing.'),
    '#default_value' => variable_get('commerce_migrate_ubercart_user_migration_class', ""),
    '#states' => array(
      'visible' => array(
        ':input[name=commerce_migrate_ubercart_user_map_ok]' => array('checked' => TRUE)
    )),
  );

  foreach (commerce_customer_profile_types() as $type => $profile_type) {
    $cust_options[$profile_type['type']] = $profile_type['name'];
  }
  $form['commerce_migrate_ubercart_customer_profile_type'] = array(
    '#type' => 'select',
    '#title' => t('Commerce customer profile type'),
    '#description' => t('It is possible to have more than one customer profile type in Drupal Commerce. Select the one you want to use for the incoming data.'),
    '#options' => $cust_options,
    '#default_value' => variable_get('commerce_migrate_ubercart_customer_profile_type', ''),
    '#required' => true,
  );

  $form['commerce_migrate_ubercart_tax_mapping'] = array(
    '#type' => 'textarea',
    '#title' => t('Tax Mapping'),
    '#description' => t('Map an Ubercart tax name to a Commerce tax rate (machine name). One per line. separate mappings using the pipe character. e.g. <ubercart tax name>|<commerce tax rate machine name>. Taxes will still be migrated even if you don\'t do this, but they won\'t have a label when listing out price components. <em>Hint: The Ubercart tax name we\'re looking for is in the "title" column of the "uc_order_line_items" table. Commerce tax rates (and machine names) are listed at <a href="/admin/commerce/config/taxes">admin/commerce/config/taxes</a></em>'),
    '#size' => 5,
    '#default_value' => variable_get('commerce_migrate_ubercart_tax_mapping', ''),
  );

  $form['commerce_migrate_ubercart_shipping_mapping'] = array(
    '#type' => 'textarea',
    '#title' => t('Shipping Mapping'),
    '#description' => t('Map an Ubercart shipping line item title to a Commerce shipping service (machine name). One per line. separate mappings using the pipe character. e.g. <ubercart shipping line item name>|<commerce shipping service machine name>. If you skip this mapping, shipping line items will be imported as a generic "Shipping" service. <em>Hint: The Ubercart shipping line item title we\'re looking for is in the "title" column of the "uc_order_line_items" table. Commerce shipping services (and machine names) are listed at <a href="/admin/commerce/config/shipping">admin/commerce/config/shipping</a></em>'),
    '#size' => 5,
    '#default_value' => variable_get('commerce_migrate_ubercart_shipping_mapping', ''),
  );

  return system_settings_form($form);
}

/**
 * Make sure that we can actually access the database and directory provided
 */
function commerce_migrate_ubercart_admin_form_validate($form, &$form_state) {
  // Check to see whether we can access the database
  $migration_source_db = $form_state['values']['commerce_migrate_ubercart_source_database'];
  if (empty($GLOBALS['databases'][$migration_source_db])) {
    form_set_error('commerce_migrate_ubercart_source_database', t('The database key $databases["%key"] does not exist', array('%key' => $migration_source_db)));
  }
  else {
    try {
      $connection = Database::getConnection('default', $migration_source_db);
      $query = $connection->select('uc_product_classes', 'upc')
        ->fields('upc', array('pcid'))
        ->countQuery()->execute()->fetchField();
    }
    catch (Exception $e) {
      form_set_error('commerce_migrate_ubercart_source_database', t('The database key $databases["%key"] is not functional (Exception message %msg', array('%key' => $migration_source_db, '%msg' => $e->getMessage())));
    }
    $x = 1;
  }
  migrate_static_registration();
}

/**
 * Decide whether we have an external database and return the correct connection.
 *
 * If the migration source database exists, we will get a connection to it
 * instead of using the $databases['default'].
 */
function commerce_migrate_ubercart_get_source_connection() {
  $migration_source_db = variable_get('commerce_migrate_ubercart_source_database', 'default');
  if (empty($GLOBALS['databases'][$migration_source_db]['default'])) {
    $migration_source_db = NULL;
  }
  $connection = Database::getConnection('default', $migration_source_db);
  return $connection;
}

/**
 * Returns a mapping array
 */
function commerce_migrate_ubercart_get_mapping_array($variable_name) {
  if ($config = variable_get($variable_name, '')) {
    return list_extract_allowed_values($config, 'list_text', FALSE);
  }
  else {
    return array();
  }
}
