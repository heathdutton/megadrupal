<?php
/**
 * @file
 * Main module file.
 */

/**
 * Implements hook_menu().
 */
function mail_whitelist_menu() {
  $items = array();

  $items['admin/config/system/mail-whitelist'] = array(
    'title' => 'Mail Whitelist',
    'description' => 'Administer the Mail Whitelist settings.',
    'access arguments' => array('administer mail whitelist'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mail_whitelist_settings_form'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_module_implements_alter().
 */
function mail_whitelist_module_implements_alter(&$implementations, $hook) {
  if (in_array($hook, array('mail_alter'))) {
    $group = $implementations['mail_whitelist'];
    unset($implementations['mail_whitelist']);
    $implementations['mail_whitelist'] = $group;
  }
}

/**
 * Implements hook_permission().
 */
function mail_whitelist_permission() {
  return array(
    'administer mail whitelist' => array(
      'title' => t('Administer Mail Whitelist settings'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_mail_alter().
 */
function mail_whitelist_mail_alter(&$message) {
  global $base_url;

  if ($message['send']) {
    $regex = variable_get('mail_whitelist_url_regex', '(\.|-|/)(qa|test|local|localhost|dev)(\.|$)');

    if ($regex == '' || preg_match('#' . $regex . '#i', $base_url)) {
      // Disable sending by default, unless there are extra bcc recipients.
      $message['send'] = (variable_get('mail_whitelist_bcc', '') != '');

      if ($whitelist = variable_get('mail_whitelist_whitelist', array())) {
        // Get the whitelist regex from the cache.
        if ($cache = cache_get('mail_whitelist:whitelist_regex')) {
          $regex = $cache->data;
        }
        else {
          // Create a new regex.
          foreach ($whitelist as $key => $mail) {
            $mail = preg_quote($mail, '#');
            $mail = str_replace('\*', '[^<>,\s]+?', $mail);
            $whitelist[$key] = '(?:' . $mail . ')|(?:[^<>,"]+<' . $mail . '>)|(?:"[^"]+"[ ]{0,1}<' . $mail . '>)';
          }

          $regex = '#(?:^| )(' . implode('|', $whitelist) . ')(?:,|$)#i';

          // Cache it.
          cache_set('mail_whitelist:whitelist_regex', $regex);
        }

        // Collect all recipients.
        $recipients = array('to' => $message['to']);

        if (isset($message['headers']['cc'])) {
          $recipients['cc'] = $message['headers']['cc'];
        }

        if (isset($message['headers']['bcc'])) {
          $recipients['bcc'] = $message['headers']['bcc'];
        }

        // Loop over the recipients per type.
        foreach ($recipients as $type => $addresses) {
          // Make sure there's a space after each comma.
          $addresses = str_replace(array(', ', ','), array(',', ', '), $addresses);

          // Remove all none-whitelisted recipients.
          if (preg_match_all($regex, $addresses, $matches)) {
            $addresses = implode(', ', $matches[1]);

            if ($type == 'to') {
              $message['to'] = $addresses;
            }
            else {
              $message['headers'][$type] = $addresses;
            }

            // Continue to the sending.
            $message['send'] = TRUE;
          }
          elseif ($type == 'to') {
            $message['to'] = '';
          }
          else {
            unset($message['headers'][$type]);
          }
        }
      }
      elseif ($message['send']) {
        // No whitelist specified, remove all recipients.
        $message['to'] = '';

        if (isset($message['headers']['cc'])) {
          unset($message['headers']['bcc']);
        }

        if (isset($message['headers']['bcc'])) {
          unset($message['headers']['bcc']);
        }
      }

      // Add the extra bcc recipients.
      if ($bcc = variable_get('mail_whitelist_bcc', '')) {
        if (!empty($message['headers']['bcc'])) {
          $message['headers']['bcc'] .= ',' . $bcc;
        }
        else {
          $message['headers']['bcc'] = $bcc;
        }
      }
    }
  }
}

/**
 * Form builder; Builds the settings form.
 */
function mail_whitelist_settings_form($form, &$form_state) {
  $form['mail_whitelist_url_regex'] = array(
    '#type' => 'textfield',
    '#title' => t('Regular expression'),
    '#description' => t("Regular expression to enforce the whitelist on a matching base URL only. Don't specify the delimiters and leave empty to disable this check."),
    '#field_prefix' => '#',
    '#field_suffix' => '#i',
    '#default_value' => variable_get('mail_whitelist_url_regex', '(\.|-|/)(qa|test|local|localhost|dev)(\.|$)'),
    '#required' => FALSE,
  );

  $form['mail_whitelist_whitelist'] = array(
    '#type' => 'textarea',
    '#title' => t('Whitelist'),
    '#description' => t('List of e-mail addresses (one per line) that may receive mails. You may use * as a wildcard.'),
    '#default_value' => implode("\r\n", variable_get('mail_whitelist_whitelist', array())),
    '#required' => FALSE,
  );

  $form['mail_whitelist_bcc'] = array(
    '#type' => 'textfield',
    '#title' => t('Extra bcc'),
    '#description' => t('Send a copy of each mail to the specified e-mail address, separate multiple addresses with a comma.'),
    '#default_value' => variable_get('mail_whitelist_bcc', ''),
    '#required' => FALSE,
  );

  $form['#validate'][] = 'mail_whitelist_settings_form_validate';
  $form['#submit'][] = 'mail_whitelist_settings_form_submit';

  return system_settings_form($form);
}

/**
 * Form validation handler; Validates the settings form.
 */
function mail_whitelist_settings_form_validate($form, &$form_state) {
  $values = &$form_state['values'];

  // Check the regex syntax.
  if ($values['mail_whitelist_url_regex'] != '') {
    set_error_handler('_mail_withelist_test_regex');
    preg_match('#' . $values['mail_whitelist_url_regex'] . '#i', '');
    restore_error_handler();

    if (_mail_withelist_test_regex()) {
      form_set_error('mail_whitelist_url_regex', t('The regular expression is not valid.'));
    }
  }

  // Validate the extra BCC recipients.
  if ($values['mail_whitelist_bcc'] != '') {
    $bcc = explode(',', $values['mail_whitelist_bcc']);
    $bcc = array_map('trim', $bcc);

    foreach ($bcc as $mail) {
      if (!valid_email_address($mail)) {
        form_set_error('mail_whitelist_bcc', t('The BCC e-mail address %mail is not valid.', array('%mail' => $mail)));
      }
    }
  }
}

/**
 * Form validation handler; Validates the settings form.
 */
function mail_whitelist_settings_form_submit($form, &$form_state) {
  $values = &$form_state['values'];

  // Split the whitelist lines.
  $values['mail_whitelist_whitelist'] = preg_split('#[\r\n]+#', trim($values['mail_whitelist_whitelist']));
  $values['mail_whitelist_whitelist'] = array_filter($values['mail_whitelist_whitelist']);
  $values['mail_whitelist_whitelist'] = array_unique($values['mail_whitelist_whitelist']);

  // Clear the whitelist regex cache.
  cache_clear_all('mail_whitelist:whitelist_regex', 'cache');
}

/**
 * Temporary error handler to check for syntax errors in a regex.
 *
 * @param $errno
 *   The level of the error raised.
 * @param $errstr
 *   The error message.
 *
 * @return
 *   TRUE if an error was raised.
 */
function _mail_withelist_test_regex($errno = NULL, $errstr = NULL) {
  static $hit;

  if (!isset($hit)) {
    $hit = 0;
  }

  if (isset($errno) || isset($errstr)) {
    $hit++;
  }

  return ($hit > 0);
}
