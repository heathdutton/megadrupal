<?php
// $Id$

/**
 * @file
 *
 */

class LocationChooserTestCase extends DrupalWebTestCase {
  protected $user;
  protected $user2;
  protected $user3;

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Location chooser',
      'description' => 'Tests all functionality of location chooser module.',
      'group' => 'Location',
    );
  }

  function setUp() {

    parent::setUp('location', 'location_node', 'location_user', 'location_chooser');
    $this->user = $this->drupalCreateUser(array(
      'access content',
      'administer nodes',
      'bypass node access',
      'submit latitude/longitude',
      'administer site configuration',
      'access administration pages',
      'administer content types',
      'set own user location',
      'view own user location',
      'access user profiles',
    ));
    $this->user2 = $this->drupalCreateUser(array(
      'access content',
      'administer nodes',
      'bypass node access',
      'submit latitude/longitude',
      'administer site configuration',
      'access administration pages',
      'administer content types',
      'set own user location',
      'view own user location',
      'access user profiles',
    ));
    $this->drupalLogin($this->user);

  }
  
  private function locationSettings() {
    $settings = array(
      'multiple' => array('min' => 0, 'max' => 1, 'add' => 1),
      'form' => array('weight' => 10, 'collapsible' => 0, 'collapsed' => 0, 'fields' => array()),
      'display' => array('weight' => 0, 'hide' => array(), 'teaser' => 0, 'full' => 1),
      'rss' => array('mode' => 'simple'),
    );
    $weight = 0;
    foreach (location_field_names() as $field) {
      $settings['form']['fields'][$field] = array('collect' => 1, 'default' => '', 'weight' => $weight++);
      $settings['display']['hide'][$field] = 0;
    }
    unset($settings['form']['fields']['locpick']['default']);
    return $settings;
  }
  
  private function addLocationContentType($add = array()) {
    $nodetype = $this->drupalCreateContentType();
    $locationSettings = array_merge_recursive($this->locationSettings(), $add);
    variable_set('location_settings_node_' . $nodetype->type, $locationSettings);
    return $nodetype->type;
  }
  

  function testLocationChooser() {
    $settings = array();
    $target[0] = $this->addLocationContentType();
    $target[1] = $this->addLocationContentType();
    $source[0] = $this->addLocationContentType();
    $source[1] = $this->addLocationContentType();
    $normalnode = $this->addLocationContentType();
    variable_set('location_settings_user', array('form' => array('weight' => 0, 'collapsible' => 0, 'collapsed' => 0)));

    #variable_set('location_chooser_targets', array($target[0] => $target[0], $target[1] => $target[1]));
    #variable_set('location_chooser_node_sources', array($source[0] => $source[0], $source[1] => $source[1]));

    $this->drupalGet('admin/config/content/location/location-chooser');
    foreach ($target as $i => $iname) {
      $this->assertNoFieldChecked("edit-location-chooser-targets-$iname", "Target $iname ($i) is not checked");
      $edit["location_chooser_targets[$iname]"] = $iname;
    }
    foreach ($source as $i => $iname) {
      $this->assertNoFieldChecked("edit-location-chooser-node-sources-$iname", "Source $iname ($i) is not checked");
      $edit["location_chooser_node_sources[$iname]"] = $iname;
    }
    $this->drupalPost('admin/config/content/location/location-chooser', $edit, t('Save configuration'));
    foreach ($target as $i => $iname) {
      $this->assertFieldChecked("edit-location-chooser-targets-$iname", "Target $iname ($i) is checked");
    }
    foreach ($source as $i => $iname) {
      $this->assertFieldChecked("edit-location-chooser-node-sources-$iname", "Source $iname ($i) is checked");
    }

    $lc_weight = db_query("SELECT weight FROM {system} WHERE name = :name", array(':name' => 'location_chooser'))->fetchField();
    $l_weight = db_query("SELECT weight FROM {system} WHERE name = :name", array(':name' => 'location'))->fetchField();
    $this->assertTrue($lc_weight - $l_weight, "Location chooser weight is greater than Location weight ($lc_weight > $l_weight)");

    foreach ($source as $i => $type) {
      $sourcenode[$i] = $this->drupalCreateNode(array(
        'type' => $type,
        'title' => $type,
        'locations' => array(
          0 => array(
            'name' => $type,
          ),
        ),
      ));
      $this->assertTrue($lid = db_query("SELECT lid FROM {location_instance} WHERE vid = ?", array($sourcenode[$i]->vid))->fetchField(), "Found location for node $type ($lid)");
      $sourcenode[$i]->locations[0]['lid'] = $lid;
    }
    
    /*
     * lids | instances
     * ------------------
     * 1    | $source[0]
     * 2    | $source[1]
     */

    $iterations = array(
      0 => 'Standard',
      1 => 'Vertical tab',
    );

    // testing nodes
    foreach ($iterations as $i => $iname) {
      variable_set('location_chooser_fieldset', $i);
      $this->assertTrue(TRUE, "<strong>Started testing for $iname display on target nodes</strong>");
      $edit = array(
        'location_chooser' => $sourcenode[$i]->locations[0]['lid'],
        'title' => $target[$i],
        'body[und][0][value]' => 'test node body',
      );
      $this->drupalPost("node/add/{$target[$i]}", $edit, t('Save'));
      $this->assertTrue(1 == $count = db_query("SELECT COUNT(*) FROM {location} WHERE name = :name", array(':name' => $source[$i]))->fetchField(), "Found 1 locations like source ($count)");
      $this->assertTrue(2 == $count = db_query("SELECT COUNT(*) FROM {location_instance} WHERE lid = :lid", array(':lid' => $sourcenode[$i]->locations[0]['lid']))->fetchField(), "Found 2 location instances like source ($count)");
    }
    /*
     * lids | instances
     * ------------------
     * 1    | $source[0], $target[0]
     * 2    | $source[1], $target[1]
     */

    // testing nodes that aren't enabled
    $this->drupalGet("node/add/$normalnode");
    $this->assertNoField('location_chooser', "Location chooser not found on non-target type $normalnode");

    // testing user location
    $array = variable_get('location_settings_user', array());
    variable_set('location_settings_user', array_merge($array, array('multiple' => array('min' => '0', 'max' => '1', 'add' => '1'))));
    $edit = array();
    $edit['locations[0][name]'] = "My user location";
    $this->drupalPost("user/{$this->user->uid}/edit", $edit, t('Save'));
    $this->assertTrue($user_location = db_query("SELECT lid FROM {location_instance} WHERE uid = :uid", array(':uid' => $this->user->uid))->fetchField(), "User $user_location location found");
    /*
     * lids | instances
     * ------------------
     * 1    | $source[0], $target[0]
     * 2    | $source[1], $target[1]
     * 3    | $user
     */
    $edit = array(
      'location_chooser' => $user_location,
      'title' => 'My user location',
      'body[und][0][value]' => 'test node body',
    );
    $this->drupalPost("node/add/{$target[0]}", $edit, t('Save'));
    $this->assertTrue(1 == $count = db_query("SELECT COUNT(*) FROM {location} WHERE name = :name", array(':name' => 'My user location'))->fetchField(), "Found 1 locations like source ($count)");
    $this->assertTrue(2 == $count = db_query("SELECT COUNT(*) FROM {location_instance} WHERE lid = :lid", array(':lid' => $user_location))->fetchField(), "Found 2 location instances like source ($count)");
    /*
     * lids | instances
     * ------------------
     * 1    | $source[0], $target[0]
     * 2    | $source[1], $target[1]
     * 3    | $user, $target[0]
     */

    // testing changing a location
    $this->clickLink('Edit');
    $this->drupalPost(NULL, array('locations[0][name]' => 'Changed location', 'location_chooser' => 0), t('Save'));
    $this->assertTrue(1 == $count = db_query("SELECT COUNT(*) FROM {location} l LEFT JOIN {location_instance} li  ON li.lid = l.lid WHERE l.name = :name", array(':name' => 'My user location'))->fetchField(), "Found 1 location instances like user location ($count)");
    $this->assertTrue(1 == $count = db_query("SELECT COUNT(*) FROM {location} l LEFT JOIN {location_instance} li  ON li.lid = l.lid WHERE l.name = :name", array(':name' => 'Changed location'))->fetchField(), "Found 1 locations like changed location ($count)");
    $this->assertTrue($user_location != ($changed_location = db_query('SELECT lid FROM {location} l WHERE name = ?', array('Changed location'))->fetchField()), 'Changed location is not the same as user location');
    /*
     * lids | instances
     * ------------------
     * 1    | $source[0], $target[0]
     * 2    | $source[1], $target[1]
     * 3    | $user
     * 4    | $target[0]
     */

    $this->clickLink('Edit');
    $this->drupalPost(NULL, array('locations[0][name]' => 'Changed location again'), t('Save'));
    $this->assertTrue(1 == $count = db_query("SELECT COUNT(*) FROM {location} l LEFT JOIN {location_instance} li  ON li.lid = l.lid WHERE l.name = :name", array(':name' => 'Changed location again'))->fetchField(), "Found 1 locations like changed location ($count)");
    $this->assertTrue($changed_location == ($changed_location_again = db_query('SELECT lid FROM {location} l WHERE name = ?', array('Changed location again'))->fetchField()), 'Changing a custom location does not change $location[lid]');

    $this->clickLink('Edit');
    $this->assertRaw('Custom', 'Location chooser correctly displays a custom location');
    $this->assertNoRaw('Current location', 'Location chooser correctly displays a custom location');
    $this->drupalPost(NULL, array('location_chooser' => $user_location), t('Save'));
    $this->assertTrue(1 == $count = db_query("SELECT COUNT(*) FROM {location} WHERE lid = :lid", array(':lid' => $user_location))->fetchField(), "Found 1 locations with lid of $user_location ($count)");
    $this->assertTrue(2 == $count = db_query("SELECT COUNT(*) FROM {location_instance} WHERE lid = :lid", array(':lid' => $user_location))->fetchField(), "Found 2 location instances with lid of $user_location ($count)");
    /*
     * lids | instances
     * ------------------
     * 1    | $source[0], $target[0]
     * 2    | $source[1], $target[1]
     * 3    | $user, $target[0]
     */
 
    // testing that the user location does not show for other users
    $this->drupalLogin($this->user2);
    $this->drupalGet("node/add/{$target[0]}");
    $this->assertNoRaw('My user location', "One user cannot see another's location in the chooser form");
    $this->drupalLogin($this->user);

    // testing default location
    $this->drupalPost('admin/config/content/location/site-default', array('default_location[0][name]' => "Site default location"), t('Save'));
    $this->assertTrue($default_location = db_query("SELECT lid FROM {location_instance} WHERE genid = :genid", array(':genid' => 'location_chooser_default'))->fetchField());
    $edit = array(
      'title' => 'Site default location',
      'body[und][0][value]' => 'test node body',
    );
    $this->drupalPost("node/add/{$target[0]}", $edit, t('Save'));
    $this->assertTrue(1 == $count = db_query("SELECT COUNT(*) FROM {location} WHERE name = :name", array(':name' => 'Site default location'))->fetchField(), "Found 1 locations like source ($count)");
    $this->assertTrue(2 == $count = db_query("SELECT COUNT(*) FROM {location_instance} WHERE lid = :lid", array(':lid' => $default_location))->fetchField(), "Found 2 location instances like source ($count)");
    /*
     * lids | instances
     * ------------------
     * 1    | $source[0], $target[0]
     * 2    | $source[1], $target[1]
     * 3    | $user, $target[0]
     * 5    | default
     */

    // testing changing a source - should create a new location
    $new_source_title = 'Change source location - reuse mode off';
    $edit = array('locations[0][name]' => $new_source_title);
    $this->drupalPost("node/{$sourcenode[1]->nid}/edit", $edit, t('Save'));
    $lid = db_query("SELECT lid FROM {location_instance} WHERE nid = :nid", array(':nid' => $sourcenode[1]->nid))->fetchField();
    $this->assertTrue(1 == $count = db_query("SELECT COUNT(*) FROM {location_instance} WHERE lid = :lid AND nid = :nid", array(':lid' => $lid, ':nid' => $sourcenode[1]->nid))->fetchField(), "Found 1 instances like source ($count)");
    $this->assertTrue(1 == $count = db_query("SELECT COUNT(*) FROM {location} l LEFT JOIN {location_instance} li ON li.lid = l.lid WHERE l.name = :lname", array(':lname' => $new_source_title))->fetchField(), "Found 1 locations like source ($count)");
    $sourcenode[1] = node_load($sourcenode[1]->nid);
    /*
     * lids | instances
     * ------------------
     * 1    | $source[0], $target[0]
     * 2    | $target[1]
     * 3    | $user, $target[0]
     * 5    | default
     * 6    | $source[1]
     */


    // TESTING OVERWRITE MODE ==================================================

    $this->drupalPost('admin/config/content/location/location-chooser', array('location_chooser_reuse_source_locations' => TRUE), t('Save configuration'));
    $this->assertTrue(variable_get('location_chooser_reuse_source_locations', FALSE), 'TESTING OVERWRITE MODE');
    variable_set('location_chooser_reuse_source_locations', TRUE);


    $targetnode = $this->drupalCreateNode(array(// drupalCreateNode does not catch the location_chooser, so it will use the default location.
      'type' => $target[1],
      'title' => $target[1] . ' linked',
    ));
    /*
     * lids | instances
     * ------------------
     * 1    | $source[0], $target[0]
     * 2    | $target[1]a
     * 3    | $user, $target[0]
     * 5    | default, $target[1]b
     * 6    | $source[1]
     */

    // change the location to a different source
    $this->drupalGet("node/$targetnode->nid/edit");
    $this->assertRaw('Site Default : Site default location', 'Location chooser correctly displays the site default location');
    $this->assertNoRaw('Current location', 'Location chooser correctly displays the site default location');
    $edit = array('location_chooser' => $sourcenode[1]->locations[0]['lid']);
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertTrue(2 == $count = db_query("SELECT COUNT(*) FROM {location_instance} WHERE lid = :lid", array(':lid' => $sourcenode[1]->locations[0]['lid']))->fetchField(), "Found 2 instances like source ($count)");
    $this->assertTrue(1 == $count = db_query("SELECT COUNT(*) FROM {location} l LEFT JOIN {location_instance} li ON li.lid = l.lid WHERE li.nid = :linid AND l.name = :lname", array(':linid' => $sourcenode[1]->nid, ':lname' => $new_source_title))->fetchField(), "Found 1 locations like source ($count)");
    /*
     * lids | instances
     * ------------------
     * 1    | $source[0], $target[0]
     * 2    | $target[1]a
     * 3    | $user, $target[0]
     * 5    | default
     * 6    | $source[1], $target[1]b
     */

    // test changing a target
    $name = $source[1] . '-changed';

    // test changing the location settings on a target node with javascript disabled (the location chooser box does not change)
    // this should do nothing - the location chooser box should override any custom settings
    $edit = array('locations[0][name]' => $name);
    $this->drupalPost("node/$targetnode->nid/edit", $edit, t('Save'));
    $this->assertTrue(2 == $count = db_query("SELECT COUNT(*) FROM {location_instance} WHERE lid = :lid", array(':lid' => $sourcenode[1]->locations[0]['lid']))->fetchField(), "Found 2 instances like source ($count)");
    $this->assertTrue(1 == $count = db_query("SELECT COUNT(*) FROM {location} l LEFT JOIN {location_instance} li ON li.lid = l.lid WHERE li.nid = :linid AND l.name = :lname", array(':linid' => $sourcenode[1]->nid, ':lname' => $new_source_title))->fetchField(), "Found 1 locations like source ($count)");
    /*
     * lids | instances
     * ------------------
     * 1    | $source[0], $target[0]
     * 2    | $target[1]a
     * 3    | $user, $target[0]
     * 5    | default
     * 6    | $source[1], $target[1]b
     */

    // these settings should not overwrite a source location; instead, a new location should be created.
    $edit = array(
      'location_chooser' => 0,
      'locations[0][name]' => $name,
    );
    $this->drupalPost("node/$targetnode->nid/edit", $edit, t('Save'));
    $this->assertTrue(1 == $count = db_query("SELECT COUNT(*) FROM {location} WHERE name = :name", array(':name' => $name))->fetchField(), "Found 1 locations like source ($count)");
    $this->assertTrue(1 == $count = db_query("SELECT COUNT(*) FROM {location} l LEFT JOIN {location_instance} li ON li.lid = l.lid WHERE li.nid = :linid AND l.name = :lname", array(':linid' => $sourcenode[1]->nid, ':lname' => $new_source_title))->fetchField(), "Found 1 locations like source ($count)");
    /*
     * lids | instances
     * ------------------
     * 1    | $source[0], $target[0]
     * 2    | $target[1]a
     * 3    | $user, $target[0]
     * 5    | default
     * 6    | $source[1]
     * 7    | $target[1]b
     */

    // these settings should put everything back
    $edit = array('location_chooser' => $sourcenode[1]->locations[0]['lid']);
    $this->drupalPost("node/$targetnode->nid/edit", $edit, t('Save'));
    $this->assertTrue(2 == $count = db_query("SELECT COUNT(*) FROM {location_instance} WHERE lid = :lid", array(':lid' => $sourcenode[1]->locations[0]['lid']))->fetchField(), "Found 3 instances like source ($count)");
    $this->assertTrue(1 == $count = db_query("SELECT COUNT(*) FROM {location} l LEFT JOIN {location_instance} li ON li.lid = l.lid WHERE li.nid = :linid AND l.name = :lname", array(':linid' => $sourcenode[1]->nid, ':lname' => $new_source_title))->fetchField(), "Found 1 locations like source ($count)");
    /*
     * lids | instances
     * ------------------
     * 1    | $source[0], $target[0]
     * 2    | $target[1]a
     * 3    | $user, $target[0]
     * 5    | default
     * 6    | $source[1], $target[1]b
     */

    // these settings, acting on the source node, should overwrite all linked locations
    $new_source_title = 'Change source location - reuse mode ON';
    $edit = array('locations[0][name]' => $new_source_title);
    $this->drupalPost("node/{$sourcenode[1]->nid}/edit", $edit, t('Save'));
    $sourcenode[1] = node_load($sourcenode[1]->nid);
    $this->assertTrue(2 == $count = db_query("SELECT COUNT(*) FROM {location_instance} WHERE lid = :lid", array(':lid' => $sourcenode[1]->locations[0]['lid']))->fetchField(), "Found 3 instances like source ($count)");
    $this->assertTrue(1 == $count = db_query("SELECT COUNT(*) FROM {location} l LEFT JOIN {location_instance} li ON li.lid = l.lid WHERE li.nid = :linid AND l.name = :lname", array(':linid' => $sourcenode[1]->nid, ':lname' => $new_source_title))->fetchField(), "Found 1 locations like source ($count)");
    $this->drupalGet("node/$targetnode->nid");
    $this->assertText($new_source_title);
    /*
     * lids | instances
     * ------------------
     * 1    | $source[0], $target[0]
     * 2    | $target[1]a
     * 3    | $user, $target[0]
     * 5    | default
     * 6*   | $source[1], $target[1]b
     */
    $edit = array('locations[0][name]' => $sourcenode[1]->type);
    $this->drupalPost("node/{$sourcenode[1]->nid}/edit", $edit, t('Save'));

    // saving a new source node
    $edit = array(
      'title' => 'testing new node entry for overwrite mode',
      'locations[0][name]' => 'testing new node entry for overwrite mode',
    );
    $secondtest = $this->drupalPost('node/add/' . $source[0], $edit, t('Save'));
    $this->assertTrue(1 == $count = db_query("SELECT COUNT(*) FROM {location} l LEFT JOIN {location_instance} li ON li.lid = l.lid LEFT JOIN {node} n ON n.vid = li.vid WHERE l.name = :lname AND n.title = l.name", array(':lname' => 'testing new node entry for overwrite mode'))->fetchField(), "Found 1 locations for new source node ($count)");
    /*
     * lids | instances
     * ------------------
     * 1    | $source[0]a, $target[0]
     * 2    | $target[1]a
     * 3    | $user, $target[0]
     * 5    | default
     * 6    | $source[1], $target[1]b
     * 8    | $source[0]b
     */

    // saving a node without a location
    $locationless_node = $this->drupalCreateNode(array(
      'type' => $source[1],
      'title' => $source[1] . ' linked',
    ));
    $this->assertTrue(empty($locationless_node->locations), 'Locationless node saved without location');
    
    // TESTING NODE ACCESS MODES ===============================================
    
    $unpublished_node = $this->drupalCreateNode(array(
      'type' => $source[1],
      'title' => 'unpublished node',
      'locations' => array(0 => array('name' => 'unpublished node location')),
      'status' => 0,
    ));
    $this->assertTrue($lid = db_query("SELECT li.lid FROM {location_instance} li LEFT JOIN {node} n ON li.vid = n.vid WHERE li.nid = ? AND n.status = ?", array($unpublished_node->nid, 0))->fetchField(), "Found unpublished node location ($lid)");
    $this->drupalGet('node/' . $unpublished_node->nid . '/edit');
    
    /*
     * lids | instances
     * ------------------
     * 1    | $source[0]a, $target[0]
     * 2    | $target[1]a
     * 3    | $user, $target[0]
     * 5    | default
     * 6    | $source[1]a, $target[1]b
     * 8    | $source[0]b
     * 9    | $source[1]b (unpublished)
     */
    
    $this->user3 = $this->drupalCreateUser(array(
      'access content',
      'submit latitude/longitude',
      'administer site configuration',
      'access administration pages',
      'set own user location',
      'view own user location',
      'access user profiles',
      "create {$source[1]} content",
      "edit any {$source[1]} content",
      "create {$target[1]} content",
      "edit any {$target[1]} content",
    ));
    $this->drupalLogin($this->user3);
    
    $this->drupalGet('node/add/' . $target[1]);
    $this->assertRaw($source[1], 'Non-author node is available to choose in normal access mode');
    $this->assertNoRaw('unpublished node', 'Unpublished node is not available to choose in normal access mode');
    
    $this->drupalPost('admin/config/content/location/location-chooser', array('location_chooser_include_unpublished_nodes' => TRUE), t('Save configuration'));
    $this->assertTrue(variable_get('location_chooser_include_unpublished_nodes', FALSE), 'TESTING UNPUBLISHED NODE MODE');
    variable_set('location_chooser_include_unpublished_nodes', TRUE);
    
    $this->drupalGet('node/add/' . $target[1]);
    $this->assertRaw('unpublished node', 'Unpublished node is available to choose in access bypass mode');
    
    $this->drupalPost('admin/config/content/location/location-chooser', array(
      'location_chooser_include_unpublished_nodes' => FALSE,
      'location_chooser_author_nodes_only' => TRUE,
    ), t('Save configuration'));
    $this->assertFalse(variable_get('location_chooser_include_unpublished_nodes', FALSE), 'FINISHED TESTING UNPUBLISHED NODE MODE');
    variable_set('location_chooser_include_unpublished_nodes', FALSE);
    $this->assertTrue(variable_get('location_chooser_author_nodes_only', FALSE), 'TESTING AUTHOR NODES ONLY');
    variable_set('location_chooser_author_nodes_only', TRUE);
    
    $edit = array(
      'title' => 'author node',
      'locations[0][name]' => 'author node location',
      'body[und][0][value]' => 'author node body',
    );
    $this->drupalPost('node/add/' . $source[1], $edit, t('Save'));              // author node
    
    $this->drupalGet('node/add/' . $target[1]);
    $this->assertRaw($source[1], 'Non-author node is not available to choose in author only mode');
    
    $this->drupalGet('node/' . $targetnode->nid . '/edit');
    $this->assertRaw('Current location', 'Existing location is displayed as "Current location" without user access');
    
//    // TESTING WITH REVISIONS
    
    /*
     * lids | instances
     * ------------------
     * 1    | $source[0]a, $target[0]
     * 2    | $target[1]a
     * 3    | $user, $target[0]
     * 5    | default
     * 6    | $source[1]a, $target[1]b
     * 8    | $source[0]b
     * 9    | $source[1]b (unpublished)
     */
    $this->drupalLogin($this->user);
    variable_set('node_options_' . $this->source[1]->type, array('status', 'promote', 'revision'));
    
    // Change a source node that has revisions enabled
    // Nodes can handle revisions, but locations cannot; therefore, we must save a new location instance for each source location
    $this->assertTrue(2 == $count = db_query("SELECT COUNT(*) FROM {location_instance} WHERE lid = :lid", array(':lid' => $sourcenode[1]->locations[0]['lid']))->fetchField(), "Found 2 instances like source ($count)");
    $this->assertTrue(1 == $count = db_query("SELECT COUNT(*) FROM {location_instance} WHERE lid = :lid AND nid = :nid", array(':lid' => $sourcenode[1]->locations[0]['lid'], ':nid' => $sourcenode[1]->nid))->fetchField(), "Found 1 instances with source nid ($count)");
    $edit = array(
      'locations[0][name]' => 'testing revisions',
      'revision' => 1,
    );
    $this->drupalPost("node/{$sourcenode[1]->nid}/edit", $edit, t('Save'));
    $this->assertText('testing revisions', 'Changed location effectively with revisions turned on');
    $this->assertTrue(3 == $count = db_query("SELECT COUNT(*) FROM {location_instance} WHERE lid = :lid", array(':lid' => $sourcenode[1]->locations[0]['lid']))->fetchField(), "Found 3 instances like source ($count)");
    $this->assertTrue(2 == $count = db_query("SELECT COUNT(*) FROM {location_instance} WHERE lid = :lid AND nid = :nid", array(':lid' => $sourcenode[1]->locations[0]['lid'], ':nid' => $sourcenode[1]->nid))->fetchField(), "Found 2 instances with source nid ($count)");
    $this->assertTrue(1 == $count = db_query("SELECT COUNT(*) FROM {location} l WHERE l.name = :lname", array(':lname' => 'testing revisions'))->fetchField(), "Found 1 locations like source ($count)");
    
    $this->drupalGet("node/$targetnode->nid");
    $this->assertText('testing revisions', 'Target node is still linked to source after source change with revisions');
    
    // Add a source node with revisions enabled
    $edit = array(
      'title' => 'Revision: creating', 
      'locations[0][name]' => 'Revision: creating location',
      'revision' => TRUE,
    );
    $this->drupalPost("node/add/{$source[1]}", $edit, $save);
    $this->assertText('Revision: creating location', 'New nodes can be created with revisioning on.');
    $this->assertTrue(1 == $count = db_query("SELECT COUNT(*) FROM {location} l LEFT JOIN {location_instance} li ON li.lid = l.lid WHERE l.name = :lname", array(':lname' => 'Revision: creating location'))->fetchField(), "Found 1 location instance like source ($count)");
    
    // Change a source node with revisions enabled
    $this->clickLink(t('Edit'));
    $this->drupalPost(NULL, array('locations[0][name]' => 'Revision: changing location', 'revision' => TRUE));
    $this->assertText('Revision: changing location', 'New nodes can be changed with revisioning on.');
    $this->assertTrue(1 == $count = db_query("SELECT COUNT(*) FROM {location} l WHERE l.name = :lname", array(':lname' => 'Revision: changing location'))->fetchField(), "Found 1 location like source ($count)");
    $this->assertTrue(2 == $count = db_query("SELECT COUNT(*) FROM {location} l LEFT JOIN {location_instance} li ON li.lid = l.lid WHERE l.name = :lname", array(':lname' => 'Revision: changing location'))->fetchField(), "Found 2 location instances like source ($count)");
    
    // Delete the location from a source node with revisions enabled
    $this->clickLink(t('Edit'));
    $this->drupalPost(NULL, array('locations[0][delete_location]' => TRUE, 'revision' => TRUE));
    $this->assertNoText('Revision: changing location', 'Locations can be deleted from revisioned nodes.');
    $this->assertTrue(1 == $count = db_query("SELECT COUNT(*) FROM {location} l WHERE l.name = :lname", array(':lname' => 'Revision: changing location'))->fetchField(), "Found 1 location like source ($count)");
    $this->assertTrue(2 == $count = db_query("SELECT COUNT(*) FROM {location} l LEFT JOIN {location_instance} li ON li.lid = l.lid WHERE l.name = :lname", array(':lname' => 'Revision: changing location'))->fetchField(), "Found 2 location instances like source ($count)");

  }
}
