<?php
// $Id$

/**
 * @file
 *
 */

/**
 * Implements hook_menu().
 */
function location_chooser_menu() {
  $items['admin/config/content/location/site-default'] = array(
    'title' => 'Site default location',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('location_chooser_location_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'location_chooser.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 11,
  );
  $items['admin/config/content/location/location-chooser'] = array(
    'title' => 'Location chooser settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('location_chooser_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'location_chooser.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 11,
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function location_chooser_form_node_form_alter(&$form, &$form_state, $form_id) {
  // NODE FORMS --------------------------------------------
  if (isset($form['type']['#value']) && $form['type']['#value'] . '_node_form' == $form_id) {

    // BEGIN location chooser form
    if (!empty($form['locations']) && !empty($form['locations'][0])) {
      $node_sources = variable_get('location_chooser_node_sources', array());
      $node_locations = $other_locations = array();
      $targets = variable_get('location_chooser_targets', array());
      if (in_array($form['type']['#value'], $targets)) {

        if ($lid = $form['locations'][0]['#default_value']['lid']) {                // get the existing location ...
          $count = db_query("SELECT COUNT(lid) FROM {location_instance} WHERE lid = ?", array($lid))->fetchField();
          $unique = $count != 1 ? FALSE : TRUE;
        }
                
        // NODE SOURCES
        if (is_array($node_sources) && !empty($node_sources)) {
          $query = db_select('location_instance', 'li');
          $query->leftJoin('location', 'l', 'li.lid = l.lid');
          $query->leftJoin('node', 'n', 'n.vid = li.vid');
          $query->fields('li');
          $query->fields('l');
          $query->fields('n', array('title'));
          $query->orderBy('n.title');
          $query->condition('n.type', $node_sources, 'IN');
          $query->addTag('node_access');
          $query->addMetaData('base_table', 'location_instance');
          
          // author nodes only
          if (variable_get('location_chooser_author_nodes_only', FALSE)) {
            global $user;
            $query->condition('n.uid', $user->uid);
          }
          
          // unpublished nodes
          if (!variable_get('location_chooser_include_unpublished_nodes', FALSE)) {
            $query->condition('n.status', 1);
          }
          
          $result = $query->execute();
          $node_locations = $result->fetchAllAssoc('lid');
        }
        
        // OTHER SOURCES
        // Setting up the WHERE conditional
        $where = db_or();
        // Gather user sources
        if (variable_get('location_chooser_user_source', TRUE)) {
          global $user;
          if ($user->uid) {
            $where->condition('li.uid', $user->uid);
          }
        }
        // Gather the site default location
        if (variable_get('location_chooser_default_source', TRUE)) {
          $where->condition('li.genid', 'location_chooser_default');
        }

        // only continue if there are sources from which to choose a location
        if (!$where->conditions()) {
          unset($where);
        }
        else {
          $where->condition('li.lid', 0); // this dummy line is for if one of the above sources is not enabled
          // Setting up the query: SELECT l.*, li.*, n.title FROM location l LEFT JOIN
          // location_instance li USING(lid) LEFT JOIN node n ON li.vid = n.vid WHERE ...
          $query = db_select('location_instance', 'li');
          $query->leftJoin('location', 'l', 'li.lid = l.lid');
          $query->fields('li');
          $query->fields('l');
          $query->orderBy('li.uid', 'DESC');
          $query->orderBy('li.genid', 'DESC');
          $query->condition($where);
          $result = $query->execute();
          $other_locations = $result->fetchAllAssoc('lid');
        }
        
        $source_locations = $other_locations + $node_locations;
        
        // EXISTING LOCATION WITHOUT ACCESS
        if ($lid && !$unique && empty($source_locations[$lid])) { // If there is a location and it is not unique and the user doesn't have access
          $current_location = db_query("SELECT * FROM {location_instance} li
            LEFT JOIN {location} l ON (li.lid = l.lid) 
            WHERE li.lid = ? and li.nid != ?", array($lid, $form['#node']->nid))->fetchObject();
          if (!empty($current_location)) {
            $current_location->title = t('Current location');
            $current_location->noaccess = TRUE;
            $source_locations[$lid] = $current_location;
          }
        }
        
        if (!empty($source_locations)) {

          // Default location
          $permanent_lids = array();                                            // $permanent_lids is an array of permanent "source" $lids for the $form
          $options = array();                                                   // $options are the choices in the select box
          $settings = array();                                                  // $settings are the array that javascript uses to replace elements

          if ($lid) {                                                           // if the location already exists
            $options[$lid] = t('Custom');                                         // the $option for an existing custom location is the $lid (this gets overwritten later if it is a source location)
            $settings[$lid] = $form['locations'][0]['#default_value'];            // javascript $settings are the current location
          }
          else {                                                                // if the location doesn't exist
            $lid = 0;                                                             // sanity check - set the $lid
            $options[0] = t('Custom / None');                                     // option for a new location
            if (is_array($form['locations'][0]['#location_settings']['form']['fields'])) {
              foreach (array_keys($form['locations'][0]['#location_settings']['form']['fields']) as $key) {
                $settings[0][$key] = '';                                          // blank javascript array for choosing "Custom / None"
              }
            }
          }
          $default = $settings['def'] = $lid;                                     // sets the default $lid for javascript to revert on changes

          // the next section will select, from all the different $sources, a
          // number of locations to insert into the $options for the location
          // chooser form element.
          foreach ($source_locations as $r) {
            $r = (array) $r;
            // $r is a database row that represents a location, to which we add:
            //   $r['type'] = ('node' || 'user' || 'default' || 'current')
            //   $r['title'] = $node_title || $translated_text
            if (!empty($r['noaccess'])) { // This is the current location, and the user doesn't have access.
              $r['type'] = 'current';
              $permanent_lids[] = $r['lid'];
            }
            elseif (!empty($r['nid']) && !empty($r['title'])) {
              $r['type'] = 'node';
              $permanent_lids[] = $r['lid'];
            }
            elseif (!empty($r['genid']) && $r['genid'] == 'location_chooser_default') {
              $r['title'] = t('Site Default');
              $r['type'] = 'default';
              if (!$lid) {
                $default = $r['lid'];
                foreach ($r as $key => $value) {
                  if (isset($form['locations'][0]['#location_settings']['form']['fields'][$key]['default'])) {
                    $form['locations'][0]['#location_settings']['form']['fields'][$key]['default'] = $r[$key];
                  }
                }
              }
              $permanent_lids[] = $r['lid'];
            }
            elseif (!empty($r['uid'])) {
              $r['title'] = t('User Location');
              $r['type'] = 'user';
              $permanent_lids[] = $r['lid'];
            }
            $options[$r['lid']] = theme('location_chooser_text', $r); // sets the $options for the location chooser form element
            $settings[$r['lid']] = $r; // sets the $settings for the javascript replacement
          }
          if (!in_array(t('Custom'), $options)) { // if there is no "Custom" option, then we overwrote it with a permanent $lid...
            $options[0] = t('Custom'); // ...but we still need an option for a new custom location
          }

          $form['location_chooser'] = array(
            '#type' => 'select',
            '#options' => $options,
            '#title' => t('Choose location'),
            '#weight' => $form['locations']['#weight'] + .1,
            '#default_value' => $default,
          );
          $form['locations']['#weight'] += .2;
          $form['location_permanent_lids'] = array(
            '#type' => 'value',
            '#value' => $permanent_lids,
          );
          array_unshift($form['#validate'], '_location_chooser_location_validate');
          drupal_add_js(drupal_get_path('module', 'location_chooser') . '/js/location_chooser.js', array('type' => 'file', 'scope' => 'footer', 'preprocess' => FALSE));
          drupal_add_js(array('location_chooser' => $settings), array('type' => 'setting', 'preprocess' => FALSE));
        }
        
        // BEGIN location display
        if (isset($form['locations']) && !isset($form['location'])) {

          if (variable_get('location_chooser_fieldset', 1) == 0) {
            if (!empty($form['locations']['#group'])) {
              unset($form['locations']['#group']);
            }
          }
          elseif (variable_get('location_chooser_fieldset', 1) == 2) {
            if (!empty($form['locations']['#group'])) {
              unset($form['locations']['#group']);
            }
            drupal_add_css(drupal_get_path('module', 'location_chooser') . '/css/location_hidden.css');
          }
          else {
            if (empty($form['locations']['#title'])) {
              unset($form['locations']['#prefix']);
              unset($form['locations']['#suffix']);
              $form['locations']['#type'] = 'fieldset';
              $form['locations']['#title'] = t('Location');
              $form['locations']['#attributes'] = array('class' => array('locations'));
              $form['locations'][0]['#collapsed'] = FALSE;
            }
          }
        }
        // END location display
      }
      // END location chooser form
    }
  }
}

function _location_chooser_location_validate($form, &$form_state) {
  // get the chosen location
  $chooser = $form_state['values']['location_chooser'];
  // only change the location if the one chosen is permanent (see form alter hook for permanent_lids)
  if (is_array($form_state['values']['location_permanent_lids']) && in_array($chooser, $form_state['values']['location_permanent_lids'])) {
    // load the location from lid
    $location = location_load_location($chooser);
    // fill the form location values with the values from the loaded location
    // in case javascript is disabled and the user does not selects from location chooser select list
    // Note: this may override user edits on existing locations if javascript is disabled and the user does not choose 'Custom'
    $form_state['values']['locations'][0] = array_intersect_key($location, $form_state['values']['locations'][0]);
    $form_state['values']['locations'][0]['lid'] = $chooser;
  }
}

/**
 * Implements hook_node_presave().
 * 
 * This hook fires when source locations are being re-used and a source node
 * is being updated. It implements location module's method of bypassing the 
 * default "copy on write" behavior when saving locations, taking control of 
 * saving those specific locations away from location module.
 * 
 * If the node is being revisioned, we also need to save a placeholder location
 * instance so that after we have a $node->vid, in the hook_node_update, we can
 * attach the instance to the new revision.
 */
function location_chooser_node_presave($node) {
  if (!empty($node->nid)                                                        // IF this is an already existing node...
      && variable_get('location_chooser_reuse_source_locations', FALSE)         // ...AND we are re-using locations...
      && !empty($node->locations)                                               // ...AND there is a location...
      && !empty($node->locations[0]['lid'])                                     // ...AND the location already exists...
      && empty($node->locations[0]['delete_location'])                          // ...AND it is not being deleted...
      && in_array($node->type,                                                  // ...AND it is a source node...
        variable_get('location_chooser_node_sources', array()))) {              // THEN:
    $location = $node->locations[0];                                            // Get the location...
    location_save($location, FALSE);                                            // ...save it, re-using the lid...
    unset($node->locations[0]);                                                 // ...and remove it from the node, so Location module can't touch it.
    
    if (!empty($node->revision)) {                                              // IF this node is being revisioned, THEN:
      $instance = array(                                                        // Create a new location instance as a placeholder...
        'nid' => $node->nid,                                                    // ...using the nid...
        'vid' => 0,                                                             // ...but with a blank lid...
        'uid' => 0,
        'genid' => '',
        'lid' => $location['lid'],
      );
      db_insert('location_instance')->fields($instance)->execute();             // ...and save it.
    }
  }
}

/**
 * Implements hook_node_update().
 * 
 * If source locations are being re-used and source nodes are being revisioned,
 * we must attach a location instance (saved in hook_node_presave above) to 
 * every new revision.
 */
function location_chooser_node_update($node) {
  if (in_array($node->type, 
      variable_get('location_chooser_node_sources', array()))) {                // IF this is a source node...
    if ($location = db_query(
        'SELECT * FROM {location_instance} WHERE nid = ? AND vid = ?',            // ...AND there is a location placeholder...
        array($node->nid, 0))->fetchObject()) {                                 // THEN:
      db_update('location_instance')                                            // Update it to the new revision.
          ->fields(array('vid' => $node->vid))
          ->condition('nid', $node->nid)
          ->condition('lid', $location->lid)
          ->condition('vid', 0)
          ->execute();
    }
  }
}

/**
 * Implements hook_theme().
 * @return <type>
 */
function location_chooser_theme() {
  return array(
    'location_chooser_text' => array(
      'variables' => array('location' => NULL)
    )
  );
}

/**
 * Themes the text that appears in the location chooser box
 * @param array $location a location array from the database, with an added
 *   'title' value which is an already translated and sanitized string.
 * @return string A single line of translated text, suitable for display in
 *   the location chooser box.  Note that since we are dealing with user
 *   submitted content, proper sanitization of the addresses is important.
 */
function theme_location_chooser_text($location) {
  // if you want to add fields, to the output, add theme here as array keys:
  $fields = array('name' => '', 'street' => '', 'city' => '', 'province' => '');
  // this line simply filters the location array by the $fields keys
  $loc_array = array_filter(array_intersect_key($location, $fields));
  // while the title has already been sanitized, the rest of the location
  // still needs to be run through check_plain or some similar function.
  // the t() function takes care of this with the @address placeholder.
  $loc_text = $location['title'];
  if (!empty($loc_array)) {
    $loc_text .= ' : ' . implode(', ', $loc_array);
  }
  return $loc_text;
}

/**
 * Implements hook_field_extra_fields().
 * 
 * Allow the location chooser drop-down to be positioned on node forms.
 */
function location_chooser_field_extra_fields() {
  $extras = array();
  foreach (variable_get('location_chooser_targets', array()) as $nodetype) {
    $settings = variable_get('location_settings_node_' . $nodetype, array());
    $weight = !empty($settings['form']['weight']) ? $settings['form']['weight'] : 0;
    $extras['node'][$nodetype] = array(
      'form' => array(
        'location_chooser' => array(
          'label' => t('Location chooser'),
          'description' => t('Drop-down list of source locations'),
          'weight' => $weight,
          'edit' => l(t('edit'), 'admin/config/content/location/location-chooser'),
        )
      )
    );
  }
  return $extras;
}
