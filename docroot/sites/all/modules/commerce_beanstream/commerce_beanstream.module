<?php

/**
 * @file
 * Implements Beanstream payment services for use with Drupal Commerce.
 */

define('COMMERCE_BEAN_BILLING_PHONE_FIELD', 'commerce_bean_billing_phone');

/**
 * Implements hook_menu().
 */
function commerce_beanstream_menu() {
  $items = array();

  // Add a menu item for capturing authorizations.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/beanstream-capture'] = array(
    'title' => 'Capture',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_beanstream_capture_form', 3, 5),
    'access callback' => 'commerce_beanstream_capture_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_beanstream.admin.inc',
  );

  return $items;
}

/**
 * Determines access to the prior authorization capture form for Beanstream
 *   AIM credit card transactions.
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be captured.
 *
 * @return
 *   TRUE or FALSE indicating capture access.
 */
function commerce_beanstream_capture_access($order, $transaction) {
  // Return FALSE if the transaction isn't for Beanstream or isn't awaiting capture.

  if ($transaction->payment_method != 'beanstream' || drupal_strtoupper($transaction->remote_status) != 'PA') {
    return FALSE;
  }

  // Return FALSE if it is more than 30 days past the original authorization.
  if (time() - $transaction->created > 86400 * 30) {
    return FALSE;
  }

  // Allow access if the user can update payments on this order.
  return commerce_payment_transaction_access('update', $order, $transaction);
}

/**
 * Implements hook_enable().
 */
function commerce_beanstream_enable() {
  // Add phone number field to billing profile type.
  commerce_beanstream_add_phone_field();

  // Tell user a new field has been added.
  $message_text = 'Commerce Beanstream added a new field to your "billing" customer profile for a phone number. ' . 'If you already have one enabled, you must !disablelink now to avoid customer ' . 'confusion during checkout.';
  $message = t($message_text, array('!disablelink' => l('disable one', 'admin/commerce/customer-profiles/types/billing/fields')));
  drupal_set_message($message, 'warning');
}

/**
 * commerce_customer module creates a customer profile type called "billing".
 * This profile type only has the field "addressfield", which does not include
 * a phone number. Beanstream requires a phone number for transactions, so we
 * create our own.
 */
function commerce_beanstream_add_phone_field() {
  // Look for or add a billing phone number field to add to billing customer profile.
  $field = field_info_field(COMMERCE_BEAN_BILLING_PHONE_FIELD);
  $instance = field_info_instance('commerce_customer_profile', COMMERCE_BEAN_BILLING_PHONE_FIELD, 'billing');

  if (empty($field)) {
    $field = array(
      'field_name' => COMMERCE_BEAN_BILLING_PHONE_FIELD,
      'type' => 'text',
      'cardinality' => 1,
      'entity_types' => array('commerce_customer_profile'),
      'translatable' => FALSE,
      'locked' => FALSE,
    );

    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => COMMERCE_BEAN_BILLING_PHONE_FIELD,
      'entity_type' => 'commerce_customer_profile',
      'bundle' => 'billing',
      'label' => t('Phone Number'),
      'required' => TRUE,
      'widget' => array(
        'type' => 'text_textfield',
      ),
      'settings' => array(),
      'display' => array(),
    );

    // Set the default display formatters for various view modes.
    foreach (array('default', 'customer', 'administrator') as $view_mode) {
      $instance['display'][$view_mode] = array(
        'label' => 'hidden',
        'type' => 'text_default',
        'weight' => -10,
      );
    }

    field_create_instance($instance);
  }
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_beanstream_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['beanstream'] = array(
    'base' => 'commerce_beanstream',
    'title' => t('Beanstream - Credit Card'),
    'short_title' => t('Beanstream'),
    'display_title' => t('Credit Card'),
    'description' => t('Integrates Beanstream payment gateway for credit card transactions.'),
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_beanstream_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    'beanstr_login_id_cad' => '',
    'beanstr_login_id_usd' => '',
    'txn_type' => COMMERCE_CREDIT_AUTH_CAPTURE,
    'txn_ccv' => TRUE,
    'log' => array('request' => '0', 'response' => '0'),
    'phone_field' => COMMERCE_BEAN_BILLING_PHONE_FIELD,
  );

  // Define form.
  $form['beanstr_login_id_cad'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#default_value' => $settings['beanstr_login_id_cad'],
    '#description' => t('The Merchant ID assigned as your Beanstream account'),
    '#required' => TRUE,
  );

/**  Future use for dual currency (CAD / USD) integration.
  *
  * $form['beanstr_login_id_usd'] = array(
  *  '#type' => 'textfield',
  *  '#title' => t('Merchant ID (USD)'),
  *  '#default_value' => $settings['beanstr_login_id_usd'],
  *  '#description' => t('The USD Merchant ID assigned as your Beanstream account'),
  * );
  */

  $form['txn_type'] = array(
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('The default will be used to process transactions during checkout.'),
    '#options' => array(
      COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
      COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only (requires manual or automated capture after checkout)'),
    ),
    '#default_value' => $settings['txn_type'],
  );

  $form['txn_ccv'] = array(
    '#type' => 'radios',
    '#title' => t('Require CVV/CVD Number?'),
    '#description' => t('Do you want to ask the customer for their cards CVV/CVD number? Using CVV validation gives better security for transaction validation. If you have the Require CVD number for credit card transactions option enabled in your Beanstream Account Settings, you must set this option to True.'),
    '#options' => array(
      TRUE => t('True'),
      FALSE => t('False'),
    ),
    '#default_value' => $settings['txn_ccv'],
  );

  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );

  // Collect fields that are currently part of billing field bundle.
  $billing_fields = field_info_instances('commerce_customer_profile', 'billing');
  $phone_field_options = array();
  foreach ($billing_fields as $field_key => $field_info) {
    $phone_field_options[$field_key] = $field_info['label'];
  }
  $form['phone_field'] = array(
    '#type' => 'select',
    '#title' => t('Billing phone number field'),
    '#description' => t('Beanstream requires a billing phone number be collected and passed to them. Drupal Commerce does not come shipped with one by default, but this module does. You can add your own if you\'d like, or just use the one defined and added for you. You can manage the fields for the customer billing profile type !here.', array('!here' => l('here', 'admin/commerce/customer-profiles/types/billing/fields'))),
    '#default_value' => $settings['phone_field'],
    '#options' => $phone_field_options,
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_beanstream_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  return commerce_payment_credit_card_form(array('code' => ''));
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_beanstream_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_beanstream_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Build a name-value pair array for this transaction.
  $nvp = array(
    'trnType' => commerce_beanstream_txn_type($payment_method['settings']['txn_type']),
    'paymentMethod' => 'CC', // IO for Interac.
    'trnAmount' => commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']),
    'trnCardNumber' => $pane_values['credit_card']['number'],
    'trnExpMonth' => $pane_values['credit_card']['exp_month'],
    'trnExpYear' => drupal_substr($pane_values['credit_card']['exp_year'], 2, 2),
  );

  // Add cvv/cvd to name-value pair.
  if (isset($pane_values['credit_card']['code'])) {
    $nvp['trnCardCvd'] = $pane_values['credit_card']['code'];
  }

  // Build a description for the order.
  $description = array();

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if ($line_item_wrapper->type->value() == 'product') {
      $description[] = round($line_item_wrapper->quantity->value()) . 'x ' . $line_item_wrapper->line_item_label->value();
    }
  }

  // Prepare the billing address for use in the request.
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
  $billing_phone = $order_wrapper->commerce_customer_billing->commerce_bean_billing_phone->value();

  if (empty($billing_address['first_name'])) {
    $name_parts = explode(' ', $billing_address['name_line']);
    $billing_address['first_name'] = array_shift($name_parts);
    $billing_address['last_name'] = implode(' ', $name_parts);
  }

  // Add additional transaction invormation to the request array.
  $nvp += array(
    // Order Information.
    'trnOrderNumber' => $order->order_number,

    // Customer Information.
    'trnCardOwner' => drupal_substr($billing_address['first_name'] . ' ' . $billing_address['last_name'], 0, 50),
    'ordName' => drupal_substr($billing_address['first_name'] . ' ' . $billing_address['last_name'], 0, 50),
    'ordPhoneNumber' => $billing_phone,
    'ordAddress1' => drupal_substr($billing_address['thoroughfare'], 0, 60),
    'ordAddress2' => drupal_substr($billing_address['premise'], 0, 60),
    'ordCity' => drupal_substr($billing_address['locality'], 0, 40),
    'ordProvince' => drupal_substr($billing_address['administrative_area'], 0, 40),
    'ordPostalCode' => drupal_substr($billing_address['postal_code'], 0, 20),
    'ordCountry' => $billing_address['country'],
    'ordEmailAddress' => drupal_substr($order->mail, 0, 255),

    // Additional Merchant-defined variables go here.
    'ref1' => drupal_substr($order->uid, 0, 20), // Customer ID.
    'ref2' => drupal_substr($billing_address['organisation_name'], 0, 50),
    'customerIp' => drupal_substr(ip_address(), 0, 15),
  );

  // Submit the request to Beanstream.
  $response = commerce_beanstream_request($payment_method, $nvp);

  // Parse repsonse data to be meaningful to Drupal Commerce.
  $response_code = explode('=', $response[0]);
  $response_txn_type = explode('=', $response[19]);
  $response_cvv_type = explode('=', $response[17]);
  $response_avs_type = explode('=', $response[17]);
  $response_message = explode('=', $response[3]);

  // Prepare a transaction object to log the API response.
  $transaction = commerce_payment_transaction_new('beanstream', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->payload[REQUEST_TIME] = $response;

  // If we didn't get an approval response code...
  if ($response_code[1] != '1') {
    // Create a failed transaction with the error message.
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  else {
    // Set the transaction status based on the type of transaction this was.
    switch ($payment_method['settings']['txn_type']) {
      case COMMERCE_CREDIT_AUTH_ONLY:
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        break;

      case COMMERCE_CREDIT_AUTH_CAPTURE:
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        break;
    }
  }

  // Store the type of transaction in the remote status.
  $transaction->remote_status = $response_txn_type[1];

  // Build a meaningful response message.
  $message = array(
    '<strong>' . commerce_beanstream_reverse_txn_type($response_txn_type[1]) . '</strong>',
    '<strong>' . ($response_code[1] != '1' ? t('REJECTED') : t('ACCEPTED')) . ':</strong> ' . check_plain($response_message[1]),
    t('AVS response: @avs', array('@avs' => commerce_beanstream_avs_response($response_avs_type[1]))),
  );

  // Add the CVV response if enabled.
  if (isset($nvp['trnCardCvd'])) {
    $message[] = t('CVV match: @cvv', array('@cvv' => commerce_beanstream_cvv_response($response_cvv_type[1])));
  }

  $transaction->message = implode('<br />', $message);

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);

  // If the payment failed, display an error and rebuild the form.
  if ($response_code[1] != '1') {
    drupal_set_message(t('We received the following error processing your card. Please enter you information again or try a different card.'), 'error');
    drupal_set_message(check_plain(strip_tags(urldecode($response_message[1]))), 'error');
    return FALSE;
  }

}

/**
 * Submits an payment request to Beanstream
 *
 * @param $payment_method
 *   The payment method instance array associated with this API request.
 */
function commerce_beanstream_request($payment_method, $nvp = array()) {

  // Beanstream uses a single URL for both live and test transactions.
  $url = 'https://www.beanstream.com/scripts/process_transaction.asp';

  // Add the default name-value pairs to the array.
  $nvp += array(
    // API credentials.
    'RequestType' => 'BACKEND', // Force API mode
    'merchant_id' => $payment_method['settings']['beanstr_login_id_cad'],

    // Extra administrative values.
    'trnComments' => 'Website Order',
  );

  // Log the request if specified.
  if ($payment_method['settings']['log']['request'] == 'request') {

    // Mask the credit card number and CVV.
    $log_nvp = $nvp;
    $log_nvp['merchant_id'] = str_repeat('X', drupal_strlen($log_nvp['merchant_id']));

    if (!empty($log_nvp['trnCardNumber'])) {
      $log_nvp['trnCardNumber'] = str_repeat('X', drupal_strlen($log_nvp['trnCardNumber']) - 4) . drupal_substr($log_nvp['trnCardNumber'], -4);
    }

    if (!empty($log_nvp['trnCardCvd'])) {
      $log_nvp['trnCardCvd'] = str_repeat('X', drupal_strlen($log_nvp['trnCardCvd']));
    }

    watchdog('commerce_beanstream', 'Beanstream request to @url: !param', array('@url' => $url, '!param' => '<pre>' . check_plain(print_r($log_nvp, TRUE)) . '</pre>'), WATCHDOG_DEBUG);
  }

  // Prepare the name-value pair array to be sent as a string.
  $pairs = array();

  foreach ($nvp as $key => $value) {
    $pairs[] = $key . '=' . urlencode($value);
  }

  // Uncomment below to display request in the browser.
  // drupal_set_message('<pre>' . check_plain(print_r($pairs, TRUE)) . '</pre>');

  // Setup the cURL request.
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_VERBOSE, 0);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, implode('&', $pairs));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_NOPROGRESS, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
  $result = curl_exec($ch);

  // Log any errors to the watchdog.
  if ($error = curl_error($ch)) {
    watchdog('commerce_beanstream', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
    return FALSE;
  }
  curl_close($ch);

  // Make the response an array
  $response = explode('&', $result);

  for ($i = 0; $i < count($response); $i++) {
    $response[$i] = drupal_substr($response[$i], 0, drupal_strlen($response[$i]));
  }

  // Uncomment below to display the approval in the browser.
  // drupal_set_message('<pre>' . check_plain(print_r($response, TRUE)) . '</pre>');

  // Log the response if specified.
  if ($payment_method['settings']['log']['response'] == 'response') {
    watchdog('commerce_beanstream', 'Beanstream response: !param', array('!param' => '<pre>' . check_plain(print_r($response, TRUE)) . '</pre>', WATCHDOG_DEBUG));
  }

  return $response;
}

/**
 * Returns the transaction type string for Beanstream that corresponds to the
 *   Drupal Commerce constant.
 *
 * @param $txn_type
 *   A Drupal Commerce transaction type constant.
 */
function commerce_beanstream_txn_type($txn_type) {
  switch ($txn_type) {
    case COMMERCE_CREDIT_AUTH_ONLY:
      return 'PA';
    case COMMERCE_CREDIT_PRIOR_AUTH_CAPTURE:
      return 'PAC';
    case COMMERCE_CREDIT_AUTH_CAPTURE:
      return 'P';
    case COMMERCE_CREDIT_REFERENCE_SET:
    case COMMERCE_CREDIT_REFERENCE_TXN:
    case COMMERCE_CREDIT_REFERENCE_REMOVE:
    case COMMERCE_CREDIT_REFERENCE_CREDIT:
      return NULL;
    case COMMERCE_CREDIT_CREDIT:
      return 'R';
    case COMMERCE_CREDIT_VOID:
      return 'V';
  }
}

/**
 * Returns the description of the Beanstream transaction type.
 *
 * @param $txn_type
 *   An Beanstream transaction type string.
 */
function commerce_beanstream_reverse_txn_type($txn_type) {
  switch ($txn_type) {
    case 'PA':
      return t('Prior authorization');
    case 'PAC':
      return t('Prior authorization completion');
    case 'P':
      return t('Authorization and capture');
    case 'R':
      return t('Return');
    case 'V':
      return t('Void');
  }
}

/**
 * Returns the message text for an AVS response code.
 */
function commerce_beanstream_avs_response($code) {
  switch ($code) {
    case '1':
      return t('Address match. The address submitted with the order matches the address on file at the issuing bank.');
    case '2':
      return t('Address mismatch. The address submitted with the order does not match information on file at the issuing bank.');
  }

  return 'none';
}

/**
 * Returns the message text for a CVV match.
 */
function commerce_beanstream_cvv_response($code) {
  switch ($code) {
    case '1':
      return t('Match');
    case '2':
      return t('Mismatch');
    case '3':
      return t('Not Verified');
    case '4':
      return t('Should have been present');
    case '5':
      return t('Issuer unable to process request');
    case '6':
      return t('Not Provided');
  }

  return '-';
}
