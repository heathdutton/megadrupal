<?php

/**
 * @file
 * Allows the user to set default colors to a product
 */

/**
 * Implements hook_form_alter().
 */
function commerce_default_product_variant_form_alter(&$form, &$form_state, $form_id) {
  if( isset($form['#node_edit_form']) &&  $form['#node_edit_form'] &&  isset($form['nid']['#value'])) {
    $node = node_load($form['nid']['#value']);

    $reference_field_name = commerce_default_product_variant_get_node_reference_field_name($node);

    if($reference_field_name != FALSE) {
      $product_variant_list = array();
      foreach($node->{$reference_field_name}[LANGUAGE_NONE] as $index => $value) {
        $query = db_select('commerce_product', 'cp');
        if (module_exists('commerce_stock')) {
          $query->join('field_data_commerce_stock', 'cs', 'cp.product_id = cs.entity_id');
        }
        $query = $query->fields('cp', array('sku','title'));
        $query = $query->condition('cp.product_id', $value['product_id'], '=');
        if (module_exists('commerce_stock')) {
          $query = $query->condition('cs.commerce_stock_value',	0, '>');
        }

        $result = $query->execute()->fetchAssoc();

        if($result != null) {
          $product_variant_list[$value['product_id']] = $result['sku'].': '.$result['title'];
        }
      }

      reset($product_variant_list);
      $form['product_variant_default'] = array(
        '#type' => 'select',
        '#title' => t('Default product variant'),
        '#options' => $product_variant_list,
        '#default_value' => key($product_variant_list),
        '#description' => t('Set this to product variant should be shown on the product display page.'),
      );

      $form['actions']['submit']['#submit'][] = 'commerce_default_product_variant_from_submit';
    }
  }
}

/**
 * Submit handler for the hook_form_alter().
 */
function commerce_default_product_variant_from_submit(&$form, &$form_state) {
  $default_product_variant = $form_state['values']['product_variant_default'];
  $node = node_load($form_state['values']['nid']);

  $reference_field_name = commerce_default_product_variant_get_node_reference_field_name($node);

  foreach($node->{$reference_field_name}[LANGUAGE_NONE] as $index => $value) {
    if($value['product_id'] == $default_product_variant) {
      $node->{$reference_field_name}[LANGUAGE_NONE][$index]['product_id'] =  $node->{$reference_field_name}[LANGUAGE_NONE][0]['product_id'];
      $node->{$reference_field_name}[LANGUAGE_NONE][0]['product_id'] = $default_product_variant;
      break;
    }
  }

  node_save($node);
}

/**
 * Helper function to get the name of the product reference field in a node.
 *
 * Borrowed from Commerce Product Display Manager Module
 */
function commerce_default_product_variant_get_node_reference_field_name($node) {
  $field_name_out = FALSE;

  foreach (commerce_default_product_variant_get_product_reference_fields() as $field_name) {
    if (isset($node->{$field_name})) {
      $field_name_out = $field_name;
      break;
    }
  }

  return $field_name_out;
}

/**
 * Helper function to return all product reference fields in the drupal installation.
 *
 * Borrowed from Commerce Product Display Manager Module
 */
 function commerce_default_product_variant_get_product_reference_fields() {
  $product_reference_fields = array();
  foreach (field_info_fields() as $field) {
    // Do not include the commerce_product field, why?
    if ($field['type'] == 'commerce_product_reference' && $field['field_name'] != 'commerce_product') {
      $product_reference_fields[] = $field['field_name'];
    }
  }
  return $product_reference_fields;
}