<?php

/**
 * @file
 * Functional tests for Context Date module.
 */

class ContextDateConditionTest extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Context Date condition',
      'description' => 'Test Context Date condition.',
      'group' => 'Context Date',
    );
  }

  function setUp() {
    parent::setUp('context', 'ctools', 'context_date');
    ctools_include('export');
  }

  function tearDown() {
    parent::tearDown();
  }

  function testAfterPastDate() {
    // Test after on a past date.
    $this->createContext('test_context_date', array(
      'context_date' => array(
        'values' => array(
          'after' => REQUEST_TIME - 3600,
        ),
      ),
    ));
    $this->drupalGet('node');
    $this->assertText('Active context: test_context_date', t('Context is active. Current date is after 1 hour ago.'));
  }

  function testAfterFutureDate() {
    // Test after on a future date.
    $this->createContext('test_context_date', array(
      'context_date' => array(
        'values' => array(
          'after' => REQUEST_TIME + 3600,
        ),
      ),
    ));
    $this->drupalGet('node');
    $this->assertNoText('Active context: test_context_date', t('Context is not active. Current date is not after 1 hour from now.'));
  }

  function testBeforePastDate() {
    // Test before on a past date.
    $this->createContext('test_context_date', array(
      'context_date' => array(
        'values' => array(
          'before' => REQUEST_TIME - 3600,
        ),
      ),
    ));
    $this->drupalGet('node');
    $this->assertNoText('Active context: test_context_date', t('Context is not active. Current date is not before 1 hour ago.'));
  }

  function testBeforeFutureDate() {
    // Test before on a future date.
    $this->createContext('test_context_date', array(
      'context_date' => array(
        'values' => array(
          'before' => REQUEST_TIME + 3600,
        ),
      ),
    ));
    $this->drupalGet('node');
    $this->assertText('Active context: test_context_date', t('Context is active. Current date is before 1 hour from now.'));
  }

  function testInRange() {
    // Test if current date is in range.
    $this->createContext('test_context_date', array(
      'context_date' => array(
        'values' => array(
          'before' => REQUEST_TIME + 3600,
          'after' => REQUEST_TIME - 3600,
        ),
      ),
    ));
    $this->drupalGet('node');
    $this->assertText('Active context: test_context_date', t('Context is active. Current date is between 1 hour from now and 1 hour ago.'));
  }

  function testOutOfRangeFuture() {
    // Test if current date is out of a future date range.
    $this->createContext('test_context_date', array(
      'context_date' => array(
        'values' => array(
          'before' => REQUEST_TIME + 7200,
          'after' => REQUEST_TIME + 3600,
        ),
      ),
    ));
    $this->drupalGet('node');
    $this->assertNoText('Active context: test_context_date', t('Context is not active. Current date is not between 2 hours from now and 1 hour from now.'));
  }

  function testOutOfRangePast() {
    // Test if current date is out of a past date range.
    $this->createContext('test_context_date', array(
      'context_date' => array(
        'values' => array(
          'before' => REQUEST_TIME - 3600,
          'after' => REQUEST_TIME - 7200,
        ),
      ),
    ));
    $this->drupalGet('node');
    $this->assertNoText('Active context: test_context_date', t('Context is not active. Current date is not between 1 hour ago and 2 hours ago.'));
  }

  function createContext($name, $conditions) {
    $this->context = ctools_export_new_object('context');
    $this->context->name = $name;
    $this->context->conditions = $conditions;
    $this->context->reactions = array('debug' => array('debug' => TRUE));
    $saved = context_save($this->context);
    $this->assertTrue($saved, "Context '" . $name . "' saved.");
  }

}
