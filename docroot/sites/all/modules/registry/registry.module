<?php

/**
 * @file
 * The registry module.
 *
 * The registry is a singleton key-value store which loads on each request. It
 * allows modules to access set and request information along the execution
 * chain. It was inspired by the butler project.
 *
 */

/**
 * Define a primary context constant
 */
define('REGISTRY_CONTEXT_PRIMARY', 'primary');

/**
 * Define a secondary context constant
 */
define('REGISTRY_CONTEXT_SECONDARY', 'secondary');

/**
 * Define a constant for all contexts
 */
define('REGISTRY_CONTEXT_ALL', 'all');

/*******************
 * PHP 5.3 compatible API
 *******************/

/**
 * Registry function
 *
 * This allows you to call registry()->set('key','value'), but only works
 * with PHP 5.3
 *
 * @return \Registry
 *  the registry object
 */
function registry() {
  static $registry;

  registry_include();

  if (!is_object($registry)) {
    $registry = Registry::invoke();
  }

  return $registry;
}


/*******************
 * PHP 5.2 compatible API
 *******************/

/**
 * Wrapper to invoke the registry
 *
 * @return \Registry
 *  the registry object
 */
function &registry_invoke() {
  static $registry;

  registry_include();

  if (!is_object($registry)) {
    $registry = Registry::invoke();
  }

  return $registry;
}

/**
 * Wrapper to add a property to the registry
 *
 * Some objects may change during the life of the request. For these objects,
 * like $user or $node, it is preferable not to have them set by reference, but
 * still return the latest object with referenced. By setting these using a
 * callback instead of the object itself, a fresh copy of the object will always
 * be available.
 *
 * @param $key
 *  the key to use for storing the value
 * @param $value (optional)
 *  the value to set. This can be optional, which will create a NULL value key record
 * @param bool $locked (optional)
 *  protected key's cannot be overridden by a later caller, defaults to FALSE
 *
 * @return mixed
 *  TRUE if the value is set, or FALSE if trying to overwrite a protected value
 */
function registry_set($key, $value = NULL, $locked = FALSE) {
  $registry =& registry_invoke();
  return $registry->set($key, $value, $locked);
}

/**
 * Wrapper to add a property to the registry
 *
 * Some objects may change during the life of the request. For these objects,
 * like $user or $node, it is preferable not to have them set by reference, but
 * still return the latest object with referenced. By setting these using a
 * callback instead of the object itself, a fresh copy of the object will always
 * be available.
 *
 * @param $key
 *  the key to use for storing the value
 * @param $callback
 *  Callback to use when loading the registry item
 * @param null $args (optional)
 *  Any arguments to pass to the callback.
 * @param bool $locked (optional)
 *  protected key's cannot be overridden by a later caller, defaults to FALSE
 *
 * @internal param $value (optional)
 *  the value to set. This can be optional, which will create a NULL value key record
 * @return mixed TRUE if the value is set, or FALSE if trying to overwrite a protected value
 */
function registry_set_callback($key, $callback, $args = NULL, $locked = FALSE) {
  $registry =& registry_invoke();
  return $registry->setViaCallback($key, $callback, $args, $locked);
}

/**
 * Wrapper to add a property to the registry
 *
 * @param $key
 *  the key to retrieve
 *
 * @return mixed
 *  the value of that key, or FALSE if the key was not found
 */
function registry_get($key) {
  $registry =& registry_invoke();
  return $registry->get($key);
}

/**
 * Delete a registry key
 *
 * @param $key
 *
 * @return mixed
 */
function registry_delete($key) {
  $registry =& registry_invoke();
  return $registry->delete($key);
}

/**
 * Wrapper to set a context in the registry
 *
 * Contexts are like regular registry keys, however you can return them without
 * knowing their key.
 *
 * @param string $type
 *  The type of item being set as a context, e.g. 'node'
 * @param $value
 *  The value to set as a context, e.g the $node object
 * @param string $context_type (optional)
 *  The type of context being set
 *    - REGISTRY_CONTEXT_PRIMARY: The primary (viewed) object(s) (default)
 *    - REGISTRY_CONTEXT_SECONDARY: Any related contexts
 *
 * @return \Registry
 */
function registry_set_context($type, $value, $context_type = REGISTRY_CONTEXT_PRIMARY) {
  $registry =& registry_invoke();
  return $registry->setContext($type, $value, $context_type, TRUE);
}

/**
 * Wrapper to set a context in the registry using a callback
 *
 * Contexts are like regular registry keys, however you can return them without
 * knowing their key.
 *
 * @param string $type
 *  The type of item being set as a context, e.g. 'node'
 * @param $callback
 *  The callback to use for the context
 * @param string $context_type (optional)
 *  The type of context being set
 *    - REGISTRY_CONTEXT_PRIMARY: The primary (viewed) object(s) (default)
 *    - REGISTRY_CONTEXT_SECONDARY: Any related contexts
 * @param $args
 *  Any arguments to pass to the callback
 *
 * @return \Registry
 */
function registry_set_context_callback($type, $callback, $context_type = REGISTRY_CONTEXT_PRIMARY, $args = NULL) {
  $registry =& registry_invoke();
  return $registry->setContextCallback($type, $callback, $context_type, $args, TRUE);
}

/**
 * Retrieve context for a request
 *
 * Contexts are like regular registry keys, however you can return them without
 * knowing their key.
 *
 * @param string $type
 * The type of context being set. This can be anything, but for returning default*  The type of context being set. This can be anything, but for returning default
 *  context should be one of the following: (optional)
 *    - REGISTRY_CONTEXT_PRIMARY: The primary (viewed) object(s) (default)
 *    - REGISTRY_CONTEXT_SECONDARY: Any related contexts
 * @return mixed
 */
function registry_get_context($type = REGISTRY_CONTEXT_ALL) {
  $registry =& registry_invoke();
  return $registry->getContext($type);
}

/**
 * Retrieve only the primary context
 */
function registry_get_primary_context() {
  $contexts = registry_get_context(REGISTRY_CONTEXT_PRIMARY);
  return $contexts[REGISTRY_CONTEXT_PRIMARY];
}

/**
 * Retrieve only the secondary context
 */
function registry_get_secondary_context() {
  $contexts = registry_get_context(REGISTRY_CONTEXT_SECONDARY);
  return $contexts[REGISTRY_CONTEXT_SECONDARY];
}

/**
 * Ensure the Registry class is available
 */
function registry_include() {
  module_load_include('inc', 'registry', 'includes/Registry.php');
}
