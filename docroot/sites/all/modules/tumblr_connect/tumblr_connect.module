<?php

/**
 * Implements hook_menu().
 */
function tumblr_connect_menu() {

  $items['admin/config/services/tumblr_connect'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tumblr_connect_admin_settings'),
      'access arguments' => array('administer tumblr_connect'),
      'title' => 'Tumblr Connect',
      'description' => 'Synchronize content with the remote Tumblr Service.',
      'type' => MENU_NORMAL_ITEM,
      'weight' => 10,
  );

  $items['admin/config/services/tumblr_connect/setting'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tumblr_connect_admin_settings'),
      'access arguments' => array('administer tumblr_connect'),
      'title' => 'Configuration Settings.',
      'description' => 'Synchronize content with the remote Tumblr Service',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -12,
  );

  $items['admin/config/services/tumblr_connect/setting/run_cron_page'] = array(
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tumblr_run_cron_task_form'),
      'access arguments' => array('administer tumblr_connect'),
      'title' => 'Run Cron Task',
      'description' => 'Retrieves remote tumblr followers to Drupal. Synchronizes changed content (Note: If tumblr was not available.)',
      'type' => MENU_LOCAL_TASK,
      'tab_parent' => 'admin/config/services/tumblr_connect',
      'weight' => -10,
  );


  $items['tumblr_connect/run_cron'] = array(
      'page callback' => 'tumblr_connect_run_cron',
      'access arguments' => array('administer tumblr_connect'),
      'title' => 'Run Tumblr Connect Cron Task',
      'description' => 'Retrieves remote tumblr followers to Drupal. Synchronizes changed content (Note: If tumblr was not available.)',
      'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_node_insert().
 */
function tumblr_connect_node_insert($node) {

  $types_allowed = tumblr_connect_get_allowed_types();
  if (in_array($node->type, $types_allowed)) {
    try {
      $operationStatus = TumblrConnection::factory()->addPost($node);
      if ($operationStatus == TumblrConnectDefinitions::BATCH_SCHEDULE) {
        drupal_set_message(t(TumblrConnectDefinitions::TUMBLR_UNAVAILABLE_MESSAGE));
      }
    } catch (Exception $e) {
      drupal_set_message(t("An Unexpected Exception has occured: @message .", array('@message' => $e->getMessage())), 'error');
    }
  }
}

/**
 * Implements hook_node_update().
 */
function tumblr_connect_node_update($node) {
  $types_allowed = tumblr_connect_get_allowed_types();
  if (in_array($node->type, $types_allowed)) {
    try {
      $operationStatus = TumblrConnection::factory()->modifyPost($node);
      if ($operationStatus == TumblrConnectDefinitions::BATCH_SCHEDULE) {
        drupal_set_message(t(TumblrConnectDefinitions::TUMBLR_UNAVAILABLE_MESSAGE));
      }
    } catch (Exception $e) {
      drupal_set_message(t("An Unexpected Exception has occured: @message .", array('@message' => $e->getMessage())), 'error');
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function tumblr_connect_node_delete($node) {
  $types_allowed = tumblr_connect_get_allowed_types();
  if (in_array($node->type, $types_allowed)) {
    try {
      $operationStatus = TumblrConnection::factory()->deletePost($node);
      if ($operationStatus == TumblrConnectDefinitions::BATCH_SCHEDULE) {
        drupal_set_message(t(TumblrConnectDefinitions::TUMBLR_UNAVAILABLE_MESSAGE));
      }
    } catch (Exception $e) {
      drupal_set_message(t("An Unexpected Exception has occured: @message .", array('@message' => $e->getMessage())), 'error');
    }
  }
}

/**
 * Implements hook_theme().
 */
function tumblr_connect_theme($existing, $type, $theme, $path) {
  return array(
      'tumblr_admin_settings' => array(
          'arguments' => array('form' => NULL),
          'render element' => 'form',
      ),
      'tumbler_followers_block' => array(
          'arguments' => array('list' => array(), 'numColumns' => 0, 'moreLink' => FALSE),
          'template' => 'tumblr-connect-followers-block',
          'preprocess functions' => array(0 => 'tumblr_connect_preprocess_tumblr_followers_block'),
      ),
  );
}

/**
 * Theme function: creates an html table populated with tumblr followers.
 * @param $follower_list
 *  Collection of follower objects.
 * @param $numColumns
 *  Sets the number of html table columns.
 * @param $useMoreLink
 *  Flag. Addms more link to remote tumblr site when set to TRUE.
 * @ingroup themeable
 */
function theme_tumblr_followers_table($variables) {

  $follower_list = $variables['list'];
  $numColumns = $variables['numColumns'];
  $useMoreLink = $variables['moreLink'];

  try {
    $tumblr_conf = tumblr_get_config();
    $header_link = l(t('Our Tumblr Page'), $tumblr_conf->getUrl(), array('attributes' => array('target' => '_blank')));
    $more_link = l(t('more'), $tumblr_conf->getUrl(), array('attributes' => array('target' => '_blank')));
  } catch (Exception $e) {
    $header_link = "";
    $more_link = "";
  }
  $header = array(array('data' => $header_link, 'colspan' => $numColumns, 'style' => 'text-align:center;'));
  $rows['data'] = array();
  $attributes = array('border' => 0, 'cellspacing' => 3, 'cellpadding' => 3);
  $total = count($follower_list);
  $odd = FALSE;
  if ($total % $numColumns) {
    $odd = TRUE;
  }

  $colIndex = 0;
  $totalIndex = 0;
  if (count($follower_list)) {
    foreach ($follower_list as $follower) {
      $totalIndex++;
      $cells[$colIndex++] = theme_follower($follower);
      if ($colIndex >= $numColumns) {
        $colIndex = 0;
        $rows[] = $cells;
        $cells = array();
      }
      if ($odd && $totalIndex == $total) {
        $rows[] = $cells;
      }
    }
  } else {
    $rows = array();
  }

  $vars = array();
  $vars['header'] = $header;
  $vars['rows'] = $rows;
  $vars['attributes'] = $attributes;
  $vars['colgroups'] = array();
  $vars['caption'] = '';
  $vars['sticky'] = array();
  $vars['empty'] = t('No Followers Found');

  $output = theme_table($vars);
  if ($useMoreLink) {
    $output .= '<br/>' . $more_link;
  }

  return $output;
}

/**
 * Theme individual tumblr follower.
 */
function theme_follower(TumblrFollowerInterface $follower) {
  $imgvar['path'] = $follower->getImage();
  $imgvar['alt'] = $follower->getName();
  $imgvar['attributes'] = array();

  $themed_image = theme_image($imgvar);
  $link = l($follower->getName() . '<br/>' . $themed_image, $follower->getUrl(), array('html' => TRUE,
      'attributes' => array('target' => '_blank'),
      array('title' => t('%name', array('%name' => $follower->getName())))));

  return $link;
}

/**
 * Theme function: prepares data for template processing.
 * @see tumblr-connect-followers-block.tpl.php
 * @ingroup themeable
 */
function tumblr_connect_preprocess_tumblr_followers_block(&$variables) {

  if (isset($variables['list'])) {
    $follower_list = array();
    $list = $variables['list'];
    foreach ($list->getList() as $follower) {
      if ($follower instanceof tumblr_follower) {
        $follower_list[] = theme_follower($follower);
      }
    }

    $variables['follower_list'] = $follower_list;
    $numCols = $variables['numColumns'];
    $displayMore = $variables['moreLink'];
    $variables['followers_table'] = tumblr_get_cached_followers_table($list, $numCols, $displayMore);
    $variables['attributes'] = array();
    $variables['title_attributes'] = array();
    $variables['content_attributes'] = array();
    $variables['classes_array'] = array();
    $variables['attributes_array'] = array();
    $variables['title_attributes_array'] = array();
    $variables['content_attributes_array'] = array();
  }
  try {
    $tumblr_conf = tumblr_get_config();
    $variables['tumblr_url'] = $tumblr_conf->getUrl();
  } catch (Exception $e) {
    $variables['tumblr_url'] = '';
  }
}

/**
 * Implements hook_cron().
 */
function tumblr_connect_run_cron() {
  tumblr_connect_cron();
  $element = array('element' => array('#tag' => 'p', '#value' => t('Tumblr Connect Cron Run'), '#attributes' => array()));
  return theme_html_tag($element);
}

/**
 * Implements hook_cron().
 */
function tumblr_connect_cron() {

  // let's start by refreshing our remote tumblr cache
  try {
    $follower_list = tumblr_get_cached_followers(TRUE);
    if (count($follower_list->getList()) == 0) {
      drupal_set_message(t('No Tumblr Followers Found'));
    } else {
      drupal_set_message(t('@count Tumblr Followers Found', array('@count' => count($follower_list->getList()))));
    }
  } catch (Exception $e) {
    watchdog('ERROR', 'An unexpected exception occured during tumblr_connect_cron(). Details: ' . $e->getMessage());
  }
  // The main purpose of this method is to synchronize our local Drupal content with our corresponding
  // remote tumblr account. Use case: The tumblr service is unavailable for a few hours. During the same
  // time period, our local Drupal node has been updated a few times. Therefore, we will have multiple records
  // in our "batch" table. We only need the most current record (e.g. perform an update). We attempt to communicate
  // with tumblr and
  //
  // The following peforms the business

  $db = new DbTumblerConnectBatch();
  $list = NULL;
  try {
    $list = $db->getAllScheduled();
  } catch (Exception $e) {
    watchdog('ERROR', 'An unexpected exception occured during tumblr_connect_cron(). Details: ' . $e->getMessage());
    drupal_set_message(t('An unexpected exception occured during tumblr_connect_cron(). Details: @message .', array('message' => $e->getMessage())), 'error');
    return;
  }
  if (count($list) == 0) {
    return;
  }

  foreach ($list as $task_node) {
    $node = $task_node->getNode();
    $task = $task_node->getTask();
    if ($node == 0 ) {
      // Node does not exist, therefore delete record from tumblr_connect_batch db table and
      // iterate to the next queued task (record in this list).
      $db->deleteByTaskId($task->getId());
      continue;
    }
  
    $operationStatus = TumblrConnectDefinitions::SUCCESS;

    switch ($task->getOperation()) {
      case TumblrConnectBatch::ADD:
        $operationStatus = TumblrConnection::factory()->addPost($node);
        break;
      case TumblrConnectBatch::UPDATE:
        $operationStatus = TumblrConnection::factory()->modifyPost($node);
        break;
      case TumblrConnectBatch::DELETE:
        $operationStatus = TumblrConnection::factory()->deletePost($node);
        break;
    }
    if ($operationStatus == TumblrConnectDefinitions::SUCCESS) {
      try {
        $db->delete($node->nid);
      } catch (Exception $e) {
        watchdog('ERROR', 'An unexpected exception occured during tumblr_connect_cron(). Details: ' . $e->getMessage());
        drupal_set_message(t('An unexpected exception occured during tumblr_connect_cron(). Details: @message .', array('message' => $e->getMessage())), 'error');
      }
    }
  }
}

/**
 * Implements hook_block_info().
 */
function tumblr_connect_block_info() {
  $blocks['tumblr_followers_block'] = array(
      'info' => t('Tumblr Followers'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function tumblr_connect_block_view($delta = '') {

  $block = tumblr_follower_block_prepare();

  return $block;
}

/**
 * Implements hook_block_save().
 */
function tumblr_connect_block_save($delta = '', $edit = array()) {
  variable_set(TumblrConnectDefinitions::NUM_FOLLOWERS_TO_DISPLAY, $edit['items']);
  variable_set(TumblrConnectDefinitions::FOLLOWERS_BLOCK_NUM_COLS, $edit['num_cols']);
  tumblr_follower_block_prepare(TRUE);
}

/**
 * Implements hook_block_configure().
 */
function tumblr_connect_block_configure($delta = '') {
  $form['items'] = array(
      '#type' => 'select',
      '#title' => t('Number of items'),
      '#description' => t('Set to zero (0) for unlimited, otherwise maxixum number of Tumblr Followers to display in block.'),
      '#default_value' => variable_get(TumblrConnectDefinitions::NUM_FOLLOWERS_TO_DISPLAY, 10),
      '#options' => drupal_map_assoc(array('0', '10', '20', '30', '40', '50', '100')),
  );
  $form['num_cols'] = array(
      '#type' => 'select',
      '#title' => t('Number of Columns to Display in Block'),
      '#description' => t('This block is displayed as grid or rows and columns. Set the number of columns here.'),
      '#default_value' => variable_get(TumblrConnectDefinitions::FOLLOWERS_BLOCK_NUM_COLS, 4),
      '#options' => drupal_map_assoc(array('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')),
  );
  return $form;
}

/**
 * Implements hook_perm().
 */
function tumblr_connect_permission() {

  return array(
      'administer tumblr_connect' => array(
          'title' => t('Administer Tumblr Connect'),
          'description' => t('Allow users to configure Tumblr Connect Settings'),
      ),
  );
}

/**
 * Implements hook_help().
 */
function tumblr_connect_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/modules#name':
      $output .= t('tumblr connect');
      break;
    case 'admin/modules#description':

      $output .= t('Uses the <a href="@url" target="_blank">tumblr</a> service to post drupal node content.', array('@url' => url('http://www.tumblr.com')));
      break;
    case 'admin/help#tumblr_connect':
      $output .= '<p>' .
              t('Uses the tumblr web service to post content. For more information on what tumblr is, visit <a href="@url" target="_blank">the official website</a>.', array('@url' => url('http://www.tumblr.com'))) .
              '</p><h3>' .
              t('Configuration') .
              '</h3><p>' .
              t('The settings associated with tumblrConnect can be found in at <a href="@tumblr_connect_settings">Tumblr Connect Settings</a>.
                You must set your Tumblr Account: Url and Login to use the module. Once the Tumblr Account
                values are set, please invoke the cron task located here to import remote tumblr followers
                <a href="@tumblr_cron_task">Import/Read Remote Tumblr Followers</a>.', array('@tumblr_connect_settings' => url('admin/config/services/tumblr_connect'), '@tumblr_cron_task' => url('admin/config/services/tumblr_connect/setting/run_cron_page'))) .
              '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_flush_caches().
 */
function tumblr_connect_flush_caches() {
  return array('cache_tumblr_connect');
}

/**
 * Caches a collection of followers objects.
 * @param $reset
 *   Reinstantiate the static cached data if $reset = TRUE.
 * @return $cached_data
 *   Collection of follower of follower objects.
 */
function tumblr_get_cached_followers($reset = FALSE) {
  static $cached_data;
  if (!isset($cached_data) || $reset) {
    if (!$reset
            && ($cache = cache_get(TumblrConnectDefinitions::CACHED_FOLLOWERS_CID, TumblrConnectDefinitions::CACHE_TABLE_NAME))
            && !empty($cache->data)) {
      $cached_data = unserialize($cache->data);
    } else {
      $requestor = new TumblrStatisticsRequestor();
      $follower_list = $requestor->getFollowersFromTumblr();
      $db = new DbTumblrFollower();
      $db->setAll($follower_list);
      $cached_data = $follower_list;
      cache_set(TumblrConnectDefinitions::CACHED_FOLLOWERS_CID, serialize($cached_data), TumblrConnectDefinitions::CACHE_TABLE_NAME, CACHE_TEMPORARY);
    }
  }
  return $cached_data;
}

/**
 * Theme function: creates the custom themed tumblr admin settings form.
 *
 * @ingroup themeable
 */
function theme_tumblr_admin_settings($vars) {
  $form = $vars['form'];

  $types = node_type_get_names();
  $count = count($types);
  $num = intval($count);

  $checkboxes = $form['drupal_types']['types_selected'];
  // determine wheter we need to fill in the last table cell with
  // a placeholder (blank) html element
  $odd = FALSE;
  if ($num % 2) {
    $odd = TRUE;
  }
  $header = array(" ", " ");
  $colIndex = 0;
  $totalIndex = 0;
  $rows['data'] = array();

  foreach ($types as $key => $value) {
    $totalIndex++;
    if ($colIndex == 0) {
      $row[] = drupal_render($checkboxes[$key]);
    }
    if ($colIndex == 1) {
      $row[] = drupal_render($checkboxes[$key]);
    }
    $colIndex++;
    if ($colIndex >= 2) {
      $colIndex = 0;
      $rows[] = array($row[0], $row[1]);
      $row = array();
    }
    if ($odd && $totalIndex == $num) {
      $row[] = drupal_render($checkboxes[$key]);
      $rows[] = $row;
    }
  }
  $output = drupal_render($form['basic']);

  $tablevars['rows'] = $rows;
  $tablevars['header'] = $header;
  $tablevars['caption'] = t('Connect Drupal Content Types to Tumblr');
  $tablevars['colgroups'] = array();
  $tablevars['attributes'] = array();
  $tablevars['sticky'] = array();
  $tablevars['empty'] = array();
  $output .= theme_table($tablevars);
  $output .= drupal_render($form['form_build_id']);
  $output .= drupal_render($form['form_token']);
  $output .= drupal_render($form['form_id']);
  $output .= drupal_render($form['submit']);
  return $output;
}

/**
 * Implements hook_form().
 */
function tumblr_connect_admin_settings($form, &$form_state) {

  $email = '';
  $password = '';
  $url = '';
  $teaser_only = TRUE;
  $types = node_type_get_names();

  $form['#theme'] = 'tumblr_admin_settings';
  if (count($form_state['input']) > 0) {
    $email = $form_state['input']['email'];
    $password = $form_state['input']['password'];
    $url = $form_state['input']['url'];
    $teaser_only = isset($form_state['input']['teaser_only']) ? $form_state['input']['teaser_only'] : FALSE;

    $types_allowed = array();

    foreach ($types as $key => $value) {
      if ( isset ($form_state['input']['types_selected']) &&
              array_key_exists($key, $form_state['input']['types_selected'])
              &&
              $form_state['input']['types_selected'][$key] === $key) {
        $types_allowed[$key] = $key;
      } else {
        $types_allowed[$key] = '';
      }
    }
  } else {
    try {
      $tumblr_config = DbTumblrConnectConfig::factory()->get();
      $obj_id = $tumblr_config->getId();
      $email = $tumblr_config->getEmail();
      $password = $tumblr_config->getPassword();
      $url = $tumblr_config->getUrl();
      $teaser_only = $tumblr_config->getTeaserOnly();
      $types_allowed = $tumblr_config->getContentTypes();
    } catch (Exception $e) {
      foreach ($types as $key => $value) {
        $types_allowed[$key] = '';
      }
    }
  }

  $form['basic'] = array(
      '#type' => 'fieldset',
      '#title' => t('Basic'),
  );

  $form['basic']['url'] = array(
      '#type' => 'textfield',
      '#title' => t('Url of remote tumblr'),
      '#required' => TRUE,
      '#default_value' => $url,
  );

  $form['basic']['email'] = array(
      '#type' => 'textfield',
      '#title' => t('Email login to tumblr'),
      '#required' => TRUE,
      '#default_value' => $email,
  );

  $form['basic']['password'] = array(
      '#type' => 'textfield',
      '#title' => t('Password login to tumblr'),
      '#required' => TRUE,
      '#default_value' => $password,
  );

  $form['basic']['teaser_only'] = array(
      '#type' => 'checkbox',
      '#title' => t('Just Post the Teaser to Tumblr'),
      '#default_value' => $teaser_only,
      '#return_value' => TRUE,
  );

  $form['drupal_types'] = array(
      '#type' => 'fieldset',
      '#title' => t('Drupal Content Types'),
  );

  $type_vals = array_values($types);
  $form['drupal_types']['types_selected'] = array(
      '#type' => 'checkboxes',
      '#options' => $types,
      '#default_value' => $types_allowed,
      '#return_value' => $type_vals[0],
  );


  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save Changes'),
  );

  return $form;
}

/**
 * Validation function for tumblr_connect_admin_settings().
 *
 * @see tumblr_connect_admin_settings()
 */
function tumblr_connect_admin_settings_submit($form, &$form_state) {

  $types = node_type_get_names();
  $types_allowed = array();

  foreach ($types as $key => $value) {
    if ($form_state['values']['types_selected'][$key] === $key) {
      $types_allowed[$key] = $key;
    } else {
      $types_allowed[$key] = '';
    }
  }

  $db = DbTumblrConnectConfig::factory();
  try {
    $tumblr_config = $db->get();
  } catch (TumblrConnectDatabaseNoRecordException $e) {
    $tumblr_config = new TumblrConnectConfig();
  }
  $tumblr_config->setUrl($form_state['values']['url']);
  $tumblr_config->setEmail($form_state['values']['email']);
  $tumblr_config->setPassword($form_state['values']['password']);
  $teaser_only = $form_state['values']['teaser_only'] ? TRUE : FALSE;
  $tumblr_config->setTeaserOnly($form_state['values']['teaser_only']);
  $tumblr_config->setContentTypes($types_allowed);
  try {
    $db->addOrModify($tumblr_config);
    // make sure we kill the static setting in nodeapi
    tumblr_connect_get_allowed_types(TRUE);
    $db->getCachedConfig(TRUE);
    drupal_set_message(t('Tumblr Connect Config Updated Successfully.'));
  } catch (Exception $e) {
    drupal_set_message($e->getMessage());
  } catch (TumblrConnectDatabaseException $de) {
    drupal_set_message($de->getMessage());
  }
}

function tumblr_connect_get_allowed_types($reset = FALSE) {
  static $types_allowed;
  if ($reset) {
    unset($types_allowed);
  }
  if (isset($types_allowed)) {
    return $types_allowed;
  } else {
    try {
      $tumblr_conf = tumblr_get_config();
      $tumblr_setting = $tumblr_conf->getContentTypes();
      if (is_array($tumblr_setting)) {
        $types_allowed = array_values($tumblr_setting);
      } else {
        // We will pass back an empty array. Consistent to no database record
        // found. This method is used by nodeapi therefore we just neeed a consistent
        // signal the no types are defined.
        $types_allowed = array();
      }
    } catch (TumblrConnectDatabaseNoRecordException $e) {
      // in this case we just need to pass back an empty array
      // Used only by hook_nodeapi. We just need to signal no types defined consistently.
      $types_allowed = array();
    }
  }
  return $types_allowed;
}

/*
 * @param $reset
 *  Flag. Get fresh data from the database if set to TRUE.
 * @return $tumblr_conf
 *  Configuration settings stored in a tumblr_connect_config object.
 */

function tumblr_get_config($reset = FALSE) {
  static $tumblr_conf;
  if ($reset) {
    unset($tumblr_conf);
  }

  if (isset($tumblr_conf)) {
    return $tumblr_conf;
  } else {
    try {
      $tumblr_conf = DbTumblrConnectConfig::factory()->get();
    } catch (TumblrConnectDatabaseNoRecordException $e) {
      throw $e;
    }
  }
  return $tumblr_conf;
}

/*
 * @param $reset
 *  Flag. Get fresh data from the database if set to TRUE.
 * @return $block
 *  Block populated with themed tumbler followers.
 */

function tumblr_follower_block_prepare($reset = FALSE) {
  try {
    $displayMoreLink = FALSE;
    $follower_list = tumblr_get_cached_followers();
    $maxDisplaySetting = variable_get(TumblrConnectDefinitions::NUM_FOLLOWERS_TO_DISPLAY, 10);
    if ($maxDisplaySetting) {
      // Determine whether we need a more link.
      if (count($follower_list->getList()) > $maxDisplaySetting) {
        $displayMoreLink = TRUE;
        // if a cap we set on display, splice the array here before display.
        $obj_array = $follower_list->getList();
        $obj_array = array_slice($obj_array, 0, $maxDisplaySetting);
        $follower_list->setList($obj_array);
      }
    }
    $num_cols = variable_get(TumblrConnectDefinitions::FOLLOWERS_BLOCK_NUM_COLS, 4);
    if ($reset) {
      tumblr_get_cached_followers_table($follower_list, $num_cols, $displayMoreLink, $reset);
    }

    $vars = array('list' => $follower_list, 'numColumns' => $num_cols, 'moreLink' => $displayMoreLink);
    $content = theme('tumbler_followers_block', $vars);
    $block = array('content' => $content);
  } catch (TumblrConnectDatabaseNoRecordException $e) {
    watchdog('WARNING', 'Tumblr Followers block set but could not find records. Please verify tumblr connect admin settings. Run cron to get remote tumblr data. Details: ' . $e->getMessage());
  }
  return $block;
}

/**
 * Caches a themed html table populated with followers.
 * @param $follower_list
 *  Collection of follower objects.
 * @param $numCols
 *  Number of html table columns.
 * @param $useModeLink
 *  Flags whether an addition "more" links is added to cached output.
 * @param $reset
 *  Reinstantiate the static cached data if $reset = TRUE.
 * @return $cached_data
 *  Theme html table of followers.
 */
function tumblr_get_cached_followers_table($follower_list, $numCols, $useMoreLink, $reset = FALSE) {
  static $cached_table_data;
  static $counter;
  if (isset($cached_table_data)) {
    $counter +=1;
  }

  if (!isset($cached_table_data) || $reset) {
    if (!$reset
            && ($cache = cache_get(TumblrConnectDefinitions::CACHED_THEMED_FOLLOWERS_CID, TumblrConnectDefinitions::CACHE_TABLE_NAME))
            && !empty($cache->data)) {
      $cached_table_data = unserialize($cache->data);
    } else {
      $vars = array('list' => $follower_list->getList(), 'numColumns' => $numCols, 'moreLink' => $useMoreLink);
      $themed_table = theme_tumblr_followers_table($vars);
      $cached_table_data = $themed_table;
      cache_set(TumblrConnectDefinitions::CACHED_THEMED_FOLLOWERS_CID, serialize($cached_table_data), TumblrConnectDefinitions::CACHE_TABLE_NAME, CACHE_TEMPORARY);
    }
  }
  return $cached_table_data;
}

/*
 * Allow users to run cron job manually.
 */

function tumblr_run_cron_task_form($form, &$form_state) {
  $weight = 0;

  $form['box-wrapper'] = array(
      '#type' => 'fieldset',
      '#description' => t('Cron Task imports remote tumblr followers, synchronizes Drupal posts with Tumblr. Note! The Tumblr Connect Cron job will run with all other scheduled Drupal cron tasks. Manual submission supplied here as a extra convenience,'),
      '#weight' => $weight++,
      '#collapsible' => FALSE,
  );

  $form['box-wrapper']['run_cron'] = array(
      '#type' => 'submit',
      '#value' => 'Run Tumblr Connect Cron Job',
      '#weight' => $weight++,
  );
  return $form;
}

function tumblr_run_cron_task_form_submit($form, &$form_state) {
  tumblr_connect_cron();
}