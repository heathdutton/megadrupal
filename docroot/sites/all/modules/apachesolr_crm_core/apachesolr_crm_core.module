<?php

/**
 * @file
 *  Index entity types from CRM Core into a solr core.
 */

function apachesolr_crm_core_apachesolr_entity_info_alter(&$entity_info) {
  $types = array(
    'crm_core_contact',
    'crm_core_activity',
  );

  foreach ($types as $type) {
    $entity_info[$type]['indexable'] = TRUE;
    $entity_info[$type]['status callback'][] = "_apachesolr_crm_core_status_callback";
    $entity_info[$type]['document callback'][] = "_apachesolr_{$type}_document_callback";
    $entity_info[$type]['reindex callback'] = "_apachesolr_{$type}_reindex_callback";
    $entity_info[$type]['index_table'] = "apachesolr_index_entities_{$type}";
  }
}

/**
 * Status callback for ApacheSolr.
 */
function _apachesolr_crm_core_status_callback($entity_id, $entity_type) {
  // Both types have no published/unpublished flag.
  return 1;
}

/**
 * Builds the ApacheSolrDocument for the a crm_core_contact entity.
 *
 * @param ApacheSolrDocument $document
 *   The Solr document we are building up.
 * @param stdClass $entity
 *   The entity we are indexing.
 * @param string $entity_type
 *   The type of entity we're dealing with.
 */
function _apachesolr_crm_core_contact_document_callback(ApacheSolrDocument $document, $entity, $entity_type) {
  // Title is a required field.
  $name = name_format($entity->contact_name[LANGUAGE_NONE][0], name_settings('default_format'));
  $document->label = apachesolr_clean_text($name);

  // Build the contact body.
  $build = crm_core_contact_view($entity);
  $text = drupal_render($build);
  $document->content = apachesolr_clean_text($text);

  $document->contact_id = $entity->contact_id;
  $document->type = $entity->type;
  $document->is_uid = $entity->uid;

  $document->ds_created = apachesolr_date_iso($entity->created);
  $document->ds_changed = apachesolr_date_iso($entity->changed);

  //  Generic usecase for future reference. Callbacks can
  //  allow you to send back multiple documents
  $documents = array();
  $documents[] = $document;
  return $documents;
}

/**
 * Builds the ApacheSolrDocument for the a crm_core_activity entity.
 *
 * @param ApacheSolrDocument $document
 *   The Solr document we are building up.
 * @param stdClass $entity
 *   The entity we are indexing.
 * @param string $entity_type
 *   The type of entity we're dealing with.
 */
function _apachesolr_crm_core_activity_document_callback(ApacheSolrDocument $document, $entity, $entity_type) {
  // Title is a required field.
  $document->label = apachesolr_clean_text($entity->title);

  // Build the contact body.
  $build = crm_core_activity_view($entity);
  $text = drupal_render($build);
  $document->content = apachesolr_clean_text($text);

  $document->activity_id = $entity->activity_id;
  $document->type = $entity->type;
  $document->is_uid = $entity->uid;

  $document->ds_created = apachesolr_date_iso($entity->created);
  $document->ds_changed = apachesolr_date_iso($entity->changed);

  //  Generic usecase for future reference. Callbacks can
  //  allow you to send back multiple documents
  $documents = array();
  $documents[] = $document;
  return $documents;
}

/**
 * Reindexing callback for ApacheSolr, for crm_core_contact's.
 */
function _apachesolr_crm_core_reindex_callback($env_id, $entity_type, $bundle = NULL) {
  $indexer_table = apachesolr_get_indexer_table($entity_type);
  $transaction = db_transaction();
  $info = entity_get_info($entity_type);
  try {
    $indexable_bundles = apachesolr_get_index_bundles($env_id, $entity_type);

    if ($bundle && !empty($indexable_bundles) && !in_array($bundle, $indexable_bundles)) {
      // The bundle specified is not in the indexable bundles list.
      return NULL;
    }

    // Remove the items currently queued to be indexed
    $delete = db_delete($indexer_table);
    $delete->condition('entity_type', $entity_type);
    if (!empty($bundle)) {
      $delete->condition('bundle', $bundle);
    }
    elseif (!empty($indexable_bundles)) {
      $delete->condition('bundle', $indexable_bundles, 'IN');
    }
    $delete->execute();

    $select = db_select($info['base table'], 'e');
    $select->addExpression("'$entity_type'", 'entity_type');
    $select->addField('e', $info['entity keys']['id'], 'entity_id');
    $select->addField('e', $info['entity keys']['bundle'], 'bundle');
    $select->addExpression("'1'", 'status');
    $select->addExpression(REQUEST_TIME, 'changed');
    if (!empty($bundle)) {
      // Mark all entities of the specified bundle for reindexing.
      $select->condition('e.' . $info['entity keys']['bundle'], $bundle);
    }
    elseif (!empty($indexable_bundles)) {
      // Restrict reindex to content types in the indexable bundles list.
      $select->condition('e.' . $info['entity keys']['bundle'], $indexable_bundles, 'IN');
    }

    $insert = db_insert($indexer_table)
      ->fields(array('entity_id', 'bundle', 'entity_type', 'status', 'changed'))
      ->from($select)
      ->execute();

  }
  catch (Exception $e) {
    $transaction->rollback();
    // TODO: apachesolr_index_node_solr_reindex() simple re-throws $e - why can't we do that here?
    drupal_set_message($e->getMessage(), 'error');
    watchdog_exception('apachesolr_crm_core', $e);
    return FALSE;
  }

  return TRUE;
}

/**
 * Reindexing callback for ApacheSolr, for crm_core_contact's.
 */
function _apachesolr_crm_core_contact_reindex_callback($env_id, $bundle = NULL) {
  return _apachesolr_crm_core_reindex_callback($env_id, 'crm_core_contact', $bundle);
}

/**
 * Reindexing callback for ApacheSolr, for crm_core_contact's.
 */
function _apachesolr_crm_core_activity_reindex_callback($env_id, $bundle = NULL) {
  return _apachesolr_crm_core_reindex_callback($env_id, 'crm_core_activity', $bundle);
}

