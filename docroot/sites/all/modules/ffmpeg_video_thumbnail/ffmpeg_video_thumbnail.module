<?php
/**
 * @file
 * Hook implementations and shared functions for the FFMpeg Video Thumbnail.
 */

/**
 * Implements hook_field_formatter_info().
 */
function ffmpeg_video_thumbnail_field_formatter_info() {
  $formatters = array();
  $formatters['ffmpeg_thumbnail_image'] = array(
    'label' => t('FFMpeg Thumbnail'),
    'field types' => array('file'),
    'description' => t('Displays a single frame of a video file, extracted using FFMpeg.'),
    'settings' => array(),
  );
  if (module_exists('picture')) {
    $formatters['ffmpeg_thumbnail_image']['label'] = t('FFMpeg Thumbnail (Image)');
    $formatters['ffmpeg_thumbnail_picture'] = array(
      'label' => t('FFMpeg Thumbnail (Picture)'),
      'field types' => array('file'),
      'description' => t('Displays a single frame of a video file, extracted using FFMpeg.'),
      'settings' => array(),
    );
  }
  return $formatters;
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function ffmpeg_video_thumbnail_field_formatter_info_alter(&$info) {
  $info['ffmpeg_thumbnail_image']['settings'] += $info['image']['settings'];
  if (isset($info['picture'])) {
    $info['ffmpeg_thumbnail_picture']['settings'] += $info['picture']['settings'];
  }
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function ffmpeg_video_thumbnail_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state) {
  $form = array();
  switch ($instance['display'][$view_mode]['type']) {
    case 'ffmpeg_thumbnail_image':
      $form += image_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
      break;

    case 'ffmpeg_thumbnail_picture':
      $instance['display'][$view_mode]['type'] = 'picture';
      $form += picture_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
      break;
  }
  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function ffmpeg_video_thumbnail_field_formatter_settings_summary($field, $instance, $view_mode) {
  $summary = '';
  switch ($instance['display'][$view_mode]['type']) {
    case 'ffmpeg_thumbnail_image':
      $summary .= image_field_formatter_settings_summary($field, $instance, $view_mode);
      break;

    case 'ffmpeg_thumbnail_picture':
      $instance['display'][$view_mode]['type'] = 'picture';
      $summary .= picture_field_formatter_settings_summary($field, $instance, $view_mode);
      break;
  }
  return $summary;
}

/**
 * Implements hook_field_formatter_view()
 */
function ffmpeg_video_thumbnail_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $image_items = array();
  foreach ($items as $delta => $item) {
    try {
      $thumbnail_filepath = ffmpeg_video_thumbnail_extract_frame($item);
      $image_info = image_get_info($thumbnail_filepath);
      $image_items[$delta] = array(
        'uri' => $thumbnail_filepath,
        'alt' => '',
        'width' => $image_info['width'],
        'height' => $image_info['height'],
        'title' => '',
        'attributes' => array(
          'class' => array('video-thumbnail'),
        ),
      );
    }
    catch (Exception $e) {
      watchdog('FFMpeg Video Thumbnail', 'Error while extracting frame from @file: @message.', array(
        '@file' => $item['uri'],
        '@message' => $e->getMessage(),
      ), WATCHDOG_ERROR,  url(current_path()));
    }
  }
  switch ($display['type']) {
    case 'ffmpeg_thumbnail_image':
      return image_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $image_items, $display);
      break;

    case 'ffmpeg_thumbnail_picture':
      $picture_display = array_merge(array(), $display);
      $picture_display['type'] = 'picture';
      return picture_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $image_items, $picture_display);
      break;
  }
}

/**
 * Extract the frame at the given time from a video file.
 *
 * @param object|array $file
 *   The local video file to extract a thumbnail from, either as a file object
 *   or as an array.
 * @param \FFMpeg\Coordinate\TimeCode $at
 *   The time to extract the frame at, defaults to half the movie duration.
 *
 * @return string
 *   The URI of the extracted thumbnail.
 *
 * @throws RuntimeException
 *   If an error occurs when extracting the thumbnail
 * @throws InvalidArgumentException
 *   If $file is not a local file.
 */
function ffmpeg_video_thumbnail_extract_frame($file, \FFMpeg\Coordinate\TimeCode $at = NULL) {
  if (!is_object($file) && !is_array($file)) {
    throw new InvalidArgumentException(t('The $file argument must be an object and an array.'));
  }
  $file = (array) $file;
  $file_default_scheme = file_default_scheme();
  $thumbnail_dir = file_default_scheme() . '://' . variable_get('ffmpeg_video_thumbnail_dir', 'thumbnails');
  $thumbnail_filename = hash('md5', $file['uri']) . '-' . ($at ? str_replace(array(':','.'), '',(string) $at) : 'default') . '.jpg';
  $thumbnail_uri =  $thumbnail_dir . '/' .$thumbnail_filename;
  // Check if the thumbnail already exists.
  if (file_exists($thumbnail_uri)) {
    // Check if the existing thumbnail is older than the file itself.
    if (filemtime($file['uri']) <= filemtime($thumbnail_uri)) {
      // The existing thumbnail can be used, nothing to do.
      return $thumbnail_uri;
    }
    else {
      // Delete the existing but out-of-date thumbnail.
      file_unmanaged_delete($thumbnail_uri);
      // Clears cached versions of a the existing thumbnail file in all image styles.
      image_path_flush($thumbnail_uri);
    }
  }
  $scheme = file_uri_scheme($file['uri']);
  $wrappers = file_get_stream_wrappers(STREAM_WRAPPERS_LOCAL);
  // Check if the source is a remote file.
  if (empty($wrappers[$scheme]) || !empty($wrappers[$scheme]['remote'])) {
    // Use the URL of a remote file.
    $file['uri'] = file_create_url($file['uri']);
    if (!parse_url($file['uri'], PHP_URL_SCHEME)) {
      global $is_https;
      $file['uri'] = ($is_https ? 'https:' : 'http:') . $file['uri'];
    }
  }
  try {
    $ffmpeg = php_ffmpeg();
    $video = $ffmpeg->open($file['uri']);
    $video_stream = $video->getStreams()->videos()->first();
    if (empty($at)) {
      if ($video_stream->has('duration')) {
        $duration = $video_stream->get('duration');
        $at = FFMpeg\Coordinate\TimeCode::fromSeconds($duration / 2);
      }
      else {
        $at = FFMpeg\Coordinate\TimeCode::fromSeconds(1);
      }
    }
    if (!file_prepare_directory($thumbnail_dir, FILE_CREATE_DIRECTORY)) {
      throw new RuntimeException(t('Unable to create @directory.', array('@directory' => $thumbnail_dir)));
    }
    // Check if the destination is a remote file.
    if (empty($wrappers[$file_default_scheme]) || !empty($wrappers[$file_default_scheme]['remote'])) {
      // Use a temporary local file as destination.
      $temporary_thumbnail_uri = str_replace("$scheme://", 'temporary://', $thumbnail_uri);
      $temporary_thumbnail_dir = dirname($temporary_thumbnail_uri);
      file_prepare_directory($temporary_thumbnail_dir, FILE_CREATE_DIRECTORY);
      $thumbnail_realpath = drupal_realpath($temporary_thumbnail_uri);
    }
    else {
      $thumbnail_realpath = drupal_realpath($thumbnail_uri);
    }
    $video
      ->frame($at)
      ->save($thumbnail_realpath);
    if (isset($temporary_thumbnail_uri)) {
      // Copy the temporary local file to the final destination.
      file_unmanaged_copy($temporary_thumbnail_uri, $thumbnail_uri);
      file_unmanaged_delete($temporary_thumbnail_uri);
    }
  }
  catch (Exception $e) {
    throw new RuntimeException(t('Error while extracting frame from @file, check php_ffmpeg log.', array('@file' => $file['uri'])), 0, $e);
  }
  return $thumbnail_uri;
}
