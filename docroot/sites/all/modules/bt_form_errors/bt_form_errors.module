<?php

/**
 * @file
 * Makes drupal messages as tooltip hints for each form field using BeautyTips.
 */

/**
 * Shows tooltip messages on every page except the listed pages.
 */
define('BT_FORM_ERRORS_VISIBILITY_NOTLISTED', 0);

/**
 * Shows tooltip messages on only the listed pages.
 */
define('BT_FORM_ERRORS_VISIBILITY_LISTED', 1);

/**
 * Shows tooltip messages if the associated PHP code returns TRUE.
 */
define('BT_FORM_ERRORS_VISIBILITY_PHP', 2);

/**
 * Implements of hook_permission().
 */
function bt_form_errors_permission() {
  return array(
    'administer bt_form_errors' => array(
      'title' => t('Administer BeautyTips Form Errors'),
      'description' => t('Access to BeautyTips Form Errors settings form.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function bt_form_errors_menu() {
  $items = array();

  $items['admin/config/user-interface/bt-form-errors'] = array(
    'title' => 'BeautyTips Form Errors',
    'description' => 'Configure settings related to the BeautyTips Form Errors module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bt_form_errors_settings'),
    'access arguments' => array('administer bt_form_errors'),
    'file' => 'bt_form_errors.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function bt_form_errors_form_alter(&$form, &$form_state, $form_id) {
  // Skip process if bt messages disabled on current page in admin settings.
  if (!bt_form_errors_visiblity()) {
    return;
  }

  $bfe_settings = bt_form_errors_get_settings();

  $module_path = drupal_get_path('module', 'bt_form_errors');
  $settings['bt_form_errors'] = array_merge(
    array(
      'trigger' => "none",
      'clickAnywhereToClose' => FALSE,
      'closeWhenOthersOpen' => FALSE),
    beautytips_get_style($bfe_settings['bt_style']));

  $keys_no_add = array(
    'cssSelect',
    'style',
    'list',
    'text',
    'preEval',
    'ajaxDisableLink',
    'animate',
  );
  foreach ($settings['bt_form_errors'] as $key => $value) {
    // Ensure that numeric options are not passed as strings.
    $settings['beautytips'][$key] = is_numeric($value) ? (int) $value : $value;
    if (!in_array($key, $keys_no_add)) {
      $settings['beautytips']['list'][] = $key;
    }
  }

  $form['#attached']['css'][] = $module_path . '/css/bt-form-errors.css';
  $form['#attached']['js'][] = $module_path . '/js/bt_form_errors.js';
  $form['#attached']['js'][] = array(
    'data' => $settings,
    'type' => 'setting',
  );

  // Add BeautyTips libraries in case "Add beautytips js to every page"
  // option was not checked.
  beautytips_add_beautytips();

  // Adds function to catch form errors, before they will be rendered by drupal.
  array_push($form['#validate'], 'bt_form_errors_form_validation');
}

/**
 * Validation function to catch errors, before they will be rendered by drupal.
 */
function bt_form_errors_form_validation($form, &$form_state) {
  if ($errors = form_get_errors()) {
    foreach ($errors as $error) {
      bt_form_errors_set_processed_message($error, 'error');
    }
  }
}

/**
 * Implements hook_theme().
 */
function bt_form_errors_theme($existing, $type, $theme, $path) {
  return array(
    'bt_form_errors_messages' => array(
      'variables' => array('display' => NULL),
    ),
  );
}

/**
 * Implements hook_theme_registry_alter().
 */
function bt_form_errors_theme_registry_alter(&$theme_registry) {
  // Form elements list to alter.
  $elements = array(
    'textfield',
    'password',
    'textarea',
    'select',
    'radio',
    'checkbox',
    'file',
  );

  foreach ($elements as $element) {
    $theme_registry[$element]['process functions'][] = "bt_form_errors_process_element";
  }

  // Overriding core messages theme to exclude messages exposed in tooltips.
  $theme_registry['status_messages']['function'] = "theme_bt_form_errors_messages";
}

/**
 * Processes form elements. Adds error text attribute for tooltips.
 */
function bt_form_errors_process_element(&$vars) {
  // Skip process if bt messages disabled on current page in admin settings.
  if (!bt_form_errors_visiblity()) {
    return;
  }

  $element = &$vars['element'];

  $error = form_get_error($element);
  if (isset($element['#parents']) && $error !== NULL) {
    $element['#attributes']['data-error-text'] = $error;
  }
}

/**
 * Sets a message as processed for tooltip.
 *
 * These messages are stored in a session variable and will be
 * excluded from core messages session variable ($_SESSION['messages']).
 *
 * @param string $message
 *   (optional) The translated message to be displayed to the user. For
 *   consistency with other messages, it should begin with a capital letter and
 *   end with a period.
 * @param string $type
 *   (optional) The message's type. Defaults to 'status'. These values are
 *   supported:
 *   - 'status'
 *   - 'warning'
 *   - 'error'
 *
 * @return array|null
 *   A multidimensional array with keys corresponding to the set message types.
 *   The indexed array values of each contain the set messages for that type.
 *   Or, if there are no messages set, the function returns NULL.
 *
 * @see bt_form_errors_get_processed_message()
 * @see theme_bt_form_errors_messages()
 */
function bt_form_errors_set_processed_message($message = NULL, $type = 'status') {
  if ($message) {
    if (!isset($_SESSION['bt_form_errors'][$type])) {
      $_SESSION['bt_form_errors'][$type] = array();
    }
    $_SESSION['bt_form_errors'][$type][] = $message;
  }

  return !empty($_SESSION['bt_form_errors']) ? $_SESSION['bt_form_errors'] : NULL;
}

/**
 * Returns all messages that have been exposed for tooltip.
 *
 * @param string $type
 *   (optional) Limit the messages returned by type. Defaults to NULL, meaning
 *   all types. These values are supported:
 *   - NULL
 *   - 'status'
 *   - 'warning'
 *   - 'error'
 * @param bool $clear_queue
 *   (optional) If this is TRUE, the queue will be cleared of messages of the
 *   type specified in the $type parameter. Otherwise the queue will be left
 *   intact. Defaults to TRUE.
 *
 * @return array
 *   A multidimensional array with keys corresponding to the set message types.
 *   The indexed array values of each contain the set messages for that type.
 *   The messages returned are limited to the type specified in the $type
 *   parameter. If there are no messages of the specified type, an empty array
 *   is returned.
 *
 * @see bt_form_errors_set_processed_message()
 * @see theme_bt_form_errors_messages()
 */
function bt_form_errors_get_processed_message($type = NULL, $clear_queue = TRUE) {
  if ($messages = bt_form_errors_set_processed_message()) {
    if ($type) {
      if ($clear_queue) {
        unset($_SESSION['bt_form_errors'][$type]);
      }
      if (isset($messages[$type])) {
        return array($type => $messages[$type]);
      }
    }
    else {
      if ($clear_queue) {
        unset($_SESSION['bt_form_errors']);
      }
      return $messages;
    }
  }
  return array();
}

/**
 * Overridden core messages theme to exclude messages exposed in tooltips.
 *
 * Returns HTML for status and/or error messages, grouped by type.
 *
 * An invisible heading identifies the messages for assistive technology.
 * Sighted users see a colored box. See http://www.w3.org/TR/WCAG-TECHS/H69.html
 * for info.
 *
 * @param array $variables
 *   An associative array containing:
 *   - display: (optional) Set to 'status' or 'error' to display only messages
 *     of that type.
 *
 * @return string
 *   Returns HTML output for drupal messages.
 */
function theme_bt_form_errors_messages($variables) {
  $display = $variables['display'];
  $output = '';

  // Get processed messages.
  $tooltip_processed = bt_form_errors_get_processed_message();

  $status_heading = array(
    'status' => t('Status message'),
    'error' => t('Error message'),
    'warning' => t('Warning message'),
  );
  foreach (drupal_get_messages($display) as $type => $messages) {
    if (isset($tooltip_processed[$type]) && count($tooltip_processed[$type]) >= count($messages)) {
      continue;
    }

    $output = "<div class=\"messages $type\">\n";
    if (!empty($status_heading[$type])) {
      $output .= '<h2 class="element-invisible">' . $status_heading[$type] . "</h2>\n";
    }
    if (count($messages) > 1) {
      $output .= " <ul>\n";
      foreach ($messages as $message) {
        // Check if this message have been already exposed.
        if (!isset($tooltip_processed[$type]) || !in_array($message, $tooltip_processed[$type])) {
          $output .= '  <li>' . $message . "</li>\n";
        }
      }
      $output .= " </ul>\n";
    }
    else {
      $output .= $messages[0];
    }
    $output .= "</div>\n";
  }
  return $output;
}

/**
 * Returns true or false whether tooltip messages enabled on current page.
 */
function bt_form_errors_visiblity() {
  $page_match = TRUE;
  $settings = bt_form_errors_get_settings();

  // Match path if necessary.
  if (!empty($settings['pages'])) {
    // Convert path to lowercase. This allows comparison of the same path
    // with different case. Ex: /Page, /page, /PAGE.
    $pages = drupal_strtolower($settings['pages']);
    if ($settings['visibility'] < BT_FORM_ERRORS_VISIBILITY_PHP) {
      // Convert the Drupal path to lowercase.
      $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
      // Compare the lowercase internal and lowercase path alias (if any).
      $page_match = drupal_match_path($path, $pages);
      if ($path != $_GET['q']) {
        $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
      }
      // When $settings['visibility'] has a value
      // of 0 (BT_FORM_ERRORS_VISIBILITY_NOTLISTED)
      // the block is displayed on all pages except
      // those listed in $settings['pages'].
      // When set to 1 (BT_FORM_ERRORS_VISIBILITY_LISTED),
      // it is displayed only on those
      // pages listed in $settings['pages'].
      $page_match = !($settings['visibility'] xor $page_match);
    }
    elseif (module_exists('php')) {
      $page_match = php_eval($settings['pages']);
    }
    else {
      $page_match = FALSE;
    }
  }

  return $page_match;
}

/**
 * Returns all module settings.
 */
function bt_form_errors_get_settings() {
  $settings = array(
    'bt_style' => 'error',
  );
  return variable_get('bt_form_errors', $settings);
}

/**
 * Implements hook_define_beautytips_styles().
 */
function bt_form_errors_define_beautytips_styles() {
  $styles['error'] = array(
    'trigger' => "none",
    'clickAnywhereToClose' => FALSE,
    'closeWhenOthersOpen' => FALSE,
    'shrinkToFit' => TRUE,
    'positions' => array('right', 'bottom'),
    'fill' => '#A8000B',
    'padding' => "2px 5px",
    'shadow' => TRUE,
    'shadowBlur' => 5,
    'shadowColor' => '#000',
    'strokeStyle' => '#8C0007',
    'spikeLength' => 8,
    'spikeGirth' => 5,
    'cornerRadius' => 0,
    'cssClass' => 'bt-error',
    'cssStyles' => array(
      'fontSize' => '0.846em',
      'color' => '#ffffff',
    ),
  );

  return $styles;
}
