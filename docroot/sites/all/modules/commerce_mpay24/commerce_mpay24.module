<?php

// mPAY24's IP addresses
// @see commerce_mpay24_confirm_callback()
define('COMMERCE_MPAY24_TEST_IP', '213.164.23.169');
define('COMMERCE_MPAY24_LIVE_IP', '213.164.25.245');


/**
 * Implements hook_libraries_info().
 */
function commerce_mpay24_libraries_info() {
  $libraries['mpay24'] = array(
    'name' => 'mPAY24 API',
    'vendor url' => 'https://github.com/mPAY24/mpay24_php_api',
    'download url' => 'https://github.com/mPAY24/mpay24_php_api/archive/master.zip',
    'path' => 'api',
    'files' => array(
      'php' => array(
        'MPay24Api.php',
        'MPay24Shop.php',
       ),
    ),
    'version callback' => 'commerce_mpay24_library_get_version',
  );
  return $libraries;
}

/**
 * Version callback for the mpay24 api. Just return 1 as the exact version is
 * difficult to detect.
 */
function commerce_mpay24_library_get_version() {
  return '1';
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_mpay24_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_mpay24'] = array(
    'base' => 'commerce_mpay24',
    'title' => t('Payment via mPAY24'),
    'short_title' => t('mPAY24'),
    'description' => t('mPAY24 integration (redirect method)'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Helper function that initializes the MPay24Commerce object.
 *
 * @param $payment_method
 *   The payment method array containing the settings.
 *
 * @return \MPay24Commerce
 *   The initialized MPay24Commerce object.
 */
function commerce_mpay24_init_shop($payment_method) {
  libraries_load('mpay24');
  include_once 'commerce_mpay24.inc';

  $test = $payment_method['settings']['server'] == 'test' ? TRUE : FALSE;
  $mpay24 = new MPay24Commerce($payment_method['settings']['merchant_id'], $payment_method['settings']['soap_password'], $test);

  return $mpay24;
}

/**
 * Payment method callback: settings form.
 */
function commerce_mpay24_settings_form($settings = array()) {
  $form = array();

  $form['server'] = array(
    '#type' => 'radios',
    '#title' => t('Modus'),
    '#options' => array(
      'test' => ('Test'),
      'live' => ('Live'),
    ),
    '#default_value' => isset($settings['server']) ? $settings['server'] : 'test',
  );

  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#required' => TRUE,
    '#default_value' => isset($settings['merchant_id']) ? $settings['merchant_id'] : '',
  );

  $form['soap_password'] = array(
    '#type' => 'textfield',
    '#title' => t('SOAP Password'),
    '#required' => TRUE,
    '#default_value' => isset($settings['soap_password']) ? $settings['soap_password'] : '',
  );

  return $form;
}

/**
 * Payment method callback: adds a message to the submission form if enabled in
 * the payment method settings.
 */
function commerce_mpay24_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  if (!empty($payment_method['settings']['show_payment_instructions'])) {
    $form['commerce_mpay24_information'] = array(
      '#markup' => '<span class="commerce-paypal-wps-info">' . t('(Continue with checkout to complete payment via mPAY24.)') . '</span>',
    );
  }

  return $form;
}

/**
 * Payment method callback: redirects to mpay24.
 */
function commerce_mpay24_redirect_form($form, &$form_state, $order, $payment_method) {
  $mpay24 = commerce_mpay24_init_shop($payment_method);
  $mpay24->setCommerceOrder($order);
  $mpay24->setCommercePaymentMethod($payment_method);

  // Their is no general way to determine the billing address, so let custom
  // modules do that on their own. Setting the billing address is optional, but
  // recommended. See setBillingAddressArray() for more information.
  $billing_address_array = array();
  drupal_alter('commerce_mpay24_billing_address_array', $billing_address_array, $order);
  $mpay24->setBillingAddressArray($billing_address_array);

  $result = $mpay24->pay();

  if ($result->getGeneralResponse()->getStatus() == "OK") {
    $form['#action'] = $result->getLocation();
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Proceed to mPAY24'),
      '#weight' => 1000,
    );
  }
  else {
    drupal_set_message(t('There was a problem redirecting to mPAY24, please <a href="!url">contact</a> the website administrator.', array('!url' => url('contact'))), 'error');
  }

  return $form;
}

/**
 * Payment method callback: validate that the transaction has already been
 * completed in the confirm callback (commerce_mpay24_confirm_callback()).
 */
function commerce_mpay24_redirect_form_validate($order, $payment_method) {
  $transaction = commerce_mpay24_load_transaction($order->order_id);
  if ($transaction && $transaction->status == COMMERCE_PAYMENT_STATUS_SUCCESS) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Helper function that loads the last mPAY24 transaction for a commerce order.
 */
function commerce_mpay24_load_transaction($order_id) {
  static $transactions = array();

  if (!isset($transactions[$order_id])) {
    $transactions = commerce_payment_transaction_load_multiple(array(), array('order_id' => $order_id, 'payment_method' => 'commerce_mpay24'));
    $transactions[$order_id] = !empty($transactions) ? array_pop($transactions) : FALSE; // Take the last one.
  }
  return $transactions[$order_id];
}

/**
 * Implements hook_menu().
 */
function commerce_mpay24_menu() {
  $items['mpay24/confirm'] = array(
    'page callback' => 'commerce_mpay24_confirm_callback',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu callback that receives requests from mPAY24 and confirms the transaction.
 *
 * This callback is secured with the payment_redirect_key token and IP checks.
 */
function commerce_mpay24_confirm_callback($order_id, $payment_redirect_key) {
  watchdog('mpay24_confirm', '<pre>' . check_plain(print_r($_GET, TRUE)) . '</pre>');

  $order = commerce_order_load($order_id);
  if (!$order || !isset($_GET['TID']) || $_GET['TID'] != $order_id || !isset($order->data['payment_redirect_key']) || $order->data['payment_redirect_key'] != $payment_redirect_key) {
    return MENU_ACCESS_DENIED;
  }

  $transaction = commerce_mpay24_load_transaction($order_id);
  if (empty($transaction)) {
    return MENU_ACCESS_DENIED;
  }

  $payment_method = commerce_payment_method_instance_load($transaction->instance_id);
  if (empty($payment_method)) {
    return MENU_ACCESS_DENIED;
  }

  // Verify that the requests come from the mPAY24 servers.
  if ($payment_method['settings']['server'] == 'test') {
    if (ip_address() != COMMERCE_MPAY24_TEST_IP) {
      return MENU_ACCESS_DENIED;
    }
  }
  elseif (ip_address() != COMMERCE_MPAY24_LIVE_IP) {
    return MENU_ACCESS_DENIED;
  }

  foreach($_GET as $key => $value) {
    if ($key !== 'TID') {
      $args[$key] = $value;
    }
  }

  $mpay24 = commerce_mpay24_init_shop($payment_method);
  $mpay24->setCommerceTransaction($transaction);

  $args['token'] = $order_id; // As validation token we already used $payment_redirect_key.
  $mpay24->confirm($_GET['TID'], $args); // Cross checks received data with requests to mPAY24.
}


