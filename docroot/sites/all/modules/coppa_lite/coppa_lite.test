<?php
  
/**
 * @file
 * Tests for the COPPA Lite module
 */

class CoppaFieldCreationTest extends DrupalWebTestCase {
  
  public function setUp() {
    parent::setUp('date');
  }

  public function getInfo() {
     return array(
       'name' => 'COPPA field creation tests',
       'description' => 'Test if the COPPA module properly handles field creation during install',
       'group' => 'COPPA Lite',
     );
  }
  
  public function testModuleEnableCreateField() {
    // Create and login user.
    $account = $this->drupalCreateUser(array('administer content types', 'administer users'));
    $this->drupalLogin($account);
    
    // Enable the COPPA lite module
    module_enable(array('coppa_lite'), TRUE);
    
    // Manually enable the COPPA Lite Module
    $this->assertTrue(module_exists('coppa_lite'));
    
    // Check if our field is added to the user fields
    $this->drupalGet('admin/config/people/accounts/fields');
    $this->assertText('field_coppa_lite_dob');
  }
 
  public function testModuleEnableNoCreateField() {
    // Create and login user.
    $account = $this->drupalCreateUser(array('administer content types', 'administer users'));
    $this->drupalLogin($account);
    
    // Programatically create a field
    $field = array(
      'field_name' => 'field_coppa_lite_test', 
      'type' => 'datetime', 
      'settings' => array(
        'todate' => '',
        'repeat' => 0,
        'granularity' => drupal_map_assoc(array('year', 'month', 'day')),
        'tz_handling' => 'site',
        'timezone_db' => 'UTC',
      ),
    );
    field_create_field($field);
  
    $instance = array(
      'field_name' => 'field_coppa_lite_test', 
      'entity_type' => 'user', 
      'label' => 'Date of Birth', 
      'bundle' => 'user', 
      'required' => TRUE,
      'settings' => array(
        'user_register_form' => 1,
        'default_value' => 'blank', // No initial value
        'default_value_code' => '',
      ),
      'widget' => array(
        'type' => 'date_select',
        'settings' => array(
          'year_range' => '+0:-100',
        ),
      ), 
    );
    field_create_instance($instance);
    
    // Enable the COPPA lite module
    module_enable(array('coppa_lite'), TRUE);
    
    // Check if our field is not added to the user fields
    $this->drupalGet('admin/config/people/accounts/fields');
    $this->assertText('field_coppa_lite_test');
    $this->assertNoText('field_coppa_lite_dob');
  } 
}

class CoppaCookieTest extends DrupalWebTestCase {

  public function getInfo() {
    return array(
      'name' => 'Cookie tests',
      'description' => 
      'Tests cookie functionality when the user fails or succeeds.',
      'group' => 'COPPA Lite',
    );
  }
  
  function setUp() {
    parent::setUp('coppa_lite');
  }
  
  public function testCookieIsCreatedOnInvalidAgeRegister() {
    // get the user data for registration
    $edit = $this->registerArray(TRUE);
    $this->drupalPost('user/register', $edit, t('Create new account'));
    
    $this->assertText(t('We are unable to register you at this time'), t('User registered successfully.'));
    
    // get a valid aged person with the same email..
    $validAgeEdit = $this->registerArray();
    $validAgeEdit['mail'] = $edit['mail']; // make the address the old one
    $this->drupalPost('user/register', $validAgeEdit, t('Create new account'));

    $this->assertText(t('We are unable to register you at this time'), t('User registered successfully.'));
  }

  public function testCookieIsNotCreatedOnValidAgeRegister() {
    variable_set('user_email_verification', TRUE);
    // Allow registration by site visitors without administrator approval.
    variable_set('user_register', USER_REGISTER_VISITORS);
    
    // get the user data for registration
    $edit = $this->registerArray();
    $this->drupalPost('user/register', $edit, t('Create new account'));
    $this->assertText(t('A welcome message with further instructions has been sent to your e-mail address.'), t('User registered successfully.'));
  }

  // a function that will return a registered user array with DOB populated.
  private function registerArray($underaged = FALSE) {
    $randomName = $this->randomName();
    $dobFieldName = variable_get('coppa_lite_field');
    $underageYear = intval(date("Y")) - 10;
    
    return array(
    	'name' => $randomName,
      'mail' => $randomName . '@example.com',
      $dobFieldName . '[und][0][value][year]' => $underaged ? $underageYear : "1980",
      $dobFieldName . '[und][0][value][month]' => '2',
      $dobFieldName . '[und][0][value][day]' => '3',
    );
  }
}