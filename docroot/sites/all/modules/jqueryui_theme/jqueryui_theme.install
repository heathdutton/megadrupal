<?php
// $Id$

/**
 * @file
 * Install, update and uninstall functions for the jQuery UI theme module.
 */

/**
 * Implements hook_schema().
 */
function jqueryui_theme_schema() {
    
  $schema['jqueryui_theme'] = array(
    'description' => 'Store fid, human-name files and machine-name files',
    
    'fields' => array(
      'machine_name' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Primary Key: Unique file ID.',
      ),
      'human_name' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Human name file',
      ),
      'version' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
        'description' => 'jQuery UI theme version',
      ),
      'params' => array(
        'type' => 'varchar',
        'length' => 2048,
        'not null' => TRUE,
        'default' => '',
        'description' => 'jQuery UI theme parameters',
      ),
    ),
    
    'primary key' => array('machine_name'),
    'indexes' => array(
        'jqueryui_theme_name' => array('human_name'),
    ),
    'foreign keys' => array(
      'jqueryui_theme_user_constraint' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );
  
  $schema['jqueryui_theme_assoc'] = array(
    'description' => 'Store jqueryui theme used by drupal theme',
    
    'fields' => array(
      'drupal_theme' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'machine_name' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('drupal_theme'),
    'foreign keys' => array(
      'machine_name_constraint' => array(
        'table' => 'jqueryui_theme',
        'columns' => array('machine_name' => 'machine_name'),
      ),
    ),
  );
  return $schema;
}

/**
 * Implements hook_install().
 */
function jqueryui_theme_install() {
  global $theme;
  $drupal_themes = array();
  foreach (list_themes() as $ele) {
    if (!isset($ele->info['hidden']) && $ele->status && $ele->name != $theme) {
      $drupal_themes[] = $ele->name;
    }
  }
  $drupal_themes[] = $theme;
  
  $temp = 'temporary://jqueryui_theme';
  if (!file_prepare_directory($temp, FILE_CREATE_DIRECTORY)) {
    drupal_set_message(st('Unable to create a temporary directory "jqueryui_theme"'), 'error');
  }
  
  $public = 'public://jqueryui_theme/';
  //
  $path = drupal_get_path('module', 'jqueryui_theme') . '/default_themes';
  if ($files = file_scan_directory($path, '/^[-A-Za-z0-9_.]*\.(css|png|txt)$/')) {
    if ($themes = _jqueryui_theme_detect_themes(array_keys($files), $path)) {
      $key = 0;
      foreach ($themes as $jqueryui) {
        //Be aware, no check unique name
        $files_directory = $public . $jqueryui['name'];
        $images_directory = $files_directory . '/images';

        if (FALSE === (file_prepare_directory($images_directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS))) {
          drupal_set_message(st('Unable to create a public directory for default theme "@theme"', array('@theme' => $jqueryui)), 'error');
        }
        else {
          $version  = _jqueryui_theme_get_version(DRUPAL_ROOT, $jqueryui['files']);
          $params   = _jqueryui_theme_get_params(DRUPAL_ROOT, $jqueryui['files']);

          foreach ($jqueryui['files'] as $filepath) {
            if (substr(basename($filepath), -3, 3) == 'css') {
              file_unmanaged_copy($filepath, $files_directory, FILE_EXISTS_REPLACE);
            }
            else {
              file_unmanaged_copy($filepath, $images_directory, FILE_EXISTS_REPLACE);
            }
          }

          db_insert('jqueryui_theme')
            ->fields(array(
              'human_name' => $jqueryui['name'],
              'machine_name' => $jqueryui['name'],
              'version' => $version,
              'params' => $params,
            ))
            ->execute();

          if (isset($drupal_themes[$key])) {
            db_insert('jqueryui_theme_assoc')
              ->fields(array(
                'machine_name' => $jqueryui['name'],
                'drupal_theme' => $drupal_themes[$key],
              ))
              ->execute();
            $key++;
          }
        }
      }
    }
  }
  variable_set('jqueryui_theme_switch_method', 'session');
}

/**
 * Implements hook_uninstall().
 */
function jqueryui_theme_uninstall() {
  file_unmanaged_delete_recursive('temporary://jqueryui_theme');
  file_unmanaged_delete_recursive('public://jqueryui_theme/');

  variable_del('jqueryui_theme_switch_method');
}

/**
 * Set default method to use with the user switch theme block
 * and alter table 'jqueryui_theme' to added version  and params fields.
 */
function jqueryui_theme_update_7000() {
  variable_set('jqueryui_theme_switch_method', 'session');
  
  $fields = array(
    'version' => array(
      'type' => 'varchar',
      'length' => 12,
      'not null' => TRUE,
      'default' => '',
      'description' => 'jQuery UI theme version',
    ),
    'params' => array(
      'type' => 'varchar',
      'length' => 2048,
      'not null' => TRUE,
      'default' => '',
      'description' => 'jQuery UI theme parameters',
    ), 
  );
  
  foreach ($fields as $name => $spec) {
    if (db_table_exists('jqueryui_theme') && !db_field_exists('jqueryui_theme', $name)) {
      db_add_field('jqueryui_theme', $name, $spec);
    }
  }
}