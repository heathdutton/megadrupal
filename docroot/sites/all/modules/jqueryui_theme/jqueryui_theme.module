<?php
// $Id$

/**
 * Implements hook_help()
 */
function jqueryui_theme_help($path, $arg) {
  switch ($path) {
    case 'admin/help#jqueryui_theme' :
      return '<p>' . t('This module provide a user interface to import jQuery UI themes and associated them to Drupal themes. ' .
                       'CSS files and PNG from the jQuery UI theme are extracted and store in default public directory. If a drupal ' .
                       'theme have been associated with a jQuery UI theme, when the page is loaded, CSS files are loaded in addition. ' .
                       'In that way, you just have to add your javascript files manipulating DOM element and add library needed. ' .
                       'See <a href="http://jqueryui.com/themeroller/">jqueryui.com</a>') . '</p>';
             '<p>' . t('This module also provide a block to let\'s the end-user choose which jQuery UI theme he want to use. ' .
                       'Please note that allow anonymous users to switch between different jQuery UI theme will decrease performance due to sessions/cookies usage. ' .
                       '(Unable to serve up cached pages from a reverse proxy server, like Varnish). ') . '</p>';
    case 'admin/appearance/jqueryui-theme' :
      return '<p>' . t('This page provide a user interface to interact with jQuery UI Theme imported. ' .
                       'Note that there is no preview for drupal theme that have not been actived. ' .
                       'A drupal theme can be attach with only one jQuery UI Theme.') . '</p>';
  }
}

/**
 * Implements hook_menu()
 */
function jqueryui_theme_menu() {
  $items = array();
  $items['admin/appearance/jqueryui-theme'] = array(
    'title' => 'jQuery UI theme settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jqueryui_theme_settings_form'),
    'access arguments' => array('administer themes'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'jqueryui_theme.admin.inc',
  );
  
  $items['admin/appearance/jqueryui-theme/global'] = array(
    'title' => 'Global settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  
  $theme_used = _jqueryui_theme_drupal_themes_used();
  if (!empty($theme_used)) {
    foreach ($theme_used as $theme) {
      if ($theme['status']) {
        $items['admin/appearance/jqueryui-theme/example/' . $theme['name']] = array(
          'title' => "@theme's preview",
          'title arguments' => array('@theme' => $theme['name']),
          'page callback' => 'jqueryui_theme_example',
          'page arguments' => array(4, 5),
          'access arguments' => array('administer themes'),
          'type' => MENU_LOCAL_TASK,
          'file' => 'jqueryui_theme.admin.inc',
          'theme callback' => '_jqueryui_theme_menu_get_theme',
          'theme arguments' => array($theme['name']),
        );
      }
    }
  }
  $items['admin/appearance/jqueryui-theme/import'] = array(
    'title' => 'Import jQuery UI theme',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jqueryui_theme_import_form'),
    'access arguments' => array('administer themes'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'jqueryui_theme.admin.inc',
    'weight' => -1,
  );
  return $items;
}

/**
 * Implements hook_hook_info()
 */
function jqueryui_theme_hook_info() {
  $hooks['form_system_theme_settings_alter'] = array(
    'group' => 'admin',
  );
  return $hooks;
}

/**
 * Callback function theme for hook_menu().
 * 
 * @see jqueryui_theme_menu
 */
function _jqueryui_theme_menu_get_theme($theme) {
  return $theme;
}

/**
 * Implements hook_theme()
 */
function jqueryui_theme_theme($existing, $type, $theme, $path) {
  return array(
    'jqueryui_theme_settings' => array(
      'render element' => 'element',
    ),
    'jqueryui_theme_import_confirm' => array(
      'render element' => 'element',
    ),
    'jqueryui_theme_example' => array(
      'template' => 'jqueryui-theme-example',
    ),
  );
}

/**
 * Implements hook_block_info()
 */
function jqueryui_theme_block_info() {
  $blocks['jqueryui_theme_switch'] = array(
    'info' => t('Switch jQuery UI themes'),
    'cache' => DRUPAL_NO_CACHE,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => 'admin/appearance/jqueryui-theme/example/*',
  );
  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function jqueryui_theme_block_view($delta = '') {
  $blocks = array();
  switch ($delta) {
    case 'jqueryui_theme_switch' :
      $block['subject'] = t('Switch jQuery UI themes');
      $block['content'] = drupal_get_form('jqueryui_theme_switch_form');
      break;
  }
  return $block;
}

/**
 * Implements hook_block_configure()
 */
function jqueryui_theme_block_configure($delta = '') {
  $form = array();
  if ($delta == 'jqueryui_theme_switch') {
    $form['jqueryui_theme_switch_method'] = array(
      '#type' => 'radios',
      '#title' => t('Method to keep track on user\'s preference'),
      '#description' => t('Note that lifetime session is shorter than cookie. ' .
                          'If this block is display to anonymous user, it \'ll unable to serve up cached pages from a reverse proxy server.'),
      '#default_value' => variable_get('jqueryui_theme_switch_method', 'session'),
      '#options' => array('session' => t('Use session'), 'cookie' => t('Use cookie')),
      '#element_validate' => array('jqueryui_theme_block_switch_validate'),
    );
  }
  return $form;
}

/**
 * Form validation handler for jqueryui_block_configure().
 *
 * @see jqueryui_theme_block_configure()
 * @see jqueryui_theme_block_save()
 */
function jqueryui_theme_block_switch_validate($element, &$form_state) {
  if ($element['#value'] != 'session' && $element['#value'] != 'cookie') {
    form_error($element, t('Invalid method for switching jQuery UI themes.'));
  }
}

/**
 * Implements hook_block_save()
 */
function jqueryui_theme_block_save($delta = '', $edit = array()) {
  if ($delta == 'jqueryui_theme_switch') {
    variable_set('jqueryui_theme_switch_method', $edit['jqueryui_theme_switch_method']);
  }
}


/**
 * Implements hook_preprocess_page()
 */
function jqueryui_theme_preprocess_page(&$variables) {
  global $theme;
  
  foreach ($variables['page'] as $key => $regions) {
    if ($key{0} != '#') {
      if (array_key_exists('jqueryui_theme_jqueryui_theme_switch', $regions)) {
        if ($user_theme = _jqueryui_theme_get_user_theme()) {
          $files = _jqueryui_theme_get_css_files($user_theme);
        }
        break;
      }
    }
  }
  
  if (!isset($files) || empty($files)) {
    $files = _jqueryui_theme_get_theme_files($theme);
  }

  if ($files) {
    foreach ($files as $file) {
      drupal_add_css($file->uri, array('group' => CSS_THEME));
    }
  }
}

/**
 * Returns HTML for a list of Jquery UI themes
 * associated with drupal themes.
 * 
 * @param $variables
 *   An associative array containing:
 *   - form : An array of form element theme.
 * 
 * @return 
 *   A table containing informations about
 *   jQuery UI theme.
 * 
 * @ingroup themeable
 */
function theme_jqueryui_theme_settings(&$variables) {
  $form = &$variables['element']['themes'];
  
  $empty = t('No jQuery UI Themes imported');
  $box_all['box_all'] = array(
    '#type' => 'checkbox',
    '#attributes' => array('class' => array('box-all')),
  );
  $header = array(
    'select'        => drupal_render($box_all),
    'name'          => t('Name'), 
    'association'   => t('Associated with'),
    'uri'           => t('Uri Directory'),
    'version'       => t('Version'),
    'params'        => t('Parameters'),
  );
  
  $rows = array();
  if ($form) {
    foreach (element_children($form) as $key) {
      $row = array();
      $row[] = drupal_render($form[$key]['checkbox']);
      $row[] = drupal_render($form[$key]['name']);
      $row[] = drupal_render($form[$key]['assoc']);
      $row[] = drupal_render($form[$key]['uri']);
      $row[] = drupal_render($form[$key]['version']);
      $row[] = drupal_render($form[$key]['params']);
      $rows[] = $row;
    }
  }
  return theme('table', array('header' => $header, 'rows' => $rows, 'empty' => $empty)) . drupal_render_children($variables['element']);
}

/**
 * Returns HTML for a list of Jquery UI themes
 * detected in archive uploaded.
 * 
 * @param $variables
 *   An associative array containing:
 *   - form : An array of form element theme.
 * 
 * @return 
 *   A table containing informations about
 *   jQuery UI theme.
 * 
 * @ingroup themeable
 */
function theme_jqueryui_theme_import_confirm(&$variables) {
  $form = &$variables['element']['themes'];
  
  $empty = t('No jQuery UI Themes found');
  $box_all['box_all'] = array(
    '#type' => 'checkbox',
    '#attributes' => array('class' => array('box-all')),
  );
  $caption = t('Select jQuery UI themes you want to import');
  $header = array(
    'select'  => drupal_render($box_all),
    'name'    => t('Name'),
    'version' => t('Version'),
  );
  
  $rows = array();
  foreach (element_children($form) as $key) {
    $row = array();
    $row[] = drupal_render($form[$key]['checkbox']);
    $row[] = drupal_render($form[$key]['human_name']) . drupal_render($form[$key]['machine_name']);
    $row[] = drupal_render($form[$key]['display_version']);
    $rows[] = $row;
  }
  return theme('table', array('header' => $header, 'rows' => $rows, 'caption' => $caption, 'empty' => $empty)) . drupal_render_children($variables['element']);
}

/**
 * Retrieves jQuery UI css files per Drupal Theme.
 * 
 * @param $drupal_theme
 *   A string containing a Drupal theme name.
 * 
 * @return 
 *   An associative array of jQuery UI theme objects files.
 *   NULL otherwise.
 */
function _jqueryui_theme_get_theme_files($drupal_theme) {
  $machine_name = db_select('jqueryui_theme_assoc', 'jta')
    ->fields('jta', array('machine_name'))
    ->condition('drupal_theme', $drupal_theme)
    ->execute()
    ->fetchField();
     
  if (!empty($machine_name)) {
    $files = _jqueryui_theme_get_css_files($machine_name);
    return !empty($files) ? $files : NULL;
  }
  return ;
}

/**
 * Returns CSS from a Jquery UI themes imported.
 * 
 * @param $machine_name
 *   A string containing a jQuery UI theme machine name.
 * 
 * @see file_scan_directory.
 */
function _jqueryui_theme_get_css_files($machine_name) {
  return file_scan_directory('public://jqueryui_theme/' . $machine_name, '/.css$/');
}

/**
 * Returns Drupal themes use by jQuery UI themes.
 * 
 * @param $drupal_theme
 *   A string containing a Drupal theme name.
 *   If omitted, all Drupal themes will be fetch.
 * @return 
 *   An associative array (keyed by Drupal theme containing
 *   name, status about Drupal theme and jQuery UI
 *   machine name associated.
 */
function _jqueryui_theme_drupal_themes_used($drupal_theme = NULL) {
  $query = db_select('jqueryui_theme_assoc', 'jta')
    ->fields('jta', array('drupal_theme', 'machine_name'))
    ->distinct();
  if ($drupal_theme) {
    $query->condition('drupal_theme', $drupal_theme);
  }
  $query = $query->execute()
    ->fetchAllAssoc('drupal_theme');
  
  $themes = array();
  $drupal_themes = list_themes();
  foreach ($query as $name => $theme) {
    if (array_key_exists($theme->drupal_theme, $drupal_themes)) {
      $themes[$name]['name'] = $theme->drupal_theme;
      $themes[$name]['status'] = $drupal_themes[$theme->drupal_theme]->status;
      $themes[$name]['jqueryui_theme'] = $theme->machine_name;
      unset($drupal_themes[$theme->drupal_theme]);
    }
  }
  return $themes;
}

/**
 * Returns an array containing informations on jQuery UI themes.
 * 
 * @return
 *  An association array keyed by jQuery UI machine name
 *  containing Drupal theme name.
 */
function _jqueryui_theme_get_themes_infos() {
  static $themes = NULL;

  if (!$themes) {
    $options = array();
    $themes = db_select('jqueryui_theme', 'jt')
      ->fields('jt', array('machine_name', 'human_name', 'version', 'params'))
      ->execute()
      ->fetchAllAssoc('machine_name');

    foreach ($themes as $theme) {
       $theme->uri = 'public://jqueryui_theme/' . $theme->machine_name;

       $drupal_theme = db_select('jqueryui_theme_assoc', 'jta')
         ->fields('jta', array('drupal_theme'))
         ->condition('machine_name', $theme->machine_name)
         ->execute()
         ->fetchAllAssoc('drupal_theme');

       $theme->drupal_theme_attach = array_keys($drupal_theme);
    }
  }
  return $themes;
}

/**
 * Returns a list of Drupal themes availables.
 * 
 * @param $all
 *   Boolean to render only Drupal theme which
 *   are not used or all Drupal themes with an attribute
 *   to indicating if they are used or not
 * 
 * @return
 *   An associative array of drupal theme
 *   available keyed by name.
 * 
 */
function _jqueryui_theme_drupal_themes_availables($all = FALSE) {
  $themes = array();
  foreach (list_themes() as $theme) {
    if (!isset($theme->info['hidden'])) {
      $themes[$theme->name]['name']   = $theme->name;
      $themes[$theme->name]['status'] = $theme->status;
    } 
  }
  
  $themes_used = _jqueryui_theme_drupal_themes_used();
  if (!$all) {
    return array_diff_assoc($themes, $themes_used);
  }
  else {
    foreach ($themes as $key => $theme) {
      if (array_key_exists($theme['name'], $themes_used)) {
        $themes[$key]['attach'] = TRUE;
      }
      else {
        $themes[$key]['attach'] = FALSE;
      }
    }
    return $themes;
  }
}

/**
 * Renames human name jQuery UI theme.
 * 
 * @param $machine_name
 *   A string for jQuery UI machine name.
 * @param $new_name
 *   A string for the new human name.
 */
function _jqueryui_theme_rename($machine_name, $new_name) {
  return (bool)db_update('jqueryui_theme')
    ->fields(array(
      'human_name' => $new_name,
    ))
    ->condition('machine_name', $machine_name)
    ->execute();
}

/**
 * Deletes a jQuery UI theme.
 * 
 * @param $machine_name
 *   A string for jQuery UI machine name.
 * @param $uri
 *   Stream wrapper URI.
 * 
 * @return
 *   TRUE if success, FALSE otherwise.
 */
function _jqueryui_theme_delete($machine_name, $uri) {
  db_delete('jqueryui_theme_assoc')
    ->condition('machine_name', $machine_name)
    ->execute();
  
  $res1 = (bool)db_delete('jqueryui_theme')
    ->condition('machine_name', $machine_name)
    ->execute();
  
  $res2 = file_unmanaged_delete_recursive($uri);
  return $res1 && $res2;
}

/**
 * Detachs a jQuery UI theme to a Drupal theme.
 * 
 * @param $machine_name
 *   A string for jQuery UI machine name.
 * @param $drupal_theme
 *   A string containing the Drupal theme name.
 */
function _jqueryui_theme_dissoc($machine_name, $drupal_theme) {
  return db_delete('jqueryui_theme_assoc')
    ->condition('drupal_theme', $drupal_theme)
    ->condition('machine_name', $machine_name)
    ->execute();
}

/**
 * Attach a jQuery Ui theme to a Drupal theme.
 */
function _jqueryui_theme_assoc($machine_name, $drupal_theme) {
  return db_insert('jqueryui_theme_assoc')
    ->fields(array(
      'machine_name' => $machine_name,
      'drupal_theme' => $drupal_theme,
    ))
    ->execute();
}

/**
 * Inserts jQuery UI theme in database
 * 
 * @param $machine_name
 *   A string containing jQuery UI machine name.
 * @param $human_name
 *   A string containing jQuery UI human name.
 * @param $version
 *   A string containing the jQuery UI theme's version.
 * @param $params
 *   An url containing jQuery UI theme parameters.
 */
function _jqueryui_theme_insert_theme($machine_name, $human_name, $version, $params) {
  db_insert('jqueryui_theme')
    ->fields(array(
      'machine_name' => $machine_name,
      'human_name'   => $human_name,
      'version'      => $version,
      'params'       => $params,
    ))
    ->execute();
}

/**
 * Attempts to get a file object uploaded from url.
 * 
 * @param $url
 *   The URL of the file to grab.
 * @param $destination
 *   Stream wrapper URI.
 * 
 * @return
 *   On success the location the file was saved to. 
 *   
 * @see system_retrieve_file()
 */
function _jqueryui_theme_get_file_url($url, $destination) {
  $parsed_url = parse_url($url);
  $remote_schemes = array('http', 'https', 'ftp', 'ftps', 'smb', 'nfs');
  if (!in_array($parsed_url['scheme'], $remote_schemes)) {
    // local file
    $local_cache = drupal_realpath($url);
  }
  else {
    $local_cache = system_retrieve_file($url, $destination, FALSE, FILE_EXISTS_REPLACE);
  }
  return $local_cache;   
}

/**
 * Determines if files extracted temporary 
 * containing a jQuery UI theme as expected and
 * provide informations on it.
 * 
 * @param $files
 *   An array containing filepaths of a jQuery UI theme
 *   previously extracted in temporary directory.
 * @param $directory
 *   A string containing the path to the 
 *   temporary archive extracted.
 * 
 * @return
 *   On success, an array containing infos on 
 *   the jQuery UI files extracted.
 *   NULL otherwise.
 */
function _jqueryui_theme_detect_themes($files, $directory) {
  $tracks = preg_grep('#.*\.all\.css$#', $files);
  if (!empty($tracks)) {
    $dir = array();
    foreach ($tracks as $key => $track) {
      $search = explode('/', $track);
      array_pop($search);
      $dir[$key]['name'] = $search[sizeof($search)-1];
      $dir[$key]['path'] = implode('/', $search);
    }
    
    $themes = array();
    foreach ($dir as $key => $element) {
      $themes[$key]['name']      = $element['name'];
      $themes[$key]['directory'] = $directory;
      $themes[$key]['version']   = NULL;
      foreach (preg_grep('#(' . $element['path'] . '\/?.*(\.(css|png))$)|(\/version\.txt)$#', $files) as $filepath) {
        if (basename($filepath) == 'version.txt') {
          $themes[$key]['version'] = $filepath;
        }
        else {
          $themes[$key]['files'][] = $filepath;
        }
      }
    }
    return $themes;
  }
  return;
}

/**
 * Try to get jQuery UI theme version
 * from only *.theme.css file despite
 * more possibilities.
 * 
 * @param $directory
 *   A string indicating main directory to a jQuery UI theme.
 * @param $files
 *   An array containing filepath.
 * @param $filepath_version
 *   A path to a version.txt file.
 * 
 * @return
 *   A string containing version of the jQuery UI theme.
 *   An empty string otherwise.
 */
function _jqueryui_theme_get_version($directory, $files, $filepath_version = NULL) {
  $version = FALSE;
  
  if ($filepath_version) {
    $version = file_get_contents($directory . '/' . $filepath_version, FALSE, NULL, NULL, 10);
  }
  elseif ($searches = preg_grep('#\.theme\.css$#', $files)) {
    $header = _jqueryui_theme_get_comment_header_files($directory . '/' . reset($searches));
    foreach ($header as $line) {
      if (strstr($line, '* jQuery UI CSS Framework ')) {
        $version = str_replace('* jQuery UI CSS Framework ', '', $line);
        break;
      }
    }
  }
  
  if ($version === FALSE || empty($version) || !preg_match('/^[0-9\.]*$/', $version)) {
    return '';
  }
  return trim($version);
}

/**
 * Try to get paramaters to a jQuery UI theme
 * from *.theme.css file.
 * 
 * @param $directory
 *   A string indicating main directory to a jQuery UI theme.
 * 
 * @param $filepath
 *   An array containing filepath to a jQuery UI theme.
 * 
 * @return
 *   An url containing jQuery UI theme parameters.
 *   An empty string otherwise.
 */
function _jqueryui_theme_get_params($directory, $files) {
  $params = '';
  if ($searches = preg_grep('#\.theme\.css$#', $files)) {
    $header = _jqueryui_theme_get_comment_header_files($directory . '/' . reset($searches));
    foreach ($header as $line) {
      if (strstr($line, 'To view and modify this theme, visit ')) {
        $tmp = explode('visit ', $line);
        $url = trim($tmp[1]);
        if (valid_url($url, TRUE)) {
          $parsed_url = parse_url($url);
          if (isset($parsed_url['query']) && !empty($parsed_url['query'])) {
            $params = $url;
          }
        }
        break;
      }
    }
  }
  return $params;
}

/**
 * Returns an array containing strings of a comment
 * header file.
 * 
 * @param $filepath
 *   A filepath or URI to read and return comment header.
 * 
 * @return
 *   An array containing each lines of the comment header.
 */
function _jqueryui_theme_get_comment_header_files($filepath) {
  $text = array(); $line = '';
  $fp = fopen($filepath, 'r');
  while (!feof($fp) && !strstr($line, '*/')) {
    $line = trim(fgets($fp, 4096));
    if (!empty($line) && !in_array($line, array('*', '/*', '*/'))) {
      $text[] = $line;
    }
  }
  fclose($fp);
  return $text;
}

/**
 * Moves jQuery UI themes from temporary 
 * directory to default public location.
 * 
 * @param $theme
 *   An associate array containing infos on jQuery UI theme:
 *    - Machine name
 *    - Human name
 *    - Current directory
 *    - An array of filepaths to move
 * 
 * @return
 *   TRUE on success.
 *   FALSE otherwise. All previous extracted files
 *   will be deleted.
 */
function _jqueryui_theme_move_tmp($theme) {
  $destination = 'public://jqueryui_theme/' . $theme['machine_name'] . '/images';
  if (FALSE === (file_prepare_directory($destination, FILE_CREATE_DIRECTORY))) {
    return FALSE;
  }
  else {
    foreach ($theme['files'] as $file) {
      $filepath = $theme['directory'] . '/' . $file;
      $dir = $destination;
      if (substr(strrchr(basename($file), '.'), 1) == 'css') {
        $dir = str_replace('images', '', $destination);
      }
      if (!file_unmanaged_move($filepath, $dir, FILE_EXISTS_REPLACE)) {
        file_unmanaged_delete_recursive($destination);
        return FALSE;
      }
    }
    return TRUE;
  }
}

/**
 * Checks whether a submitted 
 * machine name value already exists.
 * 
 * @param $machine_name
 *   A string for jQuery UI machine name.
 * @param $element
 *   Element form to machine name field.
 * @param $form
 *   An associative array containing the structure of the form.
 * 
 * @return
 *   TRUE if machine name is available, FALSE otherwise.
 */
function jqueryui_theme_machine_name_exist($machine_name, $element = NULL, $form = NULL) {
  //control only if box is checked
  if ($element && $form) {
    $theme = $element['#machine_name']['source'][1];
    if (!$form['values']['themes'][$theme]['checkbox']) {
      return FALSE;
    }
  }
  return (bool)db_select('jqueryui_theme', 'jt')
    ->fields('jt', array('machine_name'))
    ->condition('machine_name', $machine_name)
    ->execute()
    ->fetchField();
}

/**
 * Function callback to get form array options
 * containing jQuery UI theme machine name
 * and human name associate with a Drupal theme given.
 *
 * @param $drupal_theme
 *   A string containing a Drupal theme name.
 * @param $default_value
 *   A variable which will be the default value
 *   of the form element.
 * @return
 *   An association array containing jQuery UI human name
 *   and keyed by machine name.
 *
 * @see jqueryui_theme_form_system_theme_settings_alter()
 * @see jqueryui_theme_switch_form()
 */
function _jqueryui_theme_get_options_themes($drupal_theme, &$default_value) {
  $jqthemes = db_select('jqueryui_theme', 'jt')
    ->fields('jt', array('machine_name', 'human_name'))
    ->execute()
    ->fetchAll();

  $attach = db_select('jqueryui_theme_assoc', 'jta')
    ->fields('jta', array('machine_name'))
    ->condition('drupal_theme', $drupal_theme)
    ->execute()
    ->fetchField();

  $options['none'] = t('None');
  $default_value = 'none';
  foreach ($jqthemes as $theme) {
    $options[$theme->machine_name] = $theme->human_name;
    if ($theme->machine_name == $attach) {
      $default_value = $theme->machine_name;
    }
  }
  return $options;
}

/**
 * Retrieve user's preference jQuery UI theme
 * of the current user for the current Drupal theme.
 *
 * @return
 *   A string containing an available jQuery UI theme.
 *   NULL otherwise.
 */
function _jqueryui_theme_get_user_theme() {
  global $theme;
  static $user_theme = NULL;

  if (!$user_theme) {
    $method = variable_get('jqueryui_theme_switch_method', NULL);

    if ($method == 'session' && isset($_SESSION['jqueryui_theme_default'])) {
      $user_theme = $_SESSION['jqueryui_theme_default'];
    }
    elseif ($method == 'cookie' && isset($_COOKIE['Drupal_visitor_jqueryui_theme_default'])) {
      $user_theme = @unserialize($_COOKIE['Drupal_visitor_jqueryui_theme_default']);
    }
    else {
      watchdog('jqueryui_theme', t('No method define to keep track on user s preference.'), NULL, WATCHDOG_WARNING, l('Set method tracking user\s preference', 'admin/structure/block/manage/jqueryui_theme/jqueryui_theme_switch/configure'));
    }

    if (isset($user_theme[$theme]) && array_key_exists($user_theme[$theme], _jqueryui_theme_get_themes_infos())) {
      $user_theme = $user_theme[$theme];
    }
  }
  return $user_theme;
}

/**
 * Form constructor for end-user to switch jQuery UI themes
 *
 * @see jqueryui_theme_switch_form_validate()
 * @see jqueryui_theme_switch_form_submit()
 * @ingroup $forms
 */
function jqueryui_theme_switch_form($form, &$form_state) {
  global $theme;
  $default_value = NULL;
  $options = _jqueryui_theme_get_options_themes($theme, $default_value);
  if(isset($options['none'])) {
    $options['none'] = t('Default');
  }

  if ($user_theme = _jqueryui_theme_get_user_theme()) {
    $default_value = $user_theme;
  }

  $form['machine_name'] = array(
    '#type' => 'select',
    '#title' => t('Switch jQuery UI themes'),
    '#default_value' => $default_value,
    '#options' => $options,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Form validation handler for jqueryui_theme_switch_form().
 *
 * @see jqueryui_theme_switch_form()
 * @see jqueryui_theme_switch_form_submit()
 */
function jqueryui_theme_switch_form_validate($form, &$form_state) {
  if ($form_state['values']['machine_name'] != 'none' && !array_key_exists($form_state['values']['machine_name'], _jqueryui_theme_get_themes_infos())) {
    form_set_error('machine_name', t('jQuery UI themes given doesn\'t exist.'));
  }
}

/**
 * Form submission handler for jqueryui_theme_switch_form().
 *
 * @see jqueryui_theme_switch_form()
 * @see jqueryui_theme_switch_form_validate()
 */
function jqueryui_theme_switch_form_submit($form, &$form_state) {
  global $theme;
  $method = variable_get('jqueryui_theme_switch_method', 'session');
  if ($form_state['values']['machine_name']) {
    if ($method == 'session') {
      $data = _jqueryui_theme_user_switch_merge_data($method, array($theme => $form_state['values']['machine_name']));
      $_SESSION['jqueryui_theme_default'] = $data;
    }
    elseif ($method == 'cookie') {
      $data = serialize(_jqueryui_theme_user_switch_merge_data($method, array($theme => $form_state['values']['machine_name'])));
      user_cookie_save(array('jqueryui_theme_default' => $data));
    }
  }
}

/**
 * Checks and merges data store in session or cookie
 * with the data submitted by the switch form block.
 *
 * @param $method
 *   Method used to store data.
 *   It could be 'session' or 'cookie'
 * @param $edit
 *   The data to merge with current data.
 * @return
 *   A merged array keyed by Drupal theme
 *   and containing jQuery UI theme preference.
 *   Edit array only otherwise.
 *
 * @see jqueryui_theme_switch_form_submit()
 */
function _jqueryui_theme_user_switch_merge_data($method, $edit) {
  $data = array();
  $themes = _jqueryui_theme_get_themes_infos();
  $drupal_themes = _jqueryui_theme_drupal_themes_used();

  if ($method == 'session' && isset($_SESSION['jqueryui_theme_default'])) {
    $data = $_SESSION['jqueryui_theme_default'];
  }
  elseif ($method == 'cookie' && isset($_COOKIE['Drupal_visitor_jqueryui_theme_default'])) {
    $data = @unserialize($_COOKIE['Drupal_visitor_jqueryui_theme_default']);
  }

  $valid = TRUE;
  if (is_array($data)) {
    foreach ($data as $drupal_themename => $jtheme) {
      if (!array_key_exists($drupal_themename, $drupal_themes) || !array_key_exists($jtheme, $themes)) {
        $valid = FALSE;
        break;
      }
    }
    if ($valid) {
      return $edit + $data;
    }
  }
  return $edit;
}