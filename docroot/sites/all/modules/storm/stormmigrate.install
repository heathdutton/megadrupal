<?php
/**
 * Installation functions for the Storm Migrate module.
 */

/**
 * Implements hook_requirements().
 */
function stormmigrate_requirements($phase) {
  $error_no_pm = (drupal_get_filename('module', 'pm') === NULL);
  $error_pm_installed = (drupal_get_installed_schema_version('pm', TRUE) <> SCHEMA_UNINSTALLED);
  $error_storm_present = (drupal_get_filename('module', 'storm') <> NULL);

  $error = $error_no_pm || $error_pm_installed || $error_storm_present;

  return array(
    'pm' => array(
      'title' => 'Storm Migrate',
      'value' => $error ? ($error_pm_installed ? 'Project Management already installed. Uninstall and try again' : ($error_storm_present ? 'Storm files are stil present. Delete and try again' : 'Project Management files are not present. Download and try again.')) : 'Everything is OK',
      'description' => 'In order for the Storm Migrate module to function correctly, you must first download (but NOT enable or install) the Project Management modules from http://drupal.org/project/pm. The previous Storm modules (apart from the Storm Migrate module) must be removed from the file system.',
      'severity' => $error ? REQUIREMENT_ERROR : REQUIREMENT_OK,
    )
  );
}

/**
 * Implements hook_enable().
 */
function stormmigrate_enable() {

  // Define the variables that need to be migrated.
  $variables = array(
    // 'storm' => 'pm', // Example
    'storm_icons_path' => 'pm_icons_path',
    'storm_organization_nid' => 'pm_organization_nid',
    'storm_report_header' => 'pm_report_header',
    'storm_yearsrangebegin' => 'pm_yearsrangebegin',
    'storm_yearsrangeend' => 'pm_yearsrangeend',
  );

  // Rename each variable.
  foreach ($variables as $old => $new) {
    _stormmigrate_variable_rename($old, $new);
  }

  // Change icon location, but only if the default setting has not been changed.
  if (strstr(variable_get('pm_icons_path'), 'modules/storm/icons') <> FALSE) {
    variable_set('pm_icons_path', drupal_get_path('module', 'pm') . '/icons');
  }

  // Define the modules that need to be migrated.
  $modules = array(
    'storm' => 'pm',
    'stormexpense' => 'pmexpense',
    'storminvoice' => 'pminvoice',
    'stormnote' => 'pmnote',
    'stormorganization' => 'pmorganization',
    'stormperson' => 'pmperson',
    'stormproject' => 'pmproject',
    'stormtask' => 'pmtask',
    'stormteam' => 'pmteam',
    'stormticket' => 'pmticket',
    'stormtimetracking' => 'pmtimetracking',
  );

  // Act on each module individually.
  foreach ($modules as $old => $new) {
    // Move each node to the new content type name.
    db_update('node')
      ->fields(array('type' => $new))
      ->condition('type', $old)
      ->execute();

    // Delete existing content type records.
    // New records will be created when the new modules are enabled.
    db_delete('node_type')
      ->condition('type', $old)
      ->execute();

    // Find information on the old module from the system table.
    $system_result = db_select('system', 'sys')
      ->fields('sys')
      ->condition('name', $old)
      ->execute();

    $system_record = $system_result->fetchObject();

    if ($system_record) {
      // Copy status and schema information to new module record
      // We cannot tell exactly whether the previous modules were enabled,
      //   so the assumption is that installed modules were also still enabled.
      if ($system_record->schema_version <> -1) {
        if (db_table_exists($old)) {
          db_rename_table($old, $new);
        }

        db_update('system')
          ->fields(array(
            'status' => 1,
            'schema_version' => $system_record->schema_version,
          ))
          ->condition('name', $new)
          ->execute();
      }
    }
  }

  // Rename some tables where the name is not also the name of a module.
  if (db_table_exists('stormattribute')) {
    db_rename_table('stormattribute', 'pmattribute');
  }
  if (db_table_exists('storminvoice_items')) {
    db_rename_table('storminvoice_items', 'pminvoice_items');
  }
/*  if (db_table_exists($old)) {
    db_rename_table($old, $new);
  }*/

  // Self destruct. The site owner could now delete the Storm folder.
  module_disable(array('stormmigrate'), FALSE);

  // Clear all caches.
  // The site owner should also do this again manually via the UI.
  drupal_flush_all_caches();
}

/**
 * Helper function to rename Drupal variables.
 */
function _stormmigrate_variable_rename($old, $new) {
  $var = variable_get($old);

  if ($var !== NULL) {
    variable_set($new, $var);
    variable_del($old);
    return TRUE;
  }
  else {
    return FALSE;
  }
}
