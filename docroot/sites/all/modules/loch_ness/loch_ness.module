<?php

/*
 * Impliments hook_permission.
 */
function loch_ness_permission() {
  $permissions = array();

  $permissions['administer lock'] = array(
    'title' => t('Administer Lock Settings'),
    'description' => t('Allow a user to administer the setting for The Loch Ness entity locking module.'),
  );

  $permissions['break lock'] = array(
    'title' => t('Break Locks'),
    'description' => t('Allow a user to break the lock of another user.'),
  );

  return $permissions;
}

/*
 * Impliments hook_menu.
 */
function loch_ness_menu() {
  // Administrative settings.
  $items['admin/config/content/loch_ness'] = array(
    'title' => 'Loch Ness Settings',
    'description' => 'Loch Ness settings. Settings for Content Locking.',
    'file' => 'loch_ness.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('loch_ness_admin_settings'),
    'access arguments' => array('administer lock'),
  );

  // Lock Break Page
  $items['node/%node/loch_ness/break'] = array(
    'title' => 'Break Lock',
    'description' => 'Break the Lock',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('loch_ness_break_lock', 1),
    'access arguments' => array('break lock'),
  );

  return $items;
}

function loch_ness_form_alter(&$form, &$form_state, $form_id) {
  // If this is a node edit for and there is an nid
  if (!empty($form['#node_edit_form']) && (strpos($form_id, '_node_form') !== FALSE || $form['#node_edit_form']) && !empty($form['#node']->nid)) {
    global $user;
    $node = $form['#node'];
    $cache = cache_get(_loch_ness_cache_key($node->nid));
    if ($cache->data['uid'] != $user->uid && $cache !== FALSE && $cache->data['time'] > time()) {
      foreach ($form as $key => &$form_element) {
        if (strpos($key, '#') !== 0) {
          $form_element['#disabled'] = TRUE;
        }
      }

      $form['loch_ness_message'] = array(
        '#markup' => _loch_ness_locked_message($cache, $node->nid),
        '#weight' => 0,
      );
      $form['#attached']['css'] = array(drupal_get_path('module', 'loch_ness') . '/css/loch_ness.css');
    }
    else {
      $cache = array(
        'uid' => $user->uid,
        'time' => time() + (60 * variable_get('loch_ness_timeout')),
      );

      cache_set(_loch_ness_cache_key($node->nid), $cache);
      $form['actions']['submit']['#submit'][] = 'loch_ness_node_form_submit';
    }
  }
}

function loch_ness_node_form_submit($form, &$form_state) {
  $cache = FALSE;

  cache_set(_loch_ness_cache_key($form_state['values']['nid']), $cache);
}

function loch_ness_break_lock($form, $form_state) {
  $form['loch_ness_help_text'] = array(
    '#markup' => '<p>' . t('Break Lock on %type: %title?', array('%type' => $form_state['build_info']['args'][0]->type, '%title' => $form_state['build_info']['args'][0]->title)) . '</p>',
  );

  $form['actions']['break'] = array(
    '#type' => 'submit',
    '#value' => t('Break Lock!'),
    '#submit' => array('loch_ness_break_lock_submit'),
  );

  if (!empty($form_state['build_info']['args'][0]->nid)) {
    $form['nid'] = array('#type' => 'hidden', '#value' => $form_state['build_info']['args'][0]->nid);
  }
  else {
    $form['nid'] = array('#type' => 'hidden', '#value' => 0);
  }

  return $form;
}

function loch_ness_break_lock_submit($form, &$form_state) {
  $cache = FALSE;

  cache_set(_loch_ness_cache_key($form_state['values']['nid']), $cache);
}

/*
 * Implements hook_node_save.
 *
 * Only way to make sure a lock is broken on save.
*/
function loch_ness_node_update($node) {
  $cache = FALSE;

  cache_set(_loch_ness_cache_key($node->nid), $cache);
}

function _loch_ness_locked_message($cache, $nid) {
  if (!empty($cache->data['uid']) && !empty($cache->data['time'])) {
    $user = user_load($cache->data['uid']);
    $user_name = $user->name;
    $time = date('Y F, j at h:i:s', $cache->data['time']);
    $link = '/node/' . $nid . '/loch_ness/break?destination=node/' . $nid . '/edit';
  }

  return '<p class="loch-ness-message">' . t('This node is currently being edited by %user. This lock will Expire at %time, or you can <a href="!break_lock">break the lock</a>.', array('%user' => $user_name, '%time' => $time, '!break_lock' => $link)) . '</p>';
}

function _loch_ness_cache_key($nid) {
  return 'loch_ness|' . 'node|' . $nid;
}
