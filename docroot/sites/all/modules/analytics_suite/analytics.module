<?php
/**
 * @file
 * TODO: Add ability to disable tags and providers
 * TODO: Add columns that categorise tags per provider and give more data in general
 * TODO: Rules integration
 * TODO: Ajax based tags
 */

/**
 * Creates new object.
 *
 * Chaos tools export create callback for the analytics_provider table.
 *
 * @param $set_defaults
 *   A boolean, passed in from Chaos tools, TRUE by default.
 *
 * @return Object
 *   stdClass
 */
function analytics_provider_create($set_defaults = TRUE) {
  $provider = new stdClass();
  if ($set_defaults) {
    $provider->machine_name = NULL;
    $provider->description  = NULL;
    $provider->libraries = NULL;
    $provider->header_code = NULL;
    $provider->footer_code = NULL;
    $provider->export_type = NULL;
  }

  return $provider;
}

/**
 * Load a single analytics provider.
 *
 * @param String $machine_name
 *   The machine name of the provider to load.
 *
 * @return
 *   A provider object.
 */
function analytics_provider_load($machine_name) {
  // Use CTools export API to fetch this provider.
  ctools_include('export');
  $result = ctools_export_load_object('analytics_provider', 'names', array($machine_name));

  if (isset($result[$machine_name])) {
    return $result[$machine_name];
  }
}

/**
 * Load all analytics providers.
 *
 * @return Array
 *   An array of provider objects, keyed by the machine name of each provider.
 */
function analytics_provider_load_all() {
  // Use CTools export API to fetch this provider.
  ctools_include('export');
  $result = ctools_export_load_object('analytics_provider', 'all');

  return $result;
}

/**
 * Save a single provider to the DB.
 *
 * @param $provider
 *   The provider object.
 */
function analytics_provider_save($provider) {
  db_merge('analytics_provider')
    ->key(array('machine_name' => $provider->machine_name))
    ->fields(array(
      'description'  => $provider->description,
      'libraries' => $provider->libraries,
      'header_code' => $provider->header_code,
      'footer_code' => $provider->footer_code,
    ))
    ->execute();

  return TRUE;
} 

/**
 * Export a single analytics provider from the DB.
 */
function analytics_provider_export($object, $indent = '') {
  $output = $indent . '$provider = new stdClass()' . ";\n";
  $output .= $indent . '$provider->disabled = FALSE; /* Edit this to true to make a provider disabled initially */' . "\n";
  $output .= $indent . '$provider->api_version = 1' . ";\n";
  $output .= $indent . '$provider->machine_name = "' . $object->machine_name . "\";\n";
  $output .= $indent . '$provider->description = "' . $object->description . "\";\n";
  $output .= $indent . '$provider->libraries = "' . $object->libraries . "\";\n";
  $output .= $indent . '$provider->header_code = "' . addslashes($object->header_code) . "\";\n";
  $output .= $indent . '$provider->footer_code = "' . addslashes($object->footer_code) . "\";\n";
  return $output;
}

/**
 * Deletes a provider.
 *
 * @param $machine_name
 *   A string, the machine_name of the provider to delete.
 */
function analytics_provider_delete($machine_name) {
  db_delete('analytics_provider')
    ->condition('machine_name', $machine_name)
    ->execute();
}

/**
 * Creates new object.
 *s
 * Chaos tools export create callback for the analytics_tag table.
 *
 * @param $set_defaults
 *   A boolean, passed in from Chaos tools, TRUE by default.
 *
 * @return stdClass
 */
function analytics_tag_create($set_defaults = TRUE) {
  $tag = new stdClass();
  if ($set_defaults) {
    $tag->machine_name = NULL;
    $tag->description  = NULL;
    $tag->tag_code = NULL;
    $tag->provider = NULL;
    $tag->auto_include = NULL;
    $tag->roles = array();
    $tag->export_type = NULL;
  }

  return $tag;
}

/**
 * Load a single analytics tag
 *
 * @param String $machine_name
 *   The machine name of the tag to load.
 *
 * @return
 *   A tag object or NULL if couldn't load tag
 */
function analytics_tag_load($machine_name) {
  // Use CTools export API to fetch this tag.
  ctools_include('export');

  $result = ctools_export_load_object('analytics_tag', 'names', array($machine_name));
  if (isset($result[$machine_name])) {
    return $result[$machine_name];
  }
  else {
    watchdog('analytics', 'ctools_export_load_object failed to load tag %tag_name', array('%tag_name' => $machine_name));
    return NULL;
  }

}

/**
 * Factory for tag objects.
 *
 * Chaos tools export object factory callback for the anaytics_tag table.
 *
 * @param $schema
 *   An array, a Drupal table schema definition as returned by
 *   drupal_get_schema().
 * @param $data
 *   An object, a row from the anaytics_tag table.
 *
 * @return
 *   A stdClass object.
 */
function analytics_tag_factory($schema, $data) {
  $tag = new stdClass();
  $tag->machine_name = $data->machine_name;
  $tag->description  = $data->description;
  $tag->tag_code = $data->tag_code;
  $tag->provider = $data->provider;
  $tag->auto_include = $data->auto_include;
  $tag->roles = array_filter(explode(',', $data->roles));
  return $tag;
}

/**
 * Load all analytics tags
 *
 * @return Array
 *   An array of tag objects, keyed by the machine name of each tag.
 */
function analytics_tag_load_all() {
  // Use CTools export API to fetch this tag.
  ctools_include('export');
  $result = ctools_export_load_object('analytics_tag', 'all');

  return $result;
}

/**
 * Save a single analytics tag to the DB.
 *
 * @param $tag
 *   The tag object.
 */
function analytics_tag_save($tag) {
  db_merge('analytics_tag')
    ->key(array('machine_name' => $tag->machine_name))
    ->fields(array(
      'description'  => $tag->description,
      'tag_code'  => $tag->tag_code,
      'provider'  => $tag->provider,
      'auto_include'  => $tag->auto_include,
      'roles'  => implode(',', array_filter($tag->roles)),
    ))
    ->execute();

  return TRUE;
}

/**
 * Export a single tag from the DB.
 */
function analytics_tag_export($object, $indent = '') {
  $output = $indent . '$tag = new ' . get_class($object) . '()' . ";\n";
  $output .= $indent . '$tag->disabled = FALSE; /* Edit this to true to make a default tag disabled initially */' . "\n";
  $output .= $indent . '$tag->api_version = 1' . ";\n";
  $output .= $indent . '$tag->machine_name = "' . $object->machine_name . "\";\n";
  $output .= $indent . '$tag->description = "' . addslashes($object->description) . "\";\n";
  $output .= $indent . '$tag->tag_code = "' . addslashes($object->tag_code) . "\";\n";
  $output .= $indent . '$tag->provider = "' . $object->provider . "\";\n";
  $output .= $indent . '$tag->auto_include = "' . $object->auto_include . "\";\n";
  $output .= $indent . '$tag->roles = array(' . (!empty($object->roles) ? ('"' . implode('","', $object->roles) . '"') : '') . ");\n";
  
  return $output;
}

/**
 * Deletes a tag.
 *
 * @param $machine_name
 *   A string, the machine_name of the tag to delete.
 */
function analytics_tag_delete($machine_name) {
  db_delete('analytics_tag')
    ->condition('machine_name', $machine_name)
    ->execute();
}

/**
 * Returns a list of autoincluded tags.
 */
function analytics_get_auto_included_tags() {
  $tags = analytics_tag_load_all();
  
  // Check if tag auto_include lines match the current URL
  $auto_included = array();
  foreach($tags as $tag) {
    if (drupal_match_path(current_path(), $tag->auto_include)) {
      $auto_included[$tag->machine_name] = array(
        'tag' => $tag, 
        'name' => $tag->machine_name, 
        'variables' => array());
    }
  }
  
  return $auto_included;
}

/**
 * Set a tag for given request.
 * 
 * @param $machine_name
 * @param $variables 
 */
function analytics_set_tag($machine_name = NULL, $variables = array()) {
  global $user;
  
  $dependent_tags = array();

  // If we don't have any tags in session, please load them from the auto_include list.
  if (!isset($_SESSION['analytics_tags'])) {
    $all_tags = analytics_tag_load_all();

    // Check if tag auto_include lines match the current URL
    foreach($all_tags as $tag) {
      // Skip disabled tags
      if (isset($tag->disabled) && $tag->disabled) {
        continue;
      }

      // Check if user is permitted to use this tag.
      $allowed_roles = array_intersect($tag->roles, array_keys($user->roles));
      if (!empty($tag->roles) && empty($allowed_roles)) {
        continue;
      }
      
      // Save tags dependent on other tags.
      $matches = array();
      preg_match_all('%<<(.*?)>>%i', $tag->auto_include, $matches, PREG_SET_ORDER);
      foreach($matches as $match) {
        $dependent_tags[$match[1]][] = $tag->machine_name;
      }
      
      // Check for special cases: 404 and 403. Then check for path patterns
      if (drupal_get_http_header('status') == '403 Forbidden' && strpos($tag->auto_include, '<403>') !== FALSE
        || drupal_get_http_header('status') == '404 Not Found' && strpos($tag->auto_include, '<404>') !== FALSE 
        || drupal_match_path(current_path(), $tag->auto_include)) {
        $_SESSION['analytics_tags'][$tag->machine_name] = array();
      }
    }
    
    // Inject dependent tags
    foreach($dependent_tags as $depender => $dependees) {
      if (in_array($depender, array_keys($_SESSION['analytics_tags']))) {
        foreach($dependees as $dependee) {
          $_SESSION['analytics_tags'][$dependee] = array();
        }
      }
    }
  }

  // If machine_name is specified, this means that someone wants to force a tag. Please to the list of set_tags.
  if ($machine_name) {
    $_SESSION['analytics_tags'][$machine_name] =  $variables;
  }
  else if(isset($_SESSION['analytics_tags'])) {
    return $_SESSION['analytics_tags'];
  }
}

/**
 * Get all tags set for given request 
 */
function analytics_get_tags() {
  return analytics_set_tag();
}


/**
 * Adds a values to the specified variables or sets new on if specificed tag is not set yet.
 * @param type $machine_name
 * @param type $variables 
 */
function analytics_add_to_tag($machine_name, $variables, $separator = ',') {
  $settings = analytics_get_tags();
  
  if (isset($settings[$machine_name])) {
    foreach($variables as $key => $value) {
      if(!empty($settings[$machine_name][$key])) {
        // Make sure not to add same values multiple times.
        if(strpos($settings[$machine_name][$key], $value) === FALSE) {
          $settings[$machine_name][$key] .= $separator . $value;
        }
      }
      else {
        $settings[$machine_name][$key] = $value;
      }
    }
  }
  
  analytics_set_tag($machine_name, $settings[$machine_name]);
}

/**
 * Returns full code organised by providers.
 * 
 * @param type $clean_up
 * 
 * @return type 
 */
function analytics_get_code($clean_up = TRUE) {
  $provider_code = array();

  // Build providers first
  $providers = analytics_provider_load_all();
  foreach($providers as $provider) {
    // Skip disabled providers
    if (isset($provider->disabled) && $provider->disabled) {
      continue;
    }

    // Add scripts for this provider if they don't exist
    if(!empty($provider->libraries)) {
      $libraries = explode("\n", $provider->libraries);
      foreach($libraries as $id => $library) {
        $provider_code[$provider->machine_name]['libraries'][] = array(
          '#type' => 'html_tag',
          '#tag' => 'script',
          '#value' => '',
          '#attributes' => array(
            'type' => 'text/javascript',
            'src' => url($library),
          ),
          '#weight' => $id,
        );
      }
    }

    // Add header for this provider
    if(!empty($provider->header_code)) {
      $provider_code[$provider->machine_name]['header'] = array(
        '#type' => 'markup',
        '#markup' => $provider->header_code,
        '#weight' => 1000,
      );
    }

    // Add footer for this provider
    if(!empty($provider->footer_code)) {
      $provider_code[$provider->machine_name]['footer'] = array(
        '#type' => 'markup',
        '#markup' => $provider->footer_code,
        '#weight' => 9999,
      );
    }
  }

  // Build tags
  $tags = analytics_tag_load_all();
  if ($settings = analytics_get_tags()) {
    foreach($settings as $machine_name => $variables) {
      if ($tag = $tags[$machine_name]) {
        // Skip disabled tags
        if (isset($tag->disabled) && $tag->disabled) {
          continue;
        }

        // Skip tags associated with disabled providers
        if (isset($providers[$tag->provider]->disabled) && $providers[$tag->provider]->disabled) {
          continue;
        }

        // Add tags element if it doesn't exist.
        if(!isset($provider_code[$tag->provider]['tags'])) {
          $provider_code[$tag->provider]['tags'] = array(
            '#type' => 'html_tag',
            '#tag' => 'script',
            '#value' => "\n",
            '#attributes' => array(
              'type' => 'text/javascript',
            ),
            '#weight' => 5000,
          );
        }

        // Replace variables first. In order for this to work, we need to enrich keys with our variable delimiting characters i.e. [%var]
        $tag_code = $tag->tag_code;
        if (!empty($variables)) {
          $replacement_keys = array();
          foreach(array_keys($variables) as $raw_keys) {
            $replacement_keys[] = '[%' . $raw_keys . ']';
          }
          $tag_code = str_replace($replacement_keys, array_values($variables), $tag_code);
        }

        // Clean up variables that have not been set explicitly in the code.
        // This way we won't have rubbish in our analytics code.
        $tag_code = preg_replace('%\[\%(.*?)\]%i', '', $tag_code);

        // Finally, please replace tokens and return the code.
        $provider_code[$tag->provider]['tags']['#value'] .= token_replace($tag_code) . "\n";
      }
    }
  }

  // Clean up the session data.
  if($clean_up) {
    unset($_SESSION['analytics_tags']);
  }
  
  return $provider_code;
}

/**
 * Adds analytics to the page
 * @param array $variables 
 */
function analytics_process_html(&$variables) {
  $code = analytics_get_code();
  $variables['page_bottom'] .= render($code);
}