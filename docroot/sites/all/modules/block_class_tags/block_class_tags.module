<?php
/**
 * @file
 * Base module file for block_class_tags
 */

/**
 * @var block_class_tags_PATH_SETTINGS
 *
 * Path to the settings page
 */
define('block_class_tags_PATH_SETTINGS', 'admin/structure/block/tags');


/**
 * Implements hook_help().
 *
 * http://api.drupal.org/api/function/hook_help
 *
 * @param string $path
 *   The router menu path, as defined in hook_menu(), for the help that is
 *   being requested; e.g., 'admin/node' or 'user/edit'. If the router path
 *   includes a % wildcard, then this will appear in $path; for example, node
 *   pages would have $path equal to 'node/%' or 'node/%/view'. Your hook
 *   implementation may also be called with special descriptors after a "#" sign.
 * @param array  $arg
 *   An array that corresponds to the return value of the arg() function, for
 *   modules that want to provide help that is specific to certain values of
 *   wildcards in $path. For example, you could provide help for the path
 *   'user/1' by looking for the path 'user/%' and $arg[1] == '1'. This array
 *   should always be used rather than directly invoking arg(), because your
 *   hook implementation may be called for other purposes besides building the
 *   current page's help. Note that depending on which module is invoking
 *   hook_help, $arg may contain only empty strings. Regardless, $arg[0] to
 *   $arg[11] will always be set.
 */
function block_class_tags_help($path, $arg) {
  $output = '';
  if ($path === block_class_tags_PATH_SETTINGS) {
    $output .= '';
  }

  return $output;
}

/**
 * Implements hook_permission().
 */
function block_class_tags_permission() {
  return array(
    'administer block_class_tags' => array(
      'title'           => t('Administer Block Class Tags settings'),
      'description'     => t('Control various settings for the module.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function block_class_tags_menu() {
  $items = array();

  $items['admin/structure/block/tags'] = array(
    'title' => 'Block Class Tags',
    'description' => 'Enable plugins and default behaviors.',
    'page callback' => 'drupal_get_form',
    'page arguments'  => array('block_class_tags_admin_settings'),
    'file'  => 'block_class_tags.admin.inc',
    'access arguments' => array('administer block_class_tags'),
    'type'  => MENU_LOCAL_TASK,
    'weight'  => 50,
  );

  $items['block_class_tags/data.json'] = array(
    'title' => 'Block tags JSON',
    'description' => 'Returns JSON of predefined classes.',
    'page callback' => 'block_class_tags_classes',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function block_class_tags_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'block_admin_configure' || $form_id == 'block_add_block_form') {

    // Store default value for later.
    $form['block_class_tags'] = array(
      '#type' => 'hidden',
      '#value' => $form['settings']['css_class']['#default_value'],
    );

    $module_path = drupal_get_path('module', 'block_class_tags');
    $plugins = array();

    // Convert classes to JSON.
    $tags = explode(' ', $form['settings']['css_class']['#default_value']);
    // Clear out default values and alter description.
    $form['settings']['css_class']['#default_value'] = '';
    $form['settings']['css_class']['#description'] = t('Customize the styling of this block by adding CSS classes. Use the "Return" key to complete each tag.');

    // Load core script.
    $form['#attached']['css'][] = array('data' => $module_path . '/jquery-textext/css/textext.core.css');
    $form['#attached']['js'][] = array('data' => $module_path . '/jquery-textext/js/textext.core.js');

    // Get all variable values, load plugins as needed.
    $vars = db_select('variable', 'v')
      ->fields('v', array('name', 'value'))
      ->condition('name', 'block_class_tags%', 'LIKE')
      ->execute()->fetchAll();

    foreach ($vars as $var) {
      $value = unserialize($var->value);
      if ($value) {
        switch ($var->name) {
          case 'block_class_tags_plugin_autocomplete':
            $form['#attached']['css'][] = array('data' => $module_path . '/jquery-textext/css/textext.plugin.autocomplete.css');
            $form['#attached']['js'][] = array('data' => $module_path . '/jquery-textext/js/textext.plugin.autocomplete.js');
            $form['#attached']['css'][] = array('data' => $module_path . '/jquery-textext/css/textext.plugin.arrow.css');
            $form['#attached']['js'][] = array('data' => $module_path . '/jquery-textext/js/textext.plugin.arrow.js');
            $plugins[] = 'autocomplete';
            $plugins[] = 'arrow';
            break;

          case 'block_class_tags_plugin_clear':
            $form['#attached']['css'][] = array('data' => $module_path . '/jquery-textext/css/textext.plugin.clear.css');
            $form['#attached']['js'][] = array('data' => $module_path . '/jquery-textext/js/textext.plugin.clear.js');
            $plugins[] = 'clear';
            break;

          case 'block_class_tags_plugin_focus':
            $form['#attached']['css'][] = array('data' => $module_path . '/jquery-textext/css/textext.plugin.focus.css');
            $form['#attached']['js'][] = array('data' => $module_path . '/jquery-textext/js/textext.plugin.focus.js');
            $plugins[] = 'focus';
            break;

          case 'block_class_tags_plugin_prompt':
            $form['#attached']['css'][] = array('data' => $module_path . '/jquery-textext/css/textext.plugin.prompt.css');
            $form['#attached']['js'][] = array('data' => $module_path . '/jquery-textext/js/textext.plugin.prompt.js');
            $plugins[] = 'prompt';
            break;

          case 'block_class_tags_plugin_tags':
            $form['#attached']['css'][] = array('data' => $module_path . '/jquery-textext/css/textext.plugin.tags.css');
            $form['#attached']['js'][] = array('data' => $module_path . '/jquery-textext/js/textext.plugin.tags.js');
            $plugins[] = 'tags';
            break;
        }
      }
    }

    // Add settings for block_class_tags.js to access.
    $form['#attached']['js'][] = array(
      'data' => array(
        'block_class_tags_tags' => $tags,
        'block_class_tags_plugins' => implode(" ", $plugins),
      ),
      'type' => 'setting',
    );
    // Include block_class_tags.js
    $form['#attached']['js'][] = array('data' => $module_path . '/block_class_tags.js');

    // Add custom validation.
    $form['#validate'][] = 'block_class_tags_validate';
  }
}

/**
 * Alter class string when saving block data.
 */
function block_class_tags_validate(&$form, &$form_state) {
  // Set default back to original state for processing.
  $form['settings']['css_class']['#default_value'] = $form['block_class_tags']['#value'];
  // Clean up submitted values.
  $value = _block_class_tags_modify($form_state['input']['css_class']);
  $form_state['values']['css_class'] = $form_state['input']['css_class'] = $value;
}

/**
 * Make tags added via hooks available in autocomplete.
 */
function block_class_tags_classes() {
  $classes = array();
  
  // Grab default classes if enabled.
  if (variable_get('block_class_tags_default_tags', FALSE)) {
    $classes = block_class_tags_default_tags();
  }
  if ($defined_tags = variable_get('block_class_tags_defined_tags')) {
    $classes = array_merge($classes, explode("\n", $defined_tags));
  }

  // Grab all classes from modules implementing hook.
  $module_classes = module_invoke_all('block_class_tags_classes');

  // Merge all classes together.
  $classes = array_merge($classes, $module_classes);

  // Output as JSON after sorting.
  asort($classes);
  return drupal_json_output(array_values($classes));
}

/**
 * Default block classes for examples.
 */
function block_class_tags_default_tags() {
  $classes = array('margin-top', 'margin-bottom', 'margin-left', 'margin-right', 'remove-margin');
  return $classes;
}

/**
 * Remove or add characters formatted for jQuery-textext.
 *
 * @param string $text
 * String of classes to be modified.
 *
 * @param boolean $action
 * Option to either add or remove characters.
 */
function _block_class_tags_modify($text) {
  // Remove extra characters.
  $text = (!empty($text)) ? str_replace(',', ' ', str_replace(array('[', ']', '"'), '', $text)) : '';
  return $text;
}
