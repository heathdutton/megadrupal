<?php

// Need to import to use functions of the Context module.
module_load_include('module', 'context', 'context');

/**
 * Implements hook_permission().
 */
function context_by_node_permission() {
  return array(
    'create context_by_node' => array(
      'title' => t('create context_by_node'),
      'description' => t('Allow users to create a context per node.'),
    ),
  );
}

/**
 * Implements hook_node_insert().
 */
function context_by_node_node_insert($node){
  if (!isset($node->context_by_node_create))  {
    return;
  }
  elseif ($node->context_by_node_create == 1) {
    context_by_node_create($node);
  }
}

/**
 * Implements hook_node_update().
 */
function context_by_node_node_update($node){
  if (!isset($node->context_by_node_create))  {
    return;
  }  
  elseif ($node->context_by_node_create == 1) {
    context_by_node_create($node);
  }
  elseif ($node->context_by_node_create == 0) {
    context_by_node_delete($node);
  }  
}

/**
 * If not already created, creates a context for a given node.
 */
function context_by_node_create($node) {
  if (!context_by_node_exist($node->nid)) {
    // Create the new Context
    $context = new stdClass();
    $context->reactions = array();
    $context->condition_mode = 0;
    $context->hidden = 1;
    $context->name = 'context_by_node_' . $node->nid;
    $context->description = t('Context by Node: @title [@nid]', array('@title' => $node->title, '@nid' => $node->nid));
    $context->tag = 'Context by Node';
    $context->conditions = array(
      'path' => array(
        'values' => drupal_map_assoc(array('node/' . $node->vid)),
      ),
    );
    context_save($context);
  }
}

/**
 * Implements of hook_node_delete().
 *
 * Removes the context associated with the node being deleted.
 */
function context_by_node_delete($node) {
  if ($context = context_by_node_exist($node->nid)) {
    db_delete('context')
      ->condition('name', 'context_by_node_' . $node->nid)
      ->execute();
    context_invalidate_cache();
  }
}

/**
 * Implements hook_form_alter().
 * 
 * Add the field to create a Context for a node.
 */
function context_by_node_form_alter(&$form, &$form_state, $form_id) {

  // NODE FORM:
  // Get the enabled content types; if the content type is enabled we add the field.
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] . '_node_form' == $form_id && user_access('create context_by_node')) {

    $content_types = variable_get('context_by_node_content_types', array());

    if (isset($content_types[$form['type']['#value']]) && !empty($content_types[$form['type']['#value']])) {

      $form['context_by_node'] = array(
        '#title' => t('Context by Node'),
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#group' => 'additional_settings',
      );

      // Get the Context.
      $exist_context_by_node = (context_by_node_exist($form['nid']['#value']) ? TRUE : FALSE);

      $checkbox_title = t('Create Context for this Node');

      // Uncheck for delete the Context and a link to edit the context.
      if (!empty($form['nid']['#value']) && is_numeric($form['nid']['#value']) && $exist_context_by_node) {
        $context_id = 'context_by_node_' . $form['nid']['#value'];
        $edit_link = l(t('Edit context'), 'admin/structure/context/list/' . $context_id . '/edit', array('query' => drupal_get_destination()));

        $checkbox_title = t('Uncheck to remove the Context') . ' | ' . $edit_link;
      }

      $form['context_by_node']['context_by_node_create'] = array(
        '#title' => $checkbox_title,
        '#type' => 'checkbox',
        '#default_value' => $exist_context_by_node,
      );
    }
  }

  // CONTEXT SETTINGS FORM:
  // Choose what content types want to enable.
  if ($form_id == 'context_ui_settings') {

    $form['context_by_node'] = array(
      '#title' => t('Context by Node'),
      '#type' => 'fieldset',
    );

    $form['context_by_node']['context_by_node_hide_context_ui_admin'] = array(
      '#title' => t('Hide Contexts by Node in the Context UI Admin'),
      '#description' => t('If you have more than 200 nodes and for each one you create a context, you will end up with a huge list in the Context UI Admin.'),
      '#type' => 'checkbox',
      '#default_value' => variable_get('context_by_node_hide_context_ui_admin', 0),
    );

    $form['context_by_node']['context_by_node_content_types'] = array(
      '#title' => t('Enabled Content types'),
      '#description' => t('In the case you disable a content type it <strong>will not delete any context</strong> generated by this module.<br />Must preserve your content.'),
      '#type' => 'checkboxes',
      '#default_value' => variable_get('context_by_node_content_types', array()),
      '#options' => node_type_get_names(),
    );
  }
}

/**
 * Get the name of the existing context for the nid passed as a parameter.
 * 
 * @param integer $nid
 * @return mixed
 *   If already exist return the context with the name, if not return FALSE.
 */
function context_by_node_get_name($nid) {
  $context = FALSE;
  if ($nid > 0) {
    $context = db_select('context', 'c')
      ->fields('c', array('name'))
      ->condition('name', 'context_by_node_' . $nid, '=')
      ->execute()
      ->fetchAssoc();
  }
  return $context;
}

/**
 * Check if already exist a Context for the nid passed as a parameter.
 * 
 * @param integer $nid
 * @return boolean
 */
function context_by_node_exist($nid) {
  return (bool) context_by_node_get_name($nid);
}

/**
 * Implements hook_export_load_all().
 * 
 * Callback for the load list of the Export UI for Context.
 */
function context_by_node_export_load_all($reset) {
  $condition = array();
  if (variable_get('context_by_node_hide_context_ui_admin', 0)) {
    $condition['hidden'] = 0;
  }
  return ctools_export_load_object('context', 'conditions', $condition);
}
