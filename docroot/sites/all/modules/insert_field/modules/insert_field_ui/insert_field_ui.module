<?php

/**
 * Implements hook_form_FROM_ID_alter().
 *
 * Alters the Field UI Form for easy insert configuration.
 */
function insert_field_ui_form_field_ui_field_overview_form_alter(&$form, &$form_state, $entity_type, $bundle) {
  $entity_type = $form['#entity_type'];
  $bundle = $form['#bundle'];

  // Get the Field Instances.
  $instances = field_info_instances($entity_type, $bundle);

  $settings = insert_field_ui_widget_settings($instances);

  $form = insert_field_ui_format_fields($form, $settings);

  // Attach the custom Insert Field Javascript.
  $form['#attached']['js'][] = drupal_get_path('module', 'insert_field_ui') . '/js/insert_field_ui.field_ui.js';

  // Add a submit callback.
  $form['#submit'][] = 'insert_field_ui_field_ui_submit';

  $form['#validate'][] = 'insert_field_ui_field_ui_validate';

}

/**
 * Get Field Widget Settings.
 */
function insert_field_ui_widget_settings($instances) {
    $settings = array();

    foreach ($instances as $field => $instance) {
      $settings[$field] = $instance['widget'];
    }

    return $settings;
}

/**
 * Field UI Form Validation Callback.
 *
 * Prevents Fieldception.
 */
function insert_field_ui_field_ui_validate($form, &$form_state) {

  // Get all of the potential parents.
  $parents = insert_field_ui_get_parents_by_form($form);

  // Loop thorugh all of the fields.
  foreach ($form_state['values']['fields'] as $field_name => $field) {

    // If the field has no parent, continue.
    if (empty($field['parent'])) {
      continue;
    }

    // If the field's parent is not an Insert Field, continue.
    if (empty($parents[$field['parent']])) {
      continue;
    }

    // If this Field cannot be a parrent, continue.
    if (empty($parents[$field_name])) {
      continue;
    }

    // All that should be left is parents, who have parents.
    // Loop through all of the fields again to check for children.
    foreach ($form_state['values']['fields'] as $child_field_name => $child_field) {

      // If the Field Name and Child Field Name are the same,
      // it's the came field, continue.
      if ($child_field_name == $field_name) {
        continue;
      }

      // If the Child Field has no parent, continue.
      if (empty($child_field['parent'])) {
        continue;
      }

      // If the Child Field's parent is not an Insert Field, continue.
      if (empty($parents[$child_field['parent']])) {
        continue;
      }

      // If the Child Field's Parent is not the Loop's Parent, continue.
      if ($child_field['parent'] != $field_name) {
        continue;
      }

      // All that should be left is fields which are children of children.
      // Attempt to retreive a label for the child field.
      if (!empty($form['fields'][$child_field_name]['human_name'])) {
        $label = 'human_name';
      }
      else if (!empty($form['fields'][$child_field_name]['label']['#markup'])) {
        $label = 'label';
      }

      $child_field_label = $child_field_name;

      if (!empty($label)) {
        $child_field_label = $form['fields'][$child_field_name][$label]['#markup'];
      }

      // Set the Validation Error Message.
      $message = t('@child_field cannot be a inserted into @parent_field', array(
        '@child_field' => $child_field_label,
        '@parent_field' => $parents[$field_name],
      ));

      // Set the Form Error.
      form_set_error('fields]['.$child_field_name.'][parent', $message);

    }

  }

}

/**
 * Field UI Form Submit Callback.
 *
 * Saves the Field Parent.
 */
function insert_field_ui_field_ui_submit($form, &$form_state) {
  $form_values = $form_state['values']['fields'];
  $entity_type = $form['#entity_type'];
  $bundle = $form['#bundle'];

  // Update field parents.
  foreach ($form_values as $key => $values) {

    // If the field is an Extra Field, it cannot have a parent.
    if (in_array($key, $form['#extra'])) {
      continue;
    }

    // Add the Parent Value & Update the Field Instance.
    if (in_array($key, $form['#fields'])) {
      $instance = field_read_instance($entity_type, $key, $bundle);
      $instance['widget']['parent'] = $values['parent'];
      field_update_instance($instance);
    }

  }

}

/**
 * Include the specified library.
 *
 * Downloads the specified library and places it in the user's default file
 * file system.
 *
 * @param string $name
 *    The name of the library.
 *
 * @return string
 *    URL to the library.
 */
function insert_field_ui_require_library($name) {
  $path = '';

  $libraries = array(
    'jquery_caret' => array(
      'filename' => 'jquery.caret.js',
      'name' => 'jQuery Caret Plugin',
      'url' => 'https://raw.githubusercontent.com/acdvorak/jquery.caret/v1.5.2/src/jquery.caret.js',
      'md5' => '7eb8d3869d383042d49d8691c4c1ba83'
    ),
  );

  if (empty($libraries[$name])) {
    return $path;
  }

  if ($path = variable_get('insert_field_' . $name, '')) {
    return $path;
  }

  $library = $libraries[$name];

  $path = file_build_uri('insert_field/' . $library['filename']);

  if (file_exists($path)) {
    return file_create_url($path);
  }

  $temp_path = 'temporary://' . $library['filename'];

  if ($file = system_retrieve_file($library['url'], $temp_path, TRUE, FILE_EXISTS_REPLACE)) {
    if (md5_file(drupal_realpath($file->uri)) === $library['md5']) {
      $directory = file_build_uri('insert_field');

      file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
      file_move($file, $path, FILE_EXISTS_REPLACE);
    }
    else {
      $message = t('Downloaded @name is not valid.', array(
        '@name' => $library['name'],
      ));
      drupal_set_message($message, 'error');
    }
  }
  else {
    $message = t('Could not download @name.', array(
      '@name' => $library[$name],
    ));
    drupal_set_message($message, 'error');
  }

  return file_create_url($path);
}

/**
 * Implements hook_field_attach_form().
 * Add the pre_render callback(s).
 */
function insert_field_ui_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {

  // Add the form pre_render callback.
  array_unshift($form['#pre_render'], 'insert_field_ui_field_tabs');

  // Get the Field Instances.
  $instances = field_info_instances($entity_type, $form['#bundle']);

  // Get the Insert Field Parents.
  $parents = insert_field_ui_get_parents_by_instance($instances);

  // Loop through the Field Instances (again).
  foreach ($instances as $field => $instance) {

    // If the Field has no parent, continue.
    if (empty($instance['widget']['parent'])) {
      continue;
    }

    // Get the Parent.
    $parent = $instance['widget']['parent'];

    // If the Parent is not an Insert Field, continue.
    if (empty($parents[$parent])) {
      continue;
    }

    // Ensure that the process array is an array.
    if (!isset($form[$field]['#process'])) {
      $form[$field]['#process'] = array();
    }

    // Add the pre_render callback.
    array_unshift($form[$field]['#process'], 'insert_field_ui_field_insert');

  }

}

/**
 * Form Pre-Render Callback.
 * Creates the tabs on the Entity Edit Form.
 *
 * @param array Form array.
 *
 * @return array $form The modified form array.
 */
function insert_field_ui_field_tabs($form) {
  global $theme;

  // Get the Field Instances.
  $instances = field_info_instances($form['#entity_type'], $form['#bundle']);

  $parents = array();

  // Loop through the Field Instances.
  foreach ($instances as $field => $instance) {

    // If the Instance has no parent, continue.
    if (empty($instance['widget']['parent'])) {
      continue;
    }

    // If the parent is not a Field.
    if (empty($instances[$instance['widget']['parent']])) {
      continue;
    }

    // Add to the list of Parents.
    $parents[$instance['widget']['parent']] = $instance['widget']['parent'];

  }

  // If there are no parents, there is no need to continue.
  if (!count($parents)) {
    return $form;
  }

  // Loop through the Parents.
  foreach ($parents as $parent) {

    // Add the Tabs to the Parent.
    $form[$parent.'_insert'] = array(
      '#parents' => array(),
      '#weight' => $form[$parent]['#weight'] - 0.5,
      'insert' => array(
        '#type' => 'container',
        '#attributes' => array(
          'id' => drupal_html_id('insert-'.$parent),
          'class' => array(
            'insert-field-tabs',
          ),
        ),
        'list' => array(
          '#theme' => 'item_list',
          '#items' => array(),
          '#attributes' => array(),
          '#weight' => -1,
        ),
        'fields' => array(),
      ),
    );

    // If this form has Groups:
    if (!empty($form['#group_children'])) {

      // And the Parent of this field, is one of the groups.
      if (!empty($form['#group_children'][$parent])) {

        // Get the Group Name.
        $group_name = $form['#group_children'][$parent];

        // Get the Group Object.
        $group = $form['#groups'][$group_name];

        // Add the Insert Array Name to the Group.
        $form['#group_children'][$parent.'_insert'] = $group_name;

        // Add the Insert Array Name to the Group Children.
        $group->children[] = $parent.'_insert';

      }

    }

  }

  // Get the Insert Field Parents.
  $parents = insert_field_ui_get_parents_by_instance($instances);

  // Loop through the Field Instances (again).
  foreach ($instances as $field => $instance) {

    // If the Field has no parent, continue.
    if (empty($instance['widget']['parent'])) {
      continue;
    }

    // Get the Parent.
    $parent = $instance['widget']['parent'];

    // If the Parent is not an Insert Field, continue.
    if (empty($parents[$parent])) {
      continue;
    }

    // Create a predictable HTML ID.
    $id = drupal_html_id($field);

    // Create a link to the field.
    $link = l($instance['label'], '', array(
      'fragment' => $id,
      'external' => TRUE,
      'attributes' => array(),
    ));

    // Add the link to the Parent.
    $form[$parent.'_insert']['insert']['list']['#items'][]['data'] = $link;

    // Add the field to the list of tabs.
    $form[$parent.'_insert']['insert']['fields'][$field] = $form[$field];

    // Set the HTML ID on the field.
    $form[$parent.'_insert']['insert']['fields'][$field]['#attributes']['id'] = $id;

    // Remove the original field from the form.
    unset($form[$field]);

  }

  // Attach the jQuery UI Tabs Library.
  $form['#attached']['library'][] = array('system', 'ui.tabs');

  // Attach the jQuery Caret Library.
  $path = insert_field_ui_require_library('jquery_caret');
  $form['#attached']['js'][$path] = array(
    'external' => TRUE,
  );

  // Attach the custom Insert Field Javascript.
  $path = drupal_get_path('module', 'insert_field_ui') . '/js/insert_field_ui.js';
  $form['#attached']['js'][] = $path;

  // Attach the custom Insert Field CSS.
  if ($theme == 'seven') {
    $path = drupal_get_path('module', 'insert_field_ui') . '/css/insert_field_ui.seven.css';
    $form['#attached']['css'][] = $path;
  }
  else if ($theme == 'bartik') {
    $path = drupal_get_path('module', 'insert_field_ui') . '/css/insert_field_ui.bartik.css';
    $form['#attached']['css'][] = $path;
  }

  return $form;

}

function insert_field_ui_field_insert($element) {

  $lang = $element['#language'];

  $field_name = $element[$lang]['#field_name'];

  // Get all of the available Deltas.
  $deltas = element_children($element[$lang]);

  // If there are no deltas, the formatter is not delta specific.
  // The only option, therefore, is to insert the entire field.
  if (!count($deltas)) {

    $element['insert'] = array(
      '#type' => 'button',
      '#value' => t('Insert'),
      '#weight' => 100,
      '#attributes' => array(
        'name' => $field_name,
        'class' => array(
          'insert-button'
        ),
      ),
    );

  }
  else {

    // Loop through all of the items on a field.
    foreach ($deltas as $delta) {

      // If the delta is non-numeric, continue.
      if (!is_numeric($delta)) {
        continue;
      }

      // If the field is a Managed File field and
      // there is no default value, continue.
      if (!empty($element[$lang][$delta]['#type'])) {

        if ($element[$lang][$delta]['#type'] == 'managed_file') {

          if (empty($element[$lang][$delta]['#default_value']['fid'])) {
            continue;
          }

        }

      }

      // Add the Insert Button to each field item.
      $element[$lang][$delta]['insert'] = array(
        '#type' => 'button',
        '#value' => t('Insert'),
        '#weight' => 100,
        '#attributes' => array(
          'name' => $field_name.'['.$delta.']',
          'class' => array(
            'insert-button'
          ),
        ),
      );

    }

  }

  return $element;
}

/**
 * Implements hook_field_attach_submit().
 *
 * Modifies the Inserted Field's delta,
 * which ensures that when an item is moved or deleted
 * the proper existing item is still referenced.
 */
function insert_field_ui_field_attach_submit($entity_type, $entity, $form, &$form_state) {
  $entity_type = $form['#entity_type'];
  $bundle = $form['#bundle'];

  // Get the Field Instances.
  $instances = field_info_instances($entity_type, $bundle);

  // Get all of the possible parents.
  $parents = insert_field_ui_get_parents_by_instance($instances);

  // Loop through the Field Instances.
  foreach ($instances as $field_name => $instance) {

    // If the Field does not have a Parent, continue.
    if (empty($instance['widget']['parent'])) {
      continue;
    }

    // Set the parent.
    $parent = $instance['widget']['parent'];

    // Only continue of Parent is an Insert Field.
    if (empty($parents[$parent])) {
      continue;
    }

    // Get the Field Info by ID.
    $field = field_info_field_by_id($instance['field_id']);

    // Set the _field_is_empty() funciton.
    $function = $field['module'] . '_field_is_empty';

    // Loop through the Field Values.
    foreach ($form_state['values'][$field_name] as $lang => $items) {

      // If the Items are not an array, continue.
      if (!is_array($items)) {
        continue;
      }

      // Loop through the Field Items.
      foreach ($items as $delta => $item) {

        // If the Field is Not Empty, continue.
        if (!$function($item, $field)) {
          continue;
        }

        // Set the Regular Expression for replacing the Item.
        $regex = "/<!-- ".$field_name."\\[".$delta."\\] -->/um";

        // Loop through the Parent Items of the same language.
        foreach ($entity->{$parent}[$lang] as &$parent_item) {

          // If the Parent has no value, continue.
          if (empty($parent_item['value'])) {
            continue;
          }

          // Replace the Field(s) that have been deleted.
          $parent_item['value'] = preg_replace($regex, "", $parent_item['value']);

        }

        unset($items[$delta]);

      }

      // Sort the items according to their new positions.
      $sorted = $items;

      foreach ($sorted as $key => $value) {

        // Remove non-array items, which causes a mis-match in delta.
        if (!is_array($value)) {
          unset($sorted[$key]);
          continue;
        }

        // Remove Items that have no weight.
        if (!isset($value['_weight'])) {
          unset($sorted[$key]);
          continue;
        }

      }

      usort($sorted, '_field_sort_items_helper');


      // Loop through the now filtered field items.
      foreach ($items as $delta => $item) {

        // If there is no _weight, continue.
        if (empty($item['_weight'])) {
          continue;
        }

        // Loop through the sorted items and determine
        // if the delta has changed.
        $new_delta = NULL;
        $sorted_item = reset($sorted);
        while ($new_delta == NULL && $sorted_item !== FALSE) {

          // If the _weight matches, this is the same item.
          if ($sorted_item['_weight'] === $item['_weight']) {
            $new_delta = key($sorted);
          }

          $sorted_item = next($sorted);
        }

        // If there is no new delta found, or the delta is the
        // same, continue.
        if ($new_delta === NULL || $delta === $new_delta) {
          continue;
        }

        // Set the Regular Expression for replacing the Item.
        $regex = "/<!-- ".$field_name."\\[".$delta."\\] -->/um";
        $replacement = '<!-- '.$field_name.'[--'.$new_delta.'--] -->';

        // Loop through the Parent Items of the same language.
        foreach ($entity->{$parent}[$lang] as $delta => $parent_item) {

          // If the Parent has no value, continue.
          if (empty($parent_item['value'])) {
            continue;
          }

          // Replace the Field(s) that have changed position.
          $parent_item['value'] = preg_replace($regex, $replacement, $parent_item['value']);

        }

      }

      // Set the Regular Expression for fixing the temporary replacement pattern.
      $regex = "/<!-- ".$field_name."\\[--(\\d+)--\\] -->/um";
      $replacement = "<!-- ".$field_name."[$1] -->";

      // Loop through the Parent Items of the same language.
      foreach ($entity->{$parent}[$lang] as $delta => &$parent_item) {

        // If the Parent has no value, continue.
        if (empty($parent_item['value'])) {
          continue;
        }

        // Replace the Field(s) that have changed position.
        $parent_item['value'] = preg_replace($regex, $replacement, $parent_item['value']);

      }

    }

  }

}

/**
 * Implements hook_form_FROM_ID_alter().
 *
 * Alters the Field UI Display for easy insert configuration.
 */
function insert_field_ui_form_field_ui_display_overview_form_alter(&$form, &$form_state, $entity_type, $bundle) {
  $entity_type = $form['#entity_type'];
  $bundle = $form['#bundle'];
  $view_mode = $form['#view_mode'];

  // Get the Field Instances.
  $instances = field_info_instances($entity_type, $bundle);

  $settings = insert_field_display_settings($instances, $view_mode);

  $form = insert_field_ui_format_fields($form, $settings);

  // Attach the custom Insert Field Javascript.
  $form['#attached']['js'][] = drupal_get_path('module', 'insert_field_ui') . '/js/insert_field_ui.field_ui.js';

  // Add a submit callback.
  $form['#submit'][] = 'insert_field_ui_field_ui_display_submit';

}

/**
 * Field UI Display Form Submit Callback.
 *
 * Saves the Field Parent.
 */
function insert_field_ui_field_ui_display_submit($form, &$form_state) {
  $form_values = $form_state['values']['fields'];
  $entity_type = $form['#entity_type'];
  $view_mode = $form['#view_mode'];
  $bundle = $form['#bundle'];

  // Update field parents.
  foreach ($form_values as $key => $values) {

    // If the field is an Extra Field, it cannot have a parent.
    if (in_array($key, $form['#extra'])) {
        continue;
    }

    // Add the Parent Value & Update the Field Instance.
    if (in_array($key, $form['#fields'])) {
      $instance = field_read_instance($entity_type, $key, $bundle);
      $instance['display'][$view_mode]['parent'] = $values['parent'];
      field_update_instance($instance);
    }

  }

}

/*
 * Get the all Possible Parents from a List of Instances.
 */
function insert_field_ui_get_parents_by_instance($instances) {

  $parents = array();

  // Get the Insert Field Types.
  $types = insert_field_ui_field_types();

  foreach ($instances as $field_name => $field) {

    if ($field['widget']['module'] == 'text') {

      // Get the info for the current field.
      $info = field_info_field($field_name);

      // If Field is a Text Field, add to Parents Array.
      if (in_array($info['type'], $types)) {
        $parents[$field_name] = $field;
      }

    }

  }

  return $parents;

}

/*
 * Fields can be inserted into Long Text fields.
 */
function insert_field_ui_field_types() {

  return array(
    'text_long',
    'text_with_summary',
  );

}

/*
 * Get the all Possible Parents from a Form.
 */
function insert_field_ui_get_parents_by_form($form) {

  $parents = array();

  // Get the Insert Field Types.
  $types = insert_field_ui_field_types();

  // Loop through all of the Fields.
  foreach (element_children($form['fields']) as $field) {

    // Do not allow the Extra Fields to be inserted.
    if ($form['fields'][$field]['#row_type'] == 'extra_field') {
      continue;
    }

    // Get the info for the current field.
    $info = field_info_field($field);

    // If Field is a Text Field, add to Parents Array.
    if (in_array($info['type'], $types)) {

      if (!empty($form['fields'][$field]['human_name'])) {
        $label = 'human_name';
      }
      else if (!empty($form['fields'][$field]['label']['#markup'])) {
        $label = 'label';
      }

      $parents[$field] = $form['fields'][$field][$label]['#markup'];

    }

  }

  return $parents;

}

/*
 * Formats the Form Fields and Returns the Parents array.
 */
function insert_field_ui_format_fields($form, $settings) {

  $parents = insert_field_ui_get_parents_by_form($form);

  // Loop through all of the Fields.
  foreach ($parents as $field_name => $field) {

    // Remove the class that prevents them from having children
    // and create an array of potential parrents.
    unset($form['fields'][$field_name]['#attributes']['class'][1]);

  }

  $fields = array();
  foreach ($settings as $key => $value) {
    $fields[$key] = $key;
  }

  $form['#attached']['js'][] = array(
    'data' => array(
      'insert_field' => array(
        'fields' => $fields,
        'parents' => $parents,
      ),
    ),
    'type' => 'setting',
  );

  // Loop through all of the Fields.
  foreach (element_children($form['fields']) as $field) {

    // If this is an Extra Field, it cannot have any parents.
    if ($form['fields'][$field]['#row_type'] == 'extra_field') {
      continue;
    }

    // Add the Parent Options to the Field.
    if (!empty($settings[$field]['parent'])) {
      $parent = $settings[$field]['parent'];
      $form['fields'][$field]['parent_wrapper']['parent']['#default_value'] = $parent;
    }

    $options = array();

    // If the Field already has Parent Options, get those choices.
    if (!empty($form['fields'][$field]['parent_wrapper']['parent']['#options'])) {
      $options = $form['fields'][$field]['parent_wrapper']['parent']['#options'];
    }

    // Set the new Options
    $form['fields'][$field]['parent_wrapper']['parent']['#options'] = array_merge($options, $parents);

  }

  return $form;

}


/**
 * Implements hook_form_FROM_ID_alter().
 *
 * field_ui_field_edit_form pulls the instance from the values, rather than the database,
 * this removed the 'parent' element.
 */
function insert_field_ui_form_field_ui_field_edit_form_alter(&$form, &$form_state, $instance) {

  // Add a submit callback before all other callbacks.
  array_unshift($form['#submit'], 'insert_field_ui_field_ui_field_edit_form_submit');

}

/**
 * Submit Callback for field_ui_field_edit_form.
 *
 * Merges the default values with the ones provided.
 */
function insert_field_ui_field_ui_field_edit_form_submit(&$form, &$form_state) {

  // Get the Needed VAlues.
  $instance = $form_state['values']['instance'];
  $entity_type = $instance['entity_type'];
  $field_name = $instance['field_name'];
  $bundle = $instance['bundle'];

  // Get the Unmodified Instance.
  $instance_source = field_read_instance($entity_type, $field_name, $bundle);

  // Add the Parent to the values.
  if (!empty($instance_source['widget']['parent'])) {
    $form_state['values']['instance']['widget']['parent'] = $instance_source['widget']['parent'];
  }

}
