<?php

/*
 * Implements hook_filter_info_alter().
 *
 * filter_html prevents HTML Comments.
 * Change the callback to first escape the the text before processing.
 */
function insert_field_filter_info_alter(&$info) {
  $info['filter_html']['prepare callback'] = '_insert_field_filter_html_prepare';
  $info['filter_html']['process callback'] = '_insert_field_filter_html';
}

/*
 * Filter HTML Prepare Callback.
 */
function _insert_field_filter_html_prepare($text, $filter) {

  // Escape Insert Field HTML Comments by changing '<' and '>' to '[' and ']'.
  $text = preg_replace("/<(!-- \\w+(\\[\\d+\\])? --)>/um", "[$1]", $text);

  return $text;
}

/*
 * Filter HTML Callback.
 */
function _insert_field_filter_html($text, $filter) {

  // Process the Filter as normal while the Insert Field Comments are escaped.
  $text = _filter_html($text, $filter);

  // Revert the Escaped Text.
  $text = preg_replace("/\\[(!-- \\w+(\\[\\d+\\])? --)\\]/um", "<$1>", $text);

  return $text;
}

/*
 * Implements hook_entity_view_alter().
 *
 * Process the Entity and Insert the Fields.
 */
function insert_field_entity_view_alter(&$build, $type) {
  $entity_type = $build['#entity_type'];
  $view_mode = $build['#view_mode'];
  $bundle = $build['#bundle'];

  // Get the Field Instances.
  $instances = field_info_instances($entity_type, $bundle);

  $settings = insert_field_display_settings($instances, $view_mode);

  foreach (element_children($build) as $field) {

    if (empty($settings[$field]['parent'])) {
      continue;
    }

    $parent = $settings[$field]['parent'];

    if (empty($build[$parent])) {
      continue;
    }

    foreach (element_children($build[$field]) as $delta) {

      $regex = "/<!-- ".$field."\\[".$delta."\\] -->/um";

      $item = insert_field_single_item($build[$field], $delta);

      foreach (element_children($build[$parent]) as $parent_delta) {

        $markup = $build[$parent][$parent_delta]['#markup'];

        if (preg_match($regex, $markup)) {

          $output = drupal_render($item);

          $item['#printed'] = FALSE;

          $inserted = preg_replace($regex, $output, $markup);
          $build[$parent][$parent_delta]['#markup'] = $inserted;

        }

      }

    }

    $regex = "/<!-- ".$field." -->/um";

    foreach (element_children($build[$parent]) as $parent_delta) {

      $markup = $build[$parent][$parent_delta]['#markup'];

      if (preg_match($regex, $markup)) {

        $output = drupal_render($build[$field]);

        $build[$field]['#printed'] = FALSE;

        $inserted = preg_replace($regex, $output, $markup);

        $build[$parent][$parent_delta]['#markup'] = $inserted;

      }

    }

    $build[$field]['#access'] = FALSE;

  }

}

/*
 * Remove all items except for the one specified.
 */
function insert_field_single_item($field, $item) {

  foreach (element_children($field) as $delta) {

    if ($delta == $item) {
      continue;
    }

    unset($field[$delta]);

  }

  if ($item !== 0) {

    $field[0] = $field[$item];

    unset($field[$item]);

  }

  return $field;

}

/**
 * Get Field Widget Settings.
 */
function insert_field_display_settings($instances, $view_mode) {
    $settings = array();

    foreach ($instances as $field => $instance) {

      $mode = $view_mode;

      if (empty($instance['display'][$mode])) {
        $mode = 'default';
      }

      $settings[$field] = $instance['display'][$mode];

    }

    return $settings;
}
