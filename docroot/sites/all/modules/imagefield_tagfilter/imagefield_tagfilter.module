<?php

/*
 * 
 * Imagefile filter module for nodes which use imagefiled itams
 * 
 * (c) Ilya V. Azarov, 2011
 * 
 * */
function imagefield_tagfilter_help($path, $arg) {
}

/*
 * Implementation of hook_filter_info()
 */
function imagefield_tagfilter_filter_info() {
  $filters['image_tagfilter'] = array(
    'title' => t('Imagefield content filter by Ilya V. Azarov'), 
    'description' => t('Allows add special content from imagefiled gallery for each nodes using special tags. 
E.g. [gallery size=10] tag shows 10 images from imagefild fielda attached to the document. 
Each using of such tag makes offset by 10 images.<br /> Another example: 
[gallery offset=4 size=10] set offset counter to 4, shows 10 images from this offset and 
after that increments offset by 10.'), 
    'process callback' => '_imagefield_tagfilter_process_callback', 
    'settings callback' => 'imagefield_tagfilter_image_tagfilter_settings', 
    'default settings' => array(
      'image_tagfilter_fields' => '',
    ), 
    'tips callback' => '_imagefield_tagfilter_image_filter_tip',
  );
  return $filters;
}
function _imagefield_tagfilter_process_callback($text) {
  return $text;
}
function imagefield_tagfilter_image_tagfilter_settings($form, &$form_state, $filter, $format, $defaults) {
  $filter->settings += $defaults;
  $settings['image_tagfilter_fields'] = array(
    '#type' => 'textarea',
    '#title' => t('Imagefield field names to show images'),
    '#default_value' => $filter->settings['image_tagfilter_fields'],
    '#description' => t('Enter names of imagefiled filds you want to use with this filter.
Each name in new line. If nothing entered filter will not be used.'),
    '#element_validate' => array('imagefield_tagfilter_fields_validate')
  );
  return $settings;
}

function imagefield_tagfilter_fields_validate($form) {
  if (preg_match('#^imagefield_tagfilter_fields_([\d+]+)$#', $form['#name'] ) ) {
    $fnames = explode("\n", $form['#value'] );
    if (count($fnames) ) {
      foreach ($fnames as $key => $name) {
        $name = trim($name);
        $fnames[$key] = $name;
        if (strlen($name) == 0) {
          unset($fnames[$key] );
        }
      }
    }
    if (count($fnames) ) {
      foreach ($fnames as $key => $name) {
        if (
          preg_match('#^([a-zA-Z_])#', $name) 
          && preg_match('#^([\d+a-zA-Z_]+)$#', $name)
        ) {
        }
        else {
          form_set_error($form['#name'], t('Wrong format of field name used') );
          return;
        }
      }
    }
  }
}
function _imagefield_tagfilter_image_filter_tip($delta, $format, $long) {
  return t('You can use special tag [gallery size= ] or  [gallery offset= size= ] to show attached 
images in the document body. <br />Example:  [gallery size=5] to show 5 images from imagefield.
Parameter size - any natural number. <br />Another usage: [gallery offset=4 size=10] show 10 images 
begining from 4th attached image.');
}
function imagefield_tagfilter_node_view($node, $view_mode, $langcode) {
  //$node->content['body'][0]['#markup'] = '==========================' . $node->content['body'][0]['#markup'];
  $body = field_get_items('node', $node, 'body');
  if(!$body) {
    return;
  }
  $format_name = isset($body[0]['format'] ) ? $body[0]['format'] : '';
  if (!empty($format_name) ) {
    $fieldname = _imagefield_tagfilter_fieldnames($format_name);
    if (count($fieldname) ) {
      foreach ($fieldname as $name) {
        if (isset($node->$name) ) {
          $fieldname = $name;
          break;
        }
      }
    }
    if (is_array($fieldname) ) {
    }
    elseif (is_array($node->$fieldname) && count($node->$fieldname) ) {
      $images = field_get_items('node', $node, $fieldname);
      $node->content['body'][0]['#markup'] = _imagefield_tagfilter_process_text(
        $node->content['body'][0]['#markup'], 
        $images
      );
    }
  }
}
function imagefield_tagfilter_theme() {
  return array(
    'imagefield_tagfilter_array' => array(
      'arguments' => array('photos' => NULL, 'theme' => ''),
    ),
    'imagefield_tagfilter_image' => array(
      'arguments' => array('image' => NULL),
    ),
  );
}
function theme_imagefield_tagfilter_array($photos = NULL, $theme = '') {
  if (count($photos) ) {
    $out = '<div class="imagefield-tagfilter-array">';
    foreach ($photos as $photo) {
      $out .= theme('imagefield_tagfilter_image', $photo);
    }
    $out .= '</div>';
    return $out;
  }
  else return '';
}
function theme_imagefield_tagfilter_image($image = NULL) {
  return l(
    theme('image_style', array('style_name' => 'thumbnail', 'path' => $image['uri'] ) ),
    file_create_url($image['uri'] ),
    array(
      //'attributes' => array('class' => 'thickbox'),
      'html' => TRUE
    )
  );
}
function _imagefield_tagfilter_process_text($text, $photos) {
  // explode from text all matches like gallery
  preg_match_all('#\[gallery([\d+a-zA-Z\= \'\"]+)*\]#u', $text, $matches);
  if (isset($matches[1] ) && count($matches[1] ) ) {
    $offset = 0;
    $ph = array();
    foreach ($photos as $key => $p) {
      $ph[$key] = 1;
    }
    foreach ($matches[1] as $key => $value) {
      $value = trim(substr($value, 1) );
      $matches[1] [$key] = $value;
      $params = explode(' ', $value);
      $parr = array();
      foreach ($params as $key1 => $pv) {
        $pv = trim($pv);
        if (strlen($pv) ) {
          $pv = explode('=', $pv);
          if (count($pv) == 2) {
            $pv[0] = trim($pv[0] );
            if ($pv[0] != 'theme') {
              $pv[1] = preg_replace('#[^(\d+)]#', '', $pv[1] );
            }
            else {
              $pv[1] = preg_replace('#[^(a-zA-Z\d+)]#', '', $pv[1] );
            }
            if (strlen($pv[0] ) && strlen($pv[1] ) ) {
              $parr[$pv[0] ] = $pv[1];
            }
          }
        }
      }
      if (!isset($parr['theme'] ) ) {
        $parr['theme'] = '';
      }
      if (isset($parr['offset'] ) && isset($parr['size'] ) ) {
        $parr['offset'] = $parr['offset'] - 1;
        if (($parr['offset'] < 0 ) || ($parr['offset'] >= count($photos) ) ) {
          $parr['offset'] = 0;
        }
        if ( ($parr['size'] < 0) || ( ($parr['size'] + $parr['offset'] ) >= count($photos) ) ) {
          $parr['size'] = count($photos) - $parr['offset'];
        }
        $toshow = array();
        for ($i = $parr['offset']; $i < $parr['offset'] + $parr['size']; $i ++ ) {
          $ph[$i] = 0;
          $toshow[$i] = $photos[$i];
        }
        $themed = theme('imagefield_tagfilter_array',  $toshow, $parr['theme']);
        $pos = strpos($text, $matches[0][$key] );
        $end = $pos + strlen($matches[0][$key] );
        $part1 = ($pos > 0) ?  substr($text, 0, $pos) : '';
        $part2 = ($end < strlen($text) ) ? substr($text, $end) : '';
        $text = $part1 . $themed . $part2;
        $offset = $parr['offset'] +  $parr['size'];
      } 
      elseif (isset($parr['size'] ) ) {
        if ( (!isset($parr['size'] ) ) || ($parr['size'] + $offset) >= count($photos) ) {
          $parr['size'] = count($photos) - $offset;
          if ($parr['size'] < 0) {
            $parr['size'] = 0;
          }
        }
        $parr['offset'] = $offset;
        $toshow = array();
        for ($i = $parr['offset']; $i <  $parr['offset'] + $parr['size']; $i ++) {
          $ph[$i] = 0;
          $toshow[$i] = $photos[$i];
        }
        $themed = theme('imagefield_tagfilter_array',  $toshow, $parr['theme']);
        $pos = strpos($text, $matches[0][$key] );
        $end = $pos + strlen($matches[0][$key] );
        $part1 = ($pos > 0) ?  substr($text, 0, $pos) : '';
        $part2 = ($end < strlen($text) ) ? substr($text, $end) : '';
        $text = $part1 . $themed . $part2;
        $offset = $offset + $parr['size'];
      }
      else {
        // all others here so stay :)
        $toshow = array();
        for ($i = 0; $i < count($photos); $i ++) {
          if ($ph[$i] ) {
            $toshow[$i] = $photos[$i];
          }
        }
        $themed = theme('imagefield_tagfilter_array',  $toshow, $parr['theme']);
        $pos = strpos($text, $matches[0][$key] );
        $end = $pos + strlen($matches[0][$key] );
        $part1 = ($pos > 0) ?  substr($text, 0, $pos) : '';
        $part2 = ($end < strlen($text) ) ? substr($text, $end) : '';
        $text = $part1 . $themed . $part2;
        $offset = 0;
      }
    }
  }
  return $text;
}
function _imagefield_tagfilter_fieldnames($format) {
  static $fnames;
  if (isset($fnames[$format] ) ) {
    return $fnames[$format];
  }
  $formats = filter_list_format($format);
  $image_tagfilter_fields = '';
  if (
    isset($formats['image_tagfilter'] )  
    && isset($formats['image_tagfilter']->settings) 
    && isset($formats['image_tagfilter']->settings['image_tagfilter_fields'] ) 
  ) {
    $image_tagfilter_fields = isset($formats['image_tagfilter']->settings['image_tagfilter_fields'] )
      ? $formats['image_tagfilter']->settings['image_tagfilter_fields'] : '';
  }
  $fnames[$format] = explode("\n", $image_tagfilter_fields);
  if (count($fnames[$format] ) ) {
    foreach ($fnames[$format] as $key => $name) {
      $name = trim($name);
      $fnames[$format][$key] = $name;
      if (strlen($name) == 0) {
        unset($fnames[$format][$key] );
      }
    }
  }
  if (count($fnames[$format]) ) {
    foreach ($fnames[$format] as $key => $name) {
      if (preg_match('#^([a-zA-Z_])#', $name) && preg_match('#^([\d+a-zA-Z_]+)$#', $name) ) {
      }
      else {
        unset($fnames[$format][$key] );
      }
    }
  }
  return $fnames[$format];
}
