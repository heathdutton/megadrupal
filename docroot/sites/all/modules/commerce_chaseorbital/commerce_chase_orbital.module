<?php

/**
 * @file
 * Implements Chase Paymentech payment services for use in Drupal Commerce.
 */

// Define Constants.
define('COMMERCE_CHASE_ORBITAL_TEST', 'test');
define('COMMERCE_CHASE_ORBITAL_PRODUCTION', 'live');
define('COMMERCE_CHASE_ORBITAL_CREDIT_FORCE_CAPTURE', 'force_capture');

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_chase_orbital_commerce_payment_method_info() {
  $payment_methods = array();
  $payment_methods['chase_orbital'] = array(
    'base' => 'commerce_chase_orbital',
    'title' => t('Chase Paymentech Orbital - Credit Card'),
    'short_title' => t('Chase Paymentech CC'),
    'display_title' => t('Chase Payment - Credit Card'),
    'description' => t('Chase Paymentech Orbital'),
    'active' => TRUE,
    'cardonfile' => array(
      'charge callback' => 'commerce_chase_orbital_cim_cardonfile_charge',
      'update callback' => 'commerce_chase_orbital_cim_cardonfile_update',
      'delete callback' => 'commerce_chase_orbital_cim_cardonfile_delete',
    ),
  );

  return $payment_methods;
}

/**
 * Return a default settings of the Chase Paymentech Orbital service.
 */
function commerce_chase_orbital_default_settings() {
  return array(
    'merchant_number' => '',
    'username' => '',
    'password' => '',
    'terminal_id' => '',
    'bin_number' => '000002',
    'industry_type' => 'EC',
    'txn_mode' => COMMERCE_CHASE_ORBITAL_TEST,
    'txn_type' => COMMERCE_CREDIT_AUTH_CAPTURE,
    'cardonfile' => FALSE,
    'continuous' => FALSE,
    'email_customer' => FALSE,
    'log' => array('request' => '0', 'response' => '0'),
    'card_types' => array(),
  );
}

/**
 * Payment Method callback: settings form.
 */
function commerce_chase_orbital_settings_form($settings = NULL) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Merge default settings to stored settings array.
  $settings = (array) $settings + commerce_chase_orbital_default_settings();

  $form = array();
  $form['merchant_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Number'),
    '#description' => t('Your Merchant ID is different from the username which you used to login to your Chase Orbital account. Once you login, browse to your Account tab to find the Merchant ID. If you are using a new Chase Orbital account, you may still need to generate an ID.'),
    '#default_value' => $settings['merchant_number'],
    '#required' => TRUE,
  );
  $form['industry_type'] = array(
    '#type' => 'hidden',
    '#value' => $settings['industry_type'],
    '#default_value' => $settings['industry_type'],
  );
  $form['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#description' => t('Chase Orbital Gateway UserName'),
    '#default_value' => $settings['username'],
    '#required' => TRUE,
  );
  $form['password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t('Chase Orbital Gateway Password'),
    '#default_value' => $settings['password'],
    '#required' => TRUE,
  );
  $form['terminal_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Terminal ID'),
    '#description' => t('Chase Orbital Gateway TerminalID'),
    '#default_value' => $settings['terminal_id'],
    '#required' => TRUE,
  );
  $form['bin_number'] = array(
    '#type' => 'select',
    '#title' => t('Bin Number'),
    '#options' => array(
      '000001' => t('Salem'),
      '000002' => t('PNS'),
    ),
    '#default_value' => $settings['bin_number'],
  );
  $form['txn_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('Adjust to live transactions when you are ready to start processing real payments.') . '<br />' . t('Only specify a developer test account if you login to your account through https://secure.paymentech.com/manager.'),
    '#options' => array(
      COMMERCE_CHASE_ORBITAL_TEST => t('Testing'),
      COMMERCE_CHASE_ORBITAL_PRODUCTION => t('Production'),
    ),
    '#default_value' => $settings['txn_mode'],
  );
  $form['txn_type'] = array(
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('The default will be used to process transactions during checkout.'),
    '#options' => array(
      COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'),
      COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only'),
    ),
    '#default_value' => $settings['txn_type'],
  );
  $form['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types'),
    '#description' => t('If you want to limit acceptable card types, you should only select those supported by your merchant account.') . '<br />' . t('If none are checked, any credit card type will be accepted.'),
    '#options' => commerce_payment_credit_card_types(),
    '#default_value' => $settings['card_types'],
  );

  // Check If Card On File Exists.
  if (module_exists('commerce_cardonfile')) {
    $form['cardonfile'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Card on File functionality with this payment method by using Chase Paymentech Orbital.'),
      '#description' => t('This requires an Chase Paymentech account upgraded to include support for profile management.'),
      '#default_value' => $settings['cardonfile'],
    );

    $form['continuous'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use continuous authority transactions.'),
      '#description' => t('A continuous authority merchant account will be required.'),
      '#default_value' => $settings['continuous'],
    );
  }
  else {
    $form['cardonfile'] = array(
      '#type' => 'markup',
      '#markup' => t('To enable Card on File funcitionality, download and install the Card on File module.'),
    );
  }
  $form['email_customer'] = array(
    '#type' => 'checkbox',
    '#title' => t('Tell Chase Paymentech to e-mail the customer a receipt based on your account settings.'),
    '#default_value' => $settings['email_customer'],
  );

  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );

  return $form;
}

/**
 * Payment method callback: Checkout form.
 */
function commerce_chase_orbital_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Prepare the fields to include on the credit card form.
  $fields = array(
    'code' => '',
  );

  // Add the credit card types array if necessary.
  if (isset($payment_method['settings']['card_types'])) {
    $card_types = array_diff(array_values($payment_method['settings']['card_types']), array(0));

    if (!empty($card_types)) {
      $fields['type'] = $card_types;
    }
  }

  return commerce_payment_credit_card_form($fields);
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_chase_orbital_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // Validate payment method is configured or not.
  if (empty($payment_method['settings']['merchant_number']) || empty($payment_method['settings']['username']) || empty($payment_method['settings']['password']) || empty($payment_method['settings']['terminal_id'])) {
    form_set_error('', t('Payment method is not configured properly. Please contact Administrator!'));
    return FALSE;
  }
  // If the customer is specified a card on file, skip the normal validation.
  if (module_exists('commerce_cardonfile') && !empty($payment_method['settings']['cardonfile']) &&
    !empty($pane_values['cardonfile']) && $pane_values['cardonfile'] !== 'new'
  ) {
    return;
  }

  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: Checkout form submit.
 */
function commerce_chase_orbital_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // If the customer specified payment using a card on file, attempt that now
  // and simply return the result.
  if (module_exists('commerce_cardonfile') && $payment_method['settings']['cardonfile'] &&
    !empty($pane_values['cardonfile']) && $pane_values['cardonfile'] !== 'new'
  ) {
    return commerce_chase_orbital_cim_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge);
  }

  if ($charge['amount'] == 0) {
    $transaction = commerce_payment_transaction_new('chase_orbital', $order->order_id);
    $transaction->amount = $charge['amount'];
    $transaction->currency_code = $charge['currency_code'];
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $transaction->message = t('Invalid @amount transaction not attempted.', array('@amount' => commerce_currency_format($charge['amount'], $charge['currency_code'])));
    commerce_payment_transaction_save($transaction);
    drupal_set_message(t('We encountered an error processing your transaction. Please contact us to resolve the issue.'), 'error');
    return FALSE;
  }
  // Prepare a request parameter.
  $arr_request_param = _commerce_chase_orbital_prepare_request($payment_method, $pane_form, $pane_values, $order, $charge);
  $has_request_log = in_array('request', $payment_method['settings']['log']);
  $has_reponse_log = in_array('response', $payment_method['settings']['log']);
  // Process a request.
  $xml_response = _commerce_chase_orbital_process_request($arr_request_param, $payment_method['settings']['txn_mode'], $has_request_log, $has_reponse_log);
  if (is_bool($xml_response) && $xml_response == FALSE) {
    drupal_set_message(t('We encountered an error processing your transaction. Please contact us to resolve the issue.'), 'error');
    return FALSE;
  }
  $prores = _commerce_chase_orbital_process_response($xml_response, $payment_method, $pane_values, $order, $charge);
  if (is_bool($prores) && $prores == FALSE) {
    return FALSE;
  }
}

/**
 * Returns the transaction type string for Chase Paymentech.
 *
 * @param string $txn_type
 *   A Drupal Commerce transaction type constant.
 */
function _commerce_chase_orbital_txn_type($txn_type) {
  switch ($txn_type) {
    case COMMERCE_CREDIT_AUTH_ONLY:
      return 'A';

    case COMMERCE_CREDIT_AUTH_CAPTURE:
      return 'AC';

    case COMMERCE_CHASE_ORBITAL_CREDIT_FORCE_CAPTURE:
      return 'FC';

    case COMMERCE_CREDIT_CREDIT:
      return 'R';

    case COMMERCE_CREDIT_CAPTURE_ONLY:
    case COMMERCE_CREDIT_PRIOR_AUTH_CAPTURE:
    case COMMERCE_CREDIT_REFERENCE_SET:
    case COMMERCE_CREDIT_REFERENCE_TXN:
    case COMMERCE_CREDIT_REFERENCE_REMOVE:
    case COMMERCE_CREDIT_REFERENCE_CREDIT:
    case COMMERCE_CREDIT_VOID:
      return NULL;
  }
}

/**
 * Return a Orbital gateway url.
 */
function _commerce_chase_orbital_gateway_url($mode) {
  switch ($mode) {
    case COMMERCE_CHASE_ORBITAL_TEST:
      return 'https://orbitalvar1.paymentech.net';

    case COMMERCE_CHASE_ORBITAL_PRODUCTION:
      return 'https://orbital1.paymentech.net';
  }
}

/**
 * Return a orbital gateway numerical currency code and exponent value.
 *
 * @param int $bin_number
 *   Commerce Chase Orbital Payment Gateway Bin Number.
 * @param string $currency_code
 *   A Drupal Commerce Currency Variable.
 */
function _commerce_chase_orbital_get_currency_details($bin_number, $currency_code = NULL) {
  $arr_currency_details = array('numeric_currency_code' => '', 'exponent' => 2);
  // Loading a default currency.
  $currency_info = commerce_currency_load($currency_code);
  $arr_currency_details['numeric_currency_code'] = $currency_info['numeric_code'];

  // Get currency exponent value.
  $currency_array = array(
    974,
    950,
    952,
    953,
    108,
    174,
    262,
    646,
    600,
    392,
    418,
    548,
    800,
    410,
  );
  if (in_array($arr_currency_details['numeric_currency_code'], $currency_array)) {
    $arr_currency_details['exponent'] = 0;
  }
  // PNS Only support US and CAN currency.
  if ($bin_number == '000002') {
    if ($currency_info['code'] == 'CAD') {
      $arr_currency_details['numeric_currency_code'] = $currency_info['numeric_code'];
    }
    else {
      $arr_currency_details['numeric_currency_code'] = 840;
    }
  }

  return $arr_currency_details;
}

/**
 * Prepare Chase Paymentech request.
 */
function _commerce_chase_orbital_prepare_request($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $txn_type = $payment_method['settings']['txn_type'];

  // Get numerical currency code and exponent value.
  $arr_currency = _commerce_chase_orbital_get_currency_details($payment_method['settings']['bin_number'], $charge['currency_code']);
  $exp_year = $pane_values['credit_card']['exp_year'];
  $exp_year = drupal_strlen($exp_year) > 2 ? drupal_substr($exp_year, -2) : $exp_year;
  $exp_year = sprintf("%2d", $exp_year);
  // New Order request parameter.
  $request_param = array();
  $request_param['OrbitalConnectionUsername'] = $payment_method['settings']['username'];
  $request_param['OrbitalConnectionPassword'] = $payment_method['settings']['password'];
  $request_param['IndustryType'] = $payment_method['settings']['industry_type'];
  $request_param['MessageType'] = _commerce_chase_orbital_txn_type($txn_type);
  $request_param['BIN'] = $payment_method['settings']['bin_number'];
  $request_param['MerchantID'] = $payment_method['settings']['merchant_number'];
  $request_param['TerminalID'] = $payment_method['settings']['terminal_id'];
  $request_param['CardBrand'] = '';
  $request_param['AccountNum'] = $pane_values['credit_card']['number'];
  $request_param['Exp'] = sprintf("%02d%02d", $pane_values['credit_card']['exp_month'], $exp_year);
  $request_param['CurrencyCode'] = $arr_currency['numeric_currency_code'];
  $request_param['CurrencyExponent'] = $arr_currency['exponent'];
  if ($pane_values['credit_card']['type'] == 'visa' || $pane_values['credit_card']['type'] == 'discover') {
    $request_param['CardSecValInd'] = 1;
  }
  $request_param['CardSecVal'] = $pane_values['credit_card']['code'];
  // Preparing a billing address for use in the request.
  if ($order_wrapper->commerce_customer_billing->value()) {
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
    if (empty($billing_address['first_name'])) {
      $name_parts = explode(' ', $billing_address['name_line']);
      $billing_address['first_name'] = array_shift($name_parts);
      $billing_address['last_name'] = implode(' ', $name_parts);
    }
    $address_line1 = str_replace(array('%', '|', "/", "\\"), '', $billing_address['thoroughfare']);
    $address_line1 = drupal_substr($address_line1, 0, 30);
    $address_line2 = str_replace(array('%', '|', "/", "\\"), '', $billing_address['premise']);
    $address_line2 = drupal_substr($address_line2, 0, 30);
    $billing_city = str_replace(array('%', '|', "/", "\\"), '', $billing_address['locality']);
    $billing_city = drupal_substr($billing_city, 0, 20);
    $billing_state = str_replace(array('%', '|', "/", "\\"), '', $billing_address['administrative_area']);
    $billing_state = drupal_substr($billing_state, 0, 2);
    $billing_name['first_name'] = $billing_address['first_name'];
    if (!empty($billing_address['last_name'])) {
      $billing_name['last_name'] = $billing_address['last_name'];
    }
    $billing_name = drupal_substr(implode(' ', $billing_name), 0, 30);

    $request_param['AVSzip'] = drupal_substr($billing_address['postal_code'], 0, 10);
    $request_param['AVSaddress1'] = $address_line1;
    $request_param['AVSaddress2'] = $address_line2;
    $request_param['AVScity'] = $billing_city;
    $request_param['AVSstate'] = $billing_state;
    $request_param['AVSphoneNum'] = '';
    $request_param['AVSname'] = $billing_name;
  }
  // If Card on File exists and checked the option to store data.
  if (module_exists('commerce_cardonfile') && !empty($payment_method['settings']['cardonfile']) &&
    !empty($pane_values['credit_card']['cardonfile_store']) && $pane_values['credit_card']['cardonfile_store']
  ) {
    $request_param['CustomerProfileFromOrderInd'] = 'A';
    $request_param['CustomerRefNum'] = '';
    $request_param['CustomerProfileOrderOverrideInd'] = 'OI';
    $request_param['Status'] = 'A';
  }
  $request_param['OrderID'] = $order->order_id;
  $request_param['Amount'] = round($charge['amount'], 0);
  if ($payment_method['settings']['bin_number'] == '000002' && module_exists('commerce_tax')) {
    if (in_array($pane_values['credit_card']['type'], array('visa', 'mastercard'))) {
      $order_total = $order_wrapper->commerce_order_total->value();
      $order_sales_tax = commerce_price_component_total($order_total, 'tax|sales_tax');
      $request_param['TaxInd'] = 1;
      $request_param['Tax'] = $order_sales_tax['amount'];
      $request_param['PCOrderNum'] = $order->order_id;
      $request_param['PCDestZip'] = drupal_substr($billing_address['postal_code'], 0, 10);
    }
  }
  if (!empty($payment_method['settings']['email_customer'])) {
    $request_param['CustomerEmail'] = $order->mail;
  }
  return $request_param;
}

/**
 * Request data transfer to Chase Orbital Paymentech.
 */
function _commerce_chase_orbital_process_request($request_param, $mode, $has_request_log = TRUE, $has_reponse_log = TRUE, $parent_tag = 'NewOrder') {
  // Get Orbital gateway url.
  $payment_gateway_url = _commerce_chase_orbital_gateway_url($mode);
  // Generae a xml string.
  $obj_xml = new SimpleXMLElement('<?xml version="1.0" encoding="UTF-8"?><request/>');
  $obj_new_order = $obj_xml->addChild($parent_tag);
  foreach ($request_param as $tag_name => $tag_value) {
    $obj_new_order->addChild($tag_name, $tag_value);
  }
  $xml_request_string = $obj_xml->asXML();
  if ($has_request_log) {
    watchdog('commerce_chase_orbital', 'XML Request: @request', array('@request' => $xml_request_string), WATCHDOG_DEBUG);
  }
  // Define a header for orbital gateway request.
  $header = array("POST /AUTHORIZE HTTP/1.0");
  $header[] = "MIME-Version: 1.0";
  $header[] = "Content-type: application/PTI56";
  $header[] = "Content-length: " . drupal_strlen($xml_request_string);
  $header[] = "Content-transfer-encoding: text";
  $header[] = "Request-number: 1";
  $header[] = "Document-type: Request";
  $header[] = "Interface-Version: 0.3";
  // Connect to orbital gateway using drupal_http_request.
  $options = array(
    'headers' => $header,
    'method' => 'POST',
    'data' => $xml_request_string,
  );
  $response = drupal_http_request($payment_gateway_url, $options);
  if ($response->code === 0) {
    watchdog('commerce_chase_orbital', 'Connection error: @error', array('@error' => $response->error), WATCHDOG_ERROR);
    return FALSE;
  }
  if ($has_reponse_log) {
    watchdog('commerce_chase_orbital', 'XML response: @response', array('@response' => $response->data), WATCHDOG_DEBUG);
  }

  return $response->data;
}

/**
 * Handle a Chase Oribital response.
 */
function _commerce_chase_orbital_process_response($orbital_response, $payment_method, $pane_values, $order, $charge) {
  // Determine the credit card type if possible for use in later code.
  if (!empty($pane_values['credit_card']['number'])) {
    module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
    $card_type = commerce_payment_validate_credit_card_type($pane_values['credit_card']['number'], array_keys(commerce_payment_credit_card_types()));
  }
  $respayment = _commerce_chase_orbital_create_transaction($orbital_response, $payment_method, $order, $charge, 0);
  if ($respayment == TRUE) {
    $obj_xml_response = new SimpleXMLElement($orbital_response);
    // If Card on File exists and checked the option to store data.
    if (module_exists('commerce_cardonfile') && !empty($payment_method['settings']['cardonfile']) &&
      !empty($pane_values['credit_card']['cardonfile_store']) && $pane_values['credit_card']['cardonfile_store'] && $obj_xml_response->NewOrderResp->ProfileProcStatus == 0 && !empty($obj_xml_response->NewOrderResp->CustomerRefNum) && $obj_xml_response->NewOrderResp->ApprovalStatus == 1 && $obj_xml_response->NewOrderResp->RespCode == 00 && $obj_xml_response->NewOrderResp->AVSRespCode == 'H ' && $obj_xml_response->NewOrderResp->CVV2RespCode == 'M'
    ) {
      $card_data = commerce_cardonfile_new();
      $card_data->uid = $order->uid;
      $card_data->payment_method = $payment_method['method_id'];
      $card_data->instance_id = $payment_method['instance_id'];
      $card_data->remote_id = $obj_xml_response->NewOrderResp->CustomerRefNum;
      $card_data->card_type = !empty($card_type) ? $card_type : 'card';
      $card_data->card_name = $obj_xml_response->NewOrderResp->CustomerName;
      $card_data->card_number = drupal_substr($pane_values['credit_card']['number'], -4);
      $card_data->card_exp_month = $pane_values['credit_card']['exp_month'];
      $card_data->card_exp_year = $pane_values['credit_card']['exp_year'];
      $card_data->status = 1;
      // Save and log the creation of the new card on file.
      commerce_cardonfile_save($card_data);
      watchdog('commerce_chase_oribital', 'Customer Profile @profile_id created and saved to user @uid.', array('@profile_id' => (string) $obj_xml_response->NewOrderResp->CustomerRefNum, '@uid' => $order->uid));
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Create a order transaction.
 */
function _commerce_chase_orbital_create_transaction($orbital_response, $payment_method, $order, $charge, $cardonval) {
  $obj_transaction = commerce_payment_transaction_new('chase_orbital', $order->order_id);
  $obj_transaction->instance_id = $payment_method['instance_id'];
  $obj_transaction->amount = $charge['amount'];
  $obj_transaction->currency_code = $charge['currency_code'];
  $obj_transaction->payload[REQUEST_TIME] = $orbital_response;
  $obj_xml_response = new SimpleXMLElement($orbital_response);
  $transaction_status = FALSE;
  $check_cvv_resp = "M";
  if ($cardonval) {
    $check_cvv_resp = "";
  }
  if (($obj_xml_response->NewOrderResp->ProcStatus == 0) && ($obj_xml_response->NewOrderResp->ApprovalStatus == 1) && ($obj_xml_response->NewOrderResp->RespCode == 00) && (trim($obj_xml_response->NewOrderResp->AVSRespCode) == 'H') && ($obj_xml_response->NewOrderResp->CVV2RespCode == $check_cvv_resp)) {
    $obj_transaction->status = $obj_xml_response->NewOrderResp->ProcStatus == 0 ? COMMERCE_PAYMENT_STATUS_SUCCESS : COMMERCE_PAYMENT_STATUS_PENDING;
    $obj_transaction->remote_id = $obj_xml_response->NewOrderResp->TxRefNum;
    $obj_transaction->remote_status = $obj_xml_response->NewOrderResp->StatusMsg;
    $message = array();
    $card_type = _commerce_chase_orbital_card_type($obj_xml_response->NewOrderResp->CardBrand);
    if (!empty($obj_xml_response->NewOrderResp->CustomerProfileMessage)) {
      $message[] = $obj_xml_response->NewOrderResp->CustomerProfileMessage;
    }
    $message[] = "Card Type: " . $card_type;
    $message[] = "<b>Transcation status:" . $obj_xml_response->NewOrderResp->StatusMsg . "</b>";
    $obj_transaction->message = implode('<br/>', $message);
    $obj_transaction->data = serialize($orbital_response);
    $transaction_status = TRUE;
  }
  else {
    $obj_transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $obj_transaction->remote_id = $obj_xml_response->NewOrderResp->TxRefNum;
    $obj_transaction->remote_status = $obj_xml_response->NewOrderResp->StatusMsg;
    $message = array();
    if ($obj_xml_response->NewOrderResp) {
      $avs_resp_msg = _commerce_chase_orbital_avs_error_flag(trim($obj_xml_response->NewOrderResp->AVSRespCode));
      $cvv_resp_msg = _commerce_chase_orbital_cvv2_error_flag($obj_xml_response->NewOrderResp->CVV2RespCode);
      $resp_msg = _commerce_chase_orbital_resp_error_flag($obj_xml_response->NewOrderResp->RespCode);
      $message[] = "AVS Response " . $avs_resp_msg;
      $message[] = "CVV2 Response " . $cvv_resp_msg;
      $message[] = "Resp " . $resp_msg;
      $message[] = "Approval Status: " . $obj_xml_response->NewOrderResp->ApprovalStatus;
      $message[] = "Proc Status: " . $obj_xml_response->NewOrderResp->ProcStatus;
      $card_type = _commerce_chase_orbital_card_type($obj_xml_response->NewOrderResp->CardBrand);
      $message[] = "Card Type: " . $card_type;
    }
    if ($obj_xml_response->QuickResp) {
      $message[] = "Proc Status Code: " . $obj_xml_response->QuickResp->ProcStatus;
      $message[] = "Transcation status: " . $obj_xml_response->QuickResp->StatusMsg;
    }
    $obj_transaction->message = implode('<br/>', $message);
    drupal_set_message(t('Please enter your correct information again or try a different card.'), 'error');
    drupal_set_message(check_plain($obj_transaction->message), 'error');
    $transaction_status = FALSE;
  }
  commerce_payment_transaction_save($obj_transaction);
  return $transaction_status;
}

/**
 * AVS Error Messages.
 */
function _commerce_chase_orbital_avs_error_flag($avs_res_code) {
  if (!empty($avs_res_code)) {
    switch ($avs_res_code) {
      case 'F':
        return "Code: F | Msg:Zip No Match / Check Your Billing Address";

      case 'E':
        return "Code: E | Msg:Zip No Match / Check Your Billing Address";

      case 'Z':
        return "Code: Z | Msg:Check Your Billing Address";

      case 7:
        return "Code: 7 | Msg:AVS Address information unavailable";

      case 3:
        return "Code: 3 | Msg:AVS not performed";

      case 'N7':
        return "Code: N7 | Msg:ZIP matches, address not verified";

      case 'J':
        return "Code: J | Msg:Issuer does not participate in Global AVS";

      case 6:
        return "Code: 6 | Msg:System unavailable or time-out";

      case 1:
        return "Code: 1 | Msg:AVS No address supplied";

      case 'G':
        return "Code: G | Msg:AVS No match at all";

      case 'D':
        return "Code: D | Msg:Zip No Match / Zip 4 Match / Locale match";

      default:
        return "Code: " . $avs_res_code;
    }
  }
}

/**
 * CVV2 Error Messages.
 */
function _commerce_chase_orbital_cvv2_error_flag($cvv2_code) {
  if (!empty($cvv2_code)) {
    switch ($cvv2_code) {
      case 'N':
        return "Code: N | Msg:CVV No match";

      case 'P':
        return "Code: P | Msg:CVV Not processed";

      case 'S':
        return "Code: S | Msg:CVV Should have been present";

      case 'U':
        return "Code: U | Msg:CVV Unsupported by Issuer/Issuer unable to process request";

      case 'I':
        return "Code: I | Msg:CVV Invalid";

      case 'Y':
        return "Code: Y | Msg:CVV Invalid";

      default:
        return "Code: " . $cvv2_code;
    }
  }
}

/**
 * Response Error Messages.
 */
function _commerce_chase_orbital_resp_error_flag($rescode) {
  if (!empty($rescode)) {
    switch ($rescode) {
      case 01:
        return "Code: 01 | Msg:Call/Refer to Card Issuer";

      case 04:
        return "Code: 04 | Msg:Pickup";

      case 07:
        return "Code: 07 | Msg:Other Error";

      case 12:
        return "Code: 12 | Msg:Invalid Transaction Type";

      case 13:
        return "Code: 13 | Msg:Bad Amount";

      case 77:
        return "Code: 77 | Msg:Invalid Amount";

      case 'L3':
        return "Code: L3 | Msg:Invalid Expiration";

      case 'L8':
        return "Code: L8 | Msg:System Error";

      default:
        return "Code: " . $rescode;
    }
  }
}

/**
 * Checkout form submission callback for Chase Orbital payment method.
 *
 *  Implement a card on file functionality and achieve a payment process.
 */
function commerce_chase_orbital_cim_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // First attempt to load the card on file.
  $card_data = commerce_cardonfile_load($pane_values['cardonfile']);

  // Fail now if it is no longer available or the card is inactive.
  if (empty($card_data) || $card_data->status == 0) {
    drupal_set_message(t('The requested card on file is no longer valid.'), 'error');
    return FALSE;
  }

  return commerce_chase_orbital_cim_cardonfile_charge($card_data, $order, $payment_method, $charge);
}

/**
 * Card on file callback: background charge payment.
 *
 * @param object $card_data
 *   The stored credit card data object to be processed.
 * @param object $order
 *   The order object that is being processed.
 * @param array $payment_method
 *   The payment method instance definition array.
 * @param array $charge
 *   The price array for the charge amount with keys of 'amount' and 'currency'.
 *   If null the total value of the order is used.
 *
 * @return bool
 *   TRUE if the transaction was successful.
 */
function commerce_chase_orbital_cim_cardonfile_charge($card_data, $order, array $payment_method = array(), array $charge = array()) {
  // Format order total for transaction.
  if (!isset($charge)) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $charge = commerce_line_items_total($wrapper->commerce_line_items);
  }
  // Get numerical currency code and exponent value.
  $arr_currency = _commerce_chase_orbital_get_currency_details($payment_method['settings']['bin_number'], $charge['currency_code']);
  // New Order request parameter.
  $request_param = array();
  $request_param['OrbitalConnectionUsername'] = $payment_method['settings']['username'];
  $request_param['OrbitalConnectionPassword'] = $payment_method['settings']['password'];
  $request_param['IndustryType'] = $payment_method['settings']['industry_type'];
  $request_param['MessageType'] = _commerce_chase_orbital_txn_type($payment_method['settings']['txn_type']);
  $request_param['BIN'] = $payment_method['settings']['bin_number'];
  $request_param['MerchantID'] = $payment_method['settings']['merchant_number'];
  $request_param['TerminalID'] = $payment_method['settings']['terminal_id'];
  $request_param['CardBrand'] = '';
  $request_param['CurrencyCode'] = $arr_currency['numeric_currency_code'];
  $request_param['CurrencyExponent'] = $arr_currency['exponent'];
  $request_param['CustomerRefNum'] = $card_data->remote_id;
  $request_param['OrderID'] = $order->order_id;
  $request_param['Amount'] = round($charge['amount'], 0);

  $has_request_log = in_array('request', $payment_method['settings']['log']);
  $has_reponse_log = in_array('response', $payment_method['settings']['log']);
  // Process a request.
  $xml_response = _commerce_chase_orbital_process_request($request_param, $payment_method['settings']['txn_mode'], $has_request_log, $has_reponse_log);
  if (is_bool($xml_response) && $xml_response == FALSE) {
    drupal_set_message(t('We encountered an error processing your transaction. Please contact us to resolve the issue.'), 'error');
    return FALSE;
  }
  return _commerce_chase_orbital_create_transaction($xml_response, $payment_method, $order, $charge, 1);
}

/**
 * Card on file callback : updates the associated customer payment profile.
 */
function commerce_chase_orbital_cim_cardonfile_update($form, &$form_state, $payment_method, $card_data) {
  $customer_profile = $form_state['customer_profile'];
  $customer_name = str_replace(array('%', '|', "/", "\\"), '', $form_state['values']['credit_card']['owner']);
  $customer_name = drupal_substr($customer_name, 0, 30);
  $exp_year = $form_state['values']['credit_card']['exp_year'];
  $exp_year = drupal_strlen($exp_year) > 2 ? drupal_substr($exp_year, -2) : $exp_year;
  $exp_year = sprintf("%2d", $exp_year);
  $exp_month = sprintf("%2d", $form_state['values']['credit_card']['exp_month']);

  // Prepare request parameters.
  $request_param = array();
  $request_param['OrbitalConnectionUsername'] = $payment_method['settings']['username'];
  $request_param['OrbitalConnectionPassword'] = $payment_method['settings']['password'];
  $request_param['CustomerBin'] = $payment_method['settings']['bin_number'];
  $request_param['CustomerMerchantID'] = $payment_method['settings']['merchant_number'];
  $request_param['CustomerName'] = $customer_name;
  $request_param['CustomerRefNum'] = $card_data->remote_id;
  $request_param['CustomerProfileAction'] = 'U';
  $request_param['Status'] = $customer_profile->ProfileResp->Status;
  $request_param['CCExpireDate'] = sprintf("%02d%02d", $exp_month, $exp_year);
  $has_request_log = in_array('request', $payment_method['settings']['log']);
  $has_reponse_log = in_array('response', $payment_method['settings']['log']);

  $xml_response = _commerce_chase_orbital_process_request($request_param, $payment_method['settings']['txn_mode'], $has_request_log, $has_reponse_log, 'Profile');
  if (is_bool($xml_response) && $xml_response == FALSE) {
    drupal_set_message(t('We encountered an error processing your transaction. Please contact us to resolve the issue.'), 'error');
    return FALSE;
  }
  $obj_xml_response = new SimpleXMLElement($xml_response);
  if ($obj_xml_response->ProfileResp && $obj_xml_response->ProfileResp->ProfileProcStatus == 0) {
    drupal_set_message(check_plain((String) $obj_xml_response->ProfileResp->CustomerProfileMessage));
    return TRUE;
  }
  else {
    $message = array();
    $message[] = "Error Code: " . $obj_xml_response->QuickResp->ProcStatus;
    $message[] = $obj_xml_response->QuickResp->StatusMsg;
    drupal_set_message(check_plain(implode('-', $message)), 'error');
    return FALSE;
  }
}

/**
 * Card on file delete callback.
 */
function commerce_chase_orbital_cim_cardonfile_delete($form, &$form_state, $payment_method, $card_data) {
  if (empty($payment_method['settings'])) {
    form_set_error('', t('Payment method is not configured properly. Please contact Administrator!'));
    return FALSE;
  }
  // Prepare request parameters.
  $request_param = array();
  $request_param['OrbitalConnectionUsername'] = $payment_method['settings']['username'];
  $request_param['OrbitalConnectionPassword'] = $payment_method['settings']['password'];
  $request_param['CustomerBin'] = $payment_method['settings']['bin_number'];
  $request_param['CustomerMerchantID'] = $payment_method['settings']['merchant_number'];
  $request_param['CustomerRefNum'] = $card_data->remote_id;
  $request_param['CustomerProfileAction'] = 'D';
  $has_request_log = in_array('request', $payment_method['settings']['log']);
  $has_reponse_log = in_array('response', $payment_method['settings']['log']);

  $xml_response = _commerce_chase_orbital_process_request($request_param, $payment_method['settings']['txn_mode'], $has_request_log, $has_reponse_log, 'Profile');
  if (is_bool($xml_response) && $xml_response == FALSE) {
    drupal_set_message(t('We encountered an error processing your transaction. Please contact us to resolve the issue.'), 'error');
    return FALSE;
  }
  $obj_xml_response = new SimpleXMLElement($xml_response);
  if ($obj_xml_response->ProfileResp && $obj_xml_response->ProfileResp->ProfileProcStatus === 0) {
    drupal_set_message(check_plain((String) $obj_xml_response->ProfileResp->CustomerProfileMessage));
    return TRUE;
  }
  elseif ($obj_xml_response->ProfileResp && $obj_xml_response->ProfileResp->ProfileProcStatus > 0) {
    drupal_set_message(check_plain((string) $obj_xml_response->ProfileResp->CustomerProfileMessage));
    return FALSE;
  }
  else {
    $message = array();
    $message[] = "Error Code: " . $obj_xml_response->QuickResp->ProcStatus;
    $message[] = $obj_xml_response->QuickResp->StatusMsg;
    drupal_set_message(check_plain(implode('-', $message)), 'error');
    return FALSE;
  }
}

/**
 * Implements hook_form_alter().
 */
function commerce_chase_orbital_form_commerce_cardonfile_card_form_alter(&$form, &$form_state) {
  $card_data = $form_state['build_info']['args'][1];
  $payment_method = commerce_payment_method_instance_load($card_data->instance_id);
  if ($payment_method['method_id'] == 'chase_orbital') {
    $obj_remote_user_profile = _commerce_chase_orbital_get_customer_profile($card_data->remote_id, $payment_method);
    if ($obj_remote_user_profile && $obj_remote_user_profile->ProfileResp->ProfileProcStatus == 0) {
      $billing_address = array();
      $billing_address[] = check_plain($obj_remote_user_profile->ProfileResp->CustomerAddress1);
      $billing_address[] = check_plain($obj_remote_user_profile->ProfileResp->CustomerAddress2);
      $billing_address[] = check_plain($obj_remote_user_profile->ProfileResp->CustomerCity) . " " . check_plain($obj_remote_user_profile->ProfileResp->CustomerState) . " " . check_plain($obj_remote_user_profile->ProfileResp->CustomerZIP);
      $form['credit_card']['billto'] = array(
        '#type' => 'markup',
        '#markup' => '<div class="billing-title" >Billing Address:</div><div class="commerce-chase-orbital-cim-billto">' . implode('<br />', $billing_address) . '</div>',
        '#weight' => -50,
      );
    }
    $form_state['customer_profile'] = $obj_remote_user_profile;
  }
}

/**
 * Get Customer profile from Chase Payment Gateway.
 */
function _commerce_chase_orbital_get_customer_profile($remote_id, $payment_method) {
  $request_param = array();
  $request_param['OrbitalConnectionUsername'] = $payment_method['settings']['username'];
  $request_param['OrbitalConnectionPassword'] = $payment_method['settings']['password'];
  $request_param['CustomerBin'] = $payment_method['settings']['bin_number'];
  $request_param['CustomerMerchantID'] = $payment_method['settings']['merchant_number'];
  $request_param['CustomerRefNum'] = $remote_id;
  $request_param['CustomerProfileAction'] = 'R';
  $has_request_log = in_array('request', $payment_method['settings']['log']);
  $has_reponse_log = in_array('response', $payment_method['settings']['log']);

  $xml_response = _commerce_chase_orbital_process_request($request_param, $payment_method['settings']['txn_mode'], $has_request_log, $has_reponse_log, 'Profile');
  if (is_bool($xml_response) && $xml_response == FALSE) {
    drupal_set_message(t('We encountered an error processing your transaction. Please contact us to resolve the issue.'), 'error');
    return FALSE;
  }
  $obj_xml_response = new SimpleXMLElement($xml_response);
  return $obj_xml_response;
}

/**
 * Check Card Type.
 */
function _commerce_chase_orbital_card_type($card_brand) {
  switch ($card_brand) {
    case 'VI':
      return 'Visa';

    case 'MC':
      return 'MasterCard';

    case 'AX':
      return 'American Express';

    case 'DS':
      return 'Discover';

    case 'DC':
      return 'Diners Club';

    default:
      return 'Card';
  }
}
