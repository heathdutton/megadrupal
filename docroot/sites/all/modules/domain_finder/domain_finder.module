<?php

/**
 * @file
 * This module creates a new block to search domain names and generate results
 * showing whether they are free or unavailable.
 */

/**
 * This function get the value of domain_finder_domains and store in array.
 */
function domain_finder_domains_ext() {
  return array_filter(variable_get('domain_finder_domains', array()));
}

/**
 * Implements hook_menu().
 */
function domain_finder_menu() {
  $items = array();

  $items['domain_finder'] = array(
    'title' => 'Domain finder',
    'page callback' => 'domain_finder_result_page',
    'access callback' => 'domain_finder_check_permissions',
    'type' => MENU_SUGGESTED_ITEM,
  );

  $items['admin/config/search/domain-finder'] = array(
    'title' => 'Domain finder',
    'description' => 'Setting domain finder parameters',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('domain_finder_generate_admin_form'),
    'access arguments' => array('administer domain finder'),
    'file' => 'includes/domain_finder.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function domain_finder_permission() {
  return array(
    'use domain finder' => array(
      'title' => t('Use domain finder form'),
      'description' => t('Perform to use domain finder form.'),
    ),
    'administer domain finder' => array(
      'title' => t('Administer domain finder form'),
      'description' => t('Perform to administer domain finder.'),
    ),
  );
}

/**
 * This function requires phpWhois library for getting whois servers list.
 */
function domain_finder_check_permissions() {
  if (!user_access('use domain finder')) {
    // User have not permission to use domain finder.
    return FALSE;
  }

  // Whois class place.
  $path = libraries_get_path('phpwhois');
  $file = $path . '/whois.main.php';

  // Check whois class.
  if (!file_exists($file)) {
    // Have not file in place.
    global $user;
    $error = 'No phpWhois library found in %path folder.';
    if ($user->uid == 1) {
      drupal_set_message(t('%error', array('%error' => $error)), 'error');
    }
    watchdog('domain_finder', $error, array('%path' => $path), WATCHDOG_ERROR);
    // Is not able to generate results if there is no library.
    return FALSE;
  }
  // Load phpwhois class.
  include_once $file;

  // Everithing is OK.
  return TRUE;
}

/**
 * Implements hook_block_info().
 */
function domain_finder_block_info() {
  $blocks['domain_finder_search'] = array(
    'info' => t('Domain finder search block'),
    'cache' => DRUPAL_NO_CACHE,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => 'domain_finder',
  );
  $blocks['domain_finder_page_search'] = array(
    'info' => t('Domain finder page search block'),
    'cache' => DRUPAL_NO_CACHE,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'domain_finder',
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function domain_finder_block_view($delta = '') {
  if ($delta == 'domain_finder_search') {
    $block = array();
    $block['subject'] = t('Domain name search');
    $block['content'] = drupal_get_form('domain_finder_search_form');
    return $block;
  }
  if ($delta == 'domain_finder_page_search') {
    $block = array();
    $block['subject'] = t('Domain name search in result page');
    $block['content'] = drupal_get_form('domain_finder_page_search_form');
    return $block;
  }
}

/**
 * Implements hook_theme().
 */
function domain_finder_theme() {
  return array(
    'domain_finder_result' => array(
      'variables' => array('result' => NULL),
      'template' => 'domain-finder-result',
    ),
    'domain_finder_results' => array(
      'variables' => array('results' => NULL),
      'template' => 'domain-finder-results',
    ),
  );
}

/**
 * Preprocess variables for domain-finder-result.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $result: Domain finder result array.
 *
 * @see domain-finder-result.tpl.php
 */
function domain_finder_preprocess_domain_finder_result(&$variables) {
  // Creating variables to domain-finder-result.tpl.php
  $result = $variables['result'];
  $variables['domain_name'] = check_plain($result['regrinfo']['domain']['name']);
  switch ($result['regrinfo']['registered']) {
    case 'no':
      $variables['domain_attributes'] = 'domain free';
      $variables['output_text'] = t('%domain_name domain is free.', array('%domain_name' => $variables['domain_name']));
      break;
    case 'n/a':
      $variables['domain_attributes'] = 'domain not-data';
      $variables['output_text'] = t('We are sorry but %domain_name domain has empty result.', array('%domain_name' => $variables['domain_name']));
      break;
    default:
      $variables['domain_attributes'] = 'domain engage';
      $variables['output_text'] = t('We are sorry but %domain_name domain is unavailable.', array('%domain_name' => $variables['domain_name']));
      break;
  }

  // More variables available from:
  // $result['regrinfo']
  // $result['regyinfo']
  // $result['rawdata']
}

/**
 * Preprocess variables for domain-finder-results.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $results: Domain finder results array.
 *
 * @see domain-finder-results.tpl.php
 */
function domain_finder_preprocess_domain_finder_results(&$variables) {
  // Creating variables to domain-finder-results.tpl.php
  $results = $variables['results'];
  $variables['domain_finder_results_title'] = t('Results of search');
  $variables['domain_finder_results'] = '';
  foreach ($results['exts'] as $result) {
    $variables['domain_finder_results'] .= theme('domain_finder_result', array('result' => $result));
  }
}

/**
 * Prepare search form of domain finder.
 */
function domain_finder_search_form($form, &$form_state) {

  $form['domain_text'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($_GET['domain_text']) ? $_GET['domain_text'] : '',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  if (variable_get('domain_finder_domains_in_form', 0)) {
    $form['exts'] = array(
      '#type' => 'container',
    );
    foreach (domain_finder_domains_ext() as $domain) {
      if (empty($_GET) || $_GET['q'] != 'domain_finder') {
        $value = 1;
      }
      else {
        $value = isset($_GET['domain_' . $domain]) ? $_GET['domain_' . $domain] : 0;
      }
      $form['exts']['domain_' . $domain] = array(
        '#type' => 'checkbox',
        '#title' => check_plain(".$domain"),
        '#default_value' => $value,
      );
    }
  }

  // Need domain_finder.css to formatting form.
  $form['#attached']['css'] = array(drupal_get_path('module', 'domain_finder') . '/domain_finder.css');

  return $form;
}

/**
 * Submit rutin of domain_finder_search_form.
 */
function domain_finder_search_form_submit($form, &$form_state) {
  $query = array('domain_text' => $form_state['input']['domain_text']);
  if (variable_get('domain_finder_domains_in_form', 0)) {
    foreach (domain_finder_domains_ext() as $domain) {
      if ($form_state['values']['domain_' . $domain]) {
        $query['domain_' . $domain] = $form_state['values']['domain_' . $domain];
      }
    }
  }
  $form_state['redirect'] = array('domain_finder', array('query' => $query));
}

/**
 * Prepare page search form of domain finder.
 */
function domain_finder_page_search_form($form, &$form_state) {
  $form = domain_finder_search_form($form, $form_state);
  $form['#method'] = 'get';
  return $form;
}

/**
 * Prepare result page.
 */
function domain_finder_result_page() {
  $domain_name = '';
  if (isset($_GET['domain_text'])) {
    $domain_name = domain_finder_normalize_domain_name($_GET['domain_text']);
  }
  if (empty($domain_name)) {
    // Do not work with empty domain name.
    drupal_set_message(t('Please fill the domain search block informations and click to search button.'), 'warning');
    return '';
  }

  // Prepare results array.
  $result = array(
    'domain' => $domain_name,
    'exts' => array(),
  );

  // Create a whois class.
  $whois = new Whois();

  $in_form = variable_get('domain_finder_domains_in_form', 0);
  foreach (domain_finder_domains_ext() as $domain) {
    // Check what domain extension you want to find.
    if (isset($_GET['domain_' . $domain]) || !$in_form) {
      // Getting result from whois class.
      $whois_result = $whois->Lookup($result['domain'] . '.' . $domain);
      if (isset($whois_result['regrinfo']) &&
          isset($whois_result['regrinfo']['domain']['name']) &&
          isset($whois_result['regrinfo']['registered'])) {
        // Properly result get back.
        $result['exts'][$domain] = $whois_result;
      }
      else {
        // Prepare empty data to result
        $result['exts'][$domain]['regrinfo'] = array(
          'domain' => array(
            'name' => $domain_name . '.' . $domain,
          ),
          'registered' => 'n/a',
        );
      }
    }
  }
  // Results page output.
  return theme('domain_finder_results', array('results' => $result));
}

/**
 * Reduce domain name just name without subdomain and extension.
 */
function domain_finder_normalize_domain_name($domain_name) {
  $name = explode('.', $domain_name);
  $sum = count($name);
  $normalized_name = $domain_name;
  if ($sum > 1) {
    $normalized_name = $name[$sum - 2];
    drupal_set_message(t('Domain name reduced from %original to %name', array(
          '%original' => $domain_name,
          '%name' => $normalized_name,)));
  }
  return $normalized_name;
}

