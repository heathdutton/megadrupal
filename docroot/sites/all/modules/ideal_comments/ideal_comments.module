<?php

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add settings field to content types forms,
 * for set the number of comments to show before folding.
 */
function ideal_comments_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  $form['comment']['comments_fold'] = array(
    '#type' => 'textfield',
    '#title' => t('Comment folding'),
    '#description' => t('Limit the number of first deph comment shows, with a link to open the rest comments.'),
    '#default_value' =>  variable_get("comments_fold_{$form['#node_type']->type}", 10),
    '#size' => 15,
    '#maxlength' => 32,
    '#required' => TRUE,
  );
  $form['#submit'][] = 'node_type_form_comments_fold_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ideal_comments_form_comment_form_alter(&$form, &$form_state, $form_id) {
  $node = is_object(menu_get_object()) ? menu_get_object() : menu_get_object('node', 2);
  if (empty($node) && $comment = menu_get_object('comment')) {
    $node = node_load($comment->nid);
  }

  // Add a preview zone for markup.
  $form['comment_preview'] = array(
    '#type' => 'item',
    '#title' => '',
    '#markup' => '',
    '#weight' => 101,
    '#prefix' => "<div id='replace_preview_{$form_id}' class='ideal-comment-preview-area comment-preview'>",
    '#suffix' => '</div>',
  );

  // Add a custom preview button for execute the ajax call.
  $form['actions']['preview'] = array(
    '#type' => 'button',
    '#value' => t('Preview'),
    '#weight' => 20,
    '#access' => (variable_get('comment_preview_' . $node->type, DRUPAL_OPTIONAL) != DRUPAL_DISABLED),
    '#attributes' => array('class' => array('ideal-comment-preview-button', 'form-wrapper')),
    '#ajax' => array(
      'callback' => '_preview_ajax_callback',
      'wrapper' => "replace_preview_{$form_id}",
    ),
  );
}

function _preview_ajax_callback($form, $form_state) {
  $comment_body = $form_state['values']['comment_body'][LANGUAGE_NONE][0];

  // Filter the input by the selected field format.
  if (isset($comment_body['format'])) {
    $comment_text = check_markup($comment_body['value'], $comment_body['format']);
  }
  else {
    $comment_text = check_plain($comment_body['value']);
  }

  // Set the result output to the preview field.
  $form['comment_preview']['#markup'] = $comment_text;
  return $form['comment_preview'];
}

/**
 * Extra submit for node_type_form to save the comment folding No.
 */
function node_type_form_comments_fold_submit($form, &$form_state) {
  $fold = $form_state['values']['comments_fold'];
  $type = $form_state['values']['type'];
  variable_set("comments_fold_{$type}", $fold);
  drupal_set_message(t("Comment folding have been set to @fold.", array('@fold' => $fold)));
}

/**
 * Implements hook_registry_alter().
 */
function ideal_comments_theme_registry_alter(&$theme_registry) {
  if (isset($theme_registry['comment_wrapper']['path'])) {
    $path = $theme_registry['comment_wrapper']['path'];
    // Override core implementations of ideal_comments,
    // but leave it open to override by othee themes.
    if (strpos($path, 'themes/') === 0 || strpos($path, 'modules/') === 0) {
      $theme_registry['comment_wrapper']['path'] = drupal_get_path('module', 'ideal_comments') . '/theme';
    }
  }
}

/**
 * Implements hook_forms().
 */
function ideal_comments_forms($form_id, $args) {
  $forms = array();
  // Use the default drupal callback for our unique comment forms.
  // See ideal_comments_preprocess_comment().
  if (strpos($form_id, 'comment_form_node_') === 0) {
    $forms[$form_id]['callback'] = 'comment_form';
  }
  return $forms;
}

/**
 * Override or insert variables into the comment template.
 */
function ideal_comments_preprocess_comment(&$vars) {
  $node = $vars['node'];
  $comment = $vars['comment'];
  $settings = array('comments_fold' => variable_get("comments_fold_{$node->type}", 10));
  drupal_add_js($settings, array('type' => 'setting'));
  // Creating a unique comment form for each reply.
  // See ideal_comments_forms(), for handleing those unique forms.
  $comment_form = drupal_get_form("comment_form_node_{$node->type}_{$node->nid}{$comment->cid}", (object) array('pid' => $comment->cid, 'nid' => $node->nid));

  $vars['content']['comment_form'] = $comment_form;
  $vars['content']['comment_form']['#weight'] = 1000;
}
