<?php

/**
 * Implements hook_field_info_alter().
 */
function redhen_mailchimp_field_info_alter(&$info) {
  $info['mailchimp_lists_subscription']['instance_settings']['engagement_scores'] = array();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function redhen_mailchimp_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#field']['type'] != 'mailchimp_lists_subscription') {
    return;
  }

  $list_id = $form['field']['settings']['mc_list_id']['#default_value'];

  if (!empty($list_id)) {
    $form['instance']['settings']['engagement_scores'] = array(
      '#type' => 'fieldset',
      '#title' => t('Engagement scores'),
      '#description' => t('Select RedHen engagement scores to be granted
        when MailChimp webhook actions are received.'),
      '#weight' => 1,
    );

    $webhook_url = mailchimp_webhook_url();

    $webhooks = mailchimp_webhook_get($list_id);

    $engagement_scores = redhen_engagement_get_scores();
    $engagement_score_options = array(
      '' => 'None',
    );
    foreach ($engagement_scores as $score) {
      $engagement_score_options[$score->name] = $score->label;
    }

    $valid_webhooks = FALSE;

    if (!empty($webhooks)) {
      $default_webhook_actions = mailchimp_lists_default_webhook_actions();
      foreach ($webhooks as $webhook) {
        if ($webhook_url == $webhook['url']) {
          foreach ($webhook['actions'] as $action => $enabled) {
            if ($enabled) {
              $form['instance']['settings']['engagement_scores'][$action] = array(
                '#type' => 'select',
                '#title' => t($default_webhook_actions[$action]),
                '#options' => $engagement_score_options,
                '#default_value' => isset($form['#instance']['settings']['engagement_scores'][$action]) ?
                    $form['#instance']['settings']['engagement_scores'][$action] : '',
              );

              $valid_webhooks = TRUE;
            }
          }
        }
      }
    }

    if (!$valid_webhooks) {
      $form['instance']['settings']['engagement_scores']['#description'] = t(
        '!link to use engagement scores with this list.',
        array('!link' => l(t('Enable webhooks'), 'admin/config/services/mailchimp/lists/' . $list_id . '/webhook'))
      );
    }
  }
}

/**
 * Implements hook_mailchimp_process_webhook().
 */
function redhen_mailchimp_mailchimp_process_webhook($type, $data) {
  $redhen_contact = redhen_contact_load_by_mail($data['email']);
  if ($redhen_contact === FALSE) {
    return;
  }
  $redhen_contact = current($redhen_contact);

  $subcription_field_instances = redhen_mailchimp_subscription_field_instances();

  foreach ($subcription_field_instances as $field_instance) {

    // Apply RedHen engagement score only if this MailChimp subscription
    // field references a matching engagement score for the current
    // MailChimp webhook type.
    if (isset($field_instance['settings']['engagement_scores'][$type])
      && !empty($field_instance['settings']['engagement_scores'][$type])) {

      // Query the MailChimp subscription field for the email address
      // referenced by this MailChimp webhook action.
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', $field_instance['entity_type']);

      $email_field = $field_instance['settings']['mergefields']['EMAIL'];
      $email_field_parts = explode(':', $email_field);

      if (count($email_field_parts) > 1) {
        $query->fieldCondition($email_field_parts[0], 'value', $data['email'], '=');
      }
      else {
        $query->propertyCondition($email_field, $data['email'], '=');
      }

      $result = $query->execute();
      if (isset($result[$field_instance['entity_type']])) {
        // Create new engagement for the RedHen contact.
        $engagement_score_name = $field_instance['settings']['engagement_scores'][$type];
        $engagement_score = redhen_engagement_get_scores($engagement_score_name);

        if ($engagement_score !== FALSE) {
          $score_description = 'Created by MailChimp webhook for action: ' . $type;
          $engagement = redhen_engagement_create($engagement_score_name, $redhen_contact->contact_id, $score_description);
          try {
            redhen_engagement_save($engagement);
          } catch (Exception $e) {
            watchdog('redhen_mailchimp', 'Unable to create RedHen engagement %engagement for contact ID %contact_id.',
              array(
                '%engagement' => $engagement_score_name,
                '%contact_id' => $redhen_contact->contact_id,
              ), WATCHDOG_ERROR);
          }
        }
      }
    }
  }
}

/**
 * Returns all existing instances of MailChimp subscription fields.
 *
 * @return array
 *   MailChimp subscription field instances.
 */
function redhen_mailchimp_subscription_field_instances() {
  $subscription_fields = field_read_fields(
    array(
      'type' => 'mailchimp_lists_subscription'
    )
  );

  $subscription_field_instances = array();

  foreach ($subscription_fields as $field) {
    $field_instances = field_read_instances(
      array(
        'field_name' => $field['field_name'],
      )
    );

    foreach ($field_instances as $field_instance) {
      $subscription_field_instances[] = $field_instance;
    }
  }

  return $subscription_field_instances;
}
