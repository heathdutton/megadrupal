<?php

/**
 * @file
 * The TranslateThis Button is a lightweight Javascript translation
 * widget by Jon Raasch. It translates any page quickly using Ajax
 * and the Google Language API.
 *
 * The script is very lightweight, running well on any website. Its widget
 * provides an accessible Javascript interface for translating up to 52
 * languages (and counting). The user interface has been carefully designed to
 * work well in all environments on both PCs and mobile devices.
 *
 * Plugin released under the FreeBSD license, and leverages the TranslateThis
 * Button script which has its own licensing. For terms and conditions of use,
 * see http://translateth.is/tos.
 *
 * Copyright (c) 2010 Jon Raasch (http://jonraasch.com/)
 *
 * This module is developed by Baris Wanschers (aka BarisW)
 * Blog: http://www.bariswanschers.com/
 */

/**
 * Implements hook_menu().
 */
function translate_this_menu() {
  $items = array();

  $items['admin/config/regional/translate_this'] = array(
    'title' => 'TranslateThis Button',
    'description' => 'Configure the TranslateThis button.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('translate_this_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'translate_this.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function translate_this_block_info() {
  $blocks['button']['info'] = t('TranslateThis block');
  $blocks['button']['cache'] = DRUPAL_NO_CACHE;
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function translate_this_block_view($delta = '') {
  if ($delta == 'button') {
    $block['content'] = translate_this_display_button();
  }
  return $block;
}

/**
 * Add the required HTML element and the needed Javascript.
 */
function translate_this_display_button() {
  $content = array();

  $protocol = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 'https' : 'http';
  $content['#attached']['js'][] = array(
    'type' => 'external',
    'data' => $protocol . '://x.translateth.is/translate-this.js',
  );
  $content['#attached']['js'][] = array(
    'type' => 'external',
    'data' => 'http://www.google.com/jsapi',
  );
  $content['#attached']['js'][] = array(
    'type' => 'inline',
    'data' => 'TranslateThis({
      ' . translate_this_js_options() . '
    });',
  );
  $content['button'] = array(
    '#prefix' => '<div id="translate-this">',
    '#suffix' => '</div>',
    '#markup' => l(t('Translate'), 'http://translateth.is/', array(
      'attributes' => array(
        'class' => array(
          'translate-this-button',
        ),
      ),
    )),
  );

  return $content;
}

/**
 * Returns the default options for the Javascript functions.
 */
function translate_this_js_options() {
  $content = '';

  // Miscellaneous options.
  $scope = variable_get('translate_this_scope');
  $cookie = variable_get('translate_this_use_cookie', TRUE);

  if ($scope) {
    $content .= "scope : '" . $scope . "',\r";
  }
  if ($cookie == FALSE) {
    $content .= "cookie : false,\r";
  }

  // Text options.
  $fromlang = variable_get('translate_this_from_language', 'unknown');
  $content .= "undoText : '" . t(variable_get('translate_this_undo_text', t('Undo &raquo;'))) . "',\r";
  $content .= "undoTime : '" . variable_get('translate_this_undo_time', 4000) . "',\r";
  $content .= "panelText : '" . t(variable_get('translate_this_main_panel_text', t('Translate into:'))) . "',\r";
  $content .= "moreText : '" . t(variable_get('translate_this_more_languages_text', t('36 more languages &raquo;'))) . "',\r";
  $content .= "busyText : '" . t(variable_get('translate_this_busy_translating_text', t('Translating page...'))) . "',\r";
  $content .= "cancelText : '" . t(variable_get('translate_this_cancel_translating_text', t('cancel'))) . "',\r";
  if ($fromlang != 'unknown') {
    $content .= "fromLang : '" . $fromlang . "',\r";
  }

  // Dropdown languages.
  if (variable_get('translate_this_use_default_languages', TRUE) == FALSE) {
    $available_languages = variable_get('translate_this_available_languages', array());
    $content .= "ddLangs : [\r";
    foreach ($available_languages as $langcode => $language) {
      if ($language) {
        $content .= "    '" . $langcode . "',\r";
      }
    }
    $content .= "],\r";
  }

  // Display options.
  if (variable_get('translate_this_disable_button_image', FALSE) == TRUE) {
    $button_path = $GLOBALS['base_url'] . '/' . variable_get('translate_this_alternate_button_image_path', '');
    $button_height = variable_get('translate_this_button_height');
    $button_width = variable_get('translate_this_button_width');

    if (empty($button_path) || $button_path === $GLOBALS['base_url'] . '/') {
      $content .= "noBtn : true,\r";
    }
    else {
      $content .= "btnImg : '" . $button_path . "',\r";
      $content .= "btnHeight : " . $button_height . ",\r";
      $content .= "btnWidth : " . $button_width . ",\r";
    }
  }
  if (variable_get('translate_this_disable_flag_thumbnails', FALSE) == TRUE) {
    $content .= "noImg : true,\r";
  }

  // Remove trailing comma and return.
  $content = substr($content, 0, -2);

  return $content;
}

/**
 * Returns an array with all the available languages.
 */
function translate_this_languages() {
  return array(
    'af' => 'Afrikaans',
    'sq' => 'Albanian',
    'ar' => 'Arabic',
    'be' => 'Belarusian',
    'bg' => 'Bulgarian',
    'ca' => 'Catalan',
    'zh-CN' => 'Chinese simplified',
    'zh-TW' => 'Chinese traditional',
    'hr' => 'Croatian',
    'cs' => 'Czech',
    'da' => 'Danish',
    'nl' => 'Dutch',
    'en' => 'English',
    'et' => 'Estonian',
    'fi' => 'Finnish',
    'fr' => 'French',
    'gl' => 'Gallician',
    'de' => 'German',
    'el' => 'Greek',
    'iw' => 'Hebrew',
    'hi' => 'Hindi',
    'hu' => 'Hungarian',
    'is' => 'Icelandic',
    'id' => 'Indonesian',
    'ga' => 'Irish',
    'it' => 'Italian',
    'ja' => 'Japanese',
    'ko' => 'Korean',
    'lv' => 'Latvian',
    'lt' => 'Lithuanian',
    'mk' => 'Macedonian',
    'ms' => 'Malay',
    'mt' => 'Maltese',
    'no' => 'Norwegian',
    'fa' => 'Persian',
    'pl' => 'Polish',
    'pt-PT' => 'Portuguese',
    'ro' => 'Romanian',
    'ru' => 'Russian',
    'sr' => 'Serbian',
    'sk' => 'Slovak',
    'sl' => 'Slovenian',
    'es' => 'Spanish',
    'sw' => 'Swahili',
    'sv' => 'Swedish',
    'tl' => 'Tagalog (Filipino)',
    'th' => 'Thai',
    'tr' => 'Turkish',
    'uk' => 'Ukranian',
    'vi' => 'Vietnamese',
    'cy' => 'Welsh',
    'yi' => 'Yiddish',
  );
}
