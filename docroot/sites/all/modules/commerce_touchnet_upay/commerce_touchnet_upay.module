<?php
/**
 * @file
 * This file contains the module functions for the Touchnet uPay Gateway Module.
 */

/**
 * Implements hook_menu().
 */
function commerce_touchnet_upay_menu() {
  $items = array();

  $items['touchnet'] = array(
    'title' => 'TouchNet Post',
    'description' => 'TouchNet POST.',
    'page callback' => 'commerce_touchnet_upay_post_callback',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Menu callback function for Touchnet to send back confirmation of payment.
 */
function commerce_touchnet_upay_post_callback() {
  // Load required modules.
  module_load_include('module', 'commerce_payment');
  module_load_include('module', 'commerce_currency');

  // Load the supplied order.
  $order = commerce_order_load($_POST['EXT_TRANS_ID']);

  // Load orders payment method.
  if (!empty($order->data['payment_method'])) {
    $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
  }

  // The flood controls to hinder brute force attacks.
  if (!flood_is_allowed('commerce_touchnet_upay_failed_validation', 10, 300)) {
    return FALSE;
  }

  if ($order->data['payment_redirect_key'] !== $_POST['PAYMENT_REDIRECT_KEY']) {
    flood_register_event('commerce_touchnet_upay_failed_validation', 300);
    return FALSE;
  }
  $currency = commerce_currency_load();
  $transaction = commerce_payment_transaction_new('touchnet_upay', $_POST['EXT_TRANS_ID']);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $_POST['sys_tracking_id'];
  $transaction->amount = commerce_currency_decimal_to_amount($_POST['pmt_amt'], $currency['code']);
  $transaction->currency_code = $currency['code'];
  $transaction->payload[REQUEST_TIME] = $_POST;
  $transaction->remote_status = $_POST['pmt_status'];
  switch (strtoupper($_POST['pmt_status'])) {

    case 'SUCCESS':
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t('The payment has completed.');
      break;

    case 'CANCELED':
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t("The payment was canceled.");
      commerce_payment_transaction_save($transaction);
      commerce_payment_redirect_pane_previous_page($order);
      return '';
      break;

  }

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);
  commerce_payment_redirect_pane_next_page($order);
  return '';
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_touchnet_upay_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['touchnet_upay'] = array(
    'base' => 'commerce_touchnet_upay',
    'title' => t('TouchNet uPay '),
    'short_title' => t('TouchNet uPay'),
    'display_title' => t('Secure Offsite Credit Card Processing'),
    'description' => t('Integrates the TouchNet offsite uPay solution for card not present CC transactions.'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}
/**
 * Returns the default settings for the CyberSource HOP payment method.
 */
function commerce_touchnet_upay_default_settings() {
  $settings = array(
    'touchnet_upay_server' => '',
    'touchnet_upay_site_id' => '',
    'touchnet_upay_success_link_text' => '',
    'touchnet_upay_continue_link_text' => '',
    'touchnet_upay_error_link_text' => '',
    'touchnet_upay_cancel_link_text' => '',
    'touchnet_upay_validation_key' => '',
    'touchnet_upay_credit_acct_code' => '',
    'touchnet_upay_debit_acct_code' => '',
  );

  return $settings;
}

/**
 * Payment method callback: settings form.
 */
function commerce_touchnet_upay_settings_form($settings = NULL) {
  $settings += commerce_touchnet_upay_default_settings();
  $form = array();
  $form['touchnet_upay_server'] = array(
    '#type' => 'textfield',
    '#title' => t('TouchNet Server'),
    '#default_value' => $settings['touchnet_upay_server'],

  );
  $form['touchnet_upay_site_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Site ID'),
    '#default_value' => $settings['touchnet_upay_site_id'],
  );
  $form['touchnet_upay_validation_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Validation key'),
    '#default_value' => $settings['touchnet_upay_validation_key'],
  );
  $form['touchnet_upay_credit_acct_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Credit Account Code (Override)'),
    '#default_value' => $settings['touchnet_upay_credit_acct_code'],
  );
  $form['touchnet_upay_debit_acct_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Debit Account Code (Override)'),
    '#default_value' => $settings['touchnet_upay_debit_acct_code'],
  );
  $form['touchnet_upay_success_link_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Text For Success Link'),
    '#default_value' => $settings['touchnet_upay_success_link_text'],
  );
  $form['touchnet_upay_continue_link_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Text For Continue Link'),
    '#default_value' => $settings['touchnet_upay_continue_link_text'],
  );
  $form['touchnet_upay_error_link_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Text For Error Link'),
    '#default_value' => $settings['touchnet_upay_error_link_text'],
  );
  $form['touchnet_upay_cancel_link_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Text For Cancel Link'),
    '#default_value' => $settings['touchnet_upay_cancel_link_text'],
  );

  return $form;
}

/**
 * Payment method callback: adds a message and CSS to the submission form.
 */
function commerce_touchnet_upay_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form['cybersource_hop_information'] = array(
    '#markup' => '<span class="commerce-touchnet-upay-info">' . t('(Continue with checkout to be redirected to the payment server.)') . '</span>',
  );
  return $form;
}

/**
 * Payment method callback: redirect form, a wrapper around the form function.
 */
function commerce_touchnet_upay_redirect_form($form, &$form_state, $order, $payment_method) {
  return commerce_touchnet_upay_order_form($form, $form_state, $order, $payment_method['settings']);
}

/**
 * Payment method callback: redirect form return validation.
 */
function commerce_touchnet_upay_redirect_form_validate($order, $payment_method) {
  $order_balance = commerce_payment_order_balance($order);
  if (empty($order_balance)) {
    watchdog('commerce_touchnet_upay', 'Order @order_number payment did not complete. No transactions were found.', array('@order_number' => $order->order_id));
    return FALSE;
  }
  elseif ($order_balance['amount'] > 0) {
    watchdog('commerce_touchnet_upay', 'Order @order_number has an outstanding balance but shows transactions. Please check the order payment status.', array('@order_number' => $order->order_id));
    return FALSE;
  }
}

/**
 * Payment method callback: redirect form return validation.
 */
function commerce_touchnet_upay_redirect_form_submit($order, $payment_method) {
  commerce_payment_redirect_pane_next_page($order);
  watchdog('commerce_touchnet_upay', 'Order @order_number has been processed.', array('@order_number' => $order->order_id));
}

/**
 * Builds a Hosted Order Page post to send along to touchnet.
 */
function commerce_touchnet_upay_order_form($form, &$form_state, $order, $settings) {
  $path = drupal_get_path('module', 'commerce_touchnet_upay');
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = commerce_currency_amount_to_decimal($wrapper->commerce_order_total->amount->value(), $currency_code);
  $settings += commerce_touchnet_upay_default_settings();

  // Build the data array that will be translated into hidden form values.
  $billing_address = $wrapper->commerce_customer_billing->commerce_customer_address->value();
  $email = $wrapper->mail->value();
  $order_number = $wrapper->order_number->value();
  $success_url = url('checkout/' . $order_number . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
  $error_url = url('checkout/' . $order_number . '/payment/error/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
  $cancel_url = url('checkout/' . $order_number . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
  variable_set('commerce_touchnet_upay_settings_validation_key', $settings['touchnet_upay_validation_key']);
  $validation_key = commerce_touchnet_upay_make_validation_key($settings['touchnet_upay_validation_key'], $order_number, $amount);

  // Determine name values.
  if (empty($billing_address['first_name']) || empty($billing_address['last_name'])) {
    $namearr = explode(' ', $billing_address['name_line']);

    if (count($namearr) > 2) {
      $last_name = array_pop($namearr);
      $first_name = implode(' ', $namearr);
    }
    elseif (count($namearr) > 1) {
      $last_name = $namearr[1];
      $first_name = $namearr[0];
    }
    else {
      $first_name = $namearr[0];
      $last_name = '';
    }
  }
  else {
    $first_name = $billing_address['first_name'];
    $last_name = $billing_address['last_name'];
  }

  $data = array(
    // Add hidden form elements into this array.
    'UPAY_SITE_ID' => $settings['touchnet_upay_site_id'],
    'BILL_NAME' => $first_name . ' ' . $last_name,
    'BILL_EMAIL_ADDRESS' => $email,
    'BILL_STREET1' => $billing_address['thoroughfare'],
    'BILL_STREET2' => '',
    'BILL_CITY' => $billing_address['locality'],
    'BILL_STATE' => $billing_address['administrative_area'],
    'BILL_POSTAL_CODE' => $billing_address['postal_code'],
    'BILL_COUNTRY' => $billing_address['country'],
    'EXT_TRANS_ID' => $order_number,
    'EXT_TRANS_ID_LABEL' => '',
    'AMT' => number_format($amount, '2', '.', ''),
    'VALIDATION_KEY' => $validation_key,
    'SUCCESS_LINK' => $success_url,
    'ERROR_LINK' => $error_url,
    'CANCEL_LINK' => $cancel_url,
    'PAYMENT_REDIRECT_KEY' => $order->data['payment_redirect_key'],
  );

  foreach ($settings as $key => $value) {
    if (!empty($value)) {
      switch ($key) {
        case 'touchnet_upay_continue_link_text':
          $data['CONTINUE_LINK_TEXT'] = $value;
          break;

        case 'touchnet_upay_success_link_text':
          $data['SUCCESS_LINK_TEXT'] = $value;
          break;

        case 'touchnet_upay_error_link_text':
          $data['ERROR_LINK_TEXT'] = $value;
          break;

        case 'touchnet_upay_cancel_link_text':
          $data['CANCEL_LINK_TEXT'] = $value;
          break;

        case 'touchnet_upay_credit_acct_code':
          $data['CREDIT_ACCT_CODE'] = $value;
          break;

        case 'touchnet_upay_debit_acct_code':
          $data['DEBIT_ACCT_CODE'] = $value;
          break;
      }
    }
  }

  $form['#action'] = $settings['touchnet_upay_server'];

  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to Payment Form'),
  );
  return $form;
}

/**
 * Function to create validation key for post verification.
 *
 * @param string $validation_key
 *   Validation key specified in settings.
 * @param string $order_number
 *   Order number from order to be processed.
 * @param float $amount
 *   Charge amount from order.
 *
 * @return string
 *   Hashed validation key.
 */
function commerce_touchnet_upay_make_validation_key($validation_key, $order_number, $amount) {
  // Create key by joining the $validation_key, $order_number and $amount.
  $validation_key = $validation_key . $order_number . number_format($amount, '2', '.', '');
  // Then md5 hash the concantenated key and base64_encode it.
  $validation_key = base64_encode(pack('H*', md5($validation_key)));
  return $validation_key;
}
