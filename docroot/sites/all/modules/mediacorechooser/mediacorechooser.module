<?php

/**
 * @file
 * Main file for mediacorechooser module.
 */
require_once ('vendor/autoload.php');
require_once ('mediacorechoosersigning.php');

/**
 * Implementation of hook_menu().
 */
function mediacorechooser_menu() {

  $items = array();

  $items['admin/config/content/mediacorechooser'] = array(
    'title' => 'MediaCore Chooser',
    'description' => 'Filter for MediaCore Videos and WYSIWYG editor button.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediacorechooser_admin'),
    'access arguments' => array('administer mediacorechooser'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}


/**
 * Admin
 */
function mediacorechooser_admin($form) {
  $form = array();

  $form['mediacorechooser_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Your MediaCore URL'),
    '#default_value' => variable_get('mediacorechooser_url', ''),
    '#size' => 40,
    '#maxlength' => 255,
    '#description' => t("The URL of your MediaCore library. <br /><br />If you do not see your changes reflected in the MediaCore chooser, <br />try clearning the cache at /admin/config/development/performance."),
    '#required' => TRUE,
  );

  $enable_signing_value = variable_get('mediacorechooser_enable_signing', 0);
  $form['mediacorechooser_enable_signing'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable URL Signing'),
    '#default_value' => $enable_signing_value,
    '#description' => t("Check this box if you'd like to enable URL signing for your MediaCore embeds. <br />You must have a Key ID and Secret key set before enabling URL signing. <br />Contact support@mediacore.com to inquire about embedding private videos with signed URLS."),
  );

  $form['mediacorechooser_key_id'] = array(
    '#type' => 'textfield',
    '#title' => t('URL Signing Key ID'),
    '#default_value' => variable_get('mediacorechooser_key_id'),
    '#size' => 40,
    '#maxlength' => 11,
    '#description' => t("Please enter an 11 character Base64 Key ID."),
    '#required' => FALSE,
  );

  $form['mediacorechooser_secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('URL Signing Secret Key'),
    '#default_value' => variable_get('mediacorechooser_secret_key'),
    '#size' => 40,
    '#maxlength' => 300,
    '#description' => t("Please enter a Base64 encoded secret key <br />(the original key before encoding will be 32 or 128 characters long)."),
    '#required' => FALSE,
  );

  return system_settings_form($form);
}


/**
 * Admin validation
 */
function mediacorechooser_admin_validate($form, &$form_state) {
  $form_values = $form_state['values'];

  $url = $form_values['mediacorechooser_url'];
  $enable_signing = $form_values['mediacorechooser_enable_signing'];
  $key_id = $form_values['mediacorechooser_key_id'];
  $secret_key = $form_values['mediacorechooser_secret_key'];
  $secret_key_decoded = base64_decode($secret_key);

  // validate the url
  $uri = new \MediaCore\Uri($url);
  if (!$uri->isValid()) {
    form_set_error('mediacorechooser_url', t('Your MediaCore URL is not valid'));
  }
  // key_id and secret_key need to be valid base64 strings. secret key needs to be 64 or 128 char and key_id is 11 char
  if ($enable_signing && (empty($key_id) || empty($secret_key))) {
    form_set_error('mediacorechooser_enable_signing', t('You must set a Key ID and Secret Key before enabling URL signing'));
  }
  if (!empty($key_id) && strlen($key_id) != 11) {
    form_set_error('mediacorechooser_key_id', t('Your Key ID must be 11 characters long.'));
  }
  if (!empty($secret_key) && (strlen($secret_key_decoded) != 32 && strlen($secret_key_decoded) != 128)) {
    form_set_error('mediacorechooser_secret_key', t('Your Base64 decoded secret key must be 32 or 128 characters long. The base64 decoded key you entered is ' . strlen($secret_key_decoded) . ' characters long.'));
  }
}


/**
 * Implementation of hook_permission().
 */
function mediacorechooser_permission() {
  return array('administer mediacorechooser' => array(
    'title' => t('administer mediacorechooser'),
    'description' => t('Choose media sources and other mediacore settings using the admin interface.'),
  ));
}


/**
 * WYSIWYG plugin
 */
function mediacorechooser_wysiwyg_plugin($editor, $version) {

  $url = variable_get('mediacorechooser_url');
  $client = new \MediaCore\Http\Client($url);
  $chooser_js_url = $client->getUrl('api','chooser.js');


  $plugin_version = mediacorechooser_get_plugin_version();
  $query_str = $client->getQuery(array(
    'custom_plugin_info'=>$plugin_version
  ));
  $chooser_url = $client->getUrl('chooser') . '?' . $query_str;

  switch (strtolower($editor)) {
    case 'tinymce':
      $plugins['mediacorechooser'] = array(
        'path' => drupal_get_path('module', 'mediacorechooser') . '/editors/tinymce',
        'filename' => 'editor_plugin.js',
        'buttons' => array('mediacorechooser' => t('MediaCore Chooser')),
        'url' => 'http://mediacore.com/plugins/',
        'load' => TRUE,
        'options' => array(
          'mediacore_chooser_js_url' => $chooser_js_url,
          'mediacore_chooser_url' => $chooser_url,
        )
      );
      break;
    case 'ckeditor':
      $plugins['mediacorechooser'] = array(
        'path' => drupal_get_path('module', 'mediacorechooser') . '/editors/ckeditor',
        'filename' => 'plugin.js',
        'buttons' => array('mediacorechooser' => t('MediaCore Chooser')),
        'url' => 'http://mediacore.com/plugins/',
        'load' => TRUE,
        'options' => array(
          'mediacore_chooser_js_url' => $chooser_js_url,
          'mediacore_chooser_url' => $chooser_url,
        )
      );
      break;
  }

  return $plugins;
}


/**
 * Implementation of hook_filter_info().
 */
function mediacorechooser_filter_info() {

  cache_clear_all('*', 'cache_filter', TRUE);
  cache_clear_all('*', 'cache_field', TRUE);

  $filters['filter_html'] = array(
    'title' => t('MediaCore Filter'),
    'description' => t('Substitutes [mediacore:URL] with HTML5 video player.'),
    'process callback' => '_mediacorechooser_process',
    'tips callback'  => '_mediacorechooser_tips',
    'cache' => FALSE,
  );
  return $filters;
}


/**
 * Implementation of hook_filter_tips().
 */
function _mediacorechooser_tips($delta, $format, $long = FALSE) {
  if ($long) {
    return t('<p>You may insert videos from MediaCore sites by using a simple tag <code>[mediacore:URL]</code>.</p>');
  }
  else {
    return t('You may insert MediaCore videos with [mediacore:URL]');
  }
}


/**
 * Filter
 * Find mediacore: shortcodes and replace them with embed iframes
 *
 * @param string $text
 * @param string $filter
 * @param string $format
 * @param string $langcode
 * @param string $cache
 * @param string $cache_id
 * @return string
 */
function _mediacorechooser_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  if (preg_match_all('/\[mediacore(\:(.+))?( .+)?\]/isU', $text, $matches_code)) {

    foreach ($matches_code[0] as $ci => $code) {

      $video = array(
        'source' => $matches_code[2][$ci], 'width' => '560', 'height' => '315'
      );

      if ($matches_code[3][$ci] &&
          preg_match_all('/\s+([a-zA-Z_]+)\:(\s+)?([0-9a-zA-Z\/]+)/i', $matches_code[3][$ci], $matches_attributes)) {
        foreach ($matches_attributes[0] AS $ai => $attribute) {
          $video[$matches_attributes[1][$ai]] = $matches_attributes[3][$ai];
        }
      }

      $url = $video['source'] . '/embed_player';
      $query_str = 'iframe=True'; //default

      // do URL signing if config vars exist
      $signing_config_params = mediacorechooser_get_signing_params();
      if (!empty($signing_config_params)) {
        $key_id = $signing_config_params['key_id'];
        $secret_key = $signing_config_params['secret_key'];
        $query_str = mcore_get_signed_qs($url, 'iframe=True', $key_id, $secret_key, $ttl=60);
      }
      $url .= '?' . $query_str;

      // build the iframe html
      $template = '<iframe src="URL"
        width="WIDTH"
        height="HEIGHT"
        frameborder="0"
        allowfullscreen="allowfullscreen"
        mozallowfullscreen="mozallowfullscreen"
        webkitallowfullscreen="webkitallowfullscreen">
        </iframe>';
      $patterns = array('/URL/', '/WIDTH/', '/HEIGHT/');
      $replace = array($url, $video['width'], $video['height']);
      $iframe_html = preg_replace($patterns, $replace, $template);

      // replace the shortcode with the iframe html
      $text = str_replace($code, $iframe_html, $text);
    }
  }
  return $text;
}


/**
 * Helper to determine whether signing is enabled
 * @return array
 */
function mediacorechooser_get_signing_params() {

  $enable_signing = variable_get('mediacorechooser_enable_signing', NULL);
  $key_id = variable_get('mediacorechooser_key_id', NULL);
  $secret_key = variable_get('mediacorechooser_secret_key', NULL);

  if (!empty($enable_signing) && !empty($key_id) && !empty($secret_key)) {
    return array(
      'key_id' => $key_id,
      'secret_key' => $secret_key,
    );
  }
  return array();
}


/**
 * Get the plugin version
 * The Drupal.org packaging script adds a version number
 * automatically.
 * NOTE: In developement this value will be '' (empty string)
 *
 * @return string
 */
function mediacorechooser_get_plugin_version() {
  $info = system_get_info('module', 'mediacorechooser');
  $version = 'mediacore-drupal-chooser-';
  if (array_key_exists('version', $info) && isset($info['version'])) {
    $version .= $info['version'];
  }
  return $version;
}
