<?php

/**
 * @file
 * Module file for rankingalive module.
 */

// Remove tracking from all administrative pages - http://drupal.org/node/34970.
define('RANKINGALIVE_PAGES', "admin\nadmin/*\nbatch\nnode/add*\nnode/*/*\nuser/*/*");

/**
 * Implements hook_menu().
 */
function rankingalive_menu() {
  $items['admin/config/system/rankingalive'] = array(
    'title' => 'Ranking Alive',
    'description' => 'Configure the tracking settings for Ranking Alive.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rankingalive_admin_settings_form'),
    'access arguments' => array('administer rankingalive'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'rankingalive.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function rankingalive_help($path, $arg) {
  switch ($path) {
    case 'admin/config/system/rankingalive':
      return t('This module helps integrate <a href="@rankingalive">Ranking Alive</a> real time ranking with Drupal, allowing administrators to begin tracking site usage by populating the Ranking Alive ID field', array('@rankingalive' => 'http://www.rankingalive.com/'));
  }
}

/**
 * Implements hook_permission().
 */
function rankingalive_permission() {
  return array(
    'administer rankingalive' => array(
      'title' => t('Administer Ranking Alive Analytics'),
      'description' => t('Configure settings for Ranking Alive.'),
    ),
    'use PHP for rankingalive tracking visibility' => array(
      'title' => t('Use PHP for Ranking Alive tracking visibility'),
      'description' => t('Enter PHP code in the field for tracking visibility settings.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_page_alter().
 */
function rankingalive_page_alter(&$page) {
  $id = variable_get('rankingalive_id', '');

  // Get page status code for visibility filtering.
  $status = drupal_get_http_header('Status');
  $trackable_status_codes = array(
    '403 Forbidden',
    '404 Not Found',
  );

  // Check if the Ranking Alive account number has a value.
  // if the page deserve to have the tracking code
  // Or if the status code of the page is trackable.
  if (!empty($id) && (_rankingalive_visibility_pages() || in_array($status, $trackable_status_codes))) {
    // Get the script scope.
    $scope = variable_get('rankingalive_js_scope', 'footer');

    // Inject the script.
    drupal_add_js(array('rankingalive' => array('id' => $id)), 'setting');
    drupal_add_js(drupal_get_path('module', 'rankingalive') . '/rankingalive.js', array('scope' => $scope));
  }
}

/**
 * Detect if the tracking script should be injected on this page or not.
 *
 * Based on visibility setting this function returns TRUE if rankingalive code
 * should be added to the current page and otherwise FALSE.
 */
function _rankingalive_visibility_pages() {
  $page_match = &drupal_static(__FUNCTION__);

  // Cache visibility setting in hook_init for hook_footer.
  if (!isset($page_match)) {

    $visibility = variable_get('rankingalive_visibility_pages', 0);
    $setting_pages = variable_get('rankingalive_pages', '');

    // Match path if necessary.
    if (!empty($setting_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = drupal_strtolower($setting_pages);
      if ($visibility < 2) {
        // Convert the Drupal path to lowercase.
        $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
        // Compare the lowercase internal and lowercase path alias (if any).
        $page_match = drupal_match_path($path, $pages);
        if ($path != $_GET['q']) {
          $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
        }
        // When $visibility has a value of 0, the tracking code is displayed on
        // all pages except those listed in $pages. When set to 1, it
        // is displayed only on those pages listed in $pages.
        $page_match = !($visibility xor $page_match);
      }
      elseif (module_exists('php')) {
        $page_match = php_eval($setting_pages);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }

  }
  return $page_match;
}
