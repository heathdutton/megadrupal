<?php
/** @file
 * .module file containing all functional code.
 */
 
/**
 * Implements hook_domain_bootstrap_lookup().
 *
 * Performs the subdomain lookup check on early boot level and redirects if necessary.
 */
function domain_default_redirect_domain_bootstrap_lookup($domain) {
  if (!domain_default_redirect_lookup_exists($_SERVER['HTTP_HOST'])) {
    // Variables are already available. Yay!
    $url = variable_get('domain_default_redirect_url');
    // Only initiate the redirect if an URL has been set
    if(!empty($url)) {
      // Make URL header-ready
      $url = (strpos($url, 'http') === 0 ? $url : ('http://' . $url));
      // Redirect using headers because drupal_goto isn't available yet
      header("Location: " . $url);
      // Prevent further Drupal processing
      exit();
    }
  }
}

/**
 * Compares the subdomain against existing ACTIVE domains.
 *
 * @param $subdomain
 *   Domain string to check
 *
 * @return bool
 *   TRUE if active subdomain; FALSE if inactive or not set.
 */
function domain_default_redirect_lookup_exists($subdomain) {
  // If www should be treated as alias, strip it.
  if (variable_get('domain_www', 0) && strpos($subdomain, 'www.') !== FALSE) {
    $subdomain = str_replace('www.', '', $subdomain);
  }

  $count = db_query("SELECT COUNT(domain_id) FROM {domain} WHERE subdomain = :subdomain AND valid = 1", array(':subdomain' => $subdomain))->fetchField();

  // If failed, then we still might have a chance if the Domain Alias module is enabled.
  // We cannot rely on module_exists() because domain_alias isn't bootstrapped yet.
  if (empty($count) && function_exists('domain_alias_lookup') && is_array(domain_alias_lookup($subdomain))) {
    $count = 1;
  }
  
  return !empty($count);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds the redirection URL field to the global Domain settings form.
 */
function domain_default_redirect_form_domain_configure_form_alter(&$form, &$form_state, $form_id) {
  $form['domain_default_redirect_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL to redirect to upon requesting a non-existent subdomain'),
    '#description' => t('If not empty, requesting subdomains that are not set in the Domain Access suite will result in a redirect to the specified URL. This is particularly useful in cases when a wildcard DNS subdomain has been set in conjuction with Domain Access.'),
    '#default_value' => variable_get('domain_default_redirect_url', ''),
    '#required' => FALSE,
    '#weight' => -50,
  );
}