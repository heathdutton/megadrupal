<?php

/**
 * @file
 * Integrates the Adverticum AdServer with Drupal.
 */

/**
 * Implements hook_menu().
 */
function adverticum_menu() {
  $items['admin/config/adverticum'] = array(
    'title' => 'Adverticum management',
    'description' => 'Manage Adverticum advertisements on your site.',
    'position' => 'left',
    'weight' => -10,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
  );
  $items['admin/config/adverticum/settings'] = array(
    'title' => 'Adverticum settings',
    'description' => 'Configure Adverticum AdServer integration behavior and appearance.',
    'file' => 'adverticum.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('adverticum_admin_settings'),
    'access arguments' => array('administer adverticum settings'),
  );
  return $items;
}

/**
 * Implements hook_help().
 */
function adverticum_help($path, $arg) {
  switch ($path) {
    case 'admin/help#adverticum':
      return '<p>' . t('The Adverticum module allows you to integrate Drupal with the Adverticum adserver.
        The configured Adverticum ad zones can be shown anywhere in a theme directly using a function call 
        or via blocks which are automatically created for each ad zone. Additional information regarding 
        Adverticum can be found at the <a href="@adverticum">Adverticum website</a>.',
        array('@adverticum' => url('http://www.adverticum.com'))) . '</p>';
  }
}

/**
 * Implements hook_theme().
 */
function adverticum_theme() {
  return array(
    'adverticum_admin_settings_zones' => array(
      'file' => 'adverticum.theme.inc',
      'render element' => 'form',
    ),
    'adverticum_tag' => array(
      'variables' => array('zid' => NULL, 'tag' => NULL),
      'template' => 'adverticum-tag',
      'file' => 'adverticum.theme.inc',
    ),
  );
}

/**
 * Implements hook_permission(),
 */
function adverticum_permission() {
  $perms = array(
    'administer adverticum settings' => array(
      'title' => t('Administer Adverticum'), 
      'description' => t('Perform administration tasks for Adverticum.'),
    ),
    'view all zones' => array(
      'title' => t('View all zones'), 
      'description' => t('View ads in all zones.'),
    ),
  );

  $zones = variable_get('adverticum_zones', array());
  foreach ($zones as $zone) {
    if (!empty($zone['id'])) {
      if (empty($zone['name'])) {
        $perms['view zone ' . $zone['id']] = array(
          'title' => t('View zone !id', array('!id' => $zone['id'])), 
          'description' => t('View ads in zone !id.', array('!id' => $zone['id']))
        );
      }
      else {
        $perms['view zone ' . strtolower($zone['name'])] = array(
          'title' => t('View zone !name', array('!name' => $zone['name'])), 
          'description' => t('View ads in zone !name.', array('!name' => $zone['name']))
        );
      }
    }
  }

  return $perms;
}

/**
 * Implements hook_filter_info(),
 */
function adverticum_filter_info() {
  $filters['filter_zone'] = array(
    'title' => t('Zone filter'),
    'description' => t('Allows users to insert ad zones in any content. <strong>Make sure that this filter gets executed last!</strong>'),
    'process callback' => '_adverticum_filter_zone',
    'tips callback'  => '_adverticum_filter_zone_tips',
    'cache' => TRUE,
  );
  return $filters;
}

/**
 * Filter callbacks.
 */
function _adverticum_filter_zone($text, $filter, $format) {
  if (preg_match_all('@(?:<p>)?\[(adverticum)\s*(.*?)\](?:</p>)?@s', $text, $match)) {
    foreach ($match[2] as $key => $string) {
      preg_match_all('/(\w*)=(?:\"|&quot;)(.*?)(?:\"|&quot;)/', $string, $vars[$key]);
      foreach ($vars[$key][1] as $varkey => $varname) {
        $params[$varname] = $vars[$key][2][$varkey];
      }
      return str_replace($match[0][$key], adverticum($params['id']), $text);
    }
  }
  return $text;
}

function _adverticum_filter_zone_tips($filter, $format, $long = FALSE) {
  if ($long) {
    return t('
    <p>The basic syntax for inserting an ad zone is: <code>[adverticum id="ZONEID"]</code>.
    If you are using other filters, make sure the zone filter is executed last. Later if you change
    the invocation code type for an embedded zone, don\'t forget to clear the cache.</p>');
  }
  else {
    return t('You may use [adverticum id="ZONEID"] to insert ad zone.');
  }
}

/**
 * Implements hook_block_info().
 */
function adverticum_block_info() {
  $blocks = array();

  $zones = variable_get('adverticum_zones', array());
  foreach ($zones as $index => $zone) {
    if ($zone['id']) {
      $blocks['adverticum_zone_' . $index] = array(
        'info'    => t('Adverticum Zone !id (!name)', array('!id' => $zone['id'], '!name' => (empty($zone['name']) ? t('untitled') : $zone['name']))),
        'weight'  => 0,
        'status'  => 0,
        'cache'   => DRUPAL_NO_CACHE,
      );
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function adverticum_block_view($delta = '') {
  $block = array();
  if (strpos($delta, 'adverticum_zone_') !== FALSE) {
    $index = drupal_substr($delta, strrpos($delta, '_')+1);
    $block['content'] = adverticum($index);
  }
  return $block;
}

/**
 * Implements hook_page_build().
 */
function adverticum_page_build(&$page) {
  $zones = variable_get('adverticum_zones', array());
  $global_tag = variable_get('adverticum_tag_global', 'none');

  $inject = FALSE;
  if ($global_tag == 'goa3') {
    $inject = TRUE;
  }
  elseif ($global_tag == 'none') {
    foreach ($zones as $zone) {
      if ($zone['tag'] == 'goa3') {
        $inject = TRUE;
        break;
      }
    }
  }

  if ($inject) {
    $page['page_bottom']['adverticum'] = array(
      '#type' => 'markup',
      '#markup' => '<script type="text/javascript" charset="utf-8" src="//ad.adverticum.net/g3.js"></script>',
    );
  }
}

/**
 * Helper function to determine if the page is in HTTPS mode.
 */
function _adverticum_use_https() {
  if (isset($_SERVER['HTTPS']) && !empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') {
    return TRUE;
  }
  elseif ($_SERVER['SERVER_PORT'] == 443) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Get a specific zone.
 * 
 * @param $key
 *   Either the delta of the block or the unique ID or the name of the zone.
 *
 * @return
 *   The zone if found, FALSE otherwise.
 * 
 */
function _adverticum_get_zone($key) {
  $zones = variable_get('adverticum_zones', array());
  if (isset($zones[$key])) {
    return $zones[$key];
  }
  else {
    foreach ($zones as $zone) {
      if ($zone['id'] == $key || $zone['name'] == $key) {
        return $zone;
      }
    }
  }

  // There is no zone with such key.
  return FALSE;
}

/**
 * Builds the call to Adverticum.
 */
function adverticum($key) {
  $zone = _adverticum_get_zone($key);
  $global_tag = variable_get('adverticum_tag_global', 'none');

  if (!empty($zone['id']) && $zone['active']) {
    $zid = $zone['id'];
    $tag = ($global_tag == 'none') ? $zone['tag'] : $global_tag;

    if (user_access('view all zones') ||
        user_access('view zone ' . strtolower($zone['name'])) ||
        user_access('view zone ' . $zone['id'])) {
      $adverticum_tag = theme('adverticum_tag', array('zid' => $zid, 'tag' => $tag));
      if (_adverticum_use_https() && stristr($adverticum_tag, 'http://')) {
        $adverticum_tag = str_ireplace('http://', 'https://', $adverticum_tag);
      }
      return $adverticum_tag;
    }
  }

  return '';
}
