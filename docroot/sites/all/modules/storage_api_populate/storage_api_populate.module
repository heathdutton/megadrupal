<?php

/**
 * @file
 * Defines functions for Storage API Populate (storage_api_populate).
 */

/**
 * Implements hook_menu().
 */
function storage_api_populate_menu() {
  $items['admin/structure/storage/list'] = array(
    'title' => "File storage",
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );

  $items['admin/structure/storage/populate'] = array(
    'title' => "Populate Storage",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('storage_populate_form'),
    'access arguments' => array('administer storage'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  return $items;
}

/**
 * Form builder for admin/structure/storage/populate.
 */
function storage_populate_form() {
  $submittable = FALSE;

  // Global migration.
  if (module_exists('storage_stream_wrapper')) {
    $form['global'] = array(
      '#type' => 'fieldset',
      '#title' => t('Global migration'),
      '#collapsible' => TRUE,
      '#tree' => TRUE,
      '#description' => t('Migrate all local files to the site\'s default stream wrapper, configured at <a href="@url">@url</a> (under "Default download method").', array('@url' => url('admin/config/media/file-system'))),
    );

    $default_scheme = file_default_scheme();
    $wrappers = storage_stream_wrapper_stream_wrappers();
    if (!in_array($default_scheme, array_keys($wrappers))) {
      $form['global']['advice'] = array(
        '#type' => 'item',
        '#description' => t('Nothing to do here. You may want to configure one of <a href="@url">Storage API stream wrappers</a> as the site\'s default stream wrapper.', array('@url' => url('admin/structure/storage/stream-wrappers'))),
      );
    }
    else {
      $submittable = TRUE;
      $wrapper = $wrappers[$default_scheme]['name'];
      $vars['@wrapper'] = $wrapper;
      $vars['@wrapper_url'] = url('admin/structure/storage/stream-wrappers/' . $default_scheme . '/edit');
      $form['global']['proceed'] = array(
        '#title' => t('Migrate all local files to <a href="@url">@wrapper</a> stream wrapper', $vars),
        '#type' => 'checkbox',
      );
    }
  }

  // Per field migration.
  //$options['core_bridge'] = t('Migrate to !option', array('!option' => 'Storage API Core Bridge'));
  $form['fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Per field migration'),
    '#collapsible' => TRUE,
    '#tree' => TRUE,
    '#states' => array(
      'enabled' => array(
        ':input[name="global[proceed]"]' => array('checked' => FALSE),
      ),
    ),
  );
  $fields = storage_populate_get_eligible_fields();
  if (empty($fields)) {
    $form['fields']['#description'] = t('No field is configured to use any of Storage API stream wrappers');
  }
  else {
    $submittable = TRUE;
    foreach ($fields as $field_name => $field_info) {
      $scheme = $field_info['settings']['uri_scheme'];
      if ((strpos($scheme, 'storage-field-') === 0) && module_exists('storage_core_bridge')) {
        $destination = 'Storage API core bridge';
      }
      elseif ((strpos($scheme, 'storage-api-') === 0) && (module_exists('storage_stream_wrapper'))) {
        $destination = storage_stream_wrapper_stream_wrappers()[$scheme]['name'];
      }
      $form['fields'][$field_name] = array(
        '#title' => $field_name,
        '#type' => 'select',
        '#options' => array(
          0 => t('Do nothing'),
          1 => t('Move files to !dest', array('!dest' => $destination)),
        ),
      );
    }
  }

  if ($submittable) {
    $form['confirm'] = array(
      '#type' => 'checkbox',
      '#title' => t('<strong>Confirm</strong> process of moving files into Storage API'),
      '#description' => t('This process is irreversible. You\'re warned to test it in a sandbox environment first. Also, make a backup before proceeding.'),
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Start'),
      '#states' => array(
        'enabled' => array(
          ':input[name="confirm"]' => array('checked' => TRUE),
        ),
      ),
    );
  }
  else {
    $form['advice'] = array(
      '#markup' => t('No integration modules enabled. You want to enable and configure <a href="@url1">Storage API stream wrapper</a> or <a href="@url2">Storage API\'s</a> core_bridge submodule.', array('@url1' => 'https://drupal.org/project/storage_api_stream_wrapper', '@url2' => 'https://drupal.org/project/storage_api')),
    );
  }

  return $form;
}

/**
 * Check that the confirm box has been checked and the user accepts the risk!
 */
function storage_populate_form_validate($form, &$form_state) {
  if (!$form_state['values']['confirm']) {
    form_set_error('confirm', t('You must check <strong>confirm</strong> to start the process.'));
  }
}

/**
 * Form submission callback. Declares a batch to process the files.
 */
function storage_populate_form_submit($form, &$form_state) {
  $ops = array();

  // Global migration.
  if (!empty($form_state['values']['global']['proceed'])) {
    $wrapper = file_default_scheme();
    $ops[] = array('StorageApiPopulateBatchOperationFilesStreamWrapper::op', array($wrapper));
  }
  else {
    $fields = storage_populate_get_eligible_fields();
    $selected = array_keys(array_filter($form_state['values']['fields']));
    foreach ($selected as $field_name) {
      $scheme = $fields[$field_name]['settings']['uri_scheme'];
      if (strpos($scheme, 'storage-api-') === 0) {
        $ops[] = array('StorageApiPupulateBatchOperationFieldStreamWrapper::op', array($field_name, $scheme));
      }
      else {
        $ops[] = array('StorageApiPupulateBatchOperationFieldCoreBridge::op', array($field_name));
      }
    }
  }

  // Configure a batch.
  $batch = array(
    'title' => t('Populating files to Storage.'),
    'operations' => $ops,
    'init_message' => t('Populate is starting.'),
    'progress_message' => t('Populate is running...'),
    'error_message' => t('Populate has encountered an error.'),
    'finished' => 'storage_populate_batch_finished',
  );
  batch_set($batch);
}

/**
 * Batch finished messages, if the processes succeded or failed.
 */
function storage_populate_batch_finished($success, $results, $ops) {
  if ($success) {
    drupal_set_message(t('@count files processed.', array('@count' => count($results['processed']))));
    $failed = count($results['failed']);
    if ($failed > 0) {
      drupal_set_message(t('@count files failed. See watchdog for details.', array('@count' => $failed)), 'warning');
    }
  }
  else {
    // An error occurred.
    // $ops contains the operations that remained unprocessed.
    $op = reset($ops);
    $vars = array(
      '%operation' => $op[0],
      '%args' => (count($op) > 1) ? var_export($op[1], TRUE) : '',
    );
    $message = t('An error occurred while processing %operation with arguments: %args', $vars);
    drupal_set_message($message, 'error');
  }
}

/**
 * Returns the info of fields eligible for population, indexed by field name.
 */
function storage_populate_get_eligible_fields() {
  $fields = array();

  $fields_info = _field_info_field_cache()->getFields();
  foreach ($fields_info as $field_info) {
    // We don't check field type so we can support any file based field type.
    // Instead we check the presence of uri scheme and fid column.
    if (!empty($field_info['columns']['fid']) && !empty($field_info['settings']['uri_scheme'])) {
      // Only add fields already configured to use storage api.
      if (strpos($field_info['settings']['uri_scheme'], 'storage-') === 0) {
        $fields[$field_info['field_name']] = $field_info;
      }
    }
  }

  return $fields;
}

