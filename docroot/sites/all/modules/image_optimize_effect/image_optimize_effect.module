<?php

/**
 * @file
 * Provides image optimize effects.
 */

/**
 * Implements hook_image_effect_info().
 */
function image_optimize_effect_image_effect_info() {
  $effects = array(
    'image_optimize_effect_pngquant' => array(
      'label' => t('pngquant'),
      'help' => t('Uses pngquant, see https://github.com/pornel/improved-pngquant or http://pngquant.org/'),
      'effect callback' => 'image_optimize_effect_pngquant',
      'form callback' => 'image_optimize_effect_pngquant_form',
      'dimensions passthrough' => TRUE,
    ),
    'image_optimize_effect_imgmin' => array(
      'label' => t('imgmin'),
      'help' => t('Uses imgmin see https://github.com/rflynn/imgmin'),
      'effect callback' => 'image_optimize_effect_imgmin',
      'dimensions passthrough' => TRUE,
    ),
  );
  return $effects;
}

/**
 * Image effect callback; Optimize using pngquant.
 *
 * @param $image
 *   An image object returned by image_load().
 *
 * @return
 *   TRUE on success. FALSE on failure.
 *
 */
function image_optimize_effect_pngquant($image, $data) {
  // Merge defaults
  $data += array(
    'speed' => 10,
  );

  $extension = str_replace('jpg', 'jpeg', $image->info['extension']);

  // Only works on png files.
  if ($extension != 'png') {
    return TRUE;
  }

  // Make a copy of the image and save it.
  $res = image_gd_create_tmp($image, $image->info['width'], $image->info['height']);
  $destination = drupal_tempnam('temporary://', 'gd_') . '.' . $extension;
  $destination = drupal_realpath($destination);
  $function = 'image' . $extension;
  if (!function_exists($function)) {
    return FALSE;
  }

  imagealphablending($image->resource, FALSE);
  imagesavealpha($image->resource, TRUE);
  $success = $function($image->resource, $destination);

  // Use Drupal's root as working directory to resolve relative paths correctly.
  $drupal_path = DRUPAL_ROOT;
  $pngquant_path = '';
  $convert_path = 'pngquant';
  $command_args = '--speed ' . $data['speed'] . ' --ext .png -f -v ' . $destination;

  if (strstr($_SERVER['SERVER_SOFTWARE'], 'Win32') || strstr($_SERVER['SERVER_SOFTWARE'], 'IIS')) {
    // Use Window's start command with the /B flag to make the process run in
    // the background and avoid a shell command line window from showing up.
    // @see http://us3.php.net/manual/en/function.exec.php#56599
    // Use /D to run the command from PHP's current working directory so the
    // file paths don't have to be absolute.
    $convert_path = 'start "pngquant" /D ' . escapeshellarg($drupal_path) . ' /B ' . escapeshellarg($pngquant_path);
  }
  $command = $convert_path . ' ' . $command_args;

  $descriptors = array(
    // stdin
    0 => array('pipe', 'r'),
    // stdout
    1 => array('pipe', 'w'),
    // stderr
    2 => array('pipe', 'w'),
  );
  if ($h = proc_open($command, $descriptors, $pipes, $drupal_path)) {
    $output = '';
    while (!feof($pipes[1])) {
      $output .= fgets($pipes[1]);
    }
    $error = '';
    while (!feof($pipes[2])) {
      $error .= fgets($pipes[2]);
    }

    fclose($pipes[0]);
    fclose($pipes[1]);
    fclose($pipes[2]);
    $return_code = proc_close($h);

    // If ImageMagick returned a non-zero code, trigger a PHP error that will
    // be caught by Drupal's error handler, logged to the watchdog and
    // eventually displayed to the user if configured to do so.
    if ($return_code != 0) {
      // If there is no error message, clarify this.
      if ($error === '') {
        $error = t('No error message.');
      }
      // Format $error with as full message, passed by reference.
      $error = t('ImageMagick error @code: !error', array(
        '@code' => $return_code,
        '!error' => $error,
      ));
      // @todo Use watchdog() instead? Would hide errors from users during
      //   normal operation, regeardless of error_level setting.
      trigger_error($error, E_USER_ERROR);
      // ImageMagick exited with an error code, return it.
      return $return_code;
    }
    // The shell command was executed successfully.

    imagedestroy($image->resource);
    $function = 'imagecreatefrom' . $extension;
    $image->resource = $function($destination);

    return TRUE;
  }
  // The shell command could not be executed.
  return FALSE;
}

/**
 * Form structure for pngquant.
 *
 * @param $data
 *   The current configuration for this effect.
 */
function image_optimize_effect_pngquant_form($data) {
  $form['speed'] = array(
    '#type' => 'select',
    '#options' => drupal_map_assoc(range(1, 10)),
    '#title' => t('Speed'),
    '#description' => t('Speed/quality trade-off from 1 (brute-force) to 10 (fastest). The default is 3. Speed 10 has 5% lower quality, but is 8 times faster than the default.'),
    '#default_value' => isset($data['speed']) ? $data['speed'] : 10,
  );
  return $form;
}

/**
 * Image effect callback; Optimize using imgmin.
 *
 * @param $image
 *   An image object returned by image_load().
 *
 * @return
 *   TRUE on success. FALSE on failure.
 *
 */
function image_optimize_effect_imgmin($image) {
  $extension = str_replace('jpg', 'jpeg', $image->info['extension']);;

  // Make a copy of the image and save it.
  $res = image_gd_create_tmp($image, $image->info['width'], $image->info['height']);
  $destination = drupal_tempnam('temporary://', 'gd_') . '.' . $extension;
  $destination = drupal_realpath($destination);
  $function = 'image' . $extension;
  if (!function_exists($function)) {
    return FALSE;
  }

  imagealphablending($image->resource, FALSE);
  imagesavealpha($image->resource, TRUE);
  $success = $function($image->resource, $destination);

  // Use Drupal's root as working directory to resolve relative paths correctly.
  $drupal_path = DRUPAL_ROOT;
  $pngquant_path = '';
  $convert_path = 'imgmin';
  $command_args = $destination . ' ' . $destination;

  if (strstr($_SERVER['SERVER_SOFTWARE'], 'Win32') || strstr($_SERVER['SERVER_SOFTWARE'], 'IIS')) {
    // Use Window's start command with the /B flag to make the process run in
    // the background and avoid a shell command line window from showing up.
    // @see http://us3.php.net/manual/en/function.exec.php#56599
    // Use /D to run the command from PHP's current working directory so the
    // file paths don't have to be absolute.
    $convert_path = 'start "imgmin" /D ' . escapeshellarg($drupal_path) . ' /B ' . escapeshellarg($pngquant_path);
  }
  $command = $convert_path . ' ' . $command_args;

  $descriptors = array(
    // stdin
    0 => array('pipe', 'r'),
    // stdout
    1 => array('pipe', 'w'),
    // stderr
    2 => array('pipe', 'w'),
  );
  if ($h = proc_open($command, $descriptors, $pipes, $drupal_path)) {
    $output = '';
    while (!feof($pipes[1])) {
      $output .= fgets($pipes[1]);
    }
    $error = '';
    while (!feof($pipes[2])) {
      $error .= fgets($pipes[2]);
    }

    fclose($pipes[0]);
    fclose($pipes[1]);
    fclose($pipes[2]);
    $return_code = proc_close($h);

    // If ImageMagick returned a non-zero code, trigger a PHP error that will
    // be caught by Drupal's error handler, logged to the watchdog and
    // eventually displayed to the user if configured to do so.
    if ($return_code != 0) {
      // If there is no error message, clarify this.
      if ($error === '') {
        $error = t('No error message.');
      }
      // Format $error with as full message, passed by reference.
      $error = t('ImageMagick error @code: !error', array(
        '@code' => $return_code,
        '!error' => $error,
      ));
      // @todo Use watchdog() instead? Would hide errors from users during
      //   normal operation, regeardless of error_level setting.
      trigger_error($error, E_USER_ERROR);
      // ImageMagick exited with an error code, return it.
      return $return_code;
    }
    // The shell command was executed successfully.

    imagedestroy($image->resource);
    $function = 'imagecreatefrom' . $extension;
    $image->resource = $function($destination);

    return TRUE;
  }
  // The shell command could not be executed.
  return FALSE;
}
