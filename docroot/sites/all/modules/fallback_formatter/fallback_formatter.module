<?php

/**
 * Implements hook_theme().
 */
function fallback_formatter_theme() {
  return array(
    'fallback_formatter_settings_order' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function fallback_formatter_field_formatter_info() {
  $info['fallback'] = array(
    'label' => t('Fallback'),
    'field types' => array(),
    'settings' => array(
      'formatters' => array(),
    ),
    'weight' => 100,
  );

  return $info;
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function fallback_formatter_field_formatter_info_alter(&$info) {
  $multiple_formatters = array(
    'file_table',
  );
  foreach ($multiple_formatters as $formatter) {
    if (isset($info[$formatter]) && !isset($info[$formatter]['behaviors']['multiple'])) {
      $info[$formatter]['behaviors']['multiple'] = FIELD_BEHAVIOR_CUSTOM;
    }
  }

  // Only enable the fallback formatter for field types that already have one
  // or more formatters.
  $field_types = array();
  foreach ($info as $index => $formatter) {
    if (isset($formatter['behaviors']['multiple']) && $formatter['behaviors']['multiple'] == FIELD_BEHAVIOR_CUSTOM) {
      continue;
    }
    $field_types = array_merge($field_types, $formatter['field types']);
  }
  $counts = array_count_values($field_types);
  foreach ($counts as $field_type => $count) {
    if ($count > 1) {
      $info['fallback']['field types'][] = $field_type;
    }
  }
}

/**
 * Implements field_formatter_settings_summary().
 */
function fallback_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];

  $settings = $display['settings'];
  $formatters = field_info_formatter_types();

  _fallback_formatter_prepare_formatters($field['type'], $settings['formatters']);

  $summary = array();
  foreach ($settings['formatters'] as $name => $formatter) {
    if (!isset($formatters[$name])) {
      $summary[] = '<strong>' . t('Unknown formatter %name.', array('%name' => $name)) . '</strong>';
    }
    elseif (!in_array($field['type'], $formatters[$name]['field types'])) {
      $summary[] = '<strong>' . t('Invalid formatter %name.', array('%name' => $formatters[$name]['label'])) . '</strong>';
    }
    else {
      $formatter_summary = check_plain($formatters[$name]['label']);

      $function = $formatter['module'] . '_field_formatter_settings_summary';
      if (function_exists($function)) {
        $formatter_instance = _fallback_formatter_create_instance($instance, $view_mode, $name, $settings['formatters']);
        $result = $function($field, $formatter_instance, $view_mode);
        if (!empty($result)) {
          $formatter_summary .= '<br><em>' . filter_xss($result) . '</em>';
        }
      }

      $summary[] = $formatter_summary;
    }
  }

  if (empty($summary)) {
    return '<strong>' . t('No formatters selected yet.') . '</strong>';
  }
  else {
    return theme('item_list', array('items' => $summary, 'type' => 'ol'));
  }
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function fallback_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $elements = array();
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $formatters = $settings['formatters'];
  _fallback_formatter_prepare_formatters($field['type'], $formatters, FALSE);

  $elements['#attached']['js'][] = drupal_get_path('module', 'fallback_formatter') . '/fallback_formatter.admin.js';

  $parents = array('fields', $field['field_name'], 'settings_edit_form', 'settings', 'formatters');

  // Filter status.
  $elements['formatters']['status'] = array(
    '#type' => 'item',
    '#title' => t('Enabled formatters'),
    '#prefix' => '<div class="fallback-formatter-status-wrapper">',
    '#suffix' => '</div>',
  );
  foreach ($formatters as $name => $options) {
    $elements['formatters']['status'][$name] = array(
      '#type' => 'checkbox',
      '#title' => $options['label'],
      '#default_value' => !empty($options['status']),
      '#parents' => array_merge($parents, array($name, 'status')),
      '#weight' => $options['weight'],
    );
  }

  // Filter order (tabledrag).
  $elements['formatters']['order'] = array(
    '#type' => 'item',
    '#title' => t('Formatter processing order'),
    '#theme' => 'fallback_formatter_settings_order',
  );
  foreach ($formatters as $name => $options) {
    $elements['formatters']['order'][$name]['label'] = array(
      '#markup' => $options['label'],
    );
    $elements['formatters']['order'][$name]['weight'] = array(
      '#type' => 'weight',
      '#title' => t('Weight for @title', array('@title' => $options['label'])),
      '#title_display' => 'invisible',
      '#delta' => 50,
      '#default_value' => $options['weight'],
      '#parents' => array_merge($parents, array($name, 'weight')),
    );
    $elements['formatters']['order'][$name]['#weight'] = $options['weight'];
  }

  // Filter settings.
  /*$elements['formatter_settings_title'] = array(
    '#type' => 'item',
    '#title' => t('Formatter settings'),
  );
  $elements['formatter_settings'] = array(
    '#type' => 'vertical_tabs',
  );*/

  foreach ($formatters as $name => $formatter) {
    $function = $formatter['module'] . '_field_formatter_settings_form';
    if (function_exists($function)) {
      // Create a clone of the current instance variable with settings swapped
      // out.
      $formatter_instance = _fallback_formatter_create_instance($instance, $view_mode, $name, $settings['formatters']);

      $settings_form = $function($field, $formatter_instance, $view_mode, $form, $form_state);
      if (!empty($settings_form)) {
        $elements['formatters']['settings'][$name] = array(
          '#type' => 'fieldset',
          '#title' => $formatter['label'],
          '#parents' => array_merge($parents, array($name, 'settings')),
          '#weight' => $formatter['weight'],
          '#group' => 'formatter_settings',
        );
        $elements['formatters']['settings'][$name] += $settings_form;
      }
    }

    $elements['formatters']['settings'][$name]['formatter'] = array(
      '#type' => 'value',
      '#value' => $name,
      '#parents' => array_merge($parents, array($name, 'formatter')),
    );
  }

  return $elements;
}

/**
 * Implemenst hook_field_formatter_view().
 */
function fallback_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  // Merge defaults from the formatters and ensure proper ordering.
  _fallback_formatter_prepare_formatters($field['type'], $settings['formatters']);

  // Loop through each formatter in order.
  foreach ($settings['formatters'] as $formatter) {
    $function = $formatter['module'] . '_field_formatter_view';
    if (function_exists($function)) {
      // Run any unrendered items through the formatter.
      $formatter_items = array_diff_key($items, $element);
      if ($result = $function($entity_type, $entity, $field, $instance, $langcode, $formatter_items, $formatter)) {

        // Only add visible content from the formatter's render array result
        // that matches an unseen delta.
        $visible_deltas = element_get_visible_children($result);
        $visible_deltas = array_intersect($visible_deltas, array_keys($formatter_items));
        $element += array_intersect_key($result, array_flip($visible_deltas));

        // If running this formatter completed the output for all items, then
        // there is no need to loop through the rest of the formatters.
        if (count($element) == count($items)) {
          break;
        }
      }
    }
  }

  // Ensure the resulting elements are ordered properly by delta.
  ksort($element);

  return $element;
}

function _fallback_formatter_create_instance(array $instance, $view_mode, $formatter_name, array $formatters) {
  $formatter = field_info_formatter_types($formatter_name);
  $clone = $instance;
  $clone['display'][$view_mode] = $formatter;
  $clone['display'][$view_mode]['type'] = $formatter_name;
  $clone['display'][$view_mode]['settings'] = isset($formatters[$formatter_name]['settings']) ? $formatters[$formatter_name]['settings'] : array();
  $clone['display'][$view_mode]['settings'] += $formatter['settings'];
  return $clone;
}

function fallback_formatter_get_possible_formatters($field_type) {
  $return = array();

  foreach (field_info_formatter_types() as $formatter => $info) {
    // The fallback formatter cannot be used as a fallback formatter.
    if ($formatter == 'fallback') {
      continue;
    }
    // Check that the field type is allowed for the formatter.
    elseif (!in_array($field_type, $info['field types'])) {
      continue;
    }
    // Formatters tagged as 'multiple' that render all items as one element
    // instead of one element per item delta will fail fallback detection.
    elseif (isset($info['behaviors']['multiple']) && $info['behaviors']['multiple'] == FIELD_BEHAVIOR_CUSTOM) {
      continue;
    }
    else {
      $return[$formatter] = $info;
    }
  }

  return $return;
}

function _fallback_formatter_prepare_formatters($field_type, array &$formatters, $filter_enabled = TRUE) {
  $default_weight = 0;

  $allowed_formatters = fallback_formatter_get_possible_formatters($field_type);
  $formatters += $allowed_formatters;

  $formatters = array_intersect_key($formatters, $allowed_formatters);

  foreach ($formatters as $formatter => $info) {
    // Remove disabled formatters.
    if ($filter_enabled && empty($info['status'])) {
      unset($formatters[$formatter]);
      continue;
    }

    // Provide some default values.
    $formatters[$formatter] += array('type' => $formatter, 'weight' => $default_weight++);
    // Merge in defaults and settigns from hook_field_formatter_info().
    $formatters[$formatter] += $allowed_formatters[$formatter];
    $formatters[$formatter]['settings'] += $allowed_formatters[$formatter]['settings'];
  }

  // Sort by weight.
  uasort($formatters, 'drupal_sort_weight');
}

function theme_fallback_formatter_settings_order($variables) {
  $element = $variables['element'];

  // Fallback formatter order (tabledrag).
  $rows = array();
  foreach (element_children($element, TRUE) as $name) {
    $element[$name]['weight']['#attributes']['class'][] = 'fallback-formatter-order-weight';
    $rows[] = array(
      'data' => array(
        drupal_render($element[$name]['label']),
        drupal_render($element[$name]['weight']),
      ),
      'class' => array('draggable'),
    );
  }
  $output = drupal_render_children($element);
  $output .= theme('table', array('rows' => $rows, 'attributes' => array('id' => 'fallback-formatter-order')));
  drupal_add_tabledrag('fallback-formatter-order', 'order', 'sibling', 'fallback-formatter-order-weight', NULL, NULL, TRUE);

  return $output;
}
