<?php

define('PRIVATECOMMENTS', 0);
define('PRIVATECOMMENTS_REPLY_LINK', 0);
define('PRIVATECOMMENTS_FORM_BELLOW_TREAD', 0);

define('PRIVATECOMMENTS_SEND_EMAIL', 0);
define('PRIVATECOMMENTS_SUBJECT_DEFAULT', t('You have a new message at [site:name]'));
define('PRIVATECOMMENTS_BODY_DEFAULT',
'Hi [user:name],

[comment:author] has commented on: "[node:title]"

----
[comment:title]
[comment:body]
----

You can view the comment at the following url
[comment:url]

-- [site:name] team
[site:url]');


/**
 * Implementation of hook_node_view().
 */
function privatecomments_node_view($node, $view_mode) {
  // Only add to full node views for users without 'administer comments'
//  if ($node->comment && $view_mode == 'full' && node_is_page($node) && empty($node->in_preview)) {
    global $user;

    if (variable_get('privatecomments_' . $node->type, PRIVATECOMMENTS) && !user_access('privatecomments ' . $node->type . ' view all')) {
      // Adapted from comment_node_page_additions().
      $additions = array();
      $mode = variable_get('comment_default_mode_' . $node->type, COMMENT_MODE_THREADED);
      $comments_per_page = variable_get('comment_default_per_page_' . $node->type, 50);

      // Adapted from comment_get_thread()
      $query = db_select('comment', 'c')->extend('PagerDefault');
      $query->addField('c', 'cid');
      $query
        ->condition('c.nid', $node->nid)
        ->addTag('node_access')
        ->addTag('comment_filter')
        ->addMetaData('node', $node)
        ->limit($comments_per_page);

      $count_query = db_select('comment', 'c');
      $count_query->addExpression('COUNT(*)');
      $count_query
        ->condition('c.nid', $node->nid)
        ->addTag('node_access')
        ->addTag('comment_filter')
        ->addMetaData('node', $node);

      if($user->uid != $node->uid) {
        // every commentator in a separate thread
        $query->where('SUBSTRING(c.thread, 1, 2) IN (SELECT SUBSTRING(ct.thread, 1, 2) AS trds FROM {comment} ct WHERE (ct.pid = 0) AND (ct.nid = :nid) AND (ct.uid = :uid))', array(':nid' => $node->nid, ':uid' => $user->uid));
        $count_query->where('SUBSTRING(c.thread, 1, 2) IN (SELECT SUBSTRING(ct.thread, 1, 2) AS trds FROM {comment} ct WHERE (ct.pid = 0) AND (ct.nid = :nid) AND (ct.uid = :uid))', array(':nid' => $node->nid, ':uid' => $user->uid));
      }

      if ($mode === COMMENT_MODE_FLAT) {
        $query->orderBy('c.cid', 'ASC');
      }
      else {
        // See comment above. Analysis reveals that this doesn't cost too
        // much. It scales much much better than having the whole comment
        // structure.
        $query->addExpression('SUBSTRING(c.thread, 1, (LENGTH(c.thread) - 1))', 'torder');
        $query->orderBy('torder', 'ASC');
      }

      $query->setCountQuery($count_query);
      $cids = $query->execute()->fetchCol();

      // Back to comment_node_page_additions()
      if ($cids) {
        $comments = comment_load_multiple($cids);
        comment_prepare_thread($comments);
        $build = comment_view_multiple($comments, $node);
        if (variable_get('comment_form_location_' . $node->type, COMMENT_FORM_BELOW) == COMMENT_FORM_BELOW) {
          if (variable_get('privatecomments_form_bellow_tread_' . $node->type, PRIVATECOMMENTS_FORM_BELLOW_TREAD)) {
            privatecomments_add_form_after_tread($build); // add the form after the thread
          }
          else {
            $form = drupal_get_form("comment_node_{$node->type}_form", (object) array('nid' => $node->nid));
            $additions['comment_form'] = $form;
          }
        }
        $additions['comments'] = $build;
      }
      if ($additions) {
        $additions += array(
          '#theme' => 'comment_wrapper__node_' . $node->type,
          '#node' => $node,
          'comments' => array(),
          'comment_form' => array(),
        );
      }

      // allow other modules change access to a comment adding form
      $comment_add_access = TRUE;
      $comment_add_accesses = module_invoke_all('privatecomments_add_access', $node->nid);
      foreach ($comment_add_accesses as $access) {
        $comment_add_access = $comment_add_access && $access;
      }

      if (variable_get('comment_form_location_' . $node->type, COMMENT_FORM_BELOW) == COMMENT_FORM_BELOW) {
        // comment adding form
        if($user->uid && !$cids && ($user->uid != $node->uid) && $comment_add_access) {
          $build = drupal_get_form("comment_node_{$node->type}_form", (object) array('nid' => $node->nid));
          $additions['comment_form'] = $build;
        }
      }

      $node->content['comments'] = $additions;
//    }
    }
}

/**
 * Helper function for adding the form to the end of every thread
 * @param  $build
 */
function privatecomments_add_form_after_tread(&$build) {
  reset($build);
  while (list($key, $build_row) = each($build)) { // Returns the key and value of the current element as an array and moves the iterator to the next element in the array
    if($key != '#sorted') {
      $build_row_next = current($build); // the next element in the array

      if($build_row_next) {
        if(substr($build_row['#comment']->thread, 0, 2) != substr($build_row_next['#comment']->thread, 0, 2)) {
          $build[$key]['comment_add_form'] = drupal_get_form("comment_node_{$build_row['#node']->type}_form", (object) array('nid' => $build_row['#node']->nid . '/' . $build_row['#comment']->cid)); // small hack - in nid we add nid and cid
        }
      }
      else {
        $build[$key]['comment_add_form'] = drupal_get_form("comment_node_{$build_row['#node']->type}_form", (object) array('nid' => $build_row['#node']->nid . '/' . $build_row['#comment']->cid));
      }
    }
  }
}

/**
* Implementation of hook_form_alter()
*/
function privatecomments_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'node_type_form') {
    $form['privatecomments'] = array(
      '#type'           => 'fieldset',
      '#title'          => t('Private comments'),
      '#description'    => t('Setting using Private comments for this content.'),
      '#weight'         => 20,
      '#collapsible'    => TRUE,
      '#collapsed'      => variable_get('privatecomments_' . $form['#node_type']->type, PRIVATECOMMENTS) ? FALSE : TRUE,
      '#group'          => 'additional_settings', // put it in the menu settings
    );
    $form['privatecomments']['privatecomments'] = array(
      '#type'           => 'checkbox',
      '#title'          => t('Private comments'),
      '#default_value'  => variable_get('privatecomments_' . $form['#node_type']->type, PRIVATECOMMENTS),
      '#description'    => t('Enable using private comments for this content.'),
    );
    $form['privatecomments']['privatecomments_reply_link'] = array(
      '#type'           => 'checkbox',
      '#title'          => t('Hide a comment reply link'),
      '#default_value'  => variable_get('privatecomments_reply_link_' . $form['#node_type']->type, PRIVATECOMMENTS_REPLY_LINK),
      '#description'    => t('Enable to hide a comment reply link.'),
    );
    $form['privatecomments']['privatecomments_form_bellow_tread'] = array(
      '#type'           => 'checkbox',
      '#title'          => t('Show a reply form after every thread'),
      '#default_value'  => variable_get('privatecomments_form_bellow_tread_' . $form['#node_type']->type, PRIVATECOMMENTS_FORM_BELLOW_TREAD),
      '#description'    => t('An option "Show reply form on the same page as comments" in "Comment settings" must be enabled.'),
    );
  }
  elseif(isset($form['#node']) && $form_id == "comment_node_" . $form['#node']->type . "_form" && variable_get('privatecomments_' . $form['#node']->type, PRIVATECOMMENTS)) {
    unset($form['actions']['preview']);
    $form['author']['#type'] = 'hidden';
  }

}

/**
 * Implements hook_views_api().
 */
function privatecomments_views_api() {

  return array(
    'api' => '3.0-alpha1',
    'path' => drupal_get_path('module', 'privatecomments') . '/views',
  );
}

// *************************************

/**
 * Form to modify default values for emails to users during comments posted
 *
 * @return
 *   system_settings_form
 */
function privatecomments_settings_form() {

  $form["privatecomments_send_email"] = array(
    '#type' => 'checkbox',
    '#title' => t('Send an email when comment is posted'),
    '#default_value' => variable_get('privatecomments_send_email', TRUE),
  );
  $form['privatecomments_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('privatecomments_subject', PRIVATECOMMENTS_SUBJECT_DEFAULT),
    '#size' => 72,
    '#maxlength' => 200,
    '#token_types' => array('user'),
   );
  $form['privatecomments_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Body'),
    '#default_value' => variable_get('privatecomments_body', PRIVATECOMMENTS_BODY_DEFAULT),
    '#cols' => 72,
    '#rows' => 10,
    '#description' => '',
    '#token_types' => array('user'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_permission().
 */
function privatecomments_permission() {

  $permissions = array(
      'administer privatecomments forms' => array(
        'title' => t('Administer privatecomments forms settings'),
      ),
    );

  $node_types = node_type_get_types();
  foreach ($node_types as $node_type) {
    if(variable_get('privatecomments_' . $node_type->type, PRIVATECOMMENTS)) {
      $permissions['privatecomments ' . $node_type->type . ' view all'] = array(
            'title' => t('%type_name: View all privatecomments', array('%type_name' => $node_type->name)),
          );
    }
  }

  return $permissions;
}

/**
 * Implementation of hook_menu()
 */
function privatecomments_menu() {
  $items = array();

  $items['admin/config/privatecomments'] = array(
    'title' => 'Private Comments',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('privatecomments_settings_form'),
    'access arguments' => array('administer privatecomments forms'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 *
 * @param $account
 *   user account object.
 */
function _privatecomments_send_email($uid, $node, $comment) {
  $account = user_load($uid);

  $subject = token_replace(variable_get('privatecomments_subject', PRIVATECOMMENTS_SUBJECT_DEFAULT), array('user' => $account));
  $body = token_replace(variable_get('privatecomments_body', PRIVATECOMMENTS_BODY_DEFAULT), array('user' => $account, 'comment' => $comment, 'node' => $node));
  $language = user_preferred_language($account);
  $message['subject'] = $subject;
  $message['body'] = $body;
  drupal_mail('privatecomments', 'send', $account->mail, $language, $message);

}

/**
* Implementation of hook_comment_insert()
*/
function privatecomments_comment_insert($comment) {
  if(!variable_get('privatecomments_send_email', PRIVATECOMMENTS_SEND_EMAIL)) {
    return;
  }
  $node = node_load($comment->nid);
  if(variable_get('privatecomments_' . $node->type, PRIVATECOMMENTS)) {
    // if that is firs comment
    $first_comment = db_query("SELECT count(*) FROM {comment} WHERE pid = 0 AND cid=:cid", array(':cid' => $comment->cid))->fetchField();
    if($first_comment) {
      // than send the email to a node author
      $uid = $node->uid;
    }
    else {
      // vice versa to send email to another commentator in a thread
      $uid = db_query("SELECT DISTINCT c.uid FROM {comment} c WHERE SUBSTRING(c.thread, 1, 2) IN (SELECT SUBSTRING(ct.thread, 1, 2) AS trds FROM {comment} ct WHERE (ct.cid = :cid)) AND c.uid<>:uid", array(':cid' => $comment->cid, ':uid' => $comment->uid))->fetchField();
    }
    if($uid) {
      _privatecomments_send_email($uid, $node, $comment);
    }
  }
}

/**
 * Implements hook_mail().
 */
function privatecomments_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}

/**
* Implementation of hook_comment_view()
*/
function privatecomments_comment_view($comment, $view_mode, $langcode) {
  $node = node_load($comment->nid);
  if (variable_get('privatecomments_reply_link_' . $node->type, PRIVATECOMMENTS_REPLY_LINK)) {
    unset ($comment->content['links']['comment']['#links']['comment-reply']); // remove reply buttons
  }
  // how old is the comment
  //$comment->time_ago = time() - $comment->changed;
}

