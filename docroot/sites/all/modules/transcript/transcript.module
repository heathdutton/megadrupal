<?php

/**
 * @file
 * Showing Youtube's video transcript based on time frame.
 */

define("TRANSCRIPT_DEFAULT_VIDEO", "kswE_n0FNXk");
define("TRANSCRIPT_DEFAULT_LANG", "en");

/**
 * Implements hook_menu().
 */
function transcript_menu() {
  $items = array();

  $items['admin/config/transcript'] = array(
    'title'            => 'Transcript',
    'description'      => 'Transcript Configuration Settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('transcript_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file'             => 'transcript.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;

}

/**
 * Implements hook_block_info().
 */
function transcript_block_info() {
  $blocks = array();
  $blocks['youtube_video_transcript'] = array(
    'info' => t('YouTube Video Transcript'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function transcript_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'youtube_video_transcript':
      $block['content'] = transcript_show();
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 */
function transcript_theme() {
  $path = drupal_get_path('module', 'transcript');
  return array(
    'youtube_video_transcript' => array(
      'template' => 'template/youtube-video-transcript',
      'path' => $path,
      'render element' => 'form',
    ),
  );
}

/**
 * Provides custom functionality for theming transcript template.
 */
function transcript_show() {
  $module_path = drupal_get_path('module', 'transcript');
  drupal_add_css($module_path . '/css/transcript.css', array('scope' => 'header', 'weight' => 1));
  drupal_add_js($module_path . '/js/controle.js', array('scope' => 'header', 'weight' => 5));
  $auto_play = variable_get('transcript_video_auto_play', FALSE);
  $width = variable_get('transcript_iframe_width', '400');
  $height = variable_get('transcript_iframe_height', '350');
  $video_id = variable_get('transcript_video_id', TRANSCRIPT_DEFAULT_VIDEO);
  $lines = transcript_fetch();
  if ($lines) {
    $parameters = array(
      'transcript' => $lines,
      'video_id' => check_plain($video_id),
      'auto_play' => check_plain($auto_play),
      'width' => check_plain($width),
      'height' => check_plain($height),
    );
    $htm = theme('youtube_video_transcript', $parameters);
  }
  else {
    $htm = '<div class="transcript-error">';
    $htm .= t('The Transcript module not configured properly. Please check the YouTube Video id and language code are correct.');
    $htm .= '</div>';
  }
  return $htm;
}

/**
 * Provides functionality for getting transcript using drupal_http_request().
 */
function transcript_fetch() {
  $video_id = variable_get('transcript_video_id', TRANSCRIPT_DEFAULT_VIDEO);
  $lang = variable_get('transcript_lang_code', TRANSCRIPT_DEFAULT_LANG);
  $url = 'http://www.youtube.com/api/timedtext?v=' . check_plain($video_id) . '&lang=' . check_plain($lang);
  $xmlstring = '';
  $lines = array();
  $response = drupal_http_request($url);
  if (isset($response->data)) {
    $xmlstring = $response->data;
  }

  if ($xmlstring && substr($xmlstring, 0, 5) == '<?xml') {
    $xml = simplexml_load_string($xmlstring);
    if (is_object($xml) && $xml) {
      $json = json_encode($xml);
      $array = json_decode($json, TRUE);
      $count = count($array['text']);

      for ($i = 0; $i < $count; $i++) {
        foreach ($xml->text[$i]->attributes() as $start) {
          $start_time = $start;
          break;
        }
        $sec = round($start_time, 0);
        $minutes = floor(($sec % 3600) / 60);
        $seconds = $sec % 60;
        if (strlen($seconds) == 1) {
          $seconds = '0' . $seconds;
        }
        if (isset($array['text'][$i]) && $array['text'][$i] != '' && !is_array($array['text'][$i])) {
          $lines[] = array(
            'id' => round($start_time, 0),
            'minute' => $minutes,
            'seconds' => $seconds,
            'txt' => $array['text'][$i],
          );
        }
      }
    }
  }
  return $lines;
}
