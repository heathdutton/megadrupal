<?php

/**
 * @file
 * Code for Register.
 */

/**
 * Implements hook_menu().
 */
function register_menu() {
  $items['admin/config/people/register'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('register_admin_form'),
    'access arguments' => array('administer register'),
    'description' => t('Settings for Register module'),
    'title' => t('Configure Alternative Registration Page'),
    'file' => 'register.admin.inc',
  );

  return $items;
}

/**
 *
 * Implements hook_menu_link_alter()
 */
function register_menu_alter(&$item) {
  $path = variable_get('register_module_register_path', 'user/register/default');
  $item[$path] = array(
    'title' => 'Create new account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('register_user_register_form'),
    'access arguments' => array('register user register access'),
    'type' => MENU_LOCAL_TASK,
  );
}

/**
 * Implements hook_permission().
 */
function register_permission() {
  return array(
    'administer register' => array(
      'title' => t('Administer Register settings'),
      'description' => t('Perform administrative tasks for the Register module'),
    ),
    'register user register access' => array(
      'title' => t('Access user registration form'),
      'description' => t('Access the Register user registration form pages'),
    ),
  );
}

/**
 * Form builder; the user registration form.
 * Structure borrowed from user.module
 *
 * @ingroup forms
 * @see user_account_form()
 * @see user_account_form_validate()
 * @see user_register_submit()
 */
function register_user_register_form($form, &$form_state) {
  global $user;

  $admin = user_access('administer users');

  // If we aren't admin but already logged on, go to the user page instead.
  if (!$admin && $user->uid) {
    drupal_goto('user/' . $user->uid);
  }

  $form['#user'] = drupal_anonymous_user();
  $form['#user_category'] = 'register';

  $form['#attached']['library'][] = array('system', 'jquery.cookie');
  $form['#attributes']['class'][] = 'user-info-from-cookie';

  // Start with the default user account fields.
  user_account_form($form, $form_state);

  // Attach field widgets, and hide the ones where the 'user_register_form'
  // setting is not on.
  field_attach_form('user', $form['#user'], $form, $form_state);
  foreach (field_info_instances('user', 'user') as $field_name => $instance) {
    if (empty($instance['settings']['user_register_form'])) {
      $form[$field_name]['#access'] = FALSE;
    }
  }

  if ($admin) {
    // Redirect back to page which initiated the create request.
    $form_state['redirect'] = $_GET['q'];
  }

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create new account'),
  );

  $form['#validate'][] = 'register_user_register_validate';
  $form['#submit'][] = 'register_user_register_submit';

  return $form;
}

/**
 * Validation function for the user registration form.
 */
function register_user_register_validate($form, &$form_state) {
  entity_form_field_validate('user', $form, $form_state);
}

/**
 * Submit handler for the user registration form.
 *
 * This function is shared by the installation form and the normal registration form,
 * which is why it can't be in the user.pages.inc file.
 *
 * @see user_register_form()
 */
function register_user_register_submit($form, &$form_state) {
  $admin = user_access('administer users');

  if (!variable_get('user_email_verification', TRUE) || $admin) {
    $pass = $form_state['values']['pass'];
  }
  else {
    $pass = user_password();
  }
  $notify = !empty($form_state['values']['notify']);

  // Remove unneeded values.
  form_state_values_clean($form_state);

  $form_state['values']['pass'] = $pass;
  $form_state['values']['init'] = $form_state['values']['mail'];

  $account = $form['#user'];

  entity_form_submit_build_entity('user', $account, $form, $form_state);

  // Populate $edit with the properties of $account, which have been edited on
  // this form by taking over all values, which appear in the form values too.
  $edit = array_intersect_key((array) $account, $form_state['values']);

  $reg_status_rule = variable_get('register_user_status', 'default');
  if ($reg_status_rule == 'blocked') {
    $edit['status'] = 0;
  }
  else if ($reg_status_rule = 'active') {
    $edit['status'] = 1;
  }
  $edit['roles'] = variable_get('register_roles', array());
  
  $account = user_save($account, $edit);

  // Terminate if an error occurred during user_save().
  if (!$account) {
    drupal_set_message(t("Error saving user account."), 'error');
    $form_state['redirect'] = '';
    return;
  }
  $form_state['user'] = $account;
  $form_state['values']['uid'] = $account->uid;

  watchdog('user', 'New user: %name (%email).', array('%name' => $form_state['values']['name'], '%email' => $form_state['values']['mail']), WATCHDOG_NOTICE, l(t('edit'), 'user/' . $account->uid . '/edit'));

  // Add plain text password into user account to generate mail tokens.
  $account->password = $pass;

  // New administrative account without notification.
  $uri = entity_uri('user', $account);
  if ($admin && !$notify) {
    drupal_set_message(t('Created a new user account for <a href="@url">%name</a>. No e-mail has been sent.', array('@url' => url($uri['path'], $uri['options']), '%name' => $account->name)));
  }
  // No e-mail verification required; log in user immediately.
  elseif (!$admin && !variable_get('user_email_verification', TRUE) && $account->status) {
    _user_mail_notify('register_no_approval_required', $account);
    $form_state['uid'] = $account->uid;
    user_login_submit(array(), $form_state);
    drupal_set_message(t('Registration successful. You are now logged in.'));
    $form_state['redirect'] = '';
  }
  // No administrator approval required.
  elseif ($account->status || $notify) {
    $op = $notify ? 'register_admin_created' : 'register_no_approval_required';
    _user_mail_notify($op, $account);
    if ($notify) {
      drupal_set_message(t('A welcome message with further instructions has been e-mailed to the new user <a href="@url">%name</a>.', array('@url' => url($uri['path'], $uri['options']), '%name' => $account->name)));
    }
    else {
      drupal_set_message(t('A welcome message with further instructions has been sent to your e-mail address.'));
      $form_state['redirect'] = '';
    }
  }
  // Administrator approval required.
  else {
    _user_mail_notify('register_pending_approval', $account);
    drupal_set_message(t('Thank you for applying for an account. Your account is currently pending approval by the site administrator.<br />In the meantime, a welcome message with further instructions has been sent to your e-mail address.'));
    $form_state['redirect'] = '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for the registration form.
 * Borrowed from the profile2 module.
 *
 * @see profile2_form_user_register_form_alter().
 */
function register_form_register_user_register_form_alter(&$form, &$form_state) {
  if (module_exists('profile2')) {

    // Load which profiles to apply
    $active_profiles = variable_get('register_profiles', array());
    $active_profiles = array_flip($active_profiles);
    unset($active_profiles[0]);

    foreach (profile2_get_types() as $type_name => $profile_type) {
      if (array_key_exists($type_name, $active_profiles)) {
        if (empty($form_state['profiles'][$type_name])) {
          $form_state['profiles'][$type_name] = profile_create(array('type' => $type_name));
        }
        profile2_attach_form($form, $form_state);
        // Wrap each profile form in a fieldset.
        $form['profile_' . $type_name] += array(
          '#type' => 'fieldset',
          '#title' => check_plain($profile_type->label),
        );
      }
    }
  }
}
