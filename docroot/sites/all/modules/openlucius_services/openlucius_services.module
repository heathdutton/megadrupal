<?php
/**
 * @file
 * Code for the Openlucius services feature.
 */

include_once 'openlucius_services.features.inc';

// Generic errors.
define("OPENLUCIUS_SERVICES_ERROR_DEFAULT", -1);
define("OPENLUCIUS_SERVICES_ERROR_MISSING_PARAMETER", 0);
define("OPENLUCIUS_SERVICES_ERROR_WRONG_PARAMETER_TYPE", 1);
define("OPENLUCIUS_SERVICES_ERROR_NON_EXISTING_TERM", 2);
define("OPENLUCIUS_SERVICES_ERROR_NOT_IMPLEMENTED_YET", 3);
define("OPENLUCIUS_SERVICES_ERROR_EMPTY_UPDATE_REQUEST", 4);
define("OPENLUCIUS_SERVICES_ERROR_INCORRECT_FORMAT", 5);

// User errors.
define("OPENLUCIUS_SERVICES_ERROR_USER_NOT_IN_GROUP", 6);
define("OPENLUCIUS_SERVICES_ERROR_USER_NOT_FOUND", 7);
define("OPENLUCIUS_SERVICES_ERROR_USER_ACCESS_DENIED", 8);
define("OPENLUCIUS_SERVICES_ERROR_USER_EXISTS", 9);
define("OPENLUCIUS_SERVICES_ERROR_USER_CREATE_ACCESS_DENIED", 10);
define("OPENLUCIUS_SERVICES_ERROR_USER_EDIT_ACCESS_DENIED", 11);

// Node errors.
define("OPENLUCIUS_SERVICES_ERROR_NODE_NOT_FOUND", 12);
define("OPENLUCIUS_SERVICES_ERROR_NODE_EDIT_ACCESS_DENIED", 13);
define("OPENLUCIUS_SERVICES_ERROR_NODE_UPLOAD_FAILED", 14);
define("OPENLUCIUS_SERVICES_ERROR_NODE_CREATE_ACCESS_DENIED", 15);
define("OPENLUCIUS_SERVICES_ERROR_NODE_ACCESS_DENIED", 16);
define("OPENLUCIUS_SERVICES_ERROR_NODE_WRONG_TYPE", 17);

// Group errors.
define("OPENLUCIUS_SERVICES_ERROR_GROUP_ACCESS_DENIED", 18);

// Move errors.
define("OPENLUCIUS_SERVICES_ERROR_MOVE_ACCESS_DENIED", 19);
define("OPENLUCIUS_SERVICES_ERROR_MOVE_IMPOSSIBLE", 20);

// Role errors.
define("OPENLUCIUS_SERVICES_ERROR_ROLE_NOT_FOUND", 21);
define("OPENLUCIUS_SERVICES_ERROR_ROLE_NOT_ALLOWED", 22);

// Taxonomy errors.
define("OPENLUCIUS_SERVICES_ERROR_WRONG_VOCABULARY", 23);

// Comment errors.
define("OPENLUCIUS_SERVICES_ERROR_COMMENT_EDIT_ACCESS_DENIED", 24);
define("OPENLUCIUS_SERVICES_ERROR_COMMENT_NOT_FOUND", 25);
define("OPENLUCIUS_SERVICES_ERROR_COMMENT_ACCESS_DENIED", 26);

// Define messages.
define("OPENLUCIUS_SERVICES_UPDATED_MESSAGE", t("The node was updated successfully"));
define("OPENLUCIUS_SERVICES_UNPUBLISHED_MESSAGE", t("The node was unpublished successfully"));

// Define change requests.
define('OPENLUCIUS_SERVICES_CREATE', 'create');
define('OPENLUCIUS_SERVICES_UPDATE', 'update');
define('OPENLUCIUS_SERVICES_MOVE', 'move');
define('OPENLUCIUS_SERVICES_DELETE', 'delete');

/**
 * Implements hook_services_request_postprocess_alter().
 */
function openlucius_services_services_request_postprocess_alter($controller, $args, &$result) {

  // Respond to user logins.
  if ($controller['callback'] == '_user_resource_login') {

    // Replace the user object by our own clean version.
    module_load_include('inc', 'openlucius_services', 'includes/resource.index');
    $result->user = openlucius_services_get_user_details($result->user->uid);
  }
}

/**
 * Implements hook_services_resources().
 */
function openlucius_services_services_resources() {
  // Return the endpoints.
  return array(
    'activate'                => array(
      'operations' => array(
        'create' => array(
          'help'                    => 'Activate users',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.user.crud',
          ),
          'callback'                => '_openlucius_services_activate_user',
          'args'                    => array(
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The data to use for activation',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('activate user'),
          'access arguments append' => TRUE,
        ),
        'update' => array(
          'help'                    => 'Activate user',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.user.crud',
          ),
          'callback'                => '_openlucius_services_activate_user',
          'args'                    => array(
            array(
              'name'        => 'uid',
              'optional'    => FALSE,
              'source'      => array('path' => 0),
              'type'        => 'int',
              'description' => 'The uid of the user to update',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('activate user'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
    'add_user_to_groups'      => array(
      'operations' => array(
        'update' => array(
          'help'                    => 'Add to groups',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.user.crud',
          ),
          'callback'                => '_openlucius_services_user_group_actions',
          'args'                    => array(
            array(
              'name'        => 'uid',
              'optional'    => FALSE,
              'source'      => array('path' => 0),
              'type'        => 'int',
              'description' => 'The uid of the user to update',
            ),
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The groups the user should be added to',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('add user groups'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
    'add_user_to_teams'       => array(
      'operations' => array(
        'update' => array(
          'help'                    => 'Add to teams',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.user.crud',
          ),
          'callback'                => '_openlucius_services_user_team_actions',
          'args'                    => array(
            array(
              'name'        => 'uid',
              'optional'    => FALSE,
              'source'      => array('path' => 0),
              'type'        => 'int',
              'description' => 'The uid of the user to update',
            ),
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The teams the user should be added to',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('add user teams'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
    'deactivate'              => array(
      'operations' => array(
        'create' => array(
          'help'                    => 'Deactivate users',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.user.crud',
          ),
          'callback'                => '_openlucius_services_block_user',
          'args'                    => array(
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The data to use for deactivation',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('deactivate user'),
          'access arguments append' => TRUE,
        ),
        'update' => array(
          'help'                    => 'Deactivate user',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.user.crud',
          ),
          'callback'                => '_openlucius_services_block_user',
          'args'                    => array(
            array(
              'name'        => 'uid',
              'optional'    => FALSE,
              'source'      => array('path' => 0),
              'type'        => 'int',
              'description' => 'The uid of the user to update',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('deactivate user'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
    'folder'                  => array(
      'operations' => array(
        'index'  => array(
          'help'                    => t('The folder service for fetching the folder details'),
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.index',
          ),
          'callback'                => 'openlucius_services_fetch_node_details',
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('access node details'),
          'access arguments append' => TRUE,
          'args'                    => array(
            array(
              'name'        => 'id',
              'type'        => 'int',
              'description' => 'The node id for which details are to be fetched',
              'source'      => array('path' => '0'),
              'optional'    => FALSE,
            ),
          ),
        ),
        'create' => array(
          'help'                    => 'Create a folder',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.node.crud',
          ),
          'callback'                => '_openlucius_services_create_node',
          'args'                    => array(
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The node data to create',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('create folder'),
          'access arguments append' => TRUE,
        ),
        'update' => array(
          'help'                    => 'Update a folder',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.node.crud',
          ),
          'callback'                => '_openlucius_services_update_node',
          'args'                    => array(
            array(
              'name'        => 'nid',
              'optional'    => FALSE,
              'source'      => array('path' => 0),
              'type'        => 'int',
              'description' => 'The nid of the todo to update',
            ),
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The node data to use for the update action',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('update folder'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
    'group'                   => array(
      'operations' => array(
        'index'  => array(
          'help'                    => t('The folder service for fetching the group details'),
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.index',
          ),
          'callback'                => 'openlucius_services_fetch_node_details',
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('access node details'),
          'access arguments append' => TRUE,
          'args'                    => array(
            array(
              'name'        => 'id',
              'type'        => 'int',
              'description' => 'The node id for which details are to be fetched',
              'source'      => array('path' => '0'),
              'optional'    => FALSE,
            ),
          ),
        ),
        'create' => array(
          'help'                    => 'Create a group',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.node.crud',
          ),
          'callback'                => '_openlucius_services_create_node',
          'args'                    => array(
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The node data to create',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('create group'),
          'access arguments append' => TRUE,
        ),
        'update' => array(
          'help'                    => 'Update a group',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.node.crud',
          ),
          'callback'                => '_openlucius_services_update_node',
          'args'                    => array(
            array(
              'name'        => 'nid',
              'optional'    => FALSE,
              'source'      => array('path' => 0),
              'type'        => 'int',
              'description' => 'The nid of the todo to update',
            ),
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The node data to use for the update action',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('update group'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
    'message'                 => array(
      'operations' => array(
        'index'  => array(
          'help'                    => t('The folder service for fetching the message details'),
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.index',
          ),
          'callback'                => 'openlucius_services_fetch_node_details',
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('access node details'),
          'access arguments append' => TRUE,
          'args'                    => array(
            array(
              'name'        => 'id',
              'type'        => 'int',
              'description' => 'The node id for which details are to be fetched',
              'source'      => array('path' => '0'),
              'optional'    => FALSE,
            ),
          ),
        ),
        'create' => array(
          'help'                    => 'Create a message',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.node.crud',
          ),
          'callback'                => '_openlucius_services_create_node',
          'args'                    => array(
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The node data to create',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('create message'),
          'access arguments append' => TRUE,
        ),
        'update' => array(
          'help'                    => 'Update a message',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.node.crud',
          ),
          'callback'                => '_openlucius_services_update_node',
          'args'                    => array(
            array(
              'name'        => 'nid',
              'optional'    => FALSE,
              'source'      => array('path' => 0),
              'type'        => 'int',
              'description' => 'The nid of the message to update',
            ),
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The node data to use for the update create',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('update message'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
    'move'                    => array(
      'operations' => array(
        'update' => array(
          'help'                    => 'Move a node to a new group',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.node.crud',
          ),
          'callback'                => '_openlucius_services_move_node',
          'args'                    => array(
            array(
              'name'        => 'nid',
              'optional'    => FALSE,
              'source'      => array('path' => 0),
              'type'        => 'int',
              'description' => 'The nid of the todo to update',
            ),
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The data to use for the update',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('move node'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
    'overview'                => array(
      'index' => array(
        'help'                    => t('The overview service for a global overview'),
        'file'                    => array(
          'type'   => 'inc',
          'module' => 'openlucius_services',
          'name'   => 'includes/resource.index',
        ),
        'callback'                => 'openlucius_services_fetch_overview',
        'access callback'         => 'openlucius_services_service_access',
        'access arguments'        => array('access overview index'),
        'access arguments append' => TRUE,
      ),
    ),
    'publish'                 => array(
      'operations' => array(
        'create' => array(
          'help'                    => 'publish nodes',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.node.crud',
          ),
          'callback'                => '_openlucius_services_publish_node',
          'args'                    => array(
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The data to use for publishing',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('publish node'),
          'access arguments append' => TRUE,
        ),
        'update' => array(
          'help'                    => 'publish a node',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.node.crud',
          ),
          'callback'                => '_openlucius_services_publish_node',
          'args'                    => array(
            array(
              'name'        => 'nid',
              'optional'    => FALSE,
              'source'      => array('path' => 0),
              'type'        => 'int',
              'description' => 'The nid of the node to update',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('unpublish node'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
    'team'                    => array(
      'operations' => array(
        'index'  => array(
          'help'                    => t('The folder service for fetching the team details'),
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.index',
          ),
          'callback'                => 'openlucius_services_fetch_node_details',
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('access node details'),
          'access arguments append' => TRUE,
          'args'                    => array(
            array(
              'name'        => 'id',
              'type'        => 'int',
              'description' => 'The node id for which details are to be fetched',
              'source'      => array('path' => '0'),
              'optional'    => FALSE,
            ),
          ),
        ),
        'create' => array(
          'help'                    => 'Create a team',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.node.crud',
          ),
          'callback'                => '_openlucius_services_create_node',
          'args'                    => array(
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The node data to create',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('create team'),
          'access arguments append' => TRUE,
        ),
        'update' => array(
          'help'                    => 'Update a team',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.node.crud',
          ),
          'callback'                => '_openlucius_services_update_node',
          'args'                    => array(
            array(
              'name'        => 'nid',
              'optional'    => FALSE,
              'source'      => array('path' => 0),
              'type'        => 'int',
              'description' => 'The nid of the team to update',
            ),
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The node data to use for the update create',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('update team'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
    'text_document'           => array(
      'operations' => array(
        'index'  => array(
          'help'                    => t('The folder service for fetching the text_document details'),
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.index',
          ),
          'callback'                => 'openlucius_services_fetch_node_details',
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('access node details'),
          'access arguments append' => TRUE,
          'args'                    => array(
            array(
              'name'        => 'id',
              'type'        => 'int',
              'description' => 'The node id for which details are to be fetched',
              'source'      => array('path' => '0'),
              'optional'    => FALSE,
            ),
          ),
        ),
        'create' => array(
          'help'                    => 'Create a text-document',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.node.crud',
          ),
          'callback'                => '_openlucius_services_create_node',
          'args'                    => array(
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The node data to create',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('create text_document'),
          'access arguments append' => TRUE,
        ),
        'update' => array(
          'help'                    => 'Update a text-document',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.node.crud',
          ),
          'callback'                => '_openlucius_services_update_node',
          'args'                    => array(
            array(
              'name'        => 'nid',
              'optional'    => FALSE,
              'source'      => array('path' => 0),
              'type'        => 'int',
              'description' => 'The nid of the text-document to update',
            ),
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The node data to use for the update create',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('update text-document'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
    'todo'                    => array(
      'operations' => array(
        'index'  => array(
          'help'                    => t('The folder service for fetching the todo details'),
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.index',
          ),
          'callback'                => 'openlucius_services_fetch_node_details',
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('access node details'),
          'access arguments append' => TRUE,
          'args'                    => array(
            array(
              'name'        => 'id',
              'type'        => 'int',
              'description' => 'The node id for which details are to be fetched',
              'source'      => array('path' => '0'),
              'optional'    => FALSE,
            ),
          ),
        ),
        'create' => array(
          'help'                    => 'Create a todo',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.node.crud',
          ),
          'callback'                => '_openlucius_services_create_node',
          'args'                    => array(
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The node data to create',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('create todo'),
          'access arguments append' => TRUE,
        ),
        'update' => array(
          'help'                    => 'Update a todo',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.node.crud',
          ),
          'callback'                => '_openlucius_services_update_node',
          'args'                    => array(
            array(
              'name'        => 'nid',
              'optional'    => FALSE,
              'source'      => array('path' => 0),
              'type'        => 'int',
              'description' => 'The nid of the todo to update',
            ),
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The node data to use for the update create',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('update todo'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
    'todo_list'               => array(
      'operations' => array(
        'index'  => array(
          'help'                    => t('The folder service for fetching the todo_list details'),
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.index',
          ),
          'callback'                => 'openlucius_services_fetch_node_details',
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('access node details'),
          'access arguments append' => TRUE,
          'args'                    => array(
            array(
              'name'        => 'id',
              'type'        => 'int',
              'description' => 'The node id for which details are to be fetched',
              'source'      => array('path' => '0'),
              'optional'    => FALSE,
            ),
          ),
        ),
        'create' => array(
          'help'                    => 'Create a todo-list',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.node.crud',
          ),
          'callback'                => '_openlucius_services_create_node',
          'args'                    => array(
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The node data to create',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('create todo_list'),
          'access arguments append' => TRUE,
        ),
        'update' => array(
          'help'                    => 'Update a todo_list',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.node.crud',
          ),
          'callback'                => '_openlucius_services_update_node',
          'args'                    => array(
            array(
              'name'        => 'nid',
              'optional'    => FALSE,
              'source'      => array('path' => 0),
              'type'        => 'int',
              'description' => 'The nid of the todo-list to update',
            ),
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The node data to use for the update create',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('update todo'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
    'remove_user_from_groups' => array(
      'operations' => array(
        'update' => array(
          'help'                    => 'Remove from groups',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.user.crud',
          ),
          'callback'                => '_openlucius_services_user_group_actions',
          'args'                    => array(
            array(
              'name'        => 'uid',
              'optional'    => FALSE,
              'source'      => array('path' => 0),
              'type'        => 'int',
              'description' => 'The uid of the user to update',
            ),
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The groups the user should be removed from',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('remove user groups'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
    'remove_user_from_teams'  => array(
      'operations' => array(
        'update' => array(
          'help'                    => 'Remove from teams',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.user.crud',
          ),
          'callback'                => '_openlucius_services_user_team_actions',
          'args'                    => array(
            array(
              'name'        => 'uid',
              'optional'    => FALSE,
              'source'      => array('path' => 0),
              'type'        => 'int',
              'description' => 'The uid of the user to update',
            ),
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The teams the user should be removed from',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('remove user teams'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
    'unpublish'               => array(
      'operations' => array(
        'create' => array(
          'help'                    => 'Unpublish nodes',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.node.crud',
          ),
          'callback'                => '_openlucius_services_unpublish_node',
          'args'                    => array(
            array(
              'name'        => 'data',
              'optional'    => FALSE,
              'source'      => 'data',
              'description' => 'The data to use for unpublishing',
              'type'        => 'array',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('unpublish node'),
          'access arguments append' => TRUE,
        ),
        'update' => array(
          'help'                    => 'Unpublish a node',
          'file'                    => array(
            'type'   => 'inc',
            'module' => 'openlucius_services',
            'name'   => 'includes/resource.node.crud',
          ),
          'callback'                => '_openlucius_services_unpublish_node',
          'args'                    => array(
            array(
              'name'        => 'nid',
              'optional'    => FALSE,
              'source'      => array('path' => 0),
              'type'        => 'int',
              'description' => 'The nid of the node to update',
            ),
          ),
          'access callback'         => 'openlucius_services_service_access',
          'access arguments'        => array('unpublish node'),
          'access arguments append' => TRUE,
        ),
      ),
    ),
  );
}

/**
 * Implements hook_services_resources_alter().
 */
function openlucius_services_services_resources_alter(&$resources, &$endpoint) {

  // Check if user create exists.
  if (isset($resources['comment']['operations']['index'])) {
    $resources['comment']['operations']['index'] = array(
      'help'                    => t('The service for fetching the comment details'),
      'file'                    => array(
        'type'   => 'inc',
        'module' => 'openlucius_services',
        'name'   => 'includes/resource.index',
      ),
      'callback'                => 'openlucius_services_get_comment_details',
      'access callback'         => 'openlucius_services_service_access',
      'access arguments'        => array('access comment details'),
      'access arguments append' => TRUE,
      'args'                    => array(
        array(
          'name'        => 'id',
          'type'        => 'int',
          'description' => 'The comment id for which details are to be fetched',
          'source'      => array('path' => '0'),
          'optional'    => FALSE,
        ),
      ),
    );
  }

  // Check if user create exists.
  if (isset($resources['comment']['operations']['create'])) {
    $resources['comment']['operations']['create'] = array(
      'help'                    => 'Create a comment',
      'file'                    => array(
        'type'   => 'inc',
        'module' => 'openlucius_services',
        'name'   => 'includes/resource.comment.crud',
      ),
      'callback'                => '_openlucius_services_create_comment',
      'args'                    => array(
        array(
          'name'        => 'data',
          'optional'    => FALSE,
          'source'      => 'data',
          'description' => 'The comment data',
          'type'        => 'array',
        ),
      ),
      'access callback'         => 'openlucius_services_service_access',
      'access arguments'        => array('create comment'),
      'access arguments append' => TRUE,
    );
  }

  // Check if the user update exists.
  if (isset($resources['comment']['operations']['update'])) {
    $resources['comment']['operations']['update'] = array(
      'help'                    => 'Update a comment',
      'file'                    => array(
        'type'   => 'inc',
        'module' => 'openlucius_services',
        'name'   => 'includes/resource.comment.crud',
      ),
      'callback'                => '_openlucius_services_update_comment',
      'args'                    => array(
        array(
          'name'        => 'cid',
          'optional'    => FALSE,
          'source'      => array('path' => 0),
          'type'        => 'int',
          'description' => 'The cid of the comment to update',
        ),
        array(
          'name'        => 'data',
          'optional'    => FALSE,
          'source'      => 'data',
          'description' => 'The comment data to use for the update',
          'type'        => 'array',
        ),
      ),
      'access callback'         => 'openlucius_services_service_access',
      'access arguments'        => array('update comment'),
      'access arguments append' => TRUE,
    );
  }

  // Check if user create exists.
  if (isset($resources['user']['operations']['index'])) {
    $resources['user']['operations']['index'] = array(
      'help'                    => t('The service for fetching the user details'),
      'file'                    => array(
        'type'   => 'inc',
        'module' => 'openlucius_services',
        'name'   => 'includes/resource.index',
      ),
      'callback'                => 'openlucius_services_get_user_details',
      'access callback'         => 'openlucius_services_service_access',
      'access arguments'        => array('access user details'),
      'access arguments append' => TRUE,
      'args'                    => array(
        array(
          'name'        => 'id',
          'type'        => 'int',
          'description' => 'The user id for which details are to be fetched',
          'source'      => array('path' => '0'),
          'optional'    => FALSE,
        ),
      ),
    );
  }

  // Check if user create exists.
  if (isset($resources['user']['operations']['create'])) {
    $resources['user']['operations']['create'] = array(
      'help'                    => 'Create a user',
      'file'                    => array(
        'type'   => 'inc',
        'module' => 'openlucius_services',
        'name'   => 'includes/resource.user.crud',
      ),
      'callback'                => '_openlucius_services_create_user',
      'args'                    => array(
        array(
          'name'        => 'data',
          'optional'    => FALSE,
          'source'      => 'data',
          'description' => 'The user data',
          'type'        => 'array',
        ),
      ),
      'access callback'         => 'openlucius_services_service_access',
      'access arguments'        => array('create user'),
      'access arguments append' => TRUE,
    );
  }

  // Check if the user update exists.
  if (isset($resources['user']['operations']['update'])) {
    $resources['user']['operations']['update'] = array(
      'help'                    => 'Update a user',
      'file'                    => array(
        'type'   => 'inc',
        'module' => 'openlucius_services',
        'name'   => 'includes/resource.user.crud',
      ),
      'callback'                => '_openlucius_services_update_user',
      'args'                    => array(
        array(
          'name'        => 'uid',
          'optional'    => FALSE,
          'source'      => array('path' => 0),
          'type'        => 'int',
          'description' => 'The uid of the user to update',
        ),
        array(
          'name'        => 'data',
          'optional'    => FALSE,
          'source'      => 'data',
          'description' => 'The user data to use for the update',
          'type'        => 'array',
        ),
      ),
      'access callback'         => 'openlucius_services_service_access',
      'access arguments'        => array('update user'),
      'access arguments append' => TRUE,
    );
  }
}

/**
 * Function to check whether a user has access to a given service.
 *
 * @param string $op
 *   The type of operation to be performed.
 * @param array $args
 *   The access arguments.
 *
 * @return bool
 *   Whether a user has access to a service.
 */
function openlucius_services_service_access($op = 'view', $args = array()) {
  global $user;

  if ($user->uid > 0) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Function to process queried items into one uniform format.
 *
 * @param array $items
 *   The array to be processed.
 */
function openlucius_services_process_references(&$items) {
  if (!empty($items)) {
    $list = array();
    foreach ($items as $key => $title) {
      $list[] = array(
        'id'    => $key,
        'title' => $title,
      );
    }
    $items = $list;
  }
  else {
    $items = array();
  }
}

/**
 * Function for all errors in the OpenLucius API.
 *
 * @param int $type
 *   The type of error generated.
 * @param null $parameters
 *   The parameters to pass along to the message.
 *
 * @return bool|mixed
 *   Returns either FALSE if the Error was not found or it throws an exception.
 * @throws \ServicesException
 *   Throws an exception if the error was found.
 */
function openlucius_services_error($type, $parameters = NULL) {
  switch ($type) {

    case OPENLUCIUS_SERVICES_ERROR_DEFAULT:
      services_error(isset($parameters['message']) ? $parameters['message'] : '', 406);
      break;

    case OPENLUCIUS_SERVICES_ERROR_MISSING_PARAMETER:
      services_error(t("Missing required parameter: @parameter", $parameters), 406);
      break;

    case OPENLUCIUS_SERVICES_ERROR_WRONG_PARAMETER_TYPE:
      services_error(t("Parameter type is incorrect, given: @input required: @requirement for @for", $parameters), 406);
      break;

    case OPENLUCIUS_SERVICES_ERROR_NON_EXISTING_TERM:
      services_error(t("This term does not exist within @type", $parameters), 406);
      break;

    case OPENLUCIUS_SERVICES_ERROR_USER_NOT_IN_GROUP:
      services_error(t("This user is not a member of the group"), 406);
      break;

    case OPENLUCIUS_SERVICES_ERROR_NOT_IMPLEMENTED_YET:
      services_error(t("Your request was valid but this type: @type was not yet implemented in @method. \n Have look at @see for the available types.", $parameters), 406);
      break;

    case OPENLUCIUS_SERVICES_ERROR_EMPTY_UPDATE_REQUEST:
      services_error(t("Your update request was empty and cannot be processed"), 406);
      break;

    case OPENLUCIUS_SERVICES_ERROR_NODE_NOT_FOUND:
      services_error(t("The requested node @nid could not be found", $parameters), 404);
      break;

    case OPENLUCIUS_SERVICES_ERROR_GROUP_ACCESS_DENIED:
      services_error(t("You are not a member of this group, please contact a group admin for access"), 403);
      break;

    case OPENLUCIUS_SERVICES_ERROR_MOVE_ACCESS_DENIED:
      services_error(t("You are not allowed to move nodes, please contact the site admin for access"), 403);
      break;

    case OPENLUCIUS_SERVICES_ERROR_NODE_EDIT_ACCESS_DENIED:
      services_error(t("You are not allowed edit this node, please contact the site or group admin for access"), 403);
      break;

    case OPENLUCIUS_SERVICES_ERROR_NODE_UPLOAD_FAILED:
      services_error(t("The node was created successfully at @path but the files could not be attached, please contact the site admin for details", $parameters), 500);
      break;

    case OPENLUCIUS_SERVICES_ERROR_MOVE_IMPOSSIBLE:
      services_error(t("This node cannot be moved, have you tried moving a group? Please contact the system administrator for details", $parameters), 406);
      break;

    case OPENLUCIUS_SERVICES_ERROR_INCORRECT_FORMAT:
      services_error(t("The sent parameter: @parameter is not in the expected format: @format", $parameters), 406);
      break;

    case OPENLUCIUS_SERVICES_ERROR_ROLE_NOT_FOUND:
      services_error(t("A role with @rid does not exist.", $parameters), 404);
      break;

    case OPENLUCIUS_SERVICES_ERROR_ROLE_NOT_ALLOWED:
      services_error(t("You are not allowed to give a user this specific role: @role", $parameters), 403);
      break;

    case OPENLUCIUS_SERVICES_ERROR_USER_EXISTS:
      services_error(t("This @type: @value is already being used for another account", $parameters), 406);
      break;

    case OPENLUCIUS_SERVICES_ERROR_NODE_WRONG_TYPE:
      services_error(t("This node is of type: @type, the required type is @type2", $parameters), 406);
      break;

    case OPENLUCIUS_SERVICES_ERROR_WRONG_VOCABULARY:
      services_error(t("This term belongs to a different vocabulary"), 406);
      break;

    case OPENLUCIUS_SERVICES_ERROR_NODE_CREATE_ACCESS_DENIED:
      services_error(t("You are not allowed to create nodes of type: @type", $parameters), 403);
      break;

    case OPENLUCIUS_SERVICES_ERROR_USER_CREATE_ACCESS_DENIED:
      services_error(t("You are not allowed to create users, please contact the site admin for details"), 403);
      break;

    case OPENLUCIUS_SERVICES_ERROR_USER_EDIT_ACCESS_DENIED:
      services_error(t("You are not allowed to edit this user, please contact the site admin for details"), 403);
      break;

    case OPENLUCIUS_SERVICES_ERROR_COMMENT_EDIT_ACCESS_DENIED:
      services_error(t("You are not allowed to edit this comment, please contact the site admin for details"), 403);
      break;

    case OPENLUCIUS_SERVICES_ERROR_COMMENT_NOT_FOUND:
      services_error(t("The requested comment @cid could not be found", $parameters), 404);
      break;

    case OPENLUCIUS_SERVICES_ERROR_NODE_ACCESS_DENIED:
      services_error(t("You may not view this node: @nid", $parameters), 403);
      break;

    case OPENLUCIUS_SERVICES_ERROR_COMMENT_ACCESS_DENIED:
      services_error(t("You may not view this comment: @cid", $parameters), 403);
      break;

    case OPENLUCIUS_SERVICES_ERROR_USER_NOT_FOUND:
      services_error(t("The requested user was not found: @uid", $parameters), 404);
      break;

    case OPENLUCIUS_SERVICES_ERROR_USER_ACCESS_DENIED:
      services_error(t("You may not view the profile of this user"), 403);
      break;

    default:
      services_error(t('An error has occurred, please contact the site admin for details'), 406);
      break;
  }

  return FALSE;
}

/**
 * Function for notifying in a uniform format.
 *
 * @param int $id
 *   The id of the created item.
 * @param string $message
 *   The message to be returned.
 * @param NULL|string $path
 *   (optional) The path of the created item.
 *
 * @return array
 *   The data which is returned to the user.
 */
function openlucius_services_message($id, $message, $path = NULL) {
  return array(
    "id"      => $id,
    "message" => $message,
    "path"    => $path,
  );
}

/**
 * Function to obtain the services node types.
 * @return array
 *   Returns an array containing the node types available.
 */
function openlucius_services_node_types() {
  // All node types except for group and todos.
  // Group is the parent for all other types and todo's
  // are a children of a todo-lists.
  $types = array(
    'todo_list',
    'folder',
    'text_document',
    'team',
    'message',
  );

  // Allow other modules to alter the types.
  drupal_alter('openlucius_services_node_types', $types);

  return $types;
}

/**
 * Function to map types to content types.
 *
 * @param string $type
 *   The type your looking for.
 * @param bool $reverse
 *   For reverse mapping
 *
 * @return string
 *   The required type.
 * @throws \ServicesException
 *   Throws an exception if the type could not be mapped.
 */
function openlucius_services_map_type($type, $reverse = FALSE) {
  $types = array(
    'todo'          => 'ol_todo',
    'todo_list'     => 'ol_todo_list',
    'group'         => 'ol_group',
    'folder'        => 'ol_file_folder',
    'text_document' => 'ol_text_document',
    'team'          => 'team',
    'message'       => 'ol_message',
  );

  // Allow other modules to alter the types.
  drupal_alter('openlucius_services_map_type_alter', $types);

  // For reverse mapping.
  if ($reverse) {
    $types = array_flip($types);
  }

  // Return Either type or the message that this has not yet been implemented.
  return isset($types[$type]) ? $types[$type] : openlucius_services_error(OPENLUCIUS_SERVICES_ERROR_NOT_IMPLEMENTED_YET, array(
    "@type"   => $type,
    '@method' => 'openlucius_service_map_type',
    '@see'    => 'openlucius_services.module',
  ));
}

/**
 * Function to map fields.
 *
 * @param string $type
 *   The node type your looking for.
 * @param string $field
 *   The field to be mapped to an existing drupal field.
 * @param bool $reverse
 *   For reverse field mapping (output).
 * @param bool $skip
 *   For skipping the error notification and returning FALSE when not found.
 *
 * @return string
 *   The required type.
 * @throws \ServicesException
 *   Throws an exception if the field could not be mapped.
 */
function openlucius_services_field_mapping($type, $field, $reverse = FALSE, $skip = FALSE) {
  $mapping = array(
    'global'       => array(
      'title'        => 'title',
      'group'        => 'field_shared_group_reference',
      'files'        => 'field_shared_files',
      'show_clients' => 'field_shared_show_clients',
      'body'         => 'body',
    ),
    'ol_todo'      => array(
      'todo_list' => 'field_todo_list_reference',
      'status'    => 'field_todo_label',
      'user'      => 'field_todo_user_reference',
      'date'      => 'field_todo_due_date_singledate',
    ),
    'ol_event'     => array(
      'date'     => 'field_event_date',
      'location' => 'field_event_location',
    ),
    'ol_todo_list' => array(
      'body' => 'field_todolist_description',
    ),
    'user'         => array(
      'name'     => 'name',
      'password' => 'pass',
      'mail'     => 'mail',
      'phone'    => 'field_user_phone',
      'groups'   => 'field_groups',
      'body'     => 'field_user_about_me',
      'labels'   => 'field_user_tags',
      'teams'    => 'field_user_teams',
      'picture'  => 'picture',
    ),
    'comment'      => array(
      'id'           => 'nid',
      'show_clients' => 'field_todo_comm_show_clients',
      'body'         => 'comment_body',
    ),
  );

  // Allow other modules to alter the field mapping.
  drupal_alter('openlucius_services_field_mapping_alter', $mapping);

  // Reverse array.
  if ($reverse) {

    // Loop through mapping to reverse.
    foreach ($mapping as $key => $value) {
      $mapping[$key] = array_flip($value);
    }
  }

  // Check if there's a specific field mapping for a node type.
  if (isset($mapping[$type][$field])) {
    return $mapping[$type][$field];
  }
  // Check if there's a global field mapping.
  elseif (isset($mapping['global'][$field])) {
    return $mapping['global'][$field];
  }

  // Skip when skip is true.
  if (!$skip) {

    // Return error as this combination of type and action is not implemented.
    openlucius_services_error(OPENLUCIUS_SERVICES_ERROR_NOT_IMPLEMENTED_YET, array(
      "@type"   => '[' . $type . '][' . $field . ']',
      '@method' => 'openlucius_services_field_mapping',
      '@see'    => 'openlucius_services.module',
    ));
  }

  return FALSE;
}

/**
 * Custom filter hook to prevent updating certain fields on a the edit request.
 *
 * @param array $data
 *   The data array to be filtered.
 * @param string $node_type
 *   The node type to use for filtering.
 */
function openlucius_services_fields_filter(array &$data, $node_type) {
  // Normal exclusion.
  $exclude = array('field_shared_group_reference');

  // Check if a module uses our function.
  if (count(module_implements('openlucius_services_fields_filter')) > 0) {

    $exclude = module_invoke_all('important_function', $exclude);
  }

  // Exclude show_clients if the user is a client.
  // That would really mess things up.
  if (openlucius_core_user_is_client() && isset($data['show_clients'])) {
    unset($data['show_clients']);
  }

  // Check if we have data.
  if (!empty($data)) {

    // Loop through fields.
    foreach ($data as $field => $value) {

      // Fetch the real field.
      $drupal_field = openlucius_services_field_mapping($node_type, $field);

      // Unset fields to be excluded.
      if (in_array($drupal_field, $exclude)) {
        unset($data[$field]);
      }
    }
  }
}

/**
 * Function to obtain the node requirements for a certain action.
 *
 * @param string $type
 *   The node type for which the action is to be applied.
 * @param string $action
 *   The action to be applied.
 *
 * @return bool|mixed
 * @throws \ServicesException
 *   Throws an exception if the error was found.
 */
function _openlucius_services_entity_requirements($type, $action = OPENLUCIUS_SERVICES_CREATE) {
  $requirements = array(
    'todo'          => array(
      OPENLUCIUS_SERVICES_CREATE => array(
        'title',
        'group',
        'todo_list',
      ),
      OPENLUCIUS_SERVICES_MOVE   => array(
        'group',
        'todo_list',
      ),
    ),
    'todo_list'     => array(
      OPENLUCIUS_SERVICES_CREATE => array(
        'title',
        'group',
      ),
      OPENLUCIUS_SERVICES_MOVE   => array('group'),
    ),
    'group'         => array(
      OPENLUCIUS_SERVICES_CREATE => array(
        'title',
      ),
    ),
    'folder'        => array(
      OPENLUCIUS_SERVICES_CREATE => array(
        'title',
        'group',
      ),
      OPENLUCIUS_SERVICES_MOVE   => array('group'),
    ),
    'text_document' => array(
      OPENLUCIUS_SERVICES_CREATE => array(
        'title',
        'group',
      ),
      OPENLUCIUS_SERVICES_MOVE   => array('group'),
    ),
    'team'          => array(
      OPENLUCIUS_SERVICES_CREATE => array(
        'title',
      ),
    ),
    'message'       => array(
      OPENLUCIUS_SERVICES_CREATE => array(
        'title',
        'group',
      ),
      OPENLUCIUS_SERVICES_MOVE   => array('group'),
    ),
    'user'          => array(
      OPENLUCIUS_SERVICES_CREATE => array(
        'name',
        'mail',
        'groups',
        'role',
      ),
    ),
    'comment'       => array(
      OPENLUCIUS_SERVICES_CREATE => array(
        'body',
        'id',
      ),
    ),
  );

  // Allow other modules to alter the requirements.
  drupal_alter('openlucius_services_node_requirements', $requirements);

  // Return the requirements if they exist.
  if (isset($requirements[$type][$action])) {
    return $requirements[$type][$action];
  }

  // Return error as this combination of type and action is not implemented.
  openlucius_services_error(OPENLUCIUS_SERVICES_ERROR_NOT_IMPLEMENTED_YET, array(
    "@type"   => '[' . $type . '][' . $action . ']',
    '@method' => '_openlucius_services_entity_requirements',
    '@see'    => 'includes/resource.crud.inc',
  ));
}
