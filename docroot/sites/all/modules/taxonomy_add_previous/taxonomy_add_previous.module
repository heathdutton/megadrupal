<?php
/**
 * @file taxonomy_add_previous.module
 * Presents values from the previous taxonomy term form in the new form when
 * adding taxonomy terms sequentially.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the taxonomy_form_term form.
 */
function taxonomy_add_previous_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  // Bail for the stupid WTF term delete form that's secretly this form all over again.
  if (isset($form_state['triggering_element']) && $form_state['triggering_element']['#parents'][0] == 'delete') {
    return;
  }
  if (!empty($form['#term']['tid'])) {
    // This check shouldn't be necessary, but just in case, bail for an edit form.
    return;
  }

  if (isset($_SESSION['taxonomy_add_previous'])) {
    $previous_term = taxonomy_term_load($_SESSION['taxonomy_add_previous']);

    // Sanity check that it's in the same vocabulary, just in case another
    // module changes the redirect on taxonomy add term forms and we don't
    // get back here.
    $vocabulary_name = $form['#term']['vocabulary_machine_name'];
    if ($previous_term->vocabulary_machine_name == $vocabulary_name) {
      // Get a fake form for the previous taxonomy term. We don't need the full
      // form builder chain; calling the builder with a faked up form state
      // suffices (and means we don't have to worry about recursively getting
      // back here or interfering with the form build process of the real form).
      $fake_form_state = array();
      $fake_form = taxonomy_form_term(array(), $fake_form_state, $previous_term);

      // Remove the term name default value from the fake form, as we don't
      // want that to end up in the current form.
      $fake_form['name']['#default_value'] = '';

      //dsm($previous_term, 'prev');
      //dsm($fake_form, '$fake_form');
      //dsm($fake_form_state, '$fake_form_state');

      // Add the fake form to the form state so our process function can pull
      // default values from it. Namespace our property to avoid collisions.
      $form_state['taxonomy_add_previous_previous_term_form'] = $fake_form;
      
      // Set our process function on the field elements.
      // TODO: figure out why setting it on the whole form -- even with skipping
      // of 'token' type elements -- causes form token validation to fail.
      // Not that it matters that much, just that setting it on the whole form
      // and letting the process function then add itself on form elements all
      // the way down was rather elegant.
      $fields = field_info_instances('taxonomy_term', $vocabulary_name);
      foreach (array_keys($fields) as $field_name) {
        taxonomy_add_previous_taxonomy_form_alter_recurse($form[$field_name], $form_state, $fake_form[$field_name]);
      }

      // Inform the user that the previous values have been placed into the form.
      if (!empty($form_state['taxonomy_add_previous']['replaced'])) {
        drupal_set_message(t('Values from the previously saved term %term have been pre-filled into the form below.', array(
          '%term' => $previous_term->name,
        )));
      }
    }

    // In all cases, remove our session variable so browsing to another page
    // without adding a term yet again doesn't cause this to linger.
    unset($_SESSION['taxonomy_add_previous']);
  }

  $form['actions']['taxonomy_add_previous_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save and add similar'),
    '#weight' => 10,
  );

  // Add our custom submit handler. This takes care of saving the term just
  // added for the next iteration of this form to make use of.
  $form['#submit'][] = 'taxonomy_add_previous_taxonomy_form_term_submit';
  //dsm($form, 'complete real $form');
}

/**
 * Recursive form_alter helper to set default values from the fake form.
 *
 * (Yes, this is a custom pipeline as advised against in form_builder(), but
 * I've tried using #process till my eyes bleed and it doesn't work).
 *
 * @param $element
 *  The form element.
 * @param $form_state
 *  The full form state.
 * @param $fake_element
 *  The matching element from the previous term's fake form. We pass this in
 *  rather than rely on the complete fake form because #parents properties have
 *  not yet been set; hence we cannot find our way into the fake form array
 *  based on just the $element array.
 */
function taxonomy_add_previous_taxonomy_form_alter_recurse(&$element, &$form_state, $fake_element) {
  //dsm($element, 'recurse element');
  //dsm($fake_element, 'recurse fake element');
  if (array_key_exists('#default_value', $fake_element)) {
    $element['#default_value'] = $fake_element['#default_value'];
    $form_state['taxonomy_add_previous']['replaced'] = TRUE;
  }

  // Recurse into the element's children. Note we match the descent into
  // $element with $fake_element.
  foreach (element_children($element) as $key) {
    taxonomy_add_previous_taxonomy_form_alter_recurse($element[$key], $form_state, $fake_element[$key]);
  }
}

/**
 * Custom submit handler for the taxonomy term form.
 *
 * Store the tid of the term just saved in the session.
 */
function taxonomy_add_previous_taxonomy_form_term_submit($form, &$form_state) {
  // It's a pain having to check this, but it's harder to make the form's basic
  // submit handlers run here if we set this handler as a #submit on the
  // button. DrupalWTF.
  if ($form_state['triggering_element']['#parents'][0] === 'taxonomy_add_previous_submit') {
    $term = $form_state['term'];
    $_SESSION['taxonomy_add_previous'] = $term->tid;
  }
}
