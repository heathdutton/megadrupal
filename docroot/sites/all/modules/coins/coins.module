<?php

/**
 * @file
 * Main module file for COinS.
 */

/**
 * Implements hook_menu().
 */
function coins_menu() {
  $items = array();

  $items['admin/config/search/coins'] = array(
    'title' => 'COinS',
    'description' => 'Configure the COinS module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('coins_config_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'coins.admin.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_field_extra_fields().
 */
function coins_field_extra_fields() {
  $extra = array();

  $types = array_keys(node_type_get_types());
  foreach ($types as $type) {
    $extra['node'][$type] = array(
      'form' => array(
        'coins' => array(
          'label' => "COinS",
          'description' => "COinS",
          'weight' => 0,
        ),
      ),
      'display' => array(
        'coins' => array(
          'label' => "COinS",
          'description' => "COinS",
          'weight' => 0,
        ),
      ),
    );
  }

  return $extra;
}

/**
 * Implements hook_node_view().
 */
function coins_node_view($node, $view_mode, $langcode) {
  $node->content['coins'] = array(
    '#markup' => coins_generate($node),
  );
}

/**
 * Generate COinS.
 *
 * Coded adapted from biblio module https://drupal.org/project/biblio.
 */
function coins_generate($node) {
  $span = '';
  $fmt = "info:ofi/fmt:kev:mtx:";

  $node->biblio_type = coins_detect_type($node);
  if (isset($node->biblio_type)) {
    // 'dissertation' is compatible with the 1.0 spec, but not the 0.1 spec.
    if ($node->biblio_type == 'thesis') {
      $fmt .= "dissertation";
    }
    elseif ($node->biblio_type == 'journal') {
      $fmt .= "journal";
    }
    elseif ($node->biblio_type == 'book' || $node->biblio_type == 'section') {
      $fmt .= "book";
    }
    // 'dc' (dublin core) is compatible with the 1.0 spec, but not the 0.1 spec.
    // We default to this, as it is the most generic type.
    else {
      $fmt .= "dc";
    }

    $co = coins_get_context_object($node);
    $coins = "ctx_ver=Z39.88-2004&amp;rft_val_fmt=" . urlencode($fmt);
    foreach ($co as $key => $value) {
      $key = preg_replace("/au[0-9]*/", "au", $key);
      $coins .= "&amp;" . $key . "=" . $value;
    }
    $span = "<span class=\"Z3988\" title=\"" . $coins . "\"></span>";
  }

  return $span;
}

/**
 * Detect COinS type.
 */
function coins_detect_type($node) {
  $type = NULL;

  $rules = variable_get('coins_type_detection_rules', array());
  foreach ($rules as $rule) {
    if (isset($node->{$rule['field']})) {
      $values = array();
      if (is_array($node->{$rule['field']})) {
        $items = field_get_items('node', $node, $rule['field']);
        if ($items !== FALSE) {
          foreach ($items as $item) {
            if (isset($item['value'])) {
              $values[] = $item['value'];
            }
            elseif (isset($item['tid'])) {
              // TODO Load taxonomy term ?
              $values[] = $item['tid'];
            }
          }
        }
      }
      else {
        $values[] = $node->{$rule['field']};
      }

      foreach ($values as $value) {
        if (preg_match($rule['regex'], $value)) {
          $type = $rule['type'];
          break;
        }
      }

      if (isset($type)) {
        break;
      }
    }
  }

  return $type;
}

/**
 * Extract field value from node.
 */
function coins_get_field_value($node, $fieldname) {
  $value = NULL;

  if (!empty($node->{$fieldname})) {
    $items = field_get_items('node', $node, $fieldname);
    $value = check_plain($items[0]['value']);
  }

  return $value;
}

/**
 * Build context object from node.
 */
function coins_get_context_object($node) {
  $co = array();
  $coins_mappings = variable_get('coins_mappings', array());
  extract($coins_mappings);

  $type = $node->biblio_type;

  $title = $node->title;
  if ($type == 'book' || $type == 'section') {
    if ($type == 'section') {
      $title = coins_get_field_value($node, $btitle);
      $co['rft.genre'] = 'bookitem';
      $co["rft.atitle"] = check_plain($node->title);
    }
    else {
      $co['rft.genre'] = 'book';
      $co["rft.issn"] = coins_get_field_value($node, $issn);
    }
    $co['rft.btitle'] = $title;
    $co['rft.series'] = coins_get_field_value($node, $series);
    $co["rft.pub"] = coins_get_field_value($node, $publisher);
    $co["rft.place"] = coins_get_field_value($node, $place_published);
  }
  elseif ($type == 'journal') {
    $co['rft.jtitle'] = $title;
    $co["rft.stitle"] = coins_get_field_value($node, $stitle);
    $co['rft.genre'] = 'journal';
    $co["rft.issue"] = coins_get_field_value($node, $issue);
    $co["rft.atitle"] = check_plain($node->title);
    $co["rft.issn"] = coins_get_field_value($node, $issn);
    $co["rft.volume"] = coins_get_field_value($node, $volume);
  }
  $co['rft.title'] = $title;

  if (!empty($node->{$pages})) {
    if (preg_match("/[0-9] *- *[0-9]/", $node->{$pages})) {
      list ($pagestart, $pageend) = preg_split('/\s*[-]\s*/', $node->{$pages});
      if ($pagestart < $pageend) {
        $co["rft.spage"] = check_plain($pagestart);
        $co["rft.epage"] = check_plain($pageend);
      }
    }
    elseif ($node->biblio_type == 'book') {
      $pagetotal = preg_replace('/^(\d+)\s*pp?\.?$/', "\\1", $node->{$pages});
      $co["rft.tpages"] = check_plain($pagetotal);
    }
    else {
      $co["rft.spage"] = check_plain($node->{$pages});
    }
  }

  if (!empty($node->{$authors})) {
    $items = field_get_items('node', $node, $authors);
    for ($i = 0; $i < count($items); $i++) {
      $co["rft.au" . $i] = $items[$i]['value'];
    }
  }
  $id = coins_get_field_value($node, $doi);
  if (isset($id)) {
    $co["rft_id"] = "info:doi/$id";
  }

  $co["rft.isbn"] = coins_get_field_value($node, $isbn);
  $co["rft.date"] = coins_get_field_value($node, $year);

  return array_filter($co);
}
