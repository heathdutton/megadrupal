<?php

function moderation_log_init() {
  drupal_add_css(drupal_get_path('module', 'moderation_log') . '/moderation_log.css');
}
/**
 * Implements hook_help.
 */
function moderation_log_help($path, $arg) {

  switch ($path) {
    case "admin/modules#description":
      return t("Logs the comment and node updates done by site moderators and displays them in a block.");
  }
}

/**
 * Implements hook_node_update.
 */
function moderation_log_node_update($node) {
  global $user;

  if (!empty($node->uid) && !empty($user->uid) && $node->uid != $user->uid) {
    $reasons = array();
    foreach($_POST['moderation_log'] as $value) {
      db_query('INSERT INTO {moderation_reason_node} VALUES (:nid, :value, :uid)', array(
        'nid' => $node->nid,
        'value'=> $value,
        'uid' => $user->uid));
      $term = taxonomy_term_load($value);
      $reasons[] = $term->name;
    }
    db_query('INSERT INTO {moderation_log_node} VALUES (:uid, :nid, :time, :action, :type, :title)', array(
      'uid' => $user->uid,
      'nid' => $node->nid,
      'time' => time(),
      'action' => 'update',
      'type' => $node->type,
      'title' => $node->title));
    $account = user_load($node->uid);
    $params = array(
      'account' => $account,
      'user' => $user,
      'title' => $node->title,
      'moderation_reasons' => $reasons,
    );
    drupal_mail('moderation_log', 'node_update', $account->mail, user_preferred_language($account), $params);
  }
}

/**
 * Implements hook_node_delete.
 */
function moderation_log_node_delete($node) {
  global $user;

  if (!empty($node->uid) && !empty($user->uid) && $node->uid != $user->uid) {
    $reasons = array();
    foreach($_POST['moderation_log'] as $value) {
      db_query('INSERT INTO {moderation_reason_node} VALUES (:nid, :value, :uid)', array(
        'nid' => $node->nid,
        'value'=> $value,
        'uid' => $user->uid));
      $term = taxonomy_term_load($value);
      $reasons[] = $term->name;
    }
    db_query('INSERT INTO {moderation_log_node} VALUES (:uid, :nid, :time, :action, :type, :title)', array(
      'uid' => $user->uid,
      'nid' => $node->nid,
      'time' => time(),
      'action' => 'delete',
      'type' => $node->type,
      'title' => $node->title));
    $account = user_load($node->uid);
    $params = array(
      'account' => $account,
      'user' => $user,
      'title' => $node->title,
      'moderation_reasons' => $reasons,
    );
    drupal_mail('moderation_log', 'node_delete', $account->mail, user_preferred_language($account), $params);
  }
}

/**
 * Implements hook_comment_update().
 */
function moderation_log_comment_update($comment) {
  global $user;

  if(!empty($user->uid) && !empty($comment->uid) && $comment->uid != $user->uid) {
    $reasons = array();
    foreach($_POST['moderation_log'] as $value) {
      db_query('INSERT INTO {moderation_reason_comment} VALUES (:cid, :value, :uid)', array(
        'cid' => $comment->cid,
        'value'=> $value,
        'uid' => $user->uid));
      $term = taxonomy_term_load($value);
      $reasons[] = $term->name;

    }
    db_query('INSERT INTO {moderation_log_comment} VALUES (:uid, :cid, :time, :action, :subject)', array(
      'uid' => $user->uid,
      'cid' => $comment->cid,
      'time' => time(),
      'action' => 'update',
      'subject'=> $comment->subject));
    $account = user_load($comment->uid);
    $params = array(
      'account' => $account,
      'user' => $user,
      'title' => $comment->subject,
      'moderation_reasons' => $reasons,
    );
    drupal_mail('moderation_log', 'comment_update', $account->mail, user_preferred_language($account), $params);
  }
}

/**
 * Implements of hook_comment_delete.
 */
function moderation_log_comment_delete($comment) {
  global $user;

  if(!empty($user->uid) && !empty($comment->uid) && $comment->uid != $user->uid) {
    $reasons = array();
    foreach($_POST['moderation_log'] as $value) {
      db_query('INSERT INTO {moderation_reason_comment} VALUES (:cid, :value, :uid)', array(
        'cid' => $comment->cid,
        'value'=> $value,
        'uid' => $user->uid));
      $term = taxonomy_term_load($value);
      $reasons[] = $term->name;
    }
    db_query('INSERT INTO {moderation_log_comment} VALUES (:uid, :cid, :time, :action, :subject)', array(
      'uid' => $user->uid,
      'cid' => $comment->cid,
      'time' => time(),
      'action' => 'delete',
      'subject'=> $comment->subject));
    $account = user_load($comment->uid);
    $params = array(
      'account' => $account,
      'user' => $user,
      'title' => $comment->subject,
      'moderation_reasons' => $reasons,
    );
    drupal_mail('moderation_log', 'comment_delete', $account->mail, user_preferred_language($account), $params);
  }
}

/**
 * Implements hook_block_info.
 */
function moderation_log_block_info() {
 $blocks['moderation_log'] = array(
    'info' => t('Moderation Log'),
    'cache' => DRUPAL_CACHE_GLOBAL
  );
 return $blocks;
}

/**
 *Implements hook_block_view.
 */
function moderation_log_block_view($delta) {
  $block = array(); $block_content='';
  switch ($delta) {
    case 'moderation_log':
      $moderation_log_listsize=variable_get('moderation_log_listsize', 25);
      // Node moderation statistics
      $query = db_select('moderation_log_node', 'mln');
      $query->leftjoin('users', 'u', 'u.uid = mln.uid');
      $query->fields('mln', array('uid'));
      $query->fields('u', array('name'));
      $query->addExpression('COUNT(mln.uid)', 'count');
      $query->groupBy('mln.uid');
      $query->orderBy('count', 'DESC');
      $query->range(0, $moderation_log_listsize);
      $result = $query->execute();
      $block_content .= '<table>';
      $block_content .= '<tr><th colspan="2">' . l(t("Node moderation statistics"), 'moderation_log_node') .'</th></tr>';
      foreach($result as $record) {
        $block_content .= '<tr>';
        $block_content .= '<td>' . theme('username', array('account' => $record)) . '</td>';
        $block_content .= '<td>' . $record->count . '</td>';
        $block_content .= '</tr>';
      }
      $block_content .= '</table>';

      // Comment moderation statistics
      $query = db_select('moderation_log_comment', 'mlc');
      $query->leftjoin('users', 'u', 'u.uid = mlc.uid');
      $query->fields('mlc', array('uid'));
      $query->fields('u', array('name'));
      $query->addExpression('COUNT(mlc.uid)', 'count');
      $query->groupBy('mlc.uid');
      $query->orderBy('count', 'DESC');
      $query->range(0, $moderation_log_listsize);
      $result = $query->execute();
      $block_content .= '<table>';
      $block_content .= '<tr><th colspan="2">' .l(t("Comment moderation statistics"), 'moderation_log_comment') .'</th></tr>';
      foreach($result as $record) {
        $block_content .= '<tr>';
        $block_content .= '<td>' . theme('username', array('account' => $record)) . '</td>';
        $block_content .= '<td>' . $record->count . '</td>';
        $block_content .= '</tr>';
      }
      $block_content .= '</table>';

      // check to see if there was any content before setting up the block
      if ($block_content == '') {
        // no content from a week ago, return nothing.
        return;
      }

      // set up the block
      $block['subject'] = t("Moderation Log");
      $block['content'] = $block_content;
  }

  return $block;
}


/**
 * Cronjob to execute on expired moderation logs
 */
function moderation_log_cron() {
  $timespan = time() - variable_get('moderation_log_expire', 365)*86400;
  db_query("DELETE FROM {moderation_log_node} WHERE date < :timespan", array('timespan' => $timespan));
  db_query("DELETE FROM {moderation_log_comment} WHERE date < :timespan", array('timespan' => $timespan));
}

/**
 * hook_menu() implementation
 */
function moderation_log_menu() {
  $items = array();

  $items['moderation_log_node'] = array(
    'title' => 'Moderation Log for nodes',
    'page callback' => 'moderation_log_nodepage',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  $items['moderation_log_comment'] = array(
    'title' => 'Moderation Log for comments',
    'page callback' => 'moderation_log_commentpage',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  $items['admin/settings/moderation_log'] = array(
    'title' => t('Moderation Log Settings'),
    'description' => t('Configure Moderation Log module here.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moderation_log_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Detailed moderation log for nodes
 */
function moderation_log_nodepage() {
  $moderation_log_listsize=variable_get('moderation_log_listsize', 25);
  $header = array(
      array('data' => t('Date'),      'field' => 'date', 'sort' => 'desc'),
      array('data' => t('Title'),      'field' => 'title'),
      array('data' => t('Moderator'),    'field' => 'name',),
      array('data' => t('Action'),    'field' => 'action'),
      array('data' => t('Reason'),    'field' => 'reason')
    );
  $rows = array();

  $query = db_select('moderation_log_node', 'mln');
  $query->leftjoin('users', 'u', 'u.uid = mln.uid');
  $query->leftjoin('moderation_reason_node', 'mrn', 'mrn.nid = mln.nid');
  $query->leftjoin('taxonomy_term_data', 'td', 'mrn.tid = td.tid');
  $query->fields('mln', array('nid', 'uid', 'date', 'action', 'title'));
  $query->fields('u', array('name'));
  $query->addExpression('GROUP_CONCAT(td.name separator \', \')', 'reason');
  $query->groupBy('mln.nid');
  $query->range(0, $moderation_log_listsize);
  $query = $query->extend('TableSort');
  $query->orderByHeader($header);
  $result = $query->execute();

  foreach($result as $record) {
    $row = array(
      format_date($record->date,'medium'),
      l($record->title, 'node/'.$record->nid),
      l($record->name, 'user/'.$record->uid),
      $record->action,
      $record->reason
    );
   $rows[] = $row;
  }

  $build = array();
  $build['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );
  $build['pager'] = array(
    '#theme' => 'pager',
  );
  return $build;

}

/**
 * Detailed moderation statistics for comments
 */
function moderation_log_commentpage() {
  $moderation_log_listsize=variable_get('moderation_log_listsize', 25);
  $header = array(
      array('data' => t('Date'),      'field' => 'date', 'sort' => 'desc'),
      array('data' => t('Subject'),      'field' => 'subject'),
      array('data' => t('Moderator'),    'field' => 'name',),
      array('data' => t('Action'),    'field' => 'action'),
      array('data' => t('Reason'),    'field' => 'reason')
    );
  $rows = array();

  $query = db_select('moderation_log_comment', 'mlc');
  $query->leftjoin('users', 'u', 'u.uid = mlc.uid');
  $query->leftjoin('moderation_reason_comment', 'mrc', 'mrc.cid = mlc.cid');
  $query->leftjoin('taxonomy_term_data', 'td', 'mrc.tid = td.tid');
  $query->fields('mlc', array('cid', 'uid', 'date', 'action', 'subject'));
  $query->fields('u', array('name'));
  $query->addExpression('GROUP_CONCAT(td.name separator \', \')', 'reason');
  $query->groupBy('mlc.cid');
  $query->range(0, $moderation_log_listsize);
  $query = $query->extend('TableSort');
  $query->orderByHeader($header);
  $result = $query->execute();

  foreach($result as $record) {
    $row = array(
      format_date($record->date,'medium'),
      l($record->subject, 'comment/'.$record->cid, array('fragment' =>  'comment-'.$record->cid)),
      l($record->name, 'user/'.$record->uid),
      $record->action,
      $record->reason
    );
   $rows[] = $row;
  }

  if (!$rows) {
    $rows[] = array(
      array('data' => t('No data.'), 'colspan' => count($header))
    );
  }
  $build = array();
  $build['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );
  $build['pager'] = array(
    '#theme' => 'pager',
  );
  return $build;
}

/**
 * Implements hook_admin/
 */
function moderation_log_admin() {

  $form = array();

  $options = array();
  $options[-1] = t('- None -');
  $vocabularies = taxonomy_get_vocabularies();
  foreach ($vocabularies as $vocabulary) {
     $options[$vocabulary->vid] = $vocabulary->name;
  }

  $form['moderation_log_reasons'] = array (
                    '#type' => 'select',
                    '#title' => t("Moderation reasons"),
                    '#default_value' => variable_get('moderation_log_reasons'),
                    '#options' => $options,
                    '#description' => "Vocabulary that lists moderation reasons",
                    '#required' => FALSE);

  $form['moderation_log_listsize'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Maximum list size'),
                    '#default_value' => variable_get('moderation_log_listsize', 25),
                    '#description' => t("The maximum number of moderators to display in the block as well as on the page size for the detailed statistics"),
                    '#maxlength' => '2',
                    '#required' => TRUE,
                    '#size' => '2');

  $form['moderation_log_expire'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Moderation logs expire after'),
                    '#default_value' => variable_get('moderation_log_expire', 365),
                    '#description' => t("How many days to keep the moderation logs"),
                    '#maxlength' => '5',
                    '#required' => TRUE,
                    '#field_suffix' => t('days'),
                    '#size' => '5');

  $form['moderation_log_collapsed'] = array (
                    '#type' => 'checkbox',
                    '#title' => t("Collapse Moderation Reason breadcrump"),
                    '#default_value' => variable_get('moderation_log_collapsed', 0),
                    '#description' => "Collapse Moderation Reason options on node edit and delete pages.",
                    '#required' => FALSE);
  return system_settings_form($form);
}

function moderation_log_admin_validate($form, &$form_state) {
  # validate listsize
  $listsize = $form_state['values']['moderation_log_listsize'];
  if (!is_numeric($listsize)) {
    form_set_error('moderation_log_listsize', t('You must enter an integer for the size of the Moderation Log lists in blocks'));
  }
  else if ($listsize <= 0) {
    form_set_error('moderation_log_listsize', t('The value for the size of the Moderation Log lists must be positive.'));
  }

  $expire = $form_state['values']['moderation_log_expire'];
  # validate expire
  if (!is_numeric($expire)) {
    form_set_error('moderation_log_expire', t('You must enter an integer for the number of days after which the Moderation Log statistics will be expired.'));
  }
  else if ($expire <= 0) {
    form_set_error('moderation_log_expire', t('The value for the number of days after which the Moderation Log statistics will be expired must be positive.'));
  }
}

function moderation_log_form_alter(&$form, &$form_state, $form_id) {
  if ((($form_id == "node_delete_confirm"  || preg_match('/^.*_node_form$/', $form_id)) && user_access('edit any forum topic')) ||
      ((preg_match('/^comment_node_.*_form$/',  $form_id) || ($form_id == "comment_confirm_delete"))  && user_access('administer comments'))) {
    $result = db_query("SELECT td.tid,td.name FROM {taxonomy_term_data} td JOIN ({taxonomy_vocabulary} v) ON (v.vid=td.vid) WHERE v.vid=".
    variable_get('moderation_log_reasons'));
    $_moderation_reason = array();
    foreach ($result as $line) {
      $_moderation_reason[$line->tid] = $line->name;
    }
    if ($_moderation_reason) {
      $form['moderation_log'] = array(
        '#type' => 'fieldset',
        '#title' => t('Moderation Reason'),
        '#collapsible' => TRUE,
        '#collapsed' => variable_get('moderation_log_collapsed', 0),
      );
      $form['moderation_log']['moderation_reason'] = array(
        '#type' => 'checkboxes',
        '#parents' => array('moderation_log'),
        '#options' => $_moderation_reason
      );
    }
  }
  return $form;
}

function moderation_log_mail($key, &$message, $params) {
  global $base_url;
  $options = array(
    'langcode' => $message['language']->language,
  );
  switch($key) {
    case 'node_update':
      $message['subject'] = t('Your post was moderated on  @site-name', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      // Note that the message body is an array, not a string.
      $message['body'][] = t('@name moderated  "@title"', array('@name' => $params['user']->name, '@title' => $params['title']), $options);
      $message['body'][] = t('Moderation reasons:');
      foreach($params['moderation_reasons'] as $reason) {
        $message['body'][] = t($reason);
      }
      break;
    case 'node_delete':
      $message['subject'] = t('Your post was deleted from  @site-name', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      // Note that the message body is an array, not a string.
      $message['body'][] = t('@name deleted "@title"', array('@name' => $params['user']->name, '@title' => $params['title']), $options);
      $message['body'][] = t('Moderation reasons:');
      foreach($params['moderation_reasons'] as $reason) {
        $message['body'][] = t($reason);
      }
      break;
    case 'comment_update':
      $message['subject'] = t('Your comment was moderated on  @site-name', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      // Note that the message body is an array, not a string.
      $message['body'][] = t('@name moderated "@title"', array('@name' => $params['user']->name, '@title' => $params['title']), $options);
      $message['body'][] = t('Moderation reasons:');
      foreach($params['moderation_reasons'] as $reason) {
        $message['body'][] = t($reason);
      }
      break;
    case 'comment_delete':
      $message['subject'] = t('Your comment was deleted from  @site-name', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      // Note that the message body is an array, not a string.
      $message['body'][] = t('@name deleted "@title"', array('@name' => $params['user']->name, '@title' => $params['title']), $options);
      $message['body'][] = t('Moderation reasons:');
      foreach($params['moderation_reasons'] as $reason) {
        $message['body'][] = t($reason);
      }
      break;

  }
}
