<?php

/**
 * @file
 * FBPhoto module.
 */

require_once dirname(__FILE__) . '/fbphoto.hooks.inc';

/**
 * Filter process callback.
 * @see fbphoto_filter_info().
 */
function fbphoto_filter_callback($text, $filter) {
  $parser = new fbphoto_parser($text);
  list($find, $replace) = $parser->parse();

  if (!empty($find)) {
    $text = str_replace($find, $replace, $text);
  }

  return $text;
}

/**
 * Get Facebook photo by ID.
 */
function fbphoto_get_photo($id, $refresh = FALSE) {
  if (!$refresh && ($cache = cache_get("fbphoto:{$id}"))) {
    return $cache->data;
  }

  if ($photo = fbphoto_request("http://graph.facebook.com/{$id}")) {
    cache_set("fbphoto:{$id}", $photo, 'cache', CACHE_TEMPORARY);
    return $photo;
  }
  return null;
}

/**
 * Get Facebook album photos by ID.
 */
function fbphoto_get_album_photos($id, $refresh = FALSE) {
  if (!$refresh && ($cache = cache_get("fbphoto:{$id}"))) {
    return $cache->data;
  }

  if ($album = fbphoto_request("http://graph.facebook.com/{$id}")) {
    if ($photos = fbphoto_fetch_album_photos($album, $id)) {
      $return = array('info' => $album, 'photos' => $photos);
      cache_set("fbphoto:{$id}", $return, 'cache', CACHE_TEMPORARY);
      return $return;
    }
  }
  return null;
}

/**
 * Fetch Album photo.
 */
function fbphoto_fetch_album_photos($album, $id = NULL, $url = NULL) {
  $photos = array();
  $url = !empty($url) ? $url : "http://graph.facebook.com/{$id}/photos";
  if ($graph = fbphoto_request($url)) {
    $photos = array_merge($photos, $graph->data);
    if (count($photos) < $album->count && !empty($graph->paging->next)) {
      $photos = array_merge($photos, fbphoto_fetch_album_photos($album, NULL, $graph->paging->next));
    }
  }
  return $photos;
}

/**
 * Helper function to perform the http requests.
 */
function fbphoto_request($url, $method = 'GET') {
  $response = drupal_http_request($url, array('method' => $method));
  if (empty($response->error)) {
    if ($response->data = json_decode($response->data)) {
      return $response->data;
    }
    throw new Exception('Can not parse response data');
  }

  throw new Exception($response->error);
}

/**
 * Theming callback to render picture.
 */
function theme_fbphoto_photo($vars) {
  $photo = & $vars['photo'];
  $img = $photo->images[1];
  $name = isset($photo->name) ? check_plain($photo->name) : check_plain(t("Picture from {$photo->from->name}"));
  return array(
      '#theme' => 'image',
      '#attributes' => array('id' => "fbphoto-photo-{$photo->id}"),
      '#path' => $img->source,
      '#height' => $img->height,
      '#width' => $img->width,
      '#title' => $name,
      '#prefix' => '<div class="fbphoto-photo">',
      '#suffix' => '<div class="caption">' . (isset($photo->name) ? $name : '') . '</div></div>',
      '#attached' => array(
          'css' => array(drupal_get_path('module', 'fbphoto') . '/fbphoto.css', 'file'),
      ),
  );
}

/**
 * Theme callback to render album.
 */
function theme_fbphoto_album($vars) {
  $items = array();
  $album = & $vars['album'];
  if (!empty($album)) {
    foreach ($album['photos'] as $photo) {
      $bg_image = fbphoto_get_best_photo($photo);
      $items[] =
          l("<div style='background-image: url($bg_image);'></div>",
              $photo->source,
              array(
                  'html' => TRUE,
                  'attributes' => array(
                      "class" => "colorbox",
                      "rel" => "lightshow[{$album['info']->id}]",
                      "title" => variable_get('site_name') . ', ' . variable_get('site_slogan'),
                  )
              )
          );
    }

    return array(
        '#theme' => 'item_list',
        '#items' => $items,
        '#attributes' => array('id' => "fbphoto-album-{$album['info']->id}", 'class' => array('fbphoto-album')),
        '#prefix' => '<div>',
        '#suffix' => '<div class="clearfix"></div></div>',
        '#attached' => array(
            'css' => array(drupal_get_path('module', 'fbphoto') . '/fbphoto.css', 'file'),
        ),
    );
  }
  return null;
}

/**
 * @param $photo
 * @return string
 *   url of the best fit photo for the listing.
 */
function fbphoto_get_best_photo($photo) {
  // default to the first candidate.
  $bg_image = $photo->images[0]->source;

  $sizes = array();
  foreach ($photo->images as $image) {
    // first check if a 225 height image is present and return it.
    if ($image->height == 225) {
      $bg_image = $image->source;
      $sizes = array();
      break;
    }

    // filter out the images that are less than 200px
    if ($image->height > 200 and $image->width > 200)
      $sizes[$image->height * $image->width] = $image->source;
  }

  // if there are good candidates, take the smallest dimension.
  if (count($sizes) > 0) {
    ksort($sizes);
    $bg_image = current($sizes);
  }

  return $bg_image;
}
