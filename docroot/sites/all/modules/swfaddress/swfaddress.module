<?php

/**
 * @file
 *
 * SWFAddress module helps you integrate Flash with Drupal in a more modern way.
 *
 */

define('SWFADDRESS_SWFADDRESS_HREF', 'http://www.asual.com/swfaddress');
define('SWFADDRESS_SWFOBJECT_HREF', 'http://code.google.com/p/swfobject/');

/**
 * Implements hook_init().
 */
function swfaddress_init() {
  $base = _swfaddress_base_path();
  $path = $_SERVER['QUERY_STRING'];

  // We must use $_SERVER['QUERY_STRING'] , which will sometimes come back as  'q=aliased_path/&/drupal_base_path/system_path'.
  // This will let us strip that down to the basic URL that we need to send to SWFAddress.
  if (strpos($path, 'q=') === 0) {
    if (strpos($path, '&') !== FALSE)
      $path = drupal_substr($path, strpos($path, '&') + 1);
    $path = str_replace(_swfaddress_base_path(), '', $path);
    $path = str_replace('q=', '', $path);
    $path = str_replace('&', '', $path);
  }

  if (variable_get('swfaddress_send_aliases', TRUE)) {
    // Interact with Drupal's path system so that the SWF can receive the Drupal path
    // rather than the system path.
    if (function_exists('drupal_get_path_alias')) {
      $alias = drupal_get_path_alias($path);
      if ($alias != $path) {
        $path = $alias;
      }
    }
  }

  if ('application/x-swfaddress' == (isset($_SERVER['CONTENT_TYPE']) ? $_SERVER['CONTENT_TYPE'] :
    (isset($_SERVER['HTTP_CONTENT_TYPE']) ? $_SERVER['HTTP_CONTENT_TYPE'] : ''))) {

    echo('location.replace("' . $base . '/#/' . $path . '");');
    exit();
  }
  else {
    $GLOBALS['swfaddress_base'] = $base;
    $GLOBALS['swfaddress_path'] = $path;
  }

  if (variable_get('swfaddress_replacement_enabled', FALSE)
    && variable_get('clean_url', 0) == 1
    && _swfaddress_path_permitted()) {
    // It is vitally important that swfobject.js be included before SWFAddress!
    $module_path = drupal_get_path('module', 'swfaddress');
    drupal_add_js($module_path . '/swfobject/swfobject.js');
    drupal_add_js($module_path . '/swfaddress-2.1/js/swfaddress.js');
    drupal_add_js($module_path . _swfaddress_optimizer('/swfaddress-2.1/js/swfaddress-optimizer.js?'),
      array('cache' => FALSE, 'preprocess' => FALSE));

    drupal_add_js(
      theme('swfaddress_swfobject', array(
        'swf_address'      => variable_get('swfaddress_swf_address', ''),
        'flash_tag_id'     => variable_get('swfaddress_flash_tag_id', 'swf-embed'),
        'flash_width'      => variable_get('swfaddress_flash_width', 550),
        'flash_height'     => variable_get('swfaddress_flash_height', 400),
        'flash_version'    => variable_get('swfaddress_flash_version', '9.0.0'),
        'flash_background' => variable_get('swfaddress_flash_background', 'FFFFFF'),
        'flash_replace_id' => variable_get('swfaddress_flash_replace_id', 'swf-replace'),
      )),
      array('type' => 'inline', 'scope' => 'header')
    );
  }
}

/*
 * Implements hook_requirements().
 */
function swfaddress_requirements($phase) {
  // Test SWFAddress version
  $requirements['swfaddress_swfaddress'] = array(
    'title' => t('SWFAddress'),
    'value' => t('2.1 and SWFAddress Optimizer'),
  );

  $module_path = drupal_get_path('module', 'swfaddress');

  if (!file_exists(realpath($module_path . '/swfaddress-2.1/js/swfaddress.js')) ||
    !file_exists(realpath($module_path . '/swfaddress-2.1/js/swfaddress-optimizer.js'))) {
    $requirements['swfaddress_swfaddress']['value'] = t('Not found or wrong version');
    $requirements['swfaddress_swfaddress']['description'] = t('You must dowload <a href="@swfaddress_href">SWFAddress 2.1</a> core scripts and place the <em>swfaddress-2.1</em> directory in the SWFAddress module directory (@swfaddress_module_path/swfaddress-2.1).',
      array(
        '@swfaddress_href'        => SWFADDRESS_SWFADDRESS_HREF,
        '@swfaddress_module_path' => $module_path,
      )
    );
    $requirements['swfaddress_swfaddress']['severity'] = REQUIREMENT_ERROR;
  }

  $requirements['swfaddress_swfobject'] = array(
    'title' => t('SWFObject'),
    'value' => t('v2'),
  );

  if (!file_exists(realpath($module_path . '/swfobject/swfobject.js'))) {
    $requirements['swfaddress_swfobject']['value'] = t('Not found or wrong version');
    $requirements['swfaddress_swfobject']['description'] = t('You must dowload <a href="@swfobject_href">SWFObject 2</a> and put it in a directory called <em>swfobject</em> in the SWFAddress module directory (@swfaddress_module_path/swfobject).',
      array(
        '@swfobject_href' => SWFADDRESS_SWFOBJECT_HREF,
        '@swfaddress_module_path' => $module_path,
      )
    );
    $requirements['swfaddress_swfobject']['severity'] = REQUIREMENT_ERROR;
  }

  return $requirements;
}

/**
 * Display help and module information
 * @param section which section of the site we're displaying help
 * @return help text for section
 */
function swfaddress_help($path="", $arg=array()) {
  $output = '';

  switch ($path) {
    case 'admin/settings/swfaddress#pages':
      return "admin*\nuser\nuser/login\nlogout\nnode/add*\nnode/*/edit\nuser/*/edit\nuser/password\ncomment/*/edit";
      break;
    case 'admin/settings/tinymce':
    case "admin/help#swfaddress":
      $output = '<p>' . t("Integration with the SWFAddress library.") . '</p>';
      break;
  }

  return $output;
}

/**
 * Implements hook_permission().
 */
function swfaddress_permission() {
  $permissions = array(
    'administer swfaddress' => array(
      'title'       => t('Administer SWFAddress'),
      'description' => t('Change the settings for SWFAddress activation.'),
    )
  );

  return $permissions;
}

/**
 * Implements hook_theme().
 */
function swfaddress_theme() {
  return array(
    'swfaddress_swfobject' => array(
      'arguments' =>  array('swf_address' => NULL, 'flash_tag_id' => NULL, 'flash_width' => NULL, 'flash_height' => NULL, 'flash_version' => NULL, 'flash_background' => NULL, 'flash_replace_id' => NULL)
    ),
  );
}

/**
 * Implements hook_menu().
 */
function swfaddress_menu() {
  $items = array();
  $items['admin/structure/swfaddress'] = array(
    'title'            => 'SWFAddress Settings',
    'description'      => 'Configure SWFAddress settings.',
    'access arguments' => array('administer swfaddress'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('swfaddress_admin_form'),
    'type'             => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Build the base site path for the SWFAddress seo() call.  It should not have a trailing slash.
 */
function _swfaddress_base_path() {
  if (function_exists('base_path')) {
    $base_path = base_path() . variable_get('swfaddress_base_path', '');
  }
  else {
    $base_path = $GLOBALS['base_path'] . variable_get('swfaddress_base_path', '');
  }

  return rtrim($base_path, ' /');
}

/**
 * Should we replace a path?
 */
function _swfaddress_path_permitted($test_path = NULL) {
  // Adapted (nay, nearly lifted) from tinymce.module
  // Thanks, TinyMCE team.
  if ($test_path == NULL) {
    $test_path = $_GET['q'];
  }

  $path = drupal_get_path_alias($test_path);
  $regexp = '/^(' . preg_replace(array('/(\r\n?|\n)/', '/\\\\\*/', '/(^|\|)\\\\<front\\\\>($|\|)/'), array('|', '.*', '\1' . preg_quote(variable_get('site_frontpage', 'node'), '/') . '\2'), preg_quote(variable_get('swfaddress_excluded_paths', swfaddress_help('admin/settings/swfaddress#pages')), '/')) . ')$/';
  $path_permitted = !preg_match($regexp, $path);

  // The above code works for the "Exclude" mode.
  if (variable_get('swfaddress_include_paths', 0)) {
    $path_permitted = !$path_permitted;
  }

  return $path_permitted;
}

/**
 * Controller for swfaddress administrative settings.
 */
function swfaddress_admin_form() {
  $form['swfaddress_replacement_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Replacement Enabled'),
    '#description' => t('Turns on the module, enabling Flash replacement according to the settings you enter below.'),
    '#default_value' => variable_get('swfaddress_replacement_enabled', FALSE),
  );

  $form['swfaddress_send_aliases'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send Aliases'),
    '#description' => t('If selected, SWFAddress will send your SWF file aliased paths like <em>about-me</em> rather than Drupal system paths like <em>node/46</em>.'),
    '#default_value' => variable_get('swfaddress_send_aliases', TRUE),
  );

  $form['swf_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('SWF File Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['swf_options']['heading'] = array(
    '#markup' => t('<p>Enter the information about your SWF file.</p>'),
  );

  $form['swf_options']['swfaddress_swf_address'] = array(
    '#type' => 'textfield',
    '#title' => t('SWF URL'),
    '#description' => t('Enter the path to the SWF you want loaded relative to the site root.'),
    '#default_value' => variable_get('swfaddress_swf_address', ''),
    '#required' => TRUE,
  );

  $form['swf_options']['swfaddress_flash_version'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum Flash Version'),
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t('What version of Flash must users have for the SWF replacement to take place?'),
    '#default_value' => variable_get('swfaddress_flash_version', '9.0.0'),
    '#required' => TRUE,
  );

  $form['swf_options']['swfaddress_flash_width'] = array(
    '#type' => 'textfield',
    '#title' => t('SWF Width'),
    '#size' => 6,
    '#maxlength' => 6,
    '#description' => t('The width of the SWF in pixels or as a percentage.'),
    '#default_value' => variable_get('swfaddress_flash_width', 550),
    '#required' => TRUE,
  );

  $form['swf_options']['swfaddress_flash_height'] = array(
    '#type' => 'textfield',
    '#title' => t('SWF Height'),
    '#size' => 6,
    '#maxlength' => 6,
    '#description' => t('The height of the SWF in pixels or as a percentage.'),
    '#default_value' => variable_get('swfaddress_flash_height', 400),
  '#required' => TRUE,
  );

  $form['swf_options']['swfaddress_flash_tag_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Flash Tag ID'),
    '#size' => 40,
    '#maxlength' => 40,
    '#description' => t('The HTML ID of the OBJECT and EMBED tags that SWFObject will add.  To prevent problems in Internet Explorer, this must be made up of only letters and numbers.  Minus signs will cause errors in Internet Explorer.'),
    '#default_value' => variable_get('swfaddress_flash_tag_id', 'swfembed'),
    '#required' => TRUE,
  );

  $form['swf_options']['swfaddress_flash_replace_id'] = array(
    '#type' => 'textfield',
    '#title' => t('HTML ID to Replace'),
    '#size' => 40,
    '#maxlength' => 40,
    '#description' => t('The HTML ID of the tag that SWFObject will replace.'),
    '#default_value' => variable_get('swfaddress_flash_replace_id', 'swf-replace'),
    '#required' => TRUE,
  );

  $form['swf_options']['swfaddress_flash_background'] = array(
    '#type' => 'textfield',
    '#title' => t('Background Color'),
    '#size' => 6,
    '#maxlength' => 6,
    '#description' => t('The six-character hexidecimal background color for the SWF.'),
    '#default_value' => variable_get('swfaddress_flash_background', 'FFFFFF'),
    '#required' => TRUE,
  );

  $form['path_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Included or Excluded Paths'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['path_options']['swfaddress_base_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Base Path'),
    '#default_value' => variable_get('swfaddress_base_path', ''),
    '#maxlength' => 64,
    '#size' => 40,
    '#description' => t('Specify the path where SWFAddress should redirect the viewer if they are capable of viewing your Flash file.'),
    '#field_prefix' => url("", array('absolute' => TRUE)) . (variable_get('clean_url', 0) ? '' : '?q='),
  );

  $form['path_options']['swfaddress_include_paths'] = array(
    '#type' => 'radios',
    '#title' => t('Mode'),
    '#default_value' => variable_get('swfaddress_include_paths', 0),
    '#options' => array(
      0 => t('Exclude (Redirect on every page except the listed pages.)'),
      1 => t('Include (Redirect on only the listed pages.)')
    ),
  );

  $form['path_options']['swfaddress_excluded_paths'] = array(
    '#type' => 'textarea',
    '#title' => t('Included / Excluded Paths'),
    '#rows' => 8,
    '#description' => t('Specify the paths that will be included or excluded, based on the <strong>Mode</strong> setting above. Separate paths with a return. If you are using the Exclude mode, it is advisable to exclude your administration pages with a rule such as <strong>admin*</strong>.'),
    '#default_value' => variable_get('swfaddress_excluded_paths', swfaddress_help('admin/settings/swfaddress#pages')),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Validation for swfaddress administrative settings.
 */
function swfaddress_admin_form_validate($form, &$form_state) {
  if (!preg_match('/^([0-9]{1,5}[%]?)$/', $form_state['values']['swfaddress_flash_width'])) {
    form_set_error('swfaddress_flash_width', t('Please enter a numeric or percentile width.'));
  }

  if (!preg_match('/^([0-9]{1,5}[%]?)$/', $form_state['values']['swfaddress_flash_height'])) {
    form_set_error('swfaddress_flash_height', t('Please enter a numeric or percentile height.'));
  }

  if (!preg_match('/^([a-fA-F0-9]){6}$/', $form_state['values']['swfaddress_flash_background'])) {
    form_set_error('swfaddress_flash_background', t('Please enter a six-character HTML color.'));
  }

  if (!preg_match('/^[a-zA-Z0-9]+$/', $form_state['values']['swfaddress_flash_tag_id'])) {
    form_set_error('swfaddress_flash_tag_id', t('The HTML ID must contain only alphanumeric characters.'));
  }
}

/**
 * Internal SWFAddress Optimizer helper function
 */
function _swfaddress_optimizer($resource) {
  $base = $GLOBALS['swfaddress_base'];
  $path = $GLOBALS['swfaddress_path'];

  return $resource . (strstr($resource, '?') ? '' : '?') . 'swfaddress=' . urlencode($path) . '&base=' . urlencode($base) . '&flash=' . variable_get('swfaddress_flash_version', '9.0.0');
}

/**
 * Theme function to control the HTML output for the SWFObject call.
 */
function theme_swfaddress_swfobject($variables) {
  $swfaddress_js = <<<SWFOBJECT
(function ($) {
  $(document).ready(function(){
    swfobject.embedSWF("%s%s", "%s", "%s", "%s", "%s", false, {}, {bgcolor: "#%s"}, {id: "%s", name: "%s"});
  });
})(jQuery);
SWFOBJECT;

  return sprintf($swfaddress_js, base_path(), $variables['swf_address'], $variables['flash_replace_id'], $variables['flash_width'], $variables['flash_height'],
    $variables['flash_version'], $variables['flash_background'], $variables['flash_tag_id'], $variables['flash_tag_id']);
}