<?php

/**
 * @file
 * Custom add content.
 */

/**
 * Implements hook_modules_installed().
 *
 * We create the custom menu which will serve as content for node add page.
 */
function custom_add_content_modules_installed($modules) {
  if (in_array('menu', $modules)) {
    $menu = array(
      'menu_name' => 'custom_add_content_page',
      'title' => t('Custom add content page'),
      'description' => t('Content creation links'),
    );
    menu_save($menu);
  }
}

/**
 * Implements hook_menu().
 *
 * We fill our custom menu with entries for each content type.
 * Create menu entries for module's admin pages.
 */
function custom_add_content_menu() {
  $items = array();

  // Define a menu item for each content type.
  $ct_list = node_type_get_types();

  foreach ($ct_list as $ct_machine_name => $obj) {
    $items['custom_add_content_page/' . $ct_machine_name] = array(
      'title' => $obj->name,
      'page callback' => 'custom_add_content_redirect',
      'page arguments' => array($ct_machine_name),
      'access arguments' => array('create ' . $ct_machine_name . ' content'),
      'menu_name' => 'custom_add_content_page',
      'type' => MENU_NORMAL_ITEM,
    );
  }

  // Module's admin pages.
  $items['admin/config/user-interface/custom_add_content'] = array(
    'title' => 'Custom Add Content Page',
    'description' => 'Change renderer of page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_add_content_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'custom_add_content.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * We override the node/add menu entry from core's node module.
 *
 * @see node_menu()
 */
function custom_add_content_menu_alter(&$items) {
  unset($items['node/add']);
  $items['node/add'] = array(
    'title' => 'Add content',
    'page callback' => 'custom_add_content_node_add_page',
    'access callback' => '_node_add_access',
    'file' => 'custom_add_content.pages.inc',
    'module' => 'custom_add_content',
    'file path' => drupal_get_path('module', 'custom_add_content'),
  );
}

/**
 * Given content type, we redirect to corresponding node add page.
 */
function custom_add_content_redirect($path) {
  $content_type_rul = strtr($path, array('_' => '-'));
  drupal_goto('node/add/' . $content_type_rul);
}

/**
 * Implements hook_theme().
 */
function custom_add_content_theme() {
  return array(
    'custom_add_content_page_add' => array(
      'variables' => array('tree' => NULL),
      'file' => 'custom_add_content.pages.inc',
    ),
  );
}

/**
 * Implements hook_form_alter().
 *
 * When a new content type is created/edited/deleted we must rebuild menu.
 */
function custom_add_content_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'node_type_form':
    case 'node_type_delete_confirm':
      $form['#submit'][] = 'custom_add_content_new_node_type_submit';
      break;

    default:
      break;

  }
}

/**
 * Custom submit handler for node type related forms.
 */
function custom_add_content_new_node_type_submit($form, $form_state) {
  menu_rebuild();
}

/**
 * Some help for users.
 *
 * Implements hook_help().
 */
function custom_add_content_help($path, $arg) {
  switch ($path) {
    case 'admin/config/user-interface/custom_add_content':

      $out = t('This module allows you to customize the "add content" page by converting it to a hierarchical menu named "Custom add content page". For a full description of this module read the README.txt');
      break;

    case 'admin/help#custom_add_content';

      $out = '<h3>' . t('Custom add content') . '</h3>';
      $out .= '<dl>';
      // Introduction.
      $out .= '<dt>' . t('Introduction') . '</dt>';
      $out .= '<dd>' . t('This module allows you to customize the "add content" page by converting it to a hierarchical menu named "Custom add content page". By configuring this menu you will be able to:');
      $out .= theme('item_list', array(
        'items' => array(
          t("Sort creation links and establish a hierarchy"),
          t("Hide creation links"),
        ),
        'type' => 'ul',
      ));
      $out .= '</dd>';
      // Options.
      $out .= '<dt>' . t('Introduction') . '</dt>';
      $out .= '<dd>' . t("Via module's administration page you can choose a menu renderer between:");
      $out .= theme('item_list', array(
        'items' => array(
          t("Drupal's core renderer"),
          t("Module's custom renderer (default): Replicates core add content page but it allows you to define a hierarchy"),
        ),
        'type' => 'ul',
      ));
      $out .= '</dd>';
      $out .= '</dl>';
      break;

    default:
      $out = '';
      break;

  }
  return $out;
}
