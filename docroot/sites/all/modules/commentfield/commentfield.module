<?php

/**
 * Implements hook_menu().
 */
function commentfield_menu() {
  $items = array();

  $items['commentfield/ajax'] = array(
    'page callback' => 'commentfield_ajax',
    'delivery callback' => 'ajax_deliver',
    'access arguments' => array('access content'),
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function commentfield_theme($existing, $type, $theme, $path) {
  return array(
    'commentfield_comments_table' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function commentfield_permission() {
  return array(
    'add new commentfield comments' => array(
      'title' => t('Add new comments'),
      'description' => t('Add new comments to the comment field.'),
    ),
    'remove commentfield comments' => array(
      'title' => t('Remove comments'),
      'description' => t('Remove posted comments from the comment field.'),
    ),
    'remove own comments' => array(
      'title' => t('Remove own comments'),
      'description' => t('Remove own posted comments from the comment field.'),
    ),
  );
}

/**
 * Menu callback; Shared Ajax callback for comment additions and deletions.
 */
function commentfield_ajax() {
  $form_parents = func_get_args();
  $form_build_id = (string) array_pop($form_parents);

  if (empty($_POST['form_build_id']) || $form_build_id != $_POST['form_build_id']) {
    // Invalid request.
    drupal_set_message(t('An unrecoverable error occurred.'));
    $commands = array();
    $commands[] = ajax_command_replace(NULL, theme('status_messages'));
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  list($form, $form_state) = ajax_get_form();

  if (!$form) {
    // Invalid form_build_id.
    drupal_set_message(t('An unrecoverable error occurred. Use of this form has expired. Try reloading the page and submitting again.'), 'error');
    $commands = array();
    $commands[] = ajax_command_replace(NULL, theme('status_messages'));
    return array('#type' => 'ajax', '#commands' => $commands);
  }

  // Process user input. $form and $form_state are modified in the process.
  drupal_process_form($form['#form_id'], $form, $form_state);

  $entity_type = $form['#entity_type'];
  $entity = $form['#entity'];

  // Retrieve the element to be rendered.
  foreach ($form_parents as $parent) {
    $form = $form[$parent];
  }

  $form['#suffix'] .= '<span class="ajax-new-content"></span>';

  $output = theme('status_messages') . drupal_render($form);
  $js = drupal_add_js();
  $settings = call_user_func_array('array_merge_recursive', $js['settings']['data']);

  $commands = array();
  $commands[] = ajax_command_replace(NULL, $output, $settings);
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements hook_field_info().
 */
function commentfield_field_info() {
  $field_info['commentfield'] = array(
    'label' => t('Comment'),
    'description' => t('This field stores simple comments.'),
    'settings' => array(),
    'instance_settings' => array(
      'display_timestamp' => NULL,
      'display_author' => NULL,
      'display_collapsed' => NULL,
      'display_count' => NULL,
    ),
    'default_widget' => 'commentfield_default',
    'default_formatter' => 'commentfield_default',
    // Integrates commentfield with entity API. As a consequence, field is exposed to Search API.
    'property_type' => 'commentfield',
    'property_callbacks' => array('commentfield_property_info_callback'),
  );
  return $field_info;
}

/**
 * Implements hook_field_is_empty().
 */
function commentfield_field_is_empty($item, $field) {
  return empty($item['comment']);
}

/**
 * Implements hook_field_instance_settings_form().
 */
function commentfield_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  $form['display_timestamp'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display the time the comment was posted.'),
    '#default_value' => !empty($settings['display_timestamp']),
  );
  $form['display_author'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display the user who authored the comment.'),
    '#default_value' => !empty($settings['display_author']),
  );
  $form['display_collapsed'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display the field collapsed.'),
    '#default_value' => !empty($settings['display_collapsed']),
  );
  $form['display_count'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display the comments count in the fieldset title.'),
    '#default_value' => !empty($settings['display_count']),
  );

  return $form;
}

/**
 * Implements hook_field_formatter_info().
 */
function commentfield_field_formatter_info() {
  return array(
    'commentfield_default' => array(
      'label' => t('Default'),
      'field types' => array('commentfield'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function commentfield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if (empty($items)) {
    return array();
  }

  // Load the users so that their names can be displayed.
  if ($instance['settings']['display_author']) {
    $authors = _commentfield_load_authors($items);
  }

  $comments = array();
  $comments['#display_author'] = $instance['settings']['display_author'];
  $comments['#display_timestamp'] = $instance['settings']['display_timestamp'];
  $comments['#display_operations'] = FALSE;
  $comments['#display_own_operations'] = FALSE;

  foreach ($items as $delta => $item) {
    if (!empty($authors[$item['uid']])) {
      $comment['display_author'] = array(
        '#markup' => $authors[$item['uid']]->name,
      );
    }
    $comment['display_comment'] = array(
      '#markup' => check_plain($item['comment']),
    );
    $comment['display_timestamp'] = array(
      '#markup' => format_date($item['created']),
    );

    $comments[$delta] = $comment;
  }

  $element = array();
  $element[0] = array(
    '#markup' => theme('commentfield_comments_table', array('element' => $comments)),
  );
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function commentfield_field_widget_info() {
  return array(
    'commentfield_default' => array(
      'label' => t('Default'),
      'field types' => array('commentfield'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function commentfield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  global $user;

  // Retrieve any values set in $form_state, as will be the case during Ajax
  // rebuilds of this form.
  if (isset($form_state['values'])) {
    $path = array_merge($element['#field_parents'], array($field['field_name'], $langcode));
    $path_exists = FALSE;
    $values = drupal_array_get_nested_value($form_state['values'], $path, $path_exists);

    if ($path_exists) {
      $items = $values;
      drupal_array_set_nested_value($form_state['values'], $path, NULL);
    }
  }

  foreach ($items as $delta => $item) {
    if (empty($items[$delta]['comment'])) {
      unset($items[$delta]);
    }
  }
  // Re-index deltas after removing empty items.
  $items = array_values($items);

  // Load the users so that their names can be displayed.
  if ($instance['settings']['display_author']) {
    $authors = _commentfield_load_authors($items);
  }

  $elements['#theme'] = 'commentfield_comments_table';
  $elements['#theme_wrappers'] = array('fieldset');
  $elements['#title'] = $element['#title'];
  if ($instance['settings']['display_count'] && count($items)) {
    $elements['#title'] .= ' ( ' . count($items) . ' )';
  }

  $elements['#collapsible'] = TRUE;
  // Keep the fieldset not collapsed if a comment has been already submitted
  $elements['#collapsed'] = ($form_state['submitted']) ? FALSE : $instance['settings']['display_collapsed'];

  // The #collapsible and #collapsed not working properly in Drupal 7
  // added the behavior manually
  drupal_add_library('system', 'drupal.collapse');
  $elements['#attributes']['class'][] = 'collapsible';
  if ($elements['#collapsed']) {
    $elements['#attributes']['class'][] = 'collapsed';
  }

  $elements['#display_author'] = $instance['settings']['display_author'];
  $elements['#display_timestamp'] = $instance['settings']['display_timestamp'];
  $elements['#display_operations'] = user_access('remove commentfield comments');
  $elements['#display_own_operations'] = user_access('remove own comments');
  $elements['#process'][] = 'commentfield_elements_process';

  foreach ($items as $delta => $item) {
    // The actual values
    $comment['uid'] = array(
      '#type' => 'value',
      '#value' => $item['uid'],
    );
    $comment['comment'] = array(
      '#type' => 'value',
      '#value' => $item['comment'],
    );
    $comment['created'] = array(
      '#type' => 'value',
      '#value' => $item['created'],
    );

    // For display only.
    if (!empty($authors[$item['uid']])) {
      $comment['display_author'] = array(
        '#markup' => $authors[$item['uid']]->name,
      );
    }
    $comment['display_comment'] = array(
      '#markup' => check_plain($item['comment']),
    );
    $comment['display_timestamp'] = array(
      '#markup' => format_date($item['created']),
    );

    $elements[$delta] = $element + $comment;
  }

  if ($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED || count($items) < $field['cardinality']) {
    $new_comment['#new'] = TRUE;
    $new_comment['uid'] = array(
      '#type' => 'value',
      '#value' => $user->uid,
    );
    $new_comment['created'] = array(
      '#type' => 'value',
      '#value' => REQUEST_TIME,
    );
    if (empty($items)) {
      $new_comment['no_comments_yet'] = array(
        '#markup' => t('No comments yet.'),
      );
    }
    $new_comment['comment'] = array(
      '#type' => 'textarea',
      '#rows' => 3,
      '#prefix' => '<div class="commentfield-hidden">',
      '#suffix' => '</div>',
      '#access' => user_access('add new commentfield comments'),
    );

    $elements[] = $element + $new_comment;
  }

  return $elements;
}

/**
 * Submit handler for "add new comment" and "remove" buttons.
 */
function commentfield_submit($form, &$form_state) {
  $parents = $form_state['triggering_element']['#array_parents'];
  $button_key = array_pop($parents);
  $element = drupal_array_get_nested_value($form, $parents);
  if ($button_key == 'remove') {
    // Update both $form_state['values'] and $form_state['input'] to reflect
    // that the comment has been removed.
    form_set_value($element, NULL, $form_state);
    drupal_array_set_nested_value($form_state['input'], $element['#parents'], NULL);
  }

  // During the form rebuild, commentfield_field_widget_form() will create field item
  // widget elements using re-indexed deltas, so clear out $form_state['input']
  // to avoid a mismatch between old and new deltas.
  $parents = array_slice($form_state['triggering_element']['#parents'], 0, -2);
  drupal_array_set_nested_value($form_state['input'], $parents, NULL);

  $form_state['rebuild'] = TRUE;
}

/**
 * Adds the "Add new comment" and "Remove" buttons.
 */
function commentfield_elements_process($element, &$form_state, $form) {
  $element['#tree'] = TRUE;

  $ajax_settings = array(
    'path' => 'commentfield/ajax/' . implode('/', $element['#array_parents']) . '/' . $form['form_build_id']['#value'],
    'wrapper' => $element['#id'] . '-ajax-wrapper',
  );

  foreach (element_children($element) as $id) {
    if (empty($element[$id]['#new'])) {
      $parents = array_merge($element['#parents'], array($id));
      $element[$id]['remove'] = array(
        '#name' => implode('_', $parents) . '_remove',
        '#type' => 'submit',
        '#value' => t('Remove'),
        '#validate' => array(),
        '#submit' => array('commentfield_submit'),
        '#access' => show_remove_button($element[$id]['uid']['#value']),
        '#delta' => $id,
        '#limit_validation_errors' => array($element['#parents']),
        '#ajax' => $ajax_settings,
      );
    }
    else {
      $element[$id]['submit'] = array(
        '#name' => 'new_comment',
        '#type' => 'submit',
        '#value' => t('Add new comment'),
        '#submit' => array('commentfield_submit'),
        '#access' => show_add_button($element[$id]['uid']['#value']),
        '#validate' => array('commentfield_validate'),
        '#limit_validation_errors' => array($element['#parents']),
        '#ajax' => $ajax_settings,
      );

      $element[$id]['submit']['#attributes']['class'][] = 'commentfield-hidden';
    }
  }

  // Prefix and suffix used for Ajax replacement.
  $element['#prefix'] = '<div id="' . $element['#id'] . '-ajax-wrapper">';
  $element['#suffix'] = '</div>';

  return $element;
}

function commentfield_validate($form, &$form_state) {
  $parents = $form_state['triggering_element']['#array_parents'];
  // Takes out the button name.
  array_pop($parents);
  $element = drupal_array_get_nested_value($form_state['values'], $parents);
  if ($form_state['triggering_element']['#name'] == 'new_comment' && $element['comment'] == '') {
    form_set_error('c_comment', t('You must write a comment.'));
  }
}

 /**
 * Return permission for comment remove button.
 */
function show_remove_button($comment_user_id) {
  global $user;

  if (user_access('remove commentfield comments') ||
      (user_access('remove own comments') && ($user->uid == $comment_user_id))) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

 /**
 * Return permission for comment add button.
 */
function show_add_button($comment_user_id) {
  global $user;

  if (user_access('add new commentfield comments')) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}
/**
 * Returns HTML for a group of comment widgets.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: A render element representing the widgets.
 *
 * @ingroup themeable
 */
function theme_commentfield_comments_table($variables) {
  $element = $variables['element'];

  // Build up a table of applicable fields.
  $headers = array();
  $rows = array();

  if ($element['#display_author']) {
    $headers[] = t('Author');
  }
  $headers[] = t('Comment');
  if ($element['#display_timestamp']) {
    $headers[] = t('Created');
  }
  if ($element['#display_operations'] || $element['#display_own_operations']) {
    $show_operations = TRUE;
    $headers[] = t('Operations');
  }
  $row[] = drupal_render($comment['remove']);

  $comments = array();

  foreach (element_children($element) as $key) {
    // Don't show the "new comment" form in the table. That one goes below.
    if (empty($element[$key]['#new'])) {
      $comments[] = &$element[$key];
    }
  }

  // Show the newest comments first.
  krsort($comments);

  foreach ($comments as &$comment) {
    $row = array();
    if (isset($comment['display_author'])) {
      $row[] = drupal_render($comment['display_author']);
    }
    $row[] = drupal_render($comment['display_comment']);
    if ($element['#display_timestamp']) {
      $row[] = drupal_render($comment['display_timestamp']);
    }
    if (isset($show_operations)) {
      $row[] = drupal_render($comment['remove']);
    }

    $rows[] = array(
      'data' => $row,
    );
  }

  $output = '';
  $output = empty($rows) ? '' : theme('table', array('header' => $headers, 'rows' => $rows));
  $output .= drupal_render_children($element);

  return $output;
}

/**
 * Implements hook_field_widget_error().
 */
function commentfield_widget_error($element, $error, $form, &$form_state) {
  form_error($element['comment'], $error['message']);
}

/**
 * Helper function that goes through all passed items, notes the author uids,
 * and loads the full user objects.
 */
function _commentfield_load_authors($items) {
  $author_uids = array();
  $authors = array();
  foreach ($items as $delta => $item) {
    $author_uids[] = $item['uid'];
  }
  // Load the users so that their names can be displayed.
  if ($author_uids) {
    $authors = entity_load('user', $author_uids);
  }

  return $authors;
}

/**
 * Alter the property info of field subfields.
 */
function commentfield_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];
  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  unset($property['query callback']);

  $property['property info']['uid'] = array(
    'type' => 'integer',
    'label' => t('author uid'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $property['property info']['created'] = array(
    'type' => 'integer',
    'label' => t('created'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $property['property info']['comment'] = array(
    'type' => 'text',
    'label' => t('comment'),
    'setter callback' => 'entity_property_verbatim_set',
  );
}
