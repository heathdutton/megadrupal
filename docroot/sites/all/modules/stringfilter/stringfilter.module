<?php

/**
 * Implements hook_filter_info().
 */
function stringfilter_filter_info() {
  return array(
    'stringfilter' => array(
      'title' => t('Replace strings'),
      'description' => t('Replace defined strings with a string, variable, or fuction.'),
      'process callback' => '_stringfilter_filter',
      'settings callback' => '_stringfilter_settings',
      'tips callback' => '_stringfilter_tips',
      'default settings' => array(
        'replace_list' => '',
      ),
      'weight' => -999,
    )
  );
}

/**
 * Settings callback
 */
function _stringfilter_settings($form, &$form_state, $filter, $format, $defaults) {
  return array(
    'replace_list' => array(
      '#type' => 'textarea',
      '#title' =>  t('String replacements'),
      '#default_value' => isset($filter->settings['replace_list']) ? $filter->settings['replace_list'] : $defaults['replace_list'],
      '#description' => t('One replacement per line.  The format is: <br/><br/><pre>source string|REPLACEMENT_TYPE|replacement value</pre><br/>')
          . t('Separate values with the type of replacement: |STRING|, |VARIABLE|, or |FUNCTION|.  For a |STRING| the replacement value is the string, for a |VARIABLE| the replacement value is the variable name, for a |FUNCTION| the replacement value is the function name.<br/><br/>')
          . t('Examples: <br/><br/><pre>http://example.com/|STRING|//example.com/<br/>/sites/default/files/|VARIABLE|file_public_path<br/>{{basepath}}|FUNCTION|base_path</pre>'),
      '#weight' => 20,
    ),
    'help' => array(
      '#type' => 'textarea',
      '#title' => t('Help tips'),
      '#default_value' => isset($filter->settings['help']) ? $filter->settings['help'] : $defaults['help'],
      '#description' => t('Provide custom string replacement help tips to content editors when using this text format.  If blank, a default list of string replacements will be displayed.'),
      '#weight' => 21,
    ),
  );
}

/**
 * filter callback.
 */
function _stringfilter_filter($text, $filter, $format, $langcode, $cache, $cache_id) {
  //get variables statically to improve performance
  $settings = &drupal_static(__FUNCTION__, array());
  if (!isset($settings[$filter->format])) {
    $lines = explode("\n", $filter->settings['replace_list']);
    $replacements = array();
    foreach ($lines as $line) {
      $pair = explode("|STRING|", $line);
      if (count($pair) > 1) {
        $replacements[trim($pair[0])] = trim($pair[1]);
      }

      $pair = explode("|FUNCTION|", $line);
      if (count($pair) > 1) {
        $replacements[trim($pair[0])] = call_user_func(trim($pair[1]));
      }
      
      $pair = explode("|VARIABLE|", $line);
      if (count($pair) > 1) {
        $replacements[trim($pair[0])] = variable_get(trim($pair[1]), '');
      }
    }
    
    $settings[$filter->format]['search'] = array_keys($replacements);
    $settings[$filter->format]['replace'] = $replacements;
  }

  //replace unwanted strings
  $text = str_replace($settings[$filter->format]['search'], $settings[$filter->format]['replace'], $text);
  return $text;
}

function _stringfilter_tips($filter, $format, $long = FALSE) {
  //get variables statically to improve performance
  static $settings = array();
  if (!isset($settings[$filter->format])) {
    if (!empty($filter->settings['help'])) {
      $tip = $filter->settings['help'];
    }
    else {
      $lines = explode("\n", $filter->settings['replace_list']);
      //theme_table($variables);
      $tip = t('The strings in column 1 below will be replaced by the string, variable, or function in column 2 when content is displayed.');
      $header = array(t('Source string'), t('Replacement type'), t('Replacement value'));
      $rows = array();
      foreach ($lines as $line) {
        foreach (array("|STRING|", "|VARIABLE|", "|FUNCTION|") as $type) {
          $pair = explode($type, $line);
          if (count($pair) > 1) {
            $replace = trim($pair[1]);
            switch ($type) {
              case "|FUNCTION|":
                $replace = '' . $replace . '()'; 
                break;
              case "|VARIABLE|":
                $replace = 'variable_get("' . $replace . '")'; 
                break;
            }
            $rows[] = array(trim($pair[0]), $type, $replace,);
          }
        }
      }
      $element = array(
        '#title' => t('String Filters'),
        '#value' => $tip . theme('table', array('header' => $header, 'rows' => $rows)),
        '#collapsed' => TRUE,
        '#collapsible' => TRUE,
        '#attached' => array(
          'js' => array(
            'misc/form.js',
            'misc/collapse.js',
          ),
        ),
        '#attributes' => array(
          'class' => array('collapsible', 'collapsed'),
        ),
      ); 
      
      $tip = theme('fieldset', array('element' => $element));
    }
    
    $settings[$filter->format]['tip'] = $tip;
  }
  return $settings[$filter->format]['tip'];
}

/**
 * helper function to ensure paths start and end with /
 * @param unknown_type $str
 */
function stringfilter_filepublicpath() {
  $str = trim(variable_get('file_public_path',''));
  
  if (substr_compare($str, '/', 0, 1) !== 0) {
    $str = '/' .  $str;
  }
  
  if (substr_compare($str, '/', -1, 1) !== 0) {
    $str = $str . '/';
  }
  
  return $str;
}