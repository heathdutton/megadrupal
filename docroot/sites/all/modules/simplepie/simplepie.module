<?php

/**
 * @file
 * 
 * @see http://simplepie.org/
 */

/**
 * Implement hook_help().
 */ 
function simplepie_help($path, $arg) {
  switch ($path) {
    case 'admin/help#simplepie':
      return '<p>'. t('Ensures that the SimplePie library is installed. Makes SimplePie available to other modules.') .'</p>';
    case 'admin/config/services/simplepie':
      return '<p>'. t('Specify a cache location.') .'</p>';
  }
}

/**
 * Implement hook_menu().
 */
function simplepie_menu() {
  $items['admin/config/services/simplepie'] = array(
    'title' => 'SimplePie Core settings',
    'description' => 'Control how SimplePie Core works.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simplepie_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'simplepie.admin.inc',
  );
  return $items;
}

/**
 * Returns the path of the SimplePie library.
 */
function simplepie_get_library_path() {
  return drupal_get_path('module', 'simplepie') .'/lib/simplepie.inc';
}

/**
 * Enter description here...
 *
 * @param $location
 */
function simplepie_set_cache_location($location) {
  variable_set('simplepie_cache_location', $location);
}

function simplepie_get_cache_location() {
  return file_directory_path() .'/'. variable_get('simplepie_cache_location', 'cache/simplepie');
}

function simplepie_require($once = TRUE) {
  if (defined('SIMPLEPIE_VERSION')) {
    return;
  }

  $library = simplepie_get_library_path();
  
  if ($once) {
    require_once './'. $library;
  }
  else {
    require './'. $library;
  }
}

/**
 * Enter description here...
 *
 * @param $feed_url
 * @param $cache_location
 *   Relative to files directory.
 * @param $cache_duration
 * @return
 *   Instance of SimplePie.
 */
function simplepie_get($feed_url, $cache_location = 'cache/simplepie', $cache_duration = 1800) {
  static $simplepie = NULL;
  
  simplepie_require();
  
  $simplepie = new SimplePie();
  
  if ($cache_location) {
    $simplepie->set_cache_location(file_directory_path() .'/'. $cache_location);
  }
  else {
    $simplepie->set_cache_location(simplepie_get_cache_location());
  }
  
  if ($cache_duration) {
    $simplepie->set_cache_duration($cache_duration);
  }
  
  $simplepie->set_stupidly_fast(TRUE);
  $simplepie->set_feed_url($feed_url);
  $simplepie->init();
  
  return $simplepie;
}

/**
 * Implement hook_aggregator_parse_info().
 */
function simplepie_aggregator_parse_info() {
  return array(
    'title' => t('SimplePie parser'),
    'description' => t('Parses RSS, Atom and RDF feeds.'),
  );
}

/**
 * Implement hook_aggregator_parse().
 */
function simplepie_aggregator_parse($feed) {
  simplepie_require();

  $simplepie = new SimplePie();
  $simplepie->set_stupidly_fast(TRUE);
  $simplepie->set_raw_data($feed->source_string);

  // Parse the feed data.
  if ($simplepie->init()) {
    $items = $simplepie->get_items();

    foreach ($items as $simplepie_item) {
      // Resolve the item's title.
      $item['title'] = decode_entities($simplepie_item->get_title());

      // Resolve the items link.
      $item['link'] = $simplepie_item->get_permalink();

      // Resolve the items GUID.
      $item['guid'] = $simplepie_item->get_id();

      // Resolve the items content.
      $item['description'] = decode_entities($simplepie_item->get_content());

      // Resolve the items publication date.
      $item['timestamp'] = strtotime($simplepie_item->get_date());

      // Resolve the items author.
      $item['author'] = $simplepie_item->get_author();

      // Store on $feed object. This is where processors will look for parsed items.
      $feed->items[] = $item;
    }

    $modified = empty($feed->http_headers['Last-Modified']) ? 0 : strtotime($feed->http_headers['Last-Modified']);
    $etag = empty($feed->http_headers['ETag']) ? '' : $feed->http_headers['ETag'];

    // Update the feed data.
    db_merge('aggregator_feed')
      ->key(array('fid' => $feed->fid))
      ->fields(array(
        'url' => $feed->url,
        'checked' => REQUEST_TIME,
        'link' => ($simplepie->get_link() != NULL) ? $simplepie->get_link() : '',
        'description' => ($simplepie->get_description() != NULL) ? $simplepie->get_description() : '',
        'hash' => md5($feed->source_string),
        'etag' => $etag,
        'modified' => $modified,
      ))
      ->execute();

    // Clear the cache.
    cache_clear_all();

    if (isset($feed->redirected)) {
      watchdog('simplepie', 'Updated URL for feed %title to %url.', array('%title' => $feed->title, '%url' => $feed->url));
    }

    watchdog('simplepie', 'There is new syndicated content from %site.', array('%site' => $feed->title));
    drupal_set_message(t('There is new syndicated content from %site.', array('%site' => $feed->title)));
  }
}
