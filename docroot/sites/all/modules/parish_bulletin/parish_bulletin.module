<?php

/**
 * @file parish_bulletin.module
 *
 * Parish bulletin display and configuration.
 */

/**
 * Implements hook_permission().
 */
function parish_bulletin_permission() {
  return array(
    'administer parish bulletin' => array(
      'title' => t('Administer Parish Bulletin'),
      'description' => t('Change parish bulletin settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function parish_bulletin_menu() {
  $items['admin/config/system/parish_bulletin'] = array(
    'title' => 'Parish Bulletin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('parish_bulletin_configuration_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer parish bulletin'),
    'file' => 'includes/parish_bulletin.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_node_view().
 */
function parish_bulletin_node_view($node, $view_mode, $langcode) {
  // When viewing bulletin nodes, add a link at the top to the bulletins page.
  if ($node->type == 'bulletin' && $view_mode == 'full') {
    $node->content['parish_bulletin_link'] = array(
      '#markup' => '<div class="bulletin-page-link">' . l(t('View all bulletins »'), 'bulletins') . '</div>',
      '#weight' => 50,
    );
    // Add some markup to style the bulletin link.
    drupal_add_css('.bulletin-page-link { margin-top: 1em; text-align: right; }', 'inline');
  }
}

/**
 * Implements hook_cron().
 */
function parish_bulletin_cron() {
  $import_enabled = variable_get('parish_bulletin_import_on', 0);
  $import_day = variable_get('parish_bulletin_import_day', 6);

  // Check to see if the site is configured to import parish bulletins.
  if ($import_enabled) {
    // See if it's the day the bulletin should be imported.
    if (date('w') == $import_day) {
      // See if it's been at least 6 days since the last bulletin was created.
      if (variable_get('parish_bulletin_import_last', 0) < strtotime('-6 days')) {
        // Try to download the bulletin file from the configured URL.
        if ($file = _parish_bulletin_download_bulletin()) {
          // Save the bulletin in a new bulletin node.
          $bulletin = _parish_bulletin_create_bulletin_node($file);

          // Set the last import variable to today.
          variable_set('parish_bulletin_import_last', time());
        }
      }
    }
  }
}

/**
 * Implements hook_views_api().
 */
function parish_bulletin_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'parish_bulletin') . '/views',
  );
}

/**
 * Implements hook_views_pre_render().
 */
function parish_bulletin_views_pre_render(&$view) {
  // Show a custom header above the parish bulletin view.
  if ($view->name == 'parish_bulletins' && $view->current_display == 'page') {
    // If user can post new bulletins, add a link to the bulletin node add page.
    if (user_access('create bulletin content')) {
      $view->attachment_before .= '<p class="add-bulletin-link">' . l(t('Add a Bulletin »'), 'node/add/bulletin') . '</p>';
    }
  }
}

/**
 * Attempt download of bulletin file.
 *
 * URL must include .pdf at this point in time, although we could do more
 * advanced checking of the URL's Content-Disposition to see if the file from
 * some non-.pdf path is actually a PDF.
 *
 * Some of this functionality was ported from the remote.inc file included with
 * the filefield_sources module (for Drupal 7).
 *
 * @return mixed
 *   FALSE if download unsuccessful, array of file information if successful.
 */
function _parish_bulletin_download_bulletin() {
  $url = variable_get('parish_bulletin_import_url', '');

  // Return an error if the import URL is not set.
  if (empty($url)) {
    watchdog('parish_bulletin', 'Import URL for parish bulletin is not configured.');
    return FALSE;
  }

  // Build the temporary file path for download.
  $filename = date('Y-m') . '-' . date('d', strtotime('+1 day')) . '.pdf';
  $temporary_path = file_directory_temp() . '/' . $filename;

  if ($download_url = _parish_bulletin_validate_download_url($url)) {
    $download_sucessful = _parish_bulletin_download_file_url_to_path($download_url, $temporary_path);

    if ($download_sucessful) {
      // Make sure the bulletins directory exists and move the file to it.
      $bulletin_path = 'public://bulletins';
      if (file_prepare_directory($bulletin_path, FILE_CREATE_DIRECTORY)) {
        $temporary_path = 'temporary://' . $filename;

        // Create the file to be saved.
        $file = new stdClass();
        $file->uid = 1;
        $file->uri = $temporary_path;
        $file->filemime = file_get_mimetype($temporary_path);
        $file->status = 1;

        // Return file array if file copy to bulletins directory was successful.
        if ($file = file_copy($file, 'public://bulletins')) {
          // Convert the $file object to an array.
          $file = (array) $file;

          // Delete the temporary file.
          file_unmanaged_delete($temporary_path);
        }
      }
    }
  }

  if (!empty($file)) {
    return $file;
  }
  else {
    return FALSE;
  }
}

/**
 * Validate a download URL, and return a corrected URL in case of redirection.
 *
 * @param string $url
 *   The URL of the file to be downloaded.
 *
 * @return mixed
 *   FALSE if the download URL is invalid, a potentially-corrected URL string if
 *   the remote URL is downloadable.
 */
function _parish_bulletin_validate_download_url($url) {
  // Check if the file is able to be downloaded (returns a 200 response), and
  // follow any redirects to get an updated URL.
  $ch = curl_init($url);
  curl_setopt($ch, CURLOPT_HEADER, TRUE);
  curl_setopt($ch, CURLOPT_NOBODY, TRUE);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);

  // Disable SSL certificate validation if configured.
  if (!variable_get('parish_bulletin_verify_ssl', TRUE)) {
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
  }

  curl_exec($ch);
  $info = curl_getinfo($ch);
  curl_close($ch);

  // If we get a non-200 or 3xx redirect response, log the error and return.
  if (!in_array($info['http_code'], array(200, 301, 302))) {
    watchdog('parish_bulletin', 'Parish bulletin could not be validated due to an HTTP error (@code).', array('@code' => $info['http_code']));
    return FALSE;
  }

  return $info['url'];
}

/**
 * Download the given URL (presumed to exist) to the given local file path.
 *
 * @param string $url
 *   The URL of the file to be downloaded.
 * @param string $file_path
 *   A local system path where the file will be saved.
 *
 * @return bool
 *   TRUE if the file was successfully downloaded to $file_path, or FALSE.
 */
function _parish_bulletin_download_file_url_to_path($url, $file_path) {
  // Open a file on the system and use cURL to download the file.
  $fp = fopen($file_path, 'w');
  $ch = curl_init($url);
  curl_setopt($ch, CURLOPT_FILE, $fp);

  // Disable SSL certificate validation if configured.
  if (!variable_get('parish_bulletin_verify_ssl', TRUE)) {
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
  }

  curl_exec($ch);
  $info = curl_getinfo($ch);
  curl_close($ch);
  fclose($fp);

  // If we get a non-200 or 3xx redirect response, log the error and return.
  if (!in_array($info['http_code'], array(200, 301, 302))) {
    watchdog('parish_bulletin', 'Parish bulletin could not be downloaded due to an HTTP error (@code).', array('@code' => $info['http_code']));
    return FALSE;
  }

  return TRUE;
}

/**
 * Create a new bulletin node with the given file id as the attached file.
 *
 * @param int $fid
 *   Managed file id.
 *
 * @return object
 *   The full bulletin node object, as returned by node_save().
 */
function _parish_bulletin_create_bulletin_node($fid) {
  // Create the bulletin node.
  $bulletin = new stdClass();
  $bulletin->title = variable_get('parish_bulletin_title', t('Bulletin'));
  $bulletin->uid = 1;
  $bulletin->type = 'bulletin';
  $bulletin->language = LANGUAGE_NONE;
  // Set the bulletin date to one day ahead.
  $bulletin->field_bulletin_date = array(LANGUAGE_NONE => array(0 => array(
    // YYYY-MM-DD 00:00:00
    'value' => date('Y-m') . '-' . date('d', strtotime('+1 day')) . ' 00:00:00',
  )));
  // Set the bulletin file we've downloaded.
  $bulletin->field_bulletin = array(LANGUAGE_NONE => array($fid));
  $bulletin->field_bulletin[LANGUAGE_NONE][0]['display'] = 1;
  $bulletin->field_bulletin[LANGUAGE_NONE][0]['description'] = '';
  node_save($bulletin);

  return $bulletin;
}
