<?php

/**
 * @file
 * Schema definitions for cloudwords.module.
 */

/**
 * Implements hook_enable().
 *
 * Set the supported languages.
 */
function cloudwords_enable() {
  drupal_static_reset('language_list');
  require_once dirname(__FILE__) . '/cloudwords.languages.inc';
  $langcodes = array_intersect(array_keys(language_list()), _cloudwords_map_cloudwords_drupal());
  variable_set('cloudwords_lang_codes', $langcodes);
}

/**
 * Implements hook_requirements().
 */
function cloudwords_requirements($phase) {
  $requirements = array();

  if ($phase == 'install') {

    $t = get_t();

    // Check for the cURL library.
    if (extension_loaded('curl')) {
      $info = curl_version();
      $requirements['cloudwords_curl'] = array(
        'value' => $info['version'],
        'severity' => REQUIREMENT_OK,
      );
    }
    else {
      $requirements['cloudwords_curl'] = array(
        'severity' => REQUIREMENT_ERROR,
        'description' => $t('The cURL library for PHP is missing. Check the <a href="@url">PHP cURL documentation</a> for information on how to correct this.', array('@url' => 'http://www.php.net/manual/en/book.curl.php')),
      );
    }
    $requirements['cloudwords_curl']['title'] = $t('cURL library support');
  }

  return $requirements;
}

/**
 * Implements hook_uninstall().
 */
function cloudwords_uninstall() {
  variable_del('cloudwords_lang_codes');
  variable_del('cloudwords_client_mode');
  variable_del('cloudwords_auth_token');
  variable_del('cloudwords_upload_file_size');
  variable_del('cloudwords_base_api_url_production');
  variable_del('cloudwords_base_url_stage');
  variable_del('cloudwords_last_cron_run');
  variable_del('cloudwords_node_view_access_bypass');
  variable_del('cloudwords_auto_import_translation_enabled');
  variable_del('cloudwords_auto_import_translation_frequency');
  variable_del('cloudwords_auto_import_translation_max_process_items');
  variable_del('cloudwords_preview_bundle_enabled');
}

/**
 * Implements hook_schema().
 */
function cloudwords_schema() {

  $schema = array();

  $schema['cloudwords_translatable'] = array(
    'description' => 'Tracks items marked as needing translation.',
    'fields' => array(
      'ctid' => array(
        'description' => 'The primary identifier for a node.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The title of this node, always treated as non-markup plain text.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'textgroup' => array(
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'default' => 'default',
        'description' => 'A module defined group of translations, see hook_locale().',
      ),
      'objectid' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Object ID.',
      ),
      'type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Object type for this string.',
      ),
      'language' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The language to translate to.',
      ),
      'status' => array(
        'description' => 'The status of a queue item.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'translation_status' => array(
        'description' => 'Whether the translatable exists.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "User's {users}.uid.",
      ),
      'translated_document_id' => array(
        'type' => 'int',
        'description' => 'Cloudwords translated document id.',
      ),      
      'last_import' => array(
        'type' => 'int',
        'description' => 'The last import of this translatable from Cloudwords.',
      ),          
      
    ),
    // 'primary key' => array('module', 'objectid', 'language'),
    'primary key' => array('ctid'),
  );

  $schema['cloudwords_project'] = array(
    'description' => 'Manages information about Cloudwords projects.',
    'fields' => array(
      'pid' => array(
        'description' => 'The project id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The name of the project.',
      ),
      'status' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The status of the project.',
      ),
    ),
    'primary key' => array('pid'),
  );

  $schema['cloudwords_project_language'] = array(
    'description' => 'Manages information about Cloudwords projects.',
    'fields' => array(
      'pid' => array(
        'description' => 'The project id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'language' => array(
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The language to translate to.',
      ),
      'status' => array(
        'description' => 'The import status of a language for a project.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    // 'primary key' => array('module', 'objectid', 'language'),
    'primary key' => array('pid', 'language'),
  );

  $schema['cloudwords_content'] = array(
    'description' => 'Manages information about Cloudwords projects.',
    'fields' => array(
      'pid' => array(
        'description' => 'The project id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'ctid' => array(
        'description' => 'The queue item.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'The status of the imported item.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('pid', 'ctid'),
  );

  $schema['cloudwords_project_user'] = array(
    'description' => "Stores the mapping for a user's projects.",
    'fields' => array(
      'uid' => array(
        'description' => 'The user id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'pid' => array(
        'description' => 'The project id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('uid', 'pid'),
  );

  return $schema;
}

/**
 * Update language codes to correct Cloudwords versions.
 */
function cloudwords_update_7101() {
  require_once dirname(__FILE__) . '/cloudwords.languages.inc';

  foreach (_cloudwords_map_drupal_cloudwords() as $drupal => $cloudwords) {
    db_update('cloudwords_project_language')
      ->condition('language', $drupal)
      ->fields(array(
        'language' => $cloudwords,
      ))
      ->execute();
  }
}

/**
 * Update cloudwords_translable table to track translated document id and last import
 */
function cloudwords_update_7201() {
  db_add_field('cloudwords_translatable', 'translated_document_id',
    array(
      'type' => 'int',
      'unsigned' => TRUE,
      'description' => 'Cloudwords translated document id.',
    )
  );
  db_add_field('cloudwords_translatable', 'last_import',
    array(
      'type' => 'int',
      'unsigned' => TRUE,
      'description' => 'The last import of this translatable from Cloudwords.',
    )
  );  
}