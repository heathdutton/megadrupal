<?php

/**
 * @file
 * Integrates Cloudwords with the Contnent translation module.
 */

/**
 * Wraps cloudwords_language_list() and removes the source languge.
 */
function cloudwords_i18n_language_list() {
  $languages = cloudwords_language_list();
  $default = i18n_string_source_language();
  unset($languages[$default]);
  return $languages;
}

/**
 * Implements hook_i18n_string_refresh().
 *
 * @todo Reimplement this.
 */
function cloudwords_i18n_refresh_strings($textgroup, $string_type, $object_type = NULL) {

  // $active_types = array_keys(cloudwords_textgroup_options_list());
  // if (!in_array($string_type, $active_types)) {
  //   cloudwords_translatable_delete_by_property(array('textgroup' => $string_type));
  //   return;
  // }

  $items = db_query("SELECT DISTINCT textgroup, objectid, type FROM {i18n_string} WHERE textgroup = :group AND type = :type", array(':group' => $textgroup, ':type' => $string_type));
  $langcodes = array_keys(cloudwords_i18n_language_list());

  $expired_ctids = array();

  foreach ($items as $item) {
    $item = (array) $item;

    // Change to object type.
    if ($object_type) {
      $item['type'] = $object_type;
    }
    $translatables = cloudwords_get_translatables_by_property($item, 'language');

    foreach ($langcodes as $langcode) {

      if (!isset($translatables[$langcode])) {
        $translatable = cloudwords_translatable_create($item);
        $translatable->language = $langcode;
        $translatable->label = $translatable->targetLabel();
        $translatable->save();
      }
      unset($translatables[$langcode]);
    }

    // Any that are left are outdated.
    foreach ($translatables as $translatable) {
      $expired_ctids[] = $translatable->ctid;
    }
  }

  if ($expired_ctids) {
    cloudwords_translatable_delete_multiple($expired_ctids);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cloudwords_i18n_form_i18n_string_translate_page_overview_form_alter(&$form, &$form_state) {
  $form['update'] = array(
    '#type' => 'fieldset',
    '#title' => t('Mark for Cloudwords Translation'),
    '#attributes' => array('class' => array('container-inline')),
    '#weight' => -1,
  );

  $form['update']['operation'] = array(
    '#type' => 'select',
    '#options' => array(
      'add' => t('Mark'),
      'remove' => t('Unmark'),
    ),
    '#default_value' => 'add',
    '#title_display' => 'invisible',
    '#title' => t('Queue operations'),
  );

  $form['update']['actions'] = array('#type' => 'actions');
  $form['update']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
    '#submit' => array('cloudwords_i18n_string_translate_page_overview_form_submit'),
  );

  // We need the operations column to come last. This is janky, but must be
  // done.
  $operations = $form['languages']['#header']['operations'];
  unset($form['languages']['#header']['operations']);
  $form['languages']['#header']['cloudwords_status'] = t('Marked for Cloudwords');
  $form['languages']['#header']['operations'] = $operations;


  $context = $form['object']['#value']->get_string_context();
  // Find existing translatables.
  $existing = cloudwords_get_translatables_by_property(array(
    'type' => $context[0],
    'objectid' => $context[1],
  ), 'language');

  foreach (cloudwords_language_list() as $lang_code => $language) {
    if ($lang_code != $form['source_language']['#value']) {
      $form['languages']['#rows'][$lang_code]['cloudwords_status'] = cloudwords_status_options_list($existing[$lang_code]->status);
    }
    else {
      $form['languages']['#rows'][$lang_code]['cloudwords_status'] = '';
    }
  }

  // Change attributes to correspond to tableselect.
  $form['languages']['#type'] = 'tableselect';
  unset($form['languages']['#theme']);
  $form['languages']['#options'] = $form['languages']['#rows'];
  unset($form['languages']['#rows']);
  $form['languages'][$form['source_language']['#value']]['#disabled'] = TRUE;

  form_load_include($form_state, 'inc', 'cloudwords_i18n', 'cloudwords_i18n.pages');
}

/**
 * Ensures that the correct translatables exist.
 *
 * @param string $textgroup
 *   The translatable textgroup.
 * @param string $type
 *   The translatable type.
 * @param string $objectid
 *   The translatable objectid.
 * @param string $label
 *   The translatable label.
 */
function cloudwords_i18n_ensure_translatables($textgroup, $type, $objectid, $label) {
  $translatables = cloudwords_get_translatables_by_property(array(
    'textgroup' => $textgroup,
    'type' => $type,
    'objectid' => $objectid,
  ), 'language');

  foreach (cloudwords_i18n_language_list() as $langcode => $language) {
    if (isset($translatables[$langcode])) {
      $translatables[$langcode]->label = $label;
      $translatables[$langcode]->save();
    }
    else {
      $new = cloudwords_translatable_create(array(
        'textgroup' => $textgroup,
        'type' => $type,
        'objectid' => $objectid,
        'label' => $label,
        'language' => $langcode,
      ));
      $new->save();
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cloudwords_i18n_form_i18n_string_translate_page_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'cloudwords_i18n_form_i18n_string_translate_page_form_submit';
  form_load_include($form_state, 'inc', 'cloudwords_i18n', 'cloudwords_i18n.pages');
}

/**
 * Helper function for converting from i18n strings to i18n objects.
 *
 * @param string $textgroup
 *   The translatable textgroup.
 * @param string $string_type
 *   The i18n string type.
 *
 * @return string
 *   The i18n string type converted to object type.
 */
function cloudwords_i18n_get_string_type($textgroup, $string_type) {
  foreach (i18n_object_info() as $type => $info) {
    if (isset($info['string translation'])) {
      if ($info['string translation']['textgroup'] == $textgroup && $info['string translation']['type'] == $string_type) {
        return $type;
      }
    }
  }
  return $string_type;
}
