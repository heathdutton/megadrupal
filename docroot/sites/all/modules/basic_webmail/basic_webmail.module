<?php
/**
 * @file
 * This is the main code file for the Basic webmail module.
 * All the Drupal hook implementations are in here.
 */

/**
 * Implements hook_help().
 */
function basic_webmail_help($path, $arg) {
  $output = '';

  switch ($path) {
    case 'admin/config/basic_webmail':
      $output = t('Send and receive email through an IMAP mail server.');
      break;
  }

  return $output;
}


/**
 * Implements hook_permission().
 */
function basic_webmail_permission() {
  return array(
    'administer basic_webmail' => array(
      'title' => t('Administer basic_webmail'),
      'description' => 'Perform administration tasks for Basic webmail.',
    ),
    'access basic_webmail' => array(
      'title' => t('Access basic_webmail'),
      'description' => 'Use Basic webmail',
    ),
    "access users' email addresses" => array(
      'title' => t("Access users' email addresses"),
      'description' => 'This permission gives anyone sending an email with Basic webamil access to the email addresses of all active users registered on this website.',
    ),
    'basic webmail override text format' => array(
      'title' => t('Override default text format'),
      'description' => t("Allows the message sender to override the message body's default text format when creating the message."),
    ),
    'basic webmail include attachments' => array(
      'title' => t('Attach files to messages'),
      'description' => t('Allows the message sender to include attachments with the message.'),
    ),
  );
}


/**
 * Implements hook_menu().
 */
function basic_webmail_menu() {
  $items = array();

  // Admin settings.
  $items['admin/config/system/basic_webmail'] = array(
    'title' => 'Basic webmail',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('basic_webmail_admin_settings'),
    'access arguments' => array('administer basic_webmail'),
    'description' => 'Configure the mail server.',
    'file' => 'basic_webmail.admin.inc',
  );

  // The main email listing page (the inbox).
  $items['basic_webmail'] = array(
    'title' => 'Email',
    'page callback' => 'basic_webmail_message_list',
    'description' => 'Send and/or receive email.',
    'access arguments' => array('access basic_webmail'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'basic_webmail.list.inc',
  );

  // The message list page.
  $items['basic_webmail/list/%'] = array(
    'page callback' => 'basic_webmail_message_list',
    'page arguments' => array(2),
    'access arguments' => array('access basic_webmail'),
    'type' => MENU_CALLBACK,
    'file' => 'basic_webmail.list.inc',
  );

  // The arguments for the next four menu items are the folder and the message
  // number.
  // The message view page.
  $items['basic_webmail/view/%/%'] = array(
    'page callback' => 'basic_webmail_message',
    'page arguments' => array(2, 3),
    'access arguments' => array('access basic_webmail'),
    'type' => MENU_CALLBACK,
    'file' => 'basic_webmail.view.inc',
  );

  // The copy message page.
  $items['basic_webmail/copy/%/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_basic_webmail_copy_message_form', 2, 3),
    'access arguments' => array('access basic_webmail'),
    'type' => MENU_CALLBACK,
    'file' => 'basic_webmail.view.inc',
  );
  // The delete message confirmation page.
  $items['basic_webmail/delete/%/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_basic_webmail_delete_message_form', 2, 3),
    'access arguments' => array('access basic_webmail'),
    'type' => MENU_CALLBACK,
    'file' => 'basic_webmail.view.inc',
  );
  // The move message page.
  $items['basic_webmail/move/%/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_basic_webmail_move_message_form', 2, 3),
    'access arguments' => array('access basic_webmail'),
    'type' => MENU_CALLBACK,
    'file' => 'basic_webmail.view.inc',
  );

  // The compose message page.
  $items['basic_webmail/sendmail'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_basic_webmail_send_mail_form'),
    'access arguments' => array('access basic_webmail'),
    'type' => MENU_CALLBACK,
    'file' => 'basic_webmail.edit.inc',
  );

  // Show email matches when filling in the forms.
  $items['basic_webmail/autocomplete'] = array(
    'title' => 'Basic webmail autocomplete',
    'page callback' => 'basic_webmail_autocomplete',
    'access arguments' => array("access users' email addresses"),
    'type' => MENU_CALLBACK,
    'file' => 'basic_webmail.edit.inc',
  );

  return $items;
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modifies the user profile page to add the login ID and password fields.
 */
function basic_webmail_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  // If this is the user's account form, they are allowed to access Basic
  // webmail, and the administrator has chosen to collect the login ID and
  // password, then add the fields to the form.
  if ($form['#user_category'] == 'account' && user_access('access basic_webmail', $form['#user'])) {
    _basic_webmail_form_user_form($form);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modifies the user registration page to add the login ID and password fields.
 */
function basic_webmail_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  // If the user is allowed to access Basic webmail, and the administrator has
  // chosen to collect the login ID and password, then add the fields to the
  // form.
  if (user_access('access basic_webmail', $form['#user'])) {
    _basic_webmail_form_user_form($form);
  }
}

/**
 * The form parts to add to the user forms above.
 *
 * @param array $form
 *   The form to modify.
 */
function _basic_webmail_form_user_form(&$form) {
  $form['basic_webmail_email_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Basic webmail account settings'),
    '#collapsible' => TRUE,
    '#weight' => 1,
  );
  // If there is an existing email address specified, display it.
  $default_value = !empty($form['#user']->data['basic_webmail_username']) ? $form['#user']->data['basic_webmail_username'] : '';
  $form['basic_webmail_email_settings']['basic_webmail_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Email account login'),
    '#default_value' => $default_value,
    '#description' => 'The login ID of your email account.',
//    '#required' => TRUE,
  );
  $form['basic_webmail_email_settings']['basic_webmail_password'] = array(
    '#type' => 'password_confirm',
    '#description' => 'The login password of your email account.',
  );
}


/**
 * Implements hook_user_presave().
 */
function basic_webmail_user_presave(&$edit, $account, $category) {
  // Check to see if we need to save any information.
  if ($category == 'account' && user_access('access basic_webmail', $account)) {
    // Initialize the variable to keep track of changes, so we don't access the
    // mail server unnecessarily.
    $changed = 0;

    // Include the file that has the encrypt and decrypt functions in it.
    include_once drupal_get_path('module', 'basic_webmail') . '/basic_webmail.common.inc';

    // If the login ID has changed, but is not empty, save it.
    if (!empty($edit['basic_webmail_username'])) {
      if (empty($account->data['basic_webmail_username']) || ($account->data['basic_webmail_username'] != $edit['basic_webmail_username'])) {
        $edit['data']['basic_webmail_username'] = $edit['basic_webmail_username'];
        $changed++;
      }
    }

    // Becuase it's empty by default when the form is shown, if there is
    // anything in the password field, save it.
    if (!empty($edit['basic_webmail_password'])) {
      $edit['data']['basic_webmail_password'] = _basic_webmail_encrypt_password($edit['basic_webmail_password']);
      $changed++;
    }

    if ($changed > 0) {
      // Subscribe to mailboxes.
    }
  }
}


/**
 * Implements hook_mail().
 *
 * @param string $key
 *   An identifier of the mail.
 * @param array $message
 *   An array to be filled in. Elements in this array include:
 *   - id: An ID to identify the mail sent. Look at module source code or
 *     drupal_mail() for possible id values.
 *   - to: The address or addresses the message will be sent to. The formatting
 *     of this string must comply with RFC 2822.
 *   - subject: Subject of the e-mail to be sent. This must not contain any
 *     newline characters, or the mail may not be sent properly. drupal_mail()
 *     sets this to an empty string when the hook is invoked.
 *   - body: An array of lines containing the message to be sent. Drupal will
 *     format the correct line endings for you. drupal_mail() sets this to an
 *     empty array when the hook is invoked.
 *   - from: The address the message will be marked as being from, which is set
 *     by drupal_mail() to either a custom address or the site-wide default
 *     email address when the hook is invoked.
 *   - headers: Associative array containing mail headers, such as From, Sender,
 *     MIME-Version, Content-Type, etc. drupal_mail() pre-fills several headers
 *     in this array.
 * @param array $params
 *   An array of parameters supplied by the caller of drupal_mail().
 */
function basic_webmail_mail($key, &$message, $params) {
  if (!empty($params['headers'])) {
    foreach ($params['headers'] as $key => $value) {
      $message['headers'][$key] = $params['headers'][$key];
    }
  }
  $message['subject'] = $params['subject'];
  $message['body'] = $params['body'];
}


/**
 * Implements hook_theme().
 */
function basic_webmail_theme() {
  return array(
    'basic_webmail_mail_list_form' => array(
      'render element' => 'form',
    ),
  );
}
