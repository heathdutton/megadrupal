<?php

/**
 * @file
 * Integrates Suomen Verkkomaksut payments with Drupal Commerce.
 *
 * @todo Implement usage of PENDING_ADDRESS.
 */

/**
 * Define constants.
 *
 * @see http://docs.verkkomaksut.fi/en/index-all.html#id487777
 */
define('SUOMENVERKKOMAKSUT_TEST_MERCHANT_ID', '13466');
define('SUOMENVERKKOMAKSUT_TEST_MERCHANT_HASH', '6pKF4jkv97zmqBJ3ZL8gUw5DfT2NMQ');
define('SUOMENVERKKOMAKSUT_DEFAULT_CULTURE', 'fi_FI');
define('SUOMENVERKKOMAKSUT_DEFAULT_TYPE', 'S1');
define('SUOMENVERKKOMAKSUT_DEFAULT_RETURN_SUCCESS', 'checkout/!order_id/payment/return/!payment_redirect_key/success');
define('SUOMENVERKKOMAKSUT_DEFAULT_RETURN_CANCEL', 'checkout/!order_id/payment/return/!payment_redirect_key/cancel');
define('SUOMENVERKKOMAKSUT_DEFAULT_RETURN_NOTIFY', 'commerce_suomenverkkomaksut_notify/!order_id/!payment_redirect_key');
define('SUOMENVERKKOMAKSUT_DEFAULT_EMBED', 'embed');

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_suomenverkkomaksut_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_suomenverkkomaksut'] = array(
    'title' => t('Suomen Verkkomaksut'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'callbacks' => array(
      'settings_form' => 'commerce_suomenverkkomaksut_settings_form',
    ),
  );

  return $payment_methods;
}

/**
 * Menu hook for notification callback.
 */
function commerce_suomenverkkomaksut_menu() {
  $items['commerce_suomenverkkomaksut_notify/%/%'] = array(
    'page callback' => 'commerce_suomenverkkomaksut_notify_check',
    'page arguments' => array(1,2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Payment method callback; return the settings form for a payment method.
 *
 * @param $settings
 *   An array of the current settings.
 */
function commerce_suomenverkkomaksut_settings_form($settings = NULL) {
  $form = array();

  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#description' => t('Merchant ID provided by Suomen Verkkomaksut. <em>13466</em> is for testing.'),
    '#default_value' => !empty($settings['merchant_id']) ? $settings['merchant_id'] : SUOMENVERKKOMAKSUT_TEST_MERCHANT_ID,
  );

  $form['merchant_hash'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Authentication Hash'),
    '#description' => t('Authentication Hash code calculated using MD5. <em>6pKF4jkv97zmqBJ3ZL8gUw5DfT2NMQ</em> is for testing.'),
    '#default_value' => !empty($settings['merchant_hash']) ? $settings['merchant_hash'] : SUOMENVERKKOMAKSUT_TEST_MERCHANT_HASH,
  );

  $form['culture'] = array(
    '#type' => 'select',
    '#title' => t('Language'),
    '#description' => t('Affects on default language and how amounts are shown on payment method selection page.'),
    '#options' => array(
      'automatic' => t('Automatic'),
      'fi_FI' => t('Finnish'),
      'sv_SE' => t('Swedish'),
      'en_US' => t('English'),
    ),
    '#default_value' => !empty($settings['culture']) ? $settings['culture'] : SUOMENVERKKOMAKSUT_DEFAULT_CULTURE,
  );

  $configure_link = l(t('Configure billing information settings here.'), 'admin/commerce/customer-profiles/types/billing/fields/commerce_customer_address');

  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#description' => t('S1 is simple version, E1 requires more information.<br /><strong>Note: If using E1, "First name" and "Last name" must be in separate fields in the billing information!</strong><br />!link', array('!link' => $configure_link)),
    '#options' => array(
      'S1' => t('S1'),
      'E1' => t('E1'),
    ),
    '#default_value' => !empty($settings['type']) ? $settings['type'] : SUOMENVERKKOMAKSUT_DEFAULT_TYPE,
  );

  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced'),
    '#description' => t('<strong>Note:</strong> Change these options only if you really know what you are doing!'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['advanced']['return_success'] = array(
    '#type' => 'textfield',
    '#title' => t('Return address (success)'),
    '#description' => t('<strong>Available variables:</strong> !order_id, !payment_redirect_key<br /><strong>Default value:</strong> <em>checkout/!order_id/payment/return/!payment_redirect_key/success</em>'),
    '#default_value' => !empty($settings['advanced']['return_success']) ? $settings['advanced']['return_success'] : SUOMENVERKKOMAKSUT_DEFAULT_RETURN_SUCCESS,
  );

  $form['advanced']['return_cancel'] = array(
    '#type' => 'textfield',
    '#title' => t('Return address (cancel)'),
    '#description' => t('<strong>Available variables:</strong> !order_id, !payment_redirect_key<br /><strong>Default value:</strong> <em>checkout/!order_id/payment/return/!payment_redirect_key/cancel</em>'),
    '#default_value' => !empty($settings['advanced']['return_cancel']) ? $settings['advanced']['return_cancel'] : SUOMENVERKKOMAKSUT_DEFAULT_RETURN_CANCEL,
  );

  $form['advanced']['return_notify'] = array(
    '#type' => 'textfield',
    '#title' => t('Return address (notify)'),
    '#description' => t('<strong>Available variables:</strong> !order_id, !payment_redirect_key<br /><strong>Default value:</strong> <em>commerce_suomenverkkomaksut_notify/!order_id/!payment_redirect_key</em>'),
    '#default_value' => !empty($settings['advanced']['return_notify']) ? $settings['advanced']['return_notify'] : SUOMENVERKKOMAKSUT_DEFAULT_RETURN_NOTIFY,
  );

  $form['advanced']['embed'] = array(
    '#type' => 'checkbox',
    '#title' => t('Embed payment method selection'),
    '#description' => t('Embed payment method selection page on the website using Javascript. NOTE: This feature is still in Beta!'),
    '#default_value' => !empty($settings['advanced']['embed']) ? $settings['advanced']['embed'] : SUOMENVERKKOMAKSUT_DEFAULT_EMBED,
  );


  return $form;
}

/**
 * Payment method callback; generation callback for the payment submission form.
 */
function commerce_suomenverkkomaksut_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  // @todo This avoids a notice message about undefined payment_details index. We need to find better solution for that.
  $form['empty'] = array(
    '#type' => 'hidden',
    '#default_value' => '',
  );

  return $form;
}

/**
 * Payment method callback; submission callback for the payment submission form.
 */
function commerce_suomenverkkomaksut_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['commerce_suomenverkkomaksut'] = $pane_values;
  $transaction = commerce_suomenverkkomaksut_transaction($payment_method, $order, $charge);
  // Save the transaction in the order to use later in commerce_suomenverkkomaksut_redirect_form_submit().
  $order->data['commerce_suomenverkkomaksut']['transaction'] = $transaction;
}

/**
 * Payment method callback; generation callback for the payment redirect form.
 */
function commerce_suomenverkkomaksut_redirect_form($form, &$form_state, $order, $payment_method) {
  if (empty($payment_method['settings']['merchant_id'])) {
    drupal_set_message(t('You have not configured Suomen Verkkomaksut payments. Using test credentials. !link.', array('!link' => l(t('Add configuration'), 'admin/commerce/config/payment-methods/manage/commerce_payment_commerce_suomenverkkomaksut/edit/3'))));
    $payment_method['settings']['merchant_id'] = SUOMENVERKKOMAKSUT_TEST_MERCHANT_ID;
    $payment_method['settings']['merchant_hash'] = SUOMENVERKKOMAKSUT_TEST_MERCHANT_HASH;
  }

  $form_elements = _commerce_suomenverkkomaksut_build_transaction($order, $payment_method);
  $service_host = _commerce_suomenverkkomaksut_get_setting('service_host');

  // Add embed JS if wanted.
  if (!empty($payment_method['settings']['advanced']['embed'])) {
    drupal_add_js("https://payment.paytrail.com/js/sv-widget.min.js", "external");
    drupal_add_js("
      jQuery(document).ready(function() {
        SV.widget.initWithForm('commerce-suomenverkkomaksut-redirect-form',{});
      });
    ", "inline");

  }

  // Build the form array.
  $form = array();
  $form['#action'] = $service_host;

  foreach ($form_elements as $key => $value) {
    $form[$key] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit Order'),
    '#weight' => 10,
  );

  return $form;
}

/**
 * Payment method callback; validation callback for redirected payments.
 *
 * Gets called when user comes back from offsite payment.
 */
function commerce_suomenverkkomaksut_redirect_form_validate($order, $payment_method) {
  // Log validation request.
  watchdog('commerce_suomenverkkomaksut', 'Received callback for redirect validation with $_REQUEST: <pre>!request</pre>', array('!request' => check_plain(print_r($_REQUEST, 1))), WATCHDOG_INFO);

  // Load fresh copy of $order and save $_REQUEST data.
  if ($order = commerce_order_load($order->order_id)) {
    $order->data['commerce_suomenverkkomaksut']['response'] = $_REQUEST;
    commerce_order_save($order);
  }

  // Select validation mode based on transaction return status code.
  if (arg(5) == 'success') {
    $response = $order->data['commerce_suomenverkkomaksut']['response'];

    // Get response values.
    $return_values = array(
      'ORDER_NUMBER' => check_plain($response['ORDER_NUMBER']),
      'TIMESTAMP' => check_plain($response['TIMESTAMP']),
      'PAID' => check_plain($response['PAID']),
      'METHOD' => check_plain($response['METHOD']),
      'RETURN_AUTHCODE' => check_plain($response['RETURN_AUTHCODE']),
    );

    // Get merchant hash.
    $merchant_hash = _commerce_suomenverkkomaksut_get_setting('merchant_hash');

    // Generate checksum with md5, convert to uppercase.
    $checksum = drupal_strtoupper(md5($return_values['ORDER_NUMBER'] . '|' . $return_values['TIMESTAMP'] . '|' . $return_values['PAID'] . '|' . $return_values['METHOD'] . '|' . $merchant_hash));

    // Check checksum validity.
    if ($checksum != $return_values['RETURN_AUTHCODE']) {
      drupal_set_message(t('Validation failed (security hash mismatch). Please contact store administration if the problem persists.'), 'error');
      $failure = TRUE;
    }
  }

  // If return is cancel.
  elseif (arg(5) == 'cancel') {
    $failure = TRUE;
  }

  // If return status is unknown.
  else {
    $failure = TRUE;
  }

  // If any errors were detected, set payment status to failure and terminate.
  if (isset($failure)) {
    $transaction = commerce_payment_transaction_load($order->data['commerce_suomenverkkomaksut']['transaction']->transaction_id);
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    commerce_payment_transaction_save($transaction);
    return FALSE;
  }

  // If we're good to go this far, proceed to submit function.
  return TRUE;
}

/**
 * Payment method callback; submission callback for redirected payments.
 */
function commerce_suomenverkkomaksut_redirect_form_submit($order, $payment_method) {

  $return_type = arg(5);
  if ($return_type == 'success') {
    // Payment successful at Suomen Verkkomaksut, set transaction status to 'verified' to initiate order delivery.
    $transaction = commerce_payment_transaction_load($order->data['commerce_suomenverkkomaksut']['transaction']->transaction_id);
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    commerce_payment_transaction_save($transaction);

  }
}

/**
 * Helper function to build a transaction.
 *
 * @param object $order
 *   The order object.
 * @param array $payment_method
 *   The payment method array.
 */
function _commerce_suomenverkkomaksut_build_transaction($order, $payment_method) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $type = _commerce_suomenverkkomaksut_get_setting('type');

  // Build required transaction form elements in array.
  $form_elements = array();
  $form_elements['MERCHANT_ID'] = _commerce_suomenverkkomaksut_get_setting('merchant_id');

  // S1 fields.
  if ($type == 'S1') {
    $order_total = $order_wrapper->commerce_order_total->amount->value();
    $amount = $order_total / 100;
    $form_elements['AMOUNT'] = number_format($amount, 2, '.', '');
  }

  $params = array(
    '!order_id' => $order->order_id,
    '!payment_redirect_key' => $order->data['payment_redirect_key'],
  );

  // Generate return URLs
  $modes = array('success', 'cancel', 'notify');
  foreach ($modes as $mode) {
    $path = _commerce_suomenverkkomaksut_get_setting("return_$mode");
    $path_parts = preg_split('/\?|\&/', $path); // Extract GET parameters, if any
    $get_params = array();
    $count = count($path_parts);
    for ($i = 1; $i < $count; $i++) {
      $tmp = explode('=', $path_parts[$i]);
      $get_params[$tmp[0]] = $tmp[1];
    }
    ${"return_$mode"} = url(strtr($path_parts[0], $params), array('absolute' => TRUE, 'query' => $get_params));
  }

  $form_elements += array(
    'ORDER_NUMBER' => $order->order_id,
    'REFERENCE_NUMBER' => '', // @todo Add refno here once implemented.
    'ORDER_DESCRIPTION' => '',
    'CURRENCY' => 'EUR', // Only EUR is accepted for Finnish banks and credit cards.
    'RETURN_ADDRESS' => $return_success,
    'CANCEL_ADDRESS' => $return_cancel,
    'PENDING_ADDRESS' => '',
    'NOTIFY_ADDRESS' => $return_notify, // @todo Handle notifications.
    'TYPE' => _commerce_suomenverkkomaksut_get_setting('type'),
    'CULTURE' => _commerce_suomenverkkomaksut_get_setting('culture'),
    'PRESELECTED_METHOD' => '',
    'MODE' => '', // Default is 1. We want to use defaults.
    'VISIBLE_METHODS' => '', // This has not yet been implemented by Suomen Verkkomaksut.
    'GROUP' => '', // This has not yet been implemented by Suomen Verkkomaksut.
  );

  // E1 fields.
  if ($type == 'E1') {
    // Prepare the billing address for use in the request.
    $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

    // Add additional fields like this:
    // Assumption: Field machine name is 'field_customer_phone'.
    // $phone = $order_wrapper->commerce_customer_billing->field_customer_phone->value();

    $form_elements += array(
      'CONTACT_TELNO' => '', // TELNO needed for Klarna, add custom field.
      'CONTACT_CELLNO' => '',
      'CONTACT_EMAIL' => substr($order->mail, 0, 255),
      'CONTACT_FIRSTNAME' => substr($billing_address['first_name'], 0, 64),
      'CONTACT_LASTNAME' => substr($billing_address['last_name'], 0, 64),
      'CONTACT_COMPANY' => '',
      'CONTACT_ADDR_STREET' => substr($billing_address['thoroughfare'], 0, 128),
      'CONTACT_ADDR_ZIP' => substr($billing_address['postal_code'], 0, 16),
      'CONTACT_ADDR_CITY' => substr($billing_address['locality'], 0, 64),
      'CONTACT_ADDR_COUNTRY' => substr($billing_address['country'], 0, 2),
      'INCLUDE_VAT' => '1', // @todo Check commerce settings.
      'ITEMS' => count($order_wrapper->commerce_line_items->value()),
    );

    // Append each line item to form elements
    foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
      $element_tmp = array(
        'ITEM_TITLE' => '',
        'ITEM_NO' => $line_item_wrapper->line_item_label->value(),
        'ITEM_AMOUNT' => round($line_item_wrapper->quantity->value()),
        'ITEM_PRICE' => number_format($line_item_wrapper->commerce_unit_price->amount->value() / 100, 2, '.', ''),
        'ITEM_TAX' => '0.00',
        'ITEM_DISCOUNT' => '0', // @todo Integrate with some discount module.
        'ITEM_TYPE' => '1',
      );      
      if(module_exists("commerce_tax")) {
        $price = $line_item_wrapper->commerce_unit_price->value();
        foreach($price['data']['components'] as $comp) {
          if(isset($comp['price']['data']['tax_rate'])) {
            $element_tmp['ITEM_TAX'] = $comp['price']['data']['tax_rate']['rate'] * 100;
          }
        }
      }
      switch($line_item_wrapper->type->value()) {
        case 'product':
          $element_tmp['ITEM_TYPE'] = '1';
          $product = $line_item_wrapper->commerce_product->value();
          $element_tmp['ITEM_TITLE'] = $product->title;
          break;        
        case 'shipping':
          $element_tmp['ITEM_TYPE'] = '2';
          $shipping = $line_item_wrapper->commerce_shipping_service->value();
          $element_tmp['ITEM_TITLE'] = $line_item_wrapper->line_item_label->value();
          $element_tmp['ITEM_NO'] = $shipping;
          break;
      }
      foreach ($element_tmp as $key => $value) {
        $form_elements[$key . '[' . $delta . ']'] = $value;
      }
    }
  }

  // Calculate hash for authcode.
  // @todo Take charset into consideration, hash output might vary.
  $merchant_hash = _commerce_suomenverkkomaksut_get_setting('merchant_hash');
  $form_elements['AUTHCODE'] = strtoupper(md5($merchant_hash . '|' . implode('|', $form_elements)));

  return $form_elements;
}

/**
 * Creates a payment transaction.
 *
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 * @param object $order
 *   The order object the payment applies to.
 * @param array $charge
 *   An array indicating the amount and currency code to charge.
 *
 * @return object
 *   The transaction object.
 */
function commerce_suomenverkkomaksut_transaction($payment_method, $order, $charge) {
  $transaction = commerce_payment_transaction_new('commerce_suomenverkkomaksut', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;

  commerce_payment_transaction_save($transaction);

  return $transaction;
}

/**
 * Return payment method settings.
 *
 * @param string $setting_name
 *   The name of the setting.
 *
 * @return string
 *   The value of the specified setting.
 */
function _commerce_suomenverkkomaksut_get_setting($setting_name) {
  $payment_method = commerce_payment_method_instance_load('commerce_suomenverkkomaksut|commerce_payment_commerce_suomenverkkomaksut');
  $setting = FALSE;

  switch ($setting_name) {
    // Service host.
    case 'service_host':
      $setting = 'https://payment.paytrail.com/';
      break;

    // Merchant ID.
    case 'merchant_id':
      $setting = !empty($payment_method['settings']['merchant_id']) ? $payment_method['settings']['merchant_id'] : SUOMENVERKKOMAKSUT_TEST_MERCHANT_ID;
      break;

    // Auth Hash.
    case 'merchant_hash':
      $setting = !empty($payment_method['settings']['merchant_hash']) ? $payment_method['settings']['merchant_hash'] : SUOMENVERKKOMAKSUT_TEST_MERCHANT_HASH;
      break;

    // Culture.
    case 'culture':

      if($payment_method['settings']['culture'] == 'automatic') {
        global $language;
        switch($language->language) {
          case 'fi':
            $setting = 'fi_FI';
            break;
          case 'sv':
            $setting = 'sv_SE';
            break;
          case 'en':
            $setting = 'en_US';
            break;
          default:
            $setting = SUOMENVERKKOMAKSUT_DEFAULT_CULTURE;
            break;
        }
      } else {
        $setting = !empty($payment_method['settings']['culture']) ? $payment_method['settings']['culture'] : SUOMENVERKKOMAKSUT_DEFAULT_CULTURE;
      }      

      break;

    // Type.
    case 'type':
      $setting = !empty($payment_method['settings']['type']) ? $payment_method['settings']['type'] : SUOMENVERKKOMAKSUT_DEFAULT_TYPE;
      break;

    // Return success.
    case 'return_success':
      $setting = !empty($payment_method['settings']['advanced']['return_success']) ? $payment_method['settings']['advanced']['return_success'] : SUOMENVERKKOMAKSUT_DEFAULT_RETURN_SUCCESS;
      break;

    // Return cancel.
    case 'return_cancel':
      $setting = !empty($payment_method['settings']['advanced']['return_cancel']) ? $payment_method['settings']['advanced']['return_cancel'] : SUOMENVERKKOMAKSUT_DEFAULT_RETURN_CANCEL;
      break;

    // Return notify.
    case 'return_notify':
      $setting = !empty($payment_method['settings']['advanced']['return_notify']) ? $payment_method['settings']['advanced']['return_notify'] : SUOMENVERKKOMAKSUT_DEFAULT_RETURN_NOTIFY;
      break;
  }

  return $setting;
}

/**
 * Save the transaction for notify url for Suomenverkkomaksut.
 *
 * @param int $order_id
 *   Order ID.
 */
function commerce_suomenverkkomaksut_notify_save($order_id) {
  // Get transaction ID and status.
  $transaction_id = db_query(
  'SELECT transaction_id
    FROM {commerce_payment_transaction}
    WHERE order_id = :order_id AND status = \'pending\'
    ORDER BY transaction_id
    DESC LIMIT 1',
  array(':order_id' => $order_id))->fetchField();
  if (isset($transaction_id) && $transaction_id) {
    // Load all order details.
    $order = commerce_order_load($order_id);
    // Save request parameters.
    $order->data['commerce_paytrail']['response'] = $_REQUEST;

    // Save transaction as successful.
    $transaction = commerce_payment_transaction_load($transaction_id);
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    commerce_payment_transaction_save($transaction);

    // Manually advance the order status, in this case to checkout_complete.
    commerce_payment_redirect_pane_next_page($order);
  }
}


/**
 * Check whether the received data is valid.
 */
function commerce_suomenverkkomaksut_notify_check() {
  if (!(isset($_GET['ORDER_NUMBER']) && isset($_GET['TIMESTAMP']) && isset($_GET['RETURN_AUTHCODE']))) {
    // Add failing at beginning.
    return FALSE;
  }
  $order_id = $_GET['ORDER_NUMBER'];
  $response = $_REQUEST;
  $failure = FALSE;

  // Get response values.
  $return_values = array(
    'ORDER_NUMBER' => check_plain($response['ORDER_NUMBER']),
    'TIMESTAMP' => check_plain($response['TIMESTAMP']),
    'PAID' => check_plain($response['PAID']),
    'METHOD' => check_plain($response['METHOD']),
    'RETURN_AUTHCODE' => check_plain($response['RETURN_AUTHCODE']),
  );

  // Get merchant hash.
  $merchant_hash = _commerce_suomenverkkomaksut_get_setting('merchant_hash');

  // Generate checksum with md5, convert to uppercase.
  $checksum = drupal_strtoupper(md5(
    $return_values['ORDER_NUMBER'] .
    '|' . $return_values['TIMESTAMP'] .
    '|' . $return_values['PAID'] .
    '|' . $return_values['METHOD'] .
    '|' . $merchant_hash
  ));

  // Check checksum validity.
  if ($checksum != $return_values['RETURN_AUTHCODE']) {
    $failure = TRUE;
  }

  if ($failure == FALSE) {
    commerce_suomenverkkomaksut_notify_save($order_id);
  }
}