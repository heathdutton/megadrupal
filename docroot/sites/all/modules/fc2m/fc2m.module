<?php
/**
 * @file
 * Hook implementations for fc2m module.
 */

/**
 * Implements hook_menu().
 */
function fc2m_menu() {
  $items = array();

  $items['admin/structure/fc2m'] = array(
    'title' => 'Field collection to multifield',
    'description' => 'Migrate field collection fields to multifields',
    'access arguments' => array('access fc2m'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fc2m_migrate_form'),
    'file path' => drupal_get_path('module', 'field_ui'),
    'file' => 'field_ui.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function fc2m_permission() {
  return array(
    'access fc2m' => array(
      'title' => t('Migrate field collection fields to multifields'),
      'description' => t('Allows the user to migrate field collection fields to multifields'),
    ),
  );
}

/**
 * Form callback.
 */
function fc2m_migrate_form($form, &$form_state) {
  $fields = field_read_fields(array('type' => 'field_collection'));
  $instances = field_read_instances(array('field_name' => array_keys($fields)));
  $options = array();
  $entity_info = entity_get_info();

  foreach ($instances as $instance) {
    $options[$instance['entity_type'] . ':' . $instance['bundle'] . ':' . $instance['field_name']] = $entity_info[$instance['entity_type']]['label'] . ': ' . $entity_info[$instance['entity_type']]['bundles'][$instance['bundle']]['label'] . ': ' . $instance['label'] . ' (' . $instance['field_name'] . ')';
  }
  ksort($options);
  $form['field_collection'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Select the field collection instance to migrate'),
    '#description' => t('The selected field collection instance will be migrated to a multifield.'),
    '#required' => TRUE,
    '#options' => $options,
  );

  $form['multifield_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Multifield label'),
    '#size' => 15,
    '#description' => t('The label for the newly created multifield instance.'),
    '#required' => TRUE,
  );
  $form['multifield_name'] = array(
    '#type' => 'machine_name',
    '#title' => t('Multifield name'),
    // This field should stay LTR even for RTL languages.
    '#field_prefix' => '<span dir="ltr">field_',
    '#field_suffix' => '</span>&lrm;',
    '#size' => 15,
    '#description' => t('A unique machine-readable name containing letters, numbers, and underscores. Leave blank to select an existing multifield. Enter the field name to create a new multifield.'),
    // 32 characters minus the 'field_' prefix.
    '#maxlength' => 26,
    '#machine_name' => array(
      'exists' => '_field_ui_field_name_exists',
      'standalone' => TRUE,
      'label' => '',
    ),
    '#required' => FALSE,
    '#states' => array(
      'visible' => array(
        ':input[name="existing_multifield"]' => array('value' => ''),
      ),
      'required' => array(
        ':input[name="existing_multifield"]' => array('value' => ''),
      ),
    ),
  );
  $multifields = field_read_fields(array('type' => 'multifield'));
  $multifield_options = array('' => t('Create new multifield'));
  foreach ($multifields as $multifield) {
    $multifield_options[$multifield['field_name']] = $multifield['field_name'];
  }
  if (count($multifield_options) > 1) {
    $form['existing_multifield'] = array(
      '#type' => 'select',
      '#title' => t('Or use an existing multifield'),
      '#description' => t('The entered label will be used to create an instance of this multifield.'),
      '#options' => $multifield_options,
      '#states' => array(
        'visible' => array(
          ':input[name="multifield_name"]' => array('empty' => TRUE),
        ),
        'required' => array(
          ':input[name="multifield_name"]' => array('empty' => TRUE),
        ),
      ),
    );
  }
  else {
    $form['existing_multifield'] = array(
      '#type' => 'value',
      '#value' => '',
    );
  }
  $form['delete_source_instance'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete source instance after migrating'),
    '#description' => t('Warning: This might result in loss of data if something goes wrong!'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create multifield & migrate data'),
  );
  return $form;
}

/**
 * Form validate callback.
 */
function fc2m_migrate_form_validate(&$form, &$form_state) {
  $field_names = array();
  foreach (array_filter($form_state['values']['field_collection']) as $collection) {
    list($entity_type, $bundle, $field_name) = explode(':', $collection);
    $field_names[] = $field_name;
  }
  if (count(array_unique($field_names)) > 1) {
    form_error($form['field_collection'], t('When selecting multiple field instances for migration, the instances must be of the same field (field names must match).'));
    return;
  }
  $subfields = field_info_instances('field_collection_item', $field_name);
  foreach ($subfields as $subfield_instance) {
    $subfield = field_info_field($subfield_instance['field_name']);
    if ($subfield['cardinality'] != 1) {
      form_error($form['field_collection'], t('The selected field colletion has multiple-value subfields and thus can not be migrated to a multifield'));
      break;
    }
    if (!empty($form_state['values']['multifield_name'])) {
      foreach (array_keys($subfield['columns']) as $column_name) {
        if (drupal_strlen(_field_sql_storage_columnname('field_' . $form_state['values']['multifield_name'], _field_sql_storage_columnname($subfield['field_name'], $column_name))) > 63) {
          form_error($form['multifield_name'], t('The field name of the multifield would result in a column name that is longer than 63 characters for field %field, column %column', array('%field' => $subfield['field_name'], '%column' => $column_name)));
        }
      }
    }
    elseif (!empty($form_state['values']['existing_multifield'])) {
      if (!field_info_instance('multifield', $subfield['field_name'], $form_state['values']['existing_multifield'])) {
        form_error($form['existing_multifield'], t('The existing multifield is missing the %field field', array('%field' => $subfield['field_name'])));
      }
    }
  }
  if (empty($form_state['values']['multifield_name']) && empty($form_state['values']['existing_multifield'])) {
    form_error($form['multifield_name'], t('You must either enter a name for the new multifield or choose an existing one.'));
  }
}

/**
 * Form submit callback.
 */
function fc2m_migrate_form_submit(&$form, &$form_state) {
  $batch = array(
    'operations' => array(),
    'finished' => 'fc2m_batch_finished',
    'title' => t('Migrating field collections to multifields.'),
    'progress_message' => t('Processed @current out of @total.'),
  );

  foreach (array_filter($form_state['values']['field_collection']) as $collection) {
    list($entity_type, $bundle, $field_name) = explode(':', $collection);
    $instance = field_info_instance($entity_type, $field_name, $bundle);
    $multifield_name = empty($form_state['values']['multifield_name']) ? $form_state['values']['existing_multifield'] : 'field_' . $form_state['values']['multifield_name'];
    $batch['operations'][] = array(
      'fc2m',
      array(
        $instance,
        $multifield_name,
        $form_state['values']['multifield_label'],
        $form_state['values']['delete_source_instance'],
      ),
    );
  }
  batch_set($batch);
}

/**
 * Migrate a field collection instance to a multifield.
 *
 * @param array $instance
 *   The field instance to migrate.
 * @param string $multifield_name
 *   The field name for the multifield.
 * @param string $multifield_label
 *   The field label for the multifield instance.
 * @param bool $delete_source_instance
 *   Whether or not to delete the source instance.
 */
function fc2m($instance, $multifield_name, $multifield_label, $delete_source_instance = FALSE) {
  $field_name = $instance['field_name'];
  $bundle = $instance['bundle'];
  $entity_type = $instance['entity_type'];
  $field = field_info_field($field_name);

  $multifield_field = field_info_field($multifield_name);
  if (!$multifield_field) {
    // Create the multifield.
    $multifield_field = field_create_field(array(
      'active' => $field['active'],
      'cardinality' => $field['cardinality'],
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => $multifield_name,
      'foreign keys' => array(),
      'locked' => 0,
      'module' => 'multifield',
      'settings' => array(
        'hide_blank_items' => 1,
      ),
      'translatable' => $field['translatable'],
      'type' => 'multifield',
    ));
  }
  $multifield_instance = field_info_instance($entity_type, $multifield_name, $bundle);
  if (!$multifield_instance) {
    $multifield_instance = field_create_instance(array(
      'bundle' => $bundle,
      'default_value' => NULL,
      'deleted' => 0,
      'description' => $instance['description'],
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'multifield',
          'settings' => array(
            'view_mode' => 'default',
          ),
          'type' => 'multifield_default',
          'weight' => $instance['display']['default']['weight'],
        ),
      ),
      'entity_type' => $entity_type,
      'field_name' => $multifield_name,
      'label' => $multifield_label,
      'required' => $instance['required'],
      'settings' => array(
        'user_register_form' => $instance['settings']['user_register_form'],
      ),
      'widget' => array(
        'active' => 0,
        'module' => 'multifield',
        'settings' => array(),
        'type' => 'multifield_default',
        'weight' => $instance['widget']['weight'],
      ),
    ));
  }

  // Create the subfields & queries.
  $data_query = db_select('field_collection_item', 'fci');
  $data_query->addField('fci', 'item_id', _field_sql_storage_columnname($multifield_name, 'id'));
  $data_query->addExpression("'" . $entity_type . "'", 'entity_type');
  $data_query->addExpression("'" . $bundle . "'", 'bundle');
  $table_alias = $data_query->join(
    _field_sql_storage_tablename(field_info_field($field_name)),
    $field_name,
    '%alias.' . _field_sql_storage_columnname($field_name, 'value') . ' = fci.item_id '
    . 'AND %alias.entity_type = \'' . $entity_type . '\' '
    . 'AND %alias.bundle = \'' . $bundle . '\' '
    . 'AND %alias.deleted = 0'
  );
  $data_query->addField($table_alias, 'deleted', 'deleted');
  $data_query->addField($table_alias, 'entity_id', 'entity_id');
  $data_query->addField($table_alias, 'revision_id', 'revision_id');
  $data_query->addField($table_alias, 'language', 'language');
  $data_query->addField($table_alias, 'delta', 'delta');

  $revision_query = db_select('field_collection_item', 'fci');
  $revision_query->addField('fci', 'item_id', _field_sql_storage_columnname($multifield_name, 'id'));
  $revision_query->addExpression("'" . $entity_type . "'", 'entity_type');
  $revision_query->addExpression("'" . $bundle . "'", 'bundle');
  $table_alias = $revision_query->join(
    _field_sql_storage_tablename(field_info_field($field_name)),
    $field_name,
    '%alias.' . _field_sql_storage_columnname($field_name, 'value') . ' = fci.item_id '
    . 'AND %alias.entity_type = \'' . $entity_type . '\' '
    . 'AND %alias.bundle = \'' . $bundle . '\' '
    . 'AND %alias.deleted = 0'
  );
  $revision_query->addField($table_alias, 'deleted', 'deleted');
  $revision_query->addField($table_alias, 'entity_id', 'entity_id');
  $revision_query->addField($table_alias, 'revision_id', 'revision_id');
  $revision_query->addField($table_alias, 'language', 'language');
  $revision_query->addField($table_alias, 'delta', 'delta');
  $subfields = field_info_instances('field_collection_item', $field_name);
  foreach ($subfields as $subfield_instance) {
    $subfield = field_info_field($subfield_instance['field_name']);
    $table_alias = $data_query->leftJoin(
      _field_sql_storage_tablename(field_info_field($subfield_instance['field_name'])),
      $subfield_instance['field_name'],
      '%alias.entity_id = fci.item_id AND %alias.deleted = 0 AND %alias.entity_type = \'field_collection_item\''
    );
    $revision_table_alias = $revision_query->leftJoin(
      _field_sql_storage_tablename(field_info_field($subfield_instance['field_name'])),
      $subfield_instance['field_name'],
      '%alias.entity_id = fci.item_id AND %alias.deleted = 0 AND %alias.entity_type = \'field_collection_item\''
    );
    foreach (array_keys($subfield['columns']) as $column_name) {
      $data_query->addField(
        $table_alias,
        _field_sql_storage_columnname($subfield['field_name'], $column_name),
        _field_sql_storage_columnname($multifield_name, _field_sql_storage_columnname($subfield['field_name'], $column_name))
      );
      $revision_query->addField(
        $revision_table_alias,
        _field_sql_storage_columnname($subfield['field_name'], $column_name),
        _field_sql_storage_columnname($multifield_name, _field_sql_storage_columnname($subfield['field_name'], $column_name))
      );
    }
    if (!field_info_instance('multifield', $subfield_instance['field_name'], $multifield_name)) {
      unset($subfield_instance['id']);
      $subfield_instance['bundle'] = $multifield_name;
      $subfield_instance['entity_type'] = 'multifield';
      field_create_instance($subfield_instance);
    }
  }

  // Migrate!
  db_insert(_field_sql_storage_tablename($multifield_field))
    ->fields(array_merge($data_query->getFields(), $data_query->getExpressions()))
    ->from($data_query)
    ->execute();
  db_insert(_field_sql_storage_revision_tablename($multifield_field))
    ->fields(array_merge($revision_query->getFields(), $revision_query->getExpressions()))
    ->from($revision_query)
    ->execute();
  drupal_static_reset('multifield_get_next_id');
  $id_query = db_select(_field_sql_storage_tablename($multifield_field), 'f');
  $id_query->addExpression('MAX(' . _field_sql_storage_columnname($multifield_name, 'id') . ')');
  $max_id = $id_query->execute()->fetchField();
  if ($max_id > variable_get('multifield_max_id', 0)) {
    variable_set('multifield_max_id', $max_id);
  }
  if ($delete_source_instance) {
    field_delete_instance($instance);
  }
  entity_get_controller($entity_type)->resetCache();
  field_info_cache_clear();
}

/**
 * Batch 'finished' callback.
 */
function fc2m_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('The data has been successfully migrated to a multifield.'));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
    drupal_set_message($message, 'error');
  }
}
