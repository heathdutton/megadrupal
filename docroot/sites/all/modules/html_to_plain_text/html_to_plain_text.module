<?php
/**
 * @file
 *  Drupal module main and require file.
 *
 *  In this file we will extend drupal hook_menu and form hooks.  Drupal menu
 *  use for settings page and form hook to implement settings which made on
 *  settings page and parse html code to plain text code.
 */

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function html_to_plain_text_form_node_form_alter(&$form, $form_state, $form_id) {
  $node_type = $form['type']['#value'];
  $parser_enble = variable_get('html_to_plain_text_enable_' . $node_type, FALSE);

  // If parser settings is enable for specific content type
  if ($parser_enble) {
    $form['html_to_plain_text_node_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('HTML Parser'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => variable_get('html_to_plain_text_weight_' . $node_type, 0),
      '#prefix' => '<div class="html-to-plaintext-node-fieldset-class">',
      '#suffix' => '</div>'
    );
    $form['html_to_plain_text_node_fieldset']['html_to_plain_text_input'] = array(
      '#type' => 'textarea',
      '#rows' => 4,
      '#title' => 'HTML Parser Input',
      '#prefix' => '<div class="html-to-plaintext-input-textarea">',
      '#suffix' => '</div>',
      '#default_value' => ''
    );
    $form['html_to_plain_text_node_fieldset']['htmlparser_button'] = array(
      '#type' => 'button',
      '#value' => t('Process'),
      '#limit_validation_errors' => array(),
      '#ajax' => array(
        'callback' => 'html_to_plain_text_ajax_handler',
        'wrapper' => 'html_to_plain_text_output_textarea'
      )
    );
    $form['html_to_plain_text_node_fieldset']['htmlparser_output'] = array(
      '#type' => 'textarea',
      '#rows' => 4,
      '#title' => 'HTML Parser Output',
      '#prefix' => '<div id="html_to_plain_text_output_textarea">',
      '#suffix' => '</div>',
      '#default_value' => ''
    );
  }
}

/**
 * Ajax handler parse html code and return plain text.
 *
 * @param array $form
 *   Contain form attributes.
 * @param type $form_state
 *   Contain form post data and drupal attributes.
 *
 * @return array
 *   Return modified form.
 */
function html_to_plain_text_ajax_handler($form, $form_state) {
  $strip_tags = drupal_html_to_text($form_state['values']['html_to_plain_text_input']);
  // $html = html_entity_decode($strip_tags, ENT_QUOTES, 'UTF-8');
  // $replaces = preg_replace('/[0-9]{1,2}\:[0-9]{1,2}/', ' ', $html);

  $remove = array("\n", "\r\n", "\r");
  $replaces = str_replace($remove, ' ', $strip_tags);
  $form['html_to_plain_text_node_fieldset']['htmlparser_output']['#value'] = $replaces;
  return $form['html_to_plain_text_node_fieldset']['htmlparser_output'];
}

/**
 * Implements hook_menu().
 */
function html_to_plain_text_menu() {
  $items = array();
  $items['admin/settings/html_to_plain_text'] = array(
    'title' => 'Html To Plain Text',
    'description' => 'Setting page for Html to plaintext for node types.',
    'page callback' => 'drupal_get_form',
    'access callback' => TRUE,
    'page arguments' => array('html_to_plain_text_callback_handler')
  );

  return $items;
}

/**
 * @return array
 *  Return form array.
 */
function html_to_plain_text_callback_handler() {

  $form = array();
  $node_types = node_type_get_types();
  foreach ($node_types as $type_machine => $type_obj) {
    $form['html_to_plain_text_type_' . $type_machine] = array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#title' => t('Enable settings for ' . $type_obj->name)
    );
    $form['html_to_plain_text_type_' . $type_machine]['html_to_plain_text_enable_' . $type_machine] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable'),
      '#default_value' => variable_get('html_to_plain_text_enable_' . $type_machine, FALSE),
    );
    $form['html_to_plain_text_type_' . $type_machine]['html_to_plain_text_weight_' . $type_machine] = array(
      '#type' => 'textfield',
      '#title' => t('Weight'),
      '#default_value' => variable_get('html_to_plain_text_weight_' . $type_machine, 0),
    );
  }

  return system_settings_form($form);
}
