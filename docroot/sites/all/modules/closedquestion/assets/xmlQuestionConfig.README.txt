xmlQuestionConfig.json is the configuration of the xml editor for the
ClosedQuestion xml format. It is a json object containing the keys:
- valid_children: array of node names that are valid root nodes of the XML.
- types: json object containing all allowed nodes as name-config pairs. Each
  config object contains the following fields:
  - alias_of: (optional) String, the name of another node type that this node
    type is an alias of. Before processing the name of this node type is
    changed to the name of the real node type. If this is set, all other
    configurations are ignored and the configuration of the new name is used,
    with the exception of content_to_attribute
  - content_to_attribute: Used in combination with alias_of, to indicate that
    the content of the old node should be put in a parameter of the new node.
  - content: int, 1 if all children of the node are to be treated as a single
    string and should thus be displayed in a text-box in the editor. 0 if any
    children should be treated as separate nodes.
  - attributes: (optional) json object containing name-config pairs for all
    valid attributes of the node. The config can be a string or an object. If
    the config is a string, nothing special is done. If the config is an
    object it can contain the following keys:
    fields:
    - alias_of: (optional) String, the name of another attribute that this
      attribute is an alias of. Before processing the name of this attribute
      is changed to the name of the real attribute. If this is set, all other
      configurations are ignored and the configuration of the new name is
      used.
    - title: (optional) The human readable title of the attribute
    - descripion: (optional) String with a description of the attribute.
    - values: (optional) Either a json array containing valid values of the
      attribute or an object specifying the valid values in another way.
      If it is an array then each value is either a string or an object. If
      the value is a string, that string will be used as the actual value and
      as human-readable string for display. If the value is an object it must
      contain the following:
      - title: The human-readable title of the attribute value.
      - value: The actual value for the attribute.
      If the values option is an object it must contain the following keys:
      - node_search_string: A search string to find the nodes to takes values
        from.
      - get_values_from: An attribute name that the values should be taken
        from.
      - get_titles_from: An attribute name that the titles should be taken
        from, or "/content" if the title should be taken from the content of
        the nodes.

    - value_aliases: (optional) Object with oldname/newname combinations.
      Used to indicate that a certain (old) value is an alias of another
      (new) value. Before processing the old value will be replaced with the
      new value.
    - mandatory: (optional) String. Indicates this attribute has to exist
      if it does not exist, it is created with the given string value.
    - depricated: (optional) int 0 or 1. Indicates this attribute is depri-
      cated. This will hide the attribute if it has no value, and show a
      warning if it does have a value.
    - css: (optional) Object with css name/value pairs to style the attribute
      editor's form element OR an array with class names to apply to the form
      element.
    - hint_on_empty (optional) string. The hint the user gets when the
      attribute form element (i.c. a input or a textarea) is empty.
    - feedback (optional) Array with objects, allowing for feedback on user
      input in the attribute editors. Each object can/should have following
      keys:
      - correct: int 0 or 1. Indicates that this match refers to a correct
        user input.
      - match: String containing a regular expression, which will be matched
        against the attribute's value
      - text: String with the text to show to the user when there is a match.
      - fatal: (optional) int 0 or 1. (only available when correct=0)
        Indicates whether the error should prevent the user from saving the
        node. Default: 0.
      - stop: (optional) int 0 or 1. Indicates whether the feedback script
        should check for the next feedbacks in the array. Default: 1.

  - valid_children: Array of node names that are valid children of this node.
  - max_children: Integer indicating the maximum number of children allowed
    in this node. -1 for no limit.
  - max_count: Integer indicating the maximum mumber of this node type that
    is allowed as a child of another node.
  - icon: (optional) Object to set a custom tree-icon for this node type.
    - image: URL of the image to use as an icon in the tree .
  - descripion: (optional) String with a description of the node.
  - atts_in_title: (optional) Array of attribute names that should be added
    to the title in the tree. Each listed attribute is added to the title as
    ", attname: attvalue"
  - auto_children: (optional) Array of node names. One node of each of the
    given types is automaticly created when a node of the current type is
    added to the tree.
  - children_in_editor: (optional) Array of node names. Children of the given
    types are hidden in the tree and their editor-widgets are added to the
    current node.
  - hidden: (optional) int 0 or 1. Indicates that this node should be hidden
    in the tree. Should probably combined with children_in_editor on the
    parent node.
  - is_group: (optional) int 0 or 1. Indicates that this node is a virtual
    node that is only present in the tree, to group other nodes together, and
    not present in the XML.
  - in_group: (optional) String name of the group to put this node in. This
    group is only present in the tree to group similar nodes together. The
    group is not an actual XML node.

- xml_specific_config: Array of objects describing changes of the config
  based on the XML being edited. E.g. a node having 'valid_children' x,y,z
  when its attribute 'type' has a value of '1', and 'valid_children' a,b,c
  when 'type' has a value of '2''. Each object has the following properties:
  - conditions: object describing the conditions under which the config
    should be changed. This object can have the following properties:
    OR a condition object:
    - node: (optional, use this or family_node) the search string (see search
      function in the editor api) of the node; when used, all nodes in the
      XML with this name will be evaluated.
    - family_node: (optional, use this or node) the name of the; when used,
    only the nodes within the subtree of the node currently edited by the
      user will be evaluated.
    - attribute: string. Name of the attribute of which the value is matched
    - attributeValue: string. The value required value of the attribute.
    OR a logical operator:
    - and (optional) Array containing one or more condition objects/logical
      operators. All these should return true.
    - or (optional) Array containing one or more condition objects/logical
      operators. One of these should return true.
  - config_changes: Object describing changes in the config when the
    conditions are matched. This object can have the same properties as the
    "types" object. Arrays will be replaced, objects will be merged. Set the
    value of a member to null to remove it from an object.
