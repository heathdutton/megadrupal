<?php

/**
 * @file
 * Install and update functions for the closedquestion module.
 */

/**
 * Implements hook_schema().
 */
function closedquestion_schema() {
  $schema = array();
  $schema['cq_user_answer'] = array(
      'description' => 'Store for users answers to questions.',
      'fields' => array(
          'uid' => array(
              'description' => 'User ID of the user.',
              'type' => 'int',
              'unsigned' => TRUE,
              'not null' => TRUE,
              'disp-width' => '10',
          ),
          'nid' => array(
              'description' => 'Node ID of the question-node.',
              'type' => 'int',
              'unsigned' => TRUE,
              'not null' => TRUE,
              'disp-width' => '10',
          ),
          'once_correct' => array(
              'description' => 'Has the user answerd the question correct once in the past?',
              'type' => 'int',
              'size' => 'tiny',
              'not null' => TRUE,
              'disp-width' => '4',
          ),
          'tries' => array(
              'description' => 'The number of times the user answered the question.',
              'type' => 'int',
              'size' => 'small',
              'not null' => TRUE,
              'disp-width' => '6',
          ),
          'answer' => array(
              'description' => 'The actual answer of the user.',
              'type' => 'text',
              'not null' => TRUE,
          ),
          'data' => array(
              'description' => 'Additional per-user data a question needs to store.',
              'type' => 'text',
              'not null' => TRUE,
          ),
          'unixtime' => array(
              'description' => 'Timestamp of when this answer was given.',
              'type' => 'int',
              'not null' => TRUE,
              'default' => 0,
          ),
      ),
      'primary key' => array('uid', 'nid'),
  );

  $schema['cq_user_answer_log'] = array(
      'description' => 'Log users answers for educational research use.',
      'fields' => array(
          'log_id' => array(
              'description' => 'The id of the log-entry.',
              'type' => 'serial',
              'not null' => TRUE,
          ),
          'uid' => array(
              'description' => 'User ID of the user.',
              'type' => 'int',
              'unsigned' => TRUE,
              'not null' => TRUE,
          ),
          'nid' => array(
              'description' => 'Node ID of the question-node.',
              'type' => 'int',
              'unsigned' => TRUE,
              'not null' => TRUE,
          ),
          'unixtime' => array(
              'description' => 'Timestamp of when this answer was given.',
              'type' => 'int',
              'not null' => TRUE,
          ),
          'once_correct' => array(
              'description' => 'Has the user answerd the question correct once in the past?',
              'type' => 'int',
              'size' => 'tiny',
              'not null' => TRUE,
          ),
          'tries' => array(
              'description' => 'The number of times the user answered the question.',
              'type' => 'int',
              'unsigned' => TRUE,
              'size' => 'small',
              'not null' => TRUE,
          ),
          'answer' => array(
              'description' => 'The actual answer of the user.',
              'type' => 'text',
              'not null' => TRUE,
          ),
          'evalId' => array(
              'description' => 'The evaluation session this user-action was part of.',
              'type' => 'int',
              'unsigned' => TRUE,
              'not null' => TRUE,
              'default' => 0,
          ),
      ),
      'primary key' => array('log_id'),
      'indexes' => array(
          'uidnid' => array('uid', 'nid'),
      ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function closedquestion_install() {
  node_types_rebuild();
  $types = node_type_get_types();
  node_add_body_field($types['closedquestion'], 'Question XML');
  node_add_attachment_field($types['closedquestion'], 'File Attachments');
}

/**
 * Implements hook_uninstall().
 */
function closedquestion_uninstall() {

}

/**
 * Implements hook_requirements().
 */
function closedquestion_requirements($phase) {
  $requirements = array();
  $t = get_t();

  switch ($phase) {
    case 'install':
      if (!class_exists('DomDocument')) {
        $requirements['closedquestion_DomDocument'] = array(
            'title' => $t('ClosedQuestion install error'),
            'value' => $t('class DomDocument not found'),
            'description' => $t('PHP XML class DomDocument does not exist, maybe you need to install the php-xml package in your operating system?'),
            'severity' => REQUIREMENT_ERROR,
        );
      }
      if (!class_exists('DOMXPath')) {
        $requirements['closedquestion_DOMXPath'] = array(
            'title' => $t('ClosedQuestion install error'),
            'value' => $t('class DOMXPath not found'),
            'description' => $t('PHP XML class DOMXPath does not exist, maybe you need to install the php-xml package in your operating system?'),
            'severity' => REQUIREMENT_ERROR,
        );
      }
      break;

    case 'runtime':
      $jquery_json_path = library_get_path('jquery-json', array('jquery.json.min.js', 'jquery.json.js'), FALSE);
      $jquery_jstree_cq_path = library_get_path('jquery-jstree_cq', array('jquery.jstree_cq.min.js', 'jquery.jstree_cq.js'), FALSE);
      $jsdraw2d_path = library_get_path('jsDraw2D', array('jsDraw2D.js'), FALSE);
      $jcanvas_path = library_get_path('jcanvas', array('jcanvas.js'), FALSE);

      if ($jquery_json_path === FALSE) {
        $requirements['closedquestion_jquery-json'] = array(
            'title' => $t('ClosedQuestion install warning'),
            'value' => $t('JQuery-json not found'),
            'description' => $t('Please install jquery-json as per the README.txt. Currently a fallback from a remote site is used.'),
            'severity' => REQUIREMENT_WARNING,
        );
      }
      if ($jquery_jstree_cq_path === FALSE) {
        $requirements['closedquestion_jquery-jstree_cq'] = array(
            'title' => $t('ClosedQuestion install warning'),
            'value' => $t('JQuery-jstree_cq not found'),
            'description' => $t('Please install jquery-jstree_cq as per the README.txt. Currently a fallback from a remote site is used.'),
            'severity' => REQUIREMENT_WARNING,
        );
      }
      if ($jsdraw2d_path === FALSE) {
        $requirements['closedquestion_jsdraw2d'] = array(
            'title' => $t('ClosedQuestion install warning'),
            'value' => $t('jsDraw2D not found'),
            'description' => $t('Please install jsDraw2D as per the README.txt. Currently a fallback from a remote site is used.'),
            'severity' => REQUIREMENT_WARNING,
        );
      }
      if ($jcanvas_path === FALSE) {
        $requirements['closedquestion_jcanvas'] = array(
            'title' => $t('ClosedQuestion install warning'),
            'value' => $t('jcanvas not found'),
            'description' => $t('Please install jcanvas as per the README.txt. Currently a fallback from a remote site is used.'),
            'severity' => REQUIREMENT_WARNING,
        );
      }
      break;
  }

  return $requirements;
}

/**
 * Add an attachment field to a node type.
 *
 * @param $type
 *   A node type object.
 * @param $label
 *   The label for the attachment instance.
 *
 * @return
 *   Attachment field instance.
 */
function node_add_attachment_field($type, $label = 'File Attachments') {
  // Add or remove the body field, as needed.
  $field = field_info_field('attachment');
  $instance = field_info_instance('node', 'attachment', $type->type);
  if (empty($field)) {
    $field = array(
        'field_name' => 'attachment',
        'type' => 'file',
        'entity_types' => array('node'),
        'translatable' => TRUE,
        'cardinality' => -1,
    );
    $field = field_create_field($field);
  }
  if (empty($instance)) {
    $instance = array(
        'field_name' => 'attachment',
        'entity_type' => 'node',
        'bundle' => $type->type,
        'label' => $label,
        'widget_type' => 'file',
        'settings' => array(),
        'display' => array(),
    );
    $instance = field_create_instance($instance);
  }
  return $instance;
}

/**
 * Implements hook_update_N().
 *
 * Add unixtime to user_answer table.
 */
function closedquestion_update_7201() {
  $results = array();
  if (!db_field_exists('cq_user_answer', 'unixtime')) {
    db_add_field('cq_user_answer', 'unixtime', array(
        'description' => 'Timestamp of when this answer was given.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
    ));
  }
  return $results;
}
