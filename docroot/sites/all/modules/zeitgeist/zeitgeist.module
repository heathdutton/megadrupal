<?php

/**
 * @file
 * The Zeitgeist module provides history services for search.
 *
 * It is mainly targeted to coders: look at the Span::* constants for
 * your own use when creating blocks or pages using this module.
 *
 * Example code is in Statistics::getStatistics().
 *
 * WARNING: always truncate or hand-check the contents of the zeitgeist table
 * after installing a new module version and archiving old data.
 *
 * @copyright (c) 2005-2013 Ouest Systemes Informatiques (OSInet)
 *
 * @license Licensed under the General Public License version 2 or later.
 *
 * @link       http://drupal.org/project/zeitgeist
 *
 * @since      Drupal 4.7
 */

xautoload()->registerModule(__FILE__);

use Drupal\zeitgeist\Block;
use Drupal\zeitgeist\Report;
use Drupal\zeitgeist\Statistics;

/**
 * @var string
 *   The Zeitgeist report path.
 */
define('ZGPATHREPORT', 'admin/reports/search/zeitgeist');

/**
 * @var string
 *   Configuration path.
 */
define('ZGPATHSETTINGS', 'admin/config/search/settings/zeitgeist');

/**
 * Implements hook_block_info().
 *
 * ZG implements module-level caching, for sites not able to enable block
 * caching, as can happen when a node access control module is enabled. Since
 * the ZG blocks contain no per-node information, they can be cached globally
 * anyway.
 */
function zeitgeist_block_info() {
  $deltas = array('latest', 'top');
  $ret = array();
  foreach ($deltas as $delta) {
    $ret[$delta] = Block::instance($delta)->info();
  };
  return $ret;
}

/**
 * Implements hook_block_view().
 */
function zeitgeist_block_view($delta) {
  $ret = Block::instance($delta)->view();
  return $ret;
}

/**
 * Implements hook_cron().
 *
 * This is used to clean the old entries.
 */
function zeitgeist_cron() {
  // Don't clear if module is configured not to clear.
  $days = Statistics::getHistoryDays();
  if (!$days) {
    return;
  }

  // Don't clear again if we already cleared today.
  $latest = Statistics::getLatestClearDate();
  $today = Statistics::getDate();
  if ($latest === $today) {
    return;
  }

  Statistics::clearOlder($days, $today);
}

/**
 * Implements hook_form_alter().
 *
 * Trap searches.
 *
 * Warning: the mechanism has been changed over D4.7/D5 versions. It is now
 * much more standard, but does not log automatic searches performed when
 * clicking on a search kind tab after an initial search, and GET searches like
 * the ones performed by crawlers.
 *
 * Please report any problem with that new mechanism on the zeitgeist issues
 * page on drupal.org
 */
function zeitgeist_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'search_block_form':
    case 'search_form':
      array_unshift($form['#submit'], 'zeitgeist_' . $form_id . '_submit');
      break;

    default:
      return;
  }
}

/**
 * Implements hook_help().
 */
function zeitgeist_help($path, $arg) {
  switch ($path) {
    case 'admin/help#zeitgeist':
      $ret = t('<p>zeitgeist records recent searches when they are performed.</p>
<p>It also supplies blocks listing the "n" latest and top searches, and a setting to define the value of "n".</p>
<p>If Views 3.x is installed, Zeitgeist can be used as a Views data source.');
      break;

    default:
      $ret = NULL;
      break;
  }

  return $ret;
}

/**
 * Implements hook_menu().
 */
function zeitgeist_menu() {
  $items[ZGPATHSETTINGS] = array(
    'access arguments' => array('administer search'),
    'context'          => MENU_CONTEXT_INLINE | MENU_CONTEXT_PAGE,
    'description'      => 'Configuration of zeitgeist search recording and display.',
    'file'             => 'zeitgeist.admin.inc',
    'page arguments'   => array('_zeitgeist_admin_settings'),
    'page callback'    => 'drupal_get_form',
    'title'            => 'Zeitgeist settings',
    'type'             => MENU_LOCAL_TASK,
  );

  $items[ZGPATHREPORT] = array(
    'access arguments' => array('access site reports'),
    'description'      => 'Feel the Zeitgeist',
    'page callback'    => 'zeitgeist_page_report',
    'title'            => 'Zeitgeist report',
    'type'             => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * - Insert ZG pages as tabs on the core search admin pages.
 * - Intercept the core search callbacks
 */
function zeitgeist_menu_alter(&$items) {
  $items['admin/config/search/settings/core'] = $items['admin/config/search/settings'];
  $items['admin/config/search/settings/core']['title'] = 'Core search settings';
  $items['admin/config/search/settings/core']['description'] = 'Normal search settings';
  $items['admin/config/search/settings/core']['type'] = MENU_DEFAULT_LOCAL_TASK;

  $items['admin/reports/search/core'] = $items['admin/reports/search'];
  $items['admin/reports/search/core']['title'] = 'Core search report';
  $items['admin/reports/search/core']['description'] = 'Normal search report';
  $items['admin/reports/search/core']['type'] = MENU_DEFAULT_LOCAL_TASK;

  foreach (search_get_info() as $module => $search_info) {
    $path = 'search/' . $search_info['path'];
    $callback = $items["$path/%menu_tail"]['page callback'];
    $arguments = $items["$path/%menu_tail"]['page arguments'];
    array_unshift($arguments, $callback);
    $items["$path/%menu_tail"]['page callback'] = 'zeitgeist_search_pre_execute';
    $items["$path/%menu_tail"]['page arguments'] = $arguments;
  }
}

/**
 * Page callback for Zeitgeist report.
 */
function zeitgeist_page_report($days = 0) {
  $ret = Report::instance($days)->page();
  return $ret;
}

/**
 * Default rendering for the ZG latest searches block.
 *
 * - Add $links variable for template use.
 *
 * @param array $variables
 *   Template variables.
 */
function zeitgeist_preprocess_zeitgeist_block_latest(&$variables) {
  $options = $variables['nofollow'] ? array('rel' => 'nofollow') : array();
  $options = array_merge($options, array('absolute' => TRUE));

  $links = array();
  foreach ($variables['items'] as $key => $value) {
    $links[] = l($key, "search/$value[1]/$value[0]", $options);
  }
  $variables['links'] = $links;
}

/**
 * Default rendering for the ZG block with the most popular "node" queries.
 *
 * - Add $scores variable for template use.
 *
 * @param array $variables
 *   Template variables.
 */
function zeitgeist_preprocess_zeitgeist_block_top(&$variables) {
  $options = $variables['nofollow'] ? array('rel' => 'nofollow') : array();
  $options = array_merge($options, array('absolute' => TRUE));

  $scores = array();
  foreach ($variables['items'] as $score) {
    $scores[] = l($score['search'] . " (${score['count']})",
      "search/node/$score[search]", $options);
  }
  $variables['scores'] = $scores;
}

/**
 * Implements hook_preprocess_views_view().
 *
 * Add a contextual link back to the Zeitgeist settings page in the View-based
 * Zeitgeist report page.
 *
 * @see Drupal\zeitgeist\ReportViews::page()
 */
function zeitgeist_preprocess_views_view(&$vars) {
  $vars['title_suffix']['contextual_links']['#contextual_links']['zeitgeist'] = array(
    ZGPATHSETTINGS,
    array(),
  );
}

/**
 * Submit handler for search block form.
 *
 * It has been inserted before the default search handler.
 *
 * @see zeitgeist_form_alter()
 */
function zeitgeist_search_block_form_submit($form, &$form_state) {
  $form_id = $form_state['values']['form_id'];
  $info = search_get_default_module_info();
  if ($info) {
    $keys = $form_state['values'][$form_id];
    $kind = $info['path'];
    Statistics::store($keys, $kind);
  }
}

/**
 * Submit handler for the main search form.
 *
 * It has been inserted before the default search handler.
 *
 * @see zeitgeist_form_alter()
 */
function zeitgeist_search_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $keys = $values['processed_keys'];
  $kind = $values['module'] ? $values['module'] : 'node';
  Statistics::store($keys, $kind);
}

/**
 * Page callback for search/<type>/%menu_tail.
 *
 * @todo This code currently does /not/ perform any search storage. It is only
 * here to demonstrate an alternate way to catch searches besides form submit
 * handlers.
 *
 * @param string $callback
 *   The pre-existing search page callback.
 * @param string $module
 *   The search module.
 * @param string $keys
 *   The search keys.
 *
 * @return array|string
 *   A string or render array of search results
 */
function zeitgeist_search_pre_execute($callback, $module = NULL, $keys = '') {
  $ret = $callback($module, $keys);
  return $ret;
}

/**
 * Implements hook_theme().
 */
function zeitgeist_theme($existing, $type, $theme, $path) {
  $ret = array();
  foreach (array_keys(zeitgeist_block_info()) as $delta) {
    $ret = array_merge($ret, Block::instance($delta)->hookTheme($existing, $type, $theme, $path));
  }
  return $ret;
}

/**
 * Implements hook_views_api().
 */
function zeitgeist_views_api() {
  $ret = array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'zeitgeist') . '/views',
  );
  return $ret;
}
