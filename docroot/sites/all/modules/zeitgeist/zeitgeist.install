<?php
/**
 * @file
 * Install/update component for the Zeitgeist module for Drupal 7.x.
 *
 * @copyright (c) 2005-2013 Ouest Systemes Informatiques (OSInet)
 *
 * @license Licensed under the General Public License version 2 or later.
 *
 * @since Drupal 4.7
 */

xautoload()->registerModule(__FILE__);

use Drupal\zeitgeist\Cache;
use Drupal\zeitgeist\Statistics;

/**
 * Implements hook_schema().
 */
function zeitgeist_schema() {
  $t = get_t();
  $schema[Statistics::TABLE] = array(
    'fields' => array(
      'search'      => array(
        'type'        => 'varchar',
        'length'      => 80,
        'not null'    => TRUE,
        'default'     => '',
        'description' => $t('The query string. Will statistically often be empty is ZG is allowed to log empty searches.'),
      ),
      'category'    => array(
        'type'        => 'varchar',
        'length'      => 64,
        'not null'    => TRUE,
        'default'     => 'node',
        'description' => $t('The search category. Core categories are "node" and "user".'),
      ),
      'ts'          => array(
        'type'        => 'int',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
        'description' => $t('The timestamp of search submission. Duplicates <em>do</em> happen due to timer granularity.'),
      ),
    ),

    /* ZG does not use a PK, because the timer granularity can actually cause
     * duplicates, and there is no actual need to differentiate them. The
     * alternatives would be heavier: adding an occurrence count on all rows,
     * and update it instead of adding a row in the rare case when a duplicate
     * occurs. This would be heavy on every request, with no obvious gain. An
     * additional solution would be to add an autoincrement column to
     * differentiate otherwise identical rows, again to no actual benefit.
     */
    // 'primary key' => array(),
    'unique keys'   => array(),
    'indexes'       => array('search' => array('search')),
    'description'   => $t('The search logging table for the Zeitgeist module.'),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 *
 * - Clear ZG internal block cache
 * - Delete ZG constants
 * - Delete ZG blocks
 */
function zeitgeist_uninstall() {
  $t = get_t();

  Cache::clearAll();
  drupal_set_message($t('Zeitgeist cache entries have been cleared.'));

  $constants = get_defined_constants(TRUE);
  foreach ($constants['user'] as $constant) {
    if (strpos($constant, 'zeitgeist_' === 0)) {
      variable_del($constant);
    }
  }
  drupal_set_message($t('Zeitgeist settings have been removed.'));

  db_delete('block')
    ->condition('module', 'zeitgeist')
    ->execute();
  drupal_set_message($t('Zeitgeist blocks have been removed.'));
}

/**
 * Implements hook_update_last_removed().
 *
 * Update 1 dates back to D4.7.
 */
function zeitgeist_update_last_removed() {
  return 1;
}

/**
 * Implements hook_update_N().
 *
 * Just show this version is now for D7 in the system table.
 */
function zeitgeist_update_7000() {
  $t = get_t();
  return $t('Zeitgeist schema info visibly upgraded to Drupal 7.');
}

/**
 * Remove obsolete cache keys and block configuration variables from 4.7.x/5.x.
 */
function zeitgeist_update_7001() {
  Cache::clearAll();

  $q = db_select('variable', 'v');
  $q->fields('v', array('name'))
    ->condition(db_or()
      ->condition('v.name', 'zeitgeist_%info', 'LIKE')
      ->condition('v.name', 'zeitgeist_%title', 'LIKE')
    );
  $result = $q->execute();

  $count = 0;
  foreach ($result as $row) {
    variable_del($row->name);
    $count++;
  }
  $t = get_t();
  if ($count) {
    $message = $t('Removed @count Zeitgeist obsolete 4.7.x/5.x variables', array('@count' => $count));
    cache_clear_all('variables', 'bootstrap');
  }
  else {
    $message = $t('No obsolete Zeitgeist variable to clean.');
  }
  return $message;
}
