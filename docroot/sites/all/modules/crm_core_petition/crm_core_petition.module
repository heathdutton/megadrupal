<?php
/**
 * @file
 * Code for the CRM Core Petition feature.
 */

include_once 'crm_core_petition.features.inc';

define('CMCP_SIGN_EMAIL_TAG', variable_get('crm_core_petition_sign_email_tag', 'CRM Core Petition Sign Email'));
define('CMCP_THANKS_EMAIL_TAG', variable_get('crm_core_petition_thanks_email_tag', 'CRM Core Petition Thank You Message'));
define('CMCP_CHART_HEIGHT', '200');
define('CMCP_XAXIS_TICKS', '7');
define('CMCP_COLUMN_WIDTH', '0.8');

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crm_core_petition_form_crm_core_profile_entry_form_alter(&$form, &$form_state, $form_id) {
  $petition = menu_get_object();
  if (is_object($petition) && $petition->type == 'cmcp_petition') {
    $petition_config = crm_core_petition_load_node_config($petition->nid);
    if (empty($petition_config)) {
      $form['#access'] = FALSE;
    }
    else {
      $form['#submit'][99] = 'crm_core_petition_submit_handler';

      // Check if users can override personal message.
      if (isset($form['field_cmcp_pm_content'])) {
        if (empty($petition->field_cmcp_pm_customize[LANGUAGE_NONE][0]['value'])) {
          $form['field_cmcp_pm_content']['#type'] = 'hidden';
        }
        else {
          $form['field_cmcp_pm_content'][LANGUAGE_NONE][0]['value']['#default_value'] = empty($petition->field_cmcp_personal_message[LANGUAGE_NONE][0]['value']) ? '' : $petition->field_cmcp_personal_message[LANGUAGE_NONE][0]['value'];
        }
      }

      if (isset($form['field_cmcp_petition_page'])) {
        $form['field_cmcp_petition_page'][LANGUAGE_NONE][0]['target_id']['#default_value'] = $petition->title . ' (' . $petition->nid . ')';
        $form['field_cmcp_petition_page'][LANGUAGE_NONE][0]['target_id']['#value'] = $petition->title . ' (' . $petition->nid . ')';
        $form['field_cmcp_petition_page'][LANGUAGE_NONE][0]['value']['#default_value'][0] = $petition->nid;
      }
    }
  }
}

/**
 * The submit handler.
 *
 * Carries out some actions each time a petition page is signed.
 *
 * This handler triggers several things to happen:
 *
 * - It triggers emails to be sent to petition targets.
 * - It triggers thank you emails to be sent to signatories.
 * - It saves personal messages automatically added to CRM Core Profiles.
 */
function crm_core_petition_submit_handler($form, &$form_state) {

  // Load the node being used to house the petition.
  $petition = menu_get_object();

  // Check to make sure we are working with a petition page.
  if (is_object($petition) && $petition->type == 'cmcp_petition') {

    // Load petition node configuration.
    $petition_config = crm_core_petition_load_node_config($petition->nid);

    // Check if contact and activity exists in profile.
    $signatory = isset($form_state['crm_core_contact']) ? $form_state['crm_core_contact'] : NULL;

    // Get the activity - we are looking at CRM Core Petition Signatures.
    $signature = isset($form_state['crm_core_activity']) ? $form_state['crm_core_activity'] : NULL;

    // Sending email to targets.
    if (!empty($petition->field_cmcp_target_ids) || !empty($petition_config->sign_email)) {
      $petition_wrapper = entity_metadata_wrapper('node', $petition);
      $targets = array();
      foreach ($petition_wrapper->field_cmcp_target_ids->getIterator() as $target_wrapper) {
        $targets[] = $target_id = $target_wrapper->contact_id->value();
        $target = crm_core_contact_load($target_id);
        $target_email = crm_core_contact_get_primary_field_value($target, 'email');
        if (!empty($target_email)) {
          // Comparing messages.
          $signature_wrapper = entity_metadata_wrapper('crm_core_activity', $signature);
          $signature_value = $signature_wrapper->field_cmcp_pm_content->value();
          $petition_value = $petition_wrapper->field_cmcp_personal_message->value();
          $petition_message = !empty($petition_value) ? strip_tags($petition_wrapper->field_cmcp_personal_message->value->value()) : '';
          $signature_message = !empty($signature_value) ? strip_tags($signature_wrapper->field_cmcp_pm_content->value->value()) : '';
          if ($petition_message == $signature_message || empty($signature_message)) {
            $message = $petition_message;
          }
          else {
            $message = $signature_message;
          }
          // Build sign.
          $sign = _crm_core_petition_build_email_sign($signatory);
          rules_invoke_component($petition_config->sign_email, $target_email, $target, $signatory, $petition, $signature, $sign, $message);
        }
      }
      // Saving targets as part of petition signature activity, if set.
      if (isset($signature)) {
        $signature_wrapper = entity_metadata_wrapper('crm_core_activity', $signature);
        foreach ($targets as $target_id) {
          $signature_wrapper->field_cmcp_petition_targets[] = $target_id;
        }
        $signature_wrapper->save();
      }
    }

    // Sending "Thank you email".
    if (!empty($petition_config->thanks_email)) {
      $signatory_email = crm_core_contact_get_primary_field_value($signatory, 'email');
      if (!empty($signatory_email)) {
        rules_invoke_component($petition_config->thanks_email, $signatory_email, $signatory, $petition);
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function crm_core_petition_form_node_form_alter(&$form, $form_state) {

  $node = $form['#node'];

  if ($node->type == 'cmcp_petition') {
    $form['crm_core_petition'] = array(
      '#title' => t('Petition settings'),
      '#type' => 'fieldset',
      '#group' => 'additional_settings',
    );

    $node_config = isset($node->nid) ? crm_core_petition_load_node_config($node->nid) : array();

    $form['crm_core_petition']['signatories'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show signatories?'),
      '#description' => t('Check this box to display the signatories page. This page will display all the people who have signed the petition and opted to allow their petition signature to be visible.'),
      '#default_value' => empty($node_config) ? 0 : $node_config->signatories,
    );

    $form['crm_core_petition']['goal'] = array(
      '#type' => 'textfield',
      '#title' => t('Goal'),
      '#description' => t('Indicate the target number of signatures for this petition. Leave this field blank if you have no target.'),
      '#default_value' => empty($node_config) ? '' : $node_config->goal,
      '#size' => 10,
    );

    $rule_set_tag = CMCP_SIGN_EMAIL_TAG;
    $rules_components = _crm_core_petition_load_rules_components_by_tag($rule_set_tag);
    $form['crm_core_petition']['sign_email'] = array(
      '#type' => 'select',
      '#title' => t('Petition signatory email'),
      '#description' => t('Please select the email template to use to say thank you when someone signs a petition.'),
      '#default_value' => empty($node_config) ? variable_get('crm_core_petition_default_sign_email', '') : $node_config->sign_email,
      '#empty_option' => t('--Please Select--'),
      '#empty_value' => '',
      '#options' => $rules_components,
    );

    $rule_set_tag = CMCP_THANKS_EMAIL_TAG;
    $rules_components = _crm_core_petition_load_rules_components_by_tag($rule_set_tag);
    $form['crm_core_petition']['thanks_email'] = array(
      '#type' => 'select',
      '#title' => t('Petition target email'),
      '#description' => t('Please select the email template to use when sending a targeted message.'),
      '#default_value' => empty($node_config) ? variable_get('crm_core_petition_default_thanks_email', '') : $node_config->thanks_email,
      '#empty_option' => t('--Please Select--'),
      '#empty_value' => '',
      '#options' => $rules_components,
    );

    $form['field_cmcp_target_ids']['#states'] = array(
      'visible' => array(
        ':input[name="field_cmcp_target_emails[und]"]' => array('checked' => TRUE),
      ),
    );
    $form['#attached']['js'][] = drupal_get_path('module', 'crm_core_petition') . '/js/vertical_tab.js';
  }
}

/**
 * Loads rules components with specified tag name.
 *
 * @param string $rule_set_tag
 *   Tag name.
 *
 * @return array
 *   Array of rules components keyed by machine name.
 */
function _crm_core_petition_load_rules_components_by_tag($rule_set_tag) {

  $rules_config_ids = db_select('rules_tags', 'rt')
    ->fields('rt', array('id'))
    ->condition('tag', $rule_set_tag)
    ->execute()
    ->fetchCol();

  return empty($rules_config_ids) ? array() : rules_get_components(TRUE, NULL, array('id' => $rules_config_ids));
}

/**
 * Implements hook_node_insert().
 */
function crm_core_petition_node_insert($node) {
  if ($node->type == 'cmcp_petition') {
    if (isset($node->signatories)) {
      $config = new stdClass();
      $config->nid = $node->nid;
      $config->signatories = $node->signatories;
      $config->goal = empty($node->goal) ? 0 : $node->goal;
      $config->sign_email = $node->sign_email;
      $config->thanks_email = $node->thanks_email;

      crm_core_petition_node_config_save($config);
    }
    elseif (isset($node->crm_core_petition_node_config)) {
      $config = $node->crm_core_petition_node_config;
      $uuid = $config['nid'];
      $nids = entity_get_id_by_uuid('node', array($uuid));
      if (isset($nids[$uuid])) {
        $config['nid'] = $nids[$uuid];
        crm_core_petition_node_config_save($config);
      }
    }
  }
}

/**
 * Saves nodes configuration.
 *
 * @param object $config
 *   Nodes configuration.
 */
function crm_core_petition_node_config_save($config) {
  $config = (array) $config;
  db_merge('crm_core_petition_nodes')
    ->condition('nid', $config['nid'])
    ->fields($config)
    ->execute();
}

/**
 * Implements hook_node_update().
 */
function crm_core_petition_node_update($node) {
  crm_core_petition_node_insert($node);
}

/**
 * Implements hook_node_delete().
 */
function crm_core_petition_node_delete($node) {
  if ($node->type == 'cmcp_petition') {
    db_delete('crm_core_petition_nodes')
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Implements hook_node_load().
 */
function crm_core_petition_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    if ($node->type == 'cmcp_petition') {
      $node_config = crm_core_profile_load_node_config($node->nid);
      $disable = variable_get('crm_core_petition_disable_goal_is_met', FALSE);
      if (!empty($node_config->use_profile) && $disable) {
        $petition_config = crm_core_petition_load_node_config($node->nid);
        // Init profile data, if not set.
        if (!isset($node->crm_core_profile_data)) {
          $node->crm_core_profile_data = array();
        }
        // Checking goal.
        if (!empty($petition_config->goal)) {
          $goal = !empty($petition_config->goal) ? (int) $petition_config->goal : 0;
          $signatories_total = _crm_core_petition_signatories_total($node->nid);
          if (!empty($signatories_total) && ($signatories_total >= $goal)) {
            $node->crm_core_profile_data['access_override']['access'] = FALSE;
            $node->crm_core_profile_data['access_override']['message'] = variable_get('crm_core_petition_disabled_message', t('We have met our goal!'));
            continue;
          }
        }
      }
    }
  }
}

/**
 * Load node config.
 *
 * @param int $nid
 *   Node ID.
 *
 * @return object|FALSE
 *   Returns nodes configuration, if saved, FALSE otherwise.
 */
function crm_core_petition_load_node_config($nid) {
  $cache =& drupal_static(__FUNCTION__, array());
  if (empty($cache[$nid])) {
    $cache[$nid] = db_select('crm_core_petition_nodes', 'c')
      ->condition('nid', $nid)
      ->fields('c')
      ->execute()->fetchObject();
  }

  return empty($cache[$nid]) ? FALSE : $cache[$nid];
}

/**
 * Implements hook_menu().
 */
function crm_core_petition_menu() {
  $items['admin/config/crm-core/cmcp/settings'] = array(
    'title' => 'Petition Settings',
    'description' => 'Manage CRM Core Petition Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_petition_settings_form'),
    // @todo Check correct permissions.
    'access callback' => TRUE,
    'file' => 'crm_core_petition.admin.inc',
  );

  $items['admin/structure/crm-core/cmcp'] = array(
    'title' => 'Petitions',
    'description' => 'Manage CRM Core Petitions',
    'position' => 'left',
    'page callback' => 'views_embed_view',
    'page arguments' => array('cmcp_manage_petitions', 'page'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/structure/crm-core/cmcp/manage'] = array(
    'title' => 'Manage Petitions',
    'description' => 'Manage CRM Core Petitions',
    'access arguments' => array('administer site configuration'),
    'file path' => drupal_get_path('module', 'views'),
    'file' => 'views.module',
  );

  // Configuration settings for CRM Core Petition.
  $items['admin/config/crm-core/cmcp'] = array(
    'title' => 'Petition',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_petition_settings_form'),
    'file' => 'crm_core_petition.admin.inc',
    'access arguments' => array('administer crm core petition'),
    'description' => 'Provides controls for general behaviors of petition signatures, the appearance of reports, etc.',
  );

  // General settings page for CRM Core Petition.
  $items['admin/config/crm-core/cmcp/settings'] = array(
    'title' => 'General Settings',
    'description' => 'Configure settings for CRM Core Petition.',
    'position' => 'left',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  // Settings page for reports in CRM Core Petition.
  $items['admin/config/crm-core/cmcp/reports'] = array(
    'title' => 'Reports Settings',
    'description' => 'Configure settings for reports in CRM Core Petition.',
    'position' => 'left',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_petition_admin_report_settings_form'),
    'file' => 'crm_core_petition.admin.inc',
    'access arguments' => array('administer crm core petition'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function crm_core_petition_permission() {
  return array(
    'administer crm core petition' => array(
      'title' => t('Administer CRM Core Petition'),
    ),
    'view petition signatories' => array(
      'title' => t('View Petition Signatories'),
    ),
    'view petition overview' => array(
      'title' => t('View Petitions Overview'),
    ),
    'view petitions report' => array(
      'title' => t('View Petitions Report'),
    ),
    'view petition signatories report' => array(
      'title' => t('View Petition Signatories Report'),
    ),
    'view petition sources report' => array(
      'title' => t('View Petition Sources Report'),
    ),
    'view targets report' => array(
      'title' => t('View Petition Targets Report'),
    ),
    'configure petition email settings' => array(
      'title' => t('Configure Petition Email Settings'),
    ),
    'manage petition pages' => array(
      'title' => t('Manage Petition Pages'),
    ),
  );
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function crm_core_petition_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  switch ($root_path) {
    case 'admin/structure/crm-core/cmcp':
    case 'admin/structure/crm-core/cmcp/manage':
      $item = menu_get_item('node/add/cmcp-petition');
      if ($item['access']) {
        $item['title'] = 'Add New Petition';
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );
      }
      break;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function crm_core_petition_preprocess_page(&$vars) {

  // Set breadcrumbs for all petition reports.
  if (arg(0) == 'crm-core' && arg(1) == 'reports' && arg(2) == 'cmcp') {
    $breadcrumb = array(
      l(t('Home'), '<front>'),
      l(t('CRM Core'), 'crm-core'),
      l(t('Reports'), 'crm-core/reports'),
    );
    if (arg(3) != '' && (arg(4) == '' || arg(4) == 'summary' || arg(5) == 'summary')) {
      $breadcrumb[] = l(t('Petition reports'), 'crm-core/reports/cmcp');
    }
    if (arg(3) == 'petition-report' && arg(4) == 'summary') {
      $breadcrumb[] = l(t('Petition pages'), 'crm-core/reports/cmcp/petition-report');
    }
    elseif (arg(3) == 'sources-report' && arg(5) == 'summary') {
      $breadcrumb[] = l(t('Petition sources'), 'crm-core/reports/cmcp/sources-report');
    }
    drupal_set_breadcrumb($breadcrumb);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function crm_core_petition_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }

  return NULL;
}

/**
 * Implements hook_crm_core_report_register().
 */
function crm_core_petition_crm_core_report_register() {

  $reports = array(
    'cmcp' => array(
      'title' => t('Petitions'),
      'reports' => array(),
      'widgets' => array(),
    ),
  );

  // Petitions overview page.
  $reports['cmcp']['reports']['cmcp_overview'] = array(
    'title' => t('Petitions Overview'),
    'path' => 'crm-core/reports/cmcp/overview',
    'description' => t('Provides a quick overview of petition activity in the system.'),
  );

  // Petitions overview page.
  $reports['cmcp']['reports']['cmcp_petitions'] = array(
    'title' => t('Petitions Report'),
    'path' => 'crm-core/reports/cmcp/petition-report',
    'description' => t('Provides a an overview of all petitions in the system.'),
  );

  // Petitions signatories page.
  $reports['cmcp']['reports']['cmcp_signatories'] = array(
    'title' => t('Signatories Report'),
    'path' => 'crm-core/reports/cmcp/petition-signatories',
    'description' => t('Provides details about who has been signing petitions in your system.'),
  );

  // Petitions signatories page.
  $reports['cmcp']['reports']['cmcp_sources'] = array(
    'title' => t('Source Report'),
    'path' => 'crm-core/reports/cmcp/sources-report',
    'description' => t('Provides information about sources of petition signatures.'),
  );

  // Petitions signatories page.
  $reports['cmcp']['reports']['cmcp_targets'] = array(
    'title' => t('Targets Report'),
    'path' => 'crm-core/reports/cmcp/target-report',
    'description' => t('Provides information about targets for petition campaigns.'),
  );

  return $reports;
}

/**
 * Implements hook_theme().
 */
function crm_core_petition_theme() {
  return array(
    'petition_counter' => array(
      'template' => 'petition_counter',
      'path' => drupal_get_path('module', 'crm_core_petition') . '/theme',
      'variables' => array('nid' => NULL),
    ),
    'petition_signatories_summary' => array(
      'template' => 'petition_signatories_summary',
      'path' => drupal_get_path('module', 'crm_core_petition') . '/theme',
      'variables' => array('nid' => NULL),
    ),
  );
}

/**
 * Implements template_preprocess_hook().
 */
function template_preprocess_petition_counter(&$vars) {
  _crm_core_petition_add_block_vars($vars);
}

/**
 * Implements template_preprocess_hook().
 */
function template_preprocess_petition_signatories_summary(&$vars) {
  _crm_core_petition_add_block_vars($vars);
}

/**
 * Implements hook_block_info().
 */
function crm_core_petition_block_info() {
  return array(
    'petition_counter' => array(
      'info' => t('CRM Core Petition: Petition signatures counter'),
    ),
    'petition_signatories_summary' => array(
      'info' => t('CRM Core Petition: Petition signatures summary'),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function crm_core_petition_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'petition_counter':
      $petition = menu_get_object();
      if (is_object($petition) && $petition->type == 'cmcp_petition') {
        $block['subject'] = t('Petition signatures counter');
        $block['content'] = theme('petition_counter', array('nid' => $petition->nid));
      }
      break;

    case 'petition_signatories_summary':
      $petition = node_load(arg(1));
      if (is_object($petition) && $petition->type == 'cmcp_petition') {
        $block['subject'] = t('Petition signatures summary');
        $block['content'] = theme('petition_signatories_summary', array('nid' => $petition->nid));
      }
      break;
  }

  return $block;
}

/**
 * Helper to define access to signatories tab of petition.
 *
 * @param array $contexts
 *   Contexts of page.
 *
 * @return bool
 *   Access.
 */
function _crm_core_petition_signatories_access($contexts) {
  $nid = $contexts['argument_entity_id:node_1']->argument;
  $config = crm_core_petition_load_node_config($nid);
  if (!empty($config) && !empty($config->signatories)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_crm_core_profile_register_entity().
 */
function crm_core_petition_crm_core_profile_register_entity() {
  return array(
    'crm_core_petition' => 'CRMCorePetitionHandler',
  );
}

/**
 * Helper adds additional variables for theme functions.
 *
 * @param array $vars
 *   Variables array.
 */
function _crm_core_petition_add_block_vars(&$vars) {
  $cache =& drupal_static(__FUNCTION__, array());
  if (isset($cache[$vars['nid']])) {
    $vars['received'] = $cache[$vars['nid']]['received'];
    if (!empty($cache[$vars['nid']]['goal'])) {
      $vars['goal'] = $cache[$vars['nid']]['goal'];
    }
  }
  elseif (!empty($vars['nid']) && node_load($vars['nid'])) {
    $cache[$vars['nid']]['received'] = $vars['received'] = _crm_core_petition_signatories_total($vars['nid']);
    $config = crm_core_petition_load_node_config($vars['nid']);
    if (!empty($config) && !empty($config->goal)) {
      $cache[$vars['nid']]['goal'] = $vars['goal'] = $config->goal;
    }
  }
}

/**
 * Helper to get total signatories.
 *
 * @param int $nid
 *   Node id.
 *
 * @return int
 *   Total signatories.
 */
function _crm_core_petition_signatories_total($nid) {
  $query = new EntityFieldQuery();
  return $query->entityCondition('entity_type', 'crm_core_activity')
    ->entityCondition('bundle', 'cmcp_petition_signature')
    ->fieldCondition('field_cmcp_petition_page', 'target_id', $nid)
    ->count()
    ->execute();
}

/**
 * Helper to build sign for target email.
 *
 * @param entity $signatory
 *   Contact object.
 *
 * @return string
 *   Sing value.
 */
function _crm_core_petition_build_email_sign($signatory) {
  $sign = array();
  $full_name = array();
  $signatory_wrapper = entity_metadata_wrapper('crm_core_contact', $signatory);
  $email = $signatory_wrapper->primary_email->value();
  $given = isset($signatory_wrapper->contact_name->given) ? $signatory_wrapper->contact_name->given->value() : '';
  $family = isset($signatory_wrapper->contact_name->family) ? $signatory_wrapper->contact_name->family->value() : '';
  $primary_address = $signatory_wrapper->primary_address->value();
  // Build target name.
  if (!empty($given)) {
    $full_name[] = $given;
  }
  if (!empty($family)) {
    $full_name[] = $family;
  }
  if (!empty($full_name)) {
    $sign[] = implode(' ', $full_name);
  }
  // Build address.
  if (!empty($primary_address)) {
    $sign[] = _crm_core_petition_build_email_sign_address($primary_address);
  }
  // Add email.
  if (!empty($email)) {
    $sign[] = $email;
  }
  return implode("\n", $sign);
}

/**
 * Helper to build address form sign in target email.
 *
 * @param array $address_array
 *   Primary address field value.
 *
 * @return string
 *   String address.
 */
function _crm_core_petition_build_email_sign_address($address_array) {
  $address = array();
  $location = array();
  $address_render_array = addressfield_generate($address_array, array('address' => 'address'), array('mode' => 'render'));
  // Location values, displayed in one line.
  $location_data = array(
    'locality' => $address_array['locality'],
    'administrative_area' => $address_array['administrative_area'],
    'postal_code' => $address_array['postal_code'],
    'country' => $address_array['country'],
  );
  if (!empty($address_array['thoroughfare'])) {
    $address[] = $address_array['thoroughfare'];
  }
  if (!empty($address_array['premise'])) {
    $address[] = $address_array['premise'];
  }
  // Build location line.
  foreach ($location_data as $key => $value) {
    if (!empty($location_data[$key])) {
      if ($key == 'country' && isset($address_render_array['country']['#options'][$value])) {
        $location[] = $address_render_array['country']['#options'][$value];
      }
      elseif ($key == 'administrative_area' && isset($address_render_array['locality_block']['administrative_area']['#options'][$value])) {
        $location[] = $address_render_array['locality_block']['administrative_area']['#options'][$value];
      }
      else {
        $location[] = $value;
      }
    }
  }
  $address[] = implode(', ', $location);
  return implode("\n", $address);
}

/**
 * Implements hook_uuid_node_features_export_render_alter().
 *
 * Adding node configuration to export.
 */
function crm_core_petition_uuid_node_features_export_render_alter(&$export, $node, $module) {
  if ($export->type == 'cmcp_petition') {
    $nids = entity_get_id_by_uuid('node', array($node->uuid));
    $config = crm_core_petition_load_node_config($nids[$node->uuid]);
    if ($config !== FALSE) {
      $config->nid = $node->uuid;
      $export->crm_core_petition_node_config = $config;
    }
  }
}

/**
 * Implements hook_entity_uuid_load().
 */
function crm_core_petition_entity_uuid_load(&$entities, $entity_type) {
  if ($entity_type == 'node') {
    foreach ($entities as $nid => $node) {
      $config = crm_core_petition_load_node_config($nid);
      if ($config !== FALSE) {
        $config->nid = $node->uuid;
        $entities[$nid]->crm_core_petition_node_config = $config;
      }
    }
  }
}

/**
 * Implements hook_entity_uuid_save().
 */
function crm_core_petition_entity_uuid_save(&$entity, $entity_type) {
  if ($entity_type == 'node') {
    if (isset($entity->crm_core_petition_node_config)) {
      $config = (array) $entity->crm_core_petition_node_config;
      $uuid = $config['nid'];
      $nids = entity_get_id_by_uuid('node', array($uuid));
      $config['nid'] = $nids[$uuid];
      crm_core_petition_node_config_save($config);
    }
  }
}
