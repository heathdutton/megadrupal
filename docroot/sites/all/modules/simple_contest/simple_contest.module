<?php

/**
 * @file
 *
 * simple_contest custom module
 */



module_load_include('inc', 'simple_contest', 'includes/simple_contest.api');


/**
 * Implementation of hook_permission
 */
function simple_contest_permission() {
  $perms = array();
  
  foreach (simple_contest_get_types() as $type => $info) {
    $perms["finalize_$type"] = array(
      'title' => t("finalize " . $info->name),
    );
  }
  
  $perms['administer_simple_contest'] = array(
      'title' => t('administer simple contest'), 
      'description' => t('Perform administration tasks for simple contest.'),
    );
  
  return $perms;
}

/**
 * Implementation of hook_menu().
 */
function simple_contest_menu() {
  $items = array();


  $items['admin/structure/types/manage/%node_type/simple_contest'] = array(
    'title' => 'Contest settings',
    'description' => 'Configure the simple contest.',
    'page callback' => 'simple_contest_admin_content_type_settings_page',
    'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('administer nodes'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/simple_contest.admin.inc',
    'weight' => 5,
  );
  
  $items['simple_contest/ahah/view/fields'] = array(
    'title' => '',
    'page callback' => 'simple_contest_content_type_settings_view_fields',
    'access callback' => 'user_access',
    'access arguments' => array('administer nodes'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/simple_contest.admin.inc',
  );
  $items['simple_contest/ahah/email/view/fields'] = array(
    'title' => '',
    'page callback' => 'simple_contest_content_type_settings_email_view_fields',
    'access callback' => 'user_access',
    'access arguments' => array('administer nodes'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/simple_contest.admin.inc',
  );

  $items['node/%node/simple_contest'] = array(
		'title' => 'Contest',
		'description' => 'Finalize the winners for the contest.',
		'page callback' => 'simple_contest_finalize_page',
		'page arguments' => array(1),
		'access callback' => 'simple_contest_finalize_access',
		'access arguments' => array(1),
		'type' => MENU_LOCAL_TASK,
		'weight' => 5,
		'file' => 'includes/simple_contest.pages.inc',
  );

  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function simple_contest_form_alter(&$form, $form_state, $form_id) {
  
  module_load_include('inc', 'simple_contest', 'includes/simple_contest.form');
  _simple_contest_form_alter($form, $form_state, $form_id);
  
}

/**
 * Implementation of hook_node_type():
 */
function simple_contest_node_type($op, $info) {
  switch ($op) {
    case 'delete':
      variable_del('simple_contest_'. $info->type);
      break;
    case 'update':
      if (!empty($info->old_type) && $info->old_type != $info->type) {
        if (simple_contest_is_simple_contest($info->old_type)) {
          $settings = variable_get('simple_contest_'. $info->old_type, array());
          variable_del('simple_contest_'. $info->old_type);
          variable_set('simple_contest_'. $info->type, $settings);
        }
      }
      break;
  }
}


/**
 * Implementation of hook_node_insert().
 */
function simple_contest_node_insert($node) {

  if(simple_contest_is_simple_contest($node->type) && isset($node->simple_contest)) {

    
    db_insert('simple_contest_statistics')
      ->fields(array(
        'nid' => $node->nid,
        'status' => $node->simple_contest['status'],
        'winners_count' => 0,
        'timestamp' => time(),
      ))
      ->execute();
    
  }

}

/**
 * Implementation of hook_node_update().
 */
function simple_contest_node_update($node) {

  if(simple_contest_is_simple_contest($node->type)) {

    $settings = simple_contest_get_settings($node->type);

    $old_status = db_select('simple_contest_statistics', 'scs')
    ->fields('scs', array(
      'status',
    ))
    ->where('scs.nid = :nid ', array(':nid' => $node->nid))
    ->execute()->fetchField();
	  
	  $new_status = $node->simple_contest['status'];
	  
	  if ( $old_status != $new_status ) {
		
      module_invoke_all('simple_contest', 'contest_status_changed', $node, $old_status, $new_status);
		
      db_update('simple_contest_statistics')
        ->condition('nid', $node->nid)
        ->fields(array('status' => $node->simple_contest['status']))
        ->execute();
    }

  }

}

/**
 * Implementation of hook_node_load().
 * 
 */
function simple_contest_node_load($nodes, $types) {

  $nids = array_keys($nodes);
  
  if (!count($nids)) {
    return;
  }
  
  // set details for contest type nodes
  $result = db_select('simple_contest_statistics', 'scs')
    ->fields('scs', array(
      'nid',
      'status',
      'winners_count',
      'timestamp',
    ))
    ->where('scs.nid IN (:nids)', array(':nids' => $nids))
    ->execute();
  
  foreach( $result as $record ) {
    $nodes[$record->nid]->simple_contest = array(
      'status' => $record->status,
      'winners_count' => $record->winners_count,
      'timestamp' => $record->timestamp,
    );
  }

  // set details for contest winner nodes
  $result = db_select('simple_contest_results', 's')
    ->fields('s', array(
      'nid',
      'wnid',
      'weight',
    ))
    ->where('s.wnid IN (:nids)', array(':nids' => $nids))
    ->execute();
  
  foreach( $result as $record ) {
    $node = $nodes[$record->wnid]; // by winner node id
    $node->simple_contest['winner'][] = array( // may be winner of multiple contests
      'contest' => $record->nid,
      'weight' => $record->weight,
    );
  }
}

/**
 * Implementation of hook_node_delete().
 */
function simple_contest_node_delete($node) {

  if(simple_contest_is_simple_contest($node->type)) {
    
    db_delete('simple_contest_statistics')
      ->condition('nid', $node->nid)
      ->execute();

    db_delete('simple_contest_results')
      ->condition('nid', $node->nid)
      ->execute();
    
  }

}

/**
 * Implementation of hook_node_view().
 */
function simple_contest_node_view($node, $a3 = NULL, $a4 = NULL) {

  if( !simple_contest_is_simple_contest($node->type) || !isset($node->simple_contest)) {
    return;
  }

  $settings = simple_contest_get_settings($node->type);
  
  $status = $node->simple_contest['status'];
  
  // TODO: hard coded. change it.
  $node->content['simple_contest_status'] = array(
    '#markup' => '
      <div class="field field-name-field-sc-contest_status field-label-above">
        <div class="field-label">' . t('Contest status') . ':&nbsp;</div>
          <div class="field-items"><div class="field-item even">
          ' . t(simple_contest_status_name($status)) . '
          </div>
        </div>
      </div>',
  );
  
  if($status == SIMPLE_CONTEST_STATUS_COMPLETED && $settings['results_display'] && $settings['results_display_view']) {
    
    $results_display_view = $settings['results_display_view'];
    $results = views_embed_view($results_display_view, 'default', $node->nid);
    
    $node->content['simple_contest'] = array(
      '#markup' => theme('simple_contest_results_display', array(
        'node' => $node, 
        'results' => $results,
      )),
    );

    $node->content['simple_contest'] += array(
      '#weight' => module_exists('content') ? content_extra_field_weight($node->type, 'simple_contest') : 5,
    );
  }

}


function simple_contest_finalize_access($node, $account = NULL) {
  global $user;

  if(!$account) {
    $account = $user;
  }

  return simple_contest_is_simple_contest($node) && ( user_access('finalize_' . $node->type, $account) || user_access('administer_simple_contest') );

}

/**
 * Implementation of hook_simple_contest()
 */
function simple_contest_simple_contest($op, $a2 = NULL, $a3 = NULL) {
  switch ($op) {
  case 'default_settings':
    return array(
      'winner_type' => 'user',			  // content type user or node
      'winner_selection_type' => 'auto',// content type
      'view' => '',             		  // default select view
      'view_field' => '',               // default select view field
      'results_display' => 1,
      'results_display_view' => '',     // default select view
      'date_field' => '',     // must be defined in cck
      'submission_type' => array(),
      'max_winners' => '1',             // multiple winners
      'winner_limit_interval' => 'daily',
      'winner_select_hard' => 10,
      'winner_limit_count'  => 1,
      'email_to_winner' => 1,
      'email_to_participants' => 1,
      'email_to_participants_view' => '',
      'email_to_participants_view_field_uid' => 'uid',
	  'email_to_participants_view_field_nid' => 'nid',
      'email_to_admin' => 1,
      'email_to_winner_subject' => t('Congratulations! You got it!'),
      'email_to_winner_body' => t('
Hi [participant-user:name], 

Congratulations! You are the winner of the contest [contest-node:title]. You can see the final results at [contest-node:url:absolute].
		
--
Thank You
[site:name]
[site:url]
		'),
      'email_to_participants_subject' => t('Final contest results anounced at !site_name'),
      'email_to_participants_body' => t('
Hi [participant-user:name], 

The final results for the contest [contest-node:title] has been announced. You can see the final results at [contest-node:url:absolute].	

--
Thank You
[site:name]
[site:url]
		'),
      'email_to_admin_subject' => t('Final contest results anounced at !site_name'),
      'email_to_admin_body' => t('
Hi, 

The final results for the contest [contest-node:title] has been announced. You can see the final results at [contest-node:url:absolute].
	
--
Thank You
[site:name]
[site:url]
		'),
    );
  }
}

/**
 * Implementation of hook_cron().
 */
function simple_contest_cron() {

  simple_contest_finalize_results_all();

}

/**
 * Implementation of hook_theme().
 */
function simple_contest_theme() {

  return array(
    'simple_contest_results_display' => array(
      'variables' => array('node' => NULL, 'results' => NULL),
      'file' => 'simple_contest.theme.inc',
    ),
    'simple_contest_views_selector' => array(
      'variables' => array('element' => NULL),
      'file' => 'simple_contest.theme.inc',
    ),
  );
}

function simple_contest_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'simple_contest') . '/views',
  );
}

/**
 * Implementation of hook_mail().
 */
function simple_contest_mail($key, &$message, $params) {

  module_load_include('inc', 'simple_contest', 'includes/simple_contest.mail');
  _simple_contest_mail($key, $message, $params);

}

/**
 * Implementation of hook_content_extra_fields.
 *
 * Informations for non-CCK 'node fields' defined in core.
 */
function simple_contest_content_extra_fields($type_name) {
  
  $settings = simple_contest_get_settings($type_name);
  
  if (!$settings['results_display']) {
    return;
  }
  
  $type = node_get_type($type_name);
  $extra = array();

  $extra['simple_contest'] = array(
		'label' => t('Simple contest settings'),
		'description' => t('Simple contest form.'),
		'weight' => 10,
  );
  
  $extra['simple_contest_status'] = array(
		'label' => t('Simple contest status'),
		'description' => t('Simple contest status.'),
		'weight' => 0,
  );
  return $extra;
}

/**
 * Implements hook_features_pipe_alter() for node component.
 * Add dependencies.
 */
function simple_contest_features_pipe_node_alter(&$pipe, $data, &$export) {
  if (!empty($data)) {
    foreach ($data as $node_type) {
      if (simple_contest_is_simple_contest($node_type)) {
        
        $settings = simple_contest_get_settings($node_type);
        
        // export variables for this contest
        if (module_exists('strongarm')) { 
          $pipe['variable'][] = "simple_contest_{$node_type}";
        }
        
        // export views for this contest
        $pipe['views_view'][] = $settings['view'];
        $pipe['views_view'][] = $settings['results_display_view'];
        $pipe['views_view'][] = $settings['email_to_participants_view'];
        $pipe['views_view'][] = $settings['email_to_participants_view'];
        
        
        $export['dependencies']['simple_contest'] = 'simple_contest';
        
      }
    }
  }
}
