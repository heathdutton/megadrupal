<?php

/*
 *  Implementation of hook_userpoints_info
 */
function simple_contest_userpoints_userpoints_info() {
  return array(
    'simple_contest_userpoints_user_won' => array(
      'description' => t('User was selected as winner.'),
    )
  );
}


function simple_contest_userpoints_form_simple_contest_content_type_settings_form_alter( &$form, &$form_state ) {

  module_load_include('inc', 'simple_contest_userpoints', 'simple_contest_userpoints.admin');
  _simple_contest_userpoints_form_simple_contest_content_type_settings_form_alter( $form, $form_state );

}


function simple_contest_userpoints_form_content_type_settings_form_validate($form, &$form_state) {
  
  $values = $form_state['values'];
  if (!$values['is_sc']) {
    return;
  }
  
  $points = $values['userpoints'];
  foreach($points as $rank => $point){
    if ( !is_numeric($point) ) {
      form_set_error('sc][sc_userpoints][userpoints][' . $rank , t('!Point for !rank must be an integer.', array_merge(userpoints_translation(), array('!rank' => str_replace('rank_', 'Rank #', $rank)))));
    }
  }
  
}


/*
 * call back function for simple_contest_content_type_settings_form ajax handler
 */ 
function simple_contest_userpoints_content_type_settings_userpoints($form, $form_state){
  return $form['sc']['sc_userpoints']['userpoints'];
}

/*
 * Implementation of hook_simple_contest()
 *
 */
function simple_contest_userpoints_simple_contest($op, $a2 = NULL, $a3 = NULL, $a4 = NULL){
  
  if ( $op == SIMPLE_CONTEST_STATUS_COMPLETED && $a2 && $a3 ) {
    
    $node = $a2;
    $type = $node->type;
    $new_winners = $a3;
    
    $settings = simple_contest_get_settings($type);
    
    $tid = $settings['userpoints_tid'];
    
    
    foreach ( $new_winners as $uid => $info ) {
      $point = 0;
      if ( isset($settings['userpoints']['rank_'. $info['weight']])) {
        $point = intval($settings['userpoints']['rank_'. $info['weight']]);
      } else {
        if ( isset($settings['userpoints']['rank_0'])) {
          $point = intval($settings['userpoints']['rank_0']);
        }
      }
      if ( $point <= 0 ) {
        continue;
      }
      $params = array(
        'points' => $point,
        'tid' => $tid,
        'uid' => $uid,
        'operation' => 'simple_contest_userpoints_user_won',
        'entity_id' => $node->nid,
        'entity_type' => 'simple_contest_' . $node->type,
      );
      userpoints_userpointsapi( $params );
    }
    
  }
  
  if ( $op == 'default_settings' ) {
    return array(
      'userpoints' => array('rank_0' => 0, 'rank_1' => 0),
      'userpoints_tid' => '',
    );
  }
  
}

/**
 * Implements hook_features_pipe_alter() for node component.
 * Add dependencies.
 */
function simple_contest_userpoints_features_pipe_node_alter(&$pipe, $data, &$export) {
  if (!empty($data)) {
    foreach ($data as $node_type) {
      if (simple_contest_is_simple_contest($node_type)){
        
        $settings = simple_contest_get_settings($node_type);
        
        if (isset($settings['userpoints']) ) {
          $export['dependencies']['simple_contest_userpoints'] = 'simple_contest_userpoints';
        }
        
      }
    }
  }
}
