<?php

/**
 * Implementation of hook_commerce_coupon_type_configure
 */
function simple_contest_commerce_coupon_commerce_coupon_type_configure($bundle, $reset = FALSE) {

  module_load_include('inc', 'simple_contest_commerce_coupon', 'simple_contest_commerce_coupon.types');
  _simple_contest_commerce_coupon_commerce_coupon_type_configure( $bundle, $reset );
  
}

/**
 * Implementation of hook_form_FORM_ID_alter
 */
function simple_contest_commerce_coupon_form_simple_contest_content_type_settings_form_alter( &$form, &$form_state ) {
  
  module_load_include('inc', 'simple_contest_commerce_coupon', 'simple_contest_commerce_coupon.forms');
  _simple_contest_commerce_coupon_form_simple_contest_content_type_settings_form_alter( $form, $form_state );
  
}


/*
 * Implementation of hook_simple_contest()
 *
 */
function simple_contest_commerce_coupon_simple_contest($op, $a2 = NULL, $a3 = NULL, $a4 = NULL){
  
  if ( $op == SIMPLE_CONTEST_STATUS_COMPLETED && $a2 && $a3 ) {
    
    $node = $a2;
    $type = $node->type;
    
    $settings = simple_contest_get_settings($type);
    
    return simple_contest_commerce_coupon_create_coupons ( $node, $a3 );
    
  }
  
  if ( $op == 'default_settings' ) {
    return array(
      'commerce_coupon' => array(
        'create_coupon' => '0',
        'coupon_entity' => 'sc_commerce_coupon',
        'coupon_values' => array(),
      ),
    );
  }
  
  if ( $op == 'mail' ) {
    $key = $a2;
    $params = $a3;
    
    if ( $key == 'winners_mail' ) {
      
      $entity_type = 'commerce_coupon';
      $bundle = 'sc_commerce_coupon';
      
      $contest = $params['contest-node'];
      $winner_user = $params['participant-user'];
      $winner_node = $params['participant-node'];
      $rank = $params['participant-rank'];
      $settings = $params['settings'];
      
      $query = new EntityFieldQuery();
      $result = $query
        ->entityCondition( 'entity_type',  $entity_type )
        ->entityCondition( 'bundle', $bundle )
        ->fieldCondition( 'sc_commerce_coupon_user', 'uid', array($winner_user->uid) )
        ->fieldCondition( 'sc_commerce_coupon_contest', 'nid', array($contest->nid) )
        ->execute();
      
      if ( isset($result[$entity_type]) ) {
        $coupons = entity_load($entity_type, array_keys($result[$entity_type]));
        
        if ( !empty($coupons) ) {
          foreach($coupons as $id => $coupon) {
            return array($entity_type => $coupon);
          }
        }
      }
    }
  }
  
}


function simple_contest_commerce_coupon_create_coupons ( $contest, $winners ) {
  
  $settings = simple_contest_get_settings($contest->type);  
  $cc_settings = isset($settings['commerce_coupon'])?$settings['commerce_coupon']:array();
  
  $entity_type = 'commerce_coupon';
  $bundle = 'sc_commerce_coupon';
  
  if ( !isset($cc_settings['create_coupon']) || 
     ( isset($cc_settings['create_coupon']) && !$cc_settings['create_coupon']) ) {
    return;
  }
  
  $cc_values = isset($cc_settings['coupon_values'])?$cc_settings['coupon_values']:array();
  
  module_load_include('inc', 'entity', 'includes/entity.ui');
  
  foreach ( $winners as $uid => $info ) {
    
    $rank = $info['weight'];
    
    $coupon = isset($cc_values['coupon_' . $rank])?$cc_values['coupon_' . $rank]:array();
    
    if ( empty($coupon) ) {
      continue;
    }
    
    #TODO: create uid field
    
    $coupon['type'] = $bundle;
    
    foreach ($coupon as $key => $val) {
      
      if ( is_array($coupon[$key]) ) {
        if ( isset($coupon[$key]['und'][0]['value']) && !$coupon[$key]['und'][0]['value'] ) {
          $coupon[$key] = array();
        }
        if ( isset($coupon[$key]['und'][0]['amount']) && !$coupon[$key]['und'][0]['amount'] ) {
          $coupon[$key] = array();
        }
      }
    }
    
    $commerce_coupon = commerce_coupon_create($coupon);
    
    $code = commerce_coupon_generate_coupon_code();
    $commerce_coupon->commerce_coupon_code['und'][0] = array(
      'value' => $code,
      'format' => '',
      'safe_value' => $code
    );
    
    // set the winner uid
    $commerce_coupon->sc_commerce_coupon_user['und'][0]['uid'] = $uid;
    
    // set the contest nid
    $commerce_coupon->sc_commerce_coupon_contest['und'][0]['nid'] = $contest->nid;
    
    // save the coupon
    commerce_coupon_save($commerce_coupon);
    
    // this is not db saved object. 
    $info['commerce_coupon'] = $commerce_coupon;
    
  }
  
}

/**
 * Implements hook_features_pipe_alter() for node component.
 * Add dependencies.
 */
function simple_contest_commerce_coupon_features_pipe_node_alter(&$pipe, $data, &$export) {
  if (!empty($data)) {
    foreach ($data as $node_type) {
      if (simple_contest_is_simple_contest($node_type)) {
        
        $settings = simple_contest_get_settings($node_type);
        
        if (isset($settings['commerce_coupon']['create_coupon']) && $settings['commerce_coupon']['create_coupon'] ) {
          $export['dependencies']['simple_contest_commerce_coupon'] = 'simple_contest_commerce_coupon';
        }
        
        $rules = rules_config_load_multiple(FALSE, array('active' => 1));
        
        foreach($rules as $rule) {
          if (in_array('simple_contest_commerce_coupon', $rule->dependencies())) {
            $pipe['rules_config'][] = $rule->name;
          }
        }
        
      }
    }
  }
}

