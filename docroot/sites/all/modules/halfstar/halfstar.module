<?php
/**
 * @file
 * Module file for halfstar
 * Alters fivestar functionlity to allow voting with half stars.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a checkbox to determine if half star should be used.
 */
function halfstar_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#field']['type'] == 'fivestar') {
    $form['instance']['settings']['allow_halfstar'] = array(
      '#type' => 'checkbox',
      '#title' => t('Allow users to vote with a half star.'),
      '#default_value' => isset($form['#instance']['settings']['allow_halfstar']) ? $form['#instance']['settings']['allow_halfstar'] : 0,
      '#return_value' => 1,
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Make changes to the voting form.
 * Used when widget type is: Stars (rated while viewing).
 */
function halfstar_form_fivestar_custom_widget_alter(&$form, &$form_state, $form_id) {

  // Get instance settings.
  $entity_type = $form['vote']['#settings']['entity_type'];
  $field_name = $form['vote']['#settings']['field_name'];
  $content_id = $form['vote']['#settings']['content_id'];

  // If there is no content id then this content is being previewed.
  // This means we can't load the entity so we can't get the bundle so we
  // can't load the field instance settings so we can't be sure if halfstar
  // is enabled or not so leave as it is.
  if (!$content_id) {
    return;
  }

  $entity = entity_load($entity_type, array($content_id));
  $bundle_name = $entity[$content_id]->type;
  $settings = field_info_instance($entity_type, $field_name, $bundle_name);

  $allow_halfstar = isset($settings['settings']['allow_halfstar']) ? $settings['settings']['allow_halfstar'] : FALSE;

  if ($allow_halfstar) {

    // Double number of stars.
    $form['vote']['#stars'] *= 2;
    $form['vote']['#settings']['stars'] = $form['vote']['#stars'];

    // Add custom css.
    $form['#attached']['css'][] = drupal_get_path('module', 'halfstar') . '/css/halfstar.css';
    if ($form['vote']['#widget']['name'] == 'craft') {
      $form['#attached']['css'][] = drupal_get_path('module', 'halfstar') . '/css/halfstar-craft.css';
    }

    // Change type to allow us to add custom pre #process and post
    // #process functions to alter the final markup.
    $form['vote']['#type'] = 'halfstar';

    // Add initial submit handler to half score.
    array_unshift($form['#submit'], 'halfstar_form_submit');

  }

}

/**
 * Implements hook_theme_registry_alter().
 *
 * The descriptions below stars will show double what they should so we need to
 * intercept the theme_fivestar_summary functions to half the scores passed in.
 * This allows us to add a preproccess function to theme_fivestar_summary to
 * make those changes.
 */
function halfstar_theme_registry_alter(&$theme_registry) {
  $theme_registry['fivestar_summary']['preprocess functions'][] = 'theme_fivestar_summary_preprocess';
}

/**
 * Preprocess to run before theme_fivestar_summary.
 *
 * If halfstar is enabled will half the scores.
 */
function theme_fivestar_summary_preprocess(&$variables) {

  // Check to see if halfstar is enabled.
  $fivestar_enabled = &drupal_static('fivestar_enabled');

  if ($fivestar_enabled && $variables['user_rating']) {
    $variables['user_rating'] /= 2;
  }
  if ($fivestar_enabled && $variables['average_rating']) {
    $variables['average_rating'] /= 2;
  }

  // Set the static variable back to false or comments with ratings on the same
  // page will not be displayed correctly.
  $fivestar_enabled = FALSE;

}

/**
 * Implements hook_element_info().
 *
 * Defines 'halfstar' form element type.
 * Take most definitions from fivestar_element_info.
 */
function halfstar_element_info() {

  $type = fivestar_element_info();
  $type['halfstar'] = $type['fivestar'];
  unset($type['fivestar']);
  // Add  custom pre and post process functions.
  array_unshift($type['halfstar']['#process'], 'halfstar_pre_expand');
  $type['halfstar']['#process'][] = 'halfstar_post_expand';

  return $type;
}

/**
 * Process function to make copy of element before fivestar fivestar_expand.
 */
function halfstar_pre_expand($element) {

  // Take a copy of the original element for user later.
  $element['#original'] = $element;

  // This pre-expand function will only run if halfstar is enabled so set a
  // static variable so other functions run in this page request will also know
  // halfstar is enabled.
  $fivestar_enabled = &drupal_static('fivestar_enabled');
  $fivestar_enabled = TRUE;

  return $element;
}

/**
 * Process function to run after fivestar_expand.
 *
 * Corrects #options array if set, generates new description and alters the
 * ajax callback.
 */
function halfstar_post_expand($element) {

  if (isset($element['vote']['#options'])) {
    // Set new values for the #options array.
    $options = array('-' => t('Select rating'));
    for ($i = 1; $i <= $element['#stars']; $i++) {
      $this_value = ceil($i * 100 / $element['#stars']);
      $options[$this_value] = t('Give it @star/@count', array('@star' => $i / 2, '@count' => $element['#stars'] / 2));
    }
    // Display clear button only if enabled.
    if ($element['#allow_clear'] == TRUE) {
      $options[0] = t('Cancel rating');
    }

    $element['vote']['#options'] = $options;
  }

  // Half the score and then re-generate the widget.
  $element['#original']['#values']['user'] /= 2;
  $element['#original']['#values']['average'] /= 2;

  // Markup will be set if widget type is Stars (rated while viewing) and users
  // are not allowed to re-vote on content or users are not allowed to vote on
  // their own content.
  if (isset($element['vote']['#markup'])) {

    $element2 = fivestar_expand($element['#original'], NULL, NULL);

    // Element has the correct star display but the wrong description.
    $parts = explode('<div class="description">', $element['vote']['#markup']);
    $stars = $parts[0];

    // Now get correct description.
    $parts = explode('<div class="description">', $element2['vote']['#markup']);
    $description = '<div class="description">' . $parts[1];

    // Combine the correct stars and display markup.
    $element['vote']['#markup'] = $stars . $description;

  }

  if (isset($element['vote']['#ajax']['callback'])) {
    // Change the ajax callback so we can intercept it to alter the vote score.
    $element['vote']['#ajax']['callback'] = 'halfstar_ajax_submit';
  }

  // Add the halfstar class.
  $element['#prefix'] = str_replace('class="', 'class="halfstar ', $element['#prefix']);

  return $element;

}

/**
 * Ajax callback to overwrite the fivestar ajax callback.
 *
 * Main function to halve the vote score.
 *
 * Would be nice to not have to overwrite the entire function and just alter the
 * output of fivestar_ajax_submit however cannot get it to work that way at
 * present.
 */
function halfstar_ajax_submit($form, $form_state) {

  if (!empty($form_state['settings']['content_id'])) {
    $entity = entity_load($form_state['settings']['entity_type'], array($form_state['settings']['entity_id']));
    $entity = reset($entity);
    _fivestar_update_field_value($form_state['settings']['content_type'], $entity, $form_state['settings']['field_name'], $form_state['settings']['langcode'], $form_state['values']['vote']);
    $votes = _fivestar_cast_vote($form_state['settings']['content_type'], $form_state['settings']['content_id'], $form_state['values']['vote'], $form_state['settings']['tag']);
  }

  $values = array();
  $values['user'] = isset($votes['user']['value']) ? $votes['user']['value'] / 2 : 0;
  $values['average'] = isset($votes['average']['value']) ? $votes['average']['value'] / 2 : 0;
  $values['count'] = isset($votes['count']['value']) ? $votes['count']['value'] : 0;

  // We need to process the 'fivestar' element with the new values.
  $form['vote']['#values'] = $values;
  $new_element = fivestar_expand($form['vote']);
  // Update the description. Since it doesn't account of our cast vote above.
  $form['vote']['vote']['#description'] = isset($new_element['vote']['#description']) ? $new_element['vote']['#description'] : '';

  return array(
    '#type' => 'ajax',
    '#commands' => array(
      array(
        'command' => 'fivestarUpdate',
        'data' => drupal_render($form['vote']),
      ),
    ),
  );
}

/**
 * Initial submit function for the voting widget.
 *
 * Used when widget type is: Stars (rated while viewing).
 * Used to double the score.
 */
function halfstar_form_submit($form, &$form_state) {
  $form_state['values']['vote'] *= 2;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Used to alter the select list used on the content edit form when
 * the widget type is: Select list (rated while editing).
 */
function halfstar_field_widget_fivestar_select_form_alter(&$element, &$form_state, $context) {
  halfstar_field_widget_form_alter_make_changes($element[0]);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Used to alter the stars used on the content edit form
 * when the widget type is: Stars (rated while editing).
 */
function halfstar_field_widget_stars_form_alter(&$element, &$form_state, $context) {
  halfstar_field_widget_form_alter_make_changes($element[0]);
}

/**
 * Make changes to the stars or select list widget element.
 *
 * Shown on the content edit form.
 */
function halfstar_field_widget_form_alter_make_changes(&$element) {

  $entity_type = $element['#entity_type'];
  $field_name = $element['#field_name'];
  $bundle_name = $element['#bundle'];

  $settings = field_info_instance($entity_type, $field_name, $bundle_name);
  $allow_halfstar = isset($settings['settings']['allow_halfstar']) ? $settings['settings']['allow_halfstar'] : FALSE;

  if ($allow_halfstar) {

    if ($element['rating']['#type'] == 'fivestar') {

      $element['rating']['#stars'] *= 2;
      $element['rating']['#settings']['stars'] *= 2;
      $element['#attached']['css'][] = drupal_get_path('module', 'halfstar') . '/css/halfstar.css';
      $element['#after_build'][] = 'halfstar_custom_widget_rate_editing_after_build';

    }
    elseif ($element['rating']['#type'] == 'select') {

      $num_stars = (count($element['rating']['#options']) - 1) * 2;
      $element['rating']['#options'] = array(0 => 'No stars');
      for ($x = 1; $x <= $num_stars; $x++) {
        $score = ($x / $num_stars) * 100;
        $element['rating']['#options'][$score] = ($x / 2) . ' star' . ($x > 1 ? 's' : '');
      }

    }

  }

}

/**
 * After build function for the star rating widget.
 *
 * Shown on the content edit form (widget type: Stars (rated while editing)).
 * Can also be shown on the comment edit form.
 */
function halfstar_custom_widget_rate_editing_after_build($form, &$form_state) {

  $num_half_stars = $form['rating']['#stars'];
  $num_whole_stars = $num_half_stars / 2;
  $score = 0.5;
  foreach ($form['rating']['vote']['#options'] as $k => $v) {
    if (is_numeric($k)) {
      $form['rating']['vote']['#options'][$k] = t('Give it @score/@outof', array('@score' => $score, '@outof' => $num_whole_stars));
      $score += 0.5;
    }
  }

  $form['rating']['#prefix'] = str_replace('class="', 'class="halfstar ', $form['rating']['#prefix']);

  // If comment voting style is set to craft add the necesarry CSS now.
  if(isset($form['rating']['#widget']['name']) && $form['rating']['#widget']['name'] == 'craft') {
    $form['#attached']['css'][] = drupal_get_path('module', 'halfstar') . '/css/halfstar-craft.css';
  }

  return $form;

}
