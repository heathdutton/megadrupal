<?php

/**
 * Implements hook_form_FORM_ID_alter().
 */
function external_cache_form_system_performance_settings_alter(&$form, &$form_state, $form_id) {
  $form['caching']['page_cache_invoke_hooks'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable external page caching'),
    '#description' => t("This will skip some early 'bootstrap' hooks for cached pages and may cause some functionality of your site to stop working."),
    '#default_value' => !variable_get('page_cache_invoke_hooks', TRUE),
    '#weight' => -1,
    '#element_validate' => array('external_cache_page_cache_invoke_hooks_element_validate'),
    '#states' => array(
      'visible' => array(   // action to take.
        ':input[name="cache"]' // element to evaluate condition on
          => array('checked' => TRUE),  // condition
      ),
    ),
  );

  $form['reverse_proxy'] = array(
    '#type' => 'fieldset',
    '#title' => t('Reverse proxy'),
  );

  $form['reverse_proxy']['reverse_proxy'] = array(
    '#type' => 'checkbox',
    '#title' => t('Drupal is behind a reverse proxy'),
    '#default_value' => variable_get('reverse_proxy', FALSE),
  );

  $form['reverse_proxy']['reverse_proxy_addresses'] = array(
    '#type' => 'textarea',
    '#title' => t('Reverse proxy addresses'),
    '#description' => t('Specify the addresses of your reverse proxy servers to allow Drupal to correctly detect the IP addresses of your site visitors. Enter one per line.'),
    '#default_value' => implode("\n", variable_get('reverse_proxy_addresses', array())),
    '#element_validate' => array('external_cache_reverse_proxy_addresses_element_validate'),
    '#states' => array(
      'visible' => array(   // action to take.
        ':input[name="reverse_proxy"]' // element to evaluate condition on
          => array('checked' => TRUE),  // condition
      ),
    ),
  );
}

/**
 * Element validate for the reverse proxy addresses element.
 */
function external_cache_reverse_proxy_addresses_element_validate($element, &$form_state, $form) {
  $value = array();
  $items = explode("\n", $element['#value']);
  foreach ($items as $item) {
    $trimmed = trim($item);
    if (!empty($trimmed)) {
      $value[] = $trimmed;
    }
  }
  form_set_value($element, $value, $form_state);
}

/**
 * Element validate for the page cache invoke hooks element.
 */
function external_cache_page_cache_invoke_hooks_element_validate($element, &$form_state, $form) {
  form_set_value($element, !$element['#value'], $form_state);
}
