<?php

/**
 * Schemas and module updates for Magento Product integration.
 */

/**
 * Implements hook_schema().
 */
function magento_products_schema() {
  $schema = array();

  $schema['magento_products'] = array(
    'description' => 'Stores the connection between a Drupal entity and a Magento product.',
    'fields' => array(
      'entity_id' => array(
        'description' => 'Drupal entity ID for associated content.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'entity_type' => array(
        'description' => 'Drupal entity type for associated content.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'bundle' => array(
        'description' => 'Drupal entity bundle, such as content type for nodes.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'magento_product_id' => array(
        'description' => 'The primary key for a product in the Magento system.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'synced' => array(
        'description' => 'Unix timestamp for last time this record was updated from Magento.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'unique keys' => array(
      'entity_id' => array('entity_id', 'entity_type', 'magento_product_id'),
    ),
  );

  $schema['magento_products_queue'] = array(
    'description' => 'A temporary queue of Magento products to be imported or updated in Drupal. Items are removed from the queue after the import attempt, regardless of success. The queue is populated during Drupal cron runs (by default configuration).',
    'fields' => array(
      'magento_product_id' => array(
        'description' => 'The primary key for a product in the Magento system queued to be imported.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'Unix timestamp for the time this record was added to the queue.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'unique keys' => array(
      'magento_product_id' => array('magento_product_id'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_requirements().
 */
function magento_products_requirements($phase) {
  if ($phase != 'runtime') {
    return;
  }

  $requirements = array();
  $t = get_t();

  // Get number of records in queue and report an error if that exceed our per
  // cron processing.
  $queue_size = db_query('SELECT COUNT(*) FROM {magento_products_queue}')->fetchField();
  $requirements['magento_products'] = array(
    'title' => $t('Magento Products'),
    'value' => $t('There are @count records in the import queue.', array('@count' => $queue_size)),
    'severity' => $queue_size > variable_get('magento_products_import_limit', 50) ? REQUIREMENT_ERROR : REQUIREMENT_OK,
    'description' => $t('Magento product import status'),
  );

  return $requirements;
}

/**
 * Implements hook_uninstall().
 */
function magento_products_uninstall() {
  variable_del('magento_products_import_limit');
  variable_del('magento_product_node_content_type');
  variable_del('magento_product_last_sync');
}
