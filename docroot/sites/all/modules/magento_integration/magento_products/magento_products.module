<?php

/**
 * @file
 * Main hooks for importing Magento products into Drupal.
 */

// Products with at least a visibility of 2 are visible in the catalog.
DEFINE('MAGENTO_PRODUCTS_CATALOG_VISIBLITY', 2);

/**
 * Implements hook_menu()
 */
function magento_products_menu() {
  $items = array();

  $items['node/%node/magento'] = array(
    'title' => 'Magento',
    'access callback' => 'magento_products_node_access',
    'access arguments' => array(1),
    'page callback' => 'magento_products_node',
    'page arguments' => array(1),
    'file' => 'magento_products.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Access callback for reviewing node details about a Magento product.
 *
 * We only want to show this tab on content types that are linked to Magento,
 * so we use an access handler to achieve this functionality.
 */
function magento_products_node_access($node) {
  return user_access('administer magneto product integration') && node_access('update', $node) && $node->type == variable_get('magento_product_node_content_type');
}

/**
 * Implements hook_cron();
 */
function magento_products_cron() {
  // Allow import during cron to be disabled so it can be run via drush
  // separately.
  if (variable_get('magento_products_import_during_cron', 0)) {
    module_load_include('inc', 'magento_products');
    magento_products_import();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function magento_products_form_magento_admin_settings_form_alter(&$form, &$form_state) {
  module_load_include('inc', 'magento_products', 'magento_products.admin');
  magento_products_settings_form($form, $form_state);
}

/**
 * Implements hook_field_formatter_info().
 */
function magento_products_field_formatter_info() {
  if (!module_exists('imagecache_external')) {
    return;
  }

  return array(
    // Since Magento images are stored on the Magento site and only store a URL
    // reference to then, we need to use imagecache external to size and show
    // them when viewing them in Drupal.
    'magento_external_url_to_image' => array(
      'label' => t('External URL to image'),
      'field types' => array('text'),
      'settings'  => array(
        'imagestyle' => 'thumbnail',
      ),
    ),
    'magento_price' => array(
      'label' => t('Show a number as a currency'),
      'field types' => array('number_float', 'number_decimal'),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function magento_products_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  switch ($display['type']) {
    case 'magento_external_url_to_image':
      $imagestyles = array();
      foreach (image_styles() as $imagestyle) {
        $imagestyles[$imagestyle['name']] = $imagestyle['label'];
      }
      $element['imagestyle'] = array(
        '#type' => 'select',
        '#title' => t('Image style preset'),
        '#options' => $imagestyles,
        '#default_value' => $settings['imagestyle'],
      );
      break;
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function magento_products_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'magento_external_url_to_image':
      $summary = t('Show the image as style @style.', array(
        '@style' => $settings['imagestyle'],
      ));
      break;

    case 'magento_price':
      $summary = t('Show a number as US currency.');
      break;
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function magento_products_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {

    case 'magento_external_url_to_image':
      foreach ($items as $delta => $item) {
        $attributes = array(
          'href' => url($entity->field_magento_url[LANGUAGE_NONE][0]['value'], array('absolute' => TRUE)),
          'target' => '_blank',
        );
        $element[$delta] = array(
          '#prefix' => '<a ' . drupal_attributes($attributes) . '>',
          '#theme' => 'imagecache_external',
          '#path' => $item['value'],
          '#style_name' => $settings['imagestyle'],
          '#attributes' => array('class' => array('product-image')),
          '#suffix' => '</a>',
        );
      }
      break;

    case 'magento_price':
      foreach ($items as $delta => $item) {
        if($locale = localeconv() && empty($locale['currency_symbol '])) {
          setlocale(LC_MONETARY, 'en_US');
        }
        $number = money_format('%.2n', $item['value']);
        $element[$delta] = array(
          '#markup' => $number,
        );
      }
      break;
  }

  return $element;
}
