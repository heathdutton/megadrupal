<?php
/**
 * @file
 * Simple workflow add a new ready state to node entity types and fine
 * publication access rights.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * We want to let the configurator decide if node authors can set limited access
 * to their node and what the default values for that content type should be.
 */
function simple_workflow_form_node_type_form_alter(&$form, $form_state) {
  // Add ready to publishing options.
  $form['workflow']['node_options']['#options'] = array('ready' => t('Ready')) + $form['workflow']['node_options']['#options'];
}

/**
 * Implements hook_form_alter().
 */
function simple_workflow_form_alter(&$form, &$form_state, $form_id) {
  // Apply to all node entity edit form.
  if (isset($form['#node_edit_form']) && $form['#node_edit_form'] === TRUE) {
    $type = $form['#node']->type;
    // If user has no "administer content" but set node something.
    $access = TRUE;
    // Unset status.
    if (!user_access('set $type status')) {
      unset($form['options']['status']);
    }
    else {
      drupal_add_js(drupal_get_path('module', 'simple_workflow') . '/simple_workflow.admin.js');
    }
    // Unset sticky.
    if (!user_access("set $type sticky")) {
      unset($form['options']['sticky']);
    }
    // Unset promote.
    if (!user_access("set $type promote")) {
      unset($form['options']['promote']);
    }
    // No publishing options at all.
    if (!user_access("set $type promote") && !user_access("set $type sticky") && !user_access("set $type status")) {
      $access = FALSE;
    }
    // Add ready checkbox.
    if (user_access("set $type ready")) {
      $access = TRUE;
      // Get default value for ready field, if published need to be ready!
      if ($form['#node']->status == 1) {
        $default = 1;
      }
      // If ready.
      elseif (isset($form['#node']->ready)) {
        $default = $form['#node']->ready;
      }
      // If default settings.
      elseif (in_array('ready', variable_get('node_options_' . $form['#node']->type, array()))) {
        $default = 1;
      }
      // Default is published.
      elseif (in_array('status', variable_get('node_options_' . $form['#node']->type, array()))) {
        $default = 1;
      }
      else {
        $default = 0;
      }
      // Build field.
      $form['options']['ready'] = array(
        '#type' => 'checkbox',
        '#title' => t('Ready'),
        '#default_value' => $default,
        // Top of checkboxes.
        '#weight' => -99,
      );
    }
    // Add fieldset access.
    $form['options']['#access'] = $access;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add ready information on node admin page.
 */
function simple_workflow_form_node_admin_content_alter(&$form, $form_state) {
  if (!empty($form['admin']['nodes'])) {
    foreach ($form['admin']['nodes']['#options'] as $nid => $values) {
      // Query ready state from database.
      $ready = db_query("SELECT ready FROM {node} WHERE nid = :nid", array(':nid' => $nid))->fetchField();
      if ($ready == 1) {
        $ready = t('ready');
      }
      else {
        $ready = t('not ready');
      }
      $form['admin']['nodes']['#options'][$nid]['status'] = $form['admin']['nodes']['#options'][$nid]['status'] . ' (' . $ready . ')';
    }
  }
}

/**
 * Implements hook_node_submit().
 */
function simple_workflow_node_submit($node, $form, &$form_state) {
  // If published is checked, so ready need to be.
  if (isset($form_state['values']['status']) && $form_state['values']['status'] == 1) {
    $form_state['values']['ready'] = 1;
  }
}

/**
 * Implements hook_permission().
 */
function simple_workflow_permission() {
  $perms = array();
  // Generate node permissions for all applicable node types.
  foreach (node_permissions_get_configured_types() as $type) {
    $info = node_type_get_type($type);
    $perms_options = array('ready', 'status', 'sticky', 'promote');
    foreach ($perms_options as $perm) {
      $perms += array(
        "set $type $perm" => array(
          'title' => t('%type_name: Set !perm', array('%type_name' => $info->name, '!perm' => $perm)),
        ),
      );
    }
  }
  return $perms;
}

/**
 * Implements hook_node_presave().
 */
function simple_workflow_node_presave($node) {
  // If published, so has to be ready!
  if ($node->status == 1) {
    $node->ready = 1;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function simple_workflow_preprocess_node(&$variables) {
  // Add $ready variable as boolean.
  $variables['ready'] = ($variables['ready']) ? TRUE : FALSE;
  // Add ready class.
  if ($variables['ready']) {
    $variables['classes_array'][] = 'node-ready';
  }
  else {
    $variables['classes_array'][] = 'node-notready';
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Add add content link on our custom admin content view.
 */
function simple_workflow_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $view = views_get_view('administer_content');
  if (isset($view->display['page']->display_options['path'])) {
    switch ($root_path) {
      case $view->display['page']->display_options['path']:
        $item = menu_get_item('node/add');
        if ($item['access']) {
          $data['actions']['output'][] = array(
            '#theme' => 'menu_local_action',
            '#link' => $item,
          );
        }
        break;
    }
  }
}

/**
 * Implements hook_views_api().
 *
 * This tells drupal that there is Views integration file named
 * simple_workflow.views.inc
 */
function simple_workflow_views_api() {
  return array(
    'api' => 3,
  );
}
