<?php
/**
 * @file
 * Defines a checkout pane that lets customers specify their VAT number
 * This is required for stores that sell to professionals in the European Union
 *
 * @author
 * Aaron Craig <aaron@evolving-design.com>
 *
 * This is a port of the original module to Drupal 7
 *
 * =================================================================
 *
 * Changes D6 -> D7
 *
 * This port maintains most of the original code (with updates as necessary due to changes
 * in the Drupal API), with the following exceptions
 *
 * The uc_vat_number table has been removed, since the original D6 version stores VAT numbers
 * used for orders in uc_order.data, and seemed to not use the uc_vat_number table at all.
 *
 * All settings for the module have been united in a single form, which is accessible under
 * Store > Configuration > Taxes > VAT Number Settings.
 *
 * If the store administrator checks the SOAP verification box on the configuration page and
 * inserts their own VAT number, that number is also verified using the SOAP service.
 *
 * The SOAP client has been changed to WS Client (http://drupal.org/project/wsclient) as the
 * module used by the D6 version does not have a D7 version available.
 *
 * In the original D6 version, an administrator may change the VAT number of an order on the order
 * edit page without that number be checked against the SOAP service.  This behavior has remained
 * in the D7 version.
 *
 * A dependency has been added.  UC VAT (http://drupal.org/project/uc_vat) is now a required
 * module.  There's no reason to have two modules declaring which countries are European states,
 * and it's unlikely that one module would ever be used without the other, as any European commerce
 * site will need both.
 */


/*******************************************************************************
 * Hook Functions
 ******************************************************************************/


/**
 * Implementation of hook_permission()
 */
function uc_vat_number_permission() {
  return array(
    'administer VAT number settings' => array(
      'title' => t('Administer VAT number settings'),
      'description' => t('Allow the user to configure how VAT numbers are managed in the store.')
    )
  );
}

/**
 * Implementation of hook_menu().
 */
function uc_vat_number_menu()
{
 $items['admin/store/settings/taxes/vat_number'] = array(
    'title'             => 'VAT number settings',
    'description'       => 'Basic settings for VAT-number requirement.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('uc_vat_number_settings'),
    'access arguments'  => array('administer VAT number settings'),
    'type'              => MENU_LOCAL_TASK,
  );

  $items['uc_vat_number/vat_autocomplete'] = array(
    'title'            => t('VAT number autocomplete callback'),
    'page callback'    => 'uc_vat_number_vat_autocomplete',
    'access arguments' => array('access content'),
    'type'             => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Module settings
 */
function uc_vat_number_settings() {
  $form['uc_store_vat_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Store VAT number'),
    '#description' => t('Your VAT number, this number must be displayed in your invoices.'),
    '#default_value' => variable_get('uc_store_vat_number', ''),
    '#size' => 32,
    '#maxlength' => 64
  );

  $form['uc_store_vat_number_soap'] = array(
      '#type' => 'checkbox',
      '#title' => t('Check the validity on the customer VAT Number via <a href="http://ec.europa.eu/taxation_customs/taxation/vat/traders/vat_number/index_en.htm">Europa VAT Number validation webservice</a>'),
      '#default_value' => variable_get('uc_store_vat_number_soap', true),
  );

  $form['vat_roles'] = array(
    '#type' => 'fieldset',
    '#title' => t('Require VAT number by role'),
    '#collapsed' => FALSE,
    '#collapsible' => FALSE,
  );

   $form['vat_roles']['uc_vat_number_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Roles'),
    '#default_value' => variable_get('uc_vat_number_roles', array()),
    '#description' => t('Select roles required to enter a VAT number.'),
    '#options' => user_roles(),
  );

  $form['#validate'] = array('uc_vat_number_settings_validate');

  return system_settings_form($form);
}

function uc_vat_number_settings_validate($form, $form_values) {
  if ($form_values['values']['uc_store_vat_number_soap'] && !empty($form_values['values']['uc_store_vat_number'])) {
    if (!uc_vat_number_validate_vat($form_values['values']['uc_store_vat_number'])) {
      form_set_error('uc_store_vat_number_soap', uc_vat_number_validation_error_message());
    }
  }
}

/**
 * Implementation of hook_order_pane()
 */
function uc_vat_number_uc_order_pane() {
  // Add a pane to the order edit/view pages with VAT numbers
  $panes['vat_number'] = array(
    'callback' => 'uc_vat_number_order_pane_callback',
    'title'    => t('VAT number'),
    'desc'     => t('Show store and customer VAT numbers.'),
    'class'    => 'pos-left',
    'weight'   => 3,
    'show'     => array('view', 'customer', 'edit'),
  );

  return $panes;
}

/**
 * VAT number order pane callback
 */
function uc_vat_number_order_pane_callback($op, $order, &$form = NULL, &$form_state = NULL) {
  $vat_number = isset($order->data["vat_number"])? $order->data["vat_number"] : '';

  switch ($op) {

    case 'view':
    case 'customer':
      return array('#markup' => $vat_number);

    case 'edit-form':
      $form['vat_number'] = array(
        '#type'           => 'textfield',
        '#title'          => t('VAT Number'),
        '#description'    => t('Required for professional customers in EU (eg: BE 0123.456.789).'),
        '#size'           => 32,
        '#maxlength'      => 32,
        '#default_value'  => $vat_number
      );

      return $form;

    case 'edit-theme':
      return drupal_render($form['vat_number']);

    case 'edit-process':
      $vat_new = $form_state['values']['vat_number'];
      $data = $order->data;

      $data['vat_number'] = $vat_new;
      return array('data' => $data);
  }
}

/**
 * Implementation of hook_uc_checkout_pane()
 */
function uc_vat_number_uc_checkout_pane() {
  $panes['vat_number_pane'] = array(
    'callback'  => 'uc_vat_number_checkout_pane',
    'title'     => t('VAT Number'),
    'desc'      => t("Collect a VAT number"),
    'weight'    => 5
  );

  return $panes;
}

/**
 * VAT number checkout pane callback
 */
function uc_vat_number_checkout_pane($op, $order, $form = NULL, &$form_state = NULL) {
  switch ($op) {
    case 'view':
      $description = t("Enter your VAT number if applicable.");

      drupal_add_js(drupal_get_path('module', 'uc_vat_number') .'/uc_vat_number.js');
      drupal_add_js('UCVatNumber.european_countries = ' . json_encode(uc_vat_number_european_countries()) . ';', 'inline');

      $contents['vat_number'] = array(
        '#type'           => 'textfield',
        '#title'          => t('VAT Number'),
        '#description'    => t('Required for professional customers in EU (eg: BE 0123.456.789).'),
        '#size'           => 32,
        '#maxlength'      => 32,
        '#required'       => _uc_vat_number_required(),
        '#default_value'  => isset($order->data['vat_number'])? $order->data['vat_number'] : '',
        '#autocomplete_path' => 'uc_vat_number/vat_autocomplete',
      );

      return array('description' => $description, 'contents' => $contents);

    case "process":
      // Save VAT number from checkout pane
      $order->data['vat_number'] = $form_state['values']['panes']['vat_number_pane']['vat_number'];
      break;

    case "review":
      // Show VAT number on checkout review
      if (isset($order->data['vat_number'])) {
        $review[] = array('title' => t('Your VAT Number'), 'data' => $order->data['vat_number']);
        $review[] = array('title' => t('Our VAT Number'), 'data' => variable_get('uc_store_vat_number', ''));
        return $review;
      }
  }

  return NULL;
}

function uc_vat_number_vat_autocomplete($string) {
  global $user;

  $matches = array();
  if ($user->uid) {
    $result = db_select("uc_orders", 'uco')
      ->fields('uco', array('data'))
      ->condition('uid', $user->uid)
      ->execute();

    foreach ($result as $row) {
      $data = unserialize($row->data);
      if ($data['vat_number']) {
        $matches[check_plain($data['vat_number'])] = check_plain($data['vat_number']);
      }
    }

    ksort($matches);
  }

  drupal_json_output($matches);
  exit;
}

/**
 * Implementation of hook_token_values(). (token.module)
 */
function uc_vat_number_token_values($type, $object = NULL, $options = array()) {
  $values = array();

  switch ($type) {
    case 'global':
      $values['store-vat-number'] = variable_get('uc_store_vat_number', t('Your store VAT number'));
      break;

    case 'order':
      $order = $object;
      $values['order-vat-number'] = $order->data['vat_number'];
      break;

  }

  return $values;
}

/**
 * Implementation of hook_token_list(). (token.module)
 */
function uc_vat_number_token_list($type = 'all') {
  $tokens['global']['store-vat-number'] = t('Your store VAT number.');
  if ($type == 'order' || $type == 'ubercart' || $type == 'all') {
    $tokens['order']['order-vat-number'] = t('The VAT number of the customer.');
  }
  return $tokens;
}

/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/
function uc_vat_number_form_uc_cart_checkout_form_alter(&$form, &$form_state) {
  $form['#validate'][] = 'uc_vat_number_checkout_validate';
}

function uc_vat_number_checkout_validate($form, $form_state) {
  $values = $form_state['values']['panes'];
  $vat_number = (empty($values['vat_number_pane']['vat_number']))? '' : $values['vat_number_pane']['vat_number'];

  if ($vat_number) {
    // always validate a VAT number if it's been provided
    // and the SOAP service is active
    if (variable_get('uc_store_vat_number_soap', true)) {
      if (!uc_vat_number_validate_vat($vat_number)) {
        form_set_error('panes][vat_number][vat_number', uc_vat_number_validation_error_message());
      }
    }
  }
  else {
    // if a VAT number is required, complain
    if (_uc_vat_number_required()) {
      form_set_error('panes][billing][vat_number', t('VAT Number field is required.'));
    }
  }
}

function uc_vat_number_validate_vat($vat_number) {
  global $user;

  $vat_number = strtoupper(preg_replace('/[ .]/', '', $vat_number));
  $country    = substr($vat_number, 0, 2);
  $number     = substr($vat_number, 2);

  if(!preg_match('/^[A-Z]{2}$/', $country) or !preg_match('/^[0-9A-Z+*]+$/', $number)) {
    return FALSE;
  }

  $test = db_query("
    SELECT
      vat_number
    FROM
      {uc_vat_validation}
    WHERE
      vat_number = :vat_number
      AND
      fetched > UNIX_TIMESTAMP(NOW()) - 86400
  ", array(':vat_number' => $vat_number))
    ->fetchCol();
  if ($test) {
    return TRUE;
  }

  $service = wsclient_service_load('vies');

  $params = array('countryCode' => $country, 'vatNumber' => $number);
  $valid  = FALSE;
  try {
    $result = $service->checkVat($params);
    $valid  = $result->valid;
  }
  catch (WSClientException $e) {
    watchdog('uc_vat_number', 'Error contacting VAT verification service: @error', array('@error' => $e->__toString()), WATCHDOG_ERROR);
  }

  if ($valid) {
    db_insert('uc_vat_validation')
      ->fields(array(
        'vat_number'  => $vat_number,
        'fetched'     => time(),
        'response'    => serialize($result)
      ))
      ->execute();
  }

  return $valid;
}

/**
 * Implements hook_default_wsclient_service().
 */
function uc_vat_number_default_wsclient_service() {
  $services = array();

  $service = new WSClientServiceDescription();
  $service->name  = 'vies';
  $service->label = 'Vies VAT SOAP validation service';
  $service->url   = 'http://ec.europa.eu/taxation_customs/vies/checkVatService.wsdl';
  $service->type  = 'soap';
  try {
    $service->endpoint()->initializeMetaData();
    $services[$service->name] = $service;
  }
  catch (WSClientException $e) {
    watchdog('wsclient', $e->__toString());
  }

  return $services;
}

/*******************************************************************************
 * Helper functions
 ******************************************************************************/
/**
 * Get an array of country codes that correspond to European countries
 *
 * @return
 * An array of integers
 */
function uc_vat_number_european_countries() {
  // steal EU country list from uc_vat
  module_load_include('inc', 'uc_vat', 'uc_vat.rules');
  return uc_vat_eu_countries();

}

/**
 * Indicate whether a vat number is required due to the user's role
 *
 * @return
 * Boolean
 */
function _uc_vat_number_required() {
  global $user;

  // User 1 is never restricted
  if($user->uid == 1) {
    return FALSE;
  }

  // Retrieve the variable and remove the roles with no requirement
  $roles = array_flip(variable_get('uc_vat_number_roles', array()));

  foreach ($user->roles as $rid => $name) {
    if (in_array($rid, $roles)) {
      return TRUE;
    }
  }

  return FALSE;
}

function uc_vat_number_validation_error_message() {
  return t('Your VAT number does not validate.  Please check the format (should be XXnnnnnnnnnnnn where XX is your country identifier and nnn is the VAT number) and that you have entered the number correctly. !vies_link', array('!vies_link' => l(t("You may also want to validate the number manually."), 'http://ec.europa.eu/taxation_customs/vies/vieshome.do')));
}
