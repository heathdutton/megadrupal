<?php

/**
 * @file
 * Data integrity checker module.
 */

/**
 * Implements hook_menu().
 */
function di_checker_menu() {
  $items['admin/reports/di'] = array(
    'title' => 'Data integrity',
    'description' => 'Data integrity report.',
    'page callback' => 'di_checker_report_page',
    'access arguments' => array('access site reports'),
    'file' => 'di_checker.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_di_checker_info().
 */
function di_checker_di_checker_info() {
  $output = '';

  $schema = drupal_get_schema();

  // Add missing foreign key for node table.
  $schema['node']['foreign keys']['node_type'] = array(
    'table' => 'node_type',
    'columns' => array('type' => 'type'),
  );

  // Remove node access as it could be rebuilt.
  unset($schema['node_access']);

  foreach ($schema as $name => $table) {
    if (!empty($table['foreign keys'])) {
      foreach ($table['foreign keys'] as $foreign_key) {
        foreach ($foreign_key['columns'] as $s_column => $r_column) {

          // Additional check for existence of tables and fields
          // to prevent fatal errors.
          if (!db_table_exists($foreign_key['table']) ||
              !db_table_exists($name) ||
              !db_field_exists($foreign_key['table'], $r_column) ||
              !db_field_exists($name, $s_column)) {
            continue;
          }

          $subquery = db_select($foreign_key['table'], 'ft')
            ->fields('ft', array($r_column));

          $result = db_select($name, 'ct')
            ->fields('ct')
            ->condition('ct.' . $s_column, $subquery, 'NOT IN')
            ->execute();

          if ($result->rowCount()) {
            $output .= t('Rows from %name where foreign key %souce_column has not equivalent primary key %referenced_column from %referenced_table table:', array(
              '%name' => $name,
              '%souce_column' => $s_column,
              '%referenced_column' => $r_column,
              '%referenced_table' => $foreign_key['table'],
            ));
            $fields = array();
            foreach ($table['fields'] as $field_name => $field_data) {
              if (($field_data['type'] != 'blob') && empty($field_data['serialize'])) {
                $fields[] = $field_name;
              }
            }

            $rows = array();
            foreach ($result as $row) {
              $cur_row = array();
              foreach ($fields as $field) {
                $cur_row[] = $row->{$field};
              }
              $rows[] = $cur_row;
            }

            $output .= theme('table', array('header' => $fields, 'rows' => $rows));
          }
        }
      }
    }
  }

  if (!empty($output)) {
    return array(
      'di_checker' => array(
        'title' => t('Data integrity checker'),
        'markup' => $output,
      ),
    );
  }
}
