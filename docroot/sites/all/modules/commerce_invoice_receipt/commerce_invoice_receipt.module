<?php

/**
 * @file
 * Provides a printable invoice receipt along with HTML mailing rules.
 */

/**
 * Implements hook_menu().
 */
function commerce_invoice_receipt_menu() {
  $items = array();
  
  $items['admin/commerce/orders/%commerce_order/view/print'] = array(
    'title' => 'Print',
    'page callback' => 'commerce_invoice_receipt_view_print',
    'page arguments' => array(3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('view', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'parent' => 'admin/commerce/orders/%commerce_order',
    'file' => 'includes/commerce_invoice_receipt.admin.inc',
  );
  
  $items['admin/commerce/orders/%commerce_order/view/mail'] = array(
    'title' => 'Email',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_invoice_receipt_mail_form', 3),
    'access callback' => 'commerce_order_access',
    'access arguments' => array('view', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'parent' => 'admin/commerce/orders/%commerce_order',
    'file' => 'includes/commerce_invoice_receipt.admin.inc',
  );
  
  $items['user/%user/orders/%commerce_order/print'] = array(
    'title' => 'Printable Invoice',
    'page callback' => 'commerce_invoice_receipt_view_print',
    'page arguments' => array(3),
    'access callback' => 'commerce_order_customer_order_view_access',
    'access arguments' => array(3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'includes/commerce_invoice_receipt.admin.inc',
  );
  
  $items['user/%user/orders/%commerce_order/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  
  return $items;
}

function commerce_invoice_reciept_css_path(){
  // Get current default theme
  $default_theme_path = drupal_get_path('theme', variable_get('theme_default', NULL));
  $default_template_css = drupal_get_path('module', 'commerce_invoice_receipt') . '/theme/commerce_invoice_receipt.css';
  
  // Check commerce_invoice_receipt.css is in the current theme
  if (file_exists($default_theme_path.'/invoice/commerce_invoice_receipt.css')) {    
   $default_template_css = $default_theme_path.'/invoice/commerce_invoice_receipt.css';
  } 
  elseif (file_exists($default_theme_path.'/css/commerce_invoice_receipt.css')) {
   $default_template_css = $default_theme_path.'/css/commerce_invoice_receipt.css';
  }
  return $default_template_css;
}

function commerce_invoice_receipt_view_print($order, $view_mode = 'invoice', $breadcrumb = TRUE) {
  
  $styles[] = array(
    'type' => 'file',
    'media' => 'all',
    'data' => commerce_invoice_reciept_css_path(),
    'group' => CSS_DEFAULT,
    'every_page' => FALSE,
    'weight' => 0,
    'preprocess' => FALSE,
    'browsers' => array(),
  );
  $html = drupal_get_css($styles);
  
  $build = entity_view('commerce_order', array($order->order_id => $order), $view_mode, NULL, TRUE);
  
  $invoice_info = _commerce_invoice_receipt_get_invoice_info($order, $build);
  
  $html .= theme('commerce_order_invoice_view', array('info' => $invoice_info, 'order' => $order));
  
  print _emogrifier_process($html, NULL, NULL, NULL, NULL, NULL);
}

/**
 * Implements hook_entity_info_alter().
 */
function commerce_invoice_receipt_entity_info_alter(&$entity_info) {
  $entity_info['commerce_order']['view modes']['invoice'] = array(
    'label' => t('Invoice/Receipt'),
    'custom settings' => TRUE,
  );
}

/**
* Implements hook_theme().
*/
function commerce_invoice_receipt_theme() {
  // Get current default theme
  $default_theme_path = drupal_get_path('theme', variable_get('theme_default', NULL));
  $default_template_path = drupal_get_path('module', 'commerce_invoice_receipt') . '/theme';

  // Check commerce-order-invoice-view.tpl.php is in the current theme
  if (file_exists($default_theme_path.'/invoice/commerce-order-invoice-view.tpl.php')) { 
    $default_template_path = $default_theme_path.'/invoice/';
  } 
  elseif (file_exists($default_theme_path.'/templates/commerce-order-invoice-view.tpl.php')) {
    $default_template_path = $default_theme_path.'/templates/';
  }
  return array(
    'commerce_order_invoice_view' => array(
      'variables' => array('info' => NULL, 'order' => NULL),
      'path' => $default_template_path,
      'template' => 'commerce-order-invoice-view',
    ),
  );
}

/**
* Implements hook_mail().
*/
function commerce_invoice_receipt_mail($key, &$message, $params) {
  $langcode = isset($message['language']) ? $message['language']->language : NULL;
  $options = array(
    'langcode' => $langcode,
    'context' => '',
  );
  
  switch ($key) {
    // Setup an e-mailed invoice.
    case 'invoice':  
      $styles[] = array(
        'type' => 'file',
        'media' => 'all',
        'data' => commerce_invoice_reciept_css_path(),
        'group' => CSS_DEFAULT,
        'every_page' => FALSE,
        'weight' => 0,
        'preprocess' => FALSE,
        'browsers' => array(),
      );
      $html = drupal_get_css($styles);
      
      $build = entity_view('commerce_order', array($params['order']->order_id => $params['order']), 'invoice', NULL, TRUE);
      $invoice_info = _commerce_invoice_receipt_get_invoice_info($params['order'], $build);
      
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed;';
      $message['subject'] = isset($params['subject']) ? $params['subject'] : t('Your Order Invoice', array(), $options);
      
      $html .= theme('commerce_order_invoice_view', array('info' => $invoice_info, 'order' => $params['order']));
      
      $message['body'][] = _emogrifier_process($html, NULL, NULL, NULL, NULL, NULL);
      break;
  }
}

/**
 * Implements hook_rules_action_info().
 */
function commerce_invoice_receipt_rules_action_info() {
  return array(
    'commerce_invoice_receipt_action_mail' => array(
      'label' => t('Send invoice receipt email'),
      'group' => t('Commerce Order'),
      'parameter' => array(
        'commerce_order' => array(
          'type' => 'commerce_order',
          'label' => t('Order'),
          'description' => t('The order whose line items should be checked for the specified product. If the specified order does not exist, the comparison will act as if it is against a quantity of 0.'),
        ),
        'to' => array(
          'type' => 'text',
          'label' => t('To'),
          'description' => t('The e-mail address or addresses where the message will be sent to. The formatting of this string must comply with RFC 2822. Separate multiple addresses with a comma.'),
          'default value' => '[commerce-order:owner] <[commerce-order:mail]>',
        ),
        'subject' => array(
          'type' => 'text',
          'label' => t('Subject'),
          'description' => t("The mail's subject."),
          'default value' => t("!site_name: Order #!order_id", array('!site_name' => '[site:name]', '!order_id' => '[commerce-order:order-id]')),
        ),
        'from' => array(
          'type' => 'text',
          'label' => t('From'),
          'description' => t("The mail's from address. Leave it empty to use the site-wide configured address."),
          'optional' => TRUE,
          'default value' => '[site:name] <[site:mail]>',
        ),
      ),
      'callbacks' => array(
        'execute' => 'commerce_invoice_receipt_action_mail',
      ),
    ),
  );
}

function commerce_invoice_receipt_action_mail($order, $to, $subject, $from = NULL) {
  $to = str_replace(array("\r", "\n"), '', $to);
  $from = !empty($from) ? str_replace(array("\r", "\n"), '', $from) : NULL;
  
  $recipients = explode(',', $to);
  
  $params = array(
    'subject' => $subject,
    'order' => $order,
  );
  
  $account = user_load($order->uid);
  $language = user_preferred_language($account);
  
  foreach ($recipients as $recipient) {
    if ($recipient == '') continue;
    $message = drupal_mail('commerce_invoice_receipt', 'invoice', $recipient, $language, $params, $from);
    
    if ($message['result']) {
      watchdog('rules', 'Successfully sent email to %recipient', array('%recipient' => $recipient));
    }
  }
}

/**
 * Generate an array for rendering all the invoice info.
 */
function _commerce_invoice_receipt_get_invoice_info($order, $build) {
  $info = array(
    'order_uid' => $order->uid,
    'order_created' => $order->created,
    'order_changed' => $order->changed,
    'order_number' => $order->order_number,
    'order_mail' => $order->mail,
    'order_status' => $order->status,
		'site_logo'	=> theme_get_setting('logo'),
  );
  
  if (isset($build['commerce_order'][$order->order_id]['commerce_customer_shipping'])) {
    $info['customer_shipping'] = $build['commerce_order'][$order->order_id]['commerce_customer_shipping'][0]['#markup'];
  }
  
  if (isset($build['commerce_order'][$order->order_id]['commerce_customer_billing'][0]['#markup'])) {
    $info['customer_billing'] = $build['commerce_order'][$order->order_id]['commerce_customer_billing'][0]['#markup'];
  }
  
  if (isset($build['commerce_order'][$order->order_id]['commerce_line_items'])) {
    $info['line_items'] = $build['commerce_order'][$order->order_id]['commerce_line_items'][0]['#markup'];
  }
  
  if (isset($build['commerce_order'][$order->order_id]['commerce_order_total'])) {
    $info['order_total'] = $build['commerce_order'][$order->order_id]['commerce_order_total'][0]['#markup'];
  }
  
  return $info;
}
