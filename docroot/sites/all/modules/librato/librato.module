<?php
/**
 * @file
 * Librato general module file.
 */

/**
 * Implements hook_menu().
 */
function librato_menu() {
  $items = array();

  $items['admin/config/system/librato'] = array(
    'title' => 'Librato',
    'description' => 'Configure tracking and statics with librato.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('librato_admin_settings_form'),
    'access arguments' => array('administer librato'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'librato.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function librato_permission() {
  return array(
    'administer librato' => array(
      'title' => t('Administer librato settings'),
      'description' => t('Cofig details for submitting statics to librato'),
    ),
  );
}

/**
 * Implements hook_cron().
 */
function librato_cron() {
  $last_cron_run = variable_get('librato_cron_last', REQUEST_TIME);
  if (empty($last_cron_run)) {
    $last_cron_run = 0;
  }

  $prefix = 'drupal';
  $default_source = $_SERVER['HTTP_HOST'];

  $query = db_select('librato_metric_count', 'lmc')->fields('lmc', array(
    'log_id',
    'name',
    'count',
    'last_update',
  ));
  $results = $query->execute()->fetchAll();

  if (!empty($results)) {
    foreach ($results as $row) {
      LibratoHelper::gauges($prefix . '.' . $row->name, $row->count, $default_source, REQUEST_TIME);
      db_update('librato_metric_count')
        ->fields(array('last_update' => REQUEST_TIME, 'count' => 0))
        ->condition('log_id', $row->log_id, '=')
        ->execute();
    }
  }

  $report_php_errors = variable_get('librato_config_report_php_errors', 1);
  if (!empty($report_php_errors) and $report_php_errors == 1) {
    $watchdog_info = db_query("SELECT count(wid) as ialt FROM {watchdog} WHERE type='php' and timestamp>=:last_run", array(
      ':last_run' => $last_cron_run,
    ))->fetchAssoc();
    LibratoHelper::counters($prefix . '.watchdog.errors.php', (!empty($watchdog_info['ialt']) ? $watchdog_info['ialt'] : 0), $default_source, REQUEST_TIME);
  }

  /*
   * Allow other modules to add custome gauge counters
   */
  if (count(module_implements('librato_add_gauges')) > 0) {
    $gauges = array();
    $tmp_gauge_counters = module_invoke_all('librato_add_gauges', $gauges, $last_cron_run);
    if (!empty($tmp_gauge_counters) and is_array($tmp_gauge_counters)) {
      foreach ($tmp_gauge_counters as $row_count) {
        if (!is_object($row_count)) {
          $row_count = (object) $row_count;
        }

        if (!empty($row_count) and is_object($row_count) and !empty($row_count->name)) {
          $row_count->name = _librato_check_format($row_count->name);
          if (!empty($row_count->name)) {
            LibratoHelper::gauges($prefix . '.' . $row_count->name, (!empty($row_count->count) ? $row_count->count : 0), $default_source, REQUEST_TIME);
          }
        }
      }
    }
  }

  /*
   * Allow other modules to add custome counters
   */
  if (count(module_implements('librato_add_counter')) > 0) {
    $counters = array();
    $tmp_counters = module_invoke_all('librato_add_counter', $counters, $last_cron_run);
    if (!empty($tmp_counters) and is_array($tmp_counters)) {

      foreach ($tmp_counters as $row_count) {
        if (!is_object($row_count)) {
          $row_count = (object) $row_count;
        }

        if (!empty($row_count) and is_object($row_count) and !empty($row_count->name)) {
          $row_count->name = _librato_check_format($row_count->name);
          if (!empty($row_count->name)) {
            LibratoHelper::counters($prefix . '.' . $row_count->name, (!empty($row_count->count) ? $row_count->count : 0), $default_source, REQUEST_TIME);
          }
        }
      }
    }
  }

  LibratoHelper::send();
  variable_set('librato_cron_last', REQUEST_TIME);
}

/**
 * Clean the string to fit the requirements.
 *
 * @param string $name
 *   The string to be formated.
 */
function _librato_check_format($name = '') {
  if (!empty($name)) {
    $name = strtolower($name);
    $name = trim(str_replace(' ', '.', $name));
    $name = preg_replace('|(?mi-Us)([^a-zA-Z.])|', '', $name);
  }

  return (!empty($name) ? $name : '');
}

/**
 * Add incremental count based on rule when added to rule action.
 *
 * @param string $name
 *   The name of the given service to be listed in librato.
 */
function librato_add_incremental_count($name = '') {
  if (!empty($name)) {
    $name = _librato_check_format($name);
    if (!empty($name)) {
      LibratoHelper::count($name);
    }
  }
}

/**
 * Add count based on rule with selected value.
 *
 * @param string $name
 *   The name of the given service to be listed in librato.
 *
 * @param int $value
 *   The value of the count.
 */
function librato_add_count_with_value($name = '', $value = 0) {
  if (!empty($name)) {
    $name = _librato_check_format($name);
    if (!empty($name)) {
      LibratoHelper::count($name, ((!empty($value) and is_numeric($value)) ? $value : 0));
    }
  }
}
