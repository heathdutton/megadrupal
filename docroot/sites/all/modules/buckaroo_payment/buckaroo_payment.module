<?php

/**
 * @file
 * Provides Buckaroo integration for the Payment platform.
 */

define('BUCKAROO_PAYMENT_TEST_URL', 'https://testcheckout.buckaroo.nl/html/');
define('BUCKAROO_PAYMENT_PROD_URL', 'https://checkout.buckaroo.nl/html/');
define('BUCKAROO_PAYMENT_RETURN_PATH', 'payment/buckaroo/return');
define('BUCKAROO_PAYMENT_PUSH_PATH', 'payment/buckaroo/push');

/**
 * Implements hook_menu().
 */
function buckaroo_payment_menu() {
  $items = array();

  $items[BUCKAROO_PAYMENT_RETURN_PATH] = array(
    'page callback' => 'buckaroo_payment_return',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items[BUCKAROO_PAYMENT_PUSH_PATH] = array(
    'page callback' => 'buckaroo_payment_push',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['payment/buckaroo/form/%/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('buckaroo_payment_form', 3, 4),
    'access callback' => 'buckaroo_payment_access',
    'access arguments' => array(3, 4),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_payment_method_controller_info().
 */
function buckaroo_payment_payment_method_controller_info() {
  return array('BuckarooPaymentMethodController');
}

/**
 * Implements hook_entity_load().
 */
function buckaroo_payment_entity_load(array $entities, $entity_type) {
  if ($entity_type == 'payment_method') {
    foreach ($entities as $payment_method) {
      if ($payment_method->controller->name == 'BuckarooPaymentMethodController') {
        $payment_method->controller_data
                = variable_get('buckaroo_payment_' . $payment_method->pmid . '_controller_data', array());
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function buckaroo_payment_payment_method_insert(PaymentMethod $payment_method) {
  if ($payment_method->controller->name == 'BuckarooPaymentMethodController') {
    variable_set('buckaroo_payment_' . $payment_method->pmid . '_controller_data',
            $payment_method->controller_data);
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function buckaroo_payment_payment_method_update(PaymentMethod $payment_method) {
  if ($payment_method->controller->name == 'BuckarooPaymentMethodController') {
    variable_set('buckaroo_payment_' . $payment_method->pmid . '_controller_data',
            $payment_method->controller_data);
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function buckaroo_payment_payment_method_delete(PaymentMethod $payment_method) {
  if ($payment_method->controller->name == 'BuckarooPaymentMethodController') {
    variable_del('buckaroo_payment_' . $payment_method->pmid . '_controller_data');
  }
}

/**
 * Return callback.
 *
 * @param string $pid
 *   The id of the payment.
 */
function buckaroo_payment_return($pid) {
  /*
   * @todo Change to Buckaroo implementation.
   */

  // Get data posted by Buckaroo.
  $data = drupal_get_query_parameters($_POST);

  // Access check.
  $payment_id = $data['BRQ_INVOICENUMBER'];
  if ($payment_id != $pid) {
    drupal_set_message(t('Return url is not valid.'), 'error');
    return MENU_ACCESS_DENIED;
  }

  // Load the payment.
  $payment = entity_load_single('payment', $pid);

  $controller_data = $payment->method->controller_data;

  // Get settings from controller data.
  $secret_key = $controller_data['buckaroo_secret'];
  $encryption = $controller_data['buckaroo_encryption'];

  // Second access check.
  $brq_signature = $data['BRQ_SIGNATURE'];
  unset($data['BRQ_SIGNATURE']);
  $check_signature = $payment->method->controller->generate_signature($data,
          $secret_key, $encryption);
  if ($brq_signature != $check_signature) {
    return MENU_ACCESS_DENIED;
  }

  $payment_status = $payment->method->controller->status($data['BRQ_STATUSCODE']);
  $payment->setStatus(new PaymentStatusItem($payment_status));
  entity_save('payment', $payment);

  // Finish the payment.
  $payment->finish();

  // Set status message.
  $view = '';
  if (payment_access('view', $payment)) {
    $view = ' ' . l(t('View payment'), 'payment/' . $payment->pid) . '.';
  }
  if (payment_status_is_or_has_ancestor($payment->getStatus()->status, PAYMENT_STATUS_PENDING)) {
    drupal_set_message(t('Your payment is still being processed.') . $view);
  }
  elseif (payment_status_is_or_has_ancestor($payment->getStatus()->status, PAYMENT_STATUS_SUCCESS)) {
    drupal_set_message(t('Your payment was successfully completed.') . $view);
  }
  elseif (payment_status_is_or_has_ancestor($payment->getStatus()->status, PAYMENT_STATUS_FAILED)) {
    drupal_set_message(t('Your payment failed.') . $view);
  }

  if (isset($payment->context_data['entity_type']) && isset($payment->context_data['entity_id'])) {
    $entity = entity_load_single($payment->context_data['entity_type'], $payment->context_data['entity_id']);
    if ($uri = entity_uri($payment->context_data['entity_type'], $entity)) {
      drupal_goto($uri['path'], $uri['options']);
    }
  }
  drupal_goto('<front>');
}

/**
 * Push callback.
 *
 * @param string $pid
 *   The id of the payment.
 */
function buckaroo_payment_push($pid) {
  // Get data posted by Buckaroo.
  $data = drupal_get_query_parameters($_POST);

  // Access check.
  $payment_id = $data['BRQ_INVOICENUMBER'];
  if ($payment_id != $pid) {
    return MENU_ACCESS_DENIED;
  }

  // Load the payment.
  $payment = entity_load_single('payment', $pid);

  $controller_data = $payment->method->controller_data;

  // Get settings from controller data.
  $secret_key = $controller_data['buckaroo_secret'];
  $encryption = $controller_data['buckaroo_encryption'];

  // Second access check.
  $brq_signature = $data['BRQ_SIGNATURE'];
  unset($data['BRQ_SIGNATURE']);
  $check_signature = $payment->method->controller->generate_signature($data,
          $secret_key, $encryption);
  if ($brq_signature != $check_signature) {
    return MENU_ACCESS_DENIED;
  }

  $payment_status = $payment->method->controller->status($data['BRQ_STATUSCODE']);
  $payment->setStatus(new PaymentStatusItem($payment_status));
  entity_save('payment', $payment);
}

/**
 * Payment method configuration form elements callback.
 *
 * @param array $form
 * @param array $form_state
 * @return array
 *   A Drupal form array.
 */
function buckaroo_payment_method_configuration($form, &$form_state) {
  $controller_data = $form_state['payment_method']->controller_data;

  if (!is_array($form)) {
    $form = array();
  }

  $form['buckaroo_id'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Buckaroo merchant ID'),
    '#description' => t('Your Buckaroo merchant ID'),
    '#default_value' => isset($controller_data['buckaroo_id'])?$controller_data['buckaroo_id']:'',
  );
  $form['buckaroo_secret'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Buckaroo secret key'),
    '#description' => t('Your Buckaroo secret key'),
    '#default_value' => isset($controller_data['buckaroo_secret'])?$controller_data['buckaroo_secret']:'',
  );
  $form['buckaroo_mode'] = array(
    '#type' => 'select',
    '#required' => TRUE,
    '#title' => t('Buckaroo mode'),
    '#description' => t('Set to \'test\' if you want to test your integration'),
    '#options' => array(
      BUCKAROO_PAYMENT_PROD_URL => t('production'),
      BUCKAROO_PAYMENT_TEST_URL => t('test'),
    ),
    '#default_value' => isset($controller_data['buckaroo_mode'])?$controller_data['buckaroo_mode']:BUCKAROO_PAYMENT_PROD_URL,
  );
  $form['buckaroo_encryption'] = array(
    '#type' => 'select',
    '#required' => TRUE,
    '#title' => t('Encryption'),
    '#description' => t('Set the same type of encryption as used in your Buckaroo account'),
    '#options' => array(
      'bcrypt10' => 'BCRYPT10',
      'bcrypt7' => 'BCRYPT7',
      'sha1' => 'SHA1',
      'sha256' => 'SHA256',
      'sha512' => 'SHA512',
    ),
    '#default_value' => isset($controller_data['buckaroo_encryption'])?$controller_data['buckaroo_encryption']:'sha1',
  );

  return $form;
}

/**
 * Validation callback for payment method configuration form elements callback.
 *
 * @param array $form
 * @param array $form_state
 */
function buckaroo_payment_method_configuration_validate($form, &$form_state) {
  $values = drupal_array_get_nested_value($form_state['values'], $form['#parents']);

  $form_state['payment_method']->controller_data['buckaroo_id'] = $values['buckaroo_id'];
  $form_state['payment_method']->controller_data['buckaroo_secret'] = $values['buckaroo_secret'];
  $form_state['payment_method']->controller_data['buckaroo_mode'] = $values['buckaroo_mode'];
  $form_state['payment_method']->controller_data['buckaroo_encryption'] = $values['buckaroo_encryption'];
}

/**
 * @todo Write function documentation.
 */
function buckaroo_payment_access($pid, $hash) {
  $payment = entity_load_single('payment', $pid);

  $controller_data = $payment->method->controller_data;
  $secret_key = $controller_data['buckaroo_secret'];

  $check = md5($payment->pid . $secret_key);

  if ($hash != $check) {
    drupal_set_message(t('Payment url is not valid.'), 'error');
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * @todo Write function documentation.
 */
function buckaroo_payment_form($form, &$form_state, $pid, $hash) {
  $payment = entity_load_single('payment', $pid);

  $form = $payment->method->controller->form($payment, $form, $form_state);

  return $form;
}
