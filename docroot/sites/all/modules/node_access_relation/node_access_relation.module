<?php
/**
 * @file
 * The Relation ACL module.
 */

/**
 * Implements hook_node_access().
 */
function node_access_relation_node_access($node, $op, $account) {

  $relations = node_access_relation_get_relations($node);
  if (!empty($relations)) {
    foreach ($relations as $type => $rid) {
      $field_data = node_access_relation_field_settings('relation');
      if (!empty($field_data[$type])) {
        // Loop through complete set of grants here and cache.
        foreach ($field_data[$type] as $field_name => &$data) {
          if (!empty($data)) {
            // Add referenced user grants.
            $entities = entity_load('relation', $rid);
            foreach ($entities as $relation) {
              $items = field_get_items('relation', $relation, 'endpoints');
              if (!empty($items)) {

                foreach ($items as &$endpoint) {

                  if ($endpoint['entity_type'] == 'user' && $endpoint['r_index'] == 0 && $account->uid == $endpoint['entity_id']) {
                    if (array_key_exists($op, $field_data[$type]['referenced'])) {
                      if ($field_data[$type]['referenced'][$op][$op] == $op) {
                        return NODE_ACCESS_ALLOW;
                      }
                      else {
                        return NODE_ACCESS_DENY;
                      }
                    }
                  }
                  elseif ($endpoint['entity_type'] == 'node' && $endpoint['r_index'] == 0) {
                    $new_node = node_load($endpoint['entity_id']);
                    $return = node_access_relation_node_access($new_node, $op, $account);
                    return $return;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return NODE_ACCESS_IGNORE;
}


/**
 * Calculate grants for node_access_relation_node_grants().
 */
function node_access_relation_calculate_grants(&$grants, $op, $account) {
  // $current_references stores an array of node IDs for referenced nodes that
  // are currently being node_access() checked by this function, to prevent
  // recursively nested node_access() checking which causes an endless loop.
  static $current_references = array();
  // $known_node_access stores an array of results to calls to node_access()
  // for that account/op/node ID.
  static $known_node_access = array();
  // $parent_reference is set to the current reference before calling
  // node_access() so that the child iteration of this function is aware why it
  // is being called.
  static $parent_reference = NULL;
  // $child_completed is used to pass the value of $complete to the parent
  // iteration.
  static $child_completed = TRUE;
  // $complete marks whether the results of this iteration are to be considered
  // completed and therefore stored in cache. An iteration is not considered
  // complete when:
  // - Recursion occurs on the same account/reference/operation combo. This
  //   iteration will assume FALSE to prevent an endless loop, but this means
  //   the data should not be relied upon in future calls.
  // - A child iteration is not complete (because of the previous reason).
  $complete = TRUE;
  // $do_cache is similar to $complete except it doesn't affect the static
  // variable $child_completed.  $do_cache is set to FALSE when:
  // - This function is being called on behalf of a parent iteration.  The
  //   cache should be based on the parent's calculations, not this iteration.
  $do_cache = TRUE;

  // Get info about whether we need cross access checking for this $op.
  $cross_access = variable_get(
    'node_access_relation_cross_access',
    array('view' => FALSE, 'update' => FALSE, 'delete' => FALSE)
  );

  // The access operations we check on the reference nodes will either be
  // the current $op, or in situations where cross access checking is
  // needed it will be all three operations.
  if ($cross_access[$op]) {
    $operations = array('view', 'update', 'delete');
  }
  else {
    $operations = array($op);
  }

  // Track an array of node access grants, don't put them into static cache
  // until later.
  $rights = array();
  // Get a list of all Node ID values from node reference fields.
  $references = node_access_relation_get_referenced($parent_reference, $account->uid);

  if (!is_null($parent_reference)) {
    // There is a parent reference, so do not cache this run.
    $do_cache = FALSE;
  }

  // Iterate through each reference.
  foreach ($references as $reference => $uid) {
    // Alias for easier code reading.
    $known = &$known_node_access[$account->uid][$reference];
    // Flags whether we already have the data needed for an $operation.
    $needs_check = FALSE;
    // Check each $operation to see if we're missing $known data.
    foreach ($operations as $operation) {
      if (!isset($known[$operation])) {
        $needs_check = TRUE;
      }
    }

    if ($needs_check) {
      // This reference is missing $known value/s that we need, load it.
      $reference_node = node_access_relation_node_loadbypass($reference);
      if (!empty($reference_node)) {
        // Reference loaded successfully.
        // Check each $operation on the referenced node.
        foreach ($operations as $operation) {
          // Set static $parent_reference variable to reference being done.
          $parent_reference = $reference;
          if (!isset($known[$operation])) {
            // We're missing an $operation or two, proceed with calculations.
            if (!isset($current_references[$reference][$operation])) {
              // This reference isn't in the list of ancestors, add to the list.
              $current_references[$reference][$operation] = $reference;

              // We don't want static caching in node_access() to intefere.
              drupal_static_reset('node_access');

              // Check node_access() and add the result to $known data.
              $node_access = node_access($operation, $reference_node, $account);
              // If the child completed fully, or node access was granted...
              if ($child_completed || $node_access) {
                // We can rely on this information in the future.
                $known[$operation] = $node_access;
              }
              else {
                // Flag this iteration as incomplete.
                $complete = FALSE;
                // Reset static variable.
                $child_completed = TRUE;
              }
              // We're done with this reference, remove it from the list.
              unset($current_references[$reference]);
            }
            else {
              // Recursion, assume FALSE.
              $complete = FALSE;
              $node_access = FALSE;
            }
          }
          else {
            // Grab the value from known data.
            $node_access = $known[$operation];
          }
          // Check if the node_access() return value is TRUE.
          if ($node_access) {
            // Add the reference as a grant on the relevant realm.
            $rights['node_access_relation_' . $operation][] = $reference;
            break;
          }
        }
      }
    }
    else {
      // We have all the $known data we need, test the values of each
      // operation and add the reference as a grant on the relevant
      // realm.
      foreach ($operations as $operation) {
        if ($known[$operation]) {
          $rights['node_access_relation_' . $operation][] = $reference;
        }
      }
    }
  }
  // Reset the $parent_reference variable.
  $parent_reference = NULL;
  // Add the author and all grants.
  $rights['node_access_relation_author'][] = $account->uid;
  $rights['node_access_relation_all'][] = 1;

  if ($complete && $do_cache) {
    // We have grants worked out completely, so add them to the caches.
    // It is unsafe to store incomplete grants in any caches.
    $grants[$account->uid][$op] = $rights;
    // Minimise how often this function needs to work out the grants.
    cache_set('node_access_relation_' . $account->uid . '_' . $op, $grants[$account->uid][$op]);
  }
  else {
    if (!$complete) {
      // Affect the static $child_completed variable.
      $child_completed = FALSE;
    }
    return $rights;
  }
}

/**
 * Byass regular node_load.
 */
function node_access_relation_node_loadbypass($nid) {

  $result = db_select('node', 'n')
    ->fields('n', array('nid', 'status', 'type', 'uid'))
    ->condition('nid', $nid, '=')
    ->execute();

  foreach ($result as $record) {
    $node->nid = $record->nid;
    $node->status = $record->status;
    $node->type = $record->type;
    $node->uid = $record->uid;
  }

  return $node;
}

/**
 * Get all target referenced nodes that are referenced in a Relation field.
 */
function node_access_relation_get_referenced($eid = NULL, $nid = NULL, &$references = array(), &$passed_nids = array(), $depth = 0) {
  $settings = variable_get('node_access_relation', array());
  foreach ($settings as $type => $fields) {
    foreach ($fields as $field => $data) {
      if (
        isset($data['referenced']) &&
        node_access_relation_array_filter($data['referenced'])
      ) {
        $args = array();
        // @TODO: This !empty() can eventually be removed.
        if (!empty($type) && $type == 'relation') {

          $query = db_select('field_data_endpoints', 'fdes');
          $query->innerJoin('field_data_endpoints', 'fdet',
              'fdet.entity_id = fdes.entity_id AND fdet.entity_type = fdes.entity_type AND fdet.bundle = fdes.bundle AND fdet.endpoints_r_index = 0');
          $query->innerJoin('node', 'n', 'n.nid = fdes.endpoints_entity_id');
          $query->innerJoin('relation', 'r', 'fdet.entity_id = r.rid AND r.relation_type = :field', array(':field' => $field));
          $query->innerJoin('relation_bundles', 'rb', 'fdet.bundle = rb.relation_type AND rb.bundle = n.type');

          $query->addField('fdes', 'endpoints_entity_id', 'nid');
          $query->addField('fdet', 'endpoints_entity_id', 'uid');
          $query->addField('fdet', 'endpoints_entity_type', 'type');

          $query->condition('fdes.entity_type', 'relation', '=');
          $query->condition('fdes.bundle', $field, '=');
          $query->condition('fdes.endpoints_r_index', 0, '>');

        }
        if (!is_null($eid)) {
          $query->condition('fdes.entity_id', $eid, '=');
          $query->condition('fdes.endpoints_entity_type', 'node', '=');
        }
        elseif (!is_null($nid)) {
          $query->condition('fdes.endpoints_entity_id', $nid, '=');
          $query->condition('fdes.endpoints_entity_type', 'node', '=');
        }
        else {
          $query->isNotNull('fdes.entity_id');
        }

        $result = $query->execute();

        foreach ($result as $row) {

          if ($row->type == 'user') {
            $references[$row->nid] = $row->uid;
            if ($depth > 0) {
              foreach ($passed_nids as $passed_nid) {
                $references[$passed_nid] = $row->uid;
              }
              $depth = 0;
              $passed_nids = array();
            }
          }
          else {
            $depth++;
            $passed_nids[] = $row->nid;
            $new_references = node_access_relation_get_referenced(NULL, $row->uid, $references, $passed_nids, $depth);
            foreach ($new_references as $returned_nid => $returned_uid) {
              foreach ($passed_nids as $mediary_nid) {
                $references[$mediary_nid] = $returned_uid;
              }
              $references[$returned_nid] = $returned_uid;
            }
          }
        }
      }
    }
  }
  return $references;
}

/**
 * Get all relations where nid is endpoint.
 */
function node_access_relation_get_relations($node = NULL) {
  $references = array();
  $settings = variable_get('node_access_relation', array());
  foreach ($settings as $type => $fields) {
    foreach ($fields as $field => $data) {
      if (
          isset($data['referenced']) &&
          node_access_relation_array_filter($data['referenced'])
      ) {
        $args = array();
        // @TODO: This !empty() can eventually be removed.
        if (!empty($type) && $type == 'relation') {
          // Bring up a list of target nodes from all teh matching relations.
          $query = db_select('field_data_endpoints', 'fde');
          $query->innerJoin('node', 'n', 'n.nid = fde.endpoints_entity_id');
          $query->innerJoin('relation', 'r', 'fde.entity_id = r.rid AND r.relation_type = :field', array(':field' => $field));
          $query->innerJoin('relation_bundles', 'rb', 'fde.bundle = rb.relation_type AND rb.bundle = n.type');

          $query->addField('fde', 'entity_id', 'eid');
          $query->addField('fde', 'bundle', 'bundle');

          $query->condition('fde.entity_type', 'relation', '=');
          $query->condition('fde.bundle', $field, '=');
          $query->condition('fde.endpoints_r_index', 0, '>');
          $query->condition('fde.endpoints_entity_type', 'node', '=');

        }
        if (is_object($node) && $node->nid) {
          $query->condition('fde.endpoints_entity_id', $node->nid, '=');
        }
        else {
          $query->condition('n.type', $node, '=');
        }

        $result = $query->execute();
        foreach ($result as $row) {
          $references[$row->bundle][] = $row->eid;
        }
      }
    }
  }
  return $references;
}


/**
 * Apply array_filter() to an array recursively.
 */
function node_access_relation_array_filter($input) {
  foreach ($input as &$value) {
    if (is_array($value)) {
      $value = node_access_relation_array_filter($value);
    }
  }
  return array_filter($input);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function node_access_relation_form_relation_ui_type_form_alter(&$form, $form_state) {
  $data = NULL;
  if (is_array($form_state['build_info']['args']) && array_key_exists('0', $form_state['build_info']['args']) && $form_state['build_info']['args'][0]->relation_type) {
    $data = node_access_relation_field_settings('relation', $form_state['build_info']['args'][0]->relation_type);
  }

  $form['directional']['#description'] .= t(' A directional relation is required in order to grant content access. To configure content access for this relation you must first make this a directional relation.');

 $form['node_access_relation'] = array(
    '#type' => 'fieldset',
    '#title' => t(''),
    '#states' => array(
      '!visible' => array(
        ':input[name="directional"]' => array('checked' => FALSE),
      ),
    ),
  );
    $form['node_access_relation']['referenced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content Access via Node Access Relation'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
    '#weight' => 95,
    '#description' => t('A directional relation is required in order to grant content access. '),
    '#states' => array(
      '!visible' => array(
        ':input[name="directional"]' => array('checked' => FALSE),
      ),
    ),
  );
  $form['node_access_relation']['referenced']['view'] = array(
    '#type' => 'checkboxes',
    '#title' => t('If the user has <em>view</em> access to the source entity'),
    '#default_value' => isset($data['referenced']['view']) ? $data['referenced']['view'] : array(),
    '#options' => array(
      'view' => t('Inherit <em>view</em> access on all target node entities'),
      'update' => t('Grant <em>update</em> access on all target node entities'),
      'delete' => t('Grant <em>delete</em> access on all target node entities'),
    ),
    '#description' => t('These content access permissions will be granted on the target node entities to users that have VIEW access to at least one of the source bundle entities.'),
    '#states' => array(
      '!visible' => array(
        ':input[name="directional"]' => array('checked' => FALSE),
      ),
    ),
  );
  $form['node_access_relation']['referenced']['update'] = array(
    '#type' => 'checkboxes',
    '#title' => t('If the user has <em>update</em> access to the source entity'),
    '#default_value' => isset($data['referenced']['update']) ? $data['referenced']['update'] : array(),
    '#options' => array(
      'update' => t('Inherit <em>update</em> access on all target node entities'),
      'view' => t('Grant <em>view</em> access on all target node entities'),
      'delete' => t('Grant <em>delete</em> access on all target node entities'),
    ),
    '#description' => t('These content access permissions will be granted on the target node entitites to users that have UPDATE access to at least one of the source bundle entities.'),
    '#states' => array(
      '!visible' => array(
        ':input[name="directional"]' => array('checked' => FALSE),
      ),
    ),
  );
  $form['node_access_relation']['referenced']['delete'] = array(
    '#type' => 'checkboxes',
    '#title' => t('If the user has <em>delete</em> access to the source entity'),
    '#default_value' => isset($data['referenced']['delete']) ? $data['referenced']['delete'] : array(),
    '#options' => array(
      'delete' => t('Inherit <em>delete</em> access on all target node entities'),
      'view' => t('Grant <em>view</em> access on all target node entities'),
      'update' => t('Grant <em>update</em> access on all target node entities'),
    ),
    '#states' => array(
      '!visible' => array(
        ':input[name="directional"]' => array('checked' => FALSE),
      ),
    ),
    '#description' => t('These content access permissions will be granted on the target node entities to users that have DELETE access to at least one of the source bundle entities.'),
  );
  $form['node_access_relation']['referenced']['published'] = array(
    '#type' => 'select',
    '#title' => t('Unpublished nodes'),
    '#title_display' => 'none',
    '#default_value' => isset($data['referenced']['published']) ? $data['referenced']['published'] : 0,
    '#options' => array(
      0 => t('Give these grants for published nodes only'),
      1 => t('Give these grants for published and unpublished nodes'),
    ),
    '#states' => array(
      '!visible' => array(
        ':input[name="directional"]' => array('checked' => FALSE),
      ),
    ),
  );
  $form['#submit'][] = 'node_access_relation_form_relation_ui_type_form_submit';

}

/**
 * Extra submit function for Relation Type access config.
 */
function node_access_relation_form_relation_ui_type_form_submit($form, &$form_state) {
  if ($form_state['values']['directional'] == 0) {
    $form_state['values']['referenced'] = NULL;
  }
  $data['referenced'] = &$form_state['values']['referenced'];
  $field_name = &$form_state['values']['relation_type'];
  $bundle_name = 'relation';
  $data['field_type'] = $field_name;
  node_access_relation_field_settings($bundle_name, $field_name, $data);
  node_access_relation_check_cross_access();
  $bundles = &$form_state['build_info']['args'][0]->target_bundles;
  $types = array();
  foreach ($bundles as $type) {
    $this_type = explode(":", $type);
    if ($this_type[0] == 'node') {
      $types[] = $this_type[1];
    }
  }
  if ($types) {
    $nodes = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.type', $types, 'IN')
      ->execute()
      ->fetchAssoc();
    if ($nodes) {
    // Because the field settings have changed we should rebuild.
      node_access_rebuild(TRUE);
    }
  }
}

/**
 * Add node grants in a way that prevents overriding previous iterations.
 *
 * @param array $grants
 *   The grants array where the grant will be added.
 * @param string $realm
 *   The realm of this grant.
 * @param string $gid
 *   The grant ID.
 * @param string $priority
 *   The grant priority.
 * @param array $settings
 *   An settings array of boolean equivalent values with keys 'view', 'edit',
 *   and 'delete'.
 */
function node_access_relation_add_grant(&$grants, $realm, $gid, $priority, $settings) {
  $key = $realm . $gid;
  if (!isset($grants[$key])) {
    // Setup the record.
    $grants[$key] = array(
      'realm' => $realm,
      'gid' => $gid,
      'priority' => $priority,
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 0,
    );
  }
  // Add the grants needed, so as not to override previous iterations.
  if (isset($settings['view']) && $settings['view']) {
    $grants[$key]['grant_view'] = 1;
  }
  if (isset($settings['update']) && $settings['update']) {
    $grants[$key]['grant_update'] = 1;
  }
  if (isset($settings['delete']) && $settings['delete']) {
    $grants[$key]['grant_delete'] = 1;
  }
  // Increase the priority if needed.
  if ($priority > $grants[$key]['priority']) {
    $grants[$key]['priority'] = $priority;
  }
}

/**
 * Implements hook_entity_insert().
 */
function node_access_relation_entity_insert($entity, $type) {
  if ($type == 'relation') {
    node_access_relation_invoke_update_access_records($entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function node_access_relation_entity_update($entity, $type) {
  if ($type == 'relation') {
    node_access_relation_invoke_update_access_records($entity);
  }
}

/**
 * Implements hook_entity_delete().
 */
function node_access_relation_entity_delete($entity, $type) {
  if ($type == 'relation') {
    node_access_relation_invoke_update_access_records($entity);
  }

}

/**
 * Find target nodes to act on, call node_access_relation_node_access_records.
 */
function node_access_relation_invoke_update_access_records($entity) {
  $target_uids = node_access_relation_get_referenced($entity->rid);
  if (is_array($target_uids)) {
    foreach ($target_uids as $nid => $uid) {
      // Manually inject relation_type into  target node.
      $node = node_load($nid);
      $grants = node_access_relation_update_access_records($node, $entity);
      node_access_write_grants($node, $grants, $realm = NULL, $delete = TRUE);
    }
  }
  else {
    $grants = node_access_relation_update_access_records($target_nodes, $entity);
    node_access_write_grants($target_nodes, $grants, $realm = NULL, $delete = TRUE);
  }
}

/**
 * Implements hook_node_access_records().
 */
function node_access_relation_node_access_records($node) {
  $grants = array();
  $relations = node_access_relation_get_relations($node);
  if (is_array($relations)) {
    foreach ($relations as $relation_type => $rids) {
      // Manually inject relation_type into  target node.
      $entities = entity_load('relation', $rids);
      foreach ($entities as $entity) {
        $grants = node_access_relation_update_access_records($node, $entity);
        node_access_write_grants($node, $grants, $realm = NULL, $delete = TRUE);
      }
    }
  }
  return $grants;
}

/**
 * Implements hook_update_access_records().
 */
function node_access_relation_update_access_records($node, $relation) {
  $grants = array();
  if (!$relation->relation_type) {
    return FALSE;
    // @TODO: Find all relations where this node is target and update.
  }
  $field_data = node_access_relation_field_settings('relation', $relation->relation_type);
  if (!empty($field_data) && !empty($relation->endpoints)) {
    foreach ($field_data as $field_name => &$data) {
      if (!empty($data)) {
        if (!empty($node->status) || !empty($data['referenced']['published'])) {
          // Add referenced user grants.
          $items = field_get_items('relation', $relation, 'endpoints');
          if (!empty($items)) {
            foreach ($items as &$endpoint) {
              $uid = NULL;
              if ($endpoint['entity_type'] == 'user' && $endpoint['r_index'] == 0) {
                $uid = $endpoint['entity_id'];
                if ($uid && is_array($field_data['referenced'])) {
                  foreach (array_keys($field_data['referenced']) as $operation) {
                    node_access_relation_add_grant(
                      $grants,
                      'node_access_relation_' . $operation,
                    $endpoint['entity_id'],
                      $field_data['priority'],
                      $field_data['referenced'][$operation]
                    );
                  }
                }
              }
            }
          }
          if (is_array($field_data) && array_key_exists('unused', $field_data) && array_key_exists('referenced', $field_data)) {
            foreach (array_keys($field_data['referenced']) as $operation) {
              // Add a dummy grant for node 0 to block other users' access.
              node_access_relation_add_grant(
                $grants,
                'node_access_relation_' . $operation,
                0,
                $field_data['priority'],
                $field_data['referenced'][$operation]
              );
            }
          }
        }
      }
    }
  }
  // Flag that the cache is not to be relied upon.
  variable_set('node_access_relation_cache_needs_clear', TRUE);

  if (!empty($grants)) {
    return $grants;
  }
  return NULL;
}

/**
 * Set and get relation field settings.
 *
 * @param string $bundle_name
 *   The name of the bundle.
 * @param string $field_name
 *   The name of the field.
 * @param string $variable
 *   If set will update the value of the settings for this field.
 *
 * @return array
 *   The stored or updated value of the settings for this field.
 */
function node_access_relation_field_settings($bundle_name, $field_name = NULL, $variable = NULL) {
  $data = variable_get('node_access_relation', array());
  if (!is_null($field_name)) {
    if (isset($variable)) {
      $data[$bundle_name][$field_name] = $variable;
      variable_set('node_access_relation', $data);
    }
    if (isset($data[$bundle_name][$field_name])) {
      return $data[$bundle_name][$field_name];
    }
  }
  elseif (isset($data[$bundle_name])) {
    return $data[$bundle_name];
  }
}

/**
 * Check for cross access.
 *
 * Cross access is our term for when a referenced node gives a different kind
 * of access than the one that the reference is tested for. e.g. if a field
 * gave users 'view' access to the node when they have 'update' access on the
 * reference. This requires extra checking in
 * node_access_relation_node_grants(), so this is how we inform that
 * function that this needs to be done.
 */
function node_access_relation_check_cross_access() {
  $data = variable_get('node_access_relation', array());
  $cross_access = array(
    'view' => FALSE,
    'update' => FALSE,
    'delete' => FALSE,
  );
  foreach ($data as $type_name => $type_data) {
    foreach ($type_data as $field_name => $field_data) {
      foreach (array_keys($cross_access) as $check) {
        foreach (array_keys($cross_access) as $grant) {
          if ($check != $grant && array_key_exists('referenced', $field_data) && $field_data['referenced'][$check][$grant]) {
            $cross_access[$grant] = TRUE;
          }
        }
      }
    }
  }
  variable_set('node_access_relation_cross_access', $cross_access);
}

/**
 * Implements of hook_node_access_explain().
 *
 * This gives the Devel module nice information to display when
 * debugging node grants.
 */
function node_access_relation_node_access_explain($row) {
  if (
    in_array(
      $row->realm,
      array(
        'node_access_relation_view',
        'node_access_relation_update',
        'node_access_relation_delete',
        'node_access_relation_author',
        'node_access_relation_all',
      )
    )
  ) {

    $ops = array();
    foreach (array('view', 'update', 'delete') as $op) {
      $gop = 'grant_' . $op;
      if (!empty($row->$gop)) {
        $ops[] = $op;
      }
    }

    if (!empty($ops)) {
      $do = implode('/', $ops);
      $account = user_load($row->gid);
      switch ($row->realm) {
        case 'node_access_relation_view':
        case 'node_access_relation_update':
        case 'node_access_relation_delete':
          return t(
            'Users !name may !do this node',
            array('!name' => $account->name, '!do' => $do)
          );
        case 'node_access_relation_author':
          $account = user_load($row->gid);
          return t(
            'Node author %name may !do this node',
            array('%name' => $account->name, '!do' => $do)
          );
        case 'node_access_relation_all':
          return t(
            'All users may !do this node',
            array('!do' => $do)
          );
      }
    }

  }
}

/**
 * Implements hook_field_delete_instance().
 */
function node_access_relation_field_delete_instance($instance) {
  $data = variable_get('node_access_relation', array());
  if (isset($data[$instance['bundle']][$instance['field_name']])) {
    unset($data[$instance['bundle']][$instance['field_name']]);
    if (empty($data[$instance['bundle']])) {
      unset($data[$instance['bundle']]);
    }
    variable_set('node_access_relation', $data);
  }
}
