<?php
/**
 * @file
 * A module allowing drupal to use different CSS files for different domains.
 *
 * It relies on Domain Access module and is perfectly integrated in it.
 */

/**
 * Implements hook_help().
 */
function domain_css_help($path, $arg) {
  if ($path == 'admin/help#domain-css') {
    return t('Load different CSS files for different domains.');
  }
}

/**
 * Implements hook_menu().
 */
function domain_css_menu() {
  $items = array();

  // Display a "Domain CSS" tab when viewing/editing a domain.
  $items['admin/structure/domain/view/%/domain_css'] = array(
    'title' => 'Domain CSS',
    'description' => 'Configuration for the Mondula Domain CSS module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('domain_css_form', 4),
    'access arguments' => array('administer domains'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Form builder; Create and display the User Warn configuration settings form.
 */
function domain_css_form($form, &$form_state, $domain_id) {

  // Just makes the form a little prettier.
  $form['group'] = array(
    '#type' => 'fieldset',
    '#title' => t('Domain specific CSS settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  // Load previous config for the domain in question.
  $config = query_db_for_previous_configuration($domain_id);

  // Text field for css file name input.
  $form['group']['domain_css_file'] = array(
    '#type' => 'textfield',
    '#title' => t('CSS File'),
    '#description' => t('Enter a CSS file name located in sites/all/themes/yourtheme/'),
    '#size' => 60,
    '#maxlength' => 150,
    '#required' => TRUE,
    '#default_value' => $config->css_file,
  );

  // Text field for media attribute data
  $form['group']['domain_css_media_attribute'] = array(
    '#type' => 'textfield',
    '#title' => t('CSS media attribute'),
    '#description' => t('Media attribute that will be added to the link tag (screen, print, aural, ...)'),
    '#size' => 60,
    '#maxlength' => 150,
    '#required' => TRUE,
    '#default_value' => $config->media_attribute,
  );

  // Weight field for css file weight.
  $form['group']['domain_css_file_weight'] = array(
    '#type' => 'weight',
    '#title' => t('File weight'),
    '#description' => t('The sort order for this record. Lower values display first.'),
    '#default_value' => $config->weight,
    '#delta' => 100,
  );

  // Submit button.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );

  return $form;
}

/**
 * Implements hook_form_FORM_ID_submit().
 */
function domain_css_form_submit($form, &$form_state) {
  // Aquire submitted form data.
  $domain_id = $form_state['build_info']['args'][0];
  $file = $form_state['values']['domain_css_file'];
  $media_attribute = $form_state['values']['domain_css_media_attribute'];
  $weight = $form_state['values']['domain_css_file_weight'];

  // Query database for previous data.
  $config = query_db_for_previous_configuration($domain_id);

  // If no previous config is found.
  if (isset($config->config_status) && $config->config_status == "new") {
    // Insert a new row into the database.
    db_insert('domain_css')
      ->fields(array(
        'domain_id' => $domain_id,
        'css_file' => $file,
        'media_attribute' => $media_attribute,
        'weight' => $weight,
      ))
      ->execute();
  }
  else {
    // Run an update of the existing row otherwise.
    db_update('domain_css')
      ->condition('domain_id', $domain_id)
      ->fields(array('css_file' => $file, 'media_attribute' => $media_attribute, 'weight' => $weight))
      ->execute();
  }
  drupal_set_message(t('The settings have been saved'));
}

/**
 * Implements hook_css_alter().
 */
function domain_css_css_alter(&$css) {
  // Needed globals.
  global $_domain, $theme;
  // Current domain id.
  $domain_id = $_domain['domain_id'];

  // Query database for configuration.
  $config = query_db_for_previous_configuration($domain_id);

  // If a configuration is found, load css file before page is rendered.
  if ($config) {
    $file = drupal_get_path('theme', $theme) . '/' . $config->css_file;
    $css[$file] = array(
      'group' => CSS_DEFAULT,
      'every_page' => TRUE,
      'media' => 'all',
      'weight' => $config->weight,
      'preprocess' => TRUE,
      'type' => 'file',
      'browsers' => array(
        'IE' => TRUE,
        '!IE' => TRUE,
      ),
      'data' => $file,
    );
  }
}

/**
 * Implements hook_form_FORM_ID_validate().
 */
function domain_css_form_validate($form, &$form_state) {
  $file = $form_state['values']['domain_css_file'];
  if ($file != '' && !file_exists(DRUPAL_ROOT . '/sites/all/' . drupal_get_path('theme', variable_get('theme_default', NULL)) . '/' . $file)) {
    form_set_error('domain_css_file', 'File does not exists: ' . '/sites/all/' . drupal_get_path('theme', variable_get('theme_default', NULL)) . '/' . $file);
  }
}

/**
 * Helper function for querying the database for configuration.
 */
function query_db_for_previous_configuration($domain_id) {
  $query = db_select('domain_css', 'm');
  $query->condition('m.domain_id', $domain_id);
  $query->fields('m', array('domain_id', 'css_file', 'media_attribute', 'weight'));
  $result = $query->execute();

  if ($result->rowCount() == 1) {
    return $result->fetchObject();
  }
  else {
    return domain_css_get_default_values();
  }
}

function domain_css_get_default_values() {
  $obj = new stdClass();
  $obj->config_status = 'new';
  $obj->css_file = "";
  $obj->media_attribute = "screen";
  $obj->weight = "0";
  return $obj;
}
