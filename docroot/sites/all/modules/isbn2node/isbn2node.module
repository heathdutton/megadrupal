    <?php
/**
 * @file
 * isbn2node module
 */

// Define the url's for fetching ISBN-data 
define('ISBN2NODE_ISBNDB_URL', 'http://isbndb.com/api/books.xml?access_key=%access_key&results=details&index1=isbn&value1=%isbn_value');
define('ISBN2NODE_OPENLIBRARY_BOOK_URL', 'http://openlibrary.org/api/books?bibkeys=ISBN:%isbn_value&jscmd=data&format=json');

// Define the url's for fetching cover files
define('ISBN2NODE_OPENLIBRARY_COVER_URL', 'http://covers.openlibrary.org/b/isbn/%isbn-%size.jpg');

// Define the url's for searching for titles
define('ISBN2NODE_ISBNDB_TITLE_URL', 'http://isbndb.com/api/books.xml?access_key=%access_key&results=details&index1=title&value1=%title_value');


/*
 * Implements hook_init()
 */
function isbn2node_init() {
  // Load file with private functions
  module_load_include('inc', 'isbn2node', 'isbn2node.internal');
}


/**
 * Implements hook_perm().
 */
function isbn2node_permission() {
  return array('configure isbn2node' => array(
      'title' => t('Administer ISBN2node'),
      'description' => t('Allow user to control settings for fetching book information through ISBNdb or Open Library.'),
    ),
  );
}


/**
 * Implements hook_help().
 */
function isbn2node_help($path, $arg) {
  switch ($path) {
    case 'admin/help#isbn2node' :

      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The ISBN2node module will fetch book information based on ISBN\'s') . '</p>';
      $output .= '<h3>' . t('How to use this module') . '</h3>';
      $output .= '<p>' . t('This module creates a content type called ISBN-book, which can contain information on a physical book (do not confuse with Drupal\'s existing book format, which is something different.). <br />' .
                           'You can add book information through a normal node form, but the main purpose of this module is to prepopulate a node form with information on the book based on its ISBN. You enter the ISBN and the module tries to fetch as much information on the book as possible - as well as its cover if available.') . '</p>';
      $output .= '<h3>' . t('How to obtain a key for ISBNdb') . '</h3>';
      $output .= '<p>' . t('If you want to use ISBNdb as your lookup database, you will need an access key to their API. Apply for this key on thair web site, and enter the key in the settings for ISBN2node. You do not need a key if you use Open Library as yous ISBN database.') . '</p>';

      return $output;
      break;

    case 'admin/config/content/isbn2node' :
      return '<p>' . t('Configure the ISBN2node module by selecting which ISBN database you want to use and enter an access key if required.') . '</p>';
  }
}


/**
 * Implements hook_menu().
 */
function isbn2node_menu() {
  $items = array();

  // Settings menu.
  $items['admin/config/content/isbn2node'] = array(
    'title' => 'ISBN to node',
    'description' => 'Configure ISBN lookup.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('isbn2node_settings_form'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('configure isbn2node'),
  );
  
  // PAdd ISBN book via lookup
  $items['node/add/isbn2node_book/isbn2node'] = array(
    'title' => 'ISBN book by lookup',
    'description' => 'Enter the ISBN for a book and populate an ISBN-book based on the data fetched.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('isbn2node_add_form'),
    'type' => MENU_NORMAL_ITEM | MENU_LOCAL_TASK,
    'access arguments' => array('administer nodes'),
    'weight' => 10,
  );

  // Bulk add ISBN books
  $items['node/add/isbn2node_book/bulk'] = array(
    'title' => 'ISBN book bulk import',
    'description' => 'Enter a series of ISBN and create nodes based on lookups.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('isbn2node_bulk_form'),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer nodes'),
    'weight' => 20,
    'file' => 'isbn2node.bulk.inc',
  );

  // Title search
  $items['node/add/isbn2node_book/title'] = array(
    'title' => 'ISBN title search',
    'description' => 'Search for books through titles.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('isbn2node_title_form'),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer nodes'),
    'weight' => 30,
  );

  // Add an ISBN book taking the ISBN from the URL
  $items['node/add/isbn2node_book/manual/%'] = array(
    'title' => 'ISBN book with ISBN filled out',
    'description' => 'Go to the form and fill out ISBN from URL.',
    'page callback' => 'isbn2node_add_manual',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer nodes'),
  );

  return $items;
}


/**
 * Create the settings form.
 *
 * This form serves both as the launch form for the debug run
 * and as the result display when it has run.
 */
function isbn2node_settings_form($form, &$form_state) {

  $form = array();

  $form['isbn2node_db'] = array(
    '#title' => t('Book database to use'),
    '#type' => 'radios',
    '#options' => array(
      'isbndb' => 'ISBNdb',
      'openlib' => 'Open Libary',
      ),
    '#default_value' => variable_get('isbn2node_db', ''),
    '#required' => TRUE,
    '#description' => t('If you use ISBNdb you must aquire and enter an access key below'),
    );

  $form['isbn2node_isbndb_access_key'] = array(
    '#title' => t('ISBNdb access key'),
    '#type' => 'textfield',
    '#default_value' => variable_get('isbn2node_isbndb_access_key', ''),
    '#description' => t('Your ISBNdb access key. <a href="@url">How to sign up and generate this key</a>.', array('@url' => '/admin/help/isbn2node')),
  );

  return system_settings_form($form);
}


/**
 * Handle submission of the settings form.
 * 
 * Will start each cron hook in sequence, log the results
 * and return to the main form.
 */
function isbn2node_settings_form_submit($form, &$form_state) {
  // Save the values
  variable_set('isbn2node_db', $form_state['values']['isbn2node_db']);
  variable_set('isbn2node_isbndb_access_key', $form_state['values']['isbn2node_isbndb_access_key']);  
  drupal_set_message(t('Your settings have been saved'));
}


/*
 * Present the add single ISBN form
 */
function isbn2node_add_form($isbn = '') {
  $form = array();
  
  if (_isbn2node_check_settings($form)) {
  
    $form['isbn'] = array(
      '#title' => t('ISBN'),
      '#type' => 'textfield',
      '#required' => TRUE,
      '#default_value' => $isbn,
      '#description' => t('Enter the full ISBN for the book.'),
    );
    
    // Buttons
    $form['buttons']['save'] = array(
      '#type' => 'submit',
      '#value' => t('Search'),
      '#weight' => 140,
      );
  
    $form['buttons']['cancel'] = array(
      '#markup' => l(t('Cancel'), 'node/add'),
      '#weight' => 150,
      );
  }
  
  return $form;
}


/*
 * Validate the add single ISBN form
 */
function isbn2node_add_form_validate($form) {
  // Check for an existing book with this ISBN
  $isbn = _isbn2book_normalize_isbn($form['isbn']['#value']);
  $result = _isbn2node_isbn_exists($isbn);
  
  // Anything? Set a form error
  if ($result) {
    form_error($form['isbn'], t('You already have <a href="@view">a book with the ISBN @isbn</a>.<br /><a href="@edit">Edit it here</a>, or <a href="@delete">delete it</a> before adding it again.',
      array(
        '@isbn' => $isbn,
        '@view' => url('node/' . $result['entity_id']),
        '@edit' => url('node/' . $result['entity_id'] . '/edit'),
        '@delete' => url('node/' . $result['entity_id'] . '/delete'))));
  }

  $vals = _isbn2book_fetch_data($isbn);

  if (is_array($vals)) {
    $success = $vals['success'];
  }
  else {
    $success = $vals->success;
  }

  if (!$success) {
    form_error($form['isbn'], t('Didn\'t find any results on the ISBN @isbn. <a href="!url">Create a book manully with this ISBN</a>?',
                                array('@isbn' => $isbn, '!url' => url('node/add/isbn2node_book/manual/' . $isbn))));
  }
}


/*
 * Submit handler for the add single ISBN form
 * Fetches book data and goes on to the normal node/add form
 */
function isbn2node_add_form_submit($form, &$form_state) {
  // Fetch book data and parse
  $isbn = _isbn2book_normalize_isbn($form_state['values']['isbn']);
  $vals = _isbn2book_fetch_data($isbn);
  $isbn2book_data = _isbn2node_parse($vals, $isbn);
  // Insert ISBN
  $isbn2book_data['isbn2node_isbn'] = $isbn;

  // Save data for next step
  // This ought to be session based to avoid clashes with other user's node submissions
  variable_set('isbn2node_data', serialize($isbn2book_data));
  drupal_goto('node/add/isbn2node-book');

}


/*
 * Submit handler for the add single ISBN form
 * Fetches book data and goes on to the normal node/add form
 */
function isbn2node_add_manual($isbn) {
  // Fetch book data and parse
  $isbn = _isbn2book_normalize_isbn($isbn);
  $isbn2book_data = array();
  // Insert ISBN
  $isbn2book_data['isbn2node_isbn'] = $isbn;

  // Save data for next step
  // This ought to be session based to avoid clashes with other user's node submissions
  variable_set('isbn2node_data', serialize($isbn2book_data));
  drupal_goto('node/add/isbn2node-book');

}


/*
 * Implements form_alter()
 */
function isbn2node_form_alter(&$form, &$form_state, $form_id) {

  switch ($form_id) {
    // We only intervene on node form for a new node of the right node type
    case 'isbn2node_book_node_form' :

        // Add custom submit handler to node submit
      $form['actions']['submit']['#submit'] = array_merge(array('isbn2node_form_submit'), $form['actions']['submit']['#submit']);

      // Don't mess with normal node edits, only adds
      if (arg(1) == 'add') {
        // When we have the right circumstances, we will fetch new book data from session or variables table
        $isbn2book_data = variable_get('isbn2node_data', FALSE);
  
        if ($isbn2book_data) {
  
          $isbn2book_data = unserialize($isbn2book_data);

          $image = _isbn2node_fetch_cover($isbn2book_data['isbn2node_isbn']);
          if (!$image && isset($isbn2book_data['xisbn'])) {
            $image = _isbn2node_fetch_cover($isbn2book_data['xisbn']);
          }
  
          if ($image) {

            // drupal_set_message(vad($form['isbn2node_cover']));
  
            $form['isbn2node_use_img'] = array(
              '#title' => t('Cover image from OpenLibray'),
              '#type' => 'fieldset',
              '#weight' => ($form['isbn2node_cover']['#weight']),
            );

            $form['isbn2node_use_img']['img'] = array(
              '#markup' => '<img src="' . $image . '" />',
            );
  
            $form['isbn2node_use_img']['isbn2node_use_img'] = array(
              '#type' => 'checkbox',
              '#title' => t('Use this image'),
              '#default_value' => 1,
            );

            $form['isbn2node_use_img']['xisbn'] = array(
              '#type' => 'hidden',
              '#value' => $isbn2book_data['xisbn'],
            );

          }
          else {
            drupal_set_message(t('No cover image found for the ISBN @isbn. You can upload one manually.', array('@isbn' => $isbn2book_data['isbn2node_isbn'])));
          }
  
          foreach ($isbn2book_data as $field => $default_value) {
            switch ($field) {
              case 'title' :
                $form[$field]['#default_value'] = $default_value;
                break;
              default :
                $form[$field]['und']['0']['value']['#default_value'] = $default_value;
                break;
            }
          }
        }
  
        // We remove the previously fetched data to avoid clashes with normal node adds
        variable_del('isbn2node_data');
  
        break;
    }
  }
}


/*
 * Submit handler for single ISBN
 */
function isbn2node_form_submit(&$form, &$form_state) {
  // User asked for preloaded cover
  if (!empty($form_state["input"]["isbn2node_use_img"])) {
    if (isset($form_state["values"]["xisbn"])) {
      $xisbn = $form_state["values"]["xisbn"];
    }
    else {
      $xisbn = '';
    }
    $file = _isbn2node_save_cover($form_state["values"]["isbn2node_isbn"]['und'][0]['value'], $xisbn);
    if ($file->fid) {
      // Pump fid into form
      $form_state['values']["isbn2node_cover"]['und'][0]["fid"] = $file->fid;
    }
    // Submission continues from here as usual
  }
}

/*
 * Implements hook_submit
 */
function isbn2node_node_submit($node) {
  // Remove trailing commas from author field before submission
  $node->isbn2node_author['und']['0']['value'] = rtrim(trim($node->isbn2node_author['und']['0']['value']), ',');
  return $node;
}

/*
 * Form for title search
 * Two steps
 * 1: title field
 * 2: select single title to fetch
 */
function isbn2node_title_form($form, &$form_state) {
  $form = array();
  
  if (empty($form_state['storage']['titles'])) {
    if (_isbn2node_check_settings($form)) {
  
      $form['title'] = array(
        '#title' => t('Book title'),
        '#type' => 'textfield',
        '#required' => TRUE,
        '#default_value' => '',
        '#required' => TRUE,
        '#description' => t('Enter a title to search for.'),
      );
      
      $submit = t('Search');
      $form['buttons']['cancel'] = array(
        '#markup' => l(t('Cancel'), 'node/add'),
        '#weight' => 150,
        );
    }
  }
  else {
    $options = array();
    // Display a message with the submitted value.
    foreach($form_state['storage']['titles'] as $title) {
      
      $img = _isbn2node_fetch_cover($title['isbn'], 'S');
      
      $options[$title['isbn']] = $title['title'] . ' - <em>' . $title['author'] . '</em> - ISBN: ' . $title['isbn'] . '/' . $title['isbn13'] . ($img ? '<br />' . theme('image', array('path' => $img)) . '<br />' : '');
    }
  
    $form['isbn'] = array(
      '#type' => 'radios',
      '#options' => $options,
      '#required' => TRUE,
    );
    
    $submit = t('Fetch');
    $form['buttons']['cancel'] = array(
      '#markup' => l(t('Cancel'), 'node/add/isbn2node_book/title'),
      '#weight' => 150,
      );
  }

  // Buttons
  $form['buttons']['save'] = array(
    '#type' => 'submit',
    '#value' => $submit,
    '#weight' => 140,
    );    
  
  return $form;
}


/*
 * Submnit handler for title search
 */
function isbn2node_title_form_submit(&$form, &$form_state) {
  
  if (isset($form_state['values']['isbn'])) {
    // Submit as on manual ISBN search
    isbn2node_add_form_submit($form, $form_state);
  }
  else {
    // Look for title
    $title = trim($form_state['values']['title']);
    
    $vals = _isbn2book_search_title($title);
    $i = 1;
    $res = array();
  
    if ($vals[1]['attributes']['TOTAL_RESULTS'] > 0) {
  
      if ($vals[1]['attributes']['TOTAL_RESULTS'] > 10) {
        drupal_set_message(t('Found @num titles. You may want to narrow down your search', array('@num' => $vals[1]['attributes']['TOTAL_RESULTS'])), 'warning');
      }
  
      foreach ($vals as $ix => $val) {
        switch ($val['tag']) {
          case 'TITLE' :
            if (isset($val['value'])) {
              $res[$i]['title'] = $val['value'];
            }
            break;
          
          case 'AUTHORSTEXT' :
            if (isset($val['value'])) {
              $res[$i]['author'] = $val['value'];
              $i++;
            }
            break;
  
          case 'BOOKDATA' :
            if (isset($val['attributes']['ISBN'])) {
              $res[$i]['isbn'] = $val['attributes']['ISBN'];
            }
            if (isset($val['attributes']['ISBN13'])) {
              $res[$i]['isbn13'] = $val['attributes']['ISBN13'];
            }
          // drupal_set_message($ix . vad($val));
        }
      }
    }
    else {
      drupal_set_message(t('No titles found matching @title', array('@title' => $title)), 'warning');
    }
  
    // Tell FAPI to rebuild.
    $form_state['rebuild'] = TRUE;  
    $form_state['storage']['titles'] = $res;
    }
}

