<?php
/**
 * @file
 * The Sape module main file.
 *
 * @author Andrey Andreev aka andyceo, <andyceo@yandex.ru>, http://andyceo.ruware.com/
 */

define('SAPE_DEFAULT_BLOCKS_COUNT', 3);
define('SAPE_DEFAULT_LINKS_IN_BLOCK_COUNT', 3);
define('SAPE_DEFAULT_FILE_PATH', 'sites/all/libraries/sape/sape.php');
define('SAPE_REFERRAL_LINK', 'http://www.sape.ru/r.b3b74f2ba7.php');
define('SAPE_DUMMY_USERCODE', '00000000000000000000000000');

/**
 * Implements hook_help().
 */
function sape_help($path = 'admin/help#sape', $arg) {
  switch ($path) {
    case 'admin/help#sape':
    case 'admin/config/services/sape':
    case 'admin/config/services/sape/main_settings':
    case 'admin/config/services/sape/code_settings':
    case 'admin/config/services/sape/info':
      $instr = array();
      $instr[] = t('Register in SAPE.RU by <a href="!reflink" target="_blank">registration link</a>.', array('!reflink' => SAPE_REFERRAL_LINK));
      $instr[] = t('In the <strong>Webmaster</strong> section click on <strong>[Create new site]</strong> link and copy code like %dummy_usercode to the correspondence field below and save. Please, tune the module and enable it.', array('%dummy_usercode' => SAPE_DUMMY_USERCODE));
      $instr[] = t('In the <a href="!block_admin">administer block section</a> enable blocks named like <strong>SAPE Links #1</strong>. It is recommended to show block only for anonymous users.', array('!block_admin' => 'admin/structure/block'));

      $help = '<h2>' . t('Sape is the SAPE.RU link exchange integration module.') . '</h2>';
      $help .= theme('item_list', array('items' => $instr, 'type' => 'ol', 'title' => t('Before you start:'), 'attributes' => array('style' => 'padding-bottom:2em; margin-bottom:2em; border-bottom:2px solid gray;')));
      //drupal_add_css('border-bottom:1px solid red;');
      return $help;
      break;
  }
}

/**
 * Implements hook_menu().
 */
function sape_menu() {
  $items = array(
    'admin/config/services/sape' => array(
      'title' => 'Sape',
      'description' => 'Sape configuration and info pages.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sape_admin_form'),
      'access arguments' => array('administer site configuration'),
      'file' => 'sape.admin.inc',
    ),
    'admin/config/services/sape/main_settings' => array(
      'title' => 'Main configuration',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    ),
    'admin/config/services/sape/code_settings' => array(
      'title' => 'Code configuration',
      'access arguments' => array('administer site configuration'),
      'type' => MENU_LOCAL_TASK,
      'page arguments' => array('sape_code_form'),
      'page callback' => 'drupal_get_form',
      'file' => 'sape.admin.inc',
      'weight' => 10,
    ),
    'admin/config/services/sape/info' => array(
      'title' => 'Info',
      'access arguments' => array('administer site configuration'),
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'sape_info_page',
      'file' => 'sape.admin.inc',
      'weight' => 20,
    ),
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function sape_init() {
  global $_sape, $_sape_context;
  $enabled = variable_get('sape_enabled', 0);
  $file_path = variable_get('sape_file_path', '');

  if (($enabled == 1) && is_file($file_path)) {
    if (!defined('_SAPE_USER')) {
      define('_SAPE_USER', variable_get('sape_usercode', ''));
    }
    require_once(_sape_get_path($file_path));

    $o['charset'] = variable_get('sape_charset', 0);
    $o['multi_site'] = variable_get('sape_multi_site', TRUE);
    $o['host'] = variable_get('sape_host', $_SERVER['SERVER_NAME']);
    $o['verbose'] = variable_get('sape_verbose', FALSE);
    $o['force_show_code'] = variable_get('sape_force_show_code', FALSE);

    $_sape_context = new SAPE_context($o);
    $_sape = new SAPE_client($o);
    unset($o);
  }
  else {
    variable_set('sape_enabled', 0);
  }
}

/**
 * Implements hook_block_info().
 */
function sape_block_info() {
  $blocks = array();
  if (variable_get('sape_enabled', 0)) {
    $c = variable_get('sape_blocks_count', SAPE_DEFAULT_BLOCKS_COUNT);
    for ($i = 0; $i < $c; $i++) {
      $blocks['sape_block_n' . $i] = array(
        'info' => _sape_block_subject($i),
        'cache' => DRUPAL_NO_CACHE,
      );
    }
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function sape_block_view($delta = '') {
  if (variable_get('sape_enabled', 0) && !empty($delta) && !substr_compare($delta, 'sape_block_n', 0, 12)) {
    global $_sape;
    $d = (int)str_replace('sape_block_n', '', $delta);
    $c = variable_get('sape_blocks_count', SAPE_DEFAULT_BLOCKS_COUNT);

    $block  = array();
    $block['subject'] = _sape_block_subject($d);
    if (($d + 1) == $c) {
      $block['content'] = $_sape->return_links();
    }
    else {
      $block['content'] = $_sape->return_links(variable_get($delta, SAPE_DEFAULT_LINKS_IN_BLOCK_COUNT));
    }
    return $block;
  }
}

/**
 * Implements hook_block_configure().
 */
function sape_block_configure($delta = '') {
  $form = array();

  if (!empty($delta) && !substr_compare($delta, 'sape_block_n', 0, 12)) {
    $d = (int)str_replace('sape_block_n', '', $delta);
    $c = variable_get('sape_blocks_count', SAPE_DEFAULT_BLOCKS_COUNT);
    if ($d < $c) {
      $form[$delta] = array(
        '#type' => 'textfield',
        '#title' => t('Number of links to show in that block'),
        '#size' => 60,
        '#description' => t('Please, enter the links count in that block. Usual it is from 1 to 15.'),
        '#default_value' => variable_get($delta, SAPE_DEFAULT_LINKS_IN_BLOCK_COUNT),
      );
    }
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function sape_block_save($delta = '', $edit = array()) {
  if (!empty($delta) && !substr_compare($delta, 'sape_block_n', 0, 12)) {
    variable_set($delta, abs($edit[$delta]));
  }
}

/**
 * Implements hook_node_view().
 */
function sape_node_view($node, $view_mode = 'full') {
  global $_sape, $_sape_context;
  if (variable_get('sape_enabled', 0) &&
      variable_get('sape_context_enabled', 0) &&
      isset($node->content['body'][0]['#markup'])
  ) {
    $node->content['body'][0]['#markup'] = $_sape_context->replace_in_text_segment($node->content['body'][0]['#markup']);
  }
}

/**
 * Helper function.
 *
 * It generates the subject of a block, depending on $delta.
 *
 * @param $delta
 *   Integer. The block delta.
 *
 * @return
 *   String. Block subject.
 */
function _sape_block_subject($delta) {
  $c = variable_get('sape_blocks_count', SAPE_DEFAULT_BLOCKS_COUNT);
  $d = $delta + 1;
  if ($d == $c) {
    return t('SAPE Links #@num (last block)', array('@num' => $d));
  }
  else {
    return t('SAPE Links #@num', array('@num' => $d));
  }
}

/**
 * Helper function.
 *
 * Include sape.php file in conjunction with path to it.
 *
 * @param $path
 *   String. The path to file.
 *
 * @return
 *   String. The full path to file.
 */
function _sape_get_path($file_path) {
  if (substr($file_path, 0, 1) == '/') { // this is already absolute path
    return $file_path;
  }
  return DRUPAL_ROOT . '/' . $file_path;
}
