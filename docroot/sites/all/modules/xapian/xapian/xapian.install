<?php

/**
 * @file
 * Installation file for xapian search library as a drupal module
 */

/**
 * Implementation of hook_schema().
 */
function xapian_schema() {
  $schema['xapian_index_queue'] = array(
    'fields' => array(
      'xid' => array('type' => 'serial', 'not null' => TRUE, 'disp-width' => '11'),
      'added' => array('type' => 'int', 'not null' => TRUE, 'default' => 0),
      'indexed' => array('type' => 'int', 'not null' => TRUE, 'default' => 0),
      'priority' => array('type' => 'int', 'not null' => FALSE, 'default' => 0, 'disp-width' => '11'),
      'status' => array('type' => 'int', 'not null' => FALSE, 'default' => 0, 'disp-width' => '1'),
      'nid' => array('type' => 'int', 'not null' => TRUE, 'default' => 0, 'disp-width' => '11')),
    'primary key' => array('xid'),
    'indexes' => array(
      'nid' => array('nid', 'status', 'indexed')
    ),
    'unique keys' => array(
      'unique_nid' => array('nid'),
    ),
  );

  return $schema;
}


/**
 * Implementation of hook_uninstall().
 */
function xapian_uninstall() {
  variable_del('xapian_database_hostname');
  variable_del('xapian_database_path');
  variable_del('xapian_database_port');
  variable_del('xapian_database_type');
  variable_del('xapian_excluded_nodes');
  variable_del('xapian_index_immediately');
  variable_del('xapian_indexing_throttle');
  variable_del('xapian_log_queries');
  variable_del('xapian_node_count_type');
  variable_del('xapian_search_results_per_page');
  variable_del('xapian_stem_language');
  variable_del('xapian_write_database_hostname');
  variable_del('xapian_write_database_port');
}

/**
 * Implementation of hook_requirements().
 *
 * Report Xapian bindings version if available, otherwise display
 * include error.
 */
function xapian_requirements($phase) {
  $t = get_t();
  module_load_include('inc', 'xapian', 'xapian.lib');
  if (xapian_available()) {
    // Get Xapian bindings version, supporting PHP4 and PHP5 methods
    $version = xapian_get_version();
    if (version_compare($version, XAPIAN_MINIMUM_BINDINGS) < 0) {
      $severity = REQUIREMENT_ERROR;
      $version = $t('Your Xapian bindings are too old (%version).  You must install at least version %minimum.', array('%version' => $version, '%minimum' => XAPIAN_MINIMUM_BINDINGS));
    }
    else {
      $severity = REQUIREMENT_OK;
    }
  }
  else {
    $severity = REQUIREMENT_ERROR;
    $version = $t('You need to install Xapian bindings version >= %minimum. <em>%error</em>', array('%minimum' => XAPIAN_MINIMUM_BINDINGS, '%error' => $GLOBALS['xapian_include_error']));
  }

  return array(
    'xapian' => array(
      'title' => $t('Xapian bindings'),
      'value' => $version,
      'severity' => $severity,
    ),
  );
}

/**
 * Add 'indexed' column for tracking when content was last indexed.  This allows
 * us to isolate exactly which item fails on if we hit a redirect or run out of
 * memory.
 * Also, remove unpublished content from xapian indexes.
 */
function xapian_update_6001() {
  $ret = array();

  db_add_field($ret, 'xapian_index_queue', 'indexed',
    array(
      'type' => 'varchar',
      'length' => 32,
      'not null' => TRUE,
      'default' => '',
      'description' => 'Track when content was last indexed.',
    ),
    array('indexes' =>
      array(
        'indexed' => array('indexed'),
      ),
    )
  );

  $result = db_query('SELECT nid FROM {node} WHERE status <> 1');
  while ($unpublished = db_fetch_object($result)) {
    xapian_remove_node_from_index($unpublished);
    $ret[] = array('success' => TRUE, 'query' => t('Un-indexed unpublished node with nid !nid.', array('!nid' => $unpublished->nid)));
  }

  return $ret;
}

/**
 * Flush the cache so that the settings shows up on the search admin page.
 */
function xapian_update_6002() {
  cache_clear_all();
  menu_rebuild();
  return array();
}

/**
 * Make xapian_index_queue.nid unique.
 */
function xapian_update_6003() {
  $ret = array();
  db_add_unique_key($ret, 'xapian_index_queue', 'unique_nid', array('nid'));
  return $ret;
}

/**
 * Remove xapian_takeover variable.
 */
function xapian_update_7001() {
  variable_del('xapian_takeover');
  return t('Removed variable.');
}
