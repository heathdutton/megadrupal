<?php
/**
 * @file
 * Module file for State Transition Control.
 */

/**
 * Implements hook_help().
 */
function state_transition_control_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#state_transition_control':
      $output = '<p>' . t('This modules enable state transition control on select list fields.') . '</p>';
      $output .= '<p>' . t("If you enable state transition control on a field, you can set each (current) value of this field which values can be set in next time (if the field current value is a particular one). If you didn't set any transition for value than all values can be selected.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add state transition control settings to select field's edit form.
 */
function state_transition_control_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  // Only working with these types of fields.
  $controllable_fields = array('list_text', 'list_integer', 'list_float');

  if (in_array($form['#field']['type'], $controllable_fields) && $form['#instance']['widget']['type'] == 'options_select') {
    // Form container for AJAX callback.
    $form['#prefix'] = '<div id="field-state-transition-control-wrapper">';
    $form['#suffix'] = '</div>';

    // Additional custom field values will be automatically stored in the
    // database, so custom save mechanism is not necessary.
    $form['instance']['state_transition_control_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('State transition control'),
      '#collapsible' => FALSE,
      '#tree' => TRUE,
      '#description' => t('State transition control settings for %field field.', array('%field' => $form['#instance']['label'])),
    );
    $form['instance']['state_transition_control_fieldset']['state_transition_control'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable state transition control on this field.'),
      '#weight' => -99,
      '#default_value' => !empty($form['#instance']['state_transition_control_fieldset']['state_transition_control']),
      '#ajax' => array(
        'callback' => '_state_transition_control_field_edit_form_ajax_callback',
        'effect' => 'fade',
        'event' => 'change',
        'method' => 'replace',
        'wrapper' => 'field-state-transition-control-wrapper',
      ),
      // Client side logic: Disable checkbox if field_cardinality value != 1
      '#states' => array(
        'disabled' => array(
          ':input[name="field[cardinality]"]' => array(
            array('!value' => 1),
          ),
        ),
      ),
    );

    // Client side logic: Disable field_cardinality if field state transition
    // control enabled.
    $form['field']['cardinality']['#states'] = array(
      'disabled' => array(
        ':input[name="instance[state_transition_control_fieldset][state_transition_control]"]' => array(
          array('checked' => TRUE),
        ),
      ),
    );

    // Handle normal case when field state transition control has been set
    // previously.
    if ($form['instance']['state_transition_control_fieldset']['state_transition_control']['#default_value'] && !empty($form['instance']['default_value_widget'][$form['instance']['field_name']['#value']][LANGUAGE_NONE]['#options'])) {
      _state_transition_control_modify_existing_form_add_checkboxes($form, $form_state);
      _state_transition_control_modify_existing_form_add_or_modify_other_form_elements($form, $form_state);
    }

    // Handle the AJAX callback case.
    if (isset($form_state['values']['instance']['state_transition_control_fieldset']['state_transition_control'])) {
      // Field state transition control just checked in.
      if ($form_state['values']['instance']['state_transition_control_fieldset']['state_transition_control']) {
        _state_transition_control_modify_existing_form_add_or_modify_other_form_elements($form, $form_state, TRUE);
        // If allowed values not empty, then generate the checkboxes.
        if (!empty($form_state['values']['field']['settings']['allowed_values'])) {
          // First of all clean all previously generated checkboxes, because
          // user maybe removed one or more allowed values.
          _state_transition_control_modify_existing_form_remove_checkboxes($form, $form_state);
          // Add field current allowed values to state transition control
          // fieldset.
          _state_transition_control_modify_existing_form_add_checkboxes($form, $form_state, TRUE);
        }
      }
      // Field state transition control checked out. Clean up out mess.
      else {
        _state_transition_control_modify_existing_form_remove_checkboxes($form, $form_state);
        _state_transition_control_modify_existing_form_remove_and_reset_custom_form_elements($form, $form_state);
      }
    }
  }
}

/**
 * Custom AJAX callback.
 *
 * Return the complete form if user enable/disable state transition control
 * with state_transition_control checkbox.
 */
function _state_transition_control_field_edit_form_ajax_callback($form, &$form_state) {
  return $form;
}

/**
 * Helper function to add/modify form elements field settings form.
 *
 * @param bool $ajax_processed
 *   Determine that where we need to search the allowed values.
 */
function _state_transition_control_modify_existing_form_add_or_modify_other_form_elements(&$form, $form_state, $ajax_processed = FALSE) {
  $field_machine_name = $form['#field']['field_name'];
  $allowed_values = $ajax_processed ? $form_state['values']['field']['settings']['allowed_values'] : $form['#field']['settings']['allowed_values'];
  $is_state_transition_controlled = $ajax_processed ? $form_state['values']['instance']['state_transition_control_fieldset']['state_transition_control'] : $form['#instance']['state_transition_control_fieldset']['state_transition_control'];
  // Add every custom description text only once to fields. That's why we need
  // to predefine these texts first and after then check if the field current
  // description already have containing them. (Because of AJAX calls.)
  $allowed_values_desc = t('If you modify allowed values just check out and check in again the "%field" checkbox to update available options in %fieldset fieldset.', array(
    '%field' => $form['instance']['state_transition_control_fieldset']['state_transition_control']['#title'],
    "%fieldset" => $form['instance']['state_transition_control_fieldset']['#title'],
  ));
  $cardinality_desc = t('State transition control can be used only on single value fields!');
  $default_value_desc = t('If field state transition control enabled, then the field default value should be selected from allowed values list. By default it is the first item in the list.');

  // Add extra description to Cardinality field.
  if (strpos($form['field']['cardinality']['#description'], $cardinality_desc) === FALSE) {
    $form['field']['cardinality']['#description'] .= '<strong> ' . $cardinality_desc . '</strong>';
  }
  // Add extra description to Allowed values field.
  if (strpos($form['field']['settings']['allowed_values']['#description'], $allowed_values_desc) === FALSE) {
    $form['field']['settings']['allowed_values']['#description'] .= '<p><strong>' . $allowed_values_desc . '</p></strong>';
  }
  // Add extra description to Default value field. Also disable '_none' option
  // if state transition control enabled.
  if ($is_state_transition_controlled) {
    if (isset($form['instance']['default_value_widget'][$field_machine_name][LANGUAGE_NONE]['#options']['_none'])) {
      unset($form['instance']['default_value_widget'][$field_machine_name][LANGUAGE_NONE]['#options']['_none']);
    }
    $form['instance']['default_value_widget'][$field_machine_name][LANGUAGE_NONE]['#options'] = $allowed_values;
    if (strpos($form['instance']['default_value_widget']['#description'], $default_value_desc)) {
      $form['instance']['default_value_widget']['#description'] .= $default_value_desc;
    }
  }
  // Add extra validator to form.
  if (!in_array('state_transition_control_form_field_ui_field_edit_form_validate', $form['#validate'])) {
    $form['#validate'][] = 'state_transition_control_form_field_ui_field_edit_form_validate';
  }
}

/**
 * Helper function to remove custom modifications from field settings form.
 */
function _state_transition_control_modify_existing_form_remove_and_reset_custom_form_elements(&$form, $form_state) {
  $field_machine_name = $form['#field']['field_name'];
  $stc_validator = array_search('state_transition_control_form_field_ui_field_edit_form_validate', $form['#validate']);
  // Remove additional validator.
  if ($stc_validator !== FALSE) {
    unset($form['#validate'][$stc_validator]);
  }
  // Add removed _none option to default value widget.
  $form['instance']['default_value_widget'][$field_machine_name][LANGUAGE_NONE]['#options'] = array('_none' => t('None')) + $form['instance']['default_value_widget'][$field_machine_name][LANGUAGE_NONE]['#options'];
}

/**
 * Generate checkboxes from allowed values for field state transition control.
 *
 * @param bool $ajax_processed
 *   Determine that where we need to search the allowed values.
 */
function _state_transition_control_modify_existing_form_add_checkboxes(&$form, $form_state, $ajax_processed = FALSE) {
  $allowed_values = $ajax_processed ? $form_state['values']['field']['settings']['allowed_values'] : $form['#field']['settings']['allowed_values'];

  foreach ($allowed_values as $key => $value) {
    $form['instance']['state_transition_control_fieldset'][$key] = array(
      '#type' => 'checkboxes',
      '#title' => $value,
      '#options' => $allowed_values,
      '#default_value' => !empty($form['#instance']['state_transition_control_fieldset'][$key]) ? _state_transition_control_get_selected_values($form['#instance']['state_transition_control_fieldset'][$key]) : array($key),
      '#description' => t('If this field current value is "@value", which values can be set in next time? ("@value" value have to be checked too, because the current value also have to be visible in select!)</strong>', array(
        '@value' => $value,
      )),
    );
  }
}

/**
 * Remove generated checkboxes if they become unnecessary.
 */
function _state_transition_control_modify_existing_form_remove_checkboxes(&$form, $form_state) {
  foreach (element_children($form['instance']['state_transition_control_fieldset']) as $field) {
    if ($form['instance']['state_transition_control_fieldset'][$field]['#type'] == 'checkboxes') {
      unset($form['instance']['state_transition_control_fieldset'][$field]);
    }
  }
}

/**
 * Helper function to determine which values have been selected.
 *
 * Neither this function we can not distinguish between zero or FALSE values.
 *
 * @param array $all_values
 *   An associative array of checkbox values.
 *
 * @return array
 *   Array of truly selected values.
 */
function _state_transition_control_get_selected_values(array $all_values) {
  $selected_values = array();
  foreach ($all_values as $key => $value) {
    // If value not equals with FALSE, then it is selected.
    if ($value !== 0) {
      $selected_values[] = $key;
    }
  }
  return $selected_values;
}

/**
 * Additional form validation handler for form_field_ui_field_edit_form().
 */
function state_transition_control_form_field_ui_field_edit_form_validate($form, &$form_state) {
  if ($form_state['values']['instance']['state_transition_control_fieldset']['state_transition_control']) {
    // Sanity check: State transition control can't be used in multivalued
    // fields!
    if ($form_state['values']['field']['cardinality'] != 1) {
      form_set_error('field][cardinality', t('State transition control can be used only single value fields!'));
    }
    // Check if user did not checked field current value as an option.
    foreach ($form_state['values']['instance']['state_transition_control_fieldset'] as $key => $values) {
      if ($key !== 'state_transition_control' && $values[$key] === 0) {
        form_set_error('instance][state_transition_control_fieldset][' . $key, t('You need to check the "@value" checkbox in @value state checkboxes.', array('@value' => $form['instance']['state_transition_control_fieldset'][$key]["#title"])));
      }
    }
  }
}

/**
 * Change available options in select field if it's state transition controlled.
 *
 * Implements hook_widget_WIDGET_TYPE_form_alter().
 */
function state_transition_control_field_widget_options_select_form_alter(&$element, &$form_state, $context) {
  if (!empty($element['#entity']) && !empty($context['instance']['state_transition_control_fieldset']) && !empty($element['#default_value'])) {
    $default_value = $element['#default_value'][0];
    // Check if default value has been set or not.
    if (!empty($context['instance']['state_transition_control_fieldset'][$default_value])) {
      // Apply state transition control settings on this field values.
      $available_values = _state_transition_control_get_selected_values($context['instance']['state_transition_control_fieldset'][$default_value]);
      foreach ($element['#options'] as $key => $value) {
        if (!in_array($key, $available_values) || $key === '_none') {
          unset($element['#options'][$key]);
        }
      }
    }
  }
}

/**
 * Add this module to exported feature's dependencies when it's necessary.
 *
 * Implementation of hook_features_export_alter().
 */
function state_transition_control_features_export_alter(&$export, $module_name) {
  if (!empty($export['features']['field_instance'])) {
    foreach ($export['features']['field_instance'] as $field_instance_text) {
      list($entity_type, $bundle_name, $field_name) = explode('-', $field_instance_text);
      $instance = field_info_instance($entity_type, $field_name, $bundle_name);
      // If field state transition control enabled.
      if (isset($instance['state_transition_control_fieldset']['state_transition_control']) && $instance['state_transition_control_fieldset']['state_transition_control']) {
        if (!isset($export['dependencies']['state_transition_control'])) {
          $export['dependencies']['state_transition_control'] = 'state_transition_control';
        }
        break;
      }
    }
  }
}
