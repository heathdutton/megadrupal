<?php

/**
 * @file
 * The core that allows saving/deleting rules and applying rules to text formats
 */

/**
 * Implements hook_menu().
 */
function querypath_filter_menu() {
  $items = array();
  $items['admin/config/content/querypath_filter'] = array(
    'title' => 'QueryPath filter',
    'description' => 'Manage the QueryPath filter rules.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('querypath_filter_overview_form'),
    'access arguments' => array('administer querypath filter rules'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'querypath_filter.admin.inc',
  );
  $items['admin/config/content/querypath_filter/rule/add'] = array(
    'title' => 'Add rule',
    'description' => 'Add a new QueryPath filter rule.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('querypath_filter_admin_rule_form'),
    'access arguments' => array('administer querypath filter rules'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'querypath_filter.admin.inc',
  );
  $items['admin/config/content/querypath_filter/rule/%querypath_filter_rule/edit'] = array(
    'title' => 'Edit rule',
    'description' => 'Edit a QueryPath filter rule.',
    'title callback' => '_querypath_filter_form_title',
    'title arguments' => array(5, 'edit'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('querypath_filter_admin_rule_form', 5),
    'access arguments' => array('administer querypath filter rules'),
    'type' => MENU_CALLBACK,
    'file' => 'querypath_filter.admin.inc',
  );
  $items['admin/config/content/querypath_filter/rule/%querypath_filter_rule/delete'] = array(
    'title' => 'Delete rule',
    'description' => 'Delete a QueryPath filter rule.',
    'title callback' => '_querypath_filter_form_title',
    'title arguments' => array(5, 'delete'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('querypath_filter_item_delete_form', 5),
    'access arguments' => array('administer querypath filter rules'),
    'type' => MENU_CALLBACK,
    'file' => 'querypath_filter.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function querypath_filter_permission() {
  return array(
    'administer querypath filter rules' => array(
      'title' => t('Administer rules'),
      'description' => t('Let user define rules to be applied to a text format. Generally for themers.'),
    ),
  );
}

/****************************** Text filters ******************************/

/**
 * Implements hook_filter_info().
 */
function querypath_filter_filter_info() {
  $filters = array();
  $filters['querypath_filter'] = array(
    'title' => t('QueryPath filter'),
    'description' => t('Custom rules using QueryPath. Please be careful when setting the order of the filters.'),
    'prepare callback' => '_querypath_filter_prepare',
    'process callback' => '_querypath_filter_process',
    'tips callback' => '_querypath_filter_tips',
  );
  return $filters;
}

/**
 * Implements filter prepare callback.
 */
function _querypath_filter_prepare($text, $filter, $format, $langcode, $cache, $cache_id) {
  return $text;
}

/**
 * Implements filter process callback.
 */
function _querypath_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  $qp = htmlqp(mb_convert_encoding($text, variable_get('querypath_filter_encoding', 'utf-8'), 'auto'));
  foreach (querypath_filter_get_active_rules() as $rule) {
    // Reset cursor to top body.
    $qp->top('body');
    // Process rule.
    $qp->find($rule->qp_selector);
    $qp->{$rule->qp_action}(filter_xss($rule->qp_value));
  }
  return $qp->top('body')->innerHTML();
}

/**
 * Implements filter tips callback.
 */
function _querypath_filter_tips($filter, $format, $long) {
  $tips = '';
  if ($long) {
    $rules = querypath_filter_get_active_rules();
    if (count($rules)) {
      $tips .= t('HTML code will be processed through following rule(s) before being displayed:');
      $tips .= '<ul>';
      foreach ($rules as $rule) {
        $tips .= '<li>' . $rule->description . '</li>';
      }
      $tips .= '</ul>';
    }
  }
  else {
    $tips .= t('HTML code will be processed through custom rule(s) before being displayed.');
  }
  return $tips;
}


/***************************** Theme functions *******************************/

/**
 * Implements hook_theme().
 */
function querypath_filter_theme() {
  return array(
    'querypath_filter_overview_form' => array(
      'file' => 'querypath_filter.admin.inc',
      'render element' => 'form',
    ),
  );
}


/*************************** QueryPath functions *****************************/

/**
 * Returns an associative array of possible QueryPath actions.
 * @return array
 *   Array keyed with QueryPath action and action name as value
 */
function _querypath_filter_get_actions() {
  $actions = array(
    'addClass' => 'addClass',
    'removeClass' => 'removeClass',
    'attr' => 'attr',
    'removeAttr' => 'removeAttr',
    'append' => 'append',
    'prepend' => 'prepend',
    'after' => 'after',
    'before' => 'before',
    'html' => 'html',
  );
  drupal_alter('querypath_filter_actions', $actions);
  return $actions;
}

/***************************** Helper functions *******************************/

/**
 * Get all rules.
 * @return array
 *   Array containing rule objects
 */
function querypath_filter_get_rules() {
  $rules = array();
  $rows = db_select('querypath_filter_rules', 'qfr')
    ->fields('qfr', array('rid'))
    ->orderBy('weight')
    ->execute();
  foreach ($rows as $row) {
    $rules[$row->rid] = querypath_filter_rule_load($row->rid);
  }
  return $rules;
}

/**
 * Get active rules.
 * @return array
 *   Array containing rule objects
 */
function querypath_filter_get_active_rules() {
  $rules = array();
  $rows = db_select('querypath_filter_rules', 'qfr')
    ->fields('qfr', array('rid'))
    ->condition('status', 1)
    ->orderBy('weight')
    ->execute();
  foreach ($rows as $row) {
    $rules[$row->rid] = querypath_filter_rule_load($row->rid);
  }
  return $rules;
}

/**
 * Returns an empty rule object.
 * @return object
 *   Empty rule object
 */
function _querypath_filter_rule_init() {
  $rule = new stdClass();
  $rule->rid = NULL;
  $rule->title = NULL;
  $rule->description = NULL;
  $rule->qp_selector = NULL;
  $rule->qp_action = NULL;
  $rule->qp_value = NULL;
  $rule->status = 1;
  $rule->weight = 0;
  return $rule;
}


/****************************** CRUD functions ********************************/

/**
 * Saves a rule object.
 *
 * @param object $rule
 *   Rule object
 *
 * @return mixed
 *   Rule object of FALSE if an error occured
 */
function querypath_filter_rule_save($rule) {
  $result = FALSE;
  if (!empty($rule->rid)) {
    $result = db_update('querypath_filter_rules')
      ->fields(array(
        'title' => $rule->title,
        'description' => $rule->description,
        'qp_selector' => $rule->qp_selector,
        'qp_action' => $rule->qp_action,
        'qp_value' => $rule->qp_value,
        'status' => $rule->status,
        'weight' => $rule->weight,
      ))
      ->condition('rid', $rule->rid, '=')
      ->execute();
  }
  else {
    $result = db_insert('querypath_filter_rules')
      ->fields(array(
        'title' => $rule->title,
        'description' => $rule->description,
        'qp_selector' => $rule->qp_selector,
        'qp_action' => $rule->qp_action,
        'qp_value' => $rule->qp_value,
        'status' => $rule->status,
        'weight' => $rule->weight,
      ))
      ->execute();
    if ($result) {
      // Assign rid to rule.
      $rule->rid = $result;
    }
  }

  if ($result) {
    return $rule;
  }
  return FALSE;
}

/**
 * Loads a rule object.
 *
 * @param int $rid
 *   Rule id
 * @param boolean $reset
 *   Wether to reset the static cache
 *
 * @return object
 *   Rule object
 */
function querypath_filter_rule_load($rid, $reset = FALSE) {
  static $rules = array();
  if ($reset) {
    $rules = array();
  }

  if (!empty($rules[$rid])) {
    return $rules[$rid];
  }

  // Load rule information.
  $result = db_select('querypath_filter_rules', 'qfr')
    ->fields('qfr')
    ->condition('rid', $rid, '=')
    ->execute();
  if ($rule = $result->fetchObject()) {
    return $rule;
  }
  return FALSE;
}

/**
 * Deletes a rule object.
 *
 * @param object $item
 *   Rule object
 *
 * @return object
 *   Rule object
 */
function querypath_filter_rule_delete($item) {
  $result = db_delete('querypath_filter_rules')->condition('rid', $item->rid)->execute();
  return $result;
}
