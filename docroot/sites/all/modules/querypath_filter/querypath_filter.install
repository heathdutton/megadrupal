<?php
/**
 * @file
 * Install, update, and uninstall functions for the QueryPath filter module.
 */

/**
 * Implements hook_install().
 */
function querypath_filter_install() {
  // Install default rules.
  foreach (_querypath_filter_default_rules() as $rule) {
    querypath_filter_rule_save($rule);
  }
}

/**
 * Implements hook_uninstall().
 */
function querypath_filter_uninstall() {
  // Delete variables.
  variable_del('querypath_filter_encoding');
}

/**
 * Implements hook_schema().
 */
function querypath_filter_schema() {
  $schema = array();

  $schema['querypath_filter_rules'] = array(
    'description' => 'Table for storing querypath rules.',
    'fields' => array(
      'rid' => array(
        'description' => 'Rule identifier.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'Title of the rule.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'Description of the rule.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'qp_selector' => array(
        'description' => 'QueryPath selector.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'qp_action' => array(
        'description' => 'QueryPath action.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'qp_value' => array(
        'description' => 'QueryPath value for action.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'status' => array(
        'description' => 'Boolean value wether the rule is active (1) or not (0).',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'weight' => array(
        'description' => 'Weight of the rule.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('rid'),
  );
  return $schema;
}

/**
 * Returns default rules.
 * @return array
 *   Array of rule objects
 */
function _querypath_filter_default_rules() {
  $rules = array();

  // List first.
  $rule = new stdClass();
  $rule->title = st('List item first');
  $rule->description = st('Adds first class on first item of lists');
  $rule->qp_selector = 'li:first-child';
  $rule->qp_action = 'addClass';
  $rule->qp_value = 'first';
  $rule->status = 1;
  $rule->weight = 1;
  $rules[] = $rule;

  // List last.
  $rule = new stdClass();
  $rule->title = st('List item last');
  $rule->description = st('Adds last class on last item of lists');
  $rule->qp_selector = 'li:last-child';
  $rule->qp_action = 'addClass';
  $rule->qp_value = 'last';
  $rule->status = 1;
  $rule->weight = 2;
  $rules[] = $rule;

  // List odd.
  $rule = new stdClass();
  $rule->title = st('List item odd');
  $rule->description = st('Adds odd class on odd items of lists');
  $rule->qp_selector = 'li:nth-child(2n+1)';
  $rule->qp_action = 'addClass';
  $rule->qp_value = 'odd';
  $rule->status = 1;
  $rule->weight = 3;
  $rules[] = $rule;

  // List even.
  $rule = new stdClass();
  $rule->title = st('List item even');
  $rule->description = st('Adds even class on even items of lists');
  $rule->qp_selector = 'li:nth-child(2n)';
  $rule->qp_action = 'addClass';
  $rule->qp_value = 'even';
  $rule->status = 1;
  $rule->weight = 4;
  $rules[] = $rule;

  // Table first row.
  $rule = new stdClass();
  $rule->title = st('Table row first');
  $rule->description = st('Adds first class on first row of tables');
  $rule->qp_selector = 'table tr:first-child';
  $rule->qp_action = 'addClass';
  $rule->qp_value = 'first';
  $rule->status = 1;
  $rule->weight = 5;
  $rules[] = $rule;

  // Table last row.
  $rule = new stdClass();
  $rule->title = st('Table row last');
  $rule->description = st('Adds last class on last row of tables');
  $rule->qp_selector = 'table tr:last-child';
  $rule->qp_action = 'addClass';
  $rule->qp_value = 'last';
  $rule->status = 1;
  $rule->weight = 6;
  $rules[] = $rule;

  // Table odd.
  $rule = new stdClass();
  $rule->title = st('Table row odd');
  $rule->description = st('Adds odd class on odd rows of tables');
  $rule->qp_selector = 'table tr:nth-child(2n+1)';
  $rule->qp_action = 'addClass';
  $rule->qp_value = 'odd';
  $rule->status = 1;
  $rule->weight = 7;
  $rules[] = $rule;

  // Table even.
  $rule = new stdClass();
  $rule->title = st('Table row even');
  $rule->description = st('Adds even class on even rows of tables');
  $rule->qp_selector = 'table tr:nth-child(2n)';
  $rule->qp_action = 'addClass';
  $rule->qp_value = 'even';
  $rule->status = 1;
  $rule->weight = 8;
  $rules[] = $rule;

  return $rules;
}
