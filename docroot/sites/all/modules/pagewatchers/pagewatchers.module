<?php

/**
 * Implementation of hook_permission().
 */
function pagewatchers_permission() {
  return array(
      'administer pagewatchers' => array(
      'title' => t('Administer PageWatchers'),
      'description' => t('Perform administration tasks for PageWatchers module.'),
    ),
  );
}

/**
 * Implementation of hook_init().
 */
function pagewatchers_init() {
  if (arg(0) != 'ajax') {
    global $user;
    // Initialise a session id for anonymous users if page watching is enabled for them
    if ($user->uid == 0 && variable_get('pagewatchers_for_anonymous', 0)) {
      if (!isset($_COOKIE['pagewatchers_anonymous_session_id'])) {
        $sid = session_id();
        $cookie_params = session_get_cookie_params();
        setcookie('pagewatchers_anonymous_session_id', $sid, 0, '/', $cookie_params['domain'], FALSE, FALSE);
      }
    }
    drupal_add_js(drupal_get_path('module', 'pagewatchers') . '/pagewatchers.js');
    drupal_add_js(array('PageWatchers' => array(
        'url'            => _pagewatchers_get_url(),
        'updateInterval' => variable_get('pagewatchers_ajax_update_interval', 60) * 1000,
      )), 'setting');
  }
}

/**
 * Implementation of hook_cron().
 */
function pagewatchers_cron() {
  // Clear old page views
  db_delete('pagewatchers_per_page_sessions')
    ->condition('timestamp', variable_get('pagewatchers_ajax_update_interval', 60) * 4, "<") // 4 arbitrarily chosen, not a big deal!
    ->execute();
}

/**
 * Implementation of hook_menu().
 */
function pagewatchers_menu() {
  $items = array();

  $items['ajax/pagewatchers/count'] = array(
    'access callback'  => TRUE,
    'page callback'    => 'pagewatchers_count_page',
  );

  $items['admin/config/pagewatchers'] = array(
    'title'            => 'PageWatchers',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('_pagewatchers_settings_form'),
    'access arguments' => array('administer pagewatchers'),
    'file'             => 'pagewatchers.admin.inc',
    'type'             => MENU_NORMAL_ITEM,
  );

  return $items;
}

function pagewatchers_count_page() {
  global $user;
  $url = $_GET['url'];
  $sid = FALSE;

  if ($user->uid > 0) {
    $sid = $user->uid;

    if (isset($_COOKIE['pagewatchers_anonymous_session_id'])) {
      // A user is logged in, and there's a cookie, this means that this cookie is obsolete
      // All page presences with that cookie are to be removed
      // And the cookie itself is to be removed
      pagewatchers_update_delete($_COOKIE['pagewatchers_anonymous_session_id']);
      setcookie("pagewatchers_anonymous_session_id", "", time() - 3600);
    }
  }
  elseif (variable_get('pagewatchers_for_anonymous', 0)) {
    if (isset($_COOKIE['pagewatchers_anonymous_session_id'])) {
      $sid = $_COOKIE['pagewatchers_anonymous_session_id'];
    }
  }

  if ($sid) {
    pagewatchers_update_count($url, $sid);
  }

  $count = pagewatchers_get_count($url);

  drupal_json_output(array('count' => $count));
}

/**
 * Implementation of hook_block_info().
 */
function pagewatchers_block_info() {
  $blocks = array();

  $blocks['users_on_page'] = array(
    'info' => t('Online Users On Page'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function pagewatchers_block_view($delta = '') {
  $block['subject'] = '';
  $block['content'] = '';

  switch ($delta) {
    case 'users_on_page':
      $block['subject'] = t('Currently Here');
      $block['content'] = theme('pagewatchers_users_online', array('count' => pagewatchers_get_count(_pagewatchers_get_url())));
  }

  return $block;
}

/**
 * Implementation of hook_theme().
 */
function pagewatchers_theme($existing, $type, $theme, $path) {
  return array(
    'pagewatchers_users_online' => array(
      'variables' => array(
        'count' => 0,
      ),
    ),
  );
}

/*******************
 * THEME FUNCTIONS *
 *******************/
function theme_pagewatchers_users_online($variables) {
  $html = '<div id="pagewatchers-display">';
  $html .=  '<span style="font-size: 2em; color: #0F0;">&bull;</span>&nbsp;';
  $html .=  '<span class="pagewatchers--live-count" id="pagewatchers-display-count">';
  $html .=    $variables['count'];
  $html .=  '</span>';
  $html .=  '<span id="pagewatchers-display-text">';
  $html .=    ' users';
  $html .=  '</span>';
  $html .=   '</span>';
  $html .= '</div>';

  return $html;
}

/********************
 * HELPER FUNCTIONS *
 ********************/
function _pagewatchers_get_url() {
  $url = implode('/', arg());

  // Some hard-coded modifications to some specific URLs
  switch ($url) {
    case 'user':
      global $user;
      if ($user->uid > 0) {
        $url .= '/' . $user->uid;
      }
      break;
    default:
      // Nothing here!
  }

  return $url;
}

/*****************
 * API FUNCTIONS *
 *****************/
function pagewatchers_update_delete($sid) {
  $continued_session = db_query("SELECT COUNT(url) FROM {pagewatchers_per_page_sessions} WHERE url = :url AND sid = :sid", array(':url' => $url, ':sid' => $sid))->fetchField();
  db_delete('pagewatchers_per_page_sessions')
    ->condition('sid', $sid)
    ->execute();
}

function pagewatchers_update_count($url, $sid) {
  // Update the page-user session
  $continued_session = db_query("SELECT COUNT(url) FROM {pagewatchers_per_page_sessions} WHERE url = :url AND sid = :sid", array(':url' => $url, ':sid' => $sid))->fetchField();
  if ($continued_session) {
    db_update('pagewatchers_per_page_sessions')
      ->fields(array('timestamp' => time()))
      ->condition('url', $url, '=')
      ->condition('sid', $sid, '=')
      ->execute();
  }
  else {
    db_insert('pagewatchers_per_page_sessions')
      ->fields(array(
        'url' => $url,
        'sid' => $sid,
        'timestamp' => time(),
      ))
      ->execute();
  }
}

function pagewatchers_get_count($url) {
  $cache_lifetime = variable_get('pagewatchers_cache_duration', 0);
  $cache_cutoff_time = time() - $cache_lifetime;

  $caching_on = (boolean)$cache_lifetime;

  // Check cache first, if new return it, if old clear it
  $cached_result = db_query("SELECT count, timestamp FROM {cache_pagewatchers} WHERE url = :url AND timestamp > :cache_cutoff_time", array(':url' => $url, ':cache_cutoff_time' => $cache_cutoff_time))->fetchAssoc();

  if ($cached_result === FALSE || (time() - $cached_result['timestamp'] > $cache_lifetime) || !$caching_on) {
    // No cache or cache is too old, so re-calculate it
    $user_offline_cutoff_time = time() - variable_get('pagewatchers_ajax_update_interval', 60) - 15; // Add some extra time for slow AJAX updates

    $count_result = db_query("SELECT COUNT(url) count FROM {pagewatchers_per_page_sessions} WHERE url = :url AND timestamp > :timestamp", array(':url' => $url, ':timestamp' => $user_offline_cutoff_time))->fetchAssoc();
    $count = $count_result['count'];

    // Cache is too old, update it!
    if ($cached_result && $caching_on) {
      db_update('cache_pagewatchers')
        ->fields(array('timestamp' => time(), 'count' => $count))
        ->condition('url', $url, '=')
        ->execute();
    }
  }
  else {
    $count = $cached_result['count'];
  }

  // Cache new $count
  if ($cached_result === FALSE && $caching_on) {
    db_insert('cache_pagewatchers')
      ->fields(array(
        'url' => $url,
        'count' => $count,
        'timestamp' => time(),
      ))
      ->execute();
  }

  return $count;
}