<?php

/**
 * @file
 *   fieldgroup_menu.module
 *   Provide a sub-menu item from fieldgroup attached to an entity
 *
 * @developers:
 *    Gabor Szanto <hello@szantogabor.com>
 *    http://szantogabor.com
 *
 */

/**
 * Implements hook_menu().
 */
function fieldgroup_menu_menu() {
  $items['admin/structure/fieldgroup_menu'] = array(
    'title' => 'Fieldgroup menu items',
    'page callback' => 'fieldgroup_menu_admin_page',
    'access arguments' => array('administer pathauto'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
    'file' => 'fieldgroup_menu.admin.inc',
  );
  $items['admin/structure/fieldgroup_menu/edit/%'] = array(
    'title' => 'Edit fieldgroup menu item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fieldgroup_menu_edit_form', 4),
    'access arguments' => array('administer pathauto'),
    'type' => MENU_CALLBACK,
    'weight' => 10,
    'file' => 'fieldgroup_menu.admin.inc',
  );

  if ($groups = _fieldgroup_get_field_groups()) {
    foreach ($groups as $group) {
      if ($group->format_type == 'menu_item' && !empty($group->children)) {
        $entity_type = $group->entity_type;
        $entity_info = entity_get_info($entity_type);
        $bundle = $group->bundle;
        //@todo: need a better way to get the first argument, like $entity_info->uri callback
        $path = $entity_info['base table'];
        $path_suffix = $group->format_settings['instance_settings']['path'];
        $title = $group->format_settings['label'];

        if ($group->format_settings['formatter'] == 'pages') {
          $menu_type = MENU_NORMAL_ITEM ;
        }
        else {
          $menu_type = MENU_LOCAL_TASK ;
        }
        //@todo: tmp this works only with nodes
        $items["$path/%$entity_type/$path_suffix"] = array(
          'title' => $title,
          'page callback' => 'fieldgroup_menu_page_view',
          'page arguments' => array(1, $group),
          'access callback' => 'fieldgroup_menu_access',
          'access arguments' => array('view', 1, $group),
          'type' => $menu_type,
          'weight' => $group->weight,
        );
        //dsm(get_defined_vars());
      }
    }
  }

  return $items;
}

/**
 * Implements hook_field_group_formatter_info().
 */
function fieldgroup_menu_field_group_formatter_info() {
  return array(
    'display' => array(
      'menu_item' => array(
        'label' => t('Menu item'),
        'description' => t('This fieldgroup renders the inner content in own menu item.'),
        'format_types' => array('tabs', 'pages'),
        'instance_settings' => array(
          'path' => '',
          'block' => 0,
          'hide_if_empty' => 0,
          ),
        'default_formatter' => 'tabs',
      ),
    ),
  );
}

/**
 * Implements hook_field_group_format_settings().
 *
 * @param object $group
 */
function fieldgroup_menu_field_group_format_settings($group) {
  $form = array();
  switch ($group->format_type) {
  case 'menu_item':
    $form['instance_settings']['path'] = array(
      '#title' => t('Path'),
      '#type' => 'textfield',
      '#default_value' => isset($group->format_settings['instance_settings']['path']) ?
        $group->format_settings['instance_settings']['path'] : '',
      '#description' => t('The path after "node/123" path. If you set one item, eg. "description", a primary level tab
        will be generated. If two items are set, when the first item is "view", eg. "view/description", a second level
        tab will be shown on node page'),
      '#weight' => 3,
      '#required' => TRUE,
      //'#element_validate' => array('fieldgroup_menu_validate_path'),
    );
    $form['instance_settings']['block'] = array(
      '#title' => t('Block'),
      '#type' => 'checkbox',
      '#default_value' => isset($group->format_settings['instance_settings']['block']) ?
        $group->format_settings['instance_settings']['block'] : 0,
      '#description' => t('Create link to this item in <em>Fieldgroup menu</em> block.'),
    );
    $form['instance_settings']['hide_if_empty'] = array(
      '#title' => t('Hide if empty'),
      '#type' => 'checkbox',
      '#default_value' => isset($group->format_settings['instance_settings']['hide_if_empty']) ?
        $group->format_settings['instance_settings']['hide_if_empty'] : 0,
      '#description' => t('Hide the created item\'s link in block, and show access denied when view this menu item,
        when it do not have rendered content.'),
    );
//    $form['instance_settings']['path'] = array(
//      '#title' => t('Block'),
//      '#type' => 'checkbox',
//    );
  }
  return $form;
}

/**
 * Validate the entered css class from the submitted format settings.
 * @param Array $element The validated element
 * @param Array $form_state The state of the form.
 */
//function fieldgroup_menu_validate_path($element, &$form_state) {
  //!preg_match('!^[A-Za-z0-9-_ ]+$!', $form_state['values']['fields'][$form_state['formatter_settings_edit']]['format_settings']['settings']['instance_settings']['path'])
//  if (!empty($form_state['values']['fields'][$form_state['formatter_settings_edit']]['format_settings']['settings']['instance_settings']['path'])) {
//    form_error($element, t('The css class must include only letters, numbers, underscores and dashes.'));
//  }
//}

/**
 * Implementation of hook_form_field_ui_display_overview_form_alter().
 */
function fieldgroup_menu_form_field_ui_display_overview_form_alter(&$form, &$form_state) {
  //@todo: Why I can call form_submit to set my function to end of #form_submit??
  //the field_group module's submit is very agressive here..
  //_module_implements_alter can't work..
  $form['#after_build'][] = 'fieldgroup_menu_set_submit';
}

/*
 * Custom after_build function to _field_ui_display_overview_form()
 *
 * @see fieldgroup_menu_form_field_ui_display_overview_form_alter(&$form, &$form_state)
 */
function fieldgroup_menu_set_submit($form, &$form_state) {
  $form['#submit'][] = 'fieldgroup_menu_flush_cache';
  return $form;
}

/*
 * Custom submit function for form_field_ui_display_overview_form.
 *
 * @see fieldgroup_menu_form_field_ui_display_overview_form_alter(&$form, &$form_state)
 */
function fieldgroup_menu_flush_cache($form, &$form_state) {
  menu_rebuild();
}

/*
 * Custom page view function for fieldgroup based pages
 * @param $entity
 *   It's now only a loaded node object.
 * @param $entity_type
 *   An object of group. This is the used fieldgroup in this fieldgroup menu path.
 */
function fieldgroup_menu_page_view($entity, $group) {
  $view = node_view($entity);

  foreach (element_children($view) as $child) {
    if (!in_array($child, $group->children)) {
      unset($view[$child]);
    }
  }
  return drupal_render($view);
}

/*
 * Implements hook_entity_view_alter()
 */
function fieldgroup_menu_entity_view_alter(&$build, $type) {
  if (isset($build['#groups']) && !arg(2)) {
    foreach ($build['#groups'] as $group) {
      if ($group->format_type == 'menu_item') {
        foreach ($build['#group_children'] as $key => $value) {
          if ($value == $group->group_name) {
            unset($build[$key]);
          }
        }
      }
    }
  }
}

/*
 * Helper function to get all fieldgroups in an array.
 */
function _fieldgroup_get_field_groups($group_name = NULL) {
  $groups = &drupal_static(__FUNCTION__);

  if (!isset($groups)) {
    $groups = array();
  }
  else {
    return $groups;
  }

  if ($fieldgroups = field_group_read_groups()) {
  foreach ($fieldgroups as $entity) {
    foreach ($entity as $bundle) {
      foreach ($bundle as $mode) {
        foreach ($mode as $group) {
          if (!$group_name) {
            $groups[$group->group_name] = $group;
          }
          else {
            if ($group_name == $group->name) {
              return $group;
            }
          }
        }
      }
    }
  }
}
//dsm(get_defined_vars());
return $groups;
}

/*
 * Helper function to get shorted array of links to fieldset menu items
 */
function fieldgroup_menu_get_links() {
  $links = array();
  if ($node = menu_get_object('node')) {
    $groups = _fieldgroup_get_field_groups();
    foreach ($groups as $group) {
      if ($group->bundle == $node->type) {
        $group_path = isset($group->format_settings['instance_settings']['path']) ? $group->format_settings['instance_settings']['path'] : NULL;
        $block = isset($group->format_settings['instance_settings']['block']) ? $group->format_settings['instance_settings']['block'] : 0;
        //This provide a link to the original node, if fieldgroup doesn't have any child.
        if (empty($group->children)) {
          $links[$group->weight] = l($group->label, "node/$node->nid");
        }
        elseif (!is_null($group_path) && $block != 0) {
          $menu_item = menu_get_item("node/$node->nid/$group_path");
          if ($menu_item['access']) {
            $links[$group->weight] = l($group->label, "node/$node->nid/$group_path");
          }

        }
      }
    }
    if (!empty($links)) {
      ksort($links);
      return array_values($links);
    }
  }
}

/*
 * Implements hook_block_info()
 */
function fieldgroup_menu_block_info() {
  $blocks['fieldgroup_menu'] = array(
    'info' => t('Fieldgroup menu'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/*
 * Implements hook_block_view()
 */
function fieldgroup_menu_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'fieldgroup_menu':
      if (fieldgroup_menu_get_links()) {
        $block['subject'] = t('Fieldgroup menu');
        $block['content'] = array(
          'links' => array(
            '#theme' => 'item_list',
            '#items' => fieldgroup_menu_get_links(),
            '#attributes' => array(
              'class' => 'menu fieldgroup-menu'
            ),
          ),
        );
      }
      break;
  }
  return $block;
}

/*
 * Custom menu access callback to prevent create unused links.
 */
function fieldgroup_menu_access($op, $node, $group) {
  // If user doesn't have access to the original node, never get access to it's field_group based menuitems.
  if (!node_access($op, $node)) {
    return FALSE;
  }
  else {
    $hide_if_empty = isset($group->format_settings['instance_settings']['hide_if_empty']) ? $group->format_settings['instance_settings']['hide_if_empty'] : 0;
    if ($hide_if_empty == 1) {
      foreach ($group->children as $key => $value) {
        $field_array = field_view_field('node', $node, $value, 'full');
        //@todo is this correct value check???
        if (isset($field_array['#items']) && !empty($field_array['#items'])) {
          return TRUE;
        }
      }
    }
    else {
      return TRUE;
    }
  }
}

/**
 * Helper function to set path alias to fieldset menu items
 */
function fieldgroup_menu_set_path($node) {
  $node_path = 'node/' . $node->nid;
  $node_alias = path_load($node_path);

  $hrefs = array();
  $groups = _fieldgroup_get_field_groups();
  foreach ($groups as $group) {
    if (isset($group->format_settings['instance_settings']['path'])) {
      $group_path = $group->format_settings['instance_settings']['path'];

      foreach ($group->children as $key => $value) {
        //@todo: why should inspect $node->value?? If a field is eg. display suite custom field, $node->value should be false
        //if (isset($node->$value) && !in_array("$group_path", $hrefs)) {
        if (!in_array("$group_path", $hrefs)) {
          $hrefs[] = $group_path;
        }
      }
    }
  }

  foreach ($hrefs as $href) {
    $sub_path = $node_path . '/' . $href;
    $sub_alias = path_load($sub_path);
    if (is_array($node_alias)) {
      if (is_array($sub_alias)) {
        $new_sub_alias = $node_alias['alias'] . '/' . $href;
        if ($sub_alias['alias'] != $new_sub_alias) {
          $sub_alias['alias'] = $new_sub_alias;
        }
        path_save($sub_alias);

      }
      else {
        $sub_alias = array(
          'source' => $sub_path,
          'alias' => $node_alias['alias'] . '/' . $href,
          'language' => $node_alias['language'],
        );
        path_save($sub_alias);
      }
    }
    else {
      if (is_array($sub_alias)) {
        path_delete($sub_alias);
      }
    }
  }
}

/*
 * Implements hook_node_insert.
 */
function fieldgroup_menu_node_insert($node) {
  fieldgroup_menu_set_path($node);
}

/*
 * Implements hook_node_insert.
 */
function fieldgroup_menu_node_update($node) {
  fieldgroup_menu_set_path($node);
}

/*
 * Implements hook_modules_enabled.
 */
function fieldgroup_menu_modules_enabled($modules) {
  if (in_array('pathauto', $modules)) {
    $weight = db_select('system', 's')
      ->fields('s', array('weight'))
      ->condition('type', 'module')
      ->condition('name', 'pathauto')
      ->execute()
      ->fetchField();

    $weight += 1;
    if ($weight > 5 ) {
      db_update('system')
        ->fields(array('weight' => $weight))
        ->condition('type', 'module')
        ->condition('name', 'fieldgroup_menu')
        ->execute();
    }
  }
}
