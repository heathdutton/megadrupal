<?php

/**
 * @file
 * The menu system, form api get templates and display on drupal pages.
 *
 * The menu system where you can configure module configurations and customize
 * these according to your requirements.
 */

/**
 * Implements hook_permission().
 */
function site_under_construction_permission() {
  return array(
    'site under construction' => array(
      'title' => t('Site Under Construction'),
      'description' => t('Restrict site under construction page to specific '
          . 'users.')
    )
  );
}

/**
 * Implements hook_menu().
 */
function site_under_construction_menu() {
  $items = array();
  $items['admin/config/development/site-under-construction'] = array(
    'title' => 'Site Under Construction',
    'page callback' => 'drupal_get_form',
    'description' => 'Choose site under construction template.',
    'page arguments' => array('site_under_construction_callback_page'),
    'access arguments' => array('site under construction'),
  );

  return $items;
}

/**
 * Build form for site_under_construction configuration page.
 * 
 * @return array Assoicative array for form.
 * @see site_under_construction_menu.
 */
function site_under_construction_callback_page() {
  $options = site_under_construction_tenplates();

  $form = array();
  $form['site_under_construction_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable'),
    '#default_value' => variable_get('site_under_construction_enable', FALSE),
    '#description' => t('To perform this functionality mark this checked.')
  );
  $form['site_under_construction_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('Insert browser title for template.'),
    '#default_value' => variable_get('site_under_construction_title', 'Home'),
  );
  $form['site_under_construction_favicon'] = array(
    '#type' => 'textfield',
    '#title' => t('Favicon'),
    '#description' => t('Insert browser favicon path.'),
    '#default_value' => variable_get('site_under_construction_favicon', 'misc/favicon.ico'),
  );
  $form['site_under_construction_templates_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Teplates'),
    '#description' => t('Insert the templates path where they are placed.'
        . 'Recommended sites/all/libraries/site_under_construction_templates'),
    '#default_value' => variable_get('site_under_construction_templates_path', 'sites/all/libraries/site_under_construction_templates'),
  );
  if (empty($options)) {
    $form['site_under_construction_markup'] = array(
      '#markup' => t('No templates directory exist under mentioned directory.'),
    );
  }
  else {
    $form['site_under_construction_templates'] = array(
      '#type' => 'radios',
      '#options' => $options,
      '#title' => t('Templates'),
      '#description' => t('Choose one template which you want to implement on '
          . 'your site.'),
      '#default_value' => variable_get('site_under_construction_templates', '')
    );
  }
  return system_settings_form($form);
}

/**
 * Implements hook_init().
 */
function site_under_construction_init() {
  global $base_url, $user;
  
  // Check if user using drush then return before going to template add process.
 if(php_sapi_name() == 'cli') return ;
  
  $enable = variable_get('site_under_construction_enable', FALSE);

  $template = variable_get('site_under_construction_templates', '');
  // Resolve drush crash issue $base_url == 'http://default'
  if ( !$enable || empty($template) || ($user->uid > 0) || arg(0) == 'user') {
    return;
  }
  $favicon = variable_get('site_under_construction_favicon', 'misc/favicon.ico');
  $title = variable_get('site_under_construction_title', 'Home');
  echo '<link type="image/vnd.microsoft.icon" href="' . $base_url . '/' . $favicon . '" rel="shortcut icon">';
  echo '<title>' . $title . '</title>';
  echo '<link rel="stylesheet" type="text/css" href="' . drupal_get_path('module', 'site_under_construction') . '/css/style.css' . '"/>';
  echo '<iframe  src="' . $base_url . '/' . $template . '" name="iframe_a" seamless></iframe> ';
  exit();
  // return;
}

/**
 * 
 * @return array 
 *  An assocuative array contains template path as key and template html file
 * and directory as name.
 * 
 * @see site_under_construction_callback_page
 */
function site_under_construction_tenplates() {
  $options = array();
  $dir = variable_get('site_under_construction_templates_path', 'sites/all/libraries/site_under_construction_templates');
  $directories = site_under_construction_scane($dir, '/.*\.(html|xhtml)$/', 2);  //file_scan_directory($dir, '/.*\.(html|xhtml)$/',  array('min_depth' => 2, 'recurse' => TRUE), 2);
  if (empty($directories)) {
    drupal_set_message(t('There is no templates in the mentioned directory.'));
  }

  foreach ($directories as $uri => $obj) {
    $split_dir = explode('/', $uri);
    $dir = $split_dir[count($split_dir) - 2];
    $options[$uri] = ucwords($dir) . ' ' . ucwords($obj->name);
  }
  return $options;
}

/**
 * 
 * @param type $dir
 *  The directory path where you have placed the templates.
 * @param type $mask
 *  Regular expression to which type of files you looking.
 * @param type $level
 *  At which level you want to search your desire files.
 * @param type $current_deph
 *  At which level function is looking files(inner use only).
 * 
 * 
 * @return Object
 *  Return the StdClass object that contains files paths and files name etc.
 * 
 * @see site_under_construction_tenplates.
 */
function site_under_construction_scane($dir, $mask, $level = 1, $current_deph = 1) {
  $files = array();
  if (is_dir($dir) && $handle = opendir($dir)) {

    while (FALSE !== ($filename = readdir($handle))) {
      if ($filename[0] != '.') {
        $uri = "$dir/$filename";
        $uri = file_stream_wrapper_uri_normalize($uri);

        if (is_dir($uri) && $current_deph < $level) {

          // Give priority to files in this folder by merging them in after any subdirectory files.
          $files = array_merge(site_under_construction_scane($uri, $mask, $level, $current_deph + 1), $files);
        }
        elseif (preg_match($mask, $filename)) {
          // Always use this match over anything already set in $files with the
          // same $$options['key'].
          $file = new stdClass();
          $file->uri = $uri;
          $file->filename = $filename;
          $file->name = pathinfo($filename, PATHINFO_FILENAME);
          $files[$file->uri] = $file;
        }
      }
    }
    closedir($handle);
  }
  return $files;
}
