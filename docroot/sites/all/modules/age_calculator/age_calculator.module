<?php

/**
 * @file
 * Defines necessary menu's, Permissions, age-calculator form & ajax callbacks.
 */

/**
 * Implements hook_help().
 */
function age_calculator_help($path, $arg) {
  switch ($path) {
    // Displaying help text on help page.
    case 'admin/help#age_calculator':
      return t("Age calculator provides a block to calculate user's age.");
  }
}

/**
 * Implements hook_permission().
 */
function age_calculator_permission() {
  return array(
    // Permission for administrators.
    'Configure age calculator output' => array(
      'title' => t('Configure age calculator output'),
      'description' => t('User with this permission can control the output of age calculator'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function age_calculator_menu() {
  // Define empty menu items.
  $items = array();
  // Age calculator settings URL.
  $items['admin/config/people/age-calculator/settings'] = array(
    'title' => 'Age calculator',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('age_calculator_output_configuration_form'),
    'access arguments' => array('Configure age calculator output'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 1,
    'file' => 'age_calculator.settings.inc',
  );
  // Returning items.
  return $items;
}

/**
 * Implements hook_hook_info_alter().
 */
function age_calculator_hook_info_alter(&$hooks) {
  // Letting system allow to invoke block hooks present inc files.
  $hooks['block_configure'] = array('group' => 'blocks');
  $hooks['block_info'] = array('group' => 'blocks');
  $hooks['block_info_alter'] = array('group' => 'blocks');
  $hooks['block_list_alter'] = array('group' => 'blocks');
  $hooks['block_save'] = array('group' => 'blocks');
  $hooks['block_view'] = array('group' => 'blocks');
  $hooks['block_view_alter'] = array('group' => 'blocks');
}

/**
 * Form constructor for the age calculator form.
 *
 * @ingroup forms
 */
function age_calculator_form($form, &$form_state) {
  // Defining empty form array.
  $form = array();
  // Birthdate Field definition.
  $form['birthdate'] = array(
    '#title' => t('Date of birth'),
    '#type' => 'date',
    '#weight' => 1,
    '#after_build' => array("age_calculator_alter_year_range"),
  );
  // Age at the date.
  $form['age_on_date'] = array(
    '#title' => t('Age on date'),
    '#type' => 'date',
    '#weight' => 2,
  );
  // Submit button definition.
  $form['submit'] = array(
    '#type' => 'button',
    '#value' => t('Calculate'),
    '#weight' => 3,
    '#ajax' => array(
      'method' => 'replace',
      'event' => 'click',
      'callback' => 'age_calculator_display_results',
      'wrapper' => 'age_calculator_calculated_age',
    ),
  );
  // Results section markup.
  $form['calculated_age'] = array(
    '#type' => 'markup',
    '#weight' => 4,
    '#prefix' => '<div id="age_calculator_calculated_age">',
    '#suffix' => '</div>',
  );
  // $form_state is filled with values once the calculate button is clicked.
  // So we check if values are filled, then display the calculated age results.
  // To get the results, we are calling an helper functions and theme functions.
  // Helper function -> age_calculator_get_results($form_state['values']).
  // Theme function -> theme('age_calculator').
  if (!empty($form_state['values']['birthdate'])) {
    // Getting user input.
    $birthdate_array = $form_state['values']['birthdate'];
    $age_on_date_array = $form_state['values']['age_on_date'];
    // Formatting user input.
    $birthdate = $birthdate_array['day'] . '-' . $birthdate_array['month'] . '-' . $birthdate_array['year'];
    $age_on_date = $age_on_date_array['day'] . '-' . $age_on_date_array['month'] . '-' . $age_on_date_array['year'];
    // Convert dates to timestamps.
    $birthdate_timestamp = strtotime($birthdate);
    $age_on_date_timestamp = strtotime($age_on_date);
    // Check if birthdate greater than age on time.
    if ($birthdate_timestamp <= $age_on_date_timestamp) {
      // Object declaration.
      $birthdate_datetime = new DateTime($birthdate);
      $age_on_date_datetime = new DateTime($age_on_date);
      // Calling theme function.
      $form['calculated_age']['#markup'] = theme("age_calculator", array('birthdate_datetime' => $birthdate_datetime, 'age_on_date_datetime' => $age_on_date_datetime));
    }
    else {
      // Show error if the date of birth is in future.
      form_set_error('birthdate', t('Age on date should not be lesser than date of birth.'));
    }
  }
  // Returning the form.
  return $form;
}

/**
 * Callback of #after_build in birthdate field of age_calculator_form.
 */
function age_calculator_alter_year_range($form_element, &$form_state) {
  // Date type of form api - by default too large year range.
  // This includes future years also.
  // Since we are asking user to input birthdate, which can't be in future.
  // So we are showing only past years.
  // We unset the current values.
  unset($form_element['year']['#options']);
  $form_element['year']['#options'] = array();
  // We will be showing maximum of past 100 years.
  $max_year = date('Y') - 100;
  $min_year = date('Y');
  // Now we populate the array.
  foreach (range($max_year, $min_year) as $year) {
    $form_element['year']['#options'][$year] = $year;
  }
  // We return our modified element.
  return $form_element;
}

/**
 * Ajax callback for calculate age button.
 */
function age_calculator_display_results($form, &$form_state) {
  return render($form['calculated_age']);
}

/**
 * Implements hook_theme().
 */
function age_calculator_theme() {
  return array(
    'age_calculator' => array(
      'arguments' => array(
        'date_information' => NULL,
      ),
    ),
  );
}

/**
 * Callback from hook_theme() for age calculator output.
 */
function theme_age_calculator($date_information) {
  // Extracting variables.
  $birthdate_datetime = $date_information['birthdate_datetime'];
  $age_on_date_datetime = $date_information['age_on_date_datetime'];
  // Including helper functions inc file.
  module_load_include('inc', 'age_calculator', 'age_calculator.helper_functions');
  // Getting output.
  $output = age_calculator_get_results($birthdate_datetime, $age_on_date_datetime);
  // Returning output.
  return $output;
}
