<?php

require_once dirname(__FILE__) . '/go1_ui.debug.inc';
require_once dirname(__FILE__) . '/go1_ui.codemirror.develphp.inc';
require_once dirname(__FILE__) . '/go1_ui.codemirror.inc';

/**
 * Implements hook_init()
 */
function go1_ui_init() {
  if (go1_debug() && !defined('GO1_DISABLE_DEVELOPMENT_INDICATOR') && empty($_GET['no-indicator'])) {
    drupal_add_css(drupal_get_path('module', 'go1_ui') . '/misc/css/dev.indicator.css');
    drupal_add_js(drupal_get_path('module', 'go1_ui') . '/misc/js/dev.indicator.js');
  }
}

/**
 * Implements hook_menu()
 */
function go1_ui_menu_alter(&$menu) {
  $menu['user/%user/devel']['page callback']
    = $menu['user/%user/devel/render']['page callback']
    = $menu['node/%node/devel']['page callback']
    = $menu['node/%node/devel/render']['page callback']
    = $menu['comment/%comment/devel']['page callback']
    = $menu['comment/%comment/devel/render']['page callback']
    = $menu['taxonomy/term/%taxonomy_term/devel']['page callback']
    = $menu['taxonomy/term/%taxonomy_term/devel/render']['page callback']
    = 'go1dr';

  $menu['user/%user/devel']['page arguments']
    = $menu['user/%user/devel/render']['page arguments']
    = $menu['node/%node/devel']['page arguments']
    = $menu['node/%node/devel/render']['page arguments']
    = $menu['comment/%comment/devel']['page arguments']
    = $menu['comment/%comment/devel/render']['page arguments']
    = $menu['taxonomy/term/%taxonomy_term/devel']['page arguments']
    = $menu['taxonomy/term/%taxonomy_term/devel/render']['page arguments']
    = array(1);

  $menu['taxonomy/term/%taxonomy_term/devel']['page arguments']
    = $menu['taxonomy/term/%taxonomy_term/devel/render']['page arguments']
    = array(2);

  if (isset($menu['block/%bean_delta/devel'])) {
    $menu['block/%bean_delta/devel']['page callback'] = 'go1dr';
    $menu['block/%bean_delta/devel/render']['page callback'] = 'go1dr';
    $menu['block/%bean_delta/devel']['page arguments'] = array(1);
    $menu['block/%bean_delta/devel/render']['page arguments'] = array(1);
  }
}

/**
 * Implements hook_theme_registry_alter().
 * Move user_admin_permissions theme's processing to new place.
 *
 * @param type $theme_registry
 */
function go1_ui_theme_registry_alter(&$theme_registry) {
  $theme_registry['user_admin_permissions']['theme path'] = drupal_get_path('module', 'go1_ui');
  $theme_registry['user_admin_permissions']['function'] = 'go1_ui_user_admin_permissions';
  unset($theme_registry['user_admin_permissions']['includes']);
}

/**
 * Move checkboxes to the left of the permissions if there is only one role.
 *
 * @param $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 *
 * @ingroup themeable
 */
function go1_ui_user_admin_permissions($variables) {
  $form = $variables['form'];

  $rids = element_children($form['checkboxes']);
  if (count($rids) != 1) {
    // Multiple roles.
    module_load_include('inc', 'user', 'user.admin');
    return theme_user_admin_permissions($variables);
  }

  // Single role.
  $rid = reset($rids);

  $roles = user_roles();
  foreach (element_children($form['permission']) as $key) {
    $row = array();
    // Module name
    if (is_numeric($key)) {
      $row[] = array('data' => drupal_render($form['permission'][$key]), 'class' => array('module'), 'id' => 'module-' . $form['permission'][$key]['#id'], 'colspan' => count($form['role_names']['#value']) + 1);
    }
    else {
      // Permission row.

      // Checkbox.
      $form['checkboxes'][$rid][$key]['#title'] = $roles[$rid] . ': ' . $form['permission'][$key]['#markup'];
      $form['checkboxes'][$rid][$key]['#title_display'] = 'invisible';
      $row[] = array('data' => drupal_render($form['checkboxes'][$rid][$key]), 'class' => array('checkbox'));

      // Permission markup.
      $row[] = array(
        'data' => drupal_render($form['permission'][$key]),
        'class' => array('permission'),
      );
    }
    $rows[] = $row;
  }

  // Header: role name before 'Permission'.
  $header[] = array('data' => drupal_render($form['role_names'][$rid]), 'class' => array('checkbox'));
  $header[] = (t('Permission'));

  $output = theme('system_compact_link');
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'permissions')));
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Implements hook_form_FORM_ID_alter();
 */
function go1_ui_form_system_performance_settings_alter(&$form) {
  $form['clear_cache']['twig_caches_clear'] = array(
    '#type' => 'submit',
    '#value' => 'Clear twig caches',
    '#submit' => array('go1_ui_twig_caches_clear')
  );
}

/**
 * Twig caches clear callback
 *
 */
function go1_ui_twig_caches_clear() {
  foreach (file_scan_directory(drupal_realpath(variable_get('file_temporary_path')) . '/', '/\.php$/') as $file) {
    unlink($file->uri);
  }

  drupal_set_message(t('Twig caches cleared.'));
}
