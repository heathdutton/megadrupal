<?php


/**
 * Break the preparatory interactions with CiviCRM up into functional pieces before we enagage in the
 * actual work of this module.
 */

/**
 * Initialize CiviCRM with the v.3 API according to the api initialization
 * method described in the CiviCRM API documentation. This documentation is currently at
 * http://wiki.civicrm.org/confluence/display/CRMDOC40/CiviCRM+Public+APIs
 */
function civi_relate_prep() {
  if (civicrm_initialize()) {
    require_once('api/api.php');
    require_once('CRM/Core/Session.php');
  } else {
    /* Log error to Drupal site log */
    watchdog("civi_relate", "CiviCRM failed to initialize", NULL, $severity = WATCHDOG_ERROR, NULL);
  }
}

/**
 * civi_relate function to construct selector options with all active CiviCRM Profiles
 */
function civi_relate_profiles_get() {
  /* Initialize CiviCRM
   */
  civi_relate_prep();
  /**
   * Implementation of CiviCRM API. Profile names are stored as pseudo-constants.
   * Returns an array of profile names keyed to the profile id.  Profiles are stored as ufGroups
   * in the database.
   */
  $options = array('NONE' => t('- Select a Profile -')); //Initialize array for selector options
  $params = array(
    'is_active'    => TRUE,
    'version' => '3',
  );
  $result=civicrm_api("UFGroup","get", $params);
/*   dpm($result); */
  if ( $result['is_error']) {
    $error_message = $result['error_message'];
    drupal_set_message($error_message, 'error', FALSE);
    watchdog("civi_relate", "Retrieval of ufGroup via CiviCRM api failed with $error_message", NULL, $severity = WATCHDOG_ERROR, NULL);
  } else {
    /* Build the array for the select widget
     */
    $profiles = $result['values'];
    foreach ($profiles as $key => $value) {
      $options[$key] = t($value['title']);
    }
  }
  return $options;
}

/**
 * civi_relate function to construct selector options with all active CiviCRM Relationships
 */
function civi_relate_relationships_get($mode = NULL) {
  /* Add a first option to the array if built for a select form
   */
  if ($mode == 'select') {
    $options = array('NONE' => t('- Select a Relationship -'));
  }
  civi_relate_prep();
  /* We only want CiviCRM Relationships marked as 'active'
   */
  $params = array(
    'is_active' => '1',
    'version'   => '3',
  );
  /**
   * Implementation of CiviCRM API. Returns an array of relationships related to the parameter(s) passed
   */
  $result = civicrm_api('relationship_type','get',$params);
  if ( $result['is_error']) {
    $error_message = $result['error_message'];
    drupal_set_message($error_message, 'error', FALSE);
    watchdog("civi_relate", "Retrieval of Relationship Types via CiviCRM api failed with $error_message", NULL, $severity = WATCHDOG_ERROR, NULL);
  } else {
    // Build the array for the select widget
    $relationships = $result['values'];
    foreach ($relationships as $value) {
      $key = $value['id'];
      $label = $value['label_a_b'];
      $options[$key] = t($label);
    }
  }
  return $options;
}


/* Next, define and setup how civi_relate interacts with Drupal. */



/*
 * Implementation of hook_menu
 * Causes Drupal to create the menu link in the CiviCRM block in the Site Configuration page */
function civi_relate_menu() {

  $items = array();

  $items['admin/config/civicrm/civi_relate'] = array(
    'title' => 'CiviCRM Relate',
    'description' => t('Select the Profile and Relationship for CiviCRM Relate'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('civi_relate_admin'),
    'access arguments' => array('administer CiviCRM'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'civi_relate.admin.inc',
  );
  /*
   * Setting this to MENU_SUGGESTED_ITEM so the page title can be set, as this page is actually displayed if
   * JavaScript is disabled.
   */
  $items['civi-relate/choose'] = array(
    'title' => 'Relationship Selection',
    'description' => t('Select the Profile and Relationship for CiviCRM Relate'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('civi_relate_relationship_choose_form'),
    'access arguments' => array('CiviCRM: add contacts'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'civi_relate_relationship_choose.inc'
  );
  return $items;
}

/* Implementation of hook_civicrm_buildForm()
 * Hook documentation is found at
 * http://wiki.civicrm.org/confluence/display/CRMDOC/CiviCRM+hook+specification#CiviCRMhookspecification-hookcivicrmbuildForm
 *
 * @param $formName
 *   string - the name of the form
 * @param $form
 *   object - reference to the form object
 */
function civi_relate_civicrm_buildForm($formName, &$form) {
  //Profiles in CiviCRM are defined by an ID but it is stored as String
  $profile_definition_id = $form->getVar('_id');
  $profile_edit_id = $form->getVar('_gid');
    // CiviCRM Profile modes are defined by integer ID's
  $mode = $form->getVar('_mode');
  $selected_profile = variable_get('civi_relate_profile', NULL);
  /* STATIC: $civi_relate_mode == 0
   * DYNAMIC: $civi_relate_mode == 1
   */
  $select_dynamically = variable_get('civi_relate_mode', 0);
  if ( $formName == 'CRM_UF_Form_Group' &&
       $profile_definition_id == $selected_profile) {
    //Display a warning message on the edit page for the current selected profile.
    drupal_set_message(t('This profile is assigned to the module <b>CiviCRM Relate</b> to create a relationship when used to create a new contact.  This setting may be changed at Administer >> Site Configuration >> CiviCRM Relate'), 'warning');
  }
  /*
   * If we are on the correct form by name, in the correct profile
   * and in MODE_CREATE which is ID # 4 then be sure the session storage is empty
   * and add the jQuery dialog code. This session storage will stay empty if the jQuery never runs.
   */

  if ( $formName == 'CRM_Profile_Form_Edit' &&
       $profile_edit_id == $selected_profile &&
       $mode == 4 &&
       $select_dynamically
     ) {
     drupal_add_library('system', 'ui.dialog');
     drupal_add_library('system','jquery.form');
     drupal_add_js(drupal_get_path('module', 'civi_relate') . '/civi_relate_get_relationship.js','file');
  }
}


/* Implementation of hook_civicrm_postProcess()
 * Hook documentation is found at
 * http://wiki.civicrm.org/confluence/display/CRMDOC/CiviCRM+hook+specification#CiviCRMhookspecification-hookcivicrmpostProcess
 *
 * @param $formName
 *   string - the name of the form
 * @param $form
 *   object - reference to the form object
 */
function civi_relate_civicrm_postProcess( $formName, &$form ) {
  civi_relate_prep();
  // CiviCRM Profile modes are defined by integer ID's
  $mode = $form->getVar('_mode');
  // Profiles in CiviCRM are defined by an ID but it is stored as String
  $profile_id = $form->getVar('_gid');
  $selected_profile = variable_get('civi_relate_profile', NULL);
  /*
   * We only want the relationship created if we are on the correct form by name, in the correct profile
   * and in MODE_CREATE which is ID # 4
   */
  if ( $formName == 'CRM_Profile_Form_Edit' &&
       $profile_id == $selected_profile &&
       $mode == 4) {
    /* Get session data - CRM_Core_Session doesn't initiate a session if one already exists
     */ 
    $session = &CRM_Core_Session::singleton( );
    // Set $reference_contact_id to contact created by the form
    $reference_contactID = $form->getVar( '_id' );
    $acting_user_contactID = $session->get( 'userID' );
    /* Set up the parameters
     */
    $params = array(
      'contact_id_a' => $acting_user_contactID,
      'contact_id_b' => $reference_contactID,
      'is_active' => 1,
      'start_date' => date("Ymd", time()),
      'end_date' => null,
      'version'   => '3',
    );
    /* Check if the relationship should be permissioned and set appropriate parameter value.
     */
    $permissioned_relationship = variable_get('civi_relate_ab_perms');
    if ($permissioned_relationship) {
      $params['is_permission_a_b'] = 1;
    } else {
      $params['is_permission_a_b'] = 0;
    }
    /* STATIC: $civi_relate_mode == 0
     * DYNAMIC: $civi_relate_mode == 1
     */
    $select_dynamically = variable_get('civi_relate_mode', 0);
    if (!$select_dynamically) {
      $params['relationship_type_id'] = variable_get('civi_relate_relationship', NULL);
      civi_relate_create_relationship ($params);
    } else {
      /* Pull relationship_type_id from $session object.  If it is null, then the jQuery modal
       * dialog has not been used. If it has value, we'll use that value and create the relationship
       */
      $relationship_type_id = $session -> get( 'relationship_type_id','civi_relate');
      if (!empty($relationship_type_id)) {
        $params['relationship_type_id'] = $relationship_type_id;
        civi_relate_create_relationship ($params);
        $session -> set( 'relationship_type_id', null,'civi_relate'); //clean up
      } else {
        /* Stash the params in the session object, load the dynamic form and create the relationship in the
         * submit function.
         */
        $session -> set( 'params', $params,'civi_relate');
        drupal_goto('civi-relate/choose');
      }
    }
  }
}

/*
 * Wrapper Function: Implementation of CiviCRM API
 * Documentation found at: http://wiki.civicrm.org/confluence/display/CRMDOC40/CiviCRM+Public+APIs
 *
 * @param $params
 *   'params' (array) Associative array of property name/value pairs to be inserted.
 * Using a wrapper function allows use of this code for both static and dynamic approaches
 */
function civi_relate_create_relationship ($params) {
  $result = civicrm_api('relationship','create',$params);
  if ( $result['is_error']) {
    $error_message = $result['error_message'];
    $selected_relationship = $params['relationship_type_id'];
    $acting_user_contactID = $params['contact_id_a'];
    $reference_contactID = $params['contact_id_b'];
    watchdog("civi_relate", "civi_relate_create_relationship failed to create relationship $selected_relationship between logged in civiCRM user ID  $acting_user_contactID and target civiCRM user ID $reference_contactID with $error_message", NULL, $severity = WATCHDOG_ERROR, NULL);
  }
}



/*
 * Implementation of hook_uninstall()
 *
 */
function civi_relate_uninstall() {
  variable_del('civi_relate_profile');
  variable_del('civi_relate_relationship');
}
