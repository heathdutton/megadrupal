<?php
/**
 * @file
 * Various page callbacks.
 */

/**
 * Callback for viewing all {human_name}.
 */
function {name}_view_all() {
  // @todo - here we are using view - we need to define it also in generator.
  return views_embed_view('{name}') . '';
}

/**
 * Callback for adding new {human_name}.
 *
 * @type string
 *   Entity bundle type.
 */
function {name}_add($type) {
  ${name} = {name}_create(array('type' => $type));
  return drupal_get_form('{name}_form', ${name});
}

/**
 * Callback for single {human_name} view.
 */
function {name}_view(${name}) {
  drupal_set_title(entity_label('{name}', ${name}));
  return entity_view('{name}', array(${name}->identifier() => ${name}), 'full', NULL, TRUE);
}

/**
 * {human_name} form.
 */
function {name}_form($form, &$form_state, ${name}) {
  $form_state['{name}'] = ${name};
  $is_new = !empty(${name}->is_new);

  $wrapper = entity_metadata_wrapper(${name}->entityType(), ${name});

  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#default_value' => $wrapper->title->value(),
    '#required' => TRUE,
  );

  // Attach all fields and also sort all form items by weight.
  field_attach_form('{name}', ${name}, $form, $form_state);

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => $is_new ? t('Create') : t('Update'),
  );
  if (!$is_new) {
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#submit' => array('{name}_form_submit_delete'),
      '#value' => t('Delete'),
      '#required' => TRUE,
    );
  }

  return $form;
}

/**
 * {human_name} form submit handler.
 */
function {name}_form_submit($form, &$form_state) {
  ${name} = $form_state['{name}'];
  $is_new = !empty(${name}->is_new);

  form_state_values_clean($form_state);
  entity_form_submit_build_entity('{name}', ${name}, $form, $form_state);
  {name}_save(${name});

  $uri = entity_uri('{name}', ${name});
  $form_state['redirect'] = $uri['path'];

  if ($is_new) {
    drupal_set_message(t('{human_name} created.'));
  }
  else {
    drupal_set_message(t('{human_name} updated.'));
  }
}

/*
 * {human_name} form delete handler.
 */
function {name}_form_submit_delete($form, &$form_state) {
  ${name} = $form_state['{name}'];
  $uri = entity_uri('{name}', ${name});
  $form_state['redirect'] = $uri['path'] . '/delete';
}

/**
 * {human_name} delete form.
 */
function {name}_delete_form($form, &$form_state, {class_name} ${name}) {
  $form_state['{name}'] = ${name};

  drupal_set_title(t('Are you sure you want to remove !{name} {human_name}? This action can not be undone.',
    array('!{name}' => ${name}->label())));

  $form['actions']['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
  );

  return $form;
}

/**
 * Delete {human_name} from submit handler.
 */
function {name}_delete_form_submit($form, &$form_state) {
  ${name} = $form_state['{name}'];
  {name}_delete(${name});
  drupal_set_message(t('{human_name} %{name} removed.', array('%{name}' => ${name}->label())));
  $form_state['redirect'] = '{name}';
}

/**
 * Configuration page callback.
 */
function {name}_config($form) {
  $form['{name}_config'] = array(
    '#markup' => '@todo - settings form for {human_name}',
  );
  $form['#submit'] = array('{name}_config_submit');

  return system_settings_form($form);
}

/**
 * Submit handler for {human_name} config form.
 */
function {name}_config_submit($form, &$form_state) {
}
