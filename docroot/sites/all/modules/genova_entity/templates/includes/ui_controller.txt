<?php

/**
 * {human_name} entity UI controller class.
 */
class {class_name}UIController extends EntityDefaultUIController {

  public function hook_menu() {
    $items = parent::hook_menu();
    $items[$this->path]['description'] = 'Manage {human_name} type, including fields.';

    // @todo - this part will be useful for entities without bundle support.
    /*$wildcard = isset($this->entityInfo['admin ui']['menu wildcard']) ? $this->entityInfo['admin ui']['menu wildcard'] : '%entity_object';

    $include = array(
      'file' => '{name}.pages.inc',
      'file path' => drupal_get_path('module', '{name}') . '/includes',
    );
    $items[$this->path . '/add'] += $include;
    $items[$this->path . '/manage/' . $wildcard] += $include;
    $items[$this->path . '/manage/' . $wildcard . '/edit'] += $include;*/

    return $items;
  }

}

/**
 * Generates the {human_name} type editing form.
 */
function {name}_type_form($form, &$form_state, ${name}_type, $op = 'edit') {
  if ($op == 'clone') {
    ${name}_type->type .= '_clone';
  }

  // Human-readable type name.
  $form['name'] = array(
    '#title' => t('Human readable name'),
    '#type' => 'textfield',
    '#default_value' => isset(${name}_type->name) ? ${name}_type->name : '',
    '#description' => t('A human-readable name for this {human_name} type.'),
  );

  // Machine-readable type name.
  $form['type'] = array(
    '#type' => 'machine_name',
    '#default_value' => isset(${name}_type->type) ? ${name}_type->type : '',
    '#disabled' => entity_has_status('{name}_type', ${name}_type, ENTITY_IN_CODE),
    '#machine_name' => array(
      'exists' => '{name}_type_load',
    ),
    '#description' => t('A unique machine-readable name for this {human_name} type. It must only contain lowercase letters, numbers, and underscores.'),
  );

  field_attach_form('{name}_type', ${name}_type, $form, $form_state);

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save {human_name} type'),
    '#weight' => 40,
  );

  if (!entity_has_status('{name}_type', ${name}_type, ENTITY_IN_CODE) && $op != 'add') {
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete {human_name} type'),
      '#weight' => 45,
      '#limit_validation_errors' => array(),
      '#submit' => array('{name}_type_form_submit_delete')
    );
  }
  return $form;
}

/**
 * Validation callback.
 */
function {name}_type_form_validate($form, &$form_state) {
  entity_form_field_validate('{name}_type', $form, $form_state);
}

/**
 * Form API submit callback for the type form.
 */
function {name}_type_form_submit(&$form, &$form_state) {
  ${name}_type = entity_ui_form_submit_build_entity($form, $form_state);
  // Save and go back.
  ${name}_type->save();
  $form_state['redirect'] = 'admin/structure/{base_uri}';
}

/**
 * Form API submit callback for the delete button.
 */
function {name}_type_form_submit_delete(&$form, &$form_state) {
  $form_state['redirect'] = 'admin/structure/{base_uri}/manage/' . $form_state['{name}_type']->type . '/delete';
}
