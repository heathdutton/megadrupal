<?php
/**
 * @file
 * Installation file of the {name} module.
 */

/**
 * Update 7001 description.
 */
//function {name}_update_7001() {
//}

/**
 * Implements hook_install().
 */
function {name}_install() {
  // Create default bundle.
  $bundle = new stdClass();
  $bundle->type = '{name}';
  $bundle->name = t('{human_name}');
  $bundle->is_new = true;
  $bundle->description = t('{human_name} bundle');
  $controller = new EntityAPIController('{name}_type');
  $controller->save($bundle);

  // @todo - maybe add commented field creation example.
}

/**
 * Implements hook_uninstall().
 */
function {name}_uninstall() {
  // Bypass entity_load() as we cannot use it here.
  $types = db_select('{name}_type', 'et')
    ->fields('et')
    ->execute()
    ->fetchAllAssoc('name');

  foreach ($types as $name => $type) {
    field_attach_delete_bundle('{name}', $name);
  }
}

/**
 * Implements hook_schema().
 */
function {name}_schema() {
  $schema['{name}'] = array(
    'description' => 'Stores {human_name} entities.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary Key: Unique {name} item ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The bundle type of the {name}.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The {users}.uid of the associated user.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'The creation Unix timestamp.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The updated Unix timestamp.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'title' => array(
        'description' => 'The title.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'indexes' => array(
      'uid' => array('uid'),
    ),
    'foreign keys' => array(
      'uid' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
      'type' => array(
        'table' => '{name}_type',
        'columns' => array('type' => 'type'),
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['{name}_type'] = array(
    'description' => 'Stores information about all defined {name} types.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique {name} type ID.',
      ),
      'type' => array(
        'description' => 'The machine-readable type of this {name} type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The human-readable name of this {name} type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this {name} type in relation to others.',
      ),
      'locked' => array(
        'description' => 'A boolean indicating whether the administrator may delete this type.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of additional data related to this {type} type.',
        'merge' => TRUE,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  // Add {name} entity revision support.
  $schema['{name}']['fields']['rid'] = array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => FALSE,
    'default' => NULL,
    'description' => 'The ID of the entity\'s default revision.',
  );

  $schema['{name}_revision'] = $schema['{name}'];
  $schema['{name}_revision']['fields']['rid'] = array(
    'type' => 'serial',
    'not null' => TRUE,
    'description' => 'Primary Key: Unique revision ID.',
  );
  $schema['{name}_revision']['fields']['id'] = array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => FALSE,
    'default' => NULL,
    'description' => 'The ID of the attached entity.',
  );
  $schema['{name}_revision']['primary key'] = array('rid');

  return $schema;
}
