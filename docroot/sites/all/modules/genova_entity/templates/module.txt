<?php
/**
 * {name} custom entity module.
 * @file
 */

/**
 * Implements hook_menu().
 */
function {name}_menu() {
  $items = array();

  $items['{base_uri}'] = array(
    'title' => 'View all {plural_human_name}',
    'page callback' => '{name}_view_all',
    'access callback' => '{name}_access',
    'access arguments' => array('view all'),
    'file' => 'includes/{name}.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $uri_add_position = count(explode('/', '{base_uri}/add'));
  $items['{base_uri}/add/%'] = array(
    'title' => 'Add',
    'page callback' => '{name}_add',
    'page arguments' => array($uri_add_position),
    'access callback' => '{name}_access',
    'access arguments' => array('edit', $uri_add_position),
    'file' => 'includes/{name}.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  ${name}_uri = '{base_uri}/%{name}';
  $uri_position = count(explode('/', '{base_uri}'));

  $items[${name}_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('{name}', $uri_position),
    'page callback' => '{name}_view',
    'page arguments' => array($uri_position),
    'access callback' => '{name}_access',
    'access arguments' => array('view', $uri_position),
    'file' => 'includes/{name}.pages.inc',
  );

  $items[${name}_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[${name}_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('{name}_form', $uri_position),
    'access callback' => '{name}_access',
    'access arguments' => array('edit', $uri_position),
    'file' => 'includes/{name}.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items[${name}_uri . '/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('{name}_delete_form', $uri_position),
    'access callback' => '{name}_access',
    'access arguments' => array('edit', $uri_position),
    'file' => 'includes/{name}.pages.inc',
  );

  $items['admin/config/{base_uri}'] = array(
    'title' => '{human_name}',
    'description' => 'Configure {human_name}.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('{name}_config'),
    'access arguments' => array('administer {name}'),
    'file' => 'includes/{name}.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_entity_info().
 */
function {name}_entity_info() {
  $info['{name}'] = array(
    'label' => t('{human_name}'),
    'module' => '{name}',
    'entity class' => '{class_name}',
    'controller class' => '{class_name}Controller',
    'metadata controller class' => '{class_name}MetadataController',
    'views controller class' => '{class_name}ViewsController',
    'base table' => '{name}',
    'revision table' => '{name}_revision',
    'access callback' => '{name}_access',
    // Make use the class' label() and uri() implementation by default.
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'load hook' => '{name}_load',
    'entity keys' => array(
      'id' => 'id',
      'revision' => 'rid',
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'fieldable' => TRUE,
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => TRUE,
      ),
    ),
  );

  $info['{name}_type'] = array(
    'label' => t('{human_name} type'),
    'module' => '{name}',
    'base table' => '{name}_type',
    'entity class' => 'Entity',
    'controller class' => 'EntityAPIControllerExportable',
    'bundle of' => '{name}',
    'access callback' => '{name}_access',
    'fieldable' => FALSE,
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'name',
    ),
    'admin ui' => array(
      'path' => 'admin/structure/{base_uri}',
      'controller class' => '{class_name}UIController',
      'file' => 'includes/{name}.ui_controller.inc',
      'access arguments' => array('administer {name}'),
    ),
  );

  // Add bundle info but bypass entity_load() as we cannot use it here.
  $types = db_select('{name}_type', 'et')
    ->fields('et')
    ->execute()
    ->fetchAllAssoc('type');

  $bundle_argument = count(explode('/', 'admin/structure/{base_uri}/manage'));
  foreach ($types as $name => $type) {
    $info['{name}']['bundles'][$name] = array(
      'label' => $name,
      'admin' => array(
        'path' => 'admin/structure/{base_uri}/manage/%{name}_type',
        'real path' => 'admin/structure/{base_uri}/manage/' . $type->type,
        'bundle argument' => $bundle_argument,
        'access arguments' => array('administer {name}'),
      ),
    );
  }

  // Support entity cache module.
  if (module_exists('entitycache')) {
    $info['{name}']['field cache'] = FALSE;
    $info['{name}']['entity cache'] = TRUE;
  }

  return $info;
}

/**
 * Implements hook_metadata_hook_entity_info().
 */
function {name}_metadata_hook_entity_info() {
  return array(
    '{name}' => array(
      'plural label' => t('{plural_human_name}'),
      'description' => t('{human_name} custom entity.'),
      'creation callback' => '{name}_create',
      'save callback' => '{name}_save',
      'deletion callback' => '{name}_delete',
      //'view callback' => '{name}_view',
    ),
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function {name}_field_extra_fields() {
  $extra = array();

  $types = {name}_get_types();
  foreach ($types as $name => $type) {
    $extra['{name}'][$name] = array(
      'form' => array(
        'title' => array(
          'label' => t('Title'),
          'description' => t('{human_name} title.'),
          'weight' => 0,
        ),
      ),
      'display' => array(
        'title' => array(
          'label' => t('Title'),
          'description' => t('{human_name} title.'),
          'weight' => 0,
        ),
      ),
    );
  }

  return $extra;
}

/**
 * Implements hook_views_api().
 */
function {name}_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', '{name}') . '/views',
  );
}

/**
 * Implements hook_permission().
 */
function {name}_permission() {
  return array(
    'administer {name}' => array(
      'title' => t('Administer {human_name}'),
      'description' => t('Administer {human_name}.'),
    ),
    'use {name}' => array(
      'title' => t('Use {human_name}'),
      'description' => t('Use {human_name}.'),
    ),
  );
}

/* API */

/**
 * Gets an array of all {human_name} bundle types, keyed by the name.
 *
 * @param $type
 *   If set, the type with the given name is returned.
 */
function {name}_get_types($type = NULL) {
  $types = entity_load_multiple_by_name('{name}_type', isset($type) ? array($type) : FALSE);
  return isset($type) ? reset($types) : $types;
}

/**
 * {human_name} type loader.
 *
 * @param $type
 *   (optional) The name for this {human_name} type. If no type is given all
 *   existing types are returned.
 *
 * @return Entity
 *   Returns a fully-loaded {human_name} type definition if a type name is
 *   passed. Else an array containing all types is returned.
 */
function {name}_type_load($type = NULL) {
  // Replace dashes with underscores so this can be used as menu argument
  // loader too.
  $types = entity_load_multiple_by_name('{name}_type', isset($type) ? array(strtr($type, array('-' => '_'))) : FALSE);
  if (isset($type)) {
    return isset($types[$type]) ? $types[$type] : FALSE;
  }
  return $types;
}

/**
 * Access callback for {human_name} entity.
 *
 * @see entity_access().
 */
function {name}_access($op, ${name} = NULL, $account = NULL, $entity_type = NULL) {
  if (user_access('administer {name}') || user_access('use {name}')) {
    return TRUE;
  }
}

/**
 * Callback to create a new {human_name} entity.
 */
function {name}_create($values = array()) {
  $controller = entity_get_controller('{name}');
  return $controller->create($values);
}

/**
 * Load {human_name} entity.
 */
function {name}_load($id, $reset = FALSE) {
  ${name}s = {name}_load_multiple(array($id), array(), $reset);
  return reset(${name}s);
}

/**
 * Load multiple {plural_human_name} based on certain conditions.
 */
function {name}_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('{name}', $ids, $conditions, $reset);
}

/**
 * Save {human_name} entity.
 */
function {name}_save(${name}) {
  entity_save('{name}', ${name});
}

/**
 * Delete {human_name} entity.
 */
function {name}_delete(${name}) {
  entity_delete('{name}', entity_id('{name}', ${name}));
}

/**
 * Delete multiple {plural_human_name} entity.
 */
function {name}_delete_multiple($ids) {
  entity_delete_multiple('{name}', $ids);
}

/**
 * Fetches an array of exportables from files.
 *
 * This helper function allow you for example to separate views exported
 * configurations into separate files.
 *
 * @param $module
 *   The module invoking this request. (Can be called by other modules.)
 * @param $directory
 *   The subdirectory in the custom module.
 * @param $extension
 *   The file extension.
 * @param $name
 *   The name of the variable found in each file. Defaults to the same as
 *   $extension.
 *
 * @return array
 *   Array of $name objects.
 *
 * NOTE - you probably want just one implementation of this function in one of
 * your core custom modules - you can then use this function definition from
 * your core custom module.
 */
function {name}_exports($module, $directory, $extension, $name = NULL) {
  if (!$name) {
    $name = $extension;
  }
  $return = array();
  // Find all the files in the directory with the correct extension.
  $files = file_scan_directory(drupal_get_path('module', $module) . "/$directory", "/\.{$extension}$/");
  foreach ($files as $path => $file) {
    require DRUPAL_ROOT . '/' . $path;
    if (isset($name) && !empty($$name)) {
      $return[$$name->name] = $$name;
    }
  }
  return $return;
}
