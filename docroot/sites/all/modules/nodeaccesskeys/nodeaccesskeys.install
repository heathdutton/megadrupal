<?php

/**
 * @file
 * Install, update and uninstall functions for the Node Access Keys module.
 */

/**
 * Test and report Node Access Keys installation requirements.
 *
 * @param string $phase
 *   The current system installation phase.
 *
 * @return array
 *   An array of system requirements.
 */
function nodeaccesskeys_requirements($phase) {
  $requirements = array();

  // Ensure translations don't break at install time.
  $t = get_t();

  if ($phase == 'runtime') {
    $error_messages = array();
    $success_messages = array();

    $value = variable_get('nodeaccesskeys_default_node_type');
    if (isset($value)) {
      $success_messages[] = $t('The default Node Access Keys content type has been set to !value_link.', array('!value_link' => l($value, 'admin/config/people/nodeaccesskeys/settings')));
    }
    else {
      $error_messages[] = $t('Node Access Keys requires you to !settings to function correctly.', array('!settings' => l($t('set a default content type'), 'admin/config/people/nodeaccesskeys/settings')));
    }

    if (!empty($error_messages)) {
      $requirements['nodeaccesskeys'] = array(
        'title' => $t('Node Access Keys default content type'),
        'value' => $t('Missing default content type'),
        'description' => implode(' ', array_merge($error_messages, $success_messages)),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    else {
      $requirements['nodeaccesskeys'] = array(
        'title' => $t('Node Access Keys default content type'),
        'value' => $t('Default content type set'),
        'description' => implode(' ', $success_messages),
      );
    }
  }
  return $requirements;
}

/**
 * Implements hook_install().
 */
function nodeaccesskeys_install() {
  $t = get_t();

  $message = $t('Node Access Keys requires you to !settings to function correctly.',
    array(
      '!settings' => l($t('set a default content type'), 'admin/config/people/nodeaccesskeys/settings'),
    )
  );
  drupal_set_message($message, 'warning');
}

/**
 * Implements hook_uninstall().
 */
function nodeaccesskeys_uninstall() {
  variable_del('nodeaccesskeys_default_node_type');
  variable_del('nodeaccesskeys_site_403');
  node_access_needs_rebuild();
}

/**
 * Implements hook_enable().
 */
function nodeaccesskeys_enable() {
  variable_set('site_403', 'nodeaccesskeys/denied');
}

/**
 * Implements hook_disable().
 */
function nodeaccesskeys_disable() {
  variable_set('site_403', '');
}

/**
 * Implements hook_schema().
 *
 * This defines the actual database schema.
 *
 * @see hook_schema()
 * @link schemaapi Schema API @endlink
 */
function nodeaccesskeys_schema() {
  $schema['nodeaccesskeys'] = array(
    'description' => 'Stores the various Access Keys',
    'fields' => array(
      'aid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique Access Key ID.',
      ),
      'accesskey' => array(
        'type' => 'varchar',
        'length' => 256,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The Access Key.',
      ),
      'nodetypes' => array(
        'type' => 'blob',
        'serialize' => TRUE,
        'size' => 'big',
        'description' => 'The machine-name node types the Key gives access to.',
      ),
      'roles' => array(
        'type' => 'blob',
        'serialize' => TRUE,
        'size' => 'big',
        'description' => 'The role IDs this Key applies to.',
      ),
    ),
    'primary key' => array('aid'),
  );

  return $schema;
}
