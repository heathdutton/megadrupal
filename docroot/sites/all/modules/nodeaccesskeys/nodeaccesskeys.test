<?php

/**
 * @file
 * Tests for the Node Access Keys module.
 */

/**
 * Tests the creation, editing and deleting of Access Keys.
 */
class NodeAccessKeysTestCase extends DrupalWebTestCase {
  protected $privilegedUser;
  protected $adminPath = 'admin/config/people/nodeaccesskeys';

  /**
   * The test's information for the SimpleTest interface.
   */
  public static function getInfo() {
    return array(
      'name' => 'Create, Edit and Delete Access Keys',
      'description' => 'Ensure that the Node Access Keys function properly.',
      'group' => 'Node Access Keys',
    );
  }

  /**
   * Enable modules and create user with specific permissions.
   */
  public function setUp() {
    parent::SetUp('nodeaccesskeys');

    // Create and log in our privileged user.
    $this->privilegedUser = $this->drupalCreateUser(array(
      'administer node access keys',
    ));
    $this->drupalLogin($this->privilegedUser);

    node_access_rebuild();
  }

  /**
   * Test the Node Access Keys basic functionality.
   *
   * - Test Access Key creation.
   * - Test Access Key modification.
   * - Test single Access Key deletion.
   * - Create multiple Access Keys and then test deleting multiple Keys.
   * - Test Access Key denying view permission.
   * - Test Access Key granting view permission.
   */
  public function testNodeAccessKeys() {
    // Create the Access Key using the Add form.
    $edit = $this->formValues();
    $this->drupalPost($this->adminPath . '/add', $edit, t('Add Key'));
    $this->assertText(t('New Access Key has been saved.'));

    // Edit the Access Key using the Edit form.
    $edit = $this->formValues(10, 1);
    $this->drupalPost($this->adminPath . '/1/edit', $edit, t('Save Key'));
    $this->assertText(t('Access Key saved.'));

    // Delete the Access Key using the Delete form.
    $this->drupalPost($this->adminPath . '/1/delete', array(), t('Delete'));
    $this->assertText(t('Deleted Access Key.'));

    // Create three Access Keys using the Add form.
    $edit = $this->formValues();
    $this->drupalPost($this->adminPath . '/add', $edit, t('Add Key'));
    $this->assertText(t('New Access Key has been saved.'));
    // This key is going to be tested against later and thus it needs to use
    // the anonymous role and the 'Basic page' content type.
    $edit = $this->formValues(8, 2, TRUE);
    $this->drupalPost(NULL, $edit, t('Add Key'));
    $this->assertText(t('New Access Key has been saved.'));
    $edit = $this->formValues();
    $this->drupalPost(NULL, $edit, t('Add Key'));
    $this->assertText(t('New Access Key has been saved.'));

    // Delete the multiple Access Keys from the Administration Overview page.
    $edit = array();
    $edit['nodeaccesskeys[2]'] = 2;
    $edit['nodeaccesskeys[4]'] = 4;
    $this->drupalPost($this->adminPath, $edit, t('Delete Selected Keys'));
    $this->assertText(t('Are you sure you want to delete these Access Keys?'));
    $this->drupalPost(NULL, array(), t('Delete'));
    $this->assertText(t('Deleted 2 Access Keys.'));

    // Create a protected node of the type 'Basic page'.
    $settings = array(
      'title' => $this->randomName(32),
      'body' => array(LANGUAGE_NONE => array(array($this->randomName(64)))),
    );
    $node = $this->drupalCreateNode($settings);

    $this->drupalLogout();

    // Visit the protected page and check that it responds with a 403.
    $this->drupalGet('node/1');
    $this->assertResponse(403, t('Access denied for authenticated user.'));

    // Test Access Key denying view permission.
    $this->drupalPost(NULL, array('accesskey' => 'test'), t('Validate'));
    $this->assertText(t('Access Key not recognized for this content.'));

    // Test Access Key granting view permission.
    $result = db_query('SELECT accesskey FROM {nodeaccesskeys} WHERE aid = 3');
    $record = $result->fetchObject();
    $edit = array('accesskey' => $record->accesskey);
    $this->drupalPost(NULL, $edit, t('Validate'));
    $this->assertText(t('Access granted.'));
  }

  /**
   * Helper function to build form values for creating/editing an Access Key.
   *
   * @param int $strlen
   *   How long the access key should be.
   *
   * @param int $modulus
   *   The modulus to use against the $strlen variable for semi-randomness.
   *
   * @param boolean $use_basic
   *   Whether or not 'page' and 'anonymous user' should always be set.
   */
  protected function formValues($strlen = 8, $modulus = 2, $use_basic = FALSE) {
    $edit = array();

    $edit['accesskey'] = $this->randomName($strlen);

    // Rudimentary way of randomly checking node types.
    $node_types = array_keys(node_type_get_names());
    $at_least_one_checked = FALSE;
    foreach ($node_types as $type) {
      $checked = drupal_strlen($type) % $modulus == 0 ? 1 : 0;
      if ($checked || ($use_basic && $type == 'page')) {
        $at_least_one_checked = TRUE;
        $edit['nodetypes[' . $type . ']'] = $checked;
      }
    }

    // Check to be sure we actually checked a node type.
    if (!$at_least_one_checked) {
      $edit['nodetypes[' . $node_types[0] . ']'] = 1;
    }

    // Another fun way of randomly checking user roles.
    $num_roles = count(user_roles());
    for ($i = 1; $i <= $num_roles; $i++) {
      $checked = $i % $modulus == 0 ? 1 : 0;
      if ($checked || ($use_basic && $i == 1)) {
        $edit['roles[' . $i . ']'] = $checked;
      }
    }
    return $edit;
  }
}

/**
 * Tests the creation, editing and deleting of Access Keys.
 */
class NodeAccessKeysSettingsTestCase extends DrupalWebTestCase {
  protected $privilegedUser;
  protected $adminPath = 'admin/config/people/nodeaccesskeys';

  /**
   * The test's information for the SimpleTest interface.
   */
  public static function getInfo() {
    return array(
      'name' => 'Module Settings',
      'description' => 'Test that the settings for this module work.',
      'group' => 'Node Access Keys',
    );
  }

  /**
   * Enable modules and create user with specific permissions.
   */
  public function setUp() {
    parent::SetUp('nodeaccesskeys');

    // Create and log in our privileged user.
    $this->privilegedUser = $this->drupalCreateUser(array(
      'administer node access keys',
    ));

    node_access_rebuild();
  }

  /**
   * Test the Node Access Keys settings configuration.
   */
  public function testNodeAccessKeys() {
    // Check that Drupal is using the default 403 page.
    $this->drupalGet('admin');
    $this->assertText(t('You are not authorized to access this page.'));

    $this->drupalLogin($this->privilegedUser);

    $node_types = array_keys(node_type_get_names());

    // Test the alternate 403 page with an invalid path.
    $edit = array();
    $edit['nodeaccesskeys_default_node_type'] = $node_types[array_rand($node_types)];
    $edit['nodeaccesskeys_site_403'] = 'this-is-not-a-core-drupal-page';
    $this->drupalPost($this->adminPath . '/settings', $edit, t('Save configuration'));
    $this->assertText(
      t("The path '@path' is either invalid or you do not have access to it.",
      array(
        '@path' => $edit['nodeaccesskeys_site_403'],
      )
    ));

    // Test the alternate 403 with a valid path.
    $settings = array(
      'title' => $this->randomName(32),
      'body' => array(LANGUAGE_NONE => array(array($this->randomName(64)))),
    );
    $this->drupalCreateNode($settings);
    $edit['nodeaccesskeys_default_node_type'] = $node_types[array_rand($node_types)];
    $edit['nodeaccesskeys_site_403'] = 'node/1';
    $this->drupalPost($this->adminPath . '/settings', $edit, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'));

    // Check that the default node type is set.
    $is_default_node_type_set = variable_get('nodeaccesskeys_default_node_type', NULL) == $edit['nodeaccesskeys_default_node_type'];
    $this->assertTrue($is_default_node_type_set,
      t('Node Access Keys default node type is set to @type', array('@type' => $edit['nodeaccesskeys_default_node_type'])),
      'PHP'
    );

    // Check the alternate 403 page is being used.
    $this->drupalGet('admin');
    $this->assertText($settings['title']);
  }
}
