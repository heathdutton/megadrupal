<?php

/**
 * Implements hook_menu().
 */
function revisionreference_menu() {
  $items['revisionreference/autocomplete/%/%'] = array(
    'title' => 'revisionreference autocomplete',
    'page callback' => 'revisionreference_autocomplete',
    'page arguments' => array(2, 3),
    'access callback' => 'revisionreference_autocomplete_access',
    'access arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_field_info().
 */
function revisionreference_field_info() {
  return array(
    'revisionreference' => array(
      'label'             => t('Node Revision Reference'),
      'description'         => t('This field stores the ID of a related node revision as an integer value.'),
      'settings'            => array('referenceable_types' => array()),
      'default_widget'      => 'options_select', 
      'default_formatter'   => 'revisionreference_default',
      'referenceable_types' => array(),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function revisionreference_field_settings_form($field, $instance, $has_data) {
  $form['referenceable_types'] = array(
    '#type'          => 'checkboxes',
    '#title'         => t('Content types that can be referenced'),
    '#multiple'      => TRUE,
    '#default_value' => $field['settings']['referenceable_types'],
    '#options'       => array_map('check_plain', node_type_get_names()),
  );
  return $form;
}

/**
 * Implements hook_field_validate().
 */
function revisionreference_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) { 
  $vids = array();
  foreach ($items as $delta => $item) {
    if (is_numeric($item['vid'])) {
      $vids[] = $item['vid'];
    }
    elseif (isset($item['vid'])) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'invalid_nid',
        'message' => t("%name: invalid input.",
          array('%name' => $instance['label'])),
      );
    }
  }
  if ($vids) {
    $options = array(
      'ids' => $vids,
    );
    $refs = _revisionreference_potential_references($field, $options); 
    foreach ($items as $delta => $item) {
      if (is_array($item)) {
        if (!empty($item['vid']) && !isset($refs[$item['vid']])) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'invalid_vid',
            'message' => t("%name: this post can't be referenced.",
              array('%name' => $instance['label'])),
          );
        }
      }
    }
  }
}

/**
 *
 */
function _revisionreference_options($field) {
  $references = _revisionreference_potential_references($field);
  $options = array();
  foreach ($references as $key => $value) {
    $options[$key] = $value['title']. ' [nid:' . $value['nid'] . '] ' . $value['timestamp'] . ' by ' . $value['uid'] . ' [vid:'. $value['vid'] . ']';
  }

  return $options;
}

/**
 * Implements hook_field_is_empty().
 */
function revisionreference_field_is_empty($item, $field) {
  return empty($item['vid']);
}

/**
 * Implementation of hook_field_formatter_info().
 */
function revisionreference_field_formatter_info() {
  return array(
    'revisionreference_default' => array(
      'label' => t('Title (link)'),
      'field types' => array('revisionreference'),
    ),
    'revisionreference_plain' => array(
      'label' => t('Title (no link)'),
      'field types' => array('revisionreference'),
    ),
    'revisionreference_full' => array(
      'label' => t('Full node'),
      'field types' => array('revisionreference'),
    ),
    'revisionreference_teaser' => array(
      'label' => t('Teaser'),
      'field types' => array('revisionreference'),
    ),
  );
}

/**
 * Implements hook_options_list().
 */
function revisionreference_options_list($field) {
  return _revisionreference_options($field);
}

/**
 * Implements hook_field_formatter_view().
 */
function revisionreference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $output = array();
  switch ($display['type']) {
    case 'revisionreference_default':
    case 'revisionreference_plain':
      foreach ($items as $delta => $item) {
          if (isset($item['vid']) && is_numeric($item['vid'])) {
            $nid = revisionreference_nid_from_vid($item['vid']);
            $node = node_load(NULL, $item['vid']);
            if (revisionreference_vid_is_current($item['vid'], $nid)) {
              $uri = entity_uri('node', $node);
              $output[$delta] = array(
                '#type' => ($display['type'] == 'revisionreference_default') ? 'link' : 'item',
                '#href' => $uri['path'],
                '#options' => $uri['options'],
              );
            }
            else {
              $output[$delta] = array(
                '#type' => ($display['type'] == 'revisionreference_default') ? 'link' : 'item',
                '#href' => 'node/'. $nid .'/revisions/'. $item['vid'] .'/view',
              );
            }
          if ($display['type'] == 'revisionreference_default') {
            $output[$delta]['#title'] = $node->title;
          }
          else  {
            $output[$delta]['#markup'] = check_plain($node->title);
          }
        }
      }
      break;
    case 'revisionreference_full':
    case 'revisionreference_teaser':
      $recursion_queue = &drupal_static(__FUNCTION__, array());
      if (!isset($entity->referencing_entity)) {
        $recursion_queue = array();
      }
      // The recursion queue only needs to track nodes.
      if ($entity_type == 'node') {
        list($id) = entity_extract_ids($entity_type, $entity);
        $recursion_queue[$id] = $id;
      }
      $nodes_display = array();
      foreach ($items as $delta => $item) {
        if (!isset($recursion_queue[$item['vid']])) {
           $nid = revisionreference_nid_from_vid($item['vid']);
           $nodes_display[$item['vid']] = node_load($nid, $item['vid']);
        }
      }
      
      if ($nodes_display) {
        foreach ($nodes_display as $vid => $node) {
          $nodes_display[$vid]->referencing_entity = $entity;
          $nodes_display[$vid]->referencing_field = $field['field_name'];
          $nodes_built[$vid] = node_view($nodes_display[$vid], $display['type']);
        }
      }
      
      foreach ($items as $delta => $item) {
        if (isset($nodes_display[$item['vid']])) {
          $nid = revisionreference_nid_from_vid($item['vid']);
          $className = $field['field_name'].'-'.$delta.'-node-vid-'.$item['vid'];
          $output[$delta] = $nodes_built[$item['vid']];
          // overide node url - maybe there's better way to do that ?
          if (!revisionreference_vid_is_current($item['vid'], $nid)) {
            $output[$delta]['#prefix'] = '<div class="'.$className.'">';
            $output[$delta]['#suffix'] = '</div>';
          
            drupal_add_js(drupal_get_path('module', 'revisionreference') . '/js/revisionreference.js'); 
            drupal_add_js(array('revisionreference' => array(
              $field['field_name'].$delta => array(
                'path' => '/revisions/'. $item['vid'] .'/view', 
                'className' => $className,
              ),
            )),'setting');
          }
        }
        else {
          $nid = revisionreference_nid_from_vid($item['vid']);
          $node = node_load($nid, $item['vid']);
          $rev_url = 'node/'. $nid .'/revisions/'. $item['vid'] .'/view';
          $output[$delta] = array(
            '#type' => 'link',
            '#title' => $node->title,
            '#href' => (revisionreference_vid_is_current($item['vid'], $nid)) ? $rev_url : $uri['path'],
            '#options' => $uri['options'],
          );
          if (!$node->status) {
            $output[$delta]['#prefix'] = '<span class="node-unpublished">';
            $output[$delta]['#suffix'] = '</span>';
          }
        }
      }
      break; 
  }
  return $output;
}

/**
 * Helper function for formatters.
 *
 * Store node titles collected in the curent request.
 */
function _revisionreference_titles($vid, $known_title = NULL) {
  static $titles = array();
  if (!isset($titles[$vid])) {
     $q = db_select('node_revision', 'n');
    $q->fields('n', array('title'));
    $q->condition('n.vid', $vid);
    $title = $q->execute()->fetchField();
    $titles[$vid] = $title ? $title : '';
  }
  return $titles[$vid];
}

/**
 * Implements hook_theme().
 */
function revisionreference_theme() {
  return array(
    'revisionreference_item_simple' => array(
      'arguments' => array('item' => NULL),
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function revisionreference_field_widget_info() {
  return array(
    'revisionreference_autocomplete' => array(
      'label' => t('Autocomplete text field'),
      'description' => t('Display the list of referenceable nodes as a textfield with autocomplete behaviour.'),
      'field types' => array('revisionreference'),
      'settings'    => array(
        'autocomplete_match' => 'contains',
        'size' => 60,
        'autocomplete_path' => 'revisionreference/autocomplete',
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_info_alter().
 */
function revisionreference_field_widget_info_alter(&$info) {
  $info['options_select']['field types'][] = 'revisionreference';
  $info['options_buttons']['field types'][] = 'revisionreference';
}

/**
 * Implements hook_field_widget_settings_form().
 */
function revisionreference_field_widget_settings_form($field, $instance) {
  $widget   = $instance['widget'];
  $defaults = field_info_widget_settings($widget['type']);
  $settings = array_merge($defaults, $widget['settings']);

  $form = array();
  if ($widget['type'] == 'revisionreference_autocomplete') {
    $form['autocomplete_match'] = array(
      '#type'             => 'select',
      '#title'            => t('Autocomplete matching'),
      '#default_value'    => $settings['autocomplete_match'],
      '#options'          => array(
        'starts_with'     => t('Starts with'),
        'contains'        => t('Contains'),
      ),
      '#description'      => t('Select the method used to collect autocomplete suggestions. Note that <em>Contains</em> can cause performance issues on sites with thousands of nodes.'),
    );
    $form['size'] = array(
      '#type'             => 'textfield',
      '#title'            => t('Size of textfield'),
      '#default_value'    => $settings['size'],
      '#element_validate' => array('_element_validate_integer_positive'),
      '#required'         => TRUE,
    );
  }
  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function revisionreference_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'revisionreference_autocomplete':
      $element += array(
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]['vid']) ? $items[$delta]['vid'] : NULL,
        '#autocomplete_path' => $instance['widget']['settings']['autocomplete_path'] . '/' . $instance['entity_type'] . '/' . $field['field_name'],
        '#size' => $instance['widget']['settings']['size'],
        '#maxlength' => 255,
        '#element_validate' => array('revisionreference_autocomplete_validate'),
        '#value_callback' => 'revisionreference_autocomplete_value',
      );
      break;
  }
  return array('vid' => $element);
}

/**
 * Value callback for a revisionreference autocomplete element.
 *
 * Replace the node vid with a node title.
 */
function revisionreference_autocomplete_value($element, $input = FALSE, $form_state) {
  if ($input === FALSE) {
    // We're building the displayed 'default value': expand the raw nid into
    // "node title [nid:n]".
    $vid = $element['#default_value'];
    if (!empty($vid)) {
      $result = db_select('node_revision', 'n')
        ->fields('n', array('title', 'nid'))
        ->condition('n.vid', $vid)
        ->range(0, 1)
        ->execute()
        ->fetchAssoc();
      $value = $result['title'] .' [nid:'. $result['nid'] .'] [vid:'. $vid .']';
      return $value;
    }
  }
}

/**
 * Validate an autocomplete element.
 *
 * Remove the wrapper layer and set the right element's value.
 */
function revisionreference_autocomplete_validate($element, &$form_state) {
  $field_name = $element['#field_name'];
  $field = field_info_field($field_name);
  $value = $element['#value'];
  $vid = NULL;
  if (!empty($value)) {
    preg_match('/^(?:\s*|(.*) )?\[\s*nid\s*:\s*(\d+)\s*\] ?\[\s*vid\s*:\s*(\d+)\s*\]$/', $value, $matches);
    if (!empty($matches)) {
      // explicit title, vid and nid
      list(, $title, $nid, $vid) = $matches;
      $node = node_load($nid, $vid);
      if ($title && trim($title) != trim($node->title)) {
        form_error($element, t('%name: title mismatch. Please check your selection.', array('%name' => $element['#title'])));
      }
    }
    else {
      $options = array(
        'string' => $value,
        'match' => 'equals',
        'limit' => 1,
      );
      $vids = _revisionreference_potential_references($field, $options);
      $vid = (!empty($vids)) ? array_shift(array_keys($vids)) : 0;
    }
  }
  form_set_value($element, $vid, $form_state);
  return $element;
}

/**
 * Fetch an array of all candidate referenced nodes,
 * for use in presenting the selection form to the user.
 */
function _revisionreference_potential_references($field, $options = array()) {
  $options += array(
    'string' => '',
    'match' => 'contains',
    'ids' => array(),
    'limit' => 0,
  );
  if (module_exists('views')
  && !empty($field['advanced_revision_view'])
  && $field['advanced_revision_view'] != '--'
  && ($view = revisionreference_get_view($field, $string, $exact_string))) {
    // advanced field : referenceable nodes defined by a view
    // let views.module build the query
    $options = array();
    foreach ($view->result as $item) {
      $options[$item->vid] = _revisionreference_item($field, $item);
    }
    return $options;
  }
  else {
    $results = &drupal_static(__FUNCTION__, array());
    $match = 'contains';
    // Create unique id for static cache.
    $cid = $field['field_name'] . ':' . $options['match'] . ':'. ($options['string'] !== '' ? $options['string'] : implode('-', $options['ids'])). ':' . $options['limit'];
    if (!isset($results[$cid])) {
      $references = _revisionreference_potential_references_standard($field, $options);
      // Store the results.
      $results[$cid] = !empty($references) ? $references : array();
    }

    return $results[$cid];
  }
}

/**
 * Helper function for _revisionreference_potential_references().
 *
 * List of referenceable nodes defined by content types.
 */
function _revisionreference_potential_references_standard($field, $options) {
  if (!$field['settings']['referenceable_types']) {
    return array();
  }
  foreach ($field['settings']['referenceable_types'] as $type => $value) {
    if ($value) {
      $referenceable_types[$type] = $type;
    }
  }
  $query = db_select('node_revision', 'r');
  $query->join('node', 'n', 'n.nid = r.nid');
  $node_nid_alias   = $query->addField('n', 'nid');
  $node_vid_alias   = $query->addField('r', 'vid');
  $query->addField('r', 'timestamp');
  $query->addField('r', 'uid');
  $node_title_alias = $query->addField('r', 'title', 'node_title');
  $node_type_alias  = $query->addField('n', 'type',  'node_type');
  $query->addTag('node_access');
  $query->addMetaData('id', ' _revisionreference_potential_references_standard');
  $query->condition('n.type', $referenceable_types, 'IN');

  if ($options['string'] !== '') {
    switch ($match) {
      case 'contains':
        $query->condition('n.title', '%' . $options['string'] . '%', 'LIKE');
        break;
      case 'starts_with':
        $query->condition('n.title', $options['string'] . '%', 'LIKE');
        break;
      case 'equals':
        $query->condition('n.title', $options['string']);
        break;
    }
  }
  elseif ($options['ids']) {
    $query->condition('r.vid', $options['ids'], 'IN', $options['ids']);
  }

  $query
    ->orderBy($node_vid_alias, 'DESC')
    ->orderBy($node_title_alias)
    ->orderBy($node_type_alias);

  if ($options['limit']) {
    $query->range(0, $options['limit']);
  }
  $result = $query->execute();
  
  $references = array();
  foreach ($result->fetchAll() as $node) {
     $author = user_load($node->uid);
    $references[$node->vid] = array(
      'title'     => $node->node_title,
      'nid'       => $node->nid,
      'vid'       => $node->vid,
      'timestamp' => date("Y-m-d", $node->timestamp),
      'uid'      => $author->name,
      'rendered'  => check_plain($node->node_title),
    );
  }
  return $references;
}

/**
 *
 */
function _revisionreference_item($field, $item, $html = FALSE) {
  if (module_exists('views') && isset($field['advanced_revision_view']) && $field['advanced_revision_view'] != '--' && ($view = revisionreference_get_view($field))) {
    $field_names = array();
    foreach ($view->field as $name => $viewfield) {
      $field_names[] = isset($viewfield->definition['content_field_name']) ? $viewfield->definition['content_field_name'] : $name;
    }
    $output = theme('revisionreference_item_advanced', $item, $field_names, $view);
    if (!$html) {
      $output = html_entity_decode(strip_tags($output), ENT_QUOTES);
    }
  }
  else {
    $output = theme('revisionreference_item_simple', $item);
    $output = $html ? check_plain($output) : $output;
  }
  return $output;
}

/**
 *
 */
function theme_revisionreference_item_simple($item) {
  return $item['rendered'] .' [nid:'. $item['nid'] .'] ' . $item['timestamp'] .' by '. $item['uid'] .' [vid:'. $item['vid'] .']';
}

/**
 * Retrieve a pipe delimited string of autocomplete suggestions
 */
function revisionreference_autocomplete($entity_type, $field_name, $string = '') {
  // If the request has a '/' in the search text, then the menu system will have
  // split it into multiple arguments, recover the intended $string.
  $args = func_get_args();
  // Shift off the $entity_type argument.
  array_shift($args);
  // Shift off the $field_name argument.
  array_shift($args);
  $string = implode('/', $args);

  $field = field_info_field($field_name);

  $options = array(
    'string' => $string,
    // @todo broken - this is in $field['widget']['settings']['autocomplete_match'] - we'd need the $instance.
    'match' => isset($field['widget']['autocomplete_match']) ? $field['widget']['autocomplete_match'] : 'contains',
    'limit' => 10,
  );
  $references = _revisionreference_potential_references($field, $options);
  foreach ($references as $vid => $row) {
    $matches[$row['rendered'] .' [nid:'. $row['nid'] .'] [vid:'. $vid .']'] = _revisionreference_item($field, $row);
  }
  drupal_json_output($matches);
}

/**
 *
 */
function revisionreference_nid_from_vid($vid) {
  return db_select('node_revision', 'nr')
    ->fields('nr', array('nid'))
    ->condition('vid', $vid)
    ->execute()
    ->fetchField();
}

/**
 *
 */
function revisionreference_vid_is_current($vid, $nid = NULL) {
  static $max_vid_for_nids = array();
  if ($nid == NULL) {
    $nid = revisionreference_nid_from_vid($vid);
  } 
  
  if (!isset($max_vid_for_nids[$nid])) {
    $max_vid_for_nids[$nid] = db_select('node', 'n')
      ->fields('n', array('vid'))
      ->condition('nid', $nid, '=')
      ->execute()
      ->fetchField();
  }
  return ($max_vid_for_nids[$nid] == $vid);
}

/**
 *
 */
function revisionreference_autocomplete_access($entity_type, $field_name) {
  return user_access('access content') && ($field = field_info_field($field_name)) && field_access('view', $field, $entity_type) && field_access('edit', $field, $entity_type);
}