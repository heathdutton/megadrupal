<?php

/**
 * @file
 * Tests for text.module.
 */

class RevisionreferenceFieldTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name'  => 'Revision reference field',
      'description'  => 'Test the functionality of revision reference fields.',
      'group' => 'Field types'
    );
  }

  function setUp() {
    parent::setUp(array('revisionreference', 'field_test'));
    $this->langcode = LANGUAGE_NONE;
    
    $this->field_name = drupal_strtolower($this->randomName());
    $this->field = array(
      'field_name' => $this->field_name,
      'type' => 'revisionreference',
    );
    $this->field['settings']['referenceable_types']['page'] = 1;
    field_create_field($this->field);
    
    $this->node = $this->drupalCreateNode();
    $this->old_title = $this->node->title;
    $this->old_vid = $this->node->vid;
    $this->node->title = $this->randomString();
    node_save($this->node);
    
    $this->web_user = $this->drupalCreateUser(array('access field_test content', 'administer field_test content'));
    $this->drupalLogin($this->web_user);    
  }

  /**
   * Test the formatters.
   * 
   * Most of this code is ... inspired ;) by the core text.test.
   */
  function testFormatters() {
    $instance = array(
      'field_name'  => $this->field_name,
      'entity_type' => 'test_entity',
      'bundle'      => 'test_bundle',
      'widget'      => array(
        'type'        => 'options_select',
      ),
      'display' => array(
        'default' => array(
          'type' => 'revisionreference_default',
        ),
      ),
    );
    field_create_instance($instance);
    $edit = array(
      "{$this->field_name}[$this->langcode]" => $this->old_vid,
    );
    $this->drupalPost('test-entity/add/test-bundle', $edit, t('Save'));
    preg_match('|test-entity/manage/(\d+)/edit|', $this->url, $match);
    $id = $match[1];
    $entity = field_test_entity_test_load($id);
    $content = field_attach_view('test_entity', $entity, 'default');
    $this->drupalSetContent(drupal_render($content));
    $this->assertRaw(l($this->old_title, 'node/'. $this->node->nid .'/revisions/'. $this->old_vid .'/view'), t('The node revision link is visible'));
    $this->assertNoRaw($this->node->title, t('Current title is not visible'));

    $instance['display']['default']['type']  = 'revisionreference_plain';
    field_update_instance($instance);
    $content = field_attach_view('test_entity', $entity, 'default');
    $this->drupalSetContent(drupal_render($content));
    $this->assertNoRaw(l($this->old_title, 'node/'. $this->node->nid .'/revisions/'. $this->old_vid .'/view'), t('The node revision link is not visible'));
    $this->assertRaw($this->old_title, t('The node revision title is visible'));
    $this->assertNoRaw($this->node->title, t('Current title is not visible'));
  }
}
