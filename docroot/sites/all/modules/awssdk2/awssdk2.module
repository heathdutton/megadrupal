<?php
/**
 * @file
 * Provides primary Drupal hook implementations.
 *
 */

/**
 * Implements hook_permission().
 */
function awssdk2_permission() {
  return array(
    'access awssdk ui' => array(
      'title' => t('Access services configuration'),
      'description' => t('Perform administration tasks for AWS SDK for PHP.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function awssdk2_menu() {
  $items['admin/config/aws'] = array(
    'title' => 'Amazon web services',
    'description' => 'Amazon web services tools.',
    'position' => 'right',
    'access arguments' => array('access awssdk ui'),
    'page callback' => 'system_admin_menu_block_page',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  return $items;
}

/**
 * Implements hook_ctools_plugin_type().
 */
function awssdk2_ctools_plugin_type() {
  $plugins['service'] = array(
    'load themes' => FALSE,
    'use hooks' => FALSE,
  );
  return $plugins;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function awssdk2_ctools_plugin_directory($module, $plugin) {
  if ($module == 'awssdk2' && $plugin == 'service') {
    return 'plugins/awssdk';
  }
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Returns the client for a service.
 *
 * @link http://docs.aws.amazon.com/aws-sdk-php/latest/class-Guzzle.Service.Builder.ServiceBuilder.html#_get
 *
 * @param string $service
 *    Shortname of a aws service.
 *
 * @return Guzzle\Service\ClientInterface
 *   ClientInterface object
 *
 */
function awssdk_get_client($service) {
  $client = &drupal_static(__FUNCTION__);
  if (empty($client)) {
    $service_conf = awssdk_service_load($service);
    if (empty($service_conf)) {
      return NULL;
    }
    $region = $service_conf->config['region'];
    $regions = Aws\Common\Enum\Region::values();
    // In case we need someday more options. http://docs.aws.amazon.com/aws-sdk-php/guide/latest/configuration.html#client-configuration-options
    $config = array_merge(array('region' => $regions[$region]), $service_conf->config['access']);
    $client = Aws\Common\Aws::factory($config)->get($service);
  }
  return $client;
}

/**
 * Loads the stored configuration of a service and fallbacks to the stored default settings.
 *
 * @param string $service
 *    Shortname of a aws service.
 *
 * @return object|NULL
 */
function awssdk_service_load($service = '') {
  ctools_include('export');
  $object = NULL;
  if (!empty($service)) {
    $object = ctools_export_load_object('awssdk_services', 'names', array($service));
  }
  if (empty($object)) {
    $object = ctools_export_load_object('awssdk_services', 'names', array('default'));
  }
  return !empty($object) ? reset($object) : NULL;
}
