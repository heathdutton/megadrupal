<?php

/**
 * @file
 * Tests for Translation importer.
 */

/**
 * Functional tests to test automatic translation imports.
 */
class TranslationImporterTest extends DrupalWebTestCase {
  /**
   * Test info function.
   */
  public static function getInfo() {
    return array(
      'name' => 'Translation importer',
      'description' => 'Test automatic translation catalog imports.',
      'group' => 'Translation importer',
    );
  }

  /**
   * Set-up function.
   */
  public function setUp() {
    parent::setUp('translation_importer');
  }

  /**
   * Activate catalogs from a named directory.
   */
  private function activateCatalogsFromDir($dir_name) {
    variable_set('file_translations_path', drupal_get_path('module', 'translation_importer') . '/tests/catalogs/' . $dir_name);
  }

  /**
   * Test importing catalogs.
   */
  public function testCatalogImport() {
    // Add a language.
    db_insert('languages')
      ->fields(array(
        'enabled' => 1,
        'language' => 'fr',
        'prefix' => 'fr',
        'domain' => '',
      ))
      ->execute();

    // "Monday" is untranslated.
    $this->assertEqual('Monday', t('Monday', array(), array('langcode' => 'fr')));

    // Test 1
    $this->activateCatalogsFromDir('test_1');
    translation_importer_import_catalogs();
    locale_reset();
    $this->assertEqual('fr-Monday', t('Monday', array(), array('langcode' => 'fr')));

    // Test 2: fiddle with translations & import unchanged catalog.
    db_update('locales_target')
      ->fields(array('translation' => 'not-fr-Monday'))
      ->condition('translation', 'fr-Monday')
      ->execute();
    cache_clear_all('locale:', 'cache', TRUE);
    translation_importer_import_catalogs();
    locale_reset();
    $this->assertEqual('not-fr-Monday', t('Monday', array(), array('langcode' => 'fr')));

    // Test 3: import slightly updated catalog.
    $this->activateCatalogsFromDir('test_2');
    translation_importer_import_catalogs();
    locale_reset();
    $this->assertEqual('fr-Monday', t('Monday', array(), array('langcode' => 'fr')));
  }

  /**
   * Test forced re-imports.
   */
  public function testForceReimport() {
    variable_set('translation_importer_catalog_hashes', array(
      'fi-default.po' => 'wannabe-sha1-hash',
      'sv-default.po' => 'wannabe-sha1-hash',
      'en-gb-webform.po' => 'wannabe-sha1-hash',
      'sv-webform.po' => 'wannabe-sha1-hash',
    ));
    // Forget everything but 'fi-default.po'
    $forget_langcodes = array('sv', 'en-gb');
    $forget_groups = array('default', 'webform');
    translation_importer_forget_hashes($forget_langcodes, $forget_groups);
    $hashes = variable_get('translation_importer_catalog_hashes', array());
    $this->assertEqual($hashes, array('fi-default.po' => 'wannabe-sha1-hash'));
  }

}
