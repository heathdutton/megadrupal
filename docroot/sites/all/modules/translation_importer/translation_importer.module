<?php

/**
 * @file
 * Translation importer.
 */

/**
 * Implements hook_stream_wrappers().
 */
function translation_importer_stream_wrappers() {
  return array(
    'catalogs' => array(
      'name' => t('Translation catalogs'),
      'class' => 'TranslationImporterStreamWrapper',
      'description' => t('Translation catalogs served by the webserver.'),
      'type' => STREAM_WRAPPERS_READ,
    ),
  );
}

/**
 * Implements hook_flush_caches().
 */
function translation_importer_flush_caches() {
  // Skip translation import when in simpletest context.
  if (isset($GLOBALS['drupal_test_info'])) {
    return;
  }
  translation_importer_import_catalogs();
}

/**
 * Import all updated (since last import) catalogs.
 */
function translation_importer_import_catalogs() {
  $catalogs = file_scan_directory('catalogs://', "/[a-z]+(-[a-z]+)?-[a-z]+\.po$/");
  $hashes = variable_get('translation_importer_catalog_hashes', array());
  foreach ($catalogs as $catalog_file) {
    // Skip catalog if hash hasn't changed.
    $hash = sha1_file($catalog_file->uri);
    if (isset($hashes[$catalog_file->name]) && $hashes[$catalog_file->name] == $hash) {
      continue;
    }
    $hashes[$catalog_file->name] = $hash;
    // Extract langcode and group from file name.
    preg_match('/(?<lang_code>[a-z]+(-[a-z]+)?)-(?<group>[a-z]+)/', $catalog_file->name, $matches);
    $group = $matches['group'];
    $lang_code = $matches['lang_code'];
    // Refresh strings before importing translations to ensure than all strings
    // are available.
    if ($group != 'default') {
      module_load_include('inc', 'i18n_string', 'i18n_string.admin');
      i18n_string_refresh_group($group);
    }
    // Import the file.
    require_once DRUPAL_ROOT . '/includes/locale.inc';
    _locale_import_po($catalog_file, $lang_code, LOCALE_IMPORT_OVERWRITE, $group);
  }
  // Store all changed hashes to variable.
  variable_set('translation_importer_catalog_hashes', $hashes);
}

/**
 * Forget hashes to force re-import for given langcode / group combinations.
 *
 * @param $langcodes
 *   (optional) an array of langcodes. If empty all languages will be
 *   re-imported.
 * @param $groups
 *   (optional) an array of group names. If empty all groups will be
 *   re-imported.
 */
function translation_importer_forget_hashes($langcodes = array(), $groups = array()) {
  $hashes = variable_get('translation_importer_catalog_hashes', array());
  foreach ($hashes as $id => $hash) {
    // Remove hash if it matches langcodes and groups conditions.
    $match_langcode = empty($langcodes) ? TRUE : FALSE;
    $match_group = empty($groups) ? TRUE : FALSE;
    preg_match('/(?<lang_code>[a-z]+(-[a-z]+)?)-(?<group>[a-z]+)/', $id, $matches);
    if (in_array($matches['group'], $groups)) {
      $match_group = TRUE;
    }
    if (in_array($matches['lang_code'], $langcodes)) {
      $match_langcode = TRUE;
    }
    if ($match_group && $match_langcode) {
      unset($hashes[$id]);
    }
  }
  variable_set('translation_importer_catalog_hashes', $hashes);
}

/**
 * Translation importer (catalogs://) stream wrapper class.
 *
 * Provides support for reading translation catalogs internally.
 */
class TranslationImporterStreamWrapper extends DrupalLocalStreamWrapper {
  /**
   * Implements abstract public function getDirectoryPath().
   */
  public function getDirectoryPath() {
    return variable_get('file_translations_path', conf_path() . '/translations');
  }

  /**
   * Overrides getExternalUrl().
   */
  public function getExternalUrl() {
    throw new Exception(t('External URL is not available for translation catalogs.'));
  }

}
