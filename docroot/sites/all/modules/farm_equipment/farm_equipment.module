<?php
/**
 * @file
 * Code for the Farm Equipment feature.
 */

include_once 'farm_equipment.features.inc';

/**
 * Implements hook_farm_access_perms().
 */
function farm_equipment_farm_access_perms($role) {

  // Assemble a list of entity types provided by this module.
  $types = array(
    'farm_asset' => array(
      'equipment',
    ),
    'log' => array(
      'farm_maintenance',
    ),
  );

  // Grant different CRUD permissions based on the role.
  $perms = array();
  switch ($role) {

    // Farm Manager and Worker
    case 'Farm Manager':
    case 'Farm Worker':
      $perms = farm_access_entity_perms($types);
      break;

    // Farm Viewer
    case 'Farm Viewer':
      $perms = farm_access_entity_perms($types, array('view'));
      break;
  }

  return $perms;
}

/**
 * Implements hook_farm_admin_actions().
 */
function farm_equipment_farm_admin_actions() {

  // Define farm equipment actions.
  $actions = array(
    'equipment' => array(
      'title' => t('Add equipment'),
      'href' => 'farm/asset/add/equipment',
      'views' => array(
        'farm_equipment',
      ),
    ),
    'maintenance' => array(
      'title' => t('Add maintenance'),
      'href' => 'log/add/farm_maintenance',
      'assets' => array(
        'equipment',
      ),
      'views' => array(
        'farm_equipment',
        'farm_log_maintenance',
      ),
    ),
  );
  return $actions;
}

/**
 * Implements hook_farm_asset_breadcrumb().
 */
function farm_equipment_farm_asset_breadcrumb($farm_asset) {

  // If the asset is equipment, add a link to the equipment list.
  $breadcrumb = array();
  if ($farm_asset->type == 'equipment') {
    $breadcrumb[] = l(t('Equipment'), 'farm/equipment');
  }
  return $breadcrumb;
}

/**
 * Implements hook_farm_asset_view_views().
 */
function farm_equipment_farm_asset_view_views($farm_asset) {

  // If the entity is not equipment, bail.
  if ($farm_asset->type != 'equipment') {
    return array();
  }

  // Return a list of Views to include on Equipment.
  return array(
    'farm_log_maintenance',
    'farm_log_activity',
    'farm_log_observation',
    'farm_log_movement',
  );
}

/**
 * Implements hook_farm_taxonomy_term_view_views().
 */
function farm_equipment_farm_taxonomy_term_view_views($term) {

  // If the term is not an area, bail.
  if ($term->vocabulary_machine_name != 'farm_areas') {
    return array();
  }

  // Return a list of Views to include on Areas.
  return array(
    array(
      'name' => 'farm_equipment',
      'weight' => -10,
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function farm_equipment_form_alter(&$form, &$form_state, $form_id) {

  // If this is a log form with a planting reference field...
  if ($form_id == 'log_form' && !empty($form['field_farm_equipment'])) {

    // Alter the form with the farm_log helper function.
    farm_log_form_prepopulate_asset($form, 'field_farm_equipment');
  }
}

/**
 * Implements hook_farm_area_links().
 */
function farm_equipment_farm_area_links($id) {
  return array(
    array(
      'title' => t('Equipment'),
      'href' => 'taxonomy/term/' . $id,
      'options' => array(
        'fragment' => 'Equipment',
      ),
    ),
  );
}
