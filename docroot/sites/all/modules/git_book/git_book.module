<?php
/**
 * @file
 * Code for the Git Book feature.
 */

include_once 'git_book.features.inc';

/**
 * Implements hook_node_presave().
 */
function git_book_node_presave($node) {
  // make sure this gets inserted as a book if it isn't in one
  if (!isset($node->nid) && $node->type == 'git_book' && $node->book['bid'] == 0) {
    $node->book['bid'] = 'new';
  }
}

/**
 * Implements hook_node_insert().
 */
function git_book_node_insert($node) {
  // if we see a new git book is about to be inserted
  if ($node->type == 'git_book') {
    // invoke the library and bring in the content
    libraries_load('gitphp');
    $repo_url = $node->field_git_repo[LANGUAGE_NONE][0]['value'];
    // create an acceptable machine name
    $tmp = explode('/', str_replace('.git', '', $repo_url));
    $path = drupal_realpath('private://') . '/' . array_pop($tmp) . '/';
    // Create a new repo or open existing
    if (is_dir($path)) {
      $repo = Git::open($path);
    }
    else {
      $repo = Git::create($path, $repo_url, true);
    }
    // call anything that wants to parse this and turn it into nodes
    $gitcontent = module_invoke_all('git_book_parse', $repo, $path, $node);
    // incase anyone wants to do their build operations AFTER parsing
    drupal_alter('git_book_parse', $gitcontent);
    // tell them nothing else got created
    if (empty($gitcontent)) {
      drupal_set_message(t('No structure was able to be parsed. Are you sure you have a way of importing this type of git repo?'), 'warning');
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function git_book_node_delete($node) {
  // make sure we clean out this git repo
  if ($node->type == 'git_book') {
    $repo_url = $node->field_git_repo[LANGUAGE_NONE][0]['value'];
    // create an acceptable machine name
    $tmp = explode('/', str_replace('.git', '', $repo_url));
    $path = drupal_realpath('private://') . '/' . array_pop($tmp) . '/';
    // kill the git directory
    if (is_dir($path)) {
      _git_book_delete_folder($path);
    }
  }
}

/**
 * Callback to generate a node that's part of a parent from
 * title and content.
 */
function _git_book_make_node($title, $content, $parent, $weight) {
  $node = new stdClass();
  $node->type = 'page';
  node_object_prepare($node);
  $node->language = LANGUAGE_NONE;
  $node->status = 1;
  $node->promote = 0;
  $node->revision = 1;
  $node->uid = $GLOBALS['user']->uid;
  // set values we pull in for the outline
  $node->title = $title;
  $node->book['bid'] = $parent->book['bid'];
  $node->book['plid'] = $parent->book['mlid'];
  $node->book['weight'] = $weight;
  $node->body[LANGUAGE_NONE][0]['value'] = $content;

  // build out via submit then save
  if($node = node_submit($node)) {
    node_save($node);
  }
  return $node;
}

/**
 * Delete a folder recursively to clean up the git repo.
 */
function _git_book_delete_folder($dirPath) {
  foreach(new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dirPath, FilesystemIterator::SKIP_DOTS), RecursiveIteratorIterator::CHILD_FIRST) as $path) {
          $path->isDir() && !$path->isLink() ? rmdir($path->getPathname()) : unlink($path->getPathname());
  }
  rmdir($dirPath);
}
