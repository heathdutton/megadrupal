<?php

/**
 * Implement hook_menu() 
 */
function views_popup_menu () {
  $result['admin/structure/views/views_popup'] = array (
      'title' => t('Views Popup Settings'),
      'access callback' => 'user_access',
      'access arguments' => array('administer views'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('views_popup_admin_form'),
      'description' => 'Administer Views Popup default settings',    
      'type' => MENU_NORMAL_ITEM,
      );
  return $result;
}

/**
 * Implement hook_help()
 */
function views_popup_help ($path, $arg) {
  switch ($path) {
    case 'admin/structure/views/views_popup':
      return t('These settings are used when the default is selected in a view. For more info see ').l(t('Views Popup Help'),'admin/help/views_popup');
      
    case 'admin/help#views_popup':
      $output  = 
        '<h2>'.t('Using Views Popup').'</h2>' .
        '<ul>'.
        '<li>'.t('Start by creating a view with fields.').'</li>'.
        '<li>'.t('Add some fields.').'</li>'.
        '<li>'.t('Add a Global Views Popup field.').'</li>'.
        '<li>'.t('Select one field to attach the popup window to. You can also select the row.').'</li>'.
        '<li>'.t('Select one or more fields to place into the popup window.').'</li>'.
        '<li>'.t('Adust options as necessary').'</li>'.
        '<li>'.t('Save the field').'</li>'.
        '</ul><br>'.
        '<h2>'.t('Caveats').'</h2>' .
        '<ul>'.
        '<li>'.t('Popup rows and fields cannot be mixed.').'</li>'.
        '<li>'.t('If a row popup is listed first then all others will be ignored.').'</li>'.
        '<li>'.t('If a field popup is first then all rows will be ignored.').'</li>'.
        '</ul><br>'.
        '<h2>'.t('Notes').'</h2>' .
        '<p>'.
          t('Click on/off mode can have additional close buttons in the popup window. ').
          t('Include views-popup-window-custom-close-button in the class of the element to be clicked. ').
          t('For example, add this to the footer to include a Close button: ').
          '</p>'.
          "<b>&lt;input class='views-popup-window-custom-close-button' type='button' value='Close'&gt;</b>".
        '';
/*        
      
      
      Include views-popup-window-custom-close-button in the class of the element to be clicked.
      Use CSS to hide the default button if desired.
      For example, add this to the footer to include a Close button.
      
      <input class='views-popup-window-custom-close-button' type="button" value="Close">
*/

      return $output;
  }
}
  
function views_popup_class_hint(){
  return array (
    '#type' => 'fieldset',
    '#title' => t('Views Popup CSS classes'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#value' => t('<p>These classes have been defined in the standard Views Popup CSS file
        </p>
        <ul>
        <li>views-popup-window-shadow - adds a drop shadow</li>
        <li>views-popup-window-translucent - sets background opacity</li>
        </ul>'),
  );
}

function views_popup_admin_form(){
  $settings = views_popup_settings ();
  
  $form['popup_mode'] = array (
        '#type' => 'select',
        '#title' => t('Popup mode'),
        '#options' => $settings['popup_mode_options'], 
        '#default_value' => $settings['popup_mode'],
        '#description' => t('Popup mode of operation.'),
  );

  $form['popup_class'] = array (
        '#type' => 'textfield',
        '#title' => t('Popup class'),
        '#default_value' => $settings['popup_class'],
        '#description' => t('Additional CSS classses for popup window.'),
  );

  $form['popup_class_hint'] = views_popup_class_hint();
  
  $form['popup_delay'] = array (
        '#type' => 'textfield',
        '#title' => t('Popup delay'),
        '#default_value' => $settings['popup_delay'],
        '#description' => t('Delay in msec before popup appears.'),
  );
        
  $form['popup_reset'] = array (
        '#type' => 'textfield',
        '#title' => t('Popup reset time'),
        '#default_value' => $settings['popup_reset'],
        '#description' => t('Delay in msec between popups. Leave blank to use default (!default).'),
  );

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
  );
    
  return $form;
}

function views_popup_admin_form_submit($form_id, $form_values){
  drupal_set_message(t('Settings saved'));
  variable_set('views_popup_delay', $form_values['values']['popup_delay']);
  variable_set('views_popup_reset', $form_values['values']['popup_reset']);
  variable_set('views_popup_mode',  $form_values['values']['popup_mode']);
  variable_set('views_popup_class', $form_values['values']['popup_class']);
}

function views_popup_settings () {
  return array (
    'popup_delay' => variable_get('views_popup_delay', 500),
    'popup_reset' => variable_get('views_popup_reset', 1000),
    'popup_class' => variable_get('views_popup_class', ''),
    'popup_mode'  => variable_get('views_popup_mode', 'normal'),
    'popup_mode_options' => array (
          'normal' => t('Hover - left aligned'),
          'mouse'  => t('Hover - follow mouse'),
          'click'  => t('Click on/off')),
  );
}

/**
 * Implement hook_theme(). Register theming functions
 */
function views_popup_theme($existing, $type, $theme, $path ) {
  $path = drupal_get_path('module', 'views_popup');
  
  foreach (array('div','span','ul','ol','table') as $id) {
    $hooks["views_popup_$id"] = array (
      'path' => $path . '/theme',
      'variables' => array ( 'class' => '', 'header' => '', 'footer' => '', 'items' => array()),
      'template' => 'views-popup-'.$id,
      'pattern' => 'views_popup_'.$id.'__',
    ) ;
  }
  
  return $hooks;
}

/**
 * Implement hook_views_data()
 * 
 * @return array::field definition table
 */
function views_popup_views_data () {
  $data['views_popup']['table']['group'] = t('Global');
  $data['views_popup']['table']['join'] = array ( '#global' => array()) ;
  
  $data['views_popup']['views_popup'] = array ( 
    'title' => t('Popup Field'),
    'help' => t('This adds a popup window to the specified field.'),
    'field' => array (
      'handler' => 'views_popup_handler_popup',
      ),
    ) ;
  return $data;
}

/**
 * Implement hook_views_post_render(). Appends popup windows to end of view output
 * 
 * @param view   $view
 * @param string $output
 * @param cache  $cache
 * 
 * @return string
 */
function views_popup_views_post_render(&$view, &$output, &$cache){
  $output .= views_popup_handler_popup::saved_popups();
}  