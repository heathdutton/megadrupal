<?php

/**
 * @file
 * Implements a field storage that doesn't.
 */

/**
 * Implements hook_field_storage_info().
 */
function virtual_field_field_storage_info() {
  return array(
    'virtual_field' => array(
      'label' => t('Virtual field field storage'),
      'description' => t('Throws away field data.'),
    ),
  );
}

/**
 * Implements hook_field_storage_details().
 */
function virtual_field_field_storage_details($field) {
  // Nothing to do.
}

/**
 * Implements hook_field_storage_create_field().
 */
function virtual_field_field_storage_create_field($field) {
  // Nothing to do.
}

/**
 * Implements hook_field_storage_update_field().
 */
function virtual_field_field_storage_update_field($field, $prior_field, $has_data) {
  // Nothing to do.
}

/**
 * Implements hook_field_storage_delete_field().
 */
function virtual_field_field_storage_delete_field($field) {
  // Nothing to do.
}

/**
 * Implements hook_field_storage_load().
 */
function virtual_field_field_storage_load($entity_type, $entities, $age, $fields, $options) {
  // Nothing to do.
}

/**
 * Implements hook_field_storage_write().
 */
function virtual_field_field_storage_write($entity_type, $entity, $op, $fields) {
  // Nothing to do.
}

/**
 * Implements hook_field_storage_delete().
 */
function virtual_field_field_storage_delete($entity_type, $entity, $fields) {
  // Nothing to do.
}

/**
 * Implements hook_field_storage_delete_revision().
 */
function virtual_field_field_storage_delete_revision($entity_type, $entity, $fields) {
  // Nothing to do.
}

/**
 * Implements hook_field_storage_delete_instance().
 */
function virtual_field_field_storage_delete_instance($instance) {
  // Nothing to do.
}

/**
 * Implements hook_field_storage_query().
 */
function virtual_field_field_storage_query($query) {
  // Nothing to do.
  return array();
}

/**
 * Widget functions.
 */

/**
 * Implements hook_field_widget_info().
 */
function virtual_field_field_widget_info() {
  $virtual_fields = virtual_field_fields();
  $field_types = array();
  foreach ($virtual_fields as $type => $field) {
    if (!empty($field['virtual_field']['add_widget']) && $field['virtual_field']['add_widget']) {
      $field_types[] = $type;
    }
  }
  return array(
    'hidden' => array(
      'label' => t('Hidden (Automatic)'),
      'field types' => $field_types,
    ),
  );
}

/**
 * Implements hook_field_widget().
 */
function virtual_field_field_widget(&$form, &$form_state, $field, $instance, $items, $delta = 0) {
  return array(
    'value' => array(
      '#type' => 'hidden',
      '#default_value' => $items[$delta]['value'],
    ),
  );
}

/**
 * Get all virtual fields.
 */
function virtual_field_fields() {
  $fields = &drupal_static(__FUNCTION__);
  if (!isset($fields)) {
    $fields = array();
    foreach (field_info_field_types() as $type => $info) {
      if (!empty($info['virtual_field'])) {
        $fields[$type] = $info;
      }
    }
  }
  return $fields;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Uses hook_form_field_ui_field_overview_form_alter() to remove virtual
 * fields from the regular selection, and adds in a new row for adding virtual
 * fields.
 */
function virtual_field_form_field_ui_field_overview_form_alter(&$form, &$form_state) {
  if ($fields = virtual_field_fields()) {
    $field_types = array_keys($fields);
    if (!empty($form['fields']['_add_new_field'])) {
      // Remove virtual fields from the add field dropdown.
      foreach ($field_types as $type) {
        unset($form['fields']['_add_new_field']['type']['#options'][$type]);
      }
    }

    // Find virtual fields that's allowed on this entity type.
    $allowed_types = array();
    foreach ($fields as $type => $info) {
      if (empty($info['virtual_field']['entity_types']) || in_array($form['#entity_type'], $info['virtual_field']['entity_types'])) {
        $allowed_types[$type] = $info;
      }
    }

    // Add in create virtual field instance.
    if (!empty($allowed_types)) {
      $form['fields']['_add_new_virtual_field_field'] = array(
        '#attributes' => array(
          'class' => array('draggable', 'tabledrag-leaf', 'add-new'),
        ),
        '#row_type' => 'add_new_field',
        '#region_callback' => 'field_ui_field_overview_row_region',
        'label' => array(
          '#type' => 'textfield',
          '#title' => t('New field label'),
          '#title_display' => 'invisible',
          '#size' => 15,
          '#description' => t('Label'),
          '#prefix' => '<div class="label-input"><div class="add-new-placeholder">' . t('Add new virtual field') . '</div>',
          '#suffix' => '</div>',
        ),
        'weight' => array(
          '#type' => 'textfield',
          // We're adding 4 as the field_group module is adding 3. Isn't that
          // important, as long as we get a weight higher than any field, and
          // preferably higher than the weighs of the two default add rows.
          '#default_value' => field_info_max_weight($form['#entity_type'], $form['#bundle'], 'form') + 4,
          '#size' => 3,
          '#title_display' => 'invisible',
          '#title' => t('Weight for new field'),
          '#attributes' => array('class' => array('field-weight')),
          '#prefix' => '<div class="add-new-placeholder">&nbsp;</div>',
        ),
        'parent_wrapper' => array(
          'parent' => array(
            '#type' => 'select',
            '#title' => t('Parent for new field'),
            '#title_display' => 'invisible',
            '#options' => $form['fields']['#parent_options'],
            '#empty_value' => '',
            '#attributes' => array('class' => array('field-parent')),
            '#prefix' => '<div class="add-new-placeholder">&nbsp;</div>',
            '#parents' => array(
              'fields',
              '_add_new_virtual_field_field', 'parent'),
          ),
          'hidden_name' => array(
            '#type' => 'hidden',
            '#default_value' => '_add_new_virtual_field_field',
            '#attributes' => array('class' => array('field-name')),
          ),
        ),
        'field_name' => array(
          '#type' => 'machine_name',
          '#title' => t('New field name'),
          '#title_display' => 'invisible',
          // This field should stay LTR even for RTL languages.
          '#field_prefix' => '<span dir="ltr">field_',
          '#field_suffix' => '</span>&lrm;',
          '#size' => 15,
          '#description' => t('A unique machine-readable name containing letters, numbers, and underscores.'),
          // 32 characters minus the 'field_' prefix.
          '#maxlength' => 26,
          '#prefix' => '<div class="add-new-placeholder">&nbsp;</div>',
          '#machine_name' => array(
            'source' => array('fields', '_add_new_virtual_field_field', 'label'),
            'exists' => '_field_ui_field_name_exists',
            'standalone' => TRUE,
            'label' => '',
          ),
          '#required' => FALSE,
        ),
        'type' => array(
          '#type' => 'select',
          '#title' => t('Type of new field'),
          '#title_display' => 'invisible',
          '#options' => virtual_field_field_type_options(),
          '#empty_option' => t('- Select a field type -'),
          '#description' => t('Type of data to store.'),
          '#attributes' => array('class' => array('field-type-select')),
          '#prefix' => '<div class="add-new-placeholder">&nbsp;</div>',
        ),
        'widget_type' => array(
          '#type' => 'select',
          '#title' => t('Widget for new field'),
          '#title_display' => 'invisible',
          '#options' => field_ui_widget_type_options(NULL, TRUE),
          '#empty_option' => t('- Select a widget -'),
          '#description' => t('Form element to edit the data.'),
          '#attributes' => array('class' => array('widget-type-select')),
          '#cell_attributes' => array('colspan' => 3),
          '#prefix' => '<div class="add-new-placeholder">&nbsp;</div>',
        ),
        // Place the 'translatable' property as an explicit value so that
        // contrib modules can form_alter() the value for newly created fields.
        'translatable' => array(
          '#type' => 'value',
          '#value' => FALSE,
        ),
      );
    }
  }
  $form['#validate'][] = 'virtual_field_field_overview_form_validate';
  $form['#validate'][] = 'virtual_field_field_overview_form_submit';
}

/**
 * Return an array of field_type options for virtual fields.
 *
 * Virtually identical to field_ui_field_type_options().
 */
function virtual_field_field_type_options() {
  $options = &drupal_static(__FUNCTION__);

  if (!isset($options)) {
    $options = array();
    $field_types = virtual_field_fields();
    $field_type_options = array();
    foreach ($field_types as $name => $field_type) {
      // Skip field types which have no widget types, or should not be add via
      // uesr interface.
      if (field_ui_widget_type_options($name) && empty($field_type['no_ui'])) {
        $options[$name] = $field_type['label'];
      }
    }
    asort($options);
  }
  return $options;
}

/**
 * Validate handler.
 *
 * Strait copy of _field_ui_field_overview_form_validate_add_new adjusted for
 * naming.
 */
function virtual_field_field_overview_form_validate($form, &$form_state) {
  $field = $form_state['values']['fields']['_add_new_virtual_field_field'];

  // Validate if any information was provided in the 'add new virtual field'
  // row.
  if (array_filter(array(
        $field['label'],
        $field['field_name'],
        $field['type'],
        $field['widget_type'],
      ))) {
    // Missing label.
    if (!$field['label']) {
      form_set_error('fields][_add_new_virtual_field_field][label', t('Add new virtual field: you need to provide a label.'));
    }

    // Missing field name.
    if (!$field['field_name']) {
      form_set_error('fields][_add_new_virtual_field_field][field_name', t('Add new virtual field: you need to provide a field name.'));
    }
    // Field name validation.
    else {
      $field_name = $field['field_name'];

      // Add the 'field_' prefix.
      if (substr($field_name, 0, 6) != 'field_') {
        $field_name = 'field_' . $field_name;
        form_set_value($form['fields']['_add_new_virtual_field_field']['field_name'], $field_name, $form_state);
      }

      // Invalid field name.
      if (!preg_match('!^field_[a-z0-9_]+$!', $field_name)) {
        form_set_error('fields][_add_new_virtual_field_field][field_name', t('Add new virtual field: the field name %field_name is invalid. The name must include only lowercase unaccentuated letters, numbers, and underscores.', array('%field_name' => $field_name)));
      }
      if (strlen($field_name) > 32) {
        form_set_error('fields][_add_new_virtual_field_field][field_name', t("Add new virtual field: the field name %field_name is too long. The name is limited to 32 characters, including the 'field_' prefix.", array('%field_name' => $field_name)));
      }

      // Field name already exists. We need to check inactive fields as well, so
      // we can't use field_info_fields().
      $fields = field_read_fields(array('field_name' => $field_name), array('include_inactive' => TRUE));
      if ($fields) {
        form_set_error('fields][_add_new_virtual_field_field][field_name', t('Add new virtual field: the field name %field_name already exists.', array('%field_name' => $field_name)));
      }
    }

    // Missing field type.
    if (!$field['type']) {
      form_set_error('fields][_add_new_virtual_field_field][type', t('Add new virtual field: you need to select a field type.'));
    }

    // Missing widget type.
    if (!$field['widget_type']) {
      form_set_error('fields][_add_new_virtual_field_field][widget_type', t('Add new virtual field: you need to select a widget.'));
    }
    // Wrong widget type.
    elseif ($field['type']) {
      $widget_types = field_ui_widget_type_options($field['type']);
      if (!isset($widget_types[$field['widget_type']])) {
        form_set_error('fields][_add_new_virtual_field_field][widget_type', t('Add new virtual field: invalid widget.'));
      }
    }
  }
}

/**
 * Submit handler.
 *
 * Largely copied from field_ui_field_overview_form_submit.
 */
function virtual_field_field_overview_form_submit($form, &$form_state) {
  $form_values = $form_state['values']['fields'];
  $entity_type = $form['#entity_type'];
  $bundle = $form['#bundle'];
  $admin_path = _field_ui_bundle_admin_path($entity_type, $bundle);

  $bundle_settings = field_bundle_settings($entity_type, $bundle);
  $info = virtual_field_fields();

  $destinations = array();
  // Create new field.
  $field = array();
  if (!empty($form_values['_add_new_virtual_field_field']['field_name']) &&
    isset($info[$form_values['_add_new_virtual_field_field']['type']])) {
    $values = $form_values['_add_new_virtual_field_field'];

    $field = array(
      'field_name' => $values['field_name'],
      'type' => $values['type'],
      'translatable' => $values['translatable'],
      'storage' => array(
        'type' => 'virtual_field',
      ),
    );

    // If the field limits entity types, set the field to the same limits.
    if (!empty($info[$values['type']]['virtual_field']['entity_types'])) {
      $field['entity_types'] = $info[$values['type']]['virtual_field']['entity_types'];
    }

    $instance = array(
      'field_name' => $field['field_name'],
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => $values['label'],
      'widget' => array(
        'type' => $values['widget_type'],
        'weight' => $values['weight'],
      ),
    );

    // Create the field and instance.
    try {
      field_create_field($field);
      field_create_instance($instance);

      $destinations[] = $admin_path . '/fields/' . $field['field_name'] . '/field-settings';
      $destinations[] = $admin_path . '/fields/' . $field['field_name'];

      // Store new field information for any additional submit handlers.
      $form_state['fields_added']['_add_new_virtual_field_field'] = $field['field_name'];
    }
    catch (Exception $e) {
      drupal_set_message(t('There was a problem creating field %label: @message.', array('%label' => $instance['label'], '@message' => $e->getMessage())), 'error');
    }
  }
  if ($destinations) {
    $destination = drupal_get_destination();
    $destinations[] = $destination['destination'];
    unset($_GET['destination']);
    $form_state['redirect'] = field_ui_get_destinations($destinations);
  }
  else {
    drupal_set_message(t('Your settings have been saved.'));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Unshow a warning.
 */
function virtual_field_form_field_ui_field_settings_form_alter(&$form, &$form_state) {
  $field_info = field_info_fields();
  // Odd place to hide it..
  $field_name = $form['field']['field_name']['#value'];
  if ($field_info[$field_name]['storage']['type'] == 'virtual_field') {
    // Replace the usual description with a helpful explanation.
    $form['field']['#description'] = '<p>' . t('This is a virtual field that does not store any data. It is up to the %module module how this field gets its value.', array('%module' => $form['field']['module']['#value'])) . '</p>';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Remove some settings that doesn't apply from the field edit page.
 */
function virtual_field_form_field_ui_field_edit_form_alter(&$form, &$form_state, $instance) {
  // These should be configurable by the field module. It's not given that the
  // field isn't editable (though more work on the implementing modules part).
  if ($form['#field']['storage']['type'] == 'virtual_field') {
    // Hide default value widget.
    $form['instance']['default_value_widget']['#access'] = FALSE;
    // Required implies editable.
    $form['instance']['required']['#access'] = FALSE;
    // Hide field settings.
    $form['field']['#access'] = FALSE;
  }
}
