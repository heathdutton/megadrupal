<?php
/**
 * @file
 * Contains user page integration, API integration and admin settings page.
 */

/**
 * Implements hook_entity_info().
 */
function clickbank_ipn_entity_info() {
  $return = array(
    'clickbank_transaction' => array(
      'label' => t('Clickbank Transaction', array(), array('context' => 'a Clickbank Transaction')),
      'controller class' => 'EntityAPIController',
      'base table' => 'clickbank_transaction',
      'load hook' => 'clickbank_transaction_load',
      'uri callback' => 'clickbank_transaction_uri',
      'label callback' => 'clickbank_transaction_label',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'clickbank_transaction_id',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(
        'clickbank_transaction' => array(
          'label' => t('Clickbank Transaction', array(), array('context' => 'a clickbank transaction')),
        ),
      ),
      'token type' => 'clickbank-transaction',
      'metadata controller class' => '',
      'access callback' => 'clickbank_entity_access',
      'permission labels' => array(
        'singular' => t('clickbank transaction'),
        'plural' => t('clickbank transactions'),
      ),

      // // Prevent Redirect alteration of the transaction.
      'redirect' => FALSE,
    ),
  );

  return $return;
}

/**
 * Display help and module information
 */
function clickbank_ipn_help($path, $arg) {
  $output = '';
  switch ($path) {
  case "admin/help#clickbank":
  $output = '<p>'.  t("Use Clickbank to manage paid subscriptions to your site, sell and deliver downloadable products, and track your sales with Drupal Views.") .'</p>';
  break;
  }
  return $output;
}
	
/**
 * Implementation of hook_perm().
 */
function clickbank_ipn_perm() {
  return array('administer clickbank');
}

/**
 * Implementation of hook_menu
 */
function clickbank_ipn_menu() {
  $items = array();
  
  // Note: admin/content/clickbank is defined by a default View.

  $items['admin/config/services/clickbank'] = array(
	'title' => t('Clickbank Settings'),
	'description' => t('Set the various Clickbank Settings here'),
	'page callback' => 'drupal_get_form',
	'page arguments' => array('clickbank_ipn_admin'),
	'access arguments' => array('access administration pages'),
	'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/clickbank/main'] = array(
	'title' => t('Main'),
	'type' => MENU_DEFAULT_LOCAL_TASK,
	'weight' => 0,
  );
  $items['clickbank/ipn'] = array(
	'title' => t('Clickbank IPN'),
	'page callback' => 'clickbank_ipn_receive_ipn',
	'access arguments' => array('access content'),
	'type' => MENU_CALLBACK,
  );

  return $items;
}

// ======================================
// Administration Page:
// ======================================
function clickbank_ipn_admin() {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#weight' => -50,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['main']['clickbank_ipn_secret_key'] = array(
	'#type' => 'textfield',
	'#title' => t('Secret Key'),
	'#default_value' => variable_get('clickbank_ipn_secret_key', 'test'),
	'#size' => 32,
	'#maxlength' => 128,
	'#description' => t("The secret key you use for your products. You can get one <a href=\"http://advisory.reseller.hop.clickbank.net\">here</a>"),
	'#required' => FALSE,
  );
  $form['main']['clickbank_ipn_debug'] = array(
	'#type' => 'checkbox',
	'#title' => t('Debug Mode'),
	'#default_value' => variable_get('clickbank_ipn_debug', FALSE),
	'#description' => t("Check this to write all debug messages to the log."),
	'#required' => FALSE,
  );
  return system_settings_form($form);
}

function clickbank_ipn_receive_ipn() {
  $ipn_raw = file_get_contents('php://input');
  clickbank_ipn_debug_message('Received a raw POST submission: '. print_r($ipn_raw,TRUE));

  // NOTE: the mcrypt libraries need to be installed and listed as an available extension in
  // your phpinfo() to be able to use this method of decryption.
  $secretKey = variable_get('clickbank_ipn_secret_key', '');
  // get JSON from raw body...
  $ipn = drupal_json_decode($ipn_raw);
  clickbank_ipn_debug_message('Decoded POST submission: '. print_r($ipn,TRUE));
  // Pull out the encrypted notification and the initialization vector for
  // AES/CBC/PKCS5Padding decryption
  $encrypted = $ipn['notification'];
  $iv = $ipn['iv'];
  clickbank_ipn_debug_message('IV: '.print_r($iv,TRUE));
  // decrypt the body...
  $decrypted = trim(mcrypt_decrypt(MCRYPT_RIJNDAEL_128,
               substr(sha1($secretKey), 0, 32),
               base64_decode($encrypted),
               MCRYPT_MODE_CBC,
               base64_decode($iv)));
  clickbank_ipn_debug_message('Decrypted: ' . print_r($decrypted,TRUE));
  $decrypted = preg_replace('/[\x03-\x07]/', '', $decrypted);
  // convert the decrypted string to a JSON object...
  $transaction = drupal_json_decode($decrypted);
  // Ready to rock and roll - If the decoding of the JSON string wasn't successful,
  // then you can assume the notification wasn't encrypted with your secret key.
  clickbank_ipn_debug_message('Transaction: ' . print_r($transaction,TRUE));

  // Check validation
  if ($transaction == 0) {
	drupal_not_found();
	clickbank_ipn_debug_message('Clickbank Validation Failed.');
  }

  // Everything is Valid, Prepare the variables for use
  else {
	clickbank_ipn_debug_message('Success! Received IPN and validated. Creating Clickbank transaction...');
	
	// Let Clickbank know that everything has processed correctly.
	http_response_code(200);

	// Insert to Database, then process request
	clickbank_ipn_insert_request($transaction);
  }
}


// ======================================
// Functions:
// ======================================

function clickbank_ipn_insert_request($transaction) {
  $newTransaction = array();
  $newTransaction['type'] = 'clickbank_transaction';

  // map field data
  foreach ($transaction as $key => $value) {
	if ($key == "customer") {
	  foreach ($value as $customertype => $customertypevalue) {
	    if ($customertype == "shipping") {
		  foreach ($customertypevalue as $custinfo => $custinfovalue) {
		    if ($custinfo == "address") {
			  foreach ($custinfovalue as $addresskey => $addressvalue) {
			    $newTransaction['shipping' . $addresskey] = $addressvalue;
			  }
			}
			else {
			  $newTransaction['shipping' . $custinfo] = $custinfovalue;
			}
		  }
		}
		if ($customertype == "billing") {
		  foreach ($customertypevalue as $custbillinginfo => $custbillinginfovalue) {
		    if ($custbillinginfo == "address") {
			  foreach ($custbillinginfovalue as $billingaddresskey => $billingaddressvalue) {
			    $newTransaction['billing' . $billingaddresskey] = $billingaddressvalue;
			  }
			}
			else {
			  $newTransaction['billing' . $custbillinginfo] = $custbillinginfovalue;
			}
		  }
		}
	  }
    }
	elseif ($key == "lineItems") {
	  foreach ($value as $lineitem) {
	    foreach ($lineitem as $lineitemkey => $lineitemvalue) {
		  $newTransaction['lineItems' . $lineitemkey] = $lineitemvalue;
		}
	  }
	}
	else {
	  $newTransaction[$key] = $value;
	}
  }

  // Create and save the clickbank transaction
  $Transaction = entity_create('clickbank_transaction', $newTransaction);
  entity_save('clickbank_transaction', $Transaction);

  clickbank_ipn_debug_message('New Clickbank Transaction Created: '.print_r($Transaction,TRUE));
}

function clickbank_ipn_debug_message($message) {
  //Debugging
  if (variable_get('clickbank_ipn_debug', FALSE)) {
	watchdog('clickbank',$message);
  }
}

/**
 * Loads an transaction by ID.
 */
function clickbank_transaction_load($clickbank_transaction_id) {
  $clickbank_transactions = clickbank_transaction_load_multiple(array($clickbank_transaction_id), array());
  return $clickbank_transactions ? reset($clickbank_transactions) : FALSE;
}

/**
 * Returns the name of the specified clickbank transaction type or all names keyed by type if no type is specified.
 *
 * For Clickbank IPN 2.0, the decision was made to support transaction types at the
 * database level but not to introduce their complexity into the UI. To that end
 * transaction "types" (i.e. bundles) may only be defined by altering the entity info.
 *
 * This function merely traverses the bundles array looking for data instead of
 * relying on a special hook.
 *
 * @param $type
 *   The transaction type whose name should be returned; corresponds to the bundle key
 *     in the transaction entity definition.
 *
 * @return
 *   Either the specified name, defaulting to the type itself if the name is not
 *   found, or an array of all names keyed by type if no type is passed in.
 */
function clickbank_transaction_type_get_name($type = NULL) {
  $names = array();

  $entity = entity_get_info('clickbank_transaction');

  foreach ($entity['bundles'] as $key => $value) {
    $names[$key] = $value['label'];
  }

  if (empty($type)) {
    return $names;
  }

  if (empty($names[$type])) {
    return check_plain($type);
  }
  else {
    return $names[$type];
  }
}

/**
 * Wraps commerce_transaction_type_get_name() for the Entity module.
 */
function clickbank_transaction_type_options_list() {
  return clickbank_transaction_type_get_name();
}

/**
 * Loads multiple clickbank transactions by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $clickbank_transaction_ids
 *   An array of transaction IDs.
 * @param $conditions
 *   An array of conditions to filter loaded transactions by on the {clickbank_transaction}
 *   table in the form 'field' => $value.
 * @param $reset
 *   Whether to reset the internal transaction loading cache.
 *
 * @return
 *   An array of transaction objects indexed by clickbank_transaction_ids.
 */
function clickbank_transaction_load_multiple($clickbank_transaction_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('clickbank_transaction', $clickbank_transaction_ids, $conditions, $reset);
}
