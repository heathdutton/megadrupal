<?php

/**
 * @file
 * Force users to fill any required profile fields at login.
 */

/**
 * Implements hook_menu().
 */
function pfff_menu() {
  $items = array();
  $items['user/fill_fields/%/%'] = array(
    'title' => 'Complete your profile',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pfff_login', 2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}
/**
 * Implements hook_user_login().
 */
function pfff_user_login(&$edit, $account) {
  global $user;
  global $language;

  if ($user->uid == 1) {
    return;
  }

	$uid = $user->uid;

  // return if no action is required.
  $fields = pfff_fields($uid);
	if (empty($fields)) {
	  return;
	}

	// Destroy the current session.
	module_invoke_all('user_logout', $user);
	session_destroy();

  // We have to use $GLOBALS to unset a global variable.
  $user = drupal_anonymous_user();


  //TODO: check this!!
  $query = NULL;
  // Deal with destination from password reset one time login link.
  if (arg(0) == 'user' && arg(1) == 'reset') {
    $query = array('destination' => "user/$uid/edit");
  }
  
  if (!empty($_REQUEST['destination'])) {
    $query = array('destination' => $_REQUEST['destination']);
  }

  unset($_GET['destination']);

  $result = db_select('users', 'u')
    ->fields('u')
    ->condition('uid', $uid)
    ->range(0, 1)
    ->execute()
    ->fetchAllAssoc('uid');
  $signatory = array_pop($result);

  drupal_goto('user/fill_fields/' . $signatory->uid . '/' . md5($signatory->name . $signatory->pass . $signatory->login), array('query' => $query));
}
/***
 * Helper functions that return profile fields that need to be reviewed / filled.
 */
function pfff_fields($uid) {
  // #1 check if any required profile field still need to be filled
  $account = user_load($uid);
  $fields = field_info_instances('user', 'user');
  $req_fields = array();
  foreach ($fields as $field_name => $instance) {
    if ($instance['required'] && empty($account->$field_name)) {
      $req_fields[] = $field_name;
    }
  }
  // #2 we want some not required fields to be reviewed
  //    this requires a more complex logic and may be implemented 
  //    in the future; leaving the comment as a reminder 

  return $req_fields;
}
/**
 * Require registered to fill missing fields.
 */
function pfff_login($form, $form_state, $uid, $id_hash = NULL) {
  $form['helptext'] = array(
    '#markup' => t('Please fill this form to complete your registration.'),
  );
  // get fields to be filled/reviewd for this account
  $fields = pfff_fields($uid);
  $register_form = user_register_form($form, $form_state);
  foreach ($fields as $index => $field_name) {
    $form[$field_name] = $register_form[$field_name];
  }
  // TODO: need to get saved values for non empty fields that just need 
  // to be reviewed
  $form['uid'] = array(
    '#type' => 'value',
    '#value' => $uid,
  );
  $form['id_hash'] = array(
    '#type' => 'value',
    '#value' => $id_hash,
  );
  $form['save'] = array(
    '#type' => 'submit',
    '#weight' => 1000,
    '#value' => t('Submit'),
  );
  return $form;
}

function pfff_login_validate($form, &$form_state) {
  $result = db_select('users', 'u')
    ->fields('u')
    ->condition('uid', $form_state['values']['uid'])
    ->range(0, 1)
    ->execute()
    ->fetchAllAssoc('uid');

  $account = array_pop($result);
  $id_hash = md5($account->name . $account->pass . $account->login);

  if ($id_hash != $form_state['values']['id_hash']) {
    form_set_error('pfff_validate', t('User ID cannot be identified.'));
    drupal_goto();
  }
}

function pfff_login_submit($form, &$form_state) {
  global $user;
  $user = user_load((int)$form_state['values']['uid']);
  $fields_value = array();
  $fields = pfff_fields((int)$form_state['values']['uid']); 
  foreach ($fields as $index => $field_name) {
    $fields_value[$field_name] = $form_state['values'][$field_name];
  }
	$redirect = 'user/'. $user->uid;
	if (!empty($_GET['destination'])) {
		$redirect = $_GET['destination'];
	}
  $form_state['redirect'] = $redirect;
  // Update the user table timestamp noting user has logged in.
  $user->login = REQUEST_TIME;
  db_update('users')
    ->fields(array('login' => $user->login))
    ->condition('uid', $user->uid)
    ->execute();
  watchdog('pfff', '%name filled missing fields.', array('%name' => $user->name,));
  drupal_session_regenerate();
  user_save($user, $fields_value);
  user_module_invoke('login', $edit, $user);
}

