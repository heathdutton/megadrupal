<?php

/**
 * @file
 * Implements Todo Pago payment services for use with Drupal Commerce.
 */

/**
 * Implements hook_libraries_info().
 */
function commerce_todopago_libraries_info() {
  $libraries = array();

  $libraries['todopago'] = array(
    'name' => 'Todo Pago PHP SDK',
    'vendor url' => 'http://www.todopago.com.ar',
    'download url' => 'https://github.com/TodoPago/SDK-PHP',
    'path' => 'TodoPago/lib',
    'version arguments' => array(
      'file' => 'TodoPago/lib/Sdk.php',
      'pattern' => '/^define\(\'TODOPAGO_VERSION\', *\'([0-9\.]+)\'\);$/',
      'lines' => 10,
    ),
    'files' => array(
      'php' => array(
        'Sdk.php',
      ),
    ),
    'integration files' => array(
      'commerce_todopago' => array(
        'php' => array(
          'includes/commerce_todopago.service.inc',
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function commerce_todopago_menu() {
  $items['admin/commerce/config/todopago'] = array(
    'title' => t('Todo Pago'),
    'description' => t('Configure some global options of Todo Pago.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_todopago_admin_settings'),
    'file' => 'includes/commerce_todopago.admin.inc',
    'access arguments' => array('administer commerce_todopago settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_todopago_permission() {
  $permissions = array();

  $permissions['administer commerce_todopago settings'] = array(
    'title' => t('Administer Todo Pago settings'),
  );

  return $permissions;
}


/**
 * Loads the payment transaction matching the Todo Pago's transaction ID.
 *
 * @param $remote_id
 *   The Todo Pago's transaction ID to search for in the remote_id field.
 *
 * @return
 *   The loaded payment transaction.
 */
function commerce_todopago_payment_transaction_load($remote_id) {
  $transactions = commerce_payment_transaction_load_multiple(array(), array('remote_id' => $remote_id));
  return $transactions ? reset($transactions) : FALSE;
}

/**
 * Returns an array of all possible currency codes for the different Todo Pago's
 * payment methods.
 *
 * @param $method_id
 *   The ID of the Todo Pago's payment method whose currencies should be returned.
 *
 * @return
 *   An associative array of currency codes with keys and values being the
 *   currency codes accepted by the specified Todo Pago's payment method.
 */
function commerce_todopago_currencies($method_id = '') {
  $currencies = array();

  if (($library = libraries_load('todopago')) && !empty($library['loaded'])) {
    $currencies = TodoPagoConnector::get_currencies();

    switch ($method_id) {
      default:
        $currencies = drupal_map_assoc($currencies);
    }
  }

  return $currencies;
}

/**
 * Returns the Remote ID value for the received values
 *
 * @param $order
 *   Commerce Order
 * @param $hash
 *   An unique hash for the Remote ID
 *
 * @return
 *   A string with the Remote ID
 */
function commerce_todopago_remote_id($order, $hash) {
  if (empty($hash)) {
    $hash = uniqid();
  }

  return format_string('@order_id_@hash', array('@order_id' => $order->order_number, '@hash' => $hash));
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_todopago_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_todopago'] = array(
    'base' => 'commerce_todopago',
    'title' => t('Todo Pago'),
    'short_title' => t('Todo Pago'),
    'description' => t('Payment through Todo Pago\'s gateway'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
    'file' => 'includes/commerce_todopago.payment_method.inc',
  );

  return $payment_methods;
}

/**
 * Implements hook_cron().
 */
function commerce_todopago_cron() {
  $changed = REQUEST_TIME - variable_get('commerce_todopago_cron_range', 21600);

  $query = db_select('commerce_payment_transaction', 'cpt');
  $query->addField('cpt', 'transaction_id');
  $query->where('cpt.payment_method = :paymentMethod', array(':paymentMethod' => 'commerce_todopago'))
    ->where('cpt.status = :status', array(':status' => COMMERCE_PAYMENT_STATUS_PENDING))
    ->where('cpt.changed < :changed', array(':changed' => $changed));

  $queue = DrupalQueue::get('commerce_todopago_pending_transactions');
  foreach ($query->execute()->fetchCol() as $transaction_id) {
    $queue->createItem($transaction_id);
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function commerce_todopago_cron_queue_info() {
  $queues['commerce_todopago_pending_transactions'] = array(
    'worker callback' => 'commerce_todopago_queue_pending_transactions',
    'time' => 60,
  );

  return $queues;
}

function commerce_todopago_queue_pending_transactions($transaction_id) {
  if (
    (!empty($transaction_id)) &&
    ($transaction = commerce_payment_transaction_load($transaction_id)) &&
    ($transaction->status == COMMERCE_PAYMENT_STATUS_PENDING) &&
    (!empty($transaction->instance_id)) &&
    ($payment_method = commerce_payment_method_instance_load($transaction->instance_id))
  ) {
    if (($library = libraries_load('todopago')) && !empty($library['loaded'])) {
      $todopago = new TodoPagoConnector($payment_method['settings']);

      try {
        $todopago->update_status($transaction);
      }
      catch (Exception $e) {
        watchdog('commerce_todopago', 'There was an error fetching the status of the Transaction Nr. @transaction_number of the payment for Order Nr. @order_number: %error', array('@transaction_number' => $transaction->transaction_id, '@order_number' => $transaction->order_id, '%error' => $e->getMessage()), WATCHDOG_NOTICE);
      }
    }
  }
}

