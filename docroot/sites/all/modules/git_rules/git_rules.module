<?php
/**
 * @file
 * Core functions for the Git Rules module.
 */

/**
 *
 */
define('GIT_RULES_COMMAND_SUCCEEDED', 1);
define('GIT_RULES_COMMAND_NOT_RUN', 0);
define('GIT_RULES_COMMAND_FAIL', 2);

/**
 * Implements hook_cron().
 * Go through commands and log in watchdog.
 */
function git_rules_cron() {
  // $result = db_query('SELECT * FROM {git_rules_command_queue} WHERE exec_status <> 0');
  // while ($command = db_fetch_object($result)) {
  //   if ($command->exec_status == GIT_RULES_COMMAND_SUCCEEDED) {
  //     watchdog(WATCHDOG_INFO, "Git repository backup succeded. Executed command: %s", $command->command);
  //   }
  //   if ($command->exec_status == GIT_RULES_COMMAND_FAIL) {
  //     watchdog(WATCHDOG_INFO, "Git repository backup failed. Executed command: %s", $command->command);
  //   }
  // }
  // // Clean out everything that has been run.
  // db_query("DELETE FROM {git_rules_command_queue} WHERE exec_status <> 0");
}

/**
 *
 */
function git_rules_command_queue_add($cmd) {
  exec($cmd, $output, $exec_result);
  // print $cmd . "\n"; print_r($output); print "\n" . $exec_result . "\n";
  // if (!git_rules_command_exists($cmd)) {
  //   db_query("INSERT INTO {git_rules_command_queue}(command, exec_status) VALUES('%s', %d)", $cmd, 0);
  // }
}

/**
 *
 */
function git_rules_command_exists($cmd) {
  // return db_result(db_query("SELECT COUNT(*) FROM {git_rules_command_queue} WHERE command = '%s' AND exec_status = 0", $cmd));
}
