<?php


/**
 * Implements hook_init().
 */
function services_sso_server_helper_init() {
  global $user;
  global $cookie_domain;
  global $base_path;
  $common_cookie_domain = _services_sso_server_helper_get_common_cookie_domain();

  // If we are currently authenticated, get rid of any other session cookies that isn't relevant
  if (!empty($user->uid) && stripos($cookie_domain, $common_cookie_domain) != 0) {
    $sid = $user->sid;
    foreach ($_COOKIE as $cookie_key => $cookie_value) {
      if (stripos($cookie_key, 'SESS') === 0) {
        if ($cookie_value == $sid) {
          // Duplicate the local subdomain cookie to common domain
          setcookie($cookie_key, $cookie_value, REQUEST_TIME + 3600 * 24 * 30, $base_path, $common_cookie_domain, FALSE, TRUE);
        }
        else {
          // Unset any common_domain session cookies that are not valid
          setcookie($cookie_key, '', 0, $base_path, $common_cookie_domain, FALSE, TRUE);
        }
      }
    }
  }

  if (isset($_REQUEST['services_sso_session_name'])) {
    foreach ($_COOKIE as $key => $val) {
      setcookie ($key, "", REQUEST_TIME - 3600, $base_path, $cookie_domain);
    }
    services_sso_server_helper_set_cookie();
  }

  drupal_add_css(drupal_get_path('module', 'services_sso_server_helper').'/css/styles.css');
  drupal_add_js(drupal_get_path('module', 'services_sso_server_helper').'/js/ui.js');
}

function services_sso_server_helper_set_cookie() {
  if (isset($_REQUEST['services_sso_session_name']) && isset($_REQUEST['services_sso_sessid'])) {
    global $cookie_domain;
    global $base_path;

    setcookie($_REQUEST['services_sso_session_name'], $_REQUEST['services_sso_sessid'], 0, $base_path, $cookie_domain);

    if (isset($_REQUEST['services_sso_destination'])) {
      $options = array(
        'query' => array(
          'services_sso_client_url' => $_REQUEST['services_sso_client_url'],
          'services_sso_modal' => $_REQUEST['services_sso_modal'],
        )
      );

      drupal_goto($_REQUEST['services_sso_destination'], $options);
      exit();
    }
  }
}

/**
 * Implements hook_menu().
 */
function services_sso_server_helper_menu() {
  $items = array();
  // Services single sign-on server helper settings.
  $items['admin/config/services/sso-server-helper'] = array(
    'title' => 'Services single sign-on server helper settings',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('services_sso_server_helper_admin_form'),
    'file' => 'includes/services_sso_server_helper.admin.inc',
    'access arguments' => array('administer services sso server helper'),
    'description' => t('Settings for the SSO server helper. The actual SSO is offered through Structure > Services'),
  );
  $items['admin/config/services/sso-server-helper/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('services_sso_server_helper_admin_form'),
    'file' => 'includes/services_sso_server_helper.admin.inc',
    'access arguments' => array('administer services sso server helper'),
    'description' => t('Settings for the SSO server helper. The actual SSO is offered through Structure > Services'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function hook_permission() {
  return array(
    'administer services sso server helper' => array(
      'title' => t('Administer services single sign-on server helper'),
      'description' => t('Perform administration tasks for the services single sign-on server helper module.'),
    ),
  );
}

/**
 * Implements hook_user_logout().
 */
function services_sso_server_helper_user_logout($account) {
  global $cookie_domain;
  global $base_path;
  $common_cookie_domain = _services_sso_server_helper_get_common_cookie_domain();

  foreach ($_COOKIE as $cookie_key => $cookie_value) {
    if (stripos($cookie_key, 'SESS') === 0) {
        // Unset any common_domain session cookies
        setcookie($cookie_key, '', 0, $base_path, $common_cookie_domain, FALSE, TRUE);
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * - Handle backlinks to the client
 */
function services_sso_server_helper_form_alter(&$form, &$form_state, $form_id) {

  //If there is a backlink to the client, prepare the message and redirect back.
  if (!empty($_REQUEST['services_sso_client_url'])) {
    switch ($form_id) {
      case 'user_profile_form':
        $form_state['storage']['external_dest_message'] = t('Account information updated.');
        $form['#submit'][] = 'services_sso_server_helper_go_back_to_client';
        break;

      case 'user_pass':
          $form_state['storage']['external_dest_message'] = t('Further instructions have been sent to your e-mail address.');
          $form['#submit'][] = 'services_sso_server_helper_go_back_to_client';

        break;
      case 'user_register_form':
          $form_state['storage']['external_dest_message'] = t('Thank you for applying for an account. Your account is currently pending approval by the site administrator.
  In the meantime, a welcome message with further instructions has been sent to your e-mail address.');
          $form['#submit'][] = 'services_sso_server_helper_go_back_to_client';

        break;
    }
  }
}
/*
 * Additional submit function for the user forms to send the user back to the client site
 */
function services_sso_server_helper_go_back_to_client($form, &$form_state) {

  // Clear messages so the next time the user comes it doesn't show a confusing message.
  drupal_get_messages();

  $options = array(
    'query' => array(
      'message' => $form_state['storage']['external_dest_message'],
      'services_sso_update' => 1,
    ),
    'absolute' => TRUE,
  );

  //Redirect to the client page
  drupal_goto($_REQUEST['services_sso_client_url'], $options);
}

/**
 * Implements hook_email_registration_name().
 *
 * Other modules may implement hook_email_registration_name($edit, $account)
 * to generate a username (return a string to be used as the username, NULL
 * to have email_registration generate it).
 *
 * @param $edit
 *   The array of form values submitted by the user.
 * @param $account
 *   The user object on which the operation is being performed.
 *
 * @return
 *   A string defining a generated username.
 */
function services_sso_server_helper_email_registration_name($edit, $account) {
  if (module_exists('services_user_login_method_ldap')) {
    $new_name = services_user_login_method_ldap_generate_username($edit, $account);
    $email_domain = variable_get('services_user_login_method_ldap_email_domain', '');
  }
  else if (!empty($account->field_profile_fname) && !empty($account->field_profile_lname)) {
    $first_name = $account->field_profile_fname['und'][0]['value'];
    $last_name = $account->field_profile_lname['und'][0]['value'];
    $new_name = str_ireplace('-', '', substr(drupal_html_class($first_name), 0, 1) . drupal_html_class($last_name));
  }
  else {
    // Fail auto name generation
    // Fail registration entirely
    return false;
  }

  //If this hook_username_generation returns false, then use the defaul method to generate a new name

  // if username generated from this name combination already exists, append underscore and number eg:(cjames_123)
  if ((bool) db_query("SELECT 1 FROM {users} WHERE uid <> :uid AND LOWER(name) = LOWER(:new_name)", array(':uid' => $account->uid, ':new_name' => $new_name))->fetchField()) {
    $name_idx = db_query_range("SELECT SUBSTRING_INDEX(name,'_',-1) FROM {users} WHERE name REGEXP :search ORDER BY CAST(SUBSTRING_INDEX(name,'_',-1) AS UNSIGNED) DESC", 0, 1, array(':search' => '^' . $new_name . '_[0-9]+$'))->fetchField();

    $new_name .= '_' . ($name_idx + 1);
  }

  return $new_name;
}

function services_sso_server_helper_permission() {
  return array(
    'administer services sso server helper' => array(
      'title' => t('Administer Services SSO server helper'),
      'description' => t('Perform administration tasks for Services SSO server helper.'),
    ),
  );
}

/**
 * Return a base domain for assumed cookie
 */
function _services_sso_server_helper_get_common_cookie_domain() {
  if ($cookie_domain = variable_get('services_sso_server_helper_cookie_domain', '')) {
    return $cookie_domain;
  }

  if (!empty($_SERVER['HTTP_HOST'])) {
    $cookie_domain = $_SERVER['HTTP_HOST'];
    // Strip leading periods, www., and port numbers from cookie domain.
    $cookie_domain = ltrim($cookie_domain, '.');
    if (count(explode('.', $cookie_domain)) > 2) {
      $parts = explode('.', $cookie_domain);
      $cookie_domain = $parts[count($parts) - 2] . '.' . $parts[count($parts) - 1];
    }
    $cookie_domain = explode(':', $cookie_domain);
    $cookie_domain = '.' . $cookie_domain[0];

    return $cookie_domain;
  }
}
