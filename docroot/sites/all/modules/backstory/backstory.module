<?php

/**
 * @file
 * Integrates with Backstory, a contextual website optimization service.
 */


/**
 * Implements hook_menu().
 */
function backstory_menu() {
  $items = array();

  $items['admin/config/services/backstory'] = array(
    'title' => 'Backstory',
    'description' => 'Configure your Backstory settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('backstory_settings_form'),
    'access arguments' => array('administer backstory'),
    'file' => 'includes/backstory.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function backstory_permission() {
  return array(
    'administer backstory' => array(
      'title' => t('Administer Backstory'),
      'description' => t('Allow users to configure your Backstory settings.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_page_alter().
 */
function backstory_page_alter(&$page) {
  // If Backstory should be active on this request...
  if (backstory_validate_display()) {
    // Add the Backstory JavaScript to the footer.
    backstory_add_js();
  }
}

/**
 * Determines whether or not Backstory should be active on a page request.
 *
 * @return
 *   TRUE or FALSE indicating whether or not Backstory should be active on the
 *   current page request.
 */
function backstory_validate_display() {
  global $user;
  $active = TRUE;

  // First check the user's roles for exemptions.
  $exempt_roles = backstory_exempt_roles();

  if (!empty($exempt_roles)) {
    if (empty($user->roles) || array_intersect(array_keys($user->roles), array_values($exempt_roles))) {
      $active = FALSE;
    }
  }

  // Then check the current path for exemption or specific inclusion.
  $mode = backstory_paths_mode();
  $paths = backstory_paths();

  if (!empty($paths)) {
    // Convert the Drupal path to lowercase.
    $current_path = drupal_strtolower(drupal_get_path_alias($_GET['q']));

    // Compare the lowercase internal and lowercase path alias (if any).
    $path_match = drupal_match_path($current_path, $paths);

    if ($current_path != $_GET['q']) {
      $path_match = $path_match || drupal_match_path($_GET['q'], $paths);
    }

    // If the current path matched, disable Backstory if in 'disable' mode.
    if ($path_match && $mode == 'disable') {
      $active = FALSE;
    }

    // If the current path didn't match, disable Backstory if in 'enable' mode.
    if (!$path_match && $mode == 'enable') {
      $active = FALSE;
    }
  }
  elseif ($mode == 'enable') {
    // Disable Backstory if the enable mode was selected but no paths were given.
    $active = FALSE;
  }

  // Allow other modules to alter the activation status.
  drupal_alter('backstory_validate_display', $active);

  return $active;
}

/**
 * Returns an array of role IDs for roles that are exempt from Backstory.
 */
function backstory_exempt_roles() {
  // Get the array of roles from the module settings form.
  $exempt_roles = variable_get('backstory_exempt_roles', array());

  // Remove any role IDs that weren't selected.
  $exempt_roles = array_diff($exempt_roles, array(0));

  // Allow other modules to alter the exempt roles.
  drupal_alter('backstory_exempt_roles', $exempt_roles);

  return $exempt_roles;
}

/**
 * Returns the path matching mode for Backstory paths.
 */
function backstory_paths_mode() {
  return variable_get('backstory_paths_mode', 'disable');
}

/**
 * Returns a string with paths and path patterns separated by line breaks for
 * paths that are designated for Backstory inclusion or exemption.
 */
function backstory_paths() {
  // Get the paths string from the module settings form.
  $paths = variable_get('backstory_paths', 'admin*');

  // Allow other modules to alter the paths string.
  drupal_alter('backstory_paths', $paths);

  // Ensure all paths and patterns are lowercase.
  $paths = drupal_strtolower($paths);

  return $paths;
}

/**
 * Adds the appropriate Backstory JavaScript to the page.
 */
function backstory_add_js() {
  // Retrieve the JavaScript entered on the settings form.
  $js = backstory_js();

  if (!empty($js)) {
    // Parse it to extract the site's pid and the remote JS path.
    list($pid, $remote_js) = backstory_parse_js($js);

    // Add the Backstory JavaScript if the site has a valid pid and remote JS path.
    if (!empty($pid) && !empty($remote_js)) {
      drupal_add_js("var pid = '" . $pid . "';", array('type' => 'inline', 'scope' => 'footer', 'weight' => 10));
      drupal_add_js($remote_js, array('type' => 'external', 'scope' => 'footer', 'weight' => 11));

      // Allow other modules to add additional JavaScript when the Backstory code is
      // added to a page.
      module_invoke_all('backstory_add_js');
    }
  }
}

/**
 * Returns the Backstory JavaScript from the settings form.
 */
function backstory_js() {
  return variable_get('backstory_js', '');
}

/**
 * Parses a Backstory JavaScript string.
 *
 * @return
 *   An array whose first element is the site's Backstory pid and whose second
 *   element is the remote JavaScript file to include.
 */
function backstory_parse_js($js) {
  $pid = '';
  $remote_js = '';

  // Split the string on the closing script tag.
  $parts = explode('</script>', $js);

  // Pull the pid from the first part.
  if (!empty($parts[0])) {
    $string = trim($parts[0]);
    $position = strpos($string, "var pid = '");

    if ($position !== FALSE) {
      $pid = substr($string, $position + 11, strlen($string) - $position - 13);

      // Invalidate non-numeric pids.
      if (!is_numeric($pid)) {
        $pid = '';
      }
    }
  }

  // Pull the remote JavaScript path from the second part.
  if (!empty($parts[1])) {
    $string = trim($parts[1]);
    $position = strpos($string, 'src="');

    if ($position !== FALSE) {
      $remote_js = substr($string, $position + 5, strlen($string) - $position - 7);

      // Invalidate non-URL strings.
      if (!valid_url($remote_js)) {
        $remote_js = '';
      }
    }
  }

  return array($pid, $remote_js);
}
