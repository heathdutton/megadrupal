<?php

define('COMMERCE_RBKMONEY_IP_LIST', serialize(array('89.111.188.128', '195.122.9.148')));

/**
 * Implements hook_permission().
 */
function commerce_rbkmoney_permission() {
  return array(
    'administer commerce_rbkmoney' => array(
      'title' => t('Administer Commerce RBK Money'),
      'description' => t('Access the Commerce RBK Money settings page'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_rbkmoney_menu() {

  $items['admin/commerce/config/rbkmoney'] = array(
    'title' => 'RBK Money configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_rbkmoney_config'),
    'access arguments' => array('administer commerce_rbkmoney'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['commerce/rbkmoney/response'] = array(
    'page callback' => 'commerce_rbkmoney_response',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_rbkmoney_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_rbkmoney'] = array(
    'title' => t('RBK Money'),
    'description' => t('Payment via RBK Money payment system'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method settings form.
 */
function commerce_rbkmoney_config() {
  $form['responseURL'] = array(
    '#markup' => t('Payment notification callback URL: %url', array('%url' => $GLOBALS['base_url'] . '/commerce/rbkmoney/response')),
    '#suffix' => '<div class="description">' . t('For insertion into "Payment notification URL" field on !site settings page', array('!site' => l('RBK Money', 'http://rbkmoney.com', array('attributes' => array('target' => '_blank'))))) . '</div>',
  );
  $form['commerce_rbkmoney_eshopId'] = array(
    '#type' => 'textfield',
    '#title' => t('Eshop ID'),
    '#default_value' => variable_get('commerce_rbkmoney_eshopId', ''),
    '#description' => t("Merchand ID of your site"),
    '#required' => TRUE,
  );
  $form['commerce_rbkmoney_secretKey'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret key'),
    '#default_value' => variable_get('commerce_rbkmoney_secretKey', ''),
    '#description' => t('Secret key, entered on !site settings page', array('!site' => l('RBK Money', 'http://rbkmoney.com', array('attributes' => array('target' => '_blank'))))),
    '#required' => TRUE,
  );
  $form['commerce_rbkmoney_recipientCurrency'] = array(
    '#type' => 'select',
    '#title' => t('Payments currency'),
    '#options' => array('RUR' => 'RUR', 'USD' => 'USD', 'EUR' => 'EUR', 'GBP' => 'GBP', 'UAH' => 'UAH'),
    '#default_value' => variable_get('commerce_rbkmoney_recipientCurrency', 'RUR'),
    '#description' => t("Please, select available payments currency"),
    '#required' => TRUE,
  );
  $form['commerce_rbkmoney_preference'] = array(
    '#type' => 'textfield',
    '#title' => t('Preference'),
    '#default_value' => variable_get('commerce_rbkmoney_preference', ''),
    '#description' => t("Default payment method. Allow to skip payment method selection page"),
  );
  $form['commerce_rbkmoney_ip'] = array(
    '#type' => 'radios',
    '#title' => t('Process notifications only from RBK Money allowed IP addresses'),
    '#options' => array(1 => t('Yes'), 0 => t('No')),
    '#default_value' => variable_get('commerce_rbkmoney_ip', 0),
    '#description' => t('Allowed IP addresses: ') . implode(', ', unserialize(COMMERCE_RBKMONEY_IP_LIST)),
  );
  $form['commerce_rbkmoney_log'] = array(
    '#type' => 'radios',
    '#title' => t("Store RBK Money's responses in <a href='!dblog'>system log</a>", array('!dblog' => 'admin/reports/dblog')),
    '#options' => array(1 => t('Yes'), 0 => t('No')),
    '#default_value' => variable_get('commerce_rbkmoney_log', 1),
  );

  return system_settings_form($form);
}

/**
 * Payment method callback: submit form.
 */
function commerce_rbkmoney_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();
  $text = theme('image', array('path' => drupal_get_path('module', 'commerce_rbkmoney') . '/images/rbkmoney.png', 'alt' => t('RBK Money'), 'title' => t('RBK Money'), 'attributes' => array('class' => 'rbkmoney-logo')));
  $text .= '<div class="rbkmoney">' . t('Pay with credit card') . '</div>';
  $form['info'] = array('#markup' => $text);

  return $form;
}

/*
 * Payment method callback
 */
function commerce_rbkmoney_redirect_form($form, &$form_state, $order, $payment_method) {
  $form = array();
  $form['eshopId'] = array(
    '#type' => 'hidden',
    '#value' => variable_get('commerce_rbkmoney_eshopId', ''),
  );
  $form['orderId'] = array(
    '#type' => 'hidden',
    '#value' => $order->order_id,
  );
  $desc = t('Order number @num', array('@num' => $order->order_id));
  $form['serviceName'] = array(
    '#type' => 'hidden',
    '#value' => $desc,
  );
  $amount = commerce_currency_amount_to_decimal($order->commerce_order_total[LANGUAGE_NONE][0]['amount'], commerce_default_currency());
  $form['recipientAmount'] = array(
    '#type' => 'hidden',
    '#value' => $amount,
  );
  $form['recipientCurrency'] = array(
    '#type' => 'hidden',
    '#value' => variable_get('commerce_rbkmoney_recipientCurrency', 'RUR'),
  );
  $form['successUrl'] = array(
    '#type' => 'hidden',
    '#value' => url($GLOBALS['base_url'] . '/checkout/' . $order->order_id . '/complete'),
  );
  $form['failUrl'] = array(
    '#type' => 'hidden',
    '#value' => url($GLOBALS['base_url'] . '/checkout/' . $order->order_id . '/payment'),
  );
  $form['user_email'] = array(
    '#type' => 'hidden',
    '#value' => $order->mail,
  );

  if (variable_get('commerce_rbkmoney_preference', '')) {
    $form['preference'] = array(
      '#type' => 'hidden',
      '#value' => variable_get('commerce_rbkmoney_preference', ''),
    );
  }

  // Calculate form hash
  $hash_data = array(
    variable_get('commerce_rbkmoney_eshopId', ''),
    $amount,
    variable_get('commerce_rbkmoney_recipientCurrency', 'RUR'),
    $order->mail,
    $desc,
    $order->order_id,
    $userFields = '',
    variable_get('commerce_rbkmoney_secretKey', '')
  );
  $hash_string = implode('::', $hash_data);

  $form['hash'] = array(
    '#type' => 'hidden',
    '#value' => md5($hash_string),
  );

  $form['#action'] = 'https://rbkmoney.ru/acceptpurchase.aspx';

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Place your order'),
  );

  return $form;
}

/**
 * Callback for RBK Money system response.
 */
function commerce_rbkmoney_response() {
  /* Check for allowed IP */
  if (variable_get('commerce_rbkmoney_ip', 0) == 1) {
    $allowed_ip = unserialize(COMMERCE_RBKMONEY_IP_LIST);
    if (!in_array($_SERVER['REMOTE_ADDR'], $allowed_ip)) {
      watchdog("commerce_rbkmoney", t("Possible fraud. Request from disallowed IP address: %ip"), array('%ip' => ip_address()), WATCHDOG_WARNING);
      exit();
    }
  }

  if ($_POST) {
    foreach ($_POST as $k => $v) {
      $response[$k] = $v;
    }

    // store data to log
    if (variable_get('commerce_rbkmoney_log', 1) == 1) {
      $status = ($response['paymentStatus'] == 5) ? 'success' : 'processing';
      $log = var_export($response, TRUE);
      watchdog('commerce_rbkmoney', "Payment status: {$status} <pre>%log</pre>", array('%log' => $log));
    }

    if (!empty($response['hash'])) {
      $order = commerce_order_load($response['orderId']);

      $hash_data = array(
        variable_get('commerce_rbkmoney_eshopId', ''),
        $response['orderId'],
        $response['serviceName'],
        $response['eshopAccount'],
        $response['recipientAmount'],
        variable_get('commerce_rbkmoney_recipientCurrency', 'RUR'),
        $response['paymentStatus'],
        $response['userName'],
        $response['userEmail'],
        $response['paymentData'],
        variable_get('commerce_rbkmoney_secretKey', ''),
      );
      $hash_string = implode('::', $hash_data);
      $crc = md5($hash_string);

      if ($response['hash'] == $crc) {
        commerce_rbkmoney_transaction($order, $response['paymentStatus']);
      } elseif ($response['hash'] !== $crc) {
        $watchdog = t("Checksum fail: calculated hash: '@crc'; notification hash: '@hash'");
        watchdog('commerce_rbkmoney', $watchdog, array('@crc' => $crc, '@hash' => $response['hash']), WATCHDOG_ERROR);
      }
    }
  }
}

/*
 * Make a transaction
 */
function commerce_rbkmoney_transaction($order, $paymentStatus) {

  switch ($paymentStatus) {
    case 3 :
      commerce_checkout_complete($order); // Finish checkout process after user requested a payment
      $order_status = 'processing';
      $transaction_status = COMMERCE_PAYMENT_STATUS_PENDING;
      $message = t('Response from RBK Money: processing');
      break;
    case 5 :
      $order_status = 'completed';
      $transaction_status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $message = t('Response from RBK Money: successful');
      break;
  }

  commerce_order_status_update($order, $order_status);

  $transaction = commerce_payment_transaction_new('commerce_rbkmoney', $order->order_id);
  $transaction->instance_id = $order->data['payment_method'];
//  $transaction->amount = commerce_currency_amount_to_decimal($order->commerce_order_total[LANGUAGE_NONE][0]['amount'], commerce_default_currency());
  $transaction->amount = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
  $transaction->currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
  $transaction->status = $transaction_status;
  $transaction->message = $message;

  commerce_payment_transaction_save($transaction);
}