<?php

// Remove box from showing up on all administrative pages, see http://drupal.org/node/34970.
define('KISSINSIGHTS_PAGES', "admin\nadmin/*\nbatch\nnode/add*\nnode/*/*\nuser/*/*");

/**
 * Implements hook_requirements().
 */
function kissinsights_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if ($phase === 'runtime') {
    if (variable_get('kissinsights_script_identifier', 0) == FALSE || variable_get('kissinsights_user', 0) == FALSE) {
      $requirements['kissinsights_settings'] = array(
        'title' => $t('KISSinsights settings'),
        'value' => $t('No KISSinsights settings have been added.'),
        'description' => $t('You have to enter proper settings at <a href="@url">KISSinsights Settings</a>.', array('@url' => url('admin/config/kissinsights/settings'))),
        'severity' => REQUIREMENT_ERROR,
      );
    }
    if (variable_get('kissinsights_enabled', 0) == FALSE) {
      $requirements['kissinsights_enabled'] = array(
        'title' => $t('KISSinsights status'),
        'value' => $t('Not enabled'),
        'severity' => REQUIREMENT_WARNING,
      );
    }
  }
  return $requirements;
}

/**
 * Implements hook_permission().
 */
function kissinsights_permission() {
  return array(
    'administer kissinsights' => array(
      'title' => t('Administer KISSinsights'),
    ),
    'enable kissinsights' => array(
      'title' => t('Enable / Disable the box'),
    )
  );
}

/**
 * Implements hook_menu().
 */
function kissinsights_menu() {
  $items = array();

  $items['admin/config/kissinsights'] = array(
    'title' => 'KISSinsights',
    'description' => 'Configure KISSinsights box',
    'position' => 'left',
    'weight' => 20,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),

  );

  $items['admin/config/kissinsights/settings'] = array(
    'title' => 'KISSinsights',
    'description' => 'Configure KISSinsights box',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kissinsights_admin_form'),
    'access callback' => 'user_access',
    'position' => 'left',
    'weight' => 20,

    'access arguments' => array('administer kissinsights'),
    'file' => 'kissinsights.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_page_alter().
 *
 * Insert javascript code in right before the </body> tag
 */
function kissinsights_page_alter(&$page) {
  global $user;

  // If we have disabled the box from admin settings, then dont show the box
  if (variable_get('kissinsights_enabled', 0) == FALSE || _kissinsights_visibility() == FALSE) {
    return FALSE;
  }

  $options  = array();
  $identify = FALSE;

  $script = '<script type="text/javascript">var _kiq = _kiq || [];</script>
    <script type="text/javascript" src="//s3.amazonaws.com/ki.js/' . variable_get('kissinsights_user', 0) . '/' . variable_get('kissinsights_script_identifier', 0) . '.js" async="true"></script>';

  if (variable_get('kissinsights_bottom', 0) == TRUE) {
    $params['options']['bottom'] = variable_get('kissinsights_bottom', 0);
  }

  if (variable_get('kissinsights_position', 0) == TRUE) {
    $params['options']['anchor'] = variable_get('kissinsights_position', 'right');
  }

  if (count($params['options']) == TRUE) {
    $options[] = "['options', " . json_encode($params['options']) . "]";
  }

  // If we having a valid user, then identify that in the survey.
  if ($user->uid) {
    $user_data = user_load($user->uid);
    $options[] = "['identify', '" . $user_data->mail . "']";
  }

  // If any options is set, then add these parameters.
  if (count($options) == TRUE) {
    $script .= "<script type=\"text/javascript\" charset=\"utf-8\"> _kiq.push(" . implode(',', $options) . "); </script>";
  }

  $page['page_bottom']['kissinsights'] = array(
    '#type' => 'markup',
    '#markup' => $script,
  );
}



/**
 * Based on visibility setting this function returns TRUE if KISSinsights
 * code should be added to the current page and otherwise FALSE.
 */
function _kissinsights_visibility() {
  static $page_match;

  // Cache visibility setting in hook_init for hook_footer.
  if (!isset($page_match)) {

    $visibility = variable_get('kissinsights_visibility', 0);
    $setting_pages = variable_get('kissinsights_pages', KISSINSIGHTS_PAGES);

    // Match path if necessary.
    if (!empty($setting_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = drupal_strtolower($setting_pages);
      if ($visibility < 2) {
        // Convert the Drupal path to lowercase
        $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
        // Compare the lowercase internal and lowercase path alias (if any).
        $page_match = drupal_match_path($path, $pages);
        if ($path != $_GET['q']) {
          $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
        }
        // When $visibility has a value of 0, the tracking code is displayed on
        // all pages except those listed in $pages. When set to 1, it
        // is displayed only on those pages listed in $pages.
        $page_match = !($visibility xor $page_match);
      }
      else {
        $page_match = drupal_eval($setting_pages);
      }
    }
    else {
      $page_match = TRUE;
    }

  }
  return $page_match;

}

