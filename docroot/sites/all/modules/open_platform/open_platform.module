<?php

/**
 * @file
 * Provides functionality to query and display content from The Guardian
 * newspaper via its Open Platform API.
 */

define('OPEN_PLATFORM_URL', 'http://content.guardianapis.com');
define('OPEN_PLATFORM_TEST_API_KEY', 'http://content.guardianapis.com/search?format=json&show-fields=body&api-key=');
define('OPEN_PLATFORM_SEARCH', 'http://content.guardianapis.com/search?');

/**
 * Implements hook_menu().
 */
function open_platform_menu() {
  $items = array();

  $items['admin/config/services/open-platform'] = array(
    'title' => 'Guardian Open Platform settings',
    'description' => 'Settings for the Open Platform module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_platform_settings_apikey_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer open platform'),
    'file' => 'forms/open_platform_admin_form.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/services/open-platform/api-key'] = array(
    'title' => 'API key settings',
    'description' => 'Before you get started you will need to add your API Key',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/services/open-platform/search-settings'] = array(
    'title' => 'Content search settings',
    'description' => 'Configure Guardian Open Platform content search settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_platform_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer open platform'),
    'file' => 'forms/open_platform_admin_form.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/structure/open-platform'] = array(
    'title' => 'Guardian Open Platform content',
    'description' => 'Preview and manage available content',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('open_platform_preview_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer open platform'),
    'file' => 'forms/open_platform_preview_form.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function open_platform_permission() {
  return array(
    'administer open platform' => array(
      'title' => t('Administer Open Platform'),
      'description' => t('Perform administration tasks for Open Platform'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function open_platform_block_info() {
  $cache_option = variable_get('open_platform_block_cache', '');

  if ($cache_option == 0) {
    $cache_settings = 'DRUPAL_NO_CACHE';
  }
  else {
    $cache_settings = 'DRUPAL_CACHE_GLOBAL';
  }

  $blocks['data'] = array(
    'info' => t('Open Platform News'),
    'cache' => $cache_settings,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function open_platform_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'data':

      $block['subject'] = '';
      $op_data = open_platform_get_data();
      $block['content'] = open_platform_format_data('block', $op_data);

      break;
  }

  return $block;
}

/**
 * Makes a webservice call to the Open Platform.
 * 
 * @param string $url
 *   The API URL.
 *  
 * @return string
 *   A string JSON format containing results of users query.
 */
function open_platform_get_content($url) {
  $content = drupal_http_request($url);
  $msg = t('Unable to connect to the Open Platform');
  
  if (isset($content->data)) {
    return $content->data;
  }
  else {
    watchdog('Open Platform', $msg);
  }
}

/**
 * Creates an array of user selected options.
 * 
 * 
 * @param string $section_param
 *   Section/catergory name to search in.
 * @param string $search_param
 *   Keyword search term.
 * @param array $fields_array
 *   Specific fields to return in search results.
 * @param array $advance_fields_array
 *   Advanced fields for users with an API key.
 * @param string $api_key
 *   The users API key.
 * 
 * @return array
 *   An array of user selected options.
 */
function open_platform_options($section_param, $search_param, $fields_array, $advance_fields_array, $api_key) {

  // Remove unwanted non-selected fields from array.
  foreach ($fields_array as $field_key => $field_item) {

    if ($field_item == '0') {

      unset($fields_array[$field_key]);
    }
  }

  if (!empty($advance_fields_array)) {
    // Remove unwanted non-selected fields from array.
    foreach ($advance_fields_array as $field_key => $field_item) {

      if ($field_item == '0') {

        unset($advance_fields_array[$field_key]);
      }
    }
  }
  $api_key = variable_get('open_platform_api_key');

  // Check if user has an api key.
  if (!empty($api_key)) {
    $merged_fields = array_merge($fields_array, $advance_fields_array);
  }
  else {
    $merged_fields = $fields_array;
  }

  // Create comma seprated values.
  $fields = implode(",", $merged_fields);

  if(empty($search_param)){$search_param = $section_param;}
  // An array of user selected options.
  $options = array(
    'section_param' => $section_param,
    'search_param' => $search_param,
    'fields' => $fields,
    'api_key' => $api_key,
  );

  return $options;
}

/**
 * Retruns an array of results from the Open platform based on user query.
 * 
 * @param array $options
 *   An array of user defined options.
 * 
 * @return array
 *   An array containing the response from an API call to the Open Platform.
 */
function open_platform_get_data() {
  $sections = variable_get('open_platform_sections');
  $search_term = variable_get('open_platform_search');
  $fields = variable_get('open_platform_fields');
  $fields['thumbnail'] = 'thumbnail';
  $fields['trailText'] = 'trailText';
  $advanced = variable_get('open_platform_advance_fields');
  $api_key = variable_get('open_platform_api_key');
  $user_options = open_platform_options($sections, $search_term, $fields, $advanced, $api_key);
  $url = open_platform_build_url($user_options, $api_key);
  $data = drupal_json_decode(open_platform_get_content($url));

  return $data;
}

/**
 * Builds URL used for Open Platform API.
 * 
 * @param array $user_options
 *   User selected search options.
 * @param string $api_key
 *   Users API key
 * @param string $api_key
 *   Allows the function to be used for unit test.
 * 
 * @return string
 *   URL used to query Open Platform API.
 *   
 */
function open_platform_build_url($user_options, $api_key = NULL, $test_key = NULL) {

  if ($test_key == NULL) {
    $api_key = $api_key;
  }
  else {
    $api_key = $test_key;
  }

  // Check if API key exist.
  if (!empty($api_key)) {
    $query_data = array(
      'q' => $user_options['search_param'],
      'api-key' => $api_key,
      'show-fields' => $user_options['fields'],
      'section' => $user_options['section_param'],
      'format' => 'json',
    );
    $url_query = http_build_query($query_data);
    $url = OPEN_PLATFORM_SEARCH . $url_query;
  }
  else {
    $query_data = array(
      'q' => $user_options['search_param'],
      'show-fields' => $user_options['fields'],
      'section' => $user_options['section_param'],
      'format' => 'json',
    );

    $url_query = http_build_query($query_data);
    $url = OPEN_PLATFORM_SEARCH . $url_query;
  }

  return $url;
}

/**
 * Returns formatted array used to display content obtained from API call.
 * 
 * Depending on the mode parameter it will return themeable output for the block
 * template or an array that can be used to display the data returned. The
 * former is typically used to create the table on the page
 * "Guardian Open Platform content".
 * 
 * @param string $mode
 *   The type of content you want the data formatted for. Can either be
 *   "Preview" or "Block".
 * @param array $data
 *   An array containing the response from an API call to the Open Platform.
 *
 * @return array
 *   Formatted content array.
 */
function open_platform_format_data($mode, $data) {
  // Stop notices and warnings from appearing when user does not have api key.
  $template_vars = array();

  $data_array = $data['response']['results'];
  $x = 0;
  if(!empty($data_array)){
  foreach ($data_array as $key => $value) {
    // Remove any XSS issues from data.
    array_walk_recursive($data_array[$key], 'open_platform_filter_xss_array');

    // Stops unwanted error messages.
    if (isset($data_array[$key]['fields'])) {
      array_walk_recursive($data_array[$key]['fields'], 'open_platform_filter_xss_array');
    }

    // Create links.
    $links[] = isset($data_array[$key]['webTitle']) ? l($data_array[$key]['webTitle'], $data_array[$key]['webUrl']) : '';

    // Thumbnails show on previews but are optional on blocks depending
    // on users options.
    if ($mode == 'preview') {
      $thumbnail[] = isset($data_array[$key]['fields']['thumbnail']) ? $data_array[$key]['fields']['thumbnail'] : NULL;
    }
    elseif ($mode == 'block') {
      $fields = variable_get('open_platform_fields');
      if ($fields['thumbnail'] == 0) {
        $thumbnail[] = isset($data_array[$key]['fields']['thumbnail']) ? $data_array[$key]['fields']['thumbnail'] : NULL;
      }
      else {
        $thumbnail[] = isset($data_array[$key]['fields']['thumbnail']) ? $data_array[$key]['fields']['thumbnail'] : NULL;
      }
    }

    $trail_text[] = isset($data_array[$key]['fields']['trailText']) ? $data_array[$key]['fields']['trailText'] : NULL;
    $title[] = isset($data_array[$key]['webTitle']) ? $data_array[$key]['webTitle'] : NULL;
    if ($mode == 'preview') {
      $wordcount[] = isset($data_array[$key]['fields']['wordcount']) ? $data_array[$key]['fields']['wordcount'] : NULL;
      $body[] = isset($data_array[$key]['fields']['body']) ? $data_array[$key]['fields']['body'] : NULL;
    }
    else {
      $wordcount[] = NULL;
      $body[] = NULL;
    }
    $x++;
    if ($mode == 'block' && $x >= 3) {
      break;
    }
  }

  $path = drupal_get_path('module', 'open_platform');
  $img_path = '/' . $path . '/img/poweredbyguardianBLACK.png';
  $img_variables = array(
    'path' => $img_path,
    'alt' => 'Guardian logo',
    'attributes' => NULL,
  );
  $image = theme('image', $img_variables);
  $logo_img = l($image, 'http://www.guardian.co.uk', array(
    'attributes' => array(
      'class' => 'anchor-class', 'target' => '_blank'),
    'html' => TRUE));

  $template_vars = array(
    'links' => $links,
    'thumbnail' => $thumbnail,
    'trail_text' => $trail_text,
    'headline' => $title,
    'wordcount' => $wordcount,
    'body' => $body,
    'content_array' => $data_array,
    'logo' => $logo_img,
  );
  }else{
    $template_vars['no_results'] = FALSE;
    drupal_set_message(t('No results returned on your search query'), 'warning');
  }
  
  if ($mode == 'preview') {
    return $template_vars;
  }
  elseif ($mode == 'block') {

    return theme('open_platform_block', $template_vars);
  }
}

/**
 * Returns data from an API endpoint.
 * 
 * 
 * @param string $endpoint
 *   The end point to query.
 * @param string $id
 *   ID value for item.
 * 
 * @return array
 *   Contains response for API call.
 */
function open_platform_get_end_points($endpoint, $id = NULL) {

  $api_key = variable_get('open_platform_api_key', '');
  switch ($endpoint) {
    case 'sections':
      $data = drupal_json_decode(open_platform_get_content(
              "http://content.guardianapis.com/sections?api-key=$api_key"
          )
      );

      $data_array = $data['response']['results'];
      if (is_array($data_array)) {
        foreach ($data_array as $key => $value) {
          $endpoint_values[$data_array[$key]['id']] = $data_array[$key]['webTitle'];
        }
      }
      else {
        drupal_set_message(t('Unable to contact the Open Platform, your API key may not be valid'), 'warning', FALSE);
        $endpoint_values = FALSE;
      }

      break;

    case 'item':
      $api_key = variable_get('open_platform_api_key');
      $data = drupal_json_decode(open_platform_get_content(
              "http://content.guardianapis.com/$id?format=json&api-key=$api_key&show-fields=body,wordcount"
          )
      );

      if (isset($data)) {
        $endpoint_values = $data;
      }
      else {
        $endpoint_values = FALSE;
      }

      break;

    default:
      break;

  }
  if (is_array($endpoint_values)) {
    array_walk_recursive($endpoint_values, 'open_platform_filter_xss_array');
  }
  return $endpoint_values;
}

/**
 * Implements hook_theme().
 */
function open_platform_theme() {
  return array(
    'open_platform_block' => array(
      'variables' => array(
        'template_vars' => NULL,
      ),
      'template' => 'templates/open_platform_block',
    ),
  );
}

/**
 * Creates a node of type open_platform_articles.
 * 
 * @param string $logo
 *   Powered by Guardian logo required by terms and conditions.
 * @param string $headline
 *   News article headline used for node title.
 * @param string $body
 *   Content to put in body field of node.
 * @param int $word_count
 *   Number of words in body field.
 * @param string $content_id
 *   Unique Open Platform ID.
 * @param string $url
 *   Web URL for original content.
 */
function open_platform_create_node($logo, $headline = NULL, $body = NULL, $word_count = NULL, $content_id = NULL, $url = NULL) {
  global $user;

  $orignal_link = l(t('Original article'), $url);
  $body_content = $body . '<br />' . $orignal_link . '<br />' . $logo;
  $node = new stdClass();
  $node->language = LANGUAGE_NONE;
  $node->type = 'open_platform_articles';
  $node->uid = $user->uid;
  $node->title = $headline;
  $node->field_open_platform_word_count[$node->language][0]['value'] = $word_count;
  $node->field_open_platform_id[$node->language][0]['value'] = $content_id;
  $node->body[$node->language] = array(0 => array('value' => $body_content, 'format' => 'full_html'));
  $node->body[$node->language][0]['summary'] = text_summary($body);

  node_object_prepare($node);

  node_save($node);
}

/**
 * Implements open_platform_element_info_alter().
 *
 * Sets the text format processor to a custom callback function.
 */
function open_platform_element_info_alter(&$type) {
  if (isset($type['text_format']['#process'])) {
    foreach ($type['text_format']['#process'] as &$callback) {
      if ($callback === 'filter_process_format') {
        $callback = 'open_platform_filter_process_format';
      }
    }
  }
}

/**
 * Callback for open_platform_element_info_alter().
 *
 * Sets the input format for Open Platform content type to full HTML.
 */
function open_platform_filter_process_format($element) {
  $element = filter_process_format($element);
  // Change the default text format of the 'body' field to 'Full HTML'.
  if ($element['#bundle'] == 'open_platform_articles' && $element['#field_name'] == 'body') {
    $element['format']['format']['#default_value'] = 'full_html';
  }
  return $element;
}

/**
 * Get all the nodes belonging to open_platform_articles content type.
 * 
 * @return array
 *   An array of node IDs.
 */
function open_platform_content() {

  // Get node ids for op ct.
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'open_platform_articles');

  $result = $query->execute();
  $node_nids = array_keys($result['node']);

  return $node_nids;
}

/**
 * Updates existing nodes with content obtained from the Open Platform.
 *    
 * @param string $nid
 *   Node ID of node that will be updated.
 */
function open_platform_update_node($nid) {
  $node = node_load($nid);
  $node->language = LANGUAGE_NONE;

  // Get Content ID.
  $content_id = $node->field_open_platform_id[LANGUAGE_NONE][0]['safe_value'];

  // Current values.
  $current_body = $node->body[$node->language][0]['value'];
  $current_title = $node->title;
  $current_word_count = $node->field_open_platform_word_count[$node->language][0]['value'];

  // Get updates of content already published.
  $new_data = open_platform_get_end_points('item', $content_id);
  $body_content = $new_data['response']['content']['fields']['body'];
  $title = $new_data['response']['content']['webTitle'];
  $word_count = $new_data['response']['content']['fields']['wordcount'];

  // Update content if any fields are diffferent.
  if ($current_body != $body_content || $current_title != $title || $current_word_count != $word_count) {
    $node->title = isset($title) ? $title : NULL;
    $node->body[$node->language] = isset($body_content) ? array(0 => array('value' => $body_content, 'format' => 'full_html')) : NULL;
    $node->field_open_platform_word_count[$node->language][0]['value'] = isset($word_count) ? $word_count : NULL;
    node_save($node);
  }
}

/**
 * Checks the last time the cron job was run and returns the time difference.
 * 
 * @param string $todays_date_time
 *   Todays date in IS08601 format.
 * 
 * @param string $last_cron_date_time
 *   The last date cron run for this module in IS08601 format.
 * 
 * @return string
 *   The time difference betwen the current time and when the last cron 
 *   job was run.
 */
function open_platform_check_last_cron_time($todays_date_time, $last_cron_date_time) {
  $today = new DateTime($todays_date_time);
  $last_cron = new DateTime($last_cron_date_time);

  // Calculate the differnce between the two times.
  $diff = $last_cron->diff($today);
  $hours = $diff->h;
  $time_difference = $hours + ($diff->d * 24);

  return $time_difference;

}

/**
 * Implements hook_cron_queue_info().
 */
function open_platform_cron_queue_info() {
  $queues['open_platform_update_content'] = array(
    'worker callback' => 'open_platform_update_node',
    'time' => 60,
  );

  return $queues;
}

/**
 * Implements hook_cron().
 * 
 * This is addded to comply with the terms and conditions for usage of the Open
 * Platform API (5. Lifecycle of OP Content) please visit link
 * below for more info.
 * http://www.theguardian.com/open-platform/terms-and-conditions
 */
function open_platform_cron() {
  $todays_date_time = date('c');
  $last_cron_date_time = variable_get('open_platform_last_cron_date_time', $todays_date_time);
  $time_difference = open_platform_check_last_cron_time($todays_date_time, $last_cron_date_time);

  // Only run cron every 5 hours. Useful for sites that run cron frequently
  // makes sure that there are not to many calls the open platform and reduces
  // the amount of items that are queued. Also helps reduce the load this
  // module has on a sites cron run.
  if ($time_difference > 5) {
    $queue = DrupalQueue::get('open_platform_update_content');

    $content_to_update = open_platform_content();

    foreach ($content_to_update as $item) {
      $queue->createItem($item);
    }
    variable_set('open_platform_last_cron_date_time', $todays_date_time);
  }
}

/**
 * Check if the user selected a field from the list of available fields.
 * 
 * @param string $field_name
 *   Name of field to check against.
 * @param array $fields
 *   An array of user selected fields.
 * 
 * @return bool
 *   Returns true if the field was selected by the user.
 */
function open_platform_user_selected_fields($field_name, $fields) {

  foreach ($fields as $name => $value) {
    // Make sure we are testing the right field.
    if ($name == $field_name) {
      // Check if field was selected by user.
      if ($name == $value) {
        return TRUE;
      }
    }
  }
}

/**
 * Checks to determine the status of content obtained from Open Platform.
 * 
 * @param int $publish_check
 *   Value to determine if content already exist.
 * @see open_platform_check_published_content()
 * 
 * @param string $body
 *   Body of content obtained from open_platform.
 *
 * @return string
 *   The status value shown in the preview form.
 */
function open_platform_check_status_of_content($publish_check, $body) {
  if ($publish_check == 1) {
    $status = "Already published";
  }
  elseif ($body == "<!-- Redistribution rights for this field are unavailable -->") {
    $status = "Not available for redistribution";
  }
  else {
    $status = "Available for publication";
  }

  return $status;
}

/**
 * Checks if content obtained for the Open Platform already exist as a node.
 * 
 *
 * @param string $content_id
 *   The unqiue ID supplied by the Open Platform.
 *
 * @return bool
 *   Returns TRUE if content already exist.
 */
function open_platform_check_published_node($content_id) {

  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'open_platform_articles')
      ->fieldCondition('field_open_platform_id', 'value', $content_id, '=');

  $result = $query->execute();

  if (empty($result)) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Used by array_walk_recursive to apply filter_xss to Open Platform data.
 * 
 * @param string $item
 *   Array item.
 * @param string $index
 *   Array index.
 *
 * @return string
 *   Returns safe value.
 */
function open_platform_filter_xss_array($item, $index = NULL) {
  $safe_value = filter_xss($item);

  return $safe_value;
}
