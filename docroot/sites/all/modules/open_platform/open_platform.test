<?php
/**
 * @file
 * Test for the Open Platform Module.
 */

/**
 * Provides automated test for the Open Platform module.
 */
class OpenPlatformTestCase extends DrupalUnitTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    // Note: getInfo() strings should not be translated.
    return array(
      'name' => 'Guardian Open Platform Test',
      'description' => 'Test Guardian Open Platform module',
      'group' => 'Guardian Open Platform',
    );
  }

  /**
   * Test for correct array structure of formatted data.
   */
  public function testFormatData() {
    $data = $this->openPlatformGetDummyData();
    $result = open_platform_format_data('preview', $data);
    $expected_data = $this->openPlatformFormattedData();
    $this->assertIdentical(array_keys($result), array_keys($expected_data), 'Test for correct array structure needed for OP preview page');
  }

  /**
   * Test for correct array structure of user chosen options.
   */
  public function testOptions() {
    $adv_fields = array();
    $fields_array = array();
    $result = open_platform_options('', '', $adv_fields, $fields_array, '');
    $expected_data = $this->openPlatformOptionsData();
    $this->assertIdentical(array_keys($result), array_keys($expected_data), 'Test to make sure user selected options are correctly structured as other functions depend on correct format');
  }

  /**
   * Test for correct array structure of user chosen fields.
   */
  public function testFields() {
    $data = $this->openPlatformFieldsData();

    $result = open_platform_user_selected_fields('headline', $data);
    $this->assertTrue($result, "Test that users selected fields can be detected");
  }

  /**
   * Test content status functionality.
   */
  public function testStatusMessages() {
    $dummy_body_text_1 = '<!-- Redistribution rights for this field are unavailable -->';
    $dummy_body_text_2 = 'content content';

    $result_1 = open_platform_check_status_of_content(1, $dummy_body_text_2);
    $result_2 = open_platform_check_status_of_content(0, $dummy_body_text_1);
    $result_3 = open_platform_check_status_of_content(0, $dummy_body_text_2);

    $this->assertIdentical($result_1, 'Already published', 'Test node publication status');
    $this->assertIdentical($result_2, 'Not available for redistribution', 'Test redistribution status');
    $this->assertIdentical($result_3, 'Available for publication', 'Test publication status');
  }

  /**
   * Test for correct API URLs.
   */
  public function testURL() {
    $user_options = $this->openPlatformOptionsData();
    $api_key = NULL;
    $test_key = 'hfje93iejnd';
    
    $url = open_platform_build_url($user_options, $api_key, $test_key);
    $expected_url = "http://content.guardianapis.com/search?q=&api-key=$test_key&show-fields=&section=&format=json";
    $this->assertIdentical($expected_url, $url, 'Test that correct url is built');
    $this->assertIdentical(OPEN_PLATFORM_URL, 'http://content.guardianapis.com', 'Test for correct API url');
    $this->assertIdentical(OPEN_PLATFORM_TEST_API_KEY, 'http://content.guardianapis.com/search?format=json&show-fields=body&api-key=', 'Test for correct API url for checking user API key');
    $this->assertIdentical(OPEN_PLATFORM_SEARCH, 'http://content.guardianapis.com/search?', 'Test for correct API url for search queries');
  
    
  }
  /**
   * Test that the correct time difference is returned.
   */
  public function testLastCronTime() {
    $todays_date = '2013-10-10T12:30:00';
    $last_cron_time = '2013-10-11T12:30:00';
    $difference = open_platform_check_last_cron_time($todays_date, $last_cron_time);

    $this->assertEqual('24', $difference, 'Check that the correct time difference is returned');
  }

  /**
   * Mocks the response returned from the Open platform API for Unit testing.
   * 
   * @return array
   *   Response data for testing.
   * 
   * @see testFormatData()
   */
  public function openPlatformGetDummyData() {
    return array(
      'response' => array(
        'status' => '[data]',
        'userTier' => '[data]',
        'total' => '[data]',
        'startIndex' => '[data]',
        'pageSize' => '[data]',
        'currentPage' => '[data]',
        'pages' => '[data]',
        'orderBy' => '[data]',
        'results' => array(
          0 => array(
            'id' => '[data]',
            'sectionId' => '[data]',
            'sectionName' => '[data]',
            'webPublicationDate' => '[data]',
            'webTitle' => '[data]',
            'webUrl' => '[data]',
            'apiUrl' => '[data]',
            'fields' => array(
              'trailText' => '[data]',
              'headline' => '[data]',
              'body' => '[data]',
              'thumbnail' => '[data]',
              'wordcount' => '[data]',
            ),
          ),
        ),
      ),
    );
  }

  /**
   * Mocks the expected response of open_platform_format_data for unit testing.
   * 
   * @return array
   *   Response data for testing.
   *
   * @see open_platform_format_data()
   */
  public function openPlatformFormattedData() {

    return array(
      'links' => array(0 => '<a href="/%5Bdata%5D">[data]</a>'),
      'thumbnail' => array(0 => '[data]'),
      'trail_text' => array(0 => '[data]'),
      'headline' => array(0 => '[data]'),
      'wordcount' => array(0 => '[data]'),
      'body' => array(0 => '[data]'),
      'content_array' => array(
        0 => array(
          'id' => '[data]',
          'sectionId' => '[data]',
          'sectionName' => '[data]',
          'webPublicationDate' => '[data]',
          'webTitle' => '[data]',
          'webUrl' => '[data]',
          'apiUrl' => '[data]',
          'fields' => array(
            'trailText' => '[data]',
            'headline' => '[data]',
            'body' => '[data]',
            'thumbnail' => '[data]',
            'wordcount' => '[data]',
          ),
        ),
      ),
      'logo' => '<a href="http://www.guardian.co.uk" class="anchor-class" target="_blank"><img src="/sites/all/modules/open_platform/img/poweredbyguardianBLACK.png" alt="Guardian logo" /></a>',
    );
  }

  /**
   * Mocks the expected results when creating an array of user selected options.
   * 
   * @return array
   *   Test data.
   * 
   * @see open_platform_options()
   */
  public function openPlatformOptionsData() {
    return array(
      'section_param' => '',
      'search_param' => '',
      'fields' => '',
      'api_key' => '',
    );
  }

  /**
   * Mocks the expected array when checking for users chosen fields.
   * 
   * @return array.
   *   Test data.
   *
   * @see open_platform_options()
   */
  public function openPlatformFieldsData() {
    return array(
      'trailText' => 'trailText',
      'headline' => 'headline',
      'lastModified' => 'thumbnail',
      'standfirst' => 'standfirst',
      'thumbnail' => 'thumbnail',
      'wordcount' => 'wordcount',
    );
  }

}
