<?php
/**
 * @file
 * Admin settings for The Open Platfrom module.
 */

/**
 * Implements hook_install(). 
 */
function open_platform_install() {
  $t = get_t();

  // Machine name.
  $name = 'open_platform_articles';

  // Defaults array.
  $node_defaults = array(
    'type' => $name,
    'name' => $t('Open Platform Articles'),
    'base' => 'node_content',
    'description' => 'Articles obtained from the Guardian news paper',
    'has_title' => 1,
    'locked' => 1,
    'custom' => 1,
    'locked' => 1,
  );

  $content_type = node_type_set_defaults($node_defaults);
  node_type_save($content_type);
  node_add_body_field($content_type);

  // Create all the fields we are adding to our content type.
  foreach (_open_platform_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  foreach (_open_platform_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $node_defaults['type'];
    field_create_instance($instance);
  }
}

/**
 * Returns a structured array defining the instances for this content type.
 *
 * @return array
 *   An associative array specifying the instances we wish to add to our new
 *   node type.
 */
function _open_platform_installed_instances() {
  return array(
    'field_open_platform_word_count' => array(
      'label' => 'Word Count',
      'widget' => array(
        'weight' => '2',
        'type' => 'text_textfield',
        'module' => 'text',
        'active' => 1,
        'settings' => array(
          'size' => '60',
        ),
      ),
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'text_default',
          'settings' => array(),
          'module' => 'text',
          'weight' => 2,
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'above',
          'settings' => array(),
          'weight' => 0,
        ),
      ),
      'required' => 0,
      'description' => '',
      'default_value' => NULL,
      'field_name' => 'field_open_platform_word_count',
      'entity_type' => 'node',
      'bundle' => 'open_platform_articles',
      'deleted' => '0',
    ),

    'field_open_platform_id' => array(
      'label' => 'Content ID',
      'widget' => array(
        'weight' => '2',
        'type' => 'text_textfield',
        'module' => 'text',
        'active' => 1,
        'settings' => array(
          'size' => '60',
        ),
      ),
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'display' => array(
        'default' => array(
          'label' => 'above',
          'type' => 'text_default',
          'settings' => array(),
          'module' => 'text',
          'weight' => 2,
        ),
        'teaser' => array(
          'type' => 'hidden',
          'label' => 'above',
          'settings' => array(),
          'weight' => 0,
        ),
      ),
      'required' => 0,
      'description' => '',
      'default_value' => NULL,
      'field_name' => 'field_open_platform_id',
      'entity_type' => 'node',
      'bundle' => 'open_platform_articles',
      'deleted' => '0',
    ),
  );
}

/**
 * Returns a structured array defining the fields created by this content type.
 *
 * @return array
 *   An associative array specifying the fields we wish to add to our
 *   new node type.
 */
function _open_platform_installed_fields() {
  return array(
    'field_open_platform_word_count' => array(
      'translatable' => '0',
      'entity_types' => array(),
      'settings' => array(
        'max_length' => '255',
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
        'module' => 'field_sql_storage',
        'active' => '1',
        'details' => array(
          'sql' => array(
            'FIELD_LOAD_CURRENT' => array(
              'field_data_field_open_platform_word_count' => array(
                'value' => 'field_open_platform_word_count_value',
                'format' => 'field_open_platform_word_count_format',
              ),
            ),
            'FIELD_LOAD_REVISION' => array(
              'field_revision_field_open_platform_word_count' => array(
                'value' => 'field_open_platform_word_count_value',
                'format' => 'field_open_platform_word_count_format',
              ),
            ),
          ),
        ),
      ),
      'foreign keys' => array(
        'format' => array(
          'table' => 'filter_format',
          'columns' => array(
            'format' => 'format',
          ),
        ),
      ),
      'indexes' => array(
        'format' => array(
          'format',
        ),
      ),
      'field_name' => 'field_open_platform_word_count',
      'type' => 'text',
      'module' => 'text',
      'active' => '1',
      'locked' => '0',
      'cardinality' => '1',
      'deleted' => '0',
      'columns' => array(
        'value' => array(
          'type' => 'varchar',
          'length' => '255',
          'not null' => FALSE,
        ),
        'format' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
      ),
      'bundles' => array(
        'node' => array(
          'open_platform_articles',
        ),
      ),
    ),

    'field_open_platform_id' => array(
      'translatable' => '0',
      'entity_types' => array(),
      'settings' => array(
        'max_length' => '255',
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
        'module' => 'field_sql_storage',
        'active' => '1',
        'details' => array(
          'sql' => array(
            'FIELD_LOAD_CURRENT' => array(
              'field_data_field_open_platform_id' => array(
                'value' => 'field_open_platform_id_value',
                'format' => 'field_open_platform_id_format',
              ),
            ),
            'FIELD_LOAD_REVISION' => array(
              'field_revision_field_open_platform_id' => array(
                'value' => 'field_open_platform_id_value',
                'format' => 'field_open_platform_id_format',
              ),
            ),
          ),
        ),
      ),
      'foreign keys' => array(
        'format' => array(
          'table' => 'filter_format',
          'columns' => array(
            'format' => 'format',
          ),
        ),
      ),
      'indexes' => array(
        'format' => array(
          'format',
        ),
      ),
      'field_name' => 'field_open_platform_id',
      'type' => 'text',
      'module' => 'text',
      'active' => '1',
      'locked' => '0',
      'cardinality' => '1',
      'deleted' => '0',
      'columns' => array(
        'value' => array(
          'type' => 'varchar',
          'length' => '255',
          'not null' => FALSE,
        ),
        'format' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
      ),
      'bundles' => array(
        'node' => array(
          'open_platform_articles',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_requirements().
 * 
 * Checks that the user has an API key.
 */
function open_platform_requirements($phase) {
  $t = get_t();

  $requirements = array();

  $requirements['api_key_check'] = array(
    'title' => $t('Open Platform API key check'),
  );

  $api_key = variable_get('open_platform_api_key');
  $url = 'http://content.guardianapis.com/search?format=json&show-fields=body&api-key=' . $api_key;

  if ($phase == 'runtime') {
    $data = drupal_json_decode(open_platform_get_content($url));
    if (empty($api_key)) {

      $requirements['api_key_check']['severity'] = REQUIREMENT_WARNING;
      $requirements['api_key_check']['value'] = $t('You have not provided an API key,
      You can obtain an API key here ')
          . l($t('http://guardian.mashery.com/'), 'http://guardian.mashery.com/');
    }
    elseif (isset($data['response']['message']) && $data['response']['message'] == 'Invalid Api Key') {

      $requirements['api_key_check']['severity'] = REQUIREMENT_ERROR;
      $requirements['api_key_check']['value'] = 'Your API key is not valid, You can obtain an API key here '
          . l($t('http://guardian.mashery.com/'), 'http://guardian.mashery.com/');
    }
    else {
      $requirements['api_key_check']['severity'] = REQUIREMENT_OK;
      $requirements['api_key_check']['value'] = $t('You have supplied an API key');
    }
  }
  return $requirements;
}

/**
 * Implements hook_uninstall().
 */
function open_platform_uninstall() {

  // Delete all created nodes.
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'open_platform_articles');

  $result = $query->execute();
  $node_nids = array_keys($result['node']);

  node_delete_multiple($node_nids);

  // Machine name.
  $name = 'open_platform_articles';

  // Find all fields and delete them.
  foreach (array_keys(_open_platform_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Find all fields and delete instance.
  $instances = field_info_instances('node', $name);
  foreach ($instances as $instance) {
    field_delete_instance($instance);
  }

  node_type_delete('open_platform_articles');

  // Purge all field information.
  field_purge_batch(1000);

  // Remove variables.
  variable_del('open_platform_sections');
  variable_del('open_platform_search');
  variable_del('open_platform_fields');
  variable_del('open_platform_advance_fields');
  variable_del('open_platform_api_key');
  variable_del('open_platform_block_cache');
  variable_del('open_platform_last_cron_date_time');

}
