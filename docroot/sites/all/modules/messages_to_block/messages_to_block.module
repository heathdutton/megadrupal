<?php
/**
 * @file
 * Supress drupal_set_message()'s and save them to be displayed later.
 */

/**
 * Implements hook_menu().
 */
function messages_to_block_menu() {
  $items = array();
  $items['admin/config/user-interface/messages-to-block'] = array(
    'title' => 'Messages to Block settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('messages_to_block_admin'),
    'access arguments' => array('administer messages to block'),
  );
  $items['messages-to-block/%/%'] = array(
    'page callback' => 'messages_to_block_delete_response',
    'page arguments' => array(1, 2),
    'access arguments' => array('delete message to block messages'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function messages_to_block_permission() {
  return array(
    'administer messages to block' => array(
      'title' => t('Administer messages to Block settings'),
      'description' => t('Configure which message types can be sent to blocks.'),
    ),
    'delete message to block messages' => array(
      'title' => t('Delete own message-to-block messages'),
      'description' => t('Whether users can delete their own messages.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function messages_to_block_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'messages_to_block');
  return array(
    'messages_to_block_message' => array(
      'file' => 'messages_to_block.theme.inc',
      'variables' => array('mid' => NULL, 'message' => NULL, 'message_type' => NULL, 'time' => NULL),
      'path' => $path,
    ),
  );
}

/**
 * Admin form for a few settings.
 */
function messages_to_block_admin() {
  // Which messages to manage.
  $form['messages_to_block_ignore_rules'] = array(
    '#type' => 'fieldset',
    '#title' => t('Message managing rules'),
  );
  $form['messages_to_block_ignore_rules']['messages_to_block_admin'] = array(
    '#type' => 'checkboxes',
    '#title' => t("Do not manage User #1's messages?"),
    '#options' => array(TRUE => 'Yes'),
    '#default_value' => variable_get('messages_to_block_admin', array(TRUE)),
  );
  $role_values = array_values(user_roles());
  $form['messages_to_block_ignore_rules']['messages_to_block_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Do not manage messages for users with any of these roles:'),
    '#options' => array_combine($role_values, $role_values),
    '#default_value' => variable_get('messages_to_block_roles', array()),
  );
  $form['messages_to_block_ignore_rules']['messages_to_block_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Which message types should be managed?'),
    '#options' => array(
      'status' => 'Status',
      'warning' => 'Warning',
      'error' => 'Error',
    ),
    '#default_value' => variable_get('messages_to_block_types', array('status')),
  );
  // Output settings.
  $form['messages_to_block_output_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Message output settings'),
  );
  $form['messages_to_block_output_settings']['messages_to_block_amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of messages to show in block'),
    '#size' => 10,
    '#default_value' => variable_get('messages_to_block_amount', 5),
  );
  $form['messages_to_block_output_settings']['messages_to_block_theme'] = array(
    '#type' => 'select',
    '#title' => t('Theme output of messages'),
    '#options' => array(
      'table' => 'Table',
      'list' => 'List',
    ),
    '#default_value' => variable_get('messages_to_block_theme', 'table'),
  );
  $form['messages_to_block_output_settings']['messages_to_block_order'] = array(
    '#type' => 'select',
    '#title' => t('Order by oldest or newest messages?'),
    '#options' => array(
      'DESC' => 'Newest',
      'ASC' => 'Oldest',
    ),
    '#default_value' => variable_get('messages_to_block_order', 'DESC'),
  );

  return system_settings_form($form);
}

/**
 * Ajax or page rendering callback for message delete request.
 *
 * @param int $mid
 *   The message id to delete.
 * @param string $type
 *   Ajax mode?  (ajax/nojs).
 *
 * @return
 *   Ajax text replacement or page indicating if message was deleted.
 */
function messages_to_block_delete_response($mid, $type = 'ajax') {
  $output = t('There was a problem deleting this message.  Already deleted?');
  if (messages_to_block_delete_message($mid)) {
    $output = t('Message deleted.');
  }
  if ($type == 'ajax') {
    $commands = array();
    $commands[] = ajax_command_replace(".messages-to-block-delete.mid-{$mid}", $output);
    $page = array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
    ajax_deliver($page);
  }
  else {
    return $output;
  }
}

/**
 * Determine whether to supress and save the message or not.
 *
 * @return bool
 *   TRUE/FALSE to manage this message.
 */
function messages_to_block_is_managed() {
  global $user;
  // If we are ignoring user #1's.
  $block_admin = variable_get('messages_to_block_admin', array(TRUE));
  if ($block_admin[1] && $user->uid == 1) {
    return FALSE;
  }
  // Check for the roles to ignore.
  $ignored_roles = variable_get('messages_to_block_roles', array());
  if (!empty($ignored_roles)) {
    $role_check = array_intersect($ignored_roles, $user->roles);
    if (!empty($role_check)) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Implements hook_theme_registry_alter().
 */
function messages_to_block_theme_registry_alter(&$theme_registry) {
  $theme_registry['status_messages']['function'] = 'theme_messages_to_block_main';
}

/**
 * Theme override for theme_status_messages().
 */
function theme_messages_to_block_main($variables) {
  $output = '';
  if (!messages_to_block_is_managed()) {
    // Don't supress and save the messages that meet our exclude criteria.
    if (!empty($_SESSION['messages'])) {
      $output = theme_status_messages($variables);
      unset($_SESSION['messages']);
    }
    return $output;
  }
  // Could handle different types per user as a setting later.
  $types = variable_get('messages_to_block_types', array('status'));
  $messages = drupal_get_messages(NULL, FALSE);
  foreach ($messages as $type => $message_array) {
    if (in_array($type, $types, TRUE)) {
      foreach ($message_array as $message) {
        unset($_SESSION['messages'][$type]);
        messages_to_block_save_message($message, $type);
      }
    }
  }
  // Handle the rest with Drupal's default.
  if (!empty($_SESSION['messages'])) {
    $output = theme_status_messages($variables);
    unset($_SESSION['messages']);
  }
  return $output;
}

/**
 * Save the message to db.
 *
 * @param string $message
 *   The message to save.
 * @param string $message_type
 *   Message type: status, warning, error.
 * @param int $uid
 *   User uid the message was intended for.
 * @param int $time
 *   Timestamp when the message was created.
 */
function messages_to_block_save_message($message, $message_type, $uid = 0, $time = NULL) {
  if (!$uid) {
    global $user;
    $uid = $user->uid;
  }
  if (!isset($time)) {
    $time = time();
  }
  // Save that message!
  db_insert('messages_to_block')
    ->fields(array(
      'uid' => $uid,
      'message' => $message,
      'message_type' => $message_type,
      'time' => $time,
    ))
    ->execute();
}

/**
 * Deletes a saved message.
 *
 * @param int $mid
 *   The message id.
 */
function messages_to_block_delete_message($mid) {
  global $user;
  $deleted = db_delete('messages_to_block')
  ->condition('mid', $mid)
  ->condition('uid', $user->uid)
  ->execute();

  return $deleted;
}

/**
 * Fetch the saved messages for a user.
 *
 * @param int $uid
 *   The current user's uid.
 *
 * @return array
 *   Array of messages.
 */
function messages_to_block_get_user_messages($uid) {
  $amount = variable_get('messages_to_block_amount', 5);
  $order = variable_get('messages_to_block_order', 'DESC');
  $result = db_select('messages_to_block', 'm')
    ->fields('m')
    ->condition('uid', $uid, '=')
    ->orderBy('mid', $order)
    ->range(0, $amount)
    ->execute()
    ->fetchAll();

  return $result;
}

/**
 * Implements hook_block_info().
 */
function messages_to_block_block_info() {
  $blocks['messages_to_block'] = array(
    'info' => t('Messages to Block (module)'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function messages_to_block_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'messages_to_block':
      global $user;
      $content = '';
      $messages = messages_to_block_get_user_messages($user->uid);
      if (!empty($messages)) {
        drupal_add_library('system', 'drupal.ajax');
        $theme_style = variable_get('messages_to_block_theme', 'table');
        switch ($theme_style) {
          case 'table':
            $table_vars['header'] = array('Message', 'Type', 'Time', 'Delete');
            $table_vars['sticky'] = FALSE;
            $table_vars['empty'] = t('No messages');
            foreach ($messages as $message) {
              unset($message->uid);
              $message_vars = get_object_vars($message);
              $mid = array_shift($message_vars);
              $timestamp = array_pop($message_vars);
              $time = date('m/d/Y - H:i', $timestamp);
              $message_vars['time'] = $time;
              // Create an ajax delete link.
              $delete_link = l(t('Delete'), "messages-to-block/{$mid}/nojs", array(
                'attributes' => array('class' => array('use-ajax', 'messages-to-block-delete', "mid-{$mid}"))));
              $message_vars['mid'] = $delete_link;
              $table_vars['rows'][]['data'] = $message_vars;
            }
            $content = theme('table', $table_vars);
            break;

          case 'list':
            foreach ($messages as $message) {
              $content .= theme('messages_to_block_message', (array) $message);
            }
            break;

        }
      }
      else {
        $content = t('No messages');
      }

      $block['subject'] = t('Messages');
      $block['content'] = $content;
      break;

  }

  return $block;
}
