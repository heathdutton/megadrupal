<?php

/**
 * @file
 * Shipping quote module for Ubercart that interfaces with the Canada Post
 * shipping tools to get rates for small package shipments.
 *
 * @author Tim Rohaly.    <http://drupal.org/user/202830>
 */


/* Maximum package weight for Canada Post shipments */
define('PACKAGE_WEIGHT_LIMIT_KG', 30.0);  // 30kg


/******************************************************************************
 * Drupal Hooks                                                               *
 ******************************************************************************/


/**
 * Implements hook_menu().
 */
function uc_canadapost_menu() {
  $items = array();

  $items['admin/store/settings/quotes/settings/canadapost'] = array(
    'title'            => 'Canada Post',
    'access arguments' => array('configure quotes'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('uc_canadapost_admin_settings'),
    'file'             => 'uc_canadapost.admin.inc',
    'type'             => MENU_LOCAL_TASK,
  );

  return $items;
}


/******************************************************************************
 * Ubercart Hooks                                                             *
 ******************************************************************************/


/**
 * Implements hook_uc_shipping_type().
 */
function uc_canadapost_uc_shipping_type() {
  $weight = variable_get('uc_quote_type_weight', array('small_package' => 0));

  $types = array();
  $types['small_package'] = array(
    'id'     => 'small_package',
    'title'  => t('Small Packages'),
    'weight' => $weight['small_package'],
  );

  return $types;
}

/**
 * Implements hook_uc_shipping_method().
 */
function uc_canadapost_uc_shipping_method() {
  $operations = array(
    'configure' => array(
      'title' => t('configure'),
      'href'  => 'admin/store/settings/quotes/settings/canadapost',
    ),
  );

  $methods['canadapost'] = array(
    'id'         => 'canadapost',
    'module'     => 'uc_canadapost',
    'title'      => t('Canada Post'),
    'operations' => $operations,
    'quote'      => array(
      'type'         => 'small_package',
      'callback'     => 'uc_canadapost_quote',
      'accessorials' => _uc_canadapost_service_list(),
    ),
  );

  return $methods;
}

/**
 * Implements hook_uc_store_status().
 *
 * Lets the administrator know that the Canada Post account information
 * has not been filled out.
 */
function uc_canadapost_uc_store_status() {
  $messages = array();
  if (variable_get('uc_canadapost_cpcid', '') == '') {
    $messages[] = array('status' => 'error',
      'title' => t('Canada Post Shipping'),
      'desc'  => t('More information is needed to access your Canada Post account. Please enter it') . ' ' .
        l('here', 'admin/store/settings/quotes/settings/canadapost') . '.',
    );
  }

  if (count($messages) == 0) {
    $messages[] = array('status' => 'ok',
      'title' => t('Canada Post Shipping'),
      'desc'  => t('Information needed to access your Canada Post account has been entered.'),
    );
  }
  return $messages;
}


/******************************************************************************
 * Module Functions                                                           *
 ******************************************************************************/


/**
 * Callback for retrieving a Canada Post shipping quote.
 *
 * Makes a single request that gets all available shipping options
 * (limited by the SellOnline account).
 *
 * @param $products
 *   Array of cart contents.
 * @param $destination
 *   Customer's shipping address.
 *
 * @return
 *   JSON object containing rate, error, and debugging information.
 */
function uc_canadapost_quote($products, $destination) {

  // The uc_quote AJAX query can fire before the customer has completely
  // filled out the destination address, so check to see whether the address
  // is complete. If not, abort.
  if (empty($destination['city'])        ||
      empty($destination['zone'])        ||
      empty($destination['postal_code']) ||
      empty($destination['country'])       ) {
    // Skip this shipping method.
    return array();
  }

  // Initialize arrays to hold quote data to be returned to uc_quote.
  $debug_data = array('debug' => NULL, 'error' => array());
  $rates = array('data' => NULL);

  // Put products into packages of PACKAGE_WEIGHT_LIMIT_KG or less.
  $packages = _uc_canadapost_package_products($products);
  //drupal_set_message('<pre>' . var_export($packages, TRUE) . '</pre>');

  if (!count($packages)) {
    // If uc_canadapost_package_products returned no packages,
    // then at least one item must be too heavy to ship via Canada Post.
    $debug_data['error'][] = t('At least one item in this order is too heavy to ship via Canada Post.  Canada Post has a @limitkg package weight limit.', array('@limit' => PACKAGE_WEIGHT_LIMIT_KG));

    return $rates['data'] = $debug_data;
  }

  // Loop over packages and accumulate quotes, sum quotes together
  // so we can send the total $ amount and total # packages to uc_quote
  // for display.

  foreach ($packages as $package) {
    $xml      = _uc_canadapost_build_xml($package, $destination);
    $response = _uc_canadapost_post_xml($xml);
    //drupal_set_message('<pre>' . check_plain(var_export($response, TRUE)) . '</pre>');
    if (user_access('configure quotes') && variable_get('uc_quote_display_debug', FALSE)) {
      // Request.
      $debug_data['debug'] .= htmlentities($xml) . "<br />\n";
      // Response.
      //$debug_data['debug'] .= htmlentities($response->data) . "<br />\n";
      // Not quite right - need to get response object before SimpleXML ...
      // to do this will have to refactor _uc_canadapost_post_xml().
    }

    if ($response) {
      $services = variable_get('uc_canadapost_services', _uc_canadapost_service_list());

      $ratesAndServicesResponse =& $response->ratesAndServicesResponse;
      foreach ($ratesAndServicesResponse->product as $product) {
        $id = (string) $product['id'];
        if (isset($services[$id]) && ($services[$id] == $id)) {
          // Markup rate before customer sees it.
          if (!isset($rates[$id]['rate'])) {
              $rates[$id]['rate'] = 0;
          }
          $rates[$id]['rate']  += uc_canadapost_rate_markup($product->rate);
          $rates[$id]['format'] = uc_currency_format($rates[$id]['rate']);
          $rates[$id]['option_label'] = theme('uc_canadapost_option_label', array('service' => $product, 'packages' => $packages));
        }
      }
    }
  }

  // Sort rate quotes in order of increasing price.
  uasort($rates, 'uc_quote_price_sort');

  // Merge debug data into $rates.  This is necessary because
  // $debug_data is not sortable by a 'rate' key, so it has to be
  // kept separate from the $rates data until this point.
  if (isset($debug_data['debug']) ||
      (isset($debug_data['error']) && count($debug_data['error']))) {
    $rates['data'] = $debug_data;
  }

  return $rates;
}

/**
 * Implements hook_theme().
 */
function uc_canadapost_theme() {
  return array(
    'uc_canadapost_option_label' => array(
      'file'      => 'uc_canadapost.module',
      'variables' => array(
        'service'  => NULL,
        'packages' => NULL,
      ),
    ),
  );
}

/**
 * Theme function to format the Canada Post service name and rate amount
 * line-item shown to the customer.
 *
 * @param $variables
 *   Associative array containing information needed to theme a quote.
 *   Contains two keys:
 *   - service: The Canada Post quote details.
 *   - packages: Package information.
 *
 * @ingroup themeable
 */
function theme_uc_canadapost_option_label($variables) {
  $product  = $variables['service'];
  $packages = $variables['packages'];

  // Start with CP logo
  $output  = theme('image', array(
    'path' => drupal_get_path('module', 'uc_canadapost') . '/uc_canadapost_logo.gif',
    'alt' => 'Canada Post logo',
    'attributes' => array('class' => 'canadapost-logo')
  ));

  // Add CP product (service) name.
  $output .= t('Canada Post') . ' ' . $product->name;

  // Add package information.
  $output .= ' (' . format_plural(count($packages), '1 package', '@count packages') . ')';

  // Add estimated delivery date.
  $datefmt  = variable_get('uc_canadapost_datefmt', '');
  if ($datefmt &&
      isset($product->deliveryDate) &&
      ($deliveryDate = $product->deliveryDate)) {
    if (preg_match('/\d{4}-\d{2}-\d{2}/', (string)$deliveryDate)) {
      // If response in YYYY-MM-DD format, use store settings to format date.
      $deliveryDate = strtotime($deliveryDate);
      $output .= ' (' . t('Estimated delivery') . ': ' . date($datefmt, $deliveryDate) . ')';
    }
    else {
      // If response not in YYYY-MM-DD format, just output response string.
      $output .= ' (' . t('Estimated delivery') . ': ' . $deliveryDate . ')';
    }
  }

  return $output;
}

/**
 * Builds the XML request string that will be sent to Canada Post.
 */
function _uc_canadapost_build_xml($package, $destination) {
  $lang = 'en';
  if (module_exists('i18n') && (i18n_get_lang() == 'fr')) {
    $lang = 'fr';
  }

  $cpcid = variable_get('uc_canadapost_cpcid', '');
  $turnaround = variable_get('uc_canadapost_turnaround', '24');
  // Strip any space(s) from postal code.
  $from_postalcode = str_replace(' ', '', variable_get('uc_canadapost_postalcode', FALSE));

  $city = $destination['city'];
  $prov = uc_get_zone_code($destination['zone']);
  $country = uc_get_country_data(array('country_id' => $destination['country']));


  $country = $country[0]['country_iso_code_2'];
  // Strip any space(s) from postal code.
  $postalcode = str_replace(' ', '', $destination['postal_code']);

  // Convert shipweight from store weight units into KG, because
  // Canada Post only accepts KG.
  $package->shipweight = $package->shipweight * uc_weight_conversion(variable_get('uc_weight_unit', 'KG'), 'KG');

  // Round shipweight up to nearest kg if weight > 1.0 kg.
  // If less than 1 kg, use actual weight so envelope services can be quoted.
  $shipweight = $package->shipweight;
  if ($shipweight > 1.0) {
    $shipweight = ceil($shipweight);
  }

  $xml = '<?xml version="1.0" ?>' .
         '<eparcel><language>' . $lang . '</language><ratesAndServicesRequest>' .
         '<merchantCPCID>' . $cpcid . '</merchantCPCID>';
  if ($from_postalcode) {
    $xml .= '<fromPostalCode>' . $from_postalcode . '</fromPostalCode>';
  }
  $xml .= '<turnAroundTime>' . $turnaround . '</turnAroundTime>';
  $xml .= '<itemsPrice>' . round($package->price, 2) . '</itemsPrice>' .
          '<lineItems><item>' .
          '<quantity>1</quantity>' .
          '<weight>' . $shipweight . '</weight>' .
          '<length>1</length><width>1</width><height>1</height>' .
          '<description>' .  format_plural($package->quantity, '1 item', '@count items') . '</description><readyToShip />' .
          '</item></lineItems>';
  $xml .= '<city>' . $city . '</city>' .
          '<provOrState>' . $prov . '</provOrState>' .
          '<country>' . $country . '</country>';
  $xml .= '<postalCode>' . $postalcode . '</postalCode>';
  $xml .= '</ratesAndServicesRequest>' .
          '</eparcel>';

  return $xml;
}


/**
 * Sends quote request to Canada Post server, returns object with results.
 */
function _uc_canadapost_post_xml($xml) {
  $url = variable_get('uc_canadapost_url', 'http://sellonline.canadapost.ca:30000/');
  $headers = array(
    'User-Agent'   => 'Drupal (Ubercart; Canada Post Shipping module)',
    'Content-type' => 'application/x-www-form-urlencoded',
    'Accept'       => 'text/xml,application/xml,text/html;q=0.9,text/plain;*/*;q=0.5',
  );
  $http_response = drupal_http_request($url, array('method' => 'POST', 'data' => 'XMLRequest=' . urlencode($xml)));

  if (isset($http_response->data)) {
    $response = new SimpleXMLElement($http_response->data);

    if (isset($response->ratesAndServicesResponse) &&
        isset($response->ratesAndServicesResponse->statusCode) &&
        ($response->ratesAndServicesResponse->statusCode == 1))   {

      return $response;
    }
    else {
      watchdog(
        'uc_canadapost',
        'Shipping failed. Request was: !request, response was !response',
        array(
          '!request'  => htmlentities($xml),
          '!response' => htmlentities($http_response->data),
        ),
        WATCHDOG_ERROR
      );
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Convenience function to get Canada Post codes for their services.
 *
 * Latest service codes may be found at
 * http://sellonline.canadapost.ca/DevelopersResources/protocolV3/ProductID.html
 *
 * @return
 *   Array with service codes as keys and service names as values.
 */
function _uc_canadapost_service_list() {
  return array(
    /* Domestic Products */
    '1010' => t('Canada Post Regular'),
    '1020' => t('Canada Post Expedited'),
    '1030' => t('Canada Post Xpresspost'),
    '1040' => t('Canada Post Priority Courier'),

    /* US Products */
    '2005' => t('Canada Post Small Packets Surface USA'),
    '2015' => t('Canada Post Small Packets Air USA'),
    '2020' => t('Canada Post Expedited US Business Contract'),
    '2030' => t('Canada Post Xpresspost USA'),
    '2040' => t('Canada Post Priority Worldwide USA'),
    '2050' => t('Canada Post Priority Worldwide PAK USA'),

    /* International Products */
    '3005' => t('Canada Post Small Packets Surface International'),
    '3010' => t('Canada Post Surface International'),
    '3015' => t('Canada Post Small Packets Air International'),
    '3020' => t('Canada Post Air International'),
    '3025' => t('Canada Post Xpresspost International'),
    '3040' => t('Canada Post Priority Worldwide International'),
    '3050' => t('Canada Post Priority Worldwide PAK International'),
  );

  /* No longer supported? */
  //'1120' => t('Canada Post Expedited Evening'),
  //'1130' => t('Canada Post Xpresspost Evening'),
  //'1220' => t('Canada Post Expedited Saturday'),
  //'1230' => t('Canada Post Xpresspost Saturday'),
  //'2025' => t('Canada Post Expedited US Commercial'),
}

/**
 * Modifies the rate received from CanadaPost before displaying to the customer.
 *
 * Rates are marked-up by a percentage, a multiplier, or an additional
 * amount as per the settings in this modules administration menu.
 *
 * @param $rate
 *   Shipping rate before rate markup.
 *
 * @return
 *   A float containing the modified rate.
 */
function uc_canadapost_rate_markup($rate) {
  $markup = trim(variable_get('uc_canadapost_rate_markup', '0'));
  $type   = variable_get('uc_canadapost_rate_markup_type', 'percentage');
  if (is_numeric($markup)) {
    switch ($type) {
      case 'percentage':
        return (float) $rate * (1.0 + floatval($markup) / 100.0);
      case 'multiplier':
        return (float) $rate * floatval($markup);
      case 'currency':
        return (float) $rate + floatval($markup);
    }
  }
  else {
    return $rate;
  }
}

/**
 * Modifies the weight of shipment before sending to Canada Post for a quote.
 *
 * @param $weight
 *   Shipping weight without any weight markup.
 *
 * @return
 *   Shipping weight after markup.
 */
function uc_canadapost_weight_markup($weight) {
  $markup = trim(variable_get('uc_canadapost_weight_markup', '0'));
  $type   = variable_get('uc_canadapost_weight_markup_type', 'percentage');

  if (is_numeric($markup)) {
    switch ($type) {
      case 'percentage':
        return (float) $weight * (1.0 + floatval($markup) / 100.0);
      case 'multiplier':
        return (float) $weight * floatval($markup);
      case 'mass':
        return (float) $weight + floatval($markup);
    }
  }
  else {
    return $weight;
  }
}

/**
 * Packages products into boxes subject to the Canada Post weight limit,
 * corrected for any weight markup imposed by the administrator.
 *
 * $package object returned from this routine contains the following members:
 *   ->quantity     Number of items in package
 *   ->price        Value (sales price, in store currency) of items in package
 *   ->weight       Actual weight of items in package, in store weight units
 *   ->weight_units Set to store default, taken from uc_weight_unit variable
 *   ->shipweight   Computed weight of package, including markup
 *
 * Store weight units are used internally for compution of package weights.
 * Each product may have its own weight units; these are converted to store
 * units and the package shipweight is returned in terms of the store weight
 * units. The store weight units are saved in the $package object for
 * completeness.
 *
 * @param $products
 *   An array of nodes of type product.
 *
 * @return
 *   An array of package objects, each containing one or more of the products.
 */
function _uc_canadapost_package_products($products) {
  $packages = array();

  // Determine maximum weight of products we can put into one
  // package while staying below PACKAGE_WEIGHT_LIMIT_KG.  This number
  // depends on the package weight markup set in the Canada Post module
  // administration menu.
  $products_max_weight = PACKAGE_WEIGHT_LIMIT_KG;
  $zero_markup = uc_canadapost_weight_markup(0);
  if ($zero_markup == 0) {
    // Weight markup is a multiplier, because 0 * multiplier = 0.
    // This handles percentage markup too.
    $products_max_weight = $products_max_weight / uc_canadapost_weight_markup(1);
  }
  else {
    // Weight markup is an additive factor , because 0 + factor = factor != 0.
    $products_max_weight = $products_max_weight - $zero_markup;
  }

  // Convert $products_max_weight (which is defined in KG units) into store
  // default weight units so we can perform all calculations and return all
  // results in store default weight units.
  $products_max_weight = $products_max_weight * uc_weight_conversion('KG', variable_get('uc_weight_unit', 'KG'));

  // Create first package.
  $package = new stdClass();
  $package->quantity     = 0;
  $package->price        = 0.0;
  $package->weight       = 0.0;
  $package->weight_units = variable_get('uc_weight_unit', 'KG');

  // Loop over products.
  foreach ($products as $product) {
    // Get item weight. Weight units are set on a per-product basis, so
    // we convert as necessary in order to perform all calculations in the
    // store weight units.
    $item_weight = $product->weight * uc_weight_conversion($product->weight_units, variable_get('uc_weight_unit', 'KG'));

    if ($item_weight >= $products_max_weight) {
      // This product is too heavy to ship via Canada Post - quit with error.
      return array();
    }

    // Loop over qty of each product.
    for ($item = 0; $item < $product->qty; $item++) {
      // Test to see if putting this item into the current package put us
      // over the weight limit.
      if (($package->weight + $item_weight) < $products_max_weight) {
        // No?  Then update the package information and continue.
        $package->quantity += 1;
        $package->price    += $product->price;
        $package->weight   += $item_weight;
      }
      else {
        // If weight >= maximum allowed weight, save current package to
        // array and start new package:

        // First markup weight on a per-package basis.
        $package->shipweight = uc_canadapost_weight_markup($package->weight);

        // Second, save current package to array.
        $packages[] = $package;

        // Finally, start a new package.
        $package = new stdClass();
        $package->quantity     = 1;
        $package->price        = $product->price;
        $package->weight       = $item_weight;
        $package->weight_units = variable_get('uc_weight_unit', 'KG');
      }
    }
  }

  // No more products left to package.
  // Take care of the partially-filled package we were working on.

  // First, markup weight of partially-filled package.
  $package->shipweight = uc_canadapost_weight_markup($package->weight);

  // Second, save the partially-filled package to the array and exit.
  $packages[] = $package;

  return $packages;
}
