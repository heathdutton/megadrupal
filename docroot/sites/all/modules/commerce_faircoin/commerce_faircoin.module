<?php
/**
 * @file
 * Setup a new currency and payment method for FairCoin in Drupal Commerce.
 */

/**
 * Implements hook_help().
 */
function commerce_faircoin_help($path, $arg) {
  switch ($path) {
    case 'admin/help#commerce_faircoin':

      $filepath = drupal_get_path('module', 'commerce_faircoin') . '/README.txt';
      if (file_exists($filepath)) {
        $readme = file_get_contents($filepath);
      }
      if (!isset($readme)) {
        return NULL;
      }
      $output = '<pre>' . $readme . '</pre>';
      return $output;
  }
}

/**
 * Implements hook_libraries_info().
 */
function commerce_faircoin_libraries_info() {
  $libraries = array();
  $libraries['qrcode'] = array(
    'name' => 'QRcode',
    'vendor url' => 'https://github.com/jeromeetienne',
    'download url' => 'https://github.com/XaviP/jquery-qrcode/archive/master.zip',
    'version callback' => 'commerce_faircoin_simple_callback',
    'files' => array(
      'js' => array(
        'jquery.qrcode.min.js',
      ),
    ),
  );
  return $libraries;
}
/**
 * Short-circuit the hook_libraries_info version argument.
 *
 * There's a unique version of the library and it's not defined in the file.
 */
function commerce_faircoin_simple_callback() {
  return TRUE;
}

/**
 * Implements hook_commerce_currency_info().
 */
function commerce_faircoin_commerce_currency_info() {
  return array(
    'FAC' => array(
      'code' => 'FAC',
      'symbol' => 'FAIR',
      'decimals' => 2,
      'name' => t('FairCoin'),
      'numeric_code' => '',
      'symbol_placement' => 'after',
      'code_placement' => '',
      'minor_unit' => t('mFAIR'),
      'major_unit' => t('FAIR'),
    ),
  );
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_faircoin_commerce_payment_method_info() {
  $payment_methods = array();
  $payment_methods['commerce_faircoin'] = array(
    'base' => 'commerce_faircoin',
    'title' => t('FairCoin payment'),
    'short_title' => 'FairCoin',
    'display_title' => t("Pay with FairCoin"),
    'description' => t('FairCoin currency payment'),
  );
  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_faircoin_settings_form($settings = NULL) {
  $form = array();

  // Help text.
  $form['commerce_faircoin_help_text'] = array(
    '#markup' => '<div class="help">' . t('<h4><strong>Setup instructions</strong></h4><p>Enter the FairCoin payment details to display to customers who choose this payment method during checkout.</p>') . '</div>',
  );

  // Settings.
  $form['details'] = array(
    '#type' => 'fieldset',
    '#title' => t('Faircoin payment details'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['details']['faircoin_address'] = array(
    '#type' => 'textfield',
    '#size' => 40,
    '#maxlength' => 35,
    '#title' => t('FairCoin address'),
    '#description' => t('The FairCoin address where your costomers will send you the payments.'),
    '#default_value' => isset($settings['details']['faircoin_address']) ? $settings['details']['faircoin_address'] : '',
    '#required' => TRUE,
    '#element_validate' => array('_faircoin_address_validate'),
  );
  $form['details']['faircoin_policy'] = array(
    '#type' => 'textarea',
    '#title' => t('Payment instructions'),
    '#description' => t('Instructions for customers on the checkout page. Use &lt;br /&gt; for line break.'),
    '#default_value' => isset($settings['details']['faircoin_policy']) ? $settings['details']['faircoin_policy'] : t('When you confirm this review order, you will get the FairCoin address where to make the payment.'),
    '#required' => FALSE,
    '#rows' => 3,
  );
  return $form;

}

/**
 * Validate address.
 */
function _faircoin_address_validate($element, &$form_state) {
  $validator = _commerce_faircoin_check_address($element['#value']);
  if (!$validator) {
    form_error($element, t('This is not a valid faircoin address.'));
  }
}

/**
 * Payment method callback: checkout form.
 */
function commerce_faircoin_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();
  $form['faircoin_policy'] = array(
    '#markup' => '<p>' . $payment_method['settings']['details']['faircoin_policy'] . '</p>',
  );
  return $form;
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_faircoin_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  commerce_faircoin_transaction($payment_method, $order, $charge);
  db_insert('commerce_faircoin')
    ->fields(array(
      'order_id' => $order->order_id,
      'faircoin_address' => $payment_method['settings']['details']['faircoin_address'],
    ))
    ->execute();
}

/**
 * Creates the payment transaction for the specified charge amount.
 */
function commerce_faircoin_transaction($payment_method, $order, $charge) {
  $transaction = commerce_payment_transaction_new('commerce_faircoin', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;

  commerce_payment_transaction_save($transaction);
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_faircoin_commerce_checkout_pane_info() {
  $panes['commerce_faircoin'] = array(
    'title' => t('FairCoin Payment Details'),
    'page' => 'complete',
    'weight' => 10,
    'file' => 'includes/commerce_faircoin.checkout_pane.inc',
    'base' => 'commerce_faircoin_pane',
  );
  return $panes;
}

/**
 * Implements hook_commerce_order_view().
 */
function commerce_faircoin_commerce_order_view($order, $view_mode) {
  if ($order->commerce_order_total[LANGUAGE_NONE]['0']['currency_code'] == 'FAC') {
    if ($faircoin_transaction = db_query("SELECT * FROM {commerce_faircoin} WHERE order_id = :id", array(':id' => $order->order_number))->fetchAssoc()) {
      $order->content['faircoin'] = array(
        '#type' => 'markup',
        '#markup' => t('Payment FairCoin address') . ':<br /> <code>' . $faircoin_transaction['faircoin_address'] . '</code>',
      );
    }
  }
}

/**
 * Verify the FairCoin address.
 */
function _commerce_faircoin_check_address($address) {
  if (preg_match('/[^1-9A-HJ-NP-Za-km-z]/', $address)) {
    return FALSE;
  }
  // Decode address.
  $hexadecimal = '0123456789ABCDEF';
  $base58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
  $raw = "0";
  for ($i = 0; $i < drupal_strlen($address); $i++) {
    $position = (string) strpos($base58, $address[$i]);
    $raw = (string) bcmul($raw, "58", 0);
    $raw = (string) bcadd($raw, $position, 0);
  }
  $hex = "";
  while (bccomp($raw, 0) == 1) {
    $dv = (string) bcdiv($raw, "16", 0);
    $rem = (integer) bcmod($raw, "16");
    $raw = $dv;
    $hex = $hex . $hexadecimal[$rem];
  }
  $addr_decoded = strrev($hex);
  // Amend padding.
  for ($i = 0; $i < drupal_strlen($address) && $address[$i] == "1"; $i++) {
    $addr_decoded = "00" . $addr_decoded;
  }
  if (drupal_strlen($addr_decoded) % 2 != 0) {
    $addr_decoded = "0" . $addr_decoded;
  }
  // Control invalid length.
  if (drupal_strlen($addr_decoded) != 50) {
    return FALSE;
  }
  // Control invalid type.
  // FairCoin main net public key: "5F"
  // FairCoin main net script: "24"
  $type = drupal_substr($addr_decoded, 0, 2);
  if ($type != "5F" && $type != "24") {
    return FALSE;
  }
  // Check address.
  $ch = drupal_substr($addr_decoded, 0, drupal_strlen($addr_decoded) - 8);
  $ch = pack("H*", $ch);
  $ch = hash("sha256", $ch, TRUE);
  $ch = hash("sha256", $ch);
  $ch = drupal_strtoupper($ch);
  $ch = drupal_substr($ch, 0, 8);
  $is_valid = ($ch == drupal_substr($addr_decoded, drupal_strlen($addr_decoded) - 8));
  return ($is_valid ? $type : FALSE);
}
