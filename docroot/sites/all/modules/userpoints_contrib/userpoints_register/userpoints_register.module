<?php

/*
 * @file
 * Awards people a configurable number of userpoints for registering.
 * Created by Thomas Turnbull (tom_o_t) for Sony Music
 *
 * Updated to Drupal 7 by Bastlynn ( bastlynn@gmail.com )
 */

/*
 * Implements hook_userpoints().
 *
 * Creates points configuration form for awarding points for registering.
 */
function userpoints_register_userpoints($op, $params = array()) {
  switch ($op) {
    case 'setting':
      $form['userpoints_register'] = array(
        '#type' => 'fieldset',
        '#title' => t('User registration'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#access' => user_access('administer userpoints'),
        '#weight' => 25,
        '#group' => 'settings_additional',
        '#attached' => array(
          'js' => array(
            'userpoints_nodelimit' => drupal_get_path('module', 'userpoints_register') . '/userpoints_register.js',
          ),
        ),
      );
      $form['userpoints_register']['userpoints_register_enabled'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enabled by default.'),
        '#default_value' => variable_get('userpoints_register_enabled', TRUE),
        '#description' => t('If checked, new users will gain !points on registration.', userpoints_translation()),
      );
      $categories = userpoints_get_categories();
      foreach ($categories as $tid => $category) {
        $form['userpoints_register']['userpoints_register_points_' . $tid] = array(
          '#type'          => 'textfield',
          '#title'         => t($category . ' !points for registering', userpoints_translation()),
          '#default_value' => variable_get('userpoints_register_points_' . $tid, 0),
          '#size'          => 5,
          '#maxlength'     => 5,
          '#description'   => t('The amount of !points to be awarded upon registration.', userpoints_translation()),
        );
        $form['userpoints_register']['userpoints_register_display_' . $tid] = array(
          '#type' => 'checkbox',
          '#title' => t('Display message to user upon registering'),
          '#default_value' => variable_get('userpoints_register_display_' . $tid, TRUE),
          '#description' => t('If checked, a !points award notification message will be displayed to the user after registration is complete.',
            userpoints_translation()),
        );
      }
      return $form;
  }
}

/*
 * Implements hook_userpoints_info().
 */
function userpoints_register_userpoints_info() {
  return array(
    'userpoints_register' => array(
      'description' => t('Created new user account.'),
    )
  );
}

/*
 * Implements hook_user_insert().
 *
 * Awards the points for registering.
 */
function userpoints_register_user_insert(&$edit, $account, $category) {
  if (variable_get('userpoints_register_enabled', TRUE)) {
    $categories = userpoints_get_categories();
    foreach ($categories as $tid => $category) {
      $points = variable_get('userpoints_register_points_' . $tid, 0);
      if (!empty($points) && $points !==0) {
        $param = array(
          'points'      => $points,
          'tid'         => $tid,
          'uid'         => $account->uid,
          'operation'   => 'userpoints_register',
          'entity_id'   => $account->uid,
          'entity_type' => 'user',
          'display'     => variable_get('userpoints_register_display_' . $tid, TRUE),
        );
        userpoints_userpointsapi($param);
      }
    }
  }
}
