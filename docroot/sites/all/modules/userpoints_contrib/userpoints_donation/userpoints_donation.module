<?php

/**
 * @file
 *
 * userpoints_donation uses userpoints api to give users ability to give points to
 * others.
 *
 * @ingroup userpoints_contrib
 */

/**
 * Implements hook_user_view_alter().
 */
function userpoints_donation_user_view_alter(&$build) {
  global $user;
  if (user_access('give points to another user') && $build['#account']->uid != $user->uid) {
    $build['userpoints']['actions']['#links']['userpoints_donation'] = array(
      'href' => 'userpoints_donation/' . $build['#account']->name,
      'title' => t('Donate !points to this user', userpoints_translation()),
      'query' => drupal_get_destination(),
    );
  }
}

/**
 * Implements hook_permission().
 */
function userpoints_donation_permission() {
  return array(
    'give points to another user' => array(
      'title' => t('Give points to another user'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function userpoints_donation_menu() {

  /**
   * This function takes a URL in this form:
   *   userpoints_donation/[to]/[amount]/[tid]
   * where:
   *   [to] is uid or username of user points are given to
   *   [amount] (optional) is points quantity.  defaults to 1 if empty.
   *   [tid] (optional) taxonomy id, 'choose' to have user choose, 'all' to pass all param to userpoints api
   *
   * For example:
   *
   *   userpoints_donation/              (a blank form is presented to the user)
   *   userpoints_donation/johndoe       (apply to johndoe, user selects amount and category)
   *   userpoints_donation/johndoe/5     (apply 5 points to johndoe and let them select category)
   *   userpoints_donation/johndoe/5/51  (apply 5 points to johndoe in in term 51)
   *   userpoints_donation/11/5/51       (apply 5 points to uid #11 in in term 51. User may select another term)
   */
  $items['userpoints_donation'] = array(
    'title'            => 'Donate !points',
    'title arguments'  => userpoints_translation(),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('userpoints_donation_giveform', 1, 2, 3),
    'access arguments' => array('give points to another user'),
  );

  return $items;
}

/**
 * Implements hook_node_view().
 */
function userpoints_donation_node_view($node, $view_mode) {
  global $user;
  $enabled_types = array_filter(variable_get('userpoints_donation_show_links', array()));
  if (in_array($node->type, $enabled_types) && user_access('give points to another user') && $node->uid != $user->uid) {
    $links = array();
    $links['userpoints_donation'] = array(
      'title' => t('Give !points to author', userpoints_translation()),
      'href'  => 'userpoints_donation/' . $node->name,
      'query' => drupal_get_destination(),
    );
    $node->content['links']['userpoints_donation'] = array(
      '#theme' => 'links__userpoints_donation',
      '#links' => $links,
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }
}

/**
 * Form builder function to display form to give another user points.
 */
function userpoints_donation_giveform($form, &$form_state, $account = NULL, $amount = 0, $tid = NULL) {
  if ($account > 0) {
    $to = user_load($account);
    $account = $to->name;
  }

  // If the tid is an string containing 0, this is the default category, don't
  // override with the default.
  if (empty($tid) && $tid !== '0') {
    $tid = (int)variable_get('userpoints_donation_default_category', userpoints_get_default_tid());
  }

  $form['description'] = array(
    '#markup' => t('When you donate !points to another user, they will be deducted from your !points balance.', userpoints_translation()),
  );

  $form['to'] = array(
    '#type'              => 'textfield',
    '#title'             => t('To'),
    '#autocomplete_path' => 'user/autocomplete',
    '#default_value'     => $account,
    '#size'              => 20,
    '#maxlength'         => 64,
    '#required'          => TRUE,
  );

  $form['amount'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Amount'),
    '#default_value' => $amount,
    '#size'          => 20,
    '#required'      => TRUE,
    '#description'   => t('Amount of !points to donate.'),
  );

  if (!variable_get('userpoints_donation_show_categories', 1)) {
    $form['tid'] = array(
      '#type'          => 'value',
      '#default_value' => $tid,
    );
    // Add amount of points of that category to the description of the amount
    // field.
    $form['amount']['#description'] = t('Amount of !points to donate. You have currently @points !points.', array_merge(userpoints_translation(), array('@points' => userpoints_get_current_points(NULL, $tid))));
  }
  else {
    $categories = userpoints_get_categories();
    foreach ($categories as $tid => &$category) {
      $category = t('@category (@points !points)', array_merge(userpoints_translation(), array('@points' => userpoints_get_current_points(NULL, $tid), '@category' => $category)));
    }


    $form['tid'] = array(
      '#type'          => 'select',
      '#title'         =>  t('Category'),
      '#default_value' => $tid,
      '#required'      => TRUE,
      '#options'       => $categories,
    );
  }

  $form['reason'] = array(
    '#type'        => 'textarea',
    '#title'       => t('Reason'),
    '#description' => t('You may include a short message that explains why you are donating !points. This message will be shown to the !points recipient.', userpoints_translation())
  );

  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Donate !points', userpoints_translation())
  );
  return $form;
}

/**
 * Validate form to give another user points.
 */
function userpoints_donation_giveform_validate($form, &$form_state) {
  global $user;

  // Check the name to be valid.
  if (!empty($form_state['values']['to'])) {
    $to_id = $form_state['values']['to'];
    if ($to_id > 0) {
      $to = user_load($to_id);
    }
    else {
      $to = user_load_by_name($to_id);
    }

    if (!$to->uid) {
      form_set_error('to', t('That is not a valid user.'));
      return;
    }

    if ($to->uid == $user->uid) {
      form_set_error('to', t("You can't give !points to yourself.", userpoints_translation()));
      return;
    }
  }

  /* Check the value to be valid. */
  if ($form_state['values']['amount'] < 1) {
    form_set_error('amount', t("You can't give less than one !point.", userpoints_translation()));
    return;
  }

  $tid = isset($form_state['values']['tid']) ? $form_state['values']['tid'] : userpoints_get_default_tid();
  $current_points = userpoints_get_current_points($user->uid, $tid);
  if ($form_state['values']['amount'] > $current_points) {
    $categories = userpoints_get_categories();
    $arguments = array_merge(userpoints_translation() + array('@points' => $current_points, '@category' => $categories[$tid]));
    form_set_error('amount', t("You don't have enough !points available in the @category category to give away that many. You currently have @points !points available.", $arguments));
    return;
  }
  // Save account so that it can be used by the submit function.
  $form_state['validated_account'] = $to;
}

/**
 * Submit function to give another user points.
 */
function userpoints_donation_giveform_submit($form, &$form_state) {
  global $user;

  $points = $form_state['values']['amount'];
  $to = $form_state['validated_account'];

  $tid = NULL;
  if (isset($form_state['values']['tid'])) {
    $tid = $form_state['values']['tid'];
  }

  $params = array(
    'uid'    => $to->uid,
    'points' => $points,
    'operation'  => 'userpoints_donation_received',
    'entity_type' => 'user',
    'entity_id' => $user->uid,
    'description' => $form_state['values']['reason'],
    'tid'    => $tid,
  );
  userpoints_userpointsapi($params);

  $params = array(
    'uid'    => $user->uid,
    'points' => -$points,
    'operation'  => 'userpoints_donation_given',
    'entity_type' => 'user',
    'entity_id' => $to->uid,
    'description' => $form_state['values']['reason'],
    'tid'    => $tid,
  );
  userpoints_userpointsapi($params);
}

/**
 * Implements hook_userpoints_info().
 */
function userpoints_donation_userpoints_info() {
  return array(
    'userpoints_donation_received' => array(
      'description callback' => 'userpoints_donation_description_callback',
    ),
    'userpoints_donation_given' => array(
      'description callback' => 'userpoints_donation_description_callback',
    ),
  );
}

/**
 * Description callback for userpoint operation description/reason.
 */
function userpoints_donation_description_callback($operation, $entity) {

  $arguments = userpoints_translation();
  // Load the username.
  if ($operation->entity_type == 'user' && $entity) {
    $arguments['%name'] = format_username($entity);
  }

  // Fallback to string content if the above failed for some reason.
  if (empty($arguments['%title'])) {
    $arguments['%title'] = t('user');
  }

  switch ($operation->operation) {
    case 'userpoints_donation_given':
      return t('Donated !points to %name', $arguments);
      break;

    case 'userpoints_donation_received':
      return t('Received !points from %name', $arguments);
      break;
  }
}

/**
 * Implements hook_userpoints().
 */
function userpoints_donation_userpoints($op, $params = array()) {
  switch ($op) {
    case 'setting':
      $form['user2user'] = array(
        '#type'        => 'fieldset',
        '#title'       => t('User donations'),
        '#collapsible' => TRUE,
        '#collapsed'   => TRUE,
        '#group'       => 'settings_additional',
        '#weight'      => 30,
      );

      $form['user2user']['userpoints_donation_show_categories'] = array(
        '#type'          => 'checkbox',
        '#title'         => t('Show categories selection if there is more than one'),
        '#default_value' => variable_get('userpoints_donation_show_categories', TRUE),
        '#description'   => t('If a taxonomy id is passed via the url or post or get form, the taxonomy id will still be assigned. It will be passed along as a hidden input in the form.'),
      );

      $options = userpoints_get_categories(NULL);
      $form['user2user']['userpoints_donation_default_category'] = array(
        '#type' => 'select',
        '#title' => t('Default category to use when donating !points', userpoints_translation()),
        '#default_value' => variable_get('userpoints_donation_default_category', userpoints_get_default_tid()),
        '#options' => $options,
        '#description' => t('Choose which category is selected by default when donating !points. This also works if the category selection is not shown but it can be overriden with an argument.', userpoints_translation()),
      );

      $form['user2user']['userpoints_donation_show_links'] = array(
        '#type'          => 'checkboxes',
        '#title'         => t('Choose which content types should show a donate !points link', userpoints_translation()),
        '#default_value' => (array)variable_get('userpoints_donation_show_links', array()),
        '#options'       => node_type_get_names(),
        '#description'   => t('Only the checked content types will show a donate !points link.', userpoints_translation())
      );
      return $form;
      break;
  }
}
