<?php

/**
 * @file
 * Allows the ownership of multiple nodes to be changed to a new user.
 */

/**
 * Implements hook_permission().
 */
function node_adoption_permission() {
  return array(
    'administer node adoption' => array(
      'title' => t('Administer node adoption'),
      'description' => t('Administer node adoption settings and transfers.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function node_adoption_menu() {
  $items['admin/content/node_adoption'] = array(
    'access arguments'  => array('administer node adoption'),
    'description'       => 'Transfer ownership of nodes from one user to another.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('node_adoption_transfer_form'),
    'title'             => 'Transfer content',
    'type'              => MENU_LOCAL_TASK,
  );
  $items['admin/config/content/node_adoption'] = array(
    'title' => 'Node adoption',
    'description' =>  'Configure default owner to assign to nodes on deletion of their author.',
    'page callback' => 'drupal_get_form',
    'file' => 'node_adoption.admin.inc',
    'access arguments'  => array('administer node adoption'),
    'page arguments'    => array('node_adoption_settings'),
  );
  return $items;
}

/**
 * Implements hook_user_delete().
 */
function node_adoption_user_delete($account) {
    // @todo this ALWAYS overwrites ALL 0 nodes, not just the user who was deleted.

    $parent = variable_get('node_adoption_parent', 0);

    db_update('node')
      ->fields(array(
        'uid' => $parent,
      ))
      ->condition('uid', 0, '=')
      ->execute();

    db_update('node_revision')
      ->fields(array(
        'uid' => $parent,
      ))
      ->condition('uid', 0, '=')
      ->execute();
}

/**
 * General form for switching all nodes from one user to another.
 */
function node_adoption_transfer_form() {
  $form['node_adoption_from'] = array(
    '#autocomplete_path'  => 'user/autocomplete',
    '#title'              => t('Original owner'),
    '#type'               => 'textfield',
  );
  $form['node_adoption_to'] = array(
    '#autocomplete_path'  => 'user/autocomplete',
    '#title'              => t('New owner'),
    '#type'               => 'textfield',
  );
  $form['submit'] = array(
    '#type'               => 'submit',
    '#value'              => t('Change ownership'),
  );
  return $form;
}

/**
 * #submit callback for node_adoption_transfer_form().
 */
function node_adoption_transfer_form_submit($form, &$form_state) {
  $to   = db_query(
    'SELECT uid FROM {users} WHERE name = :name',
    array(':name' => $form_state['values']['node_adoption_to'])
  )->fetchField();
  $from = db_query(
    'SELECT uid FROM {users} WHERE name = :name',
    array(':name' => $form_state['values']['node_adoption_from'])
  )->fetchField();
  db_update('node')
    ->fields(array(
      'uid' => $to,
    ))
    ->condition('uid', $from, '=')
    ->execute();
  db_update('node_revision')
    ->fields(array(
      'uid' => $to,
    ))
    ->condition('uid', $from, '=')
    ->execute();
  drupal_set_message(t('Node ownership has been transferred.'));
}

function node_adoption_user_cancel_methods_alter(&$methods) {

  $new_uid = variable_get('node_adoption_parent', 0);

  if ($new_uid) {
    $owner_name = db_query(
      'SELECT name FROM {users} WHERE uid = :uid',
      array(':uid' => $new_uid)
    )->fetchField();
  }
  else {
    $owner_name = variable_get('anonymous', t('Anonymous'));
  }

  $methods['user_cancel_reassign'] = array(
    'title' => t('Delete the account and make its content belong to %new_owner.', array('%new_owner' => $owner_name)),
    'description' => t('Your account will be removed and all account information deleted. All of your content will be assigned to %new-owner.', array('%new-owner' => $owner_name)),
  );
}
