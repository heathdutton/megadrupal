<?php

module_load_include('inc', 'jira_rest', 'jira_rest_compatibility_wrapper');

/**
 * @file
 * Jira REST module providing methods for creating, editing,
 * searching JIRA issues out of Drupal via REST.
 */

/**
 * Menu entry for administration.
 *
 * @return array
 */
function jira_rest_menu() {

  $items = array();

  $items['admin/config/services/jira_rest'] = array(
    'title' => 'Jira REST',
    'description' => 'Configuration for Jira REST module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jira_rest_admin'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'jira_rest.admin.inc',
  );

  return $items;
}

/**
 * Helper function for getting curl resource.
 *
 * @param $options
 * @param $url
 * @return resource
 */
function jira_rest_get_curl_resource(&$options, $url) {

  jira_rest_default_curl_options($options);

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $options['jira_url'] . $url);
  curl_setopt($ch, CURLOPT_USERPWD, $options['username'] . ':' . $options['password']);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, $options['curl_returntransfer']);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, $options['curl_ssl_verifyhost']);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, $options['curl_ssl_verifypeer']);
  return $ch;
}

/**
 * Default credentials for Jira user/server and options for curl.
 * Different options can be set for a REST method by passing an array containing the options to change.
 *
 * @param $options array
 *   reference to option array of the method call, adds default values if not set:
 *     username string jira user name
 *     password string jira user password
 *     jira_url string jira server url including full path to REST API
 *     curl_returntransfer int
 *     curl_ssl_verifyhost int
 *     curl_ssl_verifypeer boolean
 */
function jira_rest_default_curl_options(&$options) {
  $options += array(
    'username' => variable_get('jira_rest_username', ''),
    'password' => variable_get('jira_rest_password', ''),
    'jira_url' => variable_get('jira_rest_jirainstanceurl', 'https://localhost:8443') . '/rest/api/latest',
    'curl_returntransfer' => 1,
    'curl_ssl_verifyhost' => 0,
    'curl_ssl_verifypeer' => FALSE,
  );
}

/**
 * Decodes cURL response.
 *
 * @param $ch
 * @param array $options
 * @return mixed
 * @throws JiraRestException
 */
function jira_rest_curl_execute($ch, $options = array()) {

  // default options
  $options += array(
    'json_decode' => TRUE,
  );

  $response_raw = jira_rest_cache_curl_response($ch, $options);

  if ($response_raw === FALSE) {
    throw new JiraRestException('Jira offline or no response for this action from Jira.');
  }

  if ($options['json_decode']) {
    $response = json_decode($response_raw);
  }
  else {
    $response = $response_raw;
  }

  $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  curl_close($ch);

  switch ($http_code) {
    case '401':
      throw new JiraRestException(t('Jira: 401 Unauthorized!'));
      break;

    case '403':
      throw new JiraRestException(t('Jira: 403 Access Denied!'));
      break;

    default:
      if ($http_code >= 400) {
        throw new JiraRestException(t('Jira: HTTP status code %code , response was %response', array(
          '%code' => $http_code,
          '%response' => $response_raw
        )));
      }
      break;
  }

  return $response;
}

/**
 * Searches JIRA issues filtered by the given JQL string.
 * This function returns all query results and performs multiple REST calls
 * if the number of results exceeds the given maxResults size.
 * In contrast to jira_rest_searchissue() an array of all issues is returned!
 *
 * Usage example returning issues not resolved/closed from PROJECTNAME:
 *
 * $foundissues = jira_rest_issue_search("project=PROJECTNAME&status!=RESOLVED&status!=CLOSED");
 *
 * @param string $jql_string
 *   the JQLString (filtering the searched issues)
 * @param array $options
 *   overwrites default values of specified options (see official JIRA REST API documentation for further information):
 *     startAt int index of the first issue to return (0-based)
 * @see jira_rest_searchissue
 *
 * @return array
 *   the issues found, can be accessed directly from the array
 *
 *   some examples for getting information from a single issue:
 *   $issuekey = $issue->key;
 *   $parentkey = $issue->fields->parent->key;
 *   $customfielddata = $issue->fields->customfield_10404;
 */
function jira_rest_issue_search($jql_string, $options = array()) {
  $jira_issues = array();

  // default options
  $options += array(
    'maxResults' => 999,
    'startAt' => 0,
    'fields' => '',
    'expand' => '',
    'validateQuery' => TRUE,
    'allowMultipleCalls' => TRUE,
  );

  // retrieve all query results with multiple requests
  do {
    // build rest query
    $jira_query = '/search?jql=' . urlencode($jql_string) . '&maxResults=' . $options['maxResults'];
    $jira_query .= '&startAt=' . $options['startAt'] . '&validateQuery=' . $options['validateQuery'];

    if (!empty($options['fields'])) {
      $jira_query .= '&fields=' . urlencode($options['fields']);
    }

    if (!empty($options['expand'])) {
      $jira_query .= '&expand=' . urlencode($options['expand']);
    }

    $ch = jira_rest_get_curl_resource($options, $jira_query);
    $jira_response = jira_rest_curl_execute($ch, $options);

    $jira_issues = array_merge($jira_issues, $jira_response->issues);

    $options['startAt'] += $jira_response->maxResults;
  } while ($jira_response->total > $options['startAt'] && $options['allowMultipleCalls']);

  return $jira_issues;
}

/**
 * Returns a full representation of the issue for the given issue key.
 *
 * @see https://docs.atlassian.com/jira/REST/6.2.4/#d2e3822
 *
 * @param $issue_key string
 *   the issue id or key
 * @param array $options
 * @return object
 *   an object representing all metadata for the given id or key
 * @throws JiraRestException
 */
function jira_rest_issue_get($issue_key, $options = array()) {
  $ch = jira_rest_get_curl_resource($options, '/issue/' . urlencode($issue_key));
  return jira_rest_curl_execute($ch, $options);
}

/**
 * Creates a JIRA issue.
 *
 * example for $issuedata parameter
 *   $issuedata =
 *    array('fields'=>array(
 *     'project'=>array('id'=>$projectid,),
 *     'summary'=>$summary,
 *     'description'=>$description,
 *     'priority'=>array('id'=>$priorityid,),
 *     'issuetype'=>array('id'=>$issuetypeid),
 *     'customfield_xxx'=>$dataforcustomfield,
 *     ),
 *   );
 *
 * @param $issue_data array
 *   array containing data for issue fields
 * @param array $options
 *
 * @return object
 *   the issue created
 *   access e.g.
 *   $createdissue_id = $response_obj->id;
 *   $createdissue_key = $response_obj->key;
 *
 * @throws JiraRestException
 */
function jira_rest_issue_create($issue_data, $options = array()) {
  $options['permit_caching'] = FALSE; // never cache a post request

  $ch = jira_rest_get_curl_resource($options, '/issue/');
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($issue_data));
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-type: application/json'));

  return jira_rest_curl_execute($ch, $options);
}

/**
 * Updates/Edits a JIRA issue.
 *
 *
 * @param array $issue_data
 *   array containing data for updating/editing issuefields
 * @param string $issue_key
 *   the key string identifying issue to be updated
 * @param array $options
 *
 * @return object
 *   the issue updated
 *
 * @throws JiraRestException
 */
function jira_rest_issue_update($issue_key, $issue_data, $options = array()) {
  $options['permit_caching'] = FALSE; // never cache a post request

  $ch = jira_rest_get_curl_resource($options, '/issue/' . $issue_key);
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
  curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($issue_data));
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-type: application/json'));

  return jira_rest_curl_execute($ch, $options);
}

/**
 * Attaches files to jira issue.
 * A wrapper function for jira_rest_attachfiletoissue(), extending it's functionality.
 *
 * jira_rest_attachfiletoissue() requires to be in the folder where the file resides during execution otherwise
 * passing a full path e.g. /home/username/file will not upload the file properly.
 * The wrapper function resolves this issue by going inside the file's folder and then uploading it using only the filename.
 *
 * @param $files array
 *   An array containing one or more absolute file paths
 * @param $issue_key
 *   The jira issue key or id, to which file/files should be attached
 * @param array $options
 *     delete_files boolean If set to true will delete files from disk after successful upload
 *     force_delete boolean If set to true will delete files from disk after upload attempt not considering successful or not
 *
 * @return array|bool
 *   TRUE on successful upload of all files or an array consisting of the failed to upload files
 *
 * @throws JiraRestException
 */
function jira_rest_issue_attach_files_absolutepath($issue_key, $files, $options = array()) {
  $failed = array();

  foreach ($files as $filepath) {
    $response = jira_rest_issue_attach_file_absolutepath($issue_key, $filepath, $options);
    if (!$response) {
      $failed[] = $filepath;
    }
  }

  if ($failed) {
    return $failed;
  }
  else {
    return TRUE;
  }
}

/**
 * Attaches file to jira issue.
 * A wrapper function for jira_rest_attachfiletoissue(), extending it's functionality.
 *
 * jira_rest_attachfiletoissue() requires to be in the folder where the file resides during execution otherwise
 * passing a full path e.g. /home/username/file will not upload the file properly.
 * The wrapper function resolves this issue by going inside the file's folder and then uploading it using only the filename.
 *
 * @param string $filepath
 *   An absolute path to file
 * @param string $issue_key
 *   The jira issue key or id, to which file/files should be attached
 * @param array $options
 *
 * @return boolean
 *   On success TRUE, on failure FALSE
 *
 * @throws JiraRestException
 */
function jira_rest_issue_attach_file_absolutepath($issue_key, $filepath, $options = array()) {
  // default options
  $options += array(
    'delete_files' => FALSE,
    'force_delete' => FALSE,
  );

  if (file_exists($filepath)) {
    //Setting $force_delete implies also removing files when upload successful
    if ($options['force_delete'] == TRUE && $options['delete_files'] == FALSE) {
      $options['delete_files'] = TRUE;
    }

    //save current php path
    $olddir = getcwd();

    //chdir to folder, in which the pdf resides, otherwise file can't be uploaded using full path
    chdir(dirname($filepath));
    $filename = basename($filepath);

    $ret = FALSE;

    if (jira_rest_issue_attach_file($issue_key, $filename, $options)) {
      //delete files after successful upload
      if ($options['delete_files']) {
        if (!unlink($filepath)) {
          throw new JiraRestException(t("Couldn't remove file @pdf from disk on successful upload", array('@pdf' => $filepath)));
        }
      }

      $ret = TRUE;
    }
    else {
      //force delete files after failed upload
      if ($options['force_delete']) {
        if (!unlink($filepath)) {
          throw new JiraRestException(t("Couldn't remove file @pdf from disk on unsuccessful upload", array('@pdf' => $filepath)));
        }
      }
    }

    //go back to origin dir
    chdir($olddir);

    return $ret;
  }
  else {
    throw new JiraRestException("File doesn't exists: $filepath");
  }
}

/**
 * Attaches file to jira issue.
 *
 * @param $filename
 * @param $issue_key
 * @param array $options
 *
 * @return bool
 *
 * @throws JiraRestException
 */
function jira_rest_issue_attach_file($issue_key, $filename, $options = array()) {
  $options['permit_caching'] = FALSE; // never cache a post request

  $ch = jira_rest_get_curl_resource($options, '/issue/' . $issue_key . '/attachments');
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('X-Atlassian-Token: nocheck'));
  curl_setopt($ch, CURLOPT_POSTFIELDS, array('file' => "@$filename"));
  $response = jira_rest_curl_execute($ch, $options);
  if (gettype($response) == 'array' && isset($response[0]->filename) && $response[0]->filename == $filename) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Close issue with resolution 'fixed'.
 *
 * @param $issue_key
 * @param array $transition_data
 * @param array $options
 *
 * @return mixed
 */
function jira_rest_issue_close_fixed($issue_key, $transition_data = array(), $options = array()) {

  $transition_data += array(
    "update" => array('comment' => array(array('add' => array('body' => 'closed by drupal service')))),
    "fields" => array("resolution" => array('name' => 'Fixed')),
    "transition" => array('id' => variable_get('jira_rest_close_issue_transition_id', '2')),
  );

  return jira_rest_issue_transition($issue_key, $transition_data, $options);
}


/**
 * Resolve issue with resolution 'fixed'.
 *
 * @param $issue_key
 * @param array $transition_data
 * @param array $options
 *
 * @return mixed
 */
function jira_rest_issue_resolve_fixed($issue_key, $transition_data = array(), $options = array()) {

  $transition_data += array(
    "update" => array('comment' => array(array('add' => array('body' => 'resolved by drupal service')))),
    "fields" => array("resolution" => array('name' => 'Fixed')),
    "transition" => array('id' => variable_get('jira_rest_resolve_issue_transition_id', '5')),
  );

  return jira_rest_issue_transition($issue_key, $transition_data, $options);
}

/**
 * @param $issue_key
 * @param array $transition_data
 * @param array $options
 *
 * @return mixed
 *
 * @throws JiraRestException
 */
function jira_rest_issue_transition($issue_key, $transition_data = array(), $options = array()) {
  $options['permit_caching'] = FALSE; // never cache a post request

  if (empty($transition_data)) {
    return FALSE;
  }

  $ch = jira_rest_get_curl_resource($options, '/issue/' . $issue_key . '/transitions');
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($transition_data));
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-type: application/json'));

  return jira_rest_curl_execute($ch, $options);
}


/**
 * Returns all work log entries that belong to the given issue id.
 * If an id is specified in the options array, only the corespondent work log entry is returned.
 *
 * @param int $issue_key
 *   issue id (or key) for which the work log shall be returned
 * @param array $options (optional)
 *   overwrites default value of specified options
 *     id int return one work log entry with corresponding id
 * @see jira_rest_default_curl_options
 *
 * @return object
 *   if no work log entry id was provided, an object containing an array of all work log entries is returned
 *   else a work log entry object is returned
 *
 *   example for iterating over all work log entries of the issue:
 *   $worklog = jira_rest_get_worklog(12345);
 *   foreach($worklog->worklogs as $worklog_entry) {
 *     print $worklog_entry->timeSpent;
 *   }
 *
 *   some examples for getting information from a single work log entry:
 *   $created = $worklog_entry->created;
 *   $author_name = $worklog_entry->author->displayName;
 *
 * @throws JiraRestException
 */
function jira_rest_issue_worklog($issue_key, $options = array()) {
  // default options
  $options += array(
    'id' => -1,
  );

  $jira_query = '/issue/' . urlencode($issue_key) . '/worklog';

  if ($options['id'] != -1) {
    $jira_query .= '/' . (int) $options['id'];
  }

  $ch = jira_rest_get_curl_resource($options, $jira_query);
  return jira_rest_curl_execute($ch, $options);
}


/**
 * Returns all projects that are visible to the current Jira user.
 * If an id is specified in the options array, only the corespondent project data is returned.
 *
 * @param array $options (optional)
 *   overwrites default value of specified options
 *     id int return project with corresponding id
 * @see jira_rest_default_curl_options
 *
 * @return mixed
 *   if no project id was provided, an array containing all projects (object) is returned
 *   else a project object is returned (contains extended information compared to REST call without id)
 *
 *   some examples for getting information from a single project object:
 *   $project_key = $project->key;
 *   $project_name = $project->name;
 *
 * @throws JiraRestException
 */
function jira_rest_project_get($options = array()) {
  // default options
  $options += array(
    'id' => -1,
  );

  $jira_query = '/project';

  if ($options['id'] != -1) {
    $jira_query .= '/' . (int) $options['id'];
  }

  $ch = jira_rest_get_curl_resource($options, $jira_query);
  return jira_rest_curl_execute($ch, $options);
}


/**
 * Returns all status that are available in the specified jira ressource.
 *
 * @param array $options
 *   overwrites default value of specified options
 * @see jira_rest_default_curl_options
 *
 * @return array
 *   returns an array of status objects that exist in the specified jira ressource
 *
 *   an example how to iterate over the results:
 *
 *   $jira_status = jira_rest_get_status();
 *   foreach($jira_status as $status) {
 *     print $status->name;
 *   }
 *
 * @throws JiraRestException
 */
function jira_rest_status_get($options = array()) {
  $ch = jira_rest_get_curl_resource($options, '/status');
  return jira_rest_curl_execute($ch, $options);
}


/**
 * Adds a comment to the specified ticket.
 * The input can either be a string representing the comment's body or an associative array
 * containing further information (see jira REST API for further details).
 *
 * Example using associative array:
 * $comment = array(
 *   'body' => 'This is a comment.'
 *   'visibility' => array(
 *     'type' => 'role',
 *     'value' => 'Administrators',
 *   ),
 * );
 * jira_rest_create_comment($comment, 'ISSUE-421');
 *
 * Example using string:
 * $comment = 'This is a comment.';
 * jira_rest_create_comment($comment, 'ISSUE-421');
 *
 * @param string|array $comment_data
 *   An associative array containing the comment or a string with the comment's text.
 * @param string $issue_key
 *   Issue key or id that the comment will be added to.
 * @param array $options
 *   overwrites default value of specified options
 * @see jira_rest_default_curl_options
 *
 * @return mixed
 *  On success TRUE, on failure FALSE
 *
 * @throws JiraRestException
 */
function jira_rest_issue_create_comment($issue_key, $comment_data, $options = array()) {
  $options['permit_caching'] = FALSE; // never cache a post request

  // if comment_data is just a string, bring it to default array structure
  if (!is_array($comment_data)) {
    $comment_data = array(
      'body' => $comment_data,
    );
  }

  $ch = jira_rest_get_curl_resource($options, '/issue/' . $issue_key . '/comment');
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($comment_data));
  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-type: application/json'));

  return jira_rest_curl_execute($ch, $options);
}


/**
 * Retrieves the content of an attachment from a specified url using the jira credentials.
 *
 * An example to retrieve the attachment of an issue:
 *   $fullissue = jira_rest_getfullissue($issue->key);
 *   $attachment = reset($fullissue->fields->attachment);
 *   $attachment_url = $attachment->content;
 *   $content = jira_rest_download_attachment($attachment_url);
 *
 * @param string $attachment_url
 *   Full url of the attachment.
 * @param array $options
 *   overwrites default value of specified options
 * @see jira_rest_default_curl_options
 *
 * @return mixed
 *   returns false on failure or the result on success
 *
 * @throws JiraRestException
 */
function jira_rest_download_attachment($attachment_url, $options = array()) {

  // replace jira url with file url for this call
  $options['jira_url'] = $attachment_url;
  // never cache file download
  $options['json_decode'] = FALSE;
  $options['permit_caching'] = FALSE;

  $ch = jira_rest_get_curl_resource($options, '');

  return jira_rest_curl_execute($ch, $options);
}


/**
 * Returns all data associated to the given custom field option id.
 * @param int $id
 *   custom field option id
 * @param array $options
 *   overwrites default value of specified options
 * @see jira_rest_default_curl_options
 *
 * @return mixed
 *   returns an object containing the custom field option's value
 *
 *   an example to access the result
 *   $jira_cst_field = jira_rest_get_customFieldOption(10404);
 *   $custom_field_value = $jira_cst_field->value;
 *
 * @throws JiraRestException
 */
function jira_rest_custom_field_option_get($id, $options = array()) {
  $ch = jira_rest_get_curl_resource($options, '/customFieldOption/' . (int) $id);
  return jira_rest_curl_execute($ch, $options);
}


/**
 * Retrieves data from curl or a cached value (if enabled).
 * The drupal default cache bin is used for caching using the curl request url as key.
 *
 * You can use jira_rest_cache_lifetime to modify the caching behaviour:
 *   *  0 (or any non integer value) will disable the caching
 *   * -1 (or any negative integer value) will set the cache lifetime to CACHE_PERMANENT
 *   * any other value will set the minimum lifetime given in hours
 * Note that you can also override the cache_lifetime via the options array!
 *
 *
 * @param resource $ch The curl resource.
 * @param array $options
 *   overwrites default value of specified options
 *     permit_caching boolean (default true)
 *     cache_lifetime cache lifetime in hours (default set to variable jira_rest_cache_lifetime)
 *
 * @return mixed the result on success, false on failure
 */
function jira_rest_cache_curl_response($ch, $options = array()) {

  // default options
  $options += array(
    'permit_caching' => TRUE,
    'cache_lifetime' => variable_get('jira_rest_cache_lifetime', 0),
  );

  $cache_lifetime = (int) $options['cache_lifetime'];

  // if cache lifetime is set to 0 (disabled) execute curl and return result
  if (!$cache_lifetime || !$options['permit_caching']) {
    return curl_exec($ch);
  }

  // curl url is used as cache id
  $curl_info = curl_getinfo($ch);

  if (isset($curl_info['url'])) {
    // convert url into a hashed key
    $cache_id = 'jira_rest:' . md5($curl_info['url']);

    // check cache lifetime since DrupalDatabaseCache returns expired entries
    // https://www.drupal.org/node/534092#comment-9008035
    // https://api.drupal.org/comment/55003#comment-55003
    $cache = cache_get($cache_id);
    if ($cache && (REQUEST_TIME < $cache->expire)) {
      $curl_response = $cache->data;
    }
    else {
      $curl_response = curl_exec($ch);

      // lifetime is given in hours ($cache_lifetime is already an integer)
      $cache_lifetime = strtotime('+ ' . $cache_lifetime . ' hours');

      cache_set($cache_id, $curl_response, 'cache', $cache_lifetime);
    }
  }

  return $curl_response;
}