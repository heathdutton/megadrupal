<?php
// $Id
/**
 * @file
 * Periodically download and store roster information
 * for The World of Warcraft.
 */

/**
 * Implements hook_help()
 */
function wowarmory_help($path, $arg) {
	switch ($path) {
		case 'admin/help/wowarmory':
			return '<p>' . t("Parses and Displays guild and character information from the World of Warcraft armory.") . '</p>';
			break;
	case 'admin/help#wowarmory':
			return '<p>' . t('Configuration options include custom rank names, realm, and guild name. To set these go to the WoW Armory configuration page. Cron must intially be run after setting your guild and realm name to add your roster members. It is then updated every sequential cron run.') . '</p><p>' . t('You need to also configure the module permissions. On install only the site administrator can see the guild roster.') . '</p><p>' . t("Submit all issues to the module <a href='@projectpage'>project page</a> issue tracker on Drupal.org." , array('@projectpage' => url('http://www.drupal.org/project/wowarmory', $options = array('external' => TRUE))));
			break;
	}
}

/**
 * Implements hook_permission()
 */
function wowarmory_permission() {
  return array(
	'access guild roster' => array(
		'title' => t('Access the Guild Roster'),
		'description' => t('Give users the ability to see and access WoW Armory'),
		),
	);
}

/**
 * Admin settings form
 */
function wowarmory_admin_settings($form, &$form_state) {
  $form['settings_general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General settings'),
  );
  $form['settings_general']['wowarmory_realm'] = array(
    '#type' => 'textfield',
    '#title' => t('Realm Name'),
    '#default_value' => variable_get('wowarmory_realm', ''),
    '#size' => 32,
    '#maxlength' => 32,
    '#description' => t("The realm that your guild is on."),
    '#required' => TRUE,
  );
  $form['settings_general']['wowarmory_guild'] = array(
    '#type' => 'textfield',
    '#title' => t('Guild Name'),
    '#default_value' => variable_get('wowarmory_guild', ''),
    '#size' => 32,
    '#maxlength' => 32,
    '#description' => t("The name of your guild."),
    '#required' => TRUE,
  );
  $form['settings_general']['wowarmory_region'] = array(
    '#type' => 'select',
    '#title' => t('Region'),
    '#default_value' => variable_get('wowarmory_region', 'en'),
    '#options' => drupal_map_assoc(array('en', 'eu')),
    '#description' => t("The region of your realm."),
    '#required' => TRUE,
  );

  $form['options_general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General options'),
  );
  $form['options_general']['wowarmory_rostermax'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum Rows'),
    '#default_value' => variable_get('wowarmory_rostermax', 20),
    '#size' => 3,
    '#maxlength' => 2,
    '#description' => t("The maximum rows to return per page for the guild roster display."),
    '#required' => TRUE,
  );

  $form['guild_rank'] = array(
    '#type' => 'fieldset',
    '#title' => t('Guild Ranks'),
    '#description' => '<p>'. t("Guild ranks are downloaded from the armory as numbers. If you would like something other than numbers to be displayed, change the below fields.") .'</p>',
   );

  //there are 9 possible ranks to be shown. create 9 different fields.
  $form['guild_rank']['wowarmory_rank_0'] = array(
    '#type' => 'textfield',
    '#title' => t('The Guild Masters\' title'),
    '#default_value' => variable_get('wowarmory_rank_0', 'Guild Master'),
    '#size' => 30,
    '#maxlength' => 30,
  );

  for ($i = 1; $i <= 9; $i++) {
    $form['guild_rank']['wowarmory_rank_'. $i] = array(
      '#type' => 'textfield',
      '#title' => t('Rank '. $i .' title'),
      '#default_value' => variable_get('wowarmory_rank_'. $i , $i),
      '#size' => 30,
      '#maxlength' => 30,
    );
  }

  return system_settings_form($form);
}

/**
 * Implements hook_menu()
 */
function wowarmory_menu() {

  $items = array();

  $items['admin/config/system/wowarmory'] = array(
    'title' => 'WoW Armory',
    'description' => 'Configure the WoW Armory plugin',
    'page callback' => 'drupal_get_form',
	  'page arguments' => array('wowarmory_admin_settings'),
    'access arguments' => array('administer site configuration'),
   );
  $items['wowarmory'] = array(
    'title' => 'Guild Roster',
    'page callback' => 'wowarmory_page_roster',
    'access arguments' => array('access guild roster'),
  );

  return $items;
}

/**
 * Implements hook_cron()
 */
function wowarmory_cron() {
	wowarmory_update_roster();
}

/**
 * Show the guild roster
 */
function wowarmory_page_roster() {
  $imgpath = drupal_get_path('module', 'wowarmory'). '/images';
	
  $page_limitnum = variable_get('wowarmory_rostermax', 20);
  $region = variable_get('wowarmory_region', '');
  $realm = variable_get('wowarmory_realm', '');
  $guild = variable_get('wowarmory_guild', '');
  // Query to get the list of members, and some details about them
  $query = db_select('wowarmory_roster', 'w')->extend('TableSort')->extend('PagerDefault');
  // Make the header array
  $header = array(
  array('data' => t('Name'), 'field' => 'name'),
  array('data' => t('Level'), 'field' => 'level'),
  array('data' => t('Race'), 'field' => 'raceId'),
  array('data' => t('Class'), 'field' => 'classId'),
  array('data' => t('Guild Rank'), 'field' => 'rank', 'sort' => 'asc'),
  array('data' => t('Acheivement Points'), 'field' => 'achPoints'),
  );

  // Run the query with pagable results
  $result = $query->fields('w', array('name', 'level', 'raceId', 'classId', 'rank', 'genderId', 'achPoints'))->orderByHeader($header)->limit($page_limitnum)->execute();
	// Define rows array
	$rows = array();
  foreach ($result as $member) {
    $raceimg = "<img src='" . $imgpath . "/roster_icons/"  . $member->raceid . "-" . $member->genderid . ".gif' alt='" . $member->raceid . "' width='20' height='20' align='absmiddle' hspace='3' />";

    $classimg = "<img src='" . $imgpath . "/roster_icons/" . $member->classid . ".gif' alt='" . $member->classid . "' width='20' height='20' align='absmiddle' hspace='3' />";
		
		// Assign the class ID for styling output.
	$class = 'class-' . $member->classid;
	if($region == 'en') 
    $name = '<a href = "http://us.battle.net/wow/en/character/' . $realm . '/' . $member->name . '/simple" class="'.$class.'">' . $member->name . '</a>';
	if($region == 'eu') 
    $name = '<a href = "http://eu.battle.net/wow/en/character/' . $realm . '/' . $member->name . '/simple" class="'.$class.'">' . $member->name . '</a>';
    $rank = variable_get('wowarmory_rank_'. $member->rank, $member->rank);
    $rows[] = array($name, $member->level, $raceimg, $classimg, $rank, $member->achpoints);
  }


  // Output the table
  $output = theme('table', array('header' => $header, 'rows' => $rows, 'empty' => t('No characters found.')));
  $output .= theme('pager', array('pagelimit' => $page_limitnum));
  return $output;
}


/**
 * Query the Armory.
 */
function wowarmory_armory_request($type) {
  switch ($type) {
    case 'guild':
      $query = array(
        'r' => variable_get('wowarmory_realm', ''),
        'gn' => variable_get('wowarmory_guild', ''),
      );
      if (variable_get('wowarmory_region', 'en') == 'en') {
        $url = url('http://www.wowarmory.com/guild-info.xml', array('query' => $query));
      }
      else {
       $url = url('http://eu.wowarmory.com/guild-info.xml', array('query' => $query));
      }
      break;
    case 'character':
      break;
    case 'realm':
      break;
  }

  // The armory does not accept automated requests without a user agent set.
  $headers = array(
    'User-Agent' => 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2) Gecko/20070219 Firefox/2.0.0.2',
  );

  $request = drupal_http_request($url, array('headers' => $headers));

  if (!$request) {
    watchdog('wowarmory', 'Armory request failed.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  if ($request->code != 200) {
    watchdog('wowarmory', 'Armory request returned an error: %code - %message', array('%code' => $request->code, '%message' => $request->status_message), WATCHDOG_ERROR);
    return FALSE;
  }

  // Attempt at detecting maintenance mode. Working as of 3/23/2010
  if (strpos($request->data, "maintenance") == TRUE) {
    watchdog('wowarmory', 'Armory is in maintenance mode. No changes made.', array(), WATCHDOG_NOTICE);
    return FALSE;
  }

  return $request->data;
}

/**
 * Update the roster.
 */
function wowarmory_update_roster() {
  $xml = wowarmory_armory_request('guild');
  if (!$xml) {
    watchdog('wowarmory', 'The guild roster could not be updated.', array(), WATCHDOG_WARNING);
    return FALSE;
  }

  $current_chars = db_query("SELECT name, realm FROM {wowarmory_roster}")->fetchAllAssoc('name');

  $doc = new DOMDocument();
  $doc->loadXML($xml);
  $member_list = $doc->getElementsByTagName("character");

  foreach ($member_list as $toon) {
    $data = array(
    	'achPoints' => $toon->getAttribute("achPoints"),
      'classId' => $toon->getAttribute("classId"),
      'genderId'  => $toon->getAttribute("genderId"),
      'level'  => $toon->getAttribute("level"),
      'name'  => $toon->getAttribute("name"),
      'raceId'  => $toon->getAttribute("raceId"),
      'rank'  => $toon->getAttribute("rank"),
      'realm' => variable_get('wowarmory_realm', ''),
    );

    db_merge('wowarmory_roster')
      ->key(array('name' => $data['name'], 'realm' => $data['realm']))
      ->fields($data)
      ->execute();

    // As we filter through each player from wowarmory.com, remove them from our tracking array.
    unset($current_chars[$data['name']]);
  }

  // Clean up the players that were not seen on the roster page.
  foreach ($current_chars as $char) {
    db_delete('wowarmory_roster')
      ->condition('name', $char['name'])
      ->condition('realm', $char['realm'])
      ->execute();
    watchdog('wowarmory', ":name has been removed from the roster.");
  }

  watchdog('wowarmory', 'Armory updated successfully.', array(), WATCHDOG_NOTICE);
}
?>