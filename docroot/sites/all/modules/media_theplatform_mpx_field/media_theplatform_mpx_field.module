<?php

/**
 * @file
 * Implements the functionality required to sync the customized field data.
 */

/**
 * Implements hook_media_theplatform_mpx_update_video().
 */
function media_theplatform_mpx_field_media_theplatform_mpx_update_video($fid, $video) {

  if ($fid) {
    // Return when there is need to sync the MPX data;
    $fields = media_theplatform_mpx_field_get_syncable_fields();
    if (empty($fields)) {
      return;
    }

    $file = entity_load('file', array($fid));
    if ($file && is_array($file)) {
      $file_wrapper = entity_metadata_wrapper('file', reset($file));
      $override = module_invoke_all('media_thepaltform_mpx_field_update_video', $file_wrapper, $fields, $video);
      if ($override) {
        return;
      }

      $modified = FALSE;
      foreach ($fields as $field => $value) {
        // Switch by the field widget type.
        switch ($value['widget type']) {
          case 'text_textfield':
            if (empty($video[$field])) {
              $existing_field = $file_wrapper->$field->value();
              if (isset($existing_field)) {
                $file_wrapper->$field = '';
                $modified = TRUE;
              }
            }
            else {
              $file_wrapper->$field = $video[$field];
              $modified = TRUE;
            }
            break;
        }
      }
      if ($modified) {
        $file_wrapper->save();
      }
    }
  }
}

/**
 * Implements hook_media_theplatform_mpx_insert_video().
 */
function media_theplatform_mpx_field_media_theplatform_mpx_insert_video($fid, $video) {

  if ($fid) {
    // Return when there is need to sync the MPX data;
    $fields = media_theplatform_mpx_field_get_syncable_fields();
    if (empty($fields)) {
      return;
    }

    $file = entity_load('file', array($fid));
    if ($file && is_array($file)) {
      $file_wrapper = entity_metadata_wrapper('file', reset($file));

      $override = module_invoke_all('media_thepaltform_mpx_field_insert_video', $file_wrapper, $fields, $video);

      if ($override) {
        return;
      }

      $modified = FALSE;
      foreach ($fields as $field => $value) {
        switch ($value['widget type']) {
          case 'text_textfield':
            if (!empty($video[$field])) {
              $file_wrapper->$field = $video[$field];
              $modified = TRUE;
            }
            break;
        }
      }
      if ($modified) {
        $file_wrapper->save();
      }
    }
  }
}

/**
 * Implements hook_media_theplatform_mpx_media_import_item_alter().
 */
function media_theplatform_mpx_field_media_theplatform_mpx_media_import_item_alter(&$video_item, $video, $account) {
  $fids = media_theplatform_mpx_field_get_syncable_fields();
  if (!empty($fids)) {
    foreach ($fids as $key => $value) {
      foreach ($value['value'] as $mpx_field) {
        $mpx_field_value = _media_theplatform_mpx_get_media_item_data($mpx_field, $video);
        if (!empty($mpx_field_value)) {
          $video_item[$key] = $mpx_field_value;
        }
      }
    }
  }
}

/**
 * Get a list of fields that have their data sync with remote MPX.
 */
function media_theplatform_mpx_field_get_syncable_fields() {

  static $fids;
  if ($fids != NULL) {
    return $fids;
  }

  $fields = field_info_instances('file', 'video');
  $fids = array();
  foreach ($fields as $key => $field) {
    if (isset($field['settings']['mpx_field_name']) && $field['settings']['mpx_field_name'] != '') {
      $fids[$key] = array(
        'value' => explode(', ', $field['settings']['mpx_field_name']),
        'widget type' => $field['widget']['type'],
      );
    }
  }
  return $fids;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function media_theplatform_mpx_field_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  // Only apply to the video file entity, just return for other bundle.
  if ($form['#instance']['entity_type'] != 'file' || $form['#instance']['bundle'] != 'video') {
    return;
  }

  // We allowed this for all field and will provide the hook implementation
  // to handle all the different field.
  $form['instance']['settings']['mpx_field_name'] = array(
    '#type' => 'textfield',
    '#title' => 'Remote field name',
    '#description' => t('The metadata field name on the remote MPX platform. It needs to be exactly same as the one on the returned XML file(There may be a prefix). If there is no sync field from MPX, leave this field empty. If there are multiple source fields, separate them with ", ".'),
    '#default_value' => isset($form['#instance']['settings']['mpx_field_name']) ? $form['#instance']['settings']['mpx_field_name'] : NULL,
  );
}
