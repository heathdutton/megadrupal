<?php

/**
 * @file
 * Installs the tables required by Commerce payfirma.
 */

/**
 * Implements hook_requirements().
 */
function commerce_payfirma_requirements($phase) {
  $t = get_t();
  global $is_https;
  $requirements = array();
  switch ($phase) {
    case 'runtime':
      if (!$is_https) {
        $requirements['payfirma_ssl'] = array(
          'title' => $t('SSL Installation'),
          'description' => $t('SSL must be installed on your server to use Payfirma Gateway.'),
          'value' => 'Test Mode Only',
          'severity' => REQUIREMENT_ERROR,
        );
      }
      if (!function_exists('curl_version')) {
        $requirements['payfirma_curl'] = array(
          'title' => $t('cURL'),
          'description' => $t('cURL is required to use the Payfirma payment gateway.  Please enable it on your server.'),
          'value' => 'cURL Disabled',
          'severity' => REQUIREMENT_ERROR,
        );
      }
  }
  return $requirements;
}

/**
 * Implements hook_schema().
 */
function commerce_payfirma_schema() {
  $schema = array();

  $schema['commerce_payfirma_response'] = array(
    'description' => 'Stores processed responses.',
    'fields' => array(
      'response_id' => array(
        'description' => 'Serial numeric ID of the response in the local database.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'transaction_id' => array(
        'description' => 'The payfirma transaction ID.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'type' => array(
        'description' => 'The payfirma transaction type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'email' => array(
        'description' => 'The e-mail of the payer.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'order_id' => array(
        'description' => 'The order ID the payment belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'amount' => array(
        'description' => 'The gross payment amount.',
        'type' => 'numeric',
        'size' => 'normal',
        'precision' => 10,
        'scale' => 2,
        'not null' => TRUE,
        'default' => 0,
      ),
      'currency' => array(
        'description' => 'The currency code of the payment.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'result' => array(
        'description' => 'The status of the payment at payfirma.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the response was received.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the response was last updated.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'test_response' => array(
        'description' => 'Boolean indicating whether or not this was a test response sent by the Sandbox.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('response_id'),
    'foreign keys' => array(
      'order_id' => array(
        'table' => 'commerce_order',
        'columns' => array('order_id' => 'order_id'),
      ),
      'transaction_id' => array(
        'table' => 'commerce_payment_transaction',
        'columns' => array('remote_id' => 'remote_id'),
      ),
    ),
    'indexes' => array(
      'transaction_id' => array('transaction_id'),
      'order_id' => array('order_id'),
    ),
  );

  return $schema;
}
