<?php

/**
 * @file
 * Implements payfirma payment services for use with Drupal Commerce.
 * Commerce PayPal and Authorize.net modules were referred to in the
 * development of this module.
 */

/**
 * Implements hook_menu().
 */
function commerce_payfirma_menu() {
  $items = array();
  // Define an always accessible path to receive responses.
  $items['commerce_payfirma/response'] = array(
    'page callback' => 'commerce_payfirma_process_response',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  // Process handler.
  $items['commerce_payfirma/handler'] = array(
    'page callback' => 'commerce_payfirma_handler',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_payfirma_commerce_payment_method_info() {
  $payment_methods = array();
  $link = l(t('(Payfirma)'), 'http://payfirma.com', array('attributes' => array('target' => '_blank', 'title' => 'Payfirma.com')));
  $payment_methods['payfirma'] = array(
    'base' => 'commerce_payfirma',
    'title' => t('Payfirma - Credit Card'),
    'short_title' => t('Payfirma'),
    'display_title' => t('Credit Card !link', array('!link' => $link)),
    'description' => t('Payfirma'),
  );
  return $payment_methods;
}

/**
 * Returns the default settings for the payfirma payment method.
 */
function commerce_payfirma_default_settings() {
  return array(
    'merchant_id' => '',
    'key' => '',
    'publicKey' => '',
    'code' => TRUE,
    'function' => 'sale',
    'log' => FALSE,
    'test_mode' => FALSE,
    'force_js' => TRUE,
    'send_receipt' => FALSE,
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_payfirma_settings_form($settings = NULL) {
  global $is_https;
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $settings += commerce_payfirma_default_settings();
  $form = array();
  if (!function_exists('curl_version')) {
    $curl_message = t('cURL is not enabled on your server.  cURL is required to use the Payfirma payment gateway.  Please enable it on your server.');
    $form['curl'] = array(
      '#markup' => '<div class = "message error">' . $curl_message . '</div>',
    );
    drupal_set_message($curl_message, 'error');
  }
  else {
    $curl_message = t('cURL is enabled.');
    $form['curl'] = array(
      '#markup' => '<div class = "messages status">' . $curl_message . '</div>',
    );
    drupal_set_message($curl_message);
  }
  if (!$is_https) {
    $ssl_message = t('SSL is not enabled on this page. Test Mode Locked.');
    $form['ssl'] = array(
      '#markup' => "<div class='messages error'>$ssl_message</div>",
    );
    drupal_set_message($ssl_message, 'error');
  }
  else {
    $ssl_message = t('SSL is enabled.');
    $form['ssl'] = array(
      '#markup' => "<div class='messages status'>$ssl_message</div>",
    );
    drupal_set_message($ssl_message);
  }
  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#default_value' => $settings['merchant_id'],
  );
  $form['key'] = array(
    '#type' => 'textfield',
    '#title' => t('API key'),
    '#default_value' => $settings['key'],
  );
  $form['publicKey'] = array(
    '#type' => 'textarea',
    '#title' => t('Public Key'),
    '#default_value' => $settings['publicKey'],
  );
  $form['code'] = array(
    '#type' => 'checkbox',
    '#title' => t('Require the card security code (i.e. CVV) to process credit card transactions.'),
    '#description' => t('This should match the similar setting in your Payfirma account.'),
    '#default_value' => $settings['code'],
  );
  $form['send_receipt'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send Payfirma Receipt'),
    '#description' => t("Check to have Payfirma send a transaction receipt to the customer.  Your site's Commerce system is usually configured to send an order receipt already."),
    '#default_value' => $settings['send_receipt'],
  );
  $form['function'] = array(
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('The default will be used to process transactions during checkout.'),
    '#options' => array(
      'sale' => t('Sale'),
    ),
    '#default_value' => $settings['function'],
  );
  $form['force_js'] = array(
    '#type' => 'checkbox',
    '#title' => 'Force Javascript Tokenization',
    '#description' => t('Tokenization adds additional security to the handling of credit card data and makes PCI compliance easier.  Most users will have Javascript enabled already.  This switch will force them to enable it in order to checkout with Payfirma.'),
    '#default_value' => $settings['force_js'],
  );
  $form['log'] = array(
    '#type' => 'checkbox',
    '#title' => t('Debug Log'),
    '#description' => t('Check to enable watchdog logging of requests and responses.'),
    '#default_value' => $settings['log'],
  );
  $form['test_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Test Mode'),
    '#default_value' => $settings['test_mode'],
    '#description' => t('When enabled, real transactions cannot be processed.  REMEMBER to disable Test Mode on a live site.'),
  );
  if (!$is_https) {
    $form['test_mode']['#value'] = TRUE;
    $form['test_mode']['#default_value'] = TRUE;
    $form['test_mode']['#description'] = t('SSL is required to use Payfirma without Test Mode. Enable SSL on your server to unlock Test Mode.');
    $form['test_mode']['#disabled'] = TRUE;
  }
  if ($settings['test_mode']) {
    $test_message = t('Test Mode ENABLED.  Remember to DISABLE on a live site.');
    $form['test_mode_reminder'] = array(
      '#markup' => "<div class='messages warning'>$test_message</div>",
    );
    drupal_set_message($test_message, 'warning');
  }
  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_payfirma_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $payfirma_settings = array(
    'publicKey' => $payment_method['settings']['publicKey'],
    'func' => $payment_method['settings']['function'],
    'checkout_page' => $checkout_pane['page'],
  );
  $path = drupal_get_path('module', 'commerce_payfirma');
  // Prepare the fields to include on the credit card form.
  $fields = array();
  $fields['#attached']['js']['https://www.payfirma.com/media/payfirma.minified.js'] = array('type' => 'external');
  $fields['#attached']['js'][] = array(
    'data' => array('commerce_payfirma' => $payfirma_settings),
    'type' => 'setting',
  );
  $fields['#attached']['js'][] = $path . '/commerce_payfirma.js';
  // Include the card security code field if specified.
  if ($payment_method['settings']['code']) {
    $fields['code'] = '';
  }
  return commerce_payfirma_credit_card_form($order, $fields, array());
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_payfirma_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // WITH JS TOKENIZATION THIS WILL ACTUALLY BE BYPASSED BY JS IF ENABLED.
  if ($payment_method['settings']['force_js']) {
    drupal_set_message(t('Javascript must be enabled in your browser for enhanced security.  Please check your browser settings.'), 'error');
    return FALSE;
  }
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );
  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_payfirma_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // WITH JS TOKENIZATION THIS WILL ACTUALLY BE BYPASSED BY JS IF ENABLED.
  commerce_payfirma_handler($pane_values, $payment_method);
  // Use drupal_goto not form #redirect because we bypass standard checkout.
  drupal_goto("checkout/$order->order_id");
}

/**
 * Processes an incoming push or handler.
 *
 * http://developers.payfirma.com/documentation#59
 *
 * @param int $order_id
 *   The order_id passed from handler.
 * @param array $payment_method
 *   The payment method passed from handler.
 * @param array $response
 *   Incoming response from the handler.
 */
function commerce_payfirma_process_response($order_id = NULL, $payment_method = array(), $response = NULL) {
  // If no response passed, load from push.
  if (!is_array($response)) {
    // Use php://input rather than $_POST to access JSON response.
    $response = json_decode(file_get_contents('php://input'));
  }
  // Exit now if the $response was empty.
  if (empty($response)) {
    watchdog('commerce_payfirma', 'Response URL accessed with no response data submitted.', array(), WATCHDOG_WARNING);
    return FALSE;
  }
  if (empty($payment_method)) {
    $payment_method = commerce_payment_method_instance_load('payfirma|commerce_payment_payfirma');
  }
  if (!$order_id) {
    $order_id = $response['order_id'];
  }
  // Exit if no order is loaded.
  $order = commerce_order_load($order_id);
  if (!$order) {
    watchdog('commerce_payfirma', 'Failed to load a valid order form response.', array(), WATCHDOG_WARNING);
    return FALSE;
  }
  // Exit when we don't get a payment status we recognize.
  if (!empty($response['result'])) {
    if (!in_array($response['result'], array('declined', 'approved'))) {
      if ($response['error']) {
        drupal_set_message(t('ERROR: @error'), array('@error' => $response['error']), 'error');
      }
      else {
        drupal_set_message(t('An unknown error occurred.'), 'error');
      }
      return FALSE;
    }
  }
  if ($payment_method['settings']['log']) {
    watchdog('commerce_payfirma', 'Attempting to process response @transaction_id. !response_log',
      array(
        '@transaction_id' => $response['transaction_id'],
        '!response_log' => '<pre>' . print_r($response, TRUE) . '</pre>',
      ), WATCHDOG_NOTICE);
  }
  // Exit if the response has already been processed. Push vs direct response.
  $prior_response = commerce_payfirma_response_load($response['transaction_id']);
  if (!empty($prior_response)) {
    if ($prior_response['payment_status'] == $response['payment_status']) {
      if ($payment_method['settings']['log']) {
        watchdog('commerce_payfirma', 'Attempted to process an response that has already been processed with transaction ID !transaction_id.', array('!transaction_id' => $_POST), WATCHDOG_NOTICE);
      }
      return FALSE;
    }
  }
  if ($order) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $transaction = commerce_payment_transaction_new('payfirma', $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
    $transaction->remote_id = $response['transaction_id'];
    $transaction->amount = commerce_currency_decimal_to_amount($response['amount'], $transaction->currency_code);
    $transaction->currency_code = $order_wrapper->commerce_order_total->currency_code->value();
    $transaction->payload[REQUEST_TIME] = $response;
    $transaction->remote_status = $response['result'];
    // Indicate in the transaction log whether transaction was in Test Mode.
    $test_mode = $payment_method['settings']['test_mode'] ? 'TEST' : '';
    switch ($response['result']) {
      case 'declined':
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        $transaction->message = t("The !test payment has been declined.", array('!test' => $test_mode));
        $checkout_page = 'review';
        break;

      case 'approved':
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $transaction->message = t('The !test payment has been approved.', array('!test' => $test_mode));
        $checkout_page = 'payment';
        break;

      default:
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        $transaction->message = t('The !test payment has been has failed. Invalid result.', array('!test' => $test_mode));
        $checkout_page = 'review';
        break;
    }
    $message = isset($response['message']) ? $response['message'] : '';
    drupal_set_message(t('Transaction message: @type : @result : @message', array(
      '@type' => strtoupper($response['type']),
      '@result' => strtoupper($response['result']),
      '@message' => $message,
    )), 'warning');
    commerce_payment_transaction_save($transaction);
    $order_status = commerce_order_status_load($order->status);
    $order_status['checkout_page'] = $checkout_page ? $checkout_page : $order_status['checkout_page'];
    if ($order_status['state'] == 'checkout' && $order_status['checkout_page'] == 'payment') {
      $payment_page = commerce_checkout_page_load($order_status['checkout_page']);
      $next_page = $payment_page['next_page'];
      $order = commerce_order_status_update($order, 'checkout_' . $next_page);
      if ($next_page == 'complete') {
        commerce_checkout_complete($order);
      }
    }
    if ($payment_method['settings']['log']) {
      $response['transaction_id'] = $transaction->transaction_id;
      watchdog('commerce_payfirma', 'Response processed for Order @order_number with ID @transaction_id.', array('@transaction_id' => $response['transaction_id'], '@order_number' => $order->order_number), WATCHDOG_INFO);
    }
  }
  commerce_payfirma_response_save($response);
}

/**
 * Loads a stored response by ID.
 *
 * @param int $id
 *   The ID of the response to load.
 * @param string $type
 *   The type of ID you've specified, either the serial numeric response_id
 *   or the actual payfirma transaction_id. Defaults to transaction_id.
 *
 * @return array
 *   The saved response information.
 */
function commerce_payfirma_response_load($id, $type = 'transaction_id') {
  return db_select('commerce_payfirma_response', 'cpp')
    ->fields('cpp')
    ->condition('cpp.' . $type, $id)
    ->execute()
    ->fetchAssoc();
}

/**
 * Saves an response with some meta data related to local processing.
 *
 * @param array $response
 *   A response array with additional parameters for the order_id and Commerce
 *     Payment transaction_id associated with the response.
 *
 * @return bool
 *   The operation performed by drupal_write_record() on save;
 *   since the response is received by reference, it will also
 *   contain the serial numeric response_id used locally.
 */
function commerce_payfirma_response_save(&$response) {
  if (!empty($response['response_id']) && commerce_payfirma_response_load($response['transaction_id'])) {
    $response['changed'] = REQUEST_TIME;
    return drupal_write_record('commerce_payfirma_response', $response, 'response_id');
  }
  else {
    $response['created'] = REQUEST_TIME;
    $response['changed'] = REQUEST_TIME;
    return drupal_write_record('commerce_payfirma_response', $response);
  }
}

/**
 * Deletes a stored response by ID.
 *
 * @param string $id
 *   The ID of the response to delete.
 * @param string $type
 *   The type of ID you've specified, either the
 *   serial numeric response_id or the actual payfirma transaction_id.
 */
function commerce_payfirma_response_delete($id, $type = 'transaction_id') {
  db_delete('commerce_payfirma_response')
    ->condition($type, $id)
    ->execute();
}

/**
 * Submits order info to Payfirma via cURL. Forwards response for processing.
 *
 * Payfirma API Documentation http://developers.payfirma.com/documentation.
 *
 * @param array $pane_values
 *   Submitted payment pane values if JS Disabled is allowed.
 * @param array $payment_method
 *   The payment method instance object used to charge this payment.
 */
function commerce_payfirma_handler($pane_values = array(), $payment_method = array()) {
  if (empty($pane_values)) {
    $pane_values = $_REQUEST;
  }
  // Exit now if no order ID.
  if (empty($pane_values['order_id'])) {
    watchdog('commerce_payfirma', 'Handler did not receive an order ID', array(), WATCHDOG_WARNING);
    return FALSE;
  }
  if (empty($payment_method)) {
    $payment_method = commerce_payment_method_instance_load('payfirma|commerce_payment_payfirma');
  }
  if ($payment_method['settings']['log']) {
    watchdog('commerce_payfirma', 'Payfirma Handler !handler_log', array('!handler_log' => '<pre>' . print_r($pane_values, TRUE) . '</pre>'), WATCHDOG_NOTICE);
  }
  // cURL. See Payfirma API docs: http://developers.payfirma.com/documentation.
  $ch = curl_init();
  $function = $payment_method['settings']['function'];
  curl_setopt($ch, CURLOPT_URL, "https://ecom.payfirma.com/$function");
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_POST, TRUE);
  if (isset($pane_values['Drupal_visitor_commerce_currency'])) {
    switch ($pane_values['Drupal_visitor_commerce_currency']) {
      case 'USD':
        $user_currency = 'US$';
        break;

      default:
        $user_currency = 'CA$';
        break;
    }
  }
  else {
    $user_currency = 'CA$';
  }
  $data = array(
    'merchant_id' => $payment_method['settings']['merchant_id'],
    'key' => $payment_method['settings']['key'],
    'currency' => $user_currency,
    'do_not_store' => 'true',
  );
  if (isset($pane_values['token'])) {
    $data['token'] = $pane_values['token'];
  }
  else {
    $data['card_number'] = $pane_values['credit_card']['number'];
    $data['card_expiry_month'] = $pane_values['credit_card']['exp_month'];
    $data['card_expiry_year'] = $pane_values['credit_card']['exp_year'];
    $data['cvv2'] = $pane_values['credit_card']['code'];
  }
  // Any other necessary fields.
  $keys = array(
    'amount',
    'email',
    'first_name',
    'last_name',
    'address1',
    'address2',
    'city',
    'province',
    'country',
    'postal_code',
    'order_id',
    'invoice_id',
  );
  foreach ($keys as $k) {
    $data[$k] = $pane_values[$k];
  }
  if ($payment_method['settings']['test_mode']) {
    $data['test_mode'] = 'true';
  }
  if ($payment_method['settings']['send_receipt']) {
    $data['send_receipt'] = 'true';
  }
  else {
    $data['send_receipt'] = 'false';
  }
  curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
  $response = curl_exec($ch);
  curl_close($ch);
  if ($payment_method['settings']['log']) {
    $data['card_number'] = !empty($data['card_number']) ? "***" . substr($data['card_number'], -4, 4) : NULL;
    $data['cvv2'] = !empty($data['cvv2']) ? '***' : 'none';
    watchdog('commerce_payfirma', 'Payfirma Data !handler_log', array('!handler_log' => '<pre>' . print_r($data, TRUE) . '</pre>'), WATCHDOG_NOTICE);
  }
  if ($payment_method['settings']['log']) {
    watchdog('commerce_payfirma', 'Payfirma Handler Response !handler_log', array('!handler_log' => '<pre>' . print_r($response, TRUE) . '</pre>'), WATCHDOG_NOTICE);
  }
  commerce_payfirma_process_response($pane_values['order_id'], $payment_method, json_decode($response, TRUE));
  // Print response for js. http://developers.payfirma.com/documentation#51
  print $response;
}

/**
 * Define credit card form.
 */
function commerce_payfirma_credit_card_form($order, $fields = array(), $default = array()) {
  $form['#attached'] = $fields['#attached'];
  // Merge default values into the default array.
  $default += array(
    'number' => '',
    'start_month' => '',
    'start_year' => format_date(REQUEST_TIME, 'custom', 'Y') - 5,
    'exp_month' => format_date(REQUEST_TIME, 'custom', 'm'),
    'exp_year' => format_date(REQUEST_TIME, 'custom', 'Y'),
    'code' => '',
  );
  $current_year_2 = format_date(REQUEST_TIME, 'custom', 'y');
  $current_year_4 = format_date(REQUEST_TIME, 'custom', 'Y');
  $payment_method = commerce_payment_method_instance_load('payfirma|commerce_payment_payfirma');
  if ($payment_method['settings']['test_mode']) {
    $site_mail = variable_get('site_mail', '');
    $form['test_mode'] = array(
      '#markup' => '<div class = "messages warning">' . t('Payfirma is in Test Mode.  No money will be collected.  !mail_admin',
        array(
          '!mail_admin' => l(t('Report to Administrator'), "mailto:$site_mail"),
        )
      ) . '</div>',
    );
  }
  $form['credit_card'] = array(
    '#tree' => TRUE,
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'commerce_payment') . '/theme/commerce_payment.theme.css'),
    ),
  );
  $form['credit_card']['number'] = array(
    '#type' => 'textfield',
    '#title' => t('Card number'),
    '#default_value' => $default['number'],
    '#attributes' => array('autocomplete' => 'off'),
    '#required' => TRUE,
    '#maxlength' => 19,
    '#size' => 20,
  );
  $form['credit_card']['exp_month'] = array(
    '#type' => 'select',
    '#title' => t('Expiration'),
    '#options' => drupal_map_assoc(array_keys(commerce_months())),
    '#default_value' => strlen($default['exp_month']) == 1 ? '0' . $default['exp_month'] : $default['exp_month'],
    '#required' => TRUE,
    '#prefix' => '<div class="commerce-credit-card-expiration">',
    '#suffix' => '<span class="commerce-month-year-divider">/</span>',
  );
  // Build a year select list that uses a 4 digit key with a 2 digit value.
  $options = array();
  for ($i = 0; $i < 20; $i++) {
    $options[$current_year_4 + $i] = str_pad($current_year_2 + $i, 2, '0', STR_PAD_LEFT);
  }
  $form['credit_card']['exp_year'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $default['exp_year'],
    '#suffix' => '</div>',
  );
  // Add a field for the security code if specified.
  if (isset($fields['code'])) {
    $form['credit_card']['code'] = array(
      '#type' => 'textfield',
      '#title' => t('Security code'),
      '#default_value' => $default['code'],
      '#attributes' => array('autocomplete' => 'off'),
      '#required' => TRUE,
      '#maxlength' => 4,
      '#size' => 4,
    );
  }
  // Add hidden payfirma fields for js to grab for tokenization.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $profile = commerce_customer_profile_load($order_wrapper->commerce_customer_billing->profile_id->value());
  $profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $profile);
  if ($order) {
    $amount = commerce_currency_amount_to_decimal($order_wrapper->commerce_order_total->amount->value(), $order_wrapper->commerce_order_total->currency_code->value());
    $form['amount'] = array(
      '#type' => 'hidden',
      '#value' => number_format($amount, 2, '.', ''),
    );
    $form['email'] = array(
      '#type' => 'hidden',
      '#value' => $order_wrapper->mail->value(),
    );
    $form['first_name'] = array(
      '#type' => 'hidden',
      '#value' => $profile_wrapper->commerce_customer_address->first_name->value(),
    );
    $form['last_name'] = array(
      '#type' => 'hidden',
      '#value' => $profile_wrapper->commerce_customer_address->last_name->value(),
    );
    $form['address1'] = array(
      '#type' => 'hidden',
      '#value' => $profile_wrapper->commerce_customer_address->thoroughfare->value(),
    );
    $form['address2'] = array(
      '#type' => 'hidden',
      '#value' => $profile_wrapper->commerce_customer_address->premise->value(),
    );
    $form['city'] = array(
      '#type' => 'hidden',
      '#value' => $profile_wrapper->commerce_customer_address->locality->value(),
    );
    $form['province'] = array(
      '#type' => 'hidden',
      '#value' => $profile_wrapper->commerce_customer_address->administrative_area->value(),
    );
    $form['country'] = array(
      '#type' => 'hidden',
      '#value' => $profile_wrapper->commerce_customer_address->country->value(),
    );
    $form['postal_code'] = array(
      '#type' => 'hidden',
      '#value' => $profile_wrapper->commerce_customer_address->postal_code->value(),
    );
    $form['order_id'] = array(
      '#type' => 'hidden',
      '#value' => $order_wrapper->order_id->value(),
    );
    $form['invoice_id'] = array(
      '#type' => 'hidden',
      '#value' => $order_wrapper->order_number->value() . '-' . REQUEST_TIME,
    );
    $form['currency'] = array(
      '#type' => 'hidden',
      '#value' => $order_wrapper->commerce_order_total->currency_code->value(),
    );
  }
  return $form;
}
