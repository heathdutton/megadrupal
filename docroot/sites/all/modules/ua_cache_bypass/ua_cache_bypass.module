<?php

/**
 * @file
 * Bypass Drupal Core page caching based on specific user-agent strings.
 */


/**
 * Implements hook_boot().
 */
function ua_cache_bypass_boot() {
  // Check if user is annonymous, caching is enabled, and user-agent matches.
  $agents = variable_get('ua_cache_bypass_crawler_names', array('MyUserAgent/1.0'));
  $cache_enabled = variable_get('cache', 1);
  global $user;

  if ($user->uid == 0 && $cache_enabled && in_array($_SERVER['HTTP_USER_AGENT'], $agents)) {
    header('X-Drupal-Cache: MISS');
    ob_start();

    // Continue the bootstrap process.
    drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);

    // Log the bypass if appropriate.
    ua_cache_bypass_log_bypass();

    // Execute the page callback and exit.
    menu_execute_active_handler();
    exit;
  }
}


/**
 * Implements hook_help().
 */
function ua_cache_bypass_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ua_cache_bypass':
      return file_get_contents(dirname(__FILE__) . "/README.txt");
  }
}


/**
 * Implements hook_permission().
 */
function ua_cache_bypass_permission() {
  return array(
    'administer ua cache bypass' => array(
      'title' => 'Administer User-Agent Cache Bypass',
      'description' => 'Allow users to configure the User-Agent Cache Bypass module.',
    ),
  );
}


/**
 * Implements hook_menu().
 */
function ua_cache_bypass_menu() {
  $items = array();
  $items['admin/config/development/ua_cache_bypass'] = array(
    'title' => 'User-Agent Cache Bypass',
    'description' => "Define user-agents that always bypass Drupal's page cache.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ua_cache_bypass_settings'),
    'access arguments' => array('administer ua cache bypass'),
    'file' => 'ua_cache_bypass.admin.inc',
  );

  return $items;
}


/**
 * Helper function to log occurences.
 *
 * @return
 *   TRUE if bypass was logged, otherwise FALSE.
 */
function ua_cache_bypass_log_bypass() {
  // Get some variables.
  $time = time();
  $last_record_time = variable_get('ua_cache_bypass_last_log', time());
  $log_interval = variable_get('ua_cache_bypass_log_interval', 86400);

  // If appropriate, log via watchdog.
  if ($log_interval && $time - $last_record_time >= $log_interval) {
    // Log to watchdog.
    watchdog('cache bypass', 'Page cache was bypassed via user-agent string: %ua', array('%ua' => $_SERVER['HTTP_USER_AGENT']), WATCHDOG_NOTICE);

    // Reset the last poll time to now.
    variable_set('ua_cache_bypass_last_log', $time);

    return TRUE;
  }

  return FALSE;
}
