<?php

/**
 * @file
 * Test case for menu list children.
 */

define('MENU_LISTCHILDREN_MENU_NAME', 'test');
define('MENU_LISTCHILDREN_NB_ITEM', 2);

/**
 * Test the module functionality.
 */
class MenuListchildrenTestCase extends DrupalWebTestCase {

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Menu List Children',
      'group' => 'Menu',
      'description' => 'Test Menu List Children functionality',
    );
  }

  /**
   * Implementation of setUp().
   */
  public function setUp() {

    global $base_path;

    $this->base_path = $base_path;

    debug($this->base_path, 'base_path');

    // Call setUp and enable current module. All dependant modules
    // are enabled automatically.
    parent::setUp('menu_listchildren');

    // To be used in HTML or URL outputs.
    $this->hyphen_menu = str_replace('_', '-', MENU_LISTCHILDREN_MENU_NAME);

    // Setup admin user.
    $this->admin_user = $this->drupalCreateUser(array('bypass node access',
      'administer nodes', 'administer content types', 'administer blocks',
      'access administration pages', 'administer menu'));

    // Remove to anonymous user the permission to view nodes.
    user_role_revoke_permissions(1, array('access content'));

    // Login first as admin.
    $this->drupalLogin($this->admin_user);

    // Create custom menu.
    $this->menu = $this->createMenu(MENU_LISTCHILDREN_MENU_NAME);

    // Create the top level link.
    $this->parent_item = $this->createMenuLink($this->menu['menu_name'], '<children>');

    // Add nodes to use as links for menu links.
    for ($i = 0; $i < MENU_LISTCHILDREN_NB_ITEM; $i++) {

      // Create a node.
      $this->node[$i] = $this->drupalCreateNode(array('type' => 'article'));

      // Create a link pointing to the node.
      $this->child_item[$i] = $this->createMenuLink($this->menu['menu_name'], 'node/' . $this->node[$i]->nid, $this->parent_item['mlid']);
    }

    // Create a block.
    $block['title'] = $this->menu['title'];
    $block['module'] = 'menu';
    $block['delta'] = $this->menu['menu_name'];

    // To be used in HTML or URL.
    $this->block_id = 'block-menu-' . $this->hyphen_menu;

    // Show the block on sidebar.
    $this->moveBlockToRegion($block, 'sidebar_first');
  }

  /**
   * Test all functionality except localization.
   */
  public function testMenuListChildrenAdmin() {

    // Get home page.
    $this->drupalGet('node');

    // Check menu title.
    $this->assertFieldByXPath('//div[@id="' . $this->block_id . '"]/h2', $this->menu['title'], 'Menu title OK.');

    // Check link to page listing link.
    $this->assertFieldByXPath('//div[@id="' . $this->block_id . '"]/div/ul/li/a[@href="' . $this->base_path . 'menulistchildren/' . $this->parent_item['mlid'] . '"]', $this->parent_item['title'], 'Parent link OK.');

    // Get page listing links.
    $this->drupalGet('menulistchildren/' . $this->parent_item['mlid']);

    // Doesn't work as Drupal add a bunch of space before and after the title.
    // So we must trim it.
    $page_titles = $this->xpath('//h1[@id="page-title"]');

    $read_title = trim((string) $page_titles[0]);

    // Compare title.
    $this->assertEqual($this->parent_item['title'], $read_title, 'Page title OK.');

    // Add nodes to use as links for menu links.
    for ($i = 0; $i < MENU_LISTCHILDREN_NB_ITEM; $i++) {

      // Check link to node.
      $this->assertFieldByXPath('//dl[contains(@class, "menu-list-children")]/dt[@class="menu-list-children-title"]/a[@href="' . $this->base_path . 'node/' . $this->node[$i]->nid . '"]', $this->child_item[$i]['title'], 'Link title OK.');

      // Check description.
      $this->assertFieldByXPath('//dl[contains(@class, "menu-list-children")]/dd[@class="menu-list-children-description"]', $this->child_item[$i]['options']['attributes']['title'], 'Link description OK.');
    }

    menu_link_delete($this->child_item[MENU_LISTCHILDREN_NB_ITEM - 1]['mlid']);

    // Get page listing links.
    $this->drupalGet('menulistchildren/' . $this->parent_item['mlid']);

    $page_titles = $this->xpath('//h1[@id="page-title"]');

    $read_title = trim((string) $page_titles[0]);

    // Compare title.
    $this->assertEqual($this->parent_item['title'], $read_title, 'Page title after deletion OK.');

    // Check link to page listing link.
    $this->assertFieldByXPath('//div[@id="' . $this->block_id . '"]/div/ul/li/a[@href="' . $this->base_path . 'menulistchildren/' . $this->parent_item['mlid'] . '"]', $this->parent_item['title'], 'Parent link OK.');

    // Add nodes to use as links for menu links.
    for ($i = 0; $i < MENU_LISTCHILDREN_NB_ITEM - 1; $i++) {

      // Check link to node.
      $this->assertFieldByXPath('//dl[contains(@class, "menu-list-children")]/dt[@class="menu-list-children-title"]/a[@href="' . $this->base_path . 'node/' . $this->node[$i]->nid . '"]', $this->child_item[$i]['title'], 'Remaining link title OK.');

      // Check description.
      $this->assertFieldByXPath('//dl[contains(@class, "menu-list-children")]/dd[@class="menu-list-children-description"]', $this->child_item[$i]['options']['attributes']['title'], 'Remaining link description OK.');
    }

    // Check no link to node.
    $this->assertNoFieldByXPath('//dl[contains(@class, "menu-list-children")]//a[@href="' . $this->base_path . 'node/' . $this->node[MENU_LISTCHILDREN_NB_ITEM - 1]->nid . '"]', NULL, 'Deleted missing link title OK.');

    // Check no description.
    $this->assertNoText($this->child_item[MENU_LISTCHILDREN_NB_ITEM - 1]['options']['attributes']['title'], 'Deleted missing link description OK.');

    // Go back oo anonymous user whose 'access content' permission
    // has been revoked in SetUp().
    $this->drupalLogout();

    // Get page listing links.
    $this->drupalGet('menulistchildren/' . $this->parent_item['mlid']);

    // Check link to page listing link.
    $this->assertFieldByXPath('//div[@id="' . $this->block_id . '"]/div/ul/li/a[@href="' . $this->base_path . 'menulistchildren/' . $this->parent_item['mlid'] . '"]', $this->parent_item['title'], 'Parent link OK.');

    // Check all links are not displayed.
    for ($i = 0; $i < MENU_LISTCHILDREN_NB_ITEM; $i++) {

      // Check no link to node.
      $this->assertNoFieldByXPath('//dl[contains(@class, "menu-list-children")]//a[@href="' . $this->base_path . 'node/' . $this->node[$i]->nid . '"]', NULL, 'Unaccessible link title OK.');

      // Check no description.
      $this->assertNoText($this->child_item[$i]['options']['attributes']['title'], 'Unaccessible link description OK.');
    }
  }

  /**
   * Helper function to create a menu.
   */
  protected function createMenu($name = MENU_LISTCHILDREN_MENU_NAME) {

    $menu = array();
    $menu['menu_name'] = $name;
    $menu['title'] = $this->randomName();
    $menu['description'] = $this->randomName();
    menu_save($menu);

    return $menu;
  }

  /**
   * Helper function to create a menu link.
   */
  protected function createMenuLink($menu_name = 'navigation', $path = '<front>', $plid = 0, $mlid = NULL) {

    $item = array(
      'menu_name' => $menu_name,
      'link_title' => $this->randomName(),
      'link_path' => $path,
      'customized' => TRUE,
      'mlid' => $mlid,
      'plid' => $plid,
    );

    // Add the description.
    $item['options']['attributes']['title'] = $this->randomName();

    if ($path == '<children>') {

      $item['has_children'] = TRUE;
    }

    return menu_link_load(menu_link_save($item));
  }

  /**
   * Move block to region, from block.test.
   */
  protected function moveBlockToRegion($block, $region = 'sidebar_first') {
    // Set the created block to a specific region.
    $edit = array();
    $edit['blocks[' . $block['module'] . '_' . $block['delta'] . '][region]'] = $region;
    $this->drupalPost('admin/structure/block', $edit, 'Save blocks');

    // Confirm that the block was moved to the proper region.
    $this->assertText('The block settings have been updated.', 'Block successfully moved to ' . $region . ' region.');

    // Confirm that the block is being displayed.
    $this->drupalGet('node');
    $this->assertText($block['title'], t('Block successfully being displayed on the page.'));

    // Confirm that the custom block was found at the proper region.
    $xpath = $this->buildXPathQuery('//div[@class=:region-class]//div[@id=:block-id]/*', array(
      ':region-class' => 'region region-' . str_replace('_', '-', $region),
      ':block-id' => 'block-' . $block['module'] . '-' . $block['delta'],
    ));

    $this->assertFieldByXPath($xpath, NULL, 'Custom block found in ' . $region . ' region.');
  }
}
