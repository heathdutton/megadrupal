<?php

/**
 * @file
 * Allows to create parent menu items which point to a page listing
 * its children items.
 */

// Token used menu path to list children.
define('MENU_LISTCHILDREN_TOKEN', '<children>');

/**
 * Implements hook_theme().
 */
function menu_listchildren_theme() {
  return array(
    'menu_listchildren_list' => array(
      'variables' => array('items' => NULL),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function menu_listchildren_menu() {

  $items['menulistchildren/%'] = array(
    'title callback' => 'menu_listchildren_title',
    'title arguments' => array(1),
    'page callback' => 'menu_listchildren_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items[MENU_LISTCHILDREN_TOKEN] = array(
    'page callback' => 'menu_listchildren_error',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 */
function menu_listchildren_form_alter(&$form, &$form_state, $form_id) {

  if (($form_id == 'menu_edit_item') && isset($form['link_path'])) {

    if (isset($form['link_path']['#description'])) {
      $form['link_path']['#description'] .= '<br />' .
        t('Enter @token to link to page listing the children.',
        array('@token' => MENU_LISTCHILDREN_TOKEN));
    }
    else {
      $form['link_path']['#description'] =
        t('Enter @token to link to page listing the children.',
        array('@token' => MENU_LISTCHILDREN_TOKEN));
    }

    return;
  }
}

/**
 * Return page not found if the token is used in a path.
 */
function menu_listchildren_error() {
  return drupal_not_found();
}

/**
 * Implements hook_menu_link_alter().
 *
 * Alter the data being saved to the {menu_links} table by menu_link_save().
 *
 * @param array $item
 *   Menu item.
 */
function menu_listchildren_menu_link_alter(&$item) {

  if ($item['link_path'] == MENU_LISTCHILDREN_TOKEN) {

    // Flag a link to be altered by hook_translated_menu_link_alter().
    $item['options']['alter'] = TRUE;
  }
}

/**
 * Implements hook_translated_menu_link_alter().
 *
 * Alter a menu link after it has been translated and before it is rendered.
 */
function menu_listchildren_translated_menu_link_alter(&$item, $map) {

  if (($item['module'] == 'menu') && ($item['link_path'] == MENU_LISTCHILDREN_TOKEN)) {
    $item['href'] = 'menulistchildren/' . $item['mlid'];
  }
}

/**
 * Return a translated menu item.
 *
 * @param int $mlid
 *   Menu identifier.
 *
 * @return array
 *   Menu item.
 */
function menu_listchildren_get_item($mlid) {

  global $language;

  // Function is_int returns FALSE is the argument is a integer string.
  if (!is_numeric($mlid)) {

    return FALSE;
  }

  $menu_item = menu_link_load((int) $mlid);

  if (!empty($menu_item)) {

    $item['active'] = FALSE;
    $item['title'] = t('Not available');
    $item['desc'] = '';

    if (!empty($menu_item['access']) && empty($menu_item['hidden'])) {

      $item['active'] = TRUE;

      // Check i18n is installed and title has not been already translated.
      if (module_exists('i18n_menu') && empty($menu_item['i18n_menu'])) {

        // Copy of what is done in function _i18n_menu_link_title
        // which is called on the fly when the menu item is displayed.
        // link_title is a field from menu_links.
        $item['title'] = i18n_string_translate(
          array('menu', 'item', $menu_item['mlid'], 'title'),
          $menu_item['link_title'],
          array('langcode' => $language->language, 'sanitize' => FALSE));
      }
      else {

        $item['title'] = $menu_item['title'];
      }

      if (!empty($menu_item['localized_options']['attributes']['title'])) {

        // Check if i18n is installed and
        // if description has not been already translated.
        if (module_exists('i18n_menu') && empty($menu_item['i18n_menu'])) {

          // Copy of what is done in function _i18n_menu_link_description
          // which is called on the fly when the item is displayed.
          // Options is a field in menu_links.
          $item['desc'] = i18n_string_translate(
            array('menu', 'item', $menu_item['mlid'], 'description'),
            $menu_item['options']['attributes']['title'],
            array('langcode' => $language->language));
        }
        else {

          $item['desc']
            = $menu_item['localized_options']['attributes']['title'];
        }
      }

      $item['path'] = $menu_item['href'];
    }

    return $item;
  }
  else {

    return FALSE;
  }
}

/**
 * Set the title of the page displaying the link.
 *
 * @param int $mlid
 *   Menu identifier.
 *
 * @return string
 *   Menu title.
 */
function menu_listchildren_title($mlid) {

  $menu_item = menu_listchildren_get_item((int) $mlid);

  return $menu_item['title'];
}

/**
 *  Return a list of children menu items.
 *
 * @param int $mlid
 *   Menu identifier.
 *
 * @return array
 *   Menu items.
 */
function menu_listchildren_get_children($mlid) {

  global $language;

  if (!is_numeric($mlid)) {

    return FALSE;
  }

  $children = array();

  $result = db_query('SELECT mlid, link_path FROM {menu_links}
    WHERE plid = :plid ORDER BY weight, link_title', array(':plid' => $mlid));

  foreach ($result as $m) {
    // Navigating through children.
    $child = menu_listchildren_get_item($m->mlid);

    if ($child['active']) {

      $children[] = $child;
    }
  }

  return $children;
}

/**
 * Display list of links.
 *
 * @param int $mlid
 *   Menu identifier as integer.
 *
 * @return string
 *   Html page.
 */
function menu_listchildren_page($mlid) {

  $menu = menu_listchildren_get_item($mlid);

  if ($menu) {

    $items = menu_listchildren_get_children($mlid);

    $output = theme('menu_listchildren_list', array('items' => $items));

    return $output;
  }
  else {

    return MENU_NOT_FOUND;
  }
}

/**
 * Theme the list of children.
 */
function theme_menu_listchildren_list($variables) {

  $items = $variables['items'];

  $output = '<dl class="menu-list-children admin-list">';

  foreach ($items as $item) {
    $output .= '<dt class="menu-list-children-title">' .
      l($item['title'], $item['path']) . '</dt>';

    $output .= '<dd class="menu-list-children-description">' .
      $item['desc'] . '</dd>';
  }

  $output .= '</dl>';

  return $output;
}
