<?php

/**
 * Implementation of hook_menu().
 */
function commerce_payone_menu() {
  $items = array();

  // Payment method Rules administration page.
  $items['admin/commerce/config/payone'] = array(
    'title' => 'Payone settings',
    'description' => 'Configure Payone payment settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_payone_admin_form'),
    'access callback' => 'commerce_payone_access',
    'file' => 'includes/commerce_payone.admin.inc',
  );
  
  $items['payone-txstatus'] = array(
    'page callback' => 'commerce_payone_txstatus',
    'access callback' => TRUE,
  );
  
  $items['payone/redirect/%/%/%'] = array(
    'page callback' => 'commerce_payone_redirect',
    'page arguments' => array(2,3,4),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Menu item access callback: checks an account's access to administer payment
 * methods.
 *
 * @param $account
 *   (optional) The account to check; defaults to the current user.
 *
 * @return
 *   TRUE or FALSE indicating access.
 */
function commerce_payone_access($account = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  return user_access('administer payment methods', $account) || user_access('administer payments', $account);
}

/**
 * Split up the supplied name depending on the set up of the customer profile
 **/
function _commerce_payone_format_customer_name($name_line, $first_name, $last_name) {

  // If we have been supplied with a $name_line variable, split it by space
  // and make the assumption that the last word is the last name and all other words
  // are the first name.
  $name = array();

  if (isset($name_line)) {
    $split_name = explode(' ', $name_line);

    $last_name = array_pop($split_name);
    foreach ($split_name as $n) {
      $first_name .= $n;
      $first_name .= ' ';
    }
  }

  $name['first_name'] = $first_name;
  $name['last_name'] = $last_name;

  return $name;
}

function _commerce_payone_parse_response($msg) {
  $separated = explode("\n",$msg);
  $response = array();
  foreach($separated as $key => $value) {
    $pos = strpos($value, '=');
    $response[substr($value, 0, $pos)] = substr($value, $pos + 1);
  }
  return (object) $response;
}

function commerce_payone_txstatus() {
  require_once(libraries_get_path('Payone') . '/Bootstrap.php');
  $boot = new Payone_Bootstrap();
  $boot->init();
  $key = variable_get('payone_key', '');
  
  $builder = new Payone_Builder();
  $service = $builder->buildServiceTransactionStatusHandleRequest(md5($key), array($_SERVER['REMOTE_ADDR']));
  $response = $service->handleByPost();
  
  watchdog('PAYONE', 'TransactionStatus: %status, Order ID: %orderid, Type: %type, TXAction: %txaction', array('%status' => $response->getStatus(), '%orderid' => $_POST['reference'], '%type' => $_POST['clearingtype'], '%txaction' => $_POST['txaction']), WATCHDOG_NOTICE, NULL);
  
  if($response->getStatus() == 'TSOK') {
    
    switch($_POST['clearingtype']) {
      case 'elv':
				if(isset($_POST['iban'])) {
					commerce_payone_sepa_transaction_status($_POST);
				} else {
					commerce_payone_debit_transaction_status($_POST);
				}
        break;
      
      case 'cc':
        commerce_payone_credit_transaction_status($_POST);
        break;
      
      case 'vor':
        commerce_payone_prepayment_transaction_status($_POST);
        break;
    }
    
  }  
  
  echo $response->getStatus();
  die();  
}

function commerce_payone_transaction($method, $status, $data) {
  $transaction = commerce_payment_transaction_new($method, $status, $data['reference']);
  // $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $data['price'];
  $transaction->currency_code = $data['currency'];
  $transaction->status = $status;
  // $transaction->message = 'Transaction: %action';
  // $transaction->message_variables = array('%action' => $data['txaction']);
  $transaction->payload = $data;
  $transaction->remote_id = $data['txid'];
  $transaction->remote_status = $data['txaction'];
  
  commerce_payment_transaction_save($transaction);
}

function commerce_payone_redirect($order_id, $method, $status) {
  $state = 'INVALID';
  $order = commerce_order_load($order_id);
  switch($method) {
    case 'transfer':
      commerce_payone_transfer_redirect($order, $status);
      $state = 'VALID';
      break;
    
    case 'credit':
      commerce_payone_credit_redirect($order, $status, 'credit');
      $state = 'VALID';
      break;
		
		case '3dsecure':
      commerce_payone_credit_redirect($order, $status, '3dsecure');
      $state = 'VALID';
      break;
  }
  watchdog('PAYONE', 'Redirect call received. Order ID: %order_id, State: %state, Method: %method, Status: %status', array('order_id' => $order_id, '%state' => $state, '%method' => $method, '%status' => $status), WATCHDOG_NOTICE, NULL);
}

/**
 * Loads the payment transaction matching the PayPal transaction ID.
 *
 * @param $txn_id
 *   The PayPal transaction ID to search for in the remote_id field.
 *
 * @return
 *   The loaded payment transaction.
 */
function commerce_payone_payment_transaction_load($txid) {
  $transactions = commerce_payment_transaction_load_multiple(array(), array('remote_id' => $txid));
  return $transactions ? reset($transactions) : FALSE;
}

function commerce_payone_payment_transaction_load_by_order($order) {
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'commerce_payment_transaction')
    ->propertyCondition('order_id', $order->order_id)
    ->propertyOrderBy('transaction_id', 'DESC')
    ->range(0, 1)
    ->execute();
  return $result;
}

function commerce_payone_get_userid($uid, $profile_id) {
  $result = db_query('SELECT userid FROM {commerce_payone} WHERE uid = :uid && profile_id = :profile_id', 
    array(':uid' => $uid, ':profile_id' => $profile_id));
  
  return $result->fetchField();
}

function commerce_payone_save_userid($uid, $profile_id, $userid) {
  db_delete('commerce_payone')
  ->condition('uid', $uid)
  ->condition('profile_id', $profile_id)
  ->execute();
    
  db_insert('commerce_payone')
  ->fields(array(
    'userid' => $userid,
    'profile_id' => $profile_id,
    'uid' => $uid,
  ))
  ->execute();
}