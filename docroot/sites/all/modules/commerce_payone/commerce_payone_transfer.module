<?php

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_payone_transfer_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_payone_transfer'] = array(
    'title' => t('Online Bank Transfer'),
    'description' => t('Online bank transfer payment via Payone.'),
    'active' => TRUE,
    'offsite' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: submit form.
 */
function commerce_payone_transfer_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  // Merge in values from the order.
  
  $form['payone_bankcountry'] = array(
    '#type' => 'select',
    '#title' => t('Bank country'),
    '#options' => array(
      'DE' => t('Germany'),
      'AT' => t('Austria'),
      'NL' => t('Netherlands')
    ),
    '#required' => TRUE,
  );
  
  $form['payone_bankaccount'] = array(
    '#type' => 'textfield',
    '#title' => t('Account number'),
    '#required' => TRUE,
  );
  
  $form['payone_bankcode'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank code'),
    '#required' => TRUE,
  );
  
  return $form;
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_payone_transfer_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  
  return TRUE;
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_payone_transfer_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $profile = commerce_customer_profile_load($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id']);
  $billing_address = $profile->commerce_customer_address[LANGUAGE_NONE][0];
  $billing_name = _commerce_payone_format_customer_name($billing_address['name_line'], $billing_address['first_name'], $billing_address['last_name']);
  
  $profile = commerce_customer_profile_load($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id']);
  $billing_address = $profile->commerce_customer_address[LANGUAGE_NONE][0];
  $billing_name = _commerce_payone_format_customer_name($billing_address['name_line'], $billing_address['first_name'], $billing_address['last_name']);
  
  require_once(libraries_get_path('Payone') . '/Bootstrap.php');
  $boot = new Payone_Bootstrap();
  $boot->init();
  
  $builder = new Payone_Builder();
  $service = $builder->buildServicePaymentAuthorize();
  
  $person = new Payone_Api_Request_Parameter_Authorization_PersonalData();
  $person->setLastname($billing_name['last_name']);
  $person->setFirstname($billing_name['first_name']);
  $person->setCountry('DE');
  
  if($userid = commerce_payone_get_userid($profile->uid, $profile->profile_id)) {
    $person->setUserid($userid);
  }
  
  $payment = new Payone_Api_Request_Parameter_Authorization_PaymentMethod_OnlineBankTransfer;
  $payment->setOnlinebanktransfertype('PNT');
  $payment->setBankaccount($pane_values['payone_bankaccount']);
  $payment->setBankcode($pane_values['payone_bankcode']);
  $payment->setBankcountry($pane_values['payone_bankcountry']);
  $payment->setSuccessurl(url('payone/redirect/' . $order->order_number . '/transfer/success'), array('absolute' => TRUE));
  $payment->setBackurl(url('payone/redirect/' . $order->order_number . '/transfer/back'), array('absolute' => TRUE));
  $payment->setErrorurl(url('payone/redirect/' . $order->order_number . '/transfer/error'), array('absolute' => TRUE));
  
  
  $request = new Payone_Api_Request_Authorization();
  $request->setMid(variable_get('payone_merchant_id', ''));
  $request->setPortalid(variable_get('payone_portal_id', ''));
  $request->setKey(variable_get('payone_key', ''));
  $request->setMode(variable_get('payone_mode', 'test'));
  $request->setAmount($order->commerce_order_total[LANGUAGE_NONE][0]['amount'] / 100);
  $request->setCurrency($order->commerce_order_total[LANGUAGE_NONE][0]['currency_code']);
  $request->setAid(variable_get('payone_sub_account_id', ''));
  $request->setClearingtype('sb');
  $request->setReference($order->order_number);
  $request->setPersonalData($person);
  $request->setPayment($payment);
  
  
  $response = $service->authorize($request);
  
  if($response->isRedirect()) {
    commerce_payone_save_userid($profile->uid, $profile->profile_id, $response->getUserid());
    $transaction = commerce_payment_transaction_new('commerce_payone_debit', $order->order_id);
    $transaction->instance_id = 0;
    $transaction->amount = $charge['amount'];
    $transaction->currency_code = $charge['currency_code'];
    $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
    $transaction->payload['redirect'] = $response->toArray();
    $transaction->message = t('Redirection URL received.');
    $transaction->remote_id = $response->getTxid();
    $transaction->remote_status = $response->getStatus();
    
    commerce_payment_transaction_save($transaction);
  }
}

function commerce_payone_transfer_redirect($order, $status) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  
  $transactions = commerce_payment_transaction_load_multiple(array(), array('order_id' => $order->order_id));
  $transaction = reset($transactions);
  $transaction->instance_id = 1;
  $transaction->amount = $wrapper->commerce_order_total->amount->value();
  $transaction->currency_code = $wrapper->commerce_order_total->currency_code->value();
  
  switch($status) {
    case 'success':
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t('The payment has completed.');      
      commerce_payment_transaction_save($transaction);
      commerce_payment_redirect_pane_next_page($order);
      drupal_goto('checkout/' . $order->order_id . '/payment/return');
      break;
    
    case 'back':
      commerce_payment_redirect_pane_previous_page($order);
      drupal_goto('checkout/' . $order->order_id . '/payment/back');
      break;
    
    case 'error':
      $transaction->status = COMMERCE_PAYMENT_STATUS_ERROR;
      $transaction->message = t('An error occured during payment process.');      
      commerce_payment_transaction_save($transaction);
      commerce_payment_redirect_pane_prevous_page($order);
      drupal_goto('checkout/' . $order->order_id . '/payment/return');
      break;
  }
  
  
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a WPS form.
 */
function commerce_payone_transfer_redirect_form($form, &$form_state, $order, $payment_method) {
  $transactions = commerce_payment_transaction_load_multiple(array(), array('order_id' => $order->order_id));
  $tx = reset($transactions);
  
  $form['#action'] = $tx->payload['redirect']['redirecturl'];
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to Sofortueberweisung.de'),
  );

  return $form;
}

