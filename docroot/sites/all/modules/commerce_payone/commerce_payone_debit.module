<?php

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_payone_debit_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_payone_debit'] = array(
    'title' => t('Direct debit'),
    'description' => t('Direct debit payment via Payone.'),
    'active' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: submit form.
 */
function commerce_payone_debit_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  // Merge in values from the order.
  
  if (!empty($order->data['commerce_payment_debit'])) {
    $pane_values += $order->data['commerce_payment_debit'];
  }  

  // Merge in default values.
  $pane_values += array(
    'payone_bankcountry' => '',
  );
  
  $form['payone_bankaccountholder'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank account holder'),
  ); 
  
  $form['payone_bankaccount'] = array(
    '#type' => 'textfield',
    '#title' => t('Account number'),
    '#required' => TRUE,
  );
  
  $form['payone_bankcode'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank code'),
  ); 

  $form['payone_bankcountry'] = array(
    '#type' => 'select',
    '#title' => t('Bank country'),
    '#options' => array(
      'DE' => t('Germany'),
      'AT' => t('Austria'),
      'NL' => t('Netherlands')
    ),
    '#default_value' => $pane_values['payone_bankcountry'],
    '#required' => TRUE,
  );

  return $form;
}


/**
 * Payment method callback: submit form validation.
 */
function commerce_payone_debit_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  
  return TRUE;
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_payone_debit_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $profile = commerce_customer_profile_load($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id']);
  $billing_address = $profile->commerce_customer_address[LANGUAGE_NONE][0];
  $billing_name = _commerce_payone_format_customer_name($billing_address['name_line'], $billing_address['first_name'], $billing_address['last_name']);
  
  require_once(libraries_get_path('Payone') . '/Bootstrap.php');
  $boot = new Payone_Bootstrap();
  $boot->init();
  
  $builder = new Payone_Builder();
  $service = $builder->buildServicePaymentPreauthorize();
  
  $person = new Payone_Api_Request_Parameter_Authorization_PersonalData();
  $person->setLastname($billing_name['last_name']);
  $person->setFirstname($billing_name['first_name']);
  $person->setCountry('DE');
  
  if($userid = commerce_payone_get_userid($profile->uid, $profile->profile_id)) {
    $person->setUserid($userid);
  }
  
  $payment = new Payone_Api_Request_Parameter_Authorization_PaymentMethod_DebitPayment;
  $payment->setBankaccount($pane_values['payone_bankaccount']);
  $payment->setBankaccountholder($pane_values['payone_bankaccountholder']);
  $payment->setBankcode($pane_values['payone_bankcode']);
  $payment->setBankcountry($pane_values['payone_bankcountry']);
  
  $request = new Payone_Api_Request_Preauthorization();
  $request->setMid(variable_get('payone_merchant_id', ''));
  $request->setPortalid(variable_get('payone_portal_id', ''));
  $request->setKey(variable_get('payone_key', ''));
  $request->setMode(variable_get('payone_mode', 'test'));
  $request->setAmount($order->commerce_order_total[LANGUAGE_NONE][0]['amount'] / 100);
  $request->setCurrency($order->commerce_order_total[LANGUAGE_NONE][0]['currency_code']);
  $request->setAid(variable_get('payone_sub_account_id', ''));
  $request->setClearingtype('elv');
  $request->setReference($order->order_number);
  $request->setPersonalData($person);
  $request->setPayment($payment);
  
  
  $response = $service->preauthorize($request);
  if($response->isApproved()) {
    commerce_payone_save_userid($profile->uid, $profile->profile_id, $response->getUserid());
    
    $builder = new Payone_Builder();
    $service = $builder->buildServicePaymentCapture();
    $request = new Payone_Api_Request_Capture();
    $request->setTxid($response->getTxid());
    $request->setMid(variable_get('payone_merchant_id', ''));
    $request->setPortalid(variable_get('payone_portal_id', ''));
    $request->setKey(variable_get('payone_key', ''));
    $request->setMode(variable_get('payone_mode', 'test'));
    $request->setAmount($order->commerce_order_total[LANGUAGE_NONE][0]['amount'] / 100);
    $request->setCurrency($order->commerce_order_total[LANGUAGE_NONE][0]['currency_code']);
    
    $response = $service->capture($request);
    
    if($response->isApproved()) {
      $status = COMMERCE_PAYMENT_STATUS_PENDING;
    } else {
      $status = COMMERCE_PAYMENT_STATUS_FAILED;
    }
    
  } else {
    $status = COMMERCE_PAYMENT_STATUS_FAILED;
  }
  
  commerce_payone_debit_transaction($payment_method, $order, $charge, $status, $response->toArray());
}

function commerce_payone_debit_transaction($payment_method, $order, $charge, $status, $response) {
  $transaction = commerce_payment_transaction_new('commerce_payone_debit', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = $status;
  $transaction->message = t('The payment has approved.');
  $transaction->payload[REQUEST_TIME] = $response;
  $transaction->remote_id = $response['txid'];
  $transaction->remote_status = $response['status'];
  
  commerce_payment_transaction_save($transaction);
}

function commerce_payone_debit_transaction_status($data) {
  $transaction = commerce_payone_payment_transaction_load($_REQUEST['txid']);
  
  if($transaction) {
    switch($data['txaction']) {
      case 'appointed':
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        $transaction->message = t('The payment has initialized.');
        break;
      
      case 'capture':
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $transaction->message = t('The payment has completed.');
        break;
    }
  }
  
  $transaction->remote_status['txaction'];
  $transaction->payload[REQUEST_TIME] = $data;
  
  commerce_payment_transaction_save($transaction);
}