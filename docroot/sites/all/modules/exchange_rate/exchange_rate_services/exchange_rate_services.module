<?php

/*
 * Implementation of hook_services_resources().
 */
function exchange_rate_services_services_resources() {
  return array(
    'rate' => array(
      'relationships' => array(
        'retrieve' => array(
          'access callback' => 'exchange_rate_services_access',
          'callback' => '_exchange_rate_services_get_exchange_rate',
          'args' => array(
            array(
              'name' => 'country',
              'type' => 'string',
              'description' => 'Country Code',
              'source' => array( 'path' => 0 ),
              'optional' => TRUE,
            ),
            array(
              'name' => 'currency',
              'type' => 'string',
              'description' => 'Currency Code',
              'source' => array( 'path' => 2 ),
              'optional' => TRUE,
            ),
            array(
              'name' => 'date',
              'type' => 'string',
              'description' => 'Specific Date to fetch information',
              'source' => array( 'path' => 3 ),
              'optional' => TRUE,
            ),
          ),
        )
      ),
    )
  );
}

/**
 * @return type always TRUE
 */
function exchange_rate_services_access() {
  return TRUE;
}

function _exchange_rate_services_get_exchange_rate( $country, $currency, $date ) {

  if(empty($date)) {
    $date = date('Y-m-d');
  }
  
  $day_in_seconds = 60*60*24;
  $start_date = strtotime($date);
  $end_date = $start_date + $day_in_seconds;
  
  //Get information from official bank to use in chart
  $official_bank = module_invoke_all('exchange_rate_get_config',$country,'official_bank');
        
  $banks = array_filter( variable_get( $country . '_banks', array( ) ) );
  
  if(isset($official_bank['label'])) {
   array_unshift($banks,$official_bank['label']);
  }
  
  $query = db_select( 'exchange_rate_historical', 'erh' )
    ->fields( 'erh', array( 'bank', 'currency', 'date', 'buy', 'sell' ) )
    ->condition( 'country', $country )
    ->condition( 'currency', $currency )
    ->condition( 'bank', $banks )
    ->condition( 'date', $start_date, '>=' )
    ->condition( 'date', $end_date, '<' )
    ->condition( 'buy', 0,'>')
    ->condition( 'sell', 0,'>')       
    ->groupby( 'day,bank' )
    ->orderBy( 'date','ASC' );

  $query->addExpression( 'DATE(FROM_UNIXTIME(date))', 'day' );

  $exchange_rates = $query->execute();
 
  $exchange_rates_array = array();
  foreach($exchange_rates as $rate){
    $exchange_rates_array[] = $rate;
  }
  
  return $exchange_rates_array;
}

/**
 * Implements hook_default_services_endpoint().
 */
function exchange_rate_services_default_services_endpoint() {

  $endpoints = array( );

  $endpoint = new stdClass;
  $endpoint->disabled = FALSE; /* Edit this to true to make a default endpoint disabled initially */
  $endpoint->api_version = 3;
  $endpoint->name = 'rest_api_exchange_rate';
  $endpoint->server = 'rest_server';
  $endpoint->path = 'exchange/api/rest';
  $endpoint->authentication = array( );
  $endpoint->server_settings = array(
    'rest_server' => array(
      'formatters' => array(
        'bencode' => TRUE,
        'json' => TRUE,
        'php' => TRUE,
        'rss' => TRUE,
        'xml' => TRUE,
        'yaml' => TRUE,
        'jsonp' => FALSE,
      ),
      'parsers' => array(
        'application/json' => TRUE,
        'application/vnd.php.serialized' => TRUE,
        'application/x-www-form-urlencoded' => TRUE,
        'application/x-yaml' => TRUE,
        'multipart/form-data' => TRUE,
      ),
    ),
  );


  $endpoint->resources = array(
    'rate' => array(
      'relationships' => array(
        'retrieve' => array(
          'enabled' => 1,
        ),
      )
    ),
  );

  $endpoint->debug = 1;

  $endpoints[ ] = $endpoint;

  return $endpoints;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function exchange_rate_services_ctools_plugin_api( $owner, $api ) {
  if ( $owner == 'services' && $api == 'services' ) {
    return array(
      'version' => 3
    );
  }
}

