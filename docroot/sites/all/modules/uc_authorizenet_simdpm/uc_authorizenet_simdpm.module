<?php

/**
 * @file
 * Process payments using Authorize.Net. Supports SIM and DPM.
 *
 * Original SIM support by Sarah Azurin (sarah.azurin@gmail.com)
 * DPM support added by Ritu Agarwal (rituraj05@gmail.com)
 * Revised for drupal.org release by Jerry Hudgins (jerry@laureldigital.com)
 */

/**
 * Authorize.Net server addresses.
 */
define('AUTHNET_LIVE_SERVER', 'https://secure2.authorize.net/gateway/transact.dll');
define('AUTHNET_TEST_SERVER', 'https://test.authorize.net/gateway/transact.dll');

/**
 * Redirect snippet URL argument keys
 */
define('REDIRECT_ARG_HASH',     'code');
define('REDIRECT_ARG_ORDER_ID', 'oid');
define('REDIRECT_ARG_CART_ID',  'cid');
define('REDIRECT_ARG_PAY_TYPE', 'type');
define('REDIRECT_ARG_MESSAGE',  'msg');
define('REDIRECT_ARG_RESPONSE', 'rsp');

/**
 * Implements hook_menu().
 */
function uc_authorizenet_simdpm_menu() {
  $items = array();

  $items[variable_get('uc_authnet_simdpm_relay_response_url', 'cart/authorizenet_simdpm/complete')] = array(
    'title' => 'Order complete using SIM/DPM',
    'page callback' => 'uc_authorizenet_simdpm_complete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['cart/authorizenet_simdpm/order_complete'] = array(
    'title' => 'User Redirect after order complete using SIM/DPM',
    'page callback' => 'uc_authorizenet_simdpm_order_complete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function uc_authorizenet_simdpm_theme() {
  return array(
    'uc_authorizenet_simdpm_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_uc_payment_method().
 */
function uc_authorizenet_simdpm_uc_payment_method() {
  $path = base_path() . drupal_get_path('module', 'uc_credit');
  $title = variable_get('uc_authnet_simdpm_method_title', t('Credit card via Authorize.Net'));
  $cc_types = array('visa', 'mastercard', 'discover', 'amex');

  foreach ($cc_types as $type) {
    if (variable_get('uc_credit_' . $type, TRUE)) {
      $title .= ' <img src="' . $path . '/images/' . $type . '.gif" style="position: relative; top: 5px;" />';
    }
  }

  $methods[] = array(
    'id' => 'authorizenet_simdpm',
    'name' => t('Credit Card via Authorize.Net'),
    'title' => $title,
    'callback' => 'uc_payment_method_authorizenet_simdpm',
    'redirect' => 'uc_authorizenet_simdpm_form',
    'weight' => 3,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

/**
 * Callback for payment gateway settings.
 */
function uc_payment_method_authorizenet_simdpm($op, &$arg1, $silent = FALSE) {
  switch ($op) {
    case 'settings':
      $form['authnet_simdpm_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Authorize.Net SIM/DPM settings'),
      );
      $form['authnet_simdpm_settings']['uc_authnet_simdpm_relay_response_url_in_form'] = array(
        '#type' => 'checkbox',
        '#title' => t('Provide Relay Response URL to Authorize.Net?'),
        '#description' => t('This module normally provides a Relay Response URL (specified below) to Authorize.Net.  If you wish to avoid transmitting the URL for security reasons, you may uncheck this box and set the URL via the Authorize.Net Web interface.  Note that the value below must still match it.'),
        '#default_value' => variable_get('uc_authnet_simdpm_relay_response_url_in_form', 1),
      );
      $form['authnet_simdpm_settings']['uc_authnet_simdpm_relay_response_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Relay Response URL path'),
        '#default_value' => variable_get('uc_authnet_simdpm_relay_response_url', 'cart/authorizenet_simdpm/complete'),
        '#description' => 'Relative path where Authorize.Net will post payment authorization results.  Defaults to \'cart/authorizenet_simdpm/complete\', but may be changed to a more obscure value.  If you specify a value for the Relay Response URL in the Authorize.Net Web interface, the value here must match it.  Flush the menu cache after changing this value.',
      );
      $form['authnet_simdpm_settings']['uc_authnet_simdpm_login_id'] = array(
        '#type' => 'textfield',
        '#title' => t('API Login ID'),
        '#default_value' => variable_get('uc_authnet_simdpm_login_id', ''),
        '#description' => t('Your Authorize.Net API Login ID.'),
      );
      $form['authnet_simdpm_settings']['uc_authnet_simdpm_transaction_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Transaction key'),
        '#default_value' => variable_get('uc_authnet_simdpm_transaction_key', ''),
        '#description' => t('Your Authorize.Net transaction key.'),
      );
      $form['authnet_simdpm_settings']['uc_authnet_simdpm_md5_hash'] = array(
        '#type' => 'textfield',
        '#title' => t('MD5 Hash'),
        '#maxlength' => 20,
        '#default_value' => variable_get('uc_authnet_simdpm_md5_hash', ''),
        '#description' => t('Your Authorize.Net MD5 Hash value.  This must match the value (if any) set via the Authorize.Net Web interface.  The maximum length is 20 characters.'),
      );
      $form['authnet_simdpm_settings']['uc_authnet_simdpm_redirect_validation_hash'] = array(
        '#type' => 'textfield',
        '#title' => t('Redirect validation key'),
        '#default_value' => variable_get('uc_authnet_simdpm_redirect_validation_hash', _uc_authorizenet_simdpm_randomstring(16)),
        '#description' => t('An MD5 hash key for validating redirect responses.  A random key has been generated for your convenience.  Do not leave this blank!'),
      );
      $form['authnet_simdpm_settings']['uc_authnet_simdpm_method'] = array(
        '#type' => 'select',
        '#title' => t('Payment method to use'),
        '#default_value' => variable_get('uc_authnet_simdpm_method', 'DPM'),
        '#options' => array(
          'DPM' => 'DPM',
          'SIM' => 'SIM',
        ),
        '#multiple' => False,
        '#description' => t('Authorize.Net payment method.  Using SIM, users will be redirected to a credit card form hosted by Authorize.Net.  Using DPM, users will enter credit card information on a form created by this site, but the form will be submitted directly to Authorize.Net.  In neither case will credit card data be handled by this site.'),
      );
      $form['authnet_simdpm_settings']['uc_authnet_simdpm_cc_policy'] = array(
        '#type' => 'textarea',
        '#title' => 'Credit Card Policy',
        '#description' => 'State your credit card acceptance policy here',
        '#default_value' => variable_get('uc_authnet_simdpm_cc_policy', t('Your billing information must match the billing address for the credit card entered below.')),
      );
      $form['authnet_simdpm_settings']['uc_authnet_simdpm_transaction_mode'] = array(
        '#type' => 'select',
        '#title' => t('Transaction mode'),
        '#description' => t('Transaction mode used for processing orders.'),
        '#options' => array(
          'production' => t('Production'),
          'live_test' => t('Live server, Test mode'),
          'test_live' => t('Test server, Live mode'),
          'test_test' => t('Test server, Test mode'),
        ),
        '#default_value' => variable_get('uc_authnet_simdpm_transaction_mode', 'test_test'),
      );
      $form['authnet_simdpm_settings']['uc_authnet_simdpm_transaction_type'] = array(
        '#type' => 'select',
        '#title' => t('Transaction type'),
        '#description' => t('Choosing <em>Authorize only</em> will require that funds be captured later from the Authorize.Net Web interface.'),
        '#options' => array(
          'AUTH_CAPTURE' => t('Authorize and capture'),
          'AUTH_ONLY' => t('Authorize only'),
        ),
        '#default_value' => variable_get('uc_authnet_simdpm_transaction_type', 'AUTH_CAPTURE'),
      );
      $form['authnet_simdpm_settings']['uc_authnet_simdpm_fds_ip'] = array(
        '#type' => 'select',
        '#title' => t('FDS'),
        '#description' => t('Enable if the Fraud Detection Suite (FDS) has been activated for your Authorize.Net account.'),
        '#options' => array(
          'FALSE' => t('Disabled'),
          'TRUE' => t('Enabled'),
        ),
        '#default_value' => variable_get('uc_authnet_simdpm_fds_ip', 'FALSE'),
      );
      $form['authnet_simdpm_settings']['uc_authnet_simdpm_customer_notification'] = array(
        '#type' => 'select',
        '#title' => t('Customer notifications'),
        '#description' => t('Enable to request that Authorize.Net E-mail a receipt to the customer.'),
        '#options' => array(
          'FALSE' => t('Disabled'),
          'TRUE' => t('Enabled'),
        ),
        '#default_value' => variable_get('uc_authnet_simdpm_customer_notification', 'FALSE'),
      );
      $form['authnet_simdpm_settings']['uc_authnet_simdpm_currency'] = array(
        '#type' => 'textfield',
        '#title' => t('Currency Code'),
        '#description' => t('Currency code for the transaction.'),
        '#default_value' => variable_get('uc_authnet_simdpm_currency', 'USD'),
      );
      $form['authnet_simdpm_settings']['uc_authnet_simdpm_checkout_button'] = array(
        '#type' => 'textfield',
        '#title' => t('DPM Payment Submit Button Text'),
        '#description' => t('For DPM mode, specify the text for the payment form submit button.'),
        '#default_value' => variable_get('uc_authnet_simdpm_checkout_button', t('Submit Order')),
      );
      $form['authnet_simdpm_settings']['uc_authnet_simdpm_logo_url'] = array(
        '#type' => 'textfield',
        '#title' => t('SIM Logo URL'),
        '#description' => t('For SIM mode, specify an optional absolute URL for a logo image for the Authorize.Net payment form.  Recommended maximum width is 580 pixels.  Must use the HTTPS protocol for the SIM form to appear fully secure.'),
        '#default_value' => variable_get('uc_authnet_simdpm_logo_url', ''),
      );

      return $form;
  }
}

// Generate a random string (from DrupalTestCase::randomString).

function _uc_authorizenet_simdpm_randomstring($length = 8) {
  $str = '';

  for ($i = 0; $i < $length; $i++) {
    $str .= chr(mt_rand(32, 126));
  }

  return $str;
}

/**
 * Form to build the submission to Authorize.Net DPM.
 */
function uc_authorizenet_simdpm_form($form, &$form_state, $order) {
  global $user;

  drupal_add_css(drupal_get_path('module', 'uc_authorizenet_simdpm') . '/uc_authorizenet_simdpm.css');

  $description = '';
  if (is_array($order->products)) {
    foreach ($order->products as $product) {
      if (!empty($description)) {
        $description .= ' / ';
      }
      $description .= $product->title . ' x' . $product->qty;
      if (isset($product->data['attributes']) && is_array($product->data['attributes'])) {
        foreach ($product->data['attributes'] as $key => $value) {
          if (is_array($value)) {
            $description .= ', ' . $key . ':';
            foreach ($value as $valuestring) {
              $description .= ' ' . $valuestring;
            }
          }
          else {
            $description .= ', ' . $key . ': ' . $value;
          }
        }
      }
    }
  }
  $description = drupal_substr($description, 0, 255);

  $country = uc_get_country_data(array('country_id' => $order->billing_country));
  if ($country === FALSE) {
    $country = array(0 => array('country_iso_code_3' => 'USA'));
  }

  $authnet_method = variable_get('uc_authnet_simdpm_method', 'DPM');
  $submit_data = array(
    // essentials & good practice params
    'x_login' => variable_get('uc_authnet_simdpm_login_id', ''),
    'x_type' => variable_get('uc_authnet_simdpm_transaction_type', 'AUTH_CAPTURE'),
    'x_amount' => uc_currency_format($order->order_total, FALSE, FALSE, '.'),
    'x_show_form' => ($authnet_method == 'DPM') ? '' : 'PAYMENT_FORM',
    // relay response settings
    'x_delim_data' => 'FALSE',
    'x_relay_response' => 'TRUE',
    // customer ip if using FDS
    'x_customer_ip' => variable_get('uc_authnet_simdpm_fds_ip', 'FALSE') == 'TRUE' ? ip_address() : '',
    'x_version' => '3.1',
    // optional
    'x_currency_code' => variable_get('uc_authnet_simdpm_currency', 'USD'),
    'x_method' => 'CC',
    'x_email_customer' => variable_get('uc_authnet_simdpm_customer_notification', 'FALSE'),
    'x_cust_id' => $order->uid,
    'x_invoice_num' => $order->order_id,
    'x_first_name' => drupal_substr($order->billing_first_name, 0, 50),
    'x_last_name' => drupal_substr($order->billing_last_name, 0, 50),
    'x_company' => drupal_substr($order->billing_company, 0, 50),
    'x_address' => drupal_substr($order->billing_street1, 0, 60),
    'x_city' => drupal_substr($order->billing_city, 0, 40),
    'x_state' => drupal_substr(uc_get_zone_code($order->billing_zone), 0, 40),
    'x_zip' => drupal_substr($order->billing_postal_code, 0, 20),
    'x_country' => $country[0]['country_name'],
    'x_phone' => drupal_substr($order->billing_phone, 0, 25),
    'x_email' => $order->primary_email,
    'x_ship_to_first_name' => drupal_substr($order->delivery_first_name, 0, 50),
    'x_ship_to_last_name' => drupal_substr($order->delivery_last_name, 0, 50),
    'x_ship_to_address' => drupal_substr($order->delivery_street1, 0, 60),
    'x_ship_to_city' => drupal_substr($order->delivery_city, 0, 40),
    'x_ship_to_state' => drupal_substr(uc_get_zone_code($order->delivery_zone), 0, 40),
    'x_ship_to_zip' => drupal_substr($order->delivery_postal_code, 0, 20),
    'x_ship_to_country' => $country[0]['country_name'],
    'x_description' => $description,
    'created' => $order->created,
    'modified' => $order->modified,
    'order_id' => $order->order_id,
    'cart_id' => uc_cart_get_id(),
  );

  if (variable_get('uc_authnet_simdpm_relay_response_url_in_form', 1)) {
    $submit_data['x_relay_url'] = check_url(url(variable_get('uc_authnet_simdpm_relay_response_url', 'cart/authorizenet_simdpm/complete'), array('absolute' => TRUE)));
  }

  if (variable_get('uc_authnet_simdpm_method', '') == 'SIM') {
    $submit_data['x_logo_url'] = check_url(variable_get('uc_authnet_simdpm_logo_url', ''));
    $submit_data['x_cancel_url'] = url('cart/checkout/review', array('absolute' => TRUE));
  }

  // Create the MD5 hash fingerprint

  $sequence = mt_rand(1, 1000);
  $tstamp = REQUEST_TIME;
  $login = variable_get('uc_authnet_simdpm_login_id', '');
  $txn_key = variable_get('uc_authnet_simdpm_transaction_key', '');
  $amount = $order->order_total;
  $amount = uc_currency_format($amount, FALSE, FALSE, '.');
  $ccode = variable_get('uc_authnet_simdpm_currency', 'USD');
  $fingerprint = hash_hmac('md5', $login . "^" . $sequence . "^" . $tstamp . "^" . $amount . "^" . $ccode, $txn_key);

  $submit_data['x_fp_hash'] = $fingerprint;
  $submit_data['x_fp_timestamp'] = $tstamp;
  $submit_data['x_fp_sequence'] = $sequence;

  $transaction_mode = variable_get('uc_authnet_simdpm_transaction_mode', 'test_test');
  switch ($transaction_mode) {
    case 'test_test':
      $submit_data['x_test_request'] = 'TRUE';
      $url = AUTHNET_TEST_SERVER;
      break;
    case 'test_live':
      $submit_data['x_test_request'] = 'FALSE';
      $url = AUTHNET_TEST_SERVER;
      break;
    case 'live_test':
      $submit_data['x_test_request'] = 'TRUE';
      $url = AUTHNET_LIVE_SERVER;
      break;
    default: /* production */
      $submit_data['x_test_request'] = 'FALSE';
      $url = AUTHNET_LIVE_SERVER;
  }

  $form['#action'] = $url;

  $cc_types = array('Visa', 'MasterCard', 'Discover', 'AmEx');
  foreach ($cc_types as $type) {
    if (variable_get('uc_credit_' . drupal_strtolower($type), TRUE)) {
      $cc_options[$type] = $type;
    }
  }
  $form['cc_type'] = array(
    '#type' => 'select',
    '#multiple' => FALSE,
    '#options' => $cc_options,
  );
  $form['x_card_num'] = array(
    '#type' => 'textfield',
    '#size' => 20,
    '#maxlength' => 19,
  );
  $form['x_exp_date'] = array(
    '#type' => 'textfield',
    '#size' => 4,
    '#maxlength' => 4,
  );
  if (variable_get('uc_credit_cvv_enabled', TRUE)) {
    $form['x_card_code'] = array(
      '#type' => 'textfield',
      '#size' => variable_get('uc_credit_amex', TRUE) ? 4 : 3,
      '#maxlength' => variable_get('uc_credit_amex', TRUE) ? 4 : 3,
    );
  }

  foreach ($submit_data as $name => $value) {
    $form[$name] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => check_plain(variable_get('uc_authnet_simdpm_checkout_button', t('Submit Order'))),
  );

  return $form;
}

/**
 * Theme the SIM/DPM form addition to the payment review page.
 */
function theme_uc_authorizenet_simdpm_form($variables) {
  $form = $variables['form'];
  $uc_credit_module_path = base_path() . drupal_get_path('module', 'uc_credit');

  $output = '';
  foreach ($form as $name => $value) {
    if (!preg_match('/^#/', $name, $match)) {
      if (isset($form[$name]['#type']) && ($form[$name]['#type'] == 'hidden')) {
        $output .= drupal_render($form[$name]);
      }
    }
  }

  $output .= '<table class="inline-pane-table" cellpadding="2">';
  $transaction_mode = variable_get('uc_authnet_simdpm_transaction_mode', 'test_test');
  $authnet_method = variable_get('uc_authnet_simdpm_method', 'DPM');
  if ($authnet_method == 'DPM') {
    $output .= '<tr class="pane-title-row"><td colspan="2">Credit card information</td></tr>';
    if (strpos($transaction_mode, 'test') !== FALSE) {
      $output .= '<tr><td colspan="2" id="uc-authorizenet-simdpm-test-text" class="uc-authorizenet-simdpm-pane-header">Test Mode is enabled; the credit card will not be charged.</td></tr>';
    }
    $cc_policy = check_plain(variable_get('uc_authnet_simdpm_cc_policy', ''));
    if (drupal_strlen($cc_policy) > 0) {
      $output .= '<tr><td colspan="2" class="description" id="uc-authorizenet-simdpm-policy-text">' . $cc_policy . '</td></tr>';
    }
    $output .= '<tr><td class="title-col" nowrap="">' . t('Card Type:') . '</td><td class="data-col">'
            . drupal_render($form['cc_type']) . '</td></tr>';
    $output .= '<tr><td class="title-col" nowrap="">' . t('Card Number:') . '</td><td class="data-col">'
            . drupal_render($form['x_card_num']) . '</td></tr>';
    $output .= '<tr><td class="title-col" nowrap="">' . t('Expiration Date (MMYY):') . '</td><td class="data-col">'
            . drupal_render($form['x_exp_date']) . '</td></tr>';
    if (variable_get('uc_credit_cvv_enabled', TRUE)) {
      $output .= '<tr><td class="title-col" nowrap="">' . t('CVV:') . '</td><td class="data-col">' . drupal_render($form['x_card_code'])
              . '&nbsp;&nbsp;<img src="' . $uc_credit_module_path . '/images/info.png" onclick="window.open(\'/cart/checkout/credit/cvv_info\', \'CVV_Info\', \'toolbar=0,scrollbars=1,location=0,statusbar=0,menubar=0,resizable=1,width=480,height=460,left=282,top=122\');" style="cursor: pointer; position: relative; top: 3px;" /> <a style="cursor: pointer; font-weight: normal;" onclick="window.open(\'/cart/checkout/credit/cvv_info\', \'CVV_Info\', \'toolbar=0,scrollbars=1,location=0,statusbar=0,menubar=0,resizable=1,width=480,height=460,left=282,top=122\');">'
              . t("What's the CVV?") . '</a></td></tr>';
    }
  }
  else {
    $output .= '<tr><td colspan="2" class="uc-authorizenet-simdpm-pane-header">You will provide your credit card information on the following page.</td></tr>';
    if (strpos($transaction_mode, 'test') !== FALSE) {
      $output .= '<tr><td colspan="2" id="uc-authorizenet-simdpm-test-text" class="uc-authorizenet-simdpm-pane-header">Test Mode is enabled; the credit card will not be charged.</td></tr>';
    }
  }

  $output .= '<tr><td colspan="2" id="uc-authorizenet-simdpm-submit-button">' . drupal_render($form['submit']) . '</td></tr>';
  $output .= '</table>';

  return $output;
}

/**
 * Callback function for posted Authorize.Net payment response.
 */
function uc_authorizenet_simdpm_complete() {
  $cart_id = check_plain($_POST['cart_id']);
  $_SESSION['uc_cart_id'] = $cart_id;
  $order_id = check_plain($_POST['order_id']);
  $_SESSION['cart_order'] = $order_id;
  $auth_type = check_plain($_POST['x_type']);
  $response_code = check_plain($_POST['x_response_code']);
  $response_subcode = check_plain($_POST['x_response_reason_code']);
  $avscode = check_plain($_POST['x_avs_code']);
  $response_reason_text = check_plain($_POST['x_response_reason_text']);
  watchdog('uc_authnet_simdpm', 'Receiving payment response for order !order_id from Authorize.Net', array('!order_id' => $order_id));

  // Validate the response
  $authnet_simdpm_md5_hash = variable_get('uc_authnet_simdpm_md5_hash', '');
  $amount = $_POST['x_amount'];
  $auth_successful = TRUE;
  if ($authnet_simdpm_md5_hash != '') {
    $auth_md5_hash = $_POST['x_MD5_Hash'];
    $auth_trans_id = $_POST['x_trans_id'];
    $authnet_simdpm_login_id = variable_get('uc_authnet_simdpm_login_id', '');
    $fingerprint = md5($authnet_simdpm_md5_hash . $authnet_simdpm_login_id . $auth_trans_id . $amount);
    if (drupal_strtolower($fingerprint) != drupal_strtolower($auth_md5_hash)) {
      $auth_successful = FALSE;
    }
  }

  // Handle response, if valid.

  if (!$auth_successful) { // invalid response
    $message = t("We're sorry, but due to a technical problem, your order could not be processed. Please try placing the order again later.");
    watchdog('uc_authnet_simdpm', 'An unauthenticated response from Authorize.Net made it to checkout! Calculated MD5: !CMD5 Received MD5: !RMD5 Cart order ID: @cart_order', array('!CMD5' => $fingerprint, '!RMD5' => $auth_md5_hash, '@cart_order' => $_SESSION['cart_order']), WATCHDOG_ERROR);
  }
  else { // valid response
    if (($order = uc_order_load($order_id)) && count(uc_cart_get_contents())) {
      switch ($response_code) {
        case 1:
          $status = 'APPROVED';
          break;
        case 2:
          $status = 'DECLINED';
          break;
        case 3:
          $status = 'ERROR';
          break;
        case 4:
          $status = 'HELD for REVIEW';
          break;
      }

      if ($response_code == '1') { // order APPROVED (1)
        if (strcasecmp($auth_type, 'AUTH_ONLY') == 0) { // authorization only
          $message = t('Credit card !status: !amount', array('!status' => $status, '!amount' => uc_currency_format($amount)));
          uc_order_comment_save($order_id, 0, $message, 'admin');
          $gateway_method = variable_get('uc_authnet_simdpm_method', 'DPM');
          $message = t('Authorized by !type !card !cardnum, Authorize.Net !method order with auth code: !auth_code. (subcode: !subcode, avscode: !avscode) !reason_text',
            array(
              '!type' => 'credit card',
              '!card' => check_plain($_POST['x_card_type']),
              '!cardnum' => check_plain($_POST['x_account_number']),
              '!method' => $gateway_method,
              '!auth_code' => check_plain($_POST['x_auth_code']),
              '!subcode' => $response_subcode,
              '!avscode' => $avscode,
              '!reason_text' => $response_reason_text,
            ));
          uc_order_comment_save($order_id, 0, $message, 'admin');
          uc_order_update_status($order_id, uc_order_state_default('post_checkout'));
        }
        else { // authorization and capture
          if (abs($amount - $order->order_total) < 0.01 ) { // full payment
            $message = t('Credit card !status: !amount', array('!status' => $status, '!amount' => uc_currency_format($amount)));
            uc_order_comment_save($order_id, 0, $message, 'admin');
            $gateway_method = variable_get('uc_authnet_simdpm_method', 'DPM');
            $message = t('Paid by !type !card !cardnum, Authorize.Net !method order with auth code: !auth_code (subcode: !subcode, avscode: !avscode).  !reason_text',
              array(
                '!type' => 'credit card',
                '!card' => check_plain($_POST['x_card_type']),
                '!cardnum' => check_plain($_POST['x_account_number']),
                '!method' => $gateway_method,
                '!auth_code' => check_plain($_POST['x_auth_code']),
                '!subcode' => $response_subcode,
                '!avscode' => $avscode,
                '!reason_text' => $response_reason_text,
              ));
            uc_order_comment_save($order_id, 0, $message, 'admin');
            $comment = t('!method auth code: !auth_code',
              array(
                '!method' => $gateway_method,
                '!auth_code' => check_plain($_POST['x_auth_code']),
              ));
            uc_payment_enter($order_id, 'authorizenet_simdpm', $amount, 0,
              array(
                'Card Type' => check_plain($_POST['x_card_type']),
                'Card Number' => check_plain($_POST['x_account_number']),
              ),
              $comment);
          }
          else { // partial payment
            $message = t('Your transaction was approved but for a different amount. Please contact us to resolve this situation.');
            uc_order_comment_save($order_id, 0, t('There was a problem with the order: Transaction was approved for a different amount (billed amount !billed_amount, approved amount !approved_amount) !response_code : (subcode: !subcode, avscode: !avscode) !reason_text',
              array(
                '!response_code' => $response_code,
                '!subcode' => $response_subcode,
                '!avscode' => $avscode,
                '!reason_text' => $response_reason_text,
                '!billed_amount' => $order->order_total,
                '!approved_amount' => $amount,
              )));
          }
        }
      }
      else { // order DECLINED (2), order ERROR (3), order HELD for REVIEW (4)
        $message = t('The transaction was declined by the credit card company. Reason provided: !reason_text', array('!reason_text' => $response_reason_text));
        uc_order_comment_save($order_id, 0, t('There was a problem with your order: !response_code : (subcode: !subcode, avscode: !avscode) !reason_text', array('!response_code' => check_plain($response_code), '!subcode' => $response_subcode, '!avscode' => $avscode, '!reason_text' => $response_reason_text)));
      }
    }
    else { // order is invalid or empty, or might be a duplicate SIM response
      watchdog('uc_authnet_simdpm', 'An invalid or empty order made it to checkout.  Cart order ID: !order_id', array('!order_id' => $order_id), WATCHDOG_ERROR);
    }
  }

  // Build an HTML snippet that will be returned to Authorize.Net and requested
  // back.

  $authnet_simdpm_redirect_validation_hash = variable_get('uc_authnet_simdpm_redirect_validation_hash', '');
  $redirect_fingerprint = md5($authnet_simdpm_redirect_validation_hash . $order_id . $cart_id . $auth_type . $message . $response_code);

  $args = array(
    REDIRECT_ARG_HASH => $redirect_fingerprint,
    REDIRECT_ARG_ORDER_ID => $order_id,
    REDIRECT_ARG_CART_ID => $cart_id,
    REDIRECT_ARG_PAY_TYPE => $auth_type,
    REDIRECT_ARG_MESSAGE => $message,
    REDIRECT_ARG_RESPONSE => $response_code,
  );
  $redirect_url = url('cart/authorizenet_simdpm/order_complete', array('absolute' => TRUE, 'query' => $args));

  $output  = "<html><head><title>Processing Payment</title><script language=\"javascript\">\n";
  $output .= "<!--\n";
  $output .= "window.location.href=\"{$redirect_url}\"\n";
  $output .= "//-->\n";
  $output .= "</script></head><body>\n";
  $output .= "<noscript><meta http-equiv=\"refresh\" content=\"1;url={$redirect_url}\"></noscript>\n";
  $output .= '<p style="text-align: center">Processing your payment; please wait...</p>';
  $output .= "<p style=\"text-align: center\"><a href=\"{$redirect_url}\">Please click here if you are not automatically redirected to the next step.</a></p></body></html>";

  // Return it as a post response and exit.

  print $output;
  exit();
}

/**
 * Callback function triggered by Authorize.Net fetching the HTML snippet returned
 * for the payment response post.
 */
function uc_authorizenet_simdpm_order_complete() {
  $cart_id = $_GET[REDIRECT_ARG_CART_ID];
  $order_id = $_GET[REDIRECT_ARG_ORDER_ID];
  $message = $_GET[REDIRECT_ARG_MESSAGE];
  $auth_type = $_GET[REDIRECT_ARG_PAY_TYPE];
  $response_code = $_GET[REDIRECT_ARG_RESPONSE];
  watchdog('uc_authnet_simdpm', 'Receiving redirect response for order @order_id from Authorize.Net', array('@order_id' => $order_id));

  // Validate posted data.

  $authnet_simdpm_redirect_validation_hash = variable_get('uc_authnet_simdpm_redirect_validation_hash', '');
  $auth_redirect_hash = $_GET[REDIRECT_ARG_HASH];
  $fpredirect = md5($authnet_simdpm_redirect_validation_hash . $order_id . $cart_id . $auth_type . $message . $response_code);
  $auth_successful = (drupal_strtolower($fpredirect) == drupal_strtolower($auth_redirect_hash));
  $message = check_plain($message);

  if ($auth_successful) { // validated
    if (($order = uc_order_load($order_id)) !== FALSE) { // order appears valid
      $_SESSION['cart_order'] = $order_id;
      if (($response_code == '1') &&
          ((strcasecmp($auth_type, 'AUTH_ONLY') == 0) || (uc_payment_balance($order) < 0.01))) {
        // The 'do_complete' session variable moved starting with Ubercart 3.0-RC4 (uc_order schema == 7007)
        $version = db_query("SELECT schema_version FROM {system} WHERE type = 'module' AND name = 'uc_order'")->fetchField();
        if ($version < 7007) {
          $_SESSION['do_complete'] = TRUE;
        }
        else {
          $_SESSION['uc_checkout'][$_SESSION['cart_order']]['do_complete'] = TRUE;
        }
        drupal_goto('cart/checkout/complete'); // payment successful
      }
    }
    else { // order appears invalid
      $message = t("We're sorry, but due to a technical problem, your order could not be processed. Please try placing the order again later.");
      uc_order_comment_save($order_id, 0, t("Message: We're sorry, but due to a technical problem, your order could not be processed. Please try placing the order again later."));
      watchdog('uc_authnet_simdpm', 'An empty order made it to checkout! Order ID: @cart_order', array('@cart_order' => $order_id), WATCHDOG_ERROR);
    }
  }
  else { // invalid data
    $message = t("We're sorry, but due to a technical problem, your order could not be processed. Please try placing the order again later.");
    watchdog('uc_authnet_simdpm', 'An unauthenticated response from user after redirection from Authorize.Net made it to checkout! Calculated redirect hash: !RCMD5  Received redirect hash: !RRMD5  Order ID: @cart_order', array('!RCMD5' => $fpredirect, '!RRMD5' => $auth_redirect_hash, '@cart_order' => $order_id), WATCHDOG_ERROR);
  }

  // Payment failed; return to checkout.

  drupal_set_message($message, 'error');
  drupal_goto('cart/checkout/review');
}
