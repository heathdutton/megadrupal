<?php

define(PUSHERAPI_SHOUTBOX_NAME, 'pusherapi_shoutbox');


/**
 * Implements hook_init().
 */
function pusherapi_shoutbox_init() {
  global $user;
  $js = array(
    'pusherapi_shoutbox' => array(
      'eventname' => variable_get('pusherapi_shoutbox_eventname', 'pusher_api_shoutbox_event'),
      'channel' => variable_get('pusherapi_shoutbox_channel', 'pusher_api_shoutbox'),
    ),
  );
  drupal_add_js($js, array('type' => 'setting', 'scope' => JS_DEFAULT));
  drupal_add_css(drupal_get_path('module', 'pusherapi_shoutbox') . '/css/pusherapi_shoutbox.css');
}

/**
 * Implements hook_permission().
 */
function pusherapi_shoutbox_permission() {
  return array(
    'administer pusher api shoutbox' => array(
      'title' => t('administer pusher api shoutbox'),
      'description' => t('TODO Add a description for \'administer pusher api shoutbox\''),
    ),
    'access pusher api shoutbox' => array(
      'title' => t('access pusher api shoutbox'),
      'description' => t('TODO Add a description for \'access pusher api shoutbox\''),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function pusherapi_shoutbox_menu() {
  $items['admin/config/pusherapi/shoutbox'] = array(
    'title' => 'Shoutbox',
    'description' => 'Shoutbox settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pusher_api_shoutbox_settings'),
    'access arguments' => array('administer pusher api shoutbox'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['pusherapi/shoutbox'] = array(
    'title' => 'Shoutbox',
    'page callback' => 'pusherapi_shoutbox_post',
    'access arguments' => array('access pusher api shoutbox'),
  );
  return $items;
}

/**
 * Implementation of settings form.
 */
function pusher_api_shoutbox_settings() {
  $form = array();
  $form['pusherapi_shoutbox_channel'] = array(
    '#type' => 'textfield',
    '#title' => t('Shoutbox channel name'),
    '#required' => TRUE,
    '#description' => t('This name is used as the name of the communication channel to pusher. The channel name must contain only lowercase letters, numbers, and underscores.'),
    '#default_value' => variable_get('pusherapi_shoutbox_channel', 'pusher_api_shoutbox'),
  );
  $form['pusherapi_shoutbox_eventname'] = array(
    '#type' => 'textfield',
    '#title' => t('Shoutbox event name'),
    '#required' => TRUE,
    '#description' => t('This name is used as the name of the communication events to pusher. The event name must contain only lowercase letters, numbers, and underscores.'),
    '#default_value' => variable_get('pusherapi_shoutbox_eventname', 'pusher_api_shoutbox_event'),
  );
  $form = pusherapi_settings_alter_form($form, PUSHERAPI_SHOUTBOX_NAME);
  return system_settings_form($form);
}

/**
 * Implementation of hook_validate().
 */
function pusher_api_shoutbox_settings_validate($form, &$form_state) {
  $channel = $form_state['values']['pusherapi_shoutbox_channel'];
  if (!preg_match('!^[a-z0-9_]+$!', $channel)) {
    form_set_error('pusherapi_shoutbox_channel', t('The channel name must contain only lowercase letters, numbers, and underscores.'));
  }
  $event = $form_state['values']['pusherapi_shoutbox_eventname'];
  if (!preg_match('!^[a-z0-9_]+$!', $channel)) {
    form_set_error('pusherapi_shoutbox_eventname', t('The event name must contain only lowercase letters, numbers, and underscores.'));
  }
}

/**
 * Implements hook_block_info().
 */
function pusherapi_shoutbox_block_info() {
  $blocks['pusherapi_shoutbox'] = array(
    'info' => t('Pusher API: Shoutbox'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function pusherapi_shoutbox_block_view($delta) {
  switch ($delta) {
    case 'pusherapi_shoutbox':
      $block['subject'] = t('Shoutbox');
      $block['content'] = pusherapi_shoutbox_block_content();
  }
  return $block;
}

/**
 * Implements hook_block().
 */
function pusherapi_shoutbox_block_OLD($op = 'list', $delta = '', $edit = array()) { }

/**
 * Parse and return the block content
 */
function pusherapi_shoutbox_block_content() {
  if (user_access('access pusher api')) {
    $channel = variable_get('pusherapi_shoutbox_channel', 'pusher_api_shoutbox');
    drupal_add_js(drupal_get_path('module', 'pusherapi_shoutbox') . '/js/pusherapi_shoutbox.js');
    $ret = drupal_get_form('pusherapi_shoutbox_form');
    $ret .= '<div id="pusherapi_shoutbox_channel"></div>';
    return $ret;
  }
  return FALSE;
}

/**
 * Return the shoutbox form
 */
function pusherapi_shoutbox_form($form) {
  $form = array();
  global $user;
  $name = variable_get('anonymous', 'Anonymous');

  if ($user->uid > 0) {
    $name = $user->name;
  }
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('My name'),
    '#default_value' => $name,
  );
  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Shout'),
    '#resizable' => FALSE,
  );
  $form['submit'] = array(
    '#type' => 'button',
    '#value' => t('Shout!'),
  );
  return $form;
}

/**
 * callback to push the data to Pusher
 */
function pusherapi_shoutbox_post() {
  if (!empty($_POST['message'])) {
    $eventname = variable_get('pusherapi_shoutbox_eventname', 'pusher_api_shoutbox_event');
    $channel = variable_get('pusherapi_shoutbox_channel', 'pusher_api_shoutbox');

    $data = new stdClass();
    $data->message = check_plain($_POST['message']);
    if (!empty($_POST['name'])) {
      $data->name = $_POST['name'];
    }
    else {
      global $user;
      if ($user->uid > 0) {
        $data->name = $user->name;
      }
      else {
        $data->name = variable_get('anonymous', 'Anonymous');
      }
    }
    $data->time = format_date(REQUEST_TIME, 'custom', 'd-m-Y H:i:s');

    pusher_api_push($channel, $eventname, $data, PUSHERAPI_SHOUTBOX_NAME);
  }
}
