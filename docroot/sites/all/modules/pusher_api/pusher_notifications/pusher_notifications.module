<?php

/**
 * Max notifications = 40. Delete on cron.
 *
 * Press the button and then bring up notifications box. Don't pre-load this.
 * Load on click. AJAX load in JS. Menu callback that returns the HTML..
 *
 * Authenticate presence
 * Authenticate private
 * Views functionality
 * Email notification settings?
 * ... add nf type to break things up.
 * ... e.g. Have mail settings for each callback.
 * ... Have a hook that gets info for all callback (title, group, ..)
 * ... settings for each user stored in DB. serialized for single load?
 */

/**
 * Implements hook_init().
 */
function pusher_notifications_init() {
  if (user_access('access pusher api')) {
    drupal_add_js(drupal_get_path('module', 'pusher_notifications') . '/js/pusher_notifications.js');
  }
  pusher_api_push('test_channel', 'my_event', 'test');
}

/**
 * Implements hook_menu().
 */
function pusher_notifications_menu() {
  $items['admin/config/services/pusher/notifications'] = array(
    'title' => 'Pusher Notifications',
    'description' => 'Configure pusher notification settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pusher_notifications_admin_settings'),
    'access arguments' => array('access administration pages'),
    'file' => 'pusher_notifications.admin.inc',
  );
  $items['notifications/%'] = array(
    'title' => 'Show team members',
    'page callback' => 'pusher_notifications_list',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
    'file' => 'pusher_notifications.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Inserts a new notification.
 *
 * @param $notification
 *   An array of notification parameters.
 *
 *   This must contain:
 *   - uid (Which user the notification is related to)
 *   - callback (The callback to render the notification)
 *
 *   Other available parameters:
 *   - new (Whether the notification is new, default 1)
 *   - created (When the notification was created, defaults to current time)
 *   - data (Any data required by the callback, this is serialized)
 */
function pusher_notifications_save($notification) {
  // Write the new notification record, updating $notification with the nfid.
  drupal_write_record('pusher_notifications', $notification);

  if (!empty($notification['nfid'])) {
    // Set the default timestamp when not set
    if (empty($notification['created'])) {
      $notification['created'] = REQUEST_TIME;
    }

    drupal_write_record('pusher_notifications_data', $notification);
  }
}

/**
 * Deletes a notification.
 *
 * @param $nfid
 *   A notification ID or array of IDs.
 */
function pusher_notifications_delete($nfid) {
  db_delete('pusher_notifications')->condition('nfid', $nfid)->execute();
  db_delete('pusher_notifications_data')->condition('nfid', $nfid)->execute();
}

/**
 * Implements hook_user_delete().
 */
function pusher_notifications_user_delete($account) {
  $nfids = db_select('pusher_notifications', 'pn')
    ->fields('pn', array('nfid'))
    ->condition('uid', $account->uid)
    ->execute()
    ->fetchCol();

  // Delete all related user notifications
  pusher_notifications_delete($nfids);
}

/**
 * Marks all users notifications as read.
 *
 * @param $account
 *   A user account object.
 */
function pusher_notifications_mark_read($account) {
  db_update('pusher_notifications')
    ->fields(array(
      'new' => 0,
    ))
    ->condition('uid', $account->uid)
    ->condition('new', 1)
    ->execute();
}

/**
 * Retrieve the count of a users new notifications.
 *
 * @param $account
 *   A user account object.
 */
function pusher_notifications_new($account) {
  $count = db_select('pusher_notifications', 'pn')
    ->condition('uid', $account->uid)
    ->condition('new', 1)
    ->countQuery()
    ->execute()
    ->fetchField();

  return $count;
}

/**
 * Implements hook_block_info().
 */
function pusher_notifications_block_info() {
  $blocks['pusher_notifications'] = array(
    'info' => t('Pusher notifications'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function pusher_notifications_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'pusher_notifications':
      if (user_is_logged_in()) {
        global $user;

        $block['subject'] = t('Notifications');
        // $block['content'] = pusher_notifications_list();
        $link = l(t('!count new', array('!count' => pusher_notifications_new($user))), 'notifications/list', array('attributes' => array('class' => array('pusher-notifications-link'))));
        $block['content'] = array(
          'link' => array(
            '#markup' => $link,
          ),
          'list' => array(
            '#markup' => theme('pusher_notifications_list'),
          ),
          '#attached' => array(
            'css' => array(
              array('data' => drupal_get_path('module', 'pusher_notifications') . '/css/pusher_notifications-block.css'),
            ),
            'js' => array(
              array('data' => drupal_get_path('module', 'pusher_notifications') . '/js/pusher_notifications-block.js'),
            ),
          ),
        );
      }
      break;
  }

  return $block;
}

/**
 * Implements hook_theme().
 */
function pusher_notifications_theme() {
  return array(
    'pusher_notifications_notification' => array(
      'variables' => array(
        'notification' => NULL,
      ),
      'template' => 'templates/pusher_notifications-notification',
      'file' => 'pusher_notifications.pages.inc',
    ),
    'pusher_notifications_list' => array(
      'template' => 'templates/pusher_notifications-list',
    ),
  );
}