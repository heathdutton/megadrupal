<?php
/**
 * @file
 * Tests the functionality of the Tether Stats site stat tracking module.
 */

/**
 * Test class fot the Tether Stats module.
 *
 * Tests for stat collection for page views, impressions and link
 * clicks. Ensures that elements are created correctly and mapped
 * to the proper activity log entries.
 */
class TetherStatsHitWithImpressionTest extends DrupalWebTestCase {

  /**
   * Identify the test to Drupal.
   */
  public static function getInfo() {

    return array(
      'name' => 'Tether Stats hit with impression test',
      'description' => 'Tests the collection of a hit event grouped with a few impressions on that event.',
      'group' => 'Tether Stats',
    );
  }

  /**
   * Setup performed before every test.
   *
   * Creates and logs in a privileged user and creates a test page.
   */
  public function setUp() {
    parent::setUp('tether_stats');

    $permissions = array(
      'access content',
      'administer tether stats',
    );

    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser($permissions);
    $this->drupalLogin($this->privileged_user);

    $this->testPage = $this->drupalCreateNode(array('type' => 'page', 'status' => NODE_PUBLISHED));

    // Activate stats tracking.
    variable_set('tether_stats_db', 'default');
    variable_set('tether_stats_active', TRUE);
  }

  /**
   * Test tracking an activity on a page which had entities impressed on it.
   */
  public function testTrackingPageHitWithImpressions() {

    // Create users to impress on page.
    $this->impressedUsers = array();
    $this->impressedUsers[] = $this->drupalCreateUser(array('access content'));
    $this->impressedUsers[] = $this->drupalCreateUser(array('access content'));
    $this->impressedUsers[] = $this->drupalCreateUser(array('access content'));

    // Create an element for the page to be hit.
    $identifiers = array(
      'entity_type' => 'node',
      'entity_id' => $this->testPage->nid,
    );
    $page_element = tether_stats_get_element($identifiers);
    $this->assertTrue($page_element, t('Page element to be hit was created in database.'));

    // Simulate a page hit GET call to the tracking path.
    $options = array(
      'elid' => $page_element->elid,
      'referrer' => 'http://www.drupal.org/',
      'type' => 'hit',
      'imp0' => $this->getIdentifyingSetStringFromUser($this->impressedUsers[0]),
      'imp1' => $this->getIdentifyingSetStringFromUser($this->impressedUsers[1]),
      'imp2' => $this->getIdentifyingSetStringFromUser($this->impressedUsers[2]),
    );
    $this->drupalGet('tether_stats/track', array('query' => $options));

    $found_user = TRUE;

    for ($i = 0; $i < 3; $i++) {

      // Test the database for the impressed elements.
      $user_element = db_select('tether_stats_element', 'e')
        ->fields('e', array('elid', 'entity_id'))
        ->condition('entity_type', 'user')
        ->condition('entity_id', $this->impressedUsers[$i]->uid)
        ->execute()
        ->fetch();

      if ($user_element) {

        $this->impressedUsers[$i]->elid = $user_element->elid;
      }
      else {

        $found_user = FALSE;
        break;
      }
    }

    $this->assertTrue($found_user, t('User elements to be impressed were created in the database.'));

    // Test the database for the tracked activity.
    $activity_log = db_select('tether_stats_activity_log', 'a')
      ->fields('a')
      ->condition('elid', $page_element->elid)
      ->condition('type', 'hit')
      ->condition('referrer', 'http://www.drupal.org/')
      ->execute()
      ->fetch();

    $this->assertTrue($activity_log, t('An entry was added to the activity log for the page hit.'));

    $hourly_count = db_select('tether_stats_hour_count', 'h')
      ->fields('h')
      ->condition('elid', $page_element->elid)
      ->condition('type', 'hit')
      ->execute()
      ->fetch();

    $this->assertTrue(($hourly_count->count == 1), t('A count entry was added to the tether_stats_hour_count table.'));

    // Test the database for the user elements that needed to be impressed on
    // the page hit activity.
    for ($i = 0; $i < 3; $i++) {

      $count = 0;

      if (!empty($this->impressedUsers[$i]->elid)) {

        $count_query = db_select('tether_stats_impression_log', 'i')
          ->fields('i')
          ->condition('alid', $activity_log->alid)
          ->condition('elid', $this->impressedUsers[$i]->elid)
          ->countQuery();

        $count = $count_query->execute()->fetchField(0);
      }
      $this->assertTrue(($count == 1), t('An impression entry was added to the tether_stats_impression_log for the user element on the hit page.'));
    }
  }

  /**
   * Test tracking a singular impression.
   */
  public function testTrackingImpression() {

    // Create user to impress on page.
    $this->impressedUser = $this->drupalCreateUser(array('access content'));

    // Create or retrieve an element for the page to be hit.
    $identifiers = array(
      'entity_type' => 'node',
      'entity_id' => $this->testPage->nid,
    );
    $page_element = tether_stats_get_element($identifiers);

    // Simulate a page hit GET call to the tracking path to create the activity
    // of a hit.
    $options = array(
      'elid' => $page_element->elid,
      'referrer' => '',
      'type' => 'hit',
    );
    $this->drupalGet('tether_stats/track', array('query' => $options));

    // Fetch the activity log for the page hit.
    $activity_log = db_select('tether_stats_activity_log', 'a')
      ->fields('a')
      ->condition('elid', $page_element->elid)
      ->condition('type', 'hit')
      ->execute()
      ->fetch();

    // Simulate an impression GET call to the tracking path to create an entry
    // for an impression.
    $options = array(
      'alid' => $activity_log->alid,
      'type' => 'impression',
      'entity_type' => 'user',
      'entity_id' => $this->impressedUser->uid,
    );
    $this->drupalGet('tether_stats/track', array('query' => $options));

    // Test the database for the user element that was impressed on the page hit
    // activity.
    $user_element = db_select('tether_stats_element', 'e')
      ->fields('e', array('elid', 'entity_id'))
      ->condition('entity_type', 'user')
      ->condition('entity_id', $this->impressedUser->uid)
      ->execute()
      ->fetch();

    $count_query = db_select('tether_stats_impression_log', 'i')
      ->fields('i')
      ->condition('alid', $activity_log->alid)
      ->condition('elid', $user_element->elid)
      ->countQuery();

    $count = $count_query->execute()->fetchField(0);

    $this->assertTrue(($count == 1), t('An impression entry was added to the tether_stats_impression_log for the user element on the hit page.'));
  }

  /**
   * Test tracking a link click.
   */
  public function testDerivativeLinkClick() {

    // Create a derivative of the bundle 'page' for the 'node' entity_type.
    $derivative = (object) array(
      'entity_type' => 'node',
      'entity_bundle' => 'page',
      'name' => 'page-link',
      'description' => 'Test link for a "page" node.',
    );
    tether_stats_derivative_save($derivative);

    $this->assertFalse(empty($derivative->id), 'Created a derivative for the "page-link" link on a "page" node.');

    // Simulate a "page-link" click on a "page" node.
    $options = array(
      'referrer' => '',
      'type' => 'click',
      'entity_type' => 'node',
      'entity_id' => $this->testPage->nid,
      'derivative' => 'page-link',
    );
    $this->drupalGet('tether_stats/track', array('query' => $options));

    // Test for the creation of the "page-link" link element.
    $link_element = db_select('tether_stats_element', 'e')
      ->fields('e')
      ->condition('entity_type', 'node')
      ->condition('entity_id', $this->testPage->nid)
      ->condition('derivative_id', $derivative->id)
      ->execute()
      ->fetch();

    $this->assertFalse(empty($link_element), 'An element has been created for the "page-link" link on the testPage.');

    // Test the database for the tracked activity.
    $activity_log = db_select('tether_stats_activity_log', 'a')
      ->fields('a')
      ->condition('elid', $link_element->elid)
      ->condition('type', 'click')
      ->execute()
      ->fetch();

    $this->assertTrue($activity_log, t('An entry was added to the activity log for the "page-link" link click.'));
  }

  /**
   * Serializes the element identifying set for a user.
   *
   * Encodes it for use as a GET option in the tracking callback.
   *
   * @param object $user
   *   The user object.
   */
  private function getIdentifyingSetStringFromUser($user) {

    $set = array(
      'entity_type=user',
      "entity_id={$user->uid}",
    );

    return urlencode(implode(',', $set));
  }

}
