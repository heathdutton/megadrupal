<?php

/**
 * @file
 * Contains TetherStatsChartsPieChartSchema.
 */

require_once __DIR__ . '/TetherStatsChartsSchema.php';
require_once __DIR__ . '/TetherStatsChartsIteratorInterface.php';

/**
 * Schema class for a pie chart.
 *
 * Builds a description of the chart to be generated by the
 * TetherStatsChartsPieChart class.
 *
 * @see TetherStatsChartsPieChart
 */
class TetherStatsChartsPieChartSchema extends TetherStatsChartsSchema implements TetherStatsChartsIteratorInterface {

  /**
   * A length of the domain for the chart data.
   *
   * @var DateInterval
   */
  public $domainInterval;

  /**
   * The human readable label for the slices.
   *
   * @var string
   */
  public $sliceLabel;

  /**
   * Constructs a new chart schema with the specified $chart_id.
   *
   * @param string $chart_id
   *   The unique id of the chart. Must not contain any special characters as
   *   this will be used as a javascript variable.
   * @param DateInterval $domain_interval
   *   A DateInterval for the length of the domain for the chart.
   * @param string $slice_label
   *   The label describing what the slices represent in the chart.
   */
  public function __construct($chart_id, DateInterval $domain_interval, $slice_label = 'Activity') {

    parent::__construct($chart_id);

    $this->domainInterval = $domain_interval;

    $this->sliceLabel = $slice_label;
  }

  /**
   * Calculates a time iterated once before $iterator_time.
   *
   * @param DateTime $iterator_time
   *   The current period start time.
   *
   * @return DateTime
   *   The previous iteration time.
   */
  public function previousDateTime(DateTime $iterator_time) {

    $previous_time = clone $iterator_time;
    $previous_time->sub($this->domainInterval);

    return $previous_time;
  }

  /**
   * Calculates a time iterated once after $iterator_time.
   *
   * @param DateTime $iterator_time
   *   The current period start time.
   *
   * @return DateTime
   *   The next iteration time.
   */
  public function nextDateTime(DateTime $iterator_time) {

    $next_time = clone $iterator_time;
    $next_time->add($this->domainInterval);

    return $next_time;
  }

}
