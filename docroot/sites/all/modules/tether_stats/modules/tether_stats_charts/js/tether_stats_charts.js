/**
 * @file
 * JavaScript for iterating special charts generated by Tether Stats Charts.
 */

(function ($) {

  Drupal.behaviors.tether_stats_charts = {

    attach : function (context, settings) {

      tetherStatsChartsPrepareIterator();
    }
  };

  /**
   * Called on page load to prepare the charts for iteration.
   */
  function tetherStatsChartsPrepareIterator() {

    $('.tether_stats_charts-iterator').once('tether_stats_charts-iterator', function () {

      var iterator = $(this);

      var previous = iterator.children('a.tether_stats-previous');
      var next = iterator.children('a.tether_stats-next');

      previous.click(tetherStatsChartsOnIterate);
      next.click(tetherStatsChartsOnIterate);
    });
  }

  /**
   * Handler for an iteration next or previous link.
   *
   * Iterates a chart forward or backwards depending on the
   * link that was clicked.
   */
  function tetherStatsChartsOnIterate(e) {

    var control = $(this);
    var iterator = control.parent();
    var chart = iterator.prev('.chart');
    var chart_id = chart.attr('id');
    var data_url;

    e.preventDefault();

    if (!control.hasClass('tether_stats-disabled') && !iterator.hasClass('tether_stats-iterating')) {

      iterator.addClass('tether_stats-iterating');

      data_url = '/tether_stats/chart_data/' + chart_id;

      $.getJSON(
          data_url,
          {
            "start" : iterator.attr('data-start'),
            "direction" : control.hasClass('tether_stats-next') ? 'next' : 'prev'
          },
          function (json) {tetherStatsChartsIterateChartCallback(json, chart_id);}
        );
    }
  }

  /**
   * Updates a chart with new data after an iteration call.
   *
   * Called after new chart data is retrieved for iteration. Updates the chart
   * and disables the next or previous buttons if a maximum or minimum
   * threshold has been reached.
   */
  function tetherStatsChartsIterateChartCallback(json, chart_id) {

    if (json.status) {

      var chart = $('#' + chart_id);
      var iterator = chart.next('.tether_stats_charts-iterator');

      if (chart.hasClass('charts-highchart')) {

        tetherStatsUpdateChartHighchart(chart, json.data);
      }
      else if (chart.hasClass('charts-google')) {

        tetherStatsUpdateChartGoogle(chart, json.data);
      }

      // Update the period start pointer.
      iterator.attr('data-start', json.start);

      if (json.next) {
        iterator.find('a.tether_stats-next').removeClass('tether_stats-disabled');
      }
      else {
        iterator.find('a.tether_stats-next').addClass('tether_stats-disabled');
      }

      if (json.previous) {
        iterator.find('a.tether_stats-previous').removeClass('tether_stats-disabled');
      }
      else {
        iterator.find('a.tether_stats-previous').addClass('tether_stats-disabled');
      }
      iterator.removeClass('tether_stats-iterating');
    }
  }

  /**
   * Update a Google chart with new data.
   */
  function tetherStatsUpdateChartGoogle(chart, data) {

    var wrap = chart.data('chartsGoogleWrapper');
    var old_table = wrap.getDataTable();
    var new_table = google.visualization.arrayToDataTable(data, true);

    // The JSON passed to the callback only contains data, so when building a new
    // data table, the column labels are set here.
    for (var i = 0; i < old_table.getNumberOfColumns(); i++) {

      new_table.setColumnLabel(i, old_table.getColumnLabel(i));
    }

    wrap.setDataTable(new_table);
    wrap.draw(chart[0]);
  }

  /**
   * Update a Highchart chart with new data.
   */
  function tetherStatsUpdateChartHighchart(chart, data) {

    var config = $.parseJSON(chart.attr('data-chart'));

    // Set new data and xAxis labels.
    for (var i = 0; i < data.length; i++) {

      config.xAxis[0].categories[i] = data[i][0];

      for (var j = 1; j < data[i].length; j++) {

        config.series[j - 1].data[i] = data[i][j];
      }
    }

    // Draw a new chart.
    chart.highcharts(config);
  }

})(jQuery);
