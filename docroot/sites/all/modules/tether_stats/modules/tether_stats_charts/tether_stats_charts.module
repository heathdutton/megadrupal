<?php

/**
 * @file
 * Drupal Module: Tether Stats Charts.
 *
 * An add-on module to tether_stats that allows for the generation of charts
 * from stats data.
 */

/**
 * Implements hook_help().
 */
function tether_stats_charts_help($path, $arg) {

  $help = NULL;

  switch ($path) {

    case 'admin/config/system/tether_stats/overview':
      $help = '<p>' . t('This is a chart of the overal hits on your site.') . '</p>';
      break;

    case 'admin/config/system/tether_stats/chart_examples':
      $help = '<p>' . t('This page demonstrates some example charts based on your current stats data. You may not see much activity if you have only recently activated data collection.') . '</p>' .
        '<p>' . t("Refer to the Tether Stats Charts module's README.txt file as well as the tether_stats_charts.examples.inc file for more information on how you can create your own charts.") . '</p>';
      break;

  }
  return $help;
}

/**
 * Implements hook_menu().
 */
function tether_stats_charts_menu() {

  $items['admin/config/system/tether_stats/overview'] = array(
    'page callback' => 'tether_stats_charts_overview_callback',
    'access arguments' => array('administer tether stats'),
    'title' => 'Statistics Overview',
    'file' => 'tether_stats_charts.data.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/system/tether_stats/chart_examples'] = array(
    'page callback' => 'tether_stats_charts_examples_callback',
    'access arguments' => array('administer tether stats'),
    'file' => 'tether_stats_charts.examples.inc',
    'title' => 'Chart Examples',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/system/tether_stats/element/%tether_stats_element'] = array(
    'page callback' => 'tether_stats_charts_admin_element_report_callback',
    'page arguments' => array(5),
    'access arguments' => array('administer tether stats'),
    'title' => 'Element Stats Report',
    'file' => 'tether_stats_charts.data.inc',
    'type' => MENU_CALLBACK,
  );

  $items['tether_stats/chart_data/%tether_stats_charts_schema'] = array(
    'title' => 'Chart Data',
    'page callback' => 'tether_stats_charts_data_callback',
    'page arguments' => array(2),
    'access arguments' => array('view tether stats chart data'),
    'description' => 'Retrieve chart data and output it as JSON.',
    'file' => 'tether_stats_charts.data.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Loads a chart schema stored in SESSION by the chart_id.
 *
 * @param string $chart_id
 *   The unique chart id.
 */
function tether_stats_charts_schema_load($chart_id) {

  $ret_value = NULL;

  if (isset($_SESSION['tether_stats']['charts'][$chart_id])) {

    module_load_include('inc', 'tether_stats_charts', 'tether_stats_charts.data');
    $ret_value = unserialize($_SESSION['tether_stats']['charts'][$chart_id]);
  }

  return $ret_value;
}

/**
 * Implements hook_library().
 */
function tether_stats_charts_library() {

  $library['tether_stats_charts'] = array(
    'title' => t('Charts iterator integration'),
    'version' => '1.0',
    'js' => array(
      array(
        'data' => drupal_get_path('module', 'tether_stats_charts') . '/js/tether_stats_charts.js',
        'type' => 'file',
        'weight' => 10,
      ),
    ),
    'css' => array(
      array(
        'data' => drupal_get_path('module', 'tether_stats_charts') . '/css/tether_stats_charts.css',
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
  );

  return $library;
}

/**
 * Implements hook_permission().
 */
function tether_stats_charts_permission() {

  return array(
    'view tether stats chart data' => array(
      'title' => t('View Tether Stats Data'),
      'description' => t('Users can view statistical data in charts. A user with this permission may access all data related to an iterative chart. Without this permission, iterative charts will not work. Please see the tether_stats_charts README.txt for security details.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function tether_stats_charts_theme() {

  module_load_include('inc', 'tether_stats_charts', 'tether_stats_charts.theme');

  return _tether_stats_charts_theme();
}

/**
 * Generate a renderable build array for a chart that's iterable.
 *
 * @param TetherStatsChartsChart $chart
 *   The chart object.
 *
 * @return array
 *   A renderable array for the chart.
 */
function tether_stats_charts_get_iterable_renderable_chart(TetherStatsChartsChart $chart) {

  $chart_renderable = array();

  if ($chart->schema instanceof TetherStatsChartsIteratorInterface) {

    // Store the chart schema in session so we can calculate additional data
    // when the chart is iterated.
    $_SESSION['tether_stats']['charts'][$chart->schema->chartId] = serialize($chart->schema);

    $chart_renderable['#theme'] = 'tether_stats_charts_iterable_chart';
    $chart_renderable['chart'] = $chart->getRenderable();

    // Determine if the next and previous buttons should be enabled on start.
    $date_start = $chart->getDateStart();
    $next_time = $chart->schema->nextDateTime($date_start);

    $current_time = new DateTime();

    // Normalize the current time to the beginning of the current day.
    TetherStatsChartsSteppedChartSchema::normalizeDate('day', $current_time);

    $prev_attributes = array(
      'class' => array('tether_stats-previous'),
    );
    if ($date_start->getTimestamp() <= variable_get('tether_stats_earliest_activation_time', REQUEST_TIME)) {

      $prev_attributes['class'][] = 'tether_stats-disabled';
    }

    $next_attributes = array(
      'class' => array('tether_stats-next'),
    );
    if ($next_time > $current_time) {

      $next_attributes['class'][] = 'tether_stats-disabled';
    }

    $iterator_attributes = array(
      'class' => array('tether_stats_charts-iterator'),
      'data-start' => $chart->getDateStart()->getTimestamp(),
    );

    // Set an internal flag so we know this is an iterable chart for
    // tether_stats_charts_chart_definition_alter.
    $chart_renderable['chart']['#tether_stats_iterable'] = TRUE;

    $chart_renderable['controls'] = array(
      '#theme' => 'tether_stats_charts_iterable_chart_controls',
      '#attributes' => $iterator_attributes,
    );

    $chart_renderable['controls']['previous_link'] = array(
      '#theme' => 'link',
      '#text' => t('Previous'),
      '#path' => '<front>',
      '#options' => array(
        'attributes' => $prev_attributes,
        'html' => FALSE,
      ),
    );

    $chart_renderable['controls']['next_link'] = array(
      '#theme' => 'link',
      '#text' => t('Next'),
      '#path' => '<front>',
      '#options' => array(
        'attributes' => $next_attributes,
        'html' => FALSE,
      ),
    );

    $chart_renderable['#attached']['library'][] = array('tether_stats_charts', 'tether_stats_charts');
  }
  else {

    watchdog('tether_stats', 'Attempted to build on iterable chart on a non-iterable chart type in %function',
      array('%function' => 'tether_stats_charts_get_iterable_renderable_chart'), WATCHDOG_ERROR);
  }

  return $chart_renderable;
}

/**
 * Implements hook_chart_definition_alter().
 */
function tether_stats_charts_chart_definition_alter(&$chart_definition, $element, $chart_id) {

  if (!empty($element['#tether_stats_iterable'])) {
    $chart_library = isset($element['#chart_library']) ? $element['#chart_library'] : NULL;

    // Assume the first charting library if the requested library is not
    // available.
    if (!isset($chart_library)) {

      $charts_info = charts_info();
      $chart_library = key($charts_info);
    }

    if ($chart_library == 'google') {

      // Reduce the ten second animation duration to something more reasonable
      // for iteration.
      $chart_definition['options']['animation']['duration'] = 1000;
    }
  }
}
