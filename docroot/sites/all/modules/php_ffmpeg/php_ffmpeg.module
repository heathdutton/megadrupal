<?php
/**
 * @file
 * Hook implementations and shared functions for the PHP-FFMpeg module.
 */

/**
 * Factory function for the FFMpeg object.
 *
 * @return \FFMpeg\FFMpeg
 */
function php_ffmpeg() {
  static $ffmpeg = NULL;
  if (!$ffmpeg) {
    libraries_load('php-ffmpeg');
    $ffmpeg = \FFMpeg\FFMpeg::create(array_filter(array(
      'ffmpeg.binaries'  => variable_get('php_ffmpeg_ffmpeg_binary', NULL),
      'ffprobe.binaries' => variable_get('php_ffmpeg_ffprobe_binary', NULL),
      'timeout'          => variable_get('php_ffmpeg_timeout', NULL),
      'ffmpeg.threads'   => variable_get('php_ffmpeg_threads', NULL),
    )), _php_ffmpeg_logger(), php_ffmpeg_probe());
  }
  return $ffmpeg;
}

/**
 * Factory function for the FFProbe object.
 *
 * @return \FFMpeg\FFProbe
 */
function php_ffmpeg_probe() {
  static $ffprobe = NULL;
  if (!$ffprobe) {
    libraries_load('php-ffmpeg');
    $ffprobe = \FFMpeg\FFProbe::create(array_filter(array(
      'ffmpeg.binaries'  => variable_get('php_ffmpeg_ffmpeg_binary', NULL),
      'ffprobe.binaries' => variable_get('php_ffmpeg_ffprobe_binary', NULL),
      'timeout'          => variable_get('php_ffmpeg_timeout', NULL),
      'ffmpeg.threads'   => variable_get('php_ffmpeg_threads', NULL),
    )), _php_ffmpeg_logger(), _php_ffmpeg_cache());
  }
  return $ffprobe;
}

/**
 * Factory function for the logger to use with FFMPge/FFProbe instances.
 *
 * @return \Psr\Log\LoggerInterface
 */
function _php_ffmpeg_logger() {
  static $logger = NULL;
  if (!$logger) {
    if (function_exists('monolog') && ($channel = variable_get('php_ffmpeg_monolog_channel', NULL))) {
      $logger = monolog($channel);
    }
    else {
      $logger = new PHPFFMpegLogger('php-ffmpeg');
    }
  }
  return $logger;
}

/**
 * Factory function for the cache to use with FFProbe instances.
 *
 * @return \Doctrine\Common\Cache\Cache
 */
function _php_ffmpeg_cache() {
  static $cache = NULL;
  if (!$cache) {
    $cache = new PHPFFMpegCache(_cache_get_object('cache'), 'php_ffmpeg');
  }
  return $cache;
}

/**
 * Implements hook_menu().
 */
function php_ffmpeg_menu() {
  return array(
    'admin/config/development/php-ffmpeg' => array(
      'title' => 'PHP-FFMpeg',
      'description' => 'Configure the PHP-FFMpeg library.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('php_ffmpeg_settings'),
      'access arguments' => array('administer site configuration'),
      'file' => 'php_ffmpeg.admin.inc',
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function php_ffmpeg_libraries_info() {
  return array(
    'php-ffmpeg' => array(
      'name' => 'PHP-FFMPeg',
      'description' => 'FFMpeg PHP, an Object Oriented library to communicate with AVconv / ffmpeg',
      'vendor url' => 'https://github.com/PHP-FFMpeg/PHP-FFMpeg',
      // The library path is managed by Composer Manager
      'library path' => composer_manager_vendor_dir() . '/php-ffmpeg',
      'version callback' => '_php_ffmpeg_libraries_version'
    ),
  );
}

/**
 * Version callback for php_ffmpeg_libraries_info().
 */
function _php_ffmpeg_libraries_version($library) {
  module_load_include('admin.inc', 'composer_manager');
  $composer_manager_installed_packages = composer_manager_installed_packages();
  switch ($library['machine name']) {
    case 'php-ffmpeg':
      return $composer_manager_installed_packages['php-ffmpeg/php-ffmpeg']['version'];
  }
}