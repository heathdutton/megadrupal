<?php

include __DIR__ . '/../../includes/PHPFFMpegCache.inc';

/**
 * Test case for PHPFFMpegCache
 */
class PHPFFMpegCacheTestCase extends DrupalUnitTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'PHPFFMpeg Cache wrapper',
      'description' => 'The the PHPFFMpeg Drupal to Doctrine cache adapter.',
      'group' => 'PHPFFMpeg',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp();
    $this->backend = new PHPFFMpegCacheTestCaseMemoryCache();
    $this->prefix = $this->randomString();
    $this->cache = new PHPFFMpegCache($this->backend, $this->prefix);
  }

  public function testFetch() {
    $cid = $this->randomString();
    $value = $this->randomString();
    $this->backend->set("{$this->prefix}:{$cid}", $value);
    $this->assertEqual($this->cache->fetch($cid), $value, 'PHPFFMpeg::get() should return the value stored in the backend when it exists.');
    $this->assertFalse($this->cache->fetch($this->randomString()), 'PHPFFMpeg::get() should return FALSE when no value exist in the backend.');
  }

  public function testContains() {
    $cid = $this->randomString();
    $value = $this->randomString();
    $this->backend->set("{$this->prefix}:{$cid}", $value);
    $this->assertIdentical($this->cache->contains($cid), TRUE, 'PHPFFMpeg::contains() should return TRUE when a value exists in the backend.');
    $this->assertIdentical($this->cache->contains($this->randomString()), FALSE, 'PHPFFMpeg::contains() should return FALSE when no value exist in the backend.');
  }

  public function testSave() {
    $cid = $this->randomString();
    $value = $this->randomString();
    $this->cache->save($cid, $value);
    $this->assertEqual($this->backend->get("{$this->prefix}:{$cid}")->data, $value, 'PHPFFMpeg::save() should set the value in the backend.');
  }

  public function testDelete() {
    $cid = $this->randomString();
    $value = $this->randomString();
    $this->backend->set("{$this->prefix}:{$cid}", $value);
    $this->cache->delete($cid);
    $this->assertIdentical($this->backend->get("{$this->prefix}:{$cid}"), FALSE, 'PHPFFMpeg::delete() should clear the value in the backend.');
  }

  public function testGetStats() {
    $this->assertIdentical($this->cache->getStats(), NULL, 'PHPFFMpeg::getStats() should return NULL.');
  }
}

class PHPFFMpegCacheTestCaseMemoryCache implements DrupalCacheInterface {

  private $data = array();

  /**
   * {@inheritdoc}
   */
  function get($cid) {
    return isset($this->data[$cid]) ? $this->data[$cid] : FALSE;
  }


  /**
   * {@inheritdoc}
   */
  function getMultiple(&$cids) {
    return array_map(array(this, 'get'), $cids);
  }

  /**
   * {@inheritdoc}
   */
  function set($cid, $data, $expire = CACHE_PERMANENT) {
    $this->data[$cid] = new stdClass();
    $this->data[$cid]->data = $data;
    $this->data[$cid]->expire = $expire;
  }

  /**
   * {@inheritdoc}
   */
  function clear($cid = NULL, $wildcard = FALSE) {
    if($cid) {
      if ($wildcard) {
        if ($cid === '*') {
          $this->data = array();
        }
        else {
          foreach (array_keys($this->data) as $key) {
            if(strpos($key, $cid) === 0) {

            }
          }
        }
      }
      else {
        unset($this->data[$cid]);
      }
    }
    else {
      $this->data = array();
    }
  }

  /**
   * {@inheritdoc}
   */
  function isEmpty() {
    return count($this->data) == 0;
  }

}