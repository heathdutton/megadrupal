<?php
/**
 * Test case for PHPFFMpegLogger
 */
class PHPFFMpegTestCase extends DrupalWebTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'PHPFFMpeg Module',
      'description' => 'Test the API and basic function of the PHPFFMpeg module.',
      'group' => 'PHPFFMpeg',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp('php_ffmpeg');
  }

  /**
   * Boring tests of the administration page.
   */
  public function testAdminPage() {
    $account = $this->drupalCreateUser(array_keys(system_permission()));

    $php_ffmpeg_ffmpeg_binary = $this->randomName();
    $php_ffmpeg_ffprobe_binary = $this->randomName();
    $php_ffmpeg_timeout = mt_rand(1, 42);
    $php_ffmpeg_threads = mt_rand(1, 42);

    variable_set('php_ffmpeg_ffmpeg_binary', $php_ffmpeg_ffmpeg_binary);
    variable_set('php_ffmpeg_ffprobe_binary', $php_ffmpeg_ffprobe_binary);
    variable_set('php_ffmpeg_timeout', $php_ffmpeg_timeout);
    variable_set('php_ffmpeg_threads', $php_ffmpeg_threads);

    $this->drupalLogin($account);
    $this->drupalGet('admin/config');
    $this->clickLink('PHP-FFMpeg');
    $this->assertUrl('admin/config/development/php-ffmpeg');

    $this->assertFieldByName('php_ffmpeg_ffmpeg_binary', $php_ffmpeg_ffmpeg_binary, 'The PHP-FFMpeg settings page should provide a field for the ffmpeg binary path.');
    $this->assertFieldByName('php_ffmpeg_ffprobe_binary', $php_ffmpeg_ffprobe_binary, 'The PHP-FFMpeg settings page should provide a field for the ffprobe binary path.');
    $this->assertFieldByName('php_ffmpeg_timeout', $php_ffmpeg_timeout, 'The PHP-FFMpeg settings page should provide a field for the ffmpeg command timeout.');
    $this->assertFieldByName('php_ffmpeg_threads', $php_ffmpeg_threads, 'The PHP-FFMpeg settings page should provide a field for the number of threads to use for ffmpeg commands.');

    $php_ffmpeg_ffmpeg_binary = drupal_realpath($this->drupalGetTestFiles('binary')[0]->uri);
    $php_ffmpeg_ffprobe_binary = drupal_realpath($this->drupalGetTestFiles('binary')[1]->uri);
    $php_ffmpeg_timeout = mt_rand(1, 42);
    $php_ffmpeg_threads = mt_rand(1, 42);

    $this->drupalPost(NULL, array(
      'php_ffmpeg_ffmpeg_binary' => $php_ffmpeg_ffmpeg_binary,
      'php_ffmpeg_ffprobe_binary' => $php_ffmpeg_ffprobe_binary,
      'php_ffmpeg_timeout' => $php_ffmpeg_timeout,
      'php_ffmpeg_threads' => $php_ffmpeg_threads
    ), 'Save configuration');

    $this->assertFieldByName('php_ffmpeg_ffmpeg_binary', $php_ffmpeg_ffmpeg_binary, 'Submitting he PHP-FFMpeg settings page should update the value of the field for the ffmpeg binary path.');
    $this->assertFieldByName('php_ffmpeg_ffprobe_binary', $php_ffmpeg_ffprobe_binary, 'Submitting he PHP-FFMpeg settings page should update the value of the field for the ffprobe binary path.');
    $this->assertFieldByName('php_ffmpeg_timeout', $php_ffmpeg_timeout, 'Submitting he PHP-FFMpeg settings page should update the value of the field for the ffmpeg command timeout.');
    $this->assertFieldByName('php_ffmpeg_threads', $php_ffmpeg_threads, 'Submitting he PHP-FFMpeg settings page should update the value of the field for the number of threads to use for ffmpeg commands.');

    $this->assertEqual(variable_get('php_ffmpeg_ffmpeg_binary'), $php_ffmpeg_ffmpeg_binary, 'Submitting he PHP-FFMpeg settings page should update the ffmpeg binary path.');
    $this->assertEqual(variable_get('php_ffmpeg_ffprobe_binary'), $php_ffmpeg_ffprobe_binary, 'Submitting he PHP-FFMpeg settings page should update the ffproe binary path.');
    $this->assertEqual(variable_get('php_ffmpeg_timeout'), $php_ffmpeg_timeout, 'Submitting he PHP-FFMpeg settings page should update the ffmpeg command timeout.');
    $this->assertEqual(variable_get('php_ffmpeg_threads'), $php_ffmpeg_threads, 'Submitting he PHP-FFMpeg settings page should update the number of threads to use for ffmpeg commands.');

    $invalidFilenames = array($this->randomName(), $this->randomName());

    $this->drupalPost(NULL, array(
      'php_ffmpeg_ffmpeg_binary' => $invalidFilenames[0],
      'php_ffmpeg_ffprobe_binary' => $invalidFilenames[1],
      'php_ffmpeg_timeout' => $this->randomName(),
      'php_ffmpeg_threads' => $this->randomName()
    ), 'Save configuration');

    $this->assertText("File not found: $invalidFilenames[0]", "Submission of the the PHP-FFMpeg settings page should validate the ffmpeg binary path is an existing file.");
    $this->assertText("File not found: $invalidFilenames[1]", "Submission of the the PHP-FFMpeg settings page should validate the ffprobe binary path is an existing file.");
    $this->assertText('The value of the Timeout field must be a positive integer.',  "Submission of the the PHP-FFMpeg settings page should validate the ffmpeg command timeout is a positive integer.");
    $this->assertText('The value of the Threads field must be zero or a positive integer.',  "Submission of the the PHP-FFMpeg settings page should validate the ffmpeg command threads number is a positive integer.");

    $this->assertEqual(variable_get('php_ffmpeg_ffmpeg_binary'), $php_ffmpeg_ffmpeg_binary, 'Submitting he PHP-FFMpeg settings page with invalid values should not update the ffmpeg binary path.');
    $this->assertEqual(variable_get('php_ffmpeg_ffprobe_binary'), $php_ffmpeg_ffprobe_binary, 'Submitting he PHP-FFMpeg settings page with invalid values should not update the ffprobe path.');
    $this->assertEqual(variable_get('php_ffmpeg_timeout'), $php_ffmpeg_timeout, 'Submitting he PHP-FFMpeg settings page with invalid values should not update the ffmpeg command time path.');
    $this->assertEqual(variable_get('php_ffmpeg_threads'), $php_ffmpeg_threads, 'Submitting he PHP-FFMpeg settings page with invalid values should not update the ffmpeg command threads number.');

  }

  public function testLibraries() {
    $library = libraries_detect('php-ffmpeg');
    $this->assertTrue($library['installed'], 'The PHP-FFMpeg library should be available through the libraries API');
  }

  public function testFactories() {

    chmod(drupal_realpath($this->drupalGetTestFiles('binary')[0]->uri), 0777);
    chmod(drupal_realpath($this->drupalGetTestFiles('binary')[1]->uri), 0777);
    variable_set('php_ffmpeg_ffmpeg_binary', drupal_realpath($this->drupalGetTestFiles('binary')[0]->uri));
    variable_set('php_ffmpeg_ffprobe_binary', drupal_realpath($this->drupalGetTestFiles('binary')[1]->uri));

    /** @var \FFMpeg\FFMpeg $ffmpeg */
    $ffmpeg = php_ffmpeg();
    $this->assertTrue($ffmpeg instanceof \FFMpeg\FFMpeg, 'php_ffmpeg() should return a instance of \FFMpeg\FFMpeg.');

    /** @var \FFMpeg\FFProbe $ffprobe */
    $ffprobe = php_ffmpeg_probe();
    $this->assertTrue($ffprobe instanceof \FFMpeg\FFProbe, 'php_ffmpeg_probe() should return a instance of \FFMpeg\FFProbe.');
  }
}