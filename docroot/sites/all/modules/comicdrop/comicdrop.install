<?php
// $Id$

/**
 * @file
 * Install comicdrop.
 */
function comicdrop_install() {
}

function comicdrop_enable() {
  // Create a comicdrop image style at initial width.
  _comicdrop_install_image_style_configs(variable_get('comicdrop_image_width', 720));
  // Create a comic node type.
  _comicdrop_install_node_type_configs();
  // Add storyline configuation
  _comicdrop_install_storyline_configs();
  // Re-Calculate the earliest comic.
  variable_set('comicdrop_earliest', FALSE);
  _comicdrop_get_earliest_comic();
  // Re-Calculate the latest comic.
  variable_set('comicdrop_latest', FALSE);
  _comicdrop_get_latest_comic();
  // Set front to the Front page created by this module.
  variable_set('site_frontpage', 'comicdrop');
}

/**
 * Update for 7.x-1.x - Add story taxonomy creation and hook comic type.
 */
function comicdrop_update_7101(){
    _comicdrop_install_storyline_configs();
}

/**
 * Helper function, create Storyline taxonomy and hook to comic type.
 */
function _comicdrop_install_storyline_configs() {
  $taxonomies = taxonomy_vocabulary_get_names();
  if (!isset($taxonomies['storylines'])) {
    // Create a default vocabulary named "Tags", enabled for the 'comic' and 'blog' content type.
    $description = st('Use storyline tags to group comics into storylines.');
    $help = st('Enter a comma-separated list of words to describe your content.');
    $vocabulary = (object) array(
      'name' => 'Storylines', 
      'description' => $description, 
      'machine_name' => 'storylines', 
      'help' => $help,
    );
    taxonomy_vocabulary_save($vocabulary);
    drupal_set_message(t('A taxonomy for Storylines has been created.'));
  } else {
    $vocabulary = taxonomy_vocabulary_machine_name_load('storylines');
  }
  if (!field_info_field('field_' . $vocabulary->machine_name)) {
    $field = array(
      'field_name' => 'field_' . $vocabulary->machine_name,
      'type' => 'taxonomy_term_reference',
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
      'settings' => array(
        'allowed_values' => array(
          array(
           'vocabulary' => $vocabulary->machine_name,
           'parent' => 0,
          ),
        ),
      ),
    );
    field_create_field($field);
    drupal_set_message(t('A new field has been created for storyline taxonomy.'));
  }
  if (!field_read_instance('node', 'field_' . $vocabulary->machine_name, 'comic')) {
    $instance = array(
      'field_name' => 'field_' . $vocabulary->machine_name,
      'entity_type' => 'node',
      'label' => $vocabulary->name,
      'bundle' => 'comic',
      'description' => $vocabulary->help,
      'widget' => array(
        'type' => 'taxonomy_autocomplete',
        'weight' => -4,
      ),
      'display' => array(
        'default' => array(
          'type' => 'taxonomy_term_reference_link',
          'weight' => 10,
        ),
        'teaser' => array(
          'type' => 'taxonomy_term_reference_link',
          'weight' => 10,
        ),
      ),
    );
    field_create_instance($instance);
    drupal_set_message(t('Forum taxonomy field has been added to comic.'));
  }
}

/**
 * Helper function, create Comic type with image and transcript fields.
 */
function _comicdrop_install_node_type_configs() {
  $types = array_keys(node_type_get_types());
  if (isset($types['comic'])) {
    drupal_set_message(t('An error was encountered on installation. The comic type already exists. ' .
    'Make sure this content type is set up as you need it to be, or delete it and try to install this module again.'));
    return;
  }
  // Create default comic type.
  $types = array(
    array(
      'type' => 'comic',
      'name' => st('Comic'),
      'base' => 'node_content',
      'description' => st('Use <em>comic posts</em> for comic posts.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 1,
    ),
  );
  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }
  drupal_set_message(t('A content type for Comics has been created.'));
  // Insert default pre-defined RDF mapping into the database.
  $rdf_mappings = array(
    array(
      'type' => 'node',
      'bundle' => 'comic',
      'mapping' => array(
        'field_image' => array(
          'predicates' => array('og:image', 'rdfs:seeAlso'),
          'type' => 'rel',
        ),
        'field_tags' => array(
          'predicates' => array('dc:subject'),
          'type' => 'rel',
        ),
      ),
    ),
  );
  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }
  if (!field_info_field('field_comic_image')) {
    $field = array(
      'field_name' => 'field_comic_image',
      'type' => 'image',
      'cardinality' => 1,
      'translatable' => TRUE,
      'locked' => FALSE,
      'indexes' => array('fid' => array('fid')),
      'settings' => array(
        'uri_scheme' => 'public',
        'default_image' => FALSE,
      ),
      'storage' => array(
        'type' => 'field_sql_storage',
        'settings' => array(),
      ),
    );
    field_create_field($field);
  }
  if (!field_info_field('field_transcript')) {
    $field = array(
      'field_name' => 'field_transcript',
      'type' => 'text_long',
      'cardinality' => 1,
    );
    field_create_field($field);
  }
  if (!field_read_instance('node', 'field_comic_image', 'comic')) {
    $instance = array(
      'field_name' => 'field_comic_image',
      'entity_type' => 'node',
      'label' => 'Image',
      'bundle' => 'comic',
      'description' => st('Upload an image to go with this post.'),
      'required' => FALSE,
      'settings' => array(
        'file_directory' => 'field/image',
        'file_extensions' => 'png gif jpg jpeg',
        'max_filesize' => '',
        'max_resolution' => '',
        'min_resolution' => '',
        'alt_field' => TRUE,
        'title_field' => TRUE,
      ),
      'widget' => array(
        'type' => 'image_image',
        'settings' => array(
          'progress_indicator' => 'throbber',
          'preview_image_style' => 'thumbnail',
        ),
        'weight' => 0,
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'image',
          'settings' => array(
            'image_style' => 'comic',
            'image_link' => '',
          ),
          'weight' => -2,
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'image',
          'settings' => array(
            'image_style' => 'comic',
            'image_link' => 'content',
          ),
          'weight' => 0,
        ),
      ),
    );
    field_create_instance($instance);
  }
  if (!field_read_instance('node', 'field_transcript', 'comic')) {
    $instance = array(
      'field_name' => 'field_transcript',
      'entity_type' => 'node',
      'label' => 'Transcript',
      'bundle' => 'comic',
      'description' => '',
      'widget' => array(
        'type' => 'text_textarea',
        'weight' => -4,
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
          'weight' => -1,
        ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'hidden',
          'weight' => -1,
        ),
      ),
    );
    field_create_instance($instance);
  }
  node_types_rebuild();
}
