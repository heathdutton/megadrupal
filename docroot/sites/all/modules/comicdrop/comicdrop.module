<?php
// $Id$

/**
 * @file
 * Comicdrop features.
 */

/**
 * Implements hook_permission().
 */
function comicdrop_permission() {
  return array(
    'administer comicdrop' => array(
      'title' => t('Administer Comicdrop settings'),
      'description' => t('Administer Comicdrop settings.'),
    ),
    'view comicdrop archive' => array(
      'title' => t('View Comicdrop archive'),
      'description' => t('View the Comicdrop archive page.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function comicdrop_menu() {
  $items['comicdrop'] = array(
    'title' => 'Comicdrop',
    'description' => 'Comic front page.',
    'page callback' => '_comicdrop_front_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['latest'] = array(
    'title' => 'Comicdrop',
    'description' => 'Comic front page.',
    'page callback' => '_comicdrop_front_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['archive'] = array(
    'title' => 'Archives',
    'description' => 'Comic archives.',
    'page callback' => '_comicdrop_page_view_archive_page',
    'access arguments' => array('view comicdrop archive'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/comicdrop'] = array(
    'title' => 'Comicdrop',
    'description' => 'Manage your comicdrop configurations.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_comicdrop_admin_settings'),
    'access arguments' => array('administer comicdrop'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function comicdrop_block_info() {
  $blocks['comicdrop_calendar'] = array(
    'info' => t('Comicdrop Calendar'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'status' => 1,
    'region' => 'sidebar_first',
  );
  $blocks['comicdrop_archive'] = array(
    'info' => t('Comicdrop Archives'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'status' => 1,
    'region' => 'sidebar_first',
  );
  $blocks['comicdrop_tagadelic'] = array(
    'info' => t('Comicdrop Tags'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'status' => 1,
    'region' => 'sidebar_first',
  );
  $blocks['comicdrop_storylines'] = array(
    'info' => t('Comicdrop Storylines'),
    'cache' => DRUPAL_CACHE_GLOBAL,
    'status' => 1,
    'region' => 'sidebar_first',
  );
  $blocks['comicdrop_secondary_display'] = array(
    'info' => t('Comicdrop Secondary Display'),
    'cache' => DRUPAL_NO_CACHE,
    'status' => 0,
    'region' => 'content',
  );
  $blocks['comicdrop_frontpage_display'] = array(
    'info' => t('Comicdrop Frontpage Display'),
    'cache' => DRUPAL_NO_CACHE,
    'status' => 0,
    'region' => 'content',
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function comicdrop_block_view($delta = '') {
  switch ($delta) {
    case 'comicdrop_calendar':
      return _comicdrop_block_view_calendar();
    break;
    case 'comicdrop_archive':
      return _comicdrop_block_view_archive();
    break;
    case 'comicdrop_tagadelic':
      return _comicdrop_block_view_tagadelic();
    break;
    case 'comicdrop_storylines':
     return _comicdrop_block_view_storylines();
    break;
    case 'comicdrop_secondary_display':
     return _comicdrop_block_view_secondary_display();
    break;
    case 'comicdrop_frontpage_display':
     return _comicdrop_block_view_frontpage_display();
    break;
  }
}

/**
 * Implements hook_node_view().
 */
function comicdrop_node_view($node, $view_mode, $langcode) {
  $types = variable_get('comicdrop_types', array('comic'));
  if (in_array($node->type, $types)) {
    // TO DO : Pass taxonomy of collection here.
    $collection = 'all';
    $page_thru = _comicdrop_comic_pagination_items($node->nid, $node->created, $collection);
    $display = variable_get('comicdrop_display_nav_position', 'one');
    if ($display != 'none') {
      $node->content['comicdrop'] = array(
        '#markup' => $page_thru,
        '#weight' => 10,
      );
      if ($display == 'two') {
        // Add the above display in addition to below.
        $node->content['comicdrop_second'] = array(
          '#markup' => $page_thru,
          '#weight' => -10,
        );
      }
    }
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function comicdrop_field_extra_fields() {
  $extra['node']['comic'] = array(
    'display' => array(
      'comicdrop' => array(
        'label' => t('Comicdrop page navigation'), 
        'description' => t('Comicdrop page navigation'), 
        'weight' => -1,
      ),
      'comicdrop_second' => array(
        'label' => t('Comicdrop secondary page navigation '), 
        'description' => t('Comicdrop secondary page navigation (when displaying both top and bottom navigations)'), 
        'weight' => -1,
      ), 
    ),
  );
  return $extra;
}

/**
 * Implements hook_node_insert().
 */
function comicdrop_node_insert($node) {
  $types = variable_get('comicdrop_types', array('comic'));
  if (in_array($node->type, $types)) {
    // Re-Calculate the earliest comic.
    variable_set('comicdrop_earliest', FALSE);
    _comicdrop_get_earliest_comic();
    // Re-Calculate the latest comic.
    variable_set('comicdrop_latest', FALSE);
    _comicdrop_get_latest_comic();
  }
}

/**
 * Implements hook_node_update().
 */
function comicdrop_node_update($node) {
  $types = variable_get('comicdrop_types', array('comic'));
  if (in_array($node->type, $types)) {
    // Re-Calculate the earliest comic.
    variable_set('comicdrop_earliest', FALSE);
    _comicdrop_get_earliest_comic();
    // Re-Calculate the latest comic.
    variable_set('comicdrop_latest', FALSE);
    _comicdrop_get_latest_comic();
  }
}

/**
 * Implements hook_node_delete().
 */
function comicdrop_node_delete($node) {
  $types = variable_get('comicdrop_types', array('comic'));
  if (in_array($node->type, $types)) {
    // Re-Calculate the earliest comic.
    variable_set('comicdrop_earliest', FALSE);
    _comicdrop_get_earliest_comic();
    // Re-Calculate the latest comic.
    variable_set('comicdrop_latest', FALSE);
    _comicdrop_get_latest_comic();
  }
}

/**
 * Implements menu callback for front page.
 */
function _comicdrop_front_page() {
  drupal_set_title(t(''));
  $nid = _comicdrop_get_latest_comic();
  if ($nid !== FALSE) {
    // Automatically forward to the latest comic on site.
    // This allows us to focus on formating comic pages only.
    // For various templating configurations.
    drupal_goto('node/' .$nid);
  }
  else {
    return '';
  }
}

/**
 * Implements menu callback for admin settings.
 */
function _comicdrop_admin_settings() {
  $types = array_keys(node_type_get_types());
  $types = array_combine($types, $types);
  $tags = array_keys(taxonomy_vocabulary_get_names());
  $tags = array_combine($tags, $tags);
  $form['comicdrop_types'] = array(
    '#type' => 'select',
    '#title' => 'Post types',
    '#options' => $types,
    '#multiple' => TRUE,
    '#description' => 'Select the types of posts to be considered comics. These posts ' .
      'will appear paginated on the front page, in the Calendar block and Archives block.',
    '#default_value' => variable_get('comicdrop_types', array('comic')),
  );
  $form['comicdrop_calendar_label'] = array(
    '#type' => 'textfield',
    '#title' => 'Calendar Format',
    '#description' => 'Set the date label for the calendar label following the conventions set up by PHP date() function.',
    '#default_value' => variable_get('comicdrop_calendar_label', 'F, Y'),
  );
  $form['comicdrop_calendar_show_future'] = array(
    '#type' => 'checkbox',
    '#title' => 'Show the future',
    '#description' => 'Check this box to show future comics on your calendar and in archives.',
    '#return_value' => TRUE,
    '#default_value' =>  variable_get('comicdrop_calendar_show_future', FALSE),
  );
  $form['comicdrop_display_tags'] = array(
    '#type' => 'select',
    '#title' => 'Tag displayed vocabularies',
    '#options' => $tags,
    '#multiple' => TRUE,
    '#description' => 'Select the types of tags to appear in the Tags block.',
    '#default_value' => variable_get('comicdrop_display_tags', array('tags')),
  );
  $form['comicdrop_image_width'] = array(
    '#type' => 'textfield',
    '#title' => 'Comic image width',
    '#description' => 'Set the width of your comic images. On upload a comic version at ' .
      'your set width will be created and used for display on site.',
    '#default_value' => variable_get('comicdrop_image_width', 720),
  );
  $form['comicdrop_storylines_mode'] = array(
    '#type' => 'select',
    '#title' => 'Storyline block format',
    '#options' => array('list' => 'list', 'dropdown' => 'dropdown'),
    '#description' => 'Select the display format for the storylines block',
    '#default_value' => variable_get('comicdrop_storylines_mode', 'dropdown'),
  );
  $form['comicdrop_display_nav_position'] = array(
    '#type' => 'select',
    '#title' => 'How many page thru navigations to display on a comic',
    '#options' => array('none' => 'none', 'one' => 'one', 'two' => 'two'),
    '#description' => 'Select one display or two (or none). To control where the displays show on your comic modify the display settings under "Manage Display" for your comic content type.',
    '#default_value' => variable_get('comicdrop_display_nav_position', 'one'),
  );
  $form['labels'] = array(
    '#type' => 'fieldset',
    '#title' => 'Page Through Labels',
    '#description' => 'Provide labels for Comicdrop elements.',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    );
  $form['labels']['comicdrop_first_label'] = array(
    '#type' => 'textfield',
    '#title' => 'First',
    '#description' => 'Set the text label for the first button',
    '#default_value' => variable_get('comicdrop_first_label', '<<'),
  );
  $first_label_file = variable_get('comicdrop_first_label_file', '');
  if (!empty($first_label_file)) {
    $first_label_file = '<img src="' . file_create_url($first_label_file->uri) . '">';
    $form['labels']['comicdrop_first_label_image'] = array(
      '#type' => 'item', 
      '#markup' => $first_label_file,
    );
  }
  $form['labels']['comicdrop_first_label_file'] = array(
    '#type' => 'file', 
    '#title' => t('Upload image'), 
    '#size' => 48, 
    '#description' => 'Set the image for the first button',
  );
  $form['labels']['comicdrop_prev_label'] = array(
    '#type' => 'textfield',
    '#title' => 'Previous',
    '#description' => 'Set the text label for the previous button',
    '#default_value' => variable_get('comicdrop_prev_label', '<'),
  );
  $prev_label_file = variable_get('comicdrop_prev_label_file', '');
  if (!empty($prev_label_file)) {
    $prev_label_file = '<img src="' . file_create_url($prev_label_file->uri) . '">';
    $form['labels']['comicdrop_prev_label_image'] = array(
      '#type' => 'item', 
      '#markup' => $prev_label_file,
    );
  }
  $form['labels']['comicdrop_prev_label_file'] = array(
    '#type' => 'file', 
    '#title' => t('Upload image'), 
    '#size' => 48, 
    '#description' => 'Set the image for the previous button',
  );
  $form['labels']['comicdrop_random_label_show'] = array(
    '#type' => 'checkbox',
    '#title' => 'Show the random link',
    '#description' => 'Check this box to show the random link on your comic navigation.',
    '#return_value' => TRUE,
    '#default_value' =>  variable_get('comicdrop_random_label_show', TRUE),
  );
  $form['labels']['comicdrop_random_label'] = array(
    '#type' => 'textfield',
    '#title' => 'Random',
    '#description' => 'Set the text label for the random button',
    '#default_value' => variable_get('comicdrop_random_label', 'random'),
  );
  $random_label_file = variable_get('comicdrop_random_label_file', '');
  if (!empty($random_label_file)) {
    $random_label_file = '<img src="' . file_create_url($random_label_file->uri) . '">';
    $form['labels']['comicdrop_random_label_image'] = array(
      '#type' => 'item', 
      '#markup' => $random_label_file,
    );
  }
  $form['labels']['comicdrop_random_label_file'] = array(
    '#type' => 'file', 
    '#title' => t('Upload image'), 
    '#size' => 48, 
    '#description' => 'Set the image for the random button',
  );
  $form['labels']['comicdrop_archives_label_show'] = array(
    '#type' => 'checkbox',
    '#title' => 'Show the archives link',
    '#description' => 'Check this box to show the archives link on your comic navigation.',
    '#return_value' => TRUE,
    '#default_value' =>  variable_get('comicdrop_archives_label_show', TRUE),
  );
  $form['labels']['comicdrop_archives_label'] = array(
    '#type' => 'textfield',
    '#title' => 'Archive',
    '#description' => 'Set the text label for the archive button',
    '#default_value' => variable_get('comicdrop_archives_label', 'archives'),
  );
  $archives_label_file = variable_get('comicdrop_archives_label_file', '');
  if (!empty($archives_label_file)) {
    $archives_label_file = '<img src="' . file_create_url($archives_label_file->uri) . '">';
    $form['labels']['comicdrop_archives_label_image'] = array(
      '#type' => 'item', 
      '#markup' => $archives_label_file,
    );
  }
  $form['labels']['comicdrop_archives_label_file'] = array(
    '#type' => 'file', 
    '#title' => t('Upload image'), 
    '#size' => 48, 
    '#description' => 'Set the image for the archive button',
  );
  $form['labels']['comicdrop_next_label'] = array(
    '#type' => 'textfield',
    '#title' => 'Next',
    '#description' => 'Set the text label for the next button',
    '#default_value' => variable_get('comicdrop_next_label', '>'),
  );
  $next_label_file = variable_get('comicdrop_next_label_file', '');
  if (!empty($next_label_file)) {
    $next_label_file = '<img src="' . file_create_url($next_label_file->uri) . '">';
    $form['labels']['comicdrop_next_label_image'] = array(
      '#type' => 'item', 
      '#markup' => $next_label_file,
    );
  }
  $form['labels']['comicdrop_next_label_file'] = array(
    '#type' => 'file', 
    '#title' => t('Upload image'), 
    '#size' => 48, 
    '#description' => 'Set the image for the next button',
  );
  $form['labels']['comicdrop_last_label'] = array(
    '#type' => 'textfield',
    '#title' => 'Latest',
    '#description' => 'Set the text label for the latest button',
    '#default_value' => variable_get('comicdrop_last_label', '>>'),
  );
  $last_label_file = variable_get('comicdrop_last_label_file', '');
  if (!empty($last_label_file)) {
    $last_label_file = '<img src="' . file_create_url($last_label_file->uri) . '">';
    $form['labels']['comicdrop_last_label_image'] = array(
      '#type' => 'item', 
      '#markup' => $last_label_file,
    );
  }
  $form['labels']['comicdrop_last_label_file'] = array(
    '#type' => 'file', 
    '#title' => t('Upload image'), 
    '#size' => 48, 
    '#description' => 'Set the image for the latest button',
  );
  $form['labels']['comicdrop_label_mode'] = array(
    '#type' => 'checkbox',
    '#title' => 'Use image labels',
    '#description' => 'Use images for labels instead of text',
    '#default_value' =>  variable_get('comicdrop_label_mode', FALSE),
    '#return_value' => TRUE,
  );
  $form['zinit'] = array(
    '#type' => 'fieldset',
    '#title' => 'Intialize Comicdrop Configurations',
    '#description' => 'This feature is a one-click configuration for convenience to '.
      'initialize your site with useful defaults. All settings set during the '.
      'initialization can be overwritten or corrected later. All actions taken by any '.
      'of these settings can be performed by hand as well! This is just to make it easy. '.
      'Use this if you just installed Drupal and you want to get started right away.',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['zinit']['comicdrop_add_tags'] = array(
    '#type' => 'checkbox',
    '#title' => 'Add tags to comics',
    '#description' => 'Add the tags selected below to your selected comic types.',
    '#return_value' => TRUE,
  );
  $form['zinit']['comicdrop_add_tags_tags'] = array(
    '#type' => 'select',
    '#title' => 'Tag vocabularies',
    '#options' => $tags,
    '#multiple' => TRUE,
    '#description' => 'Select the types of tags to go with comics. ' .
      'These tags will appear in the Comic post node to associate with the comic ' .
      '(forums will cross post the comic to the forum).',
  );
  $form['zinit']['comicdrop_suggested_settings_users'] = array(
    '#type' => 'checkbox',
    '#title' => 'Suggested user settings',
    '#description' => 'Check this box to initialize suggested settings for your users.',
    '#return_value' => TRUE,
  );
  $form['zinit']['comicdrop_suggested_settings_site'] = array(
    '#type' => 'checkbox',
    '#title' => 'Suggested site settings',
    '#description' => 'Check this box to initialize suggested settings for your website.',
    '#return_value' => TRUE,
  );
  $form['zinit']['comicdrop_suggested_settings_comments'] = array(
    '#type' => 'checkbox',
    '#title' => 'Suggested comment settings',
    '#description' => 'Check this box to initialize suggested settings for your comments: Turn threading off on all content types.',
    '#return_value' => TRUE,
  );
  $form['zinit']['comicdrop_suggested_settings_forums'] = array(
    '#type' => 'checkbox',
    '#title' => 'Create forums',
    '#description' => 'Check this box to initialize forums on the site. This also creates a Comics Discussion forum and adds '.
      'forums as a possible comic taxonomy.',
    '#return_value' => TRUE,
  );
  $form['zinit']['comicdrop_suggested_settings_blogs'] = array(
    '#type' => 'checkbox',
    '#title' => 'Create a blogroll',
    '#description' => 'Check this box to initialize a blogroll on the site.',
    '#return_value' => TRUE,
  );
  $form['zinit']['comicdrop_suggested_settings_menus'] = array(
    '#type' => 'checkbox',
    '#title' => 'Create a main menu',
    '#description' => 'Check this box to initialize main menu links for the site.',
    '#return_value' => TRUE,
  );
  $form['comicdrop_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update Comicdrop settings'),
  );
  return $form;
}

/**
 * Implements admin settings form submission.
 */
function _comicdrop_admin_settings_submit($form, &$form_state) {
  $values = $form_state['values'];
  variable_set('comicdrop_first_label', $values['comicdrop_first_label']);
  variable_set('comicdrop_prev_label', $values['comicdrop_prev_label']);
  variable_set('comicdrop_random_label', $values['comicdrop_random_label']);
  variable_set('comicdrop_random_label_show', $values['comicdrop_random_label_show']);
  variable_set('comicdrop_archives_label', $values['comicdrop_archives_label']);
  variable_set('comicdrop_archives_label_show', $values['comicdrop_archives_label_show']);
  variable_set('comicdrop_next_label', $values['comicdrop_next_label']);
  variable_set('comicdrop_last_label', $values['comicdrop_last_label']);
  variable_set('comicdrop_calendar_show_future', $values['comicdrop_calendar_show_future']);
  variable_set('comicdrop_storylines_mode', $values['comicdrop_storylines_mode']);
  variable_set('comicdrop_label_mode', $values['comicdrop_label_mode']);
  variable_set('comicdrop_calendar_label', $values['comicdrop_calendar_label']);
  variable_set('comicdrop_display_nav_position', $values['comicdrop_display_nav_position']);
  $validators = array(
    'file_validate_is_image' => array(), 
  );
  $filenames = array(
    'comicdrop_first_label_file',
    'comicdrop_prev_label_file',
    'comicdrop_archives_label_file',
    'comicdrop_random_label_file',
    'comicdrop_next_label_file',
    'comicdrop_last_label_file',
  );
  foreach ($filenames as $filename) {
    $file = file_save_upload($filename, $validators);
    if ($file === FALSE) {
      form_set_error('picture_upload', t("Failed to upload the picture image; the tmp directory doesn't exist or is not writable."));
    }
    elseif ($file !== NULL) {
      // If the picture is a temporary file move it to its final location and make it permanent.
      if (!$file->status) {
        $info = image_get_info($file->uri);
        $dir = file_default_scheme() . '://comicdrop';
        // Prepare the pictures directory.
        file_prepare_directory($dir, FILE_CREATE_DIRECTORY);
        $destination = file_stream_wrapper_uri_normalize($dir . '/' . $filename . '.' . $info['extension']); // Save to the same spot each time.
        // Move the temporary file into the final location.
        if ($file = file_move($file, $destination, FILE_EXISTS_REPLACE)) {
          $file->status = FILE_STATUS_PERMANENT;
          $file = file_save($file);
          variable_set($filename, $file); // Store the file structure for reference.
        }
      }
    }
  }
  if (!empty($values['comicdrop_types'])) {
    variable_set('comicdrop_types', $values['comicdrop_types']);
  }
  // Re-Calculate the earliest comic.
  variable_set('comicdrop_earliest', FALSE);
  _comicdrop_get_earliest_comic();
  // Re-Calculate the latest comic.
  variable_set('comicdrop_latest', FALSE);
  _comicdrop_get_latest_comic();
  if (!empty($values['comicdrop_display_tags'])) {
    variable_set('comicdrop_display_tags', $values['comicdrop_display_tags']);
  }
  if (!empty($values['comicdrop_image_width']) && is_numeric($values['comicdrop_image_width'])) {
    _comicdrop_install_image_style_configs($values['comicdrop_image_width']);
    variable_set('comicdrop_image_width', $values['comicdrop_image_width']);
  }
  if (!empty($values['comicdrop_add_tags']) && $values['comicdrop_add_tags'] === TRUE) {
    variable_set('comicdrop_tags', $values['comicdrop_add_tags_tags']);
    module_load_include('inc', 'comicdrop', 'comicdrop.suggestions');
    _comicdrop_install_node_type_taxonomy_configs();  // Add selected tax. vocabs to selected types.
  }
  if (!empty($values['comicdrop_suggested_settings_users']) && $values['comicdrop_suggested_settings_users'] === TRUE) {
    module_load_include('inc', 'comicdrop', 'comicdrop.suggestions');
    _comicdrop_install_user_configs();                // Initialize user profile configurations, registration and signatures.
  }
  if (!empty($values['comicdrop_suggested_settings_site']) && $values['comicdrop_suggested_settings_site'] === TRUE) {
    module_load_include('inc', 'comicdrop', 'comicdrop.suggestions');
    _comicdrop_install_site_configs();                // Initialize site configurations, caching, frontpage and error reporting.
  }
  if (!empty($values['comicdrop_suggested_settings_comments']) && $values['comicdrop_suggested_settings_comments'] === TRUE) {
    module_load_include('inc', 'comicdrop', 'comicdrop.suggestions');
    _comicdrop_install_node_thread_configs();         // Turn off threading on all posts. Cause really. No one wants that.
  }
  if (!empty($values['comicdrop_suggested_settings_forums']) && $values['comicdrop_suggested_settings_forums'] === TRUE) {
    module_load_include('inc', 'comicdrop', 'comicdrop.suggestions');
    _comicdrop_install_comic_forum_configs();         // Add a new forum to the forum configurations.
  }
  if (!empty($values['comicdrop_suggested_settings_blogs']) && $values['comicdrop_suggested_settings_blogs'] === TRUE) {
    module_load_include('inc', 'comicdrop', 'comicdrop.suggestions');
    _comicdrop_install_menu_blogroll_configs();       // Add a new blogroll menu with initial configuration.
  }
  if (!empty($values['comicdrop_suggested_settings_menus']) && $values['comicdrop_suggested_settings_menus'] === TRUE) {
    module_load_include('inc', 'comicdrop', 'comicdrop.suggestions');
    _comicdrop_install_menu_configs();                // Create initial menus.
  }
}

/**
 * Implements block callback for calendar.
 */
function _comicdrop_block_view_calendar() {
  $block['subject'] = t('Calendar');
  $types = variable_get('comicdrop_types', array('comic'));
  $output = '';
  $offset = date('m') . '/1/' . date('Y');
  $params = drupal_get_query_parameters();
  if (!empty($params['cdrop_cal']) && is_numeric($params['cdrop_cal'])) {
    $cdrop_cal = $params['cdrop_cal'];
    $test_day = date(substr($cdrop_cal, 4, 2) . '/1/' . substr($cdrop_cal, 0, 4));
    if (strtotime($test_day) && strtotime($test_day) != -1 && ( strtotime($test_day) <= strtotime('today') || variable_get('comicdrop_calendar_show_future', FALSE) )) {
      $offset = substr($cdrop_cal, 4, 2) . '/1/' . substr($cdrop_cal, 0, 4);
    }
  }
  $requested = strtotime($offset);
  $prev = date('Ym', strtotime('-1 month', $requested));
  $next = date('Ym', strtotime('0 month', $requested));;
  if (strtotime('1 month', $requested) <= strtotime('today') || variable_get('comicdrop_calendar_show_future', FALSE)) {
    $next = date('Ym', strtotime('1 month', $requested));
  }
  $num_day = date('t', $requested);
  $first_day = strtotime(date('F 01, Y', $requested));
  $last_day = strtotime( date('F ' . $num_day . ', Y', $requested) );
  $days = array();
  $startson = date('N', $first_day);
  if ($startson > 1) {
    for ( $i=1; $i < $startson; $i++) {
      $days[] = '-';
    }
  }
  $result = db_select('node', 'n')
    ->fields('n', array('nid', 'created'))
    ->condition('n.created', $first_day, '>=' )
    ->condition('n.created', $last_day, '<=')
    ->condition('n.status', 1, '=')
    ->condition('n.type', $types, 'IN')
    ->addTag('node_access')
    ->execute();
  $posts = array();
  foreach ($result as $node) {
    $post_date = date('ymd', $node->created);
    $posts[$post_date] = $node->nid;
  }
  for ( $this_date=1; $this_date <= $num_day; $this_date++ ) {
    $this_date_link = $this_date;
    $check_date = date('ymd', strtotime( date('F ' . $this_date . ', Y', $requested) ) );
    if ( !empty( $posts[$check_date] ) ) {
      $this_date_link = l($this_date, 'node/' . $posts[$check_date] );
    }
    $days[] = $this_date_link;
  }
  $startson = date('N', $last_day);
  if ($startson < 7) { // Does not end on Sunday
    for ( $i=$startson +1 ; $i < 8; $i++) {
      $days[] = '-';
    }
  }
  // We now have an array of days for the month. Padded to week on either side.
  $header = array('M', 'T', 'W', 'H', 'F', 'S', 'S');
  $rows = array_chunk($days, 7);
  $links = array();
  $links[] = l('<<',  request_path(), array( 'query' => array('cdrop_cal' => $prev)));
  $links[] = date(variable_get('comicdrop_calendar_label', 'F, Y'), $requested);
  $links[] = l('>>',  request_path(), array( 'query' => array('cdrop_cal' => $next)));
  $vars = array('items' => $links, 'title' => '', 'type' => 'ul', 'attributes' => array('class' => 'pager', 'style' => 'font-size:1.2em;'));
  $caption = theme( 'item_list', $vars );
  $vars = array('header' => $header, 'rows' => $rows, 'attributes' => array(), 'caption' => $caption , 'colgroups' => array(), 'sticky' => FALSE, 'empty' => NULL  );
  $output .= theme('table', $vars );
  $block['content'] = $output;
  return $block;
}

/**
 * Implements block callback for archive.
 */
function _comicdrop_block_view_archive() {
  $block['subject'] = t('Archives');
  $types = variable_get('comicdrop_types', array('comic'));
  $output = '';
  $result = db_select('node', 'n')
    ->fields('n', array('nid', 'created'))
    ->condition('n.status', 1, '=')
    ->condition('n.type', $types, 'IN')
    ->orderBy('n.created', 'DESC')
    ->addTag('node_access')
    ->execute();
  $posts = array();
  $year = '';
  foreach ($result as $node) {
    $year = date('Y', $node->created);
    $month = date('m', $node->created);
    if (isset($posts[$year][$year . $month]['count'])) {
      $posts[$year][$year . $month]['count']++;
    }
    else {
      $posts[$year][$year . $month]['count'] = 1;
    }
    $posts[$year][$year . $month]['text'] = date('F', $node->created) . ' ' . date('Y', $node->created);
    $posts[$year][$year . $month]['cdrop_arc'] = $year . $month;
  }
  $links = array();
  foreach ($posts as $year => $months) {
    $month_links = array();
    foreach ($months as $month) {
      $links[] = l($month['text'] . ' (' . $month['count'] . ')' , 'archive/' . $month['cdrop_arc']);
    }
  }
  if (empty($links)) {
    $links[] = 'There are no comics currently.';
  }
  $vars = array('items' => $links, 'title' => '', 'type' => 'ul', 'attributes' => array('class' => 'menu'));
  $output = theme( 'item_list', $vars );
  $block['content'] = $output;
  return $block;
}

/**
 * Implements block callback for tags.
 */
function _comicdrop_block_view_tagadelic() {
  $block['subject'] = t('Tags');
  $vocab_machine_names = variable_get('comicdrop_display_tags', array('tags'));
  $output = '';
  $tags = array();
  foreach ($vocab_machine_names as $name) {
    $vocab = taxonomy_vocabulary_machine_name_load($name);
    $tree = taxonomy_get_tree($vocab->vid);
    foreach ($tree as $leaf) {
      $tags[$leaf->tid] =  l( $leaf->name, 'taxonomy/term/' . $leaf->tid );
    }
  }
  if (empty($tags)) {
    $tags[] = 'There are no tags currently.';
  }
  $vars = array('items' => $tags, 'title' => '', 'type' => 'ul', 'attributes' => array());
  $output = theme('item_list', $vars);
  $block['content'] = $output;
  return $block;
}

/**
 * Implements block callback for storyline dropdown.
 */
function _comicdrop_block_view_storylines() {
  $block['subject'] = t('Storylines');
  $mode = variable_get('comicdrop_storylines_mode', 'dropdown');
  switch ($mode) {
    case 'list':
      $block['content'] = _comicdrop_block_view_storylines_list();
    break;
    case 'dropdown':
    default:
      $block['content'] = drupal_get_form('_comicdrop_block_view_storylines_dropdown');
    break;
  }
  return $block;
}

function _comicdrop_block_view_storylines_list() {
  $vocab_machine_names = variable_get('comicdrop_display_storylines', array('storylines'));
  $tags = array();
  foreach ($vocab_machine_names as $name) {
    $vocab = taxonomy_vocabulary_machine_name_load($name);
    $tree = taxonomy_get_tree($vocab->vid);
    foreach ($tree as $leaf) {
      $tags[$leaf->tid] =  l( $leaf->name, 'taxonomy/term/' . $leaf->tid );
    }
  }
  if (empty($tags)) {
    $tags[] = 'There are no tags currently.';
  }
  $vars = array('items' => $tags, 'title' => '', 'type' => 'ul', 'attributes' => array('class' => 'menu'));
  return theme('item_list', $vars);
}

function _comicdrop_block_view_storylines_dropdown() {
  $vocab_machine_names = variable_get('comicdrop_display_storylines', array('storylines'));
  $tags = array();
  foreach ($vocab_machine_names as $name) {
    $vocab = taxonomy_vocabulary_machine_name_load($name);
    $tree = taxonomy_get_tree($vocab->vid);
    foreach ($tree as $leaf) {
      $tags['taxonomy/term/' . $leaf->tid] =  $leaf->name;
    }
  }
  if (empty($tags)) {
    $form['no_storylines'] = array(
      '#markup' => t('There are no storylines currently.'),
    );
  }
  else {
    $form['storylines_select'] = array(
      '#type' => 'select',
      '#options' => $tags,
    );
    $form['storylines_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Go'),
    );
  }
  return $form;
}

function _comicdrop_block_view_storylines_dropdown_submit($form, &$form_state) {
  $values = $form_state['values'];
  drupal_goto($values['storylines_select']);
}

/**
 * Implements block callback for secondary display.
 */
function _comicdrop_block_view_secondary_display() {
  $block['subject'] = t('Comic Display');
  $block['content'] = t('Please modify the display status for this block. It should only be displayed on node pages of type comic.');
  $is_node = arg(0);
  $nid = arg(1);
  if ($is_node == 'node' && is_numeric($nid)) {
    $node = node_load($nid);
    $types = variable_get('comicdrop_types', array('comic'));
    if (in_array($node->type, $types)) {
      $block['content'] = node_view($node, 'full');
      unset($block['content']['comments']); // Remove comments from secondary display.
    }
  }
  return $block;
}

/**
 * Implements block callback for frontpage dropdown.
 */
function _comicdrop_block_view_frontpage_display() {
  $block['subject'] = t('Comic Display');
  $block['content'] = t('Please modify the display status for this block. It should only be displayed on the front page of your site.');
  $nid = _comicdrop_get_latest_comic();
  if (is_numeric($nid)) {
    $node = node_load($nid);
    $types = variable_get('comicdrop_types', array('comic'));
    if (in_array($node->type, $types)) {
      $block['content'] = node_view($node, 'full');
      unset($block['content']['comments']);
    }
  }
  return $block;
}

/**
 * Implements menu callback for archive view.
 */
function _comicdrop_page_view_archive_page($cdrop_arc = 'today') {
  $types = variable_get('comicdrop_types', array('comic'));
  $cdrop_y = date('Y');
  $cdrop_m = date('m');
  if (!empty($cdrop_arc) && is_numeric($cdrop_arc)) {
    $test_day = date(substr($cdrop_arc, 4, 2) . '/1/' . substr($cdrop_arc, 0, 4));
    if (strtotime($test_day) && strtotime($test_day) != -1 && strtotime($test_day) <= strtotime('today')) {
      $cdrop_y = substr($cdrop_arc, 0, 4);
      $cdrop_m = substr($cdrop_arc, 4, 2);
    }
  }
  drupal_set_title(t('Archive: @month / @year', array('@month' => date('F', strtotime($cdrop_m . '/1/' . $cdrop_y) ), '@year' => $cdrop_y)));
  $first_day = strtotime($cdrop_m . '/1/' . $cdrop_y);
  $num_days = date('t', $first_day);
  $last_day = strtotime($cdrop_m . '/' . $num_days . '/' . $cdrop_y);
  $query = db_select('node', 'n')->extend('PagerDefault');
  $nids = $query
    ->fields('n', array('nid', 'sticky', 'created'))
    ->condition('n.created', $first_day, '>=' )
    ->condition('n.created', $last_day, '<=')
    ->condition('n.status', 1, '=')
    ->condition('n.type', $types, 'IN')
    ->orderBy('n.sticky', 'DESC')
    ->orderBy('n.created', 'DESC')
    ->limit(variable_get('default_nodes_main', 10))
    ->addTag('node_access')
    ->execute()
    ->fetchCol();
  if (!empty($nids)) {
    $nodes = node_load_multiple($nids);
    $build = node_view_multiple($nodes);
    $build['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5,
    );
  }
  else {
    $build['no_content'] = array(
      '#prefix' => '<p>',
      '#markup' => t('There is currently no content published for this month.'),
      '#suffix' => '</p>',
    );
  }
  return $build;
}

/**
 * Helper function, gets latest comic by type. Caches if not set.
 */
function _comicdrop_get_latest_comic($collection = 'all') {
  // TODO filter by taxonomy, all means all.
  $nid = variable_get('comicdrop_latest', FALSE);
  if ($nid === FALSE) {
    $types = variable_get('comicdrop_types', array('comic'));
    $result = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.status', 1, '=')
      ->condition('n.type', $types, 'IN')
      ->addTag('node_access')
      ->orderBy('n.created', 'DESC')
      ->range(0, 1)
      ->execute();
    foreach ($result as $row) {
      if (!empty($row->nid)) {
        variable_set('comicdrop_latest', $row->nid);
      }
    }
    $nid = variable_get('comicdrop_latest', FALSE);
  }
  return $nid;
}

/**
 * Helper function, gets earliest comic by type. Caches if not set.
 */
function _comicdrop_get_earliest_comic($collection = 'all') {
  // TODO filter by taxonomy, all means all.
  $nid = variable_get('comicdrop_earliest', FALSE);
  if ($nid === FALSE) {
    $types = variable_get('comicdrop_types', array('comic'));
    $result = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.status', 1, '=')
      ->condition('n.type', $types, 'IN')
      ->addTag('node_access')
      ->orderBy('n.created', 'ASC')
      ->range(0, 1)
      ->execute();
    foreach ($result as $row) {
      if (!empty($row->nid)) {
        variable_set('comicdrop_earliest', $row->nid);
      }
    }
    $nid = variable_get('comicdrop_earliest', FALSE);
  }
  return $nid;
}

/**
 * Helper function, gets next comic by type based on comic created date.
 */
function _comicdrop_get_next_comic($created, $collection = 'all') {
  // TODO filter by taxonomy, all means all.
  $types = variable_get('comicdrop_types', array('comic'));
  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.status', 1, '=')
    ->condition('n.type', $types, 'IN')
    ->condition('n.created', $created, '>')
    ->addTag('node_access')
    ->orderBy('n.created', 'ASC')
    ->range(0, 1)
    ->execute();
  foreach ($result as $row) {
    if (!empty($row->nid)) {
      $next = $row->nid;
    }
  }
  return $next;
}


/**
 * Helper function, gets previous comic by type based on comic created date.
 */
function _comicdrop_get_prev_comic($created, $collection = 'all') {
  // TODO filter by taxonomy, all means all.
  $types = variable_get('comicdrop_types', array('comic'));
  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.status', 1, '=')
    ->condition('n.type', $types, 'IN')
    ->condition('n.created', $created, '<')
    ->addTag('node_access')
    ->orderBy('n.created', 'DESC')
    ->range(0, 1)
    ->execute();
  foreach ($result as $row) {
    if (!empty($row->nid)) {
      $prev = $row->nid;
    }
  }
  return $prev;
}

/**
 * Helper function, gets random comic by type based on comic created date.
 */
function _comicdrop_get_random_comic($collection = 'all') {
  // TODO filter by taxonomy, all means all.
  $types = variable_get('comicdrop_types', array('comic'));
  $result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.status', 1, '=')
    ->condition('n.type', $types, 'IN')
    ->addTag('node_access')
    ->orderRandom()
    ->range(0, 1)
    ->execute();
  foreach ($result as $row) {
    if (!empty($row->nid)) {
      $random = $row->nid;
    }
  }
  return $random;
}

/**
 * Helper function, getscomic pagination for a specific comic.
 */
function _comicdrop_comic_pagination_items($nid, $created, $collection = 'all') {
  $latest = _comicdrop_get_latest_comic($collection);
  $earliest = _comicdrop_get_earliest_comic($collection);
  if ($nid == $latest) {
    $next = $nid;
  }
  else {
    $next = _comicdrop_get_next_comic($created, $collection);
  }
  if ($nid == $earliest) {
    $prev = $nid;
  }
  else {
    $prev = _comicdrop_get_prev_comic($created, $collection);
  }
  $items = array();
  $first_label = variable_get('comicdrop_first_label', '<<');
  $first_label_file = variable_get('comicdrop_first_label_file', '');
  if (!empty($first_label_file) && variable_get('comicdrop_label_mode', FALSE)) {
    $first_label = '<img src="' . file_create_url($first_label_file->uri) . '">';
  }
  $prev_label = variable_get('comicdrop_prev_label', '<');
  $prev_label_file = variable_get('comicdrop_prev_label_file', '');
  if (!empty($prev_label_file) && variable_get('comicdrop_label_mode', FALSE)) {
    $prev_label = '<img src="' . file_create_url($prev_label_file->uri) . '">';
  }
  $random_label = variable_get('comicdrop_random_label', 'random');
  $random_label_file = variable_get('comicdrop_random_label_file', '');
  if (!empty($random_label_file) && variable_get('comicdrop_label_mode', FALSE)) {
    $random_label = '<img src="' . file_create_url($random_label_file->uri) . '">';
  }
  $archives_label = variable_get('comicdrop_archives_label', 'archives');
  $archives_label_file = variable_get('comicdrop_archives_label_file', '');
  if (!empty($archives_label_file) && variable_get('comicdrop_label_mode', FALSE)) {
    $archives_label = '<img src="' . file_create_url($archives_label_file->uri) . '">';
  }
  $next_label = variable_get('comicdrop_next_label', '>');
  $next_label_file = variable_get('comicdrop_next_label_file', '');
  if (!empty($next_label_file) && variable_get('comicdrop_label_mode', FALSE)) {
    $next_label = '<img src="' . file_create_url($next_label_file->uri) . '">';
  }
  $last_label = variable_get('comicdrop_last_label', '>>');
  $last_label_file = variable_get('comicdrop_last_label_file', '');
  if (!empty($last_label_file) && variable_get('comicdrop_label_mode', FALSE)) {
    $last_label = '<img src="' . file_create_url($last_label_file->uri) . '">';
  }
  $options = array('html'=>TRUE);
  $items[] = l( $first_label, 'node/' . $earliest, $options);
  $items[] = l( $prev_label, 'node/' . $prev, $options);
  if (variable_get('comicdrop_random_label_show', TRUE) === TRUE) {
    $random = _comicdrop_get_random_comic();
    $items[] = l( $random_label, 'node/' . $random, $options);
  }
  if (variable_get('comicdrop_archives_label_show', TRUE) === TRUE) {
    $items[] = l( $archives_label, 'archive', $options);
  }
  //$items[] = l( variable_get('comicdrop_purchase_label', 'purchase'), 'node/' . $next . '/purchase'),
  $items[] = l( $next_label, 'node/' . $next, $options);
  $items[] = l( $last_label, 'node/' . $latest, $options);
  $vars = array('items' => $items, 'title' => '', 'type' => 'ul', 'attributes' => array('class' => 'pager comic-pager'));
  return theme('item_list', $vars);
}

/**
 * Helper function, updates the width of a image style confirguration directly.
 */
function _comicdrop_install_image_style_configs($width = 720) {
  $styles = image_styles();
  $comic_image_style = array('name' => 'comic');
  if (!empty($styles['comic'])) {
    $comic_image_style = $styles['comic'];
  }
  $comic_image_style = image_style_save($comic_image_style);
  $commic_image_effect['name'] = 'image_scale';
  if (!empty($styles['comic']['effects'])) {
    foreach ($styles['comic']['effects'] as $this_effect) {
      if ($this_effect['name'] = 'image_scale') {
        $commic_image_effect = $this_effect;
      }
    }
  }
  $commic_image_effect['name'] = 'image_scale';
  $commic_image_effect['isid'] = $comic_image_style['isid'];
  $commic_image_effect['data']['width'] = $width;
  $commic_image_effect['weight'] = 1;
  image_effect_save($commic_image_effect);
}