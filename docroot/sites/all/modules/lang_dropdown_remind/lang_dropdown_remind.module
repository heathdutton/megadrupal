<?php

/**
 * @file
 * Hooks and functions for the Language Switcher Reminder module.
 */

/**
 * Implements hook_menu()
 */
function lang_dropdown_remind_menu() {
  // AJAX callback for browser language preference retrieval.
  $items['i18n/ajax/preferences'] = array(
    'title' => 'Language preference JSON callback',
    'page callback' => 'lang_dropdown_remind_get_preferences',
    'delivery callback' => 'lang_dropdown_remind_json_deliver',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Configuration form for this module.
  $items['admin/config/user-interface/language-switcher-reminder'] = array(
    'title' => 'Language Switcher Reminder',
    'description' => 'Configure language switcher reminder settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('variable_module_form', 'lang_dropdown_remind'),
    'access arguments' => array('administer language switcher reminder'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function lang_dropdown_remind_permission() {
  return array(
    'administer language switcher reminder' => array(
      'title' => t('Administer language switcher reminder'),
      'description' => t('Configure the message and markup for language switcher reminders'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Delivery callback for generic JSON callback.
 */
function lang_dropdown_remind_json_deliver($page_callback_result) {
  drupal_add_http_header('Content-Type', 'application/json; charset=utf-8');
  drupal_add_http_header('Vary', 'Accept-Language');
  print drupal_json_encode($page_callback_result);
  ajax_footer();
}

/**
 * Implements hook_preprocess_html().
 */
function lang_dropdown_remind_preprocess_html(&$vars) {
  // Determine the path to the callback based on a configuration.
  if (variable_get_value('lang_dropdown_remind_high_performance')) {
    $path = base_path() . drupal_get_path('module', 'lang_dropdown_remind');
    $path .=  '/lang_dropdown_remind.callback.php';
  }
  else {
    $path = base_path() . 'i18n/ajax/preferences';
  }

  // Hard-code a key in Drupal.settings that represents the AJAX path. We do
  // this here to ensure our method on the Drupal object always has a path.
  $inline = 'Drupal.settings.getLanguagePreferencePath = "' . $path . '";';
  drupal_add_js($inline, array(
    'type' => 'inline',
    'group' => JS_LIBRARY,
    'every_page' => TRUE,
  ));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function lang_dropdown_remind_form_lang_dropdown_form_alter(&$form, &$form_state, $form_id) {
  // For our mutual convenience...
  $attached = &$form['lang_dropdown_select']['#attached'];

  // Attach our JavaScript to the request.
  $path = drupal_get_path('module', 'lang_dropdown_remind');
  $attached['js'][] = $path . '/js/attachToLangDropdown.js';

  // Properly filter and construct our settings, then attach.
  $settings = array(
    'markup' => filter_xss_admin(variable_get_value('lang_dropdown_remind_markup')),
    'messages' => lang_dropdown_remind_get_variables('lang_dropdown_remind_message'),
    'close' => lang_dropdown_remind_get_variables('lang_dropdown_remind_close'),
    'repeat' => variable_get_value('lang_dropdown_remind_repeat'),
    'prependto' => variable_get_value('lang_dropdown_remind_prependto'),
  );
  $attached['js'][] = array(
    'type' => 'setting',
    'data' => array('lang_dropdown_remind' => $settings),
  );
}

/**
 * Returns an array of languages passed as part of the "Accept-Language" HTTP
 * header on the current request.
 *
 * @return array
 *   An array of ISO-639 language abbreviations, keyed by quality value, sorted
 *   in descending order (so the preferred language is at the beginning).
 *
 * @see i18n_preferences_menu()
 */
function lang_dropdown_remind_get_preferences() {
  static $codes = array();

  if (empty($codes)) {
    // If an accept language request header was passed, parse it.
    if (isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) {
      // Loop through each provided language.
      foreach (explode(',', $_SERVER['HTTP_ACCEPT_LANGUAGE']) as $language) {
        // If a quality value was given, add it to the array with its value.
        $regex = '/(.*?);.*?q=([+-]?\\d*\\.\\d+)(?![-+0-9\\.])/is';
        if (preg_match_all($regex, $language, $parts)) {
          $codes[$parts[2][0]] = check_plain($parts[1][0]);
        }
        // If no quality value was given, add it with q=1.
        else {
          $codes[1] = check_plain($language);
        }
      }
    }
  }
  krsort($codes);

  return $codes;
}

/**
 * Returns translatable variables in all languages.
 *
 * @param string $variable
 *   The name of the translatable variable to return.
 * @return array
 *   An array of localized variable values, keyed by the first two letters of
 *   the language code.
 */
function lang_dropdown_remind_get_variables($variable) {
  $translatables = array();

  // Always include something with key 'en' as a fallback in JS.
  $translatables['default'] = variable_get_value($variable);

  // Loop through all defined languages and add the translated message.
  foreach (language_list() as $lang => $language) {
    if ($value = i18n_variable_get($variable, $lang)) {
      $lang = substr($lang, 0, 2);
      $translatables[$lang] = filter_xss_admin($value);
    }
  }

  return $translatables;
}
