<?php

/**
 * @file
 * Replace theming form functions with more flexible ones.
 */

/**
 * Implements hook_theme_registry_alter().
 */
function formthemer_theme_registry_alter(&$theme_registry) {
  if (!empty($theme_registry['form_element'])) {
    $theme_registry['form_element']['function'] = 'formthemer_form_element';
  }
  if (!empty($theme_registry['form'])) {
    $theme_registry['form']['function'] = 'formthemer_form';
  }
}

/**
 * Returns HTML for a form element.
 *
 */
function formthemer_form_element($variables) {
  // Check if we need to do anything.
  if (empty($variables['element']['#formthemer'])) {
    return theme_form_element($variables);
  }
  // Mimic core, with some additions.
  $element = &$variables['element'];
  $attributes = array();
  $attributes['class'] = array();
  // This function is invoked as theme wrapper, but the rendered form element
  // may not necessarily have been processed by form_builder().
  $element += array(
    '#title_display' => 'before',
  );
  $wrap = TRUE;
  if (!empty($element['#formthemer']['no_wrapper'])) {
    $wrap = FALSE;
    $output = '';
  }
  if ($wrap) {
    if (!empty($element['#formthemer']['wrapper']['attributes'])) {
      $attributes = $element['#formthemer']['wrapper']['attributes'];
    }

    // Add element #id for #type 'item'.
    if (isset($element['#markup']) && !empty($element['#id']) && !isset($attributes['id'])) {
      $attributes['id'] = $element['#id'];
    }
    // Add element's #type and #name as class to aid with JS/CSS selectors.
    if (empty($element['#formthemer']['wrapper']['no_default_classes'])) {
      $attributes['class'][] = 'form-item';
      if (!empty($element['#type'])) {
        $attributes['class'][] = 'form-type-' . strtr($element['#type'], '_', '-');
      }
      if (!empty($element['#name'])) {
        $attributes['class'][] = 'form-item-' . strtr($element['#name'], array(' ' => '-', '_' => '-', '[' => '-', ']' => ''));
      }
      // Add a class for disabled elements to facilitate cross-browser styling.
      if (!empty($element['#attributes']['disabled'])) {
        $attributes['class'][] = 'form-disabled';
      }
    }
    $wrapper_element = empty($element['#formthemer']['wrapper']['html_element']) ? 'div' : $element['#formthemer']['wrapper']['html_element'];
    $output = '<' . $wrapper_element . drupal_attributes($attributes) . '>' . "\n";
  }
  // If #title is not set, we don't display any label or required marker.
  if (!isset($element['#title'])) {
    $element['#title_display'] = 'none';
  }
  $prefix = isset($element['#field_prefix']) ? '<span class="field-prefix">' . $element['#field_prefix'] . '</span> ' : '';
  $suffix = isset($element['#field_suffix']) ? ' <span class="field-suffix">' . $element['#field_suffix'] . '</span>' : '';

  switch ($element['#title_display']) {
    case 'before':
    case 'invisible':
      $output .= ' ' . theme('form_element_label', $variables);
      $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
      break;

    case 'after':
      $output .= ' ' . $prefix . $element['#children'] . $suffix;
      $output .= ' ' . theme('form_element_label', $variables) . "\n";
      break;

    case 'none':
    case 'attribute':
      // Output no label and no required marker, only the children.
      $output .= ' ' . $prefix . $element['#children'] . $suffix . "\n";
      break;
  }

  if (!empty($element['#description'])) {
    $output .= '<div class="description">' . $element['#description'] . "</div>\n";
  }
  if ($wrap) {
    $output .= '</' . $wrapper_element . ">\n";
  }
  return $output;
}

/**
 * Returns HTML for a form.
 *
 * @ingroup themeable
 */
function formthemer_form($variables) {
  // Check if we need to do anything.
  if (empty($variables['element']['#formthemer'])) {
    return theme_form($variables);
  }
  $element = $variables['element'];
  if (isset($element['#action'])) {
    $element['#attributes']['action'] = drupal_strip_dangerous_protocols($element['#action']);
  }
  element_set_attributes($element, array('method', 'id'));
  if (empty($element['#attributes']['accept-charset'])) {
    $element['#attributes']['accept-charset'] = "UTF-8";
  }
  $content = $element['#children'];
  if (empty($element['#formthemer']['no_inner_wrapper'])) {
    $wrapper_element = empty($element['#formthemer']['inner_wrapper']['html_element']) ? 'div' : $element['#formthemer']['inner_wrapper']['html_element'];
    $attributes = empty($element['#formthemer']['inner_wrapper']['attributes']) ? array() : $element['#formthemer']['inner_wrapper']['attributes'];
    $content = '<' . $wrapper_element . drupal_attributes($attributes) . '>' . $content . '</' . $wrapper_element . '>';
  }
  return '<form' . drupal_attributes($element['#attributes']) . '>' . $content . '</form>';
}