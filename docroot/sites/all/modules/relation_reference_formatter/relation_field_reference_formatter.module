<?php

/**
 * Implement hook_field_info().
 *
 * Use fake widget to satisfy drupal core field requirements.
 */
function relation_field_reference_formatter_field_info() {
  return array(
    'relation_target_formatter' => array(
      'label' => t('Relation Target Formatter'),
      'default_formatter' => 'relation_target_formatter_view_mode',
      'default_widget' => 'relation_target_widget_null',
    ),
  );
}

/**
 * Implement hook_field_formatter_info();
 */
function relation_field_reference_formatter_field_formatter_info() {
  return array(
    'relation_target_formatter_view_mode' => array(
      'label' => t('Relation Target Formatter View Mode'),
      'field types' => array('relation_target_formatter'),
      // Must have these filled out to be able to use formatter settings form.
      'settings' => array(
        'relation_type' => null,
        'view_mode' => null,
      ),
    ),
  );
}

/**
 * Implement hook_field_widget_info().
 *
 * Register fake widget to satisfy core requirement where
 * fields must have widgets.
 * @see: field_ui_field_type_options().
 */
function relation_field_reference_formatter_field_widget_info() {
  return array(
    'relation_target_widget_null' => array(
      'label' => t('Relation Target Widget Null'),
      'field types' => array('relation_target_formatter'),
    ),
  );
}

/**
 * Implement hook_field_formatter_settings_form()
 *
 * Allow selecting relation type and view mode.
 */
function relation_field_reference_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $element = array();
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $source_entity_type = $instance['entity_type'];

  $relation_types = relation_get_types();
  $relation_type_options = array();
  foreach ($relation_types as $relation_type) {
    list($relation_source_entity) = explode(":", $relation_type->source_bundles[0]);
    if ($source_entity_type == $relation_source_entity) {
      $relation_type_options[$relation_type->relation_type] = $relation_type->label;
    }
  }

  $element['relation_type'] = array(
    '#type' => 'select',
    '#title' => t('Relation type'),
    '#options' => $relation_type_options,
    '#required' => true,
    '#default_value' => $settings['relation_type'],
    //'#multiple' => true,
  );



  $view_mode_options = array();

  // Provide view mode options for the TARGET entity.
  if (!empty($settings['relation_type'])) {
    $relation_type = relation_type_load($settings['relation_type']);
    $target_entity_type = reset($relation_type->target_bundles);
    list($target_entity_type) = explode(':', $target_entity_type);
    $entity_info = entity_get_info($target_entity_type);
    if (!empty($entity_info['view modes'])) {
      foreach ($entity_info['view modes'] as $key => $mode) {
        $view_mode_options[$key] = $mode['label'];
      }
    }
  }

  $element['view_mode'] = array(
    '#type' => 'select',
    '#title' => t('Render Target as View Mode'),
    '#options' => $view_mode_options,
    '#required' => count($view_mode_options),
    '#default_value' => $settings['view_mode'],
  );

  return $element;
}

function relation_field_reference_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $relation_label = 'Select relation type';
  $view_mode_label = 'Select View Mode';

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if (!empty($settings['relation_type'])) {
    $relation_type = relation_type_load($settings['relation_type']);
    $relation_label = $relation_type->label;
  }

  if (!empty($settings['view_mode']) && $relation_type) {
    $target_entity_type = reset($relation_type->target_bundles);
    list($target_entity_type) = explode(':', $target_entity_type);
    $entity_info = entity_get_info($target_entity_type);

    if (!empty($entity_info['view modes'][$settings['view_mode']])) {
      $view_mode_label = $entity_info['view modes'][$settings['view_mode']]['label'];
    }
  }


  $summary = array();
  $summary[] = t('Relation type: %relation_label.', array('%relation_label' => $relation_label));
  $summary[] = t('View Mode: %view_mode_label.', array('%view_mode_label' => $view_mode_label));

  return implode('<br />',$summary);
}

function relation_field_reference_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, &$items, $display) {
  // Make sure all settings are available, all are required.
  foreach ($display['settings'] as $value) {
    if (empty($value)) {
      $element[0] = $items[0] = array(
        '#markup' => t('Configure relation reference formatter settings'),
      );

      return $element;
    }
  }

  $settings = $display['settings'];

  $element = array();
  // Ensure $item is not empty as it is required by core to print field values.
  $element[0] = $items[0] = array();

  $r_index = 0; // Source
  $relation_type = $settings['relation_type'];
  $relation_info = relation_type_load($relation_type);

  $target_entity_type = reset($relation_info->target_bundles);
  list($target_entity_type) = explode(':', $target_entity_type);

  $target_view_mode = $settings['view_mode'];

  $query = relation_query($entity_type, $entity->identifier(), $r_index);
  $query->entityCondition('bundle', $relation_type);
  $results = $query->execute();

  $relation_ids = array();
  foreach ($results as $rid) {
    $relation_ids[] = $rid->rid;
  }

  $relations = relation_load_multiple($relation_ids);

  $target_ids = array();
  foreach ($relations as $relation) {
    $endpoints = field_get_items('relation', $relation, 'endpoints');
    $target_ids[] = $endpoints[1]['entity_id'];
  }

  $target_entities = entity_load($target_entity_type, $target_ids);
  // Render as non-full-page.
  if ($build = entity_view($target_entity_type, $target_entities, $target_view_mode, null, true)) {
    $element[0] += $build;
  }

  return $element;
}
