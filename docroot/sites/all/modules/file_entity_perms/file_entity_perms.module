<?php

/**
 * Implements hook_form_alter().
 *
 * This adds permissions to the file_entity page.
 */
function file_entity_perms_form_alter(&$form, &$form_state, $form_id) {
  // We load our $file object differently depending if we're adding or editing.
  if ($form_id == 'file_entity_edit') {
    // Our file object.
    $file = $form_state['file'];

    // We need to add our submit function to the submit button
    $form['actions']['submit']['#submit'][] = 'file_entity_perms_file_entity_submit';
  }
  elseif ($form_id == 'file_entity_add_upload' && $form['#step'] == 3) {
    // We need to load our file object.
    $file = file_load($form_state['storage']['upload']);

    // We need to add our submit function to the submit form
    $form['#submit'][] = 'file_entity_perms_file_entity_submit';
  }

  // Need to be editing or adding and on step 3.
  if ($form_id == 'file_entity_edit' || ($form_id == 'file_entity_add_upload' && $form['#step'] == 3)) {
    // Permissions only make sense on private files.
    if (file_uri_scheme($file->uri) == 'private') {
      // Permissions wrapper.
      $form['permissions'] = array(
        '#type' => 'fieldset',
        '#title' => t('Permissions'),
        '#tree' => TRUE,
      );

      // Get the permissions for this file.
      $permissions = file_entity_perms_file_permissions($file->fid);

      $permissioning_types = module_invoke_all('file_entity_perms_info');

      foreach ($permissioning_types as $type => $info) {
        // Checkbox to select to use this type of permissioning.
        $form['permissions'][$type]['use'] = array(
          '#type' => 'checkbox',
          '#title' => t($info['title']),
          '#default_value' => (isset($permissions[$type])) ? TRUE : FALSE,
          '#description' => t('Allow this file to be permissioned by ' . $info['title'] . '.'),
        );

        // fieldset wrapper for the permissions.
        $form['permissions'][$type]['permissions'] = array(
          '#type' => 'fieldset',
          '#title' => t($info['title'] . ' Permissions'),
          '#states' => array(
            'visible' => array(
              ':input[name="permissions[' . $type . '][use]"]' => array('checked' => TRUE),
            )
          )
        );

        // Allow modules to add form elements.
        foreach(module_implements('file_entity_perms_' . $type . '_form') as $module) {
          // If there are no permissions set then pass a NULL value.
          $current_permissions = isset($permissions[$type]) ? $permissions[$type] : NULL;
          $function = $module . '_file_entity_perms_' . $type . '_form';
          $function($form['permissions'][$type]['permissions'], $current_permissions);
        }
      }
    }
  }
}

/**
 * Manages the form submission.
 */
function file_entity_perms_file_entity_submit($form, &$form_state) {
  if ($form_state['build_info']['form_id'] == 'file_entity_add_upload') {
    $fid = $form_state['storage']['upload'];
  }
  elseif ($form_state['build_info']['form_id'] == 'file_entity_edit') {
    $fid = $form_state['file']->fid;
  }

  // Get our different types of permissioning systems.
  $permissioning_types = module_invoke_all('file_entity_perms_info');
  if (isset($form_state['values']['permissions'])) {
    $values = $form_state['values']['permissions'];
    foreach($permissioning_types as $type => $info) {
      // If it's being used let other modules do things with it.
      // If not just delete it.
      if (!empty($values[$type]['use'])) {
        module_invoke_all('file_entity_perms_' . $type . '_form_submit', $fid, $values[$type]['permissions']);
      }
      else {
        file_entity_perms_delete_permission($fid, $type);
      }
    }
  }
}

/**
 * Add/update a permission to the file_entity_perms table.
 *
 * @param $fid
 *   The id of the file.
 * @param $type
 *   The type of permission. ex. role
 * @param $permission
 *   The permissions to be set. This is in any format necessary for the
 *   permission handler to process.
 */
function file_entity_perms_set_permission($fid, $type, $permission) {
  // Let other modules do some processing.
  module_invoke_all('file_entity_perms_set_permission', $fid, $type, $permission);

  // We need to serialize the permission so it can be entered in the db
  // correctly.
  $permission = serialize($permission);

  // We merge it in so it will update or add.
  db_merge('file_entity_perms')
    ->key(array('fid' => $fid, 'type' => $type))
    ->fields(array('permission' => $permission))
    ->execute();
}

/**
 * Delete one or more permissions in the file_entity_perms table.
 *
 * @param $fid
 *   The id of the file.
 * @param $type
 *   The type of permission. ex. role
 *
 * @return
 *   The number of results deleted.
 */
function file_entity_perms_delete_permission($fid, $type = NULL) {
  // Let other modules do some processing.
  module_invoke_all('file_entity_perms_delete_permission', $fid, $type);

  // Create our default query to remove all the files permissions.
  $delete_query = db_delete('file_entity_perms')
    ->condition('fid', $fid);

  // If a permission type is provided then only remove that types permissions.
  if (!empty($type)) {
    $delete_query->condition('type', $type);
  }

  // Execute our query and return it's results.
  return $delete_query->execute();
}

/**
 * Get the permissions of a specific file with a specific type.
 *
 * @param $fid
 *   The id of the file.
 * @param $type
 *   The type of permission. ex. role
 *
 * @return
 *   Return an associative array of the type as the key and the permission as
 *   the value.
 */
function file_entity_perms_file_permissions($fid, $type = NULL) {
  $permissions = array();

  // Setup our default query.
  $query = "SELECT fp.permission, fp.type FROM {file_entity_perms} fp where fid = '{$fid}'";

  // If a type is set limit the query to only that type.
  if (!empty($type)) {
    $query .= " AND type = '{$type}'";
  }

  // Get the permissions from the table.
  $result = db_query($query);

  // Loop through our results unserializing the permissions.
  while($row = $result->fetchAssoc()) {
    $permissions[$row['type']] = unserialize($row['permission']);
  }

  return $permissions;
}

/**
 * Implements hook_file_enity_access().
 */
function file_entity_perms_file_entity_access($op, $file, $account) {
  // We only manage the view portion.
  if ($op == 'download' || $op == 'view') {
    // Get the allowed roles.
    $permissions = file_entity_perms_file_permissions($file->fid);

    $access = array();
    // Loop through the different type of permissions.
    foreach ($permissions as $type => $permission) {
      // Allow other modules to determine how the permissions apply.
      foreach (module_implements('file_entity_perms_' . $type . '_access') as $module) {
        $function = $module . '_file_entity_perms_' . $type . '_access';
        $access[] = $function($file, $account, $permission);
      }
    }

    // If there is one denied then deny the file.
    // If not and there is one allow then allow the file.
    // Otherwise ignore file permissions.
    if (in_array(FILE_ENTITY_ACCESS_DENY, $access, TRUE)) {
      return FILE_ENTITY_ACCESS_DENY;
    }
    elseif (in_array(FILE_ENTITY_ACCESS_ALLOW, $access, TRUE)) {
      return FILE_ENTITY_ACCESS_ALLOW;
    }
  }

  return FILE_ENTITY_ACCESS_IGNORE;
}

/**
 * Implements hook_file_delete().
 */
function file_entity_perms_file_delete($file) {
  // Delete all the permissions for that file.
  file_entity_perms_delete_permission($file->fid);
}

/**
 * Implements hook_file_entity_perms_info().
 */
function file_entity_perms_file_entity_perms_info() {
  return array(
    'role' => array(
      'title' => 'Role',
    ),
  );
}

/**
 * Implements hook_file_entity_perms_role_form().
 */
function file_entity_perms_file_entity_perms_role_form(&$form, $permission) {
  // If no permissions were passed then set it to an empty array.
  $permission = is_null($permission) ? array() : $permission;

  // Select role permissions.
  $form['roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Roles'),
    '#default_value' => $permission,
    '#options' => user_roles(TRUE),
    '#description' => t('Roles that can view this file.'),
  );
}

/**
 * Implements hook_file_entity_perms_role_form_submit().
 */
function file_entity_perms_file_entity_perms_role_form_submit($fid, $values) {
  // Set our permissions.
  file_entity_perms_set_permission($fid, 'role', $values['roles']);
}

/**
 * Implements hook_file_entity_perms_role_access().
 */
function file_entity_perms_file_entity_perms_role_access($file, $account, $permission) {
  // We need to get the keys of the users roles so it will be in the format
  // that we save the roles.
  $user_roles = array_keys($account->roles);

  // Find out if we have any matching roles.
  $matching_roles = array_intersect($permission, $user_roles);

  // If any of our roles match then allow access.
  if (!empty($matching_roles)) {
    return FILE_ENTITY_ACCESS_ALLOW;
  }
  else {
    return FILE_ENTITY_ACCESS_DENY;
  }
}
