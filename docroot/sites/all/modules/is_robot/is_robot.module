<?php

/**
 * @file is_robot.module
 * Is Robot Drupal Module
 */

/**
 * Implements hook_menu().
 */
function is_robot_menu() {
  $items = array();
  $items['admin/config/development/is-robot'] = array(
    'title' => t('Is Robot? Settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('is_robot_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer is robot'),
    'file' => 'is_robot_admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/development/is-robot/items'] = array(
    'title' => t('Additional Items'),
    'page callback' => 'is_robot_additional_items',
    'access callback' => 'user_access',
    'access arguments' => array('administer is robot'),
    'file' => 'is_robot_admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/development/is-robot/items/add'] = array(
    'title' => t('Add an additional items'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('is_robot_additional_item_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer is robot'),
    'file' => 'is_robot_admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/config/development/is-robot/items/edit/%is_robot_id'] = array(
    'title' => t('Add an additional items'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('is_robot_additional_item_form', 6),
    'access callback' => 'user_access',
    'access arguments' => array('administer is robot'),
    'file' => 'is_robot_admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/development/is-robot/items/delete/%is_robot_id'] = array(
    'title' => t('Delete an item'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('is_robot_delete_confirm', 6),
    'access callback' => 'user_access',
    'access arguments' => array('administer is robot'),
    'file' => 'is_robot_admin.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function is_robot_permission() {
  return array(
    'administer is robot' => array(
      'title' => t('Administer Is Robot? Settings'),
    ),
  );
}

/**
 * Load the is_robot_id from our query string
 *
 * @return mixed $is_robot 
 *   Is either the object containing the robot data or FALSE if not found
 */
function is_robot_id_load($id) {
  $result = db_query('SELECT * FROM {is_robot} WHERE robot_id = :robot_id', array(':robot_id' => $id));
  if ($result->rowCount() > 0) {
    return $result->fetchObject();
  }
  else {
    return new stdClass();
  }
}

/**
 * Implements hook_cron().
 */
function is_robot_cron() {
  // Only run this once a week
  $last_run = variable_get("is_robot_last_run", 0);
  $time_past = time() - $last_run;
  
  // Check for the frequency in seconds. Will be overriden by custom if necessary
  $frequency = variable_get('is_robot_cron_frequency', 604000);
  if ($frequency == 'custom') {
    $frequency = variable_get('is_robot_cron_frequency_custom', 604000);
    if (empty($frequency)) {
      $frequency = '604000';
      variable_set('is_robot_cron_frequency_custom', 604000);
    }
  }
  
  // If we are past our frequency, then run the cron 
  if ($time_past > $frequency || $last_run == 0) {
    is_robot_load_robots();
    variable_set('is_robot_last_run', time());
  }
}

/**
 * Import robot list
 *
 * Import robot list from http://www.robotstxt.org/db/all.txt
 * UTF encoding is necssary due to the file type of the robotstxt.org database.
 */
function is_robot_load_robots() {
  $r = drupal_http_request("http://www.robotstxt.org/db/all.txt");
  if ($r->data) {
    $robots = $r->data;
    $robots = str_replace("\n ", " ", $robots);
    $robots = explode("\n\n", $robots);
    $robot_array = array();
    foreach ($robots as $robot){
      $lines = explode("\n", $robot);
      $bot = array();
      foreach ($lines as $line) {
        if (!empty($line)) {
          $items = explode(":", $line, 2);
          if (!empty($items[1])) {
            $bot[trim($items[0])] = trim($items[1]);
          }
        }
      }
      $robot_array[] = $bot;
    }
  }
	  
  // Clear the database and re-populate
  db_query("TRUNCATE {is_robot}");
  foreach ($robot_array as $robot) {
    if (!empty($robot) && !empty($robot['robot-useragent'])) {
      $robots = array(
        'robot_id' => utf8_encode($robot['robot-id']),
        'user_agent' => utf8_encode(strtolower($robot['robot-useragent'])),
        'data' => utf8_encode(serialize($robot)),
      );
      drupal_write_record('is_robot', $robots);
    }
  }
}

/**
 * Check if user is a robot
 *
 * @param bool $explain
 *   Do we send back the data returned by the query? If true, then yes.
 * @return mixed $results
 *   If $explain is TRUE, return an object with the results of our query on success, 
 *   FALSE on error. If $explain is FALSE, return TRUE on success, FALSE on error
 */
function is_robot($explain = FALSE, $cache_reset = FALSE) {
  // Initialize instance variables
  $robots = array();
  $replace = array();
  $found = FALSE;

  // Determine which action we're taking
  $action = variable_get('is_robot_append_hook_is_robot_robots_alter', 'append');

  // Check cache first for robots list.
  if (!$cache_reset && $cache = cache_get('is_robot_list')) {
    $robots = $cache->data;
  }
  else {
    // If we are in the middle of a bootstrap and there is no cache, then just return FALSE
    // and populate the cache at the end of the request. This means that bootstrap code should
    // ONLY be reading from the cache. We need to do this because we cannot invoke drupal_alter
    // from within hook_boot
    if (drupal_get_bootstrap_phase() != DRUPAL_BOOTSTRAP_FULL) {
      register_shutdown_function('is_robot');
      return FALSE;
    }
  
    // Only read from the database if we have to append hooks onto the end of the items
    // in the database.
    if ($action == 'replace') {
      $result = db_query('SELECT * FROM {is_robot} WHERE is_manual = 1');
    }
    else {
      $result = db_query('SELECT * FROM {is_robot}');
    }
    
    while ($robot = $result->fetchObject()) {
      $robots[] = (array) $robot;
    }

    // Set the cache. This cache is permanent and is generally repopulated on cron when we fetch a new list from robotstxt.org.
    cache_set('is_robot_list', $robots);
  }
  
  // Implement any hooks to module_is_robot_robots_alter.
  drupal_alter('is_robot_robots', $robots, $replace);

  // If we're replacing then assign one to the other, otherwise keep them the same
  $robots = ($action != 'replace') ? array_merge($replace, $robots) : $replace;  

  // Iterate through the robots and look for a match.
  foreach ($robots as $robot) {
    if (!empty($_SERVER['HTTP_USER_AGENT'])) {
      if ($robot['user_agent'] == utf8_encode(strtolower($_SERVER['HTTP_USER_AGENT'])) || $robot['user_agent'] == $_SERVER['HTTP_USER_AGENT']) {
        $found = TRUE;
        break;
      }
    }
  }

  if (!empty($explain) && $found == TRUE) {
    return $robot;
  }
  else {
    return $found;
  }
}

/**
 * Check if the user is robot()
 * If user is a robot, Prints 503 Service unavailable error and exits.
*/
function is_robot_boot() {  
  // Verifying if checkbox for blocking robots is enabled
  if (variable_get('is_robot_block_robots', FALSE) && php_sapi_name() != "cli" && is_robot(FALSE, FALSE)) {
    header($_SERVER["SERVER_PROTOCOL"] . " 503 Service Temporarily Unavailable");
    header('Status: 503 Service Temporarily Unavailable');
    header('Retry-After: 300');
    exit();
  }
}
