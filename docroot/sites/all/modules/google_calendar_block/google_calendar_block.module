<?php

/**
 * @file
 * A module to provide simple Google Calendar blocks using the Google Data APIs.
 */

/**
 * Implements hook_flush_caches().
 */
function google_calendar_block_flush_caches() {
  return array('cache_google_calendar_block');
}

/**
 * Implements hook_libraries_info().
 */
function google_calendar_block_libraries_info() {
  $libraries['google-api-php-client'] = array(
    'name' => 'Google API PHP Client',
    'vendor url' => 'https://github.com/google/google-api-php-client',
    'download url' => 'https://github.com/google/google-api-php-client/archive/master.zip',
    'version arguments' => array(
      'file' => 'src/Google/Client.php',
      // const LIBVER = "1.1.2";
      'pattern' => '/const LIBVER = "(.*?)"/',
      'lines' => 30,
    ),
    'files' => array(
      'php' => array(
        'autoload.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_theme().
 */
function google_calendar_block_theme($existing, $type, $theme, $path) {
  return array(
    'google_calendar_block_event' => array(
      'variables' => array(
        'created' => NULL,
        'description' => NULL,
        'hangout_link' => NULL,
        'html_link' => NULL,
        'location' => NULL,
        'summary' => NULL,
        'updated' => NULL,
        'creator_email' => NULL,
        'creator_display_name' => NULL,
        'start' => NULL,
        'end' => NULL,
      ),
      'template' => 'google-calendar-block-event',
    ),
  );
}

/**
 * Implements hook_help().
 */
function google_calendar_block_help($path, $arg) {
  switch ($path) {
    case 'admin/structure/block/add-google-calendar-block':
      return '<p>' . t('Use this page to create a new custom Google Calendar block.') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function google_calendar_block_menu() {
  // Create an array of block settings.
  $settings = array(
    'title' => 'Add Google Calendar block',
    'description' => 'Add a new Google Calendar block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('google_calendar_block_add_block_form'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'google_calendar_block.admin.inc',
  );

  // Add a local action to the block configuration page.
  $items['admin/structure/block/add-google-calendar-block'] = array(
    'access arguments' => array('administer blocks'),
  ) + $settings;

  // Get the default site theme.
  $default_theme = variable_get('theme_default', 'bartik');

  // Add a local action to the per-theme block configuration pages.
  foreach (list_themes() as $key => $theme) {
    if ($key != $default_theme) {
      $items['admin/structure/block/list/' . $key . '/add-google-calendar-block'] = array(
        'access callback' => '_google_calendar_block_themes_access',
        'access arguments' => array($theme),
      ) + $settings;
    }
  }

  $items['admin/structure/block/administer/google_calendar_block/%/delete'] = array(
    'title' => 'Delete Google Calendar block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('google_calendar_block_delete', 5),
    'access arguments' => array('administer blocks'),
    'type' => MENU_CALLBACK,
    'file' => 'google_calendar_block.admin.inc',
  );
  return $items;
}

/**
 * Menu item access callback - only admin or enabled themes can be accessed.
 */
function _google_calendar_block_themes_access($theme) {
  return user_access('administer blocks') && drupal_theme_access($theme);
}

/**
 * Implements hook_form_FORM_ID_alter();
 */
function google_calendar_block_form_block_admin_display_form_alter(&$form, &$form_state, $form_id) {
  $result = db_query('SELECT bid FROM {google_calendar_block}');

  // Add delete links to Google Calendar Block blocks.
  foreach ($result as $block) {
    $form['blocks']['google_calendar_block_' . $block->bid]['delete'] = array(
      '#type' => 'link',
      '#title' => t('delete'),
      '#href' => 'admin/structure/block/administer/google_calendar_block/' . $block->bid . '/delete',
    );
  }
}

/**
 * Returns information from database about a user-created (Google Calendar) block.
 *
 * @param $bid
 *   ID of the block to get information for.
 *
 * @return
 *   Associative array of information stored in the database for this block.
 *   Array keys:
 *   - bid: Block ID.
 *   - info: Block description.
 *   - application_name: The name (Project ID) of the Google Console project.
 *   - developer_key: The public API key used to control access to the project.
 *   - calendar_id: The ID of the calendar to display.
 *   - calendar_order_by: The order of the calendar events.
 *   - calendar_max_results: How many events are displayed.
 *   - calendar_limit_date_range: Determines whether or not calendar events should be limited to a certain date range.
 *   - calendar_display_todays_events: Limits events to only those that occur on the current day.
 *   - calendar_start_min: Determines the earliest event to list. Inclusive.
 *   - calendar_start_max: Determines the latest event to list. Exclusive.
 */
function google_calendar_block_block_get($bid) {
  return db_query("SELECT * FROM {google_calendar_block} WHERE bid = :bid", array(':bid' => $bid))->fetchAssoc();
}

/**
 * Implements hook_block_info().
 */
function google_calendar_block_block_info() {
  $blocks = array();

  $result = db_query('SELECT bid, info FROM {google_calendar_block} ORDER BY info');
  foreach ($result as $block) {
    $blocks[$block->bid]['info'] = $block->info;
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function google_calendar_block_block_configure($delta = 0) {
  if ($delta) {
    $config = google_calendar_block_block_get($delta);

    // Unserialize the calendar settings.
    $data = unserialize($config['data']);

    // Remove the serialized calendar settings.
    unset($config['data']);

    // Add the calendar settings to the block settings.
    $google_calendar_block = $config + $data;
  }
  else {
    $google_calendar_block = array();
  }
  return google_calendar_block_custom_block_form($google_calendar_block);
}

/**
 * Form constructor for the Google Calendar block form.
 *
 * @param $edit
 *   (optional) An associative array of information retrieved by
 *   google_calendar_block_block_get() if an existing block is being edited, or
 *   an empty array otherwise. Defaults to array().
 *
 * @ingroup forms
 */
function google_calendar_block_custom_block_form($edit = array()) {
  $edit += array(
    'info' => '',
    'application_name' => '',
    'developer_key' => '',
    'calendar_id' => '',
    'calendar_order_by' => 'starttime',
    'calendar_max_results' => '',
    'calendar_limit_date_range' => FALSE,
    'calendar_display_todays_events' => TRUE,
    'calendar_start_min' => array(
      'year' => format_date(REQUEST_TIME, 'custom', 'Y'),
      'month' => format_date(REQUEST_TIME, 'custom', 'n'),
      'day' => format_date(REQUEST_TIME, 'custom', 'j'),
    ),
    'calendar_start_max' => array(
      'year' => format_date(REQUEST_TIME, 'custom', 'Y'),
      'month' => format_date(REQUEST_TIME, 'custom', 'n'),
      'day' => format_date(REQUEST_TIME, 'custom', 'j'),
    ),
  );

  $form['info'] = array(
    '#type' => 'textfield',
    '#title' => t('Block description'),
    '#default_value' => $edit['info'],
    '#maxlength' => 64,
    '#description' => t('A brief description of your block. Used on the <a href="@overview">Blocks administration page</a>.', array('@overview' => url('admin/structure/block'))),
    '#required' => TRUE,
  );

  $form['calendar_information'] = array(
    '#type' => 'fieldset',
    '#title' => t('Calendar Information'),
    '#description' => t('Each Google Calendar Block block requires an application name, developer key and calendar ID in order to function.'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $markup = '';
  $markup .= '<ul>';
  $markup .= '<li>' . t('Sign into the <a href="@google_developer_console">Google Developer Console</a> using a Google Account and create a new project.', array('@google_developer_console' => 'https://console.developers.google.com/project')) . '</li>';
  $markup .= '<li>' . t('Go to the <strong>APIs</strong> page located under the <em>APIs and auth</em> section. Follow the <strong>Calendar API</strong> link under the <em>Google Apps APIs</em> heading. Enable the <strong>Google Calendar API</strong>.') . '</li>';
  $markup .= '<li>' . t('Go to the <strong>Credentials</strong> page located under the <em>APIs and auth</em> section. Press the <strong>Create new Key</strong> button under the <em>Public API access</em> heading. Press the <strong>Server key</strong> button and then press the <strong>Create</strong> button. You can restrict API access to only your server if it has a dedicated IP address.') . '</li>';
  $markup .= '</ul>';
  $markup .= '<p>' . t('Use the <strong>Project ID</strong>, found on project overview page as the <em>application name</em> and the <strong>API key</strong>, found on the credentials page, as the <em>developer key</em>. The <em>Calendar ID</em> for the calendar you wish to display can be found on the settings page for each calendar.') . '</p>';
  $markup .= '<ul>';
  $markup .= '<li>' . t('Visit <a href="@google_calendar">Google Calendar</a>, log in and browse to the settings page (select the gear icon and choose <strong>Settings</strong>).', array('@google_calendar' => 'https://www.google.com/calendar')) . '</li>';
  $markup .= '<li>' . t('From the settings page, select the <strong>Calendars</strong> tab and then select the calendar that you wish to display in the Google Calendar Block block.') . '</li>';
  $markup .= '<li>' . t('Look for the <strong>Calendar Address</strong> label. The Calendar ID should be displayed in brackets.') . '</li>';
  $markup .= '<li>' . t('Note that only public calendars can be displayed using Calendar Block. Ensure that your calendar has been made public by visiting the <strong>Share this Calendar</strong> tab and selecting both the <em>Share this calendar with others</em> and <em>Make this calendar public</em> options.') . '</li>';
  $markup .= '</ul>';
  $markup .= '<p>' . t('By default, primary calendars are not shared outside of the domain for Google Apps users. In order to display the primary calendar of a Google Apps account, you must set %setting to %value or higher. Note that changing this option may take up to 24 hours to propagate to all users.', array('%setting' => 'External Sharing options for primary calendars', '%value' => 'Share all information, but outsiders cannot change calendars')) . '</p>';
  $form['calendar_information']['calendar_information_retrieval_instructions'] = array(
    '#markup' => $markup,
  );
  $form['calendar_information']['application_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Application name'),
    '#default_value' => $edit['application_name'],
    '#required' => TRUE,
    '#description' => t('The application name (Project ID) of the Google Console project.'),
  );
  $form['calendar_information']['developer_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Developer key'),
    '#default_value' => $edit['developer_key'],
    '#required' => TRUE,
    '#description' => t('The public API key used to control access to the project.'),
  );
  $form['calendar_information']['calendar_id'] = array(
    '#type' => 'textfield',
    '#title' => t('ID'),
    '#default_value' => $edit['calendar_id'],
    '#required' => TRUE,
    '#description' => t('The ID of the calendar to display.'),
  );

  $form['calendar_order_by'] = array(
    '#type' => 'select',
    '#title' => t('Order by'),
    '#options' => array(
      '' => t('Default (unspecified, stable order)'),
      'startTime' => t('Start time'),
      'updated' => t('Updated'),
    ),
    '#default_value' => $edit['calendar_order_by'],
    '#description' => t('The order in which the events are presented.'),
  );
  $form['calendar_max_results'] = array(
    '#type' => 'select',
    '#title' => t('Maximum number of events'),
    '#options' => array('' => t('Auto')) + drupal_map_assoc(range(1, 20)),
    '#default_value' => $edit['calendar_max_results'],
    '#description' => t('Maximum number of events to display.'),
  );
  $form['calendar_limit_date_range'] = array(
    '#type' => 'checkbox',
    '#title' => t('Limit events to a specific date range'),
    '#default_value' => $edit['calendar_limit_date_range'],
  );
  $form['calendar_date_range'] = array(
    '#type' => 'container',
    '#states' => array(
      'visible' => array(
        ':input[name="calendar_limit_date_range"]' => array('checked' => TRUE),
      ),
    ),
  );
  $form['calendar_date_range']['calendar_display_todays_events'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display only events that occur today'),
    '#default_value' => $edit['calendar_display_todays_events'],
  );
  $form['calendar_date_range']['calendar_start_min'] = array(
    '#type' => 'date',
    '#title' => t('Minimum start time'),
    '#default_value' => $edit['calendar_start_min'],
    '#description' => t('Lower bound (inclusive) for the possible starting time of an event.'),
    '#states' => array(
      'visible' => array(
        ':input[name="calendar_display_todays_events"]' => array('checked' => FALSE),
      ),
    ),
  );
  $form['calendar_date_range']['calendar_start_max'] = array(
    '#type' => 'date',
    '#title' => t('Maximum start time'),
    '#default_value' => $edit['calendar_start_max'],
    '#description' => t('Upper bound (exclusive) for the possible starting time of an event.'),
    '#states' => array(
      'visible' => array(
        ':input[name="calendar_display_todays_events"]' => array('checked' => FALSE),
      ),
    ),
  );

  return $form;
}

/**
 * Implements hook_block_save().
 */
function google_calendar_block_block_save($delta = 0, $edit = array()) {
  google_calendar_block_custom_block_save($edit, $delta);
}

/**
 * Saves a user-created Google Calendar block in the database.
 *
 * @param $edit
 *   Associative array of fields to save. Array keys:
 *   - info: Block description.
 *   - application_name: The name (Project ID) of the Google Console project.
 *   - developer_key: The public API key used to control access to the project.
 *   - calendar_id: The ID of the calendar to display.
 *   - calendar_order_by: The order of the calendar events.
 *   - calendar_max_results: How many events are displayed.
 *   - calendar_limit_date_range: Determines whether or not calendar events should be limited to a certain date range.
 *   - calendar_display_todays_events: Limits events to only those that occur on the current day.
 *   - calendar_start_min: Determines the earliest event to list. Inclusive.
 *   - calendar_start_max: Determines the latest event to list. Exclusive.
 *   Block ID of the block to save.
 *
 * @return
 *   Always returns TRUE.
 */
function google_calendar_block_custom_block_save($edit, $delta) {
  // The serialized 'data' column contains the calendar settings.
  $data = array(
    'calendar_order_by' => $edit['calendar_order_by'],
    'calendar_max_results' => $edit['calendar_max_results'],
    'calendar_limit_date_range' => $edit['calendar_limit_date_range'],
    'calendar_display_todays_events' => $edit['calendar_display_todays_events'],
    'calendar_start_min' => array(
      'year' => $edit['calendar_start_min']['year'],
      'month' => $edit['calendar_start_min']['month'],
      'day' => $edit['calendar_start_min']['day'],
    ),
    'calendar_start_max' => array(
      'year' => $edit['calendar_start_max']['year'],
      'month' => $edit['calendar_start_max']['month'],
      'day' => $edit['calendar_start_max']['day'],
    ),
  );

  // Save the block configuration.
  $delta = db_update('google_calendar_block')
    ->fields(array(
      'info' => $edit['info'],
      'application_name' => $edit['application_name'],
      'developer_key' => $edit['developer_key'],
      'calendar_id' => $edit['calendar_id'],
      'data' => serialize($data),
    ))
    ->condition('bid', $delta)
    ->execute();

  // Clear the cache for the current block.
  $cid = 'google_calendar_block:' . $delta;
  cache_clear_all($cid, 'cache_google_calendar_block');

  return TRUE;
}

/**
 * Implements hook_block_view().
 */
function google_calendar_block_block_view($delta) {
  // Load the configuration.
  $config = google_calendar_block_block_get($delta);

  // Unserialize the calendar properties.
  $data = unserialize($config['data']);

  // Prepare the basic block data.
  $block = array();
  $block['subject'] = check_plain($config['info']);

  // Statically cache the calendar data to improve performance.
  $calendars = &drupal_static(__FUNCTION__);

  // Calendar data is cached per block.
  $cid = 'google_calendar_block:' . $delta;

  // Load the calendar data if it's not found in the static cache.
  if (!isset($calendars[$cid])) {
    if (($library = libraries_detect('google-api-php-client')) && !empty($library['installed'])) {
      // Add the Google API PHP Client src directory to the list of locations
      // where PHP looks for files in order to allow its loader to function
      // properly.
      set_include_path(get_include_path() . PATH_SEPARATOR . realpath($library['library path'] . '/src'));

      // Load the Google API PHP Client library.
      if (($library = libraries_load('google-api-php-client')) && !empty($library['loaded'])) {
        // Load the calendar data if it's not found in the persistent cache.
        if ($cache = cache_get($cid, 'cache_google_calendar_block')) {
          $calendars[$cid] = $cache->data;
        }
        else {
          $client = new Google_Client();

          $client->setApplicationName($config['application_name']);
          $client->setDeveloperKey($config['developer_key']);

          $service = new Google_Service_Calendar($client);

          $calendarId = $config['calendar_id'];

          $optParams = array();
          $optParams['singleEvents'] = TRUE;

          if (!empty($data['calendar_max_results'])) {
            $optParams['maxResults'] = $data['calendar_max_results'];
          }

          if (!empty($data['calendar_order_by'])) {
            $optParams['orderBy'] = $data['calendar_order_by'];
          }

          if (!empty($data['calendar_limit_date_range'])) {
            if ($data['calendar_display_todays_events']) {
              $today = strtotime('today');
              $date = new DateTime();
              $date->setTimestamp($today);
              $optParams['timeMin'] = $date->format(DATE_ATOM);

              $tomorrow = strtotime('tomorrow');
              $date = new DateTime();
              $date->setTimestamp($tomorrow);
              $optParams['timeMax'] = $date->format(DATE_ATOM);
            }
            else {
              $min = $data['calendar_start_min'];
              $value = $min['year'] . '-' . $min['month'] . '-' . $min['day'];
              $date = new DateTime($value);
              $optParams['timeMin'] = $date->format(DATE_ATOM);

              $max = $data['calendar_start_max'];
              $value = $max['year'] . '-' . $max['month'] . '-' . $max['day'];
              $date = new DateTime($value);
              $optParams['timeMax'] = $date->format(DATE_ATOM);
            }
          }

          // Retrieve the calendar event feed.
          try {
            $events = $service->events->listEvents($calendarId, $optParams);

            foreach ($events->getItems() as $event_feed) {
              $data = array(
                'created' => _google_calendar_block_google_date_to_timestamp($event_feed->getCreated()),
                'description' => $event_feed->getDescription(),
                'hangout_link' => $event_feed->getHangoutLink(),
                'html_link' => $event_feed->getHtmlLink(),
                'location' => $event_feed->getLocation(),
                'summary' => $event_feed->getSummary(),
                'updated' => _google_calendar_block_google_date_to_timestamp($event_feed->getUpdated()),
                'creator_email' => $event_feed->getCreator()->getEmail(),
                'creator_display_name' => $event_feed->getCreator()->getDisplayName(),
                'start' => _google_calendar_block_google_date_to_timestamp($event_feed->getStart()->getDateTime()),
                'end' => _google_calendar_block_google_date_to_timestamp($event_feed->getEnd()->getDateTime()),
              );

              $calendars[$cid] = $data;
            }

            cache_set($cid, $calendars[$cid], 'cache_google_calendar_block', CACHE_TEMPORARY);
          }
          catch (Exception $e) {
            watchdog('google_calendar_block', $e->getMessage(), array(), WATCHDOG_ERROR);
          }
        }
      }
    }
  }

  $items = array();

  if (!empty($calendars[$cid])) {
    foreach ($calendars[$cid]->getItems() as $event_feed) {
      $variables = array(
        'created' => _google_calendar_block_google_date_to_timestamp($event_feed->getCreated()),
        'description' => $event_feed->getDescription(),
        'hangout_link' => $event_feed->getHangoutLink(),
        'html_link' => $event_feed->getHtmlLink(),
        'location' => $event_feed->getLocation(),
        'summary' => $event_feed->getSummary(),
        'updated' => _google_calendar_block_google_date_to_timestamp($event_feed->getUpdated()),
        'creator_email' => $event_feed->getCreator()->getEmail(),
        'creator_display_name' => $event_feed->getCreator()->getDisplayName(),
        'start' => _google_calendar_block_google_date_to_timestamp($event_feed->getStart()->getDateTime()),
        'end' => _google_calendar_block_google_date_to_timestamp($event_feed->getEnd()->getDateTime()),
      );

      $items[] = theme('google_calendar_block_event', $variables);
    }
  }

  $block['content'] = array(
    '#theme' => 'item_list',
    '#items' => $items,
    '#type' => 'ul',
  );

  return $block;
}

/**
 * Helper function to convert a Google date into a Unix timestamp
 *
 * @param $date
 *   A Google date in the form of 2010-06-11T07:30:00.000-07:00.
 *
 * @return
 *   The date as a Unix timestamp.
 */
function _google_calendar_block_google_date_to_timestamp($date) {
  $parts = explode('T', $date);

  $date = $parts[0];

  if (!empty($parts[1])) {
    $time = $parts[1];
    $date = $date . ' ' . $time;
  }

  return strtotime($date);
}

/**
 * Implements template_preprocess_hook().
 */
function template_preprocess_google_calendar_block_event(&$variables) {
  foreach (array('created', 'updated', 'start', 'end') as $variable) {
    if (!empty($variables[$variable])) {
      $variables[$variable] = format_date($variables[$variable]);
    }
  }
}
