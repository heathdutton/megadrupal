<?php
/**
 * @file
 * The module file for extra_tabs_menu.
 */

/**
 * Implements hook_menu().
 */
function extra_tabs_menu_menu() {
  $items = array(
    'admin/config/user-interface/extra-tabs' => array(
      'title' => 'Extra Tabs Menu',
      'description' => 'Add menu links that display as tabs on configured pages.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('extra_tabs_menu_config_form'),
      'access arguments' => array('administer extra tabs menu'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'extra_tabs_menu.admin.inc',
    ),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function extra_tabs_menu_permission() {
  return array(
    'administer extra tabs menu' => array(
      'title' => t('Administer Extra Tabs Menu'),
      'description' => t('Choose paths and menu parents for extra tabs menu.'),
    ),
  );
}

/**
 * Implements hook_extra_tabs_menu().
 *
 * Get any menu parents configured to be displayed from config form.
 */
function extra_tabs_menu_extra_tabs_menu() {
  $menu_parents = array();
  $config = variable_get('extra_tabs_config', array());
  $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
  foreach ($config as $c) {
    if (drupal_match_path($path, drupal_strtolower($c['tab_paths']))) {
      $menu_parents[] = $c['tab_menu_settings'];
    }
  }
  return $menu_parents;
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Add links from extra tabs menu as tabs.
 */
function extra_tabs_menu_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $links = array();
  $menu_parents = module_invoke_all('extra_tabs_menu');
  drupal_alter('extra_tabs_menu', $menu_parents);

  if (!$menu_parents) {
    return;
  }

  foreach ($menu_parents as $parent) {
    list($menu, $mlid) = explode(':', $parent);
    $tree = menu_tree_all_data($menu);

    if ($mlid) {
      extra_tabs_menu_get_child_links($tree, $mlid);
    }

    if ($tree) {
      // Optionally localize the tree.
      if (module_exists('i18n_menu')) {
        $tree = i18n_menu_localize_tree($tree);
      }

      extra_tabs_menu_flatten_menu_tree($tree, $links);
    }
  }

  foreach ($links as $menu_link) {
    $data['tabs'][0]['output'][] = array(
      '#theme' => 'menu_local_task',
      '#link' => array(
        'title' => $menu_link['link_title'],
        'href' => $menu_link['link_path'],
        'localized_options' => $menu_link['localized_options'],
      ),
    );
  }

  // Remove "view" tab.
  if (isset($data['tabs'][0]['output'])) {
    foreach ($data['tabs'][0]['output'] as $key => $local_task) {
      if (isset($local_task['#link']['path']) && $local_task['#link']['path'] == 'node/%/view') {
        unset($data['tabs'][0]['output'][$key]);
        break;
      }
    }

    // Recalculate number of tabs that will be displayed.
    $data['tabs'][0]['count'] = count($data['tabs'][0]['output']);
  }
}

/**
 * Get items below a specific menu link.
 *
 * @param array $tree
 *   The menu tree that links are being taken from.
 * @param int $parent_mlid
 *   An array of menu link data from the database.
 */
function extra_tabs_menu_get_child_links(array &$tree, $parent_mlid) {
  $parent_link = menu_link_load($parent_mlid);
  if (!empty($parent_link)) {
    for ($i = 1; $i <= MENU_MAX_DEPTH && $parent_link["p$i"] != '0'; $i++) {
      $plid = $parent_link["p$i"];
      foreach ($tree as $key => &$value) {
        if ($tree[$key]['link']['mlid'] == $plid) {
          $tree = $tree[$key]['below'] ? $tree[$key]['below'] : array();
          break;
        }
      }
    }
  }
}

/**
 * Gets a flat list of links in a menu tree.
 *
 * @param array $tree
 *   The menu tree you wish to collect links from.
 * @param array $links
 *   An array in which to store the collected links.
 */
function extra_tabs_menu_flatten_menu_tree(array &$tree, array &$links) {
  foreach ($tree as $key => $v) {
    if (!$tree[$key]['link']['hidden']) {
      $links[$tree[$key]['link']['mlid']] = &$tree[$key]['link'];
      if ($tree[$key]['below']) {
        extra_tabs_menu_flatten_menu_tree($tree[$key]['below'], $links);
      }
    }
  }
}
