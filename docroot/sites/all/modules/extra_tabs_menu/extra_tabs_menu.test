<?php
/**
 * @file
 * Tests for extra_tabs_menu.
 */

/**
 * Class ExtraTabsMenuTestCase.
 */
class ExtraTabsMenuTestCase extends DrupalWebTestCase {
  protected $bigUser;
  protected $stdUser;
  protected $nodes;
  protected $links;

  /**
   * Test info.
   *
   * @return array
   *   Array of test info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Extra tabs menu',
      'description' => 'Add links to extra-tabs-menu and ensure they get added as tabs',
      'group' => 'ExtraTabsMenu',
    );
  }

  /**
   * Setup.
   */
  public function setUp() {
    parent::setUp(array('extra_tabs_menu'));
    $this->createUsers();
    $this->drupalLogin($this->bigUser);

    $this->createMenus();
    $this->createNodes();
    $this->createMenuLinks();
  }

  /**
   * Add menu links, test that only allowed links are displayed.
   */
  public function testMenu() {
    $this->drupalLogin($this->bigUser);
    $this->setConfigForm();
    $this->drupalGet('<front>');

    // Make sure top level displays.
    $this->assertLink($this->links['top_level_link']['link_title']);
    // Make sure nested link that user has access to displays.
    $this->assertLink($this->links['restricted_link']['link_title']);
    // Make sure that disabled link does not display.
    $this->assertNoLink($this->links['disabled_link']['link_title']);
    // Make sure that enabled links nested beneath disabled links are hidden.
    $this->assertNoLink($this->links['enabled_beneath_disabled_link']['link_title']);
    // Make sure that link from second menu is displayed.
    $this->assertLink($this->links['second_menu_link']['link_title']);
    // Make sure that choosing a parent link filters the list to only include
    // children of the parent link.
    $this->assertLink($this->links['child_link']['link_title']);
    $this->assertNoLink($this->links['parent_link']['link_title']);
    $this->assertNoLink($this->links['sibling_link']['link_title']);

    // Make sure that links that user does not have access to are hidden.
    $this->drupalLogout();
    $this->drupalLogin($this->stdUser);
    $this->drupalGet('<front>');
    $this->assertNoLink($this->links['restricted_link']['link_title']);
  }

  /**
   * Add a menu link using the menu module UI.
   *
   * @param int $plid
   *   Parent menu link id.
   * @param string $link
   *   Link path.
   * @param string $menu_name
   *   Menu name.
   * @param bool $expanded
   *   Expanded option.
   * @param bool $enabled
   *   Enabled option.
   *
   * @return array
   *   Menu link created.
   */
  protected function addMenuLink($plid = 0, $link = '<front>', $menu_name = 'extra-tabs-menu', $expanded = TRUE, $enabled = TRUE) {
    // View add menu link page.
    $this->drupalGet("admin/structure/menu/manage/$menu_name/add");
    $this->assertResponse(200);

    $title = '!link_' . $this->randomName(16);
    $edit = array(
      'link_path' => $link,
      'link_title' => $title,
      'description' => '',
      'enabled' => $enabled,
      'expanded' => $expanded,
      'parent' => $menu_name . ':' . $plid,
      'weight' => '0',
    );

    // Add menu link.
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertResponse(200);
    // Unlike most other modules, there is no confirmation message displayed.
    $this->assertText($title, 'Menu link was added');

    $item = db_select('menu_links')->fields('menu_links')->condition('link_title', $title)->execute()->fetchAssoc();
    return $item;
  }

  /**
   * Test and update Update the configuration form with settings.
   *
   * @param string $destination
   *   Page to redirect to after form is submitted.
   */
  protected function setConfigForm($destination = '<front>') {
    $settings = array(
      array(
        'tab_settings[0][tab_paths]' => '<front>',
        'tab_settings[0][tab_menu_settings]' => 'extra-tabs-menu:0',
      ),
      array(
        'tab_settings[0][tab_paths]' => '<front>',
        'tab_settings[0][tab_menu_settings]' => 'extra-tabs-menu:0',
        'tab_settings[1][tab_paths]' => '<front>',
        'tab_settings[1][tab_menu_settings]' => 'extra-tabs-menu2:0',
      ),
      array(
        'tab_settings[0][tab_paths]' => '<front>',
        'tab_settings[0][tab_menu_settings]' => 'extra-tabs-menu:0',
        'tab_settings[1][tab_paths]' => '<front>',
        'tab_settings[1][tab_menu_settings]' => 'extra-tabs-menu2:0',
        'tab_settings[2][tab_paths]' => '<front>',
        'tab_settings[2][tab_menu_settings]' => 'extra-tabs-menu3:' . $this->links['parent_link']['mlid'],
      ),
    );

    foreach ($settings as $setting) {
      $this->drupalGet('admin/config/user-interface/extra-tabs');
      $this->drupalPost(NULL, $setting, t('Save configuration'));
    }
  }

  /**
   * Create users.
   */
  protected function createUsers() {
    // Create users.
    $big_user_perms = array(
      'access administration pages',
      'administer menu',
      'administer extra tabs menu',
      'create article content',
    );
    $this->bigUser = $this->drupalCreateUser($big_user_perms);
    $this->stdUser = $this->drupalCreateUser(array());
  }

  /**
   * Create menus.
   */
  protected function createMenus() {
    $menus = array(
      'extra-tabs-menu' => 'Extra Tabs Menu',
      'extra-tabs-menu2' => 'Extra Tabs Menu 2',
      'extra-tabs-menu3' => 'Extra Tabs Menu 3',
    );

    foreach ($menus as $menu_name => $title) {
      $menu = array(
        'menu_name' => $menu_name,
        'title' => $title,
        'description' => 'Description Text',
      );
      menu_save($menu);
    }
  }

  /**
   * Create a bunch of nodes.
   */
  protected function createNodes() {
    $this->nodes['node1'] = $this->drupalCreateNode(array('type' => 'page', 'title' => 'node1'));
    $this->nodes['node2'] = $this->drupalCreateNode(array('type' => 'page', 'title' => 'node2'));
    $this->nodes['node3'] = $this->drupalCreateNode(array('type' => 'page', 'title' => 'node3'));
    $this->nodes['node4'] = $this->drupalCreateNode(array('type' => 'page', 'title' => 'node4'));
  }

  /**
   * Create a bunch of menu links.
   */
  protected function createMenuLinks() {
    $this->links['top_level_link'] = $this->addMenuLink(0, 'node/' . $this->nodes['node1']->nid);
    // Link to restricted area, only big_user can access.
    $this->links['restricted_link'] = $this->addMenuLink($this->links['top_level_link']['mlid'], 'admin');
    $this->links['disabled_link'] = $this->addMenuLink($this->links['top_level_link']['mlid'], 'node/' . $this->nodes['node2']->nid, 'extra-tabs-menu', TRUE, FALSE);
    $this->links['enabled_beneath_disabled_link'] = $this->addMenuLink($this->links['disabled_link']['mlid'], 'node/' . $this->nodes['node3']->nid);
    $this->links['second_menu_link'] = $this->addMenuLink(0, 'node/' . $this->nodes['node4']->nid, 'extra-tabs-menu2');
    $this->links['parent_link'] = $this->addMenuLink(0, 'http://fakelink.com', 'extra-tabs-menu3');
    $this->links['child_link'] = $this->addMenuLink($this->links['parent_link']['mlid'], 'http://fakelink.com', 'extra-tabs-menu3');
    $this->links['sibling_link'] = $this->addMenuLink(0, 'http://fakelink.com', 'extra-tabs-menu3');
  }

}
