<?php

/**
 * @file
 * demandbase module
 */

/**
 * Implements hook_init().
 */
function demandbase_init() {
  $activated_admin_ip_address = variable_get('demandbase_activate_admin_ip_address', '');
  $ip_address = ip_address();
  $test_ip_address = variable_get('demandbase_admin_ip_address', '');
  if ($activated_admin_ip_address && !empty($test_ip_address)) {
    if (user_access('administer demandbase key')) {
      $message  = t('Running demandbase in debug Mode. Please make it sure to disable this before going live.&nbsp;');
      $message .= l('Click here' , 'admin/config/services/demandbase');
      $message .= t('&nbsp;to change the demandbase setting to disable the debug mode.');
    }
  }
}

/**
 * Implements hook_menu().
 */
function demandbase_menu() {
  $items = array();

  $items['admin/config/services/demandbase'] = array(
    'title' => 'Demandbase settings',
    'description' => 'Set the demandbase key',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('demandbase_config'),
    'access arguments' => array('administer demandbase key'),
    'type'             => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/demandbase/key'] = array(
    'title' => 'Demandbase key settings',
    'description' => 'Set the demandbase key.',
    'access arguments' => array('administer demandbase key'),
    'type'             => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/services/demandbase/ip'] = array(
    'title' => 'Demandbase show IP',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Show demandbase IP details',
    'page callback' => 'demandbase_debug_ip',
    'access arguments' => array('administer demandbase key'),
  );
  $items['admin/config/services/demandbase/conditions'] = array(
    'title' => 'Demandbase Conditions',
    'description' => 'Select demandbase conditions.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('demandbase_conditions_config'),
    'access arguments' => array('administer demandbase key'),
    'type'             => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/config/services/demandbase/cache'] = array(
    'title' => 'Demandbase cache',
    'description' => 'Demandbase Cache settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('demandbase_cache_config'),
    'access arguments' => array('administer demandbase memcache'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function demandbase_permission() {
  return array(
    'administer demandbase key' => array(
      'title' => t('Administer demandbase'),
      'description' => t('Administer the configuration for Demandbase.'),
    ),
  );
}

/**
 * Form for getting the demandbase configuration.
 */
function demandbase_config($form_state) {
  $form['demandbase_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Demandbase Key'),
    '#description' => t('Provide the correct demandbase key for data retrieval'),
    '#default_value' => variable_get('demandbase_key', ''),
    '#required' => TRUE,
  );
  $form['demandbase_activate_admin_ip_address'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate IP address'),
    '#description' => t('Override the Test IP address for Admin testing'),
    '#default_value' => variable_get('demandbase_activate_admin_ip_address', ''),
    '#required' => FALSE,
  );
  $form['demandbase_activate_visitor_ip_address'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate Visitor Test IP address'),
    '#description' => t('Override the Test IP address for Visitor testing. This option will take precedence over the admin provided IP address.'),
    '#default_value' => variable_get('demandbase_activate_visitor_ip_address', '0'),
    '#required' => FALSE
  );
  $form['demandbase_admin_ip_address'] = array(
    '#type' => 'textfield',
    '#title' => t('Test IP address'),
    '#description' => t('Provide the IP address for testing'),
    '#default_value' => variable_get('demandbase_admin_ip_address', '208.92.40.133'),
    '#required' => FALSE,
  );
  return system_settings_form($form);
}

/**
 * Form for getting the demandbase memcache configuration.
 */
function demandbase_cache_config($form_state) {
  $form['demandbase_activate_cache_for_anonymous'] = array(
    '#type' => 'radios',
    '#title' => t('Enable Demandbase cache [for Anonymous users]'),
    '#description' => t('Enable demandbase cache to generate separate page for each anonymous user.'),
    '#default_value' => variable_get('demandbase_activate_cache_for_anonymous', '0'),
    '#required' => FALSE,
    '#options' => array(
        t('None'),
        t('Demandbase Memcache [Overriding memcache for demandbase contexts based pages.]'),
        t('Demandbase Cache [Overriding drupal cache for demandbase contexts based pages.]'),
    ),
  );

  $form['demandbase_activate_cache_path_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Enable cache for listed paths'),
    '#description' => '',
    '#collapsible' => TRUE,
  );
  $form['demandbase_activate_cache_path_fieldset']['demandbase_activate_cache_path_list'] = array(
    '#type' => 'checkbox',
    '#title' => t('Activate for Path list'),
    '#description' => t('Enable cache for each anonymous users only to given paths. This will work
      when Demandbase cache for Anonymous users is enabled.'),
    '#default_value' => variable_get('demandbase_activate_cache_path_list', '0'),
    );
  $form['demandbase_activate_cache_path_fieldset']['demandbase_cache_path_list'] = array(
    '#type' => 'textarea',
    '#title' => t('Path list'),
    '#description' => t('Specify pages when any of the paths above match the page path. Put each path on a separate line.
        You can use the "*" character as a wildcard and ~ to exclude one or more paths. Use &lt;front&gt; for the site front page.'),
    '#default_value' => variable_get('demandbase_cache_path_list', ''),
    '#required' => FALSE,
  );
  //echo '<pre>',print_r($GLOBALS),'</pre>';
  return system_settings_form($form);
}
/**
 * Form for setting demandbase conditions available for contexts
 */
function demandbase_conditions_config($form_state) {
  $items = demandbase_fetch_fields(demandbase_get_data());
  if (empty($items)) {
    $form['demandbase_error'] = array(
    '#type' => 'markup',
    '#markup' => t('Please check your configuration. There may be no field for you ip address or Demandbase may be down.'),
    );
    return system_settings_form($form);
  }
  $default_value = array();
  echo '<pre>', print_r(variable_get('demandbase_conditions', array())), '</pre>';
  echo '<pre>', print_r(demandbase_get_data()), '</pre>';
  $form['demandbase_conditions'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Select conditions (Which should be available for contexts.)'),
    '#options' => $items,
    '#description' => t('Select conditions which should be available for contexts.'),
    '#default_value' => variable_get('demandbase_conditions', array()),
    );

  //echo '<pre>',print_r($GLOBALS),'</pre>';
  return system_settings_form($form);
}
/**
 * Show IP information for given IP address.
 */
function demandbase_debug_ip() {
  $demandbase_client_obj = new demandbase_client();
  $demandbase_client_obj->fetch_data();
  $ip = $demandbase_client_obj->__get('ip_address');
  $code = $demandbase_client_obj->__get('code');
  $data = $demandbase_client_obj->processed_data;
  $content = '';
  switch ($code) {
    case '200':
      $content = demandbase_process_ip_data($data, $ip);
      break;

    default:
      $content = demandbase_process_ip_data($data, $ip);
      break;
  }
  return $content;

}

/**
 * sort the demandbase data
 */

function demandbase_process_sort_ip_data($data) {
  $items = array();
  foreach ($data as $key => $value) {
    $field_name = str_ireplace('_', ' ', $key);
    $items[$key] = $field_name . ' = ' . $value;
  }
  sort($items);
  return $items;
}

/**
 * theme the demandbase data
 */
function demandbase_theme_ip_data($items , $ip = '') {
  $content = '';
  $attributes = array(
    'id' => 'demandbase-ip-information',
    'class' => 'ip-information',
  );
  $item_info = array(
    'items' => $items,
    'title' => t('DEMANDBASE IP information ::' . $ip),
    'type' => 'ul', 'attributes' => array(),
  );
  $content = theme_item_list($item_info);
  return $content;
}

/**
 * fetch fields list from demandbase
 */
function demandbase_fetch_fields($data) {
  $items = array();
  if (isset($data) && is_array($data)) {
    foreach ($data as $key => $value) { // set key as value
      $items[$key] = $key;
    }
    sort($items);
    //echo '<pre>ITEMS: ',print_r($items),'</pre>';

    $fields = array();
    foreach ($items as $value) {
      $field_key  = $value;
      $fields[$field_key] = str_ireplace('_', ' ', $field_key);
    }
  }
  if (empty($fields)) {
    $specific_conditions =  variable_get('demandbase_conditions', array());
    return preg_grep('/^[a-z A-Z].*/', $specific_conditions);
  }
  //echo '<pre>FIELDS: ',print_r($fields),'</pre>';
  return $fields;
}

/**
 * fetch fields list enabled by admin to show under demandbase contexts
 */
function demandbase_get_specified_conditions() {
  $specific_conditions =  variable_get('demandbase_conditions', array());
  $set_conditions = preg_grep('/^[a-z A-Z].*/', $specific_conditions);
  $fields = array();
  foreach ($set_conditions as $key => $value) {
    $field_key  = str_ireplace(' ', '_', $value);
    $fields[$field_key] = str_ireplace('_', ' ', $field_key);
  }
  return $fields;
}
/**
 * Show demandbase captured data
 * @param Array $data
 * @param String $ip
 */
function demandbase_process_ip_data($data, $ip = '') {
  $items = demandbase_process_sort_ip_data($data);

  $content = demandbase_theme_ip_data($items, $ip);
  return $content;
}

/**
 * Returns demandbase data for visiting user.
 */
function demandbase_get_data() {
  $ip = variable_get('demandbase_admin_ip_address', ip_address());
  $demandbase_client_obj =  new demandbase_client();
  $demandbase_client_obj->fetch_data('ip', $ip);
  return $demandbase_client_obj->processed_data;
}

/**
 * Implements hook_block_info().
 */
function demandbase_block_info() {
  $blocks = array(
    'ip_override' => array(
      'info' => t('Ip address override.'),
      'cache' => DRUPAL_NO_CACHE,
      'weight' => 0, ),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function demandbase_block_view($delta ='') {
  switch ($delta) {
    case 'ip_override' :
      $content = drupal_get_form('demandbase_visitor_ip_config');
      $block =  array(
        'subject' => t('ip override'),
        'content' => $content);
      return $block;
      break;
  }
  return;
}
/**
* Form for getting the demandbase visitor ip configuration.
*/
function demandbase_visitor_ip_config($form_state) {
	$demandbase_client_obj = new demandbase_client();
	$demandbase_client_obj->fetch_data();
	$ip = $demandbase_client_obj->ip_address;
	$currently_simulating_ip  = !empty($ip) ? $ip : ip_address();

  $form['section_instructions'] = array(
    '#type' => 'markup',
    '#value' => '<section id="ipWidgetInstr">Provide an IP address for testing: </section>',
  );


	$form['overrideIpAddress'] = array(
		'#type' => 'textfield',
		'#size' => 40,
		'#description' => t(''),
		'#default_value' => t($currently_simulating_ip),
		'#required' => FALSE,
		'#attributes' => array(
	      'id' => 'overrideIpAddress'
	    )
	);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#description' => t('<input value="Details" type=button onClick="DemandbaseLabs.IPWidget.toggleIpDetails()">'),
    '#attributes' => array(
        'id' => 'ipWidgetSubmit'
      )
  );


	$form['companySelect'] = array(
		'#type' => 'select',
		'#empty_option' => t('--Select a company to simulate--'),
		'#options' => array(
			'4.18.62.1' => t('East West Bank (Financial Services)'),
			'4.21.101.1' => t('AFIP (Healthcare & Medical)'),
			'12.2.77.225' => t('Japs-Olson (Printing & Publishing)'),
			'8.10.2.1' => t('Prolexic (Telecommunications)'),
			'4.20.98.65' => t('Williams-Sonoma (Retail & Distribution)'),
			'12.4.23.1' => t('Airline Pilots Assoc. (Transportation & Logistics)'),
			'30.0.0.1' => t('US Dept. of Defense (Government)'),
			'3.0.0.1' => t('General Electric (Financial Services)'),
			'212.125.84.152' => t('Ski Class (Business Services)'),
			'4.21.76.33' => t('Mro / IBM (Software & Technology)'),
			'12.131.200.224' => t('Adobe (Customer)'),
      '216.138.246.64' => t('Eloqua (Partner)'),
      '12.180.100.128' => t('Marketo (Partner)'),
      '173.226.41.186' => t('Aprimo (Partner)'),
			'173.203.22.40' => t('Reachforce (Competitor)')
		),
		'#attributes' => array(
	      'onchange' => 'DemandbaseLabs.IPWidget.updateOverrideIp(this);'
	  )
	);

  $form['section_ip_msg'] = array(
    '#type' => 'markup',
    '#value' => '<section>Your ip address is ' . ip_address() . '.  Currently simulating: ' . $currently_simulating_ip . '</section>',
  );

	return $form;
}


/**
 *
 * Store Testing ip address for each visitor in the session
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function demandbase_visitor_ip_config_submit($form, &$form_state) {
  $_SESSION['demandbase_session_ip'] = trim($form_state['values']['overrideIpAddress']);
}