<?php
/**
 * @file
 * Contains functions to reset commerce.
 */

module_load_include('inc', 'commerce_reset', 'commerce_reset.helpers');

/**
 * Implements hook_menu().
 */
function commerce_reset_menu() {

  $items['admin/commerce/reset/batch'] = array(
    'title' => 'Commerce reset',
    'description' => 'Run batch operations.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_reset_batch_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Batch form callback.
 */
function commerce_reset_batch_form() {
  $form['batch'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Choose which tasks to run',
    '#options' => array(
      'delete_orders' => t('Delete all orders.'),
      'delete_payment_transactions' => t('Delete all payment transactions'),
      'delete_customer_profiles' => t('Delete all customer profiles'),
      'delete_products' => t('Delete all products variations'),
    ),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Go',
  );

  return $form;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function commerce_reset_form_commerce_reset_batch_form_alter(&$form, &$form_state, $form_id) {
  if (commerce_reset_order_count()) {
    $form['batch']['#options']['delete_customer_profiles'] = t('Customer profiles can not be deleted. Please delete all orders first');
    $form['batch']['delete_customer_profiles']['#disabled'] = TRUE;
  }

  if (commerce_reset_order_count()) {
    $form['batch']['#options']['delete_products'] = t('Products can not be deleted. Please delete all orders first');
    $form['batch']['delete_products']['#disabled'] = TRUE;
  }
}

/**
 * Submit form submit handle.
 */
function commerce_reset_batch_form_submit($form, &$form_state) {
  $import = array();
  foreach ($form_state['values']['batch'] as $batch) {
    if ($batch) {
      $import[$batch] = $batch;
    }
  }

  batch_set(commerce_reset_generate_batch_items($import));
}

/**
 * Batch generate items.
 */
function commerce_reset_generate_batch_items($import) {
  $operations = array();
  foreach ($import as $delta) {
    switch ($delta) {
      case 'delete_orders':
        $data = commerce_reset_get_orders_ids();
        $count = commerce_reset_order_count();
        $operations = commerce_reset_generate_batch_operations(
            $data, $count, $delta, $operations, 'order_id'
        );
        break;

      case 'delete_payment_transactions':
        $data = commerce_reset_get_transaction_ids();
        $count = commerce_reset_transaction_count();
        $operations = commerce_reset_generate_batch_operations(
            $data, $count, $delta, $operations, 'transaction_id'
        );
        break;

      case 'delete_customer_profiles':
        $data = commerce_reset_get_customer_profiles_ids();
        $count = commerce_reset_customer_profiles_count();
        $operations = commerce_reset_generate_batch_operations(
            $data, $count, $delta, $operations, 'profile_id'
        );
        break;

      case 'delete_products':
        $data = commerce_reset_get_products_ids();
        $count = commerce_reset_products_count();
        $operations = commerce_reset_generate_batch_operations(
            $data, $count, $delta, $operations, 'product_id'
        );
        break;
    }
  }

  $batch = array(
    'title' => 'Commerce Reset',
    'operations' => $operations,
    'finished' => 'commerce_reset_finished',
  );

  batch_set($batch);
}

/**
 * Generate batch operations.
 *
 * @param object $data
 *   The data to that will be added to the batch.
 * @param int $count
 *   Total number of records.
 * @param string $delta
 *   Batch identifier.
 * @param array $operations
 *   Batch operation.
 *
 * @return array
 *   Batch array.
 */
function commerce_reset_generate_batch_operations(
  $data,
  $count,
  $delta,
  array $operations,
  $primary_key
) {
  $i = 1;
  foreach ($data as $datum) {
    $params = array(
      'id' => $datum->$primary_key,
      'current' => $i++,
      'total' => $count,
    );
    $operations[] = array('commerce_reset_' . $delta, array($params));
  }
  return $operations;
}

/**
 * Delete orders callback.
 */
function commerce_reset_delete_orders($details, &$context) {
  watchdog(__FUNCTION__, $details['id']);
  commerce_order_delete($details['id']);
  $context['message'] = 'Deleting orders: ' . $details['current'] . ' of ' . $details['total'];
  if ($details['current'] == $details['total']) {
    db_query('ALTER TABLE {commerce_order} AUTO_INCREMENT = 1');
    db_query('ALTER TABLE {commerce_order_revision} AUTO_INCREMENT = 1');
  }
}

/**
 * Delete payment transactions callback.
 */
function commerce_reset_delete_payment_transactions($details, &$context) {
  watchdog(__FUNCTION__, $details['id']);
  commerce_payment_transaction_delete($details['id']);
  $context['message'] = 'Deleting transactions: ' . $details['current'] . ' of ' . $details['total'];
  if ($details['current'] == $details['total']) {
    db_query('ALTER TABLE {commerce_payment_transaction} AUTO_INCREMENT = 1');
    db_query('ALTER TABLE {commerce_payment_transaction_revision} AUTO_INCREMENT = 1');
  }
}

/**
 * Delete customer profiles callback.
 */
function commerce_reset_delete_customer_profiles($details, &$context) {
  watchdog(__FUNCTION__, $details['id']);
  commerce_customer_profile_delete($details['id']);
  $context['message'] = 'Deleting customer profiles: ' . $details['current'] . ' of ' . $details['total'];
  if ($details['current'] == $details['total']) {
    db_query('ALTER TABLE {commerce_customer_profile} AUTO_INCREMENT = 1');
    db_query('ALTER TABLE {commerce_customer_profile_revision} AUTO_INCREMENT = 1');
  }
}

/**
 * Delete product variations callback.
 */
function commerce_reset_delete_products($details, &$context) {
  watchdog(__FUNCTION__, $details['id']);
  $context['message'] = 'Deleting product variations: ' . $details['current'] . ' of ' . $details['total'];
  if ($details['current'] == $details['total']) {
    db_query('ALTER TABLE {commerce_product} AUTO_INCREMENT = 1');
    db_query('ALTER TABLE {commerce_product_revision} AUTO_INCREMENT = 1');
  }
}

/**
 * Batch finished callback.
 */
function commerce_reset_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Commerce reset batch process complete.'));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(
      t('An error occurred while processing @operation with arguments : @args',
        array(
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        )
      )
    );
  }
}
