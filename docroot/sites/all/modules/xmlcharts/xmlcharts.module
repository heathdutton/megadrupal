<?php

/**
 * @file
 * Drupal Module: XML Charts.
 *
 * XMLCharts is a module that consumes,
 * caches and provides blocks to display
 * industrial and precious metal prices
 * from XMLCharts Free XML Price Feeds.
 *
 * author: Andrew Wasson <https://drupal.org/user/127091>
 */

/**
 * Implements hook_block_info().
 */
function xmlcharts_block_info() {
  $xmlcharts_data              = new XMLChartsData();
  $arr_precious_metals_types   = $xmlcharts_data->getPreciousMetalsTypes();
  $arr_industrial_metals_types = $xmlcharts_data->getIndustrialMetalsTypes();

  // Precious Metals.
  foreach ($arr_precious_metals_types as $type => $value) {
    $blocks['xmlcharts_' . $type] = array('info' => "XMLCharts $type");
  }

  // Industrial Metals.
  foreach ($arr_industrial_metals_types as $type => $value) {
    $blocks['xmlcharts_' . $type] = array('info' => "XMLCharts $type");
  }

  $blocks['xmlcharts_precious_link'] = array('info' => t('XMLCharts Free Precious Metals XML Price Feed link'));

  $blocks['xmlcharts_industrial_link'] = array('info' => t('XMLCharts Free Industrial Metals XML Price Feed link'));

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function xmlcharts_block_configure($delta = '') {
  $xmlcharts_data                 = new XMLChartsData();
  $arr_precious_metals_types      = $xmlcharts_data->getPreciousMetalsTypes();
  $arr_industrial_metals_types    = $xmlcharts_data->getIndustrialMetalsTypes();
  $arr_precious_metals_currency   = $xmlcharts_data->getPreciousMetalsCurrencies();
  $arr_industrial_metals_currency = $xmlcharts_data->getIndustrialMetalsCurrencies();

  $form = array();

  // Precious Metals.
  foreach ($arr_precious_metals_types as $type => $value) {
    if ($delta == 'xmlcharts_' . $type) {
      $form['xmlcharts_' . $type . '_display_currency'] = array(
        '#type' => 'select',
        '#title' => t('Currency to display'),
        '#default_value' => variable_get('xmlcharts_' . $type . '_display_currency', 'usd'),
        '#options' => drupal_map_assoc($arr_precious_metals_currency),
      );
      $form['xmlcharts_' . $type . '_units'] = array(
        '#type' => 'select',
        '#title' => t('Units of measurement'),
        '#default_value' => variable_get('xmlcharts_' . $type . '_units', 'oz'),
        '#options' => drupal_map_assoc(array('oz', 'g')),
      );
      $form['xmlcharts_' . $type . '_link_visibility'] = array(
        '#type' => 'checkbox',
        '#title' => t('Hyperlink to XML Charts Visibility'),
        '#description' => t('According to the XML Charts terms of use (http://www.xmlcharts.com/terms-of-service.html), a link to the XML Charts website is required in order to use their data. The link can be visible or hidden from view. Would you like it visible or hidden?'),
        '#default_value' => variable_get('xmlcharts_' . $type . '_link_visibility', TRUE),
      );
    }
  }

  // Industrial Metals.
  foreach ($arr_industrial_metals_types as $type => $value) {
    if ($delta == 'xmlcharts_' . $type) {
      $form['xmlcharts_' . $type . '_display_currency'] = array(
        '#type' => 'select',
        '#title' => t('Currency to display'),
        '#default_value' => variable_get('xmlcharts_' . $type . '_display_currency', 'usd'),
        '#options' => drupal_map_assoc($arr_industrial_metals_currency),
      );
      $form['xmlcharts_' . $type . '_units'] = array(
        '#type' => 'select',
        '#title' => t('Units of measurement'),
        '#default_value' => variable_get('xmlcharts_' . $type . '_units', 'lb'),
        '#options' => drupal_map_assoc(array('lb', 'kg')),
      );
      $form['xmlcharts_' . $type . '_link_visibility'] = array(
        '#type' => 'checkbox',
        '#title' => t('Hyperlink to XML Charts Visibility'),
        '#description' => t('According to the XML Charts terms of use (http://www.xmlcharts.com/terms-of-service.html), a link to the XML Charts website is required in order to use their data. The link can be visible or hidden from view. Would you like it visible or hidden?'),
        '#default_value' => variable_get('xmlcharts_' . $type . '_link_visibility', TRUE),
      );
    }
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function xmlcharts_block_save($delta = '', $edit = array()) {
  $xmlcharts_data              = new XMLChartsData();
  $arr_precious_metals_types   = $xmlcharts_data->getPreciousMetalsTypes();
  $arr_industrial_metals_types = $xmlcharts_data->getIndustrialMetalsTypes();

  // Precious Metals.
  if (is_array($arr_precious_metals_types)) {
    foreach ($arr_precious_metals_types as $type => $value) {
      if ($delta == 'xmlcharts_' . $type) {
        variable_set('xmlcharts_' . $type . '_display_currency', $edit['xmlcharts_' . $type . '_display_currency']);
        variable_set('xmlcharts_' . $type . '_units', $edit['xmlcharts_' . $type . '_units']);
        variable_set('xmlcharts_' . $type . '_link_visibility', $edit['xmlcharts_' . $type . '_link_visibility']);
      }
    }
  }

  // Industrial Metals.
  if (is_array($arr_industrial_metals_types)) {
    foreach ($arr_industrial_metals_types as $type => $value) {
      if ($delta == 'xmlcharts_' . $type) {
        variable_set('xmlcharts_' . $type . '_display_currency', $edit['xmlcharts_' . $type . '_display_currency']);
        variable_set('xmlcharts_' . $type . '_units', $edit['xmlcharts_' . $type . '_units']);
        variable_set('xmlcharts_' . $type . '_link_visibility', $edit['xmlcharts_' . $type . '_link_visibility']);
      }
    }
  }

}


/**
 * Implements hook_block_view().
 */
function xmlcharts_block_view($delta = '') {
  $xmlcharts_data              = new XMLChartsData();
  $xml_precious_metals_data    = $xmlcharts_data->getPreciousMetalsData();
  $xml_industrial_metals_data  = $xmlcharts_data->getIndustrialMetalsData();
  $arr_precious_metals_types   = $xmlcharts_data->getPreciousMetalsTypes();
  $arr_industrial_metals_types = $xmlcharts_data->getIndustrialMetalsTypes();

  // Render the blocks.
  $block = array();

  foreach ($arr_precious_metals_types as $type => $value) {

    if ($delta == 'xmlcharts_' . $type) {

      if (!is_null(variable_get('xmlcharts_' . $type . '_display_currency'))) {
        $currency = variable_get('xmlcharts_' . $type . '_display_currency');
      }
      else {
        $currency = 'usd';
        variable_set('xmlcharts_' . $type . '_display_currency', $currency);
      }

      if (!is_null(variable_get('xmlcharts_' . $type . '_units'))) {
        $units = variable_get('xmlcharts_' . $type . '_units');
      }
      else {
        $units = 'oz';
        variable_set('xmlcharts_' . $type . '_units', $units);
      }

      if (!is_null(variable_get('xmlcharts_' . $type . '_link_visibility'))) {
        $link_visibility = variable_get('xmlcharts_' . $type . '_link_visibility');
      }
      else {
        $link_visibility = TRUE;
        variable_set('xmlcharts_' . $type . '_link_visibility', $link_visibility);
      }

      $xmlcharts_currency = new XMLChartsCurrency();
      $xmlcharts_currency->setCurrency($currency);
      setlocale(LC_MONETARY, $xmlcharts_currency->setLocale);
      $currency_symbol    = $xmlcharts_currency->currencySymbol;
      $currency_align     = $xmlcharts_currency->currencyAlign;

      if (!$xml_precious_metals_data === FALSE) {
        foreach ($xml_precious_metals_data as $data_currency => $arr) {
          foreach ($arr as $commodity => $price) {
            if (strtolower($data_currency) == $currency) {
              if (strtolower($commodity) == $type) {
                if ($units == 'oz') {
                  $xml_precious_metals_price = money_format('%!i', round($price * 31.1034768, 2));
                }
                else {
                  $xml_precious_metals_price = money_format('%!i', round($price, 2));
                }

                if ($currency_align == 'left') {
                  $xml_precious_metals_price = $currency_symbol . $xml_precious_metals_price;
                }
                else {
                  $xml_precious_metals_price .= $currency_symbol;
                }

                $block['subject'] = t("@type Price", array('@type' => ucfirst($type)));
                $xmlcharts_tokens = array(
                  '@type' => $type,
                  '@uctype' => ucfirst($type),
                  '@uccurrency' => strtoupper($currency),
                  '@lcunits' => strtolower($units),
                  '@precious_metals_price' => $xml_precious_metals_price,
                );
                $block['content'] = t('<div class="xml-chart-item @type"><span class="xml-chart-type">@uctype:</span> <span class="xml-chart-currency">@uccurrency</span><span class="xml-chart-units">/@lcunits.</span> <span class="xml-chart-value">@precious_metals_price</span></div>', $xmlcharts_tokens);
              }
            }
          }
        }
      }

      $xmlcharts_attributes = array(
        'rel' => 'nofollow',
        'href' => 'http://www.xmlcharts.com/precious-metals.html',
        'target' => '_blank',
      );
      if ($link_visibility != TRUE) {
        $xmlcharts_attributes['class'] = 'element-invisible';
      }
      $xmlcharts_string_attributes = str_replace('"', '', drupal_attributes($xmlcharts_attributes));
      $block['content'] .= t('<a @xmlcharts_string_attributes >Precious Metals XML Price Feed</a>', array('@xmlcharts_string_attributes' => $xmlcharts_string_attributes));

    }

  }

  foreach ($arr_industrial_metals_types as $type => $value) {

    $type = t("@type", array('@type' => $type));

    if ($delta == 'xmlcharts_' . $type) {

      if (!is_null(variable_get('xmlcharts_' . $type . '_display_currency'))) {
        $currency = variable_get('xmlcharts_' . $type . '_display_currency');
      }
      else {
        $currency = 'usd';
        variable_set('xmlcharts_' . $type . '_display_currency', $currency);
      }

      if (!is_null(variable_get('xmlcharts_' . $type . '_units'))) {
        $units = variable_get('xmlcharts_' . $type . '_units');
      }
      else {
        $units = 'lb';
        variable_set('xmlcharts_' . $type . '_units', $units);
      }

      if (!is_null(variable_get('xmlcharts_' . $type . '_link_visibility'))) {
        $link_visibility = variable_get('xmlcharts_' . $type . '_link_visibility');
      }
      else {
        $link_visibility = TRUE;
        variable_set('xmlcharts_' . $type . '_link_visibility', $link_visibility);
      }

      $xmlcharts_currency = new XMLChartsCurrency();
      $xmlcharts_currency->setCurrency($currency);
      setlocale(LC_MONETARY, $xmlcharts_currency->setLocale);
      $currency_symbol    = $xmlcharts_currency->currencySymbol;
      $currency_align     = $xmlcharts_currency->currencyAlign;

      if (!$xml_industrial_metals_data === FALSE) {
        foreach ($xml_industrial_metals_data as $data_currency => $arr) {
          foreach ($arr as $commodity => $price) {
            $data_currency = t("@data_currency", array('@data_currency' => $data_currency));
            $commodity     = t("@commodity", array('@commodity' => $commodity));
            $price         = t("@price", array('@price' => $price));
            if (strtolower($data_currency) == $currency) {
              if (strtolower($commodity) == $type) {
                if ($units == 'kg') {
                  $xml_industrial_metals_price = money_format('%!i', round($price * 0.45359237, 2));
                }
                else {
                  $xml_industrial_metals_price = money_format('%!i', round($price, 2));
                }

                if ($currency_align == 'left') {
                  $xml_industrial_metals_price = $currency_symbol . $xml_industrial_metals_price;
                }
                else {
                  $xml_industrial_metals_price .= $currency_symbol;
                }
                $block['subject'] = t("@type Price", array('@type' => ucfirst($type)));
                $xmlcharts_tokens = array(
                  '@type' => $type,
                  '@uctype' => ucfirst($type),
                  '@uccurrency' => strtoupper($currency),
                  '@lcunits' => strtolower($units),
                  '@industrial_metals_price' => $xml_industrial_metals_price,
                );
                $block['content'] = t('<div class="xml-chart-item @type"><span class="xml-chart-type">@uctype:</span> <span class="xml-chart-currency">@uccurrency</span><span class="xml-chart-units">/@lcunits.</span> <span class="xml-chart-value">@industrial_metals_price</span></div>', $xmlcharts_tokens);
              }
            }
          }
        }
      }

      $xmlcharts_attributes = array(
        'rel' => 'nofollow',
        'href' => 'http://www.xmlcharts.com/industrial-metals.html',
        'target' => '_blank',
      );
      if ($link_visibility != TRUE) {
        $xmlcharts_attributes['class'] = 'element-invisible';
      }
      $xmlcharts_string_attributes = str_replace('"', '', drupal_attributes($xmlcharts_attributes));
      $block['content'] .= t('<a @xmlcharts_string_attributes >Industrial Metals XML Price Feed</a>', array('@xmlcharts_string_attributes' => $xmlcharts_string_attributes));

    }

  }

  switch ($delta) {

    case 'xmlcharts_precious_link':
      $xmlcharts_attributes = array(
        'rel' => 'nofollow',
        'href' => 'http://www.xmlcharts.com/precious-metals.html',
        'target' => '_blank',
      );
      $xmlcharts_string_attributes = str_replace('"', '', drupal_attributes($xmlcharts_attributes));
      $block['content'] = t('<a @xmlcharts_string_attributes >Precious Metals XML Price Feed</a>', array('@xmlcharts_string_attributes' => $xmlcharts_string_attributes));
      break;

    case 'xmlcharts_industrial_link':
      $xmlcharts_attributes = array(
        'rel' => 'nofollow',
        'href' => 'http://www.xmlcharts.com/industrial-metals.html',
        'target' => '_blank',
      );
      $xmlcharts_string_attributes = str_replace('"', '', drupal_attributes($xmlcharts_attributes));
      $block['content'] = t('<a @xmlcharts_string_attributes >Industrial Metals XML Price Feed</a>', array('@xmlcharts_string_attributes' => $xmlcharts_string_attributes));
      break;

  }

  return $block;
}


/**
 * Implements hook_cron().
 */
function xmlcharts_cron() {

  // If it's after 10:30AM but before 3PM.
  if (xmlcharts_check_time(gmdate("G:i") . ' GMT', '10:30:00 GMT') && gmdate('G') < 15) {

    xmlcharts_check_refresh('10:30:00 GMT');

  }
  // If it's 3PM or later.
  elseif (gmdate('G') >= 15) {

    xmlcharts_check_refresh('15:00:00 GMT');

  }

}
