<?php

/**
 * @file
 * Drupal Module: SnapEngage
 *
 * Adds the required Javascript to the bottom of all your Drupal pages
 * to add the SnapEngage widget.
 *
 * Code heavily inspired by the Google Analytics module,
 * http://drupal.org/project/google_analytics.
 */

/**
 * Implements hook_menu().
 */
function snapengage_menu() {
  $items = array();

  $items['admin/config/system/snapengage'] = array(
    'title' => 'SnapEngage',
    'description' => 'Configure the settings used to add a SnapEngage widget to your site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('snapengage_admin_settings_form'),
    'access arguments' => array('administer snapengage'),
    'file' => 'snapengage.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function snapengage_permission() {
  return array(
    'administer snapengage' => array(
      'title' => t('Administer SnapEngage'),
      'description' => t('Perform administration tasks for SnapEngage'),
    ),
    'use PHP for SnapEngage visibility' => array(
      'title' => t('Use PHP for SnapEngage visibility'),
      'description' => t('Enter PHP code in the field for SnapEngage visibility settings. %warning', array('%warning' => t('Warning: Give to trusted roles only; this permission has security implications.'))),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function snapengage_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}


/**
 * Implements hook_init().
 *
 * Inserts JavaScript at the end of the page.
 */
function snapengage_init() {
  global $user;
  $id = check_plain(variable_get('snapengage_widget_id', ''));
  // 1. Check if the SnapEngage widget id has a value.
  // 2. Track page views based on visibility value.
  // 3. Check if we should track the currently active user's role.
  $language = variable_get('snapengage_widget_language', '');
  if (!empty($id) && _snapengage_visibility_pages() && _snapengage_visibility_roles($user)) {
      _snapengage_add_snapengage_script($id, $language);
    }
}

/**
 * Creates and adds the snapengage script to the page.
 *
 * @param string $widget_id
 *   ID of the SnapEngage widget.
 * @param string $advanced_script
 *   Advanced code to use.
 */
function _snapengage_add_snapengage_script($widget_id, $widget_language) {


$advanced_script = '';
if ($widget_language == 'user') {
//Get default language of user:
    global $user;
    $user_preferred_language = user_preferred_language($user);
    $language = $user_preferred_language->language;

    if (in_array($language, variable_get('snapengage_supported_languages', array()))) {
        $advanced_script .= sprintf('SnapEngage.setLocale("%s");', $language);
      }
}
elseif ($widget_language == 'default') {
  //Get default language of site:
    global $language;
      if ($language->language != 'en' AND in_array($language->language, variable_get('snapengage_supported_languages', array()))) {
        $advanced_script .= sprintf('SnapEngage.setLocale("%s");', $language->language);
      }
}

  // Create script.
    $inline_script = <<<EOT
  (function() {
    var se = document.createElement('script'); se.type = 'text/javascript'; se.async = true;
    se.src = '//storage.googleapis.com/code.snapengage.com/js/{$widget_id}.js';
    var done = false;
    se.onload = se.onreadystatechange = function() {
      if (!done&&(!this.readyState||this.readyState==='loaded'||this.readyState==='complete')) {
        done = true;
        {$advanced_script}
      }
    };
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(se, s);
  })();
EOT;
  drupal_add_js($inline_script, array(
    'type' => 'inline',
    'scope' => 'footer',
  ));
}

/**
 * Determine visibility based on roles.
 *
 * Based on visibility setting this function returns TRUE if the
 * current role must see the SnapEngage code and otherwise FALSE.
 *
 * @param object $account
 *   The user account to check visibility for.
 *
 * @return bool
 *   Whether account should see widget or not.
 */
function _snapengage_visibility_roles($account) {

  $enabled = FALSE;
  $roles = variable_get('snapengage_roles', array());

  if (array_sum($roles) > 0) {
    // Loop the roles selected for seeing the widget.
    foreach (array_keys($account->roles) as $rid) {
      // Is the current user a member of one role enabled for tracking?
      if (isset($roles[$rid]) && $rid == $roles[$rid]) {
        // Current user is a member of a role that must see the
        // SnapEngage widget.
        $enabled = TRUE;
        break;
      }
    }
  }
  else {
    // No roles selected for tracking, therefor the widget should be
    // visible for all roles.
    $enabled = TRUE;
  }

  return $enabled;
}

/**
 * Determine visibility based on path.
 *
 * Based on visibility setting this function returns TRUE if the
 * current page must include the SnapEngage code and otherwise FALSE.
 *
 * @return bool
 *   Whether page should include widget or not.
 */
function _snapengage_visibility_pages() {
  static $page_match;

  // Cache visibility setting in hook_init for hook_footer.
  if (!isset($page_match)) {

    $visibility = variable_get('snapengage_visibility', 0);
    $pages = variable_get('snapengage_pages', '');

    // Match path if necessary.
    if (!empty($pages)) {
      if ($visibility < 2) {
        $path = drupal_get_path_alias($_GET['q']);
        // Compare with the internal and path alias (if any).
        $page_match = drupal_match_path($path, $pages);
        if ($path != $_GET['q']) {
          $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
        }
        // When $visibility has a value of 0, display the block on all
        // pages except those listed in $pages. When set to 1, display
        // it only on those pages listed in $pages.
        $page_match = !($visibility xor $page_match);
      }
      elseif (module_exists('php')) {
        $page_match = php_eval($pages);
      }
      else {
        $page_match = FALSE;
      }
    }
    else {
      $page_match = TRUE;
    }

  }
  return $page_match;
}
