<?php

/**
 * @file
 * Test file for Snapengage module.
 */

/**
 * Common functionality for testing Snapengage module.
 */
abstract class SnapEngageWebTestCase extends DrupalWebTestCase {

  /**
   * Helper function for testing disabling and uninstalling module.
   */
  protected function tearDown() {
    module_disable(array('snapengage'));

    $vars = db_select('variable')
      ->fields('variable', array('name'))
      ->condition('name', array('snapengage_supported_languages'))
      ->execute()
      ->fetchCol();

    $missing = '';
    if (!empty($vars)) {
      $missing = ' (missing: ' . implode(', ', $vars) . ')';
    }
    $this->assertTrue(empty($vars), 'All relevant variables removed on module disable' . $missing . '.');

    drupal_uninstall_modules(array('snapengage'));

    $vars = db_select('variable')
      ->fields('variable', array('name'))
      ->condition('name', 'snapengage%', 'LIKE')
      ->execute()
      ->fetchCol();

    $missing = '';
    if (!empty($vars)) {
      $missing = ' (missing: ' . implode(', ', $vars) . ')';
    }
    $this->assertTrue(empty($vars), 'All remaining variables removed on module uninstall' . $missing . '.');

    parent::tearDown();
  }
}

/**
 * Test basic functionality of Snapengage module.
 */
class SnapengageBasicTest extends SnapEngageWebTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Snapengage basic tests'),
      'description' => t('Test basic functionality of Snapengage module.'),
      'group' => 'SnapEngage',
    );
  }

  /**
   * Implements DrupalWebTestCase::setup().
   */
  public function setUp() {
    parent::setUp('snapengage');

    $permissions = array(
      'access administration pages',
      'administer snapengage',
    );

    // User to set up snapengage.
    $this->admin_user = $this->drupalCreateUser($permissions);
    $this->drupalLogin($this->admin_user);
  }

  /**
   * Check presence of the settings page.
   */
  public function testSnapengageConfiguration() {
    // Check for setting page's presence.
    $this->drupalGet('admin/config/system/snapengage');
    $this->assertRaw(t('Widget ID'), '[testSnapengageConfiguration]: Settings page displayed.');
  }

  /**
   * Check that the SnapEngage widget code is visible.
   */
  public function testSnapengagePageVisibility() {
    $widget_id = 'abcdefgh-1234-ijkl-5678-mnopqrstuvwx';
    variable_set('snapengage_widget_id', $widget_id);

    // Show widget on "every page except the listed pages".
    variable_set('snapengage_visibility', 0);
    // Disable widget one "admin*" pages only.
    variable_set('snapengage_pages', "admin\nadmin/*");
    // Enable widget only for authenticated users only.
    variable_set('snapengage_roles', array(DRUPAL_AUTHENTICATED_RID => DRUPAL_AUTHENTICATED_RID));

    // Check widget code visibility.
    $this->drupalGet('');
    $this->assertRaw($widget_id, '[testSnapengagePageVisibility]: Display widget for authenticated users.');

    // Test whether widget code is not included on pages to omit.
    $this->drupalGet('admin');
    $this->assertNoRaw($widget_id, '[testSnapengagePageVisibility]: Don\'t display widget on admin page.');
    $this->drupalGet('admin/config/system/snapengage');
    // Checking for widget code URI here, because the form displays
    // the $widget_id.
    $this->assertNoRaw('snapabug.appspot.com/snapabug.js', '[testSnapengagePageVisibility]: Don\'t display widget on admin subpage.');

    // Test whether widget code display is properly flipped.
    variable_set('snapengage_visibility', 1);
    $this->drupalGet('admin');
    $this->assertRaw($widget_id, '[testSnapengagePageVisibility]: Display widget code on admin page.');
    $this->drupalGet('admin/config/system/snapengage');
    // Checking for widget code URI here, because the form displays
    // the $widget_id.
    $this->assertRaw('storage.googleapis.com/code.snapengage.com/js', '[testSnapengagePageVisibility]: Display widget code on admin subpage.');
    $this->drupalGet('');
    $this->assertNoRaw($widget_id, '[testSnapengagePageVisibility]: Don\'t display widget on front page.');

    // Test whether widget code is not display for anonymous.
    $this->drupalLogout();
    $this->drupalGet('');
    $this->assertNoRaw($widget_id, '[testSnapengagePageVisibility]: Don\'t display widget for anonymous users.');
  }

  /**
   * Check whether it is possible to inject code via the widget ID.
   */
  public function testSnapengageXssTest() {
    $widget_id = "abcdefgh-1234-ijkl-5678-mnopqrstuvwx');alert('XSS');//";
    variable_set('snapengage_widget_id', $widget_id);

    // Check widget code visibility.
    $this->drupalGet('');
    $this->assertNoRaw("alert('XSS')", '[testSnapengageXss]: Widget ID is XSS protected.');
  }
}

/**
 * Test roles functionality of SnapEngage module.
 */
class SnapengageRolesTest extends SnapEngageWebTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('SnapEngage role tests'),
      'description' => t('Test roles functionality of SnapEngage module.'),
      'group' => 'SnapEngage',
    );
  }

  /**
   * Implements DrupalWebTestCase::setup().
   */
  public function setUp() {
    parent::setUp('snapengage');

    $permissions = array(
      'access administration pages',
      'administer snapengage',
    );

    // User to set up snapengage.
    $this->admin_user = $this->drupalCreateUser($permissions);
  }

  /**
   * Test how the widget displays for different roles.
   */
  public function testSnapengageRolesWidget() {
    $widget_id = 'abcdefgh-1234-ijkl-5678-mnopqrstuvwx';
    variable_set('snapengage_widget_id', $widget_id);

    // Test if the default settings are working as expected.
    // Enable widget for all users.
    variable_set('snapengage_roles', array());

    // Check widget code visibility.
    $this->drupalGet('');
    $this->assertRaw($widget_id, '[testSnapengageRoleVisibility]: Display widget for anonymous users on frontpage with default settings.');
    $this->drupalGet('admin');
    $this->assertRaw($widget_id, '[testSnapengageRoleVisibility]: Display widget for anonymous users in admin section with default settings.');

    $this->drupalLogin($this->admin_user);

    $this->drupalGet('');
    $this->assertRaw($widget_id, '[testSnapengageRoleVisibility]: Display widget for authenticated users on frontpage with default settings.');
    $this->drupalGet('admin');
    $this->assertRaw($widget_id, '[testSnapengageRoleVisibility]: Display widget for authenticated users in admin section with default settings.');

    // Test if the non-default settings are working as expected.
    // Enable widget only for authenticated users.
    variable_set('snapengage_roles', array(DRUPAL_AUTHENTICATED_RID => DRUPAL_AUTHENTICATED_RID));

    $this->drupalGet('');
    $this->assertRaw($widget_id, '[testSnapengageRoleVisibility]: Display widget for authenticated users on frontpage.');

    $this->drupalLogout();
    $this->drupalGet('');
    $this->assertNoRaw($widget_id, '[testSnapengageRoleVisibility]: Don\'t display widget for anonymous users on frontpage.');
  }
}

/**
 * Test advanced widget functionality of SnapEngage module.
 */
class SnapengageAdvancedTest extends SnapEngageWebTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('SnapEngage advanced widget tests'),
      'description' => t('Test advanced widget functionality of SnapEngage module.'),
      'group' => 'SnapEngage',
    );
  }

  /**
   * Implements DrupalWebTestCase::setup().
   */
  public function setUp() {
    parent::setUp('snapengage');

    $permissions = array(
      'access administration pages',
      'administer snapengage',
    );

    // User to set up snapengage.
    $this->admin_user = $this->drupalCreateUser($permissions);
  }

  /**
   * Test how the widget displays for different roles.
   */
  public function testSnapengageAdvancedWidget() {
    $widget_id = 'abcdefgh-1234-ijkl-5678-mnopqrstuvwx';
    variable_set('snapengage_widget_id', $widget_id);
  }

  /**
   * Check advanced fields for XSS attacks.
   */
  public function testSnapengageAdvacncedXssTest() {
    $widget_id = "abcdefgh-1234-ijkl-5678-mnopqrstuvwx";
    variable_set('snapengage_widget_id', $widget_id);
  }
}
