<?php


/**
 * Implements hook_commerce_line_item_type_info().
 */
function commerce_rounding_commerce_line_item_type_info() {
  $line_item_types = array();

  $line_item_types['rounding'] = array(
    'name' => t('Rounding'),
    'description' => t('Round the total order price.'),
    'add_form_submit_value' => t('Add rounding'),
    'base' => 'commerce_rounding_line_item',
  );

  return $line_item_types;
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function commerce_rounding_commerce_price_component_type_info() {
  return array(
    'rounding' => array (
      'title' => t('Rounding'),
      'display_title' => t('Rounding'),
      'weight' => 20,
    )
  );
}

/**
 * Default function for rounding value.
 *
 * @param int $total_price
 *   Total price
 * @param string $currency_code
 *   Currency code
 * @return int
 *   Positive or negative rounding
 */
function commerce_rounding_value($total_price, $currency_code) {
  $residue = $total_price % 100;

  if ($residue >= 50) {
    $rounding = 100 - $residue;
  }
  else {
    $rounding = -$residue;
  }

  return $rounding;
}

/**
 * Adds a rounding line item to an order.
 *
 * @param $order
 *   The order to add the rounding line item to.
 * @param $skip_save
 *   Boolean indicating whether or not to skip saving the order in this function.
 *
 * @return
 *   The saved rounding line item object or FALSE on failure.
 */
function commerce_rounding_add_rounding_line_item($order, $skip_save = FALSE) {
  // Do not proceed without a valid order.
  if (empty($order)) {
    return FALSE;
  }

  commerce_order_calculate_total($order);

  // Add it to the order's line item reference value.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $total = $order_wrapper->commerce_order_total->amount->value();
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  $rounding_function = variable_get('commerce_rounding_function', 'commerce_rounding_value');
  $residue = $rounding_function($total, $currency_code);

  $rounding_line_item = commerce_rounding_line_item_new($residue, $currency_code, $order->order_id);

  // Save the incoming line item now so we get its ID.
  commerce_line_item_save($rounding_line_item);

  $order_wrapper->commerce_line_items[] = $rounding_line_item;

  // Save the updated order.
  if (!$skip_save) {
    commerce_order_save($order);
  }
  // Otherwise, we still need to update the order total to take for account
  // added rounding line item.
  else {
    commerce_order_calculate_total($order);
  }

  return $rounding_line_item;
}

/**
 * Creates a new rounding line item populated with the proper rounding values.
 *
 * @param $order_id
 *   The ID of the order the line item belongs to.
 * @param $data
 *   An array value to initialize the line item's data array with.
 * 
 * @return
 *   The rounding line item for the specified service initialized to the given
 *   unit price.
 */
function commerce_rounding_line_item_new($residue, $currency_code, $order_id) {

  // Build the custom unit price array.
  $unit_price = array(
    'amount' => $residue,
    'currency_code' => $currency_code,
    'data' => array(),
  );

  // Create the new line item.
  $line_item = entity_create('commerce_line_item', array(
    'type' => 'rounding',
    'line_item_label' => t('Rounding'),
    'order_id' => $order_id,
    'quantity' => 1,
    'data' => array(),
  ));

  // Set the service textfield and unit price.
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
  $line_item_wrapper->commerce_unit_price = $unit_price;
  $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
    $unit_price, // price
    'rounding',  // type
    $unit_price, // component_price
    TRUE,        // included
    FALSE        // add_base_price
  );

  // Return the line item.
  return $line_item;
}

/**
 * Deletes all rounding line items on an order.
 *
 * @param $order
 *  The order object to delete the rounding line items from.
 * @param $skip_save
 *   Boolean indicating whether or not to skip saving the order in this function.
 */
function commerce_rounding_delete_rounding_line_items($order, $skip_save = FALSE) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // When deleting more than one line item, metadata_wrapper will give problems
  // if deleting while looping through the line items. So first remove from order
  // and then delete the line items.
  $line_item_ids = array();

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    // If this line item is a rounding line item...
    if ($line_item_wrapper->type->value() == 'rounding') {
      // Store its ID for later deletion and remove the reference from the line
      // item reference field.
      $line_item_ids[] = $line_item_wrapper->line_item_id->value();
      $order_wrapper->commerce_line_items->offsetUnset($delta);
    }
  }

  // If we found any rounding line items...
  if (!empty($line_item_ids)) {
    // First save the order to update the line item reference field value.
    if (!$skip_save) {
      commerce_order_save($order);
    }

    // Then delete the line items.
    commerce_line_item_delete_multiple($line_item_ids);
  }
}

