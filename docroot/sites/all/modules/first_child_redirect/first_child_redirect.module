<?php

/**
 * @file
 * The module file for first child redirect.
 *
 * This contains the core contents for the child redirect functionality.
 */

// The permission string constant for bypassing redirect functionality.
define('FIRST_CHILD_REDIRECT_BYPASS_PERMISSION', 'bypass child page redirect');

/**
 * Implements hook_permission().
 */
function first_child_redirect_permission() {
  return array(
    FIRST_CHILD_REDIRECT_BYPASS_PERMISSION => array(
      'title' => t('Ignore child page redirect'),
      'description' => t('Bypass child page redirects for pages that are set to redirect to the first child menu item.'),
    ),
  );
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function first_child_redirect_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['#node'])) {
    $form['menu']['link']['redirect_to_child'] = array(
      '#type' => 'checkbox',
      '#title' => t('Child redirect'),
      '#description' => t("Redirect this page to it's first child menu item"),
      '#default_value' => variable_get('first_child_redirect_nid_' . $form['#node']->nid, 0),
    );
    $form['#submit'][] = 'first_child_redirect_node_form_submit';
  }
}


/**
 * Custom submit callback for dealing with first child redirects.
 */
function first_child_redirect_node_form_submit($form, &$form_state) {

  if ($form_state['values']['menu']['enabled']) {
    variable_set('first_child_redirect_nid_' . $form['#node']->nid, $form_state['values']['menu']['redirect_to_child']);
  }
  else {
    $var = variable_get('first_child_redirect_nid_' . $form['#node']->nid, FALSE);
    if ($var) {
      variable_del('first_child_redirect_nid_' . $form['#node']->nid);
    }
  }
}


/**
 * Implements hook_module_implements_alter().
 */
function first_child_redirect_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['first_child_redirect'])) {
    $group = $implementations['first_child_redirect'];
    unset($implementations['first_child_redirect']);
    $implementations['first_child_redirect'] = $group;
  }
}


/**
 * Implements hook_node_view().
 */
function first_child_redirect_node_view($node) {
  global $user;
  module_load_include('inc', 'ds_extras', 'includes/ds_extras.pages');
  $child_redirect = variable_get('first_child_redirect_nid_' . $node->nid);
  // Ensure the node has child redirect enabled and
  // that the current user doesn't
  // have bypass access for child redirects.
  if ($child_redirect &&
    !user_access(FIRST_CHILD_REDIRECT_BYPASS_PERMISSION, $user)) {
    if (!empty($node->menu_node_links)) {
      $mlid_keys = array_keys($node->menu_node_links);
      $mlid = $mlid_keys[0];
      $first_child = _first_child_redirect_get_first_child($mlid);
      if ($first_child) {
        drupal_goto($first_child['link_path']);
      }
    }
  }
}


/**
 * Retrieve the first child menu link item of the given menu link id.
 *
 * @param string $mlid
 *    The Menu link id to get the child item from.
 *
 * @return mixed
 *    The first child of the menu item otherwise if
 *    there is no first child it returns false.
 */
function _first_child_redirect_get_first_child($mlid) {
  $result = db_query("SELECT ml.mlid FROM {menu_links} ml WHERE ml.plid = :plid ORDER BY ml.weight ASC", array('plid' => $mlid));
  $first_child_item = $result->fetch();
  if (!empty($first_child_item)) {
    return menu_link_load($first_child_item->mlid);
  }
  return FALSE;
}
