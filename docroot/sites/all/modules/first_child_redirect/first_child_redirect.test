<?php

/**
 * @file
 * Provides testing for the first child redirect functionality.
 */

/**
 * Tests the functionality provided by this module.
 */
class FirstChildRedirectTestCase extends DrupalWebTestCase {

  // The user with bypass permission.
  protected $bypassUser;
  // The parent node to test redirect functionality.
  protected $parentNode;
  // The child node to redirect to.
  protected $childNode;

  /**
   * Returns the information for the test to be used in the UI.
   *
   * @return array
   *   The information for this module's collection of tests.
   */
  public static function getInfo() {
    return array(
      'name' => 'First Child Redirect',
      'description' => 'Ensure that the first child redirect functionality performs as expected.',
      'group' => 'Menu',
    );
  }

  /**
   * Prepares the entities, both nodes and the user for testing.
   */
  public function setUp() {
    // Enable required modules for this test.
    parent::setUp(array('menu_node', 'first_child_redirect'));
    // Set up the user with bypass access.
    $this->bypassUser = $this->drupalCreateUser(array(FIRST_CHILD_REDIRECT_BYPASS_PERMISSION));
    // Create a pair of nodes to test the functionality against.
    $parent_settings = array(
      'title' => 'Parent node',
      'menu' => array(
        'description' => 'This is the parent node.',
        'enabled' => 1,
        'link_title' => 'Parent node',
        'parent' => 'main-menu:0',
        'weight' => 1,
        'link' => array(
          'redirect_to_child' => 1,
        ),
      ),
      'path' => array(
        'alias' => 'parent-node',
      ),
    );
    $child_settings = array(
      'title' => 'Child node',
      'menu' => array(
        'description' => 'This is the child node',
        'enabled' => 1,
        'link_title' => 'Child node',
        'weight' => 1,
      ),
      'path' => array(
        'alias' => 'child-node',
      ),
    );
    $this->drupalCreateNode($parent_settings);

    $this->drupalCreateNode($child_settings);
    $nids = db_query('SELECT nid FROM {node}')->fetchCol();
    $nodes = node_load_multiple($nids);
    // Set the menu structure for the two nodes that now have menu link Ids.
    $this->parentNode = $nodes[1];
    $this->childNode = $nodes[2];
    $this->parentNode->redirect_to_child = 1;
    $this->saveFirstChildRedirectSettings($this->parentNode);
    $child_menu_node_keys = array_keys($this->childNode->menu_node_links);
    $parent_menu_node_keys = array_keys($this->parentNode->menu_node_links);
    $child_mlid = $child_menu_node_keys[0];
    $parent_mlid = $parent_menu_node_keys[0];
    $child_menu_link = menu_link_load($child_mlid);
    $child_menu_link['plid'] = $parent_mlid;
    menu_link_save($child_menu_link);
  }

  /**
   * Save first child redirect settings.
   *
   * Creates a variable for a given node with 1 or 0
   * for whether first child redirect is enabled or not.
   *
   * @param object $node
   *   The node to assign the redirect value to.
   */
  private function saveFirstChildRedirectSettings($node) {
    if (!empty($node->menu_node_links)) {
      variable_set('first_child_redirect_nid_' . $node->nid, $node->redirect_to_child);
    }
    else {
      $var = variable_get('first_child_redirect_nid_' . $node->nid, FALSE);
      if ($var) {
        variable_del('first_child_redirect_nid_' . $node->nid);
      }
    }
  }

  /**
   * Tests that redirect is bypassed for the user with bypass permissions.
   */
  public function testBypassRedirectFunctionality() {
    // Login as the user with bypass permissions.
    $this->drupalLogin($this->bypassUser);
    $this->drupalGet('parent-node');
    $this->assertUrl('parent-node', array(), 'Bypass user bypasses the redirect to /child-node.');
    $this->drupalLogout();
  }

  /**
   * Tests that all anonymous users successfully redirect the child node page.
   */
  public function testAnonymousRedirectFunctionality() {
    $this->drupalGet('parent-node');
    $this->assertUrl('child-node', array(), 'Redirect to
      first child menu item (/child-node) completed successfully.');
  }
}
