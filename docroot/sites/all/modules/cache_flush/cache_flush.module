<?php
/**
 * @file
 * Cache Flush module file.
 */

/**
 * Implements hook_menu().
 */
function cache_flush_menu() {
  $items = array();
  // Page to flush any cache bin we need.
  $items['admin/config/development/cache-flush'] = array(
    'title' => 'Flush Cache',
    'description' => 'Flush Cache bins',
    'position' => 'right',
    'weight' => -11,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cache_flush_advanced_callback'),
    'access arguments' => array('access administration pages'),
  );
  // Path to clear blocks drupal cache.
  $items['cache-flush/ajax/%/%'] = array(
    'page callback' => 'cache_flush_block_ajax_callback',
    'page arguments' => array(2, 3),
    'access callback' => 'user_access',
    'access arguments' => array('access contextual links'),
    'type' => MENU_CALLBACK,
  );
  if (module_exists('views')) {
    // Path to clear views cache.
    $items['cache-flush/views-ajax/%/%'] = array(
      'page callback' => 'cache_flush_views_ajax_callback',
      'page arguments' => array(2, 3),
      'access callback' => 'user_access',
      'access arguments' => array('access contextual links'),
      'type' => MENU_CALLBACK,
    );
  }
  if (module_exists('panels')) {
    // Path to clear panels cache.
    $items['cache-flush/panels-ajax/%/%/%'] = array(
      'page callback' => 'cache_flush_panels_ajax_callback',
      'page arguments' => array(2, 3, 4),
      'access callback' => 'user_access',
      'access arguments' => array('access contextual links'),
      'type' => MENU_CALLBACK,
    );
  }
  if (module_exists('node')) {
    // Path to clear node cache.
    $items['node/%node/flush'] = array(
      'title' => 'Flush Cache',
      'page callback' => 'cache_flush_entity_callback',
      'page arguments' => array('node', 1),
      'access callback' => 'user_access',
      'access arguments' => array('administer nodes'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 101,
    );
  }
  if (module_exists('taxonomy')) {
    // Path to clear term cache.
    $items['taxonomy/term/%taxonomy_term/flush'] = array(
      'title' => 'Flush Cache',
      'page callback' => 'cache_flush_entity_callback',
      'page arguments' => array('taxonomy_term', 2),
      'access callback' => 'user_access',
      'access arguments' => array('administer taxonomy'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 101,
    );
  }
  if (module_exists('user')) {
    // Path to clear user cache.
    $items['user/%user/flush'] = array(
      'title' => 'Flush Cache',
      'page callback' => 'cache_flush_entity_callback',
      'page arguments' => array('user', 1),
      'access callback' => 'user_access',
      'access arguments' => array('administer users'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 101,
    );
  }
  return $items;
}

/**
 * Menu callback function
 *
 * @see cache_flush_menu().
 */
function cache_flush_advanced_callback() {
  // Set messages if no caching enabled.
  $block_cache = variable_get('block_cache');
  $cache = variable_get('cache');
  if (empty($block_cache) || empty($cache)) {
    $link = l('cache settings', 'admin/config/development/performance', array('attributes' => array('target' => '_blank',)));
    drupal_set_message(t('Please visit !link and enable both cache for anonymous user and block cache.', array('!link' => $link,)));
  }

  $cache_tables = array(
    '- Select a table -',
    'cache',
    'cache_block',
    'cache_filter',
    'cache_page',
  );
  $cache_tables = array_merge($cache_tables, module_invoke_all('flush_caches'));
  asort($cache_tables);
  $table_options = array_combine($cache_tables, $cache_tables);

  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Flush Cache'),
  );

  $form['options']['cid'] = array(
    '#title' => t('Cache Id'),
    '#description' => t('Insert cache id you want to flush, if you want to flush all table contents use * and check wildcard.'),
    '#type' => 'textfield',
    '#default_value' => '',
    '#size' => 30,
  );
  $form['options']['table'] = array(
    '#title' => t('Cache Table'),
    '#type' => 'select',
    '#default_value' => '',
    '#options' => $table_options,
  );
  $form['options']['wildcard'] = array(
    '#title' => t('Wildcard'),
    '#type' => 'checkbox',
    '#default_value' => FALSE,
  );

  $form['#attached']['css'] = array(
    drupal_get_path('module', 'cache_flush') . '/css/cache_flush.css',
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Flush Cache'));

  return $form;
}

/**
 * Form validate callback
 *
 * @see cache_flush_advanced_callback().
 */
function cache_flush_advanced_callback_validate(&$form, &$form_state) {
  if (empty($form_state['values']['cid'])) {
    form_set_error('cid', t('Please, put any Cache id value'));
  }
  if ($form_state['values']['table'] == '- Select a table -') {
    form_set_error('table', t('Please select any Cache table'));
  }
}

/**
 * Form submit callback
 *
 * @see cache_flush_advanced_callback().
 */
function cache_flush_advanced_callback_submit(&$form, &$form_state) {
  $cid = trim($form_state['values']['cid']);
  $bin = trim($form_state['values']['table']);
  $wildcard = $form_state['values']['wildcard'];
  $wildcard = $wildcard === 0 ? FALSE : TRUE;
  cache_clear_all($cid, $bin, $wildcard);
}

/**
 * Callback function to flush block cache.
 *
 * @param string $module
 *   block module name
 *
 * @param string $delta
 *   block delta
 */
function cache_flush_block_ajax_callback($module, $delta) {
  // Load block.
  $block = block_load($module, $delta);
  if (!empty($block->cache)) {
    // If block doesn't support cache or support custom cache we notify user.
    if (in_array($block->cache, array(-1, -2))) {
      if ($block->cache == -1) {
        $module = l(t('Block cache alter'), 'https://drupal.org/project/blockcache_alter', array('external' => TRUE,));
        $hook = l(t('hook_block_info'), 'https://api.drupal.org/api/drupal/modules%21block%21block.api.php/function/hook_block_info/7', array('external' => TRUE,));
        $block = t('This block doesn\'t support caching. You can install
        !module or change !hook data if block created with custom code',
        array('!module' => $module, '!hook' => $hook,));
      }
      elseif ($block->cache == -2) {
        $block = t('This block doesn\'t implement standard block caching scheme.');
      }
      drupal_set_message($block);
      $commands[] = ajax_command_before('#main-content', theme('status_messages'));
    }
    else {
      // If block support standard caching (Global, Per page, Per role, Per user).
      // Delete existing block cache.
      cache_clear_all($module . ':' . $delta, 'cache_block', TRUE);

      // Delete cache_path values, all cache_page values
      // and Varnish if acquia_purge installed.
      cache_flush_cache_helper($_GET['path'], TRUE);

      // Prepare block to render.
      $block = _block_render_blocks(array($block));
      $block = _block_get_renderable_array($block);
      $block = render($block);

      // Prepare and send ajax response.
      $module = str_replace('_', '-', $module);
      $delta = str_replace('_', '-', $delta);
      $id = '#block-' . $module . '-' . $delta;
      $commands[] = ajax_command_replace($id, $block);
    }

    $page = array('#type' => 'ajax', '#commands' => $commands);

    ajax_deliver($page);
  }
}

/**
 * Callback function to flush views cache.
 *
 * @param $name
 *
 * @param $display
 *
 * @param null $arg
 */
function cache_flush_views_ajax_callback($name, $display, $arg = NULL) {
  // Flush views cache.
  cache_clear_all($name . ':' . $display, 'cache_views_data', TRUE);
  cache_clear_all('ctools_export:views_view' . ':' . $name, 'cache_views', TRUE);
  // Delete cache_path values, all cache_page values
  // and Varnish if acquia_purge installed.
  cache_flush_cache_helper($_GET['path'], TRUE);

  // Prepare view to render.
  $args = empty($_SESSION['views_args']) ?  array(): unserialize($_SESSION['views_args']);
  unset($_SESSION['views_args']);
  $block = views_embed_view($name, $display, $args);
  $block = render($block);

  // Prepare and send ajax response.
  $name = str_replace('_', '-', $name);
  $display = str_replace('_', '-', $display);
  $id = '#block-views-' . $name . '-' . $display;
  $commands[] = ajax_command_replace($id, $block);

  // Set message for flushed view.
  $message = t('This view has been flushed. If you want to test it, please reload the page.');
  drupal_set_message($message);
  $commands[] = ajax_command_before('#main-content', theme('status_messages'));

  $page = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($page);
}

/**
 * Callback function to flush panels cache.
 *
 * @param $method
 *   cache panels method
 *
 * @param $bid
 *
 * @param $pid
 */
function cache_flush_panels_ajax_callback($method, $bid, $pid) {
  // Flush views cache.
  cache_clear_all('panels_' . $method . '_cache:' . $bid . ':' . $pid, 'cache_panels', TRUE);
  // Delete cache_path values, all cache_page values
  // and Varnish if acquia_purge installed.
  cache_flush_cache_helper($_GET['path'], TRUE);
  // Set message to reload page.
  $message = t('Please reload page to see changes.');
  drupal_set_message($message);
  $commands[] = ajax_command_before('#main-content', theme('status_messages'));
  $page = array('#type' => 'ajax', '#commands' => $commands);

  ajax_deliver($page);
}

/**
 * Callback function to flush entity cache.
 *
 * @param string $type
 *   entity type
 *
 * @param object $entity
 *   entity object
 */
function cache_flush_entity_callback($type, $entity) {
  // Get entity id.
  $entity_ids = entity_extract_ids($type, $entity);
  $entity_id = $entity_ids[0];
  $cache_field_path = 'field:' . $type . ':' . $entity_id;

  // Delete existing block cache.
  cache_clear_all($cache_field_path, 'cache_field', TRUE);

  $path = entity_uri($type, $entity);
  // Delete cache per path, per page and Varnish if acquia_purge installed.
  if (!empty($path['path'])) {
    cache_flush_cache_helper($path['path']);
  }

  // Check if exists entity module.
  if (module_exists('entity')) {
    $entity = entity_view($type, $entity, 'full');
  }
  else {
    // If entity module is not installed use standard entities views functions.
    if ($type == 'node') {
      $entity = node_view($entity, 'full');
    }
    elseif ($type == 'taxonomy_term') {
      $entity = taxonomy_term_view($entity, 'full');
    }
    elseif ($type == 'user') {
      $entity = user_view($entity, 'full');
    }
  }

  $id = '#block-system-main';
  $entity = render($entity);
  $commands[] = ajax_command_replace($id, $entity);
  $page = array('#type' => 'ajax', '#commands' => $commands);
  ajax_deliver($page);
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function cache_flush_contextual_links_view_alter(&$element, $items) {
  if (!empty($element['#element']['#block']->module)) {
    $block = $element['#element']['#block'];
    $module = $element['#element']['#block']->module;
    // Add Flush Cache contextual link.
    $block_cache = variable_get('block_cache');
    $query['path'] = current_path();
    if ($module != 'views' && $block_cache == 1) {
      $path = 'cache-flush/ajax/' . $module . '/' . $block->delta;
    }
    elseif ($module == 'views') {
      if (!empty($element['#element']['#views_contextual_links_info'])) {
        $data = $element['#element']['#views_contextual_links_info']['views_ui'];
        $name = $data['view_name'];
        $display = $data['view_display_id'];
        $path = 'cache-flush/views-ajax/' . $name . '/' . $display;
        if (!empty($data['view']->args)) {
          $_SESSION['views_args'] = serialize($data['view']->args);
        }
      }
    }
    drupal_add_library('system', 'drupal.ajax');
    drupal_add_library('system', 'jquery.form');
    $links = & $element['#links'];
    $links['flush-cache'] = array(
      'title' => t('Flush Cache'),
      'href' => url($path),
      'attributes' => array(
        'class' => array('use-ajax'),
      ),
      'query' => $query,
      'external' => TRUE,
    );
  }
}

/**
 * Use to add menu_local_task use-ajax class.
 */
function cache_flush_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (!empty($data['tabs'][0]['output'])) {
    drupal_add_library('system', 'drupal.ajax');
    drupal_add_library('system', 'jquery.form');
    foreach ($data['tabs'][0]['output'] as &$item) {
      // Add use-ajax class to all links with /flush.
      if (strstr($item['#link']['path'], '/flush') !== FALSE) {
        $item['#link']['localized_options']['attributes']['class'][] = 'use-ajax';
      }
    }
  }
}

/**
 * Helper to reduce code quantity.
 *
 * @param $path
 *   path to clear cache
 *
 * @param null $cache_page
 *   flag to clear page cache
 */
function cache_flush_cache_helper($path, $cache_page = NULL) {
  // Delete cache per path.
  cache_clear_all($path, 'cache_path', TRUE);

  // Purge acquia varnish cache if acquia purge module exists.
  if (module_exists('acquia_purge')) {
    $paths[] = $path;
    acquia_purge_purge_paths($paths);
  }

  // Delete cache for anonymous users. If it is enabled.
  // TODO create admin interface to handle multiple instances paths.
  // Or use acquia_purge functionality.
  $cache = variable_get('cache');
  if ($cache == 1) {
    // Clear page itself.
    cache_clear_all($_SERVER['HTTP_REFERER'], 'cache_page', FALSE);
    // If wildcard set TRUE remove all caches starting with this path.
    if ($cache_page == TRUE) {
      cache_clear_all($_SERVER['HTTP_REFERER'], 'cache_page', $cache_page);
    }
  }
}

/**
 * template_preprocess_panels_pane().
 */
function cache_flush_preprocess_panels_pane(&$vars) {
  if (!empty($vars['pane']) && is_object($vars['pane']) && user_access('access contextual links')) {
    $pane = $vars['pane'];
    if (!empty($pane->cache) && is_array($pane->cache)) {
      $path = 'cache-flush/panels-ajax/' . $pane->cache['method'] . '/' . $pane->did . '/' . $pane->pid;
      $options = array(
        'attributes' => array(
          'class' => array('use-ajax'),
        ),
        'query' => array('path' => current_path()),
      );
      $vars['pane_prefix'] = l(t('Flush Cache'), $path, $options);
    }
  }
}
