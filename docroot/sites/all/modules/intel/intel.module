<?php
/**
 * @file
 * Main module file for LevelTen Intelligence
 */

require_once drupal_get_path('module', 'intel') . "/includes/intel.page_alter.inc";
require_once drupal_get_path('module', 'intel') . "/includes/intel.page_data.inc";
require_once drupal_get_path('module', 'intel') . "/includes/intel.ga.inc";

define('INTEL_L10IAPI_URL', 'api.getlevelten.com/v1/intel');
define('INTEL_L10IAPI_JS_VER', '0.1.3');
define('INTEL_L10IAPI_VER_MIN', '0.1.31');
define('INTEL_PAGE_INTENT_DEFAULT', 'i');
define('INTEL_TRACK_PAGE_UID_DEFAULT', 'a');
define('INTEL_TRACK_PAGE_TERMS_DEFAULT', 0);
define('INTEL_SYNC_VISITORDATA_FULLCONTACT_DEFAULT', 1);

/**
 *  Implements of hook_menu()
 */
function intel_menu() {
  $items = array();
  $reports = intel_reports();

  // admin config callbacks

  $items['admin/config/services/intel'] = array(
    'title' => 'LevelTen Intelligence',
    'description' => 'Analyze and optimize node content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intel_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'admin/intel.admin_config.inc',
  );
  $items['admin/config/services/intel/general'] = array(
    'title' => 'General',
    'description' => 'Analyze and optimize node content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intel_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
    'file' => 'admin/intel.admin_config.inc',
  );
  $w = 0;
  $items['admin/config/services/intel/scoring'] = array(
    'title' => 'Scoring',
    'description' => 'Analyze and optimize node content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intel_admin_scoring'),
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_LOCAL_TASK,
    'weight' => $w++,
    'file' => 'admin/intel.admin_config.inc',
  );
  $items['admin/config/services/intel/intel_event'] = array(
    'title' => 'Events',
    'description' => 'Intel events configuration.',
    'page callback' => 'intel_admin_intel_event_list_page',
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_LOCAL_TASK,
    'weight' => $w++,
    'file' => 'admin/intel.admin_config.inc',
  );
  $items['admin/config/services/intel/visitor_attribute'] = array(
    'title' => 'Visitor attributes',
    'description' => 'Visitor attribute configuration.',
    'page callback' => 'intel_admin_visitor_attribute_list_page',
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_LOCAL_TASK,
    'weight' => $w++,
    'file' => 'admin/intel.admin_config.inc',
  );
  $items['admin/config/services/intel/page_attribute'] = array(
    'title' => 'Page attributes',
    'description' => 'Page attribute configuration.',
    'page callback' => 'intel_admin_page_attribute_list_page',
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_LOCAL_TASK,
    'weight' => $w++,
    'file' => 'admin/intel.admin_config.inc',
  );
  $items['admin/config/services/intel/external_tracking'] = array(
    'title' => 'External tracking',
    'description' => 'Analyze and optimize node content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intel_admin_external_tracking'),
    'access callback' => '_intel_user_access_extended',
    'access arguments' => array('admin intel'),
    'type' => MENU_LOCAL_TASK,
    'weight' => $w++,
    'file' => 'admin/intel.admin_config.inc',
  );
  $items['admin/config/services/intel/modules'] = array(
    'title' => 'Modules',
    'description' => 'Add on module configuration',
    'page callback' => 'intel_admin_modules_page',
    //'page arguments' => array('intel_admin_external_tracking'),
    'access callback' => '_intel_user_access_extended',
    'access arguments' => array('admin intel'),
    'type' => MENU_LOCAL_TASK,
    'weight' => $w++,
    'file' => 'admin/intel.admin_config.inc',
  );
  $items['admin/config/services/intel/intel_event/add'] = array(
    'title' => 'Add event',
    'page callback' => 'intel_admin_intel_event_add_page',
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'admin/intel.admin_config.inc',
  );
  $items['admin/config/services/intel/intel_event/%intel_intel_event/edit'] = array(
    'title' => 'Edit event',
    'page callback' => 'intel_admin_intel_event_edit_page',
    'page arguments' => array(5),
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'admin/intel.admin_config.inc',
  );
  $items['admin/config/services/intel/intel_event/%intel_intel_event/delete'] = array(
    'title' => 'Delete event',
    'page callback' => 'intel_admin_intel_event_delete_page',
    'page arguments' => array(5),
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'admin/intel.admin_config.inc',
  );
  $items['admin/config/services/intel/visitor_attribute/add'] = array(
    'title' => 'Add attribute',
    'page callback' => 'intel_admin_visitor_attribute_add_page',
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'admin/intel.admin_config.inc',
  );
  $items['admin/config/services/intel/visitor_attribute/%intel_visitor_attribute/edit'] = array(
    'title' => 'Visitor attribute',
    'page callback' => 'intel_admin_visitor_attribute_edit_page',
    'page arguments' => array(5),
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'admin/intel.admin_config.inc',
  );
  $items['admin/config/services/intel/page_attribute/add'] = array(
    'title' => 'Add attribute',
    'page callback' => 'intel_admin_page_attribute_add_page',
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'admin/intel.admin_config.inc',
  );
  $items['admin/config/services/intel/page_attribute/%intel_page_attribute/edit'] = array(
    'title' => 'Page attribute',
    'page callback' => 'intel_admin_page_attribute_edit_page',
    'page arguments' => array(5),
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'admin/intel.admin_config.inc',
  );

  $items['admin/config/people/intel'] = array(
    'title' => 'Visitor settings',
    'description' => 'Configure settings for visitors managed by Intelligence.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intel_visitor_admin_settings_form'),
    'access arguments' => array('administer users'),
    'file' => 'admin/intel.admin_visitor.inc',
    'weight' => -10,
  );
  $items['admin/config/people/intel/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['node/%node/analytics'] = array(
    'title' => 'Analytics',
    'page callback' => 'intel_scorecard_report_page',
    'page arguments' => array('-', 'node', 1),
    'access callback' => '_intel_permission_access_content_report',
    'file' => 'reports/intel.report_scorecard.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['node/%node/analytics/scorecard'] = array(
    'title' => 'Scorecard',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  $w = 0;
  foreach ($reports AS $category => $defs) {
    $titles = array(
      'scorecard' => t('Scorecard'),
      'trafficsource' => t('Traffic sources'),
      'visitor' => t('Visitors'),
    );
    foreach ($defs AS $slug => $def) {
      if (($category == 'content') || ($category == 'team')) {
        continue;
      }
      $path_element = $category . '-' . $slug;
      $title = ' - ' . $def['title'];
      if ($slug == '-') {
        $path_element = $category;
        $title = !empty($titles[$category]) ? $titles[$category] : $category;
      }
      $access = !empty($def['access callback']) ? $def['access callback'] : 'user_access';
      $items['node/%node/analytics/' . $path_element] = array(
        'title' => $title,
        'description' => !empty($def['description']) ? $def['description'] : '',
        'page callback' => 'intel_' . $category . '_list_report_page',
        'page arguments' => array($slug, 'node', 1),
        'access callback' => $access,
        'access arguments' => array('view all intel reports'),
        //'type' => ($slug == '-') ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
        'type' => MENU_LOCAL_TASK,
        'weight' => $w++,
        'file' => 'reports/intel.report_' . $category . '_list.inc',
        'api_access' => !empty($def['api_access']) ? $def['api_access'] : '',
      );
    }
  }
  $items['visitor/%intel_visitor'] = array(
    //'title callback' => 'intel_visitor_title',
    //'title arguments' => array(1),
    'title' => 'Visitor',
    'page callback' => 'intel_visitor_view',
    'page arguments' => array(1),
    'access arguments' => array('view intel visitor data'),
  );
  $items['visitor/%intel_visitor/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );
  $items['visitor/add'] = array(
    'title' => 'Add an visitor',
    'page callback' => 'intel_visitor_add',
    'access arguments' => array('create intel_contact entities'),
    'file' => 'admin/intel.admin_visitor.inc',
  );
  $items['visitor/%intel_visitor/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intel_visitor_edit_form', 1),
    'access arguments' => array('edit any intel_visitor entity'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'admin/intel.admin_visitor.inc',
    'weight' => -19,
  );
  $items['visitor/%intel_visitor/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intel_visitor_delete_confirm_form', 1),
    'access arguments' => array('edit any intel_visitor entity'),
    'type' => MENU_CALLBACK,
    'file' => 'admin/intel.admin_visitor.inc',
  );

  $items['visitor/%intel_visitor/resync'] = array(
    'title' => 'Resync data',
    'page callback' => 'intel_sync_visitordata_page',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('view intel visitor data'),
    'type' => MENU_LOCAL_ACTION,
    //'file' => 'people/intel.people.inc',
  );
  $items['visitor/%intel_visitor/fullcontact/resync'] = array(
    'title' => 'Resync data',
    'page callback' => 'intel_sync_fullcontact_page',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('view intel visitor data'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/intel.visitor_sync.inc',
  );
  $items['visitor/%intel_visitor/clickstream'] = array(
    'title' => 'Clickstream',
    'description' => 'LevelTen insight.',
    'page callback' => 'intel_visitor_tab_clickstream',
    'page arguments' => array(1),
    'access callback' => '_intel_permission_access_content_report',
    'access arguments' => array('view intel visitor data'),
    'weight' => -9,
    'type' => MENU_LOCAL_TASK,
    'file' => 'admin/intel.admin_visitor.inc',
    'api_access' => 'pro',
  );
  $items['visitor/%intel_visitor/analytics'] = array(
    'title' => 'Analytics',
    'page callback' => 'intel_scorecard_report_page',
    'page arguments' => array($slug, 'visitor', 1),
    'access callback' => '_intel_permission_access_content_report',
    'access arguments' => array('view intel visitor data'),
    'file' => 'reports/intel.report_scorecard.inc',
    'weight' => -8,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'api_access' => 'pro',
  );
  $items['visitor/%intel_visitor/analytics/scorecard'] = array(
    'title' => 'Scorecard',
    'weight' => -8,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'api_access' => 'pro',
  );

  $w = 0;
  foreach ($reports AS $category => $defs) {
    $titles = array(
      'trafficsource' => t('Traffic sources'),
      'content' => t('Content'),
    );
    foreach ($defs AS $slug => $def) {
      if (($category == 'visitor') || ($category == 'team')) {
        continue;
      }
      $path_element = $category . '-' . $slug;
      $title = ' - ' . $def['title'];
      if ($slug == '-') {
        $path_element = $category;
        $title = !empty($titles[$category]) ? $titles[$category] : $category;
      }
      $access = !empty($def['access callback']) ? $def['access callback'] : 'user_access';
      $items['visitor/%intel_visitor/analytics/' . $path_element] = array(
        'title' => $title,
        'description' => !empty($def['description']) ? $def['description'] : '',
        'page callback' => 'intel_' . $category . '_list_report_page',
        'page arguments' => array($slug, 'visitor', 1),
        'access callback' => $access,
        'access arguments' => array('view intel visitor data'),
        //'type' => ($slug == '-') ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
        'type' => MENU_LOCAL_TASK,
        'weight' => $w++,
        'file' => 'reports/intel.report_' . $category . '_list.inc',
        'api_access' => !empty($def['api_access']) ? $def['api_access'] : '',
      );
    }
  }

  $items['submission/%'] = array(
    'title' => 'Submission',
    'description' => 'Information about visitors.',
    'page callback' => 'intel_submission_page',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('view intel visitor data'),
    //'type' => MENU_LOCAL_TASK,
    'file' => 'admin/intel.admin_submission.inc',
  );

  $items['admin/people/contacts'] = array(
    'title' => 'Contacts',
    'description' => 'Information about visitors.',
    'page callback' => 'intel_admin_people_contacts',
    //'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('view intel visitor data'),
    'position' => 'left',
    'weight' => -4,
    //'type' => MENU_NORMAL_ITEM,
    'file' => 'admin/intel.admin_visitor.inc',
  );
  $items['admin/people/visitors'] = array(
    'title' => 'Visitors',
    'description' => 'Information about visitors.',
    'page callback' => 'intel_admin_people_visitors',
    //'page arguments' => array(4),
    'access callback' => '_intel_user_access_extended',
    'access arguments' => array('view intel visitor data'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'admin/intel.admin_visitor.inc',
  );
  $items['admin/people/submissions'] = array(
    'title' => 'Form submissions',
    'description' => 'Information about visitors.',
    'page callback' => 'intel_admin_people_submissions',
    //'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('view intel visitor data'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'admin/intel.admin_submission.inc',
  );

  // admin reports callbacks

  $items['admin/reports/intel'] = array(
    'title' => 'LevelTen Intelligence',
    'description' => 'Analytics reports by LevelTen Intelligence.',
    'page callback' => 'intel_dashboard_report_page',
    'access callback' => 'user_access',
    'access arguments' => array('view all intel reports'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'reports/intel.report_dashboard.inc',
  );

  $w = 0;
  $items['admin/reports/intel/dashboard'] = array(
    'title' => 'Dashboard',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => $w++,
  );
  $items['admin/reports/intel/scorecard'] = array(
    'title' => 'Scorecard',
    'page callback' => 'intel_scorecard_report_page',
    'access callback' => 'user_access',
    'access arguments' => array('view all intel reports'),
    'type' => MENU_LOCAL_TASK,
    'weight' => $w++,
    'file' => 'reports/intel.report_scorecard.inc',
  );
  $items['admin/reports/intel/content'] = array(
    'title' => 'Content',
    'page callback' => 'intel_content_list_report_page',
    'access callback' => 'user_access',
    'access arguments' => array('view all intel reports'),
    'type' => MENU_LOCAL_TASK,
    'weight' => $w++,
    'file' => 'reports/intel.report_content_list.inc',
  );
  $items['admin/reports/intel/trafficsource'] = array(
    'title' => 'Traffic sources',
    'page callback' => 'intel_trafficsource_list_report_page',
    'access callback' => 'user_access',
    'access arguments' => array('view all intel reports'),
    'type' => MENU_LOCAL_TASK,
    'weight' => $w++,
    'file' => 'reports/intel.report_trafficsource_list.inc',
  );
  $items['admin/reports/intel/conversion'] = array(
    'title' => 'Conversions',
    'page callback' => 'intel_landingpage_list_report_page',
    'access callback' => '_intel_user_access_extended',
    'access arguments' => array('view all intel reports'),
    'type' => MENU_LOCAL_TASK,
    'weight' => $w++,
    'file' => 'reports/intel.report_landingpage_list.inc',
  );

  $items['admin/reports/intel/visitor'] = array(
    'title' => 'Visitors',
    'page callback' => 'intel_visitor_list_report_page',
    'access callback' => 'user_access',
    'access arguments' => array('view all intel reports'),
    'type' => MENU_LOCAL_TASK,
    'weight' => $w++,
    'file' => 'reports/intel.report_visitor_list.inc',
    'api_access' => 'pro',
  );
  $items['admin/reports/intel/team'] = array(
    'title' => 'Team',
    'page callback' => 'intel_author_list_report_page',
    'access callback' => 'user_access',
    'access arguments' => array('view all intel reports'),
    'type' => MENU_LOCAL_TASK,
    'weight' => $w++,
    'file' => 'reports/intel.report_author_list.inc',
  );

  $items['admin/reports/intel/ga_explorer'] = array(
    'title' => 'Google Analytics Explorer',
    'description' => 'Add a new cta block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intel_ga_explorer_report'),
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_CALLBACK,
    'weight' => $w++,
    'file' => 'reports/intel.ga_explorer_report.inc',
  );

  // add sub reports

  foreach ($reports AS $category => $defs) {
    $w = 0;
    foreach ($defs AS $slug => $def) {
      $access = !empty($def['access callback']) ? $def['access callback'] : 'user_access';
      $items['admin/reports/intel/' . $category . '/' . $slug . '/%intel_path_filter_type/%intel_path_filter_value'] = array(
        'title' => $def['title'],
        'description' => !empty($def['description']) ? $def['description'] : '',
        'page callback' => 'intel_' . $category . '_list_report_page',
        'page arguments' => array(4, 5, 6),
        'access callback' => $access,
        'access arguments' => array('view all intel reports'),
        'type' => ($slug == '-') ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK,
        'weight' => $w++,
        'file' => 'reports/intel.report_' . $category . '_list.inc',
        'api_access' => !empty($def['api_access']) ? $def['api_access'] : '',
      );
    }
  }

  $items['intel/api'] = array(
    'title' => '',
    'page callback' => 'intel_ajax',
    'access callback' => TRUE,
    //'access arguments' => array('view all intel reports'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/intel.ajax.inc',
  );

  // admin enhancements callbacks

  $items['intel/admin_content_alter_js'] = array(
    'title' => '',
    'page callback' => 'intel_admin_content_alter_js',
    'access callback' => 'user_access',
    'access arguments' => array('view all intel reports'),
    'type' => MENU_CALLBACK,
    'file' => 'reports/intel.admin_content_alter.inc',
  );
  $items['intel/admin_content_cta_alter_js'] = array(
    'title' => '',
    'page callback' => 'intel_admin_content_cta_alter_js',
    'access callback' => 'user_access',
    'access arguments' => array('view all intel reports'),
    'type' => MENU_CALLBACK,
    'file' => 'reports/intel.admin_content_cta_alter.inc',
  );

  // util calbacks

  $items['intel/util/visitordata'] = array(
    'title' => 'SEO Tools Util',
    'description' => 'Analyze and optimize node content.',
    'page callback' => 'intel_util_visitordata',
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_CALLBACK,
  );

  $items['intel/util/apivisitordata'] = array(
    'title' => 'SEO Tools Util',
    'description' => 'Analyze and optimize node content.',
    'page callback' => 'intel_util_apivisitordata',
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_CALLBACK,
  );

  $items['intel/util/sync_visitordata'] = array(
    'title' => 'Utility: sync visitor data',
    'description' => 'Analyze and optimize node content.',
    'page callback' => 'intel_util_sync_visitordata',
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_CALLBACK,
  );

  $items['intel/util'] = array(
    'title' => 'SEO Tools Util',
    'description' => 'Analyze and optimize node content.',
    'page callback' => 'intel_util',
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_CALLBACK,
  );

  $items['intel/temp'] = array(
    'title' => 'SEO Tools Util',
    'description' => 'Analyze and optimize node content.',
    'page callback' => 'intel_util_temp',
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function intel_path_filter_type_to_arg($arg) {
  if (arg(0) == 'node') {
    return 'page';
  }
  $a = arg(5);
  return isset($a) ? $a : '';
}

function intel_path_filter_value_to_arg($arg) {
  if (arg(0) == 'node') {
    $path = url('node/' . arg(1));
    return "landingPagePath:" . urlencode($path);
  }
  $a = arg(6);
  return isset($a) ? $a : '';
}

/**
 * Defines available intel reports
 */
function intel_reports() {
  $reports['content'] = array();
  $reports['content']['-'] = array(
    'key' => 'default.top.combined',
    'title' => t('Top pages'),
    'default' => 1,
  );
  $reports['content']['attraction'] = array(
    'key' => 'page_attribute:i-t.top.entrance',
    'title' => t('Attraction pages'),
    'access callback' => '_intel_user_access_extended',
  );
  $reports['content']['seo'] = array(
    'key' => 'seo.top.entrance',
    'title' => t('Search attractors'),
  );
  $reports['content']['social'] = array(
    'key' => 'social.top.pageview',
    'title' => t('Social attractors'),
  );
  $reports['content']['engagement'] = array(
    'key' => 'engagement.top.pageview',
    'title' => t('Engagement'),
  );
  $reports['trafficsource'] = array();
  $reports['trafficsource']['-'] = array(
    'key' => 'trafficcategory.top',
    'title' => t('Categories'),
    'default' => 1,
  );
  $reports['trafficsource']['medium'] = array(
    'key' => 'medium.top',
    'title' => t('Mediums'),
  );
  $reports['trafficsource']['source'] = array(
    'key' => 'source.top',
    'title' => t('Sources'),
  );
  $reports['trafficsource']['searchengine'] = array(
    'key' => 'searchEngine.top',
    'title' => t('Search engines'),
  );
  $reports['trafficsource']['searchkeyword'] = array(
    'key' => 'searchKeyword.top',
    'title' => t('Search keywords'),
  );
  $reports['trafficsource']['socialnetworks'] = array(
    'key' => 'socialNetwork.top',
    'title' => t('Social networks'),
  );
  $reports['trafficsource']['referrerlink'] = array(
    'key' => 'referralHostpath.top',
    'title' => t('Referral links'),
  );
  $reports['trafficsource']['campaign'] = array(
    'key' => 'campaign.top',
    'title' => t('Campaigns'),
  );
  $reports['team'] = array();
  $reports['team']['-'] = array(
    'key' => 'author.top',
    'title' => t('Authors'),
    'default' => 1,
  );
  $reports['visitor'] = array();
  $reports['visitor']['-'] = array(
    'key' => 'visitor.top',
    'title' => t('Visitors'),
    'default' => 1,
    'api_access' => 'pro',
  );
  $reports['visitor']['recentvisits'] = array(
    'key' => 'visit.recent',
    'title' => t('Recent visits'),
    'api_access' => 'pro',
  );

  drupal_alter('intel_reports', $reports);

  return $reports;
}

/**
 * Determines if the api access level is adequate to access the
 * data needed to build the current page/path (e.g. a report)
 */
function intel_api_access() {
  $access = &drupal_static(__FUNCTION__);
  if (isset($access)) {
    return $access;
  }
  $item = menu_get_item();
  $path = $item['path'];
  $items = intel_menu();
  $access = TRUE;
  if (!isset($items[$path])) {
    return $access;
  }
  $item = $items[$path];
  if (empty($item['api_access'])) {
    return $access;
  }
  $api_level = variable_get('intel_api_level', '');
  if (($item['api_access'] == 'pro') && ($api_level != 'pro')) {
    $access = FALSE;
  }
  return $access;
}

/**
 * Formats an error message if api access level is inadequate
 * @param $vars
 *   array of options: currently not used
 */
function intel_api_access_error($vars = array()) {
  $label = t('report');
  $msg = t('The API version assciated with this property does not have access to this @label.',
    array(
      '@label' => $label,
    )
  );
  $msg .= ' ' . l(t('Learn more about API versions'), intel_L10IHOME_URL, array('attributes' => array('target' => '_blank'))) . '.';
  drupal_set_message($msg, 'warning');
  return '';
}

/**
 * Implements hook_admin_paths()
 */
function intel_admin_paths() {
  $paths = array(
    'node/*/analytics' => 1,
    'node/*/analytics/*' => 1,
    'person/*' => 1,
    'visitor/*' => 1,
  );
  return $paths;
}


/**
 * Testing function
 */
function intel_util($arg0) {
  return '';
  $query = db_select('field_data_body', 'b')
    ->fields('b')
    ->condition('body_value', '%http://www.leveltendesign.com%', 'LIKE');
  $result = $query->execute();
  $i = 0;
  while($row = $result->fetchObject()) {
    $row->body_value = str_replace('http://www.leveltendesign.com', '', $row->body_value);
    $keys = array(
      'entity_type',
      'entity_id',
      'revision_id',
    );
    drupal_write_record('field_data_body', $row, $keys);
    dsm($row);
    if ($i++ > 0) {
      break;
    }
  }
  return '';
  $visitor = intel_visitor_load(1);
  dpm($visitor);
  return '';

  $visitor = intel_visitor_load_or_create('user');
  $visitor->setIdentifier('email', 'tomm@getlevelten.com');
  return '';
}

function _intel_temp_reset_db() {
  $query = db_select('intel_visitor', 'v')
    ->fields('v');
  $result = $query->execute();
  while($row = $result->fetchObject()) {
    intel_visitor_delete($row->vid);
  }
}

/**
 * Implements of hook_perm().
 */
function intel_permission() {
  $permissions = array();
  $permissions['admin intel'] = array(
    'title' => t('Administer LevelTen Insight'),
    'description' => t('Enables user to configure module settings.'),
  );
  $permissions['view all intel reports'] = array(
    'title' => t('View all LevelTen Insight reports'),
    'description' => t('Grants access to all reports.'),
  );
  $permissions['view own intel reports'] = array(
    'title' => t('View own LevelTen Insight reports'),
    'description' => t('Grants access to content reports on nodes that a user has authored.'),
  );
  $permissions['view intel visitor data'] = array(
    'title' => t('View visitor data'),
    'description' => t('Grants access to visitor information and reports.'),
  );
  return $permissions;
}

/**
 * Permission function to determine access to report access for owned/authored
 * nodes
 */
function _intel_permission_access_content_report() {
  global $user;
  if (user_access('view all intel reports')) {
    return TRUE;
  }
  if (user_access('view own intel reports')) {
    $node = menu_get_object();
    if (isset($node->uid) && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
  return FALSE;
}

function _intel_user_access_extended($permissions) {
  if (!variable_get('intel_extended_mode', 0)) {
    return FALSE;
  }
  if (!is_array($permissions)) {
    $permissions = array($permissions);
  }
  foreach ($permissions AS $perm) {
    if (user_access($perm)) {
      return TRUE;
    }
  }
  return FALSE;
}

function intel_get_library_path() {
  $lib_path = libraries_get_path('LevelTen');
  if (!$lib_path) {
    return FALSE;
  }
  return $lib_path . "/Intel";
}

function intel_include_library_file($file_name) {
  $included = &drupal_static(__FUNCTION__);
  if (!isset($included)) {
    $included = array();
  }
  if (!empty($included[$file_name])) {
    return TRUE;
  }
  if(!$lib_path = intel_get_library_path()) {
    return FALSE;
  }
  $req_path = $lib_path . "/" . $file_name;
  if (!$lib_path || (!file_exists($req_path))) {
    $msg = t('LevelTen Intelligence library file @file not found!',
      array(
        '@file' => $req_path,
      ));
    $msg .= ' ' . t('Download library from the !link and place it in the libraries directory following the pattern [your libraries dir]/LevelTen/Intel/intel.info.yml (typically: sites/all/libraries/LevelTen/Intel/intel.info.yml).',
        array(
          '!link' => l(t('API site'), 'http://api.getlevelten.com/site/?q=downloads', array('attributes' => array('target' => '_blank'))),
          '@file_name' => $file_name,
        )
      );
    drupal_set_message($msg, 'error');
  }
  else {
    require_once $req_path;
    $included[$file_name] = 1;
    return TRUE;
  }
  return FALSE;
}

function intel_verify_library(&$message = '') {
  if (!$lib_path = intel_get_library_path()) {
    $message = t('LevelTen Intelligence library not found!');
    $message .= ' ' . t('Download the latest library version from the !link and place it in the libraries directory following the pattern [your libraries dir]/LevelTen/Intel/intel.info.yml (typically: sites/all/libraries/LevelTen/Intel/intel.info.yml).',
        array(
          '!link' => l(t('API site'), 'http://api.getlevelten.com/site/?q=downloads', array('attributes' => array('target' => '_blank'))),
        )
      );
    return FALSE;
  }
  $file_path = $lib_path . "/intel.info.yml";
  if (!file_exists($file_path)) {
    $message = t('LevelTen Intelligence library intel.info.yml file not found!');
    $message .= ' ' . t('Download the latest library version from the !link and place it in the libraries directory following the pattern [your libraries dir]/LevelTen/Intel/intel.info.yml (typically: sites/all/libraries/LevelTen/Intel/intel.info.yml).',
        array(
          '!link' => l(t('API site'), 'http://api.getlevelten.com/site/?q=downloads', array('attributes' => array('target' => '_blank'))),
        )
      );
    return FALSE;
  }

  $file = file_get_contents($file_path);
  $info = explode(PHP_EOL, $file);
  $ver = '';
  foreach ($info AS $line) {
    $e = explode(':', $line);
    if ($e[0] == 'version') {
      $ver =  trim($e[1]);
      break;
    }
  }
  if ($ver < INTEL_L10IAPI_VER_MIN) {
    $message = t('LevelTen Intelligence library is out of date. Current installed version is @cur_ver. Minimum version is @min_ver',
      array(
        '@cur_ver' => ($ver) ? $ver : t('unknown'),
        '@min_ver' => INTEL_L10IAPI_VER_MIN,
      )
    );
    $message .= ' ' . t('Download the latest library version from the !link and place it in the libraries directory following the pattern [your libraries dir]/LevelTen/Intel/intel.info.yml',
        array(
          '!link' => l(t('API site'), 'http://api.getlevelten.com/site/?q=downloads', array('attributes' => array('target' => '_blank'))),
        )
      );
    return FALSE;
  }

  return $lib_path;
}

function intel_verify_apikey(&$message = '', &$tid = '', &$apikey = '', $property = array()) {
  if (!intel_verify_library($message)) {
    return FALSE;
  }
  if (!$tid = variable_get('intel_ga_account', '')) {
    $message = t('Tracking id is not set.');
    return FALSE;
  }
  if (!$apikey = variable_get('intel_apikey', '')) {
    $message = t('API key is not set');
    return FALSE;
  }
  intel_include_library_file('class.apiclient.php');
  $apiUrl = variable_get('intel_l10iapi_url', '');
  $api_params = variable_get('intel_l10iapi_custom_params', array());
  $apiClientProps = array(
    'apiUrl' => ($apiUrl ? $apiUrl : INTEL_L10IAPI_URL) . '/',
    'apiConnector' => variable_get('intel_l10iapi_connector', ''),
    'apiParams' => $api_params,
  );
  $apiclient = new \LevelTen\Intel\ApiClient($apiClientProps);
  $ret = '';
  $params = array(
    'tid' => $tid,
  );
  $data = array(
    'apikey' => $apikey,
  );
  try {
    $ret = $apiclient->getJSON('property/validate', $params, $data);
  }
  catch (Exception $e) {
    $message = $e->getMessage();
  }
  if (!empty($ret['property'])) {
    $property = (array) $ret['property'];
    $api_level = $property['level'];
    variable_set('intel_api_level', $api_level);
    return $api_level;
  }
  else {
    $message = t('API key invalid.') . ' ' . $message;
    return FALSE;
  }

}

/**
 * Implements hook_entity_info().
 *
 * This is the fundamental description of the entity.
 *
 * It provides a single entity with a single bundle and without revision
 * support.
 */
function intel_entity_info() {
  $info['intel_visitor'] = array(
    // A human readable label to identify our entity.
    'label' => t('Intel visitor'),
    'entity class' => 'IntelVisitor',
    'controller class' => 'IntelVisitorController',
    'base table' => 'intel_visitor',
    'label callback' => 'intel_visitor_label',
    'uri callback' => 'intel_visitor_uri',
    'fieldable' => TRUE,
    'module' => 'intel',
    'entity keys' => array(
      'id' => 'vid',
    ),

    // FALSE disables caching. Caching functionality is handled by Drupal core.
    'static cache' => TRUE, // TODO: research this setting

    'bundles' => array(
      'intel_visitor' => array(
        'label' => t('Visitor'),
        // 'admin' key is used by the Field UI to provide field and
        // display UI pages.
        'admin' => array(
          'path' => 'admin/config/people/intel',
          'access arguments' => array('administer intel_visitor entities'),
        ),
      ),
    ),

    // View modes allow entities to be displayed differently based on context.
    // As a demonstration we'll support "Tweaky", but we could have and support
    // multiple display modes.
    'view modes' => array(
      'full' => array(
        'label' => t('Full profile'),
        'custom settings' => FALSE,
      ),
      'token' => array(
        'label' => t('Tokens'),
        'custom settings' => FALSE,
      ),
    ),
  );

  // TODO uuid integration
  if (FALSE && module_exists('uuid')) {
    $info['intel_visitor']['uuid'] = TRUE;
    $info['intel_visitor']['entity keys']['uuid'] = 'uuid';
  }

  return $info;
}

function intel_entity_info_alter($info) {
  //dpm($info);//
}

function intel_get_ApiClientProps() {
  $apiUrl = variable_get('intel_l10iapi_url', '');
  $apiClientProps = array(
    'apiUrl' => ($apiUrl ? $apiUrl : INTEL_L10IAPI_URL) . '/',
    'apiConnector' => variable_get('intel_l10iapi_connector', ''),
    'apiParams' => variable_get('intel_l10iapi_custom_params', array()),
    'tid' => variable_get('intel_ga_account', ''),
    'apikey' => variable_get('intel_apikey', ''),
  );
  return $apiClientProps;
}

function intel_visitor_load($id = NULL, $reset = FALSE, $id_type = 'vid') {
  entity_get_controller('intel_visitor')->setIdType($id_type);
  $ids = (isset($id) ? array($id) : array());
  $persons = intel_visitor_load_multiple($ids, array(), $reset);
  return $persons ? reset($persons) : FALSE;
}

/**
 * Loads multiple basic entities.
 *
 * We only need to pass this request along to entity_load(), which
 * will in turn call the load() method of our entity controller class.
 */
function intel_visitor_load_multiple($ids = FALSE, $conditions = array(), $reset = FALSE, $id_type = 'vid') {
  entity_get_controller('intel_visitor')->setIdType($id_type);
  return entity_load('intel_visitor', $ids, $conditions, $reset);
}

function intel_visitor_load_by_identifiers($identifiers, $reset = FALSE) {
  foreach ($identifiers AS $type => $value) {
    $query = db_select('intel_visitor_identifier', 'i')
      ->fields('i', array('vid'))
      ->condition('type', $type)
      ->condition('value', $value);

    if($vid = $query->execute()->fetchField()) {
      break;
    }

  }
  if ($vid) {
    return intel_visitor_load($vid, $reset);
  }
  return FALSE;
}

/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function intel_visitor_create($values = array()) {
  if (!is_array($values)) {
    $values = array(
      'id' => $values,
    );
  }
  $intel = entity_get_controller('intel_visitor')->create($values);
  return $intel;
}

/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function intel_visitor_load_or_create($id = NULL, $reset = FALSE, $id_type = '') {
  // first try to load
  $intel = intel_visitor_load($id, $reset, $id_type);
  if ($intel) {
    return $intel;
  }

  $values = array(
    'id' => $id,
  );
  $intel = entity_get_controller('intel_visitor')->create($values);
  return $intel;
}

/**
 * We save the entity by calling the controller.
 */
function intel_visitor_save(&$entity) {
  return entity_get_controller('intel_visitor')->save($entity);
}


function intel_visitor_delete($vid) {
  return entity_get_controller('intel_visitor')->delete($vid);
}

/**
 * Delete multiple contact records.
 */
function intel_visitor_delete_multiple($vids = array()) {
  return entity_get_controller('intel_visitor')->delete_mutliple($vids);
}


// check if person is queried by pid or vtk
function intel_query_alter($query) {
  static $count;
  if ($query->hasTag('intel_visitor_load_multiple')) {
    $idType = entity_get_controller('intel_visitor')->getIdType();
    $conditions = &$query->conditions();
    if ($idType != 'vid') {
      $i = $query->innerJoin('intel_visitor_identifier', 'i', '%alias.vid = base.vid');
      $conditions[0]['field'] = "$i.value";
      // vtkid is the first 20 chars of vtk. To query, IN condistion must be changed to
      // REGEXP with | (or)s
      if ($idType == 'vtkid') {
        $conditions[0]['operator'] = "REGEXP";
        $conditions[0]['value'] = '^' . implode('|^', $conditions[0]['value']);
        $idType = 'vtk';
      }
      $query->condition("$i.type", $idType);
      $query->addField($i, "value", $idType);
    }
    // check for alternate vid in identifier table also
    else {
      $i = $query->leftJoin('intel_visitor_identifier', 'i', '%alias.vid = base.vid');
      //$conditions[0]['field'] = "$i.value";
      // TODO there may be a better way to do this, particularly directly
      // setting '#conjunction'
      $db_and = db_and();
      $db_and->condition("$i.value", $conditions[0]['value']);
      $db_and->condition("$i.type", 'vid');
      $query->condition($db_and);
      $conditions['#conjunction'] = 'OR';
    }

    $count++;
    if ($count == 1) {
      //dpm($query->getArguments()); dpm($query->conditions()); dpm($query->getFields()); dpm("$query");//
    }
  }
}


/**
 * Implements the uri callback.
 */
function intel_visitor_uri($entity) {
  return array(
    'path' => 'visitor/' . $entity->identifier(),
  );
}

function intel_visitor_label($entity) {
  return $entity->label();
}

function intel_visitor_view($entity, $view_mode = 'full', $langcode = NULL) {
  require_once drupal_get_path('module', 'intel') . "/intel.pages.inc";
  drupal_add_css(drupal_get_path('module', 'intel') . "/css/intel.visitor_profile.css");

  if (!empty($_GET['debug'])) {
    $entity->apiVisitorLoad();
    dpm($entity);//
  }

  if (is_string($entity->data)) {
    $entity->data = unserialize($entity->data);
  }

  if (is_string($entity->ext_data)) {
    $entity->ext_data = unserialize($entity->ext_data);
  }

  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }

  // Retrieve all profile fields and attach to $entity->content.
  intel_visitor_build_content($entity, $view_mode, $langcode);

  $build = $entity->content;

  // We don't need duplicate rendering info in entity->content.
  unset($entity->content);

  $build += array(
    '#theme' => 'intel_visitor_profile',
    '#entity' => $entity,
    '#view_mode' => $view_mode,
    '#language' => $langcode,
  );

  // Allow modules to modify the structured user.
  $type = 'intel_visitor';
  drupal_alter(array('intel_visitor_view', 'entity_view'), $build, $type);
  return $build;
}



/**
 * Implements hook_field_extra_fields().
 *
 * This exposes the "extra fields" (usually properties that can be configured
 * as if they were fields) of the entity as pseudo-fields
 * so that they get handled by the Entity and Field core functionality.
 * Node titles get treated in a similar manner.
 */
function intel_field_extra_fields() {
  $extra_fields = array();
  /*
  $form_elements['item_description'] = array(
    'label' => t('Item Description'),
    'description' => t('Item Description (an extra form field)'),
    'weight' => -5,
  );
  */
  $display_elements['bio'] = array(
    'label' => t('Bio'),
    'description' => t('Short bio'),
    'weight' => 0,
  );
  $display_elements['created'] = array(
    'label' => t('Creation date'),
    'description' => t('Creation date (an extra display field)'),
    'weight' => 0,
  );

  // Since we have only one bundle type, we'll just provide the extra_fields
  // for it here.
  //$extra_fields['intel_visitor']['intel_visitor']['form'] = $form_elements;
  //$extra_fields['intel_visitor']['intel_visitor']['display'] = $display_elements;

  return $extra_fields;
}


/**
 * Initializes properties of submission stdClass object
 */
function intel_submission_construct() {
  $submission = new stdClass();
  $submission->data = array();
  $submission->submitted = time();
  return $submission;
}

/**
 * Saves submission ojects
 *
 * @param stdClass $submission
 */
function intel_submission_save($submission) {
  foreach (module_implements('intel_submission_presave') AS $module) {
    $function = $module . '_intel_submission_presave';
    $function($submission);
  }
  $fields = array(
    'vid' => (!empty($submission->vid)) ? $submission->vid : 0,
    'submitted' => (!empty($submission->submitted)) ? $submission->submitted : time(),
    'type' => $submission->type,
    'fid' => $submission->fid,
    'fsid' => (!empty($submission->fsid)) ? $submission->fsid : '',
    'details_url' => (!empty($submission->details_url)) ? $submission->details_url : '',
    'response_page_host' => (!empty($submission->response_page_host)) ?  $submission->response_page_host : '',
    'response_page_path' => (!empty($submission->response_page_path)) ?  $submission->response_page_path : '',
    'response_page_id' => (!empty($submission->response_page_id)) ?  $submission->response_page_id : '',
    'form_page_host' => (!empty($submission->form_page_host)) ?  $submission->form_page_host : '',
    'form_page_path' => (!empty($submission->form_page_path)) ?  $submission->form_page_path : '',
    'form_page_id' => (!empty($submission->form_page_id)) ?  $submission->form_page_id : '',
    'cta_page_host' => (!empty($submission->cta_page_host)) ?  $submission->cta_page_host : '',
    'cta_page_path' => (!empty($submission->cta_page_path)) ?  $submission->cta_page_path : '',
    'cta_page_id' => (!empty($submission->cta_page_id)) ?  $submission->cta_page_id : '',
    'cta_id' => (!empty($submission->cta_id)) ?  $submission->cta_id : '',
    'data' => (!empty($submission->data)) ?  $submission->data : array(),
  );
  if (!is_string($fields['data'])) {
    $fields['data'] = serialize($fields['data']);
  }
  $query = db_insert('intel_submission')
    ->fields($fields);
  $sid = $query->execute();
  $submission->sid = $sid;

  module_invoke_all('intel_submission_insert', $submission);

  return $sid;
}

/**
 * Loads submission object from database
 *
 * @param $sid Primary session id
 *
 * @return Submission stdClass object
 */
function intel_submission_load($sid) {
  //$submission = &drupal_static(__FUNCTION__);

  $query = db_select('intel_submission', 's')
    ->fields('s')
    ->condition('sid', $sid);
  //$v = $query->leftJoin('intel_visitor', 'v', '%alias.vid = s.vid');
  $submission = $query->execute()->fetchObject();
  return $submission;
}

/**
 * Loads submission object using any table field
 *
 * @param $vars Array of key value pairs used to identify submission in table
 *
 * @return Submission stdClass object
 */
function intel_submission_load_by_vars($vars) {
  //$submission = &drupal_static(__FUNCTION__);

  $query = db_select('intel_submission', 's')
    ->fields('s');
  //$v = $query->leftJoin('intel_visitor', 'v', '%alias.vid = s.vid');
  foreach ($vars AS $key => $value) {
    $query->condition($key, $value);
  }
  $submission = $query->execute()->fetchObject();
  return $submission;
}

function intel_load_filtered_submission_result($filter = array(), $options = array(), $header = array(), $limit = 100, $offset = NULL) {
  $query = db_select('intel_submission', 's')
    ->extend('PagerDefault')
    ->limit($limit);
  $v = $query->leftJoin('intel_visitor', 'v', '%alias.vid = s.vid');
  $query->fields('s');
  $query->addField($v, 'name', 'name');
  //$query->addField($v, 'email', 'email');
  //$query->addField($v, 'vtkid', 'vtkid');
  $query->addField($v, 'data', 'visitor_data');
  $query->addField($v, 'ext_data', 'visitor_ext_data');

  if (!empty($header)) {
    $query->extend('TableSort')->orderByHeader($header);
  }

  //TODO get filters working
  if (!empty($filter['where'])) {
    //$sql .= " WHERE " . (($options['mode'] == 'site') ? 'k.priority >= 0 AND ' : '') . $filter['where'];
    //$count_sql .=  " WHERE " . (($options['mode'] == 'site') ? 'k.priority >= 0 AND ' : '') .  $filter['where'];
  }
  if (!empty($filter['conditions'])) {
    foreach ($filter['conditions'] AS $condition) {
      if (count($condition) == 3) {
        $query->condition($condition[0], $condition[1], $condition[2]);
      }
      else {
        $query->condition($condition[0], $condition[1]);
      }
    }
  }

  $result = $query->execute();

  return $result;
}

function intel_intel_scripts() {
  $scripts = array();
  foreach (module_implements('intel_intel_script') as $module) {
    $scripts = array_merge($scripts, module_invoke($module, 'intel_intel_script'));
  }

  drupal_alter('intel_intel_scripts', $scripts);

  return $scripts;
}

/**
 * Implements hook_intel_intel_script
 */
function intel_intel_intel_script() {
  /*
  $scripts['seo'] = array(
    'title' => t('SEO'),
    'description' => t('Tracks additional stats about search engine traffic.'),
    'path' => libraries_get_path('intel') . '/js/intel_seo.js',
    'site_enabled' => true,
  );
  */
  $scripts['addthis'] = array(
    'title' => t('AddThis'),
    'description' => t('Tracks AddThis shares and clickbacks.'),
    'path' => libraries_get_path('LevelTen') . '/Intel/js/l10intel_addthis.js',
    'enabled' => 0,
    'selectable' => 1,
  );
  $scripts['youtube'] = array(
    'title' => t('YouTube'),
    'description' => t('Tracks YouTube video play events.'),
    'path' => libraries_get_path('LevelTen') . '/Intel/js/l10intel_youtube.js',
    'enabled' => 0,
    'selectable' => 1,
  );

  return $scripts;
}


function intel_form_alter(&$form, &$form_state, $form_id) {
  if (substr($form_id, 0, 20) == 'webform_client_form_') {
    $form['referrer'] = array(
      '#type' => 'hidden',
      '#value' => $_GET['q'],
    );
  }
  $entity_edit_forms = array(
    'node_type_form' => 1,
    'taxonomy_form_vocabulary' => 1,
  );
  if (!empty($entity_edit_forms[$form_id])) {
    require_once drupal_get_path('module', 'intel') . "/admin/intel.admin_entity.inc";
    intel_admin_entity_type_form_alter($form, $form_state, $form_id);
  }
}


function intel_form_node_form_alter(&$form, &$form_state) {
  require_once drupal_get_path('module', 'intel') . "/admin/intel.admin_entity.inc";
  intel_admin_entity_edit_form_alter($form, $form_state);
}


function intel_entity_type_form_submit($form, &$form_state) {
  require_once drupal_get_path('module', 'intel') . "/admin/intel.admin_entity.inc";
  intel_admin_entity_type_form_submit($form, $form_state);
}
/**
 * Implements hook_form_FORM_ID_alter
 * Removes options input when creating new field
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function intel_form_field_ui_field_settings_form_alter(&$form, &$form_state) {
  $auto_fields = array(
    'field_visitor_attribute',
    'field_page_attribute',
    'field_intel_event',
    'field_track_submission',
  );
  $field_name = $form['field']['field_name']['#value'];
  if (in_array($field_name, $auto_fields)) {
    $form['field']['settings']['allowed_values_function']['#value'] = 'intel_get_' . $field_name . '_allowed_values';
    $form['field']['settings']['allowed_values']['#type'] = 'hidden';
    $form['field']['settings']['allowed_values_function_display']['#markup'] = str_replace('<em class="placeholder"></em>', '<em class="placeholder">intel_get_' . $field_name . '_allowed_values</em>', $form['field']['settings']['allowed_values_function_display']['#markup']);
    $form['field']['settings']['allowed_values_function_display']['#access'] = TRUE;
  }
}

/**
 * iImplements hook_form_field_ui_field_edit_form_alter
 * sets allowed values for track submission field to generate by a function
 * @param $form
 * @param $form_state
 */

function intel_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if (isset($form_state['field']['field_visitor_attribute'])) {
    $form['field']['settings']['allowed_values_function']['#value'] = 'intel_get_field_visitor_attribute_allowed_values';
  }
  if (isset($form_state['field']['field_page_attribute'])) {
    $form['field']['settings']['allowed_values_function']['#value'] = 'intel_get_field_page_attribute_allowed_values';
  }
  if (isset($form_state['field']['field_intel_event'])) {
    $form['field']['settings']['allowed_values_function']['#value'] = 'intel_get_field_intel_event_allowed_values';
  }
  if (isset($form_state['field']['field_track_submission'])) {
    $form['field']['settings']['allowed_values_function']['#value'] = 'intel_get_field_track_submission_allowed_values';
  }
  if (isset($form_state['field']['field_page_intent'])) {
    $form['field']['settings']['allowed_values_function']['#value'] = 'intel_get_field_page_intent_allowed_values';
  }
}

function intel_get_field_track_submission_allowed_values() {
  require_once './' . drupal_get_path('module', 'intel') . "/includes/intel.ga.inc";

  $values = array(
    'form_submission' => 'Form submission',
    'form_submission!' => 'Form submission!',
  );
  $submission_goals = variable_get('intel_submission_goals', intel_get_submission_goals_default());
  foreach ($submission_goals AS $goal) {
    $item = 'Goal: ' . $goal['title'];
    $values['goal_' . strtolower(drupal_clean_css_identifier($goal['title']))] = $item;
  }
  return $values;
}

function intel_get_field_visitor_attribute_allowed_values() {
  return intel_get_field_attribute_allowed_values('visitor');
}

function intel_get_field_page_attribute_allowed_values() {
  return intel_get_field_attribute_allowed_values('page');
}

function intel_get_field_attribute_allowed_values($mode = 'visitor', $existing_fields = array()) {
  require_once './' . drupal_get_path('module', 'intel') . "/includes/intel.ga.inc";

  $attribute_types = array();
  $values = array();
  $attributes = ($mode == 'page') ?  intel_get_page_attributes() : intel_get_visitor_attributes();
  foreach ($attributes AS $key => $va) {
    if (empty($va['selectable'])) {
      continue;
    }
    if (($va['type'] == 'flag') || ($va['type'] == 'scalar')) {
      $values[$key] = $va['title'];
    }
    else {
      if (isset($va['options'])) {
        foreach ($va['options'] AS $ok => $ot) {
          $values["$key.$ok"] = $va['title'] . ": " . $ot['title'];
        }
      }
    }
    $attribute_types[$key] = $va['type'];
  }
  $js = array(
    'intel' => array(
      $mode . '_attribute_types' => $attribute_types,
    ),
  );
  drupal_add_js($js, 'setting');
  return $values;
}

function intel_get_field_intel_event_allowed_values() {
  require_once drupal_get_path('module', 'intel') . "/includes/intel.ga.inc";

  $events = intel_get_intel_events(TRUE);
  $values = array();

  foreach ($events AS $key => $va) {
    if (empty($va['selectable'])) {
      continue;
    }
    $values[$key] = $va['title'];
  }
  return $values;
}

function intel_get_field_page_intent_allowed_values() {
  require_once './' . drupal_get_path('module', 'intel') . '/includes/intel.page_data.inc';

  $values = array();
  $page_intents = intel_get_page_intents('entity_edit');
  foreach ($page_intents AS $key => $value) {
    $values[$key] = $value['title'];
  }
  return $values;
}

function intel_add_visitor_sync_request($vtk, $delay = 0) {
  $items = variable_get('intel_sync_visitor_requests', array());
  if (!isset($items[$vtk])) {
    $item = new stdClass;
    $item->created = time();
    $item->run_after = time() + $delay;
    $item->vtk = $vtk;
    $item->attempts = 0;
    $items[$vtk] = $item;
    variable_set('intel_sync_visitor_requests', $items);
  }
}

function intel_sync_visitordata_page($person_intel) {
  require_once drupal_get_path('module', 'intel') . "/includes/intel.visitor_sync.inc";
  $statuses = intel_sync_visitordata($person_intel);
  $output = '';
  foreach ($statuses AS $k => $v) {
    $output .= "$k: $v<br>\n";
  }
  if (!empty($_GET['destination'])) {
    drupal_goto($_GET['destination']);
    exit;
  }
  return $output;
}

function intel_cron() {
  require_once drupal_get_path('module', 'intel') . "/includes/intel.visitor_sync.inc";
  intel_queue_sync_visitor_requests();
}

function intel_cron_queue_info() {
  $queues['intel_sync_visitor_requests'] = array(
    'worker callback' => 'intel_sync_visitor_request_worker',
    'time' => 60,
  );
  return $queues;
}

function intel_sync_visitor_request_worker($item) {
  require_once drupal_get_path('module', 'intel') . "/includes/intel.visitor_sync.inc";
  static $requeues;
  if (!isset($requeues)) {
    $requeues = variable_get('intel_sync_visitor_requests', array());
  }
  // if run_after has not occured, requeue the item
  if ($item->run_after > time()) {
    $requeues[$item->vtk] = $item;
    variable_set('intel_sync_visitor_requests', $requeues);
    return;
  }

  $visitor = intel_visitor_load($item->vtk, TRUE, 'vtk');
  $statuses = intel_sync_visitordata($visitor, $item);
  $success = 1;
  // check status of each hook
  foreach ($statuses AS $module => $flag) {
    if (!$flag) {
      $success = 0;
      break;
    }
  }
  if (!$success) {
    if ($item->attempts >= ((!empty($_GET['debug'])) ? 10 : 4)) {
      //watchdog('l10i sync visitor major fail', t('Data could not be synced after 5 attempts. Canceling sync.') . "<br>\n<br>\n" . print_r($item, 1));
      return;
    }
    $item->attempts++;
    $item->run_after = time() + ((!empty($_GET['debug'])) ? 30 : 300);  // delay for at least 5 minutes
    $requeues[$item->vtk] = $item;
    variable_set('intel_sync_visitor_requests', $requeues);
  }
}

function intel_get_visitor_property_info_all() {
  $props = &drupal_static(__FUNCTION__);

  // Grab from cache or build the array.
  if (!isset($props)) {
    if ($cache = cache_get('intel_visitor_property_info', 'cache') && 0) {
      $props = $cache->data;
    }
    else {
      $props = array();

      // Select the module-defined sets.
      foreach (module_implements('intel_visitor_property_info') as $module) {
        $module_props = module_invoke($module, 'intel_visitor_property_info');
        foreach ($module_props as $prop_name => $prop) {
          $props[$prop_name] = $prop;
          //$set['name'] = $set_name;
          //$set['module'] = $module;
          //$set['storage'] = WIDGETS_STORAGE_DEFAULT;
        }
      }

      drupal_alter('intel_visitor_property_info', $props);
      cache_set('intel_visitor_property_info', $props);
    }
  }

  return $props;
}

function intel_get_visitor_property_construct($name) {
  $prop_info = intel_get_visitor_property_info($name);
  if (isset($prop_info['variables'])) {
    return $prop_info['variables'];
  }
  return FALSE;
}

function intel_get_visitor_property_info($name) {
  $props = intel_get_visitor_property_info_all();
  if (!empty($props[$name])) {
    return $props[$name];
  }
  else {
    return FALSE;
  }
}

function intel_intel_visitor_property_info() {
  $prop = &drupal_static(__FUNCTION__);

  // Grab from cache or build the array.
  if (isset($prop)) {
    return $prop;
  }
  require_once drupal_get_path('module', 'intel') . "/includes/intel.visitor_properties.inc";

  $prop = _intel_intel_visitor_property_info();

  return $prop;
}

function intel_intel_visitor_property_set($prop_name, &$prop, $person) {
  require_once drupal_get_path('module', 'intel') . "/includes/intel.visitor_properties.inc";
  $func = 'intel_visitor_property_set_' . str_replace('.', '_', $prop_name);
  func($prop, $visitor);
}

/**
 * Used to catch Error at offset issues with unserializing
 * TODO This does not work. Try looking at solution at: http://stackoverflow.com/questions/5373780/how-to-catch-this-error-notice-undefined-offset-0
 * @param $string
 */
function intel_unserialize($string) {
  try {
    $ret = unserialize($string);
  }
  catch (Exception $e) {
    throw new Exception( 'Something really gone wrong', 0, $e);
    //$string = preg_replace('!s:(\d+):"(.*?)";!se', "'s:'.strlen('$2').':\"$2\";'", $string );
    $ret = unserialize($string);
  }
  return $ret;
}

function intel_debug_mode() {
  return variable_get('intel_debug_mode', 0);
}

/**
 * Implements hook_theme().
 */
function intel_theme() {
  $themes = array();
  $themes['intel_visitor_profile'] = array(
    'render element' => 'elements',
    'template' => 'intel-visitor-profile',
    'file' => 'intel.pages.inc',
  );
  $themes['intel_visitor_picture'] = array(
    'variables' => array('entity' => NULL),
    'template' => 'intel-visitor-picture',
    'file' => 'intel.pages.inc',
  );
  $themes['intel_visitor_profile_item'] = array(
    'render element' => 'element',
    'template' => 'intel-visitor-profile-item',
    'file' => 'intel.pages.inc',
  );
  $themes['intel_visitor_profile_block'] = array(
    'render element' => 'element',
    'variables' => array(
      'title' => NULL,
      'markup' => NULL,
    ),
    'template' => 'intel-visitor-profile-block',
    'file' => 'intel.pages.inc',
  );
  $themes['intel_visitor_social_links'] = array(
    'variables' => array('entity' => NULL),
    'template' => 'intel-visitor-social-links',
    'file' => 'intel.pages.inc',
  );
  $themes['intel_visitor_social_link'] = array(
    'variables' => array(
      'link' => NULL,
      'class' => NULL,
    ),
    'template' => 'intel-visitor-social-link',
    'file' => 'intel.pages.inc',
  );
  $themes['intel_visitor_bio'] = array(
    'variables' => array('entity' => NULL),
    'template' => 'intel-visitor-bio',
    'file' => 'intel.pages.inc',
  );
  $themes['intel_visitor_summary_item'] = array(
    'variables' => array('entity' => NULL),
    'template' => 'intel-visitor-summary-item',
    'file' => 'intel.pages.inc',
  );
  $themes['intel_visitor_location'] = array(
    'variables' => array('entity' => NULL),
    'template' => 'intel-visitor-profile-block',
    'file' => 'intel.pages.inc',
  );
  $themes['intel_map'] = array(
    'variables' => array(
      'locations' => array(),
    ),
    'template' => 'intel-map',
    'file' => 'intel.pages.inc',
  );
  $themes['intel_visitor_browser_environment'] = array(
    'variables' => array('entity' => NULL),
    'template' => 'intel-visitor-profile-block',
    'file' => 'intel.pages.inc',
  );
  $themes['intel_visitor_visits_table'] = array(
    'variables' => array('entity' => NULL),
    'template' => 'intel-visitor-profile-block',
    'file' => 'intel.pages.inc',
  );

  return $themes;
}