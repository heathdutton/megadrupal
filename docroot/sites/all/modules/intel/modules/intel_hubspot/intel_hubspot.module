<?php

function intel_hubspot_menu() {
  $items = array();
  
  $items['admin/config/services/intel/modules/hubspot'] = array(
    'title' => 'HubSpot',
    'description' => 'Add on module configuration',
    'page callback' => 'intel_hubspot_admin_config_page',
    //'page callback' => 'drupal_get_form',
    //'page arguments' => array('intel_hubspot_admin_config'),
    'access callback' => 'user_access',
    'access arguments' => array('admin intel'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'intel_hubspot.admin.inc',
  );  
  
  $items['visitor/%intel_visitor/hubspot'] = array(
    'title' => 'HubSpot',
    'description' => 'HubSpot contact information.',
    'page callback' => 'intel_hubspot_contact',
    'page arguments' => array(1),
    //'access callback' => 'user_access',
    //'access arguments' => array('view all intel reports'),
    'access callback' => 'intel_hubspot_show_visitor_menu_tab',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    //'file' => 'people/intel.people.inc',  
  );
  /*
  $items['visitor/%intel_visitor/hubspot/view'] = array(
    'title' => 'View',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    //'file' => 'people/intel.people.inc',  
  );
  */
  $items['visitor/%intel_visitor/hubspot/launch'] = array(
    'title' => 'View in HubSpot',
    'description' => 'HubSpot contact information.',
    'page callback' => 'intel_hubspot_contact',
    'page arguments' => array(1, 'launch'),
    'access callback' => 'intel_hubspot_show_visitor_menu_tab',
    'access arguments' => array(1),
    'weight' => 0,
    'type' => MENU_LOCAL_ACTION,
    //'file' => 'people/intel.people.inc',  
  );
  $items['visitor/%intel_visitor/hubspot/resync'] = array(
    'title' => 'Resync data',
    'description' => 'HubSpot contact information.',
    'page callback' => 'intel_hubspot_contact',
    'page arguments' => array(1, 'resync'),
    'access callback' => 'intel_hubspot_show_visitor_menu_tab',
    'access arguments' => array(1),
    'weight' => 0,
    'type' => MENU_LOCAL_ACTION,
    //'file' => 'people/intel.people.inc',  
  );
  $items['visitor/%intel_visitor/hubspot/iframe'] = array(
    'title' => 'Resync data',
    'description' => 'HubSpot contact information.',
    'page callback' => 'intel_hubspot_contact_page_iframe',
    'page arguments' => array(1),
    'access callback' => 'intel_hubspot_show_visitor_menu_tab',
    'access arguments' => array(1),
    'weight' => 0,
    'type' => MENU_CALLBACK,
    //'file' => 'people/intel.people.inc',  
  );  
  
  $items['admin/reports/hubspot'] = array(
    'title' => 'HubSpot',
    'description' => 'View the dashboard for SEO Tools.',
    'page callback' => 'intel_admin_reports_hubspot_dashboard',
    'access callback' => 'user_access',
    'access arguments' => array('view all intel reports'),
    'type' => MENU_NORMAL_ITEM,
    //'file' => 'intel.report.inc',
  );

  $items['intel_hubspot/util'] = array(
    'title' => 'Util',
    'description' => 'Analyze and optimize node content.',
    'page callback' => 'intel_hubspot_util',
    'access callback' => 'user_access',
    'access arguments' => array('admin seo tools'),
    'type' => MENU_CALLBACK,
  );
  $items['intel_hubspot/util/fetch_contact'] = array(
    'title' => 'Util',
    'description' => 'Analyze and optimize node content.',
    'page callback' => 'intel_hubspot_util_fetch_contact',
    'access callback' => 'user_access',
    'access arguments' => array('admin seo tools'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

function intel_hubspot_show_visitor_menu_tab($visitor) {
  //return user_access('view all intel reports');
  return user_access('view all intel reports') && intel_hubspot_visitor_is_linked($visitor);
}

function intel_hubspot_visitor_is_linked($visitor) {
  $hs_data = $visitor->getVar('ext', 'hubspot');
  $linked = !empty($hs_data['profile_url']) ? 1 : 0;
  if (!empty($hs_data['utk']) || !empty($hs_data['lastsubmission_utk'])) {
    $linked = 1;
  }
  return $linked;
}


function intel_hubspot_util() {
  return '';
}

function intel_hubspot_util_fetch_contact($hsutk) {
  require_once libraries_get_path('hubspot') . "/haPiHP/class.contacts.php"; 
  require_once libraries_get_path('hubspot') . "/haPiHP/class.exception.php";   

  $portal_id = variable_get('hubspot_portalid', '');

  $HAPIKey = variable_get('intel_hubspot_api_key', '');
  $contacts = new HubSpot_Contacts($HAPIKey);  
  
  $contact = $contacts->get_contact_by_usertoken($hsutk);
  dpm($contact);//
  return '';
}

/**
 * Implements hook_intel_intel_script
 */
function intel_hubspot_intel_intel_script() {
  $scripts['hubspot'] = array(
    'title' => t('HubSpot'),
    'description' => t('Use on pages with HubSpot tracking or HubSpot forms.'),
    'path' => libraries_get_path('LevelTen') . '/Intel/js/l10intel_hubspot.js',
    'enabled' => 1,
  );
  return $scripts;
}

/**
 * Implements hook_intel_form_submission_check()
 */
function intel_hubspot_intel_form_submission_check(&$submission, &$track, &$link_query) {
  if (empty($_GET['submissionGuid'])) {
    return;
  }
  $a = explode('-', $_GET['submissionGuid']);
  // check query param format
  if (!((count($a) == 5) && (strlen($a[1]) == 4))) {
    return; 
  }
  $link_query = array('submissionGuid' => $_GET['submissionGuid']);
  $submission->type = 'hubspot';
  $submission->fid = '';
  $submission->fsid = $_GET['submissionGuid'];
  $track['form_title'] = t('HubSpot form');
  $track['submission_path'] = "";
}

/**
 * Implements hook_intel_form_submission_data()
 */
function intel_hubspot_intel_form_submission_data(&$visitor, &$submission, &$track, $context) {
  // if hubspot form submission, set fid from submit_context
  if ($submission->type == 'hubspot') {
    // set fid from submit_context if available
    if (isset($context['submit_context']) && !empty($context['submit_context']['fid'])) {
      $submission->fid = $context['submit_context']['fid'];
    }
    // if hubspot form submitted and not contact created yet, set contact created time
    if (($submit_context['type'] == 'hubspot') && (empty($visitor->contact_created))) {
      $visitor->setContactCreated(REQUEST_TIME);
    }
  } 
  // if HubSpot user token available save it to visitor record
  $hsutk = intel_hubspot_extract_user_token();
  if ($hsutk) {
    $visitor->setVar('ext', 'hubspot', 'utk', $hsutk);
  }
  // if HubSpot utk available in submit context, save it to visitor
  if (isset($context['submit_context']) && !empty($context['submit_context']['hubspotutk'])) {
    $visitor->setVar('ext', 'hubspot', 'lastsubmission_utk', $context['submit_context']['hubspotutk']);
  }
}

/**
 * Implements hook_intel_visitor_presave()
 */
function intel_hubspot_intel_visitor_presave(&$visitor) {
  $hsutk = intel_hubspot_extract_user_token();
  if ($hsutk) {
    $visitor->setVar('ext', 'hubspot', 'utk', $hsutk);
  }
}

function intel_hubspot_extract_user_token() {
//dpm($_COOKIE);
  $hsutks = '';
  if (!empty($_COOKIE['hubspotutk'])) {
    return $_COOKIE['hubspotutk'];
  }
  if (!empty($_COOKIE['__hstc'])) {
    $a = explode('.', $_COOKIE['__hstc']);
    return $a[1];
  }
  return FALSE;
}

function intel_hubspot_extract_user_tokens() {
  $hsutks = array(
    'domain' => intel_hubspot_extract_user_token(),
  );
  if (!empty($_COOKIE['l10i_ehsutk'])) {
    $hsutks['external'] = $_COOKIE['l10i_ehsutk'];
  }  
  return $hsutks;  
}

function intel_hubspot_get_form_submission_path($vid, $submitted) {
  return "intel/submission/$vid/$submitted";
}

function intel_hubspot_include_library_file($file_name) {
  $included = &drupal_static(__FUNCTION__);
  if (!isset($included)) {
    $included = array();
  }
  if (!empty($included[$file_name])) {
    return TRUE;
  }
  $lib_path = libraries_get_path('hubspot');
  $req_path = $lib_path . "/haPiHP/" . $file_name;
  if (!$lib_path || (!file_exists($req_path))) {
    $msg = t('HubSpot library not found!');
    $msg .= ' ' . t('Download library from !link and place it in the libraries directory following the pattern [your libraries dir]/hubspot/haPiHP/@file_name',
      array(
        '!link' => l(t('API site'), 'https://github.com/HubSpot/haPiHP', array('attributes' => array('target' => '_blank'))),
        '@file_name' => $file_name,
      )
    );
    drupal_set_message($msg, 'error');
  } 
  else {
    require_once $req_path;
    $included[$file_name] = 1;
    return TRUE;
  }
  return FALSE;
}

function intel_hubspot_api_get_all_properties() {
  $properties = &drupal_static(__FUNCTION__);
  if (isset($properties)) {
    return $properties;
  }
  if (!$HAPIKey = variable_get('intel_hubspot_api_key', '')) {
    return TRUE;
  }
  require_once libraries_get_path('hubspot') . "/haPiHP/class.exception.php"; 
  require_once libraries_get_path('hubspot') . "/haPiHP/class.properties.php"; 
  $properties_api = new HubSpot_Properties($HAPIKey);
  $properties = $properties_api->get_all_properties();
  return $properties;
}

function intel_hubspot_system_properties() {
  return array(
    'L10I_VURL',
    'L10I_VSYNC',
    'L10I_VID',
    'L10I_VTK',
    'L10I_SCORE',
    'EMAIL',
    'FNAME',
    'LNAME',  
  );
}

function intel_hubspot_intel_sync_visitordata(&$visitor) {
  if (!$HAPIKey = variable_get('intel_hubspot_api_key', '')) {
    return TRUE;
  }
  $ext_data = $visitor->ext_data;
  $visitor_data = $visitor->data;

  if (empty($ext_data['hubspot']) || (empty($ext_data['hubspot']['utk']) && empty($ext_data['hubspot']['lastsubmission_utk']))) {
    return TRUE;
  }
  require_once libraries_get_path('hubspot') . "/haPiHP/class.contacts.php"; 
  require_once libraries_get_path('hubspot') . "/haPiHP/class.exception.php"; 
  require_once drupal_get_path('module', 'intel') . "/includes/intel.visitor_sync.inc";
  
  $hsdata = $ext_data['hubspot'];
  $utk = (!empty($hsdata['utk'])) ? $hsdata['utk'] : '';
  $last_utk = (!empty($hsdata['lastsubmission_utk'])) ? $hsdata['lastsubmission_utk'] : '';
  $portal_id = variable_get('hubspot_portalid', '');

  $contacts_api = new HubSpot_Contacts($HAPIKey);
  $contact = new stdClass;
  if ($last_utk) {
    $contact = $contacts_api->get_contact_by_usertoken($last_utk);
  }
  if (empty($contact->properties->email) && ($utk != $last_utk)) {
    $contact = $contacts_api->get_contact_by_usertoken($utk);
  }
  if (empty($contact->properties->email) && !empty($visitor->email)) {
    $contact = $contacts_api->get_contact_by_email($visitor->email);
  }
  if (!empty($_GET['debug'])) {
    dpm('visitor (hubspot 332)'); dpm($visitor);//
    dpm('hubspot contact)');dpm($contact);//
  }
  if (empty($contact->properties->email)) {
    // if we don't have full contact info, at least add the profile-url
    if (!empty($contact->{'profile-url'})) {
      $visitor->setVar('ext', 'hubspot', 'profile_url', $contact->{'profile-url'});
    }
    return FALSE;
  }
  $visitor->setIdentifier('email', $contact->properties->email->value);

  $prop_options = array(
    'source' => 'hubspot',
  );
  $prop = $visitor->getProp('name');
  $prop['first'] = $contact->properties->firstname->value;
  $prop['last'] = $contact->properties->lastname->value;
  $name = $contact->properties->firstname->value . " " . $contact->properties->lastname->value;
  $visitor->setName($name);
  $visitor->setProp('name', $prop, $prop_options);
  
  if (empty($visitor_data['image']['url']) || (empty($visitor_data['image']['_source']) && ($visitor_data['image']['_source'] == 'hubspot'))) {
    if (!empty($contact->properties->photo->value)) {
      $visitor->setProp('image', array('url' => $contact->properties->photo->value), $prop_options);
    }
    else if (!empty($contact->properties->twitterprofilephoto->value)) {
      $visitor->setProp('image', array('url' => $contact->properties->twitterprofilephoto->value), $prop_options);
    }
  }
  if (!empty($contact->properties->twitterhandle->value)) {
    $prop = array(
      'username' => $contact->properties->twitterhandle->value,
    );
    $visitor->setProp('twitter', $prop, $prop_options);
  }
  $visitor->setVar('ext', 'hubspot', 'profile_url', $contact->{'profile-url'});
  $visitor->setVar('ext', 'hubspot', 'vid', $contact->{'vid'});
  $visitor->merge();
//dpm($visitor->getProperties());
  
  // sync data back to HubSpot
  require_once libraries_get_path('hubspot') . "/haPiHP/class.properties.php"; 
  $properties_api = new HubSpot_Properties($HAPIKey);
  $properties = $properties_api->get_all_properties();
  $ps = array();
  foreach ($properties AS $i => $p) {
    $propertynames[$p->name] = $p->label;
  }
  ksort($propertynames);
//dpm($propertynames);
//dpm($properties);
//dpm($contact);
//dpm($visitor);
  $updates = array();
  $visitor_data = $visitor->data;
  if (empty($contact->properties->country->value) && !empty($visitor_data['location']['country'])) {
    $updates['country'] = $visitor_data['location']['country'];
  }
  if (empty($contact->properties->state->value) && !empty($visitor_data['location']['region'])) {
    $updates['state'] = $visitor_data['location']['region'];
  }
  if (empty($contact->properties->city->value) && !empty($visitor_data['location']['city'])) {
    $updates['city'] = $visitor_data['location']['city'];
  }
  
  // hook to enable other modules to process data
  $vars = array(
    'api_key' => $HAPIKey,
    'hs_contact_api' => $contacts_api,
    'hs_contact' => $contact,
    'hs_properties_api' => $properties_api,
    'hs_properties' => $properties,
    'hs_property_names' => $propertynames,
  );  
  foreach (module_implements('intel_hubspot_sync_visitordata') AS $module) {
    $function = $module . '_intel_hubspot_sync_visitordata';
    $statuses[$module] = $function($visitor, $updates, $vars);
  } 
  
  if (count($updates)) {
    //$updatedContact = $contacts->update_contact($contact->vid, $updates);
      $endpoint = '/contacts/v1/contact/vid/' . $contact->vid . '/profile';
      $properties = array();
      foreach ($updates as $key => $value) {
        array_push($properties, array("property"=>$key,"value"=>$value));
      }
      $properties = json_encode(array("properties"=>$properties));
      $options = array(
        'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
        'method' => 'POST',
        'data' => $properties,
      );
//dpm($options);
      $ret = drupal_http_request('https://api.hubapi.com' . $endpoint . '?hapikey=' . $HAPIKey, $options);
//dpm($ret);
  }  
  
//dpm($updates);
//dpm($updatedContact);
  return TRUE;
}

function intel_hubspot_get_form_name($form_id) {
//dpm($form_id);
  $a = explode('_', $form_id); // correct for error in HS form ids where extra data appended after _
  $form_info = intel_hubspot_get_form_info($a[0]);
//dpm($a);
  if ($form_info && !empty($form_info->name)) {
    return $form_info->name;
  }
  else {
    return FALSE;
  }
}

function intel_hubspot_get_form_info($form_id) {
  $info = &drupal_static(__FUNCTION__);
  if (isset($info[$form_id])) {
    $info[$form_id] = array();
  }
  $info[$form_id] = 1;
  
  $forms_info = variable_get('intel_hubspot_forms_info', array());
  
  if (!isset($forms_info[$form_id])) {
    $forms_info = intel_hubspot_api_get_forms();
    variable_set('intel_hubspot_forms_info', $forms_info);
  }
  if (isset($forms_info[$form_id])) {
    $info[$form_id] = $forms_info[$form_id];
  }
  else {
    $info[$form_id] = FALSE;
  }
  return $info[$form_id];
}

function intel_hubspot_api_get_forms() {
  $forms_info = &drupal_static(__FUNCTION__);
  if ($forms_info) {
    return $forms_info;
  }
  if (!$HAPIKey = variable_get('intel_hubspot_api_key', '')) {
    return FALSE;
  }
  require_once libraries_get_path('hubspot') . "/haPiHP/class.forms.php"; 
  require_once libraries_get_path('hubspot') . "/haPiHP/class.exception.php"; 
  
  $forms_api = new HubSpot_Forms($HAPIKey);
  $forms = $forms_api->get_forms();
 
  $forms_info = array();
  foreach ($forms AS $i => $form) {
    $forms_info[$form->guid] = $form;
  }
  return $forms_info;
}

function intel_hubspot_contact($visitor, $action = '') {
  $visitor_name = (!empty($visitor->name)) ? $visitor->name : '[No Name]';
  //drupal_set_title(t('HubSpot contact: @title', array('@type' => $visitor_name, '@title' => $visitor_name)), PASS_THROUGH);
  drupal_set_title(t('HubSpot contact'));
  
  $output = '';  
  
//dpm($action);
  if (!empty($_GET['debug'])) {
    dpm($visitor->getProperties());//
  }
  $ext_data = $visitor->ext_data;
  if (($action == 'resync')
      && (!empty($ext_data['hubspot']['utk']) || !empty($ext_data['hubspot']['lastsubmission_utk']))
    ) {
    intel_hubspot_intel_sync_visitordata($visitor);
    $visitor->load();
    $ext_data = $visitor->ext_data;
    drupal_set_message(t('HubSpot data resynced.'));
    drupal_goto('visitor/' . $visitor->vtk . '/hubspot');
  }
  elseif (empty($ext_data['hubspot']['profile_url']) 
      && (!empty($ext_data['hubspot']['utk']) || !empty($ext_data['hubspot']['lastsubmission_utk']))
    ) {
    intel_hubspot_intel_sync_visitordata($visitor);
    $visitor->load();
    $ext_data = $visitor->ext_data;
    drupal_set_message(t('HubSpot data resynced.'));
  }
  
  if (empty($ext_data['hubspot']['profile_url'])) {
    drupal_set_message('This contact has not been linked to a HubSpot contact.', 'error');
    $output = 'Unable to fetch contact from HubSpot.';
    return $output;
  }
  
  if ($action == 'launch') {
    //$script = "window.open('{$visitor->ext_data['hubspot']['profile_url']}', 'hubspot');";
    //drupal_add_js($script, array('type' => 'inline', 'scope' => 'header'));
    drupal_goto($ext_data['hubspot']['profile_url']);
  }

  $vars = array(
    'src' => $ext_data['hubspot']['profile_url'],
    'id' => 'hubspot-page',
  );
  //$output .= theme_intel_iframe($vars);
  
  //return $output;
  //drupal_add_js($script, array('type' => 'inline', 'scope' => 'header'));
  

$script = <<<EOD
jQuery('#hubspot-iframe').load(function() {
  alert('hi');
  this.style.height = this.contentWindow.document.body.offsetHeight + 'px';
  alert(this.style.height);
});
EOD;
  $output .= '<style>iframe #hubspot-iframe { visibility:hidden; }</style>';
  //drupal_add_js($script, array('type' => 'inline', 'scope' => 'header'));
  $output .= '<iframe src="' . $ext_data['hubspot']['profile_url'] . '" id="hubspot-iframe" scrolling="no" frameborder="0" style="width: 100%; height: 2500px;"></iframe>';
  drupal_add_js($script, array('type' => 'inline', 'scope' => 'header'));
  
  
  return $output;
}

function intel_admin_reports_hubspot_dashboard() {
  $portal_id = variable_get('hubspot_portalid', '');
  $output = '';
$script = <<<EOD
jQuery('#hubspot-page').load(function() {
  this.style.height = this.contentWindow.document.body.offsetHeight + 'px';
});
EOD;
  //$output .= '<style>iframe #hubspot-page .hs-nav-section { visibility:hidden; }</style>';
  //drupal_add_js($script, array('type' => 'inline', 'scope' => 'header'));
  $output .= '<iframe src="https://app.hubspot.com/dashboard/' . $portal_id . '" id="hubspot-page" scrolling="no" frameborder="0" style="width: 100%; height: 2500px;"></iframe>';
  drupal_add_js($script, array('type' => 'inline', 'scope' => 'header'));
  
  
  return $output;
}