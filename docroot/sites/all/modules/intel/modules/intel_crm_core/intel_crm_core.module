<?php

function intel_crm_core_menu() {
  $items = array();

  $items['crm-core/contact/%crm_core_contact/intel'] = array(
    'title' => 'Intelligence',
    'page callback' => 'intel_crm_core_contact_intel_page',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('view intel visitor data'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'api_access' => 'pro',
  );

  $items['crm-core/contact/%crm_core_contact/intel/resync'] = array(
    'title' => 'Resync data',
    'page callback' => 'intel_crm_core_sync_visitordata_page',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('view intel visitor data'),
    'type' => MENU_LOCAL_ACTION,
    //'file' => 'people/intel.people.inc',
  );

  $items['crm-core/contact/%crm_core_contact/intel_clickstream'] = array(
    'title' => 'Clickstream',
    'description' => 'LevelTen insight.',
    'page callback' => 'intel_visitor_tab_clickstream',
    'page arguments' => array(2),
    'access callback' => '_intel_permission_access_content_report',
    'access arguments' => array('view intel visitor data'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    //'file' => 'admin/intel.admin_visitor.inc',
    'api_access' => 'pro',
  );

  return $items;
}

/**
 * Implements hook_admin_paths()
 */
function intel_crm_core_admin_paths() {
  $paths = array(
    'crm-core/contact/*/intel' => 1,
    'crm-core/contact/*/intel_clickstream' => 1,
  );
  return $paths;
}

function intel_crm_core_contact_intel_page($contact) {
  $visitor = intel_crm_core_get_visitor_from_contact($contact);
  $output = intel_visitor_view($visitor);

  return $output;
}

function intel_crm_core_contact_intel_clickstream_page($contact) {
  $visitor = intel_crm_core_get_visitor_from_contact($contact);
  module_load_include('intel', 'admin/intel.admin_visitor.inc');
  $output = intel_visitor_tab_clickstream($visitor);

  return $output;
}

function intel_crm_core_sync_visitordata_page($contact) {
  $visitor = intel_crm_core_get_visitor_from_contact($contact);
  return intel_sync_visitordata_page($visitor);
}

function intel_crm_core_get_visitor_from_contact($contact) {
  $wrapper = entity_metadata_wrapper('crm_core_contact', $contact);
  $visitor = $wrapper->field_intel_visitor->value();
  return $visitor;
}

/*
 * Implements hook_entity_insert()
 */
function intel_crm_core_entity_insert($entity, $type) {
  intel_crm_core_entity_save($entity, $type);
}


/*
 * Implements hook_entity_insert()
 */
function intel_crm_core_entity_update($entity, $type) {
  intel_crm_core_entity_save($entity, $type);
}

function intel_crm_core_entity_save($entity, $type) {
  // origin used to prevent sync loop when new visitor or contact needs to be
  // created.
  static $origin;
  if (!isset($origin) && ($type == 'crm_core_contact') && ($entity->type == 'individual')) {
    $origin = 'crm_core_contact';
    intel_crm_core_sync_visitor_with_contact($entity, $type);
  }

  if (!isset($origin) && ($type == 'intel_visitor')) {
    $origin = 'intel_visitor';
    intel_crm_core_sync_contact_with_visitor($entity, $type);
  }
}

/**
 * @param $entity :
 * @param $type
 */
function intel_crm_core_sync_visitor_with_contact(CRMCoreContactEntity $entity, $type) {
  $contact_type = crm_core_contact_type_load($entity->type);
  $email_field = isset($contact_type->primary_fields['email']) ? $contact_type->primary_fields['email'] : '';
  $email_field_info = field_info_field($email_field);
  $email_field_column = ($email_field_info['type'] == 'email') ? 'email' : 'value';

    // check if visitor is associated with contact. If not, create
    $wrapper = entity_metadata_wrapper('crm_core_contact', $entity);
  $visitor = $wrapper->field_intel_visitor->value();
  if (!$visitor) {
    // create visitor to associate with entity
    $visitor = intel_visitor_create();
    $visitor->setIdentifier('crm_core_contact_id', $entity->contact_id);
    $visitor->save();
    // attach vid to entity
    $wrapper->field_intel_visitor->set($visitor->vid);
    $entity->save();
  }

  $name = $wrapper->contact_name->value();
  $visitor->setName($name['given'] . ' ' . $name['family']);

  // set visitor email identifiers to match crm_core_contact
  $email_field = isset($contact_type->primary_fields['email']) ? $contact_type->primary_fields['email'] : '';
  if ($email_field) {
    // if email field only allows one value, sync primary email field
    if ($email_field_info['cardinality'] == 1) {
      $email = $wrapper->$email_field->value();
      $visitor->setIdentifier('email', $email, TRUE);
    }
    // if email field allows multiple values, sync all values
    else {
      $visitor->clearIdentifierType('email');
      foreach ($wrapper->$email_field->getIterator() as $delta => $email_wrapper) {
        // $term_wrapper may now be accessed as a taxonomy term wrapper.
        $email = $email_wrapper->value();
        $visitor->setIdentifier('email', $email, FALSE);
      }
    }
  }
  $visitor->save();
}

function intel_crm_core_sync_contact_with_visitor(IntelVisitor $entity, $type) {
  // get email field parameters
  $contact_type = crm_core_contact_type_load('individual');
  $email_field = isset($contact_type->primary_fields['email']) ? $contact_type->primary_fields['email'] : '';
  $email_field_info = field_info_field($email_field);
  $email_field_column = ($email_field_info['type'] == 'email') ? 'email' : 'value';

  $contact_id = !empty($entity->crm_core_contact_id) ? $entity->crm_core_contact_id : '';
  // if contact_id not set, search existing crm_core_contacts to see if are
  // associated by vid
  if (!$contact_id && $entity->vid) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'crm_core_contact');
    $query->fieldCondition('field_intel_visitor', 'target_id', $entity->vid);
    $result = $query->execute();
    if (!empty($result)) {
      $contact_id = key($result['crm_core_contact']);
    }
  }

  // if still no contact_id, see if contact with matching email exists
  if (!$contact_id && $entity->email) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'crm_core_contact');
    $query->fieldCondition($email_field, $email_field_column, $entity->email);
    $result = $query->execute();
    if (!empty($result)) {
      $contact_id = key($result['crm_core_contact']);
    }
  }

  // if contact entity does not exists, create one and cross reference each other
  if (!$contact_id) {
    $values = array(
      'type' => 'individual',
    );
    $contact = entity_get_controller('crm_core_contact')->create($values);
    $contact->save();
    $entity->setIdentifier('crm_core_contact_id', $contact->contact_id);
    $entity->save();
  }
  else {
    $contact = crm_core_contact_load($contact_id);
  }

  $wrapper = entity_metadata_wrapper('crm_core_contact', $contact);
  $contact_name = $wrapper->contact_name->value();
  // only set name if it is not already set
  if (empty($contact_name) || (empty($contact_name['given']) && empty($contact_name['family']))) {
    $e = explode(' ', $entity->name, 2); // TODO: clean this up to use name prop
    $value = array(
      'given' => $e[0],
      'family' => $e[1],
    );
    $wrapper->contact_name->set($value);
  }

  $emails = $entity->getIdentifiers('email');
  if ($email_field) {
    // if email field only allows one value, sync primary email
    if ($email_field_info['cardinality'] == 1) {
      $wrapper->$email_field->set($emails[0]);
    }
    else {
      // clear existing email field values
      foreach ($wrapper->$email_field->getIterator() as $delta => $email_wrapper) {
        $wrapper->{$email_field}[$delta]->set(NULL);
      }
      foreach ($emails AS $delta => $email) {
        $wrapper->$email_field[$delta]->set($email);
      }
    }
  }

  $contact->save();
}

/*
 * Hide intelligence field
 */
function intel_crm_core_form_alter($form, $form_state, $form_id) {
  //dpm($form_id);//
  //dpm($form);//
}

function intel_crm_core_form_crm_core_contact_ui_form_alter(&$form, &$form_state, $form_id) {
  hide($form['field_intel_visitor']);
  hide($form['redirect']);
}