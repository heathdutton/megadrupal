<?php

function intel_webform_menu() {
  $items = array();

  $items['node/%webform_menu/webform/intel'] = array(
    'title' => 'Intelligence',
    'page callback' => 'intel_webform_manage',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'intel_webform.admin.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  $items['intel_webform/admin_submission_results_alter_js'] = array(
    'title' => '',
    'page callback' => 'intel_webform_admin_submission_results_alter_js',
    'access callback' => 'user_access',
    'access arguments' => array('view all intel reports'),
    'type' => MENU_CALLBACK,
    'file' => 'intel_webform.reports.inc',
  );
  return $items;
}

/**
 * Implements hook_page_alter
 * 
 * @param $page
 */
function intel_webform_page_alter(&$page) {
  if ((arg(0) == 'node') && (arg(2) == 'webform-results')) {
    drupal_add_js(drupal_get_path('module', 'intel_webform') . '/intel_webform.admin_submission_results_alter.js');
  }
}

/**
 * Modify a Webform submission, prior to saving it in the database.
 *
 * @param $node
 *   The Webform node on which this submission was made.
 * @param $submission
 *   The Webform submission that is about to be saved to the database.
 */
function intel_webform_webform_submission_presave($node, &$submission) {
  global $base_path;
  $idents = array();
  $vtk = IntelVisitor::extractVtk();
  $visitor = intel_visitor_load_or_create('user');

  $wf_settings = variable_get('intel_webform_settings_node_' . $node->nid, array());
  $merge_data = array();
  $update_name_prop = 0;
  $name_prop = $visitor->getProp('data.name');
  $prop_options = array(
    'source' => 'webform',
  );
  if (!empty($node->webform['components']) && is_array($node->webform['components'])) {
    foreach ($node->webform['components'] AS $cid => $component) {
      if (!empty($visitor->vid) && ($component['form_key'] == 'intel_vid')) {
        $submission->data[$cid]['value'][0] = $visitor->vid;
      }
      if (!empty($visitor->vid) && ($component['form_key'] == 'intel_vtk')) {
        $submission->data[$cid]['value'][0] = $visitor->vtk;
      }
      if (!empty($visitor->vid) && ($component['form_key'] == 'intel_visitor_url')) {
        $submission->data[$cid]['value'][0] ='http://' . $_SERVER['HTTP_HOST'] . $base_path . $visitor->uri();
      }
      if ($key = array_search($component['form_key'], $wf_settings)) {
        $merge_data[$key] = trim($submission->data[$cid]['value'][0]);
      }
      else if (!empty($wf_settings['fieldmap'][$component['form_key']])) {
        $merge_data['fieldmap_' . $component['form_key']] = trim($submission->data[$cid]['value'][0]);
      }
    }
  }
  if (!empty($merge_data['field_visitor_email'])) {
    $visitor->setIdentifier('email', $merge_data['field_visitor_email']);
    if (empty($visitor->contact_created) && !empty($visitor->email)) {
      $visitor->setContactCreated(REQUEST_TIME);
    }
  }
  if (!empty($merge_data['field_visitor_name'])) {
    $name_prop['first'] = $merge_data['field_visitor_name'];
    $name = $merge_data['field_visitor_name'];
    if ($merge_data['field_visitor_name2']) {
      $name_prop['last'] = $merge_data['field_visitor_name2'];
      $name .= ((!empty($merge_data['field_visitor_name2'])) ? " " . $merge_data['field_visitor_name2'] : '');
    }
    $visitor->setName($name);
    $visitor->setProp('name', $name_prop, $prop_options);
  }
  if (isset($wf_settings['fieldmap']) && is_array($wf_settings['fieldmap'])) {
    foreach ($wf_settings['fieldmap'] AS $field_key => $prop_keys) {
      if (empty($merge_data['fieldmap_' . $field_key])) {
        continue;
      }
      $a = explode(':', $prop_keys);
      if (count($a) == 2) {
        $prop = $visitor->getProp($a[0]);
        $prop[$a[1]] = $merge_data['fieldmap_' . $field_key];
        $visitor->setProp($a[0], $prop, $prop_options);
      }
    }
  }
  $visitor->merge();
}


/**
 * Implements hook_node_insert().
 */
function intel_webform_node_insert($node) {
  intel_webform_node_save($node);
}

/**
 * Implements hook_node_insert().
 */
function intel_webform_node_update($node) {
  intel_webform_node_save($node);
}

function intel_webform_node_save($node) {
  if (isset($node->webform) && isset($node->webform['intel'])) {
    variable_set('intel_webform_settings_node_' . $node->nid, $node->webform['intel']);
  }
}

function intel_webform_node_load($nodes, $types) {
  // Quick check to see if we need to do anything at all for these nodes.
  $webform_types = webform_variable_get('webform_node_types');
  if (count(array_intersect($types, $webform_types)) == 0) {
    return;
  }
  foreach ($nodes AS $nid => $node) {
    if (!in_array($node->type, $webform_types)) {
      continue;
    }
    $data = variable_get('intel_webform_settings_node_' . $nid, FALSE);
    if (!empty($data)) {
      $nodes[$nid]->webform['intel'] = $data;
    }
  }  
}

/**
 * Respond to a node deleted, only on webforms.
 */
function intel_webform_node_delete($node) {
  if (isset($node->webform) && isset($node->webform['intel'])) {
    variable_del('intel_webform_settings_node_' . $node->nid);
  }
}

/**
 * Implements hook_intel_intel_script
 */
function intel_webform_intel_intel_script() {
  $scripts['webform'] = array(
    'title' => t('Webform'),
    'description' => t('Used to track Webform submissions.'),
    'path' => drupal_get_path('module', 'intel_webform') . '/intel_webform.intel_webform.js',
    'enabled' => 1,
  );
  return $scripts;
}

/**
 * Implements hook_intel_form_submission_check
 */
function intel_webform_intel_form_submission_check(&$submission, &$track, &$link_query) {
  if (empty($_GET['sid'])) {
    return;
  }
  
  require_once './' . drupal_get_path('module', 'webform') . "/includes/webform.submissions.inc";
  $wfsubmissions = webform_get_submissions(array('sid' => $_GET['sid']));
  $wfsubmission = $wfsubmissions[$_GET['sid']];    // check if submission exists and if it is recent    
  if (isset($wfsubmission->submitted)) {
    $link_query = array('sid' => $_GET['sid']);
    $wf_node = node_load($wfsubmission->nid);
    if (isset($wf_node->field_track_submission[$wf_node->language][0]['value'])) {
      $track['category_id'] = $wf_node->field_track_submission[$wf_node->language][0]['value'];
    }
    if (isset($wf_node->field_track_submission_value[$wf_node->language][0]['value'])) {
      $track['category_id'] = $wf_node->field_track_submission_value[$wf_node->language][0]['value'];
    }
    $submission->type = 'webform';
    $submission->fid = $wfsubmission->nid;
    $submission->fsid = $wfsubmission->sid;
    $submission->details_url = "node/{$wfsubmission->nid}/submission/{$wfsubmission->sid}";
    $track['form_title'] = $wf_node->title;
    $track['submission_path'] = $submission->details_url;      
  }
}
