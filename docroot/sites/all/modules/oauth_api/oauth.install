<?php
// $Id$
/**
 * @file
 * Install, update and uninstall functions for the oauth module.
 */


/**
 * Implements hook_requirements().
 *
 * Check for OAuth php extension.
 */
function oauth_requirements($phase) {
  $requirements = array();

  // Ensure translations don't break at install time
  $t = get_t();

  $pecl_oauth = 'http://pecl.php.net/package/oauth';
  $version_min = '1.0-dev';
  $value = $version = trim(phpversion('oauth'), '"'); // TODO: remove trim if they fixed the version bug.

  // Check if OAuth extension is loaded.
  if (oauth_has_pecl()) {
    if (version_compare($version, $version_min, '>=')) {
      $description = $t('Using PECL OAuth (!version)', array('!version' => $version));
      $severity = REQUIREMENT_OK;
    }
    else {
      $description = $t('OAuth version (!old_version) was detected. You need to upgrade to v!version or above.', array('!old_version' => $version, '!version' => $version_min));
      $severity = REQUIREMENT_ERROR;
    }
  }
  // Fallback to Zend implementation.
  elseif (oauth_has_zend()) {
    include_once 'sites/all/libraries/Zend/Version.php';
    $value = $version = Zend_Version::VERSION;
    $description = $t('Using Zend OAuth (!version)', array('!version' => $version));
    $severity = REQUIREMENT_OK;
    $last_version = Zend_Version::getLatest();

    if (Zend_Version::compareVersion($last_version) > 0) {
      $description = $t('A new version (!version) of Zend is avialable. <a href="http://framework.zend.com/download/latest">Click here</a> to download it.', array('!version' => $last_version));
      $severity = REQUIREMENT_INFO;
    }
  }
  else {
    $value = $t('Not enabled');
    $description = $t('Your server does not support OAuth. <ul><li>Install the <a href="!pecl_oauth">PECL OAuth</a> extension v!version or above.</li><li>Alternatively, you can download <a href="http://framework.zend.com/download/latest">Zend Framework</a> with OAuth extension and extract the library/Zend folder to sites/all/libraries/Zend.</li></ul>', array('!pecl_oauth' => $pecl_oauth, '!version' => $version_min));
    $severity = REQUIREMENT_ERROR;
  }

  $requirements['oauth'] = array(
    'title'       => $t('OAuth'),
    'value'       => $value,
    'severity'    => $severity,
    'description' => $description,
  );

  return $requirements;
}

/**
 * Helper method that checks if the oauth extension is installed.
 */
function oauth_has_pecl() {
  return extension_loaded('oauth');
}

/**
 * Helper method that checks if the zend library is installed correctly
 */
function oauth_has_zend() {
  return file_exists('sites/all/libraries') && file_exists('sites/all/libraries/Zend/Oauth.php');
}

/**
 *
 * Helper for hook_schema().
 *
 * @param $length
 *   Length of token and secret, correctly dimensioned for the service being
 *   used.
 */
function oauth_token_schema($length_token = 255, $length_secret = 255) {
  return array(
    'description' => 'Tokens for request and services accesses.',
    'fields'      => array(
      'aid'         => array(
        'type'        => 'int',
        'not null'    => TRUE,
        'default'     => 0,
        'description' => "Unique {oauthmap}.aid.",
      ),
      'token'       => array(
        'type'        => 'varchar',
        'length'      => $length_token,
        'not null'    => TRUE,
        'default' => '',
        'description' => 'Tokens for request and services accesses.',
      ),
      'secret' => array(
        'type'        => 'varchar',
        'length'      => $length_secret,
        'not null'    => TRUE,
        'default' => '',
        'description' => 'The token_secret for oauth-based access.',
      ),
    ),
    'primary key' => array('aid'),
    'foreign keys' => array(
      'auth' => array(
        'table' => 'oauthmap',
        'columns' => array('aid' => 'aid'),
      ),
    ),
  );
}

/**
 * Create token table for a given module.
 */
function oauth_create_token_table($module) {
  $type = oauth_type_get_type($module);
  $token_table = $type->{'token table'};

  $table = oauth_token_schema($token_table['token length'], $token_table['secret length']);
  db_create_table($token_table['name'], $table);
}

/**
 * Drop token table for a given module.
 */
function oauth_drop_token_table($module) {
  $type = oauth_type_get_type($module);
  $token_table = $type->{'token table'};

  db_drop_table($token_table['name']);
}

/**
 * Implements hook_field_schema().
 */
function oauth_field_schema($field) {
  if ($field['type'] == 'oauth_consumer') {
    $columns = array(
      'key' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'secret' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'signature_method' => array(
        'type' => 'varchar',
        'length' => 15,
        'default' => OAUTH_SIG_METHOD_HMACSHA1,
      ),
      'auth_type' => array(
        'type' => 'int',
        'size' => 'small',
        'default' => OAUTH_AUTH_TYPE_AUTHORIZATION,
      ),
    );
  }
  elseif ($field['type'] == 'oauth2_client') {
    $columns = array(
      'client_id' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'client_secret' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    );
  }
  return array('columns' => $columns);
}

/**
 * Implements hook_schema().
 */
function oauth_schema() {
  $schema['oauth'] = array(
    'description' => 'Stores OAuth application data.',
    'fields' => array(
      'oid' => array(
        'description' => 'The primary identifier for an OAuth based application.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The {oauth_type}.type of this application.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The title of this application.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'class' => array(
        'description' => 'The adapter class to use for this application.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => oauth_get_default_adapter(),
      ),
      'language' => array(
        'description' => 'The {languages}.language of this application.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'oauth_title_type'    => array('title', array('type', 4)),
      'oauth_type'          => array(array('type', 4)),
    ),
    'primary key' => array('oid'),
  );

  $schema['oauth_type'] = array(
    'description' => 'Stores information about all defined {oauth} types.',
    'fields' => array(
      'type' => array(
        'description' => 'The machine-readable name of this type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The human-readable name of this type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'translatable' => TRUE,
      ),
      'version' => array(
        'description' => 'The OAuth version for this type.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
      ),
      'base' => array(
        'description' => 'The base string used to construct callbacks corresponding to this application type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'module' => array(
        'description' => 'The module defining this application type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'A brief description of this type.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
      'help' => array(
        'description' => 'Help information shown to the user when creating an {oauth} of this type.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'medium',
        'translatable' => TRUE,
      ),
      'custom' => array(
        'description' => 'A boolean indicating whether this type is defined by a module (FALSE) or by a user via Add content type (TRUE).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'locked' => array(
        'description' => 'A boolean indicating whether the administrator can change the machine name of this type.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
      ),
      'disabled' => array(
        'description' => 'A boolean indicating whether the application type is disabled.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny'
      ),
      'orig_type' => array(
        'description' => 'The original machine-readable name of this application type. This may be different from the current type name if the locked field is 0.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('type'),
  );

  $schema['oauthmap'] = array(
    'description' => 'Stores distributed authentication mapping.',
    'fields' => array(
      'aid' => array(
        'description' => 'Primary Key: Unique authmap ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "User's {users}.uid.",
      ),
      'oid' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => "Application {oauth}.oid which is controlling the authentication.",
      ),
      'authname' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Unique authentication name.',
      ),
    ),
    'unique keys' => array(
      'authname' => array('oid', 'authname'),
    ),
    'primary key' => array('aid'),
    'foreign keys' => array(
      'user' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
      'oauth' => array(
        'table' => 'oauth',
        'columns' => array('oid' => 'oid'),
      ),
    ),
  );

  return $schema;
}

function oauth_get_default_adapter() {
  if (oauth_has_pecl()) {
    return 'OAuthPECLConsumer';
  }
  else if (oauth_has_zend()) {
    return 'OAuthZendConsumer';
  }
}

function oauth_cleanup($module) {
  // TODO: batch operation for cleaning up the tables.
  $oids = db_select('oauth', 'o')
    ->fields('o', array('oid'))
    ->condition('type', $module);

  db_delete(oauth_token_table_get_name($module));
//   Clean up authmap.
//   $ok = db_delete('oauthmap')
//     ->where("oid IN (SELECT oid FROM {oauth} WHERE type = :type)", array(':type' => $module))
//     ->execute();

  $debug = TRUE;
}