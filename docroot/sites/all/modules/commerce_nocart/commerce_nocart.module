<?php
/**
 * @file
 * Provides means to build one-product fast checkout features while retaining
 * the cart for regular checkouts.
 */

/**
 * Creates a new order and transfers it to the specified checkout state.
 *
 * @param int $uid
 *   The uid of the user for whom to create the order. If left 0, the order will
 *   be created for an anonymous user and associated with the current session
 *   if it is anonymous.
 * @param string $checkout_page
 *   The page id of the first checkout page. Note that this page must have the
 *   'commerce_nocart' flag set.
 * @param string $cancel_redirect
 *   (optional) The path where the user is redirected to when cancelling the
 *   order. If omitted, the current path wil be used.
 * @param string $type
 *   (optional) The type of the order; defaults to the standard 'commerce_order'
 *   type.
 *
 * @return object
 *   The newly created shopping cart order object.
 */
function commerce_nocart_order_new($uid, $checkout_page, $cancel_redirect = NULL, $type = 'commerce_order') {
  // Construct a new order, set the 'nocart' flag and transfer it to the desired
  // checkout status imediately.
  $order = commerce_cart_order_new($uid, $type);
  $order->data['commerce_nocart'] = TRUE;

  // By default redirect to the product display when the checkout process is
  // canceled.
  $order->data['commerce_nocart_cancel_redirect'] = $cancel_redirect ?: $_GET['q'];

  // Copy over the checkout page.
  $order->data['commerce_nocart_checkout_page'] = $checkout_page;

  // Transfer to the desired checkout at once.
  return commerce_order_status_update($order, 'checkout_' . $checkout_page);
}

/**
 * Determines whether the nocart-flag is set on the given order.
 *
 * @param object $order
 *   A commerce order.
 *
 * @return bool
 *   Whether or not the nocart-flag is set on the order.
 */
function commerce_nocart_is_nocart_order($order) {
  return !empty($order->data['commerce_nocart']);
}

/**
 * Implements hook_field_formatter_info_alter().
 *
 * Extends the add-to-cart formatter with additional settings. See
 * commerce_nocart.field.inc for the respective hook implementations.
 */
function commerce_nocart_field_formatter_info_alter(&$info) {
  if (isset($info['commerce_cart_add_to_cart_form']['settings'])) {
    $info['commerce_cart_add_to_cart_form']['settings'] += array(
      'commerce_nocart' => array(
        'enabled' => FALSE,
        'button_text' => t('Buy'),
        'checkout_page' => '',
      ),
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Applies the formatter settings defined on the field instance to the
 * add-to-cart form.
 */
function commerce_nocart_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {
  // Nothing to do if the add-to-cart button is disabled.
  if (isset($form['submit']['#attributes']['disabled'])) {
    return;
  }

  // Extract field instance settings.
  $settings = _commerce_nocart_field_formatter_settings_extract_from_form($form, $form_state);
  if (empty($settings['commerce_nocart']['enabled']) || empty($settings['commerce_nocart']['checkout_page'])) {
    return;
  }

  // Validate checkout page setting.
  $pages = commerce_checkout_pages();
  $checkout_page = $settings['commerce_nocart']['checkout_page'];
  if (!isset($pages[$checkout_page]) || !empty($pages[$checkout_page]['status_cart'])) {
    return;
  }

  // Attach the 'prepare' and 'finalize' submit-callbacks. See
  // commerce_nocart.commerce.inc for their definitions.
  form_load_include($form_state, 'inc', 'commerce_nocart', 'commerce_nocart.commerce');
  array_unshift($form['#submit'], 'commerce_nocart_add_to_cart_form_prepare_submit');
  array_push($form['#submit'], 'commerce_nocart_add_to_cart_form_finalize_submit');

  // Copy over the checkout page setting to make it available in the form
  // submission callbacks.
  $form_state['commerce_nocart_checkout_page'] = $checkout_page;

  // Change the button text if desired.
  if (!empty($settings['commerce_nocart']['button_text'])) {
    $form['submit']['#value'] = $settings['commerce_nocart']['button_text'];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modifies the behavior of the cancel button on checkout pages.
 */
function commerce_nocart_form_commerce_checkout_form_alter(&$form, &$form_state) {
  if (commerce_nocart_is_nocart_order($form_state['order']) && !empty($form['buttons']['cancel'])) {
    form_load_include($form_state, 'inc', 'commerce_nocart', 'commerce_nocart.commerce');
    // Override the submit handler for changing the order status when checkout
    // is cancelled by the user.
    foreach ($form['buttons']['cancel']['#submit'] as $key => &$value) {
      if ($value == 'commerce_checkout_form_cancel_submit') {
        $value = 'commerce_nocart_checkout_form_cancel_submit';
      }
    }
  }

  if (!empty($form_state['order']->data['commerce_nocart_cancel_redirect'])) {
    $form_state['cancel_redirect'] = $form_state['order']->data['commerce_nocart_cancel_redirect'];
  }
}

/**
 * Implements hook_commerce_checkout_page_info().
 *
 * Create a copy of every defined checkout page having the status_cart flag set.
 */
function commerce_nocart_commerce_checkout_page_info() {
  static $recursion_flag;

  $nocart_pages = array();
  if (empty($recursion_flag) && variable_get('commerce_nocart_checkout_pages_copy', TRUE)) {
    $recursion_flag = TRUE;
    foreach (module_implements('commerce_checkout_page_info') as $module) {
      foreach (module_invoke($module, 'commerce_checkout_page_info') as $page_id => $checkout_page) {
        if (!(isset($checkout_page['status_cart']) && $checkout_page['status_cart'] == FALSE)) {
          $nocart_page_id = $page_id . variable_get('commerce_nocart_checkout_page_suffix', '_direct');
          $nocart_pages[$nocart_page_id] = $checkout_page + array(
            'name' => $checkout_page['title'],
          );
          $nocart_pages[$nocart_page_id]['page_id'] = $nocart_page_id;
          $nocart_pages[$nocart_page_id]['status_cart'] = FALSE;
          $nocart_pages[$nocart_page_id]['name'] .= ' (' . t('No cart') . ')';
        }
      }
    }
    $recursion_flag = FALSE;
  }

  return $nocart_pages;
}

/**
 * Implements hook_module_implements_alter().
 */
function commerce_nocart_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    // Ensure that the form_alter implementation is called early. This is
    // necessary in order to beat commerce_cart when altering the submit
    // callback of the checkout cancel button.
    $key_order = array_flip(array_keys($implementations));
    if (isset($key_order['commerce_nocart'])) {
      $key_order['commerce_nocart'] = -1;
      array_multisort($key_order, $implementations);
    }
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function commerce_nocart_entity_property_info_alter(&$info) {
  // Add the current user's shopping cart to the site information.
  $info['commerce_order']['properties']['commerce_nocart'] = array(
    'label' => t('Direct checkout'),
    'description' => t('Whether or not this order is a direct checkout skipping the cart'),
    'getter callback' => 'commerce_nocart_data_property_get',
    'setter callback' => 'commerce_nocart_data_property_set',
    'type' => 'boolean',
  );
}

/**
 * Return the value of a data-entry from a commerce_order.
 */
function commerce_nocart_data_property_get($commerce_order, array $options, $name, $type, $info) {
  return !empty($commerce_order->data[$name]);
}

/**
 * Return the value of a data-entry of a commerce_order.
 */
function commerce_nocart_data_property_set(&$commerce_order, $name, $value, $langcode, $type, $info) {
  $commerce_order->data[$name] = $value;
}

/**
 * Extract product reference field instance settings from the add-to-cart form.
 *
 * Given an add-to-cart form, retrieve the entity from the form state and look
 * up the field-formatter settings of the product reference field this form
 * belongs to.
 */
function _commerce_nocart_field_formatter_settings_extract_from_form($form, $form_state) {
  // Custom display settings are accessible through the add-to-cart context
  // array. Those are present whenever the form is rendered directly (e.g. as a
  // views field) instead of as part of an entity (with corresponding view
  // mode).
  //
  // @see:
  // - commerce_cart_field_attach_view_alter()
  // - hook_cart_field_attach_view_alter()
  if (isset($form_state['context']['display']['settings']) && is_array($form_state['context']['display']['settings'])) {
    return $form_state['context']['display']['settings'];
  }

  if (!isset($form_state['line_item']->data['context']['entity'])) {
    return;
  }

  $entity_info = $form_state['line_item']->data['context']['entity'];
  if (!is_array($entity_info)) {
    return;
  }

  $entity_type = $entity_info['entity_type'];
  $entity_id = $entity_info['entity_id'];
  $entity = entity_load_single($entity_type, $entity_id);
  if (!$entity) {
    return;
  }

  $field_name = $entity_info['product_reference_field_name'];
  list(,,$bundle_name) = entity_extract_ids($entity_type, $entity);
  $instance = field_info_instance($entity_type, $field_name, $bundle_name);
  if (!$instance) {
    return;
  }

  $view_mode = substr($form_state['context']['view_mode'], strlen($entity_type . '_'));
  $display = field_get_display($instance, $view_mode, $entity);

  return $display['settings'];
}
