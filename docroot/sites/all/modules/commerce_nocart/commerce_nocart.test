<?php

/**
 * @file
 * Tests for commerce_nocart.module.
 */

class CommerceNoCartProductDisplayTestCase extends CommerceCartTestCase {

  /**
   * A dummy product.
   */
  protected $product;

  /**
   * A dummy product display.
   */
  protected $product_node;

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Direct checkout on Product display',
      'description' => 'Test direct checkout features on a product display',
      'group' => 'Commerce NoCart',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUpHelper('all', array('commerce_nocart'));
    // Create a dummy product display content type.
    $field_name = 'field_product';
    $bundle_name = 'product_display';
    $this->createDummyProductDisplayContentType($bundle_name, TRUE, $field_name, 1);

    // Instance settings for default view mode and teaser, hide cart on full
    // content.
    $instance = field_read_instance('node', $field_name, $bundle_name);
    $instance['display'] = array(
      'default' => array(
        'label' => 'above',
        'type' => 'commerce_cart_add_to_cart_form',
        'weight' => '1',
        'settings' => array(
          'show_quantity' => 0,
          'default_quantity' => '1',
          'combine' => 1,
          'show_single_product_attributes' => 0,
          'line_item_type' => 'product',
          'commerce_nocart' => array(
            'enabled' => 1,
            'button_text' => 'Buy now on default display',
            'checkout_page' => 'checkout_direct',
          ),
        ),
      ),
      'full' => array(
        'label' => 'above',
        'type' => 'hidden',
        'weight' => '1',
        'settings' => array(),
      ),
      'teaser' => array(
        'label' => 'above',
        'type' => 'commerce_cart_add_to_cart_form',
        'weight' => '1',
        'settings' => array(
          'show_quantity' => 0,
          'default_quantity' => '1',
          'combine' => 1,
          'show_single_product_attributes' => 0,
          'line_item_type' => 'product',
          'commerce_nocart' => array(
            'enabled' => 1,
            'button_text' => 'Buy now on teaser display',
            'checkout_page' => 'checkout_direct',
          ),
        ),
      ),
    );
    field_update_instance($instance);

    // Create dummy product display nodes (and their corresponding product
    // entities).
    $sku = 'PROD-01';
    $product_name = 'Product One';
    $this->product = $this->createDummyProduct($sku, $product_name);
    $this->product_node = $this->createDummyProductNode(array($this->product->product_id), $product_name);

    // Log as a normal user to test cart process.
    $this->drupalLogin($this->store_customer);
  }

  /**
   * Tests the add-to-cart form on the teaser display.
   */
  public function testDirectCheckoutOnTeaserViewMode() {
    $this->drupalGet('node');
    $this->assertResponse(200);

    $this->assertFieldByName('op', 'Buy now on teaser display', 'Add to cart button with custom value present on teaser display');
    $this->drupalPost(NULL, array(), 'Buy now on teaser display');
    $this->assertResponse(200);

    $checkout_url_head = url('checkout', array('absolute' => TRUE));
    $this->assertEqual(substr($this->getUrl(), 0, strlen($checkout_url_head)), $checkout_url_head, 'Add to cart button sends customer directly to checkout.');
    $checkout_url_tail = 'checkout_direct';
    $this->assertEqual(substr($this->getUrl(), -strlen($checkout_url_tail)), $checkout_url_tail, 'Configured checkout page was selected');
  }

  /**
   * Tests the add-to-cart form on the default display.
   */
  public function testDirectCheckoutOnDefaultViewMode() {
    $this->drupalGet('node/' . $this->product_node->nid);
    $this->assertResponse(200);

    $this->assertFieldByName('op', 'Buy now on default display', 'Add to cart button with custom value present on full content (falling back to default display)');
    $this->drupalPost(NULL, array(), 'Buy now on default display');
    $this->assertResponse(200);

    $checkout_url_head = url('checkout', array('absolute' => TRUE));
    $this->assertEqual(substr($this->getUrl(), 0, strlen($checkout_url_head)), $checkout_url_head, 'Add to cart button sends customer directly to checkout.');
    $checkout_url_tail = 'checkout_direct';
    $this->assertEqual(substr($this->getUrl(), -strlen($checkout_url_tail)), $checkout_url_tail, 'Configured checkout page was selected');
  }

}

/**
 * Test cart features for a product display that only has one product attached.
 *
 * This test executes all test cases from the respective test in the Commerce
 * Cart module, but with the Commerce NoCart module enabled. This ensures that
 * functionality is not altered by simply enabling the Commerce NoCart module.
 */
class CommerceNoCartTestCaseSimpleProduct extends CommerceCartTestCaseSimpleProduct {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Shopping cart (vanilla)',
      'description' => 'Test cart features like adding products to the cart, removing products from the cart and updating quantities.',
      'group' => 'Commerce NoCart',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function createDummyProductDisplayContentType($type = 'product_display', $attach_product_reference_field = TRUE, $field_name = 'field_product', $cardinality_reference_field = 1) {
    // Regrettably it is not possible to simply override
    // CommerceCartTestCase::setUpHelper in order to inject the module_enable
    // call because the test classes use parent::setUpHelper instead of
    // $this->setUpHelper(). Therefore we abuse another method which is called
    // from within setUp().
    if (!module_exists('commerce_nocart')) {
      $modules = array('commerce_nocart');
      $success = module_enable($modules, TRUE);
      $this->assertTrue($success, t('Enabled modules: %modules', array('%modules' => implode(', ', $modules))));
      $this->resetAll();
    }

    return parent::createDummyProductDisplayContentType($type, $attach_product_reference_field, $field_name, $cardinality_reference_field);
  }

}

/**
 * Test cart features for a product display that has several products attached.
 *
 * This test executes all test cases from the respective test in the Commerce
 * Cart module, but with the Commerce NoCart module enabled. This ensures that
 * functionality is not altered by simply enabling the Commerce NoCart module.
 */
class CommerceNoCartTestCaseMultiProducts extends CommerceCartTestCaseMultiProducts {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Shopping cart multiple (vanilla)',
      'description' => 'Test adding products to cart from a product display node with multiple products, using the product select add to cart form.',
      'group' => 'Commerce NoCart',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function createDummyProductDisplayContentType($type = 'product_display', $attach_product_reference_field = TRUE, $field_name = 'field_product', $cardinality_reference_field = 1) {
    // Regrettably it is not possible to simply override
    // CommerceCartTestCase::setUpHelper in order to inject the module_enable
    // call because the test classes use parent::setUpHelper instead of
    // $this->setUpHelper(). Therefore we abuse another method which is called
    // from within setUp().
    if (!module_exists('commerce_nocart')) {
      $modules = array('commerce_nocart');
      $success = module_enable($modules, TRUE);
      $this->assertTrue($success, t('Enabled modules: %modules', array('%modules' => implode(', ', $modules))));
      $this->resetAll();
    }

    return parent::createDummyProductDisplayContentType($type, $attach_product_reference_field, $field_name, $cardinality_reference_field);
  }

}

/**
 * Test cart features for a product with attributes.
 *
 * This test executes all test cases from the respective test in the Commerce
 * Cart module, but with the Commerce NoCart module enabled. This ensures that
 * functionality is not altered by simply enabling the Commerce NoCart module.
 */
class CommerceNoCartTestCaseAttributes extends CommerceCartTestCaseAttributes {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Shopping cart attributes (vanilla)',
      'description' => 'Test adding products to cart from a product with multiple attributes, using the add to cart form product attribute select.',
      'group' => 'Commerce NoCart',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function createDummyProductDisplayContentType($type = 'product_display', $attach_product_reference_field = TRUE, $field_name = 'field_product', $cardinality_reference_field = 1) {
    // Regrettably it is not possible to simply override
    // CommerceCartTestCase::setUpHelper in order to inject the module_enable
    // call because the test classes use parent::setUpHelper instead of
    // $this->setUpHelper(). Therefore we abuse another method which is called
    // from within setUp().
    if (!module_exists('commerce_nocart')) {
      $modules = array('commerce_nocart');
      $success = module_enable($modules, TRUE);
      $this->assertTrue($success, t('Enabled modules: %modules', array('%modules' => implode(', ', $modules))));
      $this->resetAll();
    }

    return parent::createDummyProductDisplayContentType($type, $attach_product_reference_field, $field_name, $cardinality_reference_field);
  }

}

/**
 * Test cart conversion from anonymous to authenticated.
 *
 * This test executes all test cases from the respective test in the Commerce
 * Cart module, but with the Commerce NoCart module enabled. This ensures that
 * functionality is not altered by simply enabling the Commerce NoCart module.
 */
class CommerceNoCartTestCaseAnonymousToAuthenticated extends CommerceCartTestCaseAnonymousToAuthenticated {

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Shopping cart anonymous to authenticated (vanilla)',
      'description' => 'Test cart conversion from anonymous to authenticated when an anonymous users logs in.',
      'group' => 'Commerce NoCart',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function createDummyProductDisplayContentType($type = 'product_display', $attach_product_reference_field = TRUE, $field_name = 'field_product', $cardinality_reference_field = 1) {
    // Regrettably it is not possible to simply override
    // CommerceCartTestCase::setUpHelper in order to inject the module_enable
    // call because the test classes use parent::setUpHelper instead of
    // $this->setUpHelper(). Therefore we abuse another method which is called
    // from within setUp().
    if (!module_exists('commerce_nocart')) {
      $modules = array('commerce_nocart');
      $success = module_enable($modules, TRUE);
      $this->assertTrue($success, t('Enabled modules: %modules', array('%modules' => implode(', ', $modules))));
      $this->resetAll();
    }

    return parent::createDummyProductDisplayContentType($type, $attach_product_reference_field, $field_name, $cardinality_reference_field);
  }

}
