<?php

/**
 * @file
 * Module's main file.
 */

/**
 * Implements hook_module_implements_alter
 *
 * @param $implementations
 * @param $hook
 */
function field_group_ajaxified_multipage_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    if (isset($implementations['field_group_ajaxified_multipage'])) {
      $group = $implementations['field_group_ajaxified_multipage'];
      unset($implementations['field_group_ajaxified_multipage']);
      $implementations['field_group_ajaxified_multipage'] = $group;
    }
  }
}

/**
 * Implements hook_field_group_formatter_info().
 *
 * Define the information on formatters. The formatters are
 * separated by view mode type. We have "form" for all form elements
 * and "display" will be the real view modes (full, teaser, sticky, ...)
 *
 * structure:
 * @code
 * array(
 *   'form' => array(
 *     'fieldset' => array(
 *       // required, String with the name of the formatter type.
 *       'label' => t('Fieldset'),
 *       // optional, String description of the formatter type.
 *       'description' => t('This is field group that ...'),
 *       // required, Array of available formatter options.
 *       'format_types' => array('open', 'collapsible', 'collapsed'),
 *       // required, String with default value of the style.
 *       'default_formatter' => 'collapsible',
 *       // optional, Array with key => default_value pairs.
 *       'instance_settings' => array('key' => 'value'),
 *     ),
 *   ),
 *   'display' => array(
 *     'fieldset' => array(
 *       // required, String with the name of the formatter type.
 *       'label' => t('Fieldset'),
 *       // optional, String description of the formatter type.
 *       'description' => t('This is field group that ...'),
 *       // required, Array of available formatter options.
 *       'format_types' => array('open', 'collapsible', 'collapsed'),
 *       // required, String with default value of the style.
 *       'default_formatter' => 'collapsible',
 *       // optional, Array with key => default_value pairs.
 *       'instance_settings' => array('key' => 'value'),
 *     ),
 *   ),
 * ),
 * @endcode
 *
 * @return $formatters
 *   A collection of available formatting html controls for form
 *   and display overview type.
 *
 * @see field_group_field_group_formatter_info()
 */
function field_group_ajaxified_multipage_field_group_formatter_info() {
  return array(
    'form' => array(
      'multipage-group' => array(
        'instance_settings' => array(
          'ajaxify' => FALSE,
          'nonjs_multistep' => FALSE,
          'scroll_top' => FALSE,
          'button_label' => FALSE,
          'button_label_next' => FALSE,
          'button_label_prev' => FALSE
        ),
      ),
    ),
  );
}

/**
 * Implements hook_field_group_format_settings().
 *
 * Defines configuration widget for the settings on a field group
 * formatter. Each formatter can have different elements and storage.
 *
 * @params Object $group The group object.
 *
 * @return Array $form The form element for the format settings.
 */
function field_group_ajaxified_multipage_field_group_format_settings($group) {
  if ($group->format_type == 'multipage-group') {
    $field_group_types = field_group_formatter_info();
    $mode = $group->mode == 'form' ? 'form' : 'display';
    $formatter = $field_group_types[$mode][$group->format_type];

    // Reset options if ajaxified is disabled.
    // This is required as if do no do this, he options are still shown in the
    // field group settings summary.
    if(!$group->format_settings['instance_settings']['ajaxify']) {
      $options = array(
        'nonjs_multistep',
        'scroll_top',
        'button_label',
        'button_label_next',
        'button_label_prev'
      );

      foreach($options as $option) {
        unset($group->format_settings['instance_settings'][$option]);
      }
    }

    $form['instance_settings']['ajaxify'] = array(
      '#title' => t('Ajaxify'),
      '#type' => 'select',
      '#default_value' => isset($group->format_settings['instance_settings']['ajaxify']) ? $group->format_settings['instance_settings']['ajaxify'] : $formatter['instance_settings']['ajaxify'],
      '#weight' => 20,
      '#options' => array(0 => t('No'), 1 => t('Yes')),
      '#description' => t('If enabled navigation to next/prev pages will be done using ajax instead of simple javascript'),
    );
    $form['instance_settings']['nonjs_multistep'] = array(
      '#title' => t('Non Javascript Multistep'),
      '#type' => 'select',
      '#default_value' => isset($group->format_settings['instance_settings']['nonjs_multistep']) ? $group->format_settings['instance_settings']['nonjs_multistep'] : $formatter['instance_settings']['nonjs_multistep'],
      '#weight' => 21,
      '#options' => array(0 => t('No'), 1 => t('Yes')),
      '#description' => t('If enabled and ajaxify option is disabled no javascript will be used for form submision or navigration between steps, the form will be refreshed. useful for debugging or very complex multistep forms'),'#states' => array(
        'visible' => array(
          ':input[name="fields[group_signup][format_settings][settings][instance_settings][ajaxify]"]' => array('value' => 1)
        )
      )
    );
    $form['instance_settings']['scroll_top'] = array(
      '#title' => t('Scroll to top'),
      '#type' => 'select',
      '#default_value' => isset($group->format_settings['instance_settings']['scroll_top']) ? $group->format_settings['instance_settings']['scroll_top'] : $formatter['instance_settings']['scroll_top'],
      '#weight' => 22,
      '#options' => array(0 => t('No'), 1 => t('Yes')),
      '#description' => t('Scroll to the top of the page on step change.'),
      '#states' => array(
        'visible' => array(
          ':input[name="fields[group_signup][format_settings][settings][instance_settings][ajaxify]"]' => array('value' => 1)
        )
      )
    );
    $form['instance_settings']['button_label'] = array(
      '#title' => t('Change button label?'),
      '#type' => 'checkbox',
      '#default_value' => isset($group->format_settings['instance_settings']['button_label']) ? $group->format_settings['instance_settings']['button_label'] : $formatter['instance_settings']['button_label'],
      '#weight' => 23,
      '#states' => array(
        'visible' => array(
          ':input[name="fields[group_signup][format_settings][settings][instance_settings][ajaxify]"]' => array('value' => 1)
        )
      )
    );
    $form['instance_settings']['button_label_next'] = array(
      '#title' => t('Next button label'),
      '#type' => 'textfield',
      '#default_value' => isset($group->format_settings['instance_settings']['button_label_next']) ? $group->format_settings['instance_settings']['button_label_next'] : $formatter['instance_settings']['button_label_next'],
      '#weight' => 24,
      '#states' => array(
        'visible' => array(
          ':input[name="fields[group_signup][format_settings][settings][instance_settings][ajaxify]"]' => array('value' => 1),
          ':input[name="fields[group_signup][format_settings][settings][instance_settings][button_label]"]' => array('checked' => TRUE)
        )
      )
    );
    $form['instance_settings']['button_label_prev'] = array(
      '#title' => t('Previous button label'),
      '#type' => 'textfield',
      '#default_value' => isset($group->format_settings['instance_settings']['button_label_prev']) ? $group->format_settings['instance_settings']['button_label_prev'] : $formatter['instance_settings']['button_label_prev'],
      '#weight' => 25,
      '#states' => array(
        'visible' => array(
          ':input[name="fields[group_signup][format_settings][settings][instance_settings][ajaxify]"]' => array('value' => 1),
          ':input[name="fields[group_signup][format_settings][settings][instance_settings][button_label]"]' => array('checked' => TRUE)
        )
      )
    );

    return $form;
  }

  return NULL;
}

/**
 * Implements hook_form_alter
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 * @param bool $no_js_use
 */
function field_group_ajaxified_multipage_form_alter(&$form, &$form_state, $form_id, $no_js_use = FALSE) {
  // Check form array to see if it has multipage group.
  $is_multi_page = FALSE;
  $scroll_top = FALSE;
  $button_label = FALSE;
  $button_label_next = '';
  $button_label_prev = '';
  $page_group = array();

  if (isset($form['#groups_custom'])) {
    $form['#groups'] = $form['#groups_custom'];
  }
  if (isset($form['#groups'])) {
    $a_group = reset($form['#groups']);
  }
  if (isset($a_group)) {
    if (is_array($a_group) || is_object($a_group)) {
      $groups = array();
      $page_group = NULL;
      $n = 0;
      foreach ($form['#groups'] as $key => $_group) {
        if (is_object($_group)) {
          $_group = array(
            'name' => $key,
            'format_type' => $_group->format_type,
            'label' => $_group->label,
            'format_settings' => $_group->format_settings,
            'children' => $_group->children,
            'weight' => $_group->weight,
          );
        }
        if (is_array($_group)) {
          if (!isset($_group['weight'])) {
            $_group['weight'] = $n;
            $form['#groups'][$key]['weight'] = $n;
          }
          if ($_group['format_type'] == 'multipage-group' && ($_group['format_settings']['instance_settings']['ajaxify'] || $_group['format_settings']['instance_settings']['nonjs_multistep']) && empty($page_group)) {
            $is_multi_page = TRUE;
            $page_group = $_group;
          }

          // Scroll Top.
          if(isset($_group['format_settings']['instance_settings']['scroll_top'])) {
            if($_group['format_settings']['instance_settings']['scroll_top'] == 1) {
              $scroll_top = TRUE;
            }
          }

          // Button labels.
          if(isset($_group['format_settings']['instance_settings']['button_label'])) {
            if ($_group['format_settings']['instance_settings']['button_label'] == 1) {
              $button_label = TRUE;
              $button_label_next = t($_group['format_settings']['instance_settings']['button_label_next']);
              $button_label_prev = t($_group['format_settings']['instance_settings']['button_label_prev']);
            }
          }
          $groups[$key] = $_group;
          $n++;
        }
      }
    }
  }

  // Ajaxify multipage group.
  if ($is_multi_page) {
    $form_state['field_group_ajaxified_multipage_enabled'] = $is_multi_page;
    $form_state['field_group_ajaxified_multipage_group'] = $page_group;
    $form_state['field_group_ajaxified_multipage_complete_form'] = array();

    // Sort groups by weight.
    if (!function_exists('__field_group_ajaxified_multipage_groups_by_weight')) {
      global $__field_group_ajaxified_multipage_groups_by_weight_groups;
      $__field_group_ajaxified_multipage_groups_by_weight_groups = $groups;
      function __field_group_ajaxified_multipage_groups_by_weight($a, $b) {
        global $__field_group_ajaxified_multipage_groups_by_weight_groups;

        if (is_array($a)) {
          return $a['weight'] > $b['weight'];
        }
        elseif (is_object($a)) {
          return $a->weight > $b->weight;
        }
        else {
          return $__field_group_ajaxified_multipage_groups_by_weight_groups[$a]['weight'] > $__field_group_ajaxified_multipage_groups_by_weight_groups[$b]['weight'];
        }
      }
    }

    uasort($form['#groups'], '__field_group_ajaxified_multipage_groups_by_weight');
    usort($page_group['children'], '__field_group_ajaxified_multipage_groups_by_weight');
    if (!empty($page_group['name'])) {
      usort($form['#groups'][$page_group['name']]->children, '__field_group_ajaxified_multipage_groups_by_weight');
    }
    uasort($groups, '__field_group_ajaxified_multipage_groups_by_weight');

    $wrapper_id = 'form-ajax-wrapper';
    if (isset($form['#id'])) {
      $wrapper_id = $form['#id'] . '-' . $wrapper_id;
    }
    $form['#prefix'] = '<div id="' . $wrapper_id . '">';
    $form['#suffix'] = '</div>';
    $form['#tree'] = TRUE;

    // $form_state['storage'] has no specific drupal meaning, but it is
    // traditional to keep variables for multistep forms there.
    $step = empty($form_state['storage']['field_group_ajaxified_multipage_step']) ? 1 : $form_state['storage']['field_group_ajaxified_multipage_step'];
    $form_state['storage']['field_group_ajaxified_multipage_step'] = $step;

    // Convert page group formats to fieldset.
    $form_state['field_group_ajaxified_multipage_complete_form'] = $form;
    $n = 0;
    foreach ($groups as $group_name => $group) {
      if (in_array($group_name, $page_group['children'])) {
        $n++;
        $group['format_type'] = 'fieldset';
        if (isset($form['#groups'])) {
          if (is_object($form['#groups'][$group_name])) {
            $form['#groups'][$group_name]->format_type = $group['format_type'];
          }
          else {
            $form['#groups'][$group_name]['format_type'] = $group['format_type'];
          }
        }
        if ($n != $step) {
          _field_group_ajaxified_multipage_field_unset($group['children'], $form);
        }
      }
    }

    $step_label = $groups[$page_group['children'][$step - 1]]['label'];
    // Add header.
    // Create a page title from the label.
    $page_header = isset($page_group['format_settings']['instance_settings']['page_header']) ? $page_group['format_settings']['instance_settings']['page_header'] : 3;
    switch ($page_header) {
      case 1:
        $title = $step_label;
        break;

      case 2:
        $title = t('Step %count of %total', array(
          '%count' => $step,
          '%total' => count($page_group['children'])
        ));
        break;

      case 3:
        $title = t('Step %count of %total !label', array(
          '%count' => $step,
          '%total' => count($page_group['children']),
          '!label' => $step_label
        ));
        break;

      case 0:
      default:
        $title = '';
        break;
    }
    if (!isset($form['#attributes'])) {
      $form['#attributes'] = array();
    }
    $output = '<div' . drupal_attributes($form['#attributes']) . '>';
    if (!empty($step_label)) {

      // Always wrap fieldset legends in a SPAN for CSS positioning.
      $output .= '<h2 class="multipage-pane-title"><span>' . $title . '</span></h2>';
    }

    $output .= '</div>';
    $form['paging_header'] = array(
      '#type' => 'item',
      '#markup' => $output,
      '#weight' => -1,
    );

    // Add footer.
    $page_counter_format = isset($page_group['format_settings']['instance_settings']['page_counter']) ? $page_group['format_settings']['instance_settings']['page_counter'] : 1;
    $output = '<div class="fieldset-wrapper multipage-pane-wrapper">';
    if ($page_counter_format == 1) {
      $output .= t('<span class="multipage-counter_ajax">%count / %total</span>', array(
        '%count' => $step,
        '%total' => count($page_group['children'])
      ));
    }
    elseif ($page_counter_format == 2) {
      $output .= t('<span class="multipage-counter_ajax">%count</span>', array('%count' => $step));
    }
    $output .= '</div>';
    $form['paging_footer'] = array(
      '#type' => 'markup',
      '#markup' => $output,
    );

    // Add navigation buttons.
    if ($step < count($page_group['children'])) {

      // Next button label
      if($button_label) {
        $next_label = $button_label_next;
      } else {
        $next_label = t('Next step');
      }

      $form['actions']['next'] = array(
        '#type' => 'submit',
        '#value' => $next_label,
        '#validate' => array('_field_group_ajaxified_multipage_form_validate'),
        '#ajax' => array(
          'wrapper' => $wrapper_id,
          'callback' => '_field_group_ajaxified_multipage_form_callback',
          'effect' => 'fade',
        ),
      );
    }
    if ($step > 1) {

      // Prev button label
      if($button_label) {
        $prev_label = $button_label_prev;
      } else {
        $prev_label = t("Previous step");
      }

      $form['actions']['prev'] = array(
        '#type' => 'submit',
        '#value' => $prev_label,
        // Since all info will be discarded, don't validate on 'prev'.
        '#limit_validation_errors' => array(),
        // #submit is required to use #limit_validation_errors.
        '#submit' => array('_field_group_ajaxified_multipage_form_submit'),
        '#ajax' => array(
          'wrapper' => $wrapper_id,
          'callback' => '_field_group_ajaxified_multipage_form_callback',
        ),
      );
    }

    // Display submit button on the last step.
    if (isset($form['#submit'])) {
      array_unshift($form['#submit'], '_field_group_ajaxified_multipage_form_submit');
    }
    if (isset($form['actions']['submit']['#submit'])) {
      array_unshift($form['actions']['submit']['#submit'], '_field_group_ajaxified_multipage_form_submit');
    }

    if ($step != count($page_group['children']) && $page_group['format_settings']['instance_settings']['move_button']) {
      unset($form['actions']['submit']);
      unset($form['actions']['preview']);
    }

    // This simply allows us to demonstrate no-javascript use without
    // actually turning off javascript in the browser. Removing the #ajax
    // element turns off AJAX behaviors on that element and as a result
    // ajax.js doesn't get loaded.
    // For demonstration only! You don't need this.
    if ($no_js_use || !@$page_group['format_settings']['instance_settings']['ajaxify']) {

      // Remove the #ajax from the above, so ajax.js won't be loaded.
      // For demonstration only.
      unset($form['next']['#ajax']);
      unset($form['prev']['#ajax']);
      unset($form['actions']['next']['#ajax']);
      unset($form['actions']['prev']['#ajax']);
    }

    // Some special treatment for stricy form validate functions.
    if (isset($form['#validate'])) {
      foreach ($form['#validate'] as $_vali_k => $_vali_v) {
        if ($_vali_v == 'user_account_form_validate') {
          $form['#validate'][$_vali_k] = '_field_group_ajaxified_multipage_user_account_form_validate';
        }
      }
    }

    if (isset($form_state['node'])) {
      $form += _field_invoke_default('form', 'node', $form_state['node'], $form, $form_state);
    }

    // Scroll to top.
    if($scroll_top) {
      $form['#attached']['js'][] = drupal_get_path('module', 'field_group_ajaxified_multipage') . '/js/field_group_ajaxified_multipage.js';
    }

    // Allow thirdparty modules to alter the altered form array.
    $hooks = array('field_group_ajaxified_multipage_form');
    if (isset($form_state['build_info']['base_form_id'])) {
      $hooks[] = 'form_' . $form_state['build_info']['base_form_id'];
    }
    $hooks[] = 'field_group_ajaxified_multipage_form_' . $form_id;

    drupal_alter($hooks, $form, $form_state, $form_id);
  }
}

/**
 * Ajax callback for ajaxified form
 *
 * @param $form
 * @param $form_state
 *
 * @return mixed
 */
function _field_group_ajaxified_multipage_form_callback($form) {

  // @ToDo: We should move wrapper to wrap status messages.
  $prefix = $form['#prefix'];
  $suffix = $form['#suffix'];
  unset($form['#prefix'], $form['#suffix']);
  $output = $prefix . theme('status_messages') . drupal_render($form) . $suffix;
  $js = drupal_add_js();
  $settings = call_user_func_array('array_merge_recursive', $js['settings']['data']);
  $commands = array();

  // Scroll to the top of the form.
  // @todo: add the form wrapper here
  $commands[] = field_group_ajaxified_multipage_ajax_command_scroll_top('body');
  $commands[] = ajax_command_replace(NULL, $output, $settings);
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * Scroll to top of the current view.
 *
 * @return
 *   An array suitable for use with the ajax_render() function.
 */
function field_group_ajaxified_multipage_ajax_command_scroll_top($selector) {
  $command = array(
    'command' => 'fgScrollTop',
    'selector' => $selector,
  );
  return $command;
}

/**
 *
 * @param $form
 * @param $form_state
 */
function _field_group_ajaxified_multipage_user_account_form_validate($form, &$form_state) {
  if (!isset($form_state['values']['account'])) {
    $form_state['values']['account'] = $form_state['storage']['all']['values']['account'];
    $form['account'] = $form_state['field_group_ajaxified_multipage_complete_form']['account'];

    //Just for preventing user_account_form_validate from raising error.
    $form['account']['mail']['#parents'] = array('_field_group_ajaxified_multipage_user_account_form_validate');
  }

  $form_state['values']['mail'] = $form_state['values']['account']['mail'];
  $form_state['values']['name'] = $form_state['values']['account']['name'];

  return user_account_form_validate($form, $form_state);
}

/**
 * validate function for ajaxified form.
 *
 * In AJAX this is only submitted when the final submit button is clicked,
 * but in the non-javascript situation, it is submitted with every
 * button click.
 */
function _field_group_ajaxified_multipage_form_validate($form, &$form_state) {
  if (isset($form_state['node'])) {

    // Update node object based on submitted form values.
    entity_form_submit_build_entity('node', $form_state['node'], $form, $form_state);
  }
  if (@!isset($form_state['storage']['all']['values'])) {
    $form_state['storage']['all']['values'] = array();
  }
  if (@!isset($form_state['storage']['all']['input'])) {
    $form_state['storage']['all']['input'] = array();
  }
  $parents_reverse = array();
  if (isset($form_state['triggering_element'])) {
    $parents_reverse = array_reverse($form_state['triggering_element']['#parents']);
  }

  // Save away the current information.
  $current_step = 'step' . $form_state['storage']['field_group_ajaxified_multipage_step'];
  if (!empty($form_state['values'])) {
    $form_state['storage']['values'][$current_step] = $form_state['values'];
    $form_state['storage']['input'][$current_step] = $form_state['input'];

    $form_state['storage']['all']['values'] = array();
    $form_state['storage']['all']['input'] = array();
    foreach ($form_state['storage']['values'] as $__step_no => $__step_values) {
      $form_state['storage']['all']['values'] = array_merge($form_state['storage']['all']['values'], $form_state['storage']['values'][$__step_no]);
      $form_state['storage']['all']['input'] = array_merge($form_state['storage']['all']['input'], $form_state['storage']['input'][$__step_no]);
      if ($__step_no == $current_step) {
        break;
      }
    }
  }

  // Increment or decrement the step as needed. Recover values if they exist.
  if (!isset($parents_reverse[1])) {
    $parents_reverse[1] = '';
  }
  if ($parents_reverse[1] == 'actions' && ($parents_reverse[0] == 'next' || $parents_reverse[0] == 'skip')) {
    $form_state['storage']['field_group_ajaxified_multipage_step']++;

    // If values have already been entered for this step, recover them from
    // $form_state['storage'] to pre-populate them.
    $step_name = 'step' . $form_state['storage']['field_group_ajaxified_multipage_step'];
    if (!empty($form_state['storage']['values'][$step_name])) {
      $form_state['values'] = $form_state['storage']['values'][$step_name];
      $form_state['input'] = $form_state['storage']['input'][$step_name];
    }
  }

  // If they're done, submit.
  if ($parents_reverse[1] == 'actions' && ($parents_reverse[0] == 'submit')) {
    foreach ($form_state['storage']['values'] as $step => $values) {
      $form_state['values'] = array_merge($form_state['values'], $values);
    }
    $form_state['rebuild'] = FALSE;
    return;
  }

  // Otherwise, we still have work to do.
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit function for ajaxified form.
 *
 * In AJAX this is only submitted when the final submit button is clicked,
 * but in the non-javascript situation, it is submitted with every
 * button click.
 */
function _field_group_ajaxified_multipage_form_submit($form, &$form_state) {
  $parents_reverse = array();
  if (isset($form_state['triggering_element'])) {
    $parents_reverse = array_reverse($form_state['triggering_element']['#parents']);
  }
  if ($parents_reverse[1] == 'actions' && ($parents_reverse[0] == 'prev')) {

    /**
     * @todo : when going back to previous step , clear the current step values to start fresh
     *         when returning back. should be configurable
     */
    $form_state['storage']['field_group_ajaxified_multipage_step']--;

    // Recover our values from $form_state['storage'] to pre-populate them.
    $step_name = 'step' . $form_state['storage']['field_group_ajaxified_multipage_step'];
    $form_state['values'] = $form_state['storage']['all']['values'];
    $form_state['input'] = $form_state['storage']['input'][$step_name];
  }

  // If they're done, submit.
  if ($parents_reverse[1] == 'actions' && ($parents_reverse[0] == 'submit')) {
    foreach ($form_state['storage']['values'] as $step => $values) {
      $form_state['values'] = array_merge($form_state['values'], $values);
    }
    $form_state['rebuild'] = FALSE;
    return;
  }

  // Otherwise, we still have work to do.
  $form_state['rebuild'] = TRUE;
}

/**
 * Helper function to recursively go though and unset field_group elements and
 * their fields when they aren't visible to the current step.
 */
function _field_group_ajaxified_multipage_field_unset($children, &$form) {
  foreach ($children as $child_name) {
    // Child to step is a group it self.
    if (isset($form['#groups'][$child_name])) {
      // Walk down the tree of branched field_groups.
      _field_group_ajaxified_multipage_field_unset(
        $form['#groups'][$child_name]->children, $form);

      field_group_hide_field_groups($form, array(
        $child_name
      ));

    }
    else {
      // locale_field_node_form_submit() looks for field language
      // information in a hard-coded part of $form.
      // @todo Other modules may as well, so would be best to move form
      // elements within #pre_render rather than in hook_form_alter().
      $form[$child_name] = array('#language' => NULL);
    }
  }
}
