<?php

/**
 * @file
 * module defining dynamic views style plugins.
 */

function views_stylizer_menu() {
  $items = array();
  $items['views-stylize/%/%/%/%'] = array(
      'title' => 'My profile',
      'page callback' => 'views_stylizer_apply_pane',
      'page arguments' => array(1,2,3,4),
      'access arguments' => array('administer views'),
  );
  return $items;
}

function views_stylizer_apply_pane($view_id, $display_id, $pane_id, $redirect_path) {
  $subtype_query = "SELECT style_cid FROM {views_stylizer} WHERE view = :view AND view_display = :view_display LIMIT 1";
  $subtype = db_query($subtype_query, array(':view' => $view_id, ':view_display' => $display_id))->fetchField();
  //$subtype = "jquery_immersive_slider";
  if(!empty($subtype)){
    //update
    db_update('views_stylizer')
    ->fields(array(
    'style_cid' => $pane_id,
    ))
    ->condition('view', $view_id)
    ->condition('view_display', $display_id)
    ->execute();

  }else {
    db_insert('views_stylizer')
    ->fields(array(
    'view' => $view_id,
    'view_display' => $display_id,
    'style_cid' => $pane_id,
    ))
    ->execute();
  }
  $redirect_path = str_replace('#*', "/", $redirect_path);
  drupal_goto("admin/structure/dynamic-content/list/$pane_id", array('query'=> array("destination" => $redirect_path)));
  return "test";
}

/**
 * Implements hook_admin_paths().
 */
function views_stylizer_admin_paths() {
  $paths = array(
      'views-stylize/*/*/*/*' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_views_api()
 *
 * Returns what version of views you are using. Ex 7.3x would be 3
 */
function views_stylizer_views_api() {
  return array(
      'api' => 3,  // we are using views 3
  );
}

/**
 * Implements hook_theme_registry_alter().
 *
 * @TODO: Change for "template path" in hook_views_api() when
 * http://drupal.org/node/1267482 if fixed.
 */
function views_stylizer_theme_registry_alter(&$theme_registry) {
  $theme_registry['views_view_stylizer']['path'] = drupal_get_path('module', 'views_stylizer') . '/theme';
  // NOT WORKING
  // $theme_registry['views_view_table']['theme path'] = drupal_get_path('module', 'views_megarow') . '/theme';
}

/**
 * Implements hook_theme().
 */
function views_stylizer_theme() {
  return array(
      'views_stylizer_style_plugin_table' => array(
          'render element' => 'form',
      ),
  );
}

/**
 * Theme the form for the table style plugin
 */
function theme_views_stylizer_style_plugin_table($variables) {
  $form = $variables['form'];

  $output = drupal_render($form['description_markup']);

  $header = array(
      t('Field'),
      t('Field Type'),
  );
  $rows = array();
  foreach (element_children($form['columns']) as $id) {
    $row = array();
    $row[] = check_plain(drupal_render($form['info'][$id]['name']));
    $row[] = drupal_render($form['columns'][$id]);/*
    $row[] = drupal_render($form['info'][$id]['align']);
    $row[] = drupal_render($form['info'][$id]['separator']);
    if (!empty($form['info'][$id]['sortable'])) {
    $row[] = array(
        'data' => drupal_render($form['info'][$id]['sortable']),
        'align' => 'center',
    );
    $row[] = array(
        'data' => drupal_render($form['info'][$id]['default_sort_order']),
        'align' => 'center',
    );
    $row[] = array(
        'data' => drupal_render($form['default'][$id]),
        'align' => 'center',
    );
    }
    else {
    $row[] = '';
    $row[] = '';
    $row[] = '';
    }
    $row[] = array(
        'data' => drupal_render($form['info'][$id]['empty_column']),
        'align' => 'center',
    ); */
    $rows[] = $row;
  }

  // Add the special 'None' row.
  // $rows[] = array(t('None'), '', '', '', '', '', array('align' => 'center', 'data' => drupal_render($form['default'][-1])), '');

  $output .= theme('table', array('header' => $header, 'rows' => $rows));
  $output .= drupal_render_children($form);
  return $output;
}

function dynamic_fieldable_content_views_stylizer_blocks(&$vars) {
  $vars['links']['dynamic_fieldable_content'] = array(
      'title' => l(t('Dynamic content'), 'admin/structure/dynamic-content/add'),
      'description' => t('Custom content panes are basic HTML you enter that can be reused in all of your panels.'),
  );

  // Load all mini panels and their displays.
  ctools_include('export');
  $items = ctools_export_crud_load_all('dynamic_fieldable_content');
  $count = 0;
  $rows = array();
  $destination_path_arr = drupal_get_destination();
  $destination_path = str_replace('/', "#*", $destination_path_arr['destination']);$destination_path_arr['destination'];
  
  $subtype_query = "SELECT style_cid FROM {views_stylizer} WHERE view = :view AND view_display = :view_display LIMIT 1";
  $subtype = db_query($subtype_query, array(':view' => $vars['view']->name, ':view_display' => $vars['view']->current_display))->fetchField();
  //dsm($subtype); 

  foreach ($items as $item) {
    //don't show backups. ends with __1
    $pos = strrpos($item->name,"__");
    $version = substr($item->name,$pos+2);
    if($pos > 0 && is_numeric($version)){
      continue;
    }
    if($item->name == $subtype){
      $rows[] = array(
          check_plain($item->admin_title),
          array(
              'data' => l(t('Update'), "views-stylize/".$vars['view']->name."/".$vars['view']->current_display."/".$item->name."/".$destination_path),
              'class' => 'links',
          ),
      );
    }else{
      $rows[] = array(
          check_plain($item->admin_title),
          array(
              'data' => l(t('Apply'), "views-stylize/".$vars['view']->name."/".$vars['view']->current_display."/".$item->name."/".$destination_path),
              'class' => 'links',
          ),
      );
    }

    // Only show 10.
    if (++$count >= 40) {
      break;
    }
  }

  if ($rows) {
    $content = theme('table', array('rows' => $rows, 'attributes' => array('class' => 'panels-manage')));
  }
  else {
    $content = '<p>' . t('There are no custom content panes.') . '</p>';
  }

  $vars['blocks']['dynamic_fieldable_content'] = array(
      'title' => t('Manage dynamic content'),
      'link' => l(t('Go to list'), 'admin/structure/dynamic-content'),
      'content' => $content,
      'class' => 'dashboard-content',
      'section' => 'right',
  );
}

/**
 * Implementation of template_process for views-view-simple-timeline.tpl.php.
 */
function template_preprocess_views_view_stylizer(&$vars) {
  $view     = $vars['view'];
 // dsm($view);
  $options  = $view->style_plugin->options;
  //  dsm($vars['rows']);
  //$options['columns']
  $result   = $vars['result'] = $vars['rows'];
  $handler  = $view->style_plugin;
  $renders = $handler->render_fields($result);
  $fields   = &$view->field;
  $columns  = $handler->sanitize_columns($options['columns'], $fields);

//  dsm($columns);
  ctools_include('content');

  $type = "dynamic_content_pane";
  $subtype_query = "SELECT style_cid FROM {views_stylizer} WHERE view = :view AND view_display = :view_display LIMIT 1";
  $subtype = db_query($subtype_query, array(':view' => $view->name, ':view_display' => $view->current_display))->fetchField();
  //$subtype = "jquery_immersive_slider";
  $vars['blocks']['dynamic_fieldable_content']['content'] = "";
  if (user_access('administer views')) {
  dynamic_fieldable_content_views_stylizer_blocks($vars);
  }
  $vars['dynamic_content'] = "";
  if(!empty($subtype)){
    
    $conf = array(
        'admin_title' => '',
        'title' => '',
        'body' => '',
        'format' => filter_default_format(),
        'substitute' => TRUE,
    );
    $keywords = array();
    $contexts = array();
    $arguments = array();
   // $keywords['%node:schemaorg-image-2'] = "http://demo.commerce.technikh.com/sites/default/files/mug-1v2.jpg";
 //   $keywords['%node:schemaorg-image'] = "http://demo.commerce.technikh.com/sites/default/files/mug-1v1.jpg";


    // Build the content.
    $data = ctools_content_render($type, $subtype, $conf, $keywords, $arguments, $contexts);
    // Return content.
    //dsm($data);
    $repeat_content = $data->repeat_content;
    $full_repeat_content = "";
    $i = 0;
    foreach ($renders as $key => $values) {
     // dsm($values);
      //dsm($repeat_content);
      $repeat_content_with_counter = str_replace(':value:?', ":value:$i", $repeat_content);
      /*
       * %node:schemaorg-images:value:?
       * %node:schemaorg-images-thumbnail:value:?
       * %node:schemaorg-titles:value:?
       */
      foreach ($columns as $field_name => $schema_type) {
        if (strpos($schema_type,'-') !== false) {
          $repeat_content_with_counter = str_replace("%node:schemaorg-".$schema_type.":value:$i", $values[$field_name], $repeat_content_with_counter);
          $data->content = str_replace("%node:schemaorg-".$schema_type.":value:$i", $values[$field_name], $data->content);
        }else{
          $repeat_content_with_counter = str_replace("%node:schemaorg-".$schema_type."s:value:$i", $values[$field_name], $repeat_content_with_counter);
          $data->content = str_replace("%node:schemaorg-".$schema_type."s:value:$i", $values[$field_name], $data->content);
        }
      }
      //$repeat_content_with_counter = str_replace("[node:schemaorg-titles:value:$i]", $values['title'], $repeat_content_with_counter);
      // $repeat_content_with_counter = str_replace("[node:schemaorg-descriptions:value:$i]", $values['field_headline'], $repeat_content_with_counter);
      $full_repeat_content .= $repeat_content_with_counter;
      //[node:schemaorg-images:value:0]
      //$keywords['%node:schemaorg-images:value:'.$i] = $values['uri'];
      $i++;
    }
    //dsm($keywords);
    if (!empty($data->content)) {
      $content = '';
      if (is_array($data->content)) {
        $content .= drupal_render($data->content);
      }
      else {
        $content .= $data->content;
      }
      //dsm($content);
      $content = str_replace("#dynamic:RepeatCode#", $full_repeat_content, $content);
      $content = ctools_context_keyword_substitute($content, $keywords, $contexts);
      $vars['dynamic_content'] = $content;
    }
  }
  /*
   module_load_include('inc', 'dynamic_fieldable_content', 'plugins/content_types/dynamic_content_pane');
  $subtype = "jquery_twenty_twenty";
  $conf = array(
      'admin_title' => '',
      'title' => '',
      'body' => '',
      'format' => filter_default_format(),
      'substitute' => TRUE,
  );
  $vars['dynamic_content'] = dynamic_fieldable_content_type_render($subtype, $conf, $args, $contexts)->content;
  */
  $view     = $vars['view'];

  // We need the raw data for this grouping, which is passed in as $vars['rows'].
  // However, the template also needs to use for the rendered fields.  We
  // therefore swap the raw data out to a new variable and reset $vars['rows']
  // so that it can get rebuilt.
  // Store rows so that they may be used by further preprocess functions.
  $result   = $vars['result'] = $vars['rows'];
  $vars['rows'] = array();
  $vars['field_classes'] = array();
  $vars['header'] = array();

  $options  = $view->style_plugin->options;
  $handler  = $view->style_plugin;

  $default_row_class = isset($options['default_row_class']) ? $options['default_row_class'] : TRUE;
  $row_class_special = isset($options['row_class_special']) ? $options['row_class_special'] : TRUE;

  $fields   = &$view->field;
  $columns  = $handler->sanitize_columns($options['columns'], $fields);

  $active   = !empty($handler->active) ? $handler->active : '';
  $order    = !empty($handler->order) ? $handler->order : 'asc';

  $query    = tablesort_get_query_parameters();
  if (isset($view->exposed_raw_input)) {
    $query += $view->exposed_raw_input;
  }

  // Fields must be rendered in order as of Views 2.3, so we will pre-render
  // everything.
  $renders = $handler->render_fields($result);
 // dsm($renders);

  foreach ($columns as $field => $column) {
    // Create a second variable so we can easily find what fields we have and what the
    // CSS classes should be.
    $vars['fields'][$field] = drupal_clean_css_identifier($field);
    if ($active == $field) {
      $vars['fields'][$field] .= ' active';
    }

    // render the header labels
    if ($field == $column && empty($fields[$field]->options['exclude'])) {
      $label = check_plain(!empty($fields[$field]) ? $fields[$field]->label() : '');
      if (empty($options['info'][$field]['sortable']) || !$fields[$field]->click_sortable()) {
        $vars['header'][$field] = $label;
      }
      else {
        $initial = !empty($options['info'][$field]['default_sort_order']) ? $options['info'][$field]['default_sort_order'] : 'asc';

        if ($active == $field) {
          $initial = ($order == 'asc') ? 'desc' : 'asc';
        }

        $title = t('sort by @s', array('@s' => $label));
        if ($active == $field) {
          $label .= theme('tablesort_indicator', array('style' => $initial));
        }

        $query['order'] = $field;
        $query['sort'] = $initial;
        $link_options = array(
            'html' => TRUE,
            'attributes' => array('title' => $title),
            'query' => $query,
        );
        $vars['header'][$field] = l($label, $_GET['q'], $link_options);
      }

      $vars['header_classes'][$field] = '';
      // Set up the header label class.
      if ($fields[$field]->options['element_default_classes']) {
        $vars['header_classes'][$field] .= "views-field views-field-" . $vars['fields'][$field];
      }
      $class = $fields[$field]->element_label_classes(0);
      if ($class) {
        if ($vars['header_classes'][$field]) {
          $vars['header_classes'][$field] .= ' ';
        }
        $vars['header_classes'][$field] .= $class;
      }
      // Add a CSS align class to each field if one was set
      if (!empty($options['info'][$field]['align'])) {
        $vars['header_classes'][$field] .= ' ' . drupal_clean_css_identifier($options['info'][$field]['align']);
      }

      // Add a header label wrapper if one was selected.
      if ($vars['header'][$field]) {
        $element_label_type = $fields[$field]->element_label_type(TRUE, TRUE);
        if ($element_label_type) {
          $vars['header'][$field] = '<' . $element_label_type . '>' . $vars['header'][$field] . '</' . $element_label_type . '>';
        }
      }

    }

    // Add a CSS align class to each field if one was set
    if (!empty($options['info'][$field]['align'])) {
      $vars['fields'][$field] .= ' ' . drupal_clean_css_identifier($options['info'][$field]['align']);
    }

    // Render each field into its appropriate column.
    foreach ($result as $num => $row) {
      // Add field classes
      $vars['field_classes'][$field][$num] = '';
      if ($fields[$field]->options['element_default_classes']) {
        $vars['field_classes'][$field][$num] = "views-field views-field-" . $vars['fields'][$field];
      }
      if ($classes = $fields[$field]->element_classes($num)) {
        if ($vars['field_classes'][$field][$num]) {
          $vars['field_classes'][$field][$num] .= ' ';
        }

        $vars['field_classes'][$field][$num] .= $classes;
      }
      $vars['field_attributes'][$field][$num] = array();

      if (!empty($fields[$field]) && empty($fields[$field]->options['exclude'])) {
        $field_output = $renders[$num][$field];
        $element_type = $fields[$field]->element_type(TRUE, TRUE);
        if ($element_type) {
          $field_output = '<' . $element_type . '>' . $field_output . '</' . $element_type . '>';
        }

        // Don't bother with separators and stuff if the field does not show up.
        if (empty($field_output) && !empty($vars['rows'][$num][$column])) {
          continue;
        }

        // Place the field into the column, along with an optional separator.
        if (!empty($vars['rows'][$num][$column])) {
          if (!empty($options['info'][$column]['separator'])) {
            $vars['rows'][$num][$column] .= filter_xss_admin($options['info'][$column]['separator']);
          }
        }
        else {
          $vars['rows'][$num][$column] = '';
        }

        $vars['rows'][$num][$column] .= $field_output;
      }
    }

    // Remove columns if the option is hide empty column is checked and the field is not empty.
    if (!empty($options['info'][$field]['empty_column'])) {
      $empty = TRUE;
      foreach ($vars['rows'] as $num => $columns) {
        $empty &= empty($columns[$column]);
      }
      if ($empty) {
        foreach ($vars['rows'] as $num => &$column_items) {
          unset($column_items[$column]);
          unset($vars['header'][$column]);
        }
      }
    }
  }

  // Hide table header if all labels are empty.
  if (!array_filter($vars['header'])) {
    $vars['header'] = array();
  }

  $count = 0;
  foreach ($vars['rows'] as $num => $row) {
    $vars['row_classes'][$num] = array();
    if ($row_class_special) {
      $vars['row_classes'][$num][] = ($count++ % 2 == 0) ? 'odd' : 'even';
    }
    if ($row_class = $handler->get_row_class($num)) {
      $vars['row_classes'][$num][] = $row_class;
    }
  }

  if ($row_class_special) {
    $vars['row_classes'][0][] = 'views-row-first';
    $vars['row_classes'][count($vars['row_classes']) - 1][] = 'views-row-last';
  }

  $vars['classes_array'] = array('views-table');
  if (empty($vars['rows']) && !empty($options['empty_table'])) {
    $vars['rows'][0][0] = $view->display_handler->render_area('empty');
    // Calculate the amounts of rows with output.
    $vars['field_attributes'][0][0]['colspan'] = count($vars['header']);
    $vars['field_classes'][0][0] = 'views-empty';
  }


  if (!empty($options['sticky'])) {
    drupal_add_js('misc/tableheader.js');
    $vars['classes_array'][] = "sticky-enabled";
  }
  $vars['classes_array'][] = 'cols-'. count($vars['header']);

  // Add the summary to the list if set.
  if (!empty($handler->options['summary'])) {
    $vars['attributes_array'] = array('summary' => filter_xss_admin($handler->options['summary']));
  }

  // Add the caption to the list if set.
  if (!empty($handler->options['caption'])) {
    $vars['caption'] = filter_xss_admin($handler->options['caption']);
  }
  else {
    $vars['caption'] = '';
  }
}

