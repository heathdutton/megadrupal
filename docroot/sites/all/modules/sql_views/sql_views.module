<?php

/**
 * @file
 * Primary module functions for sql_views module.
 */

/**
 * Implements hook_menu().
 *
 * These reports can contain sensitive information so we check here more strict
 * permission 'administer site configuration' instead of 'view site reports'.
 */
function sql_views_menu() {

  $items['admin/reports/sql_views'] = array(
    'title' => 'SQL Views',
    'description' => 'SQL Views overview.',
    'page callback' => 'sql_views_overview_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'sql_views.admin.inc',
  );

  $items['admin/reports/sql_views/%/definition'] = array(
    'title' => 'Definition',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/reports/sql_views/%sql_views_view'] = array(
    'title' => 'Definition',
    'description' => 'View definition',
    'page callback' => 'sql_views_view_definition_page',
    'page arguments' => array(3),
    'access arguments' => array('administer site configuration'),
    'file' => 'sql_views.admin.inc',
  );

  $items['admin/reports/sql_views/%sql_views_view/description'] = array(
    'title' => 'Description',
    'description' => 'View definition',
    'page callback' => 'sql_views_view_description_page',
    'page arguments' => array(3),
    'access arguments' => array('administer site configuration'),
    'file' => 'sql_views.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/reports/sql_views/%sql_views_view/records'] = array(
    'title' => 'Records',
    'description' => 'View records',
    'page callback' => 'sql_views_view_records_page',
    'page arguments' => array(3),
    'access arguments' => array('administer site configuration'),
    'file' => 'sql_views.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Creates new view.
 *
 * @param string $view
 *   View name.
 * @param SelectQuery $query
 *   Select query object.
 */
function sql_views_view_create($view, SelectQuery $query) {
  // @TODO: Check how it works across all database drivers.
  $query_string = "CREATE OR REPLACE VIEW $view AS $query";
  db_query($query_string, $query->getArguments());
}

/**
 * Removes a given view from database.
 *
 * @param string $view
 *   View name.
 */
function sql_views_view_drop($view) {
  db_table_exists($view) && db_query("DROP VIEW $view");
}

/**
 * Loads view.
 *
 * @param string $view
 *   The name of the view.
 *
 * @return string|bool
 *   View name if the view exists, FALSE otherwise.
 */
function sql_views_view_load($view) {
  $view = Database::getConnection()->escapeTable($view);
  return db_table_exists($view) ? $view : FALSE;
}

/**
 * Returns the name of default database.
 */
function sql_views_database_name() {
  $connection_info = Database::getConnectionInfo();
  // @TODO: Check it on multisite installation.
  return $connection_info['default']['database'];
}

/**
 * Implements hook_flush_caches().
 */
function sql_views_flush_caches() {
  $sql_views = sql_views_get_sql_views();
  foreach ($sql_views as $sql_view_name => $sql_view_definition) {
    sql_views_view_create($sql_view_name, $sql_view_definition['query']);
  }
  return array();
}

/**
 * Implements hook_views_data_alter().
 */
function sql_views_views_data_alter(&$data) {

  $sql_views = sql_views_get_sql_views();
  foreach ($sql_views as $sql_view_name => $sql_view_definition) {

    /** @var SelectQuery $query */
    $query = $sql_view_definition['query'];

    $human_name = t(
      '!human_name (SQL View)',
      array('!human_name' => $sql_view_definition['human_name'])
    );
    $description = $sql_view_definition['description'];

    if (isset($sql_view_definition['field_types'])) {
      $field_types = $sql_view_definition['field_types'];
    }
    else {
      $field_types = array();
    }

    $data[$sql_view_name]['table']['group'] = t('!title', array('!title' => $human_name));
    $data[$sql_view_name]['table']['base'] = array(
      'title' => $human_name,
      'help' => $description,
    );

    $tables = $query->getTables();
    foreach ($query->getFields() as $field_name => $field) {
      // Find views definition from original field if possible.
      $table_name = $tables[$field['table']]['table'];
      if (isset($data[$table_name][$field_name])) {

        $data[$sql_view_name][$field_name] = $data[$table_name][$field_name];

        // A relationship to the original table.
        if (!empty($data[$table_name]['table']['group'])) {
          $direct_relation_title = $data[$table_name]['table']['group'];
        }
        else {
          $direct_relation_title = $table_name;
        }
        $direct_relation_help = t(
          'Relate %table_name using %field_name field.',
          array('%table_name' => $table_name, '%field_name' => $field_name)
        );
        $data[$sql_view_name][$table_name . '_' . $field_name]['relationship'] = array(
          'title' => $direct_relation_title,
          'help' => $direct_relation_help,
          'handler' => 'views_handler_relationship',
          'relationship field' => $field_name,
          'outer field' => $sql_view_name . '.' . $field_name,
          'argument table' => $sql_view_name,
          'argument field' => $field_name,
          'field' => $field_name,
          'base field' => $field_name,
          'base' => $table_name,
        );

        // A relationship from the original table.
        $reverse_relation_help = t(
          'Relate %view_name using %field_name field.',
          array('%view_name' => $human_name, '%field_name' => $field_name)
        );
        $data[$table_name][$field_name . '_' . $table_name]['relationship'] = array(
          'title' => $human_name,
          'help' => $reverse_relation_help,
          'handler' => 'views_handler_relationship',
          'relationship field' => $field_name,
          'outer field' => $table_name . '.' . $field_name,
          'argument table' => $table_name,
          'argument field' => $field_name,
          'field' => $field_name,
          'base field' => $field_name,
          'base' => $sql_view_name,
        );

      }
      else {
        $field_type = isset($field_types[$field_name]) ? $field_types[$field_name] : 'string';
        $data[$sql_view_name][$field_name] = sql_views_build_view_data($field_type);
        $data[$sql_view_name][$field_name]['title'] = $field_name;
        $data[$sql_view_name][$field_name]['help'] = t('!field_name field.', array('!field_name' => $field_name));
      }
    }

    foreach ($query->getExpressions() as $expression) {
      $alias = $expression['alias'];
      $field_type = isset($field_types[$alias]) ? $field_types[$alias] : 'string';
      $data[$sql_view_name][$alias] = sql_views_build_view_data($field_type);
      $data[$sql_view_name][$alias]['title'] = $alias;
      $data[$sql_view_name][$alias]['help'] = t('!alias field', array('!alias' => $alias));
    }

  }

}

/**
 * Returns all defined sql_views.
 */
function sql_views_get_sql_views() {
  // The hook implementations may live in install files.
  module_load_all_includes('install');

  $sql_views = array();
  foreach (module_implements('sql_views') as $module) {
    $sql_views += module_invoke($module, 'sql_views');
  }
  // Allow modules to modify the SQL Views.
  drupal_alter('sql_views', $sql_views);
  return $sql_views;
}

/**
 * Build views data.
 *
 * @param string $field_type
 *   The following values are possible:
 *   string, numeric, float, boolean, date.
 *
 * @return array
 *   An associative array describing the data structure.
 *
 * @see hook_views_data()
 * @see hook_views_data_alter()
 */
function sql_views_build_view_data($field_type) {

  $data['string'] = array(
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
  );

  $data['numeric'] = array(
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
  );

  $data['float'] = $data['numeric'];
  $data['float']['field']['float'] = TRUE;;

  $data['boolean'] = array(
    'field' => array(
      'handler' => 'views_handler_field_boolean',
      'click sortable' => TRUE,
      'output formats' => array(
        'yes-no' => array(t('Yes'), t('No')),
      ),
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_boolean_operator',
      'type' => 'yes-no',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  $data['date'] = array(
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
  );

  return $data[$field_type];
}
