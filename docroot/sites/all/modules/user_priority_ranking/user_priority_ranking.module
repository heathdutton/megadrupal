<?php
/**
 * @file
 * User Priority Ranking module
 *
 * Intended for the following use case: You want to order a view based on
 * input you recieve back from users.  These are items that the user is
 * interested in. You want the user to rank their interests.
 */

/**
 * Implements hook_schema_alter().
 *
 * @param array $schema
 *   The system-wide schema collected by drupal_get_schema().
 */
function user_priority_ranking_schema_alter(&$schema) {
  // Add a field to the existing flags table (Flag module).
  $schema['flag_content']['fields']['priority'] = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'unsigned' => FALSE,
    'description' => t('Rank value to prioritize flag .'),
  );
  /* Remove for now.  All Flags will be prioritized.
  // Add a field to the existing flags table (Flag module).
  $schema['flags']['fields']['prioritize'] = array(
    'type' => 'bool',
    'not null' => TRUE,
    'default' => 0,
    'unsigned' => TRUE,
    'description' => t('Flag can be prioritized.'),
  );
  */
}
/**
 * Update the priority of an existing flagged item.
 *
 * @param integer $fid
 *   Flag id.
 * @param string $content_type
 *   Content type of flag
 *   country.
 * @param integer $content_id
 *   Content id (ie nid).
 * @param integer $uid
 *   User id.  0 if global flag.
 * @param integer $rank
 *   rank of the flag.
 * @param integer $limit
 *   flag limit.
 */
function user_priority_ranking_set_priority($fid, $content_type, $content_id, $uid, $rank, $limit = 10) {

  // Save the inversed value of the rank offsetted by the flag limit.
  db_update('flag_content')
  ->fields(array(
    'priority' => ($limit - $rank),
  ))
  ->condition('fid', $fid)
  ->condition('content_type', $content_type)
  ->condition('content_id', $content_id)
  ->condition('uid', $uid)
  ->execute();
}
/**
 * Get the priority of an existing flagged item.
 *
 * @param integer $fid
 *   Flag id.
 * @param string $content_type
 *   Content type of flag
 *   country.
 * @param integer $content_id
 *   Content id (ie nid).
 * @param integer $uid
 *   User id.  0 if global flag.
 *
 * @return int
 *   priority value
 */
function _user_priority_ranking_get_priority($fid, $content_type, $content_id, $uid) {
  return db_select('flag_content', 'fc')
           ->fields('fc', array('priority'))
           ->condition('fc.fid', $fid)
           ->condition('fc.content_type', $content_type)
           ->condition('fc.content_id', $content_id)
           ->condition('fc.uid', $uid)
           ->execute()
           ->fetchField();
}

/**
 * Get the priorities of a specific flag.
 *
 * @param integer $fid
 *   Flag id.
 * @param string $content_type
 *   Content type of flag
 *   country.
 * @param integer $content_id
 *   Content id (ie nid).
 * @param integer $uid
 *   User id.  0 if global flag.
 *
 * @return object
 *   Database object containing all of the fields
 */
function _user_priority_ranking_get_priorities($fid, $content_type, $content_id, $uid = 0) {
  return db_select('flag_content', 'fc')
  ->fields('fc')
  ->condition('fc.fid', $fid)
  ->condition('fc.content_type', $content_type)
  ->condition('fc.uid', $uid)
  ->orderBy('fc.priority', 'DESC')
  ->execute();
}
/**
 * Implements hook_views_data().
 *
 * Provide a field that can be used to sort a view.
 */
function user_priority_ranking_views_data() {
  $data = array();

  $data['flag_content']['priority'] = array(
    'title' => t('Priority'),
    'help' => t('Used for sorting the list of flagged items by their priority.'),
    'real field' => 'priority',
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_user_priority_ranking',
    ),
  );

  return $data;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function user_priority_ranking_ctools_plugin_directory($module, $plugin) {
  if (($module == 'draggableviews') && ($plugin == 'handler')) {
    return 'handlers';
  }
}

/**
 * Custom sort function for sorting priorites on weight.
 * Used by uasort() function
 *
 * @param array $a
 *   result values of A
 * @param array $b
 *   result values of B
 *
 * @return integer
 *   compare A and B and return -1||0||1
 */
function _sort_user_priority_ranking($a, $b) {
  if ($a['weight'] == $b['weight']) {
    return 0;
  }
  return ($a['weight'] < $b['weight']) ? -1 : 1;
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Add the checkbox to the Flags edit page.
 */
function user_priority_ranking_form_flag_form_alter(&$form, &$form_state) {
  /* Remove for now.  All Flags will be prioritized.
  $prioritize = _user_priority_ranking_get_prioritize($form['#flag']->fid);

  $form['prioritize'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow the flag to be prioritized'),
    '#default_value' => $prioritize,
    '#description' => t('If checked, flagged entities can be prioritized.'),
    '#required' => FALSE,
    '#weight' => 0,
  );
  */
}

/**
 * Check to see if the flag is being prioritized
 *
 * @param integer $fid
 *   Flag id
 *
 * @return boolean
 *   'Prioritize' value (0||1)
 */
function _user_priority_ranking_get_prioritize($fid) {
  /* Remove for now.  All Flags will be prioritized.
  return db_query("SELECT prioritize FROM {flags} WHERE fid = :fid", array(':fid' => $fid))->fetchField();
  */
}

/**
 * Save the prioritized value to the flag
 *
 * @param integer $fid
 *   Flag id
 * @param integer $prioritize
 *   Prioritized value (0||1)
 */
function _user_priority_ranking_set_prioritize($fid, $prioritize) {
  /* Remove for now.  All Flags will be prioritized.
  db_update('flags')
  ->fields(array(
  'prioritize' => $prioritize,
  ))
  ->condition('fid', $fid)
  ->execute();
  */
}

/**
 * Implements hook_flag().
 *
 * When content has been flagged, update the priority value(s).
 */
function user_priority_ranking_flag($action, $flag, $content_id, $account, $fcid = NULL) {

  if ($action == 'flag') {
    // Determines how many flags have been flagged.
    $query = "SELECT * FROM {flag_content} WHERE fid = :fid AND uid IN(:uid, 0)";
    $result = db_query($query, array(':fid' => $flag->fid, ':uid' => $account->uid))
             ->rowCount();
    $limit = variable_get('flag_limit_' . $flag->name . '_value', FALSE);
    // Set the priority.
    user_priority_ranking_set_priority($flag->fid, $flag->content_type, $content_id, $account->uid, (--$result), $limit);
  }
  elseif ($action == 'unflag') {
    // Get the unflagged priority value.
    /*
     * Cannot get priority.  The flag has already been deleted.
     * @TODO maybe there is a way to do this before it gets deleted.
     * May have to wait until Flag 7.x-3.x, when flags are fieldable

    $unflagged_priority = _user_priority_ranking_get_priority($flag->fid, $flag->content_type, $content_id, $account->uid);
    foreach ($result as $record) {
      echo($record);
    }
    db_update('flag_content')
             ->expression('priority', 'priority - :unflagged', array(':unflagged'=> $unflagged_priority))
             ->condition('priority', $unflagged_priority, '<')
             ->execute();
     */
    // Reorder the priorities that are left.
    $results = _user_priority_ranking_get_priorities($flag->fid, $flag->content_type, $content_id, $account->uid);
    $index = 0;
    $limit = variable_get('flag_limit_' . $flag->name . '_value', FALSE);
    foreach ($results as $row) {
      // Set the priority.
      user_priority_ranking_set_priority($row->fid, $row->content_type, $row->content_id, $row->uid, $index++, $limit);
    }
  }
}
