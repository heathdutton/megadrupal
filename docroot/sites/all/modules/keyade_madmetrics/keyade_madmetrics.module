<?php

/**
 * @file
 * Drupal Module: Keyade Madmetrics.
 */

define('KEYADE_MADMETRICS_API_URL', 'https://k.keyade.com/kaev/1/');

/**
 * Implements hook_permission().
 */
function keyade_madmetrics_permission() {
  return array(
    'administer keyade madmetrics' => array(
      'title' => t('Administer Keyade Madmetrics'),
      'description' => t('Perform maintenance tasks for Keyade Madmetrics.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function keyade_madmetrics_menu() {
  $items = array();

  $items['admin/config/system/keyade_madmetrics'] = array(
    'title' => 'Keyade Madmetrics',
    'description' => 'Configure Keyade Madmetrics tracking behavior.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('keyade_madmetrics_admin_settings_form'),
    'access arguments' => array('administer keyade madmetrics'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'keyade_madmetrics.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_user_insert().
 */
function keyade_madmetrics_user_insert(&$edit, $account, $category) {
  if (($pc_id = variable_get('keyade_madmetrics_pc_id')) && isset($_COOKIE['K_' . $pc_id])) {
    $_SESSION['keyade_madmetrics'] = 'user_register:' . $account->uid;
  }
}

/**
 * Implements hook_commerce_checkout_complete().
 */
function keyade_madmetrics_commerce_checkout_complete($order) {
  if (($pc_id = variable_get('keyade_madmetrics_pc_id')) && isset($_COOKIE['K_' . $pc_id])) {
    $_SESSION['keyade_madmetrics'] = 'checkout_complete:' . $order->order_id;
  }
}

/**
 * Implements hook_page_alter().
 */
function keyade_madmetrics_page_alter(&$page) {
  if (isset($_SESSION['keyade_madmetrics']) && variable_get('keyade_madmetrics_pc_id')) {
    list($tag, $entity_id) = explode(':', $_SESSION['keyade_madmetrics']);
    unset($_SESSION['keyade_madmetrics']);

    $callback = 'keyade_madmetrics_tag_' . $tag;
    $page['content']['keyade_madmetrics'] = array(
      '#markup' => call_user_func($callback, $entity_id),
    );
  }
}

/**
 * Generates Keyade Madmetrics user registration tag.
 *
 * @param int $uid
 *   ID of the user to generate the registration tag for.
 *
 * @return string
 *   The Keyade Madmetrics user registration tag.
 */
function keyade_madmetrics_tag_user_register($uid) {
  $pc_id = variable_get('keyade_madmetrics_pc_id');
  $account = user_load($uid);

  // Add Data Layer variables for Google Tag Manager.
  $datalayer_variables = array(
    'clickId' => $_COOKIE['K_' . $pc_id],
    'userId' => $uid,
    'userName' => $account->name,
    'userEmail' => $account->mail,
    'userPathAlias' => drupal_get_path_alias('user/' . $uid),
  );
  keyade_madmetrics_generate_datalayer('user_register', $datalayer_variables);

  // Generate Keyade Madmetrics user registration image tag.
  $params = array(
    'kaPcId' => $pc_id,
    'kaEvId' => 39669,
    'kaClkId' => $_COOKIE['K_' . $pc_id],
    'kaEvMcId' => $uid,
    'kaEvCt1' => 1,
    'kaEvSt' => 'confirmed',
    'kaEvAcId' => 0,
  );
  return keyade_madmetrics_generate_tag($params);
}

/**
 * Generates Keyade Madmetrics newsletter signup tag.
 *
 * @param int $uid
 *   ID of the user to generate the newsletter signup tag for.
 *
 * @return string
 *   The Keyade Madmetrics newsletter signup tag.
 */
function keyade_madmetrics_tag_newsletter_signup($uid) {
  $pc_id = variable_get('keyade_madmetrics_pc_id');
  $account = user_load($uid);

  // Add Data Layer variables for Google Tag Manager.
  $datalayer_variables = array(
    'clickId' => $_COOKIE['K_' . $pc_id],
    'userId' => $uid,
    'userEmail' => $account->mail,
  );
  keyade_madmetrics_generate_datalayer('newsletter_signup', $datalayer_variables);

  // Generate Keyade Madmetrics newsletter signup image tag.
  $params = array(
    'kaPcId' => $pc_id,
    'kaEvId' => 82384,
    'kaClkId' => $_COOKIE['K_' . $pc_id],
    'kaEvMcId' => $uid,
    'kaEvCt1' => 1,
    'kaEvSt' => 'confirmed',
    'kaEvAcId' => 0,
  );
  return keyade_madmetrics_generate_tag($params);
}

/**
 * Generates Keyade Madmetrics purchase tag.
 *
 * @param int $order_id
 *   Order ID to generate the purchase tag for.
 *
 * @return string
 *   The Keyade Madmetrics purchase tag.
 */
function keyade_madmetrics_tag_checkout_complete($order_id) {
  $pc_id = variable_get('keyade_madmetrics_pc_id');

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order_id);
  $order_total = $order_wrapper->commerce_order_total->value();

  // We need total amounts separately for products and for shipping.
  $shipping_total = $product_total = array(
    'amount' => 0,
    'currency_code' => $order_total['currency_code'],
    'data' => array(),
  );
  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    $component_total = commerce_price_component_total($line_item_wrapper->commerce_total->value());
    if (in_array($line_item_wrapper->type->value(), array('shipping'))) {
      // Add the totals.
      $shipping_total['amount'] += commerce_currency_convert(
        $component_total['amount'],
        $component_total['currency_code'],
        $order_total['currency_code']
      );

      // Combine the line item total's component prices into the order total.
      $shipping_total['data'] = commerce_price_components_combine($shipping_total, $line_item_wrapper->commerce_total->value());
    }
    else {
      // Add the totals.
      $product_total['amount'] += commerce_currency_convert(
        $component_total['amount'],
        $component_total['currency_code'],
        $order_total['currency_code']
      );

      // Combine the line item total's component prices into the order total.
      $product_total['data'] = commerce_price_components_combine($product_total, $line_item_wrapper->commerce_total->value());
    }
  }

  // We need product total net amount as well.
  $product_tax_total = commerce_tax_total_amount($product_total['data']['components'], TRUE, $product_total['currency_code']);

  $products_net_amount = number_format(commerce_currency_amount_to_decimal($product_total['amount'] - $product_tax_total, $product_total['currency_code']), 2, '.', '');
  $products_gross_amount = number_format(commerce_currency_amount_to_decimal($product_total['amount'], $product_total['currency_code']), 2, '.', '');
  $shipping_amount = number_format(commerce_currency_amount_to_decimal($shipping_total['amount'], $shipping_total['currency_code']), 2, '.', '');

  // Add Data Layer variables for Google Tag Manager.
  $datalayer_variables = array(
    'clickId' => $_COOKIE['K_' . $pc_id],
    'orderId' => $order_wrapper->order_id->value(),
    'orderNumber' => $order_wrapper->order_number->value(),
    'userId' => $order_wrapper->uid->value(),
    'amountNet' => $products_net_amount,
    'amountGross' => $products_gross_amount,
    'amountShipping' => $shipping_amount,
    'currencyCode' => $order_total['currency_code'],
  );
  keyade_madmetrics_generate_datalayer('checkout_complete', $datalayer_variables);

  // Generate Keyade Madmetrics user registration image tag.
  $params = array(
    'kaPcId' => $pc_id,
    'kaEvId' => 10853,
    'kaClkId' => $_COOKIE['K_' . $pc_id],
    'kaEvMcId' => $order_wrapper->order_number->value(),
    'kaEvCt1' => 1,
    'kaEvVal1' => $products_net_amount,
    'kaEvVal2' => $products_gross_amount,
    'kaEvVal3' => $shipping_amount,
    'kaEvCur' => $order_total['currency_code'],
    'kaEvSt' => 'confirmed',
    'kaEvAcId' => 0,
  );
  return keyade_madmetrics_generate_tag($params);
}

/**
 * Generates output for the Keyade Madmetrics image tag from passed parameters.
 *
 * @param array $params
 *
 * @return string
 *   The Keyade Madmetrics image tag.
 *
 * @see keyade_madmetrics_tag_user_register()
 * @see keyade_madmetrics_tag_checkout_complete()
 */
function keyade_madmetrics_generate_tag($params) {
  $variables = array(
    'path' => KEYADE_MADMETRICS_API_URL . '?' . http_build_query($params),
    'width' => 2,
    'height' => 2,
  );
  return theme('image', $variables);
}

/**
 * Generates output for the Data Layer variables for Google Tag Manager.
 *
 * @param array $variables
 *   An array of variables to be converted for Data Layer.
 *
 * @see keyade_madmetrics_tag_user_register()
 * @see keyade_madmetrics_tag_checkout_complete()
 */
function keyade_madmetrics_generate_datalayer($event, $variables) {
  // Allow other modules to alter Data Layer variables.
  drupal_alter('keyade_madmetrics_generate_datalayer', $variables, $event);

  $output = !empty($variables) ? drupal_json_encode($variables) : '';
  $render = array(
    '#type' => 'html_tag',
    '#tag' => 'script',
    // Do not overwrite potentially already existing Data Layer variables.
    '#value' => 'var dataLayer = dataLayer || []; dataLayer.push(' . $output . ');',
    '#attributes' => array(
      'type' => 'text/javascript',
    ),
  );
  drupal_add_html_head($render, 'keyade_madmetrics_datalayer');
}
