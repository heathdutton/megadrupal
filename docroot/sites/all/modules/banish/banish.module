<?php

/**
 * Implements hook_system_info_alter().
 */
function banish_system_info_alter(&$info, &$project, &$type) {

  $banished = banish_get_banished();

  if (isset($banished[$type]) && in_array($project->name, $banished[$type])) {
    // Doesn't work to unset it because we only unset the local reference
    // In a perfect world, there would an additional check for disabled
    // modules after the alter in _system_rebuild_module_data().
    // unset($module, $info, $type );

    // This gives errors on registry rebuild because it's missing filename.
    //$project = new stdClass();

    // Same issue with this and array();
    //$project = null;

    // Hidden only hides the module from the UI, but it can still be enabled via code / drush.
    $info['hidden'] = true;

    // This is effective, but if the module is already enabled it doesn't disable and if
    // drush is used it actually tried to download this module from drupal.org.
    // $info['dependencies'][] = 'this_module_has_been_banished';

    // Also effective, but doesn't actually disable modules. Also gives unclean messages like
    // "This version is not compatible with Drupal 7.x and should be replaced." in the module UI
    $info['core'] = "this_module_has_been_banished";
    if ($type = 'module') {
      $info['package'] = "Banished";
    }
  }
}

/**
 * Fetch the banished items from all the info files.
 *
 * @return array banished items
 */
function banish_get_banished() {
  $banish= &drupal_static(__FUNCTION__);

  if (isset($banish)) {
    return $banish;
  }

  // cache_get returns false when no cache is found.
  if ($cache = cache_get('banish')) {
    $banish = $cache->data;
  }
  else{
    $info_array = system_get_info('module');
    $banish_arrays = array();
    foreach ($info_array as $module => $info) {
      if (isset($info['banish'])) {
        $banish_arrays[] = $info['banish'];
      }
    }
    // Merge all of the various arrays together.
    $banish = drupal_array_merge_deep_array($banish_arrays);
    cache_set('banish', $banish);
  }
  return $banish;
}

/**
 * Implements hook_boot().
 */
function banish_boot() {
  drupal_register_shutdown_function('_banish_disable_projects');
}

/**
 * Disable any banished items that are enabled.
 */
function _banish_disable_projects() {
  if ($banished = banish_get_banished()) {

    // Disable and uninstall modules.
    if (isset($banished['module'])) {
      $enabled_modules = module_list();
      foreach ($banished['module'] as $module) {
        if (in_array($module, $enabled_modules)) {
          // TODO: Handle situations with module dependencies that are
          // not banished, or maybe just set a 'conflict' state?.
          module_disable(array($module));
          $result = drupal_uninstall_modules(array($module));
          watchdog('banish', "%name module disabled and uninstalled by banish.", array('%name' => $module));
        }
      }
    }

    // Disable themes.
    if (isset($banished['theme'])) {
      $enabled_themes = list_themes();
      foreach ($banished['theme'] as $theme) {
        if (in_array($theme, $enabled_themes)) {
          // Note that theme_disable() helpfully prevents disabling the default theme.
          theme_disable(array($theme));
          watchdog('banish', "%name theme disabled by banish.", array('%name' => $theme));
        }
      }
    }
  }
}

/**
 * Implements hook_menu_alter().
 */
function banish_menu_alter(&$items) {
  $banished = banish_get_banished();

  if(isset($banished['menu']) && is_array($banished['menu'])) {
    foreach($banished['menu'] as $menu_item) {
      if (isset($items[$menu_item])) {
        unset($items[$menu_item]);
      }
    }
  }
}
