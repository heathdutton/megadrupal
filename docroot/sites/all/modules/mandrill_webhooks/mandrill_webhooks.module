<?php

/**
 * @file
 * Enables Drupal to receive data from Mandrill and exposes a hook to save it.
 */

include_once libraries_get_path('mandrill') . '/src/Mandrill.php';
include_once drupal_get_path('module', 'mandrill') . '/lib/mandrill.inc';

define('MANDRILL_WEBHOOKS_HOOK_NAME', 'mandrill_webhook');
define('MANDRILL_WEBHOOKS_ENDPOINT', 'mandrill/webhooks_endpoint');
define('MANDRILL_WEBHOOKS_TOKEN', 'MandrillWebhooksToken');
define('MANDRILL_WEBHOOKS_VARIABLE', 'mandrill_webhooks');

/**
 * Implements hook_menu().
 */
function mandrill_webhooks_menu() {
  $items = array();
  $items['mandrill/webhooks_endpoint/%'] = array(
    'title' => 'Mandrill Webhooks Endpoint',
    'description' => 'Callback to receive Mandrill emails report data',
    'page callback' => 'mandrill_webhooks_receive',
    'access callback' => 'mandrill_webhooks_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/services/mandrill/webhooks'] = array(
    'title' => 'Mandrill Webhooks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mandrill_webhooks_config_form'),
    'access callback' => 'mandrill_webhooks_config_access',
    'description' => 'Configure Mandrill Webhooks.',
    'file' => 'mandrill_webhooks.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/config/services/mandrill/webhooks/%/update'] = array(
    'title' => 'Mandrill Webhook update',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mandrill_webhooks_update_form', 5),
    'access arguments' => array('administer mandrill'),
    'description' => 'Configure Mandrill Webhooks.',
    'file' => 'mandrill_webhooks.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/services/mandrill/webhooks/%/delete/%'] = array(
    'title' => 'Mandrill Webhooks delete',
    'page callback' => 'mandrill_webhooks_delete',
    'page arguments' => array(5, 7),
    'access arguments' => array('administer mandrill'),
    'description' => 'Delete a Mandrill Webhook.',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Access callback for administering Webhooks.
 *
 * @return bool
 *   True if current user has access to administering Webhooks.
 */
function mandrill_webhooks_config_access() {
  return mandrill_test_access();
}

/**
 * Callback to determine access to the endpoint.
 *
 * This function tests access to the endpoint in a 
 * "less expensive to most expensive" order, failing first 
 * if the request isn't formed properly, all the way to the 
 * actual base64 comparison of the signature key from Mandrill.
 *
 * @param string $webhook_url
 *   The specific end of the URL for the webhook on the Drupal site
 *
 * @return bool 
 *   TRUE|FALSE Indicates whether access is granted to connect to the webhook
 */
function mandrill_webhooks_access($webhook_url) {
  // Fail right away if the signature isn't present in the request.
  if (empty($_SERVER['HTTP_X_MANDRILL_SIGNATURE'])) {
    watchlog_log('mandrill_webhooks', "Signature missing in the Mandrill webhook request");
    return FALSE;
  }

  // Fail if the events aren't present in the request.
  if (empty($_POST['mandrill_events'])) {
    watchlog_log('mandrill_webhooks', "Events missing in the Mandrill webhook request");
    return FALSE;
  }

  // Retrieve available local keys for next test.
  global $base_url;
  $webhook_url = $base_url . '/' . MANDRILL_WEBHOOKS_ENDPOINT . '/' . $webhook_url;

  $webhooks = variable_get(MANDRILL_WEBHOOKS_VARIABLE, array());
  $auth_keys = array();

  foreach ($webhooks as $webhook) {
    if ($webhook['url'] == $webhook_url) {
      $auth_keys[] = $webhook['auth_key'];
    }
  }

  // Fail if there aren't matching keys or there aren't any keys at all.
  if (empty($auth_keys)) {
    watchlog_log('mandrill_webhooks', "No keys provided in the Mandrill webhook request");
    return FALSE;
  }

  // Final test with Mandrill signature.
  foreach ($auth_keys as $key => $auth_key) {
    $local_key = mandrill_webhooks_generate_signature($auth_key, $webhook_url, $_POST);
    // Allow access to the endpoint if we get a match.
    // This returns right away to avoid further comparing signatures,
    // as the operation can be quite expensive.
    if ($local_key == $_SERVER['HTTP_X_MANDRILL_SIGNATURE']) {
      return TRUE;
    }
  }

  watchlog_log('mandrill_webhooks', "No matching keys in the Mandrill webhook request");

  // Finally, if there aren't matching keys, deny access.
  return FALSE;
}

/**
 * Callback to receive data from Mandrill.
 *
 * This function listens for hook implementations to pass 
 * Mandrill's data to other modules to be processed at
 * their discretion.
 *
 * @return menu_status
 *   Nothing returned.
 */
function mandrill_webhooks_receive() {
  // Decode the json string from Mandrill or return a 404 if it fails.
  // @todo: figure out if this could be an attack vector.
  if (!$mandrill_events = json_decode($_POST['mandrill_events'])) {
    return MENU_NOT_FOUND;
  }

  // The main point of this module is to expose the Mandrill
  // event data to other modules to do something with it.
  // @todo: does it also need to be allowed to be altered?
  foreach (module_implements(MANDRILL_WEBHOOKS_HOOK_NAME) as $module) {
    $function = $module . '_' . MANDRILL_WEBHOOKS_HOOK_NAME;
    $function($mandrill_events);
  }
}

/**
 * Deletes a Webhook.
 *
 * @param int $id
 *   The id number of the webhook
 *
 * @return menu_status
 *   Menu status
 */
function mandrill_webhooks_delete($id, $token) {
  if (!drupal_valid_token($token, MANDRILL_WEBHOOKS_TOKEN, TRUE)) {
    return MENU_NOT_FOUND;
  }
  try {
    $mailer = mandrill_get_api_object();
    $webhooks = $mailer->webhooks->delete($id);
    drupal_set_message(t('Mandrill webhook @id was deleted.', array('@id' => $id)), 'status');
  }
  catch (Mandrill_Exception $e) {
    drupal_set_message(t('Mandrill: %message', array('%message' => check_plain($e->getMessage()))), 'error');
    watchdog_exception('mandrill', $e);
  }
  drupal_goto('admin/config/services/mandrill/webhooks');
}

/**
 * Rebuild local webhooks cache.
 *
 * @return rebuild_status
 *   The rebuild status
 */
function mandrill_webhooks_rebuild_local_cache() {
  try {
    $mailer = mandrill_get_api_object();
    $webhooks = $mailer->webhooks->getList();
    variable_set('mandrill_webhooks', $webhooks);
    if (!empty($webhooks)) {
      return TRUE;
    }
    return FALSE;
  }
  catch (Mandrill_Exception $e) {
    drupal_set_message(t('Mandrill: %message', array('%message' => check_plain($e->getMessage()))), 'error');
    watchdog_exception('mandrill', $e);
  }
}

/**
 * Generates a base64-encoded signature for a Mandrill webhook request.
 *
 * @param string $webhook_key 
 *   the webhook's authentication key
 *
 * @param string $url
 *   the webhook url
 *
 * @param array $params
 *   the request's POST parameters
 *
 * @return string
 *   the base64 representation of the hash to be compared with the header's hash
 *   from Mandrill.
 */
function mandrill_webhooks_generate_signature($webhook_key, $url, $params) {
  $signed_data = $url;
  ksort($params);
  foreach ($params as $key => $value) {
    $signed_data .= $key;
    $signed_data .= $value;
  }
  return base64_encode(hash_hmac('sha1', $signed_data, $webhook_key, TRUE));
}

/**
 * Gets a Webhook from local cache.
 *
 * @param int $id
 *   The ID of the webhook
 *
 * @return array
 *   bool FALSE or Returns the webhook if its found
 */
function mandrill_webhooks_get_webhook($id) {
  $webhooks = variable_get(MANDRILL_WEBHOOKS_VARIABLE, array());
  foreach ($webhooks as $webhook) {
    if ($webhook['id'] == $id) {
      return $webhook;
    }
  }
  return FALSE;
}
