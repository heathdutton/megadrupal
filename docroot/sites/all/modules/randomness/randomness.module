<?php
/**
 * @file
 * Randomness.
 */

define('RANDOMNESS_PARTICLE_SCOPE_DEFAULT_IMAGES', 4);
define('RANDOMNESS_PARTICLE_SCOPE_DEFAULT_LINKS_CUSTOM', 4);

 /**
  * Implements hook_block_info().
  * 
  * Info standard hook.
  */
function randomness_block_info() {

  $blocks = array();

  $blocks['randomness'] = array(
    'info' => 'Randomness',
  );

  return $blocks;
}

 /**
  * Implements hook_block_view().
  */
function randomness_block_view($delta = '') {

  $block = array(
    'subject' => '',
    'content' => '',
  );

  if ($delta == 'randomness') {

    $block['content']['randomness'] = array(
      '#theme' => 'randomness',
      '#variables' => array('content' => NULL),
    );
    $block['content']['#attached']['js'][] = drupal_get_path('module', 'randomness') . '/js/randomness.js';
    $block['content']['#attached']['css'][] = drupal_get_path('module', 'randomness') . '/css/randomness.css';
  }
  return $block;
}

 /**
  * Implements hook_theme().
  */
function randomness_theme($existing, $type, $theme, $path) {

  return array(
    'randomness' => array(
      'variables' => array(
        'content' => NULL,
      ),
      'template' => 'randomness',
    ),
  );
}

 /**
  * Preprocesses randomness variables.
  */
function template_preprocess_randomness(&$variables) {

  $vars['particle_count'] = variable_get('randomness_particle_count', '10');
  $vars['offset_top'] = variable_get('randomness_offset_top', '0');
  $vars['offset_left'] = variable_get('randomness_offset_left', '0');
  $vars['max_dimension_image'] = variable_get('randomness_max_dimension_image', '1');
  $vars['max_dimension_link_custom'] = variable_get('randomness_max_dimension_link_custom', '1');

  $variables['canvas'] = variable_get('randomness_canvas', '#randomness-canvas');
  $variables['acceleration'] = variable_get('randomness_acceleration', '');
  $variables['easing'] = variable_get('randomness_easing', 'swing');
  $variables['mode'] = variable_get('randomness_mode', 'point');
  $variables['canvas_width'] = variable_get('randomness_canvas_width', '500');
  $variables['canvas_height'] = variable_get('randomness_canvas_height', '200');
  $variables['z_index_mod'] = variable_get('randomness_z_index_mod', '-1');
  $variables['particle_random'] = variable_get('randomness_particle_random', 'true');
  $variables['particle_count'] = intval($vars['particle_count']);
  $variables['offset_top'] = intval($vars['offset_top']);
  $variables['offset_left'] = intval($vars['offset_left']);
  $variables['max_dimension_image'] = intval($vars['max_dimension_image']);
  $variables['max_dimension_link_custom'] = intval($vars['max_dimension_link_custom']);

  $variables['images'] = array();
  $variables['links_custom'] = array();

  if ($variables['mode'] == 'image') {
    $images = variable_get('randomness_images', NULL);
    foreach ($images as $img) {
      $tmp = _randomness_get_image($img);
      $variables['images'][] = file_create_url(file_build_uri('randomness/' . $tmp['filename']));
    }
  }
  if ($variables['mode'] == 'link_custom') {
    $links_custom = variable_get('randomness_links_custom', NULL);
    foreach ($links_custom as $link) {
      $variables['links_custom'][] = array(
        'href' => $link['href'],
        'label' => ((empty($link['label'])) ? '.' : $link['label']),
        'title' => ((empty($link['title'])) ? '' : $link['title']),
        'class' => ((empty($link['class'])) ? '' : $link['class']),
      );
    }
  }

  $variables['images'] = drupal_json_encode($variables['images']);
  $variables['links_custom'] = drupal_json_encode($variables['links_custom']);
}

 /**
  * Gets the image data from db.
  *
  * @param int $fid
  *   The file id of the managed file.
  */
function _randomness_get_image($fid) {

  $result = db_select('file_managed', 'f_m')
    ->fields('f_m', array('fid', 'filename'))
    ->condition('fid', $fid)
    ->execute()
    ->fetchAssoc();

  return $result;
}

 /**
  * Implements hook_menu().
  */
function randomness_menu() {

  $items['admin/config/system/randomness'] = array(
    'title' => 'Randomness',
    'description' => 'Randomness Configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('randomness_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

 /**
  * Implements hook_form().
  */
function randomness_form($form, &$form_state) {

  $form['randomness_group_canvas'] = array(
    '#type' => 'fieldset',
    '#title' => t('Canvas'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['randomness_group_particles'] = array(
    '#type' => 'fieldset',
    '#title' => t('Particles'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['randomness_group_canvas']['randomness_canvas'] = array(
    '#type' => 'textfield',
    '#title' => t('Canvas'),
    '#description' => t('Selector for the html-element displaying the particles. The default block "canvas" is "#randomness-canvas", alternatively any other selector can be used ("#page", ".myclass", "#page .myclass", etc).'),
    '#default_value' => variable_get('randomness_canvas', '#randomness-canvas'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  $form['randomness_group_canvas']['randomness_canvas_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Canvas width'),
    '#description' => t('Define canvas width (px, this value will only affect the default block canvas).'),
    '#default_value' => variable_get('randomness_canvas_width', '500'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  $form['randomness_group_canvas']['randomness_canvas_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Canvas height'),
    '#description' => t('Define canvas height (px, this value will only affect the default block canvas).'),
    '#default_value' => variable_get('randomness_canvas_height', '200'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  $form['randomness_group_canvas']['randomness_group_offset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Offset'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['randomness_group_canvas']['randomness_group_offset']['randomness_offset_top'] = array(
    '#type' => 'textfield',
    '#title' => t('Offset top'),
    '#description' => t('Define top offset (px, this value will affect every canvas).'),
    '#default_value' => variable_get('randomness_offset_top', '0'),
    '#size' => 5,
    '#maxlength' => 5,
    '#required' => TRUE,
  );

  $form['randomness_group_canvas']['randomness_group_offset']['randomness_offset_left'] = array(
    '#type' => 'textfield',
    '#title' => t('Offset left'),
    '#description' => t('Define left offset (px, this value will affect every canvas).'),
    '#default_value' => variable_get('randomness_offset_left', '0'),
    '#size' => 5,
    '#maxlength' => 5,
    '#required' => TRUE,
  );

  $form['randomness_group_particles']['randomness_z_index_mod'] = array(
    '#type' => 'select',
    '#title' => t('Z-index'),
    '#options' => array(
      '-1' => '-1',
      '0' => '0',
      '1' => '1',
      '2' => '2',
      '5' => '5',
      '10' => '10',
      '100' => '100'),
    '#default_value' => variable_get('randomness_z_index_mod', '-1'),
    '#description' => t('Modify z-index multiplicator of the particles.'),
  );

  $form['randomness_group_particles']['randomness_acceleration'] = array(
    '#type' => 'select',
    '#title' => t('Acceleration'),
    '#options' => array(
      '' => t('Natural'),
      'slow' => t('Slow'),
      'fast' => t('Fast')),
    '#default_value' => variable_get('randomness_acceleration', ''),
    '#description' => t('Specify acceleration and speed of the particles.'),
  );

  $form['randomness_group_particles']['randomness_easing'] = array(
    '#type' => 'select',
    '#title' => t('Easing'),
    '#options' => array(
      'linear' => t('Linear'),
      'swing' => t('Swing')),
    '#default_value' => variable_get('randomness_easing', 'swing'),
    '#description' => t('Specify easing of the particle animation.'),
  );

  $form['randomness_group_particles']['randomness_particle_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Particle count'),
    '#description' => t('The amount of displayed particles.'),
    '#default_value' => variable_get('randomness_particle_count', '10'),
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => TRUE,
  );

  $form['randomness_group_particles']['randomness_particle_random'] = array(
    '#type' => 'select',
    '#title' => t('Particle delegation'),
    '#options' => array(
      'true' => t('Random'),
      'false' => t('Sequence')),
    '#default_value' => variable_get('randomness_particle_random', 'true'),
    '#description' => t('Specify the way the particle items are selected.'),
  );

  $form['randomness_group_particles']['randomness_mode'] = array(
    '#type' => 'select',
    '#title' => t('Mode'),
    '#options' => array(
      'point' => t('Point'),
      'image' => t('Image'),
      'link_custom' => t('Custom link')),
    '#default_value' => variable_get('randomness_mode', 'point'),
    '#description' => t('Specify display mode.'),
  );

  $form['randomness_group_particles']['randomness_group_images'] = array(
    '#type' => 'fieldset',
    '#title' => t('Images'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['randomness_group_particles']['randomness_group_images']['randomness_max_dimension_image'] = array(
    '#type' => 'textfield',
    '#title' => t('Max image dimension'),
    '#description' => t('Define maximal image dimension.'),
    '#default_value' => variable_get('randomness_max_dimension_image', '1'),
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => TRUE,
  );

  $images = variable_get('randomness_images', NULL);
  $index = variable_get('randomness_particle_scope_images', RANDOMNESS_PARTICLE_SCOPE_DEFAULT_IMAGES);
  for ($i = 0; $i <= $index; $i++) {

    $form['randomness_group_particles']['randomness_group_images']['randomness_group_images_image_' . $i] = array(
      '#type' => 'fieldset',
      '#title' => t('Image @image_num', array('@image_num' => strval($i + 1))),
      '#collapsible' => TRUE,
      '#collapsed' => (($i == 0) ? FALSE : TRUE),
    );
    $form['randomness_group_particles']['randomness_group_images']['randomness_group_images_image_' . $i]['randomness_image_' . $i] = array(
      '#title' => t('Image @image_num', array('@image_num' => strval($i + 1))),
      '#description' => t('Upload image @image_num', array('@image_num' => strval($i + 1))),
      '#type' => 'managed_file',
      '#required' => FALSE,
      '#default_value' => ((!empty($images[$i]) ? $images[$i] : NULL)),
      '#upload_location' => 'public://randomness/',
      '#upload_validators' => array(
        'file_validate_extensions' => array('gif png jpg jpeg'),
        'file_validate_size' => array(0.3 * 1024 * 1024),
        // 'file_validate_image_resolution'=>array(200*200),
      ),
    );
  }

  $form['randomness_group_particles']['randomness_group_images']['randomness_particle_scope_images'] = array(
    '#type' => 'select',
    '#title' => t('Particle index amount'),
    '#options' => array(
      '4' => '5',
      '9' => '10',
      '19' => '20',
      '29' => '30',
      '39' => '40',
      '49' => '50',
      '99' => '100'),
    '#default_value' => variable_get('randomness_particle_scope_images', strval(RANDOMNESS_PARTICLE_SCOPE_DEFAULT_IMAGES)),
    '#description' => t('The amount of different components. After saving this option, the amount of input-fields will be altered.'),
  );

  $form['randomness_group_particles']['randomness_group_links_custom'] = array(
    '#type' => 'fieldset',
    '#title' => t('Custom links'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['randomness_group_particles']['randomness_group_links_custom']['randomness_max_dimension_link_custom'] = array(
    '#type' => 'textfield',
    '#title' => t('Max custom link dimension'),
    '#description' => t('Define maximal custom link dimension.'),
    '#default_value' => variable_get('randomness_max_dimension_link_custom', '1'),
    '#size' => 3,
    '#maxlength' => 3,
    '#required' => TRUE,
  );

  $links_custom = variable_get('randomness_links_custom', NULL);
  $index = variable_get('randomness_particle_scope_links_custom', RANDOMNESS_PARTICLE_SCOPE_DEFAULT_LINKS_CUSTOM);
  for ($i = 0; $i <= $index; $i++) {

    $form['randomness_group_particles']['randomness_group_links_custom']['randomness_group_links_custom_link_' . $i] = array(
      '#type' => 'fieldset',
      '#title' => t('Custom link @link_num', array('@link_num' => strval($i + 1))),
      '#collapsible' => TRUE,
      '#collapsed' => (($i == 0) ? FALSE : TRUE),
    );
    $form['randomness_group_particles']['randomness_group_links_custom']['randomness_group_links_custom_link_' . $i]['randomness_link_custom_href_' . $i] = array(
      '#type' => 'textfield',
      '#title' => t('Custom link @link_num href', array('@link_num' => strval($i + 1))),
      '#description' => t('Define href-attribute of custom link @link_num', array('@link_num' => strval($i + 1))),
      '#default_value' => ((!empty($links_custom[$i]['href']) ? $links_custom[$i]['href'] : NULL)),
      '#size' => 40,
      '#maxlength' => 255,
      '#required' => FALSE,
    );
    $form['randomness_group_particles']['randomness_group_links_custom']['randomness_group_links_custom_link_' . $i]['randomness_link_custom_label_' . $i] = array(
      '#type' => 'textfield',
      '#title' => t('Custom link @link_num labeling', array('@link_num' => strval($i + 1))),
      '#description' => t('Define inner HTML of custom link @link_num', array('@link_num' => strval($i + 1))),
      '#default_value' => ((!empty($links_custom[$i]['label']) ? $links_custom[$i]['label'] : NULL)),
      '#size' => 40,
      '#maxlength' => 255,
      '#required' => FALSE,
    );
    $form['randomness_group_particles']['randomness_group_links_custom']['randomness_group_links_custom_link_' . $i]['randomness_link_custom_title_' . $i] = array(
      '#type' => 'textfield',
      '#title' => t('Custom link @link_num tooltip (title-attribute)', array('@link_num' => strval($i + 1))),
      '#description' => t('Define tooltip of custom link @link_num', array('@link_num' => strval($i + 1))),
      '#default_value' => ((!empty($links_custom[$i]['title']) ? $links_custom[$i]['title'] : NULL)),
      '#size' => 40,
      '#maxlength' => 255,
      '#required' => FALSE,
    );
    $form['randomness_group_particles']['randomness_group_links_custom']['randomness_group_links_custom_link_' . $i]['randomness_link_custom_class_' . $i] = array(
      '#type' => 'textfield',
      '#title' => t('Custom link @class_num class (class-attribute)', array('@class_num' => strval($i + 1))),
      '#description' => t('Define class of custom link @class_num', array('@class_num' => strval($i + 1))),
      '#default_value' => ((!empty($links_custom[$i]['class']) ? $links_custom[$i]['class'] : NULL)),
      '#size' => 40,
      '#maxlength' => 255,
      '#required' => FALSE,
    );
  }

  $form['randomness_group_particles']['randomness_group_links_custom']['randomness_particle_scope_links_custom'] = array(
    '#type' => 'select',
    '#title' => t('Particle index amount'),
    '#options' => array(
      '4' => '5',
      '9' => '10',
      '19' => '20',
      '29' => '30',
      '39' => '40',
      '49' => '50',
      '99' => '100'),
    '#default_value' => variable_get('randomness_particle_scope_links_custom', strval(RANDOMNESS_PARTICLE_SCOPE_DEFAULT_LINKS_CUSTOM)),
    '#description' => t('The amount of different components. After saving this option, the amount of input-fields will be altered.'),
  );

  $form['#attributes']['enctype'] = 'multipart/form-data';

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
  );

  return $form;
}

 /**
  * Implements hook_form_submit().
  */
function randomness_form_submit($form, &$form_state) {

  variable_set('randomness_canvas', $form_state['values']['randomness_canvas']);
  variable_set('randomness_particle_count', $form_state['values']['randomness_particle_count']);
  variable_set('randomness_particle_random', $form_state['values']['randomness_particle_random']);
  variable_set('randomness_particle_scope_images', intval($form_state['values']['randomness_particle_scope_images']));
  variable_set('randomness_particle_scope_links_custom', intval($form_state['values']['randomness_particle_scope_links_custom']));
  variable_set('randomness_offset_top', $form_state['values']['randomness_offset_top']);
  variable_set('randomness_offset_left', $form_state['values']['randomness_offset_left']);
  variable_set('randomness_max_dimension_image', $form_state['values']['randomness_max_dimension_image']);
  variable_set('randomness_max_dimension_link_custom', $form_state['values']['randomness_max_dimension_link_custom']);
  variable_set('randomness_acceleration', $form_state['values']['randomness_acceleration']);
  variable_set('randomness_easing', $form_state['values']['randomness_easing']);
  variable_set('randomness_mode', $form_state['values']['randomness_mode']);
  variable_set('randomness_canvas_width', $form_state['values']['randomness_canvas_width']);
  variable_set('randomness_canvas_height', $form_state['values']['randomness_canvas_height']);
  variable_set('randomness_z_index_mod', $form_state['values']['randomness_z_index_mod']);

  $images = NULL;
  $index = variable_get('randomness_particle_scope_images', RANDOMNESS_PARTICLE_SCOPE_DEFAULT_IMAGES);
  for ($i = 0; $i <= $index; $i++) {
    if (!empty($form_state['values']['randomness_image_' . $i])) {
      $images[] = $fid = $form_state['values']['randomness_image_' . $i];
      $file = file_load($fid);
      $file->status = FILE_STATUS_PERMANENT;
      file_save($file);
      file_usage_add($file, 'randomness', 'randomness_particle_image', 1);
    }
  }
  variable_set('randomness_images', $images);

  $links_custom = NULL;
  $index = variable_get('randomness_particle_scope_links_custom', RANDOMNESS_PARTICLE_SCOPE_DEFAULT_LINKS_CUSTOM);
  for ($i = 0; $i <= $index; $i++) {
    if (!empty($form_state['values']['randomness_link_custom_href_' . $i])) {
      $links_custom[] = array(
        'href' => $form_state['values']['randomness_link_custom_href_' . $i],
        'label' => ((empty($form_state['values']['randomness_link_custom_label_' . $i])) ? '' : $form_state['values']['randomness_link_custom_label_' . $i]),
        'title' => ((empty($form_state['values']['randomness_link_custom_title_' . $i])) ? '' : $form_state['values']['randomness_link_custom_title_' . $i]),
        'class' => ((empty($form_state['values']['randomness_link_custom_class_' . $i])) ? '' : $form_state['values']['randomness_link_custom_class_' . $i]),
      );
    }
  }
  variable_set('randomness_links_custom', $links_custom);

  drupal_set_message(t('The settings have been saved'));
}
