<?php

/**
 * Commerce Heidelpay POST-Transactions
 */

/**
 * Implements hook_menu().
 */
function commerce_heidelpay_pt_menu() {
  $items = array();
  $items['checkout/heidelpay/%/redirect/%'] = array(
    'title' => 'Heidelpay payment response',
    'page callback' => 'commerce_heidelpay_pt_redirect',
    'page arguments' => array(2, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'commerce_heidelpay_pt_pages.inc',
  );
  return $items;
}

/**
 * Menu callback: Redirect URL for Heidelpay
 */
function commerce_heidelpay_pt_redirect($order_id, $payment_redirect_key) {
  $response = $_POST;
  // Well, that shouldn't be necessary, but the response data encoding appears
  // to be incorrect
  commerce_heidelpay_response_prepare($response);

  $order = commerce_order_load($order_id);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  $amount = $order_wrapper->commerce_order_total->amount->value();

  $payment_method = commerce_payment_method_load('heidelpay');

  watchdog('heidelpay', 'Response from Heidelpay: !data', array('!data' => '<pre>' . check_plain(print_r($response, 1)) . '</pre>'));

  // Create a new payment transaction for the order.
  $transaction = commerce_payment_transaction_new('heidelpay', $order->order_id);
  //$transaction->instance_id = $payment_method['instance_id'];

  $transaction->remote_id = $response['IDENTIFICATION_UNIQUEID'];
  $transaction->amount = commerce_currency_decimal_to_amount($response['PRESENTATION_AMOUNT'], $response['PRESENTATION_CURRENCY']);
  $transaction->currency_code = $response['PRESENTATION_CURRENCY'];
  $transaction->payload = $response;
  $transaction->remote_status = $response['PROCESSING_STATUS_CODE'];

  switch ($response['PROCESSING_RESULT']) {
    case 'ACK':
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t('The payment has completed.');

      $url = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
      break;
    default:
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t("The payment has failed.");

      $url = url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
      break;
  }

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);
  watchdog('heidelpay', 'Payment processed for Order @order_number with ID @txn_id.', array('@txn_id' => $transaction->remote_id, '@order_number' => $order->order_number), WATCHDOG_INFO);

  print $url;
}

/**
 * Payment method callback for Post-Transactions: settings form.
 */
function commerce_heidelpay_pt_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
    'login' => '',
    'sender' => '',
    'password' => '',
    'channel' => '',
    'mode' => 'integrator_test',
    'logging' => FALSE,
  );

  $form['login'] = array(
    '#type' => 'textfield',
    '#title' => t('Login'),
    '#description' => t('The user id of the sending Heidelpay user'),
    '#default_value' => $settings['login'],
    '#required' => TRUE,
  );
  $form['sender'] = array(
    '#type' => 'textfield',
    '#title' => t('Sender'),
    '#description' => t('Each server which sends requests to the system has an own sender unique id'),
    '#default_value' => $settings['sender'],
    '#required' => TRUE,
  );
  $form['password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t('Password of the sending Heidelpay user'),
    '#default_value' => $settings['password'],
    '#required' => TRUE,
  );
  $form['channel'] = array(
    '#type' => 'textfield',
    '#title' => t('Channel'),
    '#description' => t('The channel ID is a unique key for the identification of the unit which sends transactions into the system'),
    '#default_value' => $settings['channel'],
    '#required' => TRUE,
  );
  $form['mode'] = array(
    '#type' => 'radios',
    '#title' => t('Mode'),
    '#options' => array(
      'integrator_test' => ('Integrator Test - transaction is just send to the integrator and not to the validator (risk management) or connector modules. Used to test compliance against the integrator module'),
      'connector_test' => ('Connector Test - transaction enters the integrator module, accesses the validator modules (risk management) and then goes to the connector. The connector operates in test mode'),
      'live' => ('Live - transaction enters the integrator module, accesses the validator modules (risk management) and then goes to the connector. The connector operates in live mode'),
    ),
    '#default_value' => $settings['mode'],
  );
  $form['method'] = array(
    '#type' => 'hidden',
    '#value' => $settings['method'],
  );
  /*
  $form['logging'] = array(
    '#type' => 'checkbox',
    '#title' => t('Logging'),
    '#description' => t('Enable logging - for development purposes'),
    '#default_value' => $settings['logging'],
  );
  */

  return $form;
}

/**
 * Payment method callback: adds a message and CSS to the submission form.
 */
function commerce_heidelpay_pt_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $method = $payment_method['settings']['method'];
  $methods = commerce_heidelpay_payment_submethods($method);

  $form['submethod'] = array(
    '#type'  => 'radios',
    '#title' => t('Submethod'),
    '#options' => $methods,
    '#description' => t('Choose your submethod'),
    '#ajax' => array(
      'callback' => 'commerce_heidelpay_pt_choice',
      'wrapper' => 'credit-card-choice',
      'method' => 'replace',
    ),
  );
  // Container for just the credit card.
  $form['credit_card_wrapper']['choice'] = array(
    '#prefix' => '<div id="credit-card-choice">',
    '#suffix' => '</div>',
  );
  return $form;
}

function commerce_heidelpay_pt_choice($form, $form_state) {
  $choice_form = array();
  $choice_form = $form['commerce_payment']['payment_details']['credit_card_wrapper']['choice'];

  list($base, $method) = explode('|', $form_state['values']['commerce_payment']['payment_method']);
  $submethod = strtolower($form_state['values']['commerce_payment']['payment_details']['submethod']);
  $callback = $method . '_' . $submethod . '_form';
  $default_callback = $method . '_default_form';
  if ($default_callback) {
    $choice_form += (array) call_user_func($default_callback);
  }
  if (function_exists($callback)) {
    $choice_form += (array) call_user_func($callback);
  }
  return $choice_form;
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a Heidelpay request.
 */
function commerce_heidelpay_pt_redirect_form($form, &$form_state, $order, $payment_method) {
  global $user;
  $settings = $payment_method['settings'];
  $settings['mode'] = isset($settings['mode']) ? $settings['mode'] : 'integrator_test';

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  $amount = $order_wrapper->commerce_order_total->amount->value();

  $profile = $order_wrapper->commerce_customer_billing->value();
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();
  //$profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $profile);
  //$address = $profile_wrapper->commerce_customer_address->value();

  // Return an error if the enabling action's settings haven't been configured.
  if ($settings['mode'] === 'live' &&
     (!empty($settings['login']) &&
      !empty($settings['sender']) &&
      !empty($settings['password']) &&
      !empty($settings['channel']))) {
    drupal_set_message(t('Heidelpay is not configured for use. Please provide the settings for the Heidelpay account.'), 'error');
    return array();
  }

  $url = commerce_heidelpay_settings('url', $settings['mode'], $settings);

  // Prepare the billing address for use in the request.
  if (empty($billing_address['first_name'])) {
    $name_parts = explode(' ', $billing_address['name_line']);
    $billing_address['first_name'] = array_shift($name_parts);
    $billing_address['last_name'] = implode(' ', $name_parts);
  }
dsm($billing_address);
  $parameters = array(
    // Header Group
    // @see heidelpay-Developer_guide_POST-Transactions_en.pdf page 11
    'REQUEST.VERSION' => HEIDELPAY_REQUEST_VERSION,
    'SECURITY.SENDER' => commerce_heidelpay_settings('sender', $settings['mode'], $settings),

    // Transaction Group
    // @see heidelpay-Developer_guide_POST-Transactions_en.pdf page 12
    'TRANSACTION.MODE' => commerce_heidelpay_settings('mode', $settings['mode'], $settings),
    'TRANSACTION.RESPONSE' => 'ASYNC',
    'TRANSACTION.CHANNEL' => commerce_heidelpay_settings('channel', $settings['mode'], $settings),

    // User Group
    // @see heidelpay-Developer_guide_POST-Transactions_en.pdf page 13
    'USER.LOGIN' => commerce_heidelpay_settings('login', $settings['mode'], $settings),
    'USER.PWD' => commerce_heidelpay_settings('password', $settings['mode'], $settings),

    // Frontend Group
    // @see heidelpay-Developer_guide_POST-Transactions_en.pdf page 26
    'FRONTEND.ENABLED' => "true",
    'FRONTEND.RESPONSE_URL' => url('checkout/heidelpay/' . $order->order_id . '/redirect/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Payment Group
    // @see heidelpay-Developer_guide_POST-Transactions_en.pdf page 15
    'PAYMENT.CODE' => "CC.DB",
    // Presentation Group
    // @see heidelpay-Developer_guide_POST-Transactions_en.pdf page 16
    'PRESENTATION.AMOUNT' => round(commerce_currency_amount_to_decimal($amount, $currency_code), 2),
    'PRESENTATION.CURRENCY' => $currency_code,
    'PRESENTATION.USAGE' => t('Order @order_number at @store', array(
      '@order_number' => $order->order_number,
      '@store' => variable_get('site_name', 'Drupal')
    )),

    // Customer Group
    // @see heidelpay-Developer_guide_POST-Transactions_en.pdf page 19
    'NAME.GIVEN' => $billing_address['first_name'],
    'NAME.FAMILY' => $billing_address['last_name'],
    'NAME.COMPANY' => $billing_address['organisation_name'],
    'ADDRESS.STREET' => $billing_address['thoroughfare'] . (!empty($billing_address['premise']) ? ' / ' . $billing_address['premise'] : ''),
    'ADDRESS.ZIP' => $billing_address['postal_code'],
    'ADDRESS.CITY' => $billing_address['locality'],
    'ADDRESS.STATE' => $billing_address['administrative_area'] . (!empty($billing_address['sub_administrative_area']) ? ' / ' . $billing_address['sub_administrative_area'] : ''),
    'ADDRESS.COUNTRY' => $billing_address['country'],
    'CONTACT.EMAIL' => $order->mail ? $order->mail : $user->mail,
    'CONTACT.IP' => $_SERVER['REMOTE_ADDR'],

    // Identification Group
    // @see heidelpay-Developer_guide_POST-Transactions_en.pdf page 13
    'IDENTIFICATION.TRANSACTIONID' => $order->order_number,
    'IDENTIFICATION.SHOPPERID' => $order->uid,

    // Criterion Group
    // @see heidelpay-Developer_guide_POST-Transactions_en.pdf page 21
    'CRITERION.Shopsystem' => 'Drupal',
  );

  // Authorization
  $response = drupal_http_request(
    $url,
    array(
      'headers' => array(
        'User-Agent' => 'php ctpepost',
        'Content-Type' => 'application/x-www-form-urlencoded;charset=UTF-8',
      ),
      'method' => 'POST',
      'data' => http_build_query($parameters),
    )
  );

  parse_str($response->data, $response->authorization);
  // Well, that shouldn't be necessary, but the response data encoding appears
  // to be incorrect
  commerce_heidelpay_response_prepare($response->authorization);

  if ($response->code = 200) {
    switch ($response->authorization['PROCESSING_RESULT']) {
      case 'ACK':
        // Success!
        return commerce_heidelpay_pt_order_form($form, $form_state, $order, $settings, $response->authorization);
        break;
      case 'NOK':
        // Failure!
        drupal_set_message(t('Authorization not successfull. Please try again.'), 'error');
        watchdog('heidelpay', 'Authorization not successfull. Response: !data', array('!data' => '<pre>' . check_plain(print_r($response, 1)) . '</pre>'), WATCHDOG_ERROR);
        return array();
        break;
    }
  }
  else {
    drupal_set_message(t('Could not communicate with server. Please try again later.'), 'error');
    watchdog('heidelpay', 'Could not communicate with server. Response: !data', array('!data' => '<pre>' . check_plain(print_r($response, 1)) . '</pre>'), WATCHDOG_ERROR);
    return array();
  }
}

/**
 * Builds a Heidelpay form from an order object.
 *
 * @param $order
 *   The fully loaded order being paid for.
 * @param $settings
 *   An array of settings used to build out the form.
 * @param $authorization
 *   An array of return values from the authorization.
 *
 * @return
 *   A renderable form array.
 */
function commerce_heidelpay_pt_order_form($form, &$form_state, $order, $settings, $authorization) {
  $form['#action'] = $authorization['FRONTEND_REDIRECT_URL'];
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to Heidelpay'),
    '#weight' => 10,
  );
  return $form;
}
