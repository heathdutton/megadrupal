<?php

/**
 * Commerce Heidelpay
 */

// TODO: Check for available languages
// TODO: Check for available currencies

define('HEIDELPAY_REQUEST_VERSION', '1.0');

/**
 * Returns an array of Heidelpay payment method icon img elements.
 *
 * @return
 *   The array of themed payment method icons keyed by name: visa, mastercard,
 *   amex, discover, echeck, Heidelpay
 */
function commerce_heidelpay_icons() {
  $icons = array();

  $payment_methods = array(
    'visa' => t('Visa'),
    'mastercard' => t('Mastercard'),
    'amex' => t('American Express'),
    'discover' => t('Discover'),
    'echeck' => t('eCheck'),
    'paypal' => t('Paypal'),
    'heidelpay' => t('Heidelpay'),
  );

  foreach ($payment_methods as $name => $title) {
    $variables = array(
      'path' => drupal_get_path('module', 'commerce_heidelpay') . '/images/' . $name . '.gif',
      'title' => $title,
      'alt' => $title,
      'attributes' => array(
        'class' => array('commerce-heidelpay-icon'),
      ),
    );
    $icons[$name] = theme('image', $variables);
  }

  return $icons;
}

/**
 * Heidelpay settings
 */
function commerce_heidelpay_settings($setting, $mode, $live_settings) {
  $settings = array();
  $settings['integrator_test'] = array(
    'url' => 'https://test-heidelpay.hpcgw.net/sgw/gtw',
    'sender' => '31HA07BC8124AD82A9E96D9A35FAFD2A',
    'channel' => '31HA07BC81A71E2A47DA94B6ADC524D8',
    'login' => '31ha07bc8124ad82a9e96d486d19edaa',
    'password' => 'password',
    'mode' => 'INTEGRATOR_TEST',
  );
  $settings['connector_test'] = array(
    'mode' => 'CONNECTOR_TEST',
  ) + $settings['integrator_test'];
  $settings['live'] = array(
    'url' => 'https://heidelpay.hpcgw.net/sgw/gtw',
    'mode' => 'LIVE',
  ) + $live_settings;
  return $settings[$mode][$setting];
}

/**
 * Prepare response data
 */
function commerce_heidelpay_response_prepare(&$response) {
  $response = (array) $response;
  // Ensure the data is UTF-8
  foreach ($response as $key => $value) {
    $response[$key] = utf8_encode($value);
  }
  return $response;
}

/**
 * Payment methods
 */
function commerce_heidelpay_payment_methods($method = NULL) {
  $methods = array(
    'VA' => t('Virtual Account'),
    'PP' => t('Pre-Payment'),
    'CC' => t('Credit Card'),
    'OT' => t('Online Transfer'),
    'DC' => t('Debit Card'),
    'DD' => t('Direct Debit'),
    'IV' => t('Invoice'),
  );
  return $method ? $methods[$method] : $methods;
}

/**
 * Payment submethods
 */
function commerce_heidelpay_payment_submethods($method = NULL) {
  $methods = array(
    'VA' => array(
      'PAYPAL' => t('PayPal'),
    ),
    'CC' => array(
      'MASTER' => t('MasterCard'),
      'VISA' => t('Visa'),
      'AMEX' => t('American Express'),
      'DINERS' => t('Diners'),
      'DISCOVERY' => t('Discovery'),
    ),
    'PP' => array(
    ),
    'OT' => array(
    ),
    'DC' => array(
      'VISAELECTRON' => t('VISA Electron'),
      'SOLO' => t('Solo'),
      'SERVIRED' => t('Servired'),
      'FOURB' => t('4B'),
      'CARTEBLEUE' => t('Carte Bleue'),
      'EURO6000' => t('EURO6000'),
      'MAESTRO' => t('Maestro'),
      'POSTEPAY' => t('Postepay'),
    ),
    'DD' => array(
    ),
    'IV' => array(
    ),
  );
  return $method ? $methods[$method] : $methods;
}

/**
 * Payment types
 */
function commerce_heidelpay_payment_types() {
  return array(
    'PA' => t('Preauthorization'),
    'DB' => t('Debit'),
    'CP' => t('Capture'),
    'CD' => t('Credit'),
    'RV' => t('Reversal'),
    'RF' => t('Refund'),
    'RB' => t('Rebill'),
    'CB' => t('Chargeback'),
    'RC' => t('Receipt'),
    'RL' => t('Reconciliation'),
  );
}

/**
 * Registration types
 */
function commerce_heidelpay_registration_types() {
  return array(
    'RG' => t('Registration'),
    'RR' => t('Reregistration'),
    'DR' => t('Deregistration'),
    'CF' => t('Confirmation'),
  );
}

/**
 * Scheduling types
 */
function commerce_heidelpay_scheduling_types() {
  return array(
    'SD' => t('Schedule'),
    'RS' => t('Reschedule'),
    'DS' => t('Deschedule'),
  );
}

/**
 * Statuses and reasons
 */
function commerce_heidelpay_response_codes($code = NULL) {
  $codes = array(
    90 => t('NEW'),
    80 => t('WAITING'),
    70 => t('REJECTED_VALIDATION'),
    65 => t('REJECTED_RISK'),
    60 => t('REJECTED_BANK'),
    40 => t('NEUTRAL'),
    00 => t('SUCCESS'),
  );
  return $code ? $codes[$code] : $codes;
}