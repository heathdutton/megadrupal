<?php

/**
 * @file
 * This is the .module file of BeansTag.
 */

/**
 * Implements hook_permission().
 */
function beanstag_permission() {
  return array(
    'administer beanstag' => array(
      'title' => t('Administer beanstag'),
      'description' => t('Allow users to administer beanstags.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function beanstag_menu() {

  $items['admin/structure/beanstag'] = array(
    'title' => 'BeansTag',
    'description' => 'Edit page titles and meta tags.',
    'page callback' => 'beanstag_list',
    'access arguments' => array('administer beanstag'),
    'file' => 'beanstag.admin.inc',
  );

  $items['admin/structure/beanstag/add'] = array(
    'title' => 'Add new BeansTag',
    'description' => 'Add page titles and meta tags.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('beanstag_admin_form'),
    'access arguments' => array('administer beanstag'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'beanstag.admin.inc',
  );

  $items['admin/structure/beanstag/edit/%beanstag'] = array(
    'title' => 'Edit BeansTag',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('beanstag_admin_form', 4),
    'access arguments' => array('administer beanstag'),
    'file' => 'beanstag.admin.inc',
  );

  $items['admin/structure/beanstag/delete/%beanstag'] = array(
    'title' => 'Delete BeansTag',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('beanstag_admin_delete_confirm', 4),
    'access arguments' => array('administer beanstag'),
    'file' => 'beanstag.admin.inc',
  );

  $items['admin/structure/beanstag/delete/selected'] = array(
    'title' => 'Delete BeansTag',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('beanstag_bulk_delete_form_confirm', 4),
    'access arguments' => array('administer beanstag'),
    'file' => 'beanstag.admin.inc',
  );

  $items['admin/structure/beanstag/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'access arguments' => array('administer beanstag'),
  );

  $items['admin/structure/beanstag/update'] = array(
    'title' => 'Update BeansTag',
    'description' => 'Update page titles and meta tags.',
    'page callback' => 'beanstag_load_admin_form',
    'page arguments' => array(2),
    'access arguments' => array('administer beanstag'),
    'file' => 'beanstag.admin.inc',
  );

  $items['admin/config/search/beanstag'] = array(
    'title' => 'BeansTag Settings',
    'description' => 'The BeansTag settings page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('beanstag_admin'),
    'access arguments' => array('administer beanstag'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'beanstag.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_html_head_alter().
 *
 * This is for adding meta tags.
 */
function beanstag_html_head_alter(&$head_elements) {
  // Disable the BeansTag function for the system php pages.
  $uri = request_uri();
  if (!(strpos($uri, 'authorize.php') === FALSE)) {
    return;
  }
  if (!(strpos($uri, 'update.php') === FALSE)) {
    return;
  }

  // Continue Adding BeansTag.
  $new_header = TRUE;

  // If override settings is not checked.
  if (variable_get('beanstag_override', 0) == 0) {
    // Check if meta keywords already exist.
    // If yes, then we will not add our meta keywords.
    foreach ($head_elements as $key => $element) {
      if (isset($element['#attributes']['name'])) {
        if ($element['#attributes']['name'] == 'keywords') {
          $new_header = FALSE;
          break;
        }
      }
    }
  }

  // Add meta tag only when there is no existing meta keywords.
  if ($new_header) {
    $curr_uri = request_path() ? request_path() : '<front>';
    if (_beanstag_exists($curr_uri)) {
      // BeansTag exists as exact path.
      $beanstag = _beanstag_get_beanstag_by_path_alias($curr_uri);
      _beanstag_set_meta($beanstag, $head_elements);
    }
    elseif ($beanstag_id = _beanstag_wild_check($curr_uri)) {
      // BeansTag exists as wild path.
      $beanstag = _beanstag_get_beanstag_by_id($beanstag_id);
      _beanstag_set_meta($beanstag, $head_elements);
    }
  }
}

/**
 * Implements process_html() for setting page title.
 */
function beanstag_process_html(&$vars) {
  $beanstag = _beanstag_get_beanstag_by_path_alias(request_path() ? request_path() : '<front>');
  if (!empty($beanstag)) {
    // BeansTag exists as exact path.
    _beanstag_set_title($beanstag, $vars);
  }
  elseif ($beanstag_id = _beanstag_wild_check(request_path())) {
    // BeansTag exists as wild path.
    $beanstag = _beanstag_get_beanstag_by_id($beanstag_id);
    _beanstag_set_title($beanstag, $vars);
  }
}

/**
 * Implements hook_load().
 *
 * Auto-load function for menu path argument %beanstag.
 */
function beanstag_load($conditions) {
  if (is_numeric($conditions)) {
    $conditions = array('id' => $conditions);
  }
  elseif (is_string($conditions)) {
    $conditions = array('path_alias' => $conditions);
  }
  elseif (!is_array($conditions)) {
    return FALSE;
  }
  $select = db_select('beanstag');
  foreach ($conditions as $field => $value) {
    $select->condition($field, $value);
  }
  return $select
    ->fields('beanstag')
    ->execute()
    ->fetchAssoc();
}

/**
 * Menu callback function to provide %beanstag_request_path argument.
 */
function beanstag_request_path_to_arg($arg) {
  // Save the current path to PHP session with a random string as session key.
  if (!isset($_SESSION['prev_path']) || !is_array($_SESSION['prev_path'])) {
    $_SESSION['prev_path'] = array();
  }
  $rand_str = substr(str_shuffle('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'), 0, 8);
  $_SESSION['prev_path'][$rand_str] = request_path() ? request_path() : '<front>';
  return $rand_str;
}

/**
 * Menu callback function to return the %beanstag_request_path argument.
 *
 * @see beanstag_request_path_to_arg($arg)
 */
function beanstag_request_path_load($arg) {
  return $arg;
}

/**
 * Implements hook_exit().
 */
function beanstag_exit($destination = NULL) {
  // Store current request page to user session.
  module_load_include('module', 'user', 'user');
  if (user_access('administer beanstag') && (!isset($_REQUEST['render']) || $_REQUEST['render'] != 'overlay')) {
    $_SESSION['last_request_page'] = request_path() ? request_path() : '<front>';
  }
}

/**
 * Check if the Beanstag exists.
 *
 * @params string $path_alias
 *   The path alias which we are checking for existence.
 * @params string $path_id
 *   The Beanstag ID which we want to exclude in the checking.
 *
 * @return bool
 *   Return TRUE if exists or FALSE otherwise.
 */
function _beanstag_exists($path_alias, $path_id = NULL) {
  $query = 'SELECT 1 FROM {beanstag} b WHERE b.path_alias = :path_alias';
  $query_params = array(':path_alias' => $path_alias);
  if (is_numeric($path_id)) {
    $query .= ' AND b.id <> :path_id';
    $query_params[':path_id'] = $path_id;
  }
  $result = db_query($query, $query_params);

  if ($result->rowCount() == 0) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Check if the path alias contains *.
 *
 * @params string $path_alias
 *   The path alias which we are checking for existence.
 *
 * @return string
 *   Return the Beanstag ID if found.
 */
function _beanstag_wild_check($path_alias) {
  $query = 'SELECT * FROM {beanstag} b WHERE b.path_alias LIKE :path_alias';
  $result = db_query($query, array(':path_alias' => '%/*'));

  $matched_chars = 0;
  $matched_beanstag_id = NULL;

  foreach ($result as $record) {
    $stored_path_alias = substr($record->path_alias, 0, -1);
    if (strpos($path_alias, $stored_path_alias) !== FALSE) {
      $new_matched_chars = similar_text($path_alias, $stored_path_alias);
      if ($new_matched_chars > $matched_chars) {
        $matched_chars = $new_matched_chars;
        $matched_beanstag_id = $record->id;
      }
    }
  }

  return $matched_beanstag_id;
}

/**
 * Set meta data.
 *
 * @params array $beanstag
 *   The Beanstag contain the meta data of the current url.
 * @params array $head_elements
 *   The elements inside <head> of the current url.
 */
function _beanstag_set_meta($beanstag, &$head_elements) {
  $data = array();
  if (arg(0) == 'node') {
    $data['node'] = node_load(arg(1));
  }
  elseif (arg(0) == 'term') {
    $data['term'] = term_load(arg(1));
  }

  // Insert meta description if it exists.
  if ($beanstag->meta_description) {
    $head_elements['beanstag_description'] = array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'description',
        'content' => check_plain(token_replace($beanstag->meta_description, $data)),
      ),
    );
  }

  // Insert meta keywords if it exists.
  if ($beanstag->meta_keywords) {
    $head_elements['beanstag_keywords'] = array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'keywords',
        'content' => check_plain(token_replace($beanstag->meta_keywords, $data)),
      ),
    );
  }

  // Insert meta robots if it exists and beanstag_enable_meta_robots is enabled.
  if (variable_get('beanstag_enable_meta_robots', 0) == 1) {
    if ($beanstag->meta_robots) {
      $head_elements['beanstag_robots'] = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
          'name' => 'robots',
          'content' => check_plain(token_replace($beanstag->meta_robots, $data)),
        ),
      );
    }
  }

  // Insert meta canonical,
  // if it exists and beanstag_enable_meta_canonical is enabled.
  if (variable_get('beanstag_enable_meta_canonical', 0) == 1) {
    if ($beanstag->meta_canonical) {
      $set_canonical = TRUE;

      // Check if there is any existing meta canonical.
      foreach ($head_elements as $key => $element) {
        if (isset($element['#attributes']['rel']) && $element['#attributes']['rel'] == 'canonical') {
          if (variable_get('beanstag_override', 0) == 1) {
            // Remove default canonical link,
            // if beanstag is configured to override existing meta canonical.
            unset($head_elements[$key]);
          }
          else {
            // Keep existing meta canonical.
            $set_canonical = FALSE;
          }
        }
      }

      if ($set_canonical) {
        $head_elements['beanstag_canonical'] = array(
          '#type' => 'html_tag',
          '#tag' => 'link',
          '#attributes' => array(
            'rel' => 'canonical',
            'href' => check_plain(token_replace($beanstag->meta_canonical, $data)),
          ),
        );
      }
    }
  }
}

/**
 * Set page title.
 *
 * @params array $beanstag
 *   The Beanstag contain the meta data of the current url.
 * @params array $vars
 *   The variables of hook_process_html().
 */
function _beanstag_set_title($beanstag, &$vars) {
  $data = array();
  if (arg(0) == 'node') {
    $data['node'] = node_load(arg(1));
  }
  elseif (arg(0) == 'term') {
    $data['term'] = term_load(arg(1));
  }
  if ($beanstag->page_title == '<none>') {
    $vars['head_title'] = variable_get('site_name');
  } else {
    $vars['head_title'] = check_plain(token_replace($beanstag->page_title, $data)) . ' | ' . variable_get('site_name');
  }
}

/**
 * Get beanstag by id.
 *
 * @params string $id
 *   The Beanstag ID for retriving the Beanstag data.
 *
 * @return object
 *   Return the found Beanstag.
 */
function _beanstag_get_beanstag_by_id($id) {
  $result = db_query('SELECT * FROM {beanstag} b WHERE b.id = :id', array(':id' => $id));
  return $result->fetchObject();
}

/**
 * Get beanstag id by path alias.
 *
 * @params string $path_alias
 *   The path alias for searhing the Beanstag ID.
 *
 * @return string
 *   Return the found Beanstag ID.
 */
function _beanstag_get_id_by_path_alias($path_alias) {
  $result = db_query('SELECT b.id FROM {beanstag} b WHERE b.path_alias = :path_alias', array(':path_alias' => $path_alias));
  return $result->fetchObject()->id;
}

/**
 * Get beanstag by path alias.
 *
 * @params string $path_alias
 *   The path alias for searhing the Beanstag data.
 *
 *
 * @return object
 *   Return the found Beanstag.
 */
function _beanstag_get_beanstag_by_path_alias($path_alias) {
  $result = db_select('beanstag')
    ->fields('beanstag')
    ->condition('path_alias', $path_alias)
    ->range(0, 1)
    ->execute();

  return $result->fetchObject();
}
