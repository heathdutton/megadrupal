<?php
/**
 * @file paypal_ipn_rules.module
 * hooks
 */
function paypal_ipn_rules_paypal_ipn_entity_notification(PaypalIpnListener $listener, $entity_type, $entity_id) {
  $entity_wrapper = entity_metadata_wrapper($entity_type, $entity_id);
  $ipn_post = _paypal_ipn_rules_create_ipn_post($listener);
  rules_invoke_event('paypal_ipn_entity', $ipn_post, $entity_wrapper);
}
function paypal_ipn_rules_paypal_ipn_notification(PaypalIpnListener $listener){
  $ipn_post = _paypal_ipn_rules_create_ipn_post($listener);
  rules_invoke_event('paypal_ipn', $ipn_post);
}

/**
 * @param PaypalIpnListener $listener
 */
function _paypal_ipn_rules_create_ipn_post(PaypalIpnListener $listener) {
  // @todo for now just copy post. Should any values be filtered out?
  $ipn_post =  $_POST;
  $ipn_post['is_completed'] = $listener->isCompleted();
  return $ipn_post;
}

/**
 * Implements hook_token_info().
 */
function paypal_ipn_rules_token_info() {
  $info = array();

  $type = array(
    'name' => t('Paypal IPN'),
    'description' => t('Tokens related to Paypal IPN.'),
    'needs-data' => 'paypal_ipn',
  );
  $info = _paypal_ipn_rules_known_fields_info();
  foreach ($info as $field_name => $field_info) {
    $tokens[$field_name] = array(
      'name' => $field_name,
      'description' => t('@field info from PayPal IPN', array('@field' => $field_name)),
    );
  }


  return array(
    'types' => array('paypal_ipn' => $type),
    'tokens' => array('paypal_ipn' => $tokens),
  );

}

/**
 * Implements hook_tokens().
 */
function paypal_ipn_rules_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $return = array();
  if ($type == 'paypal_ipn' && !empty($data['paypal_ipn'])) {
    foreach ($tokens as $name => $original) {
      $return[$original] = $data['paypal_ipn'][$name];
    }
  }

  return $return;
}
/**
 * Create known fields array.
 * @return array
 */
function _paypal_ipn_rules_known_fields_info() {
  $fields =  array(
    'mc_gross',
    'protection_eligibility',
    'address_status',
    'payer_id',
    'tax',
    'address_street',
    'payment_date',
    'payment_status',
    'charset',
    'address_zip',
    'first_name',
    'mc_fee',
    'address_country_code',
    'address_name',
    'notify_version',
    'payer_status',
    'business',
    'address_country',
    'address_city',
    'quantity',
    'verify_sign',
    'payer_email',
    'txn_id',
    'payment_type',
    'btn_id',
    'last_name',
    'address_state',
    'receiver_email',
    'payment_fee',
    'shipping_discount',
    'insurance_amount',
    'receiver_id',
    'txn_type',
    'item_name',
    'discount',
    'mc_currency',
    'residence_country',
    'test_ipn',
    'shipping_method',
    'handling_amount',
    'payment_gross',
    'shipping',
    'ipn_track_id',
    'custom',
    'item_number ',
    'transaction_subject',
  );
  $fields_info = array();
  foreach ($fields as $field) {
    $fields_info[$field] = array(
      'type' => 'text',
      'label' => $field,
    );
  }
  $fields_info['is_completed'] = array(
    'type' => 'boolean',
    'label' => t('Is Completed?'),
  );
  // @todo Edit know field types such as dates, emails, etc
  return $fields_info;

}