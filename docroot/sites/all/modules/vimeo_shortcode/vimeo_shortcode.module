<?php
/**
 * @file
 * Adds a theme function and input filter to assist in embedding Vimeo players into textareas.
 */
 
function vimeo_shortcode_menu() {
     $items['admin/config/media/vimeo-shortcode'] = array(
    'title' => 'Vimeo shortcode',
    'description' => 'Adjust vimeo shortcode settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vimeo_shortcode_settings'),
    'access arguments' => array('change vimeo shortcode settings'),
  );
  return $items; 
} 

/**
 * Implements hook_permission().
 */
function vimeo_shortcode_permission() {
  return array(
    'change vimeo shortcode settings' => array(
      'title' => t('Change vimeo shortcode setting'),
      'description' => t('Change settings such as default width and height, and restrict the kinds of videos that can be shown.'),
    ),
  );
}    
 

/**
 * Implements hook_theme().
 */
function vimeo_shortcode_theme() {
  return array(
    'vimeo_shortcode' => array(
      'variables' => array(
        'options' => array(),
        'classes' => '',
        'caption' => '',
        'embed_code' => ''
      ),
      'template' => 'theme/vimeo-embedded-player',
    ),
  );
}


/**
 * Implements hook_libraries_info().
 */
function vimeo_shortcode_libraries_info() {
  $libraries = array();
  $libraries['fluidvids'] = array(
    'name' => 'FluidVids',
    'vendor url' => 'http://toddmotto.com/labs/fluidvids',
    'download url' => 'https://github.com/toddmotto/fluidvids/archive/master.zip',
    'version callback' => 'short_circuit_version',
    'files' => array(
      'js' => array(
        'dist/fluidvids.min.js',
      ),
    ),
  );
  return $libraries;  
}


/**
* Short-circuit the version argument.
* from http://atendesigngroup.com/blog/adding-js-libraries-drupal-project-libraries-api
*/
function short_circuit_version() { 
  return TRUE;
}

/* This is not ideal - right now this is loading on every page load
   we should get it so it loads only when the videos load
   but then it doesnt appear when page is cached */
function vimeo_shortcode_init() {
  // Load js libraries if there
  if(module_exists('libraries') && $library = libraries_load('fluidvids')) {
    if($library['loaded']) {
      drupal_add_js("Fluidvids.init({ selector: 'iframe', players: ['player.vimeo.com']});", array('type' => 'inline', 'scope' => 'footer'));
    }
  }
}

/**
 * Implements hook_preprocess_theme().
 */
function vimeo_shortcode_preprocess_vimeo_shortcode(&$variables) {

  // Add classes to outer div of template
  if (isset($variables['options']['class'])) {
    $classes = explode(' ', $variables['options']['class']);
    foreach($classes as $class) {
      $variables['classes_array'][] = $class;
    }
  }
  if (isset($variables['options']['caption'])) {
    $caption = trim($variables['options']['caption']);
    $variables['caption'] = !empty($caption) ? '<div class="caption">' . $caption . '</div>' : ' ';
  }
  $video_url = $variables['options']['url'];

  $xml_url = 'http://vimeo.com/api/oembed.xml?url=' . rawurlencode($video_url);

  if(!empty($variables['options']['width'])) {
    $xml_url .= '&width=' . $variables['options']['width'];
  }
  if(!empty($variables['options']['height'])) {
    $xml_url .= '&height=' . $variables['options']['height'];
  }
  $oembed = simplexml_load_string(curl_get($xml_url));
  
  if (variable_get('vimeo_shortcode_plus', 1) && $oembed->is_plus == 0) {
    $variables['embed_code'] = t('Only Vimeo Plus videos may be embedded here');
  }  
  $restrict = variable_get('vimeo_shortcode_restrict_owners', '');
  $owners = explode("\n", $restrict);
  
  if (!empty($restrict) && !in_array($oembed->author_url, $owners)) {
    $variables['embed_code'] = t('The Vimeo account specified may not embed videos on this site.');   
  }    
  else {     
    $variables['embed_code'] = html_entity_decode($oembed->html);
  }  
}  


function vimeo_shortcode_filter_info() {
  $filters['vimeo_shortcode'] = array(
    'title' => t('Video shortcode filter'), 
    'description' => t('Substitutes [video url=""] with embedding code.'), 
    'process callback' => '_vimeo_shortcode_filter_process_text', 
    'tips callback' => '_vimeo_shortcode_filter_tips',
  );

  return $filters;
}

/**
 * Processes text obtained from the input filter.
 * 
 * This function processes the filter text that the user has added to the text area.
 * If the filter is wrapped in <p></p> then these are stripped as part of the processing
 * This eliminates a validation error in the resulting mark up if the filter is
 * being used in conjunction with other HTML filters that correct line breaks.
 * It won't work in EVERY case, but it will work in MOST cases.
 * Filters that are embedded in-line with text will continue to fail validation.
 */
function _vimeo_shortcode_filter_process_text($text, $filter) {
  $endl = chr(13) ;
  if (preg_match_all('@(?:<p>)?\[(vimeo|video)\s*(.*?)\](?:</p>)?@s', $text, $match)) {
    
    // set these in settings menu
    $allowed_parameters = array('url', 'width', 'image', 'height', 'class', 'caption');
    $match_vars = array();
    
    // Initialise an array to hold playlist arrays
    $files = array();
    $matched = array();
    $replace = array();
    $prepared = array();
    
    foreach ($match[2] as $key => $passed_parameters) { 

      preg_match_all('/(\w*)=(?:\"|&quot;)(.*?)(?:\"|&quot;)/', $passed_parameters, $match_vars[$key]);
      
      // Process the parameters onto the $options array.
      // Search for standard parameters, parse the values out onto the array.
      
      foreach ($match_vars[$key][1] as $vars_key => $vars_name) {
        
        $options = array();
        if (in_array($vars_name, $allowed_parameters)) {
              
          $prepared[$key][$vars_name] = $match_vars[$key][2][$vars_key];
          unset($match_vars[$key][1][$vars_key]);
        }
      }  
      $options = $prepared[$key];
      
        $replace = theme('vimeo_shortcode', array(
         'options' => $options,
        ));
      
        $matched[] = $match[0][$key];
        $rewrite[] = $replace;
      }  
      return str_replace($matched, $rewrite, $text);

  }
  return $text;
}

function _vimeo_shortcode_filter_tips () {
   return 'Use [vimeo:url="..." width="" height=""] to embed vimeo videos]';   
}  

// Curl helper function to retrieve data using API
function curl_get($url) {
    $curl = curl_init($url);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($curl, CURLOPT_TIMEOUT, 30);
    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);
    $return = curl_exec($curl);
    curl_close($curl);
    return $return;
} 

function vimeo_shortcode_settings() {
    
  $form['vimeo'] = array(
    '#type' => 'fieldset',
    '#title' => t('Vimeo settings'),
  );  
    
  $form['vimeo']['vimeo_shortcode_plus'] = array(
    '#type' => 'checkbox',
    '#title' => t('Only embed Vimeo plus videos'),
    '#default_value' => variable_get('vimeo_shortcode_plus', 1),
    '#description' => t('Useful if you want to keep your site free of other brands.'),
  );
  $form['vimeo']['vimeo_shortcode_restrict_owners'] = array(
    '#type' => 'textarea',
    '#title' => t('Restrict videos to the following owners'),
    '#default_value' => variable_get('vimeo_shortcode_restrict_owners', ''),
    '#description' => t('Place one username per line. If no users specified, then none will be imported'),
  );
 
  return system_settings_form($form);
} 



