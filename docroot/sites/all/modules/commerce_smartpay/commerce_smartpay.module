<?php

/**
 * @file
 * Provides Smartpay hosted payment method for Drupal Commerce.
 */

module_load_include('inc', 'commerce_smartpay', 'includes/commerce_smartpay_constants');

/**
 * Implements hook_menu().
 */
function commerce_smartpay_menu() {
  $items = array();

  // Define a settings page.
  $items['admin/commerce/config/smartpay'] = array(
    'title' => 'Smartpay settings',
    'description' => 'Configure the settings for the Smartpay payment gateway integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_smartpay_settings_form'),
    'access arguments' => array('administer smartpay'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/commerce_smartpay.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_smartpay_permission() {
  $permissions = array(
    'administer smartpay' => array(
      'title' => t('Administer Smartpay'),
      'description' => t('Configure Smartpay Settings.'),
      'restrict access' => TRUE,
    ),
  );
  return $permissions;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_smartpay_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_smartpay_form'] = array(
    'base' => 'commerce_smartpay_form',
    'title' => t('Smartpay Hosted Payment Integration'),
    'display_title' => t('Credit or Debit card'),
    'short_title' => t('Smartpay'),
    'description' => t('Integration with Smartpay hosted payment.'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
    'file' => 'includes/commerce_smartpay_form.inc',
  );
  return $payment_methods;
}

/**
 * Create a Transaction and associate it with the order.
 */
function commerce_smartpay_transaction($payment_method, $order, $charge, $tokens, $auth_result, $remote_status, $transaction = NULL) {

  if (!isset($transaction)) {
    $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
    $transaction->amount = $charge['amount'];
    $transaction->currency_code = $charge['currency_code'];
  }

  $transaction->remote_status = $remote_status;
  $transaction->status = $auth_result;

  $transaction_message = 'auth_result: @auth_result. ';
  $transaction_message .= 'merchant_sig=@merchant_sig. ';
  $transaction_message .= 'merchant_reference=@merchant_reference. ';
  $transaction_message .= 'psp_reference=@psp_reference. ';

  $transaction->message = $transaction_message;
  $transaction->message_variables = array(
    '@auth_result' => $auth_result,
    '@merchant_sig' => $tokens['merchant_sig'],
    '@merchant_reference' => $tokens['merchant_reference'],
    '@psp_reference' => $tokens['psp_reference'],
  );
  $transaction->payload = $_GET;

  commerce_payment_transaction_save($transaction);
}
