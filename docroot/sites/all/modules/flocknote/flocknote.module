<?php

/**
 * @file
 * Flocknote Module for Drupal.
 *
 * Currently, this module provides the following features for Drupal websites:
 *   - Authenticate website with Flocknote API.
 *   - Subscribe new site users to a Flocknote list.
 *   - Block for Simple Subscribe widget embed.
 *   - Block for Registration embed.
 *   - Block for List Notes embed.
 *
 * @author Jeff Geerling
 * @see http://www.flocknote.com/
 */

/******************************************************************************
* CORE HOOKS
******************************************************************************/

/**
 * Implements hook_menu().
 */
function flocknote_menu() {
  $items['admin/config/services/flocknote'] = array(
    'title' => 'Flocknote Settings',
    'description' => 'Manage Flocknote settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flocknote_admin_form'),
    'access arguments' => array('administer flocknote'),
    'file' => 'includes/flocknote.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/flocknote/settings'] = array(
    'title' => 'Flocknote Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/config/services/flocknote/authentication'] = array(
    'title' => 'API Authentication',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flocknote_authentication_form'),
    'access arguments' => array('administer flocknote'),
    'file' => 'includes/flocknote.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function flocknote_permission() {
  return array(
    'administer flocknote' => array(
      'title' => t('Administer Flocknote'),
      'description' => t('Administer Flocknote settings.'),
    ),
  );
}

/**
 * Implements hook_user_insert().
 */
function flocknote_user_insert(&$edit, $account, $category) {
  // Subscribe user if user checks the subscribe checkbox.
  if (isset($edit['flocknote_subscribe']) && $edit['flocknote_subscribe']) {
    flocknote_subscribe_user_to_list($account->uid, $account->mail);
  }
}

/**
 * Implements hook_block_info().
 */
function flocknote_block_info() {
  $blocks['simple_subscribe'] = array(
    'info' => t('Flocknote Simple Subscribe Widget'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['register'] = array(
    'info' => t('Flocknote Registration'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['notes'] = array(
    'info' => t('Flocknote List Notes'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function flocknote_block_configure($delta) {
  $form = array();

  switch ($delta) {
    case 'simple_subscribe':
      $form['flocknote_simple_subscribe_list'] = array(
        '#type' => 'textfield',
        '#title' => t('List ID'),
        '#description' => t("Enter the Flocknote List ID to which people should be subscribed after entering their email addresses."),
        '#size' => 8,
        '#default_value' => variable_get('flocknote_simple_subscribe_list', ''),
      );
      break;

    case 'register':
      $form['flocknote_register_network'] = array(
        '#type' => 'textfield',
        '#title' => t('Network Name or ID'),
        '#description' => t("Enter the network short name (vanity URL) or ID to which people should be registered."),
        '#size' => 20,
        '#default_value' => variable_get('flocknote_register_network', ''),
      );
      break;

    case 'notes':
      $form['flocknote_notes_lists'] = array(
        '#type' => 'textfield',
        '#title' => t('List IDs to Show'),
        '#description' => t("Enter a comma-separated list of list IDs whose notes you would like displayed. Example: <code>123, 456, 789</code>."),
        '#size' => 20,
        '#default_value' => variable_get('flocknote_notes_lists', array()),
      );
      break;
  }

  return $form;
}

/**
 * Implements hook_block_configure().
 */
function flocknote_block_save($delta, $edit) {
  switch ($delta) {
    case 'simple_subscribe':
      variable_set('flocknote_simple_subscribe_list', $edit['flocknote_simple_subscribe_list']);
      break;

    case 'register':
      variable_set('flocknote_register_network', $edit['flocknote_register_network']);
      break;

    case 'notes':
      // Convert notes field into an array, and trim values.
      $notes = explode(',', $edit['flocknote_notes_lists']);
      foreach ($notes as $key => $value) {
        $notes[$key] = trim($value);
      }
      variable_set('flocknote_notes_lists', $notes);
      break;
  }
}

/**
 * Implements hook_block_view().
 */
function flocknote_block_view($delta) {
  $block = array();

  switch ($delta) {
    case 'simple_subscribe':
      $list_id = variable_get('flocknote_simple_subscribe_list', '');
      if (!empty($list_id)) {
        $block['subject'] = NULL;
        $block['content'] = array(
          '#theme' => 'flocknote_simple_subscribe',
          '#list' => $list_id,
        );
      }
      break;

    case 'register':
      $network = variable_get('flocknote_register_network', '');
      if (!empty($network)) {
        $block['subject'] = NULL;
        $block['content'] = array(
          '#theme' => 'flocknote_register',
          '#network' => $network,
        );
      }
      break;

    case 'notes':
      $lists = variable_get('flocknote_notes_lists', array());
      if (!empty($lists)) {
        $block['subject'] = NULL;
        $block['content'] = array(
          '#theme' => 'flocknote_notes',
          '#lists' => $lists,
        );
      }
      break;
  }

  return $block;
}

/******************************************************************************
* THEME FUNCTIONS
******************************************************************************/

/**
 * Implements hook_theme().
 */
function flocknote_theme() {
  return array(
    'flocknote_simple_subscribe' => array(
      'variables' => array(
        'list' => NULL,
      ),
    ),
    'flocknote_register' => array(
      'variables' => array(
        'network' => NULL,
      ),
    ),
    'flocknote_notes' => array(
      'variables' => array(
        'lists' => NULL,
      ),
    ),
  );
}

/**
 * Theme function for simple subscribe widget.
 */
function theme_flocknote_simple_subscribe($variables) {
  $output = '';
  $output .= '<iframe width="100%" height="185" frameborder="0" scrolling="no"';
  $output .= ' src="http://www.flocknote.com/embed/subscribe-widget/' . $variables['list'] . '?title=Subscribe&subtitle=Get+updates+sent+to+your+inbox%21"';
  $output .= ' style="overflow:hidden;border:1px solid #DDDDDD;">';
  $output .= '<p>Your browser does not support iframes. Please update your browser to use this feature!</p>';
  $output .= '</iframe>';
  return $output;
}

/**
 * Theme function for registration widget.
 */
function theme_flocknote_register($variables) {
  $output = '<iframe width="100%" height="550" frameborder="0"';
  $output .= ' src="https://www.flocknote.com/embed/register/' . $variables['network'] . '"';
  $output .= ' style="border:1px solid #DDDDDD;">';
  $output .= '<p>Your browser does not support iframes. Please update your browser to use this feature!</p>';
  $output .= '</iframe>';
  return $output;
}

/**
 * Theme function for latest notes widget.
 */
function theme_flocknote_notes($variables) {
  $output = '';
  $lists = implode('+', $variables['lists']);
  $output .= '<iframe width="100%" height="400" frameborder="0" scrolling="no"';
  $output .= ' src="https://www.flocknote.com/embed/list-notes-widget?lists=' . $lists . '"';
  $output .= ' style="overflow:hidden;border:1px solid #DDDDDD;">';
  $output .= '<p>Your browser does not support iframes. Please update your browser to use this feature!</p>';
  $output .= '</iframe>';
  return $output;
}

/******************************************************************************
* FORM ALTERS
******************************************************************************/

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * If site has Flocknote registration subscriptions enabled, add a checkbox to
 * the user registration form and add submit handler to subscribe the new user
 * to the Flocknote List upon successful registration.
 */
function flocknote_form_user_register_form_alter(&$form, &$form_state) {
  // Add checkbox to registration form if registration subscriptions enabled.
  if (variable_get('flocknote_registration_enabled', 0)) {
    $form['flocknote_subscribe'] = array(
      '#type' => 'checkbox',
      '#title' => t('Subscribe to email updates'),
      '#description' => t("If this box is checked, you agree to receive emails from our email list, managed through Flocknote. You may unsubscribe at any time."),
      '#default_value' => 1,
      '#weight' => 10,
    );
  }
}

/******************************************************************************
* FLOCKNOTE API FUNCTIONS
******************************************************************************/

/**
 * Convenience method of getting an instance of the Flocknote API.
 *
 * @return
 *   Authenticated $flocknote API object, or NULL if auth info is invalid.
 */
function flocknote_get_api_instance() {
  if ($auth_info = flocknote_get_authentication_info()) {
    $flocknote = new Flocknote($auth_info['app_id'], $auth_info['app_key']);
    $flocknote->setUserCredentials($auth_info['user'], $auth_info['pass']);
    return $flocknote;
  }
  return NULL;
}

/**
 * Get stored Authentication info for API access.
 *
 * @param $auth_check
 *   Set to FALSE if you want to skip the authentication check and just verify
 *   that auth info exists.
 *
 * @return (array)
 *   Authentication information for this site.
 */
function flocknote_get_authentication_info($auth_check = TRUE) {
  // Retrieve auth info from serialized variable.
  $auth_info = variable_get('flocknote_auth_info', _flocknote_default_authentication_info());

  // Decrypt the password.
  _flocknote_auth_info_password_decrypt($auth_info);

  // Use the Flocknote API to check the auth info.
  if ($auth_check) {
    $auth_info['verified'] = flocknote_verify_authentication_info($auth_info);
  }
  // Otherwise, assume info is verified already.
  else {
    $auth_info['verified'] = TRUE;
  }

  return $auth_info;
}

/**
 * Verify an array of authentication info using the Flocknote API.
 *
 * @param $auth_info
 *   Authentication information to be verified.
 *
 * @return (bool)
 *   TRUE if information is correct, FALSE otherwise.
 */
function flocknote_verify_authentication_info($auth_info) {
  // Make sure each key has a value; if not, quickly return FALSE.
  foreach ($auth_info as $key) {
    if (empty($key)) {
      return FALSE;
    }
  }

  // Create a new Flocknote API instance and log in to verify auth info.
  $flocknote = new Flocknote($auth_info['app_id'], $auth_info['app_key']);
  $flocknote->setUserCredentials($auth_info['user'], $auth_info['pass']);
  return $flocknote->logIn();
}

/**
 * Subscribe an user to the list configured in Flocknote's settings.
 *
 * @param $uid
 *   User ID.
 * @param $email
 *   Email address.
 *
 * @return
 *   Flocknote Member ID if successful, FALSE otherwise.
 */
function flocknote_subscribe_user_to_list($uid, $email) {
  // Get the list id.
  $list_id = variable_get('flocknote_registration_list_id', 0);

  // Create a new Flocknote API instance and subscribe the member.
  if ($flocknote = flocknote_get_api_instance()) {
    $member = array(
      'email' => $email,
      'list_id' => $list_id,
    );

    // Allow other modules to alter the member about to be subscribed.
    drupal_alter('flocknote_member', $member);

    // Add the member using the Flocknote API.
    $member = $flocknote->addMember($member);
    // If member was created, save record of successful subscribe.
    if (isset($member['id'])) {
      db_insert('flocknote_registration_subscribers')
        ->fields(array(
          'uid' => $uid,
          'list_id' => $list_id,
          'flocknote_member_id' => $member['id'],
        ))
        ->execute();
    }
    // Otherwise, log an error.
    else {
      watchdog('flocknote', "Couldn't subscribe user with uid !uid and email !address to List !list_id", array(
        '!uid' => $uid,
        '!address' => $email,
        '!list_id' => $list_id,
      ));
    }
  }
}

/******************************************************************************
* HELPER FUNCTIONS
******************************************************************************/

/**
 * Encode the password in the auth info array.
 */
function _flocknote_auth_info_password_encrypt(&$auth_info) {
  if (empty($auth_info['pass'])) {
    return;
  }

  $password = $auth_info['pass'];

  // Encrypt the password.
  $key = drupal_get_hash_salt();
  $encrypted_password = mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $password, MCRYPT_MODE_CBC);

  $auth_info['pass'] = $encrypted_password;
}

/**
 * Decode the password in the auth info array.
 */
function _flocknote_auth_info_password_decrypt(&$auth_info) {
  if (empty($auth_info['pass'])) {
    return;
  }

  $encrypted_password = $auth_info['pass'];

  // Decrypt the password (trim to remove extra decrypted whitespace).
  $key = drupal_get_hash_salt();
  $decrypted_password = trim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $key, $encrypted_password, MCRYPT_MODE_CBC));

  $auth_info['pass'] = $decrypted_password;
}

/**
 * Returns an array of default auth info.
 *
 * @return (array)
 *   Array of authentication information including the following keys:
 *     app_id
 *     app_key
 *     user
 *     pass
 *     verified
 */
function _flocknote_default_authentication_info() {
  return array(
    'app_id' => NULL,
    'app_key' => NULL,
    'user' => NULL,
    'pass' => NULL,
    'verified' => FALSE,
  );
}
