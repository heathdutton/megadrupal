<?php

/*
 * Order needs to be created with ADS WS.
 */
define('ORDER_TO_BE_CREATED', 0);
/*
 * Order was already sent with ADS WS.
 */
define('ORDER_SENT', 1);
/*
 * Order needs to be updated with ADS WS.
 */
define('ORDER_TO_BE_UPDATED', 2);
/*
 * Order doesn't need any operation with ADS WS.
 */
define('ORDER_NOTHING_TO_DO', -1);
/*
 * Product needs to be created with ADS WS.
 */
define('PRODUCT_TO_BE_CREATED', 0);
/*
 * Product needs to be updated with ADS WS.
 */
define('PRODUCT_TO_BE_UPDATED', 1);
/*
 * Product was already sent with ADS WS.
 */
define('PRODUCT_SENT', -1);

/**
 * Name of the variable used to mark the product update as running.
 */
define('COMMERCE_ADS_WS_PRODUCT_UPDATE_RUNNING', 'commerce_ads_ws_product_update_running');

/**
 * Name of the variable used to mark the order update as running.
 */
define('COMMERCE_ADS_WS_ORDER_UPDATE_RUNNING', 'commerce_ads_ws_order_update_running');

/**
 * ADS webservice base URLs for live and test environments.
 */
define('COMMERCE_ADS_WS_URL_LIVE', 'http://ws.alpha-direct-services.com:8018/');
define('COMMERCE_ADS_WS_URL_TEST', 'http://ws.alpha-direct-services.com:8023/');

/**
 * ADS prod and test internal environment names.
 */
define('COMMERCE_ADS_WS_MODE_LIVE', 'live');
define('COMMERCE_ADS_WS_MODE_TEST', 'test');



include_once 'includes/commerce_ads.webservice.inc';

/**
 * Implements hook_menu().
 */
function commerce_ads_menu() {
  $items = array();
  $items['admin/commerce/config/commerce_ads'] = array(
    'title' => 'ADS',
    'description' => 'Manage ADS Settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_ads_configure_form'),
    'access arguments' => array('administer ads'),
    'file' => 'includes/commerce_ads.admin.inc',
  );
  // Ads settings form.
  $items['admin/commerce/config/commerce_ads/configure'] = array(
    'title' => 'Configure',
    'description' => 'Manage your ADS Account feeds',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  // Product settings form.
  $items['admin/commerce/config/commerce_ads/products'] = array(
    'title' => 'Products',
    'description' => 'Product settings.',
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_ads_product_configure_form'),
    'access arguments' => array('administer ads'),
    'file' => 'includes/commerce_ads.admin.inc',
  );
  // Order settings form.
  $items['admin/commerce/config/commerce_ads/orders'] = array(
    'title' => 'Orders',
    'description' => 'Order settings.',
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_ads_order_configure_form'),
    'access arguments' => array('administer ads'),
    'file' => 'includes/commerce_ads.admin.inc',
  );
  // Shipping settings form.
  $items['admin/commerce/config/commerce_ads/shipping'] = array(
    'title' => 'Shipping',
    'description' => 'Shipping settings.',
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_ads_shipping_configure_form'),
    'access arguments' => array('administer ads'),
    'file' => 'includes/commerce_ads.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_cron().
 */
function commerce_ads_cron() {
  $commerce_ads_ws = variable_get('commerce_ads_ws', array());

  // Send all order to ads.
  if (!empty($commerce_ads_ws['ads_order_send_frequency']) && time() >= $commerce_ads_ws['ads_order_send_next_run']) {
    $commerce_ads_ws['ads_order_send_next_run'] = time() + $commerce_ads_ws['ads_order_send_frequency'];
    commerce_ads_send_all_orders();
    variable_set('commerce_ads_ws', $commerce_ads_ws);
  }

  // Update all order on ads side.
  if (!empty($commerce_ads_ws['ads_order_update_frequency']) && time() >= $commerce_ads_ws['ads_order_update_next_run']) {
    $commerce_ads_ws['ads_order_update_next_run'] = time() + $commerce_ads_ws['ads_order_update_frequency'];
    commerce_ads_update_all_orders();
    variable_set('commerce_ads_ws', $commerce_ads_ws);
  }

  // Synchronize products.
  if (!empty($commerce_ads_ws['ads_product_send_frequency']) && time() >= $commerce_ads_ws['ads_product_send_next_run']) {
    $commerce_ads_ws['ads_product_send_next_run'] = time() + $commerce_ads_ws['ads_product_send_frequency'];
    commerce_ads_send_all_products();
    variable_set('commerce_ads_ws', $commerce_ads_ws);
  }

  // Synchronize product stocks.
  if (!empty($commerce_ads_ws['ads_product_stock_sync_frequency']) && time() >= $commerce_ads_ws['ads_product_stock_sync_next_run']) {
    $commerce_ads_ws['ads_product_stock_sync_next_run'] = time() + $commerce_ads_ws['ads_product_stock_sync_frequency'];
    commerce_ads_update_stock_for_all_products();
    variable_set('commerce_ads_ws', $commerce_ads_ws);
  }
}

/**
 * Gets field value of the given entity from ADS mapping field.
 *
 * @param $ads_field_name
 *  The field name on ADS side.
 * @param $entity_wrapped
 *  The entity we want to get field value from.
 * @param $mapping
 *  The mapping of the ADS/Drupal fields for this entity.
 * @param $entity_type
 *  The entity type of the entity.
 *
 * @return bool|string
 *  The field value.
 */
function commerce_ads_get_field_value($ads_field_name, $entity_wrapped, $mapping, $entity_type) {
  if (!empty($mapping[$ads_field_name])) {
    foreach ($mapping[$ads_field_name] as $field) {
      $field = explode('|', $field);
      $entity = $entity_wrapped->value();
      $field_info = field_info_instance($entity_type, $field[0], $entity->type);
      // If field exist on this entity bundle.
      if (!empty($field_info)) {
        $field_info = field_info_field($field[0]);
        // Get different value depending on field type.
        $field_value = $entity_wrapped->$field[0]->value();
        // If field allows for multiple values, we want only the first one.
        if ($field_info['cardinality'] <> 1) {
          $field_value = $field_value[0];
        }
        if ($field_info['type'] === 'image' && !empty($field_value['uri'])) {
          return file_create_url($field_value['uri']);
        }
        elseif (in_array($field_info['type'], array('datetime', 'date', 'datestamp', 'number_decimal', 'number_float', 'number_integer', 'list_float', 'list_integer', 'list_text', 'text_long', 'text', 'text_long', 'text_with_summary', 'physical_dimensions', 'physical_weight'))) {
          return $field_value;
        }
        elseif ($field_info['type'] === 'list_boolean') {
          return $field_value ? 'TRUE' : 'FALSE';
        }
        elseif ($field_info['type'] === "taxonomy_term_reference") {
          return $entity_wrapped->$field[0]->name->value();
        }
        elseif ($field_info['type'] === "text_with_summary" && !empty($field_value['safe_value'])) {
          return $field_value['safe_value'];
        }
        elseif ($field_info['type'] === "addressfield") {
          return $entity_wrapped->$field[0]->$field[1]->value();
        }
      }
    }
  }
  return '';
}

/**
 * Get product translation for it to be sent to ADS.
 *
 * @param $entity_wrapped
 *  The entity we need to get translation from.
 *
 * @return array
 *  Return array of translation with langcode and translation for each language.
 */
function commerce_ads_get_product_translation($entity_wrapped) {
  $commerce_ads_ws = variable_get('commerce_ads_ws', array());
  $translation = array();
  if (!empty($commerce_ads_ws['ads_product_mapping']['TranslationEntity'])) {
    foreach ($commerce_ads_ws['ads_product_mapping']['TranslationEntity'] as $field) {
      foreach (field_available_languages($entity_wrapped->type->value(), field_info_field($field)) as $langcode) {
        $items = field_get_items('commerce_product', $entity_wrapped->value(), $field, $langcode);
        if ($langcode === LANGUAGE_NONE) {
          $langcode = "EN";
        }
        if (!empty($items[0]['value'])) {
          $translation[$langcode] = $items[0]['value'];
        }
        else {
          $translation[$langcode] = $entity_wrapped->title->value();
        }
      }
    }
  }
  // If no product field was mapped to TranslationEntity,
  // let's just return entity title property.
  else {
    global $language;
    if (!$entity_language = entity_language($entity_wrapped->type->value(), $entity_wrapped->value())) {
      $entity_language = $language->language;
    }
    $translation[$entity_language] = $entity_wrapped->title->value();
  }
  return $translation;
}

/**
 * Get the order info that the ADS WS needs to create/update an order.
 *
 * @param $order_wrapper
 *  The order wrapped with entity_metadata_wrapper.
 *
 * @return array
 *  An array with the info ADS needs.
 */
function commerce_ads_get_order_info($order_wrapper) {
  $commerce_ads_ws = variable_get('commerce_ads_ws', array());
  $order_line_item_info = array();
  if (!empty($order_wrapper->commerce_line_items)) {
    foreach ($order_wrapper->commerce_line_items->value() as $line_item) {
      $line_item = entity_metadata_wrapper('commerce_line_item', $line_item);
      if ($line_item->type->value() == "shipping") {
        if (!empty($commerce_ads_ws['ads_shipping_services'][$line_item->commerce_shipping_service->value()])) {
          $order_line_item_info['DeliverymanId'] = $commerce_ads_ws['ads_shipping_services'][$line_item->commerce_shipping_service->value()];
        }
      }
      elseif (
        in_array($line_item->type->value(), commerce_product_line_item_types())
        && in_array($line_item->commerce_product->type->value(), $commerce_ads_ws['ads_product_types'])
      ) {
        $order_line_item_info['products'][] = array(
          'ProductId' => $line_item->commerce_product->sku->value(),
          'Label' => $line_item->commerce_product->title->value(),
          'Quantity' => $line_item->quantity->value(),
        );
      }
    }
  }
  return $order_line_item_info;
}

/**
 * Implements hook_commerce_product_load().
 */
function commerce_ads_commerce_product_load($products) {
  $commerce_ads_ws = variable_get('commerce_ads_ws', array());

  // Update product stock information if required.
  if (
    !empty($commerce_ads_ws['ads_product_stock_sync_load'])
    && module_exists('commerce_stock')
    // Do not call ADS API if the batch update is already running.
    && !variable_get(COMMERCE_ADS_WS_PRODUCT_UPDATE_RUNNING, FALSE)
  ) {
    // Set variable to mark batch update running. This will disable
    // parallel calls to ADS API while products are being updated.
    variable_set(COMMERCE_ADS_WS_PRODUCT_UPDATE_RUNNING, TRUE);

    // Get stock for all products from ADS.
    $stocks = commerce_ads_get_stock_for_all_products();

    // Update stock for all loaded products.
    foreach ($products as $product) {
      if (!empty($stocks[$product->sku])) {
        commerce_ads_update_product_stock($product, $stocks[$product->sku]);
      }
    }

    // Delete variable marking batch product update as running.
    variable_del(COMMERCE_ADS_WS_PRODUCT_UPDATE_RUNNING);
  }
}

/**
 * Updates product entity with relevant stock values.
 *
 * @param object $product
 *   A commerce_product entity.
 * @param array $stock_item
 *   An array of stock information for the given product received from ADS API.
 */
function commerce_ads_update_product_stock($product, $stock_item) {
  $wrapper = entity_metadata_wrapper('commerce_product', $product);
  $wrapper->commerce_stock = $stock_item['StockQuantity'];
  $wrapper->save();
}

/**
 * Implements hook_entity_presave().
 */
function commerce_ads_entity_presave($entity, $type) {
  if ($type === 'commerce_product' && $entity->is_new) {
    // Send product when being created (if checked in ads config)
    $commerce_ads_ws = variable_get('commerce_ads_ws', array());
    if (in_array($entity->type, $commerce_ads_ws['ads_product_types']) && !empty($commerce_ads_ws['ads_send_newly_created_product'])) {
      commerce_ads_send_products(array($entity));
      $entity->commerce_ads_product_needs_update = PRODUCT_SENT;
    }
  }
}

/**
 * Implements hook_commerce_product_update().
 */
function commerce_ads_commerce_product_update($product) {
  if (isset($product->data['commerce_ads_send_all_products'])) {
    unset($product->data['commerce_ads_send_all_products']);
  }
  else {
    // Update product when being updated (if checked in ads config)
    $commerce_ads_ws = variable_get('commerce_ads_ws', array());
    if (
      !is_array($product->type)
      && in_array($product->type, $commerce_ads_ws['ads_product_types'])
      && $product->commerce_ads_product_needs_update == $product->original->commerce_ads_product_needs_update
      // Do not call ADS API if the batch update is already running.
      && !variable_get(COMMERCE_ADS_WS_PRODUCT_UPDATE_RUNNING, FALSE)
    ) {
      if ($product->commerce_ads_product_needs_update == PRODUCT_SENT) {
        $product->commerce_ads_product_needs_update = PRODUCT_TO_BE_UPDATED;
      }
      if (!empty($product->product_id) && !empty($commerce_ads_ws['ads_send_newly_created_product']) && in_array($product->commerce_ads_product_needs_update, array(PRODUCT_TO_BE_UPDATED, PRODUCT_TO_BE_CREATED))) {
        $product_sent = commerce_ads_send_products(array($product));
        $product->commerce_ads_product_needs_update = $product_sent[$product->product_id];
      }
    }
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function commerce_ads_entity_property_info_alter(&$info) {
  $info['commerce_order']['properties']['commerce_ads_order_needs_update'] = array(
    'label' => t("Commerce ads sequence"),
    'description' => t("Set a boolean in order to know if an order needs to be updated."),
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'integer',
    'schema field' => 'commerce_ads_order_needs_update',
  );
  $info['commerce_product']['properties']['commerce_ads_product_needs_update'] = array(
    'label' => t("Commerce ads sequence"),
    'description' => t("Set a boolean in order to know if a product needs to be updated."),
    'setter callback' => 'entity_property_verbatim_set',
    'type' => 'integer',
    'schema field' => 'commerce_ads_product_needs_update',
  );
}

/**
 * Implements hook_commerce_order_update().
 */
function commerce_ads_commerce_order_update($order) {
  if (isset($order->data['commerce_ads_send_all_orders'])) {
    unset($order->data['commerce_ads_send_all_orders']);
  }
  else {
    $commerce_ads_ws = variable_get('commerce_ads_ws', array());
    $order_needs_update = $order->commerce_ads_order_needs_update;
    // If order was already sent, flag it as to be updated.
    if ($order_needs_update == ORDER_SENT) {
      $order->commerce_ads_order_needs_update = ORDER_TO_BE_UPDATED;
    }
    // If the order reach the status for it to be sent, flag it as to be created.
    if ($order->status != $order->original->status
      && !empty($commerce_ads_ws['ads_order_status'])
      && $order->status === $commerce_ads_ws['ads_order_status']
      && $order_needs_update != ORDER_SENT) {
      $order->commerce_ads_order_needs_update = ORDER_TO_BE_CREATED;
    }
    // If ads is configured to send the order directly to ads then do it.
    if (!empty($commerce_ads_ws['ads_send_newly_created_order']) && in_array($order->commerce_ads_order_needs_update, array(ORDER_TO_BE_UPDATED, ORDER_TO_BE_CREATED))) {
      $order_sent = commerce_ads_send_order(array($order));
      $order->commerce_ads_order_needs_update = $order_sent[$order->order_id];
    }
  }
}

/**
 * Check that the order contains product to be sent to ADS.
 *
 * @param $order_wrapper
 *  The order that needs to be checked.
 * @param $product_types
 *  Product types we want to send to ADS (see commerce_ads module config)
 *
 * @return bool
 */
function commerce_ads_order_needs_to_be_sent($order_wrapper, $product_types) {
  if (!empty($order_wrapper->commerce_line_items)) {
    foreach ($order_wrapper->commerce_line_items->value() as $line_item) {
      $line_item = entity_metadata_wrapper('commerce_line_item', $line_item);
      if ($line_item->type->value() === "product") {
        $product = $line_item->commerce_product->value();
        if (in_array($product->type, $product_types)) {
          return TRUE;
        }
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_preprocess_entity();
 */
function commerce_ads_preprocess_entity(&$variables) {
  $commerce_ads_ws = variable_get('commerce_ads_ws', array());
  if ($variables['entity_type'] === "commerce_order" && commerce_ads_order_needs_to_be_sent(entity_metadata_wrapper('commerce_order', $variables['commerce_order']), $commerce_ads_ws['ads_product_types']) && in_array($variables['commerce_order']->commerce_ads_order_needs_update , array(ORDER_SENT, ORDER_TO_BE_UPDATED))) {
    commerce_ads_update_order(array($variables['commerce_order']->order_id));
  }
}

/**
 * Implements hook_theme().
 */
function commerce_ads_theme() {
  return array(
    'commerce_ads_product_configure_form' => array(
      'render element' => 'form',
    ),
    'commerce_ads_order_configure_form' => array(
      'render element' => 'form',
    ),
    'commerce_ads_order_mapping' => array(
      'variables' => array(
        'form_element_mapping' => ''),
    ),
  );
}
