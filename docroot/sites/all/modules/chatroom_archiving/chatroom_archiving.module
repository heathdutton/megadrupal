<?php

/*
 * This functon selects nodes by types for archivation and archives all
 */
function chatroom_archiving_archive_old_chats($archved_types) {
  // fetching id's of all old chatrooms
  $result = array();
  $bundles = array();
  watchdog('debug', 'chat node archvation is started');
  $field_types = field_info_field_by_ids();
  foreach ($field_types as $field_info) {
    if ($field_info['type'] == 'chatroom') {
      if (!empty($field_info["bundles"]["node"])){
        $intersect = array_intersect($archved_types, $field_info["bundles"]["node"]);
        if (!empty($intersect)) {
          foreach ($intersect as $bundle) {
            if(empty($bundles[$bundle][$field_info['field_name']]))
              $bundles[$bundle][$field_info['field_name']] = $field_info['field_name'];
          }
          $sql = "SELECT *
          FROM {node} n
          LEFT JOIN {field_data_" . $field_info['field_name'] . "} chat_field ON n.nid = chat_field.entity_id
          LEFT JOIN {chatroom} chatroom ON chat_field." . $field_info['field_name'] . "_cid = chatroom.cid
          WHERE n.status = 1 AND chatroom.archived = 0";          
          $args = array(
              ':archved_types' => $archved_types,
          );          
          $r = db_query($sql, $args)->fetchAllAssoc('nid');
          $result = $result + $r;
        }
      }
    }
  }
  foreach ($result as $row) {
    chatroom_archiving_archive_old_chat_nodes($row->nid, $bundles[$row->type]);
    watchdog('debug', 'chat node archved: '.$row->nid);
  }
  menu_cache_clear_all();
  watchdog('debug', 'chat node archvation is ended');
}

/*
 * Chat's archivation
 * This functon archves node with givven nid
 */
function chatroom_archiving_archive_old_chat_nodes($nid, $map) {
  // work on old node
  $archived_node = node_load($nid);
  $new_node = clone $archived_node;
  $title_parts = explode(' - ', $archived_node->title);    
  $title_for_archived_node = $title_parts[0] .' - ' .date('F jS Y', $archived_node->created);
  $archived_node->title = $title_for_archived_node;
  foreach ($map as $field_name) {
    $t = &$archived_node->$field_name;
    foreach ($t["und"] as $delta => $chat) {      
      unset($t["und"][$delta]);
      $t["und"][$delta]['chatroom'] = chatroom_archiving_object_to_field_array($chat["chatroom"]);
      $t["und"][$delta]['chatroom']['chatroom_archived'] = '1';
      $t["und"][$delta]["cid"] = $chat["cid"];
    }
  }
  node_save($archived_node);
  // creation new node based on old
  $new_node->title = $title_parts[0];
  unset($new_node->nid);
  unset($new_node->vid);
  unset($new_node->created);
  unset($new_node->changed);
  unset($new_node->tnid);
  unset($new_node->revision_timestamp);
  unset($new_node->revision_uid);
  unset($new_node->last_comment_timestamp);
  unset($new_node->last_comment_name);
  unset($new_node->last_comment_uid);
  unset($new_node->comment_count);
  unset($new_node->name);
  unset($new_node->picture);
  unset($new_node->data);
  unset($new_node->cid);
  foreach ($map as $field_name) {
    $t = &$new_node->$field_name;
    foreach ($t["und"] as $delta => $chat) {
      unset($t["und"][$delta]);
      $t["und"][$delta]['chatroom']['chatroom_title'] = $chat["chatroom"]->get('title');
      $t["und"][$delta]['chatroom']['chatroom_public'] = $chat["chatroom"]->get('public');

      $roles = $chat["chatroom"]->get('allowedRids');
      foreach ($roles as $key => $value) {
        if ($value->read_only)
          $t["und"][$delta]['chatroom']['chatroom_read_only_roles'][] = $key;
        else
          $t["und"][$delta]['chatroom']['chatroom_write_roles'][] = $key;
      }
      $t["und"][$delta]['chatroom']['chatroom_format'] = $chat["chatroom"]->get('format');
    }
  }
  node_save($new_node);
  //we want to assign old path to new node
  $path = drupal_lookup_path('alias',"node/".$nid);
  path_delete(array(
      'source' => "node/".$nid
  ));
  $path_array = array(
      'source' => "node/".$new_node->nid,
      'alias' => $path
  );
  path_save($path_array);
  // rebuilding menus to keep new node in menu
  db_update('menu_links')
  ->fields(array(
    'link_path' => "node/".$new_node->nid,
  ))
  ->condition('link_path', "node/".$nid, '=')
  ->execute();  
}

function chatroom_archiving_object_to_field_array($chatroom) {
  $field_chatroom['chatroom_cid'] = $chatroom->get('cid');
  $field_chatroom['chatroom_title'] = $chatroom->get('title');
  $field_chatroom['chatroom_public'] = $chatroom->get('public');
  $field_chatroom['chatroom_archived'] = $chatroom->get('archived');
  $roles = $chatroom->get('allowedRids');

  foreach ($roles as $key => $value) {
    if($value->read_only)
      $field_chatroom['chatroom_read_only_roles'][] = $key;
    else 
      $field_chatroom['chatroom_write_roles'][] = $key;
  }
  $field_chatroom['chatroom_format'] = $chatroom->get('format');
  return $field_chatroom;
}