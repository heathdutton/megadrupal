<?php

/**
 * Implements hook_menu().
 */
function commerce_fulfilment_oms_menu() {
  $items = array();

  $items['admin/commerce/config/fulfilment/oms'] = array(
    'title' => 'OMS',
    'description' => 'Configure fulfilment for Order Management Systems.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_fulfilment_oms_admin_page'),
    'access arguments' => array('configure commerce fulfilment'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/commerce/orders/%commerce_order/oms'] = array(
    'title' => 'OMS',
    'description' => 'OMS order integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_fulfilment_oms_vieworder_admin', 3),
    'access arguments' => array('configure commerce fulfilment'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/commerce/products/%commerce_product/oms'] = array(
    'title' => 'OMS',
    'description' => 'OMS product integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_fulfilment_oms_viewproduct_admin', 3),
    'access arguments' => array('configure commerce fulfilment'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}


/**
 * Implements hook_theme().
 */
function commerce_fulfilment_oms_theme() {
  return array(
    'commerce_fulfilment_oms_inventory' => array(
      'template' => 'commerce_fulfilment_oms_inventory',
      'arguments' => array('warehouses' => array()),
      'path' => drupal_get_path('module', 'commerce_fulfilment_oms') . '/theme',
    ),
    'commerce_fulfilment_oms_orders' => array(
      'template' => 'commerce_fulfilment_oms_orders',
      'arguments' => array('orders' => array(), 'mode' => 'administrator'),
      'path' => drupal_get_path('module', 'commerce_fulfilment_oms') . '/theme',
    ),
  );
}


/**
 * Implements hook_views_api().
 */
function commerce_fulfilment_oms_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_fulfilment_oms') . '/includes/views',
  );
}


/**
 * Implements hook_action_info().
 */
function commerce_fulfilment_oms_action_info() {
  $actions = array();

  $actions['commerce_fulfilment_oms_send_fulfilment_order_action'] = array(
    'label' => t('Send order to fulfilment centre'),
    'type' => 'commerce_order',
    'configurable' => FALSE,
    'parameter' => array(
      'commerce_order' => array(
        'type' => 'commerce_order',
        'label' => t('Order'),
      ),
    ),
    'group' => t('Commerce fulfilment'),
  );

  return $actions;
}


/**
 * Implements hook_commerce_order_status_info().
 *
 * Add a new state, "review", for when an order is rejected by OMS and needs to be examined.
 */
function commerce_fulfilment_oms_commerce_order_status_info() {
  $order_statuses = array();

  $order_statuses['review'] = array(
    'name'   => 'review',
    'title'  => t('Review'),
    'state'  => 'pending',
    'cart'   => FALSE,
    'weight' => 2,
  );

  return $order_statuses;
}


/**
 * Implements hook_token_info().
 */
function commerce_fulfilment_oms_token_info() {
  $order['tracking-url'] = array(
    'name' => t("Tracking URL"),
    'description' => t("The order tracking URL."),
  );

  return array(
    'tokens' => array('commerce-order' => $order),
  );
}


/**
 * Implements hook_tokens().
 */
function commerce_fulfilment_oms_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'commerce-order' && !empty($data['commerce-order'])) {
    $order = $data['commerce-order'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        // Simple key values on the order.
        case 'tracking-url':
          $replacements[$original] = isset($order->tracking_url) ? $order->tracking_url : '(undefined)';
          break;
        }
    }
  }

  return $replacements;
}


/**
 * Implements hook_form_form_id_alter().
 *
 * Add OMS status to commerce_product_ui_product_form
 */
function commerce_fulfilment_oms_form_commerce_product_ui_product_form_alter(&$form, $form_state) {
  if (isset($form['#entity']->sku)) {
    $form['oms'] = array(
      '#type' => 'fieldset',
      '#title' => t('OMS Inventory Status'),
      '#weight' => 10,
    );

    $form['oms']['markup'] = array(
      '#markup' => commerce_fulfilment_oms_render_productinfo($form['#entity']->sku),
    );
  }
}


/**
 * Implements hook_entity_view_alter().
 */
function commerce_fulfilment_oms_entity_view_alter(&$build, $type) {
  switch ($type) {
    case 'commerce_order':
      if ($build['#view_mode'] === 'administrator' || $build['#view_mode'] === 'customer') {
        $oms_status = commerce_fulfilment_oms_render_orderinfo($build['#entity']->order_number, $build['#view_mode']);

        $build['oms'] = array(
          '#prefix' => '<div class="field oms-order-status"><div class="field-label">Fulfilment information:</div>',
          '#weight' => 10,
          '#markup' => $oms_status,
          '#suffix' => '</div>',
        );
      }
      break;
  }
}


/**
 * Render a block with the inventory status.
 */
function commerce_fulfilment_oms_render_productinfo($product_sku) {
  $client = commerce_fulfilment_oms_getclient();

  try {
    $inventory = $client->get_stock_level($product_sku);
  } catch (OMSClientException $e) {
    return t('Unable to load block: !error', array('!error' => $e->getMessage()));
  }

  if ($inventory === FALSE) {
    return t('No product in OMS matching SKU %sku.', array('%sku' => $product_sku));
  }

  return theme('commerce_fulfilment_oms_inventory', array('inventory' => $inventory));
}


/**
 * Render a block with the OMS order status.
 */
function commerce_fulfilment_oms_render_orderinfo($order_number, $mode = 'administrator') {
  $client = commerce_fulfilment_oms_getclient();

  try {
    $orders = $client->export_orders('SHP', NULL, $order_number);
  } catch (OMSClientException $e) {
    return t('Unable to load block: !error', array('!error' => $e->getMessage()));
  }

  if ($orders === FALSE) {
    return t('No order at OMS matching MOID @moid.', array('@moid' => $order_number));
  }

  return theme('commerce_fulfilment_oms_orders', array('orders' => $orders, 'mode' => $mode));
}


/**
 * OMS integration for individual orders
 */
function commerce_fulfilment_oms_vieworder_admin($form, $form_state, $order) {
  $form = array();

  $form['#order_id'] = $order->order_id;

  $form['send_to_oms'] = array(
    '#type' => 'submit',
    '#value' => 'Send order for fulfilment',
    '#submit' => array('commerce_fulfilment_oms_sendorder_formaction'),
  );

  return $form;
}


/**
 * Form action to send order to OMS
 */
function commerce_fulfilment_oms_sendorder_formaction($form, $form_state) {
  $order = commerce_order_load($form['#order_id']);
  // We'll simply wrap the action as it's easy.
  commerce_fulfilment_oms_send_fulfilment_order_action($order);
}


/**
 * Provide a form to sync inventory in Drupal with that at OMS
 *
 * Add this to your view with a PHP custom block:
 * <?php
 * $form = drupal_get_form('commerce_fulfilment_oms_products_syncwarehouse_form');
 * echo drupal_render($form);
 * ?>
 */
function commerce_fulfilment_oms_products_syncwarehouse_form() {
  $form = array();

  $form['commerce_fulfilment_oms_sync_warehouse'] = array(
    '#type' => 'submit',
    '#value' => t('Sync inventory with warehouse'),
  );

  return $form;
}


/**
 * Products syncwarehouse form action
 */
function commerce_fulfilment_oms_products_syncwarehouse_form_submit() {
  commerce_fulfilment_oms_procedure_sync_warehouse();
  drupal_set_message(t('Stock levels have been updated for all enabled products. Remember that the available quantity in OMS is only updated every 30 minutes, you might need to tweak final numbers.'));
}


/**
 * Sync the store SKUs to the OMS warehouse
 */
function commerce_fulfilment_oms_procedure_sync_warehouse() {

  // Get all of the products in the store
  $products = _commerce_fulfilment_oms_get_stockenabled_products();
  $omsqtys = _commerce_fulfilment_oms_get_warehouse_quantity(array_keys($products));
  $reserved = variable_get('commerce_fulfilment_oms_reservedstock', 0);

  // Sync the stock numbers
  $rows = array();
  foreach ($products as $product) {
    if (isset($omsqtys[$product->sku])) {
      $omsqty = max(0, $omsqtys[$product->sku] - $reserved);
      $webqty = (int) $product->commerce_stock[LANGUAGE_NONE][0]['value'];
      $change = $webqty - $omsqty;

      if ($change !== 0) {
        $product->commerce_stock[LANGUAGE_NONE][0]['value'] = $omsqty;
        commerce_product_save($product);
        entity_get_controller('commerce_product')->resetCache(array($product->product_id));

        $message = t('Updated stock level for %sku (@operator @change)', array(
          '%sku' => $product->sku,
          '@operator' => ($change < 0) ? 'added' : 'subtracted',
          '@change' => abs($change),
        ));
        drupal_set_message($message);
      }

    } else {
      $message = t('Did not set stock level for %sku (no QTY in OMS)',
        array('%sku' => $product->sku));
      drupal_set_message($message, 'warning');
    }
  }
}


/**
 * Admin settings page
 */
function commerce_fulfilment_oms_admin_page() {
  $form = array();

  $form['commerce_fulfilment_oms_ordertaker_wsdl'] = array(
    '#type' => 'textfield',
    '#title' => t('Order Taker WSDL URL'),
    '#required' => TRUE,
    '#default_value' => variable_get('commerce_fulfilment_oms_ordertaker_wsdl', 'https://ws.ordermanagementsystems.com.au/omsordertaker/omsordertaker.asmx?WSDL'),
  );

  $form['commerce_fulfilment_oms_inventorymanager_wsdl'] = array(
    '#type' => 'textfield',
    '#title' => t('Inventory Manager WSDL URL'),
    '#required' => TRUE,
    '#default_value' => variable_get('commerce_fulfilment_oms_inventorymanager_wsdl', 'https://ws.ordermanagementsystems.com.au/omsordertaker/OMSInventoryManager.asmx?WSDL'),
  );

  $form['commerce_fulfilment_oms_customer_name'] = array(
    '#type' => 'textfield',
    '#title' => t('OMS Customer Name'),
    '#required' => TRUE,
    '#default_value' => variable_get('commerce_fulfilment_oms_customer_name', ''),
  );

  $form['commerce_fulfilment_oms_customer_email'] = array(
    '#type' => 'textfield',
    '#title' => t('OMS Customer Email'),
    '#required' => TRUE,
    '#default_value' => variable_get('commerce_fulfilment_oms_customer_email', ''),
  );

  $form['commerce_fulfilment_oms_cutofftime'] = array(
    '#type' => 'textfield',
    '#title' => t('Cut off time'),
    '#description' => t('The order cut off time. That is, the latest an order can be submitted to be sent on that day. Any format strtotime() can handle.'),
    '#size' => 10,
    '#default_value' => variable_get('commerce_fulfilment_cutofftime', '12:00'),
  );

  $form['commerce_fulfilment_oms_dupehourscheck'] = array(
    '#type' => 'textfield',
    '#title' => t('Duplicate order check window'),
    '#description' => t('The number of hours to check for a repeated Merchant Order ID. The longer the window, the slower the CreateSalesOrder SOAP call will be.'),
    '#size' => 2,
    '#default_value' => variable_get('commerce_fulfilment_oms_dupehourscheck', 48),
  );

  $form['commerce_fulfilment_oms_customer_password'] = array(
    '#type' => 'textfield',
    '#title' => t('OMS Customer Password'),
    '#required' => TRUE,
    '#default_value' => variable_get('commerce_fulfilment_oms_customer_password', ''),
  );

  $form['commerce_fulfilment_oms_live_mode'] = array(
    '#type' => 'select',
    '#title' => t('Live mode'),
    '#description' => t('Leave live mode disabled while testing the system to ensure orders are not processed.'),
    '#required' => TRUE,
    '#options' => array(0 => t('Disabled'), 1 => t('Enabled')),
    '#default_value' => variable_get('commerce_fulfilment_oms_live_mode', 0),
  );

  $form['commerce_fulfilment_oms_default_warehouse'] = array(
    '#type' => 'textfield',
    '#title' => t('Default warehouse'),
    '#required' => TRUE,
    '#description' => t('Automatic operations like stock syncronisation expect a single warehouse.'),
    '#default_value' => variable_get('commerce_fulfilment_oms_default_warehouse', ''),
  );

  $form['commerce_fulfilment_oms_default_shipping'] = array(
    '#type' => 'textfield',
    '#title' => t('Default shipping method'),
    '#required' => TRUE,
    '#default_value' => variable_get('commerce_fulfilment_oms_default_shipping', ''),
  );

  $form['commerce_fulfilment_oms_default_role'] = array(
    '#type' => 'textfield',
    '#title' => t('Default customer role'),
    '#required' => TRUE,
    '#default_value' => variable_get('commerce_fulfilment_oms_default_role', 'Web Customers'),
  );

  $options = array(
    'Manual' => t('Manual'),
    'Low' => t('Low'),
    'Medium' => t('Medium'),
    'High' => t('High'));
  $form['commerce_fulfilment_oms_default_priority'] = array(
    '#type' => 'select',
    '#title' => t('Default priority'),
    '#required' => TRUE,
    '#options' => $options,
    '#default_value' => variable_get('commerce_fulfilment_oms_default_priority', ''),
  );

  $options = array(
    'Processing' => t('Processing'),
    'Void' => t('Void'));
  $form['commerce_fulfilment_oms_default_status'] = array(
    '#type' => 'select',
    '#title' => t('Default status'),
    '#required' => TRUE,
    '#options' => $options,
    '#default_value' => variable_get('commerce_fulfilment_oms_default_status', ''),
  );

  $form['commerce_fulfilment_oms_reservedstock'] = array(
    '#type' => 'textfield',
    '#title' => t('Reserved stock'),
    '#size' => 5,
    '#description' => t('Quantity of stock to reserve when stock levels are synced with OMS.'),
    '#default_value' => variable_get('commerce_fulfilment_oms_reservedstock', 0),
  );

  $form['commerce_fulfilment_oms_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Debugging: Log requests & responses'),
    '#description' => t('If this is set, all requests and responses will be logged to watchdog.'),
    '#default_value' => variable_get('commerce_fulfilment_oms_debug', 0),
  );

  return system_settings_form($form);
}


/**
 * Connect to the SOAP endpoint and pass the API endpoints and credentials.
 */
function commerce_fulfilment_oms_getclient() {
  $credentials = array(
    'name' => variable_get('commerce_fulfilment_oms_customer_name', ''),
    'email' => variable_get('commerce_fulfilment_oms_customer_email', ''),
    'password' => variable_get('commerce_fulfilment_oms_customer_password', ''),
  );

  $endpoints = array(
    'OrderTaker' => variable_get('commerce_fulfilment_oms_ordertaker_wsdl', ''),
    'InventoryManager' => variable_get('commerce_fulfilment_oms_inventorymanager_wsdl', ''),
  );

  return new OMSClient($credentials, $endpoints);
}


/**
 * Create a SalesOrder object
 */
function commerce_fulfilment_oms_createsalesorder($commerce_order) {
  $oe = entity_metadata_wrapper('commerce_order', $commerce_order);

  $salesorder = new SalesOrder;

  $salesorder->EmailAddress = $oe->mail->value();
  $salesorder->ExternalID = $oe->order_number->value();
  $salesorder->ClientRoleName = variable_get('commerce_fulfilment_oms_default_role', 'Web Customers');

  // Create the OrderLineItem objects.
  $lineitems = array();
  foreach ($oe->commerce_line_items as $i => $item) {
    if ($item->type->value() !== 'product') {
      continue;
    }
    $price = $item->commerce_unit_price->value();

    $li = new OrderLineItem;
    $li->LineNumber = $i;
    $li->ItemName = $item->line_item_label->value();
    $li->QuantityOrdered = $item->quantity->value();
    $li->SKU = $item->line_item_label->value();
    $li->UnitPrice = $price['amount'] / 100;
    $li->OrderLineItem3PLID = $item->line_item_label->value();
    $lineitems[] = $li;
  }
  $salesorder->OrderLineItems = $lineitems;

  // Bill to
  $billaddr = $oe->commerce_customer_billing->commerce_customer_address;
  $salesorder->BillToFName = $billaddr->first_name->value();
  $salesorder->BillToLName = $billaddr->last_name->value();
  $salesorder->BillToAddress1 = $billaddr->thoroughfare->value();
  $salesorder->BillToAddress2 = $billaddr->premise->value();
  $salesorder->BillToCity = $billaddr->locality->value();
  $salesorder->BillToState = $billaddr->administrative_area->value();
  $salesorder->BillToZip = $billaddr->postal_code->value();
  $salesorder->BillToCountry = $billaddr->country->value();

  // Ship to
  $shipaddr = $oe->commerce_customer_shipping->commerce_customer_address;
  $salesorder->ShipToSameAsBillTo = FALSE;
  $salesorder->ShipToEmailAddress = $oe->mail->value();
  $salesorder->ShipToFName = $shipaddr->first_name->value();
  $salesorder->ShipToLName = $shipaddr->last_name->value();
  $salesorder->ShipToAddress1 = $shipaddr->thoroughfare->value();
  $salesorder->ShipToAddress2 = $shipaddr->premise->value();
  $salesorder->ShipToCity = $shipaddr->locality->value();
  $salesorder->ShipToState = $shipaddr->administrative_area->value();
  $salesorder->ShipToZip = $shipaddr->postal_code->value();
  $salesorder->ShipToCountry = $shipaddr->country->value();

  // Other
  $salesorder->OrderDate = date(DATE_W3C, $oe->created->value());
  $salesorder->MerchantOrderNumber = $oe->order_number->value();

  // Ship method
  $shipping_lineitem = commerce_fulfilment_get_shipping_lineitem($oe);
  if (!$shipping_lineitem) {
    $shipmethod = variable_get('commerce_fulfilment_oms_default_shipping', '');
  } else {
    $shipmethod = $shipping_lineitem->value()->data['shipping_service']['title'];
  }
  $salesorder->ShipMethod = $shipmethod;

  // Priority
  $salesorder->Priority = variable_get('commerce_fulfilment_oms_default_priority', 'Low');
  $salesorder->HoursForDuplicateCheck = variable_get('commerce_fulfilment_oms_dupehourscheck', 48);

  // Allow hooks to modify the order
  module_invoke_all('fulfilment_sendorder', $oe, $salesorder);

  return $salesorder;
}


/**
 * Action: Fulfil order.
 */
function commerce_fulfilment_oms_send_fulfilment_order_action($order, $context = array()) {
  $client = commerce_fulfilment_oms_getclient();
  $salesorder = commerce_fulfilment_oms_createsalesorder($order);
  $live_mode = variable_get('commerce_fulfilment_oms_live_mode', 0);

  try {
    $oms_order_id = $client->create_sales_order($salesorder, $live_mode);
    $message = t('OMS successfully received Order #@order_number (OMS Order ID: @oms_order_id)',
      array('@order_number' => $order->order_number, '@oms_order_id' => $oms_order_id));
    $dsm_level = 'status';
  } catch (OMSClientException $e) {
    $message = t('OMS rejected Order #@order_number (!message)',
      array('@order_number' => $order->order_number, '!message' => $e->getMessage()));
    $dsm_level = 'error';
  }

  drupal_set_message($message, $dsm_level);
  if (variable_get('commerce_fulfilment_oms_debug', 0)) {
    $variables = array('%log' => var_export($client->getLog(), TRUE));
    $message = $message . ' Log: %log';
    watchdog('commerce_fulfilment_oms', $message, $variables, WATCHDOG_INFO);
  }
}


/**
 * Get tracking URL
 *
 * Should be provided by a hook ... or we build up a list of possible shipping services.
 */
function commerce_fulfilment_oms_get_tracking_url($method, $trackingnumber) {
  $method = strtoupper($method);
  switch ($method) {
    case 'FASTWAY BROWN':
      return sprintf('http://www.fastway.com.au/courier-services/track-your-parcel?l=%s', $trackingnumber);

    case 'AAE PREPAID':
    case 'AAE EXP SAVER':
      return sprintf('http://sttrackandtrace.startrack.com.au/?txtConsignmentNumber=%s', $trackingnumber);

    case 'AUSTRALIA POST EP STD':
      return sprintf('http://auspost.com.au/track/track.html?id=%s', $trackingnumber);

    case 'TNT ROAD EXP':
      return sprintf('http://www.tnt.com/webtracker/tracker.do?navigation=1&respLang=en&respCountry=au&cons=%s', $trackingnumber);

    case 'FEDEX INTERNATIONAL ECONOMY FREIGHT':
    case 'FEDEX INTERNATIONAL ECONOMY':
    case 'FEDEX INTERNATIONAL PRIORITY':
    case 'FEDEX INTERNATIONAL PRIORITY FREIGHT':
      return sprintf('http://www.fedex.com/Tracking?action=track&tracknumbers=%s', $trackingnumber);
  }

  return FALSE;
}


/**
 * Get the stock enabled products
 */
function _commerce_fulfilment_oms_get_stockenabled_products() {
  $products = commerce_product_load_multiple(array(), array('status' => 1));

  // Check which ones are stock enabled
  $enabled = array();
  foreach (commerce_product_types() as $type => $product_type) {
    $enabled[$type] = commerce_ss_product_type_enabled($type);
  }

  // Key by SKU
  $productlist = array();
  foreach ($products as $product) {
    if ($enabled[$product->type]) {
      $productlist[$product->sku] = $product;
    }
  }

  return $productlist;
}


/**
 * Load an associative array of OMS quantities.
 */
function _commerce_fulfilment_oms_get_warehouse_quantity($skus) {
  $warehouse_name = variable_get('commerce_fulfilment_oms_default_warehouse', '');

  // Connect to OMS and get the stock levels for all SKUs
  $client = commerce_fulfilment_oms_getclient();
  try {
    $inventory = $client->get_stock_level($skus);
  } catch (OMSClientException $e) {
    $message = t('Unable to get stock levels (%error)', array(
      '%error' => $e->getMessage()
    ));
    drupal_set_message($message, 'error');
  }

  // Parse the OMS response and make a lookup table of SKUs
  $omsqtys = array();
  foreach ($inventory as $item) {
    $sku = strtolower((string) $item['SKU']);

    // If there is a default warehouse, make sure we only use that.
    if ($warehouse_name) {
      foreach ($item->Warehouses->Warehouses as $warehouse) {
        if ((string) $warehouse['Name'] === $warehouse_name) {
          break;
        }
      }
    } else {
      $warehouse = $item->Warehouses->Warehouses;
    }

    // Grab the available stock level
    if (isset($warehouse->Bin->QTY_Available)) {
      $omsqtys[$sku] = (int) $warehouse->Bin->QTY_Available;
    }
  }

  return $omsqtys;
}
