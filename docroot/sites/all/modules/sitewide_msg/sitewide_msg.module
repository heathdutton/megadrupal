<?php
/**
 * @file
 * Main module file.
 */

/**
 * Implements hook_menu().
 */
function sitewide_msg_menu() {
  $items = array();

  $items['admin/config/people/sitewide_msg'] = array(
    'title' => 'Sitewide Alert Message',
    'description' => 'Allows to send sitewide message to all active users.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sitewide_msg_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function sitewide_msg_permission() {
  return array('receive sitewide messages' => array(
    'title' => t('Receive sitewide messages'),
    'description' => t('The user can receive the messages.'),
  ));
}

/**
 * Administration settings/operation form.
 */
function sitewide_msg_admin_settings($form, &$form_state) {
  $form['sitewide_msg_polling_interval'] = array(
    '#title' => t('Clients polling interval'),
    '#type' => 'textfield',
    '#default_value' => variable_get('sitewide_msg_polling_interval', 45),
    '#description' => t("Number of seconds between clients checking."),
  );

  $form['sitewide_msg_on'] = array(
    '#title' => t('Activate sitewide message alert for all users'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('sitewide_msg_on', FALSE),
    '#description' => t("Please do not check this unless you're know what you you doing."),
  );

  $form['sitewide_msg_text'] = array(
    '#title' => t('Text to display'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => variable_get('sitewide_msg_text', "Website going down for maintenance in 15 minutes."),
    '#description' => t('Please enter a message to display.'),
  );

  $form['sitewide_msg_class_css'] = array(
    '#title' => t('CSS class to apply'),
    '#type' => 'select',
    '#options' => drupal_map_assoc(array('alert', 'warning', 'status')),
    '#required' => TRUE,
    '#default_value' => variable_get('sitewide_msg_class_css', "alert"),
    '#description' => t('Select severity of the message.'),
  );

  $form['sitewide_msg_expiration_on'] = array(
    '#title' => t('Auto cancel message'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('sitewide_msg_expiration_on', TRUE),
  );

  $default_expiration_time = variable_get('sitewide_msg_expiration_on', FALSE)
    ? variable_get('sitewide_msg_expiration_time', time() + 15 * 60)
    : time() + 15 * 60;

  $form['sitewide_msg_expiration_time'] = array(
    '#title' => t('Dismiss message at'),
    '#type' => 'date_popup',
    '#default_value' => date('Y-m-d H:i', $default_expiration_time),
    '#date_format' => 'd/m/Y - H:i',
    '#date_year_range' => '-0:+0',
  );

  $form['#submit'][] = 'sitewide_msg_admin_settings_submit';

  return system_settings_form($form);
}

/**
 * Submit handler for settings form.
 */
function sitewide_msg_admin_settings_submit($form, &$form_state) {
  global $user;

  // Convert to UNIX time.
  $form_state['values']['sitewide_msg_expiration_time'] = strtotime($form_state['values']['sitewide_msg_expiration_time']);
  $alert = new stdClass();
  $alert->is_active = $form_state['values']['sitewide_msg_on'];
  $alert->polling_interval = $form_state['values']['sitewide_msg_polling_interval'];
  if ($alert->is_active) {
    $alert->message = t('Message from !user, !when: @text', array(
      '!user' => $user->name,
      '!when' => format_date(time(), 'short'),
      '@text' => $form_state['values']['sitewide_msg_text'],
    ));
    $alert->class_css = $form_state['values']['sitewide_msg_class_css'];
    $alert->is_expiration = $form_state['values']['sitewide_msg_expiration_on'];
    if ($alert->is_expiration) {
      $alert->expiration_time = $form_state['values']['sitewide_msg_expiration_time'];
    }
  }

  variable_set('sitewide_msg_alert', $alert);
}

/**
 * Implements hook_block_info().
 */
function sitewide_msg_block_info() {
  $blocks = array();

  $blocks['sitewide_msg_report'] = array(
    'info' => t('Sitewide Alert Message'),
    'cache' => DRUPAL_NO_CACHE,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '*',
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function sitewide_msg_block_view($delta = '') {
  $block = array();
  if (user_access('receive sitewide messages')) {
    switch ($delta) {
    case 'sitewide_msg_report':
      $block = array(
        'subject' => NULL,
        'content' => _sitewide_msg_get_status_iframe(),
      );
    }
  }
  return $block;
}

/**
 * Implements hook_preprocess_page().
 */
function sitewide_msg_preprocess_page(&$variables) {
  if (user_access('receive sitewide messages')) {
    $sitewide['placeholder'] = _sitewide_msg_get_status_iframe();

    $variables['sitewide_msg'] = $sitewide;
  }
}

/**
 * Internal: produce iframe.
 *
 * @return string
 *   HTML output of iframe content.
 */
function _sitewide_msg_get_status_iframe() {
  global $base_url;
  $module = drupal_get_path('module', 'sitewide_msg');

  $url = $base_url . '/' . $module . '/sitewide_msg.poller.php';
  $output = "<iframe height='16' width='100%' frameborder=0 scrolling='no' vspace=0 hspace=0 marginwidth=0 marginheight=0 src='$url'></iframe>";
  return $output;
}
