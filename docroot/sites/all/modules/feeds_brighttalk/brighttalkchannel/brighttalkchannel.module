<?php

/**
 * Implements hook_menu_alter().
 */
function brighttalkchannel_menu_alter(&$callbacks) {
  unset($callbacks['node/add/brighttalk-webcast']);
}

function brighttalkchannel_node_presave($node) {
  if ($node->type == 'brighttalk_channel') {
    $source = $node->feeds['FeedsHTTPFetcher']['source'];

    // We have not got access to any old feed data via original, so we have to do this each time
    if ($source) {
        // if we don't have a title, load the feed and extract it
        // feeds module fails to get this.... because of the namespace?
        $data = brighttalkchannel_get_feed_data($source);

				if (!isset($node->title) || empty($node->title) && isset($data['title']) && !empty($data['title'])) {
				  $node->title = $data['title'];
				}

				if (!isset($node->body[$node->language][0]['value']) || empty($node->body[$node->language][0]['value']) && isset($data['description']) && !empty($data['description'])) {

	        // Get input format for node body.
	        $feed_id = feeds_get_importer_id($node->type);
	        $importer = feeds_importer($feed_id);
          $format_id = $importer->config['processor']['config']['input_format']; // @TODO take this from the Feed config setting.

				  $node->body[$node->language][0] = array('value' => $data['description'],
																									'summary' => $data['description'],
																									'format' => $format_id,
																									'safe_value' => check_markup($data['description'], $format_id, $node->language, TRUE),
																									'safe_summary' => check_markup($data['description'], $format_id, $node->language, TRUE),
																									);
				}

        $node->field_bt_channel_title[$node->language]['0']['value'] = $data['title'];
        $node->field_bt_channel_description[$node->language]['0']['value'] = $data['description'];
        $node->field_bt_channel_link[$node->language]['0']['url'] = $data['link'];

        if (isset($data['channel']) && !empty($data['channel'])) {
				 $node->field_bt_channel_id[$node->language]['0']['value'] = $data['channel'];
				}
      }

      if (is_null($data['channel'])) {
        drupal_set_message('No Brighttalk.com channel detected.','error');
      }
      else {
        drupal_set_message(t('Detected Brightalk.com channel @channel', array('@channel'=>$data['channel'])));
      }
    }

}

/**
 * Extract a feed title from feed source
 * @param $url
 */
function brighttalkchannel_get_feed_data($url) {
  feeds_include_library('common_syndication_parser.inc', 'common_syndication_parser');
  feeds_include_library('http_request.inc', 'http_request');
  $data = null;
  $feed = http_request_get($url);

  if (!empty($feed->data)) {
    $feed = common_syndication_parser_parse($feed->data);
    $data['title'] = $feed['title'];
    $data['description'] = $feed['description'];
    $data['link'] = $feed['link'];
  }

  $channel = feeds_brighttalk_channel_id_from_feed_url($url);

  if ($channel) {
    $data['channel'] = $channel;
  }
  return $data;
}

/**
 * Implements hook ctools_plugin_api
 */
function brighttalkchannel_ctools_plugin_api() {
  $args = func_get_args();
  $module = array_shift($args);
  $api = array_shift($args);
  if ($module == "feeds" && $api == "feeds_importer_default") {
    return array("version" => 1);
  }
}

//hook_views_default_views()
function brighttalkchannel_views_api() {
  return array(
    'api' => 3,
  );
}

function brighttalkchannel_views_default_views(){
  $view = new view();
	$view->name = 'brighttalk-channel';
	$view->description = '';
	$view->tag = 'default,brighttalk';
	$view->base_table = 'node';
	$view->human_name = 'Channel';
	$view->core = 7;
	$view->api_version = '3.0';
	$view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */

	/* Display: Master */
	$handler = $view->new_display('default', 'Master', 'default');
	$handler->display->display_options['title'] = 'Channel';
	$handler->display->display_options['use_more_always'] = FALSE;
	$handler->display->display_options['access']['type'] = 'perm';
	$handler->display->display_options['cache']['type'] = 'none';
	$handler->display->display_options['query']['type'] = 'views_query';
	$handler->display->display_options['query']['options']['query_comment'] = FALSE;
	$handler->display->display_options['exposed_form']['type'] = 'basic';
	$handler->display->display_options['pager']['type'] = 'full';
	$handler->display->display_options['pager']['options']['items_per_page'] = '10';
	$handler->display->display_options['style_plugin'] = 'default';
	$handler->display->display_options['row_plugin'] = 'node';
	$handler->display->display_options['row_options']['links'] = FALSE;
	/* Relationship: Feeds item: Owner feed */
	$handler->display->display_options['relationships']['feed_nid']['id'] = 'feed_nid';
	$handler->display->display_options['relationships']['feed_nid']['table'] = 'feeds_item';
	$handler->display->display_options['relationships']['feed_nid']['field'] = 'feed_nid';
	/* Field: Content: Title */
	$handler->display->display_options['fields']['title']['id'] = 'title';
	$handler->display->display_options['fields']['title']['table'] = 'node';
	$handler->display->display_options['fields']['title']['field'] = 'title';
	$handler->display->display_options['fields']['title']['label'] = '';
	$handler->display->display_options['fields']['title']['alter']['word_boundary'] = FALSE;
	$handler->display->display_options['fields']['title']['alter']['ellipsis'] = FALSE;
	/* Sort criterion: Content: Start (field_start) */
	$handler->display->display_options['sorts']['field_bt_feed_start_value']['id'] = 'field_bt_feed_start_value';
	$handler->display->display_options['sorts']['field_bt_feed_start_value']['table'] = 'field_data_field_bt_feed_start';
	$handler->display->display_options['sorts']['field_bt_feed_start_value']['field'] = 'field_bt_feed_start_value';
	$handler->display->display_options['sorts']['field_bt_feed_start_value']['order'] = 'DESC';
	/* Contextual filter: Feeds item: Owner feed nid */
	$handler->display->display_options['arguments']['feed_nid']['id'] = 'feed_nid';
	$handler->display->display_options['arguments']['feed_nid']['table'] = 'feeds_item';
	$handler->display->display_options['arguments']['feed_nid']['field'] = 'feed_nid';
	$handler->display->display_options['arguments']['feed_nid']['title_enable'] = TRUE;
	$handler->display->display_options['arguments']['feed_nid']['title'] = '%1';
	$handler->display->display_options['arguments']['feed_nid']['default_argument_type'] = 'fixed';
	$handler->display->display_options['arguments']['feed_nid']['summary']['number_of_records'] = '0';
	$handler->display->display_options['arguments']['feed_nid']['summary']['format'] = 'default_summary';
	$handler->display->display_options['arguments']['feed_nid']['summary_options']['items_per_page'] = '25';
	$handler->display->display_options['arguments']['feed_nid']['specify_validation'] = TRUE;
	$handler->display->display_options['arguments']['feed_nid']['validate']['type'] = 'php';
	$handler->display->display_options['arguments']['feed_nid']['validate_options']['code'] = 'if (is_numeric($argument)) {
	  $result = TRUE;
	  $node = node_load($argument);
	  if (isset($node->field_bt_channel_title[$node->language][0][\'value\'])) {
	    $handler->validated_title = $node->field_bt_channel_title[$node->language][0][\'value\'];
	  }
	}
	return $result;
	';
	/* Filter criterion: Content: Published */
	$handler->display->display_options['filters']['status']['id'] = 'status';
	$handler->display->display_options['filters']['status']['table'] = 'node';
	$handler->display->display_options['filters']['status']['field'] = 'status';
	$handler->display->display_options['filters']['status']['value'] = 1;
	$handler->display->display_options['filters']['status']['group'] = 1;
	$handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
	/* Filter criterion: Content: Type */
	$handler->display->display_options['filters']['type']['id'] = 'type';
	$handler->display->display_options['filters']['type']['table'] = 'node';
	$handler->display->display_options['filters']['type']['field'] = 'type';
	$handler->display->display_options['filters']['type']['value'] = array(
	  'brighttalk_webcast' => 'brighttalk_webcast',
	);

	/* Display: Page */
	$handler = $view->new_display('page', 'Page', 'page');
	$handler->display->display_options['defaults']['hide_admin_links'] = FALSE;
	$handler->display->display_options['path'] = 'channel';

	/* Display: Block */
	$handler = $view->new_display('block', 'Block', 'block');
	$handler->display->display_options['defaults']['title'] = FALSE;
	$handler->display->display_options['title'] = 'Channel Webcasts';
	$handler->display->display_options['defaults']['hide_admin_links'] = FALSE;
	$handler->display->display_options['defaults']['pager'] = FALSE;
	$handler->display->display_options['pager']['type'] = 'some';
	$handler->display->display_options['pager']['options']['items_per_page'] = '5';

	    // Add view to list of views to provide.
	  $views[$view->name] = $view;


	  $view = new view;
	$view->name = 'brighttalk-channels';
	$view->description = 'A listing of subscribed Brighttalk.com channels';
	$view->tag = 'default,brighttalk';
	$view->base_table = 'node';
	$view->human_name = 'Channels';
	$view->core = 7;
	$view->api_version = '3.0';
	$view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */

	/* Display: Master */
	$handler = $view->new_display('default', 'Master', 'default');
	$handler->display->display_options['title'] = 'Brighttalk.com Channels';
	$handler->display->display_options['access']['type'] = 'perm';
	$handler->display->display_options['cache']['type'] = 'none';
	$handler->display->display_options['query']['type'] = 'views_query';
	$handler->display->display_options['query']['options']['query_comment'] = FALSE;
	$handler->display->display_options['exposed_form']['type'] = 'basic';
	$handler->display->display_options['pager']['type'] = 'full';
	$handler->display->display_options['pager']['options']['items_per_page'] = '10';
	$handler->display->display_options['style_plugin'] = 'default';
	$handler->display->display_options['row_plugin'] = 'fields';
	/* Field: Content: Nid */
	$handler->display->display_options['fields']['nid']['id'] = 'nid';
	$handler->display->display_options['fields']['nid']['table'] = 'node';
	$handler->display->display_options['fields']['nid']['field'] = 'nid';
	$handler->display->display_options['fields']['nid']['label'] = '';
	$handler->display->display_options['fields']['nid']['exclude'] = TRUE;
	$handler->display->display_options['fields']['nid']['element_label_colon'] = FALSE;
	/* Field: Content: Channel ID */
	$handler->display->display_options['fields']['field_bt_channel_id']['id'] = 'field_bt_channel_id';
	$handler->display->display_options['fields']['field_bt_channel_id']['table'] = 'field_data_field_bt_channel_id';
	$handler->display->display_options['fields']['field_bt_channel_id']['field'] = 'field_bt_channel_id';
	$handler->display->display_options['fields']['field_bt_channel_id']['label'] = '';
	$handler->display->display_options['fields']['field_bt_channel_id']['exclude'] = TRUE;
	$handler->display->display_options['fields']['field_bt_channel_id']['element_label_colon'] = FALSE;
	$handler->display->display_options['fields']['field_bt_channel_id']['settings'] = array(
	  'thousand_separator' => ' ',
	  'prefix_suffix' => 1,
	);
	/* Field: Content: Channel Title */
	$handler->display->display_options['fields']['field_bt_channel_title']['id'] = 'field_bt_channel_title';
	$handler->display->display_options['fields']['field_bt_channel_title']['table'] = 'field_data_field_bt_channel_title';
	$handler->display->display_options['fields']['field_bt_channel_title']['field'] = 'field_bt_channel_title';
	$handler->display->display_options['fields']['field_bt_channel_title']['label'] = '';
	$handler->display->display_options['fields']['field_bt_channel_title']['alter']['make_link'] = TRUE;
	$handler->display->display_options['fields']['field_bt_channel_title']['alter']['path'] = 'channel/[nid]';
	$handler->display->display_options['fields']['field_bt_channel_title']['element_type'] = 'h2';
	$handler->display->display_options['fields']['field_bt_channel_title']['element_label_colon'] = FALSE;
	/* Field: Content: Channel description */
	$handler->display->display_options['fields']['field_bt_channel_description']['id'] = 'field_bt_channel_description';
	$handler->display->display_options['fields']['field_bt_channel_description']['table'] = 'field_data_field_bt_channel_description';
	$handler->display->display_options['fields']['field_bt_channel_description']['field'] = 'field_bt_channel_description';
	$handler->display->display_options['fields']['field_bt_channel_description']['label'] = '';
	$handler->display->display_options['fields']['field_bt_channel_description']['element_label_colon'] = FALSE;
	/* Sort criterion: Content: Post date */
	$handler->display->display_options['sorts']['created']['id'] = 'created';
	$handler->display->display_options['sorts']['created']['table'] = 'node';
	$handler->display->display_options['sorts']['created']['field'] = 'created';
	$handler->display->display_options['sorts']['created']['order'] = 'DESC';
	/* Filter criterion: Content: Published */
	$handler->display->display_options['filters']['status']['id'] = 'status';
	$handler->display->display_options['filters']['status']['table'] = 'node';
	$handler->display->display_options['filters']['status']['field'] = 'status';
	$handler->display->display_options['filters']['status']['value'] = 1;
	$handler->display->display_options['filters']['status']['group'] = 1;
	$handler->display->display_options['filters']['status']['expose']['operator'] = FALSE;
	/* Filter criterion: Content: Type */
	$handler->display->display_options['filters']['type']['id'] = 'type';
	$handler->display->display_options['filters']['type']['table'] = 'node';
	$handler->display->display_options['filters']['type']['field'] = 'type';
	$handler->display->display_options['filters']['type']['value'] = array(
	  'brighttalk_channel' => 'brighttalk_channel',
	);

	/* Display: Page */
	$handler = $view->new_display('page', 'Page', 'page');
	$handler->display->display_options['path'] = 'channels';
	$handler->display->display_options['menu']['type'] = 'normal';
	$handler->display->display_options['menu']['title'] = 'Channels';
	$handler->display->display_options['menu']['description'] = 'Brighttalk.com channels';
	$handler->display->display_options['menu']['weight'] = '0';
	$handler->display->display_options['menu']['name'] = 'main-menu';
	$handler->display->display_options['menu']['context'] = 0;


  // Add view to list of views to provide.
  $views[$view->name] = $view;
  // ...Repeat all of the above for each view the module should provide.

  // At the end, return array of default views.
  return $views;
}

/**
 * implements hook feeds_importer_default
 *
 * This defines our standard feed, using the brighttalk_channel content type
 */
function brighttalkchannel_feeds_importer_default(){
  $feeds_importer = new stdClass();
  $feeds_importer->disabled = FALSE; /* Edit this to true to make a default feeds_importer disabled initially */
  $feeds_importer->api_version = 1;
  $feeds_importer->id = 'brighttalkchannel';
  $feeds_importer->config = array(
    'name' => 'BrightTALK Channel',
    'description' => 'The BrightTALK Channel feed importer',
    'fetcher' => array(
      'plugin_key' => 'FeedsHTTPFetcher',
      'config' => array(
        'auto_detect_feeds' => FALSE,
        'use_pubsubhubbub' => FALSE,
        'designated_hub' => '',
      ),
    ),
    'parser' => array(
      'plugin_key' => 'BrighttalkChannelParser',
      'config' => array(),
    ),
    'processor' => array(
      'plugin_key' => 'FeedsNodeProcessor',
      'config' => array(
        'content_type' => 'brighttalk_webcast',
        'expire' => '-1',
        'author' => 0,
        'mappings' => array(
          0 => array(
            'source' => 'guid',
            'target' => 'guid',
            'unique' => 1,
          ),
          1 => array(
            'source' => 'author',
            'target' => 'field_bt_feed_author',
            'unique' => FALSE,
          ),
          2 => array(
            'source' => 'channel',
            'target' => 'field_bt_feed_channel_id',
            'unique' => FALSE,
          ),
          3 => array(
            'source' => 'webcast',
            'target' => 'field_bt_feed_communication_id',
            'unique' => FALSE,
          ),
          4 => array(
            'source' => 'duration',
            'target' => 'field_bt_feed_duration',
            'unique' => FALSE,
          ),
          5 => array(
            'source' => 'summary',
            'target' => 'body',
            'unique' => FALSE,
          ),
          6 => array(
            'source' => 'tags',
            'target' => 'field_bt_feed_tags',
            'unique' => FALSE,
          ),
          7 => array(
            'source' => 'date',
            'target' => 'field_bt_feed_start:start',
            'unique' => FALSE,
          ),
          8 => array(
            'source' => 'image',
            'target' => 'field_bt_feed_image',
            'unique' => FALSE,
          ),
          9 => array(
            'source' => 'status',
            'target' => 'field_bt_feed_status',
            'unique' => FALSE,
          ),
          10 => array(
            'source' => 'title',
            'target' => 'title',
            'unique' => FALSE,
          ),
          11 => array(
            'source' => 'url',
            'target' => 'field_bt_feed_webcast_url:url',
            'unique' => FALSE,
          ),
          11 => array(
            'source' => 'player',
            'target' => 'field_bt_player',
            'unique' => FALSE,
          ),
        ),
        'update_existing' => '1',
        'input_format' => 'plain_text',
      ),
    ),
    'content_type' => 'brighttalk_channel',
    'update' => 0,
    'import_period' => '1800',
    'expire_period' => 3600,
    'import_on_create' => 1,
    'process_in_background' => 0,
  );
  $export['feed'] = $feeds_importer;
  return $export;
}

/**
 * Implements hook_theme
 */
function brighttalkchannel_theme($existing, $type, $theme, $path) {
  return array(
    'node__brighttalk_webcast' =>array(
      'path' => drupal_get_path('module', 'brighttalkchannel'),
      'template' => 'node--brighttalk_webcast',
    ),
    'node__brighttalk_channel' =>array(
      'path' => drupal_get_path('module', 'brighttalkchannel'),
      'template' => 'node--brighttalk_channel',
    ),
  );
}

/**
 * Preprocess function for brighttalk_webcast node.
 */
function brighttalkchannel_preprocess_node(&$vars, $hook) {

  brighttalkchannel_preprocess_channel_node($vars, $hook);
  brighttalkchannel_preprocess_webcast_node(&$vars, $hook);
}


/**
 * Preprocess function for brighttalk_channel node.
 */
function brighttalkchannel_preprocess_channel_node(&$vars, $hook) {
  if (!isset($vars['type']) || $vars['type'] != 'brighttalk_channel') {
	  return;
  }

  drupal_add_css(drupal_get_path('module', 'brighttalkchannel') . '/css/feeds_brighttalk.css', array('every_page' => FALSE));


  if (isset($vars['view_mode']) && $vars['view_mode'] == 'full') {
		$args = array(arg(1));
		$view = views_get_view('brighttalk-channel');
		$vars['view_channel'] = $view->preview('default', $args);
	}
}

/**
 * Preprocess function for brighttalk_channel node.
 */
function brighttalkchannel_preprocess_webcast_node(&$vars, $hook) {

  if (!isset($vars['type']) || !isset($vars['view_mode']) || !$vars['type'] == 'brighttalk_webcast' || ($vars['view_mode'] != 'teaser' && $vars['view_mode'] != 'full')) {
	  return;
	}

  drupal_add_css(drupal_get_path('module', 'brighttalkchannel') . '/css/feeds_brighttalk.css', array('every_page' => FALSE));

  $field_bt_feed_start = field_get_items('node', $vars['node'], 'field_bt_feed_start');

	if (isset($field_bt_feed_start[0]['value'])) {
    $start_date = format_date($field_bt_feed_start[0]['value'], 'custom', 'M d Y g:i a', $timezone = NULL, $langcode = NULL);
	}

  $field_bt_feed_status = field_get_items('node', $vars['node'], 'field_bt_feed_status');
  $status = isset($field_bt_feed_status[0]['value']) ? $field_bt_feed_status[0]['value'] : '';

	switch ($status) {
		case 'upcoming':
      $vars['processed_start'] = isset($start_date) ? t('Live on !date', array('!date' => $start_date)) : '';
			$button_image = 'attend';
			break;

		default:
      $vars['processed_start'] = isset($start_date) ? t('Recorded on !date', array('!date' => $start_date)) : '';
			$button_image = 'play';
			break;
	}

	// Action button.
	$vars['button'] = '/'. drupal_get_path('module', 'brighttalkchannel') . '/images/'. $button_image .'.png';

  // Duration - format to time
  $duration = field_get_items('node', $vars['node'], 'field_bt_feed_duration');
  $vars['processed_duration'] = format_interval($duration[0]['value'], $granularity = 2, $langcode = NULL);

	// Webcast URL.
  $webcast_url = field_get_items('node', $vars['node'], 'field_bt_feed_webcast_url');
  $vars['webcast_url'] = $webcast_url[0]['display_url'];

	// Image.
  $thumbnail = field_get_items('node', $vars['node'], 'field_bt_feed_image');

  if (empty($thumbnail)) {
		$vars['thumbnail'] = '<img typeof="foaf:Image" src="/'. drupal_get_path('module', 'brighttalkchannel') . '/images/default.png" alt="'. $vars['title'] .'" />';
  }
	else {
		$vars['thumbnail'] = theme('image_style', array('path' => $thumbnail['0']['uri'], 'style_name' => 'thumbnail'));
	}

  // Teaser specific changes.
  if ($vars['view_mode'] == 'teaser') {

	  // Title character limit.
	  $vars['processed_title'] = views_trim_text(array('max_length' => 45, 'word_boundary' => TRUE, 'ellipsis' => TRUE), $vars['title']);

	  // Body character limit
		$body = isset($vars['body'][0]['value']) ? $vars['body'][0]['value'] : '';
	  $vars['body_teaser'] = check_plain(views_trim_text(array('max_length' => 55, 'word_boundary' => TRUE, 'ellipsis' => TRUE), $body));

	  // Body character limit
		$author = field_get_items('node', $vars['node'], 'field_bt_feed_author');
	  $vars['processed_author'] = views_trim_text(array('max_length' => 60, 'word_boundary' => TRUE, 'ellipsis' => TRUE), $author[0]['safe_value']);

	  // Image.
	  //$thumbnail = field_get_items('node', $vars['node'], 'field_bt_feed_image');

		// 	  if (empty($thumbnail)) {
		// 	$vars['thumbnail'] = '<img typeof="foaf:Image" src="/'. drupal_get_path('module', 'brighttalkchannel') . '/images/default.png" alt="'. $vars['title'] .'" />';
		// 	  }
		// else {
		// 	$vars['thumbnail'] = theme('image_style', array('path' => $thumbnail['0']['uri'], 'style_name' => 'thumbnail'));
		// }
  }

}

/**
 * Implements hook_form_alter().
 *
 */
function brighttalkchannel_form_alter(&$form, &$form_state, $form_id) {
  // Hide the Player field in the Webcast node form.
  if ($form_id == 'brighttalk_webcast_node_form') {
    $form['field_bt_player']['#access'] = FALSE;
  }
}





