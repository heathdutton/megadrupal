<?php

/**
 * @file
 * Provides a tigo money payment method for Drupal Commerce.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_tigo_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_tigo'] = array(
    'title' => t('Tigo Money payment'),
    'description' => t('Tigo Money payment method.'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_tigo_settings_form($settings = array()) {
  $form = array();

  // Default values.
  $settings = (array) $settings + array(
    'url' => '',
    'id_key' => '',
    'encryption_key' => '',
    'confirmation_sms' => '',
  );

  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('Tigo URL'),
    '#description' => t('The URL gateway provided by Tigo.'),
    '#default_value' => $settings['url'],
    '#required' => TRUE,
  );
  $form['id_key'] = array(
    '#type' => 'textfield',
    '#title' => t('ID Key'),
    '#default_value' => $settings['id_key'],
    '#required' => TRUE,
  );
  $form['encryption_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Encryption Key'),
    '#default_value' => $settings['encryption_key'],
    '#required' => TRUE,
  );
  $form['confirmation_sms'] = array(
    '#type' => 'textfield',
    '#title' => t('Confirmation SMS'),
    '#default_value' => $settings['confirmation_sms'],
    '#description' => t('This <strong>20 character</strong> message will be added to the SMS confirmation the costumer receives when the payment is received.'),
    '#required' => TRUE,
    '#maxlength' => 20,
  );

  return $form;
}

/**
 * Payment method callback: submit form.
 */
function commerce_tigo_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  $form['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Tigo Money Line'),
    '#required' => TRUE,
    '#maxlength' => 8,
    '#element_validate' => array('element_validate_integer_positive'),
    '#field_suffix' => theme('image', array('path' => drupal_get_path('module', 'commerce_tigo') . '/tigomoney_small.jpg')),
  );

  return $form;
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_tigo_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  // Even though a form error triggered by the validate handler would be enough
  // to stop the submission of the form, it's not enough to stop it from a
  // Commerce standpoint because of the combined validation / submission going
  // on per-pane in the checkout form. Thus even with a call to form_set_error()
  // this validate handler must still return FALSE.
  if (!preg_match('/^\d{8}$/', $pane_values['phone'])) {
    form_set_error('phone', t('Phone number must a an 8 digit number'));
    return FALSE;
  }
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_tigo_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order->data['commerce_tigo'] = $pane_values;
}

/**
 * Payment method callback: redirect form.
 */
function commerce_tigo_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['url'])) {
    drupal_set_message(t('Tigo Money is not configured for use. No Tigo Money url address has been specified.'), 'error');
    return array();
  }

  $params = array(
    'pv_nroDocumento' => $order->uid,
    'pv_orderId' => $order->order_id,
    'pv_monto' => $order->commerce_order_total[LANGUAGE_NONE][0]['amount'] / 100,
    'pv_linea' => $order->data['commerce_tigo']['phone'],
    // Return to the payment redirect page for processing successful payments.
    'pv_urlCorrecto' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    // Return to the previous page when payment is canceled.
    'pv_urlError' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    'pv_confirmacion' => $payment_method['settings']['confirmation_sms'],
  );

  $line_item_ids = array_map(function($n) { return $n['line_item_id']; }, $order->commerce_line_items['und']);
  $line_items = commerce_line_item_load_multiple($line_item_ids);
  //$product_ids = array_map(function($n) { return $n->commerce_product['und'][0]['product_id']; }, $line_items);
  //$products = commerce_product_load_multiple($product_ids);
  $pv_items = '';
  $i = 1;
  foreach ($line_items as $line_item) {
    //$product = $products[$line_item->commerce_product['und'][0]['product_id']];
    $pv_items .= '*i' . $i .
      '|' . (int) $line_item->quantity .
      '|' . $line_item->line_item_label .
      '|' . $line_item->commerce_unit_price['und'][0]['amount'] / 100 .
      '|' . ($line_item->commerce_unit_price['und'][0]['amount'] / 100) * $line_item->quantity;
    $i++;
  }

  $params['pv_items'] = $pv_items;

  // Allow modules to alter parameters of the API request.
  drupal_alter('commerce_tigo_redirect_form_data', $params, $order);

  $params_str = '';
  foreach ($params as $key => $value) {
    // Don't prepend ';' on the first param.
    if ($params_str != '') {
      $params_str .= ';';
    }
    $params_str .= $key . '=' . $value;
  }

  $form['key'] = array(
    '#type' => 'hidden',
    '#value' => $payment_method['settings']['id_key'],
  );
  $form['parametros'] = array(
    '#type' => 'hidden',
    '#value' => base64_encode(mcrypt_encrypt(MCRYPT_3DES, $payment_method['settings']['encryption_key'], $params_str, MCRYPT_MODE_ECB)),
  );

  $form['#action'] = $payment_method['settings']['url'];

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to Tigo Money'),
  );

  return $form;
}

/**
 * Payment method callback: redirect form return validation.
 */
function commerce_tigo_redirect_form_validate($order, $payment_method) {
  if (!isset($_REQUEST['r'])) {
    return FALSE;
  }

  $_REQUEST['r'] = str_replace(' ', '+', $_REQUEST['r']);
  $return = mcrypt_decrypt(MCRYPT_3DES, $payment_method['settings']['encryption_key'], base64_decode($_REQUEST['r']), MCRYPT_MODE_ECB);
  $return = rtrim($return, "\0");

  if ($return) {
    $params = array();
    parse_str($return, $params);
    if (isset($params['codRes']) && $params['codRes'] === '0') {
      module_invoke_all('commerce_tigo_finish_transaction', $params, $order);
      drupal_set_message($params['mensaje']);
      $charge = $order->commerce_order_total[LANGUAGE_NONE][0];
      if (commerce_tigo_transaction($payment_method, $order, $charge)) {
        return TRUE;
      }
      else {
        return FALSE;
      }
    }
    else {
      return FALSE;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Payment method callback: redirect form submit.
 */
function commerce_tigo_redirect_form_submit($order, $payment_method) {
  // Because we need to be able to halt checkout completion if payment fails for
  // some reason, instead of getting and processing Tigo Money payment
  // details in the submission step, we do this in the validate step above.
}

/**
 * Creates a tigo money payment transaction for the specified charge amount.
 *
 * @param $payment_method
 *   The payment method instance object used to charge this payment.
 * @param $order
 *   The order object the payment applies to.
 * @param $charge
 *   An array indicating the amount and currency code to charge.
 */
function commerce_tigo_transaction($payment_method, $order, $charge) {
  $transaction = commerce_payment_transaction_new('commerce_tigo', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;

  $transaction->message = 'Payment received.';
  $transaction->message_variables = array();

  commerce_payment_transaction_save($transaction);
  return $transaction;
}

/**
 * Implements hook_commerce_checkout_pane_info().
 *
 * Defines a new checkout pane (this one is used to deliver a different completion message
 */
function commerce_tigo_commerce_checkout_pane_info() {
  $panes['commerce_tigo'] = array(
    'title' => t('Tigo Money checkout complete message'),
    'page' => 'complete',
    'weight' => 10,
    'file' => 'commerce_tigo.checkout_pane.inc',
    'base' => 'commerce_tigo_pane',
  );
  // disable this pane if the order is not payed with pagos_net
  if (arg(0) == 'checkout') {
    $commerce_order = menu_get_object('commerce_order');
    if (null == $commerce_order) {
      $commerce_order = commerce_cart_get_properties(false, array(), 'current_cart_order');
    }
    if (isset($commerce_order->data['payment_method'])) {
      list($payment_method) = explode('|', $commerce_order->data['payment_method']);
      if ($payment_method != 'commerce_tigo') {
        unset($panes['commerce_tigo']);
      }
    }
  }
  return $panes;
}
