<?php

/**
 * @todo
 *   max recurring spans are used and untranslatable
 */

/**
 * Implements hook_menu().
 */
function entity_recur_menu() {
  $items = array();
  $info = entity_get_info();
  foreach ($info as $entity_type => $entity_info) {
    if (($path = entity_recur_recur_menu_path($entity_type))) {
      $load_arguments = array();
      $parts = explode('/', $path);
      if (strpos($path, '%entity_object') !== FALSE) {
        $load_arguments[] = $entity_type;
        $argument_position = array_search('%entity_object', $parts);
      }
      else {
        $argument = '%' . drupal_substr($entity_info['load hook'], 0, -5);
        $argument_position = array_search($argument, $parts);
      }
      $items[$path] = array(
        'title' => 'Recur',
        'title callback' => 'entity_recur_menu_title_callback',
        'title arguments' => array($entity_type, $argument_position),
        'description' => format_string('Set recurring rules on this @type', array('@type' => $entity_info['label'])),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('entity_recur_entity_recur_form', $entity_type, $argument_position),
        'access callback' => 'entity_recur_entity_recur_form_access',
        'access arguments' => array($entity_type, $argument_position),
        'load arguments' => $load_arguments,
        'file' => 'entity_recur.pages.inc',
        'type' => MENU_LOCAL_ACTION,
      );
    }
  }
  return $items;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function entity_recur_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function entity_recur_ctools_plugin_api($owner, $api) {
  if ($owner == 'entity_recur' && $api == 'entity_recur') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function hook_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'default_entity_recur_settings_alter') {
    $group = $implementations['entity_recur'];
    unset($implementations['entity_recur']);
    $implementations = array('entity_recur' => $group) + $implementations;
  }
}

/**
 * Implements hook_permission().
 */
function entity_recur_permission() {
  $info = entity_get_info();
  $permissions = array();
  foreach ($info as $entity_type => $entity_info) {
    $t_arguments = array(
      '@entities' => isset($entity_info['plural label']) ? $entity_info['plural label'] : $entity_info['label'] . 's',
    );
    $permissions['recur own ' . $entity_type] = array(
      'title' => t('Recur own @entities', $t_arguments),
      'description' => t('Allows the user to recur @entities that the user is an author of.', $t_arguments)
    );
    $permissions['recur all ' . $entity_type] = array(
      'title' => t('Recur all @entities', $t_arguments),
      'description' => t('Allows the user to recur all @entities.', $t_arguments)
    );
    foreach ($entity_info['bundles'] as $bundle => $bundle_info) {
      $t_arguments['@bundle'] = $bundle_info['label'];
      $permissions['recur own ' . $entity_type . ' ' . $bundle] = array(
        'title' => t('Recur own @bundle @entities', $t_arguments),
        'description' => t('Allows the user to recur @bundle @entities that the user is an author of.', $t_arguments)
      );
      $permissions['recur all ' . $entity_type . ' ' . $bundle] = array(
        'title' => t('Recur all @bundle @entities', $t_arguments),
        'description' => t('Allows the user to recur all @bundle @entities.', $t_arguments)
      );
    }
  }
  return $permissions;
}

/**
 * Implements hook_field_attach_form().
 */
function entity_recur_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  // See if this is an 'add' operation.
  list($id) = entity_extract_ids($entity_type, $entity);
  // As of PHP 5, objects are always passed by reference. Clone it so we don't
  // alter the actual entity.
  $clone = clone $entity;
  // No identifier means new entity.
  if (!$id) {
    // The current user is adding the entity, so he owns it. Make sure this is
    // reflected on the entity before checking the permissions.
    global $user;
    $clone->uid = $user->uid;
    $settings = entity_recur_get_settings($entity_type, $clone);
    $form['#entity_recur_form'] = $settings
      // Make sure recurring is enabled for this entity
      && $settings->enabled
      // See if we should display options for this entity
      && $settings->form
      // Check permissions
      && entity_recur_access($entity_type, $clone);

    if ($form['#entity_recur_form']) {
      $form['#recurring_entity'] = $entity;
      $form['#recurring_entity_type'] = $entity_type;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function entity_recur_form_alter(&$form) {
  if (isset($form['#entity_recur_form']) && $form['#entity_recur_form']) {
    $entity = $form['#recurring_entity'];
    $entity_type = $form['#recurring_entity_type'];
    $settings = entity_recur_get_settings($entity_type, $entity);
    module_load_include('inc', 'entity_recur', 'entity_recur.pages');
    // Get the recur form
    $recur_form = _entity_recur_entity_recur_form($entity_type, $entity);
    // Change the default option
    $recur_form['option']['#default_value'] = 'none';
    // Set the until date to not be required
    $recur_form['until']['#required'] = FALSE;
    // Add fieldset wrapper
    $form['entity_recur'] = array(
      '#type' => 'fieldset',
      '#title' => t('Recur'),
      '#weight' => $form[$settings->date_field]['#weight'] + 0.1,
      '#tree' => TRUE,
    );
    // Merge the form into the wrapper
    $form['entity_recur'] = array_merge($form['entity_recur'], $recur_form);
    // Add validation and submission
    $form['#validate'][] = 'entity_recur_entity_form_validate';
    $form['#submit'][] = 'entity_recur_entity_form_submit';
    if (isset($form['actions']['submit'])) {
      $form['actions']['submit']['#validate'][] = 'entity_recur_entity_form_validate';
      $form['actions']['submit']['#submit'][] = 'entity_recur_entity_form_submit';
    }
  }
}

/**
 * Access handler for the entity recur form.
 */
function entity_recur_entity_recur_form_access($entity_type, $entity) {
  $settings = entity_recur_get_settings($entity_type, $entity);
  return $settings
    // See if recurring is enabled for this entity.
    && $settings->enabled
    // Make sure we have a valid date field
    && $settings->date_field
    // Check permissions
    && entity_recur_access($entity_type, $entity);
}

/**
 * Checks if a given user has permissions to recur an entity.
 *
 * @param type $entity_type
 *   The entity type of the entity to recur.
 * @param type $entity
 *   The entity to recur.
 * @param $account
 *   The account to check the permissions for. Defaults to the current user.
 * @return Boolean
 *   TRUE if the user can recur this entity, FALSE if not.
 */
function entity_recur_access($entity_type, $entity, $account = NULL) {
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  $access = FALSE;
  if (user_access('recur all ' . $entity_type, $account)) {
    $access = TRUE;
  }
  elseif (user_access('recur all ' . $entity_type . ' ' . $bundle, $account)) {
    $access = TRUE;
  }
  elseif (entity_recur_user_is_owner($entity, $account)) {
    if (user_access('recur own ' . $entity_type, $account)) {
      $access = TRUE;
    }
    elseif (user_access('recur own ' . $entity_type . ' ' . $bundle, $account)) {
      $access = TRUE;
    }
  }
  // Allow modules to alter this
  drupal_alter('entity_recur_access', $access, $entity_type, $entity);
  return $access;
}

function entity_recur_user_is_owner($entity, $account = NULL) {
  if (!$account) {
    global $user;
    $account = $user;
  }
  // Try to get the uid of the entity owner from the entity itself. If it's not
  // set (for example, if the entity type does not store a uid or does not have
  // a concept of "ownership"), we need to assume that the provided user
  // account does not own it.
  return isset($entity->uid) && $entity->uid == $account->uid;
}

/**
 * Get the settings for a given bundle
 *
 * @param $entity_type
 *   The entity type
 * @param $entity
 *   The entity
 * @return
 *   A settings object if it exists, otherwise FALSE
 */
function entity_recur_get_settings($entity_type, $entity) {
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  $cache = &drupal_static(__FUNCTION__, array());
  if (!isset($cache["{$entity_type}_{$bundle}"])) {
    ctools_include('export');
    $settings = ctools_export_load_object(
      'entity_recur_settings',
      'conditions',
      array('entity_type' => $entity_type, 'bundle' => $bundle)
    );
    $setting = reset($settings);
    if ($setting && !field_info_instance($entity_type, $setting->date_field, $bundle)) {
      $setting->date_field = FALSE;
    }
    $cache["{$entity_type}_{$bundle}"] = $setting;
  }
  return $cache["{$entity_type}_{$bundle}"];
}

/**
 * Determine the value of a bundle's recurring date field
 *
 * @param $entity_type
 *   The entity type
 * @param $entity
 *   The entity object
 * @param $start
 *   TRUE if the start date should be used. FALSE is the end date should
 *   be used.
 * @return
 *   The value of the bundle's date field
 */
function entity_recur_get_entity_date_field_value($entity_type, $entity, $start = TRUE) {
  $wrapped = entity_metadata_wrapper($entity_type, $entity);
  $settings = entity_recur_get_settings($entity_type, $entity);
  if ($settings->date_field) {
    $key = $start ? 'value' : 'value2';
    $val = $wrapped->{$settings->date_field}->value();
    if (is_array($val)) {
      return $wrapped->{$settings->date_field}->{$key}->value();
    }
    elseif ($val) {
      return $val;
    }
  }
  return NULL;
}

/**
 * Generate an array of recurring dates based on the provided rule criteria
 *
 * @param $entity_type
 *   The entity type of the entity that's being recurred
 * @param $entity
 *   The entity that's being recurred
 * @param $date
 *   The initial starting date belonging to the entity that will be recurring.
 *   Can be in string or numeric format.
 * @param $frequency
 *   The frequency that the period occurs, ie, every 5 days, the frequency
 *   would be 5.
 * @param $period
 *   The period of each frequency, ie, every 5 days, the period will be
 *   'day'. It can also be 'week' or 'month'.
 * @param $until
 *   The date to recur until. Can be in string or numeric format.
 * @param $weekends
 *   TRUE if weekends should be included.
 * @return
 *   An array of timestamps
 */
function entity_recur_generate_dates_rule($entity_type, $entity, $date, $frequency, $period, $until, $weekends = TRUE) {
  $dates = array();
  $month = FALSE;
  $settings = entity_recur_get_settings($entity_type, $entity);

  // Make sure the until is ahead of the date
  if ($date >= $until) {
    return FALSE;
  }

  // Convert month period to weeks, in order to preserve the day
  // of the week
  if ($period == 'month') {
    $frequency = $frequency * 4;
    $period = 'week';
    $month = TRUE;
  }

  // Track the current date
  $current = $date;

  // Iterate and generate dates until we reach the end
  while (TRUE) {
    // Generate the next date
    $next = strtotime("+{$frequency} " . format_plural($frequency, $period, "{$period}s"), $current);

    // If this is a month recur, we need to make sure the the next date
    // is on the next month. Some months have 5 repeats of the same day
    if ($month && (date('n', $next) == date('n', $current))) {
      // Jump forward one more week
      $next = strtotime('+1 week', $next);
    }

    $current = $next;

    // Make sure date is in the future, if the settings dictate that
    if (!$settings->allow_past && $next < REQUEST_TIME) {
      continue;
    }

    // If we're excluding weekends, skip this if it's a weekend
    $day = new DateObject($next);
    if (($day->format('N') == 6 || $day->format('N') == 7) && !$weekends) {
      continue;
    }

    // See if this date puts us past the limit
    if ($next > $until) {
      break;
    }

    $dates[] = $current;
  }

  return $dates;
}

/**
 * Generate an array of recurring dates based on days
 *
 * @param $entity_type
 *   The entity type of the entity that's being recurred
 * @param $entity
 *   The entity that's being recurred
 * @param $date
 *   The initial starting date belonging to the node that will be recurring.
 *   Can be in string or numeric format.
 * @param $days
 *   An array of days (monday, tuesday, etc)
 * @param $until
 *   The date to recur until. Can be in string or numeric format.
 * @param $offset
 *   The amount of days the $days should be offset by, ie if $days = 'monday',
 *   and offset = 2, $days becomes 'wednesday'. This is used to calculate
 *   end dates that are N days apart from the start dates.
 * @return
 *   An array of timestamps
 */
function entity_recur_generate_dates_days($entity_type, $entity, $date, $days, $until, $offset = NULL) {
  $dates = array();
  $date_obj = new DateObject($date);
  $until_obj = new DateObject($until);
  $settings = entity_recur_get_settings($entity_type, $entity);

  // Move the date back based on the offset
  if ($offset) {
    $date_obj->sub('P' . $offset . 'D');
  }

  // Make sure we have valid timestamps
  if ($date_obj->errors || $until_obj->errors) {
    return FALSE;
  }

  // Make sure the until is ahead of the date
  if ($date_obj->getTimestamp() >= $until_obj->getTimestamp()) {
    return FALSE;
  }

  // Determine which day to start with which would be the closest
  // "next" day, ie, depending on the initial date, next friday
  // may be sooner than next monday.
  $first_day = NULL;
  foreach ($days as $day) {
    // Track the current date
    $current = clone $date_obj;
    // Determine how many days until the next "day"
    $current->modify("next {$day}");
    if (!$first_day || $current->getTimestamp() < $first_day) {
      $first_day = $current->getTimestamp();
    }
  }
  $current = clone $date_obj;

  // Iterate and generate dates until we reach the end
  while (TRUE) {
    foreach ($days as $day) {
      // Determine how many days until the next "day"
      $current->modify("next {$day}");
      // Make sure the hours match, to avoid DST issue
      $current->setTime($date_obj->format('G'), intval($current->format('i')), intval($current->format('s')));

      // See if this date puts us past the limit
      if ($current->getTimestamp() > $until_obj->getTimestamp()) {
        break 2;
      }

      // Apply the offset, if one
      $date_to_use = clone $current;
      if ($offset) {
        $date_to_use->add(new DateInterval('P' . $offset . 'D'));
      }

      // Make sure date is in the future, if the settings dictate that
      if (!$settings->allow_past && $date_to_use->getTimestamp() < REQUEST_TIME) {
        continue;
      }

      // See if we have to skip until we use the first day.
      if ($first_day && $first_day > $current->getTimestamp()) {
        continue;
      }
      $first_day = NULL;

      $dates[] = $date_to_use->getTimestamp();
    }
  }

  return $dates;
}

/**
 * Generate dates from a form state
 *
 * @return
 *   An array of start and end dates, keyed by start and
 *   end
 */
function entity_recur_generate_dates_from_form($entity_type, $entity, $form_state) {
  // Extract the option
  $option = $form_state['values']['entity_recur']['option'];
  // Extract the days
  $days = array();
  foreach ($form_state['values']['entity_recur']['days'] as $day => $value) {
    if ($value) {
      $days[] = $day;
    }
  }
  // Extract the frequency
  $frequency = $form_state['values']['entity_recur']['rules']['frequency'];
  // Extract the period
  $period = $form_state['values']['entity_recur']['rules']['period'];
  // Extract the until date
  $until = new DateObject($form_state['values']['entity_recur']['until']);
  // Move until date to 1 second before midnight
  $until->setTime(23, 59, 59);
  // Extract weekend toggle
  $weekends = !$form_state['values']['entity_recur']['rules']['exclude_weekends'];
  // Get the initial dates
  $start_date = entity_recur_get_entity_date_field_value($entity_type, $entity);
  $end_date = entity_recur_get_entity_date_field_value($entity_type, $entity, FALSE);
  // Initalize
  $start_dates = array();
  $end_dates = array();

  // Generate the start dates
  if ($start_date) {
    if ($option == 'days') {
      $start_dates = entity_recur_generate_dates_days($entity_type, $entity, $start_date, $days, $until->getTimestamp());
    }
    else if ($option == 'rules') {
      $start_dates = entity_recur_generate_dates_rule($entity_type, $entity, $start_date, $frequency, $period, $until->getTimestamp(), $weekends);
    }
  }

  // Generate the end dates
  if ($end_date) {
    // Determine if the start and end dates are different days
    $days_apart = NULL;
    if ($start_date) {
      $start_date_obj = new DateObject($start_date);
      $end_date_obj = new DateObject($end_date);
      if (date('j', strtotime($start_date)) != date('j', strtotime($end_date))) {
        // Determine the amount of days
        $days_apart = $end_date_obj->difference($start_date_obj, 'days');
        // Adjust the until date
        $until->add(new DateInterval('P' . $days_apart . 'D'));
      }
    }
    if ($option == 'days') {
      $end_dates = entity_recur_generate_dates_days($entity_type, $entity, $end_date, $days, $until->getTimestamp(), $days_apart);
    }
    else if ($option == 'rules') {
      $end_dates = entity_recur_generate_dates_rule($entity_type, $entity, $end_date, $frequency, $period, $until->getTimestamp(), $weekends);
    }
  }

  // Allow other modules to alter the dates
  $dates = array(
    'start' => $start_dates,
    'end' => $end_dates,
  );
  $variables = array(
    'entity_type' => $entity_type,
    'entity' => $entity,
    'start_date' => $start_date,
    'end_date' => $end_date,
    'option' => $option,
    'until' => $until,
  );
  if ($option == 'days') {
    $variables['days'] = $days;
  }
  if ($option == 'rules') {
    $variables += array(
      'frequency' => $frequency,
      'period' => $period,
      'weekends' => $weekends,
    );
  }
  drupal_alter('entity_recur_dates', $dates, $variables);

  return $dates;
}

/**
 * Validation handler for the entity recur form on the entity form
 */
function entity_recur_entity_form_validate(&$form, &$form_state) {
  module_load_include('inc', 'entity_recur', 'entity_recur.pages');
  entity_recur_entity_recur_form_validate($form, $form_state);
}

/**
 * Submit handler for the node recur form on the node form
 */
function entity_recur_entity_form_submit(&$form, &$form_state) {
  module_load_include('inc', 'entity_recur', 'entity_recur.pages');

   // If option is set to nothing, then end here
  if ($form_state['values']['entity_recur']['option'] == 'none') {
    return;
  }

  // Extract the entity
  $entity = &$form['entity_recur']['#recurring_entity'];
  $entity_type = $form['entity_recur']['#recurring_entity_type'];

  // Fill in field_values.
  entity_form_submit_build_entity($entity_type, $entity, $form, $form_state);
  // Generate dates
  $dates = entity_recur_generate_dates_from_form($entity_type, $entity, $form_state);

  // Store the dates
  $form['#start_dates'] = $dates['start'];
  $form['#end_dates'] = $dates['end'];

  // Use the normal submit handler
  entity_recur_entity_recur_confirm_submit($form, $form_state);
}

/**
 * Helper function to display a start and end time together
 *
 * @param $start
 *   A start datetime or timestamp
 * @param $end
 *   An end datetime or timestamp
 * @param $format
 *   The format type to use, sent to format_date()
 * @return
 *   A string of formatted dates
 */
function entity_recur_format_date($start, $end = NULL, $format = 'long') {
  $string = '';
  $start = format_date($start, $format);
  $string .= $start;

  // Convert end to timestamp, if needed, then format
  if ($end) {
    $end = format_date($end, $format);
    if ($start != $end) {
      $string .= ' - ' . $end;
    }
    else {
      $string .= ' (' . t('All day') . ')';
    }
  }

  return $string;
}

/**
 * Get the menu path on which the entity recur form should appear.
 *
 * @param $entity_type
 *   The recurring entity type.
 */
function entity_recur_recur_menu_path($entity_type) {
  $info = entity_get_info($entity_type);
  $path = FALSE;
  if ($info) {
    entity_recur_include_core_hooks();
    $function = $entity_type . '_entity_recur_recur_menu_path';
    if (function_exists($function)) {
      $path = $function();
    }
    drupal_alter('entity_recur_recur_menu_path', $path, $entity_type);
  }
  return $path;
}

function entity_recur_include_core_hooks() {
  static $included = FALSE;
  if (!$included) {
    foreach (module_list() as $module) {
      if (file_exists(drupal_get_path('module', 'entity_recur') . '/modules/' . $module . '.inc')) {
        module_load_include('inc', 'entity_recur', 'modules/' . $module);
      }
    }
    $included = TRUE;
  }
}

/**
 * Get the name of the day of the week by number.
 *
 * @param $day
 *   1 to 7, 1 being monday and 7 being sunday.
 * @return
 *  The name of the day of the week.
 */
function _entity_recur_number_to_weekday($day) {
  $days = array(
    1 => 'monday',
    2 => 'tuesday',
    3 => 'wednesday',
    4 => 'thursday',
    5 => 'friday',
    6 => 'saturday',
    7 => 'sunday',
  );
  return isset($days[$day]) ? $days[$day] : FALSE;
}

/**
 * Create the recurring entities
 */
function entity_recur_entity_create_entity($entity_type, $entity, $start_date, $end_date = NULL) {
  // Clone the entity
  $clone = replicate_clone_entity($entity_type, $entity);
  $settings = entity_recur_get_settings($entity_type, $entity);

  // Add some helpful markers
  $clone->is_recurring = TRUE;
  $clone->recurring_entity = $entity;

  // Inject the new dates
  $clone_wrapper = entity_metadata_wrapper($entity_type, $clone);
  $property_info = $clone_wrapper->getPropertyInfo();
  $clone_wrapper->{$settings->date_field}->set(array('value' => ''));
  if ($property_info[$settings->date_field]['type'] == 'date') {
    // No end date.
    $clone_wrapper->{$settings->date_field}->set($start_date);
  }
  else {
    $clone_wrapper->{$settings->date_field}->value->set($start_date);
    if ($end_date) {
      $clone_wrapper->{$settings->date_field}->value2->set($end_date);
    }
  }

  // Save the new entity.
  $clone_wrapper->save();
}

/**
 * Enable or disable entity recur for a bundle.
 */
function entity_recur_settings_status($settings, $status) {
  ctools_include('export');

  if (!is_object($settings)) {
    $settings = ctools_export_crud_load('entity_recur_settings', $settings);
  }
  if ($settings) {
    // ctools uses 'disabled', so TRUE means disabled, and FALSE means enabled.
    $settings->enabled = !$status;
    ctools_export_crud_save('entity_recur_settings', $settings);
    ctools_export_set_object_status($settings, $status);
  }
}

/**
 * Save a settings object.
 */
function entity_recur_settings_save($settings) {
  ctools_include('export');
  ctools_export_crud_save('entity_recur_settings', $settings);
}
