<?php
/**
 * @file
 * An example field using the Field Types API.
 */

/**
 * @defgroup social_profile_field Example: Field Types API
 * @ingroup examples
 * @{
 * Examples using Field Types API.
 *
 * This is updated from Barry Jaspan's presentation at Drupalcon Paris,
 * @link http://acquia.com/community/resources/acquia-tv/intro-field-api-module-developers Video Presentation @endlink
 *
 * Providing a field requires:
 * - Defining a field:
 *   - hook_field_info()
 *   - hook_field_schema()
 *   - hook_field_validate()
 *   - hook_field_is_empty()
 *
 * - Defining a formatter for the field (the portion that outputs the field for
 *   display):
 *   - hook_field_formatter_info()
 *   - hook_field_formatter_view()
 *
 * - Defining a widget for the edit form:
 *   - hook_field_widget_info()
 *   - hook_field_widget_form()
 *
 * Our module defines the field in social_profile_field_field_info(),
 * social_profile_field_field_validate() and social_profile_field_field_is_empty().
 * social_profile_field_field_schema() is implemented in social_profile_field.install.
 *
 * Our module sets up a formatter in social_profile_field_field_formatter_info() and
 * social_profile_field_field_formatter_view(). These are the API hooks that present
 * formatted and themed output to the user.
 * And finally, our module defines the widet in
 * social_profile_field_field_widget_info() and social_profile_field_field_widget_form().
 * The widget is the form element used to receive input from the user
 * when the field is being populated.
 *
 * @see field_types
 * @see field
 */

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function social_profile_field_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'social_profile_field_url' => array(
      'label' => t('Social Profile'),
      'description' => t('Handle social profiles links.'),
      'default_widget' => 'social_profile_field_default',
      'default_formatter' => 'social_profile_field_icons',
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * This hook gives us a chance to validate content that's in our
 * field. We're really only interested in the $items parameter, since
 * it holds arrays representing content in the field we've defined.
 * We want to verify that the items only contain valid URLs.
 * If the item validates, we do nothing. If it doesn't
 * validate, we add our own error notification to the $errors parameter.
 *
 * @see social_profile_field_field_widget_error()
 */
function social_profile_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['url'])) {
      if (!valid_url($item['url'], TRUE)) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'social_profile_field_invalid',
          'message' => t('URL is invalid. Please check it and provide a valid URL.'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function social_profile_field_field_is_empty($item, $field) {
  return empty($item['url']);
}

/**
 * Implements hook_field_formatter_info().
 *
 * We need to tell Drupal that we have two different types of formatters
 * for this field. One will change the text color, and the other will
 * change the background color.
 *
 * @see social_profile_field_field_formatter_view()
 */
function social_profile_field_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'social_profile_field_icons' => array(
      'label' => t('Show Social Networks icons.'),
      'field types' => array('social_profile_field_url'),
    ),
    // This formatter changes the background color of the content region.
    'social_profile_field_list' => array(
      'label' => t('Show list of links to Social Network Profiles.'),
      'field types' => array('social_profile_field_url'),
    ),
  );
}

/**
 * Returns domain name (with subdomains) for given URL.
 * @url string URL.
 * @result string Domain name.
 */
function _social_profile_field_get_domain($url) {
  return parse_url(check_url(trim($url)), PHP_URL_HOST);
}

/**
 * Returns path to icon file.
 */
function _social_profile_field_get_icon_path($domain = 'default') {
  return drupal_get_path('module', 'social_profile_field') . '/icons/' . $domain . '.png';
}

/**
 * Returns path to social network icon.
 * @url string URL.
 * @return string Rendered HTML-code for icon..
 */
function _social_profile_field_get_icon($domain) {
  $path = _social_profile_field_get_icon_path($domain);
  if (!file_exists($path)) {
    $path = _social_profile_field_get_icon_path();
  }
  return theme('image', array(
    'path' => $path,
    'attributes' => array('class' => 'social-profile-icon'),
  ));
}

/**
 * Implements hook_field_formatter_view().
 *
 * Two formatters are implemented.
 * - social_profile_field_icons outputs Social Network icons linked to user's profiles.
 * - social_profile_field_list shows list of links.
 *
 * @see social_profile_field_field_formatter_info()
 */
function social_profile_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'social_profile_field_icons':
      foreach ($items as $delta => $item) {
        $class = array('social-link');
        $domain = _social_profile_field_get_domain($item['url']);
        if ($domain == 'www.youtube.com' || $domain == 'youtube.com') {
          $class[] = 'fancybox-video';
        }
        $element[$delta] = array(
          '#markup' => l(
            _social_profile_field_get_icon($domain),
            check_url(trim($item['url'])),
            array('html' => TRUE, 'attributes' => array('class' => $class, 'target' => '_blank'))
          ),
          '#attached' => array(
            'css' => array(
              drupal_get_path('module', 'social_profile_field') . '/social_profile_field.css',
            )
          ),
        );
      }
      break;
    case 'social_profile_field_list':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => l($item['url'], $item['url'], array('attributes' => array('class' => array('social-link')))),
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * Three widgets are provided.
 * - A simple text-only widget where the user enters the '#ffffff'.
 * - A 3-textfield widget that gathers the red, green, and blue values
 *   separately.
 * - A farbtastic colorpicker widget that chooses the value graphically.
 *
 * These widget types will eventually show up in hook_field_widget_form,
 * where we will have to flesh them out.
 *
 * @see social_profile_field_field_widget_form()
 */
function social_profile_field_field_widget_info() {
  return array(
    'social_profile_field_default' => array(
      'label' => t('Default'),
      'field types' => array('social_profile_field_url'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 * We provide one of three different forms, depending on the widget type of
 * the Form API item provided.
 *
 * The 'social_profile_field_colorpicker' and 'social_profile_field_text' are essentially
 * the same, but social_profile_field_colorpicker adds a javascript colorpicker
 * helper.
 *
 * social_profile_field_text displays three text fields, one each for red, green,
 * and blue. However, the field type defines a single text column,
 * url, which needs an HTML color spec. Define an element validate
 * handler that converts our r, g, and b fields into a simulated single
 * 'url' form element.
 */
function social_profile_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['url']) ? $items[$delta]['url'] : '';
  $widget = $element;
  $widget['#delta'] = $delta;
  switch ($instance['widget']['type']) {
    case 'social_profile_field_default':
      $widget += array(
        '#type' => 'textfield',
        '#default_value' => $value,
        '#maxlength' => 255,
        '#attributes' => array('class' => array('edit-field-social-profile-url')),
        '#attached' => array(
          // Add javascript to show social network icon on the fly:
          'js' => array(
            drupal_get_path('module', 'social_profile_field') . '/js/jquery.urlparser/jquery.url.js',
            drupal_get_path('module', 'social_profile_field') . '/js/social_profile_field.js'
          ),
          'css' => array(
            drupal_get_path('module', 'social_profile_field') . '/social_profile_field.css',
          )
        ),
      );
      break;
  }
  $element['url'] = $widget;
  return $element;
}

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see social_profile_field_field_validate()
 * @see form_error()
 */
function social_profile_field_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'social_profile_field_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * @} End of "defgroup social_profile_field".
 */
