<?php

/**
 * @file
 * Provide Users to take ownership of the node.
 */

/**
  * Implements hook_views_api().
  */
function nodeownership_views_api() {
 return array(
   'api' => 3,
   'path' => drupal_get_path('module', 'nodeownership') . '/includes',
 );
}

/**
 * Implements hook_help().
 */
function nodeownership_help($page = 'admin/config/help#nodeownership', $arg) {
  switch ($page) {
    case 'admin/config/help#nodeownership':
      return t('<p>The nodeownership module allows you to configure a node such that it can be claimed by some user. Once the user has granted the ownership
he would have complete control over the node and can change any field he want.</p>');

    case 'admin/config/config/nodeownership':
      return t('Here you can select the datatypes for which the claim option will be available. Also you can customise the mail content which will be sent
when user claims any node or admin approves any claim.');
  }
}

/**
 * Implements hook_permission().
 */
function nodeownership_permission() {
  return array(
    'access claim page' => array(
      'title' => t('access claim page'),
      'description' => t('Allows a user to claim ownership of nodes, generating a claim request.'),
    ),
    'administer nodeownership' => array(
      'title' => t('Administer node ownership claims'),
      'description' => t('Allows a user to view, approve, and decline node ownership claims.'),
    ),
    'show claim link' => array(
      'title' => t('Show claim link'),
      'description' => t('Allows a user to see a claim link.'),
    )
  );
}

/**
 * Implements hook_menu().
 */
function nodeownership_menu() {
  $items['admin/config/nodeownership'] = array(
    'title' => 'Node Ownership',
    'description' => 'Adjust node ownership settings.',
    'position' => 'right',
    'weight' => -1,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/nodeownership/settings'] = array(
    'title' => 'Node Ownership settings',
    'page arguments' => array('nodeownership_admin_settings'),
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'description' => 'Global configuration of the node ownership',
    'file' => 'nodeownership.admin.inc',
    'file path' => drupal_get_path('module', 'nodeownership') . '/includes',
  );
  $items['node/%node/claim'] = array(
    'page callback' => 'nodeownership_get_claim',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'title' => 'Claim this node',
    'access arguments' => array('access claim page'),
    'file' => 'nodeownership.pages.inc',
    'file path' => drupal_get_path('module', 'nodeownership') . '/includes',
  );
  $items['admin/config/nodeownership/nodeclaim/%/%'] = array(
    'page callback' => '_node_claim_process',
    'page arguments' => array(4, 5),
    'title' => 'Ownership claim confirmation',
    'access arguments' => array('administer site configuration'),
    'file' => 'nodeownership.pages.inc',
    'file path' => drupal_get_path('module', 'nodeownership') . '/includes',
  );
  return $items;
}

/**
 * Implements hook_node_view().
 */
function nodeownership_node_view($node, $view_mode = 'full') {

  global $user;
  $types_to_annotate = variable_get('nodeownership_node_types', array('page'));
  if (empty($types_to_annotate[$node->type]) || !user_access('show claim link') || $user->uid == $node->uid) {
    return;
  }

  $text = variable_get('nodeownership_link_text', t('Claim'));
  $text_pending = variable_get('nodeownership_pending_text', t('Claim pending'));
  // If the user is anonymous.
  if (!$user->uid) {
    $link = l($text, 'user/register', array('query' => array('destination' => 'node/' . $node->nid . '/claim')));
  }

  // If the user is authenticated.
  else {
    // Check to see if the current user has a pending claim.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'claim')
    ->propertyCondition('uid', $user->uid)
    ->propertyCondition('nid', $node->nid)
    ->propertyCondition('status', 0);
    $num_claims = $query->count()->execute();

    // Build dummy link for pending claims.
    if ($num_claims > 0) {
      $link = '<span name="claim-pending" class="claim-pending">' . $text_pending . '</span>';
    }
    // Build claim link.
    else {
      $link = l($text, 'node/' . $node->nid . '/claim');
    }
  }

  // Display link.
  $node->content['links']['nodeownership'] = array(
    // @todo make link output themable.
    //'#theme' => 'links__node__flag',
    '#links' => array(
      'claim-node' => array(
        'title' => $link,
        'html' => TRUE,
      ),
    ),
    '#attributes' => array('class' => array('links', 'inline')),
    '#weight' => 10,
  );
}

/**
 * Implements hook_entity_insert().
 */
function nodeownership_claim_insert() {
  global $user;
  global $language;

  // Code For sending mail to Admin
  $recipient['mail'] = db_query("SELECT mail FROM {users} WHERE uid = 1")->fetchField();
  $recipient['uid']  = 1;
  $recipient['name'] = db_query("SELECT name FROM {users} WHERE uid = 1")->fetchField();
  $mail              = drupal_mail('nodeownership', 'user_claim', $recipient['mail'], $language);
  drupal_set_message(t('Your claim has been recorded and an email has been sent to the site administrators.'));
}

/**
 * Implements of hook_mail().
 */
function nodeownership_mail($key, &$message, $params) {
  module_load_include('inc', 'nodeownership', 'includes/nodeownership');

  $language = $message['language'];
  $variables = nodeownership_mail_tokens($language);

  $message['subject'] .= _nodeownership_mail_text($key . '_subject', $language, $variables);
  $message['body'][] = _nodeownership_mail_text($key . '_body', $language, $variables);
}

/**
* Implements hook_entity_info().
*/
function nodeownership_entity_info() {
  return array(
    'claim' => array(
      'label' => t('Claim'),
      'entity class' => 'ClaimEntityClass',
      'controller class' => 'EntityAPIController',
      'base table' => 'nodeownership',
      'entity keys' => array(
        'id' => 'id',
      ),
      // Make use the class' label() and uri() implementation by default.
      'label callback' => 'entity_class_label',
      //'uri callback' => 'entity_class_uri',
    ),
  );
}

/**
 * Implements hook_action_info().
 */
function nodeownership_action_info() {
  return array(
    'nodeownership_approve_claim_action' => array(
      'type' => 'claim',
      'label' => t('Approve claim'),
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
    'nodeownership_decline_claim_action' => array(
      'type' => 'claim',
      'label' => t('Decline claim'),
      'configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Action function for nodeownership_decline_claim_action.
 *
 * @param $entity
 *   Entity object.
 * @param $context
 *   Array with parameters for this action: depends on the trigger.
 */
function nodeownership_decline_claim_action(&$entity, $context = array()) {
  // @todo return error message on failure.
  module_load_include('inc', 'nodeownership', 'includes/nodeownership');
  $success = nodeownership_claim_decline($entity);
}

/**
 * Action nodeownership_approve_claim_action.
 *
 * @param $entity
 *   Entity object.
 * @param $context
 *   Array with parameters for this action: depends on the trigger.
 */
function nodeownership_approve_claim_action(&$entity, $context = array()) {
  // @todo return error message on failure.
  module_load_include('inc', 'nodeownership', 'includes/nodeownership');
  $success = nodeownership_claim_approve($entity);
}
