<?php

/**
 * @file
 * Main file for the Commerce Pay with a Tweet module.
 *
 * The Commerce Pay with a Tweet module extends pay_with_a_tweet module.
 * Commerce payment integration.
 *
 * @defgroup commerce_pay_with_a_tweet Commerce Pay with a Tweet
 * @ingroup commerce_pay_with_a_tweet
 */

define('COMMERCE_PAY_WITH_A_TWEET_PAYMENT', 'commerce_payment_pay_with_a_tweet');
define('COMMERCE_PAY_WITH_A_TWEET_ADMIN_PERM', 'administer commerce_pay_with_a_tweet');

/**
 * Implements hook_permission().
 */
function commerce_pay_with_a_tweet_permission() {
  return array(
    COMMERCE_PAY_WITH_A_TWEET_ADMIN_PERM => array(
      'title' => t('Administer Commerce Pay With a Tweet'),
      'restrict access' => TRUE,
    ),
    'view commerce_pay_with_a_tweet' => array(
      'title' => t('View Commerce Pay With a Tweet'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_pay_with_a_tweet_menu() {
  // Config page for commerce_pay_with_a_tweet.
  $items['admin/commerce/config/commerce_pay_with_a_tweet_config'] = array(
    'title' => 'Commerce pay with a tweet',
    'description' => 'Manage Commerce pay with a tweet options.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pay_with_a_tweet_config_form'),
    'access arguments' => array(COMMERCE_PAY_WITH_A_TWEET_ADMIN_PERM),
    'file' => 'commerce_pay_with_a_tweet.admin.inc',
  );

  // Allow multiple callbacks.
  $items['pay_with_a_tweet/%pay_with_a_tweet/%commerce_pay_with_a_tweet_callback_name'] = array(
    'title' => 'Twitter callback 2',
    'type' => MENU_CALLBACK,
    'page callback' => 'commerce_pay_with_a_tweet_twitter_callback',
    'page arguments' => array(1, 2),
    'access arguments' => array('view commerce_pay_with_a_tweet'),
    'file' => 'commerce_pay_with_a_tweet.page.inc',
  );

  return $items;
}

/**
 * Return an allowed callback_name.
 *
 * See hook_menu().
 *
 * @param string $callback_name
 *   Callback name.
 *
 * @return bool|null
 *   Return an allowed callback_name or FALSE.
 */
function commerce_pay_with_a_tweet_callback_name_load($callback_name = NULL) {
  $result = FALSE;

  $allowed_callback_name = array(
    // Pay with a tweet (all order is paid).
    COMMERCE_PAY_WITH_A_TWEET_PAYMENT,
    // @Todo, add callback to generate commerce coupon.
  );

  if (in_array($callback_name, $allowed_callback_name)) {
    $result = $callback_name;
  }

  return $result;
}

/**
 * Implements hook_entity_info_alter().
 */
function commerce_pay_with_a_tweet_entity_info_alter(&$entity_info) {
  // Alter pay_with_a_tweet entity to add a label
  // (title in table pay_with_a_tweet).
  $entity_info['pay_with_a_tweet']['label callback'] = 'commerce_pay_with_a_tweet_entity_info_label';
}

/**
 * Return Title of a specific pay_with_a_tweet instance.
 *
 * @param object $entity
 *   pay_with_a_tweet object.
 * @param string $entity_type
 *   Entity type.
 *
 * @return string
 *   Return $entity->title.
 */
function commerce_pay_with_a_tweet_entity_info_label($entity, $entity_type) {
  return empty($entity->title) ? 'Untitled entity' : $entity->title;
}

/**
 * Implements hook_menu_alter().
 *
 * Overwrite default connect and default callback function
 * to add commerce interaction.
 */
function commerce_pay_with_a_tweet_menu_alter(&$items) {
  // @Todo use hook when they are available.
  $items['pay_with_a_tweet/%pay_with_a_tweet']['page callback'] = 'commerce_pay_with_a_tweet_twitter_connect';
  $items['pay_with_a_tweet/%pay_with_a_tweet']['file'] = 'commerce_pay_with_a_tweet.page.inc';
  $items['pay_with_a_tweet/%pay_with_a_tweet']['file path'] = drupal_get_path('module', 'commerce_pay_with_a_tweet');

  $items['pay_with_a_tweet/%pay_with_a_tweet/callback']['page callback'] = 'commerce_pay_with_a_tweet_twitter_callback';
  $items['pay_with_a_tweet/%pay_with_a_tweet/callback']['file'] = 'commerce_pay_with_a_tweet.page.inc';
  $items['pay_with_a_tweet/%pay_with_a_tweet/callback']['file path'] = drupal_get_path('module', 'commerce_pay_with_a_tweet');

  // If the install profile is commerce_kickstart move item.
  // Commerce kickstart changes the menu items structure and Title is too long.
  $current_install_profile = drupal_get_profile();
  if ((!empty($current_install_profile)) && ($current_install_profile == "commerce_kickstart") && (!empty($items['admin/commerce/config/advanced-settings']))) {
    // Short title.
    $items['admin/commerce/config/commerce_pay_with_a_tweet_config']['title'] = 'Commerce PWAT';
    // Add a parent item.
    $items['admin/commerce/config/commerce_pay_with_a_tweet_config']['parent'] = 'admin/commerce/config/advanced-settings';
  }
}

/**
 * Implements hook_theme().
 */
function commerce_pay_with_a_tweet_theme($existing, $type, $theme, $path) {
  return array(
    'commerce_pay_with_a_tweet_payment' => array(
      'path' => $path . '/theme',
      'template' => 'commerce-pay-with-a-tweet-payment',
      'variables' => array(
        'title' => t('This tweet will be posted to pay your order:'),
        'tweet' => NULL,
        'img' => NULL,
      ),
    ),
  );
}

/**
 * Helper function to get options list.
 *
 * List of pay_with_a_tweet already created.
 *
 * @return array
 *   Return pay_with_tweet options for select list field.
 */
function _commerce_pay_with_a_tweet_get_options_list() {
  $commerce_pay_with_a_tweet_option_list = array(0 => t('None'));

  $result = db_query('SELECT ctp.pid, ctp.title FROM {pay_with_a_tweet} ctp');
  foreach ($result as $record) {
    $commerce_pay_with_a_tweet_option_list[$record->pid] = $record->title;
  }

  return $commerce_pay_with_a_tweet_option_list;
}

/**
 * Ensures fields and field instances exist.
 */
function commerce_pay_with_a_tweet_add_fields() {
  $fields = field_info_fields();
  $field_types = field_info_field_types();

  // Clear the field cache if the entityreference type field is not found.
  if (!$field_types['entityreference']) {
    field_cache_clear();
  }

  if (empty($fields['cpwat_tweet_reference'])) {
    // Create a commerce_order_reference field in order to do a relationship
    // between a return and its order.
    $field = array(
      'active' => 1,
      'cardinality' => 1,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'cpwat_tweet_reference',
      'foreign keys' => array(
        'node' => array(
          'columns' => array(
            'target_id' => 'nid',
          ),
          'table' => 'node',
        ),
        'commerce_product' => array(
          'columns' => array(
            'target_id' => 'product_id',
          ),
          'table' => 'commerce_product',
        ),
      ),
      'indexes' => array(
        'target_id' => array(
          0 => 'target_id',
        ),
      ),
      'locked' => 0,
      'module' => 'entityreference',
      'settings' => array(
        'handler' => 'base',
        'handler_settings' => array(
          'behaviors' => array(
            'views-select-list' => array(
              'status' => 0,
            ),
          ),
          'sort' => array(
            'type' => 'none',
          ),
          'target_bundles' => array(),
        ),
        'target_type' => 'pay_with_a_tweet',
      ),
      'translatable' => 0,
      'type' => 'entityreference',
    );
    field_create_field($field);
  }

  commerce_pay_with_a_tweet_field_instance('commerce_product');

  $bundles = commerce_pay_with_a_tweet_get_bundles_with_product_reference_field('node');
  if (!empty($bundles)) {
    commerce_pay_with_a_tweet_field_instance('node', $bundles);
  }
}

/**
 * Create field instance.
 *
 * @param string $entity_type
 *   Entity type.
 * @param array $bundles_restrictive_list
 *   Array of bundles (restrictive list).
 */
function commerce_pay_with_a_tweet_field_instance($entity_type, $bundles_restrictive_list = array()) {
  $instances = field_info_instances();

  $bundles = entity_get_info($entity_type);
  $bundles = $bundles['bundles'];

  if (!empty($bundles)) {
    // Add the cpwat_tweet_reference field to all these bundles.
    foreach ($bundles as $bundle => $values) {
      if ((empty($bundles_restrictive_list) || _commerce_pay_with_a_tweet_bundle_name_is_in_restrictive_list($entity_type, $bundle, $bundles_restrictive_list))
        && empty($instances[$entity_type][$bundle]['cpwat_tweet_reference'])
      ) {
        $instance = array(
          'bundle' => $bundle,
          'entity_type' => $entity_type,
          'field_name' => 'cpwat_tweet_reference',
          'label' => 'Tweet reference',
          'required' => 0,
          'settings' => array(
            'user_register_form' => FALSE,
          ),
          'widget' => array(
            'active' => 1,
            'module' => 'entityreference',
            'settings' => array(
              'match_operator' => 'CONTAINS',
              'path' => '',
              'size' => 60,
            ),
            'type' => 'options_select',
            'weight' => 36,
          ),
        );
        field_create_instance($instance);
      }
    }
  }
}

/**
 * Return TRUE if $bundle_name exist in $bundles_restrictive_list.
 *
 * @param string $entity_type
 *   Entity type.
 * @param string $bundle_name
 *   Bundle name.
 * @param array $bundles_restrictive_list
 *   List with bundles (Each bundle have product reference field).
 *
 * @return bool
 *   Return TRUE if $bundle_name exist in $bundles_restrictive_list else FALSE.
 */
function _commerce_pay_with_a_tweet_bundle_name_is_in_restrictive_list($entity_type, $bundle_name, $bundles_restrictive_list) {
  $result = FALSE;

  if (!empty($bundles_restrictive_list[$entity_type])) {
    // For each field.
    foreach ($bundles_restrictive_list[$entity_type] as $bundles_list) {
      if (in_array($bundle_name, $bundles_list)) {
        $result = TRUE;
      }
    }
  }

  return $result;
}

/**
 * Return an array with bundles_name of a specific entity_type.
 *
 * @param string $entity_name
 *   Entity type.
 *
 * @return array
 *   Array with bundles_name.
 */
function commerce_pay_with_a_tweet_get_bundles_with_product_reference_field($entity_name) {
  $fields = field_info_fields();
  $result = array();

  foreach ($fields as $field_name => $field) {
    if ($field['type'] == 'commerce_product_reference') {
      if (!empty($field['bundles'][$entity_name])) {
        $bundles = $field['bundles'][$entity_name];
        if ((!empty($bundles)) && (empty($result[$entity_name][$field_name]))) {
          $result[$entity_name][$field_name] = $bundles;
        }
      }
    }
  }

  return $result;
}

/**
 * Return first entity object of a specific product.
 *
 * Get product display (node) from product_id.
 *
 * @param string $entity_name
 *   Entity name.
 * @param int $product_id
 *   Product id.
 *
 * @return object
 *   Entity object or FALSE.
 */
function commerce_pay_with_a_tweet_get_first_entity_from_product_id($entity_name, $product_id) {
  $res = FALSE;
  $bundles = commerce_pay_with_a_tweet_get_bundles_with_product_reference_field($entity_name);

  if (!empty($bundles[$entity_name])) {
    foreach ($bundles[$entity_name] as $field => $type) {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', $entity_name, '=')
        ->propertyCondition('type', $type)
        ->fieldCondition($field, 'product_id', $product_id, '=')
        ->range(0, 1);

      if ($result = $query->execute()) {
        $entity_id = array_shift(array_keys($result[$entity_name]));
        $res = entity_load($entity_name, array($entity_id));

        break;
      }
    }
  }

  return $res;
}

/**
 * Return pay_with_a_tweet_id.
 *
 * Priority: Product > Product display > Default tweet.
 *
 * @param object $order
 *   Order object.
 *
 * @return bool|null
 *   Return pay_with_a_tweet_id or FALSE.
 */
function commerce_pay_with_a_tweet_get_tweet_id($order) {
  $result = FALSE;
  $commerce_pay_with_a_tweet_default_tweet = variable_get('commerce_pay_with_a_tweet_default_tweet', FALSE);
  if (empty($commerce_pay_with_a_tweet_default_tweet)) {
    commerce_pay_with_a_tweet_administrator_set_message('Please check your config, no default tweet selected', array(), WATCHDOG_ERROR);
  }
  else {
    $tweet_id = 0;
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    // For each line item.
    foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
      $line_item = $line_item_wrapper->value();
      $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

      if (empty($line_item_wrapper->commerce_product)) {
        // Skip commerce line item without commerce_product.
        continue;
      }

      // Line item with product.
      $product = $line_item_wrapper->commerce_product->value();
      $product_id = $product->product_id;
      if (!empty($product->cpwat_tweet_reference[LANGUAGE_NONE][0]['target_id'])) {
        $tweet_id = $product->cpwat_tweet_reference[LANGUAGE_NONE][0]['target_id'];
        break;
      }

      // Product display.
      $product_display = commerce_pay_with_a_tweet_get_first_entity_from_product_id('node', $product_id);
      if (!empty($product_display)) {
        foreach ($product_display as $prod_dis) {
          if (!empty($prod_dis->cpwat_tweet_reference[LANGUAGE_NONE][0]['target_id'])) {
            $tweet_id = $prod_dis->cpwat_tweet_reference[LANGUAGE_NONE][0]['target_id'];
          }
        }
      }
    }

    // Priority: Product > Product display > Default tweet.
    if (!empty($tweet_id)) {
      $result = $tweet_id;
    }
    else {
      $result = $commerce_pay_with_a_tweet_default_tweet;
    }
  }

  return $result;
}

/**
 * Return the last order of a specific user.
 *
 * @param object $user_object
 *   user object.
 *
 * @return bool|object
 *   Return last order object or FALSE.
 */
function commerce_pay_with_a_tweet_get_last_order_for_user($user_object = NULL) {
  // @Todo: try to remove this function and use $order from user cart.
  // Current user.
  if (empty($user_object)) {
    global $user;
    $user_object = $user;
  }
  $result = FALSE;
  $last_order = db_select('commerce_order', 'co')
    ->fields('co', array('order_id', 'uid', 'changed'))
    ->condition('uid', $user_object->uid, '=')
    ->orderBy('changed', 'DESC')
    ->range(0, 1)
    ->execute()
    ->fetchAssoc();

  if (!empty($last_order['order_id'])) {
    $result = commerce_order_load($last_order['order_id']);
  }

  return $result;
}

/**
 * Alter $default_message to replace tokens.
 *
 * @param object $last_order
 *   Commerce order object.
 * @param string $default_message
 *   Message with tokens.
 *
 * @return string
 *   Message.
 */
function commerce_pay_with_a_tweet_get_message_with_first_product_token_replace($last_order, $default_message) {
  $message = $default_message;
  $order_wrapper = entity_metadata_wrapper('commerce_order', $last_order);
  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    $line_item = $line_item_wrapper->value();
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

    // Product.
    $first_product = $line_item_wrapper->commerce_product->value();
    $message = token_replace($message, array('commerce-product' => $first_product));

    break;
  }

  return $message;
}

/**
 * Implements hook_form_alter().
 */
function commerce_pay_with_a_tweet_form_pay_with_a_tweet_form_alter(&$form, &$form_state) {
  // Alter description of message field.
  $form['pay_with_a_tweet']['message']['#description'] = t('A tweet is a short message. Available tokens: see commerce_product_tokens() and "site" (https://drupal.org/node/390482#drupal7tokenslist)');
}

/**
 * Helper to display and log message.
 *
 * @param string $message
 *   Message to display and log.
 * @param array $variables
 *   Array with placeholders.
 * @param int $severity
 *   Severity of this message.
 * @param string $module_name
 *   Name of the module to associate to this message.
 */
function commerce_pay_with_a_tweet_administrator_set_message($message, $variables = array(), $severity = WATCHDOG_INFO, $module_name = 'commerce_pay_with_a_tweet') {
  if (user_access(COMMERCE_PAY_WITH_A_TWEET_ADMIN_PERM)) {
    if ($severity != WATCHDOG_INFO) {
      $type_of_message = 'error';
    }
    else {
      $type_of_message = 'status';
    }
    // Display a message to user who has admin permission.
    drupal_set_message(check_plain($message), $type_of_message);
  }

  // Log message.
  watchdog($module_name, $message, $variables, $severity);
}

/**
 * Implements hook_commerce_product_type_insert().
 */
function commerce_pay_with_a_tweet_commerce_product_type_insert($product_type, $skip_reset) {
  // Update fields.
  commerce_pay_with_a_tweet_add_fields();
}

/**
 * Implements hook_commerce_node_type_insert().
 */
function commerce_pay_with_a_tweet_node_type_insert($info) {
  // Update fields.
  commerce_pay_with_a_tweet_add_fields();
}
