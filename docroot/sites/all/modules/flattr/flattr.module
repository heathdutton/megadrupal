<?php
/**
 * @file
 * Flattr module
 */

/*
 * Implements hook_field_info().
 */
function flattr_field_info() {
  return array(
    'flattr_button' => array(
      'label' => 'Flattr',
      'description' => 'This field is used to display a Flattr button together with your content',
      'default_widget' => 'flattr_button',
      'default_formatter' => 'flattr_button',
    ),
  );
}

/*
 * Implements hook_field_is_empty().
 */
function flattr_field_is_empty($item, $field) {
  return ! (isset($item['active']) || isset($item['category']));
}

/*
 * Implements hook_field_validate().
 */
function flattr_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  // @todo Do better error checking here?
  foreach ($items as $delta => $item) {
    if (!empty($item['active'])) {
      if (! ($item['active'] == 0 || $item['active'] == 1)) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'flattr_invalid',
          'message' => t('Flattr active set to a value different from 0 or 1: @value', array('@value' => $item['active'])),
        );
      }
    }
  }
}

/*
 * Implements hook_field_widget_info().
 */
function flattr_field_widget_info() {
  return array(
    'flattr_checkbox' => array(
      'label' =>  t('Flattr checkbox'),
      'field types' => array('flattr_button'),
    )
  );
}

/*
 * Implements hook_field_widget_info().
 */
function flattr_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $active_value = isset($items[$delta]['active']) ? $items[$delta]['active'] : TRUE;
  $category_value = isset($items[$delta]['category']) ? $items[$delta]['category'] : 0;

  $options = _flattr_list_categories();
  // @todo: Should be some kind of message/help be here to link to the formatter settings for the description?
  $element['active'] = array(
    '#type' => 'checkbox',
    '#default_value' => $active_value,
    '#title' => t('Provide a Flattr button?'),
  );
  $element['category'] = array(
    '#type' => 'select',
    '#default_value' => $category_value,
    '#options' => $options,
    '#title' => t('Which Flattr category does this belong to?'),
  );

  return $element;
}

/*
 * Implements hook_field_formatter_info().
 */
function flattr_field_formatter_info() {
  return array(
    'flattr_button' => array(
      'label' => t('Flattr button'),
      'field types' => array('flattr_button'),
      'settings' => array('flattr_description_field' => 0, 'flattr_tags_field' => 0, 'flattr_username_field' => 0, 'flattr_compact_button' => 0),
    ),
  );
}

/*
 * Implements hook_field_formatter_settings_summary().
 */
function flattr_field_formatter_settings_summary($field, $instance, $view_mode) {
  $current_bundles_fields = _flattr_list_fields($instance['bundle']);
  $user_fields = _flattr_list_fields('user');

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $buttontext = t('Button size is') . ' ';
  if ($settings['flattr_compact_button'] == 0) {
    $buttontext .= t('compact.');
  }
  else {
    $buttontext .= t('normal.');
  }

  return t('The description field is currently @description, the tag field is @tag and the username field is @username. ' . $buttontext,
    array(
      '@description' =>  $current_bundles_fields[$settings['flattr_description_field']],
      '@tag' =>  $current_bundles_fields[$settings['flattr_tags_field']],
      '@username' =>  $user_fields[$settings['flattr_username_field']],
    )
  );
}

/*
 * Implements hook_field_formatter_settings_form().
 */
function flattr_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($instance['entity_type'] == 'ctools') {
    $bundle_fields = _flattr_list_fields(NULL);
  }
  else {
    $bundle_fields = _flattr_list_fields($instance['bundle']);
  }
  $user_fields = _flattr_list_fields('user');

  $element = array(
    'flattr_description_field' => array(
      '#type' => 'select',
      '#title' => t('Field to use for description'),
      '#default_value' => $settings['flattr_description_field'],
      '#options' => $bundle_fields,
      '#description' => t('This is the field that will be used to display the Flattr button\'s description'),
    ),
    'flattr_tags_field' => array(
      '#type' => 'select',
      '#title' => t('Field to use for tags'),
      '#default_value' => $settings['flattr_tags_field'],
      '#options' => $bundle_fields,
      '#description' => t('The tags of this field will passed on to Flattr, so your things can be filtered on at their site.'),
    ),
    'flattr_username_field' => array(
      '#type' => 'select',
      '#title' => t('Field to use for Flattr username'),
      '#default_value' => $settings['flattr_username_field'],
      '#options' => $user_fields,
      '#description' => t('The field where the users Flattr username can be found. This will be used to set the Flattr buttons owner'),
    ),
    'flattr_compact_button' => array(
      '#type' => 'select',
      '#title' => t('Select the compact or normal button size'),
      '#default_value' => $settings['flattr_compact_button'],
      '#options' => array('Compact', 'Normal'),
      '#description' => t('The Flattr button comes in two sizes, the "normal", and the "compact". This is setting controls which button will be displayed'),
    ),
  );

  return $element;
}

/*
 * Implements hook_field_formatter_view().
 */
function flattr_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if (! isset($items[0]) || $items[0]['active'] == 0) {
    return '';
  }

  $description = '';
  $tags = '';
  $username = '';
  $buttonsize = '';
  $categories = _flattr_list_categories();
  $category = $categories[$items[0]['category']];

  $fields = _flattr_list_fields($instance['bundle']);
  $description_field = $fields[$display['settings']['flattr_description_field']];
  if ($description_field != '<None>') {
    $description = field_get_items($entity_type, $entity, $description_field);
    $description = trim(strip_tags($description[0]['safe_value']));
  }

  $tags_field = $fields[$display['settings']['flattr_tags_field']];
  if ($tags_field != '<None>') {
    $terms = field_get_items($entity_type, $entity, $tags_field);

    if (count($terms) > 0) {
      $tags = ';tags:';
      foreach ($terms as $term) {
        $tags .= $term['taxonomy_term']->name . ',';
      }
      $tags = rtrim($tags, ',');
    }
  }

  $fields = _flattr_list_fields('user');
  $user = user_load($entity->uid);
  $user_field = $fields[$display['settings']['flattr_username_field']];
  if ($user_field != '<None>') {
    $username = field_get_items('user', $user, $user_field);
    $username = strip_tags($username[0]['safe_value']);
  }
  else {
    $username = $user->name;
  }

  if ($display['settings']['flattr_compact_button'] == 0) {
    $buttonsize = ';button:compact';
  }

  $title = '';
  $entity_info = entity_get_info($entity_type);
  $title = $entity->{$entity_info['entity keys']['label']};

  $uri = entity_uri($entity_type, $entity);
  $uri['options']['absolute'] = TRUE;
  $url = $uri['path'];
  $options = $uri['options'];

  // Initialize needed attributes
  $options['html'] = TRUE;

  $attributes = array();
  $attributes['title'] = $title;
  $attributes['lang'] = _flattr_language($entity->language);
  $attributes['rel'] = 'flattr;uid:' . $username . ';category:' . $category . $tags . $buttonsize;
  $attributes['class'][] = 'FlattrButton';
  $options['attributes'] = $attributes;

  // Render the link which is used by flattr js.
  $output = l($description, $url, $options);

  // Having more than one flattr button on an entity wouldn't make sense, so we only touch delta 0
  // @todo Does this need to be documented better?
  $element = array(
    0 => array(
      '#markup' => $output,
    ),
  );

  $flattr_js_attached = &drupal_static(__FUNCTION__, FALSE);
  if (!$flattr_js_attached) {
    $scheme = (empty($_SERVER['HTTPS']) ? 'http' : 'https') . '://';
    $element[0]['#attached'] = array(
      'js' => array(
        $scheme . 'api.flattr.com/js/0.6/load.js?mode=auto' => array(
          'type' => 'external',
        ),
      ),
      'css' => array(drupal_get_path('module', 'flattr') . '/flattr.css'),
    );
    $flattr_js_attached = TRUE;
  }

  return $element;
}

function _flattr_list_fields($current_bundle) {
  $all_fields = field_info_fields();

  $fields = array();
  $fields['<None>'] = '<None>';

  foreach ($all_fields as $key => $value) {
    if ($value['type'] != 'flattr_button') {
      $fields[$key] = $key;
    }
  }
  return $fields;
}

function _flattr_list_categories() {
  return array('text', 'images', 'video', 'audio', 'software', 'people', 'rest');
}

/**
 * Given a Drupal language code, return a corresponding flattr code.
 */
function _flattr_language($entity_language) {
  static $conversion_table = NULL;

  // Flattr uses a combination of language code and country code while Drupal only uses language code
  // This is a translation between ours and theirs - while not always 100% correct, it's good enough.
  if (!isset($conversion_table)) {
    $conversion_table = array(
      'ar' => 'ar_DZ',
      'be' => 'be_BY',
      'bg' => 'bg_BG',
      'ca' => 'ca_ES',
      'cs' => 'cs_CZ',
      'da' => 'da_DK',
      'de' => 'de_DE',
      'el' => 'el_GR',
      'en' => 'en_GB',
      'es' => 'es_ES',
      'et' => 'et_EE',
      'fi' => 'fi_FI',
      'fr' => 'fr_FR',
      'ga' => 'ga_IE',
      'hi' => 'hi_IN',
      'hr' => 'hr_HR',
      'hu' => 'hu_HU',
      'in' => 'in_ID',
      'is' => 'is_IS',
      'it' => 'it_IT',
      'iw' => 'iw_IL',
      'ja' => 'ja_JP',
      'ko' => 'ko_KR',
      'lt' => 'lt_LT',
      'lv' => 'lv_LV',
      'mk' => 'mk_MK',
      'ms' => 'ms_MY',
      'mt' => 'mt_MT',
      'nl' => 'nl_NL',
      'no' => 'no_NO',
      'pl' => 'pl_PL',
      'pt' => 'pt_PT',
      'ro' => 'ro_RO',
      'ru' => 'ru_RU',
      'sk' => 'sk_SK',
      'sl' => 'sl_SI',
      'sq' => 'sq_AL',
      'sr' => 'sr_RS',
      'sv' => 'sv_SE',
      'th' => 'th_TH',
      'tr' => 'tr_TR',
      'uk' => 'uk_UA',
      'vi' => 'vi_VN',
      'zh' => 'zh_CN',
    );
  }

  if ($entity_language == LANGUAGE_NONE) {
    $language = language_default();
    $entity_language = $language->language;
  }

  return $conversion_table[$entity_language];
}
