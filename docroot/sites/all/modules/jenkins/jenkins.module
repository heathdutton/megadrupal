<?php
/**
 * @file
 * Provides integration with Jenkins for jobs management.
 */

/**
 * Implements hook_menu().
 */
function jenkins_menu() {
  $items = array();

  $items['admin/config/services/jenkins'] = array(
    'title' => 'Jenkins',
    'description' => 'Configuration for Jenkins API module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jenkins_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'jenkins.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function jenkins_permission() {
  $perms = array();

  $perms['administer jenkins requests'] = array(
    'title' => t('Administer Jenkins requests'),
  );

  $perms['administer jenkins config'] = array(
    'title' => t('Administer Jenkins configuration'),
  );

  return $perms;
}

/**
 * Get a single build.
 *
 * @param string $name
 *   Job name.
 * @param int $number
 *    build number
 */
function jenkins_build_get($name, $number, &$response = NULL) {
  if (!jenkins_is_job_name_valid($name)) {
    return FALSE;
  }

  $name = rawurlencode($name);
  $number = (int) $number;

  return jenkins_request("/job/{$name}/{$number}/api/json", $response);
}

/**
 * Trigger a build for a jenkins job.
 *
 * @param string $job
 *   Job name.
 */
function jenkins_job_build($job, $params = NULL, &$response = NULL) {
  if (!jenkins_is_job_name_valid($job)) {
    return FALSE;
  }

  $job = rawurlencode($job);

  $data = array();
  if (is_array($params) && count($params)) {
    $data = array('parameter' => array());
    foreach ($params as $name => $value) {
      $data['parameter'][] = array('name' => urlencode($name), 'value' => urlencode($value));
    }
  }

  $json = 'json=' . json_encode($data);
  $headers = array('Content-Type' => 'application/x-www-form-urlencoded');

  return jenkins_request("/job/{$job}/build", $response, array(), 'POST', $json, $headers);
}

/**
 * Copy/clone a job.
 *
 * @param $name
 *   Job name.
 * @param $existing
 *   Job name of the job to copy.
 */
function jenkins_job_copy($name, $existing, &$response = NULL) {
  if (!jenkins_is_job_name_valid($name) || !jenkins_is_job_name_valid($existing)) {
    return FALSE;
  }

  $query = array(
    'name' => $name,
    'mode' => 'copy',
    'from' => $existing,
  );

  $headers = array(
    'Accept' => 'application/json',
    'Content-Type' => 'application/json',
  );

  return jenkins_request('/createItem', $response, $query, 'POST', NULL, $headers);
}

/**
 * Create a job.
 *
 * @param $name
 *   Job name.
 * @param $xml
 *   XML string with job properties (config.xml).
 */
function jenkins_job_create($name, $xml, &$response = NULL) {
  if (!jenkins_is_job_name_valid($name)) {
    return FALSE;
  }

  $name = rawurlencode($name);

  $query = array(
    'name' => $name,
  );

  $headers = array(
    'Content-Type' => 'text/xml',
  );

  return jenkins_request('/createItem', $response, $query, 'POST', $xml, $headers);
}

/**
 * Deletes a job.
 *
 * @param $name
 *   Job name.
 */
function jenkins_job_delete($name, &$response = NULL) {
  if (!jenkins_is_job_name_valid($name)) {
    return FALSE;
  }

  $name = rawurlencode($name);

  return jenkins_request("/job/{$name}/doDelete", $response, array(), 'POST');
}

/**
 * Disables a job.
 *
 * @param $name
 *   Job name.
 */
function jenkins_job_disable($name, &$response = NULL) {
  if (!jenkins_is_job_name_valid($name)) {
    return FALSE;
  }

  $name = rawurlencode($name);

  return jenkins_request("/job/{$name}/disable", $response, array(), 'POST');
}

/**
 * Enables a job.
 *
 * @param $name
 *   Job name.
 */
function jenkins_job_enable($name, &$response = NULL) {
  if (!jenkins_is_job_name_valid($name)) {
    return FALSE;
  }

  $name = rawurlencode($name);

  return jenkins_request("/job/{$name}/enable", $response, array(), 'POST');
}

/**
 * Get a single job.
 *
 * @param $name
 *   Job name.
 */
function jenkins_job_get($name, &$response = NULL) {
  if (!jenkins_is_job_name_valid($name)) {
    return FALSE;
  }

  $name = rawurlencode($name);

  if (jenkins_request("/job/{$name}/api/json", $response)) {
    return json_decode($response->data);
  }

  return FALSE;
}

/**
 * Update an existing job.
 *
 * @param $name
 *   Job name.
 * @param $xml
 *   XML string with job properties (config.xml).
 */
function jenkins_job_update($name, $xml, &$response = NULL) {
  if (!jenkins_is_job_name_valid($name)) {
    return FALSE;
  }

  $name = rawurlencode($name);

  $headers = array(
    'Content-Type' => 'text/xml',
  );

  return jenkins_request("/job/{$name}/config.xml", $response, array(), 'POST', $xml, $headers);
}

/**
 * Get a list of jobs.
 *
 * @param $depth
 *   Integer that tells how much data to get from Jenkins.
 * @param $tree
 *   Array describing what data to return. It should be on the form.
 */
function jenkins_jobs_get($depth = 0, $tree = NULL, &$response = NULL) {
  // @todo: honor $tree argument.
  $query = array(
    'depth' => $depth,
  );

  $name = rawurlencode($name);

  if (jenkins_request('/api/json', $response, $query)) {
    return json_decode($response->data);
  }

  return FALSE;
}

/**
 * Validates a jenkins job name.
 *
 * Based on Hudson.java.checkGoodName() and java's native Character.isISOControl().
 *
 * @param String $name
 *   The name of the job to validate.
 *
 * @return bool
 *   Is the name valid?
 */
function jenkins_is_job_name_valid($name) {
  if (preg_match('~(\\?\\*/\\\\%!@#\\$\\^&\|<>\\[\\]:;)+~', $name)) {
    return FALSE;
  }

  // Define range of non printable characters.
  $non_print_high = 31;

  // Value PHP assigns if invalid or extended ascii character (? == 63).
  $ascii_garbage = 63;

  $len = drupal_strlen($name);
  for ($i = 0; $len > $i; ++$i) {
    // Unicode char to ord logic lifted from http://stackoverflow.com/questions/1365583/how-to-get-the-character-from-unicode-value-in-php
    $char = drupal_substr($name, $i, 1);
    $unpacked = unpack('N', mb_convert_encoding($char, 'UCS-4BE', 'UTF-8'));
    $ord = $unpacked[1];

    if ($ord <= $non_print_high || $ord == $ascii_garbage) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Perform a request to Jenkins server and return the response.
 *
 * @param string $path
 *   API path with leading slash, for example '/api/json'.
 * @param object $response
 *   HTTP request response object - see drupal_http_request()
 * @param $query
 *   Data to be sent as query string.
 * @param string $method
 *   HTTP method, either 'GET' (default) or 'POST'.
 * @param array $data
 *   Post data.
 * @param array $headers
 *   HTTP headers.
 *
 * @return bool
 *    TRUE if the request was successful.
 */
function jenkins_request($path, &$response = NULL, $query = array(), $method = 'GET', $data = NULL, $headers = array()) {
  $url = variable_get('jenkins_base_url', 'http://localhost:8080') . $path;
  $options = array(
    'method' => $method,
  );

  // Force request to start immediately.
  if (!isset($query['delay'])) {
    $query['delay'] = '0sec';
  }

  $url .= '?' . drupal_http_build_query($query);

  if ($method == 'POST' && !empty($data)) {
    $options['data'] = $data;
  }

  // Default to JSON unless otherwise specified.
  $default_headers = array(
    'Accept' => 'application/json',
    'Content-Type' => 'application/json',
  );
  $headers += $default_headers;

  if (!empty($headers)) {
    $options['headers'] = $headers;
  }

  // Do HTTP request and get response object.
  $response = drupal_http_request($url, $options);

  // Response code should be something between 200 and 202.
  return in_array($response->code, range(200, 202));
}

/**
 * Parse job configuration arguments string into an array.
 *
 * @params string $args
 *   The configuration arguments to parse.
 *
 * @return array
 *   The arguments as an array.
 */
function jenkins_parse_args($args) {
  $values = array();

  $list = explode("\n", $args);
  $list = array_map('trim', $list);
  foreach ($list as $line) {
    $parts = explode('=', $line, 2);
    $values[$parts[0]] = $parts[1];
  }

  return $values;
}

// DEPRECATED FUNCTIONS

/**
 * Backwards compatible wrapper for jenkins_jobs_get() function.
 *
 * @see jenkins_jobs_get()
 * @deprecated
 */
function jenkins_get_jobs($depth = 0, $tree = NULL) {
  trigger_error(t('Call to deprecated function jenkins_get_jobs(). Use jenkins_jobs_get().'), E_USER_DEPRECATED);
  return jenkins_jobs_get($depth, $tree);
}

/**
 * Backwards compatible wrapper for jenkins_job_get() function.
 *
 * @see jenkins_job_get()
 * @deprecated
 */
function jenkins_get_job($name) {
  trigger_error(t('Call to deprecated function jenkins_get_job(). Use jenkins_job_get().'), E_USER_DEPRECATED);
  return jenkins_job_get($name);
}

/**
 * Backwards compatible wrapper for jenkins_job_create() function.
 *
 * @see jenkins_job_create()
 * @deprecated
 */
function jenkins_create_job($name, $xml) {
  trigger_error(t('Call to deprecated function jenkins_create_job(). Use jenkins_job_create().'), E_USER_DEPRECATED);
  return jenkins_job_create($name, $xml);
}

/**
 * Backwards compatible wrapper for jenkins_job_copy() function.
 *
 * @see jenkins_job_copy()
 * @deprecated
 */
function jenkins_copy_job($name, $existing) {
  trigger_error(t('Call to deprecated function jenkins_copy_job(). Use jenkins_job_copy().'), E_USER_DEPRECATED);
  return jenkins_job_copy($name, $existing);
}
