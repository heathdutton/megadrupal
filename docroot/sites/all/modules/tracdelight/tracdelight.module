<?php
/**
 * @file
 * Core functionality for the tracdelight module.
 */


module_load_include('inc', 'tracdelight', 'includes/tracdelight_product');


define('TRACDELIGHT_MAX_ITEMS', 200);
define('TRACDELIGHT_API_URL', 'http://sapi.edelight.biz/api');

/**
 * Implements hook_entity_info().
 */
function tracdelight_entity_info() {
  $info['tracdelight_product'] = array(
    'label' => t('tracdelight product'),
    'controller class' => 'TracdelightProductController',
    'base table' => 'tracdelight_product',
    'uri callback' => 'tracdelight_product_uri',
    'label callback' => 'entity_class_label',
    'fieldable' => TRUE,
    'bundles' => array(
      'tracdelight_product' => array(
        'label' => 'tracdelight_product',
        'admin' => array(
          'path' => 'admin/structure/tracdelight_product/manage',
          'access arguments' => array('administer tracdelight_product entities'),
        ),
      ),
    ),
    'entity keys' => array(
      'id' => 'id',
    ),
    'entity class' => 'TracdelightProduct',
    'admin ui' => array(
      'path' => 'admin/content/tracdelight_product',
      'file' => 'tracdelight.admin.inc',
    ),
    'access callback' => 'tracdelight_product_access',
    'module' => 'tracdelight',
    'view modes' => array(
      'teaser' => array(
        'label' => t('Teaser'),
        'custom settings' => TRUE,
      ),
    ),
  );

  return $info;
}

/**
 * Wrapper for entity_ui_get_form to load includes.
 *
 * @param string $entity_type
 *   Type of the entity
 * @param StdClass $entity
 *   The entity object
 * @param string $op
 *   Form operation
 * @param array $form_state
 *   The form_state array
 *
 * @return array
 *   The product edit form
 */
function tracdelight_product_get_form($entity_type, $entity, $op = 'edit', $form_state = array()) {

  form_load_include($form_state, 'inc', 'tracdelight', 'tracdelight.admin');
  return entity_ui_get_form($entity_type, $entity, $op, $form_state);
}

/**
 * Implements hook_menu().
 */
function tracdelight_menu() {

  $items = entity_ui_controller('tracdelight_product')->hook_menu();
  foreach ($items as & $item) {
    $item['file'] = (isset($item['file'])) ? 'includes/tracdelight_product.inc' : NULL;

    if (isset($item['page callback']) && $item['page callback'] == 'entity_ui_get_form') {
      $item['page callback'] = 'tracdelight_product_get_form';
    }
  }

  $items['admin/structure/tracdelight_product/manage'] = array(
    'title' => 'Administer tracdelight_product entity type',
    'page callback' => 'tracdelight_product_admin_page',
    'access arguments' => array('administer tracdelight_product entities'),
    'file' => 'tracdelight.admin.inc',

  );

  $items['tracdelight_product/%tracdelight_product'] = array(
    'title callback' => 'postit_page_title',
    'title arguments' => array(1),
    'page callback' => 'tracdelight_product_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view tracdelight_product entities'),
    'file' => 'includes/tracdelight_product.inc',
    'type' => MENU_CALLBACK,
  );

  // 'View' tab for an individual entity page.
  $items['tracdelight_product/%tracdelight_product/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // 'Edit' tab for an individual entity page.
  $items['tracdelight_product/%tracdelight_product/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tracdelight_product_form', 3),
    'access arguments' => array('edit any tracdelight_product entities'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'tracdelight.admin.inc',
  );

  $items['admin/config/services/tracdelight'] = array(
    'title' => 'tracdelight',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tracdelight_admin'),
    'access arguments' => array('administer tracdelight_product entities'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'tracdelight.admin.inc',
  );

  $items['admin/config/services/tracdelight/config'] = array(
    'title' => 'tracdelight',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/services/tracdelight/import'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tracdelight_admin_import'),
    'access arguments' => array('administer tracdelight_product entities'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'tracdelight.admin.inc',
  );

  $items['admin/config/services/tracdelight/api'] = array(
    'title' => 'API Test',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tracdelight_api_form'),
    'access arguments' => array('administer tracdelight_product entities'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'tracdelight.admin.inc',
  );

  return $items;
}


/**
 * Implements hook_permission().
 */
function tracdelight_permission() {
  return array(
    'create tracdelight_product entities' => array(
      'title' => t('Create products'),
      'description' => t('Allows users to create products.'),
      'restrict access' => TRUE,
    ),
    'view tracdelight_product entities' => array(
      'title' => t('View products'),
      'description' => t('Allows users to view products.'),
      'restrict access' => TRUE,
    ),
    'edit any tracdelight_product entities' => array(
      'title' => t('Edit any products'),
      'description' => t('Allows users to edit any products.'),
      'restrict access' => TRUE,
    ),
    'edit own tracdelight_product entities' => array(
      'title' => t('Edit own products'),
      'description' => t('Allows users to edit own products.'),
      'restrict access' => TRUE,
    ),
    'delete any tracdelight_product entities' => array(
      'title' => t('Delete any products'),
      'description' => t('Allows users to delete any products.'),
      'restrict access' => TRUE,
    ),
    'delete own tracdelight_product entities' => array(
      'title' => t('Delete own products'),
      'description' => t('Allows users to delete own products.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function tracdelight_field_extra_fields() {

  $extra_fields = array();
  $extra_fields['tracdelight_product']['tracdelight_product'] = array(
    'display' => array(
      'ein' => array(
        'label' => t('EIN'),
        'weight' => 0,
      ),
      'sku' => array(
        'label' => t('SKU'),
        'weight' => 0,
      ),
      'title' => array(
        'label' => t('Title'),
        'weight' => 0,
      ),
      'detailpageurl' => array(
        'label' => t('Page URL'),
        'weight' => 0,
      ),
      'manufacturer' => array(
        'label' => t('Manufacturer'),
        'weight' => 0,
      ),
      'brand' => array(
        'label' => t('Brand'),
        'weight' => 0,
      ),
      'description' => array(
        'label' => t('Description'),
        'weight' => 0,
      ),
      'shippingcosts' => array(
        'label' => t('Shipping costs'),
        'weight' => 0,
      ),
      'deliverytime' => array(
        'label' => t('Delivery time'),
        'weight' => 0,
      ),
      'shop' => array(
        'label' => t('Shop'),
        'weight' => 0,
      ),
      'active' => array(
        'label' => t('Active'),
        'weight' => 0,
      ),
      'modified' => array(
        'label' => t('Modified'),
        'weight' => 0,
      ),
    ),
  );

  return $extra_fields;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function tracdelight_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference') {
    return 'plugins/entityreference/' . $plugin;
  }
}


/**
 * Calls the tracdelight api.
 *
 * @param array $params
 *   see http://itemsearch.edelight.biz/docs/html/
 * @param $items
 *   Number of items to be fetched
 * @return object
 *   Drupal response object
 */
function tracdelight_call_api($params, $items, &$messages = array()) {

  if (isset($params['Query'])) {
    $params['Query'] = '"' . $params['Query'] . '"';
  }

  $access_key = variable_get('tracdelight_access_key');

  if (!$access_key) {
    throw new Exception('No access key defiend');
  }

  $url = TRACDELIGHT_API_URL . '?' . drupal_http_build_query(
      array(
        'AccessKey' => $access_key,
        'Extracted' => 'false',
        'Operation' => 'ItemSearch',
        'Items' => $items,
        'Output' => 'json',
        'Fields' => 'modified',
        'Sort' => '-modified',
      ) + $params
    );
  $url = url($url, array('absolute' => TRUE));

  $messages['url'] = $url;

  return drupal_http_request(
    $url,
    array(
      'Content-Type' => 'text/xml',
    ),
    'GET'
  );
}

/**
 * Fetch product image from api.
 *
 * @param array $product
 *   A product array fetched from the api
 * @param string $image_path
 *   Path of the image which should be fetched. API Docs
 * @return mixed
 *   Data stream of the image
 * @throws TracdelightImageException
 */
function tracdelight_get_image($product, $image_path = 'src/normal/') {

  $tries = 0;
  do {

    $tries++;

    $image = drupal_http_request(
      url($product['imagebaseurl'] . $image_path . $product['ein'] . '.jpg', array('absolute' => TRUE)),
      array('Content-Type' => 'image/jpeg'),
      'GET'
    );
  } while ((isset($image->error) || !$image->data) && $tries < 3);

  if (!$image->data) {

    $error_msg = 'Error Message: ' . isset($image->error) ? $image->error : "Couldn't retrieve image";

    throw new TracdelightImageException($error_msg, $product['ein'], 'original');
  }

  return $image->data;
}

/**
 * Fetch id for an existing tracdelight entity.
 *
 * @param string $ein
 *   Edelight item number
 * @return mixed $entity_id or NULL
 *   tracdelight product entity id
 */
function tracdelight_get_entity_id($ein) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'tracdelight_product')
    ->propertyCondition('ein', $ein);
  $result = $query->execute();

  if (isset($result['tracdelight_product'])) {
    return current(array_keys($result['tracdelight_product']));
  }
  return NULL;
}

/**
 * Retrive product from api and creates or updates the entities.
 *
 * @param $query
 * @see http://itemsearch.edelight.biz/docs/html/
 * @param int $items
 *   Number of items to be fetched
 * @param int $last_run
 *   Timestamp of the last run. Used for cron
 * @return array
 *   Array of EINs which are active
 * @throws Exception
 */
function tracdelight_import_products($query, $items = TRACDELIGHT_MAX_ITEMS, $last_run = 0) {
  $active_products = array();

  $response = tracdelight_call_api($query, $items);

  if ($response->code != 200) {
    throw new Exception("Could not reach tracdelight API");
  }

  $response = drupal_json_decode($response->data);

  if (!is_array($response['itemsearchresponse']['items']['item'])) {
    return $active_products;
  }

  foreach ($response['itemsearchresponse']['items']['item'] as $item) {
    $active_products[$item['ein']] = $item;

    if ($last_run >= $item['modified']) {
      continue;
    }

    $image_data = tracdelight_get_image($item);

    $file = file_save_data($image_data, 'public://' . $item['ein'] . '.jpg', FILE_EXISTS_REPLACE);
    image_path_flush($file->uri);

    $item['shop']                                         = $item['shop']['name'];
    $item['formattedprice']                               = $item['listprice']['formattedprice'];
    $item['price']                                        = $item['listprice']['amount'];
    $item['oldprice']                                     = $item['listprice']['priceold'];
    $item['currency']                                     = $item['listprice']['currencycode'];
    $item['active']                                       = 1;
    $item['field_product_image'][LANGUAGE_NONE][0]['fid'] = $file->fid;

    module_load_include('inc', 'tracdelight', 'includes/tracdelight_product');

    $product = entity_create('tracdelight_product', $item);

    $entity_id = tracdelight_get_entity_id($product->ein);
    if ($entity_id) {
      $product->is_new = FALSE;
      $product->id = $entity_id;
    }

    tracdelight_product_save($product);
  }

  return $active_products;
}

/**
 * * Implementation of hook_cron_queue_info().
 */
function tracdelight_cron_queue_info() {
  $queues['tracdelight'] = array(
    // This is the callback function for each queue item.
    'worker callback' => 'tracdelight_run',
    // This is the max run time per cron run in seconds.
    'time' => 180,
  );
  return $queues;
}

/**
 * Implementation of hook_cron().
 */
function tracdelight_cron() {

  $queue = DrupalQueue::get('tracdelight');

  // only put stuff into queue if the queue is empty.
  // API is slower then our cron run and so we would query all the same item all the time.
  if ($queue->numberOfItems() > 0) {
    return;
  }

  $page = 0;

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'tracdelight_product');

  while (TRUE) {
    $query->range($page++ * TRACDELIGHT_MAX_ITEMS, TRACDELIGHT_MAX_ITEMS);
    $result = $query->execute();
    if (!isset($result['tracdelight_product']) || count($result['tracdelight_product']) <= 0) {
      break;
    }

    $products = entity_load('tracdelight_product', array_keys($result['tracdelight_product']));

    $eins = array_map(function($product) {
      return $product->ein;
    }, $products);

    $queue->createItem($eins);
  }
}

/**
 * Worker Callback for the tracdelight cron queue.
 */
function tracdelight_run($eins) {

  $active_products = tracdelight_import_products(array('EIN' => implode(',', $eins)), TRACDELIGHT_MAX_ITEMS);
  $active_products_eins = array_keys($active_products);

  $inactive_products = array_diff($active_products_eins, $eins);

  if ($inactive_products) {
    db_update('tracdelight_product')->fields(array(
      'active' => 0,
    ))->condition('ein', $inactive_products)->execute();
  }
}

function tracedelight_string_seems_to_be_ein($string)
{
  return preg_match('/^[a-z0-9]{16}$/i', $string);
}

function tracdelight_get_ein_from_uri($uri)
{
  parse_str($uri, $query_params);

  if (is_array($query_params) && isset($query_params['ein'])) {
    return $query_params['ein'];
  } else if (preg_match('/\,(?P<ein>[a-z0-9]{16})\,/i', $uri, $matches)) {
    return $matches['ein'];
  }

  return false;

}