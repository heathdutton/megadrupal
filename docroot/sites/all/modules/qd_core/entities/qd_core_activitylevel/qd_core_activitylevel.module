<?php
/**
 * @file
 * Code for the QD Core Activity Level logic.
 */


/**
 * Gets the last imported activity level record.
 *
 * @return Object
 *   The last recorded activity level record (timestamp, source_id only)
 */
function qd_core_activitylevel_get_latest_entry($uid, $service_id) {
  $query = 'SELECT id, timestamp, source_id from {qd_core_activitylevel} ';
  $query .= 'WHERE uid=:uid AND service_id=:service_id ';
  $query .= 'ORDER BY timestamp DESC LIMIT 1';

  $params = array(
    ':uid' => $uid,
    ':service_id' => $service_id,
  );

  $result = db_query($query, $params);

  return $result->fetchObject();
}


function qd_core_activitylevel_create($uid, $timestamp, $utc_offset, $source_id, $activitylevels, $service_id) {
  $entity = entity_create('qd_core_activitylevel', array('type' => 'qd_core_activitylevel'));
  $entity->uid = $uid;
  $entity->timestamp = $timestamp;
  $entity->utc_offset = $utc_offset;
  $entity->source_id = $source_id;
  if($activitylevels != NULL) {
    $entity->min_sedentary = $activitylevels['min_sedentary'];
    $entity->min_lightlyactive = $activitylevels['min_lightlyactive'];
    $entity->min_fairlyactive = $activitylevels['min_fairlyactive'];
    $entity->min_veryactive = $activitylevels['min_veryactive'];
  }
  $entity->service_id = $service_id;

  return $entity;
}



function qd_core_activitylevel_update($uuid, $uid, $timestamp, $utc_offset, $source_id, $activitylevels, $service_id) {
  // TODO:
}


function qd_core_activitylevel_delete($uuid) {
  // TODO:
}


/**
 * Implements hook_views_api().
 */
function qd_core_activitylevel_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'qd_core_activitylevel') . '/includes/views',
    'template path' => drupal_get_path('module', 'qd_core_activitylevel') . '/themes',
  );
}


/**
 * Implements hook_entity_info().
 */
function qd_core_activitylevel_entity_info() {
  $info = array(
    'qd_core_activitylevel' => array(
      'label' => t('QD Core Activity Level'),
      'entity class' => 'QDCoreActivityLevel',
      'controller class' => 'QDCoreActivityLevelController',
      'base table' => 'qd_core_activitylevel',
      'uri callback' => 'qd_core_activitylevel_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'id',
        'uuid' => 'uuid',
      ),
      'static cache' => TRUE,
      'views controller class' => 'EntityDefaultViewsController',
      'uuid' => TRUE,
    ),
  );

  return $info;
}


/**
 * Implements hook_entity_property_info_alter().
 */
function qd_core_activitylevel_entity_property_info_alter(&$info) {
  $properties = &$info['qd_core_activitylevel']['properties'];

  $properties['id'] = array(
    'label' => 'QD Activity summary ID',
    'description' => t('The unique ID for the qd_core_activitylevel.'),
    'type' => 'integer',
    'schema field' => 'id',
  );
  $properties['uuid'] = array(
    'label' => 'QD Activity Level UUID',
    'description' => t('UUID'),
    'type' => 'integer',
    'schema field' => 'id',
  );
  $properties['timestamp'] = array(
    'label' => 'Timestamp',
    'description' => t('The timestamp of when the measurement was taken.'),
    'type' => 'date',
    'schema field' => 'timestamp',
  );
  $properties['utc_offset'] = array(
    'label' => 'UTC Offset',
    'description' => t('The timestamp offset from UTC.'),
    'type' => 'integer',
    'schema field' => 'utc_offset',
  );
  $properties['uid'] = array(
    'label' => 'User ID',
    'description' => t('The user ID this value belongs to.'),
    'type' => 'user',
    'schema field' => 'uid',
  );
  $properties['service_id'] = array(
    'label' => 'Service ID',
    'description' => t('The tid of the service (taxonomy) this value came from.'),
    'type' => 'integer',
    'schema field' => 'service_id',
  );
  $properties['source_id'] = array(
    'label' => 'Source ID',
    'description' => t('The id from the service that identifies this record on that source service.'),
    'type' => 'text',
    'schema field' => 'source_id',
  );
  $properties['min_sedentary'] = array(
    'label' => 'Minutes sedentary',
    'description' => t('The number of sedentary minutes this day.'),
    'type' => 'integer',
    'schema field' => 'min_sedentary',
  );
  $properties['min_lightlyactive'] = array(
    'label' => 'Minutes lightly active',
    'description' => t('The number of lightly active minutes this day.'),
    'type' => 'integer',
    'schema field' => 'min_lightlyactive',
  );
  $properties['min_fairlyactive'] = array(
    'label' => 'Minutes fairly active',
    'description' => t('The number of fairly active minutes this day.'),
    'type' => 'integer',
    'schema field' => 'min_fairlyactive',
  );
  $properties['min_veryactive'] = array(
    'label' => 'Minutes very active',
    'description' => t('The number of very active minutes this day.'),
    'type' => 'integer',
    'schema field' => 'min_veryactive',
  );

  return $properties;
}
