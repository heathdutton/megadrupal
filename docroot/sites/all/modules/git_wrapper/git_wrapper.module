<?php

/**
 * @file
 * Integrates with the Git Wrapper library.
 */

use GitWrapper\GitWrapper;

/**
 * Implements hook_permission().
 */
function git_wrapper_permission() {
  return array(
    'administer git wrapper' => array(
      'title' => t('Administer Git Wrapper'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function git_wrapper_menu() {
  $items = array();

  $items['admin/config/system/git-wrapper'] = array(
    'title' => 'Git Wrapper',
    'description' => 'Configure the Git Wrapper library.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('git_wrapper_git_settings_form'),
    'access arguments' => array('administer git wrapper'),
    'file' => 'git_wrapper.admin.inc',
  );

  $items['admin/config/system/git-wrapper/edit'] = array(
    'title' => 'Git Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['git-wrapper/version'] = array(
    'page callback' => 'git_wrapper_version_page',
    'access arguments' => array('administer git wrapper'),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver',
    'file' => 'git_wrapper.pages.inc',
  );

  return $items;
}

/**
 * Returns an instance of GitWrapper.
 *
 * If the path to the Git binary is not set, it is auto-discovered via the
 * \Symfony\Component\Process\ExecutableFinder class.
 *
 * @return GitWrapper
 *
 * @throws \RuntimeException
 *   Thrown when the autoloader or GitWrapper class is unavailable.
 * @throws GitException
 */
function git_wrapper() {
  static $wrapper = false;
  if (!$wrapper) {

    // Register the autoloader and ensure the library is available.
    composer_manager_register_autoloader();
    if (!class_exists('GitWrapper\GitWrapper')) {
      $message = t('The GitWrapper class was not found. Make sure the package is installed via Composer.');
      throw new \RuntimeException($message);
    }

    // Convert empty string to NULL which flags the auto-discovery.
    $git_binary = variable_get('git_wrapper_binary', '');
    if (!$git_binary) {
      $git_binary = NULL;
    }

    $wrapper = new GitWrapper($git_binary);
    $wrapper->setTimeout(variable_get('git_wrapper_timeout', 60));

    $private_key = variable_get('git_wrapper_private_key', '');
    if (variable_get('git_wrapper_connect_via_ssh', 0) && $private_key) {
      $port = variable_get('git_wrapper_ssh_port', 22);
      $ssh_wrapper = git_wrapper_ssh_wrapper();
      $wrapper->setPrivateKey($private_key, $port, $ssh_wrapper);
    }

    // Parses the list of environment variables and add them to the wrapper.
    if (variable_get('git_wrapper_set_envvars', 0)) {
      $envvars = variable_get('git_wrapper_envvars', '');
      $vars = array_filter(array_map('trim', explode("\n", $envvars)));
      foreach ($vars as $varstring) {
        $parts = explode('|', $varstring);
        if (isset($parts[1])) {
          $wrapper->setEnvVar($parts[0], $parts[1]);
        }
      }
    }

  }
  return $wrapper;
}

/**
 * Returns the path to the SSH wrapper as configured via the UI.
 *
 * @return string
 */
function git_wrapper_ssh_wrapper() {
  $wrapper = variable_get('git_wrapper_ssh_wrapper', '<default>');
  if ('<default>' === $wrapper) {
    $wrapper = git_wrapper_default_ssh_wrapper();
  }
  return $wrapper;
}

/**
 * Returns the path to the default SSH wrapper script shipped with the Git
 * Wrapper library.
 *
 * @return string
 */
function git_wrapper_default_ssh_wrapper() {
  return composer_manager_vendor_dir() . '/cpliakas/git-wrapper/bin/git-ssh-wrapper.sh';
}
