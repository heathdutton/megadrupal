<?php

/**
 * Provides a timezone picker element for selecting a timezone using a map.
 *
 * @author Nathan Haug <nate@lullabot.com>
 */

/**
 * Implements hook_element_info().
 *
 * Defines the #type = 'timezone' form element type.
 *
 * The 'timezone' form element provides a drop-down select list to select a
 * timezone as well as map.
 *
 * @code
 * $form['timezone'] = array(
 *   '#type' => 'timezone_picker',
 *   '#default_value' => 'America/Vancouver',
 * );
 * @endcode
 *
 * Properties for the 'options' element include:
 * - country_target: If selecting a timezone should also update a country value
 *   upon selection, provide a CSS selector to the country select list. The
 *   select list should be keyed by its two-letter country code, per ISO 3166-2.
 * - timezone_target: By default, this widget will provide its own timezone
 *   select list. If set to a CSS selector, that form element will be updated
 *   and the built-in select list will not be generated. This may also be set to
 *   boolean FALSE, and no select list will be generated at all. This may be
 *   used to turn the timezone picker into a country picker, or use a hidden
 *   field to store the timezone value instead of a select list.
 * - default_value: The default value as a specified in the Timezone Database,
 *   per http://php.net/manual/en/timezones.php.
 * - title: The label for the generated select list. Will be ignored if
 *   timezone_target is set.
 * - description: The description for the generated select list. Will be ignored
 *   if timezone_target is set.
 * - required: Boolean whether the timezone is required.
 * - map_id: The ID that will be used to identify the image map.
 * - map_src: A URI to the map image to be used.
 * - detect_button: Boolean value if a detect timezone button should be added.
 */
function timezone_picker_element_info() {
  $type = array();

  $type['timezone_picker'] = array(
    '#input' => TRUE,
    '#theme' => 'timezone_picker',
    '#process' => array('timzone_picker_expand'),
    '#default_value' => NULL,
    '#description' => NULL,
    '#country_target' => NULL,
    '#timezone_target' => NULL,
    '#map_id' => 'timezone-picker',
    '#map_src' => base_path() . drupal_get_path('module', 'timezone_picker') . '/images/map.png',
    '#detect_button' => TRUE,
    '#theme_wrappers' => array('form_element'),
  );

  return $type;
}

/**
 * Form #process function to create the timezone picker map and select list.
 */
function timzone_picker_expand($element) {
  $map_id = drupal_html_id($element['#map_id']);

  $element['#tree'] = TRUE;

  // If using the built-in timezone select list, add it as a subelement.
  if (empty($element['#timezone_target'])) {
    $element['name'] = array(
      '#type' => 'select',
      '#required' => $element['#required'],
      '#default_value' => $element['#default_value'],
      '#id' => $map_id . '-name',
      '#theme_wrappers' => array(),
      '#parents' => $element['#parents'],
    );

    // Set the parent ID to match the select element to associated the label.
    $element['#id'] = $element['name']['#id'];

    // Reuse provided options if given instead of regenerating.
    if (isset($element['#options'])) {
      $element['name']['#options'] = $element['#options'];
      unset($element['#options']);
    }
    else {
      $element['name']['#options'] = timezone_picker_timezones();
    }
  }

  if ($element['#detect_button']) {
    $element['detect'] = array(
      '#type' => 'button',
      '#value' => t('Detect'),
      '#id' => $map_id . '-detect',
      //'#name' => $element['#name'],
      '#validate' => array(),
      '#submit' => array(),
      '#input' => FALSE,
      '#needs_validation' => FALSE,
    );
  }

  $element['map'] = array(
    '#theme' => 'timezone_map',
    '#map_id' => $map_id,
    '#map_src' => $element['#map_src'],
  );

  // Define settings to be passed forward to jquery.timezone-picker.js.
  $settings['target'] = empty($element['#timezone_target']) ? '#' . $element['name']['#id'] : $element['#timezone_target'];
  $settings['pin'] = '.timezone-picker-pin';
  if ($element['#country_target']) {
    $settings['countryTarget'] = $element['#country_target'];
  }

  $element['#attached']['library'][] = array('timezone_picker', 'jquery.timezone-picker');
  $element['#attached']['css'][] = drupal_get_path('module', 'timezone_picker') . '/timezone-picker.css';
  $element['#attached']['js'][] = drupal_get_path('module', 'timezone_picker') . '/timezone-picker.js';
  $element['#attached']['js'][] = array(
    'data' => array('timezonePicker' => array($map_id => $settings)),
    'type' => 'setting',
  );
  return $element;
}

/**
 * Implements hook_theme().
 */
function timezone_picker_theme() {
  $items = array();

  $items['timezone_picker'] = array(
    'render element' => 'element',
  );
  $items['timezone_map'] = array(
    'variables' => array('map_src' => NULL, 'map_id' => NULL),
    'template' => 'timezone-map',
  );

  return $items;
}

/**
 * Implements hook_library().
 */
function timezone_picker_library() {
  $module_path = drupal_get_path('module', 'timezone_picker');
  $libraries['jquery.timezone-picker'] = array(
    'title' => 'Timezone Picker',
    'website' => 'http://timezonepicker.com',
    'version' => '1.1',
    'js' => array(
      $module_path . '/lib/jquery.timezone-picker.min.js' => array(),
    ),
    'dependencies' => array(
      array('timezone_picker', 'jquery.maphilight'),
    ),
  );
  $libraries['jquery.maphilight'] = array(
    'title' => 'jQuery Maphilight',
    'website' => 'http://davidlynch.org/projects/maphilight/docs/',
    'version' => '1.2.2',
    'js' => array(
      $module_path . '/lib/jquery.maphilight.min.js' => array(),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function timezone_picker_form_user_profile_form_alter(&$form, $form_state) {
  if (isset($form['timezone']['timezone'])) {
    $form['timezone']['#type'] = 'markup';
    $form['timezone']['timezone']['#type'] = 'timezone_picker';
    $form['timezone']['timezone']['#options'] = timezone_picker_timezones();
    $form['timezone']['timezone']['#description'] = t('Dates and times throughout the site will be displayed using this time zone.');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function timezone_picker_form_user_register_form_alter(&$form, $form_state) {
  timezone_picker_form_user_profile_form_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function timezone_picker_form_system_regional_settings_alter(&$form, $form_state) {
  if (isset($form['timezone']['date_default_timezone'])) {
    $form['timezone']['date_default_timezone']['#type'] = 'timezone_picker';
    $form['timezone']['date_default_timezone']['#options'] = timezone_picker_timezones();
  }
}

/**
 * Output the overall timezone picker element, combined map and select list.
 */
function theme_timezone_picker($variables) {
  $element = $variables['element'];
  return drupal_render_children($element);
}

/**
 * A modified version of system_time_zones() that only includes timezone names.
 */
function timezone_picker_timezones($blank = TRUE) {
  $zonelist = timezone_identifiers_list();
  $zones = $blank ? array('' => t('- None selected -')) : array();
  foreach ($zonelist as $zone) {
    // Because many time zones exist in PHP only for backward compatibility
    // reasons and should not be used, the list is filtered by a regular
    // expression.
    if (preg_match('!^((Africa|America|Antarctica|Arctic|Asia|Atlantic|Australia|Europe|Indian|Pacific)/|UTC$)!', $zone)) {
      $zones[$zone] = t(str_replace('_', ' ', $zone));
    }
  }
  // Sort the translated time zones alphabetically.
  asort($zones);
  return $zones;
}
