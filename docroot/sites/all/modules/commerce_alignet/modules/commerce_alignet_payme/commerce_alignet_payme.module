<?php

/**
 * @file
 * Implements Alignet Pay Me in Drupal Commerce checkout.
 */


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_alignet_payme_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['alignet_payme'] = array(
    'base' => 'commerce_alignet_payme',
    'title' => t('Alignet payme'),
    'short_title' => t('Alignet'),
    'description' => t('Alignet Pay-Me'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,

    // Because the order form generation code does not have access to a payment
    // method info array, we set the bn directly there instead of making use of
    // this buttonsource variable. It's here for consistency with other payment
    // methods in this package.
    'buttonsource' => 'CommerceGuys_Cart_PPS',
  );

  return $payment_methods;
}

/**
 * Returns the default settings for the alignet payme payment method.
 */
function commerce_alignet_payme_default_settings() {
  $default_currency = commerce_default_currency();

  return array(
    'business' => '',
    'currency_code' => in_array($default_currency, array_keys(commerce_alignet_currencies('alignet_payme'))) ? commerce_alignet_payme_currency($default_currency) : 604,
    'allow_supported_currencies' => FALSE,
    'language' => 'SP',
    'server' => 'sandbox',
    'payment_action' => 'sale',
    'ipn_logging' => 'notification',
    'receiver_emails' => '',
    'ipn_create_billing_profile' => FALSE,
    'show_payment_instructions' => FALSE,
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_alignet_payme_settings_form($settings = array()) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_alignet_payme_default_settings();

  $form['business'] = array(
    '#type' => 'textfield',
    '#title' => t('alignet e-mail address'),
    '#description' => t('The primary e-mail address of the alignet account you want to use to receive payments.'),
    '#default_value' => $settings['business'],
    '#required' => TRUE,
  );
  $form['currency_code'] = array(
    '#type' => 'select',
    '#title' => t('Default currency'),
    '#description' => t('Transactions in other currencies will be converted to this currency, so multi-currency sites must be configured to use appropriate conversion rates.'),
    '#options' => commerce_alignet_currencies('alignet_payme'),
    '#default_value' => $settings['currency_code'],
  );
  $form['allow_supported_currencies'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow transactions to use any currency in the options list above.'),
    '#description' => t('Transactions in unsupported currencies will still be converted into the default currency.'),
    '#default_value' => $settings['allow_supported_currencies'],
  );
  $form['language'] = array(
    '#type' => 'select',
    '#title' => t('Alignet login page language / locale'),
    '#options' => commerce_alignet_payme_languages(),
    '#default_value' => $settings['language'],
  );
  $form['server'] = array(
    '#type' => 'radios',
    '#title' => t('alignet server'),
    '#options' => array(
      'sandbox' => ('Sandbox - use for testing, requires a alignet Sandbox account'),
      'live' => ('Live - use for processing real transactions'),
    ),
    '#default_value' => $settings['server'],
  );
  $form['payment_action'] = array(
    '#type' => 'radios',
    '#title' => t('Payment action'),
    '#options' => array(
      'sale' => t('Sale - authorize and capture the funds at the time the payment is processed'),
      'authorization' => t('Authorization - reserve funds on the card to be captured later through your alignet account'),
    ),
    '#default_value' => $settings['payment_action'],
  );
  $form['ipn_logging'] = array(
    '#type' => 'radios',
    '#title' => t('IPN logging'),
    '#options' => array(
      'notification' => t('Log notifications during IPN validation and processing.'),
      'full_ipn' => t('Log notifications with the full IPN during validation and processing (used for debugging).'),
    ),
    '#default_value' => $settings['ipn_logging'],
  );
  $form['receiver_emails'] = array(
    '#type' => 'textfield',
    '#title' => t('Alignet receiver e-mail addresses'),
    '#description' => t('Enter the primary e-mail address for your alignet account if different from the one entered above or a comma separated list of all valid e-mail addresses on the account.') . '<br />' . t('IPNs that originate from payments made to a alignet account whose e-mail address is not in this list will not be processed.'),
    '#default_value' => $settings['receiver_emails'],
  );
  $form['acquire_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Alignet acquiere ID'),
    '#description' => t('Enter the acquiere ID supplied by Alignet.'),
    '#default_value' => $settings['acquire_id'],
  );
  $form['id_commerce'] = array(
    '#type' => 'textfield',
    '#title' => t('Alignet ID commerce'),
    '#description' => t('Enter the ID of the commerce supplied by Alignet.'),
    '#default_value' => $settings['id_commerce'],
  );
  $form['commerce_associated'] = array(
    '#type' => 'textfield',
    '#title' => t('Alignet commerce associated'),
    '#description' => t('Enter the commerce associated name.'),
    '#default_value' => $settings['commerce_associated'],
  );
  $form['mcc'] = array(
    '#type' => 'select',
    '#title' => t('Alignet MCC business code'),
    '#options' => array(
      '0001' => t('Type 1'),
      '0002' => t('Type 2'),
    ),
    '#default_value' => $settings['mcc'],
  );
  $form['ipn_create_billing_profile'] = array(
    '#type' => 'checkbox',
    '#title' => t('Create a billing profile based on name and country data in the IPN for any order that does not have one yet.'),
    '#description' => t('This is most useful for sites that do not collect billing information locally but still want to have customer names on orders.'),
    '#default_value' => $settings['ipn_create_billing_profile'],
  );
  $form['show_payment_instructions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show a message on the checkout form when Alignet Pay-Me is selected telling the customer to "Continue with checkout to complete payment via alignet."'),
    '#default_value' => $settings['show_payment_instructions'],
  );
 /* $form['public_key'] = array(
    '#type' => 'textarea',
    '#title' => t('Public Key'),
    '#default_value' => $settings['public_key'],
  );*/
  $form['encryption_public_alignet'] = array(
    '#type' => 'textarea',
    '#title' => t('Public encrypted key ALIGNET'),
    '#default_value' => $settings['encryption_public_alignet'],
    '#description' => t('Public encrypted key ALIGNET'),
    );
  $form['vector'] = array(
    '#type' => 'textfield',
    '#title' => t('Initialization Vector'),
    '#default_value' => $settings['vector'],
    '#description' => t('Initialization Vector'),
    );
  $form['firm_private_commerce'] = array(
    '#type' => 'textarea',
    '#title' => t('Key firm private commerce'),
    '#default_value' => $settings['firm_private_commerce'],
    '#description' => t('Key firm private commerce'),
    );
  //private firm trade
  $form['firm_public_alignet'] = array(
    '#type' => 'textarea',
    '#title' => t('Key firm Public Alignet'),
    '#default_value' => $settings['firm_public_alignet'],
    '#description' => t('Key firm Public Alignet'),
    );
  $form['encryption_private_commerce'] = array(
    '#type' => 'textarea',
    '#title' => t('Key encryption private commerce'),
    '#default_value' => $settings['encryption_private_commerce'],
    '#description' => t('Key encryption private commerce'),
    );
  return $form;
}

/**
 * Payment method callback: adds a message to the submission form if enabled in
 * the payment method settings.
 */
function commerce_alignet_payme_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  if (!empty($payment_method['settings']['show_payment_instructions'])) {
    $form['alignet_payme_information'] = array(
      '#markup' => '<span class="commerce-alignet-payme-info">' . t('(Continue with checkout to complete payment via Alignet.)') . '</span>',
    );
  }
  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_alignet_payme_form_commerce_checkout_form_alter(&$form, &$form_state) {
  // If this checkout form contains the payment method radios...
  if (!empty($form['commerce_payment']['payment_method']['#options'])) {
    // Loop over its options array looking for a alignet payme option.
    foreach ($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
      list($method_id, $rule_name) = explode('|', $key);

      // If we find alignet payme...
      if ($method_id == 'alignet_payme') {
        // Prepare the replacement radio button text with icons.
        $icons = commerce_alignet_icons();
        $value = t('!logo alignet - pay securely without sharing your financial information', array('!logo' => $icons['alignet']));
        $value .= '<div class="commerce-alignet-icons"><span class="label">' . t('Includes:') . '</span>' . implode(' ', $icons) . '</div>';

        // Add the CSS.
        $form['commerce_payment']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'commerce_alignet_payme') . '/theme/commerce_alignet_payme.theme.css';

        break;
      }
    }
  }
}

/**
 * Payment method callback: redirect form, a wrapper around the module's general
 *   use function for building a payme form.
 */
function commerce_alignet_payme_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['business'])) {
    drupal_set_message(t('Alignet payme is not configured for use. No alignet e-mail address has been specified.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Specify the current payment method instance ID in the notify_url
    'payment_method' => $payment_method['instance_id'],

    // Include the application indicator
    'bn' => $payment_method['buttonsource'],
  );

  return commerce_alignet_payme_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Payment method callback: redirect form return validation.
 */
function commerce_alignet_payme_redirect_form_validate($order, $payment_method) {
  if (!empty($payment_method['settings']['ipn_logging']) &&
    $payment_method['settings']['ipn_logging'] == 'full_ipn') {
    watchdog('commerce_alignet_payme', 'Customer returned from alignet with the following POST data:!ipn_data', array('!ipn_data' => '<pre>' . check_plain(print_r($_POST, TRUE)) . '</pre>'), WATCHDOG_NOTICE);
  }

  // This may be an unnecessary step, but if for some reason the user does end
  // up returning at the success URL with a Failed payment, go back.
  if (!empty($_POST['payment_status']) && $_POST['payment_status'] == 'Failed') {
    return FALSE;
  }
}

/**
 * Payment method callback: validate an IPN based on receiver e-mail address,
 *   price, and other parameters as possible.
 */
function commerce_alignet_payme_alignet_ipn_validate($order, $payment_method, $ipn) {
  // Prepare a trimmed list of receiver e-mail addresses.
  if (!empty($payment_method['settings']['receiver_emails'])) {
    $receiver_emails = explode(',', $payment_method['settings']['receiver_emails']);
  }
  else {
    $receiver_emails = array();
  }

  // Add the business e-mail address to the list of addresses.
  $receiver_emails[] = $payment_method['settings']['business'];

  foreach ($receiver_emails as $key => &$email) {
    $email = trim(strtolower($email));
  }

  // Return FALSE if the receiver e-mail does not match one specified by the
  // payment method instance.
  if (!in_array(trim(strtolower($ipn['receiver_email'])), $receiver_emails)) {
    commerce_payment_redirect_pane_previous_page($order);
    watchdog('commerce_alignet_payme', 'IPN rejected: invalid receiver e-mail specified (@receiver_email); must match the primary e-mail address on the alignet account.', array('@receiver_email' => $ipn['receiver_email']), WATCHDOG_NOTICE);
    return FALSE;
  }

  // Prepare the IPN data for inclusion in the watchdog message if enabled.
  $ipn_data = '';

  if (!empty($payment_method['settings']['ipn_logging']) &&
    $payment_method['settings']['ipn_logging'] == 'full_ipn') {
    $ipn_data = '<pre>' . check_plain(print_r($ipn, TRUE)) . '</pre>';
  }

  // Log a message including the alignet transaction ID if available.
  if (!empty($ipn['txn_id'])) {
    watchdog('commerce_alignet_payme', 'IPN validated for Order @order_number with ID @txn_id.!ipn_data', array('@order_number' => $order->order_number, '@txn_id' => $ipn['txn_id'], '!ipn_data' => $ipn_data), WATCHDOG_NOTICE);
  }
  else {
    watchdog('commerce_alignet_payme', 'IPN validated for Order @order_number.!ipn_data', array('@order_number' => $order->order_number, '!ipn_data' => $ipn_data), WATCHDOG_NOTICE);
  }
}

/**
 * Payment method callback: process an IPN once it's been validated.
 */
function commerce_alignet_payme_alignet_ipn_process($order, $payment_method, &$ipn) {
  // Do not perform any processing on payme transactions here that do not have
  // transaction IDs, indicating they are non-payment IPNs such as those used
  // for subscription signup requests.
  if (empty($ipn['txn_id'])) {
    return FALSE;
  }

  // Exit when we don't get a payment status we recognize.
  if (!in_array($ipn['payment_status'], array('Failed', 'Voided', 'Pending', 'Completed', 'Refunded'))) {
    commerce_payment_redirect_pane_previous_page($order);
    return FALSE;
  }

  // If this is a prior authorization capture IPN for which we've already
  // created a transaction...
  if (in_array($ipn['payment_status'], array('Voided', 'Completed')) &&
    !empty($ipn['auth_id']) && $auth_ipn = commerce_alignet_ipn_load($ipn['auth_id'])) {
    // Load the prior IPN's transaction and update that with the capture values.
    $transaction = commerce_payment_transaction_load($auth_ipn['transaction_id']);
  }
  else {
    // Create a new payment transaction for the order.
    $transaction = commerce_payment_transaction_new('alignet_payme', $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
  }

  $transaction->remote_id = $ipn['txn_id'];
  $transaction->amount = commerce_currency_decimal_to_amount($ipn['mc_gross'], $ipn['mc_currency']);
  $transaction->currency_code = $ipn['mc_currency'];
  $transaction->payload[REQUEST_TIME . '-ipn'] = $ipn;

  // Set the transaction's statuses based on the IPN's payment_status.
  $transaction->remote_status = $ipn['payment_status'];

  // If we didn't get an approval response code...
  switch ($ipn['payment_status']) {
    case 'Failed':
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t("The payment has failed. This happens only if the payment was made from your customer’s bank account.");
      break;

    case 'Voided':
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t('The authorization was voided.');
      break;

    case 'Pending':
      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
      $transaction->message = commerce_alignet_ipn_pending_reason($ipn['pending_reason']);
      break;

    case 'Completed':
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t('The payment has completed.');
      break;

    case 'Refunded':
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t('Refund for transaction @txn_id', array('@txn_id' => $ipn['parent_txn_id']));
      break;
  }

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);
  $ipn['transaction_id'] = $transaction->transaction_id;

  // Create a billing profile based on the IPN if enabled.
  if (!empty($payment_method['settings']['ipn_create_billing_profile']) && isset($order->commerce_customer_billing)) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    // If this order does not have a billing profile yet...
    if ($order_wrapper->commerce_customer_billing->value() === NULL) {
      // Ensure we have the required data in the IPN.
      if (empty($ipn['residence_country']) || empty($ipn['first_name']) || empty($ipn['last_name'])) {
        $data = array_intersect_key($ipn, drupal_map_assoc(array('residence_country', 'first_name', 'last_name')));
        watchdog('commerce_alignet_payme', 'A billing profile for Order @order_number could not be created due to insufficient data in the IPN:!data', array('@order_number' => $order->order_number, '!data' => '<pre>'. check_plain(print_r($data, TRUE)) .'</pre>'), WATCHDOG_WARNING);
      }
      else {
        // Create the new profile now.
        $profile = commerce_customer_profile_new('billing', $order->uid);

        // Add the address value.
        $profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $profile);

        $profile_wrapper->commerce_customer_address = array_merge(addressfield_default_values(), array(
          'country' => $ipn['residence_country'],
          'name_line' => $ipn['first_name'] . ' ' . $ipn['last_name'],
          'first_name' => $ipn['first_name'],
          'last_name' => $ipn['last_name'],
        ));

        // Save the profile, reference it from the order, and save the order.
        $profile_wrapper->save();
        $order_wrapper->commerce_customer_billing = $profile_wrapper;
        $order_wrapper->save();

        watchdog('commerce_alignet_payme', 'Billing profile created for Order @order_number containing the first and last names and residence country of the customer based on IPN data.', array('@order_number' => $order->order_number));
      }
    }
  }

  commerce_payment_redirect_pane_next_page($order);
  watchdog('commerce_alignet_payme', 'IPN processed for Order @order_number with ID @txn_id.', array('@txn_id' => $ipn['txn_id'], '@order_number' => $order->order_number), WATCHDOG_INFO);
}

/**
 * Builds a Website Payments Standard form from an order object.
 *
 * @param $order
 *   The fully loaded order being paid for.
 * @param $settings
 *   An array of settings used to build out the form, including:
 *   - server: which server to use, either sandbox or live
 *   - business: the alignet e-mail address the payment submits to
 *   - cancel_return: the URL alignet should send the user to on cancellation
 *   - return: the URL alignet should send the user to on successful payment
 *   - currency_code: the alignet currency code to use for this payment if the
 *     total for the order is in a non-alignet supported currency
 *   - language: the alignet language code to use on the payment form
 *   - payment_action: the alignet payment action to use: sale, authorization,
 *     or order
 *   - payment_method: optionally a payment method instance ID to include in the
 *     IPN notify_url
 *
 * @return
 *   A renderable form array.
 */
function commerce_alignet_payme_order_form($form, &$form_state, $order, $settings) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Determine the currency code to use to actually process the transaction,
  // which will either be the default currency code or the currency code of the
  // order if it's supported by alignet if that option is enabled.
  $currency_code = $settings['currency_code'];
  $order_currency_code = $wrapper->commerce_order_total->currency_code->value();

  if (!empty($settings['allow_supported_currencies']) && in_array($order_currency_code, array_keys(commerce_alignet_currencies('alignet_payme')))) {
    $currency_code = $order_currency_code;
  }
//var_dump($form_state);
  $amount = $wrapper->commerce_order_total->amount->value();

  // Ensure a default value for the payment_method setting.
  $settings += array('payment_method' => '');
//var_dump($order);

  _set_data_to_alignet($form, $order, $settings);

  // Allow modules to alter parameters of the API request.
  drupal_alter('commerce_alignet_payme_order_form_data', $data, $order);

  $form['#action'] = commerce_alignet_payme_server_url($settings['server']);
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to Alignet'),
  );

  return $form;
}
function _set_data_to_alignet(&$form, $order, $settings) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $profile_id = $wrapper->commerce_customer_billing->profile_id->value(); 
  // load customer profile
  $profile = commerce_customer_profile_load($profile_id);
  $country = $profile->commerce_customer_address['und'][0]['country'];
  $city  = $profile->commerce_customer_address['und'][0]['administrative_area'];

  $first_name  = $profile->field_commerce_contacto['und'][0]['value'];
  $last_name  = $profile->field_apellidos['und'][0]['value'];
  $address = $profile->commerce_customer_address['und'][0]['thoroughfare'];
  $email = $order->mail;

  //account[login][mail]
  //llaves y vector
  $encryption_public_alignet = $settings['encryption_public_alignet'];
  $firm_private_commerce = $settings['firm_private_commerce'];
  $VI = $settings['vector'];

  $orden = $order->order_number;
  $amount = $wrapper->commerce_order_total->amount->value();
  
  //var_dump($profile);
  //exit(); 

  $data_out = array();
  $data_in = array(
          'acquirerId' => $settings['acquire_id'],
          'commerceId' => $settings['id_commerce'],
          'commerceMallId' => '1',
          'terminalCode' => '00000000',
          'purchaseOperationNumber' => $orden,
          'purchaseAmount' => $amount,
          'purchaseCurrencyCode' => '840',

          'billingFirstName' => $first_name,
          'billingLastName' =>$last_name,
          'billingEMail'=>$email,
          'billingAddress' => $address,
          'billingZIP' => 'lima13',
          'billingCity' => $city,
          'billingState' => substr($city, 0, 2),
          'billingCountry' => $country,

          'reserved1' => '840',
          'reserved2' => $amount,
          'reserved3' => $settings['id_commerce'],
          'reserved13' => 'CANADAPERU',
  );

  //var_dump($data_in);
 VPOSSend($data_in,$data_out,$encryption_public_alignet,$firm_private_commerce,$VI);

 $form['IDACQUIRER'] = array('#type' => 'hidden', '#value' => $data_in['acquirerId']); 
 $form['IDCOMMERCE'] = array('#type' => 'hidden', '#value' => $data_in['commerceId']);
 $form['XMLREQ'] = array('#type' => 'hidden', '#value' => $data_out['XMLREQ']);
 $form['DIGITALSIGN'] =  array('#type' => 'hidden', '#value' => $data_out['DIGITALSIGN']);
 $form['SESSIONKEY'] = array('#type' => 'hidden', '#value' => $data_out['SESSIONKEY']);

}


function _save_ipn_alignet(){


$data = array(
  /*
   'ipn_id' =>     int(10),
   'txn_id' =>          varchar(255),
   'txn_type' =>        varchar(255), 
   'receiver_email' =>  varchar(255), 
   'payer_email' =>     varchar(255), 
   'order_id'=>        int(10), 
   'transaction_id'=>  int(10), 
   'mc_gross'=>        decimal(10,2),
   'mc_currency' =>    varchar(255), 
   'mc_fee' =>          decimal(10,2), 
   'payment_status'=>  varchar(255), 
   'payment_type'=>    varchar(255),
   'created'=>         int(11), 
   'changed'=>         int(11), 
   'test_ipn'=>        tinyint(4), 
   */
   );
}
/**
 * Returns the URL to the specified alignet payme server.
 *
 * @param $server
 *   Either sandbox or live indicating which server to get the URL for.
 *
 * @return
 *   The URL to use to submit requests to the alignet payme server.
 */
function commerce_alignet_payme_server_url($server) {
  switch ($server) {
    case 'sandbox':
      return 'https://test2.alignetsac.com/VPOS/MM/transactionStart20.do';
    case 'live':
      return 'https://vpayment.verifika.com/vpaymentweb/';
  }
}

/**
 * Returns currency ISO number.
 */
function commerce_alignet_payme_currency($currency) {
  switch ($currency) {
    case 'PEN':
      return 604;
    case 'USD':
      return 840;
  }
}

/**
 * Returns an array of all possible language codes.
 */
function commerce_alignet_payme_languages() {
  return array(
    'EN' => t('English'),
    'SP' => t('Spanish'),
  );
}


function send_mail_commerce($result) {

$to=$result['billingEMail'].','."williams.acuna@df.pe";
$text = '<html><head></head><body>Estimado ' . $result['billingFirstName'] .' '.$result['billingLastName'] . ', <br>' .
'Su orden fue enviada con exito, su número de operación es: '.$result['authorizationCode'].' <br></body></html>';
$params = array(
        'subject' =>'Pedido CanadaPeru.org',
        'body' => $text,
      );
 $language = language_default();
 drupal_mail('commerce_alignet_payme', 'accion', $to , $language, $params, 'webmaster@cadaperu.org',TRUE);
}
function commerce_alignet_payme_mail($key, &$message, $params) {

  switch ($key) {
    // Send a simple message from the contact form.
    case 'accion':
       $message [ 'headers' ] = array_merge ( 
        $message [ 'headers' ], 
          array( 
          'MIME-Version' => '1.0' , 
          'Content-Type' => 'text/html; charset=UTF-8; format=flowed' , 
          'Content-Transfer-Encoding' => '8Bit' , 
          'X-Mailer' => 'Drupal' 
          ) 
        ); 
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];

      break;
  }
}