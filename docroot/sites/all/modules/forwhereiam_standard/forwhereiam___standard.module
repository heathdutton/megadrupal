<?php
/**
 * @file
 * Provides API integration with forWhereiAm communications platform.
 *
 * This file contains hooks implementation and functions implementation
 * for forWhereiAm Standard (server-side flow) module.
 */

/**
 * Implements hook_help().
 */
function forwhereiam___standard_help($path, $args) {
  if ($path == 'admin/help#forwhereiam___standard') {
    return t('forWhereiAm (FWiA) Standard module implementing a server-side flow. Configure this module with your unique client ID and client Secret which can be retrieved from your FWiA Enterprise Solution account. Once configured, this module can start querying FWiA APIs for announcements as soon as you, or your website user, enters a postcode. You website users can optionally also sign up for email alerts with FWiA without leaving your site.');
  }
}

/**
 * Implements hook_permission().
 */
function forwhereiam___standard_permission() {
  $perms = array(
    'display forwhereiam standard widget' => array(
      'title' => t('Display forWhereiAm Standard widget'),
      'description' => t('Show the forWhereiAm Standard widget to users.'),
    ),
  );
  return $perms;
}

/**
 * Implements hook_block_info().
 */
function forwhereiam___standard_block_info() {
  $blocks = array();

  $blocks['fwia---standard-widget'] = array(
    'info' => t('forWhereiAm Standard widget'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function forwhereiam___standard_block_view($delta = '') {

  $path = drupal_get_path('module', 'forwhereiam___standard');

  drupal_add_css($path . '/css/forwhereiam___standard.css');
  $my_settings = array(
    'refresh_interval' => variable_get('forwhereiam___standard_refresh_interval', '60'),
    'geolocate' => variable_get('forwhereiam___standard_geolocate', TRUE),
    'signup' => variable_get('forwhereiam___standard_signup', TRUE),
    'show_map' => variable_get('forwhereiam___standard_show_map', FALSE),
    'show_sharing_buttons' => variable_get('forwhereiam___standard_show_sharing_buttons', FALSE),
    'show_ratings' => variable_get('forwhereiam___standard_show_ratings', TRUE),
    'block_id' => $delta,
  );
  drupal_add_js(array('forwhereiam___standard' => $my_settings), 'setting');
  drupal_add_js($path . '/js/forwhereiam___standard.js');

  // JQuery code to allow inclusion of social sharing buttons on
  // any announcements which have that option enabled.
  if (variable_get('forwhereiam___standard_show_sharing_buttons')) {
    drupal_add_js("var addthis_config = {data_track_clickback:true}", "inline");
    drupal_add_js("//s7.addthis.com/js/300/addthis_widget.js#pubid=" . variable_get('forwhereiam___standard_addthis_pubid') . "&domready=1&async=1", 'external');
  }

  // Needed to be able to show a map for an announcement which
  // has an associated location.
  if (variable_get('forwhereiam___standard_show_map')) {
    drupal_add_js("//maps.googleapis.com/maps/api/js?key=" . variable_get('forwhereiam___standard_map_key') . "&sensor=false", 'external');
  }

  $block = array();
  $block['subject'] = NULL;

  $widget_standard['form'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'id' => $delta,
      'class' => array(
        'fwia---standard-widget',
      ),
    ),
  );

  $search_form = drupal_get_form('_forwhereiam___standard_search_form');
  $widget_standard['form']['search_form'] = array(
    '#markup' => drupal_render($search_form) . '<br>',
  );

  if (variable_get('forwhereiam___standard_geolocate') == TRUE) {
    $widget_standard['form']['geolocate'] = array(
      '#markup' => l(
        t('guess my postcode'),
        NULL,
        array(
          'external' => TRUE,
          'fragment' => FALSE,
          'attributes' => array(
            'class' => array(
              'fwia---standard-geolocation',
            ),
          ),
        )
      ),
    );
  }

  if (variable_get('forwhereiam___standard_signup') == TRUE) {
    $widget_standard['form']['signup'] = array(
      '#markup' => l(
        t('sign up for alerts'),
        '/forwhereiam___standard/nojs',
        array(
          'external' => TRUE,
          'fragment' => FALSE,
          'attributes' => array(
            'class' => array(
              'fwia---standard-signup ctools-use-modal ctools-modal-signup-modal-style',
            ),
          ),
        )
      ),
    );

    // Load the modal library and add the modal javascript.
    ctools_include('ajax');
    ctools_include('modal');

    // Add CTools' javascript to the page.
    ctools_modal_add_js();

    // Use js to theme the signup popup.
    $signup_popup_style = array(
        'signup-modal-style' => array(
          'modalSize' => array(
            'type' => 'fixed',
            'width' => 450,
            'height' => 320,
            'addWidth' => 10,
            'addHeight' => 25,
            'contentRight' => 0,
            'contentBottom' => 0,
          ),
          'animation' => 'fadeIn',
          'closeText' => '',
        ),
    );

    // Add the settings array defined above to Drupal 7's JS settings:
    drupal_add_js($signup_popup_style, 'setting');
  }

  $widget_standard['form']['fwia_clear'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'fwia---standard-clear',
      ),
    ),
  );

  $widget_standard['form']['fwia_content_area'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'fwia---standard-content-area',
      ),
    ),
  );

  $widget_standard['form']['fwia_content_area']['fwia_search'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'fwia---standard-content fwia---standard-search',
      ),
    ),
  );

  $widget_standard['form']['fwia_content_area']['fwia_details'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'fwia---standard-content fwia---standard-details hide',
      ),
    ),
  );

  $widget_standard['form']['fwia_content_area']['fwia_search']['fwia_results'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'fwia---standard-results',
      ),
    ),
  );

  $widget_standard['form']['fwia_content_area']['fwia_search']['fwia_results']['fwia---standard-start'] = array(
    '#markup' => variable_get('forwhereiam___standard_initial_screen'),
    '#attributes' => array(
      'class' => array(
        'fwia---standard-start',
      ),
    ),
  );

  $widget_standard['form']['fwia_footer'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'fwia---standard-footer',
      ),
    ),
  );

  $widget_standard['form']['fwia_footer']['powered_by']['#markup'] = l(
    t('<span class="fwia---standard-poweredBy"><em>Powered by </em><img src="@url/images/fwia.png" alt="forWhereiAm" height="26" width="111"></span>', array('@url' => '/' . drupal_get_path('module', 'forwhereiam___standard'))),
    'https://forwhereiam.com/',
    array(
      'html' => TRUE,
    )
  );

  $widget_standard['form']['fwia_clear_end'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'fwia---standard-clear',
      ),
    ),
  );

  $block['content'] = $widget_standard;

  return $block;
}

/**
 * Implements hook_menu().
 */
function forwhereiam___standard_menu() {
  $items = array();

  $items['admin/config/services/forwhereiam___standard/settings'] = array(
    'title' => 'forWhereiAm Standard module settings',
    'description' => 'Settings for the forWhereiAm Standard module. Set client ID and secret, change refresh rate, module height, etc.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('forwhereiam___standard_admin_form'),
    'access callback' => 'user_access',
    'access arguments' => array('display forwhereiam standard widget'),
    'file' => 'includes/forwhereiam___standard.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // Ajax call handlers.
  $items['forwhereiam/findme'] = array(
    'page callback' => 'forwhereiam___standard_findme_ajax',
    'access arguments' => array('display forwhereiam standard widget'),
    'file' => 'forwhereiam___standard.json.php',
    'type' => MENU_CALLBACK,
  );

  $items['forwhereiam/search'] = array(
    'page callback' => 'forwhereiam___standard_search_ajax',
    'access arguments' => array('display forwhereiam standard widget'),
    'file' => 'forwhereiam___standard.json.php',
    'type' => MENU_CALLBACK,
  );

  $items['forwhereiam/details'] = array(
    'page callback' => 'forwhereiam___standard_details_ajax',
    'access arguments' => array('display forwhereiam standard widget'),
    'file' => 'forwhereiam___standard.json.php',
    'type' => MENU_CALLBACK,
  );

  $items['forwhereiam/rate'] = array(
    'page callback' => 'forwhereiam___standard_rate_ajax',
    'access arguments' => array('display forwhereiam standard widget'),
    'file' => 'forwhereiam___standard.json.php',
    'type' => MENU_CALLBACK,
  );

  // The second argument is a variable. It's value will be either 
  // "nojs", if the users browser does not handle JavaScript, or 
  // "ajax" if it does.
  $items['forwhereiam___standard/%ctools_js'] = array(
    'page callback' => '_forwhereiam___standard_render_signup_form',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Renders the search form on the widget.
 */
function _forwhereiam___standard_search_form() {

  $form = array();

  $form['location'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter your postcode'),
    '#size' => 8,
    '#maxlength' => 8,
    '#attributes' => array(
      'class' => array(
        'fwia---standard-location',
      ),
      'placeholder' => 'postcode',
    ),
  );

  $form['fwia---standard-ip'] = array(
    '#type' => 'hidden',
    '#value' => ip_address(),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
    '#attributes' => array(
      'class' => array(
        'fwia---standard-go',
      ),
    ),
  );

  return $form;
}

/**
 * Renders the email alerts signup form.
 */
function _forwhereiam___standard_signup_form() {

  $form = array();

  $location = '';  
  if (isset($_COOKIE['fwia---standard-location'])) {
    $location = substr($_COOKIE['fwia---standard-location'], 0, 100);
  }
  $location = filter_var($location, FILTER_SANITIZE_STRING, FILTER_FLAG_NO_ENCODE_QUOTES);
  if (empty($location)) {
    $form['overview']['#markup'] = 
                                     '<div id="fwia---standard-api-errors" class="messages error">'
                                     . 'You must provide a valid postcode before signing up to receive alerts.</div>';
  }
  else {
    $form['api_errors']['#markup'] = 
                                     '<div id="fwia---standard-api-errors"></div>';

    $form['overview']['#markup'] = 
                                     '<p>You will receive alerts concerning:&nbsp;'
                                     . '<b>' . $location . '</b>.</p>';

    $form['email'] = array(
      '#type' => 'textfield',
      '#title' => t('Email'), 
      '#attributes' => array(
        'class' => array(
          'fwia---standard-email',
        ),
        'maxlength' => 50,
        'size' => 25,
        'placeholder' => 'an@example.com',
        'autocomplete' => 'off',
      ),
    );

    $form['password'] = array(
      '#type' => 'password',
      '#title' => t('Password'),
      '#attributes' => array(
        'class' => array(
          'fwia---standard-password',
        ),
        'autocomplete' => 'off',
        'maxlength' => 30,
        'size' => 23,
      ),
      '#prefix' => '<div id="fwia---standard-password-section">'
      . '<span class="new_password">Set a new password (minimum 8 characters).</span>'
      . '<span class="existing_password">This email is already registered '
      . 'with forWhereiAm. Please provide account password.</span>',
      '#suffix' => '</div>',
    );

    $form['fwia---standard-ip'] = array(
      '#type' => 'hidden',
      '#value' => ip_address(),
    );

    $form['location'] = array(
      '#type' => 'hidden',
      '#value' => $location,
    );

    $form['new_user'] = array(
      '#type' => 'hidden',
      '#value' => 1,
      '#attributes' => array(
        'id' => 'fwia---standard-new-user',
      ),
    );

    $form['password_section_visible'] = array(
      '#type' => 'hidden',
      '#value' => 0,
      '#attributes' => array(
        'id' => 'fwia---standard-password-section-visible',
      ),
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
      '#attributes' => array(
        'class' => array(
          'fwia---standard-signup-submit',
        ),
      ),
    );

    $policies = l(t('Usage Terms and Policies'), 'https://forwhereiam.com/terms', array('attributes' => array('target'=>'_blank')));

    $form['notice']['#markup'] = 
                                     '<p><small>You are signing up with forWhereiAm, the provider '
                                     . 'of this service. You will be able to customise or switch off '
                                     . 'the alerts altogether by logging into your account at forWhereiAm. '
                                     . 'By signing up, you are accepting forWhereiAm\'s '
                                     . $policies . '.</small></p>';
  }

  return $form;
}

/**
 * Render the email signup form in modal popup.
 */
function _forwhereiam___standard_render_signup_form($ajax) {

  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');

    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Sign up for free email alerts'),
    );

    // Use ctools to generate ajax instructions for the browser to create
    // a form in a modal popup.
    $output = ctools_modal_form_wrapper('_forwhereiam___standard_signup_form', $form_state);

    // If the form has been submitted, there may be additional instructions
    // such as dismissing the modal popup.
    if (!empty($form_state['executed'])) {
      ctools_add_js('ajax-responder');

      $output = $form_state['ajax_commands'];
    }

    // Return the ajax instructions to the browser via ajax_render().
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('_forwhereiam___standard_signup_form');
  }
}   

/**
 * Sumbit handler for signup form.
 *
 */
function _forwhereiam___standard_signup_form_submit($form, &$form_state) {

  $output = array();
 
  $params = array();
  $params['email'] = $form_state['values']['email'];
  $params['password'] = ($form_state['input']['password_section_visible'] ? $form_state['values']['password'] : null);
  $params['location'] = $form_state['values']['location'];

  module_load_include('php', 'forwhereiam___standard', 'forwhereiam___standard.json'); 
  $output = forwhereiam___standard_register_ajax($params);

  // i.e. 403 = Forbidden, meaning user registered already but incorrect password
  // or password not provided at all. 
  if ($output['error'] == "403") {
    $form_state['ajax_commands'][] = ajax_command_css('#fwia---standard-password-section', array('display' => 'block'));
    $form_state['ajax_commands'][] = ajax_command_css('#fwia---standard-password-section .new_password', array('display' => 'none'));
    $form_state['ajax_commands'][] = ajax_command_css('#fwia---standard-password-section .existing_password', array('display' => 'block'));

    $form_state['ajax_commands'][] = ajax_command_invoke('#fwia---standard-password-section-visible', 'val', array(1));
    $form_state['ajax_commands'][] = ajax_command_invoke('#fwia---standard-new-user', 'val', array(0));

    if (!empty($params['password'])) {
      $form_state['ajax_commands'][] = ajax_command_replace('#modal-content div.messages.error:not(#fwia---standard-api-errors)', '');
      $form_state['ajax_commands'][] = ajax_command_replace('#fwia---standard-api-errors', '<div id="fwia---standard-api-errors" class="messages error">' . t('Invalid password. If you have forgotten your password, you can reset it via !url website', array('!url' => l(t('forWhereiAm'), "https://forwhereiam.com/forgotten-password"))) . '</div>', array('attributes' => array('target'=>'_blank')));
    }
    else {
      $form_state['ajax_commands'][] = ajax_command_replace('#modal-content div.messages.error:not(#fwia---standard-api-errors)', '');
    }
  } 
  else if ($output['error'] == "400") {
    $form_state['ajax_commands'][] = ajax_command_css('#fwia---standard-password-section', array('display' => 'block'));
    $form_state['ajax_commands'][] = ajax_command_css('#fwia---standard-password-section .new_password', array('display' => 'block'));
    $form_state['ajax_commands'][] = ajax_command_css('#fwia---standard-password-section .existing_password', array('display' => 'none'));    

    $form_state['ajax_commands'][] = ajax_command_invoke('#fwia---standard-password-section-visible', 'val', array(1));
    $form_state['ajax_commands'][] = ajax_command_invoke('#fwia---standard-new-user', 'val', array(1));

    if (!empty($params['password'])) {
      $form_state['ajax_commands'][] = ajax_command_replace('#modal-content div.messages.error:not(#fwia---standard-api-errors)', '');
      $form_state['ajax_commands'][] = ajax_command_replace('#fwia---standard-api-errors', '<div id="fwia---standard-api-errors" class="messages error">' . $output['error_description'] . '</div>');
    }
    else {
      $form_state['ajax_commands'][] = ajax_command_replace('#modal-content div.messages.error:not(#fwia---standard-api-errors)', '');
    }

  }
  else {
    // Tell the user progress of request.
    if (!empty($form_state["input"]["new_user"])) {
      $form_state['ajax_commands'][] = 
        ctools_modal_command_display(t('Almost done...'), 
          t('<br>Please check your mailbox to confirm your email address by clicking on the link provided.<br><br>'));
    } 
    else {  
      $form_state['ajax_commands'][] = 
        ctools_modal_command_display(t('Saved'), 
          t('<br>Your request for receiving alerts has been saved successfully.<br><br>'));
    }
  }
}       

function _forwhereiam___standard_signup_form_validate($form, &$form_state) {
  $location = substr($form_state['values']['location'], 0, 50);
  $location = filter_var($location, FILTER_SANITIZE_STRING, FILTER_FLAG_NO_ENCODE_QUOTES);

  $email = substr($form_state['values']['email'], 0, 50);
  $email = filter_var($email, FILTER_SANITIZE_EMAIL);

  $password = substr($form_state['values']['password'], 0, 30);
  $password = filter_var($password, FILTER_SANITIZE_STRING, FILTER_FLAG_NO_ENCODE_QUOTES);

  if (empty($location)) {
    form_set_error('location', t('A valid postcode must be set first. Go back and perform a search for your postcode before clicking the \'signup for alerts\' link.'));
  }

  else if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {
    form_set_error('email', t('Invalid email given. Please check.'));
  }
 
}



