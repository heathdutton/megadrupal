<?php

/**
 * Implements hook_menu().
 */
function commerce_stock_notifications_menu() {
  $items = array();
  $items['admin/commerce/config/stock/stock-notifications'] = array(
    'title' => 'Stock Notification',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_stock_notifications_admin_form'),
    'access arguments' => array('administer commerce_stock settings'),
    'weight' => 7,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Defines the default settings configuration for the module.
 */
function commerce_stock_notification_default_settings() {
  return array(
    'oos_message' => 'Please notify me when this product is back in stock.',
    'success_message' => 'You will be notified when this product is back in stock.',
    'duplicate_message' => 'A request for notification has already been made for this product with this email address.',
    'purge_interval' =>  30,
  );
}

/**
 * Form constructor for the Commerce stock notification settings form.
 */
function commerce_stock_notifications_admin_form($form, &$form_state) {
  $config = variable_get('commerce_stock_notifications', commerce_stock_notification_default_settings());

  $form['commerce_stock_notifications'] = array(
    '#tree' => TRUE,
    '#type' => 'fieldset',
    '#title' => t('Configure stock notification settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['commerce_stock_notifications']['oos_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Out Of Stock Message'),
    '#description' => t('Message users will see when a product is out of stock.'),
    '#required' => TRUE,
    '#token_insert' => TRUE,
    '#default_value' => t('@oos_message', array('@oos_message' => $config['oos_message'])),
  );
  $form['commerce_stock_notifications']['success_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Success Message'),
    '#description' => t('Message a user will see when they successfully submit an email address for notification.'),
    '#required' => TRUE,
    '#default_value' => t('@success_message', array('@success_message' => $config['success_message'])),
  );
  $form['commerce_stock_notifications']['duplicate_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Duplicate Message'),
    '#description' => t('Message a user will see if they submit an email address that has already been submitted for this product.'),
    '#required' => TRUE,
    '#default_value' => t('@duplicate_message', array('@duplicate_message' => $config['duplicate_message'])),
  );
  $form['commerce_stock_notifications']['purge_interval'] = array(
    '#type' => 'textfield',
    '#title' => t('Purge Interval'),
    '#description' => t('Sent notifications will be kept in the commerce_stock_notifications table for X days.'),
    '#field_suffix' => t('days'),
    '#required' => TRUE,
    '#size' => 3,
    '#default_value' => t('@purge_interval', array('@purge_interval' => $config['purge_interval'])),
    '#element_validate' => array('element_validate_integer_positive'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_form_id_alter().
 */
function commerce_stock_notifications_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state, $form_id) {
  $product = $form_state['default_product'];
  $product_wrapper = entity_metadata_wrapper('commerce_product', $product);

  // We care about stock if the stock field exists, AND stock is not being
  // disabled by the override option.
  $stock_managed = (commerce_ss_product_type_enabled($product->type) && commerce_ss_product_not_disabled_by_override($product));

  // Adds the subscribing form under at the bottom of the cart form in order to
  // let the user register to be notified.
  if ($stock_managed && $product_wrapper->commerce_stock->value() <= '0.00') {
    $form['commerce_stock_notifications'] = commerce_stock_notifications_customer_form($form_state, $form_state['line_item']->data['context']['display_path']);
    $form['commerce_stock_notifications']['#weight'] = 100;
    $form['#validate'] = array();
    $form['#submit'] = array('commerce_stock_notifications_customer_form_submit');
  }
}

/**
 * Custom form to let customers register their email address to be notified
 * when product is back in stock.
 */
function commerce_stock_notifications_customer_form(&$form_state, $context = NULL) {
  global $user;
  $config = variable_get('commerce_stock_notifications', commerce_stock_notification_default_settings());
  $form_state['notify']['config'] = $config;
  $form_state['notify']['context'] = $context;

  $form['commerce_stock_notifications'] = array(
    '#type' => 'fieldset',
    '#attributes' => array(
      'class' => array('commerce_stock_notifications_fieldset'),
    ),
  );
  $form['commerce_stock_notifications']['markup'] = array(
    '#markup' => '<p>' . t('@oos_message', array('@oos_message' => $config['oos_message'])) . '</p>',
  );
  $form['commerce_stock_notifications']['notify_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#required' => TRUE,
    '#default_value' => $user->uid ? $user->mail : '',
    '#size' => 30,
    '#element_validate' => array('commerce_stock_notifications_email_element_validate'),
  );
  $form['commerce_stock_notifications']['notify_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Notify me'),
  );

  return $form;
}

/*
 * Implement hook_form_submit().
 */
function commerce_stock_notifications_customer_form_submit($form, $form_state) {
  $notify = $form_state['notify'];
  $config = $notify['config'];
  $context = $notify['context'];
  $product_id = $form_state['input']['product_id'];
  $email = $form_state['values']['notify_email'];

  // Call a function to check if submitted email already exists for product.
  // If there is no value, submit it into DB.
  if (_commerce_stock_notifications_email_verify($product_id, $email)) {
    drupal_set_message(t('@duplicate_message', array('@duplicate_message' => $config['duplicate_message'])));
  }
  else {
    $record = array (
      'product_id' => $product_id,
      'email' => $email,
      'submit_time' => REQUEST_TIME,
      'context' => $context,
    );
    drupal_write_record('commerce_stock_notifications', $record);
    drupal_set_message(t('@success_message', array('@success_message' => $config['success_message'])));
  }
}

/*
 * Checks if email address has already been submitted for this product ID.
 */
function _commerce_stock_notifications_email_verify($product_id, $email) {

  $notify_record = db_select('commerce_stock_notifications', 'csn')
    ->fields('csn', array())
    ->condition('product_id', $product_id, '=')
    ->condition('email', $email, '=')
    ->isNull('sent_time')
    ->execute();

  // Return true if the email address for this product has already been added
  // into the system.
  return $notify_record->rowCount()
    ? TRUE
    : FALSE;
}

/*
 * Function to check email validity.
 */
function commerce_stock_notifications_email_element_validate($element, &$form_state, $form) {
  if (!valid_email_address($element['#value'])) {
    form_error($element, t('Please enter a valid email address.'));
  }
}

/*
 * Implement hook_cron().
 */
function commerce_stock_notifications_cron() {
  $queue = DrupalQueue::get('commerce_stock_notifications_cleanup');
  $nb = $queue->numberOfItems();
  if ($nb == 0) {
    $config = variable_get('commerce_stock_notifications', commerce_stock_notification_default_settings());
    $purge_interval = isset($config['purge_interval']) ? $config['purge_interval'] : 30;
    $purge_time = strtotime('now -' . $purge_interval . 'days');

    $query = db_select('commerce_stock_notifications', 'csn')
      ->fields('csn', array('sent_time', 'notification_id'))
      ->isNotNull('csn.sent_time')
      ->condition('csn.sent_time', $purge_time, '<');
    $result = $query->execute();
    foreach ($result as $record) {
      $queue->createItem($record);
    }
  }

  $queue = DrupalQueue::get('commerce_stock_notifications');
  if ($queue->numberOfItems() == 0) {
    $query = db_select('commerce_stock_notifications', 'csn');
    $query->join('field_data_commerce_stock', 'fdcs', 'csn.product_id = fdcs.entity_id');
    $query->fields('csn', array(
        'email',
        'product_id',
        'notification_id',
        'sent_time',
        'context',
        'force_send',
      ))
      ->isNull('csn.sent_time')
      ->condition(db_or()->condition('fdcs.commerce_stock_value', 0, '>')->condition('csn.force_send', 1))
      ->orderBy('submit_time', 'ASC')
      ->range(0, 500);

    $result = $query->execute();
    foreach ($result as $record) {
      $queue->createItem($record);
    }
  }
}

/*
 * Implement hook_module_implements_alter().
 */
function commerce_stock_notifications_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['commerce_stock_notifications'])) {
    $group = $implementations['commerce_stock_notifications'];
    unset($implementations['commerce_stock_notifications']);
    $implementations['commerce_stock_notifications'] = $group;
  }
}

/*
 * Implements hook_cron_queue_info().
 */
function commerce_stock_notifications_cron_queue_info() {
  $queues['commerce_stock_notifications'] = array(
    'worker callback' => 'commerce_stock_notifications_sender',
    'time' => 120,
  );
  $queues['commerce_stock_notifications_cleanup'] = array(
    'worker callback' => 'commerce_stock_notifications_purge',
    'time' => 120,
  );
  return $queues;
}

/*
 * Worker function for cron queue to send notifications.
 */
function commerce_stock_notifications_sender($data) {
  $transaction = db_transaction();

  try {
    $result = db_select('commerce_stock_notifications', 'csn')
      ->fields('csn', array('notification_id', 'sent_time'))
      ->condition('notification_id', $data->notification_id, '=')
      ->isNull('sent_time')
      ->forUpdate()
      ->execute();
    $num_of_results = $result->rowCount();

    db_update('commerce_stock_notifications')
      ->fields(array('sent_time' => REQUEST_TIME))
      ->condition('notification_id', $data->notification_id)
      ->execute();
  }
  catch (Exception $e) {
    $transaction->rollback();
    return;
  }

  if ($num_of_results != 0) {
    $full_path = url($data->context, array('absolute' => TRUE));
    $product = commerce_product_load($data->product_id);
    rules_invoke_component('rules_send_commerce_stock_notifications', $product, $data->email, $full_path);
  }
}

/*
 * Worker function for cron queue to purge sent notifications.
 */
function commerce_stock_notifications_purge($data) {
  $num_deleted = db_delete('commerce_stock_notifications')
    ->condition('notification_id', $data->notification_id)
    ->execute();
}

function commerce_stock_notifications_notify_based_on_product_id($product) {
  db_update('commerce_stock_notifications')
    ->fields(array('force_send' => 1))
    ->condition('product_id', $product->product_id)
    ->condition('sent_time', NULL)
    ->execute();
}
