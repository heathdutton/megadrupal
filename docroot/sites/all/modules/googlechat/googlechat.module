<?php
/**
 * @file
 * Module code for GoogleChat.
 */

define('GOOGLECHAT_USER_ONLINE', 1);
define('GOOGLECHAT_USER_BUSY', 2);
define('GOOGLECHAT_USER_AWAY', 3);
define('GOOGLECHAT_USER_OFFLINE', 4);
define('GOOGLECHAT_REL_ALL', 0);
define('GOOGLECHAT_REL_FF', 1);
define('GOOGLECHAT_REL_UR', 2);
define('GOOGLECHAT_REL_OG', 3);
define('GOOGLECHAT_SOUND_YES', 1);
define('GOOGLECHAT_SOUND_NO', 2);
define('GOOGLECHAT_CHATLOG_ON_THE_RECORD', 1);
define('GOOGLECHAT_CHATLOG_OFF_THE_RECORD', 0);

// Specify the values for the recd column in googlechat_msgs
define('GOOGLECHAT_RECD_NO', 0);
define('GOOGLECHAT_RECD_YES', 1);
define('GOOGLECHAT_RECD_PM', 2);

/**
 * Implements hook_permission().
 */
function googlechat_permission() {
  return array(
    'administer googlechat' => array(
      'title' => t('Administer googlechat module'),
      'description' => t('Perform administration tasks for googlechat module.'),
    ),
    'access googlechat' => array(
      'title' => t('Access googlechat module'),
      'description' => t('Perform Access tasks for googlechat module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function googlechat_menu() {
  $items['admin/config/googlechat'] = array(
    'title' => 'GoogleChat',
    'description' => 'Administer GoogleChat',
    'position' => 'left',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/googlechat/configuration'] = array(
    'title' => 'Configure',
    'description' => 'Configure GoogleChat Module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('googlechat_settings_form'),
    'access arguments' => array('administer googlechat'),
    'file' => 'googlechat.admin.inc',
  );
  $items['googlechat/startchatsession'] = array(
    'page callback' => 'googlechat_startchatsession',
    'access arguments' => array('access googlechat'),
    'type' => MENU_CALLBACK,
  );
  $items['googlechat/chatheartbeat'] = array(
    'page callback' => 'googlechat_chatheartbeat',
    'access arguments' => array('access googlechat'),
    'type' => MENU_CALLBACK,
  );
  $items['googlechat/closechat'] = array(
    'page callback' => 'googlechat_closechat',
    'access arguments' => array('access googlechat'),
    'type' => MENU_CALLBACK,
  );
  $items['googlechat/sendchat'] = array(
    'page callback' => 'googlechat_sendchat',
    'access arguments' => array('access googlechat'),
    'type' => MENU_CALLBACK,
  );
  $items['googlechat/chatbuddylist'] = array(
    'page callback' => 'googlechat_chatbuddylist',
    'access arguments' => array('access googlechat'),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/googlechathistory'] = array(
    'title' => 'Google Chat History',
    'page callback' => 'googlechat_history',
    'page arguments' => array(1),
    'access callback' => 'googlechat_access',
    'type' => MENU_LOCAL_TASK,
  );
  $items['googlechat/status'] = array(
    'page callback' => 'googlechat_status',
    'access arguments' => array('access googlechat'),
    'type' => MENU_CALLBACK,
  );
  $items['googlechat/soundstatus'] = array(
    'page callback' => 'googlechat_soundstatus',
    'access arguments' => array('access googlechat'),
    'type' => MENU_CALLBACK,
  );
  $items['googlechat/ur-autocomplete'] = array(
    'page callback' => 'googlechat_ur_autocomplete',
    'access arguments' => array('access googlechat'),
    'type' => MENU_CALLBACK,
  );
  $items['googlechat/chatlog'] = array(
    'page callback' => 'googlechat_chatlog',
    'access arguments' => array('access googlechat'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements of hook_init().
 */
function googlechat_init() {
  if (googlechat_verify_access()) {
    global $user;
    $account = user_load($user->uid);
    $user_name = check_plain($account->name);
    $result = db_query('SELECT status,sound_status FROM {googlechat_users} WHERE uid = :uid', array(':uid' => $user->uid))->fetchObject();
    if (!isset($result->status)) {
      $status = GOOGLECHAT_USER_ONLINE;
      $sound_status = GOOGLECHAT_SOUND_YES;
      $current_user = (object) array(
        'uid' => $user->uid,
        'session' => $user->sid,
        'name' => $user_name,
        'status' => $status,
        'sound_status' => $sound_status,
        'timestamp' => time(),
      );
      drupal_write_record('googlechat_users', $current_user);
    }
    else {
      $status = $result->status;
      $sound_status = $result->sound_status;
    }
    drupal_add_js(drupal_get_path('module', 'googlechat') . '/js/google_chat.js', array('type' => 'file', 'scope' => 'footer'));
    $theme = variable_get('googlechat_theme', 'base');
    $googlechat_status = array(
      'online' => GOOGLECHAT_USER_ONLINE,
      'busy' => GOOGLECHAT_USER_BUSY,
      'away' => GOOGLECHAT_USER_AWAY,
      'offline' => GOOGLECHAT_USER_OFFLINE,
    );
    $googlechatlog_status = array(
      'on' => GOOGLECHAT_CHATLOG_ON_THE_RECORD,
      'off' => GOOGLECHAT_CHATLOG_OFF_THE_RECORD,
    );
    $my_settings = array(
      'uid' => $user->uid,
      'googlechat_enable_emoticons' => variable_get('googlechat_enable_emoticons', 1),
      'chatHeartBeatUrl' => url('googlechat/chatheartbeat', array('absolute' => TRUE)),
      'closeChatUrl' => url('googlechat/closechat', array('absolute' => TRUE)),
      'sendChatUrl' => url('googlechat/sendchat', array('absolute' => TRUE)),
      'startChatSessionUrl' => url('googlechat/startchatsession', array('absolute' => TRUE)),
      'statusUrl' => url('googlechat/status', array('absolute' => TRUE)),
      'chatBuddyList' => url('googlechat/chatbuddylist', array('absolute' => TRUE)),
      'emoticonsURL' => base_path() . drupal_get_path('module', 'googlechat') . '/images/cleardot.gif',
      'userStatus' => $status,
      'sound' => base_path() . drupal_get_path('module', 'googlechat') . '/sound/googlechatbeep.swf',
      'notificationSound' => variable_get('googlechat_notification_sound', 1),
      'userNotificationSound' => $sound_status,
      'changeSoundStatusURL' => url('googlechat/soundstatus', array('absolute' => TRUE)),
      'googlechatStatus' => $googlechat_status,
      'googlechatlog_status' => $googlechatlog_status,
      'googlechatLog' => url('googlechat/chatlog', array('absolute' => TRUE)),
      'googlechatBlockUser' => url('googlechat/blockuser', array('absolute' => TRUE)),
    );
    drupal_add_js(array('googlechat' => $my_settings), "setting");
  }
}

/**
 * Access callback to view google chat history.
 */
function googlechat_access() {
  global $user;
  $arg0 = arg(0);
  $arg1 = arg(1);
  if (isset($arg0) && isset($arg1) && $arg0 == 'user' && $arg1 == $user->uid && user_access('access googlechat')) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}
/**
 * Implements of hook_cron().
 */
function googlechat_cron() {
  if (module_exists('privatemsg')) {
    module_load_include('pages.inc', 'privatemsg');
    $query = 'SELECT count(*) AS total_rows,
              gm.from_user ,gm.to_user, gu.uid AS to_user_id, gu1.uid AS from_user_id, group_concat(gm.message) AS message
              FROM
              {googlechat_msg} gm INNER JOIN {googlechat_users} gu
              ON
              gm.to_user = gu.name
              LEFT JOIN
              {googlechat_users} gu1 ON gm.from_user = gu1.name
              WHERE recd = 0 GROUP BY to_user';
    $result = db_query($query, array(':recd' => 0));
    while ($chat = $result->fetchAssoc()) {
      $recipients = array(user_load($chat['to_user_id']));
      $subject = 'Offline Chat between ' . $chat['from_user'] . ' and ' . $chat['to_user'] . ' (' . $chat['total_rows'] . 'lines)';
      $message = implode("\n", explode(',', $chat['message']));
      $body = str_replace('&quot;', '\'', str_replace('&gt;', '>', str_replace('&lt;', '<', $message)));
      $options = array(
        'author' => user_load($chat['from_user_id']),
        'format' => 'full_html',
      );
      privatemsg_new_thread($recipients, $subject, $body, $options);

      // Update the googlechat_msgs table to show these messages have been sent to PM or received
      $recd = variable_get('googlechat_privatemsg_plus_chat', TRUE) ? GOOGLECHAT_RECD_PM : GOOGLECHAT_RECD_YES;
      db_update('googlechat_msg')
        ->fields(array(
          'recd' => $recd,
        ))
        ->condition('from_user', $chat['from_user'])
        ->condition('to_user', $chat['to_user'])
        ->condition('recd', GOOGLECHAT_RECD_NO)
        ->execute();

    }
  }
}
/**
 * Function to update googlechat user status.
 */
function googlechat_status() {
  global $user;
  $status = check_plain($_POST['status']);
  db_update('googlechat_users')
     ->fields(array(
       'status' => $status,
     ))
     ->condition('uid', $user->uid)
     ->execute();
  echo $status;
  exit(0);
}
/**
 * Function to start chat session.
 */
function googlechat_startchatsession() {
  $items = '';
  if (!empty($_SESSION['openChatBoxes'])) {
    foreach ($_SESSION['openChatBoxes'] as $chatbox => $void) {
      $items .= googlechat_chatBoxSession($chatbox);
    }
  }

  if ($items != '') {
    $items = drupal_substr($items, 0, -1);
  }
  $username = $_SESSION['username'];
  if (!isset($_SESSION['chatlog_users'])) {
    $_SESSION['chatlog_users'] = array();
  }
  $chatlog_users = drupal_json_encode($_SESSION['chatlog_users']);
  header('Content-type: application/json');
  $text = <<<EOD
  {
  "username": "{$username}",
  "chatlogUsers": $chatlog_users,
  "items": [$items]
  }
EOD;
  echo $text;
  exit(0);
}

/**
 * Function to execute chat heart beat.
 */
function googlechat_chatheartbeat() {
  global $user;
  $sql = 'SELECT * FROM {googlechat_msg} WHERE `to_user` = :username AND recd <> :recd ORDER BY id ASC';
  $result = db_query($sql, array(':username' => $_SESSION['username'], ':recd' => GOOGLECHAT_RECD_YES));

  $items = '';

  while ($chat = $result->fetchAssoc()) {
    if (!isset($_SESSION['openChatBoxes'][$chat['from_user']]) && isset($_SESSION['chatHistory'][$chat['from_user']])) {
      $items = $_SESSION['chatHistory'][$chat['from_user']];
    }

    $chat['message'] = googlechat_sanitize($chat['message']);
    $account = user_load_by_name($chat['from_user']);
    $picture = googlechat_user_pic_url($account);
    $chat_from_user_realname = googlechat_format_username($chat['from_user']);
    $items .= <<<EOD
{
"s": "0",
"f": "{$chat['from_user']}",
"m": "{$chat['message']}",
"p": "{$picture}",
"r": "{$chat_from_user_realname}"
},
EOD;

    if (!isset($_SESSION['chatHistory'][$chat['from_user']])) {
      $_SESSION['chatHistory'][$chat['from_user']] = '';
    }

    $_SESSION['chatHistory'][$chat['from_user']] .= <<<EOD
{
"s": "0",
"f": "{$chat['from_user']}",
"m": "{$chat['message']}",
"p": "{$picture}",
"r": "{$chat_from_user_realname}"
},
EOD;

    unset($_SESSION['tsChatBoxes'][$chat['from_user']]);
    $_SESSION['openChatBoxes'][$chat['from_user']] = $chat['sent'];
  }

  if (!empty($_SESSION['openChatBoxes'])) {
    foreach ($_SESSION['openChatBoxes'] as $chatbox => $time) {
      if (!isset($_SESSION['tsChatBoxes'][$chatbox])) {
        $now = time() - $time;
        $time = date('g:iA M dS', $time);
        $message = "Sent at $time";
        if ($now > 180 && !empty($chatbox)) {
          $chat_from_user_realname = googlechat_format_username($chatbox);
          $items .= <<<EOD
{
"s": "2",
"f": "$chatbox",
"m": "{$message}",
"r": "{$chat_from_user_realname}"
},
EOD;

          if (!isset($_SESSION['chatHistory'][$chatbox])) {
            $_SESSION['chatHistory'][$chatbox] = '';
          }

          $_SESSION['chatHistory'][$chatbox] .= <<<EOD
{
"s": "2",
"f": "$chatbox",
"m": "{$message}",
"r": "{$chat_from_user_realname}"
},
EOD;
          $_SESSION['tsChatBoxes'][$chatbox] = 1;
        }
      }
    }
  }

  db_update('googlechat_msg')
    ->fields(array(
      'recd' => GOOGLECHAT_RECD_YES,
    ))
    ->condition('to_user', $_SESSION['username'])
    ->condition('recd', GOOGLECHAT_RECD_YES, '<>')
    ->execute();

  if ($items != '') {
    $items = drupal_substr($items, 0, -1);
  }
  header('Content-type: application/json');
  $openchatbox_status = '';
  $buddy_arr = $buddy_status_arr = array();

  $buddylist = _googlechat_buddylist($user->uid);
  $buddylist = googlechat_chatbuddylistonline($buddylist);
  $buddy_list_count = count($buddylist);
  if (isset($_SESSION['openChatBoxes']) && !empty($_SESSION['openChatBoxes'])) {
    foreach ($buddylist as $buddy) {
      $buddy_arr[$buddy->name] = $buddy->status_indicator;
    }
    foreach ($_SESSION['openChatBoxes'] as $buddy_name => $buddy_session) {
      if (!empty($buddy_name)) {
        if (array_key_exists($buddy_name, $buddy_arr)) {
          $buddy_status_arr[$buddy_name]['status'] = $buddy_arr[$buddy_name];
        }
        else {
          $buddy_status_arr[$buddy_name]['status'] = GOOGLECHAT_USER_OFFLINE;
        }
        if (module_exists('realname')) {
          $buddy_status_arr[$buddy_name]['realname'] = googlechat_format_username($buddy_name, FALSE);
        }
        else {
          $buddy_status_arr[$buddy_name]['realname'] = '';
        }
      }
    }
  }
  $openchatbox_status = drupal_json_encode($buddy_status_arr);
  $buddylist = drupal_json_encode(googlechat_chatbuddylist(FALSE));

  $string = <<<EOD
{
    "openChatBoxStatus": $openchatbox_status,
    "buddylist" : $buddylist,
    "buddyListCount" : $buddy_list_count,
    "items": [$items]
}
EOD;
  echo $string;
  exit(0);
}

/**
 * Function to close chat execute.
 */
function googlechat_closechat() {

  unset($_SESSION['openChatBoxes'][$_POST['chatbox']]);
  echo "1";
  exit(0);
}
/**
 * Function to format username for googlechat.
 */
function googlechat_format_username($username, $explode = TRUE) {
  if (module_exists('realname')) {
    $realname = realname_load(user_load_by_name($username));
    if ($explode && !empty($realname)) {
      $realname = explode(' ', $realname);
      $username = $realname[0];
    }
    elseif (!$explode && !empty($realname)) {
      $username = $realname;
    }
  }
  return $username;
}
/**
 * Function to send chat message to user.
 */
function googlechat_sendchat() {
  $from = $_SESSION['username'];
  $to = $_POST['to'];
  $message = $_POST['message'];
  $message = strip_tags(str_replace('&quot;', '\'', str_replace('&gt;', '>', str_replace('&lt;', '<', $message))), '<img>');
  $message = htmlspecialchars($message);
  $_SESSION['openChatBoxes'][$_POST['to']] = time();

  $messagesan = googlechat_sanitize($message);

  if (!isset($_SESSION['chatHistory'][$_POST['to']])) {
    $_SESSION['chatHistory'][$_POST['to']] = '';
  }
  if (!isset($_SESSION['chatlog_users'][$to])) {
    $_SESSION['chatlog_users'][$to] = GOOGLECHAT_CHATLOG_ON_THE_RECORD;
  }
  $account = user_load_by_name($from);
  $picture = googlechat_user_pic_url($account);
  $from_user_realname = googlechat_format_username($from);
  $items = <<<EOD
{
"s": "1",
"f": "{$to}",
"m": "{$messagesan}",
"p": "{$picture}",
"r": "{$from_user_realname}"
},
EOD;
  $_SESSION['chatHistory'][$_POST['to']] .= $items;
  unset($_SESSION['tsChatBoxes'][$_POST['to']]);
  db_insert('googlechat_msg')
    ->fields(array(
      '`from_user`' => check_plain($from),
      '`to_user`' => check_plain($to),
      'message' => $message,
      'sent' => time(),
      'log' => $_SESSION['chatlog_users'][$to],
    ))
    ->execute();

  $items = <<<EOD
{
"s": "1",
"f": "{$from}",
"m": "{$messagesan}",
"p": "{$picture}",
"r": "{$from_user_realname}"
},
EOD;
  if ($items != '') {
    $items = drupal_substr($items, 0, -1);
  }
  header('Content-type: application/json');
  $string = <<<EOD
{
		"items": [$items]
}
EOD;
  echo $string;
  exit(0);
}

/**
 * Function to return chectbox session.
 *
 * @param array $chatbox
 *   containing current chat box data of user.
 *
 * @return array
 *   return chat history of user from session.
 */
function googlechat_chatBoxSession($chatbox) {

  $items = '';
  if (isset($_SESSION['chatHistory'][$chatbox])) {
    $items = $_SESSION['chatHistory'][$chatbox];
  }

  return $items;
}

/**
 * Function sanitize google chat.
 */
function googlechat_sanitize($text) {
  $text = str_replace("\n\r", "\n", $text);
  $text = str_replace("\r\n", "\n", $text);
  $text = str_replace("\n", "<br />", $text);
  return $text;
}

/**
 * Implements hook_theme().
 */
function googlechat_theme($existing, $type, $theme, $path) {
  return array(
    'googlechat' => array(
      'template' => 'googlechat',
    ),
    'googlechat_user_list' => array(
      'template' => 'googlechat-user-list',
      'variables' => array('users' => NULL, 'title' => NULL),
      'path' => drupal_get_path('module', 'googlechat') . '/',
    ),
  );
}

/**
 * Function to verify the access for google chat.
 * @global type $user
 *
 *
 * @return bool
 *   whether user has access to googlechat or not
 */
function googlechat_verify_access() {
  global $user;
  return (user_access('access googlechat') && ($user->uid > 0) && variable_get('googlechat_chat_status', 1) == 1);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function googlechat_preprocess_googlechat(&$variables) {
  global $user, $base_url;
  if (googlechat_verify_access()) {
    $theme = variable_get('googlechat_theme', 'base');
    drupal_add_css(drupal_get_path('module', 'googlechat') . '/css/google_chat.css');
    drupal_add_css(drupal_get_path('module', 'googlechat') . '/themes/' . $theme . '/' . $theme . '.css');
    $variables['googlechatpanels'] = googlechat_chatbuddylist(FALSE);
    $variables['googlechatpanelname'] = $user->name;
    $variables['googlechatpanelimage'] = googlechat_user_pic_url($user);
    $result = db_query('SELECT status,sound_status FROM {googlechat_users} WHERE uid = :uid', array(':uid' => $user->uid))->fetchObject();
    $variables['googlechatpanelstatus'] = isset($result->status) ? $result->status : GOOGLECHAT_USER_ONLINE;
    $variables['googlechatpanelsoundstatus'] = isset($result->sound_status) ? $result->sound_status : GOOGLECHAT_SOUND_YES;
    $buddylist = _googlechat_buddylist($user->uid);
    $onlinebuddy = googlechat_chatbuddylistonline($buddylist);
    $variables['googlechatpanelbuddycount'] = count($onlinebuddy);
  }
}
/**
 * Function to return user picture if available else return default avatar.
 */
function googlechat_user_pic_url($account) {
  global $base_url;
  $source = strip_tags(theme('user_picture', array('account' => $account)), "<img>");
  $source = explode('src="', $source);
  if (isset($source[1])) {
    $source = explode('"', $source[1]);
  }
  else {
    $source = explode("src='", $source[0]);
    if (isset($source[1])) {
      $source = explode("'", $source[1]);
    }
    else {
      $source[0] = $base_url . '/' . drupal_get_path('module', 'googlechat') . '/images/default_avatar.png';
    }
  }
  return $source[0];
}
/**
 * Implements hook_page_alter().
 */
function googlechat_page_alter(&$page) {
  global $user;

  if (user_access('access googlechat') && googlechat_verify_access()) {
    $page['page_bottom']['devel'] = array(
      '#type' => 'markup',
      '#markup' => '<div style="clear:both;">' . theme('googlechat') . '</div>',
    );
  }
}
/**
 * Function that return buddy list for google chat.
 */
function googlechat_chatbuddylist($ajax = TRUE) {
  global $user;
  $buddylist = _googlechat_buddylist($user->uid);
  $onlinebuddy = googlechat_chatbuddylistonline($buddylist);
  if (!empty($onlinebuddy)) {
    $output = theme('googlechat_user_list', array('users' => $onlinebuddy));
  }
  else {
    $googlechat_rel = variable_get('googlechat_rel', GOOGLECHAT_REL_ALL);
    if ($googlechat_rel == GOOGLECHAT_REL_FF) {
      $text = t('No friend online');
    }
    else {
      $text = t('No users online');
    }
    $output = $text;
  }
  if ($ajax == TRUE) {
    print $output;
    exit(0);
  }
  else {
    return $output;
  }
}
/**
 * Function to get buddylist by relationship.
 *
 * @param int $uid
 *   user ID.
 */
function _googlechat_buddylist($uid) {
  $users = array();
  $googlechat_rel = variable_get('googlechat_rel', GOOGLECHAT_REL_ALL);
  if ($googlechat_rel == GOOGLECHAT_REL_FF) {
    $result = db_query("SELECT * FROM {flag_friend} WHERE uid = :uid OR friend_uid = :uid", array(':uid' => $uid, ':friend_uid' => $uid));
    foreach ($result as $friend) {
      $uid == $friend->uid ? $users[] = $friend->friend_uid : $users[] = $friend->uid;
    }
  }
  elseif ($googlechat_rel == GOOGLECHAT_REL_UR) {
    $tags = variable_get('googlechat_ur_name', 'friend');
    $googlechat_ur = drupal_explode_tags($tags);
    $params = array('name' => $googlechat_ur, 'user' => $uid, 'approved' => 1);
    $relationships = user_relationships_load($params, array(), TRUE);
    foreach ($relationships as $rid => $relationship) {
      $uid == $relationship->requester_id ? $users[] = $relationship->requestee_id : $users[] = $relationship->requester_id;
    }
  }
  elseif ($googlechat_rel == GOOGLECHAT_REL_ALL) {
    $results = db_query('SELECT uid FROM {users} WHERE status = :status', array(':status' => 1));
    foreach ($results as $value) {
      $users[] = $value->uid;
    }
  }
  return $users;
}
/**
 * Function to get online list of buddies.
 */
function googlechat_chatbuddylistonline($buddylist) {
  global $user;
  if (session_id() == '') {
    session_start();
  }
  else {
    $_SESSION['username'] = $user->name; /* Must be already set.*/
  }
  $items = array();
  if (empty($buddylist)) {
    return $items;
  }
  // Count users active within the defined period.
  $interval = REQUEST_TIME - variable_get('googlechat_seconds_online', 900);
  // Perform database queries to gather online user lists.
  // We use s.timestamp rather than u.access because it is much faster.
  $count_query = "SELECT COUNT(DISTINCT s.uid) FROM {sessions} s WHERE s.timestamp >= :timestamp AND s.uid > 0 AND s.uid IN (:buddylist)";
  $authenticated_count = db_query($count_query, array(':timestamp' => $interval, ':buddylist' => $buddylist))->fetchField();
  // Display a list of currently online users.
  $max_users = variable_get('googlechat_max_list_count', 10);
  if ($authenticated_count > 0) {
    if (module_exists('realname')) {
      $field = ',r.realname as real_name';
      $join = 'INNER JOIN {realname} r ON r.uid = u.uid';
    }
    else {
      $field = '';
      $join = '';
    }
    $query_range = 'SELECT u.uid, u.name, MAX(s.timestamp) AS max_timestamp, gu.status AS status_indicator ' . $field . ' FROM {users} u INNER JOIN {sessions} s ON u.uid = s.uid INNER JOIN {googlechat_users} gu ON gu.uid = u.uid ' . $join . ' WHERE s.timestamp >= :interval AND s.uid > 0 AND u.uid <> :uid AND u.uid IN (:buddylist) AND gu.status <> :offline GROUP BY u.uid, u.name ORDER BY status_indicator ASC, u.name ASC, max_timestamp DESC';
    if ($max_users == 'unlimited') {
      $items = db_query($query_range, array(
        ':interval' => $interval,
        ':uid' => $user->uid,
        ':buddylist' => $buddylist,
        ':offline' => GOOGLECHAT_USER_OFFLINE,
        ))->fetchAll();
    }
    else {
      $items = db_query_range($query_range, 0, $max_users, array(
        ':interval' => $interval,
        ':uid' => $user->uid,
        ':buddylist' => $buddylist,
        ':offline' => GOOGLECHAT_USER_OFFLINE,
        ))->fetchAll();
    }
  }

  return $items;
}
/**
 * Function to implement user chat history.
 */
function googlechat_history() {
  global $user;
  $username = $user->name;
  $rows = array();
  $header = array(
    t('To User'),
    t('Message'),
    array('data' => t('Sent'), 'field' => 'sent', 'sort' => 'desc'));
  $sql_query = db_select('googlechat_msg', 's');
  $sql_query->fields('s', array('to_user', 'message', 'sent'));
  $sql_query->condition('from_user', $username, '=');
  $sql_query->condition('log', GOOGLECHAT_CHATLOG_ON_THE_RECORD, '=');
  $sql_query = $sql_query->extend('TableSort')->extend('PagerDefault')->limit(10);
  $result = $sql_query->orderByHeader($header)->execute();

  foreach ($result as $res) {
    $message = str_replace('&quot;', '\'', str_replace('&gt;', '>', str_replace('&lt;', '<', $res->message)));
    $rows[] = array($res->to_user, $message, date('Y-m-d H:i:s', $res->sent));
  }
  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => 'my-module-table')));
  $output .= theme('pager');

  return $output;
}
/**
 * Function to set sound status by user.
 */
function googlechat_soundstatus() {
  global $user;
  $sound_status = check_plain($_POST['sound_status']);
  db_update('googlechat_users')
     ->fields(array(
       'sound_status' => $sound_status,
     ))
     ->condition('uid', $user->uid)
     ->execute();
  echo $sound_status;
  exit(0);
}
/**
 * Implements autocomplete feature for UR Integration.
 */
function googlechat_ur_autocomplete($string) {
  $array = drupal_explode_tags($string);
  // Fetch last value.
  $last_string = drupal_strtolower(array_pop($array));
  $matches = array();
  $query = db_select('user_relationship_types', 'u');
  // Select rows that match the string.
  $return = $query
    ->fields('u', array('name'))
    ->condition('u.name', '%' . db_like($last_string) . '%', 'LIKE')
    ->range(0, 10)
    ->execute();
  $prefix = count($array) ? drupal_implode_tags($array) . ', ' : '';
  // Add matches to $matches.
  foreach ($return as $row) {
    if (!in_array($row->name, $array)) {
      $matches[$prefix . $row->name] = check_plain($row->name);
    }
  }

  // Return for JS.
  drupal_json_output($matches);
}
/**
 * Implements hook_user_update().
 */
function googlechat_user_update(&$edit, $account, $category) {
  $uid = $account->uid;
  $name = db_query('SELECT name FROM {googlechat_users} WHERE uid = :uid', array(':uid' => $uid))->fetchField();
  if ($name && $name != $account->name) {
    db_update('googlechat_users')
     ->fields(array(
       'name' => $account->name,
     ))
     ->condition('uid', $uid)
     ->execute();
  }
}
/**
 * Implements hook_user_logout().
 */
function googlechat_user_logout($account) {
  setcookie('googlechat_panel', '', 1, '/');
}

function googlechat_chatlog() {
  $chatlog = $_POST['chatlog'];
  $to = $_POST['to'];
  $_SESSION['chatlog_users'][$to] = $chatlog;
  if ($chatlog == GOOGLECHAT_CHATLOG_ON_THE_RECORD) {
    $msg = 'This chat is no longer off the record';
    $log_value = 0;
    $text = t('Go Off the Records');
  }
  elseif ($chatlog == GOOGLECHAT_CHATLOG_OFF_THE_RECORD) {
    $msg = 'You are now off the record <a href=\"http://drupal.org/node/1964152#chatlog\" target=\"_blank\">Learn More</a>';
    $log_value = 1;
    $text = t("Go On the Records");
  }
  $items = <<<EOD
{
"m": "{$msg}",
"v": "{$log_value}",
"t": "{$text}"
},
EOD;
  if ($items != '') {
    $items = drupal_substr($items, 0, -1);
  }
  header('Content-type: application/json');
  $string = <<<EOD
{
		"items": [$items]
}
EOD;
  echo $string;
  exit(0);
}
