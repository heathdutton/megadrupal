<?php
/**
 * @file
 * Enable to satisfy dependencies.
 */


use \Defuse\Crypto\Crypto;
use \Defuse\Crypto\Exception as Ex;

if (!function_exists('aes_encrypt')) {
  /**
   * Encrypt a message using authenticated AES-128 CBC.
   *
   * Throws exceptions when errors are encountered.
   *
   * @param string $message
   *   The message to encrypt.
   * @param bool $base64encode
   *   If TRUE base64_encodes the ciphertext. Default TRUE.
   * @param null $custom_key
   *   A 128-bit key. If not provided, the key from 'aes_key_path' will be used.
   * @param null $custom_cipher
   *   Settings this will throw an exception.
   * @param null $ignored_custom_iv
   *   This parameter is ignored.
   * @param null $custom_implementation
   *   Settings this will throw an exception.
   *
   * @return string
   *   The ciphertext.
   *
   * @throws \Defuse\Crypto\Exception\CannotPerformOperation
   *   Thrown when an essential operation cannot be performed (eg key too small).
   */
  function aes_encrypt($message, $base64encode = TRUE, $custom_key = NULL, $custom_cipher = NULL, $ignored_custom_iv = NULL, $custom_implementation = NULL) {
    // Load the library before throwing exceptions. This ensures defuse's
    // exception handler can strip the key when Ex\CannotPerformOpertion is
    // thrown.
    $library = libraries_load('php-encryption');

    if (empty($library['loaded'])) {
      // Throw a filtered exception.
      throw new Ex\CannotPerformOperation('PHP-encryption library is not available.');
    }

    if ($custom_cipher || $custom_implementation) {
      // Throw a filtered exception.
      throw new Ex\CannotPerformOperation('Unsupported options custom_cipher or custom_implementations.');
    }

    $key = $custom_key ? $custom_key : aes_get_key();

    $ciphertext = Crypto::encrypt($message, $key);

    if ($base64encode) {
      return base64_encode($ciphertext);
    }
    return $ciphertext;
  }
}

if (!function_exists('aes_decrypt')) {
  /**
   * Decrypts an untampered ciphertext.
   *
   * @param string $ciphertext
   *   Ciphertext to decrypt.
   * @param bool $base64encoded
   *   If TRUE, ciphertext is base64_decoded before decryption. Default TRUE.
   * @param null $custom_key
   *   The 128-bit key used to encrypt the message. If not provided the key
   *   from 'aes_key_path' will be used.
   * @param null $custom_cipher
   *   Settings this will throw an exception.
   * @param null $ignored_custom_iv
   *   Ignored.
   * @param null $custom_implementation
   *   Settings this will throw an exception.
   *
   * @return string
   *   The decrypted message.
   *
   * @throws \Defuse\Crypto\Exception\CannotPerformOperation
   *   Thrown when an essential operation cannot be performed.
   * @throws \Defuse\Crypto\Exception\InvalidCiphertext
   *   The ciphertext is invalid (MAC doesn't validate or too small).
   */
  function aes_decrypt($ciphertext, $base64encoded = TRUE, $custom_key = NULL, $custom_cipher = NULL, $ignored_custom_iv = NULL, $custom_implementation = NULL) {
    // Load the library before throwing exceptions. This ensures defuse's
    // exception handler can strip the key when Ex\CannotPerformOpertion is
    // thrown.
    $library = libraries_load('php-encryption');

    if (empty($library['loaded'])) {
      // Throw a filtered exception.
      throw new Ex\CannotPerformOperation('PHP-encryption library is not available.');
    }

    if ($custom_cipher || $custom_implementation) {
      // Throw a filtered exception.
      throw new Ex\CannotPerformOperation('Unsupported options custom_cipher or custom_implementations.');
    }

    if ($base64encoded) {
      $ciphertext = base64_decode($ciphertext);
    }

    $key = $custom_key ? $custom_key : aes_get_key();

    return Crypto::decrypt($ciphertext, $key);
  }
}

if (!function_exists('aes_get_key')) {
  /**
   * Obtain the key from the keyfile.
   *
   * @return string
   */
  function aes_get_key() {
    if ($path = variable_get('real_aes_key_file', '')) {
      return file_get_contents($path);
    }
  }
}
