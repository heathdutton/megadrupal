<?php

/**
 * @file
 * Rijksoverheid Cookie Opt-in main module functions.
 */

define('RO_COOKIE_OPT_IN_LOG_URL', 'ro-cookie-opt-in/cookie.png');

/**
 * Implements hook_permission().
 */
function ro_cookie_opt_in_permission() {
  return array(
    'administer ro cookie opt-in settings' => array(
      'title' => t('Administer Rijksoverheid Cookie Opt-in settings'),
      'description' => t('Administer the settings of the Rijksoverheid Cookie Opt-in module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function ro_cookie_opt_in_menu() {
  $includes_path = drupal_get_path('module', 'ro_cookie_opt_in') . '/includes';

  $items['admin/config/system/ro-cookie-opt-in'] = array(
    'title' => 'Rijksoverheid Cookie Opt-in settings',
    'description' => 'Manage the Rijksoverheid Cookie Opt-in settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ro_cookie_opt_in_settings_form'),
    'access arguments' => array('administer ro cookie opt-in settings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ro_cookie_opt_in.admin.inc',
    'file path' => $includes_path,
  );

  $items[RO_COOKIE_OPT_IN_LOG_URL] = array(
    'title' => 'Rijksoverheid Cookie Opt-in log',
    'page callback' => 'ro_cookie_opt_in_log',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'ro_cookie_opt_in.log.inc',
    'file path' => $includes_path,
  );

  return $items;
}

/**
 * Implements hook_libraries_info().
 */
function ro_cookie_opt_in_libraries_info() {
  $libraries['rijksoverheid-cookie-opt-in'] = array(
    'name' => 'Rijksoverheid Cookie Opt-in',
    'vendor url' => 'http://www.rijksoverheid.nl/cookies/rijksoverheid-cookie-opt-in',
    'download url' => 'http://www.rijksoverheid.nl/bestanden/documenten-en-publicaties/brochures/2012/11/22/download-rijksoverheid-cookie-opt-in-zip/rijksoverheid-cookie-opt-in-v1-1.zip',
    'version arguments' => array(
      'file' => 'releasenotes.txt',
      // 1.x: Version 1.1
      'pattern' => '/v(\d+.\d+)/',
      'lines' => 6,
    ),
    'files' => array(
      'js' => array(
        'behaviour/cookies.min.js',
      ),
      'css' => array(
        'presentation/screen-cookies.min.css',
      ),
    ),
    'variants' => array(
      'no_css' => array(
        'files' => array(
          'js' => array(
            'behaviour/cookies.min.js',
          ),
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_page_build().
 */
function ro_cookie_opt_in_page_build() {
  // Check if the module is enabled.
  if (variable_get('ro_cookie_opt_in_enabled', FALSE)) {
    global $language;

    $variant = NULL;
    // Check if the css of the Rijkshuisstijl has to be included.
    if (!variable_get('ro_cookie_opt_in_add_css', TRUE)) {
      // Use the variant without css.
      $variant = 'no_css';
    }
    $default_format = NULL;
    $formats = filter_formats();
    if (in_array('filtered_html', array_keys($formats))) {
      $default_format = 'filtered_html';
    }

    $library = libraries_load('rijksoverheid-cookie-opt-in', $variant);
    // Check if the library is loaded properly.
    if (!empty($library) && $library['loaded'] !== FALSE) {
      // Add the module JS.
      drupal_add_js(drupal_get_path('module', 'ro_cookie_opt_in') . '/js/ro_cookie_opt_in.js', 'file');
      if (variable_get('ro_cookie_opt_in_add_css', TRUE) && variable_get('ro_cookie_opt_in_add_resp_fix', FALSE)) {
        // Add the responsive cookie pop-up fix.
        drupal_add_css(drupal_get_path('module', 'ro_cookie_opt_in') . '/css/ro_cookie_opt_in_resp_fix.css');
      }
      // Construct the settings to use in the cookiebar init.
      $settings['ro_cookie_opt_in'] = array(
        'language' => drupal_strtoupper($language->language),
        'cookieurl' => RO_COOKIE_OPT_IN_LOG_URL,
        'cookiename' => check_plain(variable_get('ro_cookie_opt_in_cookie_name', 'consent_for_cookies')),
        'cookievalues' => array(
          'accept' => check_plain(token_replace(variable_get('ro_cookie_opt_in_cookie_accept', 'yes'))),
          'deny' => check_plain(token_replace(variable_get('ro_cookie_opt_in_cookie_deny', 'no'))),
        ),
        'close' => '<a href="#main">' . check_plain(token_replace(variable_get('ro_cookie_opt_in_close', 'Close this menu bar'))) . '</a>',
      );
      $qlm = variable_get('ro_cookie_opt_in_question_learn_more', array(
        'value' => '<p>I first want to know more ...</p><ul><li><a href="/cookies">What do cookies do?</a></li><li><a href="/privacy">What about my privacy?</a></li></ul>',
        'format' => $default_format,
      ));
      $settings['ro_cookie_opt_in']['question'] = array(
        'title' => check_plain(token_replace(variable_get('ro_cookie_opt_in_question_title', 'Cookies on Example.com'))),
        'intro' => filter_xss(token_replace(variable_get('ro_cookie_opt_in_question_intro', 'May Example.com place <a href="/cookies">cookies</a> on your computer to make the site easier for you to use?'))),
        'learn-more-links' => check_markup(token_replace($qlm['value']), $qlm['format']),
      );
      $clm = variable_get('ro_cookie_opt_in_change_learn_more', array(
        'value' => '<p>I first want to know more ...</p><ul><li><a href="/cookies">What do cookies do?</a></li><li><a href="/privacy">What about my privacy?</a></li></ul>',
        'format' => $default_format,
      ));
      $settings['ro_cookie_opt_in']['change'] = array(
        'title' => check_plain(token_replace(variable_get('ro_cookie_opt_in_change_title', 'Changing your cookie preferences on Example.com'))),
        'intro' => filter_xss(token_replace(variable_get('ro_cookie_opt_in_change_intro', ''))),
        'learn-more-links' => check_markup(token_replace($clm['value']), $clm['format']),
      );
      $ae = variable_get('ro_cookie_opt_in_accept_extras', array(
        'value' => '<ul><li>Example.com will collect anonymous information about your visits to help improve the website.</li></ul>',
        'format' => $default_format,
      ));
      $alm = variable_get('ro_cookie_opt_in_accept_learn_more', array(
        'value' => '<ul><li><a href="/cookies">What do cookies do?</a></li><li><a href="/privacy">What about my privacy?</a></li></ul>',
        'format' => $default_format,
      ));
      $settings['ro_cookie_opt_in']['accept'] = array(
        'button' => check_plain(token_replace(variable_get('ro_cookie_opt_in_accept_button', 'Yes, I accept cookies'))),
        'extras' => check_markup(token_replace($ae['value']), $ae['format']),
        'title' => check_plain(token_replace(variable_get('ro_cookie_opt_in_accept_title', 'You have chosen to accept cookies from Example.com'))),
        'intro' => filter_xss(token_replace(variable_get('ro_cookie_opt_in_accept_intro', 'Thank you for permitting Example.com to place cookies on your computer. You can always <a href="#" class="ck-change">change your mind</a>.'))),
        'current' => filter_xss(token_replace(variable_get('ro_cookie_opt_in_accept_current', 'You now accept cookies from Example.com. You can change your preference below. May Example.com continue to place <a href="/cookies">cookies</a> on your computer to make the site easier for you to use?'))),
        'learn-more-links' => check_markup(token_replace($alm['value']), $alm['format']),
      );
      $de = variable_get('ro_cookie_opt_in_deny_extras', array(
        'value' => '<ul><li>Example.com will not use cookies to collect anonymous information about your visits.</li></ul>',
        'format' => $default_format,
      ));
      $dlm = variable_get('ro_cookie_opt_in_deny_learn_more', array(
        'value' => '<ul><li><a href="/cookies">What do cookies do?</a></li><li><a href="/privacy">What about my privacy?</a></li><li><a href="#" class="ck-change">Change your cookie preferences</a></li></ul>',
        'format' => $default_format,
      ));
      $settings['ro_cookie_opt_in']['deny'] = array(
        'button' => check_plain(token_replace(variable_get('ro_cookie_opt_in_deny_button', 'No, I don\'t accept cookies'))),
        'extras' => check_markup(token_replace($de['value']), $de['format']),
        'title' => check_plain(token_replace(variable_get('ro_cookie_opt_in_deny_title', 'Example.com respects your choice'))),
        'intro' => filter_xss(token_replace(variable_get('ro_cookie_opt_in_deny_intro', 'This website will not use cookies to collect information about your visits.'))),
        'current' => filter_xss(token_replace(variable_get('ro_cookie_opt_in_deny_current', 'You do not accept cookies from Example.com. You can change this preference below. May Example.com place cookies on your computer to make the site easier for you to use?'))),
        'learn-more-links' => check_markup(token_replace($dlm['value']), $dlm['format']),
      );
      // Add the settings JS.
      drupal_add_js($settings, 'setting');
    }
    else {
      // Register a watchdog error.
      watchdog('ro_cookie_opt_in', 'Error loading Rijksoverheid Cookie Opt-in library', NULL, WATCHDOG_ERROR, NULL);
      // Set an error message.
      drupal_set_message(t('Error loading Rijksoverheid Cookie Opt-in library. Check if the library was installed correctly.'), 'error');
    }
  }
}

/**
 * Implements hook_block_info().
 */
function ro_cookie_opt_in_block_info() {
  $blocks['ro_cookie_opt_in_preferences'] = array(
    'info' => t('Rijksoverheid Cookie Opt-in cookie preferences'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ro_cookie_opt_in_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'ro_cookie_opt_in_preferences':
      $block['subject'] = t('Cookie preferences');
      $block['content'] = array(
        'links' => array(
          '#markup' => l(check_plain(token_replace(variable_get('ro_cookie_opt_in_pre_block_link_text', 'Change your cookie preferences'))), '#', array(
            'external' => TRUE,
            'attributes' => array(
              'class' => array(
                'ck-change',
              ),
            ),
          )),
        ),
        '#attached' => array(
          'css' => array(
            drupal_get_path('module', 'ro_cookie_opt_in') . '/css/ro_cookie_opt_in_block.css',
          ),
          'js' => array(
            array(
              'data' => drupal_get_path('module', 'ro_cookie_opt_in') . '/js/ro_cookie_opt_in_block.js',
              'type' => 'file',
            ),
          ),
        ),
      );
      break;

  }
  return $block;
}

/**
 * Implements hook_cron().
 */
function ro_cookie_opt_in_cron() {
  // Check if periodic cookielog cleanup is enabled.
  if (variable_get('ro_cookie_opt_in_log_cleanup', FALSE) == TRUE) {
    // Delete all expired cookielog entries since the last cron run.
    $last_cleanup = variable_get('ro_cookie_opt_in_log_last_cleanup', 0);
    $now = time();

    // If the last cleanup was more than a day ago cleanUp().
    if ($now - $last_cleanup > 86400) {
      $expire_date = $now - (variable_get('ro_cookie_opt_in_log_days_to_keep', 1825) * 24 * 60 * 60);
      db_delete('ro_cookie_opt_in_log')
        ->condition('timestamp', $expire_date, '<')
        ->execute();
      // Update the last cleanup timestamp.
      variable_set('ro_cookie_opt_in_log_last_cleanup', REQUEST_TIME);
      // Put an info message in the watchdog.
      watchdog('ro_cookie_opt_in', 'Cleaned up cookielog entries until @date', array('@date' => format_date($expire_date, 'short')), WATCHDOG_INFO);
    }
  }
}

/**
 * Function to check if cookie consent is given.
 *
 * @return bool
 *   indicates if cookies are allowed.
 */
function ro_cookie_opt_in_cookies_allowed() {
  $allowed = FALSE;

  $cookie_name = check_plain(variable_get('ro_cookie_opt_in_cookie_name', 'consent_for_cookies'));
  if (!empty($_COOKIE[$cookie_name])) {
    $cookie_value_allowed = check_plain(variable_get('ro_cookie_opt_in_cookie_accept', 'yes'));
    if (strpos($_COOKIE[$cookie_name], $cookie_value_allowed) === 0) {
      $allowed = TRUE;
    }
  }

  return $allowed;
}
