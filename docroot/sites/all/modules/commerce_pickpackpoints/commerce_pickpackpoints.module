<?php

/**
 * @file
 * Implements pickpack pont shipping method.
 */

/**
 * Implements hook_menu().
 */
function commerce_pickpackpoints_menu() {
  $items = array();

  $items['admin/commerce/config/shipping-methods/pickpackpoints'] = array(
    'title' => 'Pick-Pack Point setting',
    'description' => 'Pick-Pack Points list setting.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_pickpackpoints_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'commerce_pickpackpoints.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_cron().
 */
function commerce_pickpackpoints_cron() {
  // Rebuild cache of pik-pak point data and list on running cron.
  $list = commerce_pickpackpoints_get_option_list(TRUE);
  if (!empty($list)) {
    watchdog('Pick-pack point', 'The Pick-pack point options rebuild success.');
  }
  else {
    watchdog('Pick-pack point', 'The Pick-pack point options rebuild unsuccess.', array(), WATCHDOG_WARNING);
  }
  $list = commerce_pickpackpoints_get_lists(TRUE);
  if (!empty($list)) {
    watchdog('Pick-pack point', 'The Pick-pack point list rebuild success.');
  }
  else {
    watchdog('Pick-pack point', 'The Pick-pack point list rebuild unsuccess.', array(), WATCHDOG_WARNING);
  }
}

/**
 * Download the Pick-pack point list from services site.
 */
function commerce_pickpackpoints_download_shops() {
  return simplexml_load_file(variable_get('pickpackpoints_list_url', 'http://partner.pickpackpont.hu/stores/validboltlista.xml'));
}

/**
 * Return Pick-pack point data.
 *
 * If $reset is TRUE will rebuild cache of Pick-pack point data.
 */
function commerce_pickpackpoints_get_data($reset = FALSE) {

  $ppp_array = array();

  if (!$reset && $data = cache_get('pickpackpoints_data')) {
    $ppp_array = $data->data;
  }
  else {
    $pp_array = commerce_pickpackpoints_download_shops();
    if (!$pp_array) {
      return NULL;
    }
    $pp_array = (array) $pp_array;
    foreach ($pp_array['Shop'] as $shop_data) {
      $sd = (array) $shop_data;
      $d = array();
      foreach ($sd as $key => $value) {
        if (is_object($value)) {
          $value = check_plain((string) $value);
        }
        $d[$key] = check_plain($value);
      }
      if (!empty($d['ShopCode'])) {
        $ppp_array[$d['ShopCode']] = $d;
      }
    }
    cache_set('pickpackpoints_data', $ppp_array);
  }
  return $ppp_array;
}

/**
 * Return Pick-pack point lists data.
 *
 * If $reset is TRUE will rebuild the cache of Pick-pack point list.
 */
function commerce_pickpackpoints_get_lists($reset = FALSE) {
  if (!$reset && $data = cache_get('pickpackpoints_list')) {
    // Take to get list from cache if not reset called.
    return $data->data;
  }

  $pp_array = commerce_pickpackpoints_get_data($reset);
  if (!$pp_array) {
    return NULL;
  }

  $list = array(
    'pp_county' => array('none' => t('Choose a county')),
    'pp_city' => array('none' => t('Choose a city')),
    'pp_list' => array('none' => t('Choose a shop')),
    'pp_rendered_shop' => array(),
    'pp_all_cities' => array('none' => t('Choose a city')),
    'pp_all_shops' => array('none' => t('Choose a shop')),
  );

  $l_county = array();
  $l_county_keys = array();
  $l_city = array();
  $l_city_keys = array();
  $l = array();
  foreach ($pp_array as $num => $sd) {
    $county = $sd['Area'];
    if (empty($county)) {
      continue;
    }
    $city = $sd['City'];
    if (substr($sd['ZipCode'], 0, 1) == 1) {
      $county = $sd['City'];
      $city = $sd['Area'];
    }
    $shop_code = $sd['ShopCode'];
    if (!in_array($county, $l_county)) {
      $l_county[$county] = $county;
    }
    if (empty($l_city[$county]) || !in_array($city, $l_city[$county])) {
      $l_city[$county][$city] = $city;
      $list['pp_all_cities'][$city] = $city;
    }
    $l[$county][$city][$shop_code] = $sd['ZipCode'] . ' ' . $sd['City'] . ', ' . $sd['Address'] . ' - ' . $sd['ShopType'];
    $list['pp_all_shops'][$shop_code] = $l[$county][$city][$shop_code];
    $list['pp_rendered_shop'][$shop_code] = commerce_pickpackpoints_get_rendered_data($num, $sd);
  }

  asort($l_county);
  foreach ($l_city as $key => $array) {
    uasort($l_city[$key], 'commerce_pickpackpoints_strcmp_hun');
    foreach ($l_city[$key] as $key2 => $city) {
      uasort($l[$key][$key2], 'commerce_pickpackpoints_strcmp_hun');
    }
  }

  $list['pp_county'] += $l_county;
  $list['pp_city'] += $l_city;
  $list['pp_list'] += $l;
  cache_set('pickpackpoints_list', $list);
  return $list;
}

/**
 * Return Pick-pack point option list data.
 *
 * If $reset is TRUE will rebuild the cache of Pick-pack point list.
 */
function commerce_pickpackpoints_get_option_list($reset = FALSE) {

  if (!$reset && $data = cache_get('pickpackpoints_options')) {
    // Take to get list from cache if not reset called.
    return $data->data;
  }

  $pp_array = commerce_pickpackpoints_get_data($reset);
  if (!$pp_array) {
    return NULL;
  }

  $list = array(
    '-1' => t('None'),
  );

  $o = array();
  foreach ($pp_array as $num => $sd) {
    $o[$num] = $sd['ZipCode'] . ' ' . $sd['City'] . ', ' . $sd['Address'] . ' - ' . $sd['ShopType'];
  }

  asort($o);
  $list += $o;

  cache_set('pickpackpoints_options', $list);
  return $list;
}

/**
 * Collect pickpack services.
 */
function commerce_pickpackpoints_services() {
  $pickpack_services = array();
  foreach (commerce_shipping_services('pickpack') as $service) {
    $pickpack_services[] = $service['name'];
  }
  return $pickpack_services;
}

/**
 * Generate rendered shop data output.
 */
function commerce_pickpackpoints_get_rendered_data($id, $data) {
  $rows = array();
  $rows[] = array(t('Shop id') . ':', $data['ShopCode']);
  $rows[] = array(t('Shop name') . ':', $data['Name']);
  $rows[] = array(t('Shop address') . ':', $data['ZipCode'] . ' ' . $data['City'] . ', ' . $data['Address']);
  $rows[] = array(
    t('Description', array(), array('context' => 'pickpackpoints')) . ':',
    $data['Description']);
  $rows[] = array(
    t('Creditcard', array(), array('context' => 'pickpackpoints')) . ':',
    empty($data['IsBankCard']) ? t('No', array(), array('context' => 'pickpackpoints')) : t('Yes', array(), array('context' => 'pickpackpoints'))
  );
  $rows[] = array(t('Business hours') . ':', '');
  $rows[] = array(t('Monday') . ':', $data['Monday']);
  $rows[] = array(t('Tuesday') . ':', $data['Tuesday']);
  $rows[] = array(t('Wednesday') . ':', $data['Wednesday']);
  $rows[] = array(t('Thursday') . ':', $data['Thursday']);
  $rows[] = array(t('Friday') . ':', $data['Friday']);
  $rows[] = array(t('Saturday') . ':', $data['Saturday']);
  $rows[] = array(t('Sunday') . ':', $data['Sunday']);
  $text = theme('table', array('header' => array('', ''), 'rows' => $rows));

  return $text;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_pickpackpoints_commerce_checkout_pane_info_alter(&$checkout_panes) {
  $checkout_panes['commerce_shipping']['callbacks']['checkout_form_submit'] = 'commerce_pickpackpoints_shipping_info_submit';
}

/**
 * Submit of checkout form.
 *
 * Saving pick-pack pont shipping service data to order data.
 */
function commerce_pickpackpoints_shipping_info_submit($form, &$form_state, $checkout_pane, $order) {
  commerce_shipping_pane_checkout_form_submit($form, $form_state, $checkout_pane, $order);
  $shipping_service = $form_state['values']['commerce_shipping'];
  $order->data['shipping_service'] = $shipping_service['shipping_rates'][$shipping_service['shipping_service']];
}

/**
 * Helper function to order city names
 */
function commerce_pickpackpoints_strcmp_hun($s1, $s2) {
  $chr = &drupal_static(__FUNCTION__);

  if (!isset($chr)) {
    $chr = array(
      'á' => 'a',
      'é' => 'e',
      'í' => 'i',
      'ó' => 'o',
      'ö' => 'oz',
      'ő' => 'oz',
      'ú' => 'u',
      'ü' => 'uz',
      'ű' => 'uz',
      'cs' => 'cz',
      'zs' => 'zz',
      'ccs' => 'czcz',
      'ggy' => 'gzgz',
      'lly' => 'lzlz',
      'nny' => 'nznz',
      'ssz' => 'szsz',
      'tty' => 'tztz',
      'zzs' => 'zzzz'
    );
  }

  return strcmp(strtr(mb_strtolower($s1), $chr), strtr(mb_strtolower($s2), $chr));
}
