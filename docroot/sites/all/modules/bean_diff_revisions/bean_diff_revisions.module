<?php
/**
 * @file
 * Bean diff revisions project specific module.
 */

/**
 * Implements hook_menu().
 */
function bean_diff_revisions_menu() {
  $items = array();

  $items['block/%bean_delta/revisions/view'] = array(
    'title' => 'Compare revisions',
    'page callback' => 'bean_diff_revisions_diffs_show',
    'page arguments' => array(1, 4, 5, 6),
    'type' => MENU_LOCAL_TASK,
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function bean_diff_revisions_menu_alter(&$callbacks) {
  // Overwrite the default 'Revisions' page.
  $callbacks['block/%bean_delta/revisions']['page callback'] = 'bean_diff_revisions_diffs_overview';
  $callbacks['block/%bean_delta/revisions']['module'] = 'bean_diff_revisions';
  $callbacks['block/%bean_delta/revisions']['file'] = 'bean_diff_revisions.pages.inc';
}


/**
 * Implements hook_admin_paths_alter().
 */
function bean_diff_revisions_admin_paths_alter(&$paths) {
  // By default, treat all diff pages as administrative.
  if (variable_get('diff_admin_path_node', 1)) {
    $paths['block/*/revisions/view/*/*'] = TRUE;
  }
}

/**
 * Implements hook_entity_diff().
 */
function bean_diff_revisions_entity_diff($old_bean, $new_bean, $context) {
  $result = array();
  if ($context['entity_type'] == 'bean') {
    $result['title'] = array(
      '#name' => 'Title',
      '#states' => array(),
      '#weight' => -5,
      '#settings' => array(
        // Global setting - 'diff_show_header_' . $entity_type
        'show_header' => variable_get('diff_show_header_node', 1),
      ),
    );
    foreach ($context['states'] as $state) {
      switch ($state) {
        case 'rendered':
          $result['title']['#states'][$state] = array(
            '#old' => l($old_bean->title, 'block/' . $old_bean->delta),
            '#new' => l($new_bean->title, 'node/' . $new_bean->delta),
          );
          break;

        // We specify a default so that the title is allows compared.
        case 'raw':
        default:
          $result['title']['#states'][$state] = array(
            '#old' => array($old_bean->title),
            '#new' => array($new_bean->title),
          );
          break;
      }
    }
  }
  return $result;
}

/**
 * Create a comparison for the node between versions 'old_vid' and 'new_vid'.
 *
 * @param object $node
 *   Node on which to perform comparison
 * @param integer $old_vid
 *   Version ID of the old revision.
 * @param integer $new_vid
 *   Version ID of the new revision.
 */
function bean_diff_revisions_diffs_show($bean, $old_vid, $new_vid, $state = NULL) {
  // Attaches the CSS.
  $build['#attached'] = diff_build_attachments();

  $default_state = variable_get('diff_default_state_node', 'raw');
  if (empty($state)) {
    $state = $default_state;
  }
  $state = str_replace('-', '_', $state);
  if (!array_key_exists($state, diff_available_states())) {
    $state = $default_state;
  }

//   Same title as the 'Revisions' tab. Blocked by non-page requests.
  if (arg(0) == 'block' && arg(2) == 'revisions' && arg(3) == 'view' && is_numeric(arg(4)) && is_numeric(arg(5))) {
    drupal_set_title(t('Revisions for %title', array('%title' => $bean->title)), PASS_THROUGH);
    drupal_set_message(t('Comparing revision #!revision2 against revision #!revision1',
      array('!revision2' => $new_vid, '!revision1' => $old_vid)));
  }
  $bean->loadRevisions();

  $old_bean = bean_load_revision($bean->bid, $old_vid);
  $new_bean = bean_load_revision($bean->bid, $new_vid);
//  $old_node = node_load($node->nid, $old_vid);
//  $new_node = node_load($node->nid, $new_vid);

  // Generate table header (date, username, log message).
//  $old_header = $new_header = '';
  $old_header = t('!date by !username', array(
    '!date' => l(format_date($old_bean->changed), "block/$bean->delta/revisions/$old_bean->vid/view", array('absolute' => 1)),
    '!username' => theme('username', array('account' => user_load($old_bean->uid))),
  ));
  $new_header = t('!date by !username', array(
    '!date' => l(format_date($new_bean->changed), "block/$bean->delta/revisions/$new_bean->vid/view", array('absolute' => 1)),
    '!username' => theme('username', array('account' => user_load($new_bean->uid))),
  ));

  $old_log = $old_bean->log != '' ? '<p class="revision-log">' . filter_xss($old_bean->log) . '</p>' : '';
  $new_log = $new_bean->log != '' ? '<p class="revision-log">' . filter_xss($new_bean->log) . '</p>' : '';

  // Generate previous diff/next diff links.
  $nav_suffix = ($default_state != $state) ? '/' . str_replace('_', '-', $state) : '';
  module_load_include('inc', 'diff', 'diff.pages');
  $next_vid = _diff_get_next_vid($bean->revisions, $new_vid);

  if ($next_vid) {
    $next_link = l(t('Next difference >'), 'block/' . $bean->delta . '/revisions/view/' . $new_vid . '/' . $next_vid . $nav_suffix, array('absolute' => 1));
  }
  else {
    $next_link = '';
  }
  $prev_vid = _diff_get_previous_vid($bean->revisions, $old_vid);
  if ($prev_vid) {
    $prev_link = l(t('< Previous difference'), 'block/' . $bean->delta . '/revisions/view/' . $prev_vid . '/' . $old_vid . $nav_suffix, array('absolute' => 1));
  }
  else {
    $prev_link = '';
  }

  $header = _diff_default_header($old_header, $new_header);
  $rows = array();
  if ($old_log || $new_log) {
    $rows['logs'] = array(
      array(
        'data' => $old_log,
        'colspan' => 2,
      ),
      array(
        'data' => $new_log,
        'colspan' => 2,
      ),
    );
  }
  $rows['navigation'] = array(
    array(
      'data' => $prev_link,
      'class' => array('diff-prevlink'),
      'colspan' => 2,
    ),
    array(
      'data' => $next_link,
      'class' => array('diff-nextlink'),
      'colspan' => 2,
    ),
  );

  $links = array();
  foreach (diff_available_states('node') as $alternative_state => $label) {
    if ($alternative_state == $state) {
      // @todo: Should we show both or just alternatives?
    }
    $links[$alternative_state] = array(
      'title' => $label,
      'href' => "block/{$bean->delta}/revisions/view/{$old_vid}/{$new_vid}" . ($alternative_state == $default_state ? '' : '/' . str_replace('_', '-', $alternative_state)),
    );
  }
  if (count($links) > 1) {
    $state_links = theme('links', array(
      'links' => $links,
      'attributes' => array('class' => array('links', 'inline')),
    ));
    $rows['states'] = array(
      array(
        'data' => $state_links,
        'class' => 'diff-links',
        'colspan' => 4,
      ),
    );
  }
  $rows = array_merge($rows, bean_diff_revisions_diff_body_rows($old_bean, $new_bean, $state));
  $build['diff_table'] = array(
    '#theme' => 'table__diff__standard',
    '#header' => $header,
    '#rows' => $rows,
    '#attributes' => array('class' => array('diff')),
    '#colgroups' => _diff_default_cols(),
    '#sticky' => FALSE,
  );

  // Allow users to hide or set the display mode of the preview.
//  if (node_is_page($node) && $view_mode = variable_get('diff_view_mode_preview_node_' . $new_node->type, 'full')) {
    $header = '';
    if ($bean->vid == $new_vid) {
      $header .= '<div class="diff-section-title">' . t('Current revision:') . '</div>';
    }
    else {
      $header .= '<div class="diff-section-title">' . t('Revision of @new_date:', array('@new_date' => format_date($new_bean->changed))) . '</div>';
    }
    $build['diff_preview']['header']['#markup'] = $header;
    $build['diff_preview']['content'] = bean_view($new_bean, 'default');
    if (isset($build['diff_preview']['content']['links'])) {
      unset($build['diff_preview']['content']['links']);
    }
    if (isset($build['diff_preview']['content']['comments'])) {
      unset($build['diff_preview']['content']['comments']);
    }
  return $build;
}

/**
 * Creates an array of rows which represent the difference between nodes.
 *
 * @param object $old_node
 *   Node for comparison which will be displayed on the left side.
 * @param object $new_node
 *   Node for comparison which will be displayed on the right side.
 * @param boolean $state
 *   The state to render for the diff.
 */
function bean_diff_revisions_diff_body_rows($old_bean, $new_bean, $state = 'raw') {
  // This is an unique index only, so no need for drupal_static().
  static $table_row_counter = 0;

  if ($theme = variable_get('diff_theme', 'default')) {
    drupal_add_css(drupal_get_path('module', 'diff') . "/css/diff.{$theme}.css");
  }
  module_load_include('inc', 'diff', 'includes/node');

  $rows = array();
  $any_visible_change = FALSE;
  $context = array(
    'entity_type' => 'bean',
    'states' => array($state),
    'view_mode' => 'diff_standard',
  );

  $bean_diffs = diff_compare_entities($old_bean, $new_bean, $context);

  // Track line numbers between multiple diffs.
  $line_stats = array(
    'counter' => array('x' => 0, 'y' => 0),
    'offset' => array('x' => 0, 'y' => 0),
  );

  // Render diffs for each.
  foreach ($bean_diffs as $bean_diff) {
    $show_header = !empty($bean_diff['#name']);
    // These are field level settings.
    if ($show_header && isset($bean_diff['#settings']['show_header'])) {
      $show_header = $show_header && $bean_diff['#settings']['show_header'];
    }

    // Line counting and line header options.
    if (empty($node_diff['#settings']['line_counter'])) {
      $line_counter = FALSE;
    }
    else {
      $line_counter = $bean_diff['#settings']['line_counter'];
    }
    // Every call to 'line' resets the counters.
    if ($line_counter) {
      $line_stats['counter']['x'] = 0;
      $line_stats['counter']['y'] = 0;
      if ($line_counter == 'line' && 0) {
        $line_stats['offset']['x'] = 0;
        $line_stats['offset']['y'] = 0;
      }
      $line_stats_ref = $line_stats;
    }
    else {
      $line_stats_ref = NULL;
    }

    list($old, $new) = diff_extract_state($bean_diff, $state);
    if ($bean_diff_rows = diff_get_rows($old, $new, $line_counter && $line_counter != 'hidden', $line_stats_ref)) {
      if ($line_counter && $line_counter != 'line') {
        $line_stats['offset']['x'] += $line_stats_ref['counter']['x'];
        $line_stats['offset']['y'] += $line_stats_ref['counter']['y'];
      }
      if ($show_header) {
        $rows['diff-header-' . $table_row_counter++] = array(
          array(
            'data' => t('Changes to %name', array('%name' => $bean_diff['#name'])),
            'class' => 'diff-section-title',
            'colspan' => 4,
          ),
        );
      }
      // To avoid passing counter to the Diff engine, index rows manually here
      // to allow modules to interact with the table. i.e. no array_merge().
      foreach ($bean_diff_rows as $row) {
        $rows['diff-row-' . $table_row_counter++] = $row;
      }
      $any_visible_change = TRUE;
    }
  }
  if (!$any_visible_change) {
    $rows['diff-empty-' . $table_row_counter++] = array(
      array(
        'data' => t('No visible changes'),
        'class' => 'diff-section-title',
        'colspan' => 4,
      ),
    );
    // @todo: revise this.
    // Needed to keep safari happy.
    $rows['diff-empty-' . $table_row_counter++] = array(
      array('data' => ''),
      array('data' => ''),
      array('data' => ''),
      array('data' => ''),
    );
  }

  return $rows;
}

/**
 * Implements hook_field_attach_view_alter().
 */
function bean_diff_revisions_field_attach_view_alter(&$output, &$context) {
  $i = 0;
  while (!empty($output['field_elements'][$i]['links'])) {
    unset($output['field_elements'][$i]['links']);
    $i++;
  }
}
