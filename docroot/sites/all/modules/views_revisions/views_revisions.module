<?php

/**
 * @file
 * A module to provide revisions of Views.
 */

/**
 * Implements hook_help().
 */
function views_revisions_help($path, $arg) {
  switch ($path) {
    case 'admin/help#views_revisions':
      return "<p>" .
        l('View README.txt', drupal_get_path('module', 'views_revisions'). '/README.txt')  .
      "</p>";
      break;
  }
}

/**
 * Implements hook_menu().
 */
function views_revisions_menu() {
  $items = array();
  $items['admin/structure/views/revisions/%'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Views Revisions',
    'page callback' => 'views_revisions_page',
    'page arguments' => array(4),
    'access arguments' => array('administer views')
  );
  $items['admin/structure/views/revisions/revision/%'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Views Revision',
    'page callback' => 'views_revisions_revision_page',
    'page arguments' => array(5),
    'access arguments' => array('administer views')
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function views_revisions_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_ui_edit_form' && $form_state['view']->vid != 'new') {
    $form['#prefix'] .= '<div>' .
      l('Views Revisions', 'admin/structure/views/revisions/' . $form_state['view']->name) .
    '</div>';
    $form['actions']['views_revisions_revision'] = array(
      '#type' => 'checkbox',
      '#title' => t('Create new revision'),
      '#default_value' => 1
    );
    $form['actions']['views_revisions_log'] = array(
      '#type' => 'textarea',
      '#title' => t('Revision log message'),
      '#description' => t('Provide an explanation of the changes you are making. This will help other authors understand your motivations.'),
      '#rows' => 3
    );
    array_unshift($form['actions']['save']['#submit'], 'views_revisions_form_submit');
  }
  else if ($form_id == 'ctools_export_ui_delete_confirm_form') {
    $form['#submit'][] = 'views_revisions_delete';
  }
}

/**
 * Submission handler for the Views UI form.
 */
function views_revisions_form_submit($form, &$form_state) {
  global $user;
  $revision = $form_state['values']['actions']['views_revisions_revision'];
  if ($revision) {
    $log = $form_state['values']['actions']['views_revisions_log'];
    $ctools_export_object = ctools_export_load_object('views_view', 'names', array($form_state['view']->name));
    $data = views_export_view($ctools_export_object[$form_state['view']->name]);
    $vrvid = db_insert('views_revisions')->fields(
      array(
        'vid' => $form_state['view']->vid,
        'uid' => $user->uid,
        'created' => time(),
        'log' => $log,
        'data' => $data
      )
    )->execute();
  }
}

/**
 * Submission handler for the ctools delete confirmation form.
 */
function views_revisions_delete($form, &$form_state) {
  if ($form_state['plugin']['schema'] == 'views_view') {
    $vid = $form_state['item']->vid;
    db_query("DELETE FROM {views_revisions} WHERE vid = :vid", array(':vid' => $vid));
  }
}

/**
 * Page callback function for the views revisions page.
 */
function views_revisions_page($name) {
  $html = "<h2>$name</h2><p>" . l('Go Back to View', "admin/structure/views/view/$name") . " &raquo;</p>";
  $result = db_query("SELECT vid FROM {views_view} WHERE name = :name", array(':name' => $name))->fetch();
  if (!$result) {
    $html .= t('Failed to load view!');
    return $html;
  }
  $vid = $result->vid;
  $revisions = db_query("SELECT vr.vrvid, vr.vid, vr.uid, vr.created, vr.log, u.name
    FROM {views_revisions} vr
    LEFT OUTER JOIN {users} u ON vr.uid = u.uid
    WHERE vr.vid = :vid
    ORDER BY vr.created DESC", array(':vid' => $vid))->fetchAll();
  if (sizeof($revisions) == 0) {
    $html .= t('There are no revisions for this view.');
    return $html;
  }
  $header = array(
    array("data" => t('User')),
    array("data" => t('Message')),
    array("data" => t('Created')),
    array("data" => t('Revision'))
  );
  $rows = array();
  foreach($revisions as $revision) {
    $row = array(
      l($revision->name, "user/$revision->uid"),
      $revision->log,
      format_date($revision->created, 'custom', 'Y-m-d H:i:s'),
      l('View', "admin/structure/views/revisions/revision/$revision->vrvid")
    );
    $rows[] = $row;
  }
  $html .= theme('table', array('header' => $header, 'rows' => $rows));
  return $html;
}

/**
 * Page callback function for the views revisions revision page.
 */
function views_revisions_revision_page($vrvid) {
  $html = '';
  $revision = db_query("SELECT vr.vrvid, vr.vid, vr.uid, vr.created, vr.log, vr.data, u.name, vv.name as view_name
    FROM {views_revisions} vr
    LEFT OUTER JOIN {users} u ON vr.uid = u.uid
    INNER JOIN {views_view} vv ON vr.vid = vv.vid
    WHERE vrvid = :vrvid", array('vrvid' => $vrvid))->fetch();
  $header = array(
    array("data" => t('User')),
    array("data" => t('Message')),
    array("data" => t('Created'))
  );
  $rows = array(
    array(
      l($revision->name, "user/$revision->uid"),
      $revision->log,
      format_date($revision->created, 'custom', 'Y-m-d H:i:s')
    )
  );
  $table = theme('table', array('header' => $header, 'rows' => $rows));
  $textarea = array(
    'element' => array(
      '#id' => 'views_revisions_data',
      '#value' => $revision->data,
      '#rows' => 32,
      '#attributes' => array('onclick' => 'javascript:this.select();')
    )
  );
  $html .= "<h2>{$revision->view_name}</h2>" .
    '<p>' .
    l('View', "admin/structure/views/view/{$revision->view_name}") . ' &raquo; ' .
    l('Revisions', "admin/structure/views/revisions/{$revision->view_name}") . ' &raquo;' .
    '</p>' .
    $table .
    '<p>' . l('Go to Import Page', 'admin/structure/views/import') . '</p>' .
    '<label for="views_revisions_data">' . t('Ctools export data before revision was made') . ':</label>' .
    theme('textarea', $textarea);
  return $html;
}

