<?php

/**
 * @file
 * Set path aliases by using taxonomies and menus.
 */

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Create extra dropdown boxes in the path segment of the entity add/edit form.
 */
function path_alias_picker_form_node_form_alter(&$form, &$form_state, $form_id) {

  if (isset($form['path'])) {
    if (module_exists('libraries')) {
      libraries_load('chosen');
    }

    $form['#attached']['js'] = array(
      drupal_get_path('module', 'path_alias_picker') . '/path_alias_picker.js',
    );

    module_load_include('inc', 'pathauto', 'pathauto');
    $path_alias_picker = array();

    $path_alias_picker['container'] = array(
      '#type' => 'container',
    );

    // If menu is enabled, get all available menus. We need their human readable
    // names later.
    $menus = array();
    if (module_exists('menu')) {
      $menus = menu_get_menus();
    }

    // Create the form elements for taxonomies.
    foreach (variable_get('path_alias_picker_taxonomies', array()) as $vid) {
      if ($vid != 0) {

        $taxonomy = taxonomy_vocabulary_load($vid);

        if ($taxonomy) {
          $terms = taxonomy_get_tree($vid);
          $term_options = array(0 => t('Choose a term'));

          if (!empty($terms)) {
            foreach ($terms as $term) {
              $term_options[pathauto_cleanstring($term->name)] = $term->name;
            }
          }
          $path_alias_picker['container'][$taxonomy->machine_name] = array(
            '#type' => 'select',
            '#attributes' => array('class' => array('path-alias-picker-list', $taxonomy->machine_name)),
            '#title' => t('@term terms', array('@term' => $taxonomy->name)),
          );

          $path_alias_picker['container'][$taxonomy->machine_name]['#options'] = $term_options;

        }
      }
    }

    // Create the form elements for menus.
    foreach (variable_get('path_alias_picker_menus', array()) as $menu_machine_name) {
      if (is_string($menu_machine_name)) {
        if (isset($menus[$menu_machine_name])) {
          $menu_items = menu_load_links($menu_machine_name);
          $menu_options = array(0 => t('Choose a menu item'));

          if (!empty($menu_items)) {
            foreach ($menu_items as $menu_item) {
              // Menu_load_links() does not check ACL on the single item.
              // We have to load the menu item through menu_link_load() to
              // accomplish that. This will also handle translations of the
              // menu title.
              $menu_link_loaded = menu_link_load($menu_item['mlid']);
              if ($menu_link_loaded['access'] == TRUE) {
                $menu_options[pathauto_cleanstring($menu_link_loaded['link_title'])] = $menu_link_loaded['link_title'];
              }
            }
          }

          $path_alias_picker['container'][$menu_machine_name] = array(
            '#type' => 'select',
            '#attributes' => array('class' => array('path-alias-picker-list', $menu_machine_name)),
            '#title' => t('@menu menu items', array('@menu' => $menus[$menu_machine_name])),
          );

          $path_alias_picker['container'][$menu_machine_name]['#options'] = $menu_options;
        }
      }
    }

    if (!count($path_alias_picker['container'])) {
      $path_alias_picker['container']['info'] = array(
        '#markup' => t('Select a term or menu from the boxes below, and it will be appended to the end of the existing path.'),
      );
    }

    $form['path']['path_alias_picker'] = $path_alias_picker;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Creates a list of all available vocabularies on the path config page.
 */
function path_alias_picker_form_pathauto_settings_form_alter(&$form, &$form_state, $form_id) {

  $default_vocabs = variable_get('path_alias_picker_taxonomies', array());
  $default_menus = variable_get('path_alias_picker_menus', array());

  // If taxonomy is enabled, get all available vocabularies.
  $vocabularies = array();
  if (module_exists('taxonomy')) {
    $vocabularies = taxonomy_get_vocabularies();
  }

  // If menu is enable, get all available menus.
  $menus = array();
  if (module_exists('menu')) {
    $menus = menu_get_menus();
  }

  // Make array of vocabularies, for checkbox options.
  $vocab_options = array();
  foreach ($vocabularies as $vid => $vocab) {
    $vocab_options[$vid] = $vocab->name;
  }

  $form['path_alias_picker'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#title' => t('Path Alias Picker'),
  );

  if (!empty($vocab_options)) {
    $form['path_alias_picker']['path_alias_picker_taxonomies'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Vocabularies to make available in the path alias picker'),
      '#options' => $vocab_options,
      '#default_value' => $default_vocabs,
    );
  }
  else {
    $form['path_alias_picker']['path_alias_picker_taxonomies'] = array(
      '#markup' => '<div>' . t('No vocabularies found') . '</div>',
    );
  }

  if (!empty($menus)) {
    $form['path_alias_picker']['path_alias_picker_menus'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Menus to make available in the path alias picker'),
      '#options' => $menus,
      '#default_value' => $default_menus,
    );
  }
  else {
    $form['path_alias_picker']['path_alias_picker_menus'] = array(
      '#markup' => '<div>' . t('No menus found') . '</div>',
    );
  }
}

/**
 * Implements hook_libraries_info().
 */
function path_alias_picker_libraries_info() {
  return array(
    'chosen' => array(
      'name' => 'Chosen jQuery library',
      'vendor url' => 'http://harvesthq.github.io/chosen/',
      'download url' => 'https://github.com/harvesthq/chosen/releases/download/v1.2.0/chosen_v1.2.0.zip',
      'version arguments' => array(
        'file' => 'chosen.jquery.min.js',
        // Chosen v1.2.0
        'pattern' => '/Chosen v(1.\d+\.+\d+)/',
        'lines' => 1,
      ),
      'files' => array(
        'js' => array(
          'chosen.jquery.min.js',
        ),
        'css' => array(
          'chosen.min.css',
        ),
      ),
    ),
  );
}
