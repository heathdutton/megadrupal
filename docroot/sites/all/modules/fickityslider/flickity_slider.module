<?php
/**
 * @file
 * This module allows create flickity_slider slideshows.
 */

/**
 * Implements hook_menu().
 */
function flickity_slider_menu() {
  $items = array();

  $items['admin/config/media/flickityslider'] = array(
    'title' => 'Flickity settings',
    'description' => 'Configure the  flickityslider module settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('flickityslider_form_settings'),
    'access arguments' => array('administer flickityslider'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'inc/flickityslider.admin.inc',
  );

  return $items;
}


/**
 * Implements hook_block_info().
 */
function flickity_slider_block_info() {
  $blocks['flickity_slider'] = array(
    // info: The name of the block.
    'info' => t('Flickity Slider'),
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "<front>",
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function flickity_slider_block_view($delta = '') {
  $block = array();
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'flickity_slider':
      // Create your block content here.
      $slide_array = flickity_slider_homepage();
      $slide_array_count = count($slide_array);
      $block['content'] = theme('flickity_slider', array('flickity_slider_items' => $slide_array));
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function flickity_slider_theme() {
  return array(
    'flickity_slider' => array(
      'variables' => array('flickity_slider_items' => 'NULL', 'flickity_slider_item_count' => 'NULL'),
      'template' => 'flickity-slider',
    ),
  );
}


/**
 * Function for retreiving slides contents.
 *
 * @see flickity_block_view()
 */
function flickity_slider_homepage() {
  $slide_array = array();
  $nids = array();
  $js_settings_arr = array();
  
  $autoplay = variable_get('flickity_autoplay', FALSE);
  $js_settings_arr =  array('autoplay' => $autoplay);
  if ($autoplay) {
    $autoplaytime = variable_get('autoplaytime', 5000);  
    $js_settings_arr['autoplaytime'] =  $autoplaytime;
  }
  $prev_next = variable_get('flickity_prevnext', TRUE);
  $js_settings_arr['prev_next'] =  $prev_next;
  
  drupal_add_js(array('custom' => $js_settings_arr), array('type' => 'setting'));
  drupal_add_js(drupal_get_path('module', 'flickity_slider') . '/js/custom.js', array('scope' => 'header'));
  drupal_add_js(drupal_get_path('module', 'flickity_slider') . '/js/flickity.pkgd.min.js', array('scope' => 'header'));
  drupal_add_css(drupal_get_path('module', 'flickity_slider') . '/css/flickity.css', array('scope' => 'header'));
    
  
  //Select all Flickity Slider node ids.
  $qry = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'flickity_slider')
    ->condition('n.status', 1)
    ->execute();
  $nids = $qry->fetchAll();
  
  //Make array of the required data from above $nids.
  if (count($nids)) {
    foreach ($nids as $key => $value) {
      $nid = $value->nid;
      $node = node_load($nid);
      $slide_array[] = array(
        'title' => t($node->title),
        'img_uri' => $node->field_slideshow_image[LANGUAGE_NONE][0]['uri'],
      );
      if (isset($node->body[LANGUAGE_NONE][0]['value'])) {
        $slide_array[$key]['description'] = t($node->body[LANGUAGE_NONE][0]['value']);
      }
      if (isset($node->field_slideshow_image[LANGUAGE_NONE][0]['alt'])) {
        $slide_array[$key]['img_alt'] = t($node->field_slideshow_image[LANGUAGE_NONE][0]['alt']); 
      }
    }
  }
 return $slide_array;
}
