<?php

/**
 * @file
 * Install, update and uninstall functions for the flickity_slider module.
 */

/**
 * Implements hook_install().
 */
function flickity_slider_install() {
  $t = get_t();
  // Machine name of the content type.
  $name = 'flickity_slider';
  // Define the node type.
  $slideshow = array(
    'type' => $name,
    'name' => $t('Flickity Slider'),
    'base' => 'node_content',
    'title_label' => $t('Slider Title'),
    'description' => $t('Add content for the Slider.'),
    'custom' => TRUE,
    'comment' => 0,
  );
  // Set other node defaults not declared above.
  $content_type = node_type_set_defaults($slideshow);
  // Add the body field.
  node_add_body_field($content_type, $t('Slider Description'));
  // Making comment settings closed.
  variable_set('comment_flickity_slider', '1');
  node_type_save($content_type);
  // Add peristant variables that control settings.
  variable_set('additional_settings__active_tab_' . $name, 'edit-menu');
  variable_set('node_preview_' . $name, 1);
  variable_set('node_options_' . $name, array(0 => 'status', 1 => 'promote'));
  variable_set('node_submitted_' . $name, 0);
  variable_set('menu_options_' . $name, array());
  variable_set('menu_parent_' . $name, 'main-menu:0');
  // Create all the fields we are adding to our content type.
  foreach (_flickity_slider_installed_fields() as $field) {
    if (!field_info_field('field_slideshow_image')) {
      field_info_cache_clear();
      field_create_field($field);
    }
  }
  // Create all the instances for our fields.
  foreach (_flickity_slider_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $name;
    field_create_instance($instance);
  }
  // Create an image style for the carousel.
  $style = image_style_save(array('name' => 'flickity_slider_style'));
  $effect = array(
    'name' => 'image_scale_and_crop',
    'data' => array(
      'width' => 1140,
      'height' => 300,
      'upscale' => TRUE,
    ),
    'isid' => $style['isid'],
  );
  image_effect_save($effect);
  db_update('system')
    ->fields(array(
      'weight' => 9999,
    ))
    ->condition('type', 'module')
    ->condition('name', 'flickity_slider')
    ->execute();
}

/**
 * Returns a structured array defining the fields created by this content type.
 *
 * @return mixed.
 *   An associative array specifying the fields we wish to add to our
 *   new node type.
 */
function _flickity_slider_installed_fields() {
  $t = get_t();
  // Create the field.
  $field_array = array(
    'slideshow_image' => array(
      'field_name' => 'field_slideshow_image',
      'label' => $t('Slider Image'),
      'cardinality' => 1,
      'type' => 'image',
      'settings' => array(
        'default_image' => 0,
        'uri_scheme' => 'public',
      ),
    ),
  );
  return $field_array;
}

/**
 * Returns a structured array defining the instances for this content type.
 *
 * @return mixed.
 *   An associative array specifying the instances we wish to add to our new
 *   node type.
 */
function _flickity_slider_installed_instances() {
  $t = get_t();
  // Create the instance.
  $instance_array = array(
    // Instance of the image field above.
    'slideshow_image' => array(
      'field_name' => 'field_slideshow_image',
      'label' => $t('Slider Image'),
      'cardinality' => 1,
      'required' => TRUE,
      'type' => 'slideshow_image',
      'settings' => array(
        'alt_field' => 1,
        'file_directory' => 'image',
        'file_extensions' => 'png gif jpg jpeg',
        'max_filesize' => '',
        'max_resolution' => '',
        'min_resolution' => '',
        'title_field' => 1,
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'settings' => array(
          'preview_image_style' => 'thumbnail',
          'progress_indicator' => 'throbber',
        ),
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'image',
          'settings' => array('image_style' => 'large', 'image_link' => ''),
          'weight' => -1,
        ),
      ),
    ),
  );
  return $instance_array;
}

/**
 * Implements hook_enable().
 */
function flickity_slider_enable() {
  variable_set('flickity_slider_no_of_slides', 5);
  variable_set('flickity_slider_description_length', 180);
  variable_set('flickity_slider_interval', 5000);
}

/**
 * Implements hook_uninstall().
 */
function flickity_slider_uninstall() {
  // Machine name of the content type.
  $name = 'flickity_slider';
  //Delete all Flickity Slider nodes.
  db_delete('node')
    ->condition('type', $name)
    ->execute();
  // Remove peristant variables that control settings.
  variable_del('additional_settings__active_tab_' . $name);
  variable_del('node_preview_' . $name);
  variable_del('node_options_' . $name);
  variable_del('node_submitted_' . $name);
  variable_del('menu_options_' . $name);
  variable_del('menu_parent_' . $name);
  variable_del('flickity_slider_description_length');
  variable_del('flickity_slider_interval');
  variable_del('flickity_slider_no_of_slides');
  variable_del('flickity_autoplay');
  variable_del('autoplaytime');
  variable_del('flickity_prevnext');
  foreach (array_keys(_flickity_slider_installed_fields()) as $field) {
    field_delete_field($field);
  }
  // Delete our content type.
  node_type_delete($name);
  // Purge all field infromation.
  field_purge_batch(1000);
  // Delete created image style.
  image_style_delete(image_style_load('flickity_slider_style'));
  // Clear the cache tables.
  drupal_flush_all_caches();
}