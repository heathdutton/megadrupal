<?php

/**
 * Implements of hook_enable().
 */
function apachesolr_votingapi_enable() {
  drupal_set_message(t('The Apache Solr votingapi integration module will take effect as nodes when votes are indexed or re-indexed.'));
}

/**
 * Implements hook_FORM_ID_alter().
 * 
 * Let admins bias result order using votingapi score.
 */ 
function apachesolr_votingapi_form_apachesolr_search_bias_form_alter(&$form, &$form_state) {
  $vote_settings = variable_get('apachesolr_votingapi_boost', '0:0');
  
  $options = array(
    '10:2000.0' => '10',
    '8:1000.0' => '9',
    '8:700.0' => '8',
    '8:500.0' => '7',
    '4:300.0' => '6',
    '4:200.0' => '5',
    '4:150.0' => '4',
    '2:150.0' => '3',
    '2:100.0' => '2',
    '1:100.0' => '1',
    '0:0' => t('Normal'),
  );

  $form['result_bias']['apachesolr_votingapi_boost'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#title' => t('Higher votes bias'),
    '#default_value' => $vote_settings,
    '#description' => t('This setting will change the result scoring so that nodes with better average vote scores may appear before those with higher keyword matching.'),
    '#weight' => -2,
  );
}

/**
 * Retrieve which tally is being used by this site as a basis for Solr sorting. See README.txt
 *
 * @return array
 *   A $criteria array for use by votingapi_select_single_result_value().
 */
function apachesolr_votingapi_get_criteria() {
  $criteria_default = array(
    'title' => t('Rating'),
    'entity_type' => 'node',
    'value_type' => 'percent',
    'function' => 'average',
    'tag' => 'vote',
  );
  return variable_get('apachesolr_votingapi_criteria', $criteria_default);
}

/**
 * Implements hook_apachesolr_index_document_build_ENTITY_TYPE().
 *
 * Add the votingapi field to documents before sending them to Solr.
 */
function apachesolr_votingapi_apachesolr_index_document_build_node(ApacheSolrDocument $document, $entity, $env_id) {
  // Sites may alter the variable 'apachesolr_votingapi_criteria' in order to pick the result used for indexing. See README.txt
  $criteria = apachesolr_votingapi_get_criteria();
  $criteria['entity_id'] = $entity->nid;
  unset($criteria['title']);

  // Nodes without any votes will get indexed as 0.
  $value = (int)votingapi_select_single_result_value($criteria);
  $document->addField('fs_votingapi_result', $value);
}

/**
 * Implements hook_apachesolr_query_alter().
 * 
 * Inject admin specified boost for voting.
 */
function apachesolr_votingapi_apachesolr_query_alter($query) {
  // Retrieve the votingapi result in the field list.
  $query->addParam('fl', 'fs_votingapi_result');
  
  // Apply boost based on votes. Based on the boost for comment_count.
  $vote_settings = variable_get('apachesolr_votingapi_boost', '0:0');
  
  // Get $total. Copied from apachesolr_search_search
  $solr = apachesolr_get_solr();
  $data = $solr->getLuke();
  if (isset($data->index->numDocs)) {
    $total = $data->index->numDocs;
  }
  else {
    $total = db_result(db_query("SELECT COUNT(nid) FROM {node}"));
  }
  
  list($vote_steepness, $vote_boost) = explode(':', $vote_settings);
  if ($vote_boost) {
    $query->addParam('bf', "recip(rord(fs_votingapi_result),$vote_steepness,$total,$total)^$vote_boost");
  }
}

/**
 * Implements hook_apachesolr_query_prepare().
 * 
 * Add votes as a sort.
 */
function apachesolr_votingapi_apachesolr_query_prepare($query) {
  $criteria = apachesolr_votingapi_get_criteria();
  $query->setAvailableSort('fs_votingapi_result', array(
    'title' => $criteria['title'],
    'default' => 'desc',
  ));

  $query->addFieldAliases(array('rating' => 'fs_votingapi_result'));
}

/**
 * Implements hook_votingapi_results().
 * 
 * When a vote's tallys are recalculated, mark the node for re-indexing.
 */
function apachesolr_votingapi_votingapi_results($cached, $entity_type, $entity_id) {
  $criteria = apachesolr_votingapi_get_criteria();
  if ($entity_type == $criteria['entity_type']) {
    apachesolr_mark_entity('node', $entity_id);
  }
}
