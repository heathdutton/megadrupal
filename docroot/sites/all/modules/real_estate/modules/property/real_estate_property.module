<?php

/**
 * @file
 * Real Estate Property module.
 */

/**
 * Implements hook_image_default_styles().
 */
function real_estate_property_image_default_styles() {
  $styles = array();

  $styles['real_estate_property_full'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 394,
          'height' => 296,
          'upscale' => TRUE,
        ),
        'weight' => 0,
      ),
    ),
  );

  $styles['real_estate_property_thumbnail'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 100,
          'height' => 70,
        ),
        'weight' => 1,
      ),
    ),
  );

  return $styles;
}

/**
 * Implements hook_views_api().
 */
function real_estate_property_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'real_estate_property') . '/views',
  );
}

/**
 * Function for adding to bundle three fields: Address, Price and Photo.
 */
function _real_estate_property_type_add_few_fields($property_type) {
  if (field_read_instance('node', 'property_address', $property_type) === FALSE) {
    // Add the field Address to the just created bundle.
    $instance = array(
      'field_name' => 'property_address',
      'entity_type' => 'node',
      'label' => 'Address',
      'bundle' => $property_type,
      'required' => TRUE,
      'display' => array(
        'default' => array(
          'label' => 'above',
        ),
      ),

    );
    field_create_instance($instance);
  }

  if (field_read_instance('node', 'property_geo_location', $property_type) === FALSE) {
    // Add the field Geo Location to the just created bundle.
    $instance = array(
      'field_name' => 'property_geo_location',
      'entity_type' => 'node',
      'label' => 'Geo Location',
      'bundle' => $property_type,
      'required' => TRUE,
      'display' => array(
        'default' => array(
          'label' => 'hidden',
        ),
      ),
      'widget' => array(
        'type' => 'geolocation_googlemap',
      ),
    );
    field_create_instance($instance);
  }

  if (field_read_instance('node', 'property_photo', $property_type) === FALSE) {
    // Add the field Photo to the just created bundle.
    $instance = array(
      'field_name' => 'property_photo',
      'entity_type' => 'node',
      'label' => 'Photo',
      'bundle' => $property_type,
      'required' => TRUE,
      'display' => array(
        'default' => array(
          'label' => 'hidden',
        ),
      ),

    );
    field_create_instance($instance);
  }

  if (field_read_instance('node', 'property_price', $property_type) === FALSE) {
    // Add the field Price to the just created bundle.
    $instance = array(
      'field_name' => 'property_price',
      'entity_type' => 'node',
      'label' => 'Price',
      'bundle' => $property_type,
      'required' => FALSE,
      'settings' => array(
        'prefix' => '$',
      ),
      'display' => array(
        'default' => array(
          'label' => 'inline',
        ),
      ),

    );
    field_create_instance($instance);
  }

  if (field_read_instance('node', 'property_lot_size', $property_type) === FALSE) {
    // Add the field Price to the just created bundle.
    $instance = array(
      'field_name' => 'property_lot_size',
      'entity_type' => 'node',
      'label' => 'Lot size',
      'bundle' => $property_type,
      'required' => FALSE,
      'settings' => array(
        'suffix' => ' sq ft',
      ),
      'display' => array(
        'default' => array(
          'label' => 'inline',
        ),
      ),

    );
    field_create_instance($instance);
  }

}

/**
 * Helper function for converting an addressfield data format to a string.
 *
 * @param array $address_field
 *   - a data in an addressfield format
 * @param string $type
 *   - type
 *
 * @return string
 *   - a address in a string format
 */
function _real_estate_property_convert_address($address_field, $type = 'geolocation') {

  // Add some commas for parsing an address by Google Map's API.
  $address = '';
  if (!empty($address_field['premise'])) {
    $address .= $address_field['premise'] . ',';
  }
  if (!empty($address_field['thoroughfare'])) {
    $address .= $address_field['thoroughfare'] . ',';
  }
  if (!empty($address_field['locality'])) {
    $address .= $address_field['locality'] . ',';
  }
  if (!empty($address_field['administrative_area'])) {
    $address .= $address_field['administrative_area'] . ',';
  }
  if (!empty($address_field['sub_administrative_area'])) {
    $address .= $address_field['sub_administrative_area'] . ',';
  }
  if (!empty($address_field['country'])) {
    $address .= $address_field['country'] . ',';
  }
  if (!empty($address_field['postal_code'])) {
    $address .= $address_field['postal_code'] . ',';
  }
  $address = rtrim($address, ', ');

  return $address;
}

/**
 * Implements hook_theme().
 */
function real_estate_property_theme() {
  return array(
    'real_estate_property' => array(
      'render element' => 'elements',
      'template' => 'real_estate_property',
      'path' => drupal_get_path('module', 'real_estate_property') . '/theme',
    ),

  );
}

/**
 * Implements hook_preprocess_node().
 */
function real_estate_property_preprocess_node(&$vars) {
  if ($vars['type'] == 'property') {
    // Use our template for the property type.
    $vars['theme_hook_suggestions'][] = 'real_estate_property';
  }
}

/**
 * Implementation of hook_block_info().
 */
function real_estate_property_block_info() {
  $blocks = array();
  $blocks['re_exposed_filter_form'] = array(
    'info' => t('Real Estate  - Search form (exposed filter form)'),
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'sidebar_first',
  );
  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function real_estate_property_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 're_exposed_filter_form':

      // For a while, retrieve an exposed filter from for our search block.
      $block_exposed_filter = module_invoke('views', 'block_view', '-exp-real_estate_property_list-property_list');
      if (isset($block_exposed_filter['content'])) {
        $block['subject'] = t('Property search');
        $block['content'] = $block_exposed_filter['content'];
      }
      break;
  }
  return $block;
}

/**
 * Implementation of hook_form_alter().
 */
function real_estate_property_form_alter(&$form, &$form_state, $form_id) {
  // Identify our exposed form.
  if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'real_estate_property_list' && $form['#id'] == 'views-exposed-form-real-estate-property-list-property-list') {
    // Placeholders and corrections.
    unset($form['property_price_value']['max']['#title']);
    $form['property_price_value']['min']['#attributes']["placeholder"] = t('from');
    $form['property_price_value']['max']['#attributes']["placeholder"] = t('to');
    $form['#action'] = url(drupal_get_path_alias(), array('absolute' => TRUE));
  }
}
