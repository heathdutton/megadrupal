<?php

/**
 * @file
 * Real Estate Flexslider module.
 */

/**
 * Implements hook_field_formatter_info().
 *
 * Adds the flexslider format option within the manage display form of
 * of an image field.
 */
function real_estate_flexslider_field_formatter_info() {
  return array(
    'real_estate_flexslider' => array(
      'label' => t('Real Estate Flexslider'),
      'field types' => array('image', 'media'),
      'settings' => array(
        'optionset' => 'real_estate_property',
        'optionset_carousel' => 'real_estate_property_carousel',
        'caption' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 *
 * Provides display settings form within the manage display page of
 * an image field with formatter flexslider.
 */
function real_estate_flexslider_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $form = array();

  // Show select box for the option set.
  $optionsets = array();
  ctools_include('export');
  foreach (flexslider_optionset_load_all() as $name => $optionset) {
    $optionsets[$name] = check_plain($optionset->title);
  }

  $form['optionset'] = array(
    '#title' => t('Option set'),
    '#type' => 'select',
    '#options' => $optionsets,
    '#default_value' => $settings['optionset'],
  );

  $form['optionset_carousel'] = array(
    '#title' => t('Option set for carousel'),
    '#type' => 'select',
    '#options' => $optionsets,
    '#default_value' => $settings['optionset_carousel'],
  );

  // If the image field doesn't have the Title field enabled, tell the user.
  if ($instance['settings']['title_field'] == FALSE) {
    $form['caption'] = array(
      '#title' => t('Use image title as the caption'),
      '#type' => 'checkbox',
      '#disabled' => TRUE,
      '#description' => t('You need to <a href="@url">enable the Title field</a> for this image field to be able use it as a caption.', array(
        '@url' => url('admin/structure/types/manage/' . $instance['bundle'] . '/fields/' . $instance['field_name'], array(
          'fragment' => 'edit-instance-settings-title-field',
          'query' => array('destination' => 'admin/structure/types/manage/' . $instance['bundle'] . '/display'),
        ))
      )),
    );
  }
  else {
    $form['caption'] = array(
      '#title' => t('Use image title as the caption'),
      '#type' => 'checkbox',
      '#default_value' => $settings['caption'],
    );
  }

  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 *
 * Displays the summary of the set options of a flexslider formatted image field
 */
function real_estate_flexslider_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  // Load option set.
  ctools_include('export');

  if (!empty($settings['optionset'])) {
    $o = flexslider_optionset_load($settings['optionset']);
    if ($o !== NULL) {
      $optionset = $o;
    }
  }

  // Build settings summary.
  $optionset = isset($optionset) ? $optionset->title : t('Default settings');
  $summary[] = t('Option set: %optionset', array('%optionset' => $optionset));

  if (!empty($settings['optionset_carousel'])) {
    $o = flexslider_optionset_load($settings['optionset_carousel']);
    if ($o !== NULL) {
      $optionset_carousel = $o;
    }
  }

  // Build settings summary.
  $optionset_carousel = isset($optionset_carousel) ? $optionset_carousel->title : t('Default settings');
  $summary[] = t('Option set: %optionset_carousel', array('%optionset_carousel' => $optionset_carousel));

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function real_estate_flexslider_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $items_carousel = array();
  $element = array();
  if (count($items) > 0) {

    $optionset = $display['settings']['optionset'];
    // Load the selected optionset.
    if (!isset($optionset->imagestyle_normal)) {
      $optionset = flexslider_optionset_load('real_estate_property');
    }

    $optionset_carousel = $display['settings']['optionset_carousel'];
    // Load the selected optionset.
    if (!isset($optionset_carousel->imagestyle_normal)) {
      $optionset_carousel = flexslider_optionset_load('real_estate_property_carousel');
    }

    foreach ($items as $key => $item) {
      $tmp = $item;
      $item = array();
      $item['item'] = $tmp;

      // Setup the variables for calling theme_image_style.
      $item['slide']['path'] = $item['item']['uri'];
      $item['slide']['width'] = $item['item']['width'];
      $item['slide']['height'] = $item['item']['height'];
      $item['slide']['alt'] = $item['item']['alt'];
      $item['slide']['title'] = $item['item']['title'];

      // Check caption settings.
      if ($display['settings']['caption']) {
        $item['caption'] = filter_xss($item['item']['title']);
      }

      // Render the slide item for top part of the slider.
      $item['slide']['style_name'] = $optionset->imagestyle_normal;

      $items[$key] = array();
      if (!empty($item['slide']['style_name'])) {
        // Generate the HTML for the slide.
        $items[$key]['slide'] = theme('image_style', $item['slide']);
      }
      else {
        // Generate the HTML for the slide.
        $items[$key]['slide'] = theme('image', $item['slide']);
      }
      $items[$key]['item'] = $item['item'];

      // Render the slide item for carousel.
      $item['slide']['style_name'] = $optionset_carousel->imagestyle_normal;

      if (!empty($item['slide']['style_name'])) {
        // Generate the HTML for the slide.
        $items_carousel[$key]['slide'] = theme('image_style', $item['slide']);
      }
      else {
        // Generate the HTML for the slide.
        $items_carousel[$key]['slide'] = theme('image', $item['slide']);
      }
      $items_carousel[$key]['item'] = $item['item'];

    }

    $element = array(
      '#theme' => 'real_estate_flexslider',
      '#items' => $items,
      '#settings' => $display['settings'],
      '#items_carousel' => $items_carousel,
      '#settings_carousel' => $display['settings'],
    );
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function real_estate_flexslider_theme() {
  return array(
    // Container for nav elements (arrows).
    'real_estate_flexslider' => array(
      'variables' => array(
        'items' => array(),
        'settings' => array(),
        'items_carousel' => array(),
        'settings_carousel' => array(),
      ),
      'template' => 'theme/real_estate_flexslider',

    ),

  );
}

/**
 * Template preprocess handler for 'flexslider' theme.
 */
function template_preprocess_real_estate_flexslider(&$vars) {

  // Reference configuration variables.
  $optionset = & $vars['settings']['optionset'];
  $settings = & $vars['settings'];
  $items = & $vars['items'];

  // Set the list type.
  $settings['type'] = 'ul';

  // Load the selected optionset.
  if (!empty($optionset)) {
    $optionset = flexslider_optionset_load($optionset);
  }

  // Check if an optionset was loaded.
  if (empty($optionset)) {
    // Fall back to 'default' option set.
    $optionset = flexslider_optionset_load('default');
    watchdog('flexslider', 'Fallback to default optionset.', array(), WATCHDOG_WARNING);
  }

  // Configure attributes for containing elements.
  $attributes = array();
  // Merge with defined attributes.
  if (isset($settings['attributes']) and is_array($settings['attributes'])) {
    $attributes += $settings['attributes'];
  }

  // Each flexslider instance gets a unique id.
  $flexslider_id = & drupal_static('flexslider_id', 0);
  $attributes['id'] = 'flexslider-' . ++$flexslider_id;

  // Add the flexslider class to be namespaced.
  $attributes['class'][] = 'flexslider';

  // Add the namespace to any classes.
  if (!empty($attributes['class']) &&
    !empty($optionset->options['namespace'])
  ) {
    foreach ($attributes['class'] as $key => $value) {
      $attributes['class'][$key] = $optionset->options['namespace'] . $value;
    }
  }

  // Add default class.
  $attributes['class'][] = 'flexslider';

  // Add the attributes to the settings array.
  $settings['attributes'] = $attributes;

  // Finally, add the FlexSlider library.
  flexslider_add($settings['attributes']['id'], $optionset);

  $attributes['id'] = 'flexslider-' . ++$flexslider_id;
  $settings['attributes_carousel'] = $attributes;

  // Reference configuration variables.
  $optionset_carousel = & $vars['settings']['optionset_carousel'];
  $optionset_carousel = flexslider_optionset_load($optionset_carousel);

  flexslider_add($settings['attributes_carousel']['id'], $optionset_carousel);
}
