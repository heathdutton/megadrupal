<?php
/**
 * @file
 * Provides primary Drupal hook implementations.
 *
 * @author Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 */

/**
 * Sample server to send data to.
 */
define('SAMPLE_SERVER', 'http://survey.reviewdriven.com/');

/**
 * Implements hook_menu().
 */
function sample_menu() {
  $items = array();

  $items['admin/sample'] = array(
    'title' => 'Sample',
    'description' => 'Sample data about the server environment and report it to a central location.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sample_confirm_form'),
    'access arguments' => array('access administration pages'),
  );

  return $items;
}

/**
 * Confirmation sample data before sending.
 */
function sample_confirm_form($form, &$form_state) {
  // Defaults if SQLite PDO extension is not available.
  $data = array(
    'pdo' => FALSE,
    'version' => 'n/a',
    'temp' => FALSE,
    'public' => FALSE,
  );

  if (extension_loaded('pdo_sqlite')) {
    // Perform various checks of the SQLite capability.
    $data['pdo'] = TRUE;
    $data['version'] = sqlite_libversion();

    $temp = drupal_realpath('temporary://drupal_' . sha1(drupal_random_bytes(100)) . '.sqlite');
    $public = drupal_realpath('public://drupal_' . sha1(drupal_random_bytes(100)) . '.sqlite');

    try {
      $db_temp = new PDO('sqlite:' . $temp);
    }
    catch (Exception $e) {}
    try {
      $db_public = new PDO('sqlite:' . $public);
    }
    catch (Exception $e) {}

    file_unmanaged_delete($temp);
    file_unmanaged_delete($public);

    $data['temp'] = isset($db_temp) && is_a($db_temp, 'PDO');
    $data['public'] = isset($db_public) && is_a($db_public, 'PDO');
  }

  // Display collected data to user so they can confirm its accuracy.
  $form['#data'] = $data;
  $description = t('If the data looks acurate please send it to the central repository.') . sample_format_results($data);
  return confirm_form($form, t('Send sampled data?'), 'admin', $description, t('Send'));
}

/**
 * Send sample data to the sample server.
 */
function sample_confirm_form_submit($form, &$form_state) {
  global $base_url;
  $data = $form['#data'];

  // Generate node structure containing sample data.
  $node = array();
  $node['type'] = 'sqlite';
  $node['title'] = drupal_hmac_base64($base_url, drupal_get_private_key());
  foreach ($data as $key => $value) {
    if (is_bool($value)) {
      $node['field_' . $key][LANGUAGE_NONE]['value'] = (int) $value;
    }
    else {
      $node['field_' . $key][LANGUAGE_NONE][0]['value'] = $value;
    }
  }

  // Send to sample server using REST.
  $options = array(
    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
    'method' => 'POST',
    'data' => http_build_query(array('node' => $node), '', '&'),
  );
  $result = drupal_http_request(SAMPLE_SERVER . 'sample/node', $options);
  if ($result->code == 200) {
    $data = json_decode($result->data, TRUE);
    drupal_set_message(l(t('View your public sample'), SAMPLE_SERVER . 'node/' . $data['nid'], array('absolute' => TRUE)));
  }
  else {
    drupal_set_message(t('Failed to submit sample. Make sure you can access !server. !details',
      array('!server' => l(SAMPLE_SERVER, SAMPLE_SERVER), '!details' => json_encode(array('code' => $result->code, 'error' => $result->error)))), 'error');
  }
}

/**
 * Format sample data for presentation to user.
 *
 * @param $data
 *   An associative array of data.
 * @return
 *   Formatted data as a string of HTML.
 */
function sample_format_results($data) {
  $descriptions = array(
    'pdo' => t('SQLite PDO extension loaded'),
    'version' => t('SQLite library version'),
    'temp' => t('SQLite database created in temporary directory'),
    'public' => t('SQLite database created in public files directory'),
  );
  $rows = array();
  foreach ($descriptions as $key => $description) {
    $rows[] = array($description, json_encode($data[$key]));
  }
  return theme('table', array('rows' => $rows));
}
