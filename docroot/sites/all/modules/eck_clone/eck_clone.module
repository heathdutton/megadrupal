<?php

define('ECK_CLONE_PREPOPULATE', 'prepopulate');
define('ECK_CLONE_SAVEEDIT', 'saveedit');

/**
 * Implements hook_permission().
 */
function eck_clone_permission() {
  // Generate permissions Entity Types / Bundles.
  $permissions = array();
  foreach (EntityType::loadAll() as $entity_type) {
    foreach (Bundle::loadByEntityType($entity_type) as $bundle) {
      $permission = "clone eck {$entity_type->name} {$bundle->name}";
      $title = t('Clone ECK: @entity_type - @bundle', array(
        '@entity_type' => $entity_type->label,
        '@bundle' => $bundle->label
      ));

      $permissions[$permission] = array(
        'title' => $title,
      );
    }
  }

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function eck_clone_menu() {
  $items = array();

  $items['admin/config/content/eck_clone'] = array(
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eck_clone_settings_form'),
    'title' => 'ECK Clone',
    'file' => 'eck_clone.pages.inc',
    'description' => 'Allows users to clone (copy then edit) an existing ECK entity.',
  );

  // Generate clone tabs for all Entity Types / Bundles.
  foreach (EntityType::loadAll() as $entity_type) {
    foreach (Bundle::loadByEntityType($entity_type) as $bundle) {
      $path = "{$entity_type->name}/{$bundle->name}/%eck_clone/clone";
      $items[$path] = array(
        'title' => 'Clone',
        'page callback' => 'eck_clone_page',
        'page arguments' => array(2),
        'access arguments' => array("clone eck {$entity_type->name} {$bundle->name}"),
        'type' => MENU_LOCAL_ACTION,
        'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
        'weight' => 2,
      );

      $use_admin_form = variable_get('eck_clone_admin_edit_form', FALSE);
      if ($use_admin_form) {
        $path = "admin/structure/entity-type/{$entity_type->name}/{$bundle->name}/%eck_clone/clone";
        $items[$path] = array(
          'title' => 'Clone',
          'page callback' => 'eck_clone_page',
          'page arguments' => array(5),
          'access arguments' => array("clone eck {$entity_type->name} {$bundle->name}"),
          'type' => MENU_CALLBACK,
        );
      }
    }
  }

  return $items;
}

/**
 * Load the entity.
 */
function eck_clone_load($id) {
  if (drupal_match_path($_GET['q'], 'admin/structure/entity-type/*')) {
    $entity_type = arg(3);
  }
  else {
    $entity_type = arg(0);
  }

  return entity_load_single($entity_type, $id);
}

/**
 * Page callback for cloning an entity.
 */
function eck_clone_page($entity) {
  if (variable_get('eck_clone_method', ECK_CLONE_PREPOPULATE) == ECK_CLONE_PREPOPULATE) {
    // Check if we need to to use the admin edit form.
    if (variable_get('eck_clone_admin_edit_form', FALSE) && !drupal_match_path($_GET['q'], 'admin/structure/entity-type/*')) {
      $entity_type = $entity->entityType();
      $bundle = $entity->bundle();
      drupal_goto("admin/structure/entity-type/{$entity_type}/{$bundle}/{$entity->id}/clone");
      return;
    }

    $entity_form = drupal_get_form('clone_eck_entity_form', $entity);
    return $entity_form;
  }

  if (variable_get('eck_clone_method', ECK_CLONE_PREPOPULATE) == ECK_CLONE_SAVEEDIT) {
    $confirm_form = drupal_get_form('clone_eck_confirm_form', $entity);
    return $confirm_form;
  }

  drupal_not_found();
  return;
}

/**
 *  Ask user to confirm the cloning of ECK entity.
 */
function clone_eck_confirm_form($form, &$form_state, $entity) {
  $form['entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  $uri = eck__entity__uri($entity);

  return confirm_form($form,
    t('Are you sure you want to clone this entity?'),
    $uri['path'],
    '<p>' . t('This action will create a new entity. You will then be redirected to the edit page for the new entity.') . '</p>',
    t('Clone'),
    t('Cancel')
  );
}

/**
 * Submit of confirmation for cloning an ECK entity.
 */
function clone_eck_confirm_form_submit($form, $form_state) {
  $entity = $form_state['values']['entity'];

  // Clone entity and redirect to edit page.
  $cloned_entity = eck_clone_clone_entity($entity);
  $uri = eck__entity__uri($cloned_entity);

  $admin__edit_form = variable_get('eck_clone_admin_edit_form', FALSE);
  if ($admin__edit_form) {
    // Get the admin path to edit the entity.
    $entity_type = $entity->entityType();
    $bundle = $entity->bundle();
    $edit_path = "admin/structure/entity-type/{$entity_type}/{$bundle}/{$entity->id}/edit";
  }
  else {
    $edit_path = $uri['path'] . '/edit';
  }

  drupal_goto($edit_path);
}

/**
 * Form to create a new ECK Entity.
 */
function clone_eck_entity_form($form, $form_state, $entity) {
  $entity->id = NULL;
  $form = eck__entity__form($form, $form_state, $entity);

  if (isset($form['title'])) {
    $title = t('Clone of !title', array('!title' => $entity->title));
    $form['title']['#default_value'] = $title;
  }

  $form['#validate'] = array('eck__entity__form_validate');
  $form['#submit'] = array('eck__entity__form_submit');

  return $form;
}

/**
 * Clone a ECK entity and return the cloned one.
 */
function eck_clone_clone_entity($entity, $account = FALSE) {
  $original_entity = clone $entity;

  $entity->id = NULL;
  if ($account && isset($entity->uid)) {
    $entity->uid = $account->uid;
  }

  if (isset($entity->created)) {
    $entity->created = NULL;
  }

  if (isset($entity->changed)) {
    $entity->changed = NULL;
  }

  if (isset($entity->title)) {
    $entity->title = t('Clone of !title', array('!title' => $entity->title));
  }

  $context = array('original_entity' => $original_entity);
  drupal_alter('clone_eck', $entity, $context);

  entity_save($entity->type, $entity);

  return $entity;
}

/**
 * Implements hook_uninstall().
 */
function eck_clone_uninstall() {
  variable_del('eck_clone_method');
  variable_del('eck_clone_admin_edit_form');
}
