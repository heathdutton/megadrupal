<?php

/**
 * @file
 * Implements the necessary hooks for the Scroll Button module.
 */

/**
 * Translation context used in function t().
 */
define('SCROLL_BUTTON_NAME_CONTEXT', 'scroll_button');

/**
 * Implements hook_help().
 */
function scroll_button_help($path, $arg) {
  switch ($path) {
    case 'admin/help#scroll_button':
      $output = '';

      // Get path to file and check if it exists.
      $file_path = drupal_get_path('module', 'scroll_button') . '/README.txt';
      if (!file_exists($file_path)) {
        return $output;
      }

      // Get content of README.txt.
      $output = file_get_contents($file_path);

      // Check if markdown module exists, if yes - filter content throw
      // module's filter, otherwise - pass content throw filtered_html format.
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $is_callback = isset($filters['filter_markdown']['process callback']);

        // Check callback for existence.
        if ($is_callback && function_exists($filters['filter_markdown']['process callback'])) {
          $function = $filters['filter_markdown']['process callback'];
          $output = $function($output, NULL);
        }
      }
      else {
        $output = check_markup($output, 'filtered_html');
      }
      return $output;
  }
}

/**
 * Implements hook_block_info().
 */
function scroll_button_block_info() {
  // Used in translation context.
  $context = array('context' => SCROLL_BUTTON_NAME_CONTEXT);
  return array(
    'scroll_button' => array(
      'info'  => t('Scroll Button', array(), $context),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
  );
}

/**
 * Implements hook_block_configure().
 */
function scroll_button_block_configure($delta = '') {
  // Get settings.
  $default = variable_get($delta . '_settings', scroll_button_default_block_settings());

  // Include necessary css, js and library files.
  $path = drupal_get_path('module', 'scroll_button');
  $form['#attached']['library'][] = array('system', 'farbtastic');
  $form['#attached']['js'][] = $path . '/js/scroll_button.admin.js';
  $form['#attached']['js'][] = array(
    'data' => array($delta => $default),
    'type' => 'setting',
  );
  $form['#attached']['css'][] = $path . '/css/scroll_button.admin.css';

  $context = array('context' => SCROLL_BUTTON_NAME_CONTEXT);
  $form['wrapper'] = array(
    '#type' => 'fieldset',
    '#title' => t('Scroll Button Settings', array(), $context),
    '#attributes' => array('class' => array('scroll-button-settings')),
  );

  // Position of the button.
  $form['wrapper']['position'] = array(
    '#type' => 'select',
    '#title' => t('Position', array(), $context),
    '#options' => array(
      'float'  => t('Float', array(), $context),
      'static' => t('Static', array(), $context),
    ),
    '#default_value' => $default['position'],
  );

  $form['wrapper']['buttons'] = array(
    '#type' => 'item',
    '#title' => t('Scroll Buttons', array(), $context),
    '#description' => t('Choose the buttons that will be enabled.', array(), $context),
    '#field_prefix' => '<div class="container">',
    '#field_suffix' => '</div>',
    '#tree' => TRUE,
  );

  // State behaviour of position element.
  $states = array(':input[name="position"]' => array('value' => 'float'));

  // "Always show" option of the buttons.
  $form['wrapper']['always_show'] = array(
    '#type' => 'checkbox',
    '#title' => t('Always show', array(), $context),
    '#description' => t('If checked the enabled button(s) will be always shown.', array(), $context),
    '#default_value' => $default['always_show'],
    '#states' => array(
      'enabled' => $states,
      'visible' => $states,
    ),
  );

  // Define top and bottom buttons.
  $buttons = array(
    'top' => t('Top', array(), $context),
    'bot' => t('Bottom', array(), $context),
  );

  foreach ($buttons as $button => $text) {
    $form['wrapper']['buttons'][$button] = array(
      '#type' => 'checkbox',
      '#title' => $text,
      '#default_value' => $default['buttons'][$button],
    );
    // Add js states behaviour for last checkbox.
    if ($button == 'bot') {
      $form['wrapper']['buttons'][$button]['#states'] = array(
        'enabled' => $states,
      );
    }
  }

  // Speed of scrolling.
  $form['wrapper']['speed'] = array(
    '#type' => 'select',
    '#title' => t('Speed', array(), $context),
    '#options' => array(
      'fast'  => t('fast', array(), $context),
      'slow'  => t('slow', array(), $context),
      'extra' => t('extra', array(), $context),
    ),
    '#description' => t('Speed of scrolling. If you would like set special value of milliseconds choose "extra" parameter in dropdown and enter value in duration field.', array(), $context),
    '#default_value' => $default['speed'],
  );

  // Duration of scrolling.
  $duration_states = array(':input[name="speed"]' => array('value' => 'extra'));
  $form['wrapper']['duration'] = array(
    '#type' => 'textfield',
    '#title' => t('Duration', array(), $context),
    '#field_suffix' => t('milliseconds', array(), $context),
    '#size' => 5,
    '#description' => t('Duration of scrolling. A number determining how long the animation will run.', array(), $context),
    '#default_value' => $default['duration'],
    '#element_validate' => array('element_validate_integer_positive'),
    '#states' => array(
      'visible'  => $duration_states,
      'enabled'  => $duration_states,
      'required' => $duration_states,
    ),
  );

  // Distance.
  $form['wrapper']['distance'] = array(
    '#type' => 'textfield',
    '#title' => t('Distance', array(), $context),
    '#description' => t('Defines the boundary where button(s) appears (disappears).', array(), $context),
    '#default_value' => $default['distance'],
    '#size' => 3,
    '#maxlength' => 3,
    '#element_validate' => array('element_validate_integer_positive'),
    '#field_suffix' => t('pixels', array(), $context),
    '#states' => array(
      'visible'  => $states,
      'enabled'  => $states,
      'required' => $states,
    ),
  );

  // Offset container.
  $form['wrapper']['offset'] = array(
    '#type' => 'container',
    '#states' => array(
      'visible' => $states,
      'enabled' => $states,
    ),
    '#attributes' => array(
      'class' => array(
        'clearfix',
        'scroll-button-offset',
      ),
    ),
    '#tree' => TRUE,
  );

  $offset = array(
    'x' => array('left', 'width', 'horizontal'),
    'y' => array('bottom', 'height', 'vertical'),
  );

  foreach ($offset as $axis => $pos) {
    $form['wrapper']['offset'][$axis] = array(
      '#type'  => 'textfield',
      '#title' => t('Offset to the @pos', array('@pos' => $pos[0]), $context),
      '#size'  => 3,
      '#default_value' => $default['offset'][$axis],
      '#field_suffix'  => t('% of page @pos', array('@pos' => $pos[1]), $context),
      '#description'   => t('Defines the @pos location of the button.', array('@pos' => $pos[2]), $context),
      '#element_validate' => array('scroll_button_offset_validate'),
    );
  }

  $form['wrapper']['css'] = array(
    '#type' => 'textfield',
    '#title' => t('CSS classes', array(), $context),
    '#default_value' => $default['css'],
    '#description' => t('Add your CSS class. If you would like to add several classes - separate them by comma.', array(), $context),
  );

  $form['wrapper']['color'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'scroll-button-color',
        'clearfix',
      ),
    ),
    '#tree' => TRUE,
  );

  $colors = array(
    'bg' => t('Default background color of the scroll button.', array(), $context),
    'hv' => t('Background color when the mouse over the scroll button.', array(), $context),
  );

  foreach ($colors as $type => $text) {
    $form['wrapper']['color'][$type] = array(
      '#type'   => 'textfield',
      '#size'   => 8,
      '#prefix' => '<div><div class="scroll-farbtastic"></div>',
      '#suffix' => '</div>',
      '#default_value' => $default['color'][$type],
      '#description' => $text,
      '#element_validate' => array('scroll_button_color_validate'),
    );
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function scroll_button_block_save($delta, $edit = array()) {
  $values = array_keys(scroll_button_default_block_settings());
  $values = array_flip($values);
  $data = array_intersect_key($edit, $values);
  variable_set($delta . '_settings', $data);
}

/**
 * Implements hook_block_view().
 */
function scroll_button_block_view($delta = '') {
  // Block content.
  $content  = '';
  $settings = variable_get($delta . '_settings', scroll_button_default_block_settings());
  $settings['title'] = $settings['title'] == '<none>' ? '' : $settings['title'];

  // Collect the buttons.
  foreach ($settings['buttons'] as $button => $value) {
    if (empty($value)) {
      continue;
    }
    // Define attributes.
    $attr = array('id' => 'scroll_' . $button);
    $attr['class'][] = str_replace('_', '-', $delta);
    $attr['class'][] = $settings['position'];
    $attr['class'][] = !empty($settings['always_show']) ? 'always-show' : '';
    $attr['style'][] = format_string('background-color:@color;', array('@color' => $settings['color']['bg']));
    $attr['title'] = $settings['title'];

    // Add css styles from settings.
    scroll_button_add_styles($attr['style'], $settings);

    // Add attributes to output.
    $content .= '<div' . drupal_attributes($attr) . '></div>';
  }

  // Prepare the block content.
  $block['content']['#markup'] = $content;

  // Include necessary files.
  $path = drupal_get_path('module', 'scroll_button');
  $block['content']['#attached']['css'][] = $path . '/css/scroll_button.css';
  $block['content']['#attached']['js'][]  = $path . '/js/scroll_button.js';
  $block['content']['#attached']['js'][]  = array(
    'data' => array($delta => $settings),
    'type' => 'setting',
  );

  return $block;
}

/**
 * Returns the default settings of scroll block.
 */
function scroll_button_default_block_settings() {
  $settings = array(
    'title' => '',
    'position' => 'float',
    'always_show' => 0,
    'buttons'  => array(
      'top' => 1,
      'bot' => 1,
    ),
    'speed' => 'slow',
    'duration' => 400,
    'distance' => 100,
    'offset' => array(
      'x' => 80,
      'y' => 3,
    ),
    'css' => '',
    'color' => array(
      'bg' => '#bababa',
      'hv' => '#999999',
    ),
  );

  // Give opportunity other modules change settings.
  drupal_alter('scroll_button_default_settings', $settings);
  return $settings;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function scroll_button_preprocess_block(&$vars) {
  if (isset($vars['block']->delta) && $vars['block']->delta == 'scroll_button') {
    $delta = $vars['block']->delta;
    $settings = variable_get($delta . '_settings', scroll_button_default_block_settings());
    $settings['css'] = check_plain($settings['css']);

    $vars['classes_array'][] = $settings['position'];
    $css['classes_array'] = explode(',', $settings['css']);
    $css['classes_array'] = array_filter($css['classes_array']);
    $vars['classes_array'] = array_merge($vars['classes_array'], $css['classes_array']);

    // Check existence of the style.
    if (!isset($vars['attributes_array']['style'])) {
      $vars['attributes_array']['style'] = array();
    }

    // Add css styles from settings.
    scroll_button_add_styles($vars['attributes_array']['style'], $settings);
    $vars['block']->subject = '';
  }
}

/**
 * Adds css styles from settings.
 */
function scroll_button_add_styles(array &$style, $settings) {
  // Add offsets styles only for float buttons.
  if ($settings['position'] != 'float') {
    return;
  }

  // Do not include css style if y offset is not set.
  if (isset($settings['offset']['y'])) {
    $style[] = format_string('bottom:@y%;', array('@y' => $settings['offset']['y']));
  }

  // Do not include css style if x offset is not set.
  if (isset($settings['offset']['x'])) {
    $style[] = format_string('left:@x%;', array('@x' => $settings['offset']['x']));
  }
}

/**
 * Form element validation handler for color.
 */
function scroll_button_color_validate($element) {
  // Get value and check it for valid color.
  $value = $element['#value'];
  preg_match('/#([a-f]|[A-F]|[\d]){3}(([a-f]|[A-F]|[\d]){3})?\b/', $value, $match);

  if (empty($match[0])) {
    // Used in translation context.
    $context = array('context' => SCROLL_BUTTON_NAME_CONTEXT);
    form_error($element, t('Please enter the valid color (use color wheel).', array(), $context));
  }
}

/**
 * Form element validation handler for offset.
 */
function scroll_button_offset_validate($element) {
  $value = $element['#value'];
  if ($value !== '' && (!is_numeric($value) || intval($value) != $value || $value < 0)) {
    // Used in translation context.
    $context = array('context' => SCROLL_BUTTON_NAME_CONTEXT);
    form_error($element, t("%title must be positive integer or zero", array(
      '%title' => $element['#title'],
    ), $context));
  }
}
