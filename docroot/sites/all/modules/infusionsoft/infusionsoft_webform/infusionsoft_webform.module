<?php
/**
 * @file
 * Ability to map webform submissions to the Infusionsoft API module.
 */

/**
 * Implements hook_menu().
 *
 * Add a configuration tab for Infusionsoft integration.
 */
function infusionsoft_webform_menu() {
  $items['node/%webform_menu/webform/infusionsoft'] = array(
    'title' => 'Infusionsoft',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('infusionsoft_webform_configure_form', 1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Main configuration form for editing a webform node.
 */
function infusionsoft_webform_configure_form($form, &$form_state, $node) {
  // Make sure that API settings are configured.
  $is_configured = infusionsoft_check_settings();

  if (!$is_configured) {
    return FALSE;
  }

  $settings = infusionsoft_webform_get_settings($node->nid);

  $form['#node'] = $node;

  $form['#submit'] = array('infusionsoft_webform_configure_form_submit');

  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );

  $form['infusionsoft'] = array(
    '#type' => 'fieldset',
    '#title' => t('Infusionsoft integration settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  // Submit to Infusionsoft API?
  $form['infusionsoft']['submission'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send form submissions to Infusionsoft API'),
    '#description' => t('Checking this box will integrate this form with Infusionsoft using the settings below.'),
  );
  if (isset($settings->submit)) {
    $form['infusionsoft']['submission']['#default_value'] = $settings->submit;
  }

  // Groups (tags) to add contact to.
  $group_options = infusionsoft_get_groups();
  $form['infusionsoft']['groups'] = array(
    '#type' => 'select',
    '#title' => t('Tags to add to contact'),
    '#options' => $group_options,
    '#multiple' => TRUE,
    '#size' => min(12, count($group_options)),
  );
  if (isset($settings->groups)) {
    $form['infusionsoft']['groups']['#default_value'] = preg_split('/[\n\r]+/', $settings->groups);
  }

  // Campaigns to add contact to.
  $campaign_options = infusionsoft_get_campaigns();
  $form['infusionsoft']['campaigns'] = array(
    '#type' => 'select',
    '#title' => t('Campaigns to add contact to'),
    '#description' => t('These campaigns are for Legacy Followup sequences, not Campaign Builder campaigns. See !link for more information.',
      array('!link' => l(t('this discussion'), 'http://community.infusionsoft.com/showthread.php/14942-How-to-get-a-listing-campaigns-using-API'))),
    '#options' => $campaign_options,
    '#multiple' => TRUE,
    '#size' => min(12, count($campaign_options)),
  );
  if (isset($settings->campaigns)) {
    $form['infusionsoft']['campaigns']['#default_value'] = preg_split('/[\n\r]+/', $settings->campaigns);
  }

  // Contact opt-in reason.
  $form['infusionsoft']['opt_in_reason'] = array(
    '#type' => 'textfield',
    '#title' => t('Contact opt-in reason'),
    '#description' => t('If left blank, the contact will not be opted-in.'),
  );
  if (isset($settings->opt_in_reason)) {
    $form['infusionsoft']['opt_in_reason']['#default_value'] = $settings->opt_in_reason;
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
    '#weight' => 10,
  );

  return $form;
}

/**
 * Submit handler for the Infusionsoft webform configuration form.
 */
function infusionsoft_webform_configure_form_submit($form, &$form_state) {
  // Save configuration to database.
  $nid = $form_state['values']['nid'];
  if (infusionsoft_webform_get_settings($nid)) {
    // Update existing record.
    $retval = db_update('infusionsoft_webform')
      ->fields(array(
        'submit' => $form_state['values']['submission'] ? 1 : 0,
        'groups' => implode("\n", $form_state['values']['groups']),
        'campaigns' => implode("\n", $form_state['values']['campaigns']),
        'opt_in_reason' => $form_state['values']['opt_in_reason'],
      ))
      ->condition('nid', $nid)
      ->execute();
  }
  else {
    // Insert new record.
    $retval = db_insert('infusionsoft_webform')
      ->fields(array(
        'nid' => (int) $nid,
        'submit' => $form_state['values']['submission'] ? 1 : 0,
        'groups' => implode("\n", $form_state['values']['groups']),
        'campaigns' => implode("\n", $form_state['values']['campaigns']),
        'opt_in_reason' => $form_state['values']['opt_in_reason'],
      ))
      ->execute();
  }

  drupal_set_message(t('Infusion integration settings saved.'));
}

/**
 * Get Infusionsoft API webform configuration settings from database.
 *
 * @param int $nid
 *   Node ID of webform node to check.
 * @return mixed
 *   Standard object of column values or FALSE if no values exist.
 */
function infusionsoft_webform_get_settings($nid) {
  $result = db_query("SELECT nid, submit, groups, campaigns, opt_in_reason FROM {infusionsoft_webform} WHERE nid = :nid", array(':nid' => $nid));

  $settings = $result->fetchObject();

  if ($settings) {
    return $settings;
  }
  return FALSE;
}

/**
 * Implements hook_webform_submission_presave().
 */
function infusionsoft_webform_webform_submission_presave($node, &$submission) {
  // Submit matching contact fields to Infusionsoft API, if requested.
  $settings = infusionsoft_webform_get_settings($node->nid);

  // Only process if configured to submit to Infusionsoft.
  if ($settings && $settings->submit && isset($submission->data) && is_array($submission->data)) {
    $service = wsclient_service_load('infusionsoft_api');
    $fields = infusionsoft_fields($service, "infusionsoft_contact", TRUE);
    $components = $node->webform['components'];
    $contact = array();

    // Build a list of components for use later.
    foreach ($submission->data as $key => $value) {
      $form_key = $components[$key]['form_key'];

      // Check if the form key matches an Infusionsoft API key.
      if (in_array($form_key, $fields)) {
        //@todo Right now we just assume that all values are scalar.
        $value = $value['value'][0];
        // Add the form value to the contact field array.
        $contact[$form_key] = $value;
      }
    }

    // Attempt to find existing Infusionsoft contact by email address.
    if (isset($contact['Email'])) {
      $id = infusionsoft_contact_load_by_email($contact['Email']);

      if ($id) {
        $existing_contact = infusionsoft_contact_load($id);
        $contact = array_merge($existing_contact, $contact);
        // Update contact in Infusionsoft.
        $retval = infusionsoft_contact_update($id, $contact);
      }
      else {
        // Create new contact in Infusionsoft.
        $id = infusionsoft_contact_add($contact);
      }
    }
    else {
      // Create new contact in Infusionsoft.
      $id = infusionsoft_contact_add($contact);
    }

    // Add any tags requested to the contact.
    $groups = explode("\n", $settings->groups);

    if ($groups) {
      foreach ($groups as $group) {
        $retval = infusionsoft_user_op('add', 'group', $id, $group);
      }
    }

    // Add contact to requested groups.
    $campaigns = explode("\n", $settings->campaigns);

    if ($campaigns) {
      foreach ($campaigns as $campaign) {
        $retval = infusionsoft_user_op('add', 'campaign', $id, $campaign);
      }
    }

    // Opt-in contact, if requested.
    if ($settings->opt_in_reason && isset($contact['Email'])) {
      $retval = infusionsoft_contact_opt_in($contact['Email'], $settings->opt_in_reason);
    }
  }
}

/**
 * Implimentats hook_form_FORM_ID_alter().
 *
 * Add Infusionsoft-integration-specific information to the Field Key field.
 */
function infusionsoft_webform_form_webform_component_edit_form_alter(&$form, &$form_state, $form_id) {
  $desc = t('In order for Infusionsoft API integration to work, this key must match an !link.',
    array('!link' => l(t('Infusionsoft contact table field name'), 'http://help.infusionsoft.com/developers/tables/contact')));
  $form['form_key']['#description'] .= '<br /><strong> ' . $desc . '</strong>';
}
