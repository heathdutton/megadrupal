<?php
/**
 * @file
 * Contains user page integration, API integration and admin settings page.
 */
define('INFUSIONSOFT_API_ENDPOINT', 'infusionsoft.com/api/xmlrpc');

/**
 * Implements hook_menu().
 */
function infusionsoft_menu() {
  $items['admin/config/services/infusionsoft'] = array(
    'title' => 'Infusionsoft Settings',
    'description' => 'Set Infusionsoft Configuration Settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('infusionsoft_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'infusionsoft.admin.inc',
  );

  // Tab on the user admin page
  $items['user/%user/infusionsoft'] = array(
    'title' => 'Infusionsoft Contact',
    'description' => 'Infusionsoft Contact Information.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('infusionsoft_user_contact_form', 1),
    'access arguments' => array('administer infusionsoft'),
    'file' => 'infusionsoft.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_perm().
 */
function infusionsoft_permission() {
  return array(
    'administer infusionsoft' => array(
      'title' => t('Administer Infusionsoft'),
      'description' => t('Allow user to add contacts to Infusionsoft and add or remove from Groups.'),
    ),
  );
}

/**
 * Update a contact from a Drupal User. If no contact exists, create a contact from a Drupal User
 *
 * @param StdClass $account
 *   A Drupal User.
 *
 * @return stdClass
 *   return the User object.
 *
 */
function infusionsoft_user_to_contact($account) {
  // If the user already has a contact, update it
  if (!empty($account->field_infusionsoft_id[LANGUAGE_NONE][0]['value'])) {

	$infusionsoft_id = $account->field_infusionsoft_id[LANGUAGE_NONE][0]['value'];

	$contact = array(
      'Email' => $account->mail,
      'Username' => $account->name,
    );

    drupal_alter('infusionsoft_contact', $contact, $account);

    infusionsoft_contact_update($infusionsoft_id, $contact);

    if (module_exists('rules')) {
      rules_invoke_event("infusionsoft_contact_update", $account);
    }

	return $account;
  }

  // Else, create a new contact for the user
  $contact = array(
    'Email' => $account->mail,
    'Username' => $account->name,
  );

  drupal_alter('infusionsoft_contact', $contact, $account);

  $value = infusionsoft_contact_add($contact);

  if ($value) {
    $account->field_infusionsoft_id[LANGUAGE_NONE][0]['value'] = $value;
    user_save($account);

    if (module_exists('rules')) {
      rules_invoke_event("infusionsoft_contact_add", $account);
    }
  }

  return $account;
}

/**
 * This is a helper function to retrive a Infusionsoft ID from
 * a user.  If the user does not have an ID
 *
 * @param StdClass $account
 *   A Drupal User.
 * @param bool $auto_create
 *   Create the Contact if user does not have an id.
 * @return int|bool
 *   Returns the infusionsoft Contact Id, or FALSE if none exists.
 */
function infusionsoft_contact_id($account, $auto_create = TRUE) {
  // If our required field is not on the user object, then load the full object.
  if (!isset($account->field_infusionsoft_id[LANGUAGE_NONE][0]['value'])) {
    $account = user_load($account->uid);
  }
  if (!empty($account->field_infusionsoft_id[LANGUAGE_NONE][0]['value'])) {
    $account = infusionsoft_user_to_contact($account);
    return $account->field_infusionsoft_id[LANGUAGE_NONE][0]['value'];
  }
  elseif (empty($account->field_infusionsoft_id[LANGUAGE_NONE][0]['value']) && $auto_create) {
    // First check to see if the user exists in the database before adding
    $id = infusionsoft_contact_load_by_email($account->mail);

    if ($id) {
      $account->field_infusionsoft_id[LANGUAGE_NONE][0]['value'] = $id;
      user_save($account);
      return $account->field_infusionsoft_id[LANGUAGE_NONE][0]['value'];
    }

    $account = infusionsoft_user_to_contact($account);
    return $account->field_infusionsoft_id[LANGUAGE_NONE][0]['value'];
  }
  else {
    return FALSE;
  }
}

/**
 * SERVICE INVOCATIONS
 */

/**
 * Helper wrapper to add a contact
 *
 * @param mixed $contact
 * @return int|bool
 *   Returns the infusionsoft Contact Id, or FALSE if none exists.
 */
function infusionsoft_contact_add($contact) {
  $service = wsclient_service_load('infusionsoft_api');
  $ret = $service->{"ContactService.add"}($contact);
  return $ret;
}

/**
 * Helper wrapper to update a contact
 *
 * @param int $infusionsoft_id
 * @param mixed $contact
 *   Returns the infusionsoft Contact Id, or FALSE if none exists.
 */
function infusionsoft_contact_update($infusionsoft_id, $contact) {
  $service = wsclient_service_load('infusionsoft_api');
  $ret = $service->{"ContactService.update"}((int) $infusionsoft_id, $contact);
  return $ret;
}

/**
 * Helper wrapper to delete a contact
 *
 * @param int $infusionsoft_id
 *   Returns TRUE when deleted.
 */
function infusionsoft_contact_delete($infusionsoft_id) {
  $service = wsclient_service_load('infusionsoft_api');
  $ret = $service->{"DataService.delete"}('Contact', $infusionsoft_id);
  return $ret;
}

/**
 * Helper function to load an infusionsoft Contact
 *
 * @param int $infusionsoft_id
 * @return int|bool
 *   Returns the infusionsoft Contact Id, or FALSE if none exists.
 */
function infusionsoft_contact_load($infusionsoft_id) {
  $service = wsclient_service_load('infusionsoft_api');
  $fields = infusionsoft_fields($service, "infusionsoft_contact", TRUE);
  return $service->{"ContactService.load"}((int) $infusionsoft_id, $fields);
}

/**
 * Helper function to load an infusionsoft Contact
 *
 * @param int $infusionsoft_id
 * @return int|bool
 *   Returns the infusionsoft Contact Id, or FALSE if none exists.
 */
function infusionsoft_contact_load_by_email($email) {
  $service = wsclient_service_load('infusionsoft_api');
  $fields = infusionsoft_fields($service, "infusionsoft_contact", TRUE);
  $ret = $service->{"ContactService.findByEmail"}($email, array('Id'));

  if (!$ret) {
    return FALSE;
  }
  return $ret[0]['Id'];
}

/**
 * Contact Opt Status
 *
 * @param string $email
 * @return string
 *
 */
function infusionsoft_contact_opt_status($email) {
  $service = wsclient_service_load('infusionsoft_api');
  $ret = $service->{"APIEmailService.getOptStatus"}($email);

  return $ret;
}

/**
 * Contact Opt In
 *
 * @param string $email
 * @param string $reason
 * @return int|bool
 *   Returns the infusionsoft Contact Id, or FALSE if none exists.
 */
function infusionsoft_contact_opt_in($email, $reason = '') {
  $service = wsclient_service_load('infusionsoft_api');
  $ret = $service->{"APIEmailService.optIn"}($email, $reason);

  return $ret;
}

/**
 * Contact Opt Out
 *
 * @param string $email
 * @param string $reason
 * @return int|bool
 *   Returns the infusionsoft Contact Id, or FALSE if none exists.
 */
function infusionsoft_contact_opt_out($email, $reason = '') {
  $service = wsclient_service_load('infusionsoft_api');
  $ret = $service->{"APIEmailService.optOut"}($email, $reason);

  return $ret;
}

/**
 * Helper function to add or remove a infusionsoft ID from
 * a group or campaign
 *
 * @param string $op
 *  "add" or "remove"
 * @param string $type
 *  "group" or "campaign"
 * @param int $infusionsoft_id
 *  Infusionsoft ID
 * @param int $tid
 *  The group or campaign ID
 */
function infusionsoft_user_op($op, $type, $infusionsoft_id, $tid) {
  $action = ($op == 'remove') ? 'removeFrom' : 'addTo';
  $actiontype = ($type == 'group') ? 'Group' : 'Campaign';
  $serv = $action . $actiontype;
  $service = wsclient_service_load('infusionsoft_api');
  return $service->{"ContactService.$serv"}((int) $infusionsoft_id, (int) $tid);
}

/**
 * Helper function to collect the list of fields for a known data type.
 *
 * @param WSClientServiceDescription $serv
 *   An initialized WSClientServiceDecsription class
 * @param string $type
 *   The datatype to be fetched
 * @param bool $keys
 *   Only return an array field keys
 *
 * @return array
 *   An array of keys for this infusionsoft datatype
 */
function infusionsoft_fields($serv, $type, $keys = FALSE) {
  $fields = $serv->datatypes[$type]['property info'];
  return ($keys) ? array_keys($fields) : $fields;
}

/**
 * Load an infusionsoft Lead
 *
 * @param integer $contact_id
 * @return string
 *   Lead.
 */
function infusionsoft_lead_load($contact_id) {
  $service = wsclient_service_load('infusionsoft_api');
  $fields = infusionsoft_fields($service, "infusionsoft_lead", TRUE);
  $return = $service->{"DataService.query"}('Lead', 100, 0, array("ContactId" => $contact_id), $fields);

  return $return;
}

/**
 * Make an arbitrary query against the infusionsoft big table
 *
 * @param string $table
 * @param string $query
 * @param array $fields
 *   The array of fields to fetch.  Use infusionsoft_fields() function
 *   to assist retrieving field names
 *
 */
function infusionsoft_query($table, $query, $fields) {
  $service = wsclient_service_load('infusionsoft_api');
  return $service->{"DataService.query"}($table, 10, 0, $query, $fields);
}

/**
 * Load Infusionsoft action sequences
 * @param integer $id
 */
function infusionsoft_action_sequence_options($id = NULL) {
  $data = cache_get('infusionsoft:actions_sequences');

  if (!isset($data->data)) {

    $service = wsclient_service_load('infusionsoft_api');
    $return = $service->{"DataService.query"}('ActionSequence', 100, 0, array("TemplateName" => '%'), array('Id', 'TemplateName', 'VisibleToTheseUsers'));

    $out = array();
    foreach ($return as $ret) {
      if (isset($ret['TemplateName'])) {
        $out[$ret['Id']] = $ret['TemplateName'];
      }
    }
    cache_set('infusionsoft:actions_sequences', $out);
    $data->data = $out;
  }

  if (is_object($id)) {
    return $data->data;
  }

  return is_null($id) ? $data->data : $data->data[$id];
}

/**
 * Helper function to take contact action
 *
 * @param integer $contact_id
 */
function infusionsoft_contact_action($contact_id) {
  $service = wsclient_service_load('infusionsoft_api');
  $fields = infusionsoft_fields($service, "infusionsoft_contact_action", TRUE);

  $return = $service->{"DataService.query"}('ContactAction', 100, 0, array("ContactId" => $contact_id), $fields);

  return $return;
}

/**
 * Helper function to get infusionsoft templates
 *
 * @param integer $id
 */
function infusionsoft_template_options($id = NULL) {
  $data = cache_get('infusionsoft:templates');

  if (!isset($data->data)) {
    $service = wsclient_service_load('infusionsoft_api');
    $return = $service->{"DataService.query"}('Template', 100, 0, array("PieceTitle" => '%'), array('Id', 'PieceType', 'PieceTitle', 'Categories'));

    $out = array();
    foreach ($return as $ret) {
      $out[$ret['Id']] = $ret['PieceTitle'];
    }

    cache_set('infusionsoft:templates', $out);
    $data->data = $out;
  }

  if (is_object($id)) {
    return $data->data;
  }

  return is_null($id) ? $data->data : $data->data[$id];
}

/**
 * Helper function to get the campaigns associated with a user
 *
 * @param integer $id
 *   The infusionsoft contact ID
 */
function infusionsoft_campaignee_options($id) {
  $data = cache_get('infusionsoft:membership:campaign:' . $id);

  if (empty($data->data)) {
    $service = wsclient_service_load('infusionsoft_api');
    $return = $service->{"DataService.query"}('Campaignee', 100, 0, array("ContactId" => $id), array('CampaignId', 'Campaign', 'Status', 'ContactId'));
    cache_set('infusionsoft:membership:campaign:' . $id, $return);
    $data->data = $return;
  }

  return $data->data;
}

/**
 * Helper function to get the groups (tags) associated with a user
 *
 * @param integer $id
 *   The infusionsoft contact ID
 */
function infusionsoft_group_contact_options($id) {
  $service = wsclient_service_load('infusionsoft_api');
  $return = $service->{"DataService.query"}('ContactGroupAssign', 100, 0, array("ContactId" => $id), array('GroupId', 'ContactGroup', 'DateCreated', 'ContactId'));
  $options = $return;

  return $options;
}

/**
 * Get Infusionsofy Campaign Options
 *
 * @param int $id
 *   The Campaign ID
 */
function infusionsoft_campaigns_options($id = NULL) {
  $data = cache_get('infusionsoft:campaigns');

  if (!isset($data->data)) {

    $service = wsclient_service_load('infusionsoft_api');
    $return = $service->{"DataService.query"}('Campaign', 100, 0, array("Name" => '%'), array('Id', 'Name', 'Status'));

    $out = array();
    foreach ($return as $ret) {
      $out[$ret['Id']] = html_entity_decode($ret['Name']);
    }

    cache_set('infusionsoft:campaigns', $out);
    $data->data = $out;
  }

  if (is_object($id)) {
    return $data->data;
  }

  return is_null($id) ? $data->data : $data->data[$id];
}

/**
 * Get Infusionsoft Groups (Tags)
 *
 * @param integer $id
 *   The group ID
 */
function infusionsoft_groups_options($id = NULL) {
  $service = wsclient_service_load('infusionsoft_api');
  $return = $service->{"DataService.query"}('ContactGroup', 100, 0, array("GroupName" => '%'), array('Id', 'GroupName'));

  $out = array();
  foreach ($return as $ret) {
    $out[$ret['Id']] = $ret['GroupName'];
  }

  $options = $out;

  return (is_object($id) || is_null($id)) ? $options : $options[$id];
}

/**
 * Implements hook_wsclient_endpoint_types().
 */
function infusionsoft_wsclient_endpoint_types() {
  return array(
    'xmlrpc' => array(
      'label' => t('XML-RPC'),
      'class' => 'InfusionsoftXMLRPCEndpoint',
    ),
  );
}

/**
 * Implements hook_default_wsclient_service().
 */
function infusionsoft_default_wsclient_service() {
  $services = array();

  $app_name = variable_get('infusionsoft_app_name', FALSE);

  if ($app_name) {
    module_load_include('inc', 'infusionsoft', 'infusionsoft.datatypes');

    // Infusionsoft API Service
    $service = new WSClientServiceDescription();
    $service->name = 'infusionsoft_api';
    $service->label = 'Infusionsoft API';
    $service->url = 'https://' . $app_name . '.' . INFUSIONSOFT_API_ENDPOINT;
    $service->type = 'xmlrpc';
    $service->datatypes = _infusionsoft_datatypes_info();

    _infusionsoft_register_methods($service);

    $services[$service->name] = $service;
  }

  return $services;
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Disable the infusionsoft text field on the user form and provide a shortcut
 *   link to edit tab
 */
function infusionsoft_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($context['field']['field_name'] == 'field_infusionsoft_id') {
    $element['value']['#disabled'] = TRUE;
    $element['#access'] = user_access('administer infusionsoft');
    $uid = $element['value']['#entity']->uid;
    $element['link'] = array(
      '#markup' => '<span>' . l(t('Edit Infusionsoft Contact'), 'user/' . $uid . '/infusionsoft') . '</span>',
    );
  }
}

/**
 * Get a list of all groups (tags).
 *
 * @param string $pattern
 *   Pattern to match against GroupName field.
 */
function infusionsoft_get_groups($pattern = '%') {
  $service = wsclient_service_load('infusionsoft_api');
  $return = $service->{"DataService.query"}('ContactGroup', 1000, 0, array("GroupName" => $pattern), array('Id', 'GroupName', 'GroupCategoryId', 'GroupDescription'));

  $categories = infusionsoft_get_group_categories();
  $out = array();
  if ($return) {
    foreach ($return as $ret) {
      if (isset($ret['GroupName'])) {
        $out[$ret['Id']] = $ret['GroupName'] . ' (' . $categories[$ret['GroupCategoryId']] . ')';
      }
    }
  }

  return $out;
}

/**
 * Get a list of all group categories.
 *
 * @param string $pattern
 *   Pattern to match against GroupName field.
 */
function infusionsoft_get_group_categories($pattern = '%') {
  $service = wsclient_service_load('infusionsoft_api');
  $return = $service->{"DataService.query"}('ContactGroupCategory', 1000, 0, array("CategoryName" => $pattern), array('Id', 'CategoryName', 'CategoryDescription'));

  $out = array();
  if ($return) {
    foreach ($return as $ret) {
      if (isset($ret['CategoryName'])) {
        $out[$ret['Id']] = $ret['CategoryName'];
      }
    }
  }

  return $out;
}

/**
 * Get a list of all campaigns.
 *
 * @param string $pattern
 *   Pattern to match against Name field.
 */
function infusionsoft_get_campaigns($pattern = '%') {
  $service = wsclient_service_load('infusionsoft_api');

  $return = $service->{"DataService.query"}('Campaign', 1000, 0, array("Name" => $pattern), array('Id', 'Name', 'Status'));

  $out = array();
  if ($return) {
    foreach ($return as $ret) {
      if (isset($ret['Name'])) {
        $out[$ret['Id']] = $ret['Name'];
      }
    }
  }

  return $out;
}

/**
 * Infusionsoft Check Settings
 *
 * This function will check to see if Infusionsoft has been configured correctly.
 *
 * @return boolean
 *   TRUE if module has been configured, FALSE if not.
 */
function infusionsoft_check_settings() {
  if (variable_get('infusionsoft_app_name', '') && variable_get('infusionsoft_api_key', '')) {
    return TRUE;
  }
  else {
    drupal_set_message(t('The Infusionsoft API module is not configured. You can do so at !link.',
      array('!link' => '<em>' . l(t('admin/config/services/infusionsoft'), 'admin/config/services/infusionsoft') . '</em>')), 'error');
    return FALSE;
  }
}

/**
 * Implements hook_init().
 */
function infusionsoft_init() {

  $tracking_url = variable_get('infusionsoft_tracking', '');

  // Add Infusionsoft tracking if configured.
  if ($tracking_url) {
    drupal_add_js($tracking_url, 'external');
  }
}