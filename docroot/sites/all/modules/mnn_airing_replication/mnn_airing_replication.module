<?php
/**
 * @file
 * Code for the MNN Airing Replication Module.
 */

define ("MNN_ACTIVE_SERIES_PROJECTS_VIEW", 'projects_active_series');
define ("MNN_AIRING_REPLICATABLE_PROJECTS","MNN_AIRING_REPLICATABLE_PROJECTS");
define ("MNN_AIRING_REPLICATION_PID","MNN_AIRING_REPLICATION_PID");


function mnn_airing_replication_menu() {
  $items = array();

  $items['admin/airings/quarterly-scheduling'] = 
    array(
	  'title' => 'MNN Quarterly Airing Replication',
	  'description' => 'MNN Quarterly Airing Replication',
	  'page callback' => 'mnn_airing_replication_page',
	  'access arguments' => array('administer cm_airing'),
	  'type' => MENU_NORMAL_ITEM,
	  ); 


  return $items;
}

function mnn_airing_replication_page() {
  $quarter = timespan_current('mnnquarter',date('Y-m-d'));
  $start = date('Y-m-d',strtotime($quarter['start']));
  $end = date('Y-m-d',strtotime($quarter['end']));
  $current_quarter = $start.'--'.$end;

  $quarter = timespan_next('mnnquarter',$start);
  $start = date('Y-m-d',strtotime($quarter['start']));
  $end = date('Y-m-d',strtotime($quarter['end']));
  $next_quarter = $start.'--'.$end;

  //fetch to get all airings for a quarter
  $view = views_get_view(MNN_ACTIVE_SERIES_PROJECTS_VIEW);
  
  //execute view
  $view->execute('active_series_project');
  $results = $view->result;

  $missing_history_projects = array();
  $conflicting_projects = array();
  $replicatable_projects = array();
  $replicated_projects = array();

  $counter = 0;
  foreach($results as $result) {
    $counter ++;

    if (is_array($result->field_field_replicated_quarters) ) {
      $replicated_quarters = array();
      foreach ($result->field_field_replicated_quarters as $quarter_field) {
	$replicated_quarters[] = $quarter_field['raw']['value'];
      }
    }

    if (in_array($next_quarter, $replicated_quarters)) {
      $replicated_projects[] = $result;
      continue;
    }

    if (!in_array($current_quarter, $replicated_quarters)) {
      $missing_history_projects[] = $result;
      continue;
    }

    if ($result->field_field_conflicting_project) {
      $conflicting_projects[] = $result;
      continue;
    }  
    
    $replication_history = 
      $result->field_field_replication_history[0]['raw']['value'];
    $replication_history = @unserialize($replication_history);
    //$interval = $result->field_field_interval[0]['rendered']['#title'];

    $airing_runs = $replication_history[$current_quarter];
    if ($airing_runs) {
      $replicatable_projects[] = $result;
      continue;
    }
    else {
      drupal_set_message("Missing replication history for ".
			 $result->nid."!", 'ERROR');
      continue;
    }
  }
    
  //////////////////////////////////////////////////////////////////////////
  //BUILD VIEW OF THE PROJECTS THAT ARE REPLICATABLE
  $args_string = "";
  $is_first = TRUE;
  foreach($replicatable_projects as $project) {
    if (!$is_first) {
      $args_string .= "+";
    }
    else {
      $is_first = FALSE;
    }
    $args_string .= $project->nid;
  }
  $view = views_get_view(MNN_ACTIVE_SERIES_PROJECTS_VIEW);  
  $args = array($args_string);
  $view_result = $view->execute_display('replicatable', $args);
  $replicatable_table = $view_result['content'];

  //////////////////////////////////////////////////////////////////////////
  //BUILD VIEW OF THE PROJECTS TO BE REPLICATED
  $args_string = "";
  $is_first = TRUE;
  foreach($replicated_projects as $project) {
    if (!$is_first) {
      $args_string .= "+";
    }
    else {
      $is_first = FALSE;
    }
    $args_string .= $project->nid;
  }

  $view = views_get_view(MNN_ACTIVE_SERIES_PROJECTS_VIEW);  
  $args = array($args_string);
  $view_result = $view->execute_display('replicated', $args);
  $replicated_table = $view_result['content'];
    
  //////////////////////////////////////////////////////////////////////////
  //BUILD VIEW OF THE PROJECTS THAT ARE CONFLICTED
  $args_string = "";
  $is_first = TRUE;
  foreach($conflicting_projects as $project) {
    if (!$is_first) {
      $args_string .= "+";
    }
    else {
      $is_first = FALSE;
    }
    $args_string .= $project->nid;
  }
  $view = views_get_view(MNN_ACTIVE_SERIES_PROJECTS_VIEW);  
  $args = array($args_string);
  $view_result = $view->execute_display('conflicting', $args);
  $conflicting_table = $view_result['content'];

    
  //////////////////////////////////////////////////////////////////////////
  //BUILD VIEW OF THE PROJECTS THAT HAVE NO HISTORY
  $args_string = "";
  $is_first = TRUE;
  foreach($missing_history_projects as $project) {
    if (!$is_first) {
      $args_string .= "+";
    }
    else {
      $is_first = FALSE;
    }
    $args_string .= $project->nid;
  }
  $view = views_get_view(MNN_ACTIVE_SERIES_PROJECTS_VIEW);  
  $args = array($args_string);
  $view_result = $view->execute_display('missing_history', $args);
  $missing_history_table = $view_result['content'];

  //////////////////////////////////////////////////////////////////////
  //BUILD OUTPUT
  $output = "<h2>Replication Status for $next_quarter</h2>";

  $heading = "<b>Scheduled Projects: </b>".
    count($replicated_projects)."</br>";
  $options = array('handle' => $heading,
		   'content' => $replicated_table, 
		   'collapsed' => TRUE);
  $output .= theme('ctools_collapsible',$options);

  $output .= '<br/>';

  $heading = "<b>Unscheduled Projects -- Ready to be Replicated: </b>".
    count($replicatable_projects);
  $options = array('handle' => $heading,
		   'content' => $replicatable_table, 
		   'collapsed' => TRUE);
  $output .= theme('ctools_collapsible',$options);

  $output .= '<br/>';

  $heading = "<b>Unscheduled Projects -- Conflicts: </b>".
    count($conflicting_projects);
  $options = array('handle' => $heading,
		   'content' => $conflicting_table, 
		   'collapsed' => TRUE);
  $output .= theme('ctools_collapsible',$options);

  $output .= '<br/>';

  $heading = "<b>Unscheduled Projects -- ".
    "No Series Airings in $current_quarter: </b>".
    count($missing_history_projects);

  $options = array('handle' => $heading,
		   'content' => $missing_history_table, 
		   'collapsed' => TRUE);
  $output .= theme('ctools_collapsible',$options);

  $output .= "<br/><b>Total Active Series Projects: </b>".$counter;
  $output .= '</br><br/><br/>';

  /////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////
  //HANDLE THE BACK END SCRIPT
  
  //SET DATA FOR SCRIPT
  variable_set(MNN_AIRING_REPLICATABLE_PROJECTS, 
	       serialize($replicatable_projects));
  $pid = $_SESSION[MNN_AIRING_REPLICATION_PID];
  if (mnn_airing_replication_check_pid($pid, 'mnn_airing_replication')) {
    //dsm('we found pid! '.$pid);
  }
  else {
    $pid = NULL;
    $_SESSION[MNN_AIRING_REPLICATION_PID] = NULL;
  }
  
  $action = arg(3);
  if ($action == 'start' && !$pid) {
    $cmd = "php -d max_execution_time=64800 -f " .
      "sites/all/modules/features/mnn_airing_replication/scripts/".
      "replicate_quarterly_airings.php > /dev/null 2>&1 & echo \$!";
    $pid = exec($cmd,$cmd_results,$cmd_status);
    $_SESSION[MNN_AIRING_REPLICATION_PID] = $pid;
   }
    
  if ($pid) {
    //add javascript to the headers to make the page reload
    $refresh_url = url("admin/airings/quarterly-scheduling");
    drupal_add_js(mnn_airing_replication_reload_page($refresh_url,30000),
    		array('type'=>'inline','scope'=>'header'));

    drupal_set_message("<h2>IN PROGRESS!!!!!! <BR/>Replicating series airings for $next_quarter</h2>", 'ERROR');
  }
  else {
    $output .= 
      '<a href="/admin/airings/quarterly-scheduling/start">
       <button type="button">Replicate '.count($replicatable_projects) .
      ' Projects</button></a>';
  }

  return $output;
}

function mnn_airing_replication_reload_page($url,$time) {
  
  //$js="\n".'<script language="Javascript">'."\n";
  //$js.='<!--'."\n";
  $js.='// please keep these lines on when you copy the source'."\n";
  $js.='// made by: Nicolas - http://www.javascript-page.com'."\n";
  $js.='var URL   = "'.$url.'"'."\n";
  $js.='var speed = '.$time."\n";
  $js.='function reload() {'."\n";
  $js.='location = URL'."\n";
  $js.='}'."\n";
  $js.='setTimeout("reload()", speed);'."\n";
  $js.='//-->'."\n";
  //$js.='</script>';
  return $js;
}

function mnn_airing_replication_check_pid($pid, $search_term = null) {
  // create our system command
  $cmd = "ps $pid";
  // run the system command and assign output to a variable ($output)
  exec($cmd, $output, $result);
  // check the number of lines that were returned
  if(count($output) >= 2){
    if (preg_match("/php/", $output[1])){
      if ($search_term) {
        if (preg_match("/".$search_term."/", $output[1])){
          return true;
        }
      }
      else {
	return true;
      }
    }
  }
  // the process is dead
  return false;
}

function mnn_airing_replication_history_view_field(&$data){
  if ($data->field_field_replication_history) {
    $history = $data->field_field_replication_history[0]['raw']['value'];
    $history = @unserialize($history);

    if ($history) {
      return mnn_airing_replication_get_history_table($history);
    }
    else {
      return "N/A";
    }
  }
}


function mnn_airing_replication_conflicting_history_view_field(&$data){
  $nid = $data->field_field_conflicting_project[0]['raw']['nid'];
  $project = $nid ? node_load($nid) : NULL;

  if ($project AND  $project->field_replication_history) {
    $history = $project->field_replication_history[LANGUAGE_NONE][0]['value'];
    $history = @unserialize($history);

    if ($history) {
      return mnn_airing_replication_get_history_table($history);
    }
    else {
      return "N/A";
    }
  }
}

function mnn_airing_replication_get_history_table($history) {
  $output = "<table><th>Quarter</th><th>Series Slots</th>";
  krsort($history);
  foreach($history as $quarter=>$slots) {
    $slot_cells = "";
    
    foreach($slots as $slot_name=>$airings) {
      $slot_name = 
	mnn_airing_replication_slot_channel_tid_transform($slot_name);

      $airing_links = array();
      foreach($airings as $start_time=>$airing_id) {
	$airing_links[] =
	  l(date('m/d/Y h:ia',$start_time), "admin/manage/scheduling", 
	    array('query' => array('airing_id'=>$airing_id)));
      }
      $options = array('handle' => $slot_name,
		       'content' => "<br/>".implode("<br/>",$airing_links), 
		       'collapsed' => TRUE);
      $slot_cells .= "<td>".theme('ctools_collapsible',$options)."</td>";
    }
    $output .= "<tr>
                  <td>$quarter</td>
                  <td>
                    <table>
                      <tr>
                        $slot_cells
                      </tr>
                    </table>
                  </td>
                </tr>";
  }
  $output .= "</table>";

  $options = array('handle' => "History",
		   'content' => $output,
		   'collapsed' => TRUE);
  return theme('ctools_collapsible',$options);
}

function mnn_airing_replication_slot_channel_tid_transform($slot_name) {
  if (strpos($slot_name, 'CH-TID965')) {
    return str_replace('CH-TID965', 'CH.1', $slot_name);
  }
  else if (strpos($slot_name, 'CH-TID966')) {
    return str_replace('CH-TID966', 'CH.2', $slot_name);
  }
  else if (strpos($slot_name, 'CH-TID967')) {
    return str_replace('CH-TID967', 'CH.3', $slot_name);
  }
  else if (strpos($slot_name, 'CH-TID968')) {
    return str_replace('CH-TID968', 'CH.4', $slot_name);
  }
  return $slot_name;
}

function mnn_airing_replication_query_log($sql, $args) {
  $args['{'] = '';
  $args['}'] = '';
  
  foreach($args as $search=>$replace) {
    $sql = str_replace($search, $replace, $sql);
  }
  dsm($sql);

}

function mnn_airing_replication_get_conflicting_project($start,
							$end,
							$channel) {
  $sql = 
    "SELECT d.entity_id, field_airing_project_ref_target_id as project_nid 
     FROM {field_data_field_airing_date} d
     INNER JOIN {field_data_field_airing_channel} c
     ON d.entity_id = c.entity_id
     INNER JOIN {field_data_field_airing_project_ref} p
     ON d.entity_id = p.entity_id
     WHERE c.entity_type = 'airing' 
     AND d.entity_type='airing'
     AND c.field_airing_channel_tid = :channel
     AND :start < d.field_airing_date_value2   
     AND :end > d.field_airing_date_value   
    "; 
  $args = array(
		':channel' => $channel,
		':start' => date('Y-m-d H:i:s', $start),
		':end' => date('Y-m-d H:i:s', $end),
		);
  $result = db_query($sql, $args)->fetchObject();
  if ($result) {
    return $result->project_nid;
  }
  return NULL;
}


function mnn_airing_replication_replicate_quarterly_airings() {
  $serialized_text =  variable_get(MNN_AIRING_REPLICATABLE_PROJECTS);
  $replicatable_projects = unserialize($serialized_text);
  $replication_counter = 1;
  foreach($replicatable_projects as $project) {
    $project_node = node_load($project->nid);
    $interval = $project->field_field_interval[0]['rendered']['#title'];
    $runtime_tid = $project->field_field_runtime[0]['raw']['tid'];
    $runtime = mnn_airing_runtime_as_int($runtime_tid);
    if ($project->field_field_replication_history) {
      $history = $project->field_field_replication_history[0]['raw']['value'];
      $history = @unserialize($history);

      if ($history) {
	krsort($history);
	foreach($history as $quarter=>$slots) {

	  foreach($slots as $slot_name=>$airings) {

	    //find latest airing that exists
	    krsort($airings);
	    foreach($airings as $start_time=>$airing_id) {
	      $airings_result_array = 
		entity_load('airing', array($airing_id));
	      if ($airings_result_array) {
		$source_airing = array_shift($airings_result_array);
		if ($source_airing) {
		  $source_start_time = $start_time;
		  break;
		}
	      }
	    }

	    if (!$source_airing) {
	      continue;
	    }

	    $channel_tid = 
	      $source_airing->field_airing_channel[LANGUAGE_NONE][0]['tid'];

	    //get quarters
	    $source_quarter = timespan_current('mnnquarter',date('Y-m-d'));
	    $start = date('Y-m-d',strtotime($source_quarter['start']));
	    $target_quarter = timespan_next('mnnquarter',$start);

	    $target_quarter_start = strtotime($target_quarter['start']);
	    $target_quarter_end = strtotime($target_quarter['end']);

	    $next_start = $source_start_time;
	    //increment airing by interval until in next quarter until the 
	    //end of that quarter to get array of airing dates
	    $counter = 0;
	    $airdates = array();
	    $first_start = 0;
	    while (($counter < 100) && ($next_start < $target_quarter_end)) {
	      $counter ++;
	      if ($next_start >= $target_quarter_start) {
		$airdates[] = $next_start;
		if (!$first_start) {
		  $first_start = date("Y-m-d H:i:s", $next_start);
		}
	      }
	      $next_start = 
		strtotime(mnn_airing_get_next_air_date(date("Y-m-d H:i:s",
							    $next_start), 
						       $interval));

	      $next_end = $next_start + $runtime;
	      //query for overlaps on airing dates
	      $conflict_project_id = 
		mnn_airing_replication_get_conflicting_project($next_start,
							       $next_end,
							       $channel_tid);
	      if ($conflict_project_id) {
		$airdates = array();
	
		//if overlap, set conflict id on project and return
		$project_node->field_conflicting_project[LANGUAGE_NONE][0]['nid'] = 
		  $conflict_project_id;

		node_save($project_node);
		break;
	      }
	      
	    }
	    
	    if ($airdates) {
	      $_SESSION['cm_schedule_mode'] = 'series';
	      global $cm_scheduled_first_airing;  
	      $cm_scheduled_first_airing = TRUE;
	      $new_airing = mnn_airing_clone($source_airing, $langcode);
	      $new_airing->field_airing_date[LANGUAGE_NONE][0]['value'] = 
		$first_start;

	      $new_airing->cm_use_auto_title = TRUE;
	      $new_airing->cm_use_auto_endtime = TRUE;
              unset($new_airing->field_airing_show_ref);
	      entity_save('airing', $new_airing);
	    }
	  }
	}
      }
    }
    //FIXME REMOVE ONLY HERE FOR TESTING
    $replication_counter ++;
    if ($replication_counter > 2) {
      //return;
    }
  }
}
