<?php
/**
 * @file
 * Creates block containing a Drupal Commerce basket/cart link
 *
 * Updates on the fly as items are added
 */

/**
 * Implements hook_menu().
 */
function commerce_ajax_basket_link_menu() {

  $items['admin/commerce/config/advanced-settings/commerce_ajax_basket_link'] = array(
    'title' => 'Ajax basket link settings',
    'description' => 'Configuration for ajax basket link module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_ajax_basket_link_admin'),
    'access arguments' => array('configure store'),
    'file' => 'commerce_ajax_basket_link.admin.inc',
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}

/**
 * Implements hook_block_view().
 */
function commerce_ajax_basket_link_block_view($delta = '') {

  $block = array();

  switch ($delta) {
    case 'commerce_ajax_basket_link':
      $block['subject'] = '';
      $block['content'] = commerce_ajax_basket_link_static_output();
      break;
  }

  return $block;
}

/**
 * Implements hook_block_info().
 */
function commerce_ajax_basket_link_block_info() {

  $blocks['commerce_ajax_basket_link'] = array(
    'info' => t('Ajax Basket Link'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Returns renderable array of basket link static content.
 */
function commerce_ajax_basket_link_static_output() {

  $order_data = commerce_ajax_basket_link_order_data();
  $qty = format_plural($order_data['qty'], '1 item', '@count items');
  $price = commerce_currency_format($order_data['total']['amount'], $order_data['total']['currency_code']);

  $output = array(
    '#type' => 'markup',
    '#markup' => '<p>' . l(t('View basket'), 'cart') . ' (' . $qty . ' ' . $price . ')</p>',
  );

  return $output;
}

/**
 * Get's current basket / cart order data.
 */
function commerce_ajax_basket_link_order_data() {

  $order_data = array();

  // Get up to date order data.
  $order = commerce_cart_order_load($GLOBALS['user']->uid);
  $order_data['line_items'] = '';
  $order_data['qty'] = 0;
  $order_data['total'] = 0;
  $order_data['currency'] = '';

  if ($order) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $order_data['line_items'] = $wrapper->commerce_line_items;
    $order_data['qty'] = commerce_line_items_quantity($order_data['line_items'], commerce_product_line_item_types());
    $order_data['total'] = commerce_line_items_total($order_data['line_items']);
    $order_data['currency'] = commerce_currency_load($order_data['total']['currency_code']);
  }

  $order_data['qty'] = (isset($order_data['qty']) && $order_data['qty'] != NULL) ? $order_data['qty'] : 0;

  return $order_data;
}

/**
 * Hook form alter on add to cart form.
 */
function commerce_ajax_basket_link_form_alter(&$form, &$form_state, $form_id) {

  if (strpos($form_id, 'commerce_cart_add_to_cart_form') !== FALSE)  {
    $form['submit']["#ajax"] = array(
      'callback' => 'commerce_ajax_basket_link_ajax_cart_form_add_to_cart_ajax_callback',
      'effect' => 'fade',
    );
    if (isset($form['product_id']['#value'])) {
      $form['submit']['#id'] = 'edit-submit--' . $form['product_id']['#value'];
    }

    $form['#submit'][] = 'commerce_ajax_basket_link_cart_submit';
  }
}

/**
 * Ajax callback for updating basket link when item is added.
 */
function commerce_ajax_basket_link_ajax_cart_form_add_to_cart_ajax_callback($form, &$form_state) {

  // Replace submit with message or append?
  $replace_submit = variable_get('commerce_ajax_basket_link_replace_submit', 1);

  // Get edit-submit ID.
  $submit_id = $form['submit']['#id'];

  // Confirmation messages
  $default_messages = variable_get('commerce_ajax_basket_link_default_messages', 0);
  $confirmation_message = '<p class="confirmation">' . l(t('Item added to basket'), 'cart') . '</p>';
  if ($default_messages == 1) {
    $confirmation_message = '<div id="conf' . $submit_id . '"' . 'class="confirmation">' . theme('status_messages') . '</div>';
  }

  // Basket item markup into top nav
  $output = commerce_ajax_basket_link_static_output();
  $output['#markup'] = '<div class="content clearfix">' . $output['#markup'] . '</div>';

  // Reset commerce_line_items_quantity
  unset($form['quantity']['#value']);

  // Ajax commands
  if ($replace_submit) {
		// Reset default system messages
		drupal_get_messages();
		$commands[] = ajax_command_replace('#' . $submit_id, $confirmation_message);
  }
  else {
    $commands[] = ajax_command_invoke('#conf' . $submit_id, 'remove');
    $commands[] = ajax_command_after('#' . $submit_id, $confirmation_message);
  }

  $commands[] = ajax_command_replace('#block-commerce-ajax-basket-link-commerce-ajax-basket-link .content', $output['#markup']);

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Custom submit callback for add to cart form
 */
function commerce_ajax_basket_link_cart_submit(&$form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}
