<?php
/**
 * @file
 * Main file for the Groupon module, which will help in showing deals to user.
 */

/**
 * Implements hook_help().
 */
function groupon_help($path, $arg) {
  if ($path == 'admin/help#groupon') {
    if (current_path() != 'admin/help/groupon') {
      // Because system_modules() executes hook_help() for each module to 'test'
      // if they will return anything, but not actually display it, we want to
      // return a TRUE value if this is not actually the help page.
      return TRUE;
    }
    $output = '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('It is a simple module for Groupon integration. Site adminitrators can easily integrate Groupon with their sites. This module provides a block and page where user can see the deals which are available on the Groupon.') . '</p>';
    $output .= '<h3>' . t('Settings') . '</h3>';
    $output .= '<dl>';
    $output .= '<dt>' . t('<strong>Client ID:</strong>') . '</dt>';
    $output .= '<dd>' . t('Write your own linking rules.<br/><b>Example:</b> Mysite.com related websites only! (Other none Mysite.com related websites will be removed) We are constantly looking for new perm Mysite.com link exchanges.') . '</dd>';
    $output .= '<dt>' . t('<strong>PID:</strong>') . '</dt>';
    $output .= '<dd>' . t('Write your own linking rules.') . '</dd>';
    $output .= '</dl>';
    return $output;
  }
}

/**
 * Implements hook_permission().
 */
function groupon_permission() {
  return array(
    'administer groupon' => array(
      'title' => t('Administer groupon'),
      'description' => t('Allows a user to configure and administrate groupon.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function groupon_menu() {
  $items['groupon'] = array(
    'title' => 'Groupon',
    'description' => 'Groupon',
    'page callback' => 'groupon_says_callback',
    'access callback' => TRUE,
    'file' => 'groupon.pages.inc',
  );
  $items['groupon/says'] = array(
    'title' => 'Says',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['groupon/deals'] = array(
    'title' => 'Deals',
    'description' => 'Groupon Deals',
    'page callback' => 'groupon_deals_callback',
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
    'file' => 'groupon.pages.inc',
  );
  $items['groupon/channels'] = array(
    'title' => 'Channel Deals',
    'description' => 'Groupon Channels',
    'page callback' => 'groupon_channels_callback',
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'groupon.pages.inc',
  );
  $items['admin/config/services/groupon/settings'] = array(
    'title' => 'Groupon Settings',
    'description' => 'Configure groupon module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('groupon_settings_form'),
    'access arguments' => array('administer groupon'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 10,
    'file' => 'groupon.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function groupon_theme() {
  return array(
    'groupon_channels' => array(
      'template' => 'templates/groupon-channels',
      'variables' => array('channels' => NULL),
    ),
    'groupon_deals' => array(
      'template' => 'templates/groupon-deals',
      'variables' => array('deals' => NULL),
    ),
    'groupon_sayings' => array(
      'template' => 'templates/groupon-sayings',
      'variables' => array('sayings' => NULL),
    ),
    'groupon_error' => array(
      'template' => 'templates/groupon-error',
      'variables' => array('error' => NULL),
    ),
    'groupon_channels_block' => array(
      'template' => 'templates/groupon-channels-block',
      'variables' => array('channels' => NULL),
    ),
    'groupon_deals_block' => array(
      'template' => 'templates/groupon-deals-block',
      'variables' => array('deals' => NULL),
    ),
    'groupon_sayings_block' => array(
      'template' => 'templates/groupon-sayings-block',
      'variables' => array('sayings' => NULL),
    ),
    'groupon_error_block' => array(
      'template' => 'templates/groupon-error-block',
      'variables' => array('error' => NULL),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function groupon_block_info() {
  $blocks = array();
  $blocks['groupon_channels'] = array(
    'info' => t('Groupon Channel'),
  );
  $blocks['groupon_deals'] = array(
    'info' => t('Groupon Deals'),
  );
  $blocks['groupon_sayings'] = array(
    'info' => t('Groupon Sayings'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function groupon_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'groupon_channels':
      $block['title'] = t('Groupon Channels');
      $block['content'] = groupon_channels_block_view();
      break;

    case 'groupon_deals':
      $block['title'] = t('Groupon Deals');
      $block['content'] = groupon_deals_block_view();
      break;

    case 'groupon_sayings':
      $block['title'] = t('Groupon Says');
      $block['content'] = groupon_sayings_block_view();
      break;

  }
  return $block;
}

/**
 * Helper function to get JSON object from Groupon API.
 * 
 * @param string $url
 *   API full url
 *
 * @return string
 *   JSON object
 */
function groupon_get_json_object($url, $cache_id = '') {
  drupal_add_css(drupal_get_path('module', 'groupon') . '/groupon.css', array('group' => CSS_DEFAULT, 'type' => 'file'));
  drupal_add_js(drupal_get_path('module', 'groupon') . '/groupon.js', array('group' => JS_DEFAULT, 'type' => 'file'));
  if (!isset($url)) {
    return FALSE;
  }
  $json_object = '';
  $cache = cache_get($cache_id, 'cache');
  if (!$cache || time() > $cache->expire) {
    $result = drupal_http_request($url);
    if ($result->code == '200') {
      $data = drupal_json_decode($result->data);
      $expire = time() + 60;
      cache_set($cache_id, $data, 'cache', $expire);
      $json_object = $data;
    }
    else {
      watchdog('Groupon', 'Error: ' . $result->error, $variables = array(), WATCHDOG_ERROR);
      $groupon_error_message = variable_get('groupon_error_message');
      $groupon_default_error_message = variable_get('groupon_default_error_message');
      $json_object = array(
        'error' => $groupon_error_message,
        'default_error' => $result->error,
        'default_error_message' => $groupon_default_error_message,
      );
    }
  }
  else {
    $json_object = $cache->data;
  }
  return $json_object;
}

/**
 * Callback function for channel block view.
 *
 * @return string
 *   Channel block.
 */
function groupon_channels_block_view() {
  $channels = groupon_get_channels_block();
  if (array_key_exists('error', $channels)) {
    $output = theme('groupon_error_block', $channels);
  }
  else {
    $output = theme('groupon_channels_block', $channels);
  }
  return $output;
}

/**
 * Callback function for deals block view.
 *
 * @return string
 *   Deals block.
 */
function groupon_deals_block_view() {
  $deals = groupon_get_deals_block();
  if (array_key_exists('error', $deals)) {
    $output = theme('groupon_error_block', $deals);
  }
  else {
    $output = theme('groupon_deals_block', $deals);
  }
  return $output;
}

/**
 * Callback function for groupon says block view.
 *
 * @return string
 *   Groupon Says block.
 */
function groupon_sayings_block_view() {
  $says = groupon_get_sayings_block();
  if (array_key_exists('error', $says)) {
    $output = theme('groupon_error_block', $says);
  }
  else {
    $output = theme('groupon_sayings_block', $says);
  }
  return $output;
}

/**
 * Helper function to get channels for channel block.
 *
 * @return array
 *   Array of channel deals.
 */
function groupon_get_channels_block() {
  $channels = groupon_get_channels();
  return $channels;
}

/**
 * Helper function to get deals for deals block.
 *
 * @return array
 *   Array of deals.
 */
function groupon_get_deals_block() {
  $deals = groupon_get_deals();
  return $deals;
}

/**
 * Helper function to get sayings for groupon says block.
 *
 * @return array
 *   Array of groupon says.
 */
function groupon_get_sayings_block() {
  $says = groupon_get_sayings();
  return $says;
}

/**
 * Helper function to get channel deals for channel page.
 *
 * @return array
 *   Array of channel deals.
 */
function groupon_get_channels() {
  $params = array(
    'client_id' => variable_get('groupon_client_id'),
    'channel_id' => variable_get('groupon_channel_id'),
    'division_id' => variable_get('groupon_division_id'),
    'show' => 'mediumImageUrl,title,dealUrl,options',
  );
  $url = url('http://api.groupon.com/v2/deals', array('query' => $params, 'external' => TRUE));
  $groupon_channel_json = groupon_get_json_object($url, 'groupon_channel');
  $channel_deals = array();
  if (array_key_exists('deals', $groupon_channel_json)) {
    foreach ($groupon_channel_json['deals'] as $key => $value) {
      $channel_deals['channels'][$key] = array(
        'imageurl' => $value['mediumImageUrl'],
        'title' => $value['title'],
        'url' => $value['dealUrl'],
        'desc' => $value['options'][0]['details'][0]['description'],
      );
    }
  }
  else {
    $channel_deals = $groupon_channel_json;
  }
  return $channel_deals;
}

/**
 * Helper function to get deals for deals page.
 *
 * @return array
 *   Array of deals.
 */
function groupon_get_deals() {
  $params = array(
    'client_id' => variable_get('groupon_client_id'),
    'division_id' => variable_get('groupon_division_id'),
  );
  $url = url('http://api.groupon.com/v2/deals', array('query' => $params, 'external' => TRUE));
  $groupon_deals_json = groupon_get_json_object($url, 'groupon_deals');
  $deals = array();
  if (array_key_exists('deals', $groupon_deals_json)) {
    foreach ($groupon_deals_json['deals'] as $key => $value) {
      $deals['deals'][$key] = array(
        'imageurl' => $value['mediumImageUrl'],
        'title' => $value['title'],
        'url' => $value['dealUrl'],
        'pitchhtml' => $value['pitchHtml'],
      );
    }
  }
  else {
    $deals = $groupon_deals_json;
  }
  return $deals;
}

/**
 * Helper function to get channels for channel block.
 *
 * @return array
 *   Array of groupon says.
 */
function groupon_get_sayings() {
  $params = array(
    'client_id' => variable_get('groupon_client_id'),
    'limit' => variable_get('groupon_says_limit'),
    'random' => variable_get('groupon_says_random'),
  );
  $url = url('http://api.groupon.com/v2/groupon_says.json', array('query' => $params, 'external' => TRUE));
  $groupon_saying_json = groupon_get_json_object($url, 'groupon_sayings');
  $groupon_sayings = array();
  if (array_key_exists('grouponSayings', $groupon_saying_json)) {
    foreach ($groupon_saying_json['grouponSayings'] as $key => $value) {
      $groupon_sayings['sayings'][$key] = array('title' => $value['title'], 'desc' => $value['websiteContent']);
    }
  }
  else {
    $groupon_sayings = $groupon_saying_json;
  }
  return $groupon_sayings;
}
