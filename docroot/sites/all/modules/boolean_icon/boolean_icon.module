<?php


/**
 * Implements hook_field_formatter_info().
 */
function boolean_icon_field_formatter_info() {
  return array(
    'list_bool_graphic' => array(
      'label' => t('Graphic'),
      'field types' => array('list_boolean'),
    ),
  );
}


/**
 * Implements hook_field_formatter_view().
 */
function boolean_icon_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'list_bool_graphic':
      $allowed_values = list_allowed_values($field);
      foreach ($items as $delta => $item) {
        // Set icon.
        $icon = $item['value'] ?
          variable_get('boolean_icon_true_ico', drupal_get_path('module', 'boolean_icon') . '/on.png') :
          variable_get('boolean_icon_false_ico', drupal_get_path('module', 'boolean_icon') . '/off.png');

        // Set image title.
        if (isset($allowed_values[$item['value']])) {
          $title = field_filter_xss($allowed_values[$item['value']]);
        }
        else {
          // If no match was found in allowed values, fall back to the key.
          $title = field_filter_xss($item['value']);
        }

        // Return element.
        $element[$delta] = array(
          '#theme' => 'image',
          '#path' => $icon,
          '#title' => $title,
        );
      }
      break;
  }

  return $element;
}


/**
 * Implements hook_menu();
 */
function boolean_icon_menu() {
  $items['ajax/boolean-icon/%/%/%'] = array(
    'title' => 'Publish a node with just one click',
    'page callback' => 'boolean_icon_click_publish_callback',
    'page arguments' => array(2, 3, 4),
    'access arguments' => array('boolean_icon one_click'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Publishit callback
 *
 * A callback used to publish/unpublish nodes or comments.
 *
 * @param
 *  The node object.
 */
function boolean_icon_click_publish_callback($action, $type, $id, $callback_type = 'ajax') {
  $entity = $type == 'node' ? node_load($id) : comment_load($id);

  if (empty($entity)) {
    return MENU_ACCESS_DENIED;
  }

  if ($action != 'publish' && $action != 'unpublish') {
    return MENU_ACCESS_DENIED;
  }

  // Check for a token to prevent. Tokens are required because they prevent CSRF,
  // https://security.drupal.org/node/2429
  if (empty($_GET['token']) || !drupal_valid_token($_GET['token'], 'ajax/boolean-icon/' . $action . '/' . $type . '/' . $id)) {
    return MENU_ACCESS_DENIED;
  }

  // This functionality should be accesed only.
  // via an ajax call.
  if ($callback_type != 'ajax') {
    return MENU_ACCESS_DENIED;
  }

  // If the node is locked return an error message.
  if ($type == 'node' && module_exists('content_lock') && content_lock_fetch_lock($entity->nid) != FALSE) {

    $lock = content_lock_fetch_lock($entity->nid);
    $message = t('The content you tried to un/publish, was locked by %user after this page was refreshed.', array('%user' => check_plain($lock->name)));

    $commands = array();
    $commands[] = ajax_command_replace('.node-' . $entity->nid . ' .publishit-link', '<span class="marker">' . $message . '</span>');
    $commands[] = ajax_command_html('.node-' . $entity->nid . ' .publishit-link', t('Locked'));

    ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));

  }
  // If everything looks OK, publish or unpublish
  // the node.
  else {

    // Publish if unpublished and vice versa. Also prepare
    // the new content for the link.
    if ($action == 'publish') {
      $new_action = 'unpublish';
      $link_content = theme('image', array('path' => variable_get('boolean_icon_true_ico', drupal_get_path('module', 'boolean_icon') . '/on.png')));

      $entity->status = 1;
      entity_save($type, $entity);
    }
    elseif ($action == 'unpublish') {
      $new_action = 'publish';
      $link_content = theme('image', array('path' => variable_get('boolean_icon_false_ico', drupal_get_path('module', 'boolean_icon') . '/off.png')));

      $entity->status = 0;
      entity_save($type, $entity);
    }

    // Generate the token.
    $token = boolean_icon_token_generate($type, $id, $new_action);

    // Prepare the new link
    $link = l($link_content, 'ajax/boolean-icon/' . $new_action . '/' . $type . '/' . $id . '/nojs', array(
        'attributes' => array('class' => 'publishit-link-' . $type . '-' . $id . ' use-ajax'),
        'query' => array('token' => $token),
        'html' => TRUE
      )
    );

    // Change the link text in the view where this field is displayed.
    $commands = array();
    $commands[] = ajax_command_replace('.publishit-link-' . $type . '-' . $id, $link);

    ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));

  }

}

/**
 * Implements hook_permission();
 */
function boolean_icon_permission() {
  return array(
    'boolean_icon one_click' => array(
      'title' => t('Use one-click publish on nodes/comments'),
      'description' => t('Publish nodes/comments with just one click on views field.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function boolean_icon_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'boolean_icon') . '/views',
  );
}

/**
 * Generate the token.
 *
 * Tokens are required because they prevent CSRF,
 *  https://security.drupal.org/node/2429.
 */
function boolean_icon_token_generate($type, $id, $action) {
  return drupal_get_token('ajax/boolean-icon/' . $action . '/' . $type . '/' . $id);
}
