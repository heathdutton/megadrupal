<?php
/**
 * @file
 * Core module file for integrating the media module
 * with the i18n module.
 */
module_load_include('inc', 'media_translation', 'media_translation.i18n');

/**
 * Implements hook_menu().
 */
function media_translation_menu() {
  $items = array();

  // File Type Translation Settings
  $items['admin/config/media/file-types/manage/%/translate'] = array(
    'title' => 'Translate',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_translation_media_type_form', 5),
    'access callback' => 'media_translation_file_type_translation_tab_access',
    'weight' => 99,
    'type' => MENU_LOCAL_TASK,
    'file' => 'media_translation.admin.inc',
  );

  // Translate tab on the File View/Edit screen
  $items['media/%file/translate'] = array(
    'title' => 'Translate',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_translation_file_translate_tab', 1),
    'access callback' => 'media_translation_media_translation_tab_access',
    'access arguments' => array(1),
    'weight' => 99,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'media_translation.admin.inc',
  );

  // Deleting a Media Translation Set
  $items['media-translation/translation-set/%media_translation_translation_set/delete'] = array(
    'title' => 'Delete Translation Set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('i18n_translation_set_delete_confirm', 2),
    'access callback' => 'media_translation_media_translation_set_delete_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  // Callback for the translation set file autocomplete field.
  $items['media-translation/autocomplete/%/%'] = array(
    'title' => 'Autocomplete file',
    'page callback' => 'media_translation_autocomplete_language',
    'page arguments' => array(2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'media_translation.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 *
 * Configures the Media Translate tab to display
 * in the administrative overlay.
 */
function media_translation_admin_paths() {
  return array(
    'media/*/translate' => TRUE,
    'media-translation/translation-set/*/delete' => TRUE,
    'admin/config/media/file-types/manage/*/translate' => TRUE,
  );
}

/**
 * Implements hook_perm().
 */
function media_translation_permission() {
  return array(
    'add media to translation set' => array(
      'title' => t('Add media to translation set'),
      'description' => t('Allows users to group related media files into a translation set.'),
    ),
    'configure file type translation settings' => array(
      'title' => t('Configure file type translation settings'),
      'description' => t('Allows the user to configure which Media File Types can be translatable.'),
    ),
  );
}

/**
 * Implements hook_field_extra_fields().
 *
 * Adds the language field to media types.
 */
function media_translation_field_extra_fields() {
  $return = array();
  $info = entity_get_info('file');
  foreach (array_keys($info['bundles']) as $bundle) {
    $return['file'][$bundle] = i18n_language_field_extra();
  }
  return $return;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds the language selection field to the media edit form.
 */
function media_translation_form_media_edit_alter(&$form, &$form_state) {
  $fid = $form['fid']['#value'];
  $file = file_load($fid);
  $media_type = media_get_type($file);
  $translation_mode = media_translation_translation_mode($media_type);

  if ($translation_mode != I18N_MODE_NONE) {
    $default = isset($file->language) && !empty($file->language) ? $file->language : LANGUAGE_NONE;
    $form['language'] = array(
      '#description' => t('This file belongs to a multilingual file type. You can set a language for it.'),
    ) + i18n_element_language_select($default);

    if (empty($file->language) || $file->language == 'und') {
      $message = t('Please select a language to enable the Translate tab.');
      drupal_set_message(check_plain($message), 'warning');
    }
  }
}

/**
 * Determine the current translation mode for a given file type.
 *
 * @param string $media_type
 *  The name of the media/file type.
 *
 * @return INT
 *  One of the i18n Translation Option values.
 * Either I18N_MODE_NONE or I18N_MODE_TRANSLATE.
 */
function media_translation_translation_mode($media_type) {
  $modes = &drupal_static(__FUNCTION__);

  if (!isset($modes) || !isset($modes['$media_type'])) {
    $result = db_query("SELECT * FROM {media_type} WHERE name = :name", array(':name' => $media_type))->fetchObject();
    $mode = i18n_object_field($result, 'i18n_mode', I18N_MODE_NONE);
    $modes[$media_type] = $mode;
  }

  return $modes[$media_type];
}

/**
 * Menu access callback for media file translation tab.
 * Show tab only for multilingual file types.
 */
function media_translation_media_translation_tab_access($file) {
  $media_type = media_get_type($file);
  $translation_enabled = (media_translation_translation_mode($media_type) != I18N_MODE_NONE);
  $file_has_language = !empty($file->language) && $file->language != 'und';
  return $file_has_language && user_access('edit media') && user_access('translate interface') && user_access('add media to translation set') && $translation_enabled;
}

/**
 * Determines if the user can access the delete screen for a media translation set.
 *
 * @param int $tsid
 * The translation set id.
 */
function media_translation_media_translation_set_delete_access($tsid) {
  return user_access('add media to translation set');
}

/**
 * Determines if the current user has permission to change
 * the translation settings for media file types.
 */
function media_translation_file_type_translation_tab_access() {
  return user_access('administer media') && user_access('translate interface') && user_access('configure file type translation settings');
}

/**
 * Load translation set. Menu loading callback.
 */
function media_translation_translation_set_load($tsid) {
  return i18n_translation_set_load($tsid);
}


/**
 * Returns all the translations for a file.
 * Return format
 *   langcode => file_object
 * @param  $file
 * @return array
 */
function media_translation_get_translated_files($file) {
  $cache = &drupal_static(__FUNCTION__, array());
  $fid = $file->fid;
  if (isset($cache[$fid])) {
    return $cache[$fid];
  }

  $result = array(
    // This will be the fallback
    LANGUAGE_NONE => $file,
  );
  $cache[$fid] = $result;

  // No need to do anything extra if the file isn't part of a translation set
  if (empty($file->i18n_tsid)) {
    return $result;
  };

  // Make sure translation is still enabled for the file type
  $media_type = media_get_type($file);
  $translation_mode = media_translation_translation_mode($media_type);

  if ($translation_mode == I18N_MODE_NONE) {
    return $result;
  }

  // Site is currently in a different language mode from the file.
  // See if there is a version of the file available in the current language.
  $translation_set = i18n_translation_set_load($file->i18n_tsid);
  $translations = $translation_set->get_translations();
  foreach ($translations as $language_code => $translation) {
    $result[$language_code] = $translation->get_object();
  }

  $cache[$fid] = $result;
  return $result;
}



/**
 * Determines if the passed file has been translated and if
 * a translated version of the file is available.
 *
 * @param object $file
 * The file being displayed.
 *
 * @return object
 * Either the original file object or the translated file
 * for the current page language if available.
 */
function media_translation_get_translated_file($file, $language_code = NULL) {
  $translations = media_translation_get_translated_files($file);

  // See if we need to replace the file with a translated version.
  $language_code = media_translation_valid_language($language_code);
  if (is_null($language_code)) {
    // TODO: Determine what to return on invalid request, right now, it just defaults to current language
    $language_code = i18n_langcode();
  }

  // Return translation if available, fall-back to original file.
  if (array_key_exists($language_code, $translations)) {
    $file = $translations[$language_code];
  }

  return $file;
}

function media_translation_valid_language($langcode = LANGUAGE_NONE) {
  $enabled_languages = array_keys(language_list() + array(LANGUAGE_NONE => NULL));
  if (in_array($langcode, $enabled_languages)) {
    return $langcode;
  }
  return NULL;
}
/**
 * Determines if the current request is part of an admin path.
 */
function _media_translation_is_admin_path() {
  $current_path = current_path();
  $patterns = "admin/*\nmedia/*\n";

  return drupal_match_path($current_path, $patterns);
}


/**
 * Implements field-formatter-info().
 * @return array
 */
function media_translation_field_formatter_info() {
  $formatters = array(
    'media_translation' => array(
      'label' => t('Media (Localized)'),
      'field types' => array('media'),
      'settings' => array('file_view_mode' => 'default'),
    ),
  );
  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function media_translation_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $instance['display'][$view_mode]['type'] = 'media';
  return media_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function media_translation_field_formatter_settings_summary($field, $instance, $view_mode) {
  $instance['display'][$view_mode]['type'] = 'media';
  return media_field_formatter_settings_summary($field, $instance, $view_mode);
}

/**
 * Implements hook_field_prepare_view().
 *
 * @todo Get resolution on http://drupal.org/node/879034 regarding using this
 *   hook to load referenced entities.
 */
function media_translation_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  media_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items);
}

/**
 * Implement hook_field_formatter_view().
 */
function media_translation_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $files = array();
  foreach ($items as $delta => $item) {
    $file = $item['file'];
    $file = media_translation_get_translated_file($file);
    $files[$file->fid] = $file;
  }
  // $langcode will contain the requested language of the field, this seems to be almost always "UNK".
  // Not sure how things would break if it were changed to "current language" (NULL), but seems to be working for now.
  return file_view_multiple($files, $display['settings']['file_view_mode'], 0, $langcode);
}


/**
 * TranslationWrapper class that extends the string object.
 * This is because the uri in a file isn't a
 * url() compatible array. ("public://file.ext" vs array('path'=>'media/77'), and entity_get_path
 * fails, always returning "p"
 */
class media_translation_translation_wrapper extends i18n_string_object_wrapper {
  public function get_path() {
    // File objects don't have a url() compatible path object, having a stream URL.
    $file = $this->object;
    $uri = 'media/' . $file->fid;
    return $uri;
  }
}
