<?php
/**
 * @file
 * Code for the Course planner feature.
 */

include_once 'courseplanner.features.inc';

/**
 * Implements hook_menu().
 */
function courseplanner_menu() {
  return array(
    'admin/config/system/courseplanner' => array(
      'title' => 'Course planner',
      'description' => 'Setting for the Course planner module.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('courseplanner_admin_form'),
      'access arguments' => array('administer site configuration'),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function courseplanner_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "includes/$plugin";
  }
}

/**
 * Administration form for the Course planner module.
 *
 * @return array
 *   A form array.
 */
function courseplanner_admin_form($form, &$form_state) {
  $form = array(
    'courseplanner_hide_bookmarks' => array(
      '#type' => 'checkbox',
      '#title' => t('Hide the Bookmarks views, provided by the Flag module.'),
      '#default_value' => variable_get('courseplanner_hide_bookmarks', TRUE),
    ),
  );
  return system_settings_form($form);

}

/**
 * Implements hook_date_format_types().
 */
function courseplanner_date_formats() {
  return array(
    array(
      'type' => 'courseplanner_week',
      'format' => 'W',
      'locales' => array(),
    ),
    array(
      'type' => 'courseplanner_daytime',
      'format' => 'D, H:i',
      'locales' => array(),
    ),
    array(
      'type' => 'courseplanner_rss',
      'format' => 'r',
      'locales' => array(),
    ),
    array(
      'type' => 'courseplanner_export',
      'format' => 'U',
      'locales' => array(),
    ),
  );
}

function courseplanner_date_format_types() {
  return array(
    'courseplanner_week' => t('Week number'),
    'courseplanner_daytime' => t('Day and time'),
    'courseplanner_rss' => t('RSS time'),
    'courseplanner_export' => t('Courseplanner export format'),
  );
}

/**
 * Builds an options array with most relevant Course planner items.
 *
 * This function checks for Course planner items of a given type, and returns
 * an array suitable for drop-down lists. First any favourites will be checked
 * and if none are found the items created by the acting will be returned. If no
 * such items are found, all items of the matching type will be returned.
 *
 * @param $type
 *   The machine name of the content type: cp_outline, cp_offering, cp_section
 *   or cp_resource.
 * @return
 *   An array keyed by the node IDs, and the titles as lables.
 */
function courseplanner_get_items_as_options($type) {
  $options = array();

  // First, try to get favourites.
  $results = views_get_view_result('cp_item_lists', 'cp_my_favourites', $type);
  // If none are found, get items created by acting user.
  if (count($results) == 0) {
    global $user;
    $results = views_get_view_result('cp_item_lists', 'items_per_user', $type, $user->uid);
  }
  // If still none are found, get all items of the specified type.
  if (count($results) == 0) {
    $results = views_get_view_result('cp_item_lists', 'items_per_user', $type);
  }

  foreach ($results as $result) {
    $options[$result->nid] = $result->node_title;
  }

  return $options;
}

// Everything below this point is UX improvements only -- the module will work
// fine without these functions (from a technical standpoint), but it will be
// difficult to understand some parts of the site, and a lot of hidden form
// elements will start to show.

/**
 * Implements hook_views_bulk_operations_form_alter().
 *
 * Performs changes to the VBO form used to admininster lessons, such as moving
 * the action form to the bottom of the admin view.
 */
function courseplanner_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
  if ($form['#form_id'] == 'views_form_cp_offering_lessons_cp_lessons_admin' && isset($form['select'])) {
    foreach ($vbo->view->result as $key => $lesson) {
      if (isset($lesson->field_cp_lesson_status[0]['raw']['value']) && $lesson->field_cp_lesson_status[0]['raw']['value'] < 0) {
        $form['views_bulk_operations'][$key]['#disabled'] = TRUE;
        $form['views_bulk_operations'][$key]['#attributes'] = array(
          'title' => t('This lesson is locked or cancelled.'),
        );
      }
    }
    $form['select']['#type'] = 'container';

    // Hide some advanced actions in a fieldset.
    $advanced_actions = array(
      'rules_component::rules_cp_fill_lessons_with_outline',
      'rules_component::rules_cp_lesson_repeat',
      'rules_component::rules_cp_copy_lesson_to_weeks',
      'rules_component::rules_cp_lessons_shift',
      'rules_component::rules_cp_create_course_outline_from_selected_lessons',
    );
    $form['select']['advanced'] = array(
      '#type' => 'fieldset',
      '#title' => t('Advanced actions'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    foreach ($advanced_actions as $action) {
      if (isset($form['select'][$action])) {
        $form['select']['advanced'][$action] = $form['select'][$action];
        $form['select']['advanced'][$action]['#attributes'] = array(
          'title' => t('Some description'),
        );
        $form['select'][$action]['#access'] = FALSE;
      }
    }

    // Clone the action buttons and display them below the list as well.
    $form['select_below'] = $form['select'];
    $form['select_below']['#weight'] = 100;

    // Hide the advanced actions in the form above the list.
    $form['select']['advanced']['#access'] = FALSE;
  }

  // If the user is about to select a course outline, load a select list.
  if ($outline = &$form['parameter']['outline']['settings']['outline']) {
    $outline['#type'] = 'select';
    $outline['#options'] = courseplanner_get_items_as_options('cp_outline');
  }

  // If the user is about to select a course section, load a select list.
  if ($section = &$form['parameter']['section']['settings']['section']) {
    $section['#type'] = 'select';
    $section['#options'] = courseplanner_get_items_as_options('cp_section');
  }
  // If the user is about to select weeks to copy lessons to, tweak the UI.
  if ($weeks = &$form['parameter']['weeks']['settings']['weeks']) {
    $form['parameter']['weeks']['settings']['help']['#access'] = FALSE;
    $form['parameter']['weeks']['settings']['weeks']['#description'] = t('Enter week numbers, one per line. If the week is not the closest upcoming week with that number, you can enter the year as well (eg. "2013 4").');
  }
  // If the user is about to create an outline from lessons, tweak the UI.
  if ($title = &$form['parameter']['title']['settings']) {
    $title['title']['#type'] = 'textfield';
    $title['help']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters forms provided by Rules panes, to allow better UX.
 */
function courseplanner_form_rules_panes_render_form_alter(&$form, &$form_state) {
  // Alters the form used to create new lessons, and switches out the textfield
  // for a date popup.
  if ($form['component']['#value'] == 'rules_add_new_lesson') {
    $form['parameter']['date']['settings']['date']['#title_display'] = 'invisible';
    $form['parameter']['date']['settings']['date']['#type'] = 'date_popup';
    $form['parameter']['date']['settings']['date']['#description'] = '';
    $form['parameter']['date']['settings']['date']['#date_format'] = 'Y-m-d H:i';
    $form['parameter']['date']['settings']['date']['#date_increment'] = 5;
  }

  // Alters the form used to add sections to a course outline.
  if ($form['component']['#value'] == 'rules_cp_create_and_add_sections_to_outline') {
    $form['parameter']['titles']['settings']['titles']['#description'] = t('Add the name of sections, one per line. If you want a size larger than one, add size separated by a comma (eg. "My section, 5").');
  }

  // Alters the form used to add lessons to a course offering.
  if ($form['component']['#value'] == 'rules_cp_lessons_import') {
    $form['parameter']['dates']['settings']['dates']['#description'] = t('Add lesson times, one per line, on the form "start time, end time/duration" (eg. "2013-02-04 8:20, 60 minutes").<br />
      Both start and end time can be added in absolute format (eg. "2013-02-04 08:20") or in relative format (eg. "today 8:20"). End time will be relative the start time, while the start time will be relative the current time.<br />
      End times should be separated from the start time with a comma.<br />
      Finally, you can provide a lesson with a default title by adding a line "# My lesson title" above it.');
  }

  // Alters the form used to quick-add resources to sections.
  if ($form['component']['#value'] == 'rules_cp_quick_embed_resource') {
    $form['parameter']['contextual_description']['settings']['contextual_description']['#type'] = 'textfield';
    $form['parameter']['contextual_description']['settings']['contextual_description']['#description'] = t('A description of the resource, that makes sense in this section. (For example "do these exercises first".)');
    $form['parameter']['reference']['settings']['reference']['#type'] = 'textfield';
    $form['parameter']['reference']['settings']['reference']['#description'] = t('A link or a book reference.');
    $form['parameter']['title']['settings']['title']['#type'] = 'textfield';
    $form['parameter']['title']['settings']['title']['#description'] = t('Title for the resource, understandable in a general context. (For example "beginner exercises for completing the square".)');
    $form['submit']['#description'] = t('I am?');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hides the pre-filled cp_offering_outline.
 */
function courseplanner_form_cp_offering_node_form_alter(&$form, &$form_state) {
  $form['cp_offering_outline']['#access'] = FALSE;
}

/**
 * Implements hook_views_default_views_alter().
 *
 * Disables the bookmarks view provided by the Flag module.
 */
function courseplanner_views_default_views_alter($views) {
  if (isset($views['flag_bookmarks'])) {
    // You can set variable 'courseplanner_hide_bookmarks' to FALSE to stop
    // disabling the bookmarks view.
    if (variable_get('courseplanner_hide_bookmarks', TRUE)) {
      $views['flag_bookmarks']->disabled = TRUE;
    }
  }
  if (isset($views['flag_bookmarks_tab'])) {
    if (variable_get('courseplanner_hide_bookmarks', TRUE)) {
      $views['flag_bookmarks_tab']->disabled = TRUE;
    }
  }
}

/**
 * Implements hook_flag_alter().
 *
 * Hides the default 'bookmarks' flag by unsetting the content types it is used
 * on.
 */
function courseplanner_flag_alter($flag) {
  if ($flag->name == 'bookmarks') {
    // You can set variable 'courseplanner_hide_bookmarks' to FALSE to stop
    // disabling the bookmarks flag.
    if (variable_get('courseplanner_hide_bookmarks', TRUE)) {
      $flag->types = array();
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 *
 * This alter hook overrides the label setter for field collection items quite
 * brutally, since it doesn't allow other modules to do the same thing. Sorry
 * about that -- it was the best solution I could find.
 */
//function courseplanner_entity_info_alter(&$info) {
//  $info['field_collection_item']['label callback'] = 'courseplanner_fieldcollection_label';
//}

/**
 * Callback for getting the label for a lesson.
 *
 * @param $lesson
 *   The lesson field collection.
 * @return
 *   The label of the lesson, as specified in the title field, or "(no title)"
 *   if there is no title set, or FALSE if the lesson isn't actually a lesson.
 */
function courseplanner_get_lesson_label($lesson) {
  // Verify that the lesson is actually a lesson.
  if ($lesson->entityType() == 'field_collection_item' && $lesson->bundle() == 'cp_offering_lessons') {
    if (isset($lesson->cp_lesson_title[LANGUAGE_NONE][0]['safe_value'])) {
      return $lesson->cp_lesson_title[LANGUAGE_NONE][0]['safe_value'];
    }
    else {
      return t('(no title)');
    }
  }
  return FALSE;
}

/**
 * Implements hook_date_ical_feed_event_render_alter().
 *
 * Changes the summary part of the iCal event, when rendering lessons.
 */
function courseplanner_date_ical_feed_event_render_alter(&$event, $view, $context) {
  // Verify that we're working with the right type of event.
  if ($context[entity_type] == 'field_collection_item' && $context['entity']->bundle() == 'cp_offering_lessons') {
    $event['summary'] = courseplanner_get_lesson_label($context['entity']);
  }
}

/**
 * Implements hook_theme().
 *
 * Allows Courseplanner to override one of the templates for Views Data Export.
 * Thanks to http://drupal.org/node/627378 for showing how to allow module
 * overrides of Views templates.
 */
function courseplanner_theme($existing, $type, $theme, $path) {
  $themes['views_data_export_txt_body__cp_lesson_export_dates'] = array(
    'template' => 'views-data-export-txt-body--cp-lesson-export-dates',
    'path' => drupal_get_path('module', 'courseplanner') . '/theme',
    'arguments' => array('view' => NULL, 'field' => NULL, 'row' => NULL),
    'original hook' => 'views_data_export_txt_body',
    'type' => 'module',
    'preprocess functions' => array(
      // This is the global preprocess function used by all templates.
      'template_preprocess',
      // This one is specific to the type of template,
      // named 'template_preprocess_' followed by 'original hook' name.
      'template_preprocess_views_data_export_txt_body',
    ),
  );
  return $themes;
}

/**
 * Preprocess function for fullcalendar events.
 *
 * This function injects a CSS class for lessons that are locked or cancelled.
 * @param string $variables
 */
function courseplanner_preprocess_fullcalendar_event(&$variables) {
  if ($variables['entity']->entity_type == 'field_collection_item' && $variables['entity']->bundle == 'cp_offering_lessons') {
    if ($variables['entity']->cp_lesson_status['und'][0]['value'] < 0) {
      // This is pretty fugly, but it was the best/only solution I could find.
      // Sorry. Patches welcome. (blame @Itangalo)
      $variables['element'][0][0][0]['#options']['attributes']['cn'] .= ' cp-disabled';
    }
  }
}

/**
 * Implements hook_views_pre_render().
 *
 * This function checks for sections that are listed more than once in week
 * printouts, and replaces any repeats with a placeholder text.
 *
 * This function is, admittedly, a bit of a hack.
 */
function courseplanner_views_pre_render(&$view) {
  // If we're viewing a week list, run tweak to remove duplicate sections.
  if ($view->name == 'cp_offering_lessons' && $view->current_display == 'cp_lessons_week') {
    $already_rendered = array();
    // Run through all the lessons and all their sections.
    foreach ($view->result as &$lesson) {
      foreach ($lesson->field_cp_lesson_section as &$section) {
        // If a section already has been listed, replace its render
        // instructions with a place holder.
        if (isset($already_rendered[$section['raw']['target_id']])) {
          $section['rendered'] = array(
            '#type' => 'markup',
            '#markup' => t('See above.'),
            '#prefix' => '<div>',
            '#suffix' => '</div>',
          );
        }
        else {
          $already_rendered[$section['raw']['target_id']] = TRUE;
        }
      }
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function courseplanner_views_data_alter(&$data) {
  // Adds a sort handler hack, allowing nodes created by acting user to be
  // displayed on top.
  $data['node']['uid']['sort'] = array('handler' => 'courseplanner_handler_sort_author');
}
