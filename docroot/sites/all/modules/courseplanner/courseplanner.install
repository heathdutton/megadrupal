<?php

/**
 * @file
 * Install and uninstall tasks for the Course planner module.
 */

/**
 * Implements hook_install().
 */
function courseplanner_install() {
  variable_set('date_format_courseplanner_daytime', 'D, H:i');
  variable_set('date_format_courseplanner_week', 'W');
  variable_set('date_format_courseplanner_export', 'U');
}

/**
 * Implements hook_uninstall().
 */
function courseplanner_uninstall() {
  variable_del('date_format_courseplanner_daytime');
  variable_del('date_format_courseplanner_week');
  variable_del('date_format_courseplanner_export');
}

/**
 * Converts lesson from nodes to field collection items.
 */
function courseplanner_update_7200() {
  // Build a list of all lesson nodes, grouped by their course offering.
  $offering_query = new EntityFieldQuery();
  $offering_query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'cp_offering')
    ->execute();
  if (is_array($offering_query->ordered_results)) {
    foreach ($offering_query->ordered_results as $offering) {
      $lesson_query = new EntityFieldQuery();
      $lesson_query
        ->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'cp_lesson')
        ->fieldCondition('cp_course_offering', 'target_id', $offering->entity_id)
        ->execute();
      if (is_array($lesson_query->ordered_results)) {
        foreach ($lesson_query->ordered_results as $lesson) {
          $lessons[$offering->entity_id][$lesson->entity_id] = $lesson->entity_id;
        }
      }
    }
  }

  // Process the list of lessons, one by one.
  foreach ($lessons as $offering_id => $lesson_ids) {
    $offering = entity_load_single('node', $offering_id);
    foreach (entity_load('node', $lesson_ids) as $lesson) {
      $values = array();
      $values['field_name'] = 'cp_offering_lessons';
      $values['cp_lesson_date'] = $lesson->cp_lesson_date;
      $values['cp_lesson_section'] = $lesson->cp_section;
      $values['cp_lesson_title'][LANGUAGE_NONE][0]['value'] = $lesson->title;

      $new_lesson = entity_create('field_collection_item', $values);
      $new_lesson->setHostEntity('node', $offering);
      $new_lesson->save();

    }
    entity_delete_multiple('node', $lesson_ids);
  }
}

/**
 * Converts resources lists in sections into single embedded resources. If you
 * have a lot of course sections on your site, this update might take a few
 * minutes. Before running this update, you should temporarily set the field
 * 'cp_resource' to unlimited values. See UPDATE.txt for details.
 */
function courseplanner_update_7201(&$sandbox) {
  // If this is the first pass through the update function, set some variables.
  if (!isset($sandbox['total'])) {
    $sandbox['section_count'] = 0;
    $sandbox['list_count'] = 0;
    $sandbox['resource_count'] = 0;

    // Build a list of all course sections.
    $section_query = new EntityFieldQuery();
    $section_query
      ->entityCondition('entity_type', 'node')
      ->propertyCondition('type', 'cp_section')
      ->execute();
    if (!is_array($section_query->ordered_results)) {
      return;
    }
    // Store the sections to process in the sandbox variable.
    $sandbox['sections'] = $section_query->ordered_results;
    $sandbox['total'] = count($sandbox['sections']);
  }

  $sections_to_process = 20;

  // Loop through a set number of the sections.
  while ($sections_to_process > 0 && count($sandbox['sections']) > 0) {
    // Load the next section in the list, and tick up the counters.
    $current_section = entity_load_single('node', array_shift($sandbox['sections'])->entity_id);
    $sections_to_process--;
    $sandbox['section_count']++;

    // Start setting some properties for the embedded resources.
    $current_section->cp_section_resources_embedded[LANGUAGE_NONE] = array();

    // Build a list of all resource lists in the current section.
    $list_ids = array();
    if (isset($current_section->cp_resource_lists[LANGUAGE_NONE]) && is_array($current_section->cp_resource_lists[LANGUAGE_NONE])) {
      foreach ($current_section->cp_resource_lists[LANGUAGE_NONE] as $item) {
        $list_ids[] = $item['value'];
      }
    }
    $resource_lists = entity_load('field_collection_item', $list_ids);

    // Loop through all the resource lists in the current section.
    $i = 0;
    foreach ($resource_lists as $current_resource_list) {
      $sandbox['list_count']++;

      // Build a list of all the resources in the current resource list.
      $resource_ids = array();
      if (isset($current_resource_list->cp_resource[LANGUAGE_NONE]) && is_array($current_resource_list->cp_resource[LANGUAGE_NONE])) {
        foreach($current_resource_list->cp_resource[LANGUAGE_NONE] as $item) {
          $resource_ids[] = $item['target_id'];
        }
      }
      $resources = entity_load('node', $resource_ids);

      // Build a new embedded resource item for each resource.
      foreach ($resources as $current_resource) {
        $sandbox['resource_count']++;
        $values = array(
          'field_name' => 'cp_section_resources_embedded',
          'cp_embedded_resource_description' => array(LANGUAGE_NONE => array(array('value' => $current_resource_list->cp_list_name[LANGUAGE_NONE][0]['value'] . ' | ' . $current_resource->title))),
          'cp_list_promote' => $current_resource_list->cp_list_promote,
          'cp_resource' => array(LANGUAGE_NONE => array(array('target_id' => $current_resource->nid))),
        );

        $embedded_resource = entity_create('field_collection_item', $values);
        $embedded_resource->setHostEntity('node', $current_section);
        $embedded_resource->save();
        $current_section->cp_section_resources_embedded[LANGUAGE_NONE][$i]['value'] = $embedded_resource->item_id;
        $i++;
      }
    }

    // Delete the old resources lists.
    entity_delete_multiple('field_collection_item', $list_ids);
    node_save($current_section);
  }

  if (count($sandbox['sections']) == 0) {
    $sandbox['#finished'] = 1;
  }
  else {
    $sandbox['#finished'] = $sandbox['section_count'] / $sandbox['total'];
  }

  if ($sandbox['#finished'] === 1) {
    drupal_set_message(t('Found @count sections. Updated @section_count, with @list_count lists and in total @resource_count resources', array('@count' => $sandbox['total'], '@section_count' => $sandbox['section_count'], '@list_count' => $sandbox['list_count'], '@resource_count' => $sandbox['resource_count'])));
  }
}
