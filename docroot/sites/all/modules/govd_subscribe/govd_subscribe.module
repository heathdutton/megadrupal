<?php

/**
 * @file
 * Creates signup blocks and fieldable panels panes from GovDelivery.
 */

/**
 * Implements hook_list_option_info().
 */
function govd_subscribe_list_option_info() {
  $info = array();
  $info['govd_topics'] = array(
    'label' => t('GovDelivery Topics'),
    'callback' => 'govd_subscribe_get_topics',
  );
  return $info;
}

/**
 * Implements hook_block_info().
 */
function govd_subscribe_block_info() {
  $blocks = array();
  $blocks['govd_global'] = array(
    'info' => t('GovDelivery global subscription'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function govd_subscribe_block_configure($delta = '') {
  $form = array();
  if ($delta == 'govd_global') {
    $form['govd_subscribe_topic'] = array(
      '#type' => 'select',
      '#title' => t('Available GovDelivery Topics'),
      '#options' => govd_subscribe_get_topics(),
      '#default_value' => variable_get('govd_global_topic', 'USDOJ'),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function govd_subscribe_block_save($delta = '', $edit = array()) {
  if ($delta == 'govd_global') {
    // Have Drupal save the string to the database.
    variable_set('govd_global_topic', $edit['govd_subscribe_topic']);
  }
}

/**
 * Implements hook_block_view().
 */
function govd_subscribe_block_view($delta = '') {
  $topic = variable_get('govd_global_topic', NULL);
  $block = array();
  switch ($delta) {
    case 'govd_global':
      $block['subject'] = t('Subscribe');
      $block['content'] = drupal_get_form('govd_subscribe_form', $topic);
      break;
  }
  return $block;
}

/**
 * Implements hook_field_info().
 */
function govd_subscribe_field_info() {
  return array(
    'govd_subscribe_topic' => array(
      'label' => t('GovDelivery'),
      'default_widget' => 'govd_subscribe_topic_widget',
      'default_formatter' => 'govd_subscribe_topic_form_formatter',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function govd_subscribe_field_widget_info() {
  return array(
    'govd_subscribe_topic_widget' => array(
      'label' => t('Topics'),
      'field types' => array('govd_subscribe_topic'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function govd_subscribe_field_formatter_info() {
  return array(
    'govd_subscribe_topic_form_formatter' => array(
      'label' => t('Form'),
      'field types' => array('govd_subscribe_topic'),
    ),
    'govd_subscribe_topic_link_formatter' => array(
      'label' => t('Link'),
      'field types' => array('govd_subscribe_topic'),
    ),
    'govd_subscribe_topic_image_formatter' => array(
      'label' => t('Image'),
      'field types' => array('govd_subscribe_topic'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function govd_subscribe_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['govd_subscribe_topic']) ? $items[$delta]['govd_subscribe_topic'] : '';
  $widget = $element;

  switch ($instance['widget']['type']) {
    case 'govd_subscribe_topic_widget':
      $widget += array(
        '#type' => 'select',
        '#title' => t('Available GovDelivery Topics'),
        '#options' => govd_subscribe_get_topics(),
        '#default_value' => $value,
        '#required' => 1,
      );
      break;
  }
  $element['govd_subscribe_topic'] = $widget;

  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function govd_subscribe_field_is_empty($item, $field) {
  return empty($item['govd_subscribe_topic']);
}

/**
 * Implements hook_field_formatter_view().
 */
function govd_subscribe_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'govd_subscribe_topic_form_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#type' => 'form',
        );
        array_push($element[$delta], drupal_get_form('govd_subscribe_form', $item['govd_subscribe_topic']));
      }
      break;

    case 'govd_subscribe_topic_link_formatter':
      $account_key = variable_get('govdelivery_account_key', NULL);

      foreach ($items as $delta => $item) {
        $url = 'https://public.govdelivery.com/accounts/' . $account_key . '/subscriber/new?topic_id=' . $item['govd_subscribe_topic'];
        $element[$delta]['#markup'] = l(t('Email updates'), $url);
      }
      break;

    case 'govd_subscribe_topic_image_formatter':
      $image = '<img src="/' . drupal_get_path('module', 'govd_subscribe') . '/img/envelope.jpg">';
      $options = array(
        'html' => TRUE,
      );
      $account_key = variable_get('govdelivery_account_key', NULL);

      foreach ($items as $delta => $item) {
        $url = 'https://public.govdelivery.com/accounts/' . $account_key . '/subscriber/new?topic_id=' . $item['govd_subscribe_topic'];
        $element[$delta]['#markup'] = l($image . t('Email updates'), $url, $options);
      }
      break;
  }
  return $element;
}

/**
 * A generic form for use in a panels pane and a block.
 */
function govd_subscribe_form($form_id, $args) {
  $form = array();

  $form['topic'] = array(
    '#type'  => 'hidden',
    // api.drupal.org/api/drupal/includes%21form.inc/function/drupal_get_form/7
    '#value' => $args['build_info']['args'][0],
  );

  $form['email'] = array(
    '#type'  => 'textfield',
    '#title' => t('Email'),
    '#size' => 25,
    '#element_validate' => array('_govd_subscribe_validate_email'),
  );

  $form['submit'] = array(
    '#type'   => 'submit',
    '#value'  => t('Subscribe'),
  );

  return $form;
}

/**
 * Validates the email form item.
 */
function _govd_subscribe_validate_email($element, &$form_state, $form) {
  if (!valid_email_address($element['#value'])) {
    form_set_error('email', t('You must enter a valid e-mail address.'));
  }
}

/**
 * Implements hook_form_submit().
 */
function govd_subscribe_form_submit($form_id, &$form_state) {
  $queue = DrupalQueue::get('govdelivery_topic_submissions');
  $queue->createQueue();

  $values = $form_state['values'];

  $data = array('topic' => $values['topic'], 'email' => $values['email']);
  $queue->createItem($data);

  drupal_set_message(t('You have been subscribed.'));
}

/**
 * Implements hook_cron_queue_info().
 */
function govd_subscribe_cron_queue_info() {
  $queues = array();
  $queues['govdelivery_topic_submissions'] = array(
    'worker callback' => 'govd_subscribe_process_claim_queue_item',
    'time' => 20,
    'skip on cron' => TRUE,
  );
  return $queues;
}

/**
 * Queue processor.
 *
 * This is required to be run via drush via cron
 * `drush queue-run govdelivery_topic_submissions`.
 */
function govd_subscribe_process_claim_queue_item($data) {
  module_load_include('inc', 'govd_subscribe', 'govd_subscribe');
  try {
    $client = new GovDeliveryClient();
    $process = $client->setSubscription($data);
    if ($process['status'] !== 200) {
      watchdog(
        'govd_subscribe',
        'Error processing queue item: !item http status !status and response body !body', array(
          '!item' => check_plain(var_export($data, TRUE)),
          '!status' => check_plain($process['status']),
          '!body' => check_plain($process['response']),
        ),
        WATCHDOG_WARNING,
        l(t('View in Queue UI'), 'admin/config/system/queue-ui/govdelivery_topic_submissions_failures'));
      $queue = DrupalQueue::get('govdelivery_topic_submissions_failures');
      $queue->createItem($data);
    }
  }
  catch (Exception $e) {
    watchdog('govd_subscribe', 'Exception: @error', array('@error' => $e->getMessage()), WATCHDOG_ERROR);
  }
}

/**
 * Fetch the data from the API and cache.
 */
function govd_subscribe_get_topics() {
  module_load_include('inc', 'govd_subscribe', 'govd_subscribe');
  $data = array();

  if ($cache = cache_get('govd_topics_raw', 'cache')) {
    $data = $cache->data;
  }
  else {
    try {
      $client = new GovDeliveryClient();
      $data = $client->getTopics();
      cache_set('govd_topics_raw', $data);
    }
    catch (Exception $e) {
      watchdog('govd_subscribe', 'Error: @error', array('@error' => $e->getMessage()));
    }
  }
  $data = govd_subscribe_process_xml_topic_data($data);
  return $data;
}

/**
 * Throw away the majority of the XML and create a key-value array.
 */
function govd_subscribe_process_xml_topic_data($data) {
  $new_data = array();

  if ($cache = cache_get('govd_topics_processed', 'cache')) {
    $new_data = $cache->data;
  }
  else {
    $topics = json_decode(json_encode((array) simplexml_load_string($data)), 1);
    foreach ($topics['topic'] as $topic) {
      $new_data[$topic['code']] = $topic['name'];
    }
    cache_set('govd_topics_processed', $new_data);
  }

  return $new_data;
}
