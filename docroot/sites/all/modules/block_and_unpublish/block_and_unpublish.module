<?php
define('BLOCK_AND_UNPUBLISH_REF_ITEM_NODE', 'node');
define('BLOCK_AND_UNPUBLISH_REF_ITEM_NODE_REVISION', 'node_revision');
define('BLOCK_AND_UNPUBLISH_REF_ITEM_COMMENT', 'comment');

/**
 * Implements hook_permission().
 */
function block_and_unpublish_permission() {
  return array(
    'use block and unpublish' => array(
      'title' => t('Use Block and Unpublish'),
      'description' => t('Allow users to apply the "Block and Unpublish" action on users.'),
    ),
  );
}

/*************
 *
 * Operation.
 *
 *************/

/**
 * Implements hook_user_operations().
 */
function block_and_unpublish_user_operations() {
  $operations = array();

  // Deal with permissions.
  if (user_access('use block and unpublish')) {
    // Add operations.
    $operations = array(
      'block_and_unpublish' => array(
        'label' => t('Block user(s) and unpublish their content & comments'),
        'callback' => 'block_and_unpublish_content_and_comments_operation',
      ),

      'block_and_unpublish_restore' => array(
        'label' => t('Undo: Block user(s) and unpublish their content & comments'),
        'callback' => 'block_and_unpublish_restore_user_content_operation',
      ),
    );
  }

  return $operations;
}

/**
 * Blocks content and comments for users.
 * @param array $accounts
 */
function block_and_unpublish_content_and_comments_operation($accounts) {
  // Block the selected users.
  user_user_operations_block($accounts);

  // Unpublish content.
  foreach($accounts as $uid){
    // Block user and unpublish their content.
    block_and_unpublish_content_and_comments($uid);
  }
}

/**
 * Restores a blocked user account and any content/comments that were blocked with this module.
 * @param array $accounts
 */
function block_and_unpublish_restore_user_content_operation($accounts) {
  // Unblock accounts.
  user_user_operations_unblock($accounts);

  // Re-publish content & comments.
  foreach($accounts as $uid) {
    block_and_unpublish_restore_user_content($uid);
  }

  // Clear the cache.
  cache_clear_all();
}

/**********
 *
 * Action.
 *
 **********/

/**
 * Implements hook_action_info().
 */
function block_and_unpublish_action_info() {
  return array(
    'block_and_unpublish_content_and_comments_action' => array(
      'type' => 'user',
      'label' => t('Block and unpublish'),
      'configurable' => FALSE,
      'triggers' => array('use block and unpublish'),
    ),

    'block_and_unpublish_restore_user_content_action' => array(
      'type' => 'user',
      'label' => t('Undo: Block and unpublish'),
      'configurable' => FALSE,
      'triggers' => array('use block and unpublish'),
    ),
  );
}

/**
 * Action callback.
 */
function block_and_unpublish_content_and_comments_action(&$entity, $context = array()) {
  $uid = $entity->uid;

  // Block user.
  $account_arr = array($uid);
  user_user_operations_block($account_arr);

  // Unpublish their content.
  block_and_unpublish_content_and_comments($uid);

  // Clear the cache.
  cache_clear_all();
}

function block_and_unpublish_restore_user_content_action(&$entity, $context = array()) {
  $uid = $entity->uid;

  // Unblock user.
  $account_arr = array($uid);
  user_user_operations_unblock($account_arr);

  // Re-publish their content.
  block_and_unpublish_restore_user_content($uid);

  // Clear the cache.
  cache_clear_all();
}

/********************
 *
 * Helper functions.
 *
 *******************/

/**
 * Blocks a given user and unpublishes their content.
 */
function block_and_unpublish_content_and_comments($uid) {
  // Unpublish content.
  block_and_unpublish_user_content($uid);
  
  // Unpublish comments.
  block_and_unpublish_user_comments($uid);

  // Create report.
  watchdog('Block and unpublish', t('User @uid has been blocked and their content has been unpublished.', array('@uid', $uid)));
}

/**
 * Unpublishes user nodes.
 */
function block_and_unpublish_user_content($uid) {
  $result = db_query("SELECT nid FROM {node} WHERE node.uid = :uid AND node.status = 1", array(':uid' => $uid));
  foreach($result as $node_record) {
    $nid = $node_record->nid;

    // Handle node revisions.
    // -- get list of node revisions.
    $revision_result = db_query('SELECT vid FROM {node_revision} WHERE node_revision.nid = :nid', array(':nid' => $nid));
    // -- unpublish node revisions.
    $node_revisions_udpated = db_update('node_revision')
    ->expression('status', ':value', array(':value' => 0))
    ->condition('nid', $nid, '=')
    ->execute();

    // Unpublish node.
    $node_udpated = db_update('node')
    ->expression('status', ':value', array(':value' => 0))
    ->condition('nid', $nid, '=')
    ->execute();

    // Log unpublished items.
    block_and_unpublish_log_unpublished_item($nid, $uid, BLOCK_AND_UNPUBLISH_REF_ITEM_NODE);
    foreach($revision_result as $revision_record) {
      $vid = $revision_record->vid;
      block_and_unpublish_log_unpublished_item($vid, $uid, BLOCK_AND_UNPUBLISH_REF_ITEM_NODE_REVISION);
    }
  }
}

/**
 * Unpublishes user comments.
 */
function block_and_unpublish_user_comments($uid) {
  $result = db_query("SELECT cid FROM {comment} WHERE comment.uid = :uid AND comment.status = 1", array(':uid' => $uid));
  foreach($result as $comment_record) {
    $cid = $comment_record->cid;
    // Unpublish node
    $node_udpated = db_update('comment')
    ->expression('status', ':value', array(':value' => 0))
    ->condition('cid', $cid, '=')
    ->execute();

    // Log unpublished comments.
    block_and_unpublish_log_unpublished_item($cid, $uid, BLOCK_AND_UNPUBLISH_REF_ITEM_COMMENT);
  }
}

/**
 * Logs an unpublished item.
 */
function block_and_unpublish_log_unpublished_item($item_id, $uid, $item_type_reference) {
  $timestamp = time();
  db_insert('block_and_unpublish_records')
    ->fields(array(
        'uid' => $uid,
        'item_type' => $item_type_reference,
        'item_id' => $item_id,
        'timestamp' => $timestamp,
      ))
    ->execute();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function block_and_unpublish_form_user_profile_form_alter(&$form, $form_state) {
  // Add Block and Unpublish field
  $form['account']['block_and_unpublish'] = array(
    '#type' => 'checkbox',
    '#title' => t('Unpublish blocked user\'s content'),
    '#states' => array(
      // Show this options when the status is set to "Blocked".
      'visible' => array(
        ':input[name="status"]' => array('value' => '0'),
      ),
    ),
    '#default_value' => TRUE,
    '#weight' => 1,
  );
  $form['account']['roles']['#weight'] = 2;

  // Add submit handler.
  $form['#submit'][] = '_block_and_unpublish_form_element_submit_handler';
}

/**
 * Submit handler for user account form element.
 */
function _block_and_unpublish_form_element_submit_handler($form, $form_state) {
  if(($form_state['values']['status'] == 0) && ($form_state['values']['block_and_unpublish'] == 1)){
    // Unpublish content.
    $uid = $form_state['values']['uid'];
    block_and_unpublish_user_content($uid);

    // Unpublish comments.
    block_and_unpublish_user_comments($uid);
  }
}

/**
 * Restores a user to active status and re-publishes their content and comments that have been
 * unpublished by this module.
 */
function block_and_unpublish_restore_user_content($uid) {
  // Re-publish content & comments.
  $items_to_restore = db_query('SELECT * FROM {block_and_unpublish_records} WHERE uid = :uid', array(':uid' => $uid));
  foreach($items_to_restore as $itr_record) {
    $item_updated = FALSE;
    switch($itr_record->item_type) {
      case BLOCK_AND_UNPUBLISH_REF_ITEM_NODE:
        $item_updated = db_update('node')
          ->expression('status', ':value', array(':value' => 1))
          ->condition('nid', $itr_record->item_id, '=')
          ->execute();
        break;

      case BLOCK_AND_UNPUBLISH_REF_ITEM_NODE_REVISION:
        $item_updated = db_update('node_revision')
          ->expression('status', ':value', array(':value' => 1))
          ->condition('vid', $itr_record->item_id, '=')
          ->execute();
        break;

      case BLOCK_AND_UNPUBLISH_REF_ITEM_COMMENT:
        $item_updated = db_update('comment')
          ->expression('status', ':value', array(':value' => 1))
          ->condition('cid', $itr_record->item_id, '=')
          ->execute();
        break;
    }

    // Delete "unpublished" record.
    if($item_updated) {
      $record_deleted = db_delete('block_and_unpublish_records')->condition('id', $itr_record->id, '=')->execute();
    }
  }
}
