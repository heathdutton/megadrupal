<?php

/**
 * @file
 * Module to administer ISPConig Domains from within Drupal.
 */

/**
 *  Implements hook_ispconfig_api_functions_register().
 */
function ispconfig_domains_ispconfig_api_functions_register() {
  $path = drupal_get_path('module', 'ispconfig_domains');
  $file = 'ispconfig_domains.module';

  return array(
    // Native API functions.
    'domains_domain_add' => array(
      'name' => 'domains_domain_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => array(
          'domain' => '', // domain(varchar(255)).
        ),
      ),
      'access' => array(
        'ispconfig_domains domain_add' => array(
          'title' => t('Add a new domain'),
          'description' => t('Allows adding new domain to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_domains',
      'callback' => 'ispconfig_domains_domains_domain_add',
      'file' => $file,
      'path' => $path,
    ),
    'domains_domain_delete' => array(
      'name' => 'domains_domain_delete',
      'parameters' => array(
        'domain_id' => 0,
        ),
      'access' => array(
        'ispconfig_domains domain_delete' => array(
          'title' => t('Deletes a domain'),
          'description' => t('Allows deleting a domain from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_domains',
      'callback' => 'ispconfig_domains_domains_domain_delete',
      'file' => $file,
      'path' => $path,
    ),
    'domains_domain_get' => array(
      'name' => 'domains_domain_get',
      'parameters' => array(
        'domain_id' => 0,
      ),
      'access' => array(
        'ispconfig_domains domain_get' => array(
          'title' => t('Get a domain'),
          'description' => t('Allows retrieving domain/s from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_domains',
      'callback' => 'ispconfig_domains_domains_domain_get',
      'file' => $file,
      'path' => $path,
    ),
    'domains_get_all_by_user' => array(
      'name' => 'domains_get_all_by_user',
      'parameters' => array(
        'group_id' => '',
      ),
      'access' => array(
        'ispconfig_domains domain_get' => array(
          'title' => t('Get a domain'),
          'description' => t('Allows retrieving domain/s from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_domains',
      'callback' => 'ispconfig_domains_domains_get_all_by_user',
      'file' => $file,
      'path' => $path,
    ),
  );
}

/**
 * Implements hook_help().
 */
function ispconfig_domains_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ispconfig_domains':
      return '<p>' . t('ISPConfig Help') . '</p>';
  }
}

//------------------------------------------------------------------------------
// API functions for ISPConfig.
//------------------------------------------------------------------------------

/**
 * Adds a new domain.
 *
 * Implements ISPConfig domains_domain_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of client.
 * @param array $params
 *  Associative array containing the domain information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of the newly created domain or NULL on errors.
 */
function ispconfig_domains_domains_domain_add($client_id, $params, $session_id = '', $show_errors = TRUE){
  return ispconfig_api_execute('domains_domain_add',array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Deletes a domain.
 *
 * Implements ISPConfig domains_domain_delete($session_id, $domain_id).
 *
 * @param int $domain_id
 *  ID of Domain.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 * Number of deleted records or NULL on errors.
 */
function ispconfig_domains_domains_domain_delete($domain_id, $session_id = '', $show_errors = TRUE){
  return ispconfig_api_execute('domains_domain_delete',array('domain_id' => $domain_id,), $session_id, $show_errors);
}

/**
 * Retrieves information about a domain.
 *
 * Implements ISPConfig domains_domain_get($session_id, $domain_id).
 *
 * @param int $domain_id
 *  ID of Domain.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen domain or NULL on errors.
 */
function ispconfig_domains_domains_domain_get($domain_id, $session_id = '', $show_errors = TRUE){
  return ispconfig_api_execute('domains_domain_get',array('domain_id' => $domain_id,), $session_id, $show_errors);
}

/**
 * Returns information about the domains of the system group.
 *
 * Implements ISPConfig domains_get_all_by_user($session_id, $domain_id).
 *
 * @param int $group_id
 *  group ID of Domain.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  An array with the domain parameters' values or NULL on errors.
 */
function ispconfig_domains_domains_get_all_by_user($group_id, $session_id = '', $show_errors = TRUE){
  return ispconfig_api_execute('domains_get_all_by_user',array('group_id' => $group_id,), $session_id, $show_errors);
}
