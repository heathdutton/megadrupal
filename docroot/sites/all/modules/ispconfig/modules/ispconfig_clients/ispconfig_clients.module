<?php

/**
 * @file
 * Module to administer ISPConfig Clients from within Drupal.
 */

/**
 * Implements hook_ispconfig_api_functions_register()
 */
function ispconfig_clients_ispconfig_api_functions_register() {
  $path = drupal_get_path('module', 'ispconfig_clients');
  $file = 'ispconfig_clients.module';

  // Standard client fields for client_add and client_update
  $client_fields = array(
    'company_name' => '', // Company Name (varchar(64))
    'contact_name' => '', // Name of the Client (varchar(64))
    'customer_no' => '', // ISPConfig Customer Number (varchar(64))
    'vat_id' => '', // VAT ID (varchar(64))
    'street' => '', // Street (varchar(255))
    'zip' => '', // ZIP (varchar(32))
    'city' => '', // City (varchar(64))
    'state' => '', // State (varchar(32))
    'country' => '', // Country (char(2))
    'telephone' => '', // Telephone Number (varchar(32))
    'mobile' => '', // Mobile Phone Number (varchar(32))
    'fax' => '', // Telefax Number (varchar(32))
    'email' => '', // Email Address (varchar(255))
    'internet' => '', // Home Page (varchar(255))
    'icq' => '', // ICQ Number (varchar(16))
    'notes' => '', // Notes (text)
    'default_mailserver' => 0, // Default Mail Server ID (int(11))
    'limit_maildomain' => 0, // Mail Domain Limit (int(11))
    'limit_mailbox' => 0, // Mailbox Limit (int(11))
    'limit_mailalias' => 0, // Mail Alias Limit (int(11))
    'limit_mailaliasdomain' => 0, // Mail Alias Domain Limit (int(11))
    'limit_mailforward' => 0, // Mail Forwarders Limit (int(11))
    'limit_mailcatchall' => 0, //  (int(11))
    'limit_mailrouting' => 0, //  (int(11))
    'limit_mailfilter' => 0, //  (int(11))
    'limit_fetchmail' => 0, //  (int(11))
    'limit_mailquota' => 0, //  (int(11))
    'limit_spamfilter_wblist' => 0, //  (int(11))
    'limit_spamfilter_user' => 0, //  (int(11))
    'limit_spamfilter_policy' => 0, //  (int(11))
    'default_webserver' => 0, //  (int(11))
    'limit_web_ip' => '', //  (text)
    'limit_web_domain' => 0, //  (int(11))
    'limit_web_quota' => 0, //  (int(11))
    'web_php_options' => '', //  (varchar(255))
    'limit_web_subdomain' => 0, //  (int(11))
    'limit_web_aliasdomain' => 0, //  (int(11))
    'limit_ftp_user' => 0, //  (int(11))
    'limit_shell_user' => 0, //  (int(11))
    'ssh_chroot' => '', //  (varchar(255))
    'limit_webdav_user' => 0, //  (int(11))
    'default_dnsserver' => 0, //  (int(11))
    'limit_dns_zone' => 0, //  (int(11))
    'limit_dns_slave_zone' => 0, //  (int(11))
    'limit_dns_record' => 0, //  (int(11))
    'default_dbserver' => 0, //  (int(11))
    'limit_database' => 0, //  (int(11))
    'limit_cron' => 0, //  (int(11))
    'limit_cron_type' => 'url', //  (enum('url','chrooted','full'))
    'limit_cron_frequency' => 0, //  (int(11))
    'limit_traffic_quota' => 0, //  (int(11))
    'limit_client' => '', //  (varchar(64))
    'parent_client_id' => 0, //  (int(11))
    'username' => '', //  (varchar(64))
    'password' => '', //  (varchar(64))
    'language' => '', //  (char(2))
    'usertheme' => '', //  (varchar(32))
    'template_master' => 0, //  (int(11))
    'template_additional' => '', //  (varchar(255))
    'created_at' => 0, //  (bigint(20))
  );

  return array(
    // Native API functions
    'client_add' => array(
      'name' => 'client_add',
      'parameters' => array(
        'reseller_id' => 0,
        'params' => $client_fields,
      ),
      'access' => array(
        'ispconfig_clients client_add' => array(
          'title' => t('Add a new client'),
          'description' => t('Allows adding new clients to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_clients',
      'callback' => 'ispconfig_clients_client_add',
      'file' => $file,
      'path' => $path,
    ),
    'client_change_password' => array(
      'name' => 'client_change_password',
      'parameters' => array(
        'client_id' => 0,
        'new_password' => '',
      ),
      'access' => array(
        'ispconfig_clients client_change_password' => array(
          'title' => t("Change a client's password"),
          'description' => t('Allows changing the passwords of ISPConfig clients.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_clients',
      'callback' => 'ispconfig_clients_client_change_password',
      'file' => $file,
      'path' => $path,
    ),
    'client_delete' => array(
      'name' => 'client_delete',
      'parameters' => array(
        'client_id' => 0,
      ),
      'access' => array(
        'ispconfig_clients client_delete' => array(
          'title' => t("Delete a client"),
          'description' => t('Allows deleting ISPConfig clients.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_clients',
      'callback' => 'ispconfig_clients_client_delete',
      'file' => $file,
      'path' => $path,
    ),
    'client_get' => array(
      'name' => 'client_get',
      'parameters' => array(
        'client_id' => 0,
      ),
      'access' => array(
        'ispconfig_clients client_get' => array(
          'title' => t("Retrieve client information"),
          'description' => t('Allows reading ISPConfig client information.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_clients',
      'callback' => 'ispconfig_clients_client_get',
      'file' => $file,
      'path' => $path,
    ),
    'client_get_all' => array(
      'name' => 'client_get_all',
      'parameters' => array(),
      'access' => array(
        'ispconfig_clients client_get' => array(
          'title' => t("Retrieve client information"),
          'description' => t('Allows reading ISPConfig client information.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_clients',
      'callback' => 'ispconfig_clients_client_get_all',
      'file' => $file,
      'path' => $path,
    ),
    // Continue here with the next functions ...
    'client_delete_everything' => array(
      'name' => 'client_delete_everything',
      'parameters' => array(
        'client_id' => 0,
      ),
      'access' => array(
        'ispconfig_clients client_delete' => array(
          'title' => t("Deletes client"),
          'description' => t('Allows deleting ISPConfig clients.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_clients',
      'callback' => 'ispconfig_clients_client_delete_everything',
      'file' => $file,
      'path' => $path,
    ),
    'client_get_by_username' => array(
      'name' => 'client_get_by_username',
      'parameters' => array(
        'username' => '',
      ),
      'access' => array(
        'ispconfig_clients client_get' => array(
          'title' => t("Retrieve client information"),
          'description' => t('Allows reading ISPConfig client information.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_clients',
      'callback' => 'ispconfig_clients_client_get_by_username',
      'file' => $file,
      'path' => $path,
    ),
    'client_get_id' => array(
      'name' => 'client_get_id',
      'parameters' => array(
        'sys_userid' => 0,
      ),
      'access' => array(
        'ispconfig_clients client_get' => array(
          'title' => t("Retrieve client information"),
          'description' => t('Allows reading ISPConfig client information.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_clients',
      'callback' => 'ispconfig_clients_client_get_id',
      'file' => $file,
      'path' => $path,
    ),
    'client_get_sites_by_user' => array(
      'name' => 'client_get_sites_by_user',
      'parameters' => array(
        'sys_userid' => 0,
        'sys_groupid' => 0,
      ),
      'access' => array(
        'ispconfig_clients client_sites' => array(
          'title' => t('Retrieve client sites information'),
          'description' => t('Allows reading ISPConfig client information.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_clients',
      'callback' => 'ispconfig_clients_client_get_sites_by_user',
      'file' => $file,
      'path' => $path,
    ),
    'client_templates_get_all' => array(
      'name' => 'client_templates_get_all',
      'parameters' => array(),
      'access' => array(
        'ispconfig_clients client_templates' => array(
          'title' => t('Retrieve client templates information'),
          'description' => t('Allows reading ISPConfig client information.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_clients',
      'callback' => 'ispconfig_clients_client_templates_get_all',
      'file' => $file,
      'path' => $path,
    ),
    'client_update' => array(
      'name' => 'client_update',
      'parameters' => array(
        'client_id' => 0,
        'reseller_id' => 0,
        'params' => $client_fields,
      ),
      'access' => array(
        'ispconfig_clients client_update' => array(
          'title' => t('Updates client information'),
          'description' => t('Allows updating ISPConfig client information.')
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_clients',
      'callback' => 'ispconfig_clients_client_update',
      'file' => $file,
      'path' => $path,
    ),
    // Additional (NON-NATIVE API) functions provided by the module
    'clients_get_all' => array(
      'name' => 'clients_get_all',
      'parameters' => array(),
      'access' => array(
        'ispconfig_clients client_get' => array(
          'title' => t("Retrieve client information"),
          'description' => t('Allows reading ISPConfig client information.'),
        ),
      ),
      'native' => FALSE,
      'module' => 'ispconfig_clients',
      'callback' => 'ispconfig_clients_clients_get_all',
      'file' => $file,
      'path' => $path,
    ),
  );
}

/**
 * Implements hook_help().
 */
function ispconfig_clients_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ispconfig_clients':
      return '<p>' . t('ISPConfig Help') . '</p>';
  }
}

//-----------------------------------------------------------------------------
// ISPConfig API function callbacks of the ISPConfig Clients module
//-----------------------------------------------------------------------------

/**
 * Adds a new client.
 *
 * Implements ISPConfig client_add($session_id, $reseller_id, $params)
 *
 * @param int $reseller_id
 *   ID of the reseller.
 * @param array $params
 *   Associative array containing the client information.
 * @param string $session_id (optional)
 *   ID of an existing session with ISPConfig. If not set, a new session
 *   will be opened for this request and closed afterwards.
 * @param boolean $show_errors (optional)
 *   Whether to show errors (true) or not (false). Defaults to true.
 * @return int
 *   ID of the newly created client.
 */
function ispconfig_clients_client_add($reseller_id, $params, $session_id = '', $show_errors = TRUE) {
  // @ToDo: Implement some validation on the params
  // Call the ispconfig core module
  return ispconfig_api_execute('client_add', array(
      'reseller_id' => $reseller_id,
      'params' => $params,
    ), $session_id, $show_errors);
}

/**
 * Changes a client's password.
 *
 * Implements ISPConfig client_change_password($session_id, $client_id, $new_password)
 *
 * @param type $client_id
 *   ID of the client.
 * @param type $new_password
 *   New password of the client.
 * @param string $session_id (optional)
 *   ID of an existing session with ISPConfig. If not set, a new session
 *   will be opened for this request and closed afterwards.
 * @param boolean $show_errors (optional)
 *   Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *   '1' on success, null or other values otherwise.
 */
function ispconfig_clients_client_change_password($client_id, $new_password, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('client_change_password', array(
      'client_id' => $client_id,
      'new_password' => $new_password,
    ), $session_id, $show_errors);
}

/**
 * Deletes a client.
 *
 * Implements ISPConfig client_delete($session_id, $client_id).
 *
 * @param type $client_id
 *   ID of the client.
 * @param string $session_id (optional)
 *   ID of an existing session with ISPConfig. If not set, a new session
 *   will be opened for this request and closed afterwards.
 * @param boolean $show_errors (optional)
 *   Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *   The number of deleted records, or null on errors.
 */
function ispconfig_clients_client_delete($client_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('client_delete', array(
      'client_id' => $client_id,
    ), $session_id, $show_errors);
}

/**
 * Retrieves information about a client.
 *
 * Implements ISPConfig client_get($session_id, $client_id)
 *
 * @param type $client_id
 *   ID of the client.
 * @param string $session_id (optional)
 *   ID of an existing session with ISPConfig. If not set, a new session
 *   will be opened for this request and closed afterwards.
 * @param boolean $show_errors (optional)
 *   Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *   Client information, or null on errors.
 */
function ispconfig_clients_client_get($client_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('client_get', array(
      'client_id' => $client_id,
    ), $session_id, $show_errors);
}

/**
 * Retrieves a list of available client IDs.
 *
 * Implements ISPConfig client_get_all($session_id)
 *
 * @param string $session_id (optional)
 *   ID of an existing session with ISPConfig. If not set, a new session
 *   will be opened for this request and closed afterwards.
 * @param boolean $show_errors (optional)
 *   Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *   Array of available client IDs or null on errors.
 */
function ispconfig_clients_client_get_all($session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('client_get_all', array(), $session_id, $show_errors);
}

/**
 * Shows client information of user.
 *
 * Implements ISPConfig client_get_by_username($session_id, $username).
 *
 * @param string $username
 *  Username of client.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 * Client information or NULL on errors.
 */
function ispconfig_clients_client_get_by_username($username, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module.
  return ispconfig_api_execute('client_get_by_username', array(
      'username' => $username,
    ), $session_id, $show_errors);
}

/**
 * Retrives Client ID of system user.
 *
 * Implements ISPConfig client_get_id($session_id, $sys_userid).
 *
 * @param int $sys_userid
 *  System user ID.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 * Client ID or NULL on errors.
 */
function ispconfig_clients_client_get_id($sys_userid, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module.
  return ispconfig_api_execute('client_get_id', array(
      'sys_userid' => $sys_userid,
    ), $session_id, $show_errors);
}

/**
 * Shows sites of a single user.
 *
 * Implements ISPConfig client_get_sites_by_user($session_id, $sys_userid, $sys_groupid).
 *
 * @param int $sys_userid
 *  System user ID.
 * @param int $sys_groupid
 *  System group ID.
 * @param string $session_id
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 * Client sites and its values information or NULL on errors.
 */
function ispconfig_clients_client_get_sites_by_user($sys_userid, $sys_groupid, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module.
  return ispconfig_api_execute('client_get_sites_by_user', array(
      'sys_userid' => $sys_userid,
      'sys_groupid' => $sys_groupid,
    ), $session_id, $show_errors);
}

/**
 * Returns all client templates.
 *
 * Implements ISPConfig client_templates_get_all($session_id).
 *
 * @param string $session_id
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 * Client templates or NULL on errors.
 */
function ispconfig_clients_client_templates_get_all($session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module.
  return ispconfig_api_execute('client_templates_get_all', array(), $session_id, $show_errors);
}

/**
 * Updates a client.
 *
 * Implements ISPConfig client_update($session_id, $client_id, $reseller_id, $params).
 *
 * @param int $client_id
 *  ID of client.
 * @param int $reseller_id
 *  ID of the reseller.
 * @param array $params
 *  Associative array containing the client information.
 * @param string $session_id
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on errors.
 */
function ispconfig_clients_client_update($client_id, $reseller_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module.
  return ispconfig_api_execute('client_update', array(
      'client_id' => $client_id,
      'reseller_id' => $reseller_id,
      'params' => $params,
    ), $session_id, $show_errors);
}

/**
 * Deletes client.
 *
 * Implements ISPConfig client_delete_everything($session_id, $client_id).
 *
 * @param $client_id
 *  ID of client
 * @param string $session_id
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on errors.
 */
function ispconfig_clients_client_delete_everything($client_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module.
  return ispconfig_api_execute('client_update', array(
      'client_id' => $client_id,
    ), $session_id, $show_errors);
}

//-----------------------------------------------------------------------------
// Additional functions
//-----------------------------------------------------------------------------

/**
 * Retrieves an associative array of available clients.
 *
 * Implements ISPConfig client_get_all($session_id) and
 * Implements ISPConfig client_get($session_id, $client_id)
 *
 * @param string $session_id (optional)
 *   ID of an existing session with ISPConfig. If not set, a new session
 *   will be opened for this request and closed afterwards.
 * @param boolean $show_errors (optional)
 *   Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *   Array with client information of all clients.
 */
function ispconfig_clients_clients_get_all($session_id = '', $show_errors = TRUE) {
  $result = array();

  $own_session = empty($session_id);
  // Whethter we have a valid session or have to open one for this API call.
  if ($own_session) {
    $session_id = ispconfig_api_login($show_errors);
  }
  if (is_null($session_id)) {
    return $result;
  }

  // Get available client IDs
  $client_ids = ispconfig_api_execute('client_get_all', array(), $session_id, $show_errors);

  if (!empty($client_ids)) {
    foreach ($client_ids as $client_id) {
      $result[$client_id] = ispconfig_api_execute('client_get', array(
          'client_id' => $client_id,
        ), $session_id, $show_errors);
    }
  }

  // End the session, if it was opened for this request only.
  if ($own_session) {
    ispconfig_api_logout($session_id, $show_errors);
  }

  return $result;
}