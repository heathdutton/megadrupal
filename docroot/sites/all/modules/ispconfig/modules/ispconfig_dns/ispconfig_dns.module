<?php

/**
 * @file
 * Module to administer ISPConfig DNS from withing Drupal.
 */

/**
 *  Implements hook_ispconfig_api_functions_register().
 */
function ispconfig_dns_ispconfig_api_functions_register() {
  $path = drupal_get_path('module', 'ispconfig_dns');
  $file = 'ispconfig_dns.module';

  // Standard DNS add and update fields for params.
  $dns_fields = array(
    'server_id' => '',  // server_id  (int(11))
    'zone' => '',       // zone  (int(11))
    'name' => '',       // name  (varchar(64))
    'type' => '',       // type  (enum('a','aaaa','alias','cname','hinfo','mx''naptr','ns','ptr','rp','srv','txt'))
    'data' => '',       // data  (varchar(255))
    'aux' => '',        // aux  (int(11))
    'ttl' => '',        // ttl  (int(11))
    'active' => '',     // active  (enum('n','y'))
    'stamp' => '',      // stamp  (timestamp)
    'serial' => '',     // serial  (int(10))
  );

  return array(
    // Native API functions.
    'dns_a_add' => array(
      'name' => 'dns_a_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_add' => array(
          'title' => t('Adds new DNS'),
          'description' => t('Allows adding a new DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_a_add',
      'file' => $file,
      'path' => $path,
    ),
    'dns_a_delete' => array(
      'name' => 'dns_a_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_delete' => array(
          'title' => t('Delete DNS'),
          'description' => t('Allows deleting DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_a_delete',
      'file' => $file,
      'path' => $path,
    ),
    'dns_a_get' => array(
      'name' => 'dns_a_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_get' => array(
          'title' => t('Get DNS'),
          'description' => t('Allows receiving DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_a_get',
      'file' => $file,
      'path' => $path,
    ),
    'dns_a_update' => array(
      'name' => 'dns_a_update',
      'parameters' => array(
        'client_id' => 0,
        'primary_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_update' => array(
          'title' => t('Update DNS'),
          'description' => t('Allows updating DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_a_update',
      'file' => $file,
      'path' => $path,
    ),
    'dns_aaaa_add' => array(
      'name' => 'dns_aaaa_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_add' => array(
          'title' => t('Adds new DNS'),
          'description' => t('Allows adding a new DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_aaaa_add',
      'file' => $file,
      'path' => $path,
    ),
    'dns_aaaa_delete' => array(
      'name' => 'dns_aaaa_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_delete' => array(
          'title' => t('Delete DNS'),
          'description' => t('Allows deleting DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_aaaa_delete',
      'file' => $file,
      'path' => $path,
    ),
    'dns_aaaa_get' => array(
      'name' => 'dns_aaaa_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_get' => array(
          'title' => t('Get DNS'),
          'description' => t('Allows receiving DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_aaaa_get',
      'file' => $file,
      'path' => $path,
    ),
    'dns_aaaa_update' => array(
      'name' => 'dns_aaaa_update',
      'parameters' => array(
        'client_id' => 0,
        'primary_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_update' => array(
          'title' => t('Update DNS'),
          'description' => t('Allows updating DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_aaaa_update',
      'file' => $file,
      'path' => $path,
    ),
    'dns_alias_add' => array(
      'name' => 'dns_alias_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_add' => array(
          'title' => t('Adds new DNS'),
          'description' => t('Allows adding a new DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_alias_add',
      'file' => $file,
      'path' => $path,
    ),
    'dns_alias_delete' => array(
      'name' => 'dns_alias_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_delete' => array(
          'title' => t('Delete DNS'),
          'description' => t('Allows deleting DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_alias_delete',
      'file' => $file,
      'path' => $path,
    ),
    'dns_alias_get' => array(
      'name' => 'dns_alias_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_get' => array(
          'title' => t('Get DNS'),
          'description' => t('Allows receiving DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_alias_get',
      'file' => $file,
      'path' => $path,
    ),
    'dns_alias_update' => array(
      'name' => 'dns_alias_update',
      'parameters' => array(
        'client_id' => 0,
        'primary_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_update' => array(
          'title' => t('Update DNS'),
          'description' => t('Allows updating DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_alias_update',
      'file' => $file,
      'path' => $path,
    ),
    'dns_cname_add' => array(
      'name' => 'dns_cname_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_add' => array(
          'title' => t('Adds new DNS'),
          'description' => t('Allows adding a new DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_cname_add',
      'file' => $file,
      'path' => $path,
    ),
    'dns_cname_delete' => array(
      'name' => 'dns_cname_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_delete' => array(
          'title' => t('Delete DNS'),
          'description' => t('Allows deleting DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_cname_delete',
      'file' => $file,
      'path' => $path,
    ),
    'dns_cname_get' => array(
      'name' => 'dns_cname_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_get' => array(
          'title' => t('Get DNS'),
          'description' => t('Allows receiving DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_cname_get',
      'file' => $file,
      'path' => $path,
    ),
    'dns_cname_update' => array(
      'name' => 'dns_cname_update',
      'parameters' => array(
        'client_id' => 0,
        'primary_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_update' => array(
          'title' => t('Update DNS'),
          'description' => t('Allows updating DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_cname_update',
      'file' => $file,
      'path' => $path,
    ),
    'dns_hinfo_add' => array(
      'name' => 'dns_hinfo_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_add' => array(
          'title' => t('Adds new DNS'),
          'description' => t('Allows adding a new DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_hinfo_add',
      'file' => $file,
      'path' => $path,
    ),
    'dns_hinfo_delete' => array(
      'name' => 'dns_hinfo_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_delete' => array(
          'title' => t('Delete DNS'),
          'description' => t('Allows deleting DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_hinfo_delete',
      'file' => $file,
      'path' => $path,
    ),
    'dns_hinfo_get' => array(
      'name' => 'dns_hinfo_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_get' => array(
          'title' => t('Get DNS'),
          'description' => t('Allows receiving DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_hinfo_get',
      'file' => $file,
      'path' => $path,
    ),
    'dns_hinfo_update' => array(
      'name' => 'dns_hinfo_update',
      'parameters' => array(
        'client_id' => 0,
        'primary_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_update' => array(
          'title' => t('Update DNS'),
          'description' => t('Allows updating DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_hinfo_update',
      'file' => $file,
      'path' => $path,
    ),
    'dns_mx_add' => array(
      'name' => 'dns_mx_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_add' => array(
          'title' => t('Adds new DNS'),
          'description' => t('Allows adding a new DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_mx_add',
      'file' => $file,
      'path' => $path,
    ),
    'dns_mx_delete' => array(
      'name' => 'dns_mx_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_delete' => array(
          'title' => t('Delete DNS'),
          'description' => t('Allows deleting DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_mx_delete',
      'file' => $file,
      'path' => $path,
    ),
    'dns_mx_get' => array(
      'name' => 'dns_mx_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_get' => array(
          'title' => t('Get DNS'),
          'description' => t('Allows receiving DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_mx_get',
      'file' => $file,
      'path' => $path,
    ),
    'dns_mx_update' => array(
      'name' => 'dns_mx_update',
      'parameters' => array(
        'client_id' => 0,
        'primary_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_update' => array(
          'title' => t('Update DNS'),
          'description' => t('Allows updating DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_mx_update',
      'file' => $file,
      'path' => $path,
    ),
    'dns_ns_add' => array(
      'name' => 'dns_ns_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_add' => array(
          'title' => t('Adds new DNS'),
          'description' => t('Allows adding a new DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_ns_add',
      'file' => $file,
      'path' => $path,
    ),
    'dns_ns_delete' => array(
      'name' => 'dns_ns_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_delete' => array(
          'title' => t('Delete DNS'),
          'description' => t('Allows deleting DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_ns_delete',
      'file' => $file,
      'path' => $path,
    ),
    'dns_ns_get' => array(
      'name' => 'dns_ns_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_get' => array(
          'title' => t('Get DNS'),
          'description' => t('Allows receiving DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_ns_get',
      'file' => $file,
      'path' => $path,
    ),
    'dns_ns_update' => array(
      'name' => 'dns_ns_update',
      'parameters' => array(
        'client_id' => 0,
        'primary_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_update' => array(
          'title' => t('Update DNS'),
          'description' => t('Allows updating DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_ns_update',
      'file' => $file,
      'path' => $path,
    ),
    'dns_ptr_add' => array(
      'name' => 'dns_ptr_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_add' => array(
          'title' => t('Adds new DNS'),
          'description' => t('Allows adding a new DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_ptr_add',
      'file' => $file,
      'path' => $path,
    ),
    'dns_ptr_delete' => array(
      'name' => 'dns_ptr_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_delete' => array(
          'title' => t('Delete DNS'),
          'description' => t('Allows deleting DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_ptr_delete',
      'file' => $file,
      'path' => $path,
    ),
    'dns_ptr_get' => array(
      'name' => 'dns_ptr_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_get' => array(
          'title' => t('Get DNS'),
          'description' => t('Allows receiving DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_ptr_get',
      'file' => $file,
      'path' => $path,
    ),
    'dns_ptr_update' => array(
      'name' => 'dns_ptr_update',
      'parameters' => array(
        'client_id' => 0,
        'primary_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_update' => array(
          'title' => t('Update DNS'),
          'description' => t('Allows updating DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_ptr_update',
      'file' => $file,
      'path' => $path,
    ),
    'dns_rp_add' => array(
      'name' => 'dns_rp_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_add' => array(
          'title' => t('Adds new DNS'),
          'description' => t('Allows adding a new DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_rp_add',
      'file' => $file,
      'path' => $path,
    ),
    'dns_rp_delete' => array(
      'name' => 'dns_rp_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_delete' => array(
          'title' => t('Delete DNS'),
          'description' => t('Allows deleting DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_rp_delete',
      'file' => $file,
      'path' => $path,
    ),
    'dns_rp_get' => array(
      'name' => 'dns_rp_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_get' => array(
          'title' => t('Get DNS'),
          'description' => t('Allows receiving DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_rp_get',
      'file' => $file,
      'path' => $path,
    ),
    'dns_rp_update' => array(
      'name' => 'dns_rp_update',
      'parameters' => array(
        'client_id' => 0,
        'primary_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_update' => array(
          'title' => t('Update DNS'),
          'description' => t('Allows updating DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_rp_update',
      'file' => $file,
      'path' => $path,
    ),
    'dns_srv_add' => array(
      'name' => 'dns_srv_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_add' => array(
          'title' => t('Adds new DNS'),
          'description' => t('Allows adding a new DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_srv_add',
      'file' => $file,
      'path' => $path,
    ),
    'dns_srv_delete' => array(
      'name' => 'dns_srv_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_delete' => array(
          'title' => t('Delete DNS'),
          'description' => t('Allows deleting DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_srv_delete',
      'file' => $file,
      'path' => $path,
    ),
    'dns_srv_get' => array(
      'name' => 'dns_srv_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_get' => array(
          'title' => t('Get DNS'),
          'description' => t('Allows receiving DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_srv_get',
      'file' => $file,
      'path' => $path,
    ),
    'dns_srv_update' => array(
      'name' => 'dns_srv_update',
      'parameters' => array(
        'client_id' => 0,
        'primary_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_update' => array(
          'title' => t('Update DNS'),
          'description' => t('Allows updating DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_srv_update',
      'file' => $file,
      'path' => $path,
    ),
    'dns_txt_add' => array(
      'name' => 'dns_txt_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_add' => array(
          'title' => t('Adds new DNS'),
          'description' => t('Allows adding a new DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_txt_add',
      'file' => $file,
      'path' => $path,
    ),
    'dns_txt_delete' => array(
      'name' => 'dns_txt_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_delete' => array(
          'title' => t('Delete DNS'),
          'description' => t('Allows deleting DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_txt_delete',
      'file' => $file,
      'path' => $path,
    ),
    'dns_txt_get' => array(
      'name' => 'dns_txt_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_get' => array(
          'title' => t('Get DNS'),
          'description' => t('Allows receiving DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_txt_get',
      'file' => $file,
      'path' => $path,
    ),
    'dns_txt_update' => array(
      'name' => 'dns_txt_update',
      'parameters' => array(
        'client_id' => 0,
        'primary_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_update' => array(
          'title' => t('Update DNS'),
          'description' => t('Allows updating DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_txt_update',
      'file' => $file,
      'path' => $path,
    ),
    'dns_zone_add' => array(
      'name' => 'dns_zone_add',
      'parameters' => array(
        'client_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_add' => array(
          'title' => t('Adds new DNS'),
          'description' => t('Allows adding a new DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_zone_add',
      'file' => $file,
      'path' => $path,
    ),
    'dns_zone_delete' => array(
      'name' => 'dns_zone_delete',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_delete' => array(
          'title' => t('Delete DNS'),
          'description' => t('Allows deleting DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_zone_delete',
      'file' => $file,
      'path' => $path,
    ),
    'dns_zone_get' => array(
      'name' => 'dns_zone_get',
      'parameters' => array(
        'primary_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_get' => array(
          'title' => t('Get DNS'),
          'description' => t('Allows receiving DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_zone_get',
      'file' => $file,
      'path' => $path,
    ),
    'dns_zone_update' => array(
      'name' => 'dns_zone_update',
      'parameters' => array(
        'client_id' => 0,
        'primary_id' => 0,
        'params' => $dns_fields,
      ),
      'access' => array(
        'ispconfig_dns dns_update' => array(
          'title' => t('Update DNS'),
          'description' => t('Allows updating DNS information to ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_zone_update',
      'file' => $file,
      'path' => $path,
    ),
    'dns_rr_get_all_by_zone' => array(
      'name' => 'dns_rr_get_all_by_zone',
      'parameters' => array(
        'zone_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_get' => array(
          'title' => t('Get DNS'),
          'description' => t('Allows receiving DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_rr_get_all_by_zone',
      'file' => $file,
      'path' => $path,
    ),
    'dns_zone_get_by_user' => array(
      'name' => 'dns_zone_get_by_user',
      'parameters' => array(
        'client_id' => 0,
        'server_id' => 0,
      ),
      'access' => array(
        'ispconfig_dns dns_get' => array(
          'title' => t('Get DNS'),
          'description' => t('Allows receiving DNS information from ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_zone_get_by_user',
      'file' => $file,
      'path' => $path,
    ),
    'dns_zone_set_status' => array(
      'name' => 'dns_zone_set_status',
      'parameters' => array(
        'primary_id' => 0,
        'status' => '',
      ),
      'access' => array(
        'ispconfig_dns dns_set' => array(
          'title' => t('Set DNS status'),
          'description' => t('Allows switching DNS zone status in ISPConfig.'),
        ),
      ),
      'native' => TRUE,
      'module' => 'ispconfig_dns',
      'callback' => 'ispconfig_dns_dns_zone_set_status',
      'file' => $file,
      'path' => $path,
    ),
  );
}

/**
 * Implements hook_help().
 */
function ispconfig_dns_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ispconfig_dns':
      return '<p>' . t('ISPConfig Help') . '</p>';
  }
}

//-----------------------------------------------------------------------------
// API functions of ISPConfig
//-----------------------------------------------------------------------------

/**
 * Adds a dns IPv4 record if type is a.
 *
 * Implements ISPConfig dns_a_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param  array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_dns_dns_a_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_a_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a dns IPv6 resource record if type is aaaa.
 *
 * Implements ISPConfig dns_aaaa_add($session_id, $client_id, $params).
 *
 * @param $client_id
 *  ID of the Client.
 * @param $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_dns_dns_aaaa_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_aaaa_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a dns server side alias record if type is alias.
 *
 * Implements ISPConfig dns_alias_add($session_id, $client_id, $params).
 *
 * @param $client_id
 *  ID of the Client.
 * @param $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_dns_dns_alias_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_alias_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a dns canonical alias name record if type is cname.
 *
 * Implements ISPConfig dns_cname_add($session_id, $client_id, $params).
 *
 * @param $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_dns_dns_cname_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_cname_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a dns host information record if type is hinfo.
 *
 * Implements ISPConfig dns_hinfo_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_dns_dns_hinfo_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_hinfo_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a dns mail exchanger record if type is mx.
 *
 * Implements ISPConfig dns_mx_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_dns_dns_mx_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_mx_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a dns authoritative nameserver record if type is ns.
 *
 * Implements ISPConfig dns_ns_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_dns_dns_ns_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_ns_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a dns domain name pointer record if type is ptr.
 *
 * Implements ISPConfig dns_ptr_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_dns_dns_ptr_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_ptr_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a dns responsible person record if type is rp.
 *
 * Implements ISPConfig dns_rp_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_dns_dns_rp_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_rp_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a dns server location record if type is srv.
 *
 * Implements ISPConfig dns_srv_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_dns_dns_srv_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_srv_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a dns text string record if type is txt.
 *
 * Implements ISPConfig dns_txt_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_dns_dns_txt_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_txt_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Adds a new dns zone.
 *
 * Implements ISPConfig dns_zone_add($session_id, $client_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  ID of newly added resource or NULL on errors.
 */
function ispconfig_dns_dns_zone_add($client_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_zone_add', array(
    'client_id' => $client_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates an IPv4 record if type is a.
 *
 * Implements ISPConfig dns_a_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_dns_dns_a_update($client_id, $primary_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_a_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a dns IPv6 resource record if type is aaaa.
 *
 * Implements ISPConfig dns_aaaa_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_dns_dns_aaaa_update($client_id, $primary_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_aaaa_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a dns server side alias record if type is alias.
 *
 * Implements ISPConfig dns_alias_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_dns_dns_alias_update($client_id, $primary_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_alias_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a dns canonical alias name record if type is cname.
 *
 * Implements ISPConfig dns_cname_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_dns_dns_cname_update($client_id, $primary_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_cname_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a dns host information record if type is hinfo.
 *
 * Implements ISPConfig dns_hinfo_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_dns_dns_hinfo_update($client_id, $primary_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_hinfo_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a dns mail exchanger record if type is mx.
 *
 * Implements ISPConfig dns_mx_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_dns_dns_mx_update($client_id, $primary_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module.
  return ispconfig_api_execute('dns_mx_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates an authoritative nameserver record if type is ns.
 *
 * Implements ISPConfig dns_ns_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_dns_dns_ns_update($client_id, $primary_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module.
  return ispconfig_api_execute('dns_ns_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a dns domain name pointer record if type is ptr.
 *
 * Implements ISPConfig dns_ptr_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_dns_dns_ptr_update($client_id, $primary_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module.
  return ispconfig_api_execute('dns_ptr_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a dns responsible person record if type is rp.
 *
 * Implements ISPConfig dns_rp_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_dns_dns_rp_update($client_id, $primary_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_rp_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a dns server location record if type is srv.
 *
 * Implements ISPConfig dns_srv_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_dns_dns_srv_update($client_id, $primary_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_srv_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a dns text string record if type is txt.
 *
 * Implements ISPConfig dns_txt_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_dns_dns_txt_update($client_id, $primary_id ,$params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_txt_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Updates a dns zone.
 *
 * Implements ISPConfig dns_zone_update($session_id, $client_id, $primary_id, $params).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $primary_id
 *  ID of target resource.
 * @param array $params
 *  Associative array containing the dns information.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of affected rows or NULL on error.
 */
function ispconfig_dns_dns_zone_update($client_id, $primary_id, $params, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_zone_update', array(
    'client_id' => $client_id,
    'primary_id' => $primary_id,
    'params' => $params,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about target dns IPv4 resource record.
 *
 * Implements ISPConfig dns_a_get($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_dns_dns_a_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_a_get', array(
    'client_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about target dns IPv6 resource record.
 *
 * Implements ISPConfig dns_aaaa_get($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_dns_dns_aaaa_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_aaaa_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a dns server side alias resource record.
 *
 * Implements ISPConfig dns_alias_get($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_dns_dns_alias_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_alias_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about target dns cname resource record.
 *
 * Implements ISPConfig dns_cname_get($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_dns_dns_cname_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_cname_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about target dns hinfo resource record.
 *
 * Implements ISPConfig dns_hinfo_get($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_dns_dns_hinfo_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_hinfo_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about target dns mx resource record.
 *
 * Implements ISPConfig dns_mx_get($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_dns_dns_mx_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_mx_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about target dns ns resource record.
 *
 * Implements ISPConfig dns_ns_get($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_dns_dns_ns_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_ns_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about target dns ptr resource record.
 *
 * Implements ISPConfig dns_ptr_get($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_dns_dns_ptr_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_ptr_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about target dns rp resource record.
 *
 * Implements ISPConfig dns_rp_get($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_dns_dns_rp_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_rp_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about target dns srv resource record.
 *
 * Implements ISPConfig dns_srv_get($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_dns_dns_srv_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_srv_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about target dns txt resource record.
 *
 * Implements ISPConfig dns_txt_get($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_dns_dns_txt_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_txt_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Retrieves information about a dns zone.
 *
 * Implements ISPConfig dns_zone_get($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  All fields and values of chosen resource or NULL on error.
 */
function ispconfig_dns_dns_zone_get($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_zone_get', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes target dns IPv4 resource record.
 *
 * Implements ISPConfig dns_a_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_dns_dns_a_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_a_delete', array(
    'client_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes target dns IPv6 resource record.
 *
 * Implements ISPConfig dns_aaaa_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_dns_dns_aaaa_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_aaaa_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes target dns alias resource record.
 *
 * Implements ISPConfig dns_alias_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_dns_dns_alias_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_alias_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes target dns cname resource record.
 *
 * Implements ISPConfig dns_cname_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_dns_dns_cname_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_cname_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes target dns hinfo resource record.
 *
 * Implements ISPConfig dns_hinfo_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_dns_dns_hinfo_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_hinfo_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes target dns mx resource record.
 *
 * Implements ISPConfig dns_mx_delete($session_id, $primary_id).
 *
 * @param $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_dns_dns_mx_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_mx_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes target dns ns resource record.
 *
 * Implements ISPConfig dns_ns_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_dns_dns_ns_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_ns_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes target dns ptr resource record.
 *
 * Implements ISPConfig dns_ptr_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_dns_dns_ptr_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_ptr_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes target dns rp resource record.
 *
 * Implements ISPConfig dns_rp_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_dns_dns_rp_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_rp_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes target dns srv resource record.
 *
 * Implements ISPConfig dns_srv_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_dns_dns_srv_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_srv_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes target dns txt resource record.
 *
 * Implements ISPConfig dns_txt_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_dns_dns_txt_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_txt_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Deletes a dns zone.
 *
 * Implements ISPConfig dns_zone_delete($session_id, $primary_id).
 *
 * @param int $primary_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Number of deleted records or NULL on error.
 */
function ispconfig_dns_dns_zone_delete($primary_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_zone_delete', array(
    'primary_id' => $primary_id,
  ), $session_id, $show_errors);
}

/**
 * Shows information about a zone's resource records.
 *
 * Implements ISPConfig dns_rr_get_all_by_zone($session_id, $zone_id).
 *
 * @param int $zone_id
 *  ID of target resource.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Records of zone parameters' or NULL on error.
 */
function ispconfig_dns_dns_rr_get_all_by_zone($zone_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_rr_get_all_by_zone', array(
    'zone_id' => $zone_id,
  ), $session_id, $show_errors);
}

/**
 * Shows information about a client's zones.
 *
 * Implements ISPConfig dns_zone_get_by_user($session_id, $client_id, $server_id).
 *
 * @param int $client_id
 *  ID of the Client.
 * @param int $server_id
 *  ID of target server.
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Record of parameters of client's zone or NULL on error.
 */
function ispconfig_dns_dns_zone_get_by_user($client_id, $server_id, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_zone_get_by_user', array(
    'client_id' => $client_id,
    'server_id' => $server_id,
  ), $session_id, $show_errors);
}

/**
 * Switches a zone's status to either 'active' or 'inactive'.
 *
 * Implements ISPConfig dns_zone_set_status($session_id, $primary_id, $status).
 *
 * @param int $primary_id
 *  ID of the Client.
 * @param string $status
 *  Zone status (either 'active' or 'inactive')
 * @param string $session_id (optional)
 *  ID of an existing session with ISPConfig. If not set, a new session
 *  will be opened for this request and closed afterwards.
 * @param bool $show_errors (optional)
 *  Whether to show errors (true) or not (false). Defaults to true.
 * @return mixed
 *  Record of parameters of client's zone or NULL on error.
 */
function ispconfig_dns_dns_zone_set_status($primary_id, $status, $session_id = '', $show_errors = TRUE) {
  // Call the ispconfig core module
  return ispconfig_api_execute('dns_zone_set_status', array(
    'primary_id' => $primary_id,
    'status' => $status,
  ), $session_id, $show_errors);
}